var num=function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=13)}([function(t,n,e){"use strict";e.r(n),function(t,r,o,i){e.d(n,"AdadeltaOptimizer",(function(){return Kh})),e.d(n,"AdagradOptimizer",(function(){return jh})),e.d(n,"AdamOptimizer",(function(){return Xh})),e.d(n,"AdamaxOptimizer",(function(){return Yh})),e.d(n,"DataStorage",(function(){return yo})),e.d(n,"ENV",(function(){return d})),e.d(n,"Environment",(function(){return l})),e.d(n,"KernelBackend",(function(){return xo})),e.d(n,"MomentumOptimizer",(function(){return Qh})),e.d(n,"Optimizer",(function(){return qh})),e.d(n,"RMSPropOptimizer",(function(){return Jh})),e.d(n,"Rank",(function(){return Rt})),e.d(n,"Reduction",(function(){return Wl})),e.d(n,"SGDOptimizer",(function(){return $h})),e.d(n,"Tensor",(function(){return Et})),e.d(n,"TensorBuffer",(function(){return xt})),e.d(n,"Variable",(function(){return Tt})),e.d(n,"abs",(function(){return Lu})),e.d(n,"acos",(function(){return Wu})),e.d(n,"acosh",(function(){return Uu})),e.d(n,"add",(function(){return Ls})),e.d(n,"addN",(function(){return Ws})),e.d(n,"addStrict",(function(){return Us})),e.d(n,"all",(function(){return rl})),e.d(n,"any",(function(){return ol})),e.d(n,"argMax",(function(){return il})),e.d(n,"argMin",(function(){return al})),e.d(n,"asin",(function(){return zu})),e.d(n,"asinh",(function(){return Vu})),e.d(n,"atan",(function(){return Gu})),e.d(n,"atan2",(function(){return zs})),e.d(n,"atanh",(function(){return Hu})),e.d(n,"avgPool",(function(){return jc})),e.d(n,"avgPool3d",(function(){return $c})),e.d(n,"backend",(function(){return fe})),e.d(n,"backend_util",(function(){return Wo})),e.d(n,"basicLSTMCell",(function(){return El})),e.d(n,"batchNorm",(function(){return As})),e.d(n,"batchNorm2d",(function(){return Ts})),e.d(n,"batchNorm3d",(function(){return Ds})),e.d(n,"batchNorm4d",(function(){return Ns})),e.d(n,"batchNormalization",(function(){return Ss})),e.d(n,"batchNormalization2d",(function(){return Rs})),e.d(n,"batchNormalization3d",(function(){return Is})),e.d(n,"batchNormalization4d",(function(){return ks})),e.d(n,"batchToSpaceND",(function(){return vr})),e.d(n,"booleanMaskAsync",(function(){return wc})),e.d(n,"broadcastTo",(function(){return mr})),e.d(n,"browser",(function(){return Oh})),e.d(n,"buffer",(function(){return dr})),e.d(n,"cast",(function(){return gr})),e.d(n,"ceil",(function(){return qu})),e.d(n,"clipByValue",(function(){return Ku})),e.d(n,"clone",(function(){return yr})),e.d(n,"complex",(function(){return Te})),e.d(n,"concat",(function(){return Ye})),e.d(n,"concat1d",(function(){return $e})),e.d(n,"concat2d",(function(){return Qe})),e.d(n,"concat3d",(function(){return Je})),e.d(n,"concat4d",(function(){return Ze})),e.d(n,"conv1d",(function(){return Ic})),e.d(n,"conv2d",(function(){return kc})),e.d(n,"conv2dTranspose",(function(){return Oc})),e.d(n,"conv3d",(function(){return Sc})),e.d(n,"conv3dTranspose",(function(){return Mc})),e.d(n,"cos",(function(){return ju})),e.d(n,"cosh",(function(){return Xu})),e.d(n,"cumsum",(function(){return xr})),e.d(n,"customGrad",(function(){return po})),e.d(n,"deprecationWarn",(function(){return Yn})),e.d(n,"depthToSpace",(function(){return br})),e.d(n,"depthwiseConv2d",(function(){return Dc})),e.d(n,"diag",(function(){return Bl})),e.d(n,"disableDeprecationWarnings",(function(){return Xn})),e.d(n,"dispose",(function(){return ne})),e.d(n,"disposeVariables",(function(){return $n})),e.d(n,"div",(function(){return Vs})),e.d(n,"divNoNan",(function(){return Gs})),e.d(n,"divStrict",(function(){return Hs})),e.d(n,"dot",(function(){return Pc})),e.d(n,"dropout",(function(){return Pl})),e.d(n,"elu",(function(){return pl})),e.d(n,"enableDebugMode",(function(){return jn})),e.d(n,"enableProdMode",(function(){return Kn})),e.d(n,"engine",(function(){return Qn})),e.d(n,"env",(function(){return h})),e.d(n,"equal",(function(){return ic})),e.d(n,"equalStrict",(function(){return ac})),e.d(n,"erf",(function(){return Yu})),e.d(n,"exp",(function(){return $u})),e.d(n,"expandDims",(function(){return wr})),e.d(n,"expm1",(function(){return Qu})),e.d(n,"eye",(function(){return Cr})),e.d(n,"fft",(function(){return Tl})),e.d(n,"fill",(function(){return He})),e.d(n,"findBackend",(function(){return se})),e.d(n,"findBackendFactory",(function(){return ce})),e.d(n,"floor",(function(){return Ju})),e.d(n,"floorDiv",(function(){return qs})),e.d(n,"frame",(function(){return Vl})),e.d(n,"fused",(function(){return Cf})),e.d(n,"gather",(function(){return xc})),e.d(n,"gatherND",(function(){return Ml})),e.d(n,"gather_util",(function(){return Xr})),e.d(n,"getBackend",(function(){return ae})),e.d(n,"getGradient",(function(){return g})),e.d(n,"getKernel",(function(){return m})),e.d(n,"getKernelsForBackend",(function(){return y})),e.d(n,"grad",(function(){return so})),e.d(n,"grads",(function(){return co})),e.d(n,"greater",(function(){return uc})),e.d(n,"greaterEqual",(function(){return sc})),e.d(n,"greaterEqualStrict",(function(){return cc})),e.d(n,"greaterStrict",(function(){return lc})),e.d(n,"hammingWindow",(function(){return zl})),e.d(n,"hannWindow",(function(){return Ul})),e.d(n,"ifft",(function(){return Dl})),e.d(n,"imag",(function(){return Ne})),e.d(n,"image",(function(){return pf})),e.d(n,"inTopKAsync",(function(){return ql})),e.d(n,"io",(function(){return Dh})),e.d(n,"irfft",(function(){return _l})),e.d(n,"isFinite",(function(){return ls})),e.d(n,"isInf",(function(){return cs})),e.d(n,"isNaN",(function(){return ss})),e.d(n,"keep",(function(){return ee})),e.d(n,"leakyRelu",(function(){return vl})),e.d(n,"less",(function(){return fc})),e.d(n,"lessEqual",(function(){return hc})),e.d(n,"lessEqualStrict",(function(){return dc})),e.d(n,"lessStrict",(function(){return pc})),e.d(n,"linalg",(function(){return uf})),e.d(n,"linspace",(function(){return qe})),e.d(n,"localResponseNormalization",(function(){return wl})),e.d(n,"log",(function(){return Zu})),e.d(n,"log1p",(function(){return ts})),e.d(n,"logSigmoid",(function(){return ns})),e.d(n,"logSoftmax",(function(){return go})),e.d(n,"logSumExp",(function(){return ul})),e.d(n,"logicalAnd",(function(){return _s})),e.d(n,"logicalNot",(function(){return Fs})),e.d(n,"logicalOr",(function(){return Os})),e.d(n,"logicalXor",(function(){return Ms})),e.d(n,"losses",(function(){return nf})),e.d(n,"matMul",(function(){return Bc})),e.d(n,"math",(function(){return _h})),e.d(n,"max",(function(){return sl})),e.d(n,"maxPool",(function(){return Kc})),e.d(n,"maxPool3d",(function(){return Yc})),e.d(n,"maximum",(function(){return Ks})),e.d(n,"maximumStrict",(function(){return js})),e.d(n,"mean",(function(){return cl})),e.d(n,"memory",(function(){return Jn})),e.d(n,"min",(function(){return ll})),e.d(n,"minimum",(function(){return Xs})),e.d(n,"minimumStrict",(function(){return Ys})),e.d(n,"mod",(function(){return $s})),e.d(n,"modStrict",(function(){return Qs})),e.d(n,"moments",(function(){return fl})),e.d(n,"movingAverage",(function(){return Il})),e.d(n,"mul",(function(){return Js})),e.d(n,"mulStrict",(function(){return Zs})),e.d(n,"multiRNNCell",(function(){return Rl})),e.d(n,"multinomial",(function(){return Er})),e.d(n,"neg",(function(){return es})),e.d(n,"nextFrame",(function(){return ed})),e.d(n,"norm",(function(){return Cl})),e.d(n,"notEqual",(function(){return vc})),e.d(n,"notEqualStrict",(function(){return mc})),e.d(n,"oneHot",(function(){return Rr})),e.d(n,"ones",(function(){return Ve})),e.d(n,"onesLike",(function(){return je})),e.d(n,"op",(function(){return Ae})),e.d(n,"outerProduct",(function(){return Lc})),e.d(n,"pad",(function(){return Ir})),e.d(n,"pad1d",(function(){return kr})),e.d(n,"pad2d",(function(){return Sr})),e.d(n,"pad3d",(function(){return Ar})),e.d(n,"pad4d",(function(){return Tr})),e.d(n,"pool",(function(){return Xc})),e.d(n,"pow",(function(){return tc})),e.d(n,"powStrict",(function(){return nc})),e.d(n,"prelu",(function(){return ml})),e.d(n,"print",(function(){return pr})),e.d(n,"prod",(function(){return dl})),e.d(n,"profile",(function(){return Zn})),e.d(n,"rand",(function(){return Dr})),e.d(n,"randomGamma",(function(){return _r})),e.d(n,"randomNormal",(function(){return Nr})),e.d(n,"randomUniform",(function(){return Fr})),e.d(n,"range",(function(){return Ke})),e.d(n,"ready",(function(){return ie})),e.d(n,"real",(function(){return De})),e.d(n,"reciprocal",(function(){return rs})),e.d(n,"registerBackend",(function(){return le})),e.d(n,"registerGradient",(function(){return b})),e.d(n,"registerKernel",(function(){return x})),e.d(n,"relu",(function(){return gl})),e.d(n,"relu6",(function(){return yl})),e.d(n,"removeBackend",(function(){return ue})),e.d(n,"reshape",(function(){return Or})),e.d(n,"reverse",(function(){return Wc})),e.d(n,"reverse1d",(function(){return Uc})),e.d(n,"reverse2d",(function(){return zc})),e.d(n,"reverse3d",(function(){return Vc})),e.d(n,"reverse4d",(function(){return Gc})),e.d(n,"rfft",(function(){return Nl})),e.d(n,"round",(function(){return os})),e.d(n,"rsqrt",(function(){return is})),e.d(n,"scalar",(function(){return Oe})),e.d(n,"scatterND",(function(){return Al})),e.d(n,"scatter_util",(function(){return Zr})),e.d(n,"selu",(function(){return xl})),e.d(n,"separableConv2d",(function(){return Fc})),e.d(n,"serialization",(function(){return Lh})),e.d(n,"setBackend",(function(){return oe})),e.d(n,"setPlatform",(function(){return he})),e.d(n,"setdiff1dAsync",(function(){return zr})),e.d(n,"sigmoid",(function(){return as})),e.d(n,"sign",(function(){return us})),e.d(n,"signal",(function(){return Hl})),e.d(n,"sin",(function(){return fs})),e.d(n,"sinh",(function(){return hs})),e.d(n,"slice",(function(){return Qc})),e.d(n,"slice1d",(function(){return Jc})),e.d(n,"slice2d",(function(){return Zc})),e.d(n,"slice3d",(function(){return tl})),e.d(n,"slice4d",(function(){return nl})),e.d(n,"slice_util",(function(){return uo})),e.d(n,"softmax",(function(){return mo})),e.d(n,"softplus",(function(){return ds})),e.d(n,"spaceToBatchND",(function(){return Mr})),e.d(n,"sparseToDense",(function(){return Ol})),e.d(n,"spectral",(function(){return Fl})),e.d(n,"split",(function(){return tr})),e.d(n,"sqrt",(function(){return ps})),e.d(n,"square",(function(){return Mu})),e.d(n,"squaredDifference",(function(){return Pu})),e.d(n,"squaredDifferenceStrict",(function(){return ec})),e.d(n,"squeeze",(function(){return Br})),e.d(n,"stack",(function(){return Pr})),e.d(n,"step",(function(){return vs})),e.d(n,"stft",(function(){return Gl})),e.d(n,"stridedSlice",(function(){return kl})),e.d(n,"sub",(function(){return rc})),e.d(n,"subStrict",(function(){return oc})),e.d(n,"sum",(function(){return hl})),e.d(n,"sumOutType",(function(){return _t})),e.d(n,"tan",(function(){return ms})),e.d(n,"tanh",(function(){return gs})),e.d(n,"tensor",(function(){return _e})),e.d(n,"tensor1d",(function(){return Me})),e.d(n,"tensor2d",(function(){return Be})),e.d(n,"tensor3d",(function(){return Pe})),e.d(n,"tensor4d",(function(){return Le})),e.d(n,"tensor5d",(function(){return We})),e.d(n,"tensor6d",(function(){return Ue})),e.d(n,"tensor_util",(function(){return Pt})),e.d(n,"test_util",(function(){return Vh})),e.d(n,"tidy",(function(){return te})),e.d(n,"tile",(function(){return Lr})),e.d(n,"time",(function(){return re})),e.d(n,"topk",(function(){return Sl})),e.d(n,"train",(function(){return td})),e.d(n,"transpose",(function(){return bl})),e.d(n,"truncatedNormal",(function(){return Wr})),e.d(n,"unregisterGradient",(function(){return C})),e.d(n,"unregisterKernel",(function(){return w})),e.d(n,"unsortedSegmentSum",(function(){return bc})),e.d(n,"unstack",(function(){return Ur})),e.d(n,"util",(function(){return dt})),e.d(n,"valueAndGrad",(function(){return lo})),e.d(n,"valueAndGrads",(function(){return fo})),e.d(n,"variable",(function(){return ze})),e.d(n,"variableGrads",(function(){return ho})),e.d(n,"version_core",(function(){return Gh})),e.d(n,"webgl",(function(){return Hh})),e.d(n,"where",(function(){return Bs})),e.d(n,"whereAsync",(function(){return Ps})),e.d(n,"zeros",(function(){return Ge})),e.d(n,"zerosLike",(function(){return Xe}));
/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var a=function(t,n){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)};function u(t,n){function e(){this.constructor=t}a(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}function s(t,n,e,r){return new(e||(e=Promise))((function(o,i){function a(t){try{s(r.next(t))}catch(t){i(t)}}function u(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){t.done?o(t.value):new e((function(n){n(t.value)})).then(a,u)}s((r=r.apply(t,n||[])).next())}))}function c(t,n){var e,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(t,a)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}}var l=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,n){null!=this.platform&&console.warn("Platform "+this.platformName+" has already been set. Overwriting the platform with "+n+"."),this.platformName=t,this.platform=n},t.prototype.registerFlag=function(t,n,e){if(this.flagRegistry[t]={evaluationFn:n,setHook:e},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn("Setting feature override from URL "+t+": "+r+"."),this.set(t,r)}},t.prototype.get=function(t){return t in this.flags||(this.flags[t]=this.evaluateFlag(t)),this.flags[t]},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,"features",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,n){if(null==this.flagRegistry[t])throw new Error("Cannot set flag "+t+" as it has not been registered.");this.flags[t]=n,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(n)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error("Cannot evaluate flag '"+t+"': no evaluation function found.");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var n,e,r=(n=this.global.location.search,e={},n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return f(e,n[0],n[1]),n.join("=")})),e);"tfjsflags"in r&&r.tfjsflags.split(",").forEach((function(n){var e=n.split(":"),r=e[0],o=e[1];t.urlFlags[r]=function(t,n){if("true"===(n=n.toLowerCase())||"false"===n)return"true"===n;if(""+ +n===n)return+n;throw new Error("Could not parse value flag value "+n+" for flag "+t+".")}(r,o)}))}},t}();function f(t,n,e){t[decodeURIComponent(n)]=decodeURIComponent(e||"")}function h(){return d}var d=null,p=new Map,v=new Map;function m(t,n){var e=E(t,n);return p.get(e)}function g(t){return v.get(t)}function y(t){for(var n=p.entries(),e=[];;){var r=n.next(),o=r.done,i=r.value;if(o)break;var a=i[0],u=i[1];a.split("_")[0]===t&&e.push(u)}return e}function x(t){var n=t.kernelName,e=t.backendName,r=E(n,e);if(p.has(r))throw new Error("The kernel '"+n+"' for backend '"+e+"' is already registered");p.set(r,t)}function b(t){var n=t.kernelName;v.has(n)&&console.warn("Overriding the gradient for '"+n+"'"),v.set(n,t)}function w(t,n){var e=E(t,n);if(!p.has(e))throw new Error("The kernel '"+t+"' for backend '"+n+"' is not registered");p.delete(e)}function C(t){if(!v.has(t))throw new Error("The gradient '"+t+"' for backend is not registered");v.delete(t)}function E(t,n){return n+"_"+t}function R(t){for(var n=t.length,e=0,r=0;n>0;)r=Math.random()*n|0,e=t[--n],t[n]=t[r],t[r]=e}function I(t,n,e){return Math.max(t,Math.min(n,e))}function k(t){return t%2==0?t:t+1}function S(t){for(var n=0,e=0;e<t.length;e++)n+=t[e];return n}function A(t,n){if(!t)throw new Error("string"==typeof n?n:n())}function T(t,n,e){void 0===e&&(e=""),A(F(t,n),(function(){return e+" Shapes "+t+" and "+n+" must match"}))}function D(t){A(null!=t,(function(){return"The input to the tensor constructor must be a non-null value."}))}function N(t,n,e){if(void 0===n&&(n=[]),void 0===e&&(e=!1),null==n&&(n=[]),Array.isArray(t)||j(t)&&!e)for(var r=0;r<t.length;++r)N(t[r],n,e);else n.push(t);return n}function _(t){if(0===t.length)return 1;for(var n=t[0],e=1;e<t.length;e++)n*=t[e];return n}function F(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(t.length!==n.length)return!1;for(var e=0;e<t.length;e++)if(t[e]!==n[e])return!1;return!0}function O(t){return t%1==0}function M(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var n=Math.exp(2*t);return(n-1)/(n+1)}function B(t){var n=Math.ceil(Math.sqrt(t));return[n,Math.ceil(t/n)]}function P(t,n){return n<=t.length?t:t+" ".repeat(n-t.length)}function L(t,n,e){return void 0===n&&(n=function(t){return 0}),new Promise((function(r,o){var i=0,a=function(){if(t())r();else{i++;var u=n(i);null!=e&&i>=e?o():setTimeout(a,u)}};a()}))}function W(t,n){for(var e=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)e*=t[o];else if(-1===t[o]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+o);r=o}else if(t[o]<0)throw Error("Shapes can not be < 0. Found "+t[o]+" at dim "+o);if(-1===r){if(n>0&&n!==e)throw Error("Size("+n+") must match the product of shape "+t);return t}if(0===e)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(n%e!=0)throw Error("The implicit shape can't be a fractional number. Got "+n+" / "+e);var i=t.slice();return i[r]=n/e,i}function U(t,n){var e=n.length;return A((t=null==t?n.map((function(t,n){return n})):[].concat(t)).every((function(t){return t>=-e&&t<e})),(function(){return"All values in axis param must be in range [-"+e+", "+e+") but got axis "+t})),A(t.every((function(t){return O(t)})),(function(){return"All values in axis param must be integers but got axis "+t})),t.map((function(t){return t<0?e+t:t}))}function z(t,n){for(var e=[],r=[],o=null!=n&&Array.isArray(n)&&0===n.length,i=null==n||o?null:U(n,t).sort(),a=0,u=0;u<t.length;++u){if(null!=i){if(i[a]===u&&1!==t[u])throw new Error("Can't squeeze axis "+u+" since its dim '"+t[u]+"' is not 1");(null==i[a]||i[a]>u)&&1===t[u]&&(e.push(t[u]),r.push(u)),i[a]<=u&&a++}1!==t[u]&&(e.push(t[u]),r.push(u))}return{newShape:e,keptDims:r}}function V(t,n){var e=null;if(null==t||"float32"===t)e=new Float32Array(n);else if("int32"===t)e=new Int32Array(n);else{if("bool"!==t)throw new Error("Unknown data type "+t);e=new Uint8Array(n)}return e}function G(t,n){var e=null;if(null==t||"float32"===t)e=new Float32Array(n);else if("int32"===t)e=new Int32Array(n);else if("bool"===t)e=new Uint8Array(n);else{if("string"!==t)throw new Error("Unknown data type "+t);e=new Array(n)}return e}function H(t,n){for(var e=0;e<t.length;e++){var r=t[e];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+n+" being uploaded contains "+r+".")}}function q(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function K(t,n){return!("complex64"===n||"float32"===n&&"complex64"!==t||"int32"===n&&"float32"!==t&&"complex64"!==t||"bool"===n&&"bool"===t)}function j(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function X(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function Y(t){if(null==t)return 0;var n=0;return t.forEach((function(t){return n+=t.length})),n}function $(t){return"string"==typeof t||t instanceof String}function Q(t){return"boolean"==typeof t}function J(t){return"number"==typeof t}function Z(t){return Array.isArray(t)?Z(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":J(t)?"float32":$(t)?"string":Q(t)?"bool":"float32"}function tt(t){return!!(t&&t.constructor&&t.call&&t.apply)}function nt(t,n){for(var e=n;e<t;++e)if(t%e==0)return e;return t}function et(t){var n=t.length;if(n<2)return[];var e=new Array(n-1);e[n-2]=t[n-1];for(var r=n-3;r>=0;--r)e[r]=e[r+1]*t[r+1];return e}function rt(t,n,e){if("string"===n)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=N(t)),e&&H(t,n),function(t,n){return t instanceof Float32Array&&"float32"===n||t instanceof Int32Array&&"int32"===n||t instanceof Uint8Array&&"bool"===n}(t,n))return t;if(null==n||"float32"===n||"complex64"===n)return new Float32Array(t);if("int32"===n)return new Int32Array(t);if("bool"===n){for(var r=new Uint8Array(t.length),o=0;o<r.length;++o)0!==Math.round(t[o])&&(r[o]=1);return r}throw new Error("Unknown data type "+n)}function ot(t,n){if(0===t.length)return n[0];var e=t.reduce((function(t,n){return t*n}));if(0===e)return[];if(e!==n.length)throw new Error("["+t+"] does not match the input size.");return function t(n,e,r){var o=new Array;if(1===e.length)for(var i=e[0],a=0;a<i;a++)o[a]=r[n+a];else{i=e[0];var u=e.slice(1),s=u.reduce((function(t,n){return t*n}));for(a=0;a<i;a++)o[a]=t(n+a*s,u,r)}return o}(0,t,n)}function it(t,n){for(var e=at(t,n),r=0;r<e.length;r++)e[r]=1;return e}function at(t,n){if(null==n||"float32"===n||"complex64"===n)return new Float32Array(t);if("int32"===n)return new Int32Array(t);if("bool"===n)return new Uint8Array(t);throw new Error("Unknown data type "+n)}function ut(){return h().platform.now()}function st(t){t.forEach((function(n){A(Number.isInteger(n)&&n>=0,(function(){return"Tensor must have a shape comprised of positive integers but got shape ["+t+"]."}))}))}function ct(t,n){return void 0===n&&(n="utf-8"),n=n||"utf-8",h().platform.encode(t,n)}function lt(t,n){return void 0===n&&(n="utf-8"),n=n||"utf-8",h().platform.decode(t,n)}function ft(t,n,e){if(0===n)return 0;if(1===n)return t[0];for(var r=t[t.length-1],o=0;o<t.length-1;++o)r+=e[o]*t[o];return r}function ht(t,n,e){if(0===n)return[];if(1===n)return[t];for(var r=new Array(n),o=0;o<r.length-1;++o)r[o]=Math.floor(t/e[o]),t-=r[o]*e[o];return r[r.length-1]=t,r}var dt=Object.freeze({shuffle:R,clamp:I,nearestLargerEven:k,sum:S,randUniform:function(t,n){var e=Math.random();return n*e+(1-e)*t},distSquared:function(t,n){for(var e=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(n[r]);e+=o*o}return e},assert:A,assertShapesMatch:T,assertNonNull:D,flatten:N,sizeFromShape:_,isScalarShape:function(t){return 0===t.length},arraysEqual:F,isInt:O,tanh:M,sizeToSquarishShape:B,createShuffledIndices:function(t){for(var n=new Uint32Array(t),e=0;e<t;++e)n[e]=e;return R(n),n},rightPad:P,repeatedTry:L,inferFromImplicitShape:W,parseAxisParam:U,squeezeShape:z,getTypedArrayFromDType:V,getArrayFromDType:G,checkConversionForErrors:H,isValidDtype:q,hasEncodingLoss:K,isTypedArray:j,bytesPerElement:X,bytesFromStringArray:Y,isString:$,isBoolean:Q,isNumber:J,inferDtype:Z,isFunction:tt,nearestDivisor:nt,computeStrides:et,toTypedArray:rt,toNestedArray:ot,makeOnesTypedArray:it,makeZerosTypedArray:at,now:ut,assertNonNegativeIntegerDimensions:st,fetch:function(t,n){return h().platform.fetch(t,n)},encodeString:ct,decodeString:lt,locToIndex:ft,indexToLoc:ht}),pt=function(){function t(t,n){this.backendTimer=t,this.logger=n,null==n&&(this.logger=new vt)}return t.prototype.profileKernel=function(t,n,e){var r,o=this,i=this.backendTimer.time((function(){r=e()}));return r.forEach((function(e){e.data().then((function(r){!function(t,n,e){if("float32"!==n)return!1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn("Found "+o+" in the result of '"+e+"'"),!0}}(r,e.dtype,t),i.then((function(i){var a="";null!=i.getExtraProfileInfo&&(a=i.getExtraProfileInfo()),o.logger.logKernelProfile(t,e,r,i.kernelMs,n,a)}))}))})),r},t}(),vt=function(){function t(){}return t.prototype.logKernelProfile=function(t,n,e,r,o,i){var a="number"==typeof r?P(r+"ms",9):r.error,u=P(t,25),s=n.rank,c=n.size,l=P(n.shape.toString(),14),f="";for(var h in o){var d=o[h].shape||n.shape,p=d.length;f+=h+": "+p+"D "+(p>0?d:"")+" "}console.log("%c"+u+"\t%c"+a+"\t%c"+s+"D "+l+"\t%c"+c+"\t%c"+f+"\t%c"+i,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")},t}();function mt(t,n,e){return P(Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":$(t)?"'"+t+"'":"bool"===e?gt(t):parseFloat(t.toFixed(7)).toString(),n)}function gt(t){return 0===t?"false":"true"}function yt(t){for(var n=[],e=0;e<t.length;e+=2)n.push([t[e],t[e+1]]);return n}var xt=function(){function t(t,n,e){var r=this;if(this.dtype=n,this.shape=t.slice(),this.size=_(t),null!=e){var o=e.length;A(o===this.size,(function(){return"Length of values '"+o+"' does not match the size inferred by the shape '"+r.size+"'."}))}if("complex64"===n)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=e||G(n,this.size),this.strides=et(t)}return t.prototype.set=function(t){for(var n=this,e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];0===e.length&&(e=[0]),A(e.length===this.rank,(function(){return"The number of provided coordinates ("+e.length+") must match the rank ("+n.rank+")"}));var o=this.locToIndex(e);this.values[o]=t},t.prototype.get=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];0===t.length&&(t=[0]);for(var e=0,r=0,o=t;r<o.length;r++){var i=o[r];if(i<0||i>=this.shape[e]){var a="Requested out of range element at "+t+".   Buffer shape="+this.shape;throw new Error(a)}e++}for(var u=t[t.length-1],s=0;s<t.length-1;++s)u+=this.strides[s]*t[s];return this.values[u]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var n=t[t.length-1],e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return n},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var n=new Array(this.shape.length),e=0;e<n.length-1;++e)n[e]=Math.floor(t/this.strides[e]),t-=n[e]*this.strides[e];return n[n.length-1]=t,n},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return bt().makeTensor(this.values,this.shape,this.dtype)},t}(),bt=null,wt=null,Ct=null,Et=function(){function t(t,n,e,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=n||"float32",this.size=_(t),this.strides=et(t),this.dataId=e,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}return t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),A(1===this.size,(function(){return"The array must have only 1 element."})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,n){return this.throwIfDisposed(),this.reshape([t,n])},t.prototype.as3D=function(t,n,e){return this.throwIfDisposed(),this.reshape([t,n,e])},t.prototype.as4D=function(t,n,e,r){return this.throwIfDisposed(),this.reshape([t,n,e,r])},t.prototype.as5D=function(t,n,e,r,o){return this.throwIfDisposed(),this.reshape([t,n,e,r,o])},t.prototype.asType=function(t){return this.throwIfDisposed(),wt.cast(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return[4,this.data()];case 1:return t=n.sent(),[2,wt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return wt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return[4,this.data()];case 1:return t=n.sent(),[2,ot(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return ot(this.shape,this.dataSync())},t.prototype.data=function(){return s(this,void 0,void 0,(function(){var t,n;return c(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),t=bt().read(this.dataId),"string"!==this.dtype?[3,2]:[4,t];case 1:n=e.sent();try{return[2,n.map((function(t){return lt(t)}))]}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}e.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=bt().readSync(this.dataId);if("string"===this.dtype)try{return t.map((function(t){return lt(t)}))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t},t.prototype.bytes=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),[4,bt().read(this.dataId)];case 1:return t=n.sent(),"string"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(bt().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),wt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),wt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),wt.expandDims(this,t)},t.prototype.cumsum=function(t,n,e){return void 0===t&&(t=0),void 0===n&&(n=!1),void 0===e&&(e=!1),wt.cumsum(this,t,n,e)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),wt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),wt.clone(this)},t.prototype.oneHot=function(t,n,e){return this.throwIfDisposed(),wt.oneHot(this,t,n,e)},t.prototype.toString=function(t){return void 0===t&&(t=!1),function(t,n,e,r){var o=et(n),i=function(t,n,e,r){var o=_(n),i=r[r.length-1],a=new Array(i).fill(0),u=n.length,s="complex64"===e?yt(t):t;if(u>1)for(var c=0;c<o/i;c++)for(var l=c*i,f=0;f<i;f++)a[f]=Math.max(a[f],mt(s[l+f],0,e).length);return a}(t,n,e,o),a=n.length,u=function t(n,e,r,o,i,a){void 0===a&&(a=!0);var u="complex64"===r?2:1,s=e[0],c=e.length;if(0===c)return"complex64"===r?[mt(yt(n)[0],0,r)]:"bool"===r?[gt(n[0])]:[n[0].toString()];if(1===c){if(s>20){var l=3*u,f=Array.from(n.slice(0,l)),h=Array.from(n.slice((s-3)*u,s*u));return"complex64"===r&&(f=yt(f),h=yt(h)),["["+f.map((function(t,n){return mt(t,i[n],r)})).join(", ")+", ..., "+h.map((function(t,n){return mt(t,i[s-3+n],r)})).join(", ")+"]"]}return["["+("complex64"===r?yt(n):Array.from(n)).map((function(t,n){return mt(t,i[n],r)})).join(", ")+"]"]}var d=e.slice(1),p=o.slice(1),v=o[0]*u,m=[];if(s>20){for(var g=0;g<3;g++){var y=(x=g*v)+v;m.push.apply(m,t(n.slice(x,y),d,r,p,i,!1))}for(m.push("..."),g=s-3;g<s;g++)y=(x=g*v)+v,m.push.apply(m,t(n.slice(x,y),d,r,p,i,g===s-1))}else for(g=0;g<s;g++){var x;y=(x=g*v)+v,m.push.apply(m,t(n.slice(x,y),d,r,p,i,g===s-1))}var b=2===c?",":"";for(m[0]="["+m[0]+b,g=1;g<m.length-1;g++)m[g]=" "+m[g]+b;var w=",\n";for(g=2;g<c;g++)w+="\n";return m[m.length-1]=" "+m[m.length-1]+"]"+(a?"":w),m}(t,n,e,o,i),s=["Tensor"];return r&&(s.push("  dtype: "+e),s.push("  rank: "+a),s.push("  shape: ["+n+"]"),s.push("  values:")),s.push(u.map((function(t){return"    "+t})).join("\n")),s.join("\n")}(this.dataSync(),this.shape,this.dtype,t)},t.prototype.tile=function(t){return this.throwIfDisposed(),wt.tile(this,t)},t.prototype.gather=function(t,n){return void 0===n&&(n=0),this.throwIfDisposed(),wt.gather(this,t,n)},t.prototype.matMul=function(t,n,e){return void 0===n&&(n=!1),void 0===e&&(e=!1),this.throwIfDisposed(),wt.matMul(this,t,n,e)},t.prototype.dot=function(t){return this.throwIfDisposed(),wt.dot(this,t)},t.prototype.norm=function(t,n,e){return void 0===t&&(t="euclidean"),void 0===n&&(n=null),void 0===e&&(e=!1),this.throwIfDisposed(),wt.norm(this,t,n,e)},t.prototype.slice=function(t,n){return this.throwIfDisposed(),wt.slice(this,t,n)},t.prototype.reverse=function(t){return this.throwIfDisposed(),wt.reverse(this,t)},t.prototype.concat=function(n,e){return void 0===e&&(e=0),this.throwIfDisposed(),n instanceof t&&(n=[n]),wt.concat([this].concat(n),e)},t.prototype.split=function(t,n){return void 0===n&&(n=0),this.throwIfDisposed(),wt.split(this,t,n)},t.prototype.stack=function(t,n){return void 0===n&&(n=0),wt.stack([this,t],n)},t.prototype.unstack=function(t){return void 0===t&&(t=0),wt.unstack(this,t)},t.prototype.pad=function(t,n){return void 0===n&&(n=0),wt.pad(this,t,n)},t.prototype.batchNormalization=function(t,n,e,r,o){return void 0===e&&(e=.001),Ct("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),this.batchNorm(t,n,o,r,e)},t.prototype.batchNorm=function(t,n,e,r,o){return void 0===o&&(o=.001),this.throwIfDisposed(),wt.batchNorm(this,t,n,e,r,o)},t.prototype.all=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.all(this,t,n)},t.prototype.any=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.any(this,t,n)},t.prototype.logSumExp=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.logSumExp(this,t,n)},t.prototype.sum=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.sum(this,t,n)},t.prototype.prod=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.prod(this,t,n)},t.prototype.mean=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.mean(this,t,n)},t.prototype.min=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.min(this,t,n)},t.prototype.max=function(t,n){return void 0===t&&(t=null),void 0===n&&(n=!1),this.throwIfDisposed(),wt.max(this,t,n)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),wt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),wt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),wt.cast(this,t)},t.prototype.add=function(t){return this.throwIfDisposed(),wt.add(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),wt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),wt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),wt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),wt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),wt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),wt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),wt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),wt.mulStrict(this,t)},t.prototype.div=function(t){return this.throwIfDisposed(),wt.div(this,t)},t.prototype.divNoNan=function(t){return this.throwIfDisposed(),wt.divNoNan(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),wt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),wt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),wt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),wt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),wt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),wt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),wt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),wt.modStrict(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),wt.squaredDifferenceStrict(this,t)},t.prototype.transpose=function(t){return this.throwIfDisposed(),wt.transpose(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),wt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),wt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),wt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),wt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),wt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),wt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),wt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),wt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),wt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),wt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),wt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),wt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),wt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),wt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),wt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),wt.logicalXor(this,t)},t.prototype.where=function(t,n){return this.throwIfDisposed(),wt.where(t,this,n)},t.prototype.neg=function(){return this.throwIfDisposed(),wt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),wt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),wt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),wt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),wt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),wt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),wt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),wt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),wt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),wt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),wt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),wt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),wt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),wt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),wt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),wt.abs(this)},t.prototype.clipByValue=function(t,n){return this.throwIfDisposed(),wt.clipByValue(this,t,n)},t.prototype.relu=function(){return this.throwIfDisposed(),wt.relu(this)},t.prototype.relu6=function(){return this.throwIfDisposed(),wt.relu6(this)},t.prototype.elu=function(){return this.throwIfDisposed(),wt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),wt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),wt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),wt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),wt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),wt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),wt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),wt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),wt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),wt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),wt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),wt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),wt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),wt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),wt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),wt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),wt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),wt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),wt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),wt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),wt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),wt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),wt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),wt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),wt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),wt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,n){return void 0===n&&(n=!1),this.throwIfDisposed(),wt.image.resizeBilinear(this,t,n)},t.prototype.resizeNearestNeighbor=function(t,n){return void 0===n&&(n=!1),this.throwIfDisposed(),wt.image.resizeNearestNeighbor(this,t,n)},t.prototype.conv1d=function(t,n,e,r,o,i){return void 0===r&&(r="NWC"),void 0===o&&(o=1),this.throwIfDisposed(),wt.conv1d(this,t,n,e,r,o,i)},t.prototype.conv2d=function(t,n,e,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),wt.conv2d(this,t,n,e,r,o,i)},t.prototype.conv2dTranspose=function(t,n,e,r,o){return this.throwIfDisposed(),wt.conv2dTranspose(this,t,n,e,r,o)},t.prototype.depthwiseConv2D=function(t,n,e,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),wt.depthwiseConv2d(this,t,n,e,r,o,i)},t.prototype.separableConv2d=function(t,n,e,r,o,i){return void 0===o&&(o=[1,1]),void 0===i&&(i="NHWC"),this.throwIfDisposed(),wt.separableConv2d(this,t,n,e,r,o,i)},t.prototype.avgPool=function(t,n,e,r){return this.throwIfDisposed(),wt.avgPool(this,t,n,e,r)},t.prototype.maxPool=function(t,n,e,r){return this.throwIfDisposed(),wt.maxPool(this,t,n,e,r)},t.prototype.localResponseNormalization=function(t,n,e,r){return void 0===t&&(t=5),void 0===n&&(n=1),void 0===e&&(e=1),void 0===r&&(r=.5),wt.localResponseNormalization(this,t,n,e,r)},t.prototype.pool=function(t,n,e,r,o){return this.throwIfDisposed(),wt.pool(this,t,n,e,r,o)},t.prototype.variable=function(t,n,e){return void 0===t&&(t=!0),this.throwIfDisposed(),bt().makeVariable(this,t,n,e)},t.prototype.unsortedSegmentSum=function(t,n){return this.throwIfDisposed(),wt.unsortedSegmentSum(this,t,n)},t.prototype.batchToSpaceND=function(t,n){return this.throwIfDisposed(),wt.batchToSpaceND(this,t,n)},t.prototype.spaceToBatchND=function(t,n){return this.throwIfDisposed(),wt.spaceToBatchND(this,t,n)},t.prototype.topk=function(t,n){return void 0===t&&(t=1),void 0===n&&(n=!0),this.throwIfDisposed(),wt.topk(this,t,n)},t.prototype.stridedSlice=function(t,n,e,r,o,i,a,u){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===u&&(u=0),this.throwIfDisposed(),wt.stridedSlice(this,t,n,e,r,o,i,a,u)},t.prototype.depthToSpace=function(t,n){return this.throwIfDisposed(),wt.depthToSpace(this,t,n)},t.prototype.fft=function(){return this.throwIfDisposed(),wt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),wt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),wt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),wt.spectral.irfft(this)},t}();Object.defineProperty(Et,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var Rt,It,kt,St,At,Tt=function(t){function n(n,e,r,o){var i=t.call(this,n.shape,n.dtype,n.dataId,o)||this;return i.trainable=e,i.name=r,i}return u(n,t),n.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!F(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");bt().disposeTensor(this),this.dataId=t.dataId,bt().incRef(this,null)},n.prototype.dispose=function(){bt().disposeVariable(this),this.isDisposedInternal=!0},n}(Et);Object.defineProperty(Tt,Symbol.hasInstance,{value:function(t){return t instanceof Et&&null!=t.assign&&t.assign instanceof Function}}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(Rt||(Rt={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(It||(It={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(kt||(kt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(St||(St={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(At||(At={}));var Dt={float32:St,int32:It,bool:kt,complex64:At};function Nt(t,n){if("string"===t||"string"===n){if("string"===t&&"string"===n)return"string";throw new Error("Can not upcast "+t+" with "+n)}return Dt[t][n]}function _t(t){return Nt(t,"int32")}function Ft(t,n){if(t.dtype===n.dtype)return[t,n];var e=Nt(t.dtype,n.dtype);return[t.cast(e),n.cast(e)]}function Ot(t,n){A(t.dtype===n.dtype,(function(){return"The dtypes of the first("+t.dtype+") and second("+n.dtype+") input must match"}))}function Mt(t){var n=[];return function t(n,e,r){if(null!=n)if(n instanceof Et)e.push(n);else if(o=n,Array.isArray(o)||"object"==typeof o){var o,i=n;for(var a in i){var u=i[a];r.has(u)||(r.add(u),t(u,e,r))}}}(t,n,new Set),n}var Bt,Pt=Object.freeze({makeTypesMatch:Ft,assertTypesMatch:Ot,isTensorInList:function(t,n){return n.some((function(n){return n.id===t.id}))},getTensorsInContainer:Mt}),Lt=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),Wt=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Lt}return t.prototype.ready=function(){return s(this,void 0,void 0,(function(){var t,n,e;return c(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),n=0,r.label=1;case 1:return n<t.length?(e=t[n],[4,this.initializeBackend(e).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(e)]:[3,4];case 3:return r.sent(),[2];case 4:return n++,[3,1];case 5:throw new Error("Could not initialize any backends, all backend initializations failed.")}}))}))},Object.defineProperty(t.prototype,"backend",{get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '"+this.backendName+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),n=t.name;if(t.asyncInit)throw new Error("The highest priority backend '"+n+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");this.setBackend(n)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,n,e){return void 0===e&&(e=1),t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:n,priority:e},!0)},t.prototype.setBackend=function(t){return s(this,void 0,void 0,(function(){var n,e,r;return c(this,(function(o){switch(o.label){case 0:if(null==this.registryFactory[t])throw new Error("Backend name '"+t+"' not found in registry");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,n=this.initializeBackend(t),e=n.success,n.asyncInit?[4,e]:[3,2]);case 1:return r=o.sent(),[3,3];case 2:r=e,o.label=3;case 3:if(!r)return[2,!1];o.label=4;case 4:return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new pt(this.backendInstance),[2,!0]}}))}))},t.prototype.setupRegisteredKernels=function(){var t=this;y(this.backendName).forEach((function(n){null!=n.setupFunc&&n.setupFunc(t.backendInstance)}))},t.prototype.disposeRegisteredKernels=function(t){var n=this;y(t).forEach((function(e){null!=e.disposeFunc&&e.disposeFunc(n.registry[t])}))},t.prototype.initializeBackend=function(t){var n=this,e=this.registryFactory[t];if(null==e)throw new Error("Cannot initialize backend "+t+", no registration found.");try{var r=e.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,i=r.then((function(e){return!(o<n.pendingBackendInitId||(n.registry[t]=e,n.pendingBackendInit=null,0))})).catch((function(e){return!(o<n.pendingBackendInitId||(n.pendingBackendInit=null,console.warn("Initialization of backend "+t+" failed"),console.warn(e.stack||e.message),1))}));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(n){return console.warn("Initialization of backend "+t+" failed"),console.warn(n.stack||n.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(n,e){return t.registryFactory[e].priority-t.registryFactory[n].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),n=0;n<t.length;n++){var e=t[n],r=this.initializeBackend(e),o=r.success,i=r.asyncInit;if(i||o)return{name:e,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")},t.prototype.moveData=function(t,n){var e=this.state.tensorInfo.get(n),r=e.backend,o=this.readSync(n);r.disposeData(n),e.backend=t,t.move(n,o,e.shape,e.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++},t.prototype.tidy=function(t,n){var e,r=this,o=null;if(null==n){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");n=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof n)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(e)}),(function(){return(e=n())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),e}))},t.prototype.scopedRun=function(t,n,e){t();try{var r=e();return n(),r}catch(t){throw n(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var n=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),e={x:t};return this.addTapeNode(this.state.activeScope.name,e,[n],(function(t){return{x:function(){return t.toFloat()}}}),[]),n},t.prototype.runKernel=function(t,n,e,r,o){return this.runKernelFunc(null,n,null,t,e,r,o)},t.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool("IS_TEST")},t.prototype.checkKernelForMemLeak=function(t,n,e){var r=this.backend.numDataIds(),o=0;e.forEach((function(t){o+="complex64"===t.dtype?3:1}));var i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=r-n-o-i;if(a>0)throw new Error("Backend '"+this.backendName+"' has an internal memory leak ("+a+" data ids) after running '"+t+"'")},t.prototype.runKernelFunc=function(t,n,e,r,o,i,a){var u,s=this;void 0===i&&(i=[]),void 0===a&&(a=[]);var c=[],l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");var f,h=function(t){l&&(c=t.map((function(t){return s.keep(s.clone(t))})))},d=this.state.numBytes,p=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var v,g=m(r,this.backendName);return f=null!=g?function(){var t=s.backend.numDataIds();v=g.kernelFunc({inputs:n,attrs:o,backend:s.backend});var e=Array.isArray(v)?v:[v];s.shouldCheckForMemLeaks()&&s.checkKernelForMemLeak(r,t,e);var u=e.map((function(t){var n=t.dataId,e=t.shape,r=t.dtype;return s.makeTensorFromDataId(n,e,r)})),c=u.filter((function(t,n){return a[n]}));return h((i||[]).slice().concat(c)),u}:function(){var n=s.backend.numDataIds();v=s.tidy((function(){return t(s.backend,h)}));var e=Array.isArray(v)?v:[v];return s.shouldCheckForMemLeaks()&&s.checkKernelForMemLeak(r,n,e),e},this.scopedRun((function(){return s.state.kernelDepth++}),(function(){return s.state.kernelDepth--}),(function(){u=s.ENV.getBool("DEBUG")?s.profiler.profileKernel(r,n,(function(){return f()})):f()})),l&&this.addTapeNode(r,n,u,e,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-d,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-p,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(n).map((function(t){return n[t].shape})),outputShapes:u.map((function(t){return t.shape}))}),Array.isArray(v)?u:u[0]},t.prototype.makeTensor=function(t,n,e,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");e=e||"float32",r=r||this.backend;var o=t;"string"===e&&$(t[0])&&(o=t.map((function(t){return ct(t)})));var i=r.write(o,n,e),a=new Et(n,e,i,this.nextTensorId());if(this.incRef(a,r),"string"===e){var u=this.state.tensorInfo.get(i),s=Y(o);this.state.numBytes+=s-u.bytes,u.bytes=s}return a},t.prototype.makeTensorFromDataId=function(t,n,e,r){var o=new Et(n,e=e||"float32",t,this.nextTensorId());return this.incRef(o,r),o},t.prototype.makeVariable=function(t,n,e,r){void 0===n&&(n=!0),e=e||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));var o=new Tt(t,n,e,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error("Variable with name "+o.name+" was already registered");return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o},t.prototype.incRef=function(t,n){var e=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===e){this.state.numDataBuffers++;var r=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(r=t.size*X(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:n||this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof Tt||this.track(t)},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;var n=this.state.tensorInfo.get(t.dataId);n.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=n.bytes),this.state.numDataBuffers--,n.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var n=this.state.registeredVariables[t];this.disposeVariable(n)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t},t.prototype.profile=function(t){return s(this,void 0,void 0,(function(){var n,e;return c(this,(function(r){return this.state.profiling=!0,n=this.state.numBytes,e=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-n,this.state.activeProfile.newTensors=this.state.numTensors-e,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,n,e,r,o){var i=this,a={id:this.state.nextTapeNodeId++,kernelName:t,inputs:n,outputs:e,saved:o},u=g(t);null!=u&&(r=u.gradFunc),null!=r&&(a.gradient=function(t){return t=t.map((function(t,n){if(null==t){var r=e[n],o=at(r.size,r.dtype);return i.makeTensor(o,r.shape,r.dtype)}return t})),r(t.length>1?t:t[0],o)}),this.state.activeTape.push(a)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var n={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(n.name=t),this.state.scopeStack.push(n),this.state.activeScope=n},t.prototype.endScope=function(t){for(var n=this,e=Mt(t),r=new Set(e.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var i=this.state.activeScope.track[o];i.kept||r.has(i.id)||i.dispose()}var a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((function(t){t.kept||t.scopeId!==a.id||n.track(t)}))},t.prototype.gradients=function(t,n,e,r){var o=this;if(void 0===r&&(r=!1),A(n.length>0,(function(){return"gradients() received an empty list of xs."})),null!=e&&"float32"!==e.dtype)throw new Error("dy must have 'float32' dtype, but has '"+e.dtype+"'");var i=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy("forward",t)}));A(i instanceof Et,(function(){return"The result y returned by f() must be a tensor."}));var a=function(t,n,e){for(var r={},o={},i=0;i<n.length;i++)r[n[i].id]=!0;for(i=0;i<t.length;i++){var a=(p=t[i]).inputs;for(var u in a){for(var s=a[u],c=!1,l=0;l<n.length;l++)if(r[s.id]){p.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,o[p.id]=!0;break}if(c)break}}var f={};f[e.id]=!0;var h={};for(i=t.length-1;i>=0;i--)for(a=(p=t[i]).inputs,l=0;l<p.outputs.length;l++)if(f[p.outputs[l].id]){for(var u in a)f[a[u].id]=!0,h[p.id]=!0;break}var d=[];for(i=0;i<t.length;i++){var p;if(o[(p=t[i]).id]&&h[p.id]){var v={};for(var u in p.inputs){var m=p.inputs[u];r[m.id]&&(v[u]=m)}var g=Object.assign({},p);g.inputs=v,g.outputs=p.outputs,d.push(g)}}return d}(this.state.activeTape,n,i);if(!r&&0===a.length&&n.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var t,r,u={};u[i.id]=null==e?(r=it(_(t=i.shape),"float32"),Ut.makeTensor(r,t,"float32")):e,function(t,n,e){for(var r=function(r){var o=n[r],i=[];if(o.outputs.forEach((function(n){var e=t[n.id];null!=e?i.push(e):i.push(null)})),null==o.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+o.kernelName+".");var a=o.gradient(i),u=function(n){if(!(n in a))throw new Error("Cannot backprop through input "+n+". Available gradients found: "+Object.keys(a)+".");var r=e((function(){return a[n]()}));if("float32"!==r.dtype)throw new Error("Error in gradient for op "+o.kernelName+". The gradient of input "+n+" must have 'float32' dtype, but has '"+r.dtype+"'");var i=o.inputs[n];if(!F(r.shape,i.shape))throw new Error("Error in gradient for op "+o.kernelName+". The gradient of input '"+n+"' has shape '"+r.shape+"', which does not match the shape of the input '"+i.shape+"'");if(null==t[i.id])t[i.id]=r;else{var u=t[i.id];t[i.id]=u.add(r),u.dispose()}};for(var s in o.inputs)u(s)},o=n.length-1;o>=0;o--)r(o)}(u,a,(function(t){return o.tidy(t)}));var s=n.map((function(t){return u[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var n=0,e=t.saved;n<e.length;n++)e[n].dispose()})),o.state.activeTape=null),{value:i,grads:s}}))},t.prototype.customGrad=function(t){var n=this;return A(tt(t),(function(){return"The f passed in customGrad(f) must be a function."})),function(){for(var e,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];A(r.every((function(t){return t instanceof Et})),(function(){return"The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var i={};return r.forEach((function(t,n){i[n]=t})),n.runKernelFunc((function(n,o){return A((e=t.apply(void 0,r.concat([o]))).value instanceof Et,(function(){return"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),A(tt(e.gradFunc),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),e.value}),i,(function(t,n){var o=e.gradFunc(t,n),i=Array.isArray(o)?o:[o];A(i.length===r.length,(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),A(i.every((function(t){return t instanceof Et})),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var a={};return i.forEach((function(t,n){a[n]=function(){return t}})),a}))}},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.time=function(t){return s(this,void 0,void 0,(function(){var n,e;return c(this,(function(r){switch(r.label){case 0:return n=ut(),[4,this.backend.time(t)];case 1:return(e=r.sent()).wallMs=ut()-n,[2,e]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,"registeredVariables",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Lt,this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}(),Ut=function(){var n=function(){if(null==Bt){var n=void 0;if("undefined"!=typeof window)n=window;else if(void 0!==t)n=t;else if(void 0!==r)n=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");n=self}Bt=n}return Bt}();if(null==n._tfengine){var e=new l(n);n._tfengine=new Wt(e)}return function(t){d=t}(n._tfengine.ENV),bt=function(){return n._tfengine},n._tfengine}();function zt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Vt=h();Vt.registerFlag("DEBUG",(function(){return!1}),(function(t){t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Vt.registerFlag("IS_BROWSER",(function(){return zt()})),Vt.registerFlag("IS_NODE",(function(){return void 0!==r&&void 0!==r.versions&&void 0!==r.versions.node})),Vt.registerFlag("IS_CHROME",(function(){return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Vt.registerFlag("PROD",(function(){return!1})),Vt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return Vt.getBool("DEBUG")})),Vt.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return!0})),Vt.registerFlag("IS_TEST",(function(){return!1}));var Gt,Ht,qt,Kt={},jt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Xt(t,n){Kt[t]=n}function Yt(t){t in Kt||(Kt[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var n=function(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(t);return n.addEventListener("webglcontextlost",(function(n){n.preventDefault(),delete Kt[t]}),!1),1===t?n.getContext("webgl",jt)||n.getContext("experimental-webgl",jt):n.getContext("webgl2",jt)}(t));var n=Kt[t];return n.isContextLost()?(delete Kt[t],Yt(t)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),Kt[t])}function $t(t,n){return[n,t]}function Qt(t){var n=_(t);return B(Math.ceil(n/4))}function Jt(t,n){return[Math.max(1,Math.ceil(n/2)),Math.max(1,Math.ceil(t/2))]}function Zt(t,n){var e,r,o,i,a,u,s,c,l,f=t;return 2===h().getNumber("WEBGL_VERSION")?(e=f.R32F,r=f.R16F,o=f.RGBA16F,i=f.RGBA32F,a=f.RED,u=4,s=1,c=f.HALF_FLOAT,l=f.FLOAT):(e=t.RGBA,r=t.RGBA,o=t.RGBA,i=f.RGBA,a=t.RGBA,u=4,s=4,c=null!=n?n.HALF_FLOAT_OES:null,l=t.FLOAT),{internalFormatFloat:e,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:u,defaultNumChannels:s,textureTypeHalfFloat:c,textureTypeFloat:l}}function tn(t,n,e){var r=e();return n&&function(t){var n=t.getError();if(n!==t.NO_ERROR)throw new Error("WebGL Error: "+en(t,n))}(t),r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(Gt||(Gt={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Ht||(Ht={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(qt||(qt={}));function nn(t){return!!(h().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||5.96e-8<Math.abs(t)&&Math.abs(t)<65504)}function en(t,n){switch(n){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+n}}function rn(t,n,e){return Sn(t,n,(function(){return t.getExtension(e)}),'Extension "'+e+'" not supported on this browser.')}function on(t,n,e){var r=Sn(t,n,(function(){return t.createShader(t.VERTEX_SHADER)}),"Unable to create vertex WebGLShader.");if(tn(t,n,(function(){return t.shaderSource(r,e)})),tn(t,n,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}function an(t,n,e){var r=Sn(t,n,(function(){return t.createShader(t.FRAGMENT_SHADER)}),"Unable to create fragment WebGLShader.");if(tn(t,n,(function(){return t.shaderSource(r,e)})),tn(t,n,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,n){var e=cn.exec(n);if(null==e)return console.log("Couldn't parse line number in error: "+n),void console.log(t);for(var r=+e[1],o=t.split("\n"),i=o.length.toString().length+2,a=o.map((function(t,n){return P((n+1).toString(),i)+t})),u=0,s=0;s<a.length;s++)u=Math.max(a[s].length,u);var c=a.slice(0,r-1),l=a.slice(r-1,r),f=a.slice(r);console.log(c.join("\n")),console.log(n.split("\n")[0]),console.log("%c "+P(l[0],u),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(f.join("\n"))}(e,t.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}var un,sn,cn=/ERROR: [0-9]+:([0-9]+):/g;function ln(t,n){return Sn(t,n,(function(){return t.createProgram()}),"Unable to create WebGLProgram.")}function fn(t,n,e){if(tn(t,n,(function(){return t.linkProgram(e)})),!1===t.getProgramParameter(e,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Failed to link vertex and fragment shaders.")}function hn(t,n,e){if(tn(t,n,(function(){return t.validateProgram(e)})),!1===t.getProgramParameter(e,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(e)),new Error("Shader program validation failed.")}function dn(t,n,e){var r=Sn(t,n,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return tn(t,n,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),tn(t,n,(function(){return t.bufferData(t.ARRAY_BUFFER,e,t.STATIC_DRAW)})),r}function pn(t,n,e){var r=Sn(t,n,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return tn(t,n,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),tn(t,n,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,e,t.STATIC_DRAW)})),r}function vn(t,n){return Sn(t,n,(function(){return t.createTexture()}),"Unable to create WebGLTexture.")}function mn(t,n){var e=h().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||n<=0){var r="["+t+"x"+n+"]";throw new Error("Requested texture size "+r+" is invalid.")}if(t>e||n>e)throw r="["+t+"x"+n+"]",new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU ["+e+"x"+e+"].")}function gn(t,n){return Sn(t,n,(function(){return t.createFramebuffer()}),"Unable to create WebGLFramebuffer.")}function yn(t,n,e,r,o,i,a,u){var s=t.getAttribLocation(e,r);return-1!==s&&(tn(t,n,(function(){return t.bindBuffer(t.ARRAY_BUFFER,o)})),tn(t,n,(function(){return t.vertexAttribPointer(s,i,t.FLOAT,!1,a,u)})),tn(t,n,(function(){return t.enableVertexAttribArray(s)})),!0)}function xn(t,n,e,r){An(t,r),tn(t,n,(function(){return t.activeTexture(t.TEXTURE0+r)})),tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,e)}))}function bn(t,n,e,r){return Sn(t,n,(function(){return t.getUniformLocation(e,r)}),'uniform "'+r+'" not present in program.')}function wn(t,n,e){return t.getUniformLocation(n,e)}function Cn(t,n,e,r,o,i){tn(t,n,(function(){return xn(t,n,r,i)})),tn(t,n,(function(){return t.uniform1i(o,i)}))}function En(t,n,e,r){tn(t,n,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),tn(t,n,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}))}function Rn(t,n,e){tn(t,n,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,e)})),tn(t,n,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}))}function In(t){var n=t.checkFramebufferStatus(t.FRAMEBUFFER);if(n!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+kn(t,n))}function kn(t,n){switch(n){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+n}}function Sn(t,n,e,r){var o=tn(t,n,(function(){return e()}));if(null==o)throw new Error(r);return o}function An(t,n){var e=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=n+t.TEXTURE0;if(r<t.TEXTURE0||r>e)throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE"+e+"].")}function Tn(t,n){return void 0===n&&(n=2),_(t.slice(0,t.length-n))}function Dn(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Nn(t){var n=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(n=[Tn(t)].concat(Dn(t))),n}function _n(t,n){var e;void 0===n&&(n=!1);var r=h().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(n&&(r*=2,1===(t=t.map((function(n,e){return e>=t.length-2?k(t[e]):t[e]}))).length&&(t=[2,t[0]])),2!==t.length){var o=z(t);t=o.newShape}var i=_(t);if(t.length<=1&&i<=r)return[1,i];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(n){var a=Tn(t),u=2,s=2;return t.length&&(u=(e=Dn(t))[0],s=e[1]),B(i=a*(u/2)*(s/2)).map((function(t){return 2*t}))}return B(i)}function Fn(t){return t%2==0}function On(t,n){if(F(t=t.slice(-2),n=n.slice(-2)))return!0;if(!t.length||!n.length)return!0;if(0===t[0]||0===t[1]||0===n[0]||0===n[1])return!0;if(t.length!==n.length){var e=t.slice(-1)[0],r=n.slice(-1)[0];if(e===r)return!0;if(Fn(e)&&Fn(r)&&(1===t[0]||1===n[0]))return!0}return t[1]===n[1]&&Fn(t[0])&&Fn(n[0])}function Mn(t){if(null==un){var n=Yt(t);un=n.getParameter(n.MAX_TEXTURE_SIZE)}return un}function Bn(t){if(null==sn){var n=Yt(t);sn=n.getParameter(n.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,sn)}function Pn(t){if(0===t)return 0;var n=Yt(t);return Ln(n,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Ln(n,"EXT_disjoint_timer_query")?1:0}function Ln(t,n){return null!=t.getExtension(n)}function Wn(t){try{if(null!=Yt(t))return!0}catch(t){return!1}return!1}function Un(t){if(0===t)return!1;var n=Yt(t);if(1===t){if(!Ln(n,"OES_texture_float"))return!1}else if(!Ln(n,"EXT_color_buffer_float"))return!1;return Vn(n)}function zn(t){if(0===t)return!1;var n=Yt(t);if(1!==t){if(Ln(n,"EXT_color_buffer_float"))return Vn(n);if(Ln(n,"EXT_color_buffer_half_float")){var e=n.getExtension("EXT_color_buffer_half_float");return function(t,n){var e=Zt(t,n),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatHalfFloat,1,1,0,e.textureFormatFloat,e.textureTypeHalfFloat,null);var o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),i}(n,e)}return!1}return!!Ln(n,"OES_texture_float")&&!!Ln(n,"WEBGL_color_buffer_float")&&Vn(n)}function Vn(t){var n=Zt(t),e=t.createTexture();t.bindTexture(t.TEXTURE_2D,e),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatFloat,1,1,0,n.textureFormatFloat,n.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0);var o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(e),t.deleteFramebuffer(r),o}function Gn(t){return 2===t&&null!=Yt(t).fenceSync}var Hn=Object.freeze({callAndCheck:tn,canBeRepresented:nn,getWebGLErrorMessage:en,getExtensionOrThrow:rn,createVertexShader:on,createFragmentShader:an,createProgram:ln,linkProgram:fn,validateProgram:hn,createStaticVertexBuffer:dn,createStaticIndexBuffer:pn,getNumChannels:function(){return 2===h().getNumber("WEBGL_VERSION")?1:4},createTexture:vn,validateTextureSize:mn,createFramebuffer:gn,bindVertexBufferToProgramAttribute:yn,bindTextureUnit:xn,unbindTextureUnit:function(t,n,e){An(t,e),tn(t,n,(function(){return t.activeTexture(t.TEXTURE0+e)})),tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:bn,getProgramUniformLocation:wn,bindTextureToProgramUniformSampler:Cn,bindCanvasToFramebuffer:function(t,n){tn(t,n,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),tn(t,n,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),tn(t,n,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}))},bindColorTextureToFramebuffer:En,unbindColorTextureFromFramebuffer:Rn,validateFramebuffer:In,getFramebufferErrorMessage:kn,getBatchDim:Tn,getRowsCols:Dn,getShapeAs3D:Nn,getTextureShapeFromLogicalShape:_n,isReshapeFree:On,getWebGLMaxTextureSize:Mn,resetMaxTextureSize:function(){un=null},resetMaxTexturesInShader:function(){sn=null},getMaxTexturesInShader:Bn,getWebGLDisjointQueryTimerVersion:Pn,hasExtension:Ln,isWebGLVersionEnabled:Wn,isCapableOfRenderingToFloatTexture:Un,isDownloadFloatTextureEnabled:zn,isWebGLFenceEnabled:Gn}),qn=h();function Kn(){h().set("PROD",!0)}function jn(){h().set("DEBUG",!0)}function Xn(){h().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Yn(t){h().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function $n(){Ut.disposeVariables()}function Qn(){return Ut}function Jn(){return Ut.memory()}function Zn(t){return Ut.profile(t)}function te(t,n){return Ut.tidy(t,n)}function ne(t){Mt(t).forEach((function(t){return t.dispose()}))}function ee(t){return Ut.keep(t)}function re(t){return Ut.time(t)}function oe(t){return Ut.setBackend(t)}function ie(){return Ut.ready()}function ae(){return Ut.backendName}function ue(t){Ut.removeBackend(t)}function se(t){return Ut.findBackend(t)}function ce(t){return Ut.findBackendFactory(t)}function le(t,n,e){return void 0===e&&(e=1),Ut.registerBackend(t,n,e)}function fe(){return Ut.backend}function he(t,n){h().setPlatform(t,n)}function de(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];h().getBool("IS_TEST")||console.warn.apply(console,t)}function pe(t,n){var e=t;if(j(t))return"string"===n?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(e)||j(e)&&"string"!==n;)r.push(e.length),e=e[0];return Array.isArray(t)&&h().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(n,e,r){if(r=r||[],Array.isArray(n)||j(n)){A(e.length>0,(function(){return"Element arr["+r.join("][")+"] should be a primitive, but is an array of "+n.length+" elements"})),A(n.length===e[0],(function(){return"Element arr["+r.join("][")+"] should have "+e[0]+" elements, but has "+n.length+" elements"}));for(var o=e.slice(1),i=0;i<n.length;++i)t(n[i],o,r.concat(i))}else A(0===e.length,(function(){return"Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+e[0]+" elements"}))}(t,r,[]),r}function ve(t,n,e,r){if(null!=t&&("numeric"!==t&&t!==n||"numeric"===t&&"string"===n))throw new Error("Argument '"+e+"' passed to '"+r+"' must be "+t+" tensor, but got "+n+" tensor")}function me(t,n,e,r){if(void 0===r&&(r="numeric"),t instanceof Et)return ve(r,t.dtype,n,e),t;var o=Z(t);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),ve(r,o,n,e),null==t||!j(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){var i=null==t?"null":t.constructor.name;throw new Error("Argument '"+n+"' passed to '"+e+"' must be a Tensor or TensorLike, but got '"+i+"'")}var a=pe(t,o);j(t)||Array.isArray(t)||(t=[t]);var u="string"!==o?rt(t,o,h().getBool("DEBUG")):N(t,[],!0);return Ut.makeTensor(u,a,o)}function ge(t,n,e,r){if(void 0===r&&(r="numeric"),!Array.isArray(t))throw new Error("Argument "+n+" passed to "+e+" must be a `Tensor[]` or `TensorLike[]`");return t.map((function(t,r){return me(t,n+"["+r+"]",e)}),r)}function ye(t,n){for(var e=0;e<t.length;++e)if(t[t.length-e-1]!==n-1-e)return!1;return!0}function xe(t,n,e){for(var r=t.length+n.length,o=[],i=0,a=0,u=0;u<r;u++)-1===e.indexOf(u)?o.push(t[i++]):o.push(n[a++]);return o}function be(t,n){for(var e=[],r=t.length,o=0;o<r;o++)-1===n.indexOf(o)&&e.push(t[o]);return[e,n.map((function(n){return t[n]}))]}function we(t,n){return xe(t,n.map((function(t){return 1})),n)}function Ce(t,n,e){A(ye(n,e),(function(){return t+" supports only inner-most axes for now. Got axes "+n+" and rank-"+e+" input."}))}function Ee(t,n){if(ye(t,n))return null;for(var e=[],r=0;r<n;++r)-1===t.indexOf(r)&&e.push(r);return t.forEach((function(t){return e.push(t)})),e}function Re(t){return t.map((function(t,n){return[n,t]})).sort((function(t,n){return t[1]-n[1]})).map((function(t){return t[0]}))}function Ie(t,n){for(var e=[],r=n-t;r<n;++r)e.push(r);return e}function ke(t,n){var e=t[0].length;t.forEach((function(t,n){A(t.length===e,(function(){return"Error in concat"+e+"D: rank of tensors["+n+"] must be the same as the rank of the rest ("+e+")"}))})),A(n>=0&&n<e,(function(){return"Error in concat"+e+"D: axis must be between 0 and "+(e-1)+"."}));var r=t[0];t.forEach((function(t,o){for(var i=0;i<e;i++)A(i===n||t[i]===r[i],(function(){return"Error in concat"+e+"D: Shape of tensors["+o+"] ("+t+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+o+"."}))}))}function Se(t,n){for(var e=t[0].slice(),r=1;r<t.length;r++)e[n]+=t[r][n];return e}function Ae(t){var n=Object.keys(t);if(1!==n.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+n.length+" keys.");var e=n[0],r=t[e];e.endsWith("_")&&(e=e.substring(0,e.length-1));var o=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];Ut.startScope(e);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Ut.endScope(o),o}catch(t){throw Ut.endScope(null),t}};return Object.defineProperty(o,"name",{value:e,configurable:!0}),o}qn.registerFlag("HAS_WEBGL",(function(){return qn.getNumber("WEBGL_VERSION")>0})),qn.registerFlag("WEBGL_VERSION",(function(){return Wn(2)?2:Wn(1)?1:0})),qn.registerFlag("WEBGL_BUFFER_SUPPORTED",(function(){return 2===qn.get("WEBGL_VERSION")})),qn.registerFlag("WEBGL_CPU_FORWARD",(function(){return!0})),qn.registerFlag("WEBGL_FORCE_F16_TEXTURES",(function(){return!1})),qn.registerFlag("WEBGL_PACK",(function(){return qn.getBool("HAS_WEBGL")})),qn.registerFlag("WEBGL_PACK_NORMALIZATION",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_CLIP",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_DEPTHWISECONV",(function(){return!1})),qn.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_PACK_REDUCE",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_LAZILY_UNPACK",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_CONV_IM2COL",(function(){return qn.getBool("WEBGL_PACK")})),qn.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(function(){return Mn(qn.getNumber("WEBGL_VERSION"))})),qn.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(function(){return Bn(qn.getNumber("WEBGL_VERSION"))})),qn.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(function(){var t=qn.getNumber("WEBGL_VERSION");return 0===t?0:Pn(t)})),qn.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(function(){return qn.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))));var t})),qn.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(function(){return Un(qn.getNumber("WEBGL_VERSION"))})),qn.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(function(){return!qn.getBool("WEBGL_FORCE_F16_TEXTURES")&&qn.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")})),qn.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(function(){return zn(qn.getNumber("WEBGL_VERSION"))})),qn.registerFlag("WEBGL_FENCE_API_ENABLED",(function(){return Gn(qn.getNumber("WEBGL_VERSION"))})),qn.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(function(){return qn.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0})),Ct=Yn;var Te=Ae({complex_:function(t,n){var e=me(t,"real","complex"),r=me(n,"imag","complex");return T(e.shape,r.shape,"real and imag shapes, "+e.shape+" and "+r.shape+", must match in call to tf.complex()."),Ut.runKernelFunc((function(t){return t.complex(e,r)}),{$real:e,$imag:r})}}),De=Ae({real_:function(t){var n=me(t,"input","real");return Ut.runKernelFunc((function(t){return t.real(n)}),{$input:n})}}),Ne=Ae({imag_:function(t){var n=me(t,"input","imag");return Ut.runKernelFunc((function(t){return t.imag(n)}),{$input:n})}});function _e(t,n,e){return Fe(t,n,pe(t,e),e)}function Fe(t,n,e,r){if(null==r&&(r=Z(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!j(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=n){st(n);var o=_(n),i=_(e);A(o===i,(function(){return"Based on the provided shape, ["+n+"], the tensor should have "+o+" values but has "+i}));for(var a=0;a<e.length;++a){var u=e[a],s=a!==e.length-1||u!==_(n.slice(a));A(e[a]===n[a]||!s,(function(){return"Error creating a new Tensor. Inferred shape ("+e+") does not match the provided shape ("+n+"). "}))}}return j(t)||Array.isArray(t)||(t=[t]),n=n||e,t="string"!==r?rt(t,r,h().getBool("DEBUG")):N(t,[],!0),Ut.makeTensor(t,n,r)}function Oe(t,n){if((j(t)&&"string"!==n||Array.isArray(t))&&"complex64"!==n)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===n&&j(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Fe(t,[],[],n)}function Me(t,n){D(t);var e=pe(t,n);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Fe(t,null,e,n)}function Be(t,n,e){if(D(t),null!=n&&2!==n.length)throw new Error("tensor2d() requires shape to have two numbers");var r=pe(t,e);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Fe(t,n,r,e)}function Pe(t,n,e){if(D(t),null!=n&&3!==n.length)throw new Error("tensor3d() requires shape to have three numbers");var r=pe(t,e);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Fe(t,n,r,e)}function Le(t,n,e){if(D(t),null!=n&&4!==n.length)throw new Error("tensor4d() requires shape to have four numbers");var r=pe(t,e);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Fe(t,n,r,e)}function We(t,n,e){if(D(t),null!=n&&5!==n.length)throw new Error("tensor5d() requires shape to have five numbers");var r=pe(t,e);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Fe(t,n,r,e)}function Ue(t,n,e){if(D(t),null!=n&&6!==n.length)throw new Error("tensor6d() requires shape to have six numbers");var r=pe(t,e);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Fe(t,n=n||r,r,e)}function ze(t,n,e,r){return void 0===n&&(n=!0),Ut.makeVariable(t,n,e,r)}function Ve(t,n){if(void 0===n&&(n="float32"),"complex64"===n){var e=Ve(t,"float32"),r=Ge(t,"float32");return Te(e,r)}var o=it(_(t),n);return Ut.makeTensor(o,t,n)}function Ge(t,n){if(void 0===n&&(n="float32"),"complex64"===n){var e=Ge(t,"float32"),r=Ge(t,"float32");return Te(e,r)}var o=at(_(t),n);return Ut.makeTensor(o,t,n)}function He(t,n,e){return Ut.runKernelFunc((function(r){return r.fill(t,n,e)}),{})}function qe(t,n,e){if(e<=0)throw new Error("The number of values should be positive.");return Ut.runKernelFunc((function(r){return r.linspace(t,n,e)}),{})}function Ke(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r="float32"),0===e)throw new Error("Cannot have a step of zero");if(t===n||t<n&&e<0||n<t&&e>1)return Ge([0],r);var o=at(Math.abs(Math.ceil((n-t)/e)),r);n<t&&1===e&&(e=-1),o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+e;return Me(o,r)}var je=Ae({onesLike_:function(t){var n=me(t,"x","onesLike");if("complex64"===n.dtype){var e=je(De(n)),r=Xe(Ne(n));return Te(e,r)}return Ut.runKernelFunc((function(t){return t.onesLike(n)}),{$x:n},(function(t,n){return{$x:function(){return Xe(t)}}}))}}),Xe=Ae({zerosLike_:function(t){var n=me(t,"x","zerosLike");return Ut.runKernelFunc((function(t){return t.zerosLike(n)}),{$x:n},(function(t,n){return{$x:function(){return Xe(t)}}}))}}),Ye=Ae({concat_:function(t,n){void 0===n&&(n=0),A(t.length>=1,(function(){return"Pass at least one tensor to concat"}));var e=ge(t,"tensors","concat");"complex64"===e[0].dtype&&e.forEach((function(t){if("complex64"!==t.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype "+t.dtype+". ")})),n=U(n,e[0].shape)[0];var r=Se(e.map((function(t){return t.shape})),n);if(0===_(r))return _e([],r);if(1===(e=e.filter((function(t){return t.size>0}))).length)return e[0];var o=e.map((function(t){return t.shape}));ke(o,n);var i=e,a={axis:n};return Ut.runKernelFunc((function(t){return t.concat(e,n)}),i,(function(t){var e=o.map((function(t){return t[n]}));return tr(t,e,n).map((function(t){return function(){return t}}))}),"Concat",a)}}),$e=Ae({concat1d_:function(t){return Ye(t,0)}}),Qe=Ae({concat2d_:function(t,n){return Ye(t,n)}}),Je=Ae({concat3d_:function(t,n){return Ye(t,n)}}),Ze=Ae({concat4d_:function(t,n){return Ye(t,n)}}),tr=Ae({split_:function(t,n,e){void 0===e&&(e=0);var r,o=me(t,"x","split");return e=U(e,o.shape)[0],"number"==typeof n?(A(o.shape[e]%n==0,(function(){return"Number of splits must evenly divide the axis."})),r=new Array(n).fill(o.shape[e]/n)):(A(o.shape[e]===n.reduce((function(t,n){return t+n})),(function(){return"The sum of sizes must match the size of the axis dimension."})),r=n),Ut.runKernelFunc((function(t){return t.split(o,r,e)}),{$x:o},(function(t){return{$x:function(){return Ye(t,e)}}}))}});function nr(t,n){return t(n={exports:{}},n.exports),n.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;var er=nr((function(t){!function(t,n,e){function r(t){var n,e=this,r=(n=4022871197,function(t){t=t.toString();for(var e=0;e<t.length;e++){var r=.02519603282416938*(n+=t.charCodeAt(e));r-=n=r>>>0,n=(r*=n)>>>0,n+=4294967296*(r-=n)}return 2.3283064365386963e-10*(n>>>0)});e.next=function(){var t=2091639*e.s0+2.3283064365386963e-10*e.c;return e.s0=e.s1,e.s1=e.s2,e.s2=t-(e.c=0|t)},e.c=1,e.s0=r(" "),e.s1=r(" "),e.s2=r(" "),e.s0-=r(t),e.s0<0&&(e.s0+=1),e.s1-=r(t),e.s1<0&&(e.s1+=1),e.s2-=r(t),e.s2<0&&(e.s2+=1),r=null}function o(t,n){return n.c=t.c,n.s0=t.s0,n.s1=t.s1,n.s2=t.s2,n}function i(t,n){var e=new r(t),i=n&&n.state,a=e.next;return a.int32=function(){return 4294967296*e.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,i&&("object"==typeof i&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.alea=i}(0,t)})),rr=nr((function(t){!function(t,n,e){function r(t){var n=this,e="";n.x=0,n.y=0,n.z=0,n.w=0,n.next=function(){var t=n.x^n.x<<11;return n.x=n.y,n.y=n.z,n.z=n.w,n.w^=n.w>>>19^t^t>>>8},t===(0|t)?n.x=t:e+=t;for(var r=0;r<e.length+64;r++)n.x^=0|e.charCodeAt(r),n.next()}function o(t,n){return n.x=t.x,n.y=t.y,n.z=t.z,n.w=t.w,n}function i(t,n){var e=new r(t),i=n&&n.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,i&&("object"==typeof i&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.xor128=i}(0,t)})),or=nr((function(t){!function(t,n,e){function r(t){var n=this,e="";n.next=function(){var t=n.x^n.x>>>2;return n.x=n.y,n.y=n.z,n.z=n.w,n.w=n.v,(n.d=n.d+362437|0)+(n.v=n.v^n.v<<4^t^t<<1)|0},n.x=0,n.y=0,n.z=0,n.w=0,n.v=0,t===(0|t)?n.x=t:e+=t;for(var r=0;r<e.length+64;r++)n.x^=0|e.charCodeAt(r),r==e.length&&(n.d=n.x<<10^n.x>>>4),n.next()}function o(t,n){return n.x=t.x,n.y=t.y,n.z=t.z,n.w=t.w,n.v=t.v,n.d=t.d,n}function i(t,n){var e=new r(t),i=n&&n.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,i&&("object"==typeof i&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.xorwow=i}(0,t)})),ir=nr((function(t){!function(t,n,e){function r(t){var n=this;n.next=function(){var t,e,r=n.x,o=n.i;return t=r[o],e=(t^=t>>>7)^t<<24,e^=(t=r[o+1&7])^t>>>10,e^=(t=r[o+3&7])^t>>>3,e^=(t=r[o+4&7])^t<<7,t=r[o+7&7],e^=(t^=t<<13)^t<<9,r[o]=e,n.i=o+1&7,e},function(t,n){var e,r=[];if(n===(0|n))r[0]=n;else for(n=""+n,e=0;e<n.length;++e)r[7&e]=r[7&e]<<15^n.charCodeAt(e)+r[e+1&7]<<13;for(;r.length<8;)r.push(0);for(e=0;e<8&&0===r[e];++e);for(8==e?r[7]=-1:r[e],t.x=r,t.i=0,e=256;e>0;--e)t.next()}(n,t)}function o(t,n){return n.x=t.x.slice(),n.i=t.i,n}function i(t,n){null==t&&(t=+new Date);var e=new r(t),i=n&&n.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,i&&(i.x&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.xorshift7=i}(0,t)})),ar=nr((function(t){!function(t,n,e){function r(t){var n=this;n.next=function(){var t,e,r=n.w,o=n.X,i=n.i;return n.w=r=r+1640531527|0,e=o[i+34&127],t=o[i=i+1&127],e^=e<<13,t^=t<<17,e^=e>>>15,t^=t>>>12,e=o[i]=e^t,n.i=i,e+(r^r>>>16)|0},function(t,n){var e,r,o,i,a,u=[],s=128;for(n===(0|n)?(r=n,n=null):(n+="\0",r=0,s=Math.max(s,n.length)),o=0,i=-32;i<s;++i)n&&(r^=n.charCodeAt((i+32)%n.length)),0===i&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(a=a+1640531527|0,o=0==(e=u[127&i]^=r+a)?o+1:0);for(o>=128&&(u[127&(n&&n.length||0)]=-1),o=127,i=512;i>0;--i)r=u[o+34&127],e=u[o=o+1&127],r^=r<<13,e^=e<<17,r^=r>>>15,e^=e>>>12,u[o]=r^e;t.w=a,t.X=u,t.i=o}(n,t)}function o(t,n){return n.i=t.i,n.w=t.w,n.X=t.X.slice(),n}function i(t,n){null==t&&(t=+new Date);var e=new r(t),i=n&&n.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,i&&(i.X&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.xor4096=i}(0,t)})),ur=nr((function(t){!function(t,n,e){function r(t){var n=this,e="";n.next=function(){var t=n.b,e=n.c,r=n.d,o=n.a;return t=t<<25^t>>>7^e,e=e-r|0,r=r<<24^r>>>8^o,o=o-t|0,n.b=t=t<<20^t>>>12^e,n.c=e=e-r|0,n.d=r<<16^e>>>16^o,n.a=o-t|0},n.a=0,n.b=0,n.c=-1640531527,n.d=1367130551,t===Math.floor(t)?(n.a=t/4294967296|0,n.b=0|t):e+=t;for(var r=0;r<e.length+20;r++)n.b^=0|e.charCodeAt(r),n.next()}function o(t,n){return n.a=t.a,n.b=t.b,n.c=t.c,n.d=t.d,n}function i(t,n){var e=new r(t),i=n&&n.state,a=function(){return(e.next()>>>0)/4294967296};return a.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=e.next,a.quick=a,i&&("object"==typeof i&&o(i,e),a.state=function(){return o(e,{})}),a}n&&n.exports?n.exports=i:this.tychei=i}(0,t)})),sr=nr((function(t){!function(n,r){var o,i=this,a=256,u="random",s=r.pow(a,6),c=r.pow(2,52),l=2*c,f=255;function h(t,e,f){var h=[],g=v(function t(n,e){var r,o=[],i=typeof n;if(e&&"object"==i)for(r in n)try{o.push(t(n[r],e-1))}catch(t){}return o.length?o:"string"==i?n:n+"\0"}((e=1==e?{entropy:!0}:e||{}).entropy?[t,m(n)]:null==t?function(){try{var t;return o&&(t=o.randomBytes)?t=t(a):(t=new Uint8Array(a),(i.crypto||i.msCrypto).getRandomValues(t)),m(t)}catch(t){var e=i.navigator,r=e&&e.plugins;return[+new Date,i,r,i.screen,m(n)]}}():t,3),h),y=new d(h),x=function(){for(var t=y.g(6),n=s,e=0;t<c;)t=(t+e)*a,n*=a,e=y.g(1);for(;t>=l;)t/=2,n/=2,e>>>=1;return(t+e)/n};return x.int32=function(){return 0|y.g(4)},x.quick=function(){return y.g(4)/4294967296},x.double=x,v(m(y.S),n),(e.pass||f||function(t,n,e,o){return o&&(o.S&&p(o,y),t.state=function(){return p(y,{})}),e?(r[u]=t,n):t})(x,g,"global"in e?e.global:this==r,e.state)}function d(t){var n,e=t.length,r=this,o=0,i=r.i=r.j=0,u=r.S=[];for(e||(t=[e++]);o<a;)u[o]=o++;for(o=0;o<a;o++)u[o]=u[i=f&i+t[o%e]+(n=u[o])],u[i]=n;(r.g=function(t){for(var n,e=0,o=r.i,i=r.j,u=r.S;t--;)n=u[o=f&o+1],e=e*a+u[f&(u[o]=u[i=f&i+n])+(u[i]=n)];return r.i=o,r.j=i,e})(a)}function p(t,n){return n.i=t.i,n.j=t.j,n.S=t.S.slice(),n}function v(t,n){for(var e,r=t+"",o=0;o<r.length;)n[f&o]=f&(e^=19*n[f&o])+r.charCodeAt(o++);return m(n)}function m(t){return String.fromCharCode.apply(0,t)}if(r.seedrandom=h,v(r.random(),n),t.exports){t.exports=h;try{o=e(10)}catch(t){}}}([],Math)}));sr.alea=er,sr.xor128=rr,sr.xorwow=or,sr.xorshift7=ir,sr.xor4096=ar,sr.tychei=ur;var cr=sr.alea,lr=function(){function t(t,n,e,r,o){this.mean=t,this.stdDev=n,this.dtype=e,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var i=o||Math.random();this.random=cr(i.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var n,e,r=!1;!r;){var o=void 0,i=void 0,a=void 0;do{a=(o=2*this.random()-1)*o+(i=2*this.random()-1)*i}while(a>=1||0===a);var u=Math.sqrt(-2*Math.log(a)/a);n=this.mean+this.stdDev*o*u,e=this.mean+this.stdDev*i*u,this.truncated&&!this.isValidTruncated(n)||(r=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(n)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),fr=function(){function t(t,n,e,r){this.alpha=t,this.beta=1/n,this.dtype=e;var o=r||Math.random();this.randu=cr(o.toString()),this.randn=new lr(0,1,e,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,n,e,r,o,i;;){do{r=this.randn.nextValue(),i=1+this.c*r}while(i<=0);if(i*=i*i,n=1-.331*(t=r*r)*t,e=.5*t+this.d*(1-i+Math.log(i)),(o=this.randu())<n||Math.log(o)<e)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)},t.prototype.convertValue=function(t){return"float32"===this.dtype?t:Math.round(t)},t}(),hr=function(){function t(t,n,e,r){var o=this;if(void 0===t&&(t=0),void 0===n&&(n=1),this.canReturnFloat=function(){return null==o.dtype||"float32"===o.dtype},this.min=t,this.range=n-t,this.dtype=e,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between "+t+" - "+n+" <= 1 and dtype is not float");this.random=cr(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();function dr(t,n,e){return void 0===n&&(n="float32"),n=n||"float32",st(t),new xt(t,n,e)}function pr(t,n){void 0===n&&(n=!1),console.log(t.toString(n))}var vr=Ae({batchToSpaceND_:function(t,n,e){var r=me(t,"x","batchToSpaceND"),o=n.reduce((function(t,n){return t*n}));return A(r.rank>=1+n.length,(function(){return"input rank is "+r.rank+" but should be > than blockShape.length "+n.length})),A(e.length===n.length,(function(){return"crops.length is "+e.length+" but should be equal to blockShape.length  "+n.length})),A(r.shape[0]%o==0,(function(){return"input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+n.join(" * ")+" === "+o})),Ut.runKernelFunc((function(t){return t.batchToSpaceND(r,n,e)}),{$x:r},(function(t){return{$x:function(){return t.spaceToBatchND(n,e)}}}))}}),mr=Ae({broadcastTo_:function(t,n){var e=me(t,"broadcastTo","x"),r=e.shape;if(n.some((function(t){return!(t>0)||t%1!=0})))throw new Error("broadcastTo(): Invalid broadcast shape ["+n+"].");if(n.length<e.rank)throw new Error("broadcastTo(): shape.length="+n.length+" < input.rank="+e.rank+".");if(n.length>e.rank){for(var o=e.shape.slice();o.length<n.length;)o.unshift(1);e=e.reshape(o)}for(var i=Array.from(n),a=n.length-1;a>=0;a--)if(e.shape[a]===n[a])i[a]=1;else if(1!==e.shape[a])throw new Error("broadcastTo(): ["+r+"] cannot be broadcast to ["+n+"].");var u=i.map((function(t,n){return t>1?n:-1})).filter((function(t){return t>=0}));return 0===u.length?e.clone():Ut.runKernelFunc((function(t){return t.tile(e,i)}),{input:e},(function(t){return{input:function(){return t.sum(u,!0)}}}))}}),gr=Ae({cast_:function(t,n){var e=me(t,"x","cast");if(!q(n))throw new Error("Failed to cast to unknown dtype "+n);if("string"===n&&"string"!==e.dtype||"string"!==n&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");var r={dtype:n};return Ut.runKernelFunc((function(t){return t.cast(e,n)}),{x:e},(function(t){return{x:function(){return t.clone()}}}),"Cast",r)}}),yr=Ae({clone_:function(t){var n=me(t,"x","clone",null);return Ut.runKernelFunc((function(){return Ut.makeTensorFromDataId(n.dataId,n.shape,n.dtype)}),{$x:n},(function(t){return{$x:function(){return t.toFloat()}}}))}}),xr=Ae({cumsum_:function(t,n,e,r){void 0===n&&(n=0),void 0===e&&(e=!1),void 0===r&&(r=!1);var o=me(t,"x","cumsum"),i=Ee([n|=0],o.rank),a=o;null!=i&&(a=o.transpose(i));var u=Ie(1,o.rank)[0],s=Ut.runKernelFunc((function(t){return t.cumsum(a,u,e,r)}),{permutedX:a},(function(t){return{permutedX:function(){return t.cumsum(n,e,!r)}}}));return null!=i&&(s=s.transpose(i)),s}}),br=Ae({depthToSpace_:function(t,n,e){void 0===e&&(e="NHWC");var r=me(t,"x","depthToSpace"),o="NHWC"===e?r.shape[1]:r.shape[2],i="NHWC"===e?r.shape[2]:r.shape[3],a="NHWC"===e?r.shape[3]:r.shape[1];return A(o*n>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+o+" and "+n+"  for depthToSpace with input shape\n      "+r.shape})),A(i*n>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+i+" and "+n+" for depthToSpace with input shape\n          "+r.shape})),A(a%(n*n)==0,(function(){return"Dimension size must be evenly divisible by "+n*n+" but is "+a+" for depthToSpace with input shape "+r.shape})),Ut.runKernelFunc((function(t){return t.depthToSpace(r,n,e)}),{$x:r})}}),wr=Ae({expandDims_:function(t,n){void 0===n&&(n=0);var e=me(t,"x","expandDims",null);A(n<=e.rank,(function(){return"Axis must be <= rank of the tensor"}));var r=e.shape.slice();return n<0&&(A(-(e.rank+1)<=n,(function(){return"Axis must be in the interval ["+-(e.rank+1)+", "+e.rank+"]"})),n=e.rank+n+1),r.splice(n,0,1),Or(e,r)}}),Cr=Ae({eye_:function(t,n,e,r){void 0===r&&(r="float32"),null==n&&(n=t);for(var o=dr([t,n],r),i=t<=n?t:n,a=0;a<i;++a)o.set(1,a,a);var u=o.toTensor().as2D(t,n);if(null==e)return u;if(1===e.length)return Lr(wr(u,0),[e[0],1,1]);if(2===e.length)return Lr(wr(wr(u,0),0),[e[0],e[1],1,1]);if(3===e.length)return Lr(wr(wr(wr(u,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+e.length+"D.")}}),Er=Ae({multinomial_:function(t,n,e,r){void 0===r&&(r=!1);var o=me(t,"logits","multinomial"),i=o.size,a=o.rank;if(i<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+i+".");if(a>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+a);e=e||Math.random();var u=1===a?o.as2D(1,-1):o,s=Ut.runKernelFunc((function(t){return t.multinomial(u,r,n,e)}),{logits2D:u});return 1===a?s.as1D():s}}),Rr=Ae({oneHot_:function(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r=0),n<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+n);var o=me(t,"indices","oneHot","int32"),i=o.shape.concat([n]);return o=o.flatten(),Ut.runKernelFunc((function(t){return t.oneHot(o,n,e,r)}),{$indices:o},(function(t){return{$indices:function(){return Ge(o.shape,"float32")}}})).reshape(i)}}),Ir=Ae({pad_:function(t,n,e){void 0===e&&(e=0);var r=me(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var o={paddings:n,constantValue:e};return Ut.runKernelFunc((function(t){return t.pad(r,n,e)}),{x:r},(function(t){var e=n.map((function(t){return t[0]}));return{x:function(){return t.slice(e,r.shape)}}}),"PadV2",o)}}),kr=Ae({pad1d_:function(t,n,e){return void 0===e&&(e=0),A(2===n.length,(function(){return"Invalid number of paddings. Must be length of 2."})),Ir(t,[n],e)}}),Sr=Ae({pad2d_:function(t,n,e){return void 0===e&&(e=0),A(2===n.length&&2===n[0].length&&2===n[1].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),Ir(t,n,e)}}),Ar=Ae({pad3d_:function(t,n,e){return void 0===e&&(e=0),A(3===n.length&&2===n[0].length&&2===n[1].length&&2===n[2].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),Ir(t,n,e)}}),Tr=Ae({pad4d_:function(t,n,e){return void 0===e&&(e=0),A(4===n.length&&2===n[0].length&&2===n[1].length&&2===n[2].length&&2===n[3].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),Ir(t,n,e)}}),Dr=Ae({rand_:function(t,n,e){var r=_(t),o=null;if(null==e||"float32"===e)o=new Float32Array(r);else if("int32"===e)o=new Int32Array(r);else{if("bool"!==e)throw new Error("Unknown data type "+e);o=new Uint8Array(r)}for(var i=0;i<r;i++)o[i]=n();return Ut.makeTensor(o,t,e)}}),Nr=Ae({randomNormal_:function(t,n,e,r,o){if(void 0===n&&(n=0),void 0===e&&(e=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new lr(n,e,r,!1,o),a=dr(t,r),u=0;u<a.values.length;u++)a.values[u]=i.nextValue();return a.toTensor()}}),_r=Ae({randomGamma_:function(t,n,e,r,o){if(void 0===e&&(e=1),void 0===r&&(r="float32"),null==e&&(e=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);for(var i=new fr(n,e,r,o),a=dr(t,r),u=0;u<a.values.length;u++)a.values[u]=i.nextValue();return a.toTensor()}}),Fr=Ae({randomUniform_:function(t,n,e,r,o){void 0===n&&(n=0),void 0===e&&(e=1),void 0===r&&(r="float32");for(var i=dr(t,r),a=new hr(n,e,null,o),u=0;u<i.values.length;u++)i.values[u]=a.nextValue();return i.toTensor()}}),Or=Ae({reshape_:function(t,n){var e=me(t,"x","reshape",null);n=W(n,e.size),A(e.size===_(n),(function(){return"new shape and old shape must have the same number of elements."}));var r={shape:n};return Ut.runKernelFunc((function(t){return t.reshape(e,n)}),{x:e},(function(t){return{x:function(){return t.reshape(e.shape)}}}),"Reshape",r)}}),Mr=Ae({spaceToBatchND_:function(t,n,e){var r=me(t,"x","spaceToBatchND");return A(r.rank>=1+n.length,(function(){return"input rank "+r.rank+" should be > than [blockShape] "+n.length})),A(e.length===n.length,(function(){return"paddings.shape[0] "+e.length+" must be equal to [blockShape] "+n.length})),A(r.shape.reduce((function(t,r,o){return o>0&&o<=n.length?t&&(r+e[o-1][0]+e[o-1][1])%n[o-1]==0:t}),!0),(function(){return"input spatial dimensions "+r.shape.slice(1)+" with paddings "+e.toString()+" must be divisible by blockShapes "+n.toString()})),Ut.runKernelFunc((function(t){return t.spaceToBatchND(r,n,e)}),{$x:r},(function(t){return{$x:function(){return t.batchToSpaceND(n,e)}}}))}}),Br=Ae({squeeze_:function(t,n){var e=me(t,"x","squeeze");return Or(e,z(e.shape,n).newShape)}}),Pr=Ae({stack_:function(t,n){void 0===n&&(n=0);var e=ge(t,"tensors","stack");if(A(e.length>=1,(function(){return"Pass at least one tensor to tf.stack"})),1===e.length)return e[0].expandDims(n);var r=e[0].rank,o=e[0].shape,i=e[0].dtype;A(n<=r,(function(){return"Axis must be <= rank of the tensor"})),e.forEach((function(t){T(o,t.shape,"All tensors passed to stack must have matching shapes")})),e.forEach((function(t){A(i===t.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var a=e.map((function(t){return t.expandDims(n)}));return Ye(a,n)}}),Lr=Ae({tile_:function(t,n){var e=me(t,"x","tile",null);A(e.rank===n.length,(function(){return"Error in transpose: rank of input "+e.rank+" must match length of reps "+n+"."}));var r=[e],o={reps:n};return Ut.runKernelFunc((function(t,r){var o=t.tile(e,n);return r([e]),o}),{x:e},(function(t,e){var r=e[0];return{x:function(){var e=Xe(r);if(1===r.rank)for(var o=0;o<n[0];++o)e=e.add(t.slice([o*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(o=0;o<n[0];++o)for(var i=0;i<n[1];++i)e=e.add(t.slice([o*r.shape[0],i*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(o=0;o<n[0];++o)for(i=0;i<n[1];++i)for(var a=0;a<n[2];++a)e=e.add(t.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(o=0;o<n[0];++o)for(i=0;i<n[1];++i)for(a=0;a<n[2];++a)for(var u=0;u<n[3];++u)e=e.add(t.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2],u*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return e}}}),"Tile",o,r)}}),Wr=Ae({truncatedNormal_:function(t,n,e,r,o){if(void 0===n&&(n=0),void 0===e&&(e=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new lr(n,e,r,!0,o),a=dr(t,r),u=0;u<a.values.length;u++)a.values[u]=i.nextValue();return a.toTensor()}}),Ur=Ae({unstack_:function(t,n){void 0===n&&(n=0),n=n||0;var e=me(t,"x","unstack");A(n>=-e.shape.length&&n<e.shape.length,(function(){return"Axis = "+n+" is not in [-"+e.shape.length+", "+e.shape.length+")"})),n<0&&(n+=e.shape.length);var r={axis:n};return Ut.runKernelFunc((function(t){return t.unstack(e,n)}),{x:e},(function(t){return{x:function(){return Pr(t,n)}}}),"Unpack",r)}}),zr=function(t,n){return s(this,void 0,void 0,(function(){var e,r,o,i,a,u,s,l,f,h;return c(this,(function(c){switch(c.label){case 0:return e=me(t,"x","setdiff1d"),r=me(n,"y","setdiff1d"),A(e.dtype===r.dtype,(function(){return"x and y should have the same dtype, but got x ("+e.dtype+") and y ("+r.dtype+")."})),A(1===e.rank,(function(){return"x should be 1D tensor, but got x ("+e.shape+")."})),A(1===r.rank,(function(){return"y should be 1D tensor, but got y ("+r.shape+")."})),[4,e.data()];case 1:return o=c.sent(),[4,r.data()];case 2:for(i=c.sent(),a=new Set(i),u=0,f=0;f<o.length;f++)a.has(o[f])||u++;for(s=new xt([u],e.dtype),l=new xt([u],"int32"),f=0,h=0;f<o.length;f++)a.has(o[f])||(s.values[h]=o[f],l.values[h]=f,h++);return[2,[s.toTensor(),l.toTensor()]]}}))}))};function Vr(t,n,e,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(n.slice(0))).push(t[0]/e),o=o.concat(t.slice(1));else{o=o.concat(t[0]);for(var i=n.length,a=0;a<i;++a)o=o.concat([t[a+1]/n[a],n[a]]);o=o.concat(t.slice(i+1))}return o}function Gr(t,n,e){void 0===e&&(e=!0);var r=[];if(e){r.push(n);for(var o=n+1;o<t;++o)o<=2*n?(r.push(o),r.push(o-(n+1))):r.push(o)}else{var i=[],a=[];for(o=1;o<t;++o)o>=2*n+1||o%2==1?a.push(o):i.push(o);r.push.apply(r,i),r.push(0),r.push.apply(r,a)}return r}function Hr(t,n,e,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/e):o.push(t[0]*e);for(var i=1;i<t.length;++i)i<=n.length?r?o.push(n[i-1]*t[i]):o.push(t[i]/n[i-1]):o.push(t[i]);return o}function qr(t,n){for(var e=[0],r=0;r<n;++r)e.push(t[r][0]);return e}function Kr(t,n,e){for(var r=t.slice(0,1),o=0;o<e;++o)r.push(t[o+1]-n[o][0]-n[o][1]);return r}function jr(t,n){if(t.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+t.rank+".");if(n.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+n.rank+".");if("int32"!==n.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+n.dtype+".");if(n.shape[n.rank-1]>t.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+n.shape[n.rank-1]+" vs. "+t.rank);if(0===t.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+t.shape+".");for(var e=n.shape,r=e[e.length-1],o=1,i=0;i<e.length-1;++i)o*=e[i];var a=t.shape,u=e.slice();u.pop();var s=1;for(i=r;i<t.rank;++i)s*=a[i],u.push(a[i]);var c=et(t.shape).map((function(t){return t/s})).concat([1]).slice(0,r);return[u,o,s,c]}var Xr=Object.freeze({prepareAndValidate:jr});function Yr(t){return t<=30?t:nt(t,Math.floor(Math.sqrt(t)))}function $r(t,n,e){var r=n.rank>1?n.shape[n.rank-1]:1,o=n.rank>1?n.rank-1:1,i="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+e.shape+", indices.shape: "+n.shape+", shape: "+t+", sliceDim: "+r+", and batchDim: "+o+".";if(e.rank<o)throw new Error(i+" update.rank < "+o+". ");if(t.length<r+(e.rank-o))throw new Error(i+" Output shape length < "+(r+(e.rank-o)));if(e.rank!==o+t.length-r)throw new Error(i+" update.rank != "+(o+t.length-r));for(var a=0;a<o;++a)if(e.shape[a]!==n.shape[a])throw new Error(i+" updates.shape["+a+"] ("+e.shape[a]+") != indices.shape["+a+"] ("+n.shape[a]+").");for(a=0;a<e.rank-o;++a)if(e.shape[a+o]!==t[a+r])throw new Error(i+" updates.shape["+(a+o)+"] ("+e.shape[a+o]+") != shape["+(a+o)+"] ("+t[a+o]+")")}function Qr(t,n,e){if(n.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+n.rank+".");if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==n.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+n.dtype);if(e.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+e);if(0===e.length){if(0===n.size)throw new Error("Indices specified for empty output. indices shape: "+n.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}$r(e,n,t)}function Jr(t,n,e){for(var r=n.shape.length,o=r>1?n.shape[r-1]:1,i=e.length,a=1,u=o;u<i;++u)a*=e[u];var s=o<1?1:o;return{sliceRank:o,numUpdates:_(n.shape)/s,sliceSize:a,strides:et(e.slice(0,o)).concat([1]),outputSize:_(e)}}var Zr=Object.freeze({validateUpdateShape:$r,validateInput:Qr,calculateShapes:Jr});function to(t,n,e){A(t.rank===n.length,(function(){return"Error in slice"+t.rank+"D: Length of begin "+n+" must match the rank of the array ("+t.rank+")."})),A(t.rank===e.length,(function(){return"Error in slice"+t.rank+"D: Length of size "+e+" must match the rank of the array ("+t.rank+")."}));for(var r=function(r){A(n[r]+e[r]<=t.shape[r],(function(){return"Error in slice"+t.rank+"D: begin["+r+"] + size["+r+"] ("+(n[r]+e[r])+") would overflow input.shape["+r+"] ("+t.shape[r]+")"}))},o=0;o<t.rank;++o)r(o)}function no(t){for(var n=[],e=0;t>0;)1&t&&n.push(e),t/=2,e++;return n}function eo(t,n,e){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((n[o]-t[o])/e[o]);return r}function ro(t,n,e,r,o){var i=n[o],a=e[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var u=r[o];return i<0&&(i+=u),I(0,i,u-1)}function oo(t,n,e,r,o){var i=n[o],a=e[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var u=r[o];return i<0&&(i+=u),a>0?I(0,i,u):I(-1,i,u-1)}function io(t,n,e){for(var r=e.length,o=0;o<e.length;o++)if(e[o]>1){r=o;break}for(o=r+1;o<e.length;o++)if(n[o]>0||e[o]!==t[o])return!1;return!0}function ao(t,n){for(var e=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)e+=t[r]*n[r];return e}var uo=Object.freeze({assertParamsValid:to,maskToAxes:no,computeOutShape:eo,startForAxis:ro,stopForAxis:oo,isSliceContinous:io,computeFlatOffset:ao});function so(t){return A(tt(t),(function(){return"The f passed in grad(f) must be a function"})),function(n,e){var r=me(n,"x","tf.grad",null),o=null!=e?me(e,"dy","tf.grad"):null;return Ut.tidy((function(){var n=Ut.gradients((function(){return t(r)}),[r],o),e=n.value,i=n.grads;return null!=o&&T(e.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),vo(i),i[0]}))}}function co(t){return A(tt(t),(function(){return"The f passed in grads(f) must be a function"})),function(n,e){A(Array.isArray(n),(function(){return"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"}));var r=ge(n,"args","tf.grads",null),o=null!=e?me(e,"dy","tf.grads"):null;return Ut.tidy((function(){var n=Ut.gradients((function(){return t.apply(void 0,r)}),r,o),e=n.value,i=n.grads;return null!=o&&T(e.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),vo(i),i}))}}function lo(t){return A(tt(t),(function(){return"The f passed in valueAndGrad(f) must be a function"})),function(n,e){A(n instanceof Et,(function(){return"The x passed in valueAndGrad(f)(x) must be a tensor"})),A(null==e||e instanceof Et,(function(){return"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"}));var r=Ut.gradients((function(){return t(n)}),[n],e),o=r.grads,i=r.value;return vo(o),{grad:o[0],value:i}}}function fo(t){return A(tt(t),(function(){return"The f passed in valueAndGrads(f) must be a function"})),function(n,e){A(Array.isArray(n)&&n.every((function(t){return t instanceof Et})),(function(){return"The args passed in valueAndGrads(f)(args) must be array of tensors"})),A(null==e||e instanceof Et,(function(){return"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"}));var r=Ut.gradients((function(){return t.apply(void 0,n)}),n,e);return null!=e&&T(r.value.shape,e.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),vo(r.grads),r}}function ho(t,n){A(tt(t),(function(){return"The f passed in variableGrads(f) must be a function"})),A(null==n||Array.isArray(n)&&n.every((function(t){return t instanceof Tt})),(function(){return"The varList passed in variableGrads(f, varList) must be an array of variables"}));var e=null!=n;if(!e)for(var r in n=[],Ut.registeredVariables)n.push(Ut.registeredVariables[r]);var o=e?n.filter((function(t){return!t.trainable})):null,i=n.length;A((n=n.filter((function(t){return t.trainable}))).length>0,(function(){return"variableGrads() expects at least one of the input variables to be trainable, but none of the "+i+" variables is trainable."}));var a=Ut.gradients(t,n,null,!0),u=a.value,s=a.grads;A(s.some((function(t){return null!=t})),(function(){return"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),A(0===u.rank,(function(){return"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+u.rank+" tensor"}));var c={};return n.forEach((function(t,n){null!=s[n]&&(c[t.name]=s[n])})),null!=o&&o.forEach((function(t){return c[t.name]=null})),{value:u,grads:c}}function po(t){return Ut.customGrad(t)}function vo(t){if(t.filter((function(t){return null==t})).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var mo=Ae({softmax_:function(t,n){void 0===n&&(n=-1);var e=me(t,"logits","softmax","float32");if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+e.rank+" and dim was "+n);return Ut.runKernelFunc((function(t,r){var o=t.softmax(e,n);return r([o]),o}),{logits:e},(function(t,e){var r=e[0],o=t.mul(r);return{logits:function(){return o.sub(o.sum([n],!0).mul(r))}}}),"Softmax",{dim:n},[],[!0])}}),go=Ae({logSoftmax_:function(t,n){void 0===n&&(n=-1);var e=me(t,"logits","logSoftmax");if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+e.rank+" and axis was "+n);return po((function(t,e){var r=t.max(n,!0),o=t.sub(r),i=o.toFloat().sub(o.exp().sum(n,!0).log());return e([i]),{value:i,gradFunc:function(t,e){var r=e[0].exp();return t.sub(t.sum(n,!0).mul(r))}}}))(e)}}),yo=function(){function t(t,n){this.backend=t,this.dataMover=n,this.data=new WeakMap,this.dataIdsCount=0}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,n){this.dataIdsCount++,this.data.set(t,n)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.dataIdsCount--,this.data.delete(t)},t.prototype.numDataIds=function(){return this.dataIdsCount},t}(),xo=function(){function t(){}return t.prototype.time=function(t){return bo("time")},t.prototype.read=function(t){return bo("read")},t.prototype.readSync=function(t){return bo("readSync")},t.prototype.numDataIds=function(){return bo("numDataIds")},t.prototype.disposeData=function(t){return bo("disposeData")},t.prototype.write=function(t,n,e){return bo("write")},t.prototype.move=function(t,n,e,r){return bo("move")},t.prototype.memory=function(){return bo("memory")},t.prototype.floatPrecision=function(){return bo("floatPrecision")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,n,e,r){return bo("batchMatMul")},t.prototype.fusedBatchMatMul=function(t){return t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights,bo("fusedBatchMatMul")},t.prototype.slice=function(t,n,e){return bo("slice")},t.prototype.stridedSlice=function(t,n,e,r){return bo("stridedSlice")},t.prototype.unstack=function(t,n){return bo("unstack")},t.prototype.reverse=function(t,n){return bo("reverse")},t.prototype.concat=function(t,n){return bo("concat")},t.prototype.neg=function(t){return bo("neg")},t.prototype.add=function(t,n){return bo("add")},t.prototype.addN=function(t){return bo("addN")},t.prototype.subtract=function(t,n){return bo("subtract")},t.prototype.multiply=function(t,n){return bo("multiply")},t.prototype.realDivide=function(t,n){return bo("realDivide")},t.prototype.floorDiv=function(t,n){return bo("floorDiv")},t.prototype.sum=function(t,n){return bo("sum")},t.prototype.prod=function(t,n){return bo("prod")},t.prototype.unsortedSegmentSum=function(t,n,e){return bo("unsortedSegmentSum")},t.prototype.argMin=function(t,n){return bo("argMin")},t.prototype.argMax=function(t,n){return bo("argMax")},t.prototype.equal=function(t,n){return bo("equal")},t.prototype.notEqual=function(t,n){return bo("notEqual")},t.prototype.less=function(t,n){return bo("less")},t.prototype.lessEqual=function(t,n){return bo("lessEqual")},t.prototype.greater=function(t,n){return bo("greater")},t.prototype.greaterEqual=function(t,n){return bo("greaterEqual")},t.prototype.logicalNot=function(t){return bo("logicalNot")},t.prototype.logicalAnd=function(t,n){return bo("logicalAnd")},t.prototype.logicalOr=function(t,n){return bo("logicalOr")},t.prototype.where=function(t){return bo("where")},t.prototype.select=function(t,n,e){return bo("select")},t.prototype.topk=function(t,n,e){return bo("topk")},t.prototype.min=function(t,n){return bo("min")},t.prototype.minimum=function(t,n){return bo("minimum")},t.prototype.mod=function(t,n){return bo("mod")},t.prototype.max=function(t,n){return bo("max")},t.prototype.maximum=function(t,n){return bo("maximum")},t.prototype.all=function(t,n){return bo("all")},t.prototype.any=function(t,n){return bo("any")},t.prototype.squaredDifference=function(t,n){return bo("squaredDifference")},t.prototype.ceil=function(t){return bo("ceil")},t.prototype.floor=function(t){return bo("floor")},t.prototype.round=function(t){return bo("round")},t.prototype.sign=function(t){return bo("sign")},t.prototype.isNaN=function(t){return bo("isNaN")},t.prototype.isInf=function(t){return bo("isInf")},t.prototype.isFinite=function(t){return bo("isFinite")},t.prototype.pow=function(t,n){return bo("pow")},t.prototype.exp=function(t){return bo("exp")},t.prototype.expm1=function(t){return bo("expm1")},t.prototype.softmax=function(t,n){return bo("softmax")},t.prototype.log=function(t){return bo("log")},t.prototype.log1p=function(t){return bo("log1p")},t.prototype.sqrt=function(t){return bo("sqrt")},t.prototype.rsqrt=function(t){return bo("rsqrt")},t.prototype.square=function(t){return bo("square")},t.prototype.reciprocal=function(t){return bo("reciprocal")},t.prototype.relu=function(t){return bo("relu")},t.prototype.relu6=function(t){return bo("relu6")},t.prototype.prelu=function(t,n){return bo("prelu")},t.prototype.elu=function(t){return bo("elu")},t.prototype.eluDer=function(t,n){return bo("eluDer")},t.prototype.selu=function(t){return bo("selu")},t.prototype.int=function(t){return bo("int")},t.prototype.clip=function(t,n,e){return bo("clip")},t.prototype.abs=function(t){return bo("abs")},t.prototype.complexAbs=function(t){return bo("complexAbs")},t.prototype.sigmoid=function(t){return bo("sigmoid")},t.prototype.softplus=function(t){return bo("softplus")},t.prototype.sin=function(t){return bo("sin")},t.prototype.cos=function(t){return bo("cos")},t.prototype.tan=function(t){return bo("tan")},t.prototype.asin=function(t){return bo("asin")},t.prototype.acos=function(t){return bo("acos")},t.prototype.atan=function(t){return bo("atan")},t.prototype.atan2=function(t,n){return bo("atan2")},t.prototype.sinh=function(t){return bo("sinh")},t.prototype.cosh=function(t){return bo("cosh")},t.prototype.tanh=function(t){return bo("tanh")},t.prototype.asinh=function(t){return bo("asinh")},t.prototype.acosh=function(t){return bo("acosh")},t.prototype.atanh=function(t){return bo("atanh")},t.prototype.erf=function(t){return bo("erf")},t.prototype.step=function(t,n){return bo("step")},t.prototype.fusedConv2d=function(t){return t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,bo("fusedConv2d")},t.prototype.conv2d=function(t,n,e){return bo("conv2d")},t.prototype.conv2dDerInput=function(t,n,e){return bo("conv2dDerInput")},t.prototype.conv2dDerFilter=function(t,n,e){return bo("conv2dDerFilter")},t.prototype.fusedDepthwiseConv2D=function(t){return t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,bo("fusedDepthwiseConv2D")},t.prototype.depthwiseConv2D=function(t,n,e){return bo("depthwiseConv2D")},t.prototype.depthwiseConv2DDerInput=function(t,n,e){return bo("depthwiseConv2DDerInput")},t.prototype.depthwiseConv2DDerFilter=function(t,n,e){return bo("depthwiseConv2DDerFilter")},t.prototype.conv3d=function(t,n,e){return bo("conv3d")},t.prototype.conv3dDerInput=function(t,n,e){return bo("conv3dDerInput")},t.prototype.conv3dDerFilter=function(t,n,e){return bo("conv3dDerFilter")},t.prototype.maxPool=function(t,n){return bo("maxPool")},t.prototype.maxPoolBackprop=function(t,n,e,r){return bo("maxPoolBackprop")},t.prototype.avgPool=function(t,n){return bo("avgPool")},t.prototype.avgPoolBackprop=function(t,n,e){return bo("avgPoolBackprop")},t.prototype.avgPool3d=function(t,n){return bo("avgPool3d")},t.prototype.avgPool3dBackprop=function(t,n,e){return bo("avgPool3dBackprop")},t.prototype.maxPool3d=function(t,n){return bo("maxPool3d")},t.prototype.maxPool3dBackprop=function(t,n,e,r){return bo("maxPool3dBackprop")},t.prototype.reshape=function(t,n){return bo("reshape")},t.prototype.cast=function(t,n){return bo("cast")},t.prototype.tile=function(t,n){return bo("tile")},t.prototype.pad=function(t,n,e){return bo("pad")},t.prototype.transpose=function(t,n){return bo("transpose")},t.prototype.gather=function(t,n,e){return bo("gather")},t.prototype.gatherND=function(t,n){return bo("gatherND")},t.prototype.scatterND=function(t,n,e){return bo("scatterND")},t.prototype.batchToSpaceND=function(t,n,e){return bo("batchToSpaceND")},t.prototype.spaceToBatchND=function(t,n,e){return bo("spaceToBatchND")},t.prototype.resizeBilinear=function(t,n,e,r){return bo("resizeBilinear")},t.prototype.resizeBilinearBackprop=function(t,n,e){return bo("resizeBilinearBackprop")},t.prototype.resizeNearestNeighbor=function(t,n,e,r){return bo("resizeNearestNeighbor")},t.prototype.resizeNearestNeighborBackprop=function(t,n,e){return bo("resizeNearestNeighborBackprop")},t.prototype.batchNormalization=function(t,n,e,r,o,i){return bo("batchNormalization")},t.prototype.localResponseNormalization4D=function(t,n,e,r,o){return bo("localResponseNormalization4D")},t.prototype.LRNGrad=function(t,n,e,r,o,i,a){return bo("LRNGrad")},t.prototype.multinomial=function(t,n,e,r){return bo("multinomial")},t.prototype.oneHot=function(t,n,e,r){return bo("oneHot")},t.prototype.cumsum=function(t,n,e,r){return bo("cumsum")},t.prototype.nonMaxSuppression=function(t,n,e,r,o){return bo("nonMaxSuppression")},t.prototype.fft=function(t){return bo("fft")},t.prototype.ifft=function(t){return bo("ifft")},t.prototype.complex=function(t,n){return bo("complex")},t.prototype.real=function(t){return bo("real")},t.prototype.imag=function(t){return bo("imag")},t.prototype.cropAndResize=function(t,n,e,r,o,i){return bo("cropAndResize")},t.prototype.depthToSpace=function(t,n,e){return bo("depthToSpace")},t.prototype.split=function(t,n,e){return bo("split")},t.prototype.sparseToDense=function(t,n,e,r){return bo("sparseToDense")},t.prototype.diag=function(t){return bo("diag")},t.prototype.fill=function(t,n,e){return bo("fill")},t.prototype.onesLike=function(t){return bo("onesLike")},t.prototype.zerosLike=function(t){return bo("zerosLike")},t.prototype.linspace=function(t,n,e){return bo("linspace")},t.prototype.dispose=function(){return bo("dispose")},t}();function bo(t){throw new Error("'"+t+"' not yet implemented or not found in the registry. Did you forget to import the kernel?")}function wo(t,n){for(var e=t.length,r=[],o=0;o<e;o++){var i=e-1-o,a=t[i]||1;(n[n.length-1-o]||1)>1&&1===a&&r.unshift(i)}return r}function Co(t,n){for(var e=[],r=0;r<n.length;r++){var o=t[t.length-r-1],i=n.length-r-1,a=n[i];(null==o||1===o&&a>1)&&e.unshift(i)}return e}function Eo(t,n){for(var e=[],r=Math.max(t.length,n.length),o=0;o<r;o++){var i=t[t.length-o-1];null==i&&(i=1);var a=n[n.length-o-1];if(null==a&&(a=1),1===i)e.unshift(a);else if(1===a)e.unshift(i);else{if(i!==a)throw Error("Operands could not be broadcast together with shapes "+t+" and "+n+".");e.unshift(i)}}return e}function Ro(t,n,e,r,o,i,a){void 0===a&&(a="channelsLast");var u,s=To(n),c=s[0],l=s[1];if("channelsLast"===a)u=[c,l,t[3],t[3]];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);u=[c,l,t[1],t[1]]}return ko(t,u,e,r,o,i,!1,a)}function Io(t,n,e,r,o,i,a){void 0===a&&(a="NDHWC");var u,s,c=Do(n),l=c[0],f=c[1],h=c[2];if("NDHWC"===a)s="channelsLast",u=[l,f,h,t[4],t[4]];else{if("NCDHW"!==a)throw new Error("Unknown dataFormat "+a);s="channelsFirst",u=[l,f,h,t[1],t[1]]}return So(t,u,e,r,o,!1,s,i)}function ko(t,n,e,r,o,i,a,u){void 0===a&&(a=!1),void 0===u&&(u="channelsLast");var s=[-1,-1,-1,-1],c=s[0],l=s[1],f=s[2],h=s[3];if("channelsLast"===u)c=t[0],l=t[1],f=t[2],h=t[3];else{if("channelsFirst"!==u)throw new Error("Unknown dataFormat "+u);c=t[0],h=t[1],l=t[2],f=t[3]}var d,p=n[0],v=n[1],m=n[3],g=To(e),y=g[0],x=g[1],b=To(r),w=b[0],C=b[1],E=No(p,w),R=No(v,C),I=function(t,n,e,r,o,i,a,u){var s,c,l;if("number"==typeof t){s={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};var f=function(t,n,e,r,o){null==r&&(r=Ao(t,n,e));var i=t[1],a=_o((t[0]-n+2*r)/e+1,o);A(O(a),(function(){return"The output # of rows ("+a+") must be an integer. Change the stride and/or zero pad parameters"}));var u=_o((i-n+2*r)/e+1,o);return A(O(u),(function(){return"The output # of columns ("+u+") must be an integer. Change the stride and/or zero pad parameters"})),[a,u]}([n,e],i,r,t,u);c=f[0],l=f[1]}else if("same"===t){c=Math.ceil(n/r),l=Math.ceil(e/o);var h=Math.max(0,(c-1)*r+i-n),d=Math.max(0,(l-1)*o+a-e),p=Math.floor(h/2),v=h-p,m=Math.floor(d/2);s={top:p,bottom:v,left:m,right:d-m,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);s={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((n-i+1)/r),l=Math.ceil((e-a+1)/o)}return{padInfo:s,outHeight:c,outWidth:l}}(o,l,f,y,x,E,R,i),k=I.padInfo,S=I.outHeight,T=I.outWidth,D=a?m*h:m;return"channelsFirst"===u?d=[c,D,S,T]:"channelsLast"===u&&(d=[c,S,T,D]),{batchSize:c,dataFormat:u,inHeight:l,inWidth:f,inChannels:h,outHeight:S,outWidth:T,outChannels:D,padInfo:k,strideHeight:y,strideWidth:x,filterHeight:p,filterWidth:v,effectiveFilterHeight:E,effectiveFilterWidth:R,dilationHeight:w,dilationWidth:C,inShape:t,outShape:d,filterShape:n}}function So(t,n,e,r,o,i,a,u){void 0===i&&(i=!1),void 0===a&&(a="channelsLast");var s=[-1,-1,-1,-1,-1],c=s[0],l=s[1],f=s[2],h=s[3],d=s[4];if("channelsLast"===a)c=t[0],l=t[1],f=t[2],h=t[3],d=t[4];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);c=t[0],d=t[1],l=t[2],f=t[3],h=t[4]}var p,v=n[0],m=n[1],g=n[2],y=n[4],x=Do(e),b=x[0],w=x[1],C=x[2],E=Do(r),R=E[0],I=E[1],k=E[2],S=No(v,R),T=No(m,I),D=No(g,k),N=function(t,n,e,r,o,i,a,u,s,c,l){var f,h,d,p;if("number"==typeof t){f={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};var v=function(t,n,e,r,o,i){null==o&&(o=Ao(t,n,r));var a=t[1],u=t[2],s=_o((t[0]-n+2*o)/r+1,i);A(O(s),(function(){return"The output # of depths ("+s+") must be an integer. Change the stride and/or zero pad parameters"}));var c=_o((a-n+2*o)/r+1,i);A(O(c),(function(){return"The output # of rows ("+c+") must be an integer. Change the stride and/or zero pad parameters"}));var l=_o((u-n+2*o)/r+1,i);return A(O(l),(function(){return"The output # of columns ("+l+") must be an integer. Change the stride and/or zero pad parameters"})),[s,c,l,1]}([n,e,r,1],u,0,o,t,l);h=v[0],d=v[1],p=v[2]}else if("same"===t){var m=((h=Math.ceil(n/o))-1)*o+u-n,g=((d=Math.ceil(e/i))-1)*i+s-e,y=((p=Math.ceil(r/a))-1)*a+c-r,x=Math.floor(m/2),b=m-x,w=Math.floor(g/2),C=g-w,E=Math.floor(y/2);f={top:w,bottom:C,left:E,right:y-E,front:x,back:b,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);f={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((n-u+1)/o),d=Math.ceil((e-s+1)/i),p=Math.ceil((r-c+1)/a)}return{padInfo:f,outDepth:h,outHeight:d,outWidth:p}}(o,l,f,h,b,w,C,S,T,D,u),_=N.padInfo,F=N.outDepth,M=N.outHeight,B=N.outWidth,P=i?y*d:y;return"channelsFirst"===a?p=[c,P,F,M,B]:"channelsLast"===a&&(p=[c,F,M,B,P]),{batchSize:c,dataFormat:a,inDepth:l,inHeight:f,inWidth:h,inChannels:d,outDepth:F,outHeight:M,outWidth:B,outChannels:P,padInfo:_,strideDepth:b,strideHeight:w,strideWidth:C,filterDepth:v,filterHeight:m,filterWidth:g,effectiveFilterDepth:S,effectiveFilterHeight:T,effectiveFilterWidth:D,dilationDepth:R,dilationHeight:I,dilationWidth:k,inShape:t,outShape:p,filterShape:n}}function Ao(t,n,e,r){void 0===r&&(r=1);var o=No(n,r);return Math.floor((t[0]*(e-1)-e+o)/2)}function To(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Do(t){return"number"==typeof t?[t,t,t]:t}function No(t,n){return n<=1?t:t+(t-1)*(n-1)}function _o(t,n){if(!n)return t;switch(n){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+n)}}function Fo(t){var n=To(t),e=n[0],r=n[1],o=n[2];return 1===e&&1===r&&1===o}function Oo(t,n){return Fo(t)||Fo(n)}function Mo(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}function Bo(t,n,e){if("complex64"===n){if("complex64"===t.dtype)return t.clone();var r=Ge(t.shape),o=t.toFloat(),i=e.complex(o,r);return r.dispose(),o.dispose(),i}if(!K(t.dtype,n))return Ut.makeTensorFromDataId(t.dataId,t.shape,n);if("complex64"===t.dtype){var a=e.real(t);return i=a.cast(n),a.dispose(),i}if("int32"===n)return e.int(t);if("bool"===n){var u=Oe(0,t.dtype);return i=e.notEqual(t,u),u.dispose(),i}throw new Error("Error in Cast: failed to cast "+t.dtype+" to "+n)}function Po(t,n){return Ut.makeTensorFromDataId(t.dataId,n,t.dtype)}function Lo(t,n,e){var r=(n-t)/(e-1),o=at(e,"float32");o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+r;return Me(o,"float32")}var Wo=Object.freeze({castTensor:Bo,reshapeTensor:Po,linspaceImpl:Lo,upcastType:Nt,axesAreInnerMostDims:ye,combineLocations:xe,computeOutAndReduceShapes:be,expandShapeToKeepDim:we,assertAxesAreInnerMostDims:Ce,getAxesPermutation:Ee,getUndoAxesPermutation:Re,getInnerMostAxes:Ie,getBroadcastDims:wo,getReductionAxes:Co,assertAndGetBroadcastShape:Eo,assertParamsConsistent:ke,computeOutShape:Se,computePool2DInfo:Ro,computePool3DInfo:Io,computeConv2DInfo:ko,computeConv3DInfo:So,computeDefaultPad:Ao,tupleValuesAreOne:Fo,eitherStridesOrDilationsAreOne:Oo,convertConv2DDataFormat:Mo,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:Yr});function Uo(t,n){if(t.length!==n.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+t.length+", imag: "+n.length+".");for(var e=new Float32Array(2*t.length),r=0;r<e.length;r+=2)e[r]=t[r/2],e[r+1]=n[r/2];return e}function zo(t,n){return{real:t[2*n],imag:t[2*n+1]}}function Vo(t,n,e,r){t[2*r]=n,t[2*r+1]=e}function Go(t,n,e){var r=(e?2:-2)*Math.PI*(t/n);return{real:Math.cos(r),imag:Math.sin(r)}}function Ho(t,n,e){var r=function(t,n,e){return function(t,n,e){for(var r=0,o=t.length,i=0,a=!1;r<o;){var u=e(n,t[i=r+(o-r>>>1)]);u>0?r=i+1:(o=i,a=!u)}return a?r:-r-1}(t,n,e||qo)}(t,n,e),o=r<0?-(r+1):r;t.splice(o,0,n)}function qo(t,n){return t>n?1:t<n?-1:0}function Ko(t,n,e,r,o){return Xo(t,n,e,r,o,0).selectedIndices}function jo(t,n,e,r,o,i){var a=Xo(t,n,e,r,o,i,!0);return a.numValidOutputs.dispose(),{selectedIndices:a.selectedIndices,selectedScores:a.selectedScores}}function Xo(t,n,e,r,o,i,a,u){void 0===a&&(a=!1),void 0===u&&(u=!1);for(var s=Array.from(n).map((function(t,n){return{score:t,boxIndex:n,suppressBeginIndex:0}})).filter((function(t){return t.score>o})).sort(Qo),c=i>0?-.5/i:0,l=[],f=[];l.length<e&&s.length>0;){var h=s.pop(),d=h.score,p=h.boxIndex,v=h.suppressBeginIndex;if(d<o)break;for(var m=!1,g=l.length-1;g>=v;--g){var y=Yo(t,p,l[g]);if(y>=r){m=!0;break}if(h.score=h.score*$o(r,c,y),h.score<=o)break}h.suppressBeginIndex=l.length,m||(h.score===d?(l.push(p),f.push(h.score)):h.score>o&&Ho(s,h,Qo))}var x=l.length;return u&&(l.fill(0,x),f.fill(0,x)),{selectedIndices:Me(l,"int32"),selectedScores:Me(f,"float32"),numValidOutputs:Oe(x,"int32")}}function Yo(t,n,e){var r=t.subarray(4*n,4*n+4),o=t.subarray(4*e,4*e+4),i=Math.min(r[0],r[2]),a=Math.min(r[1],r[3]),u=Math.max(r[0],r[2]),s=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),f=Math.max(o[0],o[2]),h=Math.max(o[1],o[3]),d=(u-i)*(s-a),p=(f-c)*(h-l);if(d<=0||p<=0)return 0;var v=Math.max(i,c),m=Math.max(a,l),g=Math.min(u,f),y=Math.min(s,h),x=Math.max(g-v,0)*Math.max(y-m,0);return x/(d+p-x)}function $o(t,n,e){var r=Math.exp(n*e*e);return e<=t?r:0}function Qo(t,n){return t.score-n.score||t.score===n.score&&n.boxIndex-t.boxIndex}function Jo(t,n,e){var r=new Array(t.rank).fill(0),o=t.shape.slice();return n.map((function(n){o[e]=n;var i=t.slice(r,o);return r[e]+=n,i}))}function Zo(t,n){for(var e=new Array(t.rank),r=0;r<e.length;r++)e[r]=t.shape[r]*n[r];var o=dr(e,t.dtype);for(r=0;r<o.values.length;++r){for(var i=o.indexToLoc(r),a=new Array(t.rank),u=0;u<a.length;u++)a[u]=i[u]%t.shape[u];var s=t.locToIndex(a);o.values[r]=t.values[s]}return o.toTensor()}function ti(t,n,e,r,o){for(var i=n[n.length-1],a=[t.length/i,i],u=a[0],s=a[1],c=V(e,u*r),l=V("int32",u*r),f=0;f<u;f++){for(var h=f*s,d=t.subarray(h,h+s),p=[],v=0;v<d.length;v++)p.push({value:d[v],index:v});p.sort((function(t,n){return n.value-t.value}));var m=f*r,g=c.subarray(m,m+r),y=l.subarray(m,m+r);for(v=0;v<r;v++)g[v]=p[v].value,y[v]=p[v].index}var x=n.slice();return x[x.length-1]=r,[_e(c,x,e),_e(l,x,"int32")]}function ni(t,n){for(var e=[],r=0;r<n.length;r++)n[r]&&e.push(r);var o=dr(t,"int32"),i=dr([e.length,t.length],"int32");for(r=0;r<e.length;r++){var a=o.indexToLoc(e[r]),u=r*t.length;i.values.set(a,u)}return i.toTensor()}var ei=function(t,n){this.outputShape=[],this.outputShape=t,this.variableNames=n.map((function(t,n){return"T"+n}));var e=[];this.variableNames.forEach((function(t){e.push("float v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+e.join("\n        ")+"\n\n        float result = "+r+";\n        setOutput(result);\n      }\n    "},ri=function(t,n){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=n.map((function(t,n){return"T"+n}));var e=[];this.variableNames.forEach((function(t){e.push("vec4 v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+e.join("\n        ")+"\n\n        vec4 result = "+r+";\n        setOutput(result);\n      }\n    "},oi=function(t,n,e){this.variableNames=["A"];var r=t.windowSize,o=t.batchSize,i=t.inSize,a=Math.ceil(i/r);e||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a];var u="max"===n?">":"<",s=e?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+s+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+u+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    "};function ii(t,n){return["x","y","z","w","u","v"].slice(0,n).map((function(n){return t+"."+n}))}function ai(t,n){return 1===n?[t]:ii(t,n)}function ui(){var t,n,e,r,o,i,a,u,s,c;return 2===h().getNumber("WEBGL_VERSION")?(t="#version 300 es",n="in",e="out",r="in",o="texture",i="outputColor",a="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",s="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",n="attribute",e="varying",r="varying",o="texture2D",i="gl_FragColor",a="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",s="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:n,varyingVs:e,varyingFs:r,texture2D:o,output:i,defineOutput:a,defineSpecialNaN:u,defineSpecialInf:s,defineRound:c}}function si(t,n,e){void 0===e&&(e="index");var r=et(n);return r.map((function(n,o){return"int "+t[o]+" = "+e+" / "+n+"; "+(o===r.length-1?"int "+t[o+1]+" = "+e+" - "+t[o]+" * "+n:"index -= "+t[o]+" * "+n)+";"})).join("")}function ci(t){var n=et(t).map((function(t){return t.toString()}));return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * "+n[0]+" + coords.y * "+n[1]+" + coords.z;\n  }\n"}var li="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function fi(t,n,e,r){var o=[];t.forEach((function(t){var n=_(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push("uniform float "+t.name+(n>1?"["+n+"]":"")+";"):(o.push("uniform sampler2D "+t.name+";"),o.push("uniform int offset"+t.name+";"))}));var i,a,u=o.join("\n"),s=t.map((function(t){return function(t,n,e){void 0===e&&(e=!1);var r="";r+=e?function t(n){var e,r,o;switch(n.shapeInfo.logicalShape.length){case 0:return e=n.name,r="get"+e.charAt(0).toUpperCase()+e.slice(1),o=ui(),"\n    vec4 "+r+"() {\n      return "+o.texture2D+"("+e+", halfCR);\n    }\n  ";case 1:return function(t){var n=t.name,e="get"+n.charAt(0).toUpperCase()+n.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],i=ui();return"\n    vec4 "+e+"(int index) {\n      vec2 uv = packedUVfrom1D(\n        "+o[0]+", "+o[1]+", index);\n      return "+i.texture2D+"("+n+", uv);\n    }\n  "}(n);case 2:return function(t){var n=t.shapeInfo.logicalShape,e=t.name,r="get"+e.charAt(0).toUpperCase()+e.slice(1),o=t.shapeInfo.texShape,i=o[0],a=o[1],u=ui();if(null!=o&&F(n,o))return"\n      vec4 "+r+"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2("+a+".0, "+i+".0);\n\n        return "+u.texture2D+"("+e+", uv);\n      }\n    ";var s=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return"\n    vec4 "+r+"(int row, int col) {\n      vec2 uv = packedUVfrom2D("+Math.ceil(n[1]/2)+", "+s[0]+", "+s[1]+", row, col);\n      return "+u.texture2D+"("+e+", uv);\n    }\n  "}(n);case 3:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===e[0]){var u=xi(n,e.slice(1));return"\n        "+t(u)+"\n        vec4 "+o+"(int b, int row, int col) {\n          return "+o+"("+bi(["b","row","col"],[1,2])+");\n        }\n      "}var s=a[0],c=a[1],l=Math.ceil(e[2]/2);return"\n    vec4 "+o+"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        "+s+", "+c+", "+l*Math.ceil(e[1]/2)+", "+l+", b, row, col);\n      return "+ui().texture2D+"("+r+", uv);\n    }\n  "}(n);default:return function(t){for(var n=t.shapeInfo.logicalShape,e=n.length,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],u=a[0],s=a[1],c=Math.ceil(n[e-1]/2),l=c*Math.ceil(n[e-2]/2),f="int b, int row, int col",h="b * "+l+" + (row / 2) * "+c+" + (col / 2)",d=2;d<e-1;d++)f="int b"+d+", "+f,h="b"+d+" * "+(l*=n[e-d-1])+" + "+h;return"\n    vec4 "+o+"("+f+") {\n      int index = "+h+";\n      int texR = index / "+s+";\n      int texC = index - texR * "+s+";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+s+", "+u+");\n      return "+ui().texture2D+"("+r+", uv);\n    }\n  "}(n)}}(t):function t(n){var e=n.shapeInfo.logicalShape;switch(e.length){case 0:return function(t){var n=t.name,e="get"+n.charAt(0).toUpperCase()+n.slice(1);if(t.shapeInfo.isUniform)return"float "+e+"() {return "+n+";}";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===o&&1===i)return"\n      float "+e+"() {\n        return sampleTexture("+n+", halfCR);\n      }\n    ";var a=t.shapeInfo.texShape;return"\n    float "+e+"() {\n      vec2 uv = uvFromFlat("+a[0]+", "+a[1]+", "+mi(n)+");\n      return sampleTexture("+n+", uv);\n    }\n  "}(n);case 1:return function(t){var n=t.name,e="get"+n.charAt(0).toUpperCase()+n.slice(1);if(t.shapeInfo.isUniform)return"\n      float "+e+"(int index) {\n        "+gi(t)+"\n      }\n    ";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===i&&1===o)return"\n      float "+e+"(int index) {\n        return sampleTexture("+n+", halfCR);\n      }\n    ";var a=mi(n);return 1===i?"\n      float "+e+"(int index) {\n        vec2 uv = vec2(0.5, (float(index + "+a+") + 0.5) / "+o+".0);\n        return sampleTexture("+n+", uv);\n      }\n    ":1===o?"\n      float "+e+"(int index) {\n        vec2 uv = vec2((float(index + "+a+") + 0.5) / "+i+".0, 0.5);\n        return sampleTexture("+n+", uv);\n      }\n    ":"\n    float "+e+"(int index) {\n      vec2 uv = uvFromFlat("+o+", "+i+", index + "+a+");\n      return sampleTexture("+n+", uv);\n    }\n  "}(n);case 2:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n.shapeInfo.texShape;if(null!=i&&F(e,i)){var a=i[0];return"\n    float "+o+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+i[1]+".0, "+a+".0);\n      return sampleTexture("+r+", uv);\n    }\n  "}var u=z(e),s=u.newShape,c=u.keptDims,l=s;if(l.length<e.length){var f=xi(n,l);return"\n      "+t(f)+"\n      float "+o+"(int row, int col) {\n        return "+o+"("+bi(["row","col"],c)+");\n      }\n    "}if(n.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2("+e[1]+", 1)));\n        "+gi(n)+"\n      }\n    ";var h=i[0],d=i[1],p=mi(r);return 1===d?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+p+"), vec3("+e[1]+", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / "+h+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":1===h?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+p+"), vec3("+e[1]+", 1, 1));\n      vec2 uv = vec2((index + 0.5) / "+d+".0, 0.5);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n  float "+o+"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * "+e[1]+" + col + "+p+";\n    vec2 uv = uvFromFlat("+h+", "+d+", index);\n    return sampleTexture("+r+", uv);\n  }\n"}(n);case 3:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e[1]*e[2],a=e[2],u=z(e),s=u.newShape,c=u.keptDims,l=s;if(l.length<e.length){var f=xi(n,l);return"\n        "+t(f)+"\n        float "+o+"(int row, int col, int depth) {\n          return "+o+"("+bi(["row","col","depth"],c)+");\n        }\n      "}if(n.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3("+i+", "+a+", 1)));\n        "+gi(n)+"\n      }\n    ";var h=n.shapeInfo.texShape,d=h[0],p=h[1],v=n.shapeInfo.flatOffset;return p===i&&null==v?"\n        float "+o+"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2("+a+", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+p+".0, "+d+".0);\n          return sampleTexture("+r+", uv);\n        }\n      ":p===a&&null==v?"\n    float "+o+"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2("+e[1]+", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+p+".0, "+d+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n      float "+o+"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * "+i+" + col * "+a+" + depth + "+mi(r)+";\n        vec2 uv = uvFromFlat("+d+", "+p+", index);\n        return sampleTexture("+r+", uv);\n      }\n  "}(n);case 4:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e[3],a=e[2]*i,u=e[1]*a,s=z(e),c=s.newShape,l=s.keptDims;if(c.length<e.length){var f=xi(n,c);return"\n      "+t(f)+"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        return "+o+"("+bi(["row","col","depth","depth2"],l)+");\n      }\n    "}if(n.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4("+u+", "+a+", "+i+", 1)));\n        "+gi(n)+"\n      }\n    ";var h=n.shapeInfo.flatOffset,d=n.shapeInfo.texShape,p=d[0],v=d[1];return v===u&&null==h?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3("+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+v+".0, "+p+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":v===i&&null==h?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3("+e[1]*e[2]+", "+e[2]+", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+v+".0, "+p+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+u+" + col * "+a+" +\n          depth * "+i+" + depth2;\n      vec2 uv = uvFromFlat("+p+", "+v+", index + "+mi(r)+");\n      return sampleTexture("+r+", uv);\n    }\n  "}(n);case 5:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e[4],a=e[3]*i,u=e[2]*a,s=e[1]*u,c=z(e),l=c.newShape,f=c.keptDims;if(l.length<e.length){var h=xi(n,l);return"\n      "+t(h)+"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        return "+o+"("+bi(["row","col","depth","depth2","depth3"],f)+");\n      }\n    "}if(n.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+s+", "+u+", "+a+", "+i+")) +\n          depth3;\n        "+gi(n)+"\n      }\n    ";var d=n.shapeInfo.flatOffset,p=n.shapeInfo.texShape,v=p[0],m=p[1];return m===s&&null==d?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4("+u+", "+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+m+".0, "+v+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":m===i&&null==d?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+e[1]*e[2]*e[3]+",\n               "+e[2]*e[3]+", "+e[3]+", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+m+".0, "+v+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+s+" + col * "+u+" + depth * "+a+" +\n          depth2 * "+i+" + depth3 + "+mi(r)+";\n      vec2 uv = uvFromFlat("+v+", "+m+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(n);case 6:return function(n){var e=n.shapeInfo.logicalShape,r=n.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=z(e),a=i.newShape,u=i.keptDims;if(a.length<e.length){var s=xi(n,a);return"\n      "+t(s)+"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return "+o+"("+bi(["row","col","depth","depth2","depth3","depth4"],u)+");\n      }\n    "}var c=e[5],l=e[4]*c,f=e[3]*l,h=e[2]*f,d=e[1]*h;if(n.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4("+d+", "+h+", "+f+", "+l+")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2("+c+", 1)));\n        "+gi(n)+"\n      }\n    ";var p=n.shapeInfo.flatOffset,v=n.shapeInfo.texShape,m=v[0],g=v[1];return g===d&&null==p?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4("+h+", "+f+", "+l+", "+c+")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":g===c&&null==p?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4("+e[1]*e[2]*e[3]*e[4]+",\n               "+e[2]*e[3]*e[4]+",\n               "+e[3]*e[4]+",\n               "+e[4]+")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+d+" + col * "+h+" + depth * "+f+" +\n          depth2 * "+l+" + depth3 * "+c+" + depth4 + "+mi(r)+";\n      vec2 uv = uvFromFlat("+m+", "+g+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(n);default:throw new Error(e.length+"-D input sampling is not yet supported")}}(t);var o=t.shapeInfo.logicalShape,i=n.logicalShape;return o.length<=i.length&&(r+=e?function(t,n){var e,r=t.name,o=r.charAt(0).toUpperCase()+r.slice(1),i="get"+o+"AtOutCoords",a=t.shapeInfo.logicalShape.length,u=n.logicalShape.length,s=wo(t.shapeInfo.logicalShape,n.logicalShape),c=yi(u),l=u-a,f=["x","y","z","w","u","v"];e=0===a?"":u<2&&s.length>=1?"coords = 0;":s.map((function(t){return"coords."+f[t+l]+" = 0;"})).join("\n");var h;h=u<2&&a>0?"coords":t.shapeInfo.logicalShape.map((function(t,n){return"coords."+f[n+l]})).join(", ");var d="return outputValue;",p=1===_(t.shapeInfo.logicalShape),v=1===_(n.logicalShape);if(1!==a||p||v){if(p&&!v)d=1===u?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(s.length){var m=a-2,g=a-1;s.indexOf(m)>-1&&s.indexOf(g)>-1?d="return vec4(outputValue.x);":s.indexOf(m)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":s.indexOf(g)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 "+i+"() {\n      "+c+" coords = getOutputCoords();\n      "+e+"\n      vec4 outputValue = get"+o+"("+h+");\n      "+d+"\n    }\n  "}(t,n):function(t,n){var e=t.name,r=e.charAt(0).toUpperCase()+e.slice(1),o="get"+r+"AtOutCoords",i=n.texShape,a=t.shapeInfo.texShape,u=t.shapeInfo.logicalShape.length,s=n.logicalShape.length;if(!t.shapeInfo.isUniform&&u===s&&null==t.shapeInfo.flatOffset&&F(a,i))return"\n      float "+o+"() {\n        return sampleTexture("+e+", resultUV);\n      }\n    ";var c=yi(s),l=wo(t.shapeInfo.logicalShape,n.logicalShape),f=s-u,h=["x","y","z","w","u","v"];return"\n    float "+o+"() {\n      "+c+" coords = getOutputCoords();\n      "+(0===u?"":s<2&&l.length>=1?"coords = 0;":l.map((function(t){return"coords."+h[t+f]+" = 0;"})).join("\n"))+"\n      return get"+r+"("+(s<2&&u>0?"coords":t.shapeInfo.logicalShape.map((function(t,n){return"coords."+h[n+f]})).join(", "))+");\n    }\n  "}(t,n)),r}(t,n,r)})).join("\n"),c=n.texShape,l=ui(),f=function(t){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return "+t.texture2D+"(textureSampler, uv).r;\n    }\n  "}(l),h=function(t){return t.version+"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    "+t.varyingFs+" vec2 resultUV;\n    "+t.defineOutput+"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    "+t.defineSpecialNaN+"\n    "+t.defineSpecialInf+"\n    "+t.defineRound+"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    "+hi+"\n    "+di+"\n    "+pi+"\n  "}(l);return n.isPacked?(i=function(t,n){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,n){var e=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];return 1===e[0]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * "+e[1]+".0);\n      }\n    ":1===e[1]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * "+e[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      return 2 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n    }\n  "}(0,n);case 2:return function(t,n){var e=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)];if(F(t,n))return"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2("+e[0]+", "+e[1]+"));\n      }\n    ";var r=Math.ceil(t[1]/2);return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec2(r, c);\n    }\n  "}(t,n);case 3:return e=t,r=n,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=(i=Math.ceil(e[2]/2))*Math.ceil(e[1]/2),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+o[0]+", "+o[1]+"));\n      int index = resTexRC.x * "+o[1]+" + resTexRC.y;\n\n      int b = index / "+a+";\n      index -= b * "+a+";\n\n      int r = 2 * (index / "+i+");\n      int c = imod(index, "+i+") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";default:return function(t,n){for(var e=[Math.ceil(n[0]/2),Math.ceil(n[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2),i=o,a="",u="b, r, c",s=2;s<t.length-1;s++)a="\n      int b"+s+" = index / "+(i*=t[t.length-s-1])+";\n      index -= b"+s+" * "+i+";\n    "+a,u="b"+s+", "+u;return"\n    ivec"+t.length+" getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+a+"\n\n      int b = index / "+o+";\n      index -= b * "+o+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec"+t.length+"("+u+");\n    }\n  "}(t,n)}var e,r,o,i,a}(n.logicalShape,c),a=function(t){return"\n    void setOutput(vec4 val) {\n      "+t.output+" = val;\n    }\n  "}(l)):(i=function(t,n){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,n){return 1===n[0]?"\n      int getOutputCoords() {\n        return int(resultUV.x * "+n[1]+".0);\n      }\n    ":1===n[1]?"\n      int getOutputCoords() {\n        return int(resultUV.y * "+n[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      return resTexRC.x * "+n[1]+" + resTexRC.y;\n    }\n  "}(0,n);case 2:return function(t,n){return F(t,n)?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+n[0]+", "+n[1]+"));\n      }\n    ":1===t[1]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+n[0]+", "+n[1]+"));\n        int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":1===t[0]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+n[0]+", "+n[1]+"));\n        int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      int r = index / "+t[1]+";\n      int c = index - r * "+t[1]+";\n      return ivec2(r, c);\n    }\n  "}(t,n);case 3:return e=n,r=si(["r","c","d"],t),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      "+r+"\n      return ivec3(r, c, d);\n    }\n  ";case 4:return function(t,n){var e=si(["r","c","d","d2"],t);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      "+e+"\n      return ivec4(r, c, d, d2);\n    }\n  "}(t,n);case 5:return function(t,n){var e=si(["r","c","d","d2","d3"],t);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2("+n[0]+",\n                             "+n[1]+"));\n\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+e+"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "}(t,n);case 6:return function(t,n){var e=si(["r","c","d","d2","d3","d4"],t);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+e+"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "}(t,n);default:throw new Error(t.length+"-D output sampling is not yet supported")}var e,r}(n.logicalShape,c),a=function(t){return"\n    void setOutput(float val) {\n      "+t.output+" = vec4(val, 0, 0, 0);\n    }\n  "}(l)),r&&(h+=vi),[h,f,a,u,i,s,e].join("\n")}var hi="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",di="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",pi="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",vi="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function mi(t){return"offset"+t}function gi(t){var n=t.name,e=_(t.shapeInfo.logicalShape);return e<2?"return "+n+";":"\n    for (int i = 0; i < "+e+"; i++) {\n      if (i == index) {\n        return "+n+"[i];\n      }\n    }\n  "}function yi(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error("GPU for rank "+t+" is not yet supported")}function xi(t,n){var e=JSON.parse(JSON.stringify(t));return e.shapeInfo.logicalShape=n,e}function bi(t,n){return n.map((function(n){return t[n]})).join(", ")}var wi=function(t,n,e,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,A(t.length>2,(function(){return"Packed arg"+(e.charAt(0).toUpperCase()+e.slice(1))+" supports only inputs with rank above 2."}));var o=t[t.length-1],i=Math.ceil(o/n);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");var a,u,s=this.outputShape,c=s.length,l=yi(c),f=ai("coords",c);if(1===i){var h=yi(u=c+1);a="\n        "+h+" sourceLocR = "+h+"("+f.join()+", 0);\n        ++"+f[c-1]+";\n        "+h+" sourceLocG = "+h+"("+f.join()+", 0);\n        ++"+f[c-2]+";\n        "+h+" sourceLocA = "+h+"("+f.join()+", 0);\n        --"+f[c-1]+";\n        "+h+" sourceLocB = "+h+"("+f.join()+", 0);\n        --"+f[c-2]+";"}else u=c,a="\n        "+l+" sourceLocR = coords;\n        ++"+f[c-1]+";\n        "+l+" sourceLocG = coords;\n        ++"+f[c-2]+";\n        "+l+" sourceLocA = coords;\n        --"+f[c-1]+";\n        "+l+" sourceLocB = coords;\n        --"+f[c-2]+";";var d=["x","y","z","w","u","v"].slice(0,u),p="."+d[u-1],v=d.map((function(t){return"int "+t})),m=ai("sourceLocR",u-1).concat("inIdx.r"),g=ai("sourceLocG",u-1).concat("inIdx.g"),y=ai("sourceLocB",u-1).concat("inIdx.b"),x=ai("sourceLocA",u-1).concat("inIdx.a"),b="max"===e?"greaterThan":"lessThan",w=r?"":"\n          inIdx = round(vec4(getBestIndicesAChannel("+m.join()+"),\n                             getBestIndicesAChannel("+g.join()+"),\n                             getBestIndicesAChannel("+y.join()+"),\n                             getBestIndicesAChannel("+x.join()+")));",C="vec4(\n            getAChannel("+m.join()+"),\n            hasNextCol ? getAChannel("+g.join()+") : 0.,\n            hasNextRow ? getAChannel("+y.join()+") : 0.,\n            hasNextRow && hasNextCol ? getAChannel("+x.join()+") : 0.)",E=r?"":"\n      float getBestIndicesAChannel("+v.join()+") {\n        return getChannel(getBestIndicesA("+d.join()+"),\n                                          vec2("+d.slice(-2).join()+"));\n      }";this.userCode="\n      float getAChannel("+v.join()+") {\n        return getChannel(getA("+d.join()+"),\n                               vec2("+d.slice(-2).join()+"));\n      }\n      "+E+"\n      void main() {\n        "+l+" coords = getOutputCoords();\n        bool hasNextCol = "+f[c-1]+" < "+(s[c-1]-1)+";\n        bool hasNextRow = "+f[c-2]+" < "+(s[c-2]-1)+";\n        "+a+"\n        ivec4 srcIdx = ivec4(sourceLocR"+p+", sourceLocG"+p+",\n          sourceLocB"+p+", sourceLocA"+p+") * "+n+";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = "+C+";\n\n        for (int i = 0; i < "+n+"; i++) {\n          inIdx = srcIdx;\n          "+w+"\n          vec4 candidate = "+C+";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4("+b+"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    "},Ci=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var n=t.filterHeight,e=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,u=t.effectiveFilterHeight,s=t.effectiveFilterWidth,c=u-1-t.padInfo.top,l=s-1-t.padInfo.left,f=1/(n*e);this.userCode="\n      const ivec2 pads = ivec2("+c+", "+l+");\n      const float avgMultiplier = float("+f+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+u+";\n            wR += "+i+") {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+s+";\n            wC+= "+a+") {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ei=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var n=t.filterDepth,e=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,u=t.dilationDepth,s=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,f=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=l-1-t.padInfo.front,p=f-1-t.padInfo.top,v=h-1-t.padInfo.left,m=1/(n*e*r);this.userCode="\n      const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n      const float avgMultiplier = float("+m+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+u+") {\n          float dyD = float(dyDCorner + wD) / "+o+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+f+";\n              wR += "+s+") {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+h+";\n                wC += "+c+") {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ri=function(t,n,e,r,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],Eo(t,n),Eo(t,e);var a="0.0";null!=r&&(Eo(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var u="1.0";null!=o&&(Eo(t,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+a+";\n        float scale = "+u+";\n        float inv = scale * inversesqrt(variance + float("+i+"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    "},Ii=function(t,n,e,r,o,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],Eo(t,n),Eo(t,e);var a="vec4(0.0)";null!=r&&(Eo(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var u="vec4(1.0)";null!=o&&(Eo(t,o),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = "+a+";\n        vec4 scale = "+u+";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4("+i+"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    "},ki=function(t,n,e){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=Eo(n,e),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        "+t+"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    "},Si="return a + b;",Ai="return a - b;",Ti="return a * b;",Di="return (a < 0.) ? b * a : a;",Ni=function(t,n,e){this.variableNames=["A","B"],this.outputShape=Eo(n,e),this.userCode="\n      float binaryOperation(float a, float b) {\n        "+t+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "},_i="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Fi=function(t,n,e,r){void 0===r&&(r=!1),this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=Eo(n,e);var o=this.outputShape.length,i="";if(r)if(0===o||1===_(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i="\n          "+yi(o)+" coords = getOutputCoords();\n        ",1===o)i+="\n            result.y = (coords + 1) >= "+this.outputShape[0]+" ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";else{var a=ai("coords",o);i+="\n            bool nextRowOutOfBounds =\n              ("+a[o-2]+" + 1) >= "+this.outputShape[o-2]+";\n            bool nextColOutOfBounds =\n              ("+a[o-1]+" + 1) >= "+this.outputShape[o-1]+";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          "}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        "+t+"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        "+i+"\n\n        setOutput(result);\n      }\n    "},Oi=function(){function t(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,n){var e=this;return function(r,o){null==e.minLoc&&(e.minLoc=r.getUniformLocationNoThrow(o,"minVal"),e.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(e.minLoc,t),r.gl.uniform1f(e.maxLoc,n)}},t}(),Mi=function(){function t(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,n){var e=this;return function(r,o){null==e.minLoc&&(e.minLoc=r.getUniformLocationNoThrow(o,"minVal"),e.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(e.minLoc,t),r.gl.uniform1f(e.maxLoc,n)}},t}(),Bi=function(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "},Pi=function(t){this.outputShape=[],this.outputShape=Se(t,1),this.variableNames=t.map((function(t,n){return"T"+n}));var n=new Array(t.length-1);n[0]=t[0][1];for(var e=1;e<n.length;e++)n[e]=n[e-1]+t[e][1];var r=["if (yC < "+n[0]+") setOutput(getT0(yR, yC));"];for(e=1;e<n.length;e++){var o=n[e-1];r.push("else if (yC < "+n[e]+") setOutput(getT"+e+"(yR, yC-"+o+"));")}var i=n.length,a=n[n.length-1];r.push("else setOutput(getT"+i+"(yR, yC-"+a+"));"),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        "+r.join("\n        ")+"\n      }\n    "},Li=function(t,n){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Se(t,n);var e=this.outputShape,r=e.length,o=yi(r),i=ai("coords",r),a=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((function(t,n){return"T"+n}));var u=new Array(t.length-1);u[0]=t[0][n];for(var s=1;s<u.length;s++)u[s]=u[s-1]+t[s][n];var c=a[n],l=a.slice(-2),f=a.join(),h="if ("+c+" < "+u[0]+") {\n        return getChannel(\n            getT0("+f+"), vec2("+l.join()+"));\n        }";for(s=1;s<u.length;s++){var d=u[s-1];h+="\n        if ("+c+" < "+u[s]+"  && "+c+" >= "+u[s-1]+") {\n          return getChannel(\n            getT"+s+"("+Wi(a,c,d)+"),\n            vec2("+Wi(l,c,d)+"));\n        }"}var p=u.length,v=u[u.length-1];h+="\n        return getChannel(\n          getT"+p+"("+Wi(a,c,v)+"),\n          vec2("+Wi(l,c,v)+"));",this.userCode="\n      float getValue("+a.map((function(t){return"int "+t}))+") {\n        "+h+"\n      }\n\n      void main() {\n        "+o+" coords = getOutputCoords();\n        vec4 result = vec4(getValue("+i+"), 0., 0., 0.);\n\n        "+i[r-1]+" = "+i[r-1]+" + 1;\n        if ("+i[r-1]+" < "+e[r-1]+") {\n          result.g = getValue("+i+");\n        }\n\n        "+i[r-2]+" = "+i[r-2]+" + 1;\n        if ("+i[r-2]+" < "+e[r-2]+") {\n          result.a = getValue("+i+");\n        }\n\n        "+i[r-1]+" = "+i[r-1]+" - 1;\n        if ("+i[r-2]+" < "+e[r-2]+" &&\n            "+i[r-1]+" < "+e[r-1]+") {\n          result.b = getValue("+i+");\n        }\n        setOutput(result);\n      }\n    "};function Wi(t,n,e){var r=t.indexOf(n);return t.map((function(t,n){return n===r?t+" - "+e:t})).join()}var Ui=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var n=t.strideHeight,e=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i="channelsLast"===t.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+n+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+e+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              if ("+i+") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},zi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var n=t.filterHeight,e=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i="channelsLast"===t.dataFormat,a=n-1-t.padInfo.top,u=e-1-t.padInfo.left,s=i?1:2,c=i?2:3,l=i?3:1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+u+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords["+l+"];\n\n        ivec2 dyCorner = ivec2(coords["+s+"], coords["+c+"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+n+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+n+" - 1 - wR;\n\n          for (int wC = 0; wC < "+e+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+e+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n\n              if ("+i+") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Vi=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var n=t.strideDepth,e=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yF = 0; yF < "+t.outDepth+"; yF++) {\n            int xF = wF + yF * "+n+" - "+o+";\n\n            if (xF < 0 || xF >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n              int xR = wR + yR * "+e+" - "+i+";\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n                int xC = wC + yC * "+r+" - "+a+";\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Gi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var n=t.filterDepth,e=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,u=n-1-t.padInfo.front,s=e-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3("+u+", "+s+", "+c+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+n+"; wF++) {\n          float dyF = float(dyFCorner + wF) / "+o+".0;\n\n          if (dyF < 0.0 || dyF >= "+t.outDepth+".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = "+n+" - 1 - wF;\n\n          for (int wR = 0; wR < "+e+"; wR++) {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = "+e+" - 1 - wR;\n\n            for (int wC = 0; wC < "+r+"; wC++) {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = "+r+" - 1 - wC;\n\n              for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Hi=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var n=t.strideHeight,e=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * "+i+" + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+n+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+e+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},qi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var n=t.filterHeight,e=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=n-1-t.padInfo.top,a=e-1-t.padInfo.left,u=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < "+n+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+n+" - 1 - wR;\n\n          for (int wC = 0; wC < "+e+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+e+" - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < "+u+"; dm++) {\n              int d2 = d1 * "+u+" + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ki=function(t,n,e,r){void 0===n&&(n=!1),void 0===e&&(e=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.padInfo.top,i=t.padInfo.left,a=t.strideHeight,u=t.strideWidth,s=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,f=t.filterWidth,h=4*Math.floor(t.inChannels/4),d=t.inChannels%4,p="channelsLast"===t.dataFormat,v=p?1:2,m=p?2:3,g=p?3:1,y="",x="";e&&(y=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+e+"\n        }":"\n          float activation(float x) {\n            "+e+"\n          }\n        ",x="result = activation(result);");var b=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+y+"\n\n      const ivec2 strides = ivec2("+a+", "+u+");\n      const ivec2 pads = ivec2("+o+", "+i+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords["+g+"];\n\n        ivec2 xRCCorner =\n            ivec2(coords["+v+"], coords["+m+"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+l+"; wR++) {\n          int xR = xRCorner + wR * "+s+";\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+f+"; wC++) {\n            int xC = xCCorner + wC * "+c+";\n\n            if (xC < 0 || xC >= "+t.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+h+"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if ("+p+") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if ("+(1===d)+") {\n\n              if ("+p+") {\n                dotProd +=\n                    getX(batch, xR, xC, "+h+") *\n                    getW(wR, wC, "+h+", d2);\n              } else {\n                dotProd +=\n                    getX(batch, "+h+", xR, xC) *\n                    getW(wR, wC, "+h+", d2);\n              }\n\n            } else if ("+(2===d)+") {\n              vec2 wValues = vec2(\n                getW(wR, wC, "+h+", d2),\n                getW(wR, wC, "+h+" + 1, d2)\n              );\n\n              if ("+p+") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, "+h+"),\n                  getX(batch, xR, xC, "+h+" + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, "+h+", xR, xC),\n                  getX(batch, "+h+" + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if ("+(3===d)+") {\n              vec3 wValues = vec3(\n                getW(wR, wC, "+h+", d2),\n                getW(wR, wC, "+h+" + 1, d2),\n                getW(wR, wC, "+h+" + 2, d2)\n              );\n\n              if ("+p+") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, "+h+"),\n                  getX(batch, xR, xC, "+h+" + 1),\n                  getX(batch, xR, xC, "+h+" + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, "+h+", xR, xC),\n                  getX(batch, "+h+" + 1, xR, xC),\n                  getX(batch, "+h+" + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        "+b+"\n        "+x+"\n        setOutput(result);\n      }\n    "},ji=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var n=t.padInfo.front,e=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,u=t.dilationDepth,s=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,f=t.filterHeight,h=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+n+", "+e+", "+r+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+l+"; wF++) {\n          int xF = xFCorner + wF * "+u+";\n\n          if (xF < 0 || xF >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+f+"; wR++) {\n            int xR = xRCorner + wR * "+s+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+h+"; wC++) {\n              int xC = xCCorner + wC * "+c+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < "+d+"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if ("+(1===p)+") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, "+d+") *\n                  getW(wF, wR, wC, "+d+", d2);\n              } else if ("+(2===p)+") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, "+d+"),\n                  getX(batch, xF, xR, xC, "+d+" + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, "+d+", d2),\n                  getW(wF, wR, wC, "+d+" + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if ("+(3===p)+") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, "+d+"),\n                  getX(batch, xF, xR, xC, "+d+" + 1),\n                  getX(batch, xF, xR, xC, "+d+" + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, "+d+", d2),\n                  getW(wF, wR, wC, "+d+" + 1, d2),\n                  getW(wF, wR, wC, "+d+" + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Xi=function(t,n,e,r){void 0===n&&(n=!1),void 0===e&&(e=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.inHeight,i=t.inWidth,a=t.padInfo.top,u=t.padInfo.left,s=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,f=t.dilationWidth,h=t.filterHeight,d=t.filterWidth,p=t.outChannels/t.inChannels,v="",m="";e&&(v=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+e+"\n        }":"\n          float activation(float x) {\n            "+e+"\n          }\n        ",m="result = activation(result);");var g=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+v+"\n\n      const ivec2 strides = ivec2("+s+", "+c+");\n      const ivec2 pads = ivec2("+a+", "+u+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+p+";\n        int q = d2 - d1 * "+p+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+h+"; wR++) {\n          int xR = xRCorner + wR * "+l+";\n\n          if (xR < 0 || xR >= "+o+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+d+"; wC++) {\n            int xC = xCCorner + wC * "+f+";\n\n            if (xC < 0 || xC >= "+i+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        "+g+"\n        "+m+"\n        setOutput(result);\n      }\n    "},Yi=function(t,n,e,r){void 0===n&&(n=!1),void 0===e&&(e=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;for(var o=t.inHeight,i=t.inWidth,a=t.padInfo.top,u=t.padInfo.left,s=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,f=t.dilationWidth,h=t.filterHeight,d=t.filterWidth,p=d,v="int xR; int xC; int xCOffset;",m=0;m<h;m++)for(var g=0;g<d;g++)v+="\n          vec4 xTexelR"+m+"C"+2*g+" = vec4(0.);\n          vec4 wR"+m+"C"+g+" = vec4(0.);\n          vec4 xR"+m+"C"+g+" = vec4(0.);";for(m=0;m<h;m++)for(var y=0;y<p;y++){if(v+="\n          xR = xRCorner + "+m*l+";\n          xC = xCCorner + "+(g=2*y)*f+";\n        ",1===c){if(g<d&&(v+=u%2==1?"\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= "+i+") {\n                    xTexelR"+m+"C"+g+".zw = vec2(0.);\n                  }\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if(xCOffset + 1 >= "+i+") {\n                    previous.zw = vec2(0.);\n                  }\n\n                  xR"+m+"C"+g+" = vec4(previous.zw, xTexelR"+m+"C"+g+".xy);\n                } else {\n                  xR"+m+"C"+g+" = vec4(0, 0, xTexelR"+m+"C"+g+".xy);\n                }\n              ":"\n                if(xR >= 0 && xR < "+o+" && xC >= 0 && xC < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                xR"+m+"C"+g+" = xTexelR"+m+"C"+g+";\n              ",g+1<d)){var x=u%2==0?k(f):f;f%2==0&&u%2==1||f%2!=0&&u%2!=1?(v+="\n                  xCOffset = xC + "+u%2+" + "+x+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n                ",f>1&&(v+="\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < "+o+" &&\n                      xCOffset >= 0 && xCOffset < "+i+") {\n                      xTexelR"+m+"C"+g+" = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR"+m+"C"+g+" = vec4(0.);\n                    }\n                  "),v+="\n                  xR"+m+"C"+(g+1)+" = vec4(\n                    xTexelR"+m+"C"+g+".zw, xTexelR"+m+"C"+(g+2)+".xy);\n                "):v+="\n                  xCOffset = xC + "+x+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR"+m+"C"+(g+1)+" = xTexelR"+m+"C"+(g+2)+";\n                "}}else g<d&&(v+="\n              if(xR >= 0 && xR < "+o+") {\n            ",u%2==1?(v+="\n                xCOffset = xC + 1 - "+c+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < "+i+") {\n                  xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR"+m+"C"+(g+2)+" = vec4(0.);\n                }\n\n                xR"+m+"C"+g+" = vec4(\n                  xTexelR"+m+"C"+g+".zw, xTexelR"+m+"C"+(g+2)+".zw);\n              ",g+1<d&&(v+="\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + "+c+";\n                  if(xCOffset >= 0 && xCOffset < "+i+") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR"+m+"C"+(g+1)+" = vec4(xTexelR"+m+"C"+(g+2)+".xy, final.xy);\n                ")):(v+="\n                if(xC >= 0 && xC < "+i+") {\n                  xTexelR"+m+"C"+g+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+m+"C"+g+" = vec4(0.);\n                }\n\n                xCOffset = xC + "+c+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+(g+2)+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+m+"C"+(g+2)+" = vec4(0.);\n                }\n\n                xR"+m+"C"+g+" = vec4(\n                  xTexelR"+m+"C"+g+".xy, xTexelR"+m+"C"+(g+2)+".xy);\n              ",g+1<d&&(v+="\n                  xR"+m+"C"+(g+1)+" = vec4(\n                    xTexelR"+m+"C"+g+".zw, xTexelR"+m+"C"+(g+2)+".zw);\n                ")),v+="}");g<d&&(v+="\n            vec4 wTexelR"+m+"C"+g+" = getW("+m+", "+g+", d1, q);\n            wR"+m+"C"+g+" = vec4(wTexelR"+m+"C"+g+".xz, wTexelR"+m+"C"+g+".xz);\n          ",g+1<d&&(v+="\n              vec4 wTexelR"+m+"C"+(g+1)+" = getW("+m+", "+(g+1)+", d1, q);\n              wR"+m+"C"+(g+1)+" =\n                vec4(wTexelR"+m+"C"+(g+1)+".xz, wTexelR"+m+"C"+(g+1)+".xz);"))}for(m=0;m<h;m++)for(g=0;g<d;g++)v+="dotProd += xR"+m+"C"+g+" * wR"+m+"C"+g+";";var b="",w="";e&&(b=r?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+e+"\n        }":"vec4 activation(vec4 x) {\n          "+e+"\n        }",w="result = activation(result);");var C=n?"result += getBiasAtOutCoords();":"";n&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+b+"\n\n      const ivec2 strides = ivec2("+s+", "+c+");\n      const ivec2 pads = ivec2("+a+", "+u+");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        "+v+"\n\n        vec4 result = dotProd;\n        "+C+"\n        "+w+"\n        setOutput(result);\n      }\n    "},$i=function(t,n,e,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var i=t[0],a=t[1],u=t[2],s=t[3],c=n[0],l=e[0],f=e[1];this.outputShape=[c,l,f,s];var h="bilinear"===r?1:0,d=[a-1+".0",u-1+".0"],p=d[0],v=d[1],m=l>1?[""+(a-1)/(l-1),"(y2-y1) * height_ratio","y1*"+p+" + float(y)*(height_scale)"]:["0.0","0.0","0.5 * (y1+y2) * "+p],g=m[0],y=m[1],x=m[2],b=f>1?[""+(u-1)/(f-1),"(x2-x1) * width_ratio","x1*"+v+" + float(x)*(width_scale)"]:["0.0","0.0","0.5 * (x1+x2) * "+v],w=b[0],C=b[1],E=b[2];this.userCode="\n      const float height_ratio = float("+g+");\n      const float width_ratio = float("+w+");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= "+i+") {\n          return;\n        }\n\n        float height_scale = "+y+";\n        float width_scale = "+C+";\n\n        float in_y = "+x+";\n        if( in_y < 0.0 || in_y > "+p+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n        float in_x = "+E+";\n        if( in_x < 0.0 || in_x > "+v+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if("+h+" == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    "},Qi=function(t,n,e){this.variableNames=["x"],this.outputShape=t;var r=t.length,o=t[t.length-1],i=e?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+(e?"return "+o+" -i - 1;":"return i;")+"\n      }\n\n      void main() {\n        "+yi(r)+" coords = getOutputCoords();\n        int end = "+Ji(r,"coords")+";\n        float val = 0.0;\n        for (int i = "+o+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+i+" end) {\n            continue;\n          }\n          if (idx == end && "+n+") {\n            continue;\n          }\n          "+Ji(r,"coords")+" = idx;\n          val += getX("+function(t,n){if(1===t)return""+n;if(2===t)return n+".x, "+n+".y";if(3===t)return n+".x, "+n+".y, "+n+".z";if(4===t)return n+".x, "+n+".y, "+n+".z, "+n+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}(r,"coords")+");\n        }\n        setOutput(val);\n      }\n    "};function Ji(t,n){if(1===t)return""+n;if(2===t)return n+".y";if(3===t)return n+".z";if(4===t)return n+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}var Zi=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Gt.DENSE;var n=Qt(t),e=ui();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+si(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+n[0]+", "+n[1]+"));\n        int index = 4 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        "+e.output+" = result;\n      }\n    "},ta=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Gt.DENSE;var n=Qt(t),e=ui();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+si(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+n[0]+", "+n[1]+"));\n        int index = 4 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        "+e.output+" = result;\n      }\n    "},na=function(){function t(t,n,e){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=n,this.dataFormat=e,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = "+this.getHeightCoordString()+";\n      int w = "+this.getWidthCoordString()+";\n      int d = "+this.getDepthCoordString()+";\n\n      int in_h = h / "+n+";\n      int offset_h = imod(h, "+n+");\n      int in_w = w / "+n+";\n      int offset_w = imod(w, "+n+");\n      int offset_d = (offset_h * "+n+" + offset_w) *\n        "+this.getOutputDepthSize()+";\n      int in_d = d + offset_d;\n\n      float result = "+this.getInputSamplingString()+";\n      setOutput(result);\n    }\n  "}return t.prototype.getHeightCoordString=function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"},t.prototype.getWidthCoordString=function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"},t.prototype.getDepthCoordString=function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"},t.prototype.getOutputDepthSize=function(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},t}(),ea=function(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "},ra=function(t){this.variableNames=["A"],this.outTexUsage=Ht.DOWNLOAD;var n=ui();this.outputShape=t,this.userCode="\n      "+li+"\n\n      void main() {\n        float x = getAAtOutCoords();\n        "+n.output+" = encode_float(x);\n      }\n    "},oa=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=Ht.DOWNLOAD;var n=ui();this.outputShape=t,this.userCode="\n      "+li+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        "+n.output+" = encode_float(x);\n      }\n    "},ia=function(t,n,e){void 0===e&&(e=!1),this.variableNames=["A"];var r=ui(),o=n[0],i=n[1];this.outputShape=t;var a="result";e&&(a="floor(result * 255. + 0.5)"),this.userCode="\n      "+ci(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / "+i+";\n        int c = imod(flatIndex, "+i+");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n        vec4 values = "+r.texture2D+"(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        "+r.output+" = vec4("+a+", 0., 0., 0.);\n      }\n    "},aa=function(t,n,e){void 0===e&&(e=!1),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var r=ui(),o=n[0],i=n[1];this.outputShape=t;var a="",u="result";e&&(u="floor(result * 255. + 0.5)");for(var s=0;s<=1;s++)for(var c=0;c<=1;c++){var l=2*s+c;a+="\n          localCoords = coords;\n          if(localCoords[2] + "+c+" < "+t[2]+") {\n            localCoords[2] += "+c+";\n            if(localCoords[1] + "+s+" < "+t[1]+") {\n              localCoords[1] += "+s+";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / "+i+";\n              c = imod(flatIndex, "+i+");\n              uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n              values = "+r.texture2D+"(A, uv);\n\n              if(offset == 0) {\n                result["+l+"] = values[0];\n              } else if(offset == 1) {\n                result["+l+"] = values[1];\n              } else if(offset == 2) {\n                result["+l+"] = values[2];\n              } else {\n                result["+l+"] = values[3];\n              }\n            }\n          }\n        "}this.userCode="\n      "+ci(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        "+a+"\n\n        "+r.output+" = "+u+";\n      }\n    "},ua=function(t,n,e){this.variableNames=["real","imag"];var r=n[1];this.outputShape=n;var o=e?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,i=e?r+".0":"1.0";this.userCode="\n      const float exponentMultiplier = "+o+";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        "+t+"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float("+r+");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < "+r+"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / "+i+";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    "},sa=function(){function t(t,n){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var n=this;return function(e,r){null==n.valueLoc&&(n.valueLoc=e.getUniformLocationNoThrow(r,"value")),e.gl.uniform1f(n.valueLoc,t)}},t}(),ca=function(t,n,e){this.variableNames=["A","indices"];var r=t.slice();r[e]=n,this.outputShape=r,this.rank=r.length;var o=yi(this.rank),i=function(t,n){var e=t.length;if(e>4)throw Error("Gather for rank "+e+" is not yet supported");if(1===e)return"int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],i=0;i<t.length;i++)i===n?o.push("int(getIndices("+r[i]+"))"):o.push(""+r[i]);return o.join()}(t,e);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},la=function(t,n,e){this.sliceDim=t,this.strides=n,this.variableNames=["x","indices"],this.outputShape=e;var r=yi(n.length),o=yi(e.length),i=this.sliceDim>1?"strides[j]":"strides";this.userCode="\n        "+r+" strides = "+r+"("+this.strides+");\n         void main() {\n          "+o+" coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < "+this.sliceDim+"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * "+i+";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      "};function fa(t,n){var e=ui();return on(t,n,e.version+"\n    precision highp float;\n    "+e.attribute+" vec3 clipSpacePos;\n    "+e.attribute+" vec2 uv;\n    "+e.varyingVs+" vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function ha(t,n){return dn(t,n,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function da(t,n){return pn(t,n,new Uint16Array([0,1,2,2,1,3]))}function pa(t,n,e,r,o,i,a){mn(e,r);var u=vn(t,n),s=t.TEXTURE_2D;return tn(t,n,(function(){return t.bindTexture(s,u)})),tn(t,n,(function(){return t.texParameteri(s,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),tn(t,n,(function(){return t.texParameteri(s,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),tn(t,n,(function(){return t.texParameteri(s,t.TEXTURE_MIN_FILTER,t.NEAREST)})),tn(t,n,(function(){return t.texParameteri(s,t.TEXTURE_MAG_FILTER,t.NEAREST)})),tn(t,n,(function(){return t.texImage2D(s,0,o,e,r,0,i,a,null)})),tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),u}function va(t,n,e,r,o){var i=$t(e,r);return pa(t,n,i[0],i[1],o.internalFormatFloat,o.textureFormatFloat,t.FLOAT)}function ma(t,n,e,r,o){var i=$t(e,r);return pa(t,n,i[0],i[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function ga(t,n,e,r,o){var i=$t(e,r);return pa(t,n,i[0],i[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function ya(t,n,e,r,o){var i=Jt(e,r);return pa(t,n,i[0],i[1],o.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function xa(t,n,e,r,o){var i=Jt(e,r);return pa(t,n,i[0],i[1],o.internalFormatPackedHalfFloat,t.RGBA,o.textureTypeHalfFloat)}function ba(t,n,e,r){return tn(t,n,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),yn(t,n,e,"clipSpacePos",r,3,20,0)&&yn(t,n,e,"uv",r,2,20,12)}function wa(t,n,e,r,o,i,a){var u,s,c;tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,e)})),i instanceof Uint8Array?(u=new Uint8Array(r*o*4),s=t.UNSIGNED_BYTE,c=t.RGBA):(u=new Float32Array(r*o*4),s=t.FLOAT,c=a.internalFormatPackedFloat),u.set(i),tn(t,n,(function(){return t.texImage2D(t.TEXTURE_2D,0,c,r,o,0,t.RGBA,s,u)})),tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function Ca(t,n,e,r){tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,e)})),r.data instanceof Uint8Array?tn(t,n,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):tn(t,n,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),tn(t,n,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function Ea(t,n,e,r,o){var i=t.createBuffer();tn(t,n,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,i)}));var a=16*e*r;return tn(t,n,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)})),tn(t,n,(function(){return t.readPixels(0,0,r,e,t.RGBA,t.FLOAT,0)})),tn(t,n,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),i}function Ra(t,n,e){var r=t,o=new Float32Array(e);return r.bindBuffer(r.PIXEL_PACK_BUFFER,n),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function Ia(t,n,e,r,o){var i=$t(e,r),a=i[0],u=i[1],s=new Uint8Array(e*r*4);return tn(t,n,(function(){return t.readPixels(0,0,a,u,o.downloadTextureFormat,t.UNSIGNED_BYTE,s)})),new Float32Array(s.buffer)}function ka(t,n,e,r,o,i,a,u){var s=t,c=new Float32Array(function(t,n){var e=Jt(t,n);return e[0]*e[1]*4}(i,a));return s.bindBuffer(s.PIXEL_PACK_BUFFER,n),s.getBufferSubData(s.PIXEL_PACK_BUFFER,0,c),s.bindBuffer(s.PIXEL_PACK_BUFFER,null),c}function Sa(t,n,e,r){var o=new Float32Array(e*r*4);return tn(t,n,(function(){return t.readPixels(0,0,r,e,t.RGBA,t.FLOAT,o)})),o}var Aa=Object.freeze({createVertexShader:fa,createVertexBuffer:ha,createIndexBuffer:da,createFloat32MatrixTexture:va,createFloat16MatrixTexture:ma,createUnsignedBytesMatrixTexture:ga,createPackedMatrixTexture:ya,createFloat16PackedMatrixTexture:xa,bindVertexProgramAttributeStreams:ba,uploadDenseMatrixToTexture:wa,uploadPixelDataToTexture:Ca,createBufferFromOutputTexture:Ea,downloadFloat32MatrixFromBuffer:Ra,downloadByteEncodedFloatMatrixFromOutputTexture:Ia,downloadPackedMatrixFromBuffer:ka,downloadMatrixFromPackedOutputTexture:Sa}),Ta=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var n=h().getNumber("WEBGL_VERSION");null!=t?(this.gl=t,Xt(n,t)):this.gl=Yt(n);var e="WEBGL_color_buffer_float";if(1===h().getNumber("WEBGL_VERSION")){if(this.textureFloatExtension=rn(this.gl,this.debug,"OES_texture_float"),Ln(this.gl,"OES_texture_half_float"))this.textureHalfFloatExtension=rn(this.gl,this.debug,"OES_texture_half_float");else if(h().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(e),Ln(this.gl,"EXT_color_buffer_half_float"))this.colorBufferHalfFloatExtension=rn(this.gl,this.debug,"EXT_color_buffer_half_float");else if(h().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(e="EXT_color_buffer_float",Ln(this.gl,e))this.colorBufferFloatExtension=this.gl.getExtension(e);else{if(!Ln(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=ha(this.gl,this.debug),this.indexBuffer=da(this.gl,this.debug),this.framebuffer=gn(this.gl,this.debug),this.textureConfig=Zt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(t.prototype,"debug",{get:function(){return h().getBool("DEBUG")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var n=this.gl;tn(n,this.debug,(function(){return n.finish()})),tn(n,this.debug,(function(){return n.bindFramebuffer(n.FRAMEBUFFER,null)})),tn(n,this.debug,(function(){return n.deleteFramebuffer(t.framebuffer)})),tn(n,this.debug,(function(){return n.bindBuffer(n.ARRAY_BUFFER,null)})),tn(n,this.debug,(function(){return n.bindBuffer(n.ELEMENT_ARRAY_BUFFER,null)})),tn(n,this.debug,(function(){return n.deleteBuffer(t.indexBuffer)})),this.disposed=!0}},t.prototype.createFloat32MatrixTexture=function(t,n){return this.throwIfDisposed(),va(this.gl,this.debug,t,n,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,n){return this.throwIfDisposed(),ma(this.gl,this.debug,t,n,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,n){return this.throwIfDisposed(),ga(this.gl,this.debug,t,n,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,n){this.throwIfDisposed(),Ca(this.gl,this.debug,t,n)},t.prototype.uploadDenseMatrixToTexture=function(t,n,e,r){this.throwIfDisposed(),wa(this.gl,this.debug,t,n,e,r,this.textureConfig)},t.prototype.createFloat16PackedMatrixTexture=function(t,n){return this.throwIfDisposed(),xa(this.gl,this.debug,t,n,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,n){return this.throwIfDisposed(),ya(this.gl,this.debug,t,n,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var n=this;this.throwIfDisposed(),this.outputTexture===t&&(Rn(this.gl,this.debug,this.framebuffer),this.outputTexture=null),tn(this.gl,this.debug,(function(){return n.gl.deleteTexture(t)}))},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,n,e){var r=this;return this.downloadMatrixDriver(t,(function(){return Ia(r.gl,r.debug,n,e,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,n,e,r,o,i){return ka(this.gl,t,0,0,0,o,i,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,n){return Ra(this.gl,t,n)},t.prototype.createBufferFromTexture=function(t,n,e){this.bindTextureToFrameBuffer(t);var r=Ea(this.gl,this.debug,n,e,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var n,e,r=this;if(h().getBool("WEBGL_FENCE_API_ENABLED")){var o=t,i=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),e=function(){var t=o.clientWaitSync(i,0,0);return t===o.ALREADY_SIGNALED||t===o.CONDITION_SATISFIED},n=i}else h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(n=this.beginQuery(),this.endQuery(),e=function(){return r.isQueryAvailable(n,h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):e=function(){return!0};return{query:n,isFencePassed:e}},t.prototype.downloadMatrixFromPackedTexture=function(t,n,e){var r=this;return this.downloadMatrixDriver(t,(function(){return Sa(r.gl,r.debug,n,e)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var n=this.gl,e=an(n,this.debug,t),r=fa(n,this.debug),o=ln(n,this.debug);return tn(n,this.debug,(function(){return n.attachShader(o,r)})),tn(n,this.debug,(function(){return n.attachShader(o,e)})),fn(n,this.debug,o),this.debug&&hn(n,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=ba(n,this.debug,this.program,this.vertexBuffer)),o},t.prototype.deleteProgram=function(t){var n=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&tn(this.gl,this.debug,(function(){return n.gl.deleteProgram(t)}))},t.prototype.setProgram=function(t){var n=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&hn(this.gl,this.debug,this.program),tn(this.gl,this.debug,(function(){return n.gl.useProgram(t)}))},t.prototype.getUniformLocation=function(t,n,e){return void 0===e&&(e=!0),this.throwIfDisposed(),e?bn(this.gl,this.debug,t,n):wn(this.gl,t,n)},t.prototype.getAttributeLocation=function(t,n){var e=this;return this.throwIfDisposed(),tn(this.gl,this.debug,(function(){return e.gl.getAttribLocation(t,n)}))},t.prototype.getUniformLocationNoThrow=function(t,n){return this.throwIfDisposed(),this.gl.getUniformLocation(t,n)},t.prototype.setInputMatrixTexture=function(t,n,e){this.throwIfDisposed(),this.throwIfNoProgram(),Cn(this.gl,this.debug,this.program,t,n,e)},t.prototype.setOutputMatrixTexture=function(t,n,e){this.setOutputMatrixTextureDriver(t,e,n)},t.prototype.setOutputPackedMatrixTexture=function(t,n,e){this.throwIfDisposed();var r=Jt(n,e),o=r[0],i=r[1];this.setOutputMatrixTextureDriver(t,o,i)},t.prototype.setOutputMatrixWriteRegion=function(t,n,e,r){this.setOutputMatrixWriteRegionDriver(e,t,r,n)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,n,e,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},t.prototype.debugValidate=function(){null!=this.program&&hn(this.gl,this.debug,this.program),In(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),tn(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),tn(this.gl,this.debug,(function(){return t.gl.finish()}))},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=rn(this.gl,this.debug,2===h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.gl,n=this.getQueryTimerExtensionWebGL2(),e=t.createQuery();return t.beginQuery(n.TIME_ELAPSED_EXT,e),e}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},t.prototype.endQuery=function(){if(2!==h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var n=this.gl,e=this.getQueryTimerExtensionWebGL2();n.endQuery(e.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return s(this,void 0,void 0,(function(){var n=this;return c(this,(function(e){switch(e.label){case 0:return[4,L((function(){return n.disposed||n.isQueryAvailable(t,h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}))];case 1:return e.sent(),[2,this.getQueryTime(t,h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))]}}))}))},t.prototype.getQueryTime=function(t,n){if(0===n)return null;if(2===n){var e=this.gl;return e.getQueryParameter(t,e.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,n){if(0===n)return!0;if(2===n){var e=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=e.getQueryParameter(t,e.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}return o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT),null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},t.prototype.pollFence=function(t){var n=this;return new Promise((function(e){n.addItemToPoll((function(){return t.isFencePassed()}),(function(){return e()}))}))},t.prototype.pollItems=function(){for(var t=function(t){for(var n=0;n<t.length&&t[n]();++n);return n-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),n=0;n<=t;++n)(0,this.itemsToPoll[n].resolveFn)();this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,n){var e=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:n}),this.itemsToPoll.length>1||L((function(){return e.pollItems(),0===e.itemsToPoll.length}))},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),En(this.gl,this.debug,t,this.framebuffer),this.debug&&In(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(En(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&In(this.gl)):Rn(this.gl,this.debug,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,n){this.bindTextureToFrameBuffer(t);var e=n();return this.unbindTextureToFrameBuffer(),e},t.prototype.setOutputMatrixTextureDriver=function(t,n,e){this.throwIfDisposed();var r=this.gl;En(r,this.debug,t,this.framebuffer),this.debug&&In(r),this.outputTexture=t,tn(r,this.debug,(function(){return r.viewport(0,0,n,e)})),tn(r,this.debug,(function(){return r.scissor(0,0,n,e)}))},t.prototype.setOutputMatrixWriteRegionDriver=function(t,n,e,r){var o=this;this.throwIfDisposed(),tn(this.gl,this.debug,(function(){return o.gl.scissor(t,n,e,r)}))},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},t}();function Da(t,n){if(t.length!==n.length)throw Error("Binary was compiled with "+t.length+" inputs, but was executed with "+n.length+" inputs");t.forEach((function(t,e){var r=t.logicalShape,o=n[e],i=o.shape;if(!F(r,i))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+i+" must match");if(!t.isUniform||!o.isUniform){var a=t.texShape,u=o.isUniform?null:o.texData.texShape;if(!F(a,u))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+a+" and "+u+" must match")}}))}var Na=function(t,n,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var r=e.filterWidth,o=e.inChannels,i=e.strideWidth,a=e.strideHeight,u=e.padInfo,s=e.outWidth,c=e.dilationWidth,l=e.dilationHeight,f=e.dataFormat,h=u.left,d=u.top,p=o*r,v=ui(),m="channelsLast"===f,g=m?0:1,y=m?1:2,x="",b=0;b<=1;b++)for(var w=0;w<=1;w++)x+="\n          blockIndex = rc.y + "+w+";\n          pos = rc.x + "+b+";\n\n          if(blockIndex < "+t[1]+" && pos < "+t[0]+") {\n            offsetY = int(blockIndex / ("+s+")) * "+a+" - "+d+";\n            d0 = offsetY + "+l+" * (pos / "+p+");\n\n            if(d0 < "+n[g]+" && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), "+s+".) * "+i+". - "+h+".);\n              d1 = offsetX + "+c+" * (int(mod(float(pos), "+p+".) / "+o+".));\n\n              if(d1 < "+n[y]+" && d1 >= 0) {\n\n                ch = int(mod(float(pos), "+o+".));\n\n                if ("+m+") {\n                  innerDims = vec2(d1, ch);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        "+x+"\n\n        "+v.output+" = result;\n      }\n    "},_a=function(t,n,e,r,o){this.variableNames=["x"],this.outputShape=[];var i,a=n,u=t[3]-1;this.outputShape=t;var s="float("+e+") + float("+r+") * sum";i=.5===o?"inversesqrt("+s+")":1===o?"1.0/("+s+")":"exp(log("+s+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+a+"; j <= "+a+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+u+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+i+";\n        setOutput(val);\n      }\n    "},Fa=function(t,n,e,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=n,this.bias=e,this.alpha=r,this.beta=o,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < "+this.depth+"; ++d) {\n          int depthBegin = int(max(0.0, float(d - "+n+")));\n          int depthEnd = int(min(float("+this.depth+"),\n              float(d + "+n+" + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = "+this.depth+";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float("+r+") * norm + float("+e+");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float("+r+")\n                * float("+o+")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * "+o+");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    "},Oa=function(t,n,e,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var i,a=n,u=t[3]-1;this.outputShape=t;var s="float("+e+") + float("+r+") * sum";i=.5===o?"inversesqrt("+s+")":1===o?"1.0/("+s+")":"exp(log("+s+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < "+this.outputShape[3]+";\n        bool hasNextRow = c < "+this.outputShape[2]+";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - "+a+";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - "+a+"; j <= "+a+"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2("+u+"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * "+i+";\n        setOutput(result);\n      }\n    "},Ma=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var n=t.strideHeight,e=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=o-1-t.padInfo.top,u=i-1-t.padInfo.left,s=o*i-1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+u+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+o+";\n          wR += "+r+") {\n          float dyR = float(dyRCorner + wR) / "+n+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+i+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+e+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+s+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+i+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ba=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var n=t.strideDepth,e=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,u=t.effectiveFilterDepth,s=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=u-1-t.padInfo.front,f=s-1-t.padInfo.top,h=c-1-t.padInfo.left,d=u*s*c-1;this.userCode="\n      const ivec3 pads = ivec3("+l+", "+f+", "+h+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+u+";\n           wD += "+o+") {\n          float dyD = float(dyDCorner + wD) / "+n+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+s+";\n              wR += "+i+") {\n            float dyR = float(dyRCorner + wR) / "+e+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+a+") {\n              float dyC = float(dyCCorner + wC) / "+r+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = "+d+" -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * "+s+" * "+c+" +\n                  wR * "+c+" + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Pa=function(t,n,e,r,o,i,a){void 0===e&&(e=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===i&&(i=null),void 0===a&&(a=!1),this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n;var u=e?t[1]:t[2],s=Math.ceil(u/2),c=e?"i * 2, rc.y":"rc.y, i * 2",l=r?"rc.z, i * 2":"i * 2, rc.z",f=e?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],h=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],d="",p="";i&&(d=a?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+i+"\n        }":"vec4 activation(vec4 x) {\n          "+i+"\n        }",p="result = activation(result);");var v=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+d+"\n\n      const float sharedDimension = "+s+".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < "+s+"; i++) {\n          vec4 a = getMatrixA(rc.x, "+c+");\n          vec4 b = getMatrixB(rc.x, "+l+");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += ("+f[0]+" * "+h[0]+");\n          result += ("+f[1]+" * "+h[1]+");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        "+v+"\n\n        "+p+"\n\n        setOutput(result);\n      }\n    "},La=function(){function t(t,n,e){this.variableNames=["probs"],this.outputShape=[t,e],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(n-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(n-1)+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var n=this;return function(e,r){null==n.seedLoc&&(n.seedLoc=e.getUniformLocation(r,"seed")),e.gl.uniform1f(n.seedLoc,t)}},t}(),Wa=function(t,n,e,r){this.variableNames=["indices"],this.outputShape=[t,n],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+e+"),\n                      float(index == coords.y)));\n      }\n    "},Ua=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;var n=t.length;if(0===n)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{var e=ai("rc",n),r=yi(n),o=function(t,n,e){if(1===t)return"rc > "+n[0];for(var r="",o=t-2;o<t;o++)r+=e[o]+" >= "+n[o],o<t-1&&(r+="||");return r}(n,t,e),i=function(t,n,e,r){if(1===t)return"";var o=r.slice(-2);return"\n    int r = "+o[0]+";\n    int c = "+o[1]+";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= "+n+";\n    bool rEdge = rp1 >= "+e+";\n  "}(n,t[t.length-1],t[t.length-2],e),a=function(t,n){var e=t.length,r=function(t,n){for(var e=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var i=(0===r?"r":"rp1")+", "+(0===o?"c":"cp1"),a=2;a<t;a++)i=n[n.length-1-a]+","+i;e.push(i)}return e}(e,n);return 1===e?"getA(rc),\n            rc + 1 >= "+t[0]+" ? 0. : getA(rc + 1),\n            0, 0":"getA("+r[0]+"),\n          cEdge ? 0. : getA("+r[1]+"),\n          rEdge ? 0. : getA("+r[2]+"),\n          rEdge || cEdge ? 0. : getA("+r[3]+")"}(t,e);this.userCode="\n        void main() {\n          "+r+" rc = getOutputCoords();\n\n          if("+o+") {\n            setOutput(vec4(0));\n          } else {\n            "+i+"\n\n            setOutput(vec4("+a+"));\n          }\n        }\n      "}},za=function(t,n,e){this.variableNames=["x"],this.outputShape=n.map((function(n,e){return n[0]+t[e]+n[1]}));var r=t.length,o=yi(r),i=n.map((function(t){return t[0]})).join(","),a=n.map((function(n,e){return n[0]+t[e]})).join(","),u=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+o+" start = "+o+"("+i+");\n      "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+e+"));\n        } else {\n          "+o+" coords = outC - start;\n          setOutput(getX("+u+"));\n        }\n      }\n    ":"\n        int start = "+i+";\n        int end = "+a+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+e+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      "},Va=function(t,n,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n.map((function(n,e){return n[0]+t[e]+n[1]}));for(var r=t.length,o=yi(r),i=n.map((function(t){return t[0]})).join(","),a=n.map((function(n,e){return n[0]+t[e]})).join(","),u=ai("rc",r),s=ai("source",r),c=u[r-1]+" < "+this.outputShape[r-1],l=1===r?"source":"vec2("+s.slice(-2).join()+")",f=[o+" rc = outputLoc;",u[r-1]+" += 1;\n       if("+c+") {\n      ",1===r?"":"}\n       rc = outputLoc;\n       "+u[r-2]+" += 1;\n       if("+u[r-2]+" < "+this.outputShape[r-2]+") {",1===r?"":"  "+u[r-1]+" += 1;\n         if("+c+") {"],h=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",d="",p=0,v=1===r?2:4;p<v;p++)d+="\n        "+f[p]+"\n        if ("+h+") {\n          result["+p+"] = float("+e+");\n        } else {\n          "+o+" source = rc - start;\n          result["+p+"] = getChannel(getX("+s.join()+"), "+l+");\n        }\n      ";d+=1===r?"} ":"}}",this.userCode="\n      const "+o+" start = "+o+"("+i+");\n      const "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        "+d+"\n        setOutput(result);\n      }\n    "},Ga=function(t,n,e){if(this.variableNames=["x"],"avg"===n&&e)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,o=t.strideHeight,i=t.strideWidth,a=t.dilationHeight,u=t.dilationWidth,s=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=t.padInfo.top,f=t.padInfo.left;this.outputShape=t.outShape;var h="avg"===n,d="0.0";if(h||(d="-1.0 / 1e-20"),e)this.userCode="\n        const ivec2 strides = ivec2("+o+", "+i+");\n        const ivec2 pads = ivec2("+l+", "+f+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+s+";\n              wR += "+a+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+u+") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * "+c+" + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var p=n+"("+n+"("+n+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===n&&(p="avgValue / count");var v=4*Math.floor(r/4),m=r%4,g="\n      if ("+h+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+o+", "+i+");\n      const ivec2 pads = ivec2("+l+", "+f+");\n      const float initializationValue = "+d+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+d+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+s+";\n            wR += "+a+") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+v+"; wC += 4) {\n            int xC = xCCorner + wC * "+u+";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+u+", d),\n              getValue(batch, xR, xC + 2 * "+u+", d),\n              getValue(batch, xR, xC + 3 * "+u+", d)\n            );\n\n            "+g+"\n          }\n\n          int xC = xCCorner + "+v+";\n          if ("+(1===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+g+"\n          } else if ("+(2===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+u+", d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+g+"\n          } else if ("+(3===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+u+", d),\n              getValue(batch, xR, xC + 2 * "+u+", d),\n              initializationValue\n            );\n\n            "+g+"\n          }\n        }\n        setOutput("+p+");\n      }\n    "}},Ha=function(t,n,e){if(this.variableNames=["x"],"avg"===n&&e)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,u=t.dilationDepth,s=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,f=t.effectiveFilterHeight,h=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,v=t.padInfo.left;this.outputShape=t.outShape;var m="avg"===n,g="0.0";if(m||(g="-1.0 / 1e-20"),e)this.userCode="\n        const ivec3 strides =\n            ivec3("+o+", "+i+", "+a+");\n        const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < "+l+";\n              wD += "+u+") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int wR = 0; wR < "+f+";\n                wR += "+s+") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int wC = 0; wC < "+h+";\n                  wC += "+c+") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * "+f+" * "+h+" +\n                      wR * "+h+" + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var y=n+"("+n+"("+n+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===n&&(y="avgValue / count");var x=4*Math.floor(r/4),b=r%4,w="\n      if ("+m+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec3 strides =\n        ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n      const float initializationValue = "+g+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+g+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+u+") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+f+";\n            wR += "+s+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+x+"; wC += 4) {\n              int xC = xCCorner + wC * "+c+";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                getValue(batch, xD, xR, xC + 3 * "+c+", ch)\n              );\n\n              "+w+"\n            }\n\n            int xC = xCCorner + "+x+";\n            if ("+(1===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              "+w+"\n            } else if ("+(2===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              "+w+"\n            } else if ("+(3===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                initializationValue\n              );\n\n              "+w+"\n            }\n          }\n          setOutput("+y+");\n        }\n      }\n    "}},qa=function(t,n){this.variableNames=["x"];var e=t.windowSize,r=t.batchSize,o=t.inSize,i=Math.ceil(o/e);this.outputShape=[r,i];var a="0.0",u="";"prod"===n?a="1.0":"min"===n?(a="1.0 / 1e-20",u="min"):"max"===n&&(a="-1.0 / 1e-20",u="max");var s=n+"("+n+"("+n+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===n?s="sumValue":"prod"===n?s="prodValue":"all"===n?s="allValue":"any"===n&&(s="anyValue");var c=4*Math.floor(e/4),l=e%4,f="\n      if ("+("sum"===n)+") {\n        sumValue += dot(values, ones);\n      } else if ("+("prod"===n)+") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = "+u+"(values, minMaxValue);\n      }\n    ",h="vec4";"all"===n?(a="1.0",f="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",h="bvec4"):"any"===n&&(a="0.0",f="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",h="bvec4");var d="";o%e>0&&(d="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+a+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+d+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+e+";\n\n        vec4 minMaxValue = vec4("+a+");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < "+c+"; i += 4) {\n          int inIdx = inOffset + i;\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+f+"\n        }\n\n        int inIdx = inOffset + "+c+";\n        if ("+(1===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          "+f+"\n        } else if ("+(2===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          "+f+"\n        } else if ("+(3===l)+") {\n          "+h+" values = "+h+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          "+f+"\n        }\n        setOutput("+s+");\n      }\n    "},Ka=function(t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var e="",r=0;r<4;r++){var o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),e+="\n        "+o+"\n        "+(r>0?"if(thisRC.y < rows && thisRC.z < cols){":"")+"\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result["+r+"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        "+(r>0?"}":"")+"\n      "}this.userCode="\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      "+si(["r","c","d"],n)+"\n      return ivec3(r, c, d);\n    }\n  \n      "+ci(t)+"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = "+t[1]+";\n        int cols = "+t[2]+";\n\n        "+e+"\n\n        setOutput(result);\n      }\n    "},ja=function(t,n,e){this.variableNames=["dy"],this.outputShape=[],this.outputShape=n.shape;var r=n.shape,o=r[1],i=r[2],a=t.shape,u=a[1],s=a[2],c=[e&&u>1?o-1:o,e&&s>1?i-1:i],l=[e&&u>1?u-1:u,e&&s>1?s-1:s],f=c[0]/l[0],h=c[1]/l[1],d=1/f,p=1/h,v=2*Math.ceil(d)+2,m=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+f+");\n        const float widthScale = float("+h+");\n\n        const float invHeightScale = float("+d+");\n        const float invWidthScale = float("+p+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+m+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+u+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+s+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(o-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(i-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Xa=function(t,n,e,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],u=t[3];this.outputShape=[o,n,e,u];var s=[r&&n>1?i-1:i,r&&e>1?a-1:a],c=[r&&n>1?n-1:n,r&&e>1?e-1:e];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+s[0]/c[0]+",\n          "+s[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "},Ya=function(t,n,e,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var o=t[0],i=t[1],a=t[2],u=t[3];this.outputShape=[o,n,e,u];var s=[r&&n>1?i-1:i,r&&e>1?a-1:a],c=[r&&n>1?n-1:n,r&&e>1?e-1:e];this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          "+s[0]/c[0]+",\n          "+s[1]/c[1]+",\n          "+s[1]/c[1]+");\n      const vec3 inputShapeRC = vec3("+i+".0, "+a+".0,\n                                     "+a+".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < "+(u-1)+";\n        bool hasNextRow = coords.z < "+(e-1)+";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    "},$a=function(t,n,e){this.variableNames=["dy"],this.outputShape=[],this.outputShape=n.shape;var r=n.shape,o=r[1],i=r[2],a=t.shape,u=a[1],s=a[2],c=[e&&u>1?o-1:o,e&&s>1?i-1:i],l=[e&&u>1?u-1:u,e&&s>1?s-1:s],f=c[0]/l[0],h=c[1]/l[1],d=1/f,p=1/h,v=2*Math.ceil(d)+2,m=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+f+");\n        const float widthScale = float("+h+");\n\n        const float invHeightScale = float("+d+");\n        const float invWidthScale = float("+p+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+m+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+u+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+s+") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float("+c[0]+") *\n                (float(dyR) / float("+l[0]+"));\n\n            float sourceFracCol =\n                float("+c[1]+") *\n                  (float(dyC) / float("+l[1]+"));\n\n            int sourceNearestRow = int(min(\n                float(int("+o+") - 1),\n                "+e+" ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int("+i+") - 1),\n                "+e+" ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Qa=function(t,n,e,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],u=t[3];this.outputShape=[o,n,e,u];var s=[r&&n>1?i-1:i,r&&e>1?a-1:a],c=[r&&n>1?n-1:n,r&&e>1?e-1:e],l=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+s[0]/c[0]+",\n          "+s[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+l+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    "},Ja=function(t,n){this.variableNames=["x"];var e=t.length;if(e>4)throw new Error("WebGL backend: Reverse of rank-"+e+" tensor is not yet supported");if(this.outputShape=t,1!==e){var r=t.map((function(e,r){return function(e){return-1!==n.indexOf(e)&&1!==t[e]?t[e]+" - coords["+e+"] - 1":"coords["+e+"]"}(r)})).join(","),o=yi(e);this.userCode="\n      void main() {\n        "+o+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    "}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+t[0]+" - coord - 1));\n        }\n      "},Za=function(t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;var e=t.length;if(e>4)throw new Error("WebGL backend: Reverse of rank-"+e+" tensor is not yet supported");this.outputShape=t;var r=ai("rc",e),o=r[e-1]+" + 1 < "+this.outputShape[e-1],i=r[e-2]+" + 1 < "+this.outputShape[e-2],a=yi(e);function u(e){var r=t.map((function(r,o){return function(e,r){return-1!==n.indexOf(e)&&1!==t[e]?t[e]+" - "+r[e]+" - 1":""+r[e]}(o,e)}));return"getChannel(getX("+r.join(",")+"), vec2("+r.slice(-2).join(",")+"))"}this.userCode=1===e?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX("+t[0]+" - rc - 1),\n            "+t[0]+" - rc - 1);\n          if("+o+"){\n              result.g = getChannel(getX("+t[0]+" - (rc  + 1) - 1),\n                "+t[0]+" - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      ":"\n        void main() {\n          "+a+" rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = "+function(t){return u(t)}(r.slice())+";\n          if("+o+"){\n            result.g = "+function(t){return t[e-1]="("+t[e-1]+" + 1)",u(t)}(r.slice())+";\n          }\n          if("+i+") {\n            result.b = "+function(t){return t[e-2]="("+t[e-2]+" + 1)",u(t)}(r.slice())+";\n            if("+o+") {\n              result.a = "+function(t){return t[e-1]="("+t[e-1]+" + 1)",t[e-2]="("+t[e-2]+" + 1)",u(t)}(r.slice())+";\n            }\n          }\n          setOutput(result);\n        }\n    "},tu=function(t,n,e,r,o,i,a){void 0===a&&(a=!0),this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;var u=yi(o.length),s=yi(i.length),c="";1===e?c="i":2===e&&(c="i, j");var l="getIndices("+c+")",f="";1===r?f="i":2===r&&(f="i, coords[1]");var h="getUpdates("+f+")",d=n>1?"strides[j]":"strides";this.userCode="\n        "+u+" strides = "+u+"("+o+");\n\n        void main() {\n          "+s+" coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < "+t+"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < "+n+"; j++) {\n              int index = round("+l+");\n              flattenedIndex += index * "+d+";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += "+h+";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      "},nu=function(t,n){this.variableNames=["x","segmentIds"];var e=t.windowSize,r=t.batchSize,o=t.inSize,i=t.numSegments,a=i*Math.ceil(o/e);this.outputShape=[r,a];var u=4*Math.floor(e/4),s=e%4,c="\n        sumValue += dot(values, segFilter);\n    ",l="";o%e>0&&(l="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      ");var f="";o%e>0&&(f="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return -1.0;\n        }\n      "),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        "+l+"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        "+f+"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          "+i+")) * float("+e+"));\n        int currentSeg = int(mod(float(outIdx), float("+i+")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+u+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          "+c+"\n        }\n\n        int inIdx = inOffset + "+u+";\n        if ("+(1===s)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          "+c+"\n        } else if ("+(2===s)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          "+c+"\n        } else if ("+(3===s)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          "+c+"\n        }\n        setOutput(sumValue);\n      }\n    "},eu=function(t,n,e){var r,o;if(this.variableNames=["c","a","b"],this.outputShape=n,e>4)throw Error("Where for rank "+e+" is not yet supported");if(1===e)o="resRC",r="resRC";else{for(var i=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],u=[],s=0;s<n.length;s++)u.push(""+i[s]),s<t&&a.push(""+i[s]);r=a.join(),o=u.join()}var c=yi(e);this.userCode="\n      void main() {\n        "+c+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+o+"));\n        } else {\n          setOutput(getB("+o+"));\n        }\n      }\n    "},ru=function(){function t(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var n,e=yi(this.rank),r="uniform int start["+this.rank+"];",o=function(t){if(1===t)return"sourceLoc";if(t<=6)return ou.slice(0,t).map((function(t){return"sourceLoc."+t})).join(",");throw Error("Slicing for rank "+t+" is not yet supported")}(this.rank);n="\n        "+e+" sourceLoc;\n        "+e+" coords = getOutputCoords();\n        "+t.map((function(t,n){return"sourceLoc."+ou[n]+" = start["+n+"] + coords."+ou[n]+";"})).join("\n")+"\n      ",this.userCode="\n      "+r+"\n      void main() {\n        "+n+"\n        setOutput(getSource("+o+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var n=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(e,r){null==n.startLoc&&(n.startLoc=e.getUniformLocationNoThrow(r,"start"),null==n.startLoc)||e.gl.uniform1iv(n.startLoc,t)}},t}(),ou=["x","y","z","w","u","v"],iu=function(){function t(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;var n=yi(this.rank),e=ai("coords",this.rank),r=ai("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":"vec2("+r.slice(-2).join()+")",i="getChannel(getSource("+r.join()+"), "+o+")",a="\n      result.x = "+i+";\n      if (++"+e[this.rank-1]+" < "+t[this.rank-1]+") {\n        ++"+r[this.rank-1]+";\n        result.y = "+i+";\n        --"+r[this.rank-1]+";\n      }\n    ",u=1===this.rank?"":"\n      --"+e[this.rank-1]+";\n      if (++"+e[this.rank-2]+" < "+t[this.rank-2]+") {\n        ++"+r[this.rank-2]+";\n        result.z = "+i+";\n        if (++"+e[this.rank-1]+" < "+t[this.rank-1]+") {\n          ++"+r[this.rank-1]+";\n          result.w = "+i+";\n        }\n      }\n    ",s=this.rank<=4?"sourceLoc = coords +\n            "+n+"("+t.map((function(t,n){return"start["+n+"]"})).join()+");":t.map((function(t,n){return r[n]+" = "+e[n]+" + start["+n+"];"})).join("\n");this.userCode="\n      uniform int start["+this.rank+"];\n      void main() {\n        "+n+" coords = getOutputCoords();\n        "+n+" sourceLoc;\n        "+s+"\n        vec4 result = vec4(0.);\n        "+a+"\n        "+u+"\n        setOutput(result);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var n=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(e,r){null==n.startLoc&&(n.startLoc=e.getUniformLocationNoThrow(r,"start"),null==n.startLoc)||e.gl.uniform1iv(n.startLoc,t)}},t}(),au=function(t,n,e){this.variableNames=["x"],this.outputShape=e;var r=e.length,o=yi(e.length),i=yi(e.length),a="";if(1===r)a="coords * strides + begin";else{var u=0;a=e.map((function(t,n){return u++,1===e.length?"coords * strides["+n+"] + begin["+n+"]":"coords["+(u-1)+"] * strides["+n+"] + begin["+n+"]"})).join(",")}this.userCode="\n      "+o+" begin = "+o+"("+t+");\n      "+o+" strides = "+o+"("+n+");\n\n      void main() {\n        "+i+" coords = getOutputCoords();\n        setOutput(getX("+a+"));\n      }\n    "},uu=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,n,e){var r,o=su(n,e),i=cu(t,o,e);if(i in this.freeTextures||(this.freeTextures[i]=[]),i in this.usedTextures||(this.usedTextures[i]=[]),this.freeTextures[i].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var a=this.freeTextures[i].shift();return this.usedTextures[i].push(a),a}return this.numUsedTextures++,this.log(),o===qt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):o===qt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):o===qt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):o===qt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):o===qt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[i].push(r),r},t.prototype.releaseTexture=function(t,n,e,r){if(null!=this.freeTextures){var o=cu(n,su(e,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(t),this.numFreeTextures++,this.numUsedTextures--;var i=this.usedTextures[o],a=i.indexOf(t);if(a<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(a,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+t+")")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var n in this.freeTextures)this.freeTextures[n].forEach((function(n){t.gpgpu.deleteMatrixTexture(n)}));for(var n in this.usedTextures)this.usedTextures[n].forEach((function(n){t.gpgpu.deleteMatrixTexture(n)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function su(t,n){if(t===Ht.UPLOAD)return qt.PACKED_2X2_FLOAT32;if(t===Ht.RENDER||null==t)return function(t){return h().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?qt.PACKED_2X2_FLOAT32:qt.UNPACKED_FLOAT32:t?qt.PACKED_2X2_FLOAT16:qt.UNPACKED_FLOAT16}(n);if(t===Ht.DOWNLOAD||t===Ht.PIXELS)return qt.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function cu(t,n,e){return t[0]+"_"+t[1]+"_"+n+"_"+e}var lu=function(t,n){this.variableNames=["A"];for(var e=new Array(t.length),r=0;r<e.length;r++)e[r]=t[r]*n[r];this.outputShape=e,this.rank=e.length;var o=yi(this.rank),i=function(t){var n=t.length;if(n>5)throw Error("Tile for rank "+n+" is not yet supported");if(1===n)return"imod(resRC, "+t[0]+")";for(var e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[],o=0;o<t.length;o++)r.push("imod("+e[o]+", "+t[o]+")");return r.join()}(t);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},fu=function(t,n){this.variableNames=["A"];for(var e=new Array(t.length),r=0;r<e.length;r++)e[r]=t[n[r]];this.outputShape=e,this.rank=e.length;var o=yi(this.rank),i=function(t){var n=t.length;if(n>6)throw Error("Transpose for rank "+n+" is not yet supported");for(var e=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(n),o=0;o<t.length;o++)r[t[o]]=e[o];return r.join()}(n);this.userCode="\n    void main() {\n      "+o+" resRC = getOutputCoords();\n      setOutput(getA("+i+"));\n    }\n    "},hu=function(t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;for(var e=new Array(t.length),r=0;r<e.length;r++)e[r]=t[n[r]];if(this.outputShape=e,this.rank=e.length,this.rank>6)throw Error("Packed transpose for rank "+this.rank+" is not yet supported.");var o=yi(this.rank),i=ii("rc",this.rank),a=new Array(this.rank);for(r=0;r<n.length;r++)a[n[r]]=i[r];var u="vec2("+a.slice(-2).join()+")",s="++"+i[this.rank-1]+" < "+e[this.rank-1],c="getChannel(getA("+a.join()+"), "+u+")";this.userCode="\n    void main() {\n      "+o+" rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = "+c+";\n      if("+s+") {\n        result[1] = "+c+";\n      }\n      --"+i[this.rank-1]+";\n      if(++"+i[this.rank-2]+" < "+e[this.rank-2]+") {\n        result[2] = "+c+";\n        if("+s+") {\n          result[3] = "+c+";\n        }\n      }\n      setOutput(result);\n    }\n    "},du=1.7580993408473768,pu=1.0507009873554805,vu=function(t,n){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      float unaryOperation(float x) {\n        "+n+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},mu="if (isnan(x)) return x;",gu="return abs(x);",yu=mu+"\n  return (x < 0.0) ? 0.0 : x;\n",xu=mu+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",bu="return (x >= 0.0) ? x : (exp(x) - 1.0);",wu="return -x;",Cu="return ceil(x);",Eu="return floor(x);",Ru="return exp(x);",Iu="return exp(x) - 1.0;",ku="return x;",Su="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Au="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Tu="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",Du=function(t,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        "+n+"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},Nu=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;var n=t.length,e=ai("rc",n),r=yi(n),o=function(t,n){if(1===t)return"rc";for(var e="",r=0;r<t;r++)e+=n[r],r<t-1&&(e+=",");return e}(n,e),i=e.slice(-2),a=n<=1?"rc":"vec2("+i.join(",")+")";this.userCode="\n      void main() {\n        "+r+" rc = getOutputCoords();\n        vec4 packedInput = getA("+o+");\n\n        setOutput(getChannel(packedInput, "+a+"));\n      }\n    "},_u={};function Fu(t,n){if(void 0===n&&(n=!1),"linear"===t)return"return x;";if("relu"===t)return n?Su:yu;if("elu"===t)return n?Tu:bu;if("relu6"===t)return n?Au:xu;if("prelu"===t)return n?_i:Di;throw new Error("Activation "+t+" has not been implemented for the WebGL backend.")}var Ou=function(t){function n(n){var e,r=t.call(this)||this;if(r.pendingRead=new WeakMap,r.pendingDisposal=new WeakSet,r.dataRefCount=new WeakMap,r.numBytesInGPU=0,r.uploadWaitMs=0,r.downloadWaitMs=0,r.warnedAboutMemory=!1,r.pendingDeletes=0,r.disposed=!1,!h().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==n){var o=Yt(h().getNumber("WEBGL_VERSION"));r.binaryCache=((e=h().getNumber("WEBGL_VERSION"))in _u||(_u[e]={}),_u[e]),r.gpgpu=new Ta(o),r.canvas=o.canvas,r.gpgpuCreatedLocally=!0}else r.gpgpu=n,r.binaryCache={},r.gpgpuCreatedLocally=!1,r.canvas=n.gl.canvas;return r.textureManager=new uu(r.gpgpu),r.numMBBeforeWarning=null==h().global.screen?1024:h().global.screen.height*h().global.screen.width*window.devicePixelRatio*600/1024/1024,r.texData=new yo(r,Ut),r}return u(n,t),n.prototype.numDataIds=function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes},n.prototype.write=function(t,n,e){if(h().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===e&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");var r={};return this.texData.set(r,{shape:n,dtype:e,values:t,usage:Ht.UPLOAD}),r},n.prototype.move=function(t,n,e,r){if(h().getBool("DEBUG")&&this.checkNumericalProblems(n),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:e,dtype:r,values:n,usage:Ht.UPLOAD})},n.prototype.readSync=function(t){var n=this.texData.get(t),e=n.values,r=n.dtype,o=n.complexTensors,i=n.slice,a=n.shape,u=n.isPacked;if(null!=i){var s;s=u?new Du(a,ku):new vu(a,ku);var c=this.runWebGLProgram(s,[{dataId:t,shape:a,dtype:r}],r),l=this.readSync(c.dataId);return this.disposeData(c.dataId),l}if(null!=e)return this.convertAndCacheOnCPU(t);if("string"===r)return e;var f,h,d=null!=this.activeTimers;return d&&(f=ut()),h="complex64"===r?Uo(o.real.dataSync(),o.imag.dataSync()):this.getValuesFromTexture(t),d&&(this.downloadWaitMs+=ut()-f),this.convertAndCacheOnCPU(t,h)},n.prototype.read=function(t){return s(this,void 0,void 0,(function(){var n,e,r,o,i,a,u,s,l,f,d,p,v,m,g,y,x,b,w,C,E,R;return c(this,(function(c){switch(c.label){case 0:if(this.pendingRead.has(t))return n=this.pendingRead.get(t),[2,new Promise((function(t){return n.push(t)}))];if(e=this.texData.get(t),r=e.values,o=e.shape,i=e.slice,a=e.dtype,u=e.complexTensors,s=e.isPacked,null!=i)return void 0,l=s?new Du(o,ku):new vu(o,ku),f=this.runWebGLProgram(l,[{dataId:t,shape:o,dtype:a}],a),d=this.read(f.dataId),this.disposeData(f.dataId),[2,d];if(null!=r)return[2,this.convertAndCacheOnCPU(t)];if(!h().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===h().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");return p=null,"complex64"!==a&&h().get("WEBGL_BUFFER_SUPPORTED")&&(v=this.decode(t),m=this.texData.get(v.dataId),p=(R=this.gpgpu).createBufferFromTexture.apply(R,[m.texture].concat(Qt(o)))),this.pendingRead.set(t,[]),"complex64"===a?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:c.sent(),c.label=2;case 2:return"complex64"!==a?[3,4]:[4,Promise.all([u.real.data(),u.imag.data()])];case 3:return y=c.sent(),x=y[0],b=y[1],g=Uo(x,b),[3,5];case 4:null==p?g=this.getValuesFromTexture(t):(w=_(o),g=this.gpgpu.downloadFloat32MatrixFromBuffer(p,w)),c.label=5;case 5:return null!=v&&this.disposeData(v.dataId),C=this.convertAndCacheOnCPU(t,g),E=this.pendingRead.get(t),this.pendingRead.delete(t),E.forEach((function(t){return t(C)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),[2,C]}}))}))},n.prototype.checkNumericalProblems=function(t){if(null!=t)for(var n=0;n<t.length;n++){var e=t[n];if(!nn(e)){if(h().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value "+e+" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value "+e+" cannot be represented on this device.")}}},n.prototype.getValuesFromTexture=function(t){var n,e=this.texData.get(t),r=e.shape,o=e.dtype,i=e.isPacked,a=_(r);if(h().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){var u=this.decode(t),s=this.texData.get(u.dataId),c=(n=this.gpgpu).downloadMatrixFromPackedTexture.apply(n,[s.texture].concat(Qt(r))).subarray(0,a);return this.disposeData(u.dataId),c}var l=h().getBool("WEBGL_PACK")&&!0===i,f=l?Nn(r):r,d=l?new oa(f):new ra(f),p=this.runWebGLProgram(d,[{shape:f,dtype:o,dataId:t}],"float32"),v=this.texData.get(p.dataId),m=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(v.texture,v.texShape[0],v.texShape[1]).subarray(0,a);return this.disposeData(p.dataId),m},n.prototype.time=function(t){return s(this,void 0,void 0,(function(){var n,e,r,o,i,a,u;return c(this,(function(s){switch(s.label){case 0:return n=this.activeTimers,e=[],r=!1,null==this.programTimersStack?(this.programTimersStack=e,r=!0):this.activeTimers.push(e),this.activeTimers=e,t(),o=N(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),i=N(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=n,r&&(this.programTimersStack=null),a={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null},h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?[4,Promise.all(o)]:[3,2];case 1:return u=s.sent(),a.kernelMs=S(u),a.getExtraProfileInfo=function(){return u.map((function(t,n){return{name:i[n],ms:t}})).map((function(t){return t.name+": "+t.ms})).join(", ")},[3,3];case 2:a.kernelMs={error:"WebGL query timers are not supported in this environment."},s.label=3;case 3:return this.uploadWaitMs=0,this.downloadWaitMs=0,[2,a]}}))}))},n.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},n.prototype.startTimer=function(){return h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:ut(),endMs:null}},n.prototype.endTimer=function(t){return h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),t):(t.endMs=ut(),t)},n.prototype.getQueryTime=function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){return h().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(n=t).endMs-n.startMs]}))}))},n.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t)){if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(this.texData.has(t)){this.releaseGPUData(t);var n=this.texData.get(t).complexTensors;null!=n&&(n.real.dispose(),n.imag.dispose()),this.texData.delete(t)}}},n.prototype.releaseGPUData=function(t){var n=this.texData.get(t),e=n.texture,r=n.dtype,o=n.texShape,i=n.usage,a=n.isPacked,u=n.slice,s=u&&u.origDataId||t,c=this.dataRefCount.get(s);c>1?this.dataRefCount.set(s,c-1):(this.dataRefCount.delete(s),null!=e&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(e,o,i,a)));var l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null},n.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},n.prototype.getDataInfo=function(t){return this.texData.get(t)},n.prototype.getCPUBackend=function(){return h().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Ut.findBackend("cpu")),this.cpuBackend):null},n.prototype.shouldExecuteOnCPU=function(t,n){var e=this;return void 0===n&&(n=128),null!=this.getCPUBackend()&&t.every((function(t){return null==e.texData.get(t.dataId).texture&&t.size<n}))},n.prototype.getGPGPUContext=function(){return this.gpgpu},n.prototype.complex=function(t,n){var e=this.makeOutput(t.shape,"complex64");return this.texData.get(e.dataId).complexTensors={real:Ut.keep(t.clone()),imag:Ut.keep(n.clone())},e},n.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},n.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},n.prototype.slice=function(t,n,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,n,e);if(0===_(e))return _e([],e,t.dtype);var r=this.texData.get(t.dataId).isPacked,o=io(t.shape,n,e);if(r||!o){var i=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new iu(e):new ru(e),a=i.getCustomSetupFunc(n);return this.compileAndRun(i,[t],null,a)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,n,e)},n.prototype.shallowSlice=function(t,n,e){var r=this.texData.get(t.dataId),o=this.makeOutput(e,t.dtype),i=this.texData.get(o.dataId);Object.assign(i,r),i.shape=e,i.dtype=t.dtype;var a=ao(n,t.strides);r.slice&&(a+=r.slice.flatOffset),i.slice={flatOffset:a,origDataId:r.slice&&r.slice.origDataId||t.dataId};var u=this.dataRefCount.get(i.slice.origDataId)||1;return this.dataRefCount.set(i.slice.origDataId,u+1),o},n.prototype.stridedSlice=function(t,n,e,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,n,e,r);var o=eo(n,e,r);if(o.some((function(t){return 0===t})))return _e([],o);var i=new au(n,r,o);return this.compileAndRun(i,[t])},n.prototype.reverse=function(t,n){var e=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Za(t.shape,n):new Ja(t.shape,n);return this.compileAndRun(e,[t])},n.prototype.concat=function(t,n){if("complex64"===t[0].dtype){var e=t.map((function(t){return De(t)})),r=t.map((function(t){return Ne(t)}));return Te(this.concat(e,n),this.concat(r,n))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,n);if(1===t.length)return t[0];if(t.length>h().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){var o=Math.floor(t.length/2),i=this.concat(t.slice(0,o),n),a=this.concat(t.slice(o),n);return this.concat([i,a],n)}if(h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){var u=new Li(t.map((function(t){return t.shape})),n);return this.compileAndRun(u,t)}var s=Se(t.map((function(t){return t.shape})),n),c=t.map((function(t){return t.as2D(-1,_(t.shape.slice(n)))})),l=new Pi(c.map((function(t){return t.shape})));return this.compileAndRun(l,c).reshape(s)},n.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,wu,t.dtype);var n=new vu(t.shape,wu);return this.compileAndRun(n,[t])},n.prototype.batchMatMul=function(t,n,e,r){var o=e?t.shape[2]:t.shape[1],i=r?n.shape[1]:n.shape[2],a=e?t.shape[1]:t.shape[2],u=t.shape[0];if((1===o||1===i)&&a>1e3){e&&(t=t.transpose([0,2,1])),r&&(n=n.transpose([0,2,1]));var s=1===i?t:t.as3D(u,a,1),c=1===i?2:1,l=1===i?n.as3D(u,1,a):n;return this.multiply(s,l).sum(c,!0)}var f=Nt(t.dtype,n.dtype),h=new Pa(t.shape,[u,o,i],e,r);return this.compileAndRun(h,[t,n],f)},n.prototype.fusedBatchMatMul=function(t){var n=t.a,e=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,u=t.preluActivationWeights,s=r?n.shape[2]:n.shape[1],c=o?e.shape[1]:e.shape[2],l=n.shape[0],f=Nt(n.dtype,e.dtype),h=null!=i,d=null!=u,p=a?Fu(a,!0):null,v=new Pa(n.shape,[l,s,c],r,o,h,p,d),m=[n,e];return i&&m.push(i),u&&m.push(u),this.compileAndRun(v,m,f)},n.prototype.multiply=function(t,n){if("complex64"===t.dtype){var e=this.texData.get(t.dataId),r=this.texData.get(n.dataId),o=new ki("return areal * breal - aimag * bimag;",t.shape,n.shape),i=new ki("return areal * bimag + aimag * breal;",t.shape,n.shape),a=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag),this.makeComplexComponentTensorInfo(n,r.complexTensors.real),this.makeComplexComponentTensorInfo(n,r.complexTensors.imag)],u=this.compileAndRun(o,a),s=this.compileAndRun(i,a),c=this.complex(u,s);return u.dispose(),s.dispose(),c}if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.multiply(t,n);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,Ti,t.dtype);var l=new Ni(Ti,t.shape,n.shape);return this.compileAndRun(l,[t,n],t.dtype)},n.prototype.batchNormalization=function(t,n,e,r,o,i){var a=[t,n,e],u=null;null!=i&&(u=i.shape,a.push(i));var s=null;if(null!=o&&(s=o.shape,a.push(o)),h().getBool("WEBGL_PACK_NORMALIZATION")){var c=new Ii(t.shape,n.shape,e.shape,u,s,r);return this.compileAndRun(c,a)}var l=new Ri(t.shape,n.shape,e.shape,u,s,r);return this.compileAndRun(l,a)},n.prototype.localResponseNormalization4D=function(t,n,e,r,o){var i=h().getBool("WEBGL_PACK_NORMALIZATION")?new Oa(t.shape,n,e,r,o):new _a(t.shape,n,e,r,o);return this.compileAndRun(i,[t])},n.prototype.LRNGrad=function(t,n,e,r,o,i,a){var u=new Fa(n.shape,r,o,i,a);return this.compileAndRun(u,[n,e,t])},n.prototype.tile=function(t,n){if("string"===t.dtype){var e=this.readSync(t.dataId).map((function(t){return lt(t)}));return Zo(dr(t.shape,t.dtype,e),n)}var r=new lu(t.shape,n);return this.compileAndRun(r,[t])},n.prototype.pad=function(t,n,e){var r=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Va(t.shape,n,e):new za(t.shape,n,e);return this.compileAndRun(r,[t])},n.prototype.transpose=function(t,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.transpose(t,n);var e=h().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new hu(t.shape,n):new fu(t.shape,n);return this.compileAndRun(e,[t])},n.prototype.gather=function(t,n,e){if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.gather(t,n,e);var r=new ca(t.shape,n.size,e);return this.compileAndRun(r,[t,n])},n.prototype.batchToSpaceND=function(t,n,e){A(t.rank<=4,(function(){return"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"}));var r=n.reduce((function(t,n){return t*n})),o=Vr(t.shape,n,r),i=Gr(o.length,n.length),a=Hr(t.shape,n,r),u=qr(e,n.length),s=Kr(a,e,n.length);return t.reshape(o).transpose(i).reshape(a).slice(u,s)},n.prototype.spaceToBatchND=function(t,n,e){A(t.rank<=4,(function(){return"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"}));var r=n.reduce((function(t,n){return t*n})),o=[[0,0]];o.push.apply(o,e);for(var i=1+n.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),u=Vr(a.shape,n,r,!1),s=Gr(u.length,n.length,!1),c=Hr(a.shape,n,r,!1);return a.reshape(u).transpose(s).reshape(c)},n.prototype.reduce=function(t,n,e){var r=t.shape[0],o=t.shape[1],i=Yr(o),a=new qa({windowSize:i,inSize:o,batchSize:r},n),u=this.compileAndRun(a,[t],e);return 1===u.shape[1]?u:this.reduce(u,n,e)},n.prototype.argReduce=function(t,n,e){void 0===e&&(e=null);var r=t.shape[0],o=t.shape[1];null!=e&&(r=e.shape[0],o=e.shape[1]);var i=Yr(o),a=new oi({windowSize:i,inSize:o,batchSize:r},n,null==e),u=[t];null!=e&&u.push(e);var s=this.compileAndRun(a,u,"int32");return 1===s.shape[1]?s:this.argReduce(t,n,s)},n.prototype.argReducePacked=function(t,n,e){void 0===e&&(e=null);var r=null!=e?e.shape:t.shape,o=Yr(r[r.length-1]),i=new wi(r,o,n,null==e),a=null==e?[t]:[t,e],u=this.compileAndRun(i,a,"int32");return u.rank===t.rank?this.argReducePacked(t,n,u):u},n.prototype.sum=function(t,n){Ce("sum",n,t.rank);var e=be(t.shape,n),r=e[0],o=_(e[1]),i=t.as2D(-1,o),a=_t(t.dtype);return this.reduce(i,"sum",a).reshape(r)},n.prototype.prod=function(t,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,n);var e=be(t.shape,n),r=e[0],o=_(e[1]),i=t.as2D(-1,o),a=_t(t.dtype);return this.reduce(i,"prod",a).reshape(r)},n.prototype.unsortedSegmentSum=function(t,n,e){var r=0,o=Ee([r],t.rank),i=t;null!=o&&(i=t.transpose(o),r=Ie(1,t.rank)[0]);var a=function(t,n,e){for(var r=[],o=t.length,i=0;i<o;i++)i!==n?r.push(t[i]):r.push(e);return r}(i.shape,r,e),u=_([i.shape[r]]),s=i.as2D(-1,u),c=_t(t.dtype),l=this.segOpCompute(s,"unsortedSegmentSum",n,c,e).reshape(a);return null!=o&&(l=l.transpose(Re(o))),l},n.prototype.segOpCompute=function(t,n,e,r,o){var i=t.shape[0],a=t.shape[1],u=function(t,n){var e,r=!1;for(t<=30?(e=t,r=!0):e=nt(t,Math.floor(Math.sqrt(t)));!r;)e>n||e===t?r=!0:e=nt(t,e+1);return e}(a,o),s=new nu({windowSize:u,inSize:a,batchSize:i,numSegments:o},n),c=this.compileAndRun(s,[t,e],r);return c.shape[1]===o?c:(e=Ke(0,o).tile([a/u]),this.segOpCompute(c,n,e,r,o))},n.prototype.argMinMaxReduce=function(t,n,e){var r=[n];if(Ce("arg"+e.charAt(0).toUpperCase()+e.slice(1),r,t.rank),!h().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){var o=be(t.shape,r),i=o[0],a=_(o[1]),u=t.as2D(-1,a);return this.argReduce(u,e).reshape(i)}return this.argReducePacked(t,e)},n.prototype.argMin=function(t,n){return this.argMinMaxReduce(t,n,"min")},n.prototype.argMax=function(t,n){return this.argMinMaxReduce(t,n,"max")},n.prototype.cumsum=function(t,n,e,r){if(n!==t.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis="+(t.rank-1)+" but got axis="+n);var o=new Qi(t.shape,e,r);return this.compileAndRun(o,[t])},n.prototype.equal=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(equal(a, b));\n","bool");var e=new Ni("return float(a == b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.notEqual=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(notEqual(a, b));\n","bool");var e=new Ni("return float(a != b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.less=function(t,n){if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.less(t,n);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(lessThan(a, b));\n","bool");var e=new Ni("return float(a < b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.lessEqual=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(lessThanEqual(a, b));\n","bool");var e=new Ni("return float(a <= b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.greater=function(t,n){if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.greater(t,n);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(greaterThan(a, b));\n","bool");var e=new Ni("return float(a > b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.greaterEqual=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(greaterThanEqual(a, b));\n","bool");var e=new Ni("return float(a >= b);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.logicalNot=function(t){var n=new vu(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(n,[t])},n.prototype.logicalAnd=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");var e=new Ni("return float(a >= 1.0 && b >= 1.0);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.logicalOr=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");var e=new Ni("return float(a >= 1.0 || b >= 1.0);",t.shape,n.shape);return this.compileAndRun(e,[t,n],"bool")},n.prototype.select=function(t,n,e){var r=new eu(t.rank,n.shape,n.rank);return this.compileAndRun(r,[t,n,e],Nt(n.dtype,e.dtype))},n.prototype.where=function(t){de("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var n=t.dataSync();return ni(t.shape,n)},n.prototype.topk=function(t,n,e){return ti(t.dataSync(),t.shape,t.dtype,n)},n.prototype.min=function(t,n){Ce("min",n,t.rank);var e=be(t.shape,n),r=e[0],o=_(e[1]),i=t.as2D(-1,o);return this.reduce(i,"min",i.dtype).reshape(r)},n.prototype.minimum=function(t,n){if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.minimum(t,n);var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fi("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,n.shape):new Ni("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.mod=function(t,n){var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fi("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,n.shape):new Ni("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.max=function(t,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,n);Ce("max",n,t.rank);var e=be(t.shape,n),r=e[0],o=_(e[1]),i=t.as2D(-1,o);return this.reduce(i,"max",i.dtype).reshape(r)},n.prototype.maximum=function(t,n){if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.maximum(t,n);var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fi("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,n.shape):new Ni("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.all=function(t,n){Ce("all",n,t.rank);var e=be(t.shape,n),r=e[0],o=_(e[1]),i=t.as2D(-1,o);return this.reduce(i,"all",i.dtype).reshape(r)},n.prototype.any=function(t,n){Ce("any",n,t.rank);var e=be(t.shape,n),r=e[0],o=_(e[1]),i=t.as2D(-1,o);return this.reduce(i,"any",i.dtype).reshape(r)},n.prototype.realDivide=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n","float32",!0);var e=new Ni("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,n.shape);return this.compileAndRun(e,[t,n],"float32")},n.prototype.floorDiv=function(t,n){if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");var e=new Ni("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,n.shape);return this.compileAndRun(e,[t,n],"int32")},n.prototype.add=function(t,n){if("complex64"===t.dtype&&"complex64"===n.dtype)return this.complexSeparableBinaryOp(t,n,Si);if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.add(t,n);var e=Nt(t.dtype,n.dtype);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,Si,e);var r=new Ni(Si,t.shape,n.shape);return this.compileAndRun(r,[t,n],e)},n.prototype.packedUnaryOp=function(t,n,e){var r=new Du(t.shape,n);return this.compileAndRun(r,[t],e)},n.prototype.packedBinaryOp=function(t,n,e,r,o){void 0===o&&(o=!1);var i=new Fi(e,t.shape,n.shape,o);return this.compileAndRun(i,[t,n],r)},n.prototype.complexSeparableBinaryOp=function(t,n,e){var r=this,o=this.texData.get(t.dataId),i=this.texData.get(n.dataId),a=[[o.complexTensors.real,i.complexTensors.real],[o.complexTensors.imag,i.complexTensors.imag]].map((function(o){var i=o[0],a=o[1],u=r.makeComplexComponentTensorInfo(t,i),s=r.makeComplexComponentTensorInfo(n,a),c=new Ni(e,t.shape,n.shape);return r.compileAndRun(c,[u,s],Nt(i.dtype,a.dtype))})),u=a[0],s=a[1],c=this.complex(u,s);return u.dispose(),s.dispose(),c},n.prototype.makeComplexComponentTensorInfo=function(t,n){return{dataId:n.dataId,dtype:n.dtype,shape:t.shape}},n.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>h().get("WEBGL_MAX_TEXTURES_IN_SHADER")){var n=Math.floor(t.length/2),e=this.addN(t.slice(0,n)),r=this.addN(t.slice(n));return this.addN([e,r])}var o=t.map((function(t){return t.dtype})).reduce((function(t,n){return Nt(t,n)})),i=t.map((function(t){return t.shape})),a=h().getBool("WEBGL_PACK")?new ri(t[0].shape,i):new ei(t[0].shape,i);return this.compileAndRun(a,t,o)},n.prototype.subtract=function(t,n){if("complex64"===t.dtype&&"complex64"===n.dtype)return this.complexSeparableBinaryOp(t,n,Ai);if(this.shouldExecuteOnCPU([t,n]))return this.cpuBackend.subtract(t,n);var e=Nt(t.dtype,n.dtype);if(h().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,n,Ai,t.dtype);var r=new Ni(Ai,t.shape,n.shape);return this.compileAndRun(r,[t,n],e)},n.prototype.pow=function(t,n){var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fi("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,n.shape):new Ni("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,n.shape),r=Nt(t.dtype,n.dtype);return this.compileAndRun(e,[t,n],r)},n.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Cu,t.dtype);var n=new vu(t.shape,Cu);return this.compileAndRun(n,[t])},n.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Eu,t.dtype);var n=new vu(t.shape,Eu);return this.compileAndRun(n,[t])},n.prototype.sign=function(t){var n=new vu(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(n,[t])},n.prototype.isNaN=function(t){var n=new vu(t.shape,"return float(isnan(x));");return this.compileAndRun(n,[t],"bool")},n.prototype.isInf=function(t){var n=new vu(t.shape,"return float(isinf(x));");return this.compileAndRun(n,[t],"bool")},n.prototype.isFinite=function(t){var n=new vu(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(n,[t],"bool")},n.prototype.round=function(t){var n=new vu(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(n,[t])},n.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Ru,t.dtype);var n=new vu(t.shape,Ru);return this.compileAndRun(n,[t])},n.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Iu,t.dtype);var n=new vu(t.shape,Iu);return this.compileAndRun(n,[t])},n.prototype.softmax=function(t,n){var e=U([n],t.shape),r=this.max(t,e),o=we(r.shape,e),i=this.subtract(t,r.reshape(o)),a=this.exp(i),u=this.sum(a,e).reshape(o);return this.realDivide(a,u)},n.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);var n=new vu(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(n,[t])},n.prototype.log1p=function(t){var n=new vu(t.shape,"return log(1.0 + x);");return this.compileAndRun(n,[t])},n.prototype.sqrt=function(t){var n=new vu(t.shape,"return sqrt(x);");return this.compileAndRun(n,[t])},n.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var n=new vu(t.shape,"return inversesqrt(x);");return this.compileAndRun(n,[t])},n.prototype.reciprocal=function(t){var n=new vu(t.shape,"return 1.0 / x;");return this.compileAndRun(n,[t])},n.prototype.relu=function(t){var n;return n=h().getBool("WEBGL_PACK")?new Du(t.shape,Su):new vu(t.shape,yu),this.compileAndRun(n,[t])},n.prototype.relu6=function(t){var n;return n=h().getBool("WEBGL_PACK")?new Du(t.shape,Au):new vu(t.shape,xu),this.compileAndRun(n,[t])},n.prototype.prelu=function(t,n){var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fi(_i,t.shape,n.shape):new Ni(Di,t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.elu=function(t){if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Tu,t.dtype);var n=new vu(t.shape,bu);return this.compileAndRun(n,[t])},n.prototype.eluDer=function(t,n){var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fi("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,n.shape):new Ni("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.selu=function(t){var n=new vu(t.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(n,[t])},n.prototype.int=function(t){var n=new vu(t.shape,"return float(int(x));");return this.compileAndRun(n,[t],"int32")},n.prototype.clip=function(t,n,e){var r,o=(r=h().getBool("WEBGL_PACK_CLIP")?new Mi(t.shape):new Oi(t.shape)).getCustomSetupFunc(n,e);return this.compileAndRun(r,[t],null,o)},n.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(h().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,gu,t.dtype);var n=new vu(t.shape,gu);return this.compileAndRun(n,[t])},n.prototype.complexAbs=function(t){var n=this.texData.get(t.dataId),e=new Bi(t.shape),r=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)];return this.compileAndRun(e,r)},n.prototype.sigmoid=function(t){var n=new vu(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(n,[t])},n.prototype.softplus=function(t){var n=new vu(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(n,[t])},n.prototype.sin=function(t){var n=new vu(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(n,[t])},n.prototype.cos=function(t){var n=new vu(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(n,[t])},n.prototype.tan=function(t){var n=new vu(t.shape,"return tan(x);");return this.compileAndRun(n,[t])},n.prototype.asin=function(t){var n=new vu(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(n,[t])},n.prototype.acos=function(t){var n=new vu(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(n,[t])},n.prototype.atan=function(t){var n=new vu(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(n,[t])},n.prototype.atan2=function(t,n){var e=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fi("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,n.shape):new Ni("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,n.shape);return this.compileAndRun(e,[t,n])},n.prototype.sinh=function(t){var n=new vu(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(n,[t])},n.prototype.cosh=function(t){var n=new vu(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(n,[t])},n.prototype.tanh=function(t){var n=new vu(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(n,[t])},n.prototype.asinh=function(t){var n=new vu(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(n,[t])},n.prototype.acosh=function(t){var n=new vu(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(n,[t])},n.prototype.atanh=function(t){var n=new vu(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(n,[t])},n.prototype.erf=function(t){var n=new vu(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(n,[t])},n.prototype.step=function(t,n){var e=new vu(t.shape,function(t){return void 0===t&&(t=0),mu+"\n    return x > 0.0 ? 1.0 : float("+t+");\n  "}(n));return this.compileAndRun(e,[t])},n.prototype.conv2dByMatMul=function(t,n,e,r,o,i){var a=t.shape,u=this.texData.get(t.dataId),s=e.inChannels,c=a[0]*a[1]*a[2],l=e.outChannels,f="channelsLast"===e.dataFormat,d=(1===c||1===l)&&s>1e3,p=a[2]%2!=0&&!!u.isPacked;if(d||!h().getBool("WEBGL_LAZILY_UNPACK")||!h().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!p){var v=f?a[0]*a[1]*a[2]:a[0]*a[2]*a[3],m=this.reshape(t,[1,v,e.inChannels]),g=this.reshape(n,[1,e.inChannels,e.outChannels]);return this.reshape(this.fusedBatchMatMul({a:m,b:g,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),e.outShape)}var y=f?a[0]*a[1]*(a[2]+1):a[0]*a[2]*(a[3]+1),x={dataId:t.dataId,shape:[1,y,e.inChannels],dtype:t.dtype},b=u.shape;u.shape=u.shape.slice(),u.shape[u.shape.length-2]++,A(On(u.shape,x.shape),(function(){return"packed reshape "+u.shape+" to "+x.shape+" isn't free"}));var w=this.reshape(n,[1,e.inChannels,e.outChannels]),C=this.fusedBatchMatMul({a:x,b:w,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),E=this.texData.get(C.dataId);return A(E.isPacked,(function(){return"batchMatMul result is expected to be packed"})),u.shape=b,E.shape=e.outShape,Ut.makeTensorFromDataId(C.dataId,e.outShape,C.dtype)},n.prototype.conv2dWithIm2Row=function(t,n,e,r,o,i){var a=e.filterWidth,u=e.filterHeight,s=e.inChannels,c=e.outWidth,l=e.outHeight,f="channelsLast"===e.dataFormat,h=a*u*s,d=l*c,p=[h,d],v=t.squeeze([0]),m=n.reshape([1,h,-1]),g=new Na(p,v.shape,e),y=this.compileAndRun(g,[v]).reshape([1,p[0],p[1]]),x=null!=r,b=null!=i,w=o?Fu(o,!0):null,C=new Pa(y.shape,[1,d,e.outChannels],!0,!1,x,w,b),E=[y,m];r&&E.push(r),b&&E.push(i);var R=this.compileAndRun(C,E);return f?R.reshape([1,l,c,e.outChannels]):R.reshape([1,e.outChannels,l,c])},n.prototype.fusedConv2d=function(t){var n=t.input,e=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(n,e,r,o,i,a);if(h().getBool("WEBGL_CONV_IM2COL")&&1===n.shape[0])return this.conv2dWithIm2Row(n,e,r,o,i,a);var u=null!=o,s=null!=a,c=i?Fu(i,!1):null,l=new Ki(r,u,c,s),f=[n,e];return o&&f.push(o),a&&f.push(a),this.compileAndRun(l,f)},n.prototype.conv2d=function(t,n,e){if(1===e.filterHeight&&1===e.filterWidth&&1===e.dilationHeight&&1===e.dilationWidth&&1===e.strideHeight&&1===e.strideWidth&&("SAME"===e.padInfo.type||"VALID"===e.padInfo.type))return this.conv2dByMatMul(t,n,e);if(h().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,n,e);var r=new Ki(e);return this.compileAndRun(r,[t,n])},n.prototype.conv2dDerInput=function(t,n,e){var r=new zi(e);return this.compileAndRun(r,[t,n])},n.prototype.conv2dDerFilter=function(t,n,e){var r=new Ui(e);return this.compileAndRun(r,[t,n])},n.prototype.fusedDepthwiseConv2D=function(t){var n,e=t.input,r=t.filter,o=t.convInfo,i=t.bias,a=t.activation,u=t.preluActivationWeights,s=h().getBool("WEBGL_PACK_DEPTHWISECONV")&&o.strideWidth<=2&&o.outChannels/o.inChannels==1,c=a?Fu(a,s):null,l=[e,r],f=null!=i,d=null!=u;return f&&l.push(i),d&&l.push(u),s?(n=new Yi(o,f,c,d),this.compileAndRun(n,l)):(n=new Xi(o,f,c,d),this.compileAndRun(n,l))},n.prototype.depthwiseConv2D=function(t,n,e){var r;return h().getBool("WEBGL_PACK_DEPTHWISECONV")&&e.strideWidth<=2&&e.outChannels/e.inChannels==1?(r=new Yi(e),this.compileAndRun(r,[t,n])):(r=new Xi(e),this.compileAndRun(r,[t,n]))},n.prototype.depthwiseConv2DDerInput=function(t,n,e){var r=new qi(e);return this.compileAndRun(r,[t,n])},n.prototype.depthwiseConv2DDerFilter=function(t,n,e){var r=new Hi(e);return this.compileAndRun(r,[t,n])},n.prototype.conv3d=function(t,n,e){var r=new ji(e);return this.compileAndRun(r,[t,n])},n.prototype.conv3dDerInput=function(t,n,e){var r=new Gi(e);return this.compileAndRun(r,[t,n])},n.prototype.conv3dDerFilter=function(t,n,e){var r=new Vi(e);return this.compileAndRun(r,[t,n])},n.prototype.maxPool=function(t,n){var e=new Ga(n,"max",!1);return this.compileAndRun(e,[t])},n.prototype.avgPool=function(t,n){var e=new Ga(n,"avg",!1);return this.compileAndRun(e,[t],"float32")},n.prototype.maxPoolBackprop=function(t,n,e,r){var o=new Ga(r,"max",!0),i=this.compileAndRun(o,[n]),a=new Ma(r),u=this.compileAndRun(a,[t,i],n.dtype);return i.dispose(),u},n.prototype.avgPoolBackprop=function(t,n,e){var r=new Ci(e);return this.compileAndRun(r,[t],n.dtype)},n.prototype.cast=function(t,n){return Bo(t,n,this)},n.prototype.unstack=function(t,n){for(var e=t.shape[n],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==n&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),u=t.shape.slice();u[n]=1;var s=new Array(e);for(i=0;i<s.length;i++)a[n]=i,s[i]=this.slice(t,a,u).reshape(r);return s},n.prototype.avgPool3d=function(t,n){var e=new Ha(n,"avg",!1);return this.compileAndRun(e,[t],"float32")},n.prototype.avgPool3dBackprop=function(t,n,e){var r=new Ei(e);return this.compileAndRun(r,[t],n.dtype)},n.prototype.maxPool3d=function(t,n){var e=new Ha(n,"max",!1);return this.compileAndRun(e,[t],"float32")},n.prototype.maxPool3dBackprop=function(t,n,e,r){var o=new Ha(r,"max",!0),i=this.compileAndRun(o,[n]),a=new Ba(r),u=this.compileAndRun(a,[t,i],n.dtype);return i.dispose(),u},n.prototype.reshape=function(t,n){var e=this.texData.get(t.dataId);if(e.isPacked&&!On(t.shape,n)&&(null===e.texture||!On(e.shape,n))){var r=this.packedReshape(t,n);return Ut.makeTensorFromDataId(r.dataId,r.shape,r.dtype)}return Po(t,n)},n.prototype.resizeBilinear=function(t,n,e,r){var o=h().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Ya(t.shape,n,e,r):new Xa(t.shape,n,e,r);return this.compileAndRun(o,[t],"float32")},n.prototype.resizeBilinearBackprop=function(t,n,e){var r=new ja(t,n,e);return this.compileAndRun(r,[t])},n.prototype.resizeNearestNeighbor=function(t,n,e,r){var o=new Qa(t.shape,n,e,r);return this.compileAndRun(o,[t])},n.prototype.resizeNearestNeighborBackprop=function(t,n,e){var r=new $a(t,n,e);return this.compileAndRun(r,[t])},n.prototype.multinomial=function(t,n,e,r){var o=n?t:mo(t),i=o.shape[0],a=o.shape[1],u=new La(i,a,e),s=u.getCustomSetupFunc(r);return this.compileAndRun(u,[o],"int32",s)},n.prototype.oneHot=function(t,n,e,r){var o=new Wa(t.size,n,e,r);return this.compileAndRun(o,[t])},n.prototype.diag=function(t){var n=new ea(t.size);return this.compileAndRun(n,[t])},n.prototype.nonMaxSuppression=function(t,n,e,r,o){return de("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"),Ko(t.dataSync(),n.dataSync(),e,r,o)},n.prototype.cropAndResize=function(t,n,e,r,o,i){var a=new $i(t.shape,n.shape,r,o,i);return this.compileAndRun(a,[t,n,e],"float32")},n.prototype.depthToSpace=function(t,n,e){A(n>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+n}));var r=t.shape[0],o="NHWC"===e?t.shape[1]:t.shape[2],i="NHWC"===e?t.shape[2]:t.shape[3],a="NHWC"===e?t.shape[3]:t.shape[1],u=o*n,s=i*n,c=a/(n*n),l=new na("NHWC"===e?[r,u,s,c]:[r,c,u,s],n,e);return this.compileAndRun(l,[t])},n.prototype.split=function(t,n,e){return Jo(t,n,e)},n.prototype.scatterND=function(t,n,e){var r=Jr(0,t,e),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,u=r.strides,s=r.outputSize,c=[s/a,a],l=t.reshape([i,o]),f=n.reshape([i,a]);if(0===s)return Po(_e([]),e);var h=Oe(0),d=new tu(i,o,l.rank,f.rank,u,c);return this.compileAndRun(d,[f,l,h]).reshape(e)},n.prototype.sparseToDense=function(t,n,e,r){var o=Jr(0,t,e),i=o.sliceRank,a=o.numUpdates,u=o.strides,s=o.outputSize,c=new tu(a,i,t.rank,n.rank,u,[s,1],!1);return this.compileAndRun(c,[n,t,r]).reshape(e)},n.prototype.fft=function(t){return this.fftImpl(t,!1)},n.prototype.ifft=function(t){return this.fftImpl(t,!0)},n.prototype.fftImpl=function(t,n){var e=this.texData.get(t.dataId),r=new ua("return real * expR - imag * expI;",t.shape,n),o=new ua("return real * expI + imag * expR;",t.shape,n),i=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)],a=this.compileAndRun(r,i),u=this.compileAndRun(o,i),s=this.complex(a,u).as2D(t.shape[0],t.shape[1]);return a.dispose(),u.dispose(),s},n.prototype.gatherND=function(t,n){var e=n.shape,r=e[e.length-1],o=jr(t,n),i=o[0],a=o[1],u=o[2],s=o[3],c=n.reshape([a,r]),l=t.reshape([t.size/u,u]),f=new la(r,s,[a,u]);return this.compileAndRun(f,[l,c]).reshape(i)},n.prototype.fill=function(t,n,e){if("string"===(e=e||Z(n))){var r=G(e,_(t));return r.fill(n),Ut.makeTensor(r,t,e,this)}var o=new sa(t,n),i=o.getCustomSetupFunc(n);return this.compileAndRun(o,[],e,i)},n.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)},n.prototype.zerosLike=function(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)},n.prototype.linspace=function(t,n,e){return Lo(t,n,e)},n.prototype.makeTensorInfo=function(t,n){var e=this.write(null,t,n);return this.texData.get(e).usage=null,{dataId:e,shape:t,dtype:n}},n.prototype.makeOutput=function(t,n){var e=this.makeTensorInfo(t,n).dataId;return Ut.makeTensorFromDataId(e,t,n,this)},n.prototype.unpackTensor=function(t){var n=new Nu(t.shape);return this.runWebGLProgram(n,[t],t.dtype)},n.prototype.packTensor=function(t){var n=new Ua(t.shape);return this.runWebGLProgram(n,[t],t.dtype,null,!0)},n.prototype.packedReshape=function(t,n){var e=[Tn(t.shape)].concat(Dn(t.shape)),r={dtype:t.dtype,shape:e,dataId:t.dataId},o=[Tn(n)].concat(Dn(n)),i=new Ka(o,e),a=this.runWebGLProgram(i,[r],t.dtype,null,!0);return{dataId:a.dataId,shape:n,dtype:a.dtype}},n.prototype.decode=function(t){var n,e=this.texData.get(t),r=e.isPacked,o=e.shape,i=e.dtype,a=Nn(o);return n=r?new ta(a):new Zi(a),{dtype:i,shape:o,dataId:this.runWebGLProgram(n,[{shape:a,dtype:i,dataId:t}],i,null,!0).dataId}},n.prototype.runWebGLProgram=function(t,n,e,r,o){var i=this;void 0===o&&(o=!1);var a=this.makeTensorInfo(t.outputShape,e),u=this.texData.get(a.dataId);if(t.packedOutput&&(u.isPacked=!0),t.outPackingScheme===Gt.DENSE){var s=Qt(t.outputShape);u.texShape=s.map((function(t){return 2*t}))}if(null!=t.outTexUsage&&(u.usage=t.outTexUsage),0===_(a.shape))return u.values=V(a.dtype,0),a;var c=[],l=n.map((function(n){if("complex64"===n.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var e=i.texData.get(n.dataId);if(null==e.texture){if(!t.packedInputs&&_(n.shape)<=h().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:n.shape,texData:null,isUniform:!0,uniformValues:e.values};t.packedInputs&&(e.isPacked=!0,e.shape=n.shape)}else if(!!e.isPacked!=!!t.packedInputs)n=e.isPacked?i.unpackTensor(n):i.packTensor(n),c.push(n),e=i.texData.get(n.dataId);else if(e.isPacked&&!On(e.shape,n.shape)){var r=n,o=n.shape;n.shape=e.shape,n=i.packedReshape(n,o),c.push(n),e=i.texData.get(n.dataId),r.shape=o}return i.uploadToGPU(n.dataId),{shape:n.shape,texData:e,isUniform:!1}}));this.uploadToGPU(a.dataId);var f,d={shape:a.shape,texData:u,isUniform:!1},p=function(t,n,e){var r="";n.concat(e).forEach((function(t){var n=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,e=t.isUniform?"uniform":t.texData.texShape;r+=t.shape+"_"+e+"_"+n}));var o=t.userCode;return t.constructor.name+"_"+r+"_"+o}(t,l,d),v=this.getAndSaveBinary(p,(function(){return function(t,n,e,r){var o=n.userCode,i=e.map((function(t,e){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:n.variableNames[e],shapeInfo:r}})),a=i.map((function(t){return t.shapeInfo})),u={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},s=fi(i,u,o,n.packedInputs),c=t.createProgram(s),l=null,f=t.getUniformLocation(c,"NAN",!1);1===h().getNumber("WEBGL_VERSION")&&(l=t.getUniformLocation(c,"INFINITY",!1));for(var d={},p=0;p<n.variableNames.length;p++){var v=n.variableNames[p];d[v]=t.getUniformLocation(c,v,!1),d["offset"+v]=t.getUniformLocation(c,"offset"+v,!1)}return{program:n,source:s,webGLProgram:c,uniformLocations:d,inShapeInfos:a,outShapeInfo:u,infLoc:l,nanLoc:f}}(i.gpgpu,t,l,d)})),m=null!=this.activeTimers;if(m&&(f=this.startTimer()),function(t,n,e,r,o){Da(n.inShapeInfos,e),Da([n.outShapeInfo],[r]);var i=r.texData.texture,a=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(i,a[0],a[1]):t.setOutputMatrixTexture(i,a[0],a[1]),t.setProgram(n.webGLProgram),1===h().getNumber("WEBGL_VERSION")&&null!==n.infLoc&&t.gl.uniform1f(n.infLoc,1/0),null!==n.nanLoc&&t.gl.uniform1f(n.nanLoc,NaN),e.forEach((function(e,r){var o=n.program.variableNames[r],i=n.uniformLocations[o],a=n.uniformLocations["offset"+o];if(null!=i)if(e.isUniform)if(_(e.shape)<2)t.gl.uniform1f(i,e.uniformValues[0]);else{var u=e.uniformValues;u instanceof Float32Array||(u=new Float32Array(u)),t.gl.uniform1fv(i,u)}else null!=e.texData.slice&&null!=a&&t.gl.uniform1i(a,e.texData.slice.flatOffset),t.setInputMatrixTexture(e.texData.texture,i,r)})),null!=o&&o(t,n.webGLProgram),t.executeProgram()}(this.gpgpu,v,l,d,r),c.forEach((function(t){return i.disposeData(t.dataId)})),m&&(f=this.endTimer(f),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(f)})),!h().getBool("WEBGL_LAZILY_UNPACK")&&u.isPacked&&!1===o){var g=this.unpackTensor(a);return this.disposeData(a.dataId),g}return a},n.prototype.compileAndRun=function(t,n,e,r,o){void 0===o&&(o=!1),e=e||n[0].dtype;var i=this.runWebGLProgram(t,n,e,r,o);return Ut.makeTensorFromDataId(i.dataId,i.shape,i.dtype)},n.prototype.getAndSaveBinary=function(t,n){return t in this.binaryCache||(this.binaryCache[t]=n()),this.binaryCache[t]},n.prototype.getTextureManager=function(){return this.textureManager},n.prototype.dispose=function(){var t=this;this.disposed||(h().getBool("IS_TEST")||Object.keys(this.binaryCache).forEach((function(n){t.gpgpu.deleteProgram(t.binaryCache[n].webGLProgram),delete t.binaryCache[n]})),this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)},n.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=te((function(){if(!h().get("WEBGL_RENDER_FLOAT32_ENABLED")){var n=h().getBool("DEBUG");h().set("DEBUG",!1);var e=t.abs(Oe(1e-8)).dataSync()[0];if(h().set("DEBUG",n),e>0)return 32}return 16}))),this.floatPrecisionValue},n.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},n.prototype.uploadToGPU=function(t){var n,e=this.texData.get(t),r=e.shape,o=e.dtype,i=e.values,a=e.texture,u=e.usage,s=e.isPacked;if(null==a){var c,l=null!=this.activeTimers;l&&(c=ut());var f=e.texShape;if(null==f&&(f=_n(r,s),e.texShape=f),null!=i){var h=Nn(r),d=void 0,p=f[1],v=f[0],m=i instanceof Uint8Array;s?(p=(n=Jt(f[0],f[1]))[0],v=n[1],d=new aa(h,[v,p],m)):d=new ia(h,[v,p],m);var g=this.makeTensorInfo([v,p],o);this.texData.get(g.dataId).usage=m?Ht.PIXELS:Ht.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),p,v,i);var y=this.runWebGLProgram(d,[g],o,null,!0),x=this.texData.get(y.dataId);e.texture=x.texture,e.texShape=x.texShape,e.isPacked=x.isPacked,e.usage=x.usage,this.disposeData(g.dataId),this.texData.delete(y.dataId),e.values=null,l&&(this.uploadWaitMs+=ut()-c)}else{var b=this.acquireTexture(f,u,o,s);e.texture=b}}},n.prototype.convertAndCacheOnCPU=function(t,n){var e=this.texData.get(t),r=e.dtype;return this.releaseGPUData(t),null!=n&&(e.values=function(t,n){if("float32"===n||"complex64"===n)return t;if("int32"===n||"bool"===n){for(var e="int32"===n?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<e.length;++r)e[r]=Math.round(t[r]);return e}throw new Error("Unknown dtype "+n)}(n,r)),e.values},n.prototype.acquireTexture=function(t,n,e,r){if(this.numBytesInGPU+=this.computeBytes(t,e),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: "+o+" MB, most likely due to a memory leak")}return this.textureManager.acquireTexture(t,n,r)},n.prototype.computeBytes=function(t,n){return t[0]*t[1]*X(n)},n}(xo);zt()&&Ut.registerBackend("webgl",(function(){return new Ou}),2);var Mu=Ae({square_:function(t){var n=me(t,"x","square"),e=[n];return Ut.runKernelFunc((function(t,e){return e([n]),t.square(n)}),{x:n},null,"Square",{},e,[])}}),Bu="SquaredDifference",Pu=Ae({squaredDifference_:function(t,n){var e,r=me(t,"a","squaredDifference"),o=me(n,"b","squaredDifference");e=Ft(r,o),r=e[0],o=e[1],Eo(r.shape,o.shape);var i={a:r,b:o},a=[r,o];return Ut.runKernelFunc((function(t,n){var e=t.squaredDifference(r,o);return n([r,o]),e}),i,(function(t,n){var e=n[0],r=n[1],o=Oe(2);return{a:function(){return t.mul(e.sub(r).mul(o))},b:function(){return t.mul(r.sub(e).mul(o))}}}),Bu,{},a,[])}}),Lu=Ae({abs_:function(t){var n=me(t,"x","abs");return"complex64"===n.dtype?Ut.runKernelFunc((function(t){return t.complexAbs(n)}),{$x:n}):Ut.runKernelFunc((function(t,e){var r=t.abs(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return t.mul(e.toFloat().step(-1))}}}),"Abs")}}),Wu=Ae({acos_:function(t){var n=me(t,"x","acos");return Ut.runKernelFunc((function(t,e){var r=t.acos(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.divStrict(Oe(1).sub(e.toFloat().square()).sqrt()).neg()}}}))}}),Uu=Ae({acosh_:function(t){var n=me(t,"x","acosh");return Ut.runKernelFunc((function(t,e){var r=t.acosh(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.divStrict(e.toFloat().square().sub(1).sqrt())}}}))}}),zu=Ae({asin_:function(t){var n=me(t,"x","asin");return Ut.runKernelFunc((function(t,e){var r=t.asin(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.divStrict(Oe(1).sub(e.toFloat().square()).sqrt())}}}))}}),Vu=Ae({asinh_:function(t){var n=me(t,"x","asinh");return Ut.runKernelFunc((function(t,e){var r=t.asinh(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.divStrict(Oe(1).add(e.toFloat().square()).sqrt())}}}))}}),Gu=Ae({atan_:function(t){var n=me(t,"x","atan");return Ut.runKernelFunc((function(t,e){var r=t.atan(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(e.toFloat().square().add(1))}}}))}}),Hu=Ae({atanh_:function(t){var n=me(t,"x","atanh");return Ut.runKernelFunc((function(t,e){var r=t.atanh(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(Oe(1).sub(e.toFloat().square()))}}}))}}),qu=Ae({ceil_:function(t){var n=me(t,"x","ceil");return Ut.runKernelFunc((function(t){return t.ceil(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),Ku=Ae({clipByValue_:function(t,n,e){var r=me(t,"x","clipByValue");A(n<=e,(function(){return"Error in clip: min ("+n+") must be less than or equal to max ("+e+")."}));var o=[r],i={min:n,max:e};return Ut.runKernelFunc((function(t,o){var i=t.clip(r,n,e);return o([r]),i}),{x:r},(function(t,r){var o=r[0];return{x:function(){return t.where(o.greaterEqual(n).logicalAnd(o.lessEqual(e)),Xe(t))}}}),"ClipByValue",i,o)}}),ju=Ae({cos_:function(t){var n=me(t,"x","cos"),e=[n];return Ut.runKernelFunc((function(t,e){var r=t.cos(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return e.toFloat().sin().neg().mul(t)}}}),"Cos",{},e)}}),Xu=Ae({cosh_:function(t){var n=me(t,"x","cosh");return Ut.runKernelFunc((function(t,e){var r=t.cosh(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return e.toFloat().sinh().mulStrict(t)}}}))}}),Yu=Ae({erf_:function(t){var n=me(t,"x","erf");return A("int32"===n.dtype||"float32"===n.dtype,(function(){return"Input dtype must be `int32` or `float32`."})),"int32"===n.dtype&&(n=n.toFloat()),Ut.runKernelFunc((function(t,e){var r=t.erf(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.mul(e.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),$u=Ae({exp_:function(t){var n=me(t,"x","exp");return Ut.runKernelFunc((function(t,e){var r=t.exp(n);return e([r]),r}),{x:n},(function(t,n){return{x:function(){return t.mulStrict(n[0])}}}),"Exp",{},[],[!0])}}),Qu=Ae({expm1_:function(t){var n=me(t,"x","expm1");return Ut.runKernelFunc((function(t,e){var r=t.expm1(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.mul(e.exp())}}}))}}),Ju=Ae({floor_:function(t){var n=me(t,"x","floor");return Ut.runKernelFunc((function(t){return t.floor(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),Zu=Ae({log_:function(t){var n=me(t,"x","log"),e=[n];return Ut.runKernelFunc((function(t,e){var r=t.log(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return t.div(e.toFloat())}}}),"Log",{},e)}}),ts=Ae({log1p_:function(t){var n=me(t,"x","log1p");return Ut.runKernelFunc((function(t,e){var r=t.log1p(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(e.add(1))}}}))}}),ns=Ae({logSigmoid_:function(t){var n=me(t,"x","logSigmoid");return Ut.runKernelFunc((function(t,e){var r=t.softplus(n.neg()).neg();return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.mul(e.neg().sigmoid())}}}))}}),es=Ae({neg_:function(t){var n=me(t,"x","neg"),e=[n];return Ut.runKernelFunc((function(t){return t.neg(n)}),{x:n},(function(t){return{x:function(){return t.neg()}}}),"Neg",{},e)}}),rs=Ae({reciprocal_:function(t){var n=me(t,"x","reciprocal");return Ut.runKernelFunc((function(t,e){var r=t.reciprocal(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(e.square().neg())}}}))}}),os=Ae({round_:function(t){var n=me(t,"x","round");return Ut.runKernelFunc((function(t){return t.round(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),is=Ae({rsqrt_:function(t){var n=me(t,"x","rsqrt"),e=[n];return Ut.runKernelFunc((function(t,e){var r=t.rsqrt(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return t.div(e.pow(1.5).mul(2)).neg()}}}),"Rsqrt",{},e)}}),as=Ae({sigmoid_:function(t){var n=me(t,"x","sigmoid");return Ut.runKernelFunc((function(t,e){var r=t.sigmoid(n);return e([r]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return t.mul(e.mul(Oe(1).sub(e)))}}}),"Sigmoid")}}),us=Ae({sign_:function(t){var n=me(t,"x","sign");return Ut.runKernelFunc((function(t){return t.sign(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),ss=Ae({isNaN_:function(t){var n=me(t,"x","isNaN");return Ut.runKernelFunc((function(t){return t.isNaN(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),cs=Ae({isInf_:function(t){var n=me(t,"x","isInf");return Ut.runKernelFunc((function(t){return t.isInf(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),ls=Ae({isFinite_:function(t){var n=me(t,"x","isFinite");return Ut.runKernelFunc((function(t){return t.isFinite(n)}),{$x:n},(function(t){return{$x:function(){return Xe(t)}}}))}}),fs=Ae({sin_:function(t){var n=me(t,"x","sin"),e=[n];return Ut.runKernelFunc((function(t,e){var r=t.sin(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return e.toFloat().cos().mul(t)}}}),"Sin",{},e)}}),hs=Ae({sinh_:function(t){var n=me(t,"x","sinh");return Ut.runKernelFunc((function(t,e){var r=t.sinh(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return e.toFloat().cosh().mulStrict(t)}}}))}}),ds=Ae({softplus_:function(t){var n=me(t,"x","softplus");return Ut.runKernelFunc((function(t,e){var r=t.softplus(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.mul(e.sigmoid())}}}))}}),ps=Ae({sqrt_:function(t){var n=me(t,"x","sqrt");return Ut.runKernelFunc((function(t,e){var r=t.sqrt(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(e.toFloat().sqrt().mul(2))}}}))}}),vs=Ae({step_:function(t,n){void 0===n&&(n=0);var e=me(t,"x","step");return Ut.runKernelFunc((function(t){return t.step(e,n)}),{$x:e},(function(t){return{$x:function(){return Xe(t)}}}))}}),ms=Ae({tan_:function(t){var n=me(t,"x","tan");return Ut.runKernelFunc((function(t,e){var r=t.tan(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return t.div(e.cos().square())}}}))}}),gs=Ae({tanh_:function(t){var n=me(t,"x","tanh");return Ut.runKernelFunc((function(t,e){var r=t.tanh(n);return e([r]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return Oe(1).sub(e.square()).mulStrict(t)}}}),"Tanh",{},null,[!0])}});function ys(t,n,e,r,o,i){var a,u,s=me(t,"x","batchNorm"),c=me(n,"mean","batchNorm"),l=me(e,"variance","batchNorm");return null!=o&&(a=me(o,"scale","batchNorm")),null!=r&&(u=me(r,"offset","batchNorm")),A(2===s.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+s.rank+"."})),A(2===c.rank||1===c.rank,(function(){return"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank "+c.rank+"."})),A(2===l.rank||1===l.rank,(function(){return"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank "+l.rank+"."})),null!=a&&A(2===a.rank||1===a.rank,(function(){return"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank "+a.rank+"."})),null!=u&&A(2===u.rank||1===u.rank,(function(){return"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank "+u.rank+"."})),ws(s,c,l,u,a,i)}function xs(t,n,e,r,o,i){var a,u,s=me(t,"x","batchNorm"),c=me(n,"mean","batchNorm"),l=me(e,"variance","batchNorm");return null!=o&&(a=me(o,"scale","batchNorm")),null!=r&&(u=me(r,"offset","batchNorm")),A(3===s.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+s.rank+"."})),A(3===c.rank||1===c.rank,(function(){return"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank "+c.rank+"."})),A(3===l.rank||1===l.rank,(function(){return"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank "+l.rank+"."})),null!=a&&A(3===a.rank||1===a.rank,(function(){return"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank "+a.rank+"."})),null!=u&&A(3===u.rank||1===u.rank,(function(){return"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank "+u.rank+"."})),ws(s,c,l,u,a,i)}function bs(t,n,e,r,o,i){var a,u,s=me(t,"x","batchNorm"),c=me(n,"mean","batchNorm"),l=me(e,"variance","batchNorm");return null!=o&&(a=me(o,"scale","batchNorm")),null!=r&&(u=me(r,"offset","batchNorm")),A(4===s.rank,(function(){return"Error in batchNorm4D: x must be rank 4 but got rank "+s.rank+"."})),A(4===c.rank||1===c.rank,(function(){return"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank "+c.rank+"."})),A(4===l.rank||1===l.rank,(function(){return"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank "+l.rank+"."})),null!=a&&A(4===a.rank||1===a.rank,(function(){return"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank "+a.rank+"."})),null!=u&&A(4===u.rank||1===u.rank,(function(){return"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank "+u.rank+"."})),ws(s,c,l,u,a,i)}function ws(t,n,e,r,o,i){null==i&&(i=.001);var a,u,s,c=me(t,"x","batchNorm"),l=me(n,"mean","batchNorm"),f=me(e,"variance","batchNorm");null!=o&&(a=me(o,"scale","batchNorm")),null!=r&&(u=me(r,"offset","batchNorm")),A(l.rank===f.rank,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),A(null==u||l.rank===u.rank,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),A(null==a||l.rank===a.rank,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."})),s=0===c.rank||1===c.rank?c.as4D(1,1,1,c.size):2===c.rank?c.as4D(1,1,c.shape[0],c.shape[1]):3===c.rank?c.as4D(1,c.shape[0],c.shape[1],c.shape[2]):c;var h=[c,l,f,a];return Ut.runKernelFunc((function(t,n){var e=t.batchNormalization(s,Cs(l),Cs(f),i,Cs(a),Cs(u));return n([c,l,f,a]),e}),{x:c,mean:l,variance:f,scale:a,offset:u},(function(t,n){var e=n,r=e[0],o=e[1],a=e[2],u=e[3],c=null==u?Oe(1):u,l=Co(o.shape,s.shape),f=[];if(1===o.rank){for(var h=0;h<s.shape.length-1;++h)f.push(s.shape[h]);f.push(1)}var d=r.sub(o),p=t.mul(c),v=is(a.add(Oe(i))),m=v.mul(v).mul(v).mul(Oe(-.5));return{x:function(){return 1===o.rank?t.mul(Lr(v.as4D(1,1,1,o.shape[0]),f)).mul(c).reshape(r.shape):t.mul(v).mul(c).reshape(r.shape)},mean:function(){var t=v.mul(Oe(-1)).mul(p);return 1===o.rank&&(t=t.sum(l)),t.reshape(o.shape)},variance:function(){var t=m.mul(d).mul(p);return 1===o.rank&&(t=t.sum(l)),t.reshape(o.shape)},scale:function(){var n=d.mul(v),e=t.mul(n);return 1===o.rank&&(e=e.sum(l)),e.reshape(o.shape)},offset:function(){var n=t;return 1===o.rank&&(n=n.sum(l)),n.reshape(o.shape)}}}),"BatchNormalization",{varianceEpsilon:i},h).reshape(c.shape)}function Cs(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function Es(){Yn("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon")}var Rs=Ae({batchNormalization2d_:function(t,n,e,r,o,i){return void 0===r&&(r=.001),Es(),ys(t,n,e,i,o,r)}}),Is=Ae({batchNormalization3d_:function(t,n,e,r,o,i){return void 0===r&&(r=.001),Es(),xs(t,n,e,i,o,r)}}),ks=Ae({batchNormalization4d_:function(t,n,e,r,o,i){return void 0===r&&(r=.001),Es(),bs(t,n,e,i,o,r)}}),Ss=Ae({batchNormalization_:function(t,n,e,r,o,i){return void 0===r&&(r=.001),Es(),ws(t,n,e,i,o,r)}}),As=Ae({batchNorm_:ws}),Ts=Ae({batchNorm2d_:ys}),Ds=Ae({batchNorm3d_:xs}),Ns=Ae({batchNorm4d_:bs}),_s=Ae({logicalAnd_:function(t,n){var e=me(t,"a","logicalAnd","bool"),r=me(n,"b","logicalAnd","bool");return Eo(e.shape,r.shape),Ut.runKernelFunc((function(t){return t.logicalAnd(e,r)}),{a:e,b:r},null,"LogicalAnd")}}),Fs=Ae({logicalNot_:function(t){var n=me(t,"x","logicalNot","bool");return Ut.runKernelFunc((function(t){return t.logicalNot(n)}),{$x:n})}}),Os=Ae({logicalOr_:function(t,n){var e=me(t,"a","logicalOr","bool"),r=me(n,"b","logicalOr","bool");return Eo(e.shape,r.shape),Ut.runKernelFunc((function(t){return t.logicalOr(e,r)}),{$a:e,$b:r})}}),Ms=Ae({logicalXor_:function(t,n){var e=me(t,"a","logicalXor","bool"),r=me(n,"b","logicalXor","bool");return Eo(e.shape,r.shape),Os(t,n).logicalAnd(_s(t,n).logicalNot())}}),Bs=Ae({where_:function(t,n,e){var r=me(n,"a","where"),o=me(e,"b","where"),i=me(t,"condition","where","bool");return T(r.shape,o.shape,"Error in where: "),1===i.rank?A(i.shape[0]===r.shape[0],(function(){return"The first dimension of `a` must match the size of `condition`."})):T(i.shape,o.shape,"Error in where: "),Ut.runKernelFunc((function(t,n){var e=t.select(i,r,o);return n([i]),e}),{$condition:i,$a:r,$b:o},(function(t,n){var e=n[0];return{$condition:function(){return Xe(e).toFloat()},$a:function(){return t.mul(e.cast(t.dtype))},$b:function(){return t.mul(e.logicalNot().cast(t.dtype))}}}))}}),Ps=function(t){return s(this,void 0,void 0,(function(){var n,e,r;return c(this,(function(o){switch(o.label){case 0:return[4,(n=me(t,"condition","whereAsync","bool")).data()];case 1:return e=o.sent(),r=ni(n.shape,e),t!==n&&n.dispose(),[2,r]}}))}))},Ls=Ae({add_:function(t,n){var e,r=me(t,"a","add"),o=me(n,"b","add");e=Ft(r,o),r=e[0],o=e[1];var i=Eo(r.shape,o.shape);return Ut.runKernelFunc((function(t){return t.add(r,o)}),{a:r,b:o},(function(t){return{a:function(){var n=t,e=Co(r.shape,i);return e.length>0&&(n=n.sum(e)),n.reshape(r.shape)},b:function(){var n=t,e=Co(o.shape,i);return e.length>0&&(n=n.sum(e)),n.reshape(o.shape)}}}),"Add")}}),Ws=Ae({addN_:function(t){A(Array.isArray(t),(function(){return"The argument passed to tf.addN() must be a list of tensors"})),A(t.length>=1,(function(){return"Must pass at least one tensor to tf.addN(), but got "+t.length}));var n=t.map((function(t,n){return me(t,"tensors"+n,"addN")})),e=n[0];n.forEach((function(t){if(t.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),n.forEach((function(t){if(!F(t.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));var r=n;return Ut.runKernelFunc((function(t){return t.addN(n)}),r,(function(t){var e={};return n.forEach((function(n,r){e[r]=function(){return t.clone()}})),e}),"AddN")}}),Us=Ae({addStrict_:function(t,n){var e=me(t,"a","addStrict"),r=me(n,"b","addStrict");return T(e.shape,r.shape,"Error in addStrict: "),e.add(r)}}),zs=Ae({atan2_:function(t,n){var e,r=me(t,"a","atan2"),o=me(n,"b","atan2");e=Ft(r,o),r=e[0],o=e[1];var i=Eo(r.shape,o.shape);return Ut.runKernelFunc((function(t,n){var e=t.atan2(r,o);return n([r,o]),e}),{$a:r,$b:o},(function(t,n){var e=n[0],r=n[1];return{$a:function(){var n=Ls(e.square(),r.square()),o=t.mul(r.div(n)),a=Co(e.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(e.shape)},$b:function(){var n=Ls(e.square(),r.square()),o=es(t.mul(e.div(n))),a=Co(r.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(r.shape)}}}))}}),Vs=Ae({div_:function(t,n){var e,r=me(t,"a","div"),o=me(n,"b","div");if(e=Ft(r,o),r=e[0],o=e[1],"int32"===r.dtype&&"int32"===o.dtype)return qs(r,o);var i=Eo(r.shape,o.shape);return Ut.runKernelFunc((function(t,n){var e=t.realDivide(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){var n=t.div(r.toFloat()),o=Co(e.shape,i);return o.length>0?n.sum(o).reshape(e.shape):n},b:function(){var n=t.mul(e.toFloat()),o=Co(r.shape,i);o.length>0&&(n=n.sum(o).reshape(r.shape));var a=r.square();return n.div(a.toFloat()).neg()}}}),"Div")}}),Gs=Ae({divNoNan_:function(t,n){var e,r=me(t,"a","div"),o=me(n,"b","div");r=(e=Ft(r,o))[0],o=e[1];var i=Vs(r,o),a=Xe(i),u=o.equal(a);return Bs(u,a,i)}}),Hs=Ae({divStrict_:function(t,n){var e=me(t,"a","div"),r=me(n,"b","div");return T(e.shape,r.shape,"Error in divideStrict: "),e.div(r)}}),qs=Ae({floorDiv_:function(t,n){var e,r=me(t,"a","floorDiv"),o=me(n,"b","floorDiv");e=Ft(r,o),r=e[0],o=e[1];var i=Eo(r.shape,o.shape);return Ut.runKernelFunc((function(t,n){var e=t.floorDiv(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){var n=t.div(r.toFloat()),o=Co(e.shape,i);return o.length>0?n.sum(o).reshape(e.shape):n},b:function(){var n=t.mul(e.toFloat()),o=Co(r.shape,i);o.length>0&&(n=n.sum(o).reshape(r.shape));var a=r.square();return n.div(a.toFloat()).neg()}}}),"FloorDiv")}}),Ks=Ae({maximum_:function(t,n){var e,r=me(t,"a","maximum"),o=me(n,"b","maximum");return e=Ft(r,o),r=e[0],o=e[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),Eo(r.shape,o.shape),Ut.runKernelFunc((function(t,n){var e=t.maximum(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){return t.mul(e.greaterEqual(r).toFloat())},b:function(){return t.mul(e.less(r).toFloat())}}}),"Maximum")}}),js=Ae({maximumStrict_:function(t,n){var e=me(t,"a","maximumStrict"),r=me(n,"b","maximumStrict");return T(e.shape,r.shape,"Error in maximumStrict: "),e.maximum(r)}}),Xs=Ae({minimum_:function(t,n){var e,r=me(t,"a","minimum"),o=me(n,"b","minimum");return e=Ft(r,o),r=e[0],o=e[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),Eo(r.shape,o.shape),Ut.runKernelFunc((function(t,n){var e=t.minimum(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){return t.mul(e.lessEqual(r).toFloat())},b:function(){return t.mul(e.greater(r).toFloat())}}}),"Minimum")}}),Ys=Ae({minimumStrict_:function(t,n){var e=me(t,"a","minimumStrict"),r=me(n,"b","minimumStrict");return T(e.shape,r.shape,"Error in minimumStrict: "),e.minimum(r)}}),$s=Ae({mod_:function(t,n){var e,r=me(t,"a","mod"),o=me(n,"b","mod");e=Ft(r,o),r=e[0],o=e[1];var i=Eo(r.shape,o.shape);return Ut.runKernelFunc((function(t,n){var e=t.mod(r,o);return n([r,o]),e}),{$a:r,$b:o},(function(t,n){var e=n[0],r=n[1];return{$a:function(){var n=Co(e.shape,i);return n.length>0?t.sum(n).reshape(e.shape):t},$b:function(){var n=t.mul(e.div(r).floor().neg()),o=Co(r.shape,i);return o.length>0?n.sum(o).reshape(r.shape):n}}}))}}),Qs=Ae({modStrict_:function(t,n){var e=me(t,"a","modStrict"),r=me(n,"b","modStrict");return T(e.shape,r.shape,"Error in modStrict: "),e.mod(r)}}),Js=Ae({mul_:function(t,n){var e,r=me(t,"a","mul"),o=me(n,"b","mul");e=Ft(r,o),r=e[0],o=e[1];var i=Eo(r.shape,o.shape);return Ut.runKernelFunc((function(t,n){var e=t.multiply(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){var n=t.mul(r.toFloat()),o=Co(e.shape,i);return o.length>0?n.sum(o).reshape(e.shape):n},b:function(){var n=t.mul(e.toFloat()),o=Co(r.shape,i);return o.length>0?n.sum(o).reshape(r.shape):n}}}),"Mul")}}),Zs=Ae({mulStrict_:function(t,n){var e=me(t,"a","mul"),r=me(n,"b","mul");return T(e.shape,r.shape,"Error in multiplyStrict: "),e.mul(r)}}),tc=Ae({pow_:function(t,n){var e,r=me(t,"base","pow"),o=me(n,"exp","pow");e=Ft(r,o),r=e[0],o=e[1];var i=Eo(r.shape,o.shape),a=[r,o];return Ut.runKernelFunc((function(t,n){var e=t.pow(r,o);return n([r,o,e]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1],o=n[2];return{a:function(){var n=r.toFloat(),o=t.mul(n.mul(e.pow(n.sub(Oe(1))))),a=Co(e.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(e.shape)},b:function(){var n=e.greater(0),a=e.log().where(n,Xe(e)),u=t.mul(o.mul(a)),s=Co(r.shape,i);return s.length>0&&(u=u.sum(s)),u.reshape(r.shape)}}}),"Pow",{},a,[!0])}}),nc=Ae({powStrict_:function(t,n){return T(t.shape,n.shape,"Error in powStrict: "),t.pow(n)}}),ec=Ae({squaredDifferenceStrict_:function(t,n){var e=me(t,"a","squaredDifferenceStrict"),r=me(n,"b","squaredDifferenceStrict");return T(e.shape,r.shape,"Error in squaredDifferenceStrict: "),e.squaredDifference(r)}}),rc=Ae({sub_:function(t,n){var e,r=me(t,"a","sub"),o=me(n,"b","sub");e=Ft(r,o),r=e[0],o=e[1];var i=Eo(r.shape,o.shape);return Ut.runKernelFunc((function(t){return t.subtract(r,o)}),{a:r,b:o},(function(t){return{a:function(){var n=t,e=Co(r.shape,i);return e.length>0&&(n=n.sum(e)),n.reshape(r.shape)},b:function(){var n=t,e=Co(o.shape,i);return e.length>0&&(n=n.sum(e)),n.neg().reshape(o.shape)}}}),"Sub")}}),oc=Ae({subStrict_:function(t,n){var e=me(t,"a","subStrict"),r=me(n,"b","subStrict");return T(e.shape,r.shape,"Error in subStrict: "),e.sub(r)}}),ic=Ae({equal_:function(t,n){var e,r=me(t,"a","equal"),o=me(n,"b","equal");return e=Ft(r,o),r=e[0],o=e[1],Eo(r.shape,o.shape),Ut.runKernelFunc((function(t){return t.equal(r,o)}),{$a:r,$b:o})}}),ac=Ae({equalStrict_:function(t,n){var e=me(t,"a","equalStrict"),r=me(n,"b","equalStrict");return T(e.shape,r.shape,"Error in equalStrict: "),e.equal(r)}}),uc=Ae({greater_:function(t,n){var e,r=me(t,"a","greater"),o=me(n,"b","greater");return e=Ft(r,o),r=e[0],o=e[1],Eo(r.shape,o.shape),Ut.runKernelFunc((function(t){return t.greater(r,o)}),{a:r,b:o},null,"Greater")}}),sc=Ae({greaterEqual_:function(t,n){var e,r=me(t,"a","greaterEqual"),o=me(n,"b","greaterEqual");return e=Ft(r,o),r=e[0],o=e[1],Eo(r.shape,o.shape),Ut.runKernelFunc((function(t,n){var e=t.greaterEqual(r,o);return n([r,o]),e}),{a:r,b:o},(function(t,n){var e=n[0],r=n[1];return{a:function(){return Xe(e)},b:function(){return Xe(r)}}}),"GreaterEqual")}}),cc=Ae({greaterEqualStrict_:function(t,n){var e=me(t,"a","greaterEqualStrict"),r=me(n,"b","greaterEqualStrict");return T(e.shape,r.shape,"Error in greaterEqualStrict: "),e.greaterEqual(r)}}),lc=Ae({greaterStrict_:function(t,n){var e=me(t,"a","greaterStrict"),r=me(n,"b","greaterStrict");return T(e.shape,r.shape,"Error in greaterStrict: "),e.greater(r)}}),fc=Ae({less_:function(t,n){var e,r=me(t,"a","less"),o=me(n,"b","less");return e=Ft(r,o),r=e[0],o=e[1],Eo(r.shape,o.shape),Ut.runKernelFunc((function(t){return t.less(r,o)}),{a:r,b:o},null,"Less")}}),hc=Ae({lessEqual_:function(t,n){var e,r=me(t,"a","lessEqual"),o=me(n,"b","lessEqual");return e=Ft(r,o),r=e[0],o=e[1],Eo(r.shape,o.shape),Ut.runKernelFunc((function(t,n){var e=t.lessEqual(r,o);return n([r,o]),e}),{a:r,b:o},null,"LessEqual")}}),dc=Ae({lessEqualStrict_:function(t,n){var e=me(t,"a","lessEqualStrict"),r=me(n,"b","lessEqualStrict");return T(e.shape,r.shape,"Error in lessEqualStrict: "),e.lessEqual(r)}}),pc=Ae({lessStrict_:function(t,n){var e=me(t,"a","lessStrict"),r=me(n,"b","lessStrict");return T(e.shape,r.shape,"Error in lessStrict: "),e.less(r)}}),vc=Ae({notEqual_:function(t,n){var e,r=me(t,"a","notEqual"),o=me(n,"b","notEqual");return e=Ft(r,o),r=e[0],o=e[1],Eo(r.shape,o.shape),Ut.runKernelFunc((function(t){return t.notEqual(r,o)}),{a:r,b:o},null,"NotEqual")}}),mc=Ae({notEqualStrict_:function(t,n){var e=me(t,"a","notEqualStrict"),r=me(n,"b","notEqualStrict");return T(e.shape,r.shape,"Error in notEqualStrict: "),e.notEqual(r)}});function gc(t,n){for(var e=[],r=t;r<n;++r)e.push(r);return e}function yc(t){for(var n=[],e=0;e<t.length;++e)for(var r=0;r<t[e].length;++r)n.push(t[e][r]);return n}var xc=Ae({gather_:function(t,n,e){void 0===e&&(e=0);var r=me(t,"x","gather"),o=me(n,"indices","gather","int32");e=U(e,r.shape)[0];var i=function(t,n,e){for(var r=t.shape[e],o=[],i=1,a=1,u=0;u<e;u++)o.push(t.shape[u]),i*=t.shape[u];for(u=0;u<n.rank;u++)o.push(n.shape[u]);for(u=e+1;u<t.rank;u++)o.push(t.shape[u]),a*=t.shape[u];return{batchSize:i,sliceSize:a,dimSize:r,outputShape:o}}(r,o,e);return Ut.runKernelFunc((function(t,n){var i=t.gather(r,o.flatten(),e);return n([o]),i}),{x:r,indices:o},(function(t,n){var o=n[0];return{x:function(){var n=r.shape,i=o.size,a=n.slice(0,e),u=a.length,s=n.slice(e,n.length).slice(1),c=s.length,l=gc(0,u),f=gc(u+1,u+1+c),h=yc([a,[i],s]),d=t.reshape(h),p=o.reshape([i]),v=yc([[u],l,f]),m=d.transpose(v),g=bc(m,p,r.shape[e]),y=Re(v);return g.transpose(y)},indices:function(){return o}}}),"Gather",{axis:e}).reshape(i.outputShape)}}),bc=Ae({unsortedSegmentSum_:function(t,n,e){var r=me(t,"x","unsortedSegmentSum"),o=me(n,"segmentIds","unsortedSegmentSum","int32");return A(O(e),(function(){return"numSegments must be of dtype int"})),Ut.runKernelFunc((function(t,n){var i=t.unsortedSegmentSum(r,o,e);return n([o]),i}),{$x:r},(function(t,n){var e=n[0];return{$x:function(){return function(t,n){for(var e=Ks(n,Xe(n)),r=xc(t,e),o=sc(n,Oe(0,"int32")),i=r.rank-o.rank,a=0;a<i;++a)o=wr(o,a+1);o=_s(o,Ve(r.shape,"bool"));var u=Xe(r);return Bs(o,r,u)}(t,e)}}}))}}),wc=function(t,n,e){return s(this,void 0,void 0,(function(){var r,o,i,a,u,s,l,f,h,d,p,v,m;return c(this,(function(c){switch(c.label){case 0:for(r=me(t,"tensor","boolMask"),o=me(n,"mask","boolMask","bool"),i=null==e?0:e,a=o.rank,u=r.shape,A(a>0,(function(){return"mask cannot be scalar"})),T(u.slice(i,i+a),o.shape,"mask's shape must match the first K dimensions of tensor's shape,"),s=1,l=i;l<i+a;l++)s*=u[l];return f=u.slice(0,i).concat([s],u.slice(i+a)),h=r.reshape(f),d=o.reshape([-1]),[4,Ps(d)];case 1:return p=c.sent(),v=p.squeeze([1]),m=xc(h,v,i),t!==r&&r.dispose(),n!==o&&o.dispose(),v.dispose(),h.dispose(),d.dispose(),p.dispose(),[2,m]}}))}))};function Cc(t,n,e,r,o,i,a){void 0===i&&(i="NHWC"),A(t.length===n.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+n.rank+") must match"}));var u=t,s=n,c=!1;3===n.rank&&(c=!0,s=n.as4D(1,n.shape[0],n.shape[1],n.shape[2]),u=[1,t[0],t[1],t[2]]),A(4===u.length,(function(){return"Error in conv2dDerInput: inShape must be length 4, but got length "+u.length+"."})),A(4===s.rank,(function(){return"Error in conv2dDerInput: dy must be rank 4, but got rank "+s.rank})),A(4===e.rank,(function(){return"Error in conv2dDerInput: filter must be rank 4, but got rank "+e.rank}));var l="NHWC"===i?u[3]:u[1],f="NHWC"===i?s.shape[3]:s.shape[1];A(l===e.shape[2],(function(){return"Error in conv2dDerInput: depth of input ("+l+") must match input depth for filter "+e.shape[2]+"."})),A(f===e.shape[3],(function(){return"Error in conv2dDerInput: depth of output ("+f+") must match output depth for filter "+e.shape[3]+"."})),null!=a&&A(O(o),(function(){return"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var h=Mo(i),d=ko(u,e.shape,r,1,o,a,!1,h),p=Ut.runKernelFunc((function(t,n){var r=t.conv2dDerInput(s,e,d);return n([e,s]),r}),{dy4D:s,filter:e},(function(t,n){var e=n[0],u=n[1];return{dy4D:function(){return kc(t,e,r,o,i,1,a)},filter:function(){return Ac(t,u,e.shape,r,o,i,a)}}}));return c?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}function Ec(t){var n=function(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),e=n[0],r=n[1],o=n[2];return 1===e&&1===r&&1===o}function Rc(t,n,e,r,o){A(t.length===n.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+n.rank+") must match"}));var i=t,a=n,u=!1;4===n.rank&&(u=!0,a=n.as5D(1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]),i=[1,t[0],t[1],t[2],t[3]]);var s=i[4],c=a.shape[4];A(5===i.length,(function(){return"Error in conv3dDerInput: inShape must be length 5, but got length "+i.length+"."})),A(5===a.rank,(function(){return"Error in conv3dDerInput: dy must be rank 5, but got rank "+a.rank})),A(5===e.rank,(function(){return"Error in conv3dDerInput: filter must be rank 5, but got rank "+e.rank})),A(s===e.shape[3],(function(){return"Error in conv3dDerInput: depth of input ("+s+") must match input depth for filter "+e.shape[3]+"."})),A(c===e.shape[4],(function(){return"Error in conv3dDerInput: depth of output ("+c+") must match output depth for filter "+e.shape[4]+"."}));var l=So(i,e.shape,r,1,o),f=Ut.runKernelFunc((function(t){return t.conv3dDerInput(a,e,l)}),{dy5D:a});return u?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}var Ic=Ae({conv1d_:function(t,n,e,r,o,i,a){void 0===o&&(o="NWC"),void 0===i&&(i=1);var u=me(t,"x","conv1d"),s=me(n,"filter","conv1d"),c=u,l=!1;2===u.rank&&(l=!0,c=u.as3D(1,u.shape[0],u.shape[1])),A(3===c.rank,(function(){return"Error in conv1d: input must be rank 3, but got rank "+c.rank+"."})),A(3===s.rank,(function(){return"Error in conv1d: filter must be rank 3, but got rank "+s.rank+"."})),null!=a&&A(O(r),(function(){return"Error in conv1d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."})),A(c.shape[2]===s.shape[1],(function(){return"Error in conv1d: depth of input ("+c.shape[2]+") must match input depth for filter "+s.shape[1]+"."})),A(Oo(e,i),(function(){return"Error in conv1D: Either stride or dilation must be 1. Got stride "+e+" and dilation '"+i+"'"})),A("NWC"===o,(function(){return"Error in conv1d: got dataFormat of "+o+" but only NWC is currently supported."}));var f=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),h=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),d=kc(h,f,[1,e],r,"NHWC",[1,i],a);return l?d.as2D(d.shape[2],d.shape[3]):d.as3D(d.shape[0],d.shape[2],d.shape[3])}}),kc=Ae({conv2d_:function(t,n,e,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var u=me(t,"x","conv2d"),s=me(n,"filter","conv2d"),c=u,l=!1;3===u.rank&&(l=!0,c=u.as4D(1,u.shape[0],u.shape[1],u.shape[2])),A(4===c.rank,(function(){return"Error in conv2d: input must be rank 4, but got rank "+c.rank+"."})),A(4===s.rank,(function(){return"Error in conv2d: filter must be rank 4, but got rank "+s.rank+"."})),null!=a&&A(O(r),(function(){return"Error in conv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var f="NHWC"===o?c.shape[3]:c.shape[1];A(f===s.shape[2],(function(){return"Error in conv2d: depth of input ("+f+") must match input depth for filter "+s.shape[2]+"."})),A(Oo(e,i),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+i+"'"}));var h=Mo(o),d=ko(c.shape,s.shape,e,i,r,a,!1,h),p=[s,c],v=Ut.runKernelFunc((function(t,n){var e=t.conv2d(c,s,d);return n([s,c]),e}),{x:c,filter:s},(function(t,n){var a=n,u=a[0],s=a[1];return A(Fo(i),(function(){return"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"})),{x:function(){return Tc(s.shape,t,u,e,r,o)},filter:function(){return Ac(s,t,u.shape,e,r,o)}}}),"Conv2D",d,p);return l?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),Sc=Ae({conv3d_:function(t,n,e,r,o,i){void 0===o&&(o="NDHWC"),void 0===i&&(i=[1,1,1]);var a=me(t,"x","conv3d"),u=me(n,"filter","conv3d"),s=a,c=!1;4===a.rank&&(c=!0,s=a.as5D(1,a.shape[0],a.shape[1],a.shape[2],a.shape[3])),A(5===s.rank,(function(){return"Error in conv3d: input must be rank 5, but got rank "+s.rank+"."})),A(5===u.rank,(function(){return"Error in conv3d: filter must be rank 5, but got rank "+u.rank+"."})),A(s.shape[4]===u.shape[3],(function(){return"Error in conv3d: depth of input ("+s.shape[4]+") must match input depth for filter "+u.shape[3]+"."})),A(function(t,n){return Ec(t)||Ec(n)}(e,i),(function(){return"Error in conv3D: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+i+"'"})),A("NDHWC"===o,(function(){return"Error in conv3d: got dataFormat of "+o+" but only NDHWC is currently supported."}));var l=So(s.shape,u.shape,e,i,r),f=Ut.runKernelFunc((function(t,n){var e=t.conv3d(s,u,l);return n([s,u]),e}),{x:s,$filter:u},(function(t,n){A(Ec(i),(function(){return"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"}));var o=n[0],a=n[1];return{x:function(){return Rc(o.shape,t,a,e,r)},$filter:function(){return function(t,n,e,r,o){var i=t;4===t.rank&&(i=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var a=n;4===a.rank&&(a=n.as5D(1,n.shape[0],n.shape[1],n.shape[2],n.shape[3])),A(5===i.rank,(function(){return"Error in conv3dDerFilter: input must be rank 5, but got shape "+i.shape+"."})),A(5===a.rank,(function(){return"Error in conv3dDerFilter: dy must be rank 5, but got shape "+a.shape+"."})),A(5===e.length,(function(){return"Error in conv3dDerFilter: filterShape must be length 5, but got "+e+"."})),A(i.shape[4]===e[3],(function(){return"Error in conv3dDerFilter: depth of input "+i.shape[4]+") must match input depth in filter ("+e[3]+"."})),A(a.shape[4]===e[4],(function(){return"Error in conv3dDerFilter: depth of dy ("+a.shape[4]+") must match output depth for filter ("+e[4]+")."}));var u=So(i.shape,e,r,1,o);return Ut.runKernelFunc((function(t){return t.conv3dDerFilter(i,a,u)}),{x5D:i,dy5D:a})}(o,t,a.shape,e,r)}}}));return c?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}}),Ac=Ae({conv2dDerFilter_:function(t,n,e,r,o,i,a){void 0===i&&(i="NHWC");var u=t;3===t.rank&&(u=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var s=n;3===s.rank&&(s=n.as4D(1,n.shape[0],n.shape[1],n.shape[2])),A(4===u.rank,(function(){return"Error in conv2dDerFilter: input must be rank 4, but got shape "+u.shape+"."})),A(4===s.rank,(function(){return"Error in conv2dDerFilter: dy must be rank 4, but got shape "+s.shape+"."})),A(4===e.length,(function(){return"Error in conv2dDerFilter: filterShape must be length 4, but got "+e+"."}));var c="NHWC"===i?u.shape[3]:u.shape[1],l="NHWC"===i?s.shape[3]:s.shape[1];A(c===e[2],(function(){return"Error in conv2dDerFilter: depth of input "+c+") must match input depth in filter ("+e[2]+"."})),A(l===e[3],(function(){return"Error in conv2dDerFilter: depth of dy ("+l+") must match output depth for filter ("+e[3]+")."})),null!=a&&A(O(o),(function(){return"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var f=Mo(i),h=ko(u.shape,e,r,1,o,a,!1,f);return Ut.runKernelFunc((function(t){return t.conv2dDerFilter(u,s,h)}),{x4D:u,dy4D:s})}}),Tc=Ae({conv2dDerInput_:Cc}),Dc=Ae({depthwiseConv2d_:function(t,n,e,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var u=me(t,"x","depthwiseConv2d"),s=me(n,"filter","depthwiseConv2d"),c=u,l=!1;3===u.rank&&(l=!0,c=u.as4D(1,u.shape[0],u.shape[1],u.shape[2])),A(4===c.rank,(function(){return"Error in depthwiseConv2d: input must be rank 4, but got rank "+c.rank+"."})),A(4===s.rank,(function(){return"Error in depthwiseConv2d: filter must be rank 4, but got rank "+s.rank+"."})),A(c.shape[3]===s.shape[2],(function(){return"Error in depthwiseConv2d: number of input channels ("+c.shape[3]+") must match the inChannels dimension in filter "+s.shape[2]+"."})),null==i&&(i=[1,1]),A(Oo(e,i),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+i+"'"})),null!=a&&A(O(r),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var f=ko(c.shape,s.shape,e,i,r,a,!0),h=[c,s],d=Ut.runKernelFunc((function(t,n){var e=t.depthwiseConv2D(c,s,f);return n([c,s]),e}),{x:c,filter:s},(function(t,n){A(Fo(i),(function(){return"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+i+"'"}));var e=n[0],r=n[1];return{x:function(){return Nc(e.shape,t,r,f)},filter:function(){return _c(e,t,r.shape,f)}}}),"DepthwiseConv2dNative",f,h);return l?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}}),Nc=Ae({depthwiseConv2dDerInput_:function(t,n,e,r){var o=n,i=!1;3===n.rank&&(i=!0,o=n.as4D(1,n.shape[0],n.shape[1],n.shape[2]));var a=Ut.runKernelFunc((function(t){return t.depthwiseConv2DDerInput(o,e,r)}),{dy4D:o});return i?a.as3D(a.shape[1],a.shape[2],a.shape[3]):a}}),_c=Ae({depthwiseConv2dDerFilter_:function(t,n,e,r){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var i=n;return 3===i.rank&&(i=n.as4D(1,n.shape[0],n.shape[1],n.shape[2])),Ut.runKernelFunc((function(t){return t.depthwiseConv2DDerFilter(o,i,r)}),{x4D:o,dy4D:i})}}),Fc=Ae({separableConv2d_:function(t,n,e,r,o,i,a){void 0===i&&(i=[1,1]),void 0===a&&(a="NHWC");var u=me(t,"x","separableConv2d"),s=me(n,"depthwiseFilter","separableConv2d"),c=me(e,"pointwiseFilter","separableConv2d"),l=u,f=!1;if(3===u.rank&&(f=!0,l=u.as4D(1,u.shape[0],u.shape[1],u.shape[2])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");A(4===l.rank,(function(){return"Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."})),A(4===s.rank,(function(){return"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+s.rank+"."})),A(4===c.rank,(function(){return"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+s.rank+"."})),A(1===c.shape[0],(function(){return"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+c.shape[0]+"."})),A(1===c.shape[1],(function(){return"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got "+c.shape[1]+"."}));var h=s.shape[2],d=s.shape[3];A(c.shape[2]===h*d,(function(){return"Error in separableConv2d: the third dimension of pointwise filter must be "+h*d+", but got "+c.shape[2]+"."}));var p=Dc(l,s,r,o,a,i),v=kc(p,c,1,"valid",a);return f?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),Oc=Ae({conv2dTranspose_:function(t,n,e,r,o,i){return Cc(e,me(t,"x","conv2dTranspose"),me(n,"filter","conv2dTranspose"),r,o,"NHWC",i)}}),Mc=Ae({conv3dTranspose_:function(t,n,e,r,o){return Rc(e,me(t,"x","conv3dTranspose"),me(n,"filter","conv3dTranspose"),r,o)}}),Bc=Ae({matMul_:function(t,n,e,r){var o;void 0===e&&(e=!1),void 0===r&&(r=!1);var i=me(t,"a","matMul"),a=me(n,"b","matMul");o=Ft(i,a),i=o[0],a=o[1];var u=e?i.shape[i.rank-2]:i.shape[i.rank-1],s=r?a.shape[a.rank-1]:a.shape[a.rank-2],c=e?i.shape[i.rank-1]:i.shape[i.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],f=i.shape.slice(0,-2),h=a.shape.slice(0,-2),d=_(f),p=_(h);A(i.rank>=2&&a.rank>=2&&i.rank===a.rank,(function(){return"Error in matMul: inputs must have the same rank of at least 2, got ranks "+i.rank+" and "+a.rank+"."})),A(F(f,h),(function(){return"Error in matMul: outer dimensions ("+f+") and ("+h+") of Tensors with shapes "+i.shape+" and "+a.shape+" must match."})),A(u===s,(function(){return"Error in matMul: inner shapes ("+u+") and ("+s+") of Tensors with shapes "+i.shape+" and "+a.shape+" and transposeA="+e+" and transposeB="+r+" must match."}));var v=i.shape.slice(0,-2).concat([c,l]),m=e?i.as3D(d,u,c):i.as3D(d,c,u),g=r?a.as3D(p,l,s):a.as3D(p,s,l),y={transposeA:e,transposeB:r};return Ut.runKernelFunc((function(t,n){var o=t.batchMatMul(m,g,e,r);return n([m,g]),o}),{a:m,b:g},(function(t,n){var o=n,i=o[0],a=o[1];return e||r?!e&&r?{a:function(){return t.matMul(a,!1,!1)},b:function(){return t.matMul(i,!0,!1)}}:e&&!r?{a:function(){return a.matMul(t,!1,!0)},b:function(){return i.matMul(t,!1,!1)}}:{a:function(){return a.matMul(t,!0,!0)},b:function(){return t.matMul(i,!0,!0)}}:{a:function(){return t.matMul(a,!1,!0)},b:function(){return i.matMul(t,!0,!1)}}}),"BatchMatMul",y).reshape(v)}}),Pc=Ae({dot_:function(t,n){var e=me(t,"t1","dot"),r=me(n,"t2","dot");A(!(1!==e.rank&&2!==e.rank||1!==r.rank&&2!==r.rank),(function(){return"Error in dot: inputs must all be rank 1 or 2, but got ranks "+e.rank+" and "+r.rank+"."}));var o=1===e.rank?e.size:e.shape[1],i=1===r.rank?r.size:r.shape[0];return A(o===i,(function(){return"Error in dot: inner dimensions of inputs must match, but got "+o+" and "+i+"."})),1===e.rank&&1===r.rank?e.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===e.rank&&2===r.rank?e.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===e.rank&&1===r.rank?e.matMul(r.as2D(-1,1)).as1D():e.matMul(r.as2D(r.shape[0],r.shape[1]))}}),Lc=Ae({outerProduct_:function(t,n){var e=me(t,"v1","outerProduct"),r=me(n,"v2","outerProduct");return A(1===e.rank&&1===r.rank,(function(){return"Error in outerProduct: inputs must be rank 1, but got ranks "+e.rank+" and "+r.rank+"."})),e.as2D(-1,1).matMul(r.as2D(1,-1))}}),Wc=Ae({reverse_:function(t,n){var e=me(t,"x","reverse");if(0===e.rank)return e.clone();var r=U(n,e.shape);return Ut.runKernelFunc((function(t){return t.reverse(e,r)}),{$x:e},(function(t){return{$x:function(){return t.reverse(r)}}})).reshapeAs(e)}}),Uc=Ae({reverse1d_:function(t){var n=me(t,"x","reverse");return A(1===n.rank,(function(){return"Error in reverse1D: x must be rank 1 but got rank "+n.rank+"."})),Wc(n,0)}}),zc=Ae({reverse2d_:function(t,n){var e=me(t,"x","reverse");return A(2===e.rank,(function(){return"Error in reverse2D: x must be rank 2 but got rank "+e.rank+"."})),Wc(e,n)}}),Vc=Ae({reverse3d_:function(t,n){var e=me(t,"x","reverse");return A(3===e.rank,(function(){return"Error in reverse3D: x must be rank 3 but got rank "+e.rank+"."})),Wc(e,n)}}),Gc=Ae({reverse4d_:function(t,n){var e=me(t,"x","reverse");return A(4===e.rank,(function(){return"Error in reverse4D: x must be rank 4 but got rank "+e.rank+"."})),Wc(e,n)}});function Hc(t,n,e,r,o,i){var a=me(t,"x","maxPool"),u=a,s=!1;3===a.rank&&(s=!0,u=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),null==r&&(r=[1,1]),A(4===u.rank,(function(){return"Error in maxPool: input must be rank 4 but got rank "+u.rank+"."})),A(Oo(e,r),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+r+"'"})),null!=i&&A(O(o),(function(){return"Error in maxPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=Ro(u.shape,n,e,r,o,i);if(1===c.filterWidth&&1===c.filterHeight&&F(c.inShape,c.outShape))return a.clone();var l=[u],f=Ut.runKernelFunc((function(t,n){var e=t.maxPool(u,c);return n([u,e]),e}),{x:u},(function(t,i){var a=i[0],u=i[1];return{x:function(){return function(t,n,e,r,o,i,a,u){var s=me(t,"dy","maxPoolBackprop"),c=me(n,"input","maxPoolBackprop"),l=me(e,"output","maxPoolBackprop");A(c.rank===s.rank,(function(){return"Rank of input ("+c.rank+") does not match rank of dy ("+s.rank+")"})),null==i&&(i=[1,1]),A(Oo(o,i),(function(){return"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),A(4===s.rank,(function(){return"Error in maxPoolBackprop: dy must be rank 4 but got rank "+s.rank+"."})),A(4===c.rank,(function(){return"Error in maxPoolBackprop: input must be rank 4 but got rank "+c.rank+"."}));var f=Ro(c.shape,r,o,i,a,u);return Ut.runKernelFunc((function(t){return t.maxPoolBackprop(s,c,l,f)}),{$dy:s,$input:c})}(t,a,u,n,e,r,o)}}}),"MaxPool",c,l);return s?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}function qc(t,n,e,r,o,i){var a=me(t,"x","avgPool","float32");null==r&&(r=[1,1]),A(Oo(e,r),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+r+"'"}));var u=a,s=!1;3===a.rank&&(s=!0,u=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),A(4===u.rank,(function(){return"Error in avgPool: x must be rank 4 but got rank "+u.rank+"."})),null!=i&&A(O(o),(function(){return"Error in avgPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=Ro(u.shape,n,e,r,o,i);if(1===c.filterWidth&&1===c.filterHeight&&F(c.inShape,c.outShape))return a.clone();var l=Ut.runKernelFunc((function(t){return t.avgPool(u,c)}),{x:u},(function(t){return{x:function(){return function(t,n,e,r,o,i){var a=me(t,"dy","avgPoolBackprop"),u=me(n,"input","avgPoolBackprop");A(u.rank===a.rank,(function(){return"Rank of input ("+u.rank+") does not match rank of dy ("+a.rank+")"})),null==o&&(o=[1,1]),A(Oo(r,o),(function(){return"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"}));var s=u,c=a,l=!1;3===u.rank&&(l=!0,s=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),c=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),A(4===c.rank,(function(){return"Error in avgPoolBackprop: dy must be rank 4 but got rank "+c.rank+"."})),A(4===s.rank,(function(){return"Error in avgPoolBackprop: input must be rank 4 but got rank "+s.rank+"."}));var f=Ro(s.shape,e,r,o,i),h=Ut.runKernelFunc((function(t){return t.avgPoolBackprop(c,s,f)}),{dy4D:c,input4D:s});return l?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}(t,u,n,e,r,o)}}}),"AvgPool",c);return l=l.cast(a.dtype),s?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var Kc=Ae({maxPool_:function(t,n,e,r,o){return Hc(t,n,e,1,r,o)}}),jc=Ae({avgPool_:function(t,n,e,r,o){return qc(t,n,e,1,r,o)}}),Xc=Ae({pool_:function(t,n,e,r,o,i){null==o&&(o=[1,1]),null==i&&(i=1),0===r&&(r="valid");var a=me(t,"x","maxPool"),u=a,s=!1;3===a.rank&&(s=!0,u=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),A(Oo(i,o),(function(){return"Error in pool: Either strides or dilations must be 1. Got strides "+i+" and dilations '"+o+"'"}));var c,l=Ro(u.shape,n,i,o,r),f=[l.dilationHeight,l.dilationWidth];c="same"===r?function(t,n){var e=t.map((function(t,e){return t+(t-1)*(n[e]-1)})).map((function(t){return t-1})),r=e.map((function(t){return Math.floor(t/2)})),o=e.map((function(t,n){return t-r[n]}));return e.map((function(t,n){return[r[n],o[n]]}))}([l.filterHeight,l.filterWidth],f):[[0,0],[0,0]];var h=1===f[0]&&1===f[1],d=function(t,n,e){var r=e.map((function(t){return t[0]})),o=e.map((function(t){return t[1]})),i=t.concat(r,o),a=n.map((function(t,n){return(t-i[n]%t)%t})),u=o.map((function(t,n){return t+a[n]}));return[n.map((function(t,n){return[r[n],u[n]]})),n.map((function(t,n){return[0,a[n]]}))]}([l.inHeight,l.inWidth],f,c),p=d[0],v=d[1],m=h?r:"valid",g=h?u:Mr(u,f,p),y=("avg"===e?function(){return qc(g,n,i,1,m)}:function(){return Hc(g,n,i,1,m)})(),x=h?y:vr(y,f,v);return s?x.as3D(x.shape[1],x.shape[2],x.shape[3]):x}}),Yc=Ae({maxPool3d_:function(t,n,e,r,o,i,a){void 0===i&&(i="NDHWC");var u=me(t,"x","maxPool3d"),s=u,c=!1;4===u.rank&&(c=!0,s=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3])),null==a&&(a=[1,1,1]),A(5===s.rank,(function(){return"Error in maxPool3d: x must be rank 5 but got rank "+s.rank+"."})),A("NDHWC"===i,(function(){return"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),A(Oo(e,a),(function(){return"Error in maxPool3d: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+a+"'"})),null!=o&&A(O(r),(function(){return"Error in maxPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=Io(s.shape,n,e,a,r,o,i),f=Ut.runKernelFunc((function(t,n){var e=t.maxPool3d(s,l);return n([s,e]),e}),{x:s},(function(t,i){var u=i[0],s=i[1];return{x:function(){return function(t,n,e,r,o,i,a,u){var s=me(t,"dy","maxPool3dBackprop"),c=me(n,"input","maxPool3dBackprop"),l=me(e,"output","maxPool3dBackprop"),f=s,h=c,d=l,p=!1;4===c.rank&&(p=!0,f=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),h=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),d=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3])),A(5===f.rank,(function(){return"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+f.rank+"."})),A(5===h.rank,(function(){return"Error in maxPool3dBackprop: input must be rank 5 but got rank "+h.rank+"."})),A(5===d.rank,(function(){return"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."})),null==i&&(i=[1,1,1]),A(Oo(o,i),(function(){return"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),null!=u&&A(O(a),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+u+" but got pad "+a+"."}));var v=Io(h.shape,r,o,i,a,u),m=Ut.runKernelFunc((function(t){return t.maxPool3dBackprop(f,h,d,v)}),{dy5D:f,input5D:h});return p?m.as4D(m.shape[1],m.shape[2],m.shape[3],m.shape[4]):m}(t,u,s,n,e,a,r,o)}}}));return c?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}}),$c=Ae({avgPool3d_:function(t,n,e,r,o,i,a){void 0===i&&(i="NDHWC");var u=me(t,"x","avgPool3d","float32"),s=u,c=!1;4===u.rank&&(c=!0,s=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3])),null==a&&(a=[1,1,1]),A(5===s.rank,(function(){return"Error in avgPool3d: x must be rank 5 but got rank "+s.rank+"."})),A("NDHWC"===i,(function(){return"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),A(Oo(e,a),(function(){return"Error in avgPool3d: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+a+"'"})),null!=o&&A(O(r),(function(){return"Error in avgPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=Io(s.shape,n,e,a,r,o,i),f=Ut.runKernelFunc((function(t){return t.avgPool3d(s,l)}),{x:s},(function(t){return{x:function(){return function(t,n,e,r,o,i,a){var u=me(t,"dy","avgPool3dBackprop"),s=me(n,"input","avgPool3dBackprop"),c=u,l=s,f=!1;4===s.rank&&(f=!0,c=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),l=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),A(5===c.rank,(function(){return"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."})),A(5===l.rank,(function(){return"Error in avgPool3dBackprop: input must be rank 5 but got rank "+l.rank+"."})),null==o&&(o=[1,1,1]),A(Oo(r,o),(function(){return"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"})),null!=a&&A(O(i),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+"."}));var h=Io(l.shape,e,r,o,i,a),d=Ut.runKernelFunc((function(t){return t.avgPool3dBackprop(c,l,h)}),{dy5D:c,input5D:l});return f?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}(t,s,n,e,a,r,o)}}}));return f=f.cast(s.dtype),c?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}}),Qc=Ae({slice_:function(t,n,e){var r,o,i=me(t,"x","slice");if(0===i.rank)throw new Error("Slicing scalar is not possible");(r="number"==typeof n?[n].concat(new Array(i.rank-1).fill(0)):n.length<i.rank?n.concat(new Array(i.rank-n.length).fill(0)):n.slice()).forEach((function(t){A(-1!==t,(function(){return"slice() does not support negative begin indexing."}))})),o=(o=null==e?new Array(i.rank).fill(-1):"number"==typeof e?[e].concat(new Array(i.rank-1).fill(-1)):e.length<i.rank?e.concat(new Array(i.rank-e.length).fill(-1)):e).map((function(t,n){return t>=0?t:(A(-1===t,(function(){return"Negative size values should be exactly -1 but got "+t+" for the slice() size at index "+n+"."})),i.shape[n]-r[n])})),to(i,r,o);var a=i.shape,u={begin:r,size:o};return Ut.runKernelFunc((function(t){return t.slice(i,r,o)}),{x:i},(function(t){for(var n=[],e=0;e<t.rank;e++)n.push([r[e],a[e]-r[e]-o[e]]);return{x:function(){return t.pad(n)}}}),"Slice",u)}}),Jc=Ae({slice1d_:function(t,n,e){var r=me(t,"x","slice1d");return A(1===r.rank,(function(){return"slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"})),Qc(r,[n],[e])}}),Zc=Ae({slice2d_:function(t,n,e){var r=me(t,"x","slice2d");return A(2===r.rank,(function(){return"slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"})),Qc(r,n,e)}}),tl=Ae({slice3d_:function(t,n,e){var r=me(t,"x","slice3d");return A(3===r.rank,(function(){return"slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"})),Qc(r,n,e)}}),nl=Ae({slice4d_:function(t,n,e){var r=me(t,"x","slice4d");return A(4===r.rank,(function(){return"slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"})),Qc(r,n,e)}});function el(t,n,e,r,o){return n.rank<e.rank&&(n=n.reshape(we(n.shape,r))),t.rank<e.rank&&(t=t.reshape(we(t.shape,r))),{x:function(){var r=t.mul(e.equal(n).cast(t.dtype));return null==o?r:r.transpose(o)}}}var rl=Ae({all_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","all","bool"),o=U(n,r.shape),i=o,a=Ee(i,r.rank);null!=a&&(r=r.transpose(a),i=Ie(i.length,r.rank));var u=Ut.runKernelFunc((function(t){return t.all(r,i)}),{$x:r});if(e){var s=we(u.shape,o);return u.reshape(s)}return u}}),ol=Ae({any_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","any","bool"),o=U(n,r.shape),i=o,a=Ee(i,r.rank);null!=a&&(r=r.transpose(a),i=Ie(i.length,r.rank));var u=Ut.runKernelFunc((function(t){return t.any(r,i)}),{$x:r});if(e){var s=we(u.shape,o);return u.reshape(s)}return u}}),il=Ae({argMax_:function(t,n){void 0===n&&(n=0);var e=me(t,"x","argMax");null==n&&(n=0);var r=U(n,e.shape),o=Ee(r,e.rank);null!=o&&(e=e.transpose(o),r=Ie(r.length,e.rank));var i={axis:r[0]},a=[e];return Ut.runKernelFunc((function(t,n){var o=t.argMax(e,r[0]);return n([e]),o}),{x:e},(function(t,n){var e=n[0];return{x:function(){return Xe(e)}}}),"ArgMax",i,a)}}),al=Ae({argMin_:function(t,n){void 0===n&&(n=0);var e=me(t,"x","argMin");null==n&&(n=0);var r=U(n,e.shape),o=Ee(r,e.rank);return null!=o&&(e=e.transpose(o),r=Ie(r.length,e.rank)),Ut.runKernelFunc((function(t,n){var o=t.argMin(e,r[0]);return n([e]),o}),{$x:e},(function(t,n){var e=n[0];return{$x:function(){return Xe(e)}}}))}}),ul=Ae({logSumExp_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","logSumExp"),o=U(n,r.shape),i=r.max(o,!0),a=r.sub(i).exp().sum(o).log(),u=i.reshape(a.shape).add(a);if(e){var s=we(u.shape,o);return u.reshape(s)}return u}}),sl=Ae({max_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","max"),o=r,i=U(n,r.shape),a=i,u=Ee(a,r.rank);null!=u&&(r=r.transpose(u),a=Ie(a.length,r.rank));var s=[r],c=Ut.runKernelFunc((function(t,n){var e=t.max(r,a);return n([o,e]),e}),{x:r},(function(t,n){return el(t,n[1],n[0],i,u)}),"Max",{axes:a},s,[!0]);if(e){var l=we(c.shape,i);c=c.reshape(l)}return c}}),cl=Ae({mean_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","mean"),o=U(n,r.shape),i=_(be(r.shape,o)[1]);return po((function(t){var r=Oe(i);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(n,e),gradFunc:function(n){var e=t.shape.slice();return o.forEach((function(t){e[t]=1})),n.reshape(e).mul(Ve(t.shape,"float32")).div(i)}}}))(r)}}),ll=Ae({min_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","min"),o=r,i=U(n,r.shape),a=i,u=Ee(a,r.rank);null!=u&&(r=r.transpose(u),a=Ie(a.length,r.rank));var s=[r],c=Ut.runKernelFunc((function(t,n){var e=t.min(r,a);return n([o,e]),e}),{x:r},(function(t,n){return el(t,n[1],n[0],i,u)}),"Min",{axes:a},s,[!0]);if(e){var l=we(c.shape,i);c=c.reshape(l)}return c}}),fl=Ae({moments_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=U(n,(t=me(t,"x","moments")).shape),o=t.mean(r,e),i=o.shape;e||(i=we(o.shape,r));var a=t.toFloat().sub(o.reshape(i)).square();return{mean:o,variance:a.mean(r,e)}}}),hl=Ae({sum_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());var o=U(n,r.shape);return po((function(t){var n=Ee(o,t.rank),r=o,i=t;null!=n&&(i=t.transpose(n),r=Ie(r.length,t.rank));var a=function(n){var e=t.shape.slice();return o.forEach((function(t){e[t]=1})),n.reshape(e).mul(Ve(t.shape,"float32"))},u={axes:r},s=Ut.runKernelFunc((function(t){return t.sum(i,r)}),{x:i},(function(t){return{x:function(){return a(t)}}}),"Sum",u);if(e){var c=we(s.shape,o);s=s.reshape(c)}return{value:s,gradFunc:a}}))(r)}}),dl=Ae({prod_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=me(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());var o=U(n,r.shape),i=Ee(o,r.rank),a=o,u=r;null!=i&&(u=r.transpose(i),a=Ie(a.length,r.rank));var s=Ut.runKernelFunc((function(t){return t.prod(u,a)}),{permutedX:u});if(e){var c=we(s.shape,o);s=s.reshape(c)}return s}}),pl=Ae({elu_:function(t){var n=me(t,"x","elu");return Ut.runKernelFunc((function(t,e){var r=t.elu(n);return e([r]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){return Ut.runKernelFunc((function(n){return n.eluDer(t,e)}),{dy:t,y:e})}}}))}}),vl=Ae({leakyRelu_:function(t,n){void 0===n&&(n=.2);var e=me(t,"x","leakyRelu");return Ks(Oe(n).mul(e),e)}}),ml=Ae({prelu_:function(t,n){var e=me(t,"x","prelu"),r=me(n,"alpha","prelu");return Ut.runKernelFunc((function(t,n){var o=t.prelu(e,r);return n([e,r]),o}),{x:e,alpha:r},(function(t,n){var e=n[0],r=n[1],o=e.greater(0);return{x:function(){return Bs(o,t,t.mul(r))},alpha:function(){var n=Bs(o,Xe(t),t.mul(e)),i=Co(r.shape,t.shape);return i.length>0&&(n=n.sum(i)),n.reshape(r.shape)}}}),"Prelu")}}),gl=Ae({relu_:function(t){var n=me(t,"x","relu");return"bool"===n.dtype?n.toInt():Ut.runKernelFunc((function(t,e){var r=t.relu(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0];return{x:function(){return t.mulStrict(e.step().toFloat())}}}),"Relu")}}),yl=Ae({relu6_:function(t){var n=me(t,"x","relu6");return"bool"===n.dtype?n.toInt():Ut.runKernelFunc((function(t,e){var r=t.relu6(n);return e([n]),r}),{x:n},(function(t,n){var e=n[0],r=e.lessEqual(6).mul(e.step());return{x:function(){return t.mulStrict(r.toFloat())}}}),"Relu6")}}),xl=Ae({selu_:function(t){var n=me(t,"x","selu");return Ut.runKernelFunc((function(t,e){var r=t.selu(n);return e([n]),r}),{$x:n},(function(t,n){var e=n[0];return{$x:function(){var n=e.greater(Oe(0)),r=Oe(du),o=Oe(pu),i=t.mul(o),a=t.mul(r).mul(e.toFloat().exp());return Bs(n,i,a)}}}))}}),bl=Ae({transpose_:function(t,n){var e=me(t,"x","transpose");if(null==n&&(n=e.shape.map((function(t,n){return n})).reverse()),A(e.rank===n.length,(function(){return"Error in transpose: rank of input "+e.rank+" must match length of perm "+n+"."})),n.forEach((function(t){A(t>=0&&t<e.rank,(function(){return"All entries in 'perm' must be between 0 and "+(e.rank-1)+" but got "+n}))})),e.rank<=1)return e.clone();var r={perm:n};return Ut.runKernelFunc((function(t){return t.transpose(e,n)}),{x:e},(function(t){var e=Re(n);return{x:function(){return t.transpose(e)}}}),"Transpose",r)}}),wl=Ae({localResponseNormalization_:function(t,n,e,r,o){void 0===n&&(n=5),void 0===e&&(e=1),void 0===r&&(r=1),void 0===o&&(o=.5);var i=me(t,"x","localResponseNormalization");A(4===i.rank||3===i.rank,(function(){return"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+i.rank+"."})),A(O(n),(function(){return"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius "+n+"."}));var a=i,u=!1;3===i.rank&&(u=!0,a=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));var s=Ut.runKernelFunc((function(t,i){var u=t.localResponseNormalization4D(a,n,e,r,o);return i([a,u]),u}),{x4D:a},(function(t,i){var a=i[0],u=i[1];return{x4D:function(){return Ut.runKernelFunc((function(i){return i.LRNGrad(t,a,u,n,e,r,o)}),{})}}}));return u?s.as3D(s.shape[1],s.shape[2],s.shape[3]):s}}),Cl=Ae({norm_:function(t,n,e,r){void 0===n&&(n="euclidean"),void 0===e&&(e=null),void 0===r&&(r=!1);var o=function t(n,e,r){if(void 0===r&&(r=null),0===n.rank)return n.abs();if(1!==n.rank&&null===r)return t(n.reshape([-1]),e,r);if(1===n.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===e)return n.abs().sum(r);if(e===1/0)return n.abs().max(r);if(e===-1/0)return n.abs().min(r);if("euclidean"===e||2===e)return n.abs().pow(Oe(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+e)}if(Array.isArray(r)&&2===r.length){if(1===e)return n.abs().sum(r[0]).max(r[1]-1);if(e===1/0)return n.abs().sum(r[1]).max(r[0]);if(e===-1/0)return n.abs().sum(r[1]).min(r[0]);if("fro"===e||"euclidean"===e)return n.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+e)}throw new Error("Error in norm: invalid axis: "+r)}(t=me(t,"x","norm"),n,e),i=o.shape;if(r){var a=U(e,t.shape);i=we(o.shape,a)}return o.reshape(i)}}),El=Ae({basicLSTMCell_:function(t,n,e,r,o,i){var a=me(t,"forgetBias","basicLSTMCell"),u=me(n,"lstmKernel","basicLSTMCell"),s=me(e,"lstmBias","basicLSTMCell"),c=me(r,"data","basicLSTMCell"),l=me(o,"c","basicLSTMCell"),f=me(i,"h","basicLSTMCell"),h=c.concat(f,1).matMul(u).add(s),d=h.shape[0],p=h.shape[1]/4,v=[d,p],m=h.slice([0,0],v),g=h.slice([0,p],v),y=h.slice([0,2*p],v),x=h.slice([0,3*p],v),b=m.sigmoid().mulStrict(g.tanh()).addStrict(l.mulStrict(a.add(y).sigmoid())),w=b.tanh().mulStrict(x.sigmoid());return[b,w]}}),Rl=Ae({multiRNNCell_:function(t,n,e,r){for(var o=me(n,"data","multiRNNCell"),i=ge(e,"c","multiRNNCell"),a=ge(r,"h","multiRNNCell"),u=o,s=[],c=0;c<t.length;c++){var l=t[c](u,i[c],a[c]);s.push(l[0]),s.push(l[1]),u=l[1]}var f=[],h=[];for(c=0;c<s.length;c+=2)f.push(s[c]),h.push(s[c+1]);return[f,h]}}),Il=Ae({movingAverage_:function(t,n,e,r,o){void 0===o&&(o=!0);var i=me(t,"v","movingAverage"),a=me(n,"x","movingAverage"),u=me(e,"decay","movingAverage");Ot(i,a),A(F(i.shape,a.shape),(function(){return"Shape mismatch in v and x"}));var s=Oe(1),c=s.sub(u),l=a.sub(i).mul(c);if(o){A(null!=r,(function(){return"When using zeroDebias: true, step is required."}));var f=me(r,"step","movingAverage");l=l.div(s.sub(tc(u,f)))}return i.add(l)}}),kl=Ae({stridedSlice_:function(t,n,e,r,o,i,a,u,s){if(void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===u&&(u=0),void 0===s&&(s=0),null==r&&(r=new Array(n.length)),0!==a)throw new Error("ellipsis mask is not yet supported");var c=me(t,"x","stridedSlice"),l=no(u),f=c.shape.slice();l.forEach((function(t){n[t]=0,e[t]=1,f.splice(t,0,1)})),c=c.reshape(f);for(var h=0;h<c.rank;h++)n[h]=ro(o,n,r,c.shape,h),e[h]=oo(i,e,r,c.shape,h),r[h]=r[h]||1;var d=no(s);d.forEach((function(t){e[t]=n[t]+1,r[t]=1}));var p=eo(n,e,r),v=p.filter((function(t,n){return-1===d.indexOf(n)}));return r.every((function(t){return 1===t}))?Qc(c,n,p).reshape(v):Ut.runKernelFunc((function(t){return t.stridedSlice(c,n,e,r)}),{$x:c}).reshape(v)}}),Sl=Ae({topk_:function(t,n,e){void 0===n&&(n=1),void 0===e&&(e=!0);var r=me(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var o=r.shape[r.shape.length-1];if(n>o)throw new Error("'k' passed to topk() must be <= the last dimension ("+o+") but got "+n);var i=Ut.runKernelFunc((function(t){return t.topk(r,n,e)}),{$x:r});return{values:i[0],indices:i[1]}}}),Al=Ae({scatterND_:function(t,n,e){var r=me(t,"indices","scatterND","int32"),o=me(n,"updates","scatterND");return Qr(o,r,e),Ut.runKernelFunc((function(t){return t.scatterND(r,o,e)}),{indices:r,updates:o},null,"ScatterNd",{shape:e})}}),Tl=Ae({fft_:function(t){A("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.fft() must be complex64 but got "+t.dtype+"."}));var n=t.shape[t.shape.length-1],e=t.size/n,r=t.as2D(e,n);return Ut.runKernelFunc((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),Dl=Ae({ifft_:function(t){A("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.ifft() must be complex64 but got "+t.dtype+"."}));var n=t.shape[t.shape.length-1],e=t.size/n,r=t.as2D(e,n);return Ut.runKernelFunc((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),Nl=Ae({rfft_:function(t,n){A("float32"===t.dtype,(function(){return"The dtype for rfft() must be real value but got "+t.dtype}));var e,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=n&&n<r){var i=t.shape.map((function(t){return 0})),a=t.shape.map((function(t){return t}));a[t.shape.length-1]=n,e=t.slice(i,a),r=n}else if(null!=n&&n>r){var u=t.shape.map((function(t){return t}));u[t.shape.length-1]=n-r,e=t.concat(Ge(u),t.shape.length-1),r=n}else e=t;var s=e.zerosLike(),c=Te(e,s).as2D(o,r),l=Tl(c),f=Math.floor(r/2)+1,h=De(l),d=Ne(l),p=h.split([f,r-f],h.shape.length-1),v=d.split([f,r-f],d.shape.length-1),m=e.shape.slice();return m[e.shape.length-1]=f,Te(p[0],v[0]).reshape(m)}}),_l=Ae({irfft_:function(t){var n=t.shape[t.shape.length-1],e=t.size/n;if(n<=2){var r=t.as2D(e,n),o=Dl(r);return De(o)}var i=[e,2*(n-1)],a=De(t).as2D(e,n),u=Ne(t).as2D(e,n),s=a.slice([0,1],[e,n-2]).reverse(1),c=u.slice([0,1],[e,n-2]).reverse(1).mul(Oe(-1)),l=a.concat(s,1),f=u.concat(c,1);return r=Te(l,f).as2D(i[0],i[1]),o=Dl(r),De(o)}}),Fl=Object.freeze({fft:Tl,ifft:Dl,rfft:Nl,irfft:_l}),Ol=Ae({sparseToDense_:function(t,n,e,r){void 0===r&&(r=0);var o=me(t,"sparseIndices","sparseToDense","int32"),i=me(n,"sparseValues","sparseToDense"),a=me(r,"defaultValue","sparseToDense",i.dtype);return function(t,n,e,r){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+t.shape+".");var o=t.rank>0?t.shape[0]:1,i=t.rank>1?t.shape[1]:1;if(e.length!==i)throw new Error("outputShape has incorrect number of elements:, "+e.length+", should be: "+i+".");var a=n.size;if(0!==n.rank&&(1!==n.rank||a!==o))throw new Error("sparseValues has incorrect shape "+n.shape+", should be [] or ["+o+"]");if(n.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,i,e,a),Ut.runKernelFunc((function(t){return t.sparseToDense(o,i,e,a)}),{$sparseIndices:o,$sparseValues:i,$defaultValue:a})}}),Ml=Ae({gatherND_:function(t,n){var e=me(n,"indices","gatherND","int32"),r=me(t,"x","gatherND");return Ut.runKernelFunc((function(t){return t.gatherND(r,e)}),{x:r,indices:e},null,"GatherNd")}}),Bl=Ae({diag_:function(t){var n=me(t,"x","diag").flatten(),e=t.shape.concat(t.shape);return Ut.runKernelFunc((function(t){return t.diag(n)}),{$x:n}).reshape(e)}}),Pl=Ae({dropout_:function(t,n,e,r){var o=me(t,"x","dropout");if(A("float32"===o.dtype,(function(){return"x has to be a floating point tensor since it's going to be scaled, but got a "+o.dtype+" tensor instead."})),A(n>=0&&n<1,(function(){return"rate must be a float in the range [0, 1), but got "+n+"."})),0===n)return t instanceof Et?o.clone():o;var i=function(t,n){if(null==n)return t.shape.slice();if(F(t.shape,n))return n;if(t.shape.length===n.length){for(var e=[],r=0;r<t.shape.length;r++)null==n[r]&&null!=t.shape[r]?e.push(t.shape[r]):e.push(n[r]);return e}return n}(o,e),a=1-n,u=Fr(i,0,1,"float32",r).add(a).floor().div(a);return o.mul(u)}});function Ll(t,n,e){for(var r=1-t%2,o=new Float32Array(t),i=0;i<t;++i){var a=2*Math.PI*i/(t+r-1);o[i]=n-e*Math.cos(a)}return Me(o,"float32")}var Wl,Ul=Ae({hannWindow_:function(t){return Ll(t,.5,.5)}}),zl=Ae({hammingWindow_:function(t){return Ll(t,.54,.46)}}),Vl=Ae({frame_:function(t,n,e,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var i=0,a=[];i+n<=t.size;)a.push(Qc(t,i,n)),i+=e;if(r)for(;i<t.size;){var u=i+n-t.size,s=Ye([Qc(t,i,n-u),He([u],o)]);a.push(s),i+=e}return 0===a.length?Be([],[0,n]):Ye(a).as2D(a.length,n)}}),Gl=Ae({stft_:function(t,n,e,r,o){var i;void 0===o&&(o=Ul),null==r&&(i=n,r=Math.floor(Math.pow(2,Math.ceil(Math.log(i)/Math.log(2)))));for(var a=Vl(t,n,e),u=Js(a,o(n)),s=[],c=0;c<a.shape[0];c++)s.push(Nl(u.slice([c,0],[1,n]),r));return Ye(s)}}),Hl=Object.freeze({hannWindow:Ul,hammingWindow:zl,frame:Vl,stft:Gl}),ql=function(t,n,e){return void 0===e&&(e=1),s(this,void 0,void 0,(function(){var r,o,i,a,u,s,l,f,h,d,p,v,m,g;return c(this,(function(c){switch(c.label){case 0:return r=me(t,"predictions","inTopK"),o=me(n,"targets","inTopK"),A(r.rank>1,(function(){return"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank})),A(r.rank-1===o.rank,(function(){return"predictions rank should be 1 larger than targets rank, but got predictions rank "+r.rank+" and targets rank "+o.rank})),T(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),i=r.shape[r.shape.length-1],A(e>0&&e<=i,(function(){return"'k' passed to inTopK() must be > 0 && <= the predictions last dimension ("+i+"), but got "+e})),[4,r.data()];case 1:return a=c.sent(),[4,o.data()];case 2:for(u=c.sent(),s=[a.length/i,i],f=s[1],h=V("bool",l=s[0]),d=0;d<l;d++){for(p=d*f,v=a.subarray(p,p+f),m=[],g=0;g<v.length;g++)m.push({value:v[g],index:g});for(m.sort((function(t,n){return n.value-t.value})),h[d]=0,g=0;g<e;g++)if(m[g].index===u[d]){h[d]=1;break}}return t!==r&&r.dispose(),n!==o&&o.dispose(),[2,_e(h,o.shape,"bool")]}}))}))};!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(Wl||(Wl={}));var Kl=Ae({absoluteDifference_:function(t,n,e,r){void 0===r&&(r=Wl.SUM_BY_NONZERO_WEIGHTS);var o=me(t,"labels","absoluteDifference"),i=me(n,"predictions","absoluteDifference"),a=null;null!=e&&(a=me(e,"weights","absoluteDifference")),T(o.shape,i.shape,"Error in absoluteDifference: ");var u=o.sub(i).abs();return jl(u,a,r)}}),jl=Ae({computeWeightedLoss_:function(t,n,e){void 0===e&&(e=Wl.SUM_BY_NONZERO_WEIGHTS);var r=me(t,"losses","computeWeightedLoss"),o=null;null!=n&&(o=me(n,"weights","computeWeightedLoss"));var i=null==o?r:r.mul(o);if(e===Wl.NONE)return i;if(e===Wl.SUM)return i.sum();if(e===Wl.MEAN){if(null==o)return i.mean();var a=r.size/o.size,u=i.sum().div(o.sum());return a>1?u.div(Oe(a)):u}if(e===Wl.SUM_BY_NONZERO_WEIGHTS){if(null==o)return i.sum().div(Oe(r.size));var s=o.mul(Ve(r.shape)).notEqual(Oe(0)).sum().toFloat();return i.sum().div(s)}throw Error("Unknown reduction: "+e)}}),Xl=Ae({cosineDistance_:function(t,n,e,r,o){void 0===o&&(o=Wl.SUM_BY_NONZERO_WEIGHTS);var i=me(t,"labels","cosineDistance"),a=me(n,"predictions","cosineDistance"),u=null;null!=r&&(u=me(r,"weights","cosineDistance")),T(i.shape,a.shape,"Error in cosineDistance: ");var s=Oe(1).sub(i.mul(a).sum(e,!0));return jl(s,u,o)}}),Yl=Ae({hingeLoss_:function(t,n,e,r){void 0===r&&(r=Wl.SUM_BY_NONZERO_WEIGHTS);var o=me(t,"labels","hingeLoss"),i=me(n,"predictions","hingeLoss"),a=null;null!=e&&(a=me(e,"weights","hingeLoss")),T(o.shape,i.shape,"Error in hingeLoss: ");var u=Oe(1);o=Oe(2).mul(o).sub(u);var s=u.sub(o.mul(i)).relu();return jl(s,a,r)}}),$l=Ae({huberLoss_:function(t,n,e,r,o){void 0===r&&(r=1),void 0===o&&(o=Wl.SUM_BY_NONZERO_WEIGHTS);var i=me(t,"labels","huberLoss"),a=me(n,"predictions","huberLoss"),u=null;null!=e&&(u=me(e,"weights","huberLoss")),T(i.shape,a.shape,"Error in huberLoss: ");var s=Oe(r),c=a.sub(i).abs(),l=Xs(c,s),f=c.sub(l),h=Oe(.5).mul(l.square()).add(s.mul(f));return jl(h,u,o)}}),Ql=Ae({logLoss_:function(t,n,e,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=Wl.SUM_BY_NONZERO_WEIGHTS);var i=me(t,"labels","logLoss"),a=me(n,"predictions","logLoss"),u=null;null!=e&&(u=me(e,"weights","logLoss")),T(i.shape,a.shape,"Error in logLoss: ");var s=Oe(1),c=Oe(r),l=i.mul(a.add(c).log()).neg().sub(s.sub(i).mul(s.sub(a).add(c).log()));return jl(l,u,o)}}),Jl=Ae({meanSquaredError_:function(t,n,e,r){void 0===r&&(r=Wl.SUM_BY_NONZERO_WEIGHTS);var o=me(t,"labels","meanSquaredError"),i=me(n,"predictions","meanSquaredError"),a=null;null!=e&&(a=me(e,"weights","meanSquaredError")),T(o.shape,i.shape,"Error in meanSquaredError: ");var u=o.squaredDifference(i);return jl(u,a,r)}}),Zl=Ae({sigmoidCrossEntropy_:function(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=Wl.SUM_BY_NONZERO_WEIGHTS);var i=me(t,"multiClassLabels","sigmoidCrossEntropy"),a=me(n,"logits","sigmoidCrossEntropy"),u=null;if(null!=e&&(u=me(e,"weights","sigmoidCrossEntropy")),T(i.shape,a.shape,"Error in sigmoidCrossEntropy: "),r>0){var s=Oe(r),c=Oe(1),l=Oe(.5);i=i.mul(c.sub(s)).add(l.mul(s))}var f=function(t,n){var e=me(t,"labels","sigmoidCrossEntropyWithLogits"),r=me(n,"logits","sigmoidCrossEntropyWithLogits");T(e.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var o=r.relu(),i=r.mul(e),a=r.abs().neg().exp().log1p();return o.sub(i).add(a)}(i,a);return jl(f,u,o)}}),tf=Ae({softmaxCrossEntropy_:function(t,n,e,r,o){void 0===r&&(r=0),void 0===o&&(o=Wl.SUM_BY_NONZERO_WEIGHTS);var i=me(t,"onehotLabels","softmaxCrossEntropy"),a=me(n,"logits","softmaxCrossEntropy"),u=null;if(null!=e&&(u=me(e,"weights","softmaxCrossEntropy")),T(i.shape,a.shape,"Error in softmaxCrossEntropy: "),r>0){var s=Oe(r),c=Oe(1),l=Oe(i.shape[1]);i=i.mul(c.sub(s)).add(s.div(l))}var f=function(t,n,e){if(void 0===e&&(e=-1),-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+n.rank+" and dim was "+e);return po((function(t,n,r){var o=n.logSumExp([e],!0),i=n.toFloat().sub(o);return r([t,i]),{value:i.mul(t).neg().sum([e]),gradFunc:function(t,n){var r=n[0],o=n[1],i=we(t.shape,[e]);return[t.reshape(i).mul(r.toFloat().sub(o.exp())),t.reshape(i).mul(o.exp().sub(r.toFloat()))]}}}))(t,n)}(i,a);return jl(f,u,o)}}),nf=Object.freeze({get Reduction(){return Wl},absoluteDifference:Kl,computeWeightedLoss:jl,cosineDistance:Xl,hingeLoss:Yl,huberLoss:$l,logLoss:Ql,meanSquaredError:Jl,sigmoidCrossEntropy:Zl,softmaxCrossEntropy:tf});function ef(t,n){return void 0===n&&(n=!1),Ut.tidy((function(){if(2!==t.shape.length)throw new Error("qr2d() requires a 2D Tensor, but got a "+t.shape.length+"D Tensor.");for(var e=t.shape[0],r=t.shape[1],o=Cr(e),i=t.clone(),a=Be([[1]],[1,1]),u=a.clone(),s=e>=r?r:e,c=function(t){var n,s=i,c=u,l=o;n=Ut.tidy((function(){var n=i.slice([t,t],[e-t,1]),s=n.norm(),c=i.slice([t,t],[1,1]),l=Be([[-1]]).where(c.greater(0),Be([[1]])),f=c.sub(l.mul(s)),h=n.div(f);u=1===h.shape[0]?a.clone():a.concat(h.slice([1,0],[h.shape[0]-1,h.shape[1]]),0);var d=l.matMul(f).div(s).neg(),p=i.slice([t,0],[e-t,r]),v=d.mul(u);if(0===t)i=p.sub(v.matMul(u.transpose().matMul(p)));else{var m=p.sub(v.matMul(u.transpose().matMul(p)));i=i.slice([0,0],[t,r]).concat(m,0)}var g=o.slice([0,t],[e,o.shape[1]-t]);if(0===t)o=g.sub(g.matMul(u).matMul(v.transpose()));else{var y=g.sub(g.matMul(u).matMul(v.transpose()));o=o.slice([0,0],[e,t]).concat(y,1)}return[u,i,o]})),u=n[0],i=n[1],o=n[2],ne([s,c,l])},l=0;l<s;++l)c(l);return!n&&e>r&&(o=o.slice([0,0],[e,r]),i=i.slice([0,0],[r,r])),[o,i]}))}var rf=Ae({bandPart_:function(t,n,e){if(n%1!=0)throw new Error("bandPart(): numLower must be an integer, got "+n+".");if(e%1!=0)throw new Error("bandPart(): numUpper must be an integer, got "+e+".");var r=me(t,"a","bandPart");if(r.rank<2)throw new Error("bandPart(): Rank must be at least 2, got "+r.rank+".");var o=r.shape,i=r.shape.slice(-2),a=i[0],u=i[1];if(!(n<=a))throw new Error("bandPart(): numLower ("+n+") must not be greater than the number of rows ("+a+").");if(!(e<=u))throw new Error("bandPart(): numUpper ("+e+") must not be greater than the number of columns ("+u+").");n<0&&(n=a),e<0&&(e=u);var s=Ke(0,a,1,"int32").reshape([-1,1]),c=Ke(0,u,1,"int32"),l=rc(s,c),f=_s(l.lessEqual(Oe(+n,"int32")),l.greaterEqual(Oe(-e,"int32"))),h=Ge([a,u],r.dtype);return Pr(Ur(r.reshape([-1,a,u])).map((function(t){return Bs(f,t,h)}))).reshape(o)}}),of=Ae({gramSchmidt_:function(t){var n;if(Array.isArray(t)){n=!1,A(null!=t&&t.length>0,(function(){return"Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var e=t[0].shape[0],r=function(n){A(t[n].shape[0]===e,(function(){return"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[n].shape[0]+" vs. "+e+")"}))},o=1;o<t.length;++o)r(o)}else n=!0,t=tr(t,t.shape[0],0).map((function(t){return Br(t,[0])}));A(t.length<=t[0].shape[0],(function(){return"Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+")."}));var i=[],a=t,u=function(t){i.push(Ut.tidy((function(){var n=a[t];if(t>0)for(var e=0;e<t;++e){var r=hl(i[e].mulStrict(n)).mul(i[e]);n=n.sub(r)}return n.div(Cl(n,"euclidean"))})))};for(o=0;o<t.length;++o)u(o);return n?Pr(i,0):i}}),af=Ae({qr_:function(t,n){if(void 0===n&&(n=!1),t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return ef(t,n);var e=t.shape.slice(0,t.shape.length-2).reduce((function(t,n){return t*n})),r=Ur(t.reshape([e,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],i=[];return r.forEach((function(t){var e=ef(t,n),r=e[0],a=e[1];o.push(r),i.push(a)})),[Pr(o,0).reshape(t.shape),Pr(i,0).reshape(t.shape)]}}),uf=Object.freeze({bandPart:rf,gramSchmidt:of,qr:af});function sf(t,n,e,r,o,i){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==i&&(i=0);var a=t.shape[0];return e=Math.min(e,a),A(0<=r&&r<=1,(function(){return"iouThreshold must be in [0, 1], but was '"+r+"'"})),A(2===t.rank,(function(){return"boxes must be a 2D tensor, but was of rank '"+t.rank+"'"})),A(4===t.shape[1],(function(){return"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]})),A(1===n.rank,(function(){return"scores must be a 1D tensor"})),A(n.shape[0]===a,(function(){return"scores has incompatible shape with boxes. Expected "+a+", but was "+n.shape[0]})),A(0<=i&&i<=1,(function(){return"softNmsSigma must be in [0, 1], but was '"+i+"'"})),{maxOutputSize:e,iouThreshold:r,scoreThreshold:o,softNmsSigma:i}}var cf=Ae({resizeBilinear_:function(t,n,e){void 0===e&&(e=!1);var r=me(t,"images","resizeBilinear");A(3===r.rank||4===r.rank,(function(){return"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."})),A(2===n.length,(function(){return"Error in resizeBilinear: new shape must 2D, but got shape "+n+"."}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=n[0],u=n[1],s=Ut.runKernelFunc((function(t,n){return n([o]),t.resizeBilinear(o,a,u,e)}),{x:o},(function(t,n){return{x:function(){return Ut.runKernelFunc((function(r){return r.resizeBilinearBackprop(t,n[0],e)}),{})}}}),"ResizeBilinear",{alignCorners:e,newHeight:a,newWidth:u});return i?s.as3D(s.shape[1],s.shape[2],s.shape[3]):s}}),lf=Ae({resizeNearestNeighbor_:function(t,n,e){void 0===e&&(e=!1);var r=me(t,"images","resizeNearestNeighbor");A(3===r.rank||4===r.rank,(function(){return"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."})),A(2===n.length,(function(){return"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+n+"."})),A("float32"===r.dtype||"int32"===r.dtype,(function(){return"`images` must have `int32` or `float32` as dtype"}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=n[0],u=n[1],s=Ut.runKernelFunc((function(t,n){return n([o]),t.resizeNearestNeighbor(o,a,u,e)}),{batchImages:o},(function(t,n){return{batchImages:function(){return Ut.runKernelFunc((function(r){return r.resizeNearestNeighborBackprop(t,n[0],e)}),{})}}}));return i?s.as3D(s.shape[1],s.shape[2],s.shape[3]):s}}),ff=Ae({nonMaxSuppression_:function(t,n,e,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var i=me(t,"boxes","nonMaxSuppression"),a=me(n,"scores","nonMaxSuppression"),u=sf(i,a,e,r,o);e=u.maxOutputSize,r=u.iouThreshold,o=u.scoreThreshold;var s={maxOutputSize:e,iouThreshold:r,scoreThreshold:o};return Ut.runKernelFunc((function(t){return t.nonMaxSuppression(i,a,e,r,o)}),{boxes:i,scores:a},null,"NonMaxSuppressionV3",s)}}),hf=Ae({nonMaxSuppressionWithScore_:function(t,n,e,r,o,i){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===i&&(i=0);var a=me(t,"boxes","nonMaxSuppression"),u=me(n,"scores","nonMaxSuppression"),s=sf(a,u,e,r,o,i),c={maxOutputSize:e=s.maxOutputSize,iouThreshold:r=s.iouThreshold,scoreThreshold:o=s.scoreThreshold,softNmsSigma:i=s.softNmsSigma},l=Ut.runKernel("NonMaxSuppressionV5",{boxes:a,scores:u},c);return{selectedIndices:l[0],selectedScores:l[1]}}}),df=Ae({cropAndResize_:function(t,n,e,r,o,i){var a=me(t,"image","cropAndResize"),u=me(n,"boxes","cropAndResize","float32"),s=me(e,"boxInd","cropAndResize","int32");o=o||"bilinear",i=i||0;var c=u.shape[0];return A(4===a.rank,(function(){return"Error in cropAndResize: image must be rank 4,but got rank "+a.rank+"."})),A(2===u.rank&&4===u.shape[1],(function(){return"Error in cropAndResize: boxes must be have size ["+c+",4] but had shape "+u.shape+"."})),A(1===s.rank&&s.shape[0]===c,(function(){return"Error in cropAndResize: boxInd must be have size ["+c+"] but had shape "+u.shape+"."})),A(2===r.length,(function(){return"Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."})),A(r[0]>=1&&r[1]>=1,(function(){return"cropSize must be atleast [1,1], but was "+r})),A("bilinear"===o||"nearest"===o,(function(){return"method must be bilinear or nearest, but was "+o})),Ut.runKernelFunc((function(t,n){return t.cropAndResize(a,u,s,r,o,i)}),{images:a,boxes:u,boxInd:s},null,"CropAndResize",{method:o,extrapolationValue:i,cropSize:r})}}),pf=Object.freeze({resizeBilinear:cf,resizeNearestNeighbor:lf,nonMaxSuppression:ff,nonMaxSuppressionAsync:function(t,n,e,r,o){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),s(this,void 0,void 0,(function(){var i,a,u,s,l,f,h;return c(this,(function(c){switch(c.label){case 0:return i=me(t,"boxes","nonMaxSuppressionAsync"),a=me(n,"scores","nonMaxSuppressionAsync"),u=sf(i,a,e,r,o),e=u.maxOutputSize,r=u.iouThreshold,o=u.scoreThreshold,[4,Promise.all([i.data(),a.data()])];case 1:return s=c.sent(),l=s[0],f=s[1],h=Ko(l,f,e,r,o),i!==t&&i.dispose(),a!==n&&a.dispose(),[2,h]}}))}))},nonMaxSuppressionWithScore:hf,nonMaxSuppressionWithScoreAsync:function(t,n,e,r,o,i){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===i&&(i=0),s(this,void 0,void 0,(function(){var a,u,s,l,f,h,d;return c(this,(function(c){switch(c.label){case 0:return a=me(t,"boxes","nonMaxSuppressionAsync"),u=me(n,"scores","nonMaxSuppressionAsync"),s=sf(a,u,e,r,o,i),e=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold,i=s.softNmsSigma,[4,Promise.all([a.data(),u.data()])];case 1:return l=c.sent(),f=l[0],h=l[1],d=jo(f,h,e,r,o,i),a!==t&&a.dispose(),u!==n&&u.dispose(),[2,d]}}))}))},cropAndResize:df}),vf=function(t,n){return!(t>0)||"linear"===n},mf=function(t,n,e){if(null==e||"linear"===e)return t;if("relu"===e)return t.mul(n.step());throw new Error("Gradient for activation "+e+" has not been implemented yet.")},gf=function(t,n){var e=n,r=Co(t.shape,n.shape);return r.length>0&&(e=e.sum(r)),e.reshape(t.shape)},yf=function(t,n,e){if("linear"===n)return t;if("relu"===n)return gl(t);if("elu"===n)return pl(t);if("relu6"===n)return yl(t);if("prelu"===n)return ml(t,e);throw new Error("Unknown fused activation "+n+".")},xf=Ae({fusedMatMul_:function(t){var n,e=t.a,r=t.b,o=t.transposeA,i=void 0!==o&&o,a=t.transposeB,u=void 0!==a&&a,s=t.bias,c=t.activation,l=void 0===c?"linear":c,f=t.preluActivationWeights;if(!1===vf(Ut.state.gradientDepth,l)){var h=Bc(e,r,i,u);return null!=s&&(h=Ls(h,s)),yf(h,l,f)}var d=me(e,"a","fused matMul"),p=me(r,"b","fused matMul");n=Ft(d,p),d=n[0],p=n[1];var v=i?d.shape[d.rank-2]:d.shape[d.rank-1],m=u?p.shape[p.rank-1]:p.shape[p.rank-2],g=i?d.shape[d.rank-1]:d.shape[d.rank-2],y=u?p.shape[p.rank-2]:p.shape[p.rank-1],x=d.shape.slice(0,-2),b=p.shape.slice(0,-2),w=_(x),C=_(b);A(d.rank>=2&&p.rank>=2&&d.rank===p.rank,(function(){return"Error in fused matMul: inputs must have the same rank of at least 2, got ranks "+d.rank+" and "+p.rank+"."})),A(F(x,b),(function(){return"Error in fused matMul: outer dimensions ("+x+") and ("+b+") of Tensors with shapes "+d.shape+" and "+p.shape+" must match."})),A(v===m,(function(){return"Error in fused matMul: inner shapes ("+v+") and ("+m+") of Tensors with shapes "+d.shape+" and "+p.shape+" and transposeA="+i+" and transposeB="+u+" must match."}));var E,R,I=d.shape.slice(0,-2).concat([g,y]),k=i?d.as3D(w,v,g):d.as3D(w,g,v),S=u?p.as3D(C,y,m):p.as3D(C,m,y);null!=s&&Eo(I,(E=Ft(E=me(s,"bias","fused matMul"),d)[0]).shape),null!=f&&(R=me(f,"prelu weights","fused matMul"));var T={a:k,b:S};null!=s&&(T.bias=E),null!=f&&(T.preluActivationWeights=R);var D=[k,S];return Ut.runKernelFunc((function(t,n){var e=t.fusedBatchMatMul({a:k,b:S,transposeA:i,transposeB:u,bias:E,activation:l,preluActivationWeights:R});return n([k,S,e]),e}),T,(function(t,n){var e=n[0],r=n[1],o=n[2],a=mf(t,o,l),c={};return null!=s&&(c={bias:function(){return gf(E,a)}}),i||u?!i&&u?Object.assign({a:function(){return a.matMul(r,!1,!1)},b:function(){return a.matMul(e,!0,!1)}},c):i&&!u?Object.assign({a:function(){return r.matMul(a,!1,!0)},b:function(){return e.matMul(a,!1,!1)}},c):Object.assign({a:function(){return r.matMul(a,!0,!0)},b:function(){return a.matMul(e,!0,!0)}},c):Object.assign({a:function(){return a.matMul(r,!1,!0)},b:function(){return e.matMul(a,!0,!1)}},c)}),"_FusedMatMul",{transposeA:i,transposeB:u,activation:l},D,[!0]).reshape(I)}}),bf=Ae({fusedConv2d_:function(t){var n=t.x,e=t.filter,r=t.strides,o=t.pad,i=t.dataFormat,a=void 0===i?"NHWC":i,u=t.dilations,s=void 0===u?[1,1]:u,c=t.dimRoundingMode,l=t.bias,f=t.activation,h=void 0===f?"linear":f,d=t.preluActivationWeights;if(h=h||"linear",!1===vf(Ut.state.gradientDepth,h)){var p=kc(n,e,r,o,a,s,c);return null!=l&&(p=Ls(p,l)),yf(p,h,d)}var v=me(n,"x","conv2d"),m=me(e,"filter","conv2d"),g=v,y=!1;3===v.rank&&(y=!0,g=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),A(4===g.rank,(function(){return"Error in fused conv2d: input must be rank 4, but got rank "+g.rank+"."})),A(4===m.rank,(function(){return"Error in fused conv2d: filter must be rank 4, but got rank "+m.rank+"."})),null!=c&&A(O(o),(function(){return"Error in fused conv2d: pad must be an integer when using, dimRoundingMode "+c+" but got pad "+o+"."})),A(g.shape[3]===m.shape[2],(function(){return"Error in conv2d: depth of input ("+g.shape[3]+") must match input depth for filter "+m.shape[2]+"."})),A(Oo(r,s),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+s+"'"})),A("NHWC"===a,(function(){return"Error in conv2d: got dataFormat of "+a+" but only NHWC is currently supported."}));var x,b,w=ko(g.shape,m.shape,r,s,o,c);null!=l&&(x=Ft(x=me(l,"bias","fused conv2d"),v)[0],Eo(w.outShape,x.shape)),null!=d&&(b=me(d,"prelu weights","fused conv2d"));var C={x:g,filter:m};null!=l&&(C.bias=x),null!=d&&(C.preluActivationWeights=b);var E=[m,g],R=Ut.runKernelFunc((function(t,n){var e=t.fusedConv2d({input:g,filter:m,convInfo:w,bias:x,activation:h,preluActivationWeights:b});return n([m,g,e]),e}),C,(function(t,n){var e=n,i=e[0],a=e[1],u=e[2],c=mf(t,u,h);A(Fo(s),(function(){return"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+s+"'"}));var f={};return null!=l&&(f={bias:function(){return gf(x,c)}}),Object.assign({x:function(){return Tc(a.shape,c,i,r,o)},filter:function(){return Ac(a,c,i.shape,r,o)}},f)}),"FusedConv2D",{convInfo:w,activation:h},E,[!0]);return y?R.as3D(R.shape[1],R.shape[2],R.shape[3]):R}}),wf=Ae({fusedDepthwiseConv2d_:function(t){var n=t.x,e=t.filter,r=t.strides,o=t.pad,i=t.dataFormat,a=void 0===i?"NHWC":i,u=t.dilations,s=void 0===u?[1,1]:u,c=t.dimRoundingMode,l=t.bias,f=t.activation,h=void 0===f?"linear":f,d=t.preluActivationWeights;if(!1===vf(Ut.state.gradientDepth,h)){var p=Dc(n,e,r,o,a,s,c);return null!=l&&(p=Ls(p,l)),yf(p,h,d)}var v=me(n,"x","depthwiseConv2d"),m=me(e,"filter","depthwiseConv2d"),g=v,y=!1;3===v.rank&&(y=!0,g=v.as4D(1,v.shape[0],v.shape[1],v.shape[2])),A(4===g.rank,(function(){return"Error in fused depthwiseConv2d: input must be rank 4, but got rank "+g.rank+"."})),A(4===m.rank,(function(){return"Error in fused depthwiseConv2d: filter must be rank 4, but got rank "+m.rank+"."})),A(g.shape[3]===m.shape[2],(function(){return"Error in fused depthwiseConv2d: number of input channels ("+g.shape[3]+") must match the inChannels dimension in filter "+m.shape[2]+"."})),null==s&&(s=[1,1]),A(Oo(r,s),(function(){return"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+s+"'"})),null!=c&&A(O(o),(function(){return"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode "+c+" but got pad "+o+"."}));var x,b,w=ko(g.shape,m.shape,r,s,o,c,!0);null!=l&&(x=Ft(x=me(l,"bias","fused conv2d"),v)[0],Eo(w.outShape,x.shape)),null!=d&&(b=me(d,"prelu weights","fused depthwiseConv2d"));var C={x:g,filter:m};null!=l&&(C.bias=x),null!=d&&(C.preluActivationWeights=b);var E=[m,g],R=Ut.runKernelFunc((function(t,n){var e=t.fusedDepthwiseConv2D({input:g,filter:m,convInfo:w,bias:x,activation:h,preluActivationWeights:b});return n([m,g,e]),e}),C,(function(t,n){A(Fo(s),(function(){return"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+s+"'"}));var e=n[0],r=n[1],o=n[2],i=mf(t,o,h),a={};return null!=l&&(a={bias:function(){return gf(x,i)}}),Object.assign({x:function(){return Nc(r.shape,i,e,w)},filter:function(){return _c(r,i,e.shape,w)}},a)}),"FusedDepthwiseConv2D",{convInfo:w,activation:h},E,[!0]);return y?R.as3D(R.shape[1],R.shape[2],R.shape[3]):R}}),Cf=Object.freeze({matMul:xf,conv2d:bf,depthwiseConv2d:wf}),Ef=Object.freeze({image:pf,linalg:uf,losses:nf,spectral:Fl,fused:Cf,signal:Hl,square:Mu,squaredDifference:Pu,conv1d:Ic,conv2d:kc,conv3d:Sc,depthwiseConv2d:Dc,separableConv2d:Fc,conv2dTranspose:Oc,conv3dTranspose:Mc,op:Ae,batchNormalization2d:Rs,batchNormalization3d:Is,batchNormalization4d:ks,batchNormalization:Ss,batchNorm:As,batchNorm2d:Ts,batchNorm3d:Ds,batchNorm4d:Ns,booleanMaskAsync:wc,complex:Te,real:De,imag:Ne,concat:Ye,concat1d:$e,concat2d:Qe,concat3d:Je,concat4d:Ze,split:tr,matMul:Bc,dot:Pc,outerProduct:Lc,reverse:Wc,reverse1d:Uc,reverse2d:zc,reverse3d:Vc,reverse4d:Gc,maxPool:Kc,avgPool:jc,pool:Xc,maxPool3d:Yc,avgPool3d:$c,slice:Qc,slice1d:Jc,slice2d:Zc,slice3d:tl,slice4d:nl,abs:Lu,acos:Wu,acosh:Uu,asin:zu,asinh:Vu,atan:Gu,atanh:Hu,ceil:qu,clipByValue:Ku,cos:ju,cosh:Xu,erf:Yu,exp:$u,expm1:Qu,floor:Ju,log:Zu,log1p:ts,logSigmoid:ns,neg:es,reciprocal:rs,round:os,rsqrt:is,sigmoid:as,sign:us,isNaN:ss,isInf:cs,isFinite:ls,sin:fs,sinh:hs,softplus:ds,sqrt:ps,step:vs,tan:ms,tanh:gs,all:rl,any:ol,argMax:il,argMin:al,logSumExp:ul,max:sl,mean:cl,min:ll,moments:fl,sum:hl,prod:dl,equal:ic,equalStrict:ac,greater:uc,greaterEqual:sc,greaterEqualStrict:cc,greaterStrict:lc,less:fc,lessEqual:hc,lessEqualStrict:dc,lessStrict:pc,notEqual:vc,notEqualStrict:mc,add:Ls,addN:Ws,addStrict:Us,atan2:zs,div:Vs,divNoNan:Gs,divStrict:Hs,floorDiv:qs,maximum:Ks,maximumStrict:js,minimum:Xs,minimumStrict:Ys,mod:$s,modStrict:Qs,mul:Js,mulStrict:Zs,pow:tc,powStrict:nc,squaredDifferenceStrict:ec,sub:rc,subStrict:oc,elu:pl,leakyRelu:vl,prelu:ml,relu:gl,relu6:yl,selu:xl,logicalAnd:_s,logicalNot:Fs,logicalOr:Os,logicalXor:Ms,where:Bs,whereAsync:Ps,buffer:dr,print:pr,batchToSpaceND:vr,broadcastTo:mr,cast:gr,clone:yr,cumsum:xr,depthToSpace:br,expandDims:wr,eye:Cr,multinomial:Er,oneHot:Rr,pad:Ir,pad1d:kr,pad2d:Sr,pad3d:Ar,pad4d:Tr,rand:Dr,randomNormal:Nr,randomGamma:_r,randomUniform:Fr,reshape:Or,spaceToBatchND:Mr,squeeze:Br,stack:Pr,tile:Lr,truncatedNormal:Wr,unstack:Ur,setdiff1dAsync:zr,fill:He,linspace:qe,ones:Ve,range:Ke,scalar:Oe,tensor:_e,tensor1d:Me,tensor2d:Be,tensor3d:Pe,tensor4d:Le,tensor5d:We,tensor6d:Ue,variable:ze,zeros:Ge,onesLike:je,zerosLike:Xe,transpose:bl,softmax:mo,logSoftmax:go,localResponseNormalization:wl,norm:Cl,gather:xc,unsortedSegmentSum:bc,basicLSTMCell:El,multiRNNCell:Rl,movingAverage:Il,stridedSlice:kl,topk:Sl,scatterND:Al,fft:Tl,ifft:Dl,rfft:Nl,irfft:_l,sparseToDense:Ol,gatherND:Ml,diag:Bl,dropout:Pl,hannWindow:Ul,hammingWindow:zl,frame:Vl,stft:Gl,inTopKAsync:ql});function Rf(t,n){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&A("complex64"!==t.dtype,(function(){return n+" does not support complex64 tensors."}))}))}function If(t,n,e,r){if("linear"===e)return t.linear(n);if("relu"===e)return t.relu(n);if("elu"===e)return t.elu(n);if("relu6"===e)return t.relu6(n);if("prelu"===e)return t.prelu(n,r);throw new Error("Activation "+e+" has not been implemented for the CPU backend.")}var kf=function(t){function n(){var n=t.call(this)||this;return n.blockSize=48,n.firstUse=!0,n.data=new yo(n,Ut),n}return u(n,t),n.prototype.write=function(t,n,e){this.firstUse&&(this.firstUse=!1,h().get("IS_NODE")&&de("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================"));var r={};return this.data.set(r,{values:t,dtype:e}),r},n.prototype.move=function(t,n,e,r){this.data.set(t,{values:n,dtype:r})},n.prototype.numDataIds=function(){return this.data.numDataIds()},n.prototype.read=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){return[2,this.readSync(t)]}))}))},n.prototype.readSync=function(t){var n=this.data.get(t),e=n.dtype,r=n.complexTensors;return"complex64"===e?Uo(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},n.prototype.bufferSync=function(t){var n=this.readSync(t.dataId),e=n;if("string"===t.dtype)try{e=n.map((function(t){return lt(t)}))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return dr(t.shape,t.dtype,e)},n.prototype.makeOutput=function(t,n,e){var r=this.write(t,n,e);return Ut.makeTensorFromDataId(r,n,e,this)},n.prototype.disposeData=function(t){if(this.data.has(t)){var n=this.data.get(t).complexTensors;null!=n&&(n.real.dispose(),n.imag.dispose()),this.data.delete(t)}},n.prototype.time=function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){return n=ut(),t(),[2,{kernelMs:ut()-n}]}))}))},n.prototype.memory=function(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}},n.prototype.complex=function(t,n){var e=this.makeOutput(null,t.shape,"complex64");return this.data.get(e.dataId).complexTensors={real:Ut.keep(t.clone()),imag:Ut.keep(n.clone())},e},n.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},n.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},n.prototype.slice=function(t,n,e){if(Rf(t,"slice"),io(t.shape,n,e)){var r=ao(n,t.strides),o=_(e);return _e(this.readSync(t.dataId).subarray(r,r+o),e,t.dtype)}for(var i=dr(e,t.dtype),a=this.bufferSync(t),u=0;u<i.size;++u){var s=i.indexToLoc(u).map((function(t,e){return t+n[e]}));i.values[u]=a.get.apply(a,s)}return i.toTensor()},n.prototype.stridedSlice=function(t,n,e,r){Rf(t,"stridedSlice");var o=eo(n,e,r);if(o.some((function(t){return 0===t})))return _e([],o);for(var i=dr(o,t.dtype),a=this.bufferSync(t),u=0;u<i.size;u++){for(var s=i.indexToLoc(u),c=new Array(s.length),l=0;l<c.length;l++)c[l]=s[l]*r[l]+n[l];i.set.apply(i,[a.get.apply(a,c)].concat(s))}return i.toTensor()},n.prototype.diag=function(t){for(var n=this.readSync(t.dataId),e=dr([t.size,t.size],t.dtype),r=e.values,o=0;o<n.length;o++)r[o*t.size+o]=n[o];return e.toTensor()},n.prototype.unstack=function(t,n){for(var e=t.shape[n],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==n&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),u=t.shape.slice();u[n]=1;var s=new Array(e);for(i=0;i<s.length;i++)a[n]=i,s[i]=this.slice(t,a,u).reshape(r);return s},n.prototype.reverse=function(t,n){Rf(t,"reverse");for(var e=dr(t.shape,t.dtype),r=this.bufferSync(t),o=function(o){var i=e.indexToLoc(o),a=i.slice();n.forEach((function(n){return a[n]=t.shape[n]-1-a[n]})),e.set.apply(e,[r.get.apply(r,a)].concat(i))},i=0;i<e.size;i++)o(i);return e.toTensor()},n.prototype.concat=function(t,n){var e=this;if("complex64"===t[0].dtype){var r=t.map((function(t){return De(t)})),o=t.map((function(t){return Ne(t)}));return Te(this.concat(r,n),this.concat(o,n))}var i=t.map((function(t){var e=_(t.shape.slice(n));return t.as2D(-1,e)})),a=Se(i.map((function(t){return t.shape})),1),u=dr(a,t[0].dtype).values;if(1===i[0].shape[0]){var s=0;i.forEach((function(t){u.set(e.readSync(t.dataId),s),s+=t.size}))}else{var c=0;i.forEach((function(t){for(var n=e.readSync(t.dataId),r=0,o=0;o<t.shape[0];++o)for(var i=o*a[1]+c,s=0;s<t.shape[1];++s)u[i+s]=n[r++];c+=t.shape[1]}))}var l=Se(t.map((function(t){return t.shape})),n);return _e(u,l,t[0].dtype)},n.prototype.neg=function(t){return Rf(t,"neg"),this.multiply(Oe(-1),t)},n.prototype.add=function(t,n){return"complex64"===t.dtype||"complex64"===n.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),n.cast("complex64"),(function(t,n,e,r){return{real:t+e,imag:n+r}})):this.broadcastedBinaryOp(t,n,Nt(t.dtype,n.dtype),(function(t,n){return t+n}))},n.prototype.addN=function(t){var n=this;Rf(t,"addN");for(var e=t.map((function(t){return n.readSync(t.dataId)})),r=dr(t[0].shape,t[0].dtype),o=r.values,i=0;i<t.length;i++)for(var a=e[i],u=0;u<o.length;u++)o[u]+=a[u];return r.toTensor()},n.prototype.softmax=function(t,n){var e=U([n],t.shape),r=this.max(t,e),o=we(r.shape,e),i=this.subtract(t,r.reshape(o)),a=this.exp(i),u=this.sum(a,e).reshape(o);return this.realDivide(a,u)},n.prototype.subtract=function(t,n){return"complex64"===t.dtype||"complex64"===n.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),n.cast("complex64"),(function(t,n,e,r){return{real:t-e,imag:n-r}})):this.broadcastedBinaryOp(t,n,Nt(t.dtype,n.dtype),(function(t,n){return t-n}))},n.prototype.pow=function(t,n){return Rf([t,n],"pow"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){return Math.pow(t,n)}))},n.prototype.batchMatMul=function(t,n,e,r){Rf([t,n],"matMul");for(var o=e?t.shape[1]:t.shape[2],i=e?t.shape[2]:t.shape[1],a=r?n.shape[1]:n.shape[2],u=t.shape[0],s=this.readSync(t.dataId),c=this.readSync(n.dataId),l=e?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],f=l[0],h=l[1],d=l[2],p=r?[1,n.strides[1],n.strides[0]]:[n.strides[1],1,n.strides[0]],v=p[0],m=p[1],g=p[2],y=i*a,x=dr([u,i,a],t.dtype),b=x.values,w=this.blockSize,C=0;C<u;C++)for(var E=0;E<i;E+=w)for(var R=0;R<a;R+=w)for(var I=0;I<o;I+=w)for(var k=Math.min(E+w,i),S=Math.min(R+w,a),A=Math.min(I+w,o),T=E;T<k;T++)for(var D=R;D<S;D++){for(var N=0,_=I;_<A;_++)N+=s[C*f+T*h+_*d]*c[_*v+D*m+C*g];b[C*y+(T*a+D)]+=N}return x.toTensor()},n.prototype.fusedBatchMatMul=function(t){var n=t.a,e=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,u=t.preluActivationWeights,s=this.batchMatMul(n,e,r,o);return i&&(s=this.add(s,i)),a&&(s=If(this,s,a,u)),s},n.prototype.multiply=function(t,n){return"complex64"===t.dtype||"complex64"===n.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),n.cast("complex64"),(function(t,n,e,r){return{real:t*e-n*r,imag:t*r+n*e}})):this.broadcastedBinaryOp(t,n,Nt(t.dtype,n.dtype),(function(t,n){return t*n}))},n.prototype.realDivide=function(t,n){return Rf([t,n],"realDivide"),this.broadcastedBinaryOp(t,n,"float32",(function(t,n){return t/n}))},n.prototype.floorDiv=function(t,n){return Rf([t,n],"floorDiv"),this.broadcastedBinaryOp(t,n,"int32",(function(t,n){return Math.floor(t/n)}))},n.prototype.sum=function(t,n){Rf(t,"sum"),Ce("sum",n,t.rank);for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,Nt(t.dtype,"int32")),a=_(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=0,h=0;h<a;++h)f+=s[l+h];u[c]=f}return i},n.prototype.prod=function(t,n){Rf(t,"sum");for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,Nt(t.dtype,"int32")),a=_(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=1,h=0;h<a;++h)f*=s[l+h];u[c]=f}return i},n.prototype.unsortedSegmentSum=function(t,n,e){Rf(t,"unsortedSegmentSum");for(var r=[],o=t.rank-n.rank,i=0;i<o;++i)n=n.expandDims(i+1);for(i=0;i<e;++i){var a=Oe(i,"int32"),u=ic(a,n).asType("float32").mul(t).sum(0);r.push(u)}return Pr(r)},n.prototype.argMin=function(t,n){Rf(t,"argMin");var e=[n];Ce("argMin",e,t.rank);for(var r=be(t.shape,e),o=r[0],i=r[1],a=Ge(o,"int32"),u=_(i),s=this.readSync(a.dataId),c=this.readSync(t.dataId),l=0;l<s.length;++l){for(var f=l*u,h=c[f],d=0,p=0;p<u;++p){var v=c[f+p];v<h&&(h=v,d=p)}s[l]=d}return a},n.prototype.argMax=function(t,n){Rf(t,"argMax");var e=[n];Ce("argMax",e,t.rank);for(var r=be(t.shape,e),o=r[0],i=r[1],a=Ge(o,"int32"),u=_(i),s=this.readSync(a.dataId),c=this.readSync(t.dataId),l=0;l<s.length;++l){for(var f=l*u,h=c[f],d=0,p=0;p<u;++p){var v=c[f+p];v>h&&(h=v,d=p)}s[l]=d}return a},n.prototype.cumsum=function(t,n,e,r){if(Rf(t,"cumsum"),n!==t.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis="+(t.rank-1)+" but got axis="+n);for(var o=Nt(t.dtype,"int32"),i=Ge(t.shape,o),a=this.readSync(i.dataId),u=this.readSync(t.dataId),s=t.shape[t.rank-1],c=r?function(t,n){return t+s-n-1}:function(t,n){return t+n},l=0;l<u.length;l+=s)for(var f=0;f<s;f++){var h=c(l,f);if(0===f)a[h]=e?0:u[h];else{var d=c(l,f-1);a[h]=e?u[d]+a[d]:u[h]+a[d]}}return i},n.prototype.equal=function(t,n){return Rf([t,n],"equal"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t===n?1:0}))},n.prototype.notEqual=function(t,n){return Rf([t,n],"notEqual"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t!==n?1:0}))},n.prototype.less=function(t,n){return Rf([t,n],"less"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t<n?1:0}))},n.prototype.lessEqual=function(t,n){return Rf([t,n],"lessEqual"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t<=n?1:0}))},n.prototype.greater=function(t,n){return Rf([t,n],"greater"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t>n?1:0}))},n.prototype.greaterEqual=function(t,n){return Rf([t,n],"greaterEqual"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t>=n?1:0}))},n.prototype.logicalNot=function(t){Rf(t,"logicalNot");for(var n=this.readSync(t.dataId),e=new Uint8Array(n.length),r=0;r<n.length;++r)e[r]=n[r]?0:1;return this.makeOutput(e,t.shape,"bool")},n.prototype.logicalAnd=function(t,n){return Rf([t,n],"logicalAnd"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t&&n}))},n.prototype.logicalOr=function(t,n){return Rf([t,n],"logicalOr"),this.broadcastedBinaryOp(t,n,"bool",(function(t,n){return t||n}))},n.prototype.select=function(t,n,e){Rf([t,n,e],"select");for(var r=this.readSync(t.dataId),o=this.readSync(n.dataId),i=this.readSync(e.dataId),a=Ge(n.shape,Nt(n.dtype,e.dtype)),u=this.readSync(a.dataId),s=0,c=0===t.rank||t.rank>1||1===n.rank?1:_(n.shape.slice(1)),l=0;l<r.length;l++)for(var f=0;f<c;f++)1===r[l]?u[s++]=o[l]:u[s++]=i[l];return a},n.prototype.where=function(t){Rf([t],"where");var n=this.readSync(t.dataId);return ni(t.shape,n)},n.prototype.topk=function(t,n,e){return Rf(t,"topk"),ti(this.readSync(t.dataId),t.shape,t.dtype,n)},n.prototype.min=function(t,n){Rf(t,"min"),Ce("min",n,t.rank);for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,t.dtype),a=_(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=s[l],h=0;h<a;++h){var d=s[l+h];d<f&&(f=d)}u[c]=f}return i},n.prototype.minimum=function(t,n){return Rf([t,n],"minimum"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){return Math.min(t,n)}))},n.prototype.mod=function(t,n){return Rf([t,n],"mod"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){var e=t%n;return t<0&&n<0||t>=0&&n>=0?e:(e+n)%n}))},n.prototype.max=function(t,n){Rf(t,"max"),Ce("max",n,t.rank);for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,t.dtype),a=_(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=s[l],h=0;h<a;++h){var d=s[l+h];d>f&&(f=d)}u[c]=f}return i},n.prototype.maximum=function(t,n){return Rf([t,n],"maximum"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){return Math.max(t,n)}))},n.prototype.all=function(t,n){Rf(t,"all"),Ce("all",n,t.rank);for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,t.dtype),a=_(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=s[l],h=0;h<a;++h){var d=s[l+h];f=f&&d}u[c]=f}return i},n.prototype.any=function(t,n){Rf(t,"any"),Ce("any",n,t.rank);for(var e=be(t.shape,n),r=e[0],o=e[1],i=Ge(r,t.dtype),a=_(o),u=this.readSync(i.dataId),s=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*a,f=s[l],h=0;h<a;++h){var d=s[l+h];f=f||d}u[c]=f}return i},n.prototype.squaredDifference=function(t,n){return Rf([t,n],"squaredDifference"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){var e=t-n;return e*e}))},n.prototype.ceil=function(t){Rf(t,"ceil");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)e[r]=Math.ceil(n[r]);return this.makeOutput(e,t.shape,"float32")},n.prototype.floor=function(t){Rf(t,"floor");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)e[r]=Math.floor(n[r]);return this.makeOutput(e,t.shape,"float32")},n.prototype.sign=function(t){Rf(t,"x");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)n[r]<0?e[r]=-1:n[r]>0?e[r]=1:e[r]=0;return this.makeOutput(e,t.shape,"float32")},n.prototype.isNaN=function(t){Rf(t,"x");for(var n=this.readSync(t.dataId),e=new Uint8Array(n.length),r=0;r<n.length;++r)Number.isNaN(n[r])&&(e[r]=1);return this.makeOutput(e,t.shape,"bool")},n.prototype.isInf=function(t){Rf(t,"x");for(var n=this.readSync(t.dataId),e=new Uint8Array(n.length),r=0;r<n.length;++r)Math.abs(n[r])===1/0&&(e[r]=1);return this.makeOutput(e,t.shape,"bool")},n.prototype.isFinite=function(t){Rf(t,"x");for(var n=this.readSync(t.dataId),e=new Uint8Array(n.length),r=0;r<n.length;++r)Number.isFinite(n[r])&&(e[r]=1);return this.makeOutput(e,t.shape,"bool")},n.prototype.round=function(t){Rf(t,"round");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r){var o=Math.floor(n[r]);n[r]-o<.5?e[r]=Math.floor(n[r]):n[r]-o>.5?e[r]=Math.ceil(n[r]):e[r]=o%2==0?o:o+1}return this.makeOutput(e,t.shape,"float32")},n.prototype.exp=function(t){Rf(t,"exp");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)e[r]=Math.exp(n[r]);return this.makeOutput(e,t.shape,"float32")},n.prototype.expm1=function(t){Rf(t,"expm1");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)e[r]=Math.expm1(n[r]);return this.makeOutput(e,t.shape,"float32")},n.prototype.log=function(t){Rf(t,"log");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r){var o=n[r];e[r]=Math.log(o)}return this.makeOutput(e,t.shape,"float32")},n.prototype.log1p=function(t){Rf(t,"log1p");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r){var o=n[r];e[r]=Math.log1p(o)}return this.makeOutput(e,t.shape,"float32")},n.prototype.sqrt=function(t){Rf(t,"sqrt");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r){var o=n[r];e[r]=Math.sqrt(o)}return this.makeOutput(e,t.shape,"float32")},n.prototype.rsqrt=function(t){Rf(t,"rsqrt");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r){var o=n[r];e[r]=1/Math.sqrt(o)}return this.makeOutput(e,t.shape,"float32")},n.prototype.reciprocal=function(t){Rf(t,"reciprocal");for(var n=this.readSync(t.dataId),e=new Float32Array(n.length),r=0;r<n.length;++r)e[r]=1/n[r];return this.makeOutput(e,t.shape,"float32")},n.prototype.linear=function(t){return t},n.prototype.relu=function(t){Rf(t,"relu");for(var n=Ge(t.shape,t.dtype),e=this.readSync(n.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)e[o]=Math.max(0,r[o]);return n},n.prototype.relu6=function(t){Rf(t,"relu");for(var n=Ge(t.shape,t.dtype),e=this.readSync(n.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)e[o]=Math.min(Math.max(0,r[o]),6);return n},n.prototype.prelu=function(t,n){return Rf([t,n],"prelu"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){return t<0?n*t:t}))},n.prototype.elu=function(t){Rf(t,"elu");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r){var o=e[r];n[r]=o>=0?o:Math.exp(o)-1}return this.makeOutput(n,t.shape,"float32")},n.prototype.eluDer=function(t,n){Rf([t,n],"eluDer");for(var e=new Float32Array(n.size),r=this.readSync(n.dataId),o=this.readSync(t.dataId),i=0;i<r.length;++i){var a=r[i];e[i]=a>=1?o[i]:o[i]*(a+1)}return this.makeOutput(e,n.shape,"float32")},n.prototype.selu=function(t){Rf(t,"selu");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r){var o=e[r];n[r]=o>=0?1.0507009873554805*o:1.7580993408473768*(Math.exp(o)-1)}return this.makeOutput(n,t.shape,"float32")},n.prototype.clip=function(t,n,e){Rf(t,"clip");for(var r=new Float32Array(t.size),o=this.readSync(t.dataId),i=0;i<o.length;++i){var a=o[i];r[i]=a>e?e:a<n?n:a}return this.makeOutput(r,t.shape,"float32")},n.prototype.abs=function(t){for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.abs(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.complexAbs=function(t){for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<t.size;++r){var o=e[2*r],i=e[2*r+1];n[r]=Math.hypot(o,i)}return this.makeOutput(n,t.shape,"float32")},n.prototype.int=function(t){Rf(t,"int");for(var n=new Int32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=e[r];return this.makeOutput(n,t.shape,"int32")},n.prototype.sigmoid=function(t){Rf(t,"sigmoid");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=1/(1+Math.exp(-e[r]));return this.makeOutput(n,t.shape,"float32")},n.prototype.softplus=function(t){Rf(t,"softplus");for(var n=Math.log(1.1920928955078125e-7)+2,e=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i,a=r[o]>-n,u=r[o]<n,s=Math.exp(r[o]);i=u?s:a?r[o]:Math.log(1+s),e[o]=i}return this.makeOutput(e,t.shape,"float32")},n.prototype.sin=function(t){Rf(t,"sin");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.sin(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.cos=function(t){Rf(t,"cos");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.cos(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.tan=function(t){Rf(t,"tan");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.tan(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.asin=function(t){Rf(t,"asin");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.asin(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.acos=function(t){Rf(t,"acos");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.acos(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.atan=function(t){Rf(t,"atan");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.atan(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.atan2=function(t,n){return Rf([t,n],"atan2"),this.broadcastedBinaryOp(t,n,t.dtype,(function(t,n){return Math.atan2(t,n)}))},n.prototype.sinh=function(t){Rf(t,"sinh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.sinh(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.cosh=function(t){Rf(t,"cosh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.cosh(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.tanh=function(t){Rf(t,"tanh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=M(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.asinh=function(t){Rf(t,"asinh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.asinh(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.acosh=function(t){Rf(t,"acosh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.acosh(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.atanh=function(t){Rf(t,"atanh");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r)n[r]=Math.atanh(e[r]);return this.makeOutput(n,t.shape,"float32")},n.prototype.erf=function(t){Rf(t,"erf");for(var n=new Float32Array(t.size),e=this.readSync(t.dataId),r=0;r<e.length;++r){var o=Math.sign(e[r]),i=Math.abs(e[r]),a=1/(1+.3275911*i);n[r]=o*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-i*i))}return this.makeOutput(n,t.shape,"float32")},n.prototype.step=function(t,n){void 0===n&&(n=0),Rf(t,"step");for(var e=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i=r[o];isNaN(i)?e[o]=NaN:e[o]=i>0?1:n}return this.makeOutput(e,t.shape,"float32")},n.prototype.fusedConv2d=function(t){var n=t.input,e=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights,u=this.conv2d(n,e,r);return o&&(u=this.add(u,o)),i&&(u=If(this,u,i,a)),u},n.prototype.conv2d=function(t,n,e){Rf([t,n],"conv2d");for(var r=e.filterHeight,o=e.filterWidth,i=e.dilationHeight,a=e.dilationWidth,u=e.padInfo.left,s=e.padInfo.top,c="channelsLast"===e.dataFormat,l=dr(e.outShape,t.dtype),f=t.strides[0],h=c?t.strides[1]:t.strides[2],d=c?t.strides[2]:1,p=c?1:t.strides[1],v=l.strides[0],m=c?l.strides[1]:l.strides[2],g=c?l.strides[2]:1,y=c?1:l.strides[1],x=this.readSync(t.dataId),b=this.readSync(n.dataId),w=l.values,C=0;C<e.batchSize;++C)for(var E=C*f,R=C*v,I=0;I<e.outHeight;++I)for(var k=R+I*m,S=I*e.strideHeight-s,A=0;A<r;A++){var T=S+A*i;if(!(T<0||T>=e.inHeight))for(var D=A*n.strides[0],N=E+T*h,_=0;_<e.outWidth;++_)for(var F=k+_*g,O=_*e.strideWidth-u,M=0;M<o;M++){var B=O+M*a;if(!(B<0||B>=e.inWidth))for(var P=N+B*d,L=D+M*n.strides[1],W=0;W<e.inChannels;++W){for(var U=x[P+W*p],z=0;z<e.outChannels;++z)w[F+z*y]+=U*b[L+z];L+=e.outChannels}}}return l.toTensor()},n.prototype.conv3d=function(t,n,e){for(var r=e.filterDepth,o=e.filterHeight,i=e.filterWidth,a=e.dilationDepth,u=e.dilationHeight,s=e.dilationWidth,c=e.padInfo.front,l=e.padInfo.left,f=e.padInfo.top,h=dr(e.outShape,t.dtype),d=this.readSync(t.dataId),p=this.readSync(n.dataId),v=h.values,m=0;m<e.batchSize;++m)for(var g=m*t.strides[0],y=m*h.strides[0],x=0;x<e.outDepth;++x)for(var b=y+x*h.strides[1],w=x*e.strideDepth-c,C=0;C<r;C++){var E=w+C*a;if(!(E<0||E>=e.inDepth))for(var R=C*n.strides[0],I=g+E*t.strides[1],k=0;k<e.outHeight;++k)for(var S=b+k*h.strides[2],A=k*e.strideHeight-f,T=0;T<o;T++){var D=A+T*u;if(!(D<0||D>=e.inHeight))for(var N=R+T*n.strides[1],_=I+D*t.strides[2],F=0;F<e.outWidth;++F)for(var O=S+F*e.outChannels,M=F*e.strideWidth-l,B=0;B<i;B++){var P=M+B*s;if(!(P<0||P>=e.inWidth))for(var L=N+B*n.strides[2],W=_+P*e.inChannels,U=L,z=0;z<e.inChannels;++z){for(var V=d[W+z],G=0;G<e.outChannels;++G)v[O+G]+=V*p[U+G];U+=e.outChannels}}}}return h.toTensor()},n.prototype.conv2dDerInput=function(t,n,e){Rf([t,n],"conv2dDerInput");for(var r=dr(e.inShape,"float32"),o=r.values,i=this.readSync(t.dataId),a=this.readSync(n.dataId),u=n.strides,s=u[0],c=u[1],l=u[2],f=e.batchSize,h=e.filterHeight,d=e.filterWidth,p=e.inChannels,v=e.inHeight,m=e.inWidth,g=e.outChannels,y=e.outHeight,x=e.outWidth,b=e.strideHeight,w=e.strideWidth,C=e.dataFormat,E=h-1-e.padInfo.top,R=d-1-e.padInfo.left,I="channelsLast"===C,k=r.strides[0],S=I?r.strides[1]:r.strides[2],A=I?r.strides[2]:1,T=I?1:r.strides[1],D=t.strides[0],N=I?t.strides[1]:t.strides[2],_=I?t.strides[2]:1,F=I?1:t.strides[1],O=0;O<f;++O)for(var M=0;M<p;++M)for(var B=0;B<v;++B)for(var P=B-E,L=Math.max(0,Math.ceil(P/b)),W=Math.min(y,(h+P)/b),U=0;U<m;++U){for(var z=U-R,V=Math.max(0,Math.ceil(z/w)),G=Math.min(x,(d+z)/w),H=0,q=L;q<W;++q)for(var K=q*b-P,j=V;j<G;++j)for(var X=D*O+N*q+_*j,Y=s*(h-1-K)+c*(d-1-(j*w-z))+l*M,$=0;$<g;++$)H+=i[X+F*$]*a[Y+$];o[k*O+S*B+A*U+T*M]=H}return r.toTensor()},n.prototype.conv3dDerInput=function(t,n,e){for(var r=dr(e.inShape,"float32"),o=r.values,i=r.strides,a=i[0],u=i[1],s=i[2],c=i[3],l=this.readSync(t.dataId),f=t.strides,h=f[0],d=f[1],p=f[2],v=f[3],m=this.readSync(n.dataId),g=n.strides,y=g[0],x=g[1],b=g[2],w=g[3],C=e.batchSize,E=e.filterDepth,R=e.filterHeight,I=e.filterWidth,k=e.inChannels,S=e.inDepth,A=e.inHeight,T=e.inWidth,D=e.outChannels,N=e.outDepth,_=e.outHeight,F=e.outWidth,O=e.strideDepth,M=e.strideHeight,B=e.strideWidth,P=E-1-e.padInfo.front,L=R-1-e.padInfo.top,W=I-1-e.padInfo.left,U=0;U<C;++U)for(var z=0;z<k;++z)for(var V=0;V<S;++V)for(var G=V-P,H=Math.max(0,Math.ceil(G/O)),q=Math.min(N,(E+G)/O),K=0;K<A;++K)for(var j=K-L,X=Math.max(0,Math.ceil(j/M)),Y=Math.min(_,(R+j)/M),$=0;$<T;++$){for(var Q=$-W,J=Math.max(0,Math.ceil(Q/B)),Z=Math.min(F,(I+Q)/B),tt=0,nt=H;nt<q;++nt)for(var et=nt*O-G,rt=X;rt<Y;++rt)for(var ot=rt*M-j,it=J;it<Z;++it)for(var at=h*U+d*nt+p*rt+v*it,ut=y*(E-1-et)+x*(R-1-ot)+b*(I-1-(it*B-Q))+w*z,st=0;st<D;++st)tt+=l[at+st]*m[ut+st];o[a*U+u*V+s*K+c*$+z]=tt}return r.toTensor()},n.prototype.conv2dDerFilter=function(t,n,e){Rf([t,n],"conv2dDerFilter");for(var r=e.strideHeight,o=e.strideWidth,i=e.filterHeight,a=e.filterWidth,u="channelsLast"===e.dataFormat,s=dr(e.filterShape,"float32"),c=e.padInfo.left,l=e.padInfo.top,f=this.bufferSync(t),h=this.bufferSync(n),d=0;d<i;++d)for(var p=Math.max(0,Math.ceil((l-d)/r)),v=Math.min(e.outHeight,(e.inHeight+l-d)/r),m=0;m<a;++m)for(var g=Math.max(0,Math.ceil((c-m)/o)),y=Math.min(e.outWidth,(e.inWidth+c-m)/o),x=0;x<e.inChannels;++x)for(var b=0;b<e.outChannels;++b){for(var w=0,C=0;C<e.batchSize;++C)for(var E=p;E<v;++E)for(var R=d+E*r-l,I=g;I<y;++I){var k=m+I*o-c;w+=u?f.get(C,R,k,x)*h.get(C,E,I,b):f.get(C,x,R,k)*h.get(C,b,E,I)}s.set(w,d,m,x,b)}return s.toTensor()},n.prototype.conv3dDerFilter=function(t,n,e){for(var r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.filterDepth,u=e.filterHeight,s=e.filterWidth,c=dr(e.filterShape,"float32"),l=c.values,f=c.strides,h=f[0],d=f[1],p=f[2],v=f[3],m=this.readSync(n.dataId),g=n.strides,y=g[0],x=g[1],b=g[2],w=g[3],C=this.readSync(t.dataId),E=t.strides,R=E[0],I=E[1],k=E[2],S=E[3],A=e.padInfo.front,T=e.padInfo.left,D=e.padInfo.top,N=0;N<a;++N)for(var _=Math.max(0,Math.ceil((A-N)/r)),F=Math.min(e.outDepth,(e.inDepth+A-N)/r),O=N*h,M=0;M<u;++M)for(var B=Math.max(0,Math.ceil((D-M)/o)),P=Math.min(e.outHeight,(e.inHeight+D-M)/o),L=M*d+O,W=0;W<s;++W)for(var U=Math.max(0,Math.ceil((T-W)/i)),z=Math.min(e.outWidth,(e.inWidth+T-W)/i),V=W*p+L,G=0;G<e.inChannels;++G)for(var H=G*v+V,q=0;q<e.outChannels;++q){for(var K=0,j=0;j<e.batchSize;++j)for(var X=j*R,Y=j*y,$=_;$<F;++$)for(var Q=(N+$*r-A)*I+X,J=$*x+Y,Z=B;Z<P;++Z)for(var tt=(M+Z*o-D)*k+Q,nt=Z*b+J,et=U;et<z;++et){var rt=et*w+nt;K+=C[(W+et*i-T)*S+tt+G]*m[rt+q]}l[H+q]=K}return c.toTensor()},n.prototype.fusedDepthwiseConv2D=function(t){var n=t.input,e=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights,u=this.depthwiseConv2D(n,e,r);return o&&(u=this.add(u,o)),i&&(u=If(this,u,i,a)),u},n.prototype.depthwiseConv2D=function(t,n,e){Rf([t,n],"depthwiseConv2D");for(var r=e.filterHeight,o=e.filterWidth,i=e.dilationHeight,a=e.dilationWidth,u=e.padInfo.left,s=e.padInfo.top,c=e.outChannels/e.inChannels,l=dr(e.outShape,t.dtype),f=this.readSync(t.dataId),h=this.readSync(n.dataId),d=l.values,p=0;p<e.batchSize;++p)for(var v=p*t.strides[0],m=p*l.strides[0],g=0;g<e.outHeight;++g)for(var y=m+g*l.strides[1],x=g*e.strideHeight-u,b=0;b<r;++b){var w=x+b*i;if(!(w<0||w>=e.inHeight))for(var C=b*n.strides[0],E=v+w*t.strides[1],R=0;R<e.outWidth;++R)for(var I=y+R*l.strides[2],k=R*e.strideWidth-s,S=0;S<o;++S){var A=k+S*a;if(!(A<0||A>=e.inWidth))for(var T=C+S*n.strides[1],D=E+A*e.inChannels,N=I,_=T,F=0;F<e.inChannels;++F){for(var O=f[D+F],M=0;M<c;++M)d[N+M]+=O*h[_+M];N+=c,_+=c}}}return l.toTensor()},n.prototype.depthwiseConv2DDerInput=function(t,n,e){Rf([t,n],"depthwiseConv2DDerInput");for(var r=dr(e.inShape,"float32"),o=r.values,i=r.strides,a=i[0],u=i[1],s=i[2],c=this.readSync(t.dataId),l=t.strides,f=l[0],h=l[1],d=l[2],p=this.readSync(n.dataId),v=n.strides,m=v[0],g=v[1],y=v[2],x=e.batchSize,b=e.filterHeight,w=e.filterWidth,C=e.inChannels,E=e.inHeight,R=e.inWidth,I=e.outChannels,k=e.outHeight,S=e.outWidth,A=e.strideHeight,T=e.strideWidth,D=b-1-e.padInfo.top,N=w-1-e.padInfo.left,_=I/C,F=0;F<x;++F)for(var O=0;O<C;++O)for(var M=0;M<E;++M)for(var B=M-D,P=Math.max(0,Math.ceil(B/A)),L=Math.min(k,(b+B)/A),W=0;W<R;++W){for(var U=W-N,z=Math.max(0,Math.ceil(U/T)),V=Math.min(S,(w+U)/T),G=0,H=P;H<L;++H)for(var q=H*A-B,K=z;K<V;++K)for(var j=f*F+h*H+d*K,X=m*(b-1-q)+g*(w-1-(K*T-U))+y*O,Y=0;Y<_;++Y)G+=c[j+(O*_+Y)]*p[X+Y];o[a*F+u*M+s*W+O]=G}return r.toTensor()},n.prototype.depthwiseConv2DDerFilter=function(t,n,e){Rf([t,n],"depthwiseConv2DDerFilter");for(var r=e.strideHeight,o=e.strideWidth,i=e.filterHeight,a=e.filterWidth,u=dr(e.filterShape,"float32"),s=e.padInfo.left,c=e.padInfo.top,l=e.outChannels/e.inChannels,f=this.bufferSync(t),h=this.bufferSync(n),d=0;d<i;++d)for(var p=Math.max(0,Math.ceil((c-d)/r)),v=Math.min(e.outHeight,(e.inHeight+c-d)/r),m=0;m<a;++m)for(var g=Math.max(0,Math.ceil((s-m)/o)),y=Math.min(e.outWidth,(e.inWidth+s-m)/o),x=0;x<e.outChannels;++x){for(var b=Math.trunc(x/l),w=x%l,C=0,E=0;E<e.batchSize;++E)for(var R=p;R<v;++R)for(var I=d+R*r-c,k=g;k<y;++k){var S=m+k*o-s;C+=f.get(E,I,S,b)*h.get(E,R,k,x)}u.set(C,d,m,b,w)}return u.toTensor()},n.prototype.tile=function(t,n){return Rf(t,"tile"),Zo(this.bufferSync(t),n)},n.prototype.pad=function(t,n,e){Rf(t,"pad");var r=n.map((function(n,e){return n[0]+t.shape[e]+n[1]})),o=n.map((function(t){return t[0]})),i=this.bufferSync(t),a=dr(r,t.dtype);0!==e&&a.values.fill(e);for(var u=0;u<t.size;u++){var s=i.indexToLoc(u),c=s.map((function(t,n){return t+o[n]}));a.set.apply(a,[i.get.apply(i,s)].concat(c))}return a.toTensor()},n.prototype.transpose=function(t,n){Rf(t,"transpose");for(var e=new Array(t.rank),r=0;r<e.length;r++)e[r]=t.shape[n[r]];var o=this.readSync(t.dataId),i=dr(e,t.dtype),a=this.bufferSync(t);for(r=0;r<t.size;++r){for(var u=a.indexToLoc(r),s=new Array(u.length),c=0;c<s.length;c++)s[c]=u[n[c]];var l=i.locToIndex(s);i.values[l]=o[r]}return i.toTensor()},n.prototype.gather=function(t,n,e){Rf([t,n],"gather");var r=t.shape.slice(),o=this.readSync(n.dataId);r[e]=o.length;for(var i=dr(r,t.dtype),a=this.bufferSync(t),u=0;u<i.size;++u){var s=i.indexToLoc(u),c=s.slice();c[e]=o[s[e]];var l=a.locToIndex(c);i.values[u]=a.values[l]}return i.toTensor()},n.prototype.batchToSpaceND=function(t,n,e){Rf([t],"batchToSpaceND");var r=n.reduce((function(t,n){return t*n})),o=Vr(t.shape,n,r),i=Gr(o.length,n.length),a=Hr(t.shape,n,r),u=qr(e,n.length),s=Kr(a,e,n.length);return t.reshape(o).transpose(i).reshape(a).slice(u,s)},n.prototype.spaceToBatchND=function(t,n,e){Rf([t],"spaceToBatchND");var r=n.reduce((function(t,n){return t*n})),o=[[0,0]];o.push.apply(o,e);for(var i=1+n.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),u=Vr(a.shape,n,r,!1),s=Gr(u.length,n.length,!1),c=Hr(a.shape,n,r,!1);return a.reshape(u).transpose(s).reshape(c)},n.prototype.pool=function(t,n,e){Rf(t,"pool");for(var r=n.strideHeight,o=n.strideWidth,i=n.dilationHeight,a=n.dilationWidth,u=n.effectiveFilterHeight,s=n.effectiveFilterWidth,c=n.padInfo.top,l=n.padInfo.left,f="max"===e?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,h=this.readSync(t.dataId),d=dr(n.outShape,t.dtype),p=d.values,v=n.outShape[1]*n.outShape[2]*n.outShape[3],m=n.outShape[2]*n.outShape[3],g=n.outShape[3],y=0;y<n.batchSize;++y)for(var x=y*v,b=y*t.strides[0],w=0;w<n.inChannels;++w)for(var C=0;C<n.outHeight;++C)for(var E=C*r-c,R=Math.max(0,E),I=Math.min(n.inHeight,u+E),k=x+C*m,S=0;S<n.outWidth;++S){for(var A=S*o-l,T=Math.max(0,A),D=Math.min(n.inWidth,s+A),N=f,_=0,F=0,O=R;O<I;O+=i){for(var M=b+O*t.strides[1],B=T;B<D;B+=a){var P=h[M+B*t.strides[2]+w];"max"===e&&P>N?N=P:"avg"===e&&(_+=P,F++)}if(isNaN(N))break}p[k+S*g+w]="avg"===e?_/F:N}return d.toTensor()},n.prototype.maxPool=function(t,n){return this.pool(t,n,"max")},n.prototype.maxPoolPositions=function(t,n){for(var e=dr(n.outShape,"int32"),r=n.strideHeight,o=n.strideWidth,i=n.dilationHeight,a=n.dilationWidth,u=n.effectiveFilterHeight,s=n.effectiveFilterWidth,c=n.padInfo.top,l=n.padInfo.left,f=this.bufferSync(t),h=0;h<n.batchSize;++h)for(var d=0;d<n.inChannels;++d)for(var p=0;p<n.outHeight;++p){for(var v=p*r-c,m=v;m<0;)m+=i;for(var g=Math.min(n.inHeight,u+v),y=0;y<n.outWidth;++y){for(var x=y*o-l,b=x;b<0;)b+=a;for(var w=Math.min(n.inWidth,s+x),C=Number.NEGATIVE_INFINITY,E=-1,R=m;R<g;R+=i)for(var I=R-v,k=b;k<w;k+=a){var S=k-x,A=f.get(h,R,k,d);A>C&&(C=A,E=I*s+S)}e.set(E,h,p,y,d)}}return e.toTensor()},n.prototype.maxPoolBackprop=function(t,n,e,r){Rf([n,e],"maxPoolBackprop");for(var o=this.maxPoolPositions(n,r),i=r.strideHeight,a=r.strideWidth,u=r.dilationHeight,s=r.dilationWidth,c=r.effectiveFilterHeight,l=r.effectiveFilterWidth,f=l-1-r.padInfo.left,h=c-1-r.padInfo.top,d=dr(n.shape,"float32"),p=this.bufferSync(o),v=this.bufferSync(t),m=0;m<r.batchSize;++m)for(var g=0;g<r.inChannels;++g)for(var y=0;y<r.inHeight;++y)for(var x=0;x<r.inWidth;++x){for(var b=y-h,w=x-f,C=0,E=0;E<c;E+=u){var R=(b+E)/i;if(!(R<0||R>=r.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=s){var k=(w+I)/a;if(!(k<0||k>=r.outWidth||Math.floor(k)!==k)){var S=c*l-1-p.get(m,R,k,g)===E*l+I?1:0;0!==S&&(C+=v.get(m,R,k,g)*S)}}}d.set(C,m,y,x,g)}return d.toTensor()},n.prototype.avgPoolBackprop=function(t,n,e){Rf([t,n],"avgPoolBackprop");for(var r=e.strideHeight,o=e.strideWidth,i=e.filterHeight,a=e.filterWidth,u=e.dilationHeight,s=e.dilationWidth,c=e.effectiveFilterHeight,l=e.effectiveFilterWidth,f=l-1-e.padInfo.left,h=c-1-e.padInfo.top,d=dr(n.shape,"float32"),p=1/(i*a),v=this.bufferSync(t),m=0;m<e.batchSize;++m)for(var g=0;g<e.inChannels;++g)for(var y=0;y<e.inHeight;++y)for(var x=0;x<e.inWidth;++x){for(var b=y-h,w=x-f,C=0,E=0;E<c;E+=u){var R=(b+E)/r;if(!(R<0||R>=e.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=s){var k=(w+I)/o;k<0||k>=e.outWidth||Math.floor(k)!==k||(C+=v.get(m,R,k,g))}}d.set(C*p,m,y,x,g)}return d.toTensor()},n.prototype.pool3d=function(t,n,e){Rf(t,"pool3d");for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.dilationDepth,u=n.dilationHeight,s=n.dilationWidth,c=n.effectiveFilterDepth,l=n.effectiveFilterHeight,f=n.effectiveFilterWidth,h=n.padInfo.front,d=n.padInfo.top,p=n.padInfo.left,v="max"===e?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=this.readSync(t.dataId),g=dr(n.outShape,t.dtype),y=g.values,x=n.outShape[1]*n.outShape[2]*n.outShape[3]*n.outShape[4],b=n.outShape[2]*n.outShape[3]*n.outShape[4],w=n.outShape[3]*n.outShape[4],C=n.outShape[4],E=0;E<n.batchSize;++E)for(var R=E*x,I=E*t.strides[0],k=0;k<n.inChannels;++k)for(var S=0;S<n.outDepth;++S){for(var A=S*r-h,T=A;T<0;)T+=a;for(var D=Math.min(n.inDepth,c+A),N=R+S*b,_=0;_<n.outHeight;++_){for(var F=_*o-d,O=F;O<0;)O+=u;for(var M=Math.min(n.inHeight,l+F),B=N+_*w,P=0;P<n.outWidth;++P){for(var L=P*i-p,W=L;W<0;)W+=s;for(var U=Math.min(n.inWidth,f+L),z=B+P*C,V=v,G=0,H=0,q=T;q<D;q+=a){for(var K=I+q*t.strides[1],j=O;j<M;j+=u){for(var X=K+j*t.strides[2],Y=W;Y<U;Y+=s){var $=m[X+Y*t.strides[3]+k];if("max"===e&&$>V?V=$:"avg"===e&&(G+=$,H++),isNaN(V))break}if(isNaN(V))break}if(isNaN(V))break}y[z+k]="avg"===e?G/H:V}}}return g.toTensor()},n.prototype.avgPool3d=function(t,n){return Rf(t,"avgPool3d"),this.pool3d(t,n,"avg").toFloat()},n.prototype.avgPool3dBackprop=function(t,n,e){Rf([t,n],"avgPool3dBackprop");for(var r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.filterDepth,u=e.filterHeight,s=e.filterWidth,c=e.dilationDepth,l=e.dilationHeight,f=e.dilationWidth,h=e.effectiveFilterDepth,d=e.effectiveFilterHeight,p=e.effectiveFilterWidth,v=h-1-e.padInfo.front,m=p-1-e.padInfo.left,g=d-1-e.padInfo.top,y=dr(n.shape,"float32"),x=1/(a*u*s),b=this.bufferSync(t),w=0;w<e.batchSize;++w)for(var C=0;C<e.inChannels;++C)for(var E=0;E<e.inDepth;++E)for(var R=0;R<e.inHeight;++R)for(var I=0;I<e.inWidth;++I){for(var k=E-v,S=R-g,A=I-m,T=0,D=0;D<h;D+=c){var N=(k+D)/r;if(!(N<0||N>=e.outDepth||Math.floor(N)!==N))for(var _=0;_<d;_+=l){var F=(S+_)/o;if(!(F<0||F>=e.outHeight||Math.floor(F)!==F))for(var O=0;O<p;O+=f){var M=(A+O)/i;M<0||M>=e.outWidth||Math.floor(M)!==M||(T+=b.get(w,N,F,M,C))}}}y.set(T*x,w,E,R,I,C)}return y.toTensor()},n.prototype.maxPool3d=function(t,n){return Rf(t,"maxPool3d"),this.pool3d(t,n,"max").toFloat()},n.prototype.maxPool3dPositions=function(t,n){for(var e=dr(n.outShape,"int32"),r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.dilationDepth,u=n.dilationHeight,s=n.dilationWidth,c=n.effectiveFilterDepth,l=n.effectiveFilterHeight,f=n.effectiveFilterWidth,h=n.padInfo.front,d=n.padInfo.top,p=n.padInfo.left,v=this.bufferSync(t),m=0;m<n.batchSize;++m)for(var g=0;g<n.inChannels;++g)for(var y=0;y<n.outDepth;++y){for(var x=y*r-h,b=x;b<0;)b+=a;for(var w=Math.min(n.inDepth,c+x),C=0;C<n.outHeight;++C){for(var E=C*o-d,R=E;R<0;)R+=u;for(var I=Math.min(n.inHeight,l+E),k=0;k<n.outWidth;++k){for(var S=k*i-p,A=S;A<0;)A+=s;for(var T=Math.min(n.inWidth,f+S),D=Number.NEGATIVE_INFINITY,N=-1,_=b;_<w;_+=a)for(var F=_-x,O=R;O<I;O+=u)for(var M=O-E,B=A;B<T;B+=s){var P=B-S,L=v.get(m,_,O,B,g);L>=D&&(D=L,N=F*l*f+M*l+P)}e.set(N,m,y,C,k,g)}}}return e.toTensor()},n.prototype.maxPool3dBackprop=function(t,n,e,r){Rf([n,e],"maxPool3dBackprop");for(var o=this.maxPool3dPositions(n,r),i=r.strideDepth,a=r.strideHeight,u=r.strideWidth,s=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,f=r.effectiveFilterDepth,h=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=f-1-r.padInfo.front,v=d-1-r.padInfo.left,m=h-1-r.padInfo.top,g=dr(n.shape,"float32"),y=this.bufferSync(o),x=this.bufferSync(t),b=0;b<r.batchSize;++b)for(var w=0;w<r.inChannels;++w)for(var C=0;C<r.inDepth;++C)for(var E=0;E<r.inHeight;++E)for(var R=0;R<r.inWidth;++R){for(var I=C-p,k=E-m,S=R-v,A=0,T=0;T<f;T+=s){var D=(I+T)/i;if(!(D<0||D>=r.outDepth||Math.floor(D)!==D))for(var N=0;N<h;N+=c){var _=(k+N)/a;if(!(_<0||_>=r.outHeight||Math.floor(_)!==_))for(var F=0;F<d;F+=l){var O=(S+F)/u;if(!(O<0||O>=r.outWidth||Math.floor(O)!==O)){var M=f*h*d-1-y.get(b,D,_,O,w)===T*h*d+N*d+F?1:0;0!==M&&(A+=x.get(b,D,_,O,w)*M)}}}}g.set(A,b,C,E,R,w)}return g.toTensor()},n.prototype.cast=function(t,n){return Bo(t,n,this)},n.prototype.reshape=function(t,n){return Po(t,n)},n.prototype.avgPool=function(t,n){return Rf(t,"avgPool"),this.pool(t,n,"avg").toFloat()},n.prototype.resizeBilinear=function(t,n,e,r){Rf(t,"resizeBilinear");for(var o=t.shape,i=o[0],a=o[1],u=o[2],s=o[3],c=this.readSync(t.dataId),l=new Float32Array(_([i,n,e,s])),f=[r&&n>1?a-1:a,r&&e>1?u-1:u],h=[r&&n>1?n-1:n,r&&e>1?e-1:e],d=0,p=f[0]/h[0],v=f[1]/h[1],m=0;m<i;m++)for(var g=0;g<n;g++)for(var y=p*g,x=Math.floor(y),b=y-x,w=Math.min(a-1,Math.ceil(y)),C=m*t.strides[0]+x*t.strides[1],E=m*t.strides[0]+w*t.strides[1],R=0;R<e;R++)for(var I=v*R,k=Math.floor(I),S=I-k,A=Math.min(u-1,Math.ceil(I)),T=C+k*t.strides[2],D=E+k*t.strides[2],N=C+A*t.strides[2],F=E+A*t.strides[2],O=0;O<s;O++){var M=c[T+O],B=c[D+O],P=M+(c[N+O]-M)*S,L=P+(B+(c[F+O]-B)*S-P)*b;l[d++]=L}return _e(l,[i,n,e,s])},n.prototype.resizeBilinearBackprop=function(t,n,e){Rf([t,n],"resizeBilinearBackprop");for(var r=n.shape,o=r[0],i=r[1],a=r[2],u=r[3],s=t.shape,c=s[1],l=s[2],f=new Float32Array(o*i*a*u),h=[e&&c>1?i-1:i,e&&l>1?a-1:a],d=[e&&c>1?c-1:c,e&&l>1?l-1:l],p=h[0]/d[0],v=h[1]/d[1],m=this.readSync(t.dataId),g=0,y=0;y<o;y++)for(var x=y*n.strides[0],b=0;b<c;b++)for(var w=b*p,C=Math.floor(w),E=Math.min(Math.ceil(w),i-1),R=x+C*n.strides[1],I=x+E*n.strides[1],k=w-C,S=1-k,A=0;A<l;A++)for(var T=A*v,D=Math.floor(T),N=Math.min(Math.ceil(T),a-1),_=T-D,F=1-_,O=R+D*n.strides[2],M=R+N*n.strides[2],B=I+D*n.strides[2],P=I+N*n.strides[2],L=S*F,W=S*_,U=k*F,z=k*_,V=0;V<u;V++){var G=m[g++];f[O+V]+=G*L,f[M+V]+=G*W,f[B+V]+=G*U,f[P+V]+=G*z}return Le(f,[o,a,i,u],n.dtype)},n.prototype.resizeNearestNeighbor=function(t,n,e,r){Rf(t,"resizeNearestNeighbor");for(var o=t.shape,i=o[0],a=o[1],u=o[2],s=o[3],c=this.readSync(t.dataId),l=new Float32Array(i*n*e*s),f=[r&&n>1?a-1:a,r&&e>1?u-1:u],h=[r&&n>1?n-1:n,r&&e>1?e-1:e],d=f[0]/h[0],p=f[1]/h[1],v=0,m=0;m<i;m++)for(var g=m*t.strides[0],y=0;y<n;y++)for(var x=d*y,b=g+Math.min(a-1,r?Math.round(x):Math.floor(x))*t.strides[1],w=0;w<e;w++)for(var C=p*w,E=b+Math.min(u-1,r?Math.round(C):Math.floor(C))*t.strides[2],R=0;R<s;R++){var I=c[E+R];l[v++]=I}return _e(l,[i,n,e,s],t.dtype)},n.prototype.resizeNearestNeighborBackprop=function(t,n,e){Rf([t,n],"resizeNearestNeighborBackprop");for(var r=n.shape,o=r[0],i=r[1],a=r[2],u=r[3],s=t.shape,c=s[1],l=s[2],f=new Float32Array(o*i*a*u),h=this.readSync(t.dataId),d=[e&&c>1?i-1:i,e&&l>1?a-1:a],p=[e&&c>1?c-1:c,e&&l>1?l-1:l],v=d[0]/p[0],m=d[1]/p[1],g=1/v,y=1/m,x=2*Math.ceil(g)+2,b=2*Math.ceil(y)+2,w=0;w<o;w++)for(var C=w*n.strides[0],E=0;E<i;E++)for(var R=C+E*n.strides[1],I=Math.floor(E*g),k=Math.floor(I-x/2),S=0;S<a;S++)for(var A=R+S*n.strides[2],T=Math.floor(S*y),D=Math.floor(T-b/2),N=0;N<u;N++){for(var _=0,F=0;F<x;F++){var O=F+k;if(!(O<0||O>=c)){var M=C+O*t.strides[1],B=O*v;if(E===Math.min(i-1,e?Math.round(B):Math.floor(B)))for(var P=0;P<b;P++){var L=P+D;if(!(L<0||L>=l)){var W=M+L*t.strides[2],U=L*m;S===Math.min(a-1,e?Math.round(U):Math.floor(U))&&(_+=h[W+N])}}}}f[A+N]=_}return Le(f,n.shape,n.dtype)},n.prototype.batchNormalization=function(t,n,e,r,o,i){Rf([t,n,e,o,i],"batchNorm");for(var a=this.readSync(t.dataId),u=this.readSync(n.dataId),s=this.readSync(e.dataId),c=o?this.readSync(o.dataId):new Float32Array([1]),l=i?this.readSync(i.dataId):new Float32Array([0]),f=new Float32Array(a.length),h=l.length,d=c.length,p=s.length,v=u.length,m=0,g=0,y=0,x=0,b=0;b<a.length;++b)f[b]=l[m++]+(a[b]-u[g++])*c[y++]/Math.sqrt(s[x++]+r),m>=h&&(m=0),g>=v&&(g=0),y>=d&&(y=0),x>=p&&(x=0);return Le(f,t.shape)},n.prototype.localResponseNormalization4D=function(t,n,e,r,o){Rf(t,"localResponseNormalization4D");var i=t.shape[3],a=i-1,u=this.readSync(t.dataId),s=t.size,c=new Float32Array(s);function l(t){for(var e=t%i,r=t-e+Math.max(0,e-n),o=t-e+Math.min(e+n,a),s=0;r<=o;r++){var c=u[r];s+=c*c}return s}for(var f=0;f<s;f++){var h=l(f),d=u[f]*Math.pow(e+r*h,-o);c[f]=d}return Le(c,t.shape)},n.prototype.LRNGrad=function(t,n,e,r,o,i,a){Rf(t,"LRNGrad");for(var u=t.shape[3],s=this.readSync(t.dataId),c=this.readSync(n.dataId),l=this.readSync(e.dataId),f=new Float32Array(t.size),h=t.size,d=0;d<h;d++){for(var p=d%u,v=d-p+Math.max(0,p-r),m=d-p+Math.min(u,p+r+1),g=0,y=v;y<m;y++)g+=Math.pow(c[y],2);for(g=i*g+o,y=v;y<m;y++){var x=-2*i*a*c[y]*l[d]/g;d===y&&(x+=Math.pow(g,-a)),x*=s[d],f[y]+=x}}return Le(f,t.shape)},n.prototype.multinomial=function(t,n,e,r){Rf(t,"multinomial");for(var o=n?t:mo(t),i=o.shape[0],a=o.shape[1],u=Ge([i,e],"int32"),s=this.readSync(u.dataId),c=this.readSync(o.dataId),l=0;l<i;++l){var f=l*a,h=new Float32Array(a-1);h[0]=c[f];for(var d=1;d<h.length;++d)h[d]=h[d-1]+c[f+d];for(var p=cr(r.toString()),v=l*e,m=0;m<e;++m){var g=p();s[v+m]=h.length;for(var y=0;y<h.length;y++)if(g<h[y]){s[v+m]=y;break}}}return u},n.prototype.oneHot=function(t,n,e,r){Rf(t,"oneHot");var o=new Float32Array(t.size*n);o.fill(r);for(var i=this.readSync(t.dataId),a=0;a<t.size;++a)i[a]>=0&&i[a]<n&&(o[a*n+i[a]]=e);return Be(o,[t.size,n],"int32")},n.prototype.nonMaxSuppression=function(t,n,e,r,o){return Rf(t,"nonMaxSuppression"),Ko(this.readSync(t.dataId),this.readSync(n.dataId),e,r,o)},n.prototype.fft=function(t){return this.fftBatch(t,!1)},n.prototype.ifft=function(t){return this.fftBatch(t,!0)},n.prototype.fftBatch=function(t,n){for(var e=t.shape[0],r=t.shape[1],o=dr(t.shape,"float32"),i=dr(t.shape,"float32"),a=De(t).as2D(e,r),u=Ne(t).as2D(e,r),s=0;s<e;s++)for(var c=a.slice([s,0],[1,r]),l=u.slice([s,0],[1,r]),f=Te(c,l),h=this.readSync(this.fftImpl(f,n).dataId),d=0;d<r;d++){var p=zo(h,d);o.values[s*r+d]=p.real,i.values[s*r+d]=p.imag}return Te(o.toTensor(),i.toTensor()).as2D(e,r)},n.prototype.fftImpl=function(t,n){var e=t.as1D(),r=e.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(e,r,n).as2D(t.shape[0],t.shape[1]);return n&&(o=Te(De(o).div(Oe(r)),Ne(o).div(Oe(r)))),o}var i=this.readSync(t.dataId),a=function(t){for(var n=new Float32Array(t.length/2),e=new Float32Array(t.length/2),r=0;r<t.length;r+=2)n[r/2]=t[r],e[r/2]=t[r+1];return{real:n,imag:e}}(this.fourierTransformByMatmul(i,r,n));return Te(a.real,a.imag).as2D(t.shape[0],t.shape[1])},n.prototype.isExponentOf2=function(t){return 0==(t&t-1)},n.prototype.fftRadix2=function(t,n,e){if(1===n)return t;var r=this.readSync(t.dataId),o=n/2,i=function(t){for(var n=Math.ceil(t.length/4),e=new Float32Array(n),r=new Float32Array(n),o=0;o<t.length;o+=4)e[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:e,imag:r}}(r),a=Te(i.real,i.imag).as1D(),u=function(t){for(var n=Math.floor(t.length/4),e=new Float32Array(n),r=new Float32Array(n),o=2;o<t.length;o+=4)e[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:e,imag:r}}(r),s=Te(u.real,u.imag).as1D();a=this.fftRadix2(a,o,e),s=this.fftRadix2(s,o,e);var c=function(t,n){for(var e=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var i=(n?2:-2)*Math.PI*(o/t);e[o]=Math.cos(i),r[o]=Math.sin(i)}return{real:e,imag:r}}(n,e),l=Te(c.real,c.imag).mul(s),f=a.add(l),h=a.sub(l),d=De(f).concat(De(h)),p=Ne(f).concat(Ne(h));return Te(d,p).as1D()},n.prototype.fourierTransformByMatmul=function(t,n,e){for(var r=new Float32Array(2*n),o=0;o<n;o++){for(var i=0,a=0,u=0;u<n;u++){var s=Go(o*u,n,e),c=zo(t,u);i+=c.real*s.real-c.imag*s.imag,a+=c.real*s.imag+c.imag*s.real}e&&(i/=n,a/=n),Vo(r,i,a,o)}return r},n.prototype.depthToSpace=function(t,n,e){A("NHWC"===e,(function(){return"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+e})),A(n>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+n}));for(var r=t.shape[0],o=t.shape[1],i=t.shape[2],a=t.shape[3],u=o*n,s=i*n,c=a/(n*n),l=this.readSync(t.dataId),f=new Float32Array(r*u*s*c),h=0,d=0;d<r;++d)for(var p=0;p<u;++p)for(var v=Math.floor(p/n),m=p%n,g=0;g<s;++g)for(var y=Math.floor(g/n),x=(m*n+g%n)*c,b=0;b<c;++b){var w=b+x+a*(y+i*(v+o*d));f[h++]=l[w]}return Le(f,[r,u,s,c])},n.prototype.broadcastedBinaryOp=function(t,n,e,r){var o=Eo(t.shape,n.shape),i=dr(o,e),a=this.readSync(t.dataId),u=this.readSync(n.dataId),s=wo(t.shape,o),c=wo(n.shape,o),l=i.values;if(s.length+c.length===0)for(var f=0;f<l.length;++f)l[f]=r(a[f%a.length],u[f%u.length]);else{var h=this.bufferSync(t),d=this.bufferSync(n),p=function(e){var o=i.indexToLoc(e),f=o.slice(-t.rank);s.forEach((function(t){return f[t]=0}));var p=h.locToIndex(f),v=o.slice(-n.rank);c.forEach((function(t){return v[t]=0}));var m=d.locToIndex(v);l[e]=r(a[p],u[m])};for(f=0;f<l.length;++f)p(f)}return i.toTensor()},n.prototype.broadcastedBinaryComplexOp=function(t,n,e){var r=Eo(t.shape,n.shape),o=dr(r,"float32"),i=dr(r,"float32"),a=this.readSync(t.dataId),u=this.readSync(n.dataId),s=wo(t.shape,r),c=wo(n.shape,r),l=o.values,f=i.values;if(s.length+c.length===0)for(var h=0;h<l.length;h++){var d=h%a.length,p=h%u.length,v=e(a[2*d],a[2*d+1],u[2*p],u[2*p+1]);l[h]=v.real,f[h]=v.imag}else{var m=this.bufferSync(this.data.get(t.dataId).complexTensors.real),g=this.bufferSync(this.data.get(n.dataId).complexTensors.real),y=function(r){var i=o.indexToLoc(r),h=i.slice(-t.rank);s.forEach((function(t){return h[t]=0}));var d=m.locToIndex(h),p=i.slice(-n.rank);c.forEach((function(t){return p[t]=0}));var v=g.locToIndex(p),y=e(a[2*d],a[2*d+1],u[2*v],u[2*v+1]);l[r]=y.real,f[r]=y.imag};for(h=0;h<l.length;h++)y(h)}return this.complex(o.toTensor(),i.toTensor())},n.prototype.split=function(t,n,e){return Jo(t,n,e)},n.prototype.dispose=function(){},n.prototype.floatPrecision=function(){return 32},n.prototype.epsilon=function(){return 1e-7},n.prototype.cropAndResize=function(t,n,e,r,o,i){for(var a=t.shape,u=a[0],s=a[1],c=a[2],l=a[3],f=n.shape[0],h=r[0],d=r[1],p=dr([f,h,d,l],"float32"),v=this.readSync(n.dataId),m=this.readSync(e.dataId),g=this.readSync(t.dataId),y=t.strides,x=p.strides,b=0;b<f;b++){var w=4*b,C=v[w],E=v[w+1],R=v[w+2],I=v[w+3],k=m[b];if(!(k>=u))for(var S=h>1?(R-C)*(s-1)/(h-1):0,A=d>1?(I-E)*(c-1)/(d-1):0,T=0;T<h;T++){var D=h>1?C*(s-1)+T*S:.5*(C+R)*(s-1);if(D<0||D>s-1)for(var N=0;N<d;N++)for(var _=0;_<l;_++){var F=_+N*x[2]+T*x[1]+b*x[0];p.values[F]=i}else if("bilinear"===o){var O=Math.floor(D),M=Math.ceil(D),B=D-O;for(N=0;N<d;N++)if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(_=0;_<l;_++)F=_+N*x[2]+T*x[1]+b*x[0],p.values[F]=i;else{var P=Math.floor(q),L=Math.ceil(q),W=q-P;for(_=0;_<l;_++){var U=g[F=_+P*y[2]+O*y[1]+k*y[0]],z=g[F=_+L*y[2]+O*y[1]+k*y[0]],V=g[F=_+P*y[2]+M*y[1]+k*y[0]],G=U+(z-U)*W,H=V+(g[F=_+L*y[2]+M*y[1]+k*y[0]]-V)*W;F=_+N*x[2]+T*x[1]+b*x[0],p.values[F]=G+(H-G)*B}}}else for(N=0;N<d;++N){var q;if((q=d>1?E*(c-1)+N*A:.5*(E+I)*(c-1))<0||q>c-1)for(_=0;_<l;_++)F=_+N*x[2]+T*x[1]+b*x[0],p.values[F]=i;else{var K=Math.round(q),j=Math.round(D);for(_=0;_<l;_++){var X=_+K*y[2]+j*y[1]+k*y[0],Y=_+N*x[2]+T*x[1]+b*x[0];p.values[Y]=g[X]}}}}}return p.toTensor()},n.prototype.sparseToDense=function(t,n,e,r){var o=Jr(0,t,e),i=o.sliceRank,a=o.numUpdates,u=o.sliceSize,s=o.strides,c=o.outputSize;return this.scatter(t,n,e,c,u,a,i,s,r,!1)},n.prototype.gatherND=function(t,n){var e=n.shape,r=e[e.length-1],o=jr(t,n),i=o[0],a=o[1],u=o[2],s=o[3];if(0===a)return _e([],i,t.dtype);for(var c=new xt([a,u],t.dtype),l=this.readSync(n.dataId),f=this.readSync(t.dataId),h=0;h<a;h++){for(var d=[],p=0,v=0;v<r;v++){var m=l[h*r+v];p+=m*s[v],d.push(m)}if(p<0||p>=t.size/u)throw new Error("Invalid indices: "+d+" does not index into "+t.shape);for(var g=0;g<u;g++)c.values[h*u+g]=f[p*u+g]}return c.toTensor().reshape(i)},n.prototype.scatterND=function(t,n,e){var r=Jr(0,t,e),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,u=r.strides,s=r.outputSize,c=Oe(0);return this.scatter(t,n,e,s,a,i,o,u,c,!0)},n.prototype.fill=function(t,n,e){var r=G(e=e||Z(n),_(t));return r.fill(n),Ut.makeTensor(r,t,e,this)},n.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)},n.prototype.zerosLike=function(t){var n=G(t.dtype,_(t.shape));return this.makeOutput(n,t.shape,t.dtype)},n.prototype.linspace=function(t,n,e){return Lo(t,n,e)},n.prototype.scatter=function(t,n,e,r,o,i,a,u,s,c){var l=[r/o,o],f=this.readSync(t.dataId),h=this.readSync(n.dataId);if(0===r)return _e([],e,n.dtype);var d=new xt(l,n.dtype);d.values.fill(this.readSync(s.dataId)[0]);for(var p=0;p<i;p++){for(var v=[],m=0,g=0;g<a;g++){var y=f[p*a+g];v.push(y),m+=y*u[g]}if(m<0||m>=r/o)throw new Error("Invalid indices: "+v+" does not index into "+e);for(var x=0;x<o;x++)c?d.values[m*o+x]+=h[p*o+x]:d.values[m*o+x]=0===n.rank?h[0]:h[p*o+x]}return d.toTensor().reshape(e)},n}(xo);Ut.registerBackend("cpu",(function(){return new kf}),1);for(var Sf=0,Af=[{kernelName:"NonMaxSuppressionV5",backendName:"cpu",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=t.attrs,o=n,i=o.boxes,a=o.scores,u=r,s=u.maxOutputSize,c=u.iouThreshold,l=u.scoreThreshold,f=u.softNmsSigma,h=e;Rf(i,"NonMaxSuppressionWithScore");var d=jo(h.data.get(i.dataId).values,h.data.get(a.dataId).values,s,c,l,f);return[d.selectedIndices,d.selectedScores]}},{kernelName:"Square",backendName:"cpu",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=n.x,o=e;Rf(r,"square");for(var i=o.data.get(r.dataId).values,a=new Float32Array(i.length),u=0;u<i.length;++u){var s=i[u];a[u]=s*s}return{dataId:o.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}},{kernelName:Bu,backendName:"cpu",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=n,o=r.a,i=r.b,a=e;Rf([o,i],Bu);var u=a.data.get(o.dataId).values,s=a.data.get(i.dataId).values,c=function(t,n,e,r,o,i){var a=Eo(t,n),u=a.length,s=et(a),c=V(o,_(a)),l=t.length,f=n.length,h=et(t),d=et(n),p=wo(t,a),v=wo(n,a);if(p.length+v.length===0)for(var m=0;m<c.length;++m)c[m]=i(e[m%e.length],r[m%r.length]);else{var g=function(t){var n=ht(t,u,s),o=n.slice(-l);p.forEach((function(t){return o[t]=0}));var a=ft(o,l,h),m=n.slice(-f);v.forEach((function(t){return m[t]=0}));var g=ft(m,f,d);c[t]=i(e[a],r[g])};for(m=0;m<c.length;++m)g(m)}return[c,a]}(o.shape,i.shape,u,s,o.dtype,(function(t,n){var e=t-n;return e*e})),l=c[0],f=c[1];return{dataId:a.write(l,f,o.dtype),shape:f,dtype:o.dtype}}}];Sf<Af.length;Sf++)x(Af[Sf]);for(var Tf,Df=function(t){this.variableNames=["A"];var n=ui(),e=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+e+".0);\n\n        vec4 values = "+n.texture2D+"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    "},Nf=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var n=ui(),e=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2("+r+".0, "+e+".0);\n            vec4 values = "+n.texture2D+"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        "+n.output+" = result;\n      }\n    "},_f=0,Ff=[{kernelName:"FromPixels",backendName:"webgl",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=t.attrs,o=n.pixels,i=r.numChannels,a="undefined"!=typeof HTMLVideoElement&&o instanceof HTMLVideoElement,u="undefined"!=typeof HTMLImageElement&&o instanceof HTMLImageElement,s=a?[o.videoWidth,o.videoHeight]:[o.width,o.height],c=s[0],l=s[1],f=[l,c],d=[l,c,i];(u||a)&&(null==Tf&&(Tf=document.createElement("canvas").getContext("2d")),Tf.canvas.width=c,Tf.canvas.height=l,Tf.drawImage(o,0,0,c,l),o=Tf.canvas);var p=e.makeTensorInfo(f,"int32");e.texData.get(p.dataId).usage=Ht.PIXELS,e.gpgpu.uploadPixelDataToTexture(e.getTexture(p.dataId),o);var v=h().getBool("WEBGL_PACK")?new Nf(d):new Df(d),m=e.runWebGLProgram(v,[p],"int32");return e.disposeData(p.dataId),m}},{kernelName:"NonMaxSuppressionV5",backendName:"webgl",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=t.attrs;de("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");var o=n,i=o.boxes,a=o.scores,u=r,s=u.maxOutputSize,c=u.iouThreshold,l=u.scoreThreshold,f=u.softNmsSigma,h=e,d=jo(h.readSync(i.dataId),h.readSync(a.dataId),s,c,l,f);return[d.selectedIndices,d.selectedScores]}},{kernelName:"Square",backendName:"webgl",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=n.x,o=e,i=new vu(r.shape,"return x * x;");return o.runWebGLProgram(i,[r],r.dtype)}},{kernelName:Bu,backendName:"webgl",kernelFunc:function(t){var n=t.inputs,e=t.backend,r=n,o=r.a,i=r.b,a=e,u=h().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Fi("return (a - b) * (a - b);",o.shape,i.shape):new Ni("return (a - b) * (a - b);",o.shape,i.shape);return a.compileAndRun(u,[o,i])}}];_f<Ff.length;_f++)x(Ff[_f]);for(var Of=0,Mf=[{kernelName:"Square",gradFunc:function(t,n){var e=n[0];return{x:function(){return t.mul(e.toFloat().mul(2))}}}},{kernelName:Bu,gradFunc:function(t,n){var e=n[0],r=n[1],o=Oe(2);return{a:function(){return Js(t,Js(o,rc(e,r)))},b:function(){return Js(t,Js(o,rc(r,e)))}}}}];Of<Mf.length;Of++)b(Mf[Of]);var Bf=function(){function t(){}return t.prototype.fetch=function(t,n){return fetch(t,n)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,n){if("utf-8"!==n&&"utf8"!==n)throw new Error("Browser's encoder only supports utf-8, but got "+n);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,n){return new TextDecoder(n).decode(t)},t}();h().get("IS_BROWSER")&&h().setPlatform("browser",new Bf);var Pf,Lf=function(){function t(){this.util=e(12),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,n){return null!=h().global.fetch?h().global.fetch(t,n):(null==Pf&&(Pf=e(11)),Pf(t,n))},t.prototype.now=function(){var t=r.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,n){if("utf-8"!==n&&"utf8"!==n)throw new Error("Node built-in encoder only supports utf-8, but got "+n);return this.textEncoder.encode(t)},t.prototype.decode=function(t,n){return 0===t.length?"":new this.util.TextDecoder(n).decode(t)},t}();h().get("IS_NODE")&&h().setPlatform("node",new Lf);var Wf={float32:4,int32:4,uint16:2,uint8:1,bool:1};function Uf(t,n){for(var e={},r=0,o=function(n){var o=n.name,i=n.dtype,a=n.shape,u=_(a),s=void 0;if("quantization"in n){var c=n.quantization;if("uint8"!==c.dtype&&"uint16"!==c.dtype)throw new Error("Weight "+n.name+" has unknown quantization dtype "+c.dtype+". Supported quantization dtypes are: 'uint8' and 'uint16'.");var l=Wf[c.dtype],f=t.slice(r,r+u*l),h="uint8"===c.dtype?new Uint8Array(f):new Uint16Array(f);if("float32"===i)s=Float32Array.from(h,(function(t){return t*c.scale+c.min}));else{if("int32"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);s=Int32Array.from(h,(function(t){return Math.round(t*c.scale+c.min)}))}r+=u*l}else if("string"===i){var d=_(n.shape);s=[];for(var p=0;p<d;p++){var v=new Uint32Array(t.slice(r,r+4))[0];r+=4;var m=new Uint8Array(t.slice(r,r+v));s.push(m),r+=v}}else{var g=Wf[i];if(f=t.slice(r,r+u*g),"float32"===i)s=new Float32Array(f);else if("int32"===i)s=new Int32Array(f);else{if("bool"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);s=new Uint8Array(f)}r+=u*g}e[o]=_e(s,a,i)},i=0,a=n;i<a.length;i++)o(a[i]);return e}function zf(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var n=0,e=[];t.forEach((function(t){if(n+=t.byteLength,e.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));var r=new Uint8Array(n),o=0;return e.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}var Vf=void 0!==o&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Gf(t){return Vf?o.byteLength(t):new Blob([t]).size}function Hf(t){var n=0;t.forEach((function(t){n+=t.byteLength}));var e=new Uint8Array(n),r=0;return t.forEach((function(t){e.set(new Uint8Array(t),r),r+=t.byteLength})),e.buffer}function qf(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var n=t.split("/");return n[n.length-1]}function Kf(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Gf(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Gf(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var jf=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(n){t.getInstance().saveRouters.push(n)},t.registerLoadRouter=function(n){t.getInstance().loadRouters.push(n)},t.getSaveHandlers=function(n){return t.getHandlers(n,"save")},t.getLoadHandlers=function(n,e){return t.getHandlers(n,"load",e)},t.getHandlers=function(n,e,r){var o=[];return("load"===e?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var e=t(n,r);null!==e&&o.push(e)})),o},t}(),Xf="://",Yf=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(n,e){A(null!=n,(function(){return"scheme must not be undefined or null."})),n.endsWith(Xf)&&(n=n.slice(0,n.indexOf(Xf))),A(n.length>0,(function(){return"scheme must not be an empty string."}));var r=t.getInstance();A(null==r.managers[n],(function(){return"A model store manager is already registered for scheme '"+n+"'."})),r.managers[n]=e},t.getManager=function(t){var n=this.getInstance().managers[t];if(null==n)throw new Error("Cannot find model manager for scheme '"+t+"'");return n},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function $f(t){if(-1===t.indexOf(Xf))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Yf.getSchemes().join(","));return{scheme:t.split(Xf)[0],path:t.split(Xf)[1]}}function Qf(t,n,e){return void 0===e&&(e=!1),s(this,void 0,void 0,(function(){var r,o,i,a,u,s,l,f,h;return c(this,(function(c){switch(c.label){case 0:return A(t!==n,(function(){return"Old path and new path are the same: '"+t+"'"})),A((r=jf.getLoadHandlers(t)).length>0,(function(){return"Copying failed because no load handler is found for source URL "+t+"."})),A(r.length<2,(function(){return"Copying failed because more than one ("+r.length+") load handlers for source URL "+t+"."})),o=r[0],A((i=jf.getSaveHandlers(n)).length>0,(function(){return"Copying failed because no save handler is found for destination URL "+n+"."})),A(i.length<2,(function(){return"Copying failed because more than one ("+r.length+") save handlers for destination URL "+n+"."})),a=i[0],u=$f(t).scheme,s=$f(t).path,l=u===$f(t).scheme,[4,o.load()];case 1:return f=c.sent(),e&&l?[4,Yf.getManager(u).removeModel(s)]:[3,3];case 2:c.sent(),c.label=3;case 3:return[4,a.save(f)];case 4:return h=c.sent(),!e||l?[3,6]:[4,Yf.getManager(u).removeModel(s)];case 5:c.sent(),c.label=6;case 6:return[2,h.modelArtifactsInfo]}}))}))}var Jf="models_store",Zf="model_info_store";function th(){if(!h().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t=window||self,n=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==n)throw new Error("The current browser does not appear to support IndexedDB.");return n}function nh(t){var n=t.result;n.createObjectStore(Jf,{keyPath:"modelPath"}),n.createObjectStore(Zf,{keyPath:"modelPath"})}var eh=function(){function t(t){if(this.indexedDB=th(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}return t.prototype.save=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,n){var e=this;return new Promise((function(t,r){var o=e.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return nh(o)},o.onsuccess=function(){var i=o.result;if(null==n){var a=i.transaction(Jf,"readonly"),u=a.objectStore(Jf).get(e.modelPath);u.onsuccess=function(){if(null==u.result)return i.close(),r(new Error("Cannot find model with path '"+e.modelPath+"' in IndexedDB."));t(u.result.modelArtifacts)},u.onerror=function(t){return i.close(),r(u.error)},a.oncomplete=function(){return i.close()}}else{var s,c=Kf(n),l=i.transaction(Zf,"readwrite"),f=l.objectStore(Zf),h=f.put({modelPath:e.modelPath,modelArtifactsInfo:c});h.onsuccess=function(){var o=(s=i.transaction(Jf,"readwrite")).objectStore(Jf).put({modelPath:e.modelPath,modelArtifacts:n,modelArtifactsInfo:c});o.onsuccess=function(){return t({modelArtifactsInfo:c})},o.onerror=function(t){var n=(f=l.objectStore(Zf)).delete(e.modelPath);n.onsuccess=function(){return i.close(),r(o.error)},n.onerror=function(t){return i.close(),r(o.error)}}},h.onerror=function(t){return i.close(),r(h.error)},l.oncomplete=function(){null==s?i.close():s.oncomplete=function(){return i.close()}}}},o.onerror=function(t){return r(o.error)}}))},t.URL_SCHEME="indexeddb://",t}(),rh=function(t){return h().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(eh.URL_SCHEME)?(n=t.slice(eh.URL_SCHEME.length),new eh(n)):null;var n};jf.registerSaveRouter(rh),jf.registerLoadRouter(rh);var oh=function(){function t(){this.indexedDB=th()}return t.prototype.listModels=function(){return s(this,void 0,void 0,(function(){var t=this;return c(this,(function(n){return[2,new Promise((function(n,e){var r=t.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return nh(r)},r.onsuccess=function(){var t=r.result,o=t.transaction(Zf,"readonly"),i=o.objectStore(Zf).getAll();i.onsuccess=function(){for(var t={},e=0,r=i.result;e<r.length;e++){var o=r[e];t[o.modelPath]=o.modelArtifactsInfo}n(t)},i.onerror=function(n){return t.close(),e(i.error)},o.oncomplete=function(){return t.close()}},r.onerror=function(t){return e(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return s(this,void 0,void 0,(function(){var n=this;return c(this,(function(e){var r;return t=(r=t).startsWith(eh.URL_SCHEME)?r.slice(eh.URL_SCHEME.length):r,[2,new Promise((function(e,r){var o=n.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return nh(o)},o.onsuccess=function(){var n,i=o.result,a=i.transaction(Zf,"readwrite"),u=a.objectStore(Zf),s=u.get(t);s.onsuccess=function(){if(null==s.result)return i.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var o=u.delete(t),a=function(){var o=(n=i.transaction(Jf,"readwrite")).objectStore(Jf).delete(t);o.onsuccess=function(){return e(s.result.modelArtifactsInfo)},o.onerror=function(t){return r(s.error)}};o.onsuccess=a,o.onerror=function(t){return a(),i.close(),r(s.error)}},s.onerror=function(t){return i.close(),r(s.error)},a.oncomplete=function(){null==n?i.close():n.oncomplete=function(){return i.close()}}},o.onerror=function(t){return r(o.error)}}))]}))}))},t}();if(h().getBool("IS_BROWSER"))try{Yf.registerManager(eh.URL_SCHEME,new oh)}catch(a){}var ih="/",ah="tensorflowjs_models",uh="info",sh="model_topology",ch="weight_specs",lh="weight_data",fh="model_metadata";function hh(t){return{info:[ah,t,uh].join(ih),topology:[ah,t,sh].join(ih),weightSpecs:[ah,t,ch].join(ih),weightData:[ah,t,lh].join(ih),modelMetadata:[ah,t,fh].join(ih)}}function dh(t){var n=t.split(ih);if(n.length<3)throw new Error("Invalid key format: "+t);return n.slice(1,n.length-1).join(ih)}var ph=function(){function t(t){if(!h().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=hh(this.modelPath)}return t.prototype.save=function(t){return s(this,void 0,void 0,(function(){var n,e,r;return c(this,(function(i){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");n=JSON.stringify(t.modelTopology),e=JSON.stringify(t.weightSpecs),r=Kf(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,e),this.LS.setItem(this.keys.weightData,function(t){if(Vf)return o.from(t).toString("base64");for(var n=new Uint8Array(t),e="",r=0,i=n.length;r<i;r++)e+=String.fromCharCode(n[r]);return btoa(e)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),[2,{modelArtifactsInfo:r}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}return[2]}))}))},t.prototype.load=function(){return s(this,void 0,void 0,(function(){var t,n,e,r,i,a,u;return c(this,(function(s){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(n={},null==(e=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(n.modelTopology=e,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(n.weightSpecs=r,null!=(i=this.LS.getItem(this.keys.modelMetadata))&&(a=JSON.parse(i),n.format=a.format,n.generatedBy=a.generatedBy,n.convertedBy=a.convertedBy,n.userDefinedMetadata=a.userDefinedMetadata),null==(u=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return n.weightData=function(t){if(Vf){var n=o.from(t,"base64");return n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}for(var e=atob(t),r=new Uint8Array(e.length),i=0;i<e.length;++i)r.set([e.charCodeAt(i)],i);return r.buffer}(u),[2,n]}))}))},t.URL_SCHEME="localstorage://",t}(),vh=function(t){return h().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(ph.URL_SCHEME)?(n=t.slice(ph.URL_SCHEME.length),new ph(n)):null;var n};jf.registerSaveRouter(vh),jf.registerLoadRouter(vh);var mh=function(){function t(){A(h().getBool("IS_BROWSER"),(function(){return"Current environment is not a web browser"})),A("undefined"==typeof window||void 0!==window.localStorage,(function(){return"Current browser does not appear to support localStorage"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return s(this,void 0,void 0,(function(){var t,n,e,r,o,i;return c(this,(function(a){for(t={},n=ah+ih,e=ih+uh,r=0;r<this.LS.length;++r)(o=this.LS.key(r)).startsWith(n)&&o.endsWith(e)&&(i=dh(o),t[i]=JSON.parse(this.LS.getItem(o)));return[2,t]}))}))},t.prototype.removeModel=function(t){return s(this,void 0,void 0,(function(){var n,e;return c(this,(function(r){var o;if(t=(o=t).startsWith(ph.URL_SCHEME)?o.slice(ph.URL_SCHEME.length):o,n=hh(t),null==this.LS.getItem(n.info))throw new Error("Cannot find model at path '"+t+"'");return e=JSON.parse(this.LS.getItem(n.info)),this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),[2,e]}))}))},t}();if(h().getBool("IS_BROWSER"))try{Yf.registerManager(ph.URL_SCHEME,new mh)}catch(a){}function gh(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var yh=function(){function t(n){if(!h().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");n.startsWith(t.URL_SCHEME)&&(n=n.slice(t.URL_SCHEME.length)),null!=n&&0!==n.length||(n="model"),this.modelTopologyFileName=n+".json",this.weightDataFileName=n+".weights.bin"}return t.prototype.save=function(t){return s(this,void 0,void 0,(function(){var n,e,r,o,i,a;return c(this,(function(u){switch(u.label){case 0:if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");if(n=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 1:return e=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:e},o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=o,[4,gh((function(){return i.dispatchEvent(new MouseEvent("click"))}))];case 2:return u.sent(),null==t.weightData?[3,4]:((a=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,a.href=n,[4,gh((function(){return a.dispatchEvent(new MouseEvent("click"))}))]);case 3:u.sent(),u.label=4;case 4:return[2,{modelArtifactsInfo:Kf(t)}]}}))}))},t.URL_SCHEME="downloads://",t}(),xh=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}return t.prototype.load=function(){return s(this,void 0,void 0,(function(){var t,n,e=this;return c(this,(function(r){return t=this.files[0],n=this.files.slice(1),[2,new Promise((function(r,o){var i=new FileReader;i.onload=function(i){var a=JSON.parse(i.target.result),u=a.modelTopology;if(null!=u){0===n.length&&r({modelTopology:u});var s=a.weightsManifest;if(null!=s){var c;try{c=e.checkManifestAndWeightFiles(s,n)}catch(t){return void o(t)}var l=[],f=[],h=[];s.forEach((function(t){t.paths.forEach((function(t){f.push(t),h.push(null)})),l.push.apply(l,t.weights)})),s.forEach((function(t){t.paths.forEach((function(t){var n=new FileReader;n.onload=function(n){var e=n.target.result,o=f.indexOf(t);h[o]=e,-1===h.indexOf(null)&&r({modelTopology:u,weightSpecs:l,weightData:Hf(h),format:a.format,generatedBy:a.generatedBy,convertedBy:a.convertedBy,userDefinedMetadata:a.userDefinedMetadata})},n.onerror=function(n){return o("Failed to weights data from file of path '"+t+"'.")},n.readAsArrayBuffer(c[t])}))}))}else o(new Error("weightManifest field is missing from file "+t.name))}else o(new Error("modelTopology field is missing from file "+t.name))},i.onerror=function(n){return o("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},i.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,n){for(var e=[],r=n.map((function(t){return qf(t.name)})),o={},i=0,a=t;i<a.length;i++)a[i].paths.forEach((function(t){var i=qf(t);if(-1!==e.indexOf(i))throw new Error("Duplicate file basename found in weights manifest: '"+i+"'");if(e.push(i),-1===r.indexOf(i))throw new Error("Weight file with basename '"+i+"' is not provided.");o[t]=n[r.indexOf(i)]}));if(e.length!==n.length)throw new Error("Mismatch in the number of files in weights manifest ("+e.length+") and the number of weight files provided ("+n.length+").");return o},t}();function bh(t,n,e,r){!function(t){A(null!=t&&Array.isArray(t)&&t.length>0,(function(){return"promises must be a none empty array"}))}(t),function(t,n){A(t>=0&&t<=1,(function(){return"Progress fraction must be in range [0, 1], but got startFraction "+t})),A(n>=0&&n<=1,(function(){return"Progress fraction must be in range [0, 1], but got endFraction "+n})),A(n>=t,(function(){return"startFraction must be no more than endFraction, but got startFraction "+t+" and endFraction "+n}))}(e=null==e?0:e,r=null==r?1:r);var o=0;return Promise.all(t.map((function(i){return i.then((function(i){var a=e+ ++o/t.length*(r-e);return n(a),i})),i})))}function wh(t,n){return s(this,void 0,void 0,(function(){var e,r,o,i,a,u,s,l,f;return c(this,(function(c){switch(c.label){case 0:return null==n&&(n={}),e=null==n.fetchFunc?h().platform.fetch:n.fetchFunc,r=t.map((function(t){return e(t,n.requestInit,{isBinary:!0})})),o=0,i=.5,null!=n.onProgress?[3,2]:[4,Promise.all(r)];case 1:return a=c.sent(),[3,4];case 2:return[4,bh(r,n.onProgress,o,i)];case 3:a=c.sent(),c.label=4;case 4:return u=a.map((function(t){return t.arrayBuffer()})),s=.5,l=1,null!=n.onProgress?[3,6]:[4,Promise.all(u)];case 5:return f=c.sent(),[3,8];case 6:return[4,bh(u,n.onProgress,s,l)];case 7:f=c.sent(),c.label=8;case 8:return[2,f]}}))}))}function Ch(t){var n=this;return function(e,r,o){return void 0===r&&(r=""),s(n,void 0,void 0,(function(){var n,i,a,u,s,l,f,h,d,p;return c(this,(function(c){switch(c.label){case 0:if(n=e.map((function(){return!1})),i={},a=null!=o?o.map((function(){return!1})):[],u=[],e.forEach((function(t,e){var r=0;t.weights.forEach((function(t){var s="quantization"in t?t.quantization.dtype:t.dtype,c=Wf[s]*_(t.shape),l=function(){n[e]=!0,null==i[e]&&(i[e]=[]),i[e].push({manifestEntry:t,groupOffset:r,sizeBytes:c})};null!=o?o.forEach((function(n,e){n===t.name&&(l(),a[e]=!0)})):l(),u.push(t.name),r+=c}))})),!a.every((function(t){return t})))throw s=o.filter((function(t,n){return!a[n]})),new Error("Could not find weights in manifest with names: "+s.join(", ")+". \nManifest JSON has weights with names: "+u.join(", ")+".");return l=n.reduce((function(t,n,e){return n&&t.push(e),t}),[]),f=[],l.forEach((function(t){e[t].paths.forEach((function(t){var n=r+(r.endsWith("/")?"":"/")+t;f.push(n)}))})),[4,t(f)];case 1:return h=c.sent(),d={},p=0,l.forEach((function(t){for(var n=e[t].paths.length,r=0,o=0;o<n;o++)r+=h[p+o].byteLength;for(var a=new ArrayBuffer(r),u=new Uint8Array(a),s=0,c=0;c<n;c++){var l=new Uint8Array(h[p+c]);u.set(l,s),s+=l.byteLength}i[t].forEach((function(t){var n=Uf(a.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var e in n)d[e]=n[e]})),p+=n})),[2,d]}}))}))}}jf.registerSaveRouter((function(t){return h().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(yh.URL_SCHEME)?function(t){return void 0===t&&(t="model"),new yh(t)}(t.slice(yh.URL_SCHEME.length)):null}));var Eh=function(){function t(t,n){if(this.DEFAULT_METHOD="POST",null==n&&(n={}),this.weightPathPrefix=n.weightPathPrefix,this.onProgress=n.onProgress,null!=n.fetchFunc?(A("function"==typeof n.fetchFunc,(function(){return"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=n.fetchFunc):this.fetch=h().platform.fetch,A(null!=t&&t.length>0,(function(){return"URL path for http must not be null, undefined or empty."})),Array.isArray(t)&&A(2===t.length,(function(){return"URL paths for http must have a length of 2, (actual length is "+t.length+")."})),this.path=t,null!=n.requestInit&&null!=n.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=n.requestInit||{}}return t.prototype.save=function(t){return s(this,void 0,void 0,(function(){var n,e,r,o;return c(this,(function(i){switch(i.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(n=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,e=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:e},n.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&n.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.fetch(this.path,n)];case 1:if((o=i.sent()).ok)return[2,{modelArtifactsInfo:Kf(t),responses:[o]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+o.status+".")}}))}))},t.prototype.load=function(){return s(this,void 0,void 0,(function(){var t,n,e,r,o,i,a,u,s,l,f,h;return c(this,(function(c){switch(c.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=c.sent()).ok)throw new Error("Request to "+this.path+" failed with status code "+t.status+". Please verify this URL points to the model JSON of the model to load.");c.label=2;case 2:return c.trys.push([2,4,,5]),[4,t.json()];case 3:return n=c.sent(),[3,5];case 4:throw c.sent(),e="Failed to parse model JSON of response from "+this.path+".",this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e);case 5:if(r=n.modelTopology,o=n.weightsManifest,i=n.generatedBy,a=n.convertedBy,u=n.format,s=n.userDefinedMetadata,null==r&&null==o)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==o?[3,7]:[4,this.loadWeights(o)];case 6:h=c.sent(),l=h[0],f=h[1],c.label=7;case 7:return[2,{modelTopology:r,weightSpecs:l,weightData:f,userDefinedMetadata:s,generatedBy:i,convertedBy:a,format:u}]}}))}))},t.prototype.loadWeights=function(t){return s(this,void 0,void 0,(function(){var n,e,r,o,i,a,u,s,l,f,h;return c(this,(function(c){switch(c.label){case 0:for(n=Array.isArray(this.path)?this.path[1]:this.path,e=function(t){var n=t.lastIndexOf("/"),e=t.lastIndexOf("?");return[t.substring(0,n)+"/",e>n?t.substring(e):""]}(n),r=e[0],o=e[1],i=this.weightPathPrefix||r,a=[],u=0,s=t;u<s.length;u++)l=s[u],a.push.apply(a,l.weights);return f=[],t.forEach((function(t){t.paths.forEach((function(t){f.push(i+t+o)}))})),[4,wh(f,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return h=c.sent(),[2,[a,Hf(h)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\/\//,t}();function Rh(t){return null!=t.match(Eh.URL_SCHEME_REGEX)}var Ih=function(t,n){return"undefined"==typeof fetch?null:(Array.isArray(t)?t.every((function(t){return Rh(t)})):Rh(t))?kh(t,{onProgress:n}):null};function kh(t,n){return new Eh(t,n)}jf.registerSaveRouter(Ih),jf.registerLoadRouter(Ih);var Sh,Ah=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),Th=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){return[2,this.saveHandler(t)]}))}))},t}(),Dh=Object.freeze({browserFiles:function(t){return new xh(t)},browserHTTPRequest:function(t,n){return kh(t,n)},concatenateArrayBuffers:Hf,decodeWeights:Uf,encodeWeights:function(t,n){return s(this,void 0,void 0,(function(){var e,r,o,i,a,u=this;return c(this,(function(l){switch(l.label){case 0:for(e=[],r=[],o=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),i=function(i){var a=o[i],l=Array.isArray(t)?t[i].tensor:t[a];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype)throw new Error("Unsupported dtype in weight '"+a+"': "+l.dtype);var f={name:a,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){var h=new Promise((function(t){return s(u,void 0,void 0,(function(){var n,e,r,o,i,a,u;return c(this,(function(s){switch(s.label){case 0:return[4,l.bytes()];case 1:for(n=s.sent(),e=n.reduce((function(t,n){return t+n.length}),0)+4*n.length,r=new Uint8Array(e),o=0,i=0;i<n.length;i++)a=n[i],u=new Uint8Array(new Uint32Array([a.length]).buffer),r.set(u,o),o+=4,r.set(a,o),o+=a.length;return t(r),[2]}}))}))}));r.push(h)}else r.push(l.data());null!=n&&(f.group=n),e.push(f)},a=0;a<o.length;++a)i(a);return[4,Promise.all(r)];case 1:return[2,{data:zf(l.sent()),specs:e}]}}))}))},fromMemory:function(t,n,e,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new Ah(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ah({modelTopology:t})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ah({modelTopology:t,weightSpecs:n,weightData:e,trainingConfig:r}))},getLoadHandlers:function(t,n){return jf.getLoadHandlers(t,n)},getModelArtifactsInfoForJSON:Kf,getSaveHandlers:function(t){return jf.getSaveHandlers(t)},http:kh,isHTTPScheme:Rh,loadWeights:function(t,n,e,r){return void 0===n&&(n=""),s(this,void 0,void 0,(function(){return c(this,(function(o){return[2,Ch((function(t){return wh(t,{requestInit:r})}))(t,n,e)]}))}))},registerLoadRouter:function(t){return jf.registerLoadRouter(t)},registerSaveRouter:function(t){return jf.registerSaveRouter(t)},weightsLoaderFactory:Ch,withSaveHandler:function(t){return new Th(t)},copyModel:function(t,n){return s(this,void 0,void 0,(function(){return c(this,(function(e){return[2,Qf(t,n,!1)]}))}))},listModels:function(){return s(this,void 0,void 0,(function(){var t,n,e,r,o,i,a;return c(this,(function(u){switch(u.label){case 0:t=Yf.getSchemes(),n={},e=0,r=t,u.label=1;case 1:return e<r.length?(o=r[e],[4,Yf.getManager(o).listModels()]):[3,4];case 2:for(a in i=u.sent())n[o+Xf+a]=i[a];u.label=3;case 3:return e++,[3,1];case 4:return[2,n]}}))}))},moveModel:function(t,n){return s(this,void 0,void 0,(function(){return c(this,(function(e){return[2,Qf(t,n,!0)]}))}))},removeModel:function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){return n=$f(t),[2,Yf.getManager(n.scheme).removeModel(n.path)]}))}))}}),Nh=Ae({confusionMatrix_:function(t,n,e){var r=me(t,"labels","confusionMatrix"),o=me(n,"predictions","confusionMatrix");A(null==e||e>0&&Number.isInteger(e),(function(){return"If provided, numClasses must be a positive integer, but got "+e})),A(1===r.rank,(function(){return"Expected the rank of labels to be 1, but got "+r.rank})),A(1===o.rank,(function(){return"Expected the rank of predictions to be 1, but got "+o.rank})),A(r.shape[0]===o.shape[0],(function(){return"Mismatch in the number of examples: "+r.shape[0]+" vs. "+o.shape[0]+". Labels and predictions should have the same number of elements."})),A(e>0&&Number.isInteger(e),(function(){return"numClasses is required to be a positive integer, but got "+e}));var i=Rr(r.asType("int32"),e),a=Rr(o.asType("int32"),e);return i.transpose().matMul(a).asType("int32")}}),_h=Object.freeze({confusionMatrix:Nh}),Fh=Ae({fromPixels_:function(t,n){if(void 0===n&&(n=3),n>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var e=!1,r=!1,o=!1,i=!1,a=!1;if(t.data instanceof Uint8Array)e=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)i=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);a=!0}if(o&&o&&t.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");if(null!=m("FromPixels",Ut.backendName))return Ut.runKernel("FromPixels",{pixels:t},{numChannels:n});var u,s,c=o?[t.videoWidth,t.videoHeight]:[t.width,t.height],l=c[0],f=c[1];if(a?u=t.getContext("2d").getImageData(0,0,l,f).data:r||e?u=t.data:(i||o)&&(null==Sh&&(Sh=document.createElement("canvas").getContext("2d")),Sh.canvas.width=l,Sh.canvas.height=f,Sh.drawImage(t,0,0,l,f),u=Sh.getImageData(0,0,l,f).data),4===n)s=new Int32Array(u);else{var h=l*f;s=new Int32Array(h*n);for(var d=0;d<h;d++)for(var p=0;p<n;++p)s[d*n+p]=u[4*d+p]}return Pe(s,[f,l,n],"int32")}}),Oh=Object.freeze({toPixels:function(t,n){return s(this,void 0,void 0,(function(){var e,r,o,i,a,u,s,l,f,h,d,p,v,m,g,y,x,b,w,C,E,R,I;return c(this,(function(c){switch(c.label){case 0:if(e=me(t,"img","toPixels"),t instanceof Et||(e=e.toInt()),2!==e.rank&&3!==e.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+e.rank+".");if(r=e.shape.slice(0,2),o=r[0],i=r[1],(a=2===e.rank?1:e.shape[2])>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);return[4,e.data()];case 1:return u=c.sent(),s=e.min(),l=e.max(),[4,Promise.all([s.data(),l.data()])];case 2:if(f=c.sent(),h=f[0],d=f[1],p=h[0],v=d[0],s.dispose(),l.dispose(),"float32"===e.dtype){if(p<0||v>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+p+" - "+v+"].")}else{if("int32"!==e.dtype)throw new Error("Unsupported type for toPixels: "+e.dtype+". Please use float32 or int32 tensors.");if(p<0||v>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+p+" - "+v+"].")}for(m="float32"===e.dtype?255:1,g=new Uint8ClampedArray(i*o*4),y=0;y<o*i;++y)x=void 0,b=void 0,w=void 0,C=void 0,1===a?(x=u[y]*m,b=u[y]*m,w=u[y]*m,C=255):3===a?(x=u[3*y]*m,b=u[3*y+1]*m,w=u[3*y+2]*m,C=255):4===a&&(x=u[4*y]*m,b=u[4*y+1]*m,w=u[4*y+2]*m,C=u[4*y+3]*m),g[0+(E=4*y)]=Math.round(x),g[E+1]=Math.round(b),g[E+2]=Math.round(w),g[E+3]=Math.round(C);return null!=n&&(n.width=i,n.height=o,R=n.getContext("2d"),I=new ImageData(g,i,o),R.putImageData(I,0,0)),e!==t&&e.dispose(),[2,g]}}))}))},fromPixels:Fh}),Mh=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,n){return new t(n)},t}(),Bh=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(n){t.getMap().classNameMap[n.className]=[n,n.fromConfig]},t}();function Ph(t){A(null!=t.className,(function(){return"Class being registered does not have the static className property defined."})),A("string"==typeof t.className,(function(){return"className is required to be a string, but got type "+typeof t.className})),A(t.className.length>0,(function(){return"Class being registered has an empty-string as its className, which is disallowed."})),Bh.register(t)}var Lh=Object.freeze({Serializable:Mh,SerializationMap:Bh,registerClass:Ph});function Wh(){return 32===Ut.backend.floatPrecision()?.001:.1}function Uh(t,n,e){var r=!0;if((j(t)||j(n))&&(r=!1),j(t)&&j(n)&&(r=!0),r){var o=t.constructor.name,i=n.constructor.name;if(o!==i)throw new Error("Arrays are of different type. Actual: "+o+". Expected: "+i)}if(Array.isArray(t)&&Array.isArray(n)){var a=pe(t),u=pe(n);if(!F(a,u))throw new Error("Arrays have different shapes. Actual: ["+a+"]. Expected: ["+u+"]")}var s=j(t)?t:N(t),c=j(n)?n:N(n);if(s.length!==c.length)throw new Error("Arrays have different lengths actual: "+s.length+" vs expected: "+c.length+".\nActual:   "+s+".\nExpected: "+c+".");for(var l=0;l<c.length;++l){var f=s[l],h=c[l];if(!e(f,h))throw new Error("Arrays differ: actual["+l+"] = "+f+", expected["+l+"] = "+h+".\nActual:   "+s+".\nExpected: "+c+".")}}function zh(t,n,e){return!isFinite(t)&&!isFinite(n)||!(isNaN(t)||isNaN(n)||Math.abs(t-n)>e)}var Vh=Object.freeze({TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(t,n,e){return null==e&&(e=Wh()),Uh(t,n,(function(t,n){return zh(t,n,e)}))},testEpsilon:Wh,expectPromiseToFail:function(t,n){t().then((function(){return n.fail()}),(function(){return n()}))},expectArraysEqual:function(t,n){var e="string"==typeof n||"number"==typeof n||"boolean"==typeof n?[n]:n;return $(t)||$(t[0])||$(n)||$(n[0])?Uh(t,e,(function(t,n){return t==n})):Uh(t,n,(function(t,n){return zh(t,n,0)}))},expectNumbersClose:function(t,n,e){if(null==e&&(e=Wh()),!zh(t,n,e))throw new Error("Numbers differ: actual === "+t+", expected === "+n)},expectValuesInRange:function(t,n,e){for(var r=0;r<t.length;r++)if(t[r]<n||t[r]>e)throw new Error("Value out of range:"+t[r]+" low: "+n+", high: "+e)},expectArrayBuffersEqual:function(t,n){expect(new Float32Array(t)).toEqual(new Float32Array(n))}}),Gh="1.7.0",Hh=Object.freeze({gpgpu_util:Aa,webgl_util:Hn,forceHalfFloat:function(){h().set("WEBGL_FORCE_F16_TEXTURES",!0)},MathBackendWebGL:Ou,setWebGLContext:Xt,GPGPUContext:Ta}),qh=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return u(n,t),n.prototype.minimize=function(t,n,e){void 0===n&&(n=!1);var r=this.computeGradients(t,e),o=r.value,i=r.grads;if(null!=e){var a=e.map((function(t){return{name:t.name,tensor:i[t.name]}}));this.applyGradients(a)}else this.applyGradients(i);return ne(i),n?o:(o.dispose(),null)},Object.defineProperty(n.prototype,"iterations",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),n.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},n.prototype.computeGradients=function(t,n){return ho(t,n)},n.prototype.dispose=function(){null!=this.iterations_&&ne(this.iterations_)},n.prototype.saveIterations=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:"iter",tensor:Oe(this.iterations_,"int32")}]}))}))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}))}))},n.prototype.extractIterations=function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){switch(e.label){case 0:return n=this,[4,t[0].tensor.data()];case 1:return n.iterations_=e.sent()[0],[2,t.slice(1)]}}))}))},n}(Mh);Object.defineProperty(qh,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var Kh=function(t){function n(n,e,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=n,o.rho=e,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Ut.backend.epsilon()),o}return u(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Ut.registeredVariables[e];null==n.accumulatedGrads[r]&&(n.accumulatedGrads[r]={originalName:e+"/accum_grad",variable:te((function(){return Xe(o).variable(!1)}))}),null==n.accumulatedUpdates[r]&&(n.accumulatedUpdates[r]={originalName:e+"/accum_var",variable:te((function(){return Xe(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[e];if(null!=i){var a=n.accumulatedGrads[r].variable,u=n.accumulatedUpdates[r].variable;te((function(){var t=a.mul(n.rho).add(i.square().mul(1-n.rho)),e=u.add(n.epsilon).sqrt().div(a.add(n.epsilon).sqrt()).mul(i),r=u.mul(n.rho).add(e.square().mul(1-n.rho));a.assign(t),u.assign(r);var s=e.mul(-n.learningRate).add(o);o.assign(s)}))}})),this.incrementIterations()},n.prototype.dispose=function(){null!=this.accumulatedUpdates&&(ne(this.accumulatedGrads.map((function(t){return t.variable}))),ne(this.accumulatedUpdates.map((function(t){return t.variable}))))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[n.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),n=t.length/2,this.accumulatedGrads=t.slice(0,n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(n,2*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},n.fromConfig=function(t,n){return new t(n.learningRate,n.rho,n.epsilon)},n.className="Adadelta",n}(qh);Ph(Kh);var jh=function(t){function n(n,e){void 0===e&&(e=.1);var r=t.call(this)||this;return r.learningRate=n,r.initialAccumulatorValue=e,r.accumulatedGrads=[],r}return u(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Ut.registeredVariables[e];null==n.accumulatedGrads[r]&&(n.accumulatedGrads[r]={originalName:e+"/accumulator",variable:te((function(){return He(o.shape,n.initialAccumulatorValue).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[e];if(null!=i){var a=n.accumulatedGrads[r].variable;te((function(){var t=a.add(i.square());a.assign(t);var e=i.div(t.add(Ut.backend.epsilon()).sqrt()).mul(-n.learningRate).add(o);o.assign(e)}))}})),this.incrementIterations()},n.prototype.dispose=function(){null!=this.accumulatedGrads&&ne(this.accumulatedGrads.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},n.fromConfig=function(t,n){return new t(n.learningRate,n.initialAccumulatorValue)},n.className="Adagrad",n}(qh);Ph(jh);var Xh=function(t){function n(n,e,r,o){void 0===o&&(o=null);var i=t.call(this)||this;return i.learningRate=n,i.beta1=e,i.beta2=r,i.epsilon=o,i.accumulatedFirstMoment=[],i.accumulatedSecondMoment=[],te((function(){i.accBeta1=Oe(e).variable(),i.accBeta2=Oe(r).variable()})),null==o&&(i.epsilon=Ut.backend.epsilon()),i}return u(n,t),n.prototype.applyGradients=function(t){var n=this,e=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);te((function(){var r=rc(1,n.accBeta1),o=rc(1,n.accBeta2);e.forEach((function(e,i){var a=Ut.registeredVariables[e];null==n.accumulatedFirstMoment[i]&&(n.accumulatedFirstMoment[i]={originalName:e+"/m",variable:te((function(){return Xe(a).variable(!1)}))}),null==n.accumulatedSecondMoment[i]&&(n.accumulatedSecondMoment[i]={originalName:e+"/v",variable:te((function(){return Xe(a).variable(!1)}))});var u=Array.isArray(t)?t[i].tensor:t[e];if(null!=u){var s=n.accumulatedFirstMoment[i].variable,c=n.accumulatedSecondMoment[i].variable,l=s.mul(n.beta1).add(u.mul(1-n.beta1)),f=c.mul(n.beta2).add(u.square().mul(1-n.beta2)),h=l.div(r),d=f.div(o);s.assign(l),c.assign(f);var p=h.div(d.sqrt().add(n.epsilon)).mul(-n.learningRate).add(a);a.assign(p)}})),n.accBeta1.assign(n.accBeta1.mul(n.beta1)),n.accBeta2.assign(n.accBeta2.mul(n.beta2))})),this.incrementIterations()},n.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&ne(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&ne(this.accumulatedSecondMoment.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[n.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){var n,e=this;return c(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),te((function(){e.accBeta1.assign(tc(e.beta1,e.iterations_+1)),e.accBeta2.assign(tc(e.beta2,e.iterations_+1))})),n=t.length/2,this.accumulatedFirstMoment=t.slice(0,n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(n,2*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},n.fromConfig=function(t,n){return new t(n.learningRate,n.beta1,n.beta2,n.epsilon)},n.className="Adam",n}(qh);Ph(Xh);var Yh=function(t){function n(n,e,r,o,i){void 0===o&&(o=null),void 0===i&&(i=0);var a=t.call(this)||this;return a.learningRate=n,a.beta1=e,a.beta2=r,a.epsilon=o,a.decay=i,a.accumulatedFirstMoment=[],a.accumulatedWeightedInfNorm=[],te((function(){a.iteration=Oe(0).variable(),a.accBeta1=Oe(e).variable()})),null==o&&(a.epsilon=Ut.backend.epsilon()),a}return u(n,t),n.prototype.applyGradients=function(t){var n=this,e=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);te((function(){var r=rc(1,n.accBeta1),o=Vs(-n.learningRate,n.iteration.mul(n.decay).add(1));e.forEach((function(e,i){var a=Ut.registeredVariables[e];null==n.accumulatedFirstMoment[i]&&(n.accumulatedFirstMoment[i]={originalName:e+"/m",variable:Xe(a).variable(!1)}),null==n.accumulatedWeightedInfNorm[i]&&(n.accumulatedWeightedInfNorm[i]={originalName:e+"/v",variable:Xe(a).variable(!1)});var u=Array.isArray(t)?t[i].tensor:t[e];if(null!=u){var s=n.accumulatedFirstMoment[i].variable,c=n.accumulatedWeightedInfNorm[i].variable,l=s.mul(n.beta1).add(u.mul(1-n.beta1)),f=c.mul(n.beta2),h=u.abs(),d=f.maximum(h);s.assign(l),c.assign(d);var p=o.div(r).mul(l.div(d.add(n.epsilon))).add(a);a.assign(p)}})),n.iteration.assign(n.iteration.add(1)),n.accBeta1.assign(n.accBeta1.mul(n.beta1))})),this.incrementIterations()},n.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&ne(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&ne(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for Adamax yet.")}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for Adamax yet.")}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},n.fromConfig=function(t,n){return new t(n.learningRate,n.beta1,n.beta2,n.epsilon,n.decay)},n.className="Adamax",n}(qh);Ph(Yh);var $h=function(t){function n(n){var e=t.call(this)||this;return e.learningRate=n,e.setLearningRate(n),e}return u(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Array.isArray(t)?t[r].tensor:t[e];if(null!=o){var i=Ut.registeredVariables[e];te((function(){var t=n.c.mul(o).add(i);i.assign(t)}))}})),this.incrementIterations()},n.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=ee(Oe(-t))},n.prototype.dispose=function(){this.c.dispose()},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=n.sent()).length)throw new Error("SGD optimizer does not have settable weights.");return[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate}},n.fromConfig=function(t,n){return new t(n.learningRate)},n.className="SGD",n}(qh);Ph($h);var Qh=function(t){function n(n,e,r){void 0===r&&(r=!1);var o=t.call(this,n)||this;return o.learningRate=n,o.momentum=e,o.useNesterov=r,o.accumulations=[],o.m=Oe(o.momentum),o}return u(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Ut.registeredVariables[e];null==n.accumulations[r]&&(n.accumulations[r]={originalName:e+"/momentum",variable:te((function(){return Xe(o).variable(!1)}))});var i=n.accumulations[r].variable,a=Array.isArray(t)?t[r].tensor:t[e];null!=a&&te((function(){var t,e=n.m.mul(i).add(a);t=n.useNesterov?n.c.mul(a.add(e.mul(n.m))).add(o):n.c.mul(e).add(o),i.assign(e),o.assign(t)}))})),this.incrementIterations()},n.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&ne(this.accumulations.map((function(t){return t.variable})))},n.prototype.setMomentum=function(t){this.momentum=t},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},n.fromConfig=function(t,n){return new t(n.learningRate,n.momentum,n.useNesterov)},n.className="Momentum",n}($h);Ph(Qh);var Jh=function(t){function n(n,e,r,o,i){void 0===e&&(e=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===i&&(i=!1);var a=t.call(this)||this;if(a.learningRate=n,a.decay=e,a.momentum=r,a.epsilon=o,a.accumulatedMeanSquares=[],a.accumulatedMoments=[],a.accumulatedMeanGrads=[],a.centered=i,null==o&&(a.epsilon=Ut.backend.epsilon()),null==n)throw new Error("learningRate for RMSPropOptimizer must be defined.");return a}return u(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Ut.registeredVariables[e];null==n.accumulatedMeanSquares[r]&&(n.accumulatedMeanSquares[r]={originalName:e+"/rms",variable:te((function(){return Xe(o).variable(!1)}))}),null==n.accumulatedMoments[r]&&(n.accumulatedMoments[r]={originalName:e+"/momentum",variable:te((function(){return Xe(o).variable(!1)}))}),null==n.accumulatedMeanGrads[r]&&n.centered&&(n.accumulatedMeanGrads[r]={originalName:e+"/mg",variable:te((function(){return Xe(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[e];if(null!=i){var a=n.accumulatedMeanSquares[r].variable,u=n.accumulatedMoments[r].variable;te((function(){var t=a.mul(n.decay).add(i.square().mul(1-n.decay));if(n.centered){var e=n.accumulatedMeanGrads[r].variable,s=e.mul(n.decay).add(i.mul(1-n.decay)),c=u.mul(n.momentum).add(i.mul(n.learningRate).div(t.sub(s.square().add(n.epsilon)).sqrt()));a.assign(t),e.assign(s),u.assign(c);var l=o.sub(c);o.assign(l)}else{var f=a.mul(n.decay).add(i.square().mul(1-n.decay));c=u.mul(n.momentum).add(i.mul(n.learningRate).div(f.add(n.epsilon).sqrt())),a.assign(f),u.assign(c),l=o.sub(c),o.assign(l)}}))}})),this.incrementIterations()},n.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&ne(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&ne(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&ne(this.accumulatedMoments.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return s(this,void 0,void 0,(function(){var t;return c(this,(function(n){switch(n.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[n.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return s(this,void 0,void 0,(function(){var n;return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),n=this.centered?t.length/3:t.length/2,this.accumulatedMeanSquares=t.slice(0,n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(n,2*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*n,3*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},n.fromConfig=function(t,n){return new t(n.learningRate,n.decay,n.momentum,n.epsilon,n.centered)},n.className="RMSProp",n}(qh);Ph(Jh);var Zh=function(){function t(){}return t.sgd=function(t){return new $h(t)},t.momentum=function(t,n,e){return void 0===e&&(e=!1),new Qh(t,n,e)},t.rmsprop=function(t,n,e,r,o){return void 0===n&&(n=.9),void 0===e&&(e=0),void 0===r&&(r=null),void 0===o&&(o=!1),new Jh(t,n,e,r,o)},t.adam=function(t,n,e,r){return void 0===t&&(t=.001),void 0===n&&(n=.9),void 0===e&&(e=.999),void 0===r&&(r=null),new Xh(t,n,e,r)},t.adadelta=function(t,n,e){return void 0===t&&(t=.001),void 0===n&&(n=.95),void 0===e&&(e=null),new Kh(t,n,e)},t.adamax=function(t,n,e,r,o){return void 0===t&&(t=.002),void 0===n&&(n=.9),void 0===e&&(e=.999),void 0===r&&(r=null),void 0===o&&(o=0),new Yh(t,n,e,r,o)},t.adagrad=function(t,n){return void 0===n&&(n=.1),new jh(t,n)},t}(),td={sgd:Zh.sgd,momentum:Zh.momentum,adadelta:Zh.adadelta,adagrad:Zh.adagrad,rmsprop:Zh.rmsprop,adamax:Zh.adamax,adam:Zh.adam},nd="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:void 0!==i?i:function(t){return t()};function ed(){return new Promise((function(t){return nd((function(){return t()}))}))}Et.prototype.squaredDifference=function(t){return Pu(this,t)},wt=Ef}.call(this,e(1),e(3),e(4).Buffer,e(8).setImmediate)},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n){t.exports=p5},function(t,n){var e,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(t){if(e===setTimeout)return setTimeout(t,0);if((e===i||!e)&&setTimeout)return e=setTimeout,setTimeout(t,0);try{return e(t,0)}catch(n){try{return e.call(null,t,0)}catch(n){return e.call(this,t,0)}}}!function(){try{e="function"==typeof setTimeout?setTimeout:i}catch(t){e=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var s,c=[],l=!1,f=-1;function h(){l&&s&&(l=!1,s.length?c=s.concat(c):f=-1,c.length&&d())}function d(){if(!l){var t=u(h);l=!0;for(var n=c.length;n;){for(s=c,c=[];++f<n;)s&&s[f].run();f=-1,n=c.length}s=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(n){try{return r.call(null,t)}catch(n){return r.call(this,t)}}}(t)}}function p(t,n){this.fun=t,this.array=n}function v(){}o.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];c.push(new p(t,n)),1!==c.length||l||u(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,n,e){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=e(5),o=e(6),i=e(7);function a(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function u(t,n){if(a()<n)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(n)).__proto__=s.prototype:(null===t&&(t=new s(n)),t.length=n),t}function s(t,n,e){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,n,e);if("number"==typeof t){if("string"==typeof n)throw new Error("If encoding is specified then the first argument must be a string");return f(this,t)}return c(this,t,n,e)}function c(t,n,e,r){if("number"==typeof n)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&n instanceof ArrayBuffer?function(t,n,e,r){if(n.byteLength,e<0||n.byteLength<e)throw new RangeError("'offset' is out of bounds");if(n.byteLength<e+(r||0))throw new RangeError("'length' is out of bounds");n=void 0===e&&void 0===r?new Uint8Array(n):void 0===r?new Uint8Array(n,e):new Uint8Array(n,e,r);s.TYPED_ARRAY_SUPPORT?(t=n).__proto__=s.prototype:t=h(t,n);return t}(t,n,e,r):"string"==typeof n?function(t,n,e){"string"==typeof e&&""!==e||(e="utf8");if(!s.isEncoding(e))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(n,e),o=(t=u(t,r)).write(n,e);o!==r&&(t=t.slice(0,o));return t}(t,n,e):function(t,n){if(s.isBuffer(n)){var e=0|d(n.length);return 0===(t=u(t,e)).length||n.copy(t,0,0,e),t}if(n){if("undefined"!=typeof ArrayBuffer&&n.buffer instanceof ArrayBuffer||"length"in n)return"number"!=typeof n.length||(r=n.length)!=r?u(t,0):h(t,n);if("Buffer"===n.type&&i(n.data))return h(t,n.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,n)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function f(t,n){if(l(n),t=u(t,n<0?0:0|d(n)),!s.TYPED_ARRAY_SUPPORT)for(var e=0;e<n;++e)t[e]=0;return t}function h(t,n){var e=n.length<0?0:0|d(n.length);t=u(t,e);for(var r=0;r<e;r+=1)t[r]=255&n[r];return t}function d(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function p(t,n){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var e=t.length;if(0===e)return 0;for(var r=!1;;)switch(n){case"ascii":case"latin1":case"binary":return e;case"utf8":case"utf-8":case void 0:return U(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*e;case"hex":return e>>>1;case"base64":return z(t).length;default:if(r)return U(t).length;n=(""+n).toLowerCase(),r=!0}}function v(t,n,e){var r=!1;if((void 0===n||n<0)&&(n=0),n>this.length)return"";if((void 0===e||e>this.length)&&(e=this.length),e<=0)return"";if((e>>>=0)<=(n>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return T(this,n,e);case"utf8":case"utf-8":return k(this,n,e);case"ascii":return S(this,n,e);case"latin1":case"binary":return A(this,n,e);case"base64":return I(this,n,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,n,e);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,n,e){var r=t[n];t[n]=t[e],t[e]=r}function g(t,n,e,r,o){if(0===t.length)return-1;if("string"==typeof e?(r=e,e=0):e>2147483647?e=2147483647:e<-2147483648&&(e=-2147483648),e=+e,isNaN(e)&&(e=o?0:t.length-1),e<0&&(e=t.length+e),e>=t.length){if(o)return-1;e=t.length-1}else if(e<0){if(!o)return-1;e=0}if("string"==typeof n&&(n=s.from(n,r)),s.isBuffer(n))return 0===n.length?-1:y(t,n,e,r,o);if("number"==typeof n)return n&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,n,e):Uint8Array.prototype.lastIndexOf.call(t,n,e):y(t,[n],e,r,o);throw new TypeError("val must be string, number or Buffer")}function y(t,n,e,r,o){var i,a=1,u=t.length,s=n.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||n.length<2)return-1;a=2,u/=2,s/=2,e/=2}function c(t,n){return 1===a?t[n]:t.readUInt16BE(n*a)}if(o){var l=-1;for(i=e;i<u;i++)if(c(t,i)===c(n,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===s)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(e+s>u&&(e=u-s),i=e;i>=0;i--){for(var f=!0,h=0;h<s;h++)if(c(t,i+h)!==c(n,h)){f=!1;break}if(f)return i}return-1}function x(t,n,e,r){e=Number(e)||0;var o=t.length-e;r?(r=Number(r))>o&&(r=o):r=o;var i=n.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var u=parseInt(n.substr(2*a,2),16);if(isNaN(u))return a;t[e+a]=u}return a}function b(t,n,e,r){return V(U(n,t.length-e),t,e,r)}function w(t,n,e,r){return V(function(t){for(var n=[],e=0;e<t.length;++e)n.push(255&t.charCodeAt(e));return n}(n),t,e,r)}function C(t,n,e,r){return w(t,n,e,r)}function E(t,n,e,r){return V(z(n),t,e,r)}function R(t,n,e,r){return V(function(t,n){for(var e,r,o,i=[],a=0;a<t.length&&!((n-=2)<0);++a)e=t.charCodeAt(a),r=e>>8,o=e%256,i.push(o),i.push(r);return i}(n,t.length-e),t,e,r)}function I(t,n,e){return 0===n&&e===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(n,e))}function k(t,n,e){e=Math.min(t.length,e);for(var r=[],o=n;o<e;){var i,a,u,s,c=t[o],l=null,f=c>239?4:c>223?3:c>191?2:1;if(o+f<=e)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(i=t[o+1]))&&(s=(31&c)<<6|63&i)>127&&(l=s);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(s=(15&c)<<12|(63&i)<<6|63&a)>2047&&(s<55296||s>57343)&&(l=s);break;case 4:i=t[o+1],a=t[o+2],u=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&u)&&(s=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&u)>65535&&s<1114112&&(l=s)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=f}return function(t){var n=t.length;if(n<=4096)return String.fromCharCode.apply(String,t);var e="",r=0;for(;r<n;)e+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return e}(r)}n.Buffer=s,n.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},n.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),n.kMaxLength=a(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,n,e){return c(null,t,n,e)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,n,e){return function(t,n,e,r){return l(n),n<=0?u(t,n):void 0!==e?"string"==typeof r?u(t,n).fill(e,r):u(t,n).fill(e):u(t,n)}(null,t,n,e)},s.allocUnsafe=function(t){return f(null,t)},s.allocUnsafeSlow=function(t){return f(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,n){if(!s.isBuffer(t)||!s.isBuffer(n))throw new TypeError("Arguments must be Buffers");if(t===n)return 0;for(var e=t.length,r=n.length,o=0,i=Math.min(e,r);o<i;++o)if(t[o]!==n[o]){e=t[o],r=n[o];break}return e<r?-1:r<e?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,n){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var e;if(void 0===n)for(n=0,e=0;e<t.length;++e)n+=t[e].length;var r=s.allocUnsafe(n),o=0;for(e=0;e<t.length;++e){var a=t[e];if(!s.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},s.byteLength=p,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var n=0;n<t;n+=2)m(this,n,n+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var n=0;n<t;n+=4)m(this,n,n+3),m(this,n+1,n+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var n=0;n<t;n+=8)m(this,n,n+7),m(this,n+1,n+6),m(this,n+2,n+5),m(this,n+3,n+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?k(this,0,t):v.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",e=n.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,e).match(/.{2}/g).join(" "),this.length>e&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,n,e,r,o){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===n&&(n=0),void 0===e&&(e=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),n<0||e>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&n>=e)return 0;if(r>=o)return-1;if(n>=e)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),a=(e>>>=0)-(n>>>=0),u=Math.min(i,a),c=this.slice(r,o),l=t.slice(n,e),f=0;f<u;++f)if(c[f]!==l[f]){i=c[f],a=l[f];break}return i<a?-1:a<i?1:0},s.prototype.includes=function(t,n,e){return-1!==this.indexOf(t,n,e)},s.prototype.indexOf=function(t,n,e){return g(this,t,n,e,!0)},s.prototype.lastIndexOf=function(t,n,e){return g(this,t,n,e,!1)},s.prototype.write=function(t,n,e,r){if(void 0===n)r="utf8",e=this.length,n=0;else if(void 0===e&&"string"==typeof n)r=n,e=this.length,n=0;else{if(!isFinite(n))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");n|=0,isFinite(e)?(e|=0,void 0===r&&(r="utf8")):(r=e,e=void 0)}var o=this.length-n;if((void 0===e||e>o)&&(e=o),t.length>0&&(e<0||n<0)||n>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return x(this,t,n,e);case"utf8":case"utf-8":return b(this,t,n,e);case"ascii":return w(this,t,n,e);case"latin1":case"binary":return C(this,t,n,e);case"base64":return E(this,t,n,e);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,n,e);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function S(t,n,e){var r="";e=Math.min(t.length,e);for(var o=n;o<e;++o)r+=String.fromCharCode(127&t[o]);return r}function A(t,n,e){var r="";e=Math.min(t.length,e);for(var o=n;o<e;++o)r+=String.fromCharCode(t[o]);return r}function T(t,n,e){var r=t.length;(!n||n<0)&&(n=0),(!e||e<0||e>r)&&(e=r);for(var o="",i=n;i<e;++i)o+=W(t[i]);return o}function D(t,n,e){for(var r=t.slice(n,e),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function N(t,n,e){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+n>e)throw new RangeError("Trying to access beyond buffer length")}function _(t,n,e,r,o,i){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(n>o||n<i)throw new RangeError('"value" argument is out of bounds');if(e+r>t.length)throw new RangeError("Index out of range")}function F(t,n,e,r){n<0&&(n=65535+n+1);for(var o=0,i=Math.min(t.length-e,2);o<i;++o)t[e+o]=(n&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function O(t,n,e,r){n<0&&(n=4294967295+n+1);for(var o=0,i=Math.min(t.length-e,4);o<i;++o)t[e+o]=n>>>8*(r?o:3-o)&255}function M(t,n,e,r,o,i){if(e+r>t.length)throw new RangeError("Index out of range");if(e<0)throw new RangeError("Index out of range")}function B(t,n,e,r,i){return i||M(t,0,e,4),o.write(t,n,e,r,23,4),e+4}function P(t,n,e,r,i){return i||M(t,0,e,8),o.write(t,n,e,r,52,8),e+8}s.prototype.slice=function(t,n){var e,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(n=void 0===n?r:~~n)<0?(n+=r)<0&&(n=0):n>r&&(n=r),n<t&&(n=t),s.TYPED_ARRAY_SUPPORT)(e=this.subarray(t,n)).__proto__=s.prototype;else{var o=n-t;e=new s(o,void 0);for(var i=0;i<o;++i)e[i]=this[i+t]}return e},s.prototype.readUIntLE=function(t,n,e){t|=0,n|=0,e||N(t,n,this.length);for(var r=this[t],o=1,i=0;++i<n&&(o*=256);)r+=this[t+i]*o;return r},s.prototype.readUIntBE=function(t,n,e){t|=0,n|=0,e||N(t,n,this.length);for(var r=this[t+--n],o=1;n>0&&(o*=256);)r+=this[t+--n]*o;return r},s.prototype.readUInt8=function(t,n){return n||N(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,n){return n||N(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,n){return n||N(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,n){return n||N(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,n){return n||N(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,n,e){t|=0,n|=0,e||N(t,n,this.length);for(var r=this[t],o=1,i=0;++i<n&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*n)),r},s.prototype.readIntBE=function(t,n,e){t|=0,n|=0,e||N(t,n,this.length);for(var r=n,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*n)),i},s.prototype.readInt8=function(t,n){return n||N(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,n){n||N(t,2,this.length);var e=this[t]|this[t+1]<<8;return 32768&e?4294901760|e:e},s.prototype.readInt16BE=function(t,n){n||N(t,2,this.length);var e=this[t+1]|this[t]<<8;return 32768&e?4294901760|e:e},s.prototype.readInt32LE=function(t,n){return n||N(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,n){return n||N(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,n){return n||N(t,4,this.length),o.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,n){return n||N(t,4,this.length),o.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,n){return n||N(t,8,this.length),o.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,n){return n||N(t,8,this.length),o.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,n,e,r){(t=+t,n|=0,e|=0,r)||_(this,t,n,e,Math.pow(2,8*e)-1,0);var o=1,i=0;for(this[n]=255&t;++i<e&&(o*=256);)this[n+i]=t/o&255;return n+e},s.prototype.writeUIntBE=function(t,n,e,r){(t=+t,n|=0,e|=0,r)||_(this,t,n,e,Math.pow(2,8*e)-1,0);var o=e-1,i=1;for(this[n+o]=255&t;--o>=0&&(i*=256);)this[n+o]=t/i&255;return n+e},s.prototype.writeUInt8=function(t,n,e){return t=+t,n|=0,e||_(this,t,n,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[n]=255&t,n+1},s.prototype.writeUInt16LE=function(t,n,e){return t=+t,n|=0,e||_(this,t,n,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8):F(this,t,n,!0),n+2},s.prototype.writeUInt16BE=function(t,n,e){return t=+t,n|=0,e||_(this,t,n,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>8,this[n+1]=255&t):F(this,t,n,!1),n+2},s.prototype.writeUInt32LE=function(t,n,e){return t=+t,n|=0,e||_(this,t,n,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[n+3]=t>>>24,this[n+2]=t>>>16,this[n+1]=t>>>8,this[n]=255&t):O(this,t,n,!0),n+4},s.prototype.writeUInt32BE=function(t,n,e){return t=+t,n|=0,e||_(this,t,n,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>24,this[n+1]=t>>>16,this[n+2]=t>>>8,this[n+3]=255&t):O(this,t,n,!1),n+4},s.prototype.writeIntLE=function(t,n,e,r){if(t=+t,n|=0,!r){var o=Math.pow(2,8*e-1);_(this,t,n,e,o-1,-o)}var i=0,a=1,u=0;for(this[n]=255&t;++i<e&&(a*=256);)t<0&&0===u&&0!==this[n+i-1]&&(u=1),this[n+i]=(t/a>>0)-u&255;return n+e},s.prototype.writeIntBE=function(t,n,e,r){if(t=+t,n|=0,!r){var o=Math.pow(2,8*e-1);_(this,t,n,e,o-1,-o)}var i=e-1,a=1,u=0;for(this[n+i]=255&t;--i>=0&&(a*=256);)t<0&&0===u&&0!==this[n+i+1]&&(u=1),this[n+i]=(t/a>>0)-u&255;return n+e},s.prototype.writeInt8=function(t,n,e){return t=+t,n|=0,e||_(this,t,n,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[n]=255&t,n+1},s.prototype.writeInt16LE=function(t,n,e){return t=+t,n|=0,e||_(this,t,n,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8):F(this,t,n,!0),n+2},s.prototype.writeInt16BE=function(t,n,e){return t=+t,n|=0,e||_(this,t,n,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>8,this[n+1]=255&t):F(this,t,n,!1),n+2},s.prototype.writeInt32LE=function(t,n,e){return t=+t,n|=0,e||_(this,t,n,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[n]=255&t,this[n+1]=t>>>8,this[n+2]=t>>>16,this[n+3]=t>>>24):O(this,t,n,!0),n+4},s.prototype.writeInt32BE=function(t,n,e){return t=+t,n|=0,e||_(this,t,n,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[n]=t>>>24,this[n+1]=t>>>16,this[n+2]=t>>>8,this[n+3]=255&t):O(this,t,n,!1),n+4},s.prototype.writeFloatLE=function(t,n,e){return B(this,t,n,!0,e)},s.prototype.writeFloatBE=function(t,n,e){return B(this,t,n,!1,e)},s.prototype.writeDoubleLE=function(t,n,e){return P(this,t,n,!0,e)},s.prototype.writeDoubleBE=function(t,n,e){return P(this,t,n,!1,e)},s.prototype.copy=function(t,n,e,r){if(e||(e=0),r||0===r||(r=this.length),n>=t.length&&(n=t.length),n||(n=0),r>0&&r<e&&(r=e),r===e)return 0;if(0===t.length||0===this.length)return 0;if(n<0)throw new RangeError("targetStart out of bounds");if(e<0||e>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-n<r-e&&(r=t.length-n+e);var o,i=r-e;if(this===t&&e<n&&n<r)for(o=i-1;o>=0;--o)t[o+n]=this[o+e];else if(i<1e3||!s.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+n]=this[o+e];else Uint8Array.prototype.set.call(t,this.subarray(e,e+i),n);return i},s.prototype.fill=function(t,n,e,r){if("string"==typeof t){if("string"==typeof n?(r=n,n=0,e=this.length):"string"==typeof e&&(r=e,e=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!s.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(n<0||this.length<n||this.length<e)throw new RangeError("Out of range index");if(e<=n)return this;var i;if(n>>>=0,e=void 0===e?this.length:e>>>0,t||(t=0),"number"==typeof t)for(i=n;i<e;++i)this[i]=t;else{var a=s.isBuffer(t)?t:U(new s(t,r).toString()),u=a.length;for(i=0;i<e-n;++i)this[i+n]=a[i%u]}return this};var L=/[^+\/0-9A-Za-z-_]/g;function W(t){return t<16?"0"+t.toString(16):t.toString(16)}function U(t,n){var e;n=n||1/0;for(var r=t.length,o=null,i=[],a=0;a<r;++a){if((e=t.charCodeAt(a))>55295&&e<57344){if(!o){if(e>56319){(n-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(n-=3)>-1&&i.push(239,191,189);continue}o=e;continue}if(e<56320){(n-=3)>-1&&i.push(239,191,189),o=e;continue}e=65536+(o-55296<<10|e-56320)}else o&&(n-=3)>-1&&i.push(239,191,189);if(o=null,e<128){if((n-=1)<0)break;i.push(e)}else if(e<2048){if((n-=2)<0)break;i.push(e>>6|192,63&e|128)}else if(e<65536){if((n-=3)<0)break;i.push(e>>12|224,e>>6&63|128,63&e|128)}else{if(!(e<1114112))throw new Error("Invalid code point");if((n-=4)<0)break;i.push(e>>18|240,e>>12&63|128,e>>6&63|128,63&e|128)}}return i}function z(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(L,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function V(t,n,e,r){for(var o=0;o<r&&!(o+e>=n.length||o>=t.length);++o)n[o+e]=t[o];return o}}).call(this,e(1))},function(t,n,e){"use strict";n.byteLength=function(t){var n=c(t),e=n[0],r=n[1];return 3*(e+r)/4-r},n.toByteArray=function(t){var n,e,r=c(t),a=r[0],u=r[1],s=new i(function(t,n,e){return 3*(n+e)/4-e}(0,a,u)),l=0,f=u>0?a-4:a;for(e=0;e<f;e+=4)n=o[t.charCodeAt(e)]<<18|o[t.charCodeAt(e+1)]<<12|o[t.charCodeAt(e+2)]<<6|o[t.charCodeAt(e+3)],s[l++]=n>>16&255,s[l++]=n>>8&255,s[l++]=255&n;2===u&&(n=o[t.charCodeAt(e)]<<2|o[t.charCodeAt(e+1)]>>4,s[l++]=255&n);1===u&&(n=o[t.charCodeAt(e)]<<10|o[t.charCodeAt(e+1)]<<4|o[t.charCodeAt(e+2)]>>2,s[l++]=n>>8&255,s[l++]=255&n);return s},n.fromByteArray=function(t){for(var n,e=t.length,o=e%3,i=[],a=0,u=e-o;a<u;a+=16383)i.push(f(t,a,a+16383>u?u:a+16383));1===o?(n=t[e-1],i.push(r[n>>2]+r[n<<4&63]+"==")):2===o&&(n=(t[e-2]<<8)+t[e-1],i.push(r[n>>10]+r[n>>4&63]+r[n<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",u=0,s=a.length;u<s;++u)r[u]=a[u],o[a.charCodeAt(u)]=u;function c(t){var n=t.length;if(n%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var e=t.indexOf("=");return-1===e&&(e=n),[e,e===n?0:4-e%4]}function l(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function f(t,n,e){for(var r,o=[],i=n;i<e;i+=3)r=(t[i]<<16&16711680)+(t[i+1]<<8&65280)+(255&t[i+2]),o.push(l(r));return o.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,n){n.read=function(t,n,e,r,o){var i,a,u=8*o-r-1,s=(1<<u)-1,c=s>>1,l=-7,f=e?o-1:0,h=e?-1:1,d=t[n+f];for(f+=h,i=d&(1<<-l)-1,d>>=-l,l+=u;l>0;i=256*i+t[n+f],f+=h,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+t[n+f],f+=h,l-=8);if(0===i)i=1-c;else{if(i===s)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=c}return(d?-1:1)*a*Math.pow(2,i-r)},n.write=function(t,n,e,r,o,i){var a,u,s,c=8*i-o-1,l=(1<<c)-1,f=l>>1,h=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,p=r?1:-1,v=n<0||0===n&&1/n<0?1:0;for(n=Math.abs(n),isNaN(n)||n===1/0?(u=isNaN(n)?1:0,a=l):(a=Math.floor(Math.log(n)/Math.LN2),n*(s=Math.pow(2,-a))<1&&(a--,s*=2),(n+=a+f>=1?h/s:h*Math.pow(2,1-f))*s>=2&&(a++,s/=2),a+f>=l?(u=0,a=l):a+f>=1?(u=(n*s-1)*Math.pow(2,o),a+=f):(u=n*Math.pow(2,f-1)*Math.pow(2,o),a=0));o>=8;t[e+d]=255&u,d+=p,u/=256,o-=8);for(a=a<<o|u,c+=o;c>0;t[e+d]=255&a,d+=p,a/=256,c-=8);t[e+d-p]|=128*v}},function(t,n){var e={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==e.call(t)}},function(t,n,e){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,n){this._id=t,this._clearFn=n}n.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},n.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},n.clearTimeout=n.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},n.enroll=function(t,n){clearTimeout(t._idleTimeoutId),t._idleTimeout=n},n.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},n._unrefActive=n.active=function(t){clearTimeout(t._idleTimeoutId);var n=t._idleTimeout;n>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),n))},e(9),n.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,n.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,e(1))},function(t,n,e){(function(t,n){!function(t,e){"use strict";if(!t.setImmediate){var r,o,i,a,u,s=1,c={},l=!1,f=t.document,h=Object.getPrototypeOf&&Object.getPrototypeOf(t);h=h&&h.setTimeout?h:t,"[object process]"==={}.toString.call(t.process)?r=function(t){n.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var n=!0,e=t.onmessage;return t.onmessage=function(){n=!1},t.postMessage("","*"),t.onmessage=e,n}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){i.port2.postMessage(t)}):f&&"onreadystatechange"in f.createElement("script")?(o=f.documentElement,r=function(t){var n=f.createElement("script");n.onreadystatechange=function(){p(t),n.onreadystatechange=null,o.removeChild(n),n=null},o.appendChild(n)}):r=function(t){setTimeout(p,0,t)}:(a="setImmediate$"+Math.random()+"$",u=function(n){n.source===t&&"string"==typeof n.data&&0===n.data.indexOf(a)&&p(+n.data.slice(a.length))},t.addEventListener?t.addEventListener("message",u,!1):t.attachEvent("onmessage",u),r=function(n){t.postMessage(a+n,"*")}),h.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var n=new Array(arguments.length-1),e=0;e<n.length;e++)n[e]=arguments[e+1];var o={callback:t,args:n};return c[s]=o,r(s),s++},h.clearImmediate=d}function d(t){delete c[t]}function p(t){if(l)setTimeout(p,0,t);else{var n=c[t];if(n){l=!0;try{!function(t){var n=t.callback,e=t.args;switch(e.length){case 0:n();break;case 1:n(e[0]);break;case 2:n(e[0],e[1]);break;case 3:n(e[0],e[1],e[2]);break;default:n.apply(void 0,e)}}(n)}finally{d(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,e(1),e(3))},function(t,n){},function(t,n){},function(t,n){},function(t,n,e){"use strict";e.r(n),e.d(n,"add",(function(){return s})),e.d(n,"sub",(function(){return c})),e.d(n,"mult",(function(){return l})),e.d(n,"div",(function(){return f})),e.d(n,"dot",(function(){return h})),e.d(n,"abs",(function(){return d})),e.d(n,"ceil",(function(){return p})),e.d(n,"constrain",(function(){return v})),e.d(n,"exp",(function(){return m})),e.d(n,"floor",(function(){return g})),e.d(n,"log",(function(){return y})),e.d(n,"max",(function(){return x})),e.d(n,"min",(function(){return b})),e.d(n,"mod",(function(){return w})),e.d(n,"pow",(function(){return C})),e.d(n,"round",(function(){return E})),e.d(n,"sq",(function(){return R})),e.d(n,"sqrt",(function(){return I})),e.d(n,"sum",(function(){return k})),e.d(n,"acos",(function(){return S})),e.d(n,"asin",(function(){return A})),e.d(n,"atan",(function(){return T})),e.d(n,"atan2",(function(){return D})),e.d(n,"cos",(function(){return N})),e.d(n,"sin",(function(){return _})),e.d(n,"tan",(function(){return F})),e.d(n,"complex",(function(){return O})),e.d(n,"copy",(function(){return M})),e.d(n,"eye",(function(){return B})),e.d(n,"fill",(function(){return P})),e.d(n,"linspace",(function(){return L})),e.d(n,"ones",(function(){return W})),e.d(n,"random",(function(){return U})),e.d(n,"randomGaussian",(function(){return z})),e.d(n,"range",(function(){return V})),e.d(n,"zeros",(function(){return G})),e.d(n,"flatten",(function(){return H})),e.d(n,"pad",(function(){return q})),e.d(n,"reshape",(function(){return K})),e.d(n,"concat",(function(){return j})),e.d(n,"reverse",(function(){return X})),e.d(n,"slice",(function(){return Y})),e.d(n,"split",(function(){return $})),e.d(n,"stack",(function(){return Q})),e.d(n,"unstack",(function(){return J})),e.d(n,"tfc",(function(){return r})),e.d(n,"tidy",(function(){return Z})),e.d(n,"Tensor",(function(){return u}));var r=e(0),o=e(2),i=function(t,n,e,r){return new(e||(e=Promise))((function(o,i){function a(t){try{s(r.next(t))}catch(t){i(t)}}function u(t){try{s(r.throw(t))}catch(t){i(t)}}function s(t){var n;t.done?o(t.value):(n=t.value,n instanceof e?n:new e((function(t){t(n)}))).then(a,u)}s((r=r.apply(t,n||[])).next())}))},a=function(t,n){var e,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(e)throw new TypeError("Generator is already executing.");for(;a;)try{if(e=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=a.trys,(o=o.length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=n.call(t,a)}catch(t){i=[6,t],r=0}finally{e=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},u=function(){function t(n){if(this.isComplex=!1,"number"==typeof n)this.tensor=r.scalar(n);else if(n instanceof Array)this.tensor=r.tensor(n);else if(n instanceof o.Vector){var e=n.array();this.tensor=r.tensor(e)}else if(n instanceof t)this.tensor=n.tensor;else{if(!(n instanceof r.Tensor))throw new Error("Tensors must be created from Numbers, Arrays, or p5.Vectors.");this.tensor=n}}return t.prototype.toString=function(){return this.tensor.toString()},t.prototype.array=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,this.tensor.array()];case 1:return[2,t.sent()]}}))}))},t.prototype.arraySync=function(){return this.tensor.arraySync()},t.prototype.toVector=function(){var t=JSON.stringify(this.tensor.shape);if("[2]"===t||"[3]"===t){var n=this.arraySync();return o.prototype.createVector().set(n)}throw new Error("Tensor cannot be represented as 3D vector")},t.prototype.dispose=function(){this.tensor.dispose()},t.prototype.equals=function(n){var e=this;if(n instanceof t){if(n.isComplex&&this.isComplex)return this.complexEquals(n);if(n.isComplex||this.isComplex)throw new Error("Both tensors must be either real or complex.")}var o=!1;return r.tidy((function(){var i=new t(n);if(e.tensor.rank!==i.tensor.rank)throw new Error("Both tensors must have the same rank.");1===r.all(e.tensor.equal(i.tensor)).arraySync()&&(o=!0)})),o},t.prototype.real=function(){var n=this;if(!this.isComplex)throw new Error("Tensor must be complex to use this method.");return new t(r.tidy((function(){return r.real(n.tensor)})))},t.prototype.imag=function(){var n=this;if(!this.isComplex)throw new Error("Tensor must be complex to use this method.");return new t(r.tidy((function(){return r.imag(n.tensor)})))},t.prototype.complexEquals=function(t){var n=this,e=!1;return r.tidy((function(){var r=n.real().equals(t.real()),o=n.imag().equals(t.imag());r&&o&&(e=!0)})),e},t.prototype.add=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.add(r.tensor)})),i=new t(o);return n instanceof t&&this.isComplex&&n.isComplex&&(i.isComplex=!0),i},t.prototype.sub=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.sub(r.tensor)})),i=new t(o);return n instanceof t&&this.isComplex&&n.isComplex&&(i.isComplex=!0),i},t.prototype.mult=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.mul(r.tensor)})),i=new t(o);return n instanceof t&&this.isComplex&&n.isComplex&&(i.isComplex=!0),i},t.prototype.div=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.div(r.tensor)})),i=new t(o);return n instanceof t&&this.isComplex&&n.isComplex&&(i.isComplex=!0),i},t.prototype.dot=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.dot(r.tensor)}));return new t(o)},t.prototype.abs=function(){var n=this;return new t(r.tidy((function(){return n.tensor.abs()})))},t.prototype.ceil=function(){var n=this;return new t(r.tidy((function(){return n.tensor.ceil()})))},t.prototype.constrain=function(n,e){var o=this;return new t(r.tidy((function(){return o.tensor.clipByValue(n,e)})))},t.prototype.exp=function(){var n=this;return new t(r.tidy((function(){return n.tensor.exp()})))},t.prototype.floor=function(){var n=this;return new t(r.tidy((function(){return n.tensor.floor()})))},t.prototype.log=function(){var n=this;return new t(r.tidy((function(){return n.tensor.log()})))},t.prototype.max=function(){var t,n=this;return r.tidy((function(){var e=r.max(n.tensor);t=e.arraySync()})),t},t.prototype.min=function(){var t,n=this;return r.tidy((function(){var e=r.min(n.tensor);t=e.arraySync()})),t},t.prototype.mod=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.mod(r.tensor)}));return new t(o)},t.prototype.pow=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.pow(r.tensor)}));return new t(o)},t.prototype.round=function(){var n=this;return new t(r.tidy((function(){return n.tensor.round()})))},t.prototype.sq=function(){var n=this;return new t(r.tidy((function(){return n.tensor.square()})))},t.prototype.sqrt=function(){var n=this;return new t(r.tidy((function(){return n.tensor.sqrt()})))},t.prototype.sum=function(n){var e=this;return new t(r.tidy((function(){return e.tensor.sum(n)})))},t.prototype.acos=function(){var n=this;return new t(r.tidy((function(){return n.tensor.acos()})))},t.prototype.asin=function(){var n=this;return new t(r.tidy((function(){return n.tensor.asin()})))},t.prototype.atan=function(){var n=this;return new t(r.tidy((function(){return n.tensor.atan()})))},t.prototype.atan2=function(n){var e=this,o=r.tidy((function(){var r=new t(n);return e.tensor.atan2(r.tensor)}));return new t(o)},t.prototype.cos=function(){var n=this;return new t(r.tidy((function(){return n.tensor.cos()})))},t.prototype.sin=function(){var n=this;return new t(r.tidy((function(){return n.tensor.sin()})))},t.prototype.tan=function(){var n=this;return new t(r.tidy((function(){return n.tensor.tan()})))},t.complex=function(n,e){var o=new t(r.tidy((function(){var o,i;if("number"==typeof n&&"number"==typeof e)o=r.tensor(n),i=r.tensor(e);else{if(!(n instanceof t&&e instanceof t))throw new Error("Components must be either Numbers or Tensors");o=r.clone(n.tensor),i=r.clone(e.tensor)}return r.complex(o,i)})));return o.isComplex=!0,o},t.prototype.copy=function(){var n=this;return new t(r.tidy((function(){return n.tensor.clone()})))},t.eye=function(n,e){return new t(r.tidy((function(){return r.eye(n,e)})))},t.fill=function(n,e){return new t(r.tidy((function(){return r.fill(n,e)})))},t.linspace=function(n,e,o){return new t(r.tidy((function(){return r.linspace(n,e,o)})))},t.ones=function(n){return new t(r.tidy((function(){return r.ones(n)})))},t.random=function(n){return new t(r.tidy((function(){return r.randomUniform(n)})))},t.randomGaussian=function(n,e,o){return new t(r.tidy((function(){return r.randomNormal(n,e,o)})))},t.range=function(n,e,o){return new t(r.tidy((function(){return r.range(n,e,o)})))},t.zeros=function(n){return new t(r.tidy((function(){return r.zeros(n)})))},t.prototype.flatten=function(){var n=this;return new t(r.tidy((function(){return n.tensor.flatten()})))},t.prototype.pad=function(n,e){var o=this;return new t(r.tidy((function(){return o.tensor.pad(n,e)})))},t.prototype.reshape=function(n){var e=this;return new t(r.tidy((function(){return e.tensor.reshape(n)})))},t.prototype.concat=function(n,e){var o=this;return new t(r.tidy((function(){var i=[o.tensor];if(n instanceof t)i.push(n.tensor);else if(Array.isArray(n)){var a=n.map((function(t){return t.tensor}));Array.prototype.push.apply(i,a)}return r.concat(i,e)})))},t.prototype.reverse=function(n){var e=this;return new t(r.tidy((function(){return e.tensor.reverse(n)})))},t.prototype.slice=function(n,e){var o=this;return new t(r.tidy((function(){return o.tensor.slice(n,e)})))},t.prototype.split=function(n,e){var o=this;return r.tidy((function(){return o.tensor.split(n,e)})).map((function(n){return new t(n)}))},t.stack=function(n,e){return new t(r.tidy((function(){for(var t=new Array(n.length),o=0;o<n.length;o+=1)t[o]=n[o].tensor;return r.stack(t,e)})))},t.prototype.unstack=function(n){var e=this;return r.tidy((function(){return e.tensor.unstack(n)})).map((function(n){return new t(n)}))},t.prototype.addRows=function(n,e,o){var i=this;return void 0===o&&(o=1),new t(r.tidy((function(){if(2!==i.tensor.shape.length)throw new Error("Elementary row operations are only defined on matrices.");var t=i.tensor.slice(0,e),r=i.tensor.slice(n,1),a=i.tensor.slice(e,1),u=i.tensor.slice(e+1,i.tensor.shape[0]-e-1);return a=a.add(r.mul(o)),t.concat([a,u])})))},t.prototype.subRows=function(n,e,o){var i=this;return void 0===o&&(o=1),new t(r.tidy((function(){if(2!==i.tensor.shape.length)throw new Error("Elementary row operations are only defined on matrices.");var t=i.tensor.slice(0,e),r=i.tensor.slice(n,1),a=i.tensor.slice(e,1),u=i.tensor.slice(e+1,i.tensor.shape[0]-e-1);return a=a.sub(r.mul(o)),t.concat([a,u])})))},t.prototype.swapRows=function(n,e){var o=this,i=Math.min(n,e),a=Math.max(n,e);return new t(r.tidy((function(){if(2!==o.tensor.shape.length)throw new Error("Elementary row operations are only defined on matrices.");var t=o.tensor.slice(0,i),n=o.tensor.slice(i,1),e=o.tensor.slice(i+1,a-i-1),r=o.tensor.slice(a,1),u=o.tensor.slice(a+1,o.tensor.shape[0]-a-1);return t.concat([r,e,n,u])})))},t.prototype.mulRow=function(n,e){var o=this;return new t(r.tidy((function(){if(2!==o.tensor.shape.length)throw new Error("Elementary row operations are only defined on matrices.");var t=o.tensor.slice(0,n),r=o.tensor.slice(n,1),i=o.tensor.slice(n+1,o.tensor.shape[0]-n-1);return r=r.mul(e),t.concat([r,i])})))},t}(),s=function(t,n){return t.add(n)},c=function(t,n){return t.sub(n)},l=function(t,n){return t.mult(n)},f=function(t,n){return t.div(n)},h=function(t,n){return t.dot(n)},d=function(t){return t.abs()},p=function(t){return t.ceil()},v=function(t,n,e){return t.constrain(n,e)},m=function(t){return t.exp()},g=function(t){return t.floor()},y=function(t){return t.log()},x=function(t){return t.max()},b=function(t){return t.min()},w=function(t,n){return t.mod(n)},C=function(t,n){return t.pow(n)},E=function(t){return t.round()},R=function(t){return t.sq()},I=function(t){return t.sqrt()},k=function(t,n){return t.sum(n)},S=function(t){return t.acos()},A=function(t){return t.asin()},T=function(t){return t.atan()},D=function(t,n){return t.atan2(n)},N=function(t){return t.cos()},_=function(t){return t.sin()},F=function(t){return t.tan()},O=function(t,n){return u.complex(t,n)},M=function(t){return t.copy()},B=function(t,n){return u.eye(t,n)},P=function(t,n){return u.fill(t,n)},L=function(t,n,e){return u.linspace(t,n,e)},W=function(t){return u.ones(t)},U=function(t){return u.random(t)},z=function(t,n,e){return u.randomGaussian(t,n,e)},V=function(t,n,e){return u.range(t,n,e)},G=function(t){return u.zeros(t)},H=function(t){return t.flatten()},q=function(t,n,e){return t.pad(n,e)},K=function(t,n){return t.reshape(n)},j=function(t,n){if(t.length<2)throw new Error("Two or more tensors must be provided.");var e=t[0],r=t.slice(1);return e.concat(r,n)},X=function(t,n){return t.reverse(n)},Y=function(t,n,e){return t.slice(n,e)},$=function(t,n,e){return t.split(n,e)},Q=function(t,n){return u.stack(t,n)},J=function(t,n){return t.unstack(n)};p5.prototype.createTensor=function(t){return new u(t)};var Z=r.tidy}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9udW0vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vbnVtLy4vbm9kZV9tb2R1bGVzL0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L3RmLWNvcmUuZXNtLmpzIiwid2VicGFjazovL251bS8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vbnVtL2V4dGVybmFsIFwicDVcIiIsIndlYnBhY2s6Ly9udW0vLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy9icm93c2VyLmpzIiwid2VicGFjazovL251bS8uL25vZGVfbW9kdWxlcy9idWZmZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vbnVtLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9udW0vLi9ub2RlX21vZHVsZXMvaWVlZTc1NC9pbmRleC5qcyIsIndlYnBhY2s6Ly9udW0vLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly9udW0vLi9ub2RlX21vZHVsZXMvdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qcyIsIndlYnBhY2s6Ly9udW0vLi9ub2RlX21vZHVsZXMvc2V0aW1tZWRpYXRlL3NldEltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly9udW0vLi9zcmMvdGVuc29yL2luZGV4LnRzIiwid2VicGFjazovL251bS8uL3NyYy90ZW5zb3IvdWZ1bmMudHMiLCJ3ZWJwYWNrOi8vbnVtLy4vc3JjL2luZGV4LnRzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiZSIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiQXJyYXkiLCJ0aGlzIiwiY29uc3RydWN0b3IiLCJQcm9taXNlIiwiYSIsInUiLCJuZXh0IiwidGhyb3ciLCJkb25lIiwidGhlbiIsImFwcGx5IiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInJldHVybiIsIml0ZXJhdG9yIiwiVHlwZUVycm9yIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImdsb2JhbCIsImZsYWdzIiwiZmxhZ1JlZ2lzdHJ5IiwidXJsRmxhZ3MiLCJwb3B1bGF0ZVVSTEZsYWdzIiwic2V0UGxhdGZvcm0iLCJwbGF0Zm9ybSIsImNvbnNvbGUiLCJ3YXJuIiwicGxhdGZvcm1OYW1lIiwicmVnaXN0ZXJGbGFnIiwiZXZhbHVhdGlvbkZuIiwic2V0SG9vayIsInNldCIsImV2YWx1YXRlRmxhZyIsImdldE51bWJlciIsImdldEJvb2wiLCJnZXRGbGFncyIsImNvbmZpZ3VyYWJsZSIsIkVycm9yIiwic2V0RmxhZ3MiLCJhc3NpZ24iLCJyZXNldCIsImxvY2F0aW9uIiwic2VhcmNoIiwicmVwbGFjZSIsImFyZ3VtZW50cyIsImpvaW4iLCJ0ZmpzZmxhZ3MiLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsImRlY29kZVVSSUNvbXBvbmVudCIsIk1hcCIsImciLCJoIiwiZiIsImVudHJpZXMiLCJrZXJuZWxOYW1lIiwiYmFja2VuZE5hbWUiLCJoYXMiLCJ2IiwiZGVsZXRlIiwieSIsIk1hdGgiLCJyYW5kb20iLCJ4IiwibWF4IiwibWluIiwiYiIsInciLCJDIiwiRSIsIlMiLCJSIiwiSSIsImlzQXJyYXkiLCJWIiwiayIsIkEiLCJEIiwidGFuaCIsImV4cCIsIlQiLCJjZWlsIiwic3FydCIsIk4iLCJyZXBlYXQiLCJGIiwic2V0VGltZW91dCIsIl8iLCJzbGljZSIsIk8iLCJtYXAiLCJjb25jYXQiLCJldmVyeSIsIk0iLCJzb3J0IiwibmV3U2hhcGUiLCJrZXB0RGltcyIsIkIiLCJGbG9hdDMyQXJyYXkiLCJJbnQzMkFycmF5IiwiVWludDhBcnJheSIsIlAiLCJMIiwiaXNOYU4iLCJpc0Zpbml0ZSIsIlciLCJVIiwieiIsIkciLCJIIiwiU3RyaW5nIiwicSIsIksiLCJqIiwiWCIsIlkiLCIkIiwiUSIsInJvdW5kIiwiSiIsInJlZHVjZSIsIloiLCJ0dCIsImV0Iiwibm93IiwibnQiLCJOdW1iZXIiLCJpc0ludGVnZXIiLCJydCIsImVuY29kZSIsIm90IiwiZGVjb2RlIiwiYXQiLCJpdCIsImZsb29yIiwic3QiLCJmcmVlemUiLCJzaHVmZmxlIiwiY2xhbXAiLCJuZWFyZXN0TGFyZ2VyRXZlbiIsInN1bSIsInJhbmRVbmlmb3JtIiwiZGlzdFNxdWFyZWQiLCJhc3NlcnQiLCJhc3NlcnRTaGFwZXNNYXRjaCIsImFzc2VydE5vbk51bGwiLCJmbGF0dGVuIiwic2l6ZUZyb21TaGFwZSIsImlzU2NhbGFyU2hhcGUiLCJhcnJheXNFcXVhbCIsImlzSW50Iiwic2l6ZVRvU3F1YXJpc2hTaGFwZSIsImNyZWF0ZVNodWZmbGVkSW5kaWNlcyIsIlVpbnQzMkFycmF5IiwicmlnaHRQYWQiLCJyZXBlYXRlZFRyeSIsImluZmVyRnJvbUltcGxpY2l0U2hhcGUiLCJwYXJzZUF4aXNQYXJhbSIsInNxdWVlemVTaGFwZSIsImdldFR5cGVkQXJyYXlGcm9tRFR5cGUiLCJnZXRBcnJheUZyb21EVHlwZSIsImNoZWNrQ29udmVyc2lvbkZvckVycm9ycyIsImlzVmFsaWREdHlwZSIsImhhc0VuY29kaW5nTG9zcyIsImlzVHlwZWRBcnJheSIsImJ5dGVzUGVyRWxlbWVudCIsImJ5dGVzRnJvbVN0cmluZ0FycmF5IiwiaXNTdHJpbmciLCJpc0Jvb2xlYW4iLCJpc051bWJlciIsImluZmVyRHR5cGUiLCJpc0Z1bmN0aW9uIiwibmVhcmVzdERpdmlzb3IiLCJjb21wdXRlU3RyaWRlcyIsInRvVHlwZWRBcnJheSIsInRvTmVzdGVkQXJyYXkiLCJtYWtlT25lc1R5cGVkQXJyYXkiLCJtYWtlWmVyb3NUeXBlZEFycmF5IiwiYXNzZXJ0Tm9uTmVnYXRpdmVJbnRlZ2VyRGltZW5zaW9ucyIsImZldGNoIiwiZW5jb2RlU3RyaW5nIiwiZGVjb2RlU3RyaW5nIiwibG9jVG9JbmRleCIsImluZGV4VG9Mb2MiLCJ1dCIsImJhY2tlbmRUaW1lciIsImxvZ2dlciIsImN0IiwicHJvZmlsZUtlcm5lbCIsInRpbWUiLCJkYXRhIiwiZHR5cGUiLCJnZXRFeHRyYVByb2ZpbGVJbmZvIiwibG9nS2VybmVsUHJvZmlsZSIsImtlcm5lbE1zIiwiZXJyb3IiLCJyYW5rIiwic2l6ZSIsInNoYXBlIiwidG9TdHJpbmciLCJsb2ciLCJwdCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwidnQiLCJtdCIsImd0IiwidmFsdWVzIiwic3RyaWRlcyIsInRvVGVuc29yIiwieXQiLCJtYWtlVGVuc29yIiwieHQiLCJidCIsInd0Iiwia2VwdCIsImlzRGlzcG9zZWRJbnRlcm5hbCIsImRhdGFJZCIsImlkIiwicmFua1R5cGUiLCJ0aHJvd0lmRGlzcG9zZWQiLCJhczFEIiwiYXNTY2FsYXIiLCJyZXNoYXBlIiwiYXMyRCIsImFzM0QiLCJhczREIiwiYXM1RCIsImFzVHlwZSIsImNhc3QiLCJidWZmZXIiLCJidWZmZXJTeW5jIiwiZGF0YVN5bmMiLCJhcnJheSIsImFycmF5U3luYyIsInJlYWQiLCJyZWFkU3luYyIsImJ5dGVzIiwiZGlzcG9zZSIsImlzRGlzcG9zZWQiLCJkaXNwb3NlVGVuc29yIiwidG9GbG9hdCIsInRvSW50IiwidG9Cb29sIiwicHJpbnQiLCJyZXNoYXBlQXMiLCJleHBhbmREaW1zIiwiY3Vtc3VtIiwic3F1ZWV6ZSIsImNsb25lIiwib25lSG90IiwiZmlsbCIsImZyb20iLCJkdCIsInRpbGUiLCJnYXRoZXIiLCJtYXRNdWwiLCJkb3QiLCJub3JtIiwicmV2ZXJzZSIsInN0YWNrIiwidW5zdGFjayIsInBhZCIsImJhdGNoTm9ybWFsaXphdGlvbiIsImJhdGNoTm9ybSIsImFsbCIsImFueSIsImxvZ1N1bUV4cCIsInByb2QiLCJtZWFuIiwiYXJnTWluIiwiYXJnTWF4IiwiYWRkIiwiYWRkU3RyaWN0IiwiYXRhbjIiLCJzdWIiLCJzdWJTdHJpY3QiLCJwb3ciLCJwb3dTdHJpY3QiLCJtdWwiLCJtdWxTdHJpY3QiLCJkaXYiLCJkaXZOb05hbiIsImZsb29yRGl2IiwiZGl2U3RyaWN0IiwibWluaW11bSIsIm1pbmltdW1TdHJpY3QiLCJtYXhpbXVtIiwibWF4aW11bVN0cmljdCIsIm1vZCIsIm1vZFN0cmljdCIsInNxdWFyZWREaWZmZXJlbmNlU3RyaWN0IiwidHJhbnNwb3NlIiwibm90RXF1YWwiLCJub3RFcXVhbFN0cmljdCIsImxlc3MiLCJsZXNzU3RyaWN0IiwiZXF1YWwiLCJlcXVhbFN0cmljdCIsImxlc3NFcXVhbCIsImxlc3NFcXVhbFN0cmljdCIsImdyZWF0ZXIiLCJncmVhdGVyU3RyaWN0IiwiZ3JlYXRlckVxdWFsIiwiZ3JlYXRlckVxdWFsU3RyaWN0IiwibG9naWNhbEFuZCIsImxvZ2ljYWxPciIsImxvZ2ljYWxOb3QiLCJsb2dpY2FsWG9yIiwid2hlcmUiLCJuZWciLCJzaWduIiwiaXNJbmYiLCJleHBtMSIsImxvZzFwIiwicnNxcnQiLCJzcXVhcmUiLCJyZWNpcHJvY2FsIiwiYWJzIiwiY2xpcEJ5VmFsdWUiLCJyZWx1IiwicmVsdTYiLCJlbHUiLCJzZWx1IiwibGVha3lSZWx1IiwicHJlbHUiLCJzaWdtb2lkIiwibG9nU2lnbW9pZCIsInNvZnRwbHVzIiwiemVyb3NMaWtlIiwib25lc0xpa2UiLCJzaW4iLCJjb3MiLCJ0YW4iLCJhc2luIiwiYWNvcyIsImF0YW4iLCJzaW5oIiwiY29zaCIsImFzaW5oIiwiYWNvc2giLCJhdGFuaCIsImVyZiIsInN0ZXAiLCJzb2Z0bWF4IiwibG9nU29mdG1heCIsInJlc2l6ZUJpbGluZWFyIiwiaW1hZ2UiLCJyZXNpemVOZWFyZXN0TmVpZ2hib3IiLCJjb252MWQiLCJjb252MmQiLCJjb252MmRUcmFuc3Bvc2UiLCJkZXB0aHdpc2VDb252MkQiLCJkZXB0aHdpc2VDb252MmQiLCJzZXBhcmFibGVDb252MmQiLCJhdmdQb29sIiwibWF4UG9vbCIsImxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uIiwicG9vbCIsInZhcmlhYmxlIiwibWFrZVZhcmlhYmxlIiwidW5zb3J0ZWRTZWdtZW50U3VtIiwiYmF0Y2hUb1NwYWNlTkQiLCJzcGFjZVRvQmF0Y2hORCIsInRvcGsiLCJzdHJpZGVkU2xpY2UiLCJkZXB0aFRvU3BhY2UiLCJmZnQiLCJzcGVjdHJhbCIsImlmZnQiLCJyZmZ0IiwiaXJmZnQiLCJoYXNJbnN0YW5jZSIsIkN0IiwiRXQiLCJSdCIsIkl0Iiwia3QiLCJTdCIsInRyYWluYWJsZSIsImluY1JlZiIsImRpc3Bvc2VWYXJpYWJsZSIsIkZ1bmN0aW9uIiwiUjAiLCJSMSIsIlIyIiwiUjMiLCJSNCIsIlI1IiwiUjYiLCJmbG9hdDMyIiwiaW50MzIiLCJib29sIiwiY29tcGxleDY0IiwiQXQiLCJEdCIsIlR0IiwiTnQiLCJGdCIsIl90IiwiU2V0IiwiT3QiLCJNdCIsIm1ha2VUeXBlc01hdGNoIiwiYXNzZXJ0VHlwZXNNYXRjaCIsImlzVGVuc29ySW5MaXN0Iiwic29tZSIsImdldFRlbnNvcnNJbkNvbnRhaW5lciIsIkJ0IiwicmVnaXN0ZXJlZFZhcmlhYmxlcyIsIm5leHRUYXBlTm9kZUlkIiwibnVtQnl0ZXMiLCJudW1UZW5zb3JzIiwibnVtU3RyaW5nVGVuc29ycyIsIm51bURhdGFCdWZmZXJzIiwiZ3JhZGllbnREZXB0aCIsImtlcm5lbERlcHRoIiwic2NvcGVTdGFjayIsIm51bURhdGFNb3Zlc1N0YWNrIiwibmV4dFNjb3BlSWQiLCJ0ZW5zb3JJbmZvIiwiV2Vha01hcCIsInByb2ZpbGluZyIsImFjdGl2ZVByb2ZpbGUiLCJuZXdCeXRlcyIsIm5ld1RlbnNvcnMiLCJwZWFrQnl0ZXMiLCJrZXJuZWxzIiwicmVzdWx0IiwiUHQiLCJFTlYiLCJyZWdpc3RyeSIsInJlZ2lzdHJ5RmFjdG9yeSIsInBlbmRpbmdCYWNrZW5kSW5pdElkIiwic3RhdGUiLCJyZWFkeSIsInBlbmRpbmdCYWNrZW5kSW5pdCIsImJhY2tlbmRJbnN0YW5jZSIsImdldFNvcnRlZEJhY2tlbmRzIiwiaW5pdGlhbGl6ZUJhY2tlbmQiLCJzdWNjZXNzIiwic2V0QmFja2VuZCIsImluaXRpYWxpemVCYWNrZW5kc0FuZFJldHVybkJlc3QiLCJhc3luY0luaXQiLCJiYWNrZW5kTmFtZXMiLCJrZXlzIiwiZmluZEJhY2tlbmQiLCJmaW5kQmFja2VuZEZhY3RvcnkiLCJmYWN0b3J5IiwicmVnaXN0ZXJCYWNrZW5kIiwicHJpb3JpdHkiLCJzZXR1cFJlZ2lzdGVyZWRLZXJuZWxzIiwicHJvZmlsZXIiLCJzZXR1cEZ1bmMiLCJkaXNwb3NlUmVnaXN0ZXJlZEtlcm5lbHMiLCJkaXNwb3NlRnVuYyIsInJlc29sdmUiLCJjYXRjaCIsIm1lc3NhZ2UiLCJyZW1vdmVCYWNrZW5kIiwibW92ZURhdGEiLCJiYWNrZW5kIiwiZGlzcG9zZURhdGEiLCJtb3ZlIiwic2hvdWxkQ2hlY2tGb3JNZW1MZWFrcyIsInRpZHkiLCJzY29wZWRSdW4iLCJzdGFydFNjb3BlIiwiZW5kU2NvcGUiLCJuZXh0VGVuc29ySWQiLCJuZXh0VmFyaWFibGVJZCIsIm1ha2VUZW5zb3JGcm9tRGF0YUlkIiwiYWRkVGFwZU5vZGUiLCJhY3RpdmVTY29wZSIsInJ1bktlcm5lbCIsInJ1bktlcm5lbEZ1bmMiLCJjaGVja0tlcm5lbEZvck1lbUxlYWsiLCJudW1EYXRhSWRzIiwiaXNUYXBlT24iLCJrZWVwIiwia2VybmVsRnVuYyIsImlucHV0cyIsImF0dHJzIiwiZmlsdGVyIiwiYnl0ZXNBZGRlZCIsInRvdGFsQnl0ZXNTbmFwc2hvdCIsInRlbnNvcnNBZGRlZCIsInRvdGFsVGVuc29yc1NuYXBzaG90IiwiaW5wdXRTaGFwZXMiLCJvdXRwdXRTaGFwZXMiLCJ3cml0ZSIsInJlZkNvdW50IiwidHJhY2siLCJkaXNwb3NlVmFyaWFibGVzIiwibWVtb3J5IiwidW5yZWxpYWJsZSIsInJlYXNvbnMiLCJwcm9maWxlIiwib3V0cHV0cyIsInNhdmVkIiwiZ3JhZEZ1bmMiLCJncmFkaWVudCIsImFjdGl2ZVRhcGUiLCJzdGFydFRhcGUiLCJlbmRUYXBlIiwic2NvcGVJZCIsImdyYWRpZW50cyIsIkx0IiwiZ3JhZHMiLCJjdXN0b21HcmFkIiwid2FsbE1zIiwid2luZG93IiwicHJvY2VzcyIsInNlbGYiLCJfdGZlbmdpbmUiLCJXdCIsImRvY3VtZW50IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJVdCIsInZlcnNpb25zIiwibm9kZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsInRlc3QiLCJ2ZW5kb3IiLCJWdCIsInp0IiwiR3QiLCJIdCIsInF0IiwiYWxwaGEiLCJhbnRpYWxpYXMiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJkZXB0aCIsInN0ZW5jaWwiLCJmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0IiwiS3QiLCJqdCIsIk9mZnNjcmVlbkNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJnZXRDb250ZXh0IiwiaXNDb250ZXh0TG9zdCIsImRpc2FibGUiLCJERVBUSF9URVNUIiwiU1RFTkNJTF9URVNUIiwiQkxFTkQiLCJESVRIRVIiLCJQT0xZR09OX09GRlNFVF9GSUxMIiwiU0FNUExFX0NPVkVSQUdFIiwiZW5hYmxlIiwiU0NJU1NPUl9URVNUIiwiQ1VMTF9GQUNFIiwiY3VsbEZhY2UiLCJCQUNLIiwiWHQiLCJZdCIsIiR0IiwiUXQiLCJSMzJGIiwiUjE2RiIsIlJHQkExNkYiLCJSR0JBMzJGIiwiUkVEIiwiSEFMRl9GTE9BVCIsIkZMT0FUIiwiUkdCQSIsIkhBTEZfRkxPQVRfT0VTIiwiaW50ZXJuYWxGb3JtYXRGbG9hdCIsImludGVybmFsRm9ybWF0SGFsZkZsb2F0IiwiaW50ZXJuYWxGb3JtYXRQYWNrZWRIYWxmRmxvYXQiLCJpbnRlcm5hbEZvcm1hdFBhY2tlZEZsb2F0IiwidGV4dHVyZUZvcm1hdEZsb2F0IiwiZG93bmxvYWRUZXh0dXJlRm9ybWF0IiwiZG93bmxvYWRVbnBhY2tOdW1DaGFubmVscyIsImRlZmF1bHROdW1DaGFubmVscyIsInRleHR1cmVUeXBlSGFsZkZsb2F0IiwidGV4dHVyZVR5cGVGbG9hdCIsIkp0IiwiZ2V0RXJyb3IiLCJOT19FUlJPUiIsIm5lIiwiREVOU0UiLCJTSEFSRURfQkFUQ0giLCJSRU5ERVIiLCJVUExPQUQiLCJQSVhFTFMiLCJET1dOTE9BRCIsIlVOUEFDS0VEX0ZMT0FUMTYiLCJVTlBBQ0tFRF9GTE9BVDMyIiwiUEFDS0VEXzRYMV9VTlNJR05FRF9CWVRFIiwiUEFDS0VEXzJYMl9GTE9BVDMyIiwiUEFDS0VEXzJYMl9GTE9BVDE2IiwiZWUiLCJJTlZBTElEX0VOVU0iLCJJTlZBTElEX1ZBTFVFIiwiSU5WQUxJRF9PUEVSQVRJT04iLCJJTlZBTElEX0ZSQU1FQlVGRkVSX09QRVJBVElPTiIsIk9VVF9PRl9NRU1PUlkiLCJDT05URVhUX0xPU1RfV0VCR0wiLCJyZSIsImtlIiwiZ2V0RXh0ZW5zaW9uIiwib2UiLCJjcmVhdGVTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZ2V0U2hhZGVySW5mb0xvZyIsImFlIiwiRlJBR01FTlRfU0hBREVSIiwidWUiLCJleGVjIiwiaWUiLCJzZSIsImNlIiwiY3JlYXRlUHJvZ3JhbSIsImxlIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsImhlIiwidmFsaWRhdGVQcm9ncmFtIiwiVkFMSURBVEVfU1RBVFVTIiwiZmUiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwiZGUiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsInBlIiwiY3JlYXRlVGV4dHVyZSIsInZlIiwibWUiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImdlIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJ5ZSIsIlNlIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwieGUiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJiZSIsIndlIiwidW5pZm9ybTFpIiwiQ2UiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJFZSIsIlJlIiwiY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyIsIkZSQU1FQlVGRkVSX0NPTVBMRVRFIiwiSWUiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlQiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVCIsIkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfRElNRU5TSU9OUyIsIkZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEIiwiTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJBZSIsIkRlIiwiVGUiLCJOZSIsIkZlIiwiX2UiLCJPZSIsImdldFBhcmFtZXRlciIsIk1BWF9URVhUVVJFX1NJWkUiLCJNZSIsIk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiQmUiLCJQZSIsIkxlIiwiV2UiLCJWZSIsIlVlIiwidGV4SW1hZ2UyRCIsImRlbGV0ZVRleHR1cmUiLCJkZWxldGVGcmFtZWJ1ZmZlciIsInplIiwiZmVuY2VTeW5jIiwiR2UiLCJjYWxsQW5kQ2hlY2siLCJjYW5CZVJlcHJlc2VudGVkIiwiZ2V0V2ViR0xFcnJvck1lc3NhZ2UiLCJnZXRFeHRlbnNpb25PclRocm93IiwiY3JlYXRlVmVydGV4U2hhZGVyIiwiY3JlYXRlRnJhZ21lbnRTaGFkZXIiLCJjcmVhdGVTdGF0aWNWZXJ0ZXhCdWZmZXIiLCJjcmVhdGVTdGF0aWNJbmRleEJ1ZmZlciIsImdldE51bUNoYW5uZWxzIiwidmFsaWRhdGVUZXh0dXJlU2l6ZSIsImJpbmRWZXJ0ZXhCdWZmZXJUb1Byb2dyYW1BdHRyaWJ1dGUiLCJiaW5kVGV4dHVyZVVuaXQiLCJ1bmJpbmRUZXh0dXJlVW5pdCIsImdldFByb2dyYW1Vbmlmb3JtTG9jYXRpb25PclRocm93IiwiZ2V0UHJvZ3JhbVVuaWZvcm1Mb2NhdGlvbiIsImJpbmRUZXh0dXJlVG9Qcm9ncmFtVW5pZm9ybVNhbXBsZXIiLCJiaW5kQ2FudmFzVG9GcmFtZWJ1ZmZlciIsInZpZXdwb3J0IiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJzY2lzc29yIiwiYmluZENvbG9yVGV4dHVyZVRvRnJhbWVidWZmZXIiLCJ1bmJpbmRDb2xvclRleHR1cmVGcm9tRnJhbWVidWZmZXIiLCJ2YWxpZGF0ZUZyYW1lYnVmZmVyIiwiZ2V0RnJhbWVidWZmZXJFcnJvck1lc3NhZ2UiLCJnZXRCYXRjaERpbSIsImdldFJvd3NDb2xzIiwiZ2V0U2hhcGVBczNEIiwiZ2V0VGV4dHVyZVNoYXBlRnJvbUxvZ2ljYWxTaGFwZSIsImlzUmVzaGFwZUZyZWUiLCJnZXRXZWJHTE1heFRleHR1cmVTaXplIiwicmVzZXRNYXhUZXh0dXJlU2l6ZSIsInJlc2V0TWF4VGV4dHVyZXNJblNoYWRlciIsImdldE1heFRleHR1cmVzSW5TaGFkZXIiLCJnZXRXZWJHTERpc2pvaW50UXVlcnlUaW1lclZlcnNpb24iLCJoYXNFeHRlbnNpb24iLCJpc1dlYkdMVmVyc2lvbkVuYWJsZWQiLCJpc0NhcGFibGVPZlJlbmRlcmluZ1RvRmxvYXRUZXh0dXJlIiwiaXNEb3dubG9hZEZsb2F0VGV4dHVyZUVuYWJsZWQiLCJpc1dlYkdMRmVuY2VFbmFibGVkIiwiSGUiLCJxZSIsIktlIiwiamUiLCJYZSIsIlllIiwiJGUiLCJRZSIsIkplIiwiWmUiLCJ0biIsImVuIiwibm4iLCJybiIsIm9uIiwiYW4iLCJzbiIsInVuIiwiY24iLCJsbiIsImhuIiwiZm4iLCJkbiIsInBuIiwidm4iLCJtbiIsImluZGV4T2YiLCJnbiIsInluIiwieG4iLCJibiIsInduIiwiQ24iLCJFbiIsIlJuIiwiSW4iLCJrbiIsIlNuIiwiQW4iLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsIm9wZXJhIiwic3Vic3RyIiwiRG4iLCJjb21wbGV4XyIsImNvbXBsZXgiLCIkcmVhbCIsIiRpbWFnIiwiVG4iLCJyZWFsXyIsInJlYWwiLCIkaW5wdXQiLCJObiIsImltYWdfIiwiaW1hZyIsIkZuIiwiX24iLCJPbiIsIk1uIiwiQm4iLCJQbiIsIkxuIiwiV24iLCJVbiIsIlZuIiwiem4iLCJHbiIsIkhuIiwicW4iLCJsaW5zcGFjZSIsIktuIiwiam4iLCJvbmVzTGlrZV8iLCJYbiIsIiR4IiwiemVyb3NMaWtlXyIsIlluIiwiY29uY2F0XyIsImF4aXMiLCJ0ciIsIiRuIiwiY29uY2F0MWRfIiwiUW4iLCJjb25jYXQyZF8iLCJKbiIsImNvbmNhdDNkXyIsIlpuIiwiY29uY2F0NGRfIiwic3BsaXRfIiwiZXIiLCJnbG9iYWxUaGlzIiwibnIiLCJjaGFyQ29kZUF0IiwiczAiLCJzMSIsInMyIiwiZG91YmxlIiwicXVpY2siLCJhbGVhIiwicnIiLCJ4b3IxMjgiLCJvciIsInhvcndvdyIsImFyIiwiRGF0ZSIsInhvcnNoaWZ0NyIsImlyIiwieG9yNDA5NiIsInNyIiwidHljaGVpIiwidXIiLCJlbnRyb3B5IiwicmFuZG9tQnl0ZXMiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsInBsdWdpbnMiLCJzY3JlZW4iLCJwYXNzIiwiZnJvbUNoYXJDb2RlIiwiY3IiLCJsciIsInN0ZERldiIsIm5leHRWYWwiLCJOYU4iLCJ0cnVuY2F0ZWQiLCJ1cHBlciIsImxvd2VyIiwibmV4dFZhbHVlIiwiaXNWYWxpZFRydW5jYXRlZCIsImNvbnZlcnRWYWx1ZSIsImhyIiwiYmV0YSIsInJhbmR1IiwicmFuZG4iLCJmciIsImNhblJldHVybkZsb2F0IiwicmFuZ2UiLCJkciIsInByIiwidnIiLCJiYXRjaFRvU3BhY2VORF8iLCJtciIsImJyb2FkY2FzdFRvXyIsInVuc2hpZnQiLCJpbnB1dCIsImdyIiwiY2FzdF8iLCJ5ciIsImNsb25lXyIsInhyIiwiY3Vtc3VtXyIsInBlcm11dGVkWCIsImJyIiwiZGVwdGhUb1NwYWNlXyIsIndyIiwiZXhwYW5kRGltc18iLCJzcGxpY2UiLCJPciIsIkNyIiwiZXllXyIsIkxyIiwiRXIiLCJtdWx0aW5vbWlhbF8iLCJtdWx0aW5vbWlhbCIsImxvZ2l0czJEIiwiUnIiLCJvbmVIb3RfIiwiJGluZGljZXMiLCJJciIsInBhZF8iLCJwYWRkaW5ncyIsImNvbnN0YW50VmFsdWUiLCJrciIsInBhZDFkXyIsIlNyIiwicGFkMmRfIiwiQXIiLCJwYWQzZF8iLCJEciIsInBhZDRkXyIsIlRyIiwicmFuZF8iLCJOciIsInJhbmRvbU5vcm1hbF8iLCJGciIsInJhbmRvbUdhbW1hXyIsIl9yIiwicmFuZG9tVW5pZm9ybV8iLCJyZXNoYXBlXyIsIk1yIiwic3BhY2VUb0JhdGNoTkRfIiwiQnIiLCJzcXVlZXplXyIsIlByIiwic3RhY2tfIiwidGlsZV8iLCJyZXBzIiwiV3IiLCJ0cnVuY2F0ZWROb3JtYWxfIiwiVXIiLCJ1bnN0YWNrXyIsIlZyIiwienIiLCJHciIsIkhyIiwicXIiLCJLciIsImpyIiwiWHIiLCJwcmVwYXJlQW5kVmFsaWRhdGUiLCIkciIsIlFyIiwiSnIiLCJaciIsInNsaWNlUmFuayIsIm51bVVwZGF0ZXMiLCJzbGljZVNpemUiLCJvdXRwdXRTaXplIiwidG8iLCJ2YWxpZGF0ZVVwZGF0ZVNoYXBlIiwidmFsaWRhdGVJbnB1dCIsImNhbGN1bGF0ZVNoYXBlcyIsImVvIiwibm8iLCJybyIsIm9vIiwiTUlOX1NBRkVfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJhbyIsImlvIiwic28iLCJ1byIsImFzc2VydFBhcmFtc1ZhbGlkIiwibWFza1RvQXhlcyIsImNvbXB1dGVPdXRTaGFwZSIsInN0YXJ0Rm9yQXhpcyIsInN0b3BGb3JBeGlzIiwiaXNTbGljZUNvbnRpbm91cyIsImNvbXB1dGVGbGF0T2Zmc2V0IiwiY28iLCJtbyIsImxvIiwiaG8iLCJncmFkIiwiZm8iLCJwbyIsInZvIiwiZ28iLCJzb2Z0bWF4XyIsImxvZ2l0cyIsImRpbSIsInlvIiwibG9nU29mdG1heF8iLCJ4byIsImRhdGFNb3ZlciIsImRhdGFJZHNDb3VudCIsImJvIiwid28iLCJmbG9hdFByZWNpc2lvbiIsImVwc2lsb24iLCJiYXRjaE1hdE11bCIsImZ1c2VkQmF0Y2hNYXRNdWwiLCJ0cmFuc3Bvc2VBIiwidHJhbnNwb3NlQiIsImJpYXMiLCJhY3RpdmF0aW9uIiwicHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyIsImFkZE4iLCJzdWJ0cmFjdCIsIm11bHRpcGx5IiwicmVhbERpdmlkZSIsInNlbGVjdCIsInNxdWFyZWREaWZmZXJlbmNlIiwiZWx1RGVyIiwiaW50IiwiY2xpcCIsImNvbXBsZXhBYnMiLCJmdXNlZENvbnYyZCIsImNvbnZJbmZvIiwiY29udjJkRGVySW5wdXQiLCJjb252MmREZXJGaWx0ZXIiLCJmdXNlZERlcHRod2lzZUNvbnYyRCIsImRlcHRod2lzZUNvbnYyRERlcklucHV0IiwiZGVwdGh3aXNlQ29udjJERGVyRmlsdGVyIiwiY29udjNkIiwiY29udjNkRGVySW5wdXQiLCJjb252M2REZXJGaWx0ZXIiLCJtYXhQb29sQmFja3Byb3AiLCJhdmdQb29sQmFja3Byb3AiLCJhdmdQb29sM2QiLCJhdmdQb29sM2RCYWNrcHJvcCIsIm1heFBvb2wzZCIsIm1heFBvb2wzZEJhY2twcm9wIiwiZ2F0aGVyTkQiLCJzY2F0dGVyTkQiLCJyZXNpemVCaWxpbmVhckJhY2twcm9wIiwicmVzaXplTmVhcmVzdE5laWdoYm9yQmFja3Byb3AiLCJsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjREIiwiTFJOR3JhZCIsIm5vbk1heFN1cHByZXNzaW9uIiwiY3JvcEFuZFJlc2l6ZSIsInNwYXJzZVRvRGVuc2UiLCJkaWFnIiwiQ28iLCJFbyIsIlJvIiwiSW8iLCJUbyIsIlNvIiwia28iLCJObyIsIkFvIiwiRm8iLCJ0b3AiLCJib3R0b20iLCJsZWZ0IiwicmlnaHQiLCJ0eXBlIiwiRG8iLCJfbyIsInBhZEluZm8iLCJvdXRIZWlnaHQiLCJvdXRXaWR0aCIsImJhdGNoU2l6ZSIsImRhdGFGb3JtYXQiLCJpbkhlaWdodCIsImluV2lkdGgiLCJpbkNoYW5uZWxzIiwib3V0Q2hhbm5lbHMiLCJzdHJpZGVIZWlnaHQiLCJzdHJpZGVXaWR0aCIsImZpbHRlckhlaWdodCIsImZpbHRlcldpZHRoIiwiZWZmZWN0aXZlRmlsdGVySGVpZ2h0IiwiZWZmZWN0aXZlRmlsdGVyV2lkdGgiLCJkaWxhdGlvbkhlaWdodCIsImRpbGF0aW9uV2lkdGgiLCJpblNoYXBlIiwib3V0U2hhcGUiLCJmaWx0ZXJTaGFwZSIsImZyb250IiwiYmFjayIsIm91dERlcHRoIiwiaW5EZXB0aCIsInN0cmlkZURlcHRoIiwiZmlsdGVyRGVwdGgiLCJlZmZlY3RpdmVGaWx0ZXJEZXB0aCIsImRpbGF0aW9uRGVwdGgiLCJPbyIsIk1vIiwiQm8iLCJQbyIsIkxvIiwiV28iLCJVbyIsImNhc3RUZW5zb3IiLCJyZXNoYXBlVGVuc29yIiwibGluc3BhY2VJbXBsIiwidXBjYXN0VHlwZSIsImF4ZXNBcmVJbm5lck1vc3REaW1zIiwiY29tYmluZUxvY2F0aW9ucyIsImNvbXB1dGVPdXRBbmRSZWR1Y2VTaGFwZXMiLCJleHBhbmRTaGFwZVRvS2VlcERpbSIsImFzc2VydEF4ZXNBcmVJbm5lck1vc3REaW1zIiwiZ2V0QXhlc1Blcm11dGF0aW9uIiwiZ2V0VW5kb0F4ZXNQZXJtdXRhdGlvbiIsImdldElubmVyTW9zdEF4ZXMiLCJnZXRCcm9hZGNhc3REaW1zIiwiZ2V0UmVkdWN0aW9uQXhlcyIsImFzc2VydEFuZEdldEJyb2FkY2FzdFNoYXBlIiwiYXNzZXJ0UGFyYW1zQ29uc2lzdGVudCIsImNvbXB1dGVQb29sMkRJbmZvIiwiY29tcHV0ZVBvb2wzREluZm8iLCJjb21wdXRlQ29udjJESW5mbyIsImNvbXB1dGVDb252M0RJbmZvIiwiY29tcHV0ZURlZmF1bHRQYWQiLCJ0dXBsZVZhbHVlc0FyZU9uZSIsImVpdGhlclN0cmlkZXNPckRpbGF0aW9uc0FyZU9uZSIsImNvbnZlcnRDb252MkREYXRhRm9ybWF0IiwiUEFSQUxMRUxJWkVfVEhSRVNIT0xEIiwiY29tcHV0ZU9wdGltYWxXaW5kb3dTaXplIiwiVm8iLCJ6byIsIkdvIiwiSG8iLCJQSSIsInFvIiwiS28iLCJqbyIsIllvIiwic2VsZWN0ZWRJbmRpY2VzIiwiWG8iLCJudW1WYWxpZE91dHB1dHMiLCJzZWxlY3RlZFNjb3JlcyIsInNjb3JlIiwiYm94SW5kZXgiLCJzdXBwcmVzc0JlZ2luSW5kZXgiLCJKbyIsIiRvIiwiUW8iLCJzdWJhcnJheSIsIlpvIiwidGEiLCJlYSIsImluZGV4IiwibmEiLCJyYSIsIm91dHB1dFNoYXBlIiwidmFyaWFibGVOYW1lcyIsInVzZXJDb2RlIiwib2EiLCJwYWNrZWRJbnB1dHMiLCJwYWNrZWRPdXRwdXQiLCJhYSIsIndpbmRvd1NpemUiLCJpblNpemUiLCJpYSIsInNhIiwidWEiLCJ2ZXJzaW9uIiwiYXR0cmlidXRlIiwidmFyeWluZ1ZzIiwidmFyeWluZ0ZzIiwidGV4dHVyZTJEIiwib3V0cHV0IiwiZGVmaW5lT3V0cHV0IiwiZGVmaW5lU3BlY2lhbE5hTiIsImRlZmluZVNwZWNpYWxJbmYiLCJkZWZpbmVSb3VuZCIsImNhIiwibGEiLCJoYSIsImZhIiwic2hhcGVJbmZvIiwibG9naWNhbFNoYXBlIiwiaXNVbmlmb3JtIiwicGEiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInRleFNoYXBlIiwiQ2EiLCJFYSIsImRhIiwieGEiLCJiYSIsImZsYXRPZmZzZXQiLCJ3YSIsInZhIiwibWEiLCJnYSIsImlzUGFja2VkIiwieWEiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJSYSIsIklhIiwia2EiLCJTYSIsIkFhIiwiTmEiLCJGYSIsIl9hIiwiT2EiLCJNYSIsIkJhIiwiUGEiLCJMYSIsInN1cHBvcnRzQnJvYWRjYXN0aW5nIiwiV2EiLCJnZXRDdXN0b21TZXR1cEZ1bmMiLCJtaW5Mb2MiLCJnZXRVbmlmb3JtTG9jYXRpb25Ob1Rocm93IiwibWF4TG9jIiwiZ2wiLCJ1bmlmb3JtMWYiLCJVYSIsIlZhIiwiemEiLCJHYSIsIkhhIiwicWEiLCJLYSIsImphIiwiWGEiLCJZYSIsIiRhIiwiUWEiLCJKYSIsIlphIiwidGkiLCJlaSIsIm5pIiwicmkiLCJvaSIsIm91dFBhY2tpbmdTY2hlbWUiLCJhaSIsImlpIiwiYmxvY2tTaXplIiwiZ2V0SGVpZ2h0Q29vcmRTdHJpbmciLCJnZXRXaWR0aENvb3JkU3RyaW5nIiwiZ2V0RGVwdGhDb29yZFN0cmluZyIsImdldE91dHB1dERlcHRoU2l6ZSIsImdldElucHV0U2FtcGxpbmdTdHJpbmciLCJzaSIsInVpIiwib3V0VGV4VXNhZ2UiLCJjaSIsImxpIiwiaGkiLCJwaSIsInZpIiwidmFsdWVMb2MiLCJtaSIsImdpIiwic2xpY2VEaW0iLCJ5aSIsInhpIiwiYmkiLCJVaW50MTZBcnJheSIsIndpIiwidGV4UGFyYW1ldGVyaSIsIlRFWFRVUkVfV1JBUF9TIiwiQ0xBTVBfVE9fRURHRSIsIlRFWFRVUkVfV1JBUF9UIiwiVEVYVFVSRV9NSU5fRklMVEVSIiwiTkVBUkVTVCIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsIkNpIiwiRWkiLCJSaSIsIlVOU0lHTkVEX0JZVEUiLCJJaSIsImtpIiwiU2kiLCJBaSIsIkRpIiwiVGkiLCJQSVhFTF9QQUNLX0JVRkZFUiIsIlNUUkVBTV9SRUFEIiwicmVhZFBpeGVscyIsIk5pIiwiZ2V0QnVmZmVyU3ViRGF0YSIsIkZpIiwiX2kiLCJPaSIsIk1pIiwiY3JlYXRlVmVydGV4QnVmZmVyIiwiY3JlYXRlSW5kZXhCdWZmZXIiLCJjcmVhdGVGbG9hdDMyTWF0cml4VGV4dHVyZSIsImNyZWF0ZUZsb2F0MTZNYXRyaXhUZXh0dXJlIiwiY3JlYXRlVW5zaWduZWRCeXRlc01hdHJpeFRleHR1cmUiLCJjcmVhdGVQYWNrZWRNYXRyaXhUZXh0dXJlIiwiY3JlYXRlRmxvYXQxNlBhY2tlZE1hdHJpeFRleHR1cmUiLCJiaW5kVmVydGV4UHJvZ3JhbUF0dHJpYnV0ZVN0cmVhbXMiLCJ1cGxvYWREZW5zZU1hdHJpeFRvVGV4dHVyZSIsInVwbG9hZFBpeGVsRGF0YVRvVGV4dHVyZSIsImNyZWF0ZUJ1ZmZlckZyb21PdXRwdXRUZXh0dXJlIiwiZG93bmxvYWRGbG9hdDMyTWF0cml4RnJvbUJ1ZmZlciIsImRvd25sb2FkQnl0ZUVuY29kZWRGbG9hdE1hdHJpeEZyb21PdXRwdXRUZXh0dXJlIiwiZG93bmxvYWRQYWNrZWRNYXRyaXhGcm9tQnVmZmVyIiwiZG93bmxvYWRNYXRyaXhGcm9tUGFja2VkT3V0cHV0VGV4dHVyZSIsIkJpIiwib3V0cHV0VGV4dHVyZSIsInByb2dyYW0iLCJkaXNwb3NlZCIsInZlcnRleEF0dHJzQXJlQm91bmQiLCJpdGVtc1RvUG9sbCIsInRleHR1cmVGbG9hdEV4dGVuc2lvbiIsImRlYnVnIiwidGV4dHVyZUhhbGZGbG9hdEV4dGVuc2lvbiIsImNvbG9yQnVmZmVyRmxvYXRFeHRlbnNpb24iLCJjb2xvckJ1ZmZlckhhbGZGbG9hdEV4dGVuc2lvbiIsInZlcnRleEJ1ZmZlciIsImluZGV4QnVmZmVyIiwiZnJhbWVidWZmZXIiLCJ0ZXh0dXJlQ29uZmlnIiwiZmluaXNoIiwiZGVsZXRlQnVmZmVyIiwiZGVsZXRlTWF0cml4VGV4dHVyZSIsImRvd25sb2FkTWF0cml4RHJpdmVyIiwiY3JlYXRlQnVmZmVyRnJvbVRleHR1cmUiLCJiaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXIiLCJ1bmJpbmRUZXh0dXJlVG9GcmFtZUJ1ZmZlciIsImNyZWF0ZUFuZFdhaXRGb3JGZW5jZSIsImNyZWF0ZUZlbmNlIiwicG9sbEZlbmNlIiwiU1lOQ19HUFVfQ09NTUFORFNfQ09NUExFVEUiLCJmbHVzaCIsImNsaWVudFdhaXRTeW5jIiwiQUxSRUFEWV9TSUdOQUxFRCIsIkNPTkRJVElPTl9TQVRJU0ZJRUQiLCJiZWdpblF1ZXJ5IiwiZW5kUXVlcnkiLCJpc1F1ZXJ5QXZhaWxhYmxlIiwicXVlcnkiLCJpc0ZlbmNlUGFzc2VkIiwiZG93bmxvYWRNYXRyaXhGcm9tUGFja2VkVGV4dHVyZSIsImF0dGFjaFNoYWRlciIsInNldFByb2dyYW0iLCJkZWxldGVQcm9ncmFtIiwidXNlUHJvZ3JhbSIsImdldEF0dHJpYnV0ZUxvY2F0aW9uIiwic2V0SW5wdXRNYXRyaXhUZXh0dXJlIiwidGhyb3dJZk5vUHJvZ3JhbSIsInNldE91dHB1dE1hdHJpeFRleHR1cmUiLCJzZXRPdXRwdXRNYXRyaXhUZXh0dXJlRHJpdmVyIiwic2V0T3V0cHV0UGFja2VkTWF0cml4VGV4dHVyZSIsInNldE91dHB1dE1hdHJpeFdyaXRlUmVnaW9uIiwic2V0T3V0cHV0TWF0cml4V3JpdGVSZWdpb25Ecml2ZXIiLCJzZXRPdXRwdXRQYWNrZWRNYXRyaXhXcml0ZVJlZ2lvbiIsImRlYnVnVmFsaWRhdGUiLCJleGVjdXRlUHJvZ3JhbSIsImRyYXdFbGVtZW50cyIsIlRSSUFOR0xFUyIsIlVOU0lHTkVEX1NIT1JUIiwiYmxvY2tVbnRpbEFsbFByb2dyYW1zQ29tcGxldGVkIiwiZ2V0UXVlcnlUaW1lckV4dGVuc2lvbiIsImRpc2pvaW50UXVlcnlUaW1lckV4dGVuc2lvbiIsImdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDIiLCJnZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wxIiwiY3JlYXRlUXVlcnkiLCJUSU1FX0VMQVBTRURfRVhUIiwiY3JlYXRlUXVlcnlFWFQiLCJiZWdpblF1ZXJ5RVhUIiwiZW5kUXVlcnlFWFQiLCJ3YWl0Rm9yUXVlcnlBbmRHZXRUaW1lIiwiZ2V0UXVlcnlUaW1lIiwiZ2V0UXVlcnlQYXJhbWV0ZXIiLCJRVUVSWV9SRVNVTFQiLCJnZXRRdWVyeU9iamVjdEVYVCIsIlFVRVJZX1JFU1VMVF9FWFQiLCJRVUVSWV9SRVNVTFRfQVZBSUxBQkxFIiwiZGlzam9pbnQiLCJHUFVfRElTSk9JTlRfRVhUIiwiUVVFUllfUkVTVUxUX0FWQUlMQUJMRV9FWFQiLCJhZGRJdGVtVG9Qb2xsIiwicG9sbEl0ZW1zIiwiaXNEb25lRm4iLCJyZXNvbHZlRm4iLCJQaSIsInRleERhdGEiLCJMaSIsIldpIiwiVWkiLCJkZXB0aFJhZGl1cyIsIlZpIiwiemkiLCJHaSIsIkhpIiwicWkiLCJzZWVkTG9jIiwiS2kiLCJqaSIsIlhpIiwiWWkiLCIkaSIsIlFpIiwiSmkiLCJaaSIsInRzIiwiZXMiLCJycyIsIm9zIiwiYXMiLCJpcyIsInNzIiwidXMiLCJudW1TZWdtZW50cyIsImNzIiwibHMiLCJocyIsInN0YXJ0TG9jIiwidW5pZm9ybTFpdiIsImZzIiwiZHMiLCJwcyIsImdwZ3B1IiwibnVtVXNlZFRleHR1cmVzIiwibnVtRnJlZVRleHR1cmVzIiwiZnJlZVRleHR1cmVzIiwibG9nRW5hYmxlZCIsInVzZWRUZXh0dXJlcyIsImFjcXVpcmVUZXh0dXJlIiwidnMiLCJtcyIsInNoaWZ0IiwicmVsZWFzZVRleHR1cmUiLCJnZXROdW1Vc2VkVGV4dHVyZXMiLCJnZXROdW1GcmVlVGV4dHVyZXMiLCJncyIsInlzIiwieHMiLCJicyIsIndzIiwiQ3MiLCJFcyIsIklzIiwia3MiLCJTcyIsIkFzIiwiVHMiLCJOcyIsIkZzIiwiX3MiLCJPcyIsIkdzIiwicXMiLCJLcyIsImpzIiwiWHMiLCJZcyIsIiRzIiwiUXMiLCJacyIsInBlbmRpbmdSZWFkIiwicGVuZGluZ0Rpc3Bvc2FsIiwiV2Vha1NldCIsImRhdGFSZWZDb3VudCIsIm51bUJ5dGVzSW5HUFUiLCJ1cGxvYWRXYWl0TXMiLCJkb3dubG9hZFdhaXRNcyIsIndhcm5lZEFib3V0TWVtb3J5IiwicGVuZGluZ0RlbGV0ZXMiLCJiaW5hcnlDYWNoZSIsImdwZ3B1Q3JlYXRlZExvY2FsbHkiLCJ0ZXh0dXJlTWFuYWdlciIsIm51bU1CQmVmb3JlV2FybmluZyIsImRldmljZVBpeGVsUmF0aW8iLCJjcHVCYWNrZW5kIiwiY2hlY2tOdW1lcmljYWxQcm9ibGVtcyIsInVzYWdlIiwiY29tcGxleFRlbnNvcnMiLCJydW5XZWJHTFByb2dyYW0iLCJjb252ZXJ0QW5kQ2FjaGVPbkNQVSIsImFjdGl2ZVRpbWVycyIsImdldFZhbHVlc0Zyb21UZXh0dXJlIiwidGV4dHVyZSIsInByb2dyYW1UaW1lcnNTdGFjayIsInN0YXJ0VGltZXIiLCJzdGFydE1zIiwiZW5kTXMiLCJlbmRUaW1lciIsInJlbGVhc2VHUFVEYXRhIiwib3JpZ0RhdGFJZCIsImNvbXB1dGVCeXRlcyIsImdldFRleHR1cmUiLCJ1cGxvYWRUb0dQVSIsImdldERhdGFJbmZvIiwiZ2V0Q1BVQmFja2VuZCIsInNob3VsZEV4ZWN1dGVPbkNQVSIsImdldEdQR1BVQ29udGV4dCIsIm1ha2VPdXRwdXQiLCJjb21waWxlQW5kUnVuIiwic2hhbGxvd1NsaWNlIiwicGFja2VkVW5hcnlPcCIsIm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySW5mbyIsInBhY2tlZEJpbmFyeU9wIiwiYXJnUmVkdWNlIiwiYXJnUmVkdWNlUGFja2VkIiwic2VnT3BDb21wdXRlIiwiYXJnTWluTWF4UmVkdWNlIiwiY29tcGxleFNlcGFyYWJsZUJpbmFyeU9wIiwiY29udjJkQnlNYXRNdWwiLCJjb252MmRXaXRoSW0yUm93IiwicGFja2VkUmVzaGFwZSIsImZmdEltcGwiLCJtYWtlVGVuc29ySW5mbyIsInVucGFja1RlbnNvciIsInBhY2tUZW5zb3IiLCJ1bmlmb3JtVmFsdWVzIiwiZ2V0QW5kU2F2ZUJpbmFyeSIsInNvdXJjZSIsIndlYkdMUHJvZ3JhbSIsInVuaWZvcm1Mb2NhdGlvbnMiLCJpblNoYXBlSW5mb3MiLCJvdXRTaGFwZUluZm8iLCJpbmZMb2MiLCJuYW5Mb2MiLCJ1bmlmb3JtMWZ2IiwiZ2V0VGV4dHVyZU1hbmFnZXIiLCJIVE1MQ2FudmFzRWxlbWVudCIsInJlbW92ZSIsImZsb2F0UHJlY2lzaW9uVmFsdWUiLCJ0dSIsInNxdWFyZV8iLCJldSIsIm51Iiwic3F1YXJlZERpZmZlcmVuY2VfIiwicnUiLCJhYnNfIiwib3UiLCJhY29zXyIsImF1IiwiYWNvc2hfIiwiaXUiLCJhc2luXyIsInN1IiwiYXNpbmhfIiwidXUiLCJhdGFuXyIsImN1IiwiYXRhbmhfIiwibHUiLCJjZWlsXyIsImh1IiwiY2xpcEJ5VmFsdWVfIiwiZnUiLCJjb3NfIiwiZHUiLCJjb3NoXyIsInB1IiwiZXJmXyIsInZ1IiwiZXhwXyIsIm11IiwiZXhwbTFfIiwiZ3UiLCJmbG9vcl8iLCJ5dSIsImxvZ18iLCJ4dSIsImxvZzFwXyIsImJ1IiwibG9nU2lnbW9pZF8iLCJ3dSIsIm5lZ18iLCJDdSIsInJlY2lwcm9jYWxfIiwiRXUiLCJyb3VuZF8iLCJSdSIsInJzcXJ0XyIsIkl1Iiwic2lnbW9pZF8iLCJrdSIsInNpZ25fIiwiU3UiLCJpc05hTl8iLCJBdSIsImlzSW5mXyIsIkR1IiwiaXNGaW5pdGVfIiwiVHUiLCJzaW5fIiwiTnUiLCJzaW5oXyIsIkZ1Iiwic29mdHBsdXNfIiwiX3UiLCJzcXJ0XyIsIk91Iiwic3RlcF8iLCJNdSIsInRhbl8iLCJCdSIsInRhbmhfIiwiUHUiLCJVdSIsIkx1IiwiV3UiLCJWdSIsInZhcmlhbmNlIiwic2NhbGUiLCJvZmZzZXQiLCJ2YXJpYW5jZUVwc2lsb24iLCJ6dSIsIkd1IiwiYmF0Y2hOb3JtYWxpemF0aW9uMmRfIiwiSHUiLCJiYXRjaE5vcm1hbGl6YXRpb24zZF8iLCJxdSIsImJhdGNoTm9ybWFsaXphdGlvbjRkXyIsIkt1IiwiYmF0Y2hOb3JtYWxpemF0aW9uXyIsImp1IiwiYmF0Y2hOb3JtXyIsIlh1IiwiYmF0Y2hOb3JtMmRfIiwiWXUiLCJiYXRjaE5vcm0zZF8iLCIkdSIsImJhdGNoTm9ybTRkXyIsIlF1IiwibG9naWNhbEFuZF8iLCJKdSIsImxvZ2ljYWxOb3RfIiwiWnUiLCJsb2dpY2FsT3JfIiwiJGIiLCJ0YyIsImxvZ2ljYWxYb3JfIiwiZWMiLCJ3aGVyZV8iLCIkY29uZGl0aW9uIiwibmMiLCJyYyIsImFkZF8iLCJvYyIsImFkZE5fIiwiYWMiLCJhZGRTdHJpY3RfIiwiaWMiLCJhdGFuMl8iLCJzYyIsImRpdl8iLCJsYyIsInVjIiwiZGl2Tm9OYW5fIiwiY2MiLCJkaXZTdHJpY3RfIiwiZmxvb3JEaXZfIiwiaGMiLCJtYXhpbXVtXyIsImZjIiwibWF4aW11bVN0cmljdF8iLCJkYyIsIm1pbmltdW1fIiwicGMiLCJtaW5pbXVtU3RyaWN0XyIsInZjIiwibW9kXyIsIm1jIiwibW9kU3RyaWN0XyIsImdjIiwibXVsXyIsInljIiwibXVsU3RyaWN0XyIsInhjIiwicG93XyIsImJjIiwicG93U3RyaWN0XyIsIndjIiwic3F1YXJlZERpZmZlcmVuY2VTdHJpY3RfIiwiQ2MiLCJzdWJfIiwiRWMiLCJzdWJTdHJpY3RfIiwiUmMiLCJlcXVhbF8iLCJJYyIsImVxdWFsU3RyaWN0XyIsImtjIiwiZ3JlYXRlcl8iLCJTYyIsImdyZWF0ZXJFcXVhbF8iLCJBYyIsImdyZWF0ZXJFcXVhbFN0cmljdF8iLCJEYyIsImdyZWF0ZXJTdHJpY3RfIiwiVGMiLCJsZXNzXyIsIk5jIiwibGVzc0VxdWFsXyIsIkZjIiwibGVzc0VxdWFsU3RyaWN0XyIsIl9jIiwibGVzc1N0cmljdF8iLCJPYyIsIm5vdEVxdWFsXyIsIk1jIiwibm90RXF1YWxTdHJpY3RfIiwiQmMiLCJQYyIsIkxjIiwiZ2F0aGVyXyIsImRpbVNpemUiLCJpbmRpY2VzIiwiV2MiLCJ1bnNvcnRlZFNlZ21lbnRTdW1fIiwiVWMiLCJWYyIsImR5NEQiLCJxYyIsImpjIiwiemMiLCJHYyIsImR5NUQiLCJIYyIsImNvbnYxZF8iLCJjb252MmRfIiwiWGMiLCJLYyIsImNvbnYzZF8iLCIkZmlsdGVyIiwieDVEIiwiY29udjJkRGVyRmlsdGVyXyIsIng0RCIsImNvbnYyZERlcklucHV0XyIsIlljIiwiZGVwdGh3aXNlQ29udjJkXyIsIiRjIiwiUWMiLCJkZXB0aHdpc2VDb252MmREZXJJbnB1dF8iLCJkZXB0aHdpc2VDb252MmREZXJGaWx0ZXJfIiwiSmMiLCJzZXBhcmFibGVDb252MmRfIiwiWmMiLCJjb252MmRUcmFuc3Bvc2VfIiwidGwiLCJjb252M2RUcmFuc3Bvc2VfIiwiZWwiLCJtYXRNdWxfIiwibmwiLCJkb3RfIiwicmwiLCJvdXRlclByb2R1Y3RfIiwib2wiLCJyZXZlcnNlXyIsImFsIiwicmV2ZXJzZTFkXyIsImlsIiwicmV2ZXJzZTJkXyIsInNsIiwicmV2ZXJzZTNkXyIsInVsIiwicmV2ZXJzZTRkXyIsImNsIiwiJGR5IiwibGwiLCJpbnB1dDREIiwiaGwiLCJtYXhQb29sXyIsImZsIiwiYXZnUG9vbF8iLCJkbCIsInBvb2xfIiwicGwiLCJtYXhQb29sM2RfIiwiaW5wdXQ1RCIsInZsIiwiYXZnUG9vbDNkXyIsIm1sIiwic2xpY2VfIiwiYmVnaW4iLCJzbGljZTFkXyIsInlsIiwic2xpY2UyZF8iLCJ4bCIsInNsaWNlM2RfIiwiYmwiLCJzbGljZTRkXyIsIndsIiwiQ2wiLCJhbGxfIiwiRWwiLCJhbnlfIiwiUmwiLCJhcmdNYXhfIiwiSWwiLCJhcmdNaW5fIiwia2wiLCJsb2dTdW1FeHBfIiwiU2wiLCJtYXhfIiwiYXhlcyIsIkFsIiwibWVhbl8iLCJEbCIsIm1pbl8iLCJUbCIsIm1vbWVudHNfIiwiTmwiLCJzdW1fIiwiRmwiLCJwcm9kXyIsIl9sIiwiZWx1XyIsImR5IiwiT2wiLCJsZWFreVJlbHVfIiwiTWwiLCJwcmVsdV8iLCJCbCIsInJlbHVfIiwiUGwiLCJyZWx1Nl8iLCJMbCIsInNlbHVfIiwiV2wiLCJ0cmFuc3Bvc2VfIiwicGVybSIsIlVsIiwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb25fIiwiVmwiLCJub3JtXyIsInpsIiwiYmFzaWNMU1RNQ2VsbF8iLCJHbCIsIm11bHRpUk5OQ2VsbF8iLCJIbCIsIm1vdmluZ0F2ZXJhZ2VfIiwicWwiLCJzdHJpZGVkU2xpY2VfIiwiS2wiLCJ0b3BrXyIsImpsIiwic2NhdHRlck5EXyIsInVwZGF0ZXMiLCJYbCIsImZmdF8iLCJZbCIsImlmZnRfIiwiJGwiLCJyZmZ0XyIsIlFsIiwiaXJmZnRfIiwiSmwiLCJabCIsInNwYXJzZVRvRGVuc2VfIiwiJHNwYXJzZUluZGljZXMiLCIkc3BhcnNlVmFsdWVzIiwiJGRlZmF1bHRWYWx1ZSIsInRoIiwiZ2F0aGVyTkRfIiwiZWgiLCJkaWFnXyIsIm5oIiwiZHJvcG91dF8iLCJyaCIsImNoIiwib2giLCJoYW5uV2luZG93XyIsImFoIiwiaGFtbWluZ1dpbmRvd18iLCJpaCIsImZyYW1lXyIsInNoIiwic3RmdF8iLCJ1aCIsImhhbm5XaW5kb3ciLCJoYW1taW5nV2luZG93IiwiZnJhbWUiLCJzdGZ0IiwibGgiLCJOT05FIiwiTUVBTiIsIlNVTSIsIlNVTV9CWV9OT05aRVJPX1dFSUdIVFMiLCJoaCIsImFic29sdXRlRGlmZmVyZW5jZV8iLCJmaCIsImNvbXB1dGVXZWlnaHRlZExvc3NfIiwiZGgiLCJjb3NpbmVEaXN0YW5jZV8iLCJwaCIsImhpbmdlTG9zc18iLCJ2aCIsImh1YmVyTG9zc18iLCJtaCIsImxvZ0xvc3NfIiwiZ2giLCJtZWFuU3F1YXJlZEVycm9yXyIsInloIiwic2lnbW9pZENyb3NzRW50cm9weV8iLCJ4aCIsInNvZnRtYXhDcm9zc0VudHJvcHlfIiwiYmgiLCJhYnNvbHV0ZURpZmZlcmVuY2UiLCJjb21wdXRlV2VpZ2h0ZWRMb3NzIiwiY29zaW5lRGlzdGFuY2UiLCJoaW5nZUxvc3MiLCJodWJlckxvc3MiLCJsb2dMb3NzIiwibWVhblNxdWFyZWRFcnJvciIsInNpZ21vaWRDcm9zc0VudHJvcHkiLCJzb2Z0bWF4Q3Jvc3NFbnRyb3B5Iiwid2giLCJDaCIsImJhbmRQYXJ0XyIsIkVoIiwiZ3JhbVNjaG1pZHRfIiwiUmgiLCJxcl8iLCJJaCIsImJhbmRQYXJ0IiwiZ3JhbVNjaG1pZHQiLCJraCIsIk5FR0FUSVZFX0lORklOSVRZIiwibWF4T3V0cHV0U2l6ZSIsImlvdVRocmVzaG9sZCIsInNjb3JlVGhyZXNob2xkIiwic29mdE5tc1NpZ21hIiwiU2giLCJyZXNpemVCaWxpbmVhcl8iLCJhbGlnbkNvcm5lcnMiLCJuZXdIZWlnaHQiLCJuZXdXaWR0aCIsIkFoIiwicmVzaXplTmVhcmVzdE5laWdoYm9yXyIsImJhdGNoSW1hZ2VzIiwiRGgiLCJub25NYXhTdXBwcmVzc2lvbl8iLCJib3hlcyIsInNjb3JlcyIsIk5oIiwibm9uTWF4U3VwcHJlc3Npb25XaXRoU2NvcmVfIiwiX2giLCJjcm9wQW5kUmVzaXplXyIsImltYWdlcyIsImJveEluZCIsIm1ldGhvZCIsImV4dHJhcG9sYXRpb25WYWx1ZSIsImNyb3BTaXplIiwiT2giLCJub25NYXhTdXBwcmVzc2lvbkFzeW5jIiwibm9uTWF4U3VwcHJlc3Npb25XaXRoU2NvcmUiLCJub25NYXhTdXBwcmVzc2lvbldpdGhTY29yZUFzeW5jIiwiTWgiLCJCaCIsIlBoIiwiTGgiLCJXaCIsImZ1c2VkTWF0TXVsXyIsIlVoIiwiZnVzZWRDb252MmRfIiwiZGlsYXRpb25zIiwiZGltUm91bmRpbmdNb2RlIiwiVmgiLCJmdXNlZERlcHRod2lzZUNvbnYyZF8iLCJ6aCIsIkdoIiwibGluYWxnIiwibG9zc2VzIiwiZnVzZWQiLCJzaWduYWwiLCJjb252M2RUcmFuc3Bvc2UiLCJvcCIsImJhdGNoTm9ybWFsaXphdGlvbjJkIiwiYmF0Y2hOb3JtYWxpemF0aW9uM2QiLCJiYXRjaE5vcm1hbGl6YXRpb240ZCIsImJhdGNoTm9ybTJkIiwiYmF0Y2hOb3JtM2QiLCJiYXRjaE5vcm00ZCIsImJvb2xlYW5NYXNrQXN5bmMiLCJjb25jYXQxZCIsImNvbmNhdDJkIiwiY29uY2F0M2QiLCJjb25jYXQ0ZCIsIm91dGVyUHJvZHVjdCIsInJldmVyc2UxZCIsInJldmVyc2UyZCIsInJldmVyc2UzZCIsInJldmVyc2U0ZCIsInNsaWNlMWQiLCJzbGljZTJkIiwic2xpY2UzZCIsInNsaWNlNGQiLCJtb21lbnRzIiwid2hlcmVBc3luYyIsImJyb2FkY2FzdFRvIiwiZXllIiwicGFkMWQiLCJwYWQyZCIsInBhZDNkIiwicGFkNGQiLCJyYW5kIiwicmFuZG9tTm9ybWFsIiwicmFuZG9tR2FtbWEiLCJyYW5kb21Vbmlmb3JtIiwidHJ1bmNhdGVkTm9ybWFsIiwic2V0ZGlmZjFkQXN5bmMiLCJvbmVzIiwic2NhbGFyIiwidGVuc29yIiwidGVuc29yMWQiLCJ0ZW5zb3IyZCIsInRlbnNvcjNkIiwidGVuc29yNGQiLCJ0ZW5zb3I1ZCIsInRlbnNvcjZkIiwiemVyb3MiLCJiYXNpY0xTVE1DZWxsIiwibXVsdGlSTk5DZWxsIiwibW92aW5nQXZlcmFnZSIsImRyb3BvdXQiLCJpblRvcEtBc3luYyIsIkhoIiwicWgiLCJsaW5lYXIiLCJLaCIsImZpcnN0VXNlIiwiYnJvYWRjYXN0ZWRCaW5hcnlDb21wbGV4T3AiLCJicm9hZGNhc3RlZEJpbmFyeU9wIiwiaHlwb3QiLCJ0cnVuYyIsIlBPU0lUSVZFX0lORklOSVRZIiwibWF4UG9vbFBvc2l0aW9ucyIsInBvb2wzZCIsIm1heFBvb2wzZFBvc2l0aW9ucyIsImZmdEJhdGNoIiwiaXNFeHBvbmVudE9mMiIsImZmdFJhZGl4MiIsImZvdXJpZXJUcmFuc2Zvcm1CeU1hdG11bCIsInNjYXR0ZXIiLCJqaCIsIlhoIiwiWWgiLCIkaCIsIlFoIiwiSmgiLCJaaCIsInBpeGVscyIsIm51bUNoYW5uZWxzIiwiSFRNTFZpZGVvRWxlbWVudCIsIkhUTUxJbWFnZUVsZW1lbnQiLCJ2aWRlb1dpZHRoIiwidmlkZW9IZWlnaHQiLCJkcmF3SW1hZ2UiLCJ0ZiIsImVmIiwibmYiLCJwZXJmb3JtYW5jZSIsInRleHRFbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJUZXh0RGVjb2RlciIsInJmIiwiYWYiLCJ1dGlsIiwiaHJ0aW1lIiwic2YiLCJ1aW50MTYiLCJ1aW50OCIsImNmIiwicXVhbnRpemF0aW9uIiwibGYiLCJieXRlTGVuZ3RoIiwiaGYiLCJCdWZmZXIiLCJCbG9iIiwiYXRvYiIsImJ0b2EiLCJmZiIsImRmIiwicGYiLCJ0cmltIiwidmYiLCJtb2RlbFRvcG9sb2d5IiwiQXJyYXlCdWZmZXIiLCJkYXRlU2F2ZWQiLCJtb2RlbFRvcG9sb2d5VHlwZSIsIm1vZGVsVG9wb2xvZ3lCeXRlcyIsIndlaWdodFNwZWNzQnl0ZXMiLCJ3ZWlnaHRTcGVjcyIsIndlaWdodERhdGFCeXRlcyIsIndlaWdodERhdGEiLCJtZiIsInNhdmVSb3V0ZXJzIiwibG9hZFJvdXRlcnMiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwicmVnaXN0ZXJTYXZlUm91dGVyIiwicmVnaXN0ZXJMb2FkUm91dGVyIiwiZ2V0U2F2ZUhhbmRsZXJzIiwiZ2V0SGFuZGxlcnMiLCJnZXRMb2FkSGFuZGxlcnMiLCJnZiIsInlmIiwibWFuYWdlcnMiLCJyZWdpc3Rlck1hbmFnZXIiLCJnZXRNYW5hZ2VyIiwiZ2V0U2NoZW1lcyIsInhmIiwic2NoZW1lIiwicGF0aCIsImJmIiwibG9hZCIsInJlbW92ZU1vZGVsIiwic2F2ZSIsIm1vZGVsQXJ0aWZhY3RzSW5mbyIsIndmIiwiQ2YiLCJFZiIsImluZGV4ZWREQiIsIm1vekluZGV4ZWREQiIsIndlYmtpdEluZGV4ZWREQiIsIm1zSW5kZXhlZERCIiwic2hpbUluZGV4ZWREQiIsIlJmIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwiSWYiLCJtb2RlbFBhdGgiLCJkYXRhYmFzZUFjdGlvbiIsIm9wZW4iLCJvbnVwZ3JhZGVuZWVkZWQiLCJvbnN1Y2Nlc3MiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwiY2xvc2UiLCJtb2RlbEFydGlmYWN0cyIsIm9uZXJyb3IiLCJvbmNvbXBsZXRlIiwicHV0IiwiVVJMX1NDSEVNRSIsImtmIiwic3RhcnRzV2l0aCIsIlNmIiwibGlzdE1vZGVscyIsImdldEFsbCIsIkFmIiwiRGYiLCJUZiIsIk5mIiwiRmYiLCJfZiIsIk9mIiwiTWYiLCJpbmZvIiwidG9wb2xvZ3kiLCJtb2RlbE1ldGFkYXRhIiwiQmYiLCJQZiIsImxvY2FsU3RvcmFnZSIsIkxTIiwic2V0SXRlbSIsImZvcm1hdCIsImdlbmVyYXRlZEJ5IiwiY29udmVydGVkQnkiLCJ1c2VyRGVmaW5lZE1ldGFkYXRhIiwicmVtb3ZlSXRlbSIsImdldEl0ZW0iLCJieXRlT2Zmc2V0IiwiTGYiLCJXZiIsIkdmIiwiSGYiLCJtb2RlbFRvcG9sb2d5RmlsZU5hbWUiLCJ3ZWlnaHREYXRhRmlsZU5hbWUiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJwYXRocyIsIndlaWdodHMiLCJ3ZWlnaHRzTWFuaWZlc3QiLCJqc29uQW5jaG9yIiwiZG93bmxvYWQiLCJocmVmIiwiZGlzcGF0Y2hFdmVudCIsIk1vdXNlRXZlbnQiLCJ3ZWlnaHREYXRhQW5jaG9yIiwicWYiLCJmaWxlcyIsIkZpbGVSZWFkZXIiLCJvbmxvYWQiLCJ0YXJnZXQiLCJjaGVja01hbmlmZXN0QW5kV2VpZ2h0RmlsZXMiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInJlYWRBc1RleHQiLCJLZiIsImpmIiwiZmV0Y2hGdW5jIiwicmVxdWVzdEluaXQiLCJpc0JpbmFyeSIsIm9uUHJvZ3Jlc3MiLCJhcnJheUJ1ZmZlciIsIlhmIiwibWFuaWZlc3RFbnRyeSIsImdyb3VwT2Zmc2V0Iiwic2l6ZUJ5dGVzIiwiWWYiLCJERUZBVUxUX01FVEhPRCIsIndlaWdodFBhdGhQcmVmaXgiLCJib2R5IiwiRm9ybURhdGEiLCJhcHBlbmQiLCJvayIsInJlc3BvbnNlcyIsInN0YXR1cyIsImpzb24iLCJsb2FkV2VpZ2h0cyIsImxhc3RJbmRleE9mIiwiVVJMX1NDSEVNRV9SRUdFWCIsIiRmIiwibWF0Y2giLCJRZiIsIkpmIiwibmQiLCJaZiIsInRkIiwic2F2ZUhhbmRsZXIiLCJlZCIsImJyb3dzZXJGaWxlcyIsImJyb3dzZXJIVFRQUmVxdWVzdCIsImNvbmNhdGVuYXRlQXJyYXlCdWZmZXJzIiwiZGVjb2RlV2VpZ2h0cyIsImVuY29kZVdlaWdodHMiLCJncm91cCIsInNwZWNzIiwiZnJvbU1lbW9yeSIsInRyYWluaW5nQ29uZmlnIiwiZ2V0TW9kZWxBcnRpZmFjdHNJbmZvRm9ySlNPTiIsImh0dHAiLCJpc0hUVFBTY2hlbWUiLCJ3ZWlnaHRzTG9hZGVyRmFjdG9yeSIsIndpdGhTYXZlSGFuZGxlciIsImNvcHlNb2RlbCIsIm1vdmVNb2RlbCIsInJkIiwiY29uZnVzaW9uTWF0cml4XyIsIm9kIiwiY29uZnVzaW9uTWF0cml4IiwiYWQiLCJmcm9tUGl4ZWxzXyIsIkltYWdlRGF0YSIsInJlYWR5U3RhdGUiLCJnZXRJbWFnZURhdGEiLCJ0b1BpeGVscyIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwicHV0SW1hZ2VEYXRhIiwiZnJvbVBpeGVscyIsInNkIiwiZ2V0Q2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiZnJvbUNvbmZpZyIsInVkIiwiY2xhc3NOYW1lTWFwIiwiZ2V0TWFwIiwicmVnaXN0ZXIiLCJjZCIsImxkIiwiU2VyaWFsaXphYmxlIiwiU2VyaWFsaXphdGlvbk1hcCIsInJlZ2lzdGVyQ2xhc3MiLCJkZCIsInBkIiwidmQiLCJtZCIsIlRFU1RfRVBTSUxPTl9GTE9BVDE2IiwiZXhwZWN0QXJyYXlzQ2xvc2UiLCJ0ZXN0RXBzaWxvbiIsImV4cGVjdFByb21pc2VUb0ZhaWwiLCJmYWlsIiwiZXhwZWN0QXJyYXlzRXF1YWwiLCJleHBlY3ROdW1iZXJzQ2xvc2UiLCJleHBlY3RWYWx1ZXNJblJhbmdlIiwiZXhwZWN0QXJyYXlCdWZmZXJzRXF1YWwiLCJleHBlY3QiLCJ0b0VxdWFsIiwiZ2QiLCJ5ZCIsImdwZ3B1X3V0aWwiLCJ3ZWJnbF91dGlsIiwiZm9yY2VIYWxmRmxvYXQiLCJNYXRoQmFja2VuZFdlYkdMIiwic2V0V2ViR0xDb250ZXh0IiwiR1BHUFVDb250ZXh0IiwieGQiLCJtaW5pbWl6ZSIsImNvbXB1dGVHcmFkaWVudHMiLCJhcHBseUdyYWRpZW50cyIsIml0ZXJhdGlvbnNfIiwiaW5jcmVtZW50SXRlcmF0aW9ucyIsIml0ZXJhdGlvbnMiLCJzYXZlSXRlcmF0aW9ucyIsImdldFdlaWdodHMiLCJzZXRXZWlnaHRzIiwiZXh0cmFjdEl0ZXJhdGlvbnMiLCJiZCIsImxlYXJuaW5nUmF0ZSIsInJobyIsImFjY3VtdWxhdGVkR3JhZHMiLCJhY2N1bXVsYXRlZFVwZGF0ZXMiLCJvcmlnaW5hbE5hbWUiLCJnZXRDb25maWciLCJ3ZCIsImluaXRpYWxBY2N1bXVsYXRvclZhbHVlIiwiQ2QiLCJiZXRhMSIsImJldGEyIiwiYWNjdW11bGF0ZWRGaXJzdE1vbWVudCIsImFjY3VtdWxhdGVkU2Vjb25kTW9tZW50IiwiYWNjQmV0YTEiLCJhY2NCZXRhMiIsIkVkIiwiZGVjYXkiLCJhY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybSIsIml0ZXJhdGlvbiIsIlJkIiwic2V0TGVhcm5pbmdSYXRlIiwiSWQiLCJtb21lbnR1bSIsInVzZU5lc3Rlcm92IiwiYWNjdW11bGF0aW9ucyIsInNldE1vbWVudHVtIiwia2QiLCJhY2N1bXVsYXRlZE1lYW5TcXVhcmVzIiwiYWNjdW11bGF0ZWRNb21lbnRzIiwiYWNjdW11bGF0ZWRNZWFuR3JhZHMiLCJjZW50ZXJlZCIsIlNkIiwic2dkIiwicm1zcHJvcCIsImFkYW0iLCJhZGFkZWx0YSIsImFkYW1heCIsImFkYWdyYWQiLCJBZCIsIkRkIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwic2V0SW1tZWRpYXRlIiwiVGQiLCJwNSIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiYmFzZTY0IiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJ1bmRlZmluZWQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwiZnJvbVN0cmluZyIsIm9iaiIsImlzQnVmZmVyIiwiY2hlY2tlZCIsImNvcHkiLCJ2YWwiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwic3RhcnQiLCJlbmQiLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiYXJyYXlJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiYnVmIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5IiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJTbG93QnVmZmVyIiwiYWxsb2MiLCJJTlNQRUNUX01BWF9CWVRFUyIsImZvbyIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJhbGxvY1Vuc2FmZVNsb3ciLCJfaXNCdWZmZXIiLCJjb21wYXJlIiwibGlzdCIsInBvcyIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJ0b0pTT04iLCJfYXJyIiwicmV0Iiwib3V0IiwidG9IZXgiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwib2JqZWN0V3JpdGVVSW50MTYiLCJsaXR0bGVFbmRpYW4iLCJvYmplY3RXcml0ZVVJbnQzMiIsImNoZWNrSUVFRTc1NCIsIndyaXRlRmxvYXQiLCJub0Fzc2VydCIsIndyaXRlRG91YmxlIiwibmV3QnVmIiwic2xpY2VMZW4iLCJyZWFkVUludExFIiwicmVhZFVJbnRCRSIsInJlYWRVSW50OCIsInJlYWRVSW50MTZMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVSW50MzJCRSIsInJlYWRJbnRMRSIsInJlYWRJbnRCRSIsInJlYWRJbnQ4IiwicmVhZEludDE2TEUiLCJyZWFkSW50MTZCRSIsInJlYWRJbnQzMkxFIiwicmVhZEludDMyQkUiLCJyZWFkRmxvYXRMRSIsInJlYWRGbG9hdEJFIiwicmVhZERvdWJsZUxFIiwicmVhZERvdWJsZUJFIiwid3JpdGVVSW50TEUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVUludDgiLCJ3cml0ZVVJbnQxNkxFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVUludDMyTEUiLCJ3cml0ZVVJbnQzMkJFIiwid3JpdGVJbnRMRSIsImxpbWl0Iiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJjb2RlIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJ0b0J5dGVBcnJheSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsImI2NCIsImxlbnMiLCJnZXRMZW5zIiwidmFsaWRMZW4iLCJwbGFjZUhvbGRlcnNMZW4iLCJ0bXAiLCJBcnIiLCJfYnl0ZUxlbmd0aCIsImN1ckJ5dGUiLCJyZXZMb29rdXAiLCJleHRyYUJ5dGVzIiwicGFydHMiLCJsZW4yIiwiZW5jb2RlQ2h1bmsiLCJsb29rdXAiLCJ0cmlwbGV0VG9CYXNlNjQiLCJudW0iLCJpc0xFIiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJuQml0cyIsIkxOMiIsIlRpbWVvdXQiLCJjbGVhckZuIiwiX2lkIiwiX2NsZWFyRm4iLCJzY29wZSIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsInVucmVmIiwicmVmIiwiZW5yb2xsIiwiaXRlbSIsIm1zZWNzIiwiX2lkbGVUaW1lb3V0SWQiLCJfaWRsZVRpbWVvdXQiLCJ1bmVucm9sbCIsIl91bnJlZkFjdGl2ZSIsImFjdGl2ZSIsIl9vblRpbWVvdXQiLCJjbGVhckltbWVkaWF0ZSIsInJlZ2lzdGVySW1tZWRpYXRlIiwiaHRtbCIsImNoYW5uZWwiLCJtZXNzYWdlUHJlZml4Iiwib25HbG9iYWxNZXNzYWdlIiwibmV4dEhhbmRsZSIsInRhc2tzQnlIYW5kbGUiLCJjdXJyZW50bHlSdW5uaW5nQVRhc2siLCJkb2MiLCJhdHRhY2hUbyIsImdldFByb3RvdHlwZU9mIiwiaGFuZGxlIiwicnVuSWZQcmVzZW50IiwicG9zdE1lc3NhZ2UiLCJpbXBvcnRTY3JpcHRzIiwicG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyIsIm9sZE9uTWVzc2FnZSIsIm9ubWVzc2FnZSIsImNhblVzZVBvc3RNZXNzYWdlIiwiTWVzc2FnZUNoYW5uZWwiLCJwb3J0MSIsImV2ZW50IiwicG9ydDIiLCJkb2N1bWVudEVsZW1lbnQiLCJzY3JpcHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZW1vdmVDaGlsZCIsImFwcGVuZENoaWxkIiwiYXR0YWNoRXZlbnQiLCJjYWxsYmFjayIsInRhc2siLCJpc0NvbXBsZXgiLCJUZW5zb3IiLCJ0b1ZlY3RvciIsImNyZWF0ZVZlY3RvciIsImNvbXBsZXhFcXVhbHMiLCJyZWFsQ2hlY2siLCJpbWFnQ2hlY2siLCJtdWx0IiwiY29uc3RyYWluIiwibG93IiwiaGlnaCIsInNxIiwiaW0iLCJudW1Sb3dzIiwibnVtQ29scyIsInJhbmRvbUdhdXNzaWFuIiwidGVuc29ycyIsIm51bU9yU2l6ZVNwbGl0cyIsInRhcnJheSIsImFkZFJvd3MiLCJyMSIsInIyIiwicm93MSIsInJvdzIiLCJmaW5hbCIsInN1YlJvd3MiLCJzd2FwUm93cyIsImZpcnN0Iiwic2Vjb25kIiwibWlkZGxlIiwibXVsUm93IiwiY3JlYXRlVGVuc29yIl0sIm1hcHBpbmdzIjoib0JBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBMERmLE9BckRBRixFQUFvQlEsRUFBSUYsRUFHeEJOLEVBQW9CUyxFQUFJVixFQUd4QkMsRUFBb0JVLEVBQUksU0FBU1IsRUFBU1MsRUFBTUMsR0FDM0NaLEVBQW9CYSxFQUFFWCxFQUFTUyxJQUNsQ0csT0FBT0MsZUFBZWIsRUFBU1MsRUFBTSxDQUFFSyxZQUFZLEVBQU1DLElBQUtMLEtBS2hFWixFQUFvQmtCLEVBQUksU0FBU2hCLEdBQ1gsb0JBQVhpQixRQUEwQkEsT0FBT0MsYUFDMUNOLE9BQU9DLGVBQWViLEVBQVNpQixPQUFPQyxZQUFhLENBQUVDLE1BQU8sV0FFN0RQLE9BQU9DLGVBQWViLEVBQVMsYUFBYyxDQUFFbUIsT0FB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LE9BQU8zTixFQUFFb1AsUUFBUXpCLElBWU4zRyxFQUFTLFNBQXNCaEgsRUFBYW0wQixHQUN2RCxHQUFJbjBCLEVBQUVvQyxPQUFTLEVBQ2IsTUFBTSxJQUFJcUIsTUFBTSx5Q0FHbEIsSUFBTXBDLEVBQUlyQixFQUFFLEdBQ051RixFQUFJdkYsRUFBRTZHLE1BQU0sR0FFbEIsT0FBT3hGLEVBQUUyRixPQUFPekIsRUFBRzR1QixJQVVSM2lCLEVBQVUsU0FDckJ4UixFQUNBbTBCLEdBRUEsT0FBT24wQixFQUFFd1IsUUFBUTJpQixJQVdOdHRCLEVBQVEsU0FDbkI3RyxFQUNBZ3dELEVBQ0F0aUQsR0FFQSxPQUFPMU4sRUFBRTZHLE1BQU1tcEQsRUFBT3RpRCxJQWNYdkosRUFBUSxTQUNuQm5FLEVBQ0E2bEYsRUFDQTF4RCxHQUVBLE9BQU9uMEIsRUFBRW1FLE1BQU0waEYsRUFBaUIxeEQsSUFVckIxaUIsRUFBUSxTQUNuQm0wRSxFQUNBenhELEdBRUEsT0FBTyxFQUFPMWlCLE1BQU1tMEUsRUFBU3p4RCxJQVVsQnppQixFQUFVLFNBQXVCMVIsRUFBV20wQixHQUN2RCxPQUFPbjBCLEVBQUUwUixRQUFReWlCLElDbmlCbkJvL0MsR0FBRzd5RSxVQUFVaW1GLGFGMjdCZSxTQUMxQnZoRixHQUVBLE9BQU8sSUFBSSxFQUFPQSxJRTU3QlosSUFBQWtaLEVBQUEiLCJmaWxlIjoibnVtZXJvLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEzKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbnZhciB0PWZ1bmN0aW9uKGUsbil7cmV0dXJuKHQ9T2JqZWN0LnNldFByb3RvdHlwZU9mfHx7X19wcm90b19fOltdfWluc3RhbmNlb2YgQXJyYXkmJmZ1bmN0aW9uKHQsZSl7dC5fX3Byb3RvX189ZX18fGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuIGluIGUpZS5oYXNPd25Qcm9wZXJ0eShuKSYmKHRbbl09ZVtuXSl9KShlLG4pfTtmdW5jdGlvbiBlKGUsbil7ZnVuY3Rpb24gcigpe3RoaXMuY29uc3RydWN0b3I9ZX10KGUsbiksZS5wcm90b3R5cGU9bnVsbD09PW4/T2JqZWN0LmNyZWF0ZShuKTooci5wcm90b3R5cGU9bi5wcm90b3R5cGUsbmV3IHIpfWZ1bmN0aW9uIG4odCxlLG4scil7cmV0dXJuIG5ldyhufHwobj1Qcm9taXNlKSkoKGZ1bmN0aW9uKG8sYSl7ZnVuY3Rpb24gaSh0KXt0cnl7dShyLm5leHQodCkpfWNhdGNoKHQpe2EodCl9fWZ1bmN0aW9uIHModCl7dHJ5e3Uoci50aHJvdyh0KSl9Y2F0Y2godCl7YSh0KX19ZnVuY3Rpb24gdSh0KXt0LmRvbmU/byh0LnZhbHVlKTpuZXcgbigoZnVuY3Rpb24oZSl7ZSh0LnZhbHVlKX0pKS50aGVuKGkscyl9dSgocj1yLmFwcGx5KHQsZXx8W10pKS5uZXh0KCkpfSkpfWZ1bmN0aW9uIHIodCxlKXt2YXIgbixyLG8sYSxpPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJm9bMF0pdGhyb3cgb1sxXTtyZXR1cm4gb1sxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBhPXtuZXh0OnMoMCksdGhyb3c6cygxKSxyZXR1cm46cygyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoYVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxhO2Z1bmN0aW9uIHMoYSl7cmV0dXJuIGZ1bmN0aW9uKHMpe3JldHVybiBmdW5jdGlvbihhKXtpZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7aTspdHJ5e2lmKG49MSxyJiYobz0yJmFbMF0/ci5yZXR1cm46YVswXT9yLnRocm93fHwoKG89ci5yZXR1cm4pJiZvLmNhbGwociksMCk6ci5uZXh0KSYmIShvPW8uY2FsbChyLGFbMV0pKS5kb25lKXJldHVybiBvO3N3aXRjaChyPTAsbyYmKGE9WzImYVswXSxvLnZhbHVlXSksYVswXSl7Y2FzZSAwOmNhc2UgMTpvPWE7YnJlYWs7Y2FzZSA0OnJldHVybiBpLmxhYmVsKysse3ZhbHVlOmFbMV0sZG9uZTohMX07Y2FzZSA1OmkubGFiZWwrKyxyPWFbMV0sYT1bMF07Y29udGludWU7Y2FzZSA3OmE9aS5vcHMucG9wKCksaS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShvPShvPWkudHJ5cykubGVuZ3RoPjAmJm9bby5sZW5ndGgtMV0pJiYoNj09PWFbMF18fDI9PT1hWzBdKSl7aT0wO2NvbnRpbnVlfWlmKDM9PT1hWzBdJiYoIW98fGFbMV0+b1swXSYmYVsxXTxvWzNdKSl7aS5sYWJlbD1hWzFdO2JyZWFrfWlmKDY9PT1hWzBdJiZpLmxhYmVsPG9bMV0pe2kubGFiZWw9b1sxXSxvPWE7YnJlYWt9aWYobyYmaS5sYWJlbDxvWzJdKXtpLmxhYmVsPW9bMl0saS5vcHMucHVzaChhKTticmVha31vWzJdJiZpLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWV9YT1lLmNhbGwodCxpKX1jYXRjaCh0KXthPVs2LHRdLHI9MH1maW5hbGx5e249bz0wfWlmKDUmYVswXSl0aHJvdyBhWzFdO3JldHVybnt2YWx1ZTphWzBdP2FbMV06dm9pZCAwLGRvbmU6ITB9fShbYSxzXSl9fX12YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5nbG9iYWw9dCx0aGlzLmZsYWdzPXt9LHRoaXMuZmxhZ1JlZ2lzdHJ5PXt9LHRoaXMudXJsRmxhZ3M9e30sdGhpcy5wb3B1bGF0ZVVSTEZsYWdzKCl9cmV0dXJuIHQucHJvdG90eXBlLnNldFBsYXRmb3JtPWZ1bmN0aW9uKHQsZSl7bnVsbCE9dGhpcy5wbGF0Zm9ybSYmY29uc29sZS53YXJuKFwiUGxhdGZvcm0gXCIrdGhpcy5wbGF0Zm9ybU5hbWUrXCIgaGFzIGFscmVhZHkgYmVlbiBzZXQuIE92ZXJ3cml0aW5nIHRoZSBwbGF0Zm9ybSB3aXRoIFwiK2UrXCIuXCIpLHRoaXMucGxhdGZvcm1OYW1lPXQsdGhpcy5wbGF0Zm9ybT1lfSx0LnByb3RvdHlwZS5yZWdpc3RlckZsYWc9ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMuZmxhZ1JlZ2lzdHJ5W3RdPXtldmFsdWF0aW9uRm46ZSxzZXRIb29rOm59LG51bGwhPXRoaXMudXJsRmxhZ3NbdF0pe3ZhciByPXRoaXMudXJsRmxhZ3NbdF07Y29uc29sZS53YXJuKFwiU2V0dGluZyBmZWF0dXJlIG92ZXJyaWRlIGZyb20gVVJMIFwiK3QrXCI6IFwiK3IrXCIuXCIpLHRoaXMuc2V0KHQscil9fSx0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW4gdGhpcy5mbGFncz90aGlzLmZsYWdzW3RdOih0aGlzLmZsYWdzW3RdPXRoaXMuZXZhbHVhdGVGbGFnKHQpLHRoaXMuZmxhZ3NbdF0pfSx0LnByb3RvdHlwZS5nZXROdW1iZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0KHQpfSx0LnByb3RvdHlwZS5nZXRCb29sPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdldCh0KX0sdC5wcm90b3R5cGUuZ2V0RmxhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mbGFnc30sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZmVhdHVyZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmxhZ3N9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09dGhpcy5mbGFnUmVnaXN0cnlbdF0pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBmbGFnIFwiK3QrXCIgYXMgaXQgaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQuXCIpO3RoaXMuZmxhZ3NbdF09ZSxudWxsIT10aGlzLmZsYWdSZWdpc3RyeVt0XS5zZXRIb29rJiZ0aGlzLmZsYWdSZWdpc3RyeVt0XS5zZXRIb29rKGUpfSx0LnByb3RvdHlwZS5ldmFsdWF0ZUZsYWc9ZnVuY3Rpb24odCl7aWYobnVsbD09dGhpcy5mbGFnUmVnaXN0cnlbdF0pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGV2YWx1YXRlIGZsYWcgJ1wiK3QrXCInOiBubyBldmFsdWF0aW9uIGZ1bmN0aW9uIGZvdW5kLlwiKTtyZXR1cm4gdGhpcy5mbGFnUmVnaXN0cnlbdF0uZXZhbHVhdGlvbkZuKCl9LHQucHJvdG90eXBlLnNldEZsYWdzPWZ1bmN0aW9uKHQpe3RoaXMuZmxhZ3M9T2JqZWN0LmFzc2lnbih7fSx0KX0sdC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmZsYWdzPXt9LHRoaXMudXJsRmxhZ3M9e30sdGhpcy5wb3B1bGF0ZVVSTEZsYWdzKCl9LHQucHJvdG90eXBlLnBvcHVsYXRlVVJMRmxhZ3M9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHZvaWQgMCE9PXRoaXMuZ2xvYmFsJiZ2b2lkIDAhPT10aGlzLmdsb2JhbC5sb2NhdGlvbiYmdm9pZCAwIT09dGhpcy5nbG9iYWwubG9jYXRpb24uc2VhcmNoKXt2YXIgZSxuLHI9KGU9dGhpcy5nbG9iYWwubG9jYXRpb24uc2VhcmNoLG49e30sZS5yZXBsYWNlKC9bPyZdKFtePT8mXSspKD86PShbXiZdKikpPy9nLChmdW5jdGlvbih0KXtmb3IodmFyIGU9W10scj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspZVtyLTFdPWFyZ3VtZW50c1tyXTtyZXR1cm4gYShuLGVbMF0sZVsxXSksZS5qb2luKFwiPVwiKX0pKSxuKTtpZihcInRmanNmbGFnc1wiaW4gcilyLnRmanNmbGFncy5zcGxpdChcIixcIikuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49ZS5zcGxpdChcIjpcIikscj1uWzBdLG89blsxXTt0LnVybEZsYWdzW3JdPWZ1bmN0aW9uKHQsZSl7aWYoXCJ0cnVlXCI9PT0oZT1lLnRvTG93ZXJDYXNlKCkpfHxcImZhbHNlXCI9PT1lKXJldHVyblwidHJ1ZVwiPT09ZTtpZihcIlwiKyArZT09PWUpcmV0dXJuK2U7dGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHBhcnNlIHZhbHVlIGZsYWcgdmFsdWUgXCIrZStcIiBmb3IgZmxhZyBcIit0K1wiLlwiKX0ocixvKX0pKX19LHR9KCk7ZnVuY3Rpb24gYSh0LGUsbil7dFtkZWNvZGVVUklDb21wb25lbnQoZSldPWRlY29kZVVSSUNvbXBvbmVudChufHxcIlwiKX1mdW5jdGlvbiBpKCl7cmV0dXJuIHN9dmFyIHM9bnVsbDt2YXIgdT1uZXcgTWFwLGM9bmV3IE1hcDtmdW5jdGlvbiBsKHQsZSl7dmFyIG49Zyh0LGUpO3JldHVybiB1LmdldChuKX1mdW5jdGlvbiBoKHQpe3JldHVybiBjLmdldCh0KX1mdW5jdGlvbiBmKHQpe2Zvcih2YXIgZT11LmVudHJpZXMoKSxuPVtdOzspe3ZhciByPWUubmV4dCgpLG89ci5kb25lLGE9ci52YWx1ZTtpZihvKWJyZWFrO3ZhciBpPWFbMF0scz1hWzFdO2kuc3BsaXQoXCJfXCIpWzBdPT09dCYmbi5wdXNoKHMpfXJldHVybiBufWZ1bmN0aW9uIGQodCl7dmFyIGU9dC5rZXJuZWxOYW1lLG49dC5iYWNrZW5kTmFtZSxyPWcoZSxuKTtpZih1LmhhcyhyKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUga2VybmVsICdcIitlK1wiJyBmb3IgYmFja2VuZCAnXCIrbitcIicgaXMgYWxyZWFkeSByZWdpc3RlcmVkXCIpO3Uuc2V0KHIsdCl9ZnVuY3Rpb24gcCh0KXt2YXIgZT10Lmtlcm5lbE5hbWU7Yy5oYXMoZSkmJmNvbnNvbGUud2FybihcIk92ZXJyaWRpbmcgdGhlIGdyYWRpZW50IGZvciAnXCIrZStcIidcIiksYy5zZXQoZSx0KX1mdW5jdGlvbiB2KHQsZSl7dmFyIG49Zyh0LGUpO2lmKCF1LmhhcyhuKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUga2VybmVsICdcIit0K1wiJyBmb3IgYmFja2VuZCAnXCIrZStcIicgaXMgbm90IHJlZ2lzdGVyZWRcIik7dS5kZWxldGUobil9ZnVuY3Rpb24gbSh0KXtpZighYy5oYXModCkpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGdyYWRpZW50ICdcIit0K1wiJyBmb3IgYmFja2VuZCBpcyBub3QgcmVnaXN0ZXJlZFwiKTtjLmRlbGV0ZSh0KX1mdW5jdGlvbiBnKHQsZSl7cmV0dXJuIGUrXCJfXCIrdH1mdW5jdGlvbiB5KHQpe2Zvcih2YXIgZT10Lmxlbmd0aCxuPTAscj0wO2U+MDspcj1NYXRoLnJhbmRvbSgpKmV8MCxuPXRbLS1lXSx0W2VdPXRbcl0sdFtyXT1ufWZ1bmN0aW9uIHgodCxlLG4pe3JldHVybiBNYXRoLm1heCh0LE1hdGgubWluKGUsbikpfWZ1bmN0aW9uIGIodCl7cmV0dXJuIHQlMj09MD90OnQrMX1mdW5jdGlvbiB3KHQpe2Zvcih2YXIgZT0wLG49MDtuPHQubGVuZ3RoO24rKyllKz10W25dO3JldHVybiBlfWZ1bmN0aW9uIEModCxlKXtpZighdCl0aHJvdyBuZXcgRXJyb3IoXCJzdHJpbmdcIj09dHlwZW9mIGU/ZTplKCkpfWZ1bmN0aW9uIEUodCxlLG4pe3ZvaWQgMD09PW4mJihuPVwiXCIpLEMoUyh0LGUpLChmdW5jdGlvbigpe3JldHVybiBuK1wiIFNoYXBlcyBcIit0K1wiIGFuZCBcIitlK1wiIG11c3QgbWF0Y2hcIn0pKX1mdW5jdGlvbiBSKHQpe0MobnVsbCE9dCwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBpbnB1dCB0byB0aGUgdGVuc29yIGNvbnN0cnVjdG9yIG11c3QgYmUgYSBub24tbnVsbCB2YWx1ZS5cIn0pKX1mdW5jdGlvbiBJKHQsZSxuKXtpZih2b2lkIDA9PT1lJiYoZT1bXSksdm9pZCAwPT09biYmKG49ITEpLG51bGw9PWUmJihlPVtdKSxBcnJheS5pc0FycmF5KHQpfHxWKHQpJiYhbilmb3IodmFyIHI9MDtyPHQubGVuZ3RoOysrcilJKHRbcl0sZSxuKTtlbHNlIGUucHVzaCh0KTtyZXR1cm4gZX1mdW5jdGlvbiBrKHQpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gMTtmb3IodmFyIGU9dFswXSxuPTE7bjx0Lmxlbmd0aDtuKyspZSo9dFtuXTtyZXR1cm4gZX1mdW5jdGlvbiBTKHQsZSl7aWYodD09PWUpcmV0dXJuITA7aWYobnVsbD09dHx8bnVsbD09ZSlyZXR1cm4hMTtpZih0Lmxlbmd0aCE9PWUubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKWlmKHRbbl0hPT1lW25dKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIEEodCl7cmV0dXJuIHQlMT09MH1mdW5jdGlvbiBEKHQpe2lmKG51bGwhPU1hdGgudGFuaClyZXR1cm4gTWF0aC50YW5oKHQpO2lmKHQ9PT0xLzApcmV0dXJuIDE7aWYodD09PS0xLzApcmV0dXJuLTE7dmFyIGU9TWF0aC5leHAoMip0KTtyZXR1cm4oZS0xKS8oZSsxKX1mdW5jdGlvbiBUKHQpe3ZhciBlPU1hdGguY2VpbChNYXRoLnNxcnQodCkpO3JldHVybltlLE1hdGguY2VpbCh0L2UpXX1mdW5jdGlvbiBOKHQsZSl7cmV0dXJuIGU8PXQubGVuZ3RoP3Q6dCtcIiBcIi5yZXBlYXQoZS10Lmxlbmd0aCl9ZnVuY3Rpb24gRih0LGUsbil7cmV0dXJuIHZvaWQgMD09PWUmJihlPWZ1bmN0aW9uKHQpe3JldHVybiAwfSksbmV3IFByb21pc2UoKGZ1bmN0aW9uKHIsbyl7dmFyIGE9MCxpPWZ1bmN0aW9uKCl7aWYodCgpKXIoKTtlbHNle2ErKzt2YXIgcz1lKGEpO251bGwhPW4mJmE+PW4/bygpOnNldFRpbWVvdXQoaSxzKX19O2koKX0pKX1mdW5jdGlvbiBfKHQsZSl7Zm9yKHZhciBuPTEscj0tMSxvPTA7bzx0Lmxlbmd0aDsrK28paWYodFtvXT49MCluKj10W29dO2Vsc2UgaWYoLTE9PT10W29dKXtpZigtMSE9PXIpdGhyb3cgRXJyb3IoXCJTaGFwZXMgY2FuIG9ubHkgaGF2ZSAxIGltcGxpY2l0IHNpemUuIEZvdW5kIC0xIGF0IGRpbSBcIityK1wiIGFuZCBkaW0gXCIrbyk7cj1vfWVsc2UgaWYodFtvXTwwKXRocm93IEVycm9yKFwiU2hhcGVzIGNhbiBub3QgYmUgPCAwLiBGb3VuZCBcIit0W29dK1wiIGF0IGRpbSBcIitvKTtpZigtMT09PXIpe2lmKGU+MCYmZSE9PW4pdGhyb3cgRXJyb3IoXCJTaXplKFwiK2UrXCIpIG11c3QgbWF0Y2ggdGhlIHByb2R1Y3Qgb2Ygc2hhcGUgXCIrdCk7cmV0dXJuIHR9aWYoMD09PW4pdGhyb3cgRXJyb3IoXCJDYW5ub3QgaW5mZXIgdGhlIG1pc3Npbmcgc2l6ZSBpbiBbXCIrdCtcIl0gd2hlbiB0aGVyZSBhcmUgMCBlbGVtZW50c1wiKTtpZihlJW4hPTApdGhyb3cgRXJyb3IoXCJUaGUgaW1wbGljaXQgc2hhcGUgY2FuJ3QgYmUgYSBmcmFjdGlvbmFsIG51bWJlci4gR290IFwiK2UrXCIgLyBcIituKTt2YXIgYT10LnNsaWNlKCk7cmV0dXJuIGFbcl09ZS9uLGF9ZnVuY3Rpb24gTyh0LGUpe3ZhciBuPWUubGVuZ3RoO3JldHVybiBDKCh0PW51bGw9PXQ/ZS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV9KSk6W10uY29uY2F0KHQpKS5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuIHQ+PS1uJiZ0PG59KSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJBbGwgdmFsdWVzIGluIGF4aXMgcGFyYW0gbXVzdCBiZSBpbiByYW5nZSBbLVwiK24rXCIsIFwiK24rXCIpIGJ1dCBnb3QgYXhpcyBcIit0fSkpLEModC5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuIEEodCl9KSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJBbGwgdmFsdWVzIGluIGF4aXMgcGFyYW0gbXVzdCBiZSBpbnRlZ2VycyBidXQgZ290IGF4aXMgXCIrdH0pKSx0Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9uK3Q6dH0pKX1mdW5jdGlvbiBNKHQsZSl7Zm9yKHZhciBuPVtdLHI9W10sbz1udWxsIT1lJiZBcnJheS5pc0FycmF5KGUpJiYwPT09ZS5sZW5ndGgsYT1udWxsPT1lfHxvP251bGw6TyhlLHQpLnNvcnQoKSxpPTAscz0wO3M8dC5sZW5ndGg7KytzKXtpZihudWxsIT1hKXtpZihhW2ldPT09cyYmMSE9PXRbc10pdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3Qgc3F1ZWV6ZSBheGlzIFwiK3MrXCIgc2luY2UgaXRzIGRpbSAnXCIrdFtzXStcIicgaXMgbm90IDFcIik7KG51bGw9PWFbaV18fGFbaV0+cykmJjE9PT10W3NdJiYobi5wdXNoKHRbc10pLHIucHVzaChzKSksYVtpXTw9cyYmaSsrfTEhPT10W3NdJiYobi5wdXNoKHRbc10pLHIucHVzaChzKSl9cmV0dXJue25ld1NoYXBlOm4sa2VwdERpbXM6cn19ZnVuY3Rpb24gQih0LGUpe3ZhciBuPW51bGw7aWYobnVsbD09dHx8XCJmbG9hdDMyXCI9PT10KW49bmV3IEZsb2F0MzJBcnJheShlKTtlbHNlIGlmKFwiaW50MzJcIj09PXQpbj1uZXcgSW50MzJBcnJheShlKTtlbHNle2lmKFwiYm9vbFwiIT09dCl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGEgdHlwZSBcIit0KTtuPW5ldyBVaW50OEFycmF5KGUpfXJldHVybiBufWZ1bmN0aW9uIFAodCxlKXt2YXIgbj1udWxsO2lmKG51bGw9PXR8fFwiZmxvYXQzMlwiPT09dCluPW5ldyBGbG9hdDMyQXJyYXkoZSk7ZWxzZSBpZihcImludDMyXCI9PT10KW49bmV3IEludDMyQXJyYXkoZSk7ZWxzZSBpZihcImJvb2xcIj09PXQpbj1uZXcgVWludDhBcnJheShlKTtlbHNle2lmKFwic3RyaW5nXCIhPT10KXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YSB0eXBlIFwiK3QpO249bmV3IEFycmF5KGUpfXJldHVybiBufWZ1bmN0aW9uIEwodCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rKyl7dmFyIHI9dFtuXTtpZihpc05hTihyKXx8IWlzRmluaXRlKHIpKXRocm93IEVycm9yKFwiQSB0ZW5zb3Igb2YgdHlwZSBcIitlK1wiIGJlaW5nIHVwbG9hZGVkIGNvbnRhaW5zIFwiK3IrXCIuXCIpfX1mdW5jdGlvbiBXKHQpe3JldHVyblwiYm9vbFwiPT09dHx8XCJjb21wbGV4NjRcIj09PXR8fFwiZmxvYXQzMlwiPT09dHx8XCJpbnQzMlwiPT09dHx8XCJzdHJpbmdcIj09PXR9ZnVuY3Rpb24gVSh0LGUpe3JldHVyblwiY29tcGxleDY0XCIhPT1lJiYoKFwiZmxvYXQzMlwiIT09ZXx8XCJjb21wbGV4NjRcIj09PXQpJiYoKFwiaW50MzJcIiE9PWV8fFwiZmxvYXQzMlwiPT09dHx8XCJjb21wbGV4NjRcIj09PXQpJiYoXCJib29sXCIhPT1lfHxcImJvb2xcIiE9PXQpKSl9ZnVuY3Rpb24gVih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheXx8dCBpbnN0YW5jZW9mIEludDMyQXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50OEFycmF5fWZ1bmN0aW9uIHoodCl7aWYoXCJmbG9hdDMyXCI9PT10fHxcImludDMyXCI9PT10KXJldHVybiA0O2lmKFwiY29tcGxleDY0XCI9PT10KXJldHVybiA4O2lmKFwiYm9vbFwiPT09dClyZXR1cm4gMTt0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGR0eXBlIFwiK3QpfWZ1bmN0aW9uIEcodCl7aWYobnVsbD09dClyZXR1cm4gMDt2YXIgZT0wO3JldHVybiB0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBlKz10Lmxlbmd0aH0pKSxlfWZ1bmN0aW9uIEgodCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHR8fHQgaW5zdGFuY2VvZiBTdHJpbmd9ZnVuY3Rpb24gcSh0KXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIHR9ZnVuY3Rpb24gSyh0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdH1mdW5jdGlvbiBqKHQpe3JldHVybiBBcnJheS5pc0FycmF5KHQpP2oodFswXSk6dCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheT9cImZsb2F0MzJcIjp0IGluc3RhbmNlb2YgSW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/XCJpbnQzMlwiOksodCk/XCJmbG9hdDMyXCI6SCh0KT9cInN0cmluZ1wiOnEodCk/XCJib29sXCI6XCJmbG9hdDMyXCJ9ZnVuY3Rpb24gWCh0KXtyZXR1cm4hISh0JiZ0LmNvbnN0cnVjdG9yJiZ0LmNhbGwmJnQuYXBwbHkpfWZ1bmN0aW9uIFkodCxlKXtmb3IodmFyIG49ZTtuPHQ7KytuKWlmKHQlbj09MClyZXR1cm4gbjtyZXR1cm4gdH1mdW5jdGlvbiAkKHQpe3ZhciBlPXQubGVuZ3RoO2lmKGU8MilyZXR1cm5bXTt2YXIgbj1uZXcgQXJyYXkoZS0xKTtuW2UtMl09dFtlLTFdO2Zvcih2YXIgcj1lLTM7cj49MDstLXIpbltyXT1uW3IrMV0qdFtyKzFdO3JldHVybiBufWZ1bmN0aW9uIFEodCxlLG4pe2lmKFwic3RyaW5nXCI9PT1lKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb252ZXJ0IGEgc3RyaW5nW10gdG8gYSBUeXBlZEFycmF5XCIpO2lmKEFycmF5LmlzQXJyYXkodCkmJih0PUkodCkpLG4mJkwodCxlKSxmdW5jdGlvbih0LGUpe3JldHVybiB0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5JiZcImZsb2F0MzJcIj09PWV8fHQgaW5zdGFuY2VvZiBJbnQzMkFycmF5JiZcImludDMyXCI9PT1lfHx0IGluc3RhbmNlb2YgVWludDhBcnJheSYmXCJib29sXCI9PT1lfSh0LGUpKXJldHVybiB0O2lmKG51bGw9PWV8fFwiZmxvYXQzMlwiPT09ZXx8XCJjb21wbGV4NjRcIj09PWUpcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkodCk7aWYoXCJpbnQzMlwiPT09ZSlyZXR1cm4gbmV3IEludDMyQXJyYXkodCk7aWYoXCJib29sXCI9PT1lKXtmb3IodmFyIHI9bmV3IFVpbnQ4QXJyYXkodC5sZW5ndGgpLG89MDtvPHIubGVuZ3RoOysrbykwIT09TWF0aC5yb3VuZCh0W29dKSYmKHJbb109MSk7cmV0dXJuIHJ9dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhIHR5cGUgXCIrZSl9ZnVuY3Rpb24gSih0LGUpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gZVswXTt2YXIgbj10LnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSkpO2lmKDA9PT1uKXJldHVybltdO2lmKG4hPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJbXCIrdCtcIl0gZG9lcyBub3QgbWF0Y2ggdGhlIGlucHV0IHNpemUuXCIpO3JldHVybiBmdW5jdGlvbiB0KGUsbixyKXt2YXIgbz1uZXcgQXJyYXk7aWYoMT09PW4ubGVuZ3RoKWZvcih2YXIgYT1uWzBdLGk9MDtpPGE7aSsrKW9baV09cltlK2ldO2Vsc2V7YT1uWzBdO3ZhciBzPW4uc2xpY2UoMSksdT1zLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSkpO2ZvcihpPTA7aTxhO2krKylvW2ldPXQoZStpKnUscyxyKX1yZXR1cm4gb30oMCx0LGUpfWZ1bmN0aW9uIFoodCxlKXtmb3IodmFyIG49dHQodCxlKSxyPTA7cjxuLmxlbmd0aDtyKyspbltyXT0xO3JldHVybiBufWZ1bmN0aW9uIHR0KHQsZSl7aWYobnVsbD09ZXx8XCJmbG9hdDMyXCI9PT1lfHxcImNvbXBsZXg2NFwiPT09ZSlyZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh0KTtpZihcImludDMyXCI9PT1lKXJldHVybiBuZXcgSW50MzJBcnJheSh0KTtpZihcImJvb2xcIj09PWUpcmV0dXJuIG5ldyBVaW50OEFycmF5KHQpO3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YSB0eXBlIFwiK2UpfWZ1bmN0aW9uIGV0KCl7cmV0dXJuIGkoKS5wbGF0Zm9ybS5ub3coKX1mdW5jdGlvbiBudCh0KXt0LmZvckVhY2goKGZ1bmN0aW9uKGUpe0MoTnVtYmVyLmlzSW50ZWdlcihlKSYmZT49MCwoZnVuY3Rpb24oKXtyZXR1cm5cIlRlbnNvciBtdXN0IGhhdmUgYSBzaGFwZSBjb21wcmlzZWQgb2YgcG9zaXRpdmUgaW50ZWdlcnMgYnV0IGdvdCBzaGFwZSBbXCIrdCtcIl0uXCJ9KSl9KSl9ZnVuY3Rpb24gcnQodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9XCJ1dGYtOFwiKSxlPWV8fFwidXRmLThcIixpKCkucGxhdGZvcm0uZW5jb2RlKHQsZSl9ZnVuY3Rpb24gb3QodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9XCJ1dGYtOFwiKSxlPWV8fFwidXRmLThcIixpKCkucGxhdGZvcm0uZGVjb2RlKHQsZSl9ZnVuY3Rpb24gYXQodCxlLG4pe2lmKDA9PT1lKXJldHVybiAwO2lmKDE9PT1lKXJldHVybiB0WzBdO2Zvcih2YXIgcj10W3QubGVuZ3RoLTFdLG89MDtvPHQubGVuZ3RoLTE7KytvKXIrPW5bb10qdFtvXTtyZXR1cm4gcn1mdW5jdGlvbiBpdCh0LGUsbil7aWYoMD09PWUpcmV0dXJuW107aWYoMT09PWUpcmV0dXJuW3RdO2Zvcih2YXIgcj1uZXcgQXJyYXkoZSksbz0wO288ci5sZW5ndGgtMTsrK28pcltvXT1NYXRoLmZsb29yKHQvbltvXSksdC09cltvXSpuW29dO3JldHVybiByW3IubGVuZ3RoLTFdPXQscn12YXIgc3Q9T2JqZWN0LmZyZWV6ZSh7c2h1ZmZsZTp5LGNsYW1wOngsbmVhcmVzdExhcmdlckV2ZW46YixzdW06dyxyYW5kVW5pZm9ybTpmdW5jdGlvbih0LGUpe3ZhciBuPU1hdGgucmFuZG9tKCk7cmV0dXJuIGUqbisoMS1uKSp0fSxkaXN0U3F1YXJlZDpmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj0wLHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG89TnVtYmVyKHRbcl0pLU51bWJlcihlW3JdKTtuKz1vKm99cmV0dXJuIG59LGFzc2VydDpDLGFzc2VydFNoYXBlc01hdGNoOkUsYXNzZXJ0Tm9uTnVsbDpSLGZsYXR0ZW46SSxzaXplRnJvbVNoYXBlOmssaXNTY2FsYXJTaGFwZTpmdW5jdGlvbih0KXtyZXR1cm4gMD09PXQubGVuZ3RofSxhcnJheXNFcXVhbDpTLGlzSW50OkEsdGFuaDpELHNpemVUb1NxdWFyaXNoU2hhcGU6VCxjcmVhdGVTaHVmZmxlZEluZGljZXM6ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBVaW50MzJBcnJheSh0KSxuPTA7bjx0OysrbillW25dPW47cmV0dXJuIHkoZSksZX0scmlnaHRQYWQ6TixyZXBlYXRlZFRyeTpGLGluZmVyRnJvbUltcGxpY2l0U2hhcGU6XyxwYXJzZUF4aXNQYXJhbTpPLHNxdWVlemVTaGFwZTpNLGdldFR5cGVkQXJyYXlGcm9tRFR5cGU6QixnZXRBcnJheUZyb21EVHlwZTpQLGNoZWNrQ29udmVyc2lvbkZvckVycm9yczpMLGlzVmFsaWREdHlwZTpXLGhhc0VuY29kaW5nTG9zczpVLGlzVHlwZWRBcnJheTpWLGJ5dGVzUGVyRWxlbWVudDp6LGJ5dGVzRnJvbVN0cmluZ0FycmF5OkcsaXNTdHJpbmc6SCxpc0Jvb2xlYW46cSxpc051bWJlcjpLLGluZmVyRHR5cGU6aixpc0Z1bmN0aW9uOlgsbmVhcmVzdERpdmlzb3I6WSxjb21wdXRlU3RyaWRlczokLHRvVHlwZWRBcnJheTpRLHRvTmVzdGVkQXJyYXk6SixtYWtlT25lc1R5cGVkQXJyYXk6WixtYWtlWmVyb3NUeXBlZEFycmF5OnR0LG5vdzpldCxhc3NlcnROb25OZWdhdGl2ZUludGVnZXJEaW1lbnNpb25zOm50LGZldGNoOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGkoKS5wbGF0Zm9ybS5mZXRjaCh0LGUpfSxlbmNvZGVTdHJpbmc6cnQsZGVjb2RlU3RyaW5nOm90LGxvY1RvSW5kZXg6YXQsaW5kZXhUb0xvYzppdH0pLHV0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3RoaXMuYmFja2VuZFRpbWVyPXQsdGhpcy5sb2dnZXI9ZSxudWxsPT1lJiYodGhpcy5sb2dnZXI9bmV3IGN0KX1yZXR1cm4gdC5wcm90b3R5cGUucHJvZmlsZUtlcm5lbD1mdW5jdGlvbih0LGUsbil7dmFyIHIsbz10aGlzLGE9dGhpcy5iYWNrZW5kVGltZXIudGltZSgoZnVuY3Rpb24oKXtyPW4oKX0pKTtyZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbihuKXtuLmRhdGEoKS50aGVuKChmdW5jdGlvbihyKXshZnVuY3Rpb24odCxlLG4pe2lmKFwiZmxvYXQzMlwiIT09ZSlyZXR1cm4hMTtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG89dFtyXTtpZihpc05hTihvKXx8IWlzRmluaXRlKG8pKXJldHVybiBjb25zb2xlLndhcm4oXCJGb3VuZCBcIitvK1wiIGluIHRoZSByZXN1bHQgb2YgJ1wiK24rXCInXCIpLCEwfX0ocixuLmR0eXBlLHQpLGEudGhlbigoZnVuY3Rpb24oYSl7dmFyIGk9XCJcIjtudWxsIT1hLmdldEV4dHJhUHJvZmlsZUluZm8mJihpPWEuZ2V0RXh0cmFQcm9maWxlSW5mbygpKSxvLmxvZ2dlci5sb2dLZXJuZWxQcm9maWxlKHQsbixyLGEua2VybmVsTXMsZSxpKX0pKX0pKX0pKSxyfSx0fSgpO3ZhciBjdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLmxvZ0tlcm5lbFByb2ZpbGU9ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPVwibnVtYmVyXCI9PXR5cGVvZiByP04ocitcIm1zXCIsOSk6ci5lcnJvcixzPU4odCwyNSksdT1lLnJhbmssYz1lLnNpemUsbD1OKGUuc2hhcGUudG9TdHJpbmcoKSwxNCksaD1cIlwiO2Zvcih2YXIgZiBpbiBvKXt2YXIgZD1vW2ZdLnNoYXBlfHxlLnNoYXBlLHA9ZC5sZW5ndGg7aCs9ZitcIjogXCIrcCtcIkQgXCIrKHA+MD9kOlwiXCIpK1wiIFwifWNvbnNvbGUubG9nKFwiJWNcIitzK1wiXFx0JWNcIitpK1wiXFx0JWNcIit1K1wiRCBcIitsK1wiXFx0JWNcIitjK1wiXFx0JWNcIitoK1wiXFx0JWNcIithLFwiZm9udC13ZWlnaHQ6Ym9sZFwiLFwiY29sb3I6cmVkXCIsXCJjb2xvcjpibHVlXCIsXCJjb2xvcjogb3JhbmdlXCIsXCJjb2xvcjogZ3JlZW5cIixcImNvbG9yOiBzdGVlbGJsdWVcIil9LHR9KCk7dmFyIGx0PTIwLGh0PTMsZnQ9NztmdW5jdGlvbiBkdCh0LGUsbixyKXt2YXIgbz0kKGUpLGE9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89ayhlKSxhPXJbci5sZW5ndGgtMV0saT1uZXcgQXJyYXkoYSkuZmlsbCgwKSxzPWUubGVuZ3RoLHU9XCJjb21wbGV4NjRcIj09PW4/bXQodCk6dDtpZihzPjEpZm9yKHZhciBjPTA7YzxvL2E7YysrKWZvcih2YXIgbD1jKmEsaD0wO2g8YTtoKyspaVtoXT1NYXRoLm1heChpW2hdLHB0KHVbbCtoXSwwLG4pLmxlbmd0aCk7cmV0dXJuIGl9KHQsZSxuLG8pLGk9ZS5sZW5ndGgscz1mdW5jdGlvbiB0KGUsbixyLG8sYSxpKXt2b2lkIDA9PT1pJiYoaT0hMCk7dmFyIHM9XCJjb21wbGV4NjRcIj09PXI/MjoxLHU9blswXSxjPW4ubGVuZ3RoO2lmKDA9PT1jKXtyZXR1cm5cImNvbXBsZXg2NFwiPT09cj9bcHQobXQoZSlbMF0sMCxyKV06XCJib29sXCI9PT1yP1t2dChlWzBdKV06W2VbMF0udG9TdHJpbmcoKV19aWYoMT09PWMpe2lmKHU+bHQpe3ZhciBsPWh0KnMsaD1BcnJheS5mcm9tKGUuc2xpY2UoMCxsKSksZj1BcnJheS5mcm9tKGUuc2xpY2UoKHUtaHQpKnMsdSpzKSk7cmV0dXJuXCJjb21wbGV4NjRcIj09PXImJihoPW10KGgpLGY9bXQoZikpLFtcIltcIitoLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gcHQodCxhW2VdLHIpfSkpLmpvaW4oXCIsIFwiKStcIiwgLi4uLCBcIitmLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gcHQodCxhW3UtaHQrZV0scil9KSkuam9pbihcIiwgXCIpK1wiXVwiXX1yZXR1cm5bXCJbXCIrKFwiY29tcGxleDY0XCI9PT1yP210KGUpOkFycmF5LmZyb20oZSkpLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gcHQodCxhW2VdLHIpfSkpLmpvaW4oXCIsIFwiKStcIl1cIl19dmFyIGQ9bi5zbGljZSgxKSxwPW8uc2xpY2UoMSksdj1vWzBdKnMsbT1bXTtpZih1Pmx0KXtmb3IodmFyIGc9MDtnPGh0O2crKyl7dmFyIHk9KHg9Zyp2KSt2O20ucHVzaC5hcHBseShtLHQoZS5zbGljZSh4LHkpLGQscixwLGEsITEpKX1tLnB1c2goXCIuLi5cIik7Zm9yKGc9dS1odDtnPHU7ZysrKXt5PSh4PWcqdikrdjttLnB1c2guYXBwbHkobSx0KGUuc2xpY2UoeCx5KSxkLHIscCxhLGc9PT11LTEpKX19ZWxzZSBmb3IoZz0wO2c8dTtnKyspe3ZhciB4O3k9KHg9Zyp2KSt2O20ucHVzaC5hcHBseShtLHQoZS5zbGljZSh4LHkpLGQscixwLGEsZz09PXUtMSkpfXZhciBiPTI9PT1jP1wiLFwiOlwiXCI7bVswXT1cIltcIittWzBdK2I7Zm9yKGc9MTtnPG0ubGVuZ3RoLTE7ZysrKW1bZ109XCIgXCIrbVtnXStiO3ZhciB3PVwiLFxcblwiO2ZvcihnPTI7ZzxjO2crKyl3Kz1cIlxcblwiO3JldHVybiBtW20ubGVuZ3RoLTFdPVwiIFwiK21bbS5sZW5ndGgtMV0rXCJdXCIrKGk/XCJcIjp3KSxtfSh0LGUsbixvLGEpLHU9W1wiVGVuc29yXCJdO3JldHVybiByJiYodS5wdXNoKFwiICBkdHlwZTogXCIrbiksdS5wdXNoKFwiICByYW5rOiBcIitpKSx1LnB1c2goXCIgIHNoYXBlOiBbXCIrZStcIl1cIiksdS5wdXNoKFwiICB2YWx1ZXM6XCIpKSx1LnB1c2gocy5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwiICAgIFwiK3R9KSkuam9pbihcIlxcblwiKSksdS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIHB0KHQsZSxuKXtyZXR1cm4gTihBcnJheS5pc0FycmF5KHQpP3BhcnNlRmxvYXQodFswXS50b0ZpeGVkKGZ0KSkrXCIgKyBcIitwYXJzZUZsb2F0KHRbMV0udG9GaXhlZChmdCkpK1wialwiOkgodCk/XCInXCIrdCtcIidcIjpcImJvb2xcIj09PW4/dnQodCk6cGFyc2VGbG9hdCh0LnRvRml4ZWQoZnQpKS50b1N0cmluZygpLGUpfWZ1bmN0aW9uIHZ0KHQpe3JldHVybiAwPT09dD9cImZhbHNlXCI6XCJ0cnVlXCJ9ZnVuY3Rpb24gbXQodCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoO24rPTIpZS5wdXNoKFt0W25dLHRbbisxXV0pO3JldHVybiBlfXZhciBndD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4pe3ZhciByPXRoaXM7aWYodGhpcy5kdHlwZT1lLHRoaXMuc2hhcGU9dC5zbGljZSgpLHRoaXMuc2l6ZT1rKHQpLG51bGwhPW4pe3ZhciBvPW4ubGVuZ3RoO0Mobz09PXRoaXMuc2l6ZSwoZnVuY3Rpb24oKXtyZXR1cm5cIkxlbmd0aCBvZiB2YWx1ZXMgJ1wiK28rXCInIGRvZXMgbm90IG1hdGNoIHRoZSBzaXplIGluZmVycmVkIGJ5IHRoZSBzaGFwZSAnXCIrci5zaXplK1wiJy5cIn0pKX1pZihcImNvbXBsZXg2NFwiPT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJjb21wbGV4NjQgZHR5cGUgVGVuc29yQnVmZmVycyBhcmUgbm90IHN1cHBvcnRlZC4gUGxlYXNlIGNyZWF0ZSBhIFRlbnNvckJ1ZmZlciBmb3IgdGhlIHJlYWwgYW5kIGltYWdpbmFyeSBwYXJ0cyBzZXBhcmF0ZWx5IGFuZCBjYWxsIHRmLmNvbXBsZXgocmVhbCwgaW1hZykuXCIpO3RoaXMudmFsdWVzPW58fFAoZSx0aGlzLnNpemUpLHRoaXMuc3RyaWRlcz0kKHQpfXJldHVybiB0LnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMsbj1bXSxyPTE7cjxhcmd1bWVudHMubGVuZ3RoO3IrKyluW3ItMV09YXJndW1lbnRzW3JdOzA9PT1uLmxlbmd0aCYmKG49WzBdKSxDKG4ubGVuZ3RoPT09dGhpcy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiVGhlIG51bWJlciBvZiBwcm92aWRlZCBjb29yZGluYXRlcyAoXCIrbi5sZW5ndGgrXCIpIG11c3QgbWF0Y2ggdGhlIHJhbmsgKFwiK2UucmFuaytcIilcIn0pKTt2YXIgbz10aGlzLmxvY1RvSW5kZXgobik7dGhpcy52YWx1ZXNbb109dH0sdC5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdOzA9PT10Lmxlbmd0aCYmKHQ9WzBdKTtmb3IodmFyIG49MCxyPTAsbz10O3I8by5sZW5ndGg7cisrKXt2YXIgYT1vW3JdO2lmKGE8MHx8YT49dGhpcy5zaGFwZVtuXSl7dmFyIGk9XCJSZXF1ZXN0ZWQgb3V0IG9mIHJhbmdlIGVsZW1lbnQgYXQgXCIrdCtcIi4gICBCdWZmZXIgc2hhcGU9XCIrdGhpcy5zaGFwZTt0aHJvdyBuZXcgRXJyb3IoaSl9bisrfWZvcih2YXIgcz10W3QubGVuZ3RoLTFdLHU9MDt1PHQubGVuZ3RoLTE7Kyt1KXMrPXRoaXMuc3RyaWRlc1t1XSp0W3VdO3JldHVybiB0aGlzLnZhbHVlc1tzXX0sdC5wcm90b3R5cGUubG9jVG9JbmRleD1mdW5jdGlvbih0KXtpZigwPT09dGhpcy5yYW5rKXJldHVybiAwO2lmKDE9PT10aGlzLnJhbmspcmV0dXJuIHRbMF07Zm9yKHZhciBlPXRbdC5sZW5ndGgtMV0sbj0wO248dC5sZW5ndGgtMTsrK24pZSs9dGhpcy5zdHJpZGVzW25dKnRbbl07cmV0dXJuIGV9LHQucHJvdG90eXBlLmluZGV4VG9Mb2M9ZnVuY3Rpb24odCl7aWYoMD09PXRoaXMucmFuaylyZXR1cm5bXTtpZigxPT09dGhpcy5yYW5rKXJldHVyblt0XTtmb3IodmFyIGU9bmV3IEFycmF5KHRoaXMuc2hhcGUubGVuZ3RoKSxuPTA7bjxlLmxlbmd0aC0xOysrbillW25dPU1hdGguZmxvb3IodC90aGlzLnN0cmlkZXNbbl0pLHQtPWVbbl0qdGhpcy5zdHJpZGVzW25dO3JldHVybiBlW2UubGVuZ3RoLTFdPXQsZX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwicmFua1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaGFwZS5sZW5ndGh9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUudG9UZW5zb3I9ZnVuY3Rpb24oKXtyZXR1cm4geXQoKS5tYWtlVGVuc29yKHRoaXMudmFsdWVzLHRoaXMuc2hhcGUsdGhpcy5kdHlwZSl9LHR9KCkseXQ9bnVsbCx4dD1udWxsLGJ0PW51bGw7dmFyIHd0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUsbixyKXt0aGlzLmtlcHQ9ITEsdGhpcy5pc0Rpc3Bvc2VkSW50ZXJuYWw9ITEsdGhpcy5zaGFwZT10LnNsaWNlKCksdGhpcy5kdHlwZT1lfHxcImZsb2F0MzJcIix0aGlzLnNpemU9ayh0KSx0aGlzLnN0cmlkZXM9JCh0KSx0aGlzLmRhdGFJZD1uLHRoaXMuaWQ9cix0aGlzLnJhbmtUeXBlPXRoaXMucmFuazw1P3RoaXMucmFuay50b1N0cmluZygpOlwiaGlnaGVyXCJ9cmV0dXJuIHQucHJvdG90eXBlLmZsYXR0ZW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLmFzMUQoKX0sdC5wcm90b3R5cGUuYXNTY2FsYXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxDKDE9PT10aGlzLnNpemUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJyYXkgbXVzdCBoYXZlIG9ubHkgMSBlbGVtZW50LlwifSkpLHRoaXMucmVzaGFwZShbXSl9LHQucHJvdG90eXBlLmFzMUQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnJlc2hhcGUoW3RoaXMuc2l6ZV0pfSx0LnByb3RvdHlwZS5hczJEPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5yZXNoYXBlKFt0LGVdKX0sdC5wcm90b3R5cGUuYXMzRD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5yZXNoYXBlKFt0LGUsbl0pfSx0LnByb3RvdHlwZS5hczREPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMucmVzaGFwZShbdCxlLG4scl0pfSx0LnByb3RvdHlwZS5hczVEPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5yZXNoYXBlKFt0LGUsbixyLG9dKX0sdC5wcm90b3R5cGUuYXNUeXBlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmNhc3QodGhpcyx0KX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwicmFua1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zaGFwZS5sZW5ndGh9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuYnVmZmVyPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0O3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSxbMix4dC5idWZmZXIodGhpcy5zaGFwZSx0aGlzLmR0eXBlLHQpXX19KSl9KSl9LHQucHJvdG90eXBlLmJ1ZmZlclN5bmM9ZnVuY3Rpb24oKXtyZXR1cm4geHQuYnVmZmVyKHRoaXMuc2hhcGUsdGhpcy5kdHlwZSx0aGlzLmRhdGFTeW5jKCkpfSx0LnByb3RvdHlwZS5hcnJheT1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZGF0YSgpXTtjYXNlIDE6cmV0dXJuIHQ9ZS5zZW50KCksWzIsSih0aGlzLnNoYXBlLHQpXX19KSl9KSl9LHQucHJvdG90eXBlLmFycmF5U3luYz1mdW5jdGlvbigpe3JldHVybiBKKHRoaXMuc2hhcGUsdGhpcy5kYXRhU3luYygpKX0sdC5wcm90b3R5cGUuZGF0YT1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdCxlO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKG4pe3N3aXRjaChuLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdD15dCgpLnJlYWQodGhpcy5kYXRhSWQpLFwic3RyaW5nXCIhPT10aGlzLmR0eXBlP1szLDJdOls0LHRdO2Nhc2UgMTplPW4uc2VudCgpO3RyeXtyZXR1cm5bMixlLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIG90KHQpfSkpXX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGVjb2RlIHRoZSBzdHJpbmcgYnl0ZXMgaW50byB1dGYtOC4gVG8gZ2V0IHRoZSBvcmlnaW5hbCBieXRlcywgY2FsbCB0ZW5zb3IuYnl0ZXMoKS5cIil9bi5sYWJlbD0yO2Nhc2UgMjpyZXR1cm5bMix0XX19KSl9KSl9LHQucHJvdG90eXBlLmRhdGFTeW5jPWZ1bmN0aW9uKCl7dGhpcy50aHJvd0lmRGlzcG9zZWQoKTt2YXIgdD15dCgpLnJlYWRTeW5jKHRoaXMuZGF0YUlkKTtpZihcInN0cmluZ1wiPT09dGhpcy5kdHlwZSl0cnl7cmV0dXJuIHQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gb3QodCl9KSl9Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRlY29kZSB0aGUgc3RyaW5nIGJ5dGVzIGludG8gdXRmLTguIFRvIGdldCB0aGUgb3JpZ2luYWwgYnl0ZXMsIGNhbGwgdGVuc29yLmJ5dGVzKCkuXCIpfXJldHVybiB0fSx0LnByb3RvdHlwZS5ieXRlcz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLFs0LHl0KCkucmVhZCh0aGlzLmRhdGFJZCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSxcInN0cmluZ1wiPT09dGhpcy5kdHlwZT9bMix0XTpbMixuZXcgVWludDhBcnJheSh0LmJ1ZmZlcildfX0pKX0pKX0sdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuaXNEaXNwb3NlZHx8KHl0KCkuZGlzcG9zZVRlbnNvcih0aGlzKSx0aGlzLmlzRGlzcG9zZWRJbnRlcm5hbD0hMCl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImlzRGlzcG9zZWRcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuaXNEaXNwb3NlZEludGVybmFsfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLnRocm93SWZEaXNwb3NlZD1mdW5jdGlvbigpe2lmKHRoaXMuaXNEaXNwb3NlZCl0aHJvdyBuZXcgRXJyb3IoXCJUZW5zb3IgaXMgZGlzcG9zZWQuXCIpfSx0LnByb3RvdHlwZS50b0Zsb2F0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNUeXBlKFwiZmxvYXQzMlwiKX0sdC5wcm90b3R5cGUudG9JbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5hc1R5cGUoXCJpbnQzMlwiKX0sdC5wcm90b3R5cGUudG9Cb29sPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNUeXBlKFwiYm9vbFwiKX0sdC5wcm90b3R5cGUucHJpbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PSExKSx4dC5wcmludCh0aGlzLHQpfSx0LnByb3RvdHlwZS5yZXNoYXBlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnJlc2hhcGUodGhpcyx0KX0sdC5wcm90b3R5cGUucmVzaGFwZUFzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMucmVzaGFwZSh0LnNoYXBlKX0sdC5wcm90b3R5cGUuZXhwYW5kRGltcz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MCkseHQuZXhwYW5kRGltcyh0aGlzLHQpfSx0LnByb3RvdHlwZS5jdW1zdW09ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT10JiYodD0wKSx2b2lkIDA9PT1lJiYoZT0hMSksdm9pZCAwPT09biYmKG49ITEpLHh0LmN1bXN1bSh0aGlzLHQsZSxuKX0sdC5wcm90b3R5cGUuc3F1ZWV6ZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zcXVlZXplKHRoaXMsdCl9LHQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuY2xvbmUodGhpcyl9LHQucHJvdG90eXBlLm9uZUhvdD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQub25lSG90KHRoaXMsdCxlLG4pfSx0LnByb3RvdHlwZS50b1N0cmluZz1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9ITEpLGR0KHRoaXMuZGF0YVN5bmMoKSx0aGlzLnNoYXBlLHRoaXMuZHR5cGUsdCl9LHQucHJvdG90eXBlLnRpbGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQudGlsZSh0aGlzLHQpfSx0LnByb3RvdHlwZS5nYXRoZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9MCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5nYXRoZXIodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5tYXRNdWw9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSksdm9pZCAwPT09biYmKG49ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubWF0TXVsKHRoaXMsdCxlLG4pfSx0LnByb3RvdHlwZS5kb3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZG90KHRoaXMsdCl9LHQucHJvdG90eXBlLm5vcm09ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT10JiYodD1cImV1Y2xpZGVhblwiKSx2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5ub3JtKHRoaXMsdCxlLG4pfSx0LnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNsaWNlKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5yZXZlcnNlKHRoaXMsdCl9LHQucHJvdG90eXBlLmNvbmNhdD1mdW5jdGlvbihlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0wKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLGUgaW5zdGFuY2VvZiB0JiYoZT1bZV0pLHh0LmNvbmNhdChbdGhpc10uY29uY2F0KGUpLG4pfSx0LnByb3RvdHlwZS5zcGxpdD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0wKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNwbGl0KHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuc3RhY2s9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9MCkseHQuc3RhY2soW3RoaXMsdF0sZSl9LHQucHJvdG90eXBlLnVuc3RhY2s9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PTApLHh0LnVuc3RhY2sodGhpcyx0KX0sdC5wcm90b3R5cGUucGFkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPTApLHh0LnBhZCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLmJhdGNoTm9ybWFsaXphdGlvbj1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB2b2lkIDA9PT1uJiYobj0uMDAxKSxidChcInRmLmJhdGNoTm9ybWFsaXphdGlvbigpIGlzIGdvaW5nIGF3YXkuIFVzZSB0Zi5iYXRjaE5vcm0oKSBpbnN0ZWFkLCBhbmQgbm90ZSB0aGUgcG9zaXRpb25hbCBhcmd1bWVudCBjaGFuZ2Ugb2Ygc2NhbGUsIG9mZnNldCwgYW5kIHZhcmlhbmNlRXBzaWxvblwiKSx0aGlzLmJhdGNoTm9ybSh0LGUsbyxyLG4pfSx0LnByb3RvdHlwZS5iYXRjaE5vcm09ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdm9pZCAwPT09byYmKG89LjAwMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5iYXRjaE5vcm0odGhpcyx0LGUsbixyLG8pfSx0LnByb3RvdHlwZS5hbGw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuYWxsKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuYW55PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmFueSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLmxvZ1N1bUV4cD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5sb2dTdW1FeHAodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5zdW09ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc3VtKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUucHJvZD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5wcm9kKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUubWVhbj1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tZWFuKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUubWluPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm1pbih0aGlzLHQsZSl9LHQucHJvdG90eXBlLm1heD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tYXgodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5hcmdNaW49ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuYXJnTWluKHRoaXMsdCl9LHQucHJvdG90eXBlLmFyZ01heD1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hcmdNYXgodGhpcyx0KX0sdC5wcm90b3R5cGUuY2FzdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5jYXN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hZGQodGhpcyx0KX0sdC5wcm90b3R5cGUuYWRkU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmFkZFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5hdGFuMj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hdGFuMih0aGlzLHQpfSx0LnByb3RvdHlwZS5zdWI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc3ViKHRoaXMsdCl9LHQucHJvdG90eXBlLnN1YlN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zdWJTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUucG93PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnBvdyh0aGlzLHQpfSx0LnByb3RvdHlwZS5wb3dTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQucG93U3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLm11bD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tdWwodGhpcyx0KX0sdC5wcm90b3R5cGUubXVsU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm11bFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5kaXY9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZGl2KHRoaXMsdCl9LHQucHJvdG90eXBlLmRpdk5vTmFuPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmRpdk5vTmFuKHRoaXMsdCl9LHQucHJvdG90eXBlLmZsb29yRGl2PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmZsb29yRGl2KHRoaXMsdCl9LHQucHJvdG90eXBlLmRpdlN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5kaXZTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUubWluaW11bT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5taW5pbXVtKHRoaXMsdCl9LHQucHJvdG90eXBlLm1pbmltdW1TdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubWluaW11bVN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5tYXhpbXVtPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm1heGltdW0odGhpcyx0KX0sdC5wcm90b3R5cGUubWF4aW11bVN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tYXhpbXVtU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLm1vZD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tb2QodGhpcyx0KX0sdC5wcm90b3R5cGUubW9kU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm1vZFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5zcXVhcmVkRGlmZmVyZW5jZVN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zcXVhcmVkRGlmZmVyZW5jZVN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS50cmFuc3Bvc2U9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQudHJhbnNwb3NlKHRoaXMsdCl9LHQucHJvdG90eXBlLm5vdEVxdWFsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm5vdEVxdWFsKHRoaXMsdCl9LHQucHJvdG90eXBlLm5vdEVxdWFsU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm5vdEVxdWFsU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmxlc3M9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubGVzcyh0aGlzLHQpfSx0LnByb3RvdHlwZS5sZXNzU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lmxlc3NTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUuZXF1YWw9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZXF1YWwodGhpcyx0KX0sdC5wcm90b3R5cGUuZXF1YWxTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZXF1YWxTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lmxlc3NFcXVhbCh0aGlzLHQpfSx0LnByb3RvdHlwZS5sZXNzRXF1YWxTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubGVzc0VxdWFsU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmdyZWF0ZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZ3JlYXRlcih0aGlzLHQpfSx0LnByb3RvdHlwZS5ncmVhdGVyU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmdyZWF0ZXJTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmdyZWF0ZXJFcXVhbCh0aGlzLHQpfSx0LnByb3RvdHlwZS5ncmVhdGVyRXF1YWxTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZ3JlYXRlckVxdWFsU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmxvZ2ljYWxBbmQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubG9naWNhbEFuZCh0aGlzLHQpfSx0LnByb3RvdHlwZS5sb2dpY2FsT3I9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQubG9naWNhbE9yKHRoaXMsdCl9LHQucHJvdG90eXBlLmxvZ2ljYWxOb3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5sb2dpY2FsTm90KHRoaXMpfSx0LnByb3RvdHlwZS5sb2dpY2FsWG9yPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmxvZ2ljYWxYb3IodGhpcyx0KX0sdC5wcm90b3R5cGUud2hlcmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC53aGVyZSh0LHRoaXMsZSl9LHQucHJvdG90eXBlLm5lZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lm5lZyh0aGlzKX0sdC5wcm90b3R5cGUuY2VpbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmNlaWwodGhpcyl9LHQucHJvdG90eXBlLmZsb29yPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZmxvb3IodGhpcyl9LHQucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zaWduKHRoaXMpfSx0LnByb3RvdHlwZS5pc05hTj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmlzTmFOKHRoaXMpfSx0LnByb3RvdHlwZS5pc0luZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmlzSW5mKHRoaXMpfSx0LnByb3RvdHlwZS5pc0Zpbml0ZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmlzRmluaXRlKHRoaXMpfSx0LnByb3RvdHlwZS5leHA9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5leHAodGhpcyl9LHQucHJvdG90eXBlLmV4cG0xPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZXhwbTEodGhpcyl9LHQucHJvdG90eXBlLmxvZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmxvZyh0aGlzKX0sdC5wcm90b3R5cGUubG9nMXA9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5sb2cxcCh0aGlzKX0sdC5wcm90b3R5cGUuc3FydD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNxcnQodGhpcyl9LHQucHJvdG90eXBlLnJzcXJ0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQucnNxcnQodGhpcyl9LHQucHJvdG90eXBlLnNxdWFyZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNxdWFyZSh0aGlzKX0sdC5wcm90b3R5cGUucmVjaXByb2NhbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnJlY2lwcm9jYWwodGhpcyl9LHQucHJvdG90eXBlLmFicz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmFicyh0aGlzKX0sdC5wcm90b3R5cGUuY2xpcEJ5VmFsdWU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5jbGlwQnlWYWx1ZSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnJlbHU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5yZWx1KHRoaXMpfSx0LnByb3RvdHlwZS5yZWx1Nj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnJlbHU2KHRoaXMpfSx0LnByb3RvdHlwZS5lbHU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5lbHUodGhpcyl9LHQucHJvdG90eXBlLnNlbHU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zZWx1KHRoaXMpfSx0LnByb3RvdHlwZS5sZWFreVJlbHU9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PS4yKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmxlYWt5UmVsdSh0aGlzLHQpfSx0LnByb3RvdHlwZS5wcmVsdT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5wcmVsdSh0aGlzLHQpfSx0LnByb3RvdHlwZS5zaWdtb2lkPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc2lnbW9pZCh0aGlzKX0sdC5wcm90b3R5cGUubG9nU2lnbW9pZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmxvZ1NpZ21vaWQodGhpcyl9LHQucHJvdG90eXBlLnNvZnRwbHVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc29mdHBsdXModGhpcyl9LHQucHJvdG90eXBlLnplcm9zTGlrZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0Lnplcm9zTGlrZSh0aGlzKX0sdC5wcm90b3R5cGUub25lc0xpa2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5vbmVzTGlrZSh0aGlzKX0sdC5wcm90b3R5cGUuc2luPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc2luKHRoaXMpfSx0LnByb3RvdHlwZS5jb3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5jb3ModGhpcyl9LHQucHJvdG90eXBlLnRhbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnRhbih0aGlzKX0sdC5wcm90b3R5cGUuYXNpbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmFzaW4odGhpcyl9LHQucHJvdG90eXBlLmFjb3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hY29zKHRoaXMpfSx0LnByb3RvdHlwZS5hdGFuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuYXRhbih0aGlzKX0sdC5wcm90b3R5cGUuc2luaD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNpbmgodGhpcyl9LHQucHJvdG90eXBlLmNvc2g9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5jb3NoKHRoaXMpfSx0LnByb3RvdHlwZS50YW5oPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQudGFuaCh0aGlzKX0sdC5wcm90b3R5cGUuYXNpbmg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hc2luaCh0aGlzKX0sdC5wcm90b3R5cGUuYWNvc2g9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hY29zaCh0aGlzKX0sdC5wcm90b3R5cGUuYXRhbmg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5hdGFuaCh0aGlzKX0sdC5wcm90b3R5cGUuZXJmPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZXJmKHRoaXMpfSx0LnByb3RvdHlwZS5yb3VuZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnJvdW5kKHRoaXMpfSx0LnByb3RvdHlwZS5zdGVwPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0wKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnN0ZXAodGhpcyx0KX0sdC5wcm90b3R5cGUuc29mdG1heD1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9LTEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc29mdG1heCh0aGlzLHQpfSx0LnByb3RvdHlwZS5sb2dTb2Z0bWF4PWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0tMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5sb2dTb2Z0bWF4KHRoaXMsdCl9LHQucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmltYWdlLnJlc2l6ZUJpbGluZWFyKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmltYWdlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvcih0aGlzLHQsZSl9LHQucHJvdG90eXBlLmNvbnYxZD1mdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIHZvaWQgMD09PXImJihyPVwiTldDXCIpLHZvaWQgMD09PW8mJihvPTEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuY29udjFkKHRoaXMsdCxlLG4scixvLGEpfSx0LnByb3RvdHlwZS5jb252MmQ9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj1cIk5IV0NcIiksdm9pZCAwPT09byYmKG89WzEsMV0pLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuY29udjJkKHRoaXMsdCxlLG4scixvLGEpfSx0LnByb3RvdHlwZS5jb252MmRUcmFuc3Bvc2U9ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5jb252MmRUcmFuc3Bvc2UodGhpcyx0LGUsbixyLG8pfSx0LnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkQ9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj1cIk5IV0NcIiksdm9pZCAwPT09byYmKG89WzEsMV0pLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuZGVwdGh3aXNlQ29udjJkKHRoaXMsdCxlLG4scixvLGEpfSx0LnByb3RvdHlwZS5zZXBhcmFibGVDb252MmQ9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1vJiYobz1bMSwxXSksdm9pZCAwPT09YSYmKGE9XCJOSFdDXCIpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQuc2VwYXJhYmxlQ29udjJkKHRoaXMsdCxlLG4scixvLGEpfSx0LnByb3RvdHlwZS5hdmdQb29sPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmF2Z1Bvb2wodGhpcyx0LGUsbixyKX0sdC5wcm90b3R5cGUubWF4UG9vbD1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5tYXhQb29sKHRoaXMsdCxlLG4scil9LHQucHJvdG90eXBlLmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB2b2lkIDA9PT10JiYodD01KSx2b2lkIDA9PT1lJiYoZT0xKSx2b2lkIDA9PT1uJiYobj0xKSx2b2lkIDA9PT1yJiYocj0uNSkseHQubG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb24odGhpcyx0LGUsbixyKX0sdC5wcm90b3R5cGUucG9vbD1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnBvb2wodGhpcyx0LGUsbixyLG8pfSx0LnByb3RvdHlwZS52YXJpYWJsZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PXQmJih0PSEwKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHl0KCkubWFrZVZhcmlhYmxlKHRoaXMsdCxlLG4pfSx0LnByb3RvdHlwZS51bnNvcnRlZFNlZ21lbnRTdW09ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC51bnNvcnRlZFNlZ21lbnRTdW0odGhpcyx0LGUpfSx0LnByb3RvdHlwZS5iYXRjaFRvU3BhY2VORD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmJhdGNoVG9TcGFjZU5EKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuc3BhY2VUb0JhdGNoTkQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zcGFjZVRvQmF0Y2hORCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnRvcGs9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MSksdm9pZCAwPT09ZSYmKGU9ITApLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCkseHQudG9wayh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnN0cmlkZWRTbGljZT1mdW5jdGlvbih0LGUsbixyLG8sYSxpLHMpe3JldHVybiB2b2lkIDA9PT1yJiYocj0wKSx2b2lkIDA9PT1vJiYobz0wKSx2b2lkIDA9PT1hJiYoYT0wKSx2b2lkIDA9PT1pJiYoaT0wKSx2b2lkIDA9PT1zJiYocz0wKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnN0cmlkZWRTbGljZSh0aGlzLHQsZSxuLHIsbyxhLGkscyl9LHQucHJvdG90eXBlLmRlcHRoVG9TcGFjZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LmRlcHRoVG9TcGFjZSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLmZmdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNwZWN0cmFsLmZmdCh0aGlzKX0sdC5wcm90b3R5cGUuaWZmdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNwZWN0cmFsLmlmZnQodGhpcyl9LHQucHJvdG90eXBlLnJmZnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx4dC5zcGVjdHJhbC5yZmZ0KHRoaXMpfSx0LnByb3RvdHlwZS5pcmZmdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHh0LnNwZWN0cmFsLmlyZmZ0KHRoaXMpfSx0fSgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh3dCxTeW1ib2wuaGFzSW5zdGFuY2Use3ZhbHVlOmZ1bmN0aW9uKHQpe3JldHVybiEhdCYmbnVsbCE9dC5kYXRhSWQmJm51bGwhPXQuc2hhcGUmJm51bGwhPXQuZHR5cGV9fSk7dmFyIEN0LEV0LFJ0LEl0LGt0LFN0PWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG4oZSxuLHIsbyl7dmFyIGE9dC5jYWxsKHRoaXMsZS5zaGFwZSxlLmR0eXBlLGUuZGF0YUlkLG8pfHx0aGlzO3JldHVybiBhLnRyYWluYWJsZT1uLGEubmFtZT1yLGF9cmV0dXJuIGUobix0KSxuLnByb3RvdHlwZS5hc3NpZ249ZnVuY3Rpb24odCl7aWYodC5kdHlwZSE9PXRoaXMuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiZHR5cGUgb2YgdGhlIG5ldyB2YWx1ZSAoXCIrdC5kdHlwZStcIikgYW5kIHByZXZpb3VzIHZhbHVlIChcIit0aGlzLmR0eXBlK1wiKSBtdXN0IG1hdGNoXCIpO2lmKCFTKHQuc2hhcGUsdGhpcy5zaGFwZSkpdGhyb3cgbmV3IEVycm9yKFwic2hhcGUgb2YgdGhlIG5ldyB2YWx1ZSAoXCIrdC5zaGFwZStcIikgYW5kIHByZXZpb3VzIHZhbHVlIChcIit0aGlzLnNoYXBlK1wiKSBtdXN0IG1hdGNoXCIpO3l0KCkuZGlzcG9zZVRlbnNvcih0aGlzKSx0aGlzLmRhdGFJZD10LmRhdGFJZCx5dCgpLmluY1JlZih0aGlzLG51bGwpfSxuLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7eXQoKS5kaXNwb3NlVmFyaWFibGUodGhpcyksdGhpcy5pc0Rpc3Bvc2VkSW50ZXJuYWw9ITB9LG59KHd0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoU3QsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIHd0JiZudWxsIT10LmFzc2lnbiYmdC5hc3NpZ24gaW5zdGFuY2VvZiBGdW5jdGlvbn19KSxmdW5jdGlvbih0KXt0LlIwPVwiUjBcIix0LlIxPVwiUjFcIix0LlIyPVwiUjJcIix0LlIzPVwiUjNcIix0LlI0PVwiUjRcIix0LlI1PVwiUjVcIix0LlI2PVwiUjZcIn0oQ3R8fChDdD17fSkpLGZ1bmN0aW9uKHQpe3QuZmxvYXQzMj1cImZsb2F0MzJcIix0LmludDMyPVwiaW50MzJcIix0LmJvb2w9XCJpbnQzMlwiLHQuY29tcGxleDY0PVwiY29tcGxleDY0XCJ9KEV0fHwoRXQ9e30pKSxmdW5jdGlvbih0KXt0LmZsb2F0MzI9XCJmbG9hdDMyXCIsdC5pbnQzMj1cImludDMyXCIsdC5ib29sPVwiYm9vbFwiLHQuY29tcGxleDY0PVwiY29tcGxleDY0XCJ9KFJ0fHwoUnQ9e30pKSxmdW5jdGlvbih0KXt0LmZsb2F0MzI9XCJmbG9hdDMyXCIsdC5pbnQzMj1cImZsb2F0MzJcIix0LmJvb2w9XCJmbG9hdDMyXCIsdC5jb21wbGV4NjQ9XCJjb21wbGV4NjRcIn0oSXR8fChJdD17fSkpLGZ1bmN0aW9uKHQpe3QuZmxvYXQzMj1cImNvbXBsZXg2NFwiLHQuaW50MzI9XCJjb21wbGV4NjRcIix0LmJvb2w9XCJjb21wbGV4NjRcIix0LmNvbXBsZXg2ND1cImNvbXBsZXg2NFwifShrdHx8KGt0PXt9KSk7dmFyIEF0PXtmbG9hdDMyOkl0LGludDMyOkV0LGJvb2w6UnQsY29tcGxleDY0Omt0fTtmdW5jdGlvbiBEdCh0LGUpe2lmKFwic3RyaW5nXCI9PT10fHxcInN0cmluZ1wiPT09ZSl7aWYoXCJzdHJpbmdcIj09PXQmJlwic3RyaW5nXCI9PT1lKXJldHVyblwic3RyaW5nXCI7dGhyb3cgbmV3IEVycm9yKFwiQ2FuIG5vdCB1cGNhc3QgXCIrdCtcIiB3aXRoIFwiK2UpfXJldHVybiBBdFt0XVtlXX1mdW5jdGlvbiBUdCh0KXtyZXR1cm4gRHQodCxcImludDMyXCIpfWZ1bmN0aW9uIE50KHQsZSl7aWYodC5kdHlwZT09PWUuZHR5cGUpcmV0dXJuW3QsZV07dmFyIG49RHQodC5kdHlwZSxlLmR0eXBlKTtyZXR1cm5bdC5jYXN0KG4pLGUuY2FzdChuKV19ZnVuY3Rpb24gRnQodCxlKXtDKHQuZHR5cGU9PT1lLmR0eXBlLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGR0eXBlcyBvZiB0aGUgZmlyc3QoXCIrdC5kdHlwZStcIikgYW5kIHNlY29uZChcIitlLmR0eXBlK1wiKSBpbnB1dCBtdXN0IG1hdGNoXCJ9KSl9ZnVuY3Rpb24gX3QodCl7dmFyIGU9W107cmV0dXJuIGZ1bmN0aW9uIHQoZSxuLHIpe2lmKG51bGw9PWUpcmV0dXJuO2lmKGUgaW5zdGFuY2VvZiB3dClyZXR1cm4gdm9pZCBuLnB1c2goZSk7aWYobz1lLCFBcnJheS5pc0FycmF5KG8pJiZcIm9iamVjdFwiIT10eXBlb2YgbylyZXR1cm47dmFyIG87dmFyIGE9ZTtmb3IodmFyIGkgaW4gYSl7dmFyIHM9YVtpXTtyLmhhcyhzKXx8KHIuYWRkKHMpLHQocyxuLHIpKX19KHQsZSxuZXcgU2V0KSxlfXZhciBPdCxNdD1PYmplY3QuZnJlZXplKHttYWtlVHlwZXNNYXRjaDpOdCxhc3NlcnRUeXBlc01hdGNoOkZ0LGlzVGVuc29ySW5MaXN0OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuc29tZSgoZnVuY3Rpb24oZSl7cmV0dXJuIGUuaWQ9PT10LmlkfSkpfSxnZXRUZW5zb3JzSW5Db250YWluZXI6X3R9KSxCdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLnJlZ2lzdGVyZWRWYXJpYWJsZXM9e30sdGhpcy5uZXh0VGFwZU5vZGVJZD0wLHRoaXMubnVtQnl0ZXM9MCx0aGlzLm51bVRlbnNvcnM9MCx0aGlzLm51bVN0cmluZ1RlbnNvcnM9MCx0aGlzLm51bURhdGFCdWZmZXJzPTAsdGhpcy5ncmFkaWVudERlcHRoPTAsdGhpcy5rZXJuZWxEZXB0aD0wLHRoaXMuc2NvcGVTdGFjaz1bXSx0aGlzLm51bURhdGFNb3Zlc1N0YWNrPVtdLHRoaXMubmV4dFNjb3BlSWQ9MCx0aGlzLnRlbnNvckluZm89bmV3IFdlYWtNYXAsdGhpcy5wcm9maWxpbmc9ITEsdGhpcy5hY3RpdmVQcm9maWxlPXtuZXdCeXRlczowLG5ld1RlbnNvcnM6MCxwZWFrQnl0ZXM6MCxrZXJuZWxzOltdLHJlc3VsdDpudWxsfX1yZXR1cm4gdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0aGlzLnJlZ2lzdGVyZWRWYXJpYWJsZXMpdGhpcy5yZWdpc3RlcmVkVmFyaWFibGVzW3RdLmRpc3Bvc2UoKX0sdH0oKSxQdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5FTlY9dCx0aGlzLnJlZ2lzdHJ5PXt9LHRoaXMucmVnaXN0cnlGYWN0b3J5PXt9LHRoaXMucGVuZGluZ0JhY2tlbmRJbml0SWQ9MCx0aGlzLnN0YXRlPW5ldyBCdH1yZXR1cm4gdC5wcm90b3R5cGUucmVhZHk9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQsZSxuO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6aWYobnVsbCE9dGhpcy5wZW5kaW5nQmFja2VuZEluaXQpcmV0dXJuWzIsdGhpcy5wZW5kaW5nQmFja2VuZEluaXQudGhlbigoZnVuY3Rpb24oKXt9KSldO2lmKG51bGwhPXRoaXMuYmFja2VuZEluc3RhbmNlKXJldHVyblsyXTt0PXRoaXMuZ2V0U29ydGVkQmFja2VuZHMoKSxlPTAsci5sYWJlbD0xO2Nhc2UgMTpyZXR1cm4gZTx0Lmxlbmd0aD8obj10W2VdLFs0LHRoaXMuaW5pdGlhbGl6ZUJhY2tlbmQobikuc3VjY2Vzc10pOlszLDVdO2Nhc2UgMjpyZXR1cm4gci5zZW50KCk/WzQsdGhpcy5zZXRCYWNrZW5kKG4pXTpbMyw0XTtjYXNlIDM6cmV0dXJuIHIuc2VudCgpLFsyXTtjYXNlIDQ6cmV0dXJuIGUrKyxbMywxXTtjYXNlIDU6dGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGluaXRpYWxpemUgYW55IGJhY2tlbmRzLCBhbGwgYmFja2VuZCBpbml0aWFsaXphdGlvbnMgZmFpbGVkLlwiKX19KSl9KSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImJhY2tlbmRcIix7Z2V0OmZ1bmN0aW9uKCl7aWYobnVsbCE9dGhpcy5wZW5kaW5nQmFja2VuZEluaXQpdGhyb3cgbmV3IEVycm9yKFwiQmFja2VuZCAnXCIrdGhpcy5iYWNrZW5kTmFtZStcIicgaGFzIG5vdCB5ZXQgYmVlbiBpbml0aWFsaXplZC4gTWFrZSBzdXJlIHRvIGF3YWl0IHRmLnJlYWR5KCkgb3IgYXdhaXQgdGYuc2V0QmFja2VuZCgpIGJlZm9yZSBjYWxsaW5nIG90aGVyIG1ldGhvZHNcIik7aWYobnVsbD09dGhpcy5iYWNrZW5kSW5zdGFuY2Upe3ZhciB0PXRoaXMuaW5pdGlhbGl6ZUJhY2tlbmRzQW5kUmV0dXJuQmVzdCgpLGU9dC5uYW1lO2lmKHQuYXN5bmNJbml0KXRocm93IG5ldyBFcnJvcihcIlRoZSBoaWdoZXN0IHByaW9yaXR5IGJhY2tlbmQgJ1wiK2UrXCInIGhhcyBub3QgeWV0IGJlZW4gaW5pdGlhbGl6ZWQuIE1ha2Ugc3VyZSB0byBhd2FpdCB0Zi5yZWFkeSgpIG9yIGF3YWl0IHRmLnNldEJhY2tlbmQoKSBiZWZvcmUgY2FsbGluZyBvdGhlciBtZXRob2RzXCIpO3RoaXMuc2V0QmFja2VuZChlKX1yZXR1cm4gdGhpcy5iYWNrZW5kSW5zdGFuY2V9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuYmFja2VuZE5hbWVzPWZ1bmN0aW9uKCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnlGYWN0b3J5KX0sdC5wcm90b3R5cGUuZmluZEJhY2tlbmQ9ZnVuY3Rpb24odCl7aWYoISh0IGluIHRoaXMucmVnaXN0cnkpKXtpZighKHQgaW4gdGhpcy5yZWdpc3RyeUZhY3RvcnkpKXJldHVybiBudWxsO2lmKHRoaXMuaW5pdGlhbGl6ZUJhY2tlbmQodCkuYXN5bmNJbml0KXJldHVybiBudWxsfXJldHVybiB0aGlzLnJlZ2lzdHJ5W3RdfSx0LnByb3RvdHlwZS5maW5kQmFja2VuZEZhY3Rvcnk9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW4gdGhpcy5yZWdpc3RyeUZhY3Rvcnk/dGhpcy5yZWdpc3RyeUZhY3RvcnlbdF0uZmFjdG9yeTpudWxsfSx0LnByb3RvdHlwZS5yZWdpc3RlckJhY2tlbmQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0xKSx0IGluIHRoaXMucmVnaXN0cnlGYWN0b3J5Pyhjb25zb2xlLndhcm4odCtcIiBiYWNrZW5kIHdhcyBhbHJlYWR5IHJlZ2lzdGVyZWQuIFJldXNpbmcgZXhpc3RpbmcgYmFja2VuZCBmYWN0b3J5LlwiKSwhMSk6KHRoaXMucmVnaXN0cnlGYWN0b3J5W3RdPXtmYWN0b3J5OmUscHJpb3JpdHk6bn0sITApfSx0LnByb3RvdHlwZS5zZXRCYWNrZW5kPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSxuLG87cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDppZihudWxsPT10aGlzLnJlZ2lzdHJ5RmFjdG9yeVt0XSl0aHJvdyBuZXcgRXJyb3IoXCJCYWNrZW5kIG5hbWUgJ1wiK3QrXCInIG5vdCBmb3VuZCBpbiByZWdpc3RyeVwiKTtyZXR1cm4gdGhpcy5iYWNrZW5kTmFtZT10LG51bGwhPXRoaXMucmVnaXN0cnlbdF0/WzMsNF06KHRoaXMuYmFja2VuZEluc3RhbmNlPW51bGwsZT10aGlzLmluaXRpYWxpemVCYWNrZW5kKHQpLG49ZS5zdWNjZXNzLGUuYXN5bmNJbml0P1s0LG5dOlszLDJdKTtjYXNlIDE6cmV0dXJuIG89ci5zZW50KCksWzMsM107Y2FzZSAyOm89bixyLmxhYmVsPTM7Y2FzZSAzOmlmKCFvKXJldHVyblsyLCExXTtyLmxhYmVsPTQ7Y2FzZSA0OnJldHVybiB0aGlzLmJhY2tlbmRJbnN0YW5jZT10aGlzLnJlZ2lzdHJ5W3RdLHRoaXMuc2V0dXBSZWdpc3RlcmVkS2VybmVscygpLHRoaXMucHJvZmlsZXI9bmV3IHV0KHRoaXMuYmFja2VuZEluc3RhbmNlKSxbMiwhMF19fSkpfSkpfSx0LnByb3RvdHlwZS5zZXR1cFJlZ2lzdGVyZWRLZXJuZWxzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztmKHRoaXMuYmFja2VuZE5hbWUpLmZvckVhY2goKGZ1bmN0aW9uKGUpe251bGwhPWUuc2V0dXBGdW5jJiZlLnNldHVwRnVuYyh0LmJhY2tlbmRJbnN0YW5jZSl9KSl9LHQucHJvdG90eXBlLmRpc3Bvc2VSZWdpc3RlcmVkS2VybmVscz1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2YodCkuZm9yRWFjaCgoZnVuY3Rpb24obil7bnVsbCE9bi5kaXNwb3NlRnVuYyYmbi5kaXNwb3NlRnVuYyhlLnJlZ2lzdHJ5W3RdKX0pKX0sdC5wcm90b3R5cGUuaW5pdGlhbGl6ZUJhY2tlbmQ9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPXRoaXMucmVnaXN0cnlGYWN0b3J5W3RdO2lmKG51bGw9PW4pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGluaXRpYWxpemUgYmFja2VuZCBcIit0K1wiLCBubyByZWdpc3RyYXRpb24gZm91bmQuXCIpO3RyeXt2YXIgcj1uLmZhY3RvcnkoKTtpZihQcm9taXNlLnJlc29sdmUocik9PT1yKXt2YXIgbz0rK3RoaXMucGVuZGluZ0JhY2tlbmRJbml0SWQsYT1yLnRoZW4oKGZ1bmN0aW9uKG4pe3JldHVybiEobzxlLnBlbmRpbmdCYWNrZW5kSW5pdElkKSYmKGUucmVnaXN0cnlbdF09bixlLnBlbmRpbmdCYWNrZW5kSW5pdD1udWxsLCEwKX0pKS5jYXRjaCgoZnVuY3Rpb24obil7cmV0dXJuIShvPGUucGVuZGluZ0JhY2tlbmRJbml0SWQpJiYoZS5wZW5kaW5nQmFja2VuZEluaXQ9bnVsbCxjb25zb2xlLndhcm4oXCJJbml0aWFsaXphdGlvbiBvZiBiYWNrZW5kIFwiK3QrXCIgZmFpbGVkXCIpLGNvbnNvbGUud2FybihuLnN0YWNrfHxuLm1lc3NhZ2UpLCExKX0pKTtyZXR1cm4gdGhpcy5wZW5kaW5nQmFja2VuZEluaXQ9YSx7c3VjY2VzczphLGFzeW5jSW5pdDohMH19cmV0dXJuIHRoaXMucmVnaXN0cnlbdF09cix7c3VjY2VzczohMCxhc3luY0luaXQ6ITF9fWNhdGNoKGUpe3JldHVybiBjb25zb2xlLndhcm4oXCJJbml0aWFsaXphdGlvbiBvZiBiYWNrZW5kIFwiK3QrXCIgZmFpbGVkXCIpLGNvbnNvbGUud2FybihlLnN0YWNrfHxlLm1lc3NhZ2UpLHtzdWNjZXNzOiExLGFzeW5jSW5pdDohMX19fSx0LnByb3RvdHlwZS5yZW1vdmVCYWNrZW5kPWZ1bmN0aW9uKHQpe2lmKCEodCBpbiB0aGlzLnJlZ2lzdHJ5RmFjdG9yeSkpdGhyb3cgbmV3IEVycm9yKHQrXCIgYmFja2VuZCBub3QgZm91bmQgaW4gcmVnaXN0cnlcIik7dGhpcy5iYWNrZW5kTmFtZT09PXQmJm51bGwhPXRoaXMucGVuZGluZ0JhY2tlbmRJbml0JiZ0aGlzLnBlbmRpbmdCYWNrZW5kSW5pdElkKyssdCBpbiB0aGlzLnJlZ2lzdHJ5JiYodGhpcy5kaXNwb3NlUmVnaXN0ZXJlZEtlcm5lbHModCksdGhpcy5yZWdpc3RyeVt0XS5kaXNwb3NlKCksZGVsZXRlIHRoaXMucmVnaXN0cnlbdF0pLGRlbGV0ZSB0aGlzLnJlZ2lzdHJ5RmFjdG9yeVt0XSx0aGlzLmJhY2tlbmROYW1lPT09dCYmKHRoaXMucGVuZGluZ0JhY2tlbmRJbml0PW51bGwsdGhpcy5iYWNrZW5kTmFtZT1udWxsLHRoaXMuYmFja2VuZEluc3RhbmNlPW51bGwpfSx0LnByb3RvdHlwZS5nZXRTb3J0ZWRCYWNrZW5kcz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoMD09PU9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnlGYWN0b3J5KS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiTm8gYmFja2VuZCBmb3VuZCBpbiByZWdpc3RyeS5cIik7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnlGYWN0b3J5KS5zb3J0KChmdW5jdGlvbihlLG4pe3JldHVybiB0LnJlZ2lzdHJ5RmFjdG9yeVtuXS5wcmlvcml0eS10LnJlZ2lzdHJ5RmFjdG9yeVtlXS5wcmlvcml0eX0pKX0sdC5wcm90b3R5cGUuaW5pdGlhbGl6ZUJhY2tlbmRzQW5kUmV0dXJuQmVzdD1mdW5jdGlvbigpe2Zvcih2YXIgdD10aGlzLmdldFNvcnRlZEJhY2tlbmRzKCksZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgbj10W2VdLHI9dGhpcy5pbml0aWFsaXplQmFja2VuZChuKSxvPXIuc3VjY2VzcyxhPXIuYXN5bmNJbml0O2lmKGF8fG8pcmV0dXJue25hbWU6bixhc3luY0luaXQ6YX19dGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGluaXRpYWxpemUgYW55IGJhY2tlbmRzLCBhbGwgYmFja2VuZCBpbml0aWFsaXphdGlvbnMgZmFpbGVkLlwiKX0sdC5wcm90b3R5cGUubW92ZURhdGE9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KGUpLHI9bi5iYWNrZW5kLG89dGhpcy5yZWFkU3luYyhlKTtyLmRpc3Bvc2VEYXRhKGUpLG4uYmFja2VuZD10LHQubW92ZShlLG8sbi5zaGFwZSxuLmR0eXBlKSx0aGlzLnNob3VsZENoZWNrRm9yTWVtTGVha3MoKSYmdGhpcy5zdGF0ZS5udW1EYXRhTW92ZXNTdGFja1t0aGlzLnN0YXRlLm51bURhdGFNb3Zlc1N0YWNrLmxlbmd0aC0xXSsrfSx0LnByb3RvdHlwZS50aWR5PWZ1bmN0aW9uKHQsZSl7dmFyIG4scj10aGlzLG89bnVsbDtpZihudWxsPT1lKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiB0KXRocm93IG5ldyBFcnJvcihcIlBsZWFzZSBwcm92aWRlIGEgZnVuY3Rpb24gdG8gdGlkeSgpXCIpO2U9dH1lbHNle2lmKFwic3RyaW5nXCIhPXR5cGVvZiB0JiYhKHQgaW5zdGFuY2VvZiBTdHJpbmcpKXRocm93IG5ldyBFcnJvcihcIldoZW4gY2FsbGluZyB3aXRoIHR3byBhcmd1bWVudHMsIHRoZSBmaXJzdCBhcmd1bWVudCB0byB0aWR5KCkgbXVzdCBiZSBhIHN0cmluZ1wiKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIldoZW4gY2FsbGluZyB3aXRoIHR3byBhcmd1bWVudHMsIHRoZSAybmQgYXJndW1lbnQgdG8gdGlkeSgpIG11c3QgYmUgYSBmdW5jdGlvblwiKTtvPXR9cmV0dXJuIHRoaXMuc2NvcGVkUnVuKChmdW5jdGlvbigpe3JldHVybiByLnN0YXJ0U2NvcGUobyl9KSwoZnVuY3Rpb24oKXtyZXR1cm4gci5lbmRTY29wZShuKX0pLChmdW5jdGlvbigpe3JldHVybihuPWUoKSlpbnN0YW5jZW9mIFByb21pc2UmJmNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgcmV0dXJuIGEgUHJvbWlzZSBpbnNpZGUgb2YgdGlkeS5cIiksbn0pKX0sdC5wcm90b3R5cGUuc2NvcGVkUnVuPWZ1bmN0aW9uKHQsZSxuKXt0KCk7dHJ5e3ZhciByPW4oKTtyZXR1cm4gZSgpLHJ9Y2F0Y2godCl7dGhyb3cgZSgpLHR9fSx0LnByb3RvdHlwZS5uZXh0VGVuc29ySWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdC5uZXh0VGVuc29ySWQrK30sdC5wcm90b3R5cGUubmV4dFZhcmlhYmxlSWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdC5uZXh0VmFyaWFibGVJZCsrfSx0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLm1ha2VUZW5zb3JGcm9tRGF0YUlkKHQuZGF0YUlkLHQuc2hhcGUsdC5kdHlwZSksbj17eDp0fTtyZXR1cm4gdGhpcy5hZGRUYXBlTm9kZSh0aGlzLnN0YXRlLmFjdGl2ZVNjb3BlLm5hbWUsbixbZV0sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQudG9GbG9hdCgpfX19KSxbXSksZX0sdC5wcm90b3R5cGUucnVuS2VybmVsPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHRoaXMucnVuS2VybmVsRnVuYyhudWxsLGUsbnVsbCx0LG4scixvKX0sdC5wcm90b3R5cGUuc2hvdWxkQ2hlY2tGb3JNZW1MZWFrcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLkVOVi5nZXRCb29sKFwiSVNfVEVTVFwiKX0sdC5wcm90b3R5cGUuY2hlY2tLZXJuZWxGb3JNZW1MZWFrPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLmJhY2tlbmQubnVtRGF0YUlkcygpLG89MDtuLmZvckVhY2goKGZ1bmN0aW9uKHQpe28rPVwiY29tcGxleDY0XCI9PT10LmR0eXBlPzM6MX0pKTt2YXIgYT10aGlzLnN0YXRlLm51bURhdGFNb3Zlc1N0YWNrW3RoaXMuc3RhdGUubnVtRGF0YU1vdmVzU3RhY2subGVuZ3RoLTFdLGk9ci1lLW8tYTtpZihpPjApdGhyb3cgbmV3IEVycm9yKFwiQmFja2VuZCAnXCIrdGhpcy5iYWNrZW5kTmFtZStcIicgaGFzIGFuIGludGVybmFsIG1lbW9yeSBsZWFrIChcIitpK1wiIGRhdGEgaWRzKSBhZnRlciBydW5uaW5nICdcIit0K1wiJ1wiKX0sdC5wcm90b3R5cGUucnVuS2VybmVsRnVuYz1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2YXIgcyx1PXRoaXM7dm9pZCAwPT09YSYmKGE9W10pLHZvaWQgMD09PWkmJihpPVtdKTt2YXIgYz1bXSxoPXRoaXMuaXNUYXBlT24oKTtudWxsPT1yJiYocj1udWxsIT10aGlzLnN0YXRlLmFjdGl2ZVNjb3BlP3RoaXMuc3RhdGUuYWN0aXZlU2NvcGUubmFtZTpcIlwiKTt2YXIgZixkPWZ1bmN0aW9uKHQpe2gmJihjPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdS5rZWVwKHUuY2xvbmUodCkpfSkpKX0scD10aGlzLnN0YXRlLm51bUJ5dGVzLHY9dGhpcy5zdGF0ZS5udW1UZW5zb3JzO3RoaXMuc2hvdWxkQ2hlY2tGb3JNZW1MZWFrcygpJiZ0aGlzLnN0YXRlLm51bURhdGFNb3Zlc1N0YWNrLnB1c2goMCk7dmFyIG0sZz1sKHIsdGhpcy5iYWNrZW5kTmFtZSk7cmV0dXJuIGY9bnVsbCE9Zz9mdW5jdGlvbigpe3ZhciB0PXUuYmFja2VuZC5udW1EYXRhSWRzKCk7bT1nLmtlcm5lbEZ1bmMoe2lucHV0czplLGF0dHJzOm8sYmFja2VuZDp1LmJhY2tlbmR9KTt2YXIgbj1BcnJheS5pc0FycmF5KG0pP206W21dO3Uuc2hvdWxkQ2hlY2tGb3JNZW1MZWFrcygpJiZ1LmNoZWNrS2VybmVsRm9yTWVtTGVhayhyLHQsbik7dmFyIHM9bi5tYXAoKGZ1bmN0aW9uKHQpe3ZhciBlPXQuZGF0YUlkLG49dC5zaGFwZSxyPXQuZHR5cGU7cmV0dXJuIHUubWFrZVRlbnNvckZyb21EYXRhSWQoZSxuLHIpfSkpLGM9cy5maWx0ZXIoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGlbZV19KSk7cmV0dXJuIGQoKGF8fFtdKS5zbGljZSgpLmNvbmNhdChjKSksc306ZnVuY3Rpb24oKXt2YXIgZT11LmJhY2tlbmQubnVtRGF0YUlkcygpO209dS50aWR5KChmdW5jdGlvbigpe3JldHVybiB0KHUuYmFja2VuZCxkKX0pKTt2YXIgbj1BcnJheS5pc0FycmF5KG0pP206W21dO3JldHVybiB1LnNob3VsZENoZWNrRm9yTWVtTGVha3MoKSYmdS5jaGVja0tlcm5lbEZvck1lbUxlYWsocixlLG4pLG59LHRoaXMuc2NvcGVkUnVuKChmdW5jdGlvbigpe3JldHVybiB1LnN0YXRlLmtlcm5lbERlcHRoKyt9KSwoZnVuY3Rpb24oKXtyZXR1cm4gdS5zdGF0ZS5rZXJuZWxEZXB0aC0tfSksKGZ1bmN0aW9uKCl7cz11LkVOVi5nZXRCb29sKFwiREVCVUdcIik/dS5wcm9maWxlci5wcm9maWxlS2VybmVsKHIsZSwoZnVuY3Rpb24oKXtyZXR1cm4gZigpfSkpOmYoKX0pKSxoJiZ0aGlzLmFkZFRhcGVOb2RlKHIsZSxzLG4sYyksdGhpcy5zdGF0ZS5wcm9maWxpbmcmJnRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZS5rZXJuZWxzLnB1c2goe25hbWU6cixieXRlc0FkZGVkOnRoaXMuc3RhdGUubnVtQnl0ZXMtcCx0b3RhbEJ5dGVzU25hcHNob3Q6dGhpcy5zdGF0ZS5udW1CeXRlcyx0ZW5zb3JzQWRkZWQ6dGhpcy5zdGF0ZS5udW1UZW5zb3JzLXYsdG90YWxUZW5zb3JzU25hcHNob3Q6dGhpcy5zdGF0ZS5udW1UZW5zb3JzLGlucHV0U2hhcGVzOk9iamVjdC5rZXlzKGUpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGVbdF0uc2hhcGV9KSksb3V0cHV0U2hhcGVzOnMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pKX0pLEFycmF5LmlzQXJyYXkobSk/czpzWzBdfSx0LnByb3RvdHlwZS5tYWtlVGVuc29yPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKG51bGw9PXQpdGhyb3cgbmV3IEVycm9yKFwiVmFsdWVzIHBhc3NlZCB0byBlbmdpbmUubWFrZVRlbnNvcigpIGFyZSBudWxsXCIpO249bnx8XCJmbG9hdDMyXCIscj1yfHx0aGlzLmJhY2tlbmQ7dmFyIG89dDtcInN0cmluZ1wiPT09biYmSCh0WzBdKSYmKG89dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBydCh0KX0pKSk7dmFyIGE9ci53cml0ZShvLGUsbiksaT1uZXcgd3QoZSxuLGEsdGhpcy5uZXh0VGVuc29ySWQoKSk7aWYodGhpcy5pbmNSZWYoaSxyKSxcInN0cmluZ1wiPT09bil7dmFyIHM9dGhpcy5zdGF0ZS50ZW5zb3JJbmZvLmdldChhKSx1PUcobyk7dGhpcy5zdGF0ZS5udW1CeXRlcys9dS1zLmJ5dGVzLHMuYnl0ZXM9dX1yZXR1cm4gaX0sdC5wcm90b3R5cGUubWFrZVRlbnNvckZyb21EYXRhSWQ9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89bmV3IHd0KGUsbj1ufHxcImZsb2F0MzJcIix0LHRoaXMubmV4dFRlbnNvcklkKCkpO3JldHVybiB0aGlzLmluY1JlZihvLHIpLG99LHQucHJvdG90eXBlLm1ha2VWYXJpYWJsZT1mdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1lJiYoZT0hMCksbj1ufHx0aGlzLm5leHRWYXJpYWJsZUlkKCkudG9TdHJpbmcoKSxudWxsIT1yJiZyIT09dC5kdHlwZSYmKHQ9dC5hc1R5cGUocikpO3ZhciBvPW5ldyBTdCh0LGUsbix0aGlzLm5leHRUZW5zb3JJZCgpKTtpZihudWxsIT10aGlzLnN0YXRlLnJlZ2lzdGVyZWRWYXJpYWJsZXNbby5uYW1lXSl0aHJvdyBuZXcgRXJyb3IoXCJWYXJpYWJsZSB3aXRoIG5hbWUgXCIrby5uYW1lK1wiIHdhcyBhbHJlYWR5IHJlZ2lzdGVyZWRcIik7cmV0dXJuIHRoaXMuc3RhdGUucmVnaXN0ZXJlZFZhcmlhYmxlc1tvLm5hbWVdPW8sdGhpcy5pbmNSZWYobyx0aGlzLmJhY2tlbmQpLG99LHQucHJvdG90eXBlLmluY1JlZj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMuc3RhdGUudGVuc29ySW5mby5oYXModC5kYXRhSWQpP3RoaXMuc3RhdGUudGVuc29ySW5mby5nZXQodC5kYXRhSWQpLnJlZkNvdW50OjA7aWYodGhpcy5zdGF0ZS5udW1UZW5zb3JzKyssXCJzdHJpbmdcIj09PXQuZHR5cGUmJnRoaXMuc3RhdGUubnVtU3RyaW5nVGVuc29ycysrLDA9PT1uKXt0aGlzLnN0YXRlLm51bURhdGFCdWZmZXJzKys7dmFyIHI9MDtcImNvbXBsZXg2NFwiIT09dC5kdHlwZSYmXCJzdHJpbmdcIiE9PXQuZHR5cGUmJihyPXQuc2l6ZSp6KHQuZHR5cGUpKSx0aGlzLnN0YXRlLnRlbnNvckluZm8uc2V0KHQuZGF0YUlkLHtiYWNrZW5kOmV8fHRoaXMuYmFja2VuZCxkdHlwZTp0LmR0eXBlLHNoYXBlOnQuc2hhcGUsYnl0ZXM6cixyZWZDb3VudDowfSksdGhpcy5zdGF0ZS5udW1CeXRlcys9cn10aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KHQuZGF0YUlkKS5yZWZDb3VudCsrLHQgaW5zdGFuY2VvZiBTdHx8dGhpcy50cmFjayh0KX0sdC5wcm90b3R5cGUuZGlzcG9zZVRlbnNvcj1mdW5jdGlvbih0KXtpZih0aGlzLnN0YXRlLnRlbnNvckluZm8uaGFzKHQuZGF0YUlkKSl7dGhpcy5zdGF0ZS5udW1UZW5zb3JzLS0sXCJzdHJpbmdcIj09PXQuZHR5cGUmJnRoaXMuc3RhdGUubnVtU3RyaW5nVGVuc29ycy0tO3ZhciBlPXRoaXMuc3RhdGUudGVuc29ySW5mby5nZXQodC5kYXRhSWQpO2UucmVmQ291bnQ8PTE/KFwiY29tcGxleDY0XCIhPT10LmR0eXBlJiYodGhpcy5zdGF0ZS5udW1CeXRlcy09ZS5ieXRlcyksdGhpcy5zdGF0ZS5udW1EYXRhQnVmZmVycy0tLGUuYmFja2VuZC5kaXNwb3NlRGF0YSh0LmRhdGFJZCksdGhpcy5zdGF0ZS50ZW5zb3JJbmZvLmRlbGV0ZSh0LmRhdGFJZCkpOnRoaXMuc3RhdGUudGVuc29ySW5mby5nZXQodC5kYXRhSWQpLnJlZkNvdW50LS19fSx0LnByb3RvdHlwZS5kaXNwb3NlVmFyaWFibGVzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMuc3RhdGUucmVnaXN0ZXJlZFZhcmlhYmxlcyl7dmFyIGU9dGhpcy5zdGF0ZS5yZWdpc3RlcmVkVmFyaWFibGVzW3RdO3RoaXMuZGlzcG9zZVZhcmlhYmxlKGUpfX0sdC5wcm90b3R5cGUuZGlzcG9zZVZhcmlhYmxlPWZ1bmN0aW9uKHQpe3RoaXMuZGlzcG9zZVRlbnNvcih0KSxudWxsIT10aGlzLnN0YXRlLnJlZ2lzdGVyZWRWYXJpYWJsZXNbdC5uYW1lXSYmZGVsZXRlIHRoaXMuc3RhdGUucmVnaXN0ZXJlZFZhcmlhYmxlc1t0Lm5hbWVdfSx0LnByb3RvdHlwZS5tZW1vcnk9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmJhY2tlbmQubWVtb3J5KCk7cmV0dXJuIHQubnVtVGVuc29ycz10aGlzLnN0YXRlLm51bVRlbnNvcnMsdC5udW1EYXRhQnVmZmVycz10aGlzLnN0YXRlLm51bURhdGFCdWZmZXJzLHQubnVtQnl0ZXM9dGhpcy5zdGF0ZS5udW1CeXRlcyx0aGlzLnN0YXRlLm51bVN0cmluZ1RlbnNvcnM+MCYmKHQudW5yZWxpYWJsZT0hMCxudWxsPT10LnJlYXNvbnMmJih0LnJlYXNvbnM9W10pLHQucmVhc29ucy5wdXNoKFwiTWVtb3J5IHVzYWdlIGJ5IHN0cmluZyB0ZW5zb3JzIGlzIGFwcHJveGltYXRlICgyIGJ5dGVzIHBlciBjaGFyYWN0ZXIpXCIpKSx0fSx0LnByb3RvdHlwZS5wcm9maWxlPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSxuO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3JldHVybiB0aGlzLnN0YXRlLnByb2ZpbGluZz0hMCxlPXRoaXMuc3RhdGUubnVtQnl0ZXMsbj10aGlzLnN0YXRlLm51bVRlbnNvcnMsdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLmtlcm5lbHM9W10sdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLnJlc3VsdD10KCksdGhpcy5zdGF0ZS5wcm9maWxpbmc9ITEsdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLnBlYWtCeXRlcz1NYXRoLm1heC5hcHBseShNYXRoLHRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZS5rZXJuZWxzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudG90YWxCeXRlc1NuYXBzaG90fSkpKSx0aGlzLnN0YXRlLmFjdGl2ZVByb2ZpbGUubmV3Qnl0ZXM9dGhpcy5zdGF0ZS5udW1CeXRlcy1lLHRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZS5uZXdUZW5zb3JzPXRoaXMuc3RhdGUubnVtVGVuc29ycy1uLFsyLHRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZV19KSl9KSl9LHQucHJvdG90eXBlLmlzVGFwZU9uPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuc3RhdGUuZ3JhZGllbnREZXB0aD4wJiYwPT09dGhpcy5zdGF0ZS5rZXJuZWxEZXB0aH0sdC5wcm90b3R5cGUuYWRkVGFwZU5vZGU9ZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10aGlzLGk9e2lkOnRoaXMuc3RhdGUubmV4dFRhcGVOb2RlSWQrKyxrZXJuZWxOYW1lOnQsaW5wdXRzOmUsb3V0cHV0czpuLHNhdmVkOm99LHM9aCh0KTtudWxsIT1zJiYocj1zLmdyYWRGdW5jKSxudWxsIT1yJiYoaS5ncmFkaWVudD1mdW5jdGlvbih0KXtyZXR1cm4gdD10Lm1hcCgoZnVuY3Rpb24odCxlKXtpZihudWxsPT10KXt2YXIgcj1uW2VdLG89dHQoci5zaXplLHIuZHR5cGUpO3JldHVybiBhLm1ha2VUZW5zb3IobyxyLnNoYXBlLHIuZHR5cGUpfXJldHVybiB0fSkpLHIodC5sZW5ndGg+MT90OnRbMF0sbyl9KSx0aGlzLnN0YXRlLmFjdGl2ZVRhcGUucHVzaChpKX0sdC5wcm90b3R5cGUua2VlcD1mdW5jdGlvbih0KXtyZXR1cm4gdC5rZXB0PSEwLHR9LHQucHJvdG90eXBlLnN0YXJ0VGFwZT1mdW5jdGlvbigpezA9PT10aGlzLnN0YXRlLmdyYWRpZW50RGVwdGgmJih0aGlzLnN0YXRlLmFjdGl2ZVRhcGU9W10pLHRoaXMuc3RhdGUuZ3JhZGllbnREZXB0aCsrfSx0LnByb3RvdHlwZS5lbmRUYXBlPWZ1bmN0aW9uKCl7dGhpcy5zdGF0ZS5ncmFkaWVudERlcHRoLS19LHQucHJvdG90eXBlLnN0YXJ0U2NvcGU9ZnVuY3Rpb24odCl7dmFyIGU9e3RyYWNrOltdLG5hbWU6XCJ1bm5hbWVkIHNjb3BlXCIsaWQ6dGhpcy5zdGF0ZS5uZXh0U2NvcGVJZCsrfTt0JiYoZS5uYW1lPXQpLHRoaXMuc3RhdGUuc2NvcGVTdGFjay5wdXNoKGUpLHRoaXMuc3RhdGUuYWN0aXZlU2NvcGU9ZX0sdC5wcm90b3R5cGUuZW5kU2NvcGU9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMsbj1fdCh0KSxyPW5ldyBTZXQobi5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkfSkpKSxvPTA7bzx0aGlzLnN0YXRlLmFjdGl2ZVNjb3BlLnRyYWNrLmxlbmd0aDtvKyspe3ZhciBhPXRoaXMuc3RhdGUuYWN0aXZlU2NvcGUudHJhY2tbb107YS5rZXB0fHxyLmhhcyhhLmlkKXx8YS5kaXNwb3NlKCl9dmFyIGk9dGhpcy5zdGF0ZS5zY29wZVN0YWNrLnBvcCgpO3RoaXMuc3RhdGUuYWN0aXZlU2NvcGU9MD09PXRoaXMuc3RhdGUuc2NvcGVTdGFjay5sZW5ndGg/bnVsbDp0aGlzLnN0YXRlLnNjb3BlU3RhY2tbdGhpcy5zdGF0ZS5zY29wZVN0YWNrLmxlbmd0aC0xXSxuLmZvckVhY2goKGZ1bmN0aW9uKHQpe3Qua2VwdHx8dC5zY29wZUlkIT09aS5pZHx8ZS50cmFjayh0KX0pKX0sdC5wcm90b3R5cGUuZ3JhZGllbnRzPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPXRoaXM7aWYodm9pZCAwPT09ciYmKHI9ITEpLEMoZS5sZW5ndGg+MCwoZnVuY3Rpb24oKXtyZXR1cm5cImdyYWRpZW50cygpIHJlY2VpdmVkIGFuIGVtcHR5IGxpc3Qgb2YgeHMuXCJ9KSksbnVsbCE9biYmXCJmbG9hdDMyXCIhPT1uLmR0eXBlKXRocm93IG5ldyBFcnJvcihcImR5IG11c3QgaGF2ZSAnZmxvYXQzMicgZHR5cGUsIGJ1dCBoYXMgJ1wiK24uZHR5cGUrXCInXCIpO3ZhciBhPXRoaXMuc2NvcGVkUnVuKChmdW5jdGlvbigpe3JldHVybiBvLnN0YXJ0VGFwZSgpfSksKGZ1bmN0aW9uKCl7cmV0dXJuIG8uZW5kVGFwZSgpfSksKGZ1bmN0aW9uKCl7cmV0dXJuIG8udGlkeShcImZvcndhcmRcIix0KX0pKTtDKGEgaW5zdGFuY2VvZiB3dCwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSByZXN1bHQgeSByZXR1cm5lZCBieSBmKCkgbXVzdCBiZSBhIHRlbnNvci5cIn0pKTt2YXIgaT1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPXt9LG89e30sYT0wO2E8ZS5sZW5ndGg7YSsrKXJbZVthXS5pZF09ITA7Zm9yKGE9MDthPHQubGVuZ3RoO2ErKyl7dmFyIGk9KHA9dFthXSkuaW5wdXRzO2Zvcih2YXIgcyBpbiBpKXtmb3IodmFyIHU9aVtzXSxjPSExLGw9MDtsPGUubGVuZ3RoO2wrKylpZihyW3UuaWRdKXtwLm91dHB1dHMuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHJbdC5pZF09ITB9KSksYz0hMCxvW3AuaWRdPSEwO2JyZWFrfWlmKGMpYnJlYWt9fXZhciBoPXt9O2hbbi5pZF09ITA7dmFyIGY9e307Zm9yKGE9dC5sZW5ndGgtMTthPj0wO2EtLSlmb3IoaT0ocD10W2FdKS5pbnB1dHMsbD0wO2w8cC5vdXRwdXRzLmxlbmd0aDtsKyspaWYoaFtwLm91dHB1dHNbbF0uaWRdKXtmb3IodmFyIHMgaW4gaSloW2lbc10uaWRdPSEwLGZbcC5pZF09ITA7YnJlYWt9dmFyIGQ9W107Zm9yKGE9MDthPHQubGVuZ3RoO2ErKyl7dmFyIHA7aWYob1socD10W2FdKS5pZF0mJmZbcC5pZF0pe3ZhciB2PXt9O2Zvcih2YXIgcyBpbiBwLmlucHV0cyl7dmFyIG09cC5pbnB1dHNbc107clttLmlkXSYmKHZbc109bSl9dmFyIGc9T2JqZWN0LmFzc2lnbih7fSxwKTtnLmlucHV0cz12LGcub3V0cHV0cz1wLm91dHB1dHMsZC5wdXNoKGcpfX1yZXR1cm4gZH0odGhpcy5zdGF0ZS5hY3RpdmVUYXBlLGUsYSk7aWYoIXImJjA9PT1pLmxlbmd0aCYmZS5sZW5ndGg+MCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBncmFkaWVudCBvZiB5PWYoeCkgd2l0aCByZXNwZWN0IHRvIHguIE1ha2Ugc3VyZSB0aGF0IHRoZSBmIHlvdSBwYXNzZWQgZW5jbG9zZXMgYWxsIG9wZXJhdGlvbnMgdGhhdCBsZWFkIGZyb20geCB0byB5LlwiKTtyZXR1cm4gdGhpcy50aWR5KFwiYmFja3dhcmRcIiwoZnVuY3Rpb24oKXt2YXIgdCxyLHM9e307c1thLmlkXT1udWxsPT1uPyh0PWEuc2hhcGUscj1aKGsodCksXCJmbG9hdDMyXCIpLEx0Lm1ha2VUZW5zb3Iocix0LFwiZmxvYXQzMlwiKSk6bixmdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPWZ1bmN0aW9uKHIpe3ZhciBvPWVbcl0sYT1bXTtpZihvLm91dHB1dHMuZm9yRWFjaCgoZnVuY3Rpb24oZSl7dmFyIG49dFtlLmlkXTtudWxsIT1uP2EucHVzaChuKTphLnB1c2gobnVsbCl9KSksbnVsbD09by5ncmFkaWVudCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBncmFkaWVudDogZ3JhZGllbnQgZnVuY3Rpb24gbm90IGZvdW5kIGZvciBcIitvLmtlcm5lbE5hbWUrXCIuXCIpO3ZhciBpPW8uZ3JhZGllbnQoYSkscz1mdW5jdGlvbihlKXtpZighKGUgaW4gaSkpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGJhY2twcm9wIHRocm91Z2ggaW5wdXQgXCIrZStcIi4gQXZhaWxhYmxlIGdyYWRpZW50cyBmb3VuZDogXCIrT2JqZWN0LmtleXMoaSkrXCIuXCIpO3ZhciByPW4oKGZ1bmN0aW9uKCl7cmV0dXJuIGlbZV0oKX0pKTtpZihcImZsb2F0MzJcIiE9PXIuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgaW4gZ3JhZGllbnQgZm9yIG9wIFwiK28ua2VybmVsTmFtZStcIi4gVGhlIGdyYWRpZW50IG9mIGlucHV0IFwiK2UrXCIgbXVzdCBoYXZlICdmbG9hdDMyJyBkdHlwZSwgYnV0IGhhcyAnXCIrci5kdHlwZStcIidcIik7dmFyIGE9by5pbnB1dHNbZV07aWYoIVMoci5zaGFwZSxhLnNoYXBlKSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiBncmFkaWVudCBmb3Igb3AgXCIrby5rZXJuZWxOYW1lK1wiLiBUaGUgZ3JhZGllbnQgb2YgaW5wdXQgJ1wiK2UrXCInIGhhcyBzaGFwZSAnXCIrci5zaGFwZStcIicsIHdoaWNoIGRvZXMgbm90IG1hdGNoIHRoZSBzaGFwZSBvZiB0aGUgaW5wdXQgJ1wiK2Euc2hhcGUrXCInXCIpO2lmKG51bGw9PXRbYS5pZF0pdFthLmlkXT1yO2Vsc2V7dmFyIHM9dFthLmlkXTt0W2EuaWRdPXMuYWRkKHIpLHMuZGlzcG9zZSgpfX07Zm9yKHZhciB1IGluIG8uaW5wdXRzKXModSl9LG89ZS5sZW5ndGgtMTtvPj0wO28tLSlyKG8pfShzLGksKGZ1bmN0aW9uKHQpe3JldHVybiBvLnRpZHkodCl9KSk7dmFyIHU9ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBzW3QuaWRdfSkpO3JldHVybiAwPT09by5zdGF0ZS5ncmFkaWVudERlcHRoJiYoby5zdGF0ZS5hY3RpdmVUYXBlLmZvckVhY2goKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wLG49dC5zYXZlZDtlPG4ubGVuZ3RoO2UrKyl7bltlXS5kaXNwb3NlKCl9fSkpLG8uc3RhdGUuYWN0aXZlVGFwZT1udWxsKSx7dmFsdWU6YSxncmFkczp1fX0pKX0sdC5wcm90b3R5cGUuY3VzdG9tR3JhZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBDKFgodCksKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZiBwYXNzZWQgaW4gY3VzdG9tR3JhZChmKSBtdXN0IGJlIGEgZnVuY3Rpb24uXCJ9KSksZnVuY3Rpb24oKXtmb3IodmFyIG4scj1bXSxvPTA7bzxhcmd1bWVudHMubGVuZ3RoO28rKylyW29dPWFyZ3VtZW50c1tvXTtDKHIuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2Ygd3R9KSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJncyBwYXNzZWQgaW4gY3VzdG9tR3JhZChmKSh4MSwgeDIsLi4uKSBtdXN0IGFsbCBiZSB0ZW5zb3JzXCJ9KSk7dmFyIGE9e307cmV0dXJuIHIuZm9yRWFjaCgoZnVuY3Rpb24odCxlKXthW2VdPXR9KSksZS5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbihlLG8pe3JldHVybiBDKChuPXQuYXBwbHkodm9pZCAwLHIuY29uY2F0KFtvXSkpKS52YWx1ZSBpbnN0YW5jZW9mIHd0LChmdW5jdGlvbigpe3JldHVyblwiVGhlIGZ1bmN0aW9uIGYgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGBvYmoudmFsdWVgIGlzIGEgdGVuc29yXCJ9KSksQyhYKG4uZ3JhZEZ1bmMpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGZ1bmN0aW9uIGYgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGBvYmouZ3JhZEZ1bmNgIGlzIGEgZnVuY3Rpb24uXCJ9KSksbi52YWx1ZX0pLGEsKGZ1bmN0aW9uKHQsZSl7dmFyIG89bi5ncmFkRnVuYyh0LGUpLGE9QXJyYXkuaXNBcnJheShvKT9vOltvXTtDKGEubGVuZ3RoPT09ci5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZnVuY3Rpb24gZiBwYXNzZWQgaW4gY3VzdG9tR3JhZChmKSBtdXN0IHJldHVybiBhbiBvYmplY3Qgd2hlcmUgYG9iai5ncmFkRnVuY2AgaXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHNhbWUgbnVtYmVyIG9mIHRlbnNvcnMgYXMgaW5wdXRzIHBhc3NlZCB0byBmKC4uLikuXCJ9KSksQyhhLmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIHd0fSkpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGZ1bmN0aW9uIGYgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGBvYmouZ3JhZEZ1bmNgIGlzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgbGlzdCBvZiBvbmx5IHRlbnNvcnMuXCJ9KSk7dmFyIGk9e307cmV0dXJuIGEuZm9yRWFjaCgoZnVuY3Rpb24odCxlKXtpW2VdPWZ1bmN0aW9uKCl7cmV0dXJuIHR9fSkpLGl9KSl9fSx0LnByb3RvdHlwZS5yZWFkU3luYz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5zdGF0ZS50ZW5zb3JJbmZvLmdldCh0KS5iYWNrZW5kLnJlYWRTeW5jKHQpfSx0LnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KHQpLmJhY2tlbmQucmVhZCh0KX0sdC5wcm90b3R5cGUudGltZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbjtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOnJldHVybiBlPWV0KCksWzQsdGhpcy5iYWNrZW5kLnRpbWUodCldO2Nhc2UgMTpyZXR1cm4obj1yLnNlbnQoKSkud2FsbE1zPWV0KCktZSxbMixuXX19KSl9KSl9LHQucHJvdG90eXBlLnRyYWNrPWZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT10aGlzLnN0YXRlLmFjdGl2ZVNjb3BlJiYodC5zY29wZUlkPXRoaXMuc3RhdGUuYWN0aXZlU2NvcGUuaWQsdGhpcy5zdGF0ZS5hY3RpdmVTY29wZS50cmFjay5wdXNoKHQpKSx0fSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJyZWdpc3RlcmVkVmFyaWFibGVzXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnN0YXRlLnJlZ2lzdGVyZWRWYXJpYWJsZXN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5wZW5kaW5nQmFja2VuZEluaXRJZCsrLHRoaXMuc3RhdGUuZGlzcG9zZSgpLHRoaXMuRU5WLnJlc2V0KCksdGhpcy5zdGF0ZT1uZXcgQnQsdGhpcy5yZWdpc3RyeSl0aGlzLmRpc3Bvc2VSZWdpc3RlcmVkS2VybmVscyh0KSx0aGlzLnJlZ2lzdHJ5W3RdLmRpc3Bvc2UoKSxkZWxldGUgdGhpcy5yZWdpc3RyeVt0XTt0aGlzLmJhY2tlbmROYW1lPW51bGwsdGhpcy5iYWNrZW5kSW5zdGFuY2U9bnVsbCx0aGlzLnBlbmRpbmdCYWNrZW5kSW5pdD1udWxsfSx0Lm5leHRUZW5zb3JJZD0wLHQubmV4dFZhcmlhYmxlSWQ9MCx0fSgpO3ZhciBMdD1mdW5jdGlvbigpe3ZhciB0PWZ1bmN0aW9uKCl7aWYobnVsbD09T3Qpe3ZhciB0PXZvaWQgMDtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXQ9d2luZG93O2Vsc2UgaWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbCl0PWdsb2JhbDtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzKXQ9cHJvY2VzcztlbHNle2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBzZWxmKXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBmaW5kIGEgZ2xvYmFsIG9iamVjdFwiKTt0PXNlbGZ9T3Q9dH1yZXR1cm4gT3R9KCk7aWYobnVsbD09dC5fdGZlbmdpbmUpe3ZhciBlPW5ldyBvKHQpO3QuX3RmZW5naW5lPW5ldyBQdChlKX1yZXR1cm4gZnVuY3Rpb24odCl7cz10fSh0Ll90ZmVuZ2luZS5FTlYpLHl0PWZ1bmN0aW9uKCl7cmV0dXJuIHQuX3RmZW5naW5lfSx0Ll90ZmVuZ2luZX0oKTtmdW5jdGlvbiBXdCgpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3cmJm51bGwhPXdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIiE9dHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlfXZhciBVdD1pKCk7VXQucmVnaXN0ZXJGbGFnKFwiREVCVUdcIiwoZnVuY3Rpb24oKXtyZXR1cm4hMX0pLChmdW5jdGlvbih0KXt0JiZjb25zb2xlLndhcm4oXCJEZWJ1Z2dpbmcgbW9kZSBpcyBPTi4gVGhlIG91dHB1dCBvZiBldmVyeSBtYXRoIGNhbGwgd2lsbCBiZSBkb3dubG9hZGVkIHRvIENQVSBhbmQgY2hlY2tlZCBmb3IgTmFOcy4gVGhpcyBzaWduaWZpY2FudGx5IGltcGFjdHMgcGVyZm9ybWFuY2UuXCIpfSkpLFV0LnJlZ2lzdGVyRmxhZyhcIklTX0JST1dTRVJcIiwoZnVuY3Rpb24oKXtyZXR1cm4gV3QoKX0pKSxVdC5yZWdpc3RlckZsYWcoXCJJU19OT0RFXCIsKGZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHByb2Nlc3MmJnZvaWQgMCE9PXByb2Nlc3MudmVyc2lvbnMmJnZvaWQgMCE9PXByb2Nlc3MudmVyc2lvbnMubm9kZX0pKSxVdC5yZWdpc3RlckZsYWcoXCJJU19DSFJPTUVcIiwoZnVuY3Rpb24oKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2YgbmF2aWdhdG9yJiZudWxsIT1uYXZpZ2F0b3ImJm51bGwhPW5hdmlnYXRvci51c2VyQWdlbnQmJi9DaHJvbWUvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkmJi9Hb29nbGUgSW5jLy50ZXN0KG5hdmlnYXRvci52ZW5kb3IpfSkpLFV0LnJlZ2lzdGVyRmxhZyhcIlBST0RcIiwoZnVuY3Rpb24oKXtyZXR1cm4hMX0pKSxVdC5yZWdpc3RlckZsYWcoXCJURU5TT1JMSUtFX0NIRUNLX1NIQVBFX0NPTlNJU1RFTkNZXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIFV0LmdldEJvb2woXCJERUJVR1wiKX0pKSxVdC5yZWdpc3RlckZsYWcoXCJERVBSRUNBVElPTl9XQVJOSU5HU19FTkFCTEVEXCIsKGZ1bmN0aW9uKCl7cmV0dXJuITB9KSksVXQucmVnaXN0ZXJGbGFnKFwiSVNfVEVTVFwiLChmdW5jdGlvbigpe3JldHVybiExfSkpO3ZhciBWdCx6dCxHdCxIdD17fSxxdD17YWxwaGE6ITEsYW50aWFsaWFzOiExLHByZW11bHRpcGxpZWRBbHBoYTohMSxwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6ITEsZGVwdGg6ITEsc3RlbmNpbDohMSxmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0OiEwfTtmdW5jdGlvbiBLdCh0LGUpe0h0W3RdPWV9ZnVuY3Rpb24ganQodCl7dCBpbiBIdHx8KEh0W3RdPWZ1bmN0aW9uKHQpe2lmKDEhPT10JiYyIT09dCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZ2V0IFdlYkdMIHJlbmRlcmluZyBjb250ZXh0LCBXZWJHTCBpcyBkaXNhYmxlZC5cIik7dmFyIGU9ZnVuY3Rpb24odCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIE9mZnNjcmVlbkNhbnZhcyYmMj09PXQpcmV0dXJuIG5ldyBPZmZzY3JlZW5DYW52YXMoMzAwLDE1MCk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50KXJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgYSBjYW52YXMgaW4gdGhpcyBjb250ZXh0XCIpfSh0KTtpZihlLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsKGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxkZWxldGUgSHRbdF19KSwhMSksMT09PXQpcmV0dXJuIGUuZ2V0Q29udGV4dChcIndlYmdsXCIscXQpfHxlLmdldENvbnRleHQoXCJleHBlcmltZW50YWwtd2ViZ2xcIixxdCk7cmV0dXJuIGUuZ2V0Q29udGV4dChcIndlYmdsMlwiLHF0KX0odCkpO3ZhciBlPUh0W3RdO3JldHVybiBlLmlzQ29udGV4dExvc3QoKT8oZGVsZXRlIEh0W3RdLGp0KHQpKTooZS5kaXNhYmxlKGUuREVQVEhfVEVTVCksZS5kaXNhYmxlKGUuU1RFTkNJTF9URVNUKSxlLmRpc2FibGUoZS5CTEVORCksZS5kaXNhYmxlKGUuRElUSEVSKSxlLmRpc2FibGUoZS5QT0xZR09OX09GRlNFVF9GSUxMKSxlLmRpc2FibGUoZS5TQU1QTEVfQ09WRVJBR0UpLGUuZW5hYmxlKGUuU0NJU1NPUl9URVNUKSxlLmVuYWJsZShlLkNVTExfRkFDRSksZS5jdWxsRmFjZShlLkJBQ0spLEh0W3RdKX1mdW5jdGlvbiBYdCh0LGUpe3JldHVybltlLHRdfWZ1bmN0aW9uIFl0KHQpe3ZhciBlPWsodCk7cmV0dXJuIFQoTWF0aC5jZWlsKGUvNCkpfWZ1bmN0aW9uICR0KHQsZSl7cmV0dXJuW01hdGgubWF4KDEsTWF0aC5jZWlsKGUvMikpLE1hdGgubWF4KDEsTWF0aC5jZWlsKHQvMikpXX1mdW5jdGlvbiBRdCh0LGUpe3ZhciBuLHIsbyxhLHMsdSxjLGwsaCxmPXQ7cmV0dXJuIDI9PT1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT8obj1mLlIzMkYscj1mLlIxNkYsbz1mLlJHQkExNkYsYT1mLlJHQkEzMkYscz1mLlJFRCx1PTQsYz0xLGw9Zi5IQUxGX0ZMT0FULGg9Zi5GTE9BVCk6KG49dC5SR0JBLHI9dC5SR0JBLG89dC5SR0JBLGE9Zi5SR0JBLHM9dC5SR0JBLHU9NCxjPTQsbD1udWxsIT1lP2UuSEFMRl9GTE9BVF9PRVM6bnVsbCxoPXQuRkxPQVQpLHtpbnRlcm5hbEZvcm1hdEZsb2F0Om4saW50ZXJuYWxGb3JtYXRIYWxmRmxvYXQ6cixpbnRlcm5hbEZvcm1hdFBhY2tlZEhhbGZGbG9hdDpvLGludGVybmFsRm9ybWF0UGFja2VkRmxvYXQ6YSx0ZXh0dXJlRm9ybWF0RmxvYXQ6cyxkb3dubG9hZFRleHR1cmVGb3JtYXQ6dC5SR0JBLGRvd25sb2FkVW5wYWNrTnVtQ2hhbm5lbHM6dSxkZWZhdWx0TnVtQ2hhbm5lbHM6Yyx0ZXh0dXJlVHlwZUhhbGZGbG9hdDpsLHRleHR1cmVUeXBlRmxvYXQ6aH19ZnVuY3Rpb24gSnQodCxlLG4pe3ZhciByPW4oKTtyZXR1cm4gZSYmZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRFcnJvcigpO2lmKGUhPT10Lk5PX0VSUk9SKXRocm93IG5ldyBFcnJvcihcIldlYkdMIEVycm9yOiBcIituZSh0LGUpKX0odCkscn0hZnVuY3Rpb24odCl7dFt0LkRFTlNFPTBdPVwiREVOU0VcIix0W3QuU0hBUkVEX0JBVENIPTFdPVwiU0hBUkVEX0JBVENIXCJ9KFZ0fHwoVnQ9e30pKSxmdW5jdGlvbih0KXt0W3QuUkVOREVSPTBdPVwiUkVOREVSXCIsdFt0LlVQTE9BRD0xXT1cIlVQTE9BRFwiLHRbdC5QSVhFTFM9Ml09XCJQSVhFTFNcIix0W3QuRE9XTkxPQUQ9M109XCJET1dOTE9BRFwifSh6dHx8KHp0PXt9KSksZnVuY3Rpb24odCl7dFt0LlVOUEFDS0VEX0ZMT0FUMTY9MF09XCJVTlBBQ0tFRF9GTE9BVDE2XCIsdFt0LlVOUEFDS0VEX0ZMT0FUMzI9MV09XCJVTlBBQ0tFRF9GTE9BVDMyXCIsdFt0LlBBQ0tFRF80WDFfVU5TSUdORURfQllURT0yXT1cIlBBQ0tFRF80WDFfVU5TSUdORURfQllURVwiLHRbdC5QQUNLRURfMlgyX0ZMT0FUMzI9M109XCJQQUNLRURfMlgyX0ZMT0FUMzJcIix0W3QuUEFDS0VEXzJYMl9GTE9BVDE2PTRdPVwiUEFDS0VEXzJYMl9GTE9BVDE2XCJ9KEd0fHwoR3Q9e30pKTt2YXIgWnQ9NS45NmUtOCx0ZT02NTUwNDtmdW5jdGlvbiBlZSh0KXtyZXR1cm4hIShpKCkuZ2V0Qm9vbChcIldFQkdMX1JFTkRFUl9GTE9BVDMyX0VOQUJMRURcIil8fDA9PT10fHxadDxNYXRoLmFicyh0KSYmTWF0aC5hYnModCk8dGUpfWZ1bmN0aW9uIG5lKHQsZSl7c3dpdGNoKGUpe2Nhc2UgdC5OT19FUlJPUjpyZXR1cm5cIk5PX0VSUk9SXCI7Y2FzZSB0LklOVkFMSURfRU5VTTpyZXR1cm5cIklOVkFMSURfRU5VTVwiO2Nhc2UgdC5JTlZBTElEX1ZBTFVFOnJldHVyblwiSU5WQUxJRF9WQUxVRVwiO2Nhc2UgdC5JTlZBTElEX09QRVJBVElPTjpyZXR1cm5cIklOVkFMSURfT1BFUkFUSU9OXCI7Y2FzZSB0LklOVkFMSURfRlJBTUVCVUZGRVJfT1BFUkFUSU9OOnJldHVyblwiSU5WQUxJRF9GUkFNRUJVRkZFUl9PUEVSQVRJT05cIjtjYXNlIHQuT1VUX09GX01FTU9SWTpyZXR1cm5cIk9VVF9PRl9NRU1PUllcIjtjYXNlIHQuQ09OVEVYVF9MT1NUX1dFQkdMOnJldHVyblwiQ09OVEVYVF9MT1NUX1dFQkdMXCI7ZGVmYXVsdDpyZXR1cm5cIlVua25vd24gZXJyb3IgY29kZSBcIitlfX1mdW5jdGlvbiByZSh0LGUsbil7cmV0dXJuIGtlKHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5nZXRFeHRlbnNpb24obil9KSwnRXh0ZW5zaW9uIFwiJytuKydcIiBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3Nlci4nKX1mdW5jdGlvbiBvZSh0LGUsbil7dmFyIHI9a2UodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmNyZWF0ZVNoYWRlcih0LlZFUlRFWF9TSEFERVIpfSksXCJVbmFibGUgdG8gY3JlYXRlIHZlcnRleCBXZWJHTFNoYWRlci5cIik7aWYoSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnNoYWRlclNvdXJjZShyLG4pfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jb21waWxlU2hhZGVyKHIpfSkpLCExPT09dC5nZXRTaGFkZXJQYXJhbWV0ZXIocix0LkNPTVBJTEVfU1RBVFVTKSl0aHJvdyBjb25zb2xlLmxvZyh0LmdldFNoYWRlckluZm9Mb2cocikpLG5ldyBFcnJvcihcIkZhaWxlZCB0byBjb21waWxlIHZlcnRleCBzaGFkZXIuXCIpO3JldHVybiByfWZ1bmN0aW9uIGFlKHQsZSxuKXt2YXIgcj1rZSh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuY3JlYXRlU2hhZGVyKHQuRlJBR01FTlRfU0hBREVSKX0pLFwiVW5hYmxlIHRvIGNyZWF0ZSBmcmFnbWVudCBXZWJHTFNoYWRlci5cIik7aWYoSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnNoYWRlclNvdXJjZShyLG4pfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jb21waWxlU2hhZGVyKHIpfSkpLCExPT09dC5nZXRTaGFkZXJQYXJhbWV0ZXIocix0LkNPTVBJTEVfU1RBVFVTKSl0aHJvdyBmdW5jdGlvbih0LGUpe3ZhciBuPXVlLmV4ZWMoZSk7aWYobnVsbD09bilyZXR1cm4gY29uc29sZS5sb2coXCJDb3VsZG4ndCBwYXJzZSBsaW5lIG51bWJlciBpbiBlcnJvcjogXCIrZSksdm9pZCBjb25zb2xlLmxvZyh0KTtmb3IodmFyIHI9K25bMV0sbz10LnNwbGl0KFwiXFxuXCIpLGE9by5sZW5ndGgudG9TdHJpbmcoKS5sZW5ndGgrMixpPW8ubWFwKChmdW5jdGlvbih0LGUpe3JldHVybiBOKChlKzEpLnRvU3RyaW5nKCksYSkrdH0pKSxzPTAsdT0wO3U8aS5sZW5ndGg7dSsrKXM9TWF0aC5tYXgoaVt1XS5sZW5ndGgscyk7dmFyIGM9aS5zbGljZSgwLHItMSksbD1pLnNsaWNlKHItMSxyKSxoPWkuc2xpY2Uocik7Y29uc29sZS5sb2coYy5qb2luKFwiXFxuXCIpKSxjb25zb2xlLmxvZyhlLnNwbGl0KFwiXFxuXCIpWzBdKSxjb25zb2xlLmxvZyhcIiVjIFwiK04obFswXSxzKSxcImJvcmRlcjoxcHggc29saWQgcmVkOyBiYWNrZ3JvdW5kLWNvbG9yOiNlM2QyZDI7IGNvbG9yOiNhNjE3MTdcIiksY29uc29sZS5sb2coaC5qb2luKFwiXFxuXCIpKX0obix0LmdldFNoYWRlckluZm9Mb2cocikpLG5ldyBFcnJvcihcIkZhaWxlZCB0byBjb21waWxlIGZyYWdtZW50IHNoYWRlci5cIik7cmV0dXJuIHJ9dmFyIGllLHNlLHVlPS9FUlJPUjogWzAtOV0rOihbMC05XSspOi9nO2Z1bmN0aW9uIGNlKHQsZSl7cmV0dXJuIGtlKHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVQcm9ncmFtKCl9KSxcIlVuYWJsZSB0byBjcmVhdGUgV2ViR0xQcm9ncmFtLlwiKX1mdW5jdGlvbiBsZSh0LGUsbil7aWYoSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmxpbmtQcm9ncmFtKG4pfSkpLCExPT09dC5nZXRQcm9ncmFtUGFyYW1ldGVyKG4sdC5MSU5LX1NUQVRVUykpdGhyb3cgY29uc29sZS5sb2codC5nZXRQcm9ncmFtSW5mb0xvZyhuKSksbmV3IEVycm9yKFwiRmFpbGVkIHRvIGxpbmsgdmVydGV4IGFuZCBmcmFnbWVudCBzaGFkZXJzLlwiKX1mdW5jdGlvbiBoZSh0LGUsbil7aWYoSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnZhbGlkYXRlUHJvZ3JhbShuKX0pKSwhMT09PXQuZ2V0UHJvZ3JhbVBhcmFtZXRlcihuLHQuVkFMSURBVEVfU1RBVFVTKSl0aHJvdyBjb25zb2xlLmxvZyh0LmdldFByb2dyYW1JbmZvTG9nKG4pKSxuZXcgRXJyb3IoXCJTaGFkZXIgcHJvZ3JhbSB2YWxpZGF0aW9uIGZhaWxlZC5cIil9ZnVuY3Rpb24gZmUodCxlLG4pe3ZhciByPWtlKHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVCdWZmZXIoKX0pLFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTEJ1ZmZlclwiKTtyZXR1cm4gSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRCdWZmZXIodC5BUlJBWV9CVUZGRVIscil9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJ1ZmZlckRhdGEodC5BUlJBWV9CVUZGRVIsbix0LlNUQVRJQ19EUkFXKX0pKSxyfWZ1bmN0aW9uIGRlKHQsZSxuKXt2YXIgcj1rZSh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuY3JlYXRlQnVmZmVyKCl9KSxcIlVuYWJsZSB0byBjcmVhdGUgV2ViR0xCdWZmZXJcIik7cmV0dXJuIEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuRUxFTUVOVF9BUlJBWV9CVUZGRVIscil9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJ1ZmZlckRhdGEodC5FTEVNRU5UX0FSUkFZX0JVRkZFUixuLHQuU1RBVElDX0RSQVcpfSkpLHJ9ZnVuY3Rpb24gcGUodCxlKXtyZXR1cm4ga2UodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmNyZWF0ZVRleHR1cmUoKX0pLFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTFRleHR1cmUuXCIpfWZ1bmN0aW9uIHZlKHQsZSl7dmFyIG49aSgpLmdldE51bWJlcihcIldFQkdMX01BWF9URVhUVVJFX1NJWkVcIik7aWYodDw9MHx8ZTw9MCl7dmFyIHI9XCJbXCIrdCtcInhcIitlK1wiXVwiO3Rocm93IG5ldyBFcnJvcihcIlJlcXVlc3RlZCB0ZXh0dXJlIHNpemUgXCIrcitcIiBpcyBpbnZhbGlkLlwiKX1pZih0Pm58fGU+bil7cj1cIltcIit0K1wieFwiK2UrXCJdXCI7dGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGVkIHRleHR1cmUgc2l6ZSBcIityK1wiIGdyZWF0ZXIgdGhhbiBXZWJHTCBtYXhpbXVtIG9uIHRoaXMgYnJvd3NlciAvIEdQVSBcIisoXCJbXCIrbitcInhcIituK1wiXVwiKStcIi5cIil9fWZ1bmN0aW9uIG1lKHQsZSl7cmV0dXJuIGtlKHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVGcmFtZWJ1ZmZlcigpfSksXCJVbmFibGUgdG8gY3JlYXRlIFdlYkdMRnJhbWVidWZmZXIuXCIpfWZ1bmN0aW9uIGdlKHQsZSxuLHIsbyxhLGkscyl7dmFyIHU9dC5nZXRBdHRyaWJMb2NhdGlvbihuLHIpO3JldHVybi0xIT09dSYmKEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuQVJSQVlfQlVGRkVSLG8pfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHUsYSx0LkZMT0FULCExLGkscyl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHUpfSkpLCEwKX1mdW5jdGlvbiB5ZSh0LGUsbixyKXtTZSh0LHIpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5hY3RpdmVUZXh0dXJlKHQuVEVYVFVSRTArcil9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxuKX0pKX1mdW5jdGlvbiB4ZSh0LGUsbixyKXtyZXR1cm4ga2UodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmdldFVuaWZvcm1Mb2NhdGlvbihuLHIpfSksJ3VuaWZvcm0gXCInK3IrJ1wiIG5vdCBwcmVzZW50IGluIHByb2dyYW0uJyl9ZnVuY3Rpb24gYmUodCxlLG4pe3JldHVybiB0LmdldFVuaWZvcm1Mb2NhdGlvbihlLG4pfWZ1bmN0aW9uIHdlKHQsZSxuLHIsbyxhKXtKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHllKHQsZSxyLGEpfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC51bmlmb3JtMWkobyxhKX0pKX1mdW5jdGlvbiBDZSh0LGUsbixyKXtKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZEZyYW1lYnVmZmVyKHQuRlJBTUVCVUZGRVIscil9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmZyYW1lYnVmZmVyVGV4dHVyZTJEKHQuRlJBTUVCVUZGRVIsdC5DT0xPUl9BVFRBQ0hNRU5UMCx0LlRFWFRVUkVfMkQsbiwwKX0pKX1mdW5jdGlvbiBFZSh0LGUsbil7SnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRGcmFtZWJ1ZmZlcih0LkZSQU1FQlVGRkVSLG4pfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5mcmFtZWJ1ZmZlclRleHR1cmUyRCh0LkZSQU1FQlVGRkVSLHQuQ09MT1JfQVRUQUNITUVOVDAsdC5URVhUVVJFXzJELG51bGwsMCl9KSl9ZnVuY3Rpb24gUmUodCl7dmFyIGU9dC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKHQuRlJBTUVCVUZGRVIpO2lmKGUhPT10LkZSQU1FQlVGRkVSX0NPTVBMRVRFKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGJpbmRpbmcgZnJhbWVidWZmZXI6IFwiK0llKHQsZSkpfWZ1bmN0aW9uIEllKHQsZSl7c3dpdGNoKGUpe2Nhc2UgdC5GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlQ6cmV0dXJuXCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlRcIjtjYXNlIHQuRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlQ6cmV0dXJuXCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVFwiO2Nhc2UgdC5GUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlM6cmV0dXJuXCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlNcIjtjYXNlIHQuRlJBTUVCVUZGRVJfVU5TVVBQT1JURUQ6cmV0dXJuXCJGUkFNRUJVRkZFUl9VTlNVUFBPUlRFRFwiO2RlZmF1bHQ6cmV0dXJuXCJ1bmtub3duIGVycm9yIFwiK2V9fWZ1bmN0aW9uIGtlKHQsZSxuLHIpe3ZhciBvPUp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gbigpfSkpO2lmKG51bGw9PW8pdGhyb3cgbmV3IEVycm9yKHIpO3JldHVybiBvfWZ1bmN0aW9uIFNlKHQsZSl7dmFyIG49dC5NQVhfQ09NQklORURfVEVYVFVSRV9JTUFHRV9VTklUUy0xLHI9ZSt0LlRFWFRVUkUwO2lmKHI8dC5URVhUVVJFMHx8cj5uKXRocm93IG5ldyBFcnJvcihcInRleHR1cmVVbml0IG11c3QgYmUgaW4gXCIrKFwiW2dsLlRFWFRVUkUwLCBnbC5URVhUVVJFXCIrbitcIl1cIikrXCIuXCIpfWZ1bmN0aW9uIEFlKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPTIpLGsodC5zbGljZSgwLHQubGVuZ3RoLWUpKX1mdW5jdGlvbiBEZSh0KXtpZigwPT09dC5sZW5ndGgpdGhyb3cgRXJyb3IoXCJDYW5ub3QgZ2V0IHJvd3MgYW5kIGNvbHVtbnMgb2YgYW4gZW1wdHkgc2hhcGUgYXJyYXkuXCIpO3JldHVyblt0Lmxlbmd0aD4xP3RbdC5sZW5ndGgtMl06MSx0W3QubGVuZ3RoLTFdXX1mdW5jdGlvbiBUZSh0KXt2YXIgZT1bMSwxLDFdO3JldHVybiAwPT09dC5sZW5ndGh8fDE9PT10Lmxlbmd0aCYmMT09PXRbMF18fChlPVtBZSh0KV0uY29uY2F0KERlKHQpKSksZX1mdW5jdGlvbiBOZSh0LGUpe3ZhciBuO3ZvaWQgMD09PWUmJihlPSExKTt2YXIgcj1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfTUFYX1RFWFRVUkVfU0laRVwiKTtpZihlJiYocio9MiwxPT09KHQ9dC5tYXAoKGZ1bmN0aW9uKGUsbil7cmV0dXJuIG4+PXQubGVuZ3RoLTI/Yih0W25dKTp0W25dfSkpKS5sZW5ndGgmJih0PVsyLHRbMF1dKSksMiE9PXQubGVuZ3RoKXt2YXIgbz1NKHQpO3Q9by5uZXdTaGFwZX12YXIgYT1rKHQpO2lmKHQubGVuZ3RoPD0xJiZhPD1yKXJldHVyblsxLGFdO2lmKDI9PT10Lmxlbmd0aCYmdFswXTw9ciYmdFsxXTw9cilyZXR1cm4gdDtpZigzPT09dC5sZW5ndGgmJnRbMF0qdFsxXTw9ciYmdFsyXTw9cilyZXR1cm5bdFswXSp0WzFdLHRbMl1dO2lmKDM9PT10Lmxlbmd0aCYmdFswXTw9ciYmdFsxXSp0WzJdPD1yKXJldHVyblt0WzBdLHRbMV0qdFsyXV07aWYoND09PXQubGVuZ3RoJiZ0WzBdKnRbMV0qdFsyXTw9ciYmdFszXTw9cilyZXR1cm5bdFswXSp0WzFdKnRbMl0sdFszXV07aWYoND09PXQubGVuZ3RoJiZ0WzBdPD1yJiZ0WzFdKnRbMl0qdFszXTw9cilyZXR1cm5bdFswXSx0WzFdKnRbMl0qdFszXV07aWYoZSl7dmFyIHM9QWUodCksdT0yLGM9MjtyZXR1cm4gdC5sZW5ndGgmJih1PShuPURlKHQpKVswXSxjPW5bMV0pLFQoYT1zKih1LzIpKihjLzIpKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiAyKnR9KSl9cmV0dXJuIFQoYSl9ZnVuY3Rpb24gRmUodCl7cmV0dXJuIHQlMj09MH1mdW5jdGlvbiBfZSh0LGUpe2lmKFModD10LnNsaWNlKC0yKSxlPWUuc2xpY2UoLTIpKSlyZXR1cm4hMDtpZighdC5sZW5ndGh8fCFlLmxlbmd0aClyZXR1cm4hMDtpZigwPT09dFswXXx8MD09PXRbMV18fDA9PT1lWzBdfHwwPT09ZVsxXSlyZXR1cm4hMDtpZih0Lmxlbmd0aCE9PWUubGVuZ3RoKXt2YXIgbj10LnNsaWNlKC0xKVswXSxyPWUuc2xpY2UoLTEpWzBdO2lmKG49PT1yKXJldHVybiEwO2lmKEZlKG4pJiZGZShyKSYmKDE9PT10WzBdfHwxPT09ZVswXSkpcmV0dXJuITB9cmV0dXJuIHRbMV09PT1lWzFdJiZGZSh0WzBdKSYmRmUoZVswXSl9ZnVuY3Rpb24gT2UodCl7aWYobnVsbD09aWUpe3ZhciBlPWp0KHQpO2llPWUuZ2V0UGFyYW1ldGVyKGUuTUFYX1RFWFRVUkVfU0laRSl9cmV0dXJuIGllfWZ1bmN0aW9uIE1lKHQpe2lmKG51bGw9PXNlKXt2YXIgZT1qdCh0KTtzZT1lLmdldFBhcmFtZXRlcihlLk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTKX1yZXR1cm4gTWF0aC5taW4oMTYsc2UpfWZ1bmN0aW9uIEJlKHQpe2lmKDA9PT10KXJldHVybiAwO3ZhciBlPWp0KHQpO3JldHVybiBQZShlLFwiRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5X3dlYmdsMlwiKSYmMj09PXQ/MjpQZShlLFwiRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5XCIpPzE6MH1mdW5jdGlvbiBQZSh0LGUpe3JldHVybiBudWxsIT10LmdldEV4dGVuc2lvbihlKX1mdW5jdGlvbiBMZSh0KXt0cnl7aWYobnVsbCE9anQodCkpcmV0dXJuITB9Y2F0Y2godCl7cmV0dXJuITF9cmV0dXJuITF9ZnVuY3Rpb24gV2UodCl7aWYoMD09PXQpcmV0dXJuITE7dmFyIGU9anQodCk7aWYoMT09PXQpe2lmKCFQZShlLFwiT0VTX3RleHR1cmVfZmxvYXRcIikpcmV0dXJuITF9ZWxzZSBpZighUGUoZSxcIkVYVF9jb2xvcl9idWZmZXJfZmxvYXRcIikpcmV0dXJuITE7cmV0dXJuIFZlKGUpfWZ1bmN0aW9uIFVlKHQpe2lmKDA9PT10KXJldHVybiExO3ZhciBlPWp0KHQpO2lmKDEhPT10KXtpZihQZShlLFwiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdFwiKSlyZXR1cm4gVmUoZSk7aWYoUGUoZSxcIkVYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdFwiKSl7dmFyIG49ZS5nZXRFeHRlbnNpb24oXCJFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXRcIik7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dmFyIG49UXQodCxlKSxyPXQuY3JlYXRlVGV4dHVyZSgpO3QuYmluZFRleHR1cmUodC5URVhUVVJFXzJELHIpO3QudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCxuLmludGVybmFsRm9ybWF0SGFsZkZsb2F0LDEsMSwwLG4udGV4dHVyZUZvcm1hdEZsb2F0LG4udGV4dHVyZVR5cGVIYWxmRmxvYXQsbnVsbCk7dmFyIG89dC5jcmVhdGVGcmFtZWJ1ZmZlcigpO3QuYmluZEZyYW1lYnVmZmVyKHQuRlJBTUVCVUZGRVIsbyksdC5mcmFtZWJ1ZmZlclRleHR1cmUyRCh0LkZSQU1FQlVGRkVSLHQuQ09MT1JfQVRUQUNITUVOVDAsdC5URVhUVVJFXzJELHIsMCk7dmFyIGE9dC5jaGVja0ZyYW1lYnVmZmVyU3RhdHVzKHQuRlJBTUVCVUZGRVIpPT09dC5GUkFNRUJVRkZFUl9DT01QTEVURTtyZXR1cm4gdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsbnVsbCksdC5iaW5kRnJhbWVidWZmZXIodC5GUkFNRUJVRkZFUixudWxsKSx0LmRlbGV0ZVRleHR1cmUociksdC5kZWxldGVGcmFtZWJ1ZmZlcihvKSxhfShlLG4pfXJldHVybiExfXJldHVybiEhUGUoZSxcIk9FU190ZXh0dXJlX2Zsb2F0XCIpJiYoISFQZShlLFwiV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0XCIpJiZWZShlKSl9ZnVuY3Rpb24gVmUodCl7dmFyIGU9UXQodCksbj10LmNyZWF0ZVRleHR1cmUoKTt0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxuKTt0LnRleEltYWdlMkQodC5URVhUVVJFXzJELDAsZS5pbnRlcm5hbEZvcm1hdEZsb2F0LDEsMSwwLGUudGV4dHVyZUZvcm1hdEZsb2F0LGUudGV4dHVyZVR5cGVGbG9hdCxudWxsKTt2YXIgcj10LmNyZWF0ZUZyYW1lYnVmZmVyKCk7dC5iaW5kRnJhbWVidWZmZXIodC5GUkFNRUJVRkZFUixyKSx0LmZyYW1lYnVmZmVyVGV4dHVyZTJEKHQuRlJBTUVCVUZGRVIsdC5DT0xPUl9BVFRBQ0hNRU5UMCx0LlRFWFRVUkVfMkQsbiwwKTt2YXIgbz10LmNoZWNrRnJhbWVidWZmZXJTdGF0dXModC5GUkFNRUJVRkZFUik9PT10LkZSQU1FQlVGRkVSX0NPTVBMRVRFO3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxudWxsKSx0LmJpbmRGcmFtZWJ1ZmZlcih0LkZSQU1FQlVGRkVSLG51bGwpLHQuZGVsZXRlVGV4dHVyZShuKSx0LmRlbGV0ZUZyYW1lYnVmZmVyKHIpLG99ZnVuY3Rpb24gemUodCl7cmV0dXJuIDI9PT10JiZudWxsIT1qdCh0KS5mZW5jZVN5bmN9dmFyIEdlPU9iamVjdC5mcmVlemUoe2NhbGxBbmRDaGVjazpKdCxjYW5CZVJlcHJlc2VudGVkOmVlLGdldFdlYkdMRXJyb3JNZXNzYWdlOm5lLGdldEV4dGVuc2lvbk9yVGhyb3c6cmUsY3JlYXRlVmVydGV4U2hhZGVyOm9lLGNyZWF0ZUZyYWdtZW50U2hhZGVyOmFlLGNyZWF0ZVByb2dyYW06Y2UsbGlua1Byb2dyYW06bGUsdmFsaWRhdGVQcm9ncmFtOmhlLGNyZWF0ZVN0YXRpY1ZlcnRleEJ1ZmZlcjpmZSxjcmVhdGVTdGF0aWNJbmRleEJ1ZmZlcjpkZSxnZXROdW1DaGFubmVsczpmdW5jdGlvbigpe3JldHVybiAyPT09aSgpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIik/MTo0fSxjcmVhdGVUZXh0dXJlOnBlLHZhbGlkYXRlVGV4dHVyZVNpemU6dmUsY3JlYXRlRnJhbWVidWZmZXI6bWUsYmluZFZlcnRleEJ1ZmZlclRvUHJvZ3JhbUF0dHJpYnV0ZTpnZSxiaW5kVGV4dHVyZVVuaXQ6eWUsdW5iaW5kVGV4dHVyZVVuaXQ6ZnVuY3Rpb24odCxlLG4pe1NlKHQsbiksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmFjdGl2ZVRleHR1cmUodC5URVhUVVJFMCtuKX0pKSxKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSkpfSxnZXRQcm9ncmFtVW5pZm9ybUxvY2F0aW9uT3JUaHJvdzp4ZSxnZXRQcm9ncmFtVW5pZm9ybUxvY2F0aW9uOmJlLGJpbmRUZXh0dXJlVG9Qcm9ncmFtVW5pZm9ybVNhbXBsZXI6d2UsYmluZENhbnZhc1RvRnJhbWVidWZmZXI6ZnVuY3Rpb24odCxlKXtKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZEZyYW1lYnVmZmVyKHQuRlJBTUVCVUZGRVIsbnVsbCl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnZpZXdwb3J0KDAsMCx0LmNhbnZhcy53aWR0aCx0LmNhbnZhcy5oZWlnaHQpfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5zY2lzc29yKDAsMCx0LmNhbnZhcy53aWR0aCx0LmNhbnZhcy5oZWlnaHQpfSkpfSxiaW5kQ29sb3JUZXh0dXJlVG9GcmFtZWJ1ZmZlcjpDZSx1bmJpbmRDb2xvclRleHR1cmVGcm9tRnJhbWVidWZmZXI6RWUsdmFsaWRhdGVGcmFtZWJ1ZmZlcjpSZSxnZXRGcmFtZWJ1ZmZlckVycm9yTWVzc2FnZTpJZSxnZXRCYXRjaERpbTpBZSxnZXRSb3dzQ29sczpEZSxnZXRTaGFwZUFzM0Q6VGUsZ2V0VGV4dHVyZVNoYXBlRnJvbUxvZ2ljYWxTaGFwZTpOZSxpc1Jlc2hhcGVGcmVlOl9lLGdldFdlYkdMTWF4VGV4dHVyZVNpemU6T2UscmVzZXRNYXhUZXh0dXJlU2l6ZTpmdW5jdGlvbigpe2llPW51bGx9LHJlc2V0TWF4VGV4dHVyZXNJblNoYWRlcjpmdW5jdGlvbigpe3NlPW51bGx9LGdldE1heFRleHR1cmVzSW5TaGFkZXI6TWUsZ2V0V2ViR0xEaXNqb2ludFF1ZXJ5VGltZXJWZXJzaW9uOkJlLGhhc0V4dGVuc2lvbjpQZSxpc1dlYkdMVmVyc2lvbkVuYWJsZWQ6TGUsaXNDYXBhYmxlT2ZSZW5kZXJpbmdUb0Zsb2F0VGV4dHVyZTpXZSxpc0Rvd25sb2FkRmxvYXRUZXh0dXJlRW5hYmxlZDpVZSxpc1dlYkdMRmVuY2VFbmFibGVkOnplfSksSGU9aSgpO2Z1bmN0aW9uIHFlKCl7aSgpLnNldChcIlBST0RcIiwhMCl9ZnVuY3Rpb24gS2UoKXtpKCkuc2V0KFwiREVCVUdcIiwhMCl9ZnVuY3Rpb24gamUoKXtpKCkuc2V0KFwiREVQUkVDQVRJT05fV0FSTklOR1NfRU5BQkxFRFwiLCExKSxjb25zb2xlLndhcm4oXCJUZW5zb3JGbG93LmpzIGRlcHJlY2F0aW9uIHdhcm5pbmdzIGhhdmUgYmVlbiBkaXNhYmxlZC5cIil9ZnVuY3Rpb24gWGUodCl7aSgpLmdldEJvb2woXCJERVBSRUNBVElPTl9XQVJOSU5HU19FTkFCTEVEXCIpJiZjb25zb2xlLndhcm4odCtcIiBZb3UgY2FuIGRpc2FibGUgZGVwcmVjYXRpb24gd2FybmluZ3Mgd2l0aCB0Zi5kaXNhYmxlRGVwcmVjYXRpb25XYXJuaW5ncygpLlwiKX1mdW5jdGlvbiBZZSgpe0x0LmRpc3Bvc2VWYXJpYWJsZXMoKX1mdW5jdGlvbiAkZSgpe3JldHVybiBMdH1mdW5jdGlvbiBRZSgpe3JldHVybiBMdC5tZW1vcnkoKX1mdW5jdGlvbiBKZSh0KXtyZXR1cm4gTHQucHJvZmlsZSh0KX1mdW5jdGlvbiBaZSh0LGUpe3JldHVybiBMdC50aWR5KHQsZSl9ZnVuY3Rpb24gdG4odCl7X3QodCkuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuZGlzcG9zZSgpfSkpfWZ1bmN0aW9uIGVuKHQpe3JldHVybiBMdC5rZWVwKHQpfWZ1bmN0aW9uIG5uKHQpe3JldHVybiBMdC50aW1lKHQpfWZ1bmN0aW9uIHJuKHQpe3JldHVybiBMdC5zZXRCYWNrZW5kKHQpfWZ1bmN0aW9uIG9uKCl7cmV0dXJuIEx0LnJlYWR5KCl9ZnVuY3Rpb24gYW4oKXtyZXR1cm4gTHQuYmFja2VuZE5hbWV9ZnVuY3Rpb24gc24odCl7THQucmVtb3ZlQmFja2VuZCh0KX1mdW5jdGlvbiB1bih0KXtyZXR1cm4gTHQuZmluZEJhY2tlbmQodCl9ZnVuY3Rpb24gY24odCl7cmV0dXJuIEx0LmZpbmRCYWNrZW5kRmFjdG9yeSh0KX1mdW5jdGlvbiBsbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTEpLEx0LnJlZ2lzdGVyQmFja2VuZCh0LGUsbil9ZnVuY3Rpb24gaG4oKXtyZXR1cm4gTHQuYmFja2VuZH1mdW5jdGlvbiBmbih0LGUpe2koKS5zZXRQbGF0Zm9ybSh0LGUpfWZ1bmN0aW9uIGRuKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO2koKS5nZXRCb29sKFwiSVNfVEVTVFwiKXx8Y29uc29sZS53YXJuLmFwcGx5KGNvbnNvbGUsdCl9ZnVuY3Rpb24gcG4odCxlKXt2YXIgbj10O2lmKFYodCkpcmV0dXJuXCJzdHJpbmdcIj09PWU/W106W3QubGVuZ3RoXTtpZighQXJyYXkuaXNBcnJheSh0KSlyZXR1cm5bXTtmb3IodmFyIHI9W107QXJyYXkuaXNBcnJheShuKXx8VihuKSYmXCJzdHJpbmdcIiE9PWU7KXIucHVzaChuLmxlbmd0aCksbj1uWzBdO3JldHVybiBBcnJheS5pc0FycmF5KHQpJiZpKCkuZ2V0Qm9vbChcIlRFTlNPUkxJS0VfQ0hFQ0tfU0hBUEVfQ09OU0lTVEVOQ1lcIikmJmZ1bmN0aW9uIHQoZSxuLHIpe2lmKHI9cnx8W10sIUFycmF5LmlzQXJyYXkoZSkmJiFWKGUpKXJldHVybiB2b2lkIEMoMD09PW4ubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRWxlbWVudCBhcnJbXCIrci5qb2luKFwiXVtcIikrXCJdIGlzIGEgcHJpbWl0aXZlLCBidXQgc2hvdWxkIGJlIGFuIGFycmF5L1R5cGVkQXJyYXkgb2YgXCIrblswXStcIiBlbGVtZW50c1wifSkpO0Mobi5sZW5ndGg+MCwoZnVuY3Rpb24oKXtyZXR1cm5cIkVsZW1lbnQgYXJyW1wiK3Iuam9pbihcIl1bXCIpK1wiXSBzaG91bGQgYmUgYSBwcmltaXRpdmUsIGJ1dCBpcyBhbiBhcnJheSBvZiBcIitlLmxlbmd0aCtcIiBlbGVtZW50c1wifSkpLEMoZS5sZW5ndGg9PT1uWzBdLChmdW5jdGlvbigpe3JldHVyblwiRWxlbWVudCBhcnJbXCIrci5qb2luKFwiXVtcIikrXCJdIHNob3VsZCBoYXZlIFwiK25bMF0rXCIgZWxlbWVudHMsIGJ1dCBoYXMgXCIrZS5sZW5ndGgrXCIgZWxlbWVudHNcIn0pKTtmb3IodmFyIG89bi5zbGljZSgxKSxhPTA7YTxlLmxlbmd0aDsrK2EpdChlW2FdLG8sci5jb25jYXQoYSkpfSh0LHIsW10pLHJ9ZnVuY3Rpb24gdm4odCxlLG4scil7aWYobnVsbCE9dCYmKFwibnVtZXJpY1wiIT09dCYmdCE9PWV8fFwibnVtZXJpY1wiPT09dCYmXCJzdHJpbmdcIj09PWUpKXRocm93IG5ldyBFcnJvcihcIkFyZ3VtZW50ICdcIituK1wiJyBwYXNzZWQgdG8gJ1wiK3IrXCInIG11c3QgYmUgXCIrdCtcIiB0ZW5zb3IsIGJ1dCBnb3QgXCIrZStcIiB0ZW5zb3JcIil9ZnVuY3Rpb24gbW4odCxlLG4scil7aWYodm9pZCAwPT09ciYmKHI9XCJudW1lcmljXCIpLHQgaW5zdGFuY2VvZiB3dClyZXR1cm4gdm4ocix0LmR0eXBlLGUsbiksdDt2YXIgbz1qKHQpO2lmKFwic3RyaW5nXCIhPT1vJiZbXCJib29sXCIsXCJpbnQzMlwiLFwiZmxvYXQzMlwiXS5pbmRleE9mKHIpPj0wJiYobz1yKSx2bihyLG8sZSxuKSxudWxsPT10fHwhVih0KSYmIUFycmF5LmlzQXJyYXkodCkmJlwibnVtYmVyXCIhPXR5cGVvZiB0JiZcImJvb2xlYW5cIiE9dHlwZW9mIHQmJlwic3RyaW5nXCIhPXR5cGVvZiB0KXt2YXIgYT1udWxsPT10P1wibnVsbFwiOnQuY29uc3RydWN0b3IubmFtZTt0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCAnXCIrZStcIicgcGFzc2VkIHRvICdcIituK1wiJyBtdXN0IGJlIGEgVGVuc29yIG9yIFRlbnNvckxpa2UsIGJ1dCBnb3QgJ1wiK2ErXCInXCIpfXZhciBzPXBuKHQsbyk7Vih0KXx8QXJyYXkuaXNBcnJheSh0KXx8KHQ9W3RdKTt2YXIgdT1cInN0cmluZ1wiIT09bz9RKHQsbyxpKCkuZ2V0Qm9vbChcIkRFQlVHXCIpKTpJKHQsW10sITApO3JldHVybiBMdC5tYWtlVGVuc29yKHUscyxvKX1mdW5jdGlvbiBnbih0LGUsbixyKXtpZih2b2lkIDA9PT1yJiYocj1cIm51bWVyaWNcIiksIUFycmF5LmlzQXJyYXkodCkpdGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnQgXCIrZStcIiBwYXNzZWQgdG8gXCIrbitcIiBtdXN0IGJlIGEgYFRlbnNvcltdYCBvciBgVGVuc29yTGlrZVtdYFwiKTtyZXR1cm4gdC5tYXAoKGZ1bmN0aW9uKHQscil7cmV0dXJuIG1uKHQsZStcIltcIityK1wiXVwiLG4pfSkscil9ZnVuY3Rpb24geW4odCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoOysrbilpZih0W3QubGVuZ3RoLW4tMV0hPT1lLTEtbilyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiB4bih0LGUsbil7Zm9yKHZhciByPXQubGVuZ3RoK2UubGVuZ3RoLG89W10sYT0wLGk9MCxzPTA7czxyO3MrKyktMT09PW4uaW5kZXhPZihzKT9vLnB1c2godFthKytdKTpvLnB1c2goZVtpKytdKTtyZXR1cm4gb31mdW5jdGlvbiBibih0LGUpe2Zvcih2YXIgbj1bXSxyPXQubGVuZ3RoLG89MDtvPHI7bysrKS0xPT09ZS5pbmRleE9mKG8pJiZuLnB1c2godFtvXSk7cmV0dXJuW24sZS5tYXAoKGZ1bmN0aW9uKGUpe3JldHVybiB0W2VdfSkpXX1mdW5jdGlvbiB3bih0LGUpe3JldHVybiB4bih0LGUubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gMX0pKSxlKX1mdW5jdGlvbiBDbih0LGUsbil7Qyh5bihlLG4pLChmdW5jdGlvbigpe3JldHVybiB0K1wiIHN1cHBvcnRzIG9ubHkgaW5uZXItbW9zdCBheGVzIGZvciBub3cuIEdvdCBheGVzIFwiK2UrXCIgYW5kIHJhbmstXCIrbitcIiBpbnB1dC5cIn0pKX1mdW5jdGlvbiBFbih0LGUpe2lmKHluKHQsZSkpcmV0dXJuIG51bGw7Zm9yKHZhciBuPVtdLHI9MDtyPGU7KytyKS0xPT09dC5pbmRleE9mKHIpJiZuLnB1c2gocik7cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIG4ucHVzaCh0KX0pKSxufWZ1bmN0aW9uIFJuKHQpe3JldHVybiB0Lm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm5bZSx0XX0pKS5zb3J0KChmdW5jdGlvbih0LGUpe3JldHVybiB0WzFdLWVbMV19KSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdFswXX0pKX1mdW5jdGlvbiBJbih0LGUpe2Zvcih2YXIgbj1bXSxyPWUtdDtyPGU7KytyKW4ucHVzaChyKTtyZXR1cm4gbn1mdW5jdGlvbiBrbih0LGUpe3ZhciBuPXRbMF0ubGVuZ3RoO3QuZm9yRWFjaCgoZnVuY3Rpb24odCxlKXtDKHQubGVuZ3RoPT09biwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbmNhdFwiK24rXCJEOiByYW5rIG9mIHRlbnNvcnNbXCIrZStcIl0gbXVzdCBiZSB0aGUgc2FtZSBhcyB0aGUgcmFuayBvZiB0aGUgcmVzdCAoXCIrbitcIilcIn0pKX0pKSxDKGU+PTAmJmU8biwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbmNhdFwiK24rXCJEOiBheGlzIG11c3QgYmUgYmV0d2VlbiAwIGFuZCBcIisobi0xKStcIi5cIn0pKTt2YXIgcj10WzBdO3QuZm9yRWFjaCgoZnVuY3Rpb24odCxvKXtmb3IodmFyIGE9MDthPG47YSsrKUMoYT09PWV8fHRbYV09PT1yW2FdLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29uY2F0XCIrbitcIkQ6IFNoYXBlIG9mIHRlbnNvcnNbXCIrbytcIl0gKFwiK3QrXCIpIGRvZXMgbm90IG1hdGNoIHRoZSBzaGFwZSBvZiB0aGUgcmVzdCAoXCIrcitcIikgYWxvbmcgdGhlIG5vbi1jb25jYXRlbmF0ZWQgYXhpcyBcIitvK1wiLlwifSkpfSkpfWZ1bmN0aW9uIFNuKHQsZSl7Zm9yKHZhciBuPXRbMF0uc2xpY2UoKSxyPTE7cjx0Lmxlbmd0aDtyKyspbltlXSs9dFtyXVtlXTtyZXR1cm4gbn1mdW5jdGlvbiBBbih0KXt2YXIgZT1PYmplY3Qua2V5cyh0KTtpZigxIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYW4gb2JqZWN0IHdpdGggYSBzaW5nbGUga2V5IChvcGVyYXRpb24gbmFtZSkgbWFwcGluZyB0byBhIGZ1bmN0aW9uLiBHb3QgYW4gb2JqZWN0IHdpdGggXCIrZS5sZW5ndGgrXCIga2V5cy5cIik7dmFyIG49ZVswXSxyPXRbbl07bi5lbmRzV2l0aChcIl9cIikmJihuPW4uc3Vic3RyaW5nKDAsbi5sZW5ndGgtMSkpO3ZhciBvPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO0x0LnN0YXJ0U2NvcGUobik7dHJ5e3ZhciBvPXIuYXBwbHkodm9pZCAwLHQpO3JldHVybiBvIGluc3RhbmNlb2YgUHJvbWlzZSYmY29uc29sZS5lcnJvcihcIkNhbm5vdCByZXR1cm4gYSBQcm9taXNlIGluc2lkZSBvZiB0aWR5LlwiKSxMdC5lbmRTY29wZShvKSxvfWNhdGNoKHQpe3Rocm93IEx0LmVuZFNjb3BlKG51bGwpLHR9fTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJuYW1lXCIse3ZhbHVlOm4sY29uZmlndXJhYmxlOiEwfSksb31IZS5yZWdpc3RlckZsYWcoXCJIQVNfV0VCR0xcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT4wfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1ZFUlNJT05cIiwoZnVuY3Rpb24oKXtyZXR1cm4gTGUoMik/MjpMZSgxKT8xOjB9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfQlVGRkVSX1NVUFBPUlRFRFwiLChmdW5jdGlvbigpe3JldHVybiAyPT09SGUuZ2V0KFwiV0VCR0xfVkVSU0lPTlwiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9DUFVfRk9SV0FSRFwiLChmdW5jdGlvbigpe3JldHVybiEwfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0ZPUkNFX0YxNl9URVhUVVJFU1wiLChmdW5jdGlvbigpe3JldHVybiExfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIkhBU19XRUJHTFwiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX05PUk1BTElaQVRJT05cIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfUEFDS19DTElQXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIEhlLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfREVQVEhXSVNFQ09OVlwiLChmdW5jdGlvbigpe3JldHVybiExfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIEhlLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiLChmdW5jdGlvbigpe3JldHVybiBIZS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX0lNQUdFX09QRVJBVElPTlNcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfUEFDS19SRURVQ0VcIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfTEFaSUxZX1VOUEFDS1wiLChmdW5jdGlvbigpe3JldHVybiBIZS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9DT05WX0lNMkNPTFwiLChmdW5jdGlvbigpe3JldHVybiBIZS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9NQVhfVEVYVFVSRV9TSVpFXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIE9lKEhlLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX01BWF9URVhUVVJFU19JTl9TSEFERVJcIiwoZnVuY3Rpb24oKXtyZXR1cm4gTWUoSGUuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKSl9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIiwoZnVuY3Rpb24oKXt2YXIgdD1IZS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpO3JldHVybiAwPT09dD8wOkJlKHQpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9SRUxJQUJMRVwiLChmdW5jdGlvbigpe3JldHVybiBIZS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKT4wJiYodD1uYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHx3aW5kb3cub3BlcmEsISgvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdCh0KXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdCh0LnN1YnN0cigwLDQpKSkpO3ZhciB0fSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1JFTkRFUl9GTE9BVDMyX0NBUEFCTEVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gV2UoSGUuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKSl9KSksSGUucmVnaXN0ZXJGbGFnKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfRU5BQkxFRFwiLChmdW5jdGlvbigpe3JldHVybiFIZS5nZXRCb29sKFwiV0VCR0xfRk9SQ0VfRjE2X1RFWFRVUkVTXCIpJiZIZS5nZXRCb29sKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfQ0FQQUJMRVwiKX0pKSxIZS5yZWdpc3RlckZsYWcoXCJXRUJHTF9ET1dOTE9BRF9GTE9BVF9FTkFCTEVEXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIFVlKEhlLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0ZFTkNFX0FQSV9FTkFCTEVEXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIHplKEhlLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpfSkpLEhlLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1NJWkVfVVBMT0FEX1VOSUZPUk1cIiwoZnVuY3Rpb24oKXtyZXR1cm4gSGUuZ2V0Qm9vbChcIldFQkdMX1JFTkRFUl9GTE9BVDMyX0VOQUJMRURcIik/NDowfSkpLGJ0PVhlO3ZhciBEbj1Bbih7Y29tcGxleF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwicmVhbFwiLFwiY29tcGxleFwiKSxyPW1uKGUsXCJpbWFnXCIsXCJjb21wbGV4XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcInJlYWwgYW5kIGltYWcgc2hhcGVzLCBcIituLnNoYXBlK1wiIGFuZCBcIityLnNoYXBlK1wiLCBtdXN0IG1hdGNoIGluIGNhbGwgdG8gdGYuY29tcGxleCgpLlwiKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb21wbGV4KG4scil9KSx7JHJlYWw6biwkaW1hZzpyfSl9fSksVG49QW4oe3JlYWxfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJpbnB1dFwiLFwicmVhbFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQucmVhbChlKX0pLHskaW5wdXQ6ZX0pfX0pLE5uPUFuKHtpbWFnXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwiaW5wdXRcIixcImltYWdcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmltYWcoZSl9KSx7JGlucHV0OmV9KX19KTtmdW5jdGlvbiBGbih0LGUsbil7cmV0dXJuIF9uKHQsZSxwbih0LG4pLG4pfWZ1bmN0aW9uIF9uKHQsZSxuLHIpe2lmKG51bGw9PXImJihyPWoodCkpLFwiY29tcGxleDY0XCI9PT1yKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb25zdHJ1Y3QgYSBjb21wbGV4NjQgdGVuc29yIGRpcmVjdGx5LiBQbGVhc2UgdXNlIHRmLmNvbXBsZXgocmVhbCwgaW1hZykuXCIpO2lmKCFWKHQpJiYhQXJyYXkuaXNBcnJheSh0KSYmXCJudW1iZXJcIiE9dHlwZW9mIHQmJlwiYm9vbGVhblwiIT10eXBlb2YgdCYmXCJzdHJpbmdcIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwidmFsdWVzIHBhc3NlZCB0byB0ZW5zb3IodmFsdWVzKSBtdXN0IGJlIGEgbnVtYmVyL2Jvb2xlYW4vc3RyaW5nIG9yIGFuIGFycmF5IG9mIG51bWJlcnMvYm9vbGVhbnMvc3RyaW5ncywgb3IgYSBUeXBlZEFycmF5XCIpO2lmKG51bGwhPWUpe250KGUpO3ZhciBvPWsoZSksYT1rKG4pO0Mobz09PWEsKGZ1bmN0aW9uKCl7cmV0dXJuXCJCYXNlZCBvbiB0aGUgcHJvdmlkZWQgc2hhcGUsIFtcIitlK1wiXSwgdGhlIHRlbnNvciBzaG91bGQgaGF2ZSBcIitvK1wiIHZhbHVlcyBidXQgaGFzIFwiK2F9KSk7Zm9yKHZhciBzPTA7czxuLmxlbmd0aDsrK3Mpe3ZhciB1PW5bc10sYz1zIT09bi5sZW5ndGgtMXx8dSE9PWsoZS5zbGljZShzKSk7QyhuW3NdPT09ZVtzXXx8IWMsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBjcmVhdGluZyBhIG5ldyBUZW5zb3IuIEluZmVycmVkIHNoYXBlIChcIituK1wiKSBkb2VzIG5vdCBtYXRjaCB0aGUgcHJvdmlkZWQgc2hhcGUgKFwiK2UrXCIpLiBcIn0pKX19cmV0dXJuIFYodCl8fEFycmF5LmlzQXJyYXkodCl8fCh0PVt0XSksZT1lfHxuLHQ9XCJzdHJpbmdcIiE9PXI/USh0LHIsaSgpLmdldEJvb2woXCJERUJVR1wiKSk6SSh0LFtdLCEwKSxMdC5tYWtlVGVuc29yKHQsZSxyKX1mdW5jdGlvbiBPbih0LGUpe2lmKChWKHQpJiZcInN0cmluZ1wiIT09ZXx8QXJyYXkuaXNBcnJheSh0KSkmJlwiY29tcGxleDY0XCIhPT1lKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGNyZWF0aW5nIGEgbmV3IFNjYWxhcjogdmFsdWUgbXVzdCBiZSBhIHByaW1pdGl2ZSAobnVtYmVyfGJvb2xlYW58c3RyaW5nKVwiKTtpZihcInN0cmluZ1wiPT09ZSYmVih0KSYmISh0IGluc3RhbmNlb2YgVWludDhBcnJheSkpdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBtYWtpbmcgYSBzY2FsYXIgZnJvbSBlbmNvZGVkIHN0cmluZywgdGhlIHZhbHVlIG11c3QgYmUgYFVpbnQ4QXJyYXlgLlwiKTtyZXR1cm4gX24odCxbXSxbXSxlKX1mdW5jdGlvbiBNbih0LGUpe1IodCk7dmFyIG49cG4odCxlKTtpZigxIT09bi5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yMWQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgYSBmbGF0L1R5cGVkQXJyYXlcIik7cmV0dXJuIF9uKHQsbnVsbCxuLGUpfWZ1bmN0aW9uIEJuKHQsZSxuKXtpZihSKHQpLG51bGwhPWUmJjIhPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3IyZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgdHdvIG51bWJlcnNcIik7dmFyIHI9cG4odCxuKTtpZigyIT09ci5sZW5ndGgmJjEhPT1yLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3IyZCgpIHJlcXVpcmVzIHZhbHVlcyB0byBiZSBudW1iZXJbXVtdIG9yIGZsYXQvVHlwZWRBcnJheVwiKTtpZigxPT09ci5sZW5ndGgmJm51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yMmQoKSByZXF1aXJlcyBzaGFwZSB0byBiZSBwcm92aWRlZCB3aGVuIGB2YWx1ZXNgIGFyZSBhIGZsYXQvVHlwZWRBcnJheVwiKTtyZXR1cm4gX24odCxlLHIsbil9ZnVuY3Rpb24gUG4odCxlLG4pe2lmKFIodCksbnVsbCE9ZSYmMyE9PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjNkKCkgcmVxdWlyZXMgc2hhcGUgdG8gaGF2ZSB0aHJlZSBudW1iZXJzXCIpO3ZhciByPXBuKHQsbik7aWYoMyE9PXIubGVuZ3RoJiYxIT09ci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yM2QoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXVtdIG9yIGZsYXQvVHlwZWRBcnJheVwiKTtpZigxPT09ci5sZW5ndGgmJm51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yM2QoKSByZXF1aXJlcyBzaGFwZSB0byBiZSBwcm92aWRlZCB3aGVuIGB2YWx1ZXNgIGFyZSBhIGZsYXQgYXJyYXlcIik7cmV0dXJuIF9uKHQsZSxyLG4pfWZ1bmN0aW9uIExuKHQsZSxuKXtpZihSKHQpLG51bGwhPWUmJjQhPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I0ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgZm91ciBudW1iZXJzXCIpO3ZhciByPXBuKHQsbik7aWYoNCE9PXIubGVuZ3RoJiYxIT09ci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNGQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXVtdW10gb3IgZmxhdC9UeXBlZEFycmF5XCIpO2lmKDE9PT1yLmxlbmd0aCYmbnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I0ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGJlIHByb3ZpZGVkIHdoZW4gYHZhbHVlc2AgYXJlIGEgZmxhdCBhcnJheVwiKTtyZXR1cm4gX24odCxlLHIsbil9ZnVuY3Rpb24gV24odCxlLG4pe2lmKFIodCksbnVsbCE9ZSYmNSE9PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjVkKCkgcmVxdWlyZXMgc2hhcGUgdG8gaGF2ZSBmaXZlIG51bWJlcnNcIik7dmFyIHI9cG4odCxuKTtpZig1IT09ci5sZW5ndGgmJjEhPT1yLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I1ZCgpIHJlcXVpcmVzIHZhbHVlcyB0byBiZSBudW1iZXJbXVtdW11bXVtdIG9yIGZsYXQvVHlwZWRBcnJheVwiKTtpZigxPT09ci5sZW5ndGgmJm51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNWQoKSByZXF1aXJlcyBzaGFwZSB0byBiZSBwcm92aWRlZCB3aGVuIGB2YWx1ZXNgIGFyZSBhIGZsYXQgYXJyYXlcIik7cmV0dXJuIF9uKHQsZSxyLG4pfWZ1bmN0aW9uIFVuKHQsZSxuKXtpZihSKHQpLG51bGwhPWUmJjYhPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I2ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgc2l4IG51bWJlcnNcIik7dmFyIHI9cG4odCxuKTtpZig2IT09ci5sZW5ndGgmJjEhPT1yLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I2ZCgpIHJlcXVpcmVzIHZhbHVlcyB0byBiZSBudW1iZXJbXVtdW11bXVtdW10gb3IgZmxhdC9UeXBlZEFycmF5XCIpO2lmKDE9PT1yLmxlbmd0aCYmbnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I2ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGJlIHByb3ZpZGVkIHdoZW4gYHZhbHVlc2AgYXJlIGEgZmxhdCBhcnJheVwiKTtyZXR1cm4gX24odCxlPWV8fHIscixuKX1mdW5jdGlvbiBWbih0LGUsbixyKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITApLEx0Lm1ha2VWYXJpYWJsZSh0LGUsbixyKX1mdW5jdGlvbiB6bih0LGUpe2lmKHZvaWQgMD09PWUmJihlPVwiZmxvYXQzMlwiKSxcImNvbXBsZXg2NFwiPT09ZSl7dmFyIG49em4odCxcImZsb2F0MzJcIikscj1Hbih0LFwiZmxvYXQzMlwiKTtyZXR1cm4gRG4obixyKX12YXIgbz1aKGsodCksZSk7cmV0dXJuIEx0Lm1ha2VUZW5zb3Iobyx0LGUpfWZ1bmN0aW9uIEduKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9XCJmbG9hdDMyXCIpLFwiY29tcGxleDY0XCI9PT1lKXt2YXIgbj1Hbih0LFwiZmxvYXQzMlwiKSxyPUduKHQsXCJmbG9hdDMyXCIpO3JldHVybiBEbihuLHIpfXZhciBvPXR0KGsodCksZSk7cmV0dXJuIEx0Lm1ha2VUZW5zb3Iobyx0LGUpfWZ1bmN0aW9uIEhuKHQsZSxuKXtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24ocil7cmV0dXJuIHIuZmlsbCh0LGUsbil9KSx7fSl9ZnVuY3Rpb24gcW4odCxlLG4pe2lmKG48PTApdGhyb3cgbmV3IEVycm9yKFwiVGhlIG51bWJlciBvZiB2YWx1ZXMgc2hvdWxkIGJlIHBvc2l0aXZlLlwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24ocil7cmV0dXJuIHIubGluc3BhY2UodCxlLG4pfSkse30pfWZ1bmN0aW9uIEtuKHQsZSxuLHIpe2lmKHZvaWQgMD09PW4mJihuPTEpLHZvaWQgMD09PXImJihyPVwiZmxvYXQzMlwiKSwwPT09bil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaGF2ZSBhIHN0ZXAgb2YgemVyb1wiKTtpZih0PT09ZXx8dDxlJiZuPDB8fGU8dCYmbj4xKXJldHVybiBHbihbMF0scik7dmFyIG89dHQoTWF0aC5hYnMoTWF0aC5jZWlsKChlLXQpL24pKSxyKTtlPHQmJjE9PT1uJiYobj0tMSksb1swXT10O2Zvcih2YXIgYT0xO2E8by5sZW5ndGg7YSsrKW9bYV09b1thLTFdK247cmV0dXJuIE1uKG8scil9dmFyIGpuPUFuKHtvbmVzTGlrZV86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcIm9uZXNMaWtlXCIpO2lmKFwiY29tcGxleDY0XCI9PT1lLmR0eXBlKXt2YXIgbj1qbihUbihlKSkscj1YbihObihlKSk7cmV0dXJuIERuKG4scil9cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm9uZXNMaWtlKGUpfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBYbih0KX19fSkpfX0pLFhuPUFuKHt6ZXJvc0xpa2VfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJ6ZXJvc0xpa2VcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lnplcm9zTGlrZShlKX0pLHskeDplfSwoZnVuY3Rpb24odCxlKXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gWG4odCl9fX0pKX19KTt2YXIgWW49QW4oe2NvbmNhdF86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0wKSxDKHQubGVuZ3RoPj0xLChmdW5jdGlvbigpe3JldHVyblwiUGFzcyBhdCBsZWFzdCBvbmUgdGVuc29yIHRvIGNvbmNhdFwifSkpO3ZhciBuPWduKHQsXCJ0ZW5zb3JzXCIsXCJjb25jYXRcIik7XCJjb21wbGV4NjRcIj09PW5bMF0uZHR5cGUmJm4uZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYoXCJjb21wbGV4NjRcIiE9PXQuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbmNhdGVuYXRlIGNvbXBsZXg2NCB0ZW5zb3JzIHdpdGggYSB0ZW5zb3JcXG4gICAgICAgICAgd2l0aCBkdHlwZSBcIit0LmR0eXBlK1wiLiBcIil9KSksZT1PKGUsblswXS5zaGFwZSlbMF07dmFyIHI9U24obi5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNoYXBlfSkpLGUpO2lmKDA9PT1rKHIpKXJldHVybiBGbihbXSxyKTtpZigxPT09KG49bi5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNpemU+MH0pKSkubGVuZ3RoKXJldHVybiBuWzBdO3ZhciBvPW4ubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pKTtrbihvLGUpO3ZhciBhPW4saT17YXhpczplfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuY29uY2F0KG4sZSl9KSxhLChmdW5jdGlvbih0KXt2YXIgbj1vLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHRbZV19KSk7cmV0dXJuIHRyKHQsbixlKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0fX0pKX0pLFwiQ29uY2F0XCIsaSl9fSksJG49QW4oe2NvbmNhdDFkXzpmdW5jdGlvbih0KXtyZXR1cm4gWW4odCwwKX19KSxRbj1Bbih7Y29uY2F0MmRfOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIFluKHQsZSl9fSksSm49QW4oe2NvbmNhdDNkXzpmdW5jdGlvbih0LGUpe3JldHVybiBZbih0LGUpfX0pLFpuPUFuKHtjb25jYXQ0ZF86ZnVuY3Rpb24odCxlKXtyZXR1cm4gWW4odCxlKX19KSx0cj1Bbih7c3BsaXRfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0wKTt2YXIgcixvPW1uKHQsXCJ4XCIsXCJzcGxpdFwiKTtyZXR1cm4gbj1PKG4sby5zaGFwZSlbMF0sXCJudW1iZXJcIj09dHlwZW9mIGU/KEMoby5zaGFwZVtuXSVlPT0wLChmdW5jdGlvbigpe3JldHVyblwiTnVtYmVyIG9mIHNwbGl0cyBtdXN0IGV2ZW5seSBkaXZpZGUgdGhlIGF4aXMuXCJ9KSkscj1uZXcgQXJyYXkoZSkuZmlsbChvLnNoYXBlW25dL2UpKTooQyhvLnNoYXBlW25dPT09ZS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX0pKSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBzdW0gb2Ygc2l6ZXMgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiB0aGUgYXhpcyBkaW1lbnNpb24uXCJ9KSkscj1lKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zcGxpdChvLHIsbil9KSx7JHg6b30sKGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBZbih0LG4pfX19KSl9fSk7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZjtmdW5jdGlvbiBlcih0LGUpe3JldHVybiB0KGU9e2V4cG9ydHM6e319LGUuZXhwb3J0cyksZS5leHBvcnRzfXZhciBucj1lcigoZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe3ZhciBlLG49dGhpcyxyPShlPTQwMjI4NzExOTcsZnVuY3Rpb24odCl7dD10LnRvU3RyaW5nKCk7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPS4wMjUxOTYwMzI4MjQxNjkzOCooZSs9dC5jaGFyQ29kZUF0KG4pKTtyLT1lPXI+Pj4wLGU9KHIqPWUpPj4+MCxlKz00Mjk0OTY3Mjk2KihyLT1lKX1yZXR1cm4gMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMCooZT4+PjApfSk7bi5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9MjA5MTYzOSpuLnMwKzIuMzI4MzA2NDM2NTM4Njk2M2UtMTAqbi5jO3JldHVybiBuLnMwPW4uczEsbi5zMT1uLnMyLG4uczI9dC0obi5jPTB8dCl9LG4uYz0xLG4uczA9cihcIiBcIiksbi5zMT1yKFwiIFwiKSxuLnMyPXIoXCIgXCIpLG4uczAtPXIodCksbi5zMDwwJiYobi5zMCs9MSksbi5zMS09cih0KSxuLnMxPDAmJihuLnMxKz0xKSxuLnMyLT1yKHQpLG4uczI8MCYmKG4uczIrPTEpLHI9bnVsbH1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUuYz10LmMsZS5zMD10LnMwLGUuczE9dC5zMSxlLnMyPXQuczIsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9bi5uZXh0O3JldHVybiBpLmludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIDQyOTQ5NjcyOTYqbi5uZXh0KCl8MH0saS5kb3VibGU9ZnVuY3Rpb24oKXtyZXR1cm4gaSgpKzExMTAyMjMwMjQ2MjUxNTY1ZS0zMiooMjA5NzE1MippKCl8MCl9LGkucXVpY2s9aSxhJiYoXCJvYmplY3RcIj09dHlwZW9mIGEmJm8oYSxuKSxpLnN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG8obix7fSl9KSxpfWUmJmUuZXhwb3J0cz9lLmV4cG9ydHM9YTpuJiZuLmFtZD9uKChmdW5jdGlvbigpe3JldHVybiBhfSkpOnRoaXMuYWxlYT1hfSgwLHQsITEpfSkpLHJyPWVyKChmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcyxuPVwiXCI7ZS54PTAsZS55PTAsZS56PTAsZS53PTAsZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ZS54XmUueDw8MTE7cmV0dXJuIGUueD1lLnksZS55PWUueixlLno9ZS53LGUud149ZS53Pj4+MTledF50Pj4+OH0sdD09PSgwfHQpP2UueD10Om4rPXQ7Zm9yKHZhciByPTA7cjxuLmxlbmd0aCs2NDtyKyspZS54Xj0wfG4uY2hhckNvZGVBdChyKSxlLm5leHQoKX1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUueD10LngsZS55PXQueSxlLno9dC56LGUudz10LncsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9ZnVuY3Rpb24oKXtyZXR1cm4obi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2fTtyZXR1cm4gaS5kb3VibGU9ZnVuY3Rpb24oKXtkb3t2YXIgdD0oKG4ubmV4dCgpPj4+MTEpKyhuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTYpLygxPDwyMSl9d2hpbGUoMD09PXQpO3JldHVybiB0fSxpLmludDMyPW4ubmV4dCxpLnF1aWNrPWksYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bigoZnVuY3Rpb24oKXtyZXR1cm4gYX0pKTp0aGlzLnhvcjEyOD1hfSgwLHQsITEpfSkpLG9yPWVyKChmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcyxuPVwiXCI7ZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ZS54XmUueD4+PjI7cmV0dXJuIGUueD1lLnksZS55PWUueixlLno9ZS53LGUudz1lLnYsKGUuZD1lLmQrMzYyNDM3fDApKyhlLnY9ZS52XmUudjw8NF50XnQ8PDEpfDB9LGUueD0wLGUueT0wLGUuej0wLGUudz0wLGUudj0wLHQ9PT0oMHx0KT9lLng9dDpuKz10O2Zvcih2YXIgcj0wO3I8bi5sZW5ndGgrNjQ7cisrKWUueF49MHxuLmNoYXJDb2RlQXQocikscj09bi5sZW5ndGgmJihlLmQ9ZS54PDwxMF5lLng+Pj40KSxlLm5leHQoKX1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUueD10LngsZS55PXQueSxlLno9dC56LGUudz10LncsZS52PXQudixlLmQ9dC5kLGV9ZnVuY3Rpb24gYSh0LGUpe3ZhciBuPW5ldyByKHQpLGE9ZSYmZS5zdGF0ZSxpPWZ1bmN0aW9uKCl7cmV0dXJuKG4ubmV4dCgpPj4+MCkvNDI5NDk2NzI5Nn07cmV0dXJuIGkuZG91YmxlPWZ1bmN0aW9uKCl7ZG97dmFyIHQ9KChuLm5leHQoKT4+PjExKSsobi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2KS8oMTw8MjEpfXdoaWxlKDA9PT10KTtyZXR1cm4gdH0saS5pbnQzMj1uLm5leHQsaS5xdWljaz1pLGEmJihcIm9iamVjdFwiPT10eXBlb2YgYSYmbyhhLG4pLGkuc3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbyhuLHt9KX0pLGl9ZSYmZS5leHBvcnRzP2UuZXhwb3J0cz1hOm4mJm4uYW1kP24oKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KSk6dGhpcy54b3J3b3c9YX0oMCx0LCExKX0pKSxhcj1lcigoZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe3ZhciBlPXRoaXM7ZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQsbixyPWUueCxvPWUuaTtyZXR1cm4gdD1yW29dLG49KHRePXQ+Pj43KV50PDwyNCxuXj0odD1yW28rMSY3XSledD4+PjEwLG5ePSh0PXJbbyszJjddKV50Pj4+MyxuXj0odD1yW28rNCY3XSledDw8Nyx0PXJbbys3JjddLG5ePSh0Xj10PDwxMyledDw8OSxyW29dPW4sZS5pPW8rMSY3LG59LGZ1bmN0aW9uKHQsZSl7dmFyIG4scj1bXTtpZihlPT09KDB8ZSkpclswXT1lO2Vsc2UgZm9yKGU9XCJcIitlLG49MDtuPGUubGVuZ3RoOysrbilyWzcmbl09cls3Jm5dPDwxNV5lLmNoYXJDb2RlQXQobikrcltuKzEmN108PDEzO2Zvcig7ci5sZW5ndGg8ODspci5wdXNoKDApO2ZvcihuPTA7bjw4JiYwPT09cltuXTsrK24pO2Zvcig4PT1uP3JbN109LTE6cltuXSx0Lng9cix0Lmk9MCxuPTI1NjtuPjA7LS1uKXQubmV4dCgpfShlLHQpfWZ1bmN0aW9uIG8odCxlKXtyZXR1cm4gZS54PXQueC5zbGljZSgpLGUuaT10LmksZX1mdW5jdGlvbiBhKHQsZSl7bnVsbD09dCYmKHQ9K25ldyBEYXRlKTt2YXIgbj1uZXcgcih0KSxhPWUmJmUuc3RhdGUsaT1mdW5jdGlvbigpe3JldHVybihuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTZ9O3JldHVybiBpLmRvdWJsZT1mdW5jdGlvbigpe2Rve3ZhciB0PSgobi5uZXh0KCk+Pj4xMSkrKG4ubmV4dCgpPj4+MCkvNDI5NDk2NzI5NikvKDE8PDIxKX13aGlsZSgwPT09dCk7cmV0dXJuIHR9LGkuaW50MzI9bi5uZXh0LGkucXVpY2s9aSxhJiYoYS54JiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bigoZnVuY3Rpb24oKXtyZXR1cm4gYX0pKTp0aGlzLnhvcnNoaWZ0Nz1hfSgwLHQsITEpfSkpLGlyPWVyKChmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcztlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgdCxuLHI9ZS53LG89ZS5YLGE9ZS5pO3JldHVybiBlLnc9cj1yKzE2NDA1MzE1Mjd8MCxuPW9bYSszNCYxMjddLHQ9b1thPWErMSYxMjddLG5ePW48PDEzLHRePXQ8PDE3LG5ePW4+Pj4xNSx0Xj10Pj4+MTIsbj1vW2FdPW5edCxlLmk9YSxuKyhyXnI+Pj4xNil8MH0sZnVuY3Rpb24odCxlKXt2YXIgbixyLG8sYSxpLHM9W10sdT0xMjg7Zm9yKGU9PT0oMHxlKT8ocj1lLGU9bnVsbCk6KGUrPVwiXFwwXCIscj0wLHU9TWF0aC5tYXgodSxlLmxlbmd0aCkpLG89MCxhPS0zMjthPHU7KythKWUmJihyXj1lLmNoYXJDb2RlQXQoKGErMzIpJWUubGVuZ3RoKSksMD09PWEmJihpPXIpLHJePXI8PDEwLHJePXI+Pj4xNSxyXj1yPDw0LHJePXI+Pj4xMyxhPj0wJiYoaT1pKzE2NDA1MzE1Mjd8MCxvPTA9PShuPXNbMTI3JmFdXj1yK2kpP28rMTowKTtmb3Iobz49MTI4JiYoc1sxMjcmKGUmJmUubGVuZ3RofHwwKV09LTEpLG89MTI3LGE9NTEyO2E+MDstLWEpcj1zW28rMzQmMTI3XSxuPXNbbz1vKzEmMTI3XSxyXj1yPDwxMyxuXj1uPDwxNyxyXj1yPj4+MTUsbl49bj4+PjEyLHNbb109cl5uO3Qudz1pLHQuWD1zLHQuaT1vfShlLHQpfWZ1bmN0aW9uIG8odCxlKXtyZXR1cm4gZS5pPXQuaSxlLnc9dC53LGUuWD10Llguc2xpY2UoKSxlfWZ1bmN0aW9uIGEodCxlKXtudWxsPT10JiYodD0rbmV3IERhdGUpO3ZhciBuPW5ldyByKHQpLGE9ZSYmZS5zdGF0ZSxpPWZ1bmN0aW9uKCl7cmV0dXJuKG4ubmV4dCgpPj4+MCkvNDI5NDk2NzI5Nn07cmV0dXJuIGkuZG91YmxlPWZ1bmN0aW9uKCl7ZG97dmFyIHQ9KChuLm5leHQoKT4+PjExKSsobi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2KS8oMTw8MjEpfXdoaWxlKDA9PT10KTtyZXR1cm4gdH0saS5pbnQzMj1uLm5leHQsaS5xdWljaz1pLGEmJihhLlgmJm8oYSxuKSxpLnN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG8obix7fSl9KSxpfWUmJmUuZXhwb3J0cz9lLmV4cG9ydHM9YTpuJiZuLmFtZD9uKChmdW5jdGlvbigpe3JldHVybiBhfSkpOnRoaXMueG9yNDA5Nj1hfSgwLHQsITEpfSkpLHNyPWVyKChmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcyxuPVwiXCI7ZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ZS5iLG49ZS5jLHI9ZS5kLG89ZS5hO3JldHVybiB0PXQ8PDI1XnQ+Pj43Xm4sbj1uLXJ8MCxyPXI8PDI0XnI+Pj44Xm8sbz1vLXR8MCxlLmI9dD10PDwyMF50Pj4+MTJebixlLmM9bj1uLXJ8MCxlLmQ9cjw8MTZebj4+PjE2Xm8sZS5hPW8tdHwwfSxlLmE9MCxlLmI9MCxlLmM9LTE2NDA1MzE1MjcsZS5kPTEzNjcxMzA1NTEsdD09PU1hdGguZmxvb3IodCk/KGUuYT10LzQyOTQ5NjcyOTZ8MCxlLmI9MHx0KTpuKz10O2Zvcih2YXIgcj0wO3I8bi5sZW5ndGgrMjA7cisrKWUuYl49MHxuLmNoYXJDb2RlQXQociksZS5uZXh0KCl9ZnVuY3Rpb24gbyh0LGUpe3JldHVybiBlLmE9dC5hLGUuYj10LmIsZS5jPXQuYyxlLmQ9dC5kLGV9ZnVuY3Rpb24gYSh0LGUpe3ZhciBuPW5ldyByKHQpLGE9ZSYmZS5zdGF0ZSxpPWZ1bmN0aW9uKCl7cmV0dXJuKG4ubmV4dCgpPj4+MCkvNDI5NDk2NzI5Nn07cmV0dXJuIGkuZG91YmxlPWZ1bmN0aW9uKCl7ZG97dmFyIHQ9KChuLm5leHQoKT4+PjExKSsobi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2KS8oMTw8MjEpfXdoaWxlKDA9PT10KTtyZXR1cm4gdH0saS5pbnQzMj1uLm5leHQsaS5xdWljaz1pLGEmJihcIm9iamVjdFwiPT10eXBlb2YgYSYmbyhhLG4pLGkuc3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbyhuLHt9KX0pLGl9ZSYmZS5leHBvcnRzP2UuZXhwb3J0cz1hOm4mJm4uYW1kP24oKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KSk6dGhpcy50eWNoZWk9YX0oMCx0LCExKX0pKSx1cj1lcigoZnVuY3Rpb24odCl7IWZ1bmN0aW9uKGUsbil7dmFyIHIsbz10aGlzLGE9MjU2LGk9NixzPVwicmFuZG9tXCIsdT1uLnBvdyhhLGkpLGM9bi5wb3coMiw1MiksbD0yKmMsaD1hLTE7ZnVuY3Rpb24gZih0LGgsZil7dmFyIGc9W10seT12KGZ1bmN0aW9uIHQoZSxuKXt2YXIgcixvPVtdLGE9dHlwZW9mIGU7aWYobiYmXCJvYmplY3RcIj09YSlmb3IociBpbiBlKXRyeXtvLnB1c2godChlW3JdLG4tMSkpfWNhdGNoKHQpe31yZXR1cm4gby5sZW5ndGg/bzpcInN0cmluZ1wiPT1hP2U6ZStcIlxcMFwifSgoaD0xPT1oP3tlbnRyb3B5OiEwfTpofHx7fSkuZW50cm9weT9bdCxtKGUpXTpudWxsPT10P2Z1bmN0aW9uKCl7dHJ5e3ZhciB0O3JldHVybiByJiYodD1yLnJhbmRvbUJ5dGVzKT90PXQoYSk6KHQ9bmV3IFVpbnQ4QXJyYXkoYSksKG8uY3J5cHRvfHxvLm1zQ3J5cHRvKS5nZXRSYW5kb21WYWx1ZXModCkpLG0odCl9Y2F0Y2godCl7dmFyIG49by5uYXZpZ2F0b3IsaT1uJiZuLnBsdWdpbnM7cmV0dXJuWytuZXcgRGF0ZSxvLGksby5zY3JlZW4sbShlKV19fSgpOnQsMyksZykseD1uZXcgZChnKSxiPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXguZyhpKSxlPXUsbj0wO3Q8YzspdD0odCtuKSphLGUqPWEsbj14LmcoMSk7Zm9yKDt0Pj1sOyl0Lz0yLGUvPTIsbj4+Pj0xO3JldHVybih0K24pL2V9O3JldHVybiBiLmludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIDB8eC5nKDQpfSxiLnF1aWNrPWZ1bmN0aW9uKCl7cmV0dXJuIHguZyg0KS80Mjk0OTY3Mjk2fSxiLmRvdWJsZT1iLHYobSh4LlMpLGUpLChoLnBhc3N8fGZ8fGZ1bmN0aW9uKHQsZSxyLG8pe3JldHVybiBvJiYoby5TJiZwKG8seCksdC5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBwKHgse30pfSkscj8obltzXT10LGUpOnR9KShiLHksXCJnbG9iYWxcImluIGg/aC5nbG9iYWw6dGhpcz09bixoLnN0YXRlKX1mdW5jdGlvbiBkKHQpe3ZhciBlLG49dC5sZW5ndGgscj10aGlzLG89MCxpPXIuaT1yLmo9MCxzPXIuUz1bXTtmb3Iobnx8KHQ9W24rK10pO288YTspc1tvXT1vKys7Zm9yKG89MDtvPGE7bysrKXNbb109c1tpPWgmaSt0W28lbl0rKGU9c1tvXSldLHNbaV09ZTsoci5nPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZSxuPTAsbz1yLmksaT1yLmoscz1yLlM7dC0tOyllPXNbbz1oJm8rMV0sbj1uKmErc1toJihzW29dPXNbaT1oJmkrZV0pKyhzW2ldPWUpXTtyZXR1cm4gci5pPW8sci5qPWksbn0pKGEpfWZ1bmN0aW9uIHAodCxlKXtyZXR1cm4gZS5pPXQuaSxlLmo9dC5qLGUuUz10LlMuc2xpY2UoKSxlfWZ1bmN0aW9uIHYodCxlKXtmb3IodmFyIG4scj10K1wiXCIsbz0wO288ci5sZW5ndGg7KWVbaCZvXT1oJihuXj0xOSplW2gmb10pK3IuY2hhckNvZGVBdChvKyspO3JldHVybiBtKGUpfWZ1bmN0aW9uIG0odCl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoMCx0KX1pZihuW1wic2VlZFwiK3NdPWYsdihuLnJhbmRvbSgpLGUpLHQuZXhwb3J0cyl7dC5leHBvcnRzPWY7dHJ5e3I9cmVxdWlyZShcImNyeXB0b1wiKX1jYXRjaCh0KXt9fX0oW10sTWF0aCl9KSk7dXIuYWxlYT1ucix1ci54b3IxMjg9cnIsdXIueG9yd293PW9yLHVyLnhvcnNoaWZ0Nz1hcix1ci54b3I0MDk2PWlyLHVyLnR5Y2hlaT1zcjt2YXIgY3I9dXIuYWxlYSxscj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4scixvKXt0aGlzLm1lYW49dCx0aGlzLnN0ZERldj1lLHRoaXMuZHR5cGU9bix0aGlzLm5leHRWYWw9TmFOLHRoaXMudHJ1bmNhdGVkPXIsdGhpcy50cnVuY2F0ZWQmJih0aGlzLnVwcGVyPXRoaXMubWVhbisyKnRoaXMuc3RkRGV2LHRoaXMubG93ZXI9dGhpcy5tZWFuLTIqdGhpcy5zdGREZXYpO3ZhciBhPW98fE1hdGgucmFuZG9tKCk7dGhpcy5yYW5kb209Y3IoYS50b1N0cmluZygpKX1yZXR1cm4gdC5wcm90b3R5cGUubmV4dFZhbHVlPWZ1bmN0aW9uKCl7aWYoIWlzTmFOKHRoaXMubmV4dFZhbCkpe3ZhciB0PXRoaXMubmV4dFZhbDtyZXR1cm4gdGhpcy5uZXh0VmFsPU5hTix0fWZvcih2YXIgZSxuLHI9ITE7IXI7KXt2YXIgbz12b2lkIDAsYT12b2lkIDAsaT12b2lkIDA7ZG97aT0obz0yKnRoaXMucmFuZG9tKCktMSkqbysoYT0yKnRoaXMucmFuZG9tKCktMSkqYX13aGlsZShpPj0xfHwwPT09aSk7dmFyIHM9TWF0aC5zcXJ0KC0yKk1hdGgubG9nKGkpL2kpO2U9dGhpcy5tZWFuK3RoaXMuc3RkRGV2Km8qcyxuPXRoaXMubWVhbit0aGlzLnN0ZERldiphKnMsdGhpcy50cnVuY2F0ZWQmJiF0aGlzLmlzVmFsaWRUcnVuY2F0ZWQoZSl8fChyPSEwKX1yZXR1cm4gdGhpcy50cnVuY2F0ZWQmJiF0aGlzLmlzVmFsaWRUcnVuY2F0ZWQobil8fCh0aGlzLm5leHRWYWw9dGhpcy5jb252ZXJ0VmFsdWUobikpLHRoaXMuY29udmVydFZhbHVlKGUpfSx0LnByb3RvdHlwZS5jb252ZXJ0VmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXRoaXMuZHR5cGV8fFwiZmxvYXQzMlwiPT09dGhpcy5kdHlwZT90Ok1hdGgucm91bmQodCl9LHQucHJvdG90eXBlLmlzVmFsaWRUcnVuY2F0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8PXRoaXMudXBwZXImJnQ+PXRoaXMubG93ZXJ9LHR9KCksaHI9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSxuLHIpe3RoaXMuYWxwaGE9dCx0aGlzLmJldGE9MS9lLHRoaXMuZHR5cGU9bjt2YXIgbz1yfHxNYXRoLnJhbmRvbSgpO3RoaXMucmFuZHU9Y3Ioby50b1N0cmluZygpKSx0aGlzLnJhbmRuPW5ldyBscigwLDEsbiwhMSx0aGlzLnJhbmR1KCkpLHRoaXMuZD10PDE/dCsyLzM6dC0xLzMsdGhpcy5jPTEvTWF0aC5zcXJ0KDkqdGhpcy5kKX1yZXR1cm4gdC5wcm90b3R5cGUubmV4dFZhbHVlPWZ1bmN0aW9uKCl7Zm9yKHZhciB0LGUsbixyLG8sYTs7KXtkb3tyPXRoaXMucmFuZG4ubmV4dFZhbHVlKCksYT0xK3RoaXMuYypyfXdoaWxlKGE8PTApO2lmKGEqPWEqYSxlPTEtLjMzMSoodD1yKnIpKnQsbj0uNSp0K3RoaXMuZCooMS1hK01hdGgubG9nKGEpKSwobz10aGlzLnJhbmR1KCkpPGV8fE1hdGgubG9nKG8pPG4pYnJlYWt9cmV0dXJuIGE9MS90aGlzLmJldGEqdGhpcy5kKmEsdGhpcy5hbHBoYTwxJiYoYSo9TWF0aC5wb3codGhpcy5yYW5kdSgpLDEvdGhpcy5hbHBoYSkpLHRoaXMuY29udmVydFZhbHVlKGEpfSx0LnByb3RvdHlwZS5jb252ZXJ0VmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuXCJmbG9hdDMyXCI9PT10aGlzLmR0eXBlP3Q6TWF0aC5yb3VuZCh0KX0sdH0oKSxmcj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4scil7dmFyIG89dGhpcztpZih2b2lkIDA9PT10JiYodD0wKSx2b2lkIDA9PT1lJiYoZT0xKSx0aGlzLmNhblJldHVybkZsb2F0PWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PW8uZHR5cGV8fFwiZmxvYXQzMlwiPT09by5kdHlwZX0sdGhpcy5taW49dCx0aGlzLnJhbmdlPWUtdCx0aGlzLmR0eXBlPW4sbnVsbD09ciYmKHI9TWF0aC5yYW5kb20oKSksXCJudW1iZXJcIj09dHlwZW9mIHImJihyPXIudG9TdHJpbmcoKSksIXRoaXMuY2FuUmV0dXJuRmxvYXQoKSYmdGhpcy5yYW5nZTw9MSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFwiK3QrXCIgLSBcIitlK1wiIDw9IDEgYW5kIGR0eXBlIGlzIG5vdCBmbG9hdFwiKTt0aGlzLnJhbmRvbT1jcihyKX1yZXR1cm4gdC5wcm90b3R5cGUuY29udmVydFZhbHVlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNhblJldHVybkZsb2F0KCk/dDpNYXRoLnJvdW5kKHQpfSx0LnByb3RvdHlwZS5uZXh0VmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb252ZXJ0VmFsdWUodGhpcy5taW4rdGhpcy5yYW5nZSp0aGlzLnJhbmRvbSgpKX0sdH0oKTtmdW5jdGlvbiBkcih0LGUsbil7cmV0dXJuIHZvaWQgMD09PWUmJihlPVwiZmxvYXQzMlwiKSxlPWV8fFwiZmxvYXQzMlwiLG50KHQpLG5ldyBndCh0LGUsbil9ZnVuY3Rpb24gcHIodCxlKXt2b2lkIDA9PT1lJiYoZT0hMSksY29uc29sZS5sb2codC50b1N0cmluZyhlKSl9dmFyIHZyPUFuKHtiYXRjaFRvU3BhY2VORF86ZnVuY3Rpb24odCxlLG4pe3ZhciByPW1uKHQsXCJ4XCIsXCJiYXRjaFRvU3BhY2VORFwiKSxvPWUucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0KmV9KSk7cmV0dXJuIEMoci5yYW5rPj0xK2UubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiaW5wdXQgcmFuayBpcyBcIityLnJhbmsrXCIgYnV0IHNob3VsZCBiZSA+IHRoYW4gYmxvY2tTaGFwZS5sZW5ndGggXCIrZS5sZW5ndGh9KSksQyhuLmxlbmd0aD09PWUubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiY3JvcHMubGVuZ3RoIGlzIFwiK24ubGVuZ3RoK1wiIGJ1dCBzaG91bGQgYmUgZXF1YWwgdG8gYmxvY2tTaGFwZS5sZW5ndGggIFwiK2UubGVuZ3RofSkpLEMoci5zaGFwZVswXSVvPT0wLChmdW5jdGlvbigpe3JldHVyblwiaW5wdXQgdGVuc29yIGJhdGNoIGlzIFwiK3Iuc2hhcGVbMF0rXCIgYnV0IGlzIG5vdCBkaXZpc2libGUgYnkgdGhlIHByb2R1Y3Qgb2YgdGhlIGVsZW1lbnRzIG9mIGJsb2NrU2hhcGUgXCIrZS5qb2luKFwiICogXCIpK1wiID09PSBcIitvfSkpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmJhdGNoVG9TcGFjZU5EKHIsZSxuKX0pLHskeDpyfSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuc3BhY2VUb0JhdGNoTkQoZSxuKX19fSkpfX0pLG1yPUFuKHticm9hZGNhc3RUb186ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwiYnJvYWRjYXN0VG9cIixcInhcIikscj1uLnNoYXBlO2lmKGUuc29tZSgoZnVuY3Rpb24odCl7cmV0dXJuISh0PjApfHx0JTEhPTB9KSkpdGhyb3cgbmV3IEVycm9yKFwiYnJvYWRjYXN0VG8oKTogSW52YWxpZCBicm9hZGNhc3Qgc2hhcGUgW1wiK2UrXCJdLlwiKTtpZihlLmxlbmd0aDxuLnJhbmspdGhyb3cgbmV3IEVycm9yKFwiYnJvYWRjYXN0VG8oKTogc2hhcGUubGVuZ3RoPVwiK2UubGVuZ3RoK1wiIDwgaW5wdXQucmFuaz1cIituLnJhbmsrXCIuXCIpO2lmKGUubGVuZ3RoPm4ucmFuayl7Zm9yKHZhciBvPW4uc2hhcGUuc2xpY2UoKTtvLmxlbmd0aDxlLmxlbmd0aDspby51bnNoaWZ0KDEpO249bi5yZXNoYXBlKG8pfWZvcih2YXIgYT1BcnJheS5mcm9tKGUpLGk9ZS5sZW5ndGgtMTtpPj0wO2ktLSlpZihuLnNoYXBlW2ldPT09ZVtpXSlhW2ldPTE7ZWxzZSBpZigxIT09bi5zaGFwZVtpXSl0aHJvdyBuZXcgRXJyb3IoXCJicm9hZGNhc3RUbygpOiBbXCIrcitcIl0gY2Fubm90IGJlIGJyb2FkY2FzdCB0byBbXCIrZStcIl0uXCIpO3ZhciBzPWEubWFwKChmdW5jdGlvbih0LGUpe3JldHVybiB0PjE/ZTotMX0pKS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiB0Pj0wfSkpO3JldHVybiAwPT09cy5sZW5ndGg/bi5jbG9uZSgpOkx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRpbGUobixhKX0pLHtpbnB1dDpufSwoZnVuY3Rpb24odCl7cmV0dXJue2lucHV0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuc3VtKHMsITApfX19KSl9fSksZ3I9QW4oe2Nhc3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcInhcIixcImNhc3RcIik7aWYoIVcoZSkpdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGNhc3QgdG8gdW5rbm93biBkdHlwZSBcIitlKTtpZihcInN0cmluZ1wiPT09ZSYmXCJzdHJpbmdcIiE9PW4uZHR5cGV8fFwic3RyaW5nXCIhPT1lJiZcInN0cmluZ1wiPT09bi5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJPbmx5IHN0cmluZ3MgY2FuIGJlIGNhc3RlZCB0byBzdHJpbmdzXCIpO3ZhciByPXtkdHlwZTplfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuY2FzdChuLGUpfSkse3g6bn0sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuY2xvbmUoKX19fSksXCJDYXN0XCIscil9fSkseXI9QW4oe2Nsb25lXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwiY2xvbmVcIixudWxsKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24oKXtyZXR1cm4gTHQubWFrZVRlbnNvckZyb21EYXRhSWQoZS5kYXRhSWQsZS5zaGFwZSxlLmR0eXBlKX0pLHskeDplfSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQudG9GbG9hdCgpfX19KSl9fSkseHI9QW4oe2N1bXN1bV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09biYmKG49ITEpLHZvaWQgMD09PXImJihyPSExKTt2YXIgbz1tbih0LFwieFwiLFwiY3Vtc3VtXCIpLGE9RW4oW2V8PTBdLG8ucmFuayksaT1vO251bGwhPWEmJihpPW8udHJhbnNwb3NlKGEpKTt2YXIgcz1JbigxLG8ucmFuaylbMF0sdT1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jdW1zdW0oaSxzLG4scil9KSx7cGVybXV0ZWRYOml9LChmdW5jdGlvbih0KXtyZXR1cm57cGVybXV0ZWRYOmZ1bmN0aW9uKCl7cmV0dXJuIHQuY3Vtc3VtKGUsbiwhcil9fX0pKTtyZXR1cm4gbnVsbCE9YSYmKHU9dS50cmFuc3Bvc2UoYSkpLHV9fSksYnI9QW4oe2RlcHRoVG9TcGFjZV86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPVwiTkhXQ1wiKTt2YXIgcj1tbih0LFwieFwiLFwiZGVwdGhUb1NwYWNlXCIpLG89XCJOSFdDXCI9PT1uP3Iuc2hhcGVbMV06ci5zaGFwZVsyXSxhPVwiTkhXQ1wiPT09bj9yLnNoYXBlWzJdOnIuc2hhcGVbM10saT1cIk5IV0NcIj09PW4/ci5zaGFwZVszXTpyLnNoYXBlWzFdO3JldHVybiBDKG8qZT49MCwoZnVuY3Rpb24oKXtyZXR1cm5cIk5lZ2F0aXZlIGRpbWVuc2lvbiBzaXplIGNhdXNlZCBieSBvdmVyZmxvdyB3aGVuIG11bHRpcGx5aW5nXFxuICAgICAgXCIrbytcIiBhbmQgXCIrZStcIiAgZm9yIGRlcHRoVG9TcGFjZSB3aXRoIGlucHV0IHNoYXBlXFxuICAgICAgXCIrci5zaGFwZX0pKSxDKGEqZT49MCwoZnVuY3Rpb24oKXtyZXR1cm5cIk5lZ2F0aXZlIGRpbWVuc2lvbiBzaXplIGNhdXNlZCBieSBvdmVyZmxvdyB3aGVuIG11bHRpcGx5aW5nXFxuICAgICAgXCIrYStcIiBhbmQgXCIrZStcIiBmb3IgZGVwdGhUb1NwYWNlIHdpdGggaW5wdXQgc2hhcGVcXG4gICAgICAgICAgXCIrci5zaGFwZX0pKSxDKGklKGUqZSk9PTAsKGZ1bmN0aW9uKCl7cmV0dXJuXCJEaW1lbnNpb24gc2l6ZSBtdXN0IGJlIGV2ZW5seSBkaXZpc2libGUgYnkgXCIrZSplK1wiIGJ1dCBpcyBcIitpK1wiIGZvciBkZXB0aFRvU3BhY2Ugd2l0aCBpbnB1dCBzaGFwZSBcIityLnNoYXBlfSkpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRlcHRoVG9TcGFjZShyLGUsbil9KSx7JHg6cn0pfX0pLHdyPUFuKHtleHBhbmREaW1zXzpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPTApO3ZhciBuPW1uKHQsXCJ4XCIsXCJleHBhbmREaW1zXCIsbnVsbCk7QyhlPD1uLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJBeGlzIG11c3QgYmUgPD0gcmFuayBvZiB0aGUgdGVuc29yXCJ9KSk7dmFyIHI9bi5zaGFwZS5zbGljZSgpO3JldHVybiBlPDAmJihDKC0obi5yYW5rKzEpPD1lLChmdW5jdGlvbigpe3JldHVyblwiQXhpcyBtdXN0IGJlIGluIHRoZSBpbnRlcnZhbCBbXCIrLShuLnJhbmsrMSkrXCIsIFwiK24ucmFuaytcIl1cIn0pKSxlPW4ucmFuaytlKzEpLHIuc3BsaWNlKGUsMCwxKSxPcihuLHIpfX0pLENyPUFuKHtleWVfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPVwiZmxvYXQzMlwiKSxudWxsPT1lJiYoZT10KTtmb3IodmFyIG89ZHIoW3QsZV0sciksYT10PD1lP3Q6ZSxpPTA7aTxhOysraSlvLnNldCgxLGksaSk7dmFyIHM9by50b1RlbnNvcigpLmFzMkQodCxlKTtpZihudWxsPT1uKXJldHVybiBzO2lmKDE9PT1uLmxlbmd0aClyZXR1cm4gTHIod3IocywwKSxbblswXSwxLDFdKTtpZigyPT09bi5sZW5ndGgpcmV0dXJuIExyKHdyKHdyKHMsMCksMCksW25bMF0sblsxXSwxLDFdKTtpZigzPT09bi5sZW5ndGgpcmV0dXJuIExyKHdyKHdyKHdyKHMsMCksMCksMCksW25bMF0sblsxXSxuWzJdLDEsMV0pO3Rocm93IG5ldyBFcnJvcihcImV5ZSgpIGN1cnJlbnRseSBzdXBwb3J0cyBvbmx5IDFEIGFuZCAyRCBiYXRjaFNoYXBlcywgYnV0IHJlY2VpdmVkIFwiK24ubGVuZ3RoK1wiRC5cIil9fSksRXI9QW4oe211bHRpbm9taWFsXzpmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMSk7dmFyIG89bW4odCxcImxvZ2l0c1wiLFwibXVsdGlub21pYWxcIiksYT1vLnNpemUsaT1vLnJhbms7aWYoYTwyKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG11bHRpbm9taWFsOiB5b3UgbmVlZCBhdCBsZWFzdCAyIG91dGNvbWVzLCBidXQgZ290IFwiK2ErXCIuXCIpO2lmKGk+Mil0aHJvdyBuZXcgRXJyb3IoXCJSYW5rIG9mIHByb2JhYmlsaXRpZXMgbXVzdCBiZSAxIG9yIDIsIGJ1dCBpcyBcIitpKTtuPW58fE1hdGgucmFuZG9tKCk7dmFyIHM9MT09PWk/by5hczJEKDEsLTEpOm8sdT1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5tdWx0aW5vbWlhbChzLHIsZSxuKX0pLHtsb2dpdHMyRDpzfSk7cmV0dXJuIDE9PT1pP3UuYXMxRCgpOnV9fSksUnI9QW4oe29uZUhvdF86ZnVuY3Rpb24odCxlLG4scil7aWYodm9pZCAwPT09biYmKG49MSksdm9pZCAwPT09ciYmKHI9MCksZTwyKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG9uZUhvdDogZGVwdGggbXVzdCBiZSA+PTIsIGJ1dCBpdCBpcyBcIitlKTt2YXIgbz1tbih0LFwiaW5kaWNlc1wiLFwib25lSG90XCIsXCJpbnQzMlwiKSxhPW8uc2hhcGUuY29uY2F0KFtlXSk7cmV0dXJuIG89by5mbGF0dGVuKCksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQub25lSG90KG8sZSxuLHIpfSkseyRpbmRpY2VzOm99LChmdW5jdGlvbih0KXtyZXR1cm57JGluZGljZXM6ZnVuY3Rpb24oKXtyZXR1cm4gR24oby5zaGFwZSxcImZsb2F0MzJcIil9fX0pKS5yZXNoYXBlKGEpfX0pLElyPUFuKHtwYWRfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0wKTt2YXIgcj1tbih0LFwieFwiLFwicGFkXCIpO2lmKDA9PT1yLnJhbmspdGhyb3cgbmV3IEVycm9yKFwicGFkKHNjYWxhcikgaXMgbm90IGRlZmluZWQuIFBhc3Mgbm9uLXNjYWxhciB0byBwYWRcIik7dmFyIG89e3BhZGRpbmdzOmUsY29uc3RhbnRWYWx1ZTpufTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQucGFkKHIsZSxuKX0pLHt4OnJ9LChmdW5jdGlvbih0KXt2YXIgbj1lLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF19KSk7cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC5zbGljZShuLHIuc2hhcGUpfX19KSxcIlBhZFYyXCIsbyl9fSksa3I9QW4oe3BhZDFkXzpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTApLEMoMj09PWUubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiSW52YWxpZCBudW1iZXIgb2YgcGFkZGluZ3MuIE11c3QgYmUgbGVuZ3RoIG9mIDIuXCJ9KSksSXIodCxbZV0sbil9fSksU3I9QW4oe3BhZDJkXzpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTApLEMoMj09PWUubGVuZ3RoJiYyPT09ZVswXS5sZW5ndGgmJjI9PT1lWzFdLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cIkludmFsaWQgbnVtYmVyIG9mIHBhZGRpbmdzLiBNdXN0IGJlIGxlbmd0aCBvZiAyIGVhY2guXCJ9KSksSXIodCxlLG4pfX0pLEFyPUFuKHtwYWQzZF86ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0wKSxDKDM9PT1lLmxlbmd0aCYmMj09PWVbMF0ubGVuZ3RoJiYyPT09ZVsxXS5sZW5ndGgmJjI9PT1lWzJdLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cIkludmFsaWQgbnVtYmVyIG9mIHBhZGRpbmdzLiBNdXN0IGJlIGxlbmd0aCBvZiAyIGVhY2guXCJ9KSksSXIodCxlLG4pfX0pLERyPUFuKHtwYWQ0ZF86ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0wKSxDKDQ9PT1lLmxlbmd0aCYmMj09PWVbMF0ubGVuZ3RoJiYyPT09ZVsxXS5sZW5ndGgmJjI9PT1lWzJdLmxlbmd0aCYmMj09PWVbM10ubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiSW52YWxpZCBudW1iZXIgb2YgcGFkZGluZ3MuIE11c3QgYmUgbGVuZ3RoIG9mIDIgZWFjaC5cIn0pKSxJcih0LGUsbil9fSksVHI9QW4oe3JhbmRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1rKHQpLG89bnVsbDtpZihudWxsPT1ufHxcImZsb2F0MzJcIj09PW4pbz1uZXcgRmxvYXQzMkFycmF5KHIpO2Vsc2UgaWYoXCJpbnQzMlwiPT09bilvPW5ldyBJbnQzMkFycmF5KHIpO2Vsc2V7aWYoXCJib29sXCIhPT1uKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YSB0eXBlIFwiK24pO289bmV3IFVpbnQ4QXJyYXkocil9Zm9yKHZhciBhPTA7YTxyO2ErKylvW2FdPWUoKTtyZXR1cm4gTHQubWFrZVRlbnNvcihvLHQsbil9fSksTnI9QW4oe3JhbmRvbU5vcm1hbF86ZnVuY3Rpb24odCxlLG4scixvKXtpZih2b2lkIDA9PT1lJiYoZT0wKSx2b2lkIDA9PT1uJiYobj0xKSxudWxsIT1yJiZcImJvb2xcIj09PXIpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGF0YSB0eXBlIFwiK3IpO2Zvcih2YXIgYT1uZXcgbHIoZSxuLHIsITEsbyksaT1kcih0LHIpLHM9MDtzPGkudmFsdWVzLmxlbmd0aDtzKyspaS52YWx1ZXNbc109YS5uZXh0VmFsdWUoKTtyZXR1cm4gaS50b1RlbnNvcigpfX0pLEZyPUFuKHtyYW5kb21HYW1tYV86ZnVuY3Rpb24odCxlLG4scixvKXtpZih2b2lkIDA9PT1uJiYobj0xKSx2b2lkIDA9PT1yJiYocj1cImZsb2F0MzJcIiksbnVsbD09biYmKG49MSksbnVsbD09ciYmKHI9XCJmbG9hdDMyXCIpLFwiZmxvYXQzMlwiIT09ciYmXCJpbnQzMlwiIT09cil0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBkYXRhIHR5cGUgXCIrcik7Zm9yKHZhciBhPW5ldyBocihlLG4scixvKSxpPWRyKHQscikscz0wO3M8aS52YWx1ZXMubGVuZ3RoO3MrKylpLnZhbHVlc1tzXT1hLm5leHRWYWx1ZSgpO3JldHVybiBpLnRvVGVuc29yKCl9fSksX3I9QW4oe3JhbmRvbVVuaWZvcm1fOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09biYmKG49MSksdm9pZCAwPT09ciYmKHI9XCJmbG9hdDMyXCIpO2Zvcih2YXIgYT1kcih0LHIpLGk9bmV3IGZyKGUsbixudWxsLG8pLHM9MDtzPGEudmFsdWVzLmxlbmd0aDtzKyspYS52YWx1ZXNbc109aS5uZXh0VmFsdWUoKTtyZXR1cm4gYS50b1RlbnNvcigpfX0pLE9yPUFuKHtyZXNoYXBlXzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJ4XCIsXCJyZXNoYXBlXCIsbnVsbCk7ZT1fKGUsbi5zaXplKSxDKG4uc2l6ZT09PWsoZSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJuZXcgc2hhcGUgYW5kIG9sZCBzaGFwZSBtdXN0IGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzLlwifSkpO3ZhciByPXtzaGFwZTplfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQucmVzaGFwZShuLGUpfSkse3g6bn0sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQucmVzaGFwZShuLnNoYXBlKX19fSksXCJSZXNoYXBlXCIscil9fSksTXI9QW4oe3NwYWNlVG9CYXRjaE5EXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcInhcIixcInNwYWNlVG9CYXRjaE5EXCIpO3JldHVybiBDKHIucmFuaz49MStlLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cImlucHV0IHJhbmsgXCIrci5yYW5rK1wiIHNob3VsZCBiZSA+IHRoYW4gW2Jsb2NrU2hhcGVdIFwiK2UubGVuZ3RofSkpLEMobi5sZW5ndGg9PT1lLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cInBhZGRpbmdzLnNoYXBlWzBdIFwiK24ubGVuZ3RoK1wiIG11c3QgYmUgZXF1YWwgdG8gW2Jsb2NrU2hhcGVdIFwiK2UubGVuZ3RofSkpLEMoci5zaGFwZS5yZWR1Y2UoKGZ1bmN0aW9uKHQscixvKXtyZXR1cm4gbz4wJiZvPD1lLmxlbmd0aD90JiYocituW28tMV1bMF0rbltvLTFdWzFdKSVlW28tMV09PTA6dH0pLCEwKSwoZnVuY3Rpb24oKXtyZXR1cm5cImlucHV0IHNwYXRpYWwgZGltZW5zaW9ucyBcIityLnNoYXBlLnNsaWNlKDEpK1wiIHdpdGggcGFkZGluZ3MgXCIrbi50b1N0cmluZygpK1wiIG11c3QgYmUgZGl2aXNpYmxlIGJ5IGJsb2NrU2hhcGVzIFwiK2UudG9TdHJpbmcoKX0pKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zcGFjZVRvQmF0Y2hORChyLGUsbil9KSx7JHg6cn0sKGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmJhdGNoVG9TcGFjZU5EKGUsbil9fX0pKX19KSxCcj1Bbih7c3F1ZWV6ZV86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwieFwiLFwic3F1ZWV6ZVwiKTtyZXR1cm4gT3IobixNKG4uc2hhcGUsZSkubmV3U2hhcGUpfX0pLFByPUFuKHtzdGFja186ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0wKTt2YXIgbj1nbih0LFwidGVuc29yc1wiLFwic3RhY2tcIik7aWYoQyhuLmxlbmd0aD49MSwoZnVuY3Rpb24oKXtyZXR1cm5cIlBhc3MgYXQgbGVhc3Qgb25lIHRlbnNvciB0byB0Zi5zdGFja1wifSkpLDE9PT1uLmxlbmd0aClyZXR1cm4gblswXS5leHBhbmREaW1zKGUpO3ZhciByPW5bMF0ucmFuayxvPW5bMF0uc2hhcGUsYT1uWzBdLmR0eXBlO0MoZTw9ciwoZnVuY3Rpb24oKXtyZXR1cm5cIkF4aXMgbXVzdCBiZSA8PSByYW5rIG9mIHRoZSB0ZW5zb3JcIn0pKSxuLmZvckVhY2goKGZ1bmN0aW9uKHQpe0Uobyx0LnNoYXBlLFwiQWxsIHRlbnNvcnMgcGFzc2VkIHRvIHN0YWNrIG11c3QgaGF2ZSBtYXRjaGluZyBzaGFwZXNcIil9KSksbi5mb3JFYWNoKChmdW5jdGlvbih0KXtDKGE9PT10LmR0eXBlLChmdW5jdGlvbigpe3JldHVyblwiQWxsIHRlbnNvcnMgcGFzc2VkIHRvIHN0YWNrIG11c3QgaGF2ZSBtYXRjaGluZyBkdHlwZXNcIn0pKX0pKTt2YXIgaT1uLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuZXhwYW5kRGltcyhlKX0pKTtyZXR1cm4gWW4oaSxlKX19KSxMcj1Bbih7dGlsZV86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwieFwiLFwidGlsZVwiLG51bGwpO0Mobi5yYW5rPT09ZS5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiB0cmFuc3Bvc2U6IHJhbmsgb2YgaW5wdXQgXCIrbi5yYW5rK1wiIG11c3QgbWF0Y2ggbGVuZ3RoIG9mIHJlcHMgXCIrZStcIi5cIn0pKTt2YXIgcj1bbl0sbz17cmVwczplfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxyKXt2YXIgbz10LnRpbGUobixlKTtyZXR1cm4gcihbbl0pLG99KSx7eDpufSwoZnVuY3Rpb24odCxuKXt2YXIgcj1uWzBdO3JldHVybnt4OmZ1bmN0aW9uKCl7dmFyIG49WG4ocik7aWYoMT09PXIucmFuaylmb3IodmFyIG89MDtvPGVbMF07KytvKW49bi5hZGQodC5zbGljZShbbypyLnNoYXBlWzBdXSxbci5zaGFwZVswXV0pKTtlbHNlIGlmKDI9PT1yLnJhbmspZm9yKG89MDtvPGVbMF07KytvKWZvcih2YXIgYT0wO2E8ZVsxXTsrK2Epbj1uLmFkZCh0LnNsaWNlKFtvKnIuc2hhcGVbMF0sYSpyLnNoYXBlWzFdXSxbci5zaGFwZVswXSxyLnNoYXBlWzFdXSkpO2Vsc2UgaWYoMz09PXIucmFuaylmb3Iobz0wO288ZVswXTsrK28pZm9yKGE9MDthPGVbMV07KythKWZvcih2YXIgaT0wO2k8ZVsyXTsrK2kpbj1uLmFkZCh0LnNsaWNlKFtvKnIuc2hhcGVbMF0sYSpyLnNoYXBlWzFdLGkqci5zaGFwZVsyXV0sW3Iuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdXSkpO2Vsc2V7aWYoNCE9PXIucmFuayl0aHJvdyBuZXcgRXJyb3IoXCJHcmFkaWVudCBmb3IgdGlsZSBvcGVyYXRpb24gaXMgbm90IGltcGxlbWVudGVkIGZvciByYW5rLVwiK3IucmFuaytcIiB0ZW5zb3JzIHlldC5cIik7Zm9yKG89MDtvPGVbMF07KytvKWZvcihhPTA7YTxlWzFdOysrYSlmb3IoaT0wO2k8ZVsyXTsrK2kpZm9yKHZhciBzPTA7czxlWzNdOysrcyluPW4uYWRkKHQuc2xpY2UoW28qci5zaGFwZVswXSxhKnIuc2hhcGVbMV0saSpyLnNoYXBlWzJdLHMqci5zaGFwZVszXV0sW3Iuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdLHIuc2hhcGVbM11dKSl9cmV0dXJuIG59fX0pLFwiVGlsZVwiLG8scil9fSksV3I9QW4oe3RydW5jYXRlZE5vcm1hbF86ZnVuY3Rpb24odCxlLG4scixvKXtpZih2b2lkIDA9PT1lJiYoZT0wKSx2b2lkIDA9PT1uJiYobj0xKSxudWxsIT1yJiZcImJvb2xcIj09PXIpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGF0YSB0eXBlIFwiK3IpO2Zvcih2YXIgYT1uZXcgbHIoZSxuLHIsITAsbyksaT1kcih0LHIpLHM9MDtzPGkudmFsdWVzLmxlbmd0aDtzKyspaS52YWx1ZXNbc109YS5uZXh0VmFsdWUoKTtyZXR1cm4gaS50b1RlbnNvcigpfX0pLFVyPUFuKHt1bnN0YWNrXzpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPTApLGU9ZXx8MDt2YXIgbj1tbih0LFwieFwiLFwidW5zdGFja1wiKTtDKGU+PS1uLnNoYXBlLmxlbmd0aCYmZTxuLnNoYXBlLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cIkF4aXMgPSBcIitlK1wiIGlzIG5vdCBpbiBbLVwiK24uc2hhcGUubGVuZ3RoK1wiLCBcIituLnNoYXBlLmxlbmd0aCtcIilcIn0pKSxlPDAmJihlKz1uLnNoYXBlLmxlbmd0aCk7dmFyIHI9e2F4aXM6ZX07cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnVuc3RhY2sobixlKX0pLHt4Om59LChmdW5jdGlvbih0KXtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiBQcih0LGUpfX19KSxcIlVucGFja1wiLHIpfX0pLFZyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBuLG8sYSxpLHMsdSxjLGwsaCxmO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG49bW4odCxcInhcIixcInNldGRpZmYxZFwiKSxvPW1uKGUsXCJ5XCIsXCJzZXRkaWZmMWRcIiksQyhuLmR0eXBlPT09by5kdHlwZSwoZnVuY3Rpb24oKXtyZXR1cm5cInggYW5kIHkgc2hvdWxkIGhhdmUgdGhlIHNhbWUgZHR5cGUsIGJ1dCBnb3QgeCAoXCIrbi5kdHlwZStcIikgYW5kIHkgKFwiK28uZHR5cGUrXCIpLlwifSkpLEMoMT09PW4ucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cInggc2hvdWxkIGJlIDFEIHRlbnNvciwgYnV0IGdvdCB4IChcIituLnNoYXBlK1wiKS5cIn0pKSxDKDE9PT1vLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJ5IHNob3VsZCBiZSAxRCB0ZW5zb3IsIGJ1dCBnb3QgeSAoXCIrby5zaGFwZStcIikuXCJ9KSksWzQsbi5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gYT1yLnNlbnQoKSxbNCxvLmRhdGEoKV07Y2FzZSAyOmZvcihpPXIuc2VudCgpLHM9bmV3IFNldChpKSx1PTAsaD0wO2g8YS5sZW5ndGg7aCsrKXMuaGFzKGFbaF0pfHx1Kys7Zm9yKGM9bmV3IGd0KFt1XSxuLmR0eXBlKSxsPW5ldyBndChbdV0sXCJpbnQzMlwiKSxoPTAsZj0wO2g8YS5sZW5ndGg7aCsrKXMuaGFzKGFbaF0pfHwoYy52YWx1ZXNbZl09YVtoXSxsLnZhbHVlc1tmXT1oLGYrKyk7cmV0dXJuWzIsW2MudG9UZW5zb3IoKSxsLnRvVGVuc29yKCldXX19KSl9KSl9O2Z1bmN0aW9uIHpyKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPSEwKTt2YXIgbz1bXTtpZihyKShvPW8uY29uY2F0KGUuc2xpY2UoMCkpKS5wdXNoKHRbMF0vbiksbz1vLmNvbmNhdCh0LnNsaWNlKDEpKTtlbHNle289by5jb25jYXQodFswXSk7Zm9yKHZhciBhPWUubGVuZ3RoLGk9MDtpPGE7KytpKW89by5jb25jYXQoW3RbaSsxXS9lW2ldLGVbaV1dKTtvPW8uY29uY2F0KHQuc2xpY2UoYSsxKSl9cmV0dXJuIG99ZnVuY3Rpb24gR3IodCxlLG4pe3ZvaWQgMD09PW4mJihuPSEwKTt2YXIgcj1bXTtpZihuKXtyLnB1c2goZSk7Zm9yKHZhciBvPWUrMTtvPHQ7KytvKW88PTIqZT8oci5wdXNoKG8pLHIucHVzaChvLShlKzEpKSk6ci5wdXNoKG8pfWVsc2V7dmFyIGE9W10saT1bXTtmb3Iobz0xO288dDsrK28pbz49MiplKzF8fG8lMj09MT9pLnB1c2gobyk6YS5wdXNoKG8pO3IucHVzaC5hcHBseShyLGEpLHIucHVzaCgwKSxyLnB1c2guYXBwbHkocixpKX1yZXR1cm4gcn1mdW5jdGlvbiBIcih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMCk7dmFyIG89W107cj9vLnB1c2godFswXS9uKTpvLnB1c2godFswXSpuKTtmb3IodmFyIGE9MTthPHQubGVuZ3RoOysrYSlhPD1lLmxlbmd0aD9yP28ucHVzaChlW2EtMV0qdFthXSk6by5wdXNoKHRbYV0vZVthLTFdKTpvLnB1c2godFthXSk7cmV0dXJuIG99ZnVuY3Rpb24gcXIodCxlKXtmb3IodmFyIG49WzBdLHI9MDtyPGU7KytyKW4ucHVzaCh0W3JdWzBdKTtyZXR1cm4gbn1mdW5jdGlvbiBLcih0LGUsbil7Zm9yKHZhciByPXQuc2xpY2UoMCwxKSxvPTA7bzxuOysrbylyLnB1c2godFtvKzFdLWVbb11bMF0tZVtvXVsxXSk7cmV0dXJuIHJ9ZnVuY3Rpb24ganIodCxlKXtpZih0LnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5nYXRoZXJORCgpIGV4cGVjdHMgdGhlIGlucHV0IHRvIGJlIHJhbmsgMSBvciBoaWdoZXIsIGJ1dCB0aGUgcmFuayB3YXMgXCIrdC5yYW5rK1wiLlwiKTtpZihlLnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5nYXRoZXJORCgpIGV4cGVjdHMgdGhlIGluZGljZXMgdG8gYmUgcmFuayAxIG9yIGhpZ2hlciwgYnV0IHRoZSByYW5rIHdhcyBcIitlLnJhbmsrXCIuXCIpO2lmKFwiaW50MzJcIiE9PWUuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwidGYuZ2F0aGVyTkQoKSBleHBlY3RzIHRoZSBpbmRpY2VzIHRvIGJlIGludDMyIHR5cGUsIGJ1dCB0aGUgZHR5cGUgd2FzIFwiK2UuZHR5cGUrXCIuXCIpO2lmKGUuc2hhcGVbZS5yYW5rLTFdPnQucmFuayl0aHJvdyBuZXcgRXJyb3IoXCJpbmRleCBpbm5lcm1vc3QgZGltZW5zaW9uIGxlbmd0aCBtdXN0IGJlIDw9IHRlbnNvciByYW5rOyBzYXc6IFwiK2Uuc2hhcGVbZS5yYW5rLTFdK1wiIHZzLiBcIit0LnJhbmspO2lmKDA9PT10LnNpemUpdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGVkIG1vcmUgdGhhbiAwIGVudHJpZXMsIGJ1dCBpbnB1dCBpcyBlbXB0eS4gSW5wdXQgc2hhcGU6IFwiK3Quc2hhcGUrXCIuXCIpO2Zvcih2YXIgbj1lLnNoYXBlLHI9bltuLmxlbmd0aC0xXSxvPTEsYT0wO2E8bi5sZW5ndGgtMTsrK2Epbyo9blthXTt2YXIgaT10LnNoYXBlLHM9bi5zbGljZSgpO3MucG9wKCk7dmFyIHU9MTtmb3IoYT1yO2E8dC5yYW5rOysrYSl1Kj1pW2FdLHMucHVzaChpW2FdKTt2YXIgYz0kKHQuc2hhcGUpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQvdX0pKS5jb25jYXQoWzFdKS5zbGljZSgwLHIpO3JldHVybltzLG8sdSxjXX12YXIgWHI9T2JqZWN0LmZyZWV6ZSh7cHJlcGFyZUFuZFZhbGlkYXRlOmpyfSksWXI9MzA7ZnVuY3Rpb24gJHIodCl7cmV0dXJuIHQ8PVlyP3Q6WSh0LE1hdGguZmxvb3IoTWF0aC5zcXJ0KHQpKSl9ZnVuY3Rpb24gUXIodCxlLG4pe3ZhciByPWUucmFuaz4xP2Uuc2hhcGVbZS5yYW5rLTFdOjEsbz1lLnJhbms+MT9lLnJhbmstMToxLGE9XCJNdXN0IGhhdmUgdXBkYXRlcy5zaGFwZSA9IGluZGljZXMuc2hhcGVbOmJhdGNoRGltXSArIHNoYXBlW3NsaWNlRGltOl0sIGdvdCB1cGRhdGVzLnNoYXBlOiBcIituLnNoYXBlK1wiLCBpbmRpY2VzLnNoYXBlOiBcIitlLnNoYXBlK1wiLCBzaGFwZTogXCIrdCtcIiwgc2xpY2VEaW06IFwiK3IrXCIsIGFuZCBiYXRjaERpbTogXCIrbytcIi5cIjtpZihuLnJhbms8byl0aHJvdyBuZXcgRXJyb3IoYStcIiB1cGRhdGUucmFuayA8IFwiK28rXCIuIFwiKTtpZih0Lmxlbmd0aDxyKyhuLnJhbmstbykpdGhyb3cgbmV3IEVycm9yKGErXCIgT3V0cHV0IHNoYXBlIGxlbmd0aCA8IFwiKyhyKyhuLnJhbmstbykpKTtpZihuLnJhbmshPT1vK3QubGVuZ3RoLXIpdGhyb3cgbmV3IEVycm9yKGErXCIgdXBkYXRlLnJhbmsgIT0gXCIrKG8rdC5sZW5ndGgtcikpO2Zvcih2YXIgaT0wO2k8bzsrK2kpaWYobi5zaGFwZVtpXSE9PWUuc2hhcGVbaV0pdGhyb3cgbmV3IEVycm9yKGErXCIgdXBkYXRlcy5zaGFwZVtcIitpK1wiXSAoXCIrbi5zaGFwZVtpXStcIikgIT0gaW5kaWNlcy5zaGFwZVtcIitpK1wiXSAoXCIrZS5zaGFwZVtpXStcIikuXCIpO2ZvcihpPTA7aTxuLnJhbmstbzsrK2kpaWYobi5zaGFwZVtpK29dIT09dFtpK3JdKXRocm93IG5ldyBFcnJvcihhK1wiIHVwZGF0ZXMuc2hhcGVbXCIrKGkrbykrXCJdIChcIituLnNoYXBlW2krb10rXCIpICE9IHNoYXBlW1wiKyhpK28pK1wiXSAoXCIrdFtpK29dK1wiKVwiKX1mdW5jdGlvbiBKcih0LGUsbil7aWYoZS5yYW5rPDEpdGhyb3cgbmV3IEVycm9yKFwidGYuc2NhdHRlck5EKCkgZXhwZWN0cyB0aGUgaW5kaWNlcyB0byBiZSByYW5rIDEgb3IgaGlnaGVyLCBidXQgdGhlIHJhbmsgd2FzIFwiK2UucmFuaytcIi5cIik7aWYodC5yYW5rPDEpdGhyb3cgbmV3IEVycm9yKFwidGYuc2NhdHRlck5EKCkgZXhwZWN0cyB0aGUgdXBkYXRlcyB0byBiZSByYW5rIDEgb3IgaGlnaGVyLCBidXQgdGhlIHJhbmsgd2FzIFwiK3QucmFuaytcIi5cIik7aWYoXCJpbnQzMlwiIT09ZS5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZHR5cGUgb2YgJ2luZGljZXMnIHNob3VsZCBiZSBpbnQzMiwgYnV0IGdvdCBkdHlwZTogXCIrZS5kdHlwZSk7aWYobi5sZW5ndGg8MSl0aHJvdyBuZXcgRXJyb3IoXCJPdXRwdXQgcmFuayBtdXN0IGJlIGdyZWF0ZXIgb3IgZXF1YWwgdG8gMSwgYnV0IGdvdCBzaGFwZTogXCIrbik7aWYoMD09PW4ubGVuZ3RoKXtpZigwPT09ZS5zaXplKXRocm93IG5ldyBFcnJvcihcIkluZGljZXMgc3BlY2lmaWVkIGZvciBlbXB0eSBvdXRwdXQuIGluZGljZXMgc2hhcGU6IFwiK2Uuc2hhcGUpO2lmKDA9PT10LnNpemUpdGhyb3cgbmV3IEVycm9yKFwiVXBkYXRlcyBzcGVjaWZpZWQgZm9yIGVtcHR5IG91dHB1dC4gdXBkYXRlcyBzaGFwZTogXCIrdC5zaGFwZSl9UXIobixlLHQpfWZ1bmN0aW9uIFpyKHQsZSxuKXtmb3IodmFyIHI9ZS5zaGFwZS5sZW5ndGgsbz1yPjE/ZS5zaGFwZVtyLTFdOjEsYT1uLmxlbmd0aCxpPTEscz1vO3M8YTsrK3MpaSo9bltzXTt2YXIgdT1vPDE/MTpvO3JldHVybntzbGljZVJhbms6byxudW1VcGRhdGVzOmsoZS5zaGFwZSkvdSxzbGljZVNpemU6aSxzdHJpZGVzOiQobi5zbGljZSgwLG8pKS5jb25jYXQoWzFdKSxvdXRwdXRTaXplOmsobil9fXZhciB0bz1PYmplY3QuZnJlZXplKHt2YWxpZGF0ZVVwZGF0ZVNoYXBlOlFyLHZhbGlkYXRlSW5wdXQ6SnIsY2FsY3VsYXRlU2hhcGVzOlpyfSk7ZnVuY3Rpb24gZW8odCxlLG4pe0ModC5yYW5rPT09ZS5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzbGljZVwiK3QucmFuaytcIkQ6IExlbmd0aCBvZiBiZWdpbiBcIitlK1wiIG11c3QgbWF0Y2ggdGhlIHJhbmsgb2YgdGhlIGFycmF5IChcIit0LnJhbmsrXCIpLlwifSkpLEModC5yYW5rPT09bi5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzbGljZVwiK3QucmFuaytcIkQ6IExlbmd0aCBvZiBzaXplIFwiK24rXCIgbXVzdCBtYXRjaCB0aGUgcmFuayBvZiB0aGUgYXJyYXkgKFwiK3QucmFuaytcIikuXCJ9KSk7Zm9yKHZhciByPWZ1bmN0aW9uKHIpe0MoZVtyXStuW3JdPD10LnNoYXBlW3JdLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2xpY2VcIit0LnJhbmsrXCJEOiBiZWdpbltcIityK1wiXSArIHNpemVbXCIrcitcIl0gKFwiKyhlW3JdK25bcl0pK1wiKSB3b3VsZCBvdmVyZmxvdyBpbnB1dC5zaGFwZVtcIityK1wiXSAoXCIrdC5zaGFwZVtyXStcIilcIn0pKX0sbz0wO288dC5yYW5rOysrbylyKG8pfWZ1bmN0aW9uIG5vKHQpe2Zvcih2YXIgZT1bXSxuPTA7dD4wOykxJnQmJmUucHVzaChuKSx0Lz0yLG4rKztyZXR1cm4gZX1mdW5jdGlvbiBybyh0LGUsbil7Zm9yKHZhciByPVtdLG89MDtvPHQubGVuZ3RoO28rKylyW29dPU1hdGguY2VpbCgoZVtvXS10W29dKS9uW29dKTtyZXR1cm4gcn1mdW5jdGlvbiBvbyh0LGUsbixyLG8pe3ZhciBhPWVbb10saT1uW29dfHwxOyh0JjE8PG98fG51bGw9PWEpJiYoYT1pPjA/TnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI6TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpO3ZhciBzPXJbb107cmV0dXJuIGE8MCYmKGErPXMpLGE9eCgwLGEscy0xKX1mdW5jdGlvbiBhbyh0LGUsbixyLG8pe3ZhciBhPWVbb10saT1uW29dfHwxOyh0JjE8PG98fG51bGw9PWEpJiYoYT1pPjA/TnVtYmVyLk1BWF9TQUZFX0lOVEVHRVI6TnVtYmVyLk1JTl9TQUZFX0lOVEVHRVIpO3ZhciBzPXJbb107cmV0dXJuIGE8MCYmKGErPXMpLGE9aT4wP3goMCxhLHMpOngoLTEsYSxzLTEpfWZ1bmN0aW9uIGlvKHQsZSxuKXtmb3IodmFyIHI9bi5sZW5ndGgsbz0wO288bi5sZW5ndGg7bysrKWlmKG5bb10+MSl7cj1vO2JyZWFrfWZvcihvPXIrMTtvPG4ubGVuZ3RoO28rKylpZihlW29dPjB8fG5bb10hPT10W29dKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIHNvKHQsZSl7Zm9yKHZhciBuPXQubGVuZ3RoPjA/dFt0Lmxlbmd0aC0xXToxLHI9MDtyPHQubGVuZ3RoLTE7cisrKW4rPXRbcl0qZVtyXTtyZXR1cm4gbn12YXIgdW89T2JqZWN0LmZyZWV6ZSh7YXNzZXJ0UGFyYW1zVmFsaWQ6ZW8sbWFza1RvQXhlczpubyxjb21wdXRlT3V0U2hhcGU6cm8sc3RhcnRGb3JBeGlzOm9vLHN0b3BGb3JBeGlzOmFvLGlzU2xpY2VDb250aW5vdXM6aW8sY29tcHV0ZUZsYXRPZmZzZXQ6c299KTtmdW5jdGlvbiBjbyh0KXtyZXR1cm4gQyhYKHQpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGYgcGFzc2VkIGluIGdyYWQoZikgbXVzdCBiZSBhIGZ1bmN0aW9uXCJ9KSksZnVuY3Rpb24oZSxuKXt2YXIgcj1tbihlLFwieFwiLFwidGYuZ3JhZFwiLG51bGwpLG89bnVsbCE9bj9tbihuLFwiZHlcIixcInRmLmdyYWRcIik6bnVsbDtyZXR1cm4gTHQudGlkeSgoZnVuY3Rpb24oKXt2YXIgZT1MdC5ncmFkaWVudHMoKGZ1bmN0aW9uKCl7cmV0dXJuIHQocil9KSxbcl0sbyksbj1lLnZhbHVlLGE9ZS5ncmFkcztyZXR1cm4gbnVsbCE9byYmRShuLnNoYXBlLG8uc2hhcGUsXCJUaGUgc2hhcGUgb2YgZHkgcGFzc2VkIGluIGdyYWQoZikoeCwgZHkpIG11c3QgbWF0Y2ggdGhlIHNoYXBlIHJldHVybmVkIGJ5IGYoeClcIiksbW8oYSksYVswXX0pKX19ZnVuY3Rpb24gbG8odCl7cmV0dXJuIEMoWCh0KSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmIHBhc3NlZCBpbiBncmFkcyhmKSBtdXN0IGJlIGEgZnVuY3Rpb25cIn0pKSxmdW5jdGlvbihlLG4pe0MoQXJyYXkuaXNBcnJheShlKSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBhcmdzIHBhc3NlZCBpbiBncmFkcyhmKShhcmdzKSBtdXN0IGJlIGFuIGFycmF5IG9mIGBUZW5zb3JgcyBvciBgVGVuc29yTGlrZWBzXCJ9KSk7dmFyIHI9Z24oZSxcImFyZ3NcIixcInRmLmdyYWRzXCIsbnVsbCksbz1udWxsIT1uP21uKG4sXCJkeVwiLFwidGYuZ3JhZHNcIik6bnVsbDtyZXR1cm4gTHQudGlkeSgoZnVuY3Rpb24oKXt2YXIgZT1MdC5ncmFkaWVudHMoKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYXBwbHkodm9pZCAwLHIpfSkscixvKSxuPWUudmFsdWUsYT1lLmdyYWRzO3JldHVybiBudWxsIT1vJiZFKG4uc2hhcGUsby5zaGFwZSxcIlRoZSBzaGFwZSBvZiBkeSBwYXNzZWQgaW4gZ3JhZHMoZikoW3gxLC4uLl0sIGR5KSBtdXN0IG1hdGNoIHRoZSBzaGFwZSByZXR1cm5lZCBieSBmKFt4MSwuLi5dKVwiKSxtbyhhKSxhfSkpfX1mdW5jdGlvbiBobyh0KXtyZXR1cm4gQyhYKHQpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGYgcGFzc2VkIGluIHZhbHVlQW5kR3JhZChmKSBtdXN0IGJlIGEgZnVuY3Rpb25cIn0pKSxmdW5jdGlvbihlLG4pe0MoZSBpbnN0YW5jZW9mIHd0LChmdW5jdGlvbigpe3JldHVyblwiVGhlIHggcGFzc2VkIGluIHZhbHVlQW5kR3JhZChmKSh4KSBtdXN0IGJlIGEgdGVuc29yXCJ9KSksQyhudWxsPT1ufHxuIGluc3RhbmNlb2Ygd3QsKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHkgcGFzc2VkIGluIHZhbHVlQW5kR3JhZChmKSh4LCBkeSkgbXVzdCBiZSBhIHRlbnNvclwifSkpO3ZhciByPUx0LmdyYWRpZW50cygoZnVuY3Rpb24oKXtyZXR1cm4gdChlKX0pLFtlXSxuKSxvPXIuZ3JhZHMsYT1yLnZhbHVlO3JldHVybiBtbyhvKSx7Z3JhZDpvWzBdLHZhbHVlOmF9fX1mdW5jdGlvbiBmbyh0KXtyZXR1cm4gQyhYKHQpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGYgcGFzc2VkIGluIHZhbHVlQW5kR3JhZHMoZikgbXVzdCBiZSBhIGZ1bmN0aW9uXCJ9KSksZnVuY3Rpb24oZSxuKXtDKEFycmF5LmlzQXJyYXkoZSkmJmUuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2Ygd3R9KSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJncyBwYXNzZWQgaW4gdmFsdWVBbmRHcmFkcyhmKShhcmdzKSBtdXN0IGJlIGFycmF5IG9mIHRlbnNvcnNcIn0pKSxDKG51bGw9PW58fG4gaW5zdGFuY2VvZiB3dCwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBkeSBwYXNzZWQgaW4gdmFsdWVBbmRHcmFkcyhmKShhcmdzLCBkeSkgbXVzdCBiZSBhIHRlbnNvclwifSkpO3ZhciByPUx0LmdyYWRpZW50cygoZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseSh2b2lkIDAsZSl9KSxlLG4pO3JldHVybiBudWxsIT1uJiZFKHIudmFsdWUuc2hhcGUsbi5zaGFwZSxcIlRoZSBzaGFwZSBvZiBkeSBwYXNzZWQgaW4gdmFsdWVBbmRHcmFkcyhmKShbeDEsLi4uXSwgZHkpIG11c3QgbWF0Y2ggdGhlIHNoYXBlIHJldHVybmVkIGJ5IGYoW3gxLC4uLl0pXCIpLG1vKHIuZ3JhZHMpLHJ9fWZ1bmN0aW9uIHBvKHQsZSl7QyhYKHQpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGYgcGFzc2VkIGluIHZhcmlhYmxlR3JhZHMoZikgbXVzdCBiZSBhIGZ1bmN0aW9uXCJ9KSksQyhudWxsPT1lfHxBcnJheS5pc0FycmF5KGUpJiZlLmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIFN0fSkpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIHZhckxpc3QgcGFzc2VkIGluIHZhcmlhYmxlR3JhZHMoZiwgdmFyTGlzdCkgbXVzdCBiZSBhbiBhcnJheSBvZiB2YXJpYWJsZXNcIn0pKTt2YXIgbj1udWxsIT1lO2lmKCFuKWZvcih2YXIgciBpbiBlPVtdLEx0LnJlZ2lzdGVyZWRWYXJpYWJsZXMpZS5wdXNoKEx0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbcl0pO3ZhciBvPW4/ZS5maWx0ZXIoKGZ1bmN0aW9uKHQpe3JldHVybiF0LnRyYWluYWJsZX0pKTpudWxsLGE9ZS5sZW5ndGg7QygoZT1lLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQudHJhaW5hYmxlfSkpKS5sZW5ndGg+MCwoZnVuY3Rpb24oKXtyZXR1cm5cInZhcmlhYmxlR3JhZHMoKSBleHBlY3RzIGF0IGxlYXN0IG9uZSBvZiB0aGUgaW5wdXQgdmFyaWFibGVzIHRvIGJlIHRyYWluYWJsZSwgYnV0IG5vbmUgb2YgdGhlIFwiK2ErXCIgdmFyaWFibGVzIGlzIHRyYWluYWJsZS5cIn0pKTt2YXIgaT1MdC5ncmFkaWVudHModCxlLG51bGwsITApLHM9aS52YWx1ZSx1PWkuZ3JhZHM7Qyh1LnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT10fSkpLChmdW5jdGlvbigpe3JldHVyblwiQ2Fubm90IGZpbmQgYSBjb25uZWN0aW9uIGJldHdlZW4gYW55IHZhcmlhYmxlIGFuZCB0aGUgcmVzdWx0IG9mIHRoZSBsb3NzIGZ1bmN0aW9uIHk9Zih4KS4gUGxlYXNlIG1ha2Ugc3VyZSB0aGUgb3BlcmF0aW9ucyB0aGF0IHVzZSB2YXJpYWJsZXMgYXJlIGluc2lkZSB0aGUgZnVuY3Rpb24gZiBwYXNzZWQgdG8gbWluaW1pemUoKS5cIn0pKSxDKDA9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZiBwYXNzZWQgaW4gdmFyaWFibGVHcmFkcyhmKSBtdXN0IHJldHVybiBhIHNjYWxhciwgYnV0IGl0IHJldHVybmVkIGEgcmFuay1cIitzLnJhbmsrXCIgdGVuc29yXCJ9KSk7dmFyIGM9e307cmV0dXJuIGUuZm9yRWFjaCgoZnVuY3Rpb24odCxlKXtudWxsIT11W2VdJiYoY1t0Lm5hbWVdPXVbZV0pfSkpLG51bGwhPW8mJm8uZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIGNbdC5uYW1lXT1udWxsfSkpLHt2YWx1ZTpzLGdyYWRzOmN9fWZ1bmN0aW9uIHZvKHQpe3JldHVybiBMdC5jdXN0b21HcmFkKHQpfWZ1bmN0aW9uIG1vKHQpe2lmKHQuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dH0pKS5sZW5ndGg+MCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBncmFkaWVudCBvZiB5PWYoeCkgd2l0aCByZXNwZWN0IHRvIHguIE1ha2Ugc3VyZSB0aGF0XFxuICAgIHRoZSBmIHlvdSBwYXNzZWQgZW5jbG9zZXMgYWxsIG9wZXJhdGlvbnMgdGhhdCBsZWFkIGZyb20geCB0byB5LlwiKX12YXIgZ289QW4oe3NvZnRtYXhfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9LTEpO3ZhciBuPW1uKHQsXCJsb2dpdHNcIixcInNvZnRtYXhcIixcImZsb2F0MzJcIik7aWYoLTE9PT1lJiYoZT1uLnJhbmstMSksZSE9PW4ucmFuay0xKXRocm93IEVycm9yKFwiU29mdG1heCBhbG9uZyBhIG5vbi1sYXN0IGRpbWVuc2lvbiBpcyBub3QgeWV0IHN1cHBvcnRlZC4gTG9naXRzIHdhcyByYW5rIFwiK24ucmFuaytcIiBhbmQgZGltIHdhcyBcIitlKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxyKXt2YXIgbz10LnNvZnRtYXgobixlKTtyZXR1cm4gcihbb10pLG99KSx7bG9naXRzOm59LChmdW5jdGlvbih0LG4pe3ZhciByPW5bMF0sbz10Lm11bChyKTtyZXR1cm57bG9naXRzOmZ1bmN0aW9uKCl7cmV0dXJuIG8uc3ViKG8uc3VtKFtlXSwhMCkubXVsKHIpKX19fSksXCJTb2Z0bWF4XCIse2RpbTplfSxbXSxbITBdKX19KSx5bz1Bbih7bG9nU29mdG1heF86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0tMSk7dmFyIG49bW4odCxcImxvZ2l0c1wiLFwibG9nU29mdG1heFwiKTtpZigtMT09PWUmJihlPW4ucmFuay0xKSxlIT09bi5yYW5rLTEpdGhyb3cgRXJyb3IoXCJMb2cgU29mdG1heCBhbG9uZyBhIG5vbi1sYXN0IGRpbWVuc2lvbiBpcyBub3QgeWV0IHN1cHBvcnRlZC4gTG9naXRzIHdhcyByYW5rIFwiK24ucmFuaytcIiBhbmQgYXhpcyB3YXMgXCIrZSk7cmV0dXJuIHZvKChmdW5jdGlvbih0LG4pe3ZhciByPXQubWF4KGUsITApLG89dC5zdWIociksYT1vLnRvRmxvYXQoKS5zdWIoby5leHAoKS5zdW0oZSwhMCkubG9nKCkpO24oW2FdKTtyZXR1cm57dmFsdWU6YSxncmFkRnVuYzpmdW5jdGlvbih0LG4pe3ZhciByPW5bMF0uZXhwKCk7cmV0dXJuIHQuc3ViKHQuc3VtKGUsITApLm11bChyKSl9fX0pKShuKX19KSx4bz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt0aGlzLmJhY2tlbmQ9dCx0aGlzLmRhdGFNb3Zlcj1lLHRoaXMuZGF0YT1uZXcgV2Vha01hcCx0aGlzLmRhdGFJZHNDb3VudD0wfXJldHVybiB0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YS5oYXModCl8fHRoaXMuZGF0YU1vdmVyLm1vdmVEYXRhKHRoaXMuYmFja2VuZCx0KSx0aGlzLmRhdGEuZ2V0KHQpfSx0LnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCxlKXt0aGlzLmRhdGFJZHNDb3VudCsrLHRoaXMuZGF0YS5zZXQodCxlKX0sdC5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRhdGEuaGFzKHQpfSx0LnByb3RvdHlwZS5kZWxldGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YUlkc0NvdW50LS0sdGhpcy5kYXRhLmRlbGV0ZSh0KX0sdC5wcm90b3R5cGUubnVtRGF0YUlkcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmRhdGFJZHNDb3VudH0sdH0oKSxibz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLnRpbWU9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwidGltZVwiKX0sdC5wcm90b3R5cGUucmVhZD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJyZWFkXCIpfSx0LnByb3RvdHlwZS5yZWFkU3luYz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJyZWFkU3luY1wiKX0sdC5wcm90b3R5cGUubnVtRGF0YUlkcz1mdW5jdGlvbigpe3JldHVybiB3byhcIm51bURhdGFJZHNcIil9LHQucHJvdG90eXBlLmRpc3Bvc2VEYXRhPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImRpc3Bvc2VEYXRhXCIpfSx0LnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwid3JpdGVcIil9LHQucHJvdG90eXBlLm1vdmU9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHdvKFwibW92ZVwiKX0sdC5wcm90b3R5cGUubWVtb3J5PWZ1bmN0aW9uKCl7cmV0dXJuIHdvKFwibWVtb3J5XCIpfSx0LnByb3RvdHlwZS5mbG9hdFByZWNpc2lvbj1mdW5jdGlvbigpe3JldHVybiB3byhcImZsb2F0UHJlY2lzaW9uXCIpfSx0LnByb3RvdHlwZS5lcHNpbG9uPWZ1bmN0aW9uKCl7cmV0dXJuIDMyPT09dGhpcy5mbG9hdFByZWNpc2lvbigpPzFlLTc6MWUtNH0sdC5wcm90b3R5cGUuYmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHdvKFwiYmF0Y2hNYXRNdWxcIil9LHQucHJvdG90eXBlLmZ1c2VkQmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCl7dC5hLHQuYix0LnRyYW5zcG9zZUEsdC50cmFuc3Bvc2VCLHQuYmlhcyx0LmFjdGl2YXRpb24sdC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzO3JldHVybiB3byhcImZ1c2VkQmF0Y2hNYXRNdWxcIil9LHQucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gd28oXCJzbGljZVwiKX0sdC5wcm90b3R5cGUuc3RyaWRlZFNsaWNlPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB3byhcInN0cmlkZWRTbGljZVwiKX0sdC5wcm90b3R5cGUudW5zdGFjaz1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcInVuc3RhY2tcIil9LHQucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJyZXZlcnNlXCIpfSx0LnByb3RvdHlwZS5jb25jYXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJjb25jYXRcIil9LHQucHJvdG90eXBlLm5lZz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJuZWdcIil9LHQucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImFkZFwiKX0sdC5wcm90b3R5cGUuYWRkTj1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJhZGROXCIpfSx0LnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcInN1YnRyYWN0XCIpfSx0LnByb3RvdHlwZS5tdWx0aXBseT1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcIm11bHRpcGx5XCIpfSx0LnByb3RvdHlwZS5yZWFsRGl2aWRlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwicmVhbERpdmlkZVwiKX0sdC5wcm90b3R5cGUuZmxvb3JEaXY9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJmbG9vckRpdlwiKX0sdC5wcm90b3R5cGUuc3VtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwic3VtXCIpfSx0LnByb3RvdHlwZS5wcm9kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwicHJvZFwiKX0sdC5wcm90b3R5cGUudW5zb3J0ZWRTZWdtZW50U3VtPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gd28oXCJ1bnNvcnRlZFNlZ21lbnRTdW1cIil9LHQucHJvdG90eXBlLmFyZ01pbj1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImFyZ01pblwiKX0sdC5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiYXJnTWF4XCIpfSx0LnByb3RvdHlwZS5lcXVhbD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImVxdWFsXCIpfSx0LnByb3RvdHlwZS5ub3RFcXVhbD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcIm5vdEVxdWFsXCIpfSx0LnByb3RvdHlwZS5sZXNzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwibGVzc1wiKX0sdC5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwibGVzc0VxdWFsXCIpfSx0LnByb3RvdHlwZS5ncmVhdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiZ3JlYXRlclwiKX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiZ3JlYXRlckVxdWFsXCIpfSx0LnByb3RvdHlwZS5sb2dpY2FsTm90PWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImxvZ2ljYWxOb3RcIil9LHQucHJvdG90eXBlLmxvZ2ljYWxBbmQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJsb2dpY2FsQW5kXCIpfSx0LnByb3RvdHlwZS5sb2dpY2FsT3I9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJsb2dpY2FsT3JcIil9LHQucHJvdG90eXBlLndoZXJlPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcIndoZXJlXCIpfSx0LnByb3RvdHlwZS5zZWxlY3Q9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcInNlbGVjdFwiKX0sdC5wcm90b3R5cGUudG9waz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwidG9wa1wiKX0sdC5wcm90b3R5cGUubWluPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwibWluXCIpfSx0LnByb3RvdHlwZS5taW5pbXVtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwibWluaW11bVwiKX0sdC5wcm90b3R5cGUubW9kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwibW9kXCIpfSx0LnByb3RvdHlwZS5tYXg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJtYXhcIil9LHQucHJvdG90eXBlLm1heGltdW09ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJtYXhpbXVtXCIpfSx0LnByb3RvdHlwZS5hbGw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJhbGxcIil9LHQucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImFueVwiKX0sdC5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJzcXVhcmVkRGlmZmVyZW5jZVwiKX0sdC5wcm90b3R5cGUuY2VpbD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJjZWlsXCIpfSx0LnByb3RvdHlwZS5mbG9vcj1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJmbG9vclwiKX0sdC5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwicm91bmRcIil9LHQucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwic2lnblwiKX0sdC5wcm90b3R5cGUuaXNOYU49ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiaXNOYU5cIil9LHQucHJvdG90eXBlLmlzSW5mPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImlzSW5mXCIpfSx0LnByb3RvdHlwZS5pc0Zpbml0ZT1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJpc0Zpbml0ZVwiKX0sdC5wcm90b3R5cGUucG93PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwicG93XCIpfSx0LnByb3RvdHlwZS5leHA9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiZXhwXCIpfSx0LnByb3RvdHlwZS5leHBtMT1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJleHBtMVwiKX0sdC5wcm90b3R5cGUuc29mdG1heD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcInNvZnRtYXhcIil9LHQucHJvdG90eXBlLmxvZz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJsb2dcIil9LHQucHJvdG90eXBlLmxvZzFwPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImxvZzFwXCIpfSx0LnByb3RvdHlwZS5zcXJ0PWZ1bmN0aW9uKHQpe3JldHVybiB3byhcInNxcnRcIil9LHQucHJvdG90eXBlLnJzcXJ0PWZ1bmN0aW9uKHQpe3JldHVybiB3byhcInJzcXJ0XCIpfSx0LnByb3RvdHlwZS5zcXVhcmU9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwic3F1YXJlXCIpfSx0LnByb3RvdHlwZS5yZWNpcHJvY2FsPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcInJlY2lwcm9jYWxcIil9LHQucHJvdG90eXBlLnJlbHU9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwicmVsdVwiKX0sdC5wcm90b3R5cGUucmVsdTY9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwicmVsdTZcIil9LHQucHJvdG90eXBlLnByZWx1PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwicHJlbHVcIil9LHQucHJvdG90eXBlLmVsdT1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJlbHVcIil9LHQucHJvdG90eXBlLmVsdURlcj1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImVsdURlclwiKX0sdC5wcm90b3R5cGUuc2VsdT1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJzZWx1XCIpfSx0LnByb3RvdHlwZS5pbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiaW50XCIpfSx0LnByb3RvdHlwZS5jbGlwPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gd28oXCJjbGlwXCIpfSx0LnByb3RvdHlwZS5hYnM9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiYWJzXCIpfSx0LnByb3RvdHlwZS5jb21wbGV4QWJzPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImNvbXBsZXhBYnNcIil9LHQucHJvdG90eXBlLnNpZ21vaWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwic2lnbW9pZFwiKX0sdC5wcm90b3R5cGUuc29mdHBsdXM9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwic29mdHBsdXNcIil9LHQucHJvdG90eXBlLnNpbj1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJzaW5cIil9LHQucHJvdG90eXBlLmNvcz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJjb3NcIil9LHQucHJvdG90eXBlLnRhbj1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJ0YW5cIil9LHQucHJvdG90eXBlLmFzaW49ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiYXNpblwiKX0sdC5wcm90b3R5cGUuYWNvcz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJhY29zXCIpfSx0LnByb3RvdHlwZS5hdGFuPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImF0YW5cIil9LHQucHJvdG90eXBlLmF0YW4yPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiYXRhbjJcIil9LHQucHJvdG90eXBlLnNpbmg9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwic2luaFwiKX0sdC5wcm90b3R5cGUuY29zaD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJjb3NoXCIpfSx0LnByb3RvdHlwZS50YW5oPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcInRhbmhcIil9LHQucHJvdG90eXBlLmFzaW5oPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImFzaW5oXCIpfSx0LnByb3RvdHlwZS5hY29zaD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJhY29zaFwiKX0sdC5wcm90b3R5cGUuYXRhbmg9ZnVuY3Rpb24odCl7cmV0dXJuIHdvKFwiYXRhbmhcIil9LHQucHJvdG90eXBlLmVyZj1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJlcmZcIil9LHQucHJvdG90eXBlLnN0ZXA9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJzdGVwXCIpfSx0LnByb3RvdHlwZS5mdXNlZENvbnYyZD1mdW5jdGlvbih0KXt0LmlucHV0LHQuZmlsdGVyLHQuY29udkluZm8sdC5iaWFzLHQuYWN0aXZhdGlvbix0LnByZWx1QWN0aXZhdGlvbldlaWdodHM7cmV0dXJuIHdvKFwiZnVzZWRDb252MmRcIil9LHQucHJvdG90eXBlLmNvbnYyZD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiY29udjJkXCIpfSx0LnByb3RvdHlwZS5jb252MmREZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiY29udjJkRGVySW5wdXRcIil9LHQucHJvdG90eXBlLmNvbnYyZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiY29udjJkRGVyRmlsdGVyXCIpfSx0LnByb3RvdHlwZS5mdXNlZERlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0KXt0LmlucHV0LHQuZmlsdGVyLHQuY29udkluZm8sdC5iaWFzLHQuYWN0aXZhdGlvbix0LnByZWx1QWN0aXZhdGlvbldlaWdodHM7cmV0dXJuIHdvKFwiZnVzZWREZXB0aHdpc2VDb252MkRcIil9LHQucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiZGVwdGh3aXNlQ29udjJEXCIpfSx0LnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkREZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiZGVwdGh3aXNlQ29udjJERGVySW5wdXRcIil9LHQucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiZGVwdGh3aXNlQ29udjJERGVyRmlsdGVyXCIpfSx0LnByb3RvdHlwZS5jb252M2Q9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImNvbnYzZFwiKX0sdC5wcm90b3R5cGUuY29udjNkRGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImNvbnYzZERlcklucHV0XCIpfSx0LnByb3RvdHlwZS5jb252M2REZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImNvbnYzZERlckZpbHRlclwiKX0sdC5wcm90b3R5cGUubWF4UG9vbD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcIm1heFBvb2xcIil9LHQucHJvdG90eXBlLm1heFBvb2xCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gd28oXCJtYXhQb29sQmFja3Byb3BcIil9LHQucHJvdG90eXBlLmF2Z1Bvb2w9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJhdmdQb29sXCIpfSx0LnByb3RvdHlwZS5hdmdQb29sQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImF2Z1Bvb2xCYWNrcHJvcFwiKX0sdC5wcm90b3R5cGUuYXZnUG9vbDNkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiYXZnUG9vbDNkXCIpfSx0LnByb3RvdHlwZS5hdmdQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiYXZnUG9vbDNkQmFja3Byb3BcIil9LHQucHJvdG90eXBlLm1heFBvb2wzZD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcIm1heFBvb2wzZFwiKX0sdC5wcm90b3R5cGUubWF4UG9vbDNkQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHdvKFwibWF4UG9vbDNkQmFja3Byb3BcIil9LHQucHJvdG90eXBlLnJlc2hhcGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJyZXNoYXBlXCIpfSx0LnByb3RvdHlwZS5jYXN0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiY2FzdFwiKX0sdC5wcm90b3R5cGUudGlsZT1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcInRpbGVcIil9LHQucHJvdG90eXBlLnBhZD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwicGFkXCIpfSx0LnByb3RvdHlwZS50cmFuc3Bvc2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gd28oXCJ0cmFuc3Bvc2VcIil9LHQucHJvdG90eXBlLmdhdGhlcj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiZ2F0aGVyXCIpfSx0LnByb3RvdHlwZS5nYXRoZXJORD1mdW5jdGlvbih0LGUpe3JldHVybiB3byhcImdhdGhlck5EXCIpfSx0LnByb3RvdHlwZS5zY2F0dGVyTkQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcInNjYXR0ZXJORFwiKX0sdC5wcm90b3R5cGUuYmF0Y2hUb1NwYWNlTkQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImJhdGNoVG9TcGFjZU5EXCIpfSx0LnByb3RvdHlwZS5zcGFjZVRvQmF0Y2hORD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwic3BhY2VUb0JhdGNoTkRcIil9LHQucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB3byhcInJlc2l6ZUJpbGluZWFyXCIpfSx0LnByb3RvdHlwZS5yZXNpemVCaWxpbmVhckJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gd28oXCJyZXNpemVCaWxpbmVhckJhY2twcm9wXCIpfSx0LnByb3RvdHlwZS5yZXNpemVOZWFyZXN0TmVpZ2hib3I9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHdvKFwicmVzaXplTmVhcmVzdE5laWdoYm9yXCIpfSx0LnByb3RvdHlwZS5yZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwicmVzaXplTmVhcmVzdE5laWdoYm9yQmFja3Byb3BcIil9LHQucHJvdG90eXBlLmJhdGNoTm9ybWFsaXphdGlvbj1mdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIHdvKFwiYmF0Y2hOb3JtYWxpemF0aW9uXCIpfSx0LnByb3RvdHlwZS5sb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjREPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHdvKFwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb240RFwiKX0sdC5wcm90b3R5cGUuTFJOR3JhZD1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXtyZXR1cm4gd28oXCJMUk5HcmFkXCIpfSx0LnByb3RvdHlwZS5tdWx0aW5vbWlhbD1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gd28oXCJtdWx0aW5vbWlhbFwiKX0sdC5wcm90b3R5cGUub25lSG90PWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB3byhcIm9uZUhvdFwiKX0sdC5wcm90b3R5cGUuY3Vtc3VtPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB3byhcImN1bXN1bVwiKX0sdC5wcm90b3R5cGUubm9uTWF4U3VwcHJlc3Npb249ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gd28oXCJub25NYXhTdXBwcmVzc2lvblwiKX0sdC5wcm90b3R5cGUuZmZ0PWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImZmdFwiKX0sdC5wcm90b3R5cGUuaWZmdD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJpZmZ0XCIpfSx0LnByb3RvdHlwZS5jb21wbGV4PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdvKFwiY29tcGxleFwiKX0sdC5wcm90b3R5cGUucmVhbD1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJyZWFsXCIpfSx0LnByb3RvdHlwZS5pbWFnPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcImltYWdcIil9LHQucHJvdG90eXBlLmNyb3BBbmRSZXNpemU9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB3byhcImNyb3BBbmRSZXNpemVcIil9LHQucHJvdG90eXBlLmRlcHRoVG9TcGFjZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwiZGVwdGhUb1NwYWNlXCIpfSx0LnByb3RvdHlwZS5zcGxpdD1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHdvKFwic3BsaXRcIil9LHQucHJvdG90eXBlLnNwYXJzZVRvRGVuc2U9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHdvKFwic3BhcnNlVG9EZW5zZVwiKX0sdC5wcm90b3R5cGUuZGlhZz1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJkaWFnXCIpfSx0LnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gd28oXCJmaWxsXCIpfSx0LnByb3RvdHlwZS5vbmVzTGlrZT1mdW5jdGlvbih0KXtyZXR1cm4gd28oXCJvbmVzTGlrZVwiKX0sdC5wcm90b3R5cGUuemVyb3NMaWtlPWZ1bmN0aW9uKHQpe3JldHVybiB3byhcInplcm9zTGlrZVwiKX0sdC5wcm90b3R5cGUubGluc3BhY2U9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB3byhcImxpbnNwYWNlXCIpfSx0LnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7cmV0dXJuIHdvKFwiZGlzcG9zZVwiKX0sdH0oKTtmdW5jdGlvbiB3byh0KXt0aHJvdyBuZXcgRXJyb3IoXCInXCIrdCtcIicgbm90IHlldCBpbXBsZW1lbnRlZCBvciBub3QgZm91bmQgaW4gdGhlIHJlZ2lzdHJ5LiBEaWQgeW91IGZvcmdldCB0byBpbXBvcnQgdGhlIGtlcm5lbD9cIil9ZnVuY3Rpb24gQ28odCxlKXtmb3IodmFyIG49dC5sZW5ndGgscj1bXSxvPTA7bzxuO28rKyl7dmFyIGE9bi0xLW8saT10W2FdfHwxOyhlW2UubGVuZ3RoLTEtb118fDEpPjEmJjE9PT1pJiZyLnVuc2hpZnQoYSl9cmV0dXJuIHJ9ZnVuY3Rpb24gRW8odCxlKXtmb3IodmFyIG49W10scj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbz10W3QubGVuZ3RoLXItMV0sYT1lLmxlbmd0aC1yLTEsaT1lW2FdOyhudWxsPT1vfHwxPT09byYmaT4xKSYmbi51bnNoaWZ0KGEpfXJldHVybiBufWZ1bmN0aW9uIFJvKHQsZSl7Zm9yKHZhciBuPVtdLHI9TWF0aC5tYXgodC5sZW5ndGgsZS5sZW5ndGgpLG89MDtvPHI7bysrKXt2YXIgYT10W3QubGVuZ3RoLW8tMV07bnVsbD09YSYmKGE9MSk7dmFyIGk9ZVtlLmxlbmd0aC1vLTFdO2lmKG51bGw9PWkmJihpPTEpLDE9PT1hKW4udW5zaGlmdChpKTtlbHNlIGlmKDE9PT1pKW4udW5zaGlmdChhKTtlbHNle2lmKGEhPT1pKXRocm93IEVycm9yKFwiT3BlcmFuZHMgY291bGQgbm90IGJlIGJyb2FkY2FzdCB0b2dldGhlciB3aXRoIHNoYXBlcyBcIit0K1wiIGFuZCBcIitlK1wiLlwiKTtuLnVuc2hpZnQoYSl9fXJldHVybiBufWZ1bmN0aW9uIElvKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWkmJihpPVwiY2hhbm5lbHNMYXN0XCIpO3ZhciBzLHU9VG8oZSksYz11WzBdLGw9dVsxXTtpZihcImNoYW5uZWxzTGFzdFwiPT09aSlzPVtjLGwsdFszXSx0WzNdXTtlbHNle2lmKFwiY2hhbm5lbHNGaXJzdFwiIT09aSl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGFGb3JtYXQgXCIraSk7cz1bYyxsLHRbMV0sdFsxXV19cmV0dXJuIFNvKHQscyxuLHIsbyxhLCExLGkpfWZ1bmN0aW9uIGtvKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWkmJihpPVwiTkRIV0NcIik7dmFyIHMsdSxjPU5vKGUpLGw9Y1swXSxoPWNbMV0sZj1jWzJdO2lmKFwiTkRIV0NcIj09PWkpdT1cImNoYW5uZWxzTGFzdFwiLHM9W2wsaCxmLHRbNF0sdFs0XV07ZWxzZXtpZihcIk5DREhXXCIhPT1pKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YUZvcm1hdCBcIitpKTt1PVwiY2hhbm5lbHNGaXJzdFwiLHM9W2wsaCxmLHRbMV0sdFsxXV19cmV0dXJuIEFvKHQscyxuLHIsbywhMSx1LGEpfWZ1bmN0aW9uIFNvKHQsZSxuLHIsbyxhLGkscyl7dm9pZCAwPT09aSYmKGk9ITEpLHZvaWQgMD09PXMmJihzPVwiY2hhbm5lbHNMYXN0XCIpO3ZhciB1PVstMSwtMSwtMSwtMV0sYz11WzBdLGw9dVsxXSxoPXVbMl0sZj11WzNdO2lmKFwiY2hhbm5lbHNMYXN0XCI9PT1zKWM9dFswXSxsPXRbMV0saD10WzJdLGY9dFszXTtlbHNle2lmKFwiY2hhbm5lbHNGaXJzdFwiIT09cyl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGFGb3JtYXQgXCIrcyk7Yz10WzBdLGY9dFsxXSxsPXRbMl0saD10WzNdfXZhciBkLHA9ZVswXSx2PWVbMV0sbT1lWzNdLGc9VG8obikseT1nWzBdLHg9Z1sxXSxiPVRvKHIpLHc9YlswXSxFPWJbMV0sUj1GbyhwLHcpLEk9Rm8odixFKSxrPWZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyl7dmFyIHUsYyxsO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXt1PXt0b3A6dCxib3R0b206dCxsZWZ0OnQscmlnaHQ6dCx0eXBlOjA9PT10P1wiVkFMSURcIjpcIk5VTUJFUlwifTt2YXIgaD1mdW5jdGlvbih0LGUsbixyLG8pe251bGw9PXImJihyPURvKHQsZSxuKSk7dmFyIGE9dFswXSxpPXRbMV0scz1fbygoYS1lKzIqcikvbisxLG8pO0MoQShzKSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiByb3dzIChcIitzK1wiKSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSB0aGUgc3RyaWRlIGFuZC9vciB6ZXJvIHBhZCBwYXJhbWV0ZXJzXCJ9KSk7dmFyIHU9X28oKGktZSsyKnIpL24rMSxvKTtyZXR1cm4gQyhBKHUpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIG91dHB1dCAjIG9mIGNvbHVtbnMgKFwiK3UrXCIpIG11c3QgYmUgYW4gaW50ZWdlci4gQ2hhbmdlIHRoZSBzdHJpZGUgYW5kL29yIHplcm8gcGFkIHBhcmFtZXRlcnNcIn0pKSxbcyx1XX0oW2Usbl0sYSxyLHQscyk7Yz1oWzBdLGw9aFsxXX1lbHNlIGlmKFwic2FtZVwiPT09dCl7Yz1NYXRoLmNlaWwoZS9yKSxsPU1hdGguY2VpbChuL28pO3ZhciBmPU1hdGgubWF4KDAsKGMtMSkqcithLWUpLGQ9TWF0aC5tYXgoMCwobC0xKSpvK2ktbikscD1NYXRoLmZsb29yKGYvMiksdj1mLXAsbT1NYXRoLmZsb29yKGQvMik7dT17dG9wOnAsYm90dG9tOnYsbGVmdDptLHJpZ2h0OmQtbSx0eXBlOlwiU0FNRVwifX1lbHNle2lmKFwidmFsaWRcIiE9PXQpdGhyb3cgRXJyb3IoXCJVbmtub3duIHBhZGRpbmcgcGFyYW1ldGVyOiBcIit0KTt1PXt0b3A6MCxib3R0b206MCxsZWZ0OjAscmlnaHQ6MCx0eXBlOlwiVkFMSURcIn0sYz1NYXRoLmNlaWwoKGUtYSsxKS9yKSxsPU1hdGguY2VpbCgobi1pKzEpL28pfXJldHVybntwYWRJbmZvOnUsb3V0SGVpZ2h0OmMsb3V0V2lkdGg6bH19KG8sbCxoLHkseCxSLEksYSksUz1rLnBhZEluZm8sRD1rLm91dEhlaWdodCxUPWsub3V0V2lkdGgsTj1pP20qZjptO3JldHVyblwiY2hhbm5lbHNGaXJzdFwiPT09cz9kPVtjLE4sRCxUXTpcImNoYW5uZWxzTGFzdFwiPT09cyYmKGQ9W2MsRCxULE5dKSx7YmF0Y2hTaXplOmMsZGF0YUZvcm1hdDpzLGluSGVpZ2h0OmwsaW5XaWR0aDpoLGluQ2hhbm5lbHM6ZixvdXRIZWlnaHQ6RCxvdXRXaWR0aDpULG91dENoYW5uZWxzOk4scGFkSW5mbzpTLHN0cmlkZUhlaWdodDp5LHN0cmlkZVdpZHRoOngsZmlsdGVySGVpZ2h0OnAsZmlsdGVyV2lkdGg6dixlZmZlY3RpdmVGaWx0ZXJIZWlnaHQ6UixlZmZlY3RpdmVGaWx0ZXJXaWR0aDpJLGRpbGF0aW9uSGVpZ2h0OncsZGlsYXRpb25XaWR0aDpFLGluU2hhcGU6dCxvdXRTaGFwZTpkLGZpbHRlclNoYXBlOmV9fWZ1bmN0aW9uIEFvKHQsZSxuLHIsbyxhLGkscyl7dm9pZCAwPT09YSYmKGE9ITEpLHZvaWQgMD09PWkmJihpPVwiY2hhbm5lbHNMYXN0XCIpO3ZhciB1PVstMSwtMSwtMSwtMSwtMV0sYz11WzBdLGw9dVsxXSxoPXVbMl0sZj11WzNdLGQ9dVs0XTtpZihcImNoYW5uZWxzTGFzdFwiPT09aSljPXRbMF0sbD10WzFdLGg9dFsyXSxmPXRbM10sZD10WzRdO2Vsc2V7aWYoXCJjaGFubmVsc0ZpcnN0XCIhPT1pKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YUZvcm1hdCBcIitpKTtjPXRbMF0sZD10WzFdLGw9dFsyXSxoPXRbM10sZj10WzRdfXZhciBwLHY9ZVswXSxtPWVbMV0sZz1lWzJdLHk9ZVs0XSx4PU5vKG4pLGI9eFswXSx3PXhbMV0sRT14WzJdLFI9Tm8ociksST1SWzBdLGs9UlsxXSxTPVJbMl0sRD1Gbyh2LEkpLFQ9Rm8obSxrKSxOPUZvKGcsUyksRj1mdW5jdGlvbih0LGUsbixyLG8sYSxpLHMsdSxjLGwpe3ZhciBoLGYsZCxwO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXtoPXt0b3A6dCxib3R0b206dCxsZWZ0OnQscmlnaHQ6dCxmcm9udDp0LGJhY2s6dCx0eXBlOjA9PT10P1wiVkFMSURcIjpcIk5VTUJFUlwifTt2YXIgdj1mdW5jdGlvbih0LGUsbixyLG8sYSl7bnVsbD09byYmKG89RG8odCxlLHIpKTt2YXIgaT10WzBdLHM9dFsxXSx1PXRbMl0sYz1fbygoaS1lKzIqbykvcisxLGEpO0MoQShjKSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiBkZXB0aHMgKFwiK2MrXCIpIG11c3QgYmUgYW4gaW50ZWdlci4gQ2hhbmdlIHRoZSBzdHJpZGUgYW5kL29yIHplcm8gcGFkIHBhcmFtZXRlcnNcIn0pKTt2YXIgbD1fbygocy1lKzIqbykvcisxLGEpO0MoQShsKSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiByb3dzIChcIitsK1wiKSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSB0aGUgc3RyaWRlIGFuZC9vciB6ZXJvIHBhZCBwYXJhbWV0ZXJzXCJ9KSk7dmFyIGg9X28oKHUtZSsyKm8pL3IrMSxhKTtyZXR1cm4gQyhBKGgpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIG91dHB1dCAjIG9mIGNvbHVtbnMgKFwiK2grXCIpIG11c3QgYmUgYW4gaW50ZWdlci4gQ2hhbmdlIHRoZSBzdHJpZGUgYW5kL29yIHplcm8gcGFkIHBhcmFtZXRlcnNcIn0pKSxbYyxsLGgsbl19KFtlLG4sciwxXSxzLDEsbyx0LGwpO2Y9dlswXSxkPXZbMV0scD12WzJdfWVsc2UgaWYoXCJzYW1lXCI9PT10KXtmPU1hdGguY2VpbChlL28pLGQ9TWF0aC5jZWlsKG4vYSkscD1NYXRoLmNlaWwoci9pKTt2YXIgbT0oZi0xKSpvK3MtZSxnPShkLTEpKmErdS1uLHk9KHAtMSkqaStjLXIseD1NYXRoLmZsb29yKG0vMiksYj1tLXgsdz1NYXRoLmZsb29yKGcvMiksRT1nLXcsUj1NYXRoLmZsb29yKHkvMik7aD17dG9wOncsYm90dG9tOkUsbGVmdDpSLHJpZ2h0OnktUixmcm9udDp4LGJhY2s6Yix0eXBlOlwiU0FNRVwifX1lbHNle2lmKFwidmFsaWRcIiE9PXQpdGhyb3cgRXJyb3IoXCJVbmtub3duIHBhZGRpbmcgcGFyYW1ldGVyOiBcIit0KTtoPXt0b3A6MCxib3R0b206MCxsZWZ0OjAscmlnaHQ6MCxmcm9udDowLGJhY2s6MCx0eXBlOlwiVkFMSURcIn0sZj1NYXRoLmNlaWwoKGUtcysxKS9vKSxkPU1hdGguY2VpbCgobi11KzEpL2EpLHA9TWF0aC5jZWlsKChyLWMrMSkvaSl9cmV0dXJue3BhZEluZm86aCxvdXREZXB0aDpmLG91dEhlaWdodDpkLG91dFdpZHRoOnB9fShvLGwsaCxmLGIsdyxFLEQsVCxOLHMpLF89Ri5wYWRJbmZvLE89Ri5vdXREZXB0aCxNPUYub3V0SGVpZ2h0LEI9Ri5vdXRXaWR0aCxQPWE/eSpkOnk7cmV0dXJuXCJjaGFubmVsc0ZpcnN0XCI9PT1pP3A9W2MsUCxPLE0sQl06XCJjaGFubmVsc0xhc3RcIj09PWkmJihwPVtjLE8sTSxCLFBdKSx7YmF0Y2hTaXplOmMsZGF0YUZvcm1hdDppLGluRGVwdGg6bCxpbkhlaWdodDpoLGluV2lkdGg6ZixpbkNoYW5uZWxzOmQsb3V0RGVwdGg6TyxvdXRIZWlnaHQ6TSxvdXRXaWR0aDpCLG91dENoYW5uZWxzOlAscGFkSW5mbzpfLHN0cmlkZURlcHRoOmIsc3RyaWRlSGVpZ2h0Oncsc3RyaWRlV2lkdGg6RSxmaWx0ZXJEZXB0aDp2LGZpbHRlckhlaWdodDptLGZpbHRlcldpZHRoOmcsZWZmZWN0aXZlRmlsdGVyRGVwdGg6RCxlZmZlY3RpdmVGaWx0ZXJIZWlnaHQ6VCxlZmZlY3RpdmVGaWx0ZXJXaWR0aDpOLGRpbGF0aW9uRGVwdGg6SSxkaWxhdGlvbkhlaWdodDprLGRpbGF0aW9uV2lkdGg6UyxpblNoYXBlOnQsb3V0U2hhcGU6cCxmaWx0ZXJTaGFwZTplfX1mdW5jdGlvbiBEbyh0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0xKTt2YXIgbz1GbyhlLHIpO3JldHVybiBNYXRoLmZsb29yKCh0WzBdKihuLTEpLW4rbykvMil9ZnVuY3Rpb24gVG8odCl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHQ/W3QsdCx0XToyPT09dC5sZW5ndGg/W3RbMF0sdFsxXSwxXTp0fWZ1bmN0aW9uIE5vKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0P1t0LHQsdF06dH1mdW5jdGlvbiBGbyh0LGUpe3JldHVybiBlPD0xP3Q6dCsodC0xKSooZS0xKX1mdW5jdGlvbiBfbyh0LGUpe2lmKCFlKXJldHVybiB0O3N3aXRjaChlKXtjYXNlXCJyb3VuZFwiOnJldHVybiBNYXRoLnJvdW5kKHQpO2Nhc2VcImNlaWxcIjpyZXR1cm4gTWF0aC5jZWlsKHQpO2Nhc2VcImZsb29yXCI6cmV0dXJuIE1hdGguZmxvb3IodCk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIHJvdW5kaW5nTW9kZSBcIitlKX19ZnVuY3Rpb24gT28odCl7dmFyIGU9VG8odCksbj1lWzBdLHI9ZVsxXSxvPWVbMl07cmV0dXJuIDE9PT1uJiYxPT09ciYmMT09PW99ZnVuY3Rpb24gTW8odCxlKXtyZXR1cm4gT28odCl8fE9vKGUpfWZ1bmN0aW9uIEJvKHQpe2lmKFwiTkhXQ1wiPT09dClyZXR1cm5cImNoYW5uZWxzTGFzdFwiO2lmKFwiTkNIV1wiPT09dClyZXR1cm5cImNoYW5uZWxzRmlyc3RcIjt0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGFGb3JtYXQgXCIrdCl9ZnVuY3Rpb24gUG8odCxlLG4pe2lmKFwiY29tcGxleDY0XCI9PT1lKXtpZihcImNvbXBsZXg2NFwiPT09dC5kdHlwZSlyZXR1cm4gdC5jbG9uZSgpO3ZhciByPUduKHQuc2hhcGUpLG89dC50b0Zsb2F0KCksYT1uLmNvbXBsZXgobyxyKTtyZXR1cm4gci5kaXNwb3NlKCksby5kaXNwb3NlKCksYX1pZighVSh0LmR0eXBlLGUpKXJldHVybiBMdC5tYWtlVGVuc29yRnJvbURhdGFJZCh0LmRhdGFJZCx0LnNoYXBlLGUpO2lmKFwiY29tcGxleDY0XCI9PT10LmR0eXBlKXt2YXIgaT1uLnJlYWwodCk7YT1pLmNhc3QoZSk7cmV0dXJuIGkuZGlzcG9zZSgpLGF9aWYoXCJpbnQzMlwiPT09ZSlyZXR1cm4gbi5pbnQodCk7aWYoXCJib29sXCI9PT1lKXt2YXIgcz1PbigwLHQuZHR5cGUpO2E9bi5ub3RFcXVhbCh0LHMpO3JldHVybiBzLmRpc3Bvc2UoKSxhfXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIENhc3Q6IGZhaWxlZCB0byBjYXN0IFwiK3QuZHR5cGUrXCIgdG8gXCIrZSl9ZnVuY3Rpb24gTG8odCxlKXtyZXR1cm4gTHQubWFrZVRlbnNvckZyb21EYXRhSWQodC5kYXRhSWQsZSx0LmR0eXBlKX1mdW5jdGlvbiBXbyh0LGUsbil7dmFyIHI9KGUtdCkvKG4tMSksbz10dChuLFwiZmxvYXQzMlwiKTtvWzBdPXQ7Zm9yKHZhciBhPTE7YTxvLmxlbmd0aDthKyspb1thXT1vW2EtMV0rcjtyZXR1cm4gTW4obyxcImZsb2F0MzJcIil9dmFyIFVvPU9iamVjdC5mcmVlemUoe2Nhc3RUZW5zb3I6UG8scmVzaGFwZVRlbnNvcjpMbyxsaW5zcGFjZUltcGw6V28sdXBjYXN0VHlwZTpEdCxheGVzQXJlSW5uZXJNb3N0RGltczp5bixjb21iaW5lTG9jYXRpb25zOnhuLGNvbXB1dGVPdXRBbmRSZWR1Y2VTaGFwZXM6Ym4sZXhwYW5kU2hhcGVUb0tlZXBEaW06d24sYXNzZXJ0QXhlc0FyZUlubmVyTW9zdERpbXM6Q24sZ2V0QXhlc1Blcm11dGF0aW9uOkVuLGdldFVuZG9BeGVzUGVybXV0YXRpb246Um4sZ2V0SW5uZXJNb3N0QXhlczpJbixnZXRCcm9hZGNhc3REaW1zOkNvLGdldFJlZHVjdGlvbkF4ZXM6RW8sYXNzZXJ0QW5kR2V0QnJvYWRjYXN0U2hhcGU6Um8sYXNzZXJ0UGFyYW1zQ29uc2lzdGVudDprbixjb21wdXRlT3V0U2hhcGU6U24sY29tcHV0ZVBvb2wyREluZm86SW8sY29tcHV0ZVBvb2wzREluZm86a28sY29tcHV0ZUNvbnYyREluZm86U28sY29tcHV0ZUNvbnYzREluZm86QW8sY29tcHV0ZURlZmF1bHRQYWQ6RG8sdHVwbGVWYWx1ZXNBcmVPbmU6T28sZWl0aGVyU3RyaWRlc09yRGlsYXRpb25zQXJlT25lOk1vLGNvbnZlcnRDb252MkREYXRhRm9ybWF0OkJvLFBBUkFMTEVMSVpFX1RIUkVTSE9MRDpZcixjb21wdXRlT3B0aW1hbFdpbmRvd1NpemU6JHJ9KTtmdW5jdGlvbiBWbyh0LGUpe2lmKHQubGVuZ3RoIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG1lcmdlIHJlYWwgYW5kIGltYWcgYXJyYXlzIG9mIGRpZmZlcmVudCBsZW5ndGhzLiByZWFsOlwiK3QubGVuZ3RoK1wiLCBpbWFnOiBcIitlLmxlbmd0aCtcIi5cIik7Zm9yKHZhciBuPW5ldyBGbG9hdDMyQXJyYXkoMip0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cis9MiluW3JdPXRbci8yXSxuW3IrMV09ZVtyLzJdO3JldHVybiBufWZ1bmN0aW9uIHpvKHQsZSl7cmV0dXJue3JlYWw6dFsyKmVdLGltYWc6dFsyKmUrMV19fWZ1bmN0aW9uIEdvKHQsZSxuLHIpe3RbMipyXT1lLHRbMipyKzFdPW59ZnVuY3Rpb24gSG8odCxlLG4pe3ZhciByPShuPzI6LTIpKk1hdGguUEkqKHQvZSk7cmV0dXJue3JlYWw6TWF0aC5jb3MociksaW1hZzpNYXRoLnNpbihyKX19ZnVuY3Rpb24gcW8odCxlLG4pe3ZhciByPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3ZhciByPTAsbz10Lmxlbmd0aCxhPTAsaT0hMTtmb3IoO3I8bzspe3ZhciBzPW4oZSx0W2E9cisoby1yPj4+MSldKTtzPjA/cj1hKzE6KG89YSxpPSFzKX1yZXR1cm4gaT9yOi1yLTF9KHQsZSxufHxLbyl9KHQsZSxuKSxvPXI8MD8tKHIrMSk6cjt0LnNwbGljZShvLDAsZSl9ZnVuY3Rpb24gS28odCxlKXtyZXR1cm4gdD5lPzE6dDxlPy0xOjB9ZnVuY3Rpb24gam8odCxlLG4scixvKXtyZXR1cm4gWW8odCxlLG4scixvLDApLnNlbGVjdGVkSW5kaWNlc31mdW5jdGlvbiBYbyh0LGUsbixyLG8sYSl7dmFyIGk9WW8odCxlLG4scixvLGEsITApO3JldHVybiBpLm51bVZhbGlkT3V0cHV0cy5kaXNwb3NlKCkse3NlbGVjdGVkSW5kaWNlczppLnNlbGVjdGVkSW5kaWNlcyxzZWxlY3RlZFNjb3JlczppLnNlbGVjdGVkU2NvcmVzfX1mdW5jdGlvbiBZbyh0LGUsbixyLG8sYSxpLHMpe3ZvaWQgMD09PWkmJihpPSExKSx2b2lkIDA9PT1zJiYocz0hMSk7Zm9yKHZhciB1PUFycmF5LmZyb20oZSkubWFwKChmdW5jdGlvbih0LGUpe3JldHVybntzY29yZTp0LGJveEluZGV4OmUsc3VwcHJlc3NCZWdpbkluZGV4OjB9fSkpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2NvcmU+b30pKS5zb3J0KEpvKSxjPWE+MD8tLjUvYTowLGw9W10saD1bXTtsLmxlbmd0aDxuJiZ1Lmxlbmd0aD4wOyl7dmFyIGY9dS5wb3AoKSxkPWYuc2NvcmUscD1mLmJveEluZGV4LHY9Zi5zdXBwcmVzc0JlZ2luSW5kZXg7aWYoZDxvKWJyZWFrO2Zvcih2YXIgbT0hMSxnPWwubGVuZ3RoLTE7Zz49djstLWcpe3ZhciB5PSRvKHQscCxsW2ddKTtpZih5Pj1yKXttPSEwO2JyZWFrfWlmKGYuc2NvcmU9Zi5zY29yZSpRbyhyLGMseSksZi5zY29yZTw9bylicmVha31mLnN1cHByZXNzQmVnaW5JbmRleD1sLmxlbmd0aCxtfHwoZi5zY29yZT09PWQ/KGwucHVzaChwKSxoLnB1c2goZi5zY29yZSkpOmYuc2NvcmU+byYmcW8odSxmLEpvKSl9dmFyIHg9bC5sZW5ndGg7cmV0dXJuIHMmJihsLmZpbGwoMCx4KSxoLmZpbGwoMCx4KSkse3NlbGVjdGVkSW5kaWNlczpNbihsLFwiaW50MzJcIiksc2VsZWN0ZWRTY29yZXM6TW4oaCxcImZsb2F0MzJcIiksbnVtVmFsaWRPdXRwdXRzOk9uKHgsXCJpbnQzMlwiKX19ZnVuY3Rpb24gJG8odCxlLG4pe3ZhciByPXQuc3ViYXJyYXkoNCplLDQqZSs0KSxvPXQuc3ViYXJyYXkoNCpuLDQqbis0KSxhPU1hdGgubWluKHJbMF0sclsyXSksaT1NYXRoLm1pbihyWzFdLHJbM10pLHM9TWF0aC5tYXgoclswXSxyWzJdKSx1PU1hdGgubWF4KHJbMV0sclszXSksYz1NYXRoLm1pbihvWzBdLG9bMl0pLGw9TWF0aC5taW4ob1sxXSxvWzNdKSxoPU1hdGgubWF4KG9bMF0sb1syXSksZj1NYXRoLm1heChvWzFdLG9bM10pLGQ9KHMtYSkqKHUtaSkscD0oaC1jKSooZi1sKTtpZihkPD0wfHxwPD0wKXJldHVybiAwO3ZhciB2PU1hdGgubWF4KGEsYyksbT1NYXRoLm1heChpLGwpLGc9TWF0aC5taW4ocyxoKSx5PU1hdGgubWluKHUsZikseD1NYXRoLm1heChnLXYsMCkqTWF0aC5tYXgoeS1tLDApO3JldHVybiB4LyhkK3AteCl9ZnVuY3Rpb24gUW8odCxlLG4pe3ZhciByPU1hdGguZXhwKGUqbipuKTtyZXR1cm4gbjw9dD9yOjB9ZnVuY3Rpb24gSm8odCxlKXtyZXR1cm4gdC5zY29yZS1lLnNjb3JlfHx0LnNjb3JlPT09ZS5zY29yZSYmZS5ib3hJbmRleC10LmJveEluZGV4fWZ1bmN0aW9uIFpvKHQsZSxuKXt2YXIgcj1uZXcgQXJyYXkodC5yYW5rKS5maWxsKDApLG89dC5zaGFwZS5zbGljZSgpO3JldHVybiBlLm1hcCgoZnVuY3Rpb24oZSl7b1tuXT1lO3ZhciBhPXQuc2xpY2UocixvKTtyZXR1cm4gcltuXSs9ZSxhfSkpfWZ1bmN0aW9uIHRhKHQsZSl7Zm9yKHZhciBuPW5ldyBBcnJheSh0LnJhbmspLHI9MDtyPG4ubGVuZ3RoO3IrKyluW3JdPXQuc2hhcGVbcl0qZVtyXTt2YXIgbz1kcihuLHQuZHR5cGUpO2ZvcihyPTA7cjxvLnZhbHVlcy5sZW5ndGg7KytyKXtmb3IodmFyIGE9by5pbmRleFRvTG9jKHIpLGk9bmV3IEFycmF5KHQucmFuaykscz0wO3M8aS5sZW5ndGg7cysrKWlbc109YVtzXSV0LnNoYXBlW3NdO3ZhciB1PXQubG9jVG9JbmRleChpKTtvLnZhbHVlc1tyXT10LnZhbHVlc1t1XX1yZXR1cm4gby50b1RlbnNvcigpfWZ1bmN0aW9uIGVhKHQsZSxuLHIsbyl7Zm9yKHZhciBhPWVbZS5sZW5ndGgtMV0saT1bdC5sZW5ndGgvYSxhXSxzPWlbMF0sdT1pWzFdLGM9QihuLHMqciksbD1CKFwiaW50MzJcIixzKnIpLGg9MDtoPHM7aCsrKXtmb3IodmFyIGY9aCp1LGQ9dC5zdWJhcnJheShmLGYrdSkscD1bXSx2PTA7djxkLmxlbmd0aDt2KyspcC5wdXNoKHt2YWx1ZTpkW3ZdLGluZGV4OnZ9KTtwLnNvcnQoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUudmFsdWUtdC52YWx1ZX0pKTt2YXIgbT1oKnIsZz1jLnN1YmFycmF5KG0sbStyKSx5PWwuc3ViYXJyYXkobSxtK3IpO2Zvcih2PTA7djxyO3YrKylnW3ZdPXBbdl0udmFsdWUseVt2XT1wW3ZdLmluZGV4fXZhciB4PWUuc2xpY2UoKTtyZXR1cm4geFt4Lmxlbmd0aC0xXT1yLFtGbihjLHgsbiksRm4obCx4LFwiaW50MzJcIildfWZ1bmN0aW9uIG5hKHQsZSl7Zm9yKHZhciBuPVtdLHI9MDtyPGUubGVuZ3RoO3IrKyllW3JdJiZuLnB1c2gocik7dmFyIG89ZHIodCxcImludDMyXCIpLGE9ZHIoW24ubGVuZ3RoLHQubGVuZ3RoXSxcImludDMyXCIpO2ZvcihyPTA7cjxuLmxlbmd0aDtyKyspe3ZhciBpPW8uaW5kZXhUb0xvYyhuW3JdKSxzPXIqdC5sZW5ndGg7YS52YWx1ZXMuc2V0KGkscyl9cmV0dXJuIGEudG9UZW5zb3IoKX12YXIgcmE9ZnVuY3Rpb24odCxlKXt0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnZhcmlhYmxlTmFtZXM9ZS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJUXCIrZX0pKTt2YXIgbj1bXTt0aGlzLnZhcmlhYmxlTmFtZXMuZm9yRWFjaCgoZnVuY3Rpb24odCl7bi5wdXNoKFwiZmxvYXQgdlwiK3QrXCIgPSBnZXRcIit0K1wiQXRPdXRDb29yZHMoKTtcIil9KSk7dmFyIHI9dGhpcy52YXJpYWJsZU5hbWVzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJ2XCIrdH0pKS5qb2luKFwiICsgXCIpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIituLmpvaW4oXCJcXG4gICAgICAgIFwiKStcIlxcblxcbiAgICAgICAgZmxvYXQgcmVzdWx0ID0gXCIrcitcIjtcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LG9hPWZ1bmN0aW9uKHQsZSl7dGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy52YXJpYWJsZU5hbWVzPWUubWFwKChmdW5jdGlvbih0LGUpe3JldHVyblwiVFwiK2V9KSk7dmFyIG49W107dGhpcy52YXJpYWJsZU5hbWVzLmZvckVhY2goKGZ1bmN0aW9uKHQpe24ucHVzaChcInZlYzQgdlwiK3QrXCIgPSBnZXRcIit0K1wiQXRPdXRDb29yZHMoKTtcIil9KSk7dmFyIHI9dGhpcy52YXJpYWJsZU5hbWVzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJ2XCIrdH0pKS5qb2luKFwiICsgXCIpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIituLmpvaW4oXCJcXG4gICAgICAgIFwiKStcIlxcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSBcIityK1wiO1xcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn0sYWE9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdO3ZhciByPXQud2luZG93U2l6ZSxvPXQuYmF0Y2hTaXplLGE9dC5pblNpemUsaT1NYXRoLmNlaWwoYS9yKTtufHx0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcImJlc3RJbmRpY2VzQVwiKSx0aGlzLm91dHB1dFNoYXBlPVtvLGldO3ZhciBzPVwibWF4XCI9PT1lP1wiPlwiOlwiPFwiLHU9bj9cImluT2Zmc2V0ICsgaTtcIjpcInJvdW5kKGdldEJlc3RJbmRpY2VzQShiYXRjaCwgaW5PZmZzZXQgKyBpKSk7XCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IG91dElkeCA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBpbk9mZnNldCA9IG91dElkeCAqIFwiK3IrXCI7XFxuXFxuICAgICAgICBpbnQgYmVzdEluZGV4ID0gaW5PZmZzZXQ7XFxuICAgICAgICBmbG9hdCBiZXN0VmFsdWUgPSBnZXRBKGJhdGNoLCBiZXN0SW5kZXgpO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIityK1wiOyBpKyspIHtcXG4gICAgICAgICAgaW50IGluSWR4ID0gXCIrdStcIjtcXG4gICAgICAgICAgZmxvYXQgY2FuZGlkYXRlID0gZ2V0QShiYXRjaCwgaW5JZHgpO1xcbiAgICAgICAgICBpZiAoY2FuZGlkYXRlIFwiK3MrXCIgYmVzdFZhbHVlKSB7XFxuICAgICAgICAgICAgYmVzdFZhbHVlID0gY2FuZGlkYXRlO1xcbiAgICAgICAgICAgIGJlc3RJbmRleCA9IGluSWR4O1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZmxvYXQoYmVzdEluZGV4KSk7XFxuICAgICAgfVxcbiAgICBcIn07ZnVuY3Rpb24gaWEodCxlKXtyZXR1cm5bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdLnNsaWNlKDAsZSkubWFwKChmdW5jdGlvbihlKXtyZXR1cm4gdCtcIi5cIitlfSkpfWZ1bmN0aW9uIHNhKHQsZSl7cmV0dXJuIDE9PT1lP1t0XTppYSh0LGUpfWZ1bmN0aW9uIHVhKCl7dmFyIHQsZSxuLHIsbyxhLHMsdSxjLGw7cmV0dXJuIDI9PT1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT8odD1cIiN2ZXJzaW9uIDMwMCBlc1wiLGU9XCJpblwiLG49XCJvdXRcIixyPVwiaW5cIixvPVwidGV4dHVyZVwiLGE9XCJvdXRwdXRDb2xvclwiLHM9XCJvdXQgdmVjNCBvdXRwdXRDb2xvcjtcIix1PVwiXFxuICAgICAgYm9vbCBpc25hbl9jdXN0b20oZmxvYXQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gKHZhbCA+IDAuMCB8fCB2YWwgPCAwLjApID8gZmFsc2UgOiB2YWwgIT0gMC4wO1xcbiAgICAgIH1cXG5cXG4gICAgICBidmVjNCBpc25hbl9jdXN0b20odmVjNCB2YWwpIHtcXG4gICAgICAgIHJldHVybiBidmVjNChpc25hbl9jdXN0b20odmFsLngpLFxcbiAgICAgICAgICBpc25hbl9jdXN0b20odmFsLnkpLCBpc25hbl9jdXN0b20odmFsLnopLCBpc25hbl9jdXN0b20odmFsLncpKTtcXG4gICAgICB9XFxuXFxuICAgICAgI2RlZmluZSBpc25hbih2YWx1ZSkgaXNuYW5fY3VzdG9tKHZhbHVlKVxcbiAgICBcIixjPVwiXCIsbD1cIlxcbiAgICAgICNkZWZpbmUgcm91bmQodmFsdWUpIG5ld1JvdW5kKHZhbHVlKVxcbiAgICAgIGludCBuZXdSb3VuZChmbG9hdCB2YWx1ZSkge1xcbiAgICAgICAgcmV0dXJuIGludChmbG9vcih2YWx1ZSArIDAuNSkpO1xcbiAgICAgIH1cXG5cXG4gICAgICBpdmVjNCBuZXdSb3VuZCh2ZWM0IHZhbHVlKSB7XFxuICAgICAgICByZXR1cm4gaXZlYzQoZmxvb3IodmFsdWUgKyB2ZWM0KDAuNSkpKTtcXG4gICAgICB9XFxuICAgIFwiKToodD1cIlwiLGU9XCJhdHRyaWJ1dGVcIixuPVwidmFyeWluZ1wiLHI9XCJ2YXJ5aW5nXCIsbz1cInRleHR1cmUyRFwiLGE9XCJnbF9GcmFnQ29sb3JcIixzPVwiXCIsdT1cIlxcbiAgICAgICNkZWZpbmUgaXNuYW4odmFsdWUpIGlzbmFuX2N1c3RvbSh2YWx1ZSlcXG4gICAgICBib29sIGlzbmFuX2N1c3RvbShmbG9hdCB2YWwpIHtcXG4gICAgICAgIHJldHVybiAodmFsID4gMC4gfHwgdmFsIDwgMS4gfHwgdmFsID09IDAuKSA/IGZhbHNlIDogdHJ1ZTtcXG4gICAgICB9XFxuICAgICAgYnZlYzQgaXNuYW5fY3VzdG9tKHZlYzQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gYnZlYzQoaXNuYW4odmFsLngpLCBpc25hbih2YWwueSksIGlzbmFuKHZhbC56KSwgaXNuYW4odmFsLncpKTtcXG4gICAgICB9XFxuICAgIFwiLGM9XCJcXG4gICAgICB1bmlmb3JtIGZsb2F0IElORklOSVRZO1xcblxcbiAgICAgIGJvb2wgaXNpbmYoZmxvYXQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gYWJzKHZhbCkgPT0gSU5GSU5JVFk7XFxuICAgICAgfVxcbiAgICAgIGJ2ZWM0IGlzaW5mKHZlYzQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gZXF1YWwoYWJzKHZhbCksIHZlYzQoSU5GSU5JVFkpKTtcXG4gICAgICB9XFxuICAgIFwiLGw9XCJcXG4gICAgICBpbnQgcm91bmQoZmxvYXQgdmFsdWUpIHtcXG4gICAgICAgIHJldHVybiBpbnQoZmxvb3IodmFsdWUgKyAwLjUpKTtcXG4gICAgICB9XFxuXFxuICAgICAgaXZlYzQgcm91bmQodmVjNCB2YWx1ZSkge1xcbiAgICAgICAgcmV0dXJuIGl2ZWM0KGZsb29yKHZhbHVlICsgdmVjNCgwLjUpKSk7XFxuICAgICAgfVxcbiAgICBcIikse3ZlcnNpb246dCxhdHRyaWJ1dGU6ZSx2YXJ5aW5nVnM6bix2YXJ5aW5nRnM6cix0ZXh0dXJlMkQ6byxvdXRwdXQ6YSxkZWZpbmVPdXRwdXQ6cyxkZWZpbmVTcGVjaWFsTmFOOnUsZGVmaW5lU3BlY2lhbEluZjpjLGRlZmluZVJvdW5kOmx9fWZ1bmN0aW9uIGNhKHQsZSxuKXt2b2lkIDA9PT1uJiYobj1cImluZGV4XCIpO3ZhciByPSQoZSk7cmV0dXJuIHIubWFwKChmdW5jdGlvbihlLG8pe3JldHVyblwiaW50IFwiK3Rbb10rXCIgPSBcIituK1wiIC8gXCIrZStcIjsgXCIrKG89PT1yLmxlbmd0aC0xP1wiaW50IFwiK3RbbysxXStcIiA9IFwiK24rXCIgLSBcIit0W29dK1wiICogXCIrZTpcImluZGV4IC09IFwiK3Rbb10rXCIgKiBcIitlKStcIjtcIn0pKS5qb2luKFwiXCIpfWZ1bmN0aW9uIGxhKHQpe3ZhciBlPSQodCkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC50b1N0cmluZygpfSkpO3JldHVyblwiXFxuICBpbnQgZ2V0RmxhdEluZGV4KGl2ZWMzIGNvb3Jkcykge1xcbiAgICByZXR1cm4gY29vcmRzLnggKiBcIitlWzBdK1wiICsgY29vcmRzLnkgKiBcIitlWzFdK1wiICsgY29vcmRzLno7XFxuICB9XFxuXCJ9dmFyIGhhPVwiXFxuICBjb25zdCBmbG9hdCBGTE9BVF9NQVggPSAxLjcwMTQxMTg0ZTM4O1xcbiAgY29uc3QgZmxvYXQgRkxPQVRfTUlOID0gMS4xNzU0OTQzNWUtMzg7XFxuXFxuICBsb3dwIHZlYzQgZW5jb2RlX2Zsb2F0KGhpZ2hwIGZsb2F0IHYpIHtcXG4gICAgaWYgKGlzbmFuKHYpKSB7XFxuICAgICAgcmV0dXJuIHZlYzQoMjU1LCAyNTUsIDI1NSwgMjU1KTtcXG4gICAgfVxcblxcbiAgICBoaWdocCBmbG9hdCBhdiA9IGFicyh2KTtcXG5cXG4gICAgaWYoYXYgPCBGTE9BVF9NSU4pIHtcXG4gICAgICByZXR1cm4gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjApO1xcbiAgICB9IGVsc2UgaWYodiA+IEZMT0FUX01BWCkge1xcbiAgICAgIHJldHVybiB2ZWM0KDAuMCwgMC4wLCAxMjguMCwgMTI3LjApIC8gMjU1LjA7XFxuICAgIH0gZWxzZSBpZih2IDwgLUZMT0FUX01BWCkge1xcbiAgICAgIHJldHVybiB2ZWM0KDAuMCwgMC4wLCAgMTI4LjAsIDI1NS4wKSAvIDI1NS4wO1xcbiAgICB9XFxuXFxuICAgIGhpZ2hwIHZlYzQgYyA9IHZlYzQoMCwwLDAsMCk7XFxuXFxuICAgIGhpZ2hwIGZsb2F0IGUgPSBmbG9vcihsb2cyKGF2KSk7XFxuICAgIGhpZ2hwIGZsb2F0IG0gPSBleHAyKGZyYWN0KGxvZzIoYXYpKSkgLSAxLjA7XFxuXFxuICAgIGNbMl0gPSBmbG9vcigxMjguMCAqIG0pO1xcbiAgICBtIC09IGNbMl0gLyAxMjguMDtcXG4gICAgY1sxXSA9IGZsb29yKDMyNzY4LjAgKiBtKTtcXG4gICAgbSAtPSBjWzFdIC8gMzI3NjguMDtcXG4gICAgY1swXSA9IGZsb29yKDgzODg2MDguMCAqIG0pO1xcblxcbiAgICBoaWdocCBmbG9hdCBlYmlhcyA9IGUgKyAxMjcuMDtcXG4gICAgY1szXSA9IGZsb29yKGViaWFzIC8gMi4wKTtcXG4gICAgZWJpYXMgLT0gY1szXSAqIDIuMDtcXG4gICAgY1syXSArPSBmbG9vcihlYmlhcykgKiAxMjguMDtcXG5cXG4gICAgY1szXSArPSAxMjguMCAqIHN0ZXAoMC4wLCAtdik7XFxuXFxuICAgIHJldHVybiBjIC8gMjU1LjA7XFxuICB9XFxuXCI7ZnVuY3Rpb24gZmEodCxlLG4scil7dmFyIG89W107dC5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgZT1rKHQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSk7dC5zaGFwZUluZm8uaXNVbmlmb3JtP28ucHVzaChcInVuaWZvcm0gZmxvYXQgXCIrdC5uYW1lKyhlPjE/XCJbXCIrZStcIl1cIjpcIlwiKStcIjtcIik6KG8ucHVzaChcInVuaWZvcm0gc2FtcGxlcjJEIFwiK3QubmFtZStcIjtcIiksby5wdXNoKFwidW5pZm9ybSBpbnQgb2Zmc2V0XCIrdC5uYW1lK1wiO1wiKSl9KSk7dmFyIGEsaSxzPW8uam9pbihcIlxcblwiKSx1PXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1cIlwiO3IrPW4/cGEodCk6ZGEodCk7dmFyIG89dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLGE9ZS5sb2dpY2FsU2hhcGU7by5sZW5ndGg8PWEubGVuZ3RoJiYocis9bj9mdW5jdGlvbih0LGUpe3ZhciBuLHI9dC5uYW1lLG89ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStyLnNsaWNlKDEpLGE9XCJnZXRcIitvK1wiQXRPdXRDb29yZHNcIixpPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZS5sZW5ndGgscz1lLmxvZ2ljYWxTaGFwZS5sZW5ndGgsdT1Dbyh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsZS5sb2dpY2FsU2hhcGUpLGM9d2EocyksbD1zLWksaD1bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdO249MD09PWk/XCJcIjpzPDImJnUubGVuZ3RoPj0xP1wiY29vcmRzID0gMDtcIjp1Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJjb29yZHMuXCIraFt0K2xdK1wiID0gMDtcIn0pKS5qb2luKFwiXFxuXCIpO3ZhciBmPVwiXCI7Zj1zPDImJmk+MD9cImNvb3Jkc1wiOnQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJjb29yZHMuXCIraFtlK2xdfSkpLmpvaW4oXCIsIFwiKTt2YXIgZD1cInJldHVybiBvdXRwdXRWYWx1ZTtcIixwPTE9PT1rKHQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSksdj0xPT09ayhlLmxvZ2ljYWxTaGFwZSk7aWYoMSE9PWl8fHB8fHYpe2lmKHAmJiF2KWQ9MT09PXM/XCJcXG4gICAgICAgIHJldHVybiB2ZWM0KG91dHB1dFZhbHVlLngsIG91dHB1dFZhbHVlLngsIDAuLCAwLik7XFxuICAgICAgXCI6XCJcXG4gICAgICAgIHJldHVybiB2ZWM0KG91dHB1dFZhbHVlLngpO1xcbiAgICAgIFwiO2Vsc2UgaWYodS5sZW5ndGgpe3ZhciBtPWktMixnPWktMTt1LmluZGV4T2YobSk+LTEmJnUuaW5kZXhPZihnKT4tMT9kPVwicmV0dXJuIHZlYzQob3V0cHV0VmFsdWUueCk7XCI6dS5pbmRleE9mKG0pPi0xP2Q9XCJyZXR1cm4gdmVjNChvdXRwdXRWYWx1ZS54LCBvdXRwdXRWYWx1ZS55LCBvdXRwdXRWYWx1ZS54LCBvdXRwdXRWYWx1ZS55KTtcIjp1LmluZGV4T2YoZyk+LTEmJihkPVwicmV0dXJuIHZlYzQob3V0cHV0VmFsdWUueHgsIG91dHB1dFZhbHVlLnp6KTtcIil9fWVsc2UgZD1cIlxcbiAgICAgIHJldHVybiB2ZWM0KG91dHB1dFZhbHVlLnh5LCBvdXRwdXRWYWx1ZS54eSk7XFxuICAgIFwiO3JldHVyblwiXFxuICAgIHZlYzQgXCIrYStcIigpIHtcXG4gICAgICBcIitjK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgIFwiK24rXCJcXG4gICAgICB2ZWM0IG91dHB1dFZhbHVlID0gZ2V0XCIrbytcIihcIitmK1wiKTtcXG4gICAgICBcIitkK1wiXFxuICAgIH1cXG4gIFwifSh0LGUpOmZ1bmN0aW9uKHQsZSl7dmFyIG49dC5uYW1lLHI9bi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89XCJnZXRcIityK1wiQXRPdXRDb29yZHNcIixhPWUudGV4U2hhcGUsaT10LnNoYXBlSW5mby50ZXhTaGFwZSxzPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZS5sZW5ndGgsdT1lLmxvZ2ljYWxTaGFwZS5sZW5ndGg7aWYoIXQuc2hhcGVJbmZvLmlzVW5pZm9ybSYmcz09PXUmJm51bGw9PXQuc2hhcGVJbmZvLmZsYXRPZmZzZXQmJlMoaSxhKSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK28rXCIoKSB7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCByZXN1bHRVVik7XFxuICAgICAgfVxcbiAgICBcIjt2YXIgYyxsPXdhKHUpLGg9Q28odC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLGUubG9naWNhbFNoYXBlKSxmPXUtcyxkPVtcInhcIixcInlcIixcInpcIixcIndcIixcInVcIixcInZcIl07Yz0wPT09cz9cIlwiOnU8MiYmaC5sZW5ndGg+PTE/XCJjb29yZHMgPSAwO1wiOmgubWFwKChmdW5jdGlvbih0KXtyZXR1cm5cImNvb3Jkcy5cIitkW3QrZl0rXCIgPSAwO1wifSkpLmpvaW4oXCJcXG5cIik7dmFyIHA9XCJcIjtwPXU8MiYmcz4wP1wiY29vcmRzXCI6dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm5cImNvb3Jkcy5cIitkW2UrZl19KSkuam9pbihcIiwgXCIpO3JldHVyblwiXFxuICAgIGZsb2F0IFwiK28rXCIoKSB7XFxuICAgICAgXCIrbCtcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICBcIitjK1wiXFxuICAgICAgcmV0dXJuIGdldFwiK3IrXCIoXCIrcCtcIik7XFxuICAgIH1cXG4gIFwifSh0LGUpKTtyZXR1cm4gcn0odCxlLHIpfSkpLmpvaW4oXCJcXG5cIiksYz1lLnRleFNoYXBlLGw9dWEoKSxoPWZ1bmN0aW9uKHQpe3JldHVyblwiXFxuICAgIGZsb2F0IHNhbXBsZVRleHR1cmUoc2FtcGxlcjJEIHRleHR1cmVTYW1wbGVyLCB2ZWMyIHV2KSB7XFxuICAgICAgcmV0dXJuIFwiK3QudGV4dHVyZTJEK1wiKHRleHR1cmVTYW1wbGVyLCB1dikucjtcXG4gICAgfVxcbiAgXCJ9KGwpLGY9ZnVuY3Rpb24odCl7cmV0dXJuIHQudmVyc2lvbitcIlxcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuICAgIHByZWNpc2lvbiBoaWdocCBpbnQ7XFxuICAgIHByZWNpc2lvbiBoaWdocCBzYW1wbGVyMkQ7XFxuICAgIFwiK3QudmFyeWluZ0ZzK1wiIHZlYzIgcmVzdWx0VVY7XFxuICAgIFwiK3QuZGVmaW5lT3V0cHV0K1wiXFxuICAgIGNvbnN0IHZlYzIgaGFsZkNSID0gdmVjMigwLjUsIDAuNSk7XFxuXFxuICAgIHN0cnVjdCBpdmVjNVxcbiAgICB7XFxuICAgICAgaW50IHg7XFxuICAgICAgaW50IHk7XFxuICAgICAgaW50IHo7XFxuICAgICAgaW50IHc7XFxuICAgICAgaW50IHU7XFxuICAgIH07XFxuXFxuICAgIHN0cnVjdCBpdmVjNlxcbiAgICB7XFxuICAgICAgaW50IHg7XFxuICAgICAgaW50IHk7XFxuICAgICAgaW50IHo7XFxuICAgICAgaW50IHc7XFxuICAgICAgaW50IHU7XFxuICAgICAgaW50IHY7XFxuICAgIH07XFxuXFxuICAgIHVuaWZvcm0gZmxvYXQgTkFOO1xcbiAgICBcIit0LmRlZmluZVNwZWNpYWxOYU4rXCJcXG4gICAgXCIrdC5kZWZpbmVTcGVjaWFsSW5mK1wiXFxuICAgIFwiK3QuZGVmaW5lUm91bmQrXCJcXG5cXG4gICAgaW50IGltb2QoaW50IHgsIGludCB5KSB7XFxuICAgICAgcmV0dXJuIHggLSB5ICogKHggLyB5KTtcXG4gICAgfVxcblxcbiAgICBpbnQgaWRpdihpbnQgYSwgaW50IGIsIGZsb2F0IHNpZ24pIHtcXG4gICAgICBpbnQgcmVzID0gYSAvIGI7XFxuICAgICAgaW50IG1vZCA9IGltb2QoYSwgYik7XFxuICAgICAgaWYgKHNpZ24gPCAwLiAmJiBtb2QgIT0gMCkge1xcbiAgICAgICAgcmVzIC09IDE7XFxuICAgICAgfVxcbiAgICAgIHJldHVybiByZXM7XFxuICAgIH1cXG5cXG4gICAgLy9CYXNlZCBvbiB0aGUgd29yayBvZiBEYXZlIEhvc2tpbnNcXG4gICAgLy9odHRwczovL3d3dy5zaGFkZXJ0b3kuY29tL3ZpZXcvNGRqU1JXXFxuICAgICNkZWZpbmUgSEFTSFNDQUxFMSA0NDMuODk3NVxcbiAgICBmbG9hdCByYW5kb20oZmxvYXQgc2VlZCl7XFxuICAgICAgdmVjMiBwID0gcmVzdWx0VVYgKiBzZWVkO1xcbiAgICAgIHZlYzMgcDMgID0gZnJhY3QodmVjMyhwLnh5eCkgKiBIQVNIU0NBTEUxKTtcXG4gICAgICBwMyArPSBkb3QocDMsIHAzLnl6eCArIDE5LjE5KTtcXG4gICAgICByZXR1cm4gZnJhY3QoKHAzLnggKyBwMy55KSAqIHAzLnopO1xcbiAgICB9XFxuXFxuICAgIFwiK3ZhK1wiXFxuICAgIFwiK21hK1wiXFxuICAgIFwiK2dhK1wiXFxuICBcIn0obCk7cmV0dXJuIGUuaXNQYWNrZWQ/KGE9ZnVuY3Rpb24odCxlKXtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuICBcIjtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dmFyIG49W01hdGguY2VpbChlWzBdLzIpLE1hdGguY2VpbChlWzFdLzIpXTtpZigxPT09blswXSlyZXR1cm5cIlxcbiAgICAgIGludCBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICByZXR1cm4gMiAqIGludChyZXN1bHRVVi54ICogXCIrblsxXStcIi4wKTtcXG4gICAgICB9XFxuICAgIFwiO2lmKDE9PT1uWzFdKXJldHVyblwiXFxuICAgICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiAyICogaW50KHJlc3VsdFVWLnkgKiBcIituWzBdK1wiLjApO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrblswXStcIiwgXCIrblsxXStcIikpO1xcbiAgICAgIHJldHVybiAyICogKHJlc1RleFJDLnggKiBcIituWzFdK1wiICsgcmVzVGV4UkMueSk7XFxuICAgIH1cXG4gIFwifSgwLGUpO2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1bTWF0aC5jZWlsKGVbMF0vMiksTWF0aC5jZWlsKGVbMV0vMildO2lmKFModCxlKSlyZXR1cm5cIlxcbiAgICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiAyICogaXZlYzIocmVzdWx0VVYueXggKiB2ZWMyKFwiK25bMF0rXCIsIFwiK25bMV0rXCIpKTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciByPU1hdGguY2VpbCh0WzFdLzIpO3JldHVyblwiXFxuICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrblswXStcIiwgXCIrblsxXStcIikpO1xcblxcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIituWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgICBpbnQgciA9IDIgKiAoaW5kZXggLyBcIityK1wiKTtcXG4gICAgICBpbnQgYyA9IGltb2QoaW5kZXgsIFwiK3IrXCIpICogMjtcXG5cXG4gICAgICByZXR1cm4gaXZlYzIociwgYyk7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgMzpyZXR1cm4gbj10LHI9ZSxvPVtNYXRoLmNlaWwoclswXS8yKSxNYXRoLmNlaWwoclsxXS8yKV0sYT1NYXRoLmNlaWwoblsyXS8yKSxpPWEqTWF0aC5jZWlsKG5bMV0vMiksXCJcXG4gICAgaXZlYzMgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitvWzBdK1wiLCBcIitvWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK29bMV0rXCIgKyByZXNUZXhSQy55O1xcblxcbiAgICAgIGludCBiID0gaW5kZXggLyBcIitpK1wiO1xcbiAgICAgIGluZGV4IC09IGIgKiBcIitpK1wiO1xcblxcbiAgICAgIGludCByID0gMiAqIChpbmRleCAvIFwiK2ErXCIpO1xcbiAgICAgIGludCBjID0gaW1vZChpbmRleCwgXCIrYStcIikgKiAyO1xcblxcbiAgICAgIHJldHVybiBpdmVjMyhiLCByLCBjKTtcXG4gICAgfVxcbiAgXCI7ZGVmYXVsdDpyZXR1cm4gZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W01hdGguY2VpbChlWzBdLzIpLE1hdGguY2VpbChlWzFdLzIpXSxyPU1hdGguY2VpbCh0W3QubGVuZ3RoLTFdLzIpLG89cipNYXRoLmNlaWwodFt0Lmxlbmd0aC0yXS8yKSxhPW8saT1cIlwiLHM9XCJiLCByLCBjXCIsdT0yO3U8dC5sZW5ndGgtMTt1KyspYSo9dFt0Lmxlbmd0aC11LTFdLGk9XCJcXG4gICAgICBpbnQgYlwiK3UrXCIgPSBpbmRleCAvIFwiK2ErXCI7XFxuICAgICAgaW5kZXggLT0gYlwiK3UrXCIgKiBcIithK1wiO1xcbiAgICBcIitpLHM9XCJiXCIrdStcIiwgXCIrcztyZXR1cm5cIlxcbiAgICBpdmVjXCIrdC5sZW5ndGgrXCIgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIituWzBdK1wiLCBcIituWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK25bMV0rXCIgKyByZXNUZXhSQy55O1xcblxcbiAgICAgIFwiK2krXCJcXG5cXG4gICAgICBpbnQgYiA9IGluZGV4IC8gXCIrbytcIjtcXG4gICAgICBpbmRleCAtPSBiICogXCIrbytcIjtcXG5cXG4gICAgICBpbnQgciA9IDIgKiAoaW5kZXggLyBcIityK1wiKTtcXG4gICAgICBpbnQgYyA9IGltb2QoaW5kZXgsIFwiK3IrXCIpICogMjtcXG5cXG4gICAgICByZXR1cm4gaXZlY1wiK3QubGVuZ3RoK1wiKFwiK3MrXCIpO1xcbiAgICB9XFxuICBcIn0odCxlKX12YXIgbixyLG8sYSxpfShlLmxvZ2ljYWxTaGFwZSxjKSxpPWZ1bmN0aW9uKHQpe3JldHVyblwiXFxuICAgIHZvaWQgc2V0T3V0cHV0KHZlYzQgdmFsKSB7XFxuICAgICAgXCIrdC5vdXRwdXQrXCIgPSB2YWw7XFxuICAgIH1cXG4gIFwifShsKSk6KGE9ZnVuY3Rpb24odCxlKXtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuICBcIjtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoMT09PWVbMF0pcmV0dXJuXCJcXG4gICAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgICAgcmV0dXJuIGludChyZXN1bHRVVi54ICogXCIrZVsxXStcIi4wKTtcXG4gICAgICB9XFxuICAgIFwiO2lmKDE9PT1lWzFdKXJldHVyblwiXFxuICAgICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiBpbnQocmVzdWx0VVYueSAqIFwiK2VbMF0rXCIuMCk7XFxuICAgICAgfVxcbiAgICBcIjtyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgcmV0dXJuIHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgfVxcbiAgXCJ9KDAsZSk7Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0LGUpe2lmKFModCxlKSlyZXR1cm5cIlxcbiAgICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiBpdmVjMihyZXN1bHRVVi55eCAqIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PXRbMV0pcmV0dXJuXCJcXG4gICAgICBpdmVjMiBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgICByZXR1cm4gaXZlYzIoaW5kZXgsIDApO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PXRbMF0pcmV0dXJuXCJcXG4gICAgICBpdmVjMiBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgICByZXR1cm4gaXZlYzIoMCwgaW5kZXgpO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgaXZlYzIgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK2VbMV0rXCIgKyByZXNUZXhSQy55O1xcbiAgICAgIGludCByID0gaW5kZXggLyBcIit0WzFdK1wiO1xcbiAgICAgIGludCBjID0gaW5kZXggLSByICogXCIrdFsxXStcIjtcXG4gICAgICByZXR1cm4gaXZlYzIociwgYyk7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgMzpyZXR1cm4gbj1lLHI9Y2EoW1wiclwiLFwiY1wiLFwiZFwiXSx0KSxcIlxcbiAgICBpdmVjMyBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK25bMF0rXCIsIFwiK25bMV0rXCIpKTtcXG4gICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrblsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgXCIrcitcIlxcbiAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgfVxcbiAgXCI7Y2FzZSA0OnJldHVybiBmdW5jdGlvbih0LGUpe3ZhciBuPWNhKFtcInJcIixcImNcIixcImRcIixcImQyXCJdLHQpO3JldHVyblwiXFxuICAgIGl2ZWM0IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgICBcIituK1wiXFxuICAgICAgcmV0dXJuIGl2ZWM0KHIsIGMsIGQsIGQyKTtcXG4gICAgfVxcbiAgXCJ9KHQsZSk7Y2FzZSA1OnJldHVybiBmdW5jdGlvbih0LGUpe3ZhciBuPWNhKFtcInJcIixcImNcIixcImRcIixcImQyXCIsXCJkM1wiXSx0KTtyZXR1cm5cIlxcbiAgICBpdmVjNSBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqIHZlYzIoXCIrZVswXStcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiK2VbMV0rXCIpKTtcXG5cXG4gICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuXFxuICAgICAgXCIrbitcIlxcblxcbiAgICAgIGl2ZWM1IG91dFNoYXBlID0gaXZlYzUociwgYywgZCwgZDIsIGQzKTtcXG4gICAgICByZXR1cm4gb3V0U2hhcGU7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgNjpyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1jYShbXCJyXCIsXCJjXCIsXCJkXCIsXCJkMlwiLFwiZDNcIixcImQ0XCJdLHQpO3JldHVyblwiXFxuICAgIGl2ZWM2IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG5cXG4gICAgICBcIituK1wiXFxuXFxuICAgICAgaXZlYzYgcmVzdWx0ID0gaXZlYzYociwgYywgZCwgZDIsIGQzLCBkNCk7XFxuICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgfVxcbiAgXCJ9KHQsZSk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IodC5sZW5ndGgrXCItRCBvdXRwdXQgc2FtcGxpbmcgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9dmFyIG4scn0oZS5sb2dpY2FsU2hhcGUsYyksaT1mdW5jdGlvbih0KXtyZXR1cm5cIlxcbiAgICB2b2lkIHNldE91dHB1dChmbG9hdCB2YWwpIHtcXG4gICAgICBcIit0Lm91dHB1dCtcIiA9IHZlYzQodmFsLCAwLCAwLCAwKTtcXG4gICAgfVxcbiAgXCJ9KGwpKSxyJiYoZis9eWEpLFtmLGgsaSxzLGEsdSxuXS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIGRhKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZTtzd2l0Y2goZS5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSk7aWYodC5zaGFwZUluZm8uaXNVbmlmb3JtKXJldHVyblwiZmxvYXQgXCIrbitcIigpIHtyZXR1cm4gXCIrZStcIjt9XCI7dmFyIHI9dC5zaGFwZUluZm8udGV4U2hhcGUsbz1yWzBdLGE9clsxXTtpZigxPT09byYmMT09PWEpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKCkge1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgaGFsZkNSKTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciBpPXQuc2hhcGVJbmZvLnRleFNoYXBlLHM9aVswXSx1PWlbMV0sYz14YShlKTtyZXR1cm5cIlxcbiAgICBmbG9hdCBcIituK1wiKCkge1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK3MrXCIsIFwiK3UrXCIsIFwiK2MrXCIpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK2UrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSk7aWYodC5zaGFwZUluZm8uaXNVbmlmb3JtKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrbitcIihpbnQgaW5kZXgpIHtcXG4gICAgICAgIFwiK2JhKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgcj10LnNoYXBlSW5mby50ZXhTaGFwZSxvPXJbMF0sYT1yWzFdO2lmKDE9PT1hJiYxPT09bylyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK24rXCIoaW50IGluZGV4KSB7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIitlK1wiLCBoYWxmQ1IpO1xcbiAgICAgIH1cXG4gICAgXCI7dmFyIGk9eGEoZSk7aWYoMT09PWEpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgICAgdmVjMiB1diA9IHZlYzIoMC41LCAoZmxvYXQoaW5kZXggKyBcIitpK1wiKSArIDAuNSkgLyBcIitvK1wiLjApO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PW8pcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgICAgdmVjMiB1diA9IHZlYzIoKGZsb2F0KGluZGV4ICsgXCIraStcIikgKyAwLjUpIC8gXCIrYStcIi4wLCAwLjUpO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrbitcIihpbnQgaW5kZXgpIHtcXG4gICAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIitvK1wiLCBcIithK1wiLCBpbmRleCArIFwiK2krXCIpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK2UrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLG49dC5uYW1lLHI9XCJnZXRcIituLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSksbz10LnNoYXBlSW5mby50ZXhTaGFwZTtpZihudWxsIT1vJiZTKGUsbykpe3ZhciBhPW9bMF0saT1vWzFdO3JldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSAodmVjMihjb2wsIHJvdykgKyBoYWxmQ1IpIC8gdmVjMihcIitpK1wiLjAsIFwiK2ErXCIuMCk7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn12YXIgcz1NKGUpLHU9cy5uZXdTaGFwZSxjPXMua2VwdERpbXMsbD11O2lmKGwubGVuZ3RoPGUubGVuZ3RoKXt2YXIgaD1DYSh0LGwpO3JldHVyblwiXFxuICAgICAgXCIrZGEoaCkrXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK0VhKFtcInJvd1wiLFwiY29sXCJdLGMpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgICAgaW50IGluZGV4ID0gcm91bmQoZG90KHZlYzIocm93LCBjb2wpLCB2ZWMyKFwiK2VbMV0rXCIsIDEpKSk7XFxuICAgICAgICBcIitiYSh0KStcIlxcbiAgICAgIH1cXG4gICAgXCI7dmFyIGY9b1swXSxkPW9bMV0scD14YShuKTtpZigxPT09ZClyZXR1cm5cIlxcbiAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wpIHtcXG4gICAgICBmbG9hdCBpbmRleCA9IGRvdCh2ZWMzKHJvdywgY29sLCBcIitwK1wiKSwgdmVjMyhcIitlWzFdK1wiLCAxLCAxKSk7XFxuICAgICAgdmVjMiB1diA9IHZlYzIoMC41LCAoaW5kZXggKyAwLjUpIC8gXCIrZitcIi4wKTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwiO2lmKDE9PT1mKXJldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIGZsb2F0IGluZGV4ID0gZG90KHZlYzMocm93LCBjb2wsIFwiK3ArXCIpLCB2ZWMzKFwiK2VbMV0rXCIsIDEsIDEpKTtcXG4gICAgICB2ZWMyIHV2ID0gdmVjMigoaW5kZXggKyAwLjUpIC8gXCIrZCtcIi4wLCAwLjUpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgfVxcbiAgXCI7cmV0dXJuXCJcXG4gIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAvLyBFeHBsaWNpdGx5IHVzZSBpbnRlZ2VyIG9wZXJhdGlvbnMgYXMgZG90KCkgb25seSB3b3JrcyBvbiBmbG9hdHMuXFxuICAgIGludCBpbmRleCA9IHJvdyAqIFwiK2VbMV0rXCIgKyBjb2wgKyBcIitwK1wiO1xcbiAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIitmK1wiLCBcIitkK1wiLCBpbmRleCk7XFxuICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gIH1cXG5cIn0odCk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPWVbMV0qZVsyXSxhPWVbMl0saT1NKGUpLHM9aS5uZXdTaGFwZSx1PWkua2VwdERpbXMsYz1zO2lmKGMubGVuZ3RoPGUubGVuZ3RoKXt2YXIgbD1DYSh0LGMpO3JldHVyblwiXFxuICAgICAgICBcIitkYShsKStcIlxcbiAgICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgICAgcmV0dXJuIFwiK3IrXCIoXCIrRWEoW1wicm93XCIsXCJjb2xcIixcImRlcHRoXCJdLHUpK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn1pZih0LnNoYXBlSW5mby5pc1VuaWZvcm0pcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCkge1xcbiAgICAgICAgaW50IGluZGV4ID0gcm91bmQoZG90KHZlYzMocm93LCBjb2wsIGRlcHRoKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzMoXCIrbytcIiwgXCIrYStcIiwgMSkpKTtcXG4gICAgICAgIFwiK2JhKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgaD10LnNoYXBlSW5mby50ZXhTaGFwZSxmPWhbMF0sZD1oWzFdLHA9dC5zaGFwZUluZm8uZmxhdE9mZnNldDtpZihkPT09byYmbnVsbD09cClyZXR1cm5cIlxcbiAgICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgICAgZmxvYXQgdGV4UiA9IGZsb2F0KHJvdyk7XFxuICAgICAgICAgIGZsb2F0IHRleEMgPSBkb3QodmVjMihjb2wsIGRlcHRoKSwgdmVjMihcIithK1wiLCAxKSk7XFxuICAgICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZCtcIi4wLCBcIitmK1wiLjApO1xcbiAgICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgICB9XFxuICAgICAgXCI7aWYoZD09PWEmJm51bGw9PXApcmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICBmbG9hdCB0ZXhSID0gZG90KHZlYzIocm93LCBjb2wpLCB2ZWMyKFwiK2VbMV0rXCIsIDEpKTtcXG4gICAgICBmbG9hdCB0ZXhDID0gZmxvYXQoZGVwdGgpO1xcbiAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgLyB2ZWMyKFwiK2QrXCIuMCwgXCIrZitcIi4wKTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwiO3ZhciB2PXhhKG4pO3JldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICAgIGludCBpbmRleCA9IHJvdyAqIFwiK28rXCIgKyBjb2wgKiBcIithK1wiICsgZGVwdGggKyBcIit2K1wiO1xcbiAgICAgICAgdmVjMiB1diA9IHV2RnJvbUZsYXQoXCIrZitcIiwgXCIrZCtcIiwgaW5kZXgpO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICAgIH1cXG4gIFwifSh0KTtjYXNlIDQ6cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPXQubmFtZSxyPVwiZ2V0XCIrbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89ZVszXSxhPWVbMl0qbyxpPWVbMV0qYSxzPU0oZSksdT1zLm5ld1NoYXBlLGM9cy5rZXB0RGltcztpZih1Lmxlbmd0aDxlLmxlbmd0aCl7dmFyIGw9Q2EodCx1KTtyZXR1cm5cIlxcbiAgICAgIFwiK2RhKGwpK1wiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK0VhKFtcInJvd1wiLFwiY29sXCIsXCJkZXB0aFwiLFwiZGVwdGgyXCJdLGMpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyKSB7XFxuICAgICAgICBpbnQgaW5kZXggPSByb3VuZChkb3QodmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWM0KFwiK2krXCIsIFwiK2ErXCIsIFwiK28rXCIsIDEpKSk7XFxuICAgICAgICBcIitiYSh0KStcIlxcbiAgICAgIH1cXG4gICAgXCI7dmFyIGg9dC5zaGFwZUluZm8uZmxhdE9mZnNldCxmPXQuc2hhcGVJbmZvLnRleFNoYXBlLGQ9ZlswXSxwPWZbMV07aWYocD09PWkmJm51bGw9PWgpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCwgaW50IGRlcHRoMikge1xcbiAgICAgICAgZmxvYXQgdGV4UiA9IGZsb2F0KHJvdyk7XFxuICAgICAgICBmbG9hdCB0ZXhDID1cXG4gICAgICAgICAgICBkb3QodmVjMyhjb2wsIGRlcHRoLCBkZXB0aDIpLFxcbiAgICAgICAgICAgICAgICB2ZWMzKFwiK2ErXCIsIFwiK28rXCIsIDEpKTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK3ArXCIuMCwgXCIrZCtcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO2lmKHA9PT1vJiZudWxsPT1oKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIpIHtcXG4gICAgICAgIGZsb2F0IHRleFIgPSBkb3QodmVjMyhyb3csIGNvbCwgZGVwdGgpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMzKFwiK2VbMV0qZVsyXStcIiwgXCIrZVsyXStcIiwgMSkpO1xcbiAgICAgICAgZmxvYXQgdGV4QyA9IGZsb2F0KGRlcHRoMik7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC9cXG4gICAgICAgICAgICAgICAgICB2ZWMyKFwiK3ArXCIuMCwgXCIrZCtcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciB2PXhhKG4pO3JldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyKSB7XFxuICAgICAgLy8gRXhwbGljaXRseSB1c2UgaW50ZWdlciBvcGVyYXRpb25zIGFzIGRvdCgpIG9ubHkgd29ya3Mgb24gZmxvYXRzLlxcbiAgICAgIGludCBpbmRleCA9IHJvdyAqIFwiK2krXCIgKyBjb2wgKiBcIithK1wiICtcXG4gICAgICAgICAgZGVwdGggKiBcIitvK1wiICsgZGVwdGgyO1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK2QrXCIsIFwiK3ArXCIsIGluZGV4ICsgXCIrditcIik7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7Y2FzZSA1OnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPWVbNF0sYT1lWzNdKm8saT1lWzJdKmEscz1lWzFdKmksdT1NKGUpLGM9dS5uZXdTaGFwZSxsPXUua2VwdERpbXM7aWYoYy5sZW5ndGg8ZS5sZW5ndGgpe3ZhciBoPUNhKHQsYyk7cmV0dXJuXCJcXG4gICAgICBcIitkYShoKStcIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICByZXR1cm4gXCIrcitcIihcIitFYShbXCJyb3dcIixcImNvbFwiLFwiZGVwdGhcIixcImRlcHRoMlwiLFwiZGVwdGgzXCJdLGwpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICBmbG9hdCBpbmRleCA9IGRvdChcXG4gICAgICAgICAgdmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgIHZlYzQoXCIrcytcIiwgXCIraStcIiwgXCIrYStcIiwgXCIrbytcIikpICtcXG4gICAgICAgICAgZGVwdGgzO1xcbiAgICAgICAgXCIrYmEodCkrXCJcXG4gICAgICB9XFxuICAgIFwiO3ZhciBmPXQuc2hhcGVJbmZvLmZsYXRPZmZzZXQsZD10LnNoYXBlSW5mby50ZXhTaGFwZSxwPWRbMF0sdj1kWzFdO2lmKHY9PT1zJiZudWxsPT1mKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIsIGludCBkZXB0aDMpIHtcXG4gICAgICAgIGludCB0ZXhSID0gcm93O1xcbiAgICAgICAgZmxvYXQgdGV4QyA9IGRvdCh2ZWM0KGNvbCwgZGVwdGgsIGRlcHRoMiwgZGVwdGgzKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgdmVjNChcIitpK1wiLCBcIithK1wiLCBcIitvK1wiLCAxKSk7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC9cXG4gICAgICAgICAgICAgICAgICAgdmVjMihcIit2K1wiLjAsIFwiK3ArXCIuMCk7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgfVxcbiAgICBcIjtpZih2PT09byYmbnVsbD09ZilyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICBmbG9hdCB0ZXhSID0gZG90KFxcbiAgICAgICAgICB2ZWM0KHJvdywgY29sLCBkZXB0aCwgZGVwdGgyKSxcXG4gICAgICAgICAgdmVjNChcIitlWzFdKmVbMl0qZVszXStcIixcXG4gICAgICAgICAgICAgICBcIitlWzJdKmVbM10rXCIsIFwiK2VbM10rXCIsIDEpKTtcXG4gICAgICAgIGludCB0ZXhDID0gZGVwdGgzO1xcbiAgICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvXFxuICAgICAgICAgICAgICAgICAgdmVjMihcIit2K1wiLjAsIFwiK3ArXCIuMCk7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgfVxcbiAgICBcIjt2YXIgbT14YShuKTtyZXR1cm5cIlxcbiAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCwgaW50IGRlcHRoMiwgaW50IGRlcHRoMykge1xcbiAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICBpbnQgaW5kZXggPSByb3cgKiBcIitzK1wiICsgY29sICogXCIraStcIiArIGRlcHRoICogXCIrYStcIiArXFxuICAgICAgICAgIGRlcHRoMiAqIFwiK28rXCIgKyBkZXB0aDMgKyBcIittK1wiO1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK3ArXCIsIFwiK3YrXCIsIGluZGV4KTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwifSh0KTtjYXNlIDY6cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPXQubmFtZSxyPVwiZ2V0XCIrbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89TShlKSxhPW8ubmV3U2hhcGUsaT1vLmtlcHREaW1zO2lmKGEubGVuZ3RoPGUubGVuZ3RoKXt2YXIgcz1DYSh0LGEpO3JldHVyblwiXFxuICAgICAgXCIrZGEocykrXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCxcXG4gICAgICAgICAgICAgICAgICAgIGludCBkZXB0aDIsIGludCBkZXB0aDMsIGludCBkZXB0aDQpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK0VhKFtcInJvd1wiLFwiY29sXCIsXCJkZXB0aFwiLFwiZGVwdGgyXCIsXCJkZXB0aDNcIixcImRlcHRoNFwiXSxpKStcIik7XFxuICAgICAgfVxcbiAgICBcIn12YXIgdT1lWzVdLGM9ZVs0XSp1LGw9ZVszXSpjLGg9ZVsyXSpsLGY9ZVsxXSpoO2lmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLFxcbiAgICAgICAgICAgICAgICAgIGludCBkZXB0aDIsIGludCBkZXB0aDMsIGludCBkZXB0aDQpIHtcXG4gICAgICAgIGludCBpbmRleCA9IHJvdW5kKGRvdChcXG4gICAgICAgICAgdmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgIHZlYzQoXCIrZitcIiwgXCIraCtcIiwgXCIrbCtcIiwgXCIrYytcIikpICtcXG4gICAgICAgICAgZG90KFxcbiAgICAgICAgICAgIHZlYzIoZGVwdGgzLCBkZXB0aDQpLFxcbiAgICAgICAgICAgIHZlYzIoXCIrdStcIiwgMSkpKTtcXG4gICAgICAgIFwiK2JhKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgZD10LnNoYXBlSW5mby5mbGF0T2Zmc2V0LHA9dC5zaGFwZUluZm8udGV4U2hhcGUsdj1wWzBdLG09cFsxXTtpZihtPT09ZiYmbnVsbD09ZClyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLFxcbiAgICAgICAgICAgICAgICAgICAgaW50IGRlcHRoMiwgaW50IGRlcHRoMywgaW50IGRlcHRoNCkge1xcbiAgICAgICAgaW50IHRleFIgPSByb3c7XFxuICAgICAgICBmbG9hdCB0ZXhDID0gZG90KHZlYzQoY29sLCBkZXB0aCwgZGVwdGgyLCBkZXB0aDMpLFxcbiAgICAgICAgICB2ZWM0KFwiK2grXCIsIFwiK2wrXCIsIFwiK2MrXCIsIFwiK3UrXCIpKSArXFxuICAgICAgICAgICAgICAgZmxvYXQoZGVwdGg0KTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK20rXCIuMCwgXCIrditcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO2lmKG09PT11JiZudWxsPT1kKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsXFxuICAgICAgICAgICAgICAgICAgICBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzLCBpbnQgZGVwdGg0KSB7XFxuICAgICAgICBmbG9hdCB0ZXhSID0gZG90KHZlYzQocm93LCBjb2wsIGRlcHRoLCBkZXB0aDIpLFxcbiAgICAgICAgICB2ZWM0KFwiK2VbMV0qZVsyXSplWzNdKmVbNF0rXCIsXFxuICAgICAgICAgICAgICAgXCIrZVsyXSplWzNdKmVbNF0rXCIsXFxuICAgICAgICAgICAgICAgXCIrZVszXSplWzRdK1wiLFxcbiAgICAgICAgICAgICAgIFwiK2VbNF0rXCIpKSArIGZsb2F0KGRlcHRoMyk7XFxuICAgICAgICBpbnQgdGV4QyA9IGRlcHRoNDtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgIHZlYzIoXCIrbStcIi4wLCBcIit2K1wiLjApO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7dmFyIGc9eGEobik7cmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsXFxuICAgICAgICAgICAgICAgICAgaW50IGRlcHRoMiwgaW50IGRlcHRoMywgaW50IGRlcHRoNCkge1xcbiAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICBpbnQgaW5kZXggPSByb3cgKiBcIitmK1wiICsgY29sICogXCIraCtcIiArIGRlcHRoICogXCIrbCtcIiArXFxuICAgICAgICAgIGRlcHRoMiAqIFwiK2MrXCIgKyBkZXB0aDMgKiBcIit1K1wiICsgZGVwdGg0ICsgXCIrZytcIjtcXG4gICAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIit2K1wiLCBcIittK1wiLCBpbmRleCk7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoZS5sZW5ndGgrXCItRCBpbnB1dCBzYW1wbGluZyBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKX19ZnVuY3Rpb24gcGEodCl7dmFyIGUsbixyO3N3aXRjaCh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkscj11YSgpLFwiXFxuICAgIHZlYzQgXCIrbitcIigpIHtcXG4gICAgICByZXR1cm4gXCIrci50ZXh0dXJlMkQrXCIoXCIrZStcIiwgaGFsZkNSKTtcXG4gICAgfVxcbiAgXCI7Y2FzZSAxOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10Lm5hbWUsbj1cImdldFwiK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxyPXQuc2hhcGVJbmZvLnRleFNoYXBlLG89W01hdGguY2VpbChyWzBdLzIpLE1hdGguY2VpbChyWzFdLzIpXSxhPXVhKCk7cmV0dXJuXCJcXG4gICAgdmVjNCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20xRChcXG4gICAgICAgIFwiK29bMF0rXCIsIFwiK29bMV0rXCIsIGluZGV4KTtcXG4gICAgICByZXR1cm4gXCIrYS50ZXh0dXJlMkQrXCIoXCIrZStcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPXQuc2hhcGVJbmZvLnRleFNoYXBlLGE9b1swXSxpPW9bMV0scz11YSgpO2lmKG51bGwhPW8mJlMoZSxvKSlyZXR1cm5cIlxcbiAgICAgIHZlYzQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sKSB7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIoY29sLCByb3cpICsgaGFsZkNSKSAvIHZlYzIoXCIraStcIi4wLCBcIithK1wiLjApO1xcblxcbiAgICAgICAgcmV0dXJuIFwiK3MudGV4dHVyZTJEK1wiKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciB1PVtNYXRoLmNlaWwob1swXS8yKSxNYXRoLmNlaWwob1sxXS8yKV0sYz1NYXRoLmNlaWwoZVsxXS8yKTtyZXR1cm5cIlxcbiAgICB2ZWM0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20yRChcIitjK1wiLCBcIit1WzBdK1wiLCBcIit1WzFdK1wiLCByb3csIGNvbCk7XFxuICAgICAgcmV0dXJuIFwiK3MudGV4dHVyZTJEK1wiKFwiK24rXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLG49dC5uYW1lLHI9XCJnZXRcIituLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSksbz10LnNoYXBlSW5mby50ZXhTaGFwZSxhPVtNYXRoLmNlaWwob1swXS8yKSxNYXRoLmNlaWwob1sxXS8yKV07aWYoMT09PWVbMF0pe3ZhciBpPWUuc2xpY2UoMSkscz1DYSh0LGkpO3JldHVyblwiXFxuICAgICAgICBcIitwYShzKStcIlxcbiAgICAgICAgdmVjNCBcIityK1wiKGludCBiLCBpbnQgcm93LCBpbnQgY29sKSB7XFxuICAgICAgICAgIHJldHVybiBcIityK1wiKFwiK0VhKFtcImJcIixcInJvd1wiLFwiY29sXCJdLFsxLDJdKStcIik7XFxuICAgICAgICB9XFxuICAgICAgXCJ9dmFyIHU9YVswXSxjPWFbMV0sbD1NYXRoLmNlaWwoZVsyXS8yKSxoPWwqTWF0aC5jZWlsKGVbMV0vMiksZj11YSgpO3JldHVyblwiXFxuICAgIHZlYzQgXCIrcitcIihpbnQgYiwgaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20zRChcXG4gICAgICAgIFwiK3UrXCIsIFwiK2MrXCIsIFwiK2grXCIsIFwiK2wrXCIsIGIsIHJvdywgY29sKTtcXG4gICAgICByZXR1cm4gXCIrZi50ZXh0dXJlMkQrXCIoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7ZGVmYXVsdDpyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPWUubGVuZ3RoLHI9dC5uYW1lLG89XCJnZXRcIityLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Iuc2xpY2UoMSksYT10LnNoYXBlSW5mby50ZXhTaGFwZSxpPVtNYXRoLmNlaWwoYVswXS8yKSxNYXRoLmNlaWwoYVsxXS8yKV0scz1pWzBdLHU9aVsxXSxjPU1hdGguY2VpbChlW24tMV0vMiksbD1jKk1hdGguY2VpbChlW24tMl0vMiksaD1cImludCBiLCBpbnQgcm93LCBpbnQgY29sXCIsZj1cImIgKiBcIitsK1wiICsgKHJvdyAvIDIpICogXCIrYytcIiArIChjb2wgLyAyKVwiLGQ9MjtkPG4tMTtkKyspaD1cImludCBiXCIrZCtcIiwgXCIraCxsKj1lW24tZC0xXSxmPVwiYlwiK2QrXCIgKiBcIitsK1wiICsgXCIrZjt2YXIgcD11YSgpO3JldHVyblwiXFxuICAgIHZlYzQgXCIrbytcIihcIitoK1wiKSB7XFxuICAgICAgaW50IGluZGV4ID0gXCIrZitcIjtcXG4gICAgICBpbnQgdGV4UiA9IGluZGV4IC8gXCIrdStcIjtcXG4gICAgICBpbnQgdGV4QyA9IGluZGV4IC0gdGV4UiAqIFwiK3UrXCI7XFxuICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIoXCIrdStcIiwgXCIrcytcIik7XFxuICAgICAgcmV0dXJuIFwiK3AudGV4dHVyZTJEK1wiKFwiK3IrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpfX12YXIgdmE9XCJcXG52ZWMyIHV2RnJvbUZsYXQoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLCBpbnQgaW5kZXgpIHtcXG4gIGludCB0ZXhSID0gaW5kZXggLyB0ZXhOdW1DO1xcbiAgaW50IHRleEMgPSBpbmRleCAtIHRleFIgKiB0ZXhOdW1DO1xcbiAgcmV0dXJuICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIodGV4TnVtQywgdGV4TnVtUik7XFxufVxcbnZlYzIgcGFja2VkVVZmcm9tMUQoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLCBpbnQgaW5kZXgpIHtcXG4gIGludCB0ZXhlbEluZGV4ID0gaW5kZXggLyAyO1xcbiAgaW50IHRleFIgPSB0ZXhlbEluZGV4IC8gdGV4TnVtQztcXG4gIGludCB0ZXhDID0gdGV4ZWxJbmRleCAtIHRleFIgKiB0ZXhOdW1DO1xcbiAgcmV0dXJuICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIodGV4TnVtQywgdGV4TnVtUik7XFxufVxcblwiLG1hPVwiXFxudmVjMiBwYWNrZWRVVmZyb20yRChpbnQgdGV4ZWxzSW5Mb2dpY2FsUm93LCBpbnQgdGV4TnVtUixcXG4gIGludCB0ZXhOdW1DLCBpbnQgcm93LCBpbnQgY29sKSB7XFxuICBpbnQgdGV4ZWxJbmRleCA9IChyb3cgLyAyKSAqIHRleGVsc0luTG9naWNhbFJvdyArIChjb2wgLyAyKTtcXG4gIGludCB0ZXhSID0gdGV4ZWxJbmRleCAvIHRleE51bUM7XFxuICBpbnQgdGV4QyA9IHRleGVsSW5kZXggLSB0ZXhSICogdGV4TnVtQztcXG4gIHJldHVybiAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgLyB2ZWMyKHRleE51bUMsIHRleE51bVIpO1xcbn1cXG5cIixnYT1cIlxcbnZlYzIgcGFja2VkVVZmcm9tM0QoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLFxcbiAgICBpbnQgdGV4ZWxzSW5CYXRjaCwgaW50IHRleGVsc0luTG9naWNhbFJvdywgaW50IGIsXFxuICAgIGludCByb3csIGludCBjb2wpIHtcXG4gIGludCBpbmRleCA9IGIgKiB0ZXhlbHNJbkJhdGNoICsgKHJvdyAvIDIpICogdGV4ZWxzSW5Mb2dpY2FsUm93ICsgKGNvbCAvIDIpO1xcbiAgaW50IHRleFIgPSBpbmRleCAvIHRleE51bUM7XFxuICBpbnQgdGV4QyA9IGluZGV4IC0gdGV4UiAqIHRleE51bUM7XFxuICByZXR1cm4gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC8gdmVjMih0ZXhOdW1DLCB0ZXhOdW1SKTtcXG59XFxuXCIseWE9XCJcXG4gIGZsb2F0IGdldENoYW5uZWwodmVjNCBmcmFnLCB2ZWMyIGlubmVyRGltcykge1xcbiAgICB2ZWMyIG1vZENvb3JkID0gbW9kKGlubmVyRGltcywgMi4pO1xcbiAgICByZXR1cm4gbW9kQ29vcmQueCA9PSAwLiA/XFxuICAgICAgKG1vZENvb3JkLnkgPT0gMC4gPyBmcmFnLnIgOiBmcmFnLmcpIDpcXG4gICAgICAobW9kQ29vcmQueSA9PSAwLiA/IGZyYWcuYiA6IGZyYWcuYSk7XFxuICB9XFxuICBmbG9hdCBnZXRDaGFubmVsKHZlYzQgZnJhZywgaW50IGRpbSkge1xcbiAgICBmbG9hdCBtb2RDb29yZCA9IG1vZChmbG9hdChkaW0pLCAyLik7XFxuICAgIHJldHVybiBtb2RDb29yZCA9PSAwLiA/IGZyYWcuciA6IGZyYWcuZztcXG4gIH1cXG5cIjtmdW5jdGlvbiB4YSh0KXtyZXR1cm5cIm9mZnNldFwiK3R9ZnVuY3Rpb24gYmEodCl7dmFyIGU9dC5uYW1lLG49ayh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUpO3JldHVybiBuPDI/XCJyZXR1cm4gXCIrZStcIjtcIjpcIlxcbiAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK24rXCI7IGkrKykge1xcbiAgICAgIGlmIChpID09IGluZGV4KSB7XFxuICAgICAgICByZXR1cm4gXCIrZStcIltpXTtcXG4gICAgICB9XFxuICAgIH1cXG4gIFwifWZ1bmN0aW9uIHdhKHQpe2lmKHQ8PTEpcmV0dXJuXCJpbnRcIjtpZigyPT09dClyZXR1cm5cIml2ZWMyXCI7aWYoMz09PXQpcmV0dXJuXCJpdmVjM1wiO2lmKDQ9PT10KXJldHVyblwiaXZlYzRcIjtpZig1PT09dClyZXR1cm5cIml2ZWM1XCI7aWYoNj09PXQpcmV0dXJuXCJpdmVjNlwiO3Rocm93IEVycm9yKFwiR1BVIGZvciByYW5rIFwiK3QrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9ZnVuY3Rpb24gQ2EodCxlKXt2YXIgbj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHQpKTtyZXR1cm4gbi5zaGFwZUluZm8ubG9naWNhbFNoYXBlPWUsbn1mdW5jdGlvbiBFYSh0LGUpe3JldHVybiBlLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KSkuam9pbihcIiwgXCIpfXZhciBSYT1mdW5jdGlvbih0LGUsbixyKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCxDKHQubGVuZ3RoPjIsKGZ1bmN0aW9uKCl7cmV0dXJuXCJQYWNrZWQgYXJnXCIrKG4uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSkrXCIgc3VwcG9ydHMgb25seSBpbnB1dHMgd2l0aCByYW5rIGFib3ZlIDIuXCJ9KSk7dmFyIG89dFt0Lmxlbmd0aC0xXSxhPU1hdGguY2VpbChvL2UpO3RoaXMub3V0cHV0U2hhcGU9dC5zbGljZSgwLC0xKSxhPjEmJnRoaXMub3V0cHV0U2hhcGUucHVzaChhKSxyfHx0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcImJlc3RJbmRpY2VzQVwiKTt2YXIgaSxzLHU9dGhpcy5vdXRwdXRTaGFwZSxjPXUubGVuZ3RoLGw9d2EoYyksaD1zYShcImNvb3Jkc1wiLGMpO2lmKDE9PT1hKXt2YXIgZj13YShzPWMrMSk7aT1cIlxcbiAgICAgICAgXCIrZitcIiBzb3VyY2VMb2NSID0gXCIrZitcIihcIitoLmpvaW4oKStcIiwgMCk7XFxuICAgICAgICArK1wiK2hbYy0xXStcIjtcXG4gICAgICAgIFwiK2YrXCIgc291cmNlTG9jRyA9IFwiK2YrXCIoXCIraC5qb2luKCkrXCIsIDApO1xcbiAgICAgICAgKytcIitoW2MtMl0rXCI7XFxuICAgICAgICBcIitmK1wiIHNvdXJjZUxvY0EgPSBcIitmK1wiKFwiK2guam9pbigpK1wiLCAwKTtcXG4gICAgICAgIC0tXCIraFtjLTFdK1wiO1xcbiAgICAgICAgXCIrZitcIiBzb3VyY2VMb2NCID0gXCIrZitcIihcIitoLmpvaW4oKStcIiwgMCk7XFxuICAgICAgICAtLVwiK2hbYy0yXStcIjtcIn1lbHNlIHM9YyxpPVwiXFxuICAgICAgICBcIitsK1wiIHNvdXJjZUxvY1IgPSBjb29yZHM7XFxuICAgICAgICArK1wiK2hbYy0xXStcIjtcXG4gICAgICAgIFwiK2wrXCIgc291cmNlTG9jRyA9IGNvb3JkcztcXG4gICAgICAgICsrXCIraFtjLTJdK1wiO1xcbiAgICAgICAgXCIrbCtcIiBzb3VyY2VMb2NBID0gY29vcmRzO1xcbiAgICAgICAgLS1cIitoW2MtMV0rXCI7XFxuICAgICAgICBcIitsK1wiIHNvdXJjZUxvY0IgPSBjb29yZHM7XFxuICAgICAgICAtLVwiK2hbYy0yXStcIjtcIjt2YXIgZD1bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdLnNsaWNlKDAscykscD1cIi5cIitkW3MtMV0sdj1kLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJpbnQgXCIrdH0pKSxtPXNhKFwic291cmNlTG9jUlwiLHMtMSkuY29uY2F0KFwiaW5JZHguclwiKSxnPXNhKFwic291cmNlTG9jR1wiLHMtMSkuY29uY2F0KFwiaW5JZHguZ1wiKSx5PXNhKFwic291cmNlTG9jQlwiLHMtMSkuY29uY2F0KFwiaW5JZHguYlwiKSx4PXNhKFwic291cmNlTG9jQVwiLHMtMSkuY29uY2F0KFwiaW5JZHguYVwiKSxiPVwibWF4XCI9PT1uP1wiZ3JlYXRlclRoYW5cIjpcImxlc3NUaGFuXCIsdz1yP1wiXCI6XCJcXG4gICAgICAgICAgaW5JZHggPSByb3VuZCh2ZWM0KGdldEJlc3RJbmRpY2VzQUNoYW5uZWwoXCIrbS5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QmVzdEluZGljZXNBQ2hhbm5lbChcIitnLmpvaW4oKStcIiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRCZXN0SW5kaWNlc0FDaGFubmVsKFwiK3kuam9pbigpK1wiKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEJlc3RJbmRpY2VzQUNoYW5uZWwoXCIreC5qb2luKCkrXCIpKSk7XCIsRT1cInZlYzQoXFxuICAgICAgICAgICAgZ2V0QUNoYW5uZWwoXCIrbS5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgIGhhc05leHRDb2wgPyBnZXRBQ2hhbm5lbChcIitnLmpvaW4oKStcIikgOiAwLixcXG4gICAgICAgICAgICBoYXNOZXh0Um93ID8gZ2V0QUNoYW5uZWwoXCIreS5qb2luKCkrXCIpIDogMC4sXFxuICAgICAgICAgICAgaGFzTmV4dFJvdyAmJiBoYXNOZXh0Q29sID8gZ2V0QUNoYW5uZWwoXCIreC5qb2luKCkrXCIpIDogMC4pXCIsUj1yP1wiXCI6XCJcXG4gICAgICBmbG9hdCBnZXRCZXN0SW5kaWNlc0FDaGFubmVsKFwiK3Yuam9pbigpK1wiKSB7XFxuICAgICAgICByZXR1cm4gZ2V0Q2hhbm5lbChnZXRCZXN0SW5kaWNlc0EoXCIrZC5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZC5zbGljZSgtMikuam9pbigpK1wiKSk7XFxuICAgICAgfVwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBnZXRBQ2hhbm5lbChcIit2LmpvaW4oKStcIikge1xcbiAgICAgICAgcmV0dXJuIGdldENoYW5uZWwoZ2V0QShcIitkLmpvaW4oKStcIiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZC5zbGljZSgtMikuam9pbigpK1wiKSk7XFxuICAgICAgfVxcbiAgICAgIFwiK1IrXCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitsK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgYm9vbCBoYXNOZXh0Q29sID0gXCIraFtjLTFdK1wiIDwgXCIrKHVbYy0xXS0xKStcIjtcXG4gICAgICAgIGJvb2wgaGFzTmV4dFJvdyA9IFwiK2hbYy0yXStcIiA8IFwiKyh1W2MtMl0tMSkrXCI7XFxuICAgICAgICBcIitpK1wiXFxuICAgICAgICBpdmVjNCBzcmNJZHggPSBpdmVjNChzb3VyY2VMb2NSXCIrcCtcIiwgc291cmNlTG9jR1wiK3ArXCIsXFxuICAgICAgICAgIHNvdXJjZUxvY0JcIitwK1wiLCBzb3VyY2VMb2NBXCIrcCtcIikgKiBcIitlK1wiO1xcbiAgICAgICAgaXZlYzQgaW5JZHggPSBzcmNJZHg7XFxuICAgICAgICB2ZWM0IGJlc3RJbmRleCA9IHZlYzQoaW5JZHgpO1xcbiAgICAgICAgdmVjNCBiZXN0VmFsdWUgPSBcIitFK1wiO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIitlK1wiOyBpKyspIHtcXG4gICAgICAgICAgaW5JZHggPSBzcmNJZHg7XFxuICAgICAgICAgIFwiK3crXCJcXG4gICAgICAgICAgdmVjNCBjYW5kaWRhdGUgPSBcIitFK1wiO1xcbiAgICAgICAgICBidmVjNCBuYW4gPSBpc25hbihjYW5kaWRhdGUpO1xcbiAgICAgICAgICBidmVjNCByZXBsYWNlID0gYnZlYzQoXFxuICAgICAgICAgICAgdmVjNChcIitiK1wiKGNhbmRpZGF0ZSwgYmVzdFZhbHVlKSkgKiAodmVjNCgxLjApIC0gdmVjNChuYW4pKSk7XFxuXFxuICAgICAgICAgIGJlc3RWYWx1ZSA9IHZlYzQocmVwbGFjZS54ICA/IGNhbmRpZGF0ZS54IDogYmVzdFZhbHVlLngsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS55ICA/IGNhbmRpZGF0ZS55IDogYmVzdFZhbHVlLnksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS56ICA/IGNhbmRpZGF0ZS56IDogYmVzdFZhbHVlLnosXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS53ICA/IGNhbmRpZGF0ZS53IDogYmVzdFZhbHVlLncpO1xcbiAgICAgICAgICBiZXN0SW5kZXggPSBtaXgoYmVzdEluZGV4LCB2ZWM0KGluSWR4KSwgdmVjNChyZXBsYWNlKSk7XFxuICAgICAgICAgIHNyY0lkeCsrO1xcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGJlc3RJbmRleCk7XFxuICAgICAgfVxcbiAgICBcIn0sSWE9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuZmlsdGVySGVpZ2h0LG49dC5maWx0ZXJXaWR0aCxyPXQuc3RyaWRlSGVpZ2h0LG89dC5zdHJpZGVXaWR0aCxhPXQuZGlsYXRpb25IZWlnaHQsaT10LmRpbGF0aW9uV2lkdGgscz10LmVmZmVjdGl2ZUZpbHRlckhlaWdodCx1PXQuZWZmZWN0aXZlRmlsdGVyV2lkdGgsYz1zLTEtdC5wYWRJbmZvLnRvcCxsPXUtMS10LnBhZEluZm8ubGVmdCxoPTEvKGUqbik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitjK1wiLCBcIitsK1wiKTtcXG4gICAgICBjb25zdCBmbG9hdCBhdmdNdWx0aXBsaWVyID0gZmxvYXQoXCIraCtcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgaXZlYzIgZHlSQ0Nvcm5lciA9IGNvb3Jkcy55eiAtIHBhZHM7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5UkNDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIGR5KD8sID8sIGQpIHdpdGggcG9zIG1hc2soOiwgOiwgZCkgdG8gZ2V0IGR4KHhSLCB4QywgZCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrcytcIjtcXG4gICAgICAgICAgICB3UiArPSBcIithK1wiKSB7XFxuICAgICAgICAgIGZsb2F0IGR5UiA9IGZsb2F0KGR5UkNvcm5lciArIHdSKSAvIFwiK3IrXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fCBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK3UrXCI7XFxuICAgICAgICAgICAgd0MrPSBcIitpK1wiKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIrbytcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwLjAgfHwgZHlDID49IFwiK3Qub3V0V2lkdGgrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgaWR5UiwgaWR5QywgZCk7XFxuXFxuICAgICAgICAgICAgZG90UHJvZCArPSBkeVZhbHVlICogYXZnTXVsdGlwbGllcjtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9LGthPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPXQuaW5TaGFwZTt2YXIgZT10LmZpbHRlckRlcHRoLG49dC5maWx0ZXJIZWlnaHQscj10LmZpbHRlcldpZHRoLG89dC5zdHJpZGVEZXB0aCxhPXQuc3RyaWRlSGVpZ2h0LGk9dC5zdHJpZGVXaWR0aCxzPXQuZGlsYXRpb25EZXB0aCx1PXQuZGlsYXRpb25IZWlnaHQsYz10LmRpbGF0aW9uV2lkdGgsbD10LmVmZmVjdGl2ZUZpbHRlckRlcHRoLGg9dC5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsZj10LmVmZmVjdGl2ZUZpbHRlcldpZHRoLGQ9bC0xLXQucGFkSW5mby5mcm9udCxwPWgtMS10LnBhZEluZm8udG9wLHY9Zi0xLXQucGFkSW5mby5sZWZ0LG09MS8oZSpuKnIpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMyBwYWRzID0gaXZlYzMoXCIrZCtcIiwgXCIrcCtcIiwgXCIrditcIik7XFxuICAgICAgY29uc3QgZmxvYXQgYXZnTXVsdGlwbGllciA9IGZsb2F0KFwiK20rXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgY2ggPSBjb29yZHMudTtcXG5cXG4gICAgICAgIGl2ZWMzIGR5Q29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgLSBwYWRzO1xcbiAgICAgICAgaW50IGR5RENvcm5lciA9IGR5Q29ybmVyLng7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlDb3JuZXIueTtcXG4gICAgICAgIGludCBkeUNDb3JuZXIgPSBkeUNvcm5lci56O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgZHkoPywgPywgPywgZCkgd2l0aCBwb3MgbWFzayg6LCA6LCA6LCBjaCkgdG8gZ2V0XFxuICAgICAgICAvLyBkeCh4RCwgeFIsIHhDLCBjaCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCB3RCA9IDA7IHdEIDwgXCIrbCtcIjtcXG4gICAgICAgICAgICB3RCArPSBcIitzK1wiKSB7XFxuICAgICAgICAgIGZsb2F0IGR5RCA9IGZsb2F0KGR5RENvcm5lciArIHdEKSAvIFwiK28rXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5RCA8IDAuMCB8fCBkeUQgPj0gXCIrdC5vdXREZXB0aCtcIi4wIHx8IGZyYWN0KGR5RCkgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5RCA9IGludChkeUQpO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIraCtcIjtcXG4gICAgICAgICAgICAgIHdSICs9IFwiK3UrXCIpIHtcXG4gICAgICAgICAgICBmbG9hdCBkeVIgPSBmbG9hdChkeVJDb3JuZXIgKyB3UikgLyBcIithK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrZitcIjtcXG4gICAgICAgICAgICAgICAgd0MgKz0gXCIrYytcIikge1xcbiAgICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIraStcIi4wO1xcblxcbiAgICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgICAgZnJhY3QoZHlDKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIGludCBpZHlDID0gaW50KGR5Qyk7XFxuXFxuICAgICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYmF0Y2gsIGlkeUQsIGlkeVIsIGlkeUMsIGNoKTtcXG5cXG4gICAgICAgICAgICAgIGRvdFByb2QgKz0gZHlWYWx1ZSAqIGF2Z011bHRpcGxpZXI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn0sU2E9ZnVuY3Rpb24odCxlLG4scixvLGEpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIm1lYW5cIixcInZhcmlhbmNlXCJdLFJvKHQsZSksUm8odCxuKTt2YXIgaT1cIjAuMFwiO251bGwhPXImJihSbyh0LHIpLHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwib2Zmc2V0XCIpLGk9XCJnZXRPZmZzZXRBdE91dENvb3JkcygpXCIpO3ZhciBzPVwiMS4wXCI7bnVsbCE9byYmKFJvKHQsbyksdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJzY2FsZVwiKSxzPVwiZ2V0U2NhbGVBdE91dENvb3JkcygpXCIpLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgeCA9IGdldFhBdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgbWVhbiA9IGdldE1lYW5BdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgdmFyaWFuY2UgPSBnZXRWYXJpYW5jZUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCBvZmZzZXQgPSBcIitpK1wiO1xcbiAgICAgICAgZmxvYXQgc2NhbGUgPSBcIitzK1wiO1xcbiAgICAgICAgZmxvYXQgaW52ID0gc2NhbGUgKiBpbnZlcnNlc3FydCh2YXJpYW5jZSArIGZsb2F0KFwiK2ErXCIpKTtcXG4gICAgICAgIHNldE91dHB1dChkb3QodmVjMyh4LCAtbWVhbiwgb2Zmc2V0KSwgdmVjMyhpbnYsIGludiwgMSkpKTtcXG4gICAgICB9XFxuICAgIFwifSxBYT1mdW5jdGlvbih0LGUsbixyLG8sYSl7dGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITAsdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIm1lYW5cIixcInZhcmlhbmNlXCJdLFJvKHQsZSksUm8odCxuKTt2YXIgaT1cInZlYzQoMC4wKVwiO251bGwhPXImJihSbyh0LHIpLHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwib2Zmc2V0XCIpLGk9XCJnZXRPZmZzZXRBdE91dENvb3JkcygpXCIpO3ZhciBzPVwidmVjNCgxLjApXCI7bnVsbCE9byYmKFJvKHQsbyksdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJzY2FsZVwiKSxzPVwiZ2V0U2NhbGVBdE91dENvb3JkcygpXCIpLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdmVjNCBvZmZzZXQgPSBcIitpK1wiO1xcbiAgICAgICAgdmVjNCBzY2FsZSA9IFwiK3MrXCI7XFxuXFxuICAgICAgICB2ZWM0IHggPSBnZXRYQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIHZlYzQgbWVhbiA9IGdldE1lYW5BdE91dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCB2YXJpYW5jZSA9IGdldFZhcmlhbmNlQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgaW52ID0gc2NhbGUgKiBpbnZlcnNlc3FydCh2YXJpYW5jZSArIHZlYzQoXCIrYStcIikpO1xcblxcbiAgICAgICAgc2V0T3V0cHV0KCh4IC0gbWVhbikgKiBpbnYgKyBvZmZzZXQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LERhPVwicmV0dXJuIGFyZWFsICogYnJlYWwgLSBhaW1hZyAqIGJpbWFnO1wiLFRhPVwicmV0dXJuIGFyZWFsICogYmltYWcgKyBhaW1hZyAqIGJyZWFsO1wiLE5hPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVJlYWxcIixcIkFJbWFnXCIsXCJCUmVhbFwiLFwiQkltYWdcIl0sdGhpcy5vdXRwdXRTaGFwZT1SbyhlLG4pLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBiaW5hcnlPcENvbXBsZXgoXFxuICAgICAgICAgIGZsb2F0IGFyZWFsLCBmbG9hdCBhaW1hZywgZmxvYXQgYnJlYWwsIGZsb2F0IGJpbWFnKSB7XFxuICAgICAgICBcIit0K1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGZsb2F0IGFyZWFsID0gZ2V0QVJlYWxBdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgYWltYWcgPSBnZXRBSW1hZ0F0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCBicmVhbCA9IGdldEJSZWFsQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGJpbWFnID0gZ2V0QkltYWdBdE91dENvb3JkcygpO1xcbiAgICAgICAgc2V0T3V0cHV0KGJpbmFyeU9wQ29tcGxleChhcmVhbCwgYWltYWcsIGJyZWFsLCBiaW1hZykpO1xcbiAgICAgIH1cXG4gICAgXCJ9LEZhPVwicmV0dXJuIGEgKyBiO1wiLF9hPVwicmV0dXJuIGEgLSBiO1wiLE9hPVwicmV0dXJuIGEgKiBiO1wiLE1hPVwicmV0dXJuIChhIDwgMC4pID8gYiAqIGEgOiBhO1wiLEJhPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiLFwiQlwiXSx0aGlzLm91dHB1dFNoYXBlPVJvKGUsbiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGZsb2F0IGJpbmFyeU9wZXJhdGlvbihmbG9hdCBhLCBmbG9hdCBiKSB7XFxuICAgICAgICBcIit0K1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGZsb2F0IGEgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGIgPSBnZXRCQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIHNldE91dHB1dChiaW5hcnlPcGVyYXRpb24oYSwgYikpO1xcbiAgICAgIH1cXG4gICAgXCJ9LFBhPVwiXFxuICB2ZWM0IGFMZXNzVGhhblplcm8gPSB2ZWM0KGxlc3NUaGFuKGEsIHZlYzQoMC4pKSk7XFxuICByZXR1cm4gKGFMZXNzVGhhblplcm8gKiAoYiAqIGEpKSArICgodmVjNCgxLjApIC0gYUxlc3NUaGFuWmVybykgKiBhKTtcXG5cIixMYT1mdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIixcIkJcIl0sdGhpcy5zdXBwb3J0c0Jyb2FkY2FzdGluZz0hMCx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPVJvKGUsbik7dmFyIG89dGhpcy5vdXRwdXRTaGFwZS5sZW5ndGgsYT1cIlwiO2lmKHIpaWYoMD09PW98fDE9PT1rKHRoaXMub3V0cHV0U2hhcGUpKWE9XCJcXG4gICAgICAgICAgcmVzdWx0LnkgPSAwLjtcXG4gICAgICAgICAgcmVzdWx0LnogPSAwLjtcXG4gICAgICAgICAgcmVzdWx0LncgPSAwLjtcXG4gICAgICAgIFwiO2Vsc2UgaWYoYT1cIlxcbiAgICAgICAgICBcIit3YShvKStcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIFwiLDE9PT1vKWErPVwiXFxuICAgICAgICAgICAgcmVzdWx0LnkgPSAoY29vcmRzICsgMSkgPj0gXCIrdGhpcy5vdXRwdXRTaGFwZVswXStcIiA/IDAuIDogcmVzdWx0Lnk7XFxuICAgICAgICAgICAgcmVzdWx0LnogPSAwLjtcXG4gICAgICAgICAgICByZXN1bHQudyA9IDAuO1xcbiAgICAgICAgICBcIjtlbHNle3ZhciBpPXNhKFwiY29vcmRzXCIsbyk7YSs9XCJcXG4gICAgICAgICAgICBib29sIG5leHRSb3dPdXRPZkJvdW5kcyA9XFxuICAgICAgICAgICAgICAoXCIraVtvLTJdK1wiICsgMSkgPj0gXCIrdGhpcy5vdXRwdXRTaGFwZVtvLTJdK1wiO1xcbiAgICAgICAgICAgIGJvb2wgbmV4dENvbE91dE9mQm91bmRzID1cXG4gICAgICAgICAgICAgIChcIitpW28tMV0rXCIgKyAxKSA+PSBcIit0aGlzLm91dHB1dFNoYXBlW28tMV0rXCI7XFxuICAgICAgICAgICAgcmVzdWx0LnkgPSBuZXh0Q29sT3V0T2ZCb3VuZHMgPyAwLiA6IHJlc3VsdC55O1xcbiAgICAgICAgICAgIHJlc3VsdC56ID0gbmV4dFJvd091dE9mQm91bmRzID8gMC4gOiByZXN1bHQuejtcXG4gICAgICAgICAgICByZXN1bHQudyA9IG5leHRDb2xPdXRPZkJvdW5kcyB8fCBuZXh0Um93T3V0T2ZCb3VuZHMgPyAwLiA6IHJlc3VsdC53O1xcbiAgICAgICAgICBcIn10aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdmVjNCBiaW5hcnlPcGVyYXRpb24odmVjNCBhLCB2ZWM0IGIpIHtcXG4gICAgICAgIFwiK3QrXCJcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdmVjNCBhID0gZ2V0QUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICB2ZWM0IGIgPSBnZXRCQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gYmluYXJ5T3BlcmF0aW9uKGEsIGIpO1xcbiAgICAgICAgXCIrYStcIlxcblxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn0sV2E9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdW5pZm9ybSBmbG9hdCBtaW5WYWw7XFxuICAgICAgdW5pZm9ybSBmbG9hdCBtYXhWYWw7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgdmFsdWUgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGlmIChpc25hbih2YWx1ZSkpIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KHZhbHVlKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgc2V0T3V0cHV0KGNsYW1wKHZhbHVlLCBtaW5WYWwsIG1heFZhbCkpO1xcbiAgICAgIH1cXG4gICAgXCJ9cmV0dXJuIHQucHJvdG90eXBlLmdldEN1c3RvbVNldHVwRnVuYz1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKHIsbyl7bnVsbD09bi5taW5Mb2MmJihuLm1pbkxvYz1yLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cobyxcIm1pblZhbFwiKSxuLm1heExvYz1yLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cobyxcIm1heFZhbFwiKSksci5nbC51bmlmb3JtMWYobi5taW5Mb2MsdCksci5nbC51bmlmb3JtMWYobi5tYXhMb2MsZSl9fSx0fSgpLFVhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHVuaWZvcm0gZmxvYXQgbWluVmFsO1xcbiAgICAgIHVuaWZvcm0gZmxvYXQgbWF4VmFsO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIHZlYzQgdmFsdWUgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIGlmIChhbnkoaXNuYW4odmFsdWUpKSkge1xcbiAgICAgICAgICBzZXRPdXRwdXQodmFsdWUpO1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICBzZXRPdXRwdXQoY2xhbXAodmFsdWUsIHZlYzQobWluVmFsKSwgdmVjNChtYXhWYWwpKSk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztyZXR1cm4gZnVuY3Rpb24ocixvKXtudWxsPT1uLm1pbkxvYyYmKG4ubWluTG9jPXIuZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhvLFwibWluVmFsXCIpLG4ubWF4TG9jPXIuZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhvLFwibWF4VmFsXCIpKSxyLmdsLnVuaWZvcm0xZihuLm1pbkxvYyx0KSxyLmdsLnVuaWZvcm0xZihuLm1heExvYyxlKX19LHR9KCksVmE9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInJlYWxcIixcImltYWdcIl0sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBmbG9hdCByZSA9IGFicyhnZXRSZWFsQXRPdXRDb29yZHMoKSk7XFxuICAgICAgICBmbG9hdCBpbSA9IGFicyhnZXRJbWFnQXRPdXRDb29yZHMoKSk7XFxuICAgICAgICBmbG9hdCBteCA9IG1heChyZSwgaW0pO1xcblxcbiAgICAgICAgLy8gc2FkbHkgdGhlIGxlbmd0aCBmdW5jdGlvbiBpbiBnbHNsIGlzIG5vdCB1bmRlcmZsb3ctc2FmZVxcbiAgICAgICAgLy8gKGF0IGxlYXN0IG5vdCBvbiBJbnRlbCBHUFVzKS4gU28gdGhlIHNhZmUgc29sdXRpb24gaXNcXG4gICAgICAgIC8vIHRvIGVuc3VyZSB1bmRlcmZsb3ctc2FmZXR5IGluIGFsbCBjYXNlcy5cXG4gICAgICAgIHNldE91dHB1dChcXG4gICAgICAgICAgbXggPT0gMC4wID8gMC4wIDogbXggKiBsZW5ndGgodmVjMigxLCBtaW4ocmUsIGltKS9teCkpXFxuICAgICAgICApO1xcbiAgICAgIH1cXG4gICAgXCJ9LHphPWZ1bmN0aW9uKHQpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT1Tbih0LDEpLHRoaXMudmFyaWFibGVOYW1lcz10Lm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm5cIlRcIitlfSkpO3ZhciBlPW5ldyBBcnJheSh0Lmxlbmd0aC0xKTtlWzBdPXRbMF1bMV07Zm9yKHZhciBuPTE7bjxlLmxlbmd0aDtuKyspZVtuXT1lW24tMV0rdFtuXVsxXTt2YXIgcj1bXCJpZiAoeUMgPCBcIitlWzBdK1wiKSBzZXRPdXRwdXQoZ2V0VDAoeVIsIHlDKSk7XCJdO2ZvcihuPTE7bjxlLmxlbmd0aDtuKyspe3ZhciBvPWVbbi0xXTtyLnB1c2goXCJlbHNlIGlmICh5QyA8IFwiK2Vbbl0rXCIpIHNldE91dHB1dChnZXRUXCIrbitcIih5UiwgeUMtXCIrbytcIikpO1wiKX12YXIgYT1lLmxlbmd0aCxpPWVbZS5sZW5ndGgtMV07ci5wdXNoKFwiZWxzZSBzZXRPdXRwdXQoZ2V0VFwiK2ErXCIoeVIsIHlDLVwiK2krXCIpKTtcIiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IHlSID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgeUMgPSBjb29yZHMueTtcXG5cXG4gICAgICAgIFwiK3Iuam9pbihcIlxcbiAgICAgICAgXCIpK1wiXFxuICAgICAgfVxcbiAgICBcIn0sR2E9ZnVuY3Rpb24odCxlKXt0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMub3V0cHV0U2hhcGU9U24odCxlKTt2YXIgbj10aGlzLm91dHB1dFNoYXBlLHI9bi5sZW5ndGgsbz13YShyKSxhPXNhKFwiY29vcmRzXCIsciksaT1bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdLnNsaWNlKDAscik7dGhpcy52YXJpYWJsZU5hbWVzPXQubWFwKChmdW5jdGlvbih0LGUpe3JldHVyblwiVFwiK2V9KSk7dmFyIHM9bmV3IEFycmF5KHQubGVuZ3RoLTEpO3NbMF09dFswXVtlXTtmb3IodmFyIHU9MTt1PHMubGVuZ3RoO3UrKylzW3VdPXNbdS0xXSt0W3VdW2VdO3ZhciBjPWlbZV0sbD1pLnNsaWNlKC0yKSxoPWkuam9pbigpLGY9XCJpZiAoXCIrYytcIiA8IFwiK3NbMF0rXCIpIHtcXG4gICAgICAgIHJldHVybiBnZXRDaGFubmVsKFxcbiAgICAgICAgICAgIGdldFQwKFwiK2grXCIpLCB2ZWMyKFwiK2wuam9pbigpK1wiKSk7XFxuICAgICAgICB9XCI7Zm9yKHU9MTt1PHMubGVuZ3RoO3UrKyl7dmFyIGQ9c1t1LTFdO2YrPVwiXFxuICAgICAgICBpZiAoXCIrYytcIiA8IFwiK3NbdV0rXCIgICYmIFwiK2MrXCIgPj0gXCIrc1t1LTFdK1wiKSB7XFxuICAgICAgICAgIHJldHVybiBnZXRDaGFubmVsKFxcbiAgICAgICAgICAgIGdldFRcIit1K1wiKFwiK0hhKGksYyxkKStcIiksXFxuICAgICAgICAgICAgdmVjMihcIitIYShsLGMsZCkrXCIpKTtcXG4gICAgICAgIH1cIn12YXIgcD1zLmxlbmd0aCx2PXNbcy5sZW5ndGgtMV07Zis9XCJcXG4gICAgICAgIHJldHVybiBnZXRDaGFubmVsKFxcbiAgICAgICAgICBnZXRUXCIrcCtcIihcIitIYShpLGMsdikrXCIpLFxcbiAgICAgICAgICB2ZWMyKFwiK0hhKGwsYyx2KStcIikpO1wiLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBnZXRWYWx1ZShcIitpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuXCJpbnQgXCIrdH0pKStcIikge1xcbiAgICAgICAgXCIrZitcIlxcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KGdldFZhbHVlKFwiK2ErXCIpLCAwLiwgMC4sIDAuKTtcXG5cXG4gICAgICAgIFwiK2Fbci0xXStcIiA9IFwiK2Fbci0xXStcIiArIDE7XFxuICAgICAgICBpZiAoXCIrYVtyLTFdK1wiIDwgXCIrbltyLTFdK1wiKSB7XFxuICAgICAgICAgIHJlc3VsdC5nID0gZ2V0VmFsdWUoXCIrYStcIik7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIithW3ItMl0rXCIgPSBcIithW3ItMl0rXCIgKyAxO1xcbiAgICAgICAgaWYgKFwiK2Fbci0yXStcIiA8IFwiK25bci0yXStcIikge1xcbiAgICAgICAgICByZXN1bHQuYSA9IGdldFZhbHVlKFwiK2ErXCIpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgXCIrYVtyLTFdK1wiID0gXCIrYVtyLTFdK1wiIC0gMTtcXG4gICAgICAgIGlmIChcIithW3ItMl0rXCIgPCBcIituW3ItMl0rXCIgJiZcXG4gICAgICAgICAgICBcIithW3ItMV0rXCIgPCBcIituW3ItMV0rXCIpIHtcXG4gICAgICAgICAgcmVzdWx0LmIgPSBnZXRWYWx1ZShcIithK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9O2Z1bmN0aW9uIEhhKHQsZSxuKXt2YXIgcj10LmluZGV4T2YoZSk7cmV0dXJuIHQubWFwKChmdW5jdGlvbih0LGUpe3JldHVybiBlPT09cj90K1wiIC0gXCIrbjp0fSkpLmpvaW4oKX12YXIgcWE9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9dC5maWx0ZXJTaGFwZTt2YXIgZT10LnN0cmlkZUhlaWdodCxuPXQuc3RyaWRlV2lkdGgscj10LnBhZEluZm8udG9wLG89dC5wYWRJbmZvLmxlZnQsYT1cImNoYW5uZWxzTGFzdFwiPT09dC5kYXRhRm9ybWF0O3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCB3UiA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IHdDID0gY29vcmRzLnk7XFxuICAgICAgICBpbnQgZDEgPSBjb29yZHMuejtcXG4gICAgICAgIGludCBkMiA9IGNvb3Jkcy53O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgeCg/LCA/LCBkMSkgd2l0aCBkeSg6LCA6LCBkMikgdG8gZ2V0IGR3KHdSLCB3QywgZDEsIGQyKS5cXG4gICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbCB2YWx1ZXMgaW4gdGhhdCBheGlzLlxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IGIgPSAwOyBiIDwgXCIrdC5iYXRjaFNpemUrXCI7IGIrKykge1xcbiAgICAgICAgICBmb3IgKGludCB5UiA9IDA7IHlSIDwgXCIrdC5vdXRIZWlnaHQrXCI7IHlSKyspIHtcXG4gICAgICAgICAgICBpbnQgeFIgPSB3UiArIHlSICogXCIrZStcIiAtIFwiK3IrXCI7XFxuXFxuICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgeUMgPSAwOyB5QyA8IFwiK3Qub3V0V2lkdGgrXCI7IHlDKyspIHtcXG4gICAgICAgICAgICAgIGludCB4QyA9IHdDICsgeUMgKiBcIituK1wiIC0gXCIrbytcIjtcXG5cXG4gICAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgaWYgKFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgZmxvYXQgZHlWYWx1ZSA9IGdldER5KGIsIHlSLCB5QywgZDIpO1xcbiAgICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXRYKGIsIHhSLCB4QywgZDEpO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9ICh4VmFsdWUgKiBkeVZhbHVlKTtcXG4gICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSBnZXREeShiLCBkMiwgeVIsIHlDKTtcXG4gICAgICAgICAgICAgICAgZmxvYXQgeFZhbHVlID0gZ2V0WChiLCBkMSwgeFIsIHhDKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSAoeFZhbHVlICogZHlWYWx1ZSk7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn0sS2E9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCIsXCJXXCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuZmlsdGVySGVpZ2h0LG49dC5maWx0ZXJXaWR0aCxyPXQuc3RyaWRlSGVpZ2h0LG89dC5zdHJpZGVXaWR0aCxhPVwiY2hhbm5lbHNMYXN0XCI9PT10LmRhdGFGb3JtYXQsaT1lLTEtdC5wYWRJbmZvLnRvcCxzPW4tMS10LnBhZEluZm8ubGVmdCx1PWE/MToyLGM9YT8yOjMsbD1hPzM6MTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzIgcGFkcyA9IGl2ZWMyKFwiK2krXCIsIFwiK3MrXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQxID0gY29vcmRzW1wiK2wrXCJdO1xcblxcbiAgICAgICAgaXZlYzIgZHlDb3JuZXIgPSBpdmVjMihjb29yZHNbXCIrdStcIl0sIGNvb3Jkc1tcIitjK1wiXSkgLSBwYWRzO1xcbiAgICAgICAgaW50IGR5UkNvcm5lciA9IGR5Q29ybmVyLng7XFxuICAgICAgICBpbnQgZHlDQ29ybmVyID0gZHlDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIGR5KD8sID8sIGQyKSB3aXRoIHcoOiwgOiwgZDEsIGQyKSB0byBjb21wdXRlIGR4KHhSLCB4QywgZDEpLlxcbiAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWQuIDogPSBhY3Jvc3MgYWxsIHZhbHVlcyBpbiB0aGF0IGF4aXMuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcbiAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK2UrXCI7IHdSKyspIHtcXG4gICAgICAgICAgZmxvYXQgZHlSID0gZmxvYXQoZHlSQ29ybmVyICsgd1IpIC8gXCIrcitcIi4wO1xcblxcbiAgICAgICAgICBpZiAoZHlSIDwgMC4wIHx8IGR5UiA+PSBcIit0Lm91dEhlaWdodCtcIi4wIHx8IGZyYWN0KGR5UikgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5UiA9IGludChkeVIpO1xcblxcbiAgICAgICAgICBpbnQgd1JQZXJtID0gXCIrZStcIiAtIDEgLSB3UjtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK24rXCI7IHdDKyspIHtcXG4gICAgICAgICAgICBmbG9hdCBkeUMgPSBmbG9hdChkeUNDb3JuZXIgKyB3QykgLyBcIitvK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgIGZyYWN0KGR5QykgPiAwLjApIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnQgaWR5QyA9IGludChkeUMpO1xcblxcbiAgICAgICAgICAgIGludCB3Q1Blcm0gPSBcIituK1wiIC0gMSAtIHdDO1xcblxcbiAgICAgICAgICAgIGZvciAoaW50IGQyID0gMDsgZDIgPCBcIit0Lm91dENoYW5uZWxzK1wiOyBkMisrKSB7XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXREeShiYXRjaCwgaWR5UiwgaWR5QywgZDIpO1xcbiAgICAgICAgICAgICAgICBmbG9hdCB3VmFsdWUgPSBnZXRXKHdSUGVybSwgd0NQZXJtLCBkMSwgZDIpO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IHhWYWx1ZSAqIHdWYWx1ZTtcXG4gICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9IGdldER5KGJhdGNoLCBkMiwgaWR5UiwgaWR5Qyk7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHdWYWx1ZSA9IGdldFcod1JQZXJtLCB3Q1Blcm0sIGQxLCBkMik7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0geFZhbHVlICogd1ZhbHVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9LGphPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCIsXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPXQuZmlsdGVyU2hhcGU7dmFyIGU9dC5zdHJpZGVEZXB0aCxuPXQuc3RyaWRlSGVpZ2h0LHI9dC5zdHJpZGVXaWR0aCxvPXQucGFkSW5mby5mcm9udCxhPXQucGFkSW5mby50b3AsaT10LnBhZEluZm8ubGVmdDt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzUgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgd0YgPSBjb29yZHMueDtcXG4gICAgICAgIGludCB3UiA9IGNvb3Jkcy55O1xcbiAgICAgICAgaW50IHdDID0gY29vcmRzLno7XFxuICAgICAgICBpbnQgZDEgPSBjb29yZHMudztcXG4gICAgICAgIGludCBkMiA9IGNvb3Jkcy51O1xcblxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IGIgPSAwOyBiIDwgXCIrdC5iYXRjaFNpemUrXCI7IGIrKykge1xcbiAgICAgICAgICBmb3IgKGludCB5RiA9IDA7IHlGIDwgXCIrdC5vdXREZXB0aCtcIjsgeUYrKykge1xcbiAgICAgICAgICAgIGludCB4RiA9IHdGICsgeUYgKiBcIitlK1wiIC0gXCIrbytcIjtcXG5cXG4gICAgICAgICAgICBpZiAoeEYgPCAwIHx8IHhGID49IFwiK3QuaW5EZXB0aCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IHlSID0gMDsgeVIgPCBcIit0Lm91dEhlaWdodCtcIjsgeVIrKykge1xcbiAgICAgICAgICAgICAgaW50IHhSID0gd1IgKyB5UiAqIFwiK24rXCIgLSBcIithK1wiO1xcblxcbiAgICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgZm9yIChpbnQgeUMgPSAwOyB5QyA8IFwiK3Qub3V0V2lkdGgrXCI7IHlDKyspIHtcXG4gICAgICAgICAgICAgICAgaW50IHhDID0gd0MgKyB5QyAqIFwiK3IrXCIgLSBcIitpK1wiO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSBnZXREeShiLCB5RiwgeVIsIHlDLCBkMik7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9IGdldFgoYiwgeEYsIHhSLCB4QywgZDEpO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9ICh4VmFsdWUgKiBkeVZhbHVlKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifSxYYT1mdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiZHlcIixcIldcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmluU2hhcGU7dmFyIGU9dC5maWx0ZXJEZXB0aCxuPXQuZmlsdGVySGVpZ2h0LHI9dC5maWx0ZXJXaWR0aCxvPXQuc3RyaWRlRGVwdGgsYT10LnN0cmlkZUhlaWdodCxpPXQuc3RyaWRlV2lkdGgscz1lLTEtdC5wYWRJbmZvLmZyb250LHU9bi0xLXQucGFkSW5mby50b3AsYz1yLTEtdC5wYWRJbmZvLmxlZnQ7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMzIHBhZHMgPSBpdmVjMyhcIitzK1wiLCBcIit1K1wiLCBcIitjK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNSBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IGQxID0gY29vcmRzLnU7XFxuXFxuXFxuICAgICAgICBpdmVjMyBkeUNvcm5lciA9IGl2ZWMzKGNvb3Jkcy55LCBjb29yZHMueiwgY29vcmRzLncpIC0gcGFkcztcXG4gICAgICAgIGludCBkeUZDb3JuZXIgPSBkeUNvcm5lci54O1xcbiAgICAgICAgaW50IGR5UkNvcm5lciA9IGR5Q29ybmVyLnk7XFxuICAgICAgICBpbnQgZHlDQ29ybmVyID0gZHlDb3JuZXIuejtcXG5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3RiA9IDA7IHdGIDwgXCIrZStcIjsgd0YrKykge1xcbiAgICAgICAgICBmbG9hdCBkeUYgPSBmbG9hdChkeUZDb3JuZXIgKyB3RikgLyBcIitvK1wiLjA7XFxuXFxuICAgICAgICAgIGlmIChkeUYgPCAwLjAgfHwgZHlGID49IFwiK3Qub3V0RGVwdGgrXCIuMCB8fCBmcmFjdChkeUYpID4gMC4wKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaW50IGlkeUYgPSBpbnQoZHlGKTtcXG5cXG4gICAgICAgICAgaW50IHdGUGVybSA9IFwiK2UrXCIgLSAxIC0gd0Y7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIituK1wiOyB3UisrKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlSID0gZmxvYXQoZHlSQ29ybmVyICsgd1IpIC8gXCIrYStcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeVIgPCAwLjAgfHwgZHlSID49IFwiK3Qub3V0SGVpZ2h0K1wiLjAgfHxcXG4gICAgICAgICAgICAgIGZyYWN0KGR5UikgPiAwLjApIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnQgaWR5UiA9IGludChkeVIpO1xcblxcbiAgICAgICAgICAgIGludCB3UlBlcm0gPSBcIituK1wiIC0gMSAtIHdSO1xcblxcbiAgICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIityK1wiOyB3QysrKSB7XFxuICAgICAgICAgICAgICBmbG9hdCBkeUMgPSBmbG9hdChkeUNDb3JuZXIgKyB3QykgLyBcIitpK1wiLjA7XFxuXFxuICAgICAgICAgICAgICBpZiAoZHlDIDwgMC4wIHx8IGR5QyA+PSBcIit0Lm91dFdpZHRoK1wiLjAgfHxcXG4gICAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICAgIGludCB3Q1Blcm0gPSBcIityK1wiIC0gMSAtIHdDO1xcblxcbiAgICAgICAgICAgICAgZm9yIChpbnQgZDIgPSAwOyBkMiA8IFwiK3Qub3V0Q2hhbm5lbHMrXCI7IGQyKyspIHtcXG4gICAgICAgICAgICAgICAgZmxvYXQgeFZhbHVlID0gZ2V0RHkoYmF0Y2gsIGlkeUYsIGlkeVIsIGlkeUMsIGQyKTtcXG4gICAgICAgICAgICAgICAgZmxvYXQgd1ZhbHVlID0gZ2V0Vyh3RlBlcm0sIHdSUGVybSwgd0NQZXJtLCBkMSwgZDIpO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IHhWYWx1ZSAqIHdWYWx1ZTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifSxZYT1mdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwiZHlcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmZpbHRlclNoYXBlO3ZhciBlPXQuc3RyaWRlSGVpZ2h0LG49dC5zdHJpZGVXaWR0aCxyPXQucGFkSW5mby50b3Asbz10LnBhZEluZm8ubGVmdCxhPXQub3V0Q2hhbm5lbHMvdC5pbkNoYW5uZWxzO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCB3UiA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IHdDID0gY29vcmRzLnk7XFxuICAgICAgICBpbnQgZDEgPSBjb29yZHMuejtcXG4gICAgICAgIGludCBkbSA9IGNvb3Jkcy53O1xcbiAgICAgICAgaW50IGQyID0gZDEgKiBcIithK1wiICsgZG07XFxuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcblxcbiAgICAgICAgLy8gVE8gRE86IFZlYzQgb3ZlciB0aGUgYmF0Y2ggc2l6ZVxcbiAgICAgICAgZm9yIChpbnQgYiA9IDA7IGIgPCBcIit0LmJhdGNoU2l6ZStcIjsgYisrKSB7XFxuICAgICAgICAgIGZvciAoaW50IHlSID0gMDsgeVIgPCBcIit0Lm91dEhlaWdodCtcIjsgeVIrKykge1xcbiAgICAgICAgICAgIGludCB4UiA9IHdSICsgeVIgKiBcIitlK1wiIC0gXCIrcitcIjtcXG5cXG4gICAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKGludCB5QyA9IDA7IHlDIDwgXCIrdC5vdXRXaWR0aCtcIjsgeUMrKykge1xcbiAgICAgICAgICAgICAgaW50IHhDID0gd0MgKyB5QyAqIFwiK24rXCIgLSBcIitvK1wiO1xcblxcbiAgICAgICAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIit0LmluV2lkdGgrXCIpIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgeVIsIHlDLCBkMik7XFxuICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXRYKGIsIHhSLCB4QywgZDEpO1xcbiAgICAgICAgICAgICAgZG90UHJvZCArPSAoeFZhbHVlICogZHlWYWx1ZSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn0sJGE9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCIsXCJXXCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuZmlsdGVySGVpZ2h0LG49dC5maWx0ZXJXaWR0aCxyPXQuc3RyaWRlSGVpZ2h0LG89dC5zdHJpZGVXaWR0aCxhPWUtMS10LnBhZEluZm8udG9wLGk9bi0xLXQucGFkSW5mby5sZWZ0LHM9dC5vdXRDaGFubmVscy90LmluQ2hhbm5lbHM7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIithK1wiLCBcIitpK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkMSA9IGNvb3Jkc1szXTtcXG4gICAgICAgIGl2ZWMyIGR5Q29ybmVyID0gY29vcmRzLnl6IC0gcGFkcztcXG4gICAgICAgIGludCBkeVJDb3JuZXIgPSBkeUNvcm5lci54O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5Q29ybmVyLnk7XFxuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK2UrXCI7IHdSKyspIHtcXG4gICAgICAgICAgZmxvYXQgZHlSID0gZmxvYXQoZHlSQ29ybmVyICsgd1IpIC8gXCIrcitcIi4wO1xcblxcbiAgICAgICAgICBpZiAoZHlSIDwgMC4wIHx8IGR5UiA+PSBcIit0Lm91dEhlaWdodCtcIi4wIHx8IGZyYWN0KGR5UikgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5UiA9IGludChkeVIpO1xcblxcbiAgICAgICAgICBpbnQgd1JQZXJtID0gXCIrZStcIiAtIDEgLSB3UjtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK24rXCI7IHdDKyspIHtcXG4gICAgICAgICAgICBmbG9hdCBkeUMgPSBmbG9hdChkeUNDb3JuZXIgKyB3QykgLyBcIitvK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgIGZyYWN0KGR5QykgPiAwLjApIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnQgaWR5QyA9IGludChkeUMpO1xcblxcbiAgICAgICAgICAgIGludCB3Q1Blcm0gPSBcIituK1wiIC0gMSAtIHdDO1xcblxcbiAgICAgICAgICAgIC8vIFRPIERPOiBWZWM0IG92ZXIgdGhlIGNoYW5uZWxNdWxcXG4gICAgICAgICAgICBmb3IgKGludCBkbSA9IDA7IGRtIDwgXCIrcytcIjsgZG0rKykge1xcbiAgICAgICAgICAgICAgaW50IGQyID0gZDEgKiBcIitzK1wiICsgZG07XFxuICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXREeShiYXRjaCwgaWR5UiwgaWR5QywgZDIpO1xcbiAgICAgICAgICAgICAgZmxvYXQgd1ZhbHVlID0gZ2V0Vyh3UlBlcm0sIHdDUGVybSwgZDEsIGRtKTtcXG4gICAgICAgICAgICAgIGRvdFByb2QgKz0geFZhbHVlICogd1ZhbHVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9LFFhPWZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PWUmJihlPSExKSx2b2lkIDA9PT1uJiYobj1udWxsKSx2b2lkIDA9PT1yJiYocj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIldcIl0sdGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO3ZhciBvPXQucGFkSW5mby50b3AsYT10LnBhZEluZm8ubGVmdCxpPXQuc3RyaWRlSGVpZ2h0LHM9dC5zdHJpZGVXaWR0aCx1PXQuZGlsYXRpb25IZWlnaHQsYz10LmRpbGF0aW9uV2lkdGgsbD10LmZpbHRlckhlaWdodCxoPXQuZmlsdGVyV2lkdGgsZj00Kk1hdGguZmxvb3IodC5pbkNoYW5uZWxzLzQpLGQ9dC5pbkNoYW5uZWxzJTQscD1cImNoYW5uZWxzTGFzdFwiPT09dC5kYXRhRm9ybWF0LHY9cD8xOjIsbT1wPzI6MyxnPXA/MzoxLHk9XCJcIix4PVwiXCI7biYmKHk9cj9cImZsb2F0IGFjdGl2YXRpb24oZmxvYXQgYSkge1xcbiAgICAgICAgICBmbG9hdCBiID0gZ2V0UHJlbHVBY3RpdmF0aW9uV2VpZ2h0c0F0T3V0Q29vcmRzKCk7XFxuICAgICAgICAgIFwiK24rXCJcXG4gICAgICAgIH1cIjpcIlxcbiAgICAgICAgICBmbG9hdCBhY3RpdmF0aW9uKGZsb2F0IHgpIHtcXG4gICAgICAgICAgICBcIituK1wiXFxuICAgICAgICAgIH1cXG4gICAgICAgIFwiLHg9XCJyZXN1bHQgPSBhY3RpdmF0aW9uKHJlc3VsdCk7XCIpO3ZhciBiPWU/XCJyZXN1bHQgKz0gZ2V0Qmlhc0F0T3V0Q29vcmRzKCk7XCI6XCJcIjtlJiZ0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcImJpYXNcIiksciYmdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJwcmVsdUFjdGl2YXRpb25XZWlnaHRzXCIpLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBcIit5K1wiXFxuXFxuICAgICAgY29uc3QgaXZlYzIgc3RyaWRlcyA9IGl2ZWMyKFwiK2krXCIsIFwiK3MrXCIpO1xcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitvK1wiLCBcIithK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkMiA9IGNvb3Jkc1tcIitnK1wiXTtcXG5cXG4gICAgICAgIGl2ZWMyIHhSQ0Nvcm5lciA9XFxuICAgICAgICAgICAgaXZlYzIoY29vcmRzW1wiK3YrXCJdLCBjb29yZHNbXCIrbStcIl0pICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICBpbnQgeFJDb3JuZXIgPSB4UkNDb3JuZXIueDtcXG4gICAgICAgIGludCB4Q0Nvcm5lciA9IHhSQ0Nvcm5lci55O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgeCg/LCA/LCBkMSkgd2l0aCB3KDosIDosIGQxLCBkMikgdG8gZ2V0IHkoeVIsIHlDLCBkMikuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrbCtcIjsgd1IrKykge1xcbiAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSICogXCIrdStcIjtcXG5cXG4gICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK2grXCI7IHdDKyspIHtcXG4gICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDICogXCIrYytcIjtcXG5cXG4gICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IGQxID0gMDsgZDEgPCBcIitmK1wiOyBkMSArPSA0KSB7XFxuICAgICAgICAgICAgICB2ZWM0IHdWYWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgZDEsIGQyKSxcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIGQxICsgMSwgZDIpLFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgZDEgKyAyLCBkMiksXFxuICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBkMSArIDMsIGQyKVxcbiAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgIGlmIChcIitwK1wiKSB7XFxuICAgICAgICAgICAgICAgIHZlYzQgeFZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBkMSksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBkMSArIDEpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgZDEgKyAyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxICsgMylcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICB2ZWM0IHhWYWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIGQxLCB4UiwgeEMpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIGQxICsgMSwgeFIsIHhDKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBkMSArIDIsIHhSLCB4QyksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgZDEgKyAzLCB4UiwgeEMpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAoXCIrKDE9PT1kKStcIikge1xcblxcbiAgICAgICAgICAgICAgaWYgKFwiK3ArXCIpIHtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPVxcbiAgICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBcIitmK1wiKSAqXFxuICAgICAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrZitcIiwgZDIpO1xcbiAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPVxcbiAgICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgXCIrZitcIiwgeFIsIHhDKSAqXFxuICAgICAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrZitcIiwgZDIpO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCIrKDI9PT1kKStcIikge1xcbiAgICAgICAgICAgICAgdmVjMiB3VmFsdWVzID0gdmVjMihcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIFwiK2YrXCIsIGQyKSxcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIFwiK2YrXCIgKyAxLCBkMilcXG4gICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrcCtcIikge1xcbiAgICAgICAgICAgICAgICB2ZWMyIHhWYWx1ZXMgPSB2ZWMyKFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgXCIrZitcIiksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBcIitmK1wiICsgMSlcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICB2ZWMyIHhWYWx1ZXMgPSB2ZWMyKFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIFwiK2YrXCIsIHhSLCB4QyksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgXCIrZitcIiArIDEsIHhSLCB4QylcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChcIisoMz09PWQpK1wiKSB7XFxuICAgICAgICAgICAgICB2ZWMzIHdWYWx1ZXMgPSB2ZWMzKFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrZitcIiwgZDIpLFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrZitcIiArIDEsIGQyKSxcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIFwiK2YrXCIgKyAyLCBkMilcXG4gICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrcCtcIikge1xcbiAgICAgICAgICAgICAgICB2ZWMzIHhWYWx1ZXMgPSB2ZWMzKFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgXCIrZitcIiksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBcIitmK1wiICsgMSksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBcIitmK1wiICsgMilcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICB2ZWMzIHhWYWx1ZXMgPSB2ZWMzKFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIFwiK2YrXCIsIHhSLCB4QyksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgXCIrZitcIiArIDEsIHhSLCB4QyksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgXCIrZitcIiArIDIsIHhSLCB4QylcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBmbG9hdCByZXN1bHQgPSBkb3RQcm9kO1xcbiAgICAgICAgXCIrYitcIlxcbiAgICAgICAgXCIreCtcIlxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn0sSmE9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIldcIl0sdGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO3ZhciBlPXQucGFkSW5mby5mcm9udCxuPXQucGFkSW5mby50b3Ascj10LnBhZEluZm8ubGVmdCxvPXQuc3RyaWRlRGVwdGgsYT10LnN0cmlkZUhlaWdodCxpPXQuc3RyaWRlV2lkdGgscz10LmRpbGF0aW9uRGVwdGgsdT10LmRpbGF0aW9uSGVpZ2h0LGM9dC5kaWxhdGlvbldpZHRoLGw9dC5maWx0ZXJEZXB0aCxoPXQuZmlsdGVySGVpZ2h0LGY9dC5maWx0ZXJXaWR0aCxkPTQqTWF0aC5mbG9vcih0LmluQ2hhbm5lbHMvNCkscD10LmluQ2hhbm5lbHMlNDt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzMgc3RyaWRlcyA9IGl2ZWMzKFwiK28rXCIsIFwiK2ErXCIsIFwiK2krXCIpO1xcbiAgICAgIGNvbnN0IGl2ZWMzIHBhZHMgPSBpdmVjMyhcIitlK1wiLCBcIituK1wiLCBcIityK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNSBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IGQyID0gY29vcmRzLnU7XFxuXFxuICAgICAgICBpdmVjMyB4RlJDQ29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgKiBzdHJpZGVzIC0gcGFkcztcXG4gICAgICAgIGludCB4RkNvcm5lciA9IHhGUkNDb3JuZXIueDtcXG4gICAgICAgIGludCB4UkNvcm5lciA9IHhGUkNDb3JuZXIueTtcXG4gICAgICAgIGludCB4Q0Nvcm5lciA9IHhGUkNDb3JuZXIuejtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIHgoPywgPywgPywgZDEpIHdpdGggdyg6LCA6LCA6LCBkMSwgZDIpIHRvIGdldFxcbiAgICAgICAgLy8geSh5RiwgeVIsIHlDLCBkMikuID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbFxcbiAgICAgICAgLy8gdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3RiA9IDA7IHdGIDwgXCIrbCtcIjsgd0YrKykge1xcbiAgICAgICAgICBpbnQgeEYgPSB4RkNvcm5lciArIHdGICogXCIrcytcIjtcXG5cXG4gICAgICAgICAgaWYgKHhGIDwgMCB8fCB4RiA+PSBcIit0LmluRGVwdGgrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIraCtcIjsgd1IrKykge1xcbiAgICAgICAgICAgIGludCB4UiA9IHhSQ29ybmVyICsgd1IgKiBcIit1K1wiO1xcblxcbiAgICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrdC5pbkhlaWdodCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIitmK1wiOyB3QysrKSB7XFxuICAgICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDICogXCIrYytcIjtcXG5cXG4gICAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgZm9yIChpbnQgZDEgPSAwOyBkMSA8IFwiK2QrXCI7IGQxICs9IDQpIHtcXG4gICAgICAgICAgICAgICAgdmVjNCB4VmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBkMSksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgZDEgKyAxKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBkMSArIDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIGQxICsgMylcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgdmVjNCB3VmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIGQxLCBkMiksXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBkMSArIDEsIGQyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIGQxICsgMiwgZDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgZDEgKyAzLCBkMilcXG4gICAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrKDE9PT1wKStcIikge1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9XFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZCtcIikgKlxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgXCIrZCtcIiwgZDIpO1xcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChcIisoMj09PXApK1wiKSB7XFxuICAgICAgICAgICAgICAgIHZlYzIgeFZhbHVlcyA9IHZlYzIoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZCtcIiksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZCtcIiArIDEpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIHZlYzIgd1ZhbHVlcyA9IHZlYzIoXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBcIitkK1wiLCBkMiksXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBcIitkK1wiICsgMSwgZDIpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChcIisoMz09PXApK1wiKSB7XFxuICAgICAgICAgICAgICAgIHZlYzMgeFZhbHVlcyA9IHZlYzMoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZCtcIiksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZCtcIiArIDEpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIFwiK2QrXCIgKyAyKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICB2ZWMzIHdWYWx1ZXMgPSB2ZWMzKFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgXCIrZCtcIiwgZDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgXCIrZCtcIiArIDEsIGQyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIFwiK2QrXCIgKyAyLCBkMilcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn0sWmE9ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ZSYmKGU9ITEpLHZvaWQgMD09PW4mJihuPW51bGwpLHZvaWQgMD09PXImJihyPSExKSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwiV1wiXSx0aGlzLm91dHB1dFNoYXBlPXQub3V0U2hhcGU7dmFyIG89dC5pbkhlaWdodCxhPXQuaW5XaWR0aCxpPXQucGFkSW5mby50b3Ascz10LnBhZEluZm8ubGVmdCx1PXQuc3RyaWRlSGVpZ2h0LGM9dC5zdHJpZGVXaWR0aCxsPXQuZGlsYXRpb25IZWlnaHQsaD10LmRpbGF0aW9uV2lkdGgsZj10LmZpbHRlckhlaWdodCxkPXQuZmlsdGVyV2lkdGgscD10Lm91dENoYW5uZWxzL3QuaW5DaGFubmVscyx2PVwiXCIsbT1cIlwiO24mJih2PXI/XCJmbG9hdCBhY3RpdmF0aW9uKGZsb2F0IGEpIHtcXG4gICAgICAgICAgZmxvYXQgYiA9IGdldFByZWx1QWN0aXZhdGlvbldlaWdodHNBdE91dENvb3JkcygpO1xcbiAgICAgICAgICBcIituK1wiXFxuICAgICAgICB9XCI6XCJcXG4gICAgICAgICAgZmxvYXQgYWN0aXZhdGlvbihmbG9hdCB4KSB7XFxuICAgICAgICAgICAgXCIrbitcIlxcbiAgICAgICAgICB9XFxuICAgICAgICBcIixtPVwicmVzdWx0ID0gYWN0aXZhdGlvbihyZXN1bHQpO1wiKTt2YXIgZz1lP1wicmVzdWx0ICs9IGdldEJpYXNBdE91dENvb3JkcygpO1wiOlwiXCI7ZSYmdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJiaWFzXCIpLHImJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwicHJlbHVBY3RpdmF0aW9uV2VpZ2h0c1wiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrditcIlxcblxcbiAgICAgIGNvbnN0IGl2ZWMyIHN0cmlkZXMgPSBpdmVjMihcIit1K1wiLCBcIitjK1wiKTtcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIraStcIiwgXCIrcytcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgIGl2ZWMyIHhSQ0Nvcm5lciA9IGNvb3Jkcy55eiAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgaW50IGQyID0gY29vcmRzLnc7XFxuICAgICAgICBpbnQgZDEgPSBkMiAvIFwiK3ArXCI7XFxuICAgICAgICBpbnQgcSA9IGQyIC0gZDEgKiBcIitwK1wiO1xcblxcbiAgICAgICAgaW50IHhSQ29ybmVyID0geFJDQ29ybmVyLng7XFxuICAgICAgICBpbnQgeENDb3JuZXIgPSB4UkNDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIHgoPywgPywgZDEpIHdpdGggdyg6LCA6LCBkMSwgcSkgdG8gZ2V0IHkoeVIsIHlDLCBkMikuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICAvLyBUTyBETyhkc21pbGtvdik6IEZsYXR0ZW4gdGhlIHR3byBmb3IgbG9vcHMgYW5kIHZlYzQgdGhlIG9wZXJhdGlvbnMuXFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrZitcIjsgd1IrKykge1xcbiAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSICogXCIrbCtcIjtcXG5cXG4gICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIitvK1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK2QrXCI7IHdDKyspIHtcXG4gICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDICogXCIraCtcIjtcXG5cXG4gICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmbG9hdCB4VmFsID0gZ2V0WChiYXRjaCwgeFIsIHhDLCBkMSk7XFxuICAgICAgICAgICAgZmxvYXQgd1ZhbCA9IGdldFcod1IsIHdDLCBkMSwgcSk7XFxuICAgICAgICAgICAgZG90UHJvZCArPSB4VmFsICogd1ZhbDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgZmxvYXQgcmVzdWx0ID0gZG90UHJvZDtcXG4gICAgICAgIFwiK2crXCJcXG4gICAgICAgIFwiK20rXCJcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LHRpPWZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PWUmJihlPSExKSx2b2lkIDA9PT1uJiYobj1udWxsKSx2b2lkIDA9PT1yJiYocj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIldcIl0sdGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITAsdGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO2Zvcih2YXIgbz10LmluSGVpZ2h0LGE9dC5pbldpZHRoLGk9dC5wYWRJbmZvLnRvcCxzPXQucGFkSW5mby5sZWZ0LHU9dC5zdHJpZGVIZWlnaHQsYz10LnN0cmlkZVdpZHRoLGw9dC5kaWxhdGlvbkhlaWdodCxoPXQuZGlsYXRpb25XaWR0aCxmPXQuZmlsdGVySGVpZ2h0LGQ9dC5maWx0ZXJXaWR0aCxwPWQsdj1cImludCB4UjsgaW50IHhDOyBpbnQgeENPZmZzZXQ7XCIsbT0wO208ZjttKyspZm9yKHZhciBnPTA7ZzxkO2crKyl2Kz1cIlxcbiAgICAgICAgICB2ZWM0IHhUZXhlbFJcIittK1wiQ1wiKzIqZytcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICB2ZWM0IHdSXCIrbStcIkNcIitnK1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgIHZlYzQgeFJcIittK1wiQ1wiK2crXCIgPSB2ZWM0KDAuKTtcIjtmb3IobT0wO208ZjttKyspZm9yKHZhciB5PTA7eTxwO3krKyl7aWYodis9XCJcXG4gICAgICAgICAgeFIgPSB4UkNvcm5lciArIFwiK20qbCtcIjtcXG4gICAgICAgICAgeEMgPSB4Q0Nvcm5lciArIFwiKyhnPTIqeSkqaCtcIjtcXG4gICAgICAgIFwiLDE9PT1jKXtpZihnPGQmJih2Kz1zJTI9PTE/XCJcXG4gICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIDE7XFxuICAgICAgICAgICAgICAgIGlmKHhSID49IDAgJiYgeFIgPCBcIitvK1wiICYmIHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK20rXCJDXCIrZytcIiA9IGdldFgoYmF0Y2gsIHhSLCB4Q09mZnNldCwgZDEpO1xcblxcbiAgICAgICAgICAgICAgICAgIC8vIE5lZWQgdG8gbWFudWFsbHkgY2xlYXIgdW51c2VkIGNoYW5uZWxzIGluIGNhc2VcXG4gICAgICAgICAgICAgICAgICAvLyB3ZSdyZSByZWFkaW5nIGZyb20gcmVjeWNsZWQgdGV4dHVyZS5cXG4gICAgICAgICAgICAgICAgICBpZih4Q09mZnNldCArIDEgPj0gXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK20rXCJDXCIrZytcIi56dyA9IHZlYzIoMC4pO1xcbiAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIDEgLSAyO1xcbiAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJiB4Q09mZnNldCA+PSAwICYmIHhDT2Zmc2V0IDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgIHZlYzQgcHJldmlvdXMgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG5cXG4gICAgICAgICAgICAgICAgICAvLyBOZWVkIHRvIG1hbnVhbGx5IGNsZWFyIHVudXNlZCBjaGFubmVscyBpbiBjYXNlXFxuICAgICAgICAgICAgICAgICAgLy8gd2UncmUgcmVhZGluZyBmcm9tIHJlY3ljbGVkIHRleHR1cmUuXFxuICAgICAgICAgICAgICAgICAgaWYoeENPZmZzZXQgKyAxID49IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzLnp3ID0gdmVjMigwLik7XFxuICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgIHhSXCIrbStcIkNcIitnK1wiID0gdmVjNChwcmV2aW91cy56dywgeFRleGVsUlwiK20rXCJDXCIrZytcIi54eSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgeFJcIittK1wiQ1wiK2crXCIgPSB2ZWM0KDAsIDAsIHhUZXhlbFJcIittK1wiQ1wiK2crXCIueHkpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICBcIjpcIlxcbiAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJiB4QyA+PSAwICYmIHhDIDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiK2crXCIgPSBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgeFJcIittK1wiQ1wiK2crXCIgPSB4VGV4ZWxSXCIrbStcIkNcIitnK1wiO1xcbiAgICAgICAgICAgICAgXCIsZysxPGQpKXt2YXIgeD1zJTI9PTA/YihoKTpoO2glMj09MCYmcyUyPT0xfHxoJTIhPTAmJnMlMiE9MT8odis9XCJcXG4gICAgICAgICAgICAgICAgICB4Q09mZnNldCA9IHhDICsgXCIrcyUyK1wiICsgXCIreCtcIjtcXG5cXG4gICAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJlxcbiAgICAgICAgICAgICAgICAgICAgeENPZmZzZXQgPj0gMCAmJiB4Q09mZnNldCA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiKyhnKzIpK1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBcIixoPjEmJih2Kz1cIlxcbiAgICAgICAgICAgICAgICAgICAgeENPZmZzZXQgLT0gMjtcXG4gICAgICAgICAgICAgICAgICAgIGlmKHhSID49IDAgJiYgeFIgPCBcIitvK1wiICYmXFxuICAgICAgICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiK2crXCIgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiK2crXCIgPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICBcIiksdis9XCJcXG4gICAgICAgICAgICAgICAgICB4UlwiK20rXCJDXCIrKGcrMSkrXCIgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK20rXCJDXCIrZytcIi56dywgeFRleGVsUlwiK20rXCJDXCIrKGcrMikrXCIueHkpO1xcbiAgICAgICAgICAgICAgICBcIik6dis9XCJcXG4gICAgICAgICAgICAgICAgICB4Q09mZnNldCA9IHhDICsgXCIreCtcIjtcXG5cXG4gICAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJlxcbiAgICAgICAgICAgICAgICAgICAgeENPZmZzZXQgPj0gMCAmJiB4Q09mZnNldCA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiKyhnKzIpK1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgIHhSXCIrbStcIkNcIisoZysxKStcIiA9IHhUZXhlbFJcIittK1wiQ1wiKyhnKzIpK1wiO1xcbiAgICAgICAgICAgICAgICBcIn19ZWxzZSBnPGQmJih2Kz1cIlxcbiAgICAgICAgICAgICAgaWYoeFIgPj0gMCAmJiB4UiA8IFwiK28rXCIpIHtcXG4gICAgICAgICAgICBcIixzJTI9PTE/KHYrPVwiXFxuICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID0geEMgKyAxIC0gXCIrYytcIjtcXG4gICAgICAgICAgICAgICAgaWYoeENPZmZzZXQgPj0gMCAmJiB4Q09mZnNldCA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK20rXCJDXCIrZytcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmKHhDICsgMSA+PSAwICYmIHhDICsgMSA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIiA9IGdldFgoYmF0Y2gsIHhSLCB4QyArIDEsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHhSXCIrbStcIkNcIitnK1wiID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiLnp3LCB4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIi56dyk7XFxuICAgICAgICAgICAgICBcIixnKzE8ZCYmKHYrPVwiXFxuICAgICAgICAgICAgICAgICAgdmVjNCBmaW5hbCA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID0geEMgKyAxICsgXCIrYytcIjtcXG4gICAgICAgICAgICAgICAgICBpZih4Q09mZnNldCA+PSAwICYmIHhDT2Zmc2V0IDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgICAgZmluYWwgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgeFJcIittK1wiQ1wiKyhnKzEpK1wiID0gdmVjNCh4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIi54eSwgZmluYWwueHkpO1xcbiAgICAgICAgICAgICAgICBcIikpOih2Kz1cIlxcbiAgICAgICAgICAgICAgICBpZih4QyA+PSAwICYmIHhDIDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiK2crXCIgPSBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIFwiK2MrXCI7XFxuICAgICAgICAgICAgICAgIGlmKHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK20rXCJDXCIrKGcrMikrXCIgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHhSXCIrbStcIkNcIitnK1wiID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrbStcIkNcIitnK1wiLnh5LCB4VGV4ZWxSXCIrbStcIkNcIisoZysyKStcIi54eSk7XFxuICAgICAgICAgICAgICBcIixnKzE8ZCYmKHYrPVwiXFxuICAgICAgICAgICAgICAgICAgeFJcIittK1wiQ1wiKyhnKzEpK1wiID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIittK1wiQ1wiK2crXCIuencsIHhUZXhlbFJcIittK1wiQ1wiKyhnKzIpK1wiLnp3KTtcXG4gICAgICAgICAgICAgICAgXCIpKSx2Kz1cIn1cIik7ZzxkJiYodis9XCJcXG4gICAgICAgICAgICB2ZWM0IHdUZXhlbFJcIittK1wiQ1wiK2crXCIgPSBnZXRXKFwiK20rXCIsIFwiK2crXCIsIGQxLCBxKTtcXG4gICAgICAgICAgICB3UlwiK20rXCJDXCIrZytcIiA9IHZlYzQod1RleGVsUlwiK20rXCJDXCIrZytcIi54eiwgd1RleGVsUlwiK20rXCJDXCIrZytcIi54eik7XFxuICAgICAgICAgIFwiLGcrMTxkJiYodis9XCJcXG4gICAgICAgICAgICAgIHZlYzQgd1RleGVsUlwiK20rXCJDXCIrKGcrMSkrXCIgPSBnZXRXKFwiK20rXCIsIFwiKyhnKzEpK1wiLCBkMSwgcSk7XFxuICAgICAgICAgICAgICB3UlwiK20rXCJDXCIrKGcrMSkrXCIgPVxcbiAgICAgICAgICAgICAgICB2ZWM0KHdUZXhlbFJcIittK1wiQ1wiKyhnKzEpK1wiLnh6LCB3VGV4ZWxSXCIrbStcIkNcIisoZysxKStcIi54eik7XCIpKX1mb3IobT0wO208ZjttKyspZm9yKGc9MDtnPGQ7ZysrKXYrPVwiZG90UHJvZCArPSB4UlwiK20rXCJDXCIrZytcIiAqIHdSXCIrbStcIkNcIitnK1wiO1wiO3ZhciB3PVwiXCIsQz1cIlwiO24mJih3PXI/XCJ2ZWM0IGFjdGl2YXRpb24odmVjNCBhKSB7XFxuICAgICAgICAgIHZlYzQgYiA9IGdldFByZWx1QWN0aXZhdGlvbldlaWdodHNBdE91dENvb3JkcygpO1xcbiAgICAgICAgICBcIituK1wiXFxuICAgICAgICB9XCI6XCJ2ZWM0IGFjdGl2YXRpb24odmVjNCB4KSB7XFxuICAgICAgICAgIFwiK24rXCJcXG4gICAgICAgIH1cIixDPVwicmVzdWx0ID0gYWN0aXZhdGlvbihyZXN1bHQpO1wiKTt2YXIgRT1lP1wicmVzdWx0ICs9IGdldEJpYXNBdE91dENvb3JkcygpO1wiOlwiXCI7ZSYmdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJiaWFzXCIpLHImJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwicHJlbHVBY3RpdmF0aW9uV2VpZ2h0c1wiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrdytcIlxcblxcbiAgICAgIGNvbnN0IGl2ZWMyIHN0cmlkZXMgPSBpdmVjMihcIit1K1wiLCBcIitjK1wiKTtcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIraStcIiwgXCIrcytcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcblxcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgIGl2ZWMyIHhSQ0Nvcm5lciA9IGNvb3Jkcy55eiAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgaW50IGQyID0gY29vcmRzLnc7XFxuICAgICAgICBpbnQgZDEgPSBkMjtcXG4gICAgICAgIGludCBxID0gMDtcXG4gICAgICAgIGludCB4UkNvcm5lciA9IHhSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IHhDQ29ybmVyID0geFJDQ29ybmVyLnk7XFxuXFxuICAgICAgICB2ZWM0IGRvdFByb2QgPSB2ZWM0KDAuKTtcXG5cXG4gICAgICAgIFwiK3YrXCJcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gZG90UHJvZDtcXG4gICAgICAgIFwiK0UrXCJcXG4gICAgICAgIFwiK0MrXCJcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LGVpPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkltYWdlXCIsXCJCb3hlc1wiLFwiQm94SW5kXCJdLHRoaXMub3V0cHV0U2hhcGU9W107dmFyIGE9dFswXSxpPXRbMV0scz10WzJdLHU9dFszXSxjPWVbMF0sbD1uWzBdLGg9blsxXTt0aGlzLm91dHB1dFNoYXBlPVtjLGwsaCx1XTt2YXIgZj1cImJpbGluZWFyXCI9PT1yPzE6MCxkPVtpLTErXCIuMFwiLHMtMStcIi4wXCJdLHA9ZFswXSx2PWRbMV0sbT1sPjE/W1wiXCIrKGktMSkvKGwtMSksXCIoeTIteTEpICogaGVpZ2h0X3JhdGlvXCIsXCJ5MSpcIitwK1wiICsgZmxvYXQoeSkqKGhlaWdodF9zY2FsZSlcIl06W1wiMC4wXCIsXCIwLjBcIixcIjAuNSAqICh5MSt5MikgKiBcIitwXSxnPW1bMF0seT1tWzFdLHg9bVsyXSxiPWg+MT9bXCJcIisocy0xKS8oaC0xKSxcIih4Mi14MSkgKiB3aWR0aF9yYXRpb1wiLFwieDEqXCIrditcIiArIGZsb2F0KHgpKih3aWR0aF9zY2FsZSlcIl06W1wiMC4wXCIsXCIwLjBcIixcIjAuNSAqICh4MSt4MikgKiBcIit2XSx3PWJbMF0sQz1iWzFdLEU9YlsyXTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgZmxvYXQgaGVpZ2h0X3JhdGlvID0gZmxvYXQoXCIrZytcIik7XFxuICAgICAgY29uc3QgZmxvYXQgd2lkdGhfcmF0aW8gPSBmbG9hdChcIit3K1wiKTtcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IHkgPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgeCA9IGNvb3Jkc1syXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgLy8gZ2V0IGJveCB2YWxzXFxuICAgICAgICBmbG9hdCB5MSA9IGdldEJveGVzKGIsMCk7XFxuICAgICAgICBmbG9hdCB4MSA9IGdldEJveGVzKGIsMSk7XFxuICAgICAgICBmbG9hdCB5MiA9IGdldEJveGVzKGIsMik7XFxuICAgICAgICBmbG9hdCB4MiA9IGdldEJveGVzKGIsMyk7XFxuXFxuICAgICAgICAvLyBnZXQgaW1hZ2UgaW4gYmF0Y2ggaW5kZXhcXG4gICAgICAgIGludCBiSW5kID0gcm91bmQoZ2V0Qm94SW5kKGIpKTtcXG4gICAgICAgIGlmKGJJbmQgPCAwIHx8IGJJbmQgPj0gXCIrYStcIikge1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICBmbG9hdCBoZWlnaHRfc2NhbGUgPSBcIit5K1wiO1xcbiAgICAgICAgZmxvYXQgd2lkdGhfc2NhbGUgPSBcIitDK1wiO1xcblxcbiAgICAgICAgZmxvYXQgaW5feSA9IFwiK3grXCI7XFxuICAgICAgICBpZiggaW5feSA8IDAuMCB8fCBpbl95ID4gXCIrcCtcIiApIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KFwiK28rXCIpKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcbiAgICAgICAgZmxvYXQgaW5feCA9IFwiK0UrXCI7XFxuICAgICAgICBpZiggaW5feCA8IDAuMCB8fCBpbl94ID4gXCIrditcIiApIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KFwiK28rXCIpKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgdmVjMiBzb3VyY2VGcmFjSW5kZXhDUiA9IHZlYzIoaW5feCxpbl95KTtcXG4gICAgICAgIGlmKFwiK2YrXCIgPT0gMSkge1xcbiAgICAgICAgICAvLyBDb21wdXRlIHRoZSBmb3VyIGludGVnZXIgaW5kaWNlcy5cXG4gICAgICAgICAgaXZlYzIgc291cmNlRmxvb3JDUiA9IGl2ZWMyKHNvdXJjZUZyYWNJbmRleENSKTtcXG4gICAgICAgICAgaXZlYzIgc291cmNlQ2VpbENSID0gaXZlYzIoY2VpbChzb3VyY2VGcmFjSW5kZXhDUikpO1xcblxcbiAgICAgICAgICBmbG9hdCB0b3BMZWZ0ID0gZ2V0SW1hZ2UoYiwgc291cmNlRmxvb3JDUi55LCBzb3VyY2VGbG9vckNSLngsIGQpO1xcbiAgICAgICAgICBmbG9hdCBib3R0b21MZWZ0ID0gZ2V0SW1hZ2UoYiwgc291cmNlQ2VpbENSLnksIHNvdXJjZUZsb29yQ1IueCwgZCk7XFxuICAgICAgICAgIGZsb2F0IHRvcFJpZ2h0ID0gZ2V0SW1hZ2UoYiwgc291cmNlRmxvb3JDUi55LCBzb3VyY2VDZWlsQ1IueCwgZCk7XFxuICAgICAgICAgIGZsb2F0IGJvdHRvbVJpZ2h0ID0gZ2V0SW1hZ2UoYiwgc291cmNlQ2VpbENSLnksIHNvdXJjZUNlaWxDUi54LCBkKTtcXG5cXG4gICAgICAgICAgdmVjMiBmcmFjQ1IgPSBzb3VyY2VGcmFjSW5kZXhDUiAtIHZlYzIoc291cmNlRmxvb3JDUik7XFxuXFxuICAgICAgICAgIGZsb2F0IHRvcCA9IHRvcExlZnQgKyAodG9wUmlnaHQgLSB0b3BMZWZ0KSAqIGZyYWNDUi54O1xcbiAgICAgICAgICBmbG9hdCBib3R0b20gPSBib3R0b21MZWZ0ICsgKGJvdHRvbVJpZ2h0IC0gYm90dG9tTGVmdCkgKiBmcmFjQ1IueDtcXG4gICAgICAgICAgZmxvYXQgbmV3VmFsdWUgPSB0b3AgKyAoYm90dG9tIC0gdG9wKSAqIGZyYWNDUi55O1xcbiAgICAgICAgICBzZXRPdXRwdXQobmV3VmFsdWUpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgY29vcmRpbmF0b3JzIG9mIG5lYXJlc3QgbmVpZ2hib3IgcG9pbnQuXFxuICAgICAgICAgIGl2ZWMyIHNvdXJjZU5lYXJlc3RDUiA9IGl2ZWMyKGZsb29yKFxcbiAgICAgICAgICAgIHNvdXJjZUZyYWNJbmRleENSICsgdmVjMigwLjUsMC41KSkpO1xcbiAgICAgICAgICBmbG9hdCBuZXdWYWx1ZSA9IGdldEltYWdlKGIsIHNvdXJjZU5lYXJlc3RDUi55LCBzb3VyY2VOZWFyZXN0Q1IueCwgZCk7XFxuICAgICAgICAgIHNldE91dHB1dChuZXdWYWx1ZSk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICBcIn0sbmk9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9dDt2YXIgcj10Lmxlbmd0aCxvPXRbdC5sZW5ndGgtMV0sYT1uP1wiPFwiOlwiPlwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBpbnQgZ2V0SW5kZXgoaW50IGkpIHtcXG4gICAgICAgIFwiKyhuP1wicmV0dXJuIFwiK28rXCIgLWkgLSAxO1wiOlwicmV0dXJuIGk7XCIpK1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK3dhKHIpK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGVuZCA9IFwiK3JpKHIsXCJjb29yZHNcIikrXCI7XFxuICAgICAgICBmbG9hdCB2YWwgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCBpID0gXCIrbytcIiAtIDE7IGkgPj0gMDsgaSAtPSAxKSB7XFxuICAgICAgICAgIGludCBpZHggPSBnZXRJbmRleChpKTtcXG4gICAgICAgICAgaWYgKGlkeCBcIithK1wiIGVuZCkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIGlmIChpZHggPT0gZW5kICYmIFwiK2UrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBcIityaShyLFwiY29vcmRzXCIpK1wiID0gaWR4O1xcbiAgICAgICAgICB2YWwgKz0gZ2V0WChcIitmdW5jdGlvbih0LGUpe2lmKDE9PT10KXJldHVyblwiXCIrZTtpZigyPT09dClyZXR1cm4gZStcIi54LCBcIitlK1wiLnlcIjtpZigzPT09dClyZXR1cm4gZStcIi54LCBcIitlK1wiLnksIFwiK2UrXCIuelwiO2lmKDQ9PT10KXJldHVybiBlK1wiLngsIFwiK2UrXCIueSwgXCIrZStcIi56LCBcIitlK1wiLndcIjt0aHJvdyBFcnJvcihcIkN1bXVsYXRpdmUgc3VtIGZvciByYW5rIFwiK3QrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9KHIsXCJjb29yZHNcIikrXCIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KHZhbCk7XFxuICAgICAgfVxcbiAgICBcIn07ZnVuY3Rpb24gcmkodCxlKXtpZigxPT09dClyZXR1cm5cIlwiK2U7aWYoMj09PXQpcmV0dXJuIGUrXCIueVwiO2lmKDM9PT10KXJldHVybiBlK1wiLnpcIjtpZig0PT09dClyZXR1cm4gZStcIi53XCI7dGhyb3cgRXJyb3IoXCJDdW11bGF0aXZlIHN1bSBmb3IgcmFuayBcIit0K1wiIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpfXZhciBvaT1mdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMSx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dFBhY2tpbmdTY2hlbWU9VnQuREVOU0U7dmFyIGU9WXQodCksbj11YSgpO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgaXZlYzMgb3V0Q29vcmRzRnJvbUZsYXRJbmRleChpbnQgaW5kZXgpIHtcXG4gICAgICAgIFwiK2NhKFtcInJcIixcImNcIixcImRcIl0sdCkrXCJcXG4gICAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqXFxuICAgICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgICAgaW50IGluZGV4ID0gNCAqIChyZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnkpO1xcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG5cXG4gICAgICAgIGZvciAoaW50IGk9MDsgaTw0OyBpKyspIHtcXG4gICAgICAgICAgaW50IGZsYXRJbmRleCA9IGluZGV4ICsgaTtcXG4gICAgICAgICAgaXZlYzMgcmMgPSBvdXRDb29yZHNGcm9tRmxhdEluZGV4KGZsYXRJbmRleCk7XFxuICAgICAgICAgIHJlc3VsdFtpXSA9IGdldEEocmMueCwgcmMueSwgcmMueik7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIituLm91dHB1dCtcIiA9IHJlc3VsdDtcXG4gICAgICB9XFxuICAgIFwifSxhaT1mdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dFBhY2tpbmdTY2hlbWU9VnQuREVOU0U7dmFyIGU9WXQodCksbj11YSgpO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgaXZlYzMgb3V0Q29vcmRzRnJvbUZsYXRJbmRleChpbnQgaW5kZXgpIHtcXG4gICAgICAgIFwiK2NhKFtcInJcIixcImNcIixcImRcIl0sdCkrXCJcXG4gICAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqXFxuICAgICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgICAgaW50IGluZGV4ID0gNCAqIChyZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnkpO1xcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG5cXG4gICAgICAgIGZvciAoaW50IGk9MDsgaTw0OyBpKyspIHtcXG4gICAgICAgICAgaW50IGZsYXRJbmRleCA9IGluZGV4ICsgaTtcXG4gICAgICAgICAgaXZlYzMgcmMgPSBvdXRDb29yZHNGcm9tRmxhdEluZGV4KGZsYXRJbmRleCk7XFxuICAgICAgICAgIHJlc3VsdFtpXSA9IGdldENoYW5uZWwoZ2V0QShyYy54LCByYy55LCByYy56KSwgdmVjMihyYy55LCByYy56KSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIituLm91dHB1dCtcIiA9IHJlc3VsdDtcXG4gICAgICB9XFxuICAgIFwifSxpaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMuYmxvY2tTaXplPWUsdGhpcy5kYXRhRm9ybWF0PW4sdGhpcy51c2VyQ29kZT1cIlxcbiAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgaW50IGggPSBcIit0aGlzLmdldEhlaWdodENvb3JkU3RyaW5nKCkrXCI7XFxuICAgICAgaW50IHcgPSBcIit0aGlzLmdldFdpZHRoQ29vcmRTdHJpbmcoKStcIjtcXG4gICAgICBpbnQgZCA9IFwiK3RoaXMuZ2V0RGVwdGhDb29yZFN0cmluZygpK1wiO1xcblxcbiAgICAgIGludCBpbl9oID0gaCAvIFwiK2UrXCI7XFxuICAgICAgaW50IG9mZnNldF9oID0gaW1vZChoLCBcIitlK1wiKTtcXG4gICAgICBpbnQgaW5fdyA9IHcgLyBcIitlK1wiO1xcbiAgICAgIGludCBvZmZzZXRfdyA9IGltb2QodywgXCIrZStcIik7XFxuICAgICAgaW50IG9mZnNldF9kID0gKG9mZnNldF9oICogXCIrZStcIiArIG9mZnNldF93KSAqXFxuICAgICAgICBcIit0aGlzLmdldE91dHB1dERlcHRoU2l6ZSgpK1wiO1xcbiAgICAgIGludCBpbl9kID0gZCArIG9mZnNldF9kO1xcblxcbiAgICAgIGZsb2F0IHJlc3VsdCA9IFwiK3RoaXMuZ2V0SW5wdXRTYW1wbGluZ1N0cmluZygpK1wiO1xcbiAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICB9XFxuICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0SGVpZ2h0Q29vcmRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIk5IV0NcIj09PXRoaXMuZGF0YUZvcm1hdD9cImNvb3Jkc1sxXVwiOlwiY29vcmRzWzJdXCJ9LHQucHJvdG90eXBlLmdldFdpZHRoQ29vcmRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIk5IV0NcIj09PXRoaXMuZGF0YUZvcm1hdD9cImNvb3Jkc1syXVwiOlwiY29vcmRzWzNdXCJ9LHQucHJvdG90eXBlLmdldERlcHRoQ29vcmRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIk5IV0NcIj09PXRoaXMuZGF0YUZvcm1hdD9cImNvb3Jkc1szXVwiOlwiY29vcmRzWzFdXCJ9LHQucHJvdG90eXBlLmdldE91dHB1dERlcHRoU2l6ZT1mdW5jdGlvbigpe3JldHVyblwiTkhXQ1wiPT09dGhpcy5kYXRhRm9ybWF0P3RoaXMub3V0cHV0U2hhcGVbM106dGhpcy5vdXRwdXRTaGFwZVsxXX0sdC5wcm90b3R5cGUuZ2V0SW5wdXRTYW1wbGluZ1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiTkhXQ1wiPT09dGhpcy5kYXRhRm9ybWF0P1wiZ2V0WChiLCBpbl9oLCBpbl93LCBpbl9kKVwiOlwiZ2V0WChiLCBpbl9kLCBpbl9oLCBpbl93KVwifSx0fSgpLHNpPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJYXCJdLHRoaXMub3V0cHV0U2hhcGU9W3QsdF0sdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGZsb2F0IHZhbCA9IGNvb3Jkc1swXSA9PSBjb29yZHNbMV0gPyBnZXRYKGNvb3Jkc1swXSkgOiAwLjA7XFxuICAgICAgICAgIHNldE91dHB1dCh2YWwpO1xcbiAgICAgIH1cXG4gICAgXCJ9LHVpPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0VGV4VXNhZ2U9enQuRE9XTkxPQUQ7dmFyIGU9dWEoKTt0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK2hhK1wiXFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgeCA9IGdldEFBdE91dENvb3JkcygpO1xcbiAgICAgICAgXCIrZS5vdXRwdXQrXCIgPSBlbmNvZGVfZmxvYXQoeCk7XFxuICAgICAgfVxcbiAgICBcIn0sY2k9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITEsdGhpcy5vdXRUZXhVc2FnZT16dC5ET1dOTE9BRDt2YXIgZT11YSgpO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIraGErXCJcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IHggPSBnZXRDaGFubmVsKGdldEFBdE91dENvb3JkcygpLCB2ZWMyKGNvb3Jkcy55LCBjb29yZHMueikpO1xcbiAgICAgICAgXCIrZS5vdXRwdXQrXCIgPSBlbmNvZGVfZmxvYXQoeCk7XFxuICAgICAgfVxcbiAgICBcIn0sbGk9ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXTt2YXIgcj11YSgpLG89ZVswXSxhPWVbMV07dGhpcy5vdXRwdXRTaGFwZT10O3ZhciBpPVwicmVzdWx0XCI7biYmKGk9XCJmbG9vcihyZXN1bHQgKiAyNTUuICsgMC41KVwiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrbGEodCkrXCJcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIGludCBmbGF0SW5kZXggPSBnZXRGbGF0SW5kZXgoY29vcmRzKTtcXG4gICAgICAgIGludCBvZmZzZXQgPSBpbW9kKGZsYXRJbmRleCwgNCk7XFxuXFxuICAgICAgICBmbGF0SW5kZXggPSBpZGl2KGZsYXRJbmRleCwgNCwgMS4pO1xcbiAgICAgICAgXFxuICAgICAgICBpbnQgciA9IGZsYXRJbmRleCAvIFwiK2ErXCI7XFxuICAgICAgICBpbnQgYyA9IGltb2QoZmxhdEluZGV4LCBcIithK1wiKTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMihjLCByKSArIGhhbGZDUikgLyB2ZWMyKFwiK2ErXCIuMCwgXCIrbytcIi4wKTtcXG4gICAgICAgIHZlYzQgdmFsdWVzID0gXCIrci50ZXh0dXJlMkQrXCIoQSwgdXYpO1xcblxcbiAgICAgICAgZmxvYXQgcmVzdWx0O1xcblxcbiAgICAgICAgaWYob2Zmc2V0ID09IDApIHtcXG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWVzWzBdO1xcbiAgICAgICAgfSBlbHNlIGlmKG9mZnNldCA9PSAxKSB7XFxuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlc1sxXTtcXG4gICAgICAgIH0gZWxzZSBpZihvZmZzZXQgPT0gMikge1xcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZXNbMl07XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZXNbM107XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIityLm91dHB1dCtcIiA9IHZlYzQoXCIraStcIiwgMC4sIDAuLCAwLik7XFxuICAgICAgfVxcbiAgICBcIn0saGk9ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMSx0aGlzLnBhY2tlZE91dHB1dD0hMDt2YXIgcj11YSgpLG89ZVswXSxhPWVbMV07dGhpcy5vdXRwdXRTaGFwZT10O3ZhciBpPVwiXCIscz1cInJlc3VsdFwiO24mJihzPVwiZmxvb3IocmVzdWx0ICogMjU1LiArIDAuNSlcIik7Zm9yKHZhciB1PTA7dTw9MTt1KyspZm9yKHZhciBjPTA7Yzw9MTtjKyspe3ZhciBsPTIqdStjO2krPVwiXFxuICAgICAgICAgIGxvY2FsQ29vcmRzID0gY29vcmRzO1xcbiAgICAgICAgICBpZihsb2NhbENvb3Jkc1syXSArIFwiK2MrXCIgPCBcIit0WzJdK1wiKSB7XFxuICAgICAgICAgICAgbG9jYWxDb29yZHNbMl0gKz0gXCIrYytcIjtcXG4gICAgICAgICAgICBpZihsb2NhbENvb3Jkc1sxXSArIFwiK3UrXCIgPCBcIit0WzFdK1wiKSB7XFxuICAgICAgICAgICAgICBsb2NhbENvb3Jkc1sxXSArPSBcIit1K1wiO1xcblxcbiAgICAgICAgICAgICAgZmxhdEluZGV4ID0gZ2V0RmxhdEluZGV4KGxvY2FsQ29vcmRzKTtcXG4gICAgICAgICAgICAgIG9mZnNldCA9IGltb2QoZmxhdEluZGV4LCA0KTtcXG5cXG4gICAgICAgICAgICAgIGZsYXRJbmRleCA9IGlkaXYoZmxhdEluZGV4LCA0LCAxLik7XFxuXFxuICAgICAgICAgICAgICByID0gZmxhdEluZGV4IC8gXCIrYStcIjtcXG4gICAgICAgICAgICAgIGMgPSBpbW9kKGZsYXRJbmRleCwgXCIrYStcIik7XFxuICAgICAgICAgICAgICB1diA9ICh2ZWMyKGMsIHIpICsgaGFsZkNSKSAvIHZlYzIoXCIrYStcIi4wLCBcIitvK1wiLjApO1xcbiAgICAgICAgICAgICAgdmFsdWVzID0gXCIrci50ZXh0dXJlMkQrXCIoQSwgdXYpO1xcblxcbiAgICAgICAgICAgICAgaWYob2Zmc2V0ID09IDApIHtcXG4gICAgICAgICAgICAgICAgcmVzdWx0W1wiK2wrXCJdID0gdmFsdWVzWzBdO1xcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKG9mZnNldCA9PSAxKSB7XFxuICAgICAgICAgICAgICAgIHJlc3VsdFtcIitsK1wiXSA9IHZhbHVlc1sxXTtcXG4gICAgICAgICAgICAgIH0gZWxzZSBpZihvZmZzZXQgPT0gMikge1xcbiAgICAgICAgICAgICAgICByZXN1bHRbXCIrbCtcIl0gPSB2YWx1ZXNbMl07XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICByZXN1bHRbXCIrbCtcIl0gPSB2YWx1ZXNbM107XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICBcIn10aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrbGEodCkrXCJcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuICAgICAgICBpbnQgZmxhdEluZGV4LCByLCBjLCBvZmZzZXQ7XFxuICAgICAgICBpdmVjMyBsb2NhbENvb3JkcztcXG4gICAgICAgIHZlYzIgdXY7XFxuICAgICAgICB2ZWM0IHZhbHVlcztcXG5cXG4gICAgICAgIFwiK2krXCJcXG5cXG4gICAgICAgIFwiK3Iub3V0cHV0K1wiID0gXCIrcytcIjtcXG4gICAgICB9XFxuICAgIFwifSxmaT1cInJldHVybiByZWFsICogZXhwUiAtIGltYWcgKiBleHBJO1wiLGRpPVwicmV0dXJuIHJlYWwgKiBleHBJICsgaW1hZyAqIGV4cFI7XCIscGk9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJyZWFsXCIsXCJpbWFnXCJdO3ZhciByPWVbMV07dGhpcy5vdXRwdXRTaGFwZT1lO3ZhciBvPW4/XCIyLjAgKiBcIitNYXRoLlBJOlwiLTIuMCAqIFwiK01hdGguUEksYT1uP3IrXCIuMFwiOlwiMS4wXCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGZsb2F0IGV4cG9uZW50TXVsdGlwbGllciA9IFwiK28rXCI7XFxuXFxuICAgICAgZmxvYXQgdW5hcnlPcENvbXBsZXgoZmxvYXQgcmVhbCwgZmxvYXQgZXhwUiwgZmxvYXQgaW1hZywgZmxvYXQgZXhwSSkge1xcbiAgICAgICAgXCIrdCtcIlxcbiAgICAgIH1cXG5cXG4gICAgICBmbG9hdCBtdWxNYXRERlQoaW50IGJhdGNoLCBpbnQgaW5kZXgpIHtcXG4gICAgICAgIGZsb2F0IGluZGV4UmF0aW8gPSBmbG9hdChpbmRleCkgLyBmbG9hdChcIityK1wiKTtcXG4gICAgICAgIGZsb2F0IGV4cG9uZW50TXVsdGlwbGllclRpbWVzSW5kZXhSYXRpbyA9XFxuICAgICAgICAgICAgZXhwb25lbnRNdWx0aXBsaWVyICogaW5kZXhSYXRpbztcXG5cXG4gICAgICAgIGZsb2F0IHJlc3VsdCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgXCIrcitcIjsgaSsrKSB7XFxuICAgICAgICAgIC8vIHggPSAoLTJ8MiAqIFBJIC8gTikgKiBpbmRleCAqIGk7XFxuICAgICAgICAgIGZsb2F0IHggPSBleHBvbmVudE11bHRpcGxpZXJUaW1lc0luZGV4UmF0aW8gKiBmbG9hdChpKTtcXG4gICAgICAgICAgZmxvYXQgZXhwUiA9IGNvcyh4KTtcXG4gICAgICAgICAgZmxvYXQgZXhwSSA9IHNpbih4KTtcXG4gICAgICAgICAgZmxvYXQgcmVhbCA9IGdldFJlYWwoYmF0Y2gsIGkpO1xcbiAgICAgICAgICBmbG9hdCBpbWFnID0gZ2V0SW1hZyhiYXRjaCwgaSk7XFxuXFxuICAgICAgICAgIHJlc3VsdCArPVxcbiAgICAgICAgICAgICAgdW5hcnlPcENvbXBsZXgocmVhbCwgZXhwUiwgaW1hZywgZXhwSSkgLyBcIithK1wiO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQobXVsTWF0REZUKGNvb3Jkc1swXSwgY29vcmRzWzFdKSk7XFxuICAgICAgfVxcbiAgICBcIn0sdmk9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSl7dGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHVuaWZvcm0gZmxvYXQgdmFsdWU7XFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgLy8gSW5wdXQgY2FuIGJlIG9idGFpbmVkIGZyb20gdW5pZm9ybSB2YWx1ZS5cXG4gICAgICAgIHNldE91dHB1dCh2YWx1ZSk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKG4scil7bnVsbD09ZS52YWx1ZUxvYyYmKGUudmFsdWVMb2M9bi5nZXRVbmlmb3JtTG9jYXRpb25Ob1Rocm93KHIsXCJ2YWx1ZVwiKSksbi5nbC51bmlmb3JtMWYoZS52YWx1ZUxvYyx0KX19LHR9KCksbWk9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCIsXCJpbmRpY2VzXCJdO3ZhciByPXQuc2xpY2UoKTtyW25dPWUsdGhpcy5vdXRwdXRTaGFwZT1yLHRoaXMucmFuaz1yLmxlbmd0aDt2YXIgbz13YSh0aGlzLnJhbmspLGE9ZnVuY3Rpb24odCxlKXt2YXIgbj10Lmxlbmd0aDtpZihuPjQpdGhyb3cgRXJyb3IoXCJHYXRoZXIgZm9yIHJhbmsgXCIrbitcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtpZigxPT09bilyZXR1cm5cImludChnZXRJbmRpY2VzKHJlc1JDKSlcIjtmb3IodmFyIHI9W1wicmVzUkMueFwiLFwicmVzUkMueVwiLFwicmVzUkMuelwiLFwicmVzUkMud1wiXSxvPVtdLGE9MDthPHQubGVuZ3RoO2ErKylhPT09ZT9vLnB1c2goXCJpbnQoZ2V0SW5kaWNlcyhcIityW2FdK1wiKSlcIik6by5wdXNoKFwiXCIrclthXSk7cmV0dXJuIG8uam9pbigpfSh0LG4pO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIHJlc1JDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQoZ2V0QShcIithK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn07dmFyIGdpPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnNsaWNlRGltPXQsdGhpcy5zdHJpZGVzPWUsdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcImluZGljZXNcIl0sdGhpcy5vdXRwdXRTaGFwZT1uO3ZhciByPXdhKGUubGVuZ3RoKSxvPXdhKG4ubGVuZ3RoKSxhPXRoaXMuc2xpY2VEaW0+MT9cInN0cmlkZXNbal1cIjpcInN0cmlkZXNcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgICBcIityK1wiIHN0cmlkZXMgPSBcIityK1wiKFwiK3RoaXMuc3RyaWRlcytcIik7XFxuICAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBcIitvK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICBpbnQgZmxhdHRlbkluZGV4ID0gMDtcXG4gICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBcIit0aGlzLnNsaWNlRGltK1wiOyBqKyspIHtcXG4gICAgICAgICAgICBpbnQgaW5kZXggPSByb3VuZChnZXRJbmRpY2VzKGNvb3Jkc1swXSwgaikpO1xcbiAgICAgICAgICAgIGZsYXR0ZW5JbmRleCArPSBpbmRleCAqIFwiK2ErXCI7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KGdldFgoZmxhdHRlbkluZGV4LCBjb29yZHNbMV0pKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn07ZnVuY3Rpb24geWkodCxlKXt2YXIgbj11YSgpO3JldHVybiBvZSh0LGUsbi52ZXJzaW9uK1wiXFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4gICAgXCIrbi5hdHRyaWJ1dGUrXCIgdmVjMyBjbGlwU3BhY2VQb3M7XFxuICAgIFwiK24uYXR0cmlidXRlK1wiIHZlYzIgdXY7XFxuICAgIFwiK24udmFyeWluZ1ZzK1wiIHZlYzIgcmVzdWx0VVY7XFxuXFxuICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoY2xpcFNwYWNlUG9zLCAxKTtcXG4gICAgICByZXN1bHRVViA9IHV2O1xcbiAgICB9XCIpfWZ1bmN0aW9uIHhpKHQsZSl7cmV0dXJuIGZlKHQsZSxuZXcgRmxvYXQzMkFycmF5KFstMSwxLDAsMCwxLC0xLC0xLDAsMCwwLDEsMSwwLDEsMSwxLC0xLDAsMSwwXSkpfWZ1bmN0aW9uIGJpKHQsZSl7cmV0dXJuIGRlKHQsZSxuZXcgVWludDE2QXJyYXkoWzAsMSwyLDIsMSwzXSkpfWZ1bmN0aW9uIHdpKHQsZSxuLHIsbyxhLGkpe3ZlKG4scik7dmFyIHM9cGUodCxlKSx1PXQuVEVYVFVSRV8yRDtyZXR1cm4gSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRUZXh0dXJlKHUscyl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnRleFBhcmFtZXRlcmkodSx0LlRFWFRVUkVfV1JBUF9TLHQuQ0xBTVBfVE9fRURHRSl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnRleFBhcmFtZXRlcmkodSx0LlRFWFRVUkVfV1JBUF9ULHQuQ0xBTVBfVE9fRURHRSl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnRleFBhcmFtZXRlcmkodSx0LlRFWFRVUkVfTUlOX0ZJTFRFUix0Lk5FQVJFU1QpfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC50ZXhQYXJhbWV0ZXJpKHUsdC5URVhUVVJFX01BR19GSUxURVIsdC5ORUFSRVNUKX0pKSxKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4SW1hZ2UyRCh1LDAsbyxuLHIsMCxhLGksbnVsbCl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxudWxsKX0pKSxzfWZ1bmN0aW9uIENpKHQsZSxuLHIsbyl7dmFyIGE9WHQobixyKTtyZXR1cm4gd2kodCxlLGFbMF0sYVsxXSxvLmludGVybmFsRm9ybWF0RmxvYXQsby50ZXh0dXJlRm9ybWF0RmxvYXQsdC5GTE9BVCl9ZnVuY3Rpb24gRWkodCxlLG4scixvKXt2YXIgYT1YdChuLHIpO3JldHVybiB3aSh0LGUsYVswXSxhWzFdLG8uaW50ZXJuYWxGb3JtYXRIYWxmRmxvYXQsby50ZXh0dXJlRm9ybWF0RmxvYXQsby50ZXh0dXJlVHlwZUhhbGZGbG9hdCl9ZnVuY3Rpb24gUmkodCxlLG4scixvKXt2YXIgYT1YdChuLHIpO3JldHVybiB3aSh0LGUsYVswXSxhWzFdLHQuUkdCQSx0LlJHQkEsdC5VTlNJR05FRF9CWVRFKX1mdW5jdGlvbiBJaSh0LGUsbixyLG8pe3ZhciBhPSR0KG4scik7cmV0dXJuIHdpKHQsZSxhWzBdLGFbMV0sby5pbnRlcm5hbEZvcm1hdFBhY2tlZEZsb2F0LHQuUkdCQSx0LkZMT0FUKX1mdW5jdGlvbiBraSh0LGUsbixyLG8pe3ZhciBhPSR0KG4scik7cmV0dXJuIHdpKHQsZSxhWzBdLGFbMV0sby5pbnRlcm5hbEZvcm1hdFBhY2tlZEhhbGZGbG9hdCx0LlJHQkEsby50ZXh0dXJlVHlwZUhhbGZGbG9hdCl9ZnVuY3Rpb24gU2kodCxlLG4scil7cmV0dXJuIEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuQVJSQVlfQlVGRkVSLHIpfSkpLGdlKHQsZSxuLFwiY2xpcFNwYWNlUG9zXCIsciwzLDIwLDApJiZnZSh0LGUsbixcInV2XCIsciwyLDIwLDEyKX1mdW5jdGlvbiBBaSh0LGUsbixyLG8sYSxpKXt2YXIgcyx1LGM7SnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxuKX0pKSxhIGluc3RhbmNlb2YgVWludDhBcnJheT8ocz1uZXcgVWludDhBcnJheShyKm8qNCksdT10LlVOU0lHTkVEX0JZVEUsYz10LlJHQkEpOihzPW5ldyBGbG9hdDMyQXJyYXkocipvKjQpLHU9dC5GTE9BVCxjPWkuaW50ZXJuYWxGb3JtYXRQYWNrZWRGbG9hdCkscy5zZXQoYSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LnRleEltYWdlMkQodC5URVhUVVJFXzJELDAsYyxyLG8sMCx0LlJHQkEsdSxzKX0pKSxKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSkpfWZ1bmN0aW9uIERpKHQsZSxuLHIpe0p0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsbil9KSksci5kYXRhIGluc3RhbmNlb2YgVWludDhBcnJheT9KdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCx0LlJHQkEsci53aWR0aCxyLmhlaWdodCwwLHQuUkdCQSx0LlVOU0lHTkVEX0JZVEUsci5kYXRhKX0pKTpKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCx0LlJHQkEsdC5SR0JBLHQuVU5TSUdORURfQllURSxyKX0pKSxKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSkpfWZ1bmN0aW9uIFRpKHQsZSxuLHIsbyl7dmFyIGE9dC5jcmVhdGVCdWZmZXIoKTtKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZEJ1ZmZlcih0LlBJWEVMX1BBQ0tfQlVGRkVSLGEpfSkpO3ZhciBpPTE2Km4qcjtyZXR1cm4gSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJ1ZmZlckRhdGEodC5QSVhFTF9QQUNLX0JVRkZFUixpLHQuU1RSRUFNX1JFQUQpfSkpLEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5yZWFkUGl4ZWxzKDAsMCxyLG4sdC5SR0JBLHQuRkxPQVQsMCl9KSksSnQodCxlLChmdW5jdGlvbigpe3JldHVybiB0LmJpbmRCdWZmZXIodC5QSVhFTF9QQUNLX0JVRkZFUixudWxsKX0pKSxhfWZ1bmN0aW9uIE5pKHQsZSxuKXt2YXIgcj10LG89bmV3IEZsb2F0MzJBcnJheShuKTtyZXR1cm4gci5iaW5kQnVmZmVyKHIuUElYRUxfUEFDS19CVUZGRVIsZSksci5nZXRCdWZmZXJTdWJEYXRhKHIuUElYRUxfUEFDS19CVUZGRVIsMCxvKSxyLmJpbmRCdWZmZXIoci5QSVhFTF9QQUNLX0JVRkZFUixudWxsKSxvfWZ1bmN0aW9uIEZpKHQsZSxuLHIsbyl7dmFyIGE9WHQobixyKSxpPWFbMF0scz1hWzFdLHU9bmV3IFVpbnQ4QXJyYXkobipyKjQpO3JldHVybiBKdCh0LGUsKGZ1bmN0aW9uKCl7cmV0dXJuIHQucmVhZFBpeGVscygwLDAsaSxzLG8uZG93bmxvYWRUZXh0dXJlRm9ybWF0LHQuVU5TSUdORURfQllURSx1KX0pKSxuZXcgRmxvYXQzMkFycmF5KHUuYnVmZmVyKX1mdW5jdGlvbiBfaSh0LGUsbixyLG8sYSxpLHMpe3ZhciB1PXQsYz1uZXcgRmxvYXQzMkFycmF5KGZ1bmN0aW9uKHQsZSl7dmFyIG49JHQodCxlKTtyZXR1cm4gblswXSpuWzFdKjR9KGEsaSkpO3JldHVybiB1LmJpbmRCdWZmZXIodS5QSVhFTF9QQUNLX0JVRkZFUixlKSx1LmdldEJ1ZmZlclN1YkRhdGEodS5QSVhFTF9QQUNLX0JVRkZFUiwwLGMpLHUuYmluZEJ1ZmZlcih1LlBJWEVMX1BBQ0tfQlVGRkVSLG51bGwpLGN9ZnVuY3Rpb24gT2kodCxlLG4scil7dmFyIG89bmV3IEZsb2F0MzJBcnJheShuKnIqNCk7cmV0dXJuIEp0KHQsZSwoZnVuY3Rpb24oKXtyZXR1cm4gdC5yZWFkUGl4ZWxzKDAsMCxyLG4sdC5SR0JBLHQuRkxPQVQsbyl9KSksb312YXIgTWk9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlVmVydGV4U2hhZGVyOnlpLGNyZWF0ZVZlcnRleEJ1ZmZlcjp4aSxjcmVhdGVJbmRleEJ1ZmZlcjpiaSxjcmVhdGVGbG9hdDMyTWF0cml4VGV4dHVyZTpDaSxjcmVhdGVGbG9hdDE2TWF0cml4VGV4dHVyZTpFaSxjcmVhdGVVbnNpZ25lZEJ5dGVzTWF0cml4VGV4dHVyZTpSaSxjcmVhdGVQYWNrZWRNYXRyaXhUZXh0dXJlOklpLGNyZWF0ZUZsb2F0MTZQYWNrZWRNYXRyaXhUZXh0dXJlOmtpLGJpbmRWZXJ0ZXhQcm9ncmFtQXR0cmlidXRlU3RyZWFtczpTaSx1cGxvYWREZW5zZU1hdHJpeFRvVGV4dHVyZTpBaSx1cGxvYWRQaXhlbERhdGFUb1RleHR1cmU6RGksY3JlYXRlQnVmZmVyRnJvbU91dHB1dFRleHR1cmU6VGksZG93bmxvYWRGbG9hdDMyTWF0cml4RnJvbUJ1ZmZlcjpOaSxkb3dubG9hZEJ5dGVFbmNvZGVkRmxvYXRNYXRyaXhGcm9tT3V0cHV0VGV4dHVyZTpGaSxkb3dubG9hZFBhY2tlZE1hdHJpeEZyb21CdWZmZXI6X2ksZG93bmxvYWRNYXRyaXhGcm9tUGFja2VkT3V0cHV0VGV4dHVyZTpPaX0pLEJpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLm91dHB1dFRleHR1cmU9bnVsbCx0aGlzLnByb2dyYW09bnVsbCx0aGlzLmRpc3Bvc2VkPSExLHRoaXMudmVydGV4QXR0cnNBcmVCb3VuZD0hMSx0aGlzLml0ZW1zVG9Qb2xsPVtdO3ZhciBlPWkoKS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpO251bGwhPXQ/KHRoaXMuZ2w9dCxLdChlLHQpKTp0aGlzLmdsPWp0KGUpO3ZhciBuPVwiV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0XCI7aWYoMT09PWkoKS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKXtpZih0aGlzLnRleHR1cmVGbG9hdEV4dGVuc2lvbj1yZSh0aGlzLmdsLHRoaXMuZGVidWcsXCJPRVNfdGV4dHVyZV9mbG9hdFwiKSxQZSh0aGlzLmdsLFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKSl0aGlzLnRleHR1cmVIYWxmRmxvYXRFeHRlbnNpb249cmUodGhpcy5nbCx0aGlzLmRlYnVnLFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKTtlbHNlIGlmKGkoKS5nZXQoXCJXRUJHTF9GT1JDRV9GMTZfVEVYVFVSRVNcIikpdGhyb3cgbmV3IEVycm9yKFwiR0wgY29udGV4dCBkb2VzIG5vdCBzdXBwb3J0IGhhbGYgZmxvYXQgdGV4dHVyZXMsIHlldCB0aGUgZW52aXJvbm1lbnQgZmxhZyBXRUJHTF9GT1JDRV9GMTZfVEVYVFVSRVMgaXMgc2V0IHRvIHRydWUuXCIpO2lmKHRoaXMuY29sb3JCdWZmZXJGbG9hdEV4dGVuc2lvbj10aGlzLmdsLmdldEV4dGVuc2lvbihuKSxQZSh0aGlzLmdsLFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpKXRoaXMuY29sb3JCdWZmZXJIYWxmRmxvYXRFeHRlbnNpb249cmUodGhpcy5nbCx0aGlzLmRlYnVnLFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpO2Vsc2UgaWYoaSgpLmdldChcIldFQkdMX0ZPUkNFX0YxNl9URVhUVVJFU1wiKSl0aHJvdyBuZXcgRXJyb3IoXCJHTCBjb250ZXh0IGRvZXMgbm90IHN1cHBvcnQgY29sb3IgcmVuZGVyYWJsZSBoYWxmIGZsb2F0cywgeWV0IHRoZSBlbnZpcm9ubWVudCBmbGFnIFdFQkdMX0ZPUkNFX0YxNl9URVhUVVJFUyBpcyBzZXQgdG8gdHJ1ZS5cIil9ZWxzZSBpZihuPVwiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdFwiLFBlKHRoaXMuZ2wsbikpdGhpcy5jb2xvckJ1ZmZlckZsb2F0RXh0ZW5zaW9uPXRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKG4pO2Vsc2V7aWYoIVBlKHRoaXMuZ2wsXCJFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXRcIikpdGhyb3cgbmV3IEVycm9yKFwiR0wgY29udGV4dCBkb2VzIG5vdCBzdXBwb3J0IGNvbG9yIHJlbmRlcmFibGUgZmxvYXRzXCIpO3RoaXMuY29sb3JCdWZmZXJIYWxmRmxvYXRFeHRlbnNpb249dGhpcy5nbC5nZXRFeHRlbnNpb24oXCJFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXRcIil9dGhpcy52ZXJ0ZXhCdWZmZXI9eGkodGhpcy5nbCx0aGlzLmRlYnVnKSx0aGlzLmluZGV4QnVmZmVyPWJpKHRoaXMuZ2wsdGhpcy5kZWJ1ZyksdGhpcy5mcmFtZWJ1ZmZlcj1tZSh0aGlzLmdsLHRoaXMuZGVidWcpLHRoaXMudGV4dHVyZUNvbmZpZz1RdCh0aGlzLmdsLHRoaXMudGV4dHVyZUhhbGZGbG9hdEV4dGVuc2lvbil9cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImRlYnVnXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBpKCkuZ2V0Qm9vbChcIkRFQlVHXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCF0aGlzLmRpc3Bvc2VkKXtudWxsIT10aGlzLnByb2dyYW0mJmNvbnNvbGUud2FybihcIkRpc3Bvc2luZyBhIEdQR1BVQ29udGV4dCB0aGF0IHN0aWxsIGhhcyBhIGJvdW5kIFdlYkdMUHJvZ3JhbS4gVGhpcyBpcyBwcm9iYWJseSBhIHJlc291cmNlIGxlYWssIGRlbGV0ZSB0aGUgcHJvZ3JhbSB3aXRoIEdQR1BVQ29udGV4dC5kZWxldGVQcm9ncmFtIGJlZm9yZSBkaXNwb3NpbmcuXCIpLG51bGwhPXRoaXMub3V0cHV0VGV4dHVyZSYmY29uc29sZS53YXJuKFwiRGlzcG9zaW5nIGEgR1BHUFVDb250ZXh0IHRoYXQgc3RpbGwgaGFzIGEgYm91bmQgb3V0cHV0IG1hdHJpeCB0ZXh0dXJlLiAgVGhpcyBpcyBwcm9iYWJseSBhIHJlc291cmNlIGxlYWssIGRlbGV0ZSB0aGUgb3V0cHV0IG1hdHJpeCB0ZXh0dXJlIHdpdGggR1BHUFVDb250ZXh0LmRlbGV0ZU1hdHJpeFRleHR1cmUgYmVmb3JlIGRpc3Bvc2luZy5cIik7dmFyIGU9dGhpcy5nbDtKdChlLHRoaXMuZGVidWcsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuZmluaXNoKCl9KSksSnQoZSx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBlLmJpbmRGcmFtZWJ1ZmZlcihlLkZSQU1FQlVGRkVSLG51bGwpfSkpLEp0KGUsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWxldGVGcmFtZWJ1ZmZlcih0LmZyYW1lYnVmZmVyKX0pKSxKdChlLHRoaXMuZGVidWcsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuYmluZEJ1ZmZlcihlLkFSUkFZX0JVRkZFUixudWxsKX0pKSxKdChlLHRoaXMuZGVidWcsKGZ1bmN0aW9uKCl7cmV0dXJuIGUuYmluZEJ1ZmZlcihlLkVMRU1FTlRfQVJSQVlfQlVGRkVSLG51bGwpfSkpLEp0KGUsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWxldGVCdWZmZXIodC5pbmRleEJ1ZmZlcil9KSksdGhpcy5kaXNwb3NlZD0hMH19LHQucHJvdG90eXBlLmNyZWF0ZUZsb2F0MzJNYXRyaXhUZXh0dXJlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksQ2kodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSx0aGlzLnRleHR1cmVDb25maWcpfSx0LnByb3RvdHlwZS5jcmVhdGVGbG9hdDE2TWF0cml4VGV4dHVyZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLEVpKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0LGUsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUuY3JlYXRlVW5zaWduZWRCeXRlc01hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxSaSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLnVwbG9hZFBpeGVsRGF0YVRvVGV4dHVyZT1mdW5jdGlvbih0LGUpe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksRGkodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSl9LHQucHJvdG90eXBlLnVwbG9hZERlbnNlTWF0cml4VG9UZXh0dXJlPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksQWkodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSxuLHIsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUuY3JlYXRlRmxvYXQxNlBhY2tlZE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxraSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLmNyZWF0ZVBhY2tlZE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxJaSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLmRlbGV0ZU1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMub3V0cHV0VGV4dHVyZT09PXQmJihFZSh0aGlzLmdsLHRoaXMuZGVidWcsdGhpcy5mcmFtZWJ1ZmZlciksdGhpcy5vdXRwdXRUZXh0dXJlPW51bGwpLEp0KHRoaXMuZ2wsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gZS5nbC5kZWxldGVUZXh0dXJlKHQpfSkpfSx0LnByb3RvdHlwZS5kb3dubG9hZEJ5dGVFbmNvZGVkRmxvYXRNYXRyaXhGcm9tT3V0cHV0VGV4dHVyZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcztyZXR1cm4gdGhpcy5kb3dubG9hZE1hdHJpeERyaXZlcih0LChmdW5jdGlvbigpe3JldHVybiBGaShyLmdsLHIuZGVidWcsZSxuLHIudGV4dHVyZUNvbmZpZyl9KSl9LHQucHJvdG90eXBlLmRvd25sb2FkUGFja2VkTWF0cml4RnJvbUJ1ZmZlcj1mdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIF9pKHRoaXMuZ2wsdCwwLDAsMCxvLGEsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUuZG93bmxvYWRGbG9hdDMyTWF0cml4RnJvbUJ1ZmZlcj1mdW5jdGlvbih0LGUpe3JldHVybiBOaSh0aGlzLmdsLHQsZSl9LHQucHJvdG90eXBlLmNyZWF0ZUJ1ZmZlckZyb21UZXh0dXJlPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmJpbmRUZXh0dXJlVG9GcmFtZUJ1ZmZlcih0KTt2YXIgcj1UaSh0aGlzLmdsLHRoaXMuZGVidWcsZSxuLHRoaXMudGV4dHVyZUNvbmZpZyk7cmV0dXJuIHRoaXMudW5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXIoKSxyfSx0LnByb3RvdHlwZS5jcmVhdGVBbmRXYWl0Rm9yRmVuY2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmNyZWF0ZUZlbmNlKHRoaXMuZ2wpO3JldHVybiB0aGlzLnBvbGxGZW5jZSh0KX0sdC5wcm90b3R5cGUuY3JlYXRlRmVuY2U9ZnVuY3Rpb24odCl7dmFyIGUsbixyPXRoaXM7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9GRU5DRV9BUElfRU5BQkxFRFwiKSl7dmFyIG89dCxhPW8uZmVuY2VTeW5jKG8uU1lOQ19HUFVfQ09NTUFORFNfQ09NUExFVEUsMCk7dC5mbHVzaCgpLG49ZnVuY3Rpb24oKXt2YXIgdD1vLmNsaWVudFdhaXRTeW5jKGEsMCwwKTtyZXR1cm4gdD09PW8uQUxSRUFEWV9TSUdOQUxFRHx8dD09PW8uQ09ORElUSU9OX1NBVElTRklFRH0sZT1hfWVsc2UgaSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9WRVJTSU9OXCIpPjA/KGU9dGhpcy5iZWdpblF1ZXJ5KCksdGhpcy5lbmRRdWVyeSgpLG49ZnVuY3Rpb24oKXtyZXR1cm4gci5pc1F1ZXJ5QXZhaWxhYmxlKGUsaSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9WRVJTSU9OXCIpKX0pOm49ZnVuY3Rpb24oKXtyZXR1cm4hMH07cmV0dXJue3F1ZXJ5OmUsaXNGZW5jZVBhc3NlZDpufX0sdC5wcm90b3R5cGUuZG93bmxvYWRNYXRyaXhGcm9tUGFja2VkVGV4dHVyZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcztyZXR1cm4gdGhpcy5kb3dubG9hZE1hdHJpeERyaXZlcih0LChmdW5jdGlvbigpe3JldHVybiBPaShyLmdsLHIuZGVidWcsZSxuKX0pKX0sdC5wcm90b3R5cGUuY3JlYXRlUHJvZ3JhbT1mdW5jdGlvbih0KXt0aGlzLnRocm93SWZEaXNwb3NlZCgpO3ZhciBlPXRoaXMuZ2wsbj1hZShlLHRoaXMuZGVidWcsdCkscj15aShlLHRoaXMuZGVidWcpLG89Y2UoZSx0aGlzLmRlYnVnKTtyZXR1cm4gSnQoZSx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBlLmF0dGFjaFNoYWRlcihvLHIpfSkpLEp0KGUsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gZS5hdHRhY2hTaGFkZXIobyxuKX0pKSxsZShlLHRoaXMuZGVidWcsbyksdGhpcy5kZWJ1ZyYmaGUoZSx0aGlzLmRlYnVnLG8pLHRoaXMudmVydGV4QXR0cnNBcmVCb3VuZHx8KHRoaXMuc2V0UHJvZ3JhbShvKSx0aGlzLnZlcnRleEF0dHJzQXJlQm91bmQ9U2koZSx0aGlzLmRlYnVnLHRoaXMucHJvZ3JhbSx0aGlzLnZlcnRleEJ1ZmZlcikpLG99LHQucHJvdG90eXBlLmRlbGV0ZVByb2dyYW09ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLHQ9PT10aGlzLnByb2dyYW0mJih0aGlzLnByb2dyYW09bnVsbCksbnVsbCE9dCYmSnQodGhpcy5nbCx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBlLmdsLmRlbGV0ZVByb2dyYW0odCl9KSl9LHQucHJvdG90eXBlLnNldFByb2dyYW09ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMucHJvZ3JhbT10LG51bGwhPXRoaXMucHJvZ3JhbSYmdGhpcy5kZWJ1ZyYmaGUodGhpcy5nbCx0aGlzLmRlYnVnLHRoaXMucHJvZ3JhbSksSnQodGhpcy5nbCx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBlLmdsLnVzZVByb2dyYW0odCl9KSl9LHQucHJvdG90eXBlLmdldFVuaWZvcm1Mb2NhdGlvbj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPSEwKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLG4/eGUodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSk6YmUodGhpcy5nbCx0LGUpfSx0LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVMb2NhdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksSnQodGhpcy5nbCx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBuLmdsLmdldEF0dHJpYkxvY2F0aW9uKHQsZSl9KSl9LHQucHJvdG90eXBlLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3c9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLmdsLmdldFVuaWZvcm1Mb2NhdGlvbih0LGUpfSx0LnByb3RvdHlwZS5zZXRJbnB1dE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlLG4pe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy50aHJvd0lmTm9Qcm9ncmFtKCksd2UodGhpcy5nbCx0aGlzLmRlYnVnLHRoaXMucHJvZ3JhbSx0LGUsbil9LHQucHJvdG90eXBlLnNldE91dHB1dE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlLG4pe3RoaXMuc2V0T3V0cHV0TWF0cml4VGV4dHVyZURyaXZlcih0LG4sZSl9LHQucHJvdG90eXBlLnNldE91dHB1dFBhY2tlZE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlLG4pe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7dmFyIHI9JHQoZSxuKSxvPXJbMF0sYT1yWzFdO3RoaXMuc2V0T3V0cHV0TWF0cml4VGV4dHVyZURyaXZlcih0LG8sYSl9LHQucHJvdG90eXBlLnNldE91dHB1dE1hdHJpeFdyaXRlUmVnaW9uPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMuc2V0T3V0cHV0TWF0cml4V3JpdGVSZWdpb25Ecml2ZXIobix0LHIsZSl9LHQucHJvdG90eXBlLnNldE91dHB1dFBhY2tlZE1hdHJpeFdyaXRlUmVnaW9uPWZ1bmN0aW9uKHQsZSxuLHIpe3Rocm93IG5ldyBFcnJvcihcInNldE91dHB1dFBhY2tlZE1hdHJpeFdyaXRlUmVnaW9uIG5vdCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmRlYnVnVmFsaWRhdGU9ZnVuY3Rpb24oKXtudWxsIT10aGlzLnByb2dyYW0mJmhlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0aGlzLnByb2dyYW0pLFJlKHRoaXMuZ2wpfSx0LnByb3RvdHlwZS5leGVjdXRlUHJvZ3JhbT1mdW5jdGlvbigpe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy50aHJvd0lmTm9Qcm9ncmFtKCk7dmFyIHQ9dGhpcy5nbDt0aGlzLmRlYnVnJiZ0aGlzLmRlYnVnVmFsaWRhdGUoKSxKdCh0LHRoaXMuZGVidWcsKGZ1bmN0aW9uKCl7cmV0dXJuIHQuZHJhd0VsZW1lbnRzKHQuVFJJQU5HTEVTLDYsdC5VTlNJR05FRF9TSE9SVCwwKX0pKX0sdC5wcm90b3R5cGUuYmxvY2tVbnRpbEFsbFByb2dyYW1zQ29tcGxldGVkPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLEp0KHRoaXMuZ2wsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gdC5nbC5maW5pc2goKX0pKX0sdC5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbj1mdW5jdGlvbigpe3JldHVybiBudWxsPT10aGlzLmRpc2pvaW50UXVlcnlUaW1lckV4dGVuc2lvbiYmKHRoaXMuZGlzam9pbnRRdWVyeVRpbWVyRXh0ZW5zaW9uPXJlKHRoaXMuZ2wsdGhpcy5kZWJ1ZywyPT09aSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9WRVJTSU9OXCIpP1wiRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5X3dlYmdsMlwiOlwiRVhUX2Rpc2pvaW50X3RpbWVyX3F1ZXJ5XCIpKSx0aGlzLmRpc2pvaW50UXVlcnlUaW1lckV4dGVuc2lvbn0sdC5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMj1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb24oKX0sdC5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb24oKX0sdC5wcm90b3R5cGUuYmVnaW5RdWVyeT1mdW5jdGlvbigpe2lmKDI9PT1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIikpe3ZhciB0PXRoaXMuZ2wsZT10aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDIoKSxuPXQuY3JlYXRlUXVlcnkoKTtyZXR1cm4gdC5iZWdpblF1ZXJ5KGUuVElNRV9FTEFQU0VEX0VYVCxuKSxufXZhciByPXRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMSgpLG89ci5jcmVhdGVRdWVyeUVYVCgpO3JldHVybiByLmJlZ2luUXVlcnlFWFQoci5USU1FX0VMQVBTRURfRVhULG8pLG99LHQucHJvdG90eXBlLmVuZFF1ZXJ5PWZ1bmN0aW9uKCl7aWYoMiE9PWkoKS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKSl7dmFyIHQ9dGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wxKCk7dC5lbmRRdWVyeUVYVCh0LlRJTUVfRUxBUFNFRF9FWFQpfWVsc2V7dmFyIGU9dGhpcy5nbCxuPXRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMigpO2UuZW5kUXVlcnkobi5USU1FX0VMQVBTRURfRVhUKX19LHQucHJvdG90eXBlLndhaXRGb3JRdWVyeUFuZEdldFRpbWU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCxGKChmdW5jdGlvbigpe3JldHVybiBlLmRpc3Bvc2VkfHxlLmlzUXVlcnlBdmFpbGFibGUodCxpKCkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIikpfSkpXTtjYXNlIDE6cmV0dXJuIG4uc2VudCgpLFsyLHRoaXMuZ2V0UXVlcnlUaW1lKHQsaSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9WRVJTSU9OXCIpKV19fSkpfSkpfSx0LnByb3RvdHlwZS5nZXRRdWVyeVRpbWU9ZnVuY3Rpb24odCxlKXtpZigwPT09ZSlyZXR1cm4gbnVsbDtpZigyPT09ZSl7dmFyIG49dGhpcy5nbDtyZXR1cm4gbi5nZXRRdWVyeVBhcmFtZXRlcih0LG4uUVVFUllfUkVTVUxUKS8xZTZ9dmFyIHI9dGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wxKCk7cmV0dXJuIHIuZ2V0UXVlcnlPYmplY3RFWFQodCxyLlFVRVJZX1JFU1VMVF9FWFQpLzFlNn0sdC5wcm90b3R5cGUuaXNRdWVyeUF2YWlsYWJsZT1mdW5jdGlvbih0LGUpe2lmKDA9PT1lKXJldHVybiEwO2lmKDI9PT1lKXt2YXIgbj10aGlzLmdsLHI9dGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wyKCksbz1uLmdldFF1ZXJ5UGFyYW1ldGVyKHQsbi5RVUVSWV9SRVNVTFRfQVZBSUxBQkxFKTtyZXR1cm4gbnVsbD09dGhpcy5kaXNqb2ludCYmKHRoaXMuZGlzam9pbnQ9dGhpcy5nbC5nZXRQYXJhbWV0ZXIoci5HUFVfRElTSk9JTlRfRVhUKSksbyYmIXRoaXMuZGlzam9pbnR9bz0ocj10aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDEoKSkuZ2V0UXVlcnlPYmplY3RFWFQodCxyLlFVRVJZX1JFU1VMVF9BVkFJTEFCTEVfRVhUKTtyZXR1cm4gbnVsbD09dGhpcy5kaXNqb2ludCYmKHRoaXMuZGlzam9pbnQ9dGhpcy5nbC5nZXRQYXJhbWV0ZXIoci5HUFVfRElTSk9JTlRfRVhUKSksbyYmIXRoaXMuZGlzam9pbnR9LHQucHJvdG90eXBlLnBvbGxGZW5jZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obil7ZS5hZGRJdGVtVG9Qb2xsKChmdW5jdGlvbigpe3JldHVybiB0LmlzRmVuY2VQYXNzZWQoKX0pLChmdW5jdGlvbigpe3JldHVybiBuKCl9KSl9KSl9LHQucHJvdG90eXBlLnBvbGxJdGVtcz1mdW5jdGlvbigpe2Zvcih2YXIgdD1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoOysrZSl7aWYoIXRbZV0oKSlicmVha31yZXR1cm4gZS0xfSh0aGlzLml0ZW1zVG9Qb2xsLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuaXNEb25lRm59KSkpLGU9MDtlPD10OysrZSl7KDAsdGhpcy5pdGVtc1RvUG9sbFtlXS5yZXNvbHZlRm4pKCl9dGhpcy5pdGVtc1RvUG9sbD10aGlzLml0ZW1zVG9Qb2xsLnNsaWNlKHQrMSl9LHQucHJvdG90eXBlLmFkZEl0ZW1Ub1BvbGw9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO3RoaXMuaXRlbXNUb1BvbGwucHVzaCh7aXNEb25lRm46dCxyZXNvbHZlRm46ZX0pLHRoaXMuaXRlbXNUb1BvbGwubGVuZ3RoPjF8fEYoKGZ1bmN0aW9uKCl7cmV0dXJuIG4ucG9sbEl0ZW1zKCksMD09PW4uaXRlbXNUb1BvbGwubGVuZ3RofSkpfSx0LnByb3RvdHlwZS5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXI9ZnVuY3Rpb24odCl7dGhpcy50aHJvd0lmRGlzcG9zZWQoKSxDZSh0aGlzLmdsLHRoaXMuZGVidWcsdCx0aGlzLmZyYW1lYnVmZmVyKSx0aGlzLmRlYnVnJiZSZSh0aGlzLmdsKX0sdC5wcm90b3R5cGUudW5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXI9ZnVuY3Rpb24oKXtudWxsIT10aGlzLm91dHB1dFRleHR1cmU/KENlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0aGlzLm91dHB1dFRleHR1cmUsdGhpcy5mcmFtZWJ1ZmZlciksdGhpcy5kZWJ1ZyYmUmUodGhpcy5nbCkpOkVlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0aGlzLmZyYW1lYnVmZmVyKX0sdC5wcm90b3R5cGUuZG93bmxvYWRNYXRyaXhEcml2ZXI9ZnVuY3Rpb24odCxlKXt0aGlzLmJpbmRUZXh0dXJlVG9GcmFtZUJ1ZmZlcih0KTt2YXIgbj1lKCk7cmV0dXJuIHRoaXMudW5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXIoKSxufSx0LnByb3RvdHlwZS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlRHJpdmVyPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnRocm93SWZEaXNwb3NlZCgpO3ZhciByPXRoaXMuZ2w7Q2Uocix0aGlzLmRlYnVnLHQsdGhpcy5mcmFtZWJ1ZmZlciksdGhpcy5kZWJ1ZyYmUmUociksdGhpcy5vdXRwdXRUZXh0dXJlPXQsSnQocix0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiByLnZpZXdwb3J0KDAsMCxlLG4pfSkpLEp0KHIsdGhpcy5kZWJ1ZywoZnVuY3Rpb24oKXtyZXR1cm4gci5zY2lzc29yKDAsMCxlLG4pfSkpfSx0LnByb3RvdHlwZS5zZXRPdXRwdXRNYXRyaXhXcml0ZVJlZ2lvbkRyaXZlcj1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz10aGlzO3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksSnQodGhpcy5nbCx0aGlzLmRlYnVnLChmdW5jdGlvbigpe3JldHVybiBvLmdsLnNjaXNzb3IodCxlLG4scil9KSl9LHQucHJvdG90eXBlLnRocm93SWZEaXNwb3NlZD1mdW5jdGlvbigpe2lmKHRoaXMuZGlzcG9zZWQpdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIHVzZSBkaXNwb3NlZCBHUEdQVUNvbnRleHQuXCIpfSx0LnByb3RvdHlwZS50aHJvd0lmTm9Qcm9ncmFtPWZ1bmN0aW9uKCl7aWYobnVsbD09dGhpcy5wcm9ncmFtKXRocm93IG5ldyBFcnJvcihcIk5vIEdQVSBwcm9ncmFtIGlzIGN1cnJlbnRseSBzZXQuXCIpfSx0fSgpO2Z1bmN0aW9uIFBpKHQsZSl7aWYodC5sZW5ndGghPT1lLmxlbmd0aCl0aHJvdyBFcnJvcihcIkJpbmFyeSB3YXMgY29tcGlsZWQgd2l0aCBcIit0Lmxlbmd0aCtcIiBpbnB1dHMsIGJ1dCB3YXMgZXhlY3V0ZWQgd2l0aCBcIitlLmxlbmd0aCtcIiBpbnB1dHNcIik7dC5mb3JFYWNoKChmdW5jdGlvbih0LG4pe3ZhciByPXQubG9naWNhbFNoYXBlLG89ZVtuXSxhPW8uc2hhcGU7aWYoIVMocixhKSl0aHJvdyBFcnJvcihcIkJpbmFyeSB3YXMgY29tcGlsZWQgd2l0aCBkaWZmZXJlbnQgc2hhcGVzIHRoYW4gdGhlIGN1cnJlbnQgYXJncy4gU2hhcGVzIFwiK3IrXCIgYW5kIFwiK2ErXCIgbXVzdCBtYXRjaFwiKTtpZighdC5pc1VuaWZvcm18fCFvLmlzVW5pZm9ybSl7dmFyIGk9dC50ZXhTaGFwZSxzPW8uaXNVbmlmb3JtP251bGw6by50ZXhEYXRhLnRleFNoYXBlO2lmKCFTKGkscykpdGhyb3cgRXJyb3IoXCJCaW5hcnkgd2FzIGNvbXBpbGVkIHdpdGggZGlmZmVyZW50IHRleHR1cmUgc2hhcGVzIHRoYW4gdGhlIGN1cnJlbnQgYXJncy4gU2hhcGUgXCIraStcIiBhbmQgXCIrcytcIiBtdXN0IG1hdGNoXCIpfX0pKX12YXIgTGk9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMucGFja2VkSW5wdXRzPSEwLHRoaXMucGFja2VkT3V0cHV0PSEwLHRoaXMub3V0cHV0U2hhcGU9dDtmb3IodmFyIHI9bi5maWx0ZXJXaWR0aCxvPW4uaW5DaGFubmVscyxhPW4uc3RyaWRlV2lkdGgsaT1uLnN0cmlkZUhlaWdodCxzPW4ucGFkSW5mbyx1PW4ub3V0V2lkdGgsYz1uLmRpbGF0aW9uV2lkdGgsbD1uLmRpbGF0aW9uSGVpZ2h0LGg9bi5kYXRhRm9ybWF0LGY9cy5sZWZ0LGQ9cy50b3AscD1vKnIsdj11YSgpLG09XCJjaGFubmVsc0xhc3RcIj09PWgsZz1tPzA6MSx5PW0/MToyLHg9XCJcIixiPTA7Yjw9MTtiKyspZm9yKHZhciB3PTA7dzw9MTt3KyspeCs9XCJcXG4gICAgICAgICAgYmxvY2tJbmRleCA9IHJjLnkgKyBcIit3K1wiO1xcbiAgICAgICAgICBwb3MgPSByYy54ICsgXCIrYitcIjtcXG5cXG4gICAgICAgICAgaWYoYmxvY2tJbmRleCA8IFwiK3RbMV0rXCIgJiYgcG9zIDwgXCIrdFswXStcIikge1xcbiAgICAgICAgICAgIG9mZnNldFkgPSBpbnQoYmxvY2tJbmRleCAvIChcIit1K1wiKSkgKiBcIitpK1wiIC0gXCIrZCtcIjtcXG4gICAgICAgICAgICBkMCA9IG9mZnNldFkgKyBcIitsK1wiICogKHBvcyAvIFwiK3ArXCIpO1xcblxcbiAgICAgICAgICAgIGlmKGQwIDwgXCIrZVtnXStcIiAmJiBkMCA+PSAwKSB7XFxuXFxuICAgICAgICAgICAgICBvZmZzZXRYID0gaW50KG1vZChmbG9hdChibG9ja0luZGV4KSwgXCIrdStcIi4pICogXCIrYStcIi4gLSBcIitmK1wiLik7XFxuICAgICAgICAgICAgICBkMSA9IG9mZnNldFggKyBcIitjK1wiICogKGludChtb2QoZmxvYXQocG9zKSwgXCIrcCtcIi4pIC8gXCIrbytcIi4pKTtcXG5cXG4gICAgICAgICAgICAgIGlmKGQxIDwgXCIrZVt5XStcIiAmJiBkMSA+PSAwKSB7XFxuXFxuICAgICAgICAgICAgICAgIGNoID0gaW50KG1vZChmbG9hdChwb3MpLCBcIitvK1wiLikpO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoXCIrbStcIikge1xcbiAgICAgICAgICAgICAgICAgIGlubmVyRGltcyA9IHZlYzIoZDEsIGNoKTtcXG4gICAgICAgICAgICAgICAgICByZXN1bHRbXCIrKDIqYit3KStcIl0gPSBnZXRDaGFubmVsKFxcbiAgICAgICAgICAgICAgICAgICAgZ2V0QShkMCwgaW50KGlubmVyRGltcy54KSxcXG4gICAgICAgICAgICAgICAgICAgIGludChpbm5lckRpbXMueSkpLCBpbm5lckRpbXMpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgIGlubmVyRGltcyA9IHZlYzIoZDAsIGQxKTtcXG4gICAgICAgICAgICAgICAgICByZXN1bHRbXCIrKDIqYit3KStcIl0gPSBnZXRDaGFubmVsKFxcbiAgICAgICAgICAgICAgICAgICAgZ2V0QShjaCwgaW50KGlubmVyRGltcy54KSxcXG4gICAgICAgICAgICAgICAgICAgIGludChpbm5lckRpbXMueSkpLCBpbm5lckRpbXMpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICBcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgcmMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwKTtcXG5cXG4gICAgICAgIGludCBibG9ja0luZGV4LCBwb3MsIG9mZnNldFksIGQwLCBvZmZzZXRYLCBkMSwgY2g7XFxuICAgICAgICB2ZWMyIGlubmVyRGltcztcXG5cXG4gICAgICAgIFwiK3grXCJcXG5cXG4gICAgICAgIFwiK3Yub3V0cHV0K1wiID0gcmVzdWx0O1xcbiAgICAgIH1cXG4gICAgXCJ9LFdpPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sdGhpcy5vdXRwdXRTaGFwZT1bXTt2YXIgYSxpPWUscz10WzNdLTE7dGhpcy5vdXRwdXRTaGFwZT10O3ZhciB1PVwiZmxvYXQoXCIrbitcIikgKyBmbG9hdChcIityK1wiKSAqIHN1bVwiO2E9LjU9PT1vP1wiaW52ZXJzZXNxcnQoXCIrdStcIilcIjoxPT09bz9cIjEuMC8oXCIrdStcIilcIjpcImV4cChsb2coXCIrdStcIikgKiBmbG9hdCgtXCIrbytcIikpO1wiLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IHIgPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgYyA9IGNvb3Jkc1syXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcbiAgICAgICAgZmxvYXQgeCA9IGdldFgoYiwgciwgYywgZCk7XFxuICAgICAgICBmbG9hdCBzdW0gPSAwLjA7XFxuICAgICAgICBmb3IgKGludCBqID0gLVwiK2krXCI7IGogPD0gXCIraStcIjsgaisrKSB7XFxuICAgICAgICAgIGludCBpZHggPSBkICsgajtcXG4gICAgICAgICAgaWYgKGlkeCA+PSAwICYmIGlkeCA8PSAgXCIrcytcIikge1xcbiAgICAgICAgICAgIGZsb2F0IHogPSBnZXRYKGIsIHIsIGMsIGlkeCk7XFxuICAgICAgICAgICAgc3VtICs9IHogKiB6O1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBmbG9hdCB2YWwgPSB4ICogXCIrYStcIjtcXG4gICAgICAgIHNldE91dHB1dCh2YWwpO1xcbiAgICAgIH1cXG4gICAgXCJ9LFVpPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImlucHV0SW1hZ2VcIixcIm91dHB1dEltYWdlXCIsXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLmRlcHRoPXRbM10sdGhpcy5kZXB0aFJhZGl1cz1lLHRoaXMuYmlhcz1uLHRoaXMuYWxwaGE9cix0aGlzLmJldGE9byx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCByID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGMgPSBjb29yZHNbMl07XFxuXFxuICAgICAgICBmbG9hdCByZXN1bHQgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCBkID0gMDsgZCA8IFwiK3RoaXMuZGVwdGgrXCI7ICsrZCkge1xcbiAgICAgICAgICBpbnQgZGVwdGhCZWdpbiA9IGludChtYXgoMC4wLCBmbG9hdChkIC0gXCIrZStcIikpKTtcXG4gICAgICAgICAgaW50IGRlcHRoRW5kID0gaW50KG1pbihmbG9hdChcIit0aGlzLmRlcHRoK1wiKSxcXG4gICAgICAgICAgICAgIGZsb2F0KGQgKyBcIitlK1wiICsgMSkpKTtcXG5cXG4gICAgICAgICAgY29uc3QgaW50IE1JTl9ERVBUSF9CRUdJTiA9IDA7XFxuICAgICAgICAgIGNvbnN0IGludCBNQVhfREVQVEhfRU5EID0gXCIrdGhpcy5kZXB0aCtcIjtcXG5cXG4gICAgICAgICAgZmxvYXQgbm9ybSA9IDAuMDtcXG4gICAgICAgICAgZm9yIChpbnQgayA9IE1JTl9ERVBUSF9CRUdJTjsgayA8IE1BWF9ERVBUSF9FTkQ7ICsraykge1xcbiAgICAgICAgICAgIGlmIChrIDwgZGVwdGhCZWdpbil7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSBpZiAoayA+PSBkZXB0aEJlZ2luICYmIGsgPCBkZXB0aEVuZCkge1xcbiAgICAgICAgICAgICAgbm9ybSArPSBnZXRJbnB1dEltYWdlKGIsIHIsIGMsIGspICogZ2V0SW5wdXRJbWFnZShiLCByLCBjLCBrKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgbm9ybSA9IGZsb2F0KFwiK3IrXCIpICogbm9ybSArIGZsb2F0KFwiK24rXCIpO1xcblxcbiAgICAgICAgICBmb3IoaW50IGsgPSBNSU5fREVQVEhfQkVHSU47IGsgPCBNQVhfREVQVEhfRU5EOyArK2spe1xcbiAgICAgICAgICAgIGlmIChrIDwgZGVwdGhCZWdpbil7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSBpZiAoayA+PSBkZXB0aEJlZ2luICYmIGsgPCBkZXB0aEVuZCl7XFxuICAgICAgICAgICAgICBmbG9hdCBkeWkgPSAtMi4wICogZmxvYXQoXCIrcitcIilcXG4gICAgICAgICAgICAgICAgKiBmbG9hdChcIitvK1wiKVxcbiAgICAgICAgICAgICAgICAqIGdldElucHV0SW1hZ2UoYiAsciAsYywgaykgKiBnZXRPdXRwdXRJbWFnZShiLCByLCBjLCBkKVxcbiAgICAgICAgICAgICAgICAvIG5vcm07XFxuICAgICAgICAgICAgICBpZiAoayA9PSBkKSB7XFxuICAgICAgICAgICAgICAgIGR5aSArPSBwb3cobm9ybSwgLTEuMCAqIFwiK28rXCIpO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgaWYgKGsgPT0gY29vcmRzWzNdKSB7XFxuICAgICAgICAgICAgICAgIGR5aSAqPSBnZXREeShiLCByLCBjLCBkKTtcXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGR5aTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZWxzZSB7XFxuICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICB9XFxuICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn0sVmk9ZnVuY3Rpb24odCxlLG4scixvKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMucGFja2VkSW5wdXRzPSEwLHRoaXMucGFja2VkT3V0cHV0PSEwO3ZhciBhLGk9ZSxzPXRbM10tMTt0aGlzLm91dHB1dFNoYXBlPXQ7dmFyIHU9XCJmbG9hdChcIituK1wiKSArIGZsb2F0KFwiK3IrXCIpICogc3VtXCI7YT0uNT09PW8/XCJpbnZlcnNlc3FydChcIit1K1wiKVwiOjE9PT1vP1wiMS4wLyhcIit1K1wiKVwiOlwiZXhwKGxvZyhcIit1K1wiKSAqIGZsb2F0KC1cIitvK1wiKSk7XCIsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHMueDtcXG4gICAgICAgIGludCByID0gY29vcmRzLnk7XFxuICAgICAgICBpbnQgYyA9IGNvb3Jkcy56O1xcbiAgICAgICAgaW50IGQgPSBjb29yZHMudztcXG5cXG4gICAgICAgIGJvb2wgaGFzTmV4dENvbCA9IGQgPCBcIit0aGlzLm91dHB1dFNoYXBlWzNdK1wiO1xcbiAgICAgICAgYm9vbCBoYXNOZXh0Um93ID0gYyA8IFwiK3RoaXMub3V0cHV0U2hhcGVbMl0rXCI7XFxuXFxuICAgICAgICB2ZWM0IHN1bSA9IHZlYzQoMC4pO1xcbiAgICAgICAgdmVjNCB4RnJhZ0F0T3V0cHV0Q29vcmRzID0gZ2V0WChiLCByLCBjLCBkKTtcXG5cXG4gICAgICAgIHZlYzQgeEF0T3V0cHV0Q29vcmRzID0gdmVjNChcXG4gICAgICAgICAgZ2V0Q2hhbm5lbCh4RnJhZ0F0T3V0cHV0Q29vcmRzLCB2ZWMyKGMsIGQpKSxcXG4gICAgICAgICAgaGFzTmV4dENvbCA/XFxuICAgICAgICAgICAgZ2V0Q2hhbm5lbCh4RnJhZ0F0T3V0cHV0Q29vcmRzLCB2ZWMyKGMsIGQgKyAxKSkgOiAwLjAsXFxuICAgICAgICAgIGhhc05leHRSb3cgP1xcbiAgICAgICAgICAgIGdldENoYW5uZWwoeEZyYWdBdE91dHB1dENvb3JkcyAsIHZlYzIoYyArIDEsIGQpKSA6IDAuMCxcXG4gICAgICAgICAgKGhhc05leHRSb3cgJiYgaGFzTmV4dENvbCkgP1xcbiAgICAgICAgICAgIGdldENoYW5uZWwoeEZyYWdBdE91dHB1dENvb3JkcywgdmVjMihjICsgMSwgZCArIDEpKSA6IDAuMFxcbiAgICAgICAgKTtcXG5cXG4gICAgICAgIGludCBmaXJzdENoYW5uZWwgPSBkIC0gXCIraStcIjtcXG4gICAgICAgIHZlYzIgY2FjaGUgPSB2ZWMyKDAuKTtcXG4gICAgICAgIGlmKGZpcnN0Q2hhbm5lbCA+PSAwKXtcXG4gICAgICAgICAgdmVjNCBmaXJzdENoYW5uZWxGcmFnID0gZ2V0WChiLCByLCBjLCBmaXJzdENoYW5uZWwpO1xcbiAgICAgICAgICBjYWNoZS54ID0gZ2V0Q2hhbm5lbChmaXJzdENoYW5uZWxGcmFnLCB2ZWMyKGMsIGZpcnN0Q2hhbm5lbCkpO1xcbiAgICAgICAgICAgIGlmKGhhc05leHRSb3cpe1xcbiAgICAgICAgICAgICAgY2FjaGUueSA9IGdldENoYW5uZWwoZmlyc3RDaGFubmVsRnJhZywgdmVjMihjICsgMSwgZmlyc3RDaGFubmVsKSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgaXZlYzIgZGVwdGggPSBpdmVjMihkLCBkICsgMSk7XFxuICAgICAgICBmb3IgKGludCBqID0gLSBcIitpK1wiOyBqIDw9IFwiK2krXCI7IGorKykge1xcbiAgICAgICAgICBpdmVjMiBpZHggPSBkZXB0aCArIGo7XFxuICAgICAgICAgIGJ2ZWMyIGFib3ZlTG93ZXJCb3VuZCA9IGdyZWF0ZXJUaGFuRXF1YWwoaWR4LCBpdmVjMigwKSk7XFxuICAgICAgICAgIGJ2ZWMyIGJlbG93VXBwZXJCb3VuZCA9IGxlc3NUaGFuRXF1YWwoaWR4LCBpdmVjMihcIitzK1wiKSk7XFxuXFxuICAgICAgICAgIGJvb2wgZGVwdGhJblJhbmdlID0gYWJvdmVMb3dlckJvdW5kLnggJiYgYmVsb3dVcHBlckJvdW5kLng7XFxuICAgICAgICAgIGJvb2wgZGVwdGhQbHVzT25lSW5SYW5nZSA9IGFib3ZlTG93ZXJCb3VuZC55ICYmIGJlbG93VXBwZXJCb3VuZC55O1xcblxcbiAgICAgICAgICBpZihkZXB0aEluUmFuZ2UgfHwgZGVwdGhQbHVzT25lSW5SYW5nZSl7XFxuICAgICAgICAgICAgdmVjNCB6ID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgdmVjNCB4RnJhZ0F0Q3VycmVudERlcHRoO1xcbiAgICAgICAgICAgIHoueHogPSBjYWNoZS54eTtcXG4gICAgICAgICAgICBpZihkZXB0aFBsdXNPbmVJblJhbmdlICYmIGhhc05leHRDb2wpe1xcbiAgICAgICAgICAgICAgeEZyYWdBdEN1cnJlbnREZXB0aCA9IGlkeC55ICE9IGQgP1xcbiAgICAgICAgICAgICAgICBnZXRYKGIsIHIsIGMsIGlkeC55KSA6IHhGcmFnQXRPdXRwdXRDb29yZHM7XFxuICAgICAgICAgICAgICB6LnkgPSBnZXRDaGFubmVsKHhGcmFnQXRDdXJyZW50RGVwdGgsIHZlYzIoYywgaWR4LnkpKTtcXG4gICAgICAgICAgICAgIGlmKGhhc05leHRSb3cpe1xcbiAgICAgICAgICAgICAgICB6LncgPSBnZXRDaGFubmVsKHhGcmFnQXRDdXJyZW50RGVwdGgsIHZlYzIoYyArIDEsIGlkeC55KSk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGNhY2hlLnh5ID0gei55dztcXG4gICAgICAgICAgICBzdW0gKz0geiAqIHo7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0geEF0T3V0cHV0Q29vcmRzICogXCIrYStcIjtcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LHppPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiLFwibWF4UG9zXCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuc3RyaWRlSGVpZ2h0LG49dC5zdHJpZGVXaWR0aCxyPXQuZGlsYXRpb25IZWlnaHQsbz10LmVmZmVjdGl2ZUZpbHRlckhlaWdodCxhPXQuZWZmZWN0aXZlRmlsdGVyV2lkdGgsaT1vLTEtdC5wYWRJbmZvLnRvcCxzPWEtMS10LnBhZEluZm8ubGVmdCx1PW8qYS0xO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIraStcIiwgXCIrcytcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgaXZlYzIgZHlSQ0Nvcm5lciA9IGNvb3Jkcy55eiAtIHBhZHM7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5UkNDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIGR5KD8sID8sIGQpIHdpdGggcG9zIG1hc2soOiwgOiwgZCkgdG8gZ2V0IGR4KHhSLCB4QywgZCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrbytcIjtcXG4gICAgICAgICAgd1IgKz0gXCIrcitcIikge1xcbiAgICAgICAgICBmbG9hdCBkeVIgPSBmbG9hdChkeVJDb3JuZXIgKyB3UikgLyBcIitlK1wiLjA7XFxuXFxuICAgICAgICAgIGlmIChkeVIgPCAwLjAgfHwgZHlSID49IFwiK3Qub3V0SGVpZ2h0K1wiLjAgfHwgZnJhY3QoZHlSKSA+IDAuMCkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIGludCBpZHlSID0gaW50KGR5Uik7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIithK1wiOyB3QysrKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIrbitcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwLjAgfHwgZHlDID49IFwiK3Qub3V0V2lkdGgrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgaWR5UiwgaWR5QywgZCk7XFxuICAgICAgICAgICAgaW50IG1heFBvc1ZhbHVlID0gXCIrdStcIiAtIGludChnZXRNYXhQb3MoYiwgaWR5UiwgaWR5QywgZCkpO1xcblxcbiAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCB2YWx1ZSwgY2hlY2sgaXQgYWdhaW5zdCB0aGUgdmFsdWUgZnJvbSB0aGVcXG4gICAgICAgICAgICAvLyBwb3NpdGlvbiBtYXRyaXguXFxuICAgICAgICAgICAgaW50IGN1clBvc1ZhbHVlID0gd1IgKiBcIithK1wiICsgd0M7XFxuICAgICAgICAgICAgZmxvYXQgbWFzayA9IGZsb2F0KG1heFBvc1ZhbHVlID09IGN1clBvc1ZhbHVlID8gMS4wIDogMC4wKTtcXG5cXG4gICAgICAgICAgICBkb3RQcm9kICs9IGR5VmFsdWUgKiBtYXNrO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn0sR2k9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCIsXCJtYXhQb3NcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmluU2hhcGU7dmFyIGU9dC5zdHJpZGVEZXB0aCxuPXQuc3RyaWRlSGVpZ2h0LHI9dC5zdHJpZGVXaWR0aCxvPXQuZGlsYXRpb25EZXB0aCxhPXQuZGlsYXRpb25IZWlnaHQsaT10LmRpbGF0aW9uV2lkdGgscz10LmVmZmVjdGl2ZUZpbHRlckRlcHRoLHU9dC5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsYz10LmVmZmVjdGl2ZUZpbHRlcldpZHRoLGw9cy0xLXQucGFkSW5mby5mcm9udCxoPXUtMS10LnBhZEluZm8udG9wLGY9Yy0xLXQucGFkSW5mby5sZWZ0LGQ9cyp1KmMtMTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzMgcGFkcyA9IGl2ZWMzKFwiK2wrXCIsIFwiK2grXCIsIFwiK2YrXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgY2ggPSBjb29yZHMudTtcXG5cXG4gICAgICAgIGl2ZWMzIGR5Q29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgLSBwYWRzO1xcbiAgICAgICAgaW50IGR5RENvcm5lciA9IGR5Q29ybmVyLng7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlDb3JuZXIueTtcXG4gICAgICAgIGludCBkeUNDb3JuZXIgPSBkeUNvcm5lci56O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgZHkoPywgPywgPywgY2gpIHdpdGggcG9zIG1hc2soOiwgOiwgOiwgZCkgdG8gZ2V0XFxuICAgICAgICAvLyBkeCh4RCwgeFIsIHhDLCBjaCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCB3RCA9IDA7IHdEIDwgXCIrcytcIjtcXG4gICAgICAgICAgIHdEICs9IFwiK28rXCIpIHtcXG4gICAgICAgICAgZmxvYXQgZHlEID0gZmxvYXQoZHlEQ29ybmVyICsgd0QpIC8gXCIrZStcIi4wO1xcblxcbiAgICAgICAgICBpZiAoZHlEIDwgMC4wIHx8IGR5RCA+PSBcIit0Lm91dERlcHRoK1wiLjAgfHwgZnJhY3QoZHlEKSA+IDAuMCkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIGludCBpZHlEID0gaW50KGR5RCk7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIit1K1wiO1xcbiAgICAgICAgICAgICAgd1IgKz0gXCIrYStcIikge1xcbiAgICAgICAgICAgIGZsb2F0IGR5UiA9IGZsb2F0KGR5UkNvcm5lciArIHdSKSAvIFwiK24rXCIuMDtcXG5cXG4gICAgICAgICAgICBpZiAoZHlSIDwgMC4wIHx8IGR5UiA+PSBcIit0Lm91dEhlaWdodCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgIGZyYWN0KGR5UikgPiAwLjApIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnQgaWR5UiA9IGludChkeVIpO1xcblxcbiAgICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIitjK1wiO1xcbiAgICAgICAgICAgICAgICB3QyArPSBcIitpK1wiKSB7XFxuICAgICAgICAgICAgICBmbG9hdCBkeUMgPSBmbG9hdChkeUNDb3JuZXIgKyB3QykgLyBcIityK1wiLjA7XFxuXFxuICAgICAgICAgICAgICBpZiAoZHlDIDwgMC4wIHx8IGR5QyA+PSBcIit0Lm91dFdpZHRoK1wiLjAgfHxcXG4gICAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSBnZXREeShiYXRjaCwgaWR5RCwgaWR5UiwgaWR5QywgY2gpO1xcbiAgICAgICAgICAgICAgaW50IG1heFBvc1ZhbHVlID0gXCIrZCtcIiAtXFxuICAgICAgICAgICAgICAgICAgaW50KGdldE1heFBvcyhiYXRjaCwgaWR5RCwgaWR5UiwgaWR5QywgY2gpKTtcXG5cXG4gICAgICAgICAgICAgIC8vIEdldCB0aGUgY3VycmVudCB2YWx1ZSwgY2hlY2sgaXQgYWdhaW5zdCB0aGUgdmFsdWUgZnJvbSB0aGVcXG4gICAgICAgICAgICAgIC8vIHBvc2l0aW9uIG1hdHJpeC5cXG4gICAgICAgICAgICAgIGludCBjdXJQb3NWYWx1ZSA9XFxuICAgICAgICAgICAgICAgICAgd0QgKiBcIit1K1wiICogXCIrYytcIiArXFxuICAgICAgICAgICAgICAgICAgd1IgKiBcIitjK1wiICsgd0M7XFxuICAgICAgICAgICAgICBmbG9hdCBtYXNrID0gZmxvYXQobWF4UG9zVmFsdWUgPT0gY3VyUG9zVmFsdWUgPyAxLjAgOiAwLjApO1xcblxcbiAgICAgICAgICAgICAgZG90UHJvZCArPSBkeVZhbHVlICogbWFzaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifSxIaT1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1uJiYobj0hMSksdm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW8mJihvPSExKSx2b2lkIDA9PT1hJiYoYT1udWxsKSx2b2lkIDA9PT1pJiYoaT0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcIm1hdHJpeEFcIixcIm1hdHJpeEJcIl0sdGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITAsdGhpcy5vdXRwdXRTaGFwZT1lO3ZhciBzPW4/dFsxXTp0WzJdLHU9TWF0aC5jZWlsKHMvMiksYz1uP1wiaSAqIDIsIHJjLnlcIjpcInJjLnksIGkgKiAyXCIsbD1yP1wicmMueiwgaSAqIDJcIjpcImkgKiAyLCByYy56XCIsaD1uP1tcImEueHh5eVwiLFwiYS56end3XCJdOltcImEueHh6elwiLFwiYS55eXd3XCJdLGY9cj9bXCJiLnh6eHpcIixcImIueXd5d1wiXTpbXCJiLnh5eHlcIixcImIuend6d1wiXSxkPVwiXCIscD1cIlwiO2EmJihkPWk/XCJ2ZWM0IGFjdGl2YXRpb24odmVjNCBhKSB7XFxuICAgICAgICAgIHZlYzQgYiA9IGdldFByZWx1QWN0aXZhdGlvbldlaWdodHNBdE91dENvb3JkcygpO1xcbiAgICAgICAgICBcIithK1wiXFxuICAgICAgICB9XCI6XCJ2ZWM0IGFjdGl2YXRpb24odmVjNCB4KSB7XFxuICAgICAgICAgIFwiK2ErXCJcXG4gICAgICAgIH1cIixwPVwicmVzdWx0ID0gYWN0aXZhdGlvbihyZXN1bHQpO1wiKTt2YXIgdj1vP1wicmVzdWx0ICs9IGdldEJpYXNBdE91dENvb3JkcygpO1wiOlwiXCI7byYmdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJiaWFzXCIpLGkmJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwicHJlbHVBY3RpdmF0aW9uV2VpZ2h0c1wiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrZCtcIlxcblxcbiAgICAgIGNvbnN0IGZsb2F0IHNoYXJlZERpbWVuc2lvbiA9IFwiK3UrXCIuMDtcXG5cXG4gICAgICB2ZWM0IGRvdDJ4MkFSb3dCQ29sKGl2ZWMzIHJjKSB7XFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMCk7XFxuICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK3UrXCI7IGkrKykge1xcbiAgICAgICAgICB2ZWM0IGEgPSBnZXRNYXRyaXhBKHJjLngsIFwiK2MrXCIpO1xcbiAgICAgICAgICB2ZWM0IGIgPSBnZXRNYXRyaXhCKHJjLngsIFwiK2wrXCIpO1xcblxcbiAgICAgICAgICAvLyBUaGVzZSBzd2l6emxlZCBwcm9kdWN0cyBuZWVkIHRvIGJlIHNlcGFyYXRlbHkgYWRkZWQuXFxuICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL3RlbnNvcmZsb3cvdGZqcy9pc3N1ZXMvMTczNVxcbiAgICAgICAgICByZXN1bHQgKz0gKFwiK2hbMF0rXCIgKiBcIitmWzBdK1wiKTtcXG4gICAgICAgICAgcmVzdWx0ICs9IChcIitoWzFdK1wiICogXCIrZlsxXStcIik7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyByYyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCByZXN1bHQgPSBkb3QyeDJBUm93QkNvbChyYyk7XFxuXFxuICAgICAgICBcIit2K1wiXFxuXFxuICAgICAgICBcIitwK1wiXFxuXFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifSxxaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJwcm9ic1wiXSx0aGlzLm91dHB1dFNoYXBlPVt0LG5dLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB1bmlmb3JtIGZsb2F0IHNlZWQ7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuXFxuICAgICAgICBmbG9hdCByID0gcmFuZG9tKHNlZWQpO1xcbiAgICAgICAgZmxvYXQgY2RmID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIisoZS0xKStcIjsgaSsrKSB7XFxuICAgICAgICAgIGNkZiArPSBnZXRQcm9icyhiYXRjaCwgaSk7XFxuXFxuICAgICAgICAgIGlmIChyIDwgY2RmKSB7XFxuICAgICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KGkpKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC8vIElmIG5vIG90aGVyIGV2ZW50IGhhcHBlbmVkLCBsYXN0IGV2ZW50IGhhcHBlbmVkLlxcbiAgICAgICAgc2V0T3V0cHV0KGZsb2F0KFwiKyhlLTEpK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKG4scil7bnVsbD09ZS5zZWVkTG9jJiYoZS5zZWVkTG9jPW4uZ2V0VW5pZm9ybUxvY2F0aW9uKHIsXCJzZWVkXCIpKSxuLmdsLnVuaWZvcm0xZihlLnNlZWRMb2MsdCl9fSx0fSgpLEtpPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJpbmRpY2VzXCJdLHRoaXMub3V0cHV0U2hhcGU9W3QsZV0sdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGluZGV4ID0gcm91bmQoZ2V0SW5kaWNlcyhjb29yZHMueCkpO1xcbiAgICAgICAgc2V0T3V0cHV0KG1peChmbG9hdChcIityK1wiKSwgZmxvYXQoXCIrbitcIiksXFxuICAgICAgICAgICAgICAgICAgICAgIGZsb2F0KGluZGV4ID09IGNvb3Jkcy55KSkpO1xcbiAgICAgIH1cXG4gICAgXCJ9LGppPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMucGFja2VkSW5wdXRzPSExLHRoaXMucGFja2VkT3V0cHV0PSEwLHRoaXMub3V0cHV0U2hhcGU9dDt2YXIgZT10Lmxlbmd0aDtpZigwPT09ZSl0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAgIHNldE91dHB1dCh2ZWM0KGdldEEoKSwgMC4sIDAuLCAwLikpO1xcbiAgICAgICAgfVxcbiAgICAgIFwiO2Vsc2V7dmFyIG49c2EoXCJyY1wiLGUpLHI9d2EoZSksbz1mdW5jdGlvbih0LGUsbil7aWYoMT09PXQpcmV0dXJuXCJyYyA+IFwiK2VbMF07Zm9yKHZhciByPVwiXCIsbz10LTI7bzx0O28rKylyKz1uW29dK1wiID49IFwiK2Vbb10sbzx0LTEmJihyKz1cInx8XCIpO3JldHVybiByfShlLHQsbiksYT1mdW5jdGlvbih0LGUsbixyKXtpZigxPT09dClyZXR1cm5cIlwiO3ZhciBvPXIuc2xpY2UoLTIpO3JldHVyblwiXFxuICAgIGludCByID0gXCIrb1swXStcIjtcXG4gICAgaW50IGMgPSBcIitvWzFdK1wiO1xcbiAgICBpbnQgcnAxID0gciArIDE7XFxuICAgIGludCBjcDEgPSBjICsgMTtcXG5cXG4gICAgYm9vbCBjRWRnZSA9IGNwMSA+PSBcIitlK1wiO1xcbiAgICBib29sIHJFZGdlID0gcnAxID49IFwiK24rXCI7XFxuICBcIn0oZSx0W3QubGVuZ3RoLTFdLHRbdC5sZW5ndGgtMl0sbiksaT1mdW5jdGlvbih0LGUpe3ZhciBuPXQubGVuZ3RoLHI9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W10scj0wO3I8PTE7cisrKWZvcih2YXIgbz0wO288PTE7bysrKXtmb3IodmFyIGE9KDA9PT1yP1wiclwiOlwicnAxXCIpK1wiLCBcIisoMD09PW8/XCJjXCI6XCJjcDFcIiksaT0yO2k8dDtpKyspYT1lW2UubGVuZ3RoLTEtaV0rXCIsXCIrYTtuLnB1c2goYSl9cmV0dXJuIG59KG4sZSk7cmV0dXJuIDE9PT1uP1wiZ2V0QShyYyksXFxuICAgICAgICAgICAgcmMgKyAxID49IFwiK3RbMF0rXCIgPyAwLiA6IGdldEEocmMgKyAxKSxcXG4gICAgICAgICAgICAwLCAwXCI6XCJnZXRBKFwiK3JbMF0rXCIpLFxcbiAgICAgICAgICBjRWRnZSA/IDAuIDogZ2V0QShcIityWzFdK1wiKSxcXG4gICAgICAgICAgckVkZ2UgPyAwLiA6IGdldEEoXCIrclsyXStcIiksXFxuICAgICAgICAgIHJFZGdlIHx8IGNFZGdlID8gMC4gOiBnZXRBKFwiK3JbM10rXCIpXCJ9KHQsbik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBcIityK1wiIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuXFxuICAgICAgICAgIGlmKFwiK28rXCIpIHtcXG4gICAgICAgICAgICBzZXRPdXRwdXQodmVjNCgwKSk7XFxuICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgXCIrYStcIlxcblxcbiAgICAgICAgICAgIHNldE91dHB1dCh2ZWM0KFwiK2krXCIpKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFwifX07dmFyIFhpPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLm91dHB1dFNoYXBlPWUubWFwKChmdW5jdGlvbihlLG4pe3JldHVybiBlWzBdK3Rbbl0rZVsxXX0pKTt2YXIgcj10Lmxlbmd0aCxvPXdhKHIpLGE9ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfSkpLmpvaW4oXCIsXCIpLGk9ZS5tYXAoKGZ1bmN0aW9uKGUsbil7cmV0dXJuIGVbMF0rdFtuXX0pKS5qb2luKFwiLFwiKSxzPVtcImNvb3Jkc1swXVwiLFwiY29vcmRzWzFdXCIsXCJjb29yZHNbMl1cIixcImNvb3Jkc1szXVwiXS5zbGljZSgwLHIpO3RoaXMudXNlckNvZGU9MSE9PXI/XCJcXG4gICAgICBcIitvK1wiIHN0YXJ0ID0gXCIrbytcIihcIithK1wiKTtcXG4gICAgICBcIitvK1wiIGVuZCA9IFwiK28rXCIoXCIraStcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrbytcIiBvdXRDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpZiAoYW55KGxlc3NUaGFuKG91dEMsIHN0YXJ0KSkgfHwgYW55KGdyZWF0ZXJUaGFuRXF1YWwob3V0QywgZW5kKSkpIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KFwiK24rXCIpKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIFwiK28rXCIgY29vcmRzID0gb3V0QyAtIHN0YXJ0O1xcbiAgICAgICAgICBzZXRPdXRwdXQoZ2V0WChcIitzK1wiKSk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICBcIjpcIlxcbiAgICAgICAgaW50IHN0YXJ0ID0gXCIrYStcIjtcXG4gICAgICAgIGludCBlbmQgPSBcIitpK1wiO1xcblxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBpbnQgb3V0QyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICBpZiAob3V0QyA8IHN0YXJ0IHx8IG91dEMgPj0gZW5kKSB7XFxuICAgICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KFwiK24rXCIpKTtcXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBzZXRPdXRwdXQoZ2V0WChvdXRDIC0gc3RhcnQpKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFwifSxZaT1mdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sdGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITAsdGhpcy5vdXRwdXRTaGFwZT1lLm1hcCgoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVswXSt0W25dK2VbMV19KSk7Zm9yKHZhciByPXQubGVuZ3RoLG89d2EociksYT1lLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF19KSkuam9pbihcIixcIiksaT1lLm1hcCgoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVswXSt0W25dfSkpLmpvaW4oXCIsXCIpLHM9c2EoXCJyY1wiLHIpLHU9c2EoXCJzb3VyY2VcIixyKSxjPXNbci0xXStcIiA8IFwiK3RoaXMub3V0cHV0U2hhcGVbci0xXSxsPTE9PT1yP1wic291cmNlXCI6XCJ2ZWMyKFwiK3Uuc2xpY2UoLTIpLmpvaW4oKStcIilcIixoPVtvK1wiIHJjID0gb3V0cHV0TG9jO1wiLHNbci0xXStcIiArPSAxO1xcbiAgICAgICBpZihcIitjK1wiKSB7XFxuICAgICAgXCIsMT09PXI/XCJcIjpcIn1cXG4gICAgICAgcmMgPSBvdXRwdXRMb2M7XFxuICAgICAgIFwiK3Nbci0yXStcIiArPSAxO1xcbiAgICAgICBpZihcIitzW3ItMl0rXCIgPCBcIit0aGlzLm91dHB1dFNoYXBlW3ItMl0rXCIpIHtcIiwxPT09cj9cIlwiOlwiICBcIitzW3ItMV0rXCIgKz0gMTtcXG4gICAgICAgICBpZihcIitjK1wiKSB7XCJdLGY9MT09PXI/XCJyYyA8IHN0YXJ0IHx8IHJjID49IGVuZFwiOlwiYW55KGxlc3NUaGFuKHJjLCBzdGFydCkpIHx8IGFueShncmVhdGVyVGhhbkVxdWFsKHJjLCBlbmQpKVwiLGQ9XCJcIixwPTAsdj0xPT09cj8yOjQ7cDx2O3ArKylkKz1cIlxcbiAgICAgICAgXCIraFtwXStcIlxcbiAgICAgICAgaWYgKFwiK2YrXCIpIHtcXG4gICAgICAgICAgcmVzdWx0W1wiK3ArXCJdID0gZmxvYXQoXCIrbitcIik7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICBcIitvK1wiIHNvdXJjZSA9IHJjIC0gc3RhcnQ7XFxuICAgICAgICAgIHJlc3VsdFtcIitwK1wiXSA9IGdldENoYW5uZWwoZ2V0WChcIit1LmpvaW4oKStcIiksIFwiK2wrXCIpO1xcbiAgICAgICAgfVxcbiAgICAgIFwiO2QrPTE9PT1yP1wifSBcIjpcIn19XCIsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IFwiK28rXCIgc3RhcnQgPSBcIitvK1wiKFwiK2ErXCIpO1xcbiAgICAgIGNvbnN0IFwiK28rXCIgZW5kID0gXCIrbytcIihcIitpK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIG91dHB1dExvYyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG4gICAgICAgIFwiK2QrXCJcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9LCRpPWZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSxcImF2Z1wiPT09ZSYmbil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBwb3NpdGlvbnMgZm9yIGF2ZXJhZ2UgcG9vbC5cIik7dmFyIHI9dC5maWx0ZXJXaWR0aCxvPXQuc3RyaWRlSGVpZ2h0LGE9dC5zdHJpZGVXaWR0aCxpPXQuZGlsYXRpb25IZWlnaHQscz10LmRpbGF0aW9uV2lkdGgsdT10LmVmZmVjdGl2ZUZpbHRlckhlaWdodCxjPXQuZWZmZWN0aXZlRmlsdGVyV2lkdGgsbD10LnBhZEluZm8udG9wLGg9dC5wYWRJbmZvLmxlZnQ7dGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO3ZhciBmPVwiYXZnXCI9PT1lLGQ9XCIwLjBcIjtpZihmfHwoZD1cIi0xLjAgLyAxZS0yMFwiKSxuKXRoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIGNvbnN0IGl2ZWMyIHN0cmlkZXMgPSBpdmVjMihcIitvK1wiLCBcIithK1wiKTtcXG4gICAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitsK1wiLCBcIitoK1wiKTtcXG5cXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuXFxuICAgICAgICAgIGl2ZWMyIHhSQ0Nvcm5lciA9IGNvb3Jkcy55eiAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgICBpbnQgeFJDb3JuZXIgPSB4UkNDb3JuZXIueDtcXG4gICAgICAgICAgaW50IHhDQ29ybmVyID0geFJDQ29ybmVyLnk7XFxuXFxuICAgICAgICAgIC8vIG1heC9taW4geCg/LCA/LCBkKSB0byBnZXQgeSh5UiwgeUMsIGQpLlxcbiAgICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZFxcbiAgICAgICAgICBmbG9hdCBtaW5NYXhWYWx1ZSA9IDAuMDtcXG4gICAgICAgICAgZmxvYXQgbWluTWF4VmFsdWVGb3VuZCA9IDAuMDtcXG4gICAgICAgICAgaW50IG1pbk1heFBvc2l0aW9uID0gMDtcXG4gICAgICAgICAgZmxvYXQgYXZnVmFsdWUgPSAwLjA7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIit1K1wiO1xcbiAgICAgICAgICAgICAgd1IgKz0gXCIraStcIikge1xcbiAgICAgICAgICAgIGludCB4UiA9IHhSQ29ybmVyICsgd1I7XFxuXFxuICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK2MrXCI7XFxuICAgICAgICAgICAgICAgIHdDICs9IFwiK3MrXCIpIHtcXG4gICAgICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgd0M7XFxuXFxuICAgICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGZsb2F0IHZhbHVlID0gZ2V0WChiYXRjaCwgeFIsIHhDLCBkKTtcXG5cXG4gICAgICAgICAgICAgIC8vIElmIGEgbWluIC8gbWF4IHZhbHVlIGhhcyBhbHJlYWR5IGJlZW4gZm91bmQsIHVzZSBpdC4gSWYgbm90LFxcbiAgICAgICAgICAgICAgLy8gdXNlIHRoZSBjdXJyZW50IHZhbHVlLlxcbiAgICAgICAgICAgICAgZmxvYXQgY3Vyck1pbk1heFZhbHVlID0gbWl4KFxcbiAgICAgICAgICAgICAgICAgIHZhbHVlLCBtaW5NYXhWYWx1ZSwgbWluTWF4VmFsdWVGb3VuZCk7XFxuICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gY3Vyck1pbk1heFZhbHVlKSB7XFxuICAgICAgICAgICAgICAgIG1pbk1heFZhbHVlID0gdmFsdWU7XFxuICAgICAgICAgICAgICAgIG1pbk1heFZhbHVlRm91bmQgPSAxLjA7XFxuICAgICAgICAgICAgICAgIG1pbk1heFBvc2l0aW9uID0gd1IgKiBcIitjK1wiICsgd0M7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICAgIHNldE91dHB1dChmbG9hdChtaW5NYXhQb3NpdGlvbikpO1xcbiAgICAgICAgfVxcbiAgICAgIFwiO2Vsc2V7dmFyIHA9ZStcIihcIitlK1wiKFwiK2UrXCIobWluTWF4VmFsdWVbMF0sIG1pbk1heFZhbHVlWzFdKSwgbWluTWF4VmFsdWVbMl0pLCBtaW5NYXhWYWx1ZVszXSlcIjtcImF2Z1wiPT09ZSYmKHA9XCJhdmdWYWx1ZSAvIGNvdW50XCIpO3ZhciB2PTQqTWF0aC5mbG9vcihyLzQpLG09ciU0LGc9XCJcXG4gICAgICBpZiAoXCIrZitcIikge1xcbiAgICAgICAgYXZnVmFsdWUgKz0gZG90KHZhbHVlcywgb25lcyk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIG1pbk1heFZhbHVlID0gbWF4KHZhbHVlcywgbWluTWF4VmFsdWUpO1xcbiAgICAgIH1cXG4gICAgXCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHN0cmlkZXMgPSBpdmVjMihcIitvK1wiLCBcIithK1wiKTtcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIrbCtcIiwgXCIraCtcIik7XFxuICAgICAgY29uc3QgZmxvYXQgaW5pdGlhbGl6YXRpb25WYWx1ZSA9IFwiK2QrXCI7XFxuICAgICAgY29uc3QgdmVjNCBvbmVzID0gdmVjNCgxLjAsIDEuMCwgMS4wLCAxLjApO1xcblxcbiAgICAgIGZsb2F0IGNvdW50ID0gMC4wO1xcblxcbiAgICAgIGZsb2F0IGdldFZhbHVlKGludCBiYXRjaCwgaW50IHhSLCBpbnQgeEMsIGludCBkKSB7XFxuICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICByZXR1cm4gaW5pdGlhbGl6YXRpb25WYWx1ZTtcXG4gICAgICAgIH1cXG4gICAgICAgIGNvdW50ICs9IDEuMDtcXG4gICAgICAgIHJldHVybiBnZXRYKGJhdGNoLCB4UiwgeEMsIGQpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgaXZlYzIgeFJDQ29ybmVyID0gY29vcmRzLnl6ICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICBpbnQgeFJDb3JuZXIgPSB4UkNDb3JuZXIueDtcXG4gICAgICAgIGludCB4Q0Nvcm5lciA9IHhSQ0Nvcm5lci55O1xcblxcbiAgICAgICAgLy8gbWF4L21pbiB4KD8sID8sIGQpIHRvIGdldCB5KHlSLCB5QywgZCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZFxcbiAgICAgICAgdmVjNCBtaW5NYXhWYWx1ZSA9IHZlYzQoXCIrZCtcIik7XFxuICAgICAgICBmbG9hdCBhdmdWYWx1ZSA9IDAuMDtcXG4gICAgICAgIGNvdW50ID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK3UrXCI7XFxuICAgICAgICAgICAgd1IgKz0gXCIraStcIikge1xcbiAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSO1xcblxcbiAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrditcIjsgd0MgKz0gNCkge1xcbiAgICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgd0MgKiBcIitzK1wiO1xcblxcbiAgICAgICAgICAgIHZlYzQgdmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMsIGQpLFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QyArIFwiK3MrXCIsIGQpLFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QyArIDIgKiBcIitzK1wiLCBkKSxcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMgKyAzICogXCIrcytcIiwgZClcXG4gICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgIFwiK2crXCJcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIFwiK3YrXCI7XFxuICAgICAgICAgIGlmIChcIisoMT09PW0pK1wiKSB7XFxuICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QywgZCksXFxuICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgIFwiK2crXCJcXG4gICAgICAgICAgfSBlbHNlIGlmIChcIisoMj09PW0pK1wiKSB7XFxuICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QywgZCksXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDICsgXCIrcytcIiwgZCksXFxuICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgXCIrZytcIlxcbiAgICAgICAgICB9IGVsc2UgaWYgKFwiKygzPT09bSkrXCIpIHtcXG4gICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDLCBkKSxcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMgKyBcIitzK1wiLCBkKSxcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMgKyAyICogXCIrcytcIiwgZCksXFxuICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICBcIitnK1wiXFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChcIitwK1wiKTtcXG4gICAgICB9XFxuICAgIFwifX0sUWk9ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLFwiYXZnXCI9PT1lJiZuKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb21wdXRlIHBvc2l0aW9ucyBmb3IgYXZlcmFnZSBwb29sLlwiKTt2YXIgcj10LmZpbHRlcldpZHRoLG89dC5zdHJpZGVEZXB0aCxhPXQuc3RyaWRlSGVpZ2h0LGk9dC5zdHJpZGVXaWR0aCxzPXQuZGlsYXRpb25EZXB0aCx1PXQuZGlsYXRpb25IZWlnaHQsYz10LmRpbGF0aW9uV2lkdGgsbD10LmVmZmVjdGl2ZUZpbHRlckRlcHRoLGg9dC5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsZj10LmVmZmVjdGl2ZUZpbHRlcldpZHRoLGQ9dC5wYWRJbmZvLmZyb250LHA9dC5wYWRJbmZvLnRvcCx2PXQucGFkSW5mby5sZWZ0O3RoaXMub3V0cHV0U2hhcGU9dC5vdXRTaGFwZTt2YXIgbT1cImF2Z1wiPT09ZSxnPVwiMC4wXCI7aWYobXx8KGc9XCItMS4wIC8gMWUtMjBcIiksbil0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgICBjb25zdCBpdmVjMyBzdHJpZGVzID1cXG4gICAgICAgICAgICBpdmVjMyhcIitvK1wiLCBcIithK1wiLCBcIitpK1wiKTtcXG4gICAgICAgIGNvbnN0IGl2ZWMzIHBhZHMgPSBpdmVjMyhcIitkK1wiLCBcIitwK1wiLCBcIit2K1wiKTtcXG5cXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaXZlYzUgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGludCBiYXRjaCA9IGNvb3Jkcy54O1xcbiAgICAgICAgICBpbnQgY2ggPSBjb29yZHMudTtcXG5cXG4gICAgICAgICAgaXZlYzMgeENvcm5lciA9IGl2ZWMzKGNvb3Jkcy55LCBjb29yZHMueiwgY29vcmRzLncpICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICAgIGludCB4RENvcm5lciA9IHhDb3JuZXIueDtcXG4gICAgICAgICAgaW50IHhSQ29ybmVyID0geENvcm5lci55O1xcbiAgICAgICAgICBpbnQgeENDb3JuZXIgPSB4Q29ybmVyLno7XFxuXFxuICAgICAgICAgIC8vIG1heC9taW4geCg/LCA/LCA/LCBjaCkgdG8gZ2V0IHkoeUQsIHlSLCB5QywgY2gpLlxcbiAgICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZFxcbiAgICAgICAgICBmbG9hdCBtaW5NYXhWYWx1ZSA9IDAuMDtcXG4gICAgICAgICAgZmxvYXQgbWluTWF4VmFsdWVGb3VuZCA9IDAuMDtcXG4gICAgICAgICAgaW50IG1pbk1heFBvc2l0aW9uID0gMDtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0QgPSAwOyB3RCA8IFwiK2wrXCI7XFxuICAgICAgICAgICAgICB3RCArPSBcIitzK1wiKSB7XFxuICAgICAgICAgICAgaW50IHhEID0geERDb3JuZXIgKyB3RDtcXG5cXG4gICAgICAgICAgICBpZiAoeEQgPCAwIHx8IHhEID49IFwiK3QuaW5EZXB0aCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIitoK1wiO1xcbiAgICAgICAgICAgICAgICB3UiArPSBcIit1K1wiKSB7XFxuICAgICAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSO1xcblxcbiAgICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK2YrXCI7XFxuICAgICAgICAgICAgICAgICAgd0MgKz0gXCIrYytcIikge1xcbiAgICAgICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDO1xcblxcbiAgICAgICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGZsb2F0IHZhbHVlID0gZ2V0WChiYXRjaCwgeEQsIHhSLCB4QywgY2gpO1xcblxcbiAgICAgICAgICAgICAgICAvLyBJZiBhIG1pbiAvIG1heCB2YWx1ZSBoYXMgYWxyZWFkeSBiZWVuIGZvdW5kLCB1c2UgaXQuIElmIG5vdCxcXG4gICAgICAgICAgICAgICAgLy8gdXNlIHRoZSBjdXJyZW50IHZhbHVlLlxcbiAgICAgICAgICAgICAgICBmbG9hdCBjdXJyTWluTWF4VmFsdWUgPSBtaXgoXFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZSwgbWluTWF4VmFsdWUsIG1pbk1heFZhbHVlRm91bmQpO1xcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gY3Vyck1pbk1heFZhbHVlKSB7XFxuICAgICAgICAgICAgICAgICAgbWluTWF4VmFsdWUgPSB2YWx1ZTtcXG4gICAgICAgICAgICAgICAgICBtaW5NYXhWYWx1ZUZvdW5kID0gMS4wO1xcbiAgICAgICAgICAgICAgICAgIG1pbk1heFBvc2l0aW9uID1cXG4gICAgICAgICAgICAgICAgICAgICAgd0QgKiBcIitoK1wiICogXCIrZitcIiArXFxuICAgICAgICAgICAgICAgICAgICAgIHdSICogXCIrZitcIiArIHdDOztcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgICBzZXRPdXRwdXQoZmxvYXQobWluTWF4UG9zaXRpb24pKTtcXG4gICAgICAgIH1cXG4gICAgICBcIjtlbHNle3ZhciB5PWUrXCIoXCIrZStcIihcIitlK1wiKG1pbk1heFZhbHVlWzBdLCBtaW5NYXhWYWx1ZVsxXSksIG1pbk1heFZhbHVlWzJdKSwgbWluTWF4VmFsdWVbM10pXCI7XCJhdmdcIj09PWUmJih5PVwiYXZnVmFsdWUgLyBjb3VudFwiKTt2YXIgeD00Kk1hdGguZmxvb3Ioci80KSxiPXIlNCx3PVwiXFxuICAgICAgaWYgKFwiK20rXCIpIHtcXG4gICAgICAgIGF2Z1ZhbHVlICs9IGRvdCh2YWx1ZXMsIG9uZXMpO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBtaW5NYXhWYWx1ZSA9IG1heCh2YWx1ZXMsIG1pbk1heFZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMyBzdHJpZGVzID1cXG4gICAgICAgIGl2ZWMzKFwiK28rXCIsIFwiK2ErXCIsIFwiK2krXCIpO1xcbiAgICAgIGNvbnN0IGl2ZWMzIHBhZHMgPSBpdmVjMyhcIitkK1wiLCBcIitwK1wiLCBcIit2K1wiKTtcXG4gICAgICBjb25zdCBmbG9hdCBpbml0aWFsaXphdGlvblZhbHVlID0gXCIrZytcIjtcXG4gICAgICBjb25zdCB2ZWM0IG9uZXMgPSB2ZWM0KDEuMCwgMS4wLCAxLjAsIDEuMCk7XFxuXFxuICAgICAgZmxvYXQgY291bnQgPSAwLjA7XFxuXFxuICAgICAgZmxvYXQgZ2V0VmFsdWUoaW50IGJhdGNoLCBpbnQgeEQsIGludCB4UiwgaW50IHhDLCBpbnQgY2gpIHtcXG4gICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgIHJldHVybiBpbml0aWFsaXphdGlvblZhbHVlO1xcbiAgICAgICAgfVxcbiAgICAgICAgY291bnQgKz0gMS4wO1xcbiAgICAgICAgcmV0dXJuIGdldFgoYmF0Y2gsIHhELCB4UiwgeEMsIGNoKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzUgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgIGludCBjaCA9IGNvb3Jkcy51O1xcblxcbiAgICAgICAgaXZlYzMgeENvcm5lciA9IGl2ZWMzKGNvb3Jkcy55LCBjb29yZHMueiwgY29vcmRzLncpICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICBpbnQgeERDb3JuZXIgPSB4Q29ybmVyLng7XFxuICAgICAgICBpbnQgeFJDb3JuZXIgPSB4Q29ybmVyLnk7XFxuICAgICAgICBpbnQgeENDb3JuZXIgPSB4Q29ybmVyLno7XFxuXFxuICAgICAgICAvLyBtYXgvbWluIHgoPywgPywgPywgZCkgdG8gZ2V0IHkoeUQsIHlSLCB5QywgY2gpLlxcbiAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWRcXG4gICAgICAgIHZlYzQgbWluTWF4VmFsdWUgPSB2ZWM0KFwiK2crXCIpO1xcbiAgICAgICAgZmxvYXQgYXZnVmFsdWUgPSAwLjA7XFxuICAgICAgICBjb3VudCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IHdEID0gMDsgd0QgPCBcIitsK1wiO1xcbiAgICAgICAgICAgIHdEICs9IFwiK3MrXCIpIHtcXG4gICAgICAgICAgaW50IHhEID0geERDb3JuZXIgKyB3RDtcXG5cXG4gICAgICAgICAgaWYgKHhEIDwgMCB8fCB4RCA+PSBcIit0LmluRGVwdGgrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIraCtcIjtcXG4gICAgICAgICAgICB3UiArPSBcIit1K1wiKSB7XFxuICAgICAgICAgICAgaW50IHhSID0geFJDb3JuZXIgKyB3UjtcXG5cXG4gICAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIreCtcIjsgd0MgKz0gNCkge1xcbiAgICAgICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyB3QyAqIFwiK2MrXCI7XFxuXFxuICAgICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDLCBjaCksXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDICsgXCIrYytcIiwgY2gpLFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QyArIDIgKiBcIitjK1wiLCBjaCksXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDICsgMyAqIFwiK2MrXCIsIGNoKVxcbiAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgIFwiK3crXCJcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyBcIit4K1wiO1xcbiAgICAgICAgICAgIGlmIChcIisoMT09PWIpK1wiKSB7XFxuICAgICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDLCBjaCksXFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICBcIit3K1wiXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChcIisoMj09PWIpK1wiKSB7XFxuICAgICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDLCBjaCksXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDICsgXCIrYytcIiwgY2gpLFxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgICAgXCIrdytcIlxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCIrKDM9PT1iKStcIikge1xcbiAgICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QywgY2gpLFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QyArIFwiK2MrXCIsIGNoKSxcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMgKyAyICogXCIrYytcIiwgY2gpLFxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgICAgXCIrdytcIlxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgICBzZXRPdXRwdXQoXCIreStcIik7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICBcIn19LEppPWZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl07dmFyIG49dC53aW5kb3dTaXplLHI9dC5iYXRjaFNpemUsbz10LmluU2l6ZSxhPU1hdGguY2VpbChvL24pO3RoaXMub3V0cHV0U2hhcGU9W3IsYV07dmFyIGk9XCIwLjBcIixzPVwiXCI7XCJwcm9kXCI9PT1lP2k9XCIxLjBcIjpcIm1pblwiPT09ZT8oaT1cIjEuMCAvIDFlLTIwXCIscz1cIm1pblwiKTpcIm1heFwiPT09ZSYmKGk9XCItMS4wIC8gMWUtMjBcIixzPVwibWF4XCIpO3ZhciB1PWUrXCIoXCIrZStcIihcIitlK1wiKG1pbk1heFZhbHVlWzBdLCBtaW5NYXhWYWx1ZVsxXSksIG1pbk1heFZhbHVlWzJdKSwgbWluTWF4VmFsdWVbM10pXCI7XCJzdW1cIj09PWU/dT1cInN1bVZhbHVlXCI6XCJwcm9kXCI9PT1lP3U9XCJwcm9kVmFsdWVcIjpcImFsbFwiPT09ZT91PVwiYWxsVmFsdWVcIjpcImFueVwiPT09ZSYmKHU9XCJhbnlWYWx1ZVwiKTt2YXIgYz00Kk1hdGguZmxvb3Iobi80KSxsPW4lNCxoPVwiXFxuICAgICAgaWYgKFwiKyhcInN1bVwiPT09ZSkrXCIpIHtcXG4gICAgICAgIHN1bVZhbHVlICs9IGRvdCh2YWx1ZXMsIG9uZXMpO1xcbiAgICAgIH0gZWxzZSBpZiAoXCIrKFwicHJvZFwiPT09ZSkrXCIpIHtcXG4gICAgICAgIHZlYzIgdG1wID0gdmVjMih2YWx1ZXNbMF0sIHZhbHVlc1sxXSkgKiB2ZWMyKHZhbHVlc1syXSwgdmFsdWVzWzNdKTtcXG4gICAgICAgIHByb2RWYWx1ZSAqPSB0bXBbMF0gKiB0bXBbMV07XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIG1pbk1heFZhbHVlID0gXCIrcytcIih2YWx1ZXMsIG1pbk1heFZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwiLGY9XCJ2ZWM0XCI7XCJhbGxcIj09PWU/KGk9XCIxLjBcIixoPVwiXFxuICAgICAgICBib29sIHJlZHVjZWRBbGxWYWx1ZSA9IGFsbCh2YWx1ZXMpO1xcbiAgICAgICAgZmxvYXQgZmxvYXRlZFJlZHVjZWRBbGxWYWx1ZSA9IGZsb2F0KHJlZHVjZWRBbGxWYWx1ZSk7XFxuICAgICAgICBhbGxWYWx1ZSA9IGZsb2F0KGFsbFZhbHVlID49IDEuMCAmJiBmbG9hdGVkUmVkdWNlZEFsbFZhbHVlID49IDEuMCk7XFxuICAgICAgXCIsZj1cImJ2ZWM0XCIpOlwiYW55XCI9PT1lJiYoaT1cIjAuMFwiLGg9XCJcXG4gICAgICAgIGJvb2wgcmVkdWNlZEFueVZhbHVlID0gYW55KHZhbHVlcyk7XFxuICAgICAgICBmbG9hdCBmbG9hdGVkUmVkdWNlZEFueVZhbHVlID0gZmxvYXQocmVkdWNlZEFueVZhbHVlKTtcXG4gICAgICAgIGFueVZhbHVlID0gZmxvYXQoYW55VmFsdWUgPj0gMS4wIHx8IGZsb2F0ZWRSZWR1Y2VkQW55VmFsdWUgPj0gMS4wKTtcXG4gICAgICBcIixmPVwiYnZlYzRcIik7dmFyIGQ9XCJcIjtvJW4+MCYmKGQ9XCJcXG4gICAgICAgIGlmIChpbklkeCA8IDAgfHwgaW5JZHggPj0gXCIrbytcIikge1xcbiAgICAgICAgICByZXR1cm4gaW5pdGlhbGl6YXRpb25WYWx1ZTtcXG4gICAgICAgIH1cXG4gICAgICBcIiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGZsb2F0IGluaXRpYWxpemF0aW9uVmFsdWUgPSBcIitpK1wiO1xcbiAgICAgIGNvbnN0IHZlYzQgb25lcyA9IHZlYzQoMS4wLCAxLjAsIDEuMCwgMS4wKTtcXG5cXG4gICAgICBmbG9hdCBnZXRWYWx1ZShpbnQgYmF0Y2gsIGludCBpbklkeCkge1xcbiAgICAgICAgXCIrZCtcIlxcbiAgICAgICAgcmV0dXJuIGdldFgoYmF0Y2gsIGluSWR4KTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgb3V0SWR4ID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGluT2Zmc2V0ID0gb3V0SWR4ICogXCIrbitcIjtcXG5cXG4gICAgICAgIHZlYzQgbWluTWF4VmFsdWUgPSB2ZWM0KFwiK2krXCIpO1xcbiAgICAgICAgZmxvYXQgcHJvZFZhbHVlID0gMS4wO1xcbiAgICAgICAgZmxvYXQgc3VtVmFsdWUgPSAwLjA7XFxuICAgICAgICBmbG9hdCBhbGxWYWx1ZSA9IDEuMDtcXG4gICAgICAgIGZsb2F0IGFueVZhbHVlID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIitjK1wiOyBpICs9IDQpIHtcXG4gICAgICAgICAgaW50IGluSWR4ID0gaW5PZmZzZXQgKyBpO1xcbiAgICAgICAgICBcIitmK1wiIHZhbHVlcyA9IFwiK2YrXCIoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAyKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAzKVxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICBcIitoK1wiXFxuICAgICAgICB9XFxuXFxuICAgICAgICBpbnQgaW5JZHggPSBpbk9mZnNldCArIFwiK2MrXCI7XFxuICAgICAgICBpZiAoXCIrKDE9PT1sKStcIikge1xcbiAgICAgICAgICBcIitmK1wiIHZhbHVlcyA9IFwiK2YrXCIoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICBcIitoK1wiXFxuICAgICAgICB9IGVsc2UgaWYgKFwiKygyPT09bCkrXCIpIHtcXG4gICAgICAgICAgXCIrZitcIiB2YWx1ZXMgPSBcIitmK1wiKFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMSksXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2grXCJcXG4gICAgICAgIH0gZWxzZSBpZiAoXCIrKDM9PT1sKStcIikge1xcbiAgICAgICAgICBcIitmK1wiIHZhbHVlcyA9IFwiK2YrXCIoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAyKSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2grXCJcXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChcIit1K1wiKTtcXG4gICAgICB9XFxuICAgIFwifSxaaT1mdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMucGFja2VkSW5wdXRzPSEwLHRoaXMucGFja2VkT3V0cHV0PSEwLHRoaXMub3V0cHV0U2hhcGU9dDtmb3IodmFyIG49XCJcIixyPTA7cjw0O3IrKyl7dmFyIG89XCJ0aGlzUkMgPSByYztcIjtyJTI9PTEmJihvKz1cInRoaXNSQy56ICs9IDE7XCIpLHI+MSYmKG8rPVwidGhpc1JDLnkgKz0gMTtcIiksbis9XCJcXG4gICAgICAgIFwiK28rXCJcXG4gICAgICAgIFwiKyhyPjA/XCJpZih0aGlzUkMueSA8IHJvd3MgJiYgdGhpc1JDLnogPCBjb2xzKXtcIjpcIlwiKStcIlxcbiAgICAgICAgICBpbnQgZmxhdEluZGV4ID0gZ2V0RmxhdEluZGV4KHRoaXNSQyk7XFxuXFxuICAgICAgICAgIGl2ZWMzIGlucHV0UkMgPSBpbnB1dENvb3Jkc0Zyb21SZXNoYXBlZE91dENvb3JkcyhmbGF0SW5kZXgpO1xcbiAgICAgICAgICB2ZWMyIGlucHV0UkNJbm5lckRpbXMgPSB2ZWMyKGZsb2F0KGlucHV0UkMueSksZmxvYXQoaW5wdXRSQy56KSk7XFxuXFxuICAgICAgICAgIHJlc3VsdFtcIityK1wiXSA9XFxuICAgICAgICAgICAgZ2V0Q2hhbm5lbChnZXRBKGlucHV0UkMueCwgaW5wdXRSQy55LCBpbnB1dFJDLnopLCBpbnB1dFJDSW5uZXJEaW1zKTtcXG4gICAgICAgIFwiKyhyPjA/XCJ9XCI6XCJcIikrXCJcXG4gICAgICBcIn10aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXFxuICAgIGl2ZWMzIGlucHV0Q29vcmRzRnJvbVJlc2hhcGVkT3V0Q29vcmRzKGludCBpbmRleCkge1xcbiAgICAgIFwiK2NhKFtcInJcIixcImNcIixcImRcIl0sZSkrXCJcXG4gICAgICByZXR1cm4gaXZlYzMociwgYywgZCk7XFxuICAgIH1cXG4gIFxcbiAgICAgIFwiK2xhKHQpK1wiXFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzMgcmMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuXFxuICAgICAgICBpdmVjMyB0aGlzUkM7XFxuICAgICAgICBpbnQgcm93cyA9IFwiK3RbMV0rXCI7XFxuICAgICAgICBpbnQgY29scyA9IFwiK3RbMl0rXCI7XFxuXFxuICAgICAgICBcIituK1wiXFxuXFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifTt2YXIgdHM9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMub3V0cHV0U2hhcGU9ZS5zaGFwZTt2YXIgcj1lLnNoYXBlLG89clsxXSxhPXJbMl0saT10LnNoYXBlLHM9aVsxXSx1PWlbMl0sYz1bbiYmcz4xP28tMTpvLG4mJnU+MT9hLTE6YV0sbD1bbiYmcz4xP3MtMTpzLG4mJnU+MT91LTE6dV0saD1jWzBdL2xbMF0sZj1jWzFdL2xbMV0sZD0xL2gscD0xL2Ysdj0yKk1hdGguY2VpbChkKSsyLG09MipNYXRoLmNlaWwocCkrMjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcbiAgICAgICAgaW50IHIgPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgYyA9IGNvb3Jkc1syXTtcXG5cXG4gICAgICAgIGZsb2F0IGFjY3VtdWxhdG9yID0gMC4wO1xcblxcbiAgICAgICAgY29uc3QgZmxvYXQgaGVpZ2h0U2NhbGUgPSBmbG9hdChcIitoK1wiKTtcXG4gICAgICAgIGNvbnN0IGZsb2F0IHdpZHRoU2NhbGUgPSBmbG9hdChcIitmK1wiKTtcXG5cXG4gICAgICAgIGNvbnN0IGZsb2F0IGludkhlaWdodFNjYWxlID0gZmxvYXQoXCIrZCtcIik7XFxuICAgICAgICBjb25zdCBmbG9hdCBpbnZXaWR0aFNjYWxlID0gZmxvYXQoXCIrcCtcIik7XFxuXFxuICAgICAgICBjb25zdCBpbnQgd2luSGVpZ2h0ID0gaW50KFwiK3YrXCIpO1xcbiAgICAgICAgY29uc3QgaW50IHdpbldpZHRoID0gaW50KFwiK20rXCIpO1xcblxcbiAgICAgICAgLy8gQ29tcHV0ZSBib3VuZHMgZm9yIHdoZXJlIGluIGR5IHdlIHdpbGwgbG9va1xcbiAgICAgICAgZmxvYXQgc3RhcnRSTGVycCA9IGZsb29yKGZsb2F0KHIpICogaW52SGVpZ2h0U2NhbGUpO1xcbiAgICAgICAgaW50IHN0YXJ0RHlSID0gaW50KHN0YXJ0UkxlcnAgLSBmbG9hdCh3aW5IZWlnaHQgLyAyKSk7XFxuXFxuICAgICAgICBmbG9hdCBzdGFydENMZXJwID0gZmxvb3IoZmxvYXQoYykgKiBpbnZXaWR0aFNjYWxlKTtcXG4gICAgICAgIGludCBzdGFydER5QyA9IGludChzdGFydENMZXJwIC0gZmxvYXQod2luV2lkdGggLyAyKSk7XFxuXFxuICAgICAgICAvLyBMb29wIG92ZXIgZHlcXG4gICAgICAgIGZvciAoaW50IGR5Uk9mZnNldCA9IDA7IGR5Uk9mZnNldCA8IHdpbkhlaWdodDsgZHlST2Zmc2V0KyspIHtcXG4gICAgICAgICAgaW50IGR5UiA9IGR5Uk9mZnNldCArIHN0YXJ0RHlSO1xcblxcbiAgICAgICAgICAvLyBHdWFyZCBhZ2FpbnN0IHRoZSB3aW5kb3cgZXhjZWVkaW5nIHRoZSBib3VuZHMgb2YgZHlcXG4gICAgICAgICAgaWYgKGR5UiA8IDAgfHwgZHlSID49IFwiK3MrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCBkeUNPZmZzZXQgPSAwOyBkeUNPZmZzZXQgPCB3aW5XaWR0aDsgZHlDT2Zmc2V0KyspIHtcXG4gICAgICAgICAgICBpbnQgZHlDID0gZHlDT2Zmc2V0ICsgc3RhcnREeUM7XFxuXFxuICAgICAgICAgICAgLy8gR3VhcmQgYWdhaW5zdCB0aGUgd2luZG93IGV4Y2VlZGluZyB0aGUgYm91bmRzIG9mIGR5XFxuICAgICAgICAgICAgaWYgKGR5QyA8IDAgfHwgZHlDID49IFwiK3UrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmbG9hdCBkeFIgPSBmbG9hdChkeVIpICogaGVpZ2h0U2NhbGU7XFxuICAgICAgICAgICAgaW50IHRvcER4UkluZGV4ID0gaW50KGZsb29yKGR4UikpO1xcbiAgICAgICAgICAgIGludCBib3R0b21EeFJJbmRleCA9IGludChtaW4oY2VpbChkeFIpLCBcIisoby0xKStcIi4wKSk7XFxuICAgICAgICAgICAgZmxvYXQgZHhSTGVycCA9IGR4UiAtIGZsb2F0KHRvcER4UkluZGV4KTtcXG4gICAgICAgICAgICBmbG9hdCBpbnZlcnNlRHhSTGVycCA9IDEuMCAtIGR4UkxlcnA7XFxuXFxuICAgICAgICAgICAgZmxvYXQgZHhDID0gZmxvYXQoZHlDKSAqIHdpZHRoU2NhbGU7XFxuICAgICAgICAgICAgaW50IGxlZnREeENJbmRleCA9IGludChmbG9vcihkeEMpKTtcXG4gICAgICAgICAgICBpbnQgcmlnaHREeENJbmRleCA9IGludChtaW4oY2VpbChkeEMpLCBcIisoYS0xKStcIi4wKSk7XFxuICAgICAgICAgICAgZmxvYXQgZHhDTGVycCA9IGR4QyAtIGZsb2F0KGxlZnREeENJbmRleCk7XFxuICAgICAgICAgICAgZmxvYXQgaW52ZXJzZUR4Q0xlcnAgPSAxLjAgLSBkeENMZXJwO1xcblxcbiAgICAgICAgICAgIGlmIChyID09IHRvcER4UkluZGV4ICYmIGMgPT0gbGVmdER4Q0luZGV4KSB7XFxuICAgICAgICAgICAgICAvLyB0b3BMZWZ0XFxuICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPVxcbiAgICAgICAgICAgICAgICBnZXREeShiLCBkeVIsIGR5QywgZCkgKiBpbnZlcnNlRHhSTGVycCAqIGludmVyc2VEeENMZXJwO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAociA9PSB0b3BEeFJJbmRleCAmJiBjID09IHJpZ2h0RHhDSW5kZXgpIHtcXG4gICAgICAgICAgICAgIC8vIHRvcFJpZ2h0XFxuICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSBnZXREeShiLCBkeVIsIGR5QywgZCkgKiBpbnZlcnNlRHhSTGVycCAqIGR4Q0xlcnA7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGlmIChyID09IGJvdHRvbUR4UkluZGV4ICYmIGMgPT0gbGVmdER4Q0luZGV4KSB7XFxuICAgICAgICAgICAgICAvLyBib3R0b21MZWZ0XFxuICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSBnZXREeShiLCBkeVIsIGR5QywgZCkgKiBkeFJMZXJwICogaW52ZXJzZUR4Q0xlcnA7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGlmIChyID09IGJvdHRvbUR4UkluZGV4ICYmIGMgPT0gcmlnaHREeENJbmRleCkge1xcbiAgICAgICAgICAgICAgLy8gYm90dG9tUmlnaHRcXG4gICAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IGdldER5KGIsIGR5UiwgZHlDLCBkKSAqIGR4UkxlcnAgKiBkeENMZXJwO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgLy8gRW5kIGxvb3Agb3ZlciBkeVxcblxcbiAgICAgICAgc2V0T3V0cHV0KGFjY3VtdWxhdG9yKTtcXG4gICAgICB9XFxuICAgIFwifSxlcz1mdW5jdGlvbih0LGUsbixyKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLm91dHB1dFNoYXBlPVtdO3ZhciBvPXRbMF0sYT10WzFdLGk9dFsyXSxzPXRbM107dGhpcy5vdXRwdXRTaGFwZT1bbyxlLG4sc107dmFyIHU9W3ImJmU+MT9hLTE6YSxyJiZuPjE/aS0xOmldLGM9W3ImJmU+MT9lLTE6ZSxyJiZuPjE/bi0xOm5dO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCB2ZWMyIGVmZmVjdGl2ZUlucHV0T3Zlck91dHB1dFJhdGlvUkMgPSB2ZWMyKFxcbiAgICAgICAgICBcIit1WzBdL2NbMF0rXCIsXFxuICAgICAgICAgIFwiK3VbMV0vY1sxXStcIik7XFxuICAgICAgY29uc3QgdmVjMiBpbnB1dFNoYXBlUkMgPSB2ZWMyKFwiK2ErXCIuMCwgXCIraStcIi4wKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuICAgICAgICBpdmVjMiB5UkMgPSBjb29yZHMueXo7XFxuXFxuICAgICAgICAvLyBGcmFjdGlvbmFsIHNvdXJjZSBpbmRleC5cXG4gICAgICAgIHZlYzIgc291cmNlRnJhY0luZGV4UkMgPSB2ZWMyKHlSQykgKiBlZmZlY3RpdmVJbnB1dE92ZXJPdXRwdXRSYXRpb1JDO1xcblxcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZm91ciBpbnRlZ2VyIGluZGljZXMuXFxuICAgICAgICBpdmVjMiBzb3VyY2VGbG9vclJDID0gaXZlYzIoc291cmNlRnJhY0luZGV4UkMpO1xcbiAgICAgICAgaXZlYzIgc291cmNlQ2VpbFJDID0gaXZlYzIoXFxuICAgICAgICAgIG1pbihpbnB1dFNoYXBlUkMgLSAxLjAsIGNlaWwoc291cmNlRnJhY0luZGV4UkMpKSk7XFxuXFxuICAgICAgICBmbG9hdCB0b3BMZWZ0ID0gZ2V0QShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUZsb29yUkMueSwgZCk7XFxuICAgICAgICBmbG9hdCBib3R0b21MZWZ0ID0gZ2V0QShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlRmxvb3JSQy55LCBkKTtcXG4gICAgICAgIGZsb2F0IHRvcFJpZ2h0ID0gZ2V0QShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUNlaWxSQy55LCBkKTtcXG4gICAgICAgIGZsb2F0IGJvdHRvbVJpZ2h0ID0gZ2V0QShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlQ2VpbFJDLnksIGQpO1xcblxcbiAgICAgICAgdmVjMiBmcmFjUkMgPSBzb3VyY2VGcmFjSW5kZXhSQyAtIHZlYzIoc291cmNlRmxvb3JSQyk7XFxuXFxuICAgICAgICBmbG9hdCB0b3AgPSB0b3BMZWZ0ICsgKHRvcFJpZ2h0IC0gdG9wTGVmdCkgKiBmcmFjUkMueTtcXG4gICAgICAgIGZsb2F0IGJvdHRvbSA9IGJvdHRvbUxlZnQgKyAoYm90dG9tUmlnaHQgLSBib3R0b21MZWZ0KSAqIGZyYWNSQy55O1xcbiAgICAgICAgZmxvYXQgbmV3VmFsdWUgPSB0b3AgKyAoYm90dG9tIC0gdG9wKSAqIGZyYWNSQy54O1xcblxcbiAgICAgICAgc2V0T3V0cHV0KG5ld1ZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwifSxucz1mdW5jdGlvbih0LGUsbixyKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPVtdO3ZhciBvPXRbMF0sYT10WzFdLGk9dFsyXSxzPXRbM107dGhpcy5vdXRwdXRTaGFwZT1bbyxlLG4sc107dmFyIHU9W3ImJmU+MT9hLTE6YSxyJiZuPjE/aS0xOmldLGM9W3ImJmU+MT9lLTE6ZSxyJiZuPjE/bi0xOm5dO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCB2ZWMzIGVmZmVjdGl2ZUlucHV0T3Zlck91dHB1dFJhdGlvUkMgPSB2ZWMzKFxcbiAgICAgICAgICBcIit1WzBdL2NbMF0rXCIsXFxuICAgICAgICAgIFwiK3VbMV0vY1sxXStcIixcXG4gICAgICAgICAgXCIrdVsxXS9jWzFdK1wiKTtcXG4gICAgICBjb25zdCB2ZWMzIGlucHV0U2hhcGVSQyA9IHZlYzMoXCIrYStcIi4wLCBcIitpK1wiLjAsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiK2krXCIuMCk7XFxuXFxuICAgICAgZmxvYXQgZ2V0QVZhbHVlKGludCBiLCBpbnQgciwgaW50IGMsIGludCBkKSB7XFxuICAgICAgICByZXR1cm4gZ2V0Q2hhbm5lbChnZXRBKGIsIHIsIGMsIGQpLCB2ZWMyKGMsIGQpKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcbiAgICAgICAgLy8gQ2FsY3VsYXRlIHZhbHVlcyBmb3IgbmV4dCBjb2x1bW4gaW4geVJDLnouXFxuICAgICAgICBpdmVjMyB5UkMgPSBjb29yZHMueXp6ICsgaXZlYzMoMCwgMCwgMSk7XFxuXFxuICAgICAgICAvLyBGcmFjdGlvbmFsIHNvdXJjZSBpbmRleC5cXG4gICAgICAgIHZlYzMgc291cmNlRnJhY0luZGV4UkMgPSB2ZWMzKHlSQykgKiBlZmZlY3RpdmVJbnB1dE92ZXJPdXRwdXRSYXRpb1JDO1xcblxcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZm91ciBpbnRlZ2VyIGluZGljZXMuXFxuICAgICAgICBpdmVjMyBzb3VyY2VGbG9vclJDID0gaXZlYzMoc291cmNlRnJhY0luZGV4UkMpO1xcbiAgICAgICAgaXZlYzMgc291cmNlQ2VpbFJDID0gaXZlYzMoXFxuICAgICAgICAgIG1pbihpbnB1dFNoYXBlUkMgLSAxLjAsIGNlaWwoc291cmNlRnJhY0luZGV4UkMpKSk7XFxuXFxuICAgICAgICAvLyBTaG91bGQgd2UgY2FsY3VsYXRlIG5leHQgY29sdW1uIGFuZCByb3cgZWxlbWVudHMgaW4gMngyIHBhY2tlZCBjZWxsLlxcbiAgICAgICAgYm9vbCBoYXNOZXh0Q29sID0gZCA8IFwiKyhzLTEpK1wiO1xcbiAgICAgICAgYm9vbCBoYXNOZXh0Um93ID0gY29vcmRzLnogPCBcIisobi0xKStcIjtcXG5cXG4gICAgICAgIC8vIEluIHBhcmFsbGVsLCBjb25zdHJ1Y3QgZm91ciBjb3JuZXJzIGZvciBhbGwgZm91ciBjb21wb25lbnRzIGluXFxuICAgICAgICAvLyBwYWNrZWQgMngyIGNlbGwuXFxuICAgICAgICB2ZWM0IHRvcExlZnQgPSB2ZWM0KFxcbiAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VGbG9vclJDLnksIGQpLFxcbiAgICAgICAgICBoYXNOZXh0Q29sID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlRmxvb3JSQy55LCBkICsgMSlcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgaGFzTmV4dFJvdyA/IGdldEFWYWx1ZShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUZsb29yUkMueiwgZClcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgKGhhc05leHRSb3cgJiYgaGFzTmV4dENvbCkgP1xcbiAgICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUZsb29yUkMueiwgZCArIDEpIDogMC4wKTtcXG5cXG4gICAgICAgIHZlYzQgYm90dG9tTGVmdCA9IHZlYzQoXFxuICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlRmxvb3JSQy55LCBkKSxcXG4gICAgICAgICAgaGFzTmV4dENvbCA/IGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlRmxvb3JSQy55LCBkICsgMSlcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgaGFzTmV4dFJvdyA/IGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlRmxvb3JSQy56LCBkKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICAoaGFzTmV4dFJvdyAmJiBoYXNOZXh0Q29sKSA/XFxuICAgICAgICAgICAgZ2V0QVZhbHVlKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VGbG9vclJDLnosIGQgKyAxKSA6IDAuMCk7XFxuXFxuICAgICAgICB2ZWM0IHRvcFJpZ2h0ID0gdmVjNChcXG4gICAgICAgICAgZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlQ2VpbFJDLnksIGQpLFxcbiAgICAgICAgICBoYXNOZXh0Q29sID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlQ2VpbFJDLnksIGQgKyAxKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICBoYXNOZXh0Um93ID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlQ2VpbFJDLnosIGQpXFxuICAgICAgICAgICAgICAgICAgICAgOiAwLjAsXFxuICAgICAgICAgIChoYXNOZXh0Um93ICYmIGhhc05leHRDb2wpID9cXG4gICAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VDZWlsUkMueiwgZCArIDEpIDogMC4wKTtcXG5cXG4gICAgICAgIHZlYzQgYm90dG9tUmlnaHQgPSB2ZWM0KFxcbiAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUNlaWxSQy55LCBkKSxcXG4gICAgICAgICAgaGFzTmV4dENvbCA/IGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlQ2VpbFJDLnksIGQgKyAxKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICBoYXNOZXh0Um93ID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VDZWlsUkMueiwgZClcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgKGhhc05leHRSb3cgJiYgaGFzTmV4dENvbCkgP1xcbiAgICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlQ2VpbFJDLnosIGQgKyAxKSA6IDAuMCk7XFxuXFxuICAgICAgICB2ZWMzIGZyYWNSQyA9IHNvdXJjZUZyYWNJbmRleFJDIC0gdmVjMyhzb3VyY2VGbG9vclJDKTtcXG5cXG4gICAgICAgIHZlYzQgdG9wID0gbWl4KHRvcExlZnQsIHRvcFJpZ2h0LCBmcmFjUkMueXl6eik7XFxuICAgICAgICB2ZWM0IGJvdHRvbSA9IG1peChib3R0b21MZWZ0LCBib3R0b21SaWdodCwgZnJhY1JDLnl5enopO1xcbiAgICAgICAgdmVjNCBuZXdWYWx1ZSA9IG1peCh0b3AsIGJvdHRvbSwgZnJhY1JDLngpO1xcblxcbiAgICAgICAgc2V0T3V0cHV0KG5ld1ZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwifSxycz1mdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT1lLnNoYXBlO3ZhciByPWUuc2hhcGUsbz1yWzFdLGE9clsyXSxpPXQuc2hhcGUscz1pWzFdLHU9aVsyXSxjPVtuJiZzPjE/by0xOm8sbiYmdT4xP2EtMTphXSxsPVtuJiZzPjE/cy0xOnMsbiYmdT4xP3UtMTp1XSxoPWNbMF0vbFswXSxmPWNbMV0vbFsxXSxkPTEvaCxwPTEvZix2PTIqTWF0aC5jZWlsKGQpKzIsbT0yKk1hdGguY2VpbChwKSsyO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuICAgICAgICBpbnQgciA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBjID0gY29vcmRzWzJdO1xcblxcbiAgICAgICAgZmxvYXQgYWNjdW11bGF0b3IgPSAwLjA7XFxuXFxuICAgICAgICBjb25zdCBmbG9hdCBoZWlnaHRTY2FsZSA9IGZsb2F0KFwiK2grXCIpO1xcbiAgICAgICAgY29uc3QgZmxvYXQgd2lkdGhTY2FsZSA9IGZsb2F0KFwiK2YrXCIpO1xcblxcbiAgICAgICAgY29uc3QgZmxvYXQgaW52SGVpZ2h0U2NhbGUgPSBmbG9hdChcIitkK1wiKTtcXG4gICAgICAgIGNvbnN0IGZsb2F0IGludldpZHRoU2NhbGUgPSBmbG9hdChcIitwK1wiKTtcXG5cXG4gICAgICAgIGNvbnN0IGludCB3aW5IZWlnaHQgPSBpbnQoXCIrditcIik7XFxuICAgICAgICBjb25zdCBpbnQgd2luV2lkdGggPSBpbnQoXCIrbStcIik7XFxuXFxuICAgICAgICAvLyBDb21wdXRlIGJvdW5kcyBmb3Igd2hlcmUgaW4gZHkgd2Ugd2lsbCBsb29rXFxuICAgICAgICBmbG9hdCBzdGFydFJMZXJwID0gZmxvb3IoZmxvYXQocikgKiBpbnZIZWlnaHRTY2FsZSk7XFxuICAgICAgICBpbnQgc3RhcnREeVIgPSBpbnQoZmxvb3Ioc3RhcnRSTGVycCAtIGZsb2F0KHdpbkhlaWdodCAvIDIpKSk7XFxuXFxuICAgICAgICBmbG9hdCBzdGFydENMZXJwID0gZmxvb3IoZmxvYXQoYykgKiBpbnZXaWR0aFNjYWxlKTtcXG4gICAgICAgIGludCBzdGFydER5QyA9IGludChmbG9vcihzdGFydENMZXJwIC0gZmxvYXQod2luV2lkdGggLyAyKSkpO1xcblxcbiAgICAgICAgLy8gTG9vcCBvdmVyIGR5XFxuICAgICAgICBmb3IgKGludCBkeVJPZmZzZXQgPSAwOyBkeVJPZmZzZXQgPCB3aW5IZWlnaHQ7IGR5Uk9mZnNldCsrKSB7XFxuICAgICAgICAgIGludCBkeVIgPSBkeVJPZmZzZXQgKyBzdGFydER5UjtcXG5cXG4gICAgICAgICAgLy8gR3VhcmQgYWdhaW5zdCB0aGUgd2luZG93IGV4Y2VlZGluZyB0aGUgYm91bmRzIG9mIGR5XFxuICAgICAgICAgIGlmIChkeVIgPCAwIHx8IGR5UiA+PSBcIitzK1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgZm9yIChpbnQgZHlDT2Zmc2V0ID0gMDsgZHlDT2Zmc2V0IDwgd2luV2lkdGg7IGR5Q09mZnNldCsrKSB7XFxuICAgICAgICAgICAgaW50IGR5QyA9IGR5Q09mZnNldCArIHN0YXJ0RHlDO1xcblxcbiAgICAgICAgICAgIC8vIEd1YXJkIGFnYWluc3QgdGhlIHdpbmRvdyBleGNlZWRpbmcgdGhlIGJvdW5kcyBvZiBkeVxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwIHx8IGR5QyA+PSBcIit1K1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZmxvYXQgc291cmNlRnJhY1JvdyA9XFxuICAgICAgICAgICAgICBmbG9hdChcIitjWzBdK1wiKSAqXFxuICAgICAgICAgICAgICAgIChmbG9hdChkeVIpIC8gZmxvYXQoXCIrbFswXStcIikpO1xcblxcbiAgICAgICAgICAgIGZsb2F0IHNvdXJjZUZyYWNDb2wgPVxcbiAgICAgICAgICAgICAgICBmbG9hdChcIitjWzFdK1wiKSAqXFxuICAgICAgICAgICAgICAgICAgKGZsb2F0KGR5QykgLyBmbG9hdChcIitsWzFdK1wiKSk7XFxuXFxuICAgICAgICAgICAgaW50IHNvdXJjZU5lYXJlc3RSb3cgPSBpbnQobWluKFxcbiAgICAgICAgICAgICAgICBmbG9hdChpbnQoXCIrbytcIikgLSAxKSxcXG4gICAgICAgICAgICAgICAgXCIrbitcIiA/IGZsb2F0KHJvdW5kKHNvdXJjZUZyYWNSb3cpKSA6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0KGZsb29yKHNvdXJjZUZyYWNSb3cpKSkpO1xcblxcbiAgICAgICAgICAgIGludCBzb3VyY2VOZWFyZXN0Q29sID0gaW50KG1pbihcXG4gICAgICAgICAgICAgICAgZmxvYXQoaW50KFwiK2ErXCIpIC0gMSksXFxuICAgICAgICAgICAgICAgIFwiK24rXCIgPyBmbG9hdChyb3VuZChzb3VyY2VGcmFjQ29sKSkgOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdChmbG9vcihzb3VyY2VGcmFjQ29sKSkpKTtcXG5cXG4gICAgICAgICAgICBpZiAociA9PSBzb3VyY2VOZWFyZXN0Um93ICYmIGMgPT0gc291cmNlTmVhcmVzdENvbCkge1xcbiAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gZ2V0RHkoYiwgZHlSLCBkeUMsIGQpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgLy8gRW5kIGxvb3Agb3ZlciBkeVxcblxcbiAgICAgICAgc2V0T3V0cHV0KGFjY3VtdWxhdG9yKTtcXG4gICAgICB9XFxuICAgIFwifSxvcz1mdW5jdGlvbih0LGUsbixyKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLm91dHB1dFNoYXBlPVtdO3ZhciBvPXRbMF0sYT10WzFdLGk9dFsyXSxzPXRbM107dGhpcy5vdXRwdXRTaGFwZT1bbyxlLG4sc107dmFyIHU9W3ImJmU+MT9hLTE6YSxyJiZuPjE/aS0xOmldLGM9W3ImJmU+MT9lLTE6ZSxyJiZuPjE/bi0xOm5dLGw9cj9cIjAuNVwiOlwiMC4wXCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IHZlYzIgZWZmZWN0aXZlSW5wdXRPdmVyT3V0cHV0UmF0aW9SQyA9IHZlYzIoXFxuICAgICAgICAgIFwiK3VbMF0vY1swXStcIixcXG4gICAgICAgICAgXCIrdVsxXS9jWzFdK1wiKTtcXG4gICAgICBjb25zdCB2ZWMyIGlucHV0U2hhcGVSQyA9IHZlYzIoXCIrYStcIi4wLCBcIitpK1wiLjApO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG4gICAgICAgIGl2ZWMyIHlSQyA9IGNvb3Jkcy55ejtcXG5cXG4gICAgICAgIC8vIEZyYWN0aW9uYWwgc291cmNlIGluZGV4LlxcbiAgICAgICAgdmVjMiBzb3VyY2VGcmFjSW5kZXhSQyA9IHZlYzIoeVJDKSAqIGVmZmVjdGl2ZUlucHV0T3Zlck91dHB1dFJhdGlvUkM7XFxuXFxuICAgICAgICAvLyBDb21wdXRlIHRoZSBjb29yZGluYXRvcnMgb2YgbmVhcmVzdCBuZWlnaGJvciBwb2ludC5cXG4gICAgICAgIGl2ZWMyIHNvdXJjZU5lYXJlc3RSQyA9IGl2ZWMyKFxcbiAgICAgICAgICBtaW4oaW5wdXRTaGFwZVJDIC0gMS4wLCBmbG9vcihzb3VyY2VGcmFjSW5kZXhSQyArIFwiK2wrXCIpKSk7XFxuXFxuICAgICAgICBmbG9hdCBuZXdWYWx1ZSA9IGdldEEoYiwgc291cmNlTmVhcmVzdFJDLngsIHNvdXJjZU5lYXJlc3RSQy55LCBkKTtcXG5cXG4gICAgICAgIHNldE91dHB1dChuZXdWYWx1ZSk7XFxuICAgICAgfVxcbiAgICBcIn0sYXM9ZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXTt2YXIgbj10Lmxlbmd0aDtpZihuPjQpdGhyb3cgbmV3IEVycm9yKFwiV2ViR0wgYmFja2VuZDogUmV2ZXJzZSBvZiByYW5rLVwiK24rXCIgdGVuc29yIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpO2lmKHRoaXMub3V0cHV0U2hhcGU9dCwxIT09bil7dmFyIHI9dC5tYXAoKGZ1bmN0aW9uKG4scil7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybi0xIT09ZS5pbmRleE9mKG4pJiYxIT09dFtuXT90W25dK1wiIC0gY29vcmRzW1wiK24rXCJdIC0gMVwiOlwiY29vcmRzW1wiK24rXCJdXCJ9KHIpfSkpLmpvaW4oXCIsXCIpLG89d2Eobik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK28rXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQoZ2V0WChcIityK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn1lbHNlIHRoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaW50IGNvb3JkID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIHNldE91dHB1dChnZXRYKFwiK3RbMF0rXCIgLSBjb29yZCAtIDEpKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn0saXM9ZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMDt2YXIgbj10Lmxlbmd0aDtpZihuPjQpdGhyb3cgbmV3IEVycm9yKFwiV2ViR0wgYmFja2VuZDogUmV2ZXJzZSBvZiByYW5rLVwiK24rXCIgdGVuc29yIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpO3RoaXMub3V0cHV0U2hhcGU9dDt2YXIgcj1zYShcInJjXCIsbiksbz1yW24tMV0rXCIgKyAxIDwgXCIrdGhpcy5vdXRwdXRTaGFwZVtuLTFdLGE9cltuLTJdK1wiICsgMSA8IFwiK3RoaXMub3V0cHV0U2hhcGVbbi0yXSxpPXdhKG4pO2Z1bmN0aW9uIHMobil7dmFyIHI9dC5tYXAoKGZ1bmN0aW9uKHIsbyl7cmV0dXJuIGZ1bmN0aW9uKG4scil7cmV0dXJuLTEhPT1lLmluZGV4T2YobikmJjEhPT10W25dP3Rbbl0rXCIgLSBcIityW25dK1wiIC0gMVwiOlwiXCIrcltuXX0obyxuKX0pKTtyZXR1cm5cImdldENoYW5uZWwoZ2V0WChcIityLmpvaW4oXCIsXCIpK1wiKSwgdmVjMihcIityLnNsaWNlKC0yKS5qb2luKFwiLFwiKStcIikpXCJ9dGhpcy51c2VyQ29kZT0xPT09bj9cIlxcbiAgICAgICAgdm9pZCBtYWluKCl7XFxuICAgICAgICAgIGludCByYyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcbiAgICAgICAgICByZXN1bHQuciA9IGdldENoYW5uZWwoZ2V0WChcIit0WzBdK1wiIC0gcmMgLSAxKSxcXG4gICAgICAgICAgICBcIit0WzBdK1wiIC0gcmMgLSAxKTtcXG4gICAgICAgICAgaWYoXCIrbytcIil7XFxuICAgICAgICAgICAgICByZXN1bHQuZyA9IGdldENoYW5uZWwoZ2V0WChcIit0WzBdK1wiIC0gKHJjICArIDEpIC0gMSksXFxuICAgICAgICAgICAgICAgIFwiK3RbMF0rXCIgLSAocmMgICsgMSkgLSAxKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICAgIH1cXG4gICAgICBcIjpcIlxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBcIitpK1wiIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuICAgICAgICAgIHJlc3VsdC5yID0gXCIrZnVuY3Rpb24odCl7cmV0dXJuIHModCl9KHIuc2xpY2UoKSkrXCI7XFxuICAgICAgICAgIGlmKFwiK28rXCIpe1xcbiAgICAgICAgICAgIHJlc3VsdC5nID0gXCIrZnVuY3Rpb24odCl7cmV0dXJuIHRbbi0xXT1cIihcIit0W24tMV0rXCIgKyAxKVwiLHModCl9KHIuc2xpY2UoKSkrXCI7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaWYoXCIrYStcIikge1xcbiAgICAgICAgICAgIHJlc3VsdC5iID0gXCIrZnVuY3Rpb24odCl7cmV0dXJuIHRbbi0yXT1cIihcIit0W24tMl0rXCIgKyAxKVwiLHModCl9KHIuc2xpY2UoKSkrXCI7XFxuICAgICAgICAgICAgaWYoXCIrbytcIikge1xcbiAgICAgICAgICAgICAgcmVzdWx0LmEgPSBcIitmdW5jdGlvbih0KXtyZXR1cm4gdFtuLTFdPVwiKFwiK3Rbbi0xXStcIiArIDEpXCIsdFtuLTJdPVwiKFwiK3Rbbi0yXStcIiArIDEpXCIscyh0KX0oci5zbGljZSgpKStcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgICB9XFxuICAgIFwifSxzcz1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1pJiYoaT0hMCksdGhpcy52YXJpYWJsZU5hbWVzPVtcInVwZGF0ZXNcIixcImluZGljZXNcIixcImRlZmF1bHRWYWx1ZVwiXSx0aGlzLm91dHB1dFNoYXBlPWE7dmFyIHM9d2Eoby5sZW5ndGgpLHU9d2EoYS5sZW5ndGgpLGM9XCJcIjsxPT09bj9jPVwiaVwiOjI9PT1uJiYoYz1cImksIGpcIik7dmFyIGw9XCJnZXRJbmRpY2VzKFwiK2MrXCIpXCIsaD1cIlwiOzE9PT1yP2g9XCJpXCI6Mj09PXImJihoPVwiaSwgY29vcmRzWzFdXCIpO3ZhciBmPVwiZ2V0VXBkYXRlcyhcIitoK1wiKVwiLGQ9ZT4xP1wic3RyaWRlc1tqXVwiOlwic3RyaWRlc1wiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIFwiK3MrXCIgc3RyaWRlcyA9IFwiK3MrXCIoXCIrbytcIik7XFxuXFxuICAgICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAgIFwiK3UrXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGZsb2F0IHN1bSA9IDAuMDtcXG4gICAgICAgICAgYm9vbCBmb3VuZCA9IGZhbHNlO1xcbiAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK3QrXCI7IGkrKykge1xcbiAgICAgICAgICAgIGludCBmbGF0dGVuZWRJbmRleCA9IDA7XFxuICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBcIitlK1wiOyBqKyspIHtcXG4gICAgICAgICAgICAgIGludCBpbmRleCA9IHJvdW5kKFwiK2wrXCIpO1xcbiAgICAgICAgICAgICAgZmxhdHRlbmVkSW5kZXggKz0gaW5kZXggKiBcIitkK1wiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoZmxhdHRlbmVkSW5kZXggPT0gY29vcmRzWzBdKSB7XFxuICAgICAgICAgICAgICBzdW0gKz0gXCIrZitcIjtcXG4gICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KG1peChnZXREZWZhdWx0VmFsdWUoKSwgc3VtLCBmbG9hdChmb3VuZCkpKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn0sdXM9ZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwic2VnbWVudElkc1wiXTt2YXIgbj10LndpbmRvd1NpemUscj10LmJhdGNoU2l6ZSxvPXQuaW5TaXplLGE9dC5udW1TZWdtZW50cyxpPWEqTWF0aC5jZWlsKG8vbik7dGhpcy5vdXRwdXRTaGFwZT1bcixpXTt2YXIgcz00Kk1hdGguZmxvb3Iobi80KSx1PW4lNCxjPVwiXFxuICAgICAgICBzdW1WYWx1ZSArPSBkb3QodmFsdWVzLCBzZWdGaWx0ZXIpO1xcbiAgICBcIixsPVwiXCI7byVuPjAmJihsPVwiXFxuICAgICAgICBpZiAoaW5JZHggPCAwIHx8IGluSWR4ID49IFwiK28rXCIpIHtcXG4gICAgICAgICAgcmV0dXJuIGluaXRpYWxpemF0aW9uVmFsdWU7XFxuICAgICAgICB9XFxuICAgICAgXCIpO3ZhciBoPVwiXCI7byVuPjAmJihoPVwiXFxuICAgICAgICBpZiAoaW5JZHggPCAwIHx8IGluSWR4ID49IFwiK28rXCIpIHtcXG4gICAgICAgICAgcmV0dXJuIC0xLjA7XFxuICAgICAgICB9XFxuICAgICAgXCIpLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBmbG9hdCBpbml0aWFsaXphdGlvblZhbHVlID0gMC4wO1xcblxcbiAgICAgIGZsb2F0IGdldFZhbHVlKGludCBiYXRjaCwgaW50IGluSWR4KSB7XFxuICAgICAgICBcIitsK1wiXFxuICAgICAgICByZXR1cm4gZ2V0WChiYXRjaCwgaW5JZHgpO1xcbiAgICAgIH1cXG5cXG4gICAgICBmbG9hdCBnZXRTZWdtZW50SWRBdEluZGV4KGludCBpbklkeCkge1xcbiAgICAgICAgXCIraCtcIlxcbiAgICAgICAgcmV0dXJuIGdldFNlZ21lbnRJZHMoaW5JZHgpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBvdXRJZHggPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgaW5PZmZzZXQgPSBpbnQoZmxvb3IoZmxvYXQob3V0SWR4KSAvIGZsb2F0KFxcbiAgICAgICAgICBcIithK1wiKSkgKiBmbG9hdChcIituK1wiKSk7XFxuICAgICAgICBpbnQgY3VycmVudFNlZyA9IGludChtb2QoZmxvYXQob3V0SWR4KSwgZmxvYXQoXCIrYStcIikpKTtcXG5cXG4gICAgICAgIGZsb2F0IHN1bVZhbHVlID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIitzK1wiOyBpICs9IDQpIHtcXG4gICAgICAgICAgaW50IGluSWR4ID0gaW5PZmZzZXQgKyBpO1xcbiAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAyKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAzKVxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICB2ZWM0IHNlZ0ZpbHRlciA9IHZlYzQoXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHgpKSA9PSBjdXJyZW50U2VnID8gMSA6IDAsXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHggKyAxKSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4ICsgMikpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCArIDMpKSA9PSBjdXJyZW50U2VnID8gMSA6IDBcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgXCIrYytcIlxcbiAgICAgICAgfVxcblxcbiAgICAgICAgaW50IGluSWR4ID0gaW5PZmZzZXQgKyBcIitzK1wiO1xcbiAgICAgICAgaWYgKFwiKygxPT09dSkrXCIpIHtcXG4gICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgaW50IGluSWR4U2VnID0gaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHgpKTtcXG5cXG4gICAgICAgICAgdmVjNCBzZWdGaWx0ZXIgPSB2ZWM0KFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4KSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgMCxcXG4gICAgICAgICAgICAwXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2MrXCJcXG4gICAgICAgIH0gZWxzZSBpZiAoXCIrKDI9PT11KStcIikge1xcbiAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgdmVjNCBzZWdGaWx0ZXIgPSB2ZWM0KFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4KSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4ICsgMSkpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgICAwXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2MrXCJcXG4gICAgICAgIH0gZWxzZSBpZiAoXCIrKDM9PT11KStcIikge1xcbiAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAyKSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIHZlYzQgc2VnRmlsdGVyID0gdmVjNChcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCkpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCArIDEpKSA9PSBjdXJyZW50U2VnID8gMSA6IDAsXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHggKyAyKSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIDBcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgXCIrYytcIlxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KHN1bVZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwifSxjcz1mdW5jdGlvbih0LGUsbil7dmFyIHIsbztpZih0aGlzLnZhcmlhYmxlTmFtZXM9W1wiY1wiLFwiYVwiLFwiYlwiXSx0aGlzLm91dHB1dFNoYXBlPWUsbj40KXRocm93IEVycm9yKFwiV2hlcmUgZm9yIHJhbmsgXCIrbitcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtpZigxPT09bilvPVwicmVzUkNcIixyPVwicmVzUkNcIjtlbHNle2Zvcih2YXIgYT1bXCJyZXNSQy54XCIsXCJyZXNSQy55XCIsXCJyZXNSQy56XCIsXCJyZXNSQy53XCJdLGk9W10scz1bXSx1PTA7dTxlLmxlbmd0aDt1Kyspcy5wdXNoKFwiXCIrYVt1XSksdTx0JiZpLnB1c2goXCJcIithW3VdKTtyPWkuam9pbigpLG89cy5qb2luKCl9dmFyIGM9d2Eobik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK2MrXCIgcmVzUkMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGNWYWwgPSBnZXRDKFwiK3IrXCIpO1xcbiAgICAgICAgaWYgKGNWYWwgPj0gMS4wKSB7XFxuICAgICAgICAgIHNldE91dHB1dChnZXRBKFwiK28rXCIpKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHNldE91dHB1dChnZXRCKFwiK28rXCIpKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIFwifSxscz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInNvdXJjZVwiXSx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy5yYW5rPXQubGVuZ3RoO3ZhciBlLG49d2EodGhpcy5yYW5rKSxyPVwidW5pZm9ybSBpbnQgc3RhcnRbXCIrdGhpcy5yYW5rK1wiXTtcIixvPWZ1bmN0aW9uKHQpe2lmKDE9PT10KXJldHVyblwic291cmNlTG9jXCI7aWYodDw9NilyZXR1cm4gaHMuc2xpY2UoMCx0KS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVyblwic291cmNlTG9jLlwiK3R9KSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IoXCJTbGljaW5nIGZvciByYW5rIFwiK3QrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9KHRoaXMucmFuayk7ZT1cIlxcbiAgICAgICAgXCIrbitcIiBzb3VyY2VMb2M7XFxuICAgICAgICBcIituK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgXCIrdC5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJzb3VyY2VMb2MuXCIraHNbZV0rXCIgPSBzdGFydFtcIitlK1wiXSArIGNvb3Jkcy5cIitoc1tlXStcIjtcIn0pKS5qb2luKFwiXFxuXCIpK1wiXFxuICAgICAgXCIsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK3IrXCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitlK1wiXFxuICAgICAgICBzZXRPdXRwdXQoZ2V0U291cmNlKFwiK28rXCIpKTtcXG4gICAgICB9XFxuICAgIFwifXJldHVybiB0LnByb3RvdHlwZS5nZXRDdXN0b21TZXR1cEZ1bmM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZih0Lmxlbmd0aCE9PXRoaXMucmFuayl0aHJvdyBFcnJvcihcIlRoZSByYW5rIChcIit0aGlzLnJhbmsrXCIpIG9mIHRoZSBwcm9ncmFtIG11c3QgbWF0Y2ggdGhlIGxlbmd0aCBvZiBzdGFydCAoXCIrdC5sZW5ndGgrXCIpXCIpO3JldHVybiBmdW5jdGlvbihuLHIpe251bGw9PWUuc3RhcnRMb2MmJihlLnN0YXJ0TG9jPW4uZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhyLFwic3RhcnRcIiksbnVsbD09ZS5zdGFydExvYyl8fG4uZ2wudW5pZm9ybTFpdihlLnN0YXJ0TG9jLHQpfX0sdH0oKSxocz1bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdO3ZhciBmcz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInNvdXJjZVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMCx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy5yYW5rPXQubGVuZ3RoO3ZhciBlPXdhKHRoaXMucmFuayksbj1zYShcImNvb3Jkc1wiLHRoaXMucmFuaykscj1zYShcInNvdXJjZUxvY1wiLHRoaXMucmFuayksbz0xPT09dGhpcy5yYW5rP1wic291cmNlTG9jXCI6XCJ2ZWMyKFwiK3Iuc2xpY2UoLTIpLmpvaW4oKStcIilcIixhPVwiZ2V0Q2hhbm5lbChnZXRTb3VyY2UoXCIrci5qb2luKCkrXCIpLCBcIitvK1wiKVwiLGk9XCJcXG4gICAgICByZXN1bHQueCA9IFwiK2ErXCI7XFxuICAgICAgaWYgKCsrXCIrblt0aGlzLnJhbmstMV0rXCIgPCBcIit0W3RoaXMucmFuay0xXStcIikge1xcbiAgICAgICAgKytcIityW3RoaXMucmFuay0xXStcIjtcXG4gICAgICAgIHJlc3VsdC55ID0gXCIrYStcIjtcXG4gICAgICAgIC0tXCIrclt0aGlzLnJhbmstMV0rXCI7XFxuICAgICAgfVxcbiAgICBcIixzPTE9PT10aGlzLnJhbms/XCJcIjpcIlxcbiAgICAgIC0tXCIrblt0aGlzLnJhbmstMV0rXCI7XFxuICAgICAgaWYgKCsrXCIrblt0aGlzLnJhbmstMl0rXCIgPCBcIit0W3RoaXMucmFuay0yXStcIikge1xcbiAgICAgICAgKytcIityW3RoaXMucmFuay0yXStcIjtcXG4gICAgICAgIHJlc3VsdC56ID0gXCIrYStcIjtcXG4gICAgICAgIGlmICgrK1wiK25bdGhpcy5yYW5rLTFdK1wiIDwgXCIrdFt0aGlzLnJhbmstMV0rXCIpIHtcXG4gICAgICAgICAgKytcIityW3RoaXMucmFuay0xXStcIjtcXG4gICAgICAgICAgcmVzdWx0LncgPSBcIithK1wiO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgXCIsdT10aGlzLnJhbms8PTQ/XCJzb3VyY2VMb2MgPSBjb29yZHMgK1xcbiAgICAgICAgICAgIFwiK2UrXCIoXCIrdC5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJzdGFydFtcIitlK1wiXVwifSkpLmpvaW4oKStcIik7XCI6dC5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHJbZV0rXCIgPSBcIituW2VdK1wiICsgc3RhcnRbXCIrZStcIl07XCJ9KSkuam9pbihcIlxcblwiKTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdW5pZm9ybSBpbnQgc3RhcnRbXCIrdGhpcy5yYW5rK1wiXTtcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitlK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgXCIrZStcIiBzb3VyY2VMb2M7XFxuICAgICAgICBcIit1K1wiXFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcbiAgICAgICAgXCIraStcIlxcbiAgICAgICAgXCIrcytcIlxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYodC5sZW5ndGghPT10aGlzLnJhbmspdGhyb3cgRXJyb3IoXCJUaGUgcmFuayAoXCIrdGhpcy5yYW5rK1wiKSBvZiB0aGUgcHJvZ3JhbSBtdXN0IG1hdGNoIHRoZSBsZW5ndGggb2Ygc3RhcnQgKFwiK3QubGVuZ3RoK1wiKVwiKTtyZXR1cm4gZnVuY3Rpb24obixyKXtudWxsPT1lLnN0YXJ0TG9jJiYoZS5zdGFydExvYz1uLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cocixcInN0YXJ0XCIpLG51bGw9PWUuc3RhcnRMb2MpfHxuLmdsLnVuaWZvcm0xaXYoZS5zdGFydExvYyx0KX19LHR9KCksZHM9ZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9bjt2YXIgcj1uLmxlbmd0aCxvPXdhKG4ubGVuZ3RoKSxhPXdhKG4ubGVuZ3RoKSxpPVwiXCI7aWYoMT09PXIpaT1cImNvb3JkcyAqIHN0cmlkZXMgKyBiZWdpblwiO2Vsc2V7dmFyIHM9MDtpPW4ubWFwKChmdW5jdGlvbih0LGUpe3JldHVybiBzKyssMT09PW4ubGVuZ3RoP1wiY29vcmRzICogc3RyaWRlc1tcIitlK1wiXSArIGJlZ2luW1wiK2UrXCJdXCI6XCJjb29yZHNbXCIrKHMtMSkrXCJdICogc3RyaWRlc1tcIitlK1wiXSArIGJlZ2luW1wiK2UrXCJdXCJ9KSkuam9pbihcIixcIil9dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK28rXCIgYmVnaW4gPSBcIitvK1wiKFwiK3QrXCIpO1xcbiAgICAgIFwiK28rXCIgc3RyaWRlcyA9IFwiK28rXCIoXCIrZStcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrYStcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIHNldE91dHB1dChnZXRYKFwiK2krXCIpKTtcXG4gICAgICB9XFxuICAgIFwifSxwcz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5ncGdwdT10LHRoaXMubnVtVXNlZFRleHR1cmVzPTAsdGhpcy5udW1GcmVlVGV4dHVyZXM9MCx0aGlzLmZyZWVUZXh0dXJlcz17fSx0aGlzLmxvZ0VuYWJsZWQ9ITEsdGhpcy51c2VkVGV4dHVyZXM9e319cmV0dXJuIHQucHJvdG90eXBlLmFjcXVpcmVUZXh0dXJlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcixvPXZzKGUsbiksYT1tcyh0LG8sbik7aWYoYSBpbiB0aGlzLmZyZWVUZXh0dXJlc3x8KHRoaXMuZnJlZVRleHR1cmVzW2FdPVtdKSxhIGluIHRoaXMudXNlZFRleHR1cmVzfHwodGhpcy51c2VkVGV4dHVyZXNbYV09W10pLHRoaXMuZnJlZVRleHR1cmVzW2FdLmxlbmd0aD4wKXt0aGlzLm51bUZyZWVUZXh0dXJlcy0tLHRoaXMubnVtVXNlZFRleHR1cmVzKyssdGhpcy5sb2coKTt2YXIgaT10aGlzLmZyZWVUZXh0dXJlc1thXS5zaGlmdCgpO3JldHVybiB0aGlzLnVzZWRUZXh0dXJlc1thXS5wdXNoKGkpLGl9cmV0dXJuIHRoaXMubnVtVXNlZFRleHR1cmVzKyssdGhpcy5sb2coKSxvPT09R3QuUEFDS0VEXzJYMl9GTE9BVDMyP3I9dGhpcy5ncGdwdS5jcmVhdGVQYWNrZWRNYXRyaXhUZXh0dXJlKHRbMF0sdFsxXSk6bz09PUd0LlBBQ0tFRF8yWDJfRkxPQVQxNj9yPXRoaXMuZ3BncHUuY3JlYXRlRmxvYXQxNlBhY2tlZE1hdHJpeFRleHR1cmUodFswXSx0WzFdKTpvPT09R3QuVU5QQUNLRURfRkxPQVQzMj9yPXRoaXMuZ3BncHUuY3JlYXRlRmxvYXQzMk1hdHJpeFRleHR1cmUodFswXSx0WzFdKTpvPT09R3QuVU5QQUNLRURfRkxPQVQxNj9yPXRoaXMuZ3BncHUuY3JlYXRlRmxvYXQxNk1hdHJpeFRleHR1cmUodFswXSx0WzFdKTpvPT09R3QuUEFDS0VEXzRYMV9VTlNJR05FRF9CWVRFJiYocj10aGlzLmdwZ3B1LmNyZWF0ZVVuc2lnbmVkQnl0ZXNNYXRyaXhUZXh0dXJlKHRbMF0sdFsxXSkpLHRoaXMudXNlZFRleHR1cmVzW2FdLnB1c2gocikscn0sdC5wcm90b3R5cGUucmVsZWFzZVRleHR1cmU9ZnVuY3Rpb24odCxlLG4scil7aWYobnVsbCE9dGhpcy5mcmVlVGV4dHVyZXMpe3ZhciBvPW1zKGUsdnMobixyKSxyKTtvIGluIHRoaXMuZnJlZVRleHR1cmVzfHwodGhpcy5mcmVlVGV4dHVyZXNbb109W10pLHRoaXMuZnJlZVRleHR1cmVzW29dLnB1c2godCksdGhpcy5udW1GcmVlVGV4dHVyZXMrKyx0aGlzLm51bVVzZWRUZXh0dXJlcy0tO3ZhciBhPXRoaXMudXNlZFRleHR1cmVzW29dLGk9YS5pbmRleE9mKHQpO2lmKGk8MCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmVsZWFzZSBhIHRleHR1cmUgdGhhdCB3YXMgbmV2ZXIgcHJvdmlkZWQgYnkgdGhpcyB0ZXh0dXJlIG1hbmFnZXJcIik7YS5zcGxpY2UoaSwxKSx0aGlzLmxvZygpfX0sdC5wcm90b3R5cGUubG9nPWZ1bmN0aW9uKCl7aWYodGhpcy5sb2dFbmFibGVkKXt2YXIgdD10aGlzLm51bUZyZWVUZXh0dXJlcyt0aGlzLm51bVVzZWRUZXh0dXJlcztjb25zb2xlLmxvZyhcIkZyZWUvVXNlZFwiLHRoaXMubnVtRnJlZVRleHR1cmVzK1wiIC8gXCIrdGhpcy5udW1Vc2VkVGV4dHVyZXMsXCIoXCIrdCtcIilcIil9fSx0LnByb3RvdHlwZS5nZXROdW1Vc2VkVGV4dHVyZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5udW1Vc2VkVGV4dHVyZXN9LHQucHJvdG90eXBlLmdldE51bUZyZWVUZXh0dXJlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm51bUZyZWVUZXh0dXJlc30sdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYobnVsbCE9dGhpcy5mcmVlVGV4dHVyZXMpe2Zvcih2YXIgZSBpbiB0aGlzLmZyZWVUZXh0dXJlcyl0aGlzLmZyZWVUZXh0dXJlc1tlXS5mb3JFYWNoKChmdW5jdGlvbihlKXt0LmdwZ3B1LmRlbGV0ZU1hdHJpeFRleHR1cmUoZSl9KSk7Zm9yKHZhciBlIGluIHRoaXMudXNlZFRleHR1cmVzKXRoaXMudXNlZFRleHR1cmVzW2VdLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShlKX0pKTt0aGlzLmZyZWVUZXh0dXJlcz1udWxsLHRoaXMudXNlZFRleHR1cmVzPW51bGwsdGhpcy5udW1Vc2VkVGV4dHVyZXM9MCx0aGlzLm51bUZyZWVUZXh0dXJlcz0wfX0sdH0oKTtmdW5jdGlvbiB2cyh0LGUpe2lmKHQ9PT16dC5VUExPQUQpcmV0dXJuIEd0LlBBQ0tFRF8yWDJfRkxPQVQzMjtpZih0PT09enQuUkVOREVSfHxudWxsPT10KXJldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gaSgpLmdldEJvb2woXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9FTkFCTEVEXCIpP3Q/R3QuUEFDS0VEXzJYMl9GTE9BVDMyOkd0LlVOUEFDS0VEX0ZMT0FUMzI6dD9HdC5QQUNLRURfMlgyX0ZMT0FUMTY6R3QuVU5QQUNLRURfRkxPQVQxNn0oZSk7aWYodD09PXp0LkRPV05MT0FEfHx0PT09enQuUElYRUxTKXJldHVybiBHdC5QQUNLRURfNFgxX1VOU0lHTkVEX0JZVEU7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBsb2dpY2FsIHRleHR1cmUgdHlwZSBcIit0KX1mdW5jdGlvbiBtcyh0LGUsbil7cmV0dXJuIHRbMF0rXCJfXCIrdFsxXStcIl9cIitlK1wiX1wiK259dmFyIGdzPWZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07Zm9yKHZhciBuPW5ldyBBcnJheSh0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09dFtyXSplW3JdO3RoaXMub3V0cHV0U2hhcGU9bix0aGlzLnJhbms9bi5sZW5ndGg7dmFyIG89d2EodGhpcy5yYW5rKSxhPWZ1bmN0aW9uKHQpe3ZhciBlPXQubGVuZ3RoO2lmKGU+NSl0aHJvdyBFcnJvcihcIlRpbGUgZm9yIHJhbmsgXCIrZStcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtpZigxPT09ZSlyZXR1cm5cImltb2QocmVzUkMsIFwiK3RbMF0rXCIpXCI7Zm9yKHZhciBuPVtcInJlc1JDLnhcIixcInJlc1JDLnlcIixcInJlc1JDLnpcIixcInJlc1JDLndcIixcInJlc1JDLnVcIl0scj1bXSxvPTA7bzx0Lmxlbmd0aDtvKyspci5wdXNoKFwiaW1vZChcIituW29dK1wiLCBcIit0W29dK1wiKVwiKTtyZXR1cm4gci5qb2luKCl9KHQpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIHJlc1JDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQoZ2V0QShcIithK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn07dmFyIHlzPWZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07Zm9yKHZhciBuPW5ldyBBcnJheSh0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09dFtlW3JdXTt0aGlzLm91dHB1dFNoYXBlPW4sdGhpcy5yYW5rPW4ubGVuZ3RoO3ZhciBvPXdhKHRoaXMucmFuayksYT1mdW5jdGlvbih0KXt2YXIgZT10Lmxlbmd0aDtpZihlPjYpdGhyb3cgRXJyb3IoXCJUcmFuc3Bvc2UgZm9yIHJhbmsgXCIrZStcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtmb3IodmFyIG49W1wicmVzUkMueFwiLFwicmVzUkMueVwiLFwicmVzUkMuelwiLFwicmVzUkMud1wiLFwicmVzUkMudVwiLFwicmVzUkMudlwiXSxyPW5ldyBBcnJheShlKSxvPTA7bzx0Lmxlbmd0aDtvKyspclt0W29dXT1uW29dO3JldHVybiByLmpvaW4oKX0oZSk7dGhpcy51c2VyQ29kZT1cIlxcbiAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgXCIrbytcIiByZXNSQyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgIHNldE91dHB1dChnZXRBKFwiK2ErXCIpKTtcXG4gICAgfVxcbiAgICBcIn07dmFyIHhzPWZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy5wYWNrZWRJbnB1dHM9ITAsdGhpcy5wYWNrZWRPdXRwdXQ9ITA7Zm9yKHZhciBuPW5ldyBBcnJheSh0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09dFtlW3JdXTtpZih0aGlzLm91dHB1dFNoYXBlPW4sdGhpcy5yYW5rPW4ubGVuZ3RoLHRoaXMucmFuaz42KXRocm93IEVycm9yKFwiUGFja2VkIHRyYW5zcG9zZSBmb3IgcmFuayBcIit0aGlzLnJhbmsrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWQuXCIpO3ZhciBvPXdhKHRoaXMucmFuayksYT1pYShcInJjXCIsdGhpcy5yYW5rKSxpPW5ldyBBcnJheSh0aGlzLnJhbmspO2ZvcihyPTA7cjxlLmxlbmd0aDtyKyspaVtlW3JdXT1hW3JdO3ZhciBzPVwidmVjMihcIitpLnNsaWNlKC0yKS5qb2luKCkrXCIpXCIsdT1cIisrXCIrYVt0aGlzLnJhbmstMV0rXCIgPCBcIituW3RoaXMucmFuay0xXSxjPVwiZ2V0Q2hhbm5lbChnZXRBKFwiK2kuam9pbigpK1wiKSwgXCIrcytcIilcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICBcIitvK1wiIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG4gICAgICByZXN1bHRbMF0gPSBcIitjK1wiO1xcbiAgICAgIGlmKFwiK3UrXCIpIHtcXG4gICAgICAgIHJlc3VsdFsxXSA9IFwiK2MrXCI7XFxuICAgICAgfVxcbiAgICAgIC0tXCIrYVt0aGlzLnJhbmstMV0rXCI7XFxuICAgICAgaWYoKytcIithW3RoaXMucmFuay0yXStcIiA8IFwiK25bdGhpcy5yYW5rLTJdK1wiKSB7XFxuICAgICAgICByZXN1bHRbMl0gPSBcIitjK1wiO1xcbiAgICAgICAgaWYoXCIrdStcIikge1xcbiAgICAgICAgICByZXN1bHRbM10gPSBcIitjK1wiO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgfVxcbiAgICBcIn0sYnM9MS43NTgwOTkzNDA4NDczNzY4LHdzPTEuMDUwNzAwOTg3MzU1NDgwNSxDcz1mdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgZmxvYXQgdW5hcnlPcGVyYXRpb24oZmxvYXQgeCkge1xcbiAgICAgICAgXCIrZStcIlxcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBmbG9hdCB4ID0gZ2V0QUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCB5ID0gdW5hcnlPcGVyYXRpb24oeCk7XFxuXFxuICAgICAgICBzZXRPdXRwdXQoeSk7XFxuICAgICAgfVxcbiAgICBcIn0sRXM9XCJpZiAoaXNuYW4oeCkpIHJldHVybiB4O1wiLFJzPVwicmV0dXJuIHg7XCIsSXM9XCJyZXR1cm4gYWJzKHgpO1wiLGtzPUVzK1wiXFxuICByZXR1cm4gKHggPCAwLjApID8gMC4wIDogeDtcXG5cIixTcz1FcytcIlxcbiAgcmV0dXJuICh4IDwgMC4wKSA/IDAuMCA6IG1pbig2LjAsIHgpO1xcblwiLEFzPVwicmV0dXJuICh4ID49IDAuMCkgPyB4IDogKGV4cCh4KSAtIDEuMCk7XCIsRHM9XCJcXG4gIC8vIFN0YWJsZSBhbmQgQXR0cmFjdGluZyBGaXhlZCBQb2ludCAoMCwgMSkgZm9yIE5vcm1hbGl6ZWQgV2VpZ2h0cy5cXG4gIC8vIHNlZTogaHR0cHM6Ly9hcnhpdi5vcmcvYWJzLzE3MDYuMDI1MTVcXG4gIGZsb2F0IHNjYWxlQWxwaGEgPSBcIiticytcIjtcXG4gIGZsb2F0IHNjYWxlID0gXCIrd3MrXCI7XFxuICByZXR1cm4gKHggPj0gMC4wKSA/IHNjYWxlICogeCA6IHNjYWxlQWxwaGEgKiAoZXhwKHgpIC0gMS4wKTtcXG5cIjt2YXIgVHM9XCJyZXR1cm4gLXg7XCIsTnM9XCJyZXR1cm4gY2VpbCh4KTtcIixGcz1cInJldHVybiBmbG9vcih4KTtcIixfcz1cInJldHVybiBleHAoeCk7XCIsT3M9XCJyZXR1cm4gZXhwKHgpIC0gMS4wO1wiLE1zPUVzK1wiXFxuICByZXR1cm4gc2luKHgpO1xcblwiLEJzPUVzK1wiXFxuICByZXR1cm4gY29zKHgpO1xcblwiLFBzPUVzK1wiXFxuICBpZiAoYWJzKHgpID4gMS4pIHtcXG4gICAgcmV0dXJuIE5BTjtcXG4gIH1cXG4gIHJldHVybiBhc2luKHgpO1xcblwiLExzPUVzK1wiXFxuICBpZiAoYWJzKHgpID4gMS4pIHtcXG4gICAgcmV0dXJuIE5BTjtcXG4gIH1cXG4gIHJldHVybiBhY29zKHgpO1xcblwiLFdzPUVzK1wiXFxuICByZXR1cm4gYXRhbih4KTtcXG5cIixVcz1FcytcInJldHVybiBsb2coeCArIHNxcnQoeCAqIHggKyAxLjApKTtcIixWcz1FcytcIlxcbiAgaWYgKHggPCAxLjApIHJldHVybiBOQU47XFxuICByZXR1cm4gbG9nKHggKyBzcXJ0KHggKiB4IC0gMS4wKSk7XCIsenM9RXMrXCJcXG4gIGlmICgoeCA8IC0xLjApIHx8ICh4ID4gMS4wKSkgcmV0dXJuIE5BTjtcXG4gIHJldHVybiAobG9nKDEuMCArIHgpIC0gbG9nKDEuMCAtIHgpKSAvIDIuMDtcIixHcz1cInJldHVybiB4O1wiLEhzPVwicmV0dXJuIHg7XCIscXM9XCJcXG4gIHZlYzQgcmVzdWx0ID0geCAqIHZlYzQoZ3JlYXRlclRoYW5FcXVhbCh4LCB2ZWM0KDAuMCkpKTtcXG4gIGJ2ZWM0IGlzTmFOID0gaXNuYW4oeCk7XFxuXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPyB4LnIgOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA/IHguZyA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc05hTi5iID8geC5iIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPyB4LmEgOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsS3M9XCJcXG4gIHZlYzQgcmVzdWx0ID0gbWluKHgsIHZlYzQoNi4pKSAqIHZlYzQoZ3JlYXRlclRoYW5FcXVhbCh4LCB2ZWM0KDAuMCkpKTtcXG4gIGJ2ZWM0IGlzTmFOID0gaXNuYW4oeCk7XFxuXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPyB4LnIgOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA/IHguZyA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc05hTi5iID8geC5iIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPyB4LmEgOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsanM9XCJcXG4gIHZlYzQgcmVzdWx0O1xcblxcbiAgcmVzdWx0LnIgPSAoeC5yID49IDAuMCkgPyB4LnIgOiAoZXhwKHgucikgLSAxLjApO1xcbiAgcmVzdWx0LmcgPSAoeC5nID49IDAuMCkgPyB4LmcgOiAoZXhwKHguZykgLSAxLjApO1xcbiAgcmVzdWx0LmIgPSAoeC5iID49IDAuMCkgPyB4LmIgOiAoZXhwKHguYikgLSAxLjApO1xcbiAgcmVzdWx0LmEgPSAoeC5hID49IDAuMCkgPyB4LmEgOiAoZXhwKHguYSkgLSAxLjApO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIixYcz1mdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMucGFja2VkSW5wdXRzPSEwLHRoaXMucGFja2VkT3V0cHV0PSEwLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdmVjNCB1bmFyeU9wZXJhdGlvbih2ZWM0IHgpIHtcXG4gICAgICAgIFwiK2UrXCJcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdmVjNCB4ID0gZ2V0QUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICB2ZWM0IHkgPSB1bmFyeU9wZXJhdGlvbih4KTtcXG5cXG4gICAgICAgIHNldE91dHB1dCh5KTtcXG4gICAgICB9XFxuICAgIFwifSxZcz1mdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnBhY2tlZElucHV0cz0hMCx0aGlzLnBhY2tlZE91dHB1dD0hMSx0aGlzLm91dHB1dFNoYXBlPXQ7dmFyIGU9dC5sZW5ndGgsbj1zYShcInJjXCIsZSkscj13YShlKSxvPWZ1bmN0aW9uKHQsZSl7aWYoMT09PXQpcmV0dXJuXCJyY1wiO2Zvcih2YXIgbj1cIlwiLHI9MDtyPHQ7cisrKW4rPWVbcl0scjx0LTEmJihuKz1cIixcIik7cmV0dXJuIG59KGUsbiksYT1uLnNsaWNlKC0yKSxpPWU8PTE/XCJyY1wiOlwidmVjMihcIithLmpvaW4oXCIsXCIpK1wiKVwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIityK1wiIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICB2ZWM0IHBhY2tlZElucHV0ID0gZ2V0QShcIitvK1wiKTtcXG5cXG4gICAgICAgIHNldE91dHB1dChnZXRDaGFubmVsKHBhY2tlZElucHV0LCBcIitpK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn0sJHM9e307ZnVuY3Rpb24gUXModCxlKXtpZih2b2lkIDA9PT1lJiYoZT0hMSksXCJsaW5lYXJcIj09PXQpcmV0dXJuIGU/SHM6UnM7aWYoXCJyZWx1XCI9PT10KXJldHVybiBlP3FzOmtzO2lmKFwiZWx1XCI9PT10KXJldHVybiBlP2pzOkFzO2lmKFwicmVsdTZcIj09PXQpcmV0dXJuIGU/S3M6U3M7aWYoXCJwcmVsdVwiPT09dClyZXR1cm4gZT9QYTpNYTt0aHJvdyBuZXcgRXJyb3IoXCJBY3RpdmF0aW9uIFwiK3QrXCIgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkIGZvciB0aGUgV2ViR0wgYmFja2VuZC5cIil9dmFyIEpzPTYwMDt2YXIgWnM9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlKXt2YXIgbixyPXQuY2FsbCh0aGlzKXx8dGhpcztpZihyLnBlbmRpbmdSZWFkPW5ldyBXZWFrTWFwLHIucGVuZGluZ0Rpc3Bvc2FsPW5ldyBXZWFrU2V0LHIuZGF0YVJlZkNvdW50PW5ldyBXZWFrTWFwLHIubnVtQnl0ZXNJbkdQVT0wLHIudXBsb2FkV2FpdE1zPTAsci5kb3dubG9hZFdhaXRNcz0wLHIud2FybmVkQWJvdXRNZW1vcnk9ITEsci5wZW5kaW5nRGVsZXRlcz0wLHIuZGlzcG9zZWQ9ITEsIWkoKS5nZXRCb29sKFwiSEFTX1dFQkdMXCIpKXRocm93IG5ldyBFcnJvcihcIldlYkdMIGlzIG5vdCBzdXBwb3J0ZWQgb24gdGhpcyBkZXZpY2VcIik7aWYobnVsbD09ZSl7dmFyIG89anQoaSgpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpO3IuYmluYXJ5Q2FjaGU9KG49aSgpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpaW4gJHM/JHNbbl06KCRzW25dPXt9LCRzW25dKSxyLmdwZ3B1PW5ldyBCaShvKSxyLmNhbnZhcz1vLmNhbnZhcyxyLmdwZ3B1Q3JlYXRlZExvY2FsbHk9ITB9ZWxzZSByLmdwZ3B1PWUsci5iaW5hcnlDYWNoZT17fSxyLmdwZ3B1Q3JlYXRlZExvY2FsbHk9ITEsci5jYW52YXM9ZS5nbC5jYW52YXM7cmV0dXJuIHIudGV4dHVyZU1hbmFnZXI9bmV3IHBzKHIuZ3BncHUpLHIubnVtTUJCZWZvcmVXYXJuaW5nPW51bGw9PWkoKS5nbG9iYWwuc2NyZWVuPzEwMjQ6aSgpLmdsb2JhbC5zY3JlZW4uaGVpZ2h0KmkoKS5nbG9iYWwuc2NyZWVuLndpZHRoKndpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKkpzLzEwMjQvMTAyNCxyLnRleERhdGE9bmV3IHhvKHIsTHQpLHJ9cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS5udW1EYXRhSWRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGV4RGF0YS5udW1EYXRhSWRzKCkrKHRoaXMuY3B1QmFja2VuZD90aGlzLmNwdUJhY2tlbmQubnVtRGF0YUlkcygpOjApLXRoaXMucGVuZGluZ0RlbGV0ZXN9LG8ucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSxuKXtpZihpKCkuZ2V0Qm9vbChcIkRFQlVHXCIpJiZ0aGlzLmNoZWNrTnVtZXJpY2FsUHJvYmxlbXModCksXCJjb21wbGV4NjRcIj09PW4mJm51bGwhPXQpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHdyaXRlIHRvIGEgY29tcGxleDY0IGR0eXBlLiBQbGVhc2UgdXNlIHRmLmNvbXBsZXgocmVhbCwgaW1hZykuXCIpO3ZhciByPXt9O3JldHVybiB0aGlzLnRleERhdGEuc2V0KHIse3NoYXBlOmUsZHR5cGU6bix2YWx1ZXM6dCx1c2FnZTp6dC5VUExPQUR9KSxyfSxvLnByb3RvdHlwZS5tb3ZlPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKGkoKS5nZXRCb29sKFwiREVCVUdcIikmJnRoaXMuY2hlY2tOdW1lcmljYWxQcm9ibGVtcyhlKSxcImNvbXBsZXg2NFwiPT09cil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgd3JpdGUgdG8gYSBjb21wbGV4NjQgZHR5cGUuIFBsZWFzZSB1c2UgdGYuY29tcGxleChyZWFsLCBpbWFnKS5cIik7dGhpcy50ZXhEYXRhLnNldCh0LHtzaGFwZTpuLGR0eXBlOnIsdmFsdWVzOmUsdXNhZ2U6enQuVVBMT0FEfSl9LG8ucHJvdG90eXBlLnJlYWRTeW5jPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMudGV4RGF0YS5nZXQodCksbj1lLnZhbHVlcyxyPWUuZHR5cGUsbz1lLmNvbXBsZXhUZW5zb3JzLGE9ZS5zbGljZSxpPWUuc2hhcGUscz1lLmlzUGFja2VkO2lmKG51bGwhPWEpe3ZhciB1PXZvaWQgMDt1PXM/bmV3IFhzKGksR3MpOm5ldyBDcyhpLEdzKTt2YXIgYz10aGlzLnJ1bldlYkdMUHJvZ3JhbSh1LFt7ZGF0YUlkOnQsc2hhcGU6aSxkdHlwZTpyfV0sciksbD10aGlzLnJlYWRTeW5jKGMuZGF0YUlkKTtyZXR1cm4gdGhpcy5kaXNwb3NlRGF0YShjLmRhdGFJZCksbH1pZihudWxsIT1uKXJldHVybiB0aGlzLmNvbnZlcnRBbmRDYWNoZU9uQ1BVKHQpO2lmKFwic3RyaW5nXCI9PT1yKXJldHVybiBuO3ZhciBoLGYsZD1udWxsIT10aGlzLmFjdGl2ZVRpbWVyczsoZCYmKGg9ZXQoKSksXCJjb21wbGV4NjRcIj09PXIpP2Y9Vm8oby5yZWFsLmRhdGFTeW5jKCksby5pbWFnLmRhdGFTeW5jKCkpOmY9dGhpcy5nZXRWYWx1ZXNGcm9tVGV4dHVyZSh0KTtyZXR1cm4gZCYmKHRoaXMuZG93bmxvYWRXYWl0TXMrPWV0KCktaCksdGhpcy5jb252ZXJ0QW5kQ2FjaGVPbkNQVSh0LGYpfSxvLnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSxuLG8sYSxzLHUsYyxsLGgsZixkLHAsdixtLGcseSx4LGIsdyxDLEUsUjtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKHRoaXMucGVuZGluZ1JlYWQuaGFzKHQpKXJldHVybiBlPXRoaXMucGVuZGluZ1JlYWQuZ2V0KHQpLFsyLG5ldyBQcm9taXNlKChmdW5jdGlvbih0KXtyZXR1cm4gZS5wdXNoKHQpfSkpXTtpZihuPXRoaXMudGV4RGF0YS5nZXQodCksbz1uLnZhbHVlcyxhPW4uc2hhcGUscz1uLnNsaWNlLHU9bi5kdHlwZSxjPW4uY29tcGxleFRlbnNvcnMsbD1uLmlzUGFja2VkLG51bGwhPXMpcmV0dXJuIGg9dm9pZCAwLGg9bD9uZXcgWHMoYSxHcyk6bmV3IENzKGEsR3MpLGY9dGhpcy5ydW5XZWJHTFByb2dyYW0oaCxbe2RhdGFJZDp0LHNoYXBlOmEsZHR5cGU6dX1dLHUpLGQ9dGhpcy5yZWFkKGYuZGF0YUlkKSx0aGlzLmRpc3Bvc2VEYXRhKGYuZGF0YUlkKSxbMixkXTtpZihudWxsIT1vKXJldHVyblsyLHRoaXMuY29udmVydEFuZENhY2hlT25DUFUodCldO2lmKCFpKCkuZ2V0Qm9vbChcIldFQkdMX0RPV05MT0FEX0ZMT0FUX0VOQUJMRURcIikmJjI9PT1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKSl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3IuZGF0YSgpIHdpdGggV0VCR0xfRE9XTkxPQURfRkxPQVRfRU5BQkxFRD1mYWxzZSBhbmQgV0VCR0xfVkVSU0lPTj0yIG5vdCB5ZXQgc3VwcG9ydGVkLlwiKTtyZXR1cm4gcD1udWxsLFwiY29tcGxleDY0XCIhPT11JiZpKCkuZ2V0KFwiV0VCR0xfQlVGRkVSX1NVUFBPUlRFRFwiKSYmKHY9dGhpcy5kZWNvZGUodCksbT10aGlzLnRleERhdGEuZ2V0KHYuZGF0YUlkKSxwPShSPXRoaXMuZ3BncHUpLmNyZWF0ZUJ1ZmZlckZyb21UZXh0dXJlLmFwcGx5KFIsW20udGV4dHVyZV0uY29uY2F0KFl0KGEpKSkpLHRoaXMucGVuZGluZ1JlYWQuc2V0KHQsW10pLFwiY29tcGxleDY0XCI9PT11P1szLDJdOls0LHRoaXMuZ3BncHUuY3JlYXRlQW5kV2FpdEZvckZlbmNlKCldO2Nhc2UgMTpyLnNlbnQoKSxyLmxhYmVsPTI7Y2FzZSAyOnJldHVyblwiY29tcGxleDY0XCIhPT11P1szLDRdOls0LFByb21pc2UuYWxsKFtjLnJlYWwuZGF0YSgpLGMuaW1hZy5kYXRhKCldKV07Y2FzZSAzOnJldHVybiB5PXIuc2VudCgpLHg9eVswXSxiPXlbMV0sZz1Wbyh4LGIpLFszLDVdO2Nhc2UgNDpudWxsPT1wP2c9dGhpcy5nZXRWYWx1ZXNGcm9tVGV4dHVyZSh0KToodz1rKGEpLGc9dGhpcy5ncGdwdS5kb3dubG9hZEZsb2F0MzJNYXRyaXhGcm9tQnVmZmVyKHAsdykpLHIubGFiZWw9NTtjYXNlIDU6cmV0dXJuIG51bGwhPXYmJnRoaXMuZGlzcG9zZURhdGEodi5kYXRhSWQpLEM9dGhpcy5jb252ZXJ0QW5kQ2FjaGVPbkNQVSh0LGcpLEU9dGhpcy5wZW5kaW5nUmVhZC5nZXQodCksdGhpcy5wZW5kaW5nUmVhZC5kZWxldGUodCksRS5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gdChDKX0pKSx0aGlzLnBlbmRpbmdEaXNwb3NhbC5oYXModCkmJih0aGlzLnBlbmRpbmdEaXNwb3NhbC5kZWxldGUodCksdGhpcy5kaXNwb3NlRGF0YSh0KSx0aGlzLnBlbmRpbmdEZWxldGVzLS0pLFsyLENdfX0pKX0pKX0sby5wcm90b3R5cGUuY2hlY2tOdW1lcmljYWxQcm9ibGVtcz1mdW5jdGlvbih0KXtpZihudWxsIT10KWZvcih2YXIgZT0wO2U8dC5sZW5ndGg7ZSsrKXt2YXIgbj10W2VdO2lmKCFlZShuKSl7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9DQVBBQkxFXCIpKXRocm93IEVycm9yKFwiVGhlIHZhbHVlIFwiK24rXCIgY2Fubm90IGJlIHJlcHJlc2VudGVkIHdpdGggeW91ciBjdXJyZW50IHNldHRpbmdzLiBDb25zaWRlciBlbmFibGluZyBmbG9hdDMyIHJlbmRlcmluZzogJ3RmLmVudigpLnNldCgnV0VCR0xfUkVOREVSX0ZMT0FUMzJfRU5BQkxFRCcsIHRydWUpOydcIik7dGhyb3cgRXJyb3IoXCJUaGUgdmFsdWUgXCIrbitcIiBjYW5ub3QgYmUgcmVwcmVzZW50ZWQgb24gdGhpcyBkZXZpY2UuXCIpfX19LG8ucHJvdG90eXBlLmdldFZhbHVlc0Zyb21UZXh0dXJlPWZ1bmN0aW9uKHQpe3ZhciBlLG49dGhpcy50ZXhEYXRhLmdldCh0KSxyPW4uc2hhcGUsbz1uLmR0eXBlLGE9bi5pc1BhY2tlZCxzPWsocik7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9ET1dOTE9BRF9GTE9BVF9FTkFCTEVEXCIpKXt2YXIgdT10aGlzLmRlY29kZSh0KSxjPXRoaXMudGV4RGF0YS5nZXQodS5kYXRhSWQpLGw9KGU9dGhpcy5ncGdwdSkuZG93bmxvYWRNYXRyaXhGcm9tUGFja2VkVGV4dHVyZS5hcHBseShlLFtjLnRleHR1cmVdLmNvbmNhdChZdChyKSkpLnN1YmFycmF5KDAscyk7cmV0dXJuIHRoaXMuZGlzcG9zZURhdGEodS5kYXRhSWQpLGx9dmFyIGg9aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpJiYhMD09PWEsZj1oP1RlKHIpOnIsZD1oP25ldyBjaShmKTpuZXcgdWkoZikscD10aGlzLnJ1bldlYkdMUHJvZ3JhbShkLFt7c2hhcGU6ZixkdHlwZTpvLGRhdGFJZDp0fV0sXCJmbG9hdDMyXCIpLHY9dGhpcy50ZXhEYXRhLmdldChwLmRhdGFJZCksbT10aGlzLmdwZ3B1LmRvd25sb2FkQnl0ZUVuY29kZWRGbG9hdE1hdHJpeEZyb21PdXRwdXRUZXh0dXJlKHYudGV4dHVyZSx2LnRleFNoYXBlWzBdLHYudGV4U2hhcGVbMV0pLnN1YmFycmF5KDAscyk7cmV0dXJuIHRoaXMuZGlzcG9zZURhdGEocC5kYXRhSWQpLG19LG8ucHJvdG90eXBlLnRpbWU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlLG4sbyxhLHMsdSxjO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9dGhpcy5hY3RpdmVUaW1lcnMsbj1bXSxvPSExLG51bGw9PXRoaXMucHJvZ3JhbVRpbWVyc1N0YWNrPyh0aGlzLnByb2dyYW1UaW1lcnNTdGFjaz1uLG89ITApOnRoaXMuYWN0aXZlVGltZXJzLnB1c2gobiksdGhpcy5hY3RpdmVUaW1lcnM9bix0KCksYT1JKHRoaXMuYWN0aXZlVGltZXJzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQucXVlcnl9KSkpLmZpbHRlcigoZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPXR9KSkscz1JKHRoaXMuYWN0aXZlVGltZXJzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pKSkuZmlsdGVyKChmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dH0pKSx0aGlzLmFjdGl2ZVRpbWVycz1lLG8mJih0aGlzLnByb2dyYW1UaW1lcnNTdGFjaz1udWxsKSx1PXt1cGxvYWRXYWl0TXM6dGhpcy51cGxvYWRXYWl0TXMsZG93bmxvYWRXYWl0TXM6dGhpcy5kb3dubG9hZFdhaXRNcyxrZXJuZWxNczpudWxsLHdhbGxNczpudWxsfSxpKCkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1JFTElBQkxFXCIpPjA/WzQsUHJvbWlzZS5hbGwoYSldOlszLDJdO2Nhc2UgMTpyZXR1cm4gYz1yLnNlbnQoKSx1Lmtlcm5lbE1zPXcoYyksdS5nZXRFeHRyYVByb2ZpbGVJbmZvPWZ1bmN0aW9uKCl7cmV0dXJuIGMubWFwKChmdW5jdGlvbih0LGUpe3JldHVybntuYW1lOnNbZV0sbXM6dH19KSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5uYW1lK1wiOiBcIit0Lm1zfSkpLmpvaW4oXCIsIFwiKX0sWzMsM107Y2FzZSAyOnUua2VybmVsTXM9e2Vycm9yOlwiV2ViR0wgcXVlcnkgdGltZXJzIGFyZSBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQuXCJ9LHIubGFiZWw9MztjYXNlIDM6cmV0dXJuIHRoaXMudXBsb2FkV2FpdE1zPTAsdGhpcy5kb3dubG9hZFdhaXRNcz0wLFsyLHVdfX0pKX0pKX0sby5wcm90b3R5cGUubWVtb3J5PWZ1bmN0aW9uKCl7cmV0dXJue3VucmVsaWFibGU6ITEsbnVtQnl0ZXNJbkdQVTp0aGlzLm51bUJ5dGVzSW5HUFV9fSxvLnByb3RvdHlwZS5zdGFydFRpbWVyPWZ1bmN0aW9uKCl7cmV0dXJuIGkoKS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fUkVMSUFCTEVcIik+MD90aGlzLmdwZ3B1LmJlZ2luUXVlcnkoKTp7c3RhcnRNczpldCgpLGVuZE1zOm51bGx9fSxvLnByb3RvdHlwZS5lbmRUaW1lcj1mdW5jdGlvbih0KXtyZXR1cm4gaSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9SRUxJQUJMRVwiKT4wPyh0aGlzLmdwZ3B1LmVuZFF1ZXJ5KCksdCk6KHQuZW5kTXM9ZXQoKSx0KX0sby5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihuKXtyZXR1cm4gaSgpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9SRUxJQUJMRVwiKT4wP1syLHRoaXMuZ3BncHUud2FpdEZvclF1ZXJ5QW5kR2V0VGltZSh0KV06WzIsKGU9dCkuZW5kTXMtZS5zdGFydE1zXX0pKX0pKX0sby5wcm90b3R5cGUuZGlzcG9zZURhdGE9ZnVuY3Rpb24odCl7aWYoIXRoaXMucGVuZGluZ0Rpc3Bvc2FsLmhhcyh0KSl7aWYodGhpcy5wZW5kaW5nUmVhZC5oYXModCkpcmV0dXJuIHRoaXMucGVuZGluZ0Rpc3Bvc2FsLmFkZCh0KSx2b2lkIHRoaXMucGVuZGluZ0RlbGV0ZXMrKztpZih0aGlzLnRleERhdGEuaGFzKHQpKXt0aGlzLnJlbGVhc2VHUFVEYXRhKHQpO3ZhciBlPXRoaXMudGV4RGF0YS5nZXQodCkuY29tcGxleFRlbnNvcnM7bnVsbCE9ZSYmKGUucmVhbC5kaXNwb3NlKCksZS5pbWFnLmRpc3Bvc2UoKSksdGhpcy50ZXhEYXRhLmRlbGV0ZSh0KX19fSxvLnByb3RvdHlwZS5yZWxlYXNlR1BVRGF0YT1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnRleERhdGEuZ2V0KHQpLG49ZS50ZXh0dXJlLHI9ZS5kdHlwZSxvPWUudGV4U2hhcGUsYT1lLnVzYWdlLGk9ZS5pc1BhY2tlZCxzPWUuc2xpY2UsdT1zJiZzLm9yaWdEYXRhSWR8fHQsYz10aGlzLmRhdGFSZWZDb3VudC5nZXQodSk7Yz4xP3RoaXMuZGF0YVJlZkNvdW50LnNldCh1LGMtMSk6KHRoaXMuZGF0YVJlZkNvdW50LmRlbGV0ZSh1KSxudWxsIT1uJiYodGhpcy5udW1CeXRlc0luR1BVLT10aGlzLmNvbXB1dGVCeXRlcyhvLHIpLHRoaXMudGV4dHVyZU1hbmFnZXIucmVsZWFzZVRleHR1cmUobixvLGEsaSkpKTt2YXIgbD10aGlzLnRleERhdGEuZ2V0KHQpO2wudGV4dHVyZT1udWxsLGwudGV4U2hhcGU9bnVsbCxsLmlzUGFja2VkPSExLGwuc2xpY2U9bnVsbH0sby5wcm90b3R5cGUuZ2V0VGV4dHVyZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy51cGxvYWRUb0dQVSh0KSx0aGlzLnRleERhdGEuZ2V0KHQpLnRleHR1cmV9LG8ucHJvdG90eXBlLmdldERhdGFJbmZvPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRleERhdGEuZ2V0KHQpfSxvLnByb3RvdHlwZS5nZXRDUFVCYWNrZW5kPWZ1bmN0aW9uKCl7cmV0dXJuIGkoKS5nZXRCb29sKFwiV0VCR0xfQ1BVX0ZPUldBUkRcIik/KG51bGw9PXRoaXMuY3B1QmFja2VuZCYmKHRoaXMuY3B1QmFja2VuZD1MdC5maW5kQmFja2VuZChcImNwdVwiKSksdGhpcy5jcHVCYWNrZW5kKTpudWxsfSxvLnByb3RvdHlwZS5zaG91bGRFeGVjdXRlT25DUFU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO3JldHVybiB2b2lkIDA9PT1lJiYoZT0xMjgpLG51bGwhPXRoaXMuZ2V0Q1BVQmFja2VuZCgpJiZ0LmV2ZXJ5KChmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09bi50ZXhEYXRhLmdldCh0LmRhdGFJZCkudGV4dHVyZSYmdC5zaXplPGV9KSl9LG8ucHJvdG90eXBlLmdldEdQR1BVQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdwZ3B1fSxvLnByb3RvdHlwZS5jb21wbGV4PWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tYWtlT3V0cHV0KHQuc2hhcGUsXCJjb21wbGV4NjRcIik7cmV0dXJuIHRoaXMudGV4RGF0YS5nZXQobi5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzPXtyZWFsOkx0LmtlZXAodC5jbG9uZSgpKSxpbWFnOkx0LmtlZXAoZS5jbG9uZSgpKX0sbn0sby5wcm90b3R5cGUucmVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCkuY29tcGxleFRlbnNvcnMucmVhbC5jbG9uZSgpfSxvLnByb3RvdHlwZS5pbWFnPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKS5jb21wbGV4VGVuc29ycy5pbWFnLmNsb25lKCl9LG8ucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuc2xpY2UodCxlLG4pO2lmKDA9PT1rKG4pKXJldHVybiBGbihbXSxuLHQuZHR5cGUpO3ZhciByPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLmlzUGFja2VkLG89aW8odC5zaGFwZSxlLG4pO2lmKHJ8fCFvKXt2YXIgYT1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiKT9uZXcgZnMobik6bmV3IGxzKG4pLHM9YS5nZXRDdXN0b21TZXR1cEZ1bmMoZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0XSxudWxsLHMpfXJldHVybiB0aGlzLnVwbG9hZFRvR1BVKHQuZGF0YUlkKSx0aGlzLnNoYWxsb3dTbGljZSh0LGUsbil9LG8ucHJvdG90eXBlLnNoYWxsb3dTbGljZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCksbz10aGlzLm1ha2VPdXRwdXQobix0LmR0eXBlKSxhPXRoaXMudGV4RGF0YS5nZXQoby5kYXRhSWQpO09iamVjdC5hc3NpZ24oYSxyKSxhLnNoYXBlPW4sYS5kdHlwZT10LmR0eXBlO3ZhciBpPXNvKGUsdC5zdHJpZGVzKTtyLnNsaWNlJiYoaSs9ci5zbGljZS5mbGF0T2Zmc2V0KSxhLnNsaWNlPXtmbGF0T2Zmc2V0Omksb3JpZ0RhdGFJZDpyLnNsaWNlJiZyLnNsaWNlLm9yaWdEYXRhSWR8fHQuZGF0YUlkfTt2YXIgcz10aGlzLmRhdGFSZWZDb3VudC5nZXQoYS5zbGljZS5vcmlnRGF0YUlkKXx8MTtyZXR1cm4gdGhpcy5kYXRhUmVmQ291bnQuc2V0KGEuc2xpY2Uub3JpZ0RhdGFJZCxzKzEpLG99LG8ucHJvdG90eXBlLnN0cmlkZWRTbGljZT1mdW5jdGlvbih0LGUsbixyKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuc3RyaWRlZFNsaWNlKHQsZSxuLHIpO3ZhciBvPXJvKGUsbixyKTtpZihvLnNvbWUoKGZ1bmN0aW9uKHQpe3JldHVybiAwPT09dH0pKSlyZXR1cm4gRm4oW10sbyk7dmFyIGE9bmV3IGRzKGUscixvKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGEsW3RdKX0sby5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbih0LGUpe3ZhciBuPWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19BUlJBWV9PUEVSQVRJT05TXCIpP25ldyBpcyh0LnNoYXBlLGUpOm5ldyBhcyh0LnNoYXBlLGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdF0pfSxvLnByb3RvdHlwZS5jb25jYXQ9ZnVuY3Rpb24odCxlKXtpZihcImNvbXBsZXg2NFwiPT09dFswXS5kdHlwZSl7dmFyIG49dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBUbih0KX0pKSxyPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gTm4odCl9KSk7cmV0dXJuIERuKHRoaXMuY29uY2F0KG4sZSksdGhpcy5jb25jYXQocixlKSl9aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUodCkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5jb25jYXQodCxlKTtpZigxPT09dC5sZW5ndGgpcmV0dXJuIHRbMF07aWYodC5sZW5ndGg+aSgpLmdldE51bWJlcihcIldFQkdMX01BWF9URVhUVVJFU19JTl9TSEFERVJcIikpe3ZhciBvPU1hdGguZmxvb3IodC5sZW5ndGgvMiksYT10aGlzLmNvbmNhdCh0LnNsaWNlKDAsbyksZSkscz10aGlzLmNvbmNhdCh0LnNsaWNlKG8pLGUpO3JldHVybiB0aGlzLmNvbmNhdChbYSxzXSxlKX1pZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiKSYmdFswXS5yYW5rPjEpe3ZhciB1PW5ldyBHYSh0Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KSksZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bih1LHQpfXZhciBjPVNuKHQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pKSxlKSxsPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5hczJEKC0xLGsodC5zaGFwZS5zbGljZShlKSkpfSkpLGg9bmV3IHphKGwubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pKSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihoLGwpLnJlc2hhcGUoYyl9LG8ucHJvdG90eXBlLm5lZz1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubmVnKHQpO2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxUcyx0LmR0eXBlKTt2YXIgZT1uZXcgQ3ModC5zaGFwZSxUcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmJhdGNoTWF0TXVsPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW4/dC5zaGFwZVsyXTp0LnNoYXBlWzFdLGE9cj9lLnNoYXBlWzFdOmUuc2hhcGVbMl0saT1uP3Quc2hhcGVbMV06dC5zaGFwZVsyXSxzPXQuc2hhcGVbMF07aWYoKDE9PT1vfHwxPT09YSkmJmk+MWUzKXtuJiYodD10LnRyYW5zcG9zZShbMCwyLDFdKSksciYmKGU9ZS50cmFuc3Bvc2UoWzAsMiwxXSkpO3ZhciB1PTE9PT1hP3Q6dC5hczNEKHMsaSwxKSxjPTE9PT1hPzI6MSxsPTE9PT1hP2UuYXMzRChzLDEsaSk6ZTtyZXR1cm4gdGhpcy5tdWx0aXBseSh1LGwpLnN1bShjLCEwKX12YXIgaD1EdCh0LmR0eXBlLGUuZHR5cGUpLGY9bmV3IEhpKHQuc2hhcGUsW3MsbyxhXSxuLHIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZixbdCxlXSxoKX0sby5wcm90b3R5cGUuZnVzZWRCYXRjaE1hdE11bD1mdW5jdGlvbih0KXt2YXIgZT10LmEsbj10LmIscj10LnRyYW5zcG9zZUEsbz10LnRyYW5zcG9zZUIsYT10LmJpYXMsaT10LmFjdGl2YXRpb24scz10LnByZWx1QWN0aXZhdGlvbldlaWdodHMsdT1yP2Uuc2hhcGVbMl06ZS5zaGFwZVsxXSxjPW8/bi5zaGFwZVsxXTpuLnNoYXBlWzJdLGw9ZS5zaGFwZVswXSxoPUR0KGUuZHR5cGUsbi5kdHlwZSksZj1udWxsIT1hLGQ9bnVsbCE9cyxwPWk/UXMoaSwhMCk6bnVsbCx2PW5ldyBIaShlLnNoYXBlLFtsLHUsY10scixvLGYscCxkKSxtPVtlLG5dO3JldHVybiBhJiZtLnB1c2goYSkscyYmbS5wdXNoKHMpLHRoaXMuY29tcGlsZUFuZFJ1bih2LG0saCl9LG8ucHJvdG90eXBlLm11bHRpcGx5PWZ1bmN0aW9uKHQsZSl7aWYoXCJjb21wbGV4NjRcIj09PXQuZHR5cGUpe3ZhciBuPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLHI9dGhpcy50ZXhEYXRhLmdldChlLmRhdGFJZCksbz1uZXcgTmEoRGEsdC5zaGFwZSxlLnNoYXBlKSxhPW5ldyBOYShUYSx0LnNoYXBlLGUuc2hhcGUpLHM9W3RoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JJbmZvKHQsbi5jb21wbGV4VGVuc29ycy5yZWFsKSx0aGlzLm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySW5mbyh0LG4uY29tcGxleFRlbnNvcnMuaW1hZyksdGhpcy5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckluZm8oZSxyLmNvbXBsZXhUZW5zb3JzLnJlYWwpLHRoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JJbmZvKGUsci5jb21wbGV4VGVuc29ycy5pbWFnKV0sdT10aGlzLmNvbXBpbGVBbmRSdW4obyxzKSxjPXRoaXMuY29tcGlsZUFuZFJ1bihhLHMpLGw9dGhpcy5jb21wbGV4KHUsYyk7cmV0dXJuIHUuZGlzcG9zZSgpLGMuZGlzcG9zZSgpLGx9aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubXVsdGlwbHkodCxlKTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLE9hLHQuZHR5cGUpO3ZhciBoPW5ldyBCYShPYSx0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oaCxbdCxlXSx0LmR0eXBlKX0sby5wcm90b3R5cGUuYmF0Y2hOb3JtYWxpemF0aW9uPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2YXIgcz1bdCxlLG5dLHU9bnVsbDtudWxsIT1hJiYodT1hLnNoYXBlLHMucHVzaChhKSk7dmFyIGM9bnVsbDtpZihudWxsIT1vJiYoYz1vLnNoYXBlLHMucHVzaChvKSksaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX05PUk1BTElaQVRJT05cIikpe3ZhciBsPW5ldyBBYSh0LnNoYXBlLGUuc2hhcGUsbi5zaGFwZSx1LGMscik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihsLHMpfXZhciBoPW5ldyBTYSh0LnNoYXBlLGUuc2hhcGUsbi5zaGFwZSx1LGMscik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihoLHMpfSxvLnByb3RvdHlwZS5sb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjREPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dmFyIGE9aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX05PUk1BTElaQVRJT05cIik/bmV3IFZpKHQuc2hhcGUsZSxuLHIsbyk6bmV3IFdpKHQuc2hhcGUsZSxuLHIsbyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0XSl9LG8ucHJvdG90eXBlLkxSTkdyYWQ9ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dmFyIHM9bmV3IFVpKGUuc2hhcGUscixvLGEsaSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihzLFtlLG4sdF0pfSxvLnByb3RvdHlwZS50aWxlPWZ1bmN0aW9uKHQsZSl7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpe3ZhciBuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIG90KHQpfSkpO3JldHVybiB0YShkcih0LnNoYXBlLHQuZHR5cGUsbiksZSl9dmFyIHI9bmV3IGdzKHQuc2hhcGUsZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSl9LG8ucHJvdG90eXBlLnBhZD1mdW5jdGlvbih0LGUsbil7dmFyIHI9aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0FSUkFZX09QRVJBVElPTlNcIik/bmV3IFlpKHQuc2hhcGUsZSxuKTpuZXcgWGkodC5zaGFwZSxlLG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdF0pfSxvLnByb3RvdHlwZS50cmFuc3Bvc2U9ZnVuY3Rpb24odCxlKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQudHJhbnNwb3NlKHQsZSk7dmFyIG49aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0FSUkFZX09QRVJBVElPTlNcIik/bmV3IHhzKHQuc2hhcGUsZSk6bmV3IHlzKHQuc2hhcGUsZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSl9LG8ucHJvdG90eXBlLmdhdGhlcj1mdW5jdGlvbih0LGUsbil7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuZ2F0aGVyKHQsZSxuKTt2YXIgcj1uZXcgbWkodC5zaGFwZSxlLnNpemUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGVdKX0sby5wcm90b3R5cGUuYmF0Y2hUb1NwYWNlTkQ9ZnVuY3Rpb24odCxlLG4pe0ModC5yYW5rPD00LChmdW5jdGlvbigpe3JldHVyblwiYmF0Y2hUb1NwYWNlTkQgZm9yIHJhbmsgPiA0IHdpdGggYSBXZWJHTCBiYWNrZW5kIG5vdCBpbXBsZW1lbnRlZCB5ZXRcIn0pKTt2YXIgcj1lLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSkpLG89enIodC5zaGFwZSxlLHIpLGE9R3Ioby5sZW5ndGgsZS5sZW5ndGgpLGk9SHIodC5zaGFwZSxlLHIpLHM9cXIobixlLmxlbmd0aCksdT1LcihpLG4sZS5sZW5ndGgpO3JldHVybiB0LnJlc2hhcGUobykudHJhbnNwb3NlKGEpLnJlc2hhcGUoaSkuc2xpY2Uocyx1KX0sby5wcm90b3R5cGUuc3BhY2VUb0JhdGNoTkQ9ZnVuY3Rpb24odCxlLG4pe0ModC5yYW5rPD00LChmdW5jdGlvbigpe3JldHVyblwic3BhY2VUb0JhdGNoTkQgZm9yIHJhbmsgPiA0IHdpdGggYSBXZWJHTCBiYWNrZW5kIG5vdCBpbXBsZW1lbnRlZCB5ZXRcIn0pKTt2YXIgcj1lLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSkpLG89W1swLDBdXTtvLnB1c2guYXBwbHkobyxuKTtmb3IodmFyIGE9MStlLmxlbmd0aDthPHQuc2hhcGUubGVuZ3RoOysrYSlvLnB1c2goWzAsMF0pO3ZhciBpPXQucGFkKG8pLHM9enIoaS5zaGFwZSxlLHIsITEpLHU9R3Iocy5sZW5ndGgsZS5sZW5ndGgsITEpLGM9SHIoaS5zaGFwZSxlLHIsITEpO3JldHVybiBpLnJlc2hhcGUocykudHJhbnNwb3NlKHUpLnJlc2hhcGUoYyl9LG8ucHJvdG90eXBlLnJlZHVjZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dC5zaGFwZVswXSxvPXQuc2hhcGVbMV0sYT0kcihvKSxpPW5ldyBKaSh7d2luZG93U2l6ZTphLGluU2l6ZTpvLGJhdGNoU2l6ZTpyfSxlKSxzPXRoaXMuY29tcGlsZUFuZFJ1bihpLFt0XSxuKTtyZXR1cm4gMT09PXMuc2hhcGVbMV0/czp0aGlzLnJlZHVjZShzLGUsbil9LG8ucHJvdG90eXBlLmFyZ1JlZHVjZT1mdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49bnVsbCk7dmFyIHI9dC5zaGFwZVswXSxvPXQuc2hhcGVbMV07bnVsbCE9biYmKHI9bi5zaGFwZVswXSxvPW4uc2hhcGVbMV0pO3ZhciBhPSRyKG8pLGk9bmV3IGFhKHt3aW5kb3dTaXplOmEsaW5TaXplOm8sYmF0Y2hTaXplOnJ9LGUsbnVsbD09bikscz1bdF07bnVsbCE9biYmcy5wdXNoKG4pO3ZhciB1PXRoaXMuY29tcGlsZUFuZFJ1bihpLHMsXCJpbnQzMlwiKTtyZXR1cm4gMT09PXUuc2hhcGVbMV0/dTp0aGlzLmFyZ1JlZHVjZSh0LGUsdSl9LG8ucHJvdG90eXBlLmFyZ1JlZHVjZVBhY2tlZD1mdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49bnVsbCk7dmFyIHI9bnVsbCE9bj9uLnNoYXBlOnQuc2hhcGUsbz0kcihyW3IubGVuZ3RoLTFdKSxhPW5ldyBSYShyLG8sZSxudWxsPT1uKSxpPW51bGw9PW4/W3RdOlt0LG5dLHM9dGhpcy5jb21waWxlQW5kUnVuKGEsaSxcImludDMyXCIpO3JldHVybiBzLnJhbms9PT10LnJhbms/dGhpcy5hcmdSZWR1Y2VQYWNrZWQodCxlLHMpOnN9LG8ucHJvdG90eXBlLnN1bT1mdW5jdGlvbih0LGUpe0NuKFwic3VtXCIsZSx0LnJhbmspO3ZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89ayhuWzFdKSxhPXQuYXMyRCgtMSxvKSxpPVR0KHQuZHR5cGUpO3JldHVybiB0aGlzLnJlZHVjZShhLFwic3VtXCIsaSkucmVzaGFwZShyKX0sby5wcm90b3R5cGUucHJvZD1mdW5jdGlvbih0LGUpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5wcm9kKHQsZSk7dmFyIG49Ym4odC5zaGFwZSxlKSxyPW5bMF0sbz1rKG5bMV0pLGE9dC5hczJEKC0xLG8pLGk9VHQodC5kdHlwZSk7cmV0dXJuIHRoaXMucmVkdWNlKGEsXCJwcm9kXCIsaSkucmVzaGFwZShyKX0sby5wcm90b3R5cGUudW5zb3J0ZWRTZWdtZW50U3VtPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj0wLG89RW4oW3JdLHQucmFuayksYT10O251bGwhPW8mJihhPXQudHJhbnNwb3NlKG8pLHI9SW4oMSx0LnJhbmspWzBdKTt2YXIgaT1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPVtdLG89dC5sZW5ndGgsYT0wO2E8bzthKyspYSE9PWU/ci5wdXNoKHRbYV0pOnIucHVzaChuKTtyZXR1cm4gcn0oYS5zaGFwZSxyLG4pLHM9ayhbYS5zaGFwZVtyXV0pLHU9YS5hczJEKC0xLHMpLGM9VHQodC5kdHlwZSksbD10aGlzLnNlZ09wQ29tcHV0ZSh1LFwidW5zb3J0ZWRTZWdtZW50U3VtXCIsZSxjLG4pLnJlc2hhcGUoaSk7cmV0dXJuIG51bGwhPW8mJihsPWwudHJhbnNwb3NlKFJuKG8pKSksbH0sby5wcm90b3R5cGUuc2VnT3BDb21wdXRlPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dmFyIGE9dC5zaGFwZVswXSxpPXQuc2hhcGVbMV0scz1mdW5jdGlvbih0LGUpe3ZhciBuLHI9ITE7Zm9yKHQ8PVlyPyhuPXQscj0hMCk6bj1ZKHQsTWF0aC5mbG9vcihNYXRoLnNxcnQodCkpKTshcjspbj5lfHxuPT09dD9yPSEwOm49WSh0LG4rMSk7cmV0dXJuIG59KGksbyksdT1uZXcgdXMoe3dpbmRvd1NpemU6cyxpblNpemU6aSxiYXRjaFNpemU6YSxudW1TZWdtZW50czpvfSxlKSxjPXRoaXMuY29tcGlsZUFuZFJ1bih1LFt0LG5dLHIpO3JldHVybiBjLnNoYXBlWzFdPT09bz9jOihuPUtuKDAsbykudGlsZShbaS9zXSksdGhpcy5zZWdPcENvbXB1dGUoYyxlLG4scixvKSl9LG8ucHJvdG90eXBlLmFyZ01pbk1heFJlZHVjZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9W2VdO2lmKENuKFwiYXJnXCIrbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLHIsdC5yYW5rKSwhaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX1JFRFVDRVwiKXx8dC5yYW5rPD0yKXt2YXIgbz1ibih0LnNoYXBlLHIpLGE9b1swXSxzPWsob1sxXSksdT10LmFzMkQoLTEscyk7cmV0dXJuIHRoaXMuYXJnUmVkdWNlKHUsbikucmVzaGFwZShhKX1yZXR1cm4gdGhpcy5hcmdSZWR1Y2VQYWNrZWQodCxuKX0sby5wcm90b3R5cGUuYXJnTWluPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXJnTWluTWF4UmVkdWNlKHQsZSxcIm1pblwiKX0sby5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXJnTWluTWF4UmVkdWNlKHQsZSxcIm1heFwiKX0sby5wcm90b3R5cGUuY3Vtc3VtPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKGUhPT10LnJhbmstMSl0aHJvdyBuZXcgRXJyb3IoXCJXZWJHTCBjdW1zdW0gc2hhZGVyIGV4cGVjdHMgYW4gaW5uZXItbW9zdCBheGlzPVwiKyh0LnJhbmstMSkrXCIgYnV0IGdvdCBheGlzPVwiK2UpO3ZhciBvPW5ldyBuaSh0LnNoYXBlLG4scik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihvLFt0XSl9LG8ucHJvdG90eXBlLmVxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQoZXF1YWwoYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgQmEoXCJyZXR1cm4gZmxvYXQoYSA9PSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxcImJvb2xcIil9LG8ucHJvdG90eXBlLm5vdEVxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQobm90RXF1YWwoYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgQmEoXCJyZXR1cm4gZmxvYXQoYSAhPSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxcImJvb2xcIil9LG8ucHJvdG90eXBlLmxlc3M9ZnVuY3Rpb24odCxlKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5sZXNzKHQsZSk7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQobGVzc1RoYW4oYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgQmEoXCJyZXR1cm4gZmxvYXQoYSA8IGIpO1wiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLFwiYm9vbFwiKX0sby5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQobGVzc1RoYW5FcXVhbChhLCBiKSk7XFxuXCIsXCJib29sXCIpO3ZhciBuPW5ldyBCYShcInJldHVybiBmbG9hdChhIDw9IGIpO1wiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLFwiYm9vbFwiKX0sby5wcm90b3R5cGUuZ3JlYXRlcj1mdW5jdGlvbih0LGUpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0LGVdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmdyZWF0ZXIodCxlKTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICByZXR1cm4gdmVjNChncmVhdGVyVGhhbihhLCBiKSk7XFxuXCIsXCJib29sXCIpO3ZhciBuPW5ldyBCYShcInJldHVybiBmbG9hdChhID4gYik7XCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0sXCJib29sXCIpfSxvLnByb3RvdHlwZS5ncmVhdGVyRXF1YWw9ZnVuY3Rpb24odCxlKXtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICByZXR1cm4gdmVjNChncmVhdGVyVGhhbkVxdWFsKGEsIGIpKTtcXG5cIixcImJvb2xcIik7dmFyIG49bmV3IEJhKFwicmV0dXJuIGZsb2F0KGEgPj0gYik7XCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0sXCJib29sXCIpfSxvLnByb3RvdHlwZS5sb2dpY2FsTm90PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KCEoeCA+PSAxLjApKTtcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmxvZ2ljYWxBbmQ9ZnVuY3Rpb24odCxlKXtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICByZXR1cm4gdmVjNChcXG4gICAgdmVjNChncmVhdGVyVGhhbkVxdWFsKGEsIHZlYzQoMS4wKSkpICpcXG4gICAgdmVjNChncmVhdGVyVGhhbkVxdWFsKGIsIHZlYzQoMS4wKSkpKTtcXG5cIixcImJvb2xcIik7dmFyIG49bmV3IEJhKFwicmV0dXJuIGZsb2F0KGEgPj0gMS4wICYmIGIgPj0gMS4wKTtcIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxcImJvb2xcIil9LG8ucHJvdG90eXBlLmxvZ2ljYWxPcj1mdW5jdGlvbih0LGUpe2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIHJldHVybiBtaW4oXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChhLCB2ZWM0KDEuMCkpKSArXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChiLCB2ZWM0KDEuMCkpKSxcXG4gICAgdmVjNCgxLjApKTtcXG5cIixcImJvb2xcIik7dmFyIG49bmV3IEJhKFwicmV0dXJuIGZsb2F0KGEgPj0gMS4wIHx8IGIgPj0gMS4wKTtcIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxcImJvb2xcIil9LG8ucHJvdG90eXBlLnNlbGVjdD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IGNzKHQucmFuayxlLnNoYXBlLGUucmFuayk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGUsbl0sRHQoZS5kdHlwZSxuLmR0eXBlKSl9LG8ucHJvdG90eXBlLndoZXJlPWZ1bmN0aW9uKHQpe2RuKFwidGYud2hlcmUoKSBpbiB3ZWJnbCBsb2NrcyB0aGUgVUkgdGhyZWFkLiBDYWxsIHRmLndoZXJlQXN5bmMoKSBpbnN0ZWFkXCIpO3ZhciBlPXQuZGF0YVN5bmMoKTtyZXR1cm4gbmEodC5zaGFwZSxlKX0sby5wcm90b3R5cGUudG9waz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIGVhKHQuZGF0YVN5bmMoKSx0LnNoYXBlLHQuZHR5cGUsZSl9LG8ucHJvdG90eXBlLm1pbj1mdW5jdGlvbih0LGUpe0NuKFwibWluXCIsZSx0LnJhbmspO3ZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89ayhuWzFdKSxhPXQuYXMyRCgtMSxvKTtyZXR1cm4gdGhpcy5yZWR1Y2UoYSxcIm1pblwiLGEuZHR5cGUpLnJlc2hhcGUocil9LG8ucHJvdG90eXBlLm1pbmltdW09ZnVuY3Rpb24odCxlKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5taW5pbXVtKHQsZSk7dmFyIG49aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBMYShcIlxcbiAgdmVjNCByZXN1bHQgPSB2ZWM0KG1pbihhLCBiKSk7XFxuICB2ZWM0IGlzTmFOID0gbWluKHZlYzQoaXNuYW4oYSkpICsgdmVjNChpc25hbihiKSksIHZlYzQoMS4wKSk7XFxuICBcXG4gIHJlc3VsdC5yID0gaXNOYU4uciA+IDAuID8gTkFOIDogcmVzdWx0LnI7XFxuICByZXN1bHQuZyA9IGlzTmFOLmcgPiAwLiA/IE5BTiA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc05hTi5iID4gMC4gPyBOQU4gOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA+IDAuID8gTkFOIDogcmVzdWx0LmE7XFxuXFxuICByZXR1cm4gcmVzdWx0O1xcblwiLHQuc2hhcGUsZS5zaGFwZSk6bmV3IEJhKFwiXFxuICBpZiAoaXNuYW4oYSkpIHJldHVybiBhO1xcbiAgaWYgKGlzbmFuKGIpKSByZXR1cm4gYjtcXG5cXG4gIHJldHVybiBtaW4oYSwgYik7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0pfSxvLnByb3RvdHlwZS5tb2Q9ZnVuY3Rpb24odCxlKXt2YXIgbj1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIik/bmV3IExhKFwiXFxuICB2ZWM0IHJlc3VsdCA9IG1vZChhLCBiKTtcXG4gIHZlYzQgaXNOYU4gPSB2ZWM0KGVxdWFsKGIsIHZlYzQoMC4wKSkpO1xcbiAgXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPiAwLiA/IE5BTiA6IHJlc3VsdC5yO1xcbiAgcmVzdWx0LmcgPSBpc05hTi5nID4gMC4gPyBOQU4gOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA+IDAuID8gTkFOIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPiAwLiA/IE5BTiA6IHJlc3VsdC5hO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBCYShcImlmIChiID09IDAuMCkgcmV0dXJuIE5BTjtcXG4gIHJldHVybiBtb2QoYSwgYik7XCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0pfSxvLnByb3RvdHlwZS5tYXg9ZnVuY3Rpb24odCxlKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubWF4KHQsZSk7Q24oXCJtYXhcIixlLHQucmFuayk7dmFyIG49Ym4odC5zaGFwZSxlKSxyPW5bMF0sbz1rKG5bMV0pLGE9dC5hczJEKC0xLG8pO3JldHVybiB0aGlzLnJlZHVjZShhLFwibWF4XCIsYS5kdHlwZSkucmVzaGFwZShyKX0sby5wcm90b3R5cGUubWF4aW11bT1mdW5jdGlvbih0LGUpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0LGVdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLm1heGltdW0odCxlKTt2YXIgbj1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIik/bmV3IExhKFwiXFxuICB2ZWM0IHJlc3VsdCA9IHZlYzQobWF4KGEsIGIpKTtcXG4gIHZlYzQgaXNOYU4gPSBtaW4odmVjNChpc25hbihhKSkgKyB2ZWM0KGlzbmFuKGIpKSwgdmVjNCgxLjApKTtcXG4gIFxcbiAgcmVzdWx0LnIgPSBpc05hTi5yID4gMC4gPyBOQU4gOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA+IDAuID8gTkFOIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzTmFOLmIgPiAwLiA/IE5BTiA6IHJlc3VsdC5iO1xcbiAgcmVzdWx0LmEgPSBpc05hTi5hID4gMC4gPyBOQU4gOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTpuZXcgQmEoXCJcXG4gIGlmIChpc25hbihhKSkgcmV0dXJuIGE7XFxuICBpZiAoaXNuYW4oYikpIHJldHVybiBiO1xcblxcbiAgcmV0dXJuIG1heChhLCBiKTtcXG5cIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSl9LG8ucHJvdG90eXBlLmFsbD1mdW5jdGlvbih0LGUpe0NuKFwiYWxsXCIsZSx0LnJhbmspO3ZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89ayhuWzFdKSxhPXQuYXMyRCgtMSxvKTtyZXR1cm4gdGhpcy5yZWR1Y2UoYSxcImFsbFwiLGEuZHR5cGUpLnJlc2hhcGUocil9LG8ucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe0NuKFwiYW55XCIsZSx0LnJhbmspO3ZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89ayhuWzFdKSxhPXQuYXMyRCgtMSxvKTtyZXR1cm4gdGhpcy5yZWR1Y2UoYSxcImFueVwiLGEuZHR5cGUpLnJlc2hhcGUocil9LG8ucHJvdG90eXBlLnJlYWxEaXZpZGU9ZnVuY3Rpb24odCxlKXtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpe3JldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgLy8gdmVjNCBvbmUgPSB2ZWM0KGVxdWFsKGEsIGIpKTtcXG4gIC8vIHJldHVybiBvbmUgKyAodmVjNCgxLjApIC0gb25lKSAqIGEgLyBiO1xcbiAgdmVjNCByZXN1bHQgPSBhIC8gYjtcXG4gIGlmKGEueCA9PSBiLngpIHtcXG4gICAgcmVzdWx0LnggPSAxLjtcXG4gIH1cXG4gIGlmKGEueSA9PSBiLnkpIHtcXG4gICAgcmVzdWx0LnkgPSAxLjtcXG4gIH1cXG4gIGlmKGEueiA9PSBiLnopIHtcXG4gICAgcmVzdWx0LnogPSAxLjtcXG4gIH1cXG4gIGlmKGEudyA9PSBiLncpIHtcXG4gICAgcmVzdWx0LncgPSAxLjtcXG4gIH1cXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsXCJmbG9hdDMyXCIsITApfXZhciBuPW5ldyBCYShcIlxcbmlmIChhID09IGIpIHtcXG4gIHJldHVybiAxLjA7XFxufTtcXG5yZXR1cm4gYSAvIGI7XCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0sXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5mbG9vckRpdj1mdW5jdGlvbih0LGUpe2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIGl2ZWM0IGlhID0gcm91bmQoYSk7XFxuICBpdmVjNCBpYiA9IHJvdW5kKGIpO1xcbiAgYnZlYzQgY29uZCA9IG5vdEVxdWFsKGliLCBpdmVjNCgwKSk7XFxuICBpdmVjNCByZXN1bHQgPSBpdmVjNCgwKTtcXG4gIHZlYzQgcyA9IHNpZ24oYSkgKiBzaWduKGIpO1xcblxcbiAgLy8gV2luZG93cyAoRDNEKSB3YW50cyBndWFyYW50ZWVkIG5vbi16ZXJvIGludCBkaXZpc2lvbiBhdCBjb21waWxlLXRpbWUuXFxuICBpZiAoY29uZFswXSkge1xcbiAgICByZXN1bHRbMF0gPSBpZGl2KGlhWzBdLCBpYlswXSwgc1swXSk7XFxuICB9XFxuICBpZiAoY29uZFsxXSkge1xcbiAgICByZXN1bHRbMV0gPSBpZGl2KGlhWzFdLCBpYlsxXSwgc1sxXSk7XFxuICB9XFxuICBpZiAoY29uZFsyXSkge1xcbiAgICByZXN1bHRbMl0gPSBpZGl2KGlhWzJdLCBpYlsyXSwgc1syXSk7XFxuICB9XFxuICBpZiAoY29uZFszXSkge1xcbiAgICByZXN1bHRbM10gPSBpZGl2KGlhWzNdLCBpYlszXSwgc1szXSk7XFxuICB9XFxuICByZXR1cm4gdmVjNChyZXN1bHQpO1xcblwiLFwiaW50MzJcIik7dmFyIG49bmV3IEJhKFwiXFxuICBmbG9hdCBzID0gc2lnbihhKSAqIHNpZ24oYik7XFxuICBpbnQgaWEgPSByb3VuZChhKTtcXG4gIGludCBpYiA9IHJvdW5kKGIpO1xcbiAgaWYgKGliICE9IDApIHtcXG4gICAgLy8gV2luZG93cyAoRDNEKSB3YW50cyBndWFyYW50ZWVkIG5vbi16ZXJvIGludCBkaXZpc2lvbiBhdCBjb21waWxlLXRpbWUuXFxuICAgIHJldHVybiBmbG9hdChpZGl2KGlhLCBpYiwgcykpO1xcbiAgfSBlbHNlIHtcXG4gICAgcmV0dXJuIE5BTjtcXG4gIH1cXG5cIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxcImludDMyXCIpfSxvLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCxlKXtpZihcImNvbXBsZXg2NFwiPT09dC5kdHlwZSYmXCJjb21wbGV4NjRcIj09PWUuZHR5cGUpcmV0dXJuIHRoaXMuY29tcGxleFNlcGFyYWJsZUJpbmFyeU9wKHQsZSxGYSk7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuYWRkKHQsZSk7dmFyIG49RHQodC5kdHlwZSxlLmR0eXBlKTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLEZhLG4pO3ZhciByPW5ldyBCYShGYSx0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSxuKX0sby5wcm90b3R5cGUucGFja2VkVW5hcnlPcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IFhzKHQuc2hhcGUsZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSxuKX0sby5wcm90b3R5cGUucGFja2VkQmluYXJ5T3A9ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1vJiYobz0hMSk7dmFyIGE9bmV3IExhKG4sdC5zaGFwZSxlLnNoYXBlLG8pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oYSxbdCxlXSxyKX0sby5wcm90b3R5cGUuY29tcGxleFNlcGFyYWJsZUJpbmFyeU9wPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLG89dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCksYT10aGlzLnRleERhdGEuZ2V0KGUuZGF0YUlkKSxpPVtbby5jb21wbGV4VGVuc29ycy5yZWFsLGEuY29tcGxleFRlbnNvcnMucmVhbF0sW28uY29tcGxleFRlbnNvcnMuaW1hZyxhLmNvbXBsZXhUZW5zb3JzLmltYWddXS5tYXAoKGZ1bmN0aW9uKG8pe3ZhciBhPW9bMF0saT1vWzFdLHM9ci5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckluZm8odCxhKSx1PXIubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JJbmZvKGUsaSksYz1uZXcgQmEobix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiByLmNvbXBpbGVBbmRSdW4oYyxbcyx1XSxEdChhLmR0eXBlLGkuZHR5cGUpKX0pKSxzPWlbMF0sdT1pWzFdLGM9dGhpcy5jb21wbGV4KHMsdSk7cmV0dXJuIHMuZGlzcG9zZSgpLHUuZGlzcG9zZSgpLGN9LG8ucHJvdG90eXBlLm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySW5mbz1mdW5jdGlvbih0LGUpe3JldHVybntkYXRhSWQ6ZS5kYXRhSWQsZHR5cGU6ZS5kdHlwZSxzaGFwZTp0LnNoYXBlfX0sby5wcm90b3R5cGUuYWRkTj1mdW5jdGlvbih0KXtpZigxPT09dC5sZW5ndGgpcmV0dXJuIHRbMF07aWYodC5sZW5ndGg+aSgpLmdldChcIldFQkdMX01BWF9URVhUVVJFU19JTl9TSEFERVJcIikpe3ZhciBlPU1hdGguZmxvb3IodC5sZW5ndGgvMiksbj10aGlzLmFkZE4odC5zbGljZSgwLGUpKSxyPXRoaXMuYWRkTih0LnNsaWNlKGUpKTtyZXR1cm4gdGhpcy5hZGROKFtuLHJdKX12YXIgbz10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuZHR5cGV9KSkucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiBEdCh0LGUpfSkpLGE9dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNoYXBlfSkpLHM9aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpP25ldyBvYSh0WzBdLnNoYXBlLGEpOm5ldyByYSh0WzBdLnNoYXBlLGEpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocyx0LG8pfSxvLnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe2lmKFwiY29tcGxleDY0XCI9PT10LmR0eXBlJiZcImNvbXBsZXg2NFwiPT09ZS5kdHlwZSlyZXR1cm4gdGhpcy5jb21wbGV4U2VwYXJhYmxlQmluYXJ5T3AodCxlLF9hKTtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5zdWJ0cmFjdCh0LGUpO3ZhciBuPUR0KHQuZHR5cGUsZS5kdHlwZSk7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxfYSx0LmR0eXBlKTt2YXIgcj1uZXcgQmEoX2EsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0sbil9LG8ucHJvdG90eXBlLnBvdz1mdW5jdGlvbih0LGUpe3ZhciBuPWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKT9uZXcgTGEoXCJcXG4gIC8vIGlzTW9kUm91bmQxIGhhcyAxIGZvciBjb21wb25lbnRzIHdpdGggcm91bmQobW9kKGIsIDIuMCkpID09IDEsIDAgb3RoZXJ3aXNlLlxcbiAgdmVjNCBpc01vZFJvdW5kMSA9IHZlYzQoZXF1YWwocm91bmQobW9kKGIsIDIuMCkpLCBpdmVjNCgxKSkpO1xcbiAgdmVjNCBtdWx0aXBsaWVyID0gc2lnbihhKSAqIGlzTW9kUm91bmQxICsgKHZlYzQoMS4wKSAtIGlzTW9kUm91bmQxKTtcXG4gIHZlYzQgcmVzdWx0ID0gbXVsdGlwbGllciAqIHBvdyhhYnMoYSksIGIpO1xcblxcbiAgLy8gRW5zdXJlIHRoYXQgYV4wID0gMSwgaW5jbHVkaW5nIDBeMCA9IDEgYXMgdGhpcyBjb3JyZXNwb25kIHRvIFRGIGFuZCBKU1xcbiAgYnZlYzQgaXNFeHBaZXJvID0gZXF1YWwoYiwgdmVjNCgwLjApKTtcXG4gIHJlc3VsdC5yID0gaXNFeHBaZXJvLnIgPyAxLjAgOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNFeHBaZXJvLmcgPyAxLjAgOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNFeHBaZXJvLmIgPyAxLjAgOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNFeHBaZXJvLmEgPyAxLjAgOiByZXN1bHQuYTtcXG5cXG4gIHZlYzQgaXNOYU4gPSB2ZWM0KGxlc3NUaGFuKGEsIHZlYzQoMC4wKSkpICogdmVjNChsZXNzVGhhbihmbG9vcihiKSwgYikpO1xcbiAgXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPiAwLiA/IE5BTiA6IHJlc3VsdC5yO1xcbiAgcmVzdWx0LmcgPSBpc05hTi5nID4gMC4gPyBOQU4gOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA+IDAuID8gTkFOIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPiAwLiA/IE5BTiA6IHJlc3VsdC5hO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBCYShcIlxcbmlmKGEgPCAwLjAgJiYgZmxvb3IoYikgPCBiKXtcXG4gIHJldHVybiBOQU47XFxufVxcbmlmIChiID09IDAuMCkge1xcbiAgcmV0dXJuIDEuMDtcXG59XFxucmV0dXJuIChyb3VuZChtb2QoYiwgMi4wKSkgIT0gMSkgP1xcbiAgICBwb3coYWJzKGEpLCBiKSA6IHNpZ24oYSkgKiBwb3coYWJzKGEpLCBiKTtcXG5cIix0LnNoYXBlLGUuc2hhcGUpLHI9RHQodC5kdHlwZSxlLmR0eXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0scil9LG8ucHJvdG90eXBlLmNlaWw9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmNlaWwodCk7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkVW5hcnlPcCh0LE5zLHQuZHR5cGUpO3ZhciBlPW5ldyBDcyh0LnNoYXBlLE5zKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuZmxvb3I9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmZsb29yKHQpO2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxGcyx0LmR0eXBlKTt2YXIgZT1uZXcgQ3ModC5zaGFwZSxGcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24odCl7dmFyIGU9bmV3IENzKHQuc2hhcGUsXCJcXG4gIGlmIChpc25hbih4KSkgeyByZXR1cm4gMC4wOyB9XFxuICByZXR1cm4gc2lnbih4KTtcXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmlzTmFOPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KGlzbmFuKHgpKTtcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSxcImJvb2xcIil9LG8ucHJvdG90eXBlLmlzSW5mPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KGlzaW5mKHgpKTtcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSxcImJvb2xcIil9LG8ucHJvdG90eXBlLmlzRmluaXRlPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KCFpc25hbih4KSAmJiAhaXNpbmYoeCkpO1wiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdLFwiYm9vbFwiKX0sby5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IENzKHQuc2hhcGUsXCJcXG4gIC8vIE9wZW5HTCBFUyBkb2VzIG5vdCBzdXBwb3J0IHJvdW5kIGZ1bmN0aW9uLlxcbiAgLy8gVGhlIGFsZ29yaXRobSBpcyBiYXNlZCBvbiBiYW5rZXIncyByb3VuZGluZy5cXG4gIGZsb2F0IGJhc2UgPSBmbG9vcih4KTtcXG4gIGlmICgoeCAtIGJhc2UpIDwgMC41KSB7XFxuICAgIHJldHVybiBmbG9vcih4KTtcXG4gIH0gZWxzZSBpZiAoKHggLSBiYXNlKSA+IDAuNSkge1xcbiAgICByZXR1cm4gY2VpbCh4KTtcXG4gIH0gZWxzZSB7XFxuICAgIGlmIChtb2QoYmFzZSwgMi4wKSA9PSAwLjApIHtcXG4gICAgICByZXR1cm4gYmFzZTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICByZXR1cm4gYmFzZSArIDEuMDtcXG4gICAgfVxcbiAgfVxcblwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuZXhwPWZ1bmN0aW9uKHQpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5leHAodCk7aWYoaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkVW5hcnlPcCh0LF9zLHQuZHR5cGUpO3ZhciBlPW5ldyBDcyh0LnNoYXBlLF9zKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuZXhwbTE9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmV4cG0xKHQpO2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxPcyx0LmR0eXBlKTt2YXIgZT1uZXcgQ3ModC5zaGFwZSxPcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnNvZnRtYXg9ZnVuY3Rpb24odCxlKXt2YXIgbj1PKFtlXSx0LnNoYXBlKSxyPXRoaXMubWF4KHQsbiksbz13bihyLnNoYXBlLG4pLGE9dGhpcy5zdWJ0cmFjdCh0LHIucmVzaGFwZShvKSksaT10aGlzLmV4cChhKSxzPXRoaXMuc3VtKGksbikucmVzaGFwZShvKTtyZXR1cm4gdGhpcy5yZWFsRGl2aWRlKGkscyl9LG8ucHJvdG90eXBlLmxvZz1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubG9nKHQpO2lmKGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxcIlxcbiAgdmVjNCByZXN1bHQgPSBsb2coeCk7XFxuICB2ZWM0IGlzTmFOID0gdmVjNChsZXNzVGhhbih4LCB2ZWM0KDAuMCkpKTtcXG4gIHJlc3VsdC5yID0gaXNOYU4uciA9PSAxLjAgPyBOQU4gOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA9PSAxLjAgPyBOQU4gOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA9PSAxLjAgPyBOQU4gOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA9PSAxLjAgPyBOQU4gOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsdC5kdHlwZSk7dmFyIGU9bmV3IENzKHQuc2hhcGUsXCJpZiAoeCA8IDAuMCkgcmV0dXJuIE5BTjtcXG4gIHJldHVybiBsb2coeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5sb2cxcD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcInJldHVybiBsb2coMS4wICsgeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5zcXJ0PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIHNxcnQoeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5yc3FydD1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQucnNxcnQodCk7dmFyIGU9bmV3IENzKHQuc2hhcGUsXCJyZXR1cm4gaW52ZXJzZXNxcnQoeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5yZWNpcHJvY2FsPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwicmV0dXJuIDEuMCAvIHg7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5yZWx1PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKT9uZXcgWHModC5zaGFwZSxxcyk6bmV3IENzKHQuc2hhcGUsa3MpLHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnJlbHU2PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKT9uZXcgWHModC5zaGFwZSxLcyk6bmV3IENzKHQuc2hhcGUsU3MpLHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnByZWx1PWZ1bmN0aW9uKHQsZSl7dmFyIG49aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBMYShQYSx0LnNoYXBlLGUuc2hhcGUpOm5ldyBCYShNYSx0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSl9LG8ucHJvdG90eXBlLmVsdT1mdW5jdGlvbih0KXtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfVU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRVbmFyeU9wKHQsanMsdC5kdHlwZSk7dmFyIGU9bmV3IENzKHQuc2hhcGUsQXMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5lbHVEZXI9ZnVuY3Rpb24odCxlKXt2YXIgbj1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIik/bmV3IExhKFwiXFxuICB2ZWM0IGJHVEVaZXJvID0gdmVjNChncmVhdGVyVGhhbkVxdWFsKGIsIHZlYzQoMC4pKSk7XFxuICByZXR1cm4gKGJHVEVaZXJvICogYSkgKyAoKHZlYzQoMS4wKSAtIGJHVEVaZXJvKSAqIChhICogKGIgKyB2ZWM0KDEuMCkpKSk7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTpuZXcgQmEoXCJyZXR1cm4gKGIgPj0gMS4wKSA/IGEgOiBhICogKGIgKyAxLjApO1wiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdKX0sby5wcm90b3R5cGUuc2VsdT1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxEcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmludD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcInJldHVybiBmbG9hdChpbnQoeCkpO1wiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdLFwiaW50MzJcIil9LG8ucHJvdG90eXBlLmNsaXA9ZnVuY3Rpb24odCxlLG4pe3ZhciByLG89KHI9aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0NMSVBcIik/bmV3IFVhKHQuc2hhcGUpOm5ldyBXYSh0LnNoYXBlKSkuZ2V0Q3VzdG9tU2V0dXBGdW5jKGUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSxudWxsLG8pfSxvLnByb3RvdHlwZS5hYnM9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmFicyh0KTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfVU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRVbmFyeU9wKHQsSXMsdC5kdHlwZSk7dmFyIGU9bmV3IENzKHQuc2hhcGUsSXMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5jb21wbGV4QWJzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLG49bmV3IFZhKHQuc2hhcGUpLHI9W3RoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JJbmZvKHQsZS5jb21wbGV4VGVuc29ycy5yZWFsKSx0aGlzLm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySW5mbyh0LGUuY29tcGxleFRlbnNvcnMuaW1hZyldO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixyKX0sby5wcm90b3R5cGUuc2lnbW9pZD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcInJldHVybiAxLjAgLyAoMS4wICsgZXhwKC0xLjAgKiB4KSk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5zb2Z0cGx1cz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcIlxcbiAgZmxvYXQgZXBzaWxvbiA9IDEuMTkyMDkyODk1NTA3ODEyNWUtNztcXG4gIGZsb2F0IHRocmVzaG9sZCA9IGxvZyhlcHNpbG9uKSArIDIuMDtcXG5cXG4gIGJvb2wgdG9vX2xhcmdlID0geCA+IC10aHJlc2hvbGQ7XFxuICBib29sIHRvb19zbWFsbCA9IHggPCB0aHJlc2hvbGQ7XFxuXFxuICBmbG9hdCByZXN1bHQ7XFxuICBmbG9hdCBleHBfeCA9IGV4cCh4KTtcXG5cXG4gIGlmICh0b29fbGFyZ2Upe1xcbiAgICByZXN1bHQgPSB4O1xcbiAgfVxcbiAgZWxzZSBpZiAodG9vX3NtYWxsKXtcXG4gICAgcmVzdWx0ID0gZXhwX3g7XFxuICB9XFxuICBlbHNle1xcbiAgICByZXN1bHQgPSBsb2coZXhwX3ggKyAxLjApO1xcbiAgfVxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnNpbj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxNcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmNvcz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxCcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLnRhbj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcInJldHVybiB0YW4oeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5hc2luPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFBzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuYWNvcz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxMcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmF0YW49ZnVuY3Rpb24odCl7dmFyIGU9bmV3IENzKHQuc2hhcGUsV3MpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5hdGFuMj1mdW5jdGlvbih0LGUpe3ZhciBuPWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKT9uZXcgTGEoXCJcXG4gIHZlYzQgcmVzdWx0ID0gYXRhbihhLCBiKTtcXG4gIHZlYzQgaXNOYU4gPSBtaW4odmVjNChpc25hbihhKSkgKyB2ZWM0KGlzbmFuKGIpKSwgdmVjNCgxLjApKTtcXG4gIFxcbiAgcmVzdWx0LnIgPSBpc05hTi5yID4gMC4gPyBOQU4gOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA+IDAuID8gTkFOIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzTmFOLmIgPiAwLiA/IE5BTiA6IHJlc3VsdC5iO1xcbiAgcmVzdWx0LmEgPSBpc05hTi5hID4gMC4gPyBOQU4gOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTpuZXcgQmEoXCJcXG4gIGlmIChpc25hbihhKSkgcmV0dXJuIGE7XFxuICBpZiAoaXNuYW4oYikpIHJldHVybiBiO1xcblxcbiAgcmV0dXJuIGF0YW4oYSwgYik7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0pfSxvLnByb3RvdHlwZS5zaW5oPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwiXFxuICBmbG9hdCBlMnggPSBleHAoeCk7XFxuICByZXR1cm4gKGUyeCAtIDEuMCAvIGUyeCkgLyAyLjA7XFxuXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5jb3NoPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLFwiXFxuICBmbG9hdCBlMnggPSBleHAoLXgpO1xcbiAgcmV0dXJuIChlMnggKyAxLjAgLyBlMngpIC8gMi4wO1xcblwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUudGFuaD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxcIlxcbiAgZmxvYXQgZTJ4ID0gZXhwKC0yLjAgKiBhYnMoeCkpO1xcbiAgcmV0dXJuIHNpZ24oeCkgKiAoMS4wIC0gZTJ4KSAvICgxLjAgKyBlMngpO1xcblwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuYXNpbmg9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IENzKHQuc2hhcGUsVXMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSxvLnByb3RvdHlwZS5hY29zaD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgQ3ModC5zaGFwZSxWcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLmF0YW5oPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLHpzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuZXJmPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBDcyh0LnNoYXBlLCdcXG4gIC8vIEVycm9yIGZ1bmN0aW9uIGlzIGNhbGN1bGF0ZWQgYXBwcm94aW1hdGVseSB3aXRoIGVsZW1lbnRhcnkgZnVuY3Rpb24uXFxuICAvLyBTZWUgXCJIYW5kYm9vayBvZiBNYXRoZW1hdGljYWwgRnVuY3Rpb25zIHdpdGggRm9ybXVsYXMsXFxuICAvLyBHcmFwaHMsIGFuZCBNYXRoZW1hdGljYWwgVGFibGVzXCIsIEFicmFtb3dpdHogYW5kIFN0ZWd1bi5cXG4gIGZsb2F0IHAgPSAwLjMyNzU5MTE7XFxuICBmbG9hdCBhMSA9IDAuMjU0ODI5NTkyO1xcbiAgZmxvYXQgYTIgPSAtMC4yODQ0OTY3MzY7XFxuICBmbG9hdCBhMyA9IDEuNDIxNDEzNzQxO1xcbiAgZmxvYXQgYTQgPSAtMS40NTMxNTIwMjc7XFxuICBmbG9hdCBhNSA9IDEuMDYxNDA1NDI5O1xcblxcbiAgZmxvYXQgc2lnbiA9IHNpZ24oeCk7XFxuICB4ID0gYWJzKHgpO1xcbiAgZmxvYXQgdCA9IDEuMCAvICgxLjAgKyBwICogeCk7XFxuICByZXR1cm4gc2lnbiAqICgxLjAgLSAoKCgoKGE1KnQgKyBhNCkqdCkgKyBhMykqdCArIGEyKSp0ICsgYTEpKnQqZXhwKC14KngpKTtcXG4nKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sby5wcm90b3R5cGUuc3RlcD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBDcyh0LnNoYXBlLGZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0wKSxFcytcIlxcbiAgICByZXR1cm4geCA+IDAuMCA/IDEuMCA6IGZsb2F0KFwiK3QrXCIpO1xcbiAgXCJ9KGUpKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3RdKX0sby5wcm90b3R5cGUuY29udjJkQnlNYXRNdWw9ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBzPXQuc2hhcGUsdT10aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKSxjPW4uaW5DaGFubmVscyxsPXNbMF0qc1sxXSpzWzJdLGg9bi5vdXRDaGFubmVscyxmPVwiY2hhbm5lbHNMYXN0XCI9PT1uLmRhdGFGb3JtYXQsZD0oMT09PWx8fDE9PT1oKSYmYz4xZTMscD1zWzJdJTIhPTAmJiEhdS5pc1BhY2tlZDtpZihkfHwhaSgpLmdldEJvb2woXCJXRUJHTF9MQVpJTFlfVU5QQUNLXCIpfHwhaSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpfHwhcCl7dmFyIHY9Zj9zWzBdKnNbMV0qc1syXTpzWzBdKnNbMl0qc1szXSxtPXRoaXMucmVzaGFwZSh0LFsxLHYsbi5pbkNoYW5uZWxzXSksZz10aGlzLnJlc2hhcGUoZSxbMSxuLmluQ2hhbm5lbHMsbi5vdXRDaGFubmVsc10pO3JldHVybiB0aGlzLnJlc2hhcGUodGhpcy5mdXNlZEJhdGNoTWF0TXVsKHthOm0sYjpnLHRyYW5zcG9zZUE6ITEsdHJhbnNwb3NlQjohMSxiaWFzOnIsYWN0aXZhdGlvbjpvLHByZWx1QWN0aXZhdGlvbldlaWdodHM6YX0pLG4ub3V0U2hhcGUpfXZhciB5PWY/c1swXSpzWzFdKihzWzJdKzEpOnNbMF0qc1syXSooc1szXSsxKSx4PXtkYXRhSWQ6dC5kYXRhSWQsc2hhcGU6WzEseSxuLmluQ2hhbm5lbHNdLGR0eXBlOnQuZHR5cGV9LGI9dS5zaGFwZTt1LnNoYXBlPXUuc2hhcGUuc2xpY2UoKSx1LnNoYXBlW3Uuc2hhcGUubGVuZ3RoLTJdKyssQyhfZSh1LnNoYXBlLHguc2hhcGUpLChmdW5jdGlvbigpe3JldHVyblwicGFja2VkIHJlc2hhcGUgXCIrdS5zaGFwZStcIiB0byBcIit4LnNoYXBlK1wiIGlzbid0IGZyZWVcIn0pKTt2YXIgdz10aGlzLnJlc2hhcGUoZSxbMSxuLmluQ2hhbm5lbHMsbi5vdXRDaGFubmVsc10pLEU9dGhpcy5mdXNlZEJhdGNoTWF0TXVsKHthOngsYjp3LHRyYW5zcG9zZUE6ITEsdHJhbnNwb3NlQjohMSxiaWFzOnIsYWN0aXZhdGlvbjpvLHByZWx1QWN0aXZhdGlvbldlaWdodHM6YX0pLFI9dGhpcy50ZXhEYXRhLmdldChFLmRhdGFJZCk7cmV0dXJuIEMoUi5pc1BhY2tlZCwoZnVuY3Rpb24oKXtyZXR1cm5cImJhdGNoTWF0TXVsIHJlc3VsdCBpcyBleHBlY3RlZCB0byBiZSBwYWNrZWRcIn0pKSx1LnNoYXBlPWIsUi5zaGFwZT1uLm91dFNoYXBlLEx0Lm1ha2VUZW5zb3JGcm9tRGF0YUlkKEUuZGF0YUlkLG4ub3V0U2hhcGUsRS5kdHlwZSl9LG8ucHJvdG90eXBlLmNvbnYyZFdpdGhJbTJSb3c9ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPW4uZmlsdGVyV2lkdGgscz1uLmZpbHRlckhlaWdodCx1PW4uaW5DaGFubmVscyxjPW4ub3V0V2lkdGgsbD1uLm91dEhlaWdodCxoPVwiY2hhbm5lbHNMYXN0XCI9PT1uLmRhdGFGb3JtYXQsZj1pKnMqdSxkPWwqYyxwPVtmLGRdLHY9dC5zcXVlZXplKFswXSksbT1lLnJlc2hhcGUoWzEsZiwtMV0pLGc9bmV3IExpKHAsdi5zaGFwZSxuKSx5PXRoaXMuY29tcGlsZUFuZFJ1bihnLFt2XSkucmVzaGFwZShbMSxwWzBdLHBbMV1dKSx4PW51bGwhPXIsYj1udWxsIT1hLHc9bz9RcyhvLCEwKTpudWxsLEM9bmV3IEhpKHkuc2hhcGUsWzEsZCxuLm91dENoYW5uZWxzXSwhMCwhMSx4LHcsYiksRT1beSxtXTtyJiZFLnB1c2gociksYiYmRS5wdXNoKGEpO3ZhciBSPXRoaXMuY29tcGlsZUFuZFJ1bihDLEUpO3JldHVybiBoP1IucmVzaGFwZShbMSxsLGMsbi5vdXRDaGFubmVsc10pOlIucmVzaGFwZShbMSxuLm91dENoYW5uZWxzLGwsY10pfSxvLnByb3RvdHlwZS5mdXNlZENvbnYyZD1mdW5jdGlvbih0KXt2YXIgZT10LmlucHV0LG49dC5maWx0ZXIscj10LmNvbnZJbmZvLG89dC5iaWFzLGE9dC5hY3RpdmF0aW9uLHM9dC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzO2lmKDE9PT1yLmZpbHRlckhlaWdodCYmMT09PXIuZmlsdGVyV2lkdGgmJjE9PT1yLmRpbGF0aW9uSGVpZ2h0JiYxPT09ci5kaWxhdGlvbldpZHRoJiYxPT09ci5zdHJpZGVIZWlnaHQmJjE9PT1yLnN0cmlkZVdpZHRoJiYoXCJTQU1FXCI9PT1yLnBhZEluZm8udHlwZXx8XCJWQUxJRFwiPT09ci5wYWRJbmZvLnR5cGUpKXJldHVybiB0aGlzLmNvbnYyZEJ5TWF0TXVsKGUsbixyLG8sYSxzKTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX0NPTlZfSU0yQ09MXCIpJiYxPT09ZS5zaGFwZVswXSlyZXR1cm4gdGhpcy5jb252MmRXaXRoSW0yUm93KGUsbixyLG8sYSxzKTt2YXIgdT1udWxsIT1vLGM9bnVsbCE9cyxsPWE/UXMoYSwhMSk6bnVsbCxoPW5ldyBRYShyLHUsbCxjKSxmPVtlLG5dO3JldHVybiBvJiZmLnB1c2gobykscyYmZi5wdXNoKHMpLHRoaXMuY29tcGlsZUFuZFJ1bihoLGYpfSxvLnByb3RvdHlwZS5jb252MmQ9ZnVuY3Rpb24odCxlLG4pe2lmKDE9PT1uLmZpbHRlckhlaWdodCYmMT09PW4uZmlsdGVyV2lkdGgmJjE9PT1uLmRpbGF0aW9uSGVpZ2h0JiYxPT09bi5kaWxhdGlvbldpZHRoJiYxPT09bi5zdHJpZGVIZWlnaHQmJjE9PT1uLnN0cmlkZVdpZHRoJiYoXCJTQU1FXCI9PT1uLnBhZEluZm8udHlwZXx8XCJWQUxJRFwiPT09bi5wYWRJbmZvLnR5cGUpKXJldHVybiB0aGlzLmNvbnYyZEJ5TWF0TXVsKHQsZSxuKTtpZihpKCkuZ2V0Qm9vbChcIldFQkdMX0NPTlZfSU0yQ09MXCIpJiYxPT09dC5zaGFwZVswXSlyZXR1cm4gdGhpcy5jb252MmRXaXRoSW0yUm93KHQsZSxuKTt2YXIgcj1uZXcgUWEobik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGVdKX0sby5wcm90b3R5cGUuY29udjJkRGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBLYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSxvLnByb3RvdHlwZS5jb252MmREZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBxYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSxvLnByb3RvdHlwZS5mdXNlZERlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0KXt2YXIgZSxuPXQuaW5wdXQscj10LmZpbHRlcixvPXQuY29udkluZm8sYT10LmJpYXMscz10LmFjdGl2YXRpb24sdT10LnByZWx1QWN0aXZhdGlvbldlaWdodHMsYz1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfREVQVEhXSVNFQ09OVlwiKSYmby5zdHJpZGVXaWR0aDw9MiYmby5vdXRDaGFubmVscy9vLmluQ2hhbm5lbHM9PTEsbD1zP1FzKHMsYyk6bnVsbCxoPVtuLHJdLGY9bnVsbCE9YSxkPW51bGwhPXU7cmV0dXJuIGYmJmgucHVzaChhKSxkJiZoLnB1c2godSksYz8oZT1uZXcgdGkobyxmLGwsZCksdGhpcy5jb21waWxlQW5kUnVuKGUsaCkpOihlPW5ldyBaYShvLGYsbCxkKSx0aGlzLmNvbXBpbGVBbmRSdW4oZSxoKSl9LG8ucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0LGUsbil7dmFyIHI7cmV0dXJuIGkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS19ERVBUSFdJU0VDT05WXCIpJiZuLnN0cmlkZVdpZHRoPD0yJiZuLm91dENoYW5uZWxzL24uaW5DaGFubmVscz09MT8ocj1uZXcgdGkobiksdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pKToocj1uZXcgWmEobiksdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pKX0sby5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJERGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyAkYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSxvLnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkREZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBZYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSxvLnByb3RvdHlwZS5jb252M2Q9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBKYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSxvLnByb3RvdHlwZS5jb252M2REZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IFhhKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSl9LG8ucHJvdG90eXBlLmNvbnYzZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IGphKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSl9LG8ucHJvdG90eXBlLm1heFBvb2w9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgJGkoZSxcIm1heFwiLCExKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3RdKX0sby5wcm90b3R5cGUuYXZnUG9vbD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyAkaShlLFwiYXZnXCIsITEpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdF0sXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5tYXhQb29sQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89bmV3ICRpKHIsXCJtYXhcIiwhMCksYT10aGlzLmNvbXBpbGVBbmRSdW4obyxbZV0pLGk9bmV3IHppKHIpLHM9dGhpcy5jb21waWxlQW5kUnVuKGksW3QsYV0sZS5kdHlwZSk7cmV0dXJuIGEuZGlzcG9zZSgpLHN9LG8ucHJvdG90eXBlLmF2Z1Bvb2xCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IElhKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdF0sZS5kdHlwZSl9LG8ucHJvdG90eXBlLmNhc3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gUG8odCxlLHRoaXMpfSxvLnByb3RvdHlwZS51bnN0YWNrPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuc2hhcGVbZV0scj1uZXcgQXJyYXkodC5yYW5rLTEpLG89MCxhPTA7YTx0LnJhbms7YSsrKWEhPT1lJiYocltvKytdPXQuc2hhcGVbYV0pO3ZhciBpPW5ldyBBcnJheSh0LnJhbmspLmZpbGwoMCkscz10LnNoYXBlLnNsaWNlKCk7c1tlXT0xO3ZhciB1PW5ldyBBcnJheShuKTtmb3IoYT0wO2E8dS5sZW5ndGg7YSsrKWlbZV09YSx1W2FdPXRoaXMuc2xpY2UodCxpLHMpLnJlc2hhcGUocik7cmV0dXJuIHV9LG8ucHJvdG90eXBlLmF2Z1Bvb2wzZD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBRaShlLFwiYXZnXCIsITEpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdF0sXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hdmdQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IGthKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdF0sZS5kdHlwZSl9LG8ucHJvdG90eXBlLm1heFBvb2wzZD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBRaShlLFwibWF4XCIsITEpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdF0sXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5tYXhQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz1uZXcgUWkocixcIm1heFwiLCEwKSxhPXRoaXMuY29tcGlsZUFuZFJ1bihvLFtlXSksaT1uZXcgR2kocikscz10aGlzLmNvbXBpbGVBbmRSdW4oaSxbdCxhXSxlLmR0eXBlKTtyZXR1cm4gYS5kaXNwb3NlKCksc30sby5wcm90b3R5cGUucmVzaGFwZT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpO2lmKG4uaXNQYWNrZWQmJiFfZSh0LnNoYXBlLGUpJiYobnVsbD09PW4udGV4dHVyZXx8IV9lKG4uc2hhcGUsZSkpKXt2YXIgcj10aGlzLnBhY2tlZFJlc2hhcGUodCxlKTtyZXR1cm4gTHQubWFrZVRlbnNvckZyb21EYXRhSWQoci5kYXRhSWQsci5zaGFwZSxyLmR0eXBlKX1yZXR1cm4gTG8odCxlKX0sby5wcm90b3R5cGUucmVzaXplQmlsaW5lYXI9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89aSgpLmdldEJvb2woXCJXRUJHTF9QQUNLX0lNQUdFX09QRVJBVElPTlNcIik/bmV3IG5zKHQuc2hhcGUsZSxuLHIpOm5ldyBlcyh0LnNoYXBlLGUsbixyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG8sW3RdLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUucmVzaXplQmlsaW5lYXJCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IHRzKHQsZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3RdKX0sby5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW5ldyBvcyh0LnNoYXBlLGUsbixyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG8sW3RdKX0sby5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBycyh0LGUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSl9LG8ucHJvdG90eXBlLm11bHRpbm9taWFsPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPWU/dDpnbyh0KSxhPW8uc2hhcGVbMF0saT1vLnNoYXBlWzFdLHM9bmV3IHFpKGEsaSxuKSx1PXMuZ2V0Q3VzdG9tU2V0dXBGdW5jKHIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocyxbb10sXCJpbnQzMlwiLHUpfSxvLnByb3RvdHlwZS5vbmVIb3Q9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89bmV3IEtpKHQuc2l6ZSxlLG4scik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihvLFt0XSl9LG8ucHJvdG90eXBlLmRpYWc9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IHNpKHQuc2l6ZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LG8ucHJvdG90eXBlLm5vbk1heFN1cHByZXNzaW9uPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIGRuKFwidGYubm9uTWF4U3VwcHJlc3Npb24oKSBpbiB3ZWJnbCBsb2NrcyB0aGUgVUkgdGhyZWFkLiBDYWxsIHRmLm5vbk1heFN1cHByZXNzaW9uQXN5bmMoKSBpbnN0ZWFkXCIpLGpvKHQuZGF0YVN5bmMoKSxlLmRhdGFTeW5jKCksbixyLG8pfSxvLnByb3RvdHlwZS5jcm9wQW5kUmVzaXplPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2YXIgaT1uZXcgZWkodC5zaGFwZSxlLnNoYXBlLHIsbyxhKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGksW3QsZSxuXSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmRlcHRoVG9TcGFjZT1mdW5jdGlvbih0LGUsbil7QyhlPjEsKGZ1bmN0aW9uKCl7cmV0dXJuXCJibG9ja1NpemUgc2hvdWxkIGJlID4gMSBmb3IgZGVwdGhUb1NwYWNlLCBidXQgd2FzOiBcIitlfSkpO3ZhciByPXQuc2hhcGVbMF0sbz1cIk5IV0NcIj09PW4/dC5zaGFwZVsxXTp0LnNoYXBlWzJdLGE9XCJOSFdDXCI9PT1uP3Quc2hhcGVbMl06dC5zaGFwZVszXSxpPVwiTkhXQ1wiPT09bj90LnNoYXBlWzNdOnQuc2hhcGVbMV0scz1vKmUsdT1hKmUsYz1pLyhlKmUpLGw9bmV3IGlpKFwiTkhXQ1wiPT09bj9bcixzLHUsY106W3IsYyxzLHVdLGUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihsLFt0XSl9LG8ucHJvdG90eXBlLnNwbGl0PWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gWm8odCxlLG4pfSxvLnByb3RvdHlwZS5zY2F0dGVyTkQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPVpyKDAsdCxuKSxvPXIuc2xpY2VSYW5rLGE9ci5udW1VcGRhdGVzLGk9ci5zbGljZVNpemUscz1yLnN0cmlkZXMsdT1yLm91dHB1dFNpemUsYz1bdS9pLGldLGw9dC5yZXNoYXBlKFthLG9dKSxoPWUucmVzaGFwZShbYSxpXSk7aWYoMD09PXUpcmV0dXJuIExvKEZuKFtdKSxuKTt2YXIgZj1PbigwKSxkPW5ldyBzcyhhLG8sbC5yYW5rLGgucmFuayxzLGMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZCxbaCxsLGZdKS5yZXNoYXBlKG4pfSxvLnByb3RvdHlwZS5zcGFyc2VUb0RlbnNlPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPVpyKDAsdCxuKSxhPW8uc2xpY2VSYW5rLGk9by5udW1VcGRhdGVzLHM9by5zdHJpZGVzLHU9by5vdXRwdXRTaXplLGM9bmV3IHNzKGksYSx0LnJhbmssZS5yYW5rLHMsW3UsMV0sITEpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oYyxbZSx0LHJdKS5yZXNoYXBlKG4pfSxvLnByb3RvdHlwZS5mZnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZmZ0SW1wbCh0LCExKX0sby5wcm90b3R5cGUuaWZmdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5mZnRJbXBsKHQsITApfSxvLnByb3RvdHlwZS5mZnRJbXBsPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCkscj1uZXcgcGkoZmksdC5zaGFwZSxlKSxvPW5ldyBwaShkaSx0LnNoYXBlLGUpLGE9W3RoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JJbmZvKHQsbi5jb21wbGV4VGVuc29ycy5yZWFsKSx0aGlzLm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySW5mbyh0LG4uY29tcGxleFRlbnNvcnMuaW1hZyldLGk9dGhpcy5jb21waWxlQW5kUnVuKHIsYSkscz10aGlzLmNvbXBpbGVBbmRSdW4obyxhKSx1PXRoaXMuY29tcGxleChpLHMpLmFzMkQodC5zaGFwZVswXSx0LnNoYXBlWzFdKTtyZXR1cm4gaS5kaXNwb3NlKCkscy5kaXNwb3NlKCksdX0sby5wcm90b3R5cGUuZ2F0aGVyTkQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnNoYXBlLHI9bltuLmxlbmd0aC0xXSxvPWpyKHQsZSksYT1vWzBdLGk9b1sxXSxzPW9bMl0sdT1vWzNdLGM9ZS5yZXNoYXBlKFtpLHJdKSxsPXQucmVzaGFwZShbdC5zaXplL3Msc10pLGg9bmV3IGdpKHIsdSxbaSxzXSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihoLFtsLGNdKS5yZXNoYXBlKGEpfSxvLnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKHQsZSxuKXtpZihcInN0cmluZ1wiPT09KG49bnx8aihlKSkpe3ZhciByPVAobixrKHQpKTtyZXR1cm4gci5maWxsKGUpLEx0Lm1ha2VUZW5zb3Iocix0LG4sdGhpcyl9dmFyIG89bmV3IHZpKHQsZSksYT1vLmdldEN1c3RvbVNldHVwRnVuYyhlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG8sW10sbixhKX0sby5wcm90b3R5cGUub25lc0xpa2U9ZnVuY3Rpb24odCl7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwib25lc0xpa2UgaXMgbm90IHN1cHBvcnRlZCB1bmRlciBzdHJpbmcgZHR5cGVcIik7cmV0dXJuIHRoaXMuZmlsbCh0LnNoYXBlLDEsdC5kdHlwZSl9LG8ucHJvdG90eXBlLnplcm9zTGlrZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5maWxsKHQuc2hhcGUsXCJzdHJpbmdcIj09PXQuZHR5cGU/XCJcIjowLHQuZHR5cGUpfSxvLnByb3RvdHlwZS5saW5zcGFjZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIFdvKHQsZSxuKX0sby5wcm90b3R5cGUubWFrZVRlbnNvckluZm89ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLndyaXRlKG51bGwsdCxlKTtyZXR1cm4gdGhpcy50ZXhEYXRhLmdldChuKS51c2FnZT1udWxsLHtkYXRhSWQ6bixzaGFwZTp0LGR0eXBlOmV9fSxvLnByb3RvdHlwZS5tYWtlT3V0cHV0PWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tYWtlVGVuc29ySW5mbyh0LGUpLmRhdGFJZDtyZXR1cm4gTHQubWFrZVRlbnNvckZyb21EYXRhSWQobix0LGUsdGhpcyl9LG8ucHJvdG90eXBlLnVucGFja1RlbnNvcj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWXModC5zaGFwZSk7cmV0dXJuIHRoaXMucnVuV2ViR0xQcm9ncmFtKGUsW3RdLHQuZHR5cGUpfSxvLnByb3RvdHlwZS5wYWNrVGVuc29yPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBqaSh0LnNoYXBlKTtyZXR1cm4gdGhpcy5ydW5XZWJHTFByb2dyYW0oZSxbdF0sdC5kdHlwZSxudWxsLCEwKX0sby5wcm90b3R5cGUucGFja2VkUmVzaGFwZT1mdW5jdGlvbih0LGUpe3ZhciBuPVtBZSh0LnNoYXBlKV0uY29uY2F0KERlKHQuc2hhcGUpKSxyPXtkdHlwZTp0LmR0eXBlLHNoYXBlOm4sZGF0YUlkOnQuZGF0YUlkfSxvPVtBZShlKV0uY29uY2F0KERlKGUpKSxhPW5ldyBaaShvLG4pLGk9dGhpcy5ydW5XZWJHTFByb2dyYW0oYSxbcl0sdC5kdHlwZSxudWxsLCEwKTtyZXR1cm57ZGF0YUlkOmkuZGF0YUlkLHNoYXBlOmUsZHR5cGU6aS5kdHlwZX19LG8ucHJvdG90eXBlLmRlY29kZT1mdW5jdGlvbih0KXt2YXIgZSxuPXRoaXMudGV4RGF0YS5nZXQodCkscj1uLmlzUGFja2VkLG89bi5zaGFwZSxhPW4uZHR5cGUsaT1UZShvKTtlPXI/bmV3IGFpKGkpOm5ldyBvaShpKTtyZXR1cm57ZHR5cGU6YSxzaGFwZTpvLGRhdGFJZDp0aGlzLnJ1bldlYkdMUHJvZ3JhbShlLFt7c2hhcGU6aSxkdHlwZTphLGRhdGFJZDp0fV0sYSxudWxsLCEwKS5kYXRhSWR9fSxvLnByb3RvdHlwZS5ydW5XZWJHTFByb2dyYW09ZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10aGlzO3ZvaWQgMD09PW8mJihvPSExKTt2YXIgcz10aGlzLm1ha2VUZW5zb3JJbmZvKHQub3V0cHV0U2hhcGUsbiksdT10aGlzLnRleERhdGEuZ2V0KHMuZGF0YUlkKTtpZih0LnBhY2tlZE91dHB1dCYmKHUuaXNQYWNrZWQ9ITApLHQub3V0UGFja2luZ1NjaGVtZT09PVZ0LkRFTlNFKXt2YXIgYz1ZdCh0Lm91dHB1dFNoYXBlKTt1LnRleFNoYXBlPWMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gMip0fSkpfWlmKG51bGwhPXQub3V0VGV4VXNhZ2UmJih1LnVzYWdlPXQub3V0VGV4VXNhZ2UpLDA9PT1rKHMuc2hhcGUpKXJldHVybiB1LnZhbHVlcz1CKHMuZHR5cGUsMCksczt2YXIgbD1bXSxoPWUubWFwKChmdW5jdGlvbihlKXtpZihcImNvbXBsZXg2NFwiPT09ZS5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJHUEdQVVByb2dyYW0gZG9lcyBub3Qgc3VwcG9ydCBjb21wbGV4NjQgaW5wdXQuIEZvciBjb21wbGV4NjQgZHR5cGVzLCBwbGVhc2Ugc2VwYXJhdGUgdGhlIHByb2dyYW0gaW50byByZWFsIGFuZCBpbWFnaW5hcnkgcGFydHMuXCIpO3ZhciBuPWEudGV4RGF0YS5nZXQoZS5kYXRhSWQpO2lmKG51bGw9PW4udGV4dHVyZSl7aWYoIXQucGFja2VkSW5wdXRzJiZrKGUuc2hhcGUpPD1pKCkuZ2V0TnVtYmVyKFwiV0VCR0xfU0laRV9VUExPQURfVU5JRk9STVwiKSlyZXR1cm57c2hhcGU6ZS5zaGFwZSx0ZXhEYXRhOm51bGwsaXNVbmlmb3JtOiEwLHVuaWZvcm1WYWx1ZXM6bi52YWx1ZXN9O3QucGFja2VkSW5wdXRzJiYobi5pc1BhY2tlZD0hMCxuLnNoYXBlPWUuc2hhcGUpfWVsc2UgaWYoISFuLmlzUGFja2VkIT0hIXQucGFja2VkSW5wdXRzKWU9bi5pc1BhY2tlZD9hLnVucGFja1RlbnNvcihlKTphLnBhY2tUZW5zb3IoZSksbC5wdXNoKGUpLG49YS50ZXhEYXRhLmdldChlLmRhdGFJZCk7ZWxzZSBpZihuLmlzUGFja2VkJiYhX2Uobi5zaGFwZSxlLnNoYXBlKSl7dmFyIHI9ZSxvPWUuc2hhcGU7ZS5zaGFwZT1uLnNoYXBlLGU9YS5wYWNrZWRSZXNoYXBlKGUsbyksbC5wdXNoKGUpLG49YS50ZXhEYXRhLmdldChlLmRhdGFJZCksci5zaGFwZT1vfXJldHVybiBhLnVwbG9hZFRvR1BVKGUuZGF0YUlkKSx7c2hhcGU6ZS5zaGFwZSx0ZXhEYXRhOm4saXNVbmlmb3JtOiExfX0pKTt0aGlzLnVwbG9hZFRvR1BVKHMuZGF0YUlkKTt2YXIgZixkPXtzaGFwZTpzLnNoYXBlLHRleERhdGE6dSxpc1VuaWZvcm06ITF9LHA9ZnVuY3Rpb24odCxlLG4pe3ZhciByPVwiXCI7ZS5jb25jYXQobikuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGU9bnVsbCE9dC50ZXhEYXRhJiZudWxsIT10LnRleERhdGEuc2xpY2UmJnQudGV4RGF0YS5zbGljZS5mbGF0T2Zmc2V0PjAsbj10LmlzVW5pZm9ybT9cInVuaWZvcm1cIjp0LnRleERhdGEudGV4U2hhcGU7cis9dC5zaGFwZStcIl9cIituK1wiX1wiK2V9KSk7dmFyIG89dC51c2VyQ29kZSxhPXQuY29uc3RydWN0b3IubmFtZTtyZXR1cm4gYSs9XCJfXCIrcitcIl9cIitvfSh0LGgsZCksdj10aGlzLmdldEFuZFNhdmVCaW5hcnkocCwoZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dmFyIG89ZS51c2VyQ29kZSxhPW4ubWFwKChmdW5jdGlvbih0LG4pe3ZhciByPXtsb2dpY2FsU2hhcGU6dC5zaGFwZSx0ZXhTaGFwZTp0LmlzVW5pZm9ybT9udWxsOnQudGV4RGF0YS50ZXhTaGFwZSxpc1VuaWZvcm06dC5pc1VuaWZvcm0saXNQYWNrZWQ6IXQuaXNVbmlmb3JtJiZ0LnRleERhdGEuaXNQYWNrZWQsZmxhdE9mZnNldDpudWxsfTtyZXR1cm4gbnVsbCE9dC50ZXhEYXRhJiZudWxsIT10LnRleERhdGEuc2xpY2UmJnQudGV4RGF0YS5zbGljZS5mbGF0T2Zmc2V0PjAmJihyLmZsYXRPZmZzZXQ9dC50ZXhEYXRhLnNsaWNlLmZsYXRPZmZzZXQpLHtuYW1lOmUudmFyaWFibGVOYW1lc1tuXSxzaGFwZUluZm86cn19KSkscz1hLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGVJbmZvfSkpLHU9e2xvZ2ljYWxTaGFwZTpyLnNoYXBlLHRleFNoYXBlOnIudGV4RGF0YS50ZXhTaGFwZSxpc1VuaWZvcm06ITEsaXNQYWNrZWQ6ci50ZXhEYXRhLmlzUGFja2VkLGZsYXRPZmZzZXQ6bnVsbH0sYz1mYShhLHUsbyxlLnBhY2tlZElucHV0cyksbD10LmNyZWF0ZVByb2dyYW0oYyksaD1udWxsLGY9dC5nZXRVbmlmb3JtTG9jYXRpb24obCxcIk5BTlwiLCExKTsxPT09aSgpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikmJihoPXQuZ2V0VW5pZm9ybUxvY2F0aW9uKGwsXCJJTkZJTklUWVwiLCExKSk7Zm9yKHZhciBkPXt9LHA9MDtwPGUudmFyaWFibGVOYW1lcy5sZW5ndGg7cCsrKXt2YXIgdj1lLnZhcmlhYmxlTmFtZXNbcF07ZFt2XT10LmdldFVuaWZvcm1Mb2NhdGlvbihsLHYsITEpLGRbXCJvZmZzZXRcIit2XT10LmdldFVuaWZvcm1Mb2NhdGlvbihsLFwib2Zmc2V0XCIrdiwhMSl9cmV0dXJue3Byb2dyYW06ZSxzb3VyY2U6Yyx3ZWJHTFByb2dyYW06bCx1bmlmb3JtTG9jYXRpb25zOmQsaW5TaGFwZUluZm9zOnMsb3V0U2hhcGVJbmZvOnUsaW5mTG9jOmgsbmFuTG9jOmZ9fShhLmdwZ3B1LHQsaCxkKX0pKSxtPW51bGwhPXRoaXMuYWN0aXZlVGltZXJzO2lmKG0mJihmPXRoaXMuc3RhcnRUaW1lcigpKSxmdW5jdGlvbih0LGUsbixyLG8pe1BpKGUuaW5TaGFwZUluZm9zLG4pLFBpKFtlLm91dFNoYXBlSW5mb10sW3JdKTt2YXIgYT1yLnRleERhdGEudGV4dHVyZSxzPXIudGV4RGF0YS50ZXhTaGFwZTtyLnRleERhdGEuaXNQYWNrZWQ/dC5zZXRPdXRwdXRQYWNrZWRNYXRyaXhUZXh0dXJlKGEsc1swXSxzWzFdKTp0LnNldE91dHB1dE1hdHJpeFRleHR1cmUoYSxzWzBdLHNbMV0pLHQuc2V0UHJvZ3JhbShlLndlYkdMUHJvZ3JhbSksMT09PWkoKS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpJiZudWxsIT09ZS5pbmZMb2MmJnQuZ2wudW5pZm9ybTFmKGUuaW5mTG9jLDEvMCksbnVsbCE9PWUubmFuTG9jJiZ0LmdsLnVuaWZvcm0xZihlLm5hbkxvYyxOYU4pLG4uZm9yRWFjaCgoZnVuY3Rpb24obixyKXt2YXIgbz1lLnByb2dyYW0udmFyaWFibGVOYW1lc1tyXSxhPWUudW5pZm9ybUxvY2F0aW9uc1tvXSxpPWUudW5pZm9ybUxvY2F0aW9uc1tcIm9mZnNldFwiK29dO2lmKG51bGwhPWEpaWYobi5pc1VuaWZvcm0paWYoayhuLnNoYXBlKTwyKXQuZ2wudW5pZm9ybTFmKGEsbi51bmlmb3JtVmFsdWVzWzBdKTtlbHNle3ZhciBzPW4udW5pZm9ybVZhbHVlcztzIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHwocz1uZXcgRmxvYXQzMkFycmF5KHMpKSx0LmdsLnVuaWZvcm0xZnYoYSxzKX1lbHNlIG51bGwhPW4udGV4RGF0YS5zbGljZSYmbnVsbCE9aSYmdC5nbC51bmlmb3JtMWkoaSxuLnRleERhdGEuc2xpY2UuZmxhdE9mZnNldCksdC5zZXRJbnB1dE1hdHJpeFRleHR1cmUobi50ZXhEYXRhLnRleHR1cmUsYSxyKX0pKSxudWxsIT1vJiZvKHQsZS53ZWJHTFByb2dyYW0pLHQuZXhlY3V0ZVByb2dyYW0oKX0odGhpcy5ncGdwdSx2LGgsZCxyKSxsLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBhLmRpc3Bvc2VEYXRhKHQuZGF0YUlkKX0pKSxtJiYoZj10aGlzLmVuZFRpbWVyKGYpLHRoaXMuYWN0aXZlVGltZXJzLnB1c2goe25hbWU6dC5jb25zdHJ1Y3Rvci5uYW1lLHF1ZXJ5OnRoaXMuZ2V0UXVlcnlUaW1lKGYpfSkpLCFpKCkuZ2V0Qm9vbChcIldFQkdMX0xBWklMWV9VTlBBQ0tcIikmJnUuaXNQYWNrZWQmJiExPT09byl7dmFyIGc9dGhpcy51bnBhY2tUZW5zb3Iocyk7cmV0dXJuIHRoaXMuZGlzcG9zZURhdGEocy5kYXRhSWQpLGd9cmV0dXJuIHN9LG8ucHJvdG90eXBlLmNvbXBpbGVBbmRSdW49ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1vJiYobz0hMSksbj1ufHxlWzBdLmR0eXBlO3ZhciBhPXRoaXMucnVuV2ViR0xQcm9ncmFtKHQsZSxuLHIsbyk7cmV0dXJuIEx0Lm1ha2VUZW5zb3JGcm9tRGF0YUlkKGEuZGF0YUlkLGEuc2hhcGUsYS5kdHlwZSl9LG8ucHJvdG90eXBlLmdldEFuZFNhdmVCaW5hcnk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdCBpbiB0aGlzLmJpbmFyeUNhY2hlfHwodGhpcy5iaW5hcnlDYWNoZVt0XT1lKCkpLHRoaXMuYmluYXJ5Q2FjaGVbdF19LG8ucHJvdG90eXBlLmdldFRleHR1cmVNYW5hZ2VyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGV4dHVyZU1hbmFnZXJ9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCF0aGlzLmRpc3Bvc2VkKXtpZighaSgpLmdldEJvb2woXCJJU19URVNUXCIpKU9iamVjdC5rZXlzKHRoaXMuYmluYXJ5Q2FjaGUpLmZvckVhY2goKGZ1bmN0aW9uKGUpe3QuZ3BncHUuZGVsZXRlUHJvZ3JhbSh0LmJpbmFyeUNhY2hlW2VdLndlYkdMUHJvZ3JhbSksZGVsZXRlIHQuYmluYXJ5Q2FjaGVbZV19KSk7dGhpcy50ZXh0dXJlTWFuYWdlci5kaXNwb3NlKCksbnVsbCE9dGhpcy5jYW52YXMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCYmdGhpcy5jYW52YXMgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudD90aGlzLmNhbnZhcy5yZW1vdmUoKTp0aGlzLmNhbnZhcz1udWxsLHRoaXMuZ3BncHVDcmVhdGVkTG9jYWxseSYmKHRoaXMuZ3BncHUucHJvZ3JhbT1udWxsLHRoaXMuZ3BncHUuZGlzcG9zZSgpKSx0aGlzLmRpc3Bvc2VkPSEwfX0sby5wcm90b3R5cGUuZmxvYXRQcmVjaXNpb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybiBudWxsPT10aGlzLmZsb2F0UHJlY2lzaW9uVmFsdWUmJih0aGlzLmZsb2F0UHJlY2lzaW9uVmFsdWU9WmUoKGZ1bmN0aW9uKCl7aWYoIWkoKS5nZXQoXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9FTkFCTEVEXCIpKXt2YXIgZT1pKCkuZ2V0Qm9vbChcIkRFQlVHXCIpO2koKS5zZXQoXCJERUJVR1wiLCExKTt2YXIgbj10LmFicyhPbigxZS04KSkuZGF0YVN5bmMoKVswXTtpZihpKCkuc2V0KFwiREVCVUdcIixlKSxuPjApcmV0dXJuIDMyfXJldHVybiAxNn0pKSksdGhpcy5mbG9hdFByZWNpc2lvblZhbHVlfSxvLnByb3RvdHlwZS5lcHNpbG9uPWZ1bmN0aW9uKCl7cmV0dXJuIDMyPT09dGhpcy5mbG9hdFByZWNpc2lvbigpPzFlLTc6MWUtNH0sby5wcm90b3R5cGUudXBsb2FkVG9HUFU9ZnVuY3Rpb24odCl7dmFyIGUsbj10aGlzLnRleERhdGEuZ2V0KHQpLHI9bi5zaGFwZSxvPW4uZHR5cGUsYT1uLnZhbHVlcyxpPW4udGV4dHVyZSxzPW4udXNhZ2UsdT1uLmlzUGFja2VkO2lmKG51bGw9PWkpe3ZhciBjLGw9bnVsbCE9dGhpcy5hY3RpdmVUaW1lcnM7bCYmKGM9ZXQoKSk7dmFyIGg9bi50ZXhTaGFwZTtpZihudWxsPT1oJiYoaD1OZShyLHUpLG4udGV4U2hhcGU9aCksbnVsbCE9YSl7dmFyIGY9VGUociksZD12b2lkIDAscD1oWzFdLHY9aFswXSxtPWEgaW5zdGFuY2VvZiBVaW50OEFycmF5O3U/KHA9KGU9JHQoaFswXSxoWzFdKSlbMF0sdj1lWzFdLGQ9bmV3IGhpKGYsW3YscF0sbSkpOmQ9bmV3IGxpKGYsW3YscF0sbSk7dmFyIGc9dGhpcy5tYWtlVGVuc29ySW5mbyhbdixwXSxvKTt0aGlzLnRleERhdGEuZ2V0KGcuZGF0YUlkKS51c2FnZT1tP3p0LlBJWEVMUzp6dC5VUExPQUQsdGhpcy5ncGdwdS51cGxvYWREZW5zZU1hdHJpeFRvVGV4dHVyZSh0aGlzLmdldFRleHR1cmUoZy5kYXRhSWQpLHAsdixhKTt2YXIgeT10aGlzLnJ1bldlYkdMUHJvZ3JhbShkLFtnXSxvLG51bGwsITApLHg9dGhpcy50ZXhEYXRhLmdldCh5LmRhdGFJZCk7bi50ZXh0dXJlPXgudGV4dHVyZSxuLnRleFNoYXBlPXgudGV4U2hhcGUsbi5pc1BhY2tlZD14LmlzUGFja2VkLG4udXNhZ2U9eC51c2FnZSx0aGlzLmRpc3Bvc2VEYXRhKGcuZGF0YUlkKSx0aGlzLnRleERhdGEuZGVsZXRlKHkuZGF0YUlkKSxuLnZhbHVlcz1udWxsLGwmJih0aGlzLnVwbG9hZFdhaXRNcys9ZXQoKS1jKX1lbHNle3ZhciBiPXRoaXMuYWNxdWlyZVRleHR1cmUoaCxzLG8sdSk7bi50ZXh0dXJlPWJ9fX0sby5wcm90b3R5cGUuY29udmVydEFuZENhY2hlT25DUFU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnRleERhdGEuZ2V0KHQpLHI9bi5kdHlwZTtyZXR1cm4gdGhpcy5yZWxlYXNlR1BVRGF0YSh0KSxudWxsIT1lJiYobi52YWx1ZXM9ZnVuY3Rpb24odCxlKXtpZihcImZsb2F0MzJcIj09PWV8fFwiY29tcGxleDY0XCI9PT1lKXJldHVybiB0O2lmKFwiaW50MzJcIj09PWV8fFwiYm9vbFwiPT09ZSl7Zm9yKHZhciBuPVwiaW50MzJcIj09PWU/bmV3IEludDMyQXJyYXkodC5sZW5ndGgpOm5ldyBVaW50OEFycmF5KHQubGVuZ3RoKSxyPTA7cjxuLmxlbmd0aDsrK3IpbltyXT1NYXRoLnJvdW5kKHRbcl0pO3JldHVybiBufXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZHR5cGUgXCIrZSl9KGUscikpLG4udmFsdWVzfSxvLnByb3RvdHlwZS5hY3F1aXJlVGV4dHVyZT1mdW5jdGlvbih0LGUsbixyKXtpZih0aGlzLm51bUJ5dGVzSW5HUFUrPXRoaXMuY29tcHV0ZUJ5dGVzKHQsbiksIXRoaXMud2FybmVkQWJvdXRNZW1vcnkmJnRoaXMubnVtQnl0ZXNJbkdQVT4xMDI0KnRoaXMubnVtTUJCZWZvcmVXYXJuaW5nKjEwMjQpe3ZhciBvPSh0aGlzLm51bUJ5dGVzSW5HUFUvMTAyNC8xMDI0KS50b0ZpeGVkKDIpO3RoaXMud2FybmVkQWJvdXRNZW1vcnk9ITAsY29uc29sZS53YXJuKFwiSGlnaCBtZW1vcnkgdXNhZ2UgaW4gR1BVOiBcIitvK1wiIE1CLCBtb3N0IGxpa2VseSBkdWUgdG8gYSBtZW1vcnkgbGVha1wiKX1yZXR1cm4gdGhpcy50ZXh0dXJlTWFuYWdlci5hY3F1aXJlVGV4dHVyZSh0LGUscil9LG8ucHJvdG90eXBlLmNvbXB1dGVCeXRlcz1mdW5jdGlvbih0LGUpe3JldHVybiB0WzBdKnRbMV0qeihlKX0sb30oYm8pO1d0KCkmJkx0LnJlZ2lzdGVyQmFja2VuZChcIndlYmdsXCIsKGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBac30pLDIpO3ZhciB0dT1Bbih7c3F1YXJlXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwic3F1YXJlXCIpLG49W2VdO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3JldHVybiBuKFtlXSksdC5zcXVhcmUoZSl9KSx7eDplfSxudWxsLFwiU3F1YXJlXCIse30sbixbXSl9fSksZXU9XCJTcXVhcmVkRGlmZmVyZW5jZVwiO3ZhciBudT1Bbih7c3F1YXJlZERpZmZlcmVuY2VfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwic3F1YXJlZERpZmZlcmVuY2VcIiksbz1tbihlLFwiYlwiLFwic3F1YXJlZERpZmZlcmVuY2VcIik7bj1OdChyLG8pLHI9blswXSxvPW5bMV0sUm8oci5zaGFwZSxvLnNoYXBlKTt2YXIgYT17YTpyLGI6b30saT1bcixvXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LnNxdWFyZWREaWZmZXJlbmNlKHIsbyk7cmV0dXJuIGUoW3Isb10pLG59KSxhLChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLG89T24oMik7cmV0dXJue2E6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5zdWIocikubXVsKG8pKX0sYjpmdW5jdGlvbigpe3JldHVybiB0Lm11bChyLnN1YihuKS5tdWwobykpfX19KSxldSx7fSxpLFtdKX19KTt2YXIgcnU9QW4oe2Fic186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImFic1wiKTtyZXR1cm5cImNvbXBsZXg2NFwiPT09ZS5kdHlwZT9MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb21wbGV4QWJzKGUpfSkseyR4OmV9KTpMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQuYWJzKGUpO3JldHVybiBuKFtlXSkscn0pLHt4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi50b0Zsb2F0KCkuc3RlcCgtMSkpfX19KSxcIkFic1wiKX19KSxvdT1Bbih7YWNvc186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImFjb3NcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5hY29zKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdlN0cmljdChPbigxKS5zdWIobi50b0Zsb2F0KCkuc3F1YXJlKCkpLnNxcnQoKSkubmVnKCl9fX0pKX19KSxhdT1Bbih7YWNvc2hfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJhY29zaFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmFjb3NoKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdlN0cmljdChuLnRvRmxvYXQoKS5zcXVhcmUoKS5zdWIoMSkuc3FydCgpKX19fSkpfX0pLGl1PUFuKHthc2luXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwiYXNpblwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmFzaW4oZSk7cmV0dXJuIG4oW2VdKSxyfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2U3RyaWN0KE9uKDEpLnN1YihuLnRvRmxvYXQoKS5zcXVhcmUoKSkuc3FydCgpKX19fSkpfX0pLHN1PUFuKHthc2luaF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImFzaW5oXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQuYXNpbmgoZSk7cmV0dXJuIG4oW2VdKSxyfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2U3RyaWN0KE9uKDEpLmFkZChuLnRvRmxvYXQoKS5zcXVhcmUoKSkuc3FydCgpKX19fSkpfX0pLHV1PUFuKHthdGFuXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwiYXRhblwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmF0YW4oZSk7cmV0dXJuIG4oW2VdKSxyfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4udG9GbG9hdCgpLnNxdWFyZSgpLmFkZCgxKSl9fX0pKX19KSxjdT1Bbih7YXRhbmhfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJhdGFuaFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmF0YW5oKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdihPbigxKS5zdWIobi50b0Zsb2F0KCkuc3F1YXJlKCkpKX19fSkpfX0pLGx1PUFuKHtjZWlsXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwiY2VpbFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuY2VpbChlKX0pLHskeDplfSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIFhuKHQpfX19KSl9fSksaHU9QW4oe2NsaXBCeVZhbHVlXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcInhcIixcImNsaXBCeVZhbHVlXCIpO0MoZTw9biwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNsaXA6IG1pbiAoXCIrZStcIikgbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gbWF4IChcIituK1wiKS5cIn0pKTt2YXIgbz1bcl0sYT17bWluOmUsbWF4Om59O3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG8pe3ZhciBhPXQuY2xpcChyLGUsbik7cmV0dXJuIG8oW3JdKSxhfSkse3g6cn0sKGZ1bmN0aW9uKHQscil7dmFyIG89clswXTtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiB0LndoZXJlKG8uZ3JlYXRlckVxdWFsKGUpLmxvZ2ljYWxBbmQoby5sZXNzRXF1YWwobikpLFhuKHQpKX19fSksXCJDbGlwQnlWYWx1ZVwiLGEsbyl9fSksZnU9QW4oe2Nvc186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImNvc1wiKSxuPVtlXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmNvcyhlKTtyZXR1cm4gbihbZV0pLHJ9KSx7eDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIG4udG9GbG9hdCgpLnNpbigpLm5lZygpLm11bCh0KX19fSksXCJDb3NcIix7fSxuKX19KSxkdT1Bbih7Y29zaF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImNvc2hcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5jb3NoKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBuLnRvRmxvYXQoKS5zaW5oKCkubXVsU3RyaWN0KHQpfX19KSl9fSkscHU9QW4oe2VyZl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImVyZlwiKTtyZXR1cm4gQyhcImludDMyXCI9PT1lLmR0eXBlfHxcImZsb2F0MzJcIj09PWUuZHR5cGUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJJbnB1dCBkdHlwZSBtdXN0IGJlIGBpbnQzMmAgb3IgYGZsb2F0MzJgLlwifSkpLFwiaW50MzJcIj09PWUuZHR5cGUmJihlPWUudG9GbG9hdCgpKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQuZXJmKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLnNxdWFyZSgpLm5lZygpLmV4cCgpLm11bCgyL01hdGguc3FydChNYXRoLlBJKSkpfX19KSl9fSksdnU9QW4oe2V4cF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImV4cFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmV4cChlKTtyZXR1cm4gbihbcl0pLHJ9KSx7eDplfSwoZnVuY3Rpb24odCxlKXtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiB0Lm11bFN0cmljdChlWzBdKX19fSksXCJFeHBcIix7fSxbXSxbITBdKX19KSxtdT1Bbih7ZXhwbTFfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJleHBtMVwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmV4cG0xKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmV4cCgpKX19fSkpfX0pLGd1PUFuKHtmbG9vcl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImZsb29yXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5mbG9vcihlKX0pLHskeDplfSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIFhuKHQpfX19KSl9fSkseXU9QW4oe2xvZ186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImxvZ1wiKSxuPVtlXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmxvZyhlKTtyZXR1cm4gbihbZV0pLHJ9KSx7eDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4udG9GbG9hdCgpKX19fSksXCJMb2dcIix7fSxuKX19KSx4dT1Bbih7bG9nMXBfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJsb2cxcFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmxvZzFwKGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdihuLmFkZCgxKSl9fX0pKX19KSxidT1Bbih7bG9nU2lnbW9pZF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImxvZ1NpZ21vaWRcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zb2Z0cGx1cyhlLm5lZygpKS5uZWcoKTtyZXR1cm4gbihbZV0pLHJ9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5uZWcoKS5zaWdtb2lkKCkpfX19KSl9fSksd3U9QW4oe25lZ186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcIm5lZ1wiKSxuPVtlXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQubmVnKGUpfSkse3g6ZX0sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubmVnKCl9fX0pLFwiTmVnXCIse30sbil9fSksQ3U9QW4oe3JlY2lwcm9jYWxfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJyZWNpcHJvY2FsXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQucmVjaXByb2NhbChlKTtyZXR1cm4gbihbZV0pLHJ9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXYobi5zcXVhcmUoKS5uZWcoKSl9fX0pKX19KSxFdT1Bbih7cm91bmRfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJyb3VuZFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQucm91bmQoZSl9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBYbih0KX19fSkpfX0pLFJ1PUFuKHtyc3FydF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInJzcXJ0XCIpLG49W2VdO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQucnNxcnQoZSk7cmV0dXJuIG4oW2VdKSxyfSkse3g6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiB0LmRpdihuLnBvdygxLjUpLm11bCgyKSkubmVnKCl9fX0pLFwiUnNxcnRcIix7fSxuKX19KSxJdT1Bbih7c2lnbW9pZF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInNpZ21vaWRcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zaWdtb2lkKGUpO3JldHVybiBuKFtyXSkscn0pLHt4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5tdWwoT24oMSkuc3ViKG4pKSl9fX0pLFwiU2lnbW9pZFwiKX19KSxrdT1Bbih7c2lnbl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInNpZ25cIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNpZ24oZSl9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBYbih0KX19fSkpfX0pLFN1PUFuKHtpc05hTl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImlzTmFOXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5pc05hTihlKX0pLHskeDplfSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIFhuKHQpfX19KSl9fSksQXU9QW4oe2lzSW5mXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwiaXNJbmZcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlzSW5mKGUpfSkseyR4OmV9LChmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gWG4odCl9fX0pKX19KSxEdT1Bbih7aXNGaW5pdGVfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJpc0Zpbml0ZVwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuaXNGaW5pdGUoZSl9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBYbih0KX19fSkpfX0pLFR1PUFuKHtzaW5fOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJzaW5cIiksbj1bZV07cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zaW4oZSk7cmV0dXJuIG4oW2VdKSxyfSkse3g6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiBuLnRvRmxvYXQoKS5jb3MoKS5tdWwodCl9fX0pLFwiU2luXCIse30sbil9fSksTnU9QW4oe3NpbmhfOmZ1bmN0aW9uKHQpe3ZhciBlPW1uKHQsXCJ4XCIsXCJzaW5oXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQuc2luaChlKTtyZXR1cm4gbihbZV0pLHJ9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gbi50b0Zsb2F0KCkuY29zaCgpLm11bFN0cmljdCh0KX19fSkpfX0pLEZ1PUFuKHtzb2Z0cGx1c186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInNvZnRwbHVzXCIpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LG4pe3ZhciByPXQuc29mdHBsdXMoZSk7cmV0dXJuIG4oW2VdKSxyfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4uc2lnbW9pZCgpKX19fSkpfX0pLF91PUFuKHtzcXJ0XzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwic3FydFwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LnNxcnQoZSk7cmV0dXJuIG4oW2VdKSxyfSkseyR4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4udG9GbG9hdCgpLnNxcnQoKS5tdWwoMikpfX19KSl9fSksT3U9QW4oe3N0ZXBfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCk7dmFyIG49bW4odCxcInhcIixcInN0ZXBcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnN0ZXAobixlKX0pLHskeDpufSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIFhuKHQpfX19KSl9fSksTXU9QW4oe3Rhbl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInRhblwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LnRhbihlKTtyZXR1cm4gbihbZV0pLHJ9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXYobi5jb3MoKS5zcXVhcmUoKSl9fX0pKX19KSxCdT1Bbih7dGFuaF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInRhbmhcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC50YW5oKGUpO3JldHVybiBuKFtyXSkscn0pLHt4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gT24oMSkuc3ViKG4uc3F1YXJlKCkpLm11bFN0cmljdCh0KX19fSksXCJUYW5oXCIse30sbnVsbCxbITBdKX19KTtmdW5jdGlvbiBQdSh0LGUsbixyLG8sYSl7dmFyIGkscyx1PW1uKHQsXCJ4XCIsXCJiYXRjaE5vcm1cIiksYz1tbihlLFwibWVhblwiLFwiYmF0Y2hOb3JtXCIpLGw9bW4obixcInZhcmlhbmNlXCIsXCJiYXRjaE5vcm1cIik7cmV0dXJuIG51bGwhPW8mJihpPW1uKG8sXCJzY2FsZVwiLFwiYmF0Y2hOb3JtXCIpKSxudWxsIT1yJiYocz1tbihyLFwib2Zmc2V0XCIsXCJiYXRjaE5vcm1cIikpLEMoMj09PXUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiB4IG11c3QgYmUgcmFuayAzIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSksQygyPT09Yy5yYW5rfHwxPT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtMkQ6IG1lYW4gbXVzdCBiZSByYW5rIDIgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSksQygyPT09bC5yYW5rfHwxPT09bC5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtMkQ6IHZhcmlhbmNlIG11c3QgYmUgcmFuayAyIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSkpLG51bGwhPWkmJkMoMj09PWkucmFua3x8MT09PWkucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTJEOiBzY2FsZSBtdXN0IGJlIHJhbmsgMiBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2kucmFuaytcIi5cIn0pKSxudWxsIT1zJiZDKDI9PT1zLnJhbmt8fDE9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm0yRDogb2Zmc2V0IG11c3QgYmUgcmFuayAyIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSkpLFV1KHUsYyxsLHMsaSxhKX1mdW5jdGlvbiBMdSh0LGUsbixyLG8sYSl7dmFyIGkscyx1PW1uKHQsXCJ4XCIsXCJiYXRjaE5vcm1cIiksYz1tbihlLFwibWVhblwiLFwiYmF0Y2hOb3JtXCIpLGw9bW4obixcInZhcmlhbmNlXCIsXCJiYXRjaE5vcm1cIik7cmV0dXJuIG51bGwhPW8mJihpPW1uKG8sXCJzY2FsZVwiLFwiYmF0Y2hOb3JtXCIpKSxudWxsIT1yJiYocz1tbihyLFwib2Zmc2V0XCIsXCJiYXRjaE5vcm1cIikpLEMoMz09PXUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiB4IG11c3QgYmUgcmFuayAzIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSksQygzPT09Yy5yYW5rfHwxPT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtM0Q6IG1lYW4gbXVzdCBiZSByYW5rIDMgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSksQygzPT09bC5yYW5rfHwxPT09bC5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtM0Q6IHZhcmlhbmNlIG11c3QgYmUgcmFuayAzIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSkpLG51bGwhPWkmJkMoMz09PWkucmFua3x8MT09PWkucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiBzY2FsZSBtdXN0IGJlIHJhbmsgMyBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2kucmFuaytcIi5cIn0pKSxudWxsIT1zJiZDKDM9PT1zLnJhbmt8fDE9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm0zRDogb2Zmc2V0IG11c3QgYmUgcmFuayAzIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSkpLFV1KHUsYyxsLHMsaSxhKX1mdW5jdGlvbiBXdSh0LGUsbixyLG8sYSl7dmFyIGkscyx1PW1uKHQsXCJ4XCIsXCJiYXRjaE5vcm1cIiksYz1tbihlLFwibWVhblwiLFwiYmF0Y2hOb3JtXCIpLGw9bW4obixcInZhcmlhbmNlXCIsXCJiYXRjaE5vcm1cIik7cmV0dXJuIG51bGwhPW8mJihpPW1uKG8sXCJzY2FsZVwiLFwiYmF0Y2hOb3JtXCIpKSxudWxsIT1yJiYocz1tbihyLFwib2Zmc2V0XCIsXCJiYXRjaE5vcm1cIikpLEMoND09PXUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTREOiB4IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSksQyg0PT09Yy5yYW5rfHwxPT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtNEQ6IG1lYW4gbXVzdCBiZSByYW5rIDQgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSksQyg0PT09bC5yYW5rfHwxPT09bC5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtNEQ6IHZhcmlhbmNlIG11c3QgYmUgcmFuayA0IG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSkpLG51bGwhPWkmJkMoND09PWkucmFua3x8MT09PWkucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTREOiBzY2FsZSBtdXN0IGJlIHJhbmsgNCBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2kucmFuaytcIi5cIn0pKSxudWxsIT1zJiZDKDQ9PT1zLnJhbmt8fDE9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm00RDogb2Zmc2V0IG11c3QgYmUgcmFuayA0IG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSkpLFV1KHUsYyxsLHMsaSxhKX1mdW5jdGlvbiBVdSh0LGUsbixyLG8sYSl7bnVsbD09YSYmKGE9LjAwMSk7dmFyIGkscyx1LGM9bW4odCxcInhcIixcImJhdGNoTm9ybVwiKSxsPW1uKGUsXCJtZWFuXCIsXCJiYXRjaE5vcm1cIiksaD1tbihuLFwidmFyaWFuY2VcIixcImJhdGNoTm9ybVwiKTtudWxsIT1vJiYoaT1tbihvLFwic2NhbGVcIixcImJhdGNoTm9ybVwiKSksbnVsbCE9ciYmKHM9bW4ocixcIm9mZnNldFwiLFwiYmF0Y2hOb3JtXCIpKSxDKGwucmFuaz09PWgucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkJhdGNoIG5vcm1hbGl6YXRpb24gZ3JhZGllbnQgcmVxdWlyZXMgbWVhbiBhbmQgdmFyaWFuY2UgdG8gaGF2ZSBlcXVhbCByYW5rcy5cIn0pKSxDKG51bGw9PXN8fGwucmFuaz09PXMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkJhdGNoIG5vcm1hbGl6YXRpb24gZ3JhZGllbnQgcmVxdWlyZXMgbWVhbiBhbmQgb2Zmc2V0IHRvIGhhdmUgZXF1YWwgcmFua3MuXCJ9KSksQyhudWxsPT1pfHxsLnJhbms9PT1pLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJCYXRjaCBub3JtYWxpemF0aW9uIGdyYWRpZW50IHJlcXVpcmVzIG1lYW4gYW5kIHNjYWxlIHRvIGhhdmUgZXF1YWwgcmFua3MuXCJ9KSksdT0wPT09Yy5yYW5rfHwxPT09Yy5yYW5rP2MuYXM0RCgxLDEsMSxjLnNpemUpOjI9PT1jLnJhbms/Yy5hczREKDEsMSxjLnNoYXBlWzBdLGMuc2hhcGVbMV0pOjM9PT1jLnJhbms/Yy5hczREKDEsYy5zaGFwZVswXSxjLnNoYXBlWzFdLGMuc2hhcGVbMl0pOmM7dmFyIGY9W2MsbCxoLGldO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQuYmF0Y2hOb3JtYWxpemF0aW9uKHUsVnUobCksVnUoaCksYSxWdShpKSxWdShzKSk7cmV0dXJuIGUoW2MsbCxoLGldKSxufSkse3g6YyxtZWFuOmwsdmFyaWFuY2U6aCxzY2FsZTppLG9mZnNldDpzfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lLHI9blswXSxvPW5bMV0saT1uWzJdLHM9blszXSxjPW51bGw9PXM/T24oMSk6cyxsPUVvKG8uc2hhcGUsdS5zaGFwZSksaD1bXTtpZigxPT09by5yYW5rKXtmb3IodmFyIGY9MDtmPHUuc2hhcGUubGVuZ3RoLTE7KytmKWgucHVzaCh1LnNoYXBlW2ZdKTtoLnB1c2goMSl9dmFyIGQ9ci5zdWIobykscD10Lm11bChjKSx2PVJ1KGkuYWRkKE9uKGEpKSksbT12Lm11bCh2KS5tdWwodikubXVsKE9uKC0uNSkpO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIDE9PT1vLnJhbms/dC5tdWwoTHIodi5hczREKDEsMSwxLG8uc2hhcGVbMF0pLGgpKS5tdWwoYykucmVzaGFwZShyLnNoYXBlKTp0Lm11bCh2KS5tdWwoYykucmVzaGFwZShyLnNoYXBlKX0sbWVhbjpmdW5jdGlvbigpe3ZhciB0PXYubXVsKE9uKC0xKSkubXVsKHApO3JldHVybiAxPT09by5yYW5rJiYodD10LnN1bShsKSksdC5yZXNoYXBlKG8uc2hhcGUpfSx2YXJpYW5jZTpmdW5jdGlvbigpe3ZhciB0PW0ubXVsKGQpLm11bChwKTtyZXR1cm4gMT09PW8ucmFuayYmKHQ9dC5zdW0obCkpLHQucmVzaGFwZShvLnNoYXBlKX0sc2NhbGU6ZnVuY3Rpb24oKXt2YXIgZT1kLm11bCh2KSxuPXQubXVsKGUpO3JldHVybiAxPT09by5yYW5rJiYobj1uLnN1bShsKSksbi5yZXNoYXBlKG8uc2hhcGUpfSxvZmZzZXQ6ZnVuY3Rpb24oKXt2YXIgZT10O3JldHVybiAxPT09by5yYW5rJiYoZT1lLnN1bShsKSksZS5yZXNoYXBlKG8uc2hhcGUpfX19KSxcIkJhdGNoTm9ybWFsaXphdGlvblwiLHt2YXJpYW5jZUVwc2lsb246YX0sZikucmVzaGFwZShjLnNoYXBlKX1mdW5jdGlvbiBWdSh0KXtyZXR1cm4gbnVsbD09dD9udWxsOjA9PT10LnJhbms/dC5hczFEKCk6MT09PXQucmFuaz90OjI9PT10LnJhbms/dC5hczREKDEsMSx0LnNoYXBlWzBdLHQuc2hhcGVbMV0pOjM9PT10LnJhbms/dC5hczREKDEsdC5zaGFwZVswXSx0LnNoYXBlWzFdLHQuc2hhcGVbMl0pOnR9ZnVuY3Rpb24genUoKXtYZShcInRmLmJhdGNoTm9ybWFsaXphdGlvbigpIGlzIGdvaW5nIGF3YXkuIFVzZSB0Zi5iYXRjaE5vcm0oKSBpbnN0ZWFkLCBhbmQgbm90ZSB0aGUgcG9zaXRpb25hbCBhcmd1bWVudCBjaGFuZ2Ugb2Ygc2NhbGUsIG9mZnNldCwgYW5kIHZhcmlhbmNlRXBzaWxvblwiKX12YXIgR3U9QW4oe2JhdGNoTm9ybWFsaXphdGlvbjJkXzpmdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIHZvaWQgMD09PXImJihyPS4wMDEpLHp1KCksUHUodCxlLG4sYSxvLHIpfX0pLEh1PUFuKHtiYXRjaE5vcm1hbGl6YXRpb24zZF86ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj0uMDAxKSx6dSgpLEx1KHQsZSxuLGEsbyxyKX19KSxxdT1Bbih7YmF0Y2hOb3JtYWxpemF0aW9uNGRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9LjAwMSksenUoKSxXdSh0LGUsbixhLG8scil9fSksS3U9QW4oe2JhdGNoTm9ybWFsaXphdGlvbl86ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj0uMDAxKSx6dSgpLFV1KHQsZSxuLGEsbyxyKX19KSxqdT1Bbih7YmF0Y2hOb3JtXzpVdX0pLFh1PUFuKHtiYXRjaE5vcm0yZF86UHV9KSxZdT1Bbih7YmF0Y2hOb3JtM2RfOkx1fSksJHU9QW4oe2JhdGNoTm9ybTRkXzpXdX0pO3ZhciBRdT1Bbih7bG9naWNhbEFuZF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwiYVwiLFwibG9naWNhbEFuZFwiLFwiYm9vbFwiKSxyPW1uKGUsXCJiXCIsXCJsb2dpY2FsQW5kXCIsXCJib29sXCIpO3JldHVybiBSbyhuLnNoYXBlLHIuc2hhcGUpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmxvZ2ljYWxBbmQobixyKX0pLHthOm4sYjpyfSxudWxsLFwiTG9naWNhbEFuZFwiKX19KSxKdT1Bbih7bG9naWNhbE5vdF86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImxvZ2ljYWxOb3RcIixcImJvb2xcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmxvZ2ljYWxOb3QoZSl9KSx7JHg6ZX0pfX0pLFp1PUFuKHtsb2dpY2FsT3JfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImxvZ2ljYWxPclwiLFwiYm9vbFwiKSxyPW1uKGUsXCJiXCIsXCJsb2dpY2FsT3JcIixcImJvb2xcIik7cmV0dXJuIFJvKG4uc2hhcGUsci5zaGFwZSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQubG9naWNhbE9yKG4scil9KSx7JGE6biwkYjpyfSl9fSksdGM9QW4oe2xvZ2ljYWxYb3JfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImxvZ2ljYWxYb3JcIixcImJvb2xcIikscj1tbihlLFwiYlwiLFwibG9naWNhbFhvclwiLFwiYm9vbFwiKTtyZXR1cm4gUm8obi5zaGFwZSxyLnNoYXBlKSxadSh0LGUpLmxvZ2ljYWxBbmQoUXUodCxlKS5sb2dpY2FsTm90KCkpfX0pLGVjPUFuKHt3aGVyZV86ZnVuY3Rpb24odCxlLG4pe3ZhciByPW1uKGUsXCJhXCIsXCJ3aGVyZVwiKSxvPW1uKG4sXCJiXCIsXCJ3aGVyZVwiKSxhPW1uKHQsXCJjb25kaXRpb25cIixcIndoZXJlXCIsXCJib29sXCIpO3JldHVybiBFKHIuc2hhcGUsby5zaGFwZSxcIkVycm9yIGluIHdoZXJlOiBcIiksMT09PWEucmFuaz9DKGEuc2hhcGVbMF09PT1yLnNoYXBlWzBdLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGZpcnN0IGRpbWVuc2lvbiBvZiBgYWAgbXVzdCBtYXRjaCB0aGUgc2l6ZSBvZiBgY29uZGl0aW9uYC5cIn0pKTpFKGEuc2hhcGUsby5zaGFwZSxcIkVycm9yIGluIHdoZXJlOiBcIiksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LnNlbGVjdChhLHIsbyk7cmV0dXJuIGUoW2FdKSxufSkseyRjb25kaXRpb246YSwkYTpyLCRiOm99LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyRjb25kaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gWG4obikudG9GbG9hdCgpfSwkYTpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmNhc3QodC5kdHlwZSkpfSwkYjpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmxvZ2ljYWxOb3QoKS5jYXN0KHQuZHR5cGUpKX19fSkpfX0pLG5jPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSxuLG87cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCwoZT1tbih0LFwiY29uZGl0aW9uXCIsXCJ3aGVyZUFzeW5jXCIsXCJib29sXCIpKS5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gbj1yLnNlbnQoKSxvPW5hKGUuc2hhcGUsbiksdCE9PWUmJmUuZGlzcG9zZSgpLFsyLG9dfX0pKX0pKX07dmFyIHJjPUFuKHthZGRfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwiYWRkXCIpLG89bW4oZSxcImJcIixcImFkZFwiKTtuPU50KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1SbyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5hZGQocixvKX0pLHthOnIsYjpvfSwoZnVuY3Rpb24odCl7cmV0dXJue2E6ZnVuY3Rpb24oKXt2YXIgZT10LG49RW8oci5zaGFwZSxhKTtyZXR1cm4gbi5sZW5ndGg+MCYmKGU9ZS5zdW0obikpLGUucmVzaGFwZShyLnNoYXBlKX0sYjpmdW5jdGlvbigpe3ZhciBlPXQsbj1FbyhvLnNoYXBlLGEpO3JldHVybiBuLmxlbmd0aD4wJiYoZT1lLnN1bShuKSksZS5yZXNoYXBlKG8uc2hhcGUpfX19KSxcIkFkZFwiKX19KSxvYz1Bbih7YWRkTl86ZnVuY3Rpb24odCl7QyhBcnJheS5pc0FycmF5KHQpLChmdW5jdGlvbigpe3JldHVyblwiVGhlIGFyZ3VtZW50IHBhc3NlZCB0byB0Zi5hZGROKCkgbXVzdCBiZSBhIGxpc3Qgb2YgdGVuc29yc1wifSkpLEModC5sZW5ndGg+PTEsKGZ1bmN0aW9uKCl7cmV0dXJuXCJNdXN0IHBhc3MgYXQgbGVhc3Qgb25lIHRlbnNvciB0byB0Zi5hZGROKCksIGJ1dCBnb3QgXCIrdC5sZW5ndGh9KSk7dmFyIGU9dC5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIG1uKHQsXCJ0ZW5zb3JzXCIrZSxcImFkZE5cIil9KSksbj1lWzBdO2UuZm9yRWFjaCgoZnVuY3Rpb24odCl7aWYodC5kdHlwZSE9PW4uZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiQWxsIHRlbnNvcnMgcGFzc2VkIHRvIHRmLmFkZE4oKSBtdXN0IGhhdmUgdGhlIHNhbWUgZHR5cGVcIil9KSksZS5mb3JFYWNoKChmdW5jdGlvbih0KXtpZighUyh0LnNoYXBlLG4uc2hhcGUpKXRocm93IG5ldyBFcnJvcihcIkFsbCB0ZW5zb3JzIHBhc3NlZCB0byB0Zi5hZGROKCkgbXVzdCBoYXZlIHRoZSBzYW1lIHNoYXBlXCIpfSkpO3ZhciByPWU7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFkZE4oZSl9KSxyLChmdW5jdGlvbih0KXt2YXIgbj17fTtyZXR1cm4gZS5mb3JFYWNoKChmdW5jdGlvbihlLHIpe25bcl09ZnVuY3Rpb24oKXtyZXR1cm4gdC5jbG9uZSgpfX0pKSxufSksXCJBZGROXCIpfX0pLGFjPUFuKHthZGRTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImFkZFN0cmljdFwiKSxyPW1uKGUsXCJiXCIsXCJhZGRTdHJpY3RcIik7cmV0dXJuIEUobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gYWRkU3RyaWN0OiBcIiksbi5hZGQocil9fSksaWM9QW4oe2F0YW4yXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bW4odCxcImFcIixcImF0YW4yXCIpLG89bW4oZSxcImJcIixcImF0YW4yXCIpO249TnQocixvKSxyPW5bMF0sbz1uWzFdO3ZhciBhPVJvKHIuc2hhcGUsby5zaGFwZSk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5hdGFuMihyLG8pO3JldHVybiBlKFtyLG9dKSxufSkseyRhOnIsJGI6b30sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJueyRhOmZ1bmN0aW9uKCl7dmFyIGU9cmMobi5zcXVhcmUoKSxyLnNxdWFyZSgpKSxvPXQubXVsKHIuZGl2KGUpKSxpPUVvKG4uc2hhcGUsYSk7cmV0dXJuIGkubGVuZ3RoPjAmJihvPW8uc3VtKGkpKSxvLnJlc2hhcGUobi5zaGFwZSl9LCRiOmZ1bmN0aW9uKCl7dmFyIGU9cmMobi5zcXVhcmUoKSxyLnNxdWFyZSgpKSxvPXd1KHQubXVsKG4uZGl2KGUpKSksaT1FbyhyLnNoYXBlLGEpO3JldHVybiBpLmxlbmd0aD4wJiYobz1vLnN1bShpKSksby5yZXNoYXBlKHIuc2hhcGUpfX19KSl9fSksc2M9QW4oe2Rpdl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJkaXZcIiksbz1tbihlLFwiYlwiLFwiZGl2XCIpO2lmKG49TnQocixvKSxyPW5bMF0sbz1uWzFdLFwiaW50MzJcIj09PXIuZHR5cGUmJlwiaW50MzJcIj09PW8uZHR5cGUpcmV0dXJuIGxjKHIsbyk7dmFyIGE9Um8oci5zaGFwZSxvLnNoYXBlKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LnJlYWxEaXZpZGUocixvKTtyZXR1cm4gZShbcixvXSksbn0pLHthOnIsYjpvfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57YTpmdW5jdGlvbigpe3ZhciBlPXQuZGl2KHIudG9GbG9hdCgpKSxvPUVvKG4uc2hhcGUsYSk7cmV0dXJuIG8ubGVuZ3RoPjA/ZS5zdW0obykucmVzaGFwZShuLnNoYXBlKTplfSxiOmZ1bmN0aW9uKCl7dmFyIGU9dC5tdWwobi50b0Zsb2F0KCkpLG89RW8oci5zaGFwZSxhKTtvLmxlbmd0aD4wJiYoZT1lLnN1bShvKS5yZXNoYXBlKHIuc2hhcGUpKTt2YXIgaT1yLnNxdWFyZSgpO3JldHVybiBlLmRpdihpLnRvRmxvYXQoKSkubmVnKCl9fX0pLFwiRGl2XCIpfX0pLHVjPUFuKHtkaXZOb05hbl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJkaXZcIiksbz1tbihlLFwiYlwiLFwiZGl2XCIpO3I9KG49TnQocixvKSlbMF0sbz1uWzFdO3ZhciBhPXNjKHIsbyksaT1YbihhKSxzPW8uZXF1YWwoaSk7cmV0dXJuIGVjKHMsaSxhKX19KSxjYz1Bbih7ZGl2U3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJhXCIsXCJkaXZcIikscj1tbihlLFwiYlwiLFwiZGl2XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIGRpdmlkZVN0cmljdDogXCIpLG4uZGl2KHIpfX0pLGxjPUFuKHtmbG9vckRpdl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJmbG9vckRpdlwiKSxvPW1uKGUsXCJiXCIsXCJmbG9vckRpdlwiKTtuPU50KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1SbyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQuZmxvb3JEaXYocixvKTtyZXR1cm4gZShbcixvXSksbn0pLHthOnIsYjpvfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57YTpmdW5jdGlvbigpe3ZhciBlPXQuZGl2KHIudG9GbG9hdCgpKSxvPUVvKG4uc2hhcGUsYSk7cmV0dXJuIG8ubGVuZ3RoPjA/ZS5zdW0obykucmVzaGFwZShuLnNoYXBlKTplfSxiOmZ1bmN0aW9uKCl7dmFyIGU9dC5tdWwobi50b0Zsb2F0KCkpLG89RW8oci5zaGFwZSxhKTtvLmxlbmd0aD4wJiYoZT1lLnN1bShvKS5yZXNoYXBlKHIuc2hhcGUpKTt2YXIgaT1yLnNxdWFyZSgpO3JldHVybiBlLmRpdihpLnRvRmxvYXQoKSkubmVnKCl9fX0pLFwiRmxvb3JEaXZcIil9fSksaGM9QW4oe21heGltdW1fOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwibWF4aW11bVwiKSxvPW1uKGUsXCJiXCIsXCJtYXhpbXVtXCIpO3JldHVybiBuPU50KHIsbykscj1uWzBdLG89blsxXSxcImJvb2xcIj09PXIuZHR5cGUmJihyPXIudG9JbnQoKSxvPW8udG9JbnQoKSksUm8oci5zaGFwZSxvLnNoYXBlKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWF4aW11bShyLG8pO3JldHVybiBlKFtyLG9dKSxufSkse2E6cixiOm99LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnthOmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4uZ3JlYXRlckVxdWFsKHIpLnRvRmxvYXQoKSl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5sZXNzKHIpLnRvRmxvYXQoKSl9fX0pLFwiTWF4aW11bVwiKX19KSxmYz1Bbih7bWF4aW11bVN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwiYVwiLFwibWF4aW11bVN0cmljdFwiKSxyPW1uKGUsXCJiXCIsXCJtYXhpbXVtU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG1heGltdW1TdHJpY3Q6IFwiKSxuLm1heGltdW0ocil9fSksZGM9QW4oe21pbmltdW1fOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwibWluaW11bVwiKSxvPW1uKGUsXCJiXCIsXCJtaW5pbXVtXCIpO3JldHVybiBuPU50KHIsbykscj1uWzBdLG89blsxXSxcImJvb2xcIj09PXIuZHR5cGUmJihyPXIudG9JbnQoKSxvPW8udG9JbnQoKSksUm8oci5zaGFwZSxvLnNoYXBlKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWluaW11bShyLG8pO3JldHVybiBlKFtyLG9dKSxufSkse2E6cixiOm99LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnthOmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4ubGVzc0VxdWFsKHIpLnRvRmxvYXQoKSl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5ncmVhdGVyKHIpLnRvRmxvYXQoKSl9fX0pLFwiTWluaW11bVwiKX19KSxwYz1Bbih7bWluaW11bVN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwiYVwiLFwibWluaW11bVN0cmljdFwiKSxyPW1uKGUsXCJiXCIsXCJtaW5pbXVtU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG1pbmltdW1TdHJpY3Q6IFwiKSxuLm1pbmltdW0ocil9fSksdmM9QW4oe21vZF86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJtb2RcIiksbz1tbihlLFwiYlwiLFwibW9kXCIpO249TnQocixvKSxyPW5bMF0sbz1uWzFdO3ZhciBhPVJvKHIuc2hhcGUsby5zaGFwZSk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5tb2QocixvKTtyZXR1cm4gZShbcixvXSksbn0pLHskYTpyLCRiOm99LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnskYTpmdW5jdGlvbigpe3ZhciBlPUVvKG4uc2hhcGUsYSk7cmV0dXJuIGUubGVuZ3RoPjA/dC5zdW0oZSkucmVzaGFwZShuLnNoYXBlKTp0fSwkYjpmdW5jdGlvbigpe3ZhciBlPXQubXVsKG4uZGl2KHIpLmZsb29yKCkubmVnKCkpLG89RW8oci5zaGFwZSxhKTtyZXR1cm4gby5sZW5ndGg+MD9lLnN1bShvKS5yZXNoYXBlKHIuc2hhcGUpOmV9fX0pKX19KSxtYz1Bbih7bW9kU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJhXCIsXCJtb2RTdHJpY3RcIikscj1tbihlLFwiYlwiLFwibW9kU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG1vZFN0cmljdDogXCIpLG4ubW9kKHIpfX0pLGdjPUFuKHttdWxfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwibXVsXCIpLG89bW4oZSxcImJcIixcIm11bFwiKTtuPU50KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1SbyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQubXVsdGlwbHkocixvKTtyZXR1cm4gZShbcixvXSksbn0pLHthOnIsYjpvfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57YTpmdW5jdGlvbigpe3ZhciBlPXQubXVsKHIudG9GbG9hdCgpKSxvPUVvKG4uc2hhcGUsYSk7cmV0dXJuIG8ubGVuZ3RoPjA/ZS5zdW0obykucmVzaGFwZShuLnNoYXBlKTplfSxiOmZ1bmN0aW9uKCl7dmFyIGU9dC5tdWwobi50b0Zsb2F0KCkpLG89RW8oci5zaGFwZSxhKTtyZXR1cm4gby5sZW5ndGg+MD9lLnN1bShvKS5yZXNoYXBlKHIuc2hhcGUpOmV9fX0pLFwiTXVsXCIpfX0pLHljPUFuKHttdWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcIm11bFwiKSxyPW1uKGUsXCJiXCIsXCJtdWxcIik7cmV0dXJuIEUobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gbXVsdGlwbHlTdHJpY3Q6IFwiKSxuLm11bChyKX19KSx4Yz1Bbih7cG93XzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bW4odCxcImJhc2VcIixcInBvd1wiKSxvPW1uKGUsXCJleHBcIixcInBvd1wiKTtuPU50KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1SbyhyLnNoYXBlLG8uc2hhcGUpLGk9W3Isb107cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5wb3cocixvKTtyZXR1cm4gZShbcixvLG5dKSxufSkse2E6cixiOm99LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLG89ZVsyXTtyZXR1cm57YTpmdW5jdGlvbigpe3ZhciBlPXIudG9GbG9hdCgpLG89dC5tdWwoZS5tdWwobi5wb3coZS5zdWIoT24oMSkpKSkpLGk9RW8obi5zaGFwZSxhKTtyZXR1cm4gaS5sZW5ndGg+MCYmKG89by5zdW0oaSkpLG8ucmVzaGFwZShuLnNoYXBlKX0sYjpmdW5jdGlvbigpe3ZhciBlPW4uZ3JlYXRlcigwKSxpPW4ubG9nKCkud2hlcmUoZSxYbihuKSkscz10Lm11bChvLm11bChpKSksdT1FbyhyLnNoYXBlLGEpO3JldHVybiB1Lmxlbmd0aD4wJiYocz1zLnN1bSh1KSkscy5yZXNoYXBlKHIuc2hhcGUpfX19KSxcIlBvd1wiLHt9LGksWyEwXSl9fSksYmM9QW4oe3Bvd1N0cmljdF86ZnVuY3Rpb24odCxlKXtyZXR1cm4gRSh0LnNoYXBlLGUuc2hhcGUsXCJFcnJvciBpbiBwb3dTdHJpY3Q6IFwiKSx0LnBvdyhlKX19KSx3Yz1Bbih7c3F1YXJlZERpZmZlcmVuY2VTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcInNxdWFyZWREaWZmZXJlbmNlU3RyaWN0XCIpLHI9bW4oZSxcImJcIixcInNxdWFyZWREaWZmZXJlbmNlU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIHNxdWFyZWREaWZmZXJlbmNlU3RyaWN0OiBcIiksbi5zcXVhcmVkRGlmZmVyZW5jZShyKX19KSxDYz1Bbih7c3ViXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bW4odCxcImFcIixcInN1YlwiKSxvPW1uKGUsXCJiXCIsXCJzdWJcIik7bj1OdChyLG8pLHI9blswXSxvPW5bMV07dmFyIGE9Um8oci5zaGFwZSxvLnNoYXBlKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3VidHJhY3QocixvKX0pLHthOnIsYjpvfSwoZnVuY3Rpb24odCl7cmV0dXJue2E6ZnVuY3Rpb24oKXt2YXIgZT10LG49RW8oci5zaGFwZSxhKTtyZXR1cm4gbi5sZW5ndGg+MCYmKGU9ZS5zdW0obikpLGUucmVzaGFwZShyLnNoYXBlKX0sYjpmdW5jdGlvbigpe3ZhciBlPXQsbj1FbyhvLnNoYXBlLGEpO3JldHVybiBuLmxlbmd0aD4wJiYoZT1lLnN1bShuKSksZS5uZWcoKS5yZXNoYXBlKG8uc2hhcGUpfX19KSxcIlN1YlwiKX19KSxFYz1Bbih7c3ViU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJhXCIsXCJzdWJTdHJpY3RcIikscj1tbihlLFwiYlwiLFwic3ViU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIHN1YlN0cmljdDogXCIpLG4uc3ViKHIpfX0pO3ZhciBSYz1Bbih7ZXF1YWxfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwiZXF1YWxcIiksbz1tbihlLFwiYlwiLFwiZXF1YWxcIik7cmV0dXJuIG49TnQocixvKSxyPW5bMF0sbz1uWzFdLFJvKHIuc2hhcGUsby5zaGFwZSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuZXF1YWwocixvKX0pLHskYTpyLCRiOm99KX19KSxJYz1Bbih7ZXF1YWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImVxdWFsU3RyaWN0XCIpLHI9bW4oZSxcImJcIixcImVxdWFsU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIGVxdWFsU3RyaWN0OiBcIiksbi5lcXVhbChyKX19KSxrYz1Bbih7Z3JlYXRlcl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJncmVhdGVyXCIpLG89bW4oZSxcImJcIixcImdyZWF0ZXJcIik7cmV0dXJuIG49TnQocixvKSxyPW5bMF0sbz1uWzFdLFJvKHIuc2hhcGUsby5zaGFwZSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuZ3JlYXRlcihyLG8pfSkse2E6cixiOm99LG51bGwsXCJHcmVhdGVyXCIpfX0pLFNjPUFuKHtncmVhdGVyRXF1YWxfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1tbih0LFwiYVwiLFwiZ3JlYXRlckVxdWFsXCIpLG89bW4oZSxcImJcIixcImdyZWF0ZXJFcXVhbFwiKTtyZXR1cm4gbj1OdChyLG8pLHI9blswXSxvPW5bMV0sUm8oci5zaGFwZSxvLnNoYXBlKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQuZ3JlYXRlckVxdWFsKHIsbyk7cmV0dXJuIGUoW3Isb10pLG59KSx7YTpyLGI6b30sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJue2E6ZnVuY3Rpb24oKXtyZXR1cm4gWG4obil9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gWG4ocil9fX0pLFwiR3JlYXRlckVxdWFsXCIpfX0pLEFjPUFuKHtncmVhdGVyRXF1YWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImdyZWF0ZXJFcXVhbFN0cmljdFwiKSxyPW1uKGUsXCJiXCIsXCJncmVhdGVyRXF1YWxTdHJpY3RcIik7cmV0dXJuIEUobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gZ3JlYXRlckVxdWFsU3RyaWN0OiBcIiksbi5ncmVhdGVyRXF1YWwocil9fSksRGM9QW4oe2dyZWF0ZXJTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImdyZWF0ZXJTdHJpY3RcIikscj1tbihlLFwiYlwiLFwiZ3JlYXRlclN0cmljdFwiKTtyZXR1cm4gRShuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBncmVhdGVyU3RyaWN0OiBcIiksbi5ncmVhdGVyKHIpfX0pLFRjPUFuKHtsZXNzXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bW4odCxcImFcIixcImxlc3NcIiksbz1tbihlLFwiYlwiLFwibGVzc1wiKTtyZXR1cm4gbj1OdChyLG8pLHI9blswXSxvPW5bMV0sUm8oci5zaGFwZSxvLnNoYXBlKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5sZXNzKHIsbyl9KSx7YTpyLGI6b30sbnVsbCxcIkxlc3NcIil9fSksTmM9QW4oe2xlc3NFcXVhbF86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJsZXNzRXF1YWxcIiksbz1tbihlLFwiYlwiLFwibGVzc0VxdWFsXCIpO3JldHVybiBuPU50KHIsbykscj1uWzBdLG89blsxXSxSbyhyLnNoYXBlLG8uc2hhcGUpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5sZXNzRXF1YWwocixvKTtyZXR1cm4gZShbcixvXSksbn0pLHthOnIsYjpvfSxudWxsLFwiTGVzc0VxdWFsXCIpfX0pLEZjPUFuKHtsZXNzRXF1YWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImxlc3NFcXVhbFN0cmljdFwiKSxyPW1uKGUsXCJiXCIsXCJsZXNzRXF1YWxTdHJpY3RcIik7cmV0dXJuIEUobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gbGVzc0VxdWFsU3RyaWN0OiBcIiksbi5sZXNzRXF1YWwocil9fSksX2M9QW4oe2xlc3NTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcImxlc3NTdHJpY3RcIikscj1tbihlLFwiYlwiLFwibGVzc1N0cmljdFwiKTtyZXR1cm4gRShuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBsZXNzU3RyaWN0OiBcIiksbi5sZXNzKHIpfX0pLE9jPUFuKHtub3RFcXVhbF86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW1uKHQsXCJhXCIsXCJub3RFcXVhbFwiKSxvPW1uKGUsXCJiXCIsXCJub3RFcXVhbFwiKTtyZXR1cm4gbj1OdChyLG8pLHI9blswXSxvPW5bMV0sUm8oci5zaGFwZSxvLnNoYXBlKSxMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5ub3RFcXVhbChyLG8pfSkse2E6cixiOm99LG51bGwsXCJOb3RFcXVhbFwiKX19KSxNYz1Bbih7bm90RXF1YWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcImFcIixcIm5vdEVxdWFsU3RyaWN0XCIpLHI9bW4oZSxcImJcIixcIm5vdEVxdWFsU3RyaWN0XCIpO3JldHVybiBFKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG5vdEVxdWFsU3RyaWN0OiBcIiksbi5ub3RFcXVhbChyKX19KTtmdW5jdGlvbiBCYyh0LGUpe2Zvcih2YXIgbj1bXSxyPXQ7cjxlOysrciluLnB1c2gocik7cmV0dXJuIG59ZnVuY3Rpb24gUGModCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoOysrbilmb3IodmFyIHI9MDtyPHRbbl0ubGVuZ3RoOysrcillLnB1c2godFtuXVtyXSk7cmV0dXJuIGV9dmFyIExjPUFuKHtnYXRoZXJfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0wKTt2YXIgcj1tbih0LFwieFwiLFwiZ2F0aGVyXCIpLG89bW4oZSxcImluZGljZXNcIixcImdhdGhlclwiLFwiaW50MzJcIik7bj1PKG4sci5zaGFwZSlbMF07dmFyIGE9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj10LnNoYXBlW25dLG89W10sYT0xLGk9MSxzPTA7czxuO3MrKylvLnB1c2godC5zaGFwZVtzXSksYSo9dC5zaGFwZVtzXTtmb3Iocz0wO3M8ZS5yYW5rO3MrKylvLnB1c2goZS5zaGFwZVtzXSk7Zm9yKHM9bisxO3M8dC5yYW5rO3MrKylvLnB1c2godC5zaGFwZVtzXSksaSo9dC5zaGFwZVtzXTtyZXR1cm57YmF0Y2hTaXplOmEsc2xpY2VTaXplOmksZGltU2l6ZTpyLG91dHB1dFNoYXBlOm99fShyLG8sbik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIGE9dC5nYXRoZXIocixvLmZsYXR0ZW4oKSxuKTtyZXR1cm4gZShbb10pLGF9KSx7eDpyLGluZGljZXM6b30sKGZ1bmN0aW9uKHQsZSl7dmFyIG89ZVswXTtyZXR1cm57eDpmdW5jdGlvbigpe3ZhciBlPXIuc2hhcGUsYT1vLnNpemUsaT1lLnNsaWNlKDAsbikscz1pLmxlbmd0aCx1PWUuc2xpY2UobixlLmxlbmd0aCkuc2xpY2UoMSksYz11Lmxlbmd0aCxsPUJjKDAscyksaD1CYyhzKzEscysxK2MpLGY9UGMoW2ksW2FdLHVdKSxkPXQucmVzaGFwZShmKSxwPW8ucmVzaGFwZShbYV0pLHY9UGMoW1tzXSxsLGhdKSxtPWQudHJhbnNwb3NlKHYpLGc9V2MobSxwLHIuc2hhcGVbbl0pLHk9Um4odik7cmV0dXJuIGc9Zy50cmFuc3Bvc2UoeSl9LGluZGljZXM6ZnVuY3Rpb24oKXtyZXR1cm4gb319fSksXCJHYXRoZXJcIix7YXhpczpufSkucmVzaGFwZShhLm91dHB1dFNoYXBlKX19KSxXYz1Bbih7dW5zb3J0ZWRTZWdtZW50U3VtXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcInhcIixcInVuc29ydGVkU2VnbWVudFN1bVwiKSxvPW1uKGUsXCJzZWdtZW50SWRzXCIsXCJ1bnNvcnRlZFNlZ21lbnRTdW1cIixcImludDMyXCIpO3JldHVybiBDKEEobiksKGZ1bmN0aW9uKCl7cmV0dXJuXCJudW1TZWdtZW50cyBtdXN0IGJlIG9mIGR0eXBlIGludFwifSkpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIGE9dC51bnNvcnRlZFNlZ21lbnRTdW0ocixvLG4pO3JldHVybiBlKFtvXSksYX0pLHskeDpyfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1oYyhlLFhuKGUpKSxyPUxjKHQsbiksbz1TYyhlLE9uKDAsXCJpbnQzMlwiKSksYT1yLnJhbmstby5yYW5rLGk9MDtpPGE7KytpKW89d3IobyxpKzEpO289UXUobyx6bihyLnNoYXBlLFwiYm9vbFwiKSk7dmFyIHM9WG4ocik7cmV0dXJuIGVjKG8scixzKX0odCxuKX19fSkpfX0pO3ZhciBVYz1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBuLGEsaSxzLHUsYyxsLGgsZixkLHAsdixtO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6Zm9yKG49bW4odCxcInRlbnNvclwiLFwiYm9vbE1hc2tcIiksYT1tbihlLFwibWFza1wiLFwiYm9vbE1hc2tcIixcImJvb2xcIiksaT1udWxsPT1vPzA6byxzPWEucmFuayx1PW4uc2hhcGUsQyhzPjAsKGZ1bmN0aW9uKCl7cmV0dXJuXCJtYXNrIGNhbm5vdCBiZSBzY2FsYXJcIn0pKSxFKHUuc2xpY2UoaSxpK3MpLGEuc2hhcGUsXCJtYXNrJ3Mgc2hhcGUgbXVzdCBtYXRjaCB0aGUgZmlyc3QgSyBkaW1lbnNpb25zIG9mIHRlbnNvcidzIHNoYXBlLFwiKSxjPTEsbD1pO2w8aStzO2wrKyljKj11W2xdO3JldHVybiBoPXUuc2xpY2UoMCxpKS5jb25jYXQoW2NdLHUuc2xpY2UoaStzKSksZj1uLnJlc2hhcGUoaCksZD1hLnJlc2hhcGUoWy0xXSksWzQsbmMoZCldO2Nhc2UgMTpyZXR1cm4gcD1yLnNlbnQoKSx2PXAuc3F1ZWV6ZShbMV0pLG09TGMoZix2LGkpLHQhPT1uJiZuLmRpc3Bvc2UoKSxlIT09YSYmYS5kaXNwb3NlKCksdi5kaXNwb3NlKCksZi5kaXNwb3NlKCksZC5kaXNwb3NlKCkscC5kaXNwb3NlKCksWzIsbV19fSkpfSkpfTtmdW5jdGlvbiBWYyh0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1hJiYoYT1cIk5IV0NcIiksQyh0Lmxlbmd0aD09PWUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkxlbmd0aCBvZiBpblNoYXBlIChcIit0Lmxlbmd0aCtcIikgYW5kIHJhbmsgb2YgZHkgKFwiK2UucmFuaytcIikgbXVzdCBtYXRjaFwifSkpO3ZhciBzPXQsdT1lLGM9ITE7Mz09PWUucmFuayYmKGM9ITAsdT1lLmFzNEQoMSxlLnNoYXBlWzBdLGUuc2hhcGVbMV0sZS5zaGFwZVsyXSkscz1bMSx0WzBdLHRbMV0sdFsyXV0pLEMoND09PXMubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVySW5wdXQ6IGluU2hhcGUgbXVzdCBiZSBsZW5ndGggNCwgYnV0IGdvdCBsZW5ndGggXCIrcy5sZW5ndGgrXCIuXCJ9KSksQyg0PT09dS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVySW5wdXQ6IGR5IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrdS5yYW5rfSkpLEMoND09PW4ucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBmaWx0ZXIgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIituLnJhbmt9KSk7dmFyIGw9XCJOSFdDXCI9PT1hP3NbM106c1sxXSxoPVwiTkhXQ1wiPT09YT91LnNoYXBlWzNdOnUuc2hhcGVbMV07QyhsPT09bi5zaGFwZVsyXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBkZXB0aCBvZiBpbnB1dCAoXCIrbCtcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBmb3IgZmlsdGVyIFwiK24uc2hhcGVbMl0rXCIuXCJ9KSksQyhoPT09bi5zaGFwZVszXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBkZXB0aCBvZiBvdXRwdXQgKFwiK2grXCIpIG11c3QgbWF0Y2ggb3V0cHV0IGRlcHRoIGZvciBmaWx0ZXIgXCIrbi5zaGFwZVszXStcIi5cIn0pKSxudWxsIT1pJiZDKEEobyksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJJbnB1dDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIraStcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSkpO3ZhciBmPUJvKGEpLGQ9U28ocyxuLnNoYXBlLHIsMSxvLGksITEsZikscD1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciByPXQuY29udjJkRGVySW5wdXQodSxuLGQpO3JldHVybiBlKFtuLHVdKSxyfSkse2R5NEQ6dSxmaWx0ZXI6bn0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxzPWVbMV07cmV0dXJue2R5NEQ6ZnVuY3Rpb24oKXtyZXR1cm4gcWModCxuLHIsbyxhLDEsaSl9LGZpbHRlcjpmdW5jdGlvbigpe3JldHVybiBqYyh0LHMsbi5zaGFwZSxyLG8sYSxpKX19fSkpO3JldHVybiBjP3AuYXMzRChwLnNoYXBlWzFdLHAuc2hhcGVbMl0scC5zaGFwZVszXSk6cH1mdW5jdGlvbiB6Yyh0KXt2YXIgZT1mdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdD9bdCx0LHRdOjI9PT10Lmxlbmd0aD9bdFswXSx0WzFdLDFdOnR9KHQpLG49ZVswXSxyPWVbMV0sbz1lWzJdO3JldHVybiAxPT09biYmMT09PXImJjE9PT1vfWZ1bmN0aW9uIEdjKHQsZSxuLHIsbyl7Qyh0Lmxlbmd0aD09PWUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkxlbmd0aCBvZiBpblNoYXBlIChcIit0Lmxlbmd0aCtcIikgYW5kIHJhbmsgb2YgZHkgKFwiK2UucmFuaytcIikgbXVzdCBtYXRjaFwifSkpO3ZhciBhPXQsaT1lLHM9ITE7ND09PWUucmFuayYmKHM9ITAsaT1lLmFzNUQoMSxlLnNoYXBlWzBdLGUuc2hhcGVbMV0sZS5zaGFwZVsyXSxlLnNoYXBlWzNdKSxhPVsxLHRbMF0sdFsxXSx0WzJdLHRbM11dKTt2YXIgdT1hWzRdLGM9aS5zaGFwZVs0XTtDKDU9PT1hLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlcklucHV0OiBpblNoYXBlIG11c3QgYmUgbGVuZ3RoIDUsIGJ1dCBnb3QgbGVuZ3RoIFwiK2EubGVuZ3RoK1wiLlwifSkpLEMoNT09PWkucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlcklucHV0OiBkeSBtdXN0IGJlIHJhbmsgNSwgYnV0IGdvdCByYW5rIFwiK2kucmFua30pKSxDKDU9PT1uLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJJbnB1dDogZmlsdGVyIG11c3QgYmUgcmFuayA1LCBidXQgZ290IHJhbmsgXCIrbi5yYW5rfSkpLEModT09PW4uc2hhcGVbM10sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJJbnB1dDogZGVwdGggb2YgaW5wdXQgKFwiK3UrXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIituLnNoYXBlWzNdK1wiLlwifSkpLEMoYz09PW4uc2hhcGVbNF0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJJbnB1dDogZGVwdGggb2Ygb3V0cHV0IChcIitjK1wiKSBtdXN0IG1hdGNoIG91dHB1dCBkZXB0aCBmb3IgZmlsdGVyIFwiK24uc2hhcGVbNF0rXCIuXCJ9KSk7dmFyIGw9QW8oYSxuLnNoYXBlLHIsMSxvKSxoPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnYzZERlcklucHV0KGksbixsKX0pLHtkeTVEOml9KTtyZXR1cm4gcz9oLmFzNEQoaC5zaGFwZVsxXSxoLnNoYXBlWzJdLGguc2hhcGVbM10saC5zaGFwZVs0XSk6aH12YXIgSGM9QW4oe2NvbnYxZF86ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09byYmKG89XCJOV0NcIiksdm9pZCAwPT09YSYmKGE9MSk7dmFyIHM9bW4odCxcInhcIixcImNvbnYxZFwiKSx1PW1uKGUsXCJmaWx0ZXJcIixcImNvbnYxZFwiKSxjPXMsbD0hMTsyPT09cy5yYW5rJiYobD0hMCxjPXMuYXMzRCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSkpLEMoMz09PWMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxZDogaW5wdXQgbXVzdCBiZSByYW5rIDMsIGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSksQygzPT09dS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjFkOiBmaWx0ZXIgbXVzdCBiZSByYW5rIDMsIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSksbnVsbCE9aSYmQyhBKHIpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjFkOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitpK1wiIGJ1dCBnb3QgcGFkIFwiK3IrXCIuXCJ9KSksQyhjLnNoYXBlWzJdPT09dS5zaGFwZVsxXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxZDogZGVwdGggb2YgaW5wdXQgKFwiK2Muc2hhcGVbMl0rXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIit1LnNoYXBlWzFdK1wiLlwifSkpLEMoTW8obixhKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxRDogRWl0aGVyIHN0cmlkZSBvciBkaWxhdGlvbiBtdXN0IGJlIDEuIEdvdCBzdHJpZGUgXCIrbitcIiBhbmQgZGlsYXRpb24gJ1wiK2ErXCInXCJ9KSksQyhcIk5XQ1wiPT09bywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxZDogZ290IGRhdGFGb3JtYXQgb2YgXCIrbytcIiBidXQgb25seSBOV0MgaXMgY3VycmVudGx5IHN1cHBvcnRlZC5cIn0pKTt2YXIgaD11LmFzNEQoMSx1LnNoYXBlWzBdLHUuc2hhcGVbMV0sdS5zaGFwZVsyXSksZj1jLmFzNEQoYy5zaGFwZVswXSwxLGMuc2hhcGVbMV0sYy5zaGFwZVsyXSksZD1xYyhmLGgsWzEsbl0scixcIk5IV0NcIixbMSxhXSxpKTtyZXR1cm4gbD9kLmFzMkQoZC5zaGFwZVsyXSxkLnNoYXBlWzNdKTpkLmFzM0QoZC5zaGFwZVswXSxkLnNoYXBlWzJdLGQuc2hhcGVbM10pfX0pLHFjPUFuKHtjb252MmRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PW8mJihvPVwiTkhXQ1wiKSx2b2lkIDA9PT1hJiYoYT1bMSwxXSk7dmFyIHM9bW4odCxcInhcIixcImNvbnYyZFwiKSx1PW1uKGUsXCJmaWx0ZXJcIixcImNvbnYyZFwiKSxjPXMsbD0hMTszPT09cy5yYW5rJiYobD0hMCxjPXMuYXM0RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdKSksQyg0PT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK2MucmFuaytcIi5cIn0pKSxDKDQ9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pKSxudWxsIT1pJiZDKEEociksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK2krXCIgYnV0IGdvdCBwYWQgXCIrcitcIi5cIn0pKTt2YXIgaD1cIk5IV0NcIj09PW8/Yy5zaGFwZVszXTpjLnNoYXBlWzFdO0MoaD09PXUuc2hhcGVbMl0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGRlcHRoIG9mIGlucHV0IChcIitoK1wiKSBtdXN0IG1hdGNoIGlucHV0IGRlcHRoIGZvciBmaWx0ZXIgXCIrdS5zaGFwZVsyXStcIi5cIn0pKSxDKE1vKG4sYSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MkQ6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrYStcIidcIn0pKTt2YXIgZj1CbyhvKSxkPVNvKGMuc2hhcGUsdS5zaGFwZSxuLGEscixpLCExLGYpLHA9W3UsY10sdj1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQuY29udjJkKGMsdSxkKTtyZXR1cm4gZShbdSxjXSksbn0pLHt4OmMsZmlsdGVyOnV9LChmdW5jdGlvbih0LGUpe3ZhciBpPWUscz1pWzBdLHU9aVsxXTtyZXR1cm4gQyhPbyhhKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGdyYWRpZW50IG9mIGNvbnYyRDogZGlsYXRpb24gcmF0ZXMgZ3JlYXRlciB0aGFuIDEgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkIGluIGdyYWRpZW50cy4gR290IGRpbGF0aW9ucyAnXCIrYStcIidcIn0pKSx7eDpmdW5jdGlvbigpe3JldHVybiBYYyh1LnNoYXBlLHQscyxuLHIsbyl9LGZpbHRlcjpmdW5jdGlvbigpe3JldHVybiBqYyh1LHQscy5zaGFwZSxuLHIsbyl9fX0pLFwiQ29udjJEXCIsZCxwKTtyZXR1cm4gbD92LmFzM0Qodi5zaGFwZVsxXSx2LnNoYXBlWzJdLHYuc2hhcGVbM10pOnZ9fSksS2M9QW4oe2NvbnYzZF86ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZvaWQgMD09PW8mJihvPVwiTkRIV0NcIiksdm9pZCAwPT09YSYmKGE9WzEsMSwxXSk7dmFyIGk9bW4odCxcInhcIixcImNvbnYzZFwiKSxzPW1uKGUsXCJmaWx0ZXJcIixcImNvbnYzZFwiKSx1PWksYz0hMTs0PT09aS5yYW5rJiYoYz0hMCx1PWkuYXM1RCgxLGkuc2hhcGVbMF0saS5zaGFwZVsxXSxpLnNoYXBlWzJdLGkuc2hhcGVbM10pKSxDKDU9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2Q6IGlucHV0IG11c3QgYmUgcmFuayA1LCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSkpLEMoNT09PXMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZDogZmlsdGVyIG11c3QgYmUgcmFuayA1LCBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSkpLEModS5zaGFwZVs0XT09PXMuc2hhcGVbM10sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2Q6IGRlcHRoIG9mIGlucHV0IChcIit1LnNoYXBlWzRdK1wiKSBtdXN0IG1hdGNoIGlucHV0IGRlcHRoIGZvciBmaWx0ZXIgXCIrcy5zaGFwZVszXStcIi5cIn0pKSxDKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHpjKHQpfHx6YyhlKX0obixhKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzRDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrbitcIiBhbmQgZGlsYXRpb25zICdcIithK1wiJ1wifSkpLEMoXCJOREhXQ1wiPT09bywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZDogZ290IGRhdGFGb3JtYXQgb2YgXCIrbytcIiBidXQgb25seSBOREhXQyBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLlwifSkpO3ZhciBsPUFvKHUuc2hhcGUscy5zaGFwZSxuLGEsciksaD1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQuY29udjNkKHUscyxsKTtyZXR1cm4gZShbdSxzXSksbn0pLHt4OnUsJGZpbHRlcjpzfSwoZnVuY3Rpb24odCxlKXtDKHpjKGEpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZ3JhZGllbnQgb2YgY29udjNEOiBkaWxhdGlvbiByYXRlcyBncmVhdGVyIHRoYW4gMSBhcmUgbm90IHlldCBzdXBwb3J0ZWQgaW4gZ3JhZGllbnRzLiBHb3QgZGlsYXRpb25zICdcIithK1wiJ1wifSkpO3ZhciBvPWVbMF0saT1lWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIEdjKG8uc2hhcGUsdCxpLG4scil9LCRmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10OzQ9PT10LnJhbmsmJihhPXQuYXM1RCgxLHQuc2hhcGVbMF0sdC5zaGFwZVsxXSx0LnNoYXBlWzJdLHQuc2hhcGVbM10pKTt2YXIgaT1lOzQ9PT1pLnJhbmsmJihpPWUuYXM1RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdLGUuc2hhcGVbM10pKTtDKDU9PT1hLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJGaWx0ZXI6IGlucHV0IG11c3QgYmUgcmFuayA1LCBidXQgZ290IHNoYXBlIFwiK2Euc2hhcGUrXCIuXCJ9KSksQyg1PT09aS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjNkRGVyRmlsdGVyOiBkeSBtdXN0IGJlIHJhbmsgNSwgYnV0IGdvdCBzaGFwZSBcIitpLnNoYXBlK1wiLlwifSkpLEMoNT09PW4ubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjNkRGVyRmlsdGVyOiBmaWx0ZXJTaGFwZSBtdXN0IGJlIGxlbmd0aCA1LCBidXQgZ290IFwiK24rXCIuXCJ9KSksQyhhLnNoYXBlWzRdPT09blszXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlckZpbHRlcjogZGVwdGggb2YgaW5wdXQgXCIrYS5zaGFwZVs0XStcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBpbiBmaWx0ZXIgKFwiK25bM10rXCIuXCJ9KSksQyhpLnNoYXBlWzRdPT09bls0XSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlckZpbHRlcjogZGVwdGggb2YgZHkgKFwiK2kuc2hhcGVbNF0rXCIpIG11c3QgbWF0Y2ggb3V0cHV0IGRlcHRoIGZvciBmaWx0ZXIgKFwiK25bNF0rXCIpLlwifSkpO3ZhciBzPUFvKGEuc2hhcGUsbixyLDEsbyk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnYzZERlckZpbHRlcihhLGkscyl9KSx7eDVEOmEsZHk1RDppfSl9KG8sdCxpLnNoYXBlLG4scil9fX0pKTtyZXR1cm4gYz9oLmFzNEQoaC5zaGFwZVsxXSxoLnNoYXBlWzJdLGguc2hhcGVbM10saC5zaGFwZVs0XSk6aH19KSxqYz1Bbih7Y29udjJkRGVyRmlsdGVyXzpmdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1hJiYoYT1cIk5IV0NcIik7dmFyIHM9dDszPT09dC5yYW5rJiYocz10LmFzNEQoMSx0LnNoYXBlWzBdLHQuc2hhcGVbMV0sdC5zaGFwZVsyXSkpO3ZhciB1PWU7Mz09PXUucmFuayYmKHU9ZS5hczREKDEsZS5zaGFwZVswXSxlLnNoYXBlWzFdLGUuc2hhcGVbMl0pKSxDKDQ9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJGaWx0ZXI6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHNoYXBlIFwiK3Muc2hhcGUrXCIuXCJ9KSksQyg0PT09dS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVyRmlsdGVyOiBkeSBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCBzaGFwZSBcIit1LnNoYXBlK1wiLlwifSkpLEMoND09PW4ubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVyRmlsdGVyOiBmaWx0ZXJTaGFwZSBtdXN0IGJlIGxlbmd0aCA0LCBidXQgZ290IFwiK24rXCIuXCJ9KSk7dmFyIGM9XCJOSFdDXCI9PT1hP3Muc2hhcGVbM106cy5zaGFwZVsxXSxsPVwiTkhXQ1wiPT09YT91LnNoYXBlWzNdOnUuc2hhcGVbMV07QyhjPT09blsyXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlckZpbHRlcjogZGVwdGggb2YgaW5wdXQgXCIrYytcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBpbiBmaWx0ZXIgKFwiK25bMl0rXCIuXCJ9KSksQyhsPT09blszXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlckZpbHRlcjogZGVwdGggb2YgZHkgKFwiK2wrXCIpIG11c3QgbWF0Y2ggb3V0cHV0IGRlcHRoIGZvciBmaWx0ZXIgKFwiK25bM10rXCIpLlwifSkpLG51bGwhPWkmJkMoQShvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlckZpbHRlcjogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIraStcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSkpO3ZhciBoPUJvKGEpLGY9U28ocy5zaGFwZSxuLHIsMSxvLGksITEsaCk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnYyZERlckZpbHRlcihzLHUsZil9KSx7eDREOnMsZHk0RDp1fSl9fSksWGM9QW4oe2NvbnYyZERlcklucHV0XzpWY30pLFljPUFuKHtkZXB0aHdpc2VDb252MmRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PW8mJihvPVwiTkhXQ1wiKSx2b2lkIDA9PT1hJiYoYT1bMSwxXSk7dmFyIHM9bW4odCxcInhcIixcImRlcHRod2lzZUNvbnYyZFwiKSx1PW1uKGUsXCJmaWx0ZXJcIixcImRlcHRod2lzZUNvbnYyZFwiKSxjPXMsbD0hMTszPT09cy5yYW5rJiYobD0hMCxjPXMuYXM0RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdKSksQyg0PT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZGVwdGh3aXNlQ29udjJkOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK2MucmFuaytcIi5cIn0pKSxDKDQ9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkZXB0aHdpc2VDb252MmQ6IGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pKSxDKGMuc2hhcGVbM109PT11LnNoYXBlWzJdLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZGVwdGh3aXNlQ29udjJkOiBudW1iZXIgb2YgaW5wdXQgY2hhbm5lbHMgKFwiK2Muc2hhcGVbM10rXCIpIG11c3QgbWF0Y2ggdGhlIGluQ2hhbm5lbHMgZGltZW5zaW9uIGluIGZpbHRlciBcIit1LnNoYXBlWzJdK1wiLlwifSkpLG51bGw9PWEmJihhPVsxLDFdKSxDKE1vKG4sYSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkZXB0aHdpc2VDb252MmQ6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrYStcIidcIn0pKSxudWxsIT1pJiZDKEEociksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkZXB0aHdpc2VDb252MmQ6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK2krXCIgYnV0IGdvdCBwYWQgXCIrcitcIi5cIn0pKTt2YXIgaD1TbyhjLnNoYXBlLHUuc2hhcGUsbixhLHIsaSwhMCksZj1bYyx1XSxkPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5kZXB0aHdpc2VDb252MkQoYyx1LGgpO3JldHVybiBlKFtjLHVdKSxufSkse3g6YyxmaWx0ZXI6dX0sKGZ1bmN0aW9uKHQsZSl7QyhPbyhhKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGdyYWRpZW50IG9mIGRlcHRod2lzZUNvbnYyZDogZGlsYXRpb24gcmF0ZXMgZ3JlYXRlciB0aGFuIDEgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkLiBHb3QgZGlsYXRpb25zICdcIithK1wiJ1wifSkpO3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuICRjKG4uc2hhcGUsdCxyLGgpfSxmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gUWMobix0LHIuc2hhcGUsaCl9fX0pLFwiRGVwdGh3aXNlQ29udjJkTmF0aXZlXCIsaCxmKTtyZXR1cm4gbD9kLmFzM0QoZC5zaGFwZVsxXSxkLnNoYXBlWzJdLGQuc2hhcGVbM10pOmR9fSksJGM9QW4oe2RlcHRod2lzZUNvbnYyZERlcklucHV0XzpmdW5jdGlvbih0LGUsbixyKXt2YXIgbz1lLGE9ITE7Mz09PWUucmFuayYmKGE9ITAsbz1lLmFzNEQoMSxlLnNoYXBlWzBdLGUuc2hhcGVbMV0sZS5zaGFwZVsyXSkpO3ZhciBpPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRlcHRod2lzZUNvbnYyRERlcklucHV0KG8sbixyKX0pLHtkeTREOm99KTtyZXR1cm4gYT9pLmFzM0QoaS5zaGFwZVsxXSxpLnNoYXBlWzJdLGkuc2hhcGVbM10pOml9fSksUWM9QW4oe2RlcHRod2lzZUNvbnYyZERlckZpbHRlcl86ZnVuY3Rpb24odCxlLG4scil7dmFyIG89dDszPT09dC5yYW5rJiYobz10LmFzNEQoMSx0LnNoYXBlWzBdLHQuc2hhcGVbMV0sdC5zaGFwZVsyXSkpO3ZhciBhPWU7cmV0dXJuIDM9PT1hLnJhbmsmJihhPWUuYXM0RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdKSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuZGVwdGh3aXNlQ29udjJERGVyRmlsdGVyKG8sYSxyKX0pLHt4NEQ6byxkeTREOmF9KX19KSxKYz1Bbih7c2VwYXJhYmxlQ29udjJkXzpmdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1hJiYoYT1bMSwxXSksdm9pZCAwPT09aSYmKGk9XCJOSFdDXCIpO3ZhciBzPW1uKHQsXCJ4XCIsXCJzZXBhcmFibGVDb252MmRcIiksdT1tbihlLFwiZGVwdGh3aXNlRmlsdGVyXCIsXCJzZXBhcmFibGVDb252MmRcIiksYz1tbihuLFwicG9pbnR3aXNlRmlsdGVyXCIsXCJzZXBhcmFibGVDb252MmRcIiksbD1zLGg9ITE7aWYoMz09PXMucmFuayYmKGg9ITAsbD1zLmFzNEQoMSxzLnNoYXBlWzBdLHMuc2hhcGVbMV0scy5zaGFwZVsyXSkpLFwiTkNIV1wiPT09aSl0aHJvdyBuZXcgRXJyb3IoXCJzZXBhcmFibGVDb252MmQgY3VycmVudGx5IGRvZXMgbm90IHN1cHBvcnQgZGF0YUZvcm1hdCBOQ0hXOyBvbmx5IE5IV0MgaXMgc3VwcG9ydGVkXCIpO0MoND09PWwucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNlcGFyYWJsZUNvbnYyZDogaW5wdXQgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIitsLnJhbmsrXCIuXCJ9KSksQyg0PT09dS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2VwYXJhYmxlQ29udjJkOiBkZXB0aHdpc2UgZmlsdGVyIG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSkpLEMoND09PWMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNlcGFyYWJsZUNvbnYyZDogcG9pbnR3aXNlIGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pKSxDKDE9PT1jLnNoYXBlWzBdLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2VwYXJhYmxlQ29udjJkOiB0aGUgZmlyc3QgZGltZW5zaW9uIG9mIHBvaW50d2lzZSBmaWx0ZXIgIG11c3QgYmUgMSwgYnV0IGdvdCBcIitjLnNoYXBlWzBdK1wiLlwifSkpLEMoMT09PWMuc2hhcGVbMV0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzZXBhcmFibGVDb252MmQ6IHRoZSBzZWNvbmQgZGltZW5zaW9uIG9mIHBvaW50d2lzZSBmaWx0ZXIgbXVzdCBiZSAxLCBidXQgZ290IFwiK2Muc2hhcGVbMV0rXCIuXCJ9KSk7dmFyIGY9dS5zaGFwZVsyXSxkPXUuc2hhcGVbM107QyhjLnNoYXBlWzJdPT09ZipkLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2VwYXJhYmxlQ29udjJkOiB0aGUgdGhpcmQgZGltZW5zaW9uIG9mIHBvaW50d2lzZSBmaWx0ZXIgbXVzdCBiZSBcIitmKmQrXCIsIGJ1dCBnb3QgXCIrYy5zaGFwZVsyXStcIi5cIn0pKTt2YXIgcD1ZYyhsLHUscixvLGksYSksdj1xYyhwLGMsMSxcInZhbGlkXCIsaSk7cmV0dXJuIGg/di5hczNEKHYuc2hhcGVbMV0sdi5zaGFwZVsyXSx2LnNoYXBlWzNdKTp2fX0pLFpjPUFuKHtjb252MmRUcmFuc3Bvc2VfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gVmMobixtbih0LFwieFwiLFwiY29udjJkVHJhbnNwb3NlXCIpLG1uKGUsXCJmaWx0ZXJcIixcImNvbnYyZFRyYW5zcG9zZVwiKSxyLG8sXCJOSFdDXCIsYSl9fSksdGw9QW4oe2NvbnYzZFRyYW5zcG9zZV86ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gR2Mobixtbih0LFwieFwiLFwiY29udjNkVHJhbnNwb3NlXCIpLG1uKGUsXCJmaWx0ZXJcIixcImNvbnYzZFRyYW5zcG9zZVwiKSxyLG8pfX0pO3ZhciBlbD1Bbih7bWF0TXVsXzpmdW5jdGlvbih0LGUsbixyKXt2YXIgbzt2b2lkIDA9PT1uJiYobj0hMSksdm9pZCAwPT09ciYmKHI9ITEpO3ZhciBhPW1uKHQsXCJhXCIsXCJtYXRNdWxcIiksaT1tbihlLFwiYlwiLFwibWF0TXVsXCIpO289TnQoYSxpKSxhPW9bMF0saT1vWzFdO3ZhciBzPW4/YS5zaGFwZVthLnJhbmstMl06YS5zaGFwZVthLnJhbmstMV0sdT1yP2kuc2hhcGVbaS5yYW5rLTFdOmkuc2hhcGVbaS5yYW5rLTJdLGM9bj9hLnNoYXBlW2EucmFuay0xXTphLnNoYXBlW2EucmFuay0yXSxsPXI/aS5zaGFwZVtpLnJhbmstMl06aS5zaGFwZVtpLnJhbmstMV0saD1hLnNoYXBlLnNsaWNlKDAsLTIpLGY9aS5zaGFwZS5zbGljZSgwLC0yKSxkPWsoaCkscD1rKGYpO0MoYS5yYW5rPj0yJiZpLnJhbms+PTImJmEucmFuaz09PWkucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1hdE11bDogaW5wdXRzIG11c3QgaGF2ZSB0aGUgc2FtZSByYW5rIG9mIGF0IGxlYXN0IDIsIGdvdCByYW5rcyBcIithLnJhbmsrXCIgYW5kIFwiK2kucmFuaytcIi5cIn0pKSxDKFMoaCxmKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1hdE11bDogb3V0ZXIgZGltZW5zaW9ucyAoXCIraCtcIikgYW5kIChcIitmK1wiKSBvZiBUZW5zb3JzIHdpdGggc2hhcGVzIFwiK2Euc2hhcGUrXCIgYW5kIFwiK2kuc2hhcGUrXCIgbXVzdCBtYXRjaC5cIn0pKSxDKHM9PT11LChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF0TXVsOiBpbm5lciBzaGFwZXMgKFwiK3MrXCIpIGFuZCAoXCIrdStcIikgb2YgVGVuc29ycyB3aXRoIHNoYXBlcyBcIithLnNoYXBlK1wiIGFuZCBcIitpLnNoYXBlK1wiIGFuZCB0cmFuc3Bvc2VBPVwiK24rXCIgYW5kIHRyYW5zcG9zZUI9XCIrcitcIiBtdXN0IG1hdGNoLlwifSkpO3ZhciB2PWEuc2hhcGUuc2xpY2UoMCwtMikuY29uY2F0KFtjLGxdKSxtPW4/YS5hczNEKGQscyxjKTphLmFzM0QoZCxjLHMpLGc9cj9pLmFzM0QocCxsLHUpOmkuYXMzRChwLHUsbCkseT17dHJhbnNwb3NlQTpuLHRyYW5zcG9zZUI6cn07cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG89dC5iYXRjaE1hdE11bChtLGcsbixyKTtyZXR1cm4gZShbbSxnXSksb30pLHthOm0sYjpnfSwoZnVuY3Rpb24odCxlKXt2YXIgbz1lLGE9b1swXSxpPW9bMV07cmV0dXJuIG58fHI/IW4mJnI/e2E6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tYXRNdWwoaSwhMSwhMSl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tYXRNdWwoYSwhMCwhMSl9fTpuJiYhcj97YTpmdW5jdGlvbigpe3JldHVybiBpLm1hdE11bCh0LCExLCEwKX0sYjpmdW5jdGlvbigpe3JldHVybiBhLm1hdE11bCh0LCExLCExKX19OnthOmZ1bmN0aW9uKCl7cmV0dXJuIGkubWF0TXVsKHQsITAsITApfSxiOmZ1bmN0aW9uKCl7cmV0dXJuIHQubWF0TXVsKGEsITAsITApfX06e2E6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tYXRNdWwoaSwhMSwhMCl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gYS5tYXRNdWwodCwhMCwhMSl9fX0pLFwiQmF0Y2hNYXRNdWxcIix5KS5yZXNoYXBlKHYpfX0pLG5sPUFuKHtkb3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcInQxXCIsXCJkb3RcIikscj1tbihlLFwidDJcIixcImRvdFwiKTtDKCEoMSE9PW4ucmFuayYmMiE9PW4ucmFua3x8MSE9PXIucmFuayYmMiE9PXIucmFuayksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkb3Q6IGlucHV0cyBtdXN0IGFsbCBiZSByYW5rIDEgb3IgMiwgYnV0IGdvdCByYW5rcyBcIituLnJhbmsrXCIgYW5kIFwiK3IucmFuaytcIi5cIn0pKTt2YXIgbz0xPT09bi5yYW5rP24uc2l6ZTpuLnNoYXBlWzFdLGE9MT09PXIucmFuaz9yLnNpemU6ci5zaGFwZVswXTtyZXR1cm4gQyhvPT09YSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGRvdDogaW5uZXIgZGltZW5zaW9ucyBvZiBpbnB1dHMgbXVzdCBtYXRjaCwgYnV0IGdvdCBcIitvK1wiIGFuZCBcIithK1wiLlwifSkpLDE9PT1uLnJhbmsmJjE9PT1yLnJhbms/bi5hczJEKDEsLTEpLm1hdE11bChyLmFzMkQoLTEsMSkpLmFzU2NhbGFyKCk6MT09PW4ucmFuayYmMj09PXIucmFuaz9uLmFzMkQoMSwtMSkubWF0TXVsKHIuYXMyRChyLnNoYXBlWzBdLHIuc2hhcGVbMV0pKS5hczFEKCk6Mj09PW4ucmFuayYmMT09PXIucmFuaz9uLm1hdE11bChyLmFzMkQoLTEsMSkpLmFzMUQoKTpuLm1hdE11bChyLmFzMkQoci5zaGFwZVswXSxyLnNoYXBlWzFdKSl9fSkscmw9QW4oe291dGVyUHJvZHVjdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwidjFcIixcIm91dGVyUHJvZHVjdFwiKSxyPW1uKGUsXCJ2MlwiLFwib3V0ZXJQcm9kdWN0XCIpO3JldHVybiBDKDE9PT1uLnJhbmsmJjE9PT1yLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBvdXRlclByb2R1Y3Q6IGlucHV0cyBtdXN0IGJlIHJhbmsgMSwgYnV0IGdvdCByYW5rcyBcIituLnJhbmsrXCIgYW5kIFwiK3IucmFuaytcIi5cIn0pKSxuLmFzMkQoLTEsMSkubWF0TXVsKHIuYXMyRCgxLC0xKSl9fSk7dmFyIG9sPUFuKHtyZXZlcnNlXzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJ4XCIsXCJyZXZlcnNlXCIpO2lmKDA9PT1uLnJhbmspcmV0dXJuIG4uY2xvbmUoKTt2YXIgcj1PKGUsbi5zaGFwZSk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJldmVyc2UobixyKX0pLHskeDpufSwoZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQucmV2ZXJzZShyKX19fSkpLnJlc2hhcGVBcyhuKX19KSxhbD1Bbih7cmV2ZXJzZTFkXzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwicmV2ZXJzZVwiKTtyZXR1cm4gQygxPT09ZS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmV2ZXJzZTFEOiB4IG11c3QgYmUgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitlLnJhbmsrXCIuXCJ9KSksb2woZSwwKX19KSxpbD1Bbih7cmV2ZXJzZTJkXzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJ4XCIsXCJyZXZlcnNlXCIpO3JldHVybiBDKDI9PT1uLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXZlcnNlMkQ6IHggbXVzdCBiZSByYW5rIDIgYnV0IGdvdCByYW5rIFwiK24ucmFuaytcIi5cIn0pKSxvbChuLGUpfX0pLHNsPUFuKHtyZXZlcnNlM2RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcInhcIixcInJldmVyc2VcIik7cmV0dXJuIEMoMz09PW4ucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHJldmVyc2UzRDogeCBtdXN0IGJlIHJhbmsgMyBidXQgZ290IHJhbmsgXCIrbi5yYW5rK1wiLlwifSkpLG9sKG4sZSl9fSksdWw9QW4oe3JldmVyc2U0ZF86ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwieFwiLFwicmV2ZXJzZVwiKTtyZXR1cm4gQyg0PT09bi5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmV2ZXJzZTREOiB4IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIituLnJhbmsrXCIuXCJ9KSksb2wobixlKX19KTtmdW5jdGlvbiBjbCh0LGUsbixyLG8sYSl7dmFyIGk9bW4odCxcInhcIixcIm1heFBvb2xcIikscz1pLHU9ITE7Mz09PWkucmFuayYmKHU9ITAscz1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpLG51bGw9PXImJihyPVsxLDFdKSxDKDQ9PT1zLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSkpLEMoTW8obixyKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2w6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrcitcIidcIn0pKSxudWxsIT1hJiZDKEEobyksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIithK1wiIGJ1dCBnb3QgcGFkIFwiK28rXCIuXCJ9KSk7dmFyIGM9SW8ocy5zaGFwZSxlLG4scixvLGEpO2lmKDE9PT1jLmZpbHRlcldpZHRoJiYxPT09Yy5maWx0ZXJIZWlnaHQmJlMoYy5pblNoYXBlLGMub3V0U2hhcGUpKXJldHVybiBpLmNsb25lKCk7dmFyIGw9W3NdLGg9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1heFBvb2wocyxjKTtyZXR1cm4gZShbcyxuXSksbn0pLHt4OnN9LChmdW5jdGlvbih0LGEpe3ZhciBpPWFbMF0scz1hWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyl7dmFyIHU9bW4odCxcImR5XCIsXCJtYXhQb29sQmFja3Byb3BcIiksYz1tbihlLFwiaW5wdXRcIixcIm1heFBvb2xCYWNrcHJvcFwiKSxsPW1uKG4sXCJvdXRwdXRcIixcIm1heFBvb2xCYWNrcHJvcFwiKTtDKGMucmFuaz09PXUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIlJhbmsgb2YgaW5wdXQgKFwiK2MucmFuaytcIikgZG9lcyBub3QgbWF0Y2ggcmFuayBvZiBkeSAoXCIrdS5yYW5rK1wiKVwifSkpLG51bGw9PWEmJihhPVsxLDFdKTtDKE1vKG8sYSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sQmFja1Byb3A6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK28rXCIgYW5kIGRpbGF0aW9ucyAnXCIrYStcIidcIn0pKSxDKDQ9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sQmFja3Byb3A6IGR5IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSksQyg0PT09Yy5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbEJhY2twcm9wOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrYy5yYW5rK1wiLlwifSkpLG51bGwhPXMmJkMoQShpKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2xCYWNrcHJvcDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIrcytcIiBidXQgZ290IHBhZCBcIitpK1wiLlwifSkpO3ZhciBoPUlvKGMuc2hhcGUscixvLGEsaSxzKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQubWF4UG9vbEJhY2twcm9wKHUsYyxsLGgpfSkseyRkeTp1LCRpbnB1dDpjfSl9KHQsaSxzLGUsbixyLG8pfX19KSxcIk1heFBvb2xcIixjLGwpO3JldHVybiB1P2guYXMzRChoLnNoYXBlWzFdLGguc2hhcGVbMl0saC5zaGFwZVszXSk6aH1mdW5jdGlvbiBsbCh0LGUsbixyLG8sYSl7dmFyIGk9bW4odCxcInhcIixcImF2Z1Bvb2xcIixcImZsb2F0MzJcIik7bnVsbD09ciYmKHI9WzEsMV0pLEMoTW8obixyKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2w6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrcitcIidcIn0pKTt2YXIgcz1pLHU9ITE7Mz09PWkucmFuayYmKHU9ITAscz1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpLEMoND09PXMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2w6IHggbXVzdCBiZSByYW5rIDQgYnV0IGdvdCByYW5rIFwiK3MucmFuaytcIi5cIn0pKSxudWxsIT1hJiZDKEEobyksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIithK1wiIGJ1dCBnb3QgcGFkIFwiK28rXCIuXCJ9KSk7dmFyIGM9SW8ocy5zaGFwZSxlLG4scixvLGEpO2lmKDE9PT1jLmZpbHRlcldpZHRoJiYxPT09Yy5maWx0ZXJIZWlnaHQmJlMoYy5pblNoYXBlLGMub3V0U2hhcGUpKXJldHVybiBpLmNsb25lKCk7dmFyIGw9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuYXZnUG9vbChzLGMpfSkse3g6c30sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2YXIgaT1tbih0LFwiZHlcIixcImF2Z1Bvb2xCYWNrcHJvcFwiKSxzPW1uKGUsXCJpbnB1dFwiLFwiYXZnUG9vbEJhY2twcm9wXCIpO0Mocy5yYW5rPT09aS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiUmFuayBvZiBpbnB1dCAoXCIrcy5yYW5rK1wiKSBkb2VzIG5vdCBtYXRjaCByYW5rIG9mIGR5IChcIitpLnJhbmsrXCIpXCJ9KSksbnVsbD09byYmKG89WzEsMV0pO0MoTW8ocixvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2xCYWNrcHJvcDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrcitcIiBhbmQgZGlsYXRpb25zICdcIitvK1wiJ1wifSkpO3ZhciB1PXMsYz1pLGw9ITE7Mz09PXMucmFuayYmKGw9ITAsdT1zLmFzNEQoMSxzLnNoYXBlWzBdLHMuc2hhcGVbMV0scy5zaGFwZVsyXSksYz1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpO0MoND09PWMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2xCYWNrcHJvcDogZHkgbXVzdCBiZSByYW5rIDQgYnV0IGdvdCByYW5rIFwiK2MucmFuaytcIi5cIn0pKSxDKDQ9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sQmFja3Byb3A6IGlucHV0IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSk7dmFyIGg9SW8odS5zaGFwZSxuLHIsbyxhKSxmPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmF2Z1Bvb2xCYWNrcHJvcChjLHUsaCl9KSx7ZHk0RDpjLGlucHV0NEQ6dX0pO2lmKGwpcmV0dXJuIGYuYXMzRChmLnNoYXBlWzFdLGYuc2hhcGVbMl0sZi5zaGFwZVszXSk7cmV0dXJuIGZ9KHQscyxlLG4scixvKX19fSksXCJBdmdQb29sXCIsYyk7cmV0dXJuIGw9bC5jYXN0KGkuZHR5cGUpLHU/bC5hczNEKGwuc2hhcGVbMV0sbC5zaGFwZVsyXSxsLnNoYXBlWzNdKTpsfXZhciBobD1Bbih7bWF4UG9vbF86ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gY2wodCxlLG4sMSxyLG8pfX0pLGZsPUFuKHthdmdQb29sXzpmdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiBsbCh0LGUsbiwxLHIsbyl9fSksZGw9QW4oe3Bvb2xfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtudWxsPT1vJiYobz1bMSwxXSksbnVsbD09YSYmKGE9MSksMD09PXImJihyPVwidmFsaWRcIik7dmFyIGk9bW4odCxcInhcIixcIm1heFBvb2xcIikscz1pLHU9ITE7Mz09PWkucmFuayYmKHU9ITAscz1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpLEMoTW8oYSxvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHBvb2w6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK2ErXCIgYW5kIGRpbGF0aW9ucyAnXCIrbytcIidcIn0pKTt2YXIgYyxsPUlvKHMuc2hhcGUsZSxhLG8sciksaD1bbC5kaWxhdGlvbkhlaWdodCxsLmRpbGF0aW9uV2lkdGhdO2M9XCJzYW1lXCI9PT1yP2Z1bmN0aW9uKHQsZSl7dmFyIG49dC5tYXAoKGZ1bmN0aW9uKHQsbil7cmV0dXJuIHQrKHQtMSkqKGVbbl0tMSl9KSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC0xfSkpLHI9bi5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLmZsb29yKHQvMil9KSksbz1uLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC1yW2VdfSkpO3JldHVybiBuLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm5bcltlXSxvW2VdXX0pKX0oW2wuZmlsdGVySGVpZ2h0LGwuZmlsdGVyV2lkdGhdLGgpOltbMCwwXSxbMCwwXV07dmFyIGY9MT09PWhbMF0mJjE9PT1oWzFdLGQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW4ubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdFswXX0pKSxvPW4ubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdFsxXX0pKSxhPXQuY29uY2F0KHIsbyksaT1lLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4odC1hW2VdJXQpJXR9KSkscz1vLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtpW2VdfSkpLHU9ZS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuW3JbZV0sc1tlXV19KSksYz1lLm1hcCgoZnVuY3Rpb24odCxlKXtyZXR1cm5bMCxpW2VdXX0pKTtyZXR1cm5bdSxjXX0oW2wuaW5IZWlnaHQsbC5pbldpZHRoXSxoLGMpLHA9ZFswXSx2PWRbMV0sbT1mP3I6XCJ2YWxpZFwiLGc9Zj9zOk1yKHMsaCxwKSx5PShcImF2Z1wiPT09bj9mdW5jdGlvbigpe3JldHVybiBsbChnLGUsYSwxLG0pfTpmdW5jdGlvbigpe3JldHVybiBjbChnLGUsYSwxLG0pfSkoKSx4PWY/eTp2cih5LGgsdik7cmV0dXJuIHU/eC5hczNEKHguc2hhcGVbMV0seC5zaGFwZVsyXSx4LnNoYXBlWzNdKTp4fX0pLHBsPUFuKHttYXhQb29sM2RfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWEmJihhPVwiTkRIV0NcIik7dmFyIHM9bW4odCxcInhcIixcIm1heFBvb2wzZFwiKSx1PXMsYz0hMTs0PT09cy5yYW5rJiYoYz0hMCx1PXMuYXM1RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdLHMuc2hhcGVbM10pKSxudWxsPT1pJiYoaT1bMSwxLDFdKSxDKDU9PT11LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sM2Q6IHggbXVzdCBiZSByYW5rIDUgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pKSxDKFwiTkRIV0NcIj09PWEsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sM2Q6IE9ubHkgTkRIV0MgaXMgY3VycmVudGx5IHN1cHBvcnRlZCwgYnV0IGdvdCBkYXRhRm9ybWF0IG9mIFwiK2F9KSksQyhNbyhuLGkpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIituK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK2krXCInXCJ9KSksbnVsbCE9byYmQyhBKHIpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitvK1wiIGJ1dCBnb3QgcGFkIFwiK3IrXCIuXCJ9KSk7dmFyIGw9a28odS5zaGFwZSxlLG4saSxyLG8sYSksaD1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWF4UG9vbDNkKHUsbCk7cmV0dXJuIGUoW3Usbl0pLG59KSx7eDp1fSwoZnVuY3Rpb24odCxhKXt2YXIgcz1hWzBdLHU9YVsxXTtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8sYSxpLHMpe3ZhciB1PW1uKHQsXCJkeVwiLFwibWF4UG9vbDNkQmFja3Byb3BcIiksYz1tbihlLFwiaW5wdXRcIixcIm1heFBvb2wzZEJhY2twcm9wXCIpLGw9bW4obixcIm91dHB1dFwiLFwibWF4UG9vbDNkQmFja3Byb3BcIiksaD11LGY9YyxkPWwscD0hMTs0PT09Yy5yYW5rJiYocD0hMCxoPXUuYXM1RCgxLHUuc2hhcGVbMF0sdS5zaGFwZVsxXSx1LnNoYXBlWzJdLHUuc2hhcGVbM10pLGY9Yy5hczVEKDEsYy5zaGFwZVswXSxjLnNoYXBlWzFdLGMuc2hhcGVbMl0sYy5zaGFwZVszXSksZD1sLmFzNUQoMSxsLnNoYXBlWzBdLGwuc2hhcGVbMV0sbC5zaGFwZVsyXSxsLnNoYXBlWzNdKSk7Qyg1PT09aC5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IGR5IG11c3QgYmUgcmFuayA1IGJ1dCBnb3QgcmFuayBcIitoLnJhbmsrXCIuXCJ9KSksQyg1PT09Zi5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IGlucHV0IG11c3QgYmUgcmFuayA1IGJ1dCBnb3QgcmFuayBcIitmLnJhbmsrXCIuXCJ9KSksQyg1PT09ZC5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IG91dHB1dCBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrZC5yYW5rK1wiLlwifSkpLG51bGw9PWEmJihhPVsxLDEsMV0pO0MoTW8obyxhKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2wzZEJhY2twcm9wOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIitvK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK2ErXCInXCJ9KSksbnVsbCE9cyYmQyhBKGkpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK3MrXCIgYnV0IGdvdCBwYWQgXCIraStcIi5cIn0pKTt2YXIgdj1rbyhmLnNoYXBlLHIsbyxhLGkscyksbT1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5tYXhQb29sM2RCYWNrcHJvcChoLGYsZCx2KX0pLHtkeTVEOmgsaW5wdXQ1RDpmfSk7aWYocClyZXR1cm4gbS5hczREKG0uc2hhcGVbMV0sbS5zaGFwZVsyXSxtLnNoYXBlWzNdLG0uc2hhcGVbNF0pO3JldHVybiBtfSh0LHMsdSxlLG4saSxyLG8pfX19KSk7cmV0dXJuIGM/aC5hczREKGguc2hhcGVbMV0saC5zaGFwZVsyXSxoLnNoYXBlWzNdLGguc2hhcGVbNF0pOmh9fSksdmw9QW4oe2F2Z1Bvb2wzZF86ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09YSYmKGE9XCJOREhXQ1wiKTt2YXIgcz1tbih0LFwieFwiLFwiYXZnUG9vbDNkXCIsXCJmbG9hdDMyXCIpLHU9cyxjPSExOzQ9PT1zLnJhbmsmJihjPSEwLHU9cy5hczVEKDEscy5zaGFwZVswXSxzLnNoYXBlWzFdLHMuc2hhcGVbMl0scy5zaGFwZVszXSkpLG51bGw9PWkmJihpPVsxLDEsMV0pLEMoNT09PXUucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZDogeCBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSkpLEMoXCJOREhXQ1wiPT09YSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZDogT25seSBOREhXQyBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLCBidXQgZ290IGRhdGFGb3JtYXQgb2YgXCIrYX0pKSxDKE1vKG4saSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sM2Q6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIraStcIidcIn0pKSxudWxsIT1vJiZDKEEociksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sM2Q6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK28rXCIgYnV0IGdvdCBwYWQgXCIrcitcIi5cIn0pKTt2YXIgbD1rbyh1LnNoYXBlLGUsbixpLHIsbyxhKSxoPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmF2Z1Bvb2wzZCh1LGwpfSkse3g6dX0sKGZ1bmN0aW9uKHQpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZhciBzPW1uKHQsXCJkeVwiLFwiYXZnUG9vbDNkQmFja3Byb3BcIiksdT1tbihlLFwiaW5wdXRcIixcImF2Z1Bvb2wzZEJhY2twcm9wXCIpLGM9cyxsPXUsaD0hMTs0PT09dS5yYW5rJiYoaD0hMCxjPXMuYXM1RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdLHMuc2hhcGVbM10pLGw9dS5hczVEKDEsdS5zaGFwZVswXSx1LnNoYXBlWzFdLHUuc2hhcGVbMl0sdS5zaGFwZVszXSkpO0MoNT09PWMucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZEJhY2twcm9wOiBkeSBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrYy5yYW5rK1wiLlwifSkpLEMoNT09PWwucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZEJhY2twcm9wOiBpbnB1dCBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSkpLG51bGw9PW8mJihvPVsxLDEsMV0pO0MoTW8ocixvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZEJhY2twcm9wOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIityK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK28rXCInXCJ9KSksbnVsbCE9aSYmQyhBKGEpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK2krXCIgYnV0IGdvdCBwYWQgXCIrYStcIi5cIn0pKTt2YXIgZj1rbyhsLnNoYXBlLG4scixvLGEsaSksZD1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5hdmdQb29sM2RCYWNrcHJvcChjLGwsZil9KSx7ZHk1RDpjLGlucHV0NUQ6bH0pO2lmKGgpcmV0dXJuIGQuYXM0RChkLnNoYXBlWzFdLGQuc2hhcGVbMl0sZC5zaGFwZVszXSxkLnNoYXBlWzRdKTtyZXR1cm4gZH0odCx1LGUsbixpLHIsbyl9fX0pKTtyZXR1cm4gaD1oLmNhc3QodS5kdHlwZSksYz9oLmFzNEQoaC5zaGFwZVsxXSxoLnNoYXBlWzJdLGguc2hhcGVbM10saC5zaGFwZVs0XSk6aH19KTt2YXIgbWw9QW4oe3NsaWNlXzpmdW5jdGlvbih0LGUsbil7dmFyIHIsbyxhPW1uKHQsXCJ4XCIsXCJzbGljZVwiKTtpZigwPT09YS5yYW5rKXRocm93IG5ldyBFcnJvcihcIlNsaWNpbmcgc2NhbGFyIGlzIG5vdCBwb3NzaWJsZVwiKTsocj1cIm51bWJlclwiPT10eXBlb2YgZT9bZV0uY29uY2F0KG5ldyBBcnJheShhLnJhbmstMSkuZmlsbCgwKSk6ZS5sZW5ndGg8YS5yYW5rP2UuY29uY2F0KG5ldyBBcnJheShhLnJhbmstZS5sZW5ndGgpLmZpbGwoMCkpOmUuc2xpY2UoKSkuZm9yRWFjaCgoZnVuY3Rpb24odCl7QygtMSE9PXQsKGZ1bmN0aW9uKCl7cmV0dXJuXCJzbGljZSgpIGRvZXMgbm90IHN1cHBvcnQgbmVnYXRpdmUgYmVnaW4gaW5kZXhpbmcuXCJ9KSl9KSksbz0obz1udWxsPT1uP25ldyBBcnJheShhLnJhbmspLmZpbGwoLTEpOlwibnVtYmVyXCI9PXR5cGVvZiBuP1tuXS5jb25jYXQobmV3IEFycmF5KGEucmFuay0xKS5maWxsKC0xKSk6bi5sZW5ndGg8YS5yYW5rP24uY29uY2F0KG5ldyBBcnJheShhLnJhbmstbi5sZW5ndGgpLmZpbGwoLTEpKTpuKS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ+PTA/dDooQygtMT09PXQsKGZ1bmN0aW9uKCl7cmV0dXJuXCJOZWdhdGl2ZSBzaXplIHZhbHVlcyBzaG91bGQgYmUgZXhhY3RseSAtMSBidXQgZ290IFwiK3QrXCIgZm9yIHRoZSBzbGljZSgpIHNpemUgYXQgaW5kZXggXCIrZStcIi5cIn0pKSxhLnNoYXBlW2VdLXJbZV0pfSkpLGVvKGEscixvKTt2YXIgaT1hLnNoYXBlLHM9e2JlZ2luOnIsc2l6ZTpvfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2xpY2UoYSxyLG8pfSkse3g6YX0sKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0LnJhbms7bisrKWUucHVzaChbcltuXSxpW25dLXJbbl0tb1tuXV0pO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQucGFkKGUpfX19KSxcIlNsaWNlXCIscyl9fSksZ2w9QW4oe3NsaWNlMWRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1tbih0LFwieFwiLFwic2xpY2UxZFwiKTtyZXR1cm4gQygxPT09ci5yYW5rLChmdW5jdGlvbigpe3JldHVyblwic2xpY2UxZCBleHBlY3RzIGEgcmFuay0xIHRlbnNvciwgYnV0IGdvdCBhIHJhbmstXCIrci5yYW5rK1wiIHRlbnNvclwifSkpLG1sKHIsW2VdLFtuXSl9fSkseWw9QW4oe3NsaWNlMmRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1tbih0LFwieFwiLFwic2xpY2UyZFwiKTtyZXR1cm4gQygyPT09ci5yYW5rLChmdW5jdGlvbigpe3JldHVyblwic2xpY2UyZCBleHBlY3RzIGEgcmFuay0yIHRlbnNvciwgYnV0IGdvdCBhIHJhbmstXCIrci5yYW5rK1wiIHRlbnNvclwifSkpLG1sKHIsZSxuKX19KSx4bD1Bbih7c2xpY2UzZF86ZnVuY3Rpb24odCxlLG4pe3ZhciByPW1uKHQsXCJ4XCIsXCJzbGljZTNkXCIpO3JldHVybiBDKDM9PT1yLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJzbGljZTNkIGV4cGVjdHMgYSByYW5rLTMgdGVuc29yLCBidXQgZ290IGEgcmFuay1cIityLnJhbmsrXCIgdGVuc29yXCJ9KSksbWwocixlLG4pfX0pLGJsPUFuKHtzbGljZTRkXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcInhcIixcInNsaWNlNGRcIik7cmV0dXJuIEMoND09PXIucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cInNsaWNlNGQgZXhwZWN0cyBhIHJhbmstNCB0ZW5zb3IsIGJ1dCBnb3QgYSByYW5rLVwiK3IucmFuaytcIiB0ZW5zb3JcIn0pKSxtbChyLGUsbil9fSk7ZnVuY3Rpb24gd2wodCxlLG4scixvKXtyZXR1cm4gZS5yYW5rPG4ucmFuayYmKGU9ZS5yZXNoYXBlKHduKGUuc2hhcGUscikpKSx0LnJhbms8bi5yYW5rJiYodD10LnJlc2hhcGUod24odC5zaGFwZSxyKSkpLHt4OmZ1bmN0aW9uKCl7dmFyIHI9dC5tdWwobi5lcXVhbChlKS5jYXN0KHQuZHR5cGUpKTtyZXR1cm4gbnVsbD09bz9yOnIudHJhbnNwb3NlKG8pfX19dmFyIENsPUFuKHthbGxfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bW4odCxcInhcIixcImFsbFwiLFwiYm9vbFwiKSxvPU8oZSxyLnNoYXBlKSxhPW8saT1FbihhLHIucmFuayk7bnVsbCE9aSYmKHI9ci50cmFuc3Bvc2UoaSksYT1JbihhLmxlbmd0aCxyLnJhbmspKTt2YXIgcz1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5hbGwocixhKX0pLHskeDpyfSk7aWYobil7dmFyIHU9d24ocy5zaGFwZSxvKTtyZXR1cm4gcy5yZXNoYXBlKHUpfXJldHVybiBzfX0pLEVsPUFuKHthbnlfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bW4odCxcInhcIixcImFueVwiLFwiYm9vbFwiKSxvPU8oZSxyLnNoYXBlKSxhPW8saT1FbihhLHIucmFuayk7bnVsbCE9aSYmKHI9ci50cmFuc3Bvc2UoaSksYT1JbihhLmxlbmd0aCxyLnJhbmspKTt2YXIgcz1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5hbnkocixhKX0pLHskeDpyfSk7aWYobil7dmFyIHU9d24ocy5zaGFwZSxvKTtyZXR1cm4gcy5yZXNoYXBlKHUpfXJldHVybiBzfX0pLFJsPUFuKHthcmdNYXhfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCk7dmFyIG49bW4odCxcInhcIixcImFyZ01heFwiKTtudWxsPT1lJiYoZT0wKTt2YXIgcj1PKGUsbi5zaGFwZSksbz1FbihyLG4ucmFuayk7bnVsbCE9byYmKG49bi50cmFuc3Bvc2Uobykscj1JbihyLmxlbmd0aCxuLnJhbmspKTt2YXIgYT17YXhpczpyWzBdfSxpPVtuXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbz10LmFyZ01heChuLHJbMF0pO3JldHVybiBlKFtuXSksb30pLHt4Om59LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gWG4obil9fX0pLFwiQXJnTWF4XCIsYSxpKX19KSxJbD1Bbih7YXJnTWluXzpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPTApO3ZhciBuPW1uKHQsXCJ4XCIsXCJhcmdNaW5cIik7bnVsbD09ZSYmKGU9MCk7dmFyIHI9TyhlLG4uc2hhcGUpLG89RW4ocixuLnJhbmspO3JldHVybiBudWxsIT1vJiYobj1uLnRyYW5zcG9zZShvKSxyPUluKHIubGVuZ3RoLG4ucmFuaykpLEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG89dC5hcmdNaW4obixyWzBdKTtyZXR1cm4gZShbbl0pLG99KSx7JHg6bn0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gWG4obil9fX0pKX19KSxrbD1Bbih7bG9nU3VtRXhwXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPW1uKHQsXCJ4XCIsXCJsb2dTdW1FeHBcIiksbz1PKGUsci5zaGFwZSksYT1yLm1heChvLCEwKSxpPXIuc3ViKGEpLmV4cCgpLnN1bShvKS5sb2coKSxzPWEucmVzaGFwZShpLnNoYXBlKS5hZGQoaSk7aWYobil7dmFyIHU9d24ocy5zaGFwZSxvKTtyZXR1cm4gcy5yZXNoYXBlKHUpfXJldHVybiBzfX0pLFNsPUFuKHttYXhfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bW4odCxcInhcIixcIm1heFwiKSxvPXIsYT1PKGUsci5zaGFwZSksaT1hLHM9RW4oaSxyLnJhbmspO251bGwhPXMmJihyPXIudHJhbnNwb3NlKHMpLGk9SW4oaS5sZW5ndGgsci5yYW5rKSk7dmFyIHU9W3JdLGM9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1heChyLGkpO3JldHVybiBlKFtvLG5dKSxufSkse3g6cn0sKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHdsKHQsZVsxXSxlWzBdLGEscyl9KSxcIk1heFwiLHtheGVzOml9LHUsWyEwXSk7aWYobil7dmFyIGw9d24oYy5zaGFwZSxhKTtjPWMucmVzaGFwZShsKX1yZXR1cm4gY319KSxBbD1Bbih7bWVhbl86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1tbih0LFwieFwiLFwibWVhblwiKSxvPU8oZSxyLnNoYXBlKSxhPWsoYm4oci5zaGFwZSxvKVsxXSk7cmV0dXJuIHZvKChmdW5jdGlvbih0KXt2YXIgcj1PbihhKTtyZXR1cm57dmFsdWU6KHIuZHR5cGU9PT10LmR0eXBlP3Q6dC5jYXN0KHIuZHR5cGUpKS5kaXYocikuc3VtKGUsbiksZ3JhZEZ1bmM6ZnVuY3Rpb24oZSl7dmFyIG49dC5zaGFwZS5zbGljZSgpO3JldHVybiBvLmZvckVhY2goKGZ1bmN0aW9uKHQpe25bdF09MX0pKSxlLnJlc2hhcGUobikubXVsKHpuKHQuc2hhcGUsXCJmbG9hdDMyXCIpKS5kaXYoYSl9fX0pKShyKX19KSxEbD1Bbih7bWluXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPW1uKHQsXCJ4XCIsXCJtaW5cIiksbz1yLGE9TyhlLHIuc2hhcGUpLGk9YSxzPUVuKGksci5yYW5rKTtudWxsIT1zJiYocj1yLnRyYW5zcG9zZShzKSxpPUluKGkubGVuZ3RoLHIucmFuaykpO3ZhciB1PVtyXSxjPUx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5taW4ocixpKTtyZXR1cm4gZShbbyxuXSksbn0pLHt4OnJ9LChmdW5jdGlvbih0LGUpe3JldHVybiB3bCh0LGVbMV0sZVswXSxhLHMpfSksXCJNaW5cIix7YXhlczppfSx1LFshMF0pO2lmKG4pe3ZhciBsPXduKGMuc2hhcGUsYSk7Yz1jLnJlc2hhcGUobCl9cmV0dXJuIGN9fSksVGw9QW4oe21vbWVudHNfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9TyhlLCh0PW1uKHQsXCJ4XCIsXCJtb21lbnRzXCIpKS5zaGFwZSksbz10Lm1lYW4ocixuKSxhPW8uc2hhcGU7bnx8KGE9d24oby5zaGFwZSxyKSk7dmFyIGk9dC50b0Zsb2F0KCkuc3ViKG8ucmVzaGFwZShhKSkuc3F1YXJlKCk7cmV0dXJue21lYW46byx2YXJpYW5jZTppLm1lYW4ocixuKX19fSksTmw9QW4oe3N1bV86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1tbih0LFwieFwiLFwic3VtXCIpO1wiYm9vbFwiPT09ci5kdHlwZSYmKHI9ci50b0ludCgpKTt2YXIgbz1PKGUsci5zaGFwZSk7cmV0dXJuIHZvKChmdW5jdGlvbih0KXt2YXIgZT1FbihvLHQucmFuaykscj1vLGE9dDtudWxsIT1lJiYoYT10LnRyYW5zcG9zZShlKSxyPUluKHIubGVuZ3RoLHQucmFuaykpO3ZhciBpPWZ1bmN0aW9uKGUpe3ZhciBuPXQuc2hhcGUuc2xpY2UoKTtyZXR1cm4gby5mb3JFYWNoKChmdW5jdGlvbih0KXtuW3RdPTF9KSksZS5yZXNoYXBlKG4pLm11bCh6bih0LnNoYXBlLFwiZmxvYXQzMlwiKSl9LHM9e2F4ZXM6cn0sdT1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zdW0oYSxyKX0pLHt4OmF9LChmdW5jdGlvbih0KXtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiBpKHQpfX19KSxcIlN1bVwiLHMpO2lmKG4pe3ZhciBjPXduKHUuc2hhcGUsbyk7dT11LnJlc2hhcGUoYyl9cmV0dXJue3ZhbHVlOnUsZ3JhZEZ1bmM6aX19KSkocil9fSksRmw9QW4oe3Byb2RfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bW4odCxcInhcIixcInByb2RcIik7XCJib29sXCI9PT1yLmR0eXBlJiYocj1yLnRvSW50KCkpO3ZhciBvPU8oZSxyLnNoYXBlKSxhPUVuKG8sci5yYW5rKSxpPW8scz1yO251bGwhPWEmJihzPXIudHJhbnNwb3NlKGEpLGk9SW4oaS5sZW5ndGgsci5yYW5rKSk7dmFyIHU9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQucHJvZChzLGkpfSkse3Blcm11dGVkWDpzfSk7aWYobil7dmFyIGM9d24odS5zaGFwZSxvKTt1PXUucmVzaGFwZShjKX1yZXR1cm4gdX19KTt2YXIgX2w9QW4oe2VsdV86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImVsdVwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LmVsdShlKTtyZXR1cm4gbihbcl0pLHJ9KSx7JHg6ZX0sKGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZWx1RGVyKHQsbil9KSx7ZHk6dCx5Om59KX19fSkpfX0pLE9sPUFuKHtsZWFreVJlbHVfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9LjIpO3ZhciBuPW1uKHQsXCJ4XCIsXCJsZWFreVJlbHVcIik7cmV0dXJuIGhjKE9uKGUpLm11bChuKSxuKX19KSxNbD1Bbih7cHJlbHVfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bW4odCxcInhcIixcInByZWx1XCIpLHI9bW4oZSxcImFscGhhXCIsXCJwcmVsdVwiKTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbz10LnByZWx1KG4scik7cmV0dXJuIGUoW24scl0pLG99KSx7eDpuLGFscGhhOnJ9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLG89bi5ncmVhdGVyKDApO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGVjKG8sdCx0Lm11bChyKSl9LGFscGhhOmZ1bmN0aW9uKCl7dmFyIGU9ZWMobyxYbih0KSx0Lm11bChuKSksYT1FbyhyLnNoYXBlLHQuc2hhcGUpO3JldHVybiBhLmxlbmd0aD4wJiYoZT1lLnN1bShhKSksZS5yZXNoYXBlKHIuc2hhcGUpfX19KSxcIlByZWx1XCIpfX0pLEJsPUFuKHtyZWx1XzpmdW5jdGlvbih0KXt2YXIgZT1tbih0LFwieFwiLFwicmVsdVwiKTtyZXR1cm5cImJvb2xcIj09PWUuZHR5cGU/ZS50b0ludCgpOkx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5yZWx1KGUpO3JldHVybiBuKFtlXSkscn0pLHt4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWxTdHJpY3Qobi5zdGVwKCkudG9GbG9hdCgpKX19fSksXCJSZWx1XCIpfX0pLFBsPUFuKHtyZWx1Nl86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInJlbHU2XCIpO3JldHVyblwiYm9vbFwiPT09ZS5kdHlwZT9lLnRvSW50KCk6THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxuKXt2YXIgcj10LnJlbHU2KGUpO3JldHVybiBuKFtlXSkscn0pLHt4OmV9LChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1uLmxlc3NFcXVhbCg2KS5tdWwobi5zdGVwKCkpO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsU3RyaWN0KHIudG9GbG9hdCgpKX19fSksXCJSZWx1NlwiKX19KSxMbD1Bbih7c2VsdV86ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcInNlbHVcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zZWx1KGUpO3JldHVybiBuKFtlXSkscn0pLHskeDplfSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3ZhciBlPW4uZ3JlYXRlcihPbigwKSkscj1Pbihicyksbz1Pbih3cyksYT10Lm11bChvKSxpPXQubXVsKHIpLm11bChuLnRvRmxvYXQoKS5leHAoKSk7cmV0dXJuIGVjKGUsYSxpKX19fSkpfX0pO3ZhciBXbD1Bbih7dHJhbnNwb3NlXzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKHQsXCJ4XCIsXCJ0cmFuc3Bvc2VcIik7aWYobnVsbD09ZSYmKGU9bi5zaGFwZS5tYXAoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV9KSkucmV2ZXJzZSgpKSxDKG4ucmFuaz09PWUubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gdHJhbnNwb3NlOiByYW5rIG9mIGlucHV0IFwiK24ucmFuaytcIiBtdXN0IG1hdGNoIGxlbmd0aCBvZiBwZXJtIFwiK2UrXCIuXCJ9KSksZS5mb3JFYWNoKChmdW5jdGlvbih0KXtDKHQ+PTAmJnQ8bi5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiQWxsIGVudHJpZXMgaW4gJ3Blcm0nIG11c3QgYmUgYmV0d2VlbiAwIGFuZCBcIisobi5yYW5rLTEpK1wiIGJ1dCBnb3QgXCIrZX0pKX0pKSxuLnJhbms8PTEpcmV0dXJuIG4uY2xvbmUoKTt2YXIgcj17cGVybTplfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQudHJhbnNwb3NlKG4sZSl9KSx7eDpufSwoZnVuY3Rpb24odCl7dmFyIG49Um4oZSk7cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC50cmFuc3Bvc2Uobil9fX0pLFwiVHJhbnNwb3NlXCIscil9fSk7dmFyIFVsPUFuKHtsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbl86ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1lJiYoZT01KSx2b2lkIDA9PT1uJiYobj0xKSx2b2lkIDA9PT1yJiYocj0xKSx2b2lkIDA9PT1vJiYobz0uNSk7dmFyIGE9bW4odCxcInhcIixcImxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uXCIpO0MoND09PWEucmFua3x8Mz09PWEucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uOiB4IG11c3QgYmUgcmFuayAzIG9yIDQgYnV0IGdvdFxcbiAgICAgICAgICAgICAgIHJhbmsgXCIrYS5yYW5rK1wiLlwifSkpLEMoQShlKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uOiBkZXB0aFJhZGl1cyBtdXN0IGJlIGFuIGludGVnZXIgYnV0IGdvdCBkZXB0aFJhZGl1cyBcIitlK1wiLlwifSkpO3ZhciBpPWEscz0hMTszPT09YS5yYW5rJiYocz0hMCxpPWEuYXM0RCgxLGEuc2hhcGVbMF0sYS5zaGFwZVsxXSxhLnNoYXBlWzJdKSk7dmFyIHU9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxhKXt2YXIgcz10LmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uNEQoaSxlLG4scixvKTtyZXR1cm4gYShbaSxzXSksc30pLHt4NEQ6aX0sKGZ1bmN0aW9uKHQsYSl7dmFyIGk9YVswXSxzPWFbMV07cmV0dXJue3g0RDpmdW5jdGlvbigpe3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbihhKXtyZXR1cm4gYS5MUk5HcmFkKHQsaSxzLGUsbixyLG8pfSkse30pfX19KSk7cmV0dXJuIHM/dS5hczNEKHUuc2hhcGVbMV0sdS5zaGFwZVsyXSx1LnNoYXBlWzNdKTp1fX0pO3ZhciBWbD1Bbih7bm9ybV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ZSYmKGU9XCJldWNsaWRlYW5cIiksdm9pZCAwPT09biYmKG49bnVsbCksdm9pZCAwPT09ciYmKHI9ITEpO3ZhciBvPWZ1bmN0aW9uIHQoZSxuLHIpe3ZvaWQgMD09PXImJihyPW51bGwpO2lmKDA9PT1lLnJhbmspcmV0dXJuIGUuYWJzKCk7aWYoMSE9PWUucmFuayYmbnVsbD09PXIpcmV0dXJuIHQoZS5yZXNoYXBlKFstMV0pLG4scik7aWYoMT09PWUucmFua3x8XCJudW1iZXJcIj09dHlwZW9mIHJ8fEFycmF5LmlzQXJyYXkocikmJjE9PT1yLmxlbmd0aCl7aWYoMT09PW4pcmV0dXJuIGUuYWJzKCkuc3VtKHIpO2lmKG49PT0xLzApcmV0dXJuIGUuYWJzKCkubWF4KHIpO2lmKG49PT0tMS8wKXJldHVybiBlLmFicygpLm1pbihyKTtpZihcImV1Y2xpZGVhblwiPT09bnx8Mj09PW4pcmV0dXJuIGUuYWJzKCkucG93KE9uKDIsXCJpbnQzMlwiKSkuc3VtKHIpLnNxcnQoKTt0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiBub3JtOiBpbnZhbGlkIG9yZCB2YWx1ZTogXCIrbil9aWYoQXJyYXkuaXNBcnJheShyKSYmMj09PXIubGVuZ3RoKXtpZigxPT09bilyZXR1cm4gZS5hYnMoKS5zdW0oclswXSkubWF4KHJbMV0tMSk7aWYobj09PTEvMClyZXR1cm4gZS5hYnMoKS5zdW0oclsxXSkubWF4KHJbMF0pO2lmKG49PT0tMS8wKXJldHVybiBlLmFicygpLnN1bShyWzFdKS5taW4oclswXSk7aWYoXCJmcm9cIj09PW58fFwiZXVjbGlkZWFuXCI9PT1uKXJldHVybiBlLnNxdWFyZSgpLnN1bShyKS5zcXJ0KCk7dGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgaW4gbm9ybTogaW52YWxpZCBvcmQgdmFsdWU6IFwiK24pfXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG5vcm06IGludmFsaWQgYXhpczogXCIrcil9KHQ9bW4odCxcInhcIixcIm5vcm1cIiksZSxuKSxhPW8uc2hhcGU7aWYocil7dmFyIGk9TyhuLHQuc2hhcGUpO2E9d24oby5zaGFwZSxpKX1yZXR1cm4gby5yZXNoYXBlKGEpfX0pO3ZhciB6bD1Bbih7YmFzaWNMU1RNQ2VsbF86ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPW1uKHQsXCJmb3JnZXRCaWFzXCIsXCJiYXNpY0xTVE1DZWxsXCIpLHM9bW4oZSxcImxzdG1LZXJuZWxcIixcImJhc2ljTFNUTUNlbGxcIiksdT1tbihuLFwibHN0bUJpYXNcIixcImJhc2ljTFNUTUNlbGxcIiksYz1tbihyLFwiZGF0YVwiLFwiYmFzaWNMU1RNQ2VsbFwiKSxsPW1uKG8sXCJjXCIsXCJiYXNpY0xTVE1DZWxsXCIpLGg9bW4oYSxcImhcIixcImJhc2ljTFNUTUNlbGxcIiksZj1jLmNvbmNhdChoLDEpLm1hdE11bChzKS5hZGQodSksZD1mLnNoYXBlWzBdLHA9Zi5zaGFwZVsxXS80LHY9W2QscF0sbT1mLnNsaWNlKFswLDBdLHYpLGc9Zi5zbGljZShbMCxwXSx2KSx5PWYuc2xpY2UoWzAsMipwXSx2KSx4PWYuc2xpY2UoWzAsMypwXSx2KSxiPW0uc2lnbW9pZCgpLm11bFN0cmljdChnLnRhbmgoKSkuYWRkU3RyaWN0KGwubXVsU3RyaWN0KGkuYWRkKHkpLnNpZ21vaWQoKSkpLHc9Yi50YW5oKCkubXVsU3RyaWN0KHguc2lnbW9pZCgpKTtyZXR1cm5bYix3XX19KSxHbD1Bbih7bXVsdGlSTk5DZWxsXzpmdW5jdGlvbih0LGUsbixyKXtmb3IodmFyIG89bW4oZSxcImRhdGFcIixcIm11bHRpUk5OQ2VsbFwiKSxhPWduKG4sXCJjXCIsXCJtdWx0aVJOTkNlbGxcIiksaT1nbihyLFwiaFwiLFwibXVsdGlSTk5DZWxsXCIpLHM9byx1PVtdLGM9MDtjPHQubGVuZ3RoO2MrKyl7dmFyIGw9dFtjXShzLGFbY10saVtjXSk7dS5wdXNoKGxbMF0pLHUucHVzaChsWzFdKSxzPWxbMV19dmFyIGg9W10sZj1bXTtmb3IoYz0wO2M8dS5sZW5ndGg7Yys9MiloLnB1c2godVtjXSksZi5wdXNoKHVbYysxXSk7cmV0dXJuW2gsZl19fSk7dmFyIEhsPUFuKHttb3ZpbmdBdmVyYWdlXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PW8mJihvPSEwKTt2YXIgYT1tbih0LFwidlwiLFwibW92aW5nQXZlcmFnZVwiKSxpPW1uKGUsXCJ4XCIsXCJtb3ZpbmdBdmVyYWdlXCIpLHM9bW4obixcImRlY2F5XCIsXCJtb3ZpbmdBdmVyYWdlXCIpO0Z0KGEsaSksQyhTKGEuc2hhcGUsaS5zaGFwZSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJTaGFwZSBtaXNtYXRjaCBpbiB2IGFuZCB4XCJ9KSk7dmFyIHU9T24oMSksYz11LnN1YihzKSxsPWkuc3ViKGEpLm11bChjKTtpZihvKXtDKG51bGwhPXIsKGZ1bmN0aW9uKCl7cmV0dXJuXCJXaGVuIHVzaW5nIHplcm9EZWJpYXM6IHRydWUsIHN0ZXAgaXMgcmVxdWlyZWQuXCJ9KSk7dmFyIGg9bW4ocixcInN0ZXBcIixcIm1vdmluZ0F2ZXJhZ2VcIik7bD1sLmRpdih1LnN1Yih4YyhzLGgpKSl9cmV0dXJuIGEuYWRkKGwpfX0pO3ZhciBxbD1Bbih7c3RyaWRlZFNsaWNlXzpmdW5jdGlvbih0LGUsbixyLG8sYSxpLHMsdSl7aWYodm9pZCAwPT09byYmKG89MCksdm9pZCAwPT09YSYmKGE9MCksdm9pZCAwPT09aSYmKGk9MCksdm9pZCAwPT09cyYmKHM9MCksdm9pZCAwPT09dSYmKHU9MCksbnVsbD09ciYmKHI9bmV3IEFycmF5KGUubGVuZ3RoKSksMCE9PWkpdGhyb3cgbmV3IEVycm9yKFwiZWxsaXBzaXMgbWFzayBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTt2YXIgYz1tbih0LFwieFwiLFwic3RyaWRlZFNsaWNlXCIpLGw9bm8ocyksaD1jLnNoYXBlLnNsaWNlKCk7bC5mb3JFYWNoKChmdW5jdGlvbih0KXtlW3RdPTAsblt0XT0xLGguc3BsaWNlKHQsMCwxKX0pKSxjPWMucmVzaGFwZShoKTtmb3IodmFyIGY9MDtmPGMucmFuaztmKyspZVtmXT1vbyhvLGUscixjLnNoYXBlLGYpLG5bZl09YW8oYSxuLHIsYy5zaGFwZSxmKSxyW2ZdPXJbZl18fDE7dmFyIGQ9bm8odSk7ZC5mb3JFYWNoKChmdW5jdGlvbih0KXtuW3RdPWVbdF0rMSxyW3RdPTF9KSk7dmFyIHA9cm8oZSxuLHIpLHY9cC5maWx0ZXIoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuLTE9PT1kLmluZGV4T2YoZSl9KSk7cmV0dXJuIHIuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiAxPT09dH0pKT9tbChjLGUscCkucmVzaGFwZSh2KTpMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5zdHJpZGVkU2xpY2UoYyxlLG4scil9KSx7JHg6Y30pLnJlc2hhcGUodil9fSk7dmFyIEtsPUFuKHt0b3BrXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9MSksdm9pZCAwPT09biYmKG49ITApO3ZhciByPW1uKHQsXCJ4XCIsXCJ0b3BrXCIpO2lmKDA9PT1yLnJhbmspdGhyb3cgbmV3IEVycm9yKFwidG9waygpIGV4cGVjdHMgdGhlIGlucHV0IHRvIGJlIG9mIHJhbmsgMSBvciBoaWdoZXJcIik7dmFyIG89ci5zaGFwZVtyLnNoYXBlLmxlbmd0aC0xXTtpZihlPm8pdGhyb3cgbmV3IEVycm9yKFwiJ2snIHBhc3NlZCB0byB0b3BrKCkgbXVzdCBiZSA8PSB0aGUgbGFzdCBkaW1lbnNpb24gKFwiK28rXCIpIGJ1dCBnb3QgXCIrZSk7dmFyIGE9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQudG9wayhyLGUsbil9KSx7JHg6cn0pO3JldHVybnt2YWx1ZXM6YVswXSxpbmRpY2VzOmFbMV19fX0pO3ZhciBqbD1Bbih7c2NhdHRlck5EXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcImluZGljZXNcIixcInNjYXR0ZXJORFwiLFwiaW50MzJcIiksbz1tbihlLFwidXBkYXRlc1wiLFwic2NhdHRlck5EXCIpO3JldHVybiBKcihvLHIsbiksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2NhdHRlck5EKHIsbyxuKX0pLHtpbmRpY2VzOnIsdXBkYXRlczpvfSxudWxsLFwiU2NhdHRlck5kXCIse3NoYXBlOm59KX19KTt2YXIgWGw9QW4oe2ZmdF86ZnVuY3Rpb24odCl7QyhcImNvbXBsZXg2NFwiPT09dC5kdHlwZSwoZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBkdHlwZSBmb3IgdGYuc3BlY3RyYWwuZmZ0KCkgbXVzdCBiZSBjb21wbGV4NjQgYnV0IGdvdCBcIit0LmR0eXBlK1wiLlwifSkpO3ZhciBlPXQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMV0sbj10LnNpemUvZSxyPXQuYXMyRChuLGUpO3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0KXtyZXR1cm4gdC5mZnQocil9KSx7aW5wdXQ6dH0pLnJlc2hhcGUodC5zaGFwZSl9fSksWWw9QW4oe2lmZnRfOmZ1bmN0aW9uKHQpe0MoXCJjb21wbGV4NjRcIj09PXQuZHR5cGUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHR5cGUgZm9yIHRmLnNwZWN0cmFsLmlmZnQoKSBtdXN0IGJlIGNvbXBsZXg2NCBidXQgZ290IFwiK3QuZHR5cGUrXCIuXCJ9KSk7dmFyIGU9dC5zaGFwZVt0LnNoYXBlLmxlbmd0aC0xXSxuPXQuc2l6ZS9lLHI9dC5hczJEKG4sZSk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlmZnQocil9KSx7aW5wdXQ6dH0pLnJlc2hhcGUodC5zaGFwZSl9fSksJGw9QW4oe3JmZnRfOmZ1bmN0aW9uKHQsZSl7QyhcImZsb2F0MzJcIj09PXQuZHR5cGUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHR5cGUgZm9yIHJmZnQoKSBtdXN0IGJlIHJlYWwgdmFsdWUgYnV0IGdvdCBcIit0LmR0eXBlfSkpO3ZhciBuLHI9dC5zaGFwZVt0LnNoYXBlLmxlbmd0aC0xXSxvPXQuc2l6ZS9yO2lmKG51bGwhPWUmJmU8cil7dmFyIGE9dC5zaGFwZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiAwfSkpLGk9dC5zaGFwZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0fSkpO2lbdC5zaGFwZS5sZW5ndGgtMV09ZSxuPXQuc2xpY2UoYSxpKSxyPWV9ZWxzZSBpZihudWxsIT1lJiZlPnIpe3ZhciBzPXQuc2hhcGUubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdH0pKTtzW3Quc2hhcGUubGVuZ3RoLTFdPWUtcixuPXQuY29uY2F0KEduKHMpLHQuc2hhcGUubGVuZ3RoLTEpLHI9ZX1lbHNlIG49dDt2YXIgdT1uLnplcm9zTGlrZSgpLGM9RG4obix1KS5hczJEKG8sciksbD1YbChjKSxoPU1hdGguZmxvb3Ioci8yKSsxLGY9VG4obCksZD1ObihsKSxwPWYuc3BsaXQoW2gsci1oXSxmLnNoYXBlLmxlbmd0aC0xKSx2PWQuc3BsaXQoW2gsci1oXSxkLnNoYXBlLmxlbmd0aC0xKSxtPW4uc2hhcGUuc2xpY2UoKTtyZXR1cm4gbVtuLnNoYXBlLmxlbmd0aC0xXT1oLERuKHBbMF0sdlswXSkucmVzaGFwZShtKX19KSxRbD1Bbih7aXJmZnRfOmZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMV0sbj10LnNpemUvZTtpZihlPD0yKXt2YXIgcj10LmFzMkQobixlKSxvPVlsKHIpO3JldHVybiBUbihvKX12YXIgYT1bbiwyKihlLTEpXSxpPVRuKHQpLmFzMkQobixlKSxzPU5uKHQpLmFzMkQobixlKSx1PWkuc2xpY2UoWzAsMV0sW24sZS0yXSkucmV2ZXJzZSgxKSxjPXMuc2xpY2UoWzAsMV0sW24sZS0yXSkucmV2ZXJzZSgxKS5tdWwoT24oLTEpKSxsPWkuY29uY2F0KHUsMSksaD1zLmNvbmNhdChjLDEpO3JldHVybiByPURuKGwsaCkuYXMyRChhWzBdLGFbMV0pLG89WWwociksVG4obyl9fSksSmw9T2JqZWN0LmZyZWV6ZSh7ZmZ0OlhsLGlmZnQ6WWwscmZmdDokbCxpcmZmdDpRbH0pO3ZhciBabD1Bbih7c3BhcnNlVG9EZW5zZV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ciYmKHI9MCk7dmFyIG89bW4odCxcInNwYXJzZUluZGljZXNcIixcInNwYXJzZVRvRGVuc2VcIixcImludDMyXCIpLGE9bW4oZSxcInNwYXJzZVZhbHVlc1wiLFwic3BhcnNlVG9EZW5zZVwiKSxpPW1uKHIsXCJkZWZhdWx0VmFsdWVcIixcInNwYXJzZVRvRGVuc2VcIixhLmR0eXBlKTtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7aWYoXCJpbnQzMlwiIT09dC5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5zcGFyc2VUb0RlbnNlKCkgZXhwZWN0cyB0aGUgaW5kaWNlcyB0byBiZSBpbnQzMiB0eXBlLCBidXQgdGhlIGR0eXBlIHdhcyBcIit0LmR0eXBlK1wiLlwiKTtpZih0LnJhbms+Mil0aHJvdyBuZXcgRXJyb3IoXCJzcGFyc2VJbmRpY2VzIHNob3VsZCBiZSBhIHNjYWxhciwgdmVjdG9yLCBvciBtYXRyaXgsIGJ1dCBnb3Qgc2hhcGUgXCIrdC5zaGFwZStcIi5cIik7dmFyIG89dC5yYW5rPjA/dC5zaGFwZVswXToxLGE9dC5yYW5rPjE/dC5zaGFwZVsxXToxO2lmKG4ubGVuZ3RoIT09YSl0aHJvdyBuZXcgRXJyb3IoXCJvdXRwdXRTaGFwZSBoYXMgaW5jb3JyZWN0IG51bWJlciBvZiBlbGVtZW50czosIFwiK24ubGVuZ3RoK1wiLCBzaG91bGQgYmU6IFwiK2ErXCIuXCIpO3ZhciBpPWUuc2l6ZTtpZigwIT09ZS5yYW5rJiYoMSE9PWUucmFua3x8aSE9PW8pKXRocm93IG5ldyBFcnJvcihcInNwYXJzZVZhbHVlcyBoYXMgaW5jb3JyZWN0IHNoYXBlIFwiK2Uuc2hhcGUrXCIsIHNob3VsZCBiZSBbXSBvciBbXCIrbytcIl1cIik7aWYoZS5kdHlwZSE9PXIuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwic3BhcnNlVmFsdWVzLmR0eXBlIG11c3QgbWF0Y2ggZGVmYXVsdFZhbHVlcy5kdHlwZVwiKX0obyxhLG4saSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3BhcnNlVG9EZW5zZShvLGEsbixpKX0pLHskc3BhcnNlSW5kaWNlczpvLCRzcGFyc2VWYWx1ZXM6YSwkZGVmYXVsdFZhbHVlOml9KX19KTt2YXIgdGg9QW4oe2dhdGhlck5EXzpmdW5jdGlvbih0LGUpe3ZhciBuPW1uKGUsXCJpbmRpY2VzXCIsXCJnYXRoZXJORFwiLFwiaW50MzJcIikscj1tbih0LFwieFwiLFwiZ2F0aGVyTkRcIik7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmdhdGhlck5EKHIsbil9KSx7eDpyLGluZGljZXM6bn0sbnVsbCxcIkdhdGhlck5kXCIpfX0pO3ZhciBlaD1Bbih7ZGlhZ186ZnVuY3Rpb24odCl7dmFyIGU9bW4odCxcInhcIixcImRpYWdcIikuZmxhdHRlbigpLG49dC5zaGFwZS5jb25jYXQodC5zaGFwZSk7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRpYWcoZSl9KSx7JHg6ZX0pLnJlc2hhcGUobil9fSk7dmFyIG5oPUFuKHtkcm9wb3V0XzpmdW5jdGlvbih0LGUsbixyKXt2YXIgbz1tbih0LFwieFwiLFwiZHJvcG91dFwiKTtpZihDKFwiZmxvYXQzMlwiPT09by5kdHlwZSwoZnVuY3Rpb24oKXtyZXR1cm5cInggaGFzIHRvIGJlIGEgZmxvYXRpbmcgcG9pbnQgdGVuc29yIHNpbmNlIGl0J3MgZ29pbmcgdG8gYmUgc2NhbGVkLCBidXQgZ290IGEgXCIrby5kdHlwZStcIiB0ZW5zb3IgaW5zdGVhZC5cIn0pKSxDKGU+PTAmJmU8MSwoZnVuY3Rpb24oKXtyZXR1cm5cInJhdGUgbXVzdCBiZSBhIGZsb2F0IGluIHRoZSByYW5nZSBbMCwgMSksIGJ1dCBnb3QgXCIrZStcIi5cIn0pKSwwPT09ZSlyZXR1cm4gdCBpbnN0YW5jZW9mIHd0P28uY2xvbmUoKTpvO3ZhciBhPWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09ZSlyZXR1cm4gdC5zaGFwZS5zbGljZSgpO2lmKFModC5zaGFwZSxlKSlyZXR1cm4gZTtpZih0LnNoYXBlLmxlbmd0aD09PWUubGVuZ3RoKXtmb3IodmFyIG49W10scj0wO3I8dC5zaGFwZS5sZW5ndGg7cisrKW51bGw9PWVbcl0mJm51bGwhPXQuc2hhcGVbcl0/bi5wdXNoKHQuc2hhcGVbcl0pOm4ucHVzaChlW3JdKTtyZXR1cm4gbn1yZXR1cm4gZX0obyxuKSxpPTEtZSxzPV9yKGEsMCwxLFwiZmxvYXQzMlwiLHIpLmFkZChpKS5mbG9vcigpLmRpdihpKTtyZXR1cm4gby5tdWwocyl9fSk7ZnVuY3Rpb24gcmgodCxlLG4pe2Zvcih2YXIgcj0xLXQlMixvPW5ldyBGbG9hdDMyQXJyYXkodCksYT0wO2E8dDsrK2Epe3ZhciBpPTIqTWF0aC5QSSphLyh0K3ItMSk7b1thXT1lLW4qTWF0aC5jb3MoaSl9cmV0dXJuIE1uKG8sXCJmbG9hdDMyXCIpfXZhciBvaD1Bbih7aGFubldpbmRvd186ZnVuY3Rpb24odCl7cmV0dXJuIHJoKHQsLjUsLjUpfX0pLGFoPUFuKHtoYW1taW5nV2luZG93XzpmdW5jdGlvbih0KXtyZXR1cm4gcmgodCwuNTQsLjQ2KX19KSxpaD1Bbih7ZnJhbWVfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW8mJihvPTApO2Zvcih2YXIgYT0wLGk9W107YStlPD10LnNpemU7KWkucHVzaChtbCh0LGEsZSkpLGErPW47aWYocilmb3IoO2E8dC5zaXplOyl7dmFyIHM9YStlLXQuc2l6ZSx1PVluKFttbCh0LGEsZS1zKSxIbihbc10sbyldKTtpLnB1c2godSksYSs9bn1yZXR1cm4gMD09PWkubGVuZ3RoP0JuKFtdLFswLGVdKTpZbihpKS5hczJEKGkubGVuZ3RoLGUpfX0pLHNoPUFuKHtzdGZ0XzpmdW5jdGlvbih0LGUsbixyLG8pe3ZhciBhO3ZvaWQgMD09PW8mJihvPW9oKSxudWxsPT1yJiYoYT1lLHI9TWF0aC5mbG9vcihNYXRoLnBvdygyLE1hdGguY2VpbChNYXRoLmxvZyhhKS9NYXRoLmxvZygyKSkpKSk7Zm9yKHZhciBpPWloKHQsZSxuKSxzPWdjKGksbyhlKSksdT1bXSxjPTA7YzxpLnNoYXBlWzBdO2MrKyl1LnB1c2goJGwocy5zbGljZShbYywwXSxbMSxlXSkscikpO3JldHVybiBZbih1KX19KSx1aD1PYmplY3QuZnJlZXplKHtoYW5uV2luZG93Om9oLGhhbW1pbmdXaW5kb3c6YWgsZnJhbWU6aWgsc3RmdDpzaH0pO3ZhciBjaCxsaD1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIHZvaWQgMD09PW8mJihvPTEpLG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBuLGEsaSxzLHUsYyxsLGgsZixkLHAsdixtLGc7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm4gbj1tbih0LFwicHJlZGljdGlvbnNcIixcImluVG9wS1wiKSxhPW1uKGUsXCJ0YXJnZXRzXCIsXCJpblRvcEtcIiksQyhuLnJhbms+MSwoZnVuY3Rpb24oKXtyZXR1cm5cImluVG9wSygpIGV4cGVjdHMgdGhlIHByZWRpY3Rpb25zIHRvIGJlIG9mIHJhbmsgMiBvciBoaWdoZXIsIGJ1dCBnb3QgXCIrbi5yYW5rfSkpLEMobi5yYW5rLTE9PT1hLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJwcmVkaWN0aW9ucyByYW5rIHNob3VsZCBiZSAxIGxhcmdlciB0aGFuIHRhcmdldHMgcmFuaywgYnV0IGdvdCBwcmVkaWN0aW9ucyByYW5rIFwiK24ucmFuaytcIiBhbmQgdGFyZ2V0cyByYW5rIFwiK2EucmFua30pKSxFKG4uc2hhcGUuc2xpY2UoMCxuLnNoYXBlLmxlbmd0aC0xKSxhLnNoYXBlLFwicHJlZGljdGlvbnMncyBzaGFwZSBzaG91bGQgYmUgYWxpZ24gd2l0aCB0aGUgdGFyZ2V0cycgc2hhcGUsIGV4Y2VwdCB0aGUgbGFzdCBkaW1lbnNpb24uXCIpLGk9bi5zaGFwZVtuLnNoYXBlLmxlbmd0aC0xXSxDKG8+MCYmbzw9aSwoZnVuY3Rpb24oKXtyZXR1cm5cIidrJyBwYXNzZWQgdG8gaW5Ub3BLKCkgbXVzdCBiZSA+IDAgJiYgPD0gdGhlIHByZWRpY3Rpb25zIGxhc3QgZGltZW5zaW9uIChcIitpK1wiKSwgYnV0IGdvdCBcIitvfSkpLFs0LG4uZGF0YSgpXTtjYXNlIDE6cmV0dXJuIHM9ci5zZW50KCksWzQsYS5kYXRhKCldO2Nhc2UgMjpmb3IodT1yLnNlbnQoKSxjPVtzLmxlbmd0aC9pLGldLGg9Y1sxXSxmPUIoXCJib29sXCIsbD1jWzBdKSxkPTA7ZDxsO2QrKyl7Zm9yKHA9ZCpoLHY9cy5zdWJhcnJheShwLHAraCksbT1bXSxnPTA7Zzx2Lmxlbmd0aDtnKyspbS5wdXNoKHt2YWx1ZTp2W2ddLGluZGV4Omd9KTtmb3IobS5zb3J0KChmdW5jdGlvbih0LGUpe3JldHVybiBlLnZhbHVlLXQudmFsdWV9KSksZltkXT0wLGc9MDtnPG87ZysrKWlmKG1bZ10uaW5kZXg9PT11W2RdKXtmW2RdPTE7YnJlYWt9fXJldHVybiB0IT09biYmbi5kaXNwb3NlKCksZSE9PWEmJmEuZGlzcG9zZSgpLFsyLEZuKGYsYS5zaGFwZSxcImJvb2xcIildfX0pKX0pKX07IWZ1bmN0aW9uKHQpe3RbdC5OT05FPTBdPVwiTk9ORVwiLHRbdC5NRUFOPTFdPVwiTUVBTlwiLHRbdC5TVU09Ml09XCJTVU1cIix0W3QuU1VNX0JZX05PTlpFUk9fV0VJR0hUUz0zXT1cIlNVTV9CWV9OT05aRVJPX1dFSUdIVFNcIn0oY2h8fChjaD17fSkpO3ZhciBoaD1Bbih7YWJzb2x1dGVEaWZmZXJlbmNlXzpmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj1jaC5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgbz1tbih0LFwibGFiZWxzXCIsXCJhYnNvbHV0ZURpZmZlcmVuY2VcIiksYT1tbihlLFwicHJlZGljdGlvbnNcIixcImFic29sdXRlRGlmZmVyZW5jZVwiKSxpPW51bGw7bnVsbCE9biYmKGk9bW4obixcIndlaWdodHNcIixcImFic29sdXRlRGlmZmVyZW5jZVwiKSksRShvLnNoYXBlLGEuc2hhcGUsXCJFcnJvciBpbiBhYnNvbHV0ZURpZmZlcmVuY2U6IFwiKTt2YXIgcz1vLnN1YihhKS5hYnMoKTtyZXR1cm4gZmgocyxpLHIpfX0pLGZoPUFuKHtjb21wdXRlV2VpZ2h0ZWRMb3NzXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49Y2guU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIHI9bW4odCxcImxvc3Nlc1wiLFwiY29tcHV0ZVdlaWdodGVkTG9zc1wiKSxvPW51bGw7bnVsbCE9ZSYmKG89bW4oZSxcIndlaWdodHNcIixcImNvbXB1dGVXZWlnaHRlZExvc3NcIikpO3ZhciBhPW51bGw9PW8/cjpyLm11bChvKTtpZihuPT09Y2guTk9ORSlyZXR1cm4gYTtpZihuPT09Y2guU1VNKXJldHVybiBhLnN1bSgpO2lmKG49PT1jaC5NRUFOKXtpZihudWxsPT1vKXJldHVybiBhLm1lYW4oKTt2YXIgaT1yLnNpemUvby5zaXplLHM9YS5zdW0oKS5kaXYoby5zdW0oKSk7cmV0dXJuIGk+MT9zLmRpdihPbihpKSk6c31pZihuPT09Y2guU1VNX0JZX05PTlpFUk9fV0VJR0hUUyl7aWYobnVsbD09bylyZXR1cm4gYS5zdW0oKS5kaXYoT24oci5zaXplKSk7dmFyIHU9by5tdWwoem4oci5zaGFwZSkpLm5vdEVxdWFsKE9uKDApKS5zdW0oKS50b0Zsb2F0KCk7cmV0dXJuIGEuc3VtKCkuZGl2KHUpfXRocm93IEVycm9yKFwiVW5rbm93biByZWR1Y3Rpb246IFwiK24pfX0pLGRoPUFuKHtjb3NpbmVEaXN0YW5jZV86ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1vJiYobz1jaC5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgYT1tbih0LFwibGFiZWxzXCIsXCJjb3NpbmVEaXN0YW5jZVwiKSxpPW1uKGUsXCJwcmVkaWN0aW9uc1wiLFwiY29zaW5lRGlzdGFuY2VcIikscz1udWxsO251bGwhPXImJihzPW1uKHIsXCJ3ZWlnaHRzXCIsXCJjb3NpbmVEaXN0YW5jZVwiKSksRShhLnNoYXBlLGkuc2hhcGUsXCJFcnJvciBpbiBjb3NpbmVEaXN0YW5jZTogXCIpO3ZhciB1PU9uKDEpLnN1YihhLm11bChpKS5zdW0obiwhMCkpO3JldHVybiBmaCh1LHMsbyl9fSkscGg9QW4oe2hpbmdlTG9zc186ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ciYmKHI9Y2guU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIG89bW4odCxcImxhYmVsc1wiLFwiaGluZ2VMb3NzXCIpLGE9bW4oZSxcInByZWRpY3Rpb25zXCIsXCJoaW5nZUxvc3NcIiksaT1udWxsO251bGwhPW4mJihpPW1uKG4sXCJ3ZWlnaHRzXCIsXCJoaW5nZUxvc3NcIikpLEUoby5zaGFwZSxhLnNoYXBlLFwiRXJyb3IgaW4gaGluZ2VMb3NzOiBcIik7dmFyIHM9T24oMSk7bz1PbigyKS5tdWwobykuc3ViKHMpO3ZhciB1PXMuc3ViKG8ubXVsKGEpKS5yZWx1KCk7cmV0dXJuIGZoKHUsaSxyKX19KSx2aD1Bbih7aHViZXJMb3NzXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PXImJihyPTEpLHZvaWQgMD09PW8mJihvPWNoLlNVTV9CWV9OT05aRVJPX1dFSUdIVFMpO3ZhciBhPW1uKHQsXCJsYWJlbHNcIixcImh1YmVyTG9zc1wiKSxpPW1uKGUsXCJwcmVkaWN0aW9uc1wiLFwiaHViZXJMb3NzXCIpLHM9bnVsbDtudWxsIT1uJiYocz1tbihuLFwid2VpZ2h0c1wiLFwiaHViZXJMb3NzXCIpKSxFKGEuc2hhcGUsaS5zaGFwZSxcIkVycm9yIGluIGh1YmVyTG9zczogXCIpO3ZhciB1PU9uKHIpLGM9aS5zdWIoYSkuYWJzKCksbD1kYyhjLHUpLGg9Yy5zdWIobCksZj1PbiguNSkubXVsKGwuc3F1YXJlKCkpLmFkZCh1Lm11bChoKSk7cmV0dXJuIGZoKGYscyxvKX19KSxtaD1Bbih7bG9nTG9zc186ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1yJiYocj0xZS03KSx2b2lkIDA9PT1vJiYobz1jaC5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgYT1tbih0LFwibGFiZWxzXCIsXCJsb2dMb3NzXCIpLGk9bW4oZSxcInByZWRpY3Rpb25zXCIsXCJsb2dMb3NzXCIpLHM9bnVsbDtudWxsIT1uJiYocz1tbihuLFwid2VpZ2h0c1wiLFwibG9nTG9zc1wiKSksRShhLnNoYXBlLGkuc2hhcGUsXCJFcnJvciBpbiBsb2dMb3NzOiBcIik7dmFyIHU9T24oMSksYz1PbihyKSxsPWEubXVsKGkuYWRkKGMpLmxvZygpKS5uZWcoKS5zdWIodS5zdWIoYSkubXVsKHUuc3ViKGkpLmFkZChjKS5sb2coKSkpO3JldHVybiBmaChsLHMsbyl9fSksZ2g9QW4oe21lYW5TcXVhcmVkRXJyb3JfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPWNoLlNVTV9CWV9OT05aRVJPX1dFSUdIVFMpO3ZhciBvPW1uKHQsXCJsYWJlbHNcIixcIm1lYW5TcXVhcmVkRXJyb3JcIiksYT1tbihlLFwicHJlZGljdGlvbnNcIixcIm1lYW5TcXVhcmVkRXJyb3JcIiksaT1udWxsO251bGwhPW4mJihpPW1uKG4sXCJ3ZWlnaHRzXCIsXCJtZWFuU3F1YXJlZEVycm9yXCIpKSxFKG8uc2hhcGUsYS5zaGFwZSxcIkVycm9yIGluIG1lYW5TcXVhcmVkRXJyb3I6IFwiKTt2YXIgcz1vLnNxdWFyZWREaWZmZXJlbmNlKGEpO3JldHVybiBmaChzLGkscil9fSkseWg9QW4oe3NpZ21vaWRDcm9zc0VudHJvcHlfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ciYmKHI9MCksdm9pZCAwPT09byYmKG89Y2guU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIGE9bW4odCxcIm11bHRpQ2xhc3NMYWJlbHNcIixcInNpZ21vaWRDcm9zc0VudHJvcHlcIiksaT1tbihlLFwibG9naXRzXCIsXCJzaWdtb2lkQ3Jvc3NFbnRyb3B5XCIpLHM9bnVsbDtpZihudWxsIT1uJiYocz1tbihuLFwid2VpZ2h0c1wiLFwic2lnbW9pZENyb3NzRW50cm9weVwiKSksRShhLnNoYXBlLGkuc2hhcGUsXCJFcnJvciBpbiBzaWdtb2lkQ3Jvc3NFbnRyb3B5OiBcIikscj4wKXt2YXIgdT1PbihyKSxjPU9uKDEpLGw9T24oLjUpO2E9YS5tdWwoYy5zdWIodSkpLmFkZChsLm11bCh1KSl9dmFyIGg9ZnVuY3Rpb24odCxlKXt2YXIgbj1tbih0LFwibGFiZWxzXCIsXCJzaWdtb2lkQ3Jvc3NFbnRyb3B5V2l0aExvZ2l0c1wiKSxyPW1uKGUsXCJsb2dpdHNcIixcInNpZ21vaWRDcm9zc0VudHJvcHlXaXRoTG9naXRzXCIpO0Uobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gc2lnbW9pZENyb3NzRW50cm9weVdpdGhMb2dpdHM6IFwiKTt2YXIgbz1yLnJlbHUoKSxhPXIubXVsKG4pLGk9ci5hYnMoKS5uZWcoKS5leHAoKS5sb2cxcCgpO3JldHVybiBvLnN1YihhKS5hZGQoaSl9KGEsaSk7cmV0dXJuIGZoKGgscyxvKX19KSx4aD1Bbih7c29mdG1heENyb3NzRW50cm9weV86ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1yJiYocj0wKSx2b2lkIDA9PT1vJiYobz1jaC5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgYT1tbih0LFwib25laG90TGFiZWxzXCIsXCJzb2Z0bWF4Q3Jvc3NFbnRyb3B5XCIpLGk9bW4oZSxcImxvZ2l0c1wiLFwic29mdG1heENyb3NzRW50cm9weVwiKSxzPW51bGw7aWYobnVsbCE9biYmKHM9bW4obixcIndlaWdodHNcIixcInNvZnRtYXhDcm9zc0VudHJvcHlcIikpLEUoYS5zaGFwZSxpLnNoYXBlLFwiRXJyb3IgaW4gc29mdG1heENyb3NzRW50cm9weTogXCIpLHI+MCl7dmFyIHU9T24ociksYz1PbigxKSxsPU9uKGEuc2hhcGVbMV0pO2E9YS5tdWwoYy5zdWIodSkpLmFkZCh1LmRpdihsKSl9dmFyIGg9ZnVuY3Rpb24odCxlLG4pe2lmKHZvaWQgMD09PW4mJihuPS0xKSwtMT09PW4mJihuPWUucmFuay0xKSxuIT09ZS5yYW5rLTEpdGhyb3cgRXJyb3IoXCJTb2Z0bWF4IGNyb3NzIGVudHJvcHkgYWxvbmcgYSBub24tbGFzdCBkaW1lbnNpb24gaXMgbm90IHlldCBzdXBwb3J0ZWQuIExhYmVscyAvIGxvZ2l0cyB3YXMgcmFuayBcIitlLnJhbmsrXCIgYW5kIGRpbSB3YXMgXCIrbik7cmV0dXJuIHZvKChmdW5jdGlvbih0LGUscil7dmFyIG89ZS5sb2dTdW1FeHAoW25dLCEwKSxhPWUudG9GbG9hdCgpLnN1YihvKTtyKFt0LGFdKTtyZXR1cm57dmFsdWU6YS5tdWwodCkubmVnKCkuc3VtKFtuXSksZ3JhZEZ1bmM6ZnVuY3Rpb24odCxlKXt2YXIgcj1lWzBdLG89ZVsxXSxhPXduKHQuc2hhcGUsW25dKTtyZXR1cm5bdC5yZXNoYXBlKGEpLm11bChyLnRvRmxvYXQoKS5zdWIoby5leHAoKSkpLHQucmVzaGFwZShhKS5tdWwoby5leHAoKS5zdWIoci50b0Zsb2F0KCkpKV19fX0pKSh0LGUpfShhLGkpO3JldHVybiBmaChoLHMsbyl9fSksYmg9T2JqZWN0LmZyZWV6ZSh7Z2V0IFJlZHVjdGlvbigpe3JldHVybiBjaH0sYWJzb2x1dGVEaWZmZXJlbmNlOmhoLGNvbXB1dGVXZWlnaHRlZExvc3M6ZmgsY29zaW5lRGlzdGFuY2U6ZGgsaGluZ2VMb3NzOnBoLGh1YmVyTG9zczp2aCxsb2dMb3NzOm1oLG1lYW5TcXVhcmVkRXJyb3I6Z2gsc2lnbW9pZENyb3NzRW50cm9weTp5aCxzb2Z0bWF4Q3Jvc3NFbnRyb3B5OnhofSk7ZnVuY3Rpb24gd2godCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLEx0LnRpZHkoKGZ1bmN0aW9uKCl7aWYoMiE9PXQuc2hhcGUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInFyMmQoKSByZXF1aXJlcyBhIDJEIFRlbnNvciwgYnV0IGdvdCBhIFwiK3Quc2hhcGUubGVuZ3RoK1wiRCBUZW5zb3IuXCIpO2Zvcih2YXIgbj10LnNoYXBlWzBdLHI9dC5zaGFwZVsxXSxvPUNyKG4pLGE9dC5jbG9uZSgpLGk9Qm4oW1sxXV0sWzEsMV0pLHM9aS5jbG9uZSgpLHU9bj49cj9yOm4sYz1mdW5jdGlvbih0KXt2YXIgZSx1PWEsYz1zLGw9bztlPUx0LnRpZHkoKGZ1bmN0aW9uKCl7dmFyIGU9YS5zbGljZShbdCx0XSxbbi10LDFdKSx1PWUubm9ybSgpLGM9YS5zbGljZShbdCx0XSxbMSwxXSksbD1CbihbWy0xXV0pLndoZXJlKGMuZ3JlYXRlcigwKSxCbihbWzFdXSkpLGg9Yy5zdWIobC5tdWwodSkpLGY9ZS5kaXYoaCk7cz0xPT09Zi5zaGFwZVswXT9pLmNsb25lKCk6aS5jb25jYXQoZi5zbGljZShbMSwwXSxbZi5zaGFwZVswXS0xLGYuc2hhcGVbMV1dKSwwKTt2YXIgZD1sLm1hdE11bChoKS5kaXYodSkubmVnKCkscD1hLnNsaWNlKFt0LDBdLFtuLXQscl0pLHY9ZC5tdWwocyk7aWYoMD09PXQpYT1wLnN1Yih2Lm1hdE11bChzLnRyYW5zcG9zZSgpLm1hdE11bChwKSkpO2Vsc2V7dmFyIG09cC5zdWIodi5tYXRNdWwocy50cmFuc3Bvc2UoKS5tYXRNdWwocCkpKTthPWEuc2xpY2UoWzAsMF0sW3Qscl0pLmNvbmNhdChtLDApfXZhciBnPW8uc2xpY2UoWzAsdF0sW24sby5zaGFwZVsxXS10XSk7aWYoMD09PXQpbz1nLnN1YihnLm1hdE11bChzKS5tYXRNdWwodi50cmFuc3Bvc2UoKSkpO2Vsc2V7dmFyIHk9Zy5zdWIoZy5tYXRNdWwocykubWF0TXVsKHYudHJhbnNwb3NlKCkpKTtvPW8uc2xpY2UoWzAsMF0sW24sdF0pLmNvbmNhdCh5LDEpfXJldHVybltzLGEsb119KSkscz1lWzBdLGE9ZVsxXSxvPWVbMl0sdG4oW3UsYyxsXSl9LGw9MDtsPHU7KytsKWMobCk7cmV0dXJuIWUmJm4+ciYmKG89by5zbGljZShbMCwwXSxbbixyXSksYT1hLnNsaWNlKFswLDBdLFtyLHJdKSksW28sYV19KSl9dmFyIENoPUFuKHtiYW5kUGFydF86ZnVuY3Rpb24odCxlLG4pe2lmKGUlMSE9MCl0aHJvdyBuZXcgRXJyb3IoXCJiYW5kUGFydCgpOiBudW1Mb3dlciBtdXN0IGJlIGFuIGludGVnZXIsIGdvdCBcIitlK1wiLlwiKTtpZihuJTEhPTApdGhyb3cgbmV3IEVycm9yKFwiYmFuZFBhcnQoKTogbnVtVXBwZXIgbXVzdCBiZSBhbiBpbnRlZ2VyLCBnb3QgXCIrbitcIi5cIik7dmFyIHI9bW4odCxcImFcIixcImJhbmRQYXJ0XCIpO2lmKHIucmFuazwyKXRocm93IG5ldyBFcnJvcihcImJhbmRQYXJ0KCk6IFJhbmsgbXVzdCBiZSBhdCBsZWFzdCAyLCBnb3QgXCIrci5yYW5rK1wiLlwiKTt2YXIgbz1yLnNoYXBlLGE9ci5zaGFwZS5zbGljZSgtMiksaT1hWzBdLHM9YVsxXTtpZighKGU8PWkpKXRocm93IG5ldyBFcnJvcihcImJhbmRQYXJ0KCk6IG51bUxvd2VyIChcIitlK1wiKSBtdXN0IG5vdCBiZSBncmVhdGVyIHRoYW4gdGhlIG51bWJlciBvZiByb3dzIChcIitpK1wiKS5cIik7aWYoIShuPD1zKSl0aHJvdyBuZXcgRXJyb3IoXCJiYW5kUGFydCgpOiBudW1VcHBlciAoXCIrbitcIikgbXVzdCBub3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBudW1iZXIgb2YgY29sdW1ucyAoXCIrcytcIikuXCIpO2U8MCYmKGU9aSksbjwwJiYobj1zKTt2YXIgdT1LbigwLGksMSxcImludDMyXCIpLnJlc2hhcGUoWy0xLDFdKSxjPUtuKDAscywxLFwiaW50MzJcIiksbD1DYyh1LGMpLGg9UXUobC5sZXNzRXF1YWwoT24oK2UsXCJpbnQzMlwiKSksbC5ncmVhdGVyRXF1YWwoT24oLW4sXCJpbnQzMlwiKSkpLGY9R24oW2ksc10sci5kdHlwZSk7cmV0dXJuIFByKFVyKHIucmVzaGFwZShbLTEsaSxzXSkpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGVjKGgsdCxmKX0pKSkucmVzaGFwZShvKX19KSxFaD1Bbih7Z3JhbVNjaG1pZHRfOmZ1bmN0aW9uKHQpe3ZhciBlO2lmKEFycmF5LmlzQXJyYXkodCkpe2U9ITEsQyhudWxsIT10JiZ0Lmxlbmd0aD4wLChmdW5jdGlvbigpe3JldHVyblwiR3JhbS1TY2htaWR0IHByb2Nlc3M6IGlucHV0IG11c3Qgbm90IGJlIG51bGwsIHVuZGVmaW5lZCwgb3IgZW1wdHlcIn0pKTtmb3IodmFyIG49dFswXS5zaGFwZVswXSxyPWZ1bmN0aW9uKGUpe0ModFtlXS5zaGFwZVswXT09PW4sKGZ1bmN0aW9uKCl7cmV0dXJuXCJHcmFtLVNjaG1pZHQ6IE5vbi11bmlxdWUgbGVuZ3RocyBmb3VuZCBpbiB0aGUgaW5wdXQgdmVjdG9yczogKFwiK3RbZV0uc2hhcGVbMF0rXCIgdnMuIFwiK24rXCIpXCJ9KSl9LG89MTtvPHQubGVuZ3RoOysrbylyKG8pfWVsc2UgZT0hMCx0PXRyKHQsdC5zaGFwZVswXSwwKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBCcih0LFswXSl9KSk7Qyh0Lmxlbmd0aDw9dFswXS5zaGFwZVswXSwoZnVuY3Rpb24oKXtyZXR1cm5cIkdyYW0tU2NobWlkdDogTnVtYmVyIG9mIHZlY3RvcnMgKFwiK3QubGVuZ3RoK1wiKSBleGNlZWRzIG51bWJlciBvZiBkaW1lbnNpb25zIChcIit0WzBdLnNoYXBlWzBdK1wiKS5cIn0pKTt2YXIgYT1bXSxpPXQscz1mdW5jdGlvbih0KXthLnB1c2goTHQudGlkeSgoZnVuY3Rpb24oKXt2YXIgZT1pW3RdO2lmKHQ+MClmb3IodmFyIG49MDtuPHQ7KytuKXt2YXIgcj1ObChhW25dLm11bFN0cmljdChlKSkubXVsKGFbbl0pO2U9ZS5zdWIocil9cmV0dXJuIGUuZGl2KFZsKGUsXCJldWNsaWRlYW5cIikpfSkpKX07Zm9yKG89MDtvPHQubGVuZ3RoOysrbylzKG8pO3JldHVybiBlP1ByKGEsMCk6YX19KSxSaD1Bbih7cXJfOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9ITEpLHQucmFuazwyKXRocm93IG5ldyBFcnJvcihcInFyKCkgcmVxdWlyZXMgaW5wdXQgdGVuc29yIHRvIGhhdmUgYSByYW5rID49IDIsIGJ1dCBnb3QgcmFuayBcIit0LnJhbmspO2lmKDI9PT10LnJhbmspcmV0dXJuIHdoKHQsZSk7dmFyIG49dC5zaGFwZS5zbGljZSgwLHQuc2hhcGUubGVuZ3RoLTIpLnJlZHVjZSgoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSkpLHI9VXIodC5yZXNoYXBlKFtuLHQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMl0sdC5zaGFwZVt0LnNoYXBlLmxlbmd0aC0xXV0pLDApLG89W10sYT1bXTtyZXR1cm4gci5mb3JFYWNoKChmdW5jdGlvbih0KXt2YXIgbj13aCh0LGUpLHI9blswXSxpPW5bMV07by5wdXNoKHIpLGEucHVzaChpKX0pKSxbUHIobywwKS5yZXNoYXBlKHQuc2hhcGUpLFByKGEsMCkucmVzaGFwZSh0LnNoYXBlKV19fSksSWg9T2JqZWN0LmZyZWV6ZSh7YmFuZFBhcnQ6Q2gsZ3JhbVNjaG1pZHQ6RWgscXI6Umh9KTtmdW5jdGlvbiBraCh0LGUsbixyLG8sYSl7bnVsbD09ciYmKHI9LjUpLG51bGw9PW8mJihvPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSksbnVsbD09YSYmKGE9MCk7dmFyIGk9dC5zaGFwZVswXTtyZXR1cm4gbj1NYXRoLm1pbihuLGkpLEMoMDw9ciYmcjw9MSwoZnVuY3Rpb24oKXtyZXR1cm5cImlvdVRocmVzaG9sZCBtdXN0IGJlIGluIFswLCAxXSwgYnV0IHdhcyAnXCIrcitcIidcIn0pKSxDKDI9PT10LnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJib3hlcyBtdXN0IGJlIGEgMkQgdGVuc29yLCBidXQgd2FzIG9mIHJhbmsgJ1wiK3QucmFuaytcIidcIn0pKSxDKDQ9PT10LnNoYXBlWzFdLChmdW5jdGlvbigpe3JldHVyblwiYm94ZXMgbXVzdCBoYXZlIDQgY29sdW1ucywgYnV0IDJuZCBkaW1lbnNpb24gd2FzIFwiK3Quc2hhcGVbMV19KSksQygxPT09ZS5yYW5rLChmdW5jdGlvbigpe3JldHVyblwic2NvcmVzIG11c3QgYmUgYSAxRCB0ZW5zb3JcIn0pKSxDKGUuc2hhcGVbMF09PT1pLChmdW5jdGlvbigpe3JldHVyblwic2NvcmVzIGhhcyBpbmNvbXBhdGlibGUgc2hhcGUgd2l0aCBib3hlcy4gRXhwZWN0ZWQgXCIraStcIiwgYnV0IHdhcyBcIitlLnNoYXBlWzBdfSkpLEMoMDw9YSYmYTw9MSwoZnVuY3Rpb24oKXtyZXR1cm5cInNvZnRObXNTaWdtYSBtdXN0IGJlIGluIFswLCAxXSwgYnV0IHdhcyAnXCIrYStcIidcIn0pKSx7bWF4T3V0cHV0U2l6ZTpuLGlvdVRocmVzaG9sZDpyLHNjb3JlVGhyZXNob2xkOm8sc29mdE5tc1NpZ21hOmF9fXZhciBTaD1Bbih7cmVzaXplQmlsaW5lYXJfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bW4odCxcImltYWdlc1wiLFwicmVzaXplQmlsaW5lYXJcIik7QygzPT09ci5yYW5rfHw0PT09ci5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmVzaXplQmlsaW5lYXI6IHggbXVzdCBiZSByYW5rIDMgb3IgNCwgYnV0IGdvdCByYW5rIFwiK3IucmFuaytcIi5cIn0pKSxDKDI9PT1lLmxlbmd0aCwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHJlc2l6ZUJpbGluZWFyOiBuZXcgc2hhcGUgbXVzdCAyRCwgYnV0IGdvdCBzaGFwZSBcIitlK1wiLlwifSkpO3ZhciBvPXIsYT0hMTszPT09ci5yYW5rJiYoYT0hMCxvPXIuYXM0RCgxLHIuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdKSk7dmFyIGk9ZVswXSxzPWVbMV0sdT1MdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbih0LGUpe3JldHVybiBlKFtvXSksdC5yZXNpemVCaWxpbmVhcihvLGkscyxuKX0pLHt4Om99LChmdW5jdGlvbih0LGUpe3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIEx0LnJ1bktlcm5lbEZ1bmMoKGZ1bmN0aW9uKHIpe3JldHVybiByLnJlc2l6ZUJpbGluZWFyQmFja3Byb3AodCxlWzBdLG4pfSkse30pfX19KSxcIlJlc2l6ZUJpbGluZWFyXCIse2FsaWduQ29ybmVyczpuLG5ld0hlaWdodDppLG5ld1dpZHRoOnN9KTtyZXR1cm4gYT91LmFzM0QodS5zaGFwZVsxXSx1LnNoYXBlWzJdLHUuc2hhcGVbM10pOnV9fSksQWg9QW4oe3Jlc2l6ZU5lYXJlc3ROZWlnaGJvcl86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1tbih0LFwiaW1hZ2VzXCIsXCJyZXNpemVOZWFyZXN0TmVpZ2hib3JcIik7QygzPT09ci5yYW5rfHw0PT09ci5yYW5rLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmVzaXplTmVhcmVzdE5laWdoYm9yOiB4IG11c3QgYmUgcmFuayAzIG9yIDQsIGJ1dCBnb3QgcmFuayBcIityLnJhbmsrXCIuXCJ9KSksQygyPT09ZS5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXNpemVOZWFyZXN0TmVpZ2hib3I6IG5ldyBzaGFwZSBtdXN0IDJELCBidXQgZ290IHNoYXBlIFwiK2UrXCIuXCJ9KSksQyhcImZsb2F0MzJcIj09PXIuZHR5cGV8fFwiaW50MzJcIj09PXIuZHR5cGUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJgaW1hZ2VzYCBtdXN0IGhhdmUgYGludDMyYCBvciBgZmxvYXQzMmAgYXMgZHR5cGVcIn0pKTt2YXIgbz1yLGE9ITE7Mz09PXIucmFuayYmKGE9ITAsbz1yLmFzNEQoMSxyLnNoYXBlWzBdLHIuc2hhcGVbMV0sci5zaGFwZVsyXSkpO3ZhciBpPWVbMF0scz1lWzFdLHU9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXtyZXR1cm4gZShbb10pLHQucmVzaXplTmVhcmVzdE5laWdoYm9yKG8saSxzLG4pfSkse2JhdGNoSW1hZ2VzOm99LChmdW5jdGlvbih0LGUpe3JldHVybntiYXRjaEltYWdlczpmdW5jdGlvbigpe3JldHVybiBMdC5ydW5LZXJuZWxGdW5jKChmdW5jdGlvbihyKXtyZXR1cm4gci5yZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcCh0LGVbMF0sbil9KSx7fSl9fX0pKTtyZXR1cm4gYT91LmFzM0QodS5zaGFwZVsxXSx1LnNoYXBlWzJdLHUuc2hhcGVbM10pOnV9fSksRGg9QW4oe25vbk1heFN1cHByZXNzaW9uXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PXImJihyPS41KSx2b2lkIDA9PT1vJiYobz1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpO3ZhciBhPW1uKHQsXCJib3hlc1wiLFwibm9uTWF4U3VwcHJlc3Npb25cIiksaT1tbihlLFwic2NvcmVzXCIsXCJub25NYXhTdXBwcmVzc2lvblwiKSxzPWtoKGEsaSxuLHIsbyk7bj1zLm1heE91dHB1dFNpemUscj1zLmlvdVRocmVzaG9sZCxvPXMuc2NvcmVUaHJlc2hvbGQ7dmFyIHU9e21heE91dHB1dFNpemU6bixpb3VUaHJlc2hvbGQ6cixzY29yZVRocmVzaG9sZDpvfTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCl7cmV0dXJuIHQubm9uTWF4U3VwcHJlc3Npb24oYSxpLG4scixvKX0pLHtib3hlczphLHNjb3JlczppfSxudWxsLFwiTm9uTWF4U3VwcHJlc3Npb25WM1wiLHUpfX0pLFRoPWZ1bmN0aW9uKHQsZSxvLGEsaSl7cmV0dXJuIHZvaWQgMD09PWEmJihhPS41KSx2b2lkIDA9PT1pJiYoaT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpLG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBuLHMsdSxjLGwsaCxmO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG49bW4odCxcImJveGVzXCIsXCJub25NYXhTdXBwcmVzc2lvbkFzeW5jXCIpLHM9bW4oZSxcInNjb3Jlc1wiLFwibm9uTWF4U3VwcHJlc3Npb25Bc3luY1wiKSx1PWtoKG4scyxvLGEsaSksbz11Lm1heE91dHB1dFNpemUsYT11LmlvdVRocmVzaG9sZCxpPXUuc2NvcmVUaHJlc2hvbGQsWzQsUHJvbWlzZS5hbGwoW24uZGF0YSgpLHMuZGF0YSgpXSldO2Nhc2UgMTpyZXR1cm4gYz1yLnNlbnQoKSxsPWNbMF0saD1jWzFdLGY9am8obCxoLG8sYSxpKSxuIT09dCYmbi5kaXNwb3NlKCkscyE9PWUmJnMuZGlzcG9zZSgpLFsyLGZdfX0pKX0pKX0sTmg9QW4oe25vbk1heFN1cHByZXNzaW9uV2l0aFNjb3JlXzpmdW5jdGlvbih0LGUsbixyLG8sYSl7dm9pZCAwPT09ciYmKHI9LjUpLHZvaWQgMD09PW8mJihvPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSksdm9pZCAwPT09YSYmKGE9MCk7dmFyIGk9bW4odCxcImJveGVzXCIsXCJub25NYXhTdXBwcmVzc2lvblwiKSxzPW1uKGUsXCJzY29yZXNcIixcIm5vbk1heFN1cHByZXNzaW9uXCIpLHU9a2goaSxzLG4scixvLGEpLGM9e21heE91dHB1dFNpemU6bj11Lm1heE91dHB1dFNpemUsaW91VGhyZXNob2xkOnI9dS5pb3VUaHJlc2hvbGQsc2NvcmVUaHJlc2hvbGQ6bz11LnNjb3JlVGhyZXNob2xkLHNvZnRObXNTaWdtYTphPXUuc29mdE5tc1NpZ21hfSxsPUx0LnJ1bktlcm5lbChcIk5vbk1heFN1cHByZXNzaW9uVjVcIix7Ym94ZXM6aSxzY29yZXM6c30sYyk7cmV0dXJue3NlbGVjdGVkSW5kaWNlczpsWzBdLHNlbGVjdGVkU2NvcmVzOmxbMV19fX0pLEZoPWZ1bmN0aW9uKHQsZSxvLGEsaSxzKXtyZXR1cm4gdm9pZCAwPT09YSYmKGE9LjUpLHZvaWQgMD09PWkmJihpPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSksdm9pZCAwPT09cyYmKHM9MCksbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG4sdSxjLGwsaCxmLGQ7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm4gbj1tbih0LFwiYm94ZXNcIixcIm5vbk1heFN1cHByZXNzaW9uQXN5bmNcIiksdT1tbihlLFwic2NvcmVzXCIsXCJub25NYXhTdXBwcmVzc2lvbkFzeW5jXCIpLGM9a2gobix1LG8sYSxpLHMpLG89Yy5tYXhPdXRwdXRTaXplLGE9Yy5pb3VUaHJlc2hvbGQsaT1jLnNjb3JlVGhyZXNob2xkLHM9Yy5zb2Z0Tm1zU2lnbWEsWzQsUHJvbWlzZS5hbGwoW24uZGF0YSgpLHUuZGF0YSgpXSldO2Nhc2UgMTpyZXR1cm4gbD1yLnNlbnQoKSxoPWxbMF0sZj1sWzFdLGQ9WG8oaCxmLG8sYSxpLHMpLG4hPT10JiZuLmRpc3Bvc2UoKSx1IT09ZSYmdS5kaXNwb3NlKCksWzIsZF19fSkpfSkpfSxfaD1Bbih7Y3JvcEFuZFJlc2l6ZV86ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPW1uKHQsXCJpbWFnZVwiLFwiY3JvcEFuZFJlc2l6ZVwiKSxzPW1uKGUsXCJib3hlc1wiLFwiY3JvcEFuZFJlc2l6ZVwiLFwiZmxvYXQzMlwiKSx1PW1uKG4sXCJib3hJbmRcIixcImNyb3BBbmRSZXNpemVcIixcImludDMyXCIpO289b3x8XCJiaWxpbmVhclwiLGE9YXx8MDt2YXIgYz1zLnNoYXBlWzBdO3JldHVybiBDKDQ9PT1pLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjcm9wQW5kUmVzaXplOiBpbWFnZSBtdXN0IGJlIHJhbmsgNCxidXQgZ290IHJhbmsgXCIraS5yYW5rK1wiLlwifSkpLEMoMj09PXMucmFuayYmND09PXMuc2hhcGVbMV0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjcm9wQW5kUmVzaXplOiBib3hlcyBtdXN0IGJlIGhhdmUgc2l6ZSBbXCIrYytcIiw0XSBidXQgaGFkIHNoYXBlIFwiK3Muc2hhcGUrXCIuXCJ9KSksQygxPT09dS5yYW5rJiZ1LnNoYXBlWzBdPT09YywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNyb3BBbmRSZXNpemU6IGJveEluZCBtdXN0IGJlIGhhdmUgc2l6ZSBbXCIrYytcIl0gYnV0IGhhZCBzaGFwZSBcIitzLnNoYXBlK1wiLlwifSkpLEMoMj09PXIubGVuZ3RoLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY3JvcEFuZFJlc2l6ZTogY3JvcFNpemUgbXVzdCBiZSBvZiBsZW5ndGggMiwgYnV0IGdvdCBsZW5ndGggXCIrci5sZW5ndGgrXCIuXCJ9KSksQyhyWzBdPj0xJiZyWzFdPj0xLChmdW5jdGlvbigpe3JldHVyblwiY3JvcFNpemUgbXVzdCBiZSBhdGxlYXN0IFsxLDFdLCBidXQgd2FzIFwiK3J9KSksQyhcImJpbGluZWFyXCI9PT1vfHxcIm5lYXJlc3RcIj09PW8sKGZ1bmN0aW9uKCl7cmV0dXJuXCJtZXRob2QgbXVzdCBiZSBiaWxpbmVhciBvciBuZWFyZXN0LCBidXQgd2FzIFwiK299KSksTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jcm9wQW5kUmVzaXplKGkscyx1LHIsbyxhKX0pLHtpbWFnZXM6aSxib3hlczpzLGJveEluZDp1fSxudWxsLFwiQ3JvcEFuZFJlc2l6ZVwiLHttZXRob2Q6byxleHRyYXBvbGF0aW9uVmFsdWU6YSxjcm9wU2l6ZTpyfSl9fSksT2g9T2JqZWN0LmZyZWV6ZSh7cmVzaXplQmlsaW5lYXI6U2gscmVzaXplTmVhcmVzdE5laWdoYm9yOkFoLG5vbk1heFN1cHByZXNzaW9uOkRoLG5vbk1heFN1cHByZXNzaW9uQXN5bmM6VGgsbm9uTWF4U3VwcHJlc3Npb25XaXRoU2NvcmU6Tmgsbm9uTWF4U3VwcHJlc3Npb25XaXRoU2NvcmVBc3luYzpGaCxjcm9wQW5kUmVzaXplOl9ofSksTWg9ZnVuY3Rpb24odCxlKXtyZXR1cm4hKHQ+MCl8fFwibGluZWFyXCI9PT1lfSxCaD1mdW5jdGlvbih0LGUsbil7aWYobnVsbD09bnx8XCJsaW5lYXJcIj09PW4pcmV0dXJuIHQ7aWYoXCJyZWx1XCI9PT1uKXJldHVybiB0Lm11bChlLnN0ZXAoKSk7dGhyb3cgbmV3IEVycm9yKFwiR3JhZGllbnQgZm9yIGFjdGl2YXRpb24gXCIrbitcIiBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWQgeWV0LlwiKX0sUGg9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLHI9RW8odC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gci5sZW5ndGg+MCYmKG49bi5zdW0ocikpLG4ucmVzaGFwZSh0LnNoYXBlKX0sTGg9ZnVuY3Rpb24odCxlLG4pe2lmKFwibGluZWFyXCI9PT1lKXJldHVybiB0O2lmKFwicmVsdVwiPT09ZSlyZXR1cm4gQmwodCk7aWYoXCJlbHVcIj09PWUpcmV0dXJuIF9sKHQpO2lmKFwicmVsdTZcIj09PWUpcmV0dXJuIFBsKHQpO2lmKFwicHJlbHVcIj09PWUpcmV0dXJuIE1sKHQsbik7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBmdXNlZCBhY3RpdmF0aW9uIFwiK2UrXCIuXCIpfTt2YXIgV2g9QW4oe2Z1c2VkTWF0TXVsXzpmdW5jdGlvbih0KXt2YXIgZSxuPXQuYSxyPXQuYixvPXQudHJhbnNwb3NlQSxhPXZvaWQgMCE9PW8mJm8saT10LnRyYW5zcG9zZUIscz12b2lkIDAhPT1pJiZpLHU9dC5iaWFzLGM9dC5hY3RpdmF0aW9uLGw9dm9pZCAwPT09Yz9cImxpbmVhclwiOmMsaD10LnByZWx1QWN0aXZhdGlvbldlaWdodHM7aWYoITE9PT1NaChMdC5zdGF0ZS5ncmFkaWVudERlcHRoLGwpKXt2YXIgZj1lbChuLHIsYSxzKTtyZXR1cm4gbnVsbCE9dSYmKGY9cmMoZix1KSksTGgoZixsLGgpfXZhciBkPW1uKG4sXCJhXCIsXCJmdXNlZCBtYXRNdWxcIikscD1tbihyLFwiYlwiLFwiZnVzZWQgbWF0TXVsXCIpO2U9TnQoZCxwKSxkPWVbMF0scD1lWzFdO3ZhciB2PWE/ZC5zaGFwZVtkLnJhbmstMl06ZC5zaGFwZVtkLnJhbmstMV0sbT1zP3Auc2hhcGVbcC5yYW5rLTFdOnAuc2hhcGVbcC5yYW5rLTJdLGc9YT9kLnNoYXBlW2QucmFuay0xXTpkLnNoYXBlW2QucmFuay0yXSx5PXM/cC5zaGFwZVtwLnJhbmstMl06cC5zaGFwZVtwLnJhbmstMV0seD1kLnNoYXBlLnNsaWNlKDAsLTIpLGI9cC5zaGFwZS5zbGljZSgwLC0yKSx3PWsoeCksRT1rKGIpO0MoZC5yYW5rPj0yJiZwLnJhbms+PTImJmQucmFuaz09PXAucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIG1hdE11bDogaW5wdXRzIG11c3QgaGF2ZSB0aGUgc2FtZSByYW5rIG9mIGF0IGxlYXN0IDIsIGdvdCByYW5rcyBcIitkLnJhbmsrXCIgYW5kIFwiK3AucmFuaytcIi5cIn0pKSxDKFMoeCxiKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIG1hdE11bDogb3V0ZXIgZGltZW5zaW9ucyAoXCIreCtcIikgYW5kIChcIitiK1wiKSBvZiBUZW5zb3JzIHdpdGggc2hhcGVzIFwiK2Quc2hhcGUrXCIgYW5kIFwiK3Auc2hhcGUrXCIgbXVzdCBtYXRjaC5cIn0pKSxDKHY9PT1tLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZnVzZWQgbWF0TXVsOiBpbm5lciBzaGFwZXMgKFwiK3YrXCIpIGFuZCAoXCIrbStcIikgb2YgVGVuc29ycyB3aXRoIHNoYXBlcyBcIitkLnNoYXBlK1wiIGFuZCBcIitwLnNoYXBlK1wiIGFuZCB0cmFuc3Bvc2VBPVwiK2ErXCIgYW5kIHRyYW5zcG9zZUI9XCIrcytcIiBtdXN0IG1hdGNoLlwifSkpO3ZhciBSLEksQT1kLnNoYXBlLnNsaWNlKDAsLTIpLmNvbmNhdChbZyx5XSksRD1hP2QuYXMzRCh3LHYsZyk6ZC5hczNEKHcsZyx2KSxUPXM/cC5hczNEKEUseSxtKTpwLmFzM0QoRSxtLHkpO251bGwhPXUmJlJvKEEsKFI9TnQoUj1tbih1LFwiYmlhc1wiLFwiZnVzZWQgbWF0TXVsXCIpLGQpWzBdKS5zaGFwZSksbnVsbCE9aCYmKEk9bW4oaCxcInByZWx1IHdlaWdodHNcIixcImZ1c2VkIG1hdE11bFwiKSk7dmFyIE49e2E6RCxiOlR9O251bGwhPXUmJihOLmJpYXM9UiksbnVsbCE9aCYmKE4ucHJlbHVBY3RpdmF0aW9uV2VpZ2h0cz1JKTt2YXIgRj1bRCxUXTtyZXR1cm4gTHQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LmZ1c2VkQmF0Y2hNYXRNdWwoe2E6RCxiOlQsdHJhbnNwb3NlQTphLHRyYW5zcG9zZUI6cyxiaWFzOlIsYWN0aXZhdGlvbjpsLHByZWx1QWN0aXZhdGlvbldlaWdodHM6SX0pO3JldHVybiBlKFtELFQsbl0pLG59KSxOLChmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLG89ZVsyXSxpPUJoKHQsbyxsKSxjPXt9O3JldHVybiBudWxsIT11JiYoYz17YmlhczpmdW5jdGlvbigpe3JldHVybiBQaChSLGkpfX0pLGF8fHM/IWEmJnM/T2JqZWN0LmFzc2lnbih7YTpmdW5jdGlvbigpe3JldHVybiBpLm1hdE11bChyLCExLCExKX0sYjpmdW5jdGlvbigpe3JldHVybiBpLm1hdE11bChuLCEwLCExKX19LGMpOmEmJiFzP09iamVjdC5hc3NpZ24oe2E6ZnVuY3Rpb24oKXtyZXR1cm4gci5tYXRNdWwoaSwhMSwhMCl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gbi5tYXRNdWwoaSwhMSwhMSl9fSxjKTpPYmplY3QuYXNzaWduKHthOmZ1bmN0aW9uKCl7cmV0dXJuIHIubWF0TXVsKGksITAsITApfSxiOmZ1bmN0aW9uKCl7cmV0dXJuIGkubWF0TXVsKG4sITAsITApfX0sYyk6T2JqZWN0LmFzc2lnbih7YTpmdW5jdGlvbigpe3JldHVybiBpLm1hdE11bChyLCExLCEwKX0sYjpmdW5jdGlvbigpe3JldHVybiBuLm1hdE11bChpLCEwLCExKX19LGMpfSksXCJfRnVzZWRNYXRNdWxcIix7dHJhbnNwb3NlQTphLHRyYW5zcG9zZUI6cyxhY3RpdmF0aW9uOmx9LEYsWyEwXSkucmVzaGFwZShBKX19KSxVaD1Bbih7ZnVzZWRDb252MmRfOmZ1bmN0aW9uKHQpe3ZhciBlPXQueCxuPXQuZmlsdGVyLHI9dC5zdHJpZGVzLG89dC5wYWQsYT10LmRhdGFGb3JtYXQsaT12b2lkIDA9PT1hP1wiTkhXQ1wiOmEscz10LmRpbGF0aW9ucyx1PXZvaWQgMD09PXM/WzEsMV06cyxjPXQuZGltUm91bmRpbmdNb2RlLGw9dC5iaWFzLGg9dC5hY3RpdmF0aW9uLGY9dm9pZCAwPT09aD9cImxpbmVhclwiOmgsZD10LnByZWx1QWN0aXZhdGlvbldlaWdodHM7aWYoZj1mfHxcImxpbmVhclwiLCExPT09TWgoTHQuc3RhdGUuZ3JhZGllbnREZXB0aCxmKSl7dmFyIHA9cWMoZSxuLHIsbyxpLHUsYyk7cmV0dXJuIG51bGwhPWwmJihwPXJjKHAsbCkpLExoKHAsZixkKX12YXIgdj1tbihlLFwieFwiLFwiY29udjJkXCIpLG09bW4obixcImZpbHRlclwiLFwiY29udjJkXCIpLGc9dix5PSExOzM9PT12LnJhbmsmJih5PSEwLGc9di5hczREKDEsdi5zaGFwZVswXSx2LnNoYXBlWzFdLHYuc2hhcGVbMl0pKSxDKDQ9PT1nLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBjb252MmQ6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrZy5yYW5rK1wiLlwifSkpLEMoND09PW0ucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGNvbnYyZDogZmlsdGVyIG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrbS5yYW5rK1wiLlwifSkpLG51bGwhPWMmJkMoQShvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGNvbnYyZDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIrYytcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSkpLEMoZy5zaGFwZVszXT09PW0uc2hhcGVbMl0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGRlcHRoIG9mIGlucHV0IChcIitnLnNoYXBlWzNdK1wiKSBtdXN0IG1hdGNoIGlucHV0IGRlcHRoIGZvciBmaWx0ZXIgXCIrbS5zaGFwZVsyXStcIi5cIn0pKSxDKE1vKHIsdSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MkQ6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK3IrXCIgYW5kIGRpbGF0aW9ucyAnXCIrdStcIidcIn0pKSxDKFwiTkhXQ1wiPT09aSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZDogZ290IGRhdGFGb3JtYXQgb2YgXCIraStcIiBidXQgb25seSBOSFdDIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuXCJ9KSk7dmFyIHgsYix3PVNvKGcuc2hhcGUsbS5zaGFwZSxyLHUsbyxjKTtudWxsIT1sJiYoeD1OdCh4PW1uKGwsXCJiaWFzXCIsXCJmdXNlZCBjb252MmRcIiksdilbMF0sUm8ody5vdXRTaGFwZSx4LnNoYXBlKSksbnVsbCE9ZCYmKGI9bW4oZCxcInByZWx1IHdlaWdodHNcIixcImZ1c2VkIGNvbnYyZFwiKSk7dmFyIEU9e3g6ZyxmaWx0ZXI6bX07bnVsbCE9bCYmKEUuYmlhcz14KSxudWxsIT1kJiYoRS5wcmVsdUFjdGl2YXRpb25XZWlnaHRzPWIpO3ZhciBSPVttLGddLEk9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LmZ1c2VkQ29udjJkKHtpbnB1dDpnLGZpbHRlcjptLGNvbnZJbmZvOncsYmlhczp4LGFjdGl2YXRpb246ZixwcmVsdUFjdGl2YXRpb25XZWlnaHRzOmJ9KTtyZXR1cm4gZShbbSxnLG5dKSxufSksRSwoZnVuY3Rpb24odCxlKXt2YXIgbj1lLGE9blswXSxpPW5bMV0scz1uWzJdLGM9QmgodCxzLGYpO0MoT28odSksKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBncmFkaWVudCBvZiBmdXNlZCBjb252MkQ6IGRpbGF0aW9uIHJhdGVzIGdyZWF0ZXIgdGhhbiAxIGFyZSBub3QgeWV0IHN1cHBvcnRlZCBpbiBncmFkaWVudHMuIEdvdCBkaWxhdGlvbnMgJ1wiK3UrXCInXCJ9KSk7dmFyIGg9e307cmV0dXJuIG51bGwhPWwmJihoPXtiaWFzOmZ1bmN0aW9uKCl7cmV0dXJuIFBoKHgsYyl9fSksT2JqZWN0LmFzc2lnbih7eDpmdW5jdGlvbigpe3JldHVybiBYYyhpLnNoYXBlLGMsYSxyLG8pfSxmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gamMoaSxjLGEuc2hhcGUscixvKX19LGgpfSksXCJGdXNlZENvbnYyRFwiLHtjb252SW5mbzp3LGFjdGl2YXRpb246Zn0sUixbITBdKTtyZXR1cm4geT9JLmFzM0QoSS5zaGFwZVsxXSxJLnNoYXBlWzJdLEkuc2hhcGVbM10pOkl9fSksVmg9QW4oe2Z1c2VkRGVwdGh3aXNlQ29udjJkXzpmdW5jdGlvbih0KXt2YXIgZT10Lngsbj10LmZpbHRlcixyPXQuc3RyaWRlcyxvPXQucGFkLGE9dC5kYXRhRm9ybWF0LGk9dm9pZCAwPT09YT9cIk5IV0NcIjphLHM9dC5kaWxhdGlvbnMsdT12b2lkIDA9PT1zP1sxLDFdOnMsYz10LmRpbVJvdW5kaW5nTW9kZSxsPXQuYmlhcyxoPXQuYWN0aXZhdGlvbixmPXZvaWQgMD09PWg/XCJsaW5lYXJcIjpoLGQ9dC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzO2lmKCExPT09TWgoTHQuc3RhdGUuZ3JhZGllbnREZXB0aCxmKSl7dmFyIHA9WWMoZSxuLHIsbyxpLHUsYyk7cmV0dXJuIG51bGwhPWwmJihwPXJjKHAsbCkpLExoKHAsZixkKX12YXIgdj1tbihlLFwieFwiLFwiZGVwdGh3aXNlQ29udjJkXCIpLG09bW4obixcImZpbHRlclwiLFwiZGVwdGh3aXNlQ29udjJkXCIpLGc9dix5PSExOzM9PT12LnJhbmsmJih5PSEwLGc9di5hczREKDEsdi5zaGFwZVswXSx2LnNoYXBlWzFdLHYuc2hhcGVbMl0pKSxDKDQ9PT1nLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBkZXB0aHdpc2VDb252MmQ6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrZy5yYW5rK1wiLlwifSkpLEMoND09PW0ucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGRlcHRod2lzZUNvbnYyZDogZmlsdGVyIG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrbS5yYW5rK1wiLlwifSkpLEMoZy5zaGFwZVszXT09PW0uc2hhcGVbMl0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBkZXB0aHdpc2VDb252MmQ6IG51bWJlciBvZiBpbnB1dCBjaGFubmVscyAoXCIrZy5zaGFwZVszXStcIikgbXVzdCBtYXRjaCB0aGUgaW5DaGFubmVscyBkaW1lbnNpb24gaW4gZmlsdGVyIFwiK20uc2hhcGVbMl0rXCIuXCJ9KSksbnVsbD09dSYmKHU9WzEsMV0pLEMoTW8ocix1KSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGRlcHRod2lzZUNvbnYyZDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrcitcIiBhbmQgZGlsYXRpb25zICdcIit1K1wiJ1wifSkpLG51bGwhPWMmJkMoQShvKSwoZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGRlcHRod2lzZUNvbnYyZDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nIGRpbVJvdW5kaW5nTW9kZSBcIitjK1wiIGJ1dCBnb3QgcGFkIFwiK28rXCIuXCJ9KSk7dmFyIHgsYix3PVNvKGcuc2hhcGUsbS5zaGFwZSxyLHUsbyxjLCEwKTtudWxsIT1sJiYoeD1OdCh4PW1uKGwsXCJiaWFzXCIsXCJmdXNlZCBjb252MmRcIiksdilbMF0sUm8ody5vdXRTaGFwZSx4LnNoYXBlKSksbnVsbCE9ZCYmKGI9bW4oZCxcInByZWx1IHdlaWdodHNcIixcImZ1c2VkIGRlcHRod2lzZUNvbnYyZFwiKSk7dmFyIEU9e3g6ZyxmaWx0ZXI6bX07bnVsbCE9bCYmKEUuYmlhcz14KSxudWxsIT1kJiYoRS5wcmVsdUFjdGl2YXRpb25XZWlnaHRzPWIpO3ZhciBSPVttLGddLEk9THQucnVuS2VybmVsRnVuYygoZnVuY3Rpb24odCxlKXt2YXIgbj10LmZ1c2VkRGVwdGh3aXNlQ29udjJEKHtpbnB1dDpnLGZpbHRlcjptLGNvbnZJbmZvOncsYmlhczp4LGFjdGl2YXRpb246ZixwcmVsdUFjdGl2YXRpb25XZWlnaHRzOmJ9KTtyZXR1cm4gZShbbSxnLG5dKSxufSksRSwoZnVuY3Rpb24odCxlKXtDKE9vKHUpLChmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZ3JhZGllbnQgb2YgZnVzZWQgZGVwdGh3aXNlQ29udjJkOiBkaWxhdGlvbiByYXRlcyBncmVhdGVyIHRoYW4gMSBhcmUgbm90IHlldCBzdXBwb3J0ZWQuIEdvdCBkaWxhdGlvbnMgJ1wiK3UrXCInXCJ9KSk7dmFyIG49ZVswXSxyPWVbMV0sbz1lWzJdLGE9QmgodCxvLGYpLGk9e307cmV0dXJuIG51bGwhPWwmJihpPXtiaWFzOmZ1bmN0aW9uKCl7cmV0dXJuIFBoKHgsYSl9fSksT2JqZWN0LmFzc2lnbih7eDpmdW5jdGlvbigpe3JldHVybiAkYyhyLnNoYXBlLGEsbix3KX0sZmlsdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIFFjKHIsYSxuLnNoYXBlLHcpfX0saSl9KSxcIkZ1c2VkRGVwdGh3aXNlQ29udjJEXCIse2NvbnZJbmZvOncsYWN0aXZhdGlvbjpmfSxSLFshMF0pO3JldHVybiB5P0kuYXMzRChJLnNoYXBlWzFdLEkuc2hhcGVbMl0sSS5zaGFwZVszXSk6SX19KSx6aD1PYmplY3QuZnJlZXplKHttYXRNdWw6V2gsY29udjJkOlVoLGRlcHRod2lzZUNvbnYyZDpWaH0pLEdoPU9iamVjdC5mcmVlemUoe2ltYWdlOk9oLGxpbmFsZzpJaCxsb3NzZXM6Ymgsc3BlY3RyYWw6SmwsZnVzZWQ6emgsc2lnbmFsOnVoLHNxdWFyZTp0dSxzcXVhcmVkRGlmZmVyZW5jZTpudSxjb252MWQ6SGMsY29udjJkOnFjLGNvbnYzZDpLYyxkZXB0aHdpc2VDb252MmQ6WWMsc2VwYXJhYmxlQ29udjJkOkpjLGNvbnYyZFRyYW5zcG9zZTpaYyxjb252M2RUcmFuc3Bvc2U6dGwsb3A6QW4sYmF0Y2hOb3JtYWxpemF0aW9uMmQ6R3UsYmF0Y2hOb3JtYWxpemF0aW9uM2Q6SHUsYmF0Y2hOb3JtYWxpemF0aW9uNGQ6cXUsYmF0Y2hOb3JtYWxpemF0aW9uOkt1LGJhdGNoTm9ybTpqdSxiYXRjaE5vcm0yZDpYdSxiYXRjaE5vcm0zZDpZdSxiYXRjaE5vcm00ZDokdSxib29sZWFuTWFza0FzeW5jOlVjLGNvbXBsZXg6RG4scmVhbDpUbixpbWFnOk5uLGNvbmNhdDpZbixjb25jYXQxZDokbixjb25jYXQyZDpRbixjb25jYXQzZDpKbixjb25jYXQ0ZDpabixzcGxpdDp0cixtYXRNdWw6ZWwsZG90Om5sLG91dGVyUHJvZHVjdDpybCxyZXZlcnNlOm9sLHJldmVyc2UxZDphbCxyZXZlcnNlMmQ6aWwscmV2ZXJzZTNkOnNsLHJldmVyc2U0ZDp1bCxtYXhQb29sOmhsLGF2Z1Bvb2w6ZmwscG9vbDpkbCxtYXhQb29sM2Q6cGwsYXZnUG9vbDNkOnZsLHNsaWNlOm1sLHNsaWNlMWQ6Z2wsc2xpY2UyZDp5bCxzbGljZTNkOnhsLHNsaWNlNGQ6YmwsYWJzOnJ1LGFjb3M6b3UsYWNvc2g6YXUsYXNpbjppdSxhc2luaDpzdSxhdGFuOnV1LGF0YW5oOmN1LGNlaWw6bHUsY2xpcEJ5VmFsdWU6aHUsY29zOmZ1LGNvc2g6ZHUsZXJmOnB1LGV4cDp2dSxleHBtMTptdSxmbG9vcjpndSxsb2c6eXUsbG9nMXA6eHUsbG9nU2lnbW9pZDpidSxuZWc6d3UscmVjaXByb2NhbDpDdSxyb3VuZDpFdSxyc3FydDpSdSxzaWdtb2lkOkl1LHNpZ246a3UsaXNOYU46U3UsaXNJbmY6QXUsaXNGaW5pdGU6RHUsc2luOlR1LHNpbmg6TnUsc29mdHBsdXM6RnUsc3FydDpfdSxzdGVwOk91LHRhbjpNdSx0YW5oOkJ1LGFsbDpDbCxhbnk6RWwsYXJnTWF4OlJsLGFyZ01pbjpJbCxsb2dTdW1FeHA6a2wsbWF4OlNsLG1lYW46QWwsbWluOkRsLG1vbWVudHM6VGwsc3VtOk5sLHByb2Q6RmwsZXF1YWw6UmMsZXF1YWxTdHJpY3Q6SWMsZ3JlYXRlcjprYyxncmVhdGVyRXF1YWw6U2MsZ3JlYXRlckVxdWFsU3RyaWN0OkFjLGdyZWF0ZXJTdHJpY3Q6RGMsbGVzczpUYyxsZXNzRXF1YWw6TmMsbGVzc0VxdWFsU3RyaWN0OkZjLGxlc3NTdHJpY3Q6X2Msbm90RXF1YWw6T2Msbm90RXF1YWxTdHJpY3Q6TWMsYWRkOnJjLGFkZE46b2MsYWRkU3RyaWN0OmFjLGF0YW4yOmljLGRpdjpzYyxkaXZOb05hbjp1YyxkaXZTdHJpY3Q6Y2MsZmxvb3JEaXY6bGMsbWF4aW11bTpoYyxtYXhpbXVtU3RyaWN0OmZjLG1pbmltdW06ZGMsbWluaW11bVN0cmljdDpwYyxtb2Q6dmMsbW9kU3RyaWN0Om1jLG11bDpnYyxtdWxTdHJpY3Q6eWMscG93OnhjLHBvd1N0cmljdDpiYyxzcXVhcmVkRGlmZmVyZW5jZVN0cmljdDp3YyxzdWI6Q2Msc3ViU3RyaWN0OkVjLGVsdTpfbCxsZWFreVJlbHU6T2wscHJlbHU6TWwscmVsdTpCbCxyZWx1NjpQbCxzZWx1OkxsLGxvZ2ljYWxBbmQ6UXUsbG9naWNhbE5vdDpKdSxsb2dpY2FsT3I6WnUsbG9naWNhbFhvcjp0Yyx3aGVyZTplYyx3aGVyZUFzeW5jOm5jLGJ1ZmZlcjpkcixwcmludDpwcixiYXRjaFRvU3BhY2VORDp2cixicm9hZGNhc3RUbzptcixjYXN0OmdyLGNsb25lOnlyLGN1bXN1bTp4cixkZXB0aFRvU3BhY2U6YnIsZXhwYW5kRGltczp3cixleWU6Q3IsbXVsdGlub21pYWw6RXIsb25lSG90OlJyLHBhZDpJcixwYWQxZDprcixwYWQyZDpTcixwYWQzZDpBcixwYWQ0ZDpEcixyYW5kOlRyLHJhbmRvbU5vcm1hbDpOcixyYW5kb21HYW1tYTpGcixyYW5kb21Vbmlmb3JtOl9yLHJlc2hhcGU6T3Isc3BhY2VUb0JhdGNoTkQ6TXIsc3F1ZWV6ZTpCcixzdGFjazpQcix0aWxlOkxyLHRydW5jYXRlZE5vcm1hbDpXcix1bnN0YWNrOlVyLHNldGRpZmYxZEFzeW5jOlZyLGZpbGw6SG4sbGluc3BhY2U6cW4sb25lczp6bixyYW5nZTpLbixzY2FsYXI6T24sdGVuc29yOkZuLHRlbnNvcjFkOk1uLHRlbnNvcjJkOkJuLHRlbnNvcjNkOlBuLHRlbnNvcjRkOkxuLHRlbnNvcjVkOlduLHRlbnNvcjZkOlVuLHZhcmlhYmxlOlZuLHplcm9zOkduLG9uZXNMaWtlOmpuLHplcm9zTGlrZTpYbix0cmFuc3Bvc2U6V2wsc29mdG1heDpnbyxsb2dTb2Z0bWF4OnlvLGxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uOlVsLG5vcm06VmwsZ2F0aGVyOkxjLHVuc29ydGVkU2VnbWVudFN1bTpXYyxiYXNpY0xTVE1DZWxsOnpsLG11bHRpUk5OQ2VsbDpHbCxtb3ZpbmdBdmVyYWdlOkhsLHN0cmlkZWRTbGljZTpxbCx0b3BrOktsLHNjYXR0ZXJORDpqbCxmZnQ6WGwsaWZmdDpZbCxyZmZ0OiRsLGlyZmZ0OlFsLHNwYXJzZVRvRGVuc2U6WmwsZ2F0aGVyTkQ6dGgsZGlhZzplaCxkcm9wb3V0Om5oLGhhbm5XaW5kb3c6b2gsaGFtbWluZ1dpbmRvdzphaCxmcmFtZTppaCxzdGZ0OnNoLGluVG9wS0FzeW5jOmxofSk7ZnVuY3Rpb24gSGgodCxlKXtBcnJheS5pc0FycmF5KHQpfHwodD1bdF0pLHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7bnVsbCE9dCYmQyhcImNvbXBsZXg2NFwiIT09dC5kdHlwZSwoZnVuY3Rpb24oKXtyZXR1cm4gZStcIiBkb2VzIG5vdCBzdXBwb3J0IGNvbXBsZXg2NCB0ZW5zb3JzLlwifSkpfSkpfWZ1bmN0aW9uIHFoKHQsZSxuLHIpe2lmKFwibGluZWFyXCI9PT1uKXJldHVybiB0LmxpbmVhcihlKTtpZihcInJlbHVcIj09PW4pcmV0dXJuIHQucmVsdShlKTtpZihcImVsdVwiPT09bilyZXR1cm4gdC5lbHUoZSk7aWYoXCJyZWx1NlwiPT09bilyZXR1cm4gdC5yZWx1NihlKTtpZihcInByZWx1XCI9PT1uKXJldHVybiB0LnByZWx1KGUscik7dGhyb3cgbmV3IEVycm9yKFwiQWN0aXZhdGlvbiBcIituK1wiIGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZCBmb3IgdGhlIENQVSBiYWNrZW5kLlwiKX12YXIgS2g9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbygpe3ZhciBlPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gZS5ibG9ja1NpemU9NDgsZS5maXJzdFVzZT0hMCxlLmRhdGE9bmV3IHhvKGUsTHQpLGV9cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbih0LGUsbil7dGhpcy5maXJzdFVzZSYmKHRoaXMuZmlyc3RVc2U9ITEsaSgpLmdldChcIklTX05PREVcIikmJmRuKFwiXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcbkhpIHRoZXJlIPCfkYsuIExvb2tzIGxpa2UgeW91IGFyZSBydW5uaW5nIFRlbnNvckZsb3cuanMgaW4gTm9kZS5qcy4gVG8gc3BlZWQgdGhpbmdzIHVwIGRyYW1hdGljYWxseSwgaW5zdGFsbCBvdXIgbm9kZSBiYWNrZW5kLCB3aGljaCBiaW5kcyB0byBUZW5zb3JGbG93IEMrKywgYnkgcnVubmluZyBucG0gaSBAdGVuc29yZmxvdy90ZmpzLW5vZGUsIG9yIG5wbSBpIEB0ZW5zb3JmbG93L3RmanMtbm9kZS1ncHUgaWYgeW91IGhhdmUgQ1VEQS4gVGhlbiBjYWxsIHJlcXVpcmUoJ0B0ZW5zb3JmbG93L3RmanMtbm9kZScpOyAoLWdwdSBzdWZmaXggZm9yIENVREEpIGF0IHRoZSBzdGFydCBvZiB5b3VyIHByb2dyYW0uIFZpc2l0IGh0dHBzOi8vZ2l0aHViLmNvbS90ZW5zb3JmbG93L3RmanMtbm9kZSBmb3IgbW9yZSBkZXRhaWxzLlxcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT1cIikpO3ZhciByPXt9O3JldHVybiB0aGlzLmRhdGEuc2V0KHIse3ZhbHVlczp0LGR0eXBlOm59KSxyfSxvLnByb3RvdHlwZS5tb3ZlPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMuZGF0YS5zZXQodCx7dmFsdWVzOmUsZHR5cGU6cn0pfSxvLnByb3RvdHlwZS5udW1EYXRhSWRzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZGF0YS5udW1EYXRhSWRzKCl9LG8ucHJvdG90eXBlLnJlYWQ9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3JldHVyblsyLHRoaXMucmVhZFN5bmModCldfSkpfSkpfSxvLnByb3RvdHlwZS5yZWFkU3luYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmRhdGEuZ2V0KHQpLG49ZS5kdHlwZSxyPWUuY29tcGxleFRlbnNvcnM7cmV0dXJuXCJjb21wbGV4NjRcIj09PW4/Vm8odGhpcy5yZWFkU3luYyhyLnJlYWwuZGF0YUlkKSx0aGlzLnJlYWRTeW5jKHIuaW1hZy5kYXRhSWQpKTp0aGlzLmRhdGEuZ2V0KHQpLnZhbHVlc30sby5wcm90b3R5cGUuYnVmZmVyU3luYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPWU7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpdHJ5e249ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiBvdCh0KX0pKX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGVjb2RlIGVuY29kZWQgc3RyaW5nIGJ5dGVzIGludG8gdXRmLThcIil9cmV0dXJuIGRyKHQuc2hhcGUsdC5kdHlwZSxuKX0sby5wcm90b3R5cGUubWFrZU91dHB1dD1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy53cml0ZSh0LGUsbik7cmV0dXJuIEx0Lm1ha2VUZW5zb3JGcm9tRGF0YUlkKHIsZSxuLHRoaXMpfSxvLnByb3RvdHlwZS5kaXNwb3NlRGF0YT1mdW5jdGlvbih0KXtpZih0aGlzLmRhdGEuaGFzKHQpKXt2YXIgZT10aGlzLmRhdGEuZ2V0KHQpLmNvbXBsZXhUZW5zb3JzO251bGwhPWUmJihlLnJlYWwuZGlzcG9zZSgpLGUuaW1hZy5kaXNwb3NlKCkpLHRoaXMuZGF0YS5kZWxldGUodCl9fSxvLnByb3RvdHlwZS50aW1lPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihuKXtyZXR1cm4gZT1ldCgpLHQoKSxbMix7a2VybmVsTXM6ZXQoKS1lfV19KSl9KSl9LG8ucHJvdG90eXBlLm1lbW9yeT1mdW5jdGlvbigpe3JldHVybnt1bnJlbGlhYmxlOiEwLHJlYXNvbnM6W1wiVGhlIHJlcG9ydGVkIG1lbW9yeSBpcyBhbiB1cHBlciBib3VuZC4gRHVlIHRvIGF1dG9tYXRpYyBnYXJiYWdlIGNvbGxlY3Rpb24sIHRoZSB0cnVlIGFsbG9jYXRlZCBtZW1vcnkgbWF5IGJlIGxlc3MuXCJdfX0sby5wcm90b3R5cGUuY29tcGxleD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMubWFrZU91dHB1dChudWxsLHQuc2hhcGUsXCJjb21wbGV4NjRcIik7cmV0dXJuIHRoaXMuZGF0YS5nZXQobi5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzPXtyZWFsOkx0LmtlZXAodC5jbG9uZSgpKSxpbWFnOkx0LmtlZXAoZS5jbG9uZSgpKX0sbn0sby5wcm90b3R5cGUucmVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhLmdldCh0LmRhdGFJZCkuY29tcGxleFRlbnNvcnMucmVhbC5jbG9uZSgpfSxvLnByb3RvdHlwZS5pbWFnPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRhdGEuZ2V0KHQuZGF0YUlkKS5jb21wbGV4VGVuc29ycy5pbWFnLmNsb25lKCl9LG8ucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSxuKXtpZihIaCh0LFwic2xpY2VcIiksaW8odC5zaGFwZSxlLG4pKXt2YXIgcj1zbyhlLHQuc3RyaWRlcyksbz1rKG4pO3JldHVybiBGbih0aGlzLnJlYWRTeW5jKHQuZGF0YUlkKS5zdWJhcnJheShyLHIrbyksbix0LmR0eXBlKX1mb3IodmFyIGE9ZHIobix0LmR0eXBlKSxpPXRoaXMuYnVmZmVyU3luYyh0KSxzPTA7czxhLnNpemU7KytzKXt2YXIgdT1hLmluZGV4VG9Mb2MocykubWFwKChmdW5jdGlvbih0LG4pe3JldHVybiB0K2Vbbl19KSk7YS52YWx1ZXNbc109aS5nZXQuYXBwbHkoaSx1KX1yZXR1cm4gYS50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5zdHJpZGVkU2xpY2U9ZnVuY3Rpb24odCxlLG4scil7SGgodCxcInN0cmlkZWRTbGljZVwiKTt2YXIgbz1ybyhlLG4scik7aWYoby5zb21lKChmdW5jdGlvbih0KXtyZXR1cm4gMD09PXR9KSkpcmV0dXJuIEZuKFtdLG8pO2Zvcih2YXIgYT1kcihvLHQuZHR5cGUpLGk9dGhpcy5idWZmZXJTeW5jKHQpLHM9MDtzPGEuc2l6ZTtzKyspe2Zvcih2YXIgdT1hLmluZGV4VG9Mb2MocyksYz1uZXcgQXJyYXkodS5sZW5ndGgpLGw9MDtsPGMubGVuZ3RoO2wrKyljW2xdPXVbbF0qcltsXStlW2xdO2Euc2V0LmFwcGx5KGEsW2kuZ2V0LmFwcGx5KGksYyldLmNvbmNhdCh1KSl9cmV0dXJuIGEudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuZGlhZz1mdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1kcihbdC5zaXplLHQuc2l6ZV0sdC5kdHlwZSkscj1uLnZhbHVlcyxvPTA7bzxlLmxlbmd0aDtvKyspcltvKnQuc2l6ZStvXT1lW29dO3JldHVybiBuLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLnVuc3RhY2s9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dC5zaGFwZVtlXSxyPW5ldyBBcnJheSh0LnJhbmstMSksbz0wLGE9MDthPHQucmFuazthKyspYSE9PWUmJihyW28rK109dC5zaGFwZVthXSk7dmFyIGk9bmV3IEFycmF5KHQucmFuaykuZmlsbCgwKSxzPXQuc2hhcGUuc2xpY2UoKTtzW2VdPTE7dmFyIHU9bmV3IEFycmF5KG4pO2ZvcihhPTA7YTx1Lmxlbmd0aDthKyspaVtlXT1hLHVbYV09dGhpcy5zbGljZSh0LGkscykucmVzaGFwZShyKTtyZXR1cm4gdX0sby5wcm90b3R5cGUucmV2ZXJzZT1mdW5jdGlvbih0LGUpe0hoKHQsXCJyZXZlcnNlXCIpO2Zvcih2YXIgbj1kcih0LnNoYXBlLHQuZHR5cGUpLHI9dGhpcy5idWZmZXJTeW5jKHQpLG89ZnVuY3Rpb24obyl7dmFyIGE9bi5pbmRleFRvTG9jKG8pLGk9YS5zbGljZSgpO2UuZm9yRWFjaCgoZnVuY3Rpb24oZSl7cmV0dXJuIGlbZV09dC5zaGFwZVtlXS0xLWlbZV19KSksbi5zZXQuYXBwbHkobixbci5nZXQuYXBwbHkocixpKV0uY29uY2F0KGEpKX0sYT0wO2E8bi5zaXplO2ErKylvKGEpO3JldHVybiBuLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmNvbmNhdD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7aWYoXCJjb21wbGV4NjRcIj09PXRbMF0uZHR5cGUpe3ZhciByPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gVG4odCl9KSksbz10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIE5uKHQpfSkpO3JldHVybiBEbih0aGlzLmNvbmNhdChyLGUpLHRoaXMuY29uY2F0KG8sZSkpfXZhciBhPXQubWFwKChmdW5jdGlvbih0KXt2YXIgbj1rKHQuc2hhcGUuc2xpY2UoZSkpO3JldHVybiB0LmFzMkQoLTEsbil9KSksaT1TbihhLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KSksMSkscz1kcihpLHRbMF0uZHR5cGUpLnZhbHVlcztpZigxPT09YVswXS5zaGFwZVswXSl7dmFyIHU9MDthLmZvckVhY2goKGZ1bmN0aW9uKHQpe3Muc2V0KG4ucmVhZFN5bmModC5kYXRhSWQpLHUpLHUrPXQuc2l6ZX0pKX1lbHNle3ZhciBjPTA7YS5mb3JFYWNoKChmdW5jdGlvbih0KXtmb3IodmFyIGU9bi5yZWFkU3luYyh0LmRhdGFJZCkscj0wLG89MDtvPHQuc2hhcGVbMF07KytvKWZvcih2YXIgYT1vKmlbMV0rYyx1PTA7dTx0LnNoYXBlWzFdOysrdSlzW2ErdV09ZVtyKytdO2MrPXQuc2hhcGVbMV19KSl9dmFyIGw9U24odC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNoYXBlfSkpLGUpO3JldHVybiBGbihzLGwsdFswXS5kdHlwZSl9LG8ucHJvdG90eXBlLm5lZz1mdW5jdGlvbih0KXtyZXR1cm4gSGgodCxcIm5lZ1wiKSx0aGlzLm11bHRpcGx5KE9uKC0xKSx0KX0sby5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJjb21wbGV4NjRcIj09PXQuZHR5cGV8fFwiY29tcGxleDY0XCI9PT1lLmR0eXBlP3RoaXMuYnJvYWRjYXN0ZWRCaW5hcnlDb21wbGV4T3AodC5jYXN0KFwiY29tcGxleDY0XCIpLGUuY2FzdChcImNvbXBsZXg2NFwiKSwoZnVuY3Rpb24odCxlLG4scil7cmV0dXJue3JlYWw6dCtuLGltYWc6ZStyfX0pKTp0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLER0KHQuZHR5cGUsZS5kdHlwZSksKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX0pKX0sby5wcm90b3R5cGUuYWRkTj1mdW5jdGlvbih0KXt2YXIgZT10aGlzO0hoKHQsXCJhZGROXCIpO2Zvcih2YXIgbj10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIGUucmVhZFN5bmModC5kYXRhSWQpfSkpLHI9ZHIodFswXS5zaGFwZSx0WzBdLmR0eXBlKSxvPXIudmFsdWVzLGE9MDthPHQubGVuZ3RoO2ErKylmb3IodmFyIGk9blthXSxzPTA7czxvLmxlbmd0aDtzKyspb1tzXSs9aVtzXTtyZXR1cm4gci50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5zb2Z0bWF4PWZ1bmN0aW9uKHQsZSl7dmFyIG49TyhbZV0sdC5zaGFwZSkscj10aGlzLm1heCh0LG4pLG89d24oci5zaGFwZSxuKSxhPXRoaXMuc3VidHJhY3QodCxyLnJlc2hhcGUobykpLGk9dGhpcy5leHAoYSkscz10aGlzLnN1bShpLG4pLnJlc2hhcGUobyk7cmV0dXJuIHRoaXMucmVhbERpdmlkZShpLHMpfSxvLnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3JldHVyblwiY29tcGxleDY0XCI9PT10LmR0eXBlfHxcImNvbXBsZXg2NFwiPT09ZS5kdHlwZT90aGlzLmJyb2FkY2FzdGVkQmluYXJ5Q29tcGxleE9wKHQuY2FzdChcImNvbXBsZXg2NFwiKSxlLmNhc3QoXCJjb21wbGV4NjRcIiksKGZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybntyZWFsOnQtbixpbWFnOmUtcn19KSk6dGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxEdCh0LmR0eXBlLGUuZHR5cGUpLChmdW5jdGlvbih0LGUpe3JldHVybiB0LWV9KSl9LG8ucHJvdG90eXBlLnBvdz1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcInBvd1wiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHQuZHR5cGUsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1hdGgucG93KHQsZSl9KSl9LG8ucHJvdG90eXBlLmJhdGNoTWF0TXVsPWZ1bmN0aW9uKHQsZSxuLHIpe0hoKFt0LGVdLFwibWF0TXVsXCIpO2Zvcih2YXIgbz1uP3Quc2hhcGVbMV06dC5zaGFwZVsyXSxhPW4/dC5zaGFwZVsyXTp0LnNoYXBlWzFdLGk9cj9lLnNoYXBlWzFdOmUuc2hhcGVbMl0scz10LnNoYXBlWzBdLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksYz10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxsPW4/W3Quc3RyaWRlc1swXSwxLHQuc3RyaWRlc1sxXV06W3Quc3RyaWRlc1swXSx0LnN0cmlkZXNbMV0sMV0saD1sWzBdLGY9bFsxXSxkPWxbMl0scD1yP1sxLGUuc3RyaWRlc1sxXSxlLnN0cmlkZXNbMF1dOltlLnN0cmlkZXNbMV0sMSxlLnN0cmlkZXNbMF1dLHY9cFswXSxtPXBbMV0sZz1wWzJdLHk9YSppLHg9ZHIoW3MsYSxpXSx0LmR0eXBlKSxiPXgudmFsdWVzLHc9dGhpcy5ibG9ja1NpemUsQz0wO0M8cztDKyspZm9yKHZhciBFPTA7RTxhO0UrPXcpZm9yKHZhciBSPTA7UjxpO1IrPXcpZm9yKHZhciBJPTA7STxvO0krPXcpZm9yKHZhciBrPU1hdGgubWluKEUrdyxhKSxTPU1hdGgubWluKFIrdyxpKSxBPU1hdGgubWluKEkrdyxvKSxEPUU7RDxrO0QrKylmb3IodmFyIFQ9UjtUPFM7VCsrKXtmb3IodmFyIE49MCxGPUk7RjxBO0YrKylOKz11W0MqaCtEKmYrRipkXSpjW0YqditUKm0rQypnXTtiW0MqeSsoRCppK1QpXSs9Tn1yZXR1cm4geC50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5mdXNlZEJhdGNoTWF0TXVsPWZ1bmN0aW9uKHQpe3ZhciBlPXQuYSxuPXQuYixyPXQudHJhbnNwb3NlQSxvPXQudHJhbnNwb3NlQixhPXQuYmlhcyxpPXQuYWN0aXZhdGlvbixzPXQucHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyx1PXRoaXMuYmF0Y2hNYXRNdWwoZSxuLHIsbyk7cmV0dXJuIGEmJih1PXRoaXMuYWRkKHUsYSkpLGkmJih1PXFoKHRoaXMsdSxpLHMpKSx1fSxvLnByb3RvdHlwZS5tdWx0aXBseT1mdW5jdGlvbih0LGUpe3JldHVyblwiY29tcGxleDY0XCI9PT10LmR0eXBlfHxcImNvbXBsZXg2NFwiPT09ZS5kdHlwZT90aGlzLmJyb2FkY2FzdGVkQmluYXJ5Q29tcGxleE9wKHQuY2FzdChcImNvbXBsZXg2NFwiKSxlLmNhc3QoXCJjb21wbGV4NjRcIiksKGZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybntyZWFsOnQqbi1lKnIsaW1hZzp0KnIrZSpufX0pKTp0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLER0KHQuZHR5cGUsZS5kdHlwZSksKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQqZX0pKX0sby5wcm90b3R5cGUucmVhbERpdmlkZT1mdW5jdGlvbih0LGUpe0hoKFt0LGVdLFwicmVhbERpdmlkZVwiKTtyZXR1cm4gdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImZsb2F0MzJcIiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC9lfSkpfSxvLnByb3RvdHlwZS5mbG9vckRpdj1mdW5jdGlvbih0LGUpe0hoKFt0LGVdLFwiZmxvb3JEaXZcIik7cmV0dXJuIHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJpbnQzMlwiLChmdW5jdGlvbih0LGUpe3JldHVybiBNYXRoLmZsb29yKHQvZSl9KSl9LG8ucHJvdG90eXBlLnN1bT1mdW5jdGlvbih0LGUpe0hoKHQsXCJzdW1cIiksQ24oXCJzdW1cIixlLHQucmFuayk7Zm9yKHZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPUduKHIsRHQodC5kdHlwZSxcImludDMyXCIpKSxpPWsobykscz10aGlzLnJlYWRTeW5jKGEuZGF0YUlkKSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGM9MDtjPHMubGVuZ3RoOysrYyl7Zm9yKHZhciBsPWMqaSxoPTAsZj0wO2Y8aTsrK2YpaCs9dVtsK2ZdO3NbY109aH1yZXR1cm4gYX0sby5wcm90b3R5cGUucHJvZD1mdW5jdGlvbih0LGUpe0hoKHQsXCJzdW1cIik7Zm9yKHZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPUduKHIsRHQodC5kdHlwZSxcImludDMyXCIpKSxpPWsobykscz10aGlzLnJlYWRTeW5jKGEuZGF0YUlkKSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGM9MDtjPHMubGVuZ3RoOysrYyl7Zm9yKHZhciBsPWMqaSxoPTEsZj0wO2Y8aTsrK2YpaCo9dVtsK2ZdO3NbY109aH1yZXR1cm4gYX0sby5wcm90b3R5cGUudW5zb3J0ZWRTZWdtZW50U3VtPWZ1bmN0aW9uKHQsZSxuKXtIaCh0LFwidW5zb3J0ZWRTZWdtZW50U3VtXCIpO2Zvcih2YXIgcj1bXSxvPXQucmFuay1lLnJhbmssYT0wO2E8bzsrK2EpZT1lLmV4cGFuZERpbXMoYSsxKTtmb3IoYT0wO2E8bjsrK2Epe3ZhciBpPU9uKGEsXCJpbnQzMlwiKSxzPVJjKGksZSkuYXNUeXBlKFwiZmxvYXQzMlwiKS5tdWwodCkuc3VtKDApO3IucHVzaChzKX1yZXR1cm4gUHIocil9LG8ucHJvdG90eXBlLmFyZ01pbj1mdW5jdGlvbih0LGUpe0hoKHQsXCJhcmdNaW5cIik7dmFyIG49W2VdO0NuKFwiYXJnTWluXCIsbix0LnJhbmspO2Zvcih2YXIgcj1ibih0LnNoYXBlLG4pLG89clswXSxhPXJbMV0saT1HbihvLFwiaW50MzJcIikscz1rKGEpLHU9dGhpcy5yZWFkU3luYyhpLmRhdGFJZCksYz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPTA7bDx1Lmxlbmd0aDsrK2wpe2Zvcih2YXIgaD1sKnMsZj1jW2hdLGQ9MCxwPTA7cDxzOysrcCl7dmFyIHY9Y1toK3BdO3Y8ZiYmKGY9dixkPXApfXVbbF09ZH1yZXR1cm4gaX0sby5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7SGgodCxcImFyZ01heFwiKTt2YXIgbj1bZV07Q24oXCJhcmdNYXhcIixuLHQucmFuayk7Zm9yKHZhciByPWJuKHQuc2hhcGUsbiksbz1yWzBdLGE9clsxXSxpPUduKG8sXCJpbnQzMlwiKSxzPWsoYSksdT10aGlzLnJlYWRTeW5jKGkuZGF0YUlkKSxjPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGw9MDtsPHUubGVuZ3RoOysrbCl7Zm9yKHZhciBoPWwqcyxmPWNbaF0sZD0wLHA9MDtwPHM7KytwKXt2YXIgdj1jW2grcF07dj5mJiYoZj12LGQ9cCl9dVtsXT1kfXJldHVybiBpfSxvLnByb3RvdHlwZS5jdW1zdW09ZnVuY3Rpb24odCxlLG4scil7aWYoSGgodCxcImN1bXN1bVwiKSxlIT09dC5yYW5rLTEpdGhyb3cgbmV3IEVycm9yKFwiYmFja2VuZC5jdW1zdW0gaW4gQ1BVIGV4cGVjdHMgYW4gaW5uZXItbW9zdCBheGlzPVwiKyh0LnJhbmstMSkrXCIgYnV0IGdvdCBheGlzPVwiK2UpO2Zvcih2YXIgbz1EdCh0LmR0eXBlLFwiaW50MzJcIiksYT1Hbih0LnNoYXBlLG8pLGk9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCkscz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSx1PXQuc2hhcGVbdC5yYW5rLTFdLGM9cj9mdW5jdGlvbih0LGUpe3JldHVybiB0K3UtZS0xfTpmdW5jdGlvbih0LGUpe3JldHVybiB0K2V9LGw9MDtsPHMubGVuZ3RoO2wrPXUpZm9yKHZhciBoPTA7aDx1O2grKyl7dmFyIGY9YyhsLGgpO2lmKDA9PT1oKWlbZl09bj8wOnNbZl07ZWxzZXt2YXIgZD1jKGwsaC0xKTtpW2ZdPW4/c1tkXStpW2RdOnNbZl0raVtkXX19cmV0dXJuIGF9LG8ucHJvdG90eXBlLmVxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwiZXF1YWxcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09PWU/MTowfSkpfSxvLnByb3RvdHlwZS5ub3RFcXVhbD1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcIm5vdEVxdWFsXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQhPT1lPzE6MH0pKX0sby5wcm90b3R5cGUubGVzcz1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcImxlc3NcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdDxlPzE6MH0pKX0sby5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwibGVzc0VxdWFsXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ8PWU/MTowfSkpfSxvLnByb3RvdHlwZS5ncmVhdGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwiZ3JlYXRlclwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLFwiYm9vbFwiLChmdW5jdGlvbih0LGUpe3JldHVybiB0PmU/MTowfSkpfSxvLnByb3RvdHlwZS5ncmVhdGVyRXF1YWw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gSGgoW3QsZV0sXCJncmVhdGVyRXF1YWxcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdD49ZT8xOjB9KSl9LG8ucHJvdG90eXBlLmxvZ2ljYWxOb3Q9ZnVuY3Rpb24odCl7SGgodCxcImxvZ2ljYWxOb3RcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPWVbcl0/MDoxO3JldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiYm9vbFwiKX0sby5wcm90b3R5cGUubG9naWNhbEFuZD1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcImxvZ2ljYWxBbmRcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIiwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCYmZX0pKX0sby5wcm90b3R5cGUubG9naWNhbE9yPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwibG9naWNhbE9yXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHR8fGV9KSl9LG8ucHJvdG90eXBlLnNlbGVjdD1mdW5jdGlvbih0LGUsbil7SGgoW3QsZSxuXSxcInNlbGVjdFwiKTtmb3IodmFyIHI9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbz10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxhPXRoaXMucmVhZFN5bmMobi5kYXRhSWQpLGk9R24oZS5zaGFwZSxEdChlLmR0eXBlLG4uZHR5cGUpKSxzPXRoaXMucmVhZFN5bmMoaS5kYXRhSWQpLHU9MCxjPTA9PT10LnJhbmt8fHQucmFuaz4xfHwxPT09ZS5yYW5rPzE6ayhlLnNoYXBlLnNsaWNlKDEpKSxsPTA7bDxyLmxlbmd0aDtsKyspZm9yKHZhciBoPTA7aDxjO2grKykxPT09cltsXT9zW3UrK109b1tsXTpzW3UrK109YVtsXTtyZXR1cm4gaX0sby5wcm90b3R5cGUud2hlcmU9ZnVuY3Rpb24odCl7SGgoW3RdLFwid2hlcmVcIik7dmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCk7cmV0dXJuIG5hKHQuc2hhcGUsZSl9LG8ucHJvdG90eXBlLnRvcGs9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBIaCh0LFwidG9wa1wiKSxlYSh0aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSx0LnNoYXBlLHQuZHR5cGUsZSl9LG8ucHJvdG90eXBlLm1pbj1mdW5jdGlvbih0LGUpe0hoKHQsXCJtaW5cIiksQ24oXCJtaW5cIixlLHQucmFuayk7Zm9yKHZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPUduKHIsdC5kdHlwZSksaT1rKG8pLHM9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCksdT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxjPTA7YzxzLmxlbmd0aDsrK2Mpe2Zvcih2YXIgbD1jKmksaD11W2xdLGY9MDtmPGk7KytmKXt2YXIgZD11W2wrZl07ZDxoJiYoaD1kKX1zW2NdPWh9cmV0dXJuIGF9LG8ucHJvdG90eXBlLm1pbmltdW09ZnVuY3Rpb24odCxlKXtyZXR1cm4gSGgoW3QsZV0sXCJtaW5pbXVtXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsdC5kdHlwZSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gTWF0aC5taW4odCxlKX0pKX0sby5wcm90b3R5cGUubW9kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwibW9kXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsdC5kdHlwZSwoZnVuY3Rpb24odCxlKXt2YXIgbj10JWU7cmV0dXJuIHQ8MCYmZTwwfHx0Pj0wJiZlPj0wP246KG4rZSklZX0pKX0sby5wcm90b3R5cGUubWF4PWZ1bmN0aW9uKHQsZSl7SGgodCxcIm1heFwiKSxDbihcIm1heFwiLGUsdC5yYW5rKTtmb3IodmFyIG49Ym4odC5zaGFwZSxlKSxyPW5bMF0sbz1uWzFdLGE9R24ocix0LmR0eXBlKSxpPWsobykscz10aGlzLnJlYWRTeW5jKGEuZGF0YUlkKSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGM9MDtjPHMubGVuZ3RoOysrYyl7Zm9yKHZhciBsPWMqaSxoPXVbbF0sZj0wO2Y8aTsrK2Ype3ZhciBkPXVbbCtmXTtkPmgmJihoPWQpfXNbY109aH1yZXR1cm4gYX0sby5wcm90b3R5cGUubWF4aW11bT1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcIm1heGltdW1cIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx0LmR0eXBlLChmdW5jdGlvbih0LGUpe3JldHVybiBNYXRoLm1heCh0LGUpfSkpfSxvLnByb3RvdHlwZS5hbGw9ZnVuY3Rpb24odCxlKXtIaCh0LFwiYWxsXCIpLENuKFwiYWxsXCIsZSx0LnJhbmspO2Zvcih2YXIgbj1ibih0LnNoYXBlLGUpLHI9blswXSxvPW5bMV0sYT1HbihyLHQuZHR5cGUpLGk9ayhvKSxzPXRoaXMucmVhZFN5bmMoYS5kYXRhSWQpLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksYz0wO2M8cy5sZW5ndGg7KytjKXtmb3IodmFyIGw9YyppLGg9dVtsXSxmPTA7ZjxpOysrZil7dmFyIGQ9dVtsK2ZdO2g9aCYmZH1zW2NdPWh9cmV0dXJuIGF9LG8ucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe0hoKHQsXCJhbnlcIiksQ24oXCJhbnlcIixlLHQucmFuayk7Zm9yKHZhciBuPWJuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPUduKHIsdC5kdHlwZSksaT1rKG8pLHM9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCksdT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxjPTA7YzxzLmxlbmd0aDsrK2Mpe2Zvcih2YXIgbD1jKmksaD11W2xdLGY9MDtmPGk7KytmKXt2YXIgZD11W2wrZl07aD1ofHxkfXNbY109aH1yZXR1cm4gYX0sby5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gSGgoW3QsZV0sXCJzcXVhcmVkRGlmZmVyZW5jZVwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHQuZHR5cGUsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC1lO3JldHVybiBuKm59KSl9LG8ucHJvdG90eXBlLmNlaWw9ZnVuY3Rpb24odCl7SGgodCxcImNlaWxcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKW5bcl09TWF0aC5jZWlsKGVbcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuZmxvb3I9ZnVuY3Rpb24odCl7SGgodCxcImZsb29yXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPU1hdGguZmxvb3IoZVtyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChuLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKHQpe0hoKHQsXCJ4XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcillW3JdPDA/bltyXT0tMTplW3JdPjA/bltyXT0xOm5bcl09MDtyZXR1cm4gdGhpcy5tYWtlT3V0cHV0KG4sdC5zaGFwZSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmlzTmFOPWZ1bmN0aW9uKHQpe0hoKHQsXCJ4XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpTnVtYmVyLmlzTmFOKGVbcl0pJiYobltyXT0xKTtyZXR1cm4gdGhpcy5tYWtlT3V0cHV0KG4sdC5zaGFwZSxcImJvb2xcIil9LG8ucHJvdG90eXBlLmlzSW5mPWZ1bmN0aW9uKHQpe0hoKHQsXCJ4XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpTWF0aC5hYnMoZVtyXSk9PT0xLzAmJihuW3JdPTEpO3JldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiYm9vbFwiKX0sby5wcm90b3R5cGUuaXNGaW5pdGU9ZnVuY3Rpb24odCl7SGgodCxcInhcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcilOdW1iZXIuaXNGaW5pdGUoZVtyXSkmJihuW3JdPTEpO3JldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiYm9vbFwiKX0sby5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24odCl7SGgodCxcInJvdW5kXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcil7dmFyIG89TWF0aC5mbG9vcihlW3JdKTtlW3JdLW88LjU/bltyXT1NYXRoLmZsb29yKGVbcl0pOmVbcl0tbz4uNT9uW3JdPU1hdGguY2VpbChlW3JdKTpuW3JdPW8lMj09MD9vOm8rMX1yZXR1cm4gdGhpcy5tYWtlT3V0cHV0KG4sdC5zaGFwZSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmV4cD1mdW5jdGlvbih0KXtIaCh0LFwiZXhwXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPU1hdGguZXhwKGVbcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuZXhwbTE9ZnVuY3Rpb24odCl7SGgodCxcImV4cG0xXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPU1hdGguZXhwbTEoZVtyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChuLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24odCl7SGgodCxcImxvZ1wiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07bltyXT1NYXRoLmxvZyhvKX1yZXR1cm4gdGhpcy5tYWtlT3V0cHV0KG4sdC5zaGFwZSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmxvZzFwPWZ1bmN0aW9uKHQpe0hoKHQsXCJsb2cxcFwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07bltyXT1NYXRoLmxvZzFwKG8pfXJldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuc3FydD1mdW5jdGlvbih0KXtIaCh0LFwic3FydFwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07bltyXT1NYXRoLnNxcnQobyl9cmV0dXJuIHRoaXMubWFrZU91dHB1dChuLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5yc3FydD1mdW5jdGlvbih0KXtIaCh0LFwicnNxcnRcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKXt2YXIgbz1lW3JdO25bcl09MS9NYXRoLnNxcnQobyl9cmV0dXJuIHRoaXMubWFrZU91dHB1dChuLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5yZWNpcHJvY2FsPWZ1bmN0aW9uKHQpe0hoKHQsXCJyZWNpcHJvY2FsXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPTEvZVtyXTtyZXR1cm4gdGhpcy5tYWtlT3V0cHV0KG4sdC5zaGFwZSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmxpbmVhcj1mdW5jdGlvbih0KXtyZXR1cm4gdH0sby5wcm90b3R5cGUucmVsdT1mdW5jdGlvbih0KXtIaCh0LFwicmVsdVwiKTtmb3IodmFyIGU9R24odC5zaGFwZSx0LmR0eXBlKSxuPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHI9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbz0wO288ci5sZW5ndGg7KytvKW5bb109TWF0aC5tYXgoMCxyW29dKTtyZXR1cm4gZX0sby5wcm90b3R5cGUucmVsdTY9ZnVuY3Rpb24odCl7SGgodCxcInJlbHVcIik7Zm9yKHZhciBlPUduKHQuc2hhcGUsdC5kdHlwZSksbj10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxyPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG89MDtvPHIubGVuZ3RoOysrbyluW29dPU1hdGgubWluKE1hdGgubWF4KDAscltvXSksNik7cmV0dXJuIGV9LG8ucHJvdG90eXBlLnByZWx1PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIEhoKFt0LGVdLFwicHJlbHVcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx0LmR0eXBlLChmdW5jdGlvbih0LGUpe3JldHVybiB0PDA/ZSp0OnR9KSl9LG8ucHJvdG90eXBlLmVsdT1mdW5jdGlvbih0KXtIaCh0LFwiZWx1XCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3Ipe3ZhciBvPW5bcl07ZVtyXT1vPj0wP286TWF0aC5leHAobyktMX1yZXR1cm4gdGhpcy5tYWtlT3V0cHV0KGUsdC5zaGFwZSxcImZsb2F0MzJcIil9LG8ucHJvdG90eXBlLmVsdURlcj1mdW5jdGlvbih0LGUpe0hoKFt0LGVdLFwiZWx1RGVyXCIpO2Zvcih2YXIgbj1uZXcgRmxvYXQzMkFycmF5KGUuc2l6ZSkscj10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9MDthPHIubGVuZ3RoOysrYSl7dmFyIGk9clthXTtuW2FdPWk+PTE/b1thXTpvW2FdKihpKzEpfXJldHVybiB0aGlzLm1ha2VPdXRwdXQobixlLnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuc2VsdT1mdW5jdGlvbih0KXtIaCh0LFwic2VsdVwiKTtmb3IodmFyIGU9YnMsbj13cyxyPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9MDthPG8ubGVuZ3RoOysrYSl7dmFyIGk9b1thXTtyW2FdPWk+PTA/bippOmUqKE1hdGguZXhwKGkpLTEpfXJldHVybiB0aGlzLm1ha2VPdXRwdXQocix0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuY2xpcD1mdW5jdGlvbih0LGUsbil7SGgodCxcImNsaXBcIik7Zm9yKHZhciByPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9MDthPG8ubGVuZ3RoOysrYSl7dmFyIGk9b1thXTtyW2FdPWk+bj9uOmk8ZT9lOml9cmV0dXJuIHRoaXMubWFrZU91dHB1dChyLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hYnM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPU1hdGguYWJzKG5bcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuY29tcGxleEFicz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8dC5zaXplOysrcil7dmFyIG89blsyKnJdLGE9blsyKnIrMV07ZVtyXT1NYXRoLmh5cG90KG8sYSl9cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5pbnQ9ZnVuY3Rpb24odCl7SGgodCxcImludFwiKTtmb3IodmFyIGU9bmV3IEludDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPW5bcl07cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJpbnQzMlwiKX0sby5wcm90b3R5cGUuc2lnbW9pZD1mdW5jdGlvbih0KXtIaCh0LFwic2lnbW9pZFwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09MS8oMStNYXRoLmV4cCgtbltyXSkpO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuc29mdHBsdXM9ZnVuY3Rpb24odCl7SGgodCxcInNvZnRwbHVzXCIpO2Zvcih2YXIgZT1NYXRoLmxvZygxLjE5MjA5Mjg5NTUwNzgxMjVlLTcpKzIsbj1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSkscj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPTA7bzxyLmxlbmd0aDsrK28pe3ZhciBhPXJbb10+LWUsaT1yW29dPGUscz1NYXRoLmV4cChyW29dKSx1PXZvaWQgMDt1PWk/czphP3Jbb106TWF0aC5sb2coMStzKSxuW29dPXV9cmV0dXJuIHRoaXMubWFrZU91dHB1dChuLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5zaW49ZnVuY3Rpb24odCl7SGgodCxcInNpblwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5zaW4obltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5jb3M9ZnVuY3Rpb24odCl7SGgodCxcImNvc1wiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5jb3MobltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS50YW49ZnVuY3Rpb24odCl7SGgodCxcInRhblwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC50YW4obltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hc2luPWZ1bmN0aW9uKHQpe0hoKHQsXCJhc2luXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFzaW4obltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hY29zPWZ1bmN0aW9uKHQpe0hoKHQsXCJhY29zXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFjb3MobltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hdGFuPWZ1bmN0aW9uKHQpe0hoKHQsXCJhdGFuXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmF0YW4obltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5hdGFuMj1mdW5jdGlvbih0LGUpe3JldHVybiBIaChbdCxlXSxcImF0YW4yXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsdC5kdHlwZSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gTWF0aC5hdGFuMih0LGUpfSkpfSxvLnByb3RvdHlwZS5zaW5oPWZ1bmN0aW9uKHQpe0hoKHQsXCJzaW5oXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLnNpbmgobltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS5jb3NoPWZ1bmN0aW9uKHQpe0hoKHQsXCJjb3NoXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmNvc2gobltyXSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsXCJmbG9hdDMyXCIpfSxvLnByb3RvdHlwZS50YW5oPWZ1bmN0aW9uKHQpe0hoKHQsXCJ0YW5oXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1EKG5bcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuYXNpbmg9ZnVuY3Rpb24odCl7SGgodCxcImFzaW5oXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFzaW5oKG5bcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuYWNvc2g9ZnVuY3Rpb24odCl7SGgodCxcImFjb3NoXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFjb3NoKG5bcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuYXRhbmg9ZnVuY3Rpb24odCl7SGgodCxcImF0YW5oXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmF0YW5oKG5bcl0pO3JldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuZXJmPWZ1bmN0aW9uKHQpe0hoKHQsXCJlcmZcIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcil7dmFyIG89TWF0aC5zaWduKG5bcl0pLGE9TWF0aC5hYnMobltyXSksaT0xLygxKy4zMjc1OTExKmEpO2Vbcl09byooMS0oKCgoMS4wNjE0MDU0MjkqaS0xLjQ1MzE1MjAyNykqaSsxLjQyMTQxMzc0MSkqaS0uMjg0NDk2NzM2KSppKy4yNTQ4Mjk1OTIpKmkqTWF0aC5leHAoLWEqYSkpfXJldHVybiB0aGlzLm1ha2VPdXRwdXQoZSx0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuc3RlcD1mdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPTApLEhoKHQsXCJzdGVwXCIpO2Zvcih2YXIgbj1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSkscj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPTA7bzxyLmxlbmd0aDsrK28pe3ZhciBhPXJbb107aXNOYU4oYSk/bltvXT1OYU46bltvXT1hPjA/MTplfXJldHVybiB0aGlzLm1ha2VPdXRwdXQobix0LnNoYXBlLFwiZmxvYXQzMlwiKX0sby5wcm90b3R5cGUuZnVzZWRDb252MmQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dCxuPXQuZmlsdGVyLHI9dC5jb252SW5mbyxvPXQuYmlhcyxhPXQuYWN0aXZhdGlvbixpPXQucHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyxzPXRoaXMuY29udjJkKGUsbixyKTtyZXR1cm4gbyYmKHM9dGhpcy5hZGQocyxvKSksYSYmKHM9cWgodGhpcyxzLGEsaSkpLHN9LG8ucHJvdG90eXBlLmNvbnYyZD1mdW5jdGlvbih0LGUsbil7SGgoW3QsZV0sXCJjb252MmRcIik7Zm9yKHZhciByPW4uZmlsdGVySGVpZ2h0LG89bi5maWx0ZXJXaWR0aCxhPW4uZGlsYXRpb25IZWlnaHQsaT1uLmRpbGF0aW9uV2lkdGgscz1uLnBhZEluZm8ubGVmdCx1PW4ucGFkSW5mby50b3AsYz1cImNoYW5uZWxzTGFzdFwiPT09bi5kYXRhRm9ybWF0LGw9ZHIobi5vdXRTaGFwZSx0LmR0eXBlKSxoPXQuc3RyaWRlc1swXSxmPWM/dC5zdHJpZGVzWzFdOnQuc3RyaWRlc1syXSxkPWM/dC5zdHJpZGVzWzJdOjEscD1jPzE6dC5zdHJpZGVzWzFdLHY9bC5zdHJpZGVzWzBdLG09Yz9sLnN0cmlkZXNbMV06bC5zdHJpZGVzWzJdLGc9Yz9sLnN0cmlkZXNbMl06MSx5PWM/MTpsLnN0cmlkZXNbMV0seD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxiPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHc9bC52YWx1ZXMsQz0wO0M8bi5iYXRjaFNpemU7KytDKWZvcih2YXIgRT1DKmgsUj1DKnYsST0wO0k8bi5vdXRIZWlnaHQ7KytJKWZvcih2YXIgaz1SK0kqbSxTPUkqbi5zdHJpZGVIZWlnaHQtdSxBPTA7QTxyO0ErKyl7dmFyIEQ9UytBKmE7aWYoIShEPDB8fEQ+PW4uaW5IZWlnaHQpKWZvcih2YXIgVD1BKmUuc3RyaWRlc1swXSxOPUUrRCpmLEY9MDtGPG4ub3V0V2lkdGg7KytGKWZvcih2YXIgXz1rK0YqZyxPPUYqbi5zdHJpZGVXaWR0aC1zLE09MDtNPG87TSsrKXt2YXIgQj1PK00qaTtpZighKEI8MHx8Qj49bi5pbldpZHRoKSlmb3IodmFyIFA9TitCKmQsTD1UK00qZS5zdHJpZGVzWzFdLFc9MDtXPG4uaW5DaGFubmVsczsrK1cpe2Zvcih2YXIgVT14W1ArVypwXSxWPTA7VjxuLm91dENoYW5uZWxzOysrVil3W18rVip5XSs9VSpiW0wrVl07TCs9bi5vdXRDaGFubmVsc319fXJldHVybiBsLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmNvbnYzZD1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPW4uZmlsdGVyRGVwdGgsbz1uLmZpbHRlckhlaWdodCxhPW4uZmlsdGVyV2lkdGgsaT1uLmRpbGF0aW9uRGVwdGgscz1uLmRpbGF0aW9uSGVpZ2h0LHU9bi5kaWxhdGlvbldpZHRoLGM9bi5wYWRJbmZvLmZyb250LGw9bi5wYWRJbmZvLmxlZnQsaD1uLnBhZEluZm8udG9wLGY9ZHIobi5vdXRTaGFwZSx0LmR0eXBlKSxkPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHA9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksdj1mLnZhbHVlcyxtPTA7bTxuLmJhdGNoU2l6ZTsrK20pZm9yKHZhciBnPW0qdC5zdHJpZGVzWzBdLHk9bSpmLnN0cmlkZXNbMF0seD0wO3g8bi5vdXREZXB0aDsrK3gpZm9yKHZhciBiPXkreCpmLnN0cmlkZXNbMV0sdz14Km4uc3RyaWRlRGVwdGgtYyxDPTA7QzxyO0MrKyl7dmFyIEU9dytDKmk7aWYoIShFPDB8fEU+PW4uaW5EZXB0aCkpZm9yKHZhciBSPUMqZS5zdHJpZGVzWzBdLEk9ZytFKnQuc3RyaWRlc1sxXSxrPTA7azxuLm91dEhlaWdodDsrK2spZm9yKHZhciBTPWIraypmLnN0cmlkZXNbMl0sQT1rKm4uc3RyaWRlSGVpZ2h0LWgsRD0wO0Q8bztEKyspe3ZhciBUPUErRCpzO2lmKCEoVDwwfHxUPj1uLmluSGVpZ2h0KSlmb3IodmFyIE49UitEKmUuc3RyaWRlc1sxXSxGPUkrVCp0LnN0cmlkZXNbMl0sXz0wO188bi5vdXRXaWR0aDsrK18pZm9yKHZhciBPPVMrXypuLm91dENoYW5uZWxzLE09XypuLnN0cmlkZVdpZHRoLWwsQj0wO0I8YTtCKyspe3ZhciBQPU0rQip1O2lmKCEoUDwwfHxQPj1uLmluV2lkdGgpKWZvcih2YXIgTD1OK0IqZS5zdHJpZGVzWzJdLFc9RitQKm4uaW5DaGFubmVscyxVPUwsVj0wO1Y8bi5pbkNoYW5uZWxzOysrVil7Zm9yKHZhciB6PWRbVytWXSxHPTA7RzxuLm91dENoYW5uZWxzOysrRyl2W08rR10rPXoqcFtVK0ddO1UrPW4ub3V0Q2hhbm5lbHN9fX19cmV0dXJuIGYudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuY29udjJkRGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe0hoKFt0LGVdLFwiY29udjJkRGVySW5wdXRcIik7Zm9yKHZhciByPWRyKG4uaW5TaGFwZSxcImZsb2F0MzJcIiksbz1yLnZhbHVlcyxhPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGk9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCkscz1lLnN0cmlkZXMsdT1zWzBdLGM9c1sxXSxsPXNbMl0saD1uLmJhdGNoU2l6ZSxmPW4uZmlsdGVySGVpZ2h0LGQ9bi5maWx0ZXJXaWR0aCxwPW4uaW5DaGFubmVscyx2PW4uaW5IZWlnaHQsbT1uLmluV2lkdGgsZz1uLm91dENoYW5uZWxzLHk9bi5vdXRIZWlnaHQseD1uLm91dFdpZHRoLGI9bi5zdHJpZGVIZWlnaHQsdz1uLnN0cmlkZVdpZHRoLEM9bi5kYXRhRm9ybWF0LEU9Zi0xLW4ucGFkSW5mby50b3AsUj1kLTEtbi5wYWRJbmZvLmxlZnQsST1cImNoYW5uZWxzTGFzdFwiPT09QyxrPXIuc3RyaWRlc1swXSxTPUk/ci5zdHJpZGVzWzFdOnIuc3RyaWRlc1syXSxBPUk/ci5zdHJpZGVzWzJdOjEsRD1JPzE6ci5zdHJpZGVzWzFdLFQ9dC5zdHJpZGVzWzBdLE49ST90LnN0cmlkZXNbMV06dC5zdHJpZGVzWzJdLEY9ST90LnN0cmlkZXNbMl06MSxfPUk/MTp0LnN0cmlkZXNbMV0sTz0wO088aDsrK08pZm9yKHZhciBNPTA7TTxwOysrTSlmb3IodmFyIEI9MDtCPHY7KytCKWZvcih2YXIgUD1CLUUsTD1NYXRoLm1heCgwLE1hdGguY2VpbChQL2IpKSxXPU1hdGgubWluKHksKGYrUCkvYiksVT0wO1U8bTsrK1Upe2Zvcih2YXIgVj1VLVIsej1NYXRoLm1heCgwLE1hdGguY2VpbChWL3cpKSxHPU1hdGgubWluKHgsKGQrVikvdyksSD0wLHE9TDtxPFc7KytxKWZvcih2YXIgSz1xKmItUCxqPXo7ajxHOysrailmb3IodmFyIFg9VCpPK04qcStGKmosWT11KihmLTEtSykrYyooZC0xLShqKnctVikpK2wqTSwkPTA7JDxnOysrJCl7SCs9YVtYK18qJF0qaVtZKyRdfW9baypPK1MqQitBKlUrRCpNXT1IfXJldHVybiByLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmNvbnYzZERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9ZHIobi5pblNoYXBlLFwiZmxvYXQzMlwiKSxvPXIudmFsdWVzLGE9ci5zdHJpZGVzLGk9YVswXSxzPWFbMV0sdT1hWzJdLGM9YVszXSxsPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGg9dC5zdHJpZGVzLGY9aFswXSxkPWhbMV0scD1oWzJdLHY9aFszXSxtPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLGc9ZS5zdHJpZGVzLHk9Z1swXSx4PWdbMV0sYj1nWzJdLHc9Z1szXSxDPW4uYmF0Y2hTaXplLEU9bi5maWx0ZXJEZXB0aCxSPW4uZmlsdGVySGVpZ2h0LEk9bi5maWx0ZXJXaWR0aCxrPW4uaW5DaGFubmVscyxTPW4uaW5EZXB0aCxBPW4uaW5IZWlnaHQsRD1uLmluV2lkdGgsVD1uLm91dENoYW5uZWxzLE49bi5vdXREZXB0aCxGPW4ub3V0SGVpZ2h0LF89bi5vdXRXaWR0aCxPPW4uc3RyaWRlRGVwdGgsTT1uLnN0cmlkZUhlaWdodCxCPW4uc3RyaWRlV2lkdGgsUD1FLTEtbi5wYWRJbmZvLmZyb250LEw9Ui0xLW4ucGFkSW5mby50b3AsVz1JLTEtbi5wYWRJbmZvLmxlZnQsVT0wO1U8QzsrK1UpZm9yKHZhciBWPTA7VjxrOysrVilmb3IodmFyIHo9MDt6PFM7Kyt6KWZvcih2YXIgRz16LVAsSD1NYXRoLm1heCgwLE1hdGguY2VpbChHL08pKSxxPU1hdGgubWluKE4sKEUrRykvTyksSz0wO0s8QTsrK0spZm9yKHZhciBqPUstTCxYPU1hdGgubWF4KDAsTWF0aC5jZWlsKGovTSkpLFk9TWF0aC5taW4oRiwoUitqKS9NKSwkPTA7JDxEOysrJCl7Zm9yKHZhciBRPSQtVyxKPU1hdGgubWF4KDAsTWF0aC5jZWlsKFEvQikpLFo9TWF0aC5taW4oXywoSStRKS9CKSx0dD0wLGV0PUg7ZXQ8cTsrK2V0KWZvcih2YXIgbnQ9ZXQqTy1HLHJ0PVg7cnQ8WTsrK3J0KWZvcih2YXIgb3Q9cnQqTS1qLGF0PUo7YXQ8WjsrK2F0KWZvcih2YXIgaXQ9ZipVK2QqZXQrcCpydCt2KmF0LHN0PXkqKEUtMS1udCkreCooUi0xLW90KStiKihJLTEtKGF0KkItUSkpK3cqVix1dD0wO3V0PFQ7Kyt1dCl7dHQrPWxbaXQrdXRdKm1bc3QrdXRdfW9baSpVK3Mqeit1KksrYyokK1ZdPXR0fXJldHVybiByLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmNvbnYyZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7SGgoW3QsZV0sXCJjb252MmREZXJGaWx0ZXJcIik7Zm9yKHZhciByPW4uc3RyaWRlSGVpZ2h0LG89bi5zdHJpZGVXaWR0aCxhPW4uZmlsdGVySGVpZ2h0LGk9bi5maWx0ZXJXaWR0aCxzPVwiY2hhbm5lbHNMYXN0XCI9PT1uLmRhdGFGb3JtYXQsdT1kcihuLmZpbHRlclNoYXBlLFwiZmxvYXQzMlwiKSxjPW4ucGFkSW5mby5sZWZ0LGw9bi5wYWRJbmZvLnRvcCxoPXRoaXMuYnVmZmVyU3luYyh0KSxmPXRoaXMuYnVmZmVyU3luYyhlKSxkPTA7ZDxhOysrZClmb3IodmFyIHA9TWF0aC5tYXgoMCxNYXRoLmNlaWwoKGwtZCkvcikpLHY9TWF0aC5taW4obi5vdXRIZWlnaHQsKG4uaW5IZWlnaHQrbC1kKS9yKSxtPTA7bTxpOysrbSlmb3IodmFyIGc9TWF0aC5tYXgoMCxNYXRoLmNlaWwoKGMtbSkvbykpLHk9TWF0aC5taW4obi5vdXRXaWR0aCwobi5pbldpZHRoK2MtbSkvbykseD0wO3g8bi5pbkNoYW5uZWxzOysreClmb3IodmFyIGI9MDtiPG4ub3V0Q2hhbm5lbHM7KytiKXtmb3IodmFyIHc9MCxDPTA7QzxuLmJhdGNoU2l6ZTsrK0MpZm9yKHZhciBFPXA7RTx2OysrRSlmb3IodmFyIFI9ZCtFKnItbCxJPWc7STx5OysrSSl7dmFyIGs9bStJKm8tYzt3Kz1zP2guZ2V0KEMsUixrLHgpKmYuZ2V0KEMsRSxJLGIpOmguZ2V0KEMseCxSLGspKmYuZ2V0KEMsYixFLEkpfXUuc2V0KHcsZCxtLHgsYil9cmV0dXJuIHUudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuY29udjNkRGVyRmlsdGVyPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9bi5zdHJpZGVEZXB0aCxvPW4uc3RyaWRlSGVpZ2h0LGE9bi5zdHJpZGVXaWR0aCxpPW4uZmlsdGVyRGVwdGgscz1uLmZpbHRlckhlaWdodCx1PW4uZmlsdGVyV2lkdGgsYz1kcihuLmZpbHRlclNoYXBlLFwiZmxvYXQzMlwiKSxsPWMudmFsdWVzLGg9Yy5zdHJpZGVzLGY9aFswXSxkPWhbMV0scD1oWzJdLHY9aFszXSxtPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLGc9ZS5zdHJpZGVzLHk9Z1swXSx4PWdbMV0sYj1nWzJdLHc9Z1szXSxDPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLEU9dC5zdHJpZGVzLFI9RVswXSxJPUVbMV0saz1FWzJdLFM9RVszXSxBPW4ucGFkSW5mby5mcm9udCxEPW4ucGFkSW5mby5sZWZ0LFQ9bi5wYWRJbmZvLnRvcCxOPTA7TjxpOysrTilmb3IodmFyIEY9TWF0aC5tYXgoMCxNYXRoLmNlaWwoKEEtTikvcikpLF89TWF0aC5taW4obi5vdXREZXB0aCwobi5pbkRlcHRoK0EtTikvciksTz1OKmYsTT0wO008czsrK00pZm9yKHZhciBCPU1hdGgubWF4KDAsTWF0aC5jZWlsKChULU0pL28pKSxQPU1hdGgubWluKG4ub3V0SGVpZ2h0LChuLmluSGVpZ2h0K1QtTSkvbyksTD1NKmQrTyxXPTA7Vzx1OysrVylmb3IodmFyIFU9TWF0aC5tYXgoMCxNYXRoLmNlaWwoKEQtVykvYSkpLFY9TWF0aC5taW4obi5vdXRXaWR0aCwobi5pbldpZHRoK0QtVykvYSksej1XKnArTCxHPTA7RzxuLmluQ2hhbm5lbHM7KytHKWZvcih2YXIgSD1HKnYreixxPTA7cTxuLm91dENoYW5uZWxzOysrcSl7Zm9yKHZhciBLPTAsaj0wO2o8bi5iYXRjaFNpemU7KytqKWZvcih2YXIgWD1qKlIsWT1qKnksJD1GOyQ8XzsrKyQpZm9yKHZhciBRPShOKyQqci1BKSpJK1gsSj0kKngrWSxaPUI7WjxQOysrWilmb3IodmFyIHR0PShNK1oqby1UKSprK1EsZXQ9WipiK0osbnQ9VTtudDxWOysrbnQpe3ZhciBydD1udCp3K2V0O0srPUNbKFcrbnQqYS1EKSpTK3R0K0ddKm1bcnQrcV19bFtIK3FdPUt9cmV0dXJuIGMudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuZnVzZWREZXB0aHdpc2VDb252MkQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dCxuPXQuZmlsdGVyLHI9dC5jb252SW5mbyxvPXQuYmlhcyxhPXQuYWN0aXZhdGlvbixpPXQucHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyxzPXRoaXMuZGVwdGh3aXNlQ29udjJEKGUsbixyKTtyZXR1cm4gbyYmKHM9dGhpcy5hZGQocyxvKSksYSYmKHM9cWgodGhpcyxzLGEsaSkpLHN9LG8ucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0LGUsbil7SGgoW3QsZV0sXCJkZXB0aHdpc2VDb252MkRcIik7Zm9yKHZhciByPW4uZmlsdGVySGVpZ2h0LG89bi5maWx0ZXJXaWR0aCxhPW4uZGlsYXRpb25IZWlnaHQsaT1uLmRpbGF0aW9uV2lkdGgscz1uLnBhZEluZm8ubGVmdCx1PW4ucGFkSW5mby50b3AsYz1uLm91dENoYW5uZWxzL24uaW5DaGFubmVscyxsPWRyKG4ub3V0U2hhcGUsdC5kdHlwZSksaD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxmPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLGQ9bC52YWx1ZXMscD0wO3A8bi5iYXRjaFNpemU7KytwKWZvcih2YXIgdj1wKnQuc3RyaWRlc1swXSxtPXAqbC5zdHJpZGVzWzBdLGc9MDtnPG4ub3V0SGVpZ2h0OysrZylmb3IodmFyIHk9bStnKmwuc3RyaWRlc1sxXSx4PWcqbi5zdHJpZGVIZWlnaHQtcyxiPTA7YjxyOysrYil7dmFyIHc9eCtiKmE7aWYoISh3PDB8fHc+PW4uaW5IZWlnaHQpKWZvcih2YXIgQz1iKmUuc3RyaWRlc1swXSxFPXYrdyp0LnN0cmlkZXNbMV0sUj0wO1I8bi5vdXRXaWR0aDsrK1IpZm9yKHZhciBJPXkrUipsLnN0cmlkZXNbMl0saz1SKm4uc3RyaWRlV2lkdGgtdSxTPTA7UzxvOysrUyl7dmFyIEE9aytTKmk7aWYoIShBPDB8fEE+PW4uaW5XaWR0aCkpZm9yKHZhciBEPUMrUyplLnN0cmlkZXNbMV0sVD1FK0Eqbi5pbkNoYW5uZWxzLE49SSxGPUQsXz0wO188bi5pbkNoYW5uZWxzOysrXyl7Zm9yKHZhciBPPWhbVCtfXSxNPTA7TTxjOysrTSlkW04rTV0rPU8qZltGK01dO04rPWMsRis9Y319fXJldHVybiBsLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXtIaChbdCxlXSxcImRlcHRod2lzZUNvbnYyRERlcklucHV0XCIpO2Zvcih2YXIgcj1kcihuLmluU2hhcGUsXCJmbG9hdDMyXCIpLG89ci52YWx1ZXMsYT1yLnN0cmlkZXMsaT1hWzBdLHM9YVsxXSx1PWFbMl0sYz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPXQuc3RyaWRlcyxoPWxbMF0sZj1sWzFdLGQ9bFsyXSxwPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHY9ZS5zdHJpZGVzLG09dlswXSxnPXZbMV0seT12WzJdLHg9bi5iYXRjaFNpemUsYj1uLmZpbHRlckhlaWdodCx3PW4uZmlsdGVyV2lkdGgsQz1uLmluQ2hhbm5lbHMsRT1uLmluSGVpZ2h0LFI9bi5pbldpZHRoLEk9bi5vdXRDaGFubmVscyxrPW4ub3V0SGVpZ2h0LFM9bi5vdXRXaWR0aCxBPW4uc3RyaWRlSGVpZ2h0LEQ9bi5zdHJpZGVXaWR0aCxUPWItMS1uLnBhZEluZm8udG9wLE49dy0xLW4ucGFkSW5mby5sZWZ0LEY9SS9DLF89MDtfPHg7KytfKWZvcih2YXIgTz0wO088QzsrK08pZm9yKHZhciBNPTA7TTxFOysrTSlmb3IodmFyIEI9TS1ULFA9TWF0aC5tYXgoMCxNYXRoLmNlaWwoQi9BKSksTD1NYXRoLm1pbihrLChiK0IpL0EpLFc9MDtXPFI7KytXKXtmb3IodmFyIFU9Vy1OLFY9TWF0aC5tYXgoMCxNYXRoLmNlaWwoVS9EKSksej1NYXRoLm1pbihTLCh3K1UpL0QpLEc9MCxIPVA7SDxMOysrSClmb3IodmFyIHE9SCpBLUIsSz1WO0s8ejsrK0spZm9yKHZhciBqPWgqXytmKkgrZCpLLFg9bSooYi0xLXEpK2cqKHctMS0oSypELVUpKSt5Kk8sWT0wO1k8RjsrK1kpe0crPWNbaisoTypGK1kpXSpwW1grWV19b1tpKl8rcypNK3UqVytPXT1HfXJldHVybiByLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7SGgoW3QsZV0sXCJkZXB0aHdpc2VDb252MkREZXJGaWx0ZXJcIik7Zm9yKHZhciByPW4uc3RyaWRlSGVpZ2h0LG89bi5zdHJpZGVXaWR0aCxhPW4uZmlsdGVySGVpZ2h0LGk9bi5maWx0ZXJXaWR0aCxzPWRyKG4uZmlsdGVyU2hhcGUsXCJmbG9hdDMyXCIpLHU9bi5wYWRJbmZvLmxlZnQsYz1uLnBhZEluZm8udG9wLGw9bi5vdXRDaGFubmVscy9uLmluQ2hhbm5lbHMsaD10aGlzLmJ1ZmZlclN5bmModCksZj10aGlzLmJ1ZmZlclN5bmMoZSksZD0wO2Q8YTsrK2QpZm9yKHZhciBwPU1hdGgubWF4KDAsTWF0aC5jZWlsKChjLWQpL3IpKSx2PU1hdGgubWluKG4ub3V0SGVpZ2h0LChuLmluSGVpZ2h0K2MtZCkvciksbT0wO208aTsrK20pZm9yKHZhciBnPU1hdGgubWF4KDAsTWF0aC5jZWlsKCh1LW0pL28pKSx5PU1hdGgubWluKG4ub3V0V2lkdGgsKG4uaW5XaWR0aCt1LW0pL28pLHg9MDt4PG4ub3V0Q2hhbm5lbHM7Kyt4KXtmb3IodmFyIGI9TWF0aC50cnVuYyh4L2wpLHc9eCVsLEM9MCxFPTA7RTxuLmJhdGNoU2l6ZTsrK0UpZm9yKHZhciBSPXA7Ujx2OysrUilmb3IodmFyIEk9ZCtSKnItYyxrPWc7azx5Oysrayl7dmFyIFM9bStrKm8tdTtDKz1oLmdldChFLEksUyxiKSpmLmdldChFLFIsayx4KX1zLnNldChDLGQsbSxiLHcpfXJldHVybiBzLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLnRpbGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gSGgodCxcInRpbGVcIiksdGEodGhpcy5idWZmZXJTeW5jKHQpLGUpfSxvLnByb3RvdHlwZS5wYWQ9ZnVuY3Rpb24odCxlLG4pe0hoKHQsXCJwYWRcIik7dmFyIHI9ZS5tYXAoKGZ1bmN0aW9uKGUsbil7cmV0dXJuIGVbMF0rdC5zaGFwZVtuXStlWzFdfSkpLG89ZS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfSkpLGE9dGhpcy5idWZmZXJTeW5jKHQpLGk9ZHIocix0LmR0eXBlKTswIT09biYmaS52YWx1ZXMuZmlsbChuKTtmb3IodmFyIHM9MDtzPHQuc2l6ZTtzKyspe3ZhciB1PWEuaW5kZXhUb0xvYyhzKSxjPXUubWFwKChmdW5jdGlvbih0LGUpe3JldHVybiB0K29bZV19KSk7aS5zZXQuYXBwbHkoaSxbYS5nZXQuYXBwbHkoYSx1KV0uY29uY2F0KGMpKX1yZXR1cm4gaS50b1RlbnNvcigpfSxvLnByb3RvdHlwZS50cmFuc3Bvc2U9ZnVuY3Rpb24odCxlKXtIaCh0LFwidHJhbnNwb3NlXCIpO2Zvcih2YXIgbj1uZXcgQXJyYXkodC5yYW5rKSxyPTA7cjxuLmxlbmd0aDtyKyspbltyXT10LnNoYXBlW2Vbcl1dO3ZhciBvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9ZHIobix0LmR0eXBlKSxpPXRoaXMuYnVmZmVyU3luYyh0KTtmb3Iocj0wO3I8dC5zaXplOysrcil7Zm9yKHZhciBzPWkuaW5kZXhUb0xvYyhyKSx1PW5ldyBBcnJheShzLmxlbmd0aCksYz0wO2M8dS5sZW5ndGg7YysrKXVbY109c1tlW2NdXTt2YXIgbD1hLmxvY1RvSW5kZXgodSk7YS52YWx1ZXNbbF09b1tyXX1yZXR1cm4gYS50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5nYXRoZXI9ZnVuY3Rpb24odCxlLG4pe0hoKFt0LGVdLFwiZ2F0aGVyXCIpO3ZhciByPXQuc2hhcGUuc2xpY2UoKSxvPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpO3Jbbl09by5sZW5ndGg7Zm9yKHZhciBhPWRyKHIsdC5kdHlwZSksaT10aGlzLmJ1ZmZlclN5bmModCkscz0wO3M8YS5zaXplOysrcyl7dmFyIHU9YS5pbmRleFRvTG9jKHMpLGM9dS5zbGljZSgpO2Nbbl09b1t1W25dXTt2YXIgbD1pLmxvY1RvSW5kZXgoYyk7YS52YWx1ZXNbc109aS52YWx1ZXNbbF19cmV0dXJuIGEudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuYmF0Y2hUb1NwYWNlTkQ9ZnVuY3Rpb24odCxlLG4pe0hoKFt0XSxcImJhdGNoVG9TcGFjZU5EXCIpO3ZhciByPWUucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0KmV9KSksbz16cih0LnNoYXBlLGUsciksYT1HcihvLmxlbmd0aCxlLmxlbmd0aCksaT1Icih0LnNoYXBlLGUscikscz1xcihuLGUubGVuZ3RoKSx1PUtyKGksbixlLmxlbmd0aCk7cmV0dXJuIHQucmVzaGFwZShvKS50cmFuc3Bvc2UoYSkucmVzaGFwZShpKS5zbGljZShzLHUpfSxvLnByb3RvdHlwZS5zcGFjZVRvQmF0Y2hORD1mdW5jdGlvbih0LGUsbil7SGgoW3RdLFwic3BhY2VUb0JhdGNoTkRcIik7dmFyIHI9ZS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQqZX0pKSxvPVtbMCwwXV07by5wdXNoLmFwcGx5KG8sbik7Zm9yKHZhciBhPTErZS5sZW5ndGg7YTx0LnNoYXBlLmxlbmd0aDsrK2Epby5wdXNoKFswLDBdKTt2YXIgaT10LnBhZChvKSxzPXpyKGkuc2hhcGUsZSxyLCExKSx1PUdyKHMubGVuZ3RoLGUubGVuZ3RoLCExKSxjPUhyKGkuc2hhcGUsZSxyLCExKTtyZXR1cm4gaS5yZXNoYXBlKHMpLnRyYW5zcG9zZSh1KS5yZXNoYXBlKGMpfSxvLnByb3RvdHlwZS5wb29sPWZ1bmN0aW9uKHQsZSxuKXtIaCh0LFwicG9vbFwiKTtmb3IodmFyIHI9ZS5zdHJpZGVIZWlnaHQsbz1lLnN0cmlkZVdpZHRoLGE9ZS5kaWxhdGlvbkhlaWdodCxpPWUuZGlsYXRpb25XaWR0aCxzPWUuZWZmZWN0aXZlRmlsdGVySGVpZ2h0LHU9ZS5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxjPWUucGFkSW5mby50b3AsbD1lLnBhZEluZm8ubGVmdCxoPVwibWF4XCI9PT1uP051bWJlci5ORUdBVElWRV9JTkZJTklUWTpOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksZj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxkPWRyKGUub3V0U2hhcGUsdC5kdHlwZSkscD1kLnZhbHVlcyx2PWUub3V0U2hhcGVbMV0qZS5vdXRTaGFwZVsyXSplLm91dFNoYXBlWzNdLG09ZS5vdXRTaGFwZVsyXSplLm91dFNoYXBlWzNdLGc9ZS5vdXRTaGFwZVszXSx5PTA7eTxlLmJhdGNoU2l6ZTsrK3kpZm9yKHZhciB4PXkqdixiPXkqdC5zdHJpZGVzWzBdLHc9MDt3PGUuaW5DaGFubmVsczsrK3cpZm9yKHZhciBDPTA7QzxlLm91dEhlaWdodDsrK0MpZm9yKHZhciBFPUMqci1jLFI9TWF0aC5tYXgoMCxFKSxJPU1hdGgubWluKGUuaW5IZWlnaHQscytFKSxrPXgrQyptLFM9MDtTPGUub3V0V2lkdGg7KytTKXtmb3IodmFyIEE9UypvLWwsRD1NYXRoLm1heCgwLEEpLFQ9TWF0aC5taW4oZS5pbldpZHRoLHUrQSksTj1oLEY9MCxfPTAsTz1SO088STtPKz1hKXtmb3IodmFyIE09YitPKnQuc3RyaWRlc1sxXSxCPUQ7QjxUO0IrPWkpe3ZhciBQPWZbTStCKnQuc3RyaWRlc1syXSt3XTtcIm1heFwiPT09biYmUD5OP049UDpcImF2Z1wiPT09biYmKEYrPVAsXysrKX1pZihpc05hTihOKSlicmVha31wW2srUypnK3ddPVwiYXZnXCI9PT1uP0YvXzpOfXJldHVybiBkLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLm1heFBvb2w9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5wb29sKHQsZSxcIm1heFwiKX0sby5wcm90b3R5cGUubWF4UG9vbFBvc2l0aW9ucz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1kcihlLm91dFNoYXBlLFwiaW50MzJcIikscj1lLnN0cmlkZUhlaWdodCxvPWUuc3RyaWRlV2lkdGgsYT1lLmRpbGF0aW9uSGVpZ2h0LGk9ZS5kaWxhdGlvbldpZHRoLHM9ZS5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsdT1lLmVmZmVjdGl2ZUZpbHRlcldpZHRoLGM9ZS5wYWRJbmZvLnRvcCxsPWUucGFkSW5mby5sZWZ0LGg9dGhpcy5idWZmZXJTeW5jKHQpLGY9MDtmPGUuYmF0Y2hTaXplOysrZilmb3IodmFyIGQ9MDtkPGUuaW5DaGFubmVsczsrK2QpZm9yKHZhciBwPTA7cDxlLm91dEhlaWdodDsrK3Ape2Zvcih2YXIgdj1wKnItYyxtPXY7bTwwOyltKz1hO2Zvcih2YXIgZz1NYXRoLm1pbihlLmluSGVpZ2h0LHMrdikseT0wO3k8ZS5vdXRXaWR0aDsrK3kpe2Zvcih2YXIgeD15Km8tbCxiPXg7YjwwOyliKz1pO2Zvcih2YXIgdz1NYXRoLm1pbihlLmluV2lkdGgsdSt4KSxDPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSxFPS0xLFI9bTtSPGc7Uis9YSlmb3IodmFyIEk9Ui12LGs9YjtrPHc7ays9aSl7dmFyIFM9ay14LEE9aC5nZXQoZixSLGssZCk7QT5DJiYoQz1BLEU9SSp1K1MpfW4uc2V0KEUsZixwLHksZCl9fXJldHVybiBuLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLm1heFBvb2xCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXtIaChbZSxuXSxcIm1heFBvb2xCYWNrcHJvcFwiKTtmb3IodmFyIG89dGhpcy5tYXhQb29sUG9zaXRpb25zKGUsciksYT1yLnN0cmlkZUhlaWdodCxpPXIuc3RyaWRlV2lkdGgscz1yLmRpbGF0aW9uSGVpZ2h0LHU9ci5kaWxhdGlvbldpZHRoLGM9ci5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsbD1yLmVmZmVjdGl2ZUZpbHRlcldpZHRoLGg9bC0xLXIucGFkSW5mby5sZWZ0LGY9Yy0xLXIucGFkSW5mby50b3AsZD1kcihlLnNoYXBlLFwiZmxvYXQzMlwiKSxwPXRoaXMuYnVmZmVyU3luYyhvKSx2PXRoaXMuYnVmZmVyU3luYyh0KSxtPTA7bTxyLmJhdGNoU2l6ZTsrK20pZm9yKHZhciBnPTA7ZzxyLmluQ2hhbm5lbHM7KytnKWZvcih2YXIgeT0wO3k8ci5pbkhlaWdodDsrK3kpZm9yKHZhciB4PTA7eDxyLmluV2lkdGg7Kyt4KXtmb3IodmFyIGI9eS1mLHc9eC1oLEM9MCxFPTA7RTxjO0UrPXMpe3ZhciBSPShiK0UpL2E7aWYoIShSPDB8fFI+PXIub3V0SGVpZ2h0fHxNYXRoLmZsb29yKFIpIT09UikpZm9yKHZhciBJPTA7STxsO0krPXUpe3ZhciBrPSh3K0kpL2k7aWYoIShrPDB8fGs+PXIub3V0V2lkdGh8fE1hdGguZmxvb3IoaykhPT1rKSl7dmFyIFM9YypsLTEtcC5nZXQobSxSLGssZyk9PT1FKmwrST8xOjA7aWYoMCE9PVMpQys9di5nZXQobSxSLGssZykqU319fWQuc2V0KEMsbSx5LHgsZyl9cmV0dXJuIGQudG9UZW5zb3IoKX0sby5wcm90b3R5cGUuYXZnUG9vbEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXtIaChbdCxlXSxcImF2Z1Bvb2xCYWNrcHJvcFwiKTtmb3IodmFyIHI9bi5zdHJpZGVIZWlnaHQsbz1uLnN0cmlkZVdpZHRoLGE9bi5maWx0ZXJIZWlnaHQsaT1uLmZpbHRlcldpZHRoLHM9bi5kaWxhdGlvbkhlaWdodCx1PW4uZGlsYXRpb25XaWR0aCxjPW4uZWZmZWN0aXZlRmlsdGVySGVpZ2h0LGw9bi5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxoPWwtMS1uLnBhZEluZm8ubGVmdCxmPWMtMS1uLnBhZEluZm8udG9wLGQ9ZHIoZS5zaGFwZSxcImZsb2F0MzJcIikscD0xLyhhKmkpLHY9dGhpcy5idWZmZXJTeW5jKHQpLG09MDttPG4uYmF0Y2hTaXplOysrbSlmb3IodmFyIGc9MDtnPG4uaW5DaGFubmVsczsrK2cpZm9yKHZhciB5PTA7eTxuLmluSGVpZ2h0OysreSlmb3IodmFyIHg9MDt4PG4uaW5XaWR0aDsrK3gpe2Zvcih2YXIgYj15LWYsdz14LWgsQz0wLEU9MDtFPGM7RSs9cyl7dmFyIFI9KGIrRSkvcjtpZighKFI8MHx8Uj49bi5vdXRIZWlnaHR8fE1hdGguZmxvb3IoUikhPT1SKSlmb3IodmFyIEk9MDtJPGw7SSs9dSl7dmFyIGs9KHcrSSkvbztpZighKGs8MHx8az49bi5vdXRXaWR0aHx8TWF0aC5mbG9vcihrKSE9PWspKUMrPXYuZ2V0KG0sUixrLGcpfX1kLnNldChDKnAsbSx5LHgsZyl9cmV0dXJuIGQudG9UZW5zb3IoKX0sby5wcm90b3R5cGUucG9vbDNkPWZ1bmN0aW9uKHQsZSxuKXtIaCh0LFwicG9vbDNkXCIpO2Zvcih2YXIgcj1lLnN0cmlkZURlcHRoLG89ZS5zdHJpZGVIZWlnaHQsYT1lLnN0cmlkZVdpZHRoLGk9ZS5kaWxhdGlvbkRlcHRoLHM9ZS5kaWxhdGlvbkhlaWdodCx1PWUuZGlsYXRpb25XaWR0aCxjPWUuZWZmZWN0aXZlRmlsdGVyRGVwdGgsbD1lLmVmZmVjdGl2ZUZpbHRlckhlaWdodCxoPWUuZWZmZWN0aXZlRmlsdGVyV2lkdGgsZj1lLnBhZEluZm8uZnJvbnQsZD1lLnBhZEluZm8udG9wLHA9ZS5wYWRJbmZvLmxlZnQsdj1cIm1heFwiPT09bj9OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk6TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLG09dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZz1kcihlLm91dFNoYXBlLHQuZHR5cGUpLHk9Zy52YWx1ZXMseD1lLm91dFNoYXBlWzFdKmUub3V0U2hhcGVbMl0qZS5vdXRTaGFwZVszXSplLm91dFNoYXBlWzRdLGI9ZS5vdXRTaGFwZVsyXSplLm91dFNoYXBlWzNdKmUub3V0U2hhcGVbNF0sdz1lLm91dFNoYXBlWzNdKmUub3V0U2hhcGVbNF0sQz1lLm91dFNoYXBlWzRdLEU9MDtFPGUuYmF0Y2hTaXplOysrRSlmb3IodmFyIFI9RSp4LEk9RSp0LnN0cmlkZXNbMF0saz0wO2s8ZS5pbkNoYW5uZWxzOysraylmb3IodmFyIFM9MDtTPGUub3V0RGVwdGg7KytTKXtmb3IodmFyIEE9UypyLWYsRD1BO0Q8MDspRCs9aTtmb3IodmFyIFQ9TWF0aC5taW4oZS5pbkRlcHRoLGMrQSksTj1SK1MqYixGPTA7RjxlLm91dEhlaWdodDsrK0Ype2Zvcih2YXIgXz1GKm8tZCxPPV87TzwwOylPKz1zO2Zvcih2YXIgTT1NYXRoLm1pbihlLmluSGVpZ2h0LGwrXyksQj1OK0YqdyxQPTA7UDxlLm91dFdpZHRoOysrUCl7Zm9yKHZhciBMPVAqYS1wLFc9TDtXPDA7KVcrPXU7Zm9yKHZhciBVPU1hdGgubWluKGUuaW5XaWR0aCxoK0wpLFY9QitQKkMsej12LEc9MCxIPTAscT1EO3E8VDtxKz1pKXtmb3IodmFyIEs9SStxKnQuc3RyaWRlc1sxXSxqPU87ajxNO2orPXMpe2Zvcih2YXIgWD1LK2oqdC5zdHJpZGVzWzJdLFk9VztZPFU7WSs9dSl7dmFyICQ9bVtYK1kqdC5zdHJpZGVzWzNdK2tdO2lmKFwibWF4XCI9PT1uJiYkPno/ej0kOlwiYXZnXCI9PT1uJiYoRys9JCxIKyspLGlzTmFOKHopKWJyZWFrfWlmKGlzTmFOKHopKWJyZWFrfWlmKGlzTmFOKHopKWJyZWFrfXlbVitrXT1cImF2Z1wiPT09bj9HL0g6en19fXJldHVybiBnLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmF2Z1Bvb2wzZD1mdW5jdGlvbih0LGUpe3JldHVybiBIaCh0LFwiYXZnUG9vbDNkXCIpLHRoaXMucG9vbDNkKHQsZSxcImF2Z1wiKS50b0Zsb2F0KCl9LG8ucHJvdG90eXBlLmF2Z1Bvb2wzZEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXtIaChbdCxlXSxcImF2Z1Bvb2wzZEJhY2twcm9wXCIpO2Zvcih2YXIgcj1uLnN0cmlkZURlcHRoLG89bi5zdHJpZGVIZWlnaHQsYT1uLnN0cmlkZVdpZHRoLGk9bi5maWx0ZXJEZXB0aCxzPW4uZmlsdGVySGVpZ2h0LHU9bi5maWx0ZXJXaWR0aCxjPW4uZGlsYXRpb25EZXB0aCxsPW4uZGlsYXRpb25IZWlnaHQsaD1uLmRpbGF0aW9uV2lkdGgsZj1uLmVmZmVjdGl2ZUZpbHRlckRlcHRoLGQ9bi5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQscD1uLmVmZmVjdGl2ZUZpbHRlcldpZHRoLHY9Zi0xLW4ucGFkSW5mby5mcm9udCxtPXAtMS1uLnBhZEluZm8ubGVmdCxnPWQtMS1uLnBhZEluZm8udG9wLHk9ZHIoZS5zaGFwZSxcImZsb2F0MzJcIikseD0xLyhpKnMqdSksYj10aGlzLmJ1ZmZlclN5bmModCksdz0wO3c8bi5iYXRjaFNpemU7Kyt3KWZvcih2YXIgQz0wO0M8bi5pbkNoYW5uZWxzOysrQylmb3IodmFyIEU9MDtFPG4uaW5EZXB0aDsrK0UpZm9yKHZhciBSPTA7UjxuLmluSGVpZ2h0OysrUilmb3IodmFyIEk9MDtJPG4uaW5XaWR0aDsrK0kpe2Zvcih2YXIgaz1FLXYsUz1SLWcsQT1JLW0sRD0wLFQ9MDtUPGY7VCs9Yyl7dmFyIE49KGsrVCkvcjtpZighKE48MHx8Tj49bi5vdXREZXB0aHx8TWF0aC5mbG9vcihOKSE9PU4pKWZvcih2YXIgRj0wO0Y8ZDtGKz1sKXt2YXIgXz0oUytGKS9vO2lmKCEoXzwwfHxfPj1uLm91dEhlaWdodHx8TWF0aC5mbG9vcihfKSE9PV8pKWZvcih2YXIgTz0wO088cDtPKz1oKXt2YXIgTT0oQStPKS9hO2lmKCEoTTwwfHxNPj1uLm91dFdpZHRofHxNYXRoLmZsb29yKE0pIT09TSkpRCs9Yi5nZXQodyxOLF8sTSxDKX19fXkuc2V0KEQqeCx3LEUsUixJLEMpfXJldHVybiB5LnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLm1heFBvb2wzZD1mdW5jdGlvbih0LGUpe3JldHVybiBIaCh0LFwibWF4UG9vbDNkXCIpLHRoaXMucG9vbDNkKHQsZSxcIm1heFwiKS50b0Zsb2F0KCl9LG8ucHJvdG90eXBlLm1heFBvb2wzZFBvc2l0aW9ucz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1kcihlLm91dFNoYXBlLFwiaW50MzJcIikscj1lLnN0cmlkZURlcHRoLG89ZS5zdHJpZGVIZWlnaHQsYT1lLnN0cmlkZVdpZHRoLGk9ZS5kaWxhdGlvbkRlcHRoLHM9ZS5kaWxhdGlvbkhlaWdodCx1PWUuZGlsYXRpb25XaWR0aCxjPWUuZWZmZWN0aXZlRmlsdGVyRGVwdGgsbD1lLmVmZmVjdGl2ZUZpbHRlckhlaWdodCxoPWUuZWZmZWN0aXZlRmlsdGVyV2lkdGgsZj1lLnBhZEluZm8uZnJvbnQsZD1lLnBhZEluZm8udG9wLHA9ZS5wYWRJbmZvLmxlZnQsdj10aGlzLmJ1ZmZlclN5bmModCksbT0wO208ZS5iYXRjaFNpemU7KyttKWZvcih2YXIgZz0wO2c8ZS5pbkNoYW5uZWxzOysrZylmb3IodmFyIHk9MDt5PGUub3V0RGVwdGg7Kyt5KXtmb3IodmFyIHg9eSpyLWYsYj14O2I8MDspYis9aTtmb3IodmFyIHc9TWF0aC5taW4oZS5pbkRlcHRoLGMreCksQz0wO0M8ZS5vdXRIZWlnaHQ7KytDKXtmb3IodmFyIEU9QypvLWQsUj1FO1I8MDspUis9cztmb3IodmFyIEk9TWF0aC5taW4oZS5pbkhlaWdodCxsK0UpLGs9MDtrPGUub3V0V2lkdGg7KytrKXtmb3IodmFyIFM9ayphLXAsQT1TO0E8MDspQSs9dTtmb3IodmFyIEQ9TWF0aC5taW4oZS5pbldpZHRoLGgrUyksVD1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksTj0tMSxGPWI7Rjx3O0YrPWkpZm9yKHZhciBfPUYteCxPPVI7TzxJO08rPXMpZm9yKHZhciBNPU8tRSxCPUE7QjxEO0IrPXUpe3ZhciBQPUItUyxMPXYuZ2V0KG0sRixPLEIsZyk7TD49VCYmKFQ9TCxOPV8qbCpoK00qbCtQKX1uLnNldChOLG0seSxDLGssZyl9fX1yZXR1cm4gbi50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5tYXhQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXtIaChbZSxuXSxcIm1heFBvb2wzZEJhY2twcm9wXCIpO2Zvcih2YXIgbz10aGlzLm1heFBvb2wzZFBvc2l0aW9ucyhlLHIpLGE9ci5zdHJpZGVEZXB0aCxpPXIuc3RyaWRlSGVpZ2h0LHM9ci5zdHJpZGVXaWR0aCx1PXIuZGlsYXRpb25EZXB0aCxjPXIuZGlsYXRpb25IZWlnaHQsbD1yLmRpbGF0aW9uV2lkdGgsaD1yLmVmZmVjdGl2ZUZpbHRlckRlcHRoLGY9ci5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsZD1yLmVmZmVjdGl2ZUZpbHRlcldpZHRoLHA9aC0xLXIucGFkSW5mby5mcm9udCx2PWQtMS1yLnBhZEluZm8ubGVmdCxtPWYtMS1yLnBhZEluZm8udG9wLGc9ZHIoZS5zaGFwZSxcImZsb2F0MzJcIikseT10aGlzLmJ1ZmZlclN5bmMobykseD10aGlzLmJ1ZmZlclN5bmModCksYj0wO2I8ci5iYXRjaFNpemU7KytiKWZvcih2YXIgdz0wO3c8ci5pbkNoYW5uZWxzOysrdylmb3IodmFyIEM9MDtDPHIuaW5EZXB0aDsrK0MpZm9yKHZhciBFPTA7RTxyLmluSGVpZ2h0OysrRSlmb3IodmFyIFI9MDtSPHIuaW5XaWR0aDsrK1Ipe2Zvcih2YXIgST1DLXAsaz1FLW0sUz1SLXYsQT0wLEQ9MDtEPGg7RCs9dSl7dmFyIFQ9KEkrRCkvYTtpZighKFQ8MHx8VD49ci5vdXREZXB0aHx8TWF0aC5mbG9vcihUKSE9PVQpKWZvcih2YXIgTj0wO048ZjtOKz1jKXt2YXIgRj0oaytOKS9pO2lmKCEoRjwwfHxGPj1yLm91dEhlaWdodHx8TWF0aC5mbG9vcihGKSE9PUYpKWZvcih2YXIgXz0wO188ZDtfKz1sKXt2YXIgTz0oUytfKS9zO2lmKCEoTzwwfHxPPj1yLm91dFdpZHRofHxNYXRoLmZsb29yKE8pIT09Tykpe3ZhciBNPWgqZipkLTEteS5nZXQoYixULEYsTyx3KT09PUQqZipkK04qZCtfPzE6MDtpZigwIT09TSlBKz14LmdldChiLFQsRixPLHcpKk19fX19Zy5zZXQoQSxiLEMsRSxSLHcpfXJldHVybiBnLnRvVGVuc29yKCl9LG8ucHJvdG90eXBlLmNhc3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gUG8odCxlLHRoaXMpfSxvLnByb3RvdHlwZS5yZXNoYXBlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIExvKHQsZSl9LG8ucHJvdG90eXBlLmF2Z1Bvb2w9ZnVuY3Rpb24odCxlKXtyZXR1cm4gSGgodCxcImF2Z1Bvb2xcIiksdGhpcy5wb29sKHQsZSxcImF2Z1wiKS50b0Zsb2F0KCl9LG8ucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyPWZ1bmN0aW9uKHQsZSxuLHIpe0hoKHQsXCJyZXNpemVCaWxpbmVhclwiKTtmb3IodmFyIG89dC5zaGFwZSxhPW9bMF0saT1vWzFdLHM9b1syXSx1PW9bM10sYz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPW5ldyBGbG9hdDMyQXJyYXkoayhbYSxlLG4sdV0pKSxoPVtyJiZlPjE/aS0xOmksciYmbj4xP3MtMTpzXSxmPVtyJiZlPjE/ZS0xOmUsciYmbj4xP24tMTpuXSxkPTAscD1oWzBdL2ZbMF0sdj1oWzFdL2ZbMV0sbT0wO208YTttKyspZm9yKHZhciBnPTA7ZzxlO2crKylmb3IodmFyIHk9cCpnLHg9TWF0aC5mbG9vcih5KSxiPXkteCx3PU1hdGgubWluKGktMSxNYXRoLmNlaWwoeSkpLEM9bSp0LnN0cmlkZXNbMF0reCp0LnN0cmlkZXNbMV0sRT1tKnQuc3RyaWRlc1swXSt3KnQuc3RyaWRlc1sxXSxSPTA7UjxuO1IrKylmb3IodmFyIEk9dipSLFM9TWF0aC5mbG9vcihJKSxBPUktUyxEPU1hdGgubWluKHMtMSxNYXRoLmNlaWwoSSkpLFQ9QytTKnQuc3RyaWRlc1syXSxOPUUrUyp0LnN0cmlkZXNbMl0sRj1DK0QqdC5zdHJpZGVzWzJdLF89RStEKnQuc3RyaWRlc1syXSxPPTA7Tzx1O08rKyl7dmFyIE09Y1tUK09dLEI9Y1tOK09dLFA9TSsoY1tGK09dLU0pKkEsTD1QKyhCKyhjW18rT10tQikqQS1QKSpiO2xbZCsrXT1MfXJldHVybiBGbihsLFthLGUsbix1XSl9LG8ucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe0hoKFt0LGVdLFwicmVzaXplQmlsaW5lYXJCYWNrcHJvcFwiKTtmb3IodmFyIHI9ZS5zaGFwZSxvPXJbMF0sYT1yWzFdLGk9clsyXSxzPXJbM10sdT10LnNoYXBlLGM9dVsxXSxsPXVbMl0saD1uZXcgRmxvYXQzMkFycmF5KG8qYSppKnMpLGY9W24mJmM+MT9hLTE6YSxuJiZsPjE/aS0xOmldLGQ9W24mJmM+MT9jLTE6YyxuJiZsPjE/bC0xOmxdLHA9ZlswXS9kWzBdLHY9ZlsxXS9kWzFdLG09dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZz0wLHk9MDt5PG87eSsrKWZvcih2YXIgeD15KmUuc3RyaWRlc1swXSxiPTA7YjxjO2IrKylmb3IodmFyIHc9YipwLEM9TWF0aC5mbG9vcih3KSxFPU1hdGgubWluKE1hdGguY2VpbCh3KSxhLTEpLFI9eCtDKmUuc3RyaWRlc1sxXSxJPXgrRSplLnN0cmlkZXNbMV0saz13LUMsUz0xLWssQT0wO0E8bDtBKyspZm9yKHZhciBEPUEqdixUPU1hdGguZmxvb3IoRCksTj1NYXRoLm1pbihNYXRoLmNlaWwoRCksaS0xKSxGPUQtVCxfPTEtRixPPVIrVCplLnN0cmlkZXNbMl0sTT1SK04qZS5zdHJpZGVzWzJdLEI9SStUKmUuc3RyaWRlc1syXSxQPUkrTiplLnN0cmlkZXNbMl0sTD1TKl8sVz1TKkYsVT1rKl8sVj1rKkYsej0wO3o8czt6Kyspe3ZhciBHPW1bZysrXTtoW08rel0rPUcqTCxoW00rel0rPUcqVyxoW0Irel0rPUcqVSxoW1Arel0rPUcqVn1yZXR1cm4gTG4oaCxbbyxpLGEsc10sZS5kdHlwZSl9LG8ucHJvdG90eXBlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvcj1mdW5jdGlvbih0LGUsbixyKXtIaCh0LFwicmVzaXplTmVhcmVzdE5laWdoYm9yXCIpO2Zvcih2YXIgbz10LnNoYXBlLGE9b1swXSxpPW9bMV0scz1vWzJdLHU9b1szXSxjPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGw9bmV3IEZsb2F0MzJBcnJheShhKmUqbip1KSxoPVtyJiZlPjE/aS0xOmksciYmbj4xP3MtMTpzXSxmPVtyJiZlPjE/ZS0xOmUsciYmbj4xP24tMTpuXSxkPWhbMF0vZlswXSxwPWhbMV0vZlsxXSx2PTAsbT0wO208YTttKyspZm9yKHZhciBnPW0qdC5zdHJpZGVzWzBdLHk9MDt5PGU7eSsrKWZvcih2YXIgeD1kKnksYj1nK01hdGgubWluKGktMSxyP01hdGgucm91bmQoeCk6TWF0aC5mbG9vcih4KSkqdC5zdHJpZGVzWzFdLHc9MDt3PG47dysrKWZvcih2YXIgQz1wKncsRT1iK01hdGgubWluKHMtMSxyP01hdGgucm91bmQoQyk6TWF0aC5mbG9vcihDKSkqdC5zdHJpZGVzWzJdLFI9MDtSPHU7UisrKXt2YXIgST1jW0UrUl07bFt2KytdPUl9cmV0dXJuIEZuKGwsW2EsZSxuLHVdLHQuZHR5cGUpfSxvLnByb3RvdHlwZS5yZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7SGgoW3QsZV0sXCJyZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcFwiKTtmb3IodmFyIHI9ZS5zaGFwZSxvPXJbMF0sYT1yWzFdLGk9clsyXSxzPXJbM10sdT10LnNoYXBlLGM9dVsxXSxsPXVbMl0saD1uZXcgRmxvYXQzMkFycmF5KG8qYSppKnMpLGY9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZD1bbiYmYz4xP2EtMTphLG4mJmw+MT9pLTE6aV0scD1bbiYmYz4xP2MtMTpjLG4mJmw+MT9sLTE6bF0sdj1kWzBdL3BbMF0sbT1kWzFdL3BbMV0sZz0xL3YseT0xL20seD0yKk1hdGguY2VpbChnKSsyLGI9MipNYXRoLmNlaWwoeSkrMix3PTA7dzxvO3crKylmb3IodmFyIEM9dyplLnN0cmlkZXNbMF0sRT0wO0U8YTtFKyspZm9yKHZhciBSPUMrRSplLnN0cmlkZXNbMV0sST1NYXRoLmZsb29yKEUqZyksaz1NYXRoLmZsb29yKEkteC8yKSxTPTA7UzxpO1MrKylmb3IodmFyIEE9UitTKmUuc3RyaWRlc1syXSxEPU1hdGguZmxvb3IoUyp5KSxUPU1hdGguZmxvb3IoRC1iLzIpLE49MDtOPHM7TisrKXtmb3IodmFyIEY9MCxfPTA7Xzx4O18rKyl7dmFyIE89XytrO2lmKCEoTzwwfHxPPj1jKSl7dmFyIE09QytPKnQuc3RyaWRlc1sxXSxCPU8qdjtpZihFPT09TWF0aC5taW4oYS0xLG4/TWF0aC5yb3VuZChCKTpNYXRoLmZsb29yKEIpKSlmb3IodmFyIFA9MDtQPGI7UCsrKXt2YXIgTD1QK1Q7aWYoIShMPDB8fEw+PWwpKXt2YXIgVz1NK0wqdC5zdHJpZGVzWzJdLFU9TCptO1M9PT1NYXRoLm1pbihpLTEsbj9NYXRoLnJvdW5kKFUpOk1hdGguZmxvb3IoVSkpJiYoRis9ZltXK05dKX19fX1oW0ErTl09Rn1yZXR1cm4gTG4oaCxlLnNoYXBlLGUuZHR5cGUpfSxvLnByb3RvdHlwZS5iYXRjaE5vcm1hbGl6YXRpb249ZnVuY3Rpb24odCxlLG4scixvLGEpe0hoKFt0LGUsbixvLGFdLFwiYmF0Y2hOb3JtXCIpO2Zvcih2YXIgaT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxzPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHU9dGhpcy5yZWFkU3luYyhuLmRhdGFJZCksYz1vP3RoaXMucmVhZFN5bmMoby5kYXRhSWQpOm5ldyBGbG9hdDMyQXJyYXkoWzFdKSxsPWE/dGhpcy5yZWFkU3luYyhhLmRhdGFJZCk6bmV3IEZsb2F0MzJBcnJheShbMF0pLGg9bmV3IEZsb2F0MzJBcnJheShpLmxlbmd0aCksZj1sLmxlbmd0aCxkPWMubGVuZ3RoLHA9dS5sZW5ndGgsdj1zLmxlbmd0aCxtPTAsZz0wLHk9MCx4PTAsYj0wO2I8aS5sZW5ndGg7KytiKWhbYl09bFttKytdKyhpW2JdLXNbZysrXSkqY1t5KytdL01hdGguc3FydCh1W3grK10rciksbT49ZiYmKG09MCksZz49diYmKGc9MCkseT49ZCYmKHk9MCkseD49cCYmKHg9MCk7cmV0dXJuIExuKGgsdC5zaGFwZSl9LG8ucHJvdG90eXBlLmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uNEQ9ZnVuY3Rpb24odCxlLG4scixvKXtIaCh0LFwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb240RFwiKTt2YXIgYT10LnNoYXBlWzNdLGk9YS0xLHM9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksdT10LnNpemUsYz1uZXcgRmxvYXQzMkFycmF5KHUpO2Z1bmN0aW9uIGwodCl7Zm9yKHZhciBuPXQlYSxyPXQtbitNYXRoLm1heCgwLG4tZSksbz10LW4rTWF0aC5taW4obitlLGkpLHU9MDtyPD1vO3IrKyl7dmFyIGM9c1tyXTt1Kz1jKmN9cmV0dXJuIHV9Zm9yKHZhciBoPTA7aDx1O2grKyl7dmFyIGY9bChoKSxkPXNbaF0qTWF0aC5wb3cobityKmYsLW8pO2NbaF09ZH1yZXR1cm4gTG4oYyx0LnNoYXBlKX0sby5wcm90b3R5cGUuTFJOR3JhZD1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXtIaCh0LFwiTFJOR3JhZFwiKTtmb3IodmFyIHM9dC5zaGFwZVszXSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGM9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksbD10aGlzLnJlYWRTeW5jKG4uZGF0YUlkKSxoPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxmPXQuc2l6ZSxkPTA7ZDxmO2QrKyl7Zm9yKHZhciBwPWQlcyx2PWQtcCtNYXRoLm1heCgwLHAtciksbT1kLXArTWF0aC5taW4ocyxwK3IrMSksZz0wLHk9djt5PG07eSsrKWcrPU1hdGgucG93KGNbeV0sMik7Zz1hKmcrbztmb3IoeT12O3k8bTt5Kyspe3ZhciB4PS0yKmEqaSpjW3ldKmxbZF0vZztkPT09eSYmKHgrPU1hdGgucG93KGcsLWkpKSx4Kj11W2RdLGhbeV0rPXh9fXJldHVybiBMbihoLHQuc2hhcGUpfSxvLnByb3RvdHlwZS5tdWx0aW5vbWlhbD1mdW5jdGlvbih0LGUsbixyKXtIaCh0LFwibXVsdGlub21pYWxcIik7Zm9yKHZhciBvPWU/dDpnbyh0KSxhPW8uc2hhcGVbMF0saT1vLnNoYXBlWzFdLHM9R24oW2Esbl0sXCJpbnQzMlwiKSx1PXRoaXMucmVhZFN5bmMocy5kYXRhSWQpLGM9dGhpcy5yZWFkU3luYyhvLmRhdGFJZCksbD0wO2w8YTsrK2wpe3ZhciBoPWwqaSxmPW5ldyBGbG9hdDMyQXJyYXkoaS0xKTtmWzBdPWNbaF07Zm9yKHZhciBkPTE7ZDxmLmxlbmd0aDsrK2QpZltkXT1mW2QtMV0rY1toK2RdO2Zvcih2YXIgcD1jcihyLnRvU3RyaW5nKCkpLHY9bCpuLG09MDttPG47KyttKXt2YXIgZz1wKCk7dVt2K21dPWYubGVuZ3RoO2Zvcih2YXIgeT0wO3k8Zi5sZW5ndGg7eSsrKWlmKGc8Zlt5XSl7dVt2K21dPXk7YnJlYWt9fX1yZXR1cm4gc30sby5wcm90b3R5cGUub25lSG90PWZ1bmN0aW9uKHQsZSxuLHIpe0hoKHQsXCJvbmVIb3RcIik7dmFyIG89bmV3IEZsb2F0MzJBcnJheSh0LnNpemUqZSk7by5maWxsKHIpO2Zvcih2YXIgYT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxpPTA7aTx0LnNpemU7KytpKWFbaV0+PTAmJmFbaV08ZSYmKG9baSplK2FbaV1dPW4pO3JldHVybiBCbihvLFt0LnNpemUsZV0sXCJpbnQzMlwiKX0sby5wcm90b3R5cGUubm9uTWF4U3VwcHJlc3Npb249ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gSGgodCxcIm5vbk1heFN1cHByZXNzaW9uXCIpLGpvKHRoaXMucmVhZFN5bmModC5kYXRhSWQpLHRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLG4scixvKX0sby5wcm90b3R5cGUuZmZ0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZmdEJhdGNoKHQsITEpfSxvLnByb3RvdHlwZS5pZmZ0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZmdEJhdGNoKHQsITApfSxvLnByb3RvdHlwZS5mZnRCYXRjaD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10LnNoYXBlWzBdLHI9dC5zaGFwZVsxXSxvPWRyKHQuc2hhcGUsXCJmbG9hdDMyXCIpLGE9ZHIodC5zaGFwZSxcImZsb2F0MzJcIiksaT1Ubih0KS5hczJEKG4scikscz1Obih0KS5hczJEKG4sciksdT0wO3U8bjt1KyspZm9yKHZhciBjPWkuc2xpY2UoW3UsMF0sWzEscl0pLGw9cy5zbGljZShbdSwwXSxbMSxyXSksaD1EbihjLGwpLGY9dGhpcy5yZWFkU3luYyh0aGlzLmZmdEltcGwoaCxlKS5kYXRhSWQpLGQ9MDtkPHI7ZCsrKXt2YXIgcD16byhmLGQpO28udmFsdWVzW3UqcitkXT1wLnJlYWwsYS52YWx1ZXNbdSpyK2RdPXAuaW1hZ31yZXR1cm4gRG4oby50b1RlbnNvcigpLGEudG9UZW5zb3IoKSkuYXMyRChuLHIpfSxvLnByb3RvdHlwZS5mZnRJbXBsPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5hczFEKCkscj1uLnNpemU7aWYodGhpcy5pc0V4cG9uZW50T2YyKHIpKXt2YXIgbz10aGlzLmZmdFJhZGl4MihuLHIsZSkuYXMyRCh0LnNoYXBlWzBdLHQuc2hhcGVbMV0pO3JldHVybiBlJiYobz1EbihUbihvKS5kaXYoT24ocikpLE5uKG8pLmRpdihPbihyKSkpKSxvfXZhciBhPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5sZW5ndGgvMiksbj1uZXcgRmxvYXQzMkFycmF5KHQubGVuZ3RoLzIpLHI9MDtyPHQubGVuZ3RoO3IrPTIpZVtyLzJdPXRbcl0sbltyLzJdPXRbcisxXTtyZXR1cm57cmVhbDplLGltYWc6bn19KHRoaXMuZm91cmllclRyYW5zZm9ybUJ5TWF0bXVsKGEscixlKSk7cmV0dXJuIERuKGkucmVhbCxpLmltYWcpLmFzMkQodC5zaGFwZVswXSx0LnNoYXBlWzFdKX0sby5wcm90b3R5cGUuaXNFeHBvbmVudE9mMj1mdW5jdGlvbih0KXtyZXR1cm4gMD09KHQmdC0xKX0sby5wcm90b3R5cGUuZmZ0UmFkaXgyPWZ1bmN0aW9uKHQsZSxuKXtpZigxPT09ZSlyZXR1cm4gdDt2YXIgcj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPWUvMixhPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1NYXRoLmNlaWwodC5sZW5ndGgvNCksbj1uZXcgRmxvYXQzMkFycmF5KGUpLHI9bmV3IEZsb2F0MzJBcnJheShlKSxvPTA7bzx0Lmxlbmd0aDtvKz00KW5bTWF0aC5mbG9vcihvLzQpXT10W29dLHJbTWF0aC5mbG9vcihvLzQpXT10W28rMV07cmV0dXJue3JlYWw6bixpbWFnOnJ9fShyKSxpPURuKGEucmVhbCxhLmltYWcpLmFzMUQoKSxzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1NYXRoLmZsb29yKHQubGVuZ3RoLzQpLG49bmV3IEZsb2F0MzJBcnJheShlKSxyPW5ldyBGbG9hdDMyQXJyYXkoZSksbz0yO288dC5sZW5ndGg7bys9NCluW01hdGguZmxvb3Ioby80KV09dFtvXSxyW01hdGguZmxvb3Ioby80KV09dFtvKzFdO3JldHVybntyZWFsOm4saW1hZzpyfX0ociksdT1EbihzLnJlYWwscy5pbWFnKS5hczFEKCk7aT10aGlzLmZmdFJhZGl4MihpLG8sbiksdT10aGlzLmZmdFJhZGl4Mih1LG8sbik7dmFyIGM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IEZsb2F0MzJBcnJheSh0LzIpLHI9bmV3IEZsb2F0MzJBcnJheSh0LzIpLG89MDtvPE1hdGguY2VpbCh0LzIpO28rKyl7dmFyIGE9KGU/MjotMikqTWF0aC5QSSooby90KTtuW29dPU1hdGguY29zKGEpLHJbb109TWF0aC5zaW4oYSl9cmV0dXJue3JlYWw6bixpbWFnOnJ9fShlLG4pLGw9RG4oYy5yZWFsLGMuaW1hZykubXVsKHUpLGg9aS5hZGQobCksZj1pLnN1YihsKSxkPVRuKGgpLmNvbmNhdChUbihmKSkscD1ObihoKS5jb25jYXQoTm4oZikpO3JldHVybiBEbihkLHApLmFzMUQoKX0sby5wcm90b3R5cGUuZm91cmllclRyYW5zZm9ybUJ5TWF0bXVsPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9bmV3IEZsb2F0MzJBcnJheSgyKmUpLG89MDtvPGU7bysrKXtmb3IodmFyIGE9MCxpPTAscz0wO3M8ZTtzKyspe3ZhciB1PUhvKG8qcyxlLG4pLGM9em8odCxzKTthKz1jLnJlYWwqdS5yZWFsLWMuaW1hZyp1LmltYWcsaSs9Yy5yZWFsKnUuaW1hZytjLmltYWcqdS5yZWFsfW4mJihhLz1lLGkvPWUpLEdvKHIsYSxpLG8pfXJldHVybiByfSxvLnByb3RvdHlwZS5kZXB0aFRvU3BhY2U9ZnVuY3Rpb24odCxlLG4pe0MoXCJOSFdDXCI9PT1uLChmdW5jdGlvbigpe3JldHVyblwiT25seSBOSFdDIGRhdGFGb3JtYXQgc3VwcG9ydGVkIG9uIENQVSBmb3IgZGVwdGhUb1NwYWNlLiBHb3QgXCIrbn0pKSxDKGU+MSwoZnVuY3Rpb24oKXtyZXR1cm5cImJsb2NrU2l6ZSBzaG91bGQgYmUgPiAxIGZvciBkZXB0aFRvU3BhY2UsIGJ1dCB3YXM6IFwiK2V9KSk7Zm9yKHZhciByPXQuc2hhcGVbMF0sbz10LnNoYXBlWzFdLGE9dC5zaGFwZVsyXSxpPXQuc2hhcGVbM10scz1vKmUsdT1hKmUsYz1pLyhlKmUpLGw9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksaD1uZXcgRmxvYXQzMkFycmF5KHIqcyp1KmMpLGY9MCxkPTA7ZDxyOysrZClmb3IodmFyIHA9MDtwPHM7KytwKWZvcih2YXIgdj1NYXRoLmZsb29yKHAvZSksbT1wJWUsZz0wO2c8dTsrK2cpZm9yKHZhciB5PU1hdGguZmxvb3IoZy9lKSx4PShtKmUrZyVlKSpjLGI9MDtiPGM7KytiKXt2YXIgdz1iK3graSooeSthKih2K28qZCkpO2hbZisrXT1sW3ddfXJldHVybiBMbihoLFtyLHMsdSxjXSl9LG8ucHJvdG90eXBlLmJyb2FkY2FzdGVkQmluYXJ5T3A9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89Um8odC5zaGFwZSxlLnNoYXBlKSxhPWRyKG8sbiksaT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxzPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHU9Q28odC5zaGFwZSxvKSxjPUNvKGUuc2hhcGUsbyksbD1hLnZhbHVlcztpZih1Lmxlbmd0aCtjLmxlbmd0aD09PTApZm9yKHZhciBoPTA7aDxsLmxlbmd0aDsrK2gpbFtoXT1yKGlbaCVpLmxlbmd0aF0sc1toJXMubGVuZ3RoXSk7ZWxzZXt2YXIgZj10aGlzLmJ1ZmZlclN5bmModCksZD10aGlzLmJ1ZmZlclN5bmMoZSkscD1mdW5jdGlvbihuKXt2YXIgbz1hLmluZGV4VG9Mb2MobiksaD1vLnNsaWNlKC10LnJhbmspO3UuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIGhbdF09MH0pKTt2YXIgcD1mLmxvY1RvSW5kZXgoaCksdj1vLnNsaWNlKC1lLnJhbmspO2MuZm9yRWFjaCgoZnVuY3Rpb24odCl7cmV0dXJuIHZbdF09MH0pKTt2YXIgbT1kLmxvY1RvSW5kZXgodik7bFtuXT1yKGlbcF0sc1ttXSl9O2ZvcihoPTA7aDxsLmxlbmd0aDsrK2gpcChoKX1yZXR1cm4gYS50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5icm9hZGNhc3RlZEJpbmFyeUNvbXBsZXhPcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9Um8odC5zaGFwZSxlLnNoYXBlKSxvPWRyKHIsXCJmbG9hdDMyXCIpLGE9ZHIocixcImZsb2F0MzJcIiksaT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxzPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHU9Q28odC5zaGFwZSxyKSxjPUNvKGUuc2hhcGUsciksbD1vLnZhbHVlcyxoPWEudmFsdWVzO2lmKHUubGVuZ3RoK2MubGVuZ3RoPT09MClmb3IodmFyIGY9MDtmPGwubGVuZ3RoO2YrKyl7dmFyIGQ9ZiVpLmxlbmd0aCxwPWYlcy5sZW5ndGgsdj1uKGlbMipkXSxpWzIqZCsxXSxzWzIqcF0sc1syKnArMV0pO2xbZl09di5yZWFsLGhbZl09di5pbWFnfWVsc2V7dmFyIG09dGhpcy5idWZmZXJTeW5jKHRoaXMuZGF0YS5nZXQodC5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzLnJlYWwpLGc9dGhpcy5idWZmZXJTeW5jKHRoaXMuZGF0YS5nZXQoZS5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzLnJlYWwpLHk9ZnVuY3Rpb24ocil7dmFyIGE9by5pbmRleFRvTG9jKHIpLGY9YS5zbGljZSgtdC5yYW5rKTt1LmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBmW3RdPTB9KSk7dmFyIGQ9bS5sb2NUb0luZGV4KGYpLHA9YS5zbGljZSgtZS5yYW5rKTtjLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBwW3RdPTB9KSk7dmFyIHY9Zy5sb2NUb0luZGV4KHApLHk9bihpWzIqZF0saVsyKmQrMV0sc1syKnZdLHNbMip2KzFdKTtsW3JdPXkucmVhbCxoW3JdPXkuaW1hZ307Zm9yKGY9MDtmPGwubGVuZ3RoO2YrKyl5KGYpfXJldHVybiB0aGlzLmNvbXBsZXgoby50b1RlbnNvcigpLGEudG9UZW5zb3IoKSl9LG8ucHJvdG90eXBlLnNwbGl0PWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gWm8odCxlLG4pfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7fSxvLnByb3RvdHlwZS5mbG9hdFByZWNpc2lvbj1mdW5jdGlvbigpe3JldHVybiAzMn0sby5wcm90b3R5cGUuZXBzaWxvbj1mdW5jdGlvbigpe3JldHVybiAxZS03fSxvLnByb3RvdHlwZS5jcm9wQW5kUmVzaXplPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtmb3IodmFyIGk9dC5zaGFwZSxzPWlbMF0sdT1pWzFdLGM9aVsyXSxsPWlbM10saD1lLnNoYXBlWzBdLGY9clswXSxkPXJbMV0scD1kcihbaCxmLGQsbF0sXCJmbG9hdDMyXCIpLHY9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksbT10aGlzLnJlYWRTeW5jKG4uZGF0YUlkKSxnPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHk9dC5zdHJpZGVzLHg9cC5zdHJpZGVzLGI9MDtiPGg7YisrKXt2YXIgdz00KmIsQz12W3ddLEU9dlt3KzFdLFI9dlt3KzJdLEk9dlt3KzNdLGs9bVtiXTtpZighKGs+PXMpKWZvcih2YXIgUz1mPjE/KFItQykqKHUtMSkvKGYtMSk6MCxBPWQ+MT8oSS1FKSooYy0xKS8oZC0xKTowLEQ9MDtEPGY7RCsrKXt2YXIgVD1mPjE/QyoodS0xKStEKlM6LjUqKEMrUikqKHUtMSk7aWYoVDwwfHxUPnUtMSlmb3IodmFyIE49MDtOPGQ7TisrKWZvcih2YXIgRj0wO0Y8bDtGKyspe3ZhciBfPUYrTip4WzJdK0QqeFsxXStiKnhbMF07cC52YWx1ZXNbX109YX1lbHNlIGlmKFwiYmlsaW5lYXJcIj09PW8pe3ZhciBPPU1hdGguZmxvb3IoVCksTT1NYXRoLmNlaWwoVCksQj1ULU87Zm9yKE49MDtOPGQ7TisrKXtpZigocT1kPjE/RSooYy0xKStOKkE6LjUqKEUrSSkqKGMtMSkpPDB8fHE+Yy0xKWZvcihGPTA7RjxsO0YrKyl7Xz1GK04qeFsyXStEKnhbMV0rYip4WzBdO3AudmFsdWVzW19dPWF9ZWxzZXt2YXIgUD1NYXRoLmZsb29yKHEpLEw9TWF0aC5jZWlsKHEpLFc9cS1QO2ZvcihGPTA7RjxsO0YrKyl7dmFyIFU9Z1tfPUYrUCp5WzJdK08qeVsxXStrKnlbMF1dLFY9Z1tfPUYrTCp5WzJdK08qeVsxXStrKnlbMF1dLHo9Z1tfPUYrUCp5WzJdK00qeVsxXStrKnlbMF1dLEc9VSsoVi1VKSpXLEg9eisoZ1tfPUYrTCp5WzJdK00qeVsxXStrKnlbMF1dLXopKlc7Xz1GK04qeFsyXStEKnhbMV0rYip4WzBdLHAudmFsdWVzW19dPUcrKEgtRykqQn19fX1lbHNlIGZvcihOPTA7TjxkOysrTil7dmFyIHE7aWYoKHE9ZD4xP0UqKGMtMSkrTipBOi41KihFK0kpKihjLTEpKTwwfHxxPmMtMSlmb3IoRj0wO0Y8bDtGKyspe189RitOKnhbMl0rRCp4WzFdK2IqeFswXTtwLnZhbHVlc1tfXT1hfWVsc2V7dmFyIEs9TWF0aC5yb3VuZChxKSxqPU1hdGgucm91bmQoVCk7Zm9yKEY9MDtGPGw7RisrKXt2YXIgWD1GK0sqeVsyXStqKnlbMV0rayp5WzBdLFk9RitOKnhbMl0rRCp4WzFdK2IqeFswXTtwLnZhbHVlc1tZXT1nW1hdfX19fX1yZXR1cm4gcC50b1RlbnNvcigpfSxvLnByb3RvdHlwZS5zcGFyc2VUb0RlbnNlPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPVpyKDAsdCxuKSxhPW8uc2xpY2VSYW5rLGk9by5udW1VcGRhdGVzLHM9by5zbGljZVNpemUsdT1vLnN0cmlkZXMsYz1vLm91dHB1dFNpemU7cmV0dXJuIHRoaXMuc2NhdHRlcih0LGUsbixjLHMsaSxhLHUsciwhMSl9LG8ucHJvdG90eXBlLmdhdGhlck5EPWZ1bmN0aW9uKHQsZSl7dmFyIG49ZS5zaGFwZSxyPW5bbi5sZW5ndGgtMV0sbz1qcih0LGUpLGE9b1swXSxpPW9bMV0scz1vWzJdLHU9b1szXTtpZigwPT09aSlyZXR1cm4gRm4oW10sYSx0LmR0eXBlKTtmb3IodmFyIGM9bmV3IGd0KFtpLHNdLHQuZHR5cGUpLGw9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksaD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxmPTA7ZjxpO2YrKyl7Zm9yKHZhciBkPVtdLHA9MCx2PTA7djxyO3YrKyl7dmFyIG09bFtmKnIrdl07cCs9bSp1W3ZdLGQucHVzaChtKX1pZihwPDB8fHA+PXQuc2l6ZS9zKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5kaWNlczogXCIrZCtcIiBkb2VzIG5vdCBpbmRleCBpbnRvIFwiK3Quc2hhcGUpO2Zvcih2YXIgZz0wO2c8cztnKyspYy52YWx1ZXNbZipzK2ddPWhbcCpzK2ddfXJldHVybiBjLnRvVGVuc29yKCkucmVzaGFwZShhKX0sby5wcm90b3R5cGUuc2NhdHRlck5EPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1acigwLHQsbiksbz1yLnNsaWNlUmFuayxhPXIubnVtVXBkYXRlcyxpPXIuc2xpY2VTaXplLHM9ci5zdHJpZGVzLHU9ci5vdXRwdXRTaXplLGM9T24oMCk7cmV0dXJuIHRoaXMuc2NhdHRlcih0LGUsbix1LGksYSxvLHMsYywhMCl9LG8ucHJvdG90eXBlLmZpbGw9ZnVuY3Rpb24odCxlLG4pe3ZhciByPVAobj1ufHxqKGUpLGsodCkpO3JldHVybiByLmZpbGwoZSksTHQubWFrZVRlbnNvcihyLHQsbix0aGlzKX0sby5wcm90b3R5cGUub25lc0xpa2U9ZnVuY3Rpb24odCl7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwib25lc0xpa2UgaXMgbm90IHN1cHBvcnRlZCBmb3Igc3RyaW5nIHRlbnNvcnNcIik7cmV0dXJuIHRoaXMuZmlsbCh0LnNoYXBlLDEsdC5kdHlwZSl9LG8ucHJvdG90eXBlLnplcm9zTGlrZT1mdW5jdGlvbih0KXt2YXIgZT1QKHQuZHR5cGUsayh0LnNoYXBlKSk7cmV0dXJuIHRoaXMubWFrZU91dHB1dChlLHQuc2hhcGUsdC5kdHlwZSl9LG8ucHJvdG90eXBlLmxpbnNwYWNlPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gV28odCxlLG4pfSxvLnByb3RvdHlwZS5zY2F0dGVyPWZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyx1LGMpe3ZhciBsPVtyL28sb10saD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxmPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpO2lmKDA9PT1yKXJldHVybiBGbihbXSxuLGUuZHR5cGUpO3ZhciBkPW5ldyBndChsLGUuZHR5cGUpO2QudmFsdWVzLmZpbGwodGhpcy5yZWFkU3luYyh1LmRhdGFJZClbMF0pO2Zvcih2YXIgcD0wO3A8YTtwKyspe2Zvcih2YXIgdj1bXSxtPTAsZz0wO2c8aTtnKyspe3ZhciB5PWhbcCppK2ddO3YucHVzaCh5KSxtKz15KnNbZ119aWYobTwwfHxtPj1yL28pdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbmRpY2VzOiBcIit2K1wiIGRvZXMgbm90IGluZGV4IGludG8gXCIrbik7Zm9yKHZhciB4PTA7eDxvO3grKyljP2QudmFsdWVzW20qbyt4XSs9ZltwKm8reF06ZC52YWx1ZXNbbSpvK3hdPTA9PT1lLnJhbms/ZlswXTpmW3Aqbyt4XX1yZXR1cm4gZC50b1RlbnNvcigpLnJlc2hhcGUobil9LG99KGJvKTtMdC5yZWdpc3RlckJhY2tlbmQoXCJjcHVcIiwoZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEtofSksMSk7Zm9yKHZhciBqaD0wLFhoPVt7a2VybmVsTmFtZTpcIk5vbk1heFN1cHByZXNzaW9uVjVcIixiYWNrZW5kTmFtZTpcImNwdVwiLGtlcm5lbEZ1bmM6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dHMsbj10LmJhY2tlbmQscj10LmF0dHJzLG89ZSxhPW8uYm94ZXMsaT1vLnNjb3JlcyxzPXIsdT1zLm1heE91dHB1dFNpemUsYz1zLmlvdVRocmVzaG9sZCxsPXMuc2NvcmVUaHJlc2hvbGQsaD1zLnNvZnRObXNTaWdtYSxmPW47SGgoYSxcIk5vbk1heFN1cHByZXNzaW9uV2l0aFNjb3JlXCIpO3ZhciBkPVhvKGYuZGF0YS5nZXQoYS5kYXRhSWQpLnZhbHVlcyxmLmRhdGEuZ2V0KGkuZGF0YUlkKS52YWx1ZXMsdSxjLGwsaCk7cmV0dXJuW2Quc2VsZWN0ZWRJbmRpY2VzLGQuc2VsZWN0ZWRTY29yZXNdfX0se2tlcm5lbE5hbWU6XCJTcXVhcmVcIixiYWNrZW5kTmFtZTpcImNwdVwiLGtlcm5lbEZ1bmM6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dHMsbj10LmJhY2tlbmQscj1lLngsbz1uO0hoKHIsXCJzcXVhcmVcIik7Zm9yKHZhciBhPW8uZGF0YS5nZXQoci5kYXRhSWQpLnZhbHVlcyxpPW5ldyBGbG9hdDMyQXJyYXkoYS5sZW5ndGgpLHM9MDtzPGEubGVuZ3RoOysrcyl7dmFyIHU9YVtzXTtpW3NdPXUqdX1yZXR1cm57ZGF0YUlkOm8ud3JpdGUoaSxyLnNoYXBlLHIuZHR5cGUpLHNoYXBlOnIuc2hhcGUsZHR5cGU6ci5kdHlwZX19fSx7a2VybmVsTmFtZTpldSxiYWNrZW5kTmFtZTpcImNwdVwiLGtlcm5lbEZ1bmM6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dHMsbj10LmJhY2tlbmQscj1lLG89ci5hLGE9ci5iLGk9bjtIaChbbyxhXSxldSk7dmFyIHM9aS5kYXRhLmdldChvLmRhdGFJZCkudmFsdWVzLHU9aS5kYXRhLmdldChhLmRhdGFJZCkudmFsdWVzLGM9ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPVJvKHQsZSkscz1pLmxlbmd0aCx1PSQoaSksYz1CKG8sayhpKSksbD10Lmxlbmd0aCxoPWUubGVuZ3RoLGY9JCh0KSxkPSQoZSkscD1Dbyh0LGkpLHY9Q28oZSxpKTtpZihwLmxlbmd0aCt2Lmxlbmd0aD09PTApZm9yKHZhciBtPTA7bTxjLmxlbmd0aDsrK20pY1ttXT1hKG5bbSVuLmxlbmd0aF0sclttJXIubGVuZ3RoXSk7ZWxzZXt2YXIgZz1mdW5jdGlvbih0KXt2YXIgZT1pdCh0LHMsdSksbz1lLnNsaWNlKC1sKTtwLmZvckVhY2goKGZ1bmN0aW9uKHQpe3JldHVybiBvW3RdPTB9KSk7dmFyIGk9YXQobyxsLGYpLG09ZS5zbGljZSgtaCk7di5mb3JFYWNoKChmdW5jdGlvbih0KXtyZXR1cm4gbVt0XT0wfSkpO3ZhciBnPWF0KG0saCxkKTtjW3RdPWEobltpXSxyW2ddKX07Zm9yKG09MDttPGMubGVuZ3RoOysrbSlnKG0pfXJldHVybltjLGldfShvLnNoYXBlLGEuc2hhcGUscyx1LG8uZHR5cGUsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC1lO3JldHVybiBuKm59KSksbD1jWzBdLGg9Y1sxXTtyZXR1cm57ZGF0YUlkOmkud3JpdGUobCxoLG8uZHR5cGUpLHNoYXBlOmgsZHR5cGU6by5kdHlwZX19fV07amg8WGgubGVuZ3RoO2poKyspe2QoWGhbamhdKX12YXIgWWgsJGg9ZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07dmFyIGU9dWEoKSxuPXRbMF0scj10WzFdO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzMgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgdGV4UiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCB0ZXhDID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGRlcHRoID0gY29vcmRzWzJdO1xcbiAgICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIoXCIrcitcIi4wLCBcIituK1wiLjApO1xcblxcbiAgICAgICAgdmVjNCB2YWx1ZXMgPSBcIitlLnRleHR1cmUyRCtcIihBLCB1dik7XFxuICAgICAgICBmbG9hdCB2YWx1ZTtcXG4gICAgICAgIGlmIChkZXB0aCA9PSAwKSB7XFxuICAgICAgICAgIHZhbHVlID0gdmFsdWVzLnI7XFxuICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09IDEpIHtcXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZXMuZztcXG4gICAgICAgIH0gZWxzZSBpZiAoZGVwdGggPT0gMikge1xcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5iO1xcbiAgICAgICAgfSBlbHNlIGlmIChkZXB0aCA9PSAzKSB7XFxuICAgICAgICAgIHZhbHVlID0gdmFsdWVzLmE7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBzZXRPdXRwdXQoZmxvb3IodmFsdWUgKiAyNTUuMCArIDAuNSkpO1xcbiAgICAgIH1cXG4gICAgXCJ9LFFoPWZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMucGFja2VkSW5wdXRzPSExLHRoaXMucGFja2VkT3V0cHV0PSEwO3ZhciBlPXVhKCksbj10WzBdLHI9dFsxXTt0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMzIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IHRleFIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgdGV4QyA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBkZXB0aCA9IGNvb3Jkc1syXTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuXFxuICAgICAgICBmb3IoaW50IHJvdz0wOyByb3c8PTE7IHJvdysrKSB7XFxuICAgICAgICAgIGZvcihpbnQgY29sPTA7IGNvbDw9MTsgY29sKyspIHtcXG4gICAgICAgICAgICB0ZXhDID0gY29vcmRzWzFdICsgcm93O1xcbiAgICAgICAgICAgIGRlcHRoID0gY29vcmRzWzJdICsgY29sO1xcblxcbiAgICAgICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIityK1wiLjAsIFwiK24rXCIuMCk7XFxuICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSBcIitlLnRleHR1cmUyRCtcIihBLCB1dik7XFxuICAgICAgICAgICAgZmxvYXQgdmFsdWU7XFxuICAgICAgICAgICAgaWYgKGRlcHRoID09IDApIHtcXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzLnI7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChkZXB0aCA9PSAxKSB7XFxuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5nO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVwdGggPT0gMikge1xcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXMuYjtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09IDMpIHtcXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzLmE7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIHJlc3VsdFtyb3cgKiAyICsgY29sXSA9IGZsb29yKHZhbHVlICogMjU1LjAgKyAwLjUpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIitlLm91dHB1dCtcIiA9IHJlc3VsdDtcXG4gICAgICB9XFxuICAgIFwifTtmb3IodmFyIEpoPTAsWmg9W3trZXJuZWxOYW1lOlwiRnJvbVBpeGVsc1wiLGJhY2tlbmROYW1lOlwid2ViZ2xcIixrZXJuZWxGdW5jOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW5wdXRzLG49dC5iYWNrZW5kLHI9dC5hdHRycyxvPWUucGl4ZWxzLGE9ci5udW1DaGFubmVscyxzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MVmlkZW9FbGVtZW50JiZvIGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCx1PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50JiZvIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCxjPXM/W28udmlkZW9XaWR0aCxvLnZpZGVvSGVpZ2h0XTpbby53aWR0aCxvLmhlaWdodF0sbD1jWzBdLGg9Y1sxXSxmPVtoLGxdLGQ9W2gsbCxhXTsodXx8cykmJihudWxsPT1ZaCYmKFloPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIikuZ2V0Q29udGV4dChcIjJkXCIpKSxZaC5jYW52YXMud2lkdGg9bCxZaC5jYW52YXMuaGVpZ2h0PWgsWWguZHJhd0ltYWdlKG8sMCwwLGwsaCksbz1ZaC5jYW52YXMpO3ZhciBwPW4ubWFrZVRlbnNvckluZm8oZixcImludDMyXCIpO24udGV4RGF0YS5nZXQocC5kYXRhSWQpLnVzYWdlPXp0LlBJWEVMUyxuLmdwZ3B1LnVwbG9hZFBpeGVsRGF0YVRvVGV4dHVyZShuLmdldFRleHR1cmUocC5kYXRhSWQpLG8pO3ZhciB2PWkoKS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKT9uZXcgUWgoZCk6bmV3ICRoKGQpLG09bi5ydW5XZWJHTFByb2dyYW0odixbcF0sXCJpbnQzMlwiKTtyZXR1cm4gbi5kaXNwb3NlRGF0YShwLmRhdGFJZCksbX19LHtrZXJuZWxOYW1lOlwiTm9uTWF4U3VwcHJlc3Npb25WNVwiLGJhY2tlbmROYW1lOlwid2ViZ2xcIixrZXJuZWxGdW5jOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW5wdXRzLG49dC5iYWNrZW5kLHI9dC5hdHRycztkbihcInRmLm5vbk1heFN1cHByZXNzaW9uKCkgaW4gd2ViZ2wgbG9ja3MgdGhlIFVJIHRocmVhZC4gQ2FsbCB0Zi5ub25NYXhTdXBwcmVzc2lvbkFzeW5jKCkgaW5zdGVhZFwiKTt2YXIgbz1lLGE9by5ib3hlcyxpPW8uc2NvcmVzLHM9cix1PXMubWF4T3V0cHV0U2l6ZSxjPXMuaW91VGhyZXNob2xkLGw9cy5zY29yZVRocmVzaG9sZCxoPXMuc29mdE5tc1NpZ21hLGY9bixkPVhvKGYucmVhZFN5bmMoYS5kYXRhSWQpLGYucmVhZFN5bmMoaS5kYXRhSWQpLHUsYyxsLGgpO3JldHVybltkLnNlbGVjdGVkSW5kaWNlcyxkLnNlbGVjdGVkU2NvcmVzXX19LHtrZXJuZWxOYW1lOlwiU3F1YXJlXCIsYmFja2VuZE5hbWU6XCJ3ZWJnbFwiLGtlcm5lbEZ1bmM6ZnVuY3Rpb24odCl7dmFyIGU9dC5pbnB1dHMsbj10LmJhY2tlbmQscj1lLngsbz1uLGE9bmV3IENzKHIuc2hhcGUsXCJyZXR1cm4geCAqIHg7XCIpO3JldHVybiBvLnJ1bldlYkdMUHJvZ3JhbShhLFtyXSxyLmR0eXBlKX19LHtrZXJuZWxOYW1lOmV1LGJhY2tlbmROYW1lOlwid2ViZ2xcIixrZXJuZWxGdW5jOmZ1bmN0aW9uKHQpe3ZhciBlPXQuaW5wdXRzLG49dC5iYWNrZW5kLHI9ZSxvPXIuYSxhPXIuYixzPW4sdT1pKCkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIik/bmV3IExhKFwicmV0dXJuIChhIC0gYikgKiAoYSAtIGIpO1wiLG8uc2hhcGUsYS5zaGFwZSk6bmV3IEJhKFwicmV0dXJuIChhIC0gYikgKiAoYSAtIGIpO1wiLG8uc2hhcGUsYS5zaGFwZSk7cmV0dXJuIHMuY29tcGlsZUFuZFJ1bih1LFtvLGFdKX19XTtKaDxaaC5sZW5ndGg7SmgrKyl7ZChaaFtKaF0pfWZvcih2YXIgdGY9MCxlZj1be2tlcm5lbE5hbWU6XCJTcXVhcmVcIixncmFkRnVuYzpmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi50b0Zsb2F0KCkubXVsKDIpKX19fX0se2tlcm5lbE5hbWU6ZXUsZ3JhZEZ1bmM6ZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXSxvPU9uKDIpO3JldHVybnthOmZ1bmN0aW9uKCl7cmV0dXJuIGdjKHQsZ2MobyxDYyhuLHIpKSl9LGI6ZnVuY3Rpb24oKXtyZXR1cm4gZ2ModCxnYyhvLENjKHIsbikpKX19fX1dO3RmPGVmLmxlbmd0aDt0ZisrKXtwKGVmW3RmXSl9dmFyIG5mPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5wcm90b3R5cGUuZmV0Y2g9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZmV0Y2godCxlKX0sdC5wcm90b3R5cGUubm93PWZ1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfSx0LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24odCxlKXtpZihcInV0Zi04XCIhPT1lJiZcInV0ZjhcIiE9PWUpdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIGVuY29kZXIgb25seSBzdXBwb3J0cyB1dGYtOCwgYnV0IGdvdCBcIitlKTtyZXR1cm4gbnVsbD09dGhpcy50ZXh0RW5jb2RlciYmKHRoaXMudGV4dEVuY29kZXI9bmV3IFRleHRFbmNvZGVyKSx0aGlzLnRleHRFbmNvZGVyLmVuY29kZSh0KX0sdC5wcm90b3R5cGUuZGVjb2RlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBUZXh0RGVjb2RlcihlKS5kZWNvZGUodCl9LHR9KCk7aSgpLmdldChcIklTX0JST1dTRVJcIikmJmkoKS5zZXRQbGF0Zm9ybShcImJyb3dzZXJcIixuZXcgbmYpO3ZhciByZixvZj1mdW5jdGlvbigpe3JldHVybiByZXF1aXJlKFwibm9kZS1mZXRjaFwiKX0sYWY9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy51dGlsPXJlcXVpcmUoXCJ1dGlsXCIpLHRoaXMudGV4dEVuY29kZXI9bmV3IHRoaXMudXRpbC5UZXh0RW5jb2Rlcn1yZXR1cm4gdC5wcm90b3R5cGUuZmV0Y2g9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbnVsbCE9aSgpLmdsb2JhbC5mZXRjaD9pKCkuZ2xvYmFsLmZldGNoKHQsZSk6KG51bGw9PXJmJiYocmY9b2YoKSkscmYodCxlKSl9LHQucHJvdG90eXBlLm5vdz1mdW5jdGlvbigpe3ZhciB0PXByb2Nlc3MuaHJ0aW1lKCk7cmV0dXJuIDFlMyp0WzBdK3RbMV0vMWU2fSx0LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24odCxlKXtpZihcInV0Zi04XCIhPT1lJiZcInV0ZjhcIiE9PWUpdGhyb3cgbmV3IEVycm9yKFwiTm9kZSBidWlsdC1pbiBlbmNvZGVyIG9ubHkgc3VwcG9ydHMgdXRmLTgsIGJ1dCBnb3QgXCIrZSk7cmV0dXJuIHRoaXMudGV4dEVuY29kZXIuZW5jb2RlKHQpfSx0LnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gMD09PXQubGVuZ3RoP1wiXCI6bmV3IHRoaXMudXRpbC5UZXh0RGVjb2RlcihlKS5kZWNvZGUodCl9LHR9KCk7aSgpLmdldChcIklTX05PREVcIikmJmkoKS5zZXRQbGF0Zm9ybShcIm5vZGVcIixuZXcgYWYpO3ZhciBzZj17ZmxvYXQzMjo0LGludDMyOjQsdWludDE2OjIsdWludDg6MSxib29sOjF9LHVmPTQ7ZnVuY3Rpb24gY2YodCxlKXtmb3IodmFyIG49e30scj0wLG89ZnVuY3Rpb24oZSl7dmFyIG89ZS5uYW1lLGE9ZS5kdHlwZSxpPWUuc2hhcGUscz1rKGkpLHU9dm9pZCAwO2lmKFwicXVhbnRpemF0aW9uXCJpbiBlKXt2YXIgYz1lLnF1YW50aXphdGlvbjtpZihcInVpbnQ4XCIhPT1jLmR0eXBlJiZcInVpbnQxNlwiIT09Yy5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJXZWlnaHQgXCIrZS5uYW1lK1wiIGhhcyB1bmtub3duIHF1YW50aXphdGlvbiBkdHlwZSBcIitjLmR0eXBlK1wiLiBTdXBwb3J0ZWQgcXVhbnRpemF0aW9uIGR0eXBlcyBhcmU6ICd1aW50OCcgYW5kICd1aW50MTYnLlwiKTt2YXIgbD1zZltjLmR0eXBlXSxoPXQuc2xpY2UocixyK3MqbCksZj1cInVpbnQ4XCI9PT1jLmR0eXBlP25ldyBVaW50OEFycmF5KGgpOm5ldyBVaW50MTZBcnJheShoKTtpZihcImZsb2F0MzJcIj09PWEpdT1GbG9hdDMyQXJyYXkuZnJvbShmLChmdW5jdGlvbih0KXtyZXR1cm4gdCpjLnNjYWxlK2MubWlufSkpO2Vsc2V7aWYoXCJpbnQzMlwiIT09YSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBkdHlwZSBpbiB3ZWlnaHQgJ1wiK28rXCInOiBcIithKTt1PUludDMyQXJyYXkuZnJvbShmLChmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5yb3VuZCh0KmMuc2NhbGUrYy5taW4pfSkpfXIrPXMqbH1lbHNlIGlmKFwic3RyaW5nXCI9PT1hKXt2YXIgZD1rKGUuc2hhcGUpO3U9W107Zm9yKHZhciBwPTA7cDxkO3ArKyl7dmFyIHY9bmV3IFVpbnQzMkFycmF5KHQuc2xpY2UocixyK3VmKSlbMF07cis9dWY7dmFyIG09bmV3IFVpbnQ4QXJyYXkodC5zbGljZShyLHIrdikpO3UucHVzaChtKSxyKz12fX1lbHNle3ZhciBnPXNmW2FdO2g9dC5zbGljZShyLHIrcypnKTtpZihcImZsb2F0MzJcIj09PWEpdT1uZXcgRmxvYXQzMkFycmF5KGgpO2Vsc2UgaWYoXCJpbnQzMlwiPT09YSl1PW5ldyBJbnQzMkFycmF5KGgpO2Vsc2V7aWYoXCJib29sXCIhPT1hKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGR0eXBlIGluIHdlaWdodCAnXCIrbytcIic6IFwiK2EpO3U9bmV3IFVpbnQ4QXJyYXkoaCl9cis9cypnfW5bb109Rm4odSxpLGEpfSxhPTAsaT1lO2E8aS5sZW5ndGg7YSsrKXtvKGlbYV0pfXJldHVybiBufWZ1bmN0aW9uIGxmKHQpe2lmKG51bGw9PT10KXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5wdXQgdmFsdWU6IFwiK0pTT04uc3RyaW5naWZ5KHQpKTt2YXIgZT0wLG49W107dC5mb3JFYWNoKChmdW5jdGlvbih0KXtpZihlKz10LmJ5dGVMZW5ndGgsbi5wdXNoKHQuYnl0ZUxlbmd0aD09PXQuYnVmZmVyLmJ5dGVMZW5ndGg/dDpuZXcgdC5jb25zdHJ1Y3Rvcih0KSksISh0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHx0IGluc3RhbmNlb2YgSW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIFR5cGVkQXJyYXkgc3VidHlwZTogXCIrdC5jb25zdHJ1Y3Rvci5uYW1lKX0pKTt2YXIgcj1uZXcgVWludDhBcnJheShlKSxvPTA7cmV0dXJuIG4uZm9yRWFjaCgoZnVuY3Rpb24odCl7ci5zZXQobmV3IFVpbnQ4QXJyYXkodC5idWZmZXIpLG8pLG8rPXQuYnl0ZUxlbmd0aH0pKSxyLmJ1ZmZlcn12YXIgaGY9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEJ1ZmZlciYmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBCbG9ifHxcInVuZGVmaW5lZFwiPT10eXBlb2YgYXRvYnx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGJ0b2EpO2Z1bmN0aW9uIGZmKHQpe3JldHVybiBoZj9CdWZmZXIuYnl0ZUxlbmd0aCh0KTpuZXcgQmxvYihbdF0pLnNpemV9ZnVuY3Rpb24gZGYodCl7dmFyIGU9MDt0LmZvckVhY2goKGZ1bmN0aW9uKHQpe2UrPXQuYnl0ZUxlbmd0aH0pKTt2YXIgbj1uZXcgVWludDhBcnJheShlKSxyPTA7cmV0dXJuIHQuZm9yRWFjaCgoZnVuY3Rpb24odCl7bi5zZXQobmV3IFVpbnQ4QXJyYXkodCkscikscis9dC5ieXRlTGVuZ3RofSkpLG4uYnVmZmVyfWZ1bmN0aW9uIHBmKHQpe2Zvcih0PXQudHJpbSgpO3QuZW5kc1dpdGgoXCIvXCIpOyl0PXQuc2xpY2UoMCx0Lmxlbmd0aC0xKTt2YXIgZT10LnNwbGl0KFwiL1wiKTtyZXR1cm4gZVtlLmxlbmd0aC0xXX1mdW5jdGlvbiB2Zih0KXtpZih0Lm1vZGVsVG9wb2xvZ3kgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBKU09OIG1vZGVsIHRvcG9sb2d5LCByZWNlaXZlZCBBcnJheUJ1ZmZlci5cIik7cmV0dXJue2RhdGVTYXZlZDpuZXcgRGF0ZSxtb2RlbFRvcG9sb2d5VHlwZTpcIkpTT05cIixtb2RlbFRvcG9sb2d5Qnl0ZXM6bnVsbD09dC5tb2RlbFRvcG9sb2d5PzA6ZmYoSlNPTi5zdHJpbmdpZnkodC5tb2RlbFRvcG9sb2d5KSksd2VpZ2h0U3BlY3NCeXRlczpudWxsPT10LndlaWdodFNwZWNzPzA6ZmYoSlNPTi5zdHJpbmdpZnkodC53ZWlnaHRTcGVjcykpLHdlaWdodERhdGFCeXRlczpudWxsPT10LndlaWdodERhdGE/MDp0LndlaWdodERhdGEuYnl0ZUxlbmd0aH19dmFyIG1mPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuc2F2ZVJvdXRlcnM9W10sdGhpcy5sb2FkUm91dGVycz1bXX1yZXR1cm4gdC5nZXRJbnN0YW5jZT1mdW5jdGlvbigpe3JldHVybiBudWxsPT10Lmluc3RhbmNlJiYodC5pbnN0YW5jZT1uZXcgdCksdC5pbnN0YW5jZX0sdC5yZWdpc3RlclNhdmVSb3V0ZXI9ZnVuY3Rpb24oZSl7dC5nZXRJbnN0YW5jZSgpLnNhdmVSb3V0ZXJzLnB1c2goZSl9LHQucmVnaXN0ZXJMb2FkUm91dGVyPWZ1bmN0aW9uKGUpe3QuZ2V0SW5zdGFuY2UoKS5sb2FkUm91dGVycy5wdXNoKGUpfSx0LmdldFNhdmVIYW5kbGVycz1mdW5jdGlvbihlKXtyZXR1cm4gdC5nZXRIYW5kbGVycyhlLFwic2F2ZVwiKX0sdC5nZXRMb2FkSGFuZGxlcnM9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdC5nZXRIYW5kbGVycyhlLFwibG9hZFwiLG4pfSx0LmdldEhhbmRsZXJzPWZ1bmN0aW9uKGUsbixyKXt2YXIgbz1bXTtyZXR1cm4oXCJsb2FkXCI9PT1uP3QuZ2V0SW5zdGFuY2UoKS5sb2FkUm91dGVyczp0LmdldEluc3RhbmNlKCkuc2F2ZVJvdXRlcnMpLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBuPXQoZSxyKTtudWxsIT09biYmby5wdXNoKG4pfSkpLG99LHR9KCksZ2Y9XCI6Ly9cIix5Zj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLm1hbmFnZXJzPXt9fXJldHVybiB0LmdldEluc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PXQuaW5zdGFuY2UmJih0Lmluc3RhbmNlPW5ldyB0KSx0Lmluc3RhbmNlfSx0LnJlZ2lzdGVyTWFuYWdlcj1mdW5jdGlvbihlLG4pe0MobnVsbCE9ZSwoZnVuY3Rpb24oKXtyZXR1cm5cInNjaGVtZSBtdXN0IG5vdCBiZSB1bmRlZmluZWQgb3IgbnVsbC5cIn0pKSxlLmVuZHNXaXRoKGdmKSYmKGU9ZS5zbGljZSgwLGUuaW5kZXhPZihnZikpKSxDKGUubGVuZ3RoPjAsKGZ1bmN0aW9uKCl7cmV0dXJuXCJzY2hlbWUgbXVzdCBub3QgYmUgYW4gZW1wdHkgc3RyaW5nLlwifSkpO3ZhciByPXQuZ2V0SW5zdGFuY2UoKTtDKG51bGw9PXIubWFuYWdlcnNbZV0sKGZ1bmN0aW9uKCl7cmV0dXJuXCJBIG1vZGVsIHN0b3JlIG1hbmFnZXIgaXMgYWxyZWFkeSByZWdpc3RlcmVkIGZvciBzY2hlbWUgJ1wiK2UrXCInLlwifSkpLHIubWFuYWdlcnNbZV09bn0sdC5nZXRNYW5hZ2VyPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0SW5zdGFuY2UoKS5tYW5hZ2Vyc1t0XTtpZihudWxsPT1lKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIG1hbmFnZXIgZm9yIHNjaGVtZSAnXCIrdCtcIidcIik7cmV0dXJuIGV9LHQuZ2V0U2NoZW1lcz1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmdldEluc3RhbmNlKCkubWFuYWdlcnMpfSx0fSgpO2Z1bmN0aW9uIHhmKHQpe2lmKC0xPT09dC5pbmRleE9mKGdmKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgdXJsIHN0cmluZyBwcm92aWRlZCBkb2VzIG5vdCBjb250YWluIGEgc2NoZW1lLiBTdXBwb3J0ZWQgc2NoZW1lcyBhcmU6IFwiK3lmLmdldFNjaGVtZXMoKS5qb2luKFwiLFwiKSk7cmV0dXJue3NjaGVtZTp0LnNwbGl0KGdmKVswXSxwYXRoOnQuc3BsaXQoZ2YpWzFdfX1mdW5jdGlvbiBiZih0LGUsbyl7cmV0dXJuIHZvaWQgMD09PW8mJihvPSExKSxuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgbixhLGkscyx1LGMsbCxoLGY7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm4gQyh0IT09ZSwoZnVuY3Rpb24oKXtyZXR1cm5cIk9sZCBwYXRoIGFuZCBuZXcgcGF0aCBhcmUgdGhlIHNhbWU6ICdcIit0K1wiJ1wifSkpLEMoKG49bWYuZ2V0TG9hZEhhbmRsZXJzKHQpKS5sZW5ndGg+MCwoZnVuY3Rpb24oKXtyZXR1cm5cIkNvcHlpbmcgZmFpbGVkIGJlY2F1c2Ugbm8gbG9hZCBoYW5kbGVyIGlzIGZvdW5kIGZvciBzb3VyY2UgVVJMIFwiK3QrXCIuXCJ9KSksQyhuLmxlbmd0aDwyLChmdW5jdGlvbigpe3JldHVyblwiQ29weWluZyBmYWlsZWQgYmVjYXVzZSBtb3JlIHRoYW4gb25lIChcIituLmxlbmd0aCtcIikgbG9hZCBoYW5kbGVycyBmb3Igc291cmNlIFVSTCBcIit0K1wiLlwifSkpLGE9blswXSxDKChpPW1mLmdldFNhdmVIYW5kbGVycyhlKSkubGVuZ3RoPjAsKGZ1bmN0aW9uKCl7cmV0dXJuXCJDb3B5aW5nIGZhaWxlZCBiZWNhdXNlIG5vIHNhdmUgaGFuZGxlciBpcyBmb3VuZCBmb3IgZGVzdGluYXRpb24gVVJMIFwiK2UrXCIuXCJ9KSksQyhpLmxlbmd0aDwyLChmdW5jdGlvbigpe3JldHVyblwiQ29weWluZyBmYWlsZWQgYmVjYXVzZSBtb3JlIHRoYW4gb25lIChcIituLmxlbmd0aCtcIikgc2F2ZSBoYW5kbGVycyBmb3IgZGVzdGluYXRpb24gVVJMIFwiK2UrXCIuXCJ9KSkscz1pWzBdLHU9eGYodCkuc2NoZW1lLGM9eGYodCkucGF0aCxsPXU9PT14Zih0KS5zY2hlbWUsWzQsYS5sb2FkKCldO2Nhc2UgMTpyZXR1cm4gaD1yLnNlbnQoKSxvJiZsP1s0LHlmLmdldE1hbmFnZXIodSkucmVtb3ZlTW9kZWwoYyldOlszLDNdO2Nhc2UgMjpyLnNlbnQoKSxyLmxhYmVsPTM7Y2FzZSAzOnJldHVybls0LHMuc2F2ZShoKV07Y2FzZSA0OnJldHVybiBmPXIuc2VudCgpLCFvfHxsP1szLDZdOls0LHlmLmdldE1hbmFnZXIodSkucmVtb3ZlTW9kZWwoYyldO2Nhc2UgNTpyLnNlbnQoKSxyLmxhYmVsPTY7Y2FzZSA2OnJldHVyblsyLGYubW9kZWxBcnRpZmFjdHNJbmZvXX19KSl9KSl9dmFyIHdmPVwibW9kZWxzX3N0b3JlXCIsQ2Y9XCJtb2RlbF9pbmZvX3N0b3JlXCI7ZnVuY3Rpb24gRWYoKXtpZighaSgpLmdldEJvb2woXCJJU19CUk9XU0VSXCIpKXRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBvYnRhaW4gSW5kZXhlZERCIGZhY3RvcnkgYmVjYXVzZSB0aGUgY3VycmVudCBlbnZpcm9ubWVudGlzIG5vdCBhIHdlYiBicm93c2VyLlwiKTt2YXIgdD13aW5kb3d8fHNlbGYsZT10LmluZGV4ZWREQnx8dC5tb3pJbmRleGVkREJ8fHQud2Via2l0SW5kZXhlZERCfHx0Lm1zSW5kZXhlZERCfHx0LnNoaW1JbmRleGVkREI7aWYobnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY3VycmVudCBicm93c2VyIGRvZXMgbm90IGFwcGVhciB0byBzdXBwb3J0IEluZGV4ZWREQi5cIik7cmV0dXJuIGV9ZnVuY3Rpb24gUmYodCl7dmFyIGU9dC5yZXN1bHQ7ZS5jcmVhdGVPYmplY3RTdG9yZSh3Zix7a2V5UGF0aDpcIm1vZGVsUGF0aFwifSksZS5jcmVhdGVPYmplY3RTdG9yZShDZix7a2V5UGF0aDpcIm1vZGVsUGF0aFwifSl9dmFyIElmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtpZih0aGlzLmluZGV4ZWREQj1FZigpLG51bGw9PXR8fCF0KXRocm93IG5ldyBFcnJvcihcIkZvciBJbmRleGVkREIsIG1vZGVsUGF0aCBtdXN0IG5vdCBiZSBudWxsLCB1bmRlZmluZWQgb3IgZW1wdHkuXCIpO3RoaXMubW9kZWxQYXRoPXR9cmV0dXJuIHQucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe2lmKHQubW9kZWxUb3BvbG9neSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXJMb2NhbFN0b3JhZ2Uuc2F2ZSgpIGRvZXMgbm90IHN1cHBvcnQgc2F2aW5nIG1vZGVsIHRvcG9sb2d5IGluIGJpbmFyeSBmb3JtYXRzIHlldC5cIik7cmV0dXJuWzIsdGhpcy5kYXRhYmFzZUFjdGlvbih0aGlzLm1vZGVsUGF0aCx0KV19KSl9KSl9LHQucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7cmV0dXJuWzIsdGhpcy5kYXRhYmFzZUFjdGlvbih0aGlzLm1vZGVsUGF0aCldfSkpfSkpfSx0LnByb3RvdHlwZS5kYXRhYmFzZUFjdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbih0LHIpe3ZhciBvPW4uaW5kZXhlZERCLm9wZW4oXCJ0ZW5zb3JmbG93anNcIiwxKTtvLm9udXBncmFkZW5lZWRlZD1mdW5jdGlvbigpe3JldHVybiBSZihvKX0sby5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt2YXIgYT1vLnJlc3VsdDtpZihudWxsPT1lKXt2YXIgaT1hLnRyYW5zYWN0aW9uKHdmLFwicmVhZG9ubHlcIikscz1pLm9iamVjdFN0b3JlKHdmKS5nZXQobi5tb2RlbFBhdGgpO3Mub25zdWNjZXNzPWZ1bmN0aW9uKCl7aWYobnVsbD09cy5yZXN1bHQpcmV0dXJuIGEuY2xvc2UoKSxyKG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIHdpdGggcGF0aCAnXCIrbi5tb2RlbFBhdGgrXCInIGluIEluZGV4ZWREQi5cIikpO3Qocy5yZXN1bHQubW9kZWxBcnRpZmFjdHMpfSxzLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIGEuY2xvc2UoKSxyKHMuZXJyb3IpfSxpLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5jbG9zZSgpfX1lbHNle3ZhciB1LGM9dmYoZSksbD1hLnRyYW5zYWN0aW9uKENmLFwicmVhZHdyaXRlXCIpLGg9bC5vYmplY3RTdG9yZShDZiksZj1oLnB1dCh7bW9kZWxQYXRoOm4ubW9kZWxQYXRoLG1vZGVsQXJ0aWZhY3RzSW5mbzpjfSk7Zi5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt2YXIgbz0odT1hLnRyYW5zYWN0aW9uKHdmLFwicmVhZHdyaXRlXCIpKS5vYmplY3RTdG9yZSh3ZikucHV0KHttb2RlbFBhdGg6bi5tb2RlbFBhdGgsbW9kZWxBcnRpZmFjdHM6ZSxtb2RlbEFydGlmYWN0c0luZm86Y30pO28ub25zdWNjZXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHQoe21vZGVsQXJ0aWZhY3RzSW5mbzpjfSl9LG8ub25lcnJvcj1mdW5jdGlvbih0KXt2YXIgZT0oaD1sLm9iamVjdFN0b3JlKENmKSkuZGVsZXRlKG4ubW9kZWxQYXRoKTtlLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3JldHVybiBhLmNsb3NlKCkscihvLmVycm9yKX0sZS5vbmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiBhLmNsb3NlKCkscihvLmVycm9yKX19fSxmLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIGEuY2xvc2UoKSxyKGYuZXJyb3IpfSxsLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtudWxsPT11P2EuY2xvc2UoKTp1Lm9uY29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5jbG9zZSgpfX19fSxvLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHIoby5lcnJvcil9fSkpfSx0LlVSTF9TQ0hFTUU9XCJpbmRleGVkZGI6Ly9cIix0fSgpLGtmPWZ1bmN0aW9uKHQpe3JldHVybiBpKCkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikmJiFBcnJheS5pc0FycmF5KHQpJiZ0LnN0YXJ0c1dpdGgoSWYuVVJMX1NDSEVNRSk/KGU9dC5zbGljZShJZi5VUkxfU0NIRU1FLmxlbmd0aCksbmV3IElmKGUpKTpudWxsO3ZhciBlfTttZi5yZWdpc3RlclNhdmVSb3V0ZXIoa2YpLG1mLnJlZ2lzdGVyTG9hZFJvdXRlcihrZik7dmFyIFNmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuaW5kZXhlZERCPUVmKCl9cmV0dXJuIHQucHJvdG90eXBlLmxpc3RNb2RlbHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm4gcih0aGlzLChmdW5jdGlvbihlKXtyZXR1cm5bMixuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSxuKXt2YXIgcj10LmluZGV4ZWREQi5vcGVuKFwidGVuc29yZmxvd2pzXCIsMSk7ci5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gUmYocil9LHIub25zdWNjZXNzPWZ1bmN0aW9uKCl7dmFyIHQ9ci5yZXN1bHQsbz10LnRyYW5zYWN0aW9uKENmLFwicmVhZG9ubHlcIiksYT1vLm9iamVjdFN0b3JlKENmKS5nZXRBbGwoKTthLm9uc3VjY2Vzcz1mdW5jdGlvbigpe2Zvcih2YXIgdD17fSxuPTAscj1hLnJlc3VsdDtuPHIubGVuZ3RoO24rKyl7dmFyIG89cltuXTt0W28ubW9kZWxQYXRoXT1vLm1vZGVsQXJ0aWZhY3RzSW5mb31lKHQpfSxhLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2xvc2UoKSxuKGEuZXJyb3IpfSxvLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gdC5jbG9zZSgpfX0sci5vbmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiBuKHIuZXJyb3IpfX0pKV19KSl9KSl9LHQucHJvdG90eXBlLnJlbW92ZU1vZGVsPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZT10aGlzO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKG4pe3ZhciByO3JldHVybiB0PShyPXQpLnN0YXJ0c1dpdGgoSWYuVVJMX1NDSEVNRSk/ci5zbGljZShJZi5VUkxfU0NIRU1FLmxlbmd0aCk6cixbMixuZXcgUHJvbWlzZSgoZnVuY3Rpb24obixyKXt2YXIgbz1lLmluZGV4ZWREQi5vcGVuKFwidGVuc29yZmxvd2pzXCIsMSk7by5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gUmYobyl9LG8ub25zdWNjZXNzPWZ1bmN0aW9uKCl7dmFyIGUsYT1vLnJlc3VsdCxpPWEudHJhbnNhY3Rpb24oQ2YsXCJyZWFkd3JpdGVcIikscz1pLm9iamVjdFN0b3JlKENmKSx1PXMuZ2V0KHQpO3Uub25zdWNjZXNzPWZ1bmN0aW9uKCl7aWYobnVsbD09dS5yZXN1bHQpcmV0dXJuIGEuY2xvc2UoKSxyKG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIHdpdGggcGF0aCAnXCIrdCtcIicgaW4gSW5kZXhlZERCLlwiKSk7dmFyIG89cy5kZWxldGUodCksaT1mdW5jdGlvbigpe3ZhciBvPShlPWEudHJhbnNhY3Rpb24od2YsXCJyZWFkd3JpdGVcIikpLm9iamVjdFN0b3JlKHdmKS5kZWxldGUodCk7by5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXtyZXR1cm4gbih1LnJlc3VsdC5tb2RlbEFydGlmYWN0c0luZm8pfSxvLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHIodS5lcnJvcil9fTtvLm9uc3VjY2Vzcz1pLG8ub25lcnJvcj1mdW5jdGlvbih0KXtyZXR1cm4gaSgpLGEuY2xvc2UoKSxyKHUuZXJyb3IpfX0sdS5vbmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiBhLmNsb3NlKCkscih1LmVycm9yKX0saS5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7bnVsbD09ZT9hLmNsb3NlKCk6ZS5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7cmV0dXJuIGEuY2xvc2UoKX19fSxvLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHIoby5lcnJvcil9fSkpXX0pKX0pKX0sdH0oKTtpZihpKCkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikpdHJ5e3lmLnJlZ2lzdGVyTWFuYWdlcihJZi5VUkxfU0NIRU1FLG5ldyBTZil9Y2F0Y2godCl7fXZhciBBZj1cIi9cIixEZj1cInRlbnNvcmZsb3dqc19tb2RlbHNcIixUZj1cImluZm9cIixOZj1cIm1vZGVsX3RvcG9sb2d5XCIsRmY9XCJ3ZWlnaHRfc3BlY3NcIixfZj1cIndlaWdodF9kYXRhXCIsT2Y9XCJtb2RlbF9tZXRhZGF0YVwiO2Z1bmN0aW9uIE1mKHQpe3JldHVybntpbmZvOltEZix0LFRmXS5qb2luKEFmKSx0b3BvbG9neTpbRGYsdCxOZl0uam9pbihBZiksd2VpZ2h0U3BlY3M6W0RmLHQsRmZdLmpvaW4oQWYpLHdlaWdodERhdGE6W0RmLHQsX2ZdLmpvaW4oQWYpLG1vZGVsTWV0YWRhdGE6W0RmLHQsT2ZdLmpvaW4oQWYpfX1mdW5jdGlvbiBCZih0KXt2YXIgZT10LnNwbGl0KEFmKTtpZihlLmxlbmd0aDwzKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQga2V5IGZvcm1hdDogXCIrdCk7cmV0dXJuIGUuc2xpY2UoMSxlLmxlbmd0aC0xKS5qb2luKEFmKX12YXIgUGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe2lmKCFpKCkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIil8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiB3aW5kb3d8fHZvaWQgMD09PXdpbmRvdy5sb2NhbFN0b3JhZ2UpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgZG9lcyBub3Qgc3VwcG9ydCBsb2NhbCBzdG9yYWdlLlwiKTtpZih0aGlzLkxTPXdpbmRvdy5sb2NhbFN0b3JhZ2UsbnVsbD09dHx8IXQpdGhyb3cgbmV3IEVycm9yKFwiRm9yIGxvY2FsIHN0b3JhZ2UsIG1vZGVsUGF0aCBtdXN0IG5vdCBiZSBudWxsLCB1bmRlZmluZWQgb3IgZW1wdHkuXCIpO3RoaXMubW9kZWxQYXRoPXQsdGhpcy5rZXlzPU1mKHRoaXMubW9kZWxQYXRoKX1yZXR1cm4gdC5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbixvO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe2lmKHQubW9kZWxUb3BvbG9neSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXJMb2NhbFN0b3JhZ2Uuc2F2ZSgpIGRvZXMgbm90IHN1cHBvcnQgc2F2aW5nIG1vZGVsIHRvcG9sb2d5IGluIGJpbmFyeSBmb3JtYXRzIHlldC5cIik7ZT1KU09OLnN0cmluZ2lmeSh0Lm1vZGVsVG9wb2xvZ3kpLG49SlNPTi5zdHJpbmdpZnkodC53ZWlnaHRTcGVjcyksbz12Zih0KTt0cnl7cmV0dXJuIHRoaXMuTFMuc2V0SXRlbSh0aGlzLmtleXMuaW5mbyxKU09OLnN0cmluZ2lmeShvKSksdGhpcy5MUy5zZXRJdGVtKHRoaXMua2V5cy50b3BvbG9neSxlKSx0aGlzLkxTLnNldEl0ZW0odGhpcy5rZXlzLndlaWdodFNwZWNzLG4pLHRoaXMuTFMuc2V0SXRlbSh0aGlzLmtleXMud2VpZ2h0RGF0YSxmdW5jdGlvbih0KXtpZihoZilyZXR1cm4gQnVmZmVyLmZyb20odCkudG9TdHJpbmcoXCJiYXNlNjRcIik7Zm9yKHZhciBlPW5ldyBVaW50OEFycmF5KHQpLG49XCJcIixyPTAsbz1lLmxlbmd0aDtyPG87cisrKW4rPVN0cmluZy5mcm9tQ2hhckNvZGUoZVtyXSk7cmV0dXJuIGJ0b2Eobil9KHQud2VpZ2h0RGF0YSkpLHRoaXMuTFMuc2V0SXRlbSh0aGlzLmtleXMubW9kZWxNZXRhZGF0YSxKU09OLnN0cmluZ2lmeSh7Zm9ybWF0OnQuZm9ybWF0LGdlbmVyYXRlZEJ5OnQuZ2VuZXJhdGVkQnksY29udmVydGVkQnk6dC5jb252ZXJ0ZWRCeSx1c2VyRGVmaW5lZE1ldGFkYXRhOnQudXNlckRlZmluZWRNZXRhZGF0YX0pKSxbMix7bW9kZWxBcnRpZmFjdHNJbmZvOm99XX1jYXRjaCh0KXt0aHJvdyB0aGlzLkxTLnJlbW92ZUl0ZW0odGhpcy5rZXlzLmluZm8pLHRoaXMuTFMucmVtb3ZlSXRlbSh0aGlzLmtleXMudG9wb2xvZ3kpLHRoaXMuTFMucmVtb3ZlSXRlbSh0aGlzLmtleXMud2VpZ2h0U3BlY3MpLHRoaXMuTFMucmVtb3ZlSXRlbSh0aGlzLmtleXMud2VpZ2h0RGF0YSksdGhpcy5MUy5yZW1vdmVJdGVtKHRoaXMua2V5cy5tb2RlbE1ldGFkYXRhKSxuZXcgRXJyb3IoXCJGYWlsZWQgdG8gc2F2ZSBtb2RlbCAnXCIrdGhpcy5tb2RlbFBhdGgrXCInIHRvIGxvY2FsIHN0b3JhZ2U6IHNpemUgcXVvdGEgYmVpbmcgZXhjZWVkZWQgaXMgYSBwb3NzaWJsZSBjYXVzZSBvZiB0aGlzIGZhaWx1cmU6IG1vZGVsVG9wb2xvZ3lCeXRlcz1cIitvLm1vZGVsVG9wb2xvZ3lCeXRlcytcIiwgd2VpZ2h0U3BlY3NCeXRlcz1cIitvLndlaWdodFNwZWNzQnl0ZXMrXCIsIHdlaWdodERhdGFCeXRlcz1cIitvLndlaWdodERhdGFCeXRlcytcIi5cIil9cmV0dXJuWzJdfSkpfSkpfSx0LnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0LGUsbixvLGEsaSxzO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe2lmKG51bGw9PSh0PUpTT04ucGFyc2UodGhpcy5MUy5nZXRJdGVtKHRoaXMua2V5cy5pbmZvKSkpKXRocm93IG5ldyBFcnJvcihcIkluIGxvY2FsIHN0b3JhZ2UsIHRoZXJlIGlzIG5vIG1vZGVsIHdpdGggbmFtZSAnXCIrdGhpcy5tb2RlbFBhdGgrXCInXCIpO2lmKFwiSlNPTlwiIT09dC5tb2RlbFRvcG9sb2d5VHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyTG9jYWxTdG9yYWdlIGRvZXMgbm90IHN1cHBvcnQgbG9hZGluZyBub24tSlNPTiBtb2RlbCB0b3BvbG9neSB5ZXQuXCIpO2lmKGU9e30sbnVsbD09KG49SlNPTi5wYXJzZSh0aGlzLkxTLmdldEl0ZW0odGhpcy5rZXlzLnRvcG9sb2d5KSkpKXRocm93IG5ldyBFcnJvcihcIkluIGxvY2FsIHN0b3JhZ2UsIHRoZSB0b3BvbG9neSBvZiBtb2RlbCAnXCIrdGhpcy5tb2RlbFBhdGgrXCInIGlzIG1pc3NpbmcuXCIpO2lmKGUubW9kZWxUb3BvbG9neT1uLG51bGw9PShvPUpTT04ucGFyc2UodGhpcy5MUy5nZXRJdGVtKHRoaXMua2V5cy53ZWlnaHRTcGVjcykpKSl0aHJvdyBuZXcgRXJyb3IoXCJJbiBsb2NhbCBzdG9yYWdlLCB0aGUgd2VpZ2h0IHNwZWNzIG9mIG1vZGVsICdcIit0aGlzLm1vZGVsUGF0aCtcIicgYXJlIG1pc3NpbmcuXCIpO2lmKGUud2VpZ2h0U3BlY3M9byxudWxsIT0oYT10aGlzLkxTLmdldEl0ZW0odGhpcy5rZXlzLm1vZGVsTWV0YWRhdGEpKSYmKGk9SlNPTi5wYXJzZShhKSxlLmZvcm1hdD1pLmZvcm1hdCxlLmdlbmVyYXRlZEJ5PWkuZ2VuZXJhdGVkQnksZS5jb252ZXJ0ZWRCeT1pLmNvbnZlcnRlZEJ5LGUudXNlckRlZmluZWRNZXRhZGF0YT1pLnVzZXJEZWZpbmVkTWV0YWRhdGEpLG51bGw9PShzPXRoaXMuTFMuZ2V0SXRlbSh0aGlzLmtleXMud2VpZ2h0RGF0YSkpKXRocm93IG5ldyBFcnJvcihcIkluIGxvY2FsIHN0b3JhZ2UsIHRoZSBiaW5hcnkgd2VpZ2h0IHZhbHVlcyBvZiBtb2RlbCAnXCIrdGhpcy5tb2RlbFBhdGgrXCInIGFyZSBtaXNzaW5nLlwiKTtyZXR1cm4gZS53ZWlnaHREYXRhPWZ1bmN0aW9uKHQpe2lmKGhmKXt2YXIgZT1CdWZmZXIuZnJvbSh0LFwiYmFzZTY0XCIpO3JldHVybiBlLmJ1ZmZlci5zbGljZShlLmJ5dGVPZmZzZXQsZS5ieXRlT2Zmc2V0K2UuYnl0ZUxlbmd0aCl9Zm9yKHZhciBuPWF0b2IodCkscj1uZXcgVWludDhBcnJheShuLmxlbmd0aCksbz0wO288bi5sZW5ndGg7KytvKXIuc2V0KFtuLmNoYXJDb2RlQXQobyldLG8pO3JldHVybiByLmJ1ZmZlcn0ocyksWzIsZV19KSl9KSl9LHQuVVJMX1NDSEVNRT1cImxvY2Fsc3RvcmFnZTovL1wiLHR9KCksTGY9ZnVuY3Rpb24odCl7cmV0dXJuIGkoKS5nZXRCb29sKFwiSVNfQlJPV1NFUlwiKSYmIUFycmF5LmlzQXJyYXkodCkmJnQuc3RhcnRzV2l0aChQZi5VUkxfU0NIRU1FKT8oZT10LnNsaWNlKFBmLlVSTF9TQ0hFTUUubGVuZ3RoKSxuZXcgUGYoZSkpOm51bGw7dmFyIGV9O21mLnJlZ2lzdGVyU2F2ZVJvdXRlcihMZiksbWYucmVnaXN0ZXJMb2FkUm91dGVyKExmKTt2YXIgV2Y9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7QyhpKCkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIiksKGZ1bmN0aW9uKCl7cmV0dXJuXCJDdXJyZW50IGVudmlyb25tZW50IGlzIG5vdCBhIHdlYiBicm93c2VyXCJ9KSksQyhcInVuZGVmaW5lZFwiPT10eXBlb2Ygd2luZG93fHx2b2lkIDAhPT13aW5kb3cubG9jYWxTdG9yYWdlLChmdW5jdGlvbigpe3JldHVyblwiQ3VycmVudCBicm93c2VyIGRvZXMgbm90IGFwcGVhciB0byBzdXBwb3J0IGxvY2FsU3RvcmFnZVwifSkpLHRoaXMuTFM9d2luZG93LmxvY2FsU3RvcmFnZX1yZXR1cm4gdC5wcm90b3R5cGUubGlzdE1vZGVscz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdCxlLG4sbyxhLGk7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7Zm9yKHQ9e30sZT1EZitBZixuPUFmK1RmLG89MDtvPHRoaXMuTFMubGVuZ3RoOysrbykoYT10aGlzLkxTLmtleShvKSkuc3RhcnRzV2l0aChlKSYmYS5lbmRzV2l0aChuKSYmKGk9QmYoYSksdFtpXT1KU09OLnBhcnNlKHRoaXMuTFMuZ2V0SXRlbShhKSkpO3JldHVyblsyLHRdfSkpfSkpfSx0LnByb3RvdHlwZS5yZW1vdmVNb2RlbD1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbjtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXt2YXIgbztpZih0PShvPXQpLnN0YXJ0c1dpdGgoUGYuVVJMX1NDSEVNRSk/by5zbGljZShQZi5VUkxfU0NIRU1FLmxlbmd0aCk6byxlPU1mKHQpLG51bGw9PXRoaXMuTFMuZ2V0SXRlbShlLmluZm8pKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIGF0IHBhdGggJ1wiK3QrXCInXCIpO3JldHVybiBuPUpTT04ucGFyc2UodGhpcy5MUy5nZXRJdGVtKGUuaW5mbykpLHRoaXMuTFMucmVtb3ZlSXRlbShlLmluZm8pLHRoaXMuTFMucmVtb3ZlSXRlbShlLnRvcG9sb2d5KSx0aGlzLkxTLnJlbW92ZUl0ZW0oZS53ZWlnaHRTcGVjcyksdGhpcy5MUy5yZW1vdmVJdGVtKGUud2VpZ2h0RGF0YSksWzIsbl19KSl9KSl9LHR9KCk7aWYoaSgpLmdldEJvb2woXCJJU19CUk9XU0VSXCIpKXRyeXt5Zi5yZWdpc3Rlck1hbmFnZXIoUGYuVVJMX1NDSEVNRSxuZXcgV2YpfWNhdGNoKHQpe312YXIgVWY9XCJtb2RlbFwiLFZmPVwiLmpzb25cIix6Zj1cIi53ZWlnaHRzLmJpblwiO2Z1bmN0aW9uIEdmKHQpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7cmV0dXJuIHNldFRpbWVvdXQodCl9KSkudGhlbih0KX12YXIgSGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KGUpe2lmKCFpKCkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikpdGhyb3cgbmV3IEVycm9yKFwiYnJvd3NlckRvd25sb2FkcygpIGNhbm5vdCBwcm9jZWVkIGJlY2F1c2UgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgaXMgbm90IGEgYnJvd3Nlci5cIik7ZS5zdGFydHNXaXRoKHQuVVJMX1NDSEVNRSkmJihlPWUuc2xpY2UodC5VUkxfU0NIRU1FLmxlbmd0aCkpLG51bGwhPWUmJjAhPT1lLmxlbmd0aHx8KGU9VWYpLHRoaXMubW9kZWxUb3BvbG9neUZpbGVOYW1lPWUrVmYsdGhpcy53ZWlnaHREYXRhRmlsZU5hbWU9ZSt6Zn1yZXR1cm4gdC5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbixvLGEsaSxzO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIgZG93bmxvYWRzIGFyZSBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQgc2luY2UgYGRvY3VtZW50YCBpcyBub3QgcHJlc2VudFwiKTtpZihlPXdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFt0LndlaWdodERhdGFdLHt0eXBlOlwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJ9KSksISh0Lm1vZGVsVG9wb2xvZ3kgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpcmV0dXJuWzMsMV07dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlckRvd25sb2Fkcy5zYXZlKCkgZG9lcyBub3Qgc3VwcG9ydCBzYXZpbmcgbW9kZWwgdG9wb2xvZ3kgaW4gYmluYXJ5IGZvcm1hdHMgeWV0LlwiKTtjYXNlIDE6cmV0dXJuIG49W3twYXRoczpbXCIuL1wiK3RoaXMud2VpZ2h0RGF0YUZpbGVOYW1lXSx3ZWlnaHRzOnQud2VpZ2h0U3BlY3N9XSxvPXttb2RlbFRvcG9sb2d5OnQubW9kZWxUb3BvbG9neSxmb3JtYXQ6dC5mb3JtYXQsZ2VuZXJhdGVkQnk6dC5nZW5lcmF0ZWRCeSxjb252ZXJ0ZWRCeTp0LmNvbnZlcnRlZEJ5LHdlaWdodHNNYW5pZmVzdDpufSxhPXdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShvKV0se3R5cGU6XCJhcHBsaWNhdGlvbi9qc29uXCJ9KSksKGk9bnVsbD09dGhpcy5qc29uQW5jaG9yP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpOnRoaXMuanNvbkFuY2hvcikuZG93bmxvYWQ9dGhpcy5tb2RlbFRvcG9sb2d5RmlsZU5hbWUsaS5ocmVmPWEsWzQsR2YoKGZ1bmN0aW9uKCl7cmV0dXJuIGkuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudChcImNsaWNrXCIpKX0pKV07Y2FzZSAyOnJldHVybiByLnNlbnQoKSxudWxsPT10LndlaWdodERhdGE/WzMsNF06KChzPW51bGw9PXRoaXMud2VpZ2h0RGF0YUFuY2hvcj9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTp0aGlzLndlaWdodERhdGFBbmNob3IpLmRvd25sb2FkPXRoaXMud2VpZ2h0RGF0YUZpbGVOYW1lLHMuaHJlZj1lLFs0LEdmKChmdW5jdGlvbigpe3JldHVybiBzLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKSl9KSldKTtjYXNlIDM6ci5zZW50KCksci5sYWJlbD00O2Nhc2UgNDpyZXR1cm5bMix7bW9kZWxBcnRpZmFjdHNJbmZvOnZmKHQpfV19fSkpfSkpfSx0LlVSTF9TQ0hFTUU9XCJkb3dubG9hZHM6Ly9cIix0fSgpLHFmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtpZihudWxsPT10fHx0Lmxlbmd0aDwxKXRocm93IG5ldyBFcnJvcihcIldoZW4gY2FsbGluZyBicm93c2VyRmlsZXMsIGF0IGxlYXN0IDEgZmlsZSBpcyByZXF1aXJlZCwgYnV0IHJlY2VpdmVkIFwiK3QpO3RoaXMuZmlsZXM9dH1yZXR1cm4gdC5wcm90b3R5cGUubG9hZD1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdCxlLG49dGhpcztyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXtyZXR1cm4gdD10aGlzLmZpbGVzWzBdLGU9dGhpcy5maWxlcy5zbGljZSgxKSxbMixuZXcgUHJvbWlzZSgoZnVuY3Rpb24ocixvKXt2YXIgYT1uZXcgRmlsZVJlYWRlcjthLm9ubG9hZD1mdW5jdGlvbihhKXt2YXIgaT1KU09OLnBhcnNlKGEudGFyZ2V0LnJlc3VsdCkscz1pLm1vZGVsVG9wb2xvZ3k7aWYobnVsbCE9cyl7MD09PWUubGVuZ3RoJiZyKHttb2RlbFRvcG9sb2d5OnN9KTt2YXIgdT1pLndlaWdodHNNYW5pZmVzdDtpZihudWxsIT11KXt2YXIgYzt0cnl7Yz1uLmNoZWNrTWFuaWZlc3RBbmRXZWlnaHRGaWxlcyh1LGUpfWNhdGNoKHQpe3JldHVybiB2b2lkIG8odCl9dmFyIGw9W10saD1bXSxmPVtdO3UuZm9yRWFjaCgoZnVuY3Rpb24odCl7dC5wYXRocy5mb3JFYWNoKChmdW5jdGlvbih0KXtoLnB1c2godCksZi5wdXNoKG51bGwpfSkpLGwucHVzaC5hcHBseShsLHQud2VpZ2h0cyl9KSksdS5mb3JFYWNoKChmdW5jdGlvbih0KXt0LnBhdGhzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBGaWxlUmVhZGVyO2Uub25sb2FkPWZ1bmN0aW9uKGUpe3ZhciBuPWUudGFyZ2V0LnJlc3VsdCxvPWguaW5kZXhPZih0KTtmW29dPW4sLTE9PT1mLmluZGV4T2YobnVsbCkmJnIoe21vZGVsVG9wb2xvZ3k6cyx3ZWlnaHRTcGVjczpsLHdlaWdodERhdGE6ZGYoZiksZm9ybWF0OmkuZm9ybWF0LGdlbmVyYXRlZEJ5OmkuZ2VuZXJhdGVkQnksY29udmVydGVkQnk6aS5jb252ZXJ0ZWRCeSx1c2VyRGVmaW5lZE1ldGFkYXRhOmkudXNlckRlZmluZWRNZXRhZGF0YX0pfSxlLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIG8oXCJGYWlsZWQgdG8gd2VpZ2h0cyBkYXRhIGZyb20gZmlsZSBvZiBwYXRoICdcIit0K1wiJy5cIil9LGUucmVhZEFzQXJyYXlCdWZmZXIoY1t0XSl9KSl9KSl9ZWxzZSBvKG5ldyBFcnJvcihcIndlaWdodE1hbmlmZXN0IGZpZWxkIGlzIG1pc3NpbmcgZnJvbSBmaWxlIFwiK3QubmFtZSkpfWVsc2UgbyhuZXcgRXJyb3IoXCJtb2RlbFRvcG9sb2d5IGZpZWxkIGlzIG1pc3NpbmcgZnJvbSBmaWxlIFwiK3QubmFtZSkpfSxhLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIG8oXCJGYWlsZWQgdG8gcmVhZCBtb2RlbCB0b3BvbG9neSBhbmQgd2VpZ2h0cyBtYW5pZmVzdCBKU09OIGZyb20gZmlsZSAnXCIrdC5uYW1lK1wiJy4gQnJvd3NlckZpbGVzIHN1cHBvcnRzIGxvYWRpbmcgS2VyYXMtc3R5bGUgdGYuTW9kZWwgYXJ0aWZhY3RzIG9ubHkuXCIpfSxhLnJlYWRBc1RleHQodCl9KSldfSkpfSkpfSx0LnByb3RvdHlwZS5jaGVja01hbmlmZXN0QW5kV2VpZ2h0RmlsZXM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W10scj1lLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHBmKHQubmFtZSl9KSksbz17fSxhPTAsaT10O2E8aS5sZW5ndGg7YSsrKXtpW2FdLnBhdGhzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBhPXBmKHQpO2lmKC0xIT09bi5pbmRleE9mKGEpKXRocm93IG5ldyBFcnJvcihcIkR1cGxpY2F0ZSBmaWxlIGJhc2VuYW1lIGZvdW5kIGluIHdlaWdodHMgbWFuaWZlc3Q6ICdcIithK1wiJ1wiKTtpZihuLnB1c2goYSksLTE9PT1yLmluZGV4T2YoYSkpdGhyb3cgbmV3IEVycm9yKFwiV2VpZ2h0IGZpbGUgd2l0aCBiYXNlbmFtZSAnXCIrYStcIicgaXMgbm90IHByb3ZpZGVkLlwiKTtvW3RdPWVbci5pbmRleE9mKGEpXX0pKX1pZihuLmxlbmd0aCE9PWUubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIk1pc21hdGNoIGluIHRoZSBudW1iZXIgb2YgZmlsZXMgaW4gd2VpZ2h0cyBtYW5pZmVzdCAoXCIrbi5sZW5ndGgrXCIpIGFuZCB0aGUgbnVtYmVyIG9mIHdlaWdodCBmaWxlcyBwcm92aWRlZCAoXCIrZS5sZW5ndGgrXCIpLlwiKTtyZXR1cm4gb30sdH0oKTtmdW5jdGlvbiBLZih0LGUsbixyKXshZnVuY3Rpb24odCl7QyhudWxsIT10JiZBcnJheS5pc0FycmF5KHQpJiZ0Lmxlbmd0aD4wLChmdW5jdGlvbigpe3JldHVyblwicHJvbWlzZXMgbXVzdCBiZSBhIG5vbmUgZW1wdHkgYXJyYXlcIn0pKX0odCksZnVuY3Rpb24odCxlKXtDKHQ+PTAmJnQ8PTEsKGZ1bmN0aW9uKCl7cmV0dXJuXCJQcm9ncmVzcyBmcmFjdGlvbiBtdXN0IGJlIGluIHJhbmdlIFswLCAxXSwgYnV0IGdvdCBzdGFydEZyYWN0aW9uIFwiK3R9KSksQyhlPj0wJiZlPD0xLChmdW5jdGlvbigpe3JldHVyblwiUHJvZ3Jlc3MgZnJhY3Rpb24gbXVzdCBiZSBpbiByYW5nZSBbMCwgMV0sIGJ1dCBnb3QgZW5kRnJhY3Rpb24gXCIrZX0pKSxDKGU+PXQsKGZ1bmN0aW9uKCl7cmV0dXJuXCJzdGFydEZyYWN0aW9uIG11c3QgYmUgbm8gbW9yZSB0aGFuIGVuZEZyYWN0aW9uLCBidXQgZ290IHN0YXJ0RnJhY3Rpb24gXCIrdCtcIiBhbmQgZW5kRnJhY3Rpb24gXCIrZX0pKX0obj1udWxsPT1uPzA6bixyPW51bGw9PXI/MTpyKTt2YXIgbz0wO3JldHVybiBQcm9taXNlLmFsbCh0Lm1hcCgoZnVuY3Rpb24oYSl7cmV0dXJuIGEudGhlbigoZnVuY3Rpb24oYSl7dmFyIGk9bisgKytvL3QubGVuZ3RoKihyLW4pO3JldHVybiBlKGkpLGF9KSksYX0pKSl9ZnVuY3Rpb24gamYodCxlKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG4sbyxhLHMsdSxjLGwsaCxmO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG51bGw9PWUmJihlPXt9KSxuPW51bGw9PWUuZmV0Y2hGdW5jP2koKS5wbGF0Zm9ybS5mZXRjaDplLmZldGNoRnVuYyxvPXQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gbih0LGUucmVxdWVzdEluaXQse2lzQmluYXJ5OiEwfSl9KSksYT0wLHM9LjUsbnVsbCE9ZS5vblByb2dyZXNzP1szLDJdOls0LFByb21pc2UuYWxsKG8pXTtjYXNlIDE6cmV0dXJuIHU9ci5zZW50KCksWzMsNF07Y2FzZSAyOnJldHVybls0LEtmKG8sZS5vblByb2dyZXNzLGEscyldO2Nhc2UgMzp1PXIuc2VudCgpLHIubGFiZWw9NDtjYXNlIDQ6cmV0dXJuIGM9dS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFycmF5QnVmZmVyKCl9KSksbD0uNSxoPTEsbnVsbCE9ZS5vblByb2dyZXNzP1szLDZdOls0LFByb21pc2UuYWxsKGMpXTtjYXNlIDU6cmV0dXJuIGY9ci5zZW50KCksWzMsOF07Y2FzZSA2OnJldHVybls0LEtmKGMsZS5vblByb2dyZXNzLGwsaCldO2Nhc2UgNzpmPXIuc2VudCgpLHIubGFiZWw9ODtjYXNlIDg6cmV0dXJuWzIsZl19fSkpfSkpfWZ1bmN0aW9uIFhmKHQpe3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKG8sYSxpKXtyZXR1cm4gdm9pZCAwPT09YSYmKGE9XCJcIiksbihlLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbixzLHUsYyxsLGgsZixkLHA7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDppZihlPW8ubWFwKChmdW5jdGlvbigpe3JldHVybiExfSkpLG49e30scz1udWxsIT1pP2kubWFwKChmdW5jdGlvbigpe3JldHVybiExfSkpOltdLHU9W10sby5mb3JFYWNoKChmdW5jdGlvbih0LHIpe3ZhciBvPTA7dC53ZWlnaHRzLmZvckVhY2goKGZ1bmN0aW9uKHQpe3ZhciBhPVwicXVhbnRpemF0aW9uXCJpbiB0P3QucXVhbnRpemF0aW9uLmR0eXBlOnQuZHR5cGUsYz1zZlthXSprKHQuc2hhcGUpLGw9ZnVuY3Rpb24oKXtlW3JdPSEwLG51bGw9PW5bcl0mJihuW3JdPVtdKSxuW3JdLnB1c2goe21hbmlmZXN0RW50cnk6dCxncm91cE9mZnNldDpvLHNpemVCeXRlczpjfSl9O251bGwhPWk/aS5mb3JFYWNoKChmdW5jdGlvbihlLG4pe2U9PT10Lm5hbWUmJihsKCksc1tuXT0hMCl9KSk6bCgpLHUucHVzaCh0Lm5hbWUpLG8rPWN9KSl9KSksIXMuZXZlcnkoKGZ1bmN0aW9uKHQpe3JldHVybiB0fSkpKXRocm93IGM9aS5maWx0ZXIoKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIXNbZV19KSksbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgd2VpZ2h0cyBpbiBtYW5pZmVzdCB3aXRoIG5hbWVzOiBcIitjLmpvaW4oXCIsIFwiKStcIi4gXFxuTWFuaWZlc3QgSlNPTiBoYXMgd2VpZ2h0cyB3aXRoIG5hbWVzOiBcIit1LmpvaW4oXCIsIFwiKStcIi5cIik7cmV0dXJuIGw9ZS5yZWR1Y2UoKGZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gZSYmdC5wdXNoKG4pLHR9KSxbXSksaD1bXSxsLmZvckVhY2goKGZ1bmN0aW9uKHQpe29bdF0ucGF0aHMuZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGU9YSsoYS5lbmRzV2l0aChcIi9cIik/XCJcIjpcIi9cIikrdDtoLnB1c2goZSl9KSl9KSksWzQsdChoKV07Y2FzZSAxOnJldHVybiBmPXIuc2VudCgpLGQ9e30scD0wLGwuZm9yRWFjaCgoZnVuY3Rpb24odCl7Zm9yKHZhciBlPW9bdF0ucGF0aHMubGVuZ3RoLHI9MCxhPTA7YTxlO2ErKylyKz1mW3ArYV0uYnl0ZUxlbmd0aDtmb3IodmFyIGk9bmV3IEFycmF5QnVmZmVyKHIpLHM9bmV3IFVpbnQ4QXJyYXkoaSksdT0wLGM9MDtjPGU7YysrKXt2YXIgbD1uZXcgVWludDhBcnJheShmW3ArY10pO3Muc2V0KGwsdSksdSs9bC5ieXRlTGVuZ3RofW5bdF0uZm9yRWFjaCgoZnVuY3Rpb24odCl7dmFyIGU9Y2YoaS5zbGljZSh0Lmdyb3VwT2Zmc2V0LHQuZ3JvdXBPZmZzZXQrdC5zaXplQnl0ZXMpLFt0Lm1hbmlmZXN0RW50cnldKTtmb3IodmFyIG4gaW4gZSlkW25dPWVbbl19KSkscCs9ZX0pKSxbMixkXX19KSl9KSl9fW1mLnJlZ2lzdGVyU2F2ZVJvdXRlcigoZnVuY3Rpb24odCl7cmV0dXJuIGkoKS5nZXRCb29sKFwiSVNfQlJPV1NFUlwiKSYmIUFycmF5LmlzQXJyYXkodCkmJnQuc3RhcnRzV2l0aChIZi5VUkxfU0NIRU1FKT9mdW5jdGlvbih0KXt2b2lkIDA9PT10JiYodD1cIm1vZGVsXCIpO3JldHVybiBuZXcgSGYodCl9KHQuc2xpY2UoSGYuVVJMX1NDSEVNRS5sZW5ndGgpKTpudWxsfSkpO3ZhciBZZj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtpZih0aGlzLkRFRkFVTFRfTUVUSE9EPVwiUE9TVFwiLG51bGw9PWUmJihlPXt9KSx0aGlzLndlaWdodFBhdGhQcmVmaXg9ZS53ZWlnaHRQYXRoUHJlZml4LHRoaXMub25Qcm9ncmVzcz1lLm9uUHJvZ3Jlc3MsbnVsbCE9ZS5mZXRjaEZ1bmM/KEMoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5mZXRjaEZ1bmMsKGZ1bmN0aW9uKCl7cmV0dXJuXCJNdXN0IHBhc3MgYSBmdW5jdGlvbiB0aGF0IG1hdGNoZXMgdGhlIHNpZ25hdHVyZSBvZiBgZmV0Y2hgIChzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0ZldGNoX0FQSSlcIn0pKSx0aGlzLmZldGNoPWUuZmV0Y2hGdW5jKTp0aGlzLmZldGNoPWkoKS5wbGF0Zm9ybS5mZXRjaCxDKG51bGwhPXQmJnQubGVuZ3RoPjAsKGZ1bmN0aW9uKCl7cmV0dXJuXCJVUkwgcGF0aCBmb3IgaHR0cCBtdXN0IG5vdCBiZSBudWxsLCB1bmRlZmluZWQgb3IgZW1wdHkuXCJ9KSksQXJyYXkuaXNBcnJheSh0KSYmQygyPT09dC5sZW5ndGgsKGZ1bmN0aW9uKCl7cmV0dXJuXCJVUkwgcGF0aHMgZm9yIGh0dHAgbXVzdCBoYXZlIGEgbGVuZ3RoIG9mIDIsIChhY3R1YWwgbGVuZ3RoIGlzIFwiK3QubGVuZ3RoK1wiKS5cIn0pKSx0aGlzLnBhdGg9dCxudWxsIT1lLnJlcXVlc3RJbml0JiZudWxsIT1lLnJlcXVlc3RJbml0LmJvZHkpdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEluaXQgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBubyBwcmUtZXhpc3RpbmcgYm9keSwgYnV0IGhhcyBvbmUuXCIpO3RoaXMucmVxdWVzdEluaXQ9ZS5yZXF1ZXN0SW5pdHx8e319cmV0dXJuIHQucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlLG4sbyxhO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6aWYodC5tb2RlbFRvcG9sb2d5IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlckhUVFBSZXF1ZXN0LnNhdmUoKSBkb2VzIG5vdCBzdXBwb3J0IHNhdmluZyBtb2RlbCB0b3BvbG9neSBpbiBiaW5hcnkgZm9ybWF0cyB5ZXQuXCIpO3JldHVybihlPU9iamVjdC5hc3NpZ24oe21ldGhvZDp0aGlzLkRFRkFVTFRfTUVUSE9EfSx0aGlzLnJlcXVlc3RJbml0KSkuYm9keT1uZXcgRm9ybURhdGEsbj1be3BhdGhzOltcIi4vbW9kZWwud2VpZ2h0cy5iaW5cIl0sd2VpZ2h0czp0LndlaWdodFNwZWNzfV0sbz17bW9kZWxUb3BvbG9neTp0Lm1vZGVsVG9wb2xvZ3ksZm9ybWF0OnQuZm9ybWF0LGdlbmVyYXRlZEJ5OnQuZ2VuZXJhdGVkQnksY29udmVydGVkQnk6dC5jb252ZXJ0ZWRCeSx1c2VyRGVmaW5lZE1ldGFkYXRhOnQudXNlckRlZmluZWRNZXRhZGF0YSx3ZWlnaHRzTWFuaWZlc3Q6bn0sZS5ib2R5LmFwcGVuZChcIm1vZGVsLmpzb25cIixuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkobyldLHt0eXBlOlwiYXBwbGljYXRpb24vanNvblwifSksXCJtb2RlbC5qc29uXCIpLG51bGwhPXQud2VpZ2h0RGF0YSYmZS5ib2R5LmFwcGVuZChcIm1vZGVsLndlaWdodHMuYmluXCIsbmV3IEJsb2IoW3Qud2VpZ2h0RGF0YV0se3R5cGU6XCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIn0pLFwibW9kZWwud2VpZ2h0cy5iaW5cIiksWzQsdGhpcy5mZXRjaCh0aGlzLnBhdGgsZSldO2Nhc2UgMTppZigoYT1yLnNlbnQoKSkub2spcmV0dXJuWzIse21vZGVsQXJ0aWZhY3RzSW5mbzp2Zih0KSxyZXNwb25zZXM6W2FdfV07dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlckhUVFBSZXF1ZXN0LnNhdmUoKSBmYWlsZWQgZHVlIHRvIEhUVFAgcmVzcG9uc2Ugc3RhdHVzIFwiK2Euc3RhdHVzK1wiLlwiKX19KSl9KSl9LHQucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQsZSxuLG8sYSxpLHMsdSxjLGwsaCxmO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5mZXRjaCh0aGlzLnBhdGgsdGhpcy5yZXF1ZXN0SW5pdCldO2Nhc2UgMTppZighKHQ9ci5zZW50KCkpLm9rKXRocm93IG5ldyBFcnJvcihcIlJlcXVlc3QgdG8gXCIrdGhpcy5wYXRoK1wiIGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlIFwiK3Quc3RhdHVzK1wiLiBQbGVhc2UgdmVyaWZ5IHRoaXMgVVJMIHBvaW50cyB0byB0aGUgbW9kZWwgSlNPTiBvZiB0aGUgbW9kZWwgdG8gbG9hZC5cIik7ci5sYWJlbD0yO2Nhc2UgMjpyZXR1cm4gci50cnlzLnB1c2goWzIsNCwsNV0pLFs0LHQuanNvbigpXTtjYXNlIDM6cmV0dXJuIGU9ci5zZW50KCksWzMsNV07Y2FzZSA0OnRocm93IHIuc2VudCgpLG49XCJGYWlsZWQgdG8gcGFyc2UgbW9kZWwgSlNPTiBvZiByZXNwb25zZSBmcm9tIFwiK3RoaXMucGF0aCtcIi5cIix0aGlzLnBhdGguZW5kc1dpdGgoXCIucGJcIik/bis9XCIgWW91ciBwYXRoIGNvbnRhaW5zIGEgLnBiIGZpbGUgZXh0ZW5zaW9uLiBTdXBwb3J0IGZvciAucGIgbW9kZWxzIGhhdmUgYmVlbiByZW1vdmVkIGluIFRlbnNvckZsb3cuanMgMS4wIGluIGZhdm9yIG9mIC5qc29uIG1vZGVscy4gWW91IGNhbiByZS1jb252ZXJ0IHlvdXIgUHl0aG9uIFRlbnNvckZsb3cgbW9kZWwgdXNpbmcgdGhlIFRlbnNvckZsb3cuanMgMS4wIGNvbnZlcnNpb24gc2NyaXB0cyBvciB5b3UgY2FuIGNvbnZlcnQgeW91ci5wYiBtb2RlbHMgd2l0aCB0aGUgJ3BiMmpzb24nTlBNIHNjcmlwdCBpbiB0aGUgdGVuc29yZmxvdy90ZmpzLWNvbnZlcnRlciByZXBvc2l0b3J5LlwiOm4rPVwiIFBsZWFzZSBtYWtlIHN1cmUgdGhlIHNlcnZlciBpcyBzZXJ2aW5nIHZhbGlkIEpTT04gZm9yIHRoaXMgcmVxdWVzdC5cIixuZXcgRXJyb3Iobik7Y2FzZSA1OmlmKG89ZS5tb2RlbFRvcG9sb2d5LGE9ZS53ZWlnaHRzTWFuaWZlc3QsaT1lLmdlbmVyYXRlZEJ5LHM9ZS5jb252ZXJ0ZWRCeSx1PWUuZm9ybWF0LGM9ZS51c2VyRGVmaW5lZE1ldGFkYXRhLG51bGw9PW8mJm51bGw9PWEpdGhyb3cgbmV3IEVycm9yKFwiVGhlIEpTT04gZnJvbSBIVFRQIHBhdGggXCIrdGhpcy5wYXRoK1wiIGNvbnRhaW5zIG5laXRoZXIgbW9kZWwgdG9wb2xvZ3kgb3IgbWFuaWZlc3QgZm9yIHdlaWdodHMuXCIpO3JldHVybiBudWxsPT1hP1szLDddOls0LHRoaXMubG9hZFdlaWdodHMoYSldO2Nhc2UgNjpmPXIuc2VudCgpLGw9ZlswXSxoPWZbMV0sci5sYWJlbD03O2Nhc2UgNzpyZXR1cm5bMix7bW9kZWxUb3BvbG9neTpvLHdlaWdodFNwZWNzOmwsd2VpZ2h0RGF0YTpoLHVzZXJEZWZpbmVkTWV0YWRhdGE6YyxnZW5lcmF0ZWRCeTppLGNvbnZlcnRlZEJ5OnMsZm9ybWF0OnV9XX19KSl9KSl9LHQucHJvdG90eXBlLmxvYWRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgZSxuLG8sYSxpLHMsdSxjLGwsaCxmO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6Zm9yKGU9QXJyYXkuaXNBcnJheSh0aGlzLnBhdGgpP3RoaXMucGF0aFsxXTp0aGlzLnBhdGgsbj1mdW5jdGlvbih0KXt2YXIgZT10Lmxhc3RJbmRleE9mKFwiL1wiKSxuPXQubGFzdEluZGV4T2YoXCI/XCIpLHI9dC5zdWJzdHJpbmcoMCxlKSxvPW4+ZT90LnN1YnN0cmluZyhuKTpcIlwiO3JldHVybltyK1wiL1wiLG9dfShlKSxvPW5bMF0sYT1uWzFdLGk9dGhpcy53ZWlnaHRQYXRoUHJlZml4fHxvLHM9W10sdT0wLGM9dDt1PGMubGVuZ3RoO3UrKylsPWNbdV0scy5wdXNoLmFwcGx5KHMsbC53ZWlnaHRzKTtyZXR1cm4gaD1bXSx0LmZvckVhY2goKGZ1bmN0aW9uKHQpe3QucGF0aHMuZm9yRWFjaCgoZnVuY3Rpb24odCl7aC5wdXNoKGkrdCthKX0pKX0pKSxbNCxqZihoLHtyZXF1ZXN0SW5pdDp0aGlzLnJlcXVlc3RJbml0LGZldGNoRnVuYzp0aGlzLmZldGNoLG9uUHJvZ3Jlc3M6dGhpcy5vblByb2dyZXNzfSldO2Nhc2UgMTpyZXR1cm4gZj1yLnNlbnQoKSxbMixbcyxkZihmKV1dfX0pKX0pKX0sdC5VUkxfU0NIRU1FX1JFR0VYPS9eaHR0cHM/OlxcL1xcLy8sdH0oKTtmdW5jdGlvbiAkZih0KXtyZXR1cm4gbnVsbCE9dC5tYXRjaChZZi5VUkxfU0NIRU1FX1JFR0VYKX12YXIgUWY9ZnVuY3Rpb24odCxlKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZmV0Y2gpcmV0dXJuIG51bGw7cmV0dXJuKEFycmF5LmlzQXJyYXkodCk/dC5ldmVyeSgoZnVuY3Rpb24odCl7cmV0dXJuICRmKHQpfSkpOiRmKHQpKT9KZih0LHtvblByb2dyZXNzOmV9KTpudWxsfTtmdW5jdGlvbiBKZih0LGUpe3JldHVybiBuZXcgWWYodCxlKX1tZi5yZWdpc3RlclNhdmVSb3V0ZXIoUWYpLG1mLnJlZ2lzdGVyTG9hZFJvdXRlcihRZik7dmFyIFpmPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLm1vZGVsQXJ0aWZhY3RzPXR9cmV0dXJuIHQucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7cmV0dXJuWzIsdGhpcy5tb2RlbEFydGlmYWN0c119KSl9KSl9LHR9KCksdGQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMuc2F2ZUhhbmRsZXI9dH1yZXR1cm4gdC5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24oZSl7cmV0dXJuWzIsdGhpcy5zYXZlSGFuZGxlcih0KV19KSl9KSl9LHR9KCk7dmFyIGVkPU9iamVjdC5mcmVlemUoe2Jyb3dzZXJGaWxlczpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IHFmKHQpfSxicm93c2VySFRUUFJlcXVlc3Q6ZnVuY3Rpb24odCxlKXtyZXR1cm4gSmYodCxlKX0sY29uY2F0ZW5hdGVBcnJheUJ1ZmZlcnM6ZGYsZGVjb2RlV2VpZ2h0czpjZixlbmNvZGVXZWlnaHRzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBvLGEsaSxzLHUsYz10aGlzO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGwpe3N3aXRjaChsLmxhYmVsKXtjYXNlIDA6Zm9yKG89W10sYT1bXSxpPUFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSk6T2JqZWN0LmtleXModCkscz1mdW5jdGlvbihzKXt2YXIgdT1pW3NdLGw9QXJyYXkuaXNBcnJheSh0KT90W3NdLnRlbnNvcjp0W3VdO2lmKFwiZmxvYXQzMlwiIT09bC5kdHlwZSYmXCJpbnQzMlwiIT09bC5kdHlwZSYmXCJib29sXCIhPT1sLmR0eXBlJiZcInN0cmluZ1wiIT09bC5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBkdHlwZSBpbiB3ZWlnaHQgJ1wiK3UrXCInOiBcIitsLmR0eXBlKTt2YXIgaD17bmFtZTp1LHNoYXBlOmwuc2hhcGUsZHR5cGU6bC5kdHlwZX07aWYoXCJzdHJpbmdcIj09PWwuZHR5cGUpe3ZhciBmPW5ldyBQcm9taXNlKChmdW5jdGlvbih0KXtyZXR1cm4gbihjLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbixvLGEsaSxzLHU7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCxsLmJ5dGVzKCldO2Nhc2UgMTpmb3IoZT1yLnNlbnQoKSxuPWUucmVkdWNlKChmdW5jdGlvbih0LGUpe3JldHVybiB0K2UubGVuZ3RofSksMCkrdWYqZS5sZW5ndGgsbz1uZXcgVWludDhBcnJheShuKSxhPTAsaT0wO2k8ZS5sZW5ndGg7aSsrKXM9ZVtpXSx1PW5ldyBVaW50OEFycmF5KG5ldyBVaW50MzJBcnJheShbcy5sZW5ndGhdKS5idWZmZXIpLG8uc2V0KHUsYSksYSs9dWYsby5zZXQocyxhKSxhKz1zLmxlbmd0aDtyZXR1cm4gdChvKSxbMl19fSkpfSkpfSkpO2EucHVzaChmKX1lbHNlIGEucHVzaChsLmRhdGEoKSk7bnVsbCE9ZSYmKGguZ3JvdXA9ZSksby5wdXNoKGgpfSx1PTA7dTxpLmxlbmd0aDsrK3Upcyh1KTtyZXR1cm5bNCxQcm9taXNlLmFsbChhKV07Y2FzZSAxOnJldHVyblsyLHtkYXRhOmxmKGwuc2VudCgpKSxzcGVjczpvfV19fSkpfSkpfSxmcm9tTWVtb3J5OmZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD9udWxsIT10Lm1vZGVsVG9wb2xvZ3l8fG51bGwhPXQud2VpZ2h0U3BlY3M/bmV3IFpmKHQpOihjb25zb2xlLndhcm4oXCJQbGVhc2UgY2FsbCB0Zi5pby5mcm9tTWVtb3J5KCkgd2l0aCBvbmx5IG9uZSBhcmd1bWVudC4gVGhlIGFyZ3VtZW50IHNob3VsZCBiZSBvZiB0eXBlIE1vZGVsQXJ0aWZhY3RzLiBUaGUgbXVsdGktYXJndW1lbnQgc2lnbmF0dXJlIG9mIHRmLmlvLmZyb21NZW1vcnkoKSBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cIiksbmV3IFpmKHttb2RlbFRvcG9sb2d5OnR9KSk6KGNvbnNvbGUud2FybihcIlBsZWFzZSBjYWxsIHRmLmlvLmZyb21NZW1vcnkoKSB3aXRoIG9ubHkgb25lIGFyZ3VtZW50LiBUaGUgYXJndW1lbnQgc2hvdWxkIGJlIG9mIHR5cGUgTW9kZWxBcnRpZmFjdHMuIFRoZSBtdWx0aS1hcmd1bWVudCBzaWduYXR1cmUgb2YgdGYuaW8uZnJvbU1lbW9yeSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlwiKSxuZXcgWmYoe21vZGVsVG9wb2xvZ3k6dCx3ZWlnaHRTcGVjczplLHdlaWdodERhdGE6bix0cmFpbmluZ0NvbmZpZzpyfSkpfSxnZXRMb2FkSGFuZGxlcnM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbWYuZ2V0TG9hZEhhbmRsZXJzKHQsZSl9LGdldE1vZGVsQXJ0aWZhY3RzSW5mb0ZvckpTT046dmYsZ2V0U2F2ZUhhbmRsZXJzOmZ1bmN0aW9uKHQpe3JldHVybiBtZi5nZXRTYXZlSGFuZGxlcnModCl9LGh0dHA6SmYsaXNIVFRQU2NoZW1lOiRmLGxvYWRXZWlnaHRzOmZ1bmN0aW9uKHQsZSxvLGEpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1cIlwiKSxuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihuKXtyZXR1cm5bMixYZigoZnVuY3Rpb24odCl7cmV0dXJuIGpmKHQse3JlcXVlc3RJbml0OmF9KX0pKSh0LGUsbyldfSkpfSkpfSxyZWdpc3RlckxvYWRSb3V0ZXI6ZnVuY3Rpb24odCl7cmV0dXJuIG1mLnJlZ2lzdGVyTG9hZFJvdXRlcih0KX0scmVnaXN0ZXJTYXZlUm91dGVyOmZ1bmN0aW9uKHQpe3JldHVybiBtZi5yZWdpc3RlclNhdmVSb3V0ZXIodCl9LHdlaWdodHNMb2FkZXJGYWN0b3J5OlhmLHdpdGhTYXZlSGFuZGxlcjpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IHRkKHQpfSxjb3B5TW9kZWw6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24obil7cmV0dXJuITEsWzIsYmYodCxlLCExKV19KSl9KSl9LGxpc3RNb2RlbHM6ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIHQsZSxuLG8sYSxpLHM7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDp0PXlmLmdldFNjaGVtZXMoKSxlPXt9LG49MCxvPXQsci5sYWJlbD0xO2Nhc2UgMTpyZXR1cm4gbjxvLmxlbmd0aD8oYT1vW25dLFs0LHlmLmdldE1hbmFnZXIoYSkubGlzdE1vZGVscygpXSk6WzMsNF07Y2FzZSAyOmZvcihzIGluIGk9ci5zZW50KCkpZVthK2dmK3NdPWlbc107ci5sYWJlbD0zO2Nhc2UgMzpyZXR1cm4gbisrLFszLDFdO2Nhc2UgNDpyZXR1cm5bMixlXX19KSl9KSl9LG1vdmVNb2RlbDpmdW5jdGlvbih0LGUpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihuKXtyZXR1cm4hMCxbMixiZih0LGUsITApXX0pKX0pKX0scmVtb3ZlTW9kZWw6ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKG4pe3JldHVybiBlPXhmKHQpLFsyLHlmLmdldE1hbmFnZXIoZS5zY2hlbWUpLnJlbW92ZU1vZGVsKGUucGF0aCldfSkpfSkpfX0pO3ZhciBuZCxyZD1Bbih7Y29uZnVzaW9uTWF0cml4XzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bW4odCxcImxhYmVsc1wiLFwiY29uZnVzaW9uTWF0cml4XCIpLG89bW4oZSxcInByZWRpY3Rpb25zXCIsXCJjb25mdXNpb25NYXRyaXhcIik7QyhudWxsPT1ufHxuPjAmJk51bWJlci5pc0ludGVnZXIobiksKGZ1bmN0aW9uKCl7cmV0dXJuXCJJZiBwcm92aWRlZCwgbnVtQ2xhc3NlcyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgYnV0IGdvdCBcIitufSkpLEMoMT09PXIucmFuaywoZnVuY3Rpb24oKXtyZXR1cm5cIkV4cGVjdGVkIHRoZSByYW5rIG9mIGxhYmVscyB0byBiZSAxLCBidXQgZ290IFwiK3IucmFua30pKSxDKDE9PT1vLnJhbmssKGZ1bmN0aW9uKCl7cmV0dXJuXCJFeHBlY3RlZCB0aGUgcmFuayBvZiBwcmVkaWN0aW9ucyB0byBiZSAxLCBidXQgZ290IFwiK28ucmFua30pKSxDKHIuc2hhcGVbMF09PT1vLnNoYXBlWzBdLChmdW5jdGlvbigpe3JldHVyblwiTWlzbWF0Y2ggaW4gdGhlIG51bWJlciBvZiBleGFtcGxlczogXCIrci5zaGFwZVswXStcIiB2cy4gXCIrby5zaGFwZVswXStcIi4gTGFiZWxzIGFuZCBwcmVkaWN0aW9ucyBzaG91bGQgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgZWxlbWVudHMuXCJ9KSksQyhuPjAmJk51bWJlci5pc0ludGVnZXIobiksKGZ1bmN0aW9uKCl7cmV0dXJuXCJudW1DbGFzc2VzIGlzIHJlcXVpcmVkIHRvIGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgYnV0IGdvdCBcIitufSkpO3ZhciBhPVJyKHIuYXNUeXBlKFwiaW50MzJcIiksbiksaT1ScihvLmFzVHlwZShcImludDMyXCIpLG4pO3JldHVybiBhLnRyYW5zcG9zZSgpLm1hdE11bChpKS5hc1R5cGUoXCJpbnQzMlwiKX19KSxvZD1PYmplY3QuZnJlZXplKHtjb25mdXNpb25NYXRyaXg6cmR9KTt2YXIgYWQ9QW4oe2Zyb21QaXhlbHNfOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9MyksZT40KXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb25zdHJ1Y3QgVGVuc29yIHdpdGggbW9yZSB0aGFuIDQgY2hhbm5lbHMgZnJvbSBwaXhlbHMuXCIpO2lmKG51bGw9PXQpdGhyb3cgbmV3IEVycm9yKFwicGl4ZWxzIHBhc3NlZCB0byB0Zi5icm93c2VyLmZyb21QaXhlbHMoKSBjYW4gbm90IGJlIG51bGxcIik7dmFyIG49ITEscj0hMSxvPSExLGE9ITEsaT0hMTtpZih0LmRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5KW49ITA7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgSW1hZ2VEYXRhJiZ0IGluc3RhbmNlb2YgSW1hZ2VEYXRhKXI9ITA7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgSFRNTFZpZGVvRWxlbWVudCYmdCBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQpbz0hMDtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50JiZ0IGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudClhPSEwO2Vsc2V7aWYobnVsbD09dC5nZXRDb250ZXh0KXRocm93IG5ldyBFcnJvcihcInBpeGVscyBwYXNzZWQgdG8gdGYuYnJvd3Nlci5mcm9tUGl4ZWxzKCkgbXVzdCBiZSBlaXRoZXIgYW4gSFRNTFZpZGVvRWxlbWVudCwgSFRNTEltYWdlRWxlbWVudCwgSFRNTENhbnZhc0VsZW1lbnQsIEltYWdlRGF0YSBpbiBicm93c2VyLCBvciBPZmZzY3JlZW5DYW52YXMsIEltYWdlRGF0YSBpbiB3ZWJ3b3JrZXIgb3Ige2RhdGE6IFVpbnQzMkFycmF5LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn0sIGJ1dCB3YXMgXCIrdC5jb25zdHJ1Y3Rvci5uYW1lKTtpPSEwfWlmKG8pe2lmKG8mJnQucmVhZHlTdGF0ZTwyKXRocm93IG5ldyBFcnJvcihcIlRoZSB2aWRlbyBlbGVtZW50IGhhcyBub3QgbG9hZGVkIGRhdGEgeWV0LiBQbGVhc2Ugd2FpdCBmb3IgYGxvYWRlZGRhdGFgIGV2ZW50IG9uIHRoZSA8dmlkZW8+IGVsZW1lbnQuXCIpfWlmKG51bGwhPWwoXCJGcm9tUGl4ZWxzXCIsTHQuYmFja2VuZE5hbWUpKXJldHVybiBMdC5ydW5LZXJuZWwoXCJGcm9tUGl4ZWxzXCIse3BpeGVsczp0fSx7bnVtQ2hhbm5lbHM6ZX0pO3ZhciBzLHUsYz1vP1t0LnZpZGVvV2lkdGgsdC52aWRlb0hlaWdodF06W3Qud2lkdGgsdC5oZWlnaHRdLGg9Y1swXSxmPWNbMV07aWYoaT9zPXQuZ2V0Q29udGV4dChcIjJkXCIpLmdldEltYWdlRGF0YSgwLDAsaCxmKS5kYXRhOnJ8fG4/cz10LmRhdGE6KGF8fG8pJiYobnVsbD09bmQmJihuZD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpLmdldENvbnRleHQoXCIyZFwiKSksbmQuY2FudmFzLndpZHRoPWgsbmQuY2FudmFzLmhlaWdodD1mLG5kLmRyYXdJbWFnZSh0LDAsMCxoLGYpLHM9bmQuZ2V0SW1hZ2VEYXRhKDAsMCxoLGYpLmRhdGEpLDQ9PT1lKXU9bmV3IEludDMyQXJyYXkocyk7ZWxzZXt2YXIgZD1oKmY7dT1uZXcgSW50MzJBcnJheShkKmUpO2Zvcih2YXIgcD0wO3A8ZDtwKyspZm9yKHZhciB2PTA7djxlOysrdil1W3AqZSt2XT1zWzQqcCt2XX1yZXR1cm4gUG4odSxbZixoLGVdLFwiaW50MzJcIil9fSksaWQ9T2JqZWN0LmZyZWV6ZSh7dG9QaXhlbHM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIG4sbyxhLGkscyx1LGMsbCxoLGYsZCxwLHYsbSxnLHkseCxiLHcsQyxFLFIsSTtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKG49bW4odCxcImltZ1wiLFwidG9QaXhlbHNcIiksdCBpbnN0YW5jZW9mIHd0fHwobj1uLnRvSW50KCkpLDIhPT1uLnJhbmsmJjMhPT1uLnJhbmspdGhyb3cgbmV3IEVycm9yKFwidG9QaXhlbHMgb25seSBzdXBwb3J0cyByYW5rIDIgb3IgMyB0ZW5zb3JzLCBnb3QgcmFuayBcIituLnJhbmsrXCIuXCIpO2lmKG89bi5zaGFwZS5zbGljZSgwLDIpLGE9b1swXSxpPW9bMV0sKHM9Mj09PW4ucmFuaz8xOm4uc2hhcGVbMl0pPjR8fDI9PT1zKXRocm93IG5ldyBFcnJvcihcInRvUGl4ZWxzIG9ubHkgc3VwcG9ydHMgZGVwdGggb2Ygc2l6ZSAxLCAzIG9yIDQgYnV0IGdvdCBcIitzKTtyZXR1cm5bNCxuLmRhdGEoKV07Y2FzZSAxOnJldHVybiB1PXIuc2VudCgpLGM9bi5taW4oKSxsPW4ubWF4KCksWzQsUHJvbWlzZS5hbGwoW2MuZGF0YSgpLGwuZGF0YSgpXSldO2Nhc2UgMjppZihoPXIuc2VudCgpLGY9aFswXSxkPWhbMV0scD1mWzBdLHY9ZFswXSxjLmRpc3Bvc2UoKSxsLmRpc3Bvc2UoKSxcImZsb2F0MzJcIj09PW4uZHR5cGUpe2lmKHA8MHx8dj4xKXRocm93IG5ldyBFcnJvcihcIlRlbnNvciB2YWx1ZXMgZm9yIGEgZmxvYXQzMiBUZW5zb3IgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgWzAgLSAxXSBidXQgZ290IHJhbmdlIFtcIitwK1wiIC0gXCIrditcIl0uXCIpfWVsc2V7aWYoXCJpbnQzMlwiIT09bi5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCB0eXBlIGZvciB0b1BpeGVsczogXCIrbi5kdHlwZStcIi4gUGxlYXNlIHVzZSBmbG9hdDMyIG9yIGludDMyIHRlbnNvcnMuXCIpO2lmKHA8MHx8dj4yNTUpdGhyb3cgbmV3IEVycm9yKFwiVGVuc29yIHZhbHVlcyBmb3IgYSBpbnQzMiBUZW5zb3IgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgWzAgLSAyNTVdIGJ1dCBnb3QgcmFuZ2UgW1wiK3ArXCIgLSBcIit2K1wiXS5cIil9Zm9yKG09XCJmbG9hdDMyXCI9PT1uLmR0eXBlPzI1NToxLGc9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGkqYSo0KSx5PTA7eTxhKmk7Kyt5KXg9dm9pZCAwLGI9dm9pZCAwLHc9dm9pZCAwLEM9dm9pZCAwLDE9PT1zPyh4PXVbeV0qbSxiPXVbeV0qbSx3PXVbeV0qbSxDPTI1NSk6Mz09PXM/KHg9dVszKnldKm0sYj11WzMqeSsxXSptLHc9dVszKnkrMl0qbSxDPTI1NSk6ND09PXMmJih4PXVbNCp5XSptLGI9dVs0KnkrMV0qbSx3PXVbNCp5KzJdKm0sQz11WzQqeSszXSptKSxnWyhFPTQqeSkrMF09TWF0aC5yb3VuZCh4KSxnW0UrMV09TWF0aC5yb3VuZChiKSxnW0UrMl09TWF0aC5yb3VuZCh3KSxnW0UrM109TWF0aC5yb3VuZChDKTtyZXR1cm4gbnVsbCE9ZSYmKGUud2lkdGg9aSxlLmhlaWdodD1hLFI9ZS5nZXRDb250ZXh0KFwiMmRcIiksST1uZXcgSW1hZ2VEYXRhKGcsaSxhKSxSLnB1dEltYWdlRGF0YShJLDAsMCkpLG4hPT10JiZuLmRpc3Bvc2UoKSxbMixnXX19KSl9KSl9LGZyb21QaXhlbHM6YWR9KSxzZD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt9cmV0dXJuIHQucHJvdG90eXBlLmdldENsYXNzTmFtZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNsYXNzTmFtZX0sdC5mcm9tQ29uZmlnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyB0KGUpfSx0fSgpLHVkPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuY2xhc3NOYW1lTWFwPXt9fXJldHVybiB0LmdldE1hcD1mdW5jdGlvbigpe3JldHVybiBudWxsPT10Lmluc3RhbmNlJiYodC5pbnN0YW5jZT1uZXcgdCksdC5pbnN0YW5jZX0sdC5yZWdpc3Rlcj1mdW5jdGlvbihlKXt0LmdldE1hcCgpLmNsYXNzTmFtZU1hcFtlLmNsYXNzTmFtZV09W2UsZS5mcm9tQ29uZmlnXX0sdH0oKTtmdW5jdGlvbiBjZCh0KXtDKG51bGwhPXQuY2xhc3NOYW1lLChmdW5jdGlvbigpe3JldHVyblwiQ2xhc3MgYmVpbmcgcmVnaXN0ZXJlZCBkb2VzIG5vdCBoYXZlIHRoZSBzdGF0aWMgY2xhc3NOYW1lIHByb3BlcnR5IGRlZmluZWQuXCJ9KSksQyhcInN0cmluZ1wiPT10eXBlb2YgdC5jbGFzc05hbWUsKGZ1bmN0aW9uKCl7cmV0dXJuXCJjbGFzc05hbWUgaXMgcmVxdWlyZWQgdG8gYmUgYSBzdHJpbmcsIGJ1dCBnb3QgdHlwZSBcIit0eXBlb2YgdC5jbGFzc05hbWV9KSksQyh0LmNsYXNzTmFtZS5sZW5ndGg+MCwoZnVuY3Rpb24oKXtyZXR1cm5cIkNsYXNzIGJlaW5nIHJlZ2lzdGVyZWQgaGFzIGFuIGVtcHR5LXN0cmluZyBhcyBpdHMgY2xhc3NOYW1lLCB3aGljaCBpcyBkaXNhbGxvd2VkLlwifSkpLHVkLnJlZ2lzdGVyKHQpfXZhciBsZD1PYmplY3QuZnJlZXplKHtTZXJpYWxpemFibGU6c2QsU2VyaWFsaXphdGlvbk1hcDp1ZCxyZWdpc3RlckNsYXNzOmNkfSksaGQ9LjAwMSxmZD0uMTtmdW5jdGlvbiBkZCgpe3JldHVybiAzMj09PUx0LmJhY2tlbmQuZmxvYXRQcmVjaXNpb24oKT9oZDpmZH1mdW5jdGlvbiBwZCh0LGUsbil7dmFyIHI9ITA7aWYoKFYodCl8fFYoZSkpJiYocj0hMSksVih0KSYmVihlKSYmKHI9ITApLHIpe3ZhciBvPXQuY29uc3RydWN0b3IubmFtZSxhPWUuY29uc3RydWN0b3IubmFtZTtpZihvIT09YSl0aHJvdyBuZXcgRXJyb3IoXCJBcnJheXMgYXJlIG9mIGRpZmZlcmVudCB0eXBlLiBBY3R1YWw6IFwiK28rXCIuIEV4cGVjdGVkOiBcIithKX1pZihBcnJheS5pc0FycmF5KHQpJiZBcnJheS5pc0FycmF5KGUpKXt2YXIgaT1wbih0KSxzPXBuKGUpO2lmKCFTKGkscykpdGhyb3cgbmV3IEVycm9yKFwiQXJyYXlzIGhhdmUgZGlmZmVyZW50IHNoYXBlcy4gQWN0dWFsOiBbXCIraStcIl0uIEV4cGVjdGVkOiBbXCIrcytcIl1cIil9dmFyIHU9Vih0KT90OkkodCksYz1WKGUpP2U6SShlKTtpZih1Lmxlbmd0aCE9PWMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkFycmF5cyBoYXZlIGRpZmZlcmVudCBsZW5ndGhzIGFjdHVhbDogXCIrdS5sZW5ndGgrXCIgdnMgZXhwZWN0ZWQ6IFwiK2MubGVuZ3RoK1wiLlxcbkFjdHVhbDogICBcIit1K1wiLlxcbkV4cGVjdGVkOiBcIitjK1wiLlwiKTtmb3IodmFyIGw9MDtsPGMubGVuZ3RoOysrbCl7dmFyIGg9dVtsXSxmPWNbbF07aWYoIW4oaCxmKSl0aHJvdyBuZXcgRXJyb3IoXCJBcnJheXMgZGlmZmVyOiBhY3R1YWxbXCIrbCtcIl0gPSBcIitoK1wiLCBleHBlY3RlZFtcIitsK1wiXSA9IFwiK2YrXCIuXFxuQWN0dWFsOiAgIFwiK3UrXCIuXFxuRXhwZWN0ZWQ6IFwiK2MrXCIuXCIpfX1mdW5jdGlvbiB2ZCh0LGUsbil7cmV0dXJuIWlzRmluaXRlKHQpJiYhaXNGaW5pdGUoZSl8fCEoaXNOYU4odCl8fGlzTmFOKGUpfHxNYXRoLmFicyh0LWUpPm4pfXZhciBtZD1PYmplY3QuZnJlZXplKHtURVNUX0VQU0lMT05fRkxPQVQxNjpmZCxleHBlY3RBcnJheXNDbG9zZTpmdW5jdGlvbih0LGUsbil7cmV0dXJuIG51bGw9PW4mJihuPWRkKCkpLHBkKHQsZSwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdmQodCxlLG4pfSkpfSx0ZXN0RXBzaWxvbjpkZCxleHBlY3RQcm9taXNlVG9GYWlsOmZ1bmN0aW9uKHQsZSl7dCgpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIGUuZmFpbCgpfSksKGZ1bmN0aW9uKCl7cmV0dXJuIGUoKX0pKX0sZXhwZWN0QXJyYXlzRXF1YWw6ZnVuY3Rpb24odCxlKXt2YXIgbj1cInN0cmluZ1wiPT10eXBlb2YgZXx8XCJudW1iZXJcIj09dHlwZW9mIGV8fFwiYm9vbGVhblwiPT10eXBlb2YgZT9bZV06ZTtyZXR1cm4gSCh0KXx8SCh0WzBdKXx8SChlKXx8SChlWzBdKT9wZCh0LG4sKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9PWV9KSk6cGQodCxlLChmdW5jdGlvbih0LGUpe3JldHVybiB2ZCh0LGUsMCl9KSl9LGV4cGVjdE51bWJlcnNDbG9zZTpmdW5jdGlvbih0LGUsbil7aWYobnVsbD09biYmKG49ZGQoKSksIXZkKHQsZSxuKSl0aHJvdyBuZXcgRXJyb3IoXCJOdW1iZXJzIGRpZmZlcjogYWN0dWFsID09PSBcIit0K1wiLCBleHBlY3RlZCA9PT0gXCIrZSl9LGV4cGVjdFZhbHVlc0luUmFuZ2U6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKWlmKHRbcl08ZXx8dFtyXT5uKXRocm93IG5ldyBFcnJvcihcIlZhbHVlIG91dCBvZiByYW5nZTpcIit0W3JdK1wiIGxvdzogXCIrZStcIiwgaGlnaDogXCIrbil9LGV4cGVjdEFycmF5QnVmZmVyc0VxdWFsOmZ1bmN0aW9uKHQsZSl7ZXhwZWN0KG5ldyBGbG9hdDMyQXJyYXkodCkpLnRvRXF1YWwobmV3IEZsb2F0MzJBcnJheShlKSl9fSksZ2Q9XCIxLjcuMFwiO3ZhciB5ZD1PYmplY3QuZnJlZXplKHtncGdwdV91dGlsOk1pLHdlYmdsX3V0aWw6R2UsZm9yY2VIYWxmRmxvYXQ6ZnVuY3Rpb24oKXtpKCkuc2V0KFwiV0VCR0xfRk9SQ0VfRjE2X1RFWFRVUkVTXCIsITApfSxNYXRoQmFja2VuZFdlYkdMOlpzLHNldFdlYkdMQ29udGV4dDpLdCxHUEdQVUNvbnRleHQ6Qml9KSx4ZD1mdW5jdGlvbih0KXtmdW5jdGlvbiBvKCl7cmV0dXJuIG51bGwhPT10JiZ0LmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLm1pbmltaXplPWZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT0hMSk7dmFyIHI9dGhpcy5jb21wdXRlR3JhZGllbnRzKHQsbiksbz1yLnZhbHVlLGE9ci5ncmFkcztpZihudWxsIT1uKXt2YXIgaT1uLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue25hbWU6dC5uYW1lLHRlbnNvcjphW3QubmFtZV19fSkpO3RoaXMuYXBwbHlHcmFkaWVudHMoaSl9ZWxzZSB0aGlzLmFwcGx5R3JhZGllbnRzKGEpO3JldHVybiB0bihhKSxlP286KG8uZGlzcG9zZSgpLG51bGwpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkoby5wcm90b3R5cGUsXCJpdGVyYXRpb25zXCIse2dldDpmdW5jdGlvbigpe3JldHVybiBudWxsPT10aGlzLml0ZXJhdGlvbnNfJiYodGhpcy5pdGVyYXRpb25zXz0wKSx0aGlzLml0ZXJhdGlvbnNffSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLG8ucHJvdG90eXBlLmluY3JlbWVudEl0ZXJhdGlvbnM9ZnVuY3Rpb24oKXt0aGlzLml0ZXJhdGlvbnNfPXRoaXMuaXRlcmF0aW9ucysxfSxvLnByb3RvdHlwZS5jb21wdXRlR3JhZGllbnRzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHBvKHQsZSl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtudWxsIT10aGlzLml0ZXJhdGlvbnNfJiZ0bih0aGlzLml0ZXJhdGlvbnNfKX0sby5wcm90b3R5cGUuc2F2ZUl0ZXJhdGlvbnM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXRoaXMuaXRlcmF0aW9uc18mJih0aGlzLml0ZXJhdGlvbnNfPTApLFsyLHtuYW1lOlwiaXRlclwiLHRlbnNvcjpPbih0aGlzLml0ZXJhdGlvbnNfLFwiaW50MzJcIil9XX0pKX0pKX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLChmdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJnZXRXZWlnaHRzKCkgaXMgbm90IGltcGxlbWVudGVkIGZvciB0aGlzIG9wdGltaXplciB5ZXQuXCIpfSkpfSkpfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLChmdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRXZWlnaHRzKCkgaXMgbm90IGltcGxlbWVudGVkIGZvciB0aGlzIG9wdGltaXplciBjbGFzcyBcIit0aGlzLmdldENsYXNzTmFtZSgpKX0pKX0pKX0sby5wcm90b3R5cGUuZXh0cmFjdEl0ZXJhdGlvbnM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKG4pe3N3aXRjaChuLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9dGhpcyxbNCx0WzBdLnRlbnNvci5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gZS5pdGVyYXRpb25zXz1uLnNlbnQoKVswXSxbMix0LnNsaWNlKDEpXX19KSl9KSl9LG99KHNkKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoeGQsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dC5taW5pbWl6ZSYmbnVsbCE9dC5jb21wdXRlR3JhZGllbnRzJiZudWxsIT10LmFwcGx5R3JhZGllbnRzfX0pO3ZhciBiZD1mdW5jdGlvbih0KXtmdW5jdGlvbiBvKGUsbixyKXt2b2lkIDA9PT1yJiYocj1udWxsKTt2YXIgbz10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG8ubGVhcm5pbmdSYXRlPWUsby5yaG89bixvLmVwc2lsb249cixvLmFjY3VtdWxhdGVkR3JhZHM9W10sby5hY2N1bXVsYXRlZFVwZGF0ZXM9W10sbnVsbD09ciYmKG8uZXBzaWxvbj1MdC5iYWNrZW5kLmVwc2lsb24oKSksb31yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7KEFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSk6T2JqZWN0LmtleXModCkpLmZvckVhY2goKGZ1bmN0aW9uKG4scil7dmFyIG89THQucmVnaXN0ZXJlZFZhcmlhYmxlc1tuXTtudWxsPT1lLmFjY3VtdWxhdGVkR3JhZHNbcl0mJihlLmFjY3VtdWxhdGVkR3JhZHNbcl09e29yaWdpbmFsTmFtZTpuK1wiL2FjY3VtX2dyYWRcIix2YXJpYWJsZTpaZSgoZnVuY3Rpb24oKXtyZXR1cm4gWG4obykudmFyaWFibGUoITEpfSkpfSksbnVsbD09ZS5hY2N1bXVsYXRlZFVwZGF0ZXNbcl0mJihlLmFjY3VtdWxhdGVkVXBkYXRlc1tyXT17b3JpZ2luYWxOYW1lOm4rXCIvYWNjdW1fdmFyXCIsdmFyaWFibGU6WmUoKGZ1bmN0aW9uKCl7cmV0dXJuIFhuKG8pLnZhcmlhYmxlKCExKX0pKX0pO3ZhciBhPUFycmF5LmlzQXJyYXkodCk/dFtyXS50ZW5zb3I6dFtuXTtpZihudWxsIT1hKXt2YXIgaT1lLmFjY3VtdWxhdGVkR3JhZHNbcl0udmFyaWFibGUscz1lLmFjY3VtdWxhdGVkVXBkYXRlc1tyXS52YXJpYWJsZTtaZSgoZnVuY3Rpb24oKXt2YXIgdD1pLm11bChlLnJobykuYWRkKGEuc3F1YXJlKCkubXVsKDEtZS5yaG8pKSxuPXMuYWRkKGUuZXBzaWxvbikuc3FydCgpLmRpdihpLmFkZChlLmVwc2lsb24pLnNxcnQoKSkubXVsKGEpLHI9cy5tdWwoZS5yaG8pLmFkZChuLnNxdWFyZSgpLm11bCgxLWUucmhvKSk7aS5hc3NpZ24odCkscy5hc3NpZ24ocik7dmFyIHU9bi5tdWwoLWUubGVhcm5pbmdSYXRlKS5hZGQobyk7by5hc3NpZ24odSl9KSl9fSkpLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5hY2N1bXVsYXRlZFVwZGF0ZXMmJih0bih0aGlzLmFjY3VtdWxhdGVkR3JhZHMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSksdG4odGhpcy5hY2N1bXVsYXRlZFVwZGF0ZXMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSkpfSxvLnByb3RvdHlwZS5nZXRXZWlnaHRzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0O3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHQ9dGhpcy5hY2N1bXVsYXRlZEdyYWRzLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGVkVXBkYXRlcyksWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW2Uuc2VudCgpXS5jb25jYXQodC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntuYW1lOnQub3JpZ2luYWxOYW1lLHRlbnNvcjp0LnZhcmlhYmxlfX0pKSldfX0pKX0pKX0sby5wcm90b3R5cGUuc2V0V2VpZ2h0cz1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmV4dHJhY3RJdGVyYXRpb25zKHQpXTtjYXNlIDE6cmV0dXJuIHQ9bi5zZW50KCksZT10Lmxlbmd0aC8yLCExLHRoaXMuYWNjdW11bGF0ZWRHcmFkcz10LnNsaWNlKDAsZSkubWFwKChmdW5jdGlvbih0KXtyZXR1cm57b3JpZ2luYWxOYW1lOnQubmFtZSx2YXJpYWJsZTp0LnRlbnNvci52YXJpYWJsZSghMSl9fSkpLHRoaXMuYWNjdW11bGF0ZWRVcGRhdGVzPXQuc2xpY2UoZSwyKmUpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pKSxbMl19fSkpfSkpfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLHJobzp0aGlzLnJobyxlcHNpbG9uOnRoaXMuZXBzaWxvbn19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSxlLnJobyxlLmVwc2lsb24pfSxvLmNsYXNzTmFtZT1cIkFkYWRlbHRhXCIsb30oeGQpO2NkKGJkKTt2YXIgd2Q9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4pe3ZvaWQgMD09PW4mJihuPS4xKTt2YXIgcj10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIHIubGVhcm5pbmdSYXRlPWUsci5pbml0aWFsQWNjdW11bGF0b3JWYWx1ZT1uLHIuYWNjdW11bGF0ZWRHcmFkcz1bXSxyfXJldHVybiBlKG8sdCksby5wcm90b3R5cGUuYXBwbHlHcmFkaWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpczsoQXJyYXkuaXNBcnJheSh0KT90Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pKTpPYmplY3Qua2V5cyh0KSkuZm9yRWFjaCgoZnVuY3Rpb24obixyKXt2YXIgbz1MdC5yZWdpc3RlcmVkVmFyaWFibGVzW25dO2lmKG51bGw9PWUuYWNjdW11bGF0ZWRHcmFkc1tyXSl7ZS5hY2N1bXVsYXRlZEdyYWRzW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9hY2N1bXVsYXRvclwiLHZhcmlhYmxlOlplKChmdW5jdGlvbigpe3JldHVybiBIbihvLnNoYXBlLGUuaW5pdGlhbEFjY3VtdWxhdG9yVmFsdWUpLnZhcmlhYmxlKCExKX0pKX19dmFyIGE9QXJyYXkuaXNBcnJheSh0KT90W3JdLnRlbnNvcjp0W25dO2lmKG51bGwhPWEpe3ZhciBpPWUuYWNjdW11bGF0ZWRHcmFkc1tyXS52YXJpYWJsZTtaZSgoZnVuY3Rpb24oKXt2YXIgdD1pLmFkZChhLnNxdWFyZSgpKTtpLmFzc2lnbih0KTt2YXIgbj1hLmRpdih0LmFkZChMdC5iYWNrZW5kLmVwc2lsb24oKSkuc3FydCgpKS5tdWwoLWUubGVhcm5pbmdSYXRlKS5hZGQobyk7by5hc3NpZ24obil9KSl9fSkpLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5hY2N1bXVsYXRlZEdyYWRzJiZ0bih0aGlzLmFjY3VtdWxhdGVkR3JhZHMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSl9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7c3dpdGNoKHQubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLnNhdmVJdGVyYXRpb25zKCldO2Nhc2UgMTpyZXR1cm5bMixbdC5zZW50KCldLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGVkR3JhZHMubWFwKChmdW5jdGlvbih0KXtyZXR1cm57bmFtZTp0Lm9yaWdpbmFsTmFtZSx0ZW5zb3I6dC52YXJpYWJsZX19KSkpXX19KSl9KSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5leHRyYWN0SXRlcmF0aW9ucyh0KV07Y2FzZSAxOnJldHVybiB0PWUuc2VudCgpLCExLHRoaXMuYWNjdW11bGF0ZWRHcmFkcz10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pKSxbMl19fSkpfSkpfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLGluaXRpYWxBY2N1bXVsYXRvclZhbHVlOnRoaXMuaW5pdGlhbEFjY3VtdWxhdG9yVmFsdWV9fSxvLmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZS5sZWFybmluZ1JhdGUsZS5pbml0aWFsQWNjdW11bGF0b3JWYWx1ZSl9LG8uY2xhc3NOYW1lPVwiQWRhZ3JhZFwiLG99KHhkKTtjZCh3ZCk7dmFyIENkPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG8oZSxuLHIsbyl7dm9pZCAwPT09byYmKG89bnVsbCk7dmFyIGE9dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBhLmxlYXJuaW5nUmF0ZT1lLGEuYmV0YTE9bixhLmJldGEyPXIsYS5lcHNpbG9uPW8sYS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50PVtdLGEuYWNjdW11bGF0ZWRTZWNvbmRNb21lbnQ9W10sWmUoKGZ1bmN0aW9uKCl7YS5hY2NCZXRhMT1PbihuKS52YXJpYWJsZSgpLGEuYWNjQmV0YTI9T24ocikudmFyaWFibGUoKX0pKSxudWxsPT1vJiYoYS5lcHNpbG9uPUx0LmJhY2tlbmQuZXBzaWxvbigpKSxhfXJldHVybiBlKG8sdCksby5wcm90b3R5cGUuYXBwbHlHcmFkaWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPUFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSk6T2JqZWN0LmtleXModCk7WmUoKGZ1bmN0aW9uKCl7dmFyIHI9Q2MoMSxlLmFjY0JldGExKSxvPUNjKDEsZS5hY2NCZXRhMik7bi5mb3JFYWNoKChmdW5jdGlvbihuLGEpe3ZhciBpPUx0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07bnVsbD09ZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdJiYoZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdPXtvcmlnaW5hbE5hbWU6bitcIi9tXCIsdmFyaWFibGU6WmUoKGZ1bmN0aW9uKCl7cmV0dXJuIFhuKGkpLnZhcmlhYmxlKCExKX0pKX0pLG51bGw9PWUuYWNjdW11bGF0ZWRTZWNvbmRNb21lbnRbYV0mJihlLmFjY3VtdWxhdGVkU2Vjb25kTW9tZW50W2FdPXtvcmlnaW5hbE5hbWU6bitcIi92XCIsdmFyaWFibGU6WmUoKGZ1bmN0aW9uKCl7cmV0dXJuIFhuKGkpLnZhcmlhYmxlKCExKX0pKX0pO3ZhciBzPUFycmF5LmlzQXJyYXkodCk/dFthXS50ZW5zb3I6dFtuXTtpZihudWxsIT1zKXt2YXIgdT1lLmFjY3VtdWxhdGVkRmlyc3RNb21lbnRbYV0udmFyaWFibGUsYz1lLmFjY3VtdWxhdGVkU2Vjb25kTW9tZW50W2FdLnZhcmlhYmxlLGw9dS5tdWwoZS5iZXRhMSkuYWRkKHMubXVsKDEtZS5iZXRhMSkpLGg9Yy5tdWwoZS5iZXRhMikuYWRkKHMuc3F1YXJlKCkubXVsKDEtZS5iZXRhMikpLGY9bC5kaXYociksZD1oLmRpdihvKTt1LmFzc2lnbihsKSxjLmFzc2lnbihoKTt2YXIgcD1mLmRpdihkLnNxcnQoKS5hZGQoZS5lcHNpbG9uKSkubXVsKC1lLmxlYXJuaW5nUmF0ZSkuYWRkKGkpO2kuYXNzaWduKHApfX0pKSxlLmFjY0JldGExLmFzc2lnbihlLmFjY0JldGExLm11bChlLmJldGExKSksZS5hY2NCZXRhMi5hc3NpZ24oZS5hY2NCZXRhMi5tdWwoZS5iZXRhMikpfSkpLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5hY2NCZXRhMS5kaXNwb3NlKCksdGhpcy5hY2NCZXRhMi5kaXNwb3NlKCksbnVsbCE9dGhpcy5hY2N1bXVsYXRlZEZpcnN0TW9tZW50JiZ0bih0aGlzLmFjY3VtdWxhdGVkRmlyc3RNb21lbnQubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSksbnVsbCE9dGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudCYmdG4odGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0LnZhcmlhYmxlfSkpKX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybiB0PXRoaXMuYWNjdW11bGF0ZWRGaXJzdE1vbWVudC5jb25jYXQodGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudCksWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW2Uuc2VudCgpXS5jb25jYXQodC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntuYW1lOnQub3JpZ2luYWxOYW1lLHRlbnNvcjp0LnZhcmlhYmxlfX0pKSldfX0pKX0pKX0sby5wcm90b3R5cGUuc2V0V2VpZ2h0cz1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzO3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5leHRyYWN0SXRlcmF0aW9ucyh0KV07Y2FzZSAxOnJldHVybiB0PXIuc2VudCgpLFplKChmdW5jdGlvbigpe24uYWNjQmV0YTEuYXNzaWduKHhjKG4uYmV0YTEsbi5pdGVyYXRpb25zXysxKSksbi5hY2NCZXRhMi5hc3NpZ24oeGMobi5iZXRhMixuLml0ZXJhdGlvbnNfKzEpKX0pKSxlPXQubGVuZ3RoLzIsITEsdGhpcy5hY2N1bXVsYXRlZEZpcnN0TW9tZW50PXQuc2xpY2UoMCxlKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSksdGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudD10LnNsaWNlKGUsMiplKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSksWzJdfX0pKX0pKX0sby5wcm90b3R5cGUuZ2V0Q29uZmlnPWZ1bmN0aW9uKCl7cmV0dXJue2xlYXJuaW5nUmF0ZTp0aGlzLmxlYXJuaW5nUmF0ZSxiZXRhMTp0aGlzLmJldGExLGJldGEyOnRoaXMuYmV0YTIsZXBzaWxvbjp0aGlzLmVwc2lsb259fSxvLmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZS5sZWFybmluZ1JhdGUsZS5iZXRhMSxlLmJldGEyLGUuZXBzaWxvbil9LG8uY2xhc3NOYW1lPVwiQWRhbVwiLG99KHhkKTtjZChDZCk7dmFyIEVkPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG8oZSxuLHIsbyxhKXt2b2lkIDA9PT1vJiYobz1udWxsKSx2b2lkIDA9PT1hJiYoYT0wKTt2YXIgaT10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIGkubGVhcm5pbmdSYXRlPWUsaS5iZXRhMT1uLGkuYmV0YTI9cixpLmVwc2lsb249byxpLmRlY2F5PWEsaS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50PVtdLGkuYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm09W10sWmUoKGZ1bmN0aW9uKCl7aS5pdGVyYXRpb249T24oMCkudmFyaWFibGUoKSxpLmFjY0JldGExPU9uKG4pLnZhcmlhYmxlKCl9KSksbnVsbD09byYmKGkuZXBzaWxvbj1MdC5iYWNrZW5kLmVwc2lsb24oKSksaX1yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1BcnJheS5pc0FycmF5KHQpP3QubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC5uYW1lfSkpOk9iamVjdC5rZXlzKHQpO1plKChmdW5jdGlvbigpe3ZhciByPUNjKDEsZS5hY2NCZXRhMSksbz1zYygtZS5sZWFybmluZ1JhdGUsZS5pdGVyYXRpb24ubXVsKGUuZGVjYXkpLmFkZCgxKSk7bi5mb3JFYWNoKChmdW5jdGlvbihuLGEpe3ZhciBpPUx0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07bnVsbD09ZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdJiYoZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdPXtvcmlnaW5hbE5hbWU6bitcIi9tXCIsdmFyaWFibGU6WG4oaSkudmFyaWFibGUoITEpfSksbnVsbD09ZS5hY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybVthXSYmKGUuYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm1bYV09e29yaWdpbmFsTmFtZTpuK1wiL3ZcIix2YXJpYWJsZTpYbihpKS52YXJpYWJsZSghMSl9KTt2YXIgcz1BcnJheS5pc0FycmF5KHQpP3RbYV0udGVuc29yOnRbbl07aWYobnVsbCE9cyl7dmFyIHU9ZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdLnZhcmlhYmxlLGM9ZS5hY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybVthXS52YXJpYWJsZSxsPXUubXVsKGUuYmV0YTEpLmFkZChzLm11bCgxLWUuYmV0YTEpKSxoPWMubXVsKGUuYmV0YTIpLGY9cy5hYnMoKSxkPWgubWF4aW11bShmKTt1LmFzc2lnbihsKSxjLmFzc2lnbihkKTt2YXIgcD1vLmRpdihyKS5tdWwobC5kaXYoZC5hZGQoZS5lcHNpbG9uKSkpLmFkZChpKTtpLmFzc2lnbihwKX19KSksZS5pdGVyYXRpb24uYXNzaWduKGUuaXRlcmF0aW9uLmFkZCgxKSksZS5hY2NCZXRhMS5hc3NpZ24oZS5hY2NCZXRhMS5tdWwoZS5iZXRhMSkpfSkpLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5hY2NCZXRhMS5kaXNwb3NlKCksdGhpcy5pdGVyYXRpb24uZGlzcG9zZSgpLG51bGwhPXRoaXMuYWNjdW11bGF0ZWRGaXJzdE1vbWVudCYmdG4odGhpcy5hY2N1bXVsYXRlZEZpcnN0TW9tZW50Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSkpLG51bGwhPXRoaXMuYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm0mJnRuKHRoaXMuYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm0ubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSl9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiZ2V0V2VpZ2h0cygpIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgQWRhbWF4IHlldC5cIil9KSl9KSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcInNldFdlaWdodHMoKSBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIEFkYW1heCB5ZXQuXCIpfSkpfSkpfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLGJldGExOnRoaXMuYmV0YTEsYmV0YTI6dGhpcy5iZXRhMixlcHNpbG9uOnRoaXMuZXBzaWxvbixkZWNheTp0aGlzLmRlY2F5fX0sby5mcm9tQ29uZmlnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyB0KGUubGVhcm5pbmdSYXRlLGUuYmV0YTEsZS5iZXRhMixlLmVwc2lsb24sZS5kZWNheSl9LG8uY2xhc3NOYW1lPVwiQWRhbWF4XCIsb30oeGQpO2NkKEVkKTt2YXIgUmQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlKXt2YXIgbj10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG4ubGVhcm5pbmdSYXRlPWUsbi5zZXRMZWFybmluZ1JhdGUoZSksbn1yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7KEFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSk6T2JqZWN0LmtleXModCkpLmZvckVhY2goKGZ1bmN0aW9uKG4scil7dmFyIG89QXJyYXkuaXNBcnJheSh0KT90W3JdLnRlbnNvcjp0W25dO2lmKG51bGwhPW8pe3ZhciBhPUx0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07WmUoKGZ1bmN0aW9uKCl7dmFyIHQ9ZS5jLm11bChvKS5hZGQoYSk7YS5hc3NpZ24odCl9KSl9fSkpLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5zZXRMZWFybmluZ1JhdGU9ZnVuY3Rpb24odCl7dGhpcy5sZWFybmluZ1JhdGU9dCxudWxsIT10aGlzLmMmJnRoaXMuYy5kaXNwb3NlKCksdGhpcy5jPWVuKE9uKC10KSl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmMuZGlzcG9zZSgpfSxvLnByb3RvdHlwZS5nZXRXZWlnaHRzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW3Quc2VudCgpXV19fSkpfSkpfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCwoZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLChmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZXh0cmFjdEl0ZXJhdGlvbnModCldO2Nhc2UgMTppZigwIT09KHQ9ZS5zZW50KCkpLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJTR0Qgb3B0aW1pemVyIGRvZXMgbm90IGhhdmUgc2V0dGFibGUgd2VpZ2h0cy5cIik7cmV0dXJuWzJdfX0pKX0pKX0sby5wcm90b3R5cGUuZ2V0Q29uZmlnPWZ1bmN0aW9uKCl7cmV0dXJue2xlYXJuaW5nUmF0ZTp0aGlzLmxlYXJuaW5nUmF0ZX19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSl9LG8uY2xhc3NOYW1lPVwiU0dEXCIsb30oeGQpO2NkKFJkKTt2YXIgSWQ9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4scil7dm9pZCAwPT09ciYmKHI9ITEpO3ZhciBvPXQuY2FsbCh0aGlzLGUpfHx0aGlzO3JldHVybiBvLmxlYXJuaW5nUmF0ZT1lLG8ubW9tZW50dW09bixvLnVzZU5lc3Rlcm92PXIsby5hY2N1bXVsYXRpb25zPVtdLG8ubT1PbihvLm1vbWVudHVtKSxvfXJldHVybiBlKG8sdCksby5wcm90b3R5cGUuYXBwbHlHcmFkaWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpczsoQXJyYXkuaXNBcnJheSh0KT90Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pKTpPYmplY3Qua2V5cyh0KSkuZm9yRWFjaCgoZnVuY3Rpb24obixyKXt2YXIgbz1MdC5yZWdpc3RlcmVkVmFyaWFibGVzW25dO2lmKG51bGw9PWUuYWNjdW11bGF0aW9uc1tyXSl7ZS5hY2N1bXVsYXRpb25zW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9tb21lbnR1bVwiLHZhcmlhYmxlOlplKChmdW5jdGlvbigpe3JldHVybiBYbihvKS52YXJpYWJsZSghMSl9KSl9fXZhciBhPWUuYWNjdW11bGF0aW9uc1tyXS52YXJpYWJsZSxpPUFycmF5LmlzQXJyYXkodCk/dFtyXS50ZW5zb3I6dFtuXTtudWxsIT1pJiZaZSgoZnVuY3Rpb24oKXt2YXIgdCxuPWUubS5tdWwoYSkuYWRkKGkpO3Q9ZS51c2VOZXN0ZXJvdj9lLmMubXVsKGkuYWRkKG4ubXVsKGUubSkpKS5hZGQobyk6ZS5jLm11bChuKS5hZGQobyksYS5hc3NpZ24obiksby5hc3NpZ24odCl9KSl9KSksdGhpcy5pbmNyZW1lbnRJdGVyYXRpb25zKCl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLm0uZGlzcG9zZSgpLG51bGwhPXRoaXMuYWNjdW11bGF0aW9ucyYmdG4odGhpcy5hY2N1bXVsYXRpb25zLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSkpfSxvLnByb3RvdHlwZS5zZXRNb21lbnR1bT1mdW5jdGlvbih0KXt0aGlzLm1vbWVudHVtPXR9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24odCl7c3dpdGNoKHQubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLnNhdmVJdGVyYXRpb25zKCldO2Nhc2UgMTpyZXR1cm5bMixbdC5zZW50KCldLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGlvbnMubWFwKChmdW5jdGlvbih0KXtyZXR1cm57bmFtZTp0Lm9yaWdpbmFsTmFtZSx0ZW5zb3I6dC52YXJpYWJsZX19KSkpXX19KSl9KSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5leHRyYWN0SXRlcmF0aW9ucyh0KV07Y2FzZSAxOnJldHVybiB0PWUuc2VudCgpLCExLHRoaXMuYWNjdW11bGF0aW9ucz10Lm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pKSxbMl19fSkpfSkpfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLG1vbWVudHVtOnRoaXMubW9tZW50dW0sdXNlTmVzdGVyb3Y6dGhpcy51c2VOZXN0ZXJvdn19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSxlLm1vbWVudHVtLGUudXNlTmVzdGVyb3YpfSxvLmNsYXNzTmFtZT1cIk1vbWVudHVtXCIsb30oUmQpO2NkKElkKTt2YXIga2Q9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4scixvLGEpe3ZvaWQgMD09PW4mJihuPS45KSx2b2lkIDA9PT1yJiYocj0wKSx2b2lkIDA9PT1vJiYobz1udWxsKSx2b2lkIDA9PT1hJiYoYT0hMSk7dmFyIGk9dC5jYWxsKHRoaXMpfHx0aGlzO2lmKGkubGVhcm5pbmdSYXRlPWUsaS5kZWNheT1uLGkubW9tZW50dW09cixpLmVwc2lsb249byxpLmFjY3VtdWxhdGVkTWVhblNxdWFyZXM9W10saS5hY2N1bXVsYXRlZE1vbWVudHM9W10saS5hY2N1bXVsYXRlZE1lYW5HcmFkcz1bXSxpLmNlbnRlcmVkPWEsbnVsbD09byYmKGkuZXBzaWxvbj1MdC5iYWNrZW5kLmVwc2lsb24oKSksbnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJsZWFybmluZ1JhdGUgZm9yIFJNU1Byb3BPcHRpbWl6ZXIgbXVzdCBiZSBkZWZpbmVkLlwiKTtyZXR1cm4gaX1yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7KEFycmF5LmlzQXJyYXkodCk/dC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSk6T2JqZWN0LmtleXModCkpLmZvckVhY2goKGZ1bmN0aW9uKG4scil7dmFyIG89THQucmVnaXN0ZXJlZFZhcmlhYmxlc1tuXTtudWxsPT1lLmFjY3VtdWxhdGVkTWVhblNxdWFyZXNbcl0mJihlLmFjY3VtdWxhdGVkTWVhblNxdWFyZXNbcl09e29yaWdpbmFsTmFtZTpuK1wiL3Jtc1wiLHZhcmlhYmxlOlplKChmdW5jdGlvbigpe3JldHVybiBYbihvKS52YXJpYWJsZSghMSl9KSl9KSxudWxsPT1lLmFjY3VtdWxhdGVkTW9tZW50c1tyXSYmKGUuYWNjdW11bGF0ZWRNb21lbnRzW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9tb21lbnR1bVwiLHZhcmlhYmxlOlplKChmdW5jdGlvbigpe3JldHVybiBYbihvKS52YXJpYWJsZSghMSl9KSl9KSxudWxsPT1lLmFjY3VtdWxhdGVkTWVhbkdyYWRzW3JdJiZlLmNlbnRlcmVkJiYoZS5hY2N1bXVsYXRlZE1lYW5HcmFkc1tyXT17b3JpZ2luYWxOYW1lOm4rXCIvbWdcIix2YXJpYWJsZTpaZSgoZnVuY3Rpb24oKXtyZXR1cm4gWG4obykudmFyaWFibGUoITEpfSkpfSk7dmFyIGE9QXJyYXkuaXNBcnJheSh0KT90W3JdLnRlbnNvcjp0W25dO2lmKG51bGwhPWEpe3ZhciBpPWUuYWNjdW11bGF0ZWRNZWFuU3F1YXJlc1tyXS52YXJpYWJsZSxzPWUuYWNjdW11bGF0ZWRNb21lbnRzW3JdLnZhcmlhYmxlO1plKChmdW5jdGlvbigpe3ZhciB0PWkubXVsKGUuZGVjYXkpLmFkZChhLnNxdWFyZSgpLm11bCgxLWUuZGVjYXkpKTtpZihlLmNlbnRlcmVkKXt2YXIgbj1lLmFjY3VtdWxhdGVkTWVhbkdyYWRzW3JdLnZhcmlhYmxlLHU9bi5tdWwoZS5kZWNheSkuYWRkKGEubXVsKDEtZS5kZWNheSkpLGM9cy5tdWwoZS5tb21lbnR1bSkuYWRkKGEubXVsKGUubGVhcm5pbmdSYXRlKS5kaXYodC5zdWIodS5zcXVhcmUoKS5hZGQoZS5lcHNpbG9uKSkuc3FydCgpKSk7aS5hc3NpZ24odCksbi5hc3NpZ24odSkscy5hc3NpZ24oYyk7dmFyIGw9by5zdWIoYyk7by5hc3NpZ24obCl9ZWxzZXt2YXIgaD1pLm11bChlLmRlY2F5KS5hZGQoYS5zcXVhcmUoKS5tdWwoMS1lLmRlY2F5KSk7Yz1zLm11bChlLm1vbWVudHVtKS5hZGQoYS5tdWwoZS5sZWFybmluZ1JhdGUpLmRpdihoLmFkZChlLmVwc2lsb24pLnNxcnQoKSkpO2kuYXNzaWduKGgpLHMuYXNzaWduKGMpO2w9by5zdWIoYyk7by5hc3NpZ24obCl9fSkpfX0pKSx0aGlzLmluY3JlbWVudEl0ZXJhdGlvbnMoKX0sby5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe251bGwhPXRoaXMuYWNjdW11bGF0ZWRNZWFuU3F1YXJlcyYmdG4odGhpcy5hY2N1bXVsYXRlZE1lYW5TcXVhcmVzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSkpLG51bGwhPXRoaXMuYWNjdW11bGF0ZWRNZWFuR3JhZHMmJnRoaXMuY2VudGVyZWQmJnRuKHRoaXMuYWNjdW11bGF0ZWRNZWFuR3JhZHMubWFwKChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSksbnVsbCE9dGhpcy5hY2N1bXVsYXRlZE1vbWVudHMmJnRuKHRoaXMuYWNjdW11bGF0ZWRNb21lbnRzLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSkpfSxvLnByb3RvdHlwZS5nZXRXZWlnaHRzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLChmdW5jdGlvbigpe3ZhciB0O3JldHVybiByKHRoaXMsKGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHQ9dGhpcy5hY2N1bXVsYXRlZE1lYW5TcXVhcmVzLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGVkTW9tZW50cyksdGhpcy5jZW50ZXJlZCYmdC5wdXNoLmFwcGx5KHQsdGhpcy5hY2N1bXVsYXRlZE1lYW5HcmFkcyksWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW2Uuc2VudCgpXS5jb25jYXQodC5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntuYW1lOnQub3JpZ2luYWxOYW1lLHRlbnNvcjp0LnZhcmlhYmxlfX0pKSldfX0pKX0pKX0sby5wcm90b3R5cGUuc2V0V2VpZ2h0cz1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsKGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIHIodGhpcywoZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmV4dHJhY3RJdGVyYXRpb25zKHQpXTtjYXNlIDE6cmV0dXJuIHQ9bi5zZW50KCksZT10aGlzLmNlbnRlcmVkP3QubGVuZ3RoLzM6dC5sZW5ndGgvMiwhMSx0aGlzLmFjY3VtdWxhdGVkTWVhblNxdWFyZXM9dC5zbGljZSgwLGUpLm1hcCgoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pKSx0aGlzLmFjY3VtdWxhdGVkTW9tZW50cz10LnNsaWNlKGUsMiplKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSksdGhpcy5jZW50ZXJlZCYmKHRoaXMuYWNjdW11bGF0ZWRNZWFuR3JhZHM9dC5zbGljZSgyKmUsMyplKS5tYXAoKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSkpLFsyXX19KSl9KSl9LG8ucHJvdG90eXBlLmdldENvbmZpZz1mdW5jdGlvbigpe3JldHVybntsZWFybmluZ1JhdGU6dGhpcy5sZWFybmluZ1JhdGUsZGVjYXk6dGhpcy5kZWNheSxtb21lbnR1bTp0aGlzLm1vbWVudHVtLGVwc2lsb246dGhpcy5lcHNpbG9uLGNlbnRlcmVkOnRoaXMuY2VudGVyZWR9fSxvLmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZS5sZWFybmluZ1JhdGUsZS5kZWNheSxlLm1vbWVudHVtLGUuZXBzaWxvbixlLmNlbnRlcmVkKX0sby5jbGFzc05hbWU9XCJSTVNQcm9wXCIsb30oeGQpO2NkKGtkKTt2YXIgU2Q9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXJldHVybiB0LnNnZD1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IFJkKHQpfSx0Lm1vbWVudHVtPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49ITEpLG5ldyBJZCh0LGUsbil9LHQucm1zcHJvcD1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB2b2lkIDA9PT1lJiYoZT0uOSksdm9pZCAwPT09biYmKG49MCksdm9pZCAwPT09ciYmKHI9bnVsbCksdm9pZCAwPT09byYmKG89ITEpLG5ldyBrZCh0LGUsbixyLG8pfSx0LmFkYW09ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHZvaWQgMD09PXQmJih0PS4wMDEpLHZvaWQgMD09PWUmJihlPS45KSx2b2lkIDA9PT1uJiYobj0uOTk5KSx2b2lkIDA9PT1yJiYocj1udWxsKSxuZXcgQ2QodCxlLG4scil9LHQuYWRhZGVsdGE9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT10JiYodD0uMDAxKSx2b2lkIDA9PT1lJiYoZT0uOTUpLHZvaWQgMD09PW4mJihuPW51bGwpLG5ldyBiZCh0LGUsbil9LHQuYWRhbWF4PWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHZvaWQgMD09PXQmJih0PS4wMDIpLHZvaWQgMD09PWUmJihlPS45KSx2b2lkIDA9PT1uJiYobj0uOTk5KSx2b2lkIDA9PT1yJiYocj1udWxsKSx2b2lkIDA9PT1vJiYobz0wKSxuZXcgRWQodCxlLG4scixvKX0sdC5hZGFncmFkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPS4xKSxuZXcgd2QodCxlKX0sdH0oKSxBZD17c2dkOlNkLnNnZCxtb21lbnR1bTpTZC5tb21lbnR1bSxhZGFkZWx0YTpTZC5hZGFkZWx0YSxhZGFncmFkOlNkLmFkYWdyYWQscm1zcHJvcDpTZC5ybXNwcm9wLGFkYW1heDpTZC5hZGFtYXgsYWRhbTpTZC5hZGFtfSxEZD1cInVuZGVmaW5lZFwiIT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCgpfTtmdW5jdGlvbiBUZCgpe3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24odCl7cmV0dXJuIERkKChmdW5jdGlvbigpe3JldHVybiB0KCl9KSl9KSl9d3QucHJvdG90eXBlLnNxdWFyZWREaWZmZXJlbmNlPWZ1bmN0aW9uKHQpe3JldHVybiBudSh0aGlzLHQpfSx4dD1HaDtleHBvcnR7YmQgYXMgQWRhZGVsdGFPcHRpbWl6ZXIsd2QgYXMgQWRhZ3JhZE9wdGltaXplcixDZCBhcyBBZGFtT3B0aW1pemVyLEVkIGFzIEFkYW1heE9wdGltaXplcix4byBhcyBEYXRhU3RvcmFnZSxzIGFzIEVOVixvIGFzIEVudmlyb25tZW50LGJvIGFzIEtlcm5lbEJhY2tlbmQsSWQgYXMgTW9tZW50dW1PcHRpbWl6ZXIseGQgYXMgT3B0aW1pemVyLGtkIGFzIFJNU1Byb3BPcHRpbWl6ZXIsQ3QgYXMgUmFuayxjaCBhcyBSZWR1Y3Rpb24sUmQgYXMgU0dET3B0aW1pemVyLHd0IGFzIFRlbnNvcixndCBhcyBUZW5zb3JCdWZmZXIsU3QgYXMgVmFyaWFibGUscnUgYXMgYWJzLG91IGFzIGFjb3MsYXUgYXMgYWNvc2gscmMgYXMgYWRkLG9jIGFzIGFkZE4sYWMgYXMgYWRkU3RyaWN0LENsIGFzIGFsbCxFbCBhcyBhbnksUmwgYXMgYXJnTWF4LElsIGFzIGFyZ01pbixpdSBhcyBhc2luLHN1IGFzIGFzaW5oLHV1IGFzIGF0YW4saWMgYXMgYXRhbjIsY3UgYXMgYXRhbmgsZmwgYXMgYXZnUG9vbCx2bCBhcyBhdmdQb29sM2QsaG4gYXMgYmFja2VuZCxVbyBhcyBiYWNrZW5kX3V0aWwsemwgYXMgYmFzaWNMU1RNQ2VsbCxqdSBhcyBiYXRjaE5vcm0sWHUgYXMgYmF0Y2hOb3JtMmQsWXUgYXMgYmF0Y2hOb3JtM2QsJHUgYXMgYmF0Y2hOb3JtNGQsS3UgYXMgYmF0Y2hOb3JtYWxpemF0aW9uLEd1IGFzIGJhdGNoTm9ybWFsaXphdGlvbjJkLEh1IGFzIGJhdGNoTm9ybWFsaXphdGlvbjNkLHF1IGFzIGJhdGNoTm9ybWFsaXphdGlvbjRkLHZyIGFzIGJhdGNoVG9TcGFjZU5ELFVjIGFzIGJvb2xlYW5NYXNrQXN5bmMsbXIgYXMgYnJvYWRjYXN0VG8saWQgYXMgYnJvd3NlcixkciBhcyBidWZmZXIsZ3IgYXMgY2FzdCxsdSBhcyBjZWlsLGh1IGFzIGNsaXBCeVZhbHVlLHlyIGFzIGNsb25lLERuIGFzIGNvbXBsZXgsWW4gYXMgY29uY2F0LCRuIGFzIGNvbmNhdDFkLFFuIGFzIGNvbmNhdDJkLEpuIGFzIGNvbmNhdDNkLFpuIGFzIGNvbmNhdDRkLEhjIGFzIGNvbnYxZCxxYyBhcyBjb252MmQsWmMgYXMgY29udjJkVHJhbnNwb3NlLEtjIGFzIGNvbnYzZCx0bCBhcyBjb252M2RUcmFuc3Bvc2UsZnUgYXMgY29zLGR1IGFzIGNvc2gseHIgYXMgY3Vtc3VtLHZvIGFzIGN1c3RvbUdyYWQsWGUgYXMgZGVwcmVjYXRpb25XYXJuLGJyIGFzIGRlcHRoVG9TcGFjZSxZYyBhcyBkZXB0aHdpc2VDb252MmQsZWggYXMgZGlhZyxqZSBhcyBkaXNhYmxlRGVwcmVjYXRpb25XYXJuaW5ncyx0biBhcyBkaXNwb3NlLFllIGFzIGRpc3Bvc2VWYXJpYWJsZXMsc2MgYXMgZGl2LHVjIGFzIGRpdk5vTmFuLGNjIGFzIGRpdlN0cmljdCxubCBhcyBkb3QsbmggYXMgZHJvcG91dCxfbCBhcyBlbHUsS2UgYXMgZW5hYmxlRGVidWdNb2RlLHFlIGFzIGVuYWJsZVByb2RNb2RlLCRlIGFzIGVuZ2luZSxpIGFzIGVudixSYyBhcyBlcXVhbCxJYyBhcyBlcXVhbFN0cmljdCxwdSBhcyBlcmYsdnUgYXMgZXhwLHdyIGFzIGV4cGFuZERpbXMsbXUgYXMgZXhwbTEsQ3IgYXMgZXllLFhsIGFzIGZmdCxIbiBhcyBmaWxsLHVuIGFzIGZpbmRCYWNrZW5kLGNuIGFzIGZpbmRCYWNrZW5kRmFjdG9yeSxndSBhcyBmbG9vcixsYyBhcyBmbG9vckRpdixpaCBhcyBmcmFtZSx6aCBhcyBmdXNlZCxMYyBhcyBnYXRoZXIsdGggYXMgZ2F0aGVyTkQsWHIgYXMgZ2F0aGVyX3V0aWwsYW4gYXMgZ2V0QmFja2VuZCxoIGFzIGdldEdyYWRpZW50LGwgYXMgZ2V0S2VybmVsLGYgYXMgZ2V0S2VybmVsc0ZvckJhY2tlbmQsY28gYXMgZ3JhZCxsbyBhcyBncmFkcyxrYyBhcyBncmVhdGVyLFNjIGFzIGdyZWF0ZXJFcXVhbCxBYyBhcyBncmVhdGVyRXF1YWxTdHJpY3QsRGMgYXMgZ3JlYXRlclN0cmljdCxhaCBhcyBoYW1taW5nV2luZG93LG9oIGFzIGhhbm5XaW5kb3csWWwgYXMgaWZmdCxObiBhcyBpbWFnLE9oIGFzIGltYWdlLGxoIGFzIGluVG9wS0FzeW5jLGVkIGFzIGlvLFFsIGFzIGlyZmZ0LER1IGFzIGlzRmluaXRlLEF1IGFzIGlzSW5mLFN1IGFzIGlzTmFOLGVuIGFzIGtlZXAsT2wgYXMgbGVha3lSZWx1LFRjIGFzIGxlc3MsTmMgYXMgbGVzc0VxdWFsLEZjIGFzIGxlc3NFcXVhbFN0cmljdCxfYyBhcyBsZXNzU3RyaWN0LEloIGFzIGxpbmFsZyxxbiBhcyBsaW5zcGFjZSxVbCBhcyBsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbix5dSBhcyBsb2cseHUgYXMgbG9nMXAsYnUgYXMgbG9nU2lnbW9pZCx5byBhcyBsb2dTb2Z0bWF4LGtsIGFzIGxvZ1N1bUV4cCxRdSBhcyBsb2dpY2FsQW5kLEp1IGFzIGxvZ2ljYWxOb3QsWnUgYXMgbG9naWNhbE9yLHRjIGFzIGxvZ2ljYWxYb3IsYmggYXMgbG9zc2VzLGVsIGFzIG1hdE11bCxvZCBhcyBtYXRoLFNsIGFzIG1heCxobCBhcyBtYXhQb29sLHBsIGFzIG1heFBvb2wzZCxoYyBhcyBtYXhpbXVtLGZjIGFzIG1heGltdW1TdHJpY3QsQWwgYXMgbWVhbixRZSBhcyBtZW1vcnksRGwgYXMgbWluLGRjIGFzIG1pbmltdW0scGMgYXMgbWluaW11bVN0cmljdCx2YyBhcyBtb2QsbWMgYXMgbW9kU3RyaWN0LFRsIGFzIG1vbWVudHMsSGwgYXMgbW92aW5nQXZlcmFnZSxnYyBhcyBtdWwseWMgYXMgbXVsU3RyaWN0LEdsIGFzIG11bHRpUk5OQ2VsbCxFciBhcyBtdWx0aW5vbWlhbCx3dSBhcyBuZWcsVGQgYXMgbmV4dEZyYW1lLFZsIGFzIG5vcm0sT2MgYXMgbm90RXF1YWwsTWMgYXMgbm90RXF1YWxTdHJpY3QsUnIgYXMgb25lSG90LHpuIGFzIG9uZXMsam4gYXMgb25lc0xpa2UsQW4gYXMgb3AscmwgYXMgb3V0ZXJQcm9kdWN0LElyIGFzIHBhZCxrciBhcyBwYWQxZCxTciBhcyBwYWQyZCxBciBhcyBwYWQzZCxEciBhcyBwYWQ0ZCxkbCBhcyBwb29sLHhjIGFzIHBvdyxiYyBhcyBwb3dTdHJpY3QsTWwgYXMgcHJlbHUscHIgYXMgcHJpbnQsRmwgYXMgcHJvZCxKZSBhcyBwcm9maWxlLFRyIGFzIHJhbmQsRnIgYXMgcmFuZG9tR2FtbWEsTnIgYXMgcmFuZG9tTm9ybWFsLF9yIGFzIHJhbmRvbVVuaWZvcm0sS24gYXMgcmFuZ2Usb24gYXMgcmVhZHksVG4gYXMgcmVhbCxDdSBhcyByZWNpcHJvY2FsLGxuIGFzIHJlZ2lzdGVyQmFja2VuZCxwIGFzIHJlZ2lzdGVyR3JhZGllbnQsZCBhcyByZWdpc3Rlcktlcm5lbCxCbCBhcyByZWx1LFBsIGFzIHJlbHU2LHNuIGFzIHJlbW92ZUJhY2tlbmQsT3IgYXMgcmVzaGFwZSxvbCBhcyByZXZlcnNlLGFsIGFzIHJldmVyc2UxZCxpbCBhcyByZXZlcnNlMmQsc2wgYXMgcmV2ZXJzZTNkLHVsIGFzIHJldmVyc2U0ZCwkbCBhcyByZmZ0LEV1IGFzIHJvdW5kLFJ1IGFzIHJzcXJ0LE9uIGFzIHNjYWxhcixqbCBhcyBzY2F0dGVyTkQsdG8gYXMgc2NhdHRlcl91dGlsLExsIGFzIHNlbHUsSmMgYXMgc2VwYXJhYmxlQ29udjJkLGxkIGFzIHNlcmlhbGl6YXRpb24scm4gYXMgc2V0QmFja2VuZCxmbiBhcyBzZXRQbGF0Zm9ybSxWciBhcyBzZXRkaWZmMWRBc3luYyxJdSBhcyBzaWdtb2lkLGt1IGFzIHNpZ24sdWggYXMgc2lnbmFsLFR1IGFzIHNpbixOdSBhcyBzaW5oLG1sIGFzIHNsaWNlLGdsIGFzIHNsaWNlMWQseWwgYXMgc2xpY2UyZCx4bCBhcyBzbGljZTNkLGJsIGFzIHNsaWNlNGQsdW8gYXMgc2xpY2VfdXRpbCxnbyBhcyBzb2Z0bWF4LEZ1IGFzIHNvZnRwbHVzLE1yIGFzIHNwYWNlVG9CYXRjaE5ELFpsIGFzIHNwYXJzZVRvRGVuc2UsSmwgYXMgc3BlY3RyYWwsdHIgYXMgc3BsaXQsX3UgYXMgc3FydCx0dSBhcyBzcXVhcmUsbnUgYXMgc3F1YXJlZERpZmZlcmVuY2Usd2MgYXMgc3F1YXJlZERpZmZlcmVuY2VTdHJpY3QsQnIgYXMgc3F1ZWV6ZSxQciBhcyBzdGFjayxPdSBhcyBzdGVwLHNoIGFzIHN0ZnQscWwgYXMgc3RyaWRlZFNsaWNlLENjIGFzIHN1YixFYyBhcyBzdWJTdHJpY3QsTmwgYXMgc3VtLFR0IGFzIHN1bU91dFR5cGUsTXUgYXMgdGFuLEJ1IGFzIHRhbmgsRm4gYXMgdGVuc29yLE1uIGFzIHRlbnNvcjFkLEJuIGFzIHRlbnNvcjJkLFBuIGFzIHRlbnNvcjNkLExuIGFzIHRlbnNvcjRkLFduIGFzIHRlbnNvcjVkLFVuIGFzIHRlbnNvcjZkLE10IGFzIHRlbnNvcl91dGlsLG1kIGFzIHRlc3RfdXRpbCxaZSBhcyB0aWR5LExyIGFzIHRpbGUsbm4gYXMgdGltZSxLbCBhcyB0b3BrLEFkIGFzIHRyYWluLFdsIGFzIHRyYW5zcG9zZSxXciBhcyB0cnVuY2F0ZWROb3JtYWwsbSBhcyB1bnJlZ2lzdGVyR3JhZGllbnQsdiBhcyB1bnJlZ2lzdGVyS2VybmVsLFdjIGFzIHVuc29ydGVkU2VnbWVudFN1bSxVciBhcyB1bnN0YWNrLHN0IGFzIHV0aWwsaG8gYXMgdmFsdWVBbmRHcmFkLGZvIGFzIHZhbHVlQW5kR3JhZHMsVm4gYXMgdmFyaWFibGUscG8gYXMgdmFyaWFibGVHcmFkcyxnZCBhcyB2ZXJzaW9uX2NvcmUseWQgYXMgd2ViZ2wsZWMgYXMgd2hlcmUsbmMgYXMgd2hlcmVBc3luYyxHbiBhcyB6ZXJvcyxYbiBhcyB6ZXJvc0xpa2V9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGYtY29yZS5lc20uanMubWFwXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHA1OyIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJpbXBvcnQgKiBhcyB0ZmMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbmltcG9ydCAqIGFzIHA1IGZyb20gJ3A1JztcblxuXG4vKipcbiAqIEEgY2xhc3MgdG8gZGVzY3JpYmUgYSB0ZW5zb3IsIGEgZ2VuZXJhbGl6YXRpb24gb2YgdmVjdG9ycyBhbmQgbWF0cmljZXMuXG4gKiBUZW5zb3JzIGNhbiBiZSB0aG91Z2h0IG9mIGFzIChwb3NzaWJseSkgbXVsdGlkaW1lbnNpb25hbCBhcnJheXMgdGhhdCBzdXBwb3J0XG4gKiBtYW55IHVzZWZ1bCBvcGVyYXRpb25zLiBUaGV5IGFyZSBhcHBsaWVkIHRocm91Z2hvdXQgbWF0aGVtYXRpY3MsIHBoeXNpY3MsXG4gKiBlbmdpbmVlcmluZywgYW5kIGNvbXB1dGVyIHNjaWVuY2UuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW5zb3Ige1xuICBwdWJsaWMgdGVuc29yOiB0ZmMuVGVuc29yO1xuXG4gIHByaXZhdGUgaXNDb21wbGV4OiBib29sZWFuID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBuZXcgdGVuc29yIG9iamVjdC5cbiAgICpcbiAgICogQHBhcmFtIHggdGhlIG51bWVyaWNhbCBvYmplY3QgdXNlZCB0byBjcmVhdGUgdGhlIHRlbnNvclxuICAgKi9cbiAgY29uc3RydWN0b3IoeDogbnVtYmVyIHwgbnVtYmVyW10gfCBwNS5WZWN0b3IgfCB0ZmMuVGVuc29yIHwgVGVuc29yKSB7XG4gICAgaWYgKHR5cGVvZiB4ID09PSAnbnVtYmVyJykge1xuICAgICAgdGhpcy50ZW5zb3IgPSB0ZmMuc2NhbGFyKHgpO1xuICAgIH0gZWxzZSBpZiAoeCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICB0aGlzLnRlbnNvciA9IHRmYy50ZW5zb3IoeCk7XG4gICAgfSBlbHNlIGlmICh4IGluc3RhbmNlb2YgcDUuVmVjdG9yKSB7XG4gICAgICBjb25zdCB2ID0geC5hcnJheSgpO1xuICAgICAgdGhpcy50ZW5zb3IgPSB0ZmMudGVuc29yKHYpO1xuICAgIH0gZWxzZSBpZiAoeCBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgdGhpcy50ZW5zb3IgPSB4LnRlbnNvcjtcbiAgICB9IGVsc2UgaWYgKHggaW5zdGFuY2VvZiB0ZmMuVGVuc29yKSB7XG4gICAgICB0aGlzLnRlbnNvciA9IHg7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGVuc29ycyBtdXN0IGJlIGNyZWF0ZWQgZnJvbSBOdW1iZXJzLCBBcnJheXMsIG9yIHA1LlZlY3RvcnMuJyk7XG4gICAgfVxuICB9XG5cbiAgLy8gPT09PT0gVXRpbGl0aWVzID09PT09XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB0ZW5zb3IuIFRoaXMgbWV0aG9kIGlzIHVzZWZ1bCBmb3JcbiAgICogbG9nZ2luZyB0ZW5zb3JzIHRvIHRoZSBjb25zb2xlLlxuICAgKlxuICAgKiBAcmV0dXJucyBhIGh1bWFuLXJlYWRhYmxlIGRlc2NyaXB0aW9uIG9mIHRoZSB0ZW5zb3JcbiAgICovXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMudGVuc29yLnRvU3RyaW5nKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdGVuc29yIGFzIGEgZmxvYXQgYXJyYXkuIFRoZSBkYXRhXG4gICAqIHRyYW5zZmVyIGlzIGRvbmUgYXN5bmNocm9ub3VzbHkuXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSAocG9zc2libHkgbmVzdGVkKSBhcnJheSBvZiB2YWx1ZXNcbiAgICovXG4gIGFzeW5jIGFycmF5KCk6IFByb21pc2U8YW55PiB7XG4gICAgY29uc3QgdmFscyA9IGF3YWl0IHRoaXMudGVuc29yLmFycmF5KCk7XG5cbiAgICByZXR1cm4gdmFscztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmVwcmVzZW50YXRpb24gb2YgdGhpcyB0ZW5zb3IgYXMgYSBmbG9hdCBhcnJheS4gVGhlIGRhdGFcbiAgICogdHJhbnNmZXIgaXMgZG9uZSBzeW5jaHJvbm91c2x5LlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgKHBvc3NpYmx5IG5lc3RlZCkgYXJyYXkgb2YgdmFsdWVzXG4gICAqL1xuICBhcnJheVN5bmMoKTogYW55IHtcbiAgICByZXR1cm4gdGhpcy50ZW5zb3IuYXJyYXlTeW5jKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgdGVuc29yIGFzIGEgcDUuVmVjdG9yLlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgcDUuVmVjdG9yXG4gICAqL1xuICB0b1ZlY3RvcigpOiBwNS5WZWN0b3Ige1xuICAgIGNvbnN0IHNoYXBlID0gSlNPTi5zdHJpbmdpZnkodGhpcy50ZW5zb3Iuc2hhcGUpO1xuICAgIGlmIChzaGFwZSA9PT0gJ1syXScgfHwgc2hhcGUgPT09ICdbM10nKSB7XG4gICAgICBjb25zdCBhID0gdGhpcy5hcnJheVN5bmMoKTtcbiAgICAgIGNvbnN0IHYgPSBwNS5wcm90b3R5cGUuY3JlYXRlVmVjdG9yKCk7XG4gICAgICByZXR1cm4gdi5zZXQoYSk7XG4gICAgfVxuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdUZW5zb3IgY2Fubm90IGJlIHJlcHJlc2VudGVkIGFzIDNEIHZlY3RvcicpO1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3Bvc2VzIHRoZSB0ZW5zb3IgZnJvbSBtZW1vcnkuXG4gICAqL1xuICBkaXNwb3NlKCkge1xuICAgIHRoaXMudGVuc29yLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVjayBhZ2FpbnN0IGEgTnVtYmVyLCBwNS5WZWN0b3IsIG9yIFRlbnNvci5cbiAgICpcbiAgICogQHBhcmFtIGIgICB0aGUgb2JqZWN0IHRvIGJlIGNvbXBhcmVkXG4gICAqIEByZXR1cm5zICAgd2hldGhlciB0aGUgb2JqZWN0cyBhcmUgZXF1YWxzXG4gICAqL1xuICBlcXVhbHMoYjogbnVtYmVyIHwgcDUuVmVjdG9yIHwgVGVuc29yKTogYm9vbGVhbiB7XG4gICAgLy8gRklYTUU6IHRoaXMgZmVlbHMgbGlrZSBhIGhhY2tcbiAgICBpZiAoYiBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgaWYgKGIuaXNDb21wbGV4ICYmIHRoaXMuaXNDb21wbGV4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXBsZXhFcXVhbHMoYik7XG4gICAgICB9XG5cbiAgICAgIGlmIChiLmlzQ29tcGxleCB8fCB0aGlzLmlzQ29tcGxleCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JvdGggdGVuc29ycyBtdXN0IGJlIGVpdGhlciByZWFsIG9yIGNvbXBsZXguJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHo6IFRlbnNvciA9IG5ldyBUZW5zb3IoYik7XG4gICAgICBpZiAodGhpcy50ZW5zb3IucmFuayAhPT0gei50ZW5zb3IucmFuaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JvdGggdGVuc29ycyBtdXN0IGhhdmUgdGhlIHNhbWUgcmFuay4nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGNoZWNrOiB0ZmMuVGVuc29yID0gdGZjLmFsbCh0aGlzLnRlbnNvci5lcXVhbCh6LnRlbnNvcikpO1xuICAgICAgICBpZiAoY2hlY2suYXJyYXlTeW5jKCkgPT09IDEpIHtcbiAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHJlYWwgY29tcG9uZW50IG9mIGEgY29tcGxleCB0ZW5zb3IuXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSByZWFsIGNvbXBvbmVudChzKSBvZiB0aGUgdGVuc29yXG4gICAqL1xuICByZWFsKCk6IFRlbnNvciB7XG4gICAgaWYgKCF0aGlzLmlzQ29tcGxleCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZW5zb3IgbXVzdCBiZSBjb21wbGV4IHRvIHVzZSB0aGlzIG1ldGhvZC4nKTtcbiAgICB9XG5cbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGZjLnJlYWwodGhpcy50ZW5zb3IpKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGltYWdpbmFyeSBjb21wb25lbnQgb2YgYSBjb21wbGV4IHRlbnNvci5cbiAgICpcbiAgICogQHJldHVybnMgdGhlIGltYWdpbmFyeSBjb21wb25lbnQocykgb2YgdGhlIHRlbnNvclxuICAgKi9cbiAgaW1hZygpOiBUZW5zb3Ige1xuICAgIGlmICghdGhpcy5pc0NvbXBsZXgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGVuc29yIG11c3QgYmUgY29tcGxleCB0byB1c2UgdGhpcyBtZXRob2QuJyk7XG4gICAgfVxuXG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHRmYy5pbWFnKHRoaXMudGVuc29yKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVjayBhZ2FpbnN0IGEgY29tcGxleCB0ZW5zb3IuXG4gICAqXG4gICAqIEBwYXJhbSBiIHRoZSB0ZW5zb3IgdG8gYmUgY29tcGFyZWRcbiAgICogQHJldHVybnMgd2hldGhlciB0aGUgb2JqZWN0cyBhcmUgZXF1YWxzXG4gICAqL1xuICBwcml2YXRlIGNvbXBsZXhFcXVhbHMoYjogVGVuc29yKTogYm9vbGVhbiB7XG4gICAgbGV0IHJlc3VsdDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHJlYWxDaGVjazogYm9vbGVhbiA9IHRoaXMucmVhbCgpLmVxdWFscyhiLnJlYWwoKSk7XG4gICAgICBjb25zdCBpbWFnQ2hlY2s6IGJvb2xlYW4gPSB0aGlzLmltYWcoKS5lcXVhbHMoYi5pbWFnKCkpO1xuICAgICAgaWYgKHJlYWxDaGVjayAmJiBpbWFnQ2hlY2spIHtcbiAgICAgICAgcmVzdWx0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyA9PT09PSBDYWxjdWxhdGlvbiA9PT09PVxuXG4gIC8qKlxuICAgKiBBZGRzIHR3byB0ZW5zb3JzIGVsZW1lbnQtd2lzZS5cbiAgICpcbiAgICogQHBhcmFtIGIgdGhlIHRlbnNvciB0byBiZSBhZGRlZFxuICAgKiBAcmV0dXJucyB0aGUgc3VtIG9mIHRoZSB0ZW5zb3JzXG4gICAqL1xuICBhZGQoYjogbnVtYmVyIHwgcDUuVmVjdG9yIHwgVGVuc29yKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgejogVGVuc29yID0gbmV3IFRlbnNvcihiKTtcbiAgICAgIHJldHVybiB0aGlzLnRlbnNvci5hZGQoei50ZW5zb3IpO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBUZW5zb3IodCk7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgIGlmICh0aGlzLmlzQ29tcGxleCAmJiBiLmlzQ29tcGxleCkge1xuICAgICAgICByZXN1bHQuaXNDb21wbGV4ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0cyB0d28gdGVuc29ycyBlbGVtZW50LXdpc2UuXG4gICAqXG4gICAqIEBwYXJhbSBiIHRoZSB0ZW5zb3IgdG8gYmUgc3VidHJhY3RlZFxuICAgKiBAcmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiB0aGUgdGVuc29yc1xuICAgKi9cbiAgc3ViKGI6IG51bWJlciB8IHA1LlZlY3RvciB8IFRlbnNvcik6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHo6IFRlbnNvciA9IG5ldyBUZW5zb3IoYik7XG4gICAgICByZXR1cm4gdGhpcy50ZW5zb3Iuc3ViKHoudGVuc29yKTtcbiAgICB9KTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG4gICAgaWYgKGIgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgIGlmICh0aGlzLmlzQ29tcGxleCAmJiBiLmlzQ29tcGxleCkge1xuICAgICAgICByZXN1bHQuaXNDb21wbGV4ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgdHdvIHRlbnNvcnMgZWxlbWVudC13aXNlLlxuICAgKlxuICAgKiBAcGFyYW0gYiB0aGUgdGVuc29yIHRvIGJlIG11bHRpcGxpZWRcbiAgICogQHJldHVybnMgdGhlIHByb2R1Y3Qgb2YgdGhlIHRlbnNvcnNcbiAgICovXG4gIG11bHQoYjogbnVtYmVyIHwgcDUuVmVjdG9yIHwgVGVuc29yKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgejogVGVuc29yID0gbmV3IFRlbnNvcihiKTtcbiAgICAgIHJldHVybiB0aGlzLnRlbnNvci5tdWwoei50ZW5zb3IpO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgaWYgKHRoaXMuaXNDb21wbGV4ICYmIGIuaXNDb21wbGV4KSB7XG4gICAgICAgIHJlc3VsdC5pc0NvbXBsZXggPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGl2aWRlcyB0d28gdGVuc29ycyBlbGVtZW50LXdpc2UuXG4gICAqXG4gICAqIEBwYXJhbSBiIHRoZSB0ZW5zb3IgdG8gYmUgZGl2aWRlZCBieVxuICAgKiBAcmV0dXJucyB0aGUgcXVvdGllbnQgb2YgdGhlIHRlbnNvcnNcbiAgICovXG4gIGRpdihiOiBudW1iZXIgfCBwNS5WZWN0b3IgfCBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB6OiBUZW5zb3IgPSBuZXcgVGVuc29yKGIpO1xuICAgICAgcmV0dXJuIHRoaXMudGVuc29yLmRpdih6LnRlbnNvcik7XG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuICAgIGlmIChiIGluc3RhbmNlb2YgVGVuc29yKSB7XG4gICAgICBpZiAodGhpcy5pc0NvbXBsZXggJiYgYi5pc0NvbXBsZXgpIHtcbiAgICAgICAgcmVzdWx0LmlzQ29tcGxleCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gbWF0cmljZXMgYW5kL29yIHZlY3RvcnMuXG4gICAqIE5vdGU6IE9ubHkgd29ya3Mgd2hlbiBib3RoIG9wZXJhbmRzIGFyZSByYW5rIDEgb3IgMi5cbiAgICpcbiAgICogQHBhcmFtIGIgdGhlIG1hdHJpeCBvciB2ZWN0b3IgdG8gYmUgZG90dGVkXG4gICAqIEByZXR1cm5zIHRoZSBkb3QgcHJvZHVjdCBvZiB0aGUgdGVuc29yc1xuICAgKi9cbiAgZG90KGI6IHA1LlZlY3RvciB8IFRlbnNvcik6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHo6IFRlbnNvciA9IG5ldyBUZW5zb3IoYik7XG4gICAgICByZXR1cm4gdGhpcy50ZW5zb3IuZG90KHoudGVuc29yKTtcbiAgICB9KTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGFic29sdXRlIHZhbHVlIChtYWduaXV0ZGUpIG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuXG4gICAqIFRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiBhIG51bWJlciBpcyBhbHdheXMgcG9zaXRpdmUuXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gICAqL1xuICBhYnMoKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3IuYWJzKCkpO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgY2xvc2VzdCBpbnQgdmFsdWUgdGhhdCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICogdGhlIHZhbHVlIG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuIEZvciBleGFtcGxlLCBjZWlsKDkuMDMpIHJldHVybnNcbiAgICogdGhlIHZhbHVlIDEwLlxuICAgKlxuICAgKiBAcmV0dXJucyBlYWNoIHRlbnNvciBlbGVtZW50IHJvdW5kZWQgdXBcbiAgICovXG4gIGNlaWwoKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3IuY2VpbCgpKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cmFpbnMgdGhlIHZhbHVlIG9mIGVhY2ggdGVuc29yIGVsZW1lbnQgYmV0d2VlbiBhIG1pbmltdW0gYW5kXG4gICAqIG1heGltdW0gdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSBsb3cgIHRoZSBtaW5pbXVtIHZhbHVlXG4gICAqIEBwYXJhbSBoaWdoIHRoZSBtYXhpbXVtIHZhbHVlXG4gICAqIEByZXR1cm5zICAgIGVhY2ggdGVuc29yIGVsZW1lbnQgY29uc3RyYWluZWQgdG8gdGhlIGdpdmVuIHJhbmdlXG4gICAqL1xuICBjb25zdHJhaW4obG93OiBudW1iZXIsIGhpZ2g6IG51bWJlcik6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHRoaXMudGVuc29yLmNsaXBCeVZhbHVlKGxvdywgaGlnaCkpO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmFpc2UgRXVsZXIncyBudW1iZXIgZSAoMi43MTgyOC4uLikgdG8gdGhlIHBvd2VyIG9mIGVhY2ggdGVuc29yXG4gICAqIGVsZW1lbnQuXG4gICAqXG4gICAqIEByZXR1cm5zIGVebiBmb3IgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKi9cbiAgZXhwKCk6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHRoaXMudGVuc29yLmV4cCgpKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGNsb3Nlc3QgaW50IHZhbHVlIHRoYXQgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAqIHRoZSB2YWx1ZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50LiBGb3IgZXhhbXBsZSwgZmxvb3IoOS45NykgcmV0dXJuc1xuICAgKiB0aGUgdmFsdWUgOS5cbiAgICpcbiAgICogQHJldHVybnMgZWFjaCB0ZW5zb3IgZWxlbWVudCByb3VuZGVkIGRvd25cbiAgICovXG4gIGZsb29yKCk6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHRoaXMudGVuc29yLmZsb29yKCkpO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgbmF0dXJhbCBsb2dhcml0aG0gKHRoZSBiYXNlLWUgbG9nYXJpdGhtKSBvZiBlYWNoIHRlbnNvclxuICAgKiBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgZWFjaCB0ZW5zb3IgZWxlbWVudCB0byBiZSBhIHZhbHVlXG4gICAqIGdyZWF0ZXIgdGhhbiAwLjAuXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSBuYXR1cmFsIGxvZ2FyaXRobSBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gICAqL1xuICBsb2coKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3IubG9nKCkpO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgbGFyZ2VzdCB2YWx1ZSBpbiBhIHRlbnNvciwgYW5kIHRoZW4gcmV0dXJucyB0aGF0IHZhbHVlLlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgbWF4aW11bSBudW1iZXIgaW4gdGhlIHRlbnNvclxuICAgKi9cbiAgbWF4KCk6IG51bWJlciB7XG4gICAgbGV0IHJlc3VsdDogYW55O1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMubWF4KHRoaXMudGVuc29yKTtcbiAgICAgIHJlc3VsdCA9IHQuYXJyYXlTeW5jKCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgdGhlIHNtYWxsZXN0IHZhbHVlIGluIGEgdGVuc29yLCBhbmQgdGhlbiByZXR1cm5zIHRoYXQgdmFsdWUuXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSBtaW5pbXVtIG51bWJlciBpbiB0aGUgdGVuc29yXG4gICAqL1xuICBtaW4oKTogbnVtYmVyIHtcbiAgICBsZXQgcmVzdWx0OiBhbnk7XG4gICAgdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy5taW4odGhpcy50ZW5zb3IpO1xuICAgICAgcmVzdWx0ID0gdC5hcnJheVN5bmMoKTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgbW9kdWxhciAocmVtYWluZGVyKSBkaXZpc2lvbiBvbiB0d28gdGVuc29ycyBlbGVtZW50LXdpc2UuXG4gICAqXG4gICAqIEBwYXJhbSBiIHRoZSB0ZW5zb3IgdG8gYmUgZGl2aWRlZCBieVxuICAgKiBAcmV0dXJucyB0aGUgcmVtYWluZGVyKHMpXG4gICAqL1xuICBtb2QoYjogbnVtYmVyIHwgVGVuc29yKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgejogVGVuc29yID0gbmV3IFRlbnNvcihiKTtcbiAgICAgIHJldHVybiB0aGlzLnRlbnNvci5tb2Qoei50ZW5zb3IpO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRmFjaWxpdGF0ZXMgZXhwb25lbnRpYWwgZXhwcmVzc2lvbnMuIFRoZSBwb3coKSBtZXRob2QgaXMgYW5cbiAgICogZWZmaWNpZW50IHdheSBvZiBtdWx0aXBseWluZyB0ZW5zb3JzIGJ5IHRoZW1zZWx2ZXMgKG9yIHRoZWlyXG4gICAqIHJlY2lwcm9jYWxzKSBpbiBsYXJnZSBxdWFudGl0aWVzLlxuICAgKlxuICAgKiBAcGFyYW0gYiB0aGUgcG93ZXIgYnkgd2hpY2ggdG8gcmFpc2UgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKiBAcmV0dXJucyB0aGUgZXhwb25lbnRpYXRlZCB0ZW5zb3JcbiAgICovXG4gIHBvdyhiOiBudW1iZXIgfCBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB6OiBUZW5zb3IgPSBuZXcgVGVuc29yKGIpO1xuICAgICAgcmV0dXJuIHRoaXMudGVuc29yLnBvdyh6LnRlbnNvcik7XG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBpbnRlZ2VyIGNsb3Nlc3QgdG8gZWFjaCB0ZW5zb3IgZWxlbWVudC4gRm9yXG4gICAqIGV4YW1wbGUsIHJvdW5kKDEzMy44KSByZXR1cm5zIHRoZSB2YWx1ZSAxMzQuXG4gICAqXG4gICAqIEByZXR1cm5zIGVhY2ggdGVuc29yIGVsZW1lbnQgcm91bmRlZFxuICAgKi9cbiAgcm91bmQoKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3Iucm91bmQoKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTcXVhcmVzIGVhY2ggdGVuc29yIGVsZW1lbnQgKG11bHRpcGxpZXMgYSBudW1iZXIgYnkgaXRzZWxmKS4gVGhlXG4gICAqIHJlc3VsdCBpcyBhbHdheXMgYSBwb3NpdGl2ZSBudW1iZXIsIGFzIG11bHRpcGx5aW5nIHR3byBuZWdhdGl2ZVxuICAgKiBudW1iZXJzIGFsd2F5cyB5aWVsZHMgYSBwb3NpdGl2ZSByZXN1bHQuIEZvciBleGFtcGxlLCAtMSAqIC0xID0gMS5cbiAgICpcbiAgICogQHJldHVybnMgdGhlIHNxdWFyZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gICAqL1xuICBzcSgpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB0aGlzLnRlbnNvci5zcXVhcmUoKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBzcXVhcmUgcm9vdCBvZiBlYWNoIHRlbnNvciBlbGVtZW50LiBUaGUgc3F1YXJlIHJvb3RcbiAgICogb2YgYSBudW1iZXIgaXMgYWx3YXlzIHBvc2l0aXZlLCBldmVuIHRob3VnaCB0aGVyZSBtYXkgYmUgYSB2YWxpZFxuICAgKiBuZWdhdGl2ZSByb290LiBUaGUgc3F1YXJlIHJvb3QgcyBvZiBudW1iZXIgYSBpcyBzdWNoIHRoYXQgcypzID0gYS5cbiAgICogSXQgaXMgdGhlIG9wcG9zaXRlIG9mIHNxdWFyaW5nLlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgc3F1YXJlIHJvb3Qgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKi9cbiAgc3FydCgpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB0aGlzLnRlbnNvci5zcXJ0KCkpO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyA9PT09PSBSZWR1Y3Rpb24gPT09PT1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgc3VtIG9mIHRlbnNvciBlbGVtZW50cyBhbG9uZyBhbiBheGlzLlxuICAgKlxuICAgKiBAcGFyYW0gYXhpcyAob3B0aW9uYWwpIHRoZSBheGlzIHRvIHN1bSBhbG9uZ1xuICAgKiBAcmV0dXJucyAgICB0aGUgc3VtXG4gICAqL1xuICBzdW0oYXhpcz86IG51bWJlciB8IG51bWJlcltdKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3Iuc3VtKGF4aXMpKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gPT09PT0gVHJpZ29ub21ldHJ5ID09PT09XG5cbiAgLyoqXG4gICAqIFRoZSBpbnZlcnNlIG9mIGNvcygpLCByZXR1cm5zIHRoZSBhcmMgY29zaW5lIG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuXG4gICAqIFRoaXMgZnVuY3Rpb24gZXhwZWN0cyB0aGUgdmFsdWVzIGluIHRoZSByYW5nZSBvZiAtMSB0byAxIGFuZCB2YWx1ZXNcbiAgICogYXJlIHJldHVybmVkIGluIHRoZSByYW5nZSAwIHRvIFBJICgzLjE0MTU5MjcpLlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgYXJjIGNvc2luZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gICAqL1xuICBhY29zKCk6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHRoaXMudGVuc29yLmFjb3MoKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgaW52ZXJzZSBvZiBzaW4oKSwgcmV0dXJucyB0aGUgYXJjIHNpbmUgb2YgYSBlYWNoIHRlbnNvciBlbGVtZW50LlxuICAgKiBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIHZhbHVlcyBpbiB0aGUgcmFuZ2Ugb2YgLTEgdG8gMSBhbmQgdmFsdWVzXG4gICAqIGFyZSByZXR1cm5lZCBpbiB0aGUgcmFuZ2UgLVBJLzIgdG8gUEkvMi5cbiAgICpcbiAgICogQHJldHVybnMgdGhlIGFyYyBzaW5lIG9mIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAgICovXG4gIGFzaW4oKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3IuYXNpbigpKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBpbnZlcnNlIG9mIHRhbigpLCByZXR1cm5zIHRoZSBhcmMgdGFuZ2VudCBvZiBlYWNoIHRlbnNvciBlbGVtZW50LlxuICAgKiBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIHZhbHVlcyBpbiB0aGUgcmFuZ2Ugb2YgLUluZmluaXR5IHRvIEluZmluaXR5XG4gICAqIChleGNsdXNpdmUpIGFuZCB2YWx1ZXMgYXJlIHJldHVybmVkIGluIHRoZSByYW5nZSAtUEkvMiB0byBQSS8yLlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgYXJjIHRhbmdlbnQgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKi9cbiAgYXRhbigpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB0aGlzLnRlbnNvci5hdGFuKCkpO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgYW5nbGUgKGluIHJhZGlhbnMpIGZyb20gYSBzcGVjaWZpZWQgcG9pbnQgdG8gdGhlXG4gICAqIGNvb3JkaW5hdGUgb3JpZ2luIGFzIG1lYXN1cmVkIGZyb20gdGhlIHBvc2l0aXZlIHgtYXhpcy4gVmFsdWVzIGFyZVxuICAgKiByZXR1cm5lZCBhcyBhIGZsb2F0IGluIHRoZSByYW5nZSBmcm9tIFBJIHRvIC1QSS5cbiAgICpcbiAgICogQHBhcmFtIGIgdGhlIHgtY29vcmRpbmF0ZShzKSB1c2VkIGZvciBjb21wdXRpbmcgdGhlIGFyYyB0YW5nZW50XG4gICAqIEByZXR1cm5zIHRoZSBhcmMgdGFuZ2VudCBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gICAqL1xuICBhdGFuMihiOiBudW1iZXIgfCBUZW5zb3IpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB6OiBUZW5zb3IgPSBuZXcgVGVuc29yKGIpO1xuICAgICAgcmV0dXJuIHRoaXMudGVuc29yLmF0YW4yKHoudGVuc29yKTtcbiAgICB9KTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGNvc2luZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uXG4gICAqIGRvZXMgbm90IHlldCB0YWtlIGludG8gYWNjb3VudCB0aGUgY3VycmVudCBhbmdsZU1vZGUuXG4gICAqIFZhbHVlcyBhcmUgcmV0dXJuZWQgaW4gdGhlIHJhbmdlIC0xIHRvIDEuXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSBjb3NpbmUgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKi9cbiAgY29zKCk6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHRoaXMudGVuc29yLmNvcygpKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIHNpbmUgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICAgKiBkb2VzIG5vdCB5ZXQgdGFrZSBpbnRvIGFjY291bnQgdGhlIGN1cnJlbnQgYW5nbGVNb2RlLlxuICAgKiBWYWx1ZXMgYXJlIHJldHVybmVkIGluIHRoZSByYW5nZSAtMSB0byAxLlxuICAgKlxuICAgKiBAcmV0dXJucyB0aGUgc2luZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gICAqL1xuICBzaW4oKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3Iuc2luKCkpO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgdGFuZ2VudCBvZiBlYWNoIHRlbnNvciBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uXG4gICAqIGRvZXMgbm90IHlldCB0YWtlIGludG8gYWNjb3VudCB0aGUgY3VycmVudCBhbmdsZU1vZGUuXG4gICAqIFZhbHVlcyBhcmUgcmV0dXJuZWQgaW4gdGhlIHJhbmdlIG9mIGFsbCByZWFsIG51bWJlcnMuXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSB0YW5nZW50IG9mIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAgICovXG4gIHRhbigpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB0aGlzLnRlbnNvci50YW4oKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vID09PT09IENyZWF0aW9uIE1ldGhvZHMgPT09PT1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGNvbXBsZXggdGVuc29yIHdpdGggdGhlIGdpdmVuIHJlYWwgYW5kIGltYWdpbmFyeVxuICAgKiBjb21wb25lbnRzLlxuICAgKlxuICAgKiBAcGFyYW0gcmVhbCB0aGUgcmVhbCBjb21wb25lbnQocylcbiAgICogQHBhcmFtIGltYWcgdGhlIGltYWdpbmFyeSBjb21wb25lbnQocylcbiAgICogQHJldHVybnMgICAgdGhlIGNvbXBsZXggdGVuc29yXG4gICAqL1xuICBzdGF0aWMgY29tcGxleChyZWFsOiBudW1iZXIgfCBUZW5zb3IsIGltYWc6IG51bWJlciB8IFRlbnNvcik6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGxldCByZTogdGZjLlRlbnNvcjtcbiAgICAgIGxldCBpbTogdGZjLlRlbnNvcjtcbiAgICAgIGlmICh0eXBlb2YgcmVhbCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGltYWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgIHJlID0gdGZjLnRlbnNvcihyZWFsKTtcbiAgICAgICAgaW0gPSB0ZmMudGVuc29yKGltYWcpO1xuICAgICAgfSBlbHNlIGlmIChyZWFsIGluc3RhbmNlb2YgVGVuc29yICYmIGltYWcgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgcmUgPSB0ZmMuY2xvbmUocmVhbC50ZW5zb3IpO1xuICAgICAgICBpbSA9IHRmYy5jbG9uZShpbWFnLnRlbnNvcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0NvbXBvbmVudHMgbXVzdCBiZSBlaXRoZXIgTnVtYmVycyBvciBUZW5zb3JzJyk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0ZmMuY29tcGxleChyZSwgaW0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcbiAgICByZXN1bHQuaXNDb21wbGV4ID0gdHJ1ZTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyBhIGNvcHkgb2YgdGhlIHRlbnNvciwgcmV0dXJucyBhIFRlbnNvciBvYmplY3QuXG4gICAqXG4gICAqIEByZXR1cm5zIGEgY29weSBvZiB0aGUgdGVuc29yXG4gICAqL1xuICBjb3B5KCk6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHRoaXMudGVuc29yLmNsb25lKCkpO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBpZGVudGl0eSBtYXRyaXggd2l0aCB0aGUgZ2l2ZW4gZGltZW5zaW9ucy5cbiAgICpcbiAgICogQHBhcmFtIG51bVJvd3MgdGhlIG51bWJlciBvZiByb3dzXG4gICAqIEBwYXJhbSBudW1Db2xzIChvcHRpb25hbCkgdGhlIG51bWJlciBvZiBjb2x1bW5zXG4gICAqIEByZXR1cm5zICAgICAgIHRoZSBpZGVudGl0eSBtYXRyaXhcbiAgICovXG4gIHN0YXRpYyBleWUobnVtUm93czogbnVtYmVyLCBudW1Db2xzPzogbnVtYmVyKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGZjLmV5ZShudW1Sb3dzLCBudW1Db2xzKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdGVuc29yIGZpbGxlZCB3aXRoIGEgZ2l2ZW4gdmFsdWUuXG4gICAqXG4gICAqIEBwYXJhbSBzaGFwZSB0aGUgc2hhcGUgb2YgdGhlIHRlbnNvclxuICAgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGZpbGwgdGhlIHRlbnNvciB3aXRoXG4gICAqIEByZXR1cm5zICAgICB0aGUgZmlsbGVkIHRlbnNvclxuICAgKi9cbiAgc3RhdGljIGZpbGwoc2hhcGU6IG51bWJlcltdLCB2YWx1ZTogbnVtYmVyKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGZjLmZpbGwoc2hhcGUsIHZhbHVlKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdGVuc29yIGZpbGxlZCB3aXRoIGV2ZW5seSBzcGFjZWQgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0gbWluIHRoZSBsb3dlciBib3VuZCAoaW5jbHVzaXZlKVxuICAgKiBAcGFyYW0gbWF4IHRoZSB1cHBlciBib3VuZCAoaW5jbHVzaXZlKVxuICAgKiBAcGFyYW0gbnVtIHRoZSBudW1iZXIgb2YgdmFsdWVzIHRvIGdlbmVyYXRlXG4gICAqIEByZXR1cm5zICAgdGhlIGZpbGxlZCB0ZW5zb3JcbiAgICovXG4gIHN0YXRpYyBsaW5zcGFjZShtaW46IG51bWJlciwgbWF4OiBudW1iZXIsIG51bTogbnVtYmVyKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGZjLmxpbnNwYWNlKG1pbiwgbWF4LCBudW0pKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB0ZW5zb3IgZmlsbGVkIHdpdGggb25lcy5cbiAgICpcbiAgICogQHBhcmFtIHNoYXBlIHRoZSBzaGFwZSBvZiB0aGUgdGVuc29yXG4gICAqIEByZXR1cm5zICAgICB0aGUgZmlsbGVkIHRlbnNvclxuICAgKi9cbiAgc3RhdGljIG9uZXMoc2hhcGU6IG51bWJlcltdKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGZjLm9uZXMoc2hhcGUpKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB0ZW5zb3IgZmlsbGVkIHdpdGggdW5pZm9ybWx5IGRpc3RyaWJ1dGVkIHJhbmRvbSBudW1iZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gc2hhcGUgdGhlIHNoYXBlIG9mIHRoZSB0ZW5zb3JcbiAgICogQHJldHVybnMgICAgIHRoZSBmaWxsZWQgdGVuc29yXG4gICAqL1xuICBzdGF0aWMgcmFuZG9tKHNoYXBlOiBudW1iZXJbXSk6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHRmYy5yYW5kb21Vbmlmb3JtKHNoYXBlKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgdGVuc29yIGZpbGxlZCB3aXRoIG5vcm1hbGx5IGRpc3RyaWJ1dGVkIHJhbmRvbSBudW1iZXJzLlxuICAgKlxuICAgKiBAcGFyYW0gc2hhcGUgdGhlIHNoYXBlIG9mIHRlbnNvclxuICAgKiBAcGFyYW0gbWVhbiAgKG9wdGlvbmFsKSB0aGUgbWVhblxuICAgKiBAcGFyYW0gc2QgICAgKG9wdGlvbmFsKSB0aGUgc3RhbmRhcmQgZGV2aWF0aW9uXG4gICAqIEByZXR1cm5zICAgICB0aGUgZmlsbGVkIHRlbnNvclxuICAgKi9cbiAgc3RhdGljIHJhbmRvbUdhdXNzaWFuKHNoYXBlOiBudW1iZXJbXSwgbWVhbj86IG51bWJlciwgc2Q/OiBudW1iZXIpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB0ZmMucmFuZG9tTm9ybWFsKHNoYXBlLCBtZWFuLCBzZCkpO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHRlbnNvciBmaWxsZWQgd2l0aCBudW1iZXJzIGluIHRoZSByYW5nZSBwcm92aWRlZC5cbiAgICpcbiAgICogQHBhcmFtIG1pbiAgdGhlIGxvd2VyIGJvdW5kIChpbmNsdXNpdmUpXG4gICAqIEBwYXJhbSBtYXggIHRoZSB1cHBlciBib3VuZCAoZXhjbHVzaXZlKVxuICAgKiBAcGFyYW0gc3RlcCAob3B0aW9uYWwpIHRoZSBpbnRlZ2VyIHNwYWNpbmcgYmV0d2VlbiB2YWx1ZXNcbiAgICogQHJldHVybnMgICAgdGhlIGZpbGxlZCB0ZW5zb3JcbiAgICovXG4gIHN0YXRpYyByYW5nZShtaW46IG51bWJlciwgbWF4OiBudW1iZXIsIHN0ZXA/OiBudW1iZXIpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB0ZmMucmFuZ2UobWluLCBtYXgsIHN0ZXApKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB0ZW5zb3IgZmlsbGVkIHdpdGggemVyb3MuXG4gICAqXG4gICAqIEBwYXJhbSBzaGFwZSB0aGUgc2hhcGUgb2YgdGhlIHRlbnNvclxuICAgKiBAcmV0dXJucyAgICAgdGhlIGZpbGxlZCB0ZW5zb3JcbiAgICovXG4gIHN0YXRpYyB6ZXJvcyhzaGFwZTogbnVtYmVyW10pOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB0ZmMuemVyb3Moc2hhcGUpKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gPT09PT0gVHJhbnNmb3JtYXRpb25zID09PT09XG5cbiAgLyoqXG4gICAqIEZsYXR0ZW5zIHRoaXMgdGVuc29yIHRvIG9uZSBkaW1lbnNpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSBmbGF0dGVuZWQgdGVuc29yXG4gICAqL1xuICBmbGF0dGVuKCk6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHRoaXMudGVuc29yLmZsYXR0ZW4oKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYWRzIGEgdGVuc29yIHdpdGggYSBnaXZlbiB2YWx1ZSBhbmQgcGFkZGluZ3MuXG4gICAqXG4gICAqIEBwYXJhbSBwYWRkaW5ncyAgICAgIGFuIGFycmF5IHByZXNjcmliaW5nIGhvdyBtdWNoIHRvIHBhZCBbYmVmb3JlLCBhZnRlcl0gYWxvbmdcbiAgICogICAgICAgICAgICAgICAgICAgICAgZWFjaCB0ZW5zb3IgYXhpc1xuICAgKiBAcGFyYW0gY29uc3RhbnRWYWx1ZSAob3B0aW9uYWwpIHRoZSBwYWQgdmFsdWUgdG8gdXNlXG4gICAqIEByZXR1cm5zICAgICAgICAgICAgIHRoZSBwYWRkZWQgdGVuc29yXG4gICAqL1xuICBwYWQocGFkZGluZ3M6IEFycmF5PFtudW1iZXIsIG51bWJlcl0+LCBjb25zdGFudFZhbHVlPzogbnVtYmVyKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3IucGFkKHBhZGRpbmdzLCBjb25zdGFudFZhbHVlKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNoYXBlcyBhIHRlbnNvciB0byBhIGdpdmVuIHNoYXBlLlxuICAgKlxuICAgKiBAcGFyYW0gc2hhcGUgYW4gYXJyYXkgb2YgaW50ZWdlcnMgZGVmaW5pbmcgdGhlIG91dHB1dCB0ZW5zb3Igc2hhcGVcbiAgICogQHJldHVybnMgICAgIHRoZSByZXNoYXBlZCB0ZW5zb3JcbiAgICovXG4gIHJlc2hhcGUoc2hhcGU6IG51bWJlcltdKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3IucmVzaGFwZShzaGFwZSkpO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvLyA9PT09PSBTbGljaW5nIGFuZCBKb2luaW5nID09PT09XG5cbiAgLyoqXG4gICAqIENvbmNhdGVuYXRlcyB0d28gb3IgbW9yZSB0ZW5zb3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYiAgICB0aGUgdGVuc29yKHMpIHRvIGJlIGNvbmNhdGVuYXRlZFxuICAgKiBAcGFyYW0gYXhpcyAob3B0aW9uYWwpIHRoZSBheGlzIHRvIGNvbmNhdGVuYXRlIGFsb25nXG4gICAqIEByZXR1cm5zICAgIHRoZSBjb25jYXRlbmF0ZWQgdGVuc29yXG4gICAqL1xuICBjb25jYXQoYjogVGVuc29yIHwgVGVuc29yW10sIGF4aXM/OiBudW1iZXIpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0ZW5zb3JzOiB0ZmMuVGVuc29yW10gPSBbdGhpcy50ZW5zb3JdO1xuICAgICAgaWYgKGIgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgdGVuc29ycy5wdXNoKGIudGVuc29yKTtcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShiKSkge1xuICAgICAgICBjb25zdCB6OiB0ZmMuVGVuc29yW10gPSBiLm1hcCgoeCkgPT4geC50ZW5zb3IpO1xuICAgICAgICBBcnJheS5wcm90b3R5cGUucHVzaC5hcHBseSh0ZW5zb3JzLCB6KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRmYy5jb25jYXQodGVuc29ycywgYXhpcyk7XG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXZlcnNlcyB0aGUgdGVuc29yIGFsb25nIGEgc3BlY2lmaWNlZCBheGlzLlxuICAgKlxuICAgKiBAcGFyYW0gYXhpcyAob3B0aW9uYWwpIHRoZSBheGlzIHRvIHJldmVyc2UgYWxvbmdcbiAgICogQHJldHVybnMgICAgdGhlIHJldmVyc2VkIHRlbnNvclxuICAgKi9cbiAgcmV2ZXJzZShheGlzPzogbnVtYmVyIHwgbnVtYmVyW10pOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB0aGlzLnRlbnNvci5yZXZlcnNlKGF4aXMpKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEV4dHJhY3RzIGEgc2xpY2UgZnJvbSBhIHRlbnNvci5cbiAgICpcbiAgICogQHBhcmFtIGJlZ2luIHRoZSBjb29yZGluYXRlcyB0byBzdGFydCB0aGUgc2xpY2UgZnJvbVxuICAgKiBAcGFyYW0gc2l6ZSAgKG9wdGlvbmFsKSB0aGUgc2l6ZSBvZiB0aGUgc2xpY2VcbiAgICogQHJldHVybnMgICAgIHRoZSB0ZW5zb3Igc2xpY2VcbiAgICovXG4gIHNsaWNlKGJlZ2luOiBudW1iZXIgfCBudW1iZXJbXSwgc2l6ZT86IG51bWJlciB8IG51bWJlcltdKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3Iuc2xpY2UoYmVnaW4sIHNpemUpKTtcbiAgICBjb25zdCByZXN1bHQ6IFRlbnNvciA9IG5ldyBUZW5zb3IodCk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIHRlbnNvciBpbnRvIHN1YiB0ZW5zb3JzLlxuICAgKlxuICAgKiBAcGFyYW0gbnVtT3JTaXplU3BsaXRzIGVpdGhlciBhbiBpbnRlZ2VyIGluZGljYXRpbmcgdGhlIG51bWJlciBvZiBzcGxpdHMgYWxvbmcgdGhlIGF4aXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICBvciBhbiBhcnJheSBvZiBpbnRlZ2VycyBjb250YWluaW5nIHRoZSBzaXplcyBvZiBlYWNoIG91dHB1dCB0ZW5zb3JcbiAgICogICAgICAgICAgICAgICAgICAgICAgICBhbG9uZyB0aGUgYXhpcy4gSWYgYSBudW1iZXIgdGhlbiBpdCBtdXN0IGV2ZW5seSBkaXZpZGUgdGhlIGF4aXNcbiAgICogICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGg7IG90aGVyd2lzZSB0aGUgc3VtIG9mIHNpemVzIG11c3QgbWF0Y2ggYXhpcyBsZW5ndGguXG4gICAqIEBwYXJhbSBheGlzICAgICAgICAgICAgKG9wdGlvbmFsKSB0aGUgZGltZW5zaW9uIGFsb25nIHdoaWNoIHRvIHNwbGl0XG4gICAqIEByZXR1cm5zICAgICAgICAgICAgICAgdGhlIHNwbGl0IHRlbnNvclxuICAgKi9cbiAgc3BsaXQobnVtT3JTaXplU3BsaXRzOiBudW1iZXIgfCBudW1iZXJbXSwgYXhpcz86IG51bWJlcik6IFRlbnNvcltdIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yPHRmYy5SYW5rPltdID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3Iuc3BsaXQobnVtT3JTaXplU3BsaXRzLCBheGlzKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3JbXSA9IHQubWFwKCh0ZW5zb3IpID0+IG5ldyBUZW5zb3IodGVuc29yKSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YWNrcyBhbiBhcnJheSBvZiB0ZW5zb3JzIGFsb25nIGFuIGF4aXMuIFRlbnNvcnMgbXVzdCBoYXZlIHRoZSBzYW1lIHJhbmsuXG4gICAqXG4gICAqIEBwYXJhbSB0ZW5zb3JzIHRoZSB0ZW5zb3JzIHRvIGJlIHN0YWNrZWRcbiAgICogQHBhcmFtIGF4aXMgICAgKG9wdGlvbmFsKSB0aGUgYXhpcyB0byBzdGFjayBhbG9uZ1xuICAgKiBAcmV0dXJucyAgICAgICB0aGUgc3RhY2tlZCB0ZW5zb3JcbiAgICovXG4gIHN0YXRpYyBzdGFjayh0ZW5zb3JzOiBUZW5zb3JbXSwgYXhpcz86IG51bWJlcik6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHRhcnJheTogdGZjLlRlbnNvcltdID0gbmV3IEFycmF5KHRlbnNvcnMubGVuZ3RoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGVuc29ycy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICB0YXJyYXlbaV0gPSB0ZW5zb3JzW2ldLnRlbnNvcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRmYy5zdGFjayh0YXJyYXksIGF4aXMpO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVW5zdGFja3MgYSByYW5rLVIgdGVuc29yIGludG8gYW4gYXJyYXkgb2YgcmFuay0oUi0xKSB0ZW5zb3JzLlxuICAgKlxuICAgKiBAcGFyYW0gYXhpcyAob3B0aW9uYWwpIHRoZSBheGlzIHRvIHVuc3RhY2sgYWxvbmdcbiAgICogQHJldHVybnMgICAgdGhlIGFycmF5IG9mIHRlbnNvcnNcbiAgICovXG4gIHVuc3RhY2soYXhpcz86IG51bWJlcik6IFRlbnNvcltdIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yPHRmYy5SYW5rPltdID0gdGZjLnRpZHkoKCkgPT4gdGhpcy50ZW5zb3IudW5zdGFjayhheGlzKSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3JbXSA9IHQubWFwKCh0ZW5zb3IpID0+IG5ldyBUZW5zb3IodGVuc29yKSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gPT09PT0gRWxlbWVudGFyeSBSb3cgT3BlcmF0aW9ucyA9PT09PVxuXG4gIC8qKlxuICAgKiBBZGRzIHR3byByb3dzIG9mIGEgbWF0cml4LlxuICAgKlxuICAgKiBAcGFyYW0gcjEgdGhlIGluZGV4IG9mIHRoZSByb3cgYmVpbmcgYWRkZWQgdG8gdGhlIG90aGVyIHJvd1xuICAgKiBAcGFyYW0gcjIgdGhlIGluZGV4IG9mIHRoZSByb3cgYmVpbmcgYWRkZWQgdG9cbiAgICogQHBhcmFtIGMgIChvcHRpb25hbCkgdGhlIGNvbnN0YW50IG11bHRpcGxpZXIgZm9yIHIxXG4gICAqIEByZXR1cm5zICB0aGUgcmVzdWx0aW5nIG1hdHJpeFxuICAgKi9cbiAgYWRkUm93cyhyMTogbnVtYmVyLCByMjogbnVtYmVyLCBjID0gMSk6IFRlbnNvciB7XG4gICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLnRlbnNvci5zaGFwZS5sZW5ndGggIT09IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFbGVtZW50YXJ5IHJvdyBvcGVyYXRpb25zIGFyZSBvbmx5IGRlZmluZWQgb24gbWF0cmljZXMuJyk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJlZ2luOiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3Iuc2xpY2UoMCwgcjIpO1xuICAgICAgY29uc3Qgcm93MTogdGZjLlRlbnNvciA9IHRoaXMudGVuc29yLnNsaWNlKHIxLCAxKTtcbiAgICAgIGxldCByb3cyOiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3Iuc2xpY2UocjIsIDEpO1xuICAgICAgY29uc3QgZmluYWw6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5zbGljZShyMiArIDEsIHRoaXMudGVuc29yLnNoYXBlWzBdIC0gcjIgLSAxKTtcbiAgICAgIHJvdzIgPSByb3cyLmFkZChyb3cxLm11bChjKSk7XG5cbiAgICAgIHJldHVybiBiZWdpbi5jb25jYXQoW3JvdzIsIGZpbmFsXSk7XG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdHMgdHdvIHJvd3Mgb2YgYSBtYXRyaXguXG4gICAqXG4gICAqIEBwYXJhbSByMSB0aGUgaW5kZXggb2YgdGhlIHJvdyBiZWluZyBzdWJ0cmFjdGVkIGZyb20gdGhlIG90aGVyIHJvd1xuICAgKiBAcGFyYW0gcjIgdGhlIGluZGV4IG9mIHRoZSByb3cgYmVpbmcgc3VidHJhY3RlZCBmcm9tXG4gICAqIEBwYXJhbSBjICAob3B0aW9uYWwpIHRoZSBjb25zdGFudCBtdWx0aXBsaWVyIGZvciByMVxuICAgKiBAcmV0dXJucyAgdGhlIHJlc3VsdGluZyBtYXRyaXhcbiAgICovXG4gIHN1YlJvd3MocjE6IG51bWJlciwgcjI6IG51bWJlciwgYyA9IDEpOiBUZW5zb3Ige1xuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBpZiAodGhpcy50ZW5zb3Iuc2hhcGUubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRWxlbWVudGFyeSByb3cgb3BlcmF0aW9ucyBhcmUgb25seSBkZWZpbmVkIG9uIG1hdHJpY2VzLicpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBiZWdpbjogdGZjLlRlbnNvciA9IHRoaXMudGVuc29yLnNsaWNlKDAsIHIyKTtcbiAgICAgIGNvbnN0IHJvdzE6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5zbGljZShyMSwgMSk7XG4gICAgICBsZXQgcm93MjogdGZjLlRlbnNvciA9IHRoaXMudGVuc29yLnNsaWNlKHIyLCAxKTtcbiAgICAgIGNvbnN0IGZpbmFsOiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3Iuc2xpY2UocjIgKyAxLCB0aGlzLnRlbnNvci5zaGFwZVswXSAtIHIyIC0gMSk7XG4gICAgICByb3cyID0gcm93Mi5zdWIocm93MS5tdWwoYykpO1xuXG4gICAgICByZXR1cm4gYmVnaW4uY29uY2F0KFtyb3cyLCBmaW5hbF0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogU3dhcHMgdHdvIHJvd3Mgb2YgYSBtYXRyaXguXG4gICAqXG4gICAqIEBwYXJhbSByMSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHJvdyBiZWluZyBzd2FwcGVkXG4gICAqIEBwYXJhbSByMiB0aGUgaW5kZXggb2YgdGhlIHNlY29uZCByb3cgYmVpbmcgc3dhcHBlZFxuICAgKiBAcmV0dXJucyAgdGhlIHJlc3VsdGluZyBtYXRyaXhcbiAgICovXG4gIHN3YXBSb3dzKHIxOiBudW1iZXIsIHIyOiBudW1iZXIpOiBUZW5zb3Ige1xuICAgIGNvbnN0IGZpcnN0OiBudW1iZXIgPSBNYXRoLm1pbihyMSwgcjIpO1xuICAgIGNvbnN0IHNlY29uZDogbnVtYmVyID0gTWF0aC5tYXgocjEsIHIyKTtcblxuICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBpZiAodGhpcy50ZW5zb3Iuc2hhcGUubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRWxlbWVudGFyeSByb3cgb3BlcmF0aW9ucyBhcmUgb25seSBkZWZpbmVkIG9uIG1hdHJpY2VzLicpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBiZWdpbjogdGZjLlRlbnNvciA9IHRoaXMudGVuc29yLnNsaWNlKDAsIGZpcnN0KTtcbiAgICAgIGNvbnN0IHJvdzE6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5zbGljZShmaXJzdCwgMSk7XG4gICAgICBjb25zdCBtaWRkbGU6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5zbGljZShmaXJzdCArIDEsIHNlY29uZCAtIGZpcnN0IC0gMSk7XG4gICAgICBjb25zdCByb3cyOiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3Iuc2xpY2Uoc2Vjb25kLCAxKTtcbiAgICAgIGNvbnN0IGZpbmFsOiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3Iuc2xpY2Uoc2Vjb25kICsgMSwgdGhpcy50ZW5zb3Iuc2hhcGVbMF0gLSBzZWNvbmQgLSAxKTtcblxuICAgICAgcmV0dXJuIGJlZ2luLmNvbmNhdChbcm93MiwgbWlkZGxlLCByb3cxLCBmaW5hbF0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHJlc3VsdDogVGVuc29yID0gbmV3IFRlbnNvcih0KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbGllcyBhIHJvdyBvZiBhIG1hdHJpeCBieSBhIGNvbnN0YW50LlxuICAgKlxuICAgKiBAcGFyYW0gcjEgdGhlIGluZGV4IG9mIHRoZSByb3cgYmVpbmcgbXVsdGlwbGllZFxuICAgKiBAcGFyYW0gYyAgdGhlIGNvbnN0YW50IG11bHRpcGxpZXJcbiAgICogQHJldHVybnMgIHRoZSByZXN1bHRpbmcgbWF0cml4XG4gICAqL1xuICBtdWxSb3cocjE6IG51bWJlciwgYzogbnVtYmVyKTogVGVuc29yIHtcbiAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMudGVuc29yLnNoYXBlLmxlbmd0aCAhPT0gMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0VsZW1lbnRhcnkgcm93IG9wZXJhdGlvbnMgYXJlIG9ubHkgZGVmaW5lZCBvbiBtYXRyaWNlcy4nKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgYmVnaW46IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5zbGljZSgwLCByMSk7XG4gICAgICBsZXQgcm93MTogdGZjLlRlbnNvciA9IHRoaXMudGVuc29yLnNsaWNlKHIxLCAxKTtcbiAgICAgIGNvbnN0IGZpbmFsOiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3Iuc2xpY2UocjEgKyAxLCB0aGlzLnRlbnNvci5zaGFwZVswXSAtIHIxIC0gMSk7XG4gICAgICByb3cxID0gcm93MS5tdWwoYyk7XG5cbiAgICAgIHJldHVybiBiZWdpbi5jb25jYXQoW3JvdzEsIGZpbmFsXSk7XG4gICAgfSk7XG4gICAgY29uc3QgcmVzdWx0OiBUZW5zb3IgPSBuZXcgVGVuc29yKHQpO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVGVuc29yICh0aGUgZGF0YXR5cGUgZm9yIHN0b3JpbmcgdGVuc29ycykuXG4gKlxuICogQHBhcmFtIHggICB0aGUgbnVtZXJpY2FsIG9iamVjdCB1c2VkIHRvIGNyZWF0ZSB0aGUgdGVuc29yXG4gKiBAcmV0dXJucyAgIHRoZSB0ZW5zb3JcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZVRlbnNvciA9IGZ1bmN0aW9uIGNyZWF0ZVRlbnNvck9iamVjdChcbiAgeDogbnVtYmVyIHwgbnVtYmVyW10gfCBwNS5WZWN0b3IgfCB0ZmMuVGVuc29yIHwgVGVuc29yLFxuKTogVGVuc29yIHtcbiAgcmV0dXJuIG5ldyBUZW5zb3IoeCk7XG59O1xuIiwiaW1wb3J0ICogYXMgcDUgZnJvbSAncDUnO1xuXG5pbXBvcnQgeyBUZW5zb3IgfSBmcm9tICcuL2luZGV4JztcblxuXG4vLyA9PT09PSBDYWxjdWxhdGlvbiA9PT09PVxuXG4vKipcbiAqIEFkZHMgdHdvIHRlbnNvcnMgZWxlbWVudC13aXNlLlxuICpcbiAqIEBwYXJhbSBhIHRoZSBmaXJzdCB0ZW5zb3IgdG8gYmUgYWRkZWRcbiAqIEBwYXJhbSBiIHRoZSBzZWNvbmQgdGVuc29yIHRvIGJlIGFkZGVkXG4gKiBAcmV0dXJucyB0aGUgc3VtIG9mIHRoZSB0ZW5zb3JzXG4gKi9cbmV4cG9ydCBjb25zdCBhZGQgPSBmdW5jdGlvbiB0ZW5zb3JBZGQoXG4gIGE6IFRlbnNvcixcbiAgYjogbnVtYmVyIHwgcDUuVmVjdG9yIHwgVGVuc29yLFxuKTogVGVuc29yIHtcbiAgcmV0dXJuIGEuYWRkKGIpO1xufTtcblxuLyoqXG4gKiBTdWJ0cmFjdHMgdHdvIHRlbnNvcnMgZWxlbWVudC13aXNlLlxuICpcbiAqIEBwYXJhbSBhIHRoZSB0ZW5zb3IgdG8gc3VidHJhY3QgZnJvbVxuICogQHBhcmFtIGIgdGhlIHRlbnNvciB0byBiZSBzdWJ0cmFjdGVkXG4gKiBAcmV0dXJucyB0aGUgZGlmZmVyZW5jZSBvZiB0aGUgdGVuc29yc1xuICovXG5leHBvcnQgY29uc3Qgc3ViID0gZnVuY3Rpb24gdGVuc29yU3ViKFxuICBhOiBUZW5zb3IsXG4gIGI6IG51bWJlciB8IHA1LlZlY3RvciB8IFRlbnNvcixcbik6IFRlbnNvciB7XG4gIHJldHVybiBhLnN1YihiKTtcbn07XG5cbi8qKlxuICogTXVsdGlwbGllcyB0d28gdGVuc29ycyBlbGVtZW50LXdpc2UuXG4gKlxuICogQHBhcmFtIGEgdGhlIGZpcnN0IHRlbnNvciB0byBtdWx0aXBseVxuICogQHBhcmFtIGIgdGhlIHNlY29uZCB0ZW5zb3IgdG8gbXVsdGlwbHlcbiAqIEByZXR1cm5zIHRoZSBwcm9kdWN0IG9mIHRoZSB0ZW5zb3JzXG4gKi9cbmV4cG9ydCBjb25zdCBtdWx0ID0gZnVuY3Rpb24gdGVuc29yTXVsdChcbiAgYTogVGVuc29yLFxuICBiOiBudW1iZXIgfCBwNS5WZWN0b3IgfCBUZW5zb3IsXG4pOiBUZW5zb3Ige1xuICByZXR1cm4gYS5tdWx0KGIpO1xufTtcblxuXG4vKipcbiAqIERpdmlkZXMgdHdvIHRlbnNvcnMgZWxlbWVudC13aXNlLlxuICpcbiAqIEBwYXJhbSBhIHRoZSBkaXZpZGVuZCB0ZW5zb3JcbiAqIEBwYXJhbSBiIHRoZSBkaXZpc29yIHRlbnNvclxuICogQHJldHVybnMgdGhlIHF1b3RpZW50IG9mIHRoZSB0ZW5zb3JzXG4gKi9cbmV4cG9ydCBjb25zdCBkaXYgPSBmdW5jdGlvbiB0ZW5zb3JEaXYoXG4gIGE6IFRlbnNvcixcbiAgYjogbnVtYmVyIHwgcDUuVmVjdG9yIHwgVGVuc29yLFxuKTogVGVuc29yIHtcbiAgcmV0dXJuIGEuZGl2KGIpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gbWF0cmljZXMgYW5kL29yIHZlY3RvcnMuXG4gKiBOb3RlOiBPbmx5IHdvcmtzIHdoZW4gYm90aCBvcGVyYW5kcyBhcmUgcmFuayAxIG9yIDIuXG4gKlxuICogQHBhcmFtIGEgdGhlIGZpcnN0IHRlbnNvciBpbiB0aGUgZG90IG9wZXJhdGlvblxuICogQHBhcmFtIGIgdGhlIHNlY29uZCB0ZW5zb3IgaW4gdGhlIGRvdCBvcGVyYXRpb25cbiAqIEByZXR1cm5zIHRoZSBkb3QgcHJvZHVjdCBvZiB0aGUgdGVuc29yc1xuICovXG5leHBvcnQgY29uc3QgZG90ID0gZnVuY3Rpb24gdGVuc29yRG90KFxuICBhOiBUZW5zb3IsXG4gIGI6IHA1LlZlY3RvciB8IFRlbnNvcixcbik6IFRlbnNvciB7XG4gIHJldHVybiBhLmRvdChiKTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgYWJzb2x1dGUgdmFsdWUgKG1hZ25pdXRkZSkgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudC5cbiAqIFRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiBhIG51bWJlciBpcyBhbHdheXMgcG9zaXRpdmUuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHJldHVybnMgdGhlIGFic29sdXRlIHZhbHVlIG9mIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGFicyA9IGZ1bmN0aW9uIHRlbnNvckFicyh0OiBUZW5zb3IpOiBUZW5zb3Ige1xuICByZXR1cm4gdC5hYnMoKTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY2xvc2VzdCBpbnQgdmFsdWUgdGhhdCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAqIHRoZSB2YWx1ZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50LiBGb3IgZXhhbXBsZSwgY2VpbCg5LjAzKSByZXR1cm5zXG4gKiB0aGUgdmFsdWUgMTAuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHJldHVybnMgZWFjaCB0ZW5zb3IgZWxlbWVudCByb3VuZGVkIHVwXG4gKi9cbmV4cG9ydCBjb25zdCBjZWlsID0gZnVuY3Rpb24gdGVuc29yQ2VpbCh0OiBUZW5zb3IpOiBUZW5zb3Ige1xuICByZXR1cm4gdC5jZWlsKCk7XG59O1xuXG4vKipcbiAqIENvbnN0cmFpbnMgdGhlIHZhbHVlIG9mIGVhY2ggdGVuc29yIGVsZW1lbnQgYmV0d2VlbiBhIG1pbmltdW0gYW5kXG4gKiBtYXhpbXVtIHZhbHVlLlxuICpcbiAqIEBwYXJhbSB0ICAgIHRoZSBpbnB1dCB0ZW5zb3JcbiAqIEBwYXJhbSBsb3cgIHRoZSBtaW5pbXVtIHZhbHVlXG4gKiBAcGFyYW0gaGlnaCB0aGUgbWF4aW11bSB2YWx1ZVxuICogQHJldHVybnMgICAgZWFjaCB0ZW5zb3IgZWxlbWVudCBjb25zdHJhaW5lZCB0byB0aGUgZ2l2ZW4gcmFuZ2VcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbnN0cmFpbiA9IGZ1bmN0aW9uIHRlbnNvckNvbnN0cmFpbihcbiAgdDogVGVuc29yLFxuICBsb3c6IG51bWJlcixcbiAgaGlnaDogbnVtYmVyLFxuKTogVGVuc29yIHtcbiAgcmV0dXJuIHQuY29uc3RyYWluKGxvdywgaGlnaCk7XG59O1xuXG4vKipcbiAqIFJhaXNlIEV1bGVyJ3MgbnVtYmVyIGUgKDIuNzE4MjguLi4pIHRvIHRoZSBwb3dlciBvZiBlYWNoIHRlbnNvclxuICogZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gdCB0aGUgaW5wdXQgdGVuc29yXG4gKiBAcmV0dXJucyBlXm4gZm9yIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGV4cCA9IGZ1bmN0aW9uIHRlbnNvckV4cCh0OiBUZW5zb3IpOiBUZW5zb3Ige1xuICByZXR1cm4gdC5leHAoKTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgY2xvc2VzdCBpbnQgdmFsdWUgdGhhdCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG9cbiAqIHRoZSB2YWx1ZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50LiBGb3IgZXhhbXBsZSwgZmxvb3IoOS45NykgcmV0dXJuc1xuICogdGhlIHZhbHVlIDkuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHJldHVybnMgZWFjaCB0ZW5zb3IgZWxlbWVudCByb3VuZGVkIGRvd25cbiAqL1xuZXhwb3J0IGNvbnN0IGZsb29yID0gZnVuY3Rpb24gdGVuc29yRmxvb3IodDogVGVuc29yKTogVGVuc29yIHtcbiAgcmV0dXJuIHQuZmxvb3IoKTtcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlcyB0aGUgbmF0dXJhbCBsb2dhcml0aG0gKHRoZSBiYXNlLWUgbG9nYXJpdGhtKSBvZiBlYWNoIHRlbnNvclxuICogZWxlbWVudC4gVGhpcyBmdW5jdGlvbiBleHBlY3RzIGVhY2ggdGVuc29yIGVsZW1lbnQgdG8gYmUgYSB2YWx1ZVxuICogZ3JlYXRlciB0aGFuIDAuMC5cbiAqXG4gKiBAcGFyYW0gdCB0aGUgaW5wdXQgdGVuc29yXG4gKiBAcmV0dXJucyB0aGUgbmF0dXJhbCBsb2dhcml0aG0gb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICovXG5leHBvcnQgY29uc3QgbG9nID0gZnVuY3Rpb24gdGVuc29yTG9nKHQ6IFRlbnNvcik6IFRlbnNvciB7XG4gIHJldHVybiB0LmxvZygpO1xufTtcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHRoZSBsYXJnZXN0IHZhbHVlIGluIGEgdGVuc29yLCBhbmQgdGhlbiByZXR1cm5zIHRoYXQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHJldHVybnMgdGhlIG1heGltdW0gbnVtYmVyIGluIHRoZSB0ZW5zb3JcbiAqL1xuZXhwb3J0IGNvbnN0IG1heCA9IGZ1bmN0aW9uIHRlbnNvck1heCh0OiBUZW5zb3IpOiBudW1iZXIge1xuICByZXR1cm4gdC5tYXgoKTtcbn07XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB0aGUgc21hbGxlc3QgdmFsdWUgaW4gYSB0ZW5zb3IsIGFuZCB0aGVuIHJldHVybnMgdGhhdCB2YWx1ZS5cbiAqXG4gKiBAcGFyYW0gdCB0aGUgaW5wdXQgdGVuc29yXG4gKiBAcmV0dXJucyB0aGUgbWluaW11bSBudW1iZXIgaW4gdGhlIHRlbnNvclxuICovXG5leHBvcnQgY29uc3QgbWluID0gZnVuY3Rpb24gdGVuc29yTWluKHQ6IFRlbnNvcik6IG51bWJlciB7XG4gIHJldHVybiB0Lm1pbigpO1xufTtcblxuLyoqXG4gKiBQZXJmb3JtcyBtb2R1bGFyIChyZW1haW5kZXIpIGRpdmlzaW9uIG9uIHR3byB0ZW5zb3JzIGVsZW1lbnQtd2lzZS5cbiAqXG4gKiBAcGFyYW0gYSB0aGUgdGVuc29yIGRpdmlkZW5kXG4gKiBAcGFyYW0gYiB0aGUgdGVuc29yIGRpdmlzb3JcbiAqIEByZXR1cm5zIHRoZSByZW1haW5kZXIocylcbiAqL1xuZXhwb3J0IGNvbnN0IG1vZCA9IGZ1bmN0aW9uIHRlbnNvck1vZChcbiAgYTogVGVuc29yLFxuICBiOiBudW1iZXIgfCBUZW5zb3IsXG4pOiBUZW5zb3Ige1xuICByZXR1cm4gYS5tb2QoYik7XG59O1xuXG4vKipcbiAqIEZhY2lsaXRhdGVzIGV4cG9uZW50aWFsIGV4cHJlc3Npb25zLiBUaGUgcG93KCkgbWV0aG9kIGlzIGFuXG4gKiBlZmZpY2llbnQgd2F5IG9mIG11bHRpcGx5aW5nIHRlbnNvcnMgYnkgdGhlbXNlbHZlcyAob3IgdGhlaXJcbiAqIHJlY2lwcm9jYWxzKSBpbiBsYXJnZSBxdWFudGl0aWVzLlxuICpcbiAqIEBwYXJhbSBhIHRoZSBiYXNlIHRlbnNvclxuICogQHBhcmFtIGIgdGhlIHBvd2VyIGJ5IHdoaWNoIHRvIHJhaXNlIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IHBvdyA9IGZ1bmN0aW9uIHRlbnNvclBvdyhcbiAgYTogVGVuc29yLFxuICBiOiBudW1iZXIgfCBUZW5zb3IsXG4pOiBUZW5zb3Ige1xuICByZXR1cm4gYS5wb3coYik7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIGludGVnZXIgY2xvc2VzdCB0byBlYWNoIHRlbnNvciBlbGVtZW50LiBGb3JcbiAqIGV4YW1wbGUsIHJvdW5kKDEzMy44KSByZXR1cm5zIHRoZSB2YWx1ZSAxMzQuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHJldHVybnMgZWFjaCB0ZW5zb3IgZWxlbWVudCByb3VuZGVkXG4gKi9cbmV4cG9ydCBjb25zdCByb3VuZCA9IGZ1bmN0aW9uIHRlbnNvclJvdW5kKHQ6IFRlbnNvcik6IFRlbnNvciB7XG4gIHJldHVybiB0LnJvdW5kKCk7XG59O1xuXG4vKipcbiAqIFNxdWFyZXMgZWFjaCB0ZW5zb3IgZWxlbWVudCAobXVsdGlwbGllcyBhIG51bWJlciBieSBpdHNlbGYpLiBUaGVcbiAqIHJlc3VsdCBpcyBhbHdheXMgYSBwb3NpdGl2ZSBudW1iZXIsIGFzIG11bHRpcGx5aW5nIHR3byBuZWdhdGl2ZVxuICogbnVtYmVycyBhbHdheXMgeWllbGRzIGEgcG9zaXRpdmUgcmVzdWx0LiBGb3IgZXhhbXBsZSwgLTEgKiAtMSA9IDEuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHJldHVybnMgdGhlIHNxdWFyZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gKi9cbmV4cG9ydCBjb25zdCBzcSA9IGZ1bmN0aW9uIHRlbnNvclNxKHQ6IFRlbnNvcik6IFRlbnNvciB7XG4gIHJldHVybiB0LnNxKCk7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZSByb290IG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuIFRoZSBzcXVhcmUgcm9vdFxuICogb2YgYSBudW1iZXIgaXMgYWx3YXlzIHBvc2l0aXZlLCBldmVuIHRob3VnaCB0aGVyZSBtYXkgYmUgYSB2YWxpZFxuICogbmVnYXRpdmUgcm9vdC4gVGhlIHNxdWFyZSByb290IHMgb2YgbnVtYmVyIGEgaXMgc3VjaCB0aGF0IHMqcyA9IGEuXG4gKiBJdCBpcyB0aGUgb3Bwb3NpdGUgb2Ygc3F1YXJpbmcuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHJldHVybnMgdGhlIHNxdWFyZSByb290IG9mIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IHNxcnQgPSBmdW5jdGlvbiB0ZW5zb3JTcXJ0KHQ6IFRlbnNvcik6IFRlbnNvciB7XG4gIHJldHVybiB0LnNxcnQoKTtcbn07XG5cbi8vID09PT09IFJlZHVjdGlvbiA9PT09PVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHN1bSBvZiB0ZW5zb3IgZWxlbWVudHMgYWxvbmcgYW4gYXhpcy5cbiAqXG4gKiBAcGFyYW0gdCAgICB0aGUgaW5wdXQgdGVuc29yXG4gKiBAcGFyYW0gYXhpcyAob3B0aW9uYWwpIHRoZSBheGlzIHRvIHN1bSBhbG9uZ1xuICogQHJldHVybnMgICAgdGhlIHN1bVxuICovXG5leHBvcnQgY29uc3Qgc3VtID0gZnVuY3Rpb24gdGVuc29yU3VtKHQ6IFRlbnNvciwgYXhpcz86IG51bWJlciB8IG51bWJlcltdKTogVGVuc29yIHtcbiAgcmV0dXJuIHQuc3VtKGF4aXMpO1xufTtcblxuLy8gPT09PT0gVHJpZ29ub21ldHJ5ID09PT09XG5cbi8qKlxuICogVGhlIGludmVyc2Ugb2YgY29zKCksIHJldHVybnMgdGhlIGFyYyBjb3NpbmUgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudC5cbiAqIFRoaXMgZnVuY3Rpb24gZXhwZWN0cyB0aGUgdmFsdWVzIGluIHRoZSByYW5nZSBvZiAtMSB0byAxIGFuZCB2YWx1ZXNcbiAqIGFyZSByZXR1cm5lZCBpbiB0aGUgcmFuZ2UgMCB0byBQSSAoMy4xNDE1OTI3KS5cbiAqXG4gKiBAcGFyYW0gdCB0aGUgaW5wdXQgdGVuc29yXG4gKiBAcmV0dXJucyB0aGUgYXJjIGNvc2luZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gKi9cbmV4cG9ydCBjb25zdCBhY29zID0gZnVuY3Rpb24gdGVuc29yQWNvcyh0OiBUZW5zb3IpOiBUZW5zb3Ige1xuICByZXR1cm4gdC5hY29zKCk7XG59O1xuXG4vKipcbiAqIFRoZSBpbnZlcnNlIG9mIHNpbigpLCByZXR1cm5zIHRoZSBhcmMgc2luZSBvZiBhIGVhY2ggdGVuc29yIGVsZW1lbnQuXG4gKiBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIHZhbHVlcyBpbiB0aGUgcmFuZ2Ugb2YgLTEgdG8gMSBhbmQgdmFsdWVzXG4gKiBhcmUgcmV0dXJuZWQgaW4gdGhlIHJhbmdlIC1QSS8yIHRvIFBJLzIuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHJldHVybnMgdGhlIGFyYyBzaW5lIG9mIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGFzaW4gPSBmdW5jdGlvbiB0ZW5zb3JBc2luKHQ6IFRlbnNvcik6IFRlbnNvciB7XG4gIHJldHVybiB0LmFzaW4oKTtcbn07XG5cbi8qKlxuICogVGhlIGludmVyc2Ugb2YgdGFuKCksIHJldHVybnMgdGhlIGFyYyB0YW5nZW50IG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuXG4gKiBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIHZhbHVlcyBpbiB0aGUgcmFuZ2Ugb2YgLUluZmluaXR5IHRvIEluZmluaXR5XG4gKiAoZXhjbHVzaXZlKSBhbmQgdmFsdWVzIGFyZSByZXR1cm5lZCBpbiB0aGUgcmFuZ2UgLVBJLzIgdG8gUEkvMi5cbiAqXG4gKiBAcGFyYW0gdCB0aGUgaW5wdXQgdGVuc29yXG4gKiBAcmV0dXJucyB0aGUgYXJjIHRhbmdlbnQgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICovXG5leHBvcnQgY29uc3QgYXRhbiA9IGZ1bmN0aW9uIHRlbnNvckF0YW4odDogVGVuc29yKTogVGVuc29yIHtcbiAgcmV0dXJuIHQuYXRhbigpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBhbmdsZSAoaW4gcmFkaWFucykgZnJvbSBhIHNwZWNpZmllZCBwb2ludCB0byB0aGVcbiAqIGNvb3JkaW5hdGUgb3JpZ2luIGFzIG1lYXN1cmVkIGZyb20gdGhlIHBvc2l0aXZlIHgtYXhpcy4gVmFsdWVzIGFyZVxuICogcmV0dXJuZWQgYXMgYSBmbG9hdCBpbiB0aGUgcmFuZ2UgZnJvbSBQSSB0byAtUEkuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHBhcmFtIGIgdGhlIHgtY29vcmRpbmF0ZShzKSB1c2VkIGZvciBjb21wdXRpbmcgdGhlIGFyYyB0YW5nZW50XG4gKiBAcmV0dXJucyB0aGUgYXJjIHRhbmdlbnQgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICovXG5leHBvcnQgY29uc3QgYXRhbjIgPSBmdW5jdGlvbiB0ZW5zb3JBdGFuMih0OiBUZW5zb3IsIGI6IG51bWJlciB8IFRlbnNvcik6IFRlbnNvciB7XG4gIHJldHVybiB0LmF0YW4yKGIpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSBjb3NpbmUgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogZG9lcyBub3QgeWV0IHRha2UgaW50byBhY2NvdW50IHRoZSBjdXJyZW50IGFuZ2xlTW9kZS5cbiAqIFZhbHVlcyBhcmUgcmV0dXJuZWQgaW4gdGhlIHJhbmdlIC0xIHRvIDEuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHJldHVybnMgdGhlIGNvc2luZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gKi9cbmV4cG9ydCBjb25zdCBjb3MgPSBmdW5jdGlvbiB0ZW5zb3JDb3ModDogVGVuc29yKTogVGVuc29yIHtcbiAgcmV0dXJuIHQuY29zKCk7XG59O1xuXG4vKipcbiAqIENhbGN1bGF0ZXMgdGhlIHNpbmUgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudC4gVGhpcyBmdW5jdGlvblxuICogZG9lcyBub3QgeWV0IHRha2UgaW50byBhY2NvdW50IHRoZSBjdXJyZW50IGFuZ2xlTW9kZS5cbiAqIFZhbHVlcyBhcmUgcmV0dXJuZWQgaW4gdGhlIHJhbmdlIC0xIHRvIDEuXG4gKlxuICogQHBhcmFtIHQgdGhlIGlucHV0IHRlbnNvclxuICogQHJldHVybnMgdGhlIHNpbmUgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICovXG5leHBvcnQgY29uc3Qgc2luID0gZnVuY3Rpb24gdGVuc29yU2luKHQ6IFRlbnNvcik6IFRlbnNvciB7XG4gIHJldHVybiB0LnNpbigpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVzIHRoZSB0YW5nZW50IG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuIFRoaXMgZnVuY3Rpb25cbiAqIGRvZXMgbm90IHlldCB0YWtlIGludG8gYWNjb3VudCB0aGUgY3VycmVudCBhbmdsZU1vZGUuXG4gKiBWYWx1ZXMgYXJlIHJldHVybmVkIGluIHRoZSByYW5nZSBvZiBhbGwgcmVhbCBudW1iZXJzLlxuICpcbiAqIEBwYXJhbSB0IHRoZSBpbnB1dCB0ZW5zb3JcbiAqIEByZXR1cm5zIHRoZSB0YW5nZW50IG9mIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IHRhbiA9IGZ1bmN0aW9uIHRlbnNvclRhbih0OiBUZW5zb3IpOiBUZW5zb3Ige1xuICByZXR1cm4gdC50YW4oKTtcbn07XG5cbi8vID09PT09IENyZWF0aW9uIE1ldGhvZHMgPT09PT1cblxuLyoqXG4gKiBDcmVhdGVzIGEgY29tcGxleCB0ZW5zb3Igd2l0aCB0aGUgZ2l2ZW4gcmVhbCBhbmQgaW1hZ2luYXJ5XG4gKiBjb21wb25lbnRzLlxuICpcbiAqIEBwYXJhbSByZWFsIHRoZSByZWFsIGNvbXBvbmVudChzKVxuICogQHBhcmFtIGltYWcgdGhlIGltYWdpbmFyeSBjb21wb25lbnQocylcbiAqIEByZXR1cm5zICAgIHRoZSBjb21wbGV4IHRlbnNvclxuICovXG5leHBvcnQgY29uc3QgY29tcGxleCA9IGZ1bmN0aW9uIHRlbnNvckNvbXBsZXgoXG4gIHJlYWw6IG51bWJlciB8IFRlbnNvcixcbiAgaW1hZzogbnVtYmVyIHwgVGVuc29yLFxuKTogVGVuc29yIHtcbiAgcmV0dXJuIFRlbnNvci5jb21wbGV4KHJlYWwsIGltYWcpO1xufTtcblxuLyoqXG4gKiBHZXRzIGEgY29weSBvZiB0aGUgdGVuc29yLCByZXR1cm5zIGEgVGVuc29yIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gdCB0aGUgaW5wdXQgdGVuc29yXG4gKiBAcmV0dXJucyBhIGNvcHkgb2YgdGhlIHRlbnNvclxuICovXG5leHBvcnQgY29uc3QgY29weSA9IGZ1bmN0aW9uIHRlbnNvckNvcHkodDogVGVuc29yKTogVGVuc29yIHtcbiAgcmV0dXJuIHQuY29weSgpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGlkZW50aXR5IG1hdHJpeCB3aXRoIHRoZSBnaXZlbiBkaW1lbnNpb25zLlxuICpcbiAqIEBwYXJhbSBudW1Sb3dzIHRoZSBudW1iZXIgb2Ygcm93c1xuICogQHBhcmFtIG51bUNvbHMgKG9wdGlvbmFsKSB0aGUgbnVtYmVyIG9mIGNvbHVtbnNcbiAqIEByZXR1cm5zICAgICAgIHRoZSBpZGVudGl0eSBtYXRyaXhcbiAqL1xuZXhwb3J0IGNvbnN0IGV5ZSA9IGZ1bmN0aW9uIHRlbnNvckV5ZShudW1Sb3dzOiBudW1iZXIsIG51bUNvbHM/OiBudW1iZXIpOiBUZW5zb3Ige1xuICByZXR1cm4gVGVuc29yLmV5ZShudW1Sb3dzLCBudW1Db2xzKTtcbn07XG5cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGVuc29yIGZpbGxlZCB3aXRoIGEgZ2l2ZW4gdmFsdWUuXG4gKlxuICogQHBhcmFtIHNoYXBlIHRoZSBzaGFwZSBvZiB0aGUgdGVuc29yXG4gKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGZpbGwgdGhlIHRlbnNvciB3aXRoXG4gKiBAcmV0dXJucyAgICAgdGhlIGZpbGxlZCB0ZW5zb3JcbiAqL1xuZXhwb3J0IGNvbnN0IGZpbGwgPSBmdW5jdGlvbiB0ZW5zb3JGaWxsKHNoYXBlOiBudW1iZXJbXSwgdmFsdWU6IG51bWJlcik6IFRlbnNvciB7XG4gIHJldHVybiBUZW5zb3IuZmlsbChzaGFwZSwgdmFsdWUpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgdGVuc29yIGZpbGxlZCB3aXRoIGV2ZW5seSBzcGFjZWQgdmFsdWVzLlxuICpcbiAqIEBwYXJhbSBtaW4gdGhlIGxvd2VyIGJvdW5kIChpbmNsdXNpdmUpXG4gKiBAcGFyYW0gbWF4IHRoZSB1cHBlciBib3VuZCAoaW5jbHVzaXZlKVxuICogQHBhcmFtIG51bSB0aGUgbnVtYmVyIG9mIHZhbHVlcyB0byBnZW5lcmF0ZVxuICogQHJldHVybnMgICB0aGUgZmlsbGVkIHRlbnNvclxuICovXG5leHBvcnQgY29uc3QgbGluc3BhY2UgPSBmdW5jdGlvbiB0ZW5zb3JMaW5zcGFjZShcbiAgbWluOiBudW1iZXIsXG4gIG1heDogbnVtYmVyLFxuICBudW06IG51bWJlcixcbik6IFRlbnNvciB7XG4gIHJldHVybiBUZW5zb3IubGluc3BhY2UobWluLCBtYXgsIG51bSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0ZW5zb3IgZmlsbGVkIHdpdGggb25lcy5cbiAqXG4gKiBAcGFyYW0gc2hhcGUgdGhlIHNoYXBlIG9mIHRoZSB0ZW5zb3JcbiAqIEByZXR1cm5zICAgICB0aGUgZmlsbGVkIHRlbnNvclxuICovXG5leHBvcnQgY29uc3Qgb25lcyA9IGZ1bmN0aW9uIHRlbnNvck9uZXMoc2hhcGU6IG51bWJlcltdKTogVGVuc29yIHtcbiAgcmV0dXJuIFRlbnNvci5vbmVzKHNoYXBlKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIHRlbnNvciBmaWxsZWQgd2l0aCB1bmlmb3JtbHkgZGlzdHJpYnV0ZWQgcmFuZG9tIG51bWJlcnMuXG4gKlxuICogQHBhcmFtIHNoYXBlIHRoZSBzaGFwZSBvZiB0aGUgdGVuc29yXG4gKiBAcmV0dXJucyAgICAgdGhlIGZpbGxlZCB0ZW5zb3JcbiAqL1xuZXhwb3J0IGNvbnN0IHJhbmRvbSA9IGZ1bmN0aW9uIHRlbnNvclJhbmRvbShzaGFwZTogbnVtYmVyW10pOiBUZW5zb3Ige1xuICByZXR1cm4gVGVuc29yLnJhbmRvbShzaGFwZSk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0ZW5zb3IgZmlsbGVkIHdpdGggbm9ybWFsbHkgZGlzdHJpYnV0ZWQgcmFuZG9tIG51bWJlcnMuXG4gKlxuICogQHBhcmFtIHNoYXBlIHRoZSBzaGFwZSBvZiB0ZW5zb3JcbiAqIEBwYXJhbSBtZWFuICAob3B0aW9uYWwpIHRoZSBtZWFuXG4gKiBAcGFyYW0gc2QgICAgKG9wdGlvbmFsKSB0aGUgc3RhbmRhcmQgZGV2aWF0aW9uXG4gKiBAcmV0dXJucyAgICAgdGhlIGZpbGxlZCB0ZW5zb3JcbiAqL1xuZXhwb3J0IGNvbnN0IHJhbmRvbUdhdXNzaWFuID0gZnVuY3Rpb24gdGVuc29yUmFuZG9tR2F1c3NpYW4oXG4gIHNoYXBlOiBudW1iZXJbXSxcbiAgbWVhbj86IG51bWJlcixcbiAgc2Q/OiBudW1iZXIsXG4pOiBUZW5zb3Ige1xuICByZXR1cm4gVGVuc29yLnJhbmRvbUdhdXNzaWFuKHNoYXBlLCBtZWFuLCBzZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSB0ZW5zb3IgZmlsbGVkIHdpdGggbnVtYmVycyBpbiB0aGUgcmFuZ2UgcHJvdmlkZWQuXG4gKlxuICogQHBhcmFtIG1pbiAgdGhlIGxvd2VyIGJvdW5kIChpbmNsdXNpdmUpXG4gKiBAcGFyYW0gbWF4ICB0aGUgdXBwZXIgYm91bmQgKGV4Y2x1c2l2ZSlcbiAqIEBwYXJhbSBzdGVwIChvcHRpb25hbCkgdGhlIGludGVnZXIgc3BhY2luZyBiZXR3ZWVuIHZhbHVlc1xuICogQHJldHVybnMgICAgdGhlIGZpbGxlZCB0ZW5zb3JcbiAqL1xuZXhwb3J0IGNvbnN0IHJhbmdlID0gZnVuY3Rpb24gdGVuc29yUmFuZ2UoXG4gIG1pbjogbnVtYmVyLFxuICBtYXg6IG51bWJlcixcbiAgc3RlcD86IG51bWJlcixcbik6IFRlbnNvciB7XG4gIHJldHVybiBUZW5zb3IucmFuZ2UobWluLCBtYXgsIHN0ZXApO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgdGVuc29yIGZpbGxlZCB3aXRoIHplcm9zLlxuICpcbiAqIEBwYXJhbSBzaGFwZSB0aGUgc2hhcGUgb2YgdGhlIHRlbnNvclxuICogQHJldHVybnMgICAgIHRoZSBmaWxsZWQgdGVuc29yXG4gKi9cbmV4cG9ydCBjb25zdCB6ZXJvcyA9IGZ1bmN0aW9uIHRlbnNvclplcm9zKHNoYXBlOiBudW1iZXJbXSk6IFRlbnNvciB7XG4gIHJldHVybiBUZW5zb3IuemVyb3Moc2hhcGUpO1xufTtcblxuLy8gPT09PT0gVHJhbnNmb3JtYXRpb25zID09PT09XG5cbi8qKlxuICogRmxhdHRlbnMgdGhpcyB0ZW5zb3IgdG8gb25lIGRpbWVuc2lvbi5cbiAqXG4gKiBAcGFyYW0gdCB0aGUgaW5wdXQgdGVuc29yXG4gKiBAcmV0dXJucyB0aGUgZmxhdHRlbmVkIHRlbnNvclxuICovXG5leHBvcnQgY29uc3QgZmxhdHRlbiA9IGZ1bmN0aW9uIHRlbnNvckZsYXR0ZW4odDogVGVuc29yKTogVGVuc29yIHtcbiAgcmV0dXJuIHQuZmxhdHRlbigpO1xufTtcblxuLyoqXG4gKiBQYWRzIGEgdGVuc29yIHdpdGggYSBnaXZlbiB2YWx1ZSBhbmQgcGFkZGluZ3MuXG4gKlxuICogQHBhcmFtIHQgICAgICAgICAgICAgdGhlIGlucHV0IHRlbnNvclxuICogQHBhcmFtIHBhZGRpbmdzICAgICAgYW4gYXJyYXkgcHJlc2NyaWJpbmcgaG93IG11Y2ggdG8gcGFkIFtiZWZvcmUsIGFmdGVyXSBhbG9uZ1xuICogICAgICAgICAgICAgICAgICAgICAgZWFjaCB0ZW5zb3IgYXhpc1xuICogQHBhcmFtIGNvbnN0YW50VmFsdWUgKG9wdGlvbmFsKSB0aGUgcGFkIHZhbHVlIHRvIHVzZVxuICogQHJldHVybnMgICAgICAgICAgICAgdGhlIHBhZGRlZCB0ZW5zb3JcbiAqL1xuZXhwb3J0IGNvbnN0IHBhZCA9IGZ1bmN0aW9uIHRlbnNvclBhZChcbiAgdDogVGVuc29yLFxuICBwYWRkaW5nczogQXJyYXk8W251bWJlciwgbnVtYmVyXT4sXG4gIGNvbnN0YW50VmFsdWU/OiBudW1iZXIsXG4pOiBUZW5zb3Ige1xuICByZXR1cm4gdC5wYWQocGFkZGluZ3MsIGNvbnN0YW50VmFsdWUpO1xufTtcblxuLyoqXG4gKiBSZXNoYXBlcyBhIHRlbnNvciB0byBhIGdpdmVuIHNoYXBlLlxuICpcbiAqIEBwYXJhbSB0ICAgICB0aGUgaW5wdXQgdGVuc29yXG4gKiBAcGFyYW0gc2hhcGUgYW4gYXJyYXkgb2YgaW50ZWdlcnMgZGVmaW5pbmcgdGhlIG91dHB1dCB0ZW5zb3Igc2hhcGVcbiAqIEByZXR1cm5zICAgICB0aGUgcmVzaGFwZWQgdGVuc29yXG4gKi9cbmV4cG9ydCBjb25zdCByZXNoYXBlID0gZnVuY3Rpb24gdGVuc29yUmVzaGFwZShcbiAgdDogVGVuc29yLFxuICBzaGFwZTogbnVtYmVyW10sXG4pOiBUZW5zb3Ige1xuICByZXR1cm4gdC5yZXNoYXBlKHNoYXBlKTtcbn07XG5cbi8vID09PT09IFNsaWNpbmcgYW5kIEpvaW5pbmcgPT09PT1cblxuLyoqXG4gKiBDb25jYXRlbmF0ZXMgYW4gYXJyYXkgb2YgdGVuc29ycy5cbiAqXG4gKiBAcGFyYW0gdCAgICB0aGUgdGVuc29yKHMpIHRvIGJlIGNvbmNhdGVuYXRlZFxuICogQHBhcmFtIGF4aXMgKG9wdGlvbmFsKSB0aGUgYXhpcyB0byBjb25jYXRlbmF0ZSBhbG9uZ1xuICogQHJldHVybnMgICAgdGhlIGNvbmNhdGVuYXRlZCB0ZW5zb3JcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbmNhdCA9IGZ1bmN0aW9uIHRlbnNvckNvbmNhdCh0OiBUZW5zb3JbXSwgYXhpcz86IG51bWJlcik6IFRlbnNvciB7XG4gIGlmICh0Lmxlbmd0aCA8IDIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1R3byBvciBtb3JlIHRlbnNvcnMgbXVzdCBiZSBwcm92aWRlZC4nKTtcbiAgfVxuXG4gIGNvbnN0IGEgPSB0WzBdO1xuICBjb25zdCBiID0gdC5zbGljZSgxKTtcblxuICByZXR1cm4gYS5jb25jYXQoYiwgYXhpcyk7XG59O1xuXG4vKipcbiAqIFJldmVyc2VzIGEgdGVuc29yIGFsb25nIGEgc3BlY2lmaWNlZCBheGlzLlxuICpcbiAqIEBwYXJhbSB0ICAgIHRoZSBpbnB1dCB0ZW5zb3JcbiAqIEBwYXJhbSBheGlzIChvcHRpb25hbCkgdGhlIGF4aXMgdG8gcmV2ZXJzZSBhbG9uZ1xuICogQHJldHVybnMgICAgdGhlIHJldmVyc2VkIHRlbnNvclxuICovXG5leHBvcnQgY29uc3QgcmV2ZXJzZSA9IGZ1bmN0aW9uIHRlbnNvclJldmVyc2UoXG4gIHQ6IFRlbnNvcixcbiAgYXhpcz86IG51bWJlciB8IG51bWJlcltdLFxuKTogVGVuc29yIHtcbiAgcmV0dXJuIHQucmV2ZXJzZShheGlzKTtcbn07XG5cbi8qKlxuICogRXh0cmFjdHMgYSBzbGljZSBmcm9tIGEgdGVuc29yLlxuICpcbiAqIEBwYXJhbSB0ICAgICB0aGUgaW5wdXQgdGVuc29yXG4gKiBAcGFyYW0gYmVnaW4gdGhlIGNvb3JkaW5hdGVzIHRvIHN0YXJ0IHRoZSBzbGljZSBmcm9tXG4gKiBAcGFyYW0gc2l6ZSAgKG9wdGlvbmFsKSB0aGUgc2l6ZSBvZiB0aGUgc2xpY2VcbiAqIEByZXR1cm5zICAgICB0aGUgdGVuc29yIHNsaWNlXG4gKi9cbmV4cG9ydCBjb25zdCBzbGljZSA9IGZ1bmN0aW9uIHRlbnNvclNsaWNlKFxuICB0OiBUZW5zb3IsXG4gIGJlZ2luOiBudW1iZXIgfCBudW1iZXJbXSxcbiAgc2l6ZT86IG51bWJlciB8IG51bWJlcltdLFxuKTogVGVuc29yIHtcbiAgcmV0dXJuIHQuc2xpY2UoYmVnaW4sIHNpemUpO1xufTtcblxuLyoqXG4gKiBTcGxpdHMgYSB0ZW5zb3IgaW50byBzdWIgdGVuc29ycy5cbiAqXG4gKiBAcGFyYW0gdCAgICAgICAgICAgICAgIHRoZSBpbnB1dCB0ZW5zb3JcbiAqIEBwYXJhbSBudW1PclNpemVTcGxpdHMgZWl0aGVyIGFuIGludGVnZXIgaW5kaWNhdGluZyB0aGUgbnVtYmVyIG9mIHNwbGl0cyBhbG9uZyB0aGUgYXhpc1xuICogICAgICAgICAgICAgICAgICAgICAgICBvciBhbiBhcnJheSBvZiBpbnRlZ2VycyBjb250YWluaW5nIHRoZSBzaXplcyBvZiBlYWNoIG91dHB1dCB0ZW5zb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgYWxvbmcgdGhlIGF4aXMuIElmIGEgbnVtYmVyIHRoZW4gaXQgbXVzdCBldmVubHkgZGl2aWRlIHRoZSBheGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDsgb3RoZXJ3aXNlIHRoZSBzdW0gb2Ygc2l6ZXMgbXVzdCBtYXRjaCBheGlzIGxlbmd0aC5cbiAqIEBwYXJhbSBheGlzICAgICAgICAgICAgKG9wdGlvbmFsKSB0aGUgZGltZW5zaW9uIGFsb25nIHdoaWNoIHRvIHNwbGl0XG4gKiBAcmV0dXJucyAgICAgICAgICAgICAgIHRoZSBzcGxpdCB0ZW5zb3JcbiAqL1xuZXhwb3J0IGNvbnN0IHNwbGl0ID0gZnVuY3Rpb24gdGVuc29yU3BsaXQoXG4gIHQ6IFRlbnNvcixcbiAgbnVtT3JTaXplU3BsaXRzOiBudW1iZXIgfCBudW1iZXJbXSxcbiAgYXhpcz86IG51bWJlcixcbik6IFRlbnNvcltdIHtcbiAgcmV0dXJuIHQuc3BsaXQobnVtT3JTaXplU3BsaXRzLCBheGlzKTtcbn07XG5cbi8qKlxuICogU3RhY2tzIGFuIGFycmF5IG9mIHRlbnNvcnMgYWxvbmcgYW4gYXhpcy4gVGVuc29ycyBtdXN0IGhhdmUgdGhlIHNhbWUgcmFuay5cbiAqXG4gKiBAcGFyYW0gdGVuc29ycyB0aGUgdGVuc29ycyB0byBiZSBzdGFja2VkXG4gKiBAcGFyYW0gYXhpcyAgICAob3B0aW9uYWwpIHRoZSBheGlzIHRvIHN0YWNrIGFsb25nXG4gKiBAcmV0dXJucyAgICAgICB0aGUgc3RhY2tlZCB0ZW5zb3JcbiAqL1xuZXhwb3J0IGNvbnN0IHN0YWNrID0gZnVuY3Rpb24gdGVuc29yU3RhY2soXG4gIHRlbnNvcnM6IFRlbnNvcltdLFxuICBheGlzPzogbnVtYmVyLFxuKTogVGVuc29yIHtcbiAgcmV0dXJuIFRlbnNvci5zdGFjayh0ZW5zb3JzLCBheGlzKTtcbn07XG5cbi8qKlxuICogVW5zdGFja3MgYSByYW5rLVIgdGVuc29yIGludG8gYW4gYXJyYXkgb2YgcmFuay0oUi0xKSB0ZW5zb3JzLlxuICpcbiAqIEBwYXJhbSB0ICAgIHRoZSBpbnB1dCB0ZW5zb3JcbiAqIEBwYXJhbSBheGlzIChvcHRpb25hbCkgdGhlIGF4aXMgdG8gdW5zdGFjayBhbG9uZ1xuICogQHJldHVybnMgICAgdGhlIGFycmF5IG9mIHRlbnNvcnNcbiAqL1xuZXhwb3J0IGNvbnN0IHVuc3RhY2sgPSBmdW5jdGlvbiB0ZW5zb3JVbnN0YWNrKHQ6IFRlbnNvciwgYXhpcz86IG51bWJlcik6IFRlbnNvcltdIHtcbiAgcmV0dXJuIHQudW5zdGFjayhheGlzKTtcbn07XG4iLCJpbXBvcnQgKiBhcyB0ZmMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHsgVGVuc29yLCBjcmVhdGVUZW5zb3IgfSBmcm9tICcuL3RlbnNvci9pbmRleCc7XG5pbXBvcnQge1xuICBhZGQsXG4gIHN1YixcbiAgbXVsdCxcbiAgZGl2LFxuICBkb3QsXG4gIGFicyxcbiAgY2VpbCxcbiAgY29uc3RyYWluLFxuICBleHAsXG4gIGZsb29yLFxuICBsb2csXG4gIG1heCxcbiAgbWluLFxuICBtb2QsXG4gIHBvdyxcbiAgcm91bmQsXG4gIHNxLFxuICBzcXJ0LFxuICBzdW0sXG4gIGFjb3MsXG4gIGFzaW4sXG4gIGF0YW4sXG4gIGF0YW4yLFxuICBjb3MsXG4gIHNpbixcbiAgdGFuLFxuICBjb21wbGV4LFxuICBjb3B5LFxuICBleWUsXG4gIGZpbGwsXG4gIGxpbnNwYWNlLFxuICBvbmVzLFxuICByYW5kb20sXG4gIHJhbmRvbUdhdXNzaWFuLFxuICByYW5nZSxcbiAgemVyb3MsXG4gIGZsYXR0ZW4sXG4gIHBhZCxcbiAgcmVzaGFwZSxcbiAgY29uY2F0LFxuICByZXZlcnNlLFxuICBzbGljZSxcbiAgc3BsaXQsXG4gIHN0YWNrLFxuICB1bnN0YWNrLFxufSBmcm9tICcuL3RlbnNvci91ZnVuYyc7XG5cblxuZGVjbGFyZSBjb25zdCBwNTogYW55O1xuXG5wNS5wcm90b3R5cGUuY3JlYXRlVGVuc29yID0gY3JlYXRlVGVuc29yO1xuXG5jb25zdCB7IHRpZHkgfSA9IHRmYztcblxuZXhwb3J0IHtcbiAgYWRkLFxuICBzdWIsXG4gIG11bHQsXG4gIGRpdixcbiAgZG90LFxuICBhYnMsXG4gIGNlaWwsXG4gIGNvbnN0cmFpbixcbiAgZXhwLFxuICBmbG9vcixcbiAgbG9nLFxuICBtYXgsXG4gIG1pbixcbiAgbW9kLFxuICBwb3csXG4gIHJvdW5kLFxuICBzcSxcbiAgc3FydCxcbiAgc3VtLFxuICBhY29zLFxuICBhc2luLFxuICBhdGFuLFxuICBhdGFuMixcbiAgY29zLFxuICBzaW4sXG4gIHRhbixcbiAgY29tcGxleCxcbiAgY29weSxcbiAgZXllLFxuICBmaWxsLFxuICBsaW5zcGFjZSxcbiAgb25lcyxcbiAgcmFuZG9tLFxuICByYW5kb21HYXVzc2lhbixcbiAgcmFuZ2UsXG4gIHplcm9zLFxuICBmbGF0dGVuLFxuICBwYWQsXG4gIHJlc2hhcGUsXG4gIGNvbmNhdCxcbiAgcmV2ZXJzZSxcbiAgc2xpY2UsXG4gIHNwbGl0LFxuICBzdGFjayxcbiAgdW5zdGFjayxcbiAgdGZjLFxuICB0aWR5LFxuICBUZW5zb3IsXG59O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==
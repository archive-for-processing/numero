!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=12)}([function(t,e,n){"use strict";n.r(e),function(t,r,o,i){n.d(e,"AdadeltaOptimizer",(function(){return gf})),n.d(e,"AdagradOptimizer",(function(){return yf})),n.d(e,"AdamOptimizer",(function(){return xf})),n.d(e,"AdamaxOptimizer",(function(){return bf})),n.d(e,"DataStorage",(function(){return ro})),n.d(e,"ENV",(function(){return f})),n.d(e,"Environment",(function(){return l})),n.d(e,"KernelBackend",(function(){return oo})),n.d(e,"MomentumOptimizer",(function(){return Cf})),n.d(e,"Optimizer",(function(){return mf})),n.d(e,"RMSPropOptimizer",(function(){return Ef})),n.d(e,"Rank",(function(){return gt})),n.d(e,"Reduction",(function(){return wl})),n.d(e,"SGDOptimizer",(function(){return wf})),n.d(e,"Tensor",(function(){return vt})),n.d(e,"TensorBuffer",(function(){return ht})),n.d(e,"Variable",(function(){return mt})),n.d(e,"abs",(function(){return xs})),n.d(e,"acos",(function(){return bs})),n.d(e,"acosh",(function(){return ws})),n.d(e,"add",(function(){return bu})),n.d(e,"addN",(function(){return wu})),n.d(e,"addStrict",(function(){return Cu})),n.d(e,"all",(function(){return Wc})),n.d(e,"any",(function(){return Uc})),n.d(e,"argMax",(function(){return Vc})),n.d(e,"argMin",(function(){return zc})),n.d(e,"asin",(function(){return Cs})),n.d(e,"asinh",(function(){return Es})),n.d(e,"atan",(function(){return Rs})),n.d(e,"atan2",(function(){return Eu})),n.d(e,"atanh",(function(){return Is})),n.d(e,"avgPool",(function(){return Nc})),n.d(e,"avgPool3d",(function(){return _c})),n.d(e,"backend",(function(){return rn})),n.d(e,"backend_util",(function(){return Ro})),n.d(e,"basicLSTMCell",(function(){return il})),n.d(e,"batchNorm",(function(){return lu})),n.d(e,"batchNorm2d",(function(){return hu})),n.d(e,"batchNorm3d",(function(){return fu})),n.d(e,"batchNorm4d",(function(){return du})),n.d(e,"batchNormalization",(function(){return cu})),n.d(e,"batchNormalization2d",(function(){return au})),n.d(e,"batchNormalization3d",(function(){return su})),n.d(e,"batchNormalization4d",(function(){return uu})),n.d(e,"batchToSpaceND",(function(){return sr})),n.d(e,"booleanMaskAsync",(function(){return rc})),n.d(e,"browser",(function(){return nf})),n.d(e,"buffer",(function(){return ir})),n.d(e,"cast",(function(){return ur})),n.d(e,"ceil",(function(){return As})),n.d(e,"clipByValue",(function(){return Ss})),n.d(e,"clone",(function(){return cr})),n.d(e,"complex",(function(){return Cn})),n.d(e,"concat",(function(){return Vn})),n.d(e,"concat1d",(function(){return zn})),n.d(e,"concat2d",(function(){return Gn})),n.d(e,"concat3d",(function(){return Hn})),n.d(e,"concat4d",(function(){return qn})),n.d(e,"conv1d",(function(){return sc})),n.d(e,"conv2d",(function(){return uc})),n.d(e,"conv2dTranspose",(function(){return mc})),n.d(e,"conv3d",(function(){return cc})),n.d(e,"conv3dTranspose",(function(){return gc})),n.d(e,"cos",(function(){return ks})),n.d(e,"cosh",(function(){return Ns})),n.d(e,"cumsum",(function(){return lr})),n.d(e,"customGrad",(function(){return Zr})),n.d(e,"deprecationWarn",(function(){return Ve})),n.d(e,"depthToSpace",(function(){return hr})),n.d(e,"depthwiseConv2d",(function(){return fc})),n.d(e,"diag",(function(){return yl})),n.d(e,"disableDeprecationWarnings",(function(){return Ue})),n.d(e,"dispose",(function(){return je})),n.d(e,"disposeVariables",(function(){return ze})),n.d(e,"div",(function(){return Ru})),n.d(e,"divStrict",(function(){return Iu})),n.d(e,"dot",(function(){return xc})),n.d(e,"dropout",(function(){return xl})),n.d(e,"elu",(function(){return Yc})),n.d(e,"enableDebugMode",(function(){return We})),n.d(e,"enableProdMode",(function(){return Le})),n.d(e,"engine",(function(){return Ge})),n.d(e,"environment",(function(){return p})),n.d(e,"equal",(function(){return Vu})),n.d(e,"equalStrict",(function(){return zu})),n.d(e,"erf",(function(){return Ts})),n.d(e,"exp",(function(){return Ds})),n.d(e,"expandDims",(function(){return fr})),n.d(e,"expm1",(function(){return _s})),n.d(e,"eye",(function(){return dr})),n.d(e,"fft",(function(){return hl})),n.d(e,"fill",(function(){return Bn})),n.d(e,"findBackend",(function(){return tn})),n.d(e,"findBackendFactory",(function(){return en})),n.d(e,"floor",(function(){return Os})),n.d(e,"floorDiv",(function(){return Au})),n.d(e,"frame",(function(){return Rl})),n.d(e,"fused",(function(){return Ql})),n.d(e,"gather",(function(){return ec})),n.d(e,"gatherND",(function(){return gl})),n.d(e,"getBackend",(function(){return Je})),n.d(e,"grad",(function(){return Kr})),n.d(e,"grads",(function(){return Xr})),n.d(e,"greater",(function(){return Gu})),n.d(e,"greaterEqual",(function(){return Hu})),n.d(e,"greaterEqualStrict",(function(){return qu})),n.d(e,"greaterStrict",(function(){return $u})),n.d(e,"hammingWindow",(function(){return El})),n.d(e,"hannWindow",(function(){return Cl})),n.d(e,"ifft",(function(){return fl})),n.d(e,"imag",(function(){return Rn})),n.d(e,"image",(function(){return jl})),n.d(e,"inTopKAsync",(function(){return Sl})),n.d(e,"io",(function(){return Jh})),n.d(e,"irfft",(function(){return pl})),n.d(e,"isFinite",(function(){return qs})),n.d(e,"isInf",(function(){return Hs})),n.d(e,"isNaN",(function(){return Gs})),n.d(e,"keep",(function(){return Ke})),n.d(e,"leakyRelu",(function(){return Qc})),n.d(e,"less",(function(){return ju})),n.d(e,"lessEqual",(function(){return Ku})),n.d(e,"lessEqualStrict",(function(){return Xu})),n.d(e,"lessStrict",(function(){return Yu})),n.d(e,"linalg",(function(){return Vl})),n.d(e,"linspace",(function(){return Pn})),n.d(e,"localResponseNormalization",(function(){return rl})),n.d(e,"log",(function(){return Ms})),n.d(e,"log1p",(function(){return Fs})),n.d(e,"logSigmoid",(function(){return Bs})),n.d(e,"logSoftmax",(function(){return no})),n.d(e,"logSumExp",(function(){return Gc})),n.d(e,"logicalAnd",(function(){return pu})),n.d(e,"logicalNot",(function(){return vu})),n.d(e,"logicalOr",(function(){return mu})),n.d(e,"logicalXor",(function(){return gu})),n.d(e,"losses",(function(){return Pl})),n.d(e,"matMul",(function(){return yc})),n.d(e,"math",(function(){return tf})),n.d(e,"max",(function(){return Hc})),n.d(e,"maxPool",(function(){return kc})),n.d(e,"maxPool3d",(function(){return Dc})),n.d(e,"maximum",(function(){return Su})),n.d(e,"maximumStrict",(function(){return ku})),n.d(e,"mean",(function(){return qc})),n.d(e,"memory",(function(){return He})),n.d(e,"min",(function(){return $c})),n.d(e,"minimum",(function(){return Nu})),n.d(e,"minimumStrict",(function(){return Tu})),n.d(e,"mod",(function(){return Du})),n.d(e,"modStrict",(function(){return _u})),n.d(e,"moments",(function(){return jc})),n.d(e,"movingAverage",(function(){return sl})),n.d(e,"mul",(function(){return Ou})),n.d(e,"mulStrict",(function(){return Mu})),n.d(e,"multiRNNCell",(function(){return al})),n.d(e,"multinomial",(function(){return pr})),n.d(e,"neg",(function(){return Ps})),n.d(e,"nextFrame",(function(){return Sf})),n.d(e,"norm",(function(){return ol})),n.d(e,"notEqual",(function(){return Qu})),n.d(e,"notEqualStrict",(function(){return Ju})),n.d(e,"oneHot",(function(){return vr})),n.d(e,"ones",(function(){return Mn})),n.d(e,"onesLike",(function(){return Wn})),n.d(e,"op",(function(){return wn})),n.d(e,"outerProduct",(function(){return bc})),n.d(e,"pad",(function(){return mr})),n.d(e,"pad1d",(function(){return gr})),n.d(e,"pad2d",(function(){return yr})),n.d(e,"pad3d",(function(){return xr})),n.d(e,"pad4d",(function(){return br})),n.d(e,"pool",(function(){return Tc})),n.d(e,"pow",(function(){return Fu})),n.d(e,"powStrict",(function(){return Bu})),n.d(e,"prelu",(function(){return Jc})),n.d(e,"print",(function(){return ar})),n.d(e,"prod",(function(){return Xc})),n.d(e,"profile",(function(){return qe})),n.d(e,"rand",(function(){return wr})),n.d(e,"randomGamma",(function(){return Er})),n.d(e,"randomNormal",(function(){return Cr})),n.d(e,"randomUniform",(function(){return Rr})),n.d(e,"range",(function(){return Ln})),n.d(e,"ready",(function(){return Qe})),n.d(e,"real",(function(){return En})),n.d(e,"reciprocal",(function(){return Ls})),n.d(e,"registerBackend",(function(){return nn})),n.d(e,"relu",(function(){return Zc})),n.d(e,"relu6",(function(){return tl})),n.d(e,"removeBackend",(function(){return Ze})),n.d(e,"reshape",(function(){return Ir})),n.d(e,"reverse",(function(){return wc})),n.d(e,"reverse1d",(function(){return Cc})),n.d(e,"reverse2d",(function(){return Ec})),n.d(e,"reverse3d",(function(){return Rc})),n.d(e,"reverse4d",(function(){return Ic})),n.d(e,"rfft",(function(){return dl})),n.d(e,"round",(function(){return Ws})),n.d(e,"rsqrt",(function(){return Us})),n.d(e,"scalar",(function(){return Sn})),n.d(e,"scatterND",(function(){return ll})),n.d(e,"selu",(function(){return el})),n.d(e,"separableConv2d",(function(){return vc})),n.d(e,"serialization",(function(){return sf})),n.d(e,"setBackend",(function(){return Ye})),n.d(e,"setPlatform",(function(){return on})),n.d(e,"setdiff1dAsync",(function(){return _r})),n.d(e,"sigmoid",(function(){return Vs})),n.d(e,"sign",(function(){return zs})),n.d(e,"signal",(function(){return Al})),n.d(e,"sin",(function(){return $s})),n.d(e,"sinh",(function(){return js})),n.d(e,"slice",(function(){return Oc})),n.d(e,"slice1d",(function(){return Mc})),n.d(e,"slice2d",(function(){return Fc})),n.d(e,"slice3d",(function(){return Bc})),n.d(e,"slice4d",(function(){return Pc})),n.d(e,"softmax",(function(){return eo})),n.d(e,"softplus",(function(){return Ks})),n.d(e,"spaceToBatchND",(function(){return Ar})),n.d(e,"sparseToDense",(function(){return ml})),n.d(e,"spectral",(function(){return vl})),n.d(e,"split",(function(){return $n})),n.d(e,"sqrt",(function(){return Xs})),n.d(e,"square",(function(){return Ys})),n.d(e,"squaredDifference",(function(){return Pu})),n.d(e,"squaredDifferenceStrict",(function(){return Lu})),n.d(e,"squeeze",(function(){return Sr})),n.d(e,"stack",(function(){return kr})),n.d(e,"step",(function(){return Qs})),n.d(e,"stft",(function(){return Il})),n.d(e,"stridedSlice",(function(){return ul})),n.d(e,"sub",(function(){return Wu})),n.d(e,"subStrict",(function(){return Uu})),n.d(e,"sum",(function(){return Kc})),n.d(e,"tan",(function(){return Js})),n.d(e,"tanh",(function(){return Zs})),n.d(e,"tensor",(function(){return In})),n.d(e,"tensor1d",(function(){return kn})),n.d(e,"tensor2d",(function(){return Nn})),n.d(e,"tensor3d",(function(){return Tn})),n.d(e,"tensor4d",(function(){return Dn})),n.d(e,"tensor5d",(function(){return _n})),n.d(e,"tensor6d",(function(){return On})),n.d(e,"tensor_util",(function(){return Tt})),n.d(e,"test_util",(function(){return df})),n.d(e,"tidy",(function(){return $e})),n.d(e,"tile",(function(){return Nr})),n.d(e,"time",(function(){return Xe})),n.d(e,"topk",(function(){return cl})),n.d(e,"train",(function(){return If})),n.d(e,"transpose",(function(){return nl})),n.d(e,"truncatedNormal",(function(){return Tr})),n.d(e,"unsortedSegmentSum",(function(){return nc})),n.d(e,"unstack",(function(){return Dr})),n.d(e,"util",(function(){return nt})),n.d(e,"valueAndGrad",(function(){return Yr})),n.d(e,"valueAndGrads",(function(){return Qr})),n.d(e,"variable",(function(){return Ct})),n.d(e,"variableGrads",(function(){return Jr})),n.d(e,"version_core",(function(){return pf})),n.d(e,"webgl",(function(){return vf})),n.d(e,"where",(function(){return yu})),n.d(e,"whereAsync",(function(){return xu})),n.d(e,"zeros",(function(){return Fn})),n.d(e,"zerosLike",(function(){return Un}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var a=function(t,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function s(t,e){function n(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function u(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?o(t.value):new n((function(e){e(t.value)})).then(a,s)}u((r=r.apply(t,e||[])).next())}))}function c(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var l=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,e){null!=this.platform&&console.warn("Platform "+this.platformName+" has already been set. Overwriting the platform with "+e+"."),this.platformName=t,this.platform=e},t.prototype.registerFlag=function(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn("Setting feature override from URL "+t+": "+r+"."),this.set(t,r)}},t.prototype.get=function(t){return t in this.flags?this.flags[t]:(this.flags[t]=this.evaluateFlag(t),this.flags[t])},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,"features",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e){if(null==this.flagRegistry[t])throw new Error("Cannot set flag "+t+" as it has not been registered.");this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error("Cannot evaluate flag '"+t+"': no evaluation function found.");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var e=h(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((function(e){var n=e.split(":"),r=n[0],o=n[1];t.urlFlags[r]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error("Could not parse value flag value "+e+" for flag "+t+".")}(r,o)}))}},t}();function h(t){var e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")})),e}var f=null;function d(t){f=t}var p=Object.freeze({Environment:l,getQueryParams:h,get ENV(){return f},setEnvironmentGlobal:d});function v(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function m(t,e,n){return Math.max(t,Math.min(e,n))}function g(t){return t%2==0?t:t+1}function y(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function x(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function b(t,e,n){void 0===n&&(n=""),x(R(t,e),(function(){return n+" Shapes "+t+" and "+e+" must match"}))}function w(t){x(null!=t,(function(){return"The input to the tensor constructor must be a non-null value."}))}function C(t,e,n){if(void 0===e&&(e=[]),void 0===n&&(n=!1),null==e&&(e=[]),Array.isArray(t)||L(t)&&!n)for(var r=0;r<t.length;++r)C(t[r],e,n);else e.push(t);return e}function E(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function R(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function I(t){return t%1==0}function A(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)}function S(t){var e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function k(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function N(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise((function(r,o){var i=0,a=function(){if(t())r();else{var s=e(++i);null!=n&&i>=n?o():setTimeout(a,s)}};a()}))}function T(t,e){for(var n=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)n*=t[o];else if(-1===t[o]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+o);r=o}else if(t[o]<0)throw Error("Shapes can not be < 0. Found "+t[o]+" at dim "+o);if(-1===r){if(e>0&&e!==n)throw Error("Size("+e+") must match the product of shape "+t);return t}if(0===n)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(e%n!=0)throw Error("The implicit shape can't be a fractional number. Got "+e+" / "+n);var i=t.slice();return i[r]=e/n,i}function D(t,e){var n=e.length;return x((t=null==t?e.map((function(t,e){return e})):[].concat(t)).every((function(t){return t>=-n&&t<n})),(function(){return"All values in axis param must be in range [-"+n+", "+n+") but got axis "+t})),x(t.every((function(t){return I(t)})),(function(){return"All values in axis param must be integers but got axis "+t})),t.map((function(t){return t<0?n+t:t}))}function _(t,e){for(var n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,i=null==e||o?null:D(e,t).sort(),a=0,s=0;s<t.length;++s){if(null!=i){if(i[a]===s&&1!==t[s])throw new Error("Can't squeeze axis "+s+" since its dim '"+t[s]+"' is not 1");(null==i[a]||i[a]>s)&&1===t[s]&&(n.push(t[s]),r.push(s)),i[a]<=s&&a++}1!==t[s]&&(n.push(t[s]),r.push(s))}return{newShape:n,keptDims:r}}function O(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function M(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function F(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+e+" being uploaded contains "+r+".")}}function B(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function P(t,e){return!("complex64"===e||"float32"===e&&"complex64"!==t||"int32"===e&&"float32"!==t&&"complex64"!==t||"bool"===e&&"bool"===t)}function L(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function W(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function U(t){if(null==t)return 0;var e=0;return t.forEach((function(t){return e+=t.length})),e}function V(t){return"string"==typeof t||t instanceof String}function z(t){return"boolean"==typeof t}function G(t){return"number"==typeof t}function H(t){return Array.isArray(t)?H(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":G(t)?"float32":V(t)?"string":z(t)?"bool":"float32"}function q(t){return!!(t&&t.constructor&&t.call&&t.apply)}function $(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}function j(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function K(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=C(t)),n&&F(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){for(var r=new Uint8Array(t.length),o=0;o<r.length;++o)0!==Math.round(t[o])&&(r[o]=1);return r}throw new Error("Unknown data type "+e)}function X(t,e){if(0===t.length)return e[0];var n=t.reduce((function(t,e){return t*e}));if(0===n)return[];if(n!==e.length)throw new Error("["+t+"] does not match the input size.");return function t(e,n,r){var o=new Array;if(1===n.length)for(var i=n[0],a=0;a<i;a++)o[a]=r[e+a];else{i=n[0];var s=n.slice(1),u=s.reduce((function(t,e){return t*e}));for(a=0;a<i;a++)o[a]=t(e+a*u,s,r)}return o}(0,t,e)}function Y(t,e){for(var n=Q(t,e),r=0;r<n.length;r++)n[r]=1;return n}function Q(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function J(){return f.platform.now()}function Z(t){t.forEach((function(e){x(Number.isInteger(e)&&e>=0,(function(){return"Tensor must have a shape comprised of positive integers but got shape ["+t+"]."}))}))}function tt(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",f.platform.encode(t,e)}function et(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",f.platform.decode(t,e)}var nt=Object.freeze({shuffle:v,clamp:m,nearestLargerEven:g,sum:y,randUniform:function(t,e){var n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){for(var n=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(e[r]);n+=o*o}return n},assert:x,assertShapesMatch:b,assertNonNull:w,flatten:C,sizeFromShape:E,isScalarShape:function(t){return 0===t.length},arraysEqual:R,isInt:I,tanh:A,sizeToSquarishShape:S,createShuffledIndices:function(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return v(e),e},rightPad:k,repeatedTry:N,inferFromImplicitShape:T,parseAxisParam:D,squeezeShape:_,getTypedArrayFromDType:O,getArrayFromDType:M,checkConversionForErrors:F,isValidDtype:B,hasEncodingLoss:P,isTypedArray:L,bytesPerElement:W,bytesFromStringArray:U,isString:V,isBoolean:z,isNumber:G,inferDtype:H,isFunction:q,nearestDivisor:$,computeStrides:j,toTypedArray:K,toNestedArray:X,makeOnesTypedArray:Y,makeZerosTypedArray:Q,now:J,assertNonNegativeIntegerDimensions:Z,fetch:function(t,e){return f.platform.fetch(t,e)},encodeString:tt,decodeString:et}),rt=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ot)}return t.prototype.profileKernel=function(t,e,n){var r,o=this,i=this.backendTimer.time((function(){r=n()}));return(Array.isArray(r)?r:[r]).forEach((function(n){n.data().then((function(r){!function(t,e,n){if("float32"!==e)return!1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn("Found "+o+" in the result of '"+n+"'"),!0}}(r,n.dtype,t),i.then((function(i){var a="";null!=i.getExtraProfileInfo&&(a=i.getExtraProfileInfo()),o.logger.logKernelProfile(t,n,r,i.kernelMs,e,a)}))}))})),r},t}(),ot=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r,o,i){var a=k(r+"ms",9),s=k(t,25),u=e.rank,c=e.size,l=k(e.shape.toString(),14),h="";for(var f in o){var d=o[f].shape,p=d.length;h+=f+": "+p+"D "+(p>0?d:"")+" "}console.log("%c"+s+"\t%c"+a+"\t%c"+u+"D "+l+"\t%c"+c+"\t%c"+h+"\t%c"+i,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")},t}(),it=20,at=3,st=7;function ut(t,e,n){return k(Array.isArray(t)?parseFloat(t[0].toFixed(st))+" + "+parseFloat(t[1].toFixed(st))+"j":V(t)?"'"+t+"'":"bool"===n?ct(t):parseFloat(t.toFixed(st)).toString(),e)}function ct(t){return 0===t?"false":"true"}function lt(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}var ht=function(){function t(t,e,n){var r=this;if(this.dtype=e,this.shape=t.slice(),this.size=E(t),null!=n){var o=n.length;x(o===this.size,(function(){return"Length of values '"+o+"' does not match the size inferred by the shape '"+r.size+"'."}))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||M(e,this.size),this.strides=j(t)}return t.prototype.set=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),x(n.length===this.rank,(function(){return"The number of provided coordinates ("+n.length+") must match the rank ("+e.rank+")"}));var o=this.locToIndex(n);this.values[o]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=0,r=0,o=t;r<o.length;r++){var i=o[r];if(i<0||i>=this.shape[n]){var a="Requested out of range element at "+t+".   Buffer shape="+this.shape;throw new Error(a)}n++}for(var s=t[t.length-1],u=0;u<t.length-1;++u)s+=this.strides[u]*t[u];return this.values[s]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return vt.make(this.shape,{values:this.values},this.dtype)},t}(),ft=null,dt=null,pt=null,vt=function(){function t(t,e,n,r,o){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=E(t),this.strides=j(t),this.dataId=null!=r?r:{},this.id=ft().nextTensorId(),this.rankType=this.rank<5?this.rank.toString():"higher",ft().registerTensor(this,o),null!=n&&ft().write(o,this.dataId,n)}return t.make=function(e,n,r,o){var i=n.values;return null!=n.values&&"string"===r&&V(n.values[0])&&(i=n.values.map((function(t){return tt(t)}))),new t(e,r,i,n.dataId,o)},t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),x(1===this.size,(function(){return"The array must have only 1 element."})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,o){return this.throwIfDisposed(),this.reshape([t,e,n,r,o])},t.prototype.asType=function(t){return this.throwIfDisposed(),dt.cast(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,dt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return dt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,X(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return X(this.shape,this.dataSync())},t.prototype.data=function(){return u(this,void 0,void 0,(function(){var t,e;return c(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),t=ft().read(this.dataId),"string"!==this.dtype?[3,2]:[4,t];case 1:e=n.sent();try{return[2,e.map((function(t){return et(t)}))]}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}n.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=ft().readSync(this.dataId);if("string"===this.dtype)try{return t.map((function(t){return et(t)}))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t},t.prototype.bytes=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),[4,ft().read(this.dataId)];case 1:return t=e.sent(),"string"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(ft().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),dt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),dt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),dt.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),dt.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),dt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),dt.clone(this)},t.prototype.oneHot=function(t,e,n){return this.throwIfDisposed(),dt.oneHot(this,t,e,n)},t.prototype.toString=function(t){return void 0===t&&(t=!1),function(t,e,n,r){var o=j(e),i=function(t,e,n,r){var o=E(e),i=r[r.length-1],a=new Array(i).fill(0),s=e.length,u="complex64"===n?lt(t):t;if(s>1)for(var c=0;c<o/i;c++)for(var l=c*i,h=0;h<i;h++)a[h]=Math.max(a[h],ut(u[l+h],0,n).length);return a}(t,e,n,o),a=e.length,s=function t(e,n,r,o,i,a){void 0===a&&(a=!0);var s="complex64"===r?2:1,u=n[0],c=n.length;if(0===c)return"complex64"===r?[ut(lt(e)[0],0,r)]:"bool"===r?[ct(e[0])]:[e[0].toString()];if(1===c){if(u>it){var l=at*s,h=Array.from(e.slice(0,l)),f=Array.from(e.slice(u-at*s,u));return"complex64"===r&&(h=lt(h),f=lt(f)),["["+h.map((function(t,e){return ut(t,i[e],r)})).join(", ")+", ..., "+f.map((function(t,e){return ut(t,i[u-at+e],r)})).join(", ")+"]"]}return["["+("complex64"===r?lt(e):Array.from(e)).map((function(t,e){return ut(t,i[e],r)})).join(", ")+"]"]}var d=n.slice(1),p=o.slice(1),v=o[0]*s,m=[];if(u>it){for(var g=0;g<at;g++){var y=(x=g*v)+v;m.push.apply(m,t(e.slice(x,y),d,r,p,i,!1))}m.push("...");for(g=u-at;g<u;g++){y=(x=g*v)+v;m.push.apply(m,t(e.slice(x,y),d,r,p,i,g===u-1))}}else for(g=0;g<u;g++){var x;y=(x=g*v)+v;m.push.apply(m,t(e.slice(x,y),d,r,p,i,g===u-1))}var b=2===c?",":"";m[0]="["+m[0]+b;for(g=1;g<m.length-1;g++)m[g]=" "+m[g]+b;var w=",\n";for(g=2;g<c;g++)w+="\n";return m[m.length-1]=" "+m[m.length-1]+"]"+(a?"":w),m}(t,e,n,o,i),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+a),u.push("  shape: ["+e+"]"),u.push("  values:")),u.push(s.map((function(t){return"    "+t})).join("\n")),u.join("\n")}(this.dataSync(),this.shape,this.dtype,t)},t.prototype.tile=function(t){return this.throwIfDisposed(),dt.tile(this,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),dt.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),dt.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),dt.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t="euclidean"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),dt.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),dt.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),dt.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),dt.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),dt.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),dt.stack([this,t],e)},t.prototype.unstack=function(t){return void 0===t&&(t=0),dt.unstack(this,t)},t.prototype.pad=function(t,e){return void 0===e&&(e=0),dt.pad(this,t,e)},t.prototype.batchNormalization=function(t,e,n,r,o){return void 0===n&&(n=.001),pt("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),this.batchNorm(t,e,o,r,n)},t.prototype.batchNorm=function(t,e,n,r,o){return void 0===o&&(o=.001),this.throwIfDisposed(),dt.batchNorm(this,t,e,n,r,o)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),dt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),dt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),dt.cast(this,t)},t.prototype.add=function(t){return this.throwIfDisposed(),dt.add(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),dt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),dt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),dt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),dt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),dt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),dt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),dt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),dt.mulStrict(this,t)},t.prototype.div=function(t){return this.throwIfDisposed(),dt.div(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),dt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),dt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),dt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),dt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),dt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),dt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),dt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),dt.modStrict(this,t)},t.prototype.squaredDifference=function(t){return this.throwIfDisposed(),dt.squaredDifference(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),dt.squaredDifferenceStrict(this,t)},t.prototype.transpose=function(t){return this.throwIfDisposed(),dt.transpose(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),dt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),dt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),dt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),dt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),dt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),dt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),dt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),dt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),dt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),dt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),dt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),dt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),dt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),dt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),dt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),dt.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),dt.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),dt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),dt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),dt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),dt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),dt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),dt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),dt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),dt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),dt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),dt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),dt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),dt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),dt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),dt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),dt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),dt.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),dt.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),dt.relu(this)},t.prototype.relu6=function(){return this.throwIfDisposed(),dt.relu6(this)},t.prototype.elu=function(){return this.throwIfDisposed(),dt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),dt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),dt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),dt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),dt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),dt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),dt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),dt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),dt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),dt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),dt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),dt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),dt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),dt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),dt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),dt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),dt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),dt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),dt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),dt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),dt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),dt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),dt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),dt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),dt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),dt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),dt.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),dt.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,o,i){return void 0===r&&(r="NWC"),void 0===o&&(o=1),this.throwIfDisposed(),dt.conv1d(this,t,e,n,r,o,i)},t.prototype.conv2d=function(t,e,n,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),dt.conv2d(this,t,e,n,r,o,i)},t.prototype.conv2dTranspose=function(t,e,n,r,o){return this.throwIfDisposed(),dt.conv2dTranspose(this,t,e,n,r,o)},t.prototype.depthwiseConv2D=function(t,e,n,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),dt.depthwiseConv2d(this,t,e,n,r,o,i)},t.prototype.separableConv2d=function(t,e,n,r,o,i){return void 0===o&&(o=[1,1]),void 0===i&&(i="NHWC"),this.throwIfDisposed(),dt.separableConv2d(this,t,e,n,r,o,i)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),dt.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),dt.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),dt.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,o){return this.throwIfDisposed(),dt.pool(this,t,e,n,r,o)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),mt.variable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),dt.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),dt.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),dt.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),dt.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,o,i,a,s){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===s&&(s=0),this.throwIfDisposed(),dt.stridedSlice(this,t,e,n,r,o,i,a,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),dt.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),dt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),dt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),dt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),dt.spectral.irfft(this)},t}();Object.defineProperty(vt,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var mt=function(t){function e(e,n,r){void 0===n&&(n=!0);var o=t.call(this,e.shape,e.dtype,null,e.dataId)||this;o.trainable=n,o.name=r,null==o.name&&(o.name=ft().nextVariableId().toString());try{ft().registerVariable(o)}catch(t){throw ft().disposeTensor(o),t}return o}return s(e,t),e.variable=function(t,n,r,o){return void 0===n&&(n=!0),null!=o&&o!==t.dtype&&(t=t.asType(o)),new e(t,n,r)},e.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!R(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");ft().disposeTensor(this),this.dataId=t.dataId,ft().registerTensor(this)},e.prototype.dispose=function(){ft().disposeVariable(this),this.isDisposedInternal=!0},e}(vt);Object.defineProperty(mt,Symbol.hasInstance,{value:function(t){return t instanceof vt&&null!=t.assign&&t.assign instanceof Function}});var gt,yt,xt,bt,wt,Ct=mt.variable;!function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(gt||(gt={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(yt||(yt={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(xt||(xt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(bt||(bt={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(wt||(wt={}));var Et={float32:bt,int32:yt,bool:xt,complex64:wt};function Rt(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error("Can not upcast "+t+" with "+e)}return Et[t][e]}function It(t){return Rt(t,"int32")}function At(t,e){if(t.dtype===e.dtype)return[t,e];var n=Rt(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function St(t,e){x(t.dtype===e.dtype,(function(){return"The dtypes of the first("+t.dtype+") and second("+e.dtype+") input must match"}))}function kt(t){var e=[];return function t(e,n,r){if(null!=e)if(e instanceof vt)n.push(e);else if(o=e,Array.isArray(o)||"object"==typeof o){var o,i=e;for(var a in i){var s=i[a];r.has(s)||(r.add(s),t(s,n,r))}}}(t,e,new Set),e}var Nt,Tt=Object.freeze({makeTypesMatch:At,assertTypesMatch:St,isTensorInList:function(t,e){for(var n=0;n<e.length;n++)if(e[n].id===t.id)return!0;return!1},getTensorsInContainer:kt}),Dt=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),_t=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Dt}return t.prototype.ready=function(){return u(this,void 0,void 0,(function(){var t,e,n;return c(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),e=0,r.label=1;case 1:return e<t.length?(n=t[e],[4,this.initializeBackend(n).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(n)]:[3,4];case 3:return r.sent(),[2];case 4:return e++,[3,1];case 5:throw new Error("Could not initialize any backends, all backend initializations failed.")}}))}))},Object.defineProperty(t.prototype,"backend",{get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '"+this.backendName+"' has not yet been initialized. Make sure to await tf.ready() before calling other methods");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),e=t.name;if(t.asyncInit)throw new Error("The highest priority backend '"+e+"' has not yet been initialized. Make sure to await tf.ready() before calling other methods");this.setBackend(e)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,e,n){return void 0===n&&(n=1),t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)},t.prototype.setBackend=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(o){switch(o.label){case 0:if(null==this.registryFactory[t])throw new Error("Backend name '"+t+"' not found in registry");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,e=this.initializeBackend(t),n=e.success,e.asyncInit?[4,n]:[3,2]);case 1:return r=o.sent(),[3,3];case 2:r=n,o.label=3;case 3:if(!r)return[2,!1];o.label=4;case 4:return this.backendInstance=this.registry[t],this.profiler=new rt(this.backendInstance),[2,!0]}}))}))},t.prototype.initializeBackend=function(t){var e=this,n=this.registryFactory[t];if(null==n)throw new Error("Cannot initialize backend "+t+", no registration found.");try{var r=n.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,i=r.then((function(n){return!(o<e.pendingBackendInitId||(e.registry[t]=n,e.pendingBackendInit=null,0))})).catch((function(n){return!(o<e.pendingBackendInitId||(e.pendingBackendInit=null,console.warn("Initialization of backend "+t+" failed"),console.warn(n.stack||n.message),1))}));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(e){return console.warn("Initialization of backend "+t+" failed"),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(e,n){return t.registryFactory[n].priority-t.registryFactory[e].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),e=0;e<t.length;e++){var n=t[e],r=this.initializeBackend(n),o=r.success,i=r.asyncInit;if(i||o)return{name:n,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")},t.prototype.moveData=function(t,e){this.write(t,e,this.readSync(e))},t.prototype.tidy=function(t,e){var n,r=this,o=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(n)}),(function(){return(n=e())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n}))},t.prototype.scopedRun=function(t,e,n){t();try{var r=n();return e(),r}catch(t){throw e(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var e=vt.make(t.shape,{dataId:t.dataId},t.dtype);return this.addTapeNode([t],e,(function(t){return[t.toFloat()]})),e},t.prototype.runKernel=function(t,e,n){var r,o=this,i=[],a=this.isTapeOn(),s=null!=this.state.activeScope?this.state.activeScope.name:"",u=function(t){a&&(i=t.map((function(t){return o.keep(o.clone(t))})))},c=this.state.numBytes,l=this.state.numTensors;if(this.scopedRun((function(){return o.state.kernelDepth++}),(function(){return o.state.kernelDepth--}),(function(){r=o.ENV.getBool("DEBUG")?o.profiler.profileKernel(s,e,(function(){return t(o.backend,u)})):t(o.backend,u)})),a){var h={id:this.state.nextTapeNodeId++,name:s,inputs:e,outputs:Array.isArray(r)?r:[r],saved:i};null!=n&&(h.gradient=function(t){return n(t,i)}),this.state.activeTape.push(h)}return this.state.profiling&&this.state.activeProfile.kernels.push({name:s,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-l,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((function(t){return e[t].shape})),outputShape:Array.isArray(r)?r.map((function(t){return t.shape})):r.shape}),r},t.prototype.registerTensor=function(t,e){var n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;var r=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(r=t.size*W(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:null!=e?e:this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r,null!=e?e.register(t.dataId,t.shape,t.dtype):this.backend.register(t.dataId,t.shape,t.dtype)}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof mt||this.track(t)},t.prototype.registerVariable=function(t){if(null!=this.state.registeredVariables[t.name])throw new Error("Variable with name "+t.name+" was already registered");this.state.registeredVariables[t.name]=t},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;var e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var e=this.state.registeredVariables[t];this.disposeVariable(e)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t},t.prototype.profile=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){return this.state.profiling=!0,e=this.state.numBytes,n=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,e,n){var r={};t.forEach((function(t,e){r[e]=t}));var o={id:this.state.nextTapeNodeId++,name:this.state.activeScope.name,inputs:r,outputs:[e],gradient:function(t){var e=n(t),r={};return e.forEach((function(t,e){r[e]=function(){return t}})),r}};this.state.activeTape.push(o)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e},t.prototype.endScope=function(t){for(var e=this,n=kt(t),r=new Set(n.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var i=this.state.activeScope.track[o];i.kept||r.has(i.id)||i.dispose()}var a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],n.forEach((function(t){t.kept||t.scopeId!==a.id||e.track(t)}))},t.prototype.gradients=function(t,e,n,r){var o=this;if(void 0===r&&(r=!1),x(e.length>0,(function(){return"gradients() received an empty list of xs."})),null!=n&&"float32"!==n.dtype)throw new Error("dy must have 'float32' dtype, but has '"+n.dtype+"'");var i=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy("forward",t)}));x(i instanceof vt,(function(){return"The result y returned by f() must be a tensor."}));var a=function(t,e,n){for(var r={},o={},i=0;i<e.length;i++)r[e[i].id]=!0;for(i=0;i<t.length;i++){var a=(p=t[i]).inputs;for(var s in a){for(var u=a[s],c=!1,l=0;l<e.length;l++)if(r[u.id]){p.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,o[p.id]=!0;break}if(c)break}}var h={};h[n.id]=!0;var f={};for(i=t.length-1;i>=0;i--)for(a=(p=t[i]).inputs,l=0;l<p.outputs.length;l++)if(h[p.outputs[l].id]){for(var s in a)h[a[s].id]=!0,f[p.id]=!0;break}var d=[];for(i=0;i<t.length;i++){var p;if(o[(p=t[i]).id]&&f[p.id]){var v={};for(var s in p.inputs){var m=p.inputs[s];r[m.id]&&(v[s]=m)}var g=Object.assign({},p);g.inputs=v,g.outputs=p.outputs,d.push(g)}}return d}(this.state.activeTape,e,i);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var t,r,s={};s[i.id]=null==n?(r=Y(E(t=i.shape),"float32"),vt.make(t,{values:r})):n,function(t,e,n){for(var r=function(r){var o=e[r],i=[];if(o.outputs.forEach((function(e){var n=t[e.id];if(null!=n)i.push(n);else{var r=vt.make(e.shape,{values:Q(e.size,e.dtype)},e.dtype);i.push(r)}})),null==o.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+o.name+".");var a=o.gradient(1===o.outputs.length?i[0]:i),s=function(e){if(!(e in a))throw new Error("Cannot backprop through input "+e+". Available gradients found: "+Object.keys(a)+".");var r=n((function(){return a[e]()}));if("float32"!==r.dtype)throw new Error("Error in gradient for op "+o.name+". The gradient of input "+e+" must have 'float32' dtype, but has '"+r.dtype+"'");var i=o.inputs[e];if(!R(r.shape,i.shape))throw new Error("Error in gradient for op "+o.name+". The gradient of input '"+e+"' has shape '"+r.shape+"', which does not match the shape of the input '"+i.shape+"'");if(null==t[i.id])t[i.id]=r;else{var s=t[i.id];t[i.id]=s.add(r),s.dispose()}};for(var u in o.inputs)s(u)},o=e.length-1;o>=0;o--)r(o)}(s,a,(function(t){return o.tidy(t)}));var u=e.map((function(t){return s[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var e in t.saved)t.saved[e].dispose()})),o.state.activeTape=null),{value:i,grads:u}}))},t.prototype.customGrad=function(t){var e=this;return x(q(t),(function(){return"The f passed in customGrad(f) must be a function."})),function(){for(var n,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];x(r.every((function(t){return t instanceof vt})),(function(){return"The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var i={};return r.forEach((function(t,e){i[e]=t})),e.runKernel((function(e,o){return x((n=t.apply(void 0,r.concat([o]))).value instanceof vt,(function(){return"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),x(q(n.gradFunc),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),n.value}),i,(function(t,e){var o=n.gradFunc(t,e),i=Array.isArray(o)?o:[o];x(i.length===r.length,(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),x(i.every((function(t){return t instanceof vt})),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var a={};return i.forEach((function(t,e){a[e]=function(){return t}})),a}))}},t.prototype.write=function(t,e,n){var r=this.state.tensorInfo.get(e),o=r.backend;if(t=t||this.backend,"string"===r.dtype){var i=U(n);this.state.numBytes+=i-r.bytes,r.bytes=i}t!==o&&(o.disposeData(e),r.backend=t,t.register(e,r.shape,r.dtype)),t.write(e,n)},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.fromPixels=function(t,e){return this.backend.fromPixels(t,e)},t.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){switch(r.label){case 0:return e=J(),[4,this.backend.time(t)];case 1:return(n=r.sent()).wallMs=J()-e,[2,n]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,"registeredVariables",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Dt,this.registry)this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}(),Ot=function(){var e=function(){if(null==Nt){var e=void 0;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==r)e=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Nt=e}return Nt}();if(null==e._tfengine){var n=new l(e);e._tfengine=new _t(n)}return d(e._tfengine.ENV),ft=function(){return e._tfengine},e._tfengine}();function Mt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}f.registerFlag("DEBUG",(function(){return!1}),(function(t){t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),f.registerFlag("IS_BROWSER",(function(){return Mt()})),f.registerFlag("IS_NODE",(function(){return void 0!==r&&void 0!==r.versions&&void 0!==r.versions.node})),f.registerFlag("IS_CHROME",(function(){return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),f.registerFlag("PROD",(function(){return!1})),f.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return f.getBool("DEBUG")})),f.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return!0})),f.registerFlag("IS_TEST",(function(){return!1}));var Ft,Bt,Pt={},Lt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Wt(t,e){Pt[t]=e}function Ut(t){t in Pt||(Pt[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var e=Vt(t);return e.addEventListener("webglcontextlost",(function(e){e.preventDefault(),delete Pt[t]}),!1),1===t?e.getContext("webgl",Lt)||e.getContext("experimental-webgl",Lt):e.getContext("webgl2",Lt)}(t));var e=Pt[t];return e.isContextLost()?(delete Pt[t],Ut(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Pt[t])}function Vt(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function zt(t,e){return[e,t]}function Gt(t){var e=E(t);return S(Math.ceil(e/4))}function Ht(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function qt(t,e){var n,r,o,i,a,s,u,c,l,h=t;return 2===f.getNumber("WEBGL_VERSION")?(n=h.R32F,r=h.R16F,o=h.RGBA16F,i=h.RGBA32F,a=h.RED,s=4,u=1,c=h.HALF_FLOAT,l=h.FLOAT):(n=t.RGBA,r=t.RGBA,o=t.RGBA,i=h.RGBA,a=t.RGBA,s=4,u=4,c=null!=e?e.HALF_FLOAT_OES:null,l=t.FLOAT),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:s,defaultNumChannels:u,textureTypeHalfFloat:c,textureTypeFloat:l}}function $t(t,e,n){var r=n();return e&&function(t){var e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+Yt(t,e))}(t),r}!function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Ft||(Ft={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Bt||(Bt={}));var jt=5.96e-8,Kt=65504;function Xt(t){return!!(f.getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||jt<Math.abs(t)&&Math.abs(t)<Kt)}function Yt(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}function Qt(t,e,n){return be(t,e,(function(){return t.getExtension(n)}),'Extension "'+n+'" not supported on this browser.')}function Jt(t,e,n){var r=be(t,e,(function(){return t.createShader(t.VERTEX_SHADER)}),"Unable to create vertex WebGLShader.");if($t(t,e,(function(){return t.shaderSource(r,n)})),$t(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}function Zt(t,e,n){var r=be(t,e,(function(){return t.createShader(t.FRAGMENT_SHADER)}),"Unable to create fragment WebGLShader.");if($t(t,e,(function(){return t.shaderSource(r,n)})),$t(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){var n=ne.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);for(var r=+n[1],o=t.split("\n"),i=o.length.toString().length+2,a=o.map((function(t,e){return k((e+1).toString(),i)+t})),s=0,u=0;u<a.length;u++)s=Math.max(a[u].length,s);var c=a.slice(0,r-1),l=a.slice(r-1,r),h=a.slice(r);console.log(c.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+k(l[0],s),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}(n,t.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}var te,ee,ne=/ERROR: [0-9]+:([0-9]+):/g;function re(t,e){return be(t,e,(function(){return t.createProgram()}),"Unable to create WebGLProgram.")}function oe(t,e,n){if($t(t,e,(function(){return t.linkProgram(n)})),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}function ie(t,e,n){if($t(t,e,(function(){return t.validateProgram(n)})),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function ae(t,e,n){var r=be(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return $t(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),$t(t,e,(function(){return t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function se(t,e,n){var r=be(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return $t(t,e,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),$t(t,e,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function ue(t,e){return be(t,e,(function(){return t.createTexture()}),"Unable to create WebGLTexture.")}function ce(t,e){var n=f.getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){var r="["+t+"x"+e+"]";throw new Error("Requested texture size "+r+" is invalid.")}if(t>n||e>n)throw r="["+t+"x"+e+"]",new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU ["+n+"x"+n+"].")}function le(t,e){return be(t,e,(function(){return t.createFramebuffer()}),"Unable to create WebGLFramebuffer.")}function he(t,e,n,r,o,i,a,s){var u=t.getAttribLocation(n,r);return-1!==u&&($t(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,o)})),$t(t,e,(function(){return t.vertexAttribPointer(u,i,t.FLOAT,!1,a,s)})),$t(t,e,(function(){return t.enableVertexAttribArray(u)})),!0)}function fe(t,e,n,r){we(t,r),$t(t,e,(function(){return t.activeTexture(t.TEXTURE0+r)})),$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)}))}function de(t,e,n,r){return be(t,e,(function(){return t.getUniformLocation(n,r)}),'uniform "'+r+'" not present in program.')}function pe(t,e,n){return t.getUniformLocation(e,n)}function ve(t,e,n,r,o,i){$t(t,e,(function(){return fe(t,e,r,i)})),$t(t,e,(function(){return t.uniform1i(o,i)}))}function me(t,e,n,r){$t(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),$t(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0)}))}function ge(t,e,n){$t(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)})),$t(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}))}function ye(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+xe(t,e))}function xe(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}function be(t,e,n,r){var o=$t(t,e,(function(){return n()}));if(null==o)throw new Error(r);return o}function we(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE"+n+"].")}function Ce(t,e){return void 0===e&&(e=2),E(t.slice(0,t.length-e))}function Ee(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Re(t){var e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Ce(t)].concat(Ee(t))),e}function Ie(t,e){var n;void 0===e&&(e=!1);var r=f.getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(r*=2,1===(t=t.map((function(e,n){return n>=t.length-2?g(t[n]):t[n]}))).length&&(t=[2,t[0]])),2!==t.length){var o=_(t);t=o.newShape}var i=E(t);if(t.length<=1&&i<=r)return[1,i];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){var a=Ce(t),s=2,u=2;return t.length&&(s=(n=Ee(t))[0],u=n[1]),S(i=a*(s/2)*(u/2)).map((function(t){return 2*t}))}return S(i)}function Ae(t){return t%2==0}function Se(t,e){if(R(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){var n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Ae(n)&&Ae(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Ae(t[0])&&Ae(e[0])}function ke(t){if(null==te){var e=Ut(t);te=e.getParameter(e.MAX_TEXTURE_SIZE)}return te}function Ne(t){if(null==ee){var e=Ut(t);ee=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,ee)}function Te(t){if(0===t)return 0;var e=Ut(t);return De(e,"EXT_disjoint_timer_query_webgl2")&&2===t?2:De(e,"EXT_disjoint_timer_query")?1:0}function De(t,e){return null!=t.getExtension(e)}function _e(t){try{if(null!=Ut(t))return!0}catch(t){return!1}return!1}function Oe(t){if(0===t)return!1;var e=Ut(t);if(1===t){if(!De(e,"OES_texture_float"))return!1}else if(!De(e,"EXT_color_buffer_float"))return!1;return Fe(e)}function Me(t){if(0===t)return!1;var e=Ut(t);if(1!==t){if(De(e,"EXT_color_buffer_float"))return Fe(e);if(De(e,"EXT_color_buffer_half_float")){var n=e.getExtension("EXT_color_buffer_half_float");return function(t,e){var n=qt(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);var o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),i}(e,n)}return!1}return!!De(e,"OES_texture_float")&&!!De(e,"WEBGL_color_buffer_float")&&Fe(e)}function Fe(t){var e=qt(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);var o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),o}function Be(t){return 2===t&&null!=Ut(t).fenceSync}var Pe=Object.freeze({callAndCheck:$t,canBeRepresented:Xt,getWebGLErrorMessage:Yt,getExtensionOrThrow:Qt,createVertexShader:Jt,createFragmentShader:Zt,createProgram:re,linkProgram:oe,validateProgram:ie,createStaticVertexBuffer:ae,createStaticIndexBuffer:se,getNumChannels:function(){return 2===f.getNumber("WEBGL_VERSION")?1:4},createTexture:ue,validateTextureSize:ce,createFramebuffer:le,bindVertexBufferToProgramAttribute:he,bindTextureUnit:fe,unbindTextureUnit:function(t,e,n){we(t,n),$t(t,e,(function(){return t.activeTexture(t.TEXTURE0+n)})),$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:de,getProgramUniformLocation:pe,bindTextureToProgramUniformSampler:ve,bindCanvasToFramebuffer:function(t,e){$t(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),$t(t,e,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),$t(t,e,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}))},bindColorTextureToFramebuffer:me,unbindColorTextureFromFramebuffer:ge,validateFramebuffer:ye,getFramebufferErrorMessage:xe,getBatchDim:Ce,getRowsCols:Ee,getShapeAs3D:Re,getTextureShapeFromLogicalShape:Ie,isReshapeFree:Se,getWebGLMaxTextureSize:ke,resetMaxTextureSize:function(){te=null},resetMaxTexturesInShader:function(){ee=null},getMaxTexturesInShader:Ne,getWebGLDisjointQueryTimerVersion:Te,hasExtension:De,isWebGLVersionEnabled:_e,isCapableOfRenderingToFloatTexture:Oe,isDownloadFloatTextureEnabled:Me,isWebGLFenceEnabled:Be});function Le(){f.set("PROD",!0)}function We(){f.set("DEBUG",!0)}function Ue(){f.set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Ve(t){f.getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ze(){Ot.disposeVariables()}function Ge(){return Ot}function He(){return Ot.memory()}function qe(t){return Ot.profile(t)}function $e(t,e){return Ot.tidy(t,e)}function je(t){kt(t).forEach((function(t){return t.dispose()}))}function Ke(t){return Ot.keep(t)}function Xe(t){return Ot.time(t)}function Ye(t){return Ot.setBackend(t)}function Qe(){return Ot.ready()}function Je(){return Ot.backendName}function Ze(t){Ot.removeBackend(t)}function tn(t){return Ot.findBackend(t)}function en(t){return Ot.findBackendFactory(t)}function nn(t,e,n){return void 0===n&&(n=1),Ot.registerBackend(t,e,n)}function rn(){return Ot.backend}function on(t,e){f.setPlatform(t,e)}function an(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];f.getBool("IS_TEST")||console.warn.apply(console,t)}function sn(t,e){var n=t;if(L(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(n)||L(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&f.getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],Array.isArray(e)||L(e)){x(n.length>0,(function(){return"Element arr["+r.join("][")+"] should be a primitive, but is an array of "+e.length+" elements"})),x(e.length===n[0],(function(){return"Element arr["+r.join("][")+"] should have "+n[0]+" elements, but has "+e.length+" elements"}));for(var o=n.slice(1),i=0;i<e.length;++i)t(e[i],o,r.concat(i))}else x(0===n.length,(function(){return"Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+n[0]+" elements"}))}(t,r,[]),r}function un(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error("Argument '"+n+"' passed to '"+r+"' must be "+t+" tensor, but got "+e+" tensor")}function cn(t,e,n,r){if(void 0===r&&(r="numeric"),t instanceof vt)return un(r,t.dtype,e,n),t;var o=H(t);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),un(r,o,e,n),null==t||!L(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){var i=null==t?"null":t.constructor.name;throw new Error("Argument '"+e+"' passed to '"+n+"' must be a Tensor or TensorLike, but got '"+i+"'")}var a=sn(t,o);L(t)||Array.isArray(t)||(t=[t]);var s="string"!==o?K(t,o,f.getBool("DEBUG")):C(t,[],!0);return vt.make(a,{values:s},o)}function ln(t,e,n,r){if(void 0===r&&(r="numeric"),!Array.isArray(t))throw new Error("Argument "+e+" passed to "+n+" must be a `Tensor[]` or `TensorLike[]`");return t.map((function(t,r){return cn(t,e+"["+r+"]",n)}),r)}function hn(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function fn(t,e,n){for(var r=t.length+e.length,o=[],i=0,a=0,s=0;s<r;s++)-1===n.indexOf(s)?o.push(t[i++]):o.push(e[a++]);return o}function dn(t,e){for(var n=[],r=t.length,o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return[n,e.map((function(e){return t[e]}))]}function pn(t,e){return fn(t,e.map((function(t){return 1})),e)}function vn(t,e,n){x(hn(e,n),(function(){return t+" supports only inner-most axes for now. Got axes "+e+" and rank-"+n+" input."}))}function mn(t,e){if(hn(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((function(t){return n.push(t)})),n}function gn(t){return t.map((function(t,e){return[e,t]})).sort((function(t,e){return t[1]-e[1]})).map((function(t){return t[0]}))}function yn(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}function xn(t,e){var n=t[0].length;t.forEach((function(t,e){x(t.length===n,(function(){return"Error in concat"+n+"D: rank of tensors["+e+"] must be the same as the rank of the rest ("+n+")"}))})),x(e>=0&&e<n,(function(){return"Error in concat"+n+"D: axis must be between 0 and "+(n-1)+"."}));var r=t[0];t.forEach((function(t,o){for(var i=0;i<n;i++)x(i===e||t[i]===r[i],(function(){return"Error in concat"+n+"D: Shape of tensors["+o+"] ("+t+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+o+"."}))}))}function bn(t,e){for(var n=t[0].slice(),r=1;r<t.length;r++)n[e]+=t[r][e];return n}function wn(t){var e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");var n=e[0],r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));var o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Ot.startScope(n);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Ot.endScope(o),o}catch(t){throw Ot.endScope(null),t}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}f.registerFlag("HAS_WEBGL",(function(){return f.getNumber("WEBGL_VERSION")>0})),f.registerFlag("WEBGL_VERSION",(function(){return _e(2)?2:_e(1)?1:0})),f.registerFlag("WEBGL_BUFFER_SUPPORTED",(function(){return 2===f.get("WEBGL_VERSION")})),f.registerFlag("WEBGL_CPU_FORWARD",(function(){return!0})),f.registerFlag("WEBGL_FORCE_F16_TEXTURES",(function(){return!1})),f.registerFlag("WEBGL_PACK",(function(){return f.getBool("HAS_WEBGL")})),f.registerFlag("WEBGL_PACK_NORMALIZATION",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_CLIP",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_DEPTHWISECONV",(function(){return!1})),f.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_REDUCE",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_LAZILY_UNPACK",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_CONV_IM2COL",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(function(){return ke(f.getNumber("WEBGL_VERSION"))})),f.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(function(){return Ne(f.getNumber("WEBGL_VERSION"))})),f.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(function(){var t=f.getNumber("WEBGL_VERSION");return 0===t?0:Te(t)})),f.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(function(){return f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))));var t})),f.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(function(){return Oe(f.getNumber("WEBGL_VERSION"))})),f.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(function(){return!f.getBool("WEBGL_FORCE_F16_TEXTURES")&&f.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")})),f.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(function(){return Me(f.getNumber("WEBGL_VERSION"))})),f.registerFlag("WEBGL_FENCE_API_ENABLED",(function(){return Be(f.getNumber("WEBGL_VERSION"))})),f.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(function(){return f.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0})),pt=Ve;var Cn=wn({complex_:function(t,e){var n=cn(t,"real","complex"),r=cn(e,"imag","complex");return b(n.shape,r.shape,"real and imag shapes, "+n.shape+" and "+r.shape+", must match in call to tf.complex()."),Ot.runKernel((function(t){return t.complex(n,r)}),{$real:n,$imag:r})}}),En=wn({real_:function(t){var e=cn(t,"input","real");return Ot.runKernel((function(t){return t.real(e)}),{$input:e})}}),Rn=wn({imag_:function(t){var e=cn(t,"input","imag");return Ot.runKernel((function(t){return t.imag(e)}),{$input:e})}});function In(t,e,n){return An(t,e,sn(t,n),n)}function An(t,e,n,r){if(null==r&&(r=H(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!L(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Z(e);var o=E(e),i=E(n);x(o===i,(function(){return"Based on the provided shape, ["+e+"], the tensor should have "+o+" values but has "+i}));for(var a=0;a<n.length;++a){var s=n[a],u=a!==n.length-1||s!==E(e.slice(a));x(n[a]===e[a]||!u,(function(){return"Error creating a new Tensor. Inferred shape ("+n+") does not match the provided shape ("+e+"). "}))}}return L(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?K(t,r,f.getBool("DEBUG")):C(t,[],!0),vt.make(e,{values:t},r)}function Sn(t,e){if((L(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&L(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return An(t,[],[],e)}function kn(t,e){w(t);var n=sn(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return An(t,null,n,e)}function Nn(t,e,n){if(w(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");var r=sn(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return An(t,e,r,n)}function Tn(t,e,n){if(w(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");var r=sn(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return An(t,e,r,n)}function Dn(t,e,n){if(w(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");var r=sn(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return An(t,e,r,n)}function _n(t,e,n){if(w(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");var r=sn(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return An(t,e,r,n)}function On(t,e,n){if(w(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");var r=sn(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return An(t,e=e||r,r,n)}function Mn(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=Mn(t,"float32"),r=Fn(t,"float32");return Cn(n,r)}var o=Y(E(t),e);return vt.make(t,{values:o},e)}function Fn(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=Fn(t,"float32"),r=Fn(t,"float32");return Cn(n,r)}var o=Q(E(t),e);return vt.make(t,{values:o},e)}function Bn(t,e,n){return Ot.runKernel((function(r){return r.fill(t,e,n)}),{})}function Pn(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");return Ot.runKernel((function(r){return r.linspace(t,e,n)}),{})}function Ln(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r="float32"),0===n)throw new Error("Cannot have a step of zero");if(t===e||t<e&&n<0||e<t&&n>1)return Fn([0],r);var o=Q(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+n;return kn(o,r)}var Wn=wn({onesLike_:function(t){var e=cn(t,"x","onesLike");if("complex64"===e.dtype){var n=Wn(En(e)),r=Un(Rn(e));return Cn(n,r)}return Ot.runKernel((function(t){return t.onesLike(e)}),{$x:e},(function(t,e){return{$x:function(){return Un(t)}}}))}}),Un=wn({zerosLike_:function(t){var e=cn(t,"x","zerosLike");return Ot.runKernel((function(t){return t.zerosLike(e)}),{$x:e},(function(t,e){return{$x:function(){return Un(t)}}}))}}),Vn=wn({concat_:function(t,e){void 0===e&&(e=0),x(t.length>=1,(function(){return"Pass at least one tensor to concat"}));var n=ln(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((function(t){if("complex64"!==t.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype "+t.dtype+". ")})),e=D(e,n[0].shape)[0];var r=bn(n.map((function(t){return t.shape})),e);if(0===E(r))return In([],r);if(1===(n=n.filter((function(t){return t.size>0}))).length)return n[0];var o=n.map((function(t){return t.shape}));xn(o,e);var i=n;return Ot.runKernel((function(t){return t.concat(n,e)}),i,(function(t){var n=o.map((function(t){return t[e]}));return $n(t,n,e).map((function(t){return function(){return t}}))}))}}),zn=wn({concat1d_:function(t){return Vn(t,0)}}),Gn=wn({concat2d_:function(t,e){return Vn(t,e)}}),Hn=wn({concat3d_:function(t,e){return Vn(t,e)}}),qn=wn({concat4d_:function(t,e){return Vn(t,e)}}),$n=wn({split_:function(t,e,n){void 0===n&&(n=0);var r,o=cn(t,"x","split");return n=D(n,o.shape)[0],"number"==typeof e?(x(o.shape[n]%e==0,(function(){return"Number of splits must evenly divide the axis."})),r=new Array(e).fill(o.shape[n]/e)):(x(o.shape[n]===e.reduce((function(t,e){return t+e})),(function(){return"The sum of sizes must match the size of the axis dimension."})),r=e),Ot.runKernel((function(t){return t.split(o,r,n)}),{$x:o},(function(t){return{$x:function(){return Vn(t,n)}}}))}});function jn(t,e){return t(e={exports:{}},e.exports),e.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;var Kn=jn((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function i(t,e){var n=new r(t),i=e&&e.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.alea=i}(0,t)})),Xn=jn((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xor128=i}(0,t)})),Yn=jn((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xorwow=i}(0,t)})),Qn=jn((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function i(t,e){null==t&&(t=+new Date);var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.x&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xorshift7=i}(0,t)})),Jn=jn((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,i=e.i;return e.w=r=r+1640531527|0,n=o[i+34&127],t=o[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,o,i,a,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),o=0,i=-32;i<u;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(a=a+1640531527|0,o=0==(n=s[127&i]^=r+a)?o+1:0);for(o>=128&&(s[127&(e&&e.length||0)]=-1),o=127,i=512;i>0;--i)r=s[o+34&127],n=s[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[o]=r^n;t.w=a,t.X=s,t.i=o}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function i(t,e){null==t&&(t=+new Date);var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.X&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xor4096=i}(0,t)})),Zn=jn((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.tychei=i}(0,t)})),tr=jn((function(t){!function(e,r){var o,i=this,a=256,s=6,u="random",c=r.pow(a,s),l=r.pow(2,52),h=2*l,f=a-1;function d(t,n,f){var d=[],y=m(function t(e,n){var r,o=[],i=typeof e;if(n&&"object"==i)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:"string"==i?e:e+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[t,g(e)]:null==t?function(){try{var t;return o&&(t=o.randomBytes)?t=t(a):(t=new Uint8Array(a),(i.crypto||i.msCrypto).getRandomValues(t)),g(t)}catch(t){var n=i.navigator,r=n&&n.plugins;return[+new Date,i,r,i.screen,g(e)]}}():t,3),d),x=new p(d),b=function(){for(var t=x.g(s),e=c,n=0;t<l;)t=(t+n)*a,e*=a,n=x.g(1);for(;t>=h;)t/=2,e/=2,n>>>=1;return(t+n)/e};return b.int32=function(){return 0|x.g(4)},b.quick=function(){return x.g(4)/4294967296},b.double=b,m(g(x.S),e),(n.pass||f||function(t,e,n,o){return o&&(o.S&&v(o,x),t.state=function(){return v(x,{})}),n?(r[u]=t,e):t})(b,y,"global"in n?n.global:this==r,n.state)}function p(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<a;)s[o]=o++;for(o=0;o<a;o++)s[o]=s[i=f&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=f&o+1],n=n*a+s[f&(s[o]=s[i=f&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(a)}function v(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function m(t,e){for(var n,r=t+"",o=0;o<r.length;)e[f&o]=f&(n^=19*e[f&o])+r.charCodeAt(o++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(r["seed"+u]=d,m(r.random(),e),t.exports){t.exports=d;try{o=n(9)}catch(t){}}}([],Math)}));tr.alea=Kn,tr.xor128=Xn,tr.xorwow=Yn,tr.xorshift7=Qn,tr.xor4096=Jn,tr.tychei=Zn;var er=tr.alea,nr=function(){function t(t,e,n,r,o){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var i=o||Math.random();this.random=er(i.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var o=void 0,i=void 0,a=void 0;do{a=(o=2*this.random()-1)*o+(i=2*this.random()-1)*i}while(a>=1||0===a);var s=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*o*s,n=this.mean+this.stdDev*i*s,this.truncated&&!this.isValidTruncated(e)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),rr=function(){function t(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;var o=r||Math.random();this.randu=er(o.toString()),this.randn=new nr(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,e,n,r,o,i;;){do{r=this.randn.nextValue(),i=1+this.c*r}while(i<=0);if(i*=i*i,e=1-.331*(t=r*r)*t,n=.5*t+this.d*(1-i+Math.log(i)),(o=this.randu())<e||Math.log(o)<n)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)},t.prototype.convertValue=function(t){return"float32"===this.dtype?t:Math.round(t)},t}(),or=function(){function t(t,e,n,r){var o=this;if(void 0===t&&(t=0),void 0===e&&(e=1),this.canReturnFloat=function(){return null==o.dtype||"float32"===o.dtype},this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between "+t+" - "+e+" <= 1 and dtype is not float");this.random=er(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();function ir(t,e,n){return void 0===e&&(e="float32"),e=e||"float32",Z(t),new ht(t,e,n)}function ar(t,e){void 0===e&&(e=!1),console.log(t.toString(e))}var sr=wn({batchToSpaceND_:function(t,e,n){var r=cn(t,"x","batchToSpaceND"),o=e.reduce((function(t,e){return t*e}));return x(r.rank>=1+e.length,(function(){return"input rank is "+r.rank+" but should be > than blockShape.length "+e.length})),x(n.length===e.length,(function(){return"crops.length is "+n.length+" but should be equal to blockShape.length  "+e.length})),x(r.shape[0]%o==0,(function(){return"input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+e.join(" * ")+" === "+o})),Ot.runKernel((function(t){return t.batchToSpaceND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.spaceToBatchND(e,n)}}}))}}),ur=wn({cast_:function(t,e){var n=cn(t,"x","cast");if(!B(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");return Ot.runKernel((function(t){return t.cast(n,e)}),{$x:n},(function(t){return{$x:function(){return t.clone()}}}))}}),cr=wn({clone_:function(t){var e=cn(t,"x","clone",null);return Ot.runKernel((function(t){return vt.make(e.shape,{dataId:e.dataId},e.dtype)}),{$x:e},(function(t){return{$x:function(){return t.toFloat()}}}))}}),lr=wn({cumsum_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var o=cn(t,"x","cumsum"),i=mn([e|=0],o.rank),a=o;null!=i&&(a=o.transpose(i));var s=yn(1,o.rank)[0],u=Ot.runKernel((function(t){return t.cumsum(a,s,n,r)}),{permutedX:a},(function(t){return{permutedX:function(){return t.cumsum(e,n,!r)}}}));return null!=i&&(u=u.transpose(i)),u}}),hr=wn({depthToSpace_:function(t,e,n){void 0===n&&(n="NHWC");var r=cn(t,"x","depthToSpace"),o="NHWC"===n?r.shape[1]:r.shape[2],i="NHWC"===n?r.shape[2]:r.shape[3],a="NHWC"===n?r.shape[3]:r.shape[1];return x(o*e>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+o+" and "+e+"  for depthToSpace with input shape\n      "+r.shape})),x(i*e>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+i+" and "+e+" for depthToSpace with input shape\n          "+r.shape})),x(a%(e*e)==0,(function(){return"Dimension size must be evenly divisible by "+e*e+" but is "+a+" for depthToSpace with input shape "+r.shape})),Ot.runKernel((function(t){return t.depthToSpace(r,e,n)}),{$x:r})}}),fr=wn({expandDims_:function(t,e){void 0===e&&(e=0);var n=cn(t,"x","expandDims",null);x(e<=n.rank,(function(){return"Axis must be <= rank of the tensor"}));var r=n.shape.slice();return e<0&&(x(-(n.rank+1)<=e,(function(){return"Axis must be in the interval ["+-(n.rank+1)+", "+n.rank+"]"})),e=n.rank+e+1),r.splice(e,0,1),Ir(n,r)}}),dr=wn({eye_:function(t,e,n,r){void 0===r&&(r="float32"),null==e&&(e=t);for(var o=ir([t,e],r),i=t<=e?t:e,a=0;a<i;++a)o.set(1,a,a);var s=o.toTensor().as2D(t,e);if(null==n)return s;if(1===n.length)return Nr(fr(s,0),[n[0],1,1]);if(2===n.length)return Nr(fr(fr(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return Nr(fr(fr(fr(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+n.length+"D.")}}),pr=wn({multinomial_:function(t,e,n,r){void 0===r&&(r=!1);var o=cn(t,"logits","multinomial"),i=o.size,a=o.rank;if(i<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+i+".");if(a>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+a);n=n||Math.random();var s=1===a?o.as2D(1,-1):o,u=Ot.runKernel((function(t){return t.multinomial(s,r,e,n)}),{logits2D:s});return 1===a?u.as1D():u}}),vr=wn({oneHot_:function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);var o=cn(t,"indices","oneHot","int32"),i=o.shape.concat([e]);return o=o.flatten(),Ot.runKernel((function(t){return t.oneHot(o,e,n,r)}),{$indices:o},(function(t){return{$indices:function(){return Fn(o.shape,"float32")}}})).reshape(i)}}),mr=wn({pad_:function(t,e,n){void 0===n&&(n=0);var r=cn(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var o=e.map((function(t){return t[0]}));return Ot.runKernel((function(t){return t.pad(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.slice(o,r.shape)}}}))}}),gr=wn({pad1d_:function(t,e,n){return void 0===n&&(n=0),x(2===e.length,(function(){return"Invalid number of paddings. Must be length of 2."})),mr(t,[e],n)}}),yr=wn({pad2d_:function(t,e,n){return void 0===n&&(n=0),x(2===e.length&&2===e[0].length&&2===e[1].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),mr(t,e,n)}}),xr=wn({pad3d_:function(t,e,n){return void 0===n&&(n=0),x(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),mr(t,e,n)}}),br=wn({pad4d_:function(t,e,n){return void 0===n&&(n=0),x(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),mr(t,e,n)}}),wr=wn({rand_:function(t,e,n){var r=E(t),o=null;if(null==n||"float32"===n)o=new Float32Array(r);else if("int32"===n)o=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);o=new Uint8Array(r)}for(var i=0;i<r;i++)o[i]=e();return vt.make(t,{values:o},n)}}),Cr=wn({randomNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new nr(e,n,r,!1,o),a=ir(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Er=wn({randomGamma_:function(t,e,n,r,o){if(void 0===n&&(n=1),void 0===r&&(r="float32"),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);for(var i=new rr(e,n,r,o),a=ir(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Rr=wn({randomUniform_:function(t,e,n,r,o){void 0===e&&(e=0),void 0===n&&(n=1),void 0===r&&(r="float32");for(var i=ir(t,r),a=new or(e,n,null,o),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}}),Ir=wn({reshape_:function(t,e){var n=cn(t,"x","reshape",null);return e=T(e,n.size),x(n.size===E(e),(function(){return"new shape and old shape must have the same number of elements."})),Ot.runKernel((function(t){return t.reshape(n,e)}),{$x:n},(function(t){return{$x:function(){return t.reshape(n.shape)}}}))}}),Ar=wn({spaceToBatchND_:function(t,e,n){var r=cn(t,"x","spaceToBatchND");return x(r.rank>=1+e.length,(function(){return"input rank "+r.rank+" should be > than [blockShape] "+e.length})),x(n.length===e.length,(function(){return"paddings.shape[0] "+n.length+" must be equal to [blockShape] "+e.length})),x(r.shape.reduce((function(t,r,o){return o>0&&o<=e.length?t&&(r+n[o-1][0]+n[o-1][1])%e[o-1]==0:t}),!0),(function(){return"input spatial dimensions "+r.shape.slice(1)+" with paddings "+n.toString()+" must be divisible by blockShapes "+e.toString()})),Ot.runKernel((function(t){return t.spaceToBatchND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.batchToSpaceND(e,n)}}}))}}),Sr=wn({squeeze_:function(t,e){var n=cn(t,"x","squeeze");return Ir(n,_(n.shape,e).newShape)}}),kr=wn({stack_:function(t,e){void 0===e&&(e=0);var n=ln(t,"tensors","stack");if(x(n.length>=1,(function(){return"Pass at least one tensor to tf.stack"})),1===n.length)return n[0].expandDims(e);var r=n[0].rank,o=n[0].shape,i=n[0].dtype;x(e<=r,(function(){return"Axis must be <= rank of the tensor"})),n.forEach((function(t){b(o,t.shape,"All tensors passed to stack must have matching shapes")})),n.forEach((function(t){x(i===t.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var a=n.map((function(t){return t.expandDims(e)}));return Vn(a,e)}}),Nr=wn({tile_:function(t,e){var n=cn(t,"x","tile",null);return x(n.rank===e.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of reps "+e+"."})),Ot.runKernel((function(t,r){var o=t.tile(n,e);return r([n]),o}),{$x:n},(function(t,n){var r=n[0];return{$x:function(){var n=Un(r);if(1===r.rank)for(var o=0;o<e[0];++o)n=n.add(t.slice([o*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(o=0;o<e[0];++o)for(var i=0;i<e[1];++i)n=n.add(t.slice([o*r.shape[0],i*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(o=0;o<e[0];++o)for(i=0;i<e[1];++i)for(var a=0;a<e[2];++a)n=n.add(t.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(o=0;o<e[0];++o)for(i=0;i<e[1];++i)for(a=0;a<e[2];++a)for(var s=0;s<e[3];++s)n=n.add(t.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2],s*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return n}}}))}}),Tr=wn({truncatedNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new nr(e,n,r,!0,o),a=ir(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Dr=wn({unstack_:function(t,e){void 0===e&&(e=0),e=e||0;var n=cn(t,"x","unstack");return x(e>=-n.shape.length&&e<n.shape.length,(function(){return"Axis = "+e+" is not in [-"+n.shape.length+", "+n.shape.length+")"})),e<0&&(e+=n.shape.length),Ot.runKernel((function(t){return t.unstack(n,e)}),{$x:n},(function(t){return{$x:function(){return kr(t,e)}}}))}}),_r=function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:return n=cn(t,"x","setdiff1d"),r=cn(e,"y","setdiff1d"),x(n.dtype===r.dtype,(function(){return"x and y should have the same dtype, but got x ("+n.dtype+") and y ("+r.dtype+")."})),x(1===n.rank,(function(){return"x should be 1D tensor, but got x ("+n.shape+")."})),x(1===r.rank,(function(){return"y should be 1D tensor, but got y ("+r.shape+")."})),[4,n.data()];case 1:return o=c.sent(),[4,r.data()];case 2:for(i=c.sent(),a=new Set(i),s=0,h=0;h<o.length;h++)a.has(o[h])||s++;for(u=new ht([s],n.dtype),l=new ht([s],"int32"),h=0,f=0;h<o.length;h++)a.has(o[h])||(u.values[f]=o[h],l.values[f]=h,f++);return[2,[u.toTensor(),l.toTensor()]]}}))}))};function Or(t,e,n,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(e.slice(0))).push(t[0]/n),o=o.concat(t.slice(1));else{o=o.concat(t[0]);for(var i=e.length,a=0;a<i;++a)o=o.concat([t[a+1]/e[a],e[a]]);o=o.concat(t.slice(i+1))}return o}function Mr(t,e,n){void 0===n&&(n=!0);var r=[];if(n){r.push(e);for(var o=e+1;o<t;++o)o<=2*e?(r.push(o),r.push(o-(e+1))):r.push(o)}else{var i=[],a=[];for(o=1;o<t;++o)o>=2*e+1||o%2==1?a.push(o):i.push(o);r.push.apply(r,i),r.push(0),r.push.apply(r,a)}return r}function Fr(t,e,n,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(var i=1;i<t.length;++i)i<=e.length?r?o.push(e[i-1]*t[i]):o.push(t[i]/e[i-1]):o.push(t[i]);return o}function Br(t,e){for(var n=[0],r=0;r<e;++r)n.push(t[r][0]);return n}function Pr(t,e,n){for(var r=t.slice(0,1),o=0;o<n;++o)r.push(t[o+1]-e[o][0]-e[o][1]);return r}function Lr(t,e){if(t.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+t.rank+".");if(e.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if("int32"!==e.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+e.dtype+".");if(e.shape[e.rank-1]>t.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+e.shape[e.rank-1]+" vs. "+t.rank);if(0===t.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+t.shape+".");for(var n=e.shape,r=n[n.length-1],o=1,i=0;i<n.length-1;++i)o*=n[i];var a=t.shape,s=n.slice();s.pop();var u=1;for(i=r;i<t.rank;++i)u*=a[i],s.push(a[i]);var c=j(t.shape).map((function(t){return t/u})).concat([1]).slice(0,r);return[s,o,u,c]}var Wr=30;function Ur(t){return t<=Wr?t:$(t,Math.floor(Math.sqrt(t)))}function Vr(t,e,n){for(var r=e.rank>1?e.shape[e.rank-1]:1,o=n.length,i=1,a=r;a<o;++a)i*=n[a];var s=r<1?1:r;return{sliceRank:r,numUpdates:e.size/s,sliceSize:i,strides:j(n.slice(0,r)).concat([1]),outputSize:E(n)}}function zr(t){for(var e=[],n=0;t>0;)1&t&&e.push(n),t/=2,n++;return e}function Gr(t,e,n){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function Hr(t,e,n,r,o){var i=e[o],a=n[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),m(0,i,s-1)}function qr(t,e,n,r,o){var i=e[o],a=n[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),a>0?m(0,i,s):m(-1,i,s-1)}function $r(t,e,n){for(var r=n.length,o=0;o<n.length;o++)if(n[o]>1){r=o;break}for(o=r+1;o<n.length;o++)if(e[o]>0||n[o]!==t[o])return!1;return!0}function jr(t,e){for(var n=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function Kr(t){return x(q(t),(function(){return"The f passed in grad(f) must be a function"})),function(e,n){var r=cn(e,"x","tf.grad",null),o=null!=n?cn(n,"dy","tf.grad"):null;return Ot.tidy((function(){var e=Ot.gradients((function(){return t(r)}),[r],o),n=e.value,i=e.grads;return null!=o&&b(n.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),to(i),i[0]}))}}function Xr(t){return x(q(t),(function(){return"The f passed in grads(f) must be a function"})),function(e,n){x(Array.isArray(e),(function(){return"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"}));var r=ln(e,"args","tf.grads",null),o=null!=n?cn(n,"dy","tf.grads"):null;return Ot.tidy((function(){var e=Ot.gradients((function(){return t.apply(void 0,r)}),r,o),n=e.value,i=e.grads;return null!=o&&b(n.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),to(i),i}))}}function Yr(t){return x(q(t),(function(){return"The f passed in valueAndGrad(f) must be a function"})),function(e,n){x(e instanceof vt,(function(){return"The x passed in valueAndGrad(f)(x) must be a tensor"})),x(null==n||n instanceof vt,(function(){return"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"}));var r=Ot.gradients((function(){return t(e)}),[e],n),o=r.grads,i=r.value;return to(o),{grad:o[0],value:i}}}function Qr(t){return x(q(t),(function(){return"The f passed in valueAndGrads(f) must be a function"})),function(e,n){x(Array.isArray(e)&&e.every((function(t){return t instanceof vt})),(function(){return"The args passed in valueAndGrads(f)(args) must be array of tensors"})),x(null==n||n instanceof vt,(function(){return"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"}));var r=Ot.gradients((function(){return t.apply(void 0,e)}),e,n);return null!=n&&b(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),to(r.grads),r}}function Jr(t,e){x(q(t),(function(){return"The f passed in variableGrads(f) must be a function"})),x(null==e||Array.isArray(e)&&e.every((function(t){return t instanceof mt})),(function(){return"The varList passed in variableGrads(f, varList) must be an array of variables"}));var n=null!=e;if(!n)for(var r in e=[],Ot.registeredVariables)e.push(Ot.registeredVariables[r]);var o=n?e.filter((function(t){return!t.trainable})):null,i=e.length;x((e=e.filter((function(t){return t.trainable}))).length>0,(function(){return"variableGrads() expects at least one of the input variables to be trainable, but none of the "+i+" variables is trainable."}));var a=Ot.gradients(t,e,null,!0),s=a.value,u=a.grads;x(u.some((function(t){return null!=t})),(function(){return"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),x(0===s.rank,(function(){return"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+s.rank+" tensor"}));var c={};return e.forEach((function(t,e){null!=u[e]&&(c[t.name]=u[e])})),null!=o&&o.forEach((function(t){return c[t.name]=null})),{value:s,grads:c}}function Zr(t){return Ot.customGrad(t)}function to(t){if(t.filter((function(t){return null==t})).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var eo=wn({softmax_:function(t,e){void 0===e&&(e=-1);var n=cn(t,"logits","softmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and dim was "+e);return Zr((function(t,n){var r=t.logSumExp([e],!0),o=t.toFloat().sub(r).exp();return n([o]),{value:o,gradFunc:function(t,n){var r=n[0],o=t.mul(r);return o.sub(o.sum([e],!0).mul(r))}}}))(n)}}),no=wn({logSoftmax_:function(t,e){void 0===e&&(e=-1);var n=cn(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and axis was "+e);return Zr((function(t,n){var r=t.max(e,!0),o=t.sub(r),i=o.toFloat().sub(o.exp().sum(e,!0).log());return n([i]),{value:i,gradFunc:function(t,n){var r=n[0].exp();return t.sub(t.sum(e,!0).mul(r))}}}))(n)}}),ro=function(){function t(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,e){this.data.set(t,e)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.data.delete(t)},t}(),oo=function(){function t(){}return t.prototype.time=function(t){throw new Error("Not yet implemented.")},t.prototype.read=function(t){throw new Error("Not yet implemented.")},t.prototype.readSync=function(t){throw new Error("Not yet implemented.")},t.prototype.disposeData=function(t){throw new Error("Not yet implemented.")},t.prototype.write=function(t,e){throw new Error("Not yet implemented.")},t.prototype.fromPixels=function(t,e){throw new Error("Not yet implemented.")},t.prototype.register=function(t,e,n){throw new Error("Not yet implemented.")},t.prototype.memory=function(){throw new Error("Not yet implemented.")},t.prototype.floatPrecision=function(){throw new Error("Not yet implemented")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.fusedBatchMatMul=function(t){throw t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights,new Error("Not yet implemented")},t.prototype.slice=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.stridedSlice=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.unstack=function(t,e){throw new Error("Not yet implemented")},t.prototype.reverse=function(t,e){throw new Error("Not yet implemented")},t.prototype.concat=function(t,e){throw new Error("Not yet implemented")},t.prototype.neg=function(t){throw new Error("Not yet implemented")},t.prototype.add=function(t,e){throw new Error("Not yet implemented")},t.prototype.addN=function(t){throw new Error("Not yet implemented")},t.prototype.subtract=function(t,e){throw new Error("Not yet implemented")},t.prototype.multiply=function(t,e){throw new Error("Not yet implemented")},t.prototype.realDivide=function(t,e){throw new Error("Not yet implemented")},t.prototype.floorDiv=function(t,e){throw new Error("Not yet implemented")},t.prototype.sum=function(t,e){throw new Error("Not yet implemented")},t.prototype.prod=function(t,e){throw new Error("Not yet implemented")},t.prototype.unsortedSegmentSum=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.argMin=function(t,e){throw new Error("Not yet implemented")},t.prototype.argMax=function(t,e){throw new Error("Not yet implemented")},t.prototype.equal=function(t,e){throw new Error("Not yet implemented")},t.prototype.notEqual=function(t,e){throw new Error("Not yet implemented")},t.prototype.less=function(t,e){throw new Error("Not yet implemented")},t.prototype.lessEqual=function(t,e){throw new Error("Not yet implemented")},t.prototype.greater=function(t,e){throw new Error("Not yet implemented")},t.prototype.greaterEqual=function(t,e){throw new Error("Not yet implemented")},t.prototype.logicalNot=function(t){throw new Error("Not yet implemented")},t.prototype.logicalAnd=function(t,e){throw new Error("Not yet implemented")},t.prototype.logicalOr=function(t,e){throw new Error("Not yet implemented")},t.prototype.where=function(t){throw new Error("Not yet implemented")},t.prototype.select=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.topk=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.min=function(t,e){throw new Error("Not yet implemented")},t.prototype.minimum=function(t,e){throw new Error("Not yet implemented")},t.prototype.mod=function(t,e){throw new Error("Not yet implemented")},t.prototype.max=function(t,e){throw new Error("Not yet implemented")},t.prototype.maximum=function(t,e){throw new Error("Not yet implemented")},t.prototype.all=function(t,e){throw new Error("Not yet implemented")},t.prototype.any=function(t,e){throw new Error("Not yet implemented")},t.prototype.squaredDifference=function(t,e){throw new Error("Not yet implemented")},t.prototype.ceil=function(t){throw new Error("Not yet implemented")},t.prototype.floor=function(t){throw new Error("Not yet implemented")},t.prototype.round=function(t){throw new Error("Not yet implemented")},t.prototype.sign=function(t){throw new Error("Not yet implemented")},t.prototype.isNaN=function(t){throw new Error("Not yet implemented")},t.prototype.isInf=function(t){throw new Error("Not yet implemented")},t.prototype.isFinite=function(t){throw new Error("Not yet implemented")},t.prototype.pow=function(t,e){throw new Error("Not yet implemented")},t.prototype.exp=function(t){throw new Error("Not yet implemented")},t.prototype.expm1=function(t){throw new Error("Not yet implemented")},t.prototype.log=function(t){throw new Error("Not yet implemented")},t.prototype.log1p=function(t){throw new Error("Not yet implemented")},t.prototype.sqrt=function(t){throw new Error("Not yet implemented")},t.prototype.rsqrt=function(t){throw new Error("Not yet implemented")},t.prototype.square=function(t){throw new Error("Not yet implemented")},t.prototype.reciprocal=function(t){throw new Error("Not yet implemented")},t.prototype.relu=function(t){throw new Error("Not yet implemented")},t.prototype.relu6=function(t){throw new Error("Not yet implemented")},t.prototype.prelu=function(t,e){throw new Error("Not yet implemented")},t.prototype.elu=function(t){throw new Error("Not yet implemented")},t.prototype.eluDer=function(t,e){throw new Error("Not yet implemented")},t.prototype.selu=function(t){throw new Error("Not yet implemented")},t.prototype.int=function(t){throw new Error("Not yet implemented")},t.prototype.clip=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.abs=function(t){throw new Error("Not yet implemented")},t.prototype.complexAbs=function(t){throw new Error("Not yet implemented")},t.prototype.sigmoid=function(t){throw new Error("Not yet implemented")},t.prototype.softplus=function(t){throw new Error("Not yet implemented")},t.prototype.sin=function(t){throw new Error("Not yet implemented")},t.prototype.cos=function(t){throw new Error("Not yet implemented")},t.prototype.tan=function(t){throw new Error("Not yet implemented")},t.prototype.asin=function(t){throw new Error("Not yet implemented")},t.prototype.acos=function(t){throw new Error("Not yet implemented")},t.prototype.atan=function(t){throw new Error("Not yet implemented")},t.prototype.atan2=function(t,e){throw new Error("Not yet implemented")},t.prototype.sinh=function(t){throw new Error("Not yet implemented")},t.prototype.cosh=function(t){throw new Error("Not yet implemented")},t.prototype.tanh=function(t){throw new Error("Not yet implemented")},t.prototype.asinh=function(t){throw new Error("Not yet implemented")},t.prototype.acosh=function(t){throw new Error("Not yet implemented")},t.prototype.atanh=function(t){throw new Error("Not yet implemented")},t.prototype.erf=function(t){throw new Error("Not yet implemented")},t.prototype.step=function(t,e){throw new Error("Not yet implemented")},t.prototype.fusedConv2d=function(t){throw t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,new Error("Not yet implemented")},t.prototype.conv2d=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv2dDerInput=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv2dDerFilter=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.fusedDepthwiseConv2D=function(t){throw t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,new Error("Not yet implemented")},t.prototype.depthwiseConv2D=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.depthwiseConv2DDerInput=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv3d=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv3dDerInput=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv3dDerFilter=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.maxPool=function(t,e){throw new Error("Not yet implemented")},t.prototype.maxPoolBackprop=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.avgPool=function(t,e){throw new Error("Not yet implemented")},t.prototype.avgPoolBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.avgPool3d=function(t,e){throw new Error("Not yet implemented")},t.prototype.avgPool3dBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.maxPool3d=function(t,e){throw new Error("Not yet implemented")},t.prototype.maxPool3dBackprop=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.reshape=function(t,e){throw new Error("Not yet implemented")},t.prototype.cast=function(t,e){throw new Error("Not yet implemented")},t.prototype.tile=function(t,e){throw new Error("Not yet implemented")},t.prototype.pad=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.transpose=function(t,e){throw new Error("Not yet implemented")},t.prototype.gather=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.gatherND=function(t,e){throw new Error("Not yet implemented")},t.prototype.scatterND=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.batchToSpaceND=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.spaceToBatchND=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.resizeBilinear=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.resizeBilinearBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.resizeNearestNeighbor=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.batchNormalization=function(t,e,n,r,o,i){throw new Error("Not yet implemented")},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){throw new Error("Not yet implemented")},t.prototype.LRNGrad=function(t,e,n,r,o,i,a){throw new Error("Not yet implemented")},t.prototype.multinomial=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.oneHot=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.cumsum=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.nonMaxSuppression=function(t,e,n,r,o){throw new Error("Not yet implemented")},t.prototype.fft=function(t){throw new Error("Not yet implemented")},t.prototype.ifft=function(t){throw new Error("Not yet implemented")},t.prototype.complex=function(t,e){throw new Error("Not yet implemented")},t.prototype.real=function(t){throw new Error("Not yet implemented")},t.prototype.imag=function(t){throw new Error("Not yet implemented")},t.prototype.cropAndResize=function(t,e,n,r,o,i){throw new Error("Not yet implemented")},t.prototype.depthToSpace=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.split=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.sparseToDense=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.diag=function(t){throw new Error("Not yet implemented")},t.prototype.fill=function(t,e,n){throw new Error("Not yet implemented.")},t.prototype.onesLike=function(t){throw new Error("Not yet implemented")},t.prototype.zerosLike=function(t){throw new Error("Not yet implemented")},t.prototype.linspace=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.dispose=function(){throw new Error("Not yet implemented")},t}();function io(t,e){for(var n=t.length,r=[],o=0;o<n;o++){var i=n-1-o,a=t[i]||1;(e[e.length-1-o]||1)>1&&1===a&&r.unshift(i)}return r}function ao(t,e){for(var n=[],r=0;r<e.length;r++){var o=t[t.length-r-1],i=e.length-r-1,a=e[i];(null==o||1===o&&a>1)&&n.unshift(i)}return n}function so(t,e){for(var n=[],r=Math.max(t.length,e.length),o=0;o<r;o++){var i=t[t.length-o-1];null==i&&(i=1);var a=e[e.length-o-1];if(null==a&&(a=1),1===i)n.unshift(a);else if(1===a)n.unshift(i);else{if(i!==a)throw Error("Operands could not be broadcast together with shapes "+t+" and "+e+".");n.unshift(i)}}return n}function uo(t,e,n,r,o,i,a){void 0===a&&(a="channelsLast");var s,u=po(e),c=u[0],l=u[1];if("channelsLast"===a)s=[c,l,t[3],t[3]];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);s=[c,l,t[1],t[1]]}return lo(t,s,n,r,o,i,!1,a)}function co(t,e,n,r,o,i,a){void 0===a&&(a="NDHWC");var s,u,c=vo(e),l=c[0],h=c[1],f=c[2];if("NDHWC"===a)u="channelsLast",s=[l,h,f,t[4],t[4]];else{if("NCDHW"!==a)throw new Error("Unknown dataFormat "+a);u="channelsFirst",s=[l,h,f,t[1],t[1]]}return ho(t,s,n,r,o,!1,u,i)}function lo(t,e,n,r,o,i,a,s){void 0===a&&(a=!1),void 0===s&&(s="channelsLast");var u=[-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3];if("channelsLast"===s)c=t[0],l=t[1],h=t[2],f=t[3];else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);c=t[0],f=t[1],l=t[2],h=t[3]}var d,p=e[0],v=e[1],m=e[3],g=po(n),y=g[0],b=g[1],w=po(r),C=w[0],E=w[1],R=mo(p,C),A=mo(v,E),S=function(t,e,n,r,o,i,a,s){var u,c,l;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};var h=function(t,e,n,r,o){null==r&&(r=fo(t,e,n));var i=t[1],a=go((t[0]-e+2*r)/n+1,o);x(I(a),(function(){return"The output # of rows ("+a+") must be an integer. Change the stride and/or zero pad parameters"}));var s=go((i-e+2*r)/n+1,o);return x(I(s),(function(){return"The output # of columns ("+s+") must be an integer. Change the stride and/or zero pad parameters"})),[a,s]}([e,n],i,r,t,s);c=h[0],l=h[1]}else if("same"===t){c=Math.ceil(e/r),l=Math.ceil(n/o);var f=Math.max(0,(c-1)*r+i-e),d=Math.max(0,(l-1)*o+a-n),p=Math.floor(f/2),v=f-p,m=Math.floor(d/2);u={top:p,bottom:v,left:m,right:d-m,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-i+1)/r),l=Math.ceil((n-a+1)/o)}return{padInfo:u,outHeight:c,outWidth:l}}(o,l,h,y,b,R,A,i),k=S.padInfo,N=S.outHeight,T=S.outWidth,D=a?m*f:m;return"channelsFirst"===s?d=[c,D,N,T]:"channelsLast"===s&&(d=[c,N,T,D]),{batchSize:c,dataFormat:s,inHeight:l,inWidth:h,inChannels:f,outHeight:N,outWidth:T,outChannels:D,padInfo:k,strideHeight:y,strideWidth:b,filterHeight:p,filterWidth:v,effectiveFilterHeight:R,effectiveFilterWidth:A,dilationHeight:C,dilationWidth:E,inShape:t,outShape:d,filterShape:e}}function ho(t,e,n,r,o,i,a,s){void 0===i&&(i=!1),void 0===a&&(a="channelsLast");var u=[-1,-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3],d=u[4];if("channelsLast"===a)c=t[0],l=t[1],h=t[2],f=t[3],d=t[4];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);c=t[0],d=t[1],l=t[2],h=t[3],f=t[4]}var p,v=e[0],m=e[1],g=e[2],y=e[4],b=vo(n),w=b[0],C=b[1],E=b[2],R=vo(r),A=R[0],S=R[1],k=R[2],N=mo(v,A),T=mo(m,S),D=mo(g,k),_=function(t,e,n,r,o,i,a,s,u,c,l){var h,f,d,p;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};var v=function(t,e,n,r,o,i){null==o&&(o=fo(t,e,r));var a=t[1],s=t[2],u=go((t[0]-e+2*o)/r+1,i);x(I(u),(function(){return"The output # of depths ("+u+") must be an integer. Change the stride and/or zero pad parameters"}));var c=go((a-e+2*o)/r+1,i);x(I(c),(function(){return"The output # of rows ("+c+") must be an integer. Change the stride and/or zero pad parameters"}));var l=go((s-e+2*o)/r+1,i);return x(I(l),(function(){return"The output # of columns ("+l+") must be an integer. Change the stride and/or zero pad parameters"})),[u,c,l,1]}([e,n,r,1],s,0,o,t,l);f=v[0],d=v[1],p=v[2]}else if("same"===t){var m=((f=Math.ceil(e/o))-1)*o+s-e,g=((d=Math.ceil(n/i))-1)*i+u-n,y=((p=Math.ceil(r/a))-1)*a+c-r,b=Math.floor(m/2),w=m-b,C=Math.floor(g/2),E=g-C,R=Math.floor(y/2);h={top:C,bottom:E,left:R,right:y-R,front:b,back:w,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((e-s+1)/o),d=Math.ceil((n-u+1)/i),p=Math.ceil((r-c+1)/a)}return{padInfo:h,outDepth:f,outHeight:d,outWidth:p}}(o,l,h,f,w,C,E,N,T,D,s),O=_.padInfo,M=_.outDepth,F=_.outHeight,B=_.outWidth,P=i?y*d:y;return"channelsFirst"===a?p=[c,P,M,F,B]:"channelsLast"===a&&(p=[c,M,F,B,P]),{batchSize:c,dataFormat:a,inDepth:l,inHeight:h,inWidth:f,inChannels:d,outDepth:M,outHeight:F,outWidth:B,outChannels:P,padInfo:O,strideDepth:w,strideHeight:C,strideWidth:E,filterDepth:v,filterHeight:m,filterWidth:g,effectiveFilterDepth:N,effectiveFilterHeight:T,effectiveFilterWidth:D,dilationDepth:A,dilationHeight:S,dilationWidth:k,inShape:t,outShape:p,filterShape:e}}function fo(t,e,n,r){void 0===r&&(r=1);var o=mo(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function po(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function vo(t){return"number"==typeof t?[t,t,t]:t}function mo(t,e){return e<=1?t:t+(t-1)*(e-1)}function go(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function yo(t){var e=po(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function xo(t,e){return yo(t)||yo(e)}function bo(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}function wo(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();var r=Fn(t.shape),o=t.toFloat(),i=n.complex(o,r);return r.dispose(),o.dispose(),i}if(!P(t.dtype,e))return vt.make(t.shape,{dataId:t.dataId},e);if("complex64"===t.dtype){var a=n.real(t);return i=a.cast(e),a.dispose(),i}if("int32"===e)return n.int(t);if("bool"===e){var s=Sn(0,t.dtype);return i=n.notEqual(t,s),s.dispose(),i}throw new Error("Error in Cast: failed to cast "+t.dtype+" to "+e)}function Co(t,e){return vt.make(e,{dataId:t.dataId},t.dtype)}function Eo(t,e,n){var r=(e-t)/(n-1),o=Q(n,"float32");o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+r;return kn(o,"float32")}var Ro=Object.freeze({castTensor:wo,reshapeTensor:Co,linspaceImpl:Eo,upcastType:Rt,axesAreInnerMostDims:hn,combineLocations:fn,computeOutAndReduceShapes:dn,expandShapeToKeepDim:pn,assertAxesAreInnerMostDims:vn,getAxesPermutation:mn,getUndoAxesPermutation:gn,getInnerMostAxes:yn,getBroadcastDims:io,getReductionAxes:ao,assertAndGetBroadcastShape:so,assertParamsConsistent:xn,computeOutShape:bn,computePool2DInfo:uo,computePool3DInfo:co,computeConv2DInfo:lo,computeConv3DInfo:ho,computeDefaultPad:fo,tupleValuesAreOne:yo,eitherStridesOrDilationsAreOne:xo,convertConv2DDataFormat:bo});function Io(t,e){if(t.length!==e.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+t.length+", imag: "+e.length+".");for(var n=new Float32Array(2*t.length),r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Ao(t,e){return{real:t[2*e],imag:t[2*e+1]}}function So(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function ko(t,e,n){var r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function No(t,e,n,r,o){for(var i=Array.from(e).map((function(t,e){return{score:t,boxIndex:e}})).filter((function(t){return t.score>o})).sort((function(t,e){return e.score-t.score})),a=[],s=0;s<i.length;s++){var u=i[s],c=u.score,l=u.boxIndex;if(c<o)break;for(var h=!1,f=a.length-1;f>=0;--f)if(To(t,l,a[f])>=r){h=!0;break}if(!h&&(a.push(l),a.length>=n))break}return kn(a,"int32")}function To(t,e,n){var r=t.subarray(4*e,4*e+4),o=t.subarray(4*n,4*n+4),i=Math.min(r[0],r[2]),a=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),h=Math.max(o[0],o[2]),f=Math.max(o[1],o[3]),d=(s-i)*(u-a),p=(h-c)*(f-l);if(d<=0||p<=0)return 0;var v=Math.max(i,c),m=Math.max(a,l),g=Math.min(s,h),y=Math.min(u,f),x=Math.max(g-v,0)*Math.max(y-m,0);return x/(d+p-x)}function Do(t,e,n){var r=new Array(t.rank).fill(0),o=t.shape.slice();return e.map((function(e){o[n]=e;var i=t.slice(r,o);return r[n]+=e,i}))}function _o(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var o=ir(n,t.dtype);for(r=0;r<o.values.length;++r){for(var i=o.indexToLoc(r),a=new Array(t.rank),s=0;s<a.length;s++)a[s]=i[s]%t.shape[s];var u=t.locToIndex(a);o.values[r]=t.values[u]}return o.toTensor()}function Oo(t,e,n,r,o){for(var i=e[e.length-1],a=[t.length/i,i],s=a[0],u=a[1],c=O(n,s*r),l=O("int32",s*r),h=0;h<s;h++){for(var f=h*u,d=t.subarray(f,f+u),p=[],v=0;v<d.length;v++)p.push({value:d[v],index:v});p.sort((function(t,e){return e.value-t.value}));var m=h*r,g=c.subarray(m,m+r),y=l.subarray(m,m+r);for(v=0;v<r;v++)g[v]=p[v].value,y[v]=p[v].index}var x=e.slice();return x[x.length-1]=r,[In(c,x,n),In(l,x,"int32")]}function Mo(t,e){for(var n=[],r=0;r<e.length;r++)e[r]&&n.push(r);var o=ir(t,"int32"),i=ir([n.length,t.length],"int32");for(r=0;r<n.length;r++){var a=o.indexToLoc(n[r]),s=r*t.length;i.values.set(a,s)}return i.toTensor()}var Fo=function(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((function(t,e){return"T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("float v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        float result = "+r+";\n        setOutput(result);\n      }\n    "},Bo=function(t,e){this.outputShape=[],this.usesPackedTextures=!0,this.outputShape=t,this.variableNames=e.map((function(t,e){return"T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("vec4 v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        vec4 result = "+r+";\n        setOutput(result);\n      }\n    "},Po=function(t,e,n){this.variableNames=["A"];var r=t.windowSize,o=t.batchSize,i=t.inSize,a=Math.ceil(i/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a];var s="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+u+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+s+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    "};function Lo(t,e){return["x","y","z","w","u","v"].slice(0,e).map((function(e){return t+"."+e}))}function Wo(t,e){return 1===e?[t]:Lo(t,e)}function Uo(){var t,e,n,r,o,i,a,s,u,c;return 2===f.getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",o="texture",i="outputColor",a="out vec4 outputColor;",s="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",o="texture2D",i="gl_FragColor",a="",s="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:o,output:i,defineOutput:a,defineSpecialNaN:s,defineSpecialInf:u,defineRound:c}}function Vo(t,e,n){void 0===n&&(n="index");var r=j(e);return r.map((function(e,o){return"int "+t[o]+" = "+n+" / "+e+"; "+(o===r.length-1?"int "+t[o+1]+" = "+n+" - "+t[o]+" * "+e:"index -= "+t[o]+" * "+e)+";"})).join("")}function zo(t){var e=j(t).map((function(t){return t.toString()}));return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * "+e[0]+" + coords.y * "+e[1]+" + coords.z;\n  }\n"}var Go="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function Ho(t,e,n,r){var o=[];t.forEach((function(t){var e=E(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push("uniform float "+t.name+(e>1?"["+e+"]":"")+";"):(o.push("uniform sampler2D "+t.name+";"),o.push("uniform int offset"+t.name+";"))}));var i,a,s=o.join("\n"),u=t.map((function(t){return function(t,e,n){void 0===n&&(n=!1);var r="";r+=n?function t(e){var n,r,o;switch(e.shapeInfo.logicalShape.length){case 0:return n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=Uo(),"\n    vec4 "+r+"() {\n      return "+o.texture2D+"("+n+", halfCR);\n    }\n  ";case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],i=Uo();return"\n    vec4 "+n+"(int index) {\n      vec2 uv = packedUVfrom1D(\n        "+o[0]+", "+o[1]+", index);\n      return "+i.texture2D+"("+e+", uv);\n    }\n  "}(e);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,i=o[0],a=o[1],s=Uo();if(null!=o&&R(e,o))return"\n      vec4 "+r+"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2("+a+".0, "+i+".0);\n\n        return "+s.texture2D+"("+n+", uv);\n      }\n    ";var u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return"\n    vec4 "+r+"(int row, int col) {\n      vec2 uv = packedUVfrom2D("+Math.ceil(e[1]/2)+", "+u[0]+", "+u[1]+", row, col);\n      return "+s.texture2D+"("+n+", uv);\n    }\n  "}(e);case 3:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===n[0]){var s=Jo(e,n.slice(1));return"\n        "+t(s)+"\n        vec4 "+o+"(int b, int row, int col) {\n          return "+o+"("+Zo(["b","row","col"],[1,2])+");\n        }\n      "}var u=a[0],c=a[1],l=Math.ceil(n[2]/2);return"\n    vec4 "+o+"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        "+u+", "+c+", "+l*Math.ceil(n[1]/2)+", "+l+", b, row, col);\n      return "+Uo().texture2D+"("+r+", uv);\n    }\n  "}(e);default:return function(t){for(var e=t.shapeInfo.logicalShape,n=e.length,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],s=a[0],u=a[1],c=Math.ceil(e[n-1]/2),l=c*Math.ceil(e[n-2]/2),h="int b, int row, int col",f="b * "+l+" + (row / 2) * "+c+" + (col / 2)",d=2;d<n-1;d++)h="int b"+d+", "+h,f="b"+d+" * "+(l*=e[n-d-1])+" + "+f;return"\n    vec4 "+o+"("+h+") {\n      int index = "+f+";\n      int texR = index / "+u+";\n      int texC = index - texR * "+u+";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+u+", "+s+");\n      return "+Uo().texture2D+"("+r+", uv);\n    }\n  "}(e)}}(t):function t(e){var n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"float "+n+"() {return "+e+";}";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===o&&1===i)return"\n      float "+n+"() {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var a=t.shapeInfo.texShape;return"\n    float "+n+"() {\n      vec2 uv = uvFromFlat("+a[0]+", "+a[1]+", "+Xo(e)+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(e);case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"\n      float "+n+"(int index) {\n        "+Yo(t)+"\n      }\n    ";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===i&&1===o)return"\n      float "+n+"(int index) {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var a=Xo(e);return 1===i?"\n      float "+n+"(int index) {\n        vec2 uv = vec2(0.5, (float(index + "+a+") + 0.5) / "+o+".0);\n        return sampleTexture("+e+", uv);\n      }\n    ":1===o?"\n      float "+n+"(int index) {\n        vec2 uv = vec2((float(index + "+a+") + 0.5) / "+i+".0, 0.5);\n        return sampleTexture("+e+", uv);\n      }\n    ":"\n    float "+n+"(int index) {\n      vec2 uv = uvFromFlat("+o+", "+i+", index + "+a+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(e);case 2:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape;if(null!=i&&R(n,i)){var a=i[0];return"\n    float "+o+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+i[1]+".0, "+a+".0);\n      return sampleTexture("+r+", uv);\n    }\n  "}var s=_(n),u=s.newShape,c=s.keptDims,l=u;if(l.length<n.length){var h=Jo(e,l);return"\n      "+t(h)+"\n      float "+o+"(int row, int col) {\n        return "+o+"("+Zo(["row","col"],c)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2("+n[1]+", 1)));\n        "+Yo(e)+"\n      }\n    ";var f=i[0],d=i[1],p=Xo(r);return 1===d?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+p+"), vec3("+n[1]+", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / "+f+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":1===f?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+p+"), vec3("+n[1]+", 1, 1));\n      vec2 uv = vec2((index + 0.5) / "+d+".0, 0.5);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n  float "+o+"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * "+n[1]+" + col + "+p+";\n    vec2 uv = uvFromFlat("+f+", "+d+", index);\n    return sampleTexture("+r+", uv);\n  }\n"}(e);case 3:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[1]*n[2],a=n[2],s=_(n),u=s.newShape,c=s.keptDims,l=u;if(l.length<n.length){var h=Jo(e,l);return"\n        "+t(h)+"\n        float "+o+"(int row, int col, int depth) {\n          return "+o+"("+Zo(["row","col","depth"],c)+");\n        }\n      "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3("+i+", "+a+", 1)));\n        "+Yo(e)+"\n      }\n    ";var f=e.shapeInfo.texShape,d=f[0],p=f[1],v=e.shapeInfo.flatOffset;return p===i&&null==v?"\n        float "+o+"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2("+a+", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+p+".0, "+d+".0);\n          return sampleTexture("+r+", uv);\n        }\n      ":p===a&&null==v?"\n    float "+o+"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2("+n[1]+", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+p+".0, "+d+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n      float "+o+"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * "+i+" + col * "+a+" + depth + "+Xo(r)+";\n        vec2 uv = uvFromFlat("+d+", "+p+", index);\n        return sampleTexture("+r+", uv);\n      }\n  "}(e);case 4:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[3],a=n[2]*i,s=n[1]*a,u=_(n),c=u.newShape,l=u.keptDims;if(c.length<n.length){var h=Jo(e,c);return"\n      "+t(h)+"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        return "+o+"("+Zo(["row","col","depth","depth2"],l)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4("+s+", "+a+", "+i+", 1)));\n        "+Yo(e)+"\n      }\n    ";var f=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],v=d[1];return v===s&&null==f?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3("+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+v+".0, "+p+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":v===i&&null==f?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3("+n[1]*n[2]+", "+n[2]+", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+v+".0, "+p+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+s+" + col * "+a+" +\n          depth * "+i+" + depth2;\n      vec2 uv = uvFromFlat("+p+", "+v+", index + "+Xo(r)+");\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);case 5:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[4],a=n[3]*i,s=n[2]*a,u=n[1]*s,c=_(n),l=c.newShape,h=c.keptDims;if(l.length<n.length){var f=Jo(e,l);return"\n      "+t(f)+"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        return "+o+"("+Zo(["row","col","depth","depth2","depth3"],h)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+u+", "+s+", "+a+", "+i+")) +\n          depth3;\n        "+Yo(e)+"\n      }\n    ";var d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,v=p[0],m=p[1];return m===u&&null==d?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4("+s+", "+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+m+".0, "+v+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":m===i&&null==d?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+n[1]*n[2]*n[3]+",\n               "+n[2]*n[3]+", "+n[3]+", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+m+".0, "+v+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+u+" + col * "+s+" + depth * "+a+" +\n          depth2 * "+i+" + depth3 + "+Xo(r)+";\n      vec2 uv = uvFromFlat("+v+", "+m+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);case 6:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=_(n),a=i.newShape,s=i.keptDims;if(a.length<n.length){var u=Jo(e,a);return"\n      "+t(u)+"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return "+o+"("+Zo(["row","col","depth","depth2","depth3","depth4"],s)+");\n      }\n    "}var c=n[5],l=n[4]*c,h=n[3]*l,f=n[2]*h,d=n[1]*f;if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4("+d+", "+f+", "+h+", "+l+")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2("+c+", 1)));\n        "+Yo(e)+"\n      }\n    ";var p=e.shapeInfo.flatOffset,v=e.shapeInfo.texShape,m=v[0],g=v[1];return g===d&&null==p?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4("+f+", "+h+", "+l+", "+c+")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":g===c&&null==p?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4("+n[1]*n[2]*n[3]*n[4]+",\n               "+n[2]*n[3]*n[4]+",\n               "+n[3]*n[4]+",\n               "+n[4]+")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+d+" + col * "+f+" + depth * "+h+" +\n          depth2 * "+l+" + depth3 * "+c+" + depth4 + "+Xo(r)+";\n      vec2 uv = uvFromFlat("+m+", "+g+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);default:throw new Error(n.length+"-D input sampling is not yet supported")}}(t);var o=t.shapeInfo.logicalShape,i=e.logicalShape;return o.length<=i.length&&(r+=n?function(t,e){var n,r=t.name,o=r.charAt(0).toUpperCase()+r.slice(1),i="get"+o+"AtOutCoords",a=t.shapeInfo.logicalShape.length,s=e.logicalShape.length,u=io(t.shapeInfo.logicalShape,e.logicalShape),c=Qo(s),l=s-a,h=["x","y","z","w","u","v"];n=0===a?"":s<2&&u.length>=1?"coords = 0;":u.map((function(t){return"coords."+h[t+l]+" = 0;"})).join("\n");var f;f=s<2&&a>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return"coords."+h[e+l]})).join(", ");var d="return outputValue;",p=1===E(t.shapeInfo.logicalShape),v=1===E(e.logicalShape);if(1!==a||p||v){if(p&&!v)d=1===s?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){var m=a-2,g=a-1;u.indexOf(m)>-1&&u.indexOf(g)>-1?d="return vec4(outputValue.x);":u.indexOf(m)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(g)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 "+i+"() {\n      "+c+" coords = getOutputCoords();\n      "+n+"\n      vec4 outputValue = get"+o+"("+f+");\n      "+d+"\n    }\n  "}(t,e):function(t,e){var n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",i=e.texShape,a=t.shapeInfo.texShape,s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&s===u&&null==t.shapeInfo.flatOffset&&R(a,i))return"\n      float "+o+"() {\n        return sampleTexture("+n+", resultUV);\n      }\n    ";var c=Qo(u),l=io(t.shapeInfo.logicalShape,e.logicalShape),h=u-s,f=["x","y","z","w","u","v"];return"\n    float "+o+"() {\n      "+c+" coords = getOutputCoords();\n      "+(0===s?"":u<2&&l.length>=1?"coords = 0;":l.map((function(t){return"coords."+f[t+h]+" = 0;"})).join("\n"))+"\n      return get"+r+"("+(u<2&&s>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return"coords."+f[e+h]})).join(", "))+");\n    }\n  "}(t,e)),r}(t,e,r)})).join("\n"),c=e.texShape,l=Uo(),h=function(t){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return "+t.texture2D+"(textureSampler, uv).r;\n    }\n  "}(l),f=function(t){return t.version+"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    "+t.varyingFs+" vec2 resultUV;\n    "+t.defineOutput+"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    "+t.defineSpecialNaN+"\n    "+t.defineSpecialInf+"\n    "+t.defineRound+"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    "+qo+"\n    "+$o+"\n    "+jo+"\n  "}(l);return e.isPacked?(i=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return 1===n[0]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * "+n[1]+".0);\n      }\n    ":1===n[1]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * "+n[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      return 2 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n    }\n  "}(0,e);case 2:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(R(t,e))return"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2("+n[0]+", "+n[1]+"));\n      }\n    ";var r=Math.ceil(t[1]/2);return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=t,r=e,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=(i=Math.ceil(n[2]/2))*Math.ceil(n[1]/2),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+o[0]+", "+o[1]+"));\n      int index = resTexRC.x * "+o[1]+" + resTexRC.y;\n\n      int b = index / "+a+";\n      index -= b * "+a+";\n\n      int r = 2 * (index / "+i+");\n      int c = imod(index, "+i+") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";default:return function(t,e){for(var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2),i=o,a="",s="b, r, c",u=2;u<t.length-1;u++)a="\n      int b"+u+" = index / "+(i*=t[t.length-u-1])+";\n      index -= b"+u+" * "+i+";\n    "+a,s="b"+u+", "+s;return"\n    ivec"+t.length+" getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+a+"\n\n      int b = index / "+o+";\n      index -= b * "+o+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec"+t.length+"("+s+");\n    }\n  "}(t,e)}var n,r,o,i,a}(e.logicalShape,c),a=function(t){return"\n    void setOutput(vec4 val) {\n      "+t.output+" = val;\n    }\n  "}(l)):(i=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){return 1===e[0]?"\n      int getOutputCoords() {\n        return int(resultUV.x * "+e[1]+".0);\n      }\n    ":1===e[1]?"\n      int getOutputCoords() {\n        return int(resultUV.y * "+e[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      return resTexRC.x * "+e[1]+" + resTexRC.y;\n    }\n  "}(0,e);case 2:return function(t,e){return R(t,e)?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+e[0]+", "+e[1]+"));\n      }\n    ":1===t[1]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":1===t[0]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      int r = index / "+t[1]+";\n      int c = index - r * "+t[1]+";\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=e,r=Vo(["r","c","d"],t),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      "+r+"\n      return ivec3(r, c, d);\n    }\n  ";case 4:return function(t,e){var n=Vo(["r","c","d","d2"],t);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      "+n+"\n      return ivec4(r, c, d, d2);\n    }\n  "}(t,e);case 5:return function(t,e){var n=Vo(["r","c","d","d2","d3"],t);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2("+e[0]+",\n                             "+e[1]+"));\n\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "}(t,e);case 6:return function(t,e){var n=Vo(["r","c","d","d2","d3","d4"],t);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}var n,r}(e.logicalShape,c),a=function(t){return"\n    void setOutput(float val) {\n      "+t.output+" = vec4(val, 0, 0, 0);\n    }\n  "}(l)),r&&(f+=Ko),[f,h,a,s,i,u,n].join("\n")}var qo="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",$o="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",jo="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Ko="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Xo(t){return"offset"+t}function Yo(t){var e=t.name,n=E(t.shapeInfo.logicalShape);return n<2?"return "+e+";":"\n    for (int i = 0; i < "+n+"; i++) {\n      if (i == index) {\n        return "+e+"[i];\n      }\n    }\n  "}function Qo(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error("GPU for rank "+t+" is not yet supported")}function Jo(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function Zo(t,e){return e.map((function(e){return t[e]})).join(", ")}var ti=function(t,e,n,r){this.variableNames=["A"],this.usesPackedTextures=!0,x(t.length>2,(function(){return"Packed arg"+(n.charAt(0).toUpperCase()+n.slice(1))+" supports only inputs with rank above 2."}));var o=t[t.length-1],i=Math.ceil(o/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");var a,s,u=this.outputShape,c=u.length,l=Qo(c),h=Wo("coords",c);if(1===i){var f=Qo(s=c+1);a="\n        "+f+" sourceLocR = "+f+"("+h.join()+", 0);\n        ++"+h[c-1]+";\n        "+f+" sourceLocG = "+f+"("+h.join()+", 0);\n        ++"+h[c-2]+";\n        "+f+" sourceLocA = "+f+"("+h.join()+", 0);\n        --"+h[c-1]+";\n        "+f+" sourceLocB = "+f+"("+h.join()+", 0);\n        --"+h[c-2]+";"}else s=c,a="\n        "+l+" sourceLocR = coords;\n        ++"+h[c-1]+";\n        "+l+" sourceLocG = coords;\n        ++"+h[c-2]+";\n        "+l+" sourceLocA = coords;\n        --"+h[c-1]+";\n        "+l+" sourceLocB = coords;\n        --"+h[c-2]+";";var d=["x","y","z","w","u","v"].slice(0,s),p="."+d[s-1],v=d.map((function(t){return"int "+t})),m=Wo("sourceLocR",s-1).concat("inIdx.r"),g=Wo("sourceLocG",s-1).concat("inIdx.g"),y=Wo("sourceLocB",s-1).concat("inIdx.b"),b=Wo("sourceLocA",s-1).concat("inIdx.a"),w="max"===n?"greaterThan":"lessThan",C=r?"":"\n          inIdx = round(vec4(getBestIndicesAChannel("+m.join()+"),\n                             getBestIndicesAChannel("+g.join()+"),\n                             getBestIndicesAChannel("+y.join()+"),\n                             getBestIndicesAChannel("+b.join()+")));",E="vec4(\n            getAChannel("+m.join()+"),\n            hasNextCol ? getAChannel("+g.join()+") : 0.,\n            hasNextRow ? getAChannel("+y.join()+") : 0.,\n            hasNextRow && hasNextCol ? getAChannel("+b.join()+") : 0.)",R=r?"":"\n      float getBestIndicesAChannel("+v.join()+") {\n        return getChannel(getBestIndicesA("+d.join()+"),\n                                          vec2("+d.slice(-2).join()+"));\n      }";this.userCode="\n      float getAChannel("+v.join()+") {\n        return getChannel(getA("+d.join()+"),\n                               vec2("+d.slice(-2).join()+"));\n      }\n      "+R+"\n      void main() {\n        "+l+" coords = getOutputCoords();\n        bool hasNextCol = "+h[c-1]+" < "+(u[c-1]-1)+";\n        bool hasNextRow = "+h[c-2]+" < "+(u[c-2]-1)+";\n        "+a+"\n        ivec4 srcIdx = ivec4(sourceLocR"+p+", sourceLocG"+p+",\n          sourceLocB"+p+", sourceLocA"+p+") * "+e+";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = "+E+";\n\n        for (int i = 0; i < "+e+"; i++) {\n          inIdx = srcIdx;\n          "+C+"\n          vec4 candidate = "+E+";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4("+w+"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    "},ei=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=s-1-t.padInfo.top,l=u-1-t.padInfo.left,h=1/(e*n);this.userCode="\n      const ivec2 pads = ivec2("+c+", "+l+");\n      const float avgMultiplier = float("+h+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+s+";\n            wR += "+i+") {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+u+";\n            wC+= "+a+") {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ni=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,d=l-1-t.padInfo.front,p=h-1-t.padInfo.top,v=f-1-t.padInfo.left,m=1/(e*n*r);this.userCode="\n      const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n      const float avgMultiplier = float("+m+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          float dyD = float(dyDCorner + wD) / "+o+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+h+";\n              wR += "+u+") {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+f+";\n                wC += "+c+") {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ri=function(t,e,n,r,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],so(t,e),so(t,n);var a="0.0";null!=r&&(so(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var s="1.0";null!=o&&(so(t,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+a+";\n        float scale = "+s+";\n        float inv = scale * inversesqrt(variance + float("+i+"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    "},oi=function(t,e,n,r,o,i){this.usesPackedTextures=!0,this.variableNames=["x","mean","variance"],so(t,e),so(t,n);var a="vec4(0.0)";null!=r&&(so(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var s="vec4(1.0)";null!=o&&(so(t,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = "+a+";\n        vec4 scale = "+s+";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4("+i+"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    "},ii=function(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=so(e,n),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        "+t+"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    "},ai="return a + b;",si="return a - b;",ui="return a * b;",ci="return (a < 0.) ? b * a : a;",li=function(t,e,n){this.variableNames=["A","B"],this.outputShape=so(e,n),this.userCode="\n      float binaryOperation(float a, float b) {\n        "+t+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "},hi="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",fi=function(t,e,n,r){void 0===r&&(r=!1),this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.usesPackedTextures=!0,this.outputShape=so(e,n);var o=this.outputShape.length,i="";if(r)if(0===o||1===E(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i="\n          "+Qo(o)+" coords = getOutputCoords();\n        ",1===o)i+="\n            result.y = (coords + 1) >= "+this.outputShape[0]+" ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";else{var a=Wo("coords",o);i+="\n            bool nextRowOutOfBounds =\n              ("+a[o-2]+" + 1) >= "+this.outputShape[o-2]+";\n            bool nextColOutOfBounds =\n              ("+a[o-1]+" + 1) >= "+this.outputShape[o-1]+";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          "}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        "+t+"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        "+i+"\n\n        setOutput(result);\n      }\n    "},di=function(){function t(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),pi=function(){function t(t){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),vi=function(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "},mi=function(t){this.outputShape=[],this.outputShape=bn(t,1),this.variableNames=t.map((function(t,e){return"T"+e}));var e=new Array(t.length-1);e[0]=t[0][1];for(var n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];var r=["if (yC < "+e[0]+") setOutput(getT0(yR, yC));"];for(n=1;n<e.length;n++){var o=e[n-1];r.push("else if (yC < "+e[n]+") setOutput(getT"+n+"(yR, yC-"+o+"));")}var i=e.length,a=e[e.length-1];r.push("else setOutput(getT"+i+"(yR, yC-"+a+"));"),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        "+r.join("\n        ")+"\n      }\n    "},gi=function(t,e){this.usesPackedTextures=!0,this.outputShape=[],this.outputShape=bn(t,e);var n=this.outputShape,r=n.length,o=Qo(r),i=Wo("coords",r),a=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((function(t,e){return"T"+e}));var s=new Array(t.length-1);s[0]=t[0][e];for(var u=1;u<s.length;u++)s[u]=s[u-1]+t[u][e];var c=a[e],l=a.slice(-2),h=a.join(),f="if ("+c+" < "+s[0]+") {\n        return getChannel(\n            getT0("+h+"), vec2("+l.join()+"));\n        }";for(u=1;u<s.length;u++){var d=s[u-1];f+="\n        if ("+c+" < "+s[u]+"  && "+c+" >= "+s[u-1]+") {\n          return getChannel(\n            getT"+u+"("+yi(a,c,d)+"),\n            vec2("+yi(l,c,d)+"));\n        }"}var p=s.length,v=s[s.length-1];f+="\n        return getChannel(\n          getT"+p+"("+yi(a,c,v)+"),\n          vec2("+yi(l,c,v)+"));",this.userCode="\n      float getValue("+a.map((function(t){return"int "+t}))+") {\n        "+f+"\n      }\n\n      void main() {\n        "+o+" coords = getOutputCoords();\n        vec4 result = vec4(getValue("+i+"), 0., 0., 0.);\n\n        "+i[r-1]+" = "+i[r-1]+" + 1;\n        if ("+i[r-1]+" < "+n[r-1]+") {\n          result.g = getValue("+i+");\n        }\n\n        "+i[r-2]+" = "+i[r-2]+" + 1;\n        if ("+i[r-2]+" < "+n[r-2]+") {\n          result.a = getValue("+i+");\n        }\n\n        "+i[r-1]+" = "+i[r-1]+" - 1;\n        if ("+i[r-2]+" < "+n[r-2]+" &&\n            "+i[r-1]+" < "+n[r-1]+") {\n          result.b = getValue("+i+");\n        }\n        setOutput(result);\n      }\n    "};function yi(t,e,n){var r=t.indexOf(e);return t.map((function(t,e){return e===r?t+" - "+n:t})).join()}var xi=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i="channelsLast"===t.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              if ("+i+") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},bi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i="channelsLast"===t.dataFormat,a=e-1-t.padInfo.top,s=n-1-t.padInfo.left,u=i?1:2,c=i?2:3,l=i?3:1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords["+l+"];\n\n        ivec2 dyCorner = ivec2(coords["+u+"], coords["+c+"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n\n              if ("+i+") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},wi=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yF = 0; yF < "+t.outDepth+"; yF++) {\n            int xF = wF + yF * "+e+" - "+o+";\n\n            if (xF < 0 || xF >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n              int xR = wR + yR * "+n+" - "+i+";\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n                int xC = wC + yC * "+r+" - "+a+";\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ci=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3("+s+", "+u+", "+c+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+e+"; wF++) {\n          float dyF = float(dyFCorner + wF) / "+o+".0;\n\n          if (dyF < 0.0 || dyF >= "+t.outDepth+".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = "+e+" - 1 - wF;\n\n          for (int wR = 0; wR < "+n+"; wR++) {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = "+n+" - 1 - wR;\n\n            for (int wC = 0; wC < "+r+"; wC++) {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = "+r+" - 1 - wC;\n\n              for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ei=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * "+i+" + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ri=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=e-1-t.padInfo.top,a=n-1-t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < "+s+"; dm++) {\n              int d2 = d1 * "+s+" + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ii=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.padInfo.top,i=t.padInfo.left,a=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,h=t.filterWidth,f=4*Math.floor(t.inChannels/4),d=t.inChannels%4,p="channelsLast"===t.dataFormat,v=p?1:2,m=p?2:3,g=p?3:1,y="",x="";n&&(y=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",x="result = activation(result);");var b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+y+"\n\n      const ivec2 strides = ivec2("+a+", "+s+");\n      const ivec2 pads = ivec2("+o+", "+i+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords["+g+"];\n\n        ivec2 xRCCorner =\n            ivec2(coords["+v+"], coords["+m+"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+l+"; wR++) {\n          int xR = xRCorner + wR * "+u+";\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+h+"; wC++) {\n            int xC = xCCorner + wC * "+c+";\n\n            if (xC < 0 || xC >= "+t.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+f+"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if ("+p+") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if ("+(1===d)+") {\n\n              if ("+p+") {\n                dotProd +=\n                    getX(batch, xR, xC, "+f+") *\n                    getW(wR, wC, "+f+", d2);\n              } else {\n                dotProd +=\n                    getX(batch, "+f+", xR, xC) *\n                    getW(wR, wC, "+f+", d2);\n              }\n\n            } else if ("+(2===d)+") {\n              vec2 wValues = vec2(\n                getW(wR, wC, "+f+", d2),\n                getW(wR, wC, "+f+" + 1, d2)\n              );\n\n              if ("+p+") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, "+f+"),\n                  getX(batch, xR, xC, "+f+" + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, "+f+", xR, xC),\n                  getX(batch, "+f+" + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if ("+(3===d)+") {\n              vec3 wValues = vec3(\n                getW(wR, wC, "+f+", d2),\n                getW(wR, wC, "+f+" + 1, d2),\n                getW(wR, wC, "+f+" + 2, d2)\n              );\n\n              if ("+p+") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, "+f+"),\n                  getX(batch, xR, xC, "+f+" + 1),\n                  getX(batch, xR, xC, "+f+" + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, "+f+", xR, xC),\n                  getX(batch, "+f+" + 1, xR, xC),\n                  getX(batch, "+f+" + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        "+b+"\n        "+x+"\n        setOutput(result);\n      }\n    "},Ai=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,h=t.filterHeight,f=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+e+", "+n+", "+r+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+l+"; wF++) {\n          int xF = xFCorner + wF * "+s+";\n\n          if (xF < 0 || xF >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+h+"; wR++) {\n            int xR = xRCorner + wR * "+u+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+f+"; wC++) {\n              int xC = xCCorner + wC * "+c+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < "+d+"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if ("+(1===p)+") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, "+d+") *\n                  getW(wF, wR, wC, "+d+", d2);\n              } else if ("+(2===p)+") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, "+d+"),\n                  getX(batch, xF, xR, xC, "+d+" + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, "+d+", d2),\n                  getW(wF, wR, wC, "+d+" + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if ("+(3===p)+") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, "+d+"),\n                  getX(batch, xF, xR, xC, "+d+" + 1),\n                  getX(batch, xF, xR, xC, "+d+" + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, "+d+", d2),\n                  getW(wF, wR, wC, "+d+" + 1, d2),\n                  getW(wF, wR, wC, "+d+" + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Si=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.inHeight,i=t.inWidth,a=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,d=t.filterWidth,p=t.outChannels/t.inChannels,v="",m="";n&&(v=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",m="result = activation(result);");var g=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+v+"\n\n      const ivec2 strides = ivec2("+u+", "+c+");\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+p+";\n        int q = d2 - d1 * "+p+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+f+"; wR++) {\n          int xR = xRCorner + wR * "+l+";\n\n          if (xR < 0 || xR >= "+o+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+d+"; wC++) {\n            int xC = xCCorner + wC * "+h+";\n\n            if (xC < 0 || xC >= "+i+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        "+g+"\n        "+m+"\n        setOutput(result);\n      }\n    "},ki=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.usesPackedTextures=!0,this.outputShape=t.outShape;for(var o=t.inHeight,i=t.inWidth,a=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,c=t.strideWidth,l=t.dilationHeight,h=t.dilationWidth,f=t.filterHeight,d=t.filterWidth,p=d,v="int xR; int xC; int xCOffset;",m=0;m<f;m++)for(var y=0;y<d;y++)v+="\n          vec4 xTexelR"+m+"C"+2*y+" = vec4(0.);\n          vec4 wR"+m+"C"+y+" = vec4(0.);\n          vec4 xR"+m+"C"+y+" = vec4(0.);";for(m=0;m<f;m++)for(var x=0;x<p;x++){if(v+="\n          xR = xRCorner + "+m*l+";\n          xC = xCCorner + "+(y=2*x)*h+";\n        ",1===c){if(y<d&&(v+=s%2==1?"\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+y+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+m+"C"+y+" = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR"+m+"C"+y+" = vec4(previous.zw, xTexelR"+m+"C"+y+".xy);\n                } else {\n                  xR"+m+"C"+y+" = vec4(0, 0, xTexelR"+m+"C"+y+".xy);\n                }\n              ":"\n                if(xR >= 0 && xR < "+o+" && xC >= 0 && xC < "+i+") {\n                  xTexelR"+m+"C"+y+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+m+"C"+y+" = vec4(0.);\n                }\n\n                xR"+m+"C"+y+" = xTexelR"+m+"C"+y+";\n              ",y+1<d)){var b=s%2==0?g(h):h;h%2==0&&s%2==1||h%2!=0&&s%2!=1?(v+="\n                  xCOffset = xC + "+s%2+" + "+b+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+m+"C"+(y+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n                ",h>1&&(v+="\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < "+o+" &&\n                      xCOffset >= 0 && xCOffset < "+i+") {\n                      xTexelR"+m+"C"+y+" = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR"+m+"C"+y+" = vec4(0.);\n                    }\n                  "),v+="\n                  xR"+m+"C"+(y+1)+" = vec4(\n                    xTexelR"+m+"C"+y+".zw, xTexelR"+m+"C"+(y+2)+".xy);\n                "):v+="\n                  xCOffset = xC + "+b+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+m+"C"+(y+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR"+m+"C"+(y+1)+" = xTexelR"+m+"C"+(y+2)+";\n                "}}else y<d&&(v+="\n              if(xR >= 0 && xR < "+o+") {\n            ",s%2==1?(v+="\n                xCOffset = xC + 1 - "+c+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+y+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+m+"C"+y+" = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < "+i+") {\n                  xTexelR"+m+"C"+(y+2)+" = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR"+m+"C"+(y+2)+" = vec4(0.);\n                }\n\n                xR"+m+"C"+y+" = vec4(\n                  xTexelR"+m+"C"+y+".zw, xTexelR"+m+"C"+(y+2)+".zw);\n              ",y+1<d&&(v+="\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + "+c+";\n                  if(xCOffset >= 0 && xCOffset < "+i+") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR"+m+"C"+(y+1)+" = vec4(xTexelR"+m+"C"+(y+2)+".xy, final.xy);\n                ")):(v+="\n                if(xC >= 0 && xC < "+i+") {\n                  xTexelR"+m+"C"+y+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+m+"C"+y+" = vec4(0.);\n                }\n\n                xCOffset = xC + "+c+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+m+"C"+(y+2)+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+m+"C"+(y+2)+" = vec4(0.);\n                }\n\n                xR"+m+"C"+y+" = vec4(\n                  xTexelR"+m+"C"+y+".xy, xTexelR"+m+"C"+(y+2)+".xy);\n              ",y+1<d&&(v+="\n                  xR"+m+"C"+(y+1)+" = vec4(\n                    xTexelR"+m+"C"+y+".zw, xTexelR"+m+"C"+(y+2)+".zw);\n                ")),v+="}");y<d&&(v+="\n            vec4 wTexelR"+m+"C"+y+" = getW("+m+", "+y+", d1, q);\n            wR"+m+"C"+y+" = vec4(wTexelR"+m+"C"+y+".xz, wTexelR"+m+"C"+y+".xz);\n          ",y+1<d&&(v+="\n              vec4 wTexelR"+m+"C"+(y+1)+" = getW("+m+", "+(y+1)+", d1, q);\n              wR"+m+"C"+(y+1)+" =\n                vec4(wTexelR"+m+"C"+(y+1)+".xz, wTexelR"+m+"C"+(y+1)+".xz);"))}for(m=0;m<f;m++)for(y=0;y<d;y++)v+="dotProd += xR"+m+"C"+y+" * wR"+m+"C"+y+";";var w="",C="";n&&(w=r?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"vec4 activation(vec4 x) {\n          "+n+"\n        }",C="result = activation(result);");var E=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+w+"\n\n      const ivec2 strides = ivec2("+u+", "+c+");\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        "+v+"\n\n        vec4 result = dotProd;\n        "+E+"\n        "+C+"\n        setOutput(result);\n      }\n    "},Ni=function(t,e,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var i=t[0],a=t[1],s=t[2],u=t[3],c=e[0],l=n[0],h=n[1];this.outputShape=[c,l,h,u];var f="bilinear"===r?1:0,d=[a-1+".0",s-1+".0"],p=d[0],v=d[1],m=l>1?[""+(a-1)/(l-1),"(y2-y1) * height_ratio","y1*"+p+" + float(y)*(height_scale)"]:["0.0","0.0","0.5 * (y1+y2) * "+p],g=m[0],y=m[1],x=m[2],b=h>1?[""+(s-1)/(h-1),"(x2-x1) * width_ratio","x1*"+v+" + float(x)*(width_scale)"]:["0.0","0.0","0.5 * (x1+x2) * "+v],w=b[0],C=b[1],E=b[2];this.userCode="\n      const float height_ratio = float("+g+");\n      const float width_ratio = float("+w+");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= "+i+") {\n          return;\n        }\n\n        float height_scale = "+y+";\n        float width_scale = "+C+";\n\n        float in_y = "+x+";\n        if( in_y < 0.0 || in_y > "+p+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n        float in_x = "+E+";\n        if( in_x < 0.0 || in_x > "+v+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if("+f+" == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    "},Ti=function(t,e,n){this.variableNames=["x"],this.outputShape=t;var r=t.length,o=t[t.length-1],i=n?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+(n?"return "+o+" -i - 1;":"return i;")+"\n      }\n\n      void main() {\n        "+Qo(r)+" coords = getOutputCoords();\n        int end = "+Di(r,"coords")+";\n        float val = 0.0;\n        for (int i = "+o+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+i+" end) {\n            continue;\n          }\n          if (idx == end && "+e+") {\n            continue;\n          }\n          "+Di(r,"coords")+" = idx;\n          val += getX("+function(t,e){if(1===t)return""+e;if(2===t)return e+".x, "+e+".y";if(3===t)return e+".x, "+e+".y, "+e+".z";if(4===t)return e+".x, "+e+".y, "+e+".z, "+e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}(r,"coords")+");\n        }\n        setOutput(val);\n      }\n    "};function Di(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}var _i=function(t,e){this.variableNames=["A"];var n=Uo();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Vo(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        "+n.output+" = result;\n      }\n    "},Oi=function(t,e){this.variableNames=["A"],this.usesPackedTextures=!0;var n=Uo();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Vo(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        "+n.output+" = result;\n      }\n    "},Mi=function(){function t(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = "+this.getHeightCoordString()+";\n      int w = "+this.getWidthCoordString()+";\n      int d = "+this.getDepthCoordString()+";\n\n      int in_h = h / "+e+";\n      int offset_h = imod(h, "+e+");\n      int in_w = w / "+e+";\n      int offset_w = imod(w, "+e+");\n      int offset_d = (offset_h * "+e+" + offset_w) *\n        "+this.getOutputDepthSize()+";\n      int in_d = d + offset_d;\n\n      float result = "+this.getInputSamplingString()+";\n      setOutput(result);\n    }\n  "}return t.prototype.getHeightCoordString=function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"},t.prototype.getWidthCoordString=function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"},t.prototype.getDepthCoordString=function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"},t.prototype.getOutputDepthSize=function(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},t}(),Fi=function(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "},Bi=function(t){this.variableNames=["A"];var e=Uo();this.outputShape=t,this.userCode="\n      "+Go+"\n\n      void main() {\n        float x = getAAtOutCoords();\n        "+e.output+" = encode_float(x);\n      }\n    "},Pi=function(t){this.variableNames=["A"],this.usesPackedTextures=!0;var e=Uo();this.outputShape=t,this.userCode="\n      "+Go+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        "+e.output+" = encode_float(x);\n      }\n    "},Li=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"];var r=Uo(),o=e[0],i=e[1];this.outputShape=t;var a="result";n&&(a="floor(result * 255. + 0.5)"),this.userCode="\n      "+zo(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / "+i+";\n        int c = imod(flatIndex, "+i+");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n        vec4 values = "+r.texture2D+"(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        "+r.output+" = vec4("+a+", 0., 0., 0.);\n      }\n    "},Wi=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"];var r=Uo(),o=e[0],i=e[1];this.outputShape=t;var a="",s="result";n&&(s="floor(result * 255. + 0.5)");for(var u=0;u<=1;u++)for(var c=0;c<=1;c++){var l=2*u+c;a+="\n          localCoords = coords;\n          if(localCoords[2] + "+c+" < "+t[2]+") {\n            localCoords[2] += "+c+";\n            if(localCoords[1] + "+u+" < "+t[1]+") {\n              localCoords[1] += "+u+";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n    \n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / "+i+";\n              c = imod(flatIndex, "+i+");\n              uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n              values = "+r.texture2D+"(A, uv);\n\n              if(offset == 0) {\n                result["+l+"] = values[0];\n              } else if(offset == 1) {\n                result["+l+"] = values[1];\n              } else if(offset == 2) {\n                result["+l+"] = values[2];\n              } else {\n                result["+l+"] = values[3];\n              }\n            }\n          }\n        "}this.userCode="\n      "+zo(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n        \n        "+a+"\n\n        "+r.output+" = "+s+";\n      }\n    "},Ui=function(t,e,n){this.variableNames=["real","imag"];var r=e[1];this.outputShape=e;var o=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,i=n?r+".0":"1.0";this.userCode="\n      const float exponentMultiplier = "+o+";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        "+t+"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float("+r+");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < "+r+"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / "+i+";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    "},Vi=function(){function t(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.valueLoc&&(e.valueLoc=n.getUniformLocationNoThrow(r,"value")),n.gl.uniform1f(e.valueLoc,t)}},t}(),zi=function(t){this.variableNames=["A"];var e=Uo(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+n+".0);\n\n        vec4 values = "+e.texture2D+"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    "},Gi=function(t){this.variableNames=["A"];var e=Uo(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+n+".0);\n            vec4 values = "+e.texture2D+"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        "+e.output+" = result;\n      }\n    "},Hi=function(t,e,n){this.variableNames=["A","indices"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var o=Qo(this.rank),i=function(t,e){var n=t.length;if(n>4)throw Error("Gather for rank "+n+" is not yet supported");if(1===n)return"int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],i=0;i<t.length;i++)i===e?o.push("int(getIndices("+r[i]+"))"):o.push(""+r[i]);return o.join()}(t,n);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},qi=function(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;var r=Qo(e.length),o=Qo(n.length),i=this.sliceDim>1?"strides[j]":"strides";this.userCode="\n        "+r+" strides = "+r+"("+this.strides+");\n         void main() {\n          "+o+" coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < "+this.sliceDim+"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * "+i+";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      "};function $i(t,e){var n=Uo();return Jt(t,e,n.version+"\n    precision highp float;\n    "+n.attribute+" vec3 clipSpacePos;\n    "+n.attribute+" vec2 uv;\n    "+n.varyingVs+" vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function ji(t,e){return ae(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Ki(t,e){return se(t,e,new Uint16Array([0,1,2,2,1,3]))}function Xi(t,e,n,r,o,i,a){ce(n,r);var s=ue(t,e),u=t.TEXTURE_2D;return $t(t,e,(function(){return t.bindTexture(u,s)})),$t(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),$t(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),$t(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)})),$t(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)})),$t(t,e,(function(){return t.texImage2D(u,0,o,n,r,0,i,a,null)})),$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),s}function Yi(t,e,n,r,o){var i=zt(n,r);return Xi(t,e,i[0],i[1],o.internalFormatFloat,o.textureFormatFloat,t.FLOAT)}function Qi(t,e,n,r,o){var i=zt(n,r);return Xi(t,e,i[0],i[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function Ji(t,e,n,r,o){var i=zt(n,r);return Xi(t,e,i[0],i[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function Zi(t,e,n,r,o){var i=Ht(n,r);return Xi(t,e,i[0],i[1],o.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function ta(t,e,n,r,o){var i=Ht(n,r);return Xi(t,e,i[0],i[1],o.internalFormatPackedHalfFloat,t.RGBA,o.textureTypeHalfFloat)}function ea(t,e,n,r){return $t(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),he(t,e,n,"clipSpacePos",r,3,20,0)&&he(t,e,n,"uv",r,2,20,12)}function na(t,e,n,r,o,i,a){var s,u,c;$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),i instanceof Uint8Array?(s=new Uint8Array(r*o*4),u=t.UNSIGNED_BYTE,c=t.RGBA):(s=new Float32Array(r*o*4),u=t.FLOAT,c=a.internalFormatPackedFloat),s.set(i),$t(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,c,r,o,0,t.RGBA,u,s)})),$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function ra(t,e,n,r){$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),r.data instanceof Uint8Array?$t(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):$t(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function oa(t,e,n,r,o){var i=t.createBuffer();$t(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,i)}));var a=16*n*r;return $t(t,e,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)})),$t(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)})),$t(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),i}function ia(t,e,n){var r=t,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function aa(t,e,n,r,o){var i=zt(n,r),a=i[0],s=i[1],u=new Uint8Array(n*r*4);return $t(t,e,(function(){return t.readPixels(0,0,a,s,o.downloadTextureFormat,t.UNSIGNED_BYTE,u)})),new Float32Array(u.buffer)}function sa(t,e,n,r,o,i,a,s){var u=t,c=new Float32Array(function(t,e){var n=Ht(t,e);return n[0]*n[1]*4}(i,a));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}function ua(t,e,n,r){var o=new Float32Array(n*r*4);return $t(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,o)})),o}var ca=Object.freeze({createVertexShader:$i,createVertexBuffer:ji,createIndexBuffer:Ki,createFloat32MatrixTexture:Yi,createFloat16MatrixTexture:Qi,createUnsignedBytesMatrixTexture:Ji,createPackedMatrixTexture:Zi,createFloat16PackedMatrixTexture:ta,bindVertexProgramAttributeStreams:ea,uploadDenseMatrixToTexture:na,uploadPixelDataToTexture:ra,createBufferFromOutputTexture:oa,downloadFloat32MatrixFromBuffer:ia,downloadByteEncodedFloatMatrixFromOutputTexture:aa,downloadPackedMatrixFromBuffer:sa,downloadMatrixFromPackedOutputTexture:ua}),la=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var e=f.getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,Wt(e,t)):this.gl=Ut(e),1===f.getNumber("WEBGL_VERSION"))this.textureFloatExtension=Qt(this.gl,this.debug,"OES_texture_float"),this.colorBufferFloatExtension=this.gl.getExtension("WEBGL_color_buffer_float"),this.textureHalfFloatExtension=Qt(this.gl,this.debug,"OES_texture_half_float"),this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float");else if(De(this.gl,"EXT_color_buffer_float"))this.colorBufferFloatExtension=this.gl.getExtension("EXT_color_buffer_float");else{if(!De(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=ji(this.gl,this.debug),this.indexBuffer=Ki(this.gl,this.debug),this.framebuffer=le(this.gl,this.debug),this.textureConfig=qt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(t.prototype,"debug",{get:function(){return f.getBool("DEBUG")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var e=this.gl;$t(e,this.debug,(function(){return e.finish()})),$t(e,this.debug,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)})),$t(e,this.debug,(function(){return e.deleteFramebuffer(t.framebuffer)})),$t(e,this.debug,(function(){return e.bindBuffer(e.ARRAY_BUFFER,null)})),$t(e,this.debug,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)})),$t(e,this.debug,(function(){return e.deleteBuffer(t.indexBuffer)})),this.disposed=!0}},t.prototype.createFloat32MatrixTexture=function(t,e){return this.throwIfDisposed(),Yi(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,e){return this.throwIfDisposed(),Qi(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,e){return this.throwIfDisposed(),Ji(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),ra(this.gl,this.debug,t,e)},t.prototype.uploadDenseMatrixToTexture=function(t,e,n,r){this.throwIfDisposed(),na(this.gl,this.debug,t,e,n,r,this.textureConfig)},t.prototype.createFloat16PackedMatrixTexture=function(t,e){return this.throwIfDisposed(),ta(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),Zi(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(ge(this.gl,this.debug,this.framebuffer),this.outputTexture=null),$t(this.gl,this.debug,(function(){return e.gl.deleteTexture(t)}))},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return aa(r.gl,r.debug,e,n,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,e,n,r,o,i){return sa(this.gl,t,0,0,0,o,i,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,e){return ia(this.gl,t,e)},t.prototype.createBufferFromTexture=function(t,e,n){this.bindTextureToFrameBuffer(t);var r=oa(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var e,n,r=this;if(f.getBool("WEBGL_FENCE_API_ENABLED")){var o=t,i=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=function(){var t=o.clientWaitSync(i,0,0);return t===o.ALREADY_SIGNALED||t===o.CONDITION_SATISFIED},e=i}else f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(e,f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):n=function(){return!0};return{query:e,isFencePassed:n}},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return ua(r.gl,r.debug,e,n)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=Zt(e,this.debug,t),r=$i(e,this.debug),o=re(e,this.debug);return $t(e,this.debug,(function(){return e.attachShader(o,r)})),$t(e,this.debug,(function(){return e.attachShader(o,n)})),oe(e,this.debug,o),this.debug&&ie(e,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=ea(e,this.debug,this.program,this.vertexBuffer)),o},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&$t(this.gl,this.debug,(function(){return e.gl.deleteProgram(t)}))},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&ie(this.gl,this.debug,this.program),$t(this.gl,this.debug,(function(){return e.gl.useProgram(t)}))},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?de(this.gl,this.debug,t,e):pe(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),$t(this.gl,this.debug,(function(){return n.gl.getAttribLocation(t,e)}))},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),ve(this.gl,this.debug,this.program,t,e,n)},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=Ht(e,n),o=r[0],i=r[1];this.setOutputMatrixTextureDriver(t,o,i)},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},t.prototype.debugValidate=function(){null!=this.program&&ie(this.gl,this.debug,this.program),ye(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),$t(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),$t(this.gl,this.debug,(function(){return t.gl.finish()}))},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Qt(this.gl,this.debug,2===f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},t.prototype.endQuery=function(){if(2!==f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return u(this,void 0,void 0,(function(){var e=this;return c(this,(function(n){switch(n.label){case 0:return[4,N((function(){return e.disposed||e.isQueryAvailable(t,f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}))];case 1:return n.sent(),[2,this.getQueryTime(t,f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))]}}))}))},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,e){if(0===e)return!0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}return o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT),null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},t.prototype.pollFence=function(t){var e=this;return new Promise((function(n){e.addItemToPoll((function(){return t.isFencePassed()}),(function(){return n()}))}))},t.prototype.pollItems=function(){for(var t=function(t){for(var e=0;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),e=0;e<=t;++e)(0,this.itemsToPoll[e].resolveFn)();this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,e){var n=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||N((function(){return n.pollItems(),0===n.itemsToPoll.length}))},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),me(this.gl,this.debug,t,this.framebuffer),this.debug&&ye(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(me(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&ye(this.gl)):ge(this.gl,this.debug,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,e){this.bindTextureToFrameBuffer(t);var n=e();return this.unbindTextureToFrameBuffer(),n},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;me(r,this.debug,t,this.framebuffer),this.debug&&ye(r),this.outputTexture=t,$t(r,this.debug,(function(){return r.viewport(0,0,e,n)})),$t(r,this.debug,(function(){return r.scissor(0,0,e,n)}))},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var o=this;this.throwIfDisposed(),$t(this.gl,this.debug,(function(){return o.gl.scissor(t,e,n,r)}))},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},t}();function ha(t,e){if(t.length!==e.length)throw Error("Binary was compiled with "+t.length+" inputs, but was executed with "+e.length+" inputs");t.forEach((function(t,n){var r=t.logicalShape,o=e[n],i=o.shape;if(!R(r,i))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+i+" must match");if(!t.isUniform||!o.isUniform){var a=t.texShape,s=o.isUniform?null:o.texData.texShape;if(!R(a,s))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+a+" and "+s+" must match")}}))}var fa=function(t,e,n){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t;for(var r=n.filterWidth,o=n.inChannels,i=n.strideWidth,a=n.strideHeight,s=n.padInfo,u=n.outWidth,c=n.dilationWidth,l=n.dilationHeight,h=n.dataFormat,f=s.left,d=s.top,p=o*r,v=Uo(),m="channelsLast"===h,g=m?0:1,y=m?1:2,x="",b=0;b<=1;b++)for(var w=0;w<=1;w++)x+="\n          blockIndex = rc.y + "+w+";\n          pos = rc.x + "+b+";\n\n          if(blockIndex < "+t[1]+" && pos < "+t[0]+") {\n            offsetY = int(blockIndex / ("+u+")) * "+a+" - "+d+";\n            d0 = offsetY + "+l+" * (pos / "+p+");\n\n            if(d0 < "+e[g]+" && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), "+u+".) * "+i+". - "+f+".);\n              d1 = offsetX + "+c+" * (int(mod(float(pos), "+p+".) / "+o+".));\n\n              if(d1 < "+e[y]+" && d1 >= 0) {\n\n                ch = int(mod(float(pos), "+o+".));\n\n                if ("+m+") {\n                  innerDims = vec2(d1, ch);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        "+x+"\n\n        "+v.output+" = result;\n      }\n    "},da=function(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[];var i,a=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";i=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+a+"; j <= "+a+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+s+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+i+";\n        setOutput(val);\n      }\n    "},pa=function(t,e,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=o,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < "+this.depth+"; ++d) {\n          int depthBegin = int(max(0.0, float(d - "+e+")));\n          int depthEnd = int(min(float("+this.depth+"),\n              float(d + "+e+" + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = "+this.depth+";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float("+r+") * norm + float("+n+");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float("+r+")\n                * float("+o+")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * "+o+");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    "},va=function(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[],this.usesPackedTextures=!0;var i,a=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";i=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < "+this.outputShape[3]+";\n        bool hasNextRow = c < "+this.outputShape[2]+";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - "+a+";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - "+a+"; j <= "+a+"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2("+s+"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * "+i+";\n        setOutput(result);\n      }\n    "},ma=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=o-1-t.padInfo.top,s=i-1-t.padInfo.left,u=o*i-1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+o+";\n          wR += "+r+") {\n          float dyR = float(dyRCorner + wR) / "+e+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+i+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+n+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+u+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+i+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ga=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,s=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=s-1-t.padInfo.front,h=u-1-t.padInfo.top,f=c-1-t.padInfo.left,d=s*u*c-1;this.userCode="\n      const ivec3 pads = ivec3("+l+", "+h+", "+f+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+s+";\n           wD += "+o+") {\n          float dyD = float(dyDCorner + wD) / "+e+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+i+") {\n            float dyR = float(dyRCorner + wR) / "+n+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+a+") {\n              float dyC = float(dyCCorner + wC) / "+r+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = "+d+" -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * "+u+" * "+c+" +\n                  wR * "+c+" + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ya=function(t,e,n,r,o,i,a){void 0===n&&(n=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===i&&(i=null),void 0===a&&(a=!1),this.variableNames=["matrixA","matrixB"],this.usesPackedTextures=!0,this.outputShape=e;var s=n?t[1]:t[2],u=Math.ceil(s/2),c=n?"i * 2, rc.y":"rc.y, i * 2",l=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],d="",p="";i&&(d=a?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+i+"\n        }":"vec4 activation(vec4 x) {\n          "+i+"\n        }",p="result = activation(result);");var v=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+d+"\n\n      const float sharedDimension = "+u+".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < "+u+"; i++) {\n          vec4 a = getMatrixA(rc.x, "+c+");\n          vec4 b = getMatrixB(rc.x, "+l+");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += ("+h[0]+" * "+f[0]+");\n          result += ("+h[1]+" * "+f[1]+");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        "+v+"\n\n        "+p+"\n\n        setOutput(result);\n      }\n    "},xa=function(){function t(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(e-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(e-1)+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,"seed")),n.gl.uniform1f(e.seedLoc,t)}},t}(),ba=function(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+n+"),\n                      float(index == coords.y)));\n      }\n    "},wa=function(t){this.variableNames=["A"],this.outputShape=t;var e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{var n=Wo("rc",e),r=Qo(e),o=function(t,e,n){if(1===t)return"rc > "+e[0];for(var r="",o=t-2;o<t;o++)r+=n[o]+" >= "+e[o],o<t-1&&(r+="||");return r}(e,t,n),i=function(t,e,n,r){if(1===t)return"";var o=r.slice(-2);return"\n    int r = "+o[0]+";\n    int c = "+o[1]+";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= "+e+";\n    bool rEdge = rp1 >= "+n+";\n  "}(e,t[t.length-1],t[t.length-2],n),a=function(t,e){var n=t.length,r=function(t,e){for(var n=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var i=(0===r?"r":"rp1")+", "+(0===o?"c":"cp1"),a=2;a<t;a++)i=e[e.length-1-a]+","+i;n.push(i)}return n}(n,e);return 1===n?"getA(rc),\n            rc + 1 >= "+t[0]+" ? 0. : getA(rc + 1),\n            0, 0":"getA("+r[0]+"),\n          cEdge ? 0. : getA("+r[1]+"),\n          rEdge ? 0. : getA("+r[2]+"),\n          rEdge || cEdge ? 0. : getA("+r[3]+")"}(t,n);this.userCode="\n        void main() {\n          "+r+" rc = getOutputCoords();\n\n          if("+o+") {\n            setOutput(vec4(0));\n          } else {\n            "+i+"\n\n            setOutput(vec4("+a+"));\n          }\n        }\n      "}},Ca=function(t,e,n){this.variableNames=["x"],this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));var r=t.length,o=Qo(r),i=e.map((function(t){return t[0]})).join(","),a=e.map((function(e,n){return e[0]+t[n]})).join(","),s=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+o+" start = "+o+"("+i+");\n      "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+n+"));\n        } else {\n          "+o+" coords = outC - start;\n          setOutput(getX("+s+"));\n        }\n      }\n    ":"\n        int start = "+i+";\n        int end = "+a+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+n+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      "},Ea=function(t,e,n){this.variableNames=["x"],this.usesPackedTextures=!0,this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));for(var r=t.length,o=Qo(r),i=e.map((function(t){return t[0]})).join(","),a=e.map((function(e,n){return e[0]+t[n]})).join(","),s=Wo("rc",r),u=Wo("source",r),c=s[r-1]+" < "+this.outputShape[r-1],l=1===r?"source":"vec2("+u.slice(-2).join()+")",h=[o+" rc = outputLoc;",s[r-1]+" += 1;\n       if("+c+") {\n      ",1===r?"":"}\n       rc = outputLoc;\n       "+s[r-2]+" += 1;\n       if("+s[r-2]+" < "+this.outputShape[r-2]+") {",1===r?"":"  "+s[r-1]+" += 1;\n         if("+c+") {"],f=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",d="",p=0,v=1===r?2:4;p<v;p++)d+="\n        "+h[p]+"\n        if ("+f+") {\n          result["+p+"] = float("+n+");\n        } else {\n          "+o+" source = rc - start;\n          result["+p+"] = getChannel(getX("+u.join()+"), "+l+");\n        }\n      ";d+=1===r?"} ":"}}",this.userCode="\n      const "+o+" start = "+o+"("+i+");\n      const "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        "+d+"\n        setOutput(result);\n      }\n    "},Ra=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,o=t.strideHeight,i=t.strideWidth,a=t.dilationHeight,s=t.dilationWidth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=t.padInfo.top,h=t.padInfo.left;this.outputShape=t.outShape;var f="avg"===e,d="0.0";if(f||(d="-1.0 / 1e-20"),n)this.userCode="\n        const ivec2 strides = ivec2("+o+", "+i+");\n        const ivec2 pads = ivec2("+l+", "+h+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+a+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+s+") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * "+c+" + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var p=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(p="avgValue / count");var v=4*Math.floor(r/4),m=r%4,g="\n      if ("+f+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+o+", "+i+");\n      const ivec2 pads = ivec2("+l+", "+h+");\n      const float initializationValue = "+d+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+d+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+u+";\n            wR += "+a+") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+v+"; wC += 4) {\n            int xC = xCCorner + wC * "+s+";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              getValue(batch, xR, xC + 3 * "+s+", d)\n            );\n\n            "+g+"\n          }\n\n          int xC = xCCorner + "+v+";\n          if ("+(1===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+g+"\n          } else if ("+(2===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+g+"\n          } else if ("+(3===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              initializationValue\n            );\n\n            "+g+"\n          }\n        }\n        setOutput("+p+");\n      }\n    "}},Ia=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,v=t.padInfo.left;this.outputShape=t.outShape;var m="avg"===e,g="0.0";if(m||(g="-1.0 / 1e-20"),n)this.userCode="\n        const ivec3 strides =\n            ivec3("+o+", "+i+", "+a+");\n        const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < "+l+";\n              wD += "+s+") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int wR = 0; wR < "+h+";\n                wR += "+u+") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int wC = 0; wC < "+f+";\n                  wC += "+c+") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * "+h+" * "+f+" +\n                      wR * "+f+" + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var y=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(y="avgValue / count");var x=4*Math.floor(r/4),b=r%4,w="\n      if ("+m+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec3 strides =\n        ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n      const float initializationValue = "+g+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+g+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+h+";\n            wR += "+u+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+x+"; wC += 4) {\n              int xC = xCCorner + wC * "+c+";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                getValue(batch, xD, xR, xC + 3 * "+c+", ch)\n              );\n\n              "+w+"\n            }\n\n            int xC = xCCorner + "+x+";\n            if ("+(1===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              "+w+"\n            } else if ("+(2===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              "+w+"\n            } else if ("+(3===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                initializationValue\n              );\n\n              "+w+"\n            }\n          }\n          setOutput("+y+");\n        }\n      }\n    "}},Aa=function(t,e){this.variableNames=["x"];var n=t.windowSize,r=t.batchSize,o=t.inSize,i=Math.ceil(o/n);this.outputShape=[r,i];var a="0.0",s="";"prod"===e?a="1.0":"min"===e?(a="1.0 / 1e-20",s="min"):"max"===e&&(a="-1.0 / 1e-20",s="max");var u=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");var c=4*Math.floor(n/4),l=n%4,h="\n      if ("+("sum"===e)+") {\n        sumValue += dot(values, ones);\n      } else if ("+("prod"===e)+") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = "+s+"(values, minMaxValue);\n      }\n    ",f="vec4";"all"===e?(a="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",f="bvec4"):"any"===e&&(a="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",f="bvec4");var d="";o%n>0&&(d="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+a+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+d+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+n+";\n\n        vec4 minMaxValue = vec4("+a+");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < "+c+"; i += 4) {\n          int inIdx = inOffset + i;\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+h+"\n        }\n\n        int inIdx = inOffset + "+c+";\n        if ("+(1===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          "+h+"\n        } else if ("+(2===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          "+h+"\n        } else if ("+(3===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          "+h+"\n        }\n        setOutput("+u+");\n      }\n    "},Sa=function(t,e){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t;for(var n="",r=0;r<4;r++){var o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),n+="\n        "+o+"\n        "+(r>0?"if(thisRC.y < rows && thisRC.z < cols){":"")+"\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result["+r+"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        "+(r>0?"}":"")+"\n      "}this.userCode="\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      "+Vo(["r","c","d"],e)+"\n      return ivec3(r, c, d);\n    }\n  \n      "+zo(t)+"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = "+t[1]+";\n        int cols = "+t[2]+";\n\n        "+n+"\n\n        setOutput(result);\n      }\n    "},ka=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],i=r[2],a=t.shape,s=a[1],u=a[2],c=[n&&s>1?o-1:o,n&&u>1?i-1:i],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,m=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+h+");\n        const float widthScale = float("+f+");\n\n        const float invHeightScale = float("+d+");\n        const float invWidthScale = float("+p+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+m+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(o-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(i-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Na=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "},Ta=function(t,e,n,r){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+",\n          "+u[1]/c[1]+");\n      const vec3 inputShapeRC = vec3("+i+".0, "+a+".0,\n                                     "+a+".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n        \n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < "+(s-1)+"; \n        bool hasNextRow = coords.z < "+(n-1)+";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    "},Da=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],i=r[2],a=t.shape,s=a[1],u=a[2],c=[n&&s>1?o-1:o,n&&u>1?i-1:i],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,m=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+h+");\n        const float widthScale = float("+f+");\n\n        const float invHeightScale = float("+d+");\n        const float invWidthScale = float("+p+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+m+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float("+c[0]+") *\n                (float(dyR) / float("+l[0]+"));\n\n            float sourceFracCol =\n                float("+c[1]+") *\n                  (float(dyC) / float("+l[1]+"));\n\n            int sourceNearestRow = int(min(\n                float(int("+o+") - 1),\n                "+n+" ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int("+i+") - 1),\n                "+n+" ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},_a=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],l=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+l+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    "},Oa=function(t,e){this.variableNames=["x"];var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");if(this.outputShape=t,1!==n){var r=t.map((function(n,r){return function(n){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - coords["+n+"] - 1":"coords["+n+"]"}(r)})).join(","),o=Qo(n);this.userCode="\n      void main() {\n        "+o+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    "}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+t[0]+" - coord - 1));\n        }\n      "},Ma=function(t,e){this.variableNames=["x"],this.usesPackedTextures=!0;var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");this.outputShape=t;var r=Wo("rc",n),o=r[n-1]+" + 1 < "+this.outputShape[n-1],i=r[n-2]+" + 1 < "+this.outputShape[n-2],a=Qo(n);function s(n){var r=t.map((function(r,o){return function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - "+r[n]+" - 1":""+r[n]}(o,n)}));return"getChannel(getX("+r.join(",")+"), vec2("+r.slice(-2).join(",")+"))"}this.userCode=1===n?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX("+t[0]+" - rc - 1),\n            "+t[0]+" - rc - 1);\n          if("+o+"){\n              result.g = getChannel(getX("+t[0]+" - (rc  + 1) - 1),\n                "+t[0]+" - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      ":"\n        void main() {\n          "+a+" rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = "+function(t){return s(t)}(r.slice())+";\n          if("+o+"){\n            result.g = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",s(t)}(r.slice())+";\n          }\n          if("+i+") {\n            result.b = "+function(t){return t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            if("+o+") {\n              result.a = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            }\n          }\n          setOutput(result);\n        }\n    "},Fa=function(t,e,n,r,o,i,a){void 0===a&&(a=!0),this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;var s=Qo(o.length),u=Qo(i.length),c="";1===n?c="i":2===n&&(c="i, j");var l="getIndices("+c+")",h="";1===r?h="i":2===r&&(h="i, coords[1]");var f="getUpdates("+h+")",d=e>1?"strides[j]":"strides";this.userCode="\n        "+s+" strides = "+s+"("+o+");\n\n        void main() {\n          "+u+" coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < "+t+"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < "+e+"; j++) {\n              int index = round("+l+");\n              flattenedIndex += index * "+d+";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += "+f+";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      "},Ba=function(t,e){this.variableNames=["x","segmentIds"];var n=t.windowSize,r=t.batchSize,o=t.inSize,i=t.numSegments,a=i*Math.ceil(o/n);this.outputShape=[r,a];var s=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ",l="";o%n>0&&(l="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      ");var h="";o%n>0&&(h="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return -1.0;\n        }\n      "),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        "+l+"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        "+h+"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          "+i+")) * float("+n+"));\n        int currentSeg = int(mod(float(outIdx), float("+i+")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+s+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          "+c+"\n        }\n\n        int inIdx = inOffset + "+s+";\n        if ("+(1===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          "+c+"\n        } else if ("+(2===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          "+c+"\n        } else if ("+(3===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          "+c+"\n        }\n        setOutput(sumValue);\n      }\n    "},Pa=function(t,e,n){var r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error("Where for rank "+n+" is not yet supported");if(1===n)o="resRC",r="resRC";else{for(var i=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],s=[],u=0;u<e.length;u++)s.push(""+i[u]),u<t&&a.push(""+i[u]);r=a.join(),o=s.join()}var c=Qo(n);this.userCode="\n      void main() {\n        "+c+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+o+"));\n        } else {\n          setOutput(getB("+o+"));\n        }\n      }\n    "},La=function(){function t(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var e,n=Qo(this.rank),r="uniform int start["+this.rank+"];",o=function(t){if(1===t)return"sourceLoc";if(t<=6)return Wa.slice(0,t).map((function(t){return"sourceLoc."+t})).join(",");throw Error("Slicing for rank "+t+" is not yet supported")}(this.rank);e="\n        "+n+" sourceLoc;\n        "+n+" coords = getOutputCoords();\n        "+t.map((function(t,e){return"sourceLoc."+Wa[e]+" = start["+e+"] + coords."+Wa[e]+";"})).join("\n")+"\n      ",this.userCode="\n      "+r+"\n      void main() {\n        "+e+"\n        setOutput(getSource("+o+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),Wa=["x","y","z","w","u","v"],Ua=function(){function t(t){this.variableNames=["source"],this.usesPackedTextures=!0,this.outputShape=t,this.rank=t.length;var e=Qo(this.rank),n=Wo("coords",this.rank),r=Wo("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":"vec2("+r.slice(-2).join()+")",i="getChannel(getSource("+r.join()+"), "+o+")",a="\n      result.x = "+i+";\n      if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n        ++"+r[this.rank-1]+";\n        result.y = "+i+";\n        --"+r[this.rank-1]+";\n      }\n    ",s=1===this.rank?"":"\n      --"+n[this.rank-1]+";\n      if (++"+n[this.rank-2]+" < "+t[this.rank-2]+") {\n        ++"+r[this.rank-2]+";\n        result.z = "+i+";\n        if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n          ++"+r[this.rank-1]+";\n          result.w = "+i+";\n        }\n      }\n    ",u=this.rank<=4?"sourceLoc = coords +\n            "+e+"("+t.map((function(t,e){return"start["+e+"]"})).join()+");":t.map((function(t,e){return r[e]+" = "+n[e]+" + start["+e+"];"})).join("\n");this.userCode="\n      uniform int start["+this.rank+"];\n      void main() {\n        "+e+" coords = getOutputCoords();\n        "+e+" sourceLoc;\n        "+u+" \n        vec4 result = vec4(0.);\n        "+a+"\n        "+s+"\n        setOutput(result);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),Va=function(t,e,n){this.variableNames=["x"],this.outputShape=n;var r=n.length,o=Qo(n.length),i=Qo(n.length),a="";if(1===r)a="coords * strides + begin";else{var s=0;a=n.map((function(t,e){return s++,1===n.length?"coords * strides["+e+"] + begin["+e+"]":"coords["+(s-1)+"] * strides["+e+"] + begin["+e+"]"})).join(",")}this.userCode="\n      "+o+" begin = "+o+"("+t+");\n      "+o+" strides = "+o+"("+e+");\n\n      void main() {\n        "+i+" coords = getOutputCoords();\n        setOutput(getX("+a+"));\n      }\n    "},za=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,e,n){var r,o=Ga(e,n),i=Ha(t,o,n);if(i in this.freeTextures||(this.freeTextures[i]=[]),i in this.usedTextures||(this.usedTextures[i]=[]),this.freeTextures[i].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var a=this.freeTextures[i].shift();return this.usedTextures[i].push(a),a}return this.numUsedTextures++,this.log(),o===Bt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):o===Bt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):o===Bt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):o===Bt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):o===Bt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[i].push(r),r},t.prototype.releaseTexture=function(t,e,n,r){if(null!=this.freeTextures){var o=Ha(e,Ga(n,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(t),this.numFreeTextures++,this.numUsedTextures--;var i=this.usedTextures[o],a=i.indexOf(t);if(a<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(a,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+t+")")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var e in this.freeTextures)this.freeTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));for(var e in this.usedTextures)this.usedTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function Ga(t,e){if(t===Ft.UPLOAD)return Bt.PACKED_2X2_FLOAT32;if(t===Ft.RENDER||null==t)return function(t){return f.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Bt.PACKED_2X2_FLOAT32:Bt.UNPACKED_FLOAT32:t?Bt.PACKED_2X2_FLOAT16:Bt.UNPACKED_FLOAT16}(e);if(t===Ft.DOWNLOAD||t===Ft.PIXELS)return Bt.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function Ha(t,e,n){return t[0]+"_"+t[1]+"_"+e+"_"+n}var qa=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var o=Qo(this.rank),i=function(t){var e=t.length;if(e>5)throw Error("Tile for rank "+e+" is not yet supported");if(1===e)return"imod(resRC, "+t[0]+")";for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[],o=0;o<t.length;o++)r.push("imod("+n[o]+", "+t[o]+")");return r.join()}(t);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},$a=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var o=Qo(this.rank),i=function(t){var e=t.length;if(e>6)throw Error("Transpose for rank "+e+" is not yet supported");for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e),o=0;o<t.length;o++)r[t[o]]=n[o];return r.join()}(e);this.userCode="\n    void main() {\n      "+o+" resRC = getOutputCoords();\n      setOutput(getA("+i+"));\n    }\n    "},ja=function(t,e){this.variableNames=["A"],this.usesPackedTextures=!0;for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error("Packed transpose for rank "+this.rank+" is not yet supported.");var o=Qo(this.rank),i=Lo("rc",this.rank),a=new Array(this.rank);for(r=0;r<e.length;r++)a[e[r]]=i[r];var s="vec2("+a.slice(-2).join()+")",u="++"+i[this.rank-1]+" < "+n[this.rank-1],c="getChannel(getA("+a.join()+"), "+s+")";this.userCode="\n    void main() {\n      "+o+" rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = "+c+";\n      if("+u+") {\n        result[1] = "+c+";\n      }\n      --"+i[this.rank-1]+";\n      if(++"+i[this.rank-2]+" < "+n[this.rank-2]+") {\n        result[2] = "+c+";\n        if("+u+") {\n          result[3] = "+c+";\n        }\n      }  \n      setOutput(result);\n    }\n    "},Ka=1.7580993408473768,Xa=1.0507009873554805,Ya=function(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      float unaryOperation(float x) {\n        "+e+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},Qa="if (isnan(x)) return x;",Ja="return x;",Za="return abs(x);",ts=Qa+"\n  return (x < 0.0) ? 0.0 : x;\n",es=Qa+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",ns="return (x >= 0.0) ? x : (exp(x) - 1.0);",rs="return -x;",os="return ceil(x);",is="return floor(x);",as="return exp(x);",ss="return exp(x) - 1.0;",us="return x;",cs="return x;",ls="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",hs="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",fs="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",ds=function(t,e){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t,this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        "+e+"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},ps=function(t){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t;var e=t.length,n=Wo("rc",e),r=Qo(e),o=function(t,e){if(1===t)return"rc";for(var n="",r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),i=n.slice(-2),a=e<=1?"rc":"vec2("+i.join(",")+")";this.userCode="\n      void main() {\n        "+r+" rc = getOutputCoords();\n        vec4 packedInput = getA("+o+");\n\n        setOutput(getChannel(packedInput, "+a+"));\n      }\n    "},vs={};function ms(t,e){if(void 0===e&&(e=!1),"linear"===t)return e?cs:Ja;if("relu"===t)return e?ls:ts;if("elu"===t)return e?fs:ns;if("relu6"===t)return e?hs:es;if("prelu"===t)return e?hi:ci;throw new Error("Activation "+t+" has not been implemented for the WebGL backend.")}var gs=600,ys=function(){function t(t){if(this.gpgpu=t,this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.disposed=!1,!f.getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){var e=Ut(f.getNumber("WEBGL_VERSION"));this.binaryCache=(n=f.getNumber("WEBGL_VERSION"))in vs?vs[n]:(vs[n]={},vs[n]),this.gpgpu=new la(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var n;this.textureManager=new za(this.gpgpu),this.numMBBeforeWarning=null==f.global.screen?1024:f.global.screen.height*f.global.screen.width*window.devicePixelRatio*gs/1024/1024,this.texData=new ro(this,Ot)}return t.prototype.register=function(t,e,n){if(this.texData.has(t))throw new Error("Data buffer is already registered");this.texData.set(t,{shape:e,dtype:n})},t.prototype.fromPixels=function(t,e){if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var n="undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement,r=t.data instanceof Uint8Array,o="undefined"!=typeof ImageData&&t instanceof ImageData,i="undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement,a="undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement,s=i?[t.videoWidth,t.videoHeight]:[t.width,t.height],u=s[0],c=s[1],l=[c,u],h=[c,u,e];if(!(n||r||o||i||a))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);(a||i)&&(null==this.fromPixels2DContext&&(this.fromPixels2DContext=Vt(f.getNumber("WEBGL_VERSION")).getContext("2d")),this.fromPixels2DContext.canvas.width=u,this.fromPixels2DContext.canvas.height=c,this.fromPixels2DContext.drawImage(t,0,0,u,c),t=this.fromPixels2DContext.canvas);var d,p,v=this.makeTensorHandle(l,"int32");if(this.texData.get(v.dataId).usage=Ft.PIXELS,this.gpgpu.uploadPixelDataToTexture(this.getTexture(v.dataId),t),f.getBool("WEBGL_PACK")){d=new Gi(h);var m=this.makePackedTensor(d.outputShape,v.dtype);p=this.compileAndRun(d,[v],m)}else d=new zi(h),p=this.compileAndRun(d,[v]);return this.disposeData(v.dataId),p},t.prototype.makeTensorHandle=function(t,e){var n={};return this.register(n,t,e),{dataId:n,shape:t,dtype:e}},t.prototype.write=function(t,e){if(null==e)throw new Error("MathBackendWebGL.write(): values can not be null");if(f.getBool("DEBUG"))for(var n=0;n<e.length;n++){var r=e[n];if(!Xt(r)){if(f.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value "+r+" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.ENV.set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value "+r+" cannot be represented on this device.")}}var o=this.texData.get(t);if("complex64"===o.dtype)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.releaseGPUData(t),o.usage=Ft.UPLOAD,o.values=e},t.prototype.readSync=function(t){var e=this.texData.get(t),n=e.values,r=e.dtype,o=e.complexTensors,i=e.slice,a=e.shape,s=e.isPacked;if(null!=i){var u;u=s?new ds(a,us):new Ya(a,us);var c=this.compileAndRun(u,[{dataId:t,shape:a,dtype:r}]),l=this.readSync(c.dataId);return c.dispose(),l}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;var h,f,d=null!=this.activeTimers;return d&&(h=J()),f="complex64"===r?Io(o.real.dataSync(),o.imag.dataSync()):this.getValuesFromTexture(t),d&&(this.downloadWaitMs+=J()-h),this.convertAndCacheOnCPU(t,f)},t.prototype.read=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s,u,l,h,d,p,v,m,g,y,x,b,w,C,R,I;return c(this,(function(c){switch(c.label){case 0:if(this.pendingRead.has(t))return e=this.pendingRead.get(t),[2,new Promise((function(t){return e.push(t)}))];if(n=this.texData.get(t),r=n.values,o=n.shape,i=n.slice,a=n.dtype,s=n.complexTensors,u=n.isPacked,null!=i)return void 0,l=u?new ds(o,us):new Ya(o,us),h=this.compileAndRun(l,[{dataId:t,shape:o,dtype:a}]),d=this.read(h.dataId),h.dispose(),[2,d];if(null!=r)return[2,this.convertAndCacheOnCPU(t)];if(!f.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===f.getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");return p=null,"complex64"!==a&&f.get("WEBGL_BUFFER_SUPPORTED")&&(v=this.decode(t),m=this.texData.get(v.dataId),p=(I=this.gpgpu).createBufferFromTexture.apply(I,[m.texture].concat(Gt(o)))),this.pendingRead.set(t,[]),"complex64"===a?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:c.sent(),c.label=2;case 2:return"complex64"!==a?[3,4]:[4,Promise.all([s.real.data(),s.imag.data()])];case 3:return y=c.sent(),x=y[0],b=y[1],g=Io(x,b),[3,5];case 4:null==p?g=this.getValuesFromTexture(t):(w=E(o),g=this.gpgpu.downloadFloat32MatrixFromBuffer(p,w)),c.label=5;case 5:return null!=v&&this.disposeData(v.dataId),C=this.convertAndCacheOnCPU(t,g),R=this.pendingRead.get(t),this.pendingRead.delete(t),R.forEach((function(t){return t(C)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)),[2,C]}}))}))},t.prototype.getValuesFromTexture=function(t){var e,n=this,r=this.texData.get(t),o=r.shape,i=r.dtype,a=r.isPacked,s=E(o);if(f.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){var u=this.decode(t),c=this.texData.get(u.dataId),l=(e=this.gpgpu).downloadMatrixFromPackedTexture.apply(e,[c.texture].concat(Gt(o))).subarray(0,s);return this.disposeData(u.dataId),l}var h=f.getBool("WEBGL_PACK")&&!0===a,d=h?Re(o):o,p=this.makeTensorHandle(d,"float32");p.size=E(o),this.texData.get(p.dataId).usage=Ft.DOWNLOAD;var v=$e((function(){var e=h?new Pi(d):new Bi(d);return n.compileAndRun(e,[{shape:d,dtype:i,dataId:t}],p,null)})),m=this.texData.get(v.dataId),g=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(m.texture,m.texShape[0],m.texShape[1]).subarray(0,s);return this.disposeData(p.dataId),g},t.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s;return c(this,(function(u){switch(u.label){case 0:return e=this.activeTimers,n=[],r=!1,null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t(),o=C(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),i=C(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=e,r&&(this.programTimersStack=null),[4,Promise.all(o)];case 1:return a=u.sent(),s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:y(a),getExtraProfileInfo:function(){return a.map((function(t,e){return{name:i[e],ms:t}})).map((function(t){return t.name+": "+t.ms})).join(", ")},wallMs:null},this.uploadWaitMs=0,this.downloadWaitMs=0,[2,s]}}))}))},t.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},t.prototype.startTimer=function(){return f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?this.gpgpu.beginQuery():{startMs:J(),endMs:null}},t.prototype.endTimer=function(t){return f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(this.gpgpu.endQuery(),t):(t.endMs=J(),t)},t.prototype.getQueryTime=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(e=t).endMs-e.startMs]}))}))},t.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t))if(this.pendingRead.has(t))this.pendingDisposal.add(t);else if(this.texData.has(t)){this.releaseGPUData(t);var e=this.texData.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}},t.prototype.releaseGPUData=function(t){var e=this.texData.get(t),n=e.texture,r=e.dtype,o=e.texShape,i=e.usage,a=e.isPacked,s=e.slice,u=s&&s.origDataId||t,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=n&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(n,o,i,a)));var l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null},t.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},t.prototype.getDataInfo=function(t){return this.texData.get(t)},t.prototype.getCPUBackend=function(){return f.getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Ot.findBackend("cpu")),this.cpuBackend):null},t.prototype.shouldExecuteOnCPU=function(t,e){var n=this;return void 0===e&&(e=128),null!=this.getCPUBackend()&&t.every((function(t){return null==n.texData.get(t.dataId).texture&&t.size<e}))},t.prototype.getGPGPUContext=function(){return this.gpgpu},t.prototype.complex=function(t,e){var n=this.makeOutputArray(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Ot.keep(t.clone()),imag:Ot.keep(e.clone())},n},t.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},t.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},t.prototype.slice=function(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===E(n))return In([],n,t.dtype);var r=this.texData.get(t.dataId).isPacked,o=$r(t.shape,e,n);if(r||!o){var i=f.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ua(n):new La(n),a=i.getCustomSetupFunc(e);return this.compileAndRun(i,[t],null,a)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)},t.prototype.shallowSlice=function(t,e,n){var r=this.texData.get(t.dataId),o=vt.make(n,{},t.dtype,this),i=this.texData.get(o.dataId);Object.assign(i,r),i.shape=n,i.dtype=t.dtype;var a=jr(e,t.strides);r.slice&&(a+=r.slice.flatOffset),i.slice={flatOffset:a,origDataId:r.slice&&r.slice.origDataId||t.dataId};var s=this.dataRefCount.get(i.slice.origDataId)||1;return this.dataRefCount.set(i.slice.origDataId,s+1),o},t.prototype.stridedSlice=function(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);var o=Gr(e,n,r);if(o.some((function(t){return 0===t})))return In([],o);var i=new Va(e,r,o);return this.compileAndRun(i,[t])},t.prototype.reverse=function(t,e){var n=f.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ma(t.shape,e):new Oa(t.shape,e);return this.compileAndRun(n,[t])},t.prototype.concat=function(t,e){if("complex64"===t[0].dtype){var n=t.map((function(t){return En(t)})),r=t.map((function(t){return Rn(t)}));return Cn(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>f.getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){var o=Math.floor(t.length/2),i=this.concat(t.slice(0,o),e),a=this.concat(t.slice(o),e);return this.concat([i,a],e)}if(f.getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){var s=new gi(t.map((function(t){return t.shape})),e);return this.compileAndRun(s,t)}var u=bn(t.map((function(t){return t.shape})),e),c=t.map((function(t){return t.as2D(-1,E(t.shape.slice(e)))})),l=new mi(c.map((function(t){return t.shape})));return this.compileAndRun(l,c).reshape(u)},t.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,rs,t.dtype);var e=new Ya(t.shape,rs);return this.compileAndRun(e,[t])},t.prototype.batchMatMul=function(t,e,n,r){var o=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],a=n?t.shape[1]:t.shape[2],s=t.shape[0];if((1===o||1===i)&&a>1e3){n&&(t=t.transpose([0,2,1])),r&&(e=e.transpose([0,2,1]));var u=1===i?t:t.as3D(s,a,1),c=1===i?2:1,l=1===i?e.as3D(s,1,a):e;return this.multiply(u,l).sum(c,!0)}var h=Rt(t.dtype,e.dtype),f=new ya(t.shape,[s,o,i],n,r),d=this.makePackedTensor(f.outputShape,h);return this.compileAndRun(f,[t,e],d)},t.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=r?e.shape[2]:e.shape[1],c=o?n.shape[1]:n.shape[2],l=e.shape[0],h=Rt(e.dtype,n.dtype),f=null!=i,d=null!=s,p=a?ms(a,!0):null,v=new ya(e.shape,[l,u,c],r,o,f,p,d),m=this.makePackedTensor(v.outputShape,h),g=[e,n];return i&&g.push(i),s&&g.push(s),this.compileAndRun(v,g,m)},t.prototype.multiply=function(t,e){if("complex64"===t.dtype){var n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),o=new ii("return areal * breal - aimag * bimag;",t.shape,e.shape),i=new ii("return areal * bimag + aimag * breal;",t.shape,e.shape),a=[this.makeComplexComponentTensorHandle(t,n.complexTensors.real),this.makeComplexComponentTensorHandle(t,n.complexTensors.imag),this.makeComplexComponentTensorHandle(e,r.complexTensors.real),this.makeComplexComponentTensorHandle(e,r.complexTensors.imag)],s=this.compileAndRun(o,a),u=this.compileAndRun(i,a),c=this.complex(s,u);return s.dispose(),u.dispose(),c}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,ui,t.dtype);var l=new li(ui,t.shape,e.shape),h=this.makeOutputArray(l.outputShape,t.dtype);return this.compileAndRun(l,[t,e],h)},t.prototype.batchNormalization=function(t,e,n,r,o,i){var a=[t,e,n],s=null;null!=i&&(s=i.shape,a.push(i));var u=null;if(null!=o&&(u=o.shape,a.push(o)),f.getBool("WEBGL_PACK_NORMALIZATION")){var c=new oi(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(c,a)}var l=new ri(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(l,a)},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){var i=f.getBool("WEBGL_PACK_NORMALIZATION")?new va(t.shape,e,n,r,o):new da(t.shape,e,n,r,o);return this.compileAndRun(i,[t])},t.prototype.LRNGrad=function(t,e,n,r,o,i,a){var s=new pa(e.shape,r,o,i,a);return this.compileAndRun(s,[e,n,t])},t.prototype.tile=function(t,e){if("string"===t.dtype){var n=this.readSync(t.dataId).map((function(t){return et(t)}));return _o(ir(t.shape,t.dtype,n),e)}var r=new qa(t.shape,e);return this.compileAndRun(r,[t])},t.prototype.pad=function(t,e,n){var r=f.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ea(t.shape,e,n):new Ca(t.shape,e,n);return this.compileAndRun(r,[t])},t.prototype.transpose=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.transpose(t,e);var n=f.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new ja(t.shape,e):new $a(t.shape,e);return this.compileAndRun(n,[t])},t.prototype.gather=function(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);var r=new Hi(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},t.prototype.batchToSpaceND=function(t,e,n){x(t.rank<=4,(function(){return"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),o=Or(t.shape,e,r),i=Mr(o.length,e.length),a=Fr(t.shape,e,r),s=Br(n,e.length),u=Pr(a,n,e.length);return t.reshape(o).transpose(i).reshape(a).slice(s,u)},t.prototype.spaceToBatchND=function(t,e,n){x(t.rank<=4,(function(){return"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var i=1+e.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),s=Or(a.shape,e,r,!1),u=Mr(s.length,e.length,!1),c=Fr(a.shape,e,r,!1);return a.reshape(s).transpose(u).reshape(c)},t.prototype.reduce=function(t,e,n){var r=t.shape[0],o=t.shape[1],i=Ur(o),a=new Aa({windowSize:i,inSize:o,batchSize:r},e),s=a.outputShape,u=s[0],c=s[1],l=this.makeOutputArray([u,c],n);return this.compileAndRun(a,[t],l),1===l.shape[1]?l:this.reduce(l,e,n)},t.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],o=t.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);var i=Ur(o),a=new Po({windowSize:i,inSize:o,batchSize:r},e,null==n),s=a.outputShape,u=s[0],c=s[1],l=this.makeOutputArray([u,c],"int32"),h=[t];return null!=n&&h.push(n),this.compileAndRun(a,h,l),1===l.shape[1]?l:this.argReduce(t,e,l)},t.prototype.argReducePacked=function(t,e,n){void 0===n&&(n=null);var r=null!=n?n.shape:t.shape,o=Ur(r[r.length-1]),i=new ti(r,o,e,null==n),a=this.makePackedTensor(i.outputShape,"int32"),s=null==n?[t]:[t,n];return this.compileAndRun(i,s,a),a.rank===t.rank?this.argReducePacked(t,e,a):a},t.prototype.sum=function(t,e){vn("sum",e,t.rank);var n=dn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o),a=It(t.dtype);return this.reduce(i,"sum",a).reshape(r)},t.prototype.prod=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);var n=dn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o),a=It(t.dtype);return this.reduce(i,"prod",a).reshape(r)},t.prototype.unsortedSegmentSum=function(t,e,n){var r=0,o=mn([r],t.rank),i=t;null!=o&&(i=t.transpose(o),r=yn(1,t.rank)[0]);var a=function(t,e,n){for(var r=[],o=t.length,i=0;i<o;i++)i!==e?r.push(t[i]):r.push(n);return r}(i.shape,r,n),s=E([i.shape[r]]),u=i.as2D(-1,s),c=It(t.dtype),l=this.segOpCompute(u,"unsortedSegmentSum",e,c,n).reshape(a);return null!=o&&(l=l.transpose(gn(o))),l},t.prototype.segOpCompute=function(t,e,n,r,o){var i=t.shape[0],a=t.shape[1],s=function(t,e){var n,r=!1;for(t<=Wr?(n=t,r=!0):n=$(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=$(t,n+1);return n}(a,o),u=new Ba({windowSize:s,inSize:a,batchSize:i,numSegments:o},e),c=u.outputShape,l=c[0],h=c[1],f=this.makeOutputArray([l,h],r);return this.compileAndRun(u,[t,n],f),f.shape[1]===o?f:(n=Ln(0,o).tile([a/s]),this.segOpCompute(f,e,n,r,o))},t.prototype.argMinMaxReduce=function(t,e,n){var r=[e];if(vn("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!f.getBool("WEBGL_PACK_REDUCE")||t.rank<=2){var o=dn(t.shape,r),i=o[0],a=E(o[1]),s=t.as2D(-1,a);return this.argReduce(s,n).reshape(i)}return this.argReducePacked(t,n)},t.prototype.argMin=function(t,e){return this.argMinMaxReduce(t,e,"min")},t.prototype.argMax=function(t,e){return this.argMinMaxReduce(t,e,"max")},t.prototype.cumsum=function(t,e,n,r){if(e!==t.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis="+(t.rank-1)+" but got axis="+e);var o=new Ti(t.shape,n,r);return this.compileAndRun(o,[t])},t.prototype.equal=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");var n=new li("return float(a == b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.notEqual=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");var n=new li("return float(a != b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.less=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");var n=new li("return float(a < b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.lessEqual=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");var n=new li("return float(a <= b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.greater=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");var n=new li("return float(a > b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.greaterEqual=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");var n=new li("return float(a >= b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.logicalNot=function(t){var e=new Ya(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])},t.prototype.logicalAnd=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");var n=new li("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.logicalOr=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");var n=new li("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.select=function(t,e,n){var r=new Pa(t.rank,e.shape,e.rank),o=this.makeOutputArray(r.outputShape,Rt(e.dtype,n.dtype));return this.compileAndRun(r,[t,e,n],o)},t.prototype.where=function(t){an("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var e=t.dataSync();return Mo(t.shape,e)},t.prototype.topk=function(t,e,n){return Oo(t.dataSync(),t.shape,t.dtype,e)},t.prototype.min=function(t,e){vn("min",e,t.rank);var n=dn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o);return this.reduce(i,"min",i.dtype).reshape(r)},t.prototype.minimum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new li("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.mod=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new li("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.max=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,e);vn("max",e,t.rank);var n=dn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o);return this.reduce(i,"max",i.dtype).reshape(r)},t.prototype.maximum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new li("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.all=function(t,e){vn("all",e,t.rank);var n=dn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o);return this.reduce(i,"all",i.dtype).reshape(r)},t.prototype.any=function(t,e){vn("any",e,t.rank);var n=dn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o);return this.reduce(i,"any",i.dtype).reshape(r)},t.prototype.squaredDifference=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi("return (a - b) * (a - b);",t.shape,e.shape):new li("return (a - b) * (a - b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.realDivide=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n","float32",!0);var n=new li("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t,e],r)},t.prototype.floorDiv=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");var n=new li("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"int32");return this.compileAndRun(n,[t,e],r)},t.prototype.add=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,ai);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);var n=Rt(t.dtype,e.dtype);if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,ai,n);var r=new li(ai,t.shape,e.shape),o=this.makeOutputArray(r.outputShape,n);return this.compileAndRun(r,[t,e],o)},t.prototype.packedUnaryOp=function(t,e,n){var r=new ds(t.shape,e),o=this.makePackedTensor(r.outputShape,n);return this.compileAndRun(r,[t],o)},t.prototype.packedBinaryOp=function(t,e,n,r,o){void 0===o&&(o=!1);var i=new fi(n,t.shape,e.shape,o),a=this.makePackedTensor(i.outputShape,r);return this.compileAndRun(i,[t,e],a)},t.prototype.complexSeparableBinaryOp=function(t,e,n){var r=this,o=this.texData.get(t.dataId),i=this.texData.get(e.dataId),a=[[o.complexTensors.real,i.complexTensors.real],[o.complexTensors.imag,i.complexTensors.imag]].map((function(o){var i=o[0],a=o[1],s=r.makeComplexComponentTensorHandle(t,i),u=r.makeComplexComponentTensorHandle(e,a),c=new li(n,t.shape,e.shape),l=r.makeOutputArray(c.outputShape,Rt(i.dtype,a.dtype));return r.compileAndRun(c,[s,u],l)})),s=a[0],u=a[1],c=this.complex(s,u);return s.dispose(),u.dispose(),c},t.prototype.makeComplexComponentTensorHandle=function(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}},t.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>f.get("WEBGL_MAX_TEXTURES_IN_SHADER")){var e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}var o=t.map((function(t){return t.dtype})).reduce((function(t,e){return Rt(t,e)})),i=t.map((function(t){return t.shape})),a=f.getBool("WEBGL_PACK"),s=a?new Bo(t[0].shape,i):new Fo(t[0].shape,i),u=a?this.makePackedTensor(s.outputShape,o):this.makeOutputArray(s.outputShape,o);return this.compileAndRun(s,t,u)},t.prototype.subtract=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,si);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);var n=Rt(t.dtype,e.dtype);if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,si,t.dtype);var r=new li(si,t.shape,e.shape),o=this.makeOutputArray(r.outputShape,n);return this.compileAndRun(r,[t,e],o)},t.prototype.pow=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS"),r=n?new fi("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new li("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),o=Rt(t.dtype,e.dtype),i=n?this.makePackedTensor(r.outputShape,o):this.makeOutputArray(r.outputShape,o);return this.compileAndRun(r,[t,e],i)},t.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,os,t.dtype);var e=new Ya(t.shape,os);return this.compileAndRun(e,[t])},t.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,is,t.dtype);var e=new Ya(t.shape,is);return this.compileAndRun(e,[t])},t.prototype.sign=function(t){var e=new Ya(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])},t.prototype.isNaN=function(t){var e=new Ya(t.shape,"return float(isnan(x));"),n=this.makeOutputArray(e.outputShape,"bool");return this.compileAndRun(e,[t],n)},t.prototype.isInf=function(t){var e=new Ya(t.shape,"return float(isinf(x));"),n=this.makeOutputArray(e.outputShape,"bool");return this.compileAndRun(e,[t],n)},t.prototype.isFinite=function(t){var e=new Ya(t.shape,"return float(!isnan(x) && !isinf(x));"),n=this.makeOutputArray(e.outputShape,"bool");return this.compileAndRun(e,[t],n)},t.prototype.round=function(t){var e=new Ya(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])},t.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,as,t.dtype);var e=new Ya(t.shape,as);return this.compileAndRun(e,[t])},t.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ss,t.dtype);var e=new Ya(t.shape,ss);return this.compileAndRun(e,[t])},t.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);var e=new Ya(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])},t.prototype.log1p=function(t){var e=new Ya(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])},t.prototype.sqrt=function(t){var e=new Ya(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])},t.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var e=new Ya(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])},t.prototype.square=function(t){var e=new Ya(t.shape,"return x * x;");return this.compileAndRun(e,[t])},t.prototype.reciprocal=function(t){var e=new Ya(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])},t.prototype.relu=function(t){var e;return e=f.getBool("WEBGL_PACK")?new ds(t.shape,ls):new Ya(t.shape,ts),this.compileAndRun(e,[t])},t.prototype.relu6=function(t){var e;return e=f.getBool("WEBGL_PACK")?new ds(t.shape,hs):new Ya(t.shape,es),this.compileAndRun(e,[t])},t.prototype.prelu=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi(hi,t.shape,e.shape):new li(ci,t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.elu=function(t){if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,fs,t.dtype);var e=new Ya(t.shape,ns);return this.compileAndRun(e,[t])},t.prototype.eluDer=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new li("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.selu=function(t){var e=new Ya(t.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(e,[t])},t.prototype.int=function(t){var e=new Ya(t.shape,"return float(int(x));"),n=this.makeOutputArray(e.outputShape,"int32");return this.compileAndRun(e,[t],n)},t.prototype.clip=function(t,e,n){var r,o=(r=f.getBool("WEBGL_PACK_CLIP")?new pi(t.shape):new di(t.shape)).getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,o)},t.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Za,t.dtype);var e=new Ya(t.shape,Za);return this.compileAndRun(e,[t])},t.prototype.complexAbs=function(t){var e=this.texData.get(t.dataId),n=new vi(t.shape),r=[this.makeComplexComponentTensorHandle(t,e.complexTensors.real),this.makeComplexComponentTensorHandle(t,e.complexTensors.imag)];return this.compileAndRun(n,r)},t.prototype.sigmoid=function(t){var e=new Ya(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])},t.prototype.softplus=function(t){var e=new Ya(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])},t.prototype.sin=function(t){var e=new Ya(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])},t.prototype.cos=function(t){var e=new Ya(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])},t.prototype.tan=function(t){var e=new Ya(t.shape,"return tan(x);");return this.compileAndRun(e,[t])},t.prototype.asin=function(t){var e=new Ya(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])},t.prototype.acos=function(t){var e=new Ya(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])},t.prototype.atan=function(t){var e=new Ya(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])},t.prototype.atan2=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new fi("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new li("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.sinh=function(t){var e=new Ya(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},t.prototype.cosh=function(t){var e=new Ya(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},t.prototype.tanh=function(t){var e=new Ya(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])},t.prototype.asinh=function(t){var e=new Ya(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])},t.prototype.acosh=function(t){var e=new Ya(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])},t.prototype.atanh=function(t){var e=new Ya(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])},t.prototype.erf=function(t){var e=new Ya(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])},t.prototype.step=function(t,e){var n=new Ya(t.shape,function(t){return void 0===t&&(t=0),Qa+"\n    return x > 0.0 ? 1.0 : float("+t+");\n  "}(e));return this.compileAndRun(n,[t])},t.prototype.conv2dByMatMul=function(t,e,n,r,o,i){var a=t.shape,s=this.texData.get(t.dataId),u=n.inChannels,c=a[0]*a[1]*a[2],l=n.outChannels,h="channelsLast"===n.dataFormat,d=(1===c||1===l)&&u>1e3,p=a[2]%2!=0&&!!s.isPacked;if(d||!f.getBool("WEBGL_LAZILY_UNPACK")||!f.getBool("WEBGL_PACK_BINARY_OPERATIONS")||!p){var v=h?a[0]*a[1]*a[2]:a[0]*a[2]*a[3],m=this.reshape(t,[1,v,n.inChannels]),g=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:m,b:g,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),n.outShape)}var y=h?a[0]*a[1]*(a[2]+1):a[0]*a[2]*(a[3]+1),b=vt.make([1,y,n.inChannels],{dataId:t.dataId},t.dtype,this),w=s.shape;s.shape=s.shape.slice(),s.shape[s.shape.length-2]++,x(Se(s.shape,b.shape),(function(){return"packed reshape "+s.shape+" to "+b.shape+" isn't free"}));var C=this.reshape(e,[1,n.inChannels,n.outChannels]),E=this.fusedBatchMatMul({a:b,b:C,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),R=this.texData.get(E.dataId);return x(R.isPacked,(function(){return"batchMatMul result is expected to be packed"})),s.shape=w,R.shape=n.outShape,vt.make(n.outShape,{dataId:E.dataId},E.dtype,this)},t.prototype.conv2dWithIm2Row=function(t,e,n,r,o,i){var a=n.filterWidth,s=n.filterHeight,u=n.inChannels,c=n.outWidth,l=n.outHeight,h="channelsLast"===n.dataFormat,f=a*s*u,d=l*c,p=[f,d],v=t.squeeze([0]),m=e.reshape([1,f,-1]),g=new fa(p,v.shape,n),y=this.compileAndRun(g,[v]).reshape([1,p[0],p[1]]),x=null!=r,b=null!=i,w=o?ms(o,!0):null,C=new ya(y.shape,[1,d,n.outChannels],!0,!1,x,w,b),E=[y,m];r&&E.push(r),b&&E.push(i);var R=this.compileAndRun(C,E);return h?R.reshape([1,l,c,n.outChannels]):R.reshape([1,n.outChannels,l,c])},t.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(e,n,r,o,i,a);if(f.getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,n,r,o,i,a);var s=null!=o,u=null!=a,c=i?ms(i,!1):null,l=new Ii(r,s,c,u),h=[e,n];return o&&h.push(o),a&&h.push(a),this.compileAndRun(l,h)},t.prototype.conv2d=function(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(f.getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);var r=new Ii(n);return this.compileAndRun(r,[t,e])},t.prototype.conv2dDerInput=function(t,e,n){var r=new bi(n);return this.compileAndRun(r,[t,e])},t.prototype.conv2dDerFilter=function(t,e,n){var r=new xi(n);return this.compileAndRun(r,[t,e])},t.prototype.fusedDepthwiseConv2D=function(t){var e,n=t.input,r=t.filter,o=t.convInfo,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=f.getBool("WEBGL_PACK_DEPTHWISECONV")&&o.strideWidth<=2&&o.outChannels/o.inChannels==1,c=a?ms(a,u):null,l=[n,r],h=null!=i,d=null!=s;return h&&l.push(i),d&&l.push(s),u?(e=new ki(o,h,c,d),this.compileAndRun(e,l,this.makePackedTensor(o.outShape,n.dtype))):(e=new Si(o,h,c,d),this.compileAndRun(e,l))},t.prototype.depthwiseConv2D=function(t,e,n){var r;return f.getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new ki(n),this.compileAndRun(r,[t,e],this.makePackedTensor(n.outShape,t.dtype))):(r=new Si(n),this.compileAndRun(r,[t,e]))},t.prototype.depthwiseConv2DDerInput=function(t,e,n){var r=new Ri(n);return this.compileAndRun(r,[t,e])},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){var r=new Ei(n);return this.compileAndRun(r,[t,e])},t.prototype.conv3d=function(t,e,n){var r=new Ai(n);return this.compileAndRun(r,[t,e])},t.prototype.conv3dDerInput=function(t,e,n){var r=new Ci(n);return this.compileAndRun(r,[t,e])},t.prototype.conv3dDerFilter=function(t,e,n){var r=new wi(n);return this.compileAndRun(r,[t,e])},t.prototype.maxPool=function(t,e){var n=new Ra(e,"max",!1),r=this.makeOutputArray(n.outputShape,t.dtype);return this.compileAndRun(n,[t],r)},t.prototype.avgPool=function(t,e){var n=new Ra(e,"avg",!1),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t],r)},t.prototype.maxPoolBackprop=function(t,e,n,r){var o=new Ra(r,"max",!0),i=this.compileAndRun(o,[e]),a=new ma(r),s=this.makeOutputArray(a.outputShape,e.dtype),u=this.compileAndRun(a,[t,i],s);return i.dispose(),u},t.prototype.avgPoolBackprop=function(t,e,n){var r=new ei(n),o=this.makeOutputArray(r.outputShape,e.dtype);return this.compileAndRun(r,[t],o)},t.prototype.cast=function(t,e){return wo(t,e,this)},t.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==e&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(i=0;i<u.length;i++)a[e]=i,u[i]=this.slice(t,a,s).reshape(r);return u},t.prototype.avgPool3d=function(t,e){var n=new Ia(e,"avg",!1),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t],r)},t.prototype.avgPool3dBackprop=function(t,e,n){var r=new ni(n),o=this.makeOutputArray(r.outputShape,e.dtype);return this.compileAndRun(r,[t],o)},t.prototype.maxPool3d=function(t,e){var n=new Ia(e,"max",!1),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t],r)},t.prototype.maxPool3dBackprop=function(t,e,n,r){var o=new Ia(r,"max",!0),i=this.compileAndRun(o,[e]),a=new ga(r),s=this.makeOutputArray(a.outputShape,e.dtype),u=this.compileAndRun(a,[t,i],s);return i.dispose(),u},t.prototype.reshape=function(t,e){var n=this.texData.get(t.dataId);return!n.isPacked||Se(t.shape,e)||null!==n.texture&&Se(n.shape,e)?Co(t,e):this.packedReshape(t,e)},t.prototype.resizeBilinear=function(t,e,n,r){var o=f.getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Ta(t.shape,e,n,r):new Na(t.shape,e,n,r);return this.compileAndRun(o,[t])},t.prototype.resizeBilinearBackprop=function(t,e,n){var r=new ka(t,e,n);return this.compileAndRun(r,[t])},t.prototype.resizeNearestNeighbor=function(t,e,n,r){var o=new _a(t.shape,e,n,r);return this.compileAndRun(o,[t])},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){var r=new Da(t,e,n);return this.compileAndRun(r,[t])},t.prototype.multinomial=function(t,e,n,r){var o=e?t:eo(t),i=o.shape[0],a=o.shape[1],s=new xa(i,a,n),u=this.makeOutputArray(s.outputShape,"int32"),c=s.getCustomSetupFunc(r);return this.compileAndRun(s,[o],u,c)},t.prototype.oneHot=function(t,e,n,r){var o=new ba(t.size,e,n,r);return this.compileAndRun(o,[t])},t.prototype.diag=function(t){var e=new Fi(t.size);return this.compileAndRun(e,[t])},t.prototype.nonMaxSuppression=function(t,e,n,r,o){return an("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"),No(t.dataSync(),e.dataSync(),n,r,o)},t.prototype.cropAndResize=function(t,e,n,r,o,i){var a=new Ni(t.shape,e.shape,r,o,i);return this.compileAndRun(a,[t,e,n])},t.prototype.depthToSpace=function(t,e,n){x(e>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+e}));var r=t.shape[0],o="NHWC"===n?t.shape[1]:t.shape[2],i="NHWC"===n?t.shape[2]:t.shape[3],a="NHWC"===n?t.shape[3]:t.shape[1],s=o*e,u=i*e,c=a/(e*e),l=new Mi("NHWC"===n?[r,s,u,c]:[r,c,s,u],e,n);return this.compileAndRun(l,[t])},t.prototype.split=function(t,e,n){return Do(t,e,n)},t.prototype.scatterND=function(t,e,n){var r=Vr(0,t,n),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,s=r.strides,u=r.outputSize,c=[u/a,a],l=t.reshape([i,o]),h=e.reshape([i,a]);if(0===u)return Co(In([]),n);var f=Sn(0),d=new Fa(i,o,l.rank,h.rank,s,c);return this.compileAndRun(d,[h,l,f]).reshape(n)},t.prototype.sparseToDense=function(t,e,n,r){var o=Vr(0,t,n),i=o.sliceRank,a=o.numUpdates,s=o.strides,u=o.outputSize,c=new Fa(a,i,t.rank,e.rank,s,[u,1],!1);return this.compileAndRun(c,[e,t,r]).reshape(n)},t.prototype.fft=function(t){return this.fftImpl(t,!1)},t.prototype.ifft=function(t){return this.fftImpl(t,!0)},t.prototype.fftImpl=function(t,e){var n=this.texData.get(t.dataId),r=new Ui("return real * expR - imag * expI;",t.shape,e),o=new Ui("return real * expI + imag * expR;",t.shape,e),i=[this.makeComplexComponentTensorHandle(t,n.complexTensors.real),this.makeComplexComponentTensorHandle(t,n.complexTensors.imag)],a=this.compileAndRun(r,i),s=this.compileAndRun(o,i),u=this.complex(a,s).as2D(t.shape[0],t.shape[1]);return a.dispose(),s.dispose(),u},t.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Lr(t,e),i=o[0],a=o[1],s=o[2],u=o[3],c=e.reshape([a,r]),l=t.reshape([t.size/s,s]),h=new qi(r,u,[a,s]);return this.compileAndRun(h,[l,c]).reshape(i)},t.prototype.fill=function(t,e,n){if("string"===(n=n||H(e))){var r=M(n,E(t));return r.fill(e),vt.make(t,{values:r},n)}var o=new Vi(t,e),i=o.getCustomSetupFunc(e),a=this.makeOutputArray(t,n);return this.compileAndRun(o,[],a,i)},t.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)},t.prototype.zerosLike=function(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)},t.prototype.linspace=function(t,e,n){return Eo(t,e,n)},t.prototype.makeOutputArray=function(t,e){return vt.make(t,{},e,this)},t.prototype.makePackedTensor=function(t,e){var n=vt.make(t,{},e,this);return this.texData.get(n.dataId).isPacked=!0,n},t.prototype.unpackTensor=function(t){var e=new ps(t.shape);return this.compileAndRun(e,[t],vt.make(e.outputShape,{},t.dtype,this))},t.prototype.packTensor=function(t){var e=new wa(t.shape);return this.compileAndRun(e,[t],this.makePackedTensor(t.shape,t.dtype),null,!0)},t.prototype.packedReshape=function(t,e){var n=t.reshape([Ce(t.shape)].concat(Ee(t.shape))),r=[Ce(e)].concat(Ee(e)),o=new Sa(r,n.shape);return this.compileAndRun(o,[n],null,null,!0).reshape(e)},t.prototype.decode=function(t){var e,n=this.texData.get(t),r=n.isPacked,o=n.shape,i=n.dtype,a=Re(o),s=Gt(o),u=this.makeTensorHandle(o,"float32");return this.texData.get(u.dataId).isPacked=!0,this.texData.get(u.dataId).dtype=i,this.texData.get(u.dataId).texShape=s.map((function(t){return 2*t})),e=r?new Oi(a,s):new _i(a,s),this.compileAndRun(e,[{shape:a,dtype:i,dataId:t}],u,null,!0),u},t.prototype.compileAndRun=function(t,e,n,r,o){var i=this;if(void 0===o&&(o=!1),null==n&&(n=t.usesPackedTextures?this.makePackedTensor(t.outputShape,e[0].dtype):this.makeOutputArray(t.outputShape,e[0].dtype)),0===n.size)return this.texData.get(n.dataId).values=O(n.dtype,0),n;var a=e.map((function(e){if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var n=i.texData.get(e.dataId);if(null==n.texture){if(!t.usesPackedTextures&&E(e.shape)<=f.getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.usesPackedTextures&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.usesPackedTextures)e=n.isPacked?i.unpackTensor(e):i.packTensor(e),n=i.texData.get(e.dataId);else if(n.isPacked&&!Se(n.shape,e.shape)){var r=e,o=e.shape;e.shape=n.shape,e=i.packedReshape(e,o),n=i.texData.get(e.dataId),r.shape=o}return i.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(n.dataId);var s,u={shape:n.shape,texData:this.texData.get(n.dataId),isUniform:!1},c=function(t,e,n){var r="";e.concat(n).forEach((function(t){var e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=t.shape+"_"+n+"_"+e}));var o=t.userCode;return t.constructor.name+"_"+r+"_"+o}(t,a,u),l=this.getAndSaveBinary(c,(function(){return function(t,e,n,r){var o=e.userCode,i=n.map((function(t,n){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),a=i.map((function(t){return t.shapeInfo})),s={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=Ho(i,s,o,e.usesPackedTextures),c=t.createProgram(u),l=null,h=t.getUniformLocation(c,"NAN",!1);1===f.getNumber("WEBGL_VERSION")&&(l=t.getUniformLocation(c,"INFINITY",!1));for(var d={},p=0;p<e.variableNames.length;p++){var v=e.variableNames[p];d[v]=t.getUniformLocation(c,v,!1),d["offset"+v]=t.getUniformLocation(c,"offset"+v,!1)}return{program:e,source:u,webGLProgram:c,uniformLocations:d,inShapeInfos:a,outShapeInfo:s,infLoc:l,nanLoc:h}}(i.gpgpu,t,a,u)})),h=null!=this.activeTimers;return h&&(s=this.startTimer()),function(t,e,n,r,o){ha(e.inShapeInfos,n),ha([e.outShapeInfo],[r]);var i=r.texData.texture,a=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(i,a[0],a[1]):t.setOutputMatrixTexture(i,a[0],a[1]),t.setProgram(e.webGLProgram),1===f.getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((function(n,r){var o=e.program.variableNames[r],i=e.uniformLocations[o],a=e.uniformLocations["offset"+o];if(null!=i)if(n.isUniform)if(E(n.shape)<2)t.gl.uniform1f(i,n.uniformValues[0]);else{var s=n.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),t.gl.uniform1fv(i,s)}else null!=n.texData.slice&&null!=a&&t.gl.uniform1i(a,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,i,r)})),null!=o&&o(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,l,a,u,r),h&&(s=this.endTimer(s),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(s)})),!f.getBool("WEBGL_LAZILY_UNPACK")&&this.texData.get(n.dataId).isPacked&&!1===o?this.unpackTensor(n):n},t.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},t.prototype.getTextureManager=function(){return this.textureManager},t.prototype.dispose=function(){this.disposed||(this.textureManager.dispose(),null!=this.canvas&&null!=this.canvas.remove?this.canvas.remove():this.canvas=null,null!=this.fromPixels2DContext&&this.fromPixels2DContext.canvas.remove&&this.fromPixels2DContext.canvas.remove(),this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)},t.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=$e((function(){if(!f.get("WEBGL_RENDER_FLOAT32_ENABLED")){var e=f.getBool("DEBUG");f.set("DEBUG",!1);var n=t.abs(Sn(1e-8)).dataSync()[0];if(f.set("DEBUG",e),n>0)return 32}return 16}))),this.floatPrecisionValue},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.uploadToGPU=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,i=n.values,a=n.texture,s=n.usage,u=n.isPacked;if(null==a){var c,l=null!=this.activeTimers;l&&(c=J());var h=n.texShape;if(null==h&&(h=Ie(r,u),n.texShape=h),null!=i){var f=Re(r),d=void 0,p=h[1],v=h[0],m=i instanceof Uint8Array;u?(p=(e=Ht(h[0],h[1]))[0],v=e[1],d=new Wi(f,[v,p],m)):d=new Li(f,[v,p],m);var g=this.makeTensorHandle([v,p],o);this.texData.get(g.dataId).usage=m?Ft.PIXELS:Ft.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),p,v,i);var y=this.makeTensorHandle(d.outputShape,g.dtype);y.size=E(d.outputShape),this.texData.get(y.dataId).isPacked=u,this.compileAndRun(d,[g],y);var x=this.texData.get(y.dataId);n.texture=x.texture,n.texShape=x.texShape,n.isPacked=x.isPacked,n.usage=x.usage,this.disposeData(g.dataId),this.texData.delete(y.dataId),n.values=null,l&&(this.uploadWaitMs+=J()-c)}else{var b=this.acquireTexture(h,s,o,u);n.texture=b}}},t.prototype.convertAndCacheOnCPU=function(t,e){var n=this.texData.get(t),r=n.dtype;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){for(var n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values},t.prototype.acquireTexture=function(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: "+o+" MB, most likely due to a memory leak")}return this.textureManager.acquireTexture(t,e,r)},t.prototype.computeBytes=function(t,e){return t[0]*t[1]*W(e)},t}();Mt()&&Ot.registerBackend("webgl",(function(){return new ys}),2);var xs=wn({abs_:function(t){var e=cn(t,"x","abs");return"complex64"===e.dtype?Ot.runKernel((function(t){return t.complexAbs(e)}),{$x:e}):Ot.runKernel((function(t,n){var r=t.abs(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.toFloat().step(-1))}}}))}}),bs=wn({acos_:function(t){var e=cn(t,"x","acos");return Ot.runKernel((function(t,n){var r=t.acos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Sn(1).sub(n.toFloat().square()).sqrt()).neg()}}}))}}),ws=wn({acosh_:function(t){var e=cn(t,"x","acosh");return Ot.runKernel((function(t,n){var r=t.acosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(n.toFloat().square().sub(1).sqrt())}}}))}}),Cs=wn({asin_:function(t){var e=cn(t,"x","asin");return Ot.runKernel((function(t,n){var r=t.asin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Sn(1).sub(n.toFloat().square()).sqrt())}}}))}}),Es=wn({asinh_:function(t){var e=cn(t,"x","asinh");return Ot.runKernel((function(t,n){var r=t.asinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Sn(1).add(n.toFloat().square()).sqrt())}}}))}}),Rs=wn({atan_:function(t){var e=cn(t,"x","atan");return Ot.runKernel((function(t,n){var r=t.atan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().square().add(1))}}}))}}),Is=wn({atanh_:function(t){var e=cn(t,"x","atanh");return Ot.runKernel((function(t,n){var r=t.atanh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(Sn(1).sub(n.toFloat().square()))}}}))}}),As=wn({ceil_:function(t){var e=cn(t,"x","ceil");return Ot.runKernel((function(t){return t.ceil(e)}),{$x:e},(function(t){return{$x:function(){return Un(t)}}}))}}),Ss=wn({clipByValue_:function(t,e,n){var r=cn(t,"x","clipByValue");return x(e<=n,(function(){return"Error in clip: min ("+e+") must be less than or equal to max ("+n+")."})),Ot.runKernel((function(t,o){var i=t.clip(r,e,n);return o([r]),i}),{$x:r},(function(t,r){var o=r[0];return{$x:function(){return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)),Un(t))}}}))}}),ks=wn({cos_:function(t){var e=cn(t,"x","cos");return Ot.runKernel((function(t,n){var r=t.cos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sin().neg().mul(t)}}}))}}),Ns=wn({cosh_:function(t){var e=cn(t,"x","cosh");return Ot.runKernel((function(t,n){var r=t.cosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sinh().mulStrict(t)}}}))}}),Ts=wn({erf_:function(t){var e=cn(t,"x","erf");return x("int32"===e.dtype||"float32"===e.dtype,(function(){return"Input dtype must be `int32` or `float32`."})),"int32"===e.dtype&&(e=e.toFloat()),Ot.runKernel((function(t,n){var r=t.erf(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),Ds=wn({exp_:function(t){var e=cn(t,"x","exp");return Ot.runKernel((function(t,n){var r=t.exp(e);return n([r]),r}),{$x:e},(function(t,e){return{$x:function(){return t.mulStrict(e[0])}}}))}}),_s=wn({expm1_:function(t){var e=cn(t,"x","expm1");return Ot.runKernel((function(t,n){var r=t.expm1(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.exp())}}}))}}),Os=wn({floor_:function(t){var e=cn(t,"x","floor");return Ot.runKernel((function(t){return t.floor(e)}),{$x:e},(function(t){return{$x:function(){return Un(t)}}}))}}),Ms=wn({log_:function(t){var e=cn(t,"x","log");return Ot.runKernel((function(t,n){var r=t.log(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat())}}}))}}),Fs=wn({log1p_:function(t){var e=cn(t,"x","log1p");return Ot.runKernel((function(t,n){var r=t.log1p(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.add(1))}}}))}}),Bs=wn({logSigmoid_:function(t){var e=cn(t,"x","logSigmoid");return Ot.runKernel((function(t,n){var r=t.softplus(e.neg()).neg();return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.neg().sigmoid())}}}))}}),Ps=wn({neg_:function(t){var e=cn(t,"x","neg");return Ot.runKernel((function(t){return t.neg(e)}),{$x:e},(function(t){return{$x:function(){return t.neg()}}}))}}),Ls=wn({reciprocal_:function(t){var e=cn(t,"x","reciprocal");return Ot.runKernel((function(t,n){var r=t.reciprocal(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.square().neg())}}}))}}),Ws=wn({round_:function(t){var e=cn(t,"x","round");return Ot.runKernel((function(t){return t.round(e)}),{$x:e},(function(t){return{$x:function(){return Un(t)}}}))}}),Us=wn({rsqrt_:function(t){var e=cn(t,"x","rsqrt");return Ot.runKernel((function(t,n){var r=t.rsqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.pow(1.5).mul(2)).neg()}}}))}}),Vs=wn({sigmoid_:function(t){var e=cn(t,"x","sigmoid");return Ot.runKernel((function(t,n){var r=t.sigmoid(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.mul(Sn(1).sub(n)))}}}))}}),zs=wn({sign_:function(t){var e=cn(t,"x","sign");return Ot.runKernel((function(t){return t.sign(e)}),{$x:e},(function(t){return{$x:function(){return Un(t)}}}))}}),Gs=wn({isNaN_:function(t){var e=cn(t,"x","isNaN");return Ot.runKernel((function(t){return t.isNaN(e)}),{$x:e},(function(t){return{$x:function(){return Un(t)}}}))}}),Hs=wn({isInf_:function(t){var e=cn(t,"x","isInf");return Ot.runKernel((function(t){return t.isInf(e)}),{$x:e},(function(t){return{$x:function(){return Un(t)}}}))}}),qs=wn({isFinite_:function(t){var e=cn(t,"x","isFinite");return Ot.runKernel((function(t){return t.isFinite(e)}),{$x:e},(function(t){return{$x:function(){return Un(t)}}}))}}),$s=wn({sin_:function(t){var e=cn(t,"x","sin");return Ot.runKernel((function(t,n){var r=t.sin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cos().mul(t)}}}))}}),js=wn({sinh_:function(t){var e=cn(t,"x","sinh");return Ot.runKernel((function(t,n){var r=t.sinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cosh().mulStrict(t)}}}))}}),Ks=wn({softplus_:function(t){var e=cn(t,"x","softplus");return Ot.runKernel((function(t,n){var r=t.softplus(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.sigmoid())}}}))}}),Xs=wn({sqrt_:function(t){var e=cn(t,"x","sqrt");return Ot.runKernel((function(t,n){var r=t.sqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().sqrt().mul(2))}}}))}}),Ys=wn({square_:function(t){var e=cn(t,"x","square");return Ot.runKernel((function(t,n){return n([e]),t.square(e)}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.toFloat().mul(2))}}}))}}),Qs=wn({step_:function(t,e){void 0===e&&(e=0);var n=cn(t,"x","step");return Ot.runKernel((function(t){return t.step(n,e)}),{$x:n},(function(t){return{$x:function(){return Un(t)}}}))}}),Js=wn({tan_:function(t){var e=cn(t,"x","tan");return Ot.runKernel((function(t,n){var r=t.tan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.cos().square())}}}))}}),Zs=wn({tanh_:function(t){var e=cn(t,"x","tanh");return Ot.runKernel((function(t,n){var r=t.tanh(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Sn(1).sub(n.square()).mulStrict(t)}}}))}});function tu(t,e,n,r,o,i){var a,s,u=cn(t,"x","batchNorm"),c=cn(e,"mean","batchNorm"),l=cn(n,"variance","batchNorm");return null!=o&&(a=cn(o,"scale","batchNorm")),null!=r&&(s=cn(r,"offset","batchNorm")),x(2===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),x(2===c.rank||1===c.rank,(function(){return"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank "+c.rank+"."})),x(2===l.rank||1===l.rank,(function(){return"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank "+l.rank+"."})),null!=a&&x(2===a.rank||1===a.rank,(function(){return"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank "+a.rank+"."})),null!=s&&x(2===s.rank||1===s.rank,(function(){return"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank "+s.rank+"."})),ru(u,c,l,s,a,i)}function eu(t,e,n,r,o,i){var a,s,u=cn(t,"x","batchNorm"),c=cn(e,"mean","batchNorm"),l=cn(n,"variance","batchNorm");return null!=o&&(a=cn(o,"scale","batchNorm")),null!=r&&(s=cn(r,"offset","batchNorm")),x(3===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),x(3===c.rank||1===c.rank,(function(){return"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank "+c.rank+"."})),x(3===l.rank||1===l.rank,(function(){return"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank "+l.rank+"."})),null!=a&&x(3===a.rank||1===a.rank,(function(){return"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank "+a.rank+"."})),null!=s&&x(3===s.rank||1===s.rank,(function(){return"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank "+s.rank+"."})),ru(u,c,l,s,a,i)}function nu(t,e,n,r,o,i){var a,s,u=cn(t,"x","batchNorm"),c=cn(e,"mean","batchNorm"),l=cn(n,"variance","batchNorm");return null!=o&&(a=cn(o,"scale","batchNorm")),null!=r&&(s=cn(r,"offset","batchNorm")),x(4===u.rank,(function(){return"Error in batchNorm4D: x must be rank 4 but got rank "+u.rank+"."})),x(4===c.rank||1===c.rank,(function(){return"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank "+c.rank+"."})),x(4===l.rank||1===l.rank,(function(){return"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank "+l.rank+"."})),null!=a&&x(4===a.rank||1===a.rank,(function(){return"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank "+a.rank+"."})),null!=s&&x(4===s.rank||1===s.rank,(function(){return"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank "+s.rank+"."})),ru(u,c,l,s,a,i)}function ru(t,e,n,r,o,i){null==i&&(i=.001);var a,s,u,c=cn(t,"x","batchNorm"),l=cn(e,"mean","batchNorm"),h=cn(n,"variance","batchNorm");return null!=o&&(a=cn(o,"scale","batchNorm")),null!=r&&(s=cn(r,"offset","batchNorm")),x(l.rank===h.rank,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),x(null==s||l.rank===s.rank,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),x(null==a||l.rank===a.rank,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."})),u=0===c.rank||1===c.rank?c.as4D(1,1,1,c.size):2===c.rank?c.as4D(1,1,c.shape[0],c.shape[1]):3===c.rank?c.as4D(1,c.shape[0],c.shape[1],c.shape[2]):c,Ot.runKernel((function(t,e){var n=t.batchNormalization(u,ou(l),ou(h),i,ou(a),ou(s));return e([c,l,h,a]),n}),{$x:c,$mean:l,$variance:h,$scale:a,$offset:s},(function(t,e){var n=e,r=n[0],o=n[1],a=n[2],s=n[3],c=null==s?Sn(1):s,l=ao(o.shape,u.shape),h=[];if(1===o.rank){for(var f=0;f<u.shape.length-1;++f)h.push(u.shape[f]);h.push(1)}var d=r.sub(o),p=t.mul(c),v=Us(a.add(Sn(i))),m=v.mul(v).mul(v).mul(Sn(-.5));return{$x:function(){return 1===o.rank?t.mul(Nr(v.as4D(1,1,1,o.shape[0]),h)).mul(c).reshape(r.shape):t.mul(v).mul(c).reshape(r.shape)},$mean:function(){var t=v.mul(Sn(-1)).mul(p);return 1===o.rank&&(t=t.sum(l)),t.reshape(o.shape)},$variance:function(){var t=m.mul(d).mul(p);return 1===o.rank&&(t=t.sum(l)),t.reshape(o.shape)},$scale:function(){var e=d.mul(v),n=t.mul(e);return 1===o.rank&&(n=n.sum(l)),n.reshape(o.shape)},$offset:function(){var e=t;return 1===o.rank&&(e=e.sum(l)),e.reshape(o.shape)}}})).reshape(c.shape)}function ou(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function iu(){Ve("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon")}var au=wn({batchNormalization2d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),iu(),tu(t,e,n,i,o,r)}}),su=wn({batchNormalization3d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),iu(),eu(t,e,n,i,o,r)}}),uu=wn({batchNormalization4d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),iu(),nu(t,e,n,i,o,r)}}),cu=wn({batchNormalization_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),iu(),ru(t,e,n,i,o,r)}}),lu=wn({batchNorm_:ru}),hu=wn({batchNorm2d_:tu}),fu=wn({batchNorm3d_:eu}),du=wn({batchNorm4d_:nu}),pu=wn({logicalAnd_:function(t,e){var n=cn(t,"a","logicalAnd","bool"),r=cn(e,"b","logicalAnd","bool");return so(n.shape,r.shape),Ot.runKernel((function(t){return t.logicalAnd(n,r)}),{$a:n,$b:r})}}),vu=wn({logicalNot_:function(t){var e=cn(t,"x","logicalNot","bool");return Ot.runKernel((function(t){return t.logicalNot(e)}),{$x:e})}}),mu=wn({logicalOr_:function(t,e){var n=cn(t,"a","logicalOr","bool"),r=cn(e,"b","logicalOr","bool");return so(n.shape,r.shape),Ot.runKernel((function(t){return t.logicalOr(n,r)}),{$a:n,$b:r})}}),gu=wn({logicalXor_:function(t,e){var n=cn(t,"a","logicalXor","bool"),r=cn(e,"b","logicalXor","bool");return so(n.shape,r.shape),mu(t,e).logicalAnd(pu(t,e).logicalNot())}}),yu=wn({where_:function(t,e,n){var r=cn(e,"a","where"),o=cn(n,"b","where"),i=cn(t,"condition","where","bool");return b(r.shape,o.shape,"Error in where: "),1===i.rank?x(i.shape[0]===r.shape[0],(function(){return"The first dimension of `a` must match the size of `condition`."})):b(i.shape,o.shape,"Error in where: "),Ot.runKernel((function(t,e){var n=t.select(i,r,o);return e([i]),n}),{$condition:i,$a:r,$b:o},(function(t,e){var n=e[0];return{$condition:function(){return Un(n).toFloat()},$a:function(){return t.mul(n.cast(t.dtype))},$b:function(){return t.mul(n.logicalNot().cast(t.dtype))}}}))}}),xu=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(o){switch(o.label){case 0:return[4,(e=cn(t,"condition","whereAsync","bool")).data()];case 1:return n=o.sent(),r=Mo(e.shape,n),t!==e&&e.dispose(),[2,r]}}))}))},bu=wn({add_:function(t,e){var n,r=cn(t,"a","add"),o=cn(e,"b","add");n=At(r,o),r=n[0],o=n[1];var i=so(r.shape,o.shape);return Ot.runKernel((function(t){return t.add(r,o)}),{$a:r,$b:o},(function(t){return{$a:function(){var e=t,n=ao(r.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},$b:function(){var e=t,n=ao(o.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(o.shape)}}}))}}),wu=wn({addN_:function(t){x(Array.isArray(t),(function(){return"The argument passed to tf.addN() must be a list of tensors"})),x(t.length>=1,(function(){return"Must pass at least one tensor to tf.addN(), but got "+t.length}));var e=t.map((function(t,e){return cn(t,"tensors"+e,"addN")})),n=e[0];e.forEach((function(t){if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((function(t){if(!R(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));var r=e;return Ot.runKernel((function(t){return t.addN(e)}),r,(function(t){var n={};return e.forEach((function(e,r){n[r]=function(){return t.clone()}})),n}))}}),Cu=wn({addStrict_:function(t,e){var n=cn(t,"a","addStrict"),r=cn(e,"b","addStrict");return b(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),Eu=wn({atan2_:function(t,e){var n,r=cn(t,"a","atan2"),o=cn(e,"b","atan2");n=At(r,o),r=n[0],o=n[1];var i=so(r.shape,o.shape);return Ot.runKernel((function(t,e){var n=t.atan2(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=bu(n.square(),r.square()),o=t.mul(r.div(e)),a=ao(n.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(n.shape)},$b:function(){var e=bu(n.square(),r.square()),o=Ps(t.mul(n.div(e))),a=ao(r.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(r.shape)}}}))}}),Ru=wn({div_:function(t,e){var n,r=cn(t,"a","div"),o=cn(e,"b","div");if(n=At(r,o),r=n[0],o=n[1],"int32"===r.dtype&&"int32"===o.dtype)return Au(r,o);var i=so(r.shape,o.shape);return Ot.runKernel((function(t,e){var n=t.realDivide(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=t.div(r.toFloat()),o=ao(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},$b:function(){var e=t.mul(n.toFloat()),o=ao(r.shape,i);o.length>0&&(e=e.sum(o).reshape(r.shape));var a=r.square();return e.div(a.toFloat()).neg()}}}))}}),Iu=wn({divStrict_:function(t,e){var n=cn(t,"a","div"),r=cn(e,"b","div");return b(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),Au=wn({floorDiv_:function(t,e){var n,r=cn(t,"a","floorDiv"),o=cn(e,"b","floorDiv");n=At(r,o),r=n[0],o=n[1];var i=so(r.shape,o.shape);return Ot.runKernel((function(t,e){var n=t.floorDiv(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=t.div(r.toFloat()),o=ao(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},$b:function(){var e=t.mul(n.toFloat()),o=ao(r.shape,i);o.length>0&&(e=e.sum(o).reshape(r.shape));var a=r.square();return e.div(a.toFloat()).neg()}}}))}}),Su=wn({maximum_:function(t,e){var n,r=cn(t,"a","maximum"),o=cn(e,"b","maximum");return n=At(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),so(r.shape,o.shape),Ot.runKernel((function(t,e){var n=t.maximum(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return t.mul(n.greaterEqual(r).toFloat())},$b:function(){return t.mul(n.less(r).toFloat())}}}))}}),ku=wn({maximumStrict_:function(t,e){var n=cn(t,"a","maximumStrict"),r=cn(e,"b","maximumStrict");return b(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),Nu=wn({minimum_:function(t,e){var n,r=cn(t,"a","minimum"),o=cn(e,"b","minimum");return n=At(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),so(r.shape,o.shape),Ot.runKernel((function(t,e){var n=t.minimum(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return t.mul(n.lessEqual(r).toFloat())},$b:function(){return t.mul(n.greater(r).toFloat())}}}))}}),Tu=wn({minimumStrict_:function(t,e){var n=cn(t,"a","minimumStrict"),r=cn(e,"b","minimumStrict");return b(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),Du=wn({mod_:function(t,e){var n,r=cn(t,"a","mod"),o=cn(e,"b","mod");n=At(r,o),r=n[0],o=n[1];var i=so(r.shape,o.shape);return Ot.runKernel((function(t,e){var n=t.mod(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=ao(n.shape,i);return e.length>0?t.sum(e).reshape(n.shape):t},$b:function(){var e=t.mul(n.div(r).floor().neg()),o=ao(r.shape,i);return o.length>0?e.sum(o).reshape(r.shape):e}}}))}}),_u=wn({modStrict_:function(t,e){var n=cn(t,"a","modStrict"),r=cn(e,"b","modStrict");return b(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),Ou=wn({mul_:function(t,e){var n,r=cn(t,"a","mul"),o=cn(e,"b","mul");n=At(r,o),r=n[0],o=n[1];var i=so(r.shape,o.shape);return Ot.runKernel((function(t,e){var n=t.multiply(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=t.mul(r.toFloat()),o=ao(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},$b:function(){var e=t.mul(n.toFloat()),o=ao(r.shape,i);return o.length>0?e.sum(o).reshape(r.shape):e}}}))}}),Mu=wn({mulStrict_:function(t,e){var n=cn(t,"a","mul"),r=cn(e,"b","mul");return b(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),Fu=wn({pow_:function(t,e){var n=cn(t,"base","pow"),r=cn(e,"exp","pow"),o=so(n.shape,r.shape);return t=n.cast(Rt(n.dtype,r.dtype)),e=r.cast(Rt(n.dtype,r.dtype)),Ot.runKernel((function(t,e){var o=t.pow(n,r);return e([n,r,o]),o}),{$base:n,$exp:r},(function(t,e){var n=e[0],r=e[1],i=e[2];return{$base:function(){var e=r.toFloat(),i=t.mul(e.mul(n.pow(e.sub(Sn(1))))),a=ao(n.shape,o);return a.length>0&&(i=i.sum(a)),i.reshape(n.shape)},$exp:function(){var e=n.greater(0),a=n.log().where(e,Un(n)),s=t.mul(i.mul(a)),u=ao(r.shape,o);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}}))}}),Bu=wn({powStrict_:function(t,e){return b(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),Pu=wn({squaredDifference_:function(t,e){var n,r=cn(t,"a","squaredDifference"),o=cn(e,"b","squaredDifference");return n=At(r,o),r=n[0],o=n[1],so(r.shape,o.shape),Ot.runKernel((function(t,e){var n=t.squaredDifference(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1],o=Sn(2);return{$a:function(){return t.mul(n.sub(r).mul(o))},$b:function(){return t.mul(r.sub(n).mul(o))}}}))}}),Lu=wn({squaredDifferenceStrict_:function(t,e){var n=cn(t,"a","squaredDifferenceStrict"),r=cn(e,"b","squaredDifferenceStrict");return b(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),Wu=wn({sub_:function(t,e){var n,r=cn(t,"a","sub"),o=cn(e,"b","sub");n=At(r,o),r=n[0],o=n[1];var i=so(r.shape,o.shape);return Ot.runKernel((function(t){return t.subtract(r,o)}),{$a:r,$b:o},(function(t){return{$a:function(){var e=t,n=ao(r.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},$b:function(){var e=t,n=ao(o.shape,i);return n.length>0&&(e=e.sum(n)),e.neg().reshape(o.shape)}}}))}}),Uu=wn({subStrict_:function(t,e){var n=cn(t,"a","subStrict"),r=cn(e,"b","subStrict");return b(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}}),Vu=wn({equal_:function(t,e){var n,r=cn(t,"a","equal"),o=cn(e,"b","equal");return n=At(r,o),r=n[0],o=n[1],so(r.shape,o.shape),Ot.runKernel((function(t){return t.equal(r,o)}),{$a:r,$b:o})}}),zu=wn({equalStrict_:function(t,e){var n=cn(t,"a","equalStrict"),r=cn(e,"b","equalStrict");return b(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),Gu=wn({greater_:function(t,e){var n,r=cn(t,"a","greater"),o=cn(e,"b","greater");return n=At(r,o),r=n[0],o=n[1],so(r.shape,o.shape),Ot.runKernel((function(t){return t.greater(r,o)}),{$a:r,$b:o})}}),Hu=wn({greaterEqual_:function(t,e){var n,r=cn(t,"a","greaterEqual"),o=cn(e,"b","greaterEqual");return n=At(r,o),r=n[0],o=n[1],so(r.shape,o.shape),Ot.runKernel((function(t,e){var n=t.greaterEqual(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return Un(n)},$b:function(){return Un(r)}}}))}}),qu=wn({greaterEqualStrict_:function(t,e){var n=cn(t,"a","greaterEqualStrict"),r=cn(e,"b","greaterEqualStrict");return b(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),$u=wn({greaterStrict_:function(t,e){var n=cn(t,"a","greaterStrict"),r=cn(e,"b","greaterStrict");return b(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),ju=wn({less_:function(t,e){var n,r=cn(t,"a","less"),o=cn(e,"b","less");return n=At(r,o),r=n[0],o=n[1],so(r.shape,o.shape),Ot.runKernel((function(t){return t.less(r,o)}),{$a:r,$b:o})}}),Ku=wn({lessEqual_:function(t,e){var n,r=cn(t,"a","lessEqual"),o=cn(e,"b","lessEqual");return n=At(r,o),r=n[0],o=n[1],so(r.shape,o.shape),Ot.runKernel((function(t){return t.lessEqual(r,o)}),{$a:r,$b:o})}}),Xu=wn({lessEqualStrict_:function(t,e){var n=cn(t,"a","lessEqualStrict"),r=cn(e,"b","lessEqualStrict");return b(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),Yu=wn({lessStrict_:function(t,e){var n=cn(t,"a","lessStrict"),r=cn(e,"b","lessStrict");return b(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),Qu=wn({notEqual_:function(t,e){var n,r=cn(t,"a","notEqual"),o=cn(e,"b","notEqual");return n=At(r,o),r=n[0],o=n[1],so(r.shape,o.shape),Ot.runKernel((function(t){return t.notEqual(r,o)}),{$a:r,$b:o})}}),Ju=wn({notEqualStrict_:function(t,e){var n=cn(t,"a","notEqualStrict"),r=cn(e,"b","notEqualStrict");return b(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});function Zu(t,e){for(var n=[],r=t;r<e;++r)n.push(r);return n}function tc(t){for(var e=[],n=0;n<t.length;++n)for(var r=0;r<t[n].length;++r)e.push(t[n][r]);return e}var ec=wn({gather_:function(t,e,n){void 0===n&&(n=0);var r=cn(t,"x","gather"),o=cn(e,"indices","gather","int32");n=D(n,r.shape)[0];var i=function(t,e,n){for(var r=t.shape[n],o=[],i=1,a=1,s=0;s<n;s++)o.push(t.shape[s]),i*=t.shape[s];for(s=0;s<e.rank;s++)o.push(e.shape[s]);for(s=n+1;s<t.rank;s++)o.push(t.shape[s]),a*=t.shape[s];return{batchSize:i,sliceSize:a,dimSize:r,outputShape:o}}(r,o,n);return Ot.runKernel((function(t,e){var i=t.gather(r,o.flatten(),n);return e([o]),i}),{$x:r},(function(t,e){var o=e[0];return{$x:function(){var e=r.shape,i=o.size,a=e.slice(0,n),s=a.length,u=e.slice(n,e.length).slice(1),c=u.length,l=Zu(0,s),h=Zu(s+1,s+1+c),f=tc([a,[i],u]),d=t.reshape(f),p=o.reshape([i]),v=tc([[s],l,h]),m=d.transpose(v),g=nc(m,p,r.shape[n]),y=gn(v);return g.transpose(y)}}})).reshape(i.outputShape)}}),nc=wn({unsortedSegmentSum_:function(t,e,n){var r=cn(t,"x","unsortedSegmentSum"),o=cn(e,"segmentIds","unsortedSegmentSum","int32");return x(I(n),(function(){return"numSegments must be of dtype int"})),Ot.runKernel((function(t,e){var i=t.unsortedSegmentSum(r,o,n);return e([o]),i}),{$x:r},(function(t,e){var n=e[0];return{$x:function(){return function(t,e){for(var n=Su(e,Un(e)),r=ec(t,n),o=Hu(e,Sn(0,"int32")),i=r.rank-o.rank,a=0;a<i;++a)o=fr(o,a+1);o=pu(o,Mn(r.shape,"bool"));var s=Un(r);return yu(o,r,s)}(t,n)}}}))}}),rc=function(t,e,n){return u(this,void 0,void 0,(function(){var r,o,i,a,s,u,l,h,f,d,p,v,m;return c(this,(function(c){switch(c.label){case 0:for(r=cn(t,"tensor","boolMask"),o=cn(e,"mask","boolMask","bool"),i=null==n?0:n,a=o.rank,s=r.shape,x(a>0,(function(){return"mask cannot be scalar"})),b(s.slice(i,i+a),o.shape,"mask's shape must match the first K dimensions of tensor's shape,"),u=1,l=i;l<i+a;l++)u*=s[l];return h=s.slice(0,i).concat([u],s.slice(i+a)),f=r.reshape(h),d=o.reshape([-1]),[4,xu(d)];case 1:return p=c.sent(),v=p.squeeze([1]),m=ec(f,v,i),t!==r&&r.dispose(),e!==o&&o.dispose(),v.dispose(),f.dispose(),d.dispose(),p.dispose(),[2,m]}}))}))};function oc(t,e,n,r,o,i,a){void 0===i&&(i="NHWC"),x(t.length===e.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var s=t,u=e,c=!1;3===e.rank&&(c=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),s=[1,t[0],t[1],t[2]]),x(4===s.length,(function(){return"Error in conv2dDerInput: inShape must be length 4, but got length "+s.length+"."})),x(4===u.rank,(function(){return"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank})),x(4===n.rank,(function(){return"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank}));var l="NHWC"===i?s[3]:s[1],h="NHWC"===i?u.shape[3]:u.shape[1];x(l===n.shape[2],(function(){return"Error in conv2dDerInput: depth of input ("+l+") must match input depth for filter "+n.shape[2]+"."})),x(h===n.shape[3],(function(){return"Error in conv2dDerInput: depth of output ("+h+") must match output depth for filter "+n.shape[3]+"."})),null!=a&&x(I(o),(function(){return"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var f=bo(i),d=lo(s,n.shape,r,1,o,a,!1,f),p=Ot.runKernel((function(t,e){var r=t.conv2dDerInput(u,n,d);return e([n,u]),r}),{dy4D:u,filter:n},(function(t,e){var n=e[0],s=e[1];return{dy4D:function(){return uc(t,n,r,o,i,1,a)},filter:function(){return lc(t,s,n.shape,r,o,i,a)}}}));return c?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}function ic(t){var e=function(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function ac(t,e,n,r,o){x(t.length===e.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var i=t,a=e,s=!1;4===e.rank&&(s=!0,a=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),i=[1,t[0],t[1],t[2],t[3]]);var u=i[4],c=a.shape[4];x(5===i.length,(function(){return"Error in conv3dDerInput: inShape must be length 5, but got length "+i.length+"."})),x(5===a.rank,(function(){return"Error in conv3dDerInput: dy must be rank 5, but got rank "+a.rank})),x(5===n.rank,(function(){return"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank})),x(u===n.shape[3],(function(){return"Error in conv3dDerInput: depth of input ("+u+") must match input depth for filter "+n.shape[3]+"."})),x(c===n.shape[4],(function(){return"Error in conv3dDerInput: depth of output ("+c+") must match output depth for filter "+n.shape[4]+"."}));var l=ho(i,n.shape,r,1,o),h=Ot.runKernel((function(t){return t.conv3dDerInput(a,n,l)}),{dy5D:a});return s?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}var sc=wn({conv1d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NWC"),void 0===i&&(i=1);var s=cn(t,"x","conv1d"),u=cn(e,"filter","conv1d"),c=s,l=!1;2===s.rank&&(l=!0,c=s.as3D(1,s.shape[0],s.shape[1])),x(3===c.rank,(function(){return"Error in conv1d: input must be rank 3, but got rank "+c.rank+"."})),x(3===u.rank,(function(){return"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."})),null!=a&&x(I(r),(function(){return"Error in conv1d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."})),x(c.shape[2]===u.shape[1],(function(){return"Error in conv1d: depth of input ("+c.shape[2]+") must match input depth for filter "+u.shape[1]+"."})),x(xo(n,i),(function(){return"Error in conv1D: Either stride or dilation must be 1. Got stride "+n+" and dilation '"+i+"'"})),x("NWC"===o,(function(){return"Error in conv1d: got dataFormat of "+o+" but only NWC is currently supported."}));var h=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),f=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),d=uc(f,h,[1,n],r,"NHWC",[1,i],a);return l?d.as2D(d.shape[2],d.shape[3]):d.as3D(d.shape[0],d.shape[2],d.shape[3])}}),uc=wn({conv2d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var s=cn(t,"x","conv2d"),u=cn(e,"filter","conv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),x(4===c.rank,(function(){return"Error in conv2d: input must be rank 4, but got rank "+c.rank+"."})),x(4===u.rank,(function(){return"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."})),null!=a&&x(I(r),(function(){return"Error in conv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var h="NHWC"===o?c.shape[3]:c.shape[1];x(h===u.shape[2],(function(){return"Error in conv2d: depth of input ("+h+") must match input depth for filter "+u.shape[2]+"."})),x(xo(n,i),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"}));var f=bo(o),d=lo(c.shape,u.shape,n,i,r,a,!1,f),p=Ot.runKernel((function(t,e){var n=t.conv2d(c,u,d);return e([u,c]),n}),{x:c,$filter:u},(function(t,e){var a=e,s=a[0],u=a[1];return x(yo(i),(function(){return"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"})),{x:function(){return hc(u.shape,t,s,n,r,o)},$filter:function(){return lc(u,t,s.shape,n,r,o)}}}));return l?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}}),cc=wn({conv3d_:function(t,e,n,r,o,i){void 0===o&&(o="NDHWC"),void 0===i&&(i=[1,1,1]);var a=cn(t,"x","conv3d"),s=cn(e,"filter","conv3d"),u=a,c=!1;4===a.rank&&(c=!0,u=a.as5D(1,a.shape[0],a.shape[1],a.shape[2],a.shape[3])),x(5===u.rank,(function(){return"Error in conv3d: input must be rank 5, but got rank "+u.rank+"."})),x(5===s.rank,(function(){return"Error in conv3d: filter must be rank 5, but got rank "+s.rank+"."})),x(u.shape[4]===s.shape[3],(function(){return"Error in conv3d: depth of input ("+u.shape[4]+") must match input depth for filter "+s.shape[3]+"."})),x(function(t,e){return ic(t)||ic(e)}(n,i),(function(){return"Error in conv3D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),x("NDHWC"===o,(function(){return"Error in conv3d: got dataFormat of "+o+" but only NDHWC is currently supported."}));var l=ho(u.shape,s.shape,n,i,r),h=Ot.runKernel((function(t,e){var n=t.conv3d(u,s,l);return e([u,s]),n}),{x:u,$filter:s},(function(t,e){x(ic(i),(function(){return"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"}));var o=e[0],a=e[1];return{x:function(){return ac(o.shape,t,a,n,r)},$filter:function(){return function(t,e,n,r,o){var i=t;4===t.rank&&(i=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var a=e;4===a.rank&&(a=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3])),x(5===i.rank,(function(){return"Error in conv3dDerFilter: input must be rank 5, but got shape "+i.shape+"."})),x(5===a.rank,(function(){return"Error in conv3dDerFilter: dy must be rank 5, but got shape "+a.shape+"."})),x(5===n.length,(function(){return"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."})),x(i.shape[4]===n[3],(function(){return"Error in conv3dDerFilter: depth of input "+i.shape[4]+") must match input depth in filter ("+n[3]+"."})),x(a.shape[4]===n[4],(function(){return"Error in conv3dDerFilter: depth of dy ("+a.shape[4]+") must match output depth for filter ("+n[4]+")."}));var s=ho(i.shape,n,r,1,o);return Ot.runKernel((function(t){return t.conv3dDerFilter(i,a,s)}),{x5D:i,dy5D:a})}(o,t,a.shape,n,r)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),lc=wn({conv2dDerFilter_:function(t,e,n,r,o,i,a){void 0===i&&(i="NHWC");var s=t;3===t.rank&&(s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var u=e;3===u.rank&&(u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),x(4===s.rank,(function(){return"Error in conv2dDerFilter: input must be rank 4, but got shape "+s.shape+"."})),x(4===u.rank,(function(){return"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."})),x(4===n.length,(function(){return"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."}));var c="NHWC"===i?s.shape[3]:s.shape[1],l="NHWC"===i?u.shape[3]:u.shape[1];x(c===n[2],(function(){return"Error in conv2dDerFilter: depth of input "+c+") must match input depth in filter ("+n[2]+"."})),x(l===n[3],(function(){return"Error in conv2dDerFilter: depth of dy ("+l+") must match output depth for filter ("+n[3]+")."})),null!=a&&x(I(o),(function(){return"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var h=bo(i),f=lo(s.shape,n,r,1,o,a,!1,h);return Ot.runKernel((function(t){return t.conv2dDerFilter(s,u,f)}),{x4D:s,dy4D:u})}}),hc=wn({conv2dDerInput_:oc}),fc=wn({depthwiseConv2d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var s=cn(t,"x","depthwiseConv2d"),u=cn(e,"filter","depthwiseConv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),x(4===c.rank,(function(){return"Error in depthwiseConv2d: input must be rank 4, but got rank "+c.rank+"."})),x(4===u.rank,(function(){return"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."})),x(c.shape[3]===u.shape[2],(function(){return"Error in depthwiseConv2d: number of input channels ("+c.shape[3]+") must match the inChannels dimension in filter "+u.shape[2]+"."})),null==i&&(i=[1,1]),x(xo(n,i),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),null!=a&&x(I(r),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var h=lo(c.shape,u.shape,n,i,r,a,!0),f=Ot.runKernel((function(t,e){var n=t.depthwiseConv2D(c,u,h);return e([c,u]),n}),{x:c,$filter:u},(function(t,e){x(yo(i),(function(){return"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+i+"'"}));var n=e[0],r=e[1];return{x:function(){return dc(n.shape,t,r,h)},$filter:function(){return pc(n,t,r.shape,h)}}}));return l?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}}),dc=wn({depthwiseConv2dDerInput_:function(t,e,n,r){var o=e,i=!1;3===e.rank&&(i=!0,o=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var a=Ot.runKernel((function(t){return t.depthwiseConv2DDerInput(o,n,r)}),{dy4D:o});return i?a.as3D(a.shape[1],a.shape[2],a.shape[3]):a}}),pc=wn({depthwiseConv2dDerFilter_:function(t,e,n,r){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var i=e;return 3===i.rank&&(i=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Ot.runKernel((function(t){return t.depthwiseConv2DDerFilter(o,i,r)}),{x4D:o,dy4D:i})}}),vc=wn({separableConv2d_:function(t,e,n,r,o,i,a){void 0===i&&(i=[1,1]),void 0===a&&(a="NHWC");var s=cn(t,"x","separableConv2d"),u=cn(e,"depthwiseFilter","separableConv2d"),c=cn(n,"pointwiseFilter","separableConv2d"),l=s,h=!1;if(3===s.rank&&(h=!0,l=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");x(4===l.rank,(function(){return"Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."})),x(4===u.rank,(function(){return"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+u.rank+"."})),x(4===c.rank,(function(){return"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+u.rank+"."})),x(1===c.shape[0],(function(){return"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+c.shape[0]+"."})),x(1===c.shape[1],(function(){return"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got "+c.shape[1]+"."}));var f=u.shape[2],d=u.shape[3];x(c.shape[2]===f*d,(function(){return"Error in separableConv2d: the third dimension of pointwise filter must be "+f*d+", but got "+c.shape[2]+"."}));var p=fc(l,u,r,o,a,i),v=uc(p,c,1,"valid",a);return h?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),mc=wn({conv2dTranspose_:function(t,e,n,r,o,i){return oc(n,cn(t,"x","conv2dTranspose"),cn(e,"filter","conv2dTranspose"),r,o,"NHWC",i)}}),gc=wn({conv3dTranspose_:function(t,e,n,r,o){return ac(n,cn(t,"x","conv3dTranspose"),cn(e,"filter","conv3dTranspose"),r,o)}}),yc=wn({matMul_:function(t,e,n,r){var o;void 0===n&&(n=!1),void 0===r&&(r=!1);var i=cn(t,"a","matMul"),a=cn(e,"b","matMul");o=At(i,a),i=o[0],a=o[1];var s=n?i.shape[i.rank-2]:i.shape[i.rank-1],u=r?a.shape[a.rank-1]:a.shape[a.rank-2],c=n?i.shape[i.rank-1]:i.shape[i.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],h=i.shape.slice(0,-2),f=a.shape.slice(0,-2),d=E(h),p=E(f);x(i.rank>=2&&a.rank>=2&&i.rank===a.rank,(function(){return"Error in matMul: inputs must have the same rank of at least 2, got ranks "+i.rank+" and "+a.rank+"."})),x(R(h,f),(function(){return"Error in matMul: outer dimensions ("+h+") and ("+f+") of Tensors with shapes "+i.shape+" and "+a.shape+" must match."})),x(s===u,(function(){return"Error in matMul: inner shapes ("+s+") and ("+u+") of Tensors with shapes "+i.shape+" and "+a.shape+" and transposeA="+n+" and transposeB="+r+" must match."}));var v=i.shape.slice(0,-2).concat([c,l]),m=n?i.as3D(d,s,c):i.as3D(d,c,s),g=r?a.as3D(p,l,u):a.as3D(p,u,l);return Ot.runKernel((function(t,e){var o=t.batchMatMul(m,g,n,r);return e([m,g]),o}),{$a:m,$b:g},(function(t,e){var o=e,i=o[0],a=o[1];return n||r?!n&&r?{$a:function(){return t.matMul(a,!1,!1)},$b:function(){return t.matMul(i,!0,!1)}}:n&&!r?{$a:function(){return a.matMul(t,!1,!0)},$b:function(){return i.matMul(t,!1,!1)}}:{$a:function(){return a.matMul(t,!0,!0)},$b:function(){return t.matMul(i,!0,!0)}}:{$a:function(){return t.matMul(a,!1,!0)},$b:function(){return i.matMul(t,!0,!1)}}})).reshape(v)}}),xc=wn({dot_:function(t,e){var n=cn(t,"t1","dot"),r=cn(e,"t2","dot");x(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(function(){return"Error in dot: inputs must all be rank 1 or 2, but got ranks "+n.rank+" and "+r.rank+"."}));var o=1===n.rank?n.size:n.shape[1],i=1===r.rank?r.size:r.shape[0];return x(o===i,(function(){return"Error in dot: inner dimensions of inputs must match, but got "+o+" and "+i+"."})),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),bc=wn({outerProduct_:function(t,e){var n=cn(t,"v1","outerProduct"),r=cn(e,"v2","outerProduct");return x(1===n.rank&&1===r.rank,(function(){return"Error in outerProduct: inputs must be rank 1, but got ranks "+n.rank+" and "+r.rank+"."})),n.as2D(-1,1).matMul(r.as2D(1,-1))}}),wc=wn({reverse_:function(t,e){var n=cn(t,"x","reverse");if(0===n.rank)return n.clone();var r=D(e,n.shape);return Ot.runKernel((function(t){return t.reverse(n,r)}),{$x:n},(function(t){return{$x:function(){return t.reverse(r)}}})).reshapeAs(n)}}),Cc=wn({reverse1d_:function(t){var e=cn(t,"x","reverse");return x(1===e.rank,(function(){return"Error in reverse1D: x must be rank 1 but got rank "+e.rank+"."})),wc(e,0)}}),Ec=wn({reverse2d_:function(t,e){var n=cn(t,"x","reverse");return x(2===n.rank,(function(){return"Error in reverse2D: x must be rank 2 but got rank "+n.rank+"."})),wc(n,e)}}),Rc=wn({reverse3d_:function(t,e){var n=cn(t,"x","reverse");return x(3===n.rank,(function(){return"Error in reverse3D: x must be rank 3 but got rank "+n.rank+"."})),wc(n,e)}}),Ic=wn({reverse4d_:function(t,e){var n=cn(t,"x","reverse");return x(4===n.rank,(function(){return"Error in reverse4D: x must be rank 4 but got rank "+n.rank+"."})),wc(n,e)}});function Ac(t,e,n,r,o,i){var a=cn(t,"x","maxPool"),s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),null==r&&(r=[1,1]),x(4===s.rank,(function(){return"Error in maxPool: input must be rank 4 but got rank "+s.rank+"."})),x(xo(n,r),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"})),null!=i&&x(I(o),(function(){return"Error in maxPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=uo(s.shape,e,n,r,o,i),l=Ot.runKernel((function(t,e){var n=t.maxPool(s,c);return e([s,n]),n}),{x:s},(function(t,i){var a=i[0],s=i[1];return{x:function(){return function(t,e,n,r,o,i,a,s){var u=cn(t,"dy","maxPoolBackprop"),c=cn(e,"input","maxPoolBackprop"),l=cn(n,"output","maxPoolBackprop");x(c.rank===u.rank,(function(){return"Rank of input ("+c.rank+") does not match rank of dy ("+u.rank+")"})),null==i&&(i=[1,1]),x(xo(o,i),(function(){return"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),x(4===u.rank,(function(){return"Error in maxPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."})),x(4===c.rank,(function(){return"Error in maxPoolBackprop: input must be rank 4 but got rank "+c.rank+"."}));var h=uo(c.shape,r,o,i,a,s);return Ot.runKernel((function(t){return t.maxPoolBackprop(u,c,l,h)}),{$dy:u,$input:c})}(t,a,s,e,n,r,o)}}}));return u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}function Sc(t,e,n,r,o,i){var a=cn(t,"x","avgPool","float32");null==r&&(r=[1,1]),x(xo(n,r),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"}));var s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),x(4===s.rank,(function(){return"Error in avgPool: x must be rank 4 but got rank "+s.rank+"."})),null!=i&&x(I(o),(function(){return"Error in avgPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=uo(s.shape,e,n,r,o,i),l=Ot.runKernel((function(t){return t.avgPool(s,c)}),{x:s},(function(t){return{x:function(){return function(t,e,n,r,o,i){var a=cn(t,"dy","avgPoolBackprop"),s=cn(e,"input","avgPoolBackprop");x(s.rank===a.rank,(function(){return"Rank of input ("+s.rank+") does not match rank of dy ("+a.rank+")"})),null==o&&(o=[1,1]),x(xo(r,o),(function(){return"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"}));var u=s,c=a,l=!1;3===s.rank&&(l=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),c=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),x(4===c.rank,(function(){return"Error in avgPoolBackprop: dy must be rank 4 but got rank "+c.rank+"."})),x(4===u.rank,(function(){return"Error in avgPoolBackprop: input must be rank 4 but got rank "+u.rank+"."}));var h=uo(u.shape,n,r,o,i),f=Ot.runKernel((function(t){return t.avgPoolBackprop(c,u,h)}),{dy4D:c,input4D:u});return l?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}(t,s,e,n,r,o)}}}));return l=l.cast(a.dtype),u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var kc=wn({maxPool_:function(t,e,n,r,o){return Ac(t,e,n,1,r,o)}}),Nc=wn({avgPool_:function(t,e,n,r,o){return Sc(t,e,n,1,r,o)}}),Tc=wn({pool_:function(t,e,n,r,o,i){null==o&&(o=[1,1]),null==i&&(i=1),0===r&&(r="valid");var a=cn(t,"x","maxPool"),s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),x(xo(i,o),(function(){return"Error in pool: Either strides or dilations must be 1. Got strides "+i+" and dilations '"+o+"'"}));var c,l=uo(s.shape,e,i,o,r),h=[l.dilationHeight,l.dilationWidth];c="same"===r?function(t,e){var n=t.map((function(t,n){return t+(t-1)*(e[n]-1)})).map((function(t){return t-1})),r=n.map((function(t){return Math.floor(t/2)})),o=n.map((function(t,e){return t-r[e]}));return n.map((function(t,e){return[r[e],o[e]]}))}([l.filterHeight,l.filterWidth],h):[[0,0],[0,0]];var f=1===h[0]&&1===h[1],d=function(t,e,n){var r=n.map((function(t){return t[0]})),o=n.map((function(t){return t[1]})),i=t.concat(r,o),a=e.map((function(t,e){return(t-i[e]%t)%t})),s=o.map((function(t,e){return t+a[e]}));return[e.map((function(t,e){return[r[e],s[e]]})),e.map((function(t,e){return[0,a[e]]}))]}([l.inHeight,l.inWidth],h,c),p=d[0],v=d[1],m=f?r:"valid",g=f?s:Ar(s,h,p),y=("avg"===n?function(){return Sc(g,e,i,1,m)}:function(){return Ac(g,e,i,1,m)})(),b=f?y:sr(y,h,v);return u?b.as3D(b.shape[1],b.shape[2],b.shape[3]):b}}),Dc=wn({maxPool3d_:function(t,e,n,r,o,i,a){void 0===i&&(i="NDHWC");var s=cn(t,"x","maxPool3d"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==a&&(a=[1,1,1]),x(5===u.rank,(function(){return"Error in maxPool3d: x must be rank 5 but got rank "+u.rank+"."})),x("NDHWC"===i,(function(){return"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),x(xo(n,a),(function(){return"Error in maxPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&x(I(r),(function(){return"Error in maxPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=co(u.shape,e,n,a,r,o,i),h=Ot.runKernel((function(t,e){var n=t.maxPool3d(u,l);return e([u,n]),n}),{x:u},(function(t,i){var s=i[0],u=i[1];return{x:function(){return function(t,e,n,r,o,i,a,s){var u=cn(t,"dy","maxPool3dBackprop"),c=cn(e,"input","maxPool3dBackprop"),l=cn(n,"output","maxPool3dBackprop"),h=u,f=c,d=l,p=!1;4===c.rank&&(p=!0,h=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),f=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),d=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3])),x(5===h.rank,(function(){return"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."})),x(5===f.rank,(function(){return"Error in maxPool3dBackprop: input must be rank 5 but got rank "+f.rank+"."})),x(5===d.rank,(function(){return"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."})),null==i&&(i=[1,1,1]),x(xo(o,i),(function(){return"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),null!=s&&x(I(a),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+a+"."}));var v=co(f.shape,r,o,i,a,s),m=Ot.runKernel((function(t){return t.maxPool3dBackprop(h,f,d,v)}),{dy5D:h,input5D:f});return p?m.as4D(m.shape[1],m.shape[2],m.shape[3],m.shape[4]):m}(t,s,u,e,n,a,r,o)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),_c=wn({avgPool3d_:function(t,e,n,r,o,i,a){void 0===i&&(i="NDHWC");var s=cn(t,"x","avgPool3d","float32"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==a&&(a=[1,1,1]),x(5===u.rank,(function(){return"Error in avgPool3d: x must be rank 5 but got rank "+u.rank+"."})),x("NDHWC"===i,(function(){return"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),x(xo(n,a),(function(){return"Error in avgPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&x(I(r),(function(){return"Error in avgPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=co(u.shape,e,n,a,r,o,i),h=Ot.runKernel((function(t){return t.avgPool3d(u,l)}),{x:u},(function(t){return{x:function(){return function(t,e,n,r,o,i,a){var s=cn(t,"dy","avgPool3dBackprop"),u=cn(e,"input","avgPool3dBackprop"),c=s,l=u,h=!1;4===u.rank&&(h=!0,c=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),l=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3])),x(5===c.rank,(function(){return"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."})),x(5===l.rank,(function(){return"Error in avgPool3dBackprop: input must be rank 5 but got rank "+l.rank+"."})),null==o&&(o=[1,1,1]),x(xo(r,o),(function(){return"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"})),null!=a&&x(I(i),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+"."}));var f=co(l.shape,n,r,o,i,a),d=Ot.runKernel((function(t){return t.avgPool3dBackprop(c,l,f)}),{dy5D:c,input5D:l});return h?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}(t,u,e,n,a,r,o)}}}));return h=h.cast(u.dtype),c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Oc=wn({slice_:function(t,e,n){var r,o,i=cn(t,"x","slice");if(0===i.rank)throw new Error("Slicing scalar is not possible");(r="number"==typeof e?[e].concat(new Array(i.rank-1).fill(0)):e.length<i.rank?e.concat(new Array(i.rank-e.length).fill(0)):e.slice()).forEach((function(t){x(-1!==t,(function(){return"slice() does not support negative begin indexing."}))})),o=(o=null==n?new Array(i.rank).fill(-1):"number"==typeof n?[n].concat(new Array(i.rank-1).fill(-1)):n.length<i.rank?n.concat(new Array(i.rank-n.length).fill(-1)):n).map((function(t,e){return t>=0?t:(x(-1===t,(function(){return"Negative size values should be exactly -1 but got "+t+" for the slice() size at index "+e+"."})),i.shape[e]-r[e])})),function(t,e,n){x(t.rank===e.length,(function(){return"Error in slice"+t.rank+"D: Length of begin "+e+" must match the rank of the array ("+t.rank+")."})),x(t.rank===n.length,(function(){return"Error in slice"+t.rank+"D: Length of size "+n+" must match the rank of the array ("+t.rank+")."}));for(var r=function(r){x(e[r]+n[r]<=t.shape[r],(function(){return"Error in slice"+t.rank+"D: begin["+r+"] + size["+r+"] ("+(e[r]+n[r])+") would overflow input.shape["+r+"] ("+t.shape[r]+")"}))},o=0;o<t.rank;++o)r(o)}(i,r,o);var a=i.shape;return Ot.runKernel((function(t){return t.slice(i,r,o)}),{$x:i},(function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],a[n]-r[n]-o[n]]);return{$x:function(){return t.pad(e)}}}))}}),Mc=wn({slice1d_:function(t,e,n){var r=cn(t,"x","slice1d");return x(1===r.rank,(function(){return"slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"})),Oc(r,[e],[n])}}),Fc=wn({slice2d_:function(t,e,n){var r=cn(t,"x","slice2d");return x(2===r.rank,(function(){return"slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"})),Oc(r,e,n)}}),Bc=wn({slice3d_:function(t,e,n){var r=cn(t,"x","slice3d");return x(3===r.rank,(function(){return"slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"})),Oc(r,e,n)}}),Pc=wn({slice4d_:function(t,e,n){var r=cn(t,"x","slice4d");return x(4===r.rank,(function(){return"slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"})),Oc(r,e,n)}});function Lc(t,e,n,r,o){return e.rank<n.rank&&(e=e.reshape(pn(e.shape,r))),t.rank<n.rank&&(t=t.reshape(pn(t.shape,r))),{$x:function(){var r=t.mul(n.equal(e).cast(t.dtype));return null==o?r:r.transpose(o)}}}var Wc=wn({all_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=cn(t,"x","all","bool"),o=D(e,r.shape),i=o,a=mn(i,r.rank);null!=a&&(r=r.transpose(a),i=yn(i.length,r.rank));var s=Ot.runKernel((function(t){return t.all(r,i)}),{$x:r});if(n){var u=pn(s.shape,o);return s.reshape(u)}return s}}),Uc=wn({any_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=cn(t,"x","any","bool"),o=D(e,r.shape),i=o,a=mn(i,r.rank);null!=a&&(r=r.transpose(a),i=yn(i.length,r.rank));var s=Ot.runKernel((function(t){return t.any(r,i)}),{$x:r});if(n){var u=pn(s.shape,o);return s.reshape(u)}return s}}),Vc=wn({argMax_:function(t,e){void 0===e&&(e=0);var n=cn(t,"x","argMax");null==e&&(e=0);var r=D(e,n.shape),o=mn(r,n.rank);return null!=o&&(n=n.transpose(o),r=yn(r.length,n.rank)),Ot.runKernel((function(t,e){var o=t.argMax(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return Un(n)}}}))}}),zc=wn({argMin_:function(t,e){void 0===e&&(e=0);var n=cn(t,"x","argMin");null==e&&(e=0);var r=D(e,n.shape),o=mn(r,n.rank);return null!=o&&(n=n.transpose(o),r=yn(r.length,n.rank)),Ot.runKernel((function(t,e){var o=t.argMin(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return Un(n)}}}))}}),Gc=wn({logSumExp_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=cn(t,"x","logSumExp"),o=D(e,r.shape),i=r.max(o,!0),a=r.sub(i).exp().sum(o).log(),s=i.reshape(a.shape).add(a);if(n){var u=pn(s.shape,o);return s.reshape(u)}return s}}),Hc=wn({max_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=cn(t,"x","max"),o=r,i=D(e,r.shape),a=i,s=mn(a,r.rank);null!=s&&(r=r.transpose(s),a=yn(a.length,r.rank));var u=Ot.runKernel((function(t,e){var n=t.max(r,a);return e([o,n]),n}),{$x:r},(function(t,e){return Lc(t,e[1],e[0],i,s)}));if(n){var c=pn(u.shape,i);u=u.reshape(c)}return u}}),qc=wn({mean_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=cn(t,"x","mean"),o=D(e,r.shape),i=E(dn(r.shape,o)[1]);return Zr((function(t){var r=Sn(i);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(Mn(t.shape,"float32")).div(i)}}}))(r)}}),$c=wn({min_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=cn(t,"x","min"),o=r,i=D(e,r.shape),a=i,s=mn(a,r.rank);null!=s&&(r=r.transpose(s),a=yn(a.length,r.rank));var u=Ot.runKernel((function(t,e){var n=t.min(r,a);return e([o,n]),n}),{$x:r},(function(t,e){return Lc(t,e[1],e[0],i,s)}));if(n){var c=pn(u.shape,i);u=u.reshape(c)}return u}}),jc=wn({moments_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=D(e,(t=cn(t,"x","moments")).shape),o=t.mean(r,n),i=o.shape;n||(i=pn(o.shape,r));var a=t.toFloat().sub(o.reshape(i)).square();return{mean:o,variance:a.mean(r,n)}}}),Kc=wn({sum_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=cn(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());var o=D(e,r.shape);return Zr((function(t){var e=mn(o,t.rank),r=o,i=t;null!=e&&(i=t.transpose(e),r=yn(r.length,t.rank));var a=Ot.runKernel((function(t){return t.sum(i,r)}),{permutedX:i});if(n){var s=pn(a.shape,o);a=a.reshape(s)}return{value:a,gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(Mn(t.shape,"float32"))}}}))(r)}}),Xc=wn({prod_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=cn(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());var o=D(e,r.shape),i=mn(o,r.rank),a=o,s=r;null!=i&&(s=r.transpose(i),a=yn(a.length,r.rank));var u=Ot.runKernel((function(t){return t.prod(s,a)}),{permutedX:s});if(n){var c=pn(u.shape,o);u=u.reshape(c)}return u}}),Yc=wn({elu_:function(t){var e=cn(t,"x","elu");return Ot.runKernel((function(t,n){var r=t.elu(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Ot.runKernel((function(e){return e.eluDer(t,n)}),{dy:t,y:n})}}}))}}),Qc=wn({leakyRelu_:function(t,e){void 0===e&&(e=.2);var n=cn(t,"x","leakyRelu");return Su(Sn(e).mul(n),n)}}),Jc=wn({prelu_:function(t,e){var n=cn(t,"x","prelu"),r=cn(e,"alpha","prelu");return Ot.runKernel((function(t,e){var o=t.prelu(n,r);return e([n,r]),o}),{$x:n,$alpha:r},(function(t,e){var n=e[0],r=e[1],o=n.greater(0);return{$x:function(){return yu(o,t,t.mul(r))},$alpha:function(){var e=yu(o,Un(t),t.mul(n)),i=ao(r.shape,t.shape);return i.length>0&&(e=e.sum(i)),e.reshape(r.shape)}}}))}}),Zc=wn({relu_:function(t){var e=cn(t,"x","relu");return"bool"===e.dtype?e.toInt():Ot.runKernel((function(t,n){var r=t.relu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mulStrict(n.step().toFloat())}}}))}}),tl=wn({relu6_:function(t){var e=cn(t,"x","relu6");return"bool"===e.dtype?e.toInt():Ot.runKernel((function(t,n){var r=t.relu6(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0],r=n.lessEqual(6).mul(n.step());return{$x:function(){return t.mulStrict(r.toFloat())}}}))}}),el=wn({selu_:function(t){var e=cn(t,"x","selu");return Ot.runKernel((function(t,n){var r=t.selu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){var e=n.greater(Sn(0)),r=Sn(Ka),o=Sn(Xa),i=t.mul(o),a=t.mul(r).mul(n.toFloat().exp());return yu(e,i,a)}}}))}}),nl=wn({transpose_:function(t,e){var n=cn(t,"x","transpose");return null==e&&(e=n.shape.map((function(t,e){return e})).reverse()),x(n.rank===e.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of perm "+e+"."})),e.forEach((function(t){x(t>=0&&t<n.rank,(function(){return"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e}))})),n.rank<=1?n.clone():Ot.runKernel((function(t){return t.transpose(n,e)}),{$x:n},(function(t){var n=gn(e);return{$x:function(){return t.transpose(n)}}}))}}),rl=wn({localResponseNormalization_:function(t,e,n,r,o){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===o&&(o=.5);var i=cn(t,"x","localResponseNormalization");x(4===i.rank||3===i.rank,(function(){return"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+i.rank+"."})),x(I(e),(function(){return"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius "+e+"."}));var a=i,s=!1;3===i.rank&&(s=!0,a=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));var u=Ot.runKernel((function(t,i){var s=t.localResponseNormalization4D(a,e,n,r,o);return i([a,s]),s}),{x4D:a},(function(t,i){var a=i[0],s=i[1];return{x4D:function(){return Ot.runKernel((function(i){return i.LRNGrad(t,a,s,e,n,r,o)}),{})}}}));return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),ol=wn({norm_:function(t,e,n,r){void 0===e&&(e="euclidean"),void 0===n&&(n=null),void 0===r&&(r=!1);var o=function t(e,n,r){if(void 0===r&&(r=null),0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(Sn(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=cn(t,"x","norm"),e,n),i=o.shape;if(r){var a=D(n,t.shape);i=pn(o.shape,a)}return o.reshape(i)}}),il=wn({basicLSTMCell_:function(t,e,n,r,o,i){var a=cn(t,"forgetBias","basicLSTMCell"),s=cn(e,"lstmKernel","basicLSTMCell"),u=cn(n,"lstmBias","basicLSTMCell"),c=cn(r,"data","basicLSTMCell"),l=cn(o,"c","basicLSTMCell"),h=cn(i,"h","basicLSTMCell"),f=c.concat(h,1).matMul(s).add(u),d=f.shape[0],p=f.shape[1]/4,v=[d,p],m=f.slice([0,0],v),g=f.slice([0,p],v),y=f.slice([0,2*p],v),x=f.slice([0,3*p],v),b=m.sigmoid().mulStrict(g.tanh()).addStrict(l.mulStrict(a.add(y).sigmoid())),w=b.tanh().mulStrict(x.sigmoid());return[b,w]}}),al=wn({multiRNNCell_:function(t,e,n,r){for(var o=cn(e,"data","multiRNNCell"),i=ln(n,"c","multiRNNCell"),a=ln(r,"h","multiRNNCell"),s=o,u=[],c=0;c<t.length;c++){var l=t[c](s,i[c],a[c]);u.push(l[0]),u.push(l[1]),s=l[1]}var h=[],f=[];for(c=0;c<u.length;c+=2)h.push(u[c]),f.push(u[c+1]);return[h,f]}}),sl=wn({movingAverage_:function(t,e,n,r,o){void 0===o&&(o=!0);var i=cn(t,"v","movingAverage"),a=cn(e,"x","movingAverage"),s=cn(n,"decay","movingAverage");St(i,a),x(R(i.shape,a.shape),(function(){return"Shape mismatch in v and x"}));var u=Sn(1),c=u.sub(s),l=a.sub(i).mul(c);if(o){x(null!=r,(function(){return"When using zeroDebias: true, step is required."}));var h=cn(r,"step","movingAverage");l=l.div(u.sub(Fu(s,h)))}return i.add(l)}}),ul=wn({stridedSlice_:function(t,e,n,r,o,i,a,s,u){if(void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===s&&(s=0),void 0===u&&(u=0),null==r&&(r=new Array(e.length)),0!==a)throw new Error("ellipsis mask is not yet supported");var c=cn(t,"x","stridedSlice"),l=zr(s),h=c.shape.slice();l.forEach((function(t){e[t]=0,n[t]=1,h.splice(t,0,1)})),c=c.reshape(h);for(var f=0;f<c.rank;f++)e[f]=Hr(o,e,r,c.shape,f),n[f]=qr(i,n,r,c.shape,f),r[f]=r[f]||1;var d=zr(u);d.forEach((function(t){n[t]=e[t]+1,r[t]=1}));var p=Gr(e,n,r),v=p.filter((function(t,e){return-1===d.indexOf(e)}));return r.every((function(t){return 1===t}))?Oc(c,e,p).reshape(v):Ot.runKernel((function(t){return t.stridedSlice(c,e,n,r)}),{$x:c}).reshape(v)}}),cl=wn({topk_:function(t,e,n){void 0===e&&(e=1),void 0===n&&(n=!0);var r=cn(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var o=r.shape[r.shape.length-1];if(e>o)throw new Error("'k' passed to topk() must be <= the last dimension ("+o+") but got "+e);var i=Ot.runKernel((function(t){return t.topk(r,e,n)}),{$x:r});return{values:i[0],indices:i[1]}}}),ll=wn({scatterND_:function(t,e,n){var r=cn(t,"indices","scatterND","int32"),o=cn(e,"updates","scatterND");return function(t,e,n){if(e.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}!function(t,e,n){var r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,i="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+", indices.shape: "+e.shape+", shape: "+t+", sliceDim: "+r+", and batchDim: "+o+".";if(n.rank<o)throw new Error(i+" update.rank < "+o+". ");if(t.length<r+(n.rank-o))throw new Error(i+" Output shape length < "+(r+(n.rank-o)));if(n.rank!==o+t.length-r)throw new Error(i+" update.rank != "+(o+t.length-r));for(var a=0;a<o;++a)if(n.shape[a]!==e.shape[a])throw new Error(i+" updates.shape["+a+"] ("+n.shape[a]+") != indices.shape["+a+"] ("+e.shape[a]+").");for(a=0;a<n.rank-o;++a)if(n.shape[a+o]!==t[a+r])throw new Error(i+" updates.shape["+(a+o)+"] ("+n.shape[a+o]+") != shape["+(a+o)+"] ("+t[a+o]+")")}(n,e,t)}(o,r,n),Ot.runKernel((function(t){return t.scatterND(r,o,n)}),{$indices:r,$updates:o})}}),hl=wn({fft_:function(t){x("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.fft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Ot.runKernel((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),fl=wn({ifft_:function(t){x("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.ifft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Ot.runKernel((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),dl=wn({rfft_:function(t,e){x("float32"===t.dtype,(function(){return"The dtype for rfft() must be real value but got "+t.dtype}));var n,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=e&&e<r){var i=t.shape.map((function(t){return 0})),a=t.shape.map((function(t){return t}));a[t.shape.length-1]=e,n=t.slice(i,a),r=e}else if(null!=e&&e>r){var s=t.shape.map((function(t){return t}));s[t.shape.length-1]=e-r,n=t.concat(Fn(s),t.shape.length-1),r=e}else n=t;var u=n.zerosLike(),c=Cn(n,u).as2D(o,r),l=hl(c),h=Math.floor(r/2)+1,f=En(l),d=Rn(l),p=f.split([h,r-h],f.shape.length-1),v=d.split([h,r-h],d.shape.length-1),m=n.shape.slice();return m[n.shape.length-1]=h,Cn(p[0],v[0]).reshape(m)}}),pl=wn({irfft_:function(t){var e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){var r=t.as2D(n,e),o=fl(r);return En(o)}var i=[n,2*(e-1)],a=En(t).as2D(n,e),s=Rn(t).as2D(n,e),u=a.slice([0,1],[n,e-2]).reverse(1),c=s.slice([0,1],[n,e-2]).reverse(1).mul(Sn(-1)),l=a.concat(u,1),h=s.concat(c,1);return r=Cn(l,h).as2D(i[0],i[1]),o=fl(r),En(o)}}),vl=Object.freeze({fft:hl,ifft:fl,rfft:dl,irfft:pl}),ml=wn({sparseToDense_:function(t,e,n,r){void 0===r&&(r=0);var o=cn(t,"sparseIndices","sparseToDense","int32"),i=cn(e,"sparseValues","sparseToDense"),a=cn(r,"defaultValue","sparseToDense",i.dtype);return function(t,e,n,r){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+t.shape+".");var o=t.rank>0?t.shape[0]:1,i=t.rank>1?t.shape[1]:1;if(n.length!==i)throw new Error("outputShape has incorrect number of elements:, "+n.length+", should be: "+i+".");var a=e.size;if(0!==e.rank&&(1!==e.rank||a!==o))throw new Error("sparseValues has incorrect shape "+e.shape+", should be [] or ["+o+"]");if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,i,n,a),Ot.runKernel((function(t){return t.sparseToDense(o,i,n,a)}),{$sparseIndices:o,$sparseValues:i,$defaultValue:a})}}),gl=wn({gatherND_:function(t,e){var n=cn(e,"indices","gatherND","int32"),r=cn(t,"x","gatherND");return Ot.runKernel((function(t){return t.gatherND(r,n)}),{$x:r,$indices:n})}}),yl=wn({diag_:function(t){var e=cn(t,"x","diag").flatten(),n=t.shape.concat(t.shape);return Ot.runKernel((function(t){return t.diag(e)}),{$x:e}).reshape(n)}}),xl=wn({dropout_:function(t,e,n,r){var o=cn(t,"x","dropout");if(x("float32"===o.dtype,(function(){return"x has to be a floating point tensor since it's going to be scaled, but got a "+o.dtype+" tensor instead."})),x(e>=0&&e<1,(function(){return"rate must be a float in the range [0, 1), but got "+e+"."})),0===e)return t instanceof vt?o.clone():o;var i=function(t,e){if(null==e)return t.shape.slice();if(R(t.shape,e))return e;if(t.shape.length===e.length){for(var n=[],r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(o,n),a=1-e,s=Rr(i,0,1,"float32",r).add(a).floor().div(a);return o.mul(s)}});function bl(t,e,n){for(var r=1-t%2,o=new Float32Array(t),i=0;i<t;++i){var a=2*Math.PI*i/(t+r-1);o[i]=e-n*Math.cos(a)}return kn(o,"float32")}var wl,Cl=wn({hannWindow_:function(t){return bl(t,.5,.5)}}),El=wn({hammingWindow_:function(t){return bl(t,.54,.46)}}),Rl=wn({frame_:function(t,e,n,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var i=0,a=[];i+e<=t.size;)a.push(Oc(t,i,e)),i+=n;if(r)for(;i<t.size;){var s=i+e-t.size,u=Vn([Oc(t,i,e-s),Bn([s],o)]);a.push(u),i+=n}return 0===a.length?Nn([],[0,e]):Vn(a).as2D(a.length,e)}}),Il=wn({stft_:function(t,e,n,r,o){var i;void 0===o&&(o=Cl),null==r&&(i=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(i)/Math.log(2)))));for(var a=Rl(t,e,n),s=Ou(a,o(e)),u=[],c=0;c<a.shape[0];c++)u.push(dl(s.slice([c,0],[1,e]),r));return Vn(u)}}),Al=Object.freeze({hannWindow:Cl,hammingWindow:El,frame:Rl,stft:Il}),Sl=function(t,e,n){return void 0===n&&(n=1),u(this,void 0,void 0,(function(){var r,o,i,a,s,u,l,h,f,d,p,v,m,g;return c(this,(function(c){switch(c.label){case 0:return r=cn(t,"predictions","inTopK"),o=cn(e,"targets","inTopK"),x(r.rank>1,(function(){return"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank})),x(r.rank-1===o.rank,(function(){return"predictions rank should be 1 larger than targets rank, but got predictions rank "+r.rank+" and targets rank "+o.rank})),b(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),i=r.shape[r.shape.length-1],x(n>0&&n<=i,(function(){return"'k' passed to inTopK() must be > 0 && <= the predictions last dimension ("+i+"), but got "+n})),[4,r.data()];case 1:return a=c.sent(),[4,o.data()];case 2:for(s=c.sent(),u=[a.length/i,i],h=u[1],f=O("bool",l=u[0]),d=0;d<l;d++){for(p=d*h,v=a.subarray(p,p+h),m=[],g=0;g<v.length;g++)m.push({value:v[g],index:g});for(m.sort((function(t,e){return e.value-t.value})),f[d]=0,g=0;g<n;g++)if(m[g].index===s[d]){f[d]=1;break}}return t!==r&&r.dispose(),e!==o&&o.dispose(),[2,In(f,o.shape,"bool")]}}))}))};!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(wl||(wl={}));var kl=wn({absoluteDifference_:function(t,e,n,r){void 0===r&&(r=wl.SUM_BY_NONZERO_WEIGHTS);var o=cn(t,"labels","absoluteDifference"),i=cn(e,"predictions","absoluteDifference"),a=null;null!=n&&(a=cn(n,"weights","absoluteDifference")),b(o.shape,i.shape,"Error in absoluteDifference: ");var s=o.sub(i).abs();return Nl(s,a,r)}}),Nl=wn({computeWeightedLoss_:function(t,e,n){void 0===n&&(n=wl.SUM_BY_NONZERO_WEIGHTS);var r=cn(t,"losses","computeWeightedLoss"),o=null;null!=e&&(o=cn(e,"weights","computeWeightedLoss"));var i=null==o?r:r.mul(o);if(n===wl.NONE)return i;if(n===wl.SUM)return i.sum();if(n===wl.MEAN){if(null==o)return i.mean();var a=r.size/o.size,s=i.sum().div(o.sum());return a>1?s.div(Sn(a)):s}if(n===wl.SUM_BY_NONZERO_WEIGHTS){if(null==o)return i.sum().div(Sn(r.size));var u=o.mul(Mn(r.shape)).notEqual(Sn(0)).sum().toFloat();return i.sum().div(u)}throw Error("Unknown reduction: "+n)}}),Tl=wn({cosineDistance_:function(t,e,n,r,o){void 0===o&&(o=wl.SUM_BY_NONZERO_WEIGHTS);var i=cn(t,"labels","cosineDistance"),a=cn(e,"predictions","cosineDistance"),s=null;null!=r&&(s=cn(r,"weights","cosineDistance")),b(i.shape,a.shape,"Error in cosineDistance: ");var u=Sn(1).sub(i.mul(a).sum(n,!0));return Nl(u,s,o)}}),Dl=wn({hingeLoss_:function(t,e,n,r){void 0===r&&(r=wl.SUM_BY_NONZERO_WEIGHTS);var o=cn(t,"labels","hingeLoss"),i=cn(e,"predictions","hingeLoss"),a=null;null!=n&&(a=cn(n,"weights","hingeLoss")),b(o.shape,i.shape,"Error in hingeLoss: ");var s=Sn(1);o=Sn(2).mul(o).sub(s);var u=s.sub(o.mul(i)).relu();return Nl(u,a,r)}}),_l=wn({huberLoss_:function(t,e,n,r,o){void 0===r&&(r=1),void 0===o&&(o=wl.SUM_BY_NONZERO_WEIGHTS);var i=cn(t,"labels","huberLoss"),a=cn(e,"predictions","huberLoss"),s=null;null!=n&&(s=cn(n,"weights","huberLoss")),b(i.shape,a.shape,"Error in huberLoss: ");var u=Sn(r),c=a.sub(i).abs(),l=Nu(c,u),h=c.sub(l),f=Sn(.5).mul(l.square()).add(u.mul(h));return Nl(f,s,o)}}),Ol=wn({logLoss_:function(t,e,n,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=wl.SUM_BY_NONZERO_WEIGHTS);var i=cn(t,"labels","logLoss"),a=cn(e,"predictions","logLoss"),s=null;null!=n&&(s=cn(n,"weights","logLoss")),b(i.shape,a.shape,"Error in logLoss: ");var u=Sn(1),c=Sn(r),l=i.mul(a.add(c).log()).neg().sub(u.sub(i).mul(u.sub(a).add(c).log()));return Nl(l,s,o)}}),Ml=wn({meanSquaredError_:function(t,e,n,r){void 0===r&&(r=wl.SUM_BY_NONZERO_WEIGHTS);var o=cn(t,"labels","meanSquaredError"),i=cn(e,"predictions","meanSquaredError"),a=null;null!=n&&(a=cn(n,"weights","meanSquaredError")),b(o.shape,i.shape,"Error in meanSquaredError: ");var s=o.squaredDifference(i);return Nl(s,a,r)}}),Fl=wn({sigmoidCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=wl.SUM_BY_NONZERO_WEIGHTS);var i=cn(t,"multiClassLabels","sigmoidCrossEntropy"),a=cn(e,"logits","sigmoidCrossEntropy"),s=null;if(null!=n&&(s=cn(n,"weights","sigmoidCrossEntropy")),b(i.shape,a.shape,"Error in sigmoidCrossEntropy: "),r>0){var u=Sn(r),c=Sn(1),l=Sn(.5);i=i.mul(c.sub(u)).add(l.mul(u))}var h=function(t,e){var n=cn(t,"labels","sigmoidCrossEntropyWithLogits"),r=cn(e,"logits","sigmoidCrossEntropyWithLogits");b(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var o=r.relu(),i=r.mul(n),a=r.abs().neg().exp().log1p();return o.sub(i).add(a)}(i,a);return Nl(h,s,o)}}),Bl=wn({softmaxCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=wl.SUM_BY_NONZERO_WEIGHTS);var i=cn(t,"onehotLabels","softmaxCrossEntropy"),a=cn(e,"logits","softmaxCrossEntropy"),s=null;if(null!=n&&(s=cn(n,"weights","softmaxCrossEntropy")),b(i.shape,a.shape,"Error in softmaxCrossEntropy: "),r>0){var u=Sn(r),c=Sn(1),l=Sn(i.shape[1]);i=i.mul(c.sub(u)).add(u.div(l))}var h=function(t,e,n){if(void 0===n&&(n=-1),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+e.rank+" and dim was "+n);return Zr((function(t,e,r){var o=e.logSumExp([n],!0),i=e.toFloat().sub(o);return r([t,i]),{value:i.mul(t).neg().sum([n]),gradFunc:function(t,e){var r=e[0],o=e[1],i=pn(t.shape,[n]);return[t.reshape(i).mul(r.toFloat().sub(o.exp())),t.reshape(i).mul(o.exp().sub(r.toFloat()))]}}}))(t,e)}(i,a);return Nl(h,s,o)}}),Pl=Object.freeze({get Reduction(){return wl},absoluteDifference:kl,computeWeightedLoss:Nl,cosineDistance:Tl,hingeLoss:Dl,huberLoss:_l,logLoss:Ol,meanSquaredError:Ml,sigmoidCrossEntropy:Fl,softmaxCrossEntropy:Bl});function Ll(t,e){return void 0===e&&(e=!1),Ot.tidy((function(){if(2!==t.shape.length)throw new Error("qr2d() requires a 2D Tensor, but got a "+t.shape.length+"D Tensor.");for(var n=t.shape[0],r=t.shape[1],o=dr(n),i=t.clone(),a=Nn([[1]],[1,1]),s=a.clone(),u=n>=r?r:n,c=function(t){var e,u=i,c=s,l=o;e=Ot.tidy((function(){var e=i.slice([t,t],[n-t,1]),u=e.norm(),c=i.slice([t,t],[1,1]),l=Nn([[-1]]).where(c.greater(0),Nn([[1]])),h=c.sub(l.mul(u)),f=e.div(h);s=1===f.shape[0]?a.clone():a.concat(f.slice([1,0],[f.shape[0]-1,f.shape[1]]),0);var d=l.matMul(h).div(u).neg(),p=i.slice([t,0],[n-t,r]),v=d.mul(s);if(0===t)i=p.sub(v.matMul(s.transpose().matMul(p)));else{var m=p.sub(v.matMul(s.transpose().matMul(p)));i=i.slice([0,0],[t,r]).concat(m,0)}var g=o.slice([0,t],[n,o.shape[1]-t]);if(0===t)o=g.sub(g.matMul(s).matMul(v.transpose()));else{var y=g.sub(g.matMul(s).matMul(v.transpose()));o=o.slice([0,0],[n,t]).concat(y,1)}return[s,i,o]})),s=e[0],i=e[1],o=e[2],je([u,c,l])},l=0;l<u;++l)c(l);return!e&&n>r&&(o=o.slice([0,0],[n,r]),i=i.slice([0,0],[r,r])),[o,i]}))}var Wl=wn({gramSchmidt_:function(t){var e;if(Array.isArray(t)){e=!1,x(null!=t&&t.length>0,(function(){return"Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var n=t[0].shape[0],r=function(e){x(t[e].shape[0]===n,(function(){return"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[e].shape[0]+" vs. "+n+")"}))},o=1;o<t.length;++o)r(o)}else e=!0,t=$n(t,t.shape[0],0).map((function(t){return Sr(t,[0])}));x(t.length<=t[0].shape[0],(function(){return"Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+")."}));var i=[],a=t,s=function(t){i.push(Ot.tidy((function(){var e=a[t];if(t>0)for(var n=0;n<t;++n){var r=Kc(i[n].mulStrict(e)).mul(i[n]);e=e.sub(r)}return e.div(ol(e,"euclidean"))})))};for(o=0;o<t.length;++o)s(o);return e?kr(i,0):i}}),Ul=wn({qr_:function(t,e){if(void 0===e&&(e=!1),t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return Ll(t,e);var n=t.shape.slice(0,t.shape.length-2).reduce((function(t,e){return t*e})),r=Dr(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],i=[];return r.forEach((function(t){var n=Ll(t,e),r=n[0],a=n[1];o.push(r),i.push(a)})),[kr(o,0).reshape(t.shape),kr(i,0).reshape(t.shape)]}}),Vl=Object.freeze({gramSchmidt:Wl,qr:Ul});function zl(t,e,n,r,o){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY);var i=t.shape[0];return n=Math.min(n,i),x(0<=r&&r<=1,(function(){return"iouThreshold must be in [0, 1], but was '"+r+"'"})),x(2===t.rank,(function(){return"boxes must be a 2D tensor, but was of rank '"+t.rank+"'"})),x(4===t.shape[1],(function(){return"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]})),x(1===e.rank,(function(){return"scores must be a 1D tensor"})),x(e.shape[0]===i,(function(){return"scores has incompatible shape with boxes. Expected "+i+", but was "+e.shape[0]})),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o}}var Gl=wn({resizeBilinear_:function(t,e,n){void 0===n&&(n=!1);var r=cn(t,"images","resizeBilinear");x(3===r.rank||4===r.rank,(function(){return"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."})),x(2===e.length,(function(){return"Error in resizeBilinear: new shape must 2D, but got shape "+e+"."}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=e[0],s=e[1],u=Ot.runKernel((function(t,e){return e([o]),t.resizeBilinear(o,a,s,n)}),{batchImages:o},(function(t,e){return{batchImages:function(){return Ot.runKernel((function(r){return r.resizeBilinearBackprop(t,e[0],n)}),{})}}}));return i?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Hl=wn({resizeNearestNeighbor_:function(t,e,n){void 0===n&&(n=!1);var r=cn(t,"images","resizeNearestNeighbor");x(3===r.rank||4===r.rank,(function(){return"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."})),x(2===e.length,(function(){return"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."})),x("float32"===r.dtype||"int32"===r.dtype,(function(){return"`images` must have `int32` or `float32` as dtype"}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=e[0],s=e[1],u=Ot.runKernel((function(t,e){return e([o]),t.resizeNearestNeighbor(o,a,s,n)}),{batchImages:o},(function(t,e){return{batchImages:function(){return Ot.runKernel((function(r){return r.resizeNearestNeighborBackprop(t,e[0],n)}),{})}}}));return i?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),ql=wn({nonMaxSuppression_:function(t,e,n,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var i=cn(t,"boxes","nonMaxSuppression"),a=cn(e,"scores","nonMaxSuppression"),s=zl(i,a,n,r,o);return n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold,Ot.runKernel((function(t){return t.nonMaxSuppression(i,a,n,r,o)}),{$boxes:i})}}),$l=wn({cropAndResize_:function(t,e,n,r,o,i){var a=cn(t,"image","cropAndResize","float32"),s=cn(e,"boxes","cropAndResize","float32"),u=cn(n,"boxInd","cropAndResize","int32");o=o||"bilinear",i=i||0;var c=s.shape[0];return x(4===a.rank,(function(){return"Error in cropAndResize: image must be rank 4,but got rank "+a.rank+"."})),x(2===s.rank&&4===s.shape[1],(function(){return"Error in cropAndResize: boxes must be have size ["+c+",4] but had shape "+s.shape+"."})),x(1===u.rank&&u.shape[0]===c,(function(){return"Error in cropAndResize: boxInd must be have size ["+c+"] but had shape "+s.shape+"."})),x(2===r.length,(function(){return"Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."})),x(r[0]>=1&&r[1]>=1,(function(){return"cropSize must be atleast [1,1], but was "+r})),x("bilinear"===o||"nearest"===o,(function(){return"method must be bilinear or nearest, but was "+o})),Ot.runKernel((function(t,e){return t.cropAndResize(a,s,u,r,o,i)}),{$image:a,$boxes:s})}}),jl=Object.freeze({resizeBilinear:Gl,resizeNearestNeighbor:Hl,nonMaxSuppression:ql,nonMaxSuppressionAsync:function(t,e,n,r,o){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),u(this,void 0,void 0,(function(){var i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:return i=cn(t,"boxes","nonMaxSuppressionAsync"),a=cn(e,"scores","nonMaxSuppressionAsync"),s=zl(i,a,n,r,o),n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold,[4,Promise.all([i.data(),a.data()])];case 1:return u=c.sent(),l=u[0],h=u[1],f=No(l,h,n,r,o),i!==t&&i.dispose(),a!==e&&a.dispose(),[2,f]}}))}))},cropAndResize:$l}),Kl=wn({matMul_:function(t){var e,n=t.a,r=t.b,o=t.transposeA,i=void 0!==o&&o,a=t.transposeB,s=void 0!==a&&a,u=t.bias,c=t.activation,l=void 0===c?"linear":c,h=t.preluActivationWeights,f=cn(n,"a","fused matMul"),d=cn(r,"b","fused matMul");e=At(f,d),f=e[0],d=e[1];var p=i?f.shape[f.rank-2]:f.shape[f.rank-1],v=s?d.shape[d.rank-1]:d.shape[d.rank-2],m=i?f.shape[f.rank-1]:f.shape[f.rank-2],g=s?d.shape[d.rank-2]:d.shape[d.rank-1],y=f.shape.slice(0,-2),b=d.shape.slice(0,-2),w=E(y),C=E(b);x(f.rank>=2&&d.rank>=2&&f.rank===d.rank,(function(){return"Error in fused matMul: inputs must have the same rank of at least 2, got ranks "+f.rank+" and "+d.rank+"."})),x(R(y,b),(function(){return"Error in fused matMul: outer dimensions ("+y+") and ("+b+") of Tensors with shapes "+f.shape+" and "+d.shape+" must match."})),x(p===v,(function(){return"Error in fused matMul: inner shapes ("+p+") and ("+v+") of Tensors with shapes "+f.shape+" and "+d.shape+" and transposeA="+i+" and transposeB="+s+" must match."}));var I,A,S=f.shape.slice(0,-2).concat([m,g]),k=i?f.as3D(w,p,m):f.as3D(w,m,p),N=s?d.as3D(C,g,v):d.as3D(C,v,g);null!=u&&so(S,(I=At(I=cn(u,"bias","fused matMul"),f)[0]).shape),null!=h&&(A=cn(h,"prelu weights","fused matMul"));var T={$a:k,$b:N};return null!=u&&(T.$bias=I),null!=h&&(T.$preluActivationWeights=A),Ot.runKernel((function(t,e){var n=t.fusedBatchMatMul({a:k,b:N,transposeA:i,transposeB:s,bias:I,activation:l,preluActivationWeights:A});return e([k,N,n]),n}),T,(function(t,e){var n,r=e[0],o=e[1],a=e[2];if(null==l||"linear"===l)n=t;else{if("relu"!==l)throw new Error("Gradient for activation "+l+" has not been implemented yet.");n=t.mul(a.step())}var c={};return null!=u&&(c={$bias:function(){var t=n,e=ao(I.shape,n.shape);return e.length>0&&(t=t.sum(e)),t.reshape(I.shape)}}),i||s?!i&&s?Object.assign({$a:function(){return n.matMul(o,!1,!1)},$b:function(){return n.matMul(r,!0,!1)}},c):i&&!s?Object.assign({$a:function(){return o.matMul(n,!1,!0)},$b:function(){return r.matMul(n,!1,!1)}},c):Object.assign({$a:function(){return o.matMul(n,!0,!0)},$b:function(){return n.matMul(r,!0,!0)}},c):Object.assign({$a:function(){return n.matMul(o,!1,!0)},$b:function(){return r.matMul(n,!0,!1)}},c)})).reshape(S)}}),Xl=wn({conv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,i=t.dataFormat,a=void 0===i?"NHWC":i,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?"linear":h,d=t.preluActivationWeights,p=cn(e,"x","conv2d"),v=cn(n,"filter","conv2d"),m=p,g=!1;3===p.rank&&(g=!0,m=p.as4D(1,p.shape[0],p.shape[1],p.shape[2])),x(4===m.rank,(function(){return"Error in fused conv2d: input must be rank 4, but got rank "+m.rank+"."})),x(4===v.rank,(function(){return"Error in fused conv2d: filter must be rank 4, but got rank "+v.rank+"."})),null!=c&&x(I(o),(function(){return"Error in fused conv2d: pad must be an integer when using, dimRoundingMode "+c+" but got pad "+o+"."})),x(m.shape[3]===v.shape[2],(function(){return"Error in conv2d: depth of input ("+m.shape[3]+") must match input depth for filter "+v.shape[2]+"."})),x(xo(r,u),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),x("NHWC"===a,(function(){return"Error in conv2d: got dataFormat of "+a+" but only NHWC is currently supported."}));var y,b,w=lo(m.shape,v.shape,r,u,o,c);null!=l&&(y=At(y=cn(l,"bias","fused conv2d"),p)[0],so(w.outShape,y.shape)),null!=d&&(b=cn(d,"prelu weights","fused conv2d"));var C={x:m,$filter:v};null!=l&&(C.$bias=y),null!=d&&(C.$preluActivationWeights=b);var E=Ot.runKernel((function(t,e){var n=t.fusedConv2d({input:m,filter:v,convInfo:w,bias:y,activation:f,preluActivationWeights:b});return e([v,m,n]),n}),C,(function(t,e){var n,i=e,a=i[0],s=i[1],c=i[2];if(null==f||"linear"===f)n=t;else{if("relu"!==f)throw new Error("Gradient for activation "+f+" has not been implemented yet.");n=t.mul(c.step())}x(yo(u),(function(){return"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+u+"'"}));var h={};return null!=l&&(h={$bias:function(){var t=n,e=ao(y.shape,n.shape);return e.length>0&&(t=t.sum(e)),t.reshape(y.shape)}}),Object.assign({x:function(){return hc(s.shape,n,a,r,o)},$filter:function(){return lc(s,n,a.shape,r,o)}},h)}));return g?E.as3D(E.shape[1],E.shape[2],E.shape[3]):E}}),Yl=wn({depthwiseConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,i=(t.dataFormat,t.dilations),a=void 0===i?[1,1]:i,s=t.dimRoundingMode,u=t.bias,c=t.activation,l=void 0===c?"linear":c,h=t.preluActivationWeights,f=cn(e,"x","depthwiseConv2d"),d=cn(n,"filter","depthwiseConv2d"),p=f,v=!1;3===f.rank&&(v=!0,p=f.as4D(1,f.shape[0],f.shape[1],f.shape[2])),x(4===p.rank,(function(){return"Error in fused depthwiseConv2d: input must be rank 4, but got rank "+p.rank+"."})),x(4===d.rank,(function(){return"Error in fused depthwiseConv2d: filter must be rank 4, but got rank "+d.rank+"."})),x(p.shape[3]===d.shape[2],(function(){return"Error in fused depthwiseConv2d: number of input channels ("+p.shape[3]+") must match the inChannels dimension in filter "+d.shape[2]+"."})),null==a&&(a=[1,1]),x(xo(r,a),(function(){return"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+a+"'"})),null!=s&&x(I(o),(function(){return"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode "+s+" but got pad "+o+"."}));var m,g,y=lo(p.shape,d.shape,r,a,o,s,!0);null!=u&&(m=At(m=cn(u,"bias","fused conv2d"),f)[0],so(y.outShape,m.shape)),null!=h&&(g=cn(h,"prelu weights","fused depthwiseConv2d"));var b={x:p,$filter:d};null!=u&&(b.$bias=m),null!=h&&(b.$preluActivationWeights=g);var w=Ot.runKernel((function(t,e){var n=t.fusedDepthwiseConv2D({input:p,filter:d,convInfo:y,bias:m,activation:l,preluActivationWeights:g});return e([p,d,n]),n}),b,(function(t,e){x(yo(a),(function(){return"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+a+"'"}));var n,r=e[0],o=e[1],i=e[2];if(null==l||"linear"===l)n=t;else{if("relu"!==l)throw new Error("Gradient for activation "+l+" has not been implemented yet.");n=t.mul(i.step())}var s={};return null!=u&&(s={$bias:function(){var t=n,e=ao(m.shape,n.shape);return e.length>0&&(t=t.sum(e)),t.reshape(m.shape)}}),Object.assign({x:function(){return dc(r.shape,n,o,y)},$filter:function(){return pc(r,n,o.shape,y)}},s)}));return v?w.as3D(w.shape[1],w.shape[2],w.shape[3]):w}}),Ql=Object.freeze({matMul:Kl,conv2d:Xl,depthwiseConv2d:Yl}),Jl=Object.freeze({image:jl,linalg:Vl,losses:Pl,spectral:vl,fused:Ql,signal:Al,conv1d:sc,conv2d:uc,conv3d:cc,depthwiseConv2d:fc,separableConv2d:vc,conv2dTranspose:mc,conv3dTranspose:gc,op:wn,batchNormalization2d:au,batchNormalization3d:su,batchNormalization4d:uu,batchNormalization:cu,batchNorm:lu,batchNorm2d:hu,batchNorm3d:fu,batchNorm4d:du,booleanMaskAsync:rc,complex:Cn,real:En,imag:Rn,concat:Vn,concat1d:zn,concat2d:Gn,concat3d:Hn,concat4d:qn,split:$n,matMul:yc,dot:xc,outerProduct:bc,reverse:wc,reverse1d:Cc,reverse2d:Ec,reverse3d:Rc,reverse4d:Ic,maxPool:kc,avgPool:Nc,pool:Tc,maxPool3d:Dc,avgPool3d:_c,slice:Oc,slice1d:Mc,slice2d:Fc,slice3d:Bc,slice4d:Pc,abs:xs,acos:bs,acosh:ws,asin:Cs,asinh:Es,atan:Rs,atanh:Is,ceil:As,clipByValue:Ss,cos:ks,cosh:Ns,erf:Ts,exp:Ds,expm1:_s,floor:Os,log:Ms,log1p:Fs,logSigmoid:Bs,neg:Ps,reciprocal:Ls,round:Ws,rsqrt:Us,sigmoid:Vs,sign:zs,isNaN:Gs,isInf:Hs,isFinite:qs,sin:$s,sinh:js,softplus:Ks,sqrt:Xs,square:Ys,step:Qs,tan:Js,tanh:Zs,all:Wc,any:Uc,argMax:Vc,argMin:zc,logSumExp:Gc,max:Hc,mean:qc,min:$c,moments:jc,sum:Kc,prod:Xc,equal:Vu,equalStrict:zu,greater:Gu,greaterEqual:Hu,greaterEqualStrict:qu,greaterStrict:$u,less:ju,lessEqual:Ku,lessEqualStrict:Xu,lessStrict:Yu,notEqual:Qu,notEqualStrict:Ju,add:bu,addN:wu,addStrict:Cu,atan2:Eu,div:Ru,divStrict:Iu,floorDiv:Au,maximum:Su,maximumStrict:ku,minimum:Nu,minimumStrict:Tu,mod:Du,modStrict:_u,mul:Ou,mulStrict:Mu,pow:Fu,powStrict:Bu,squaredDifference:Pu,squaredDifferenceStrict:Lu,sub:Wu,subStrict:Uu,elu:Yc,leakyRelu:Qc,prelu:Jc,relu:Zc,relu6:tl,selu:el,logicalAnd:pu,logicalNot:vu,logicalOr:mu,logicalXor:gu,where:yu,whereAsync:xu,buffer:ir,print:ar,batchToSpaceND:sr,cast:ur,clone:cr,cumsum:lr,depthToSpace:hr,expandDims:fr,eye:dr,multinomial:pr,oneHot:vr,pad:mr,pad1d:gr,pad2d:yr,pad3d:xr,pad4d:br,rand:wr,randomNormal:Cr,randomGamma:Er,randomUniform:Rr,reshape:Ir,spaceToBatchND:Ar,squeeze:Sr,stack:kr,tile:Nr,truncatedNormal:Tr,unstack:Dr,setdiff1dAsync:_r,fill:Bn,linspace:Pn,ones:Mn,range:Ln,scalar:Sn,tensor:In,tensor1d:kn,tensor2d:Nn,tensor3d:Tn,tensor4d:Dn,tensor5d:_n,tensor6d:On,zeros:Fn,onesLike:Wn,zerosLike:Un,transpose:nl,softmax:eo,logSoftmax:no,localResponseNormalization:rl,norm:ol,gather:ec,unsortedSegmentSum:nc,basicLSTMCell:il,multiRNNCell:al,movingAverage:sl,stridedSlice:ul,topk:cl,scatterND:ll,fft:hl,ifft:fl,rfft:dl,irfft:pl,sparseToDense:ml,gatherND:gl,diag:yl,dropout:xl,hannWindow:Cl,hammingWindow:El,frame:Rl,stft:Il,inTopKAsync:Sl});function Zl(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error("Activation "+n+" has not been implemented for the CPU backend.")}var th=function(){function t(){if(this.blockSize=48,this.firstUse=!0,f.get("IS_BROWSER")){var t="undefined"!=typeof OffscreenCanvas?new OffscreenCanvas(300,150):"undefined"!=typeof document?document.createElement("canvas"):null;null!==t&&(this.fromPixels2DContext=t.getContext("2d"))}this.data=new ro(this,Ot)}return t.prototype.register=function(t,e,n){if(this.firstUse&&(this.firstUse=!1,f.get("IS_NODE")&&an("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n")),this.data.has(t))throw new Error("Data buffer is already registered");this.data.set(t,{dtype:n})},t.prototype.write=function(t,e){if(null==e)throw new Error("MathBackendCPU.write(): values can not be null");this.data.get(t).values=e},t.prototype.fromPixels=function(t,e){if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var n,r,o=t.data instanceof Uint8Array,i="undefined"!=typeof ImageData&&t instanceof ImageData,a="undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement,s="undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement,u=a?[t.videoWidth,t.videoHeight]:[t.width,t.height],c=u[0],l=u[1];if(f.get("IS_NODE")&&null==t.getContext)throw new Error("When running in node, pixels must be an HTMLCanvasElement like the one returned by the `canvas` npm package");if(null!=t.getContext)n=t.getContext("2d").getImageData(0,0,c,l).data;else if(i||o)n=t.data;else{if(!s&&!a)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);if(null==this.fromPixels2DContext)throw new Error("Can't read pixels from HTMLImageElement outside the browser.");this.fromPixels2DContext.canvas.width=c,this.fromPixels2DContext.canvas.height=l,this.fromPixels2DContext.drawImage(t,0,0,c,l),n=this.fromPixels2DContext.getImageData(0,0,c,l).data}if(4===e)r=new Int32Array(n);else{var h=c*l;r=new Int32Array(h*e);for(var d=0;d<h;d++)for(var p=0;p<e;++p)r[d*e+p]=n[4*d+p]}return Tn(r,[l,c,e],"int32")},t.prototype.read=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.readSync(t)]}))}))},t.prototype.readSync=function(t){var e=this.data.get(t),n=e.dtype,r=e.complexTensors;return"complex64"===n?Io(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},t.prototype.bufferSync=function(t){var e=this.readSync(t.dataId),n=e;if("string"===t.dtype)try{n=e.map((function(t){return et(t)}))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return ir(t.shape,t.dtype,n)},t.prototype.disposeData=function(t){if(this.data.has(t)){var e=this.data.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}},t.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return e=J(),t(),[2,{kernelMs:J()-e}]}))}))},t.prototype.memory=function(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}},t.prototype.complex=function(t,e){var n=vt.make(t.shape,{},"complex64");return this.data.get(n.dataId).complexTensors={real:Ot.keep(t.clone()),imag:Ot.keep(e.clone())},n},t.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},t.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},t.prototype.assertNotComplex=function(t,e){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&x("complex64"!==t.dtype,(function(){return e+" does not support complex64 tensors."}))}))},t.prototype.slice=function(t,e,n){if(this.assertNotComplex(t,"slice"),$r(t.shape,e,n)){var r=jr(e,t.strides),o=E(n);return In(this.readSync(t.dataId).subarray(r,r+o),n,t.dtype)}for(var i=ir(n,t.dtype),a=this.bufferSync(t),s=0;s<i.size;++s){var u=i.indexToLoc(s).map((function(t,n){return t+e[n]}));i.values[s]=a.get.apply(a,u)}return i.toTensor()},t.prototype.stridedSlice=function(t,e,n,r){this.assertNotComplex(t,"stridedSlice");var o=Gr(e,n,r);if(o.some((function(t){return 0===t})))return In([],o);for(var i=ir(o,t.dtype),a=this.bufferSync(t),s=0;s<i.size;s++){for(var u=i.indexToLoc(s),c=new Array(u.length),l=0;l<c.length;l++)c[l]=u[l]*r[l]+e[l];i.set.apply(i,[a.get.apply(a,c)].concat(u))}return i.toTensor()},t.prototype.diag=function(t){for(var e=this.readSync(t.dataId),n=ir([t.size,t.size],t.dtype),r=n.values,o=0;o<e.length;o++)r[o*t.size+o]=e[o];return n.toTensor()},t.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==e&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(i=0;i<u.length;i++)a[e]=i,u[i]=this.slice(t,a,s).reshape(r);return u},t.prototype.reverse=function(t,e){this.assertNotComplex(t,"reverse");for(var n=ir(t.shape,t.dtype),r=this.bufferSync(t),o=function(o){var i=n.indexToLoc(o),a=i.slice();e.forEach((function(e){return a[e]=t.shape[e]-1-a[e]})),n.set.apply(n,[r.get.apply(r,a)].concat(i))},i=0;i<n.size;i++)o(i);return n.toTensor()},t.prototype.concat=function(t,e){var n=this;if("complex64"===t[0].dtype){var r=t.map((function(t){return En(t)})),o=t.map((function(t){return Rn(t)}));return Cn(this.concat(r,e),this.concat(o,e))}var i=t.map((function(t){var n=E(t.shape.slice(e));return t.as2D(-1,n)})),a=bn(i.map((function(t){return t.shape})),1),s=ir(a,t[0].dtype).values;if(1===i[0].shape[0]){var u=0;i.forEach((function(t){s.set(n.readSync(t.dataId),u),u+=t.size}))}else{var c=0;i.forEach((function(t){for(var e=n.readSync(t.dataId),r=0,o=0;o<t.shape[0];++o)for(var i=o*a[1]+c,u=0;u<t.shape[1];++u)s[i+u]=e[r++];c+=t.shape[1]}))}var l=bn(t.map((function(t){return t.shape})),e);return In(s,l,t[0].dtype)},t.prototype.neg=function(t){return this.assertNotComplex(t,"neg"),this.multiply(Sn(-1),t)},t.prototype.add=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t+n,imag:e+r}})):this.broadcastedBinaryOp(t,e,Rt(t.dtype,e.dtype),(function(t,e){return t+e}))},t.prototype.addN=function(t){var e=this;this.assertNotComplex(t,"addN");for(var n=t.map((function(t){return e.readSync(t.dataId)})),r=ir(t[0].shape,t[0].dtype),o=r.values,i=0;i<t.length;i++)for(var a=n[i],s=0;s<o.length;s++)o[s]+=a[s];return r.toTensor()},t.prototype.subtract=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t-n,imag:e-r}})):this.broadcastedBinaryOp(t,e,Rt(t.dtype,e.dtype),(function(t,e){return t-e}))},t.prototype.pow=function(t,e){return this.assertNotComplex([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.pow(t,e)}))},t.prototype.batchMatMul=function(t,e,n,r){this.assertNotComplex([t,e],"matMul");for(var o=n?t.shape[1]:t.shape[2],i=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],s=t.shape[0],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],h=l[0],f=l[1],d=l[2],p=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],v=p[0],m=p[1],g=p[2],y=i*a,x=ir([s,i,a],t.dtype),b=x.values,w=this.blockSize,C=0;C<s;C++)for(var E=0;E<i;E+=w)for(var R=0;R<a;R+=w)for(var I=0;I<o;I+=w)for(var A=Math.min(E+w,i),S=Math.min(R+w,a),k=Math.min(I+w,o),N=E;N<A;N++)for(var T=R;T<S;T++){for(var D=0,_=I;_<k;_++)D+=u[C*h+N*f+_*d]*c[_*v+T*m+C*g];b[C*y+(N*a+T)]+=D}return x.toTensor()},t.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=this.batchMatMul(e,n,r,o);return i&&(u=this.add(u,i)),a&&(u=Zl(this,u,a,s)),u},t.prototype.multiply=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t*n-e*r,imag:t*r+e*n}})):this.broadcastedBinaryOp(t,e,Rt(t.dtype,e.dtype),(function(t,e){return t*e}))},t.prototype.realDivide=function(t,e){return this.assertNotComplex([t,e],"realDivide"),this.broadcastedBinaryOp(t,e,"float32",(function(t,e){return t/e}))},t.prototype.floorDiv=function(t,e){return this.assertNotComplex([t,e],"floorDiv"),this.broadcastedBinaryOp(t,e,"int32",(function(t,e){return Math.floor(t/e)}))},t.prototype.sum=function(t,e){this.assertNotComplex(t,"sum"),vn("sum",e,t.rank);for(var n=dn(t.shape,e),r=n[0],o=n[1],i=Fn(r,Rt(t.dtype,"int32")),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=0,f=0;f<a;++f)h+=u[l+f];s[c]=h}return i},t.prototype.prod=function(t,e){this.assertNotComplex(t,"sum");for(var n=dn(t.shape,e),r=n[0],o=n[1],i=Fn(r,Rt(t.dtype,"int32")),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=1,f=0;f<a;++f)h*=u[l+f];s[c]=h}return i},t.prototype.unsortedSegmentSum=function(t,e,n){this.assertNotComplex(t,"unsortedSegmentSum");for(var r=[],o=t.rank-e.rank,i=0;i<o;++i)e=e.expandDims(i+1);for(i=0;i<n;++i){var a=Sn(i,"int32"),s=Vu(a,e).asType("float32").mul(t).sum(0);r.push(s)}return kr(r)},t.prototype.argMin=function(t,e){this.assertNotComplex(t,"argMin");var n=[e];vn("argMin",n,t.rank);for(var r=dn(t.shape,n),o=r[0],i=r[1],a=Fn(o,"int32"),s=E(i),u=this.readSync(a.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v<f&&(f=v,d=p)}u[l]=d}return a},t.prototype.argMax=function(t,e){this.assertNotComplex(t,"argMax");var n=[e];vn("argMax",n,t.rank);for(var r=dn(t.shape,n),o=r[0],i=r[1],a=Fn(o,"int32"),s=E(i),u=this.readSync(a.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v>f&&(f=v,d=p)}u[l]=d}return a},t.prototype.cumsum=function(t,e,n,r){if(this.assertNotComplex(t,"cumsum"),e!==t.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis="+(t.rank-1)+" but got axis="+e);for(var o=Rt(t.dtype,"int32"),i=Fn(t.shape,o),a=this.readSync(i.dataId),s=this.readSync(t.dataId),u=t.shape[t.rank-1],c=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},l=0;l<s.length;l+=u)for(var h=0;h<u;h++){var f=c(l,h);if(0===h)a[f]=n?0:s[f];else{var d=c(l,h-1);a[f]=n?s[d]+a[d]:s[f]+a[d]}}return i},t.prototype.equal=function(t,e){return this.assertNotComplex([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t===e?1:0}))},t.prototype.notEqual=function(t,e){return this.assertNotComplex([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t!==e?1:0}))},t.prototype.less=function(t,e){return this.assertNotComplex([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<e?1:0}))},t.prototype.lessEqual=function(t,e){return this.assertNotComplex([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<=e?1:0}))},t.prototype.greater=function(t,e){return this.assertNotComplex([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>e?1:0}))},t.prototype.greaterEqual=function(t,e){return this.assertNotComplex([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>=e?1:0}))},t.prototype.logicalNot=function(t){this.assertNotComplex(t,"logicalNot");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return vt.make(t.shape,{values:n},"bool")},t.prototype.logicalAnd=function(t,e){return this.assertNotComplex([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t&&e}))},t.prototype.logicalOr=function(t,e){return this.assertNotComplex([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t||e}))},t.prototype.select=function(t,e,n){this.assertNotComplex([t,e,n],"select");for(var r=this.readSync(t.dataId),o=this.readSync(e.dataId),i=this.readSync(n.dataId),a=Fn(e.shape,Rt(e.dtype,n.dtype)),s=this.readSync(a.dataId),u=0,c=0===t.rank||t.rank>1||1===e.rank?1:E(e.shape.slice(1)),l=0;l<r.length;l++)for(var h=0;h<c;h++)1===r[l]?s[u++]=o[l]:s[u++]=i[l];return a},t.prototype.where=function(t){this.assertNotComplex([t],"where");var e=this.readSync(t.dataId);return Mo(t.shape,e)},t.prototype.topk=function(t,e,n){return this.assertNotComplex(t,"topk"),Oo(this.readSync(t.dataId),t.shape,t.dtype,e)},t.prototype.min=function(t,e){this.assertNotComplex(t,"min"),vn("min",e,t.rank);for(var n=dn(t.shape,e),r=n[0],o=n[1],i=Fn(r,t.dtype),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var d=u[l+f];d<h&&(h=d)}s[c]=h}return i},t.prototype.minimum=function(t,e){return this.assertNotComplex([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.min(t,e)}))},t.prototype.mod=function(t,e){return this.assertNotComplex([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))},t.prototype.max=function(t,e){this.assertNotComplex(t,"max"),vn("max",e,t.rank);for(var n=dn(t.shape,e),r=n[0],o=n[1],i=Fn(r,t.dtype),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var d=u[l+f];d>h&&(h=d)}s[c]=h}return i},t.prototype.maximum=function(t,e){return this.assertNotComplex([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.max(t,e)}))},t.prototype.all=function(t,e){this.assertNotComplex(t,"all"),vn("all",e,t.rank);for(var n=dn(t.shape,e),r=n[0],o=n[1],i=Fn(r,t.dtype),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var d=u[l+f];h=h&&d}s[c]=h}return i},t.prototype.any=function(t,e){this.assertNotComplex(t,"any"),vn("any",e,t.rank);for(var n=dn(t.shape,e),r=n[0],o=n[1],i=Fn(r,t.dtype),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var d=u[l+f];h=h||d}s[c]=h}return i},t.prototype.squaredDifference=function(t,e){return this.assertNotComplex([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t-e;return n*n}))},t.prototype.ceil=function(t){this.assertNotComplex(t,"ceil");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return vt.make(t.shape,{values:n})},t.prototype.floor=function(t){this.assertNotComplex(t,"floor");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return vt.make(t.shape,{values:n})},t.prototype.sign=function(t){this.assertNotComplex(t,"x");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return vt.make(t.shape,{values:n})},t.prototype.isNaN=function(t){this.assertNotComplex(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isNaN(e[r])&&(n[r]=1);return vt.make(t.shape,{values:n},"bool")},t.prototype.isInf=function(t){this.assertNotComplex(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Math.abs(e[r])===1/0&&(n[r]=1);return vt.make(t.shape,{values:n},"bool")},t.prototype.isFinite=function(t){this.assertNotComplex(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isFinite(e[r])&&(n[r]=1);return vt.make(t.shape,{values:n},"bool")},t.prototype.round=function(t){this.assertNotComplex(t,"round");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=Math.floor(e[r]);e[r]-o<.5?n[r]=Math.floor(e[r]):e[r]-o>.5?n[r]=Math.ceil(e[r]):n[r]=o%2==0?o:o+1}return vt.make(t.shape,{values:n})},t.prototype.exp=function(t){this.assertNotComplex(t,"exp");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return vt.make(t.shape,{values:n})},t.prototype.expm1=function(t){this.assertNotComplex(t,"expm1");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return vt.make(t.shape,{values:n})},t.prototype.log=function(t){this.assertNotComplex(t,"log");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log(o)}return vt.make(t.shape,{values:n})},t.prototype.log1p=function(t){this.assertNotComplex(t,"log1p");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log1p(o)}return vt.make(t.shape,{values:n})},t.prototype.sqrt=function(t){this.assertNotComplex(t,"sqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.sqrt(o)}return vt.make(t.shape,{values:n})},t.prototype.rsqrt=function(t){this.assertNotComplex(t,"rsqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=1/Math.sqrt(o)}return vt.make(t.shape,{values:n})},t.prototype.square=function(t){this.assertNotComplex(t,"square");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=o*o}return vt.make(t.shape,{values:n})},t.prototype.reciprocal=function(t){this.assertNotComplex(t,"reciprocal");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return vt.make(t.shape,{values:n})},t.prototype.linear=function(t){return t},t.prototype.relu=function(t){this.assertNotComplex(t,"relu");for(var e=Fn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.max(0,r[o]);return e},t.prototype.relu6=function(t){this.assertNotComplex(t,"relu");for(var e=Fn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.min(Math.max(0,r[o]),6);return e},t.prototype.prelu=function(t,e){return this.assertNotComplex([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return t<0?e*t:t}))},t.prototype.elu=function(t){this.assertNotComplex(t,"elu");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?o:Math.exp(o)-1}return vt.make(t.shape,{values:e})},t.prototype.eluDer=function(t,e){this.assertNotComplex([t,e],"eluDer");for(var n=new Float32Array(e.size),r=this.readSync(e.dataId),o=this.readSync(t.dataId),i=0;i<r.length;++i){var a=r[i];n[i]=a>=1?o[i]:o[i]*(a+1)}return vt.make(e.shape,{values:n})},t.prototype.selu=function(t){this.assertNotComplex(t,"selu");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?1.0507009873554805*o:1.7580993408473768*(Math.exp(o)-1)}return vt.make(t.shape,{values:e})},t.prototype.clip=function(t,e,n){this.assertNotComplex(t,"clip");for(var r=new Float32Array(t.size),o=this.readSync(t.dataId),i=0;i<o.length;++i){var a=o[i];r[i]=a>n?n:a<e?e:a}return vt.make(t.shape,{values:r})},t.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return vt.make(t.shape,{values:e})},t.prototype.complexAbs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<t.size;++r){var o=n[2*r],i=n[2*r+1];e[r]=Math.hypot(o,i)}return vt.make(t.shape,{values:e})},t.prototype.int=function(t){this.assertNotComplex(t,"int");for(var e=new Int32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=n[r];return vt.make(t.shape,{values:e},"int32")},t.prototype.sigmoid=function(t){this.assertNotComplex(t,"sigmoid");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return vt.make(t.shape,{values:e})},t.prototype.softplus=function(t){this.assertNotComplex(t,"softplus");for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i,a=r[o]>-e,s=r[o]<e,u=Math.exp(r[o]);i=s?u:a?r[o]:Math.log(1+u),n[o]=i}return vt.make(t.shape,{values:n})},t.prototype.sin=function(t){this.assertNotComplex(t,"sin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return vt.make(t.shape,{values:e})},t.prototype.cos=function(t){this.assertNotComplex(t,"cos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return vt.make(t.shape,{values:e})},t.prototype.tan=function(t){this.assertNotComplex(t,"tan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return vt.make(t.shape,{values:e})},t.prototype.asin=function(t){this.assertNotComplex(t,"asin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return vt.make(t.shape,{values:e})},t.prototype.acos=function(t){this.assertNotComplex(t,"acos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return vt.make(t.shape,{values:e})},t.prototype.atan=function(t){this.assertNotComplex(t,"atan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return vt.make(t.shape,{values:e})},t.prototype.atan2=function(t,e){return this.assertNotComplex([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.atan2(t,e)}))},t.prototype.sinh=function(t){this.assertNotComplex(t,"sinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return vt.make(t.shape,{values:e})},t.prototype.cosh=function(t){this.assertNotComplex(t,"cosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return vt.make(t.shape,{values:e})},t.prototype.tanh=function(t){this.assertNotComplex(t,"tanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=A(n[r]);return vt.make(t.shape,{values:e})},t.prototype.asinh=function(t){this.assertNotComplex(t,"asinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return vt.make(t.shape,{values:e})},t.prototype.acosh=function(t){this.assertNotComplex(t,"acosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return vt.make(t.shape,{values:e})},t.prototype.atanh=function(t){this.assertNotComplex(t,"atanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return vt.make(t.shape,{values:e})},t.prototype.erf=function(t){this.assertNotComplex(t,"erf");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=Math.sign(n[r]),i=Math.abs(n[r]),a=1/(1+.3275911*i);e[r]=o*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-i*i))}return vt.make(t.shape,{values:e})},t.prototype.step=function(t,e){void 0===e&&(e=0),this.assertNotComplex(t,"step");for(var n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i=r[o];isNaN(i)?n[o]=NaN:n[o]=i>0?1:e}return vt.make(t.shape,{values:n})},t.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights,s=this.conv2d(e,n,r);return o&&(s=this.add(s,o)),i&&(s=Zl(this,s,i,a)),s},t.prototype.conv2d=function(t,e,n){this.assertNotComplex([t,e],"conv2d");for(var r=n.filterHeight,o=n.filterWidth,i=n.dilationHeight,a=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c="channelsLast"===n.dataFormat,l=ir(n.outShape,t.dtype),h=t.strides[0],f=c?t.strides[1]:t.strides[2],d=c?t.strides[2]:1,p=c?1:t.strides[1],v=l.strides[0],m=c?l.strides[1]:l.strides[2],g=c?l.strides[2]:1,y=c?1:l.strides[1],x=this.readSync(t.dataId),b=this.readSync(e.dataId),w=l.values,C=0;C<n.batchSize;++C)for(var E=C*h,R=C*v,I=0;I<n.outHeight;++I)for(var A=R+I*m,S=I*n.strideHeight-u,k=0;k<r;k++){var N=S+k*i;if(!(N<0||N>=n.inHeight))for(var T=k*e.strides[0],D=E+N*f,_=0;_<n.outWidth;++_)for(var O=A+_*g,M=_*n.strideWidth-s,F=0;F<o;F++){var B=M+F*a;if(!(B<0||B>=n.inWidth))for(var P=D+B*d,L=T+F*e.strides[1],W=0;W<n.inChannels;++W){for(var U=x[P+W*p],V=0;V<n.outChannels;++V)w[O+V*y]+=U*b[L+V];L+=n.outChannels}}}return l.toTensor()},t.prototype.conv3d=function(t,e,n){for(var r=n.filterDepth,o=n.filterHeight,i=n.filterWidth,a=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,h=n.padInfo.top,f=ir(n.outShape,t.dtype),d=this.readSync(t.dataId),p=this.readSync(e.dataId),v=f.values,m=0;m<n.batchSize;++m)for(var g=m*t.strides[0],y=m*f.strides[0],x=0;x<n.outDepth;++x)for(var b=y+x*f.strides[1],w=x*n.strideDepth-c,C=0;C<r;C++){var E=w+C*a;if(!(E<0||E>=n.inDepth))for(var R=C*e.strides[0],I=g+E*t.strides[1],A=0;A<n.outHeight;++A)for(var S=b+A*f.strides[2],k=A*n.strideHeight-h,N=0;N<o;N++){var T=k+N*s;if(!(T<0||T>=n.inHeight))for(var D=R+N*e.strides[1],_=I+T*t.strides[2],O=0;O<n.outWidth;++O)for(var M=S+O*n.outChannels,F=O*n.strideWidth-l,B=0;B<i;B++){var P=F+B*u;if(!(P<0||P>=n.inWidth))for(var L=D+B*e.strides[2],W=_+P*n.inChannels,U=L,V=0;V<n.inChannels;++V){for(var z=d[W+V],G=0;G<n.outChannels;++G)v[M+G]+=z*p[U+G];U+=n.outChannels}}}}return f.toTensor()},t.prototype.conv2dDerInput=function(t,e,n){this.assertNotComplex([t,e],"conv2dDerInput");for(var r=ir(n.inShape,"float32"),o=r.values,i=this.readSync(t.dataId),a=this.readSync(e.dataId),s=e.strides,u=s[0],c=s[1],l=s[2],h=n.batchSize,f=n.filterHeight,d=n.filterWidth,p=n.inChannels,v=n.inHeight,m=n.inWidth,g=n.outChannels,y=n.outHeight,x=n.outWidth,b=n.strideHeight,w=n.strideWidth,C=n.dataFormat,E=f-1-n.padInfo.top,R=d-1-n.padInfo.left,I="channelsLast"===C,A=r.strides[0],S=I?r.strides[1]:r.strides[2],k=I?r.strides[2]:1,N=I?1:r.strides[1],T=t.strides[0],D=I?t.strides[1]:t.strides[2],_=I?t.strides[2]:1,O=I?1:t.strides[1],M=0;M<h;++M)for(var F=0;F<p;++F)for(var B=0;B<v;++B)for(var P=B-E,L=Math.max(0,Math.ceil(P/b)),W=Math.min(y,(f+P)/b),U=0;U<m;++U){for(var V=U-R,z=Math.max(0,Math.ceil(V/w)),G=Math.min(x,(d+V)/w),H=0,q=L;q<W;++q)for(var $=q*b-P,j=z;j<G;++j)for(var K=T*M+D*q+_*j,X=u*(f-1-$)+c*(d-1-(j*w-V))+l*F,Y=0;Y<g;++Y)H+=i[K+O*Y]*a[X+Y];o[A*M+S*B+k*U+N*F]=H}return r.toTensor()},t.prototype.conv3dDerInput=function(t,e,n){for(var r=ir(n.inShape,"float32"),o=r.values,i=r.strides,a=i[0],s=i[1],u=i[2],c=i[3],l=this.readSync(t.dataId),h=t.strides,f=h[0],d=h[1],p=h[2],v=h[3],m=this.readSync(e.dataId),g=e.strides,y=g[0],x=g[1],b=g[2],w=g[3],C=n.batchSize,E=n.filterDepth,R=n.filterHeight,I=n.filterWidth,A=n.inChannels,S=n.inDepth,k=n.inHeight,N=n.inWidth,T=n.outChannels,D=n.outDepth,_=n.outHeight,O=n.outWidth,M=n.strideDepth,F=n.strideHeight,B=n.strideWidth,P=E-1-n.padInfo.front,L=R-1-n.padInfo.top,W=I-1-n.padInfo.left,U=0;U<C;++U)for(var V=0;V<A;++V)for(var z=0;z<S;++z)for(var G=z-P,H=Math.max(0,Math.ceil(G/M)),q=Math.min(D,(E+G)/M),$=0;$<k;++$)for(var j=$-L,K=Math.max(0,Math.ceil(j/F)),X=Math.min(_,(R+j)/F),Y=0;Y<N;++Y){for(var Q=Y-W,J=Math.max(0,Math.ceil(Q/B)),Z=Math.min(O,(I+Q)/B),tt=0,et=H;et<q;++et)for(var nt=et*M-G,rt=K;rt<X;++rt)for(var ot=rt*F-j,it=J;it<Z;++it)for(var at=f*U+d*et+p*rt+v*it,st=y*(E-1-nt)+x*(R-1-ot)+b*(I-1-(it*B-Q))+w*V,ut=0;ut<T;++ut)tt+=l[at+ut]*m[st+ut];o[a*U+s*z+u*$+c*Y+V]=tt}return r.toTensor()},t.prototype.conv2dDerFilter=function(t,e,n){this.assertNotComplex([t,e],"conv2dDerFilter");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s="channelsLast"===n.dataFormat,u=ir(n.filterShape,"float32"),c=n.padInfo.left,l=n.padInfo.top,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<i;++d)for(var p=Math.max(0,Math.ceil((l-d)/r)),v=Math.min(n.outHeight,(n.inHeight+l-d)/r),m=0;m<a;++m)for(var g=Math.max(0,Math.ceil((c-m)/o)),y=Math.min(n.outWidth,(n.inWidth+c-m)/o),x=0;x<n.inChannels;++x)for(var b=0;b<n.outChannels;++b){for(var w=0,C=0;C<n.batchSize;++C)for(var E=p;E<v;++E)for(var R=d+E*r-l,I=g;I<y;++I){var A=m+I*o-c;w+=s?h.get(C,R,A,x)*f.get(C,E,I,b):h.get(C,x,R,A)*f.get(C,b,E,I)}u.set(w,d,m,x,b)}return u.toTensor()},t.prototype.conv3dDerFilter=function(t,e,n){for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=ir(n.filterShape,"float32"),l=c.values,h=c.strides,f=h[0],d=h[1],p=h[2],v=h[3],m=this.readSync(e.dataId),g=e.strides,y=g[0],x=g[1],b=g[2],w=g[3],C=this.readSync(t.dataId),E=t.strides,R=E[0],I=E[1],A=E[2],S=E[3],k=n.padInfo.front,N=n.padInfo.left,T=n.padInfo.top,D=0;D<a;++D)for(var _=Math.max(0,Math.ceil((k-D)/r)),O=Math.min(n.outDepth,(n.inDepth+k-D)/r),M=D*f,F=0;F<s;++F)for(var B=Math.max(0,Math.ceil((T-F)/o)),P=Math.min(n.outHeight,(n.inHeight+T-F)/o),L=F*d+M,W=0;W<u;++W)for(var U=Math.max(0,Math.ceil((N-W)/i)),V=Math.min(n.outWidth,(n.inWidth+N-W)/i),z=W*p+L,G=0;G<n.inChannels;++G)for(var H=G*v+z,q=0;q<n.outChannels;++q){for(var $=0,j=0;j<n.batchSize;++j)for(var K=j*R,X=j*y,Y=_;Y<O;++Y)for(var Q=(D+Y*r-k)*I+K,J=Y*x+X,Z=B;Z<P;++Z)for(var tt=(F+Z*o-T)*A+Q,et=Z*b+J,nt=U;nt<V;++nt){var rt=nt*w+et;$+=C[(W+nt*i-N)*S+tt+G]*m[rt+q]}l[H+q]=$}return c.toTensor()},t.prototype.fusedDepthwiseConv2D=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights,s=this.depthwiseConv2D(e,n,r);return o&&(s=this.add(s,o)),i&&(s=Zl(this,s,i,a)),s},t.prototype.depthwiseConv2D=function(t,e,n){this.assertNotComplex([t,e],"depthwiseConv2D");for(var r=n.filterHeight,o=n.filterWidth,i=n.dilationHeight,a=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=ir(n.outShape,t.dtype),h=this.readSync(t.dataId),f=this.readSync(e.dataId),d=l.values,p=0;p<n.batchSize;++p)for(var v=p*t.strides[0],m=p*l.strides[0],g=0;g<n.outHeight;++g)for(var y=m+g*l.strides[1],x=g*n.strideHeight-s,b=0;b<r;++b){var w=x+b*i;if(!(w<0||w>=n.inHeight))for(var C=b*e.strides[0],E=v+w*t.strides[1],R=0;R<n.outWidth;++R)for(var I=y+R*l.strides[2],A=R*n.strideWidth-u,S=0;S<o;++S){var k=A+S*a;if(!(k<0||k>=n.inWidth))for(var N=C+S*e.strides[1],T=E+k*n.inChannels,D=I,_=N,O=0;O<n.inChannels;++O){for(var M=h[T+O],F=0;F<c;++F)d[D+F]+=M*f[_+F];D+=c,_+=c}}}return l.toTensor()},t.prototype.depthwiseConv2DDerInput=function(t,e,n){this.assertNotComplex([t,e],"depthwiseConv2DDerInput");for(var r=ir(n.inShape,"float32"),o=r.values,i=r.strides,a=i[0],s=i[1],u=i[2],c=this.readSync(t.dataId),l=t.strides,h=l[0],f=l[1],d=l[2],p=this.readSync(e.dataId),v=e.strides,m=v[0],g=v[1],y=v[2],x=n.batchSize,b=n.filterHeight,w=n.filterWidth,C=n.inChannels,E=n.inHeight,R=n.inWidth,I=n.outChannels,A=n.outHeight,S=n.outWidth,k=n.strideHeight,N=n.strideWidth,T=b-1-n.padInfo.top,D=w-1-n.padInfo.left,_=I/C,O=0;O<x;++O)for(var M=0;M<C;++M)for(var F=0;F<E;++F)for(var B=F-T,P=Math.max(0,Math.ceil(B/k)),L=Math.min(A,(b+B)/k),W=0;W<R;++W){for(var U=W-D,V=Math.max(0,Math.ceil(U/N)),z=Math.min(S,(w+U)/N),G=0,H=P;H<L;++H)for(var q=H*k-B,$=V;$<z;++$)for(var j=h*O+f*H+d*$,K=m*(b-1-q)+g*(w-1-($*N-U))+y*M,X=0;X<_;++X)G+=c[j+(M*_+X)]*p[K+X];o[a*O+s*F+u*W+M]=G}return r.toTensor()},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){this.assertNotComplex([t,e],"depthwiseConv2DDerFilter");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s=ir(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<i;++d)for(var p=Math.max(0,Math.ceil((c-d)/r)),v=Math.min(n.outHeight,(n.inHeight+c-d)/r),m=0;m<a;++m)for(var g=Math.max(0,Math.ceil((u-m)/o)),y=Math.min(n.outWidth,(n.inWidth+u-m)/o),x=0;x<n.outChannels;++x){for(var b=Math.trunc(x/l),w=x%l,C=0,E=0;E<n.batchSize;++E)for(var R=p;R<v;++R)for(var I=d+R*r-c,A=g;A<y;++A){var S=m+A*o-u;C+=h.get(E,I,S,b)*f.get(E,R,A,x)}s.set(C,d,m,b,w)}return s.toTensor()},t.prototype.tile=function(t,e){return this.assertNotComplex(t,"tile"),_o(this.bufferSync(t),e)},t.prototype.pad=function(t,e,n){this.assertNotComplex(t,"pad");var r=e.map((function(e,n){return e[0]+t.shape[n]+e[1]})),o=e.map((function(t){return t[0]})),i=this.bufferSync(t),a=ir(r,t.dtype);0!==n&&a.values.fill(n);for(var s=0;s<t.size;s++){var u=i.indexToLoc(s),c=u.map((function(t,e){return t+o[e]}));a.set.apply(a,[i.get.apply(i,u)].concat(c))}return a.toTensor()},t.prototype.transpose=function(t,e){this.assertNotComplex(t,"transpose");for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[e[r]];var o=this.readSync(t.dataId),i=ir(n,t.dtype),a=this.bufferSync(t);for(r=0;r<t.size;++r){for(var s=a.indexToLoc(r),u=new Array(s.length),c=0;c<u.length;c++)u[c]=s[e[c]];var l=i.locToIndex(u);i.values[l]=o[r]}return i.toTensor()},t.prototype.gather=function(t,e,n){this.assertNotComplex([t,e],"gather");var r=t.shape.slice(),o=this.readSync(e.dataId);r[n]=o.length;for(var i=ir(r,t.dtype),a=this.bufferSync(t),s=0;s<i.size;++s){var u=i.indexToLoc(s),c=u.slice();c[n]=o[u[n]];var l=a.locToIndex(c);i.values[s]=a.values[l]}return i.toTensor()},t.prototype.batchToSpaceND=function(t,e,n){this.assertNotComplex([t],"batchToSpaceND");var r=e.reduce((function(t,e){return t*e})),o=Or(t.shape,e,r),i=Mr(o.length,e.length),a=Fr(t.shape,e,r),s=Br(n,e.length),u=Pr(a,n,e.length);return t.reshape(o).transpose(i).reshape(a).slice(s,u)},t.prototype.spaceToBatchND=function(t,e,n){this.assertNotComplex([t],"spaceToBatchND");var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var i=1+e.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),s=Or(a.shape,e,r,!1),u=Mr(s.length,e.length,!1),c=Fr(a.shape,e,r,!1);return a.reshape(s).transpose(u).reshape(c)},t.prototype.pool=function(t,e,n){this.assertNotComplex(t,"pool");for(var r=e.strideHeight,o=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=e.padInfo.top,l=e.padInfo.left,h="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,f=this.readSync(t.dataId),d=ir(e.outShape,t.dtype),p=d.values,v=e.outShape[1]*e.outShape[2]*e.outShape[3],m=e.outShape[2]*e.outShape[3],g=e.outShape[3],y=0;y<e.batchSize;++y)for(var x=y*v,b=y*t.strides[0],w=0;w<e.inChannels;++w)for(var C=0;C<e.outHeight;++C)for(var E=C*r-c,R=Math.max(0,E),I=Math.min(e.inHeight,s+E),A=x+C*m,S=0;S<e.outWidth;++S){for(var k=S*o-l,N=Math.max(0,k),T=Math.min(e.inWidth,u+k),D=h,_=0,O=0,M=R;M<I;M+=i){for(var F=b+M*t.strides[1],B=N;B<T;B+=a){var P=f[F+B*t.strides[2]+w];"max"===n&&P>D?D=P:"avg"===n&&(_+=P,O++)}if(isNaN(D))break}p[A+S*g+w]="avg"===n?_/O:D}return d.toTensor()},t.prototype.maxPool=function(t,e){return this.pool(t,e,"max")},t.prototype.maxPoolPositions=function(t,e){for(var n=ir(e.outShape,"int32"),r=e.strideHeight,o=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=e.padInfo.top,l=e.padInfo.left,h=this.bufferSync(t),f=0;f<e.batchSize;++f)for(var d=0;d<e.inChannels;++d)for(var p=0;p<e.outHeight;++p){for(var v=p*r-c,m=v;m<0;)m+=i;for(var g=Math.min(e.inHeight,s+v),y=0;y<e.outWidth;++y){for(var x=y*o-l,b=x;b<0;)b+=a;for(var w=Math.min(e.inWidth,u+x),C=Number.NEGATIVE_INFINITY,E=-1,R=m;R<g;R+=i)for(var I=R-v,A=b;A<w;A+=a){var S=A-x,k=h.get(f,R,A,d);k>C&&(C=k,E=I*u+S)}n.set(E,f,p,y,d)}}return n.toTensor()},t.prototype.maxPoolBackprop=function(t,e,n,r){this.assertNotComplex([e,n],"maxPoolBackprop");for(var o=this.maxPoolPositions(e,r),i=r.strideHeight,a=r.strideWidth,s=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,l=r.effectiveFilterWidth,h=l-1-r.padInfo.left,f=c-1-r.padInfo.top,d=ir(e.shape,"float32"),p=this.bufferSync(o),v=this.bufferSync(t),m=0;m<r.batchSize;++m)for(var g=0;g<r.inChannels;++g)for(var y=0;y<r.inHeight;++y)for(var x=0;x<r.inWidth;++x){for(var b=y-f,w=x-h,C=0,E=0;E<c;E+=s){var R=(b+E)/i;if(!(R<0||R>=r.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=u){var A=(w+I)/a;if(!(A<0||A>=r.outWidth||Math.floor(A)!==A)){var S=c*l-1-p.get(m,R,A,g)===E*l+I?1:0;0!==S&&(C+=v.get(m,R,A,g)*S)}}}d.set(C,m,y,x,g)}return d.toTensor()},t.prototype.avgPoolBackprop=function(t,e,n){this.assertNotComplex([t,e],"avgPoolBackprop");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,h=l-1-n.padInfo.left,f=c-1-n.padInfo.top,d=ir(e.shape,"float32"),p=1/(i*a),v=this.bufferSync(t),m=0;m<n.batchSize;++m)for(var g=0;g<n.inChannels;++g)for(var y=0;y<n.inHeight;++y)for(var x=0;x<n.inWidth;++x){for(var b=y-f,w=x-h,C=0,E=0;E<c;E+=s){var R=(b+E)/r;if(!(R<0||R>=n.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=u){var A=(w+I)/o;A<0||A>=n.outWidth||Math.floor(A)!==A||(C+=v.get(m,R,A,g))}}d.set(C*p,m,y,x,g)}return d.toTensor()},t.prototype.pool3d=function(t,e,n){this.assertNotComplex(t,"pool3d");for(var r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=this.readSync(t.dataId),g=ir(e.outShape,t.dtype),y=g.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],b=e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[3]*e.outShape[4],C=e.outShape[4],E=0;E<e.batchSize;++E)for(var R=E*x,I=E*t.strides[0],A=0;A<e.inChannels;++A)for(var S=0;S<e.outDepth;++S){for(var k=S*r-f,N=k;N<0;)N+=a;for(var T=Math.min(e.inDepth,c+k),D=R+S*b,_=0;_<e.outHeight;++_){for(var O=_*o-d,M=O;M<0;)M+=s;for(var F=Math.min(e.inHeight,l+O),B=D+_*w,P=0;P<e.outWidth;++P){for(var L=P*i-p,W=L;W<0;)W+=u;for(var U=Math.min(e.inWidth,h+L),V=B+P*C,z=v,G=0,H=0,q=N;q<T;q+=a){for(var $=I+q*t.strides[1],j=M;j<F;j+=s){for(var K=$+j*t.strides[2],X=W;X<U;X+=u){var Y=m[K+X*t.strides[3]+A];if("max"===n&&Y>z?z=Y:"avg"===n&&(G+=Y,H++),isNaN(z))break}if(isNaN(z))break}if(isNaN(z))break}y[V+A]="avg"===n?G/H:z}}}return g.toTensor()},t.prototype.avgPool3d=function(t,e){return this.assertNotComplex(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()},t.prototype.avgPool3dBackprop=function(t,e,n){this.assertNotComplex([t,e],"avgPool3dBackprop");for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=n.dilationDepth,l=n.dilationHeight,h=n.dilationWidth,f=n.effectiveFilterDepth,d=n.effectiveFilterHeight,p=n.effectiveFilterWidth,v=f-1-n.padInfo.front,m=p-1-n.padInfo.left,g=d-1-n.padInfo.top,y=ir(e.shape,"float32"),x=1/(a*s*u),b=this.bufferSync(t),w=0;w<n.batchSize;++w)for(var C=0;C<n.inChannels;++C)for(var E=0;E<n.inDepth;++E)for(var R=0;R<n.inHeight;++R)for(var I=0;I<n.inWidth;++I){for(var A=E-v,S=R-g,k=I-m,N=0,T=0;T<f;T+=c){var D=(A+T)/r;if(!(D<0||D>=n.outDepth||Math.floor(D)!==D))for(var _=0;_<d;_+=l){var O=(S+_)/o;if(!(O<0||O>=n.outHeight||Math.floor(O)!==O))for(var M=0;M<p;M+=h){var F=(k+M)/i;F<0||F>=n.outWidth||Math.floor(F)!==F||(N+=b.get(w,D,O,F,C))}}}y.set(N*x,w,E,R,I,C)}return y.toTensor()},t.prototype.maxPool3d=function(t,e){return this.assertNotComplex(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()},t.prototype.maxPool3dPositions=function(t,e){for(var n=ir(e.outShape,"int32"),r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v=this.bufferSync(t),m=0;m<e.batchSize;++m)for(var g=0;g<e.inChannels;++g)for(var y=0;y<e.outDepth;++y){for(var x=y*r-f,b=x;b<0;)b+=a;for(var w=Math.min(e.inDepth,c+x),C=0;C<e.outHeight;++C){for(var E=C*o-d,R=E;R<0;)R+=s;for(var I=Math.min(e.inHeight,l+E),A=0;A<e.outWidth;++A){for(var S=A*i-p,k=S;k<0;)k+=u;for(var N=Math.min(e.inWidth,h+S),T=Number.NEGATIVE_INFINITY,D=-1,_=b;_<w;_+=a)for(var O=_-x,M=R;M<I;M+=s)for(var F=M-E,B=k;B<N;B+=u){var P=B-S,L=v.get(m,_,M,B,g);L>=T&&(T=L,D=O*l*h+F*l+P)}n.set(D,m,y,C,A,g)}}}return n.toTensor()},t.prototype.maxPool3dBackprop=function(t,e,n,r){this.assertNotComplex([e,n],"maxPool3dBackprop");for(var o=this.maxPool3dPositions(e,r),i=r.strideDepth,a=r.strideHeight,s=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterDepth,f=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=h-1-r.padInfo.front,v=d-1-r.padInfo.left,m=f-1-r.padInfo.top,g=ir(e.shape,"float32"),y=this.bufferSync(o),x=this.bufferSync(t),b=0;b<r.batchSize;++b)for(var w=0;w<r.inChannels;++w)for(var C=0;C<r.inDepth;++C)for(var E=0;E<r.inHeight;++E)for(var R=0;R<r.inWidth;++R){for(var I=C-p,A=E-m,S=R-v,k=0,N=0;N<h;N+=u){var T=(I+N)/i;if(!(T<0||T>=r.outDepth||Math.floor(T)!==T))for(var D=0;D<f;D+=c){var _=(A+D)/a;if(!(_<0||_>=r.outHeight||Math.floor(_)!==_))for(var O=0;O<d;O+=l){var M=(S+O)/s;if(!(M<0||M>=r.outWidth||Math.floor(M)!==M)){var F=h*f*d-1-y.get(b,T,_,M,w)===N*f*d+D*d+O?1:0;0!==F&&(k+=x.get(b,T,_,M,w)*F)}}}}g.set(k,b,C,E,R,w)}return g.toTensor()},t.prototype.cast=function(t,e){return wo(t,e,this)},t.prototype.reshape=function(t,e){return Co(t,e)},t.prototype.avgPool=function(t,e){return this.assertNotComplex(t,"avgPool"),this.pool(t,e,"avg").toFloat()},t.prototype.resizeBilinear=function(t,e,n,r){this.assertNotComplex(t,"resizeBilinear");for(var o=t.shape,i=o[0],a=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(E([i,e,n,u])),h=[r&&e>1?a-1:a,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=0,p=h[0]/f[0],v=h[1]/f[1],m=0;m<i;m++)for(var g=0;g<e;g++)for(var y=p*g,x=Math.floor(y),b=y-x,w=Math.min(a-1,Math.ceil(y)),C=m*t.strides[0]+x*t.strides[1],R=m*t.strides[0]+w*t.strides[1],I=0;I<n;I++)for(var A=v*I,S=Math.floor(A),k=A-S,N=Math.min(s-1,Math.ceil(A)),T=C+S*t.strides[2],D=R+S*t.strides[2],_=C+ +N*t.strides[2],O=R+N*t.strides[2],M=0;M<u;M++){var F=c[T+M],B=c[D+M],P=F+(c[_+M]-F)*k,L=P+(B+(c[O+M]-B)*k-P)*b;l[d++]=L}return In(l,[i,e,n,u])},t.prototype.resizeBilinearBackprop=function(t,e,n){this.assertNotComplex([t,e],"resizeBilinearBackprop");for(var r=e.shape,o=r[0],i=r[1],a=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*i*a*s),f=[n&&c>1?i-1:i,n&&l>1?a-1:a],d=[n&&c>1?c-1:c,n&&l>1?l-1:l],p=f[0]/d[0],v=f[1]/d[1],m=this.readSync(t.dataId),g=0,y=0;y<o;y++)for(var x=y*e.strides[0],b=0;b<c;b++)for(var w=b*p,C=Math.floor(w),E=Math.min(Math.ceil(w),i-1),R=x+C*e.strides[1],I=x+E*e.strides[1],A=w-C,S=1-A,k=0;k<l;k++)for(var N=k*v,T=Math.floor(N),D=Math.min(Math.ceil(N),a-1),_=N-T,O=1-_,M=R+T*e.strides[2],F=R+D*e.strides[2],B=I+T*e.strides[2],P=I+D*e.strides[2],L=S*O,W=S*_,U=A*O,V=A*_,z=0;z<s;z++){var G=m[g++];h[M+z]+=G*L,h[F+z]+=G*W,h[B+z]+=G*U,h[P+z]+=G*V}return Dn(h,[o,a,i,s],e.dtype)},t.prototype.resizeNearestNeighbor=function(t,e,n,r){this.assertNotComplex(t,"resizeNearestNeighbor");for(var o=t.shape,i=o[0],a=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(i*e*n*u),h=[r&&e>1?a-1:a,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=h[0]/f[0],p=h[1]/f[1],v=0,m=0;m<i;m++)for(var g=m*t.strides[0],y=0;y<e;y++)for(var x=d*y,b=g+Math.min(a-1,r?Math.round(x):Math.floor(x))*t.strides[1],w=0;w<n;w++)for(var C=p*w,E=b+Math.min(s-1,r?Math.round(C):Math.floor(C))*t.strides[2],R=0;R<u;R++){var I=c[E+R];l[v++]=I}return In(l,[i,e,n,u],t.dtype)},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){this.assertNotComplex([t,e],"resizeNearestNeighborBackprop");for(var r=e.shape,o=r[0],i=r[1],a=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*i*a*s),f=this.readSync(t.dataId),d=[n&&c>1?i-1:i,n&&l>1?a-1:a],p=[n&&c>1?c-1:c,n&&l>1?l-1:l],v=d[0]/p[0],m=d[1]/p[1],g=1/v,y=1/m,x=2*Math.ceil(g)+2,b=2*Math.ceil(y)+2,w=0;w<o;w++)for(var C=w*e.strides[0],E=0;E<i;E++)for(var R=C+E*e.strides[1],I=Math.floor(E*g),A=Math.floor(I-x/2),S=0;S<a;S++)for(var k=R+S*e.strides[2],N=Math.floor(S*y),T=Math.floor(N-b/2),D=0;D<s;D++){for(var _=0,O=0;O<x;O++){var M=O+A;if(!(M<0||M>=c)){var F=C+M*t.strides[1],B=M*v;if(E===Math.min(i-1,n?Math.round(B):Math.floor(B)))for(var P=0;P<b;P++){var L=P+T;if(!(L<0||L>=l)){var W=F+L*t.strides[2],U=L*m;S===Math.min(a-1,n?Math.round(U):Math.floor(U))&&(_+=f[W+D])}}}}h[k+D]=_}return Dn(h,e.shape,e.dtype)},t.prototype.batchNormalization=function(t,e,n,r,o,i){this.assertNotComplex([t,e,n,o,i],"batchNorm");for(var a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=this.readSync(n.dataId),c=o?this.readSync(o.dataId):new Float32Array([1]),l=i?this.readSync(i.dataId):new Float32Array([0]),h=new Float32Array(a.length),f=l.length,d=c.length,p=u.length,v=s.length,m=0,g=0,y=0,x=0,b=0;b<a.length;++b)h[b]=l[m++]+(a[b]-s[g++])*c[y++]/Math.sqrt(u[x++]+r),m>=f&&(m=0),g>=v&&(g=0),y>=d&&(y=0),x>=p&&(x=0);return Dn(h,t.shape)},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){this.assertNotComplex(t,"localResponseNormalization4D");var i=t.shape[3],a=i-1,s=this.readSync(t.dataId),u=t.size,c=new Float32Array(u);function l(t){for(var n=t%i,r=t-n+Math.max(0,n-e),o=t-n+Math.min(n+e,a),u=0;r<=o;r++){var c=s[r];u+=c*c}return u}for(var h=0;h<u;h++){var f=l(h),d=s[h]*Math.pow(n+r*f,-o);c[h]=d}return Dn(c,t.shape)},t.prototype.LRNGrad=function(t,e,n,r,o,i,a){this.assertNotComplex(t,"LRNGrad");for(var s=t.shape[3],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=this.readSync(n.dataId),h=new Float32Array(t.size),f=t.size,d=0;d<f;d++){for(var p=d%s,v=d-p+Math.max(0,p-r),m=d-p+Math.min(s,p+r+1),g=0,y=v;y<m;y++)g+=Math.pow(c[y],2);for(g=i*g+o,y=v;y<m;y++){var x=-2*i*a*c[y]*l[d]/g;d===y&&(x+=Math.pow(g,-a)),x*=u[d],h[y]+=x}}return Dn(h,t.shape)},t.prototype.multinomial=function(t,e,n,r){this.assertNotComplex(t,"multinomial");for(var o=e?t:eo(t),i=o.shape[0],a=o.shape[1],s=Fn([i,n],"int32"),u=this.readSync(s.dataId),c=this.readSync(o.dataId),l=0;l<i;++l){var h=l*a,f=new Float32Array(a-1);f[0]=c[h];for(var d=1;d<f.length;++d)f[d]=f[d-1]+c[h+d];for(var p=er(r.toString()),v=l*n,m=0;m<n;++m){var g=p();u[v+m]=f.length;for(var y=0;y<f.length;y++)if(g<f[y]){u[v+m]=y;break}}}return s},t.prototype.oneHot=function(t,e,n,r){this.assertNotComplex(t,"oneHot");var o=new Float32Array(t.size*e);o.fill(r);for(var i=this.readSync(t.dataId),a=0;a<t.size;++a)i[a]>=0&&i[a]<e&&(o[a*e+i[a]]=n);return Nn(o,[t.size,e],"int32")},t.prototype.nonMaxSuppression=function(t,e,n,r,o){return this.assertNotComplex(t,"nonMaxSuppression"),No(this.readSync(t.dataId),this.readSync(e.dataId),n,r,o)},t.prototype.fft=function(t){return this.fftBatch(t,!1)},t.prototype.ifft=function(t){return this.fftBatch(t,!0)},t.prototype.fftBatch=function(t,e){for(var n=t.shape[0],r=t.shape[1],o=ir(t.shape,"float32"),i=ir(t.shape,"float32"),a=En(t).as2D(n,r),s=Rn(t).as2D(n,r),u=0;u<n;u++)for(var c=a.slice([u,0],[1,r]),l=s.slice([u,0],[1,r]),h=Cn(c,l),f=this.readSync(this.fftImpl(h,e).dataId),d=0;d<r;d++){var p=Ao(f,d);o.values[u*r+d]=p.real,i.values[u*r+d]=p.imag}return Cn(o.toTensor(),i.toTensor()).as2D(n,r)},t.prototype.fftImpl=function(t,e){var n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(o=Cn(En(o).div(Sn(r)),Rn(o).div(Sn(r)))),o}var i=this.readSync(t.dataId),a=function(t){for(var e=new Float32Array(t.length/2),n=new Float32Array(t.length/2),r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(this.fourierTransformByMatmul(i,r,e));return Cn(a.real,a.imag).as2D(t.shape[0],t.shape[1])},t.prototype.isExponentOf2=function(t){return 0==(t&t-1)},t.prototype.fftRadix2=function(t,e,n){if(1===e)return t;var r=this.readSync(t.dataId),o=e/2,i=function(t){for(var e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=0;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),a=Cn(i.real,i.imag).as1D(),s=function(t){for(var e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=2;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),u=Cn(s.real,s.imag).as1D();a=this.fftRadix2(a,o,n),u=this.fftRadix2(u,o,n);var c=function(t,e){for(var n=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var i=(e?2:-2)*Math.PI*(o/t);n[o]=Math.cos(i),r[o]=Math.sin(i)}return{real:n,imag:r}}(e,n),l=Cn(c.real,c.imag).mul(u),h=a.add(l),f=a.sub(l),d=En(h).concat(En(f)),p=Rn(h).concat(Rn(f));return Cn(d,p).as1D()},t.prototype.fourierTransformByMatmul=function(t,e,n){for(var r=new Float32Array(2*e),o=0;o<e;o++){for(var i=0,a=0,s=0;s<e;s++){var u=ko(o*s,e,n),c=Ao(t,s);i+=c.real*u.real-c.imag*u.imag,a+=c.real*u.imag+c.imag*u.real}n&&(i/=e,a/=e),So(r,i,a,o)}return r},t.prototype.depthToSpace=function(t,e,n){x("NHWC"===n,(function(){return"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n})),x(e>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+e}));for(var r=t.shape[0],o=t.shape[1],i=t.shape[2],a=t.shape[3],s=o*e,u=i*e,c=a/(e*e),l=this.readSync(t.dataId),h=new Float32Array(r*s*u*c),f=0,d=0;d<r;++d)for(var p=0;p<s;++p)for(var v=Math.floor(p/e),m=p%e,g=0;g<u;++g)for(var y=Math.floor(g/e),b=(m*e+g%e)*c,w=0;w<c;++w){var C=w+b+a*(y+i*(v+o*d));h[f++]=l[C]}return Dn(h,[r,s,u,c])},t.prototype.broadcastedBinaryOp=function(t,e,n,r){var o=so(t.shape,e.shape),i=ir(o,n),a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=io(t.shape,o),c=io(e.shape,o),l=i.values;if(u.length+c.length===0)for(var h=0;h<l.length;++h)l[h]=r(a[h%a.length],s[h%s.length]);else{var f=this.bufferSync(t),d=this.bufferSync(e),p=function(n){var o=i.indexToLoc(n),h=o.slice(-t.rank);u.forEach((function(t){return h[t]=0}));var p=f.locToIndex(h),v=o.slice(-e.rank);c.forEach((function(t){return v[t]=0}));var m=d.locToIndex(v);l[n]=r(a[p],s[m])};for(h=0;h<l.length;++h)p(h)}return i.toTensor()},t.prototype.broadcastedBinaryComplexOp=function(t,e,n){var r=so(t.shape,e.shape),o=ir(r,"float32"),i=ir(r,"float32"),a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=io(t.shape,r),c=io(e.shape,r),l=o.values,h=i.values;if(u.length+c.length===0)for(var f=0;f<l.length;f++){var d=f%a.length,p=f%s.length,v=n(a[2*d],a[2*d+1],s[2*p],s[2*p+1]);l[f]=v.real,h[f]=v.imag}else{var m=this.bufferSync(this.data.get(t.dataId).complexTensors.real),g=this.bufferSync(this.data.get(e.dataId).complexTensors.real),y=function(r){var i=o.indexToLoc(r),f=i.slice(-t.rank);u.forEach((function(t){return f[t]=0}));var d=m.locToIndex(f),p=i.slice(-e.rank);c.forEach((function(t){return p[t]=0}));var v=g.locToIndex(p),y=n(a[2*d],a[2*d+1],s[2*v],s[2*v+1]);l[r]=y.real,h[r]=y.imag};for(f=0;f<l.length;f++)y(f)}return this.complex(o.toTensor(),i.toTensor())},t.prototype.split=function(t,e,n){return Do(t,e,n)},t.prototype.dispose=function(){},t.prototype.floatPrecision=function(){return 32},t.prototype.epsilon=function(){return 1e-7},t.prototype.cropAndResize=function(t,e,n,r,o,i){for(var a=t.shape,s=a[0],u=a[1],c=a[2],l=a[3],h=e.shape[0],f=r[0],d=r[1],p=ir([h,f,d,l],t.dtype),v=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,x=p.strides,b=0;b<h;b++){var w=4*b,C=v[w],E=v[w+1],R=v[w+2],I=v[w+3],A=m[b];if(!(A>=s))for(var S=f>1?(R-C)*(u-1)/(f-1):0,k=d>1?(I-E)*(c-1)/(d-1):0,N=0;N<f;N++){var T=f>1?C*(u-1)+N*S:.5*(C+R)*(u-1);if(T<0||T>u-1)for(var D=0;D<d;D++)for(var _=0;_<l;_++){var O=_+D*x[2]+N*x[1]+b*x[0];p.values[O]=i}else if("bilinear"===o){var M=Math.floor(T),F=Math.ceil(T),B=T-M;for(D=0;D<d;D++)if((q=d>1?E*(c-1)+D*k:.5*(E+I)*(c-1))<0||q>c-1)for(_=0;_<l;_++)O=_+D*x[2]+N*x[1]+b*x[0],p.values[O]=i;else{var P=Math.floor(q),L=Math.ceil(q),W=q-P;for(_=0;_<l;_++){var U=g[O=_+P*y[2]+M*y[1]+A*y[0]],V=g[O=_+L*y[2]+M*y[1]+A*y[0]],z=g[O=_+P*y[2]+F*y[1]+A*y[0]],G=U+(V-U)*W,H=z+(g[O=_+L*y[2]+F*y[1]+A*y[0]]-z)*W;O=_+D*x[2]+N*x[1]+b*x[0],p.values[O]=G+(H-G)*B}}}else for(D=0;D<d;++D){var q;if((q=d>1?E*(c-1)+D*k:.5*(E+I)*(c-1))<0||q>c-1)for(_=0;_<l;_++)O=_+D*x[2]+N*x[1]+b*x[0],p.values[O]=i;else{var $=Math.round(q),j=Math.round(T);for(_=0;_<l;_++){var K=_+$*y[2]+j*y[1]+A*y[0],X=_+D*x[2]+N*x[1]+b*x[0];p.values[X]=g[K]}}}}}return p.toTensor()},t.prototype.sparseToDense=function(t,e,n,r){var o=Vr(0,t,n),i=o.sliceRank,a=o.numUpdates,s=o.sliceSize,u=o.strides,c=o.outputSize;return this.scatter(t,e,n,c,s,a,i,u,r,!1)},t.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Lr(t,e),i=o[0],a=o[1],s=o[2],u=o[3];if(0===a)return In([],i,t.dtype);for(var c=new ht([a,s],t.dtype),l=this.readSync(e.dataId),h=this.readSync(t.dataId),f=0;f<a;f++){for(var d=[],p=0,v=0;v<r;v++){var m=l[f*r+v];p+=m*u[v],d.push(m)}if(p<0||p>=t.size/s)throw new Error("Invalid indices: "+d+" does not index into "+t.shape);for(var g=0;g<s;g++)c.values[f*s+g]=h[p*s+g]}return c.toTensor().reshape(i)},t.prototype.scatterND=function(t,e,n){var r=Vr(0,t,n),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,s=r.strides,u=r.outputSize,c=Sn(0);return this.scatter(t,e,n,u,a,i,o,s,c,!0)},t.prototype.fill=function(t,e,n){var r=M(n=n||H(e),E(t));return r.fill(e),vt.make(t,{values:r},n)},t.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)},t.prototype.zerosLike=function(t){var e=M(t.dtype,E(t.shape));return vt.make(t.shape,{values:e},t.dtype)},t.prototype.linspace=function(t,e,n){return Eo(t,e,n)},t.prototype.scatter=function(t,e,n,r,o,i,a,s,u,c){var l=[r/o,o],h=this.readSync(t.dataId),f=this.readSync(e.dataId);if(0===r)return In([],n,e.dtype);var d=new ht(l,e.dtype);d.values.fill(this.readSync(u.dataId)[0]);for(var p=0;p<i;p++){for(var v=[],m=0,g=0;g<a;g++){var y=h[p*a+g];v.push(y),m+=y*s[g]}if(m<0||m>=r/o)throw new Error("Invalid indices: "+v+" does not index into "+n);for(var x=0;x<o;x++)c?d.values[m*o+x]+=f[p*o+x]:d.values[m*o+x]=0===e.rank?f[0]:f[p*o+x]}return d.toTensor().reshape(n)},t}();Ot.registerBackend("cpu",(function(){return new th}),1);var eh=function(){function t(){}return t.prototype.fetch=function(t,e){return fetch(t,e)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return new TextDecoder(e).decode(t)},t}();f.get("IS_BROWSER")&&f.setPlatform("browser",new eh);var nh,rh=function(){function t(){this.util=n(11),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,e){return null!=f.global.fetch?f.global.fetch(t,e):(null==nh&&(nh=n(10)),nh(t,e))},t.prototype.now=function(){var t=r.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)},t}();f.get("IS_NODE")&&f.setPlatform("node",new rh);var oh={float32:4,int32:4,uint16:2,uint8:1,bool:1},ih=4;function ah(t,e){for(var n={},r=0,o=function(e){var o=e.name,i=e.dtype,a=e.shape,s=E(a),u=void 0;if("quantization"in e){var c=e.quantization;if("uint8"!==c.dtype&&"uint16"!==c.dtype)throw new Error("Weight "+e.name+" has unknown quantization dtype "+c.dtype+". Supported quantization dtypes are: 'uint8' and 'uint16'.");var l=oh[c.dtype],h=t.slice(r,r+s*l),f="uint8"===c.dtype?new Uint8Array(h):new Uint16Array(h);if("float32"===i)u=Float32Array.from(f,(function(t){return t*c.scale+c.min}));else{if("int32"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);u=Int32Array.from(f,(function(t){return Math.round(t*c.scale+c.min)}))}r+=s*l}else if("string"===i){var d=E(e.shape);u=[];for(var p=0;p<d;p++){var v=new Uint32Array(t.slice(r,r+ih))[0];r+=ih;var m=new Uint8Array(t.slice(r,r+v));u.push(m),r+=v}}else{var g=oh[i];if(h=t.slice(r,r+s*g),"float32"===i)u=new Float32Array(h);else if("int32"===i)u=new Int32Array(h);else{if("bool"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);u=new Uint8Array(h)}r+=s*g}n[o]=In(u,a,i)},i=0,a=e;i<a.length;i++)o(a[i]);return n}function sh(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var e=0,n=[];t.forEach((function(t){if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));var r=new Uint8Array(e),o=0;return n.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}var uh=void 0!==o&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function ch(t){return uh?o.byteLength(t):new Blob([t]).size}function lh(t){var e=0;t.forEach((function(t){e+=t.byteLength}));var n=new Uint8Array(e),r=0;return t.forEach((function(t){n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function hh(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var e=t.split("/");return e[e.length-1]}function fh(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:ch(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:ch(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var dh=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e)},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e)},t.getSaveHandlers=function(e){return t.getHandlers(e,"save")},t.getLoadHandlers=function(e,n){return t.getHandlers(e,"load",n)},t.getHandlers=function(e,n,r){var o=[];return("load"===n?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var n=t(e,r);null!==n&&o.push(n)})),o},t}(),ph="://",vh=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){x(null!=e,(function(){return"scheme must not be undefined or null."})),e.endsWith(ph)&&(e=e.slice(0,e.indexOf(ph))),x(e.length>0,(function(){return"scheme must not be an empty string."}));var r=t.getInstance();x(null==r.managers[e],(function(){return"A model store manager is already registered for scheme '"+e+"'."})),r.managers[e]=n},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error("Cannot find model manager for scheme '"+t+"'");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function mh(t){if(-1===t.indexOf(ph))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+vh.getSchemes().join(","));return{scheme:t.split(ph)[0],path:t.split(ph)[1]}}function gh(t,e,n){return void 0===n&&(n=!1),u(this,void 0,void 0,(function(){var r,o,i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:return x(t!==e,(function(){return"Old path and new path are the same: '"+t+"'"})),x((r=dh.getLoadHandlers(t)).length>0,(function(){return"Copying failed because no load handler is found for source URL "+t+"."})),x(r.length<2,(function(){return"Copying failed because more than one ("+r.length+") load handlers for source URL "+t+"."})),o=r[0],x((i=dh.getSaveHandlers(e)).length>0,(function(){return"Copying failed because no save handler is found for destination URL "+e+"."})),x(i.length<2,(function(){return"Copying failed because more than one ("+r.length+") save handlers for destination URL "+e+"."})),a=i[0],s=mh(t).scheme,u=mh(t).path,l=s===mh(t).scheme,[4,o.load()];case 1:return h=c.sent(),n&&l?[4,vh.getManager(s).removeModel(u)]:[3,3];case 2:c.sent(),c.label=3;case 3:return[4,a.save(h)];case 4:return f=c.sent(),!n||l?[3,6]:[4,vh.getManager(s).removeModel(u)];case 5:c.sent(),c.label=6;case 6:return[2,f.modelArtifactsInfo]}}))}))}var yh="models_store",xh="model_info_store";function bh(){if(!f.getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t=window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function wh(t){var e=t.result;e.createObjectStore(yh,{keyPath:"modelPath"}),e.createObjectStore(xh,{keyPath:"modelPath"})}var Ch=function(){function t(t){if(this.indexedDB=bh(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,e){var n=this;return new Promise((function(t,r){var o=n.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return wh(o)},o.onsuccess=function(){var i=o.result;if(null==e){var a=i.transaction(yh,"readonly"),s=a.objectStore(yh).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return i.close(),r(new Error("Cannot find model with path '"+n.modelPath+"' in IndexedDB."));t(s.result.modelArtifacts)},s.onerror=function(t){return i.close(),r(s.error)},a.oncomplete=function(){return i.close()}}else{var u,c=fh(e),l=i.transaction(xh,"readwrite"),h=l.objectStore(xh),f=h.put({modelPath:n.modelPath,modelArtifactsInfo:c});f.onsuccess=function(){var o=(u=i.transaction(yh,"readwrite")).objectStore(yh).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:c});o.onsuccess=function(){return t({modelArtifactsInfo:c})},o.onerror=function(t){var e=(h=l.objectStore(xh)).delete(n.modelPath);e.onsuccess=function(){return i.close(),r(o.error)},e.onerror=function(t){return i.close(),r(o.error)}}},f.onerror=function(t){return i.close(),r(f.error)},l.oncomplete=function(){null==u?i.close():u.oncomplete=function(){return i.close()}}}},o.onerror=function(t){return r(o.error)}}))},t.URL_SCHEME="indexeddb://",t}(),Eh=function(t){return f.getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Ch.URL_SCHEME)?(e=t.slice(Ch.URL_SCHEME.length),new Ch(e)):null;var e};dh.registerSaveRouter(Eh),dh.registerLoadRouter(Eh);var Rh=function(){function t(){this.indexedDB=bh()}return t.prototype.listModels=function(){return u(this,void 0,void 0,(function(){var t=this;return c(this,(function(e){return[2,new Promise((function(e,n){var r=t.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return wh(r)},r.onsuccess=function(){var t=r.result,o=t.transaction(xh,"readonly"),i=o.objectStore(xh).getAll();i.onsuccess=function(){for(var t={},n=0,r=i.result;n<r.length;n++){var o=r[n];t[o.modelPath]=o.modelArtifactsInfo}e(t)},i.onerror=function(e){return t.close(),n(i.error)},o.oncomplete=function(){return t.close()}},r.onerror=function(t){return n(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return u(this,void 0,void 0,(function(){var e=this;return c(this,(function(n){var r;return t=(r=t).startsWith(Ch.URL_SCHEME)?r.slice(Ch.URL_SCHEME.length):r,[2,new Promise((function(n,r){var o=e.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return wh(o)},o.onsuccess=function(){var e,i=o.result,a=i.transaction(xh,"readwrite"),s=a.objectStore(xh),u=s.get(t);u.onsuccess=function(){if(null==u.result)return i.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var o=s.delete(t),a=function(){var o=(e=i.transaction(yh,"readwrite")).objectStore(yh).delete(t);o.onsuccess=function(){return n(u.result.modelArtifactsInfo)},o.onerror=function(t){return r(u.error)}};o.onsuccess=a,o.onerror=function(t){return a(),i.close(),r(u.error)}},u.onerror=function(t){return i.close(),r(u.error)},a.oncomplete=function(){null==e?i.close():e.oncomplete=function(){return i.close()}}},o.onerror=function(t){return r(o.error)}}))]}))}))},t}();if(f.getBool("IS_BROWSER"))try{vh.registerManager(Ch.URL_SCHEME,new Rh)}catch(a){}var Ih="/",Ah="tensorflowjs_models",Sh="info",kh="model_topology",Nh="weight_specs",Th="weight_data",Dh="model_metadata";function _h(t){return{info:[Ah,t,Sh].join(Ih),topology:[Ah,t,kh].join(Ih),weightSpecs:[Ah,t,Nh].join(Ih),weightData:[Ah,t,Th].join(Ih),modelMetadata:[Ah,t,Dh].join(Ih)}}function Oh(t){var e=t.split(Ih);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join(Ih)}var Mh=function(){function t(t){if(!f.getBool("IS_BROWSER")||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=_h(this.modelPath)}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(i){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=fh(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,(a=t.weightData,uh?o.from(a).toString("base64"):btoa(String.fromCharCode.apply(null,new Uint8Array(a))))),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy})),[2,{modelArtifactsInfo:r}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}var a;return[2]}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,i,a,s;return c(this,(function(u){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(e.modelTopology=n,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(e.weightSpecs=r,null!=(i=this.LS.getItem(this.keys.modelMetadata))&&(a=JSON.parse(i),e.format=a.format,e.generatedBy=a.generatedBy,e.convertedBy=a.convertedBy),null==(s=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return e.weightData=function(t){if(uh){var e=o.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}for(var n=atob(t),r=new Uint8Array(n.length),i=0;i<n.length;++i)r.set([n.charCodeAt(i)],i);return r.buffer}(s),[2,e]}))}))},t.URL_SCHEME="localstorage://",t}(),Fh=function(t){return f.getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Mh.URL_SCHEME)?(e=t.slice(Mh.URL_SCHEME.length),new Mh(e)):null;var e};dh.registerSaveRouter(Fh),dh.registerLoadRouter(Fh);var Bh=function(){function t(){x(f.getBool("IS_BROWSER"),(function(){return"Current environment is not a web browser"})),x(void 0!==window.localStorage,(function(){return"Current browser does not appear to support localStorage"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i;return c(this,(function(a){for(t={},e=Ah+Ih,n=Ih+Sh,r=0;r<this.LS.length;++r)(o=this.LS.key(r)).startsWith(e)&&o.endsWith(n)&&(i=Oh(o),t[i]=JSON.parse(this.LS.getItem(o)));return[2,t]}))}))},t.prototype.removeModel=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){var o;if(t=(o=t).startsWith(Mh.URL_SCHEME)?o.slice(Mh.URL_SCHEME.length):o,e=_h(t),null==this.LS.getItem(e.info))throw new Error("Cannot find model at path '"+t+"'");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]}))}))},t}();if(f.getBool("IS_BROWSER"))try{vh.registerManager(Mh.URL_SCHEME,new Bh)}catch(a){}var Ph="model",Lh=".json",Wh=".weights.bin";function Uh(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var Vh=function(){function t(e){if(!f.getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e=Ph),this.modelTopologyFileName=e+Lh,this.weightDataFileName=e+Wh}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a;return c(this,(function(s){switch(s.label){case 0:if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 1:return n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=o,[4,Uh((function(){return i.dispatchEvent(new MouseEvent("click"))}))];case 2:return s.sent(),null==t.weightData?[3,4]:((a=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,a.href=e,[4,Uh((function(){return a.dispatchEvent(new MouseEvent("click"))}))]);case 3:s.sent(),s.label=4;case 4:return[2,{modelArtifactsInfo:fh(t)}]}}))}))},t.URL_SCHEME="downloads://",t}(),zh=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}return t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n=this;return c(this,(function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise((function(r,o){var i=new FileReader;i.onload=function(i){var a=JSON.parse(i.target.result),s=a.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=a.weightsManifest;if(null!=u){var c;try{c=n.checkManifestAndWeightFiles(u,e)}catch(t){return void o(t)}var l=[],h=[],f=[];u.forEach((function(t){t.paths.forEach((function(t){h.push(t),f.push(null)})),l.push.apply(l,t.weights)})),u.forEach((function(t){t.paths.forEach((function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,o=h.indexOf(t);f[o]=n,-1===f.indexOf(null)&&r({modelTopology:s,weightSpecs:l,weightData:lh(f)})},e.onerror=function(e){return o("Failed to weights data from file of path '"+t+"'.")},e.readAsArrayBuffer(c[t])}))}))}else o(new Error("weightManifest field is missing from file "+t.name))}else o(new Error("modelTopology field is missing from file "+t.name))},i.onerror=function(e){return o("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},i.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map((function(t){return hh(t.name)})),o={},i=0,a=t;i<a.length;i++)a[i].paths.forEach((function(t){var i=hh(t);if(-1!==n.indexOf(i))throw new Error("Duplicate file basename found in weights manifest: '"+i+"'");if(n.push(i),-1===r.indexOf(i))throw new Error("Weight file with basename '"+i+"' is not provided.");o[t]=e[r.indexOf(i)]}));if(n.length!==e.length)throw new Error("Mismatch in the number of files in weights manifest ("+n.length+") and the number of weight files provided ("+e.length+").");return o},t}();function Gh(t,e,n,r){!function(t){x(null!=t&&Array.isArray(t)&&t.length>0,(function(){return"promises must be a none empty array"}))}(t),function(t,e){x(t>=0&&t<=1,(function(){return"Progress fraction must be in range [0, 1], but got startFraction "+t})),x(e>=0&&e<=1,(function(){return"Progress fraction must be in range [0, 1], but got endFraction "+e})),x(e>=t,(function(){return"startFraction must be no more than endFraction, but got startFraction "+t+" and endFraction "+e}))}(n=null==n?0:n,r=null==r?1:r);var o=0;return Promise.all(t.map((function(i){return i.then((function(i){var a=n+ ++o/t.length*(r-n);return e(a),i})),i})))}function Hh(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,l,h;return c(this,(function(c){switch(c.label){case 0:return null==e&&(e={}),n=null==e.fetchFunc?f.platform.fetch:e.fetchFunc,r=t.map((function(t){return n(t,e.requestInit,{isBinary:!0})})),o=0,i=.5,null!=e.onProgress?[3,2]:[4,Promise.all(r)];case 1:return a=c.sent(),[3,4];case 2:return[4,Gh(r,e.onProgress,o,i)];case 3:a=c.sent(),c.label=4;case 4:return s=a.map((function(t){return t.arrayBuffer()})),u=.5,l=1,null!=e.onProgress?[3,6]:[4,Promise.all(s)];case 5:return h=c.sent(),[3,8];case 6:return[4,Gh(s,e.onProgress,u,l)];case 7:h=c.sent(),c.label=8;case 8:return[2,h]}}))}))}function qh(t){var e=this;return function(n,r,o){return void 0===r&&(r=""),u(e,void 0,void 0,(function(){var e,i,a,s,u,l,h,f,d,p;return c(this,(function(c){switch(c.label){case 0:if(e=n.map((function(){return!1})),i={},a=null!=o?o.map((function(){return!1})):[],s=[],n.forEach((function(t,n){var r=0;t.weights.forEach((function(t){var u="quantization"in t?t.quantization.dtype:t.dtype,c=oh[u]*E(t.shape),l=function(){e[n]=!0,null==i[n]&&(i[n]=[]),i[n].push({manifestEntry:t,groupOffset:r,sizeBytes:c})};null!=o?o.forEach((function(e,n){e===t.name&&(l(),a[n]=!0)})):l(),s.push(t.name),r+=c}))})),!a.every((function(t){return t})))throw u=o.filter((function(t,e){return!a[e]})),new Error("Could not find weights in manifest with names: "+u.join(", ")+". \nManifest JSON has weights with names: "+s.join(", ")+".");return l=e.reduce((function(t,e,n){return e&&t.push(n),t}),[]),h=[],l.forEach((function(t){n[t].paths.forEach((function(t){var e=r+(r.endsWith("/")?"":"/")+t;h.push(e)}))})),[4,t(h)];case 1:return f=c.sent(),d={},p=0,l.forEach((function(t){for(var e=n[t].paths.length,r=0,o=0;o<e;o++)r+=f[p+o].byteLength;for(var a=new ArrayBuffer(r),s=new Uint8Array(a),u=0,c=0;c<e;c++){var l=new Uint8Array(f[p+c]);s.set(l,u),u+=l.byteLength}i[t].forEach((function(t){var e=ah(a.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var n in e)d[n]=e[n]})),p+=e})),[2,d]}}))}))}}dh.registerSaveRouter((function(t){return f.getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Vh.URL_SCHEME)?(void 0===(e=t.slice(Vh.URL_SCHEME.length))&&(e="model"),new Vh(e)):null;var e}));var $h=function(){function t(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(x("function"==typeof e.fetchFunc,(function(){return"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=e.fetchFunc):this.fetch=f.platform.fetch,x(null!=t&&t.length>0,(function(){return"URL path for http must not be null, undefined or empty."})),Array.isArray(t)&&x(2===t.length,(function(){return"URL paths for http must have a length of 2, (actual length is "+t.length+")."})),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o;return c(this,(function(i){switch(i.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n},e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.fetch(this.path,e)];case 1:if((o=i.sent()).ok)return[2,{modelArtifactsInfo:fh(t),responses:[o]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+o.status+".")}}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i,a,s;return c(this,(function(u){switch(u.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=u.sent()).ok)throw new Error("Request to "+this.path+" failed with status code "+t.status+". Please verify this URL points to the model JSON of the model to load.");u.label=2;case 2:return u.trys.push([2,4,,5]),[4,t.json()];case 3:return e=u.sent(),[3,5];case 4:throw u.sent(),n="Failed to parse model JSON of response from "+this.path+".",this.path.endsWith(".pb")?n+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":n+=" Please make sure the server is serving valid JSON for this request.",new Error(n);case 5:if(r=e.modelTopology,o=e.weightsManifest,null==r&&null==o)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==o?[3,7]:[4,this.loadWeights(o)];case 6:s=u.sent(),i=s[0],a=s[1],u.label=7;case 7:return[2,{modelTopology:r,weightSpecs:i,weightData:a}]}}))}))},t.prototype.loadWeights=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:for(e=Array.isArray(this.path)?this.path[1]:this.path,n=function(t){var e=t.lastIndexOf("/"),n=t.lastIndexOf("?");return[t.substring(0,e)+"/",n>e?t.substring(n):""]}(e),r=n[0],o=n[1],i=this.weightPathPrefix||r,a=[],s=0,u=t;s<u.length;s++)l=u[s],a.push.apply(a,l.weights);return h=[],t.forEach((function(t){t.paths.forEach((function(t){h.push(i+t+o)}))})),[4,Hh(h,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return f=c.sent(),[2,[a,lh(f)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\/\//,t}();function jh(t){return null!=t.match($h.URL_SCHEME_REGEX)}var Kh=function(t,e){return"undefined"==typeof fetch?null:(Array.isArray(t)?t.every((function(t){return jh(t)})):jh(t))?Xh(t,{onProgress:e}):null};function Xh(t,e){return new $h(t,e)}dh.registerSaveRouter(Kh),dh.registerLoadRouter(Kh);var Yh=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),Qh=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.saveHandler(t)]}))}))},t}(),Jh=Object.freeze({browserFiles:function(t){return new zh(t)},browserHTTPRequest:function(t,e){return Xh(t,e)},concatenateArrayBuffers:lh,decodeWeights:ah,encodeWeights:function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s=this;return c(this,(function(l){switch(l.label){case 0:for(n=[],r=[],o=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),i=function(i){var a=o[i],l=Array.isArray(t)?t[i].tensor:t[a];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype)throw new Error("Unsupported dtype in weight '"+a+"': "+l.dtype);var h={name:a,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){var f=new Promise((function(t){return u(s,void 0,void 0,(function(){var e,n,r,o,i,a,s;return c(this,(function(u){switch(u.label){case 0:return[4,l.bytes()];case 1:for(e=u.sent(),n=e.reduce((function(t,e){return t+e.length}),0)+ih*e.length,r=new Uint8Array(n),o=0,i=0;i<e.length;i++)a=e[i],s=new Uint8Array(new Uint32Array([a.length]).buffer),r.set(s,o),o+=ih,r.set(a,o),o+=a.length;return t(r),[2]}}))}))}));r.push(f)}else r.push(l.data());null!=e&&(h.group=e),n.push(h)},a=0;a<o.length;++a)i(a);return[4,Promise.all(r)];case 1:return[2,{data:sh(l.sent()),specs:n}]}}))}))},fromMemory:function(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new Yh(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Yh({modelTopology:t})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Yh({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))},getLoadHandlers:function(t,e){return dh.getLoadHandlers(t,e)},getModelArtifactsInfoForJSON:fh,getSaveHandlers:function(t){return dh.getSaveHandlers(t)},http:Xh,isHTTPScheme:jh,loadWeights:function(t,e,n,r){return void 0===e&&(e=""),u(this,void 0,void 0,(function(){return c(this,(function(o){return[2,qh((function(t){return Hh(t,{requestInit:r})}))(t,e,n)]}))}))},registerLoadRouter:function(t){return dh.registerLoadRouter(t)},registerSaveRouter:function(t){return dh.registerSaveRouter(t)},weightsLoaderFactory:qh,withSaveHandler:function(t){return new Qh(t)},copyModel:function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return[2,gh(t,e,!1)]}))}))},listModels:function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i,a;return c(this,(function(s){switch(s.label){case 0:t=vh.getSchemes(),e={},n=0,r=t,s.label=1;case 1:return n<r.length?(o=r[n],[4,vh.getManager(o).listModels()]):[3,4];case 2:for(a in i=s.sent())e[o+ph+a]=i[a];s.label=3;case 3:return n++,[3,1];case 4:return[2,e]}}))}))},moveModel:function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return[2,gh(t,e,!0)]}))}))},removeModel:function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return e=mh(t),[2,vh.getManager(e.scheme).removeModel(e.path)]}))}))}}),Zh=wn({confusionMatrix_:function(t,e,n){var r=cn(t,"labels","confusionMatrix"),o=cn(e,"predictions","confusionMatrix");x(null==n||n>0&&Number.isInteger(n),(function(){return"If provided, numClasses must be a positive integer, but got "+n})),x(1===r.rank,(function(){return"Expected the rank of labels to be 1, but got "+r.rank})),x(1===o.rank,(function(){return"Expected the rank of predictions to be 1, but got "+o.rank})),x(r.shape[0]===o.shape[0],(function(){return"Mismatch in the number of examples: "+r.shape[0]+" vs. "+o.shape[0]+". Labels and predictions should have the same number of elements."})),x(n>0&&Number.isInteger(n),(function(){return"numClasses is required to be a positive integer, but got "+n}));var i=vr(r.asType("int32"),n),a=vr(o.asType("int32"),n);return i.transpose().matMul(a).asType("int32")}}),tf=Object.freeze({confusionMatrix:Zh}),ef=wn({fromPixels_:function(t,e){if(void 0===e&&(e=3),e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");var n="undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement;if(n&&n&&t.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");return Ot.fromPixels(t,e)}}),nf=Object.freeze({toPixels:function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,l,h,f,d,p,v,m,g,y,x,b,w,C,E,R,I;return c(this,(function(c){switch(c.label){case 0:if(n=cn(t,"img","toPixels"),t instanceof vt||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+n.rank+".");if(r=n.shape.slice(0,2),o=r[0],i=r[1],(a=2===n.rank?1:n.shape[2])>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);return[4,n.data()];case 1:return s=c.sent(),u=n.min(),l=n.max(),[4,Promise.all([u.data(),l.data()])];case 2:if(h=c.sent(),f=h[0],d=h[1],p=f[0],v=d[0],u.dispose(),l.dispose(),"float32"===n.dtype){if(p<0||v>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+p+" - "+v+"].")}else{if("int32"!==n.dtype)throw new Error("Unsupported type for toPixels: "+n.dtype+". Please use float32 or int32 tensors.");if(p<0||v>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+p+" - "+v+"].")}for(m="float32"===n.dtype?255:1,g=new Uint8ClampedArray(i*o*4),y=0;y<o*i;++y)x=void 0,b=void 0,w=void 0,C=void 0,1===a?(x=s[y]*m,b=s[y]*m,w=s[y]*m,C=255):3===a?(x=s[3*y]*m,b=s[3*y+1]*m,w=s[3*y+2]*m,C=255):4===a&&(x=s[4*y]*m,b=s[4*y+1]*m,w=s[4*y+2]*m,C=s[4*y+3]*m),g[0+(E=4*y)]=Math.round(x),g[E+1]=Math.round(b),g[E+2]=Math.round(w),g[E+3]=Math.round(C);return null!=e&&(e.width=i,e.height=o,R=e.getContext("2d"),I=new ImageData(g,i,o),R.putImageData(I,0,0)),n!==t&&n.dispose(),[2,g]}}))}))},fromPixels:ef}),rf=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),of=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(e){t.getMap().classNameMap[e.className]=[e,e.fromConfig]},t}();function af(t){x(null!=t.className,(function(){return"Class being registered does not have the static className property defined."})),x("string"==typeof t.className,(function(){return"className is required to be a string, but got type "+typeof t.className})),x(t.className.length>0,(function(){return"Class being registered has an empty-string as its className, which is disallowed."})),of.register(t)}var sf=Object.freeze({Serializable:rf,SerializationMap:of,registerClass:af}),uf=.001,cf=.1;function lf(){return 32===Ot.backend.floatPrecision()?uf:cf}function hf(t,e,n){var r=!0;if((L(t)||L(e))&&(r=!1),L(t)&&L(e)&&(r=!0),r){var o=t.constructor.name,i=e.constructor.name;if(o!==i)throw new Error("Arrays are of different type. Actual: "+o+". Expected: "+i)}if(Array.isArray(t)&&Array.isArray(e)){var a=sn(t),s=sn(e);if(!R(a,s))throw new Error("Arrays have different shapes. Actual: ["+a+"]. Expected: ["+s+"]")}var u=L(t)?t:C(t),c=L(e)?e:C(e);if(u.length!==c.length)throw new Error("Arrays have different lengths actual: "+u.length+" vs expected: "+c.length+".\nActual:   "+u+".\nExpected: "+c+".");for(var l=0;l<c.length;++l){var h=u[l],f=c[l];if(!n(h,f))throw new Error("Arrays differ: actual["+l+"] = "+h+", expected["+l+"] = "+f+".\nActual:   "+u+".\nExpected: "+c+".")}}function ff(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var df=Object.freeze({TEST_EPSILON_FLOAT16:cf,expectArraysClose:function(t,e,n){return null==n&&(n=lf()),hf(t,e,(function(t,e){return ff(t,e,n)}))},testEpsilon:lf,expectPromiseToFail:function(t,e){t().then((function(){return e.fail()}),(function(){return e()}))},expectArraysEqual:function(t,e){var n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return V(t)||V(t[0])||V(e)||V(e[0])?hf(t,n,(function(t,e){return t==e})):hf(t,e,(function(t,e){return ff(t,e,0)}))},expectNumbersClose:function(t,e,n){if(null==n&&(n=lf()),!ff(t,e,n))throw new Error("Numbers differ: actual === "+t+", expected === "+e)},expectValuesInRange:function(t,e,n){for(var r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error("Value out of range:"+t[r]+" low: "+e+", high: "+n)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}}),pf="1.2.10",vf=Object.freeze({gpgpu_util:ca,webgl_util:Pe,forceHalfFloat:function(){f.set("WEBGL_FORCE_F16_TEXTURES",!0)},MathBackendWebGL:ys,setWebGLContext:Wt,GPGPUContext:la}),mf=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),o=r.value,i=r.grads;if(null!=n){var a=n.map((function(t){return{name:t.name,tensor:i[t.name]}}));this.applyGradients(a)}else this.applyGradients(i);return je(i),e?o:(o.dispose(),null)},Object.defineProperty(e.prototype,"iterations",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),e.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},e.prototype.computeGradients=function(t,e){return Jr(t,e)},e.prototype.dispose=function(){null!=this.iterations_&&je(this.iterations_)},e.prototype.saveIterations=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:"iter",tensor:Sn(this.iterations_,"int32")}]}))}))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}))}))},e.prototype.extractIterations=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return e=this,[4,t[0].tensor.data()];case 1:return e.iterations_=n.sent()[0],[2,t.slice(1)]}}))}))},e}(rf);Object.defineProperty(mf,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var gf=function(t){function e(e,n,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=e,o.rho=n,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Ot.backend.epsilon()),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Ot.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accum_grad",variable:$e((function(){return Un(o).variable(!1)}))}),null==e.accumulatedUpdates[r]&&(e.accumulatedUpdates[r]={originalName:n+"/accum_var",variable:$e((function(){return Un(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedGrads[r].variable,s=e.accumulatedUpdates[r].variable;$e((function(){var t=a.mul(e.rho).add(i.square().mul(1-e.rho)),n=s.add(e.epsilon).sqrt().div(a.add(e.epsilon).sqrt()).mul(i),r=s.mul(e.rho).add(n.square().mul(1-e.rho));a.assign(t),s.assign(r);var u=n.mul(-e.learningRate).add(o);o.assign(u)}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedUpdates&&(je(this.accumulatedGrads.map((function(t){return t.variable}))),je(this.accumulatedUpdates.map((function(t){return t.variable}))))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=t.length/2,this.accumulatedGrads=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},e.className="Adadelta",e}(mf);af(gf);var yf=function(t){function e(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads=[],r}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Ot.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accumulator",variable:$e((function(){return Bn(o.shape,e.initialAccumulatorValue).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedGrads[r].variable;$e((function(){var t=a.add(i.square());a.assign(t);var n=i.div(t.add(Ot.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);o.assign(n)}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedGrads&&je(this.accumulatedGrads.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},e.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},e.className="Adagrad",e}(mf);af(yf);var xf=function(t){function e(e,n,r,o){void 0===o&&(o=null);var i=t.call(this)||this;return i.learningRate=e,i.beta1=n,i.beta2=r,i.epsilon=o,i.accumulatedFirstMoment=[],i.accumulatedSecondMoment=[],$e((function(){i.accBeta1=Sn(n).variable(),i.accBeta2=Sn(r).variable()})),null==o&&(i.epsilon=Ot.backend.epsilon()),i}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);$e((function(){var r=Wu(1,e.accBeta1),o=Wu(1,e.accBeta2);n.forEach((function(n,i){var a=Ot.registeredVariables[n];null==e.accumulatedFirstMoment[i]&&(e.accumulatedFirstMoment[i]={originalName:n+"/m",variable:$e((function(){return Un(a).variable(!1)}))}),null==e.accumulatedSecondMoment[i]&&(e.accumulatedSecondMoment[i]={originalName:n+"/v",variable:$e((function(){return Un(a).variable(!1)}))});var s=Array.isArray(t)?t[i].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[i].variable,c=e.accumulatedSecondMoment[i].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2).add(s.square().mul(1-e.beta2)),f=l.div(r),d=h.div(o);u.assign(l),c.assign(h);var p=f.div(d.sqrt().add(e.epsilon)).mul(-e.learningRate).add(a);a.assign(p)}})),e.accBeta1.assign(e.accBeta1.mul(e.beta1)),e.accBeta2.assign(e.accBeta2.mul(e.beta2))})),this.incrementIterations()},e.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&je(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&je(this.accumulatedSecondMoment.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e,n=this;return c(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),$e((function(){n.accBeta1.assign(Fu(n.beta1,n.iterations_+1)),n.accBeta2.assign(Fu(n.beta2,n.iterations_+1))})),e=t.length/2,this.accumulatedFirstMoment=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},e.className="Adam",e}(mf);af(xf);var bf=function(t){function e(e,n,r,o,i){void 0===o&&(o=null),void 0===i&&(i=0);var a=t.call(this)||this;return a.learningRate=e,a.beta1=n,a.beta2=r,a.epsilon=o,a.decay=i,a.accumulatedFirstMoment=[],a.accumulatedWeightedInfNorm=[],$e((function(){a.iteration=Sn(0).variable(),a.accBeta1=Sn(n).variable()})),null==o&&(a.epsilon=Ot.backend.epsilon()),a}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);$e((function(){var r=Wu(1,e.accBeta1),o=Ru(-e.learningRate,e.iteration.mul(e.decay).add(1));n.forEach((function(n,i){var a=Ot.registeredVariables[n];null==e.accumulatedFirstMoment[i]&&(e.accumulatedFirstMoment[i]={originalName:n+"/m",variable:Un(a).variable(!1)}),null==e.accumulatedWeightedInfNorm[i]&&(e.accumulatedWeightedInfNorm[i]={originalName:n+"/v",variable:Un(a).variable(!1)});var s=Array.isArray(t)?t[i].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[i].variable,c=e.accumulatedWeightedInfNorm[i].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2),f=s.abs(),d=h.maximum(f);u.assign(l),c.assign(d);var p=o.div(r).mul(l.div(d.add(e.epsilon))).add(a);a.assign(p)}})),e.iteration.assign(e.iteration.add(1)),e.accBeta1.assign(e.accBeta1.mul(e.beta1))})),this.incrementIterations()},e.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&je(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&je(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for Adamax yet.")}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for Adamax yet.")}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},e.className="Adamax",e}(mf);af(bf);var wf=function(t){function e(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Array.isArray(t)?t[r].tensor:t[n];if(null!=o){var i=Ot.registeredVariables[n];$e((function(){var t=e.c.mul(o).add(i);i.assign(t)}))}})),this.incrementIterations()},e.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=Ke(Sn(-t))},e.prototype.dispose=function(){this.c.dispose()},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=e.sent()).length)throw new Error("SGD optimizer does not have settable weights.");return[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate}},e.fromConfig=function(t,e){return new t(e.learningRate)},e.className="SGD",e}(mf);af(wf);var Cf=function(t){function e(e,n,r){void 0===r&&(r=!1);var o=t.call(this,e)||this;return o.learningRate=e,o.momentum=n,o.useNesterov=r,o.accumulations=[],o.m=Sn(o.momentum),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Ot.registeredVariables[n];null==e.accumulations[r]&&(e.accumulations[r]={originalName:n+"/momentum",variable:$e((function(){return Un(o).variable(!1)}))});var i=e.accumulations[r].variable,a=Array.isArray(t)?t[r].tensor:t[n];null!=a&&$e((function(){var t,n=e.m.mul(i).add(a);t=e.useNesterov?e.c.mul(a.add(n.mul(e.m))).add(o):e.c.mul(n).add(o),i.assign(n),o.assign(t)}))})),this.incrementIterations()},e.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&je(this.accumulations.map((function(t){return t.variable})))},e.prototype.setMomentum=function(t){this.momentum=t},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},e.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},e.className="Momentum",e}(wf);af(Cf);var Ef=function(t){function e(e,n,r,o,i){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===i&&(i=!1);var a=t.call(this)||this;return a.learningRate=e,a.decay=n,a.momentum=r,a.epsilon=o,a.accumulatedMeanSquares=[],a.accumulatedMoments=[],a.accumulatedMeanGrads=[],a.centered=i,null==o&&(a.epsilon=Ot.backend.epsilon()),a}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Ot.registeredVariables[n];null==e.accumulatedMeanSquares[r]&&(e.accumulatedMeanSquares[r]={originalName:n+"/rms",variable:$e((function(){return Un(o).variable(!1)}))}),null==e.accumulatedMoments[r]&&(e.accumulatedMoments[r]={originalName:n+"/momentum",variable:$e((function(){return Un(o).variable(!1)}))}),null==e.accumulatedMeanGrads[r]&&e.centered&&(e.accumulatedMeanGrads[r]={originalName:n+"/mg",variable:$e((function(){return Un(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedMeanSquares[r].variable,s=e.accumulatedMoments[r].variable;$e((function(){var t=a.mul(e.decay).add(i.square().mul(1-e.decay));if(e.centered){var n=e.accumulatedMeanGrads[r].variable,u=n.mul(e.decay).add(i.mul(1-e.decay)),c=s.mul(e.momentum).add(i.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));a.assign(t),n.assign(u),s.assign(c);var l=o.sub(c);o.assign(l)}else{var h=a.mul(e.decay).add(i.square().mul(1-e.decay));c=s.mul(e.momentum).add(i.mul(e.learningRate).div(h.add(e.epsilon).sqrt())),a.assign(h),s.assign(c),l=o.sub(c),o.assign(l)}}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&je(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&je(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&je(this.accumulatedMoments.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=this.centered?t.length/3:t.length/2,this.accumulatedMeanSquares=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},e.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},e.className="RMSProp",e}(mf);af(Ef);var Rf=function(){function t(){}return t.sgd=function(t){return new wf(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new Cf(t,e,n)},t.rmsprop=function(t,e,n,r,o){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===o&&(o=!1),new Ef(t,e,n,r,o)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new xf(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=null),new gf(t,e,n)},t.adamax=function(t,e,n,r,o){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===o&&(o=0),new bf(t,e,n,r,o)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new yf(t,e)},t}(),If={sgd:Rf.sgd,momentum:Rf.momentum,adadelta:Rf.adadelta,adagrad:Rf.adagrad,rmsprop:Rf.rmsprop,adamax:Rf.adamax,adam:Rf.adam},Af="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:void 0!==i?i:function(t){return t()};function Sf(){return new Promise((function(t){return Af((function(){return t()}))}))}dt=Jl}.call(this,n(1),n(2),n(3).Buffer,n(7).setImmediate)},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],l=!1,h=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&d())}function d(){if(!l){var t=s(f);l=!0;for(var e=c.length;e;){for(u=c,c=[];++h<e;)u&&u[h].run();h=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||l||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(4),o=n(5),i=n(6);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),o=(t=s(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|d(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?s(t,0):f(t,e);if("Buffer"===e.type&&i(e.data))return f(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(l(e),t=s(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function f(t,e){var n=e.length<0?0:0|d(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return V(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(t).length;default:if(r)return V(t).length;e=(""+e).toLowerCase(),r=!0}}function v(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return T(this,e,n);case"utf8":case"utf-8":return A(this,e,n);case"ascii":return k(this,e,n);case"latin1":case"binary":return N(this,e,n);case"base64":return I(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function g(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,o);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,o){var i,a=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,n/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){var l=-1;for(i=n;i<s;i++)if(c(t,i)===c(e,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var h=!0,f=0;f<u;f++)if(c(t,i+f)!==c(e,f)){h=!1;break}if(h)return i}return-1}function x(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function b(t,e,n,r){return G(V(e,t.length-n),t,n,r)}function w(t,e,n,r){return G(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function C(t,e,n,r){return w(t,e,n,r)}function E(t,e,n,r){return G(z(e),t,n,r)}function R(t,e,n,r){return G(function(t,e){for(var n,r,o,i=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function I(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function A(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,a,s,u,c=t[o],l=null,h=c>239?4:c>223?3:c>191?2:1;if(o+h<=n)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(i=t[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(u=(15&c)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=t[o+1],a=t[o+2],s=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,h=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=h}return function(t){var e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=S));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var a=t[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?A(this,0,t):v.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,o){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),a=(n>>>=0)-(e>>>=0),s=Math.min(i,a),c=this.slice(r,o),l=t.slice(e,n),h=0;h<s;++h)if(c[h]!==l[h]){i=c[h],a=l[h];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return g(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return g(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return x(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return C(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function k(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function N(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function T(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=U(t[i]);return o}function D(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function _(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function O(t,e,n,r,o,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function M(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function F(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function B(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function P(t,e,n,r,i){return i||B(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function L(t,e,n,r,i){return i||B(t,0,n,8),o.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var o=e-t;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},u.prototype.readUInt8=function(t,e){return e||_(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||_(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||_(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||_(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||_(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||_(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||_(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||_(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||_(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||_(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||_(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||_(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||_(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||_(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):F(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):F(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);O(this,t,e,n,o-1,-o)}var i=0,a=1,s=0;for(this[e]=255&t;++i<n&&(a*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/a>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);O(this,t,e,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[e+i]=255&t;--i>=0&&(a*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/a>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):F(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):F(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return P(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return P(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return L(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return L(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var a=u.isBuffer(t)?t:V(new u(t,r).toString()),s=a.length;for(i=0;i<n-e;++i)this[i+e]=a[i%s]}return this};var W=/[^+\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function V(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(W,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function G(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(1))},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=c(t),a=r[0],s=r[1],u=new i(function(t,e,n){return 3*(e+n)/4-n}(0,a,s)),l=0,h=s>0?a-4:a;for(n=0;n<h;n+=4)e=o[t.charCodeAt(n)]<<18|o[t.charCodeAt(n+1)]<<12|o[t.charCodeAt(n+2)]<<6|o[t.charCodeAt(n+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===s&&(e=o[t.charCodeAt(n)]<<2|o[t.charCodeAt(n+1)]>>4,u[l++]=255&e);1===s&&(e=o[t.charCodeAt(n)]<<10|o[t.charCodeAt(n+1)]<<4|o[t.charCodeAt(n+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(l(t,a,a+16383>s?s:a+16383));1===o?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var o,i,a=[],s=e;s<n;s+=3)o=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,c=u>>1,l=-7,h=n?o-1:0,f=n?-1:1,d=t[e+h];for(h+=f,i=d&(1<<-l)-1,d>>=-l,l+=s;l>0;i=256*i+t[e+h],h+=f,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+t[e+h],h+=f,l-=8);if(0===i)i=1-c;else{if(i===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=c}return(d?-1:1)*a*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var a,s,u,c=8*i-o-1,l=(1<<c)-1,h=l>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,p=r?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(a++,u/=2),a+h>=l?(s=0,a=l):a+h>=1?(s=(e*u-1)*Math.pow(2,o),a+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,o),a=0));o>=8;t[n+d]=255&s,d+=p,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;t[n+d]=255&a,d+=p,a/=256,c-=8);t[n+d-p]|=128*v}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(8),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,o,i,a,s,u=1,c={},l=!1,h=t.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(t);f=f&&f.setTimeout?f:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){i.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(o=h.documentElement,r=function(t){var e=h.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):r=function(t){setTimeout(p,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&p(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),f.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return c[u]=o,r(u),u++},f.clearImmediate=d}function d(t){delete c[t]}function p(t){if(l)setTimeout(p,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{d(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(2))},function(t,e){},function(t,e){},function(t,e){},function(t,e,n){"use strict";n.r(e);var r=n(0),o=function(){function t(t,e){var n=this;r.tidy((function(){if("number"==typeof t)n.tensor=r.variable(r.scalar(t));else if(t instanceof Array)n.tensor=r.variable(r.tensor(t));else if(t instanceof a.Vector){if(!(e>=2&&e<=3))throw new Error("p5.Vectors must be 2 or 3-dimensional.");var o=t.array().slice(0,e);n.tensor=r.variable(r.tensor(o))}else{if(!(t instanceof r.Tensor))throw new Error("Tensors must be created from Numbers, Arrays, or p5.Vectors.");n.tensor=r.variable(t)}}))}return t.prototype.handleType=function(e,n){var r;if("number"==typeof e)r=i(e);else if(e instanceof a.Vector)r=i(e,n);else{if(!(e instanceof t))throw new Error("Operation only defined on Numbers, p5.Vectors, or Tensors.");r=e}return r},t.prototype.equals=function(t,e){var n=this,o=!1;return r.tidy((function(){var i=n.handleType(t,e);n.tensor.rank!==i.tensor.rank?o=!1:1===r.all(n.tensor.equal(i.tensor)).arraySync()&&(o=!0)})),o},t.prototype.handleRank=function(t){this.tensor.rank!==t.rank?(this.tensor.dispose(),this.tensor=r.variable(t)):this.tensor.assign(t)},t.prototype.add=function(t,e){var n=this;r.tidy((function(){var r=n.handleType(t,e),o=n.tensor.add(r.tensor);n.handleRank(o)}))},t.prototype.sub=function(t,e){var n=this;r.tidy((function(){var r=n.handleType(t,e),o=n.tensor.sub(r.tensor);n.handleRank(o)}))},t.prototype.mult=function(t,e){var n=this;r.tidy((function(){var r=n.handleType(t,e),o=n.tensor.mul(r.tensor);n.handleRank(o)}))},t.prototype.div=function(t,e){var n=this;r.tidy((function(){var r=n.handleType(t,e),o=n.tensor.div(r.tensor);n.handleRank(o)}))},t.prototype.dot=function(t,e){var n=this;r.tidy((function(){var r=n.handleType(t,e),o=n.tensor.dot(r.tensor);n.handleRank(o)}))},t.prototype.abs=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.abs();t=i(n)})),t},t.prototype.ceil=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.ceil();t=i(n)})),t},t.prototype.constrain=function(t,e){var n,o=this;return r.tidy((function(){var r=o.tensor.clipByValue(t,e);n=i(r)})),n},t.prototype.exp=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.exp();t=i(n)})),t},t.prototype.floor=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.floor();t=i(n)})),t},t.prototype.log=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.log();t=i(n)})),t},t.prototype.max=function(){var t,e=this;return r.tidy((function(){var n=r.max(e.tensor);t=n.arraySync()})),t},t.prototype.min=function(){var t,e=this;return r.tidy((function(){var n=r.min(e.tensor);t=n.arraySync()})),t},t.prototype.pow=function(t){var e,n=this;return r.tidy((function(){var r=n.handleType(t),o=n.tensor.pow(r.tensor);e=i(o)})),e},t.prototype.round=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.round();t=i(n)})),t},t.prototype.sq=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.square();t=i(n)})),t},t.prototype.sqrt=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.sqrt();t=i(n)})),t},t.prototype.acos=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.acos();t=i(n)})),t},t.prototype.asin=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.asin();t=i(n)})),t},t.prototype.atan=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.atan();t=i(n)})),t},t.prototype.atan2=function(t){var e,n=this;return r.tidy((function(){var r=n.handleType(t),o=n.tensor.atan2(r.tensor);e=i(o)})),e},t.prototype.cos=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.cos();t=i(n)})),t},t.prototype.sin=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.sin();t=i(n)})),t},t.prototype.tan=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.tan();t=i(n)})),t},t.prototype.copy=function(){var t,e=this;return r.tidy((function(){var n=e.tensor.clone();t=i(n)})),t},t.eye=function(t,e){var n;return r.tidy((function(){var o=r.eye(t,e);n=i(o)})),n},t.fill=function(t,e){var n;return r.tidy((function(){var o=r.fill(t,e);n=i(o)})),n},t.linspace=function(t,e,n){var o;return r.tidy((function(){var a=r.linspace(t,e,n);o=i(a)})),o},t.ones=function(t){var e;return r.tidy((function(){var n=r.ones(t);e=i(n)})),e},t.random=function(t){var e;return r.tidy((function(){var n=r.randomUniform(t);e=i(n)})),e},t.randomGaussian=function(t,e,n){var o;return r.tidy((function(){var a=r.randomNormal(t,e,n);o=i(a)})),o},t.range=function(t,e,n){var o;return r.tidy((function(){var a=r.range(t,e,n);o=i(a)})),o},t.zeros=function(t){var e;return r.tidy((function(){var n=r.zeros(t);e=i(n)})),e},t}(),i=function(t,e){return new o(t,e)};p5.prototype.tfc=r,p5.prototype.Tensor=o,p5.prototype.createTensor=i;var a=e.default=p5}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L3RmLWNvcmUuZXNtLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RlbnNvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInRoaXMiLCJjb25zdHJ1Y3RvciIsIlByb21pc2UiLCJhIiwidSIsIm5leHQiLCJ0aHJvdyIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwicmV0dXJuIiwiaXRlcmF0b3IiLCJUeXBlRXJyb3IiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiZ2xvYmFsIiwiZmxhZ3MiLCJmbGFnUmVnaXN0cnkiLCJ1cmxGbGFncyIsInBvcHVsYXRlVVJMRmxhZ3MiLCJzZXRQbGF0Zm9ybSIsInBsYXRmb3JtIiwiY29uc29sZSIsIndhcm4iLCJwbGF0Zm9ybU5hbWUiLCJyZWdpc3RlckZsYWciLCJldmFsdWF0aW9uRm4iLCJzZXRIb29rIiwic2V0IiwiZXZhbHVhdGVGbGFnIiwiZ2V0TnVtYmVyIiwiZ2V0Qm9vbCIsImdldEZsYWdzIiwiY29uZmlndXJhYmxlIiwiRXJyb3IiLCJzZXRGbGFncyIsImFzc2lnbiIsInJlc2V0IiwibG9jYXRpb24iLCJzZWFyY2giLCJ0ZmpzZmxhZ3MiLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJhcmd1bWVudHMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJqb2luIiwiZnJlZXplIiwiRW52aXJvbm1lbnQiLCJnZXRRdWVyeVBhcmFtcyIsInNldEVudmlyb25tZW50R2xvYmFsIiwiTWF0aCIsInJhbmRvbSIsIm1heCIsIm1pbiIsImgiLCJmIiwieSIsInYiLCJpc0FycmF5IiwiXyIsImciLCJ4IiwiYiIsInRhbmgiLCJleHAiLCJ3IiwiY2VpbCIsInNxcnQiLCJDIiwicmVwZWF0IiwiRSIsInNldFRpbWVvdXQiLCJSIiwic2xpY2UiLCJJIiwibWFwIiwiY29uY2F0IiwiZXZlcnkiLCJrIiwic29ydCIsIm5ld1NoYXBlIiwia2VwdERpbXMiLCJOIiwiRmxvYXQzMkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQ4QXJyYXkiLCJTIiwiQSIsImlzTmFOIiwiaXNGaW5pdGUiLCJUIiwiRCIsIk8iLCJGIiwiTSIsIlN0cmluZyIsIkIiLCJQIiwiTCIsIlciLCJVIiwiViIsInoiLCJyb3VuZCIsIkciLCJyZWR1Y2UiLCJIIiwicSIsIiQiLCJub3ciLCJLIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaiIsImVuY29kZSIsIlgiLCJkZWNvZGUiLCJZIiwic2h1ZmZsZSIsImNsYW1wIiwibmVhcmVzdExhcmdlckV2ZW4iLCJzdW0iLCJyYW5kVW5pZm9ybSIsImRpc3RTcXVhcmVkIiwiYXNzZXJ0IiwiYXNzZXJ0U2hhcGVzTWF0Y2giLCJhc3NlcnROb25OdWxsIiwiZmxhdHRlbiIsInNpemVGcm9tU2hhcGUiLCJpc1NjYWxhclNoYXBlIiwiYXJyYXlzRXF1YWwiLCJpc0ludCIsInNpemVUb1NxdWFyaXNoU2hhcGUiLCJjcmVhdGVTaHVmZmxlZEluZGljZXMiLCJVaW50MzJBcnJheSIsInJpZ2h0UGFkIiwicmVwZWF0ZWRUcnkiLCJpbmZlckZyb21JbXBsaWNpdFNoYXBlIiwicGFyc2VBeGlzUGFyYW0iLCJzcXVlZXplU2hhcGUiLCJnZXRUeXBlZEFycmF5RnJvbURUeXBlIiwiZ2V0QXJyYXlGcm9tRFR5cGUiLCJjaGVja0NvbnZlcnNpb25Gb3JFcnJvcnMiLCJpc1ZhbGlkRHR5cGUiLCJoYXNFbmNvZGluZ0xvc3MiLCJpc1R5cGVkQXJyYXkiLCJieXRlc1BlckVsZW1lbnQiLCJieXRlc0Zyb21TdHJpbmdBcnJheSIsImlzU3RyaW5nIiwiaXNCb29sZWFuIiwiaXNOdW1iZXIiLCJpbmZlckR0eXBlIiwiaXNGdW5jdGlvbiIsIm5lYXJlc3REaXZpc29yIiwiY29tcHV0ZVN0cmlkZXMiLCJ0b1R5cGVkQXJyYXkiLCJ0b05lc3RlZEFycmF5IiwibWFrZU9uZXNUeXBlZEFycmF5IiwibWFrZVplcm9zVHlwZWRBcnJheSIsImFzc2VydE5vbk5lZ2F0aXZlSW50ZWdlckRpbWVuc2lvbnMiLCJmZXRjaCIsImVuY29kZVN0cmluZyIsImRlY29kZVN0cmluZyIsIlEiLCJiYWNrZW5kVGltZXIiLCJsb2dnZXIiLCJKIiwicHJvZmlsZUtlcm5lbCIsInRpbWUiLCJkYXRhIiwiZHR5cGUiLCJnZXRFeHRyYVByb2ZpbGVJbmZvIiwibG9nS2VybmVsUHJvZmlsZSIsImtlcm5lbE1zIiwicmFuayIsInNpemUiLCJzaGFwZSIsInRvU3RyaW5nIiwibG9nIiwiWiIsInR0IiwiZXQiLCJydCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwib3QiLCJhdCIsIml0IiwidmFsdWVzIiwic3RyaWRlcyIsImxvY1RvSW5kZXgiLCJpbmRleFRvTG9jIiwiZmxvb3IiLCJ0b1RlbnNvciIsImN0IiwibWFrZSIsInN0IiwidXQiLCJsdCIsImtlcHQiLCJpc0Rpc3Bvc2VkSW50ZXJuYWwiLCJkYXRhSWQiLCJpZCIsIm5leHRUZW5zb3JJZCIsInJhbmtUeXBlIiwicmVnaXN0ZXJUZW5zb3IiLCJ3cml0ZSIsInRocm93SWZEaXNwb3NlZCIsImFzMUQiLCJhc1NjYWxhciIsInJlc2hhcGUiLCJhczJEIiwiYXMzRCIsImFzNEQiLCJhczVEIiwiYXNUeXBlIiwiY2FzdCIsImJ1ZmZlciIsImJ1ZmZlclN5bmMiLCJkYXRhU3luYyIsImFycmF5IiwiYXJyYXlTeW5jIiwicmVhZCIsInJlYWRTeW5jIiwiYnl0ZXMiLCJkaXNwb3NlIiwiaXNEaXNwb3NlZCIsImRpc3Bvc2VUZW5zb3IiLCJ0b0Zsb2F0IiwidG9JbnQiLCJ0b0Jvb2wiLCJwcmludCIsInJlc2hhcGVBcyIsImV4cGFuZERpbXMiLCJjdW1zdW0iLCJzcXVlZXplIiwiY2xvbmUiLCJvbmVIb3QiLCJmaWxsIiwiZnJvbSIsIm50IiwidGlsZSIsImdhdGhlciIsIm1hdE11bCIsImRvdCIsIm5vcm0iLCJyZXZlcnNlIiwic3RhY2siLCJ1bnN0YWNrIiwicGFkIiwiYmF0Y2hOb3JtYWxpemF0aW9uIiwiYmF0Y2hOb3JtIiwiYWxsIiwiYW55IiwibG9nU3VtRXhwIiwicHJvZCIsIm1lYW4iLCJhcmdNaW4iLCJhcmdNYXgiLCJhZGQiLCJhZGRTdHJpY3QiLCJhdGFuMiIsInN1YiIsInN1YlN0cmljdCIsInBvdyIsInBvd1N0cmljdCIsIm11bCIsIm11bFN0cmljdCIsImRpdiIsImZsb29yRGl2IiwiZGl2U3RyaWN0IiwibWluaW11bSIsIm1pbmltdW1TdHJpY3QiLCJtYXhpbXVtIiwibWF4aW11bVN0cmljdCIsIm1vZCIsIm1vZFN0cmljdCIsInNxdWFyZWREaWZmZXJlbmNlIiwic3F1YXJlZERpZmZlcmVuY2VTdHJpY3QiLCJ0cmFuc3Bvc2UiLCJub3RFcXVhbCIsIm5vdEVxdWFsU3RyaWN0IiwibGVzcyIsImxlc3NTdHJpY3QiLCJlcXVhbCIsImVxdWFsU3RyaWN0IiwibGVzc0VxdWFsIiwibGVzc0VxdWFsU3RyaWN0IiwiZ3JlYXRlciIsImdyZWF0ZXJTdHJpY3QiLCJncmVhdGVyRXF1YWwiLCJncmVhdGVyRXF1YWxTdHJpY3QiLCJsb2dpY2FsQW5kIiwibG9naWNhbE9yIiwibG9naWNhbE5vdCIsImxvZ2ljYWxYb3IiLCJ3aGVyZSIsIm5lZyIsInNpZ24iLCJpc0luZiIsImV4cG0xIiwibG9nMXAiLCJyc3FydCIsInNxdWFyZSIsInJlY2lwcm9jYWwiLCJhYnMiLCJjbGlwQnlWYWx1ZSIsInJlbHUiLCJyZWx1NiIsImVsdSIsInNlbHUiLCJsZWFreVJlbHUiLCJwcmVsdSIsInNpZ21vaWQiLCJsb2dTaWdtb2lkIiwic29mdHBsdXMiLCJ6ZXJvc0xpa2UiLCJvbmVzTGlrZSIsInNpbiIsImNvcyIsInRhbiIsImFzaW4iLCJhY29zIiwiYXRhbiIsInNpbmgiLCJjb3NoIiwiYXNpbmgiLCJhY29zaCIsImF0YW5oIiwiZXJmIiwic3RlcCIsInNvZnRtYXgiLCJsb2dTb2Z0bWF4IiwicmVzaXplQmlsaW5lYXIiLCJpbWFnZSIsInJlc2l6ZU5lYXJlc3ROZWlnaGJvciIsImNvbnYxZCIsImNvbnYyZCIsImNvbnYyZFRyYW5zcG9zZSIsImRlcHRod2lzZUNvbnYyRCIsImRlcHRod2lzZUNvbnYyZCIsInNlcGFyYWJsZUNvbnYyZCIsImF2Z1Bvb2wiLCJtYXhQb29sIiwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb24iLCJwb29sIiwidmFyaWFibGUiLCJodCIsInVuc29ydGVkU2VnbWVudFN1bSIsImJhdGNoVG9TcGFjZU5EIiwic3BhY2VUb0JhdGNoTkQiLCJ0b3BrIiwic3RyaWRlZFNsaWNlIiwiZGVwdGhUb1NwYWNlIiwiZmZ0Iiwic3BlY3RyYWwiLCJpZmZ0IiwicmZmdCIsImlyZmZ0IiwiaGFzSW5zdGFuY2UiLCJ0cmFpbmFibGUiLCJuZXh0VmFyaWFibGVJZCIsInJlZ2lzdGVyVmFyaWFibGUiLCJkaXNwb3NlVmFyaWFibGUiLCJGdW5jdGlvbiIsInB0IiwiZnQiLCJkdCIsInZ0IiwibXQiLCJndCIsIlIwIiwiUjEiLCJSMiIsIlIzIiwiUjQiLCJSNSIsIlI2IiwiZmxvYXQzMiIsImludDMyIiwiYm9vbCIsImNvbXBsZXg2NCIsInl0IiwieHQiLCJidCIsInd0IiwiQ3QiLCJFdCIsImhhcyIsIlNldCIsIlJ0IiwiSXQiLCJtYWtlVHlwZXNNYXRjaCIsImFzc2VydFR5cGVzTWF0Y2giLCJpc1RlbnNvckluTGlzdCIsImdldFRlbnNvcnNJbkNvbnRhaW5lciIsImt0IiwicmVnaXN0ZXJlZFZhcmlhYmxlcyIsIm5leHRUYXBlTm9kZUlkIiwibnVtQnl0ZXMiLCJudW1UZW5zb3JzIiwibnVtU3RyaW5nVGVuc29ycyIsIm51bURhdGFCdWZmZXJzIiwiZ3JhZGllbnREZXB0aCIsImtlcm5lbERlcHRoIiwic2NvcGVTdGFjayIsIm5leHRTY29wZUlkIiwidGVuc29ySW5mbyIsIldlYWtNYXAiLCJwcm9maWxpbmciLCJhY3RpdmVQcm9maWxlIiwibmV3Qnl0ZXMiLCJuZXdUZW5zb3JzIiwicGVha0J5dGVzIiwia2VybmVscyIsInJlc3VsdCIsIk50IiwiRU5WIiwicmVnaXN0cnkiLCJyZWdpc3RyeUZhY3RvcnkiLCJwZW5kaW5nQmFja2VuZEluaXRJZCIsInN0YXRlIiwicmVhZHkiLCJwZW5kaW5nQmFja2VuZEluaXQiLCJiYWNrZW5kSW5zdGFuY2UiLCJnZXRTb3J0ZWRCYWNrZW5kcyIsImluaXRpYWxpemVCYWNrZW5kIiwic3VjY2VzcyIsInNldEJhY2tlbmQiLCJiYWNrZW5kTmFtZSIsImluaXRpYWxpemVCYWNrZW5kc0FuZFJldHVybkJlc3QiLCJhc3luY0luaXQiLCJiYWNrZW5kTmFtZXMiLCJrZXlzIiwiZmluZEJhY2tlbmQiLCJmaW5kQmFja2VuZEZhY3RvcnkiLCJmYWN0b3J5IiwicmVnaXN0ZXJCYWNrZW5kIiwicHJpb3JpdHkiLCJwcm9maWxlciIsInJlc29sdmUiLCJjYXRjaCIsIm1lc3NhZ2UiLCJyZW1vdmVCYWNrZW5kIiwibW92ZURhdGEiLCJ0aWR5Iiwic2NvcGVkUnVuIiwic3RhcnRTY29wZSIsImVuZFNjb3BlIiwiZXJyb3IiLCJhZGRUYXBlTm9kZSIsInJ1bktlcm5lbCIsImlzVGFwZU9uIiwiYWN0aXZlU2NvcGUiLCJrZWVwIiwiYmFja2VuZCIsImlucHV0cyIsIm91dHB1dHMiLCJzYXZlZCIsImdyYWRpZW50IiwiYWN0aXZlVGFwZSIsImJ5dGVzQWRkZWQiLCJ0b3RhbEJ5dGVzU25hcHNob3QiLCJ0ZW5zb3JzQWRkZWQiLCJ0b3RhbFRlbnNvcnNTbmFwc2hvdCIsImlucHV0U2hhcGVzIiwib3V0cHV0U2hhcGUiLCJyZWZDb3VudCIsInJlZ2lzdGVyIiwidHJhY2siLCJkaXNwb3NlRGF0YSIsImRlbGV0ZSIsImRpc3Bvc2VWYXJpYWJsZXMiLCJtZW1vcnkiLCJ1bnJlbGlhYmxlIiwicmVhc29ucyIsInByb2ZpbGUiLCJzdGFydFRhcGUiLCJlbmRUYXBlIiwic2NvcGVJZCIsImdyYWRpZW50cyIsImdyYWRzIiwiY3VzdG9tR3JhZCIsImdyYWRGdW5jIiwiZnJvbVBpeGVscyIsIndhbGxNcyIsIlN0Iiwid2luZG93IiwicHJvY2VzcyIsInNlbGYiLCJfdGZlbmdpbmUiLCJBdCIsImRvY3VtZW50IiwiV29ya2VyR2xvYmFsU2NvcGUiLCJ2ZXJzaW9ucyIsIm5vZGUiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJ0ZXN0IiwidmVuZG9yIiwiVHQiLCJEdCIsIl90IiwiT3QiLCJhbHBoYSIsImFudGlhbGlhcyIsInByZW11bHRpcGxpZWRBbHBoYSIsInByZXNlcnZlRHJhd2luZ0J1ZmZlciIsImRlcHRoIiwic3RlbmNpbCIsImZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQiLCJGdCIsIk10IiwiQnQiLCJhZGRFdmVudExpc3RlbmVyIiwicHJldmVudERlZmF1bHQiLCJnZXRDb250ZXh0IiwiaXNDb250ZXh0TG9zdCIsImRpc2FibGUiLCJERVBUSF9URVNUIiwiU1RFTkNJTF9URVNUIiwiQkxFTkQiLCJESVRIRVIiLCJQT0xZR09OX09GRlNFVF9GSUxMIiwiU0FNUExFX0NPVkVSQUdFIiwiZW5hYmxlIiwiU0NJU1NPUl9URVNUIiwiQ1VMTF9GQUNFIiwiY3VsbEZhY2UiLCJCQUNLIiwiT2Zmc2NyZWVuQ2FudmFzIiwiY3JlYXRlRWxlbWVudCIsIlB0IiwiTHQiLCJXdCIsIlV0IiwiUjMyRiIsIlIxNkYiLCJSR0JBMTZGIiwiUkdCQTMyRiIsIlJFRCIsIkhBTEZfRkxPQVQiLCJGTE9BVCIsIlJHQkEiLCJIQUxGX0ZMT0FUX09FUyIsImludGVybmFsRm9ybWF0RmxvYXQiLCJpbnRlcm5hbEZvcm1hdEhhbGZGbG9hdCIsImludGVybmFsRm9ybWF0UGFja2VkSGFsZkZsb2F0IiwiaW50ZXJuYWxGb3JtYXRQYWNrZWRGbG9hdCIsInRleHR1cmVGb3JtYXRGbG9hdCIsImRvd25sb2FkVGV4dHVyZUZvcm1hdCIsImRvd25sb2FkVW5wYWNrTnVtQ2hhbm5lbHMiLCJkZWZhdWx0TnVtQ2hhbm5lbHMiLCJ0ZXh0dXJlVHlwZUhhbGZGbG9hdCIsInRleHR1cmVUeXBlRmxvYXQiLCJWdCIsImdldEVycm9yIiwiTk9fRVJST1IiLCJxdCIsIlJFTkRFUiIsIlVQTE9BRCIsIlBJWEVMUyIsIkRPV05MT0FEIiwiVU5QQUNLRURfRkxPQVQxNiIsIlVOUEFDS0VEX0ZMT0FUMzIiLCJQQUNLRURfNFgxX1VOU0lHTkVEX0JZVEUiLCJQQUNLRURfMlgyX0ZMT0FUMzIiLCJQQUNLRURfMlgyX0ZMT0FUMTYiLCJ6dCIsIkd0IiwiSHQiLCJJTlZBTElEX0VOVU0iLCJJTlZBTElEX1ZBTFVFIiwiSU5WQUxJRF9PUEVSQVRJT04iLCJJTlZBTElEX0ZSQU1FQlVGRkVSX09QRVJBVElPTiIsIk9VVF9PRl9NRU1PUlkiLCJDT05URVhUX0xPU1RfV0VCR0wiLCIkdCIsInZlIiwiZ2V0RXh0ZW5zaW9uIiwiS3QiLCJjcmVhdGVTaGFkZXIiLCJWRVJURVhfU0hBREVSIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImdldFNoYWRlclBhcmFtZXRlciIsIkNPTVBJTEVfU1RBVFVTIiwiZ2V0U2hhZGVySW5mb0xvZyIsImp0IiwiRlJBR01FTlRfU0hBREVSIiwiUXQiLCJleGVjIiwiWHQiLCJZdCIsIkp0IiwiY3JlYXRlUHJvZ3JhbSIsIlp0IiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiTElOS19TVEFUVVMiLCJnZXRQcm9ncmFtSW5mb0xvZyIsInRlIiwidmFsaWRhdGVQcm9ncmFtIiwiVkFMSURBVEVfU1RBVFVTIiwiZWUiLCJjcmVhdGVCdWZmZXIiLCJiaW5kQnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiYnVmZmVyRGF0YSIsIlNUQVRJQ19EUkFXIiwibmUiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsInJlIiwiY3JlYXRlVGV4dHVyZSIsIm9lIiwiYWUiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImllIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJ2ZXJ0ZXhBdHRyaWJQb2ludGVyIiwiZW5hYmxlVmVydGV4QXR0cmliQXJyYXkiLCJzZSIsIm1lIiwiYWN0aXZlVGV4dHVyZSIsIlRFWFRVUkUwIiwiYmluZFRleHR1cmUiLCJURVhUVVJFXzJEIiwidWUiLCJnZXRVbmlmb3JtTG9jYXRpb24iLCJsZSIsImNlIiwidW5pZm9ybTFpIiwiaGUiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJwZSIsImZlIiwiY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyIsIkZSQU1FQlVGRkVSX0NPTVBMRVRFIiwiZGUiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0FUVEFDSE1FTlQiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX01JU1NJTkdfQVRUQUNITUVOVCIsIkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfRElNRU5TSU9OUyIsIkZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEIiwiTUFYX0NPTUJJTkVEX1RFWFRVUkVfSU1BR0VfVU5JVFMiLCJnZSIsInllIiwieGUiLCJiZSIsIndlIiwiQ2UiLCJFZSIsImdldFBhcmFtZXRlciIsIk1BWF9URVhUVVJFX1NJWkUiLCJSZSIsIk1BWF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiSWUiLCJrZSIsIk5lIiwiU2UiLCJUZSIsIkFlIiwidGV4SW1hZ2UyRCIsImRlbGV0ZVRleHR1cmUiLCJkZWxldGVGcmFtZWJ1ZmZlciIsIkRlIiwiZmVuY2VTeW5jIiwiX2UiLCJjYWxsQW5kQ2hlY2siLCJjYW5CZVJlcHJlc2VudGVkIiwiZ2V0V2ViR0xFcnJvck1lc3NhZ2UiLCJnZXRFeHRlbnNpb25PclRocm93IiwiY3JlYXRlVmVydGV4U2hhZGVyIiwiY3JlYXRlRnJhZ21lbnRTaGFkZXIiLCJjcmVhdGVTdGF0aWNWZXJ0ZXhCdWZmZXIiLCJjcmVhdGVTdGF0aWNJbmRleEJ1ZmZlciIsImdldE51bUNoYW5uZWxzIiwidmFsaWRhdGVUZXh0dXJlU2l6ZSIsImJpbmRWZXJ0ZXhCdWZmZXJUb1Byb2dyYW1BdHRyaWJ1dGUiLCJiaW5kVGV4dHVyZVVuaXQiLCJ1bmJpbmRUZXh0dXJlVW5pdCIsImdldFByb2dyYW1Vbmlmb3JtTG9jYXRpb25PclRocm93IiwiZ2V0UHJvZ3JhbVVuaWZvcm1Mb2NhdGlvbiIsImJpbmRUZXh0dXJlVG9Qcm9ncmFtVW5pZm9ybVNhbXBsZXIiLCJiaW5kQ2FudmFzVG9GcmFtZWJ1ZmZlciIsInZpZXdwb3J0IiwiY2FudmFzIiwid2lkdGgiLCJoZWlnaHQiLCJzY2lzc29yIiwiYmluZENvbG9yVGV4dHVyZVRvRnJhbWVidWZmZXIiLCJ1bmJpbmRDb2xvclRleHR1cmVGcm9tRnJhbWVidWZmZXIiLCJ2YWxpZGF0ZUZyYW1lYnVmZmVyIiwiZ2V0RnJhbWVidWZmZXJFcnJvck1lc3NhZ2UiLCJnZXRCYXRjaERpbSIsImdldFJvd3NDb2xzIiwiZ2V0U2hhcGVBczNEIiwiZ2V0VGV4dHVyZVNoYXBlRnJvbUxvZ2ljYWxTaGFwZSIsImlzUmVzaGFwZUZyZWUiLCJnZXRXZWJHTE1heFRleHR1cmVTaXplIiwicmVzZXRNYXhUZXh0dXJlU2l6ZSIsInJlc2V0TWF4VGV4dHVyZXNJblNoYWRlciIsImdldE1heFRleHR1cmVzSW5TaGFkZXIiLCJnZXRXZWJHTERpc2pvaW50UXVlcnlUaW1lclZlcnNpb24iLCJoYXNFeHRlbnNpb24iLCJpc1dlYkdMVmVyc2lvbkVuYWJsZWQiLCJpc0NhcGFibGVPZlJlbmRlcmluZ1RvRmxvYXRUZXh0dXJlIiwiaXNEb3dubG9hZEZsb2F0VGV4dHVyZUVuYWJsZWQiLCJpc1dlYkdMRmVuY2VFbmFibGVkIiwiT2UiLCJGZSIsIk1lIiwiQmUiLCJQZSIsIkxlIiwiV2UiLCJVZSIsIlZlIiwiemUiLCJHZSIsIkhlIiwicWUiLCIkZSIsIktlIiwiamUiLCJYZSIsIlllIiwiUWUiLCJKZSIsIlplIiwidG4iLCJlbiIsIm5uIiwicm4iLCJpbmRleE9mIiwib24iLCJhbiIsInNuIiwidW4iLCJsbiIsImNuIiwiaG4iLCJwbiIsImZuIiwiZG4iLCJ2biIsIm1uIiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJvcGVyYSIsInN1YnN0ciIsImduIiwiY29tcGxleF8iLCJjb21wbGV4IiwiJHJlYWwiLCIkaW1hZyIsInluIiwicmVhbF8iLCJyZWFsIiwiJGlucHV0IiwieG4iLCJpbWFnXyIsImltYWciLCJibiIsInduIiwiQ24iLCJFbiIsIlJuIiwiSW4iLCJrbiIsIk5uIiwiU24iLCJBbiIsIlRuIiwiRG4iLCJfbiIsImxpbnNwYWNlIiwiT24iLCJGbiIsIm9uZXNMaWtlXyIsIk1uIiwiJHgiLCJ6ZXJvc0xpa2VfIiwiQm4iLCJjb25jYXRfIiwiZmlsdGVyIiwiVm4iLCJQbiIsImNvbmNhdDFkXyIsIkxuIiwiY29uY2F0MmRfIiwiV24iLCJjb25jYXQzZF8iLCJVbiIsImNvbmNhdDRkXyIsInNwbGl0XyIsInpuIiwiZ2xvYmFsVGhpcyIsIkduIiwiY2hhckNvZGVBdCIsInMwIiwiczEiLCJzMiIsImRvdWJsZSIsInF1aWNrIiwiYWxlYSIsIkhuIiwieG9yMTI4IiwicW4iLCJ4b3J3b3ciLCIkbiIsIkRhdGUiLCJ4b3JzaGlmdDciLCJLbiIsInhvcjQwOTYiLCJqbiIsInR5Y2hlaSIsIlhuIiwiZW50cm9weSIsInJhbmRvbUJ5dGVzIiwiY3J5cHRvIiwibXNDcnlwdG8iLCJnZXRSYW5kb21WYWx1ZXMiLCJwbHVnaW5zIiwic2NyZWVuIiwicGFzcyIsImZyb21DaGFyQ29kZSIsIlluIiwiUW4iLCJzdGREZXYiLCJuZXh0VmFsIiwiTmFOIiwidHJ1bmNhdGVkIiwidXBwZXIiLCJsb3dlciIsIm5leHRWYWx1ZSIsImlzVmFsaWRUcnVuY2F0ZWQiLCJjb252ZXJ0VmFsdWUiLCJKbiIsImJldGEiLCJyYW5kdSIsInJhbmRuIiwiWm4iLCJjYW5SZXR1cm5GbG9hdCIsInJhbmdlIiwidHIiLCJlciIsIm5yIiwiYmF0Y2hUb1NwYWNlTkRfIiwicnIiLCJjYXN0XyIsIm9yIiwiY2xvbmVfIiwiYXIiLCJjdW1zdW1fIiwicGVybXV0ZWRYIiwiaXIiLCJkZXB0aFRvU3BhY2VfIiwic3IiLCJleHBhbmREaW1zXyIsInNwbGljZSIsImJyIiwidXIiLCJleWVfIiwiUnIiLCJsciIsIm11bHRpbm9taWFsXyIsIm11bHRpbm9taWFsIiwibG9naXRzMkQiLCJjciIsIm9uZUhvdF8iLCIkaW5kaWNlcyIsImhyIiwicGFkXyIsInByIiwicGFkMWRfIiwiZnIiLCJwYWQyZF8iLCJkciIsInBhZDNkXyIsInZyIiwicGFkNGRfIiwibXIiLCJyYW5kXyIsImdyIiwicmFuZG9tTm9ybWFsXyIsInlyIiwicmFuZG9tR2FtbWFfIiwieHIiLCJyYW5kb21Vbmlmb3JtXyIsInJlc2hhcGVfIiwid3IiLCJzcGFjZVRvQmF0Y2hORF8iLCJDciIsInNxdWVlemVfIiwiRXIiLCJzdGFja18iLCJ0aWxlXyIsIklyIiwidHJ1bmNhdGVkTm9ybWFsXyIsImtyIiwidW5zdGFja18iLCJOciIsIlNyIiwiQXIiLCJUciIsIkRyIiwiX3IiLCJPciIsIkZyIiwiTXIiLCJQciIsInNsaWNlUmFuayIsIm51bVVwZGF0ZXMiLCJzbGljZVNpemUiLCJvdXRwdXRTaXplIiwiTHIiLCJXciIsIlVyIiwiTUlOX1NBRkVfSU5URUdFUiIsIk1BWF9TQUZFX0lOVEVHRVIiLCJWciIsInpyIiwiR3IiLCJIciIsIllyIiwicXIiLCIkciIsImdyYWQiLCJLciIsImpyIiwic29tZSIsIlhyIiwiUXIiLCJzb2Z0bWF4XyIsIkpyIiwibG9nU29mdG1heF8iLCJaciIsImRhdGFNb3ZlciIsInRvIiwiZmxvYXRQcmVjaXNpb24iLCJlcHNpbG9uIiwiYmF0Y2hNYXRNdWwiLCJmdXNlZEJhdGNoTWF0TXVsIiwidHJhbnNwb3NlQSIsInRyYW5zcG9zZUIiLCJiaWFzIiwiYWN0aXZhdGlvbiIsInByZWx1QWN0aXZhdGlvbldlaWdodHMiLCJhZGROIiwic3VidHJhY3QiLCJtdWx0aXBseSIsInJlYWxEaXZpZGUiLCJzZWxlY3QiLCJlbHVEZXIiLCJpbnQiLCJjbGlwIiwiY29tcGxleEFicyIsImZ1c2VkQ29udjJkIiwiaW5wdXQiLCJjb252SW5mbyIsImNvbnYyZERlcklucHV0IiwiY29udjJkRGVyRmlsdGVyIiwiZnVzZWREZXB0aHdpc2VDb252MkQiLCJkZXB0aHdpc2VDb252MkREZXJJbnB1dCIsImRlcHRod2lzZUNvbnYyRERlckZpbHRlciIsImNvbnYzZCIsImNvbnYzZERlcklucHV0IiwiY29udjNkRGVyRmlsdGVyIiwibWF4UG9vbEJhY2twcm9wIiwiYXZnUG9vbEJhY2twcm9wIiwiYXZnUG9vbDNkIiwiYXZnUG9vbDNkQmFja3Byb3AiLCJtYXhQb29sM2QiLCJtYXhQb29sM2RCYWNrcHJvcCIsImdhdGhlck5EIiwic2NhdHRlck5EIiwicmVzaXplQmlsaW5lYXJCYWNrcHJvcCIsInJlc2l6ZU5lYXJlc3ROZWlnaGJvckJhY2twcm9wIiwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb240RCIsIkxSTkdyYWQiLCJub25NYXhTdXBwcmVzc2lvbiIsImNyb3BBbmRSZXNpemUiLCJzcGFyc2VUb0RlbnNlIiwiZGlhZyIsImVvIiwidW5zaGlmdCIsIm5vIiwicm8iLCJvbyIsImxvIiwiaW8iLCJhbyIsImNvIiwic28iLCJobyIsInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCIsInR5cGUiLCJ1byIsInBvIiwicGFkSW5mbyIsIm91dEhlaWdodCIsIm91dFdpZHRoIiwiYmF0Y2hTaXplIiwiZGF0YUZvcm1hdCIsImluSGVpZ2h0IiwiaW5XaWR0aCIsImluQ2hhbm5lbHMiLCJvdXRDaGFubmVscyIsInN0cmlkZUhlaWdodCIsInN0cmlkZVdpZHRoIiwiZmlsdGVySGVpZ2h0IiwiZmlsdGVyV2lkdGgiLCJlZmZlY3RpdmVGaWx0ZXJIZWlnaHQiLCJlZmZlY3RpdmVGaWx0ZXJXaWR0aCIsImRpbGF0aW9uSGVpZ2h0IiwiZGlsYXRpb25XaWR0aCIsImluU2hhcGUiLCJvdXRTaGFwZSIsImZpbHRlclNoYXBlIiwiZnJvbnQiLCJiYWNrIiwib3V0RGVwdGgiLCJpbkRlcHRoIiwic3RyaWRlRGVwdGgiLCJmaWx0ZXJEZXB0aCIsImVmZmVjdGl2ZUZpbHRlckRlcHRoIiwiZGlsYXRpb25EZXB0aCIsImZvIiwidm8iLCJtbyIsImdvIiwieW8iLCJ4byIsImJvIiwiY2FzdFRlbnNvciIsInJlc2hhcGVUZW5zb3IiLCJsaW5zcGFjZUltcGwiLCJ1cGNhc3RUeXBlIiwiYXhlc0FyZUlubmVyTW9zdERpbXMiLCJjb21iaW5lTG9jYXRpb25zIiwiY29tcHV0ZU91dEFuZFJlZHVjZVNoYXBlcyIsImV4cGFuZFNoYXBlVG9LZWVwRGltIiwiYXNzZXJ0QXhlc0FyZUlubmVyTW9zdERpbXMiLCJnZXRBeGVzUGVybXV0YXRpb24iLCJnZXRVbmRvQXhlc1Blcm11dGF0aW9uIiwiZ2V0SW5uZXJNb3N0QXhlcyIsImdldEJyb2FkY2FzdERpbXMiLCJnZXRSZWR1Y3Rpb25BeGVzIiwiYXNzZXJ0QW5kR2V0QnJvYWRjYXN0U2hhcGUiLCJhc3NlcnRQYXJhbXNDb25zaXN0ZW50IiwiY29tcHV0ZU91dFNoYXBlIiwiY29tcHV0ZVBvb2wyREluZm8iLCJjb21wdXRlUG9vbDNESW5mbyIsImNvbXB1dGVDb252MkRJbmZvIiwiY29tcHV0ZUNvbnYzREluZm8iLCJjb21wdXRlRGVmYXVsdFBhZCIsInR1cGxlVmFsdWVzQXJlT25lIiwiZWl0aGVyU3RyaWRlc09yRGlsYXRpb25zQXJlT25lIiwiY29udmVydENvbnYyRERhdGFGb3JtYXQiLCJ3byIsIkNvIiwiRW8iLCJSbyIsIlBJIiwiSW8iLCJzY29yZSIsImJveEluZGV4Iiwia28iLCJzdWJhcnJheSIsIk5vIiwiU28iLCJBbyIsImluZGV4IiwiVG8iLCJEbyIsInZhcmlhYmxlTmFtZXMiLCJ1c2VyQ29kZSIsIl9vIiwidXNlc1BhY2tlZFRleHR1cmVzIiwiT28iLCJ3aW5kb3dTaXplIiwiaW5TaXplIiwiRm8iLCJNbyIsIkJvIiwidmVyc2lvbiIsImF0dHJpYnV0ZSIsInZhcnlpbmdWcyIsInZhcnlpbmdGcyIsInRleHR1cmUyRCIsIm91dHB1dCIsImRlZmluZU91dHB1dCIsImRlZmluZVNwZWNpYWxOYU4iLCJkZWZpbmVTcGVjaWFsSW5mIiwiZGVmaW5lUm91bmQiLCJQbyIsIkxvIiwiV28iLCJVbyIsInNoYXBlSW5mbyIsImxvZ2ljYWxTaGFwZSIsImlzVW5pZm9ybSIsInpvIiwiY2hhckF0IiwidG9VcHBlckNhc2UiLCJ0ZXhTaGFwZSIsIllvIiwiUW8iLCJWbyIsIktvIiwiam8iLCJmbGF0T2Zmc2V0IiwiWG8iLCJHbyIsIkhvIiwicW8iLCJpc1BhY2tlZCIsIiRvIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiSm8iLCJabyIsInRhIiwiZWEiLCJuYSIsImFhIiwiaWEiLCJzYSIsInVhIiwibGEiLCJjYSIsImhhIiwicGEiLCJzdXBwb3J0c0Jyb2FkY2FzdGluZyIsImZhIiwiZ2V0Q3VzdG9tU2V0dXBGdW5jIiwibWluTG9jIiwiZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyIsIm1heExvYyIsImdsIiwidW5pZm9ybTFmIiwiZGEiLCJ2YSIsIm1hIiwiZ2EiLCJ5YSIsInhhIiwiYmEiLCJ3YSIsIkNhIiwiRWEiLCJSYSIsIklhIiwia2EiLCJOYSIsIlNhIiwiQWEiLCJUYSIsIkRhIiwiX2EiLCJPYSIsIkZhIiwiYmxvY2tTaXplIiwiZ2V0SGVpZ2h0Q29vcmRTdHJpbmciLCJnZXRXaWR0aENvb3JkU3RyaW5nIiwiZ2V0RGVwdGhDb29yZFN0cmluZyIsImdldE91dHB1dERlcHRoU2l6ZSIsImdldElucHV0U2FtcGxpbmdTdHJpbmciLCJNYSIsIkJhIiwiUGEiLCJMYSIsIldhIiwiemEiLCJHYSIsInZhbHVlTG9jIiwiSGEiLCJxYSIsIiRhIiwiS2EiLCJzbGljZURpbSIsImphIiwiWGEiLCJZYSIsIlVpbnQxNkFycmF5IiwiUWEiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01JTl9GSUxURVIiLCJORUFSRVNUIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiSmEiLCJaYSIsInRpIiwiVU5TSUdORURfQllURSIsImVpIiwibmkiLCJyaSIsIm9pIiwiYWkiLCJpaSIsIlBJWEVMX1BBQ0tfQlVGRkVSIiwiU1RSRUFNX1JFQUQiLCJyZWFkUGl4ZWxzIiwic2kiLCJnZXRCdWZmZXJTdWJEYXRhIiwidWkiLCJsaSIsImNpIiwiaGkiLCJjcmVhdGVWZXJ0ZXhCdWZmZXIiLCJjcmVhdGVJbmRleEJ1ZmZlciIsImNyZWF0ZUZsb2F0MzJNYXRyaXhUZXh0dXJlIiwiY3JlYXRlRmxvYXQxNk1hdHJpeFRleHR1cmUiLCJjcmVhdGVVbnNpZ25lZEJ5dGVzTWF0cml4VGV4dHVyZSIsImNyZWF0ZVBhY2tlZE1hdHJpeFRleHR1cmUiLCJjcmVhdGVGbG9hdDE2UGFja2VkTWF0cml4VGV4dHVyZSIsImJpbmRWZXJ0ZXhQcm9ncmFtQXR0cmlidXRlU3RyZWFtcyIsInVwbG9hZERlbnNlTWF0cml4VG9UZXh0dXJlIiwidXBsb2FkUGl4ZWxEYXRhVG9UZXh0dXJlIiwiY3JlYXRlQnVmZmVyRnJvbU91dHB1dFRleHR1cmUiLCJkb3dubG9hZEZsb2F0MzJNYXRyaXhGcm9tQnVmZmVyIiwiZG93bmxvYWRCeXRlRW5jb2RlZEZsb2F0TWF0cml4RnJvbU91dHB1dFRleHR1cmUiLCJkb3dubG9hZFBhY2tlZE1hdHJpeEZyb21CdWZmZXIiLCJkb3dubG9hZE1hdHJpeEZyb21QYWNrZWRPdXRwdXRUZXh0dXJlIiwicGkiLCJvdXRwdXRUZXh0dXJlIiwicHJvZ3JhbSIsImRpc3Bvc2VkIiwidmVydGV4QXR0cnNBcmVCb3VuZCIsIml0ZW1zVG9Qb2xsIiwidGV4dHVyZUZsb2F0RXh0ZW5zaW9uIiwiZGVidWciLCJjb2xvckJ1ZmZlckZsb2F0RXh0ZW5zaW9uIiwidGV4dHVyZUhhbGZGbG9hdEV4dGVuc2lvbiIsImNvbG9yQnVmZmVySGFsZkZsb2F0RXh0ZW5zaW9uIiwidmVydGV4QnVmZmVyIiwiaW5kZXhCdWZmZXIiLCJmcmFtZWJ1ZmZlciIsInRleHR1cmVDb25maWciLCJmaW5pc2giLCJkZWxldGVCdWZmZXIiLCJkZWxldGVNYXRyaXhUZXh0dXJlIiwiZG93bmxvYWRNYXRyaXhEcml2ZXIiLCJjcmVhdGVCdWZmZXJGcm9tVGV4dHVyZSIsImJpbmRUZXh0dXJlVG9GcmFtZUJ1ZmZlciIsInVuYmluZFRleHR1cmVUb0ZyYW1lQnVmZmVyIiwiY3JlYXRlQW5kV2FpdEZvckZlbmNlIiwiY3JlYXRlRmVuY2UiLCJwb2xsRmVuY2UiLCJTWU5DX0dQVV9DT01NQU5EU19DT01QTEVURSIsImZsdXNoIiwiY2xpZW50V2FpdFN5bmMiLCJBTFJFQURZX1NJR05BTEVEIiwiQ09ORElUSU9OX1NBVElTRklFRCIsImJlZ2luUXVlcnkiLCJlbmRRdWVyeSIsImlzUXVlcnlBdmFpbGFibGUiLCJxdWVyeSIsImlzRmVuY2VQYXNzZWQiLCJkb3dubG9hZE1hdHJpeEZyb21QYWNrZWRUZXh0dXJlIiwiYXR0YWNoU2hhZGVyIiwic2V0UHJvZ3JhbSIsImRlbGV0ZVByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiZ2V0QXR0cmlidXRlTG9jYXRpb24iLCJzZXRJbnB1dE1hdHJpeFRleHR1cmUiLCJ0aHJvd0lmTm9Qcm9ncmFtIiwic2V0T3V0cHV0TWF0cml4VGV4dHVyZSIsInNldE91dHB1dE1hdHJpeFRleHR1cmVEcml2ZXIiLCJzZXRPdXRwdXRQYWNrZWRNYXRyaXhUZXh0dXJlIiwic2V0T3V0cHV0TWF0cml4V3JpdGVSZWdpb24iLCJzZXRPdXRwdXRNYXRyaXhXcml0ZVJlZ2lvbkRyaXZlciIsInNldE91dHB1dFBhY2tlZE1hdHJpeFdyaXRlUmVnaW9uIiwiZGVidWdWYWxpZGF0ZSIsImV4ZWN1dGVQcm9ncmFtIiwiZHJhd0VsZW1lbnRzIiwiVFJJQU5HTEVTIiwiVU5TSUdORURfU0hPUlQiLCJibG9ja1VudGlsQWxsUHJvZ3JhbXNDb21wbGV0ZWQiLCJnZXRRdWVyeVRpbWVyRXh0ZW5zaW9uIiwiZGlzam9pbnRRdWVyeVRpbWVyRXh0ZW5zaW9uIiwiZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMiIsImdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDEiLCJjcmVhdGVRdWVyeSIsIlRJTUVfRUxBUFNFRF9FWFQiLCJjcmVhdGVRdWVyeUVYVCIsImJlZ2luUXVlcnlFWFQiLCJlbmRRdWVyeUVYVCIsIndhaXRGb3JRdWVyeUFuZEdldFRpbWUiLCJnZXRRdWVyeVRpbWUiLCJnZXRRdWVyeVBhcmFtZXRlciIsIlFVRVJZX1JFU1VMVCIsImdldFF1ZXJ5T2JqZWN0RVhUIiwiUVVFUllfUkVTVUxUX0VYVCIsIlFVRVJZX1JFU1VMVF9BVkFJTEFCTEUiLCJkaXNqb2ludCIsIkdQVV9ESVNKT0lOVF9FWFQiLCJRVUVSWV9SRVNVTFRfQVZBSUxBQkxFX0VYVCIsImFkZEl0ZW1Ub1BvbGwiLCJwb2xsSXRlbXMiLCJpc0RvbmVGbiIsInJlc29sdmVGbiIsImZpIiwidGV4RGF0YSIsImRpIiwidmkiLCJtaSIsImRlcHRoUmFkaXVzIiwiZ2kiLCJ5aSIsInhpIiwiYmkiLCJ3aSIsInNlZWRMb2MiLCJDaSIsIkVpIiwiUmkiLCJJaSIsImtpIiwiTmkiLCJTaSIsIkFpIiwiVGkiLCJEaSIsIl9pIiwiT2kiLCJGaSIsIk1pIiwiQmkiLCJQaSIsIkxpIiwibnVtU2VnbWVudHMiLCJXaSIsIlVpIiwiVmkiLCJzdGFydExvYyIsInVuaWZvcm0xaXYiLCJ6aSIsIkdpIiwiSGkiLCJncGdwdSIsIm51bVVzZWRUZXh0dXJlcyIsIm51bUZyZWVUZXh0dXJlcyIsImZyZWVUZXh0dXJlcyIsImxvZ0VuYWJsZWQiLCJ1c2VkVGV4dHVyZXMiLCJhY3F1aXJlVGV4dHVyZSIsInFpIiwiJGkiLCJzaGlmdCIsInJlbGVhc2VUZXh0dXJlIiwiZ2V0TnVtVXNlZFRleHR1cmVzIiwiZ2V0TnVtRnJlZVRleHR1cmVzIiwiS2kiLCJqaSIsIlhpIiwiWWkiLCJRaSIsIkppIiwiWmkiLCJ0cyIsImVzIiwicnMiLCJvcyIsImlzIiwic3MiLCJ1cyIsImxzIiwiY3MiLCJ4cyIsImJzIiwid3MiLCJDcyIsIkVzIiwiUnMiLCJJcyIsImtzIiwiTnMiLCJTcyIsIkFzIiwicGVuZGluZ1JlYWQiLCJwZW5kaW5nRGlzcG9zYWwiLCJXZWFrU2V0IiwiZGF0YVJlZkNvdW50IiwibnVtQnl0ZXNJbkdQVSIsInVwbG9hZFdhaXRNcyIsImRvd25sb2FkV2FpdE1zIiwid2FybmVkQWJvdXRNZW1vcnkiLCJiaW5hcnlDYWNoZSIsImdwZ3B1Q3JlYXRlZExvY2FsbHkiLCJ0ZXh0dXJlTWFuYWdlciIsIm51bU1CQmVmb3JlV2FybmluZyIsImRldmljZVBpeGVsUmF0aW8iLCJIVE1MQ2FudmFzRWxlbWVudCIsIkltYWdlRGF0YSIsIkhUTUxWaWRlb0VsZW1lbnQiLCJIVE1MSW1hZ2VFbGVtZW50IiwidmlkZW9XaWR0aCIsInZpZGVvSGVpZ2h0IiwiZnJvbVBpeGVsczJEQ29udGV4dCIsImRyYXdJbWFnZSIsIm1ha2VUZW5zb3JIYW5kbGUiLCJ1c2FnZSIsImdldFRleHR1cmUiLCJtYWtlUGFja2VkVGVuc29yIiwiY29tcGlsZUFuZFJ1biIsInJlbGVhc2VHUFVEYXRhIiwiY29tcGxleFRlbnNvcnMiLCJjb252ZXJ0QW5kQ2FjaGVPbkNQVSIsImFjdGl2ZVRpbWVycyIsImdldFZhbHVlc0Zyb21UZXh0dXJlIiwidGV4dHVyZSIsInByb2dyYW1UaW1lcnNTdGFjayIsIm1zIiwic3RhcnRUaW1lciIsInN0YXJ0TXMiLCJlbmRNcyIsImVuZFRpbWVyIiwib3JpZ0RhdGFJZCIsImNvbXB1dGVCeXRlcyIsInVwbG9hZFRvR1BVIiwiZ2V0RGF0YUluZm8iLCJnZXRDUFVCYWNrZW5kIiwiY3B1QmFja2VuZCIsInNob3VsZEV4ZWN1dGVPbkNQVSIsImdldEdQR1BVQ29udGV4dCIsIm1ha2VPdXRwdXRBcnJheSIsInNoYWxsb3dTbGljZSIsInBhY2tlZFVuYXJ5T3AiLCJtYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZSIsInBhY2tlZEJpbmFyeU9wIiwiYXJnUmVkdWNlIiwiYXJnUmVkdWNlUGFja2VkIiwic2VnT3BDb21wdXRlIiwiYXJnTWluTWF4UmVkdWNlIiwiY29tcGxleFNlcGFyYWJsZUJpbmFyeU9wIiwiY29udjJkQnlNYXRNdWwiLCJjb252MmRXaXRoSW0yUm93IiwicGFja2VkUmVzaGFwZSIsImZmdEltcGwiLCJ1bnBhY2tUZW5zb3IiLCJwYWNrVGVuc29yIiwidW5pZm9ybVZhbHVlcyIsImdldEFuZFNhdmVCaW5hcnkiLCJzb3VyY2UiLCJ3ZWJHTFByb2dyYW0iLCJ1bmlmb3JtTG9jYXRpb25zIiwiaW5TaGFwZUluZm9zIiwib3V0U2hhcGVJbmZvIiwiaW5mTG9jIiwibmFuTG9jIiwidW5pZm9ybTFmdiIsImdldFRleHR1cmVNYW5hZ2VyIiwicmVtb3ZlIiwiZmxvYXRQcmVjaXNpb25WYWx1ZSIsIlRzIiwiYWJzXyIsIkRzIiwiYWNvc18iLCJfcyIsImFjb3NoXyIsIk9zIiwiYXNpbl8iLCJGcyIsImFzaW5oXyIsIk1zIiwiYXRhbl8iLCJCcyIsImF0YW5oXyIsIlBzIiwiY2VpbF8iLCJMcyIsImNsaXBCeVZhbHVlXyIsIldzIiwiY29zXyIsIlVzIiwiY29zaF8iLCJWcyIsImVyZl8iLCJ6cyIsImV4cF8iLCJHcyIsImV4cG0xXyIsIkhzIiwiZmxvb3JfIiwicXMiLCJsb2dfIiwiJHMiLCJsb2cxcF8iLCJLcyIsImxvZ1NpZ21vaWRfIiwianMiLCJuZWdfIiwiWHMiLCJyZWNpcHJvY2FsXyIsIllzIiwicm91bmRfIiwiUXMiLCJyc3FydF8iLCJKcyIsInNpZ21vaWRfIiwiWnMiLCJzaWduXyIsInR1IiwiaXNOYU5fIiwiZXUiLCJpc0luZl8iLCJudSIsImlzRmluaXRlXyIsInJ1Iiwic2luXyIsIm91Iiwic2luaF8iLCJhdSIsInNvZnRwbHVzXyIsIml1Iiwic3FydF8iLCJzdSIsInNxdWFyZV8iLCJ1dSIsInN0ZXBfIiwibHUiLCJ0YW5fIiwiY3UiLCJ0YW5oXyIsImh1IiwiZHUiLCJwdSIsImZ1IiwidnUiLCIkbWVhbiIsIiR2YXJpYW5jZSIsIiRzY2FsZSIsIiRvZmZzZXQiLCJtdSIsImd1IiwiYmF0Y2hOb3JtYWxpemF0aW9uMmRfIiwieXUiLCJiYXRjaE5vcm1hbGl6YXRpb24zZF8iLCJ4dSIsImJhdGNoTm9ybWFsaXphdGlvbjRkXyIsImJ1IiwiYmF0Y2hOb3JtYWxpemF0aW9uXyIsInd1IiwiYmF0Y2hOb3JtXyIsIkN1IiwiYmF0Y2hOb3JtMmRfIiwiRXUiLCJiYXRjaE5vcm0zZF8iLCJSdSIsImJhdGNoTm9ybTRkXyIsIkl1IiwibG9naWNhbEFuZF8iLCIkYiIsImt1IiwibG9naWNhbE5vdF8iLCJOdSIsImxvZ2ljYWxPcl8iLCJTdSIsImxvZ2ljYWxYb3JfIiwiQXUiLCJ3aGVyZV8iLCIkY29uZGl0aW9uIiwiVHUiLCJEdSIsImFkZF8iLCJfdSIsImFkZE5fIiwiT3UiLCJhZGRTdHJpY3RfIiwiRnUiLCJhdGFuMl8iLCJNdSIsImRpdl8iLCJQdSIsIkJ1IiwiZGl2U3RyaWN0XyIsImZsb29yRGl2XyIsIkx1IiwibWF4aW11bV8iLCJXdSIsIm1heGltdW1TdHJpY3RfIiwiVXUiLCJtaW5pbXVtXyIsIlZ1IiwibWluaW11bVN0cmljdF8iLCJ6dSIsIm1vZF8iLCJHdSIsIm1vZFN0cmljdF8iLCJIdSIsIm11bF8iLCJxdSIsIm11bFN0cmljdF8iLCIkdSIsInBvd18iLCIkYmFzZSIsIiRleHAiLCJLdSIsInBvd1N0cmljdF8iLCJqdSIsInNxdWFyZWREaWZmZXJlbmNlXyIsIlh1Iiwic3F1YXJlZERpZmZlcmVuY2VTdHJpY3RfIiwiWXUiLCJzdWJfIiwiUXUiLCJzdWJTdHJpY3RfIiwiSnUiLCJlcXVhbF8iLCJadSIsImVxdWFsU3RyaWN0XyIsInRsIiwiZ3JlYXRlcl8iLCJlbCIsImdyZWF0ZXJFcXVhbF8iLCJubCIsImdyZWF0ZXJFcXVhbFN0cmljdF8iLCJybCIsImdyZWF0ZXJTdHJpY3RfIiwib2wiLCJsZXNzXyIsImFsIiwibGVzc0VxdWFsXyIsImlsIiwibGVzc0VxdWFsU3RyaWN0XyIsInNsIiwibGVzc1N0cmljdF8iLCJ1bCIsIm5vdEVxdWFsXyIsImxsIiwibm90RXF1YWxTdHJpY3RfIiwiY2wiLCJobCIsInBsIiwiZ2F0aGVyXyIsImRpbVNpemUiLCJmbCIsInVuc29ydGVkU2VnbWVudFN1bV8iLCJkbCIsInZsIiwiZHk0RCIsInhsIiwid2wiLCJtbCIsImR5NUQiLCJ5bCIsImNvbnYxZF8iLCJjb252MmRfIiwiJGZpbHRlciIsIkNsIiwiYmwiLCJjb252M2RfIiwieDVEIiwiY29udjJkRGVyRmlsdGVyXyIsIng0RCIsImNvbnYyZERlcklucHV0XyIsIkVsIiwiZGVwdGh3aXNlQ29udjJkXyIsIlJsIiwiSWwiLCJkZXB0aHdpc2VDb252MmREZXJJbnB1dF8iLCJkZXB0aHdpc2VDb252MmREZXJGaWx0ZXJfIiwia2wiLCJzZXBhcmFibGVDb252MmRfIiwiTmwiLCJjb252MmRUcmFuc3Bvc2VfIiwiU2wiLCJjb252M2RUcmFuc3Bvc2VfIiwiQWwiLCJtYXRNdWxfIiwiVGwiLCJkb3RfIiwiRGwiLCJvdXRlclByb2R1Y3RfIiwiX2wiLCJyZXZlcnNlXyIsIk9sIiwicmV2ZXJzZTFkXyIsIkZsIiwicmV2ZXJzZTJkXyIsIk1sIiwicmV2ZXJzZTNkXyIsIkJsIiwicmV2ZXJzZTRkXyIsIlBsIiwiJGR5IiwiTGwiLCJpbnB1dDREIiwiV2wiLCJtYXhQb29sXyIsIlVsIiwiYXZnUG9vbF8iLCJWbCIsInBvb2xfIiwiemwiLCJtYXhQb29sM2RfIiwiaW5wdXQ1RCIsIkdsIiwiYXZnUG9vbDNkXyIsIkhsIiwic2xpY2VfIiwicWwiLCJzbGljZTFkXyIsIiRsIiwic2xpY2UyZF8iLCJLbCIsInNsaWNlM2RfIiwiamwiLCJzbGljZTRkXyIsIlhsIiwiWWwiLCJhbGxfIiwiUWwiLCJhbnlfIiwiSmwiLCJhcmdNYXhfIiwiWmwiLCJhcmdNaW5fIiwidGMiLCJsb2dTdW1FeHBfIiwiZWMiLCJtYXhfIiwibmMiLCJtZWFuXyIsInJjIiwibWluXyIsIm9jIiwibW9tZW50c18iLCJ2YXJpYW5jZSIsImFjIiwic3VtXyIsImljIiwicHJvZF8iLCJzYyIsImVsdV8iLCJkeSIsInVjIiwibGVha3lSZWx1XyIsImxjIiwicHJlbHVfIiwiJGFscGhhIiwiY2MiLCJyZWx1XyIsImhjIiwicmVsdTZfIiwicGMiLCJzZWx1XyIsImZjIiwidHJhbnNwb3NlXyIsImRjIiwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb25fIiwidmMiLCJub3JtXyIsIm1jIiwiYmFzaWNMU1RNQ2VsbF8iLCJnYyIsIm11bHRpUk5OQ2VsbF8iLCJ5YyIsIm1vdmluZ0F2ZXJhZ2VfIiwieGMiLCJzdHJpZGVkU2xpY2VfIiwiYmMiLCJ0b3BrXyIsImluZGljZXMiLCJ3YyIsInNjYXR0ZXJORF8iLCJCciIsIiR1cGRhdGVzIiwiQ2MiLCJmZnRfIiwiRWMiLCJpZmZ0XyIsIlJjIiwicmZmdF8iLCJJYyIsImlyZmZ0XyIsImtjIiwiTmMiLCJzcGFyc2VUb0RlbnNlXyIsIiRzcGFyc2VJbmRpY2VzIiwiJHNwYXJzZVZhbHVlcyIsIiRkZWZhdWx0VmFsdWUiLCJTYyIsImdhdGhlck5EXyIsIkFjIiwiZGlhZ18iLCJUYyIsImRyb3BvdXRfIiwiRGMiLCJQYyIsIl9jIiwiaGFubldpbmRvd18iLCJPYyIsImhhbW1pbmdXaW5kb3dfIiwiRmMiLCJmcmFtZV8iLCJNYyIsInN0ZnRfIiwiQmMiLCJoYW5uV2luZG93IiwiaGFtbWluZ1dpbmRvdyIsImZyYW1lIiwic3RmdCIsIkxjIiwiTk9ORSIsIk1FQU4iLCJTVU0iLCJTVU1fQllfTk9OWkVST19XRUlHSFRTIiwiV2MiLCJhYnNvbHV0ZURpZmZlcmVuY2VfIiwiVWMiLCJjb21wdXRlV2VpZ2h0ZWRMb3NzXyIsIlZjIiwiY29zaW5lRGlzdGFuY2VfIiwiemMiLCJoaW5nZUxvc3NfIiwiR2MiLCJodWJlckxvc3NfIiwiSGMiLCJsb2dMb3NzXyIsInFjIiwibWVhblNxdWFyZWRFcnJvcl8iLCIkYyIsInNpZ21vaWRDcm9zc0VudHJvcHlfIiwiS2MiLCJzb2Z0bWF4Q3Jvc3NFbnRyb3B5XyIsImpjIiwiYWJzb2x1dGVEaWZmZXJlbmNlIiwiY29tcHV0ZVdlaWdodGVkTG9zcyIsImNvc2luZURpc3RhbmNlIiwiaGluZ2VMb3NzIiwiaHViZXJMb3NzIiwibG9nTG9zcyIsIm1lYW5TcXVhcmVkRXJyb3IiLCJzaWdtb2lkQ3Jvc3NFbnRyb3B5Iiwic29mdG1heENyb3NzRW50cm9weSIsIlhjIiwiWWMiLCJncmFtU2NobWlkdF8iLCJRYyIsInFyXyIsIkpjIiwiZ3JhbVNjaG1pZHQiLCJaYyIsIk5FR0FUSVZFX0lORklOSVRZIiwibWF4T3V0cHV0U2l6ZSIsImlvdVRocmVzaG9sZCIsInNjb3JlVGhyZXNob2xkIiwidGgiLCJyZXNpemVCaWxpbmVhcl8iLCJiYXRjaEltYWdlcyIsImVoIiwicmVzaXplTmVhcmVzdE5laWdoYm9yXyIsIm5oIiwibm9uTWF4U3VwcHJlc3Npb25fIiwiJGJveGVzIiwib2giLCJjcm9wQW5kUmVzaXplXyIsIiRpbWFnZSIsImFoIiwibm9uTWF4U3VwcHJlc3Npb25Bc3luYyIsImloIiwiJGJpYXMiLCIkcHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyIsInNoIiwiZGlsYXRpb25zIiwiZGltUm91bmRpbmdNb2RlIiwidWgiLCJsaCIsImNoIiwibGluYWxnIiwibG9zc2VzIiwiZnVzZWQiLCJzaWduYWwiLCJjb252M2RUcmFuc3Bvc2UiLCJvcCIsImJhdGNoTm9ybWFsaXphdGlvbjJkIiwiYmF0Y2hOb3JtYWxpemF0aW9uM2QiLCJiYXRjaE5vcm1hbGl6YXRpb240ZCIsImJhdGNoTm9ybTJkIiwiYmF0Y2hOb3JtM2QiLCJiYXRjaE5vcm00ZCIsImJvb2xlYW5NYXNrQXN5bmMiLCJjb25jYXQxZCIsImNvbmNhdDJkIiwiY29uY2F0M2QiLCJjb25jYXQ0ZCIsIm91dGVyUHJvZHVjdCIsInJldmVyc2UxZCIsInJldmVyc2UyZCIsInJldmVyc2UzZCIsInJldmVyc2U0ZCIsInNsaWNlMWQiLCJzbGljZTJkIiwic2xpY2UzZCIsInNsaWNlNGQiLCJtb21lbnRzIiwid2hlcmVBc3luYyIsImV5ZSIsInBhZDFkIiwicGFkMmQiLCJwYWQzZCIsInBhZDRkIiwicmFuZCIsInJhbmRvbU5vcm1hbCIsInJhbmRvbUdhbW1hIiwicmFuZG9tVW5pZm9ybSIsInRydW5jYXRlZE5vcm1hbCIsInNldGRpZmYxZEFzeW5jIiwib25lcyIsInNjYWxhciIsInRlbnNvciIsInRlbnNvcjFkIiwidGVuc29yMmQiLCJ0ZW5zb3IzZCIsInRlbnNvcjRkIiwidGVuc29yNWQiLCJ0ZW5zb3I2ZCIsInplcm9zIiwiYmFzaWNMU1RNQ2VsbCIsIm11bHRpUk5OQ2VsbCIsIm1vdmluZ0F2ZXJhZ2UiLCJkcm9wb3V0IiwiaW5Ub3BLQXN5bmMiLCJoaCIsImxpbmVhciIsInBoIiwiZmlyc3RVc2UiLCJnZXRJbWFnZURhdGEiLCJhc3NlcnROb3RDb21wbGV4IiwiYnJvYWRjYXN0ZWRCaW5hcnlDb21wbGV4T3AiLCJicm9hZGNhc3RlZEJpbmFyeU9wIiwiaHlwb3QiLCJ0cnVuYyIsIlBPU0lUSVZFX0lORklOSVRZIiwibWF4UG9vbFBvc2l0aW9ucyIsInBvb2wzZCIsIm1heFBvb2wzZFBvc2l0aW9ucyIsImZmdEJhdGNoIiwiaXNFeHBvbmVudE9mMiIsImZmdFJhZGl4MiIsImZvdXJpZXJUcmFuc2Zvcm1CeU1hdG11bCIsInNjYXR0ZXIiLCJmaCIsInBlcmZvcm1hbmNlIiwidGV4dEVuY29kZXIiLCJUZXh0RW5jb2RlciIsIlRleHREZWNvZGVyIiwiZGgiLCJtaCIsInV0aWwiLCJocnRpbWUiLCJnaCIsInVpbnQxNiIsInVpbnQ4IiwieWgiLCJ4aCIsInF1YW50aXphdGlvbiIsInNjYWxlIiwiYmgiLCJieXRlTGVuZ3RoIiwid2giLCJCdWZmZXIiLCJCbG9iIiwiYXRvYiIsImJ0b2EiLCJDaCIsIkVoIiwiUmgiLCJ0cmltIiwiSWgiLCJtb2RlbFRvcG9sb2d5IiwiQXJyYXlCdWZmZXIiLCJkYXRlU2F2ZWQiLCJtb2RlbFRvcG9sb2d5VHlwZSIsIm1vZGVsVG9wb2xvZ3lCeXRlcyIsIndlaWdodFNwZWNzQnl0ZXMiLCJ3ZWlnaHRTcGVjcyIsIndlaWdodERhdGFCeXRlcyIsIndlaWdodERhdGEiLCJraCIsInNhdmVSb3V0ZXJzIiwibG9hZFJvdXRlcnMiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwicmVnaXN0ZXJTYXZlUm91dGVyIiwicmVnaXN0ZXJMb2FkUm91dGVyIiwiZ2V0U2F2ZUhhbmRsZXJzIiwiZ2V0SGFuZGxlcnMiLCJnZXRMb2FkSGFuZGxlcnMiLCJOaCIsIlNoIiwibWFuYWdlcnMiLCJyZWdpc3Rlck1hbmFnZXIiLCJnZXRNYW5hZ2VyIiwiZ2V0U2NoZW1lcyIsIkFoIiwic2NoZW1lIiwicGF0aCIsIlRoIiwibG9hZCIsInJlbW92ZU1vZGVsIiwic2F2ZSIsIm1vZGVsQXJ0aWZhY3RzSW5mbyIsIkRoIiwiX2giLCJPaCIsImluZGV4ZWREQiIsIm1vekluZGV4ZWREQiIsIndlYmtpdEluZGV4ZWREQiIsIm1zSW5kZXhlZERCIiwic2hpbUluZGV4ZWREQiIsIkZoIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwiTWgiLCJtb2RlbFBhdGgiLCJkYXRhYmFzZUFjdGlvbiIsIm9wZW4iLCJvbnVwZ3JhZGVuZWVkZWQiLCJvbnN1Y2Nlc3MiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwiY2xvc2UiLCJtb2RlbEFydGlmYWN0cyIsIm9uZXJyb3IiLCJvbmNvbXBsZXRlIiwicHV0IiwiVVJMX1NDSEVNRSIsIkJoIiwic3RhcnRzV2l0aCIsIlBoIiwibGlzdE1vZGVscyIsImdldEFsbCIsIkxoIiwiV2giLCJVaCIsIlZoIiwiemgiLCJHaCIsIkhoIiwicWgiLCJpbmZvIiwidG9wb2xvZ3kiLCJtb2RlbE1ldGFkYXRhIiwiJGgiLCJLaCIsImxvY2FsU3RvcmFnZSIsIkxTIiwic2V0SXRlbSIsImZvcm1hdCIsImdlbmVyYXRlZEJ5IiwiY29udmVydGVkQnkiLCJyZW1vdmVJdGVtIiwiZ2V0SXRlbSIsImJ5dGVPZmZzZXQiLCJqaCIsIlhoIiwiWWgiLCJRaCIsIkpoIiwiWmgiLCJ0cCIsIm1vZGVsVG9wb2xvZ3lGaWxlTmFtZSIsIndlaWdodERhdGFGaWxlTmFtZSIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInBhdGhzIiwid2VpZ2h0cyIsIndlaWdodHNNYW5pZmVzdCIsImpzb25BbmNob3IiLCJkb3dubG9hZCIsImhyZWYiLCJkaXNwYXRjaEV2ZW50IiwiTW91c2VFdmVudCIsIndlaWdodERhdGFBbmNob3IiLCJlcCIsImZpbGVzIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInRhcmdldCIsImNoZWNrTWFuaWZlc3RBbmRXZWlnaHRGaWxlcyIsInJlYWRBc0FycmF5QnVmZmVyIiwicmVhZEFzVGV4dCIsIm5wIiwicnAiLCJmZXRjaEZ1bmMiLCJyZXF1ZXN0SW5pdCIsImlzQmluYXJ5Iiwib25Qcm9ncmVzcyIsImFycmF5QnVmZmVyIiwibWFuaWZlc3RFbnRyeSIsImdyb3VwT2Zmc2V0Iiwic2l6ZUJ5dGVzIiwiYXAiLCJERUZBVUxUX01FVEhPRCIsIndlaWdodFBhdGhQcmVmaXgiLCJib2R5IiwibWV0aG9kIiwiRm9ybURhdGEiLCJ1c2VyRGVmaW5lZE1ldGFkYXRhIiwiYXBwZW5kIiwib2siLCJyZXNwb25zZXMiLCJzdGF0dXMiLCJqc29uIiwibG9hZFdlaWdodHMiLCJsYXN0SW5kZXhPZiIsIlVSTF9TQ0hFTUVfUkVHRVgiLCJpcCIsIm1hdGNoIiwic3AiLCJ1cCIsImxwIiwiY3AiLCJzYXZlSGFuZGxlciIsImhwIiwiYnJvd3NlckZpbGVzIiwiYnJvd3NlckhUVFBSZXF1ZXN0IiwiY29uY2F0ZW5hdGVBcnJheUJ1ZmZlcnMiLCJkZWNvZGVXZWlnaHRzIiwiZW5jb2RlV2VpZ2h0cyIsImdyb3VwIiwic3BlY3MiLCJmcm9tTWVtb3J5IiwidHJhaW5pbmdDb25maWciLCJnZXRNb2RlbEFydGlmYWN0c0luZm9Gb3JKU09OIiwiaHR0cCIsImlzSFRUUFNjaGVtZSIsIndlaWdodHNMb2FkZXJGYWN0b3J5Iiwid2l0aFNhdmVIYW5kbGVyIiwiY29weU1vZGVsIiwibW92ZU1vZGVsIiwicHAiLCJjb25mdXNpb25NYXRyaXhfIiwiZnAiLCJjb25mdXNpb25NYXRyaXgiLCJkcCIsImZyb21QaXhlbHNfIiwicmVhZHlTdGF0ZSIsInZwIiwidG9QaXhlbHMiLCJVaW50OENsYW1wZWRBcnJheSIsInB1dEltYWdlRGF0YSIsIm1wIiwiZ2V0Q2xhc3NOYW1lIiwiY2xhc3NOYW1lIiwiZnJvbUNvbmZpZyIsImdwIiwiY2xhc3NOYW1lTWFwIiwiZ2V0TWFwIiwieXAiLCJ4cCIsIlNlcmlhbGl6YWJsZSIsIlNlcmlhbGl6YXRpb25NYXAiLCJyZWdpc3RlckNsYXNzIiwiYnAiLCJ3cCIsIkNwIiwiRXAiLCJScCIsIklwIiwiVEVTVF9FUFNJTE9OX0ZMT0FUMTYiLCJleHBlY3RBcnJheXNDbG9zZSIsInRlc3RFcHNpbG9uIiwiZXhwZWN0UHJvbWlzZVRvRmFpbCIsImZhaWwiLCJleHBlY3RBcnJheXNFcXVhbCIsImV4cGVjdE51bWJlcnNDbG9zZSIsImV4cGVjdFZhbHVlc0luUmFuZ2UiLCJleHBlY3RBcnJheUJ1ZmZlcnNFcXVhbCIsImV4cGVjdCIsInRvRXF1YWwiLCJrcCIsIk5wIiwiZ3BncHVfdXRpbCIsIndlYmdsX3V0aWwiLCJmb3JjZUhhbGZGbG9hdCIsIk1hdGhCYWNrZW5kV2ViR0wiLCJzZXRXZWJHTENvbnRleHQiLCJHUEdQVUNvbnRleHQiLCJTcCIsIm1pbmltaXplIiwiY29tcHV0ZUdyYWRpZW50cyIsImFwcGx5R3JhZGllbnRzIiwiaXRlcmF0aW9uc18iLCJpbmNyZW1lbnRJdGVyYXRpb25zIiwiaXRlcmF0aW9ucyIsInNhdmVJdGVyYXRpb25zIiwiZ2V0V2VpZ2h0cyIsInNldFdlaWdodHMiLCJleHRyYWN0SXRlcmF0aW9ucyIsIkFwIiwibGVhcm5pbmdSYXRlIiwicmhvIiwiYWNjdW11bGF0ZWRHcmFkcyIsImFjY3VtdWxhdGVkVXBkYXRlcyIsIm9yaWdpbmFsTmFtZSIsImdldENvbmZpZyIsIlRwIiwiaW5pdGlhbEFjY3VtdWxhdG9yVmFsdWUiLCJEcCIsImJldGExIiwiYmV0YTIiLCJhY2N1bXVsYXRlZEZpcnN0TW9tZW50IiwiYWNjdW11bGF0ZWRTZWNvbmRNb21lbnQiLCJhY2NCZXRhMSIsImFjY0JldGEyIiwiX3AiLCJkZWNheSIsImFjY3VtdWxhdGVkV2VpZ2h0ZWRJbmZOb3JtIiwiaXRlcmF0aW9uIiwiT3AiLCJzZXRMZWFybmluZ1JhdGUiLCJGcCIsIm1vbWVudHVtIiwidXNlTmVzdGVyb3YiLCJhY2N1bXVsYXRpb25zIiwic2V0TW9tZW50dW0iLCJNcCIsImFjY3VtdWxhdGVkTWVhblNxdWFyZXMiLCJhY2N1bXVsYXRlZE1vbWVudHMiLCJhY2N1bXVsYXRlZE1lYW5HcmFkcyIsImNlbnRlcmVkIiwiQnAiLCJzZ2QiLCJybXNwcm9wIiwiYWRhbSIsImFkYWRlbHRhIiwiYWRhbWF4IiwiYWRhZ3JhZCIsIlBwIiwiTHAiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRJbW1lZGlhdGUiLCJXcCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwibGVuIiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsIm5vb3AiLCJuZXh0VGljayIsImFyZ3MiLCJ0aXRsZSIsImJyb3dzZXIiLCJlbnYiLCJhcmd2IiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiYmFzZTY0IiwiaWVlZTc1NCIsImtNYXhMZW5ndGgiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwidGhhdCIsIlJhbmdlRXJyb3IiLCJhcmciLCJlbmNvZGluZ09yT2Zmc2V0IiwiYWxsb2NVbnNhZmUiLCJ1bmRlZmluZWQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwic3RyaW5nIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwiZnJvbVN0cmluZyIsIm9iaiIsImlzQnVmZmVyIiwiY2hlY2tlZCIsImNvcHkiLCJ2YWwiLCJmcm9tT2JqZWN0IiwiYXNzZXJ0U2l6ZSIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwic3RhcnQiLCJlbmQiLCJoZXhTbGljZSIsInV0ZjhTbGljZSIsImFzY2lpU2xpY2UiLCJsYXRpbjFTbGljZSIsImJhc2U2NFNsaWNlIiwidXRmMTZsZVNsaWNlIiwic3dhcCIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwiYXJyYXlJbmRleE9mIiwiYXJyIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiYnVmIiwicmVhZFVJbnQxNkJFIiwiZm91bmRJbmRleCIsImZvdW5kIiwiaGV4V3JpdGUiLCJvZmZzZXQiLCJyZW1haW5pbmciLCJzdHJMZW4iLCJwYXJzZWQiLCJwYXJzZUludCIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwic3RyIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwidXRmMTZsZVRvQnl0ZXMiLCJmcm9tQnl0ZUFycmF5IiwicmVzIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiZmlyc3RCeXRlIiwiY29kZVBvaW50IiwiYnl0ZXNQZXJTZXF1ZW5jZSIsImNvZGVQb2ludHMiLCJNQVhfQVJHVU1FTlRTX0xFTkdUSCIsImRlY29kZUNvZGVQb2ludHNBcnJheSIsIlNsb3dCdWZmZXIiLCJhbGxvYyIsIklOU1BFQ1RfTUFYX0JZVEVTIiwiZm9vIiwidHlwZWRBcnJheVN1cHBvcnQiLCJwb29sU2l6ZSIsIl9hdWdtZW50Iiwic3BlY2llcyIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJsaXN0IiwicG9zIiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwiZXF1YWxzIiwiaW5zcGVjdCIsInRoaXNTdGFydCIsInRoaXNFbmQiLCJ0aGlzQ29weSIsInRhcmdldENvcHkiLCJpbmNsdWRlcyIsInRvSlNPTiIsIl9hcnIiLCJyZXQiLCJvdXQiLCJ0b0hleCIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzbGljZUxlbiIsInJlYWRVSW50TEUiLCJyZWFkVUludEJFIiwicmVhZFVJbnQ4IiwicmVhZFVJbnQxNkxFIiwicmVhZFVJbnQzMkxFIiwicmVhZFVJbnQzMkJFIiwicmVhZEludExFIiwicmVhZEludEJFIiwicmVhZEludDgiLCJyZWFkSW50MTZMRSIsInJlYWRJbnQxNkJFIiwicmVhZEludDMyTEUiLCJyZWFkSW50MzJCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwibGltaXQiLCJ3cml0ZUludEJFIiwid3JpdGVJbnQ4Iiwid3JpdGVJbnQxNkxFIiwid3JpdGVJbnQxNkJFIiwid3JpdGVJbnQzMkxFIiwid3JpdGVJbnQzMkJFIiwid3JpdGVGbG9hdExFIiwid3JpdGVGbG9hdEJFIiwid3JpdGVEb3VibGVMRSIsIndyaXRlRG91YmxlQkUiLCJ0YXJnZXRTdGFydCIsImNvZGUiLCJJTlZBTElEX0JBU0U2NF9SRSIsIkluZmluaXR5IiwibGVhZFN1cnJvZ2F0ZSIsInRvQnl0ZUFycmF5Iiwic3RyaW5ndHJpbSIsImJhc2U2NGNsZWFuIiwic3JjIiwiZHN0IiwiYjY0IiwibGVucyIsImdldExlbnMiLCJ2YWxpZExlbiIsInBsYWNlSG9sZGVyc0xlbiIsInRtcCIsIkFyciIsIl9ieXRlTGVuZ3RoIiwiY3VyQnl0ZSIsInJldkxvb2t1cCIsImV4dHJhQnl0ZXMiLCJwYXJ0cyIsImxlbjIiLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsIm51bSIsImlzTEUiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsIm5CaXRzIiwiTE4yIiwiVGltZW91dCIsImNsZWFyRm4iLCJfaWQiLCJfY2xlYXJGbiIsInNjb3BlIiwic2V0SW50ZXJ2YWwiLCJjbGVhckludGVydmFsIiwidW5yZWYiLCJyZWYiLCJlbnJvbGwiLCJpdGVtIiwibXNlY3MiLCJfaWRsZVRpbWVvdXRJZCIsIl9pZGxlVGltZW91dCIsInVuZW5yb2xsIiwiX3VucmVmQWN0aXZlIiwiYWN0aXZlIiwiX29uVGltZW91dCIsImNsZWFySW1tZWRpYXRlIiwicmVnaXN0ZXJJbW1lZGlhdGUiLCJodG1sIiwiY2hhbm5lbCIsIm1lc3NhZ2VQcmVmaXgiLCJvbkdsb2JhbE1lc3NhZ2UiLCJuZXh0SGFuZGxlIiwidGFza3NCeUhhbmRsZSIsImN1cnJlbnRseVJ1bm5pbmdBVGFzayIsImRvYyIsImF0dGFjaFRvIiwiZ2V0UHJvdG90eXBlT2YiLCJoYW5kbGUiLCJydW5JZlByZXNlbnQiLCJwb3N0TWVzc2FnZSIsImltcG9ydFNjcmlwdHMiLCJwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzIiwib2xkT25NZXNzYWdlIiwib25tZXNzYWdlIiwiY2FuVXNlUG9zdE1lc3NhZ2UiLCJNZXNzYWdlQ2hhbm5lbCIsInBvcnQxIiwiZXZlbnQiLCJwb3J0MiIsImRvY3VtZW50RWxlbWVudCIsInNjcmlwdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJhdHRhY2hFdmVudCIsImNhbGxiYWNrIiwidGFzayIsImRpbSIsIlZlY3RvciIsImhhbmRsZVR5cGUiLCJiXyIsImNyZWF0ZVRlbnNvciIsIlRlbnNvciIsImhhbmRsZVJhbmsiLCJtdWx0IiwiY29uc3RyYWluIiwibG93IiwiaGlnaCIsInNxIiwibnVtUm93cyIsIm51bUNvbHMiLCJyYW5kb21HYXVzc2lhbiIsInNkIiwicDUiLCJ0ZmMiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFB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akJ3YixHQVdGLEVBQUEya0UsZUFBUCxTQUFzQjF6RSxFQUFpQmdGLEVBQWUydUUsR0FDcEQsSUFBSTVrRSxFQU1KLE9BTEEsUUFBUyxXQUNQLElBQUl4YixFQUFnQixlQUFpQnlNLEVBQU9nRixFQUFNMnVFLEdBQ2xENWtFLEVBQVNpa0UsRUFBYXovRSxNQUdqQndiLEdBVUYsRUFBQSthLE1BQVAsU0FBYXp4QixFQUFhRCxFQUFhc1IsR0FDckMsSUFBSXFGLEVBTUosT0FMQSxRQUFTLFdBQ1AsSUFBSXhiLEVBQWdCLFFBQVU4RSxFQUFLRCxFQUFLc1IsR0FDeENxRixFQUFTaWtFLEVBQWF6L0UsTUFHakJ3YixHQVFGLEVBQUEwK0MsTUFBUCxTQUFhenRELEdBQ1gsSUFBSStPLEVBTUosT0FMQSxRQUFTLFdBQ1AsSUFBSXhiLEVBQWdCLFFBQVV5TSxHQUM5QitPLEVBQVNpa0UsRUFBYXovRSxNQUdqQndiLEdBRVgsRUF4bkJBLEdBaW9CTWlrRSxFQUFlLFNBQTRCaE8sRUFBVTROLEdBQ3pELE9BQU8sSUFBSSxFQUFPNU4sRUFBSzROLElDdm9CekJnQixHQUFHMy9FLFVBQVU0L0UsSUFBTSxFQUNuQkQsR0FBRzMvRSxVQUFVZy9FLE9BQVMsRUFDdEJXLEdBQUczL0UsVUFBVSsrRSxhQUFlQSxFQUViIiwiZmlsZSI6Im51bWVyby5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMik7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG52YXIgdD1mdW5jdGlvbihlLG4pe3JldHVybih0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0W25dPWVbbl0pfSkoZSxuKX07ZnVuY3Rpb24gZShlLG4pe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KHIucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyByKX1mdW5jdGlvbiBuKHQsZSxuLHIpe3JldHVybiBuZXcobnx8KG49UHJvbWlzZSkpKGZ1bmN0aW9uKG8sYSl7ZnVuY3Rpb24gaSh0KXt0cnl7dShyLm5leHQodCkpfWNhdGNoKHQpe2EodCl9fWZ1bmN0aW9uIHModCl7dHJ5e3Uoci50aHJvdyh0KSl9Y2F0Y2godCl7YSh0KX19ZnVuY3Rpb24gdSh0KXt0LmRvbmU/byh0LnZhbHVlKTpuZXcgbihmdW5jdGlvbihlKXtlKHQudmFsdWUpfSkudGhlbihpLHMpfXUoKHI9ci5hcHBseSh0LGV8fFtdKSkubmV4dCgpKX0pfWZ1bmN0aW9uIHIodCxlKXt2YXIgbixyLG8sYSxpPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJm9bMF0pdGhyb3cgb1sxXTtyZXR1cm4gb1sxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBhPXtuZXh0OnMoMCksdGhyb3c6cygxKSxyZXR1cm46cygyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoYVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxhO2Z1bmN0aW9uIHMoYSl7cmV0dXJuIGZ1bmN0aW9uKHMpe3JldHVybiBmdW5jdGlvbihhKXtpZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7aTspdHJ5e2lmKG49MSxyJiYobz0yJmFbMF0/ci5yZXR1cm46YVswXT9yLnRocm93fHwoKG89ci5yZXR1cm4pJiZvLmNhbGwociksMCk6ci5uZXh0KSYmIShvPW8uY2FsbChyLGFbMV0pKS5kb25lKXJldHVybiBvO3N3aXRjaChyPTAsbyYmKGE9WzImYVswXSxvLnZhbHVlXSksYVswXSl7Y2FzZSAwOmNhc2UgMTpvPWE7YnJlYWs7Y2FzZSA0OnJldHVybiBpLmxhYmVsKysse3ZhbHVlOmFbMV0sZG9uZTohMX07Y2FzZSA1OmkubGFiZWwrKyxyPWFbMV0sYT1bMF07Y29udGludWU7Y2FzZSA3OmE9aS5vcHMucG9wKCksaS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShvPShvPWkudHJ5cykubGVuZ3RoPjAmJm9bby5sZW5ndGgtMV0pJiYoNj09PWFbMF18fDI9PT1hWzBdKSl7aT0wO2NvbnRpbnVlfWlmKDM9PT1hWzBdJiYoIW98fGFbMV0+b1swXSYmYVsxXTxvWzNdKSl7aS5sYWJlbD1hWzFdO2JyZWFrfWlmKDY9PT1hWzBdJiZpLmxhYmVsPG9bMV0pe2kubGFiZWw9b1sxXSxvPWE7YnJlYWt9aWYobyYmaS5sYWJlbDxvWzJdKXtpLmxhYmVsPW9bMl0saS5vcHMucHVzaChhKTticmVha31vWzJdJiZpLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWV9YT1lLmNhbGwodCxpKX1jYXRjaCh0KXthPVs2LHRdLHI9MH1maW5hbGx5e249bz0wfWlmKDUmYVswXSl0aHJvdyBhWzFdO3JldHVybnt2YWx1ZTphWzBdP2FbMV06dm9pZCAwLGRvbmU6ITB9fShbYSxzXSl9fX12YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5nbG9iYWw9dCx0aGlzLmZsYWdzPXt9LHRoaXMuZmxhZ1JlZ2lzdHJ5PXt9LHRoaXMudXJsRmxhZ3M9e30sdGhpcy5wb3B1bGF0ZVVSTEZsYWdzKCl9cmV0dXJuIHQucHJvdG90eXBlLnNldFBsYXRmb3JtPWZ1bmN0aW9uKHQsZSl7bnVsbCE9dGhpcy5wbGF0Zm9ybSYmY29uc29sZS53YXJuKFwiUGxhdGZvcm0gXCIrdGhpcy5wbGF0Zm9ybU5hbWUrXCIgaGFzIGFscmVhZHkgYmVlbiBzZXQuIE92ZXJ3cml0aW5nIHRoZSBwbGF0Zm9ybSB3aXRoIFwiK2UrXCIuXCIpLHRoaXMucGxhdGZvcm1OYW1lPXQsdGhpcy5wbGF0Zm9ybT1lfSx0LnByb3RvdHlwZS5yZWdpc3RlckZsYWc9ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMuZmxhZ1JlZ2lzdHJ5W3RdPXtldmFsdWF0aW9uRm46ZSxzZXRIb29rOm59LG51bGwhPXRoaXMudXJsRmxhZ3NbdF0pe3ZhciByPXRoaXMudXJsRmxhZ3NbdF07Y29uc29sZS53YXJuKFwiU2V0dGluZyBmZWF0dXJlIG92ZXJyaWRlIGZyb20gVVJMIFwiK3QrXCI6IFwiK3IrXCIuXCIpLHRoaXMuc2V0KHQscil9fSx0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW4gdGhpcy5mbGFncz90aGlzLmZsYWdzW3RdOih0aGlzLmZsYWdzW3RdPXRoaXMuZXZhbHVhdGVGbGFnKHQpLHRoaXMuZmxhZ3NbdF0pfSx0LnByb3RvdHlwZS5nZXROdW1iZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0KHQpfSx0LnByb3RvdHlwZS5nZXRCb29sPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdldCh0KX0sdC5wcm90b3R5cGUuZ2V0RmxhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mbGFnc30sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZmVhdHVyZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmxhZ3N9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09dGhpcy5mbGFnUmVnaXN0cnlbdF0pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBmbGFnIFwiK3QrXCIgYXMgaXQgaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQuXCIpO3RoaXMuZmxhZ3NbdF09ZSxudWxsIT10aGlzLmZsYWdSZWdpc3RyeVt0XS5zZXRIb29rJiZ0aGlzLmZsYWdSZWdpc3RyeVt0XS5zZXRIb29rKGUpfSx0LnByb3RvdHlwZS5ldmFsdWF0ZUZsYWc9ZnVuY3Rpb24odCl7aWYobnVsbD09dGhpcy5mbGFnUmVnaXN0cnlbdF0pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGV2YWx1YXRlIGZsYWcgJ1wiK3QrXCInOiBubyBldmFsdWF0aW9uIGZ1bmN0aW9uIGZvdW5kLlwiKTtyZXR1cm4gdGhpcy5mbGFnUmVnaXN0cnlbdF0uZXZhbHVhdGlvbkZuKCl9LHQucHJvdG90eXBlLnNldEZsYWdzPWZ1bmN0aW9uKHQpe3RoaXMuZmxhZ3M9T2JqZWN0LmFzc2lnbih7fSx0KX0sdC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmZsYWdzPXt9LHRoaXMudXJsRmxhZ3M9e30sdGhpcy5wb3B1bGF0ZVVSTEZsYWdzKCl9LHQucHJvdG90eXBlLnBvcHVsYXRlVVJMRmxhZ3M9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHZvaWQgMCE9PXRoaXMuZ2xvYmFsJiZ2b2lkIDAhPT10aGlzLmdsb2JhbC5sb2NhdGlvbiYmdm9pZCAwIT09dGhpcy5nbG9iYWwubG9jYXRpb24uc2VhcmNoKXt2YXIgZT1hKHRoaXMuZ2xvYmFsLmxvY2F0aW9uLnNlYXJjaCk7aWYoXCJ0ZmpzZmxhZ3NcImluIGUpZS50ZmpzZmxhZ3Muc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49ZS5zcGxpdChcIjpcIikscj1uWzBdLG89blsxXTt0LnVybEZsYWdzW3JdPWZ1bmN0aW9uKHQsZSl7aWYoXCJ0cnVlXCI9PT0oZT1lLnRvTG93ZXJDYXNlKCkpfHxcImZhbHNlXCI9PT1lKXJldHVyblwidHJ1ZVwiPT09ZTtpZihcIlwiKyArZT09PWUpcmV0dXJuK2U7dGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHBhcnNlIHZhbHVlIGZsYWcgdmFsdWUgXCIrZStcIiBmb3IgZmxhZyBcIit0K1wiLlwiKX0ocixvKX0pfX0sdH0oKTtmdW5jdGlvbiBhKHQpe3ZhciBlPXt9O3JldHVybiB0LnJlcGxhY2UoL1s/Jl0oW149PyZdKykoPzo9KFteJl0qKSk/L2csZnVuY3Rpb24odCl7Zm9yKHZhciBuPVtdLHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKW5bci0xXT1hcmd1bWVudHNbcl07cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0W2RlY29kZVVSSUNvbXBvbmVudChlKV09ZGVjb2RlVVJJQ29tcG9uZW50KG58fFwiXCIpfShlLG5bMF0sblsxXSksbi5qb2luKFwiPVwiKX0pLGV9dmFyIGk9bnVsbDtmdW5jdGlvbiBzKHQpe2k9dH12YXIgdT1PYmplY3QuZnJlZXplKHtFbnZpcm9ubWVudDpvLGdldFF1ZXJ5UGFyYW1zOmEsZ2V0IEVOVigpe3JldHVybiBpfSxzZXRFbnZpcm9ubWVudEdsb2JhbDpzfSk7ZnVuY3Rpb24gbCh0KXtmb3IodmFyIGU9dC5sZW5ndGgsbj0wLHI9MDtlPjA7KXI9TWF0aC5yYW5kb20oKSplfDAsbj10Wy0tZV0sdFtlXT10W3JdLHRbcl09bn1mdW5jdGlvbiBjKHQsZSxuKXtyZXR1cm4gTWF0aC5tYXgodCxNYXRoLm1pbihlLG4pKX1mdW5jdGlvbiBoKHQpe3JldHVybiB0JTI9PTA/dDp0KzF9ZnVuY3Rpb24gcCh0KXtmb3IodmFyIGU9MCxuPTA7bjx0Lmxlbmd0aDtuKyspZSs9dFtuXTtyZXR1cm4gZX1mdW5jdGlvbiBmKHQsZSl7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwic3RyaW5nXCI9PXR5cGVvZiBlP2U6ZSgpKX1mdW5jdGlvbiBkKHQsZSxuKXt2b2lkIDA9PT1uJiYobj1cIlwiKSxmKHkodCxlKSxmdW5jdGlvbigpe3JldHVybiBuK1wiIFNoYXBlcyBcIit0K1wiIGFuZCBcIitlK1wiIG11c3QgbWF0Y2hcIn0pfWZ1bmN0aW9uIHYodCl7ZihudWxsIT10LGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgaW5wdXQgdG8gdGhlIHRlbnNvciBjb25zdHJ1Y3RvciBtdXN0IGJlIGEgbm9uLW51bGwgdmFsdWUuXCJ9KX1mdW5jdGlvbiBtKHQsZSxuKXtpZih2b2lkIDA9PT1lJiYoZT1bXSksdm9pZCAwPT09biYmKG49ITEpLG51bGw9PWUmJihlPVtdKSxBcnJheS5pc0FycmF5KHQpfHxfKHQpJiYhbilmb3IodmFyIHI9MDtyPHQubGVuZ3RoOysrciltKHRbcl0sZSxuKTtlbHNlIGUucHVzaCh0KTtyZXR1cm4gZX1mdW5jdGlvbiBnKHQpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gMTtmb3IodmFyIGU9dFswXSxuPTE7bjx0Lmxlbmd0aDtuKyspZSo9dFtuXTtyZXR1cm4gZX1mdW5jdGlvbiB5KHQsZSl7aWYodD09PWUpcmV0dXJuITA7aWYobnVsbD09dHx8bnVsbD09ZSlyZXR1cm4hMTtpZih0Lmxlbmd0aCE9PWUubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKWlmKHRbbl0hPT1lW25dKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIHgodCl7cmV0dXJuIHQlMT09MH1mdW5jdGlvbiBiKHQpe2lmKG51bGwhPU1hdGgudGFuaClyZXR1cm4gTWF0aC50YW5oKHQpO2lmKHQ9PT0xLzApcmV0dXJuIDE7aWYodD09PS0xLzApcmV0dXJuLTE7dmFyIGU9TWF0aC5leHAoMip0KTtyZXR1cm4oZS0xKS8oZSsxKX1mdW5jdGlvbiB3KHQpe3ZhciBlPU1hdGguY2VpbChNYXRoLnNxcnQodCkpO3JldHVybltlLE1hdGguY2VpbCh0L2UpXX1mdW5jdGlvbiBDKHQsZSl7cmV0dXJuIGU8PXQubGVuZ3RoP3Q6dCtcIiBcIi5yZXBlYXQoZS10Lmxlbmd0aCl9ZnVuY3Rpb24gRSh0LGUsbil7cmV0dXJuIHZvaWQgMD09PWUmJihlPWZ1bmN0aW9uKHQpe3JldHVybiAwfSksbmV3IFByb21pc2UoZnVuY3Rpb24ocixvKXt2YXIgYT0wLGk9ZnVuY3Rpb24oKXtpZih0KCkpcigpO2Vsc2V7dmFyIHM9ZSgrK2EpO251bGwhPW4mJmE+PW4/bygpOnNldFRpbWVvdXQoaSxzKX19O2koKX0pfWZ1bmN0aW9uIFIodCxlKXtmb3IodmFyIG49MSxyPS0xLG89MDtvPHQubGVuZ3RoOysrbylpZih0W29dPj0wKW4qPXRbb107ZWxzZSBpZigtMT09PXRbb10pe2lmKC0xIT09cil0aHJvdyBFcnJvcihcIlNoYXBlcyBjYW4gb25seSBoYXZlIDEgaW1wbGljaXQgc2l6ZS4gRm91bmQgLTEgYXQgZGltIFwiK3IrXCIgYW5kIGRpbSBcIitvKTtyPW99ZWxzZSBpZih0W29dPDApdGhyb3cgRXJyb3IoXCJTaGFwZXMgY2FuIG5vdCBiZSA8IDAuIEZvdW5kIFwiK3Rbb10rXCIgYXQgZGltIFwiK28pO2lmKC0xPT09cil7aWYoZT4wJiZlIT09bil0aHJvdyBFcnJvcihcIlNpemUoXCIrZStcIikgbXVzdCBtYXRjaCB0aGUgcHJvZHVjdCBvZiBzaGFwZSBcIit0KTtyZXR1cm4gdH1pZigwPT09bil0aHJvdyBFcnJvcihcIkNhbm5vdCBpbmZlciB0aGUgbWlzc2luZyBzaXplIGluIFtcIit0K1wiXSB3aGVuIHRoZXJlIGFyZSAwIGVsZW1lbnRzXCIpO2lmKGUlbiE9MCl0aHJvdyBFcnJvcihcIlRoZSBpbXBsaWNpdCBzaGFwZSBjYW4ndCBiZSBhIGZyYWN0aW9uYWwgbnVtYmVyLiBHb3QgXCIrZStcIiAvIFwiK24pO3ZhciBhPXQuc2xpY2UoKTtyZXR1cm4gYVtyXT1lL24sYX1mdW5jdGlvbiBJKHQsZSl7dmFyIG49ZS5sZW5ndGg7cmV0dXJuIGYoKHQ9bnVsbD09dD9lLm1hcChmdW5jdGlvbih0LGUpe3JldHVybiBlfSk6W10uY29uY2F0KHQpKS5ldmVyeShmdW5jdGlvbih0KXtyZXR1cm4gdD49LW4mJnQ8bn0pLGZ1bmN0aW9uKCl7cmV0dXJuXCJBbGwgdmFsdWVzIGluIGF4aXMgcGFyYW0gbXVzdCBiZSBpbiByYW5nZSBbLVwiK24rXCIsIFwiK24rXCIpIGJ1dCBnb3QgYXhpcyBcIit0fSksZih0LmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB4KHQpfSksZnVuY3Rpb24oKXtyZXR1cm5cIkFsbCB2YWx1ZXMgaW4gYXhpcyBwYXJhbSBtdXN0IGJlIGludGVnZXJzIGJ1dCBnb3QgYXhpcyBcIit0fSksdC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9uK3Q6dH0pfWZ1bmN0aW9uIGsodCxlKXtmb3IodmFyIG49W10scj1bXSxvPW51bGwhPWUmJkFycmF5LmlzQXJyYXkoZSkmJjA9PT1lLmxlbmd0aCxhPW51bGw9PWV8fG8/bnVsbDpJKGUsdCkuc29ydCgpLGk9MCxzPTA7czx0Lmxlbmd0aDsrK3Mpe2lmKG51bGwhPWEpe2lmKGFbaV09PT1zJiYxIT09dFtzXSl0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBzcXVlZXplIGF4aXMgXCIrcytcIiBzaW5jZSBpdHMgZGltICdcIit0W3NdK1wiJyBpcyBub3QgMVwiKTsobnVsbD09YVtpXXx8YVtpXT5zKSYmMT09PXRbc10mJihuLnB1c2godFtzXSksci5wdXNoKHMpKSxhW2ldPD1zJiZpKyt9MSE9PXRbc10mJihuLnB1c2godFtzXSksci5wdXNoKHMpKX1yZXR1cm57bmV3U2hhcGU6bixrZXB0RGltczpyfX1mdW5jdGlvbiBOKHQsZSl7dmFyIG49bnVsbDtpZihudWxsPT10fHxcImZsb2F0MzJcIj09PXQpbj1uZXcgRmxvYXQzMkFycmF5KGUpO2Vsc2UgaWYoXCJpbnQzMlwiPT09dCluPW5ldyBJbnQzMkFycmF5KGUpO2Vsc2V7aWYoXCJib29sXCIhPT10KXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YSB0eXBlIFwiK3QpO249bmV3IFVpbnQ4QXJyYXkoZSl9cmV0dXJuIG59ZnVuY3Rpb24gUyh0LGUpe3ZhciBuPW51bGw7aWYobnVsbD09dHx8XCJmbG9hdDMyXCI9PT10KW49bmV3IEZsb2F0MzJBcnJheShlKTtlbHNlIGlmKFwiaW50MzJcIj09PXQpbj1uZXcgSW50MzJBcnJheShlKTtlbHNlIGlmKFwiYm9vbFwiPT09dCluPW5ldyBVaW50OEFycmF5KGUpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXQpdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhIHR5cGUgXCIrdCk7bj1uZXcgQXJyYXkoZSl9cmV0dXJuIG59ZnVuY3Rpb24gQSh0LGUpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO2lmKGlzTmFOKHIpfHwhaXNGaW5pdGUocikpdGhyb3cgRXJyb3IoXCJBIHRlbnNvciBvZiB0eXBlIFwiK2UrXCIgYmVpbmcgdXBsb2FkZWQgY29udGFpbnMgXCIrcitcIi5cIil9fWZ1bmN0aW9uIFQodCl7cmV0dXJuXCJib29sXCI9PT10fHxcImNvbXBsZXg2NFwiPT09dHx8XCJmbG9hdDMyXCI9PT10fHxcImludDMyXCI9PT10fHxcInN0cmluZ1wiPT09dH1mdW5jdGlvbiBEKHQsZSl7cmV0dXJuXCJjb21wbGV4NjRcIiE9PWUmJigoXCJmbG9hdDMyXCIhPT1lfHxcImNvbXBsZXg2NFwiPT09dCkmJigoXCJpbnQzMlwiIT09ZXx8XCJmbG9hdDMyXCI9PT10fHxcImNvbXBsZXg2NFwiPT09dCkmJihcImJvb2xcIiE9PWV8fFwiYm9vbFwiIT09dCkpKX1mdW5jdGlvbiBfKHQpe3JldHVybiB0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHx0IGluc3RhbmNlb2YgSW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl9ZnVuY3Rpb24gTyh0KXtpZihcImZsb2F0MzJcIj09PXR8fFwiaW50MzJcIj09PXQpcmV0dXJuIDQ7aWYoXCJjb21wbGV4NjRcIj09PXQpcmV0dXJuIDg7aWYoXCJib29sXCI9PT10KXJldHVybiAxO3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gZHR5cGUgXCIrdCl9ZnVuY3Rpb24gRih0KXtpZihudWxsPT10KXJldHVybiAwO3ZhciBlPTA7cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZSs9dC5sZW5ndGh9KSxlfWZ1bmN0aW9uIE0odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHR8fHQgaW5zdGFuY2VvZiBTdHJpbmd9ZnVuY3Rpb24gQih0KXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIHR9ZnVuY3Rpb24gUCh0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdH1mdW5jdGlvbiBMKHQpe3JldHVybiBBcnJheS5pc0FycmF5KHQpP0wodFswXSk6dCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheT9cImZsb2F0MzJcIjp0IGluc3RhbmNlb2YgSW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/XCJpbnQzMlwiOlAodCk/XCJmbG9hdDMyXCI6TSh0KT9cInN0cmluZ1wiOkIodCk/XCJib29sXCI6XCJmbG9hdDMyXCJ9ZnVuY3Rpb24gVyh0KXtyZXR1cm4hISh0JiZ0LmNvbnN0cnVjdG9yJiZ0LmNhbGwmJnQuYXBwbHkpfWZ1bmN0aW9uIFUodCxlKXtmb3IodmFyIG49ZTtuPHQ7KytuKWlmKHQlbj09MClyZXR1cm4gbjtyZXR1cm4gdH1mdW5jdGlvbiBWKHQpe3ZhciBlPXQubGVuZ3RoO2lmKGU8MilyZXR1cm5bXTt2YXIgbj1uZXcgQXJyYXkoZS0xKTtuW2UtMl09dFtlLTFdO2Zvcih2YXIgcj1lLTM7cj49MDstLXIpbltyXT1uW3IrMV0qdFtyKzFdO3JldHVybiBufWZ1bmN0aW9uIHoodCxlLG4pe2lmKFwic3RyaW5nXCI9PT1lKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb252ZXJ0IGEgc3RyaW5nW10gdG8gYSBUeXBlZEFycmF5XCIpO2lmKEFycmF5LmlzQXJyYXkodCkmJih0PW0odCkpLG4mJkEodCxlKSxmdW5jdGlvbih0LGUpe3JldHVybiB0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5JiZcImZsb2F0MzJcIj09PWV8fHQgaW5zdGFuY2VvZiBJbnQzMkFycmF5JiZcImludDMyXCI9PT1lfHx0IGluc3RhbmNlb2YgVWludDhBcnJheSYmXCJib29sXCI9PT1lfSh0LGUpKXJldHVybiB0O2lmKG51bGw9PWV8fFwiZmxvYXQzMlwiPT09ZXx8XCJjb21wbGV4NjRcIj09PWUpcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkodCk7aWYoXCJpbnQzMlwiPT09ZSlyZXR1cm4gbmV3IEludDMyQXJyYXkodCk7aWYoXCJib29sXCI9PT1lKXtmb3IodmFyIHI9bmV3IFVpbnQ4QXJyYXkodC5sZW5ndGgpLG89MDtvPHIubGVuZ3RoOysrbykwIT09TWF0aC5yb3VuZCh0W29dKSYmKHJbb109MSk7cmV0dXJuIHJ9dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhIHR5cGUgXCIrZSl9ZnVuY3Rpb24gRyh0LGUpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gZVswXTt2YXIgbj10LnJlZHVjZShmdW5jdGlvbih0LGUpe3JldHVybiB0KmV9KTtpZigwPT09bilyZXR1cm5bXTtpZihuIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiW1wiK3QrXCJdIGRvZXMgbm90IG1hdGNoIHRoZSBpbnB1dCBzaXplLlwiKTtyZXR1cm4gZnVuY3Rpb24gdChlLG4scil7dmFyIG89bmV3IEFycmF5O2lmKDE9PT1uLmxlbmd0aClmb3IodmFyIGE9blswXSxpPTA7aTxhO2krKylvW2ldPXJbZStpXTtlbHNle2E9blswXTt2YXIgcz1uLnNsaWNlKDEpLHU9cy5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSk7Zm9yKGk9MDtpPGE7aSsrKW9baV09dChlK2kqdSxzLHIpfXJldHVybiBvfSgwLHQsZSl9ZnVuY3Rpb24gSCh0LGUpe2Zvcih2YXIgbj1xKHQsZSkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09MTtyZXR1cm4gbn1mdW5jdGlvbiBxKHQsZSl7aWYobnVsbD09ZXx8XCJmbG9hdDMyXCI9PT1lfHxcImNvbXBsZXg2NFwiPT09ZSlyZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh0KTtpZihcImludDMyXCI9PT1lKXJldHVybiBuZXcgSW50MzJBcnJheSh0KTtpZihcImJvb2xcIj09PWUpcmV0dXJuIG5ldyBVaW50OEFycmF5KHQpO3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YSB0eXBlIFwiK2UpfWZ1bmN0aW9uICQoKXtyZXR1cm4gaS5wbGF0Zm9ybS5ub3coKX1mdW5jdGlvbiBLKHQpe3QuZm9yRWFjaChmdW5jdGlvbihlKXtmKE51bWJlci5pc0ludGVnZXIoZSkmJmU+PTAsZnVuY3Rpb24oKXtyZXR1cm5cIlRlbnNvciBtdXN0IGhhdmUgYSBzaGFwZSBjb21wcmlzZWQgb2YgcG9zaXRpdmUgaW50ZWdlcnMgYnV0IGdvdCBzaGFwZSBbXCIrdCtcIl0uXCJ9KX0pfWZ1bmN0aW9uIGoodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9XCJ1dGYtOFwiKSxlPWV8fFwidXRmLThcIixpLnBsYXRmb3JtLmVuY29kZSh0LGUpfWZ1bmN0aW9uIFgodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9XCJ1dGYtOFwiKSxlPWV8fFwidXRmLThcIixpLnBsYXRmb3JtLmRlY29kZSh0LGUpfXZhciBZPU9iamVjdC5mcmVlemUoe3NodWZmbGU6bCxjbGFtcDpjLG5lYXJlc3RMYXJnZXJFdmVuOmgsc3VtOnAscmFuZFVuaWZvcm06ZnVuY3Rpb24odCxlKXt2YXIgbj1NYXRoLnJhbmRvbSgpO3JldHVybiBlKm4rKDEtbikqdH0sZGlzdFNxdWFyZWQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MCxyPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBvPU51bWJlcih0W3JdKS1OdW1iZXIoZVtyXSk7bis9bypvfXJldHVybiBufSxhc3NlcnQ6Zixhc3NlcnRTaGFwZXNNYXRjaDpkLGFzc2VydE5vbk51bGw6dixmbGF0dGVuOm0sc2l6ZUZyb21TaGFwZTpnLGlzU2NhbGFyU2hhcGU6ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10Lmxlbmd0aH0sYXJyYXlzRXF1YWw6eSxpc0ludDp4LHRhbmg6YixzaXplVG9TcXVhcmlzaFNoYXBlOncsY3JlYXRlU2h1ZmZsZWRJbmRpY2VzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgVWludDMyQXJyYXkodCksbj0wO248dDsrK24pZVtuXT1uO3JldHVybiBsKGUpLGV9LHJpZ2h0UGFkOkMscmVwZWF0ZWRUcnk6RSxpbmZlckZyb21JbXBsaWNpdFNoYXBlOlIscGFyc2VBeGlzUGFyYW06SSxzcXVlZXplU2hhcGU6ayxnZXRUeXBlZEFycmF5RnJvbURUeXBlOk4sZ2V0QXJyYXlGcm9tRFR5cGU6UyxjaGVja0NvbnZlcnNpb25Gb3JFcnJvcnM6QSxpc1ZhbGlkRHR5cGU6VCxoYXNFbmNvZGluZ0xvc3M6RCxpc1R5cGVkQXJyYXk6XyxieXRlc1BlckVsZW1lbnQ6TyxieXRlc0Zyb21TdHJpbmdBcnJheTpGLGlzU3RyaW5nOk0saXNCb29sZWFuOkIsaXNOdW1iZXI6UCxpbmZlckR0eXBlOkwsaXNGdW5jdGlvbjpXLG5lYXJlc3REaXZpc29yOlUsY29tcHV0ZVN0cmlkZXM6Vix0b1R5cGVkQXJyYXk6eix0b05lc3RlZEFycmF5OkcsbWFrZU9uZXNUeXBlZEFycmF5OkgsbWFrZVplcm9zVHlwZWRBcnJheTpxLG5vdzokLGFzc2VydE5vbk5lZ2F0aXZlSW50ZWdlckRpbWVuc2lvbnM6SyxmZXRjaDpmdW5jdGlvbih0LGUpe3JldHVybiBpLnBsYXRmb3JtLmZldGNoKHQsZSl9LGVuY29kZVN0cmluZzpqLGRlY29kZVN0cmluZzpYfSksUT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt0aGlzLmJhY2tlbmRUaW1lcj10LHRoaXMubG9nZ2VyPWUsbnVsbD09ZSYmKHRoaXMubG9nZ2VyPW5ldyBKKX1yZXR1cm4gdC5wcm90b3R5cGUucHJvZmlsZUtlcm5lbD1mdW5jdGlvbih0LGUsbil7dmFyIHIsbz10aGlzLGE9dGhpcy5iYWNrZW5kVGltZXIudGltZShmdW5jdGlvbigpe3I9bigpfSk7cmV0dXJuKEFycmF5LmlzQXJyYXkocik/cjpbcl0pLmZvckVhY2goZnVuY3Rpb24obil7bi5kYXRhKCkudGhlbihmdW5jdGlvbihyKXshZnVuY3Rpb24odCxlLG4pe2lmKFwiZmxvYXQzMlwiIT09ZSlyZXR1cm4hMTtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG89dFtyXTtpZihpc05hTihvKXx8IWlzRmluaXRlKG8pKXJldHVybiBjb25zb2xlLndhcm4oXCJGb3VuZCBcIitvK1wiIGluIHRoZSByZXN1bHQgb2YgJ1wiK24rXCInXCIpLCEwfX0ocixuLmR0eXBlLHQpLGEudGhlbihmdW5jdGlvbihhKXt2YXIgaT1cIlwiO251bGwhPWEuZ2V0RXh0cmFQcm9maWxlSW5mbyYmKGk9YS5nZXRFeHRyYVByb2ZpbGVJbmZvKCkpLG8ubG9nZ2VyLmxvZ0tlcm5lbFByb2ZpbGUodCxuLHIsYS5rZXJuZWxNcyxlLGkpfSl9KX0pLHJ9LHR9KCk7dmFyIEo9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXJldHVybiB0LnByb3RvdHlwZS5sb2dLZXJuZWxQcm9maWxlPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2YXIgaT1DKHIrXCJtc1wiLDkpLHM9Qyh0LDI1KSx1PWUucmFuayxsPWUuc2l6ZSxjPUMoZS5zaGFwZS50b1N0cmluZygpLDE0KSxoPVwiXCI7Zm9yKHZhciBwIGluIG8pe3ZhciBmPW9bcF0uc2hhcGUsZD1mLmxlbmd0aDtoKz1wK1wiOiBcIitkK1wiRCBcIisoZD4wP2Y6XCJcIikrXCIgXCJ9Y29uc29sZS5sb2coXCIlY1wiK3MrXCJcXHQlY1wiK2krXCJcXHQlY1wiK3UrXCJEIFwiK2MrXCJcXHQlY1wiK2wrXCJcXHQlY1wiK2grXCJcXHQlY1wiK2EsXCJmb250LXdlaWdodDpib2xkXCIsXCJjb2xvcjpyZWRcIixcImNvbG9yOmJsdWVcIixcImNvbG9yOiBvcmFuZ2VcIixcImNvbG9yOiBncmVlblwiLFwiY29sb3I6IHN0ZWVsYmx1ZVwiKX0sdH0oKSxaPTIwLHR0PTMsZXQ9NztmdW5jdGlvbiBudCh0LGUsbixyKXt2YXIgbz1WKGUpLGE9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89ZyhlKSxhPXJbci5sZW5ndGgtMV0saT1uZXcgQXJyYXkoYSkuZmlsbCgwKSxzPWUubGVuZ3RoLHU9XCJjb21wbGV4NjRcIj09PW4/YXQodCk6dDtpZihzPjEpZm9yKHZhciBsPTA7bDxvL2E7bCsrKWZvcih2YXIgYz1sKmEsaD0wO2g8YTtoKyspaVtoXT1NYXRoLm1heChpW2hdLHJ0KHVbYytoXSwwLG4pLmxlbmd0aCk7cmV0dXJuIGl9KHQsZSxuLG8pLGk9ZS5sZW5ndGgscz1mdW5jdGlvbiB0KGUsbixyLG8sYSxpKXt2b2lkIDA9PT1pJiYoaT0hMCk7dmFyIHM9XCJjb21wbGV4NjRcIj09PXI/MjoxO3ZhciB1PW5bMF07dmFyIGw9bi5sZW5ndGg7aWYoMD09PWwpe2lmKFwiY29tcGxleDY0XCI9PT1yKXt2YXIgYz1hdChlKTtyZXR1cm5bcnQoY1swXSwwLHIpXX1yZXR1cm5cImJvb2xcIj09PXI/W290KGVbMF0pXTpbZVswXS50b1N0cmluZygpXX1pZigxPT09bCl7aWYodT5aKXt2YXIgaD10dCpzLHA9QXJyYXkuZnJvbShlLnNsaWNlKDAsaCkpLGY9QXJyYXkuZnJvbShlLnNsaWNlKHUtdHQqcyx1KSk7cmV0dXJuXCJjb21wbGV4NjRcIj09PXImJihwPWF0KHApLGY9YXQoZikpLFtcIltcIitwLm1hcChmdW5jdGlvbih0LGUpe3JldHVybiBydCh0LGFbZV0scil9KS5qb2luKFwiLCBcIikrXCIsIC4uLiwgXCIrZi5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm4gcnQodCxhW3UtdHQrZV0scil9KS5qb2luKFwiLCBcIikrXCJdXCJdfXZhciBkPVwiY29tcGxleDY0XCI9PT1yP2F0KGUpOkFycmF5LmZyb20oZSk7cmV0dXJuW1wiW1wiK2QubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHJ0KHQsYVtlXSxyKX0pLmpvaW4oXCIsIFwiKStcIl1cIl19dmFyIHY9bi5zbGljZSgxKTt2YXIgbT1vLnNsaWNlKDEpO3ZhciBnPW9bMF0qczt2YXIgeT1bXTtpZih1Plope2Zvcih2YXIgeD0wO3g8dHQ7eCsrKXt2YXIgYj14Kmcsdz1iK2c7eS5wdXNoLmFwcGx5KHksdChlLnNsaWNlKGIsdyksdixyLG0sYSwhMSkpfXkucHVzaChcIi4uLlwiKTtmb3IodmFyIHg9dS10dDt4PHU7eCsrKXt2YXIgYj14Kmcsdz1iK2c7eS5wdXNoLmFwcGx5KHksdChlLnNsaWNlKGIsdyksdixyLG0sYSx4PT09dS0xKSl9fWVsc2UgZm9yKHZhciB4PTA7eDx1O3grKyl7dmFyIGI9eCpnLHc9YitnO3kucHVzaC5hcHBseSh5LHQoZS5zbGljZShiLHcpLHYscixtLGEseD09PXUtMSkpfXZhciBDPTI9PT1sP1wiLFwiOlwiXCI7eVswXT1cIltcIit5WzBdK0M7Zm9yKHZhciB4PTE7eDx5Lmxlbmd0aC0xO3grKyl5W3hdPVwiIFwiK3lbeF0rQzt2YXIgRT1cIixcXG5cIjtmb3IodmFyIHg9Mjt4PGw7eCsrKUUrPVwiXFxuXCI7eVt5Lmxlbmd0aC0xXT1cIiBcIit5W3kubGVuZ3RoLTFdK1wiXVwiKyhpP1wiXCI6RSk7cmV0dXJuIHl9KHQsZSxuLG8sYSksdT1bXCJUZW5zb3JcIl07cmV0dXJuIHImJih1LnB1c2goXCIgIGR0eXBlOiBcIituKSx1LnB1c2goXCIgIHJhbms6IFwiK2kpLHUucHVzaChcIiAgc2hhcGU6IFtcIitlK1wiXVwiKSx1LnB1c2goXCIgIHZhbHVlczpcIikpLHUucHVzaChzLm1hcChmdW5jdGlvbih0KXtyZXR1cm5cIiAgICBcIit0fSkuam9pbihcIlxcblwiKSksdS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIHJ0KHQsZSxuKXtyZXR1cm4gQyhBcnJheS5pc0FycmF5KHQpP3BhcnNlRmxvYXQodFswXS50b0ZpeGVkKGV0KSkrXCIgKyBcIitwYXJzZUZsb2F0KHRbMV0udG9GaXhlZChldCkpK1wialwiOk0odCk/XCInXCIrdCtcIidcIjpcImJvb2xcIj09PW4/b3QodCk6cGFyc2VGbG9hdCh0LnRvRml4ZWQoZXQpKS50b1N0cmluZygpLGUpfWZ1bmN0aW9uIG90KHQpe3JldHVybiAwPT09dD9cImZhbHNlXCI6XCJ0cnVlXCJ9ZnVuY3Rpb24gYXQodCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoO24rPTIpZS5wdXNoKFt0W25dLHRbbisxXV0pO3JldHVybiBlfXZhciBpdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4pe3ZhciByPXRoaXM7aWYodGhpcy5kdHlwZT1lLHRoaXMuc2hhcGU9dC5zbGljZSgpLHRoaXMuc2l6ZT1nKHQpLG51bGwhPW4pe3ZhciBvPW4ubGVuZ3RoO2Yobz09PXRoaXMuc2l6ZSxmdW5jdGlvbigpe3JldHVyblwiTGVuZ3RoIG9mIHZhbHVlcyAnXCIrbytcIicgZG9lcyBub3QgbWF0Y2ggdGhlIHNpemUgaW5mZXJyZWQgYnkgdGhlIHNoYXBlICdcIityLnNpemUrXCInLlwifSl9aWYoXCJjb21wbGV4NjRcIj09PWUpdGhyb3cgbmV3IEVycm9yKFwiY29tcGxleDY0IGR0eXBlIFRlbnNvckJ1ZmZlcnMgYXJlIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSBjcmVhdGUgYSBUZW5zb3JCdWZmZXIgZm9yIHRoZSByZWFsIGFuZCBpbWFnaW5hcnkgcGFydHMgc2VwYXJhdGVseSBhbmQgY2FsbCB0Zi5jb21wbGV4KHJlYWwsIGltYWcpLlwiKTt0aGlzLnZhbHVlcz1ufHxTKGUsdGhpcy5zaXplKSx0aGlzLnN0cmlkZXM9Vih0KX1yZXR1cm4gdC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLG49W10scj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTswPT09bi5sZW5ndGgmJihuPVswXSksZihuLmxlbmd0aD09PXRoaXMucmFuayxmdW5jdGlvbigpe3JldHVyblwiVGhlIG51bWJlciBvZiBwcm92aWRlZCBjb29yZGluYXRlcyAoXCIrbi5sZW5ndGgrXCIpIG11c3QgbWF0Y2ggdGhlIHJhbmsgKFwiK2UucmFuaytcIilcIn0pO3ZhciBvPXRoaXMubG9jVG9JbmRleChuKTt0aGlzLnZhbHVlc1tvXT10fSx0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sZT0wO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspdFtlXT1hcmd1bWVudHNbZV07MD09PXQubGVuZ3RoJiYodD1bMF0pO2Zvcih2YXIgbj0wLHI9MCxvPXQ7cjxvLmxlbmd0aDtyKyspe3ZhciBhPW9bcl07aWYoYTwwfHxhPj10aGlzLnNoYXBlW25dKXt2YXIgaT1cIlJlcXVlc3RlZCBvdXQgb2YgcmFuZ2UgZWxlbWVudCBhdCBcIit0K1wiLiAgIEJ1ZmZlciBzaGFwZT1cIit0aGlzLnNoYXBlO3Rocm93IG5ldyBFcnJvcihpKX1uKyt9Zm9yKHZhciBzPXRbdC5sZW5ndGgtMV0sdT0wO3U8dC5sZW5ndGgtMTsrK3Upcys9dGhpcy5zdHJpZGVzW3VdKnRbdV07cmV0dXJuIHRoaXMudmFsdWVzW3NdfSx0LnByb3RvdHlwZS5sb2NUb0luZGV4PWZ1bmN0aW9uKHQpe2lmKDA9PT10aGlzLnJhbmspcmV0dXJuIDA7aWYoMT09PXRoaXMucmFuaylyZXR1cm4gdFswXTtmb3IodmFyIGU9dFt0Lmxlbmd0aC0xXSxuPTA7bjx0Lmxlbmd0aC0xOysrbillKz10aGlzLnN0cmlkZXNbbl0qdFtuXTtyZXR1cm4gZX0sdC5wcm90b3R5cGUuaW5kZXhUb0xvYz1mdW5jdGlvbih0KXtpZigwPT09dGhpcy5yYW5rKXJldHVybltdO2lmKDE9PT10aGlzLnJhbmspcmV0dXJuW3RdO2Zvcih2YXIgZT1uZXcgQXJyYXkodGhpcy5zaGFwZS5sZW5ndGgpLG49MDtuPGUubGVuZ3RoLTE7KytuKWVbbl09TWF0aC5mbG9vcih0L3RoaXMuc3RyaWRlc1tuXSksdC09ZVtuXSp0aGlzLnN0cmlkZXNbbl07cmV0dXJuIGVbZS5sZW5ndGgtMV09dCxlfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJyYW5rXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNoYXBlLmxlbmd0aH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS50b1RlbnNvcj1mdW5jdGlvbigpe3JldHVybiBjdC5tYWtlKHRoaXMuc2hhcGUse3ZhbHVlczp0aGlzLnZhbHVlc30sdGhpcy5kdHlwZSl9LHR9KCksc3Q9bnVsbCx1dD1udWxsLGx0PW51bGw7dmFyIGN0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUsbixyLG8pe3RoaXMua2VwdD0hMSx0aGlzLmlzRGlzcG9zZWRJbnRlcm5hbD0hMSx0aGlzLnNoYXBlPXQuc2xpY2UoKSx0aGlzLmR0eXBlPWV8fFwiZmxvYXQzMlwiLHRoaXMuc2l6ZT1nKHQpLHRoaXMuc3RyaWRlcz1WKHQpLHRoaXMuZGF0YUlkPW51bGwhPXI/cjp7fSx0aGlzLmlkPXN0KCkubmV4dFRlbnNvcklkKCksdGhpcy5yYW5rVHlwZT10aGlzLnJhbms8NT90aGlzLnJhbmsudG9TdHJpbmcoKTpcImhpZ2hlclwiLHN0KCkucmVnaXN0ZXJUZW5zb3IodGhpcyxvKSxudWxsIT1uJiZzdCgpLndyaXRlKG8sdGhpcy5kYXRhSWQsbil9cmV0dXJuIHQubWFrZT1mdW5jdGlvbihlLG4scixvKXt2YXIgYT1uLnZhbHVlcztyZXR1cm4gbnVsbCE9bi52YWx1ZXMmJlwic3RyaW5nXCI9PT1yJiZNKG4udmFsdWVzWzBdKSYmKGE9bi52YWx1ZXMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBqKHQpfSkpLG5ldyB0KGUscixhLG4uZGF0YUlkLG8pfSx0LnByb3RvdHlwZS5mbGF0dGVuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5hczFEKCl9LHQucHJvdG90eXBlLmFzU2NhbGFyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksZigxPT09dGhpcy5zaXplLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJyYXkgbXVzdCBoYXZlIG9ubHkgMSBlbGVtZW50LlwifSksdGhpcy5yZXNoYXBlKFtdKX0sdC5wcm90b3R5cGUuYXMxRD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMucmVzaGFwZShbdGhpcy5zaXplXSl9LHQucHJvdG90eXBlLmFzMkQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnJlc2hhcGUoW3QsZV0pfSx0LnByb3RvdHlwZS5hczNEPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnJlc2hhcGUoW3QsZSxuXSl9LHQucHJvdG90eXBlLmFzNEQ9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5yZXNoYXBlKFt0LGUsbixyXSl9LHQucHJvdG90eXBlLmFzNUQ9ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnJlc2hhcGUoW3QsZSxuLHIsb10pfSx0LnByb3RvdHlwZS5hc1R5cGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY2FzdCh0aGlzLHQpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJyYW5rXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNoYXBlLmxlbmd0aH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5idWZmZXI9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSxbMix1dC5idWZmZXIodGhpcy5zaGFwZSx0aGlzLmR0eXBlLHQpXX19KX0pfSx0LnByb3RvdHlwZS5idWZmZXJTeW5jPWZ1bmN0aW9uKCl7cmV0dXJuIHV0LmJ1ZmZlcih0aGlzLnNoYXBlLHRoaXMuZHR5cGUsdGhpcy5kYXRhU3luYygpKX0sdC5wcm90b3R5cGUuYXJyYXk9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSxbMixHKHRoaXMuc2hhcGUsdCldfX0pfSl9LHQucHJvdG90eXBlLmFycmF5U3luYz1mdW5jdGlvbigpe3JldHVybiBHKHRoaXMuc2hhcGUsdGhpcy5kYXRhU3luYygpKX0sdC5wcm90b3R5cGUuZGF0YT1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciB0LGU7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihuKXtzd2l0Y2gobi5sYWJlbCl7Y2FzZSAwOnJldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHQ9c3QoKS5yZWFkKHRoaXMuZGF0YUlkKSxcInN0cmluZ1wiIT09dGhpcy5kdHlwZT9bMywyXTpbNCx0XTtjYXNlIDE6ZT1uLnNlbnQoKTt0cnl7cmV0dXJuWzIsZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIFgodCl9KV19Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRlY29kZSB0aGUgc3RyaW5nIGJ5dGVzIGludG8gdXRmLTguIFRvIGdldCB0aGUgb3JpZ2luYWwgYnl0ZXMsIGNhbGwgdGVuc29yLmJ5dGVzKCkuXCIpfW4ubGFiZWw9MjtjYXNlIDI6cmV0dXJuWzIsdF19fSl9KX0sdC5wcm90b3R5cGUuZGF0YVN5bmM9ZnVuY3Rpb24oKXt0aGlzLnRocm93SWZEaXNwb3NlZCgpO3ZhciB0PXN0KCkucmVhZFN5bmModGhpcy5kYXRhSWQpO2lmKFwic3RyaW5nXCI9PT10aGlzLmR0eXBlKXRyeXtyZXR1cm4gdC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIFgodCl9KX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGVjb2RlIHRoZSBzdHJpbmcgYnl0ZXMgaW50byB1dGYtOC4gVG8gZ2V0IHRoZSBvcmlnaW5hbCBieXRlcywgY2FsbCB0ZW5zb3IuYnl0ZXMoKS5cIil9cmV0dXJuIHR9LHQucHJvdG90eXBlLmJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLFs0LHN0KCkucmVhZCh0aGlzLmRhdGFJZCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSxcInN0cmluZ1wiPT09dGhpcy5kdHlwZT9bMix0XTpbMixuZXcgVWludDhBcnJheSh0LmJ1ZmZlcildfX0pfSl9LHQucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmlzRGlzcG9zZWR8fChzdCgpLmRpc3Bvc2VUZW5zb3IodGhpcyksdGhpcy5pc0Rpc3Bvc2VkSW50ZXJuYWw9ITApfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJpc0Rpc3Bvc2VkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzRGlzcG9zZWRJbnRlcm5hbH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS50aHJvd0lmRGlzcG9zZWQ9ZnVuY3Rpb24oKXtpZih0aGlzLmlzRGlzcG9zZWQpdGhyb3cgbmV3IEVycm9yKFwiVGVuc29yIGlzIGRpc3Bvc2VkLlwiKX0sdC5wcm90b3R5cGUudG9GbG9hdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFzVHlwZShcImZsb2F0MzJcIil9LHQucHJvdG90eXBlLnRvSW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNUeXBlKFwiaW50MzJcIil9LHQucHJvdG90eXBlLnRvQm9vbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFzVHlwZShcImJvb2xcIil9LHQucHJvdG90eXBlLnByaW50PWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0hMSksdXQucHJpbnQodGhpcyx0KX0sdC5wcm90b3R5cGUucmVzaGFwZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5yZXNoYXBlKHRoaXMsdCl9LHQucHJvdG90eXBlLnJlc2hhcGVBcz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnJlc2hhcGUodC5zaGFwZSl9LHQucHJvdG90eXBlLmV4cGFuZERpbXM9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PTApLHV0LmV4cGFuZERpbXModGhpcyx0KX0sdC5wcm90b3R5cGUuY3Vtc3VtPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MCksdm9pZCAwPT09ZSYmKGU9ITEpLHZvaWQgMD09PW4mJihuPSExKSx1dC5jdW1zdW0odGhpcyx0LGUsbil9LHQucHJvdG90eXBlLnNxdWVlemU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3F1ZWV6ZSh0aGlzLHQpfSx0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmNsb25lKHRoaXMpfSx0LnByb3RvdHlwZS5vbmVIb3Q9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0Lm9uZUhvdCh0aGlzLHQsZSxuKX0sdC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PSExKSxudCh0aGlzLmRhdGFTeW5jKCksdGhpcy5zaGFwZSx0aGlzLmR0eXBlLHQpfSx0LnByb3RvdHlwZS50aWxlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnRpbGUodGhpcyx0KX0sdC5wcm90b3R5cGUuZ2F0aGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPTApLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuZ2F0aGVyKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUubWF0TXVsPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLHZvaWQgMD09PW4mJihuPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0Lm1hdE11bCh0aGlzLHQsZSxuKX0sdC5wcm90b3R5cGUuZG90PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmRvdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5ub3JtPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJldWNsaWRlYW5cIiksdm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubm9ybSh0aGlzLHQsZSxuKX0sdC5wcm90b3R5cGUuc2xpY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zbGljZSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQucmV2ZXJzZSh0aGlzLHQpfSx0LnByb3RvdHlwZS5jb25jYXQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49MCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxlIGluc3RhbmNlb2YgdCYmKGU9W2VdKSx1dC5jb25jYXQoW3RoaXNdLmNvbmNhdChlKSxuKX0sdC5wcm90b3R5cGUuc3BsaXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9MCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcGxpdCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnN0YWNrPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPTApLHV0LnN0YWNrKFt0aGlzLHRdLGUpfSx0LnByb3RvdHlwZS51bnN0YWNrPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0wKSx1dC51bnN0YWNrKHRoaXMsdCl9LHQucHJvdG90eXBlLnBhZD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0wKSx1dC5wYWQodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5iYXRjaE5vcm1hbGl6YXRpb249ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdm9pZCAwPT09biYmKG49LjAwMSksbHQoXCJ0Zi5iYXRjaE5vcm1hbGl6YXRpb24oKSBpcyBnb2luZyBhd2F5LiBVc2UgdGYuYmF0Y2hOb3JtKCkgaW5zdGVhZCwgYW5kIG5vdGUgdGhlIHBvc2l0aW9uYWwgYXJndW1lbnQgY2hhbmdlIG9mIHNjYWxlLCBvZmZzZXQsIGFuZCB2YXJpYW5jZUVwc2lsb25cIiksdGhpcy5iYXRjaE5vcm0odCxlLG8scixuKX0sdC5wcm90b3R5cGUuYmF0Y2hOb3JtPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHZvaWQgMD09PW8mJihvPS4wMDEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYmF0Y2hOb3JtKHRoaXMsdCxlLG4scixvKX0sdC5wcm90b3R5cGUuYWxsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmFsbCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5hbnkodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5sb2dTdW1FeHA9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubG9nU3VtRXhwKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuc3VtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnN1bSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnByb2Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQucHJvZCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLm1lYW49ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubWVhbih0aGlzLHQsZSl9LHQucHJvdG90eXBlLm1pbj1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5taW4odGhpcyx0LGUpfSx0LnByb3RvdHlwZS5tYXg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubWF4KHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuYXJnTWluPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmFyZ01pbih0aGlzLHQpfSx0LnByb3RvdHlwZS5hcmdNYXg9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYXJnTWF4KHRoaXMsdCl9LHQucHJvdG90eXBlLmNhc3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY2FzdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYWRkKHRoaXMsdCl9LHQucHJvdG90eXBlLmFkZFN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5hZGRTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUuYXRhbjI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYXRhbjIodGhpcyx0KX0sdC5wcm90b3R5cGUuc3ViPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnN1Yih0aGlzLHQpfSx0LnByb3RvdHlwZS5zdWJTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3ViU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLnBvdz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5wb3codGhpcyx0KX0sdC5wcm90b3R5cGUucG93U3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnBvd1N0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5tdWw9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubXVsKHRoaXMsdCl9LHQucHJvdG90eXBlLm11bFN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5tdWxTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUuZGl2PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmRpdih0aGlzLHQpfSx0LnByb3RvdHlwZS5mbG9vckRpdj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5mbG9vckRpdih0aGlzLHQpfSx0LnByb3RvdHlwZS5kaXZTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuZGl2U3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLm1pbmltdW09ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubWluaW11bSh0aGlzLHQpfSx0LnByb3RvdHlwZS5taW5pbXVtU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0Lm1pbmltdW1TdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUubWF4aW11bT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5tYXhpbXVtKHRoaXMsdCl9LHQucHJvdG90eXBlLm1heGltdW1TdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubWF4aW11bVN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5tb2Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubW9kKHRoaXMsdCl9LHQucHJvdG90eXBlLm1vZFN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5tb2RTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2U9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3F1YXJlZERpZmZlcmVuY2UodGhpcyx0KX0sdC5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2VTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3F1YXJlZERpZmZlcmVuY2VTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUudHJhbnNwb3NlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnRyYW5zcG9zZSh0aGlzLHQpfSx0LnByb3RvdHlwZS5ub3RFcXVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5ub3RFcXVhbCh0aGlzLHQpfSx0LnByb3RvdHlwZS5ub3RFcXVhbFN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5ub3RFcXVhbFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5sZXNzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0Lmxlc3ModGhpcyx0KX0sdC5wcm90b3R5cGUubGVzc1N0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sZXNzU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmVxdWFsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmVxdWFsKHRoaXMsdCl9LHQucHJvdG90eXBlLmVxdWFsU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmVxdWFsU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmxlc3NFcXVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sZXNzRXF1YWwodGhpcyx0KX0sdC5wcm90b3R5cGUubGVzc0VxdWFsU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0Lmxlc3NFcXVhbFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5ncmVhdGVyPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmdyZWF0ZXIodGhpcyx0KX0sdC5wcm90b3R5cGUuZ3JlYXRlclN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5ncmVhdGVyU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmdyZWF0ZXJFcXVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5ncmVhdGVyRXF1YWwodGhpcyx0KX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmdyZWF0ZXJFcXVhbFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5sb2dpY2FsQW5kPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmxvZ2ljYWxBbmQodGhpcyx0KX0sdC5wcm90b3R5cGUubG9naWNhbE9yPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmxvZ2ljYWxPcih0aGlzLHQpfSx0LnByb3RvdHlwZS5sb2dpY2FsTm90PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubG9naWNhbE5vdCh0aGlzKX0sdC5wcm90b3R5cGUubG9naWNhbFhvcj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sb2dpY2FsWG9yKHRoaXMsdCl9LHQucHJvdG90eXBlLndoZXJlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQud2hlcmUodCx0aGlzLGUpfSx0LnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5uZWcodGhpcyl9LHQucHJvdG90eXBlLmNlaWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5jZWlsKHRoaXMpfSx0LnByb3RvdHlwZS5mbG9vcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmZsb29yKHRoaXMpfSx0LnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc2lnbih0aGlzKX0sdC5wcm90b3R5cGUuaXNOYU49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5pc05hTih0aGlzKX0sdC5wcm90b3R5cGUuaXNJbmY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5pc0luZih0aGlzKX0sdC5wcm90b3R5cGUuaXNGaW5pdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5pc0Zpbml0ZSh0aGlzKX0sdC5wcm90b3R5cGUuZXhwPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuZXhwKHRoaXMpfSx0LnByb3RvdHlwZS5leHBtMT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmV4cG0xKHRoaXMpfSx0LnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sb2codGhpcyl9LHQucHJvdG90eXBlLmxvZzFwPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubG9nMXAodGhpcyl9LHQucHJvdG90eXBlLnNxcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcXJ0KHRoaXMpfSx0LnByb3RvdHlwZS5yc3FydD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnJzcXJ0KHRoaXMpfSx0LnByb3RvdHlwZS5zcXVhcmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcXVhcmUodGhpcyl9LHQucHJvdG90eXBlLnJlY2lwcm9jYWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5yZWNpcHJvY2FsKHRoaXMpfSx0LnByb3RvdHlwZS5hYnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5hYnModGhpcyl9LHQucHJvdG90eXBlLmNsaXBCeVZhbHVlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY2xpcEJ5VmFsdWUodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5yZWx1PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQucmVsdSh0aGlzKX0sdC5wcm90b3R5cGUucmVsdTY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5yZWx1Nih0aGlzKX0sdC5wcm90b3R5cGUuZWx1PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuZWx1KHRoaXMpfSx0LnByb3RvdHlwZS5zZWx1PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc2VsdSh0aGlzKX0sdC5wcm90b3R5cGUubGVha3lSZWx1PWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0uMiksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sZWFreVJlbHUodGhpcyx0KX0sdC5wcm90b3R5cGUucHJlbHU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQucHJlbHUodGhpcyx0KX0sdC5wcm90b3R5cGUuc2lnbW9pZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnNpZ21vaWQodGhpcyl9LHQucHJvdG90eXBlLmxvZ1NpZ21vaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sb2dTaWdtb2lkKHRoaXMpfSx0LnByb3RvdHlwZS5zb2Z0cGx1cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnNvZnRwbHVzKHRoaXMpfSx0LnByb3RvdHlwZS56ZXJvc0xpa2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC56ZXJvc0xpa2UodGhpcyl9LHQucHJvdG90eXBlLm9uZXNMaWtlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQub25lc0xpa2UodGhpcyl9LHQucHJvdG90eXBlLnNpbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnNpbih0aGlzKX0sdC5wcm90b3R5cGUuY29zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY29zKHRoaXMpfSx0LnByb3RvdHlwZS50YW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC50YW4odGhpcyl9LHQucHJvdG90eXBlLmFzaW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5hc2luKHRoaXMpfSx0LnByb3RvdHlwZS5hY29zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYWNvcyh0aGlzKX0sdC5wcm90b3R5cGUuYXRhbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmF0YW4odGhpcyl9LHQucHJvdG90eXBlLnNpbmg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zaW5oKHRoaXMpfSx0LnByb3RvdHlwZS5jb3NoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY29zaCh0aGlzKX0sdC5wcm90b3R5cGUudGFuaD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnRhbmgodGhpcyl9LHQucHJvdG90eXBlLmFzaW5oPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYXNpbmgodGhpcyl9LHQucHJvdG90eXBlLmFjb3NoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYWNvc2godGhpcyl9LHQucHJvdG90eXBlLmF0YW5oPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYXRhbmgodGhpcyl9LHQucHJvdG90eXBlLmVyZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmVyZih0aGlzKX0sdC5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5yb3VuZCh0aGlzKX0sdC5wcm90b3R5cGUuc3RlcD1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zdGVwKHRoaXMsdCl9LHQucHJvdG90eXBlLnNvZnRtYXg9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PS0xKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnNvZnRtYXgodGhpcyx0KX0sdC5wcm90b3R5cGUubG9nU29mdG1heD1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9LTEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubG9nU29mdG1heCh0aGlzLHQpfSx0LnByb3RvdHlwZS5yZXNpemVCaWxpbmVhcj1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5pbWFnZS5yZXNpemVCaWxpbmVhcih0aGlzLHQsZSl9LHQucHJvdG90eXBlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvcj1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5pbWFnZS5yZXNpemVOZWFyZXN0TmVpZ2hib3IodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5jb252MWQ9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj1cIk5XQ1wiKSx2b2lkIDA9PT1vJiYobz0xKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmNvbnYxZCh0aGlzLHQsZSxuLHIsbyxhKX0sdC5wcm90b3R5cGUuY29udjJkPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9XCJOSFdDXCIpLHZvaWQgMD09PW8mJihvPVsxLDFdKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmNvbnYyZCh0aGlzLHQsZSxuLHIsbyxhKX0sdC5wcm90b3R5cGUuY29udjJkVHJhbnNwb3NlPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY29udjJkVHJhbnNwb3NlKHRoaXMsdCxlLG4scixvKX0sdC5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJEPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9XCJOSFdDXCIpLHZvaWQgMD09PW8mJihvPVsxLDFdKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmRlcHRod2lzZUNvbnYyZCh0aGlzLHQsZSxuLHIsbyxhKX0sdC5wcm90b3R5cGUuc2VwYXJhYmxlQ29udjJkPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdm9pZCAwPT09byYmKG89WzEsMV0pLHZvaWQgMD09PWEmJihhPVwiTkhXQ1wiKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnNlcGFyYWJsZUNvbnYyZCh0aGlzLHQsZSxuLHIsbyxhKX0sdC5wcm90b3R5cGUuYXZnUG9vbD1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5hdmdQb29sKHRoaXMsdCxlLG4scil9LHQucHJvdG90eXBlLm1heFBvb2w9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubWF4UG9vbCh0aGlzLHQsZSxuLHIpfSx0LnByb3RvdHlwZS5sb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbj1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9NSksdm9pZCAwPT09ZSYmKGU9MSksdm9pZCAwPT09biYmKG49MSksdm9pZCAwPT09ciYmKHI9LjUpLHV0LmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uKHRoaXMsdCxlLG4scil9LHQucHJvdG90eXBlLnBvb2w9ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5wb29sKHRoaXMsdCxlLG4scixvKX0sdC5wcm90b3R5cGUudmFyaWFibGU9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT10JiYodD0hMCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxodC52YXJpYWJsZSh0aGlzLHQsZSxuKX0sdC5wcm90b3R5cGUudW5zb3J0ZWRTZWdtZW50U3VtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQudW5zb3J0ZWRTZWdtZW50U3VtKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuYmF0Y2hUb1NwYWNlTkQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5iYXRjaFRvU3BhY2VORCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnNwYWNlVG9CYXRjaE5EPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3BhY2VUb0JhdGNoTkQodGhpcyx0LGUpfSx0LnByb3RvdHlwZS50b3BrPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PTEpLHZvaWQgMD09PWUmJihlPSEwKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnRvcGsodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5zdHJpZGVkU2xpY2U9ZnVuY3Rpb24odCxlLG4scixvLGEsaSxzKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9MCksdm9pZCAwPT09byYmKG89MCksdm9pZCAwPT09YSYmKGE9MCksdm9pZCAwPT09aSYmKGk9MCksdm9pZCAwPT09cyYmKHM9MCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zdHJpZGVkU2xpY2UodGhpcyx0LGUsbixyLG8sYSxpLHMpfSx0LnByb3RvdHlwZS5kZXB0aFRvU3BhY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5kZXB0aFRvU3BhY2UodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5mZnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcGVjdHJhbC5mZnQodGhpcyl9LHQucHJvdG90eXBlLmlmZnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcGVjdHJhbC5pZmZ0KHRoaXMpfSx0LnByb3RvdHlwZS5yZmZ0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3BlY3RyYWwucmZmdCh0aGlzKX0sdC5wcm90b3R5cGUuaXJmZnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcGVjdHJhbC5pcmZmdCh0aGlzKX0sdH0oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoY3QsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4hIXQmJm51bGwhPXQuZGF0YUlkJiZudWxsIT10LnNoYXBlJiZudWxsIT10LmR0eXBlfX0pO3ZhciBodD1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUsbixyKXt2b2lkIDA9PT1uJiYobj0hMCk7dmFyIG89dC5jYWxsKHRoaXMsZS5zaGFwZSxlLmR0eXBlLG51bGwsZS5kYXRhSWQpfHx0aGlzO28udHJhaW5hYmxlPW4sby5uYW1lPXIsbnVsbD09by5uYW1lJiYoby5uYW1lPXN0KCkubmV4dFZhcmlhYmxlSWQoKS50b1N0cmluZygpKTt0cnl7c3QoKS5yZWdpc3RlclZhcmlhYmxlKG8pfWNhdGNoKHQpe3Rocm93IHN0KCkuZGlzcG9zZVRlbnNvcihvKSx0fXJldHVybiBvfXJldHVybiBlKG4sdCksbi52YXJpYWJsZT1mdW5jdGlvbih0LGUscixvKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITApLG51bGwhPW8mJm8hPT10LmR0eXBlJiYodD10LmFzVHlwZShvKSksbmV3IG4odCxlLHIpfSxuLnByb3RvdHlwZS5hc3NpZ249ZnVuY3Rpb24odCl7aWYodC5kdHlwZSE9PXRoaXMuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiZHR5cGUgb2YgdGhlIG5ldyB2YWx1ZSAoXCIrdC5kdHlwZStcIikgYW5kIHByZXZpb3VzIHZhbHVlIChcIit0aGlzLmR0eXBlK1wiKSBtdXN0IG1hdGNoXCIpO2lmKCF5KHQuc2hhcGUsdGhpcy5zaGFwZSkpdGhyb3cgbmV3IEVycm9yKFwic2hhcGUgb2YgdGhlIG5ldyB2YWx1ZSAoXCIrdC5zaGFwZStcIikgYW5kIHByZXZpb3VzIHZhbHVlIChcIit0aGlzLnNoYXBlK1wiKSBtdXN0IG1hdGNoXCIpO3N0KCkuZGlzcG9zZVRlbnNvcih0aGlzKSx0aGlzLmRhdGFJZD10LmRhdGFJZCxzdCgpLnJlZ2lzdGVyVGVuc29yKHRoaXMpfSxuLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7c3QoKS5kaXNwb3NlVmFyaWFibGUodGhpcyksdGhpcy5pc0Rpc3Bvc2VkSW50ZXJuYWw9ITB9LG59KGN0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoaHQsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIGN0JiZudWxsIT10LmFzc2lnbiYmdC5hc3NpZ24gaW5zdGFuY2VvZiBGdW5jdGlvbn19KTt2YXIgcHQsZnQsZHQsdnQsbXQsZ3Q9aHQudmFyaWFibGU7IWZ1bmN0aW9uKHQpe3QuUjA9XCJSMFwiLHQuUjE9XCJSMVwiLHQuUjI9XCJSMlwiLHQuUjM9XCJSM1wiLHQuUjQ9XCJSNFwiLHQuUjU9XCJSNVwiLHQuUjY9XCJSNlwifShwdHx8KHB0PXt9KSksZnVuY3Rpb24odCl7dC5mbG9hdDMyPVwiZmxvYXQzMlwiLHQuaW50MzI9XCJpbnQzMlwiLHQuYm9vbD1cImludDMyXCIsdC5jb21wbGV4NjQ9XCJjb21wbGV4NjRcIn0oZnR8fChmdD17fSkpLGZ1bmN0aW9uKHQpe3QuZmxvYXQzMj1cImZsb2F0MzJcIix0LmludDMyPVwiaW50MzJcIix0LmJvb2w9XCJib29sXCIsdC5jb21wbGV4NjQ9XCJjb21wbGV4NjRcIn0oZHR8fChkdD17fSkpLGZ1bmN0aW9uKHQpe3QuZmxvYXQzMj1cImZsb2F0MzJcIix0LmludDMyPVwiZmxvYXQzMlwiLHQuYm9vbD1cImZsb2F0MzJcIix0LmNvbXBsZXg2ND1cImNvbXBsZXg2NFwifSh2dHx8KHZ0PXt9KSksZnVuY3Rpb24odCl7dC5mbG9hdDMyPVwiY29tcGxleDY0XCIsdC5pbnQzMj1cImNvbXBsZXg2NFwiLHQuYm9vbD1cImNvbXBsZXg2NFwiLHQuY29tcGxleDY0PVwiY29tcGxleDY0XCJ9KG10fHwobXQ9e30pKTt2YXIgeXQ9e2Zsb2F0MzI6dnQsaW50MzI6ZnQsYm9vbDpkdCxjb21wbGV4NjQ6bXR9O2Z1bmN0aW9uIHh0KHQsZSl7aWYoXCJzdHJpbmdcIj09PXR8fFwic3RyaW5nXCI9PT1lKXtpZihcInN0cmluZ1wiPT09dCYmXCJzdHJpbmdcIj09PWUpcmV0dXJuXCJzdHJpbmdcIjt0aHJvdyBuZXcgRXJyb3IoXCJDYW4gbm90IHVwY2FzdCBcIit0K1wiIHdpdGggXCIrZSl9cmV0dXJuIHl0W3RdW2VdfWZ1bmN0aW9uIGJ0KHQpe3JldHVybiB4dCh0LFwiaW50MzJcIil9ZnVuY3Rpb24gd3QodCxlKXtpZih0LmR0eXBlPT09ZS5kdHlwZSlyZXR1cm5bdCxlXTt2YXIgbj14dCh0LmR0eXBlLGUuZHR5cGUpO3JldHVyblt0LmNhc3QobiksZS5jYXN0KG4pXX1mdW5jdGlvbiBDdCh0LGUpe2YodC5kdHlwZT09PWUuZHR5cGUsZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBkdHlwZXMgb2YgdGhlIGZpcnN0KFwiK3QuZHR5cGUrXCIpIGFuZCBzZWNvbmQoXCIrZS5kdHlwZStcIikgaW5wdXQgbXVzdCBtYXRjaFwifSl9ZnVuY3Rpb24gRXQodCl7dmFyIGU9W107cmV0dXJuIGZ1bmN0aW9uIHQoZSxuLHIpe2lmKG51bGw9PWUpcmV0dXJuO2lmKGUgaW5zdGFuY2VvZiBjdClyZXR1cm4gdm9pZCBuLnB1c2goZSk7aWYobz1lLCFBcnJheS5pc0FycmF5KG8pJiZcIm9iamVjdFwiIT10eXBlb2YgbylyZXR1cm47dmFyIG87dmFyIGE9ZTtmb3IodmFyIGkgaW4gYSl7dmFyIHM9YVtpXTtyLmhhcyhzKXx8KHIuYWRkKHMpLHQocyxuLHIpKX19KHQsZSxuZXcgU2V0KSxlfXZhciBSdCxJdD1PYmplY3QuZnJlZXplKHttYWtlVHlwZXNNYXRjaDp3dCxhc3NlcnRUeXBlc01hdGNoOkN0LGlzVGVuc29ySW5MaXN0OmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspaWYoZVtuXS5pZD09PXQuaWQpcmV0dXJuITA7cmV0dXJuITF9LGdldFRlbnNvcnNJbkNvbnRhaW5lcjpFdH0pLGt0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMucmVnaXN0ZXJlZFZhcmlhYmxlcz17fSx0aGlzLm5leHRUYXBlTm9kZUlkPTAsdGhpcy5udW1CeXRlcz0wLHRoaXMubnVtVGVuc29ycz0wLHRoaXMubnVtU3RyaW5nVGVuc29ycz0wLHRoaXMubnVtRGF0YUJ1ZmZlcnM9MCx0aGlzLmdyYWRpZW50RGVwdGg9MCx0aGlzLmtlcm5lbERlcHRoPTAsdGhpcy5zY29wZVN0YWNrPVtdLHRoaXMubmV4dFNjb3BlSWQ9MCx0aGlzLnRlbnNvckluZm89bmV3IFdlYWtNYXAsdGhpcy5wcm9maWxpbmc9ITEsdGhpcy5hY3RpdmVQcm9maWxlPXtuZXdCeXRlczowLG5ld1RlbnNvcnM6MCxwZWFrQnl0ZXM6MCxrZXJuZWxzOltdLHJlc3VsdDpudWxsfX1yZXR1cm4gdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0aGlzLnJlZ2lzdGVyZWRWYXJpYWJsZXMpdGhpcy5yZWdpc3RlcmVkVmFyaWFibGVzW3RdLmRpc3Bvc2UoKX0sdH0oKSxOdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5FTlY9dCx0aGlzLnJlZ2lzdHJ5PXt9LHRoaXMucmVnaXN0cnlGYWN0b3J5PXt9LHRoaXMucGVuZGluZ0JhY2tlbmRJbml0SWQ9MCx0aGlzLnN0YXRlPW5ldyBrdH1yZXR1cm4gdC5wcm90b3R5cGUucmVhZHk9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdCxlLG47cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKG51bGwhPXRoaXMucGVuZGluZ0JhY2tlbmRJbml0KXJldHVyblsyLHRoaXMucGVuZGluZ0JhY2tlbmRJbml0LnRoZW4oZnVuY3Rpb24oKXt9KV07aWYobnVsbCE9dGhpcy5iYWNrZW5kSW5zdGFuY2UpcmV0dXJuWzJdO3Q9dGhpcy5nZXRTb3J0ZWRCYWNrZW5kcygpLGU9MCxyLmxhYmVsPTE7Y2FzZSAxOnJldHVybiBlPHQubGVuZ3RoPyhuPXRbZV0sWzQsdGhpcy5pbml0aWFsaXplQmFja2VuZChuKS5zdWNjZXNzXSk6WzMsNV07Y2FzZSAyOnJldHVybiByLnNlbnQoKT9bNCx0aGlzLnNldEJhY2tlbmQobildOlszLDRdO2Nhc2UgMzpyZXR1cm4gci5zZW50KCksWzJdO2Nhc2UgNDpyZXR1cm4gZSsrLFszLDFdO2Nhc2UgNTp0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgaW5pdGlhbGl6ZSBhbnkgYmFja2VuZHMsIGFsbCBiYWNrZW5kIGluaXRpYWxpemF0aW9ucyBmYWlsZWQuXCIpfX0pfSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImJhY2tlbmRcIix7Z2V0OmZ1bmN0aW9uKCl7aWYobnVsbCE9dGhpcy5wZW5kaW5nQmFja2VuZEluaXQpdGhyb3cgbmV3IEVycm9yKFwiQmFja2VuZCAnXCIrdGhpcy5iYWNrZW5kTmFtZStcIicgaGFzIG5vdCB5ZXQgYmVlbiBpbml0aWFsaXplZC4gTWFrZSBzdXJlIHRvIGF3YWl0IHRmLnJlYWR5KCkgYmVmb3JlIGNhbGxpbmcgb3RoZXIgbWV0aG9kc1wiKTtpZihudWxsPT10aGlzLmJhY2tlbmRJbnN0YW5jZSl7dmFyIHQ9dGhpcy5pbml0aWFsaXplQmFja2VuZHNBbmRSZXR1cm5CZXN0KCksZT10Lm5hbWU7aWYodC5hc3luY0luaXQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGhpZ2hlc3QgcHJpb3JpdHkgYmFja2VuZCAnXCIrZStcIicgaGFzIG5vdCB5ZXQgYmVlbiBpbml0aWFsaXplZC4gTWFrZSBzdXJlIHRvIGF3YWl0IHRmLnJlYWR5KCkgYmVmb3JlIGNhbGxpbmcgb3RoZXIgbWV0aG9kc1wiKTt0aGlzLnNldEJhY2tlbmQoZSl9cmV0dXJuIHRoaXMuYmFja2VuZEluc3RhbmNlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmJhY2tlbmROYW1lcz1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLnJlZ2lzdHJ5RmFjdG9yeSl9LHQucHJvdG90eXBlLmZpbmRCYWNrZW5kPWZ1bmN0aW9uKHQpe2lmKCEodCBpbiB0aGlzLnJlZ2lzdHJ5KSl7aWYoISh0IGluIHRoaXMucmVnaXN0cnlGYWN0b3J5KSlyZXR1cm4gbnVsbDtpZih0aGlzLmluaXRpYWxpemVCYWNrZW5kKHQpLmFzeW5jSW5pdClyZXR1cm4gbnVsbH1yZXR1cm4gdGhpcy5yZWdpc3RyeVt0XX0sdC5wcm90b3R5cGUuZmluZEJhY2tlbmRGYWN0b3J5PWZ1bmN0aW9uKHQpe3JldHVybiB0IGluIHRoaXMucmVnaXN0cnlGYWN0b3J5P3RoaXMucmVnaXN0cnlGYWN0b3J5W3RdLmZhY3Rvcnk6bnVsbH0sdC5wcm90b3R5cGUucmVnaXN0ZXJCYWNrZW5kPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49MSksdCBpbiB0aGlzLnJlZ2lzdHJ5RmFjdG9yeT8oY29uc29sZS53YXJuKHQrXCIgYmFja2VuZCB3YXMgYWxyZWFkeSByZWdpc3RlcmVkLiBSZXVzaW5nIGV4aXN0aW5nIGJhY2tlbmQgZmFjdG9yeS5cIiksITEpOih0aGlzLnJlZ2lzdHJ5RmFjdG9yeVt0XT17ZmFjdG9yeTplLHByaW9yaXR5Om59LCEwKX0sdC5wcm90b3R5cGUuc2V0QmFja2VuZD1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuLG87cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKG51bGw9PXRoaXMucmVnaXN0cnlGYWN0b3J5W3RdKXRocm93IG5ldyBFcnJvcihcIkJhY2tlbmQgbmFtZSAnXCIrdCtcIicgbm90IGZvdW5kIGluIHJlZ2lzdHJ5XCIpO3JldHVybiB0aGlzLmJhY2tlbmROYW1lPXQsbnVsbCE9dGhpcy5yZWdpc3RyeVt0XT9bMyw0XToodGhpcy5iYWNrZW5kSW5zdGFuY2U9bnVsbCxlPXRoaXMuaW5pdGlhbGl6ZUJhY2tlbmQodCksbj1lLnN1Y2Nlc3MsZS5hc3luY0luaXQ/WzQsbl06WzMsMl0pO2Nhc2UgMTpyZXR1cm4gbz1yLnNlbnQoKSxbMywzXTtjYXNlIDI6bz1uLHIubGFiZWw9MztjYXNlIDM6aWYoIW8pcmV0dXJuWzIsITFdO3IubGFiZWw9NDtjYXNlIDQ6cmV0dXJuIHRoaXMuYmFja2VuZEluc3RhbmNlPXRoaXMucmVnaXN0cnlbdF0sdGhpcy5wcm9maWxlcj1uZXcgUSh0aGlzLmJhY2tlbmRJbnN0YW5jZSksWzIsITBdfX0pfSl9LHQucHJvdG90eXBlLmluaXRpYWxpemVCYWNrZW5kPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10aGlzLnJlZ2lzdHJ5RmFjdG9yeVt0XTtpZihudWxsPT1uKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBpbml0aWFsaXplIGJhY2tlbmQgXCIrdCtcIiwgbm8gcmVnaXN0cmF0aW9uIGZvdW5kLlwiKTt0cnl7dmFyIHI9bi5mYWN0b3J5KCk7aWYoUHJvbWlzZS5yZXNvbHZlKHIpPT09cil7dmFyIG89Kyt0aGlzLnBlbmRpbmdCYWNrZW5kSW5pdElkLGE9ci50aGVuKGZ1bmN0aW9uKG4pe3JldHVybiEobzxlLnBlbmRpbmdCYWNrZW5kSW5pdElkKSYmKGUucmVnaXN0cnlbdF09bixlLnBlbmRpbmdCYWNrZW5kSW5pdD1udWxsLCEwKX0pLmNhdGNoKGZ1bmN0aW9uKG4pe3JldHVybiEobzxlLnBlbmRpbmdCYWNrZW5kSW5pdElkKSYmKGUucGVuZGluZ0JhY2tlbmRJbml0PW51bGwsY29uc29sZS53YXJuKFwiSW5pdGlhbGl6YXRpb24gb2YgYmFja2VuZCBcIit0K1wiIGZhaWxlZFwiKSxjb25zb2xlLndhcm4obi5zdGFja3x8bi5tZXNzYWdlKSwhMSl9KTtyZXR1cm4gdGhpcy5wZW5kaW5nQmFja2VuZEluaXQ9YSx7c3VjY2VzczphLGFzeW5jSW5pdDohMH19cmV0dXJuIHRoaXMucmVnaXN0cnlbdF09cix7c3VjY2VzczohMCxhc3luY0luaXQ6ITF9fWNhdGNoKGUpe3JldHVybiBjb25zb2xlLndhcm4oXCJJbml0aWFsaXphdGlvbiBvZiBiYWNrZW5kIFwiK3QrXCIgZmFpbGVkXCIpLGNvbnNvbGUud2FybihlLnN0YWNrfHxlLm1lc3NhZ2UpLHtzdWNjZXNzOiExLGFzeW5jSW5pdDohMX19fSx0LnByb3RvdHlwZS5yZW1vdmVCYWNrZW5kPWZ1bmN0aW9uKHQpe2lmKCEodCBpbiB0aGlzLnJlZ2lzdHJ5RmFjdG9yeSkpdGhyb3cgbmV3IEVycm9yKHQrXCIgYmFja2VuZCBub3QgZm91bmQgaW4gcmVnaXN0cnlcIik7dGhpcy5iYWNrZW5kTmFtZT09PXQmJm51bGwhPXRoaXMucGVuZGluZ0JhY2tlbmRJbml0JiZ0aGlzLnBlbmRpbmdCYWNrZW5kSW5pdElkKyssdCBpbiB0aGlzLnJlZ2lzdHJ5JiYodGhpcy5yZWdpc3RyeVt0XS5kaXNwb3NlKCksZGVsZXRlIHRoaXMucmVnaXN0cnlbdF0pLGRlbGV0ZSB0aGlzLnJlZ2lzdHJ5RmFjdG9yeVt0XSx0aGlzLmJhY2tlbmROYW1lPT09dCYmKHRoaXMucGVuZGluZ0JhY2tlbmRJbml0PW51bGwsdGhpcy5iYWNrZW5kTmFtZT1udWxsLHRoaXMuYmFja2VuZEluc3RhbmNlPW51bGwpfSx0LnByb3RvdHlwZS5nZXRTb3J0ZWRCYWNrZW5kcz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoMD09PU9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnlGYWN0b3J5KS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiTm8gYmFja2VuZCBmb3VuZCBpbiByZWdpc3RyeS5cIik7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnlGYWN0b3J5KS5zb3J0KGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQucmVnaXN0cnlGYWN0b3J5W25dLnByaW9yaXR5LXQucmVnaXN0cnlGYWN0b3J5W2VdLnByaW9yaXR5fSl9LHQucHJvdG90eXBlLmluaXRpYWxpemVCYWNrZW5kc0FuZFJldHVybkJlc3Q9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5nZXRTb3J0ZWRCYWNrZW5kcygpLGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIG49dFtlXSxyPXRoaXMuaW5pdGlhbGl6ZUJhY2tlbmQobiksbz1yLnN1Y2Nlc3MsYT1yLmFzeW5jSW5pdDtpZihhfHxvKXJldHVybntuYW1lOm4sYXN5bmNJbml0OmF9fXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBpbml0aWFsaXplIGFueSBiYWNrZW5kcywgYWxsIGJhY2tlbmQgaW5pdGlhbGl6YXRpb25zIGZhaWxlZC5cIil9LHQucHJvdG90eXBlLm1vdmVEYXRhPWZ1bmN0aW9uKHQsZSl7dGhpcy53cml0ZSh0LGUsdGhpcy5yZWFkU3luYyhlKSl9LHQucHJvdG90eXBlLnRpZHk9ZnVuY3Rpb24odCxlKXt2YXIgbixyPXRoaXMsbz1udWxsO2lmKG51bGw9PWUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYSBmdW5jdGlvbiB0byB0aWR5KClcIik7ZT10fWVsc2V7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQmJiEodCBpbnN0YW5jZW9mIFN0cmluZykpdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBjYWxsaW5nIHdpdGggdHdvIGFyZ3VtZW50cywgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRpZHkoKSBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBjYWxsaW5nIHdpdGggdHdvIGFyZ3VtZW50cywgdGhlIDJuZCBhcmd1bWVudCB0byB0aWR5KCkgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO289dH1yZXR1cm4gdGhpcy5zY29wZWRSdW4oZnVuY3Rpb24oKXtyZXR1cm4gci5zdGFydFNjb3BlKG8pfSxmdW5jdGlvbigpe3JldHVybiByLmVuZFNjb3BlKG4pfSxmdW5jdGlvbigpe3JldHVybihuPWUoKSlpbnN0YW5jZW9mIFByb21pc2UmJmNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgcmV0dXJuIGEgUHJvbWlzZSBpbnNpZGUgb2YgdGlkeS5cIiksbn0pfSx0LnByb3RvdHlwZS5zY29wZWRSdW49ZnVuY3Rpb24odCxlLG4pe3QoKTt0cnl7dmFyIHI9bigpO3JldHVybiBlKCkscn1jYXRjaCh0KXt0aHJvdyBlKCksdH19LHQucHJvdG90eXBlLm5leHRUZW5zb3JJZD1mdW5jdGlvbigpe3JldHVybiB0Lm5leHRUZW5zb3JJZCsrfSx0LnByb3RvdHlwZS5uZXh0VmFyaWFibGVJZD1mdW5jdGlvbigpe3JldHVybiB0Lm5leHRWYXJpYWJsZUlkKyt9LHQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKHQpe3ZhciBlPWN0Lm1ha2UodC5zaGFwZSx7ZGF0YUlkOnQuZGF0YUlkfSx0LmR0eXBlKTtyZXR1cm4gdGhpcy5hZGRUYXBlTm9kZShbdF0sZSxmdW5jdGlvbih0KXtyZXR1cm5bdC50b0Zsb2F0KCldfSksZX0sdC5wcm90b3R5cGUucnVuS2VybmVsPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcixvPXRoaXMsYT1bXSxpPXRoaXMuaXNUYXBlT24oKSxzPW51bGwhPXRoaXMuc3RhdGUuYWN0aXZlU2NvcGU/dGhpcy5zdGF0ZS5hY3RpdmVTY29wZS5uYW1lOlwiXCIsdT1mdW5jdGlvbih0KXtpJiYoYT10Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gby5rZWVwKG8uY2xvbmUodCkpfSkpfSxsPXRoaXMuc3RhdGUubnVtQnl0ZXMsYz10aGlzLnN0YXRlLm51bVRlbnNvcnM7aWYodGhpcy5zY29wZWRSdW4oZnVuY3Rpb24oKXtyZXR1cm4gby5zdGF0ZS5rZXJuZWxEZXB0aCsrfSxmdW5jdGlvbigpe3JldHVybiBvLnN0YXRlLmtlcm5lbERlcHRoLS19LGZ1bmN0aW9uKCl7cj1vLkVOVi5nZXRCb29sKFwiREVCVUdcIik/by5wcm9maWxlci5wcm9maWxlS2VybmVsKHMsZSxmdW5jdGlvbigpe3JldHVybiB0KG8uYmFja2VuZCx1KX0pOnQoby5iYWNrZW5kLHUpfSksaSl7dmFyIGg9e2lkOnRoaXMuc3RhdGUubmV4dFRhcGVOb2RlSWQrKyxuYW1lOnMsaW5wdXRzOmUsb3V0cHV0czpBcnJheS5pc0FycmF5KHIpP3I6W3JdLHNhdmVkOmF9O251bGwhPW4mJihoLmdyYWRpZW50PWZ1bmN0aW9uKHQpe3JldHVybiBuKHQsYSl9KSx0aGlzLnN0YXRlLmFjdGl2ZVRhcGUucHVzaChoKX1yZXR1cm4gdGhpcy5zdGF0ZS5wcm9maWxpbmcmJnRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZS5rZXJuZWxzLnB1c2goe25hbWU6cyxieXRlc0FkZGVkOnRoaXMuc3RhdGUubnVtQnl0ZXMtbCx0b3RhbEJ5dGVzU25hcHNob3Q6dGhpcy5zdGF0ZS5udW1CeXRlcyx0ZW5zb3JzQWRkZWQ6dGhpcy5zdGF0ZS5udW1UZW5zb3JzLWMsdG90YWxUZW5zb3JzU25hcHNob3Q6dGhpcy5zdGF0ZS5udW1UZW5zb3JzLGlucHV0U2hhcGVzOk9iamVjdC5rZXlzKGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZVt0XS5zaGFwZX0pLG91dHB1dFNoYXBlOkFycmF5LmlzQXJyYXkocik/ci5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KTpyLnNoYXBlfSkscn0sdC5wcm90b3R5cGUucmVnaXN0ZXJUZW5zb3I9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnN0YXRlLnRlbnNvckluZm8uaGFzKHQuZGF0YUlkKT90aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KHQuZGF0YUlkKS5yZWZDb3VudDowO2lmKHRoaXMuc3RhdGUubnVtVGVuc29ycysrLFwic3RyaW5nXCI9PT10LmR0eXBlJiZ0aGlzLnN0YXRlLm51bVN0cmluZ1RlbnNvcnMrKywwPT09bil7dGhpcy5zdGF0ZS5udW1EYXRhQnVmZmVycysrO3ZhciByPTA7XCJjb21wbGV4NjRcIiE9PXQuZHR5cGUmJlwic3RyaW5nXCIhPT10LmR0eXBlJiYocj10LnNpemUqTyh0LmR0eXBlKSksdGhpcy5zdGF0ZS50ZW5zb3JJbmZvLnNldCh0LmRhdGFJZCx7YmFja2VuZDpudWxsIT1lP2U6dGhpcy5iYWNrZW5kLGR0eXBlOnQuZHR5cGUsc2hhcGU6dC5zaGFwZSxieXRlczpyLHJlZkNvdW50OjB9KSx0aGlzLnN0YXRlLm51bUJ5dGVzKz1yLG51bGwhPWU/ZS5yZWdpc3Rlcih0LmRhdGFJZCx0LnNoYXBlLHQuZHR5cGUpOnRoaXMuYmFja2VuZC5yZWdpc3Rlcih0LmRhdGFJZCx0LnNoYXBlLHQuZHR5cGUpfXRoaXMuc3RhdGUudGVuc29ySW5mby5nZXQodC5kYXRhSWQpLnJlZkNvdW50KyssdCBpbnN0YW5jZW9mIGh0fHx0aGlzLnRyYWNrKHQpfSx0LnByb3RvdHlwZS5yZWdpc3RlclZhcmlhYmxlPWZ1bmN0aW9uKHQpe2lmKG51bGwhPXRoaXMuc3RhdGUucmVnaXN0ZXJlZFZhcmlhYmxlc1t0Lm5hbWVdKXRocm93IG5ldyBFcnJvcihcIlZhcmlhYmxlIHdpdGggbmFtZSBcIit0Lm5hbWUrXCIgd2FzIGFscmVhZHkgcmVnaXN0ZXJlZFwiKTt0aGlzLnN0YXRlLnJlZ2lzdGVyZWRWYXJpYWJsZXNbdC5uYW1lXT10fSx0LnByb3RvdHlwZS5kaXNwb3NlVGVuc29yPWZ1bmN0aW9uKHQpe2lmKHRoaXMuc3RhdGUudGVuc29ySW5mby5oYXModC5kYXRhSWQpKXt0aGlzLnN0YXRlLm51bVRlbnNvcnMtLSxcInN0cmluZ1wiPT09dC5kdHlwZSYmdGhpcy5zdGF0ZS5udW1TdHJpbmdUZW5zb3JzLS07dmFyIGU9dGhpcy5zdGF0ZS50ZW5zb3JJbmZvLmdldCh0LmRhdGFJZCk7ZS5yZWZDb3VudDw9MT8oXCJjb21wbGV4NjRcIiE9PXQuZHR5cGUmJih0aGlzLnN0YXRlLm51bUJ5dGVzLT1lLmJ5dGVzKSx0aGlzLnN0YXRlLm51bURhdGFCdWZmZXJzLS0sZS5iYWNrZW5kLmRpc3Bvc2VEYXRhKHQuZGF0YUlkKSx0aGlzLnN0YXRlLnRlbnNvckluZm8uZGVsZXRlKHQuZGF0YUlkKSk6dGhpcy5zdGF0ZS50ZW5zb3JJbmZvLmdldCh0LmRhdGFJZCkucmVmQ291bnQtLX19LHQucHJvdG90eXBlLmRpc3Bvc2VWYXJpYWJsZXM9ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5zdGF0ZS5yZWdpc3RlcmVkVmFyaWFibGVzKXt2YXIgZT10aGlzLnN0YXRlLnJlZ2lzdGVyZWRWYXJpYWJsZXNbdF07dGhpcy5kaXNwb3NlVmFyaWFibGUoZSl9fSx0LnByb3RvdHlwZS5kaXNwb3NlVmFyaWFibGU9ZnVuY3Rpb24odCl7dGhpcy5kaXNwb3NlVGVuc29yKHQpLG51bGwhPXRoaXMuc3RhdGUucmVnaXN0ZXJlZFZhcmlhYmxlc1t0Lm5hbWVdJiZkZWxldGUgdGhpcy5zdGF0ZS5yZWdpc3RlcmVkVmFyaWFibGVzW3QubmFtZV19LHQucHJvdG90eXBlLm1lbW9yeT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuYmFja2VuZC5tZW1vcnkoKTtyZXR1cm4gdC5udW1UZW5zb3JzPXRoaXMuc3RhdGUubnVtVGVuc29ycyx0Lm51bURhdGFCdWZmZXJzPXRoaXMuc3RhdGUubnVtRGF0YUJ1ZmZlcnMsdC5udW1CeXRlcz10aGlzLnN0YXRlLm51bUJ5dGVzLHRoaXMuc3RhdGUubnVtU3RyaW5nVGVuc29ycz4wJiYodC51bnJlbGlhYmxlPSEwLG51bGw9PXQucmVhc29ucyYmKHQucmVhc29ucz1bXSksdC5yZWFzb25zLnB1c2goXCJNZW1vcnkgdXNhZ2UgYnkgc3RyaW5nIHRlbnNvcnMgaXMgYXBwcm94aW1hdGUgKDIgYnl0ZXMgcGVyIGNoYXJhY3RlcilcIikpLHR9LHQucHJvdG90eXBlLnByb2ZpbGU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbjtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3JldHVybiB0aGlzLnN0YXRlLnByb2ZpbGluZz0hMCxlPXRoaXMuc3RhdGUubnVtQnl0ZXMsbj10aGlzLnN0YXRlLm51bVRlbnNvcnMsdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLmtlcm5lbHM9W10sdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLnJlc3VsdD10KCksdGhpcy5zdGF0ZS5wcm9maWxpbmc9ITEsdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLnBlYWtCeXRlcz1NYXRoLm1heC5hcHBseShNYXRoLHRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZS5rZXJuZWxzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC50b3RhbEJ5dGVzU25hcHNob3R9KSksdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLm5ld0J5dGVzPXRoaXMuc3RhdGUubnVtQnl0ZXMtZSx0aGlzLnN0YXRlLmFjdGl2ZVByb2ZpbGUubmV3VGVuc29ycz10aGlzLnN0YXRlLm51bVRlbnNvcnMtbixbMix0aGlzLnN0YXRlLmFjdGl2ZVByb2ZpbGVdfSl9KX0sdC5wcm90b3R5cGUuaXNUYXBlT249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGF0ZS5ncmFkaWVudERlcHRoPjAmJjA9PT10aGlzLnN0YXRlLmtlcm5lbERlcHRofSx0LnByb3RvdHlwZS5hZGRUYXBlTm9kZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9e307dC5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7cltlXT10fSk7dmFyIG89e2lkOnRoaXMuc3RhdGUubmV4dFRhcGVOb2RlSWQrKyxuYW1lOnRoaXMuc3RhdGUuYWN0aXZlU2NvcGUubmFtZSxpbnB1dHM6cixvdXRwdXRzOltlXSxncmFkaWVudDpmdW5jdGlvbih0KXt2YXIgZT1uKHQpLHI9e307cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbih0LGUpe3JbZV09ZnVuY3Rpb24oKXtyZXR1cm4gdH19KSxyfX07dGhpcy5zdGF0ZS5hY3RpdmVUYXBlLnB1c2gobyl9LHQucHJvdG90eXBlLmtlZXA9ZnVuY3Rpb24odCl7cmV0dXJuIHQua2VwdD0hMCx0fSx0LnByb3RvdHlwZS5zdGFydFRhcGU9ZnVuY3Rpb24oKXswPT09dGhpcy5zdGF0ZS5ncmFkaWVudERlcHRoJiYodGhpcy5zdGF0ZS5hY3RpdmVUYXBlPVtdKSx0aGlzLnN0YXRlLmdyYWRpZW50RGVwdGgrK30sdC5wcm90b3R5cGUuZW5kVGFwZT1mdW5jdGlvbigpe3RoaXMuc3RhdGUuZ3JhZGllbnREZXB0aC0tfSx0LnByb3RvdHlwZS5zdGFydFNjb3BlPWZ1bmN0aW9uKHQpe3ZhciBlPXt0cmFjazpbXSxuYW1lOlwidW5uYW1lZCBzY29wZVwiLGlkOnRoaXMuc3RhdGUubmV4dFNjb3BlSWQrK307dCYmKGUubmFtZT10KSx0aGlzLnN0YXRlLnNjb3BlU3RhY2sucHVzaChlKSx0aGlzLnN0YXRlLmFjdGl2ZVNjb3BlPWV9LHQucHJvdG90eXBlLmVuZFNjb3BlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLG49RXQodCkscj1uZXcgU2V0KG4ubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkfSkpLG89MDtvPHRoaXMuc3RhdGUuYWN0aXZlU2NvcGUudHJhY2subGVuZ3RoO28rKyl7dmFyIGE9dGhpcy5zdGF0ZS5hY3RpdmVTY29wZS50cmFja1tvXTthLmtlcHR8fHIuaGFzKGEuaWQpfHxhLmRpc3Bvc2UoKX12YXIgaT10aGlzLnN0YXRlLnNjb3BlU3RhY2sucG9wKCk7dGhpcy5zdGF0ZS5hY3RpdmVTY29wZT0wPT09dGhpcy5zdGF0ZS5zY29wZVN0YWNrLmxlbmd0aD9udWxsOnRoaXMuc3RhdGUuc2NvcGVTdGFja1t0aGlzLnN0YXRlLnNjb3BlU3RhY2subGVuZ3RoLTFdLG4uZm9yRWFjaChmdW5jdGlvbih0KXt0LmtlcHR8fHQuc2NvcGVJZCE9PWkuaWR8fGUudHJhY2sodCl9KX0sdC5wcm90b3R5cGUuZ3JhZGllbnRzPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPXRoaXM7aWYodm9pZCAwPT09ciYmKHI9ITEpLGYoZS5sZW5ndGg+MCxmdW5jdGlvbigpe3JldHVyblwiZ3JhZGllbnRzKCkgcmVjZWl2ZWQgYW4gZW1wdHkgbGlzdCBvZiB4cy5cIn0pLG51bGwhPW4mJlwiZmxvYXQzMlwiIT09bi5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJkeSBtdXN0IGhhdmUgJ2Zsb2F0MzInIGR0eXBlLCBidXQgaGFzICdcIituLmR0eXBlK1wiJ1wiKTt2YXIgYT10aGlzLnNjb3BlZFJ1bihmdW5jdGlvbigpe3JldHVybiBvLnN0YXJ0VGFwZSgpfSxmdW5jdGlvbigpe3JldHVybiBvLmVuZFRhcGUoKX0sZnVuY3Rpb24oKXtyZXR1cm4gby50aWR5KFwiZm9yd2FyZFwiLHQpfSk7ZihhIGluc3RhbmNlb2YgY3QsZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSByZXN1bHQgeSByZXR1cm5lZCBieSBmKCkgbXVzdCBiZSBhIHRlbnNvci5cIn0pO3ZhciBpPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9e30sbz17fSxhPTA7YTxlLmxlbmd0aDthKyspcltlW2FdLmlkXT0hMDtmb3IoYT0wO2E8dC5sZW5ndGg7YSsrKXt2YXIgaT0oZD10W2FdKS5pbnB1dHM7Zm9yKHZhciBzIGluIGkpe2Zvcih2YXIgdT1pW3NdLGw9ITEsYz0wO2M8ZS5sZW5ndGg7YysrKWlmKHJbdS5pZF0pe2Qub3V0cHV0cy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiByW3QuaWRdPSEwfSksbD0hMCxvW2QuaWRdPSEwO2JyZWFrfWlmKGwpYnJlYWt9fXZhciBoPXt9O2hbbi5pZF09ITA7dmFyIHA9e307Zm9yKGE9dC5sZW5ndGgtMTthPj0wO2EtLSlmb3IoaT0oZD10W2FdKS5pbnB1dHMsYz0wO2M8ZC5vdXRwdXRzLmxlbmd0aDtjKyspaWYoaFtkLm91dHB1dHNbY10uaWRdKXtmb3IodmFyIHMgaW4gaSloW2lbc10uaWRdPSEwLHBbZC5pZF09ITA7YnJlYWt9dmFyIGY9W107Zm9yKGE9MDthPHQubGVuZ3RoO2ErKyl7dmFyIGQ7aWYob1soZD10W2FdKS5pZF0mJnBbZC5pZF0pe3ZhciB2PXt9O2Zvcih2YXIgcyBpbiBkLmlucHV0cyl7dmFyIG09ZC5pbnB1dHNbc107clttLmlkXSYmKHZbc109bSl9dmFyIGc9T2JqZWN0LmFzc2lnbih7fSxkKTtnLmlucHV0cz12LGcub3V0cHV0cz1kLm91dHB1dHMsZi5wdXNoKGcpfX1yZXR1cm4gZn0odGhpcy5zdGF0ZS5hY3RpdmVUYXBlLGUsYSk7aWYoIXImJjA9PT1pLmxlbmd0aCYmZS5sZW5ndGg+MCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBncmFkaWVudCBvZiB5PWYoeCkgd2l0aCByZXNwZWN0IHRvIHguIE1ha2Ugc3VyZSB0aGF0IHRoZSBmIHlvdSBwYXNzZWQgZW5jbG9zZXMgYWxsIG9wZXJhdGlvbnMgdGhhdCBsZWFkIGZyb20geCB0byB5LlwiKTtyZXR1cm4gdGhpcy50aWR5KFwiYmFja3dhcmRcIixmdW5jdGlvbigpe3ZhciB0LHIscz17fTtzW2EuaWRdPW51bGw9PW4/KHQ9YS5zaGFwZSxyPUgoZyh0KSxcImZsb2F0MzJcIiksY3QubWFrZSh0LHt2YWx1ZXM6cn0pKTpuLGZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9ZnVuY3Rpb24ocil7dmFyIG89ZVtyXSxhPVtdO2lmKG8ub3V0cHV0cy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBuPXRbZS5pZF07aWYobnVsbCE9bilhLnB1c2gobik7ZWxzZXt2YXIgcj1jdC5tYWtlKGUuc2hhcGUse3ZhbHVlczpxKGUuc2l6ZSxlLmR0eXBlKX0sZS5kdHlwZSk7YS5wdXNoKHIpfX0pLG51bGw9PW8uZ3JhZGllbnQpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbXB1dGUgZ3JhZGllbnQ6IGdyYWRpZW50IGZ1bmN0aW9uIG5vdCBmb3VuZCBmb3IgXCIrby5uYW1lK1wiLlwiKTt2YXIgaT1vLmdyYWRpZW50KDE9PT1vLm91dHB1dHMubGVuZ3RoP2FbMF06YSkscz1mdW5jdGlvbihlKXtpZighKGUgaW4gaSkpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGJhY2twcm9wIHRocm91Z2ggaW5wdXQgXCIrZStcIi4gQXZhaWxhYmxlIGdyYWRpZW50cyBmb3VuZDogXCIrT2JqZWN0LmtleXMoaSkrXCIuXCIpO3ZhciByPW4oZnVuY3Rpb24oKXtyZXR1cm4gaVtlXSgpfSk7aWYoXCJmbG9hdDMyXCIhPT1yLmR0eXBlKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIGdyYWRpZW50IGZvciBvcCBcIitvLm5hbWUrXCIuIFRoZSBncmFkaWVudCBvZiBpbnB1dCBcIitlK1wiIG11c3QgaGF2ZSAnZmxvYXQzMicgZHR5cGUsIGJ1dCBoYXMgJ1wiK3IuZHR5cGUrXCInXCIpO3ZhciBhPW8uaW5wdXRzW2VdO2lmKCF5KHIuc2hhcGUsYS5zaGFwZSkpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgaW4gZ3JhZGllbnQgZm9yIG9wIFwiK28ubmFtZStcIi4gVGhlIGdyYWRpZW50IG9mIGlucHV0ICdcIitlK1wiJyBoYXMgc2hhcGUgJ1wiK3Iuc2hhcGUrXCInLCB3aGljaCBkb2VzIG5vdCBtYXRjaCB0aGUgc2hhcGUgb2YgdGhlIGlucHV0ICdcIithLnNoYXBlK1wiJ1wiKTtpZihudWxsPT10W2EuaWRdKXRbYS5pZF09cjtlbHNle3ZhciBzPXRbYS5pZF07dFthLmlkXT1zLmFkZChyKSxzLmRpc3Bvc2UoKX19O2Zvcih2YXIgdSBpbiBvLmlucHV0cylzKHUpfSxvPWUubGVuZ3RoLTE7bz49MDtvLS0pcihvKX0ocyxpLGZ1bmN0aW9uKHQpe3JldHVybiBvLnRpZHkodCl9KTt2YXIgdT1lLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gc1t0LmlkXX0pO3JldHVybiAwPT09by5zdGF0ZS5ncmFkaWVudERlcHRoJiYoby5zdGF0ZS5hY3RpdmVUYXBlLmZvckVhY2goZnVuY3Rpb24odCl7Zm9yKHZhciBlIGluIHQuc2F2ZWQpdC5zYXZlZFtlXS5kaXNwb3NlKCl9KSxvLnN0YXRlLmFjdGl2ZVRhcGU9bnVsbCkse3ZhbHVlOmEsZ3JhZHM6dX19KX0sdC5wcm90b3R5cGUuY3VzdG9tR3JhZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBmKFcodCksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmIHBhc3NlZCBpbiBjdXN0b21HcmFkKGYpIG11c3QgYmUgYSBmdW5jdGlvbi5cIn0pLGZ1bmN0aW9uKCl7Zm9yKHZhciBuLHI9W10sbz0wO288YXJndW1lbnRzLmxlbmd0aDtvKyspcltvXT1hcmd1bWVudHNbb107ZihyLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgY3R9KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGFyZ3MgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikoeDEsIHgyLC4uLikgbXVzdCBhbGwgYmUgdGVuc29yc1wifSk7dmFyIGE9e307cmV0dXJuIHIuZm9yRWFjaChmdW5jdGlvbih0LGUpe2FbZV09dH0pLGUucnVuS2VybmVsKGZ1bmN0aW9uKGUsbyl7cmV0dXJuIGYoKG49dC5hcHBseSh2b2lkIDAsci5jb25jYXQoW29dKSkpLnZhbHVlIGluc3RhbmNlb2YgY3QsZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmdW5jdGlvbiBmIHBhc3NlZCBpbiBjdXN0b21HcmFkKGYpIG11c3QgcmV0dXJuIGFuIG9iamVjdCB3aGVyZSBgb2JqLnZhbHVlYCBpcyBhIHRlbnNvclwifSksZihXKG4uZ3JhZEZ1bmMpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZnVuY3Rpb24gZiBwYXNzZWQgaW4gY3VzdG9tR3JhZChmKSBtdXN0IHJldHVybiBhbiBvYmplY3Qgd2hlcmUgYG9iai5ncmFkRnVuY2AgaXMgYSBmdW5jdGlvbi5cIn0pLG4udmFsdWV9LGEsZnVuY3Rpb24odCxlKXt2YXIgbz1uLmdyYWRGdW5jKHQsZSksYT1BcnJheS5pc0FycmF5KG8pP286W29dO2YoYS5sZW5ndGg9PT1yLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiVGhlIGZ1bmN0aW9uIGYgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGBvYmouZ3JhZEZ1bmNgIGlzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBzYW1lIG51bWJlciBvZiB0ZW5zb3JzIGFzIGlucHV0cyBwYXNzZWQgdG8gZiguLi4pLlwifSksZihhLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgY3R9KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGZ1bmN0aW9uIGYgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGBvYmouZ3JhZEZ1bmNgIGlzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgbGlzdCBvZiBvbmx5IHRlbnNvcnMuXCJ9KTt2YXIgaT17fTtyZXR1cm4gYS5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7aVtlXT1mdW5jdGlvbigpe3JldHVybiB0fX0pLGl9KX19LHQucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KGUpLG89ci5iYWNrZW5kO2lmKHQ9dHx8dGhpcy5iYWNrZW5kLFwic3RyaW5nXCI9PT1yLmR0eXBlKXt2YXIgYT1GKG4pO3RoaXMuc3RhdGUubnVtQnl0ZXMrPWEtci5ieXRlcyxyLmJ5dGVzPWF9dCE9PW8mJihvLmRpc3Bvc2VEYXRhKGUpLHIuYmFja2VuZD10LHQucmVnaXN0ZXIoZSxyLnNoYXBlLHIuZHR5cGUpKSx0LndyaXRlKGUsbil9LHQucHJvdG90eXBlLnJlYWRTeW5jPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KHQpLmJhY2tlbmQucmVhZFN5bmModCl9LHQucHJvdG90eXBlLnJlYWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3RhdGUudGVuc29ySW5mby5nZXQodCkuYmFja2VuZC5yZWFkKHQpfSx0LnByb3RvdHlwZS5mcm9tUGl4ZWxzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYmFja2VuZC5mcm9tUGl4ZWxzKHQsZSl9LHQucHJvdG90eXBlLnRpbWU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbjtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9JCgpLFs0LHRoaXMuYmFja2VuZC50aW1lKHQpXTtjYXNlIDE6cmV0dXJuKG49ci5zZW50KCkpLndhbGxNcz0kKCktZSxbMixuXX19KX0pfSx0LnByb3RvdHlwZS50cmFjaz1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dGhpcy5zdGF0ZS5hY3RpdmVTY29wZSYmKHQuc2NvcGVJZD10aGlzLnN0YXRlLmFjdGl2ZVNjb3BlLmlkLHRoaXMuc3RhdGUuYWN0aXZlU2NvcGUudHJhY2sucHVzaCh0KSksdH0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwicmVnaXN0ZXJlZFZhcmlhYmxlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGF0ZS5yZWdpc3RlcmVkVmFyaWFibGVzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMucGVuZGluZ0JhY2tlbmRJbml0SWQrKyx0aGlzLnN0YXRlLmRpc3Bvc2UoKSx0aGlzLkVOVi5yZXNldCgpLHRoaXMuc3RhdGU9bmV3IGt0LHRoaXMucmVnaXN0cnkpdGhpcy5yZWdpc3RyeVt0XS5kaXNwb3NlKCksZGVsZXRlIHRoaXMucmVnaXN0cnlbdF07dGhpcy5iYWNrZW5kTmFtZT1udWxsLHRoaXMuYmFja2VuZEluc3RhbmNlPW51bGwsdGhpcy5wZW5kaW5nQmFja2VuZEluaXQ9bnVsbH0sdC5uZXh0VGVuc29ySWQ9MCx0Lm5leHRWYXJpYWJsZUlkPTAsdH0oKTt2YXIgU3Q9ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbigpe2lmKG51bGw9PVJ0KXt2YXIgdD12b2lkIDA7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyl0PXdpbmRvdztlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwpdD1nbG9iYWw7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2Vzcyl0PXByb2Nlc3M7ZWxzZXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2Ygc2VsZil0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBhIGdsb2JhbCBvYmplY3RcIik7dD1zZWxmfVJ0PXR9cmV0dXJuIFJ0fSgpO2lmKG51bGw9PXQuX3RmZW5naW5lKXt2YXIgZT1uZXcgbyh0KTt0Ll90ZmVuZ2luZT1uZXcgTnQoZSl9cmV0dXJuIHModC5fdGZlbmdpbmUuRU5WKSxzdD1mdW5jdGlvbigpe3JldHVybiB0Ll90ZmVuZ2luZX0sdC5fdGZlbmdpbmV9KCk7ZnVuY3Rpb24gQXQoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZudWxsIT13aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZX1pLnJlZ2lzdGVyRmxhZyhcIkRFQlVHXCIsZnVuY3Rpb24oKXtyZXR1cm4hMX0sZnVuY3Rpb24odCl7dCYmY29uc29sZS53YXJuKFwiRGVidWdnaW5nIG1vZGUgaXMgT04uIFRoZSBvdXRwdXQgb2YgZXZlcnkgbWF0aCBjYWxsIHdpbGwgYmUgZG93bmxvYWRlZCB0byBDUFUgYW5kIGNoZWNrZWQgZm9yIE5hTnMuIFRoaXMgc2lnbmlmaWNhbnRseSBpbXBhY3RzIHBlcmZvcm1hbmNlLlwiKX0pLGkucmVnaXN0ZXJGbGFnKFwiSVNfQlJPV1NFUlwiLGZ1bmN0aW9uKCl7cmV0dXJuIEF0KCl9KSxpLnJlZ2lzdGVyRmxhZyhcIklTX05PREVcIixmdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLnZlcnNpb25zJiZ2b2lkIDAhPT1wcm9jZXNzLnZlcnNpb25zLm5vZGV9KSxpLnJlZ2lzdGVyRmxhZyhcIklTX0NIUk9NRVwiLGZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmbnVsbCE9bmF2aWdhdG9yJiZudWxsIT1uYXZpZ2F0b3IudXNlckFnZW50JiYvQ2hyb21lLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYvR29vZ2xlIEluYy8udGVzdChuYXZpZ2F0b3IudmVuZG9yKX0pLGkucmVnaXN0ZXJGbGFnKFwiUFJPRFwiLGZ1bmN0aW9uKCl7cmV0dXJuITF9KSxpLnJlZ2lzdGVyRmxhZyhcIlRFTlNPUkxJS0VfQ0hFQ0tfU0hBUEVfQ09OU0lTVEVOQ1lcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJERUJVR1wiKX0pLGkucmVnaXN0ZXJGbGFnKFwiREVQUkVDQVRJT05fV0FSTklOR1NfRU5BQkxFRFwiLGZ1bmN0aW9uKCl7cmV0dXJuITB9KSxpLnJlZ2lzdGVyRmxhZyhcIklTX1RFU1RcIixmdW5jdGlvbigpe3JldHVybiExfSk7dmFyIFR0LER0LF90PXt9LE90PXthbHBoYTohMSxhbnRpYWxpYXM6ITEscHJlbXVsdGlwbGllZEFscGhhOiExLHByZXNlcnZlRHJhd2luZ0J1ZmZlcjohMSxkZXB0aDohMSxzdGVuY2lsOiExLGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ6ITB9O2Z1bmN0aW9uIEZ0KHQsZSl7X3RbdF09ZX1mdW5jdGlvbiBNdCh0KXt0IGluIF90fHwoX3RbdF09ZnVuY3Rpb24odCl7aWYoMSE9PXQmJjIhPT10KXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBnZXQgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHQsIFdlYkdMIGlzIGRpc2FibGVkLlwiKTt2YXIgZT1CdCh0KTtpZihlLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLGRlbGV0ZSBfdFt0XX0sITEpLDE9PT10KXJldHVybiBlLmdldENvbnRleHQoXCJ3ZWJnbFwiLE90KXx8ZS5nZXRDb250ZXh0KFwiZXhwZXJpbWVudGFsLXdlYmdsXCIsT3QpO3JldHVybiBlLmdldENvbnRleHQoXCJ3ZWJnbDJcIixPdCl9KHQpKTt2YXIgZT1fdFt0XTtyZXR1cm4gZS5pc0NvbnRleHRMb3N0KCk/KGRlbGV0ZSBfdFt0XSxNdCh0KSk6KGUuZGlzYWJsZShlLkRFUFRIX1RFU1QpLGUuZGlzYWJsZShlLlNURU5DSUxfVEVTVCksZS5kaXNhYmxlKGUuQkxFTkQpLGUuZGlzYWJsZShlLkRJVEhFUiksZS5kaXNhYmxlKGUuUE9MWUdPTl9PRkZTRVRfRklMTCksZS5kaXNhYmxlKGUuU0FNUExFX0NPVkVSQUdFKSxlLmVuYWJsZShlLlNDSVNTT1JfVEVTVCksZS5lbmFibGUoZS5DVUxMX0ZBQ0UpLGUuY3VsbEZhY2UoZS5CQUNLKSxfdFt0XSl9ZnVuY3Rpb24gQnQodCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIE9mZnNjcmVlbkNhbnZhcyYmMj09PXQpcmV0dXJuIG5ldyBPZmZzY3JlZW5DYW52YXMoMzAwLDE1MCk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50KXJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgYSBjYW52YXMgaW4gdGhpcyBjb250ZXh0XCIpfWZ1bmN0aW9uIFB0KHQsZSl7cmV0dXJuW2UsdF19ZnVuY3Rpb24gTHQodCl7dmFyIGU9Zyh0KTtyZXR1cm4gdyhNYXRoLmNlaWwoZS80KSl9ZnVuY3Rpb24gV3QodCxlKXtyZXR1cm5bTWF0aC5tYXgoMSxNYXRoLmNlaWwoZS8yKSksTWF0aC5tYXgoMSxNYXRoLmNlaWwodC8yKSldfWZ1bmN0aW9uIFV0KHQsZSl7dmFyIG4scixvLGEscyx1LGwsYyxoLHA9dDtyZXR1cm4gMj09PWkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT8obj1wLlIzMkYscj1wLlIxNkYsbz1wLlJHQkExNkYsYT1wLlJHQkEzMkYscz1wLlJFRCx1PTQsbD0xLGM9cC5IQUxGX0ZMT0FULGg9cC5GTE9BVCk6KG49dC5SR0JBLHI9dC5SR0JBLG89dC5SR0JBLGE9cC5SR0JBLHM9dC5SR0JBLHU9NCxsPTQsYz1udWxsIT1lP2UuSEFMRl9GTE9BVF9PRVM6bnVsbCxoPXQuRkxPQVQpLHtpbnRlcm5hbEZvcm1hdEZsb2F0Om4saW50ZXJuYWxGb3JtYXRIYWxmRmxvYXQ6cixpbnRlcm5hbEZvcm1hdFBhY2tlZEhhbGZGbG9hdDpvLGludGVybmFsRm9ybWF0UGFja2VkRmxvYXQ6YSx0ZXh0dXJlRm9ybWF0RmxvYXQ6cyxkb3dubG9hZFRleHR1cmVGb3JtYXQ6dC5SR0JBLGRvd25sb2FkVW5wYWNrTnVtQ2hhbm5lbHM6dSxkZWZhdWx0TnVtQ2hhbm5lbHM6bCx0ZXh0dXJlVHlwZUhhbGZGbG9hdDpjLHRleHR1cmVUeXBlRmxvYXQ6aH19ZnVuY3Rpb24gVnQodCxlLG4pe3ZhciByPW4oKTtyZXR1cm4gZSYmZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRFcnJvcigpO2lmKGUhPT10Lk5PX0VSUk9SKXRocm93IG5ldyBFcnJvcihcIldlYkdMIEVycm9yOiBcIitxdCh0LGUpKX0odCkscn0hZnVuY3Rpb24odCl7dFt0LlJFTkRFUj0wXT1cIlJFTkRFUlwiLHRbdC5VUExPQUQ9MV09XCJVUExPQURcIix0W3QuUElYRUxTPTJdPVwiUElYRUxTXCIsdFt0LkRPV05MT0FEPTNdPVwiRE9XTkxPQURcIn0oVHR8fChUdD17fSkpLGZ1bmN0aW9uKHQpe3RbdC5VTlBBQ0tFRF9GTE9BVDE2PTBdPVwiVU5QQUNLRURfRkxPQVQxNlwiLHRbdC5VTlBBQ0tFRF9GTE9BVDMyPTFdPVwiVU5QQUNLRURfRkxPQVQzMlwiLHRbdC5QQUNLRURfNFgxX1VOU0lHTkVEX0JZVEU9Ml09XCJQQUNLRURfNFgxX1VOU0lHTkVEX0JZVEVcIix0W3QuUEFDS0VEXzJYMl9GTE9BVDMyPTNdPVwiUEFDS0VEXzJYMl9GTE9BVDMyXCIsdFt0LlBBQ0tFRF8yWDJfRkxPQVQxNj00XT1cIlBBQ0tFRF8yWDJfRkxPQVQxNlwifShEdHx8KER0PXt9KSk7dmFyIHp0PTUuOTZlLTgsR3Q9NjU1MDQ7ZnVuY3Rpb24gSHQodCl7cmV0dXJuISEoaS5nZXRCb29sKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfRU5BQkxFRFwiKXx8MD09PXR8fHp0PE1hdGguYWJzKHQpJiZNYXRoLmFicyh0KTxHdCl9ZnVuY3Rpb24gcXQodCxlKXtzd2l0Y2goZSl7Y2FzZSB0Lk5PX0VSUk9SOnJldHVyblwiTk9fRVJST1JcIjtjYXNlIHQuSU5WQUxJRF9FTlVNOnJldHVyblwiSU5WQUxJRF9FTlVNXCI7Y2FzZSB0LklOVkFMSURfVkFMVUU6cmV0dXJuXCJJTlZBTElEX1ZBTFVFXCI7Y2FzZSB0LklOVkFMSURfT1BFUkFUSU9OOnJldHVyblwiSU5WQUxJRF9PUEVSQVRJT05cIjtjYXNlIHQuSU5WQUxJRF9GUkFNRUJVRkZFUl9PUEVSQVRJT046cmV0dXJuXCJJTlZBTElEX0ZSQU1FQlVGRkVSX09QRVJBVElPTlwiO2Nhc2UgdC5PVVRfT0ZfTUVNT1JZOnJldHVyblwiT1VUX09GX01FTU9SWVwiO2Nhc2UgdC5DT05URVhUX0xPU1RfV0VCR0w6cmV0dXJuXCJDT05URVhUX0xPU1RfV0VCR0xcIjtkZWZhdWx0OnJldHVyblwiVW5rbm93biBlcnJvciBjb2RlIFwiK2V9fWZ1bmN0aW9uICR0KHQsZSxuKXtyZXR1cm4gdmUodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuZ2V0RXh0ZW5zaW9uKG4pfSwnRXh0ZW5zaW9uIFwiJytuKydcIiBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3Nlci4nKX1mdW5jdGlvbiBLdCh0LGUsbil7dmFyIHI9dmUodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuY3JlYXRlU2hhZGVyKHQuVkVSVEVYX1NIQURFUil9LFwiVW5hYmxlIHRvIGNyZWF0ZSB2ZXJ0ZXggV2ViR0xTaGFkZXIuXCIpO2lmKFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LnNoYWRlclNvdXJjZShyLG4pfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuY29tcGlsZVNoYWRlcihyKX0pLCExPT09dC5nZXRTaGFkZXJQYXJhbWV0ZXIocix0LkNPTVBJTEVfU1RBVFVTKSl0aHJvdyBjb25zb2xlLmxvZyh0LmdldFNoYWRlckluZm9Mb2cocikpLG5ldyBFcnJvcihcIkZhaWxlZCB0byBjb21waWxlIHZlcnRleCBzaGFkZXIuXCIpO3JldHVybiByfWZ1bmN0aW9uIGp0KHQsZSxuKXt2YXIgcj12ZSh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVTaGFkZXIodC5GUkFHTUVOVF9TSEFERVIpfSxcIlVuYWJsZSB0byBjcmVhdGUgZnJhZ21lbnQgV2ViR0xTaGFkZXIuXCIpO2lmKFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LnNoYWRlclNvdXJjZShyLG4pfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuY29tcGlsZVNoYWRlcihyKX0pLCExPT09dC5nZXRTaGFkZXJQYXJhbWV0ZXIocix0LkNPTVBJTEVfU1RBVFVTKSl0aHJvdyBmdW5jdGlvbih0LGUpe3ZhciBuPVF0LmV4ZWMoZSk7aWYobnVsbD09bilyZXR1cm4gY29uc29sZS5sb2coXCJDb3VsZG4ndCBwYXJzZSBsaW5lIG51bWJlciBpbiBlcnJvcjogXCIrZSksdm9pZCBjb25zb2xlLmxvZyh0KTtmb3IodmFyIHI9K25bMV0sbz10LnNwbGl0KFwiXFxuXCIpLGE9by5sZW5ndGgudG9TdHJpbmcoKS5sZW5ndGgrMixpPW8ubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIEMoKGUrMSkudG9TdHJpbmcoKSxhKSt0fSkscz0wLHU9MDt1PGkubGVuZ3RoO3UrKylzPU1hdGgubWF4KGlbdV0ubGVuZ3RoLHMpO3ZhciBsPWkuc2xpY2UoMCxyLTEpLGM9aS5zbGljZShyLTEsciksaD1pLnNsaWNlKHIpO2NvbnNvbGUubG9nKGwuam9pbihcIlxcblwiKSksY29uc29sZS5sb2coZS5zcGxpdChcIlxcblwiKVswXSksY29uc29sZS5sb2coXCIlYyBcIitDKGNbMF0scyksXCJib3JkZXI6MXB4IHNvbGlkIHJlZDsgYmFja2dyb3VuZC1jb2xvcjojZTNkMmQyOyBjb2xvcjojYTYxNzE3XCIpLGNvbnNvbGUubG9nKGguam9pbihcIlxcblwiKSl9KG4sdC5nZXRTaGFkZXJJbmZvTG9nKHIpKSxuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY29tcGlsZSBmcmFnbWVudCBzaGFkZXIuXCIpO3JldHVybiByfXZhciBYdCxZdCxRdD0vRVJST1I6IFswLTldKzooWzAtOV0rKTovZztmdW5jdGlvbiBKdCh0LGUpe3JldHVybiB2ZSh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVQcm9ncmFtKCl9LFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTFByb2dyYW0uXCIpfWZ1bmN0aW9uIFp0KHQsZSxuKXtpZihWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5saW5rUHJvZ3JhbShuKX0pLCExPT09dC5nZXRQcm9ncmFtUGFyYW1ldGVyKG4sdC5MSU5LX1NUQVRVUykpdGhyb3cgY29uc29sZS5sb2codC5nZXRQcm9ncmFtSW5mb0xvZyhuKSksbmV3IEVycm9yKFwiRmFpbGVkIHRvIGxpbmsgdmVydGV4IGFuZCBmcmFnbWVudCBzaGFkZXJzLlwiKX1mdW5jdGlvbiB0ZSh0LGUsbil7aWYoVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudmFsaWRhdGVQcm9ncmFtKG4pfSksITE9PT10LmdldFByb2dyYW1QYXJhbWV0ZXIobix0LlZBTElEQVRFX1NUQVRVUykpdGhyb3cgY29uc29sZS5sb2codC5nZXRQcm9ncmFtSW5mb0xvZyhuKSksbmV3IEVycm9yKFwiU2hhZGVyIHByb2dyYW0gdmFsaWRhdGlvbiBmYWlsZWQuXCIpfWZ1bmN0aW9uIGVlKHQsZSxuKXt2YXIgcj12ZSh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVCdWZmZXIoKX0sXCJVbmFibGUgdG8gY3JlYXRlIFdlYkdMQnVmZmVyXCIpO3JldHVybiBWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuQVJSQVlfQlVGRkVSLHIpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYnVmZmVyRGF0YSh0LkFSUkFZX0JVRkZFUixuLHQuU1RBVElDX0RSQVcpfSkscn1mdW5jdGlvbiBuZSh0LGUsbil7dmFyIHI9dmUodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuY3JlYXRlQnVmZmVyKCl9LFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTEJ1ZmZlclwiKTtyZXR1cm4gVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZEJ1ZmZlcih0LkVMRU1FTlRfQVJSQVlfQlVGRkVSLHIpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYnVmZmVyRGF0YSh0LkVMRU1FTlRfQVJSQVlfQlVGRkVSLG4sdC5TVEFUSUNfRFJBVyl9KSxyfWZ1bmN0aW9uIHJlKHQsZSl7cmV0dXJuIHZlKHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmNyZWF0ZVRleHR1cmUoKX0sXCJVbmFibGUgdG8gY3JlYXRlIFdlYkdMVGV4dHVyZS5cIil9ZnVuY3Rpb24gb2UodCxlKXt2YXIgbj1pLmdldE51bWJlcihcIldFQkdMX01BWF9URVhUVVJFX1NJWkVcIik7aWYodDw9MHx8ZTw9MCl7dmFyIHI9XCJbXCIrdCtcInhcIitlK1wiXVwiO3Rocm93IG5ldyBFcnJvcihcIlJlcXVlc3RlZCB0ZXh0dXJlIHNpemUgXCIrcitcIiBpcyBpbnZhbGlkLlwiKX1pZih0Pm58fGU+bil7cj1cIltcIit0K1wieFwiK2UrXCJdXCI7dGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGVkIHRleHR1cmUgc2l6ZSBcIityK1wiIGdyZWF0ZXIgdGhhbiBXZWJHTCBtYXhpbXVtIG9uIHRoaXMgYnJvd3NlciAvIEdQVSBcIisoXCJbXCIrbitcInhcIituK1wiXVwiKStcIi5cIil9fWZ1bmN0aW9uIGFlKHQsZSl7cmV0dXJuIHZlKHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmNyZWF0ZUZyYW1lYnVmZmVyKCl9LFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTEZyYW1lYnVmZmVyLlwiKX1mdW5jdGlvbiBpZSh0LGUsbixyLG8sYSxpLHMpe3ZhciB1PXQuZ2V0QXR0cmliTG9jYXRpb24obixyKTtyZXR1cm4tMSE9PXUmJihWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuQVJSQVlfQlVGRkVSLG8pfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudmVydGV4QXR0cmliUG9pbnRlcih1LGEsdC5GTE9BVCwhMSxpLHMpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodSl9KSwhMCl9ZnVuY3Rpb24gc2UodCxlLG4scil7bWUodCxyKSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5hY3RpdmVUZXh0dXJlKHQuVEVYVFVSRTArcil9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsbil9KX1mdW5jdGlvbiB1ZSh0LGUsbixyKXtyZXR1cm4gdmUodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuZ2V0VW5pZm9ybUxvY2F0aW9uKG4scil9LCd1bmlmb3JtIFwiJytyKydcIiBub3QgcHJlc2VudCBpbiBwcm9ncmFtLicpfWZ1bmN0aW9uIGxlKHQsZSxuKXtyZXR1cm4gdC5nZXRVbmlmb3JtTG9jYXRpb24oZSxuKX1mdW5jdGlvbiBjZSh0LGUsbixyLG8sYSl7VnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHNlKHQsZSxyLGEpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudW5pZm9ybTFpKG8sYSl9KX1mdW5jdGlvbiBoZSh0LGUsbixyKXtWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kRnJhbWVidWZmZXIodC5GUkFNRUJVRkZFUixyKX0pLFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmZyYW1lYnVmZmVyVGV4dHVyZTJEKHQuRlJBTUVCVUZGRVIsdC5DT0xPUl9BVFRBQ0hNRU5UMCx0LlRFWFRVUkVfMkQsbiwwKX0pfWZ1bmN0aW9uIHBlKHQsZSxuKXtWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kRnJhbWVidWZmZXIodC5GUkFNRUJVRkZFUixuKX0pLFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmZyYW1lYnVmZmVyVGV4dHVyZTJEKHQuRlJBTUVCVUZGRVIsdC5DT0xPUl9BVFRBQ0hNRU5UMCx0LlRFWFRVUkVfMkQsbnVsbCwwKX0pfWZ1bmN0aW9uIGZlKHQpe3ZhciBlPXQuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyh0LkZSQU1FQlVGRkVSKTtpZihlIT09dC5GUkFNRUJVRkZFUl9DT01QTEVURSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBiaW5kaW5nIGZyYW1lYnVmZmVyOiBcIitkZSh0LGUpKX1mdW5jdGlvbiBkZSh0LGUpe3N3aXRjaChlKXtjYXNlIHQuRlJBTUVCVUZGRVJfSU5DT01QTEVURV9BVFRBQ0hNRU5UOnJldHVyblwiRlJBTUVCVUZGRVJfSU5DT01QTEVURV9BVFRBQ0hNRU5UXCI7Y2FzZSB0LkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfTUlTU0lOR19BVFRBQ0hNRU5UOnJldHVyblwiRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlRcIjtjYXNlIHQuRlJBTUVCVUZGRVJfSU5DT01QTEVURV9ESU1FTlNJT05TOnJldHVyblwiRlJBTUVCVUZGRVJfSU5DT01QTEVURV9ESU1FTlNJT05TXCI7Y2FzZSB0LkZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEOnJldHVyblwiRlJBTUVCVUZGRVJfVU5TVVBQT1JURURcIjtkZWZhdWx0OnJldHVyblwidW5rbm93biBlcnJvciBcIitlfX1mdW5jdGlvbiB2ZSh0LGUsbixyKXt2YXIgbz1WdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gbigpfSk7aWYobnVsbD09byl0aHJvdyBuZXcgRXJyb3Iocik7cmV0dXJuIG99ZnVuY3Rpb24gbWUodCxlKXt2YXIgbj10Lk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTLTEscj1lK3QuVEVYVFVSRTA7aWYocjx0LlRFWFRVUkUwfHxyPm4pdGhyb3cgbmV3IEVycm9yKFwidGV4dHVyZVVuaXQgbXVzdCBiZSBpbiBcIisoXCJbZ2wuVEVYVFVSRTAsIGdsLlRFWFRVUkVcIituK1wiXVwiKStcIi5cIil9ZnVuY3Rpb24gZ2UodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9MiksZyh0LnNsaWNlKDAsdC5sZW5ndGgtZSkpfWZ1bmN0aW9uIHllKHQpe2lmKDA9PT10Lmxlbmd0aCl0aHJvdyBFcnJvcihcIkNhbm5vdCBnZXQgcm93cyBhbmQgY29sdW1ucyBvZiBhbiBlbXB0eSBzaGFwZSBhcnJheS5cIik7cmV0dXJuW3QubGVuZ3RoPjE/dFt0Lmxlbmd0aC0yXToxLHRbdC5sZW5ndGgtMV1dfWZ1bmN0aW9uIHhlKHQpe3ZhciBlPVsxLDEsMV07cmV0dXJuIDA9PT10Lmxlbmd0aHx8MT09PXQubGVuZ3RoJiYxPT09dFswXXx8KGU9W2dlKHQpXS5jb25jYXQoeWUodCkpKSxlfWZ1bmN0aW9uIGJlKHQsZSl7dmFyIG47dm9pZCAwPT09ZSYmKGU9ITEpO3ZhciByPWkuZ2V0TnVtYmVyKFwiV0VCR0xfTUFYX1RFWFRVUkVfU0laRVwiKTtpZihlJiYocio9MiwxPT09KHQ9dC5tYXAoZnVuY3Rpb24oZSxuKXtyZXR1cm4gbj49dC5sZW5ndGgtMj9oKHRbbl0pOnRbbl19KSkubGVuZ3RoJiYodD1bMix0WzBdXSkpLDIhPT10Lmxlbmd0aCl7dmFyIG89ayh0KTt0PW8ubmV3U2hhcGV9dmFyIGE9Zyh0KTtpZih0Lmxlbmd0aDw9MSYmYTw9cilyZXR1cm5bMSxhXTtpZigyPT09dC5sZW5ndGgmJnRbMF08PXImJnRbMV08PXIpcmV0dXJuIHQ7aWYoMz09PXQubGVuZ3RoJiZ0WzBdKnRbMV08PXImJnRbMl08PXIpcmV0dXJuW3RbMF0qdFsxXSx0WzJdXTtpZigzPT09dC5sZW5ndGgmJnRbMF08PXImJnRbMV0qdFsyXTw9cilyZXR1cm5bdFswXSx0WzFdKnRbMl1dO2lmKDQ9PT10Lmxlbmd0aCYmdFswXSp0WzFdKnRbMl08PXImJnRbM108PXIpcmV0dXJuW3RbMF0qdFsxXSp0WzJdLHRbM11dO2lmKDQ9PT10Lmxlbmd0aCYmdFswXTw9ciYmdFsxXSp0WzJdKnRbM108PXIpcmV0dXJuW3RbMF0sdFsxXSp0WzJdKnRbM11dO2lmKGUpe3ZhciBzPWdlKHQpLHU9MixsPTI7cmV0dXJuIHQubGVuZ3RoJiYodT0obj15ZSh0KSlbMF0sbD1uWzFdKSx3KGE9cyoodS8yKSoobC8yKSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiAyKnR9KX1yZXR1cm4gdyhhKX1mdW5jdGlvbiB3ZSh0KXtyZXR1cm4gdCUyPT0wfWZ1bmN0aW9uIENlKHQsZSl7aWYoeSh0PXQuc2xpY2UoLTIpLGU9ZS5zbGljZSgtMikpKXJldHVybiEwO2lmKCF0Lmxlbmd0aHx8IWUubGVuZ3RoKXJldHVybiEwO2lmKDA9PT10WzBdfHwwPT09dFsxXXx8MD09PWVbMF18fDA9PT1lWzFdKXJldHVybiEwO2lmKHQubGVuZ3RoIT09ZS5sZW5ndGgpe3ZhciBuPXQuc2xpY2UoLTEpWzBdLHI9ZS5zbGljZSgtMSlbMF07aWYobj09PXIpcmV0dXJuITA7aWYod2UobikmJndlKHIpJiYoMT09PXRbMF18fDE9PT1lWzBdKSlyZXR1cm4hMH1yZXR1cm4gdFsxXT09PWVbMV0mJndlKHRbMF0pJiZ3ZShlWzBdKX1mdW5jdGlvbiBFZSh0KXtpZihudWxsPT1YdCl7dmFyIGU9TXQodCk7WHQ9ZS5nZXRQYXJhbWV0ZXIoZS5NQVhfVEVYVFVSRV9TSVpFKX1yZXR1cm4gWHR9ZnVuY3Rpb24gUmUodCl7aWYobnVsbD09WXQpe3ZhciBlPU10KHQpO1l0PWUuZ2V0UGFyYW1ldGVyKGUuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpfXJldHVybiBNYXRoLm1pbigxNixZdCl9ZnVuY3Rpb24gSWUodCl7aWYoMD09PXQpcmV0dXJuIDA7dmFyIGU9TXQodCk7cmV0dXJuIGtlKGUsXCJFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlfd2ViZ2wyXCIpJiYyPT09dD8yOmtlKGUsXCJFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlcIik/MTowfWZ1bmN0aW9uIGtlKHQsZSl7cmV0dXJuIG51bGwhPXQuZ2V0RXh0ZW5zaW9uKGUpfWZ1bmN0aW9uIE5lKHQpe3RyeXtpZihudWxsIT1NdCh0KSlyZXR1cm4hMH1jYXRjaCh0KXtyZXR1cm4hMX1yZXR1cm4hMX1mdW5jdGlvbiBTZSh0KXtpZigwPT09dClyZXR1cm4hMTt2YXIgZT1NdCh0KTtpZigxPT09dCl7aWYoIWtlKGUsXCJPRVNfdGV4dHVyZV9mbG9hdFwiKSlyZXR1cm4hMX1lbHNlIGlmKCFrZShlLFwiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdFwiKSlyZXR1cm4hMTtyZXR1cm4gVGUoZSl9ZnVuY3Rpb24gQWUodCl7aWYoMD09PXQpcmV0dXJuITE7dmFyIGU9TXQodCk7aWYoMSE9PXQpe2lmKGtlKGUsXCJFWFRfY29sb3JfYnVmZmVyX2Zsb2F0XCIpKXJldHVybiBUZShlKTtpZihrZShlLFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpKXt2YXIgbj1lLmdldEV4dGVuc2lvbihcIkVYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdFwiKTtyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1VdCh0LGUpLHI9dC5jcmVhdGVUZXh0dXJlKCk7dC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQscik7dC50ZXhJbWFnZTJEKHQuVEVYVFVSRV8yRCwwLG4uaW50ZXJuYWxGb3JtYXRIYWxmRmxvYXQsMSwxLDAsbi50ZXh0dXJlRm9ybWF0RmxvYXQsbi50ZXh0dXJlVHlwZUhhbGZGbG9hdCxudWxsKTt2YXIgbz10LmNyZWF0ZUZyYW1lYnVmZmVyKCk7dC5iaW5kRnJhbWVidWZmZXIodC5GUkFNRUJVRkZFUixvKSx0LmZyYW1lYnVmZmVyVGV4dHVyZTJEKHQuRlJBTUVCVUZGRVIsdC5DT0xPUl9BVFRBQ0hNRU5UMCx0LlRFWFRVUkVfMkQsciwwKTt2YXIgYT10LmNoZWNrRnJhbWVidWZmZXJTdGF0dXModC5GUkFNRUJVRkZFUik9PT10LkZSQU1FQlVGRkVSX0NPTVBMRVRFO3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxudWxsKSx0LmJpbmRGcmFtZWJ1ZmZlcih0LkZSQU1FQlVGRkVSLG51bGwpLHQuZGVsZXRlVGV4dHVyZShyKSx0LmRlbGV0ZUZyYW1lYnVmZmVyKG8pLGF9KGUsbil9cmV0dXJuITF9cmV0dXJuISFrZShlLFwiT0VTX3RleHR1cmVfZmxvYXRcIikmJighIWtlKGUsXCJXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXRcIikmJlRlKGUpKX1mdW5jdGlvbiBUZSh0KXt2YXIgZT1VdCh0KSxuPXQuY3JlYXRlVGV4dHVyZSgpO3QuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG4pO3QudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCxlLmludGVybmFsRm9ybWF0RmxvYXQsMSwxLDAsZS50ZXh0dXJlRm9ybWF0RmxvYXQsZS50ZXh0dXJlVHlwZUZsb2F0LG51bGwpO3ZhciByPXQuY3JlYXRlRnJhbWVidWZmZXIoKTt0LmJpbmRGcmFtZWJ1ZmZlcih0LkZSQU1FQlVGRkVSLHIpLHQuZnJhbWVidWZmZXJUZXh0dXJlMkQodC5GUkFNRUJVRkZFUix0LkNPTE9SX0FUVEFDSE1FTlQwLHQuVEVYVFVSRV8yRCxuLDApO3ZhciBvPXQuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyh0LkZSQU1FQlVGRkVSKT09PXQuRlJBTUVCVUZGRVJfQ09NUExFVEU7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpLHQuYmluZEZyYW1lYnVmZmVyKHQuRlJBTUVCVUZGRVIsbnVsbCksdC5kZWxldGVUZXh0dXJlKG4pLHQuZGVsZXRlRnJhbWVidWZmZXIociksb31mdW5jdGlvbiBEZSh0KXtyZXR1cm4gMj09PXQmJm51bGwhPU10KHQpLmZlbmNlU3luY312YXIgX2U9T2JqZWN0LmZyZWV6ZSh7Y2FsbEFuZENoZWNrOlZ0LGNhbkJlUmVwcmVzZW50ZWQ6SHQsZ2V0V2ViR0xFcnJvck1lc3NhZ2U6cXQsZ2V0RXh0ZW5zaW9uT3JUaHJvdzokdCxjcmVhdGVWZXJ0ZXhTaGFkZXI6S3QsY3JlYXRlRnJhZ21lbnRTaGFkZXI6anQsY3JlYXRlUHJvZ3JhbTpKdCxsaW5rUHJvZ3JhbTpadCx2YWxpZGF0ZVByb2dyYW06dGUsY3JlYXRlU3RhdGljVmVydGV4QnVmZmVyOmVlLGNyZWF0ZVN0YXRpY0luZGV4QnVmZmVyOm5lLGdldE51bUNoYW5uZWxzOmZ1bmN0aW9uKCl7cmV0dXJuIDI9PT1pLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIik/MTo0fSxjcmVhdGVUZXh0dXJlOnJlLHZhbGlkYXRlVGV4dHVyZVNpemU6b2UsY3JlYXRlRnJhbWVidWZmZXI6YWUsYmluZFZlcnRleEJ1ZmZlclRvUHJvZ3JhbUF0dHJpYnV0ZTppZSxiaW5kVGV4dHVyZVVuaXQ6c2UsdW5iaW5kVGV4dHVyZVVuaXQ6ZnVuY3Rpb24odCxlLG4pe21lKHQsbiksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYWN0aXZlVGV4dHVyZSh0LlRFWFRVUkUwK24pfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSl9LGdldFByb2dyYW1Vbmlmb3JtTG9jYXRpb25PclRocm93OnVlLGdldFByb2dyYW1Vbmlmb3JtTG9jYXRpb246bGUsYmluZFRleHR1cmVUb1Byb2dyYW1Vbmlmb3JtU2FtcGxlcjpjZSxiaW5kQ2FudmFzVG9GcmFtZWJ1ZmZlcjpmdW5jdGlvbih0LGUpe1Z0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmJpbmRGcmFtZWJ1ZmZlcih0LkZSQU1FQlVGRkVSLG51bGwpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudmlld3BvcnQoMCwwLHQuY2FudmFzLndpZHRoLHQuY2FudmFzLmhlaWdodCl9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5zY2lzc29yKDAsMCx0LmNhbnZhcy53aWR0aCx0LmNhbnZhcy5oZWlnaHQpfSl9LGJpbmRDb2xvclRleHR1cmVUb0ZyYW1lYnVmZmVyOmhlLHVuYmluZENvbG9yVGV4dHVyZUZyb21GcmFtZWJ1ZmZlcjpwZSx2YWxpZGF0ZUZyYW1lYnVmZmVyOmZlLGdldEZyYW1lYnVmZmVyRXJyb3JNZXNzYWdlOmRlLGdldEJhdGNoRGltOmdlLGdldFJvd3NDb2xzOnllLGdldFNoYXBlQXMzRDp4ZSxnZXRUZXh0dXJlU2hhcGVGcm9tTG9naWNhbFNoYXBlOmJlLGlzUmVzaGFwZUZyZWU6Q2UsZ2V0V2ViR0xNYXhUZXh0dXJlU2l6ZTpFZSxyZXNldE1heFRleHR1cmVTaXplOmZ1bmN0aW9uKCl7WHQ9bnVsbH0scmVzZXRNYXhUZXh0dXJlc0luU2hhZGVyOmZ1bmN0aW9uKCl7WXQ9bnVsbH0sZ2V0TWF4VGV4dHVyZXNJblNoYWRlcjpSZSxnZXRXZWJHTERpc2pvaW50UXVlcnlUaW1lclZlcnNpb246SWUsaGFzRXh0ZW5zaW9uOmtlLGlzV2ViR0xWZXJzaW9uRW5hYmxlZDpOZSxpc0NhcGFibGVPZlJlbmRlcmluZ1RvRmxvYXRUZXh0dXJlOlNlLGlzRG93bmxvYWRGbG9hdFRleHR1cmVFbmFibGVkOkFlLGlzV2ViR0xGZW5jZUVuYWJsZWQ6RGV9KTtmdW5jdGlvbiBPZSgpe2kuc2V0KFwiUFJPRFwiLCEwKX1mdW5jdGlvbiBGZSgpe2kuc2V0KFwiREVCVUdcIiwhMCl9ZnVuY3Rpb24gTWUoKXtpLnNldChcIkRFUFJFQ0FUSU9OX1dBUk5JTkdTX0VOQUJMRURcIiwhMSksY29uc29sZS53YXJuKFwiVGVuc29yRmxvdy5qcyBkZXByZWNhdGlvbiB3YXJuaW5ncyBoYXZlIGJlZW4gZGlzYWJsZWQuXCIpfWZ1bmN0aW9uIEJlKHQpe2kuZ2V0Qm9vbChcIkRFUFJFQ0FUSU9OX1dBUk5JTkdTX0VOQUJMRURcIikmJmNvbnNvbGUud2Fybih0K1wiIFlvdSBjYW4gZGlzYWJsZSBkZXByZWNhdGlvbiB3YXJuaW5ncyB3aXRoIHRmLmRpc2FibGVEZXByZWNhdGlvbldhcm5pbmdzKCkuXCIpfWZ1bmN0aW9uIFBlKCl7U3QuZGlzcG9zZVZhcmlhYmxlcygpfWZ1bmN0aW9uIExlKCl7cmV0dXJuIFN0fWZ1bmN0aW9uIFdlKCl7cmV0dXJuIFN0Lm1lbW9yeSgpfWZ1bmN0aW9uIFVlKHQpe3JldHVybiBTdC5wcm9maWxlKHQpfWZ1bmN0aW9uIFZlKHQsZSl7cmV0dXJuIFN0LnRpZHkodCxlKX1mdW5jdGlvbiB6ZSh0KXtFdCh0KS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRpc3Bvc2UoKX0pfWZ1bmN0aW9uIEdlKHQpe3JldHVybiBTdC5rZWVwKHQpfWZ1bmN0aW9uIEhlKHQpe3JldHVybiBTdC50aW1lKHQpfWZ1bmN0aW9uIHFlKHQpe3JldHVybiBTdC5zZXRCYWNrZW5kKHQpfWZ1bmN0aW9uICRlKCl7cmV0dXJuIFN0LnJlYWR5KCl9ZnVuY3Rpb24gS2UoKXtyZXR1cm4gU3QuYmFja2VuZE5hbWV9ZnVuY3Rpb24gamUodCl7U3QucmVtb3ZlQmFja2VuZCh0KX1mdW5jdGlvbiBYZSh0KXtyZXR1cm4gU3QuZmluZEJhY2tlbmQodCl9ZnVuY3Rpb24gWWUodCl7cmV0dXJuIFN0LmZpbmRCYWNrZW5kRmFjdG9yeSh0KX1mdW5jdGlvbiBRZSh0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTEpLFN0LnJlZ2lzdGVyQmFja2VuZCh0LGUsbil9ZnVuY3Rpb24gSmUoKXtyZXR1cm4gU3QuYmFja2VuZH1mdW5jdGlvbiBaZSh0LGUpe2kuc2V0UGxhdGZvcm0odCxlKX1mdW5jdGlvbiB0bigpe2Zvcih2YXIgdD1bXSxlPTA7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl0W2VdPWFyZ3VtZW50c1tlXTtpLmdldEJvb2woXCJJU19URVNUXCIpfHxjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSx0KX1mdW5jdGlvbiBlbih0LGUpe3ZhciBuPXQ7aWYoXyh0KSlyZXR1cm5cInN0cmluZ1wiPT09ZT9bXTpbdC5sZW5ndGhdO2lmKCFBcnJheS5pc0FycmF5KHQpKXJldHVybltdO2Zvcih2YXIgcj1bXTtBcnJheS5pc0FycmF5KG4pfHxfKG4pJiZcInN0cmluZ1wiIT09ZTspci5wdXNoKG4ubGVuZ3RoKSxuPW5bMF07cmV0dXJuIEFycmF5LmlzQXJyYXkodCkmJmkuZ2V0Qm9vbChcIlRFTlNPUkxJS0VfQ0hFQ0tfU0hBUEVfQ09OU0lTVEVOQ1lcIikmJmZ1bmN0aW9uIHQoZSxuLHIpe3I9cnx8W107aWYoIUFycmF5LmlzQXJyYXkoZSkmJiFfKGUpKXJldHVybiB2b2lkIGYoMD09PW4ubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJFbGVtZW50IGFycltcIityLmpvaW4oXCJdW1wiKStcIl0gaXMgYSBwcmltaXRpdmUsIGJ1dCBzaG91bGQgYmUgYW4gYXJyYXkvVHlwZWRBcnJheSBvZiBcIituWzBdK1wiIGVsZW1lbnRzXCJ9KTtmKG4ubGVuZ3RoPjAsZnVuY3Rpb24oKXtyZXR1cm5cIkVsZW1lbnQgYXJyW1wiK3Iuam9pbihcIl1bXCIpK1wiXSBzaG91bGQgYmUgYSBwcmltaXRpdmUsIGJ1dCBpcyBhbiBhcnJheSBvZiBcIitlLmxlbmd0aCtcIiBlbGVtZW50c1wifSk7ZihlLmxlbmd0aD09PW5bMF0sZnVuY3Rpb24oKXtyZXR1cm5cIkVsZW1lbnQgYXJyW1wiK3Iuam9pbihcIl1bXCIpK1wiXSBzaG91bGQgaGF2ZSBcIituWzBdK1wiIGVsZW1lbnRzLCBidXQgaGFzIFwiK2UubGVuZ3RoK1wiIGVsZW1lbnRzXCJ9KTt2YXIgbz1uLnNsaWNlKDEpO2Zvcih2YXIgYT0wO2E8ZS5sZW5ndGg7KythKXQoZVthXSxvLHIuY29uY2F0KGEpKX0odCxyLFtdKSxyfWZ1bmN0aW9uIG5uKHQsZSxuLHIpe2lmKG51bGwhPXQmJihcIm51bWVyaWNcIiE9PXQmJnQhPT1lfHxcIm51bWVyaWNcIj09PXQmJlwic3RyaW5nXCI9PT1lKSl0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCAnXCIrbitcIicgcGFzc2VkIHRvICdcIityK1wiJyBtdXN0IGJlIFwiK3QrXCIgdGVuc29yLCBidXQgZ290IFwiK2UrXCIgdGVuc29yXCIpfWZ1bmN0aW9uIHJuKHQsZSxuLHIpe2lmKHZvaWQgMD09PXImJihyPVwibnVtZXJpY1wiKSx0IGluc3RhbmNlb2YgY3QpcmV0dXJuIG5uKHIsdC5kdHlwZSxlLG4pLHQ7dmFyIG89TCh0KTtpZihcInN0cmluZ1wiIT09byYmW1wiYm9vbFwiLFwiaW50MzJcIixcImZsb2F0MzJcIl0uaW5kZXhPZihyKT49MCYmKG89ciksbm4ocixvLGUsbiksbnVsbD09dHx8IV8odCkmJiFBcnJheS5pc0FycmF5KHQpJiZcIm51bWJlclwiIT10eXBlb2YgdCYmXCJib29sZWFuXCIhPXR5cGVvZiB0JiZcInN0cmluZ1wiIT10eXBlb2YgdCl7dmFyIGE9bnVsbD09dD9cIm51bGxcIjp0LmNvbnN0cnVjdG9yLm5hbWU7dGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnQgJ1wiK2UrXCInIHBhc3NlZCB0byAnXCIrbitcIicgbXVzdCBiZSBhIFRlbnNvciBvciBUZW5zb3JMaWtlLCBidXQgZ290ICdcIithK1wiJ1wiKX12YXIgcz1lbih0LG8pO18odCl8fEFycmF5LmlzQXJyYXkodCl8fCh0PVt0XSk7dmFyIHU9XCJzdHJpbmdcIiE9PW8/eih0LG8saS5nZXRCb29sKFwiREVCVUdcIikpOm0odCxbXSwhMCk7cmV0dXJuIGN0Lm1ha2Uocyx7dmFsdWVzOnV9LG8pfWZ1bmN0aW9uIG9uKHQsZSxuLHIpe2lmKHZvaWQgMD09PXImJihyPVwibnVtZXJpY1wiKSwhQXJyYXkuaXNBcnJheSh0KSl0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCBcIitlK1wiIHBhc3NlZCB0byBcIituK1wiIG11c3QgYmUgYSBgVGVuc29yW11gIG9yIGBUZW5zb3JMaWtlW11gXCIpO3JldHVybiB0Lm1hcChmdW5jdGlvbih0LHIpe3JldHVybiBybih0LGUrXCJbXCIrcitcIl1cIixuKX0scil9ZnVuY3Rpb24gYW4odCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoOysrbilpZih0W3QubGVuZ3RoLW4tMV0hPT1lLTEtbilyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBzbih0LGUsbil7Zm9yKHZhciByPXQubGVuZ3RoK2UubGVuZ3RoLG89W10sYT0wLGk9MCxzPTA7czxyO3MrKyktMT09PW4uaW5kZXhPZihzKT9vLnB1c2godFthKytdKTpvLnB1c2goZVtpKytdKTtyZXR1cm4gb31mdW5jdGlvbiB1bih0LGUpe2Zvcih2YXIgbj1bXSxyPXQubGVuZ3RoLG89MDtvPHI7bysrKS0xPT09ZS5pbmRleE9mKG8pJiZuLnB1c2godFtvXSk7cmV0dXJuW24sZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KV19ZnVuY3Rpb24gbG4odCxlKXtyZXR1cm4gc24odCxlLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gMX0pLGUpfWZ1bmN0aW9uIGNuKHQsZSxuKXtmKGFuKGUsbiksZnVuY3Rpb24oKXtyZXR1cm4gdCtcIiBzdXBwb3J0cyBvbmx5IGlubmVyLW1vc3QgYXhlcyBmb3Igbm93LiBHb3QgYXhlcyBcIitlK1wiIGFuZCByYW5rLVwiK24rXCIgaW5wdXQuXCJ9KX1mdW5jdGlvbiBobih0LGUpe2lmKGFuKHQsZSkpcmV0dXJuIG51bGw7Zm9yKHZhciBuPVtdLHI9MDtyPGU7KytyKS0xPT09dC5pbmRleE9mKHIpJiZuLnB1c2gocik7cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gbi5wdXNoKHQpfSksbn1mdW5jdGlvbiBwbih0KXtyZXR1cm4gdC5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm5bZSx0XX0pLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFsxXS1lWzFdfSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfSl9ZnVuY3Rpb24gZm4odCxlKXtmb3IodmFyIG49W10scj1lLXQ7cjxlOysrciluLnB1c2gocik7cmV0dXJuIG59ZnVuY3Rpb24gZG4odCxlKXt2YXIgbj10WzBdLmxlbmd0aDt0LmZvckVhY2goZnVuY3Rpb24odCxlKXtmKHQubGVuZ3RoPT09bixmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29uY2F0XCIrbitcIkQ6IHJhbmsgb2YgdGVuc29yc1tcIitlK1wiXSBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSByYW5rIG9mIHRoZSByZXN0IChcIituK1wiKVwifSl9KSxmKGU+PTAmJmU8bixmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29uY2F0XCIrbitcIkQ6IGF4aXMgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIFwiKyhuLTEpK1wiLlwifSk7dmFyIHI9dFswXTt0LmZvckVhY2goZnVuY3Rpb24odCxvKXtmb3IodmFyIGE9MDthPG47YSsrKWYoYT09PWV8fHRbYV09PT1yW2FdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb25jYXRcIituK1wiRDogU2hhcGUgb2YgdGVuc29yc1tcIitvK1wiXSAoXCIrdCtcIikgZG9lcyBub3QgbWF0Y2ggdGhlIHNoYXBlIG9mIHRoZSByZXN0IChcIityK1wiKSBhbG9uZyB0aGUgbm9uLWNvbmNhdGVuYXRlZCBheGlzIFwiK28rXCIuXCJ9KX0pfWZ1bmN0aW9uIHZuKHQsZSl7Zm9yKHZhciBuPXRbMF0uc2xpY2UoKSxyPTE7cjx0Lmxlbmd0aDtyKyspbltlXSs9dFtyXVtlXTtyZXR1cm4gbn1mdW5jdGlvbiBtbih0KXt2YXIgZT1PYmplY3Qua2V5cyh0KTtpZigxIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYW4gb2JqZWN0IHdpdGggYSBzaW5nbGUga2V5IChvcGVyYXRpb24gbmFtZSkgbWFwcGluZyB0byBhIGZ1bmN0aW9uLiBHb3QgYW4gb2JqZWN0IHdpdGggXCIrZS5sZW5ndGgrXCIga2V5cy5cIik7dmFyIG49ZVswXSxyPXRbbl07bi5lbmRzV2l0aChcIl9cIikmJihuPW4uc3Vic3RyaW5nKDAsbi5sZW5ndGgtMSkpO3ZhciBvPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO1N0LnN0YXJ0U2NvcGUobik7dHJ5e3ZhciBvPXIuYXBwbHkodm9pZCAwLHQpO3JldHVybiBvIGluc3RhbmNlb2YgUHJvbWlzZSYmY29uc29sZS5lcnJvcihcIkNhbm5vdCByZXR1cm4gYSBQcm9taXNlIGluc2lkZSBvZiB0aWR5LlwiKSxTdC5lbmRTY29wZShvKSxvfWNhdGNoKHQpe3Rocm93IFN0LmVuZFNjb3BlKG51bGwpLHR9fTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJuYW1lXCIse3ZhbHVlOm4sY29uZmlndXJhYmxlOiEwfSksb31pLnJlZ2lzdGVyRmxhZyhcIkhBU19XRUJHTFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT4wfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9WRVJTSU9OXCIsZnVuY3Rpb24oKXtyZXR1cm4gTmUoMik/MjpOZSgxKT8xOjB9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0JVRkZFUl9TVVBQT1JURURcIixmdW5jdGlvbigpe3JldHVybiAyPT09aS5nZXQoXCJXRUJHTF9WRVJTSU9OXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9DUFVfRk9SV0FSRFwiLGZ1bmN0aW9uKCl7cmV0dXJuITB9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0ZPUkNFX0YxNl9URVhUVVJFU1wiLGZ1bmN0aW9uKCl7cmV0dXJuITF9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJIQVNfV0VCR0xcIil9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfTk9STUFMSVpBVElPTlwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfQ0xJUFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfREVQVEhXSVNFQ09OVlwiLGZ1bmN0aW9uKCl7cmV0dXJuITF9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX0FSUkFZX09QRVJBVElPTlNcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX0lNQUdFX09QRVJBVElPTlNcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX1JFRFVDRVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0xBWklMWV9VTlBBQ0tcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9DT05WX0lNMkNPTFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX01BWF9URVhUVVJFX1NJWkVcIixmdW5jdGlvbigpe3JldHVybiBFZShpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9NQVhfVEVYVFVSRVNfSU5fU0hBREVSXCIsZnVuY3Rpb24oKXtyZXR1cm4gUmUoaS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKX0pLGkucmVnaXN0ZXJGbGFnKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIixmdW5jdGlvbigpe3ZhciB0PWkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKTtyZXR1cm4gMD09PXQ/MDpJZSh0KX0pLGkucmVnaXN0ZXJGbGFnKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1JFTElBQkxFXCIsZnVuY3Rpb24oKXtyZXR1cm4gaS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKT4wJiYodD1uYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHx3aW5kb3cub3BlcmEsISgvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdCh0KXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdCh0LnN1YnN0cigwLDQpKSkpO3ZhciB0fSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9DQVBBQkxFXCIsZnVuY3Rpb24oKXtyZXR1cm4gU2UoaS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKX0pLGkucmVnaXN0ZXJGbGFnKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfRU5BQkxFRFwiLGZ1bmN0aW9uKCl7cmV0dXJuIWkuZ2V0Qm9vbChcIldFQkdMX0ZPUkNFX0YxNl9URVhUVVJFU1wiKSYmaS5nZXRCb29sKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfQ0FQQUJMRVwiKX0pLGkucmVnaXN0ZXJGbGFnKFwiV0VCR0xfRE9XTkxPQURfRkxPQVRfRU5BQkxFRFwiLGZ1bmN0aW9uKCl7cmV0dXJuIEFlKGkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKSl9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0ZFTkNFX0FQSV9FTkFCTEVEXCIsZnVuY3Rpb24oKXtyZXR1cm4gRGUoaS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKX0pLGkucmVnaXN0ZXJGbGFnKFwiV0VCR0xfU0laRV9VUExPQURfVU5JRk9STVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIldFQkdMX1JFTkRFUl9GTE9BVDMyX0VOQUJMRURcIik/NDowfSksbHQ9QmU7dmFyIGduPW1uKHtjb21wbGV4XzpmdW5jdGlvbih0LGUpe3ZhciBuPXJuKHQsXCJyZWFsXCIsXCJjb21wbGV4XCIpLHI9cm4oZSxcImltYWdcIixcImNvbXBsZXhcIik7cmV0dXJuIGQobi5zaGFwZSxyLnNoYXBlLFwicmVhbCBhbmQgaW1hZyBzaGFwZXMsIFwiK24uc2hhcGUrXCIgYW5kIFwiK3Iuc2hhcGUrXCIsIG11c3QgbWF0Y2ggaW4gY2FsbCB0byB0Zi5jb21wbGV4KCkuXCIpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb21wbGV4KG4scil9LHskcmVhbDpuLCRpbWFnOnJ9KX19KSx5bj1tbih7cmVhbF86ZnVuY3Rpb24odCl7dmFyIGU9cm4odCxcImlucHV0XCIsXCJyZWFsXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQucmVhbChlKX0seyRpbnB1dDplfSl9fSkseG49bW4oe2ltYWdfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJpbnB1dFwiLFwiaW1hZ1wiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmltYWcoZSl9LHskaW5wdXQ6ZX0pfX0pO2Z1bmN0aW9uIGJuKHQsZSxuKXtyZXR1cm4gd24odCxlLGVuKHQsbiksbil9ZnVuY3Rpb24gd24odCxlLG4scil7aWYobnVsbD09ciYmKHI9TCh0KSksXCJjb21wbGV4NjRcIj09PXIpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbnN0cnVjdCBhIGNvbXBsZXg2NCB0ZW5zb3IgZGlyZWN0bHkuIFBsZWFzZSB1c2UgdGYuY29tcGxleChyZWFsLCBpbWFnKS5cIik7aWYoIV8odCkmJiFBcnJheS5pc0FycmF5KHQpJiZcIm51bWJlclwiIT10eXBlb2YgdCYmXCJib29sZWFuXCIhPXR5cGVvZiB0JiZcInN0cmluZ1wiIT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZXMgcGFzc2VkIHRvIHRlbnNvcih2YWx1ZXMpIG11c3QgYmUgYSBudW1iZXIvYm9vbGVhbi9zdHJpbmcgb3IgYW4gYXJyYXkgb2YgbnVtYmVycy9ib29sZWFucy9zdHJpbmdzLCBvciBhIFR5cGVkQXJyYXlcIik7aWYobnVsbCE9ZSl7SyhlKTt2YXIgbz1nKGUpLGE9ZyhuKTtmKG89PT1hLGZ1bmN0aW9uKCl7cmV0dXJuXCJCYXNlZCBvbiB0aGUgcHJvdmlkZWQgc2hhcGUsIFtcIitlK1wiXSwgdGhlIHRlbnNvciBzaG91bGQgaGF2ZSBcIitvK1wiIHZhbHVlcyBidXQgaGFzIFwiK2F9KTtmb3IodmFyIHM9MDtzPG4ubGVuZ3RoOysrcyl7dmFyIHU9bltzXSxsPXMhPT1uLmxlbmd0aC0xfHx1IT09ZyhlLnNsaWNlKHMpKTtmKG5bc109PT1lW3NdfHwhbCxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgY3JlYXRpbmcgYSBuZXcgVGVuc29yLiBJbmZlcnJlZCBzaGFwZSAoXCIrbitcIikgZG9lcyBub3QgbWF0Y2ggdGhlIHByb3ZpZGVkIHNoYXBlIChcIitlK1wiKS4gXCJ9KX19cmV0dXJuIF8odCl8fEFycmF5LmlzQXJyYXkodCl8fCh0PVt0XSksZT1lfHxuLHQ9XCJzdHJpbmdcIiE9PXI/eih0LHIsaS5nZXRCb29sKFwiREVCVUdcIikpOm0odCxbXSwhMCksY3QubWFrZShlLHt2YWx1ZXM6dH0scil9ZnVuY3Rpb24gQ24odCxlKXtpZigoXyh0KSYmXCJzdHJpbmdcIiE9PWV8fEFycmF5LmlzQXJyYXkodCkpJiZcImNvbXBsZXg2NFwiIT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBjcmVhdGluZyBhIG5ldyBTY2FsYXI6IHZhbHVlIG11c3QgYmUgYSBwcmltaXRpdmUgKG51bWJlcnxib29sZWFufHN0cmluZylcIik7aWYoXCJzdHJpbmdcIj09PWUmJl8odCkmJiEodCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IG5ldyBFcnJvcihcIldoZW4gbWFraW5nIGEgc2NhbGFyIGZyb20gZW5jb2RlZCBzdHJpbmcsIHRoZSB2YWx1ZSBtdXN0IGJlIGBVaW50OEFycmF5YC5cIik7cmV0dXJuIHduKHQsW10sW10sZSl9ZnVuY3Rpb24gRW4odCxlKXt2KHQpO3ZhciBuPWVuKHQsZSk7aWYoMSE9PW4ubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjFkKCkgcmVxdWlyZXMgdmFsdWVzIHRvIGJlIGEgZmxhdC9UeXBlZEFycmF5XCIpO3JldHVybiB3bih0LG51bGwsbixlKX1mdW5jdGlvbiBSbih0LGUsbil7aWYodih0KSxudWxsIT1lJiYyIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yMmQoKSByZXF1aXJlcyBzaGFwZSB0byBoYXZlIHR3byBudW1iZXJzXCIpO3ZhciByPWVuKHQsbik7aWYoMiE9PXIubGVuZ3RoJiYxIT09ci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yMmQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXSBvciBmbGF0L1R5cGVkQXJyYXlcIik7aWYoMT09PXIubGVuZ3RoJiZudWxsPT1lKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjJkKCkgcmVxdWlyZXMgc2hhcGUgdG8gYmUgcHJvdmlkZWQgd2hlbiBgdmFsdWVzYCBhcmUgYSBmbGF0L1R5cGVkQXJyYXlcIik7cmV0dXJuIHduKHQsZSxyLG4pfWZ1bmN0aW9uIEluKHQsZSxuKXtpZih2KHQpLG51bGwhPWUmJjMhPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3IzZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgdGhyZWUgbnVtYmVyc1wiKTt2YXIgcj1lbih0LG4pO2lmKDMhPT1yLmxlbmd0aCYmMSE9PXIubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjNkKCkgcmVxdWlyZXMgdmFsdWVzIHRvIGJlIG51bWJlcltdW11bXSBvciBmbGF0L1R5cGVkQXJyYXlcIik7aWYoMT09PXIubGVuZ3RoJiZudWxsPT1lKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjNkKCkgcmVxdWlyZXMgc2hhcGUgdG8gYmUgcHJvdmlkZWQgd2hlbiBgdmFsdWVzYCBhcmUgYSBmbGF0IGFycmF5XCIpO3JldHVybiB3bih0LGUscixuKX1mdW5jdGlvbiBrbih0LGUsbil7aWYodih0KSxudWxsIT1lJiY0IT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNGQoKSByZXF1aXJlcyBzaGFwZSB0byBoYXZlIGZvdXIgbnVtYmVyc1wiKTt2YXIgcj1lbih0LG4pO2lmKDQhPT1yLmxlbmd0aCYmMSE9PXIubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjRkKCkgcmVxdWlyZXMgdmFsdWVzIHRvIGJlIG51bWJlcltdW11bXVtdIG9yIGZsYXQvVHlwZWRBcnJheVwiKTtpZigxPT09ci5sZW5ndGgmJm51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNGQoKSByZXF1aXJlcyBzaGFwZSB0byBiZSBwcm92aWRlZCB3aGVuIGB2YWx1ZXNgIGFyZSBhIGZsYXQgYXJyYXlcIik7cmV0dXJuIHduKHQsZSxyLG4pfWZ1bmN0aW9uIE5uKHQsZSxuKXtpZih2KHQpLG51bGwhPWUmJjUhPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I1ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgZml2ZSBudW1iZXJzXCIpO3ZhciByPWVuKHQsbik7aWYoNSE9PXIubGVuZ3RoJiYxIT09ci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNWQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXVtdW11bXSBvciBmbGF0L1R5cGVkQXJyYXlcIik7aWYoMT09PXIubGVuZ3RoJiZudWxsPT1lKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjVkKCkgcmVxdWlyZXMgc2hhcGUgdG8gYmUgcHJvdmlkZWQgd2hlbiBgdmFsdWVzYCBhcmUgYSBmbGF0IGFycmF5XCIpO3JldHVybiB3bih0LGUscixuKX1mdW5jdGlvbiBTbih0LGUsbil7aWYodih0KSxudWxsIT1lJiY2IT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNmQoKSByZXF1aXJlcyBzaGFwZSB0byBoYXZlIHNpeCBudW1iZXJzXCIpO3ZhciByPWVuKHQsbik7aWYoNiE9PXIubGVuZ3RoJiYxIT09ci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNmQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXVtdW11bXVtdIG9yIGZsYXQvVHlwZWRBcnJheVwiKTtpZigxPT09ci5sZW5ndGgmJm51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNmQoKSByZXF1aXJlcyBzaGFwZSB0byBiZSBwcm92aWRlZCB3aGVuIGB2YWx1ZXNgIGFyZSBhIGZsYXQgYXJyYXlcIik7cmV0dXJuIHduKHQsZT1lfHxyLHIsbil9ZnVuY3Rpb24gQW4odCxlKXtpZih2b2lkIDA9PT1lJiYoZT1cImZsb2F0MzJcIiksXCJjb21wbGV4NjRcIj09PWUpe3ZhciBuPUFuKHQsXCJmbG9hdDMyXCIpLHI9VG4odCxcImZsb2F0MzJcIik7cmV0dXJuIGduKG4scil9dmFyIG89SChnKHQpLGUpO3JldHVybiBjdC5tYWtlKHQse3ZhbHVlczpvfSxlKX1mdW5jdGlvbiBUbih0LGUpe2lmKHZvaWQgMD09PWUmJihlPVwiZmxvYXQzMlwiKSxcImNvbXBsZXg2NFwiPT09ZSl7dmFyIG49VG4odCxcImZsb2F0MzJcIikscj1Ubih0LFwiZmxvYXQzMlwiKTtyZXR1cm4gZ24obixyKX12YXIgbz1xKGcodCksZSk7cmV0dXJuIGN0Lm1ha2UodCx7dmFsdWVzOm99LGUpfWZ1bmN0aW9uIERuKHQsZSxuKXtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHIpe3JldHVybiByLmZpbGwodCxlLG4pfSx7fSl9ZnVuY3Rpb24gX24odCxlLG4pe2lmKG48PTApdGhyb3cgbmV3IEVycm9yKFwiVGhlIG51bWJlciBvZiB2YWx1ZXMgc2hvdWxkIGJlIHBvc2l0aXZlLlwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHIpe3JldHVybiByLmxpbnNwYWNlKHQsZSxuKX0se30pfWZ1bmN0aW9uIE9uKHQsZSxuLHIpe2lmKHZvaWQgMD09PW4mJihuPTEpLHZvaWQgMD09PXImJihyPVwiZmxvYXQzMlwiKSwwPT09bil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaGF2ZSBhIHN0ZXAgb2YgemVyb1wiKTtpZih0PT09ZXx8dDxlJiZuPDB8fGU8dCYmbj4xKXJldHVybiBUbihbMF0scik7dmFyIG89cShNYXRoLmFicyhNYXRoLmNlaWwoKGUtdCkvbikpLHIpO2U8dCYmMT09PW4mJihuPS0xKSxvWzBdPXQ7Zm9yKHZhciBhPTE7YTxvLmxlbmd0aDthKyspb1thXT1vW2EtMV0rbjtyZXR1cm4gRW4obyxyKX12YXIgRm49bW4oe29uZXNMaWtlXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwib25lc0xpa2VcIik7aWYoXCJjb21wbGV4NjRcIj09PWUuZHR5cGUpe3ZhciBuPUZuKHluKGUpKSxyPU1uKHhuKGUpKTtyZXR1cm4gZ24obixyKX1yZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm9uZXNMaWtlKGUpfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gTW4odCl9fX0pfX0pLE1uPW1uKHt6ZXJvc0xpa2VfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJ6ZXJvc0xpa2VcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC56ZXJvc0xpa2UoZSl9LHskeDplfSxmdW5jdGlvbih0LGUpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBNbih0KX19fSl9fSk7dmFyIEJuPW1uKHtjb25jYXRfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCksZih0Lmxlbmd0aD49MSxmdW5jdGlvbigpe3JldHVyblwiUGFzcyBhdCBsZWFzdCBvbmUgdGVuc29yIHRvIGNvbmNhdFwifSk7dmFyIG49b24odCxcInRlbnNvcnNcIixcImNvbmNhdFwiKTtcImNvbXBsZXg2NFwiPT09blswXS5kdHlwZSYmbi5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKFwiY29tcGxleDY0XCIhPT10LmR0eXBlKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb25jYXRlbmF0ZSBjb21wbGV4NjQgdGVuc29ycyB3aXRoIGEgdGVuc29yXFxuICAgICAgICAgIHdpdGggZHR5cGUgXCIrdC5kdHlwZStcIi4gXCIpfSksZT1JKGUsblswXS5zaGFwZSlbMF07dmFyIHI9dm4obi5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KSxlKTtpZigwPT09ZyhyKSlyZXR1cm4gYm4oW10scik7aWYoMT09PShuPW4uZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNpemU+MH0pKS5sZW5ndGgpcmV0dXJuIG5bMF07dmFyIG89bi5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KTtkbihvLGUpO3ZhciBhPW47cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb25jYXQobixlKX0sYSxmdW5jdGlvbih0KXt2YXIgbj1vLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdFtlXX0pO3JldHVybiBWbih0LG4sZSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0fX0pfSl9fSksUG49bW4oe2NvbmNhdDFkXzpmdW5jdGlvbih0KXtyZXR1cm4gQm4odCwwKX19KSxMbj1tbih7Y29uY2F0MmRfOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIEJuKHQsZSl9fSksV249bW4oe2NvbmNhdDNkXzpmdW5jdGlvbih0LGUpe3JldHVybiBCbih0LGUpfX0pLFVuPW1uKHtjb25jYXQ0ZF86ZnVuY3Rpb24odCxlKXtyZXR1cm4gQm4odCxlKX19KSxWbj1tbih7c3BsaXRfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0wKTt2YXIgcixvPXJuKHQsXCJ4XCIsXCJzcGxpdFwiKTtyZXR1cm4gbj1JKG4sby5zaGFwZSlbMF0sXCJudW1iZXJcIj09dHlwZW9mIGU/KGYoby5zaGFwZVtuXSVlPT0wLGZ1bmN0aW9uKCl7cmV0dXJuXCJOdW1iZXIgb2Ygc3BsaXRzIG11c3QgZXZlbmx5IGRpdmlkZSB0aGUgYXhpcy5cIn0pLHI9bmV3IEFycmF5KGUpLmZpbGwoby5zaGFwZVtuXS9lKSk6KGYoby5zaGFwZVtuXT09PWUucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX0pLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgc3VtIG9mIHNpemVzIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgdGhlIGF4aXMgZGltZW5zaW9uLlwifSkscj1lKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3BsaXQobyxyLG4pfSx7JHg6b30sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIEJuKHQsbil9fX0pfX0pO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGY7ZnVuY3Rpb24gem4odCxlKXtyZXR1cm4gdChlPXtleHBvcnRzOnt9fSxlLmV4cG9ydHMpLGUuZXhwb3J0c312YXIgR249em4oZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe3ZhciBlLG49dGhpcyxyPShlPTQwMjI4NzExOTcsZnVuY3Rpb24odCl7dD10LnRvU3RyaW5nKCk7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPS4wMjUxOTYwMzI4MjQxNjkzOCooZSs9dC5jaGFyQ29kZUF0KG4pKTtyLT1lPXI+Pj4wLGU9KHIqPWUpPj4+MCxlKz00Mjk0OTY3Mjk2KihyLT1lKX1yZXR1cm4gMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMCooZT4+PjApfSk7bi5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9MjA5MTYzOSpuLnMwKzIuMzI4MzA2NDM2NTM4Njk2M2UtMTAqbi5jO3JldHVybiBuLnMwPW4uczEsbi5zMT1uLnMyLG4uczI9dC0obi5jPTB8dCl9LG4uYz0xLG4uczA9cihcIiBcIiksbi5zMT1yKFwiIFwiKSxuLnMyPXIoXCIgXCIpLG4uczAtPXIodCksbi5zMDwwJiYobi5zMCs9MSksbi5zMS09cih0KSxuLnMxPDAmJihuLnMxKz0xKSxuLnMyLT1yKHQpLG4uczI8MCYmKG4uczIrPTEpLHI9bnVsbH1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUuYz10LmMsZS5zMD10LnMwLGUuczE9dC5zMSxlLnMyPXQuczIsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9bi5uZXh0O3JldHVybiBpLmludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIDQyOTQ5NjcyOTYqbi5uZXh0KCl8MH0saS5kb3VibGU9ZnVuY3Rpb24oKXtyZXR1cm4gaSgpKzEuMTEwMjIzMDI0NjI1MTU2NWUtMTYqKDIwOTcxNTIqaSgpfDApfSxpLnF1aWNrPWksYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bihmdW5jdGlvbigpe3JldHVybiBhfSk6dGhpcy5hbGVhPWF9KDAsdCwhMSl9KSxIbj16bihmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcyxuPVwiXCI7ZS54PTAsZS55PTAsZS56PTAsZS53PTAsZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ZS54XmUueDw8MTE7cmV0dXJuIGUueD1lLnksZS55PWUueixlLno9ZS53LGUud149ZS53Pj4+MTledF50Pj4+OH0sdD09PSgwfHQpP2UueD10Om4rPXQ7Zm9yKHZhciByPTA7cjxuLmxlbmd0aCs2NDtyKyspZS54Xj0wfG4uY2hhckNvZGVBdChyKSxlLm5leHQoKX1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUueD10LngsZS55PXQueSxlLno9dC56LGUudz10LncsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9ZnVuY3Rpb24oKXtyZXR1cm4obi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2fTtyZXR1cm4gaS5kb3VibGU9ZnVuY3Rpb24oKXtkb3t2YXIgdD0oKG4ubmV4dCgpPj4+MTEpKyhuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTYpLygxPDwyMSl9d2hpbGUoMD09PXQpO3JldHVybiB0fSxpLmludDMyPW4ubmV4dCxpLnF1aWNrPWksYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bihmdW5jdGlvbigpe3JldHVybiBhfSk6dGhpcy54b3IxMjg9YX0oMCx0LCExKX0pLHFuPXpuKGZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXt2YXIgZT10aGlzLG49XCJcIjtlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgdD1lLnheZS54Pj4+MjtyZXR1cm4gZS54PWUueSxlLnk9ZS56LGUuej1lLncsZS53PWUudiwoZS5kPWUuZCszNjI0Mzd8MCkrKGUudj1lLnZeZS52PDw0XnRedDw8MSl8MH0sZS54PTAsZS55PTAsZS56PTAsZS53PTAsZS52PTAsdD09PSgwfHQpP2UueD10Om4rPXQ7Zm9yKHZhciByPTA7cjxuLmxlbmd0aCs2NDtyKyspZS54Xj0wfG4uY2hhckNvZGVBdChyKSxyPT1uLmxlbmd0aCYmKGUuZD1lLng8PDEwXmUueD4+PjQpLGUubmV4dCgpfWZ1bmN0aW9uIG8odCxlKXtyZXR1cm4gZS54PXQueCxlLnk9dC55LGUuej10LnosZS53PXQudyxlLnY9dC52LGUuZD10LmQsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9ZnVuY3Rpb24oKXtyZXR1cm4obi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2fTtyZXR1cm4gaS5kb3VibGU9ZnVuY3Rpb24oKXtkb3t2YXIgdD0oKG4ubmV4dCgpPj4+MTEpKyhuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTYpLygxPDwyMSl9d2hpbGUoMD09PXQpO3JldHVybiB0fSxpLmludDMyPW4ubmV4dCxpLnF1aWNrPWksYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bihmdW5jdGlvbigpe3JldHVybiBhfSk6dGhpcy54b3J3b3c9YX0oMCx0LCExKX0pLCRuPXpuKGZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXt2YXIgZT10aGlzO2UubmV4dD1mdW5jdGlvbigpe3ZhciB0LG4scj1lLngsbz1lLmk7cmV0dXJuIHQ9cltvXSxuPSh0Xj10Pj4+NyledDw8MjQsbl49KHQ9cltvKzEmN10pXnQ+Pj4xMCxuXj0odD1yW28rMyY3XSledD4+PjMsbl49KHQ9cltvKzQmN10pXnQ8PDcsdD1yW28rNyY3XSxuXj0odF49dDw8MTMpXnQ8PDkscltvXT1uLGUuaT1vKzEmNyxufSxmdW5jdGlvbih0LGUpe3ZhciBuLHI9W107aWYoZT09PSgwfGUpKXJbMF09ZTtlbHNlIGZvcihlPVwiXCIrZSxuPTA7bjxlLmxlbmd0aDsrK24pcls3Jm5dPXJbNyZuXTw8MTVeZS5jaGFyQ29kZUF0KG4pK3JbbisxJjddPDwxMztmb3IoO3IubGVuZ3RoPDg7KXIucHVzaCgwKTtmb3Iobj0wO248OCYmMD09PXJbbl07KytuKTtmb3IoOD09bj9yWzddPS0xOnJbbl0sdC54PXIsdC5pPTAsbj0yNTY7bj4wOy0tbil0Lm5leHQoKX0oZSx0KX1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUueD10Lnguc2xpY2UoKSxlLmk9dC5pLGV9ZnVuY3Rpb24gYSh0LGUpe251bGw9PXQmJih0PStuZXcgRGF0ZSk7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9ZnVuY3Rpb24oKXtyZXR1cm4obi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2fTtyZXR1cm4gaS5kb3VibGU9ZnVuY3Rpb24oKXtkb3t2YXIgdD0oKG4ubmV4dCgpPj4+MTEpKyhuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTYpLygxPDwyMSl9d2hpbGUoMD09PXQpO3JldHVybiB0fSxpLmludDMyPW4ubmV4dCxpLnF1aWNrPWksYSYmKGEueCYmbyhhLG4pLGkuc3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbyhuLHt9KX0pLGl9ZSYmZS5leHBvcnRzP2UuZXhwb3J0cz1hOm4mJm4uYW1kP24oZnVuY3Rpb24oKXtyZXR1cm4gYX0pOnRoaXMueG9yc2hpZnQ3PWF9KDAsdCwhMSl9KSxLbj16bihmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcztlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgdCxuLHI9ZS53LG89ZS5YLGE9ZS5pO3JldHVybiBlLnc9cj1yKzE2NDA1MzE1Mjd8MCxuPW9bYSszNCYxMjddLHQ9b1thPWErMSYxMjddLG5ePW48PDEzLHRePXQ8PDE3LG5ePW4+Pj4xNSx0Xj10Pj4+MTIsbj1vW2FdPW5edCxlLmk9YSxuKyhyXnI+Pj4xNil8MH0sZnVuY3Rpb24odCxlKXt2YXIgbixyLG8sYSxpLHM9W10sdT0xMjg7Zm9yKGU9PT0oMHxlKT8ocj1lLGU9bnVsbCk6KGUrPVwiXFwwXCIscj0wLHU9TWF0aC5tYXgodSxlLmxlbmd0aCkpLG89MCxhPS0zMjthPHU7KythKWUmJihyXj1lLmNoYXJDb2RlQXQoKGErMzIpJWUubGVuZ3RoKSksMD09PWEmJihpPXIpLHJePXI8PDEwLHJePXI+Pj4xNSxyXj1yPDw0LHJePXI+Pj4xMyxhPj0wJiYoaT1pKzE2NDA1MzE1Mjd8MCxvPTA9PShuPXNbMTI3JmFdXj1yK2kpP28rMTowKTtmb3Iobz49MTI4JiYoc1sxMjcmKGUmJmUubGVuZ3RofHwwKV09LTEpLG89MTI3LGE9NTEyO2E+MDstLWEpcj1zW28rMzQmMTI3XSxuPXNbbz1vKzEmMTI3XSxyXj1yPDwxMyxuXj1uPDwxNyxyXj1yPj4+MTUsbl49bj4+PjEyLHNbb109cl5uO3Qudz1pLHQuWD1zLHQuaT1vfShlLHQpfWZ1bmN0aW9uIG8odCxlKXtyZXR1cm4gZS5pPXQuaSxlLnc9dC53LGUuWD10Llguc2xpY2UoKSxlfWZ1bmN0aW9uIGEodCxlKXtudWxsPT10JiYodD0rbmV3IERhdGUpO3ZhciBuPW5ldyByKHQpLGE9ZSYmZS5zdGF0ZSxpPWZ1bmN0aW9uKCl7cmV0dXJuKG4ubmV4dCgpPj4+MCkvNDI5NDk2NzI5Nn07cmV0dXJuIGkuZG91YmxlPWZ1bmN0aW9uKCl7ZG97dmFyIHQ9KChuLm5leHQoKT4+PjExKSsobi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2KS8oMTw8MjEpfXdoaWxlKDA9PT10KTtyZXR1cm4gdH0saS5pbnQzMj1uLm5leHQsaS5xdWljaz1pLGEmJihhLlgmJm8oYSxuKSxpLnN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG8obix7fSl9KSxpfWUmJmUuZXhwb3J0cz9lLmV4cG9ydHM9YTpuJiZuLmFtZD9uKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KTp0aGlzLnhvcjQwOTY9YX0oMCx0LCExKX0pLGpuPXpuKGZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXt2YXIgZT10aGlzLG49XCJcIjtlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgdD1lLmIsbj1lLmMscj1lLmQsbz1lLmE7cmV0dXJuIHQ9dDw8MjVedD4+PjdebixuPW4tcnwwLHI9cjw8MjRecj4+PjhebyxvPW8tdHwwLGUuYj10PXQ8PDIwXnQ+Pj4xMl5uLGUuYz1uPW4tcnwwLGUuZD1yPDwxNl5uPj4+MTZebyxlLmE9by10fDB9LGUuYT0wLGUuYj0wLGUuYz0tMTY0MDUzMTUyNyxlLmQ9MTM2NzEzMDU1MSx0PT09TWF0aC5mbG9vcih0KT8oZS5hPXQvNDI5NDk2NzI5NnwwLGUuYj0wfHQpOm4rPXQ7Zm9yKHZhciByPTA7cjxuLmxlbmd0aCsyMDtyKyspZS5iXj0wfG4uY2hhckNvZGVBdChyKSxlLm5leHQoKX1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUuYT10LmEsZS5iPXQuYixlLmM9dC5jLGUuZD10LmQsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9ZnVuY3Rpb24oKXtyZXR1cm4obi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2fTtyZXR1cm4gaS5kb3VibGU9ZnVuY3Rpb24oKXtkb3t2YXIgdD0oKG4ubmV4dCgpPj4+MTEpKyhuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTYpLygxPDwyMSl9d2hpbGUoMD09PXQpO3JldHVybiB0fSxpLmludDMyPW4ubmV4dCxpLnF1aWNrPWksYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bihmdW5jdGlvbigpe3JldHVybiBhfSk6dGhpcy50eWNoZWk9YX0oMCx0LCExKX0pLFhuPXpuKGZ1bmN0aW9uKHQpeyFmdW5jdGlvbihlLG4pe3ZhciByLG89dGhpcyxhPTI1NixpPTYscz1cInJhbmRvbVwiLHU9bi5wb3coYSxpKSxsPW4ucG93KDIsNTIpLGM9MipsLGg9YS0xO2Z1bmN0aW9uIHAodCxoLHApe3ZhciBnPVtdLHk9dihmdW5jdGlvbiB0KGUsbil7dmFyIHIsbz1bXSxhPXR5cGVvZiBlO2lmKG4mJlwib2JqZWN0XCI9PWEpZm9yKHIgaW4gZSl0cnl7by5wdXNoKHQoZVtyXSxuLTEpKX1jYXRjaCh0KXt9cmV0dXJuIG8ubGVuZ3RoP286XCJzdHJpbmdcIj09YT9lOmUrXCJcXDBcIn0oKGg9MT09aD97ZW50cm9weTohMH06aHx8e30pLmVudHJvcHk/W3QsbShlKV06bnVsbD09dD9mdW5jdGlvbigpe3RyeXt2YXIgdDtyZXR1cm4gciYmKHQ9ci5yYW5kb21CeXRlcyk/dD10KGEpOih0PW5ldyBVaW50OEFycmF5KGEpLChvLmNyeXB0b3x8by5tc0NyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKHQpKSxtKHQpfWNhdGNoKHQpe3ZhciBuPW8ubmF2aWdhdG9yLGk9biYmbi5wbHVnaW5zO3JldHVyblsrbmV3IERhdGUsbyxpLG8uc2NyZWVuLG0oZSldfX0oKTp0LDMpLGcpLHg9bmV3IGYoZyksYj1mdW5jdGlvbigpe2Zvcih2YXIgdD14LmcoaSksZT11LG49MDt0PGw7KXQ9KHQrbikqYSxlKj1hLG49eC5nKDEpO2Zvcig7dD49YzspdC89MixlLz0yLG4+Pj49MTtyZXR1cm4odCtuKS9lfTtyZXR1cm4gYi5pbnQzMj1mdW5jdGlvbigpe3JldHVybiAwfHguZyg0KX0sYi5xdWljaz1mdW5jdGlvbigpe3JldHVybiB4LmcoNCkvNDI5NDk2NzI5Nn0sYi5kb3VibGU9Yix2KG0oeC5TKSxlKSwoaC5wYXNzfHxwfHxmdW5jdGlvbih0LGUscixvKXtyZXR1cm4gbyYmKG8uUyYmZChvLHgpLHQuc3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gZCh4LHt9KX0pLHI/KG5bc109dCxlKTp0fSkoYix5LFwiZ2xvYmFsXCJpbiBoP2guZ2xvYmFsOnRoaXM9PW4saC5zdGF0ZSl9ZnVuY3Rpb24gZih0KXt2YXIgZSxuPXQubGVuZ3RoLHI9dGhpcyxvPTAsaT1yLmk9ci5qPTAscz1yLlM9W107Zm9yKG58fCh0PVtuKytdKTtvPGE7KXNbb109bysrO2ZvcihvPTA7bzxhO28rKylzW29dPXNbaT1oJmkrdFtvJW5dKyhlPXNbb10pXSxzW2ldPWU7KHIuZz1mdW5jdGlvbih0KXtmb3IodmFyIGUsbj0wLG89ci5pLGk9ci5qLHM9ci5TO3QtLTspZT1zW289aCZvKzFdLG49biphK3NbaCYoc1tvXT1zW2k9aCZpK2VdKSsoc1tpXT1lKV07cmV0dXJuIHIuaT1vLHIuaj1pLG59KShhKX1mdW5jdGlvbiBkKHQsZSl7cmV0dXJuIGUuaT10LmksZS5qPXQuaixlLlM9dC5TLnNsaWNlKCksZX1mdW5jdGlvbiB2KHQsZSl7Zm9yKHZhciBuLHI9dCtcIlwiLG89MDtvPHIubGVuZ3RoOyllW2gmb109aCYobl49MTkqZVtoJm9dKStyLmNoYXJDb2RlQXQobysrKTtyZXR1cm4gbShlKX1mdW5jdGlvbiBtKHQpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KDAsdCl9aWYobltcInNlZWRcIitzXT1wLHYobi5yYW5kb20oKSxlKSx0LmV4cG9ydHMpe3QuZXhwb3J0cz1wO3RyeXtyPXJlcXVpcmUoXCJjcnlwdG9cIil9Y2F0Y2godCl7fX19KFtdLE1hdGgpfSk7WG4uYWxlYT1HbixYbi54b3IxMjg9SG4sWG4ueG9yd293PXFuLFhuLnhvcnNoaWZ0Nz0kbixYbi54b3I0MDk2PUtuLFhuLnR5Y2hlaT1qbjt2YXIgWW49WG4uYWxlYSxRbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4scixvKXt0aGlzLm1lYW49dCx0aGlzLnN0ZERldj1lLHRoaXMuZHR5cGU9bix0aGlzLm5leHRWYWw9TmFOLHRoaXMudHJ1bmNhdGVkPXIsdGhpcy50cnVuY2F0ZWQmJih0aGlzLnVwcGVyPXRoaXMubWVhbisyKnRoaXMuc3RkRGV2LHRoaXMubG93ZXI9dGhpcy5tZWFuLTIqdGhpcy5zdGREZXYpO3ZhciBhPW98fE1hdGgucmFuZG9tKCk7dGhpcy5yYW5kb209WW4oYS50b1N0cmluZygpKX1yZXR1cm4gdC5wcm90b3R5cGUubmV4dFZhbHVlPWZ1bmN0aW9uKCl7aWYoIWlzTmFOKHRoaXMubmV4dFZhbCkpe3ZhciB0PXRoaXMubmV4dFZhbDtyZXR1cm4gdGhpcy5uZXh0VmFsPU5hTix0fWZvcih2YXIgZSxuLHI9ITE7IXI7KXt2YXIgbz12b2lkIDAsYT12b2lkIDAsaT12b2lkIDA7ZG97aT0obz0yKnRoaXMucmFuZG9tKCktMSkqbysoYT0yKnRoaXMucmFuZG9tKCktMSkqYX13aGlsZShpPj0xfHwwPT09aSk7dmFyIHM9TWF0aC5zcXJ0KC0yKk1hdGgubG9nKGkpL2kpO2U9dGhpcy5tZWFuK3RoaXMuc3RkRGV2Km8qcyxuPXRoaXMubWVhbit0aGlzLnN0ZERldiphKnMsdGhpcy50cnVuY2F0ZWQmJiF0aGlzLmlzVmFsaWRUcnVuY2F0ZWQoZSl8fChyPSEwKX1yZXR1cm4gdGhpcy50cnVuY2F0ZWQmJiF0aGlzLmlzVmFsaWRUcnVuY2F0ZWQobil8fCh0aGlzLm5leHRWYWw9dGhpcy5jb252ZXJ0VmFsdWUobikpLHRoaXMuY29udmVydFZhbHVlKGUpfSx0LnByb3RvdHlwZS5jb252ZXJ0VmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXRoaXMuZHR5cGV8fFwiZmxvYXQzMlwiPT09dGhpcy5kdHlwZT90Ok1hdGgucm91bmQodCl9LHQucHJvdG90eXBlLmlzVmFsaWRUcnVuY2F0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8PXRoaXMudXBwZXImJnQ+PXRoaXMubG93ZXJ9LHR9KCksSm49ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSxuLHIpe3RoaXMuYWxwaGE9dCx0aGlzLmJldGE9MS9lLHRoaXMuZHR5cGU9bjt2YXIgbz1yfHxNYXRoLnJhbmRvbSgpO3RoaXMucmFuZHU9WW4oby50b1N0cmluZygpKSx0aGlzLnJhbmRuPW5ldyBRbigwLDEsbiwhMSx0aGlzLnJhbmR1KCkpLHRoaXMuZD10PDE/dCsyLzM6dC0xLzMsdGhpcy5jPTEvTWF0aC5zcXJ0KDkqdGhpcy5kKX1yZXR1cm4gdC5wcm90b3R5cGUubmV4dFZhbHVlPWZ1bmN0aW9uKCl7Zm9yKHZhciB0LGUsbixyLG8sYTs7KXtkb3tyPXRoaXMucmFuZG4ubmV4dFZhbHVlKCksYT0xK3RoaXMuYypyfXdoaWxlKGE8PTApO2lmKGEqPWEqYSxlPTEtLjMzMSoodD1yKnIpKnQsbj0uNSp0K3RoaXMuZCooMS1hK01hdGgubG9nKGEpKSwobz10aGlzLnJhbmR1KCkpPGV8fE1hdGgubG9nKG8pPG4pYnJlYWt9cmV0dXJuIGE9MS90aGlzLmJldGEqdGhpcy5kKmEsdGhpcy5hbHBoYTwxJiYoYSo9TWF0aC5wb3codGhpcy5yYW5kdSgpLDEvdGhpcy5hbHBoYSkpLHRoaXMuY29udmVydFZhbHVlKGEpfSx0LnByb3RvdHlwZS5jb252ZXJ0VmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuXCJmbG9hdDMyXCI9PT10aGlzLmR0eXBlP3Q6TWF0aC5yb3VuZCh0KX0sdH0oKSxabj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4scil7dmFyIG89dGhpcztpZih2b2lkIDA9PT10JiYodD0wKSx2b2lkIDA9PT1lJiYoZT0xKSx0aGlzLmNhblJldHVybkZsb2F0PWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PW8uZHR5cGV8fFwiZmxvYXQzMlwiPT09by5kdHlwZX0sdGhpcy5taW49dCx0aGlzLnJhbmdlPWUtdCx0aGlzLmR0eXBlPW4sbnVsbD09ciYmKHI9TWF0aC5yYW5kb20oKSksXCJudW1iZXJcIj09dHlwZW9mIHImJihyPXIudG9TdHJpbmcoKSksIXRoaXMuY2FuUmV0dXJuRmxvYXQoKSYmdGhpcy5yYW5nZTw9MSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFwiK3QrXCIgLSBcIitlK1wiIDw9IDEgYW5kIGR0eXBlIGlzIG5vdCBmbG9hdFwiKTt0aGlzLnJhbmRvbT1ZbihyKX1yZXR1cm4gdC5wcm90b3R5cGUuY29udmVydFZhbHVlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNhblJldHVybkZsb2F0KCk/dDpNYXRoLnJvdW5kKHQpfSx0LnByb3RvdHlwZS5uZXh0VmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb252ZXJ0VmFsdWUodGhpcy5taW4rdGhpcy5yYW5nZSp0aGlzLnJhbmRvbSgpKX0sdH0oKTtmdW5jdGlvbiB0cih0LGUsbil7cmV0dXJuIHZvaWQgMD09PWUmJihlPVwiZmxvYXQzMlwiKSxlPWV8fFwiZmxvYXQzMlwiLEsodCksbmV3IGl0KHQsZSxuKX1mdW5jdGlvbiBlcih0LGUpe3ZvaWQgMD09PWUmJihlPSExKSxjb25zb2xlLmxvZyh0LnRvU3RyaW5nKGUpKX12YXIgbnI9bW4oe2JhdGNoVG9TcGFjZU5EXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9cm4odCxcInhcIixcImJhdGNoVG9TcGFjZU5EXCIpLG89ZS5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSk7cmV0dXJuIGYoci5yYW5rPj0xK2UubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJpbnB1dCByYW5rIGlzIFwiK3IucmFuaytcIiBidXQgc2hvdWxkIGJlID4gdGhhbiBibG9ja1NoYXBlLmxlbmd0aCBcIitlLmxlbmd0aH0pLGYobi5sZW5ndGg9PT1lLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiY3JvcHMubGVuZ3RoIGlzIFwiK24ubGVuZ3RoK1wiIGJ1dCBzaG91bGQgYmUgZXF1YWwgdG8gYmxvY2tTaGFwZS5sZW5ndGggIFwiK2UubGVuZ3RofSksZihyLnNoYXBlWzBdJW89PTAsZnVuY3Rpb24oKXtyZXR1cm5cImlucHV0IHRlbnNvciBiYXRjaCBpcyBcIityLnNoYXBlWzBdK1wiIGJ1dCBpcyBub3QgZGl2aXNpYmxlIGJ5IHRoZSBwcm9kdWN0IG9mIHRoZSBlbGVtZW50cyBvZiBibG9ja1NoYXBlIFwiK2Uuam9pbihcIiAqIFwiKStcIiA9PT0gXCIrb30pLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5iYXRjaFRvU3BhY2VORChyLGUsbil9LHskeDpyfSxmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5zcGFjZVRvQmF0Y2hORChlLG4pfX19KX19KSxycj1tbih7Y2FzdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwieFwiLFwiY2FzdFwiKTtpZighVChlKSl0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY2FzdCB0byB1bmtub3duIGR0eXBlIFwiK2UpO2lmKFwic3RyaW5nXCI9PT1lJiZcInN0cmluZ1wiIT09bi5kdHlwZXx8XCJzdHJpbmdcIiE9PWUmJlwic3RyaW5nXCI9PT1uLmR0eXBlKXRocm93IG5ldyBFcnJvcihcIk9ubHkgc3RyaW5ncyBjYW4gYmUgY2FzdGVkIHRvIHN0cmluZ3NcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5jYXN0KG4sZSl9LHskeDpufSxmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5jbG9uZSgpfX19KX19KSxvcj1tbih7Y2xvbmVfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJjbG9uZVwiLG51bGwpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIGN0Lm1ha2UoZS5zaGFwZSx7ZGF0YUlkOmUuZGF0YUlkfSxlLmR0eXBlKX0seyR4OmV9LGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LnRvRmxvYXQoKX19fSl9fSksYXI9bW4oe2N1bXN1bV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09biYmKG49ITEpLHZvaWQgMD09PXImJihyPSExKTt2YXIgbz1ybih0LFwieFwiLFwiY3Vtc3VtXCIpLGE9aG4oW2V8PTBdLG8ucmFuayksaT1vO251bGwhPWEmJihpPW8udHJhbnNwb3NlKGEpKTt2YXIgcz1mbigxLG8ucmFuaylbMF0sdT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuY3Vtc3VtKGkscyxuLHIpfSx7cGVybXV0ZWRYOml9LGZ1bmN0aW9uKHQpe3JldHVybntwZXJtdXRlZFg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5jdW1zdW0oZSxuLCFyKX19fSk7cmV0dXJuIG51bGwhPWEmJih1PXUudHJhbnNwb3NlKGEpKSx1fX0pLGlyPW1uKHtkZXB0aFRvU3BhY2VfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj1cIk5IV0NcIik7dmFyIHI9cm4odCxcInhcIixcImRlcHRoVG9TcGFjZVwiKSxvPVwiTkhXQ1wiPT09bj9yLnNoYXBlWzFdOnIuc2hhcGVbMl0sYT1cIk5IV0NcIj09PW4/ci5zaGFwZVsyXTpyLnNoYXBlWzNdLGk9XCJOSFdDXCI9PT1uP3Iuc2hhcGVbM106ci5zaGFwZVsxXTtyZXR1cm4gZihvKmU+PTAsZnVuY3Rpb24oKXtyZXR1cm5cIk5lZ2F0aXZlIGRpbWVuc2lvbiBzaXplIGNhdXNlZCBieSBvdmVyZmxvdyB3aGVuIG11bHRpcGx5aW5nXFxuICAgICAgXCIrbytcIiBhbmQgXCIrZStcIiAgZm9yIGRlcHRoVG9TcGFjZSB3aXRoIGlucHV0IHNoYXBlXFxuICAgICAgXCIrci5zaGFwZX0pLGYoYSplPj0wLGZ1bmN0aW9uKCl7cmV0dXJuXCJOZWdhdGl2ZSBkaW1lbnNpb24gc2l6ZSBjYXVzZWQgYnkgb3ZlcmZsb3cgd2hlbiBtdWx0aXBseWluZ1xcbiAgICAgIFwiK2ErXCIgYW5kIFwiK2UrXCIgZm9yIGRlcHRoVG9TcGFjZSB3aXRoIGlucHV0IHNoYXBlXFxuICAgICAgICAgIFwiK3Iuc2hhcGV9KSxmKGklKGUqZSk9PTAsZnVuY3Rpb24oKXtyZXR1cm5cIkRpbWVuc2lvbiBzaXplIG11c3QgYmUgZXZlbmx5IGRpdmlzaWJsZSBieSBcIitlKmUrXCIgYnV0IGlzIFwiK2krXCIgZm9yIGRlcHRoVG9TcGFjZSB3aXRoIGlucHV0IHNoYXBlIFwiK3Iuc2hhcGV9KSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuZGVwdGhUb1NwYWNlKHIsZSxuKX0seyR4OnJ9KX19KSxzcj1tbih7ZXhwYW5kRGltc186ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0wKTt2YXIgbj1ybih0LFwieFwiLFwiZXhwYW5kRGltc1wiLG51bGwpO2YoZTw9bi5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJBeGlzIG11c3QgYmUgPD0gcmFuayBvZiB0aGUgdGVuc29yXCJ9KTt2YXIgcj1uLnNoYXBlLnNsaWNlKCk7cmV0dXJuIGU8MCYmKGYoLShuLnJhbmsrMSk8PWUsZnVuY3Rpb24oKXtyZXR1cm5cIkF4aXMgbXVzdCBiZSBpbiB0aGUgaW50ZXJ2YWwgW1wiKy0obi5yYW5rKzEpK1wiLCBcIituLnJhbmsrXCJdXCJ9KSxlPW4ucmFuaytlKzEpLHIuc3BsaWNlKGUsMCwxKSxicihuLHIpfX0pLHVyPW1uKHtleWVfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPVwiZmxvYXQzMlwiKSxudWxsPT1lJiYoZT10KTtmb3IodmFyIG89dHIoW3QsZV0sciksYT10PD1lP3Q6ZSxpPTA7aTxhOysraSlvLnNldCgxLGksaSk7dmFyIHM9by50b1RlbnNvcigpLmFzMkQodCxlKTtpZihudWxsPT1uKXJldHVybiBzO2lmKDE9PT1uLmxlbmd0aClyZXR1cm4gUnIoc3IocywwKSxbblswXSwxLDFdKTtpZigyPT09bi5sZW5ndGgpcmV0dXJuIFJyKHNyKHNyKHMsMCksMCksW25bMF0sblsxXSwxLDFdKTtpZigzPT09bi5sZW5ndGgpcmV0dXJuIFJyKHNyKHNyKHNyKHMsMCksMCksMCksW25bMF0sblsxXSxuWzJdLDEsMV0pO3Rocm93IG5ldyBFcnJvcihcImV5ZSgpIGN1cnJlbnRseSBzdXBwb3J0cyBvbmx5IDFEIGFuZCAyRCBiYXRjaFNoYXBlcywgYnV0IHJlY2VpdmVkIFwiK24ubGVuZ3RoK1wiRC5cIil9fSksbHI9bW4oe211bHRpbm9taWFsXzpmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMSk7dmFyIG89cm4odCxcImxvZ2l0c1wiLFwibXVsdGlub21pYWxcIiksYT1vLnNpemUsaT1vLnJhbms7aWYoYTwyKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG11bHRpbm9taWFsOiB5b3UgbmVlZCBhdCBsZWFzdCAyIG91dGNvbWVzLCBidXQgZ290IFwiK2ErXCIuXCIpO2lmKGk+Mil0aHJvdyBuZXcgRXJyb3IoXCJSYW5rIG9mIHByb2JhYmlsaXRpZXMgbXVzdCBiZSAxIG9yIDIsIGJ1dCBpcyBcIitpKTtuPW58fE1hdGgucmFuZG9tKCk7dmFyIHM9MT09PWk/by5hczJEKDEsLTEpOm8sdT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQubXVsdGlub21pYWwocyxyLGUsbil9LHtsb2dpdHMyRDpzfSk7cmV0dXJuIDE9PT1pP3UuYXMxRCgpOnV9fSksY3I9bW4oe29uZUhvdF86ZnVuY3Rpb24odCxlLG4scil7aWYodm9pZCAwPT09biYmKG49MSksdm9pZCAwPT09ciYmKHI9MCksZTwyKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG9uZUhvdDogZGVwdGggbXVzdCBiZSA+PTIsIGJ1dCBpdCBpcyBcIitlKTt2YXIgbz1ybih0LFwiaW5kaWNlc1wiLFwib25lSG90XCIsXCJpbnQzMlwiKSxhPW8uc2hhcGUuY29uY2F0KFtlXSk7cmV0dXJuIG89by5mbGF0dGVuKCksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm9uZUhvdChvLGUsbixyKX0seyRpbmRpY2VzOm99LGZ1bmN0aW9uKHQpe3JldHVybnskaW5kaWNlczpmdW5jdGlvbigpe3JldHVybiBUbihvLnNoYXBlLFwiZmxvYXQzMlwiKX19fSkucmVzaGFwZShhKX19KSxocj1tbih7cGFkXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49MCk7dmFyIHI9cm4odCxcInhcIixcInBhZFwiKTtpZigwPT09ci5yYW5rKXRocm93IG5ldyBFcnJvcihcInBhZChzY2FsYXIpIGlzIG5vdCBkZWZpbmVkLiBQYXNzIG5vbi1zY2FsYXIgdG8gcGFkXCIpO3ZhciBvPWUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfSk7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5wYWQocixlLG4pfSx7JHg6cn0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuc2xpY2UobyxyLnNoYXBlKX19fSl9fSkscHI9bW4oe3BhZDFkXzpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTApLGYoMj09PWUubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJJbnZhbGlkIG51bWJlciBvZiBwYWRkaW5ncy4gTXVzdCBiZSBsZW5ndGggb2YgMi5cIn0pLGhyKHQsW2VdLG4pfX0pLGZyPW1uKHtwYWQyZF86ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0wKSxmKDI9PT1lLmxlbmd0aCYmMj09PWVbMF0ubGVuZ3RoJiYyPT09ZVsxXS5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkludmFsaWQgbnVtYmVyIG9mIHBhZGRpbmdzLiBNdXN0IGJlIGxlbmd0aCBvZiAyIGVhY2guXCJ9KSxocih0LGUsbil9fSksZHI9bW4oe3BhZDNkXzpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTApLGYoMz09PWUubGVuZ3RoJiYyPT09ZVswXS5sZW5ndGgmJjI9PT1lWzFdLmxlbmd0aCYmMj09PWVbMl0ubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJJbnZhbGlkIG51bWJlciBvZiBwYWRkaW5ncy4gTXVzdCBiZSBsZW5ndGggb2YgMiBlYWNoLlwifSksaHIodCxlLG4pfX0pLHZyPW1uKHtwYWQ0ZF86ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0wKSxmKDQ9PT1lLmxlbmd0aCYmMj09PWVbMF0ubGVuZ3RoJiYyPT09ZVsxXS5sZW5ndGgmJjI9PT1lWzJdLmxlbmd0aCYmMj09PWVbM10ubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJJbnZhbGlkIG51bWJlciBvZiBwYWRkaW5ncy4gTXVzdCBiZSBsZW5ndGggb2YgMiBlYWNoLlwifSksaHIodCxlLG4pfX0pLG1yPW1uKHtyYW5kXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9Zyh0KSxvPW51bGw7aWYobnVsbD09bnx8XCJmbG9hdDMyXCI9PT1uKW89bmV3IEZsb2F0MzJBcnJheShyKTtlbHNlIGlmKFwiaW50MzJcIj09PW4pbz1uZXcgSW50MzJBcnJheShyKTtlbHNle2lmKFwiYm9vbFwiIT09bil0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGEgdHlwZSBcIituKTtvPW5ldyBVaW50OEFycmF5KHIpfWZvcih2YXIgYT0wO2E8cjthKyspb1thXT1lKCk7cmV0dXJuIGN0Lm1ha2UodCx7dmFsdWVzOm99LG4pfX0pLGdyPW1uKHtyYW5kb21Ob3JtYWxfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7aWYodm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09biYmKG49MSksbnVsbCE9ciYmXCJib29sXCI9PT1yKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGRhdGEgdHlwZSBcIityKTtmb3IodmFyIGE9bmV3IFFuKGUsbixyLCExLG8pLGk9dHIodCxyKSxzPTA7czxpLnZhbHVlcy5sZW5ndGg7cysrKWkudmFsdWVzW3NdPWEubmV4dFZhbHVlKCk7cmV0dXJuIGkudG9UZW5zb3IoKX19KSx5cj1tbih7cmFuZG9tR2FtbWFfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7aWYodm9pZCAwPT09biYmKG49MSksdm9pZCAwPT09ciYmKHI9XCJmbG9hdDMyXCIpLG51bGw9PW4mJihuPTEpLG51bGw9PXImJihyPVwiZmxvYXQzMlwiKSxcImZsb2F0MzJcIiE9PXImJlwiaW50MzJcIiE9PXIpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGF0YSB0eXBlIFwiK3IpO2Zvcih2YXIgYT1uZXcgSm4oZSxuLHIsbyksaT10cih0LHIpLHM9MDtzPGkudmFsdWVzLmxlbmd0aDtzKyspaS52YWx1ZXNbc109YS5uZXh0VmFsdWUoKTtyZXR1cm4gaS50b1RlbnNvcigpfX0pLHhyPW1uKHtyYW5kb21Vbmlmb3JtXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PWUmJihlPTApLHZvaWQgMD09PW4mJihuPTEpLHZvaWQgMD09PXImJihyPVwiZmxvYXQzMlwiKTtmb3IodmFyIGE9dHIodCxyKSxpPW5ldyBabihlLG4sbnVsbCxvKSxzPTA7czxhLnZhbHVlcy5sZW5ndGg7cysrKWEudmFsdWVzW3NdPWkubmV4dFZhbHVlKCk7cmV0dXJuIGEudG9UZW5zb3IoKX19KSxicj1tbih7cmVzaGFwZV86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwieFwiLFwicmVzaGFwZVwiLG51bGwpO3JldHVybiBlPVIoZSxuLnNpemUpLGYobi5zaXplPT09ZyhlKSxmdW5jdGlvbigpe3JldHVyblwibmV3IHNoYXBlIGFuZCBvbGQgc2hhcGUgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBlbGVtZW50cy5cIn0pLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXNoYXBlKG4sZSl9LHskeDpufSxmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5yZXNoYXBlKG4uc2hhcGUpfX19KX19KSx3cj1tbih7c3BhY2VUb0JhdGNoTkRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1ybih0LFwieFwiLFwic3BhY2VUb0JhdGNoTkRcIik7cmV0dXJuIGYoci5yYW5rPj0xK2UubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJpbnB1dCByYW5rIFwiK3IucmFuaytcIiBzaG91bGQgYmUgPiB0aGFuIFtibG9ja1NoYXBlXSBcIitlLmxlbmd0aH0pLGYobi5sZW5ndGg9PT1lLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwicGFkZGluZ3Muc2hhcGVbMF0gXCIrbi5sZW5ndGgrXCIgbXVzdCBiZSBlcXVhbCB0byBbYmxvY2tTaGFwZV0gXCIrZS5sZW5ndGh9KSxmKHIuc2hhcGUucmVkdWNlKGZ1bmN0aW9uKHQscixvKXtyZXR1cm4gbz4wJiZvPD1lLmxlbmd0aD90JiYocituW28tMV1bMF0rbltvLTFdWzFdKSVlW28tMV09PTA6dH0sITApLGZ1bmN0aW9uKCl7cmV0dXJuXCJpbnB1dCBzcGF0aWFsIGRpbWVuc2lvbnMgXCIrci5zaGFwZS5zbGljZSgxKStcIiB3aXRoIHBhZGRpbmdzIFwiK24udG9TdHJpbmcoKStcIiBtdXN0IGJlIGRpdmlzaWJsZSBieSBibG9ja1NoYXBlcyBcIitlLnRvU3RyaW5nKCl9KSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3BhY2VUb0JhdGNoTkQocixlLG4pfSx7JHg6cn0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuYmF0Y2hUb1NwYWNlTkQoZSxuKX19fSl9fSksQ3I9bW4oe3NxdWVlemVfOmZ1bmN0aW9uKHQsZSl7dmFyIG49cm4odCxcInhcIixcInNxdWVlemVcIik7cmV0dXJuIGJyKG4sayhuLnNoYXBlLGUpLm5ld1NoYXBlKX19KSxFcj1tbih7c3RhY2tfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCk7dmFyIG49b24odCxcInRlbnNvcnNcIixcInN0YWNrXCIpO2lmKGYobi5sZW5ndGg+PTEsZnVuY3Rpb24oKXtyZXR1cm5cIlBhc3MgYXQgbGVhc3Qgb25lIHRlbnNvciB0byB0Zi5zdGFja1wifSksMT09PW4ubGVuZ3RoKXJldHVybiBuWzBdLmV4cGFuZERpbXMoZSk7dmFyIHI9blswXS5yYW5rLG89blswXS5zaGFwZSxhPW5bMF0uZHR5cGU7ZihlPD1yLGZ1bmN0aW9uKCl7cmV0dXJuXCJBeGlzIG11c3QgYmUgPD0gcmFuayBvZiB0aGUgdGVuc29yXCJ9KSxuLmZvckVhY2goZnVuY3Rpb24odCl7ZChvLHQuc2hhcGUsXCJBbGwgdGVuc29ycyBwYXNzZWQgdG8gc3RhY2sgbXVzdCBoYXZlIG1hdGNoaW5nIHNoYXBlc1wiKX0pLG4uZm9yRWFjaChmdW5jdGlvbih0KXtmKGE9PT10LmR0eXBlLGZ1bmN0aW9uKCl7cmV0dXJuXCJBbGwgdGVuc29ycyBwYXNzZWQgdG8gc3RhY2sgbXVzdCBoYXZlIG1hdGNoaW5nIGR0eXBlc1wifSl9KTt2YXIgaT1uLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5leHBhbmREaW1zKGUpfSk7cmV0dXJuIEJuKGksZSl9fSksUnI9bW4oe3RpbGVfOmZ1bmN0aW9uKHQsZSl7dmFyIG49cm4odCxcInhcIixcInRpbGVcIixudWxsKTtyZXR1cm4gZihuLnJhbms9PT1lLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gdHJhbnNwb3NlOiByYW5rIG9mIGlucHV0IFwiK24ucmFuaytcIiBtdXN0IG1hdGNoIGxlbmd0aCBvZiByZXBzIFwiK2UrXCIuXCJ9KSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxyKXt2YXIgbz10LnRpbGUobixlKTtyZXR1cm4gcihbbl0pLG99LHskeDpufSxmdW5jdGlvbih0LG4pe3ZhciByPW5bMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7dmFyIG49TW4ocik7aWYoMT09PXIucmFuaylmb3IodmFyIG89MDtvPGVbMF07KytvKW49bi5hZGQodC5zbGljZShbbypyLnNoYXBlWzBdXSxbci5zaGFwZVswXV0pKTtlbHNlIGlmKDI9PT1yLnJhbmspZm9yKG89MDtvPGVbMF07KytvKWZvcih2YXIgYT0wO2E8ZVsxXTsrK2Epbj1uLmFkZCh0LnNsaWNlKFtvKnIuc2hhcGVbMF0sYSpyLnNoYXBlWzFdXSxbci5zaGFwZVswXSxyLnNoYXBlWzFdXSkpO2Vsc2UgaWYoMz09PXIucmFuaylmb3Iobz0wO288ZVswXTsrK28pZm9yKGE9MDthPGVbMV07KythKWZvcih2YXIgaT0wO2k8ZVsyXTsrK2kpbj1uLmFkZCh0LnNsaWNlKFtvKnIuc2hhcGVbMF0sYSpyLnNoYXBlWzFdLGkqci5zaGFwZVsyXV0sW3Iuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdXSkpO2Vsc2V7aWYoNCE9PXIucmFuayl0aHJvdyBuZXcgRXJyb3IoXCJHcmFkaWVudCBmb3IgdGlsZSBvcGVyYXRpb24gaXMgbm90IGltcGxlbWVudGVkIGZvciByYW5rLVwiK3IucmFuaytcIiB0ZW5zb3JzIHlldC5cIik7Zm9yKG89MDtvPGVbMF07KytvKWZvcihhPTA7YTxlWzFdOysrYSlmb3IoaT0wO2k8ZVsyXTsrK2kpZm9yKHZhciBzPTA7czxlWzNdOysrcyluPW4uYWRkKHQuc2xpY2UoW28qci5zaGFwZVswXSxhKnIuc2hhcGVbMV0saSpyLnNoYXBlWzJdLHMqci5zaGFwZVszXV0sW3Iuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdLHIuc2hhcGVbM11dKSl9cmV0dXJuIG59fX0pfX0pLElyPW1uKHt0cnVuY2F0ZWROb3JtYWxfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7aWYodm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09biYmKG49MSksbnVsbCE9ciYmXCJib29sXCI9PT1yKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGRhdGEgdHlwZSBcIityKTtmb3IodmFyIGE9bmV3IFFuKGUsbixyLCEwLG8pLGk9dHIodCxyKSxzPTA7czxpLnZhbHVlcy5sZW5ndGg7cysrKWkudmFsdWVzW3NdPWEubmV4dFZhbHVlKCk7cmV0dXJuIGkudG9UZW5zb3IoKX19KSxrcj1tbih7dW5zdGFja186ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0wKSxlPWV8fDA7dmFyIG49cm4odCxcInhcIixcInVuc3RhY2tcIik7cmV0dXJuIGYoZT49LW4uc2hhcGUubGVuZ3RoJiZlPG4uc2hhcGUubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJBeGlzID0gXCIrZStcIiBpcyBub3QgaW4gWy1cIituLnNoYXBlLmxlbmd0aCtcIiwgXCIrbi5zaGFwZS5sZW5ndGgrXCIpXCJ9KSxlPDAmJihlKz1uLnNoYXBlLmxlbmd0aCksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnVuc3RhY2sobixlKX0seyR4Om59LGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBFcih0LGUpfX19KX19KSxOcj1mdW5jdGlvbih0LGUpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBuLG8sYSxpLHMsdSxsLGMsaCxwO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm4gbj1ybih0LFwieFwiLFwic2V0ZGlmZjFkXCIpLG89cm4oZSxcInlcIixcInNldGRpZmYxZFwiKSxmKG4uZHR5cGU9PT1vLmR0eXBlLGZ1bmN0aW9uKCl7cmV0dXJuXCJ4IGFuZCB5IHNob3VsZCBoYXZlIHRoZSBzYW1lIGR0eXBlLCBidXQgZ290IHggKFwiK24uZHR5cGUrXCIpIGFuZCB5IChcIitvLmR0eXBlK1wiKS5cIn0pLGYoMT09PW4ucmFuayxmdW5jdGlvbigpe3JldHVyblwieCBzaG91bGQgYmUgMUQgdGVuc29yLCBidXQgZ290IHggKFwiK24uc2hhcGUrXCIpLlwifSksZigxPT09by5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJ5IHNob3VsZCBiZSAxRCB0ZW5zb3IsIGJ1dCBnb3QgeSAoXCIrby5zaGFwZStcIikuXCJ9KSxbNCxuLmRhdGEoKV07Y2FzZSAxOnJldHVybiBhPXIuc2VudCgpLFs0LG8uZGF0YSgpXTtjYXNlIDI6Zm9yKGk9ci5zZW50KCkscz1uZXcgU2V0KGkpLHU9MCxoPTA7aDxhLmxlbmd0aDtoKyspcy5oYXMoYVtoXSl8fHUrKztmb3IobD1uZXcgaXQoW3VdLG4uZHR5cGUpLGM9bmV3IGl0KFt1XSxcImludDMyXCIpLGg9MCxwPTA7aDxhLmxlbmd0aDtoKyspcy5oYXMoYVtoXSl8fChsLnZhbHVlc1twXT1hW2hdLGMudmFsdWVzW3BdPWgscCsrKTtyZXR1cm5bMixbbC50b1RlbnNvcigpLGMudG9UZW5zb3IoKV1dfX0pfSl9O2Z1bmN0aW9uIFNyKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPSEwKTt2YXIgbz1bXTtpZihyKShvPW8uY29uY2F0KGUuc2xpY2UoMCkpKS5wdXNoKHRbMF0vbiksbz1vLmNvbmNhdCh0LnNsaWNlKDEpKTtlbHNle289by5jb25jYXQodFswXSk7Zm9yKHZhciBhPWUubGVuZ3RoLGk9MDtpPGE7KytpKW89by5jb25jYXQoW3RbaSsxXS9lW2ldLGVbaV1dKTtvPW8uY29uY2F0KHQuc2xpY2UoYSsxKSl9cmV0dXJuIG99ZnVuY3Rpb24gQXIodCxlLG4pe3ZvaWQgMD09PW4mJihuPSEwKTt2YXIgcj1bXTtpZihuKXtyLnB1c2goZSk7Zm9yKHZhciBvPWUrMTtvPHQ7KytvKW88PTIqZT8oci5wdXNoKG8pLHIucHVzaChvLShlKzEpKSk6ci5wdXNoKG8pfWVsc2V7dmFyIGE9W10saT1bXTtmb3Iobz0xO288dDsrK28pbz49MiplKzF8fG8lMj09MT9pLnB1c2gobyk6YS5wdXNoKG8pO3IucHVzaC5hcHBseShyLGEpLHIucHVzaCgwKSxyLnB1c2guYXBwbHkocixpKX1yZXR1cm4gcn1mdW5jdGlvbiBUcih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMCk7dmFyIG89W107cj9vLnB1c2godFswXS9uKTpvLnB1c2godFswXSpuKTtmb3IodmFyIGE9MTthPHQubGVuZ3RoOysrYSlhPD1lLmxlbmd0aD9yP28ucHVzaChlW2EtMV0qdFthXSk6by5wdXNoKHRbYV0vZVthLTFdKTpvLnB1c2godFthXSk7cmV0dXJuIG99ZnVuY3Rpb24gRHIodCxlKXtmb3IodmFyIG49WzBdLHI9MDtyPGU7KytyKW4ucHVzaCh0W3JdWzBdKTtyZXR1cm4gbn1mdW5jdGlvbiBfcih0LGUsbil7Zm9yKHZhciByPXQuc2xpY2UoMCwxKSxvPTA7bzxuOysrbylyLnB1c2godFtvKzFdLWVbb11bMF0tZVtvXVsxXSk7cmV0dXJuIHJ9ZnVuY3Rpb24gT3IodCxlKXtpZih0LnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5nYXRoZXJORCgpIGV4cGVjdHMgdGhlIGlucHV0IHRvIGJlIHJhbmsgMSBvciBoaWdoZXIsIGJ1dCB0aGUgcmFuayB3YXMgXCIrdC5yYW5rK1wiLlwiKTtpZihlLnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5nYXRoZXJORCgpIGV4cGVjdHMgdGhlIGluZGljZXMgdG8gYmUgcmFuayAxIG9yIGhpZ2hlciwgYnV0IHRoZSByYW5rIHdhcyBcIitlLnJhbmsrXCIuXCIpO2lmKFwiaW50MzJcIiE9PWUuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwidGYuZ2F0aGVyTkQoKSBleHBlY3RzIHRoZSBpbmRpY2VzIHRvIGJlIGludDMyIHR5cGUsIGJ1dCB0aGUgZHR5cGUgd2FzIFwiK2UuZHR5cGUrXCIuXCIpO2lmKGUuc2hhcGVbZS5yYW5rLTFdPnQucmFuayl0aHJvdyBuZXcgRXJyb3IoXCJpbmRleCBpbm5lcm1vc3QgZGltZW5zaW9uIGxlbmd0aCBtdXN0IGJlIDw9IHRlbnNvciByYW5rOyBzYXc6IFwiK2Uuc2hhcGVbZS5yYW5rLTFdK1wiIHZzLiBcIit0LnJhbmspO2lmKDA9PT10LnNpemUpdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGVkIG1vcmUgdGhhbiAwIGVudHJpZXMsIGJ1dCBpbnB1dCBpcyBlbXB0eS4gSW5wdXQgc2hhcGU6IFwiK3Quc2hhcGUrXCIuXCIpO2Zvcih2YXIgbj1lLnNoYXBlLHI9bltuLmxlbmd0aC0xXSxvPTEsYT0wO2E8bi5sZW5ndGgtMTsrK2Epbyo9blthXTt2YXIgaT10LnNoYXBlLHM9bi5zbGljZSgpO3MucG9wKCk7dmFyIHU9MTtmb3IoYT1yO2E8dC5yYW5rOysrYSl1Kj1pW2FdLHMucHVzaChpW2FdKTt2YXIgbD1WKHQuc2hhcGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC91fSkuY29uY2F0KFsxXSkuc2xpY2UoMCxyKTtyZXR1cm5bcyxvLHUsbF19dmFyIEZyPTMwO2Z1bmN0aW9uIE1yKHQpe3JldHVybiB0PD1Gcj90OlUodCxNYXRoLmZsb29yKE1hdGguc3FydCh0KSkpfWZ1bmN0aW9uIEJyKHQsZSxuKXtpZihlLnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5zY2F0dGVyTkQoKSBleHBlY3RzIHRoZSBpbmRpY2VzIHRvIGJlIHJhbmsgMSBvciBoaWdoZXIsIGJ1dCB0aGUgcmFuayB3YXMgXCIrZS5yYW5rK1wiLlwiKTtpZih0LnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5zY2F0dGVyTkQoKSBleHBlY3RzIHRoZSB1cGRhdGVzIHRvIGJlIHJhbmsgMSBvciBoaWdoZXIsIGJ1dCB0aGUgcmFuayB3YXMgXCIrdC5yYW5rK1wiLlwiKTtpZihcImludDMyXCIhPT1lLmR0eXBlKXRocm93IG5ldyBFcnJvcihcIlRoZSBkdHlwZSBvZiAnaW5kaWNlcycgc2hvdWxkIGJlIGludDMyLCBidXQgZ290IGR0eXBlOiBcIitlLmR0eXBlKTtpZihuLmxlbmd0aDwxKXRocm93IG5ldyBFcnJvcihcIk91dHB1dCByYW5rIG11c3QgYmUgZ3JlYXRlciBvciBlcXVhbCB0byAxLCBidXQgZ290IHNoYXBlOiBcIituKTtpZigwPT09bi5sZW5ndGgpe2lmKDA9PT1lLnNpemUpdGhyb3cgbmV3IEVycm9yKFwiSW5kaWNlcyBzcGVjaWZpZWQgZm9yIGVtcHR5IG91dHB1dC4gaW5kaWNlcyBzaGFwZTogXCIrZS5zaGFwZSk7aWYoMD09PXQuc2l6ZSl0aHJvdyBuZXcgRXJyb3IoXCJVcGRhdGVzIHNwZWNpZmllZCBmb3IgZW1wdHkgb3V0cHV0LiB1cGRhdGVzIHNoYXBlOiBcIit0LnNoYXBlKX0hZnVuY3Rpb24odCxlLG4pe3ZhciByPWUucmFuaz4xP2Uuc2hhcGVbZS5yYW5rLTFdOjEsbz1lLnJhbms+MT9lLnJhbmstMToxLGE9XCJNdXN0IGhhdmUgdXBkYXRlcy5zaGFwZSA9IGluZGljZXMuc2hhcGVbOmJhdGNoRGltXSArIHNoYXBlW3NsaWNlRGltOl0sIGdvdCB1cGRhdGVzLnNoYXBlOiBcIituLnNoYXBlK1wiLCBpbmRpY2VzLnNoYXBlOiBcIitlLnNoYXBlK1wiLCBzaGFwZTogXCIrdCtcIiwgc2xpY2VEaW06IFwiK3IrXCIsIGFuZCBiYXRjaERpbTogXCIrbytcIi5cIjtpZihuLnJhbms8byl0aHJvdyBuZXcgRXJyb3IoYStcIiB1cGRhdGUucmFuayA8IFwiK28rXCIuIFwiKTtpZih0Lmxlbmd0aDxyKyhuLnJhbmstbykpdGhyb3cgbmV3IEVycm9yKGErXCIgT3V0cHV0IHNoYXBlIGxlbmd0aCA8IFwiKyhyKyhuLnJhbmstbykpKTtpZihuLnJhbmshPT1vK3QubGVuZ3RoLXIpdGhyb3cgbmV3IEVycm9yKGErXCIgdXBkYXRlLnJhbmsgIT0gXCIrKG8rdC5sZW5ndGgtcikpO2Zvcih2YXIgaT0wO2k8bzsrK2kpaWYobi5zaGFwZVtpXSE9PWUuc2hhcGVbaV0pdGhyb3cgbmV3IEVycm9yKGErXCIgdXBkYXRlcy5zaGFwZVtcIitpK1wiXSAoXCIrbi5zaGFwZVtpXStcIikgIT0gaW5kaWNlcy5zaGFwZVtcIitpK1wiXSAoXCIrZS5zaGFwZVtpXStcIikuXCIpO2ZvcihpPTA7aTxuLnJhbmstbzsrK2kpaWYobi5zaGFwZVtpK29dIT09dFtpK3JdKXRocm93IG5ldyBFcnJvcihhK1wiIHVwZGF0ZXMuc2hhcGVbXCIrKGkrbykrXCJdIChcIituLnNoYXBlW2krb10rXCIpICE9IHNoYXBlW1wiKyhpK28pK1wiXSAoXCIrdFtpK29dK1wiKVwiKX0obixlLHQpfWZ1bmN0aW9uIFByKHQsZSxuKXtmb3IodmFyIHI9ZS5yYW5rPjE/ZS5zaGFwZVtlLnJhbmstMV06MSxvPW4ubGVuZ3RoLGE9MSxpPXI7aTxvOysraSlhKj1uW2ldO3ZhciBzPXI8MT8xOnI7cmV0dXJue3NsaWNlUmFuazpyLG51bVVwZGF0ZXM6ZS5zaXplL3Msc2xpY2VTaXplOmEsc3RyaWRlczpWKG4uc2xpY2UoMCxyKSkuY29uY2F0KFsxXSksb3V0cHV0U2l6ZTpnKG4pfX1mdW5jdGlvbiBMcih0KXtmb3IodmFyIGU9W10sbj0wO3Q+MDspMSZ0JiZlLnB1c2gobiksdC89MixuKys7cmV0dXJuIGV9ZnVuY3Rpb24gV3IodCxlLG4pe2Zvcih2YXIgcj1bXSxvPTA7bzx0Lmxlbmd0aDtvKyspcltvXT1NYXRoLmNlaWwoKGVbb10tdFtvXSkvbltvXSk7cmV0dXJuIHJ9ZnVuY3Rpb24gVXIodCxlLG4scixvKXt2YXIgYT1lW29dLGk9bltvXXx8MTsodCYxPDxvfHxudWxsPT1hKSYmKGE9aT4wP051bWJlci5NSU5fU0FGRV9JTlRFR0VSOk51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTt2YXIgcz1yW29dO3JldHVybiBhPDAmJihhKz1zKSxhPWMoMCxhLHMtMSl9ZnVuY3Rpb24gVnIodCxlLG4scixvKXt2YXIgYT1lW29dLGk9bltvXXx8MTsodCYxPDxvfHxudWxsPT1hKSYmKGE9aT4wP051bWJlci5NQVhfU0FGRV9JTlRFR0VSOk51bWJlci5NSU5fU0FGRV9JTlRFR0VSKTt2YXIgcz1yW29dO3JldHVybiBhPDAmJihhKz1zKSxhPWk+MD9jKDAsYSxzKTpjKC0xLGEscy0xKX1mdW5jdGlvbiB6cih0LGUsbil7Zm9yKHZhciByPW4ubGVuZ3RoLG89MDtvPG4ubGVuZ3RoO28rKylpZihuW29dPjEpe3I9bzticmVha31mb3Iobz1yKzE7bzxuLmxlbmd0aDtvKyspaWYoZVtvXT4wfHxuW29dIT09dFtvXSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBHcih0LGUpe2Zvcih2YXIgbj10Lmxlbmd0aD4wP3RbdC5sZW5ndGgtMV06MSxyPTA7cjx0Lmxlbmd0aC0xO3IrKyluKz10W3JdKmVbcl07cmV0dXJuIG59ZnVuY3Rpb24gSHIodCl7cmV0dXJuIGYoVyh0KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGYgcGFzc2VkIGluIGdyYWQoZikgbXVzdCBiZSBhIGZ1bmN0aW9uXCJ9KSxmdW5jdGlvbihlLG4pe3ZhciByPXJuKGUsXCJ4XCIsXCJ0Zi5ncmFkXCIsbnVsbCksbz1udWxsIT1uP3JuKG4sXCJkeVwiLFwidGYuZ3JhZFwiKTpudWxsO3JldHVybiBTdC50aWR5KGZ1bmN0aW9uKCl7dmFyIGU9U3QuZ3JhZGllbnRzKGZ1bmN0aW9uKCl7cmV0dXJuIHQocil9LFtyXSxvKSxuPWUudmFsdWUsYT1lLmdyYWRzO3JldHVybiBudWxsIT1vJiZkKG4uc2hhcGUsby5zaGFwZSxcIlRoZSBzaGFwZSBvZiBkeSBwYXNzZWQgaW4gZ3JhZChmKSh4LCBkeSkgbXVzdCBtYXRjaCB0aGUgc2hhcGUgcmV0dXJuZWQgYnkgZih4KVwiKSxZcihhKSxhWzBdfSl9fWZ1bmN0aW9uIHFyKHQpe3JldHVybiBmKFcodCksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmIHBhc3NlZCBpbiBncmFkcyhmKSBtdXN0IGJlIGEgZnVuY3Rpb25cIn0pLGZ1bmN0aW9uKGUsbil7ZihBcnJheS5pc0FycmF5KGUpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJncyBwYXNzZWQgaW4gZ3JhZHMoZikoYXJncykgbXVzdCBiZSBhbiBhcnJheSBvZiBgVGVuc29yYHMgb3IgYFRlbnNvckxpa2Vgc1wifSk7dmFyIHI9b24oZSxcImFyZ3NcIixcInRmLmdyYWRzXCIsbnVsbCksbz1udWxsIT1uP3JuKG4sXCJkeVwiLFwidGYuZ3JhZHNcIik6bnVsbDtyZXR1cm4gU3QudGlkeShmdW5jdGlvbigpe3ZhciBlPVN0LmdyYWRpZW50cyhmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KHZvaWQgMCxyKX0scixvKSxuPWUudmFsdWUsYT1lLmdyYWRzO3JldHVybiBudWxsIT1vJiZkKG4uc2hhcGUsby5zaGFwZSxcIlRoZSBzaGFwZSBvZiBkeSBwYXNzZWQgaW4gZ3JhZHMoZikoW3gxLC4uLl0sIGR5KSBtdXN0IG1hdGNoIHRoZSBzaGFwZSByZXR1cm5lZCBieSBmKFt4MSwuLi5dKVwiKSxZcihhKSxhfSl9fWZ1bmN0aW9uICRyKHQpe3JldHVybiBmKFcodCksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmIHBhc3NlZCBpbiB2YWx1ZUFuZEdyYWQoZikgbXVzdCBiZSBhIGZ1bmN0aW9uXCJ9KSxmdW5jdGlvbihlLG4pe2YoZSBpbnN0YW5jZW9mIGN0LGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgeCBwYXNzZWQgaW4gdmFsdWVBbmRHcmFkKGYpKHgpIG11c3QgYmUgYSB0ZW5zb3JcIn0pLGYobnVsbD09bnx8biBpbnN0YW5jZW9mIGN0LGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHkgcGFzc2VkIGluIHZhbHVlQW5kR3JhZChmKSh4LCBkeSkgbXVzdCBiZSBhIHRlbnNvclwifSk7dmFyIHI9U3QuZ3JhZGllbnRzKGZ1bmN0aW9uKCl7cmV0dXJuIHQoZSl9LFtlXSxuKSxvPXIuZ3JhZHMsYT1yLnZhbHVlO3JldHVybiBZcihvKSx7Z3JhZDpvWzBdLHZhbHVlOmF9fX1mdW5jdGlvbiBLcih0KXtyZXR1cm4gZihXKHQpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZiBwYXNzZWQgaW4gdmFsdWVBbmRHcmFkcyhmKSBtdXN0IGJlIGEgZnVuY3Rpb25cIn0pLGZ1bmN0aW9uKGUsbil7ZihBcnJheS5pc0FycmF5KGUpJiZlLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgY3R9KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGFyZ3MgcGFzc2VkIGluIHZhbHVlQW5kR3JhZHMoZikoYXJncykgbXVzdCBiZSBhcnJheSBvZiB0ZW5zb3JzXCJ9KSxmKG51bGw9PW58fG4gaW5zdGFuY2VvZiBjdCxmdW5jdGlvbigpe3JldHVyblwiVGhlIGR5IHBhc3NlZCBpbiB2YWx1ZUFuZEdyYWRzKGYpKGFyZ3MsIGR5KSBtdXN0IGJlIGEgdGVuc29yXCJ9KTt2YXIgcj1TdC5ncmFkaWVudHMoZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseSh2b2lkIDAsZSl9LGUsbik7cmV0dXJuIG51bGwhPW4mJmQoci52YWx1ZS5zaGFwZSxuLnNoYXBlLFwiVGhlIHNoYXBlIG9mIGR5IHBhc3NlZCBpbiB2YWx1ZUFuZEdyYWRzKGYpKFt4MSwuLi5dLCBkeSkgbXVzdCBtYXRjaCB0aGUgc2hhcGUgcmV0dXJuZWQgYnkgZihbeDEsLi4uXSlcIiksWXIoci5ncmFkcykscn19ZnVuY3Rpb24ganIodCxlKXtmKFcodCksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmIHBhc3NlZCBpbiB2YXJpYWJsZUdyYWRzKGYpIG11c3QgYmUgYSBmdW5jdGlvblwifSksZihudWxsPT1lfHxBcnJheS5pc0FycmF5KGUpJiZlLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgaHR9KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIHZhckxpc3QgcGFzc2VkIGluIHZhcmlhYmxlR3JhZHMoZiwgdmFyTGlzdCkgbXVzdCBiZSBhbiBhcnJheSBvZiB2YXJpYWJsZXNcIn0pO3ZhciBuPW51bGwhPWU7aWYoIW4pZm9yKHZhciByIGluIGU9W10sU3QucmVnaXN0ZXJlZFZhcmlhYmxlcyllLnB1c2goU3QucmVnaXN0ZXJlZFZhcmlhYmxlc1tyXSk7dmFyIG89bj9lLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4hdC50cmFpbmFibGV9KTpudWxsLGE9ZS5sZW5ndGg7ZigoZT1lLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC50cmFpbmFibGV9KSkubGVuZ3RoPjAsZnVuY3Rpb24oKXtyZXR1cm5cInZhcmlhYmxlR3JhZHMoKSBleHBlY3RzIGF0IGxlYXN0IG9uZSBvZiB0aGUgaW5wdXQgdmFyaWFibGVzIHRvIGJlIHRyYWluYWJsZSwgYnV0IG5vbmUgb2YgdGhlIFwiK2ErXCIgdmFyaWFibGVzIGlzIHRyYWluYWJsZS5cIn0pO3ZhciBpPVN0LmdyYWRpZW50cyh0LGUsbnVsbCwhMCkscz1pLnZhbHVlLHU9aS5ncmFkcztmKHUuc29tZShmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dH0pLGZ1bmN0aW9uKCl7cmV0dXJuXCJDYW5ub3QgZmluZCBhIGNvbm5lY3Rpb24gYmV0d2VlbiBhbnkgdmFyaWFibGUgYW5kIHRoZSByZXN1bHQgb2YgdGhlIGxvc3MgZnVuY3Rpb24geT1mKHgpLiBQbGVhc2UgbWFrZSBzdXJlIHRoZSBvcGVyYXRpb25zIHRoYXQgdXNlIHZhcmlhYmxlcyBhcmUgaW5zaWRlIHRoZSBmdW5jdGlvbiBmIHBhc3NlZCB0byBtaW5pbWl6ZSgpLlwifSksZigwPT09cy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZiBwYXNzZWQgaW4gdmFyaWFibGVHcmFkcyhmKSBtdXN0IHJldHVybiBhIHNjYWxhciwgYnV0IGl0IHJldHVybmVkIGEgcmFuay1cIitzLnJhbmsrXCIgdGVuc29yXCJ9KTt2YXIgbD17fTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7bnVsbCE9dVtlXSYmKGxbdC5uYW1lXT11W2VdKX0pLG51bGwhPW8mJm8uZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gbFt0Lm5hbWVdPW51bGx9KSx7dmFsdWU6cyxncmFkczpsfX1mdW5jdGlvbiBYcih0KXtyZXR1cm4gU3QuY3VzdG9tR3JhZCh0KX1mdW5jdGlvbiBZcih0KXtpZih0LmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dH0pLmxlbmd0aD4wKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb21wdXRlIGdyYWRpZW50IG9mIHk9Zih4KSB3aXRoIHJlc3BlY3QgdG8geC4gTWFrZSBzdXJlIHRoYXRcXG4gICAgdGhlIGYgeW91IHBhc3NlZCBlbmNsb3NlcyBhbGwgb3BlcmF0aW9ucyB0aGF0IGxlYWQgZnJvbSB4IHRvIHkuXCIpfXZhciBRcj1tbih7c29mdG1heF86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0tMSk7dmFyIG49cm4odCxcImxvZ2l0c1wiLFwic29mdG1heFwiKTtpZigtMT09PWUmJihlPW4ucmFuay0xKSxlIT09bi5yYW5rLTEpdGhyb3cgRXJyb3IoXCJTb2Z0bWF4IGFsb25nIGEgbm9uLWxhc3QgZGltZW5zaW9uIGlzIG5vdCB5ZXQgc3VwcG9ydGVkLiBMb2dpdHMgd2FzIHJhbmsgXCIrbi5yYW5rK1wiIGFuZCBkaW0gd2FzIFwiK2UpO3JldHVybiBYcihmdW5jdGlvbih0LG4pe3ZhciByPXQubG9nU3VtRXhwKFtlXSwhMCksbz10LnRvRmxvYXQoKS5zdWIocikuZXhwKCk7cmV0dXJuIG4oW29dKSx7dmFsdWU6byxncmFkRnVuYzpmdW5jdGlvbih0LG4pe3ZhciByPW5bMF0sbz10Lm11bChyKTtyZXR1cm4gby5zdWIoby5zdW0oW2VdLCEwKS5tdWwocikpfX19KShuKX19KSxKcj1tbih7bG9nU29mdG1heF86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0tMSk7dmFyIG49cm4odCxcImxvZ2l0c1wiLFwibG9nU29mdG1heFwiKTtpZigtMT09PWUmJihlPW4ucmFuay0xKSxlIT09bi5yYW5rLTEpdGhyb3cgRXJyb3IoXCJMb2cgU29mdG1heCBhbG9uZyBhIG5vbi1sYXN0IGRpbWVuc2lvbiBpcyBub3QgeWV0IHN1cHBvcnRlZC4gTG9naXRzIHdhcyByYW5rIFwiK24ucmFuaytcIiBhbmQgYXhpcyB3YXMgXCIrZSk7cmV0dXJuIFhyKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5tYXgoZSwhMCksbz10LnN1YihyKSxhPW8udG9GbG9hdCgpLnN1YihvLmV4cCgpLnN1bShlLCEwKS5sb2coKSk7cmV0dXJuIG4oW2FdKSx7dmFsdWU6YSxncmFkRnVuYzpmdW5jdGlvbih0LG4pe3ZhciByPW5bMF0uZXhwKCk7cmV0dXJuIHQuc3ViKHQuc3VtKGUsITApLm11bChyKSl9fX0pKG4pfX0pLFpyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3RoaXMuYmFja2VuZD10LHRoaXMuZGF0YU1vdmVyPWUsdGhpcy5kYXRhPW5ldyBXZWFrTWFwfXJldHVybiB0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YS5oYXModCl8fHRoaXMuZGF0YU1vdmVyLm1vdmVEYXRhKHRoaXMuYmFja2VuZCx0KSx0aGlzLmRhdGEuZ2V0KHQpfSx0LnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCxlKXt0aGlzLmRhdGEuc2V0KHQsZSl9LHQucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhLmhhcyh0KX0sdC5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRhdGEuZGVsZXRlKHQpfSx0fSgpLHRvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5wcm90b3R5cGUudGltZT1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucmVhZD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucmVhZFN5bmM9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmRpc3Bvc2VEYXRhPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5mcm9tUGl4ZWxzPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLnJlZ2lzdGVyPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUubWVtb3J5PWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmZsb2F0UHJlY2lzaW9uPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZXBzaWxvbj1mdW5jdGlvbigpe3JldHVybiAzMj09PXRoaXMuZmxvYXRQcmVjaXNpb24oKT8xZS03OjFlLTR9LHQucHJvdG90eXBlLmJhdGNoTWF0TXVsPWZ1bmN0aW9uKHQsZSxuLHIpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmZ1c2VkQmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCl7dC5hLHQuYix0LnRyYW5zcG9zZUEsdC50cmFuc3Bvc2VCLHQuYmlhcyx0LmFjdGl2YXRpb24sdC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzO3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zdHJpZGVkU2xpY2U9ZnVuY3Rpb24odCxlLG4scil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUudW5zdGFjaz1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jb25jYXQ9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYWRkTj1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLm11bHRpcGx5PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucmVhbERpdmlkZT1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmZsb29yRGl2PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc3VtPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucHJvZD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnVuc29ydGVkU2VnbWVudFN1bT1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYXJnTWluPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZXF1YWw9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5ub3RFcXVhbD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmxlc3M9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5sZXNzRXF1YWw9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5ncmVhdGVyPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubG9naWNhbE5vdD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5sb2dpY2FsQW5kPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubG9naWNhbE9yPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUud2hlcmU9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc2VsZWN0PWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS50b3BrPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5taW49ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5taW5pbXVtPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubW9kPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubWF4PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubWF4aW11bT1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmFsbD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnNxdWFyZWREaWZmZXJlbmNlPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuY2VpbD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5mbG9vcj1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5yb3VuZD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmlzTmFOPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmlzSW5mPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmlzRmluaXRlPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnBvdz1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmV4cD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5leHBtMT1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubG9nMXA9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc3FydD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5yc3FydD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zcXVhcmU9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucmVjaXByb2NhbD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5yZWx1PWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnJlbHU2PWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnByZWx1PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZWx1PWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmVsdURlcj1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnNlbHU9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuaW50PWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNsaXA9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmFicz1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jb21wbGV4QWJzPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnNpZ21vaWQ9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc29mdHBsdXM9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc2luPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNvcz1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS50YW49ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYXNpbj1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hY29zPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmF0YW49ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYXRhbjI9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zaW5oPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNvc2g9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUudGFuaD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hc2luaD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hY29zaD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hdGFuaD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5lcmY9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc3RlcD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmZ1c2VkQ29udjJkPWZ1bmN0aW9uKHQpe3QuaW5wdXQsdC5maWx0ZXIsdC5jb252SW5mbyx0LmJpYXMsdC5hY3RpdmF0aW9uLHQucHJlbHVBY3RpdmF0aW9uV2VpZ2h0czt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jb252MmQ9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNvbnYyZERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jb252MmREZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmZ1c2VkRGVwdGh3aXNlQ29udjJEPWZ1bmN0aW9uKHQpe3QuaW5wdXQsdC5maWx0ZXIsdC5jb252SW5mbyx0LmJpYXMsdC5hY3RpdmF0aW9uLHQucHJlbHVBY3RpdmF0aW9uV2VpZ2h0czt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkQ9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkREZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNvbnYzZD1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuY29udjNkRGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNvbnYzZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubWF4UG9vbD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLm1heFBvb2xCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hdmdQb29sPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYXZnUG9vbEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hdmdQb29sM2Q9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hdmdQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubWF4UG9vbDNkPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubWF4UG9vbDNkQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4scil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucmVzaGFwZT1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNhc3Q9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS50aWxlPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucGFkPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS50cmFuc3Bvc2U9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5nYXRoZXI9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmdhdGhlck5EPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc2NhdHRlck5EPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5iYXRjaFRvU3BhY2VORD1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc3BhY2VUb0JhdGNoTkQ9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyPWZ1bmN0aW9uKHQsZSxuLHIpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvcj1mdW5jdGlvbih0LGUsbixyKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5yZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYmF0Y2hOb3JtYWxpemF0aW9uPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5sb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjREPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuTFJOR3JhZD1mdW5jdGlvbih0LGUsbixyLG8sYSxpKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5tdWx0aW5vbWlhbD1mdW5jdGlvbih0LGUsbixyKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5vbmVIb3Q9ZnVuY3Rpb24odCxlLG4scil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuY3Vtc3VtPWZ1bmN0aW9uKHQsZSxuLHIpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLm5vbk1heFN1cHByZXNzaW9uPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZmZ0PWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmlmZnQ9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuY29tcGxleD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnJlYWw9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuaW1hZz1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jcm9wQW5kUmVzaXplPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5kZXB0aFRvU3BhY2U9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnNwbGl0PWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zcGFyc2VUb0RlbnNlPWZ1bmN0aW9uKHQsZSxuLHIpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmRpYWc9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZmlsbD1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLm9uZXNMaWtlPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnplcm9zTGlrZT1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5saW5zcGFjZT1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHR9KCk7ZnVuY3Rpb24gZW8odCxlKXtmb3IodmFyIG49dC5sZW5ndGgscj1bXSxvPTA7bzxuO28rKyl7dmFyIGE9bi0xLW8saT10W2FdfHwxOyhlW2UubGVuZ3RoLTEtb118fDEpPjEmJjE9PT1pJiZyLnVuc2hpZnQoYSl9cmV0dXJuIHJ9ZnVuY3Rpb24gbm8odCxlKXtmb3IodmFyIG49W10scj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgbz10W3QubGVuZ3RoLXItMV0sYT1lLmxlbmd0aC1yLTEsaT1lW2FdOyhudWxsPT1vfHwxPT09byYmaT4xKSYmbi51bnNoaWZ0KGEpfXJldHVybiBufWZ1bmN0aW9uIHJvKHQsZSl7Zm9yKHZhciBuPVtdLHI9TWF0aC5tYXgodC5sZW5ndGgsZS5sZW5ndGgpLG89MDtvPHI7bysrKXt2YXIgYT10W3QubGVuZ3RoLW8tMV07bnVsbD09YSYmKGE9MSk7dmFyIGk9ZVtlLmxlbmd0aC1vLTFdO2lmKG51bGw9PWkmJihpPTEpLDE9PT1hKW4udW5zaGlmdChpKTtlbHNlIGlmKDE9PT1pKW4udW5zaGlmdChhKTtlbHNle2lmKGEhPT1pKXRocm93IEVycm9yKFwiT3BlcmFuZHMgY291bGQgbm90IGJlIGJyb2FkY2FzdCB0b2dldGhlciB3aXRoIHNoYXBlcyBcIit0K1wiIGFuZCBcIitlK1wiLlwiKTtuLnVuc2hpZnQoYSl9fXJldHVybiBufWZ1bmN0aW9uIG9vKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWkmJihpPVwiY2hhbm5lbHNMYXN0XCIpO3ZhciBzLHU9bG8oZSksbD11WzBdLGM9dVsxXTtpZihcImNoYW5uZWxzTGFzdFwiPT09aSlzPVtsLGMsdFszXSx0WzNdXTtlbHNle2lmKFwiY2hhbm5lbHNGaXJzdFwiIT09aSl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGFGb3JtYXQgXCIraSk7cz1bbCxjLHRbMV0sdFsxXV19cmV0dXJuIGlvKHQscyxuLHIsbyxhLCExLGkpfWZ1bmN0aW9uIGFvKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWkmJihpPVwiTkRIV0NcIik7dmFyIHMsdSxsPWNvKGUpLGM9bFswXSxoPWxbMV0scD1sWzJdO2lmKFwiTkRIV0NcIj09PWkpdT1cImNoYW5uZWxzTGFzdFwiLHM9W2MsaCxwLHRbNF0sdFs0XV07ZWxzZXtpZihcIk5DREhXXCIhPT1pKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YUZvcm1hdCBcIitpKTt1PVwiY2hhbm5lbHNGaXJzdFwiLHM9W2MsaCxwLHRbMV0sdFsxXV19cmV0dXJuIHNvKHQscyxuLHIsbywhMSx1LGEpfWZ1bmN0aW9uIGlvKHQsZSxuLHIsbyxhLGkscyl7dm9pZCAwPT09aSYmKGk9ITEpLHZvaWQgMD09PXMmJihzPVwiY2hhbm5lbHNMYXN0XCIpO3ZhciB1PVstMSwtMSwtMSwtMV0sbD11WzBdLGM9dVsxXSxoPXVbMl0scD11WzNdO2lmKFwiY2hhbm5lbHNMYXN0XCI9PT1zKWw9dFswXSxjPXRbMV0saD10WzJdLHA9dFszXTtlbHNle2lmKFwiY2hhbm5lbHNGaXJzdFwiIT09cyl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGFGb3JtYXQgXCIrcyk7bD10WzBdLHA9dFsxXSxjPXRbMl0saD10WzNdfXZhciBkLHY9ZVswXSxtPWVbMV0sZz1lWzNdLHk9bG8obiksYj15WzBdLHc9eVsxXSxDPWxvKHIpLEU9Q1swXSxSPUNbMV0sST1obyh2LEUpLGs9aG8obSxSKSxOPWZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyl7dmFyIHUsbCxjO2lmKFwibnVtYmVyXCI9PXR5cGVvZiB0KXt2YXIgaD0wPT09dD9cIlZBTElEXCI6XCJOVU1CRVJcIjt1PXt0b3A6dCxib3R0b206dCxsZWZ0OnQscmlnaHQ6dCx0eXBlOmh9O3ZhciBwPWZ1bmN0aW9uKHQsZSxuLHIsbyl7bnVsbD09ciYmKHI9dW8odCxlLG4pKTt2YXIgYT10WzBdLGk9dFsxXSxzPXBvKChhLWUrMipyKS9uKzEsbyk7Zih4KHMpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgb3V0cHV0ICMgb2Ygcm93cyAoXCIrcytcIikgbXVzdCBiZSBhbiBpbnRlZ2VyLiBDaGFuZ2UgdGhlIHN0cmlkZSBhbmQvb3IgemVybyBwYWQgcGFyYW1ldGVyc1wifSk7dmFyIHU9cG8oKGktZSsyKnIpL24rMSxvKTtyZXR1cm4gZih4KHUpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgb3V0cHV0ICMgb2YgY29sdW1ucyAoXCIrdStcIikgbXVzdCBiZSBhbiBpbnRlZ2VyLiBDaGFuZ2UgdGhlIHN0cmlkZSBhbmQvb3IgemVybyBwYWQgcGFyYW1ldGVyc1wifSksW3MsdV19KFtlLG5dLGEscix0LHMpO2w9cFswXSxjPXBbMV19ZWxzZSBpZihcInNhbWVcIj09PXQpe2w9TWF0aC5jZWlsKGUvciksYz1NYXRoLmNlaWwobi9vKTt2YXIgZD1NYXRoLm1heCgwLChsLTEpKnIrYS1lKSx2PU1hdGgubWF4KDAsKGMtMSkqbytpLW4pLG09TWF0aC5mbG9vcihkLzIpLGc9ZC1tLHk9TWF0aC5mbG9vcih2LzIpLGI9di15O3U9e3RvcDptLGJvdHRvbTpnLGxlZnQ6eSxyaWdodDpiLHR5cGU6XCJTQU1FXCJ9fWVsc2V7aWYoXCJ2YWxpZFwiIT09dCl0aHJvdyBFcnJvcihcIlVua25vd24gcGFkZGluZyBwYXJhbWV0ZXI6IFwiK3QpO3U9e3RvcDowLGJvdHRvbTowLGxlZnQ6MCxyaWdodDowLHR5cGU6XCJWQUxJRFwifSxsPU1hdGguY2VpbCgoZS1hKzEpL3IpLGM9TWF0aC5jZWlsKChuLWkrMSkvbyl9cmV0dXJue3BhZEluZm86dSxvdXRIZWlnaHQ6bCxvdXRXaWR0aDpjfX0obyxjLGgsYix3LEksayxhKSxTPU4ucGFkSW5mbyxBPU4ub3V0SGVpZ2h0LFQ9Ti5vdXRXaWR0aCxEPWk/ZypwOmc7cmV0dXJuXCJjaGFubmVsc0ZpcnN0XCI9PT1zP2Q9W2wsRCxBLFRdOlwiY2hhbm5lbHNMYXN0XCI9PT1zJiYoZD1bbCxBLFQsRF0pLHtiYXRjaFNpemU6bCxkYXRhRm9ybWF0OnMsaW5IZWlnaHQ6YyxpbldpZHRoOmgsaW5DaGFubmVsczpwLG91dEhlaWdodDpBLG91dFdpZHRoOlQsb3V0Q2hhbm5lbHM6RCxwYWRJbmZvOlMsc3RyaWRlSGVpZ2h0OmIsc3RyaWRlV2lkdGg6dyxmaWx0ZXJIZWlnaHQ6dixmaWx0ZXJXaWR0aDptLGVmZmVjdGl2ZUZpbHRlckhlaWdodDpJLGVmZmVjdGl2ZUZpbHRlcldpZHRoOmssZGlsYXRpb25IZWlnaHQ6RSxkaWxhdGlvbldpZHRoOlIsaW5TaGFwZTp0LG91dFNoYXBlOmQsZmlsdGVyU2hhcGU6ZX19ZnVuY3Rpb24gc28odCxlLG4scixvLGEsaSxzKXt2b2lkIDA9PT1hJiYoYT0hMSksdm9pZCAwPT09aSYmKGk9XCJjaGFubmVsc0xhc3RcIik7dmFyIHU9Wy0xLC0xLC0xLC0xLC0xXSxsPXVbMF0sYz11WzFdLGg9dVsyXSxwPXVbM10sZD11WzRdO2lmKFwiY2hhbm5lbHNMYXN0XCI9PT1pKWw9dFswXSxjPXRbMV0saD10WzJdLHA9dFszXSxkPXRbNF07ZWxzZXtpZihcImNoYW5uZWxzRmlyc3RcIiE9PWkpdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhRm9ybWF0IFwiK2kpO2w9dFswXSxkPXRbMV0sYz10WzJdLGg9dFszXSxwPXRbNF19dmFyIHYsbT1lWzBdLGc9ZVsxXSx5PWVbMl0sYj1lWzRdLHc9Y28obiksQz13WzBdLEU9d1sxXSxSPXdbMl0sST1jbyhyKSxrPUlbMF0sTj1JWzFdLFM9SVsyXSxBPWhvKG0sayksVD1obyhnLE4pLEQ9aG8oeSxTKSxfPWZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyx1LGwsYyl7dmFyIGgscCxkLHY7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpe3ZhciBtPTA9PT10P1wiVkFMSURcIjpcIk5VTUJFUlwiO2g9e3RvcDp0LGJvdHRvbTp0LGxlZnQ6dCxyaWdodDp0LGZyb250OnQsYmFjazp0LHR5cGU6bX07dmFyIGc9ZnVuY3Rpb24odCxlLG4scixvLGEpe251bGw9PW8mJihvPXVvKHQsZSxyKSk7dmFyIGk9dFswXSxzPXRbMV0sdT10WzJdLGw9cG8oKGktZSsyKm8pL3IrMSxhKTtmKHgobCksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiBkZXB0aHMgKFwiK2wrXCIpIG11c3QgYmUgYW4gaW50ZWdlci4gQ2hhbmdlIHRoZSBzdHJpZGUgYW5kL29yIHplcm8gcGFkIHBhcmFtZXRlcnNcIn0pO3ZhciBjPXBvKChzLWUrMipvKS9yKzEsYSk7Zih4KGMpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgb3V0cHV0ICMgb2Ygcm93cyAoXCIrYytcIikgbXVzdCBiZSBhbiBpbnRlZ2VyLiBDaGFuZ2UgdGhlIHN0cmlkZSBhbmQvb3IgemVybyBwYWQgcGFyYW1ldGVyc1wifSk7dmFyIGg9cG8oKHUtZSsyKm8pL3IrMSxhKTtyZXR1cm4gZih4KGgpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgb3V0cHV0ICMgb2YgY29sdW1ucyAoXCIraCtcIikgbXVzdCBiZSBhbiBpbnRlZ2VyLiBDaGFuZ2UgdGhlIHN0cmlkZSBhbmQvb3IgemVybyBwYWQgcGFyYW1ldGVyc1wifSksW2wsYyxoLG5dfShbZSxuLHIsMV0scywxLG8sdCxjKTtwPWdbMF0sZD1nWzFdLHY9Z1syXX1lbHNlIGlmKFwic2FtZVwiPT09dCl7cD1NYXRoLmNlaWwoZS9vKSxkPU1hdGguY2VpbChuL2EpLHY9TWF0aC5jZWlsKHIvaSk7dmFyIHk9KHAtMSkqbytzLWUsYj0oZC0xKSphK3Utbix3PSh2LTEpKmkrbC1yLEM9TWF0aC5mbG9vcih5LzIpLEU9eS1DLFI9TWF0aC5mbG9vcihiLzIpLEk9Yi1SLGs9TWF0aC5mbG9vcih3LzIpLE49dy1rO2g9e3RvcDpSLGJvdHRvbTpJLGxlZnQ6ayxyaWdodDpOLGZyb250OkMsYmFjazpFLHR5cGU6XCJTQU1FXCJ9fWVsc2V7aWYoXCJ2YWxpZFwiIT09dCl0aHJvdyBFcnJvcihcIlVua25vd24gcGFkZGluZyBwYXJhbWV0ZXI6IFwiK3QpO2g9e3RvcDowLGJvdHRvbTowLGxlZnQ6MCxyaWdodDowLGZyb250OjAsYmFjazowLHR5cGU6XCJWQUxJRFwifSxwPU1hdGguY2VpbCgoZS1zKzEpL28pLGQ9TWF0aC5jZWlsKChuLXUrMSkvYSksdj1NYXRoLmNlaWwoKHItbCsxKS9pKX1yZXR1cm57cGFkSW5mbzpoLG91dERlcHRoOnAsb3V0SGVpZ2h0OmQsb3V0V2lkdGg6dn19KG8sYyxoLHAsQyxFLFIsQSxULEQscyksTz1fLnBhZEluZm8sRj1fLm91dERlcHRoLE09Xy5vdXRIZWlnaHQsQj1fLm91dFdpZHRoLFA9YT9iKmQ6YjtyZXR1cm5cImNoYW5uZWxzRmlyc3RcIj09PWk/dj1bbCxQLEYsTSxCXTpcImNoYW5uZWxzTGFzdFwiPT09aSYmKHY9W2wsRixNLEIsUF0pLHtiYXRjaFNpemU6bCxkYXRhRm9ybWF0OmksaW5EZXB0aDpjLGluSGVpZ2h0OmgsaW5XaWR0aDpwLGluQ2hhbm5lbHM6ZCxvdXREZXB0aDpGLG91dEhlaWdodDpNLG91dFdpZHRoOkIsb3V0Q2hhbm5lbHM6UCxwYWRJbmZvOk8sc3RyaWRlRGVwdGg6QyxzdHJpZGVIZWlnaHQ6RSxzdHJpZGVXaWR0aDpSLGZpbHRlckRlcHRoOm0sZmlsdGVySGVpZ2h0OmcsZmlsdGVyV2lkdGg6eSxlZmZlY3RpdmVGaWx0ZXJEZXB0aDpBLGVmZmVjdGl2ZUZpbHRlckhlaWdodDpULGVmZmVjdGl2ZUZpbHRlcldpZHRoOkQsZGlsYXRpb25EZXB0aDprLGRpbGF0aW9uSGVpZ2h0Ok4sZGlsYXRpb25XaWR0aDpTLGluU2hhcGU6dCxvdXRTaGFwZTp2LGZpbHRlclNoYXBlOmV9fWZ1bmN0aW9uIHVvKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPTEpO3ZhciBvPWhvKGUscik7cmV0dXJuIE1hdGguZmxvb3IoKHRbMF0qKG4tMSktbitvKS8yKX1mdW5jdGlvbiBsbyh0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdD9bdCx0LHRdOjI9PT10Lmxlbmd0aD9bdFswXSx0WzFdLDFdOnR9ZnVuY3Rpb24gY28odCl7cmV0dXJuXCJudW1iZXJcIj09dHlwZW9mIHQ/W3QsdCx0XTp0fWZ1bmN0aW9uIGhvKHQsZSl7cmV0dXJuIGU8PTE/dDp0Kyh0LTEpKihlLTEpfWZ1bmN0aW9uIHBvKHQsZSl7aWYoIWUpcmV0dXJuIHQ7c3dpdGNoKGUpe2Nhc2VcInJvdW5kXCI6cmV0dXJuIE1hdGgucm91bmQodCk7Y2FzZVwiY2VpbFwiOnJldHVybiBNYXRoLmNlaWwodCk7Y2FzZVwiZmxvb3JcIjpyZXR1cm4gTWF0aC5mbG9vcih0KTtkZWZhdWx0OnRocm93IG5ldyBFcnJvcihcIlVua25vd24gcm91bmRpbmdNb2RlIFwiK2UpfX1mdW5jdGlvbiBmbyh0KXt2YXIgZT1sbyh0KSxuPWVbMF0scj1lWzFdLG89ZVsyXTtyZXR1cm4gMT09PW4mJjE9PT1yJiYxPT09b31mdW5jdGlvbiB2byh0LGUpe3JldHVybiBmbyh0KXx8Zm8oZSl9ZnVuY3Rpb24gbW8odCl7aWYoXCJOSFdDXCI9PT10KXJldHVyblwiY2hhbm5lbHNMYXN0XCI7aWYoXCJOQ0hXXCI9PT10KXJldHVyblwiY2hhbm5lbHNGaXJzdFwiO3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YUZvcm1hdCBcIit0KX1mdW5jdGlvbiBnbyh0LGUsbil7aWYoXCJjb21wbGV4NjRcIj09PWUpe2lmKFwiY29tcGxleDY0XCI9PT10LmR0eXBlKXJldHVybiB0LmNsb25lKCk7dmFyIHI9VG4odC5zaGFwZSksbz10LnRvRmxvYXQoKSxhPW4uY29tcGxleChvLHIpO3JldHVybiByLmRpc3Bvc2UoKSxvLmRpc3Bvc2UoKSxhfWlmKCFEKHQuZHR5cGUsZSkpcmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7ZGF0YUlkOnQuZGF0YUlkfSxlKTtpZihcImNvbXBsZXg2NFwiPT09dC5kdHlwZSl7dmFyIGk9bi5yZWFsKHQpO2E9aS5jYXN0KGUpO3JldHVybiBpLmRpc3Bvc2UoKSxhfWlmKFwiaW50MzJcIj09PWUpcmV0dXJuIG4uaW50KHQpO2lmKFwiYm9vbFwiPT09ZSl7dmFyIHM9Q24oMCx0LmR0eXBlKTthPW4ubm90RXF1YWwodCxzKTtyZXR1cm4gcy5kaXNwb3NlKCksYX10aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiBDYXN0OiBmYWlsZWQgdG8gY2FzdCBcIit0LmR0eXBlK1wiIHRvIFwiK2UpfWZ1bmN0aW9uIHlvKHQsZSl7cmV0dXJuIGN0Lm1ha2UoZSx7ZGF0YUlkOnQuZGF0YUlkfSx0LmR0eXBlKX1mdW5jdGlvbiB4byh0LGUsbil7dmFyIHI9KGUtdCkvKG4tMSksbz1xKG4sXCJmbG9hdDMyXCIpO29bMF09dDtmb3IodmFyIGE9MTthPG8ubGVuZ3RoO2ErKylvW2FdPW9bYS0xXStyO3JldHVybiBFbihvLFwiZmxvYXQzMlwiKX12YXIgYm89T2JqZWN0LmZyZWV6ZSh7Y2FzdFRlbnNvcjpnbyxyZXNoYXBlVGVuc29yOnlvLGxpbnNwYWNlSW1wbDp4byx1cGNhc3RUeXBlOnh0LGF4ZXNBcmVJbm5lck1vc3REaW1zOmFuLGNvbWJpbmVMb2NhdGlvbnM6c24sY29tcHV0ZU91dEFuZFJlZHVjZVNoYXBlczp1bixleHBhbmRTaGFwZVRvS2VlcERpbTpsbixhc3NlcnRBeGVzQXJlSW5uZXJNb3N0RGltczpjbixnZXRBeGVzUGVybXV0YXRpb246aG4sZ2V0VW5kb0F4ZXNQZXJtdXRhdGlvbjpwbixnZXRJbm5lck1vc3RBeGVzOmZuLGdldEJyb2FkY2FzdERpbXM6ZW8sZ2V0UmVkdWN0aW9uQXhlczpubyxhc3NlcnRBbmRHZXRCcm9hZGNhc3RTaGFwZTpybyxhc3NlcnRQYXJhbXNDb25zaXN0ZW50OmRuLGNvbXB1dGVPdXRTaGFwZTp2bixjb21wdXRlUG9vbDJESW5mbzpvbyxjb21wdXRlUG9vbDNESW5mbzphbyxjb21wdXRlQ29udjJESW5mbzppbyxjb21wdXRlQ29udjNESW5mbzpzbyxjb21wdXRlRGVmYXVsdFBhZDp1byx0dXBsZVZhbHVlc0FyZU9uZTpmbyxlaXRoZXJTdHJpZGVzT3JEaWxhdGlvbnNBcmVPbmU6dm8sY29udmVydENvbnYyRERhdGFGb3JtYXQ6bW99KTtmdW5jdGlvbiB3byh0LGUpe2lmKHQubGVuZ3RoIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IG1lcmdlIHJlYWwgYW5kIGltYWcgYXJyYXlzIG9mIGRpZmZlcmVudCBsZW5ndGhzLiByZWFsOlwiK3QubGVuZ3RoK1wiLCBpbWFnOiBcIitlLmxlbmd0aCtcIi5cIik7Zm9yKHZhciBuPW5ldyBGbG9hdDMyQXJyYXkoMip0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cis9MiluW3JdPXRbci8yXSxuW3IrMV09ZVtyLzJdO3JldHVybiBufWZ1bmN0aW9uIENvKHQsZSl7cmV0dXJue3JlYWw6dFsyKmVdLGltYWc6dFsyKmUrMV19fWZ1bmN0aW9uIEVvKHQsZSxuLHIpe3RbMipyXT1lLHRbMipyKzFdPW59ZnVuY3Rpb24gUm8odCxlLG4pe3ZhciByPShuPzI6LTIpKk1hdGguUEkqKHQvZSk7cmV0dXJue3JlYWw6TWF0aC5jb3MociksaW1hZzpNYXRoLnNpbihyKX19ZnVuY3Rpb24gSW8odCxlLG4scixvKXtmb3IodmFyIGE9QXJyYXkuZnJvbShlKS5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm57c2NvcmU6dCxib3hJbmRleDplfX0pLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC5zY29yZT5vfSkuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiBlLnNjb3JlLXQuc2NvcmV9KSxpPVtdLHM9MDtzPGEubGVuZ3RoO3MrKyl7dmFyIHU9YVtzXSxsPXUuc2NvcmUsYz11LmJveEluZGV4O2lmKGw8bylicmVhaztmb3IodmFyIGg9ITEscD1pLmxlbmd0aC0xO3A+PTA7LS1wKXtpZihrbyh0LGMsaVtwXSk+PXIpe2g9ITA7YnJlYWt9fWlmKCFoJiYoaS5wdXNoKGMpLGkubGVuZ3RoPj1uKSlicmVha31yZXR1cm4gRW4oaSxcImludDMyXCIpfWZ1bmN0aW9uIGtvKHQsZSxuKXt2YXIgcj10LnN1YmFycmF5KDQqZSw0KmUrNCksbz10LnN1YmFycmF5KDQqbiw0Km4rNCksYT1NYXRoLm1pbihyWzBdLHJbMl0pLGk9TWF0aC5taW4oclsxXSxyWzNdKSxzPU1hdGgubWF4KHJbMF0sclsyXSksdT1NYXRoLm1heChyWzFdLHJbM10pLGw9TWF0aC5taW4ob1swXSxvWzJdKSxjPU1hdGgubWluKG9bMV0sb1szXSksaD1NYXRoLm1heChvWzBdLG9bMl0pLHA9TWF0aC5tYXgob1sxXSxvWzNdKSxmPShzLWEpKih1LWkpLGQ9KGgtbCkqKHAtYyk7aWYoZjw9MHx8ZDw9MClyZXR1cm4gMDt2YXIgdj1NYXRoLm1heChhLGwpLG09TWF0aC5tYXgoaSxjKSxnPU1hdGgubWluKHMsaCkseT1NYXRoLm1pbih1LHApLHg9TWF0aC5tYXgoZy12LDApKk1hdGgubWF4KHktbSwwKTtyZXR1cm4geC8oZitkLXgpfWZ1bmN0aW9uIE5vKHQsZSxuKXt2YXIgcj1uZXcgQXJyYXkodC5yYW5rKS5maWxsKDApLG89dC5zaGFwZS5zbGljZSgpO3JldHVybiBlLm1hcChmdW5jdGlvbihlKXtvW25dPWU7dmFyIGE9dC5zbGljZShyLG8pO3JldHVybiByW25dKz1lLGF9KX1mdW5jdGlvbiBTbyh0LGUpe2Zvcih2YXIgbj1uZXcgQXJyYXkodC5yYW5rKSxyPTA7cjxuLmxlbmd0aDtyKyspbltyXT10LnNoYXBlW3JdKmVbcl07dmFyIG89dHIobix0LmR0eXBlKTtmb3Iocj0wO3I8by52YWx1ZXMubGVuZ3RoOysrcil7Zm9yKHZhciBhPW8uaW5kZXhUb0xvYyhyKSxpPW5ldyBBcnJheSh0LnJhbmspLHM9MDtzPGkubGVuZ3RoO3MrKylpW3NdPWFbc10ldC5zaGFwZVtzXTt2YXIgdT10LmxvY1RvSW5kZXgoaSk7by52YWx1ZXNbcl09dC52YWx1ZXNbdV19cmV0dXJuIG8udG9UZW5zb3IoKX1mdW5jdGlvbiBBbyh0LGUsbixyLG8pe2Zvcih2YXIgYT1lW2UubGVuZ3RoLTFdLGk9W3QubGVuZ3RoL2EsYV0scz1pWzBdLHU9aVsxXSxsPU4obixzKnIpLGM9TihcImludDMyXCIscypyKSxoPTA7aDxzO2grKyl7Zm9yKHZhciBwPWgqdSxmPXQuc3ViYXJyYXkocCxwK3UpLGQ9W10sdj0wO3Y8Zi5sZW5ndGg7disrKWQucHVzaCh7dmFsdWU6Zlt2XSxpbmRleDp2fSk7ZC5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUudmFsdWUtdC52YWx1ZX0pO3ZhciBtPWgqcixnPWwuc3ViYXJyYXkobSxtK3IpLHk9Yy5zdWJhcnJheShtLG0rcik7Zm9yKHY9MDt2PHI7disrKWdbdl09ZFt2XS52YWx1ZSx5W3ZdPWRbdl0uaW5kZXh9dmFyIHg9ZS5zbGljZSgpO3JldHVybiB4W3gubGVuZ3RoLTFdPXIsW2JuKGwseCxuKSxibihjLHgsXCJpbnQzMlwiKV19ZnVuY3Rpb24gVG8odCxlKXtmb3IodmFyIG49W10scj0wO3I8ZS5sZW5ndGg7cisrKWVbcl0mJm4ucHVzaChyKTt2YXIgbz10cih0LFwiaW50MzJcIiksYT10cihbbi5sZW5ndGgsdC5sZW5ndGhdLFwiaW50MzJcIik7Zm9yKHI9MDtyPG4ubGVuZ3RoO3IrKyl7dmFyIGk9by5pbmRleFRvTG9jKG5bcl0pLHM9cip0Lmxlbmd0aDthLnZhbHVlcy5zZXQoaSxzKX1yZXR1cm4gYS50b1RlbnNvcigpfXZhciBEbz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudmFyaWFibGVOYW1lcz1lLm1hcChmdW5jdGlvbih0LGUpe3JldHVyblwiVFwiK2V9KTt2YXIgbj1bXTt0aGlzLnZhcmlhYmxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbih0KXtuLnB1c2goXCJmbG9hdCB2XCIrdCtcIiA9IGdldFwiK3QrXCJBdE91dENvb3JkcygpO1wiKX0pO3ZhciByPXRoaXMudmFyaWFibGVOYW1lcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuXCJ2XCIrdH0pLmpvaW4oXCIgKyBcIik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK24uam9pbihcIlxcbiAgICAgICAgXCIpK1wiXFxuXFxuICAgICAgICBmbG9hdCByZXN1bHQgPSBcIityK1wiO1xcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksX289ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlKXt0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnZhcmlhYmxlTmFtZXM9ZS5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm5cIlRcIitlfSk7dmFyIG49W107dGhpcy52YXJpYWJsZU5hbWVzLmZvckVhY2goZnVuY3Rpb24odCl7bi5wdXNoKFwidmVjNCB2XCIrdCtcIiA9IGdldFwiK3QrXCJBdE91dENvb3JkcygpO1wiKX0pO3ZhciByPXRoaXMudmFyaWFibGVOYW1lcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuXCJ2XCIrdH0pLmpvaW4oXCIgKyBcIik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK24uam9pbihcIlxcbiAgICAgICAgXCIpK1wiXFxuXFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IFwiK3IrXCI7XFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxPbz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07dmFyIHI9dC53aW5kb3dTaXplLG89dC5iYXRjaFNpemUsYT10LmluU2l6ZSxpPU1hdGguY2VpbChhL3IpO258fHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwiYmVzdEluZGljZXNBXCIpLHRoaXMub3V0cHV0U2hhcGU9W28saV07dmFyIHM9XCJtYXhcIj09PWU/XCI+XCI6XCI8XCIsdT1uP1wiaW5PZmZzZXQgKyBpO1wiOlwicm91bmQoZ2V0QmVzdEluZGljZXNBKGJhdGNoLCBpbk9mZnNldCArIGkpKTtcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgb3V0SWR4ID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGluT2Zmc2V0ID0gb3V0SWR4ICogXCIrcitcIjtcXG5cXG4gICAgICAgIGludCBiZXN0SW5kZXggPSBpbk9mZnNldDtcXG4gICAgICAgIGZsb2F0IGJlc3RWYWx1ZSA9IGdldEEoYmF0Y2gsIGJlc3RJbmRleCk7XFxuXFxuICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK3IrXCI7IGkrKykge1xcbiAgICAgICAgICBpbnQgaW5JZHggPSBcIit1K1wiO1xcbiAgICAgICAgICBmbG9hdCBjYW5kaWRhdGUgPSBnZXRBKGJhdGNoLCBpbklkeCk7XFxuICAgICAgICAgIGlmIChjYW5kaWRhdGUgXCIrcytcIiBiZXN0VmFsdWUpIHtcXG4gICAgICAgICAgICBiZXN0VmFsdWUgPSBjYW5kaWRhdGU7XFxuICAgICAgICAgICAgYmVzdEluZGV4ID0gaW5JZHg7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChmbG9hdChiZXN0SW5kZXgpKTtcXG4gICAgICB9XFxuICAgIFwifX0oKTtmdW5jdGlvbiBGbyh0LGUpe3JldHVybltcInhcIixcInlcIixcInpcIixcIndcIixcInVcIixcInZcIl0uc2xpY2UoMCxlKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHQrXCIuXCIrZX0pfWZ1bmN0aW9uIE1vKHQsZSl7cmV0dXJuIDE9PT1lP1t0XTpGbyh0LGUpfWZ1bmN0aW9uIEJvKCl7dmFyIHQsZSxuLHIsbyxhLHMsdSxsLGM7cmV0dXJuIDI9PT1pLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIik/KHQ9XCIjdmVyc2lvbiAzMDAgZXNcIixlPVwiaW5cIixuPVwib3V0XCIscj1cImluXCIsbz1cInRleHR1cmVcIixhPVwib3V0cHV0Q29sb3JcIixzPVwib3V0IHZlYzQgb3V0cHV0Q29sb3I7XCIsdT1cIlxcbiAgICAgIGJvb2wgaXNuYW5fY3VzdG9tKGZsb2F0IHZhbCkge1xcbiAgICAgICAgcmV0dXJuICh2YWwgPiAwLjAgfHwgdmFsIDwgMC4wKSA/IGZhbHNlIDogdmFsICE9IDAuMDtcXG4gICAgICB9XFxuXFxuICAgICAgYnZlYzQgaXNuYW5fY3VzdG9tKHZlYzQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gYnZlYzQoaXNuYW5fY3VzdG9tKHZhbC54KSxcXG4gICAgICAgICAgaXNuYW5fY3VzdG9tKHZhbC55KSwgaXNuYW5fY3VzdG9tKHZhbC56KSwgaXNuYW5fY3VzdG9tKHZhbC53KSk7XFxuICAgICAgfVxcblxcbiAgICAgICNkZWZpbmUgaXNuYW4odmFsdWUpIGlzbmFuX2N1c3RvbSh2YWx1ZSlcXG4gICAgXCIsbD1cIlwiLGM9XCJcXG4gICAgICAjZGVmaW5lIHJvdW5kKHZhbHVlKSBuZXdSb3VuZCh2YWx1ZSlcXG4gICAgICBpbnQgbmV3Um91bmQoZmxvYXQgdmFsdWUpIHtcXG4gICAgICAgIHJldHVybiBpbnQoZmxvb3IodmFsdWUgKyAwLjUpKTtcXG4gICAgICB9XFxuXFxuICAgICAgaXZlYzQgbmV3Um91bmQodmVjNCB2YWx1ZSkge1xcbiAgICAgICAgcmV0dXJuIGl2ZWM0KGZsb29yKHZhbHVlICsgdmVjNCgwLjUpKSk7XFxuICAgICAgfVxcbiAgICBcIik6KHQ9XCJcIixlPVwiYXR0cmlidXRlXCIsbj1cInZhcnlpbmdcIixyPVwidmFyeWluZ1wiLG89XCJ0ZXh0dXJlMkRcIixhPVwiZ2xfRnJhZ0NvbG9yXCIscz1cIlwiLHU9XCJcXG4gICAgICAjZGVmaW5lIGlzbmFuKHZhbHVlKSBpc25hbl9jdXN0b20odmFsdWUpXFxuICAgICAgYm9vbCBpc25hbl9jdXN0b20oZmxvYXQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gKHZhbCA+IDAuIHx8IHZhbCA8IDEuIHx8IHZhbCA9PSAwLikgPyBmYWxzZSA6IHRydWU7XFxuICAgICAgfVxcbiAgICAgIGJ2ZWM0IGlzbmFuX2N1c3RvbSh2ZWM0IHZhbCkge1xcbiAgICAgICAgcmV0dXJuIGJ2ZWM0KGlzbmFuKHZhbC54KSwgaXNuYW4odmFsLnkpLCBpc25hbih2YWwueiksIGlzbmFuKHZhbC53KSk7XFxuICAgICAgfVxcbiAgICBcIixsPVwiXFxuICAgICAgdW5pZm9ybSBmbG9hdCBJTkZJTklUWTtcXG5cXG4gICAgICBib29sIGlzaW5mKGZsb2F0IHZhbCkge1xcbiAgICAgICAgcmV0dXJuIGFicyh2YWwpID09IElORklOSVRZO1xcbiAgICAgIH1cXG4gICAgICBidmVjNCBpc2luZih2ZWM0IHZhbCkge1xcbiAgICAgICAgcmV0dXJuIGVxdWFsKGFicyh2YWwpLCB2ZWM0KElORklOSVRZKSk7XFxuICAgICAgfVxcbiAgICBcIixjPVwiXFxuICAgICAgaW50IHJvdW5kKGZsb2F0IHZhbHVlKSB7XFxuICAgICAgICByZXR1cm4gaW50KGZsb29yKHZhbHVlICsgMC41KSk7XFxuICAgICAgfVxcblxcbiAgICAgIGl2ZWM0IHJvdW5kKHZlYzQgdmFsdWUpIHtcXG4gICAgICAgIHJldHVybiBpdmVjNChmbG9vcih2YWx1ZSArIHZlYzQoMC41KSkpO1xcbiAgICAgIH1cXG4gICAgXCIpLHt2ZXJzaW9uOnQsYXR0cmlidXRlOmUsdmFyeWluZ1ZzOm4sdmFyeWluZ0ZzOnIsdGV4dHVyZTJEOm8sb3V0cHV0OmEsZGVmaW5lT3V0cHV0OnMsZGVmaW5lU3BlY2lhbE5hTjp1LGRlZmluZVNwZWNpYWxJbmY6bCxkZWZpbmVSb3VuZDpjfX1mdW5jdGlvbiBQbyh0LGUsbil7dm9pZCAwPT09biYmKG49XCJpbmRleFwiKTt2YXIgcj1WKGUpO3JldHVybiByLm1hcChmdW5jdGlvbihlLG8pe3JldHVyblwiaW50IFwiK3Rbb10rXCIgPSBcIituK1wiIC8gXCIrZStcIjsgXCIrKG89PT1yLmxlbmd0aC0xP1wiaW50IFwiK3RbbysxXStcIiA9IFwiK24rXCIgLSBcIit0W29dK1wiICogXCIrZTpcImluZGV4IC09IFwiK3Rbb10rXCIgKiBcIitlKStcIjtcIn0pLmpvaW4oXCJcIil9ZnVuY3Rpb24gTG8odCl7dmFyIGU9Vih0KS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudG9TdHJpbmcoKX0pO3JldHVyblwiXFxuICBpbnQgZ2V0RmxhdEluZGV4KGl2ZWMzIGNvb3Jkcykge1xcbiAgICByZXR1cm4gY29vcmRzLnggKiBcIitlWzBdK1wiICsgY29vcmRzLnkgKiBcIitlWzFdK1wiICsgY29vcmRzLno7XFxuICB9XFxuXCJ9dmFyIFdvPVwiXFxuICBjb25zdCBmbG9hdCBGTE9BVF9NQVggPSAxLjcwMTQxMTg0ZTM4O1xcbiAgY29uc3QgZmxvYXQgRkxPQVRfTUlOID0gMS4xNzU0OTQzNWUtMzg7XFxuXFxuICBsb3dwIHZlYzQgZW5jb2RlX2Zsb2F0KGhpZ2hwIGZsb2F0IHYpIHtcXG4gICAgaWYgKGlzbmFuKHYpKSB7XFxuICAgICAgcmV0dXJuIHZlYzQoMjU1LCAyNTUsIDI1NSwgMjU1KTtcXG4gICAgfVxcblxcbiAgICBoaWdocCBmbG9hdCBhdiA9IGFicyh2KTtcXG5cXG4gICAgaWYoYXYgPCBGTE9BVF9NSU4pIHtcXG4gICAgICByZXR1cm4gdmVjNCgwLjAsIDAuMCwgMC4wLCAwLjApO1xcbiAgICB9IGVsc2UgaWYodiA+IEZMT0FUX01BWCkge1xcbiAgICAgIHJldHVybiB2ZWM0KDAuMCwgMC4wLCAxMjguMCwgMTI3LjApIC8gMjU1LjA7XFxuICAgIH0gZWxzZSBpZih2IDwgLUZMT0FUX01BWCkge1xcbiAgICAgIHJldHVybiB2ZWM0KDAuMCwgMC4wLCAgMTI4LjAsIDI1NS4wKSAvIDI1NS4wO1xcbiAgICB9XFxuXFxuICAgIGhpZ2hwIHZlYzQgYyA9IHZlYzQoMCwwLDAsMCk7XFxuXFxuICAgIGhpZ2hwIGZsb2F0IGUgPSBmbG9vcihsb2cyKGF2KSk7XFxuICAgIGhpZ2hwIGZsb2F0IG0gPSBleHAyKGZyYWN0KGxvZzIoYXYpKSkgLSAxLjA7XFxuXFxuICAgIGNbMl0gPSBmbG9vcigxMjguMCAqIG0pO1xcbiAgICBtIC09IGNbMl0gLyAxMjguMDtcXG4gICAgY1sxXSA9IGZsb29yKDMyNzY4LjAgKiBtKTtcXG4gICAgbSAtPSBjWzFdIC8gMzI3NjguMDtcXG4gICAgY1swXSA9IGZsb29yKDgzODg2MDguMCAqIG0pO1xcblxcbiAgICBoaWdocCBmbG9hdCBlYmlhcyA9IGUgKyAxMjcuMDtcXG4gICAgY1szXSA9IGZsb29yKGViaWFzIC8gMi4wKTtcXG4gICAgZWJpYXMgLT0gY1szXSAqIDIuMDtcXG4gICAgY1syXSArPSBmbG9vcihlYmlhcykgKiAxMjguMDtcXG5cXG4gICAgY1szXSArPSAxMjguMCAqIHN0ZXAoMC4wLCAtdik7XFxuXFxuICAgIHJldHVybiBjIC8gMjU1LjA7XFxuICB9XFxuXCI7ZnVuY3Rpb24gVW8odCxlLG4scil7dmFyIG89W107dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPWcodC5zaGFwZUluZm8ubG9naWNhbFNoYXBlKTt0LnNoYXBlSW5mby5pc1VuaWZvcm0/by5wdXNoKFwidW5pZm9ybSBmbG9hdCBcIit0Lm5hbWUrKGU+MT9cIltcIitlK1wiXVwiOlwiXCIpK1wiO1wiKTooby5wdXNoKFwidW5pZm9ybSBzYW1wbGVyMkQgXCIrdC5uYW1lK1wiO1wiKSxvLnB1c2goXCJ1bmlmb3JtIGludCBvZmZzZXRcIit0Lm5hbWUrXCI7XCIpKX0pO3ZhciBhLGkscz1vLmpvaW4oXCJcXG5cIiksdT10Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1cIlwiO3IrPW4/em8odCk6Vm8odCk7dmFyIG89dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLGE9ZS5sb2dpY2FsU2hhcGU7by5sZW5ndGg8PWEubGVuZ3RoJiYocis9bj9mdW5jdGlvbih0LGUpe3ZhciBuLHI9dC5uYW1lLG89ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStyLnNsaWNlKDEpLGE9XCJnZXRcIitvK1wiQXRPdXRDb29yZHNcIixpPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZS5sZW5ndGgscz1lLmxvZ2ljYWxTaGFwZS5sZW5ndGgsdT1lbyh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsZS5sb2dpY2FsU2hhcGUpLGw9WG8ocyksYz1zLWksaD1bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdO249MD09PWk/XCJcIjpzPDImJnUubGVuZ3RoPj0xP1wiY29vcmRzID0gMDtcIjp1Lm1hcChmdW5jdGlvbih0KXtyZXR1cm5cImNvb3Jkcy5cIitoW3QrY10rXCIgPSAwO1wifSkuam9pbihcIlxcblwiKTt2YXIgcD1cIlwiO3A9czwyJiZpPjA/XCJjb29yZHNcIjp0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJjb29yZHMuXCIraFtlK2NdfSkuam9pbihcIiwgXCIpO3ZhciBmPVwicmV0dXJuIG91dHB1dFZhbHVlO1wiLGQ9MT09PWcodC5zaGFwZUluZm8ubG9naWNhbFNoYXBlKSx2PTE9PT1nKGUubG9naWNhbFNoYXBlKTtpZigxIT09aXx8ZHx8dil7aWYoZCYmIXYpZj0xPT09cz9cIlxcbiAgICAgICAgcmV0dXJuIHZlYzQob3V0cHV0VmFsdWUueCwgb3V0cHV0VmFsdWUueCwgMC4sIDAuKTtcXG4gICAgICBcIjpcIlxcbiAgICAgICAgcmV0dXJuIHZlYzQob3V0cHV0VmFsdWUueCk7XFxuICAgICAgXCI7ZWxzZSBpZih1Lmxlbmd0aCl7dmFyIG09aS0yLHk9aS0xO3UuaW5kZXhPZihtKT4tMSYmdS5pbmRleE9mKHkpPi0xP2Y9XCJyZXR1cm4gdmVjNChvdXRwdXRWYWx1ZS54KTtcIjp1LmluZGV4T2YobSk+LTE/Zj1cInJldHVybiB2ZWM0KG91dHB1dFZhbHVlLngsIG91dHB1dFZhbHVlLnksIG91dHB1dFZhbHVlLngsIG91dHB1dFZhbHVlLnkpO1wiOnUuaW5kZXhPZih5KT4tMSYmKGY9XCJyZXR1cm4gdmVjNChvdXRwdXRWYWx1ZS54eCwgb3V0cHV0VmFsdWUuenopO1wiKX19ZWxzZSBmPVwiXFxuICAgICAgcmV0dXJuIHZlYzQob3V0cHV0VmFsdWUueHksIG91dHB1dFZhbHVlLnh5KTtcXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgdmVjNCBcIithK1wiKCkge1xcbiAgICAgIFwiK2wrXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgXCIrbitcIlxcbiAgICAgIHZlYzQgb3V0cHV0VmFsdWUgPSBnZXRcIitvK1wiKFwiK3ArXCIpO1xcbiAgICAgIFwiK2YrXCJcXG4gICAgfVxcbiAgXCJ9KHQsZSk6ZnVuY3Rpb24odCxlKXt2YXIgbj10Lm5hbWUscj1uLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSksbz1cImdldFwiK3IrXCJBdE91dENvb3Jkc1wiLGE9ZS50ZXhTaGFwZSxpPXQuc2hhcGVJbmZvLnRleFNoYXBlLHM9dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLmxlbmd0aCx1PWUubG9naWNhbFNoYXBlLmxlbmd0aDtpZighdC5zaGFwZUluZm8uaXNVbmlmb3JtJiZzPT09dSYmbnVsbD09dC5zaGFwZUluZm8uZmxhdE9mZnNldCYmeShpLGEpKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrbytcIigpIHtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHJlc3VsdFVWKTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciBsLGM9WG8odSksaD1lbyh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsZS5sb2dpY2FsU2hhcGUpLHA9dS1zLGY9W1wieFwiLFwieVwiLFwielwiLFwid1wiLFwidVwiLFwidlwiXTtsPTA9PT1zP1wiXCI6dTwyJiZoLmxlbmd0aD49MT9cImNvb3JkcyA9IDA7XCI6aC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuXCJjb29yZHMuXCIrZlt0K3BdK1wiID0gMDtcIn0pLmpvaW4oXCJcXG5cIik7dmFyIGQ9XCJcIjtkPXU8MiYmcz4wP1wiY29vcmRzXCI6dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLm1hcChmdW5jdGlvbih0LGUpe3JldHVyblwiY29vcmRzLlwiK2ZbZStwXX0pLmpvaW4oXCIsIFwiKTtyZXR1cm5cIlxcbiAgICBmbG9hdCBcIitvK1wiKCkge1xcbiAgICAgIFwiK2MrXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgXCIrbCtcIlxcbiAgICAgIHJldHVybiBnZXRcIityK1wiKFwiK2QrXCIpO1xcbiAgICB9XFxuICBcIn0odCxlKSk7cmV0dXJuIHJ9KHQsZSxyKX0pLmpvaW4oXCJcXG5cIiksbD1lLnRleFNoYXBlLGM9Qm8oKSxoPWZ1bmN0aW9uKHQpe3JldHVyblwiXFxuICAgIGZsb2F0IHNhbXBsZVRleHR1cmUoc2FtcGxlcjJEIHRleHR1cmVTYW1wbGVyLCB2ZWMyIHV2KSB7XFxuICAgICAgcmV0dXJuIFwiK3QudGV4dHVyZTJEK1wiKHRleHR1cmVTYW1wbGVyLCB1dikucjtcXG4gICAgfVxcbiAgXCJ9KGMpLHA9ZnVuY3Rpb24odCl7cmV0dXJuIHQudmVyc2lvbitcIlxcbiAgICBwcmVjaXNpb24gaGlnaHAgZmxvYXQ7XFxuICAgIHByZWNpc2lvbiBoaWdocCBpbnQ7XFxuICAgIHByZWNpc2lvbiBoaWdocCBzYW1wbGVyMkQ7XFxuICAgIFwiK3QudmFyeWluZ0ZzK1wiIHZlYzIgcmVzdWx0VVY7XFxuICAgIFwiK3QuZGVmaW5lT3V0cHV0K1wiXFxuICAgIGNvbnN0IHZlYzIgaGFsZkNSID0gdmVjMigwLjUsIDAuNSk7XFxuXFxuICAgIHN0cnVjdCBpdmVjNVxcbiAgICB7XFxuICAgICAgaW50IHg7XFxuICAgICAgaW50IHk7XFxuICAgICAgaW50IHo7XFxuICAgICAgaW50IHc7XFxuICAgICAgaW50IHU7XFxuICAgIH07XFxuXFxuICAgIHN0cnVjdCBpdmVjNlxcbiAgICB7XFxuICAgICAgaW50IHg7XFxuICAgICAgaW50IHk7XFxuICAgICAgaW50IHo7XFxuICAgICAgaW50IHc7XFxuICAgICAgaW50IHU7XFxuICAgICAgaW50IHY7XFxuICAgIH07XFxuXFxuICAgIHVuaWZvcm0gZmxvYXQgTkFOO1xcbiAgICBcIit0LmRlZmluZVNwZWNpYWxOYU4rXCJcXG4gICAgXCIrdC5kZWZpbmVTcGVjaWFsSW5mK1wiXFxuICAgIFwiK3QuZGVmaW5lUm91bmQrXCJcXG5cXG4gICAgaW50IGltb2QoaW50IHgsIGludCB5KSB7XFxuICAgICAgcmV0dXJuIHggLSB5ICogKHggLyB5KTtcXG4gICAgfVxcblxcbiAgICBpbnQgaWRpdihpbnQgYSwgaW50IGIsIGZsb2F0IHNpZ24pIHtcXG4gICAgICBpbnQgcmVzID0gYSAvIGI7XFxuICAgICAgaW50IG1vZCA9IGltb2QoYSwgYik7XFxuICAgICAgaWYgKHNpZ24gPCAwLiAmJiBtb2QgIT0gMCkge1xcbiAgICAgICAgcmVzIC09IDE7XFxuICAgICAgfVxcbiAgICAgIHJldHVybiByZXM7XFxuICAgIH1cXG5cXG4gICAgLy9CYXNlZCBvbiB0aGUgd29yayBvZiBEYXZlIEhvc2tpbnNcXG4gICAgLy9odHRwczovL3d3dy5zaGFkZXJ0b3kuY29tL3ZpZXcvNGRqU1JXXFxuICAgICNkZWZpbmUgSEFTSFNDQUxFMSA0NDMuODk3NVxcbiAgICBmbG9hdCByYW5kb20oZmxvYXQgc2VlZCl7XFxuICAgICAgdmVjMiBwID0gcmVzdWx0VVYgKiBzZWVkO1xcbiAgICAgIHZlYzMgcDMgID0gZnJhY3QodmVjMyhwLnh5eCkgKiBIQVNIU0NBTEUxKTtcXG4gICAgICBwMyArPSBkb3QocDMsIHAzLnl6eCArIDE5LjE5KTtcXG4gICAgICByZXR1cm4gZnJhY3QoKHAzLnggKyBwMy55KSAqIHAzLnopO1xcbiAgICB9XFxuXFxuICAgIFwiK0dvK1wiXFxuICAgIFwiK0hvK1wiXFxuICAgIFwiK3FvK1wiXFxuICBcIn0oYyk7cmV0dXJuIGUuaXNQYWNrZWQ/KGE9ZnVuY3Rpb24odCxlKXtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuICBcIjtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dmFyIG49W01hdGguY2VpbChlWzBdLzIpLE1hdGguY2VpbChlWzFdLzIpXTtpZigxPT09blswXSlyZXR1cm5cIlxcbiAgICAgIGludCBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICByZXR1cm4gMiAqIGludChyZXN1bHRVVi54ICogXCIrblsxXStcIi4wKTtcXG4gICAgICB9XFxuICAgIFwiO2lmKDE9PT1uWzFdKXJldHVyblwiXFxuICAgICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiAyICogaW50KHJlc3VsdFVWLnkgKiBcIituWzBdK1wiLjApO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrblswXStcIiwgXCIrblsxXStcIikpO1xcbiAgICAgIHJldHVybiAyICogKHJlc1RleFJDLnggKiBcIituWzFdK1wiICsgcmVzVGV4UkMueSk7XFxuICAgIH1cXG4gIFwifSgwLGUpO2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1bTWF0aC5jZWlsKGVbMF0vMiksTWF0aC5jZWlsKGVbMV0vMildO2lmKHkodCxlKSlyZXR1cm5cIlxcbiAgICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiAyICogaXZlYzIocmVzdWx0VVYueXggKiB2ZWMyKFwiK25bMF0rXCIsIFwiK25bMV0rXCIpKTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciByPU1hdGguY2VpbCh0WzFdLzIpO3JldHVyblwiXFxuICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrblswXStcIiwgXCIrblsxXStcIikpO1xcblxcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIituWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgICBpbnQgciA9IDIgKiAoaW5kZXggLyBcIityK1wiKTtcXG4gICAgICBpbnQgYyA9IGltb2QoaW5kZXgsIFwiK3IrXCIpICogMjtcXG5cXG4gICAgICByZXR1cm4gaXZlYzIociwgYyk7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgMzpyZXR1cm4gbj10LHI9ZSxvPVtNYXRoLmNlaWwoclswXS8yKSxNYXRoLmNlaWwoclsxXS8yKV0sYT1NYXRoLmNlaWwoblsyXS8yKSxpPWEqTWF0aC5jZWlsKG5bMV0vMiksXCJcXG4gICAgaXZlYzMgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitvWzBdK1wiLCBcIitvWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK29bMV0rXCIgKyByZXNUZXhSQy55O1xcblxcbiAgICAgIGludCBiID0gaW5kZXggLyBcIitpK1wiO1xcbiAgICAgIGluZGV4IC09IGIgKiBcIitpK1wiO1xcblxcbiAgICAgIGludCByID0gMiAqIChpbmRleCAvIFwiK2ErXCIpO1xcbiAgICAgIGludCBjID0gaW1vZChpbmRleCwgXCIrYStcIikgKiAyO1xcblxcbiAgICAgIHJldHVybiBpdmVjMyhiLCByLCBjKTtcXG4gICAgfVxcbiAgXCI7ZGVmYXVsdDpyZXR1cm4gZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W01hdGguY2VpbChlWzBdLzIpLE1hdGguY2VpbChlWzFdLzIpXSxyPU1hdGguY2VpbCh0W3QubGVuZ3RoLTFdLzIpLG89cipNYXRoLmNlaWwodFt0Lmxlbmd0aC0yXS8yKSxhPW8saT1cIlwiLHM9XCJiLCByLCBjXCIsdT0yO3U8dC5sZW5ndGgtMTt1KyspYSo9dFt0Lmxlbmd0aC11LTFdLGk9XCJcXG4gICAgICBpbnQgYlwiK3UrXCIgPSBpbmRleCAvIFwiK2ErXCI7XFxuICAgICAgaW5kZXggLT0gYlwiK3UrXCIgKiBcIithK1wiO1xcbiAgICBcIitpLHM9XCJiXCIrdStcIiwgXCIrcztyZXR1cm5cIlxcbiAgICBpdmVjXCIrdC5sZW5ndGgrXCIgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIituWzBdK1wiLCBcIituWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK25bMV0rXCIgKyByZXNUZXhSQy55O1xcblxcbiAgICAgIFwiK2krXCJcXG5cXG4gICAgICBpbnQgYiA9IGluZGV4IC8gXCIrbytcIjtcXG4gICAgICBpbmRleCAtPSBiICogXCIrbytcIjtcXG5cXG4gICAgICBpbnQgciA9IDIgKiAoaW5kZXggLyBcIityK1wiKTtcXG4gICAgICBpbnQgYyA9IGltb2QoaW5kZXgsIFwiK3IrXCIpICogMjtcXG5cXG4gICAgICByZXR1cm4gaXZlY1wiK3QubGVuZ3RoK1wiKFwiK3MrXCIpO1xcbiAgICB9XFxuICBcIn0odCxlKX12YXIgbixyLG8sYSxpfShlLmxvZ2ljYWxTaGFwZSxsKSxpPWZ1bmN0aW9uKHQpe3JldHVyblwiXFxuICAgIHZvaWQgc2V0T3V0cHV0KHZlYzQgdmFsKSB7XFxuICAgICAgXCIrdC5vdXRwdXQrXCIgPSB2YWw7XFxuICAgIH1cXG4gIFwifShjKSk6KGE9ZnVuY3Rpb24odCxlKXtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuICBcIjtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoMT09PWVbMF0pcmV0dXJuXCJcXG4gICAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgICAgcmV0dXJuIGludChyZXN1bHRVVi54ICogXCIrZVsxXStcIi4wKTtcXG4gICAgICB9XFxuICAgIFwiO2lmKDE9PT1lWzFdKXJldHVyblwiXFxuICAgICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiBpbnQocmVzdWx0VVYueSAqIFwiK2VbMF0rXCIuMCk7XFxuICAgICAgfVxcbiAgICBcIjtyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgcmV0dXJuIHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgfVxcbiAgXCJ9KDAsZSk7Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0LGUpe2lmKHkodCxlKSlyZXR1cm5cIlxcbiAgICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiBpdmVjMihyZXN1bHRVVi55eCAqIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PXRbMV0pcmV0dXJuXCJcXG4gICAgICBpdmVjMiBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgICByZXR1cm4gaXZlYzIoaW5kZXgsIDApO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PXRbMF0pcmV0dXJuXCJcXG4gICAgICBpdmVjMiBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgICByZXR1cm4gaXZlYzIoMCwgaW5kZXgpO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgaXZlYzIgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK2VbMV0rXCIgKyByZXNUZXhSQy55O1xcbiAgICAgIGludCByID0gaW5kZXggLyBcIit0WzFdK1wiO1xcbiAgICAgIGludCBjID0gaW5kZXggLSByICogXCIrdFsxXStcIjtcXG4gICAgICByZXR1cm4gaXZlYzIociwgYyk7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgMzpyZXR1cm4gbj1lLHI9UG8oW1wiclwiLFwiY1wiLFwiZFwiXSx0KSxcIlxcbiAgICBpdmVjMyBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK25bMF0rXCIsIFwiK25bMV0rXCIpKTtcXG4gICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrblsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgXCIrcitcIlxcbiAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgfVxcbiAgXCI7Y2FzZSA0OnJldHVybiBmdW5jdGlvbih0LGUpe3ZhciBuPVBvKFtcInJcIixcImNcIixcImRcIixcImQyXCJdLHQpO3JldHVyblwiXFxuICAgIGl2ZWM0IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgICBcIituK1wiXFxuICAgICAgcmV0dXJuIGl2ZWM0KHIsIGMsIGQsIGQyKTtcXG4gICAgfVxcbiAgXCJ9KHQsZSk7Y2FzZSA1OnJldHVybiBmdW5jdGlvbih0LGUpe3ZhciBuPVBvKFtcInJcIixcImNcIixcImRcIixcImQyXCIsXCJkM1wiXSx0KTtyZXR1cm5cIlxcbiAgICBpdmVjNSBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqIHZlYzIoXCIrZVswXStcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiK2VbMV0rXCIpKTtcXG5cXG4gICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuXFxuICAgICAgXCIrbitcIlxcblxcbiAgICAgIGl2ZWM1IG91dFNoYXBlID0gaXZlYzUociwgYywgZCwgZDIsIGQzKTtcXG4gICAgICByZXR1cm4gb3V0U2hhcGU7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgNjpyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1QbyhbXCJyXCIsXCJjXCIsXCJkXCIsXCJkMlwiLFwiZDNcIixcImQ0XCJdLHQpO3JldHVyblwiXFxuICAgIGl2ZWM2IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG5cXG4gICAgICBcIituK1wiXFxuXFxuICAgICAgaXZlYzYgcmVzdWx0ID0gaXZlYzYociwgYywgZCwgZDIsIGQzLCBkNCk7XFxuICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgfVxcbiAgXCJ9KHQsZSk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IodC5sZW5ndGgrXCItRCBvdXRwdXQgc2FtcGxpbmcgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9dmFyIG4scn0oZS5sb2dpY2FsU2hhcGUsbCksaT1mdW5jdGlvbih0KXtyZXR1cm5cIlxcbiAgICB2b2lkIHNldE91dHB1dChmbG9hdCB2YWwpIHtcXG4gICAgICBcIit0Lm91dHB1dCtcIiA9IHZlYzQodmFsLCAwLCAwLCAwKTtcXG4gICAgfVxcbiAgXCJ9KGMpKSxyJiYocCs9JG8pLFtwLGgsaSxzLGEsdSxuXS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIFZvKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZTtzd2l0Y2goZS5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSk7aWYodC5zaGFwZUluZm8uaXNVbmlmb3JtKXJldHVyblwiZmxvYXQgXCIrbitcIigpIHtyZXR1cm4gXCIrZStcIjt9XCI7dmFyIHI9dC5zaGFwZUluZm8udGV4U2hhcGUsbz1yWzBdLGE9clsxXTtpZigxPT09byYmMT09PWEpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKCkge1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgaGFsZkNSKTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciBpPXQuc2hhcGVJbmZvLnRleFNoYXBlLHM9aVswXSx1PWlbMV0sbD1LbyhlKTtyZXR1cm5cIlxcbiAgICBmbG9hdCBcIituK1wiKCkge1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK3MrXCIsIFwiK3UrXCIsIFwiK2wrXCIpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK2UrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSk7aWYodC5zaGFwZUluZm8uaXNVbmlmb3JtKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrbitcIihpbnQgaW5kZXgpIHtcXG4gICAgICAgIFwiK2pvKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgcj10LnNoYXBlSW5mby50ZXhTaGFwZSxvPXJbMF0sYT1yWzFdO2lmKDE9PT1hJiYxPT09bylyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK24rXCIoaW50IGluZGV4KSB7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIitlK1wiLCBoYWxmQ1IpO1xcbiAgICAgIH1cXG4gICAgXCI7dmFyIGk9S28oZSk7aWYoMT09PWEpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgICAgdmVjMiB1diA9IHZlYzIoMC41LCAoZmxvYXQoaW5kZXggKyBcIitpK1wiKSArIDAuNSkgLyBcIitvK1wiLjApO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PW8pcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgICAgdmVjMiB1diA9IHZlYzIoKGZsb2F0KGluZGV4ICsgXCIraStcIikgKyAwLjUpIC8gXCIrYStcIi4wLCAwLjUpO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrbitcIihpbnQgaW5kZXgpIHtcXG4gICAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIitvK1wiLCBcIithK1wiLCBpbmRleCArIFwiK2krXCIpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK2UrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLG49dC5uYW1lLHI9XCJnZXRcIituLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSksbz10LnNoYXBlSW5mby50ZXhTaGFwZTtpZihudWxsIT1vJiZ5KGUsbykpe3ZhciBhPW9bMF0saT1vWzFdO3JldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSAodmVjMihjb2wsIHJvdykgKyBoYWxmQ1IpIC8gdmVjMihcIitpK1wiLjAsIFwiK2ErXCIuMCk7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn12YXIgcz1rKGUpLHU9cy5uZXdTaGFwZSxsPXMua2VwdERpbXMsYz11O2lmKGMubGVuZ3RoPGUubGVuZ3RoKXt2YXIgaD1Zbyh0LGMpO3JldHVyblwiXFxuICAgICAgXCIrVm8oaCkrXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK1FvKFtcInJvd1wiLFwiY29sXCJdLGwpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgICAgaW50IGluZGV4ID0gcm91bmQoZG90KHZlYzIocm93LCBjb2wpLCB2ZWMyKFwiK2VbMV0rXCIsIDEpKSk7XFxuICAgICAgICBcIitqbyh0KStcIlxcbiAgICAgIH1cXG4gICAgXCI7dmFyIHA9b1swXSxmPW9bMV0sZD1LbyhuKTtpZigxPT09ZilyZXR1cm5cIlxcbiAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wpIHtcXG4gICAgICBmbG9hdCBpbmRleCA9IGRvdCh2ZWMzKHJvdywgY29sLCBcIitkK1wiKSwgdmVjMyhcIitlWzFdK1wiLCAxLCAxKSk7XFxuICAgICAgdmVjMiB1diA9IHZlYzIoMC41LCAoaW5kZXggKyAwLjUpIC8gXCIrcCtcIi4wKTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwiO2lmKDE9PT1wKXJldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIGZsb2F0IGluZGV4ID0gZG90KHZlYzMocm93LCBjb2wsIFwiK2QrXCIpLCB2ZWMzKFwiK2VbMV0rXCIsIDEsIDEpKTtcXG4gICAgICB2ZWMyIHV2ID0gdmVjMigoaW5kZXggKyAwLjUpIC8gXCIrZitcIi4wLCAwLjUpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgfVxcbiAgXCI7cmV0dXJuXCJcXG4gIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAvLyBFeHBsaWNpdGx5IHVzZSBpbnRlZ2VyIG9wZXJhdGlvbnMgYXMgZG90KCkgb25seSB3b3JrcyBvbiBmbG9hdHMuXFxuICAgIGludCBpbmRleCA9IHJvdyAqIFwiK2VbMV0rXCIgKyBjb2wgKyBcIitkK1wiO1xcbiAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIitwK1wiLCBcIitmK1wiLCBpbmRleCk7XFxuICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gIH1cXG5cIn0odCk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPWVbMV0qZVsyXSxhPWVbMl0saT1rKGUpLHM9aS5uZXdTaGFwZSx1PWkua2VwdERpbXMsbD1zO2lmKGwubGVuZ3RoPGUubGVuZ3RoKXt2YXIgYz1Zbyh0LGwpO3JldHVyblwiXFxuICAgICAgICBcIitWbyhjKStcIlxcbiAgICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgICAgcmV0dXJuIFwiK3IrXCIoXCIrUW8oW1wicm93XCIsXCJjb2xcIixcImRlcHRoXCJdLHUpK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn1pZih0LnNoYXBlSW5mby5pc1VuaWZvcm0pcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCkge1xcbiAgICAgICAgaW50IGluZGV4ID0gcm91bmQoZG90KHZlYzMocm93LCBjb2wsIGRlcHRoKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzMoXCIrbytcIiwgXCIrYStcIiwgMSkpKTtcXG4gICAgICAgIFwiK2pvKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgaD10LnNoYXBlSW5mby50ZXhTaGFwZSxwPWhbMF0sZj1oWzFdLGQ9dC5zaGFwZUluZm8uZmxhdE9mZnNldDtpZihmPT09byYmbnVsbD09ZClyZXR1cm5cIlxcbiAgICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgICAgZmxvYXQgdGV4UiA9IGZsb2F0KHJvdyk7XFxuICAgICAgICAgIGZsb2F0IHRleEMgPSBkb3QodmVjMihjb2wsIGRlcHRoKSwgdmVjMihcIithK1wiLCAxKSk7XFxuICAgICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZitcIi4wLCBcIitwK1wiLjApO1xcbiAgICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgICB9XFxuICAgICAgXCI7aWYoZj09PWEmJm51bGw9PWQpcmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICBmbG9hdCB0ZXhSID0gZG90KHZlYzIocm93LCBjb2wpLCB2ZWMyKFwiK2VbMV0rXCIsIDEpKTtcXG4gICAgICBmbG9hdCB0ZXhDID0gZmxvYXQoZGVwdGgpO1xcbiAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgLyB2ZWMyKFwiK2YrXCIuMCwgXCIrcCtcIi4wKTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwiO3ZhciB2PUtvKG4pO3JldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICAgIGludCBpbmRleCA9IHJvdyAqIFwiK28rXCIgKyBjb2wgKiBcIithK1wiICsgZGVwdGggKyBcIit2K1wiO1xcbiAgICAgICAgdmVjMiB1diA9IHV2RnJvbUZsYXQoXCIrcCtcIiwgXCIrZitcIiwgaW5kZXgpO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICAgIH1cXG4gIFwifSh0KTtjYXNlIDQ6cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPXQubmFtZSxyPVwiZ2V0XCIrbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89ZVszXSxhPWVbMl0qbyxpPWVbMV0qYSxzPWsoZSksdT1zLm5ld1NoYXBlLGw9cy5rZXB0RGltcztpZih1Lmxlbmd0aDxlLmxlbmd0aCl7dmFyIGM9WW8odCx1KTtyZXR1cm5cIlxcbiAgICAgIFwiK1ZvKGMpK1wiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK1FvKFtcInJvd1wiLFwiY29sXCIsXCJkZXB0aFwiLFwiZGVwdGgyXCJdLGwpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyKSB7XFxuICAgICAgICBpbnQgaW5kZXggPSByb3VuZChkb3QodmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWM0KFwiK2krXCIsIFwiK2ErXCIsIFwiK28rXCIsIDEpKSk7XFxuICAgICAgICBcIitqbyh0KStcIlxcbiAgICAgIH1cXG4gICAgXCI7dmFyIGg9dC5zaGFwZUluZm8uZmxhdE9mZnNldCxwPXQuc2hhcGVJbmZvLnRleFNoYXBlLGY9cFswXSxkPXBbMV07aWYoZD09PWkmJm51bGw9PWgpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCwgaW50IGRlcHRoMikge1xcbiAgICAgICAgZmxvYXQgdGV4UiA9IGZsb2F0KHJvdyk7XFxuICAgICAgICBmbG9hdCB0ZXhDID1cXG4gICAgICAgICAgICBkb3QodmVjMyhjb2wsIGRlcHRoLCBkZXB0aDIpLFxcbiAgICAgICAgICAgICAgICB2ZWMzKFwiK2ErXCIsIFwiK28rXCIsIDEpKTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK2QrXCIuMCwgXCIrZitcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO2lmKGQ9PT1vJiZudWxsPT1oKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIpIHtcXG4gICAgICAgIGZsb2F0IHRleFIgPSBkb3QodmVjMyhyb3csIGNvbCwgZGVwdGgpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMzKFwiK2VbMV0qZVsyXStcIiwgXCIrZVsyXStcIiwgMSkpO1xcbiAgICAgICAgZmxvYXQgdGV4QyA9IGZsb2F0KGRlcHRoMik7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC9cXG4gICAgICAgICAgICAgICAgICB2ZWMyKFwiK2QrXCIuMCwgXCIrZitcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciB2PUtvKG4pO3JldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyKSB7XFxuICAgICAgLy8gRXhwbGljaXRseSB1c2UgaW50ZWdlciBvcGVyYXRpb25zIGFzIGRvdCgpIG9ubHkgd29ya3Mgb24gZmxvYXRzLlxcbiAgICAgIGludCBpbmRleCA9IHJvdyAqIFwiK2krXCIgKyBjb2wgKiBcIithK1wiICtcXG4gICAgICAgICAgZGVwdGggKiBcIitvK1wiICsgZGVwdGgyO1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK2YrXCIsIFwiK2QrXCIsIGluZGV4ICsgXCIrditcIik7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7Y2FzZSA1OnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPWVbNF0sYT1lWzNdKm8saT1lWzJdKmEscz1lWzFdKmksdT1rKGUpLGw9dS5uZXdTaGFwZSxjPXUua2VwdERpbXM7aWYobC5sZW5ndGg8ZS5sZW5ndGgpe3ZhciBoPVlvKHQsbCk7cmV0dXJuXCJcXG4gICAgICBcIitWbyhoKStcIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICByZXR1cm4gXCIrcitcIihcIitRbyhbXCJyb3dcIixcImNvbFwiLFwiZGVwdGhcIixcImRlcHRoMlwiLFwiZGVwdGgzXCJdLGMpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICBmbG9hdCBpbmRleCA9IGRvdChcXG4gICAgICAgICAgdmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgIHZlYzQoXCIrcytcIiwgXCIraStcIiwgXCIrYStcIiwgXCIrbytcIikpICtcXG4gICAgICAgICAgZGVwdGgzO1xcbiAgICAgICAgXCIram8odCkrXCJcXG4gICAgICB9XFxuICAgIFwiO3ZhciBwPXQuc2hhcGVJbmZvLmZsYXRPZmZzZXQsZj10LnNoYXBlSW5mby50ZXhTaGFwZSxkPWZbMF0sdj1mWzFdO2lmKHY9PT1zJiZudWxsPT1wKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIsIGludCBkZXB0aDMpIHtcXG4gICAgICAgIGludCB0ZXhSID0gcm93O1xcbiAgICAgICAgZmxvYXQgdGV4QyA9IGRvdCh2ZWM0KGNvbCwgZGVwdGgsIGRlcHRoMiwgZGVwdGgzKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgdmVjNChcIitpK1wiLCBcIithK1wiLCBcIitvK1wiLCAxKSk7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC9cXG4gICAgICAgICAgICAgICAgICAgdmVjMihcIit2K1wiLjAsIFwiK2QrXCIuMCk7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgfVxcbiAgICBcIjtpZih2PT09byYmbnVsbD09cClyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICBmbG9hdCB0ZXhSID0gZG90KFxcbiAgICAgICAgICB2ZWM0KHJvdywgY29sLCBkZXB0aCwgZGVwdGgyKSxcXG4gICAgICAgICAgdmVjNChcIitlWzFdKmVbMl0qZVszXStcIixcXG4gICAgICAgICAgICAgICBcIitlWzJdKmVbM10rXCIsIFwiK2VbM10rXCIsIDEpKTtcXG4gICAgICAgIGludCB0ZXhDID0gZGVwdGgzO1xcbiAgICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvXFxuICAgICAgICAgICAgICAgICAgdmVjMihcIit2K1wiLjAsIFwiK2QrXCIuMCk7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgfVxcbiAgICBcIjt2YXIgbT1LbyhuKTtyZXR1cm5cIlxcbiAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCwgaW50IGRlcHRoMiwgaW50IGRlcHRoMykge1xcbiAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICBpbnQgaW5kZXggPSByb3cgKiBcIitzK1wiICsgY29sICogXCIraStcIiArIGRlcHRoICogXCIrYStcIiArXFxuICAgICAgICAgIGRlcHRoMiAqIFwiK28rXCIgKyBkZXB0aDMgKyBcIittK1wiO1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK2QrXCIsIFwiK3YrXCIsIGluZGV4KTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwifSh0KTtjYXNlIDY6cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPXQubmFtZSxyPVwiZ2V0XCIrbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89ayhlKSxhPW8ubmV3U2hhcGUsaT1vLmtlcHREaW1zO2lmKGEubGVuZ3RoPGUubGVuZ3RoKXt2YXIgcz1Zbyh0LGEpO3JldHVyblwiXFxuICAgICAgXCIrVm8ocykrXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCxcXG4gICAgICAgICAgICAgICAgICAgIGludCBkZXB0aDIsIGludCBkZXB0aDMsIGludCBkZXB0aDQpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK1FvKFtcInJvd1wiLFwiY29sXCIsXCJkZXB0aFwiLFwiZGVwdGgyXCIsXCJkZXB0aDNcIixcImRlcHRoNFwiXSxpKStcIik7XFxuICAgICAgfVxcbiAgICBcIn12YXIgdT1lWzVdLGw9ZVs0XSp1LGM9ZVszXSpsLGg9ZVsyXSpjLHA9ZVsxXSpoO2lmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLFxcbiAgICAgICAgICAgICAgICAgIGludCBkZXB0aDIsIGludCBkZXB0aDMsIGludCBkZXB0aDQpIHtcXG4gICAgICAgIGludCBpbmRleCA9IHJvdW5kKGRvdChcXG4gICAgICAgICAgdmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgIHZlYzQoXCIrcCtcIiwgXCIraCtcIiwgXCIrYytcIiwgXCIrbCtcIikpICtcXG4gICAgICAgICAgZG90KFxcbiAgICAgICAgICAgIHZlYzIoZGVwdGgzLCBkZXB0aDQpLFxcbiAgICAgICAgICAgIHZlYzIoXCIrdStcIiwgMSkpKTtcXG4gICAgICAgIFwiK2pvKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgZj10LnNoYXBlSW5mby5mbGF0T2Zmc2V0LGQ9dC5zaGFwZUluZm8udGV4U2hhcGUsdj1kWzBdLG09ZFsxXTtpZihtPT09cCYmbnVsbD09ZilyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLFxcbiAgICAgICAgICAgICAgICAgICAgaW50IGRlcHRoMiwgaW50IGRlcHRoMywgaW50IGRlcHRoNCkge1xcbiAgICAgICAgaW50IHRleFIgPSByb3c7XFxuICAgICAgICBmbG9hdCB0ZXhDID0gZG90KHZlYzQoY29sLCBkZXB0aCwgZGVwdGgyLCBkZXB0aDMpLFxcbiAgICAgICAgICB2ZWM0KFwiK2grXCIsIFwiK2MrXCIsIFwiK2wrXCIsIFwiK3UrXCIpKSArXFxuICAgICAgICAgICAgICAgZmxvYXQoZGVwdGg0KTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK20rXCIuMCwgXCIrditcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO2lmKG09PT11JiZudWxsPT1mKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsXFxuICAgICAgICAgICAgICAgICAgICBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzLCBpbnQgZGVwdGg0KSB7XFxuICAgICAgICBmbG9hdCB0ZXhSID0gZG90KHZlYzQocm93LCBjb2wsIGRlcHRoLCBkZXB0aDIpLFxcbiAgICAgICAgICB2ZWM0KFwiK2VbMV0qZVsyXSplWzNdKmVbNF0rXCIsXFxuICAgICAgICAgICAgICAgXCIrZVsyXSplWzNdKmVbNF0rXCIsXFxuICAgICAgICAgICAgICAgXCIrZVszXSplWzRdK1wiLFxcbiAgICAgICAgICAgICAgIFwiK2VbNF0rXCIpKSArIGZsb2F0KGRlcHRoMyk7XFxuICAgICAgICBpbnQgdGV4QyA9IGRlcHRoNDtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgIHZlYzIoXCIrbStcIi4wLCBcIit2K1wiLjApO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7dmFyIGc9S28obik7cmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsXFxuICAgICAgICAgICAgICAgICAgaW50IGRlcHRoMiwgaW50IGRlcHRoMywgaW50IGRlcHRoNCkge1xcbiAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICBpbnQgaW5kZXggPSByb3cgKiBcIitwK1wiICsgY29sICogXCIraCtcIiArIGRlcHRoICogXCIrYytcIiArXFxuICAgICAgICAgIGRlcHRoMiAqIFwiK2wrXCIgKyBkZXB0aDMgKiBcIit1K1wiICsgZGVwdGg0ICsgXCIrZytcIjtcXG4gICAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIit2K1wiLCBcIittK1wiLCBpbmRleCk7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoZS5sZW5ndGgrXCItRCBpbnB1dCBzYW1wbGluZyBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKX19ZnVuY3Rpb24gem8odCl7dmFyIGUsbixyO3N3aXRjaCh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkscj1CbygpLFwiXFxuICAgIHZlYzQgXCIrbitcIigpIHtcXG4gICAgICByZXR1cm4gXCIrci50ZXh0dXJlMkQrXCIoXCIrZStcIiwgaGFsZkNSKTtcXG4gICAgfVxcbiAgXCI7Y2FzZSAxOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10Lm5hbWUsbj1cImdldFwiK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxyPXQuc2hhcGVJbmZvLnRleFNoYXBlLG89W01hdGguY2VpbChyWzBdLzIpLE1hdGguY2VpbChyWzFdLzIpXSxhPUJvKCk7cmV0dXJuXCJcXG4gICAgdmVjNCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20xRChcXG4gICAgICAgIFwiK29bMF0rXCIsIFwiK29bMV0rXCIsIGluZGV4KTtcXG4gICAgICByZXR1cm4gXCIrYS50ZXh0dXJlMkQrXCIoXCIrZStcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPXQuc2hhcGVJbmZvLnRleFNoYXBlLGE9b1swXSxpPW9bMV0scz1CbygpO2lmKG51bGwhPW8mJnkoZSxvKSlyZXR1cm5cIlxcbiAgICAgIHZlYzQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sKSB7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIoY29sLCByb3cpICsgaGFsZkNSKSAvIHZlYzIoXCIraStcIi4wLCBcIithK1wiLjApO1xcblxcbiAgICAgICAgcmV0dXJuIFwiK3MudGV4dHVyZTJEK1wiKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciB1PVtNYXRoLmNlaWwob1swXS8yKSxNYXRoLmNlaWwob1sxXS8yKV0sbD1NYXRoLmNlaWwoZVsxXS8yKTtyZXR1cm5cIlxcbiAgICB2ZWM0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20yRChcIitsK1wiLCBcIit1WzBdK1wiLCBcIit1WzFdK1wiLCByb3csIGNvbCk7XFxuICAgICAgcmV0dXJuIFwiK3MudGV4dHVyZTJEK1wiKFwiK24rXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLG49dC5uYW1lLHI9XCJnZXRcIituLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSksbz10LnNoYXBlSW5mby50ZXhTaGFwZSxhPVtNYXRoLmNlaWwob1swXS8yKSxNYXRoLmNlaWwob1sxXS8yKV07aWYoMT09PWVbMF0pe3ZhciBpPWUuc2xpY2UoMSkscz1Zbyh0LGkpO3JldHVyblwiXFxuICAgICAgICBcIit6byhzKStcIlxcbiAgICAgICAgdmVjNCBcIityK1wiKGludCBiLCBpbnQgcm93LCBpbnQgY29sKSB7XFxuICAgICAgICAgIHJldHVybiBcIityK1wiKFwiK1FvKFtcImJcIixcInJvd1wiLFwiY29sXCJdLFsxLDJdKStcIik7XFxuICAgICAgICB9XFxuICAgICAgXCJ9dmFyIHU9YVswXSxsPWFbMV0sYz1NYXRoLmNlaWwoZVsyXS8yKSxoPWMqTWF0aC5jZWlsKGVbMV0vMikscD1CbygpO3JldHVyblwiXFxuICAgIHZlYzQgXCIrcitcIihpbnQgYiwgaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20zRChcXG4gICAgICAgIFwiK3UrXCIsIFwiK2wrXCIsIFwiK2grXCIsIFwiK2MrXCIsIGIsIHJvdywgY29sKTtcXG4gICAgICByZXR1cm4gXCIrcC50ZXh0dXJlMkQrXCIoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7ZGVmYXVsdDpyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPWUubGVuZ3RoLHI9dC5uYW1lLG89XCJnZXRcIityLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Iuc2xpY2UoMSksYT10LnNoYXBlSW5mby50ZXhTaGFwZSxpPVtNYXRoLmNlaWwoYVswXS8yKSxNYXRoLmNlaWwoYVsxXS8yKV0scz1pWzBdLHU9aVsxXSxsPU1hdGguY2VpbChlW24tMV0vMiksYz1sKk1hdGguY2VpbChlW24tMl0vMiksaD1cImludCBiLCBpbnQgcm93LCBpbnQgY29sXCIscD1cImIgKiBcIitjK1wiICsgKHJvdyAvIDIpICogXCIrbCtcIiArIChjb2wgLyAyKVwiLGY9MjtmPG4tMTtmKyspaD1cImludCBiXCIrZitcIiwgXCIraCxjKj1lW24tZi0xXSxwPVwiYlwiK2YrXCIgKiBcIitjK1wiICsgXCIrcDt2YXIgZD1CbygpO3JldHVyblwiXFxuICAgIHZlYzQgXCIrbytcIihcIitoK1wiKSB7XFxuICAgICAgaW50IGluZGV4ID0gXCIrcCtcIjtcXG4gICAgICBpbnQgdGV4UiA9IGluZGV4IC8gXCIrdStcIjtcXG4gICAgICBpbnQgdGV4QyA9IGluZGV4IC0gdGV4UiAqIFwiK3UrXCI7XFxuICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIoXCIrdStcIiwgXCIrcytcIik7XFxuICAgICAgcmV0dXJuIFwiK2QudGV4dHVyZTJEK1wiKFwiK3IrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpfX12YXIgR289XCJcXG52ZWMyIHV2RnJvbUZsYXQoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLCBpbnQgaW5kZXgpIHtcXG4gIGludCB0ZXhSID0gaW5kZXggLyB0ZXhOdW1DO1xcbiAgaW50IHRleEMgPSBpbmRleCAtIHRleFIgKiB0ZXhOdW1DO1xcbiAgcmV0dXJuICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIodGV4TnVtQywgdGV4TnVtUik7XFxufVxcbnZlYzIgcGFja2VkVVZmcm9tMUQoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLCBpbnQgaW5kZXgpIHtcXG4gIGludCB0ZXhlbEluZGV4ID0gaW5kZXggLyAyO1xcbiAgaW50IHRleFIgPSB0ZXhlbEluZGV4IC8gdGV4TnVtQztcXG4gIGludCB0ZXhDID0gdGV4ZWxJbmRleCAtIHRleFIgKiB0ZXhOdW1DO1xcbiAgcmV0dXJuICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIodGV4TnVtQywgdGV4TnVtUik7XFxufVxcblwiLEhvPVwiXFxudmVjMiBwYWNrZWRVVmZyb20yRChpbnQgdGV4ZWxzSW5Mb2dpY2FsUm93LCBpbnQgdGV4TnVtUixcXG4gIGludCB0ZXhOdW1DLCBpbnQgcm93LCBpbnQgY29sKSB7XFxuICBpbnQgdGV4ZWxJbmRleCA9IChyb3cgLyAyKSAqIHRleGVsc0luTG9naWNhbFJvdyArIChjb2wgLyAyKTtcXG4gIGludCB0ZXhSID0gdGV4ZWxJbmRleCAvIHRleE51bUM7XFxuICBpbnQgdGV4QyA9IHRleGVsSW5kZXggLSB0ZXhSICogdGV4TnVtQztcXG4gIHJldHVybiAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgLyB2ZWMyKHRleE51bUMsIHRleE51bVIpO1xcbn1cXG5cIixxbz1cIlxcbnZlYzIgcGFja2VkVVZmcm9tM0QoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLFxcbiAgICBpbnQgdGV4ZWxzSW5CYXRjaCwgaW50IHRleGVsc0luTG9naWNhbFJvdywgaW50IGIsXFxuICAgIGludCByb3csIGludCBjb2wpIHtcXG4gIGludCBpbmRleCA9IGIgKiB0ZXhlbHNJbkJhdGNoICsgKHJvdyAvIDIpICogdGV4ZWxzSW5Mb2dpY2FsUm93ICsgKGNvbCAvIDIpO1xcbiAgaW50IHRleFIgPSBpbmRleCAvIHRleE51bUM7XFxuICBpbnQgdGV4QyA9IGluZGV4IC0gdGV4UiAqIHRleE51bUM7XFxuICByZXR1cm4gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC8gdmVjMih0ZXhOdW1DLCB0ZXhOdW1SKTtcXG59XFxuXCIsJG89XCJcXG4gIGZsb2F0IGdldENoYW5uZWwodmVjNCBmcmFnLCB2ZWMyIGlubmVyRGltcykge1xcbiAgICB2ZWMyIG1vZENvb3JkID0gbW9kKGlubmVyRGltcywgMi4pO1xcbiAgICByZXR1cm4gbW9kQ29vcmQueCA9PSAwLiA/XFxuICAgICAgKG1vZENvb3JkLnkgPT0gMC4gPyBmcmFnLnIgOiBmcmFnLmcpIDpcXG4gICAgICAobW9kQ29vcmQueSA9PSAwLiA/IGZyYWcuYiA6IGZyYWcuYSk7XFxuICB9XFxuICBmbG9hdCBnZXRDaGFubmVsKHZlYzQgZnJhZywgaW50IGRpbSkge1xcbiAgICBmbG9hdCBtb2RDb29yZCA9IG1vZChmbG9hdChkaW0pLCAyLik7XFxuICAgIHJldHVybiBtb2RDb29yZCA9PSAwLiA/IGZyYWcuciA6IGZyYWcuZztcXG4gIH1cXG5cIjtmdW5jdGlvbiBLbyh0KXtyZXR1cm5cIm9mZnNldFwiK3R9ZnVuY3Rpb24gam8odCl7dmFyIGU9dC5uYW1lLG49Zyh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUpO3JldHVybiBuPDI/XCJyZXR1cm4gXCIrZStcIjtcIjpcIlxcbiAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK24rXCI7IGkrKykge1xcbiAgICAgIGlmIChpID09IGluZGV4KSB7XFxuICAgICAgICByZXR1cm4gXCIrZStcIltpXTtcXG4gICAgICB9XFxuICAgIH1cXG4gIFwifWZ1bmN0aW9uIFhvKHQpe2lmKHQ8PTEpcmV0dXJuXCJpbnRcIjtpZigyPT09dClyZXR1cm5cIml2ZWMyXCI7aWYoMz09PXQpcmV0dXJuXCJpdmVjM1wiO2lmKDQ9PT10KXJldHVyblwiaXZlYzRcIjtpZig1PT09dClyZXR1cm5cIml2ZWM1XCI7aWYoNj09PXQpcmV0dXJuXCJpdmVjNlwiO3Rocm93IEVycm9yKFwiR1BVIGZvciByYW5rIFwiK3QrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9ZnVuY3Rpb24gWW8odCxlKXt2YXIgbj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHQpKTtyZXR1cm4gbi5zaGFwZUluZm8ubG9naWNhbFNoYXBlPWUsbn1mdW5jdGlvbiBRbyh0LGUpe3JldHVybiBlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0pLmpvaW4oXCIsIFwiKX12YXIgSm89ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsZih0Lmxlbmd0aD4yLGZ1bmN0aW9uKCl7cmV0dXJuXCJQYWNrZWQgYXJnXCIrKG4uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSkrXCIgc3VwcG9ydHMgb25seSBpbnB1dHMgd2l0aCByYW5rIGFib3ZlIDIuXCJ9KTt2YXIgbz10W3QubGVuZ3RoLTFdLGE9TWF0aC5jZWlsKG8vZSk7dGhpcy5vdXRwdXRTaGFwZT10LnNsaWNlKDAsLTEpLGE+MSYmdGhpcy5vdXRwdXRTaGFwZS5wdXNoKGEpLHJ8fHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwiYmVzdEluZGljZXNBXCIpO3ZhciBpLHMsdT10aGlzLm91dHB1dFNoYXBlLGw9dS5sZW5ndGgsYz1YbyhsKSxoPU1vKFwiY29vcmRzXCIsbCk7aWYoMT09PWEpe3ZhciBwPVhvKHM9bCsxKTtpPVwiXFxuICAgICAgICBcIitwK1wiIHNvdXJjZUxvY1IgPSBcIitwK1wiKFwiK2guam9pbigpK1wiLCAwKTtcXG4gICAgICAgICsrXCIraFtsLTFdK1wiO1xcbiAgICAgICAgXCIrcCtcIiBzb3VyY2VMb2NHID0gXCIrcCtcIihcIitoLmpvaW4oKStcIiwgMCk7XFxuICAgICAgICArK1wiK2hbbC0yXStcIjtcXG4gICAgICAgIFwiK3ArXCIgc291cmNlTG9jQSA9IFwiK3ArXCIoXCIraC5qb2luKCkrXCIsIDApO1xcbiAgICAgICAgLS1cIitoW2wtMV0rXCI7XFxuICAgICAgICBcIitwK1wiIHNvdXJjZUxvY0IgPSBcIitwK1wiKFwiK2guam9pbigpK1wiLCAwKTtcXG4gICAgICAgIC0tXCIraFtsLTJdK1wiO1wifWVsc2Ugcz1sLGk9XCJcXG4gICAgICAgIFwiK2MrXCIgc291cmNlTG9jUiA9IGNvb3JkcztcXG4gICAgICAgICsrXCIraFtsLTFdK1wiO1xcbiAgICAgICAgXCIrYytcIiBzb3VyY2VMb2NHID0gY29vcmRzO1xcbiAgICAgICAgKytcIitoW2wtMl0rXCI7XFxuICAgICAgICBcIitjK1wiIHNvdXJjZUxvY0EgPSBjb29yZHM7XFxuICAgICAgICAtLVwiK2hbbC0xXStcIjtcXG4gICAgICAgIFwiK2MrXCIgc291cmNlTG9jQiA9IGNvb3JkcztcXG4gICAgICAgIC0tXCIraFtsLTJdK1wiO1wiO3ZhciBkPVtcInhcIixcInlcIixcInpcIixcIndcIixcInVcIixcInZcIl0uc2xpY2UoMCxzKSx2PVwiLlwiK2Rbcy0xXSxtPWQubWFwKGZ1bmN0aW9uKHQpe3JldHVyblwiaW50IFwiK3R9KSxnPU1vKFwic291cmNlTG9jUlwiLHMtMSkuY29uY2F0KFwiaW5JZHguclwiKSx5PU1vKFwic291cmNlTG9jR1wiLHMtMSkuY29uY2F0KFwiaW5JZHguZ1wiKSx4PU1vKFwic291cmNlTG9jQlwiLHMtMSkuY29uY2F0KFwiaW5JZHguYlwiKSxiPU1vKFwic291cmNlTG9jQVwiLHMtMSkuY29uY2F0KFwiaW5JZHguYVwiKSx3PVwibWF4XCI9PT1uP1wiZ3JlYXRlclRoYW5cIjpcImxlc3NUaGFuXCIsQz1yP1wiXCI6XCJcXG4gICAgICAgICAgaW5JZHggPSByb3VuZCh2ZWM0KGdldEJlc3RJbmRpY2VzQUNoYW5uZWwoXCIrZy5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QmVzdEluZGljZXNBQ2hhbm5lbChcIit5LmpvaW4oKStcIiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRCZXN0SW5kaWNlc0FDaGFubmVsKFwiK3guam9pbigpK1wiKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEJlc3RJbmRpY2VzQUNoYW5uZWwoXCIrYi5qb2luKCkrXCIpKSk7XCIsRT1cInZlYzQoXFxuICAgICAgICAgICAgZ2V0QUNoYW5uZWwoXCIrZy5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgIGhhc05leHRDb2wgPyBnZXRBQ2hhbm5lbChcIit5LmpvaW4oKStcIikgOiAwLixcXG4gICAgICAgICAgICBoYXNOZXh0Um93ID8gZ2V0QUNoYW5uZWwoXCIreC5qb2luKCkrXCIpIDogMC4sXFxuICAgICAgICAgICAgaGFzTmV4dFJvdyAmJiBoYXNOZXh0Q29sID8gZ2V0QUNoYW5uZWwoXCIrYi5qb2luKCkrXCIpIDogMC4pXCIsUj1yP1wiXCI6XCJcXG4gICAgICBmbG9hdCBnZXRCZXN0SW5kaWNlc0FDaGFubmVsKFwiK20uam9pbigpK1wiKSB7XFxuICAgICAgICByZXR1cm4gZ2V0Q2hhbm5lbChnZXRCZXN0SW5kaWNlc0EoXCIrZC5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZC5zbGljZSgtMikuam9pbigpK1wiKSk7XFxuICAgICAgfVwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBnZXRBQ2hhbm5lbChcIittLmpvaW4oKStcIikge1xcbiAgICAgICAgcmV0dXJuIGdldENoYW5uZWwoZ2V0QShcIitkLmpvaW4oKStcIiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZC5zbGljZSgtMikuam9pbigpK1wiKSk7XFxuICAgICAgfVxcbiAgICAgIFwiK1IrXCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitjK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgYm9vbCBoYXNOZXh0Q29sID0gXCIraFtsLTFdK1wiIDwgXCIrKHVbbC0xXS0xKStcIjtcXG4gICAgICAgIGJvb2wgaGFzTmV4dFJvdyA9IFwiK2hbbC0yXStcIiA8IFwiKyh1W2wtMl0tMSkrXCI7XFxuICAgICAgICBcIitpK1wiXFxuICAgICAgICBpdmVjNCBzcmNJZHggPSBpdmVjNChzb3VyY2VMb2NSXCIrditcIiwgc291cmNlTG9jR1wiK3YrXCIsXFxuICAgICAgICAgIHNvdXJjZUxvY0JcIit2K1wiLCBzb3VyY2VMb2NBXCIrditcIikgKiBcIitlK1wiO1xcbiAgICAgICAgaXZlYzQgaW5JZHggPSBzcmNJZHg7XFxuICAgICAgICB2ZWM0IGJlc3RJbmRleCA9IHZlYzQoaW5JZHgpO1xcbiAgICAgICAgdmVjNCBiZXN0VmFsdWUgPSBcIitFK1wiO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIitlK1wiOyBpKyspIHtcXG4gICAgICAgICAgaW5JZHggPSBzcmNJZHg7XFxuICAgICAgICAgIFwiK0MrXCJcXG4gICAgICAgICAgdmVjNCBjYW5kaWRhdGUgPSBcIitFK1wiO1xcbiAgICAgICAgICBidmVjNCBuYW4gPSBpc25hbihjYW5kaWRhdGUpO1xcbiAgICAgICAgICBidmVjNCByZXBsYWNlID0gYnZlYzQoXFxuICAgICAgICAgICAgdmVjNChcIit3K1wiKGNhbmRpZGF0ZSwgYmVzdFZhbHVlKSkgKiAodmVjNCgxLjApIC0gdmVjNChuYW4pKSk7XFxuXFxuICAgICAgICAgIGJlc3RWYWx1ZSA9IHZlYzQocmVwbGFjZS54ICA/IGNhbmRpZGF0ZS54IDogYmVzdFZhbHVlLngsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS55ICA/IGNhbmRpZGF0ZS55IDogYmVzdFZhbHVlLnksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS56ICA/IGNhbmRpZGF0ZS56IDogYmVzdFZhbHVlLnosXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS53ICA/IGNhbmRpZGF0ZS53IDogYmVzdFZhbHVlLncpO1xcbiAgICAgICAgICBiZXN0SW5kZXggPSBtaXgoYmVzdEluZGV4LCB2ZWM0KGluSWR4KSwgdmVjNChyZXBsYWNlKSk7XFxuICAgICAgICAgIHNyY0lkeCsrO1xcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGJlc3RJbmRleCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksWm89ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuZmlsdGVySGVpZ2h0LG49dC5maWx0ZXJXaWR0aCxyPXQuc3RyaWRlSGVpZ2h0LG89dC5zdHJpZGVXaWR0aCxhPXQuZGlsYXRpb25IZWlnaHQsaT10LmRpbGF0aW9uV2lkdGgscz10LmVmZmVjdGl2ZUZpbHRlckhlaWdodCx1PXQuZWZmZWN0aXZlRmlsdGVyV2lkdGgsbD1zLTEtdC5wYWRJbmZvLnRvcCxjPXUtMS10LnBhZEluZm8ubGVmdCxoPTEvKGUqbik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitsK1wiLCBcIitjK1wiKTtcXG4gICAgICBjb25zdCBmbG9hdCBhdmdNdWx0aXBsaWVyID0gZmxvYXQoXCIraCtcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgaXZlYzIgZHlSQ0Nvcm5lciA9IGNvb3Jkcy55eiAtIHBhZHM7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5UkNDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIGR5KD8sID8sIGQpIHdpdGggcG9zIG1hc2soOiwgOiwgZCkgdG8gZ2V0IGR4KHhSLCB4QywgZCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrcytcIjtcXG4gICAgICAgICAgICB3UiArPSBcIithK1wiKSB7XFxuICAgICAgICAgIGZsb2F0IGR5UiA9IGZsb2F0KGR5UkNvcm5lciArIHdSKSAvIFwiK3IrXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fCBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK3UrXCI7XFxuICAgICAgICAgICAgd0MrPSBcIitpK1wiKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIrbytcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwLjAgfHwgZHlDID49IFwiK3Qub3V0V2lkdGgrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgaWR5UiwgaWR5QywgZCk7XFxuXFxuICAgICAgICAgICAgZG90UHJvZCArPSBkeVZhbHVlICogYXZnTXVsdGlwbGllcjtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLHRhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPXQuaW5TaGFwZTt2YXIgZT10LmZpbHRlckRlcHRoLG49dC5maWx0ZXJIZWlnaHQscj10LmZpbHRlcldpZHRoLG89dC5zdHJpZGVEZXB0aCxhPXQuc3RyaWRlSGVpZ2h0LGk9dC5zdHJpZGVXaWR0aCxzPXQuZGlsYXRpb25EZXB0aCx1PXQuZGlsYXRpb25IZWlnaHQsbD10LmRpbGF0aW9uV2lkdGgsYz10LmVmZmVjdGl2ZUZpbHRlckRlcHRoLGg9dC5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQscD10LmVmZmVjdGl2ZUZpbHRlcldpZHRoLGY9Yy0xLXQucGFkSW5mby5mcm9udCxkPWgtMS10LnBhZEluZm8udG9wLHY9cC0xLXQucGFkSW5mby5sZWZ0LG09MS8oZSpuKnIpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMyBwYWRzID0gaXZlYzMoXCIrZitcIiwgXCIrZCtcIiwgXCIrditcIik7XFxuICAgICAgY29uc3QgZmxvYXQgYXZnTXVsdGlwbGllciA9IGZsb2F0KFwiK20rXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgY2ggPSBjb29yZHMudTtcXG5cXG4gICAgICAgIGl2ZWMzIGR5Q29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgLSBwYWRzO1xcbiAgICAgICAgaW50IGR5RENvcm5lciA9IGR5Q29ybmVyLng7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlDb3JuZXIueTtcXG4gICAgICAgIGludCBkeUNDb3JuZXIgPSBkeUNvcm5lci56O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgZHkoPywgPywgPywgZCkgd2l0aCBwb3MgbWFzayg6LCA6LCA6LCBjaCkgdG8gZ2V0XFxuICAgICAgICAvLyBkeCh4RCwgeFIsIHhDLCBjaCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCB3RCA9IDA7IHdEIDwgXCIrYytcIjtcXG4gICAgICAgICAgICB3RCArPSBcIitzK1wiKSB7XFxuICAgICAgICAgIGZsb2F0IGR5RCA9IGZsb2F0KGR5RENvcm5lciArIHdEKSAvIFwiK28rXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5RCA8IDAuMCB8fCBkeUQgPj0gXCIrdC5vdXREZXB0aCtcIi4wIHx8IGZyYWN0KGR5RCkgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5RCA9IGludChkeUQpO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIraCtcIjtcXG4gICAgICAgICAgICAgIHdSICs9IFwiK3UrXCIpIHtcXG4gICAgICAgICAgICBmbG9hdCBkeVIgPSBmbG9hdChkeVJDb3JuZXIgKyB3UikgLyBcIithK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrcCtcIjtcXG4gICAgICAgICAgICAgICAgd0MgKz0gXCIrbCtcIikge1xcbiAgICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIraStcIi4wO1xcblxcbiAgICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgICAgZnJhY3QoZHlDKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIGludCBpZHlDID0gaW50KGR5Qyk7XFxuXFxuICAgICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYmF0Y2gsIGlkeUQsIGlkeVIsIGlkeUMsIGNoKTtcXG5cXG4gICAgICAgICAgICAgIGRvdFByb2QgKz0gZHlWYWx1ZSAqIGF2Z011bHRpcGxpZXI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksZWE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvLGEpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIm1lYW5cIixcInZhcmlhbmNlXCJdLHJvKHQsZSkscm8odCxuKTt2YXIgaT1cIjAuMFwiO251bGwhPXImJihybyh0LHIpLHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwib2Zmc2V0XCIpLGk9XCJnZXRPZmZzZXRBdE91dENvb3JkcygpXCIpO3ZhciBzPVwiMS4wXCI7bnVsbCE9byYmKHJvKHQsbyksdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJzY2FsZVwiKSxzPVwiZ2V0U2NhbGVBdE91dENvb3JkcygpXCIpLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgeCA9IGdldFhBdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgbWVhbiA9IGdldE1lYW5BdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgdmFyaWFuY2UgPSBnZXRWYXJpYW5jZUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCBvZmZzZXQgPSBcIitpK1wiO1xcbiAgICAgICAgZmxvYXQgc2NhbGUgPSBcIitzK1wiO1xcbiAgICAgICAgZmxvYXQgaW52ID0gc2NhbGUgKiBpbnZlcnNlc3FydCh2YXJpYW5jZSArIGZsb2F0KFwiK2ErXCIpKTtcXG4gICAgICAgIHNldE91dHB1dChkb3QodmVjMyh4LCAtbWVhbiwgb2Zmc2V0KSwgdmVjMyhpbnYsIGludiwgMSkpKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxuYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8sYSl7dGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIm1lYW5cIixcInZhcmlhbmNlXCJdLHJvKHQsZSkscm8odCxuKTt2YXIgaT1cInZlYzQoMC4wKVwiO251bGwhPXImJihybyh0LHIpLHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwib2Zmc2V0XCIpLGk9XCJnZXRPZmZzZXRBdE91dENvb3JkcygpXCIpO3ZhciBzPVwidmVjNCgxLjApXCI7bnVsbCE9byYmKHJvKHQsbyksdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJzY2FsZVwiKSxzPVwiZ2V0U2NhbGVBdE91dENvb3JkcygpXCIpLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdmVjNCBvZmZzZXQgPSBcIitpK1wiO1xcbiAgICAgICAgdmVjNCBzY2FsZSA9IFwiK3MrXCI7XFxuXFxuICAgICAgICB2ZWM0IHggPSBnZXRYQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIHZlYzQgbWVhbiA9IGdldE1lYW5BdE91dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCB2YXJpYW5jZSA9IGdldFZhcmlhbmNlQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgaW52ID0gc2NhbGUgKiBpbnZlcnNlc3FydCh2YXJpYW5jZSArIHZlYzQoXCIrYStcIikpO1xcblxcbiAgICAgICAgc2V0T3V0cHV0KCh4IC0gbWVhbikgKiBpbnYgKyBvZmZzZXQpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLHJhPVwicmV0dXJuIGFyZWFsICogYnJlYWwgLSBhaW1hZyAqIGJpbWFnO1wiLG9hPVwicmV0dXJuIGFyZWFsICogYmltYWcgKyBhaW1hZyAqIGJyZWFsO1wiLGFhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVJlYWxcIixcIkFJbWFnXCIsXCJCUmVhbFwiLFwiQkltYWdcIl0sdGhpcy5vdXRwdXRTaGFwZT1ybyhlLG4pLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBiaW5hcnlPcENvbXBsZXgoXFxuICAgICAgICAgIGZsb2F0IGFyZWFsLCBmbG9hdCBhaW1hZywgZmxvYXQgYnJlYWwsIGZsb2F0IGJpbWFnKSB7XFxuICAgICAgICBcIit0K1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGZsb2F0IGFyZWFsID0gZ2V0QVJlYWxBdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgYWltYWcgPSBnZXRBSW1hZ0F0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCBicmVhbCA9IGdldEJSZWFsQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGJpbWFnID0gZ2V0QkltYWdBdE91dENvb3JkcygpO1xcbiAgICAgICAgc2V0T3V0cHV0KGJpbmFyeU9wQ29tcGxleChhcmVhbCwgYWltYWcsIGJyZWFsLCBiaW1hZykpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLGlhPVwicmV0dXJuIGEgKyBiO1wiLHNhPVwicmV0dXJuIGEgLSBiO1wiLHVhPVwicmV0dXJuIGEgKiBiO1wiLGxhPVwicmV0dXJuIChhIDwgMC4pID8gYiAqIGEgOiBhO1wiLGNhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiLFwiQlwiXSx0aGlzLm91dHB1dFNoYXBlPXJvKGUsbiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGZsb2F0IGJpbmFyeU9wZXJhdGlvbihmbG9hdCBhLCBmbG9hdCBiKSB7XFxuICAgICAgICBcIit0K1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGZsb2F0IGEgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGIgPSBnZXRCQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIHNldE91dHB1dChiaW5hcnlPcGVyYXRpb24oYSwgYikpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLGhhPVwiXFxuICB2ZWM0IGFMZXNzVGhhblplcm8gPSB2ZWM0KGxlc3NUaGFuKGEsIHZlYzQoMC4pKSk7XFxuICByZXR1cm4gKGFMZXNzVGhhblplcm8gKiAoYiAqIGEpKSArICgodmVjNCgxLjApIC0gYUxlc3NUaGFuWmVybykgKiBhKTtcXG5cIixwYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIixcIkJcIl0sdGhpcy5zdXBwb3J0c0Jyb2FkY2FzdGluZz0hMCx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMCx0aGlzLm91dHB1dFNoYXBlPXJvKGUsbik7dmFyIG89dGhpcy5vdXRwdXRTaGFwZS5sZW5ndGgsYT1cIlwiO2lmKHIpaWYoMD09PW98fDE9PT1nKHRoaXMub3V0cHV0U2hhcGUpKWE9XCJcXG4gICAgICAgICAgcmVzdWx0LnkgPSAwLjtcXG4gICAgICAgICAgcmVzdWx0LnogPSAwLjtcXG4gICAgICAgICAgcmVzdWx0LncgPSAwLjtcXG4gICAgICAgIFwiO2Vsc2UgaWYoYT1cIlxcbiAgICAgICAgICBcIitYbyhvKStcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIFwiLDE9PT1vKWErPVwiXFxuICAgICAgICAgICAgcmVzdWx0LnkgPSAoY29vcmRzICsgMSkgPj0gXCIrdGhpcy5vdXRwdXRTaGFwZVswXStcIiA/IDAuIDogcmVzdWx0Lnk7XFxuICAgICAgICAgICAgcmVzdWx0LnogPSAwLjtcXG4gICAgICAgICAgICByZXN1bHQudyA9IDAuO1xcbiAgICAgICAgICBcIjtlbHNle3ZhciBpPU1vKFwiY29vcmRzXCIsbyk7YSs9XCJcXG4gICAgICAgICAgICBib29sIG5leHRSb3dPdXRPZkJvdW5kcyA9XFxuICAgICAgICAgICAgICAoXCIraVtvLTJdK1wiICsgMSkgPj0gXCIrdGhpcy5vdXRwdXRTaGFwZVtvLTJdK1wiO1xcbiAgICAgICAgICAgIGJvb2wgbmV4dENvbE91dE9mQm91bmRzID1cXG4gICAgICAgICAgICAgIChcIitpW28tMV0rXCIgKyAxKSA+PSBcIit0aGlzLm91dHB1dFNoYXBlW28tMV0rXCI7XFxuICAgICAgICAgICAgcmVzdWx0LnkgPSBuZXh0Q29sT3V0T2ZCb3VuZHMgPyAwLiA6IHJlc3VsdC55O1xcbiAgICAgICAgICAgIHJlc3VsdC56ID0gbmV4dFJvd091dE9mQm91bmRzID8gMC4gOiByZXN1bHQuejtcXG4gICAgICAgICAgICByZXN1bHQudyA9IG5leHRDb2xPdXRPZkJvdW5kcyB8fCBuZXh0Um93T3V0T2ZCb3VuZHMgPyAwLiA6IHJlc3VsdC53O1xcbiAgICAgICAgICBcIn10aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdmVjNCBiaW5hcnlPcGVyYXRpb24odmVjNCBhLCB2ZWM0IGIpIHtcXG4gICAgICAgIFwiK3QrXCJcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdmVjNCBhID0gZ2V0QUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICB2ZWM0IGIgPSBnZXRCQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gYmluYXJ5T3BlcmF0aW9uKGEsIGIpO1xcbiAgICAgICAgXCIrYStcIlxcblxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksZmE9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdW5pZm9ybSBmbG9hdCBtaW5WYWw7XFxuICAgICAgdW5pZm9ybSBmbG9hdCBtYXhWYWw7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgdmFsdWUgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGlmIChpc25hbih2YWx1ZSkpIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KHZhbHVlKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgc2V0T3V0cHV0KGNsYW1wKHZhbHVlLCBtaW5WYWwsIG1heFZhbCkpO1xcbiAgICAgIH1cXG4gICAgXCJ9cmV0dXJuIHQucHJvdG90eXBlLmdldEN1c3RvbVNldHVwRnVuYz1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKHIsbyl7bnVsbD09bi5taW5Mb2MmJihuLm1pbkxvYz1yLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cobyxcIm1pblZhbFwiKSxuLm1heExvYz1yLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cobyxcIm1heFZhbFwiKSksci5nbC51bmlmb3JtMWYobi5taW5Mb2MsdCksci5nbC51bmlmb3JtMWYobi5tYXhMb2MsZSl9fSx0fSgpLGRhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMCx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHVuaWZvcm0gZmxvYXQgbWluVmFsO1xcbiAgICAgIHVuaWZvcm0gZmxvYXQgbWF4VmFsO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIHZlYzQgdmFsdWUgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIGlmIChhbnkoaXNuYW4odmFsdWUpKSkge1xcbiAgICAgICAgICBzZXRPdXRwdXQodmFsdWUpO1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICBzZXRPdXRwdXQoY2xhbXAodmFsdWUsIHZlYzQobWluVmFsKSwgdmVjNChtYXhWYWwpKSk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztyZXR1cm4gZnVuY3Rpb24ocixvKXtudWxsPT1uLm1pbkxvYyYmKG4ubWluTG9jPXIuZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhvLFwibWluVmFsXCIpLG4ubWF4TG9jPXIuZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhvLFwibWF4VmFsXCIpKSxyLmdsLnVuaWZvcm0xZihuLm1pbkxvYyx0KSxyLmdsLnVuaWZvcm0xZihuLm1heExvYyxlKX19LHR9KCksdmE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInJlYWxcIixcImltYWdcIl0sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBmbG9hdCByZSA9IGFicyhnZXRSZWFsQXRPdXRDb29yZHMoKSk7XFxuICAgICAgICBmbG9hdCBpbSA9IGFicyhnZXRJbWFnQXRPdXRDb29yZHMoKSk7XFxuICAgICAgICBmbG9hdCBteCA9IG1heChyZSwgaW0pO1xcblxcbiAgICAgICAgLy8gc2FkbHkgdGhlIGxlbmd0aCBmdW5jdGlvbiBpbiBnbHNsIGlzIG5vdCB1bmRlcmZsb3ctc2FmZVxcbiAgICAgICAgLy8gKGF0IGxlYXN0IG5vdCBvbiBJbnRlbCBHUFVzKS4gU28gdGhlIHNhZmUgc29sdXRpb24gaXNcXG4gICAgICAgIC8vIHRvIGVuc3VyZSB1bmRlcmZsb3ctc2FmZXR5IGluIGFsbCBjYXNlcy5cXG4gICAgICAgIHNldE91dHB1dChcXG4gICAgICAgICAgbXggPT0gMC4wID8gMC4wIDogbXggKiBsZW5ndGgodmVjMigxLCBtaW4ocmUsIGltKS9teCkpXFxuICAgICAgICApO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLG1hPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT12bih0LDEpLHRoaXMudmFyaWFibGVOYW1lcz10Lm1hcChmdW5jdGlvbih0LGUpe3JldHVyblwiVFwiK2V9KTt2YXIgZT1uZXcgQXJyYXkodC5sZW5ndGgtMSk7ZVswXT10WzBdWzFdO2Zvcih2YXIgbj0xO248ZS5sZW5ndGg7bisrKWVbbl09ZVtuLTFdK3Rbbl1bMV07dmFyIHI9W1wiaWYgKHlDIDwgXCIrZVswXStcIikgc2V0T3V0cHV0KGdldFQwKHlSLCB5QykpO1wiXTtmb3Iobj0xO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW24tMV07ci5wdXNoKFwiZWxzZSBpZiAoeUMgPCBcIitlW25dK1wiKSBzZXRPdXRwdXQoZ2V0VFwiK24rXCIoeVIsIHlDLVwiK28rXCIpKTtcIil9dmFyIGE9ZS5sZW5ndGgsaT1lW2UubGVuZ3RoLTFdO3IucHVzaChcImVsc2Ugc2V0T3V0cHV0KGdldFRcIithK1wiKHlSLCB5Qy1cIitpK1wiKSk7XCIpLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCB5UiA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IHlDID0gY29vcmRzLnk7XFxuXFxuICAgICAgICBcIityLmpvaW4oXCJcXG4gICAgICAgIFwiKStcIlxcbiAgICAgIH1cXG4gICAgXCJ9fSgpLGdhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLm91dHB1dFNoYXBlPXZuKHQsZSk7dmFyIG49dGhpcy5vdXRwdXRTaGFwZSxyPW4ubGVuZ3RoLG89WG8ociksYT1NbyhcImNvb3Jkc1wiLHIpLGk9W1wieFwiLFwieVwiLFwielwiLFwid1wiLFwidVwiLFwidlwiXS5zbGljZSgwLHIpO3RoaXMudmFyaWFibGVOYW1lcz10Lm1hcChmdW5jdGlvbih0LGUpe3JldHVyblwiVFwiK2V9KTt2YXIgcz1uZXcgQXJyYXkodC5sZW5ndGgtMSk7c1swXT10WzBdW2VdO2Zvcih2YXIgdT0xO3U8cy5sZW5ndGg7dSsrKXNbdV09c1t1LTFdK3RbdV1bZV07dmFyIGw9aVtlXSxjPWkuc2xpY2UoLTIpLGg9aS5qb2luKCkscD1cImlmIChcIitsK1wiIDwgXCIrc1swXStcIikge1xcbiAgICAgICAgcmV0dXJuIGdldENoYW5uZWwoXFxuICAgICAgICAgICAgZ2V0VDAoXCIraCtcIiksIHZlYzIoXCIrYy5qb2luKCkrXCIpKTtcXG4gICAgICAgIH1cIjtmb3IodT0xO3U8cy5sZW5ndGg7dSsrKXt2YXIgZj1zW3UtMV07cCs9XCJcXG4gICAgICAgIGlmIChcIitsK1wiIDwgXCIrc1t1XStcIiAgJiYgXCIrbCtcIiA+PSBcIitzW3UtMV0rXCIpIHtcXG4gICAgICAgICAgcmV0dXJuIGdldENoYW5uZWwoXFxuICAgICAgICAgICAgZ2V0VFwiK3UrXCIoXCIreWEoaSxsLGYpK1wiKSxcXG4gICAgICAgICAgICB2ZWMyKFwiK3lhKGMsbCxmKStcIikpO1xcbiAgICAgICAgfVwifXZhciBkPXMubGVuZ3RoLHY9c1tzLmxlbmd0aC0xXTtwKz1cIlxcbiAgICAgICAgcmV0dXJuIGdldENoYW5uZWwoXFxuICAgICAgICAgIGdldFRcIitkK1wiKFwiK3lhKGksbCx2KStcIiksXFxuICAgICAgICAgIHZlYzIoXCIreWEoYyxsLHYpK1wiKSk7XCIsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGZsb2F0IGdldFZhbHVlKFwiK2kubWFwKGZ1bmN0aW9uKHQpe3JldHVyblwiaW50IFwiK3R9KStcIikge1xcbiAgICAgICAgXCIrcCtcIlxcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KGdldFZhbHVlKFwiK2ErXCIpLCAwLiwgMC4sIDAuKTtcXG5cXG4gICAgICAgIFwiK2Fbci0xXStcIiA9IFwiK2Fbci0xXStcIiArIDE7XFxuICAgICAgICBpZiAoXCIrYVtyLTFdK1wiIDwgXCIrbltyLTFdK1wiKSB7XFxuICAgICAgICAgIHJlc3VsdC5nID0gZ2V0VmFsdWUoXCIrYStcIik7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIithW3ItMl0rXCIgPSBcIithW3ItMl0rXCIgKyAxO1xcbiAgICAgICAgaWYgKFwiK2Fbci0yXStcIiA8IFwiK25bci0yXStcIikge1xcbiAgICAgICAgICByZXN1bHQuYSA9IGdldFZhbHVlKFwiK2ErXCIpO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgXCIrYVtyLTFdK1wiID0gXCIrYVtyLTFdK1wiIC0gMTtcXG4gICAgICAgIGlmIChcIithW3ItMl0rXCIgPCBcIituW3ItMl0rXCIgJiZcXG4gICAgICAgICAgICBcIithW3ItMV0rXCIgPCBcIituW3ItMV0rXCIpIHtcXG4gICAgICAgICAgcmVzdWx0LmIgPSBnZXRWYWx1ZShcIithK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpO2Z1bmN0aW9uIHlhKHQsZSxuKXt2YXIgcj10LmluZGV4T2YoZSk7cmV0dXJuIHQubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGU9PT1yP3QrXCIgLSBcIituOnR9KS5qb2luKCl9dmFyIHhhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCIsXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPXQuZmlsdGVyU2hhcGU7dmFyIGU9dC5zdHJpZGVIZWlnaHQsbj10LnN0cmlkZVdpZHRoLHI9dC5wYWRJbmZvLnRvcCxvPXQucGFkSW5mby5sZWZ0LGE9XCJjaGFubmVsc0xhc3RcIj09PXQuZGF0YUZvcm1hdDt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgd1IgPSBjb29yZHMueDtcXG4gICAgICAgIGludCB3QyA9IGNvb3Jkcy55O1xcbiAgICAgICAgaW50IGQxID0gY29vcmRzLno7XFxuICAgICAgICBpbnQgZDIgPSBjb29yZHMudztcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIHgoPywgPywgZDEpIHdpdGggZHkoOiwgOiwgZDIpIHRvIGdldCBkdyh3Uiwgd0MsIGQxLCBkMikuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCBiID0gMDsgYiA8IFwiK3QuYmF0Y2hTaXplK1wiOyBiKyspIHtcXG4gICAgICAgICAgZm9yIChpbnQgeVIgPSAwOyB5UiA8IFwiK3Qub3V0SGVpZ2h0K1wiOyB5UisrKSB7XFxuICAgICAgICAgICAgaW50IHhSID0gd1IgKyB5UiAqIFwiK2UrXCIgLSBcIityK1wiO1xcblxcbiAgICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrdC5pbkhlaWdodCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IHlDID0gMDsgeUMgPCBcIit0Lm91dFdpZHRoK1wiOyB5QysrKSB7XFxuICAgICAgICAgICAgICBpbnQgeEMgPSB3QyArIHlDICogXCIrbitcIiAtIFwiK28rXCI7XFxuXFxuICAgICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGlmIChcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSBnZXREeShiLCB5UiwgeUMsIGQyKTtcXG4gICAgICAgICAgICAgICAgZmxvYXQgeFZhbHVlID0gZ2V0WChiLCB4UiwgeEMsIGQxKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSAoeFZhbHVlICogZHlWYWx1ZSk7XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgZDIsIHlSLCB5Qyk7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9IGdldFgoYiwgZDEsIHhSLCB4Qyk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gKHhWYWx1ZSAqIGR5VmFsdWUpO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLGJhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiLFwiV1wiXSx0aGlzLm91dHB1dFNoYXBlPXQuaW5TaGFwZTt2YXIgZT10LmZpbHRlckhlaWdodCxuPXQuZmlsdGVyV2lkdGgscj10LnN0cmlkZUhlaWdodCxvPXQuc3RyaWRlV2lkdGgsYT1cImNoYW5uZWxzTGFzdFwiPT09dC5kYXRhRm9ybWF0LGk9ZS0xLXQucGFkSW5mby50b3Ascz1uLTEtdC5wYWRJbmZvLmxlZnQsdT1hPzE6MixsPWE/MjozLGM9YT8zOjE7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitpK1wiLCBcIitzK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkMSA9IGNvb3Jkc1tcIitjK1wiXTtcXG5cXG4gICAgICAgIGl2ZWMyIGR5Q29ybmVyID0gaXZlYzIoY29vcmRzW1wiK3UrXCJdLCBjb29yZHNbXCIrbCtcIl0pIC0gcGFkcztcXG4gICAgICAgIGludCBkeVJDb3JuZXIgPSBkeUNvcm5lci54O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5Q29ybmVyLnk7XFxuXFxuICAgICAgICAvLyBDb252b2x2ZSBkeSg/LCA/LCBkMikgd2l0aCB3KDosIDosIGQxLCBkMikgdG8gY29tcHV0ZSBkeCh4UiwgeEMsIGQxKS5cXG4gICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbCB2YWx1ZXMgaW4gdGhhdCBheGlzLlxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG4gICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIitlK1wiOyB3UisrKSB7XFxuICAgICAgICAgIGZsb2F0IGR5UiA9IGZsb2F0KGR5UkNvcm5lciArIHdSKSAvIFwiK3IrXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fCBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgaW50IHdSUGVybSA9IFwiK2UrXCIgLSAxIC0gd1I7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIituK1wiOyB3QysrKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIrbytcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwLjAgfHwgZHlDID49IFwiK3Qub3V0V2lkdGgrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICBpbnQgd0NQZXJtID0gXCIrbitcIiAtIDEgLSB3QztcXG5cXG4gICAgICAgICAgICBmb3IgKGludCBkMiA9IDA7IGQyIDwgXCIrdC5vdXRDaGFubmVscytcIjsgZDIrKykge1xcblxcbiAgICAgICAgICAgICAgaWYgKFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgZmxvYXQgeFZhbHVlID0gZ2V0RHkoYmF0Y2gsIGlkeVIsIGlkeUMsIGQyKTtcXG4gICAgICAgICAgICAgICAgZmxvYXQgd1ZhbHVlID0gZ2V0Vyh3UlBlcm0sIHdDUGVybSwgZDEsIGQyKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSB4VmFsdWUgKiB3VmFsdWU7XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXREeShiYXRjaCwgZDIsIGlkeVIsIGlkeUMpO1xcbiAgICAgICAgICAgICAgICBmbG9hdCB3VmFsdWUgPSBnZXRXKHdSUGVybSwgd0NQZXJtLCBkMSwgZDIpO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IHhWYWx1ZSAqIHdWYWx1ZTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSx3YT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwiZHlcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmZpbHRlclNoYXBlO3ZhciBlPXQuc3RyaWRlRGVwdGgsbj10LnN0cmlkZUhlaWdodCxyPXQuc3RyaWRlV2lkdGgsbz10LnBhZEluZm8uZnJvbnQsYT10LnBhZEluZm8udG9wLGk9dC5wYWRJbmZvLmxlZnQ7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IHdGID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgd1IgPSBjb29yZHMueTtcXG4gICAgICAgIGludCB3QyA9IGNvb3Jkcy56O1xcbiAgICAgICAgaW50IGQxID0gY29vcmRzLnc7XFxuICAgICAgICBpbnQgZDIgPSBjb29yZHMudTtcXG5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCBiID0gMDsgYiA8IFwiK3QuYmF0Y2hTaXplK1wiOyBiKyspIHtcXG4gICAgICAgICAgZm9yIChpbnQgeUYgPSAwOyB5RiA8IFwiK3Qub3V0RGVwdGgrXCI7IHlGKyspIHtcXG4gICAgICAgICAgICBpbnQgeEYgPSB3RiArIHlGICogXCIrZStcIiAtIFwiK28rXCI7XFxuXFxuICAgICAgICAgICAgaWYgKHhGIDwgMCB8fCB4RiA+PSBcIit0LmluRGVwdGgrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKGludCB5UiA9IDA7IHlSIDwgXCIrdC5vdXRIZWlnaHQrXCI7IHlSKyspIHtcXG4gICAgICAgICAgICAgIGludCB4UiA9IHdSICsgeVIgKiBcIituK1wiIC0gXCIrYStcIjtcXG5cXG4gICAgICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrdC5pbkhlaWdodCtcIikge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGZvciAoaW50IHlDID0gMDsgeUMgPCBcIit0Lm91dFdpZHRoK1wiOyB5QysrKSB7XFxuICAgICAgICAgICAgICAgIGludCB4QyA9IHdDICsgeUMgKiBcIityK1wiIC0gXCIraStcIjtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIit0LmluV2lkdGgrXCIpIHtcXG4gICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgeUYsIHlSLCB5QywgZDIpO1xcbiAgICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXRYKGIsIHhGLCB4UiwgeEMsIGQxKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSAoeFZhbHVlICogZHlWYWx1ZSk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksQ2E9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCIsXCJXXCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuZmlsdGVyRGVwdGgsbj10LmZpbHRlckhlaWdodCxyPXQuZmlsdGVyV2lkdGgsbz10LnN0cmlkZURlcHRoLGE9dC5zdHJpZGVIZWlnaHQsaT10LnN0cmlkZVdpZHRoLHM9ZS0xLXQucGFkSW5mby5mcm9udCx1PW4tMS10LnBhZEluZm8udG9wLGw9ci0xLXQucGFkSW5mby5sZWZ0O3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMyBwYWRzID0gaXZlYzMoXCIrcytcIiwgXCIrdStcIiwgXCIrbCtcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzUgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgIGludCBkMSA9IGNvb3Jkcy51O1xcblxcblxcbiAgICAgICAgaXZlYzMgZHlDb3JuZXIgPSBpdmVjMyhjb29yZHMueSwgY29vcmRzLnosIGNvb3Jkcy53KSAtIHBhZHM7XFxuICAgICAgICBpbnQgZHlGQ29ybmVyID0gZHlDb3JuZXIueDtcXG4gICAgICAgIGludCBkeVJDb3JuZXIgPSBkeUNvcm5lci55O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5Q29ybmVyLno7XFxuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcbiAgICAgICAgZm9yIChpbnQgd0YgPSAwOyB3RiA8IFwiK2UrXCI7IHdGKyspIHtcXG4gICAgICAgICAgZmxvYXQgZHlGID0gZmxvYXQoZHlGQ29ybmVyICsgd0YpIC8gXCIrbytcIi4wO1xcblxcbiAgICAgICAgICBpZiAoZHlGIDwgMC4wIHx8IGR5RiA+PSBcIit0Lm91dERlcHRoK1wiLjAgfHwgZnJhY3QoZHlGKSA+IDAuMCkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIGludCBpZHlGID0gaW50KGR5Rik7XFxuXFxuICAgICAgICAgIGludCB3RlBlcm0gPSBcIitlK1wiIC0gMSAtIHdGO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrbitcIjsgd1IrKykge1xcbiAgICAgICAgICAgIGZsb2F0IGR5UiA9IGZsb2F0KGR5UkNvcm5lciArIHdSKSAvIFwiK2ErXCIuMDtcXG5cXG4gICAgICAgICAgICBpZiAoZHlSIDwgMC4wIHx8IGR5UiA+PSBcIit0Lm91dEhlaWdodCtcIi4wIHx8XFxuICAgICAgICAgICAgICBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgICBpbnQgd1JQZXJtID0gXCIrbitcIiAtIDEgLSB3UjtcXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrcitcIjsgd0MrKykge1xcbiAgICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIraStcIi4wO1xcblxcbiAgICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgICAgZnJhY3QoZHlDKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIGludCBpZHlDID0gaW50KGR5Qyk7XFxuXFxuICAgICAgICAgICAgICBpbnQgd0NQZXJtID0gXCIrcitcIiAtIDEgLSB3QztcXG5cXG4gICAgICAgICAgICAgIGZvciAoaW50IGQyID0gMDsgZDIgPCBcIit0Lm91dENoYW5uZWxzK1wiOyBkMisrKSB7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9IGdldER5KGJhdGNoLCBpZHlGLCBpZHlSLCBpZHlDLCBkMik7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHdWYWx1ZSA9IGdldFcod0ZQZXJtLCB3UlBlcm0sIHdDUGVybSwgZDEsIGQyKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSB4VmFsdWUgKiB3VmFsdWU7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksRWE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9dC5maWx0ZXJTaGFwZTt2YXIgZT10LnN0cmlkZUhlaWdodCxuPXQuc3RyaWRlV2lkdGgscj10LnBhZEluZm8udG9wLG89dC5wYWRJbmZvLmxlZnQsYT10Lm91dENoYW5uZWxzL3QuaW5DaGFubmVsczt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgd1IgPSBjb29yZHMueDtcXG4gICAgICAgIGludCB3QyA9IGNvb3Jkcy55O1xcbiAgICAgICAgaW50IGQxID0gY29vcmRzLno7XFxuICAgICAgICBpbnQgZG0gPSBjb29yZHMudztcXG4gICAgICAgIGludCBkMiA9IGQxICogXCIrYStcIiArIGRtO1xcblxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG5cXG4gICAgICAgIC8vIFRPIERPOiBWZWM0IG92ZXIgdGhlIGJhdGNoIHNpemVcXG4gICAgICAgIGZvciAoaW50IGIgPSAwOyBiIDwgXCIrdC5iYXRjaFNpemUrXCI7IGIrKykge1xcbiAgICAgICAgICBmb3IgKGludCB5UiA9IDA7IHlSIDwgXCIrdC5vdXRIZWlnaHQrXCI7IHlSKyspIHtcXG4gICAgICAgICAgICBpbnQgeFIgPSB3UiArIHlSICogXCIrZStcIiAtIFwiK3IrXCI7XFxuXFxuICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgeUMgPSAwOyB5QyA8IFwiK3Qub3V0V2lkdGgrXCI7IHlDKyspIHtcXG4gICAgICAgICAgICAgIGludCB4QyA9IHdDICsgeUMgKiBcIituK1wiIC0gXCIrbytcIjtcXG5cXG4gICAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgZmxvYXQgZHlWYWx1ZSA9IGdldER5KGIsIHlSLCB5QywgZDIpO1xcbiAgICAgICAgICAgICAgZmxvYXQgeFZhbHVlID0gZ2V0WChiLCB4UiwgeEMsIGQxKTtcXG4gICAgICAgICAgICAgIGRvdFByb2QgKz0gKHhWYWx1ZSAqIGR5VmFsdWUpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLFJhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiLFwiV1wiXSx0aGlzLm91dHB1dFNoYXBlPXQuaW5TaGFwZTt2YXIgZT10LmZpbHRlckhlaWdodCxuPXQuZmlsdGVyV2lkdGgscj10LnN0cmlkZUhlaWdodCxvPXQuc3RyaWRlV2lkdGgsYT1lLTEtdC5wYWRJbmZvLnRvcCxpPW4tMS10LnBhZEluZm8ubGVmdCxzPXQub3V0Q2hhbm5lbHMvdC5pbkNoYW5uZWxzO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIrYStcIiwgXCIraStcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZDEgPSBjb29yZHNbM107XFxuICAgICAgICBpdmVjMiBkeUNvcm5lciA9IGNvb3Jkcy55eiAtIHBhZHM7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlDb3JuZXIueDtcXG4gICAgICAgIGludCBkeUNDb3JuZXIgPSBkeUNvcm5lci55O1xcblxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIitlK1wiOyB3UisrKSB7XFxuICAgICAgICAgIGZsb2F0IGR5UiA9IGZsb2F0KGR5UkNvcm5lciArIHdSKSAvIFwiK3IrXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fCBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgaW50IHdSUGVybSA9IFwiK2UrXCIgLSAxIC0gd1I7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIituK1wiOyB3QysrKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIrbytcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwLjAgfHwgZHlDID49IFwiK3Qub3V0V2lkdGgrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICBpbnQgd0NQZXJtID0gXCIrbitcIiAtIDEgLSB3QztcXG5cXG4gICAgICAgICAgICAvLyBUTyBETzogVmVjNCBvdmVyIHRoZSBjaGFubmVsTXVsXFxuICAgICAgICAgICAgZm9yIChpbnQgZG0gPSAwOyBkbSA8IFwiK3MrXCI7IGRtKyspIHtcXG4gICAgICAgICAgICAgIGludCBkMiA9IGQxICogXCIrcytcIiArIGRtO1xcbiAgICAgICAgICAgICAgZmxvYXQgeFZhbHVlID0gZ2V0RHkoYmF0Y2gsIGlkeVIsIGlkeUMsIGQyKTtcXG4gICAgICAgICAgICAgIGZsb2F0IHdWYWx1ZSA9IGdldFcod1JQZXJtLCB3Q1Blcm0sIGQxLCBkbSk7XFxuICAgICAgICAgICAgICBkb3RQcm9kICs9IHhWYWx1ZSAqIHdWYWx1ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxJYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1lJiYoZT0hMSksdm9pZCAwPT09biYmKG49bnVsbCksdm9pZCAwPT09ciYmKHI9ITEpLHRoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCIsXCJXXCJdLHRoaXMub3V0cHV0U2hhcGU9dC5vdXRTaGFwZTt2YXIgbz10LnBhZEluZm8udG9wLGE9dC5wYWRJbmZvLmxlZnQsaT10LnN0cmlkZUhlaWdodCxzPXQuc3RyaWRlV2lkdGgsdT10LmRpbGF0aW9uSGVpZ2h0LGw9dC5kaWxhdGlvbldpZHRoLGM9dC5maWx0ZXJIZWlnaHQsaD10LmZpbHRlcldpZHRoLHA9NCpNYXRoLmZsb29yKHQuaW5DaGFubmVscy80KSxmPXQuaW5DaGFubmVscyU0LGQ9XCJjaGFubmVsc0xhc3RcIj09PXQuZGF0YUZvcm1hdCx2PWQ/MToyLG09ZD8yOjMsZz1kPzM6MSx5PVwiXCIseD1cIlwiO24mJih5PXI/XCJmbG9hdCBhY3RpdmF0aW9uKGZsb2F0IGEpIHtcXG4gICAgICAgICAgZmxvYXQgYiA9IGdldFByZWx1QWN0aXZhdGlvbldlaWdodHNBdE91dENvb3JkcygpO1xcbiAgICAgICAgICBcIituK1wiXFxuICAgICAgICB9XCI6XCJcXG4gICAgICAgICAgZmxvYXQgYWN0aXZhdGlvbihmbG9hdCB4KSB7XFxuICAgICAgICAgICAgXCIrbitcIlxcbiAgICAgICAgICB9XFxuICAgICAgICBcIix4PVwicmVzdWx0ID0gYWN0aXZhdGlvbihyZXN1bHQpO1wiKTt2YXIgYj1lP1wicmVzdWx0ICs9IGdldEJpYXNBdE91dENvb3JkcygpO1wiOlwiXCI7ZSYmdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJiaWFzXCIpLHImJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwicHJlbHVBY3RpdmF0aW9uV2VpZ2h0c1wiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIreStcIlxcblxcbiAgICAgIGNvbnN0IGl2ZWMyIHN0cmlkZXMgPSBpdmVjMihcIitpK1wiLCBcIitzK1wiKTtcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIrbytcIiwgXCIrYStcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZDIgPSBjb29yZHNbXCIrZytcIl07XFxuXFxuICAgICAgICBpdmVjMiB4UkNDb3JuZXIgPVxcbiAgICAgICAgICAgIGl2ZWMyKGNvb3Jkc1tcIit2K1wiXSwgY29vcmRzW1wiK20rXCJdKSAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgaW50IHhSQ29ybmVyID0geFJDQ29ybmVyLng7XFxuICAgICAgICBpbnQgeENDb3JuZXIgPSB4UkNDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIHgoPywgPywgZDEpIHdpdGggdyg6LCA6LCBkMSwgZDIpIHRvIGdldCB5KHlSLCB5QywgZDIpLlxcbiAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWQuIDogPSBhY3Jvc3MgYWxsIHZhbHVlcyBpbiB0aGF0IGF4aXMuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcbiAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK2MrXCI7IHdSKyspIHtcXG4gICAgICAgICAgaW50IHhSID0geFJDb3JuZXIgKyB3UiAqIFwiK3UrXCI7XFxuXFxuICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrdC5pbkhlaWdodCtcIikge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIitoK1wiOyB3QysrKSB7XFxuICAgICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyB3QyAqIFwiK2wrXCI7XFxuXFxuICAgICAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIit0LmluV2lkdGgrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKGludCBkMSA9IDA7IGQxIDwgXCIrcCtcIjsgZDEgKz0gNCkge1xcbiAgICAgICAgICAgICAgdmVjNCB3VmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIGQxLCBkMiksXFxuICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBkMSArIDEsIGQyKSxcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIGQxICsgMiwgZDIpLFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgZDEgKyAzLCBkMilcXG4gICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrZCtcIikge1xcbiAgICAgICAgICAgICAgICB2ZWM0IHhWYWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgZDEpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgZDEgKyAxKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxICsgMiksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBkMSArIDMpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgdmVjNCB4VmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBkMSwgeFIsIHhDKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBkMSArIDEsIHhSLCB4QyksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgZDEgKyAyLCB4UiwgeEMpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIGQxICsgMywgeFIsIHhDKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IGRvdCh4VmFsdWVzLCB3VmFsdWVzKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgaWYgKFwiKygxPT09ZikrXCIpIHtcXG5cXG4gICAgICAgICAgICAgIGlmIChcIitkK1wiKSB7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz1cXG4gICAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgXCIrcCtcIikgKlxcbiAgICAgICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIFwiK3ArXCIsIGQyKTtcXG4gICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz1cXG4gICAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIFwiK3ArXCIsIHhSLCB4QykgKlxcbiAgICAgICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIFwiK3ArXCIsIGQyKTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFwiKygyPT09ZikrXCIpIHtcXG4gICAgICAgICAgICAgIHZlYzIgd1ZhbHVlcyA9IHZlYzIoXFxuICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBcIitwK1wiLCBkMiksXFxuICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBcIitwK1wiICsgMSwgZDIpXFxuICAgICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgICAgaWYgKFwiK2QrXCIpIHtcXG4gICAgICAgICAgICAgICAgdmVjMiB4VmFsdWVzID0gdmVjMihcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIFwiK3ArXCIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgXCIrcCtcIiArIDEpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgdmVjMiB4VmFsdWVzID0gdmVjMihcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBcIitwK1wiLCB4UiwgeEMpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIFwiK3ArXCIgKyAxLCB4UiwgeEMpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCIrKDM9PT1mKStcIikge1xcbiAgICAgICAgICAgICAgdmVjMyB3VmFsdWVzID0gdmVjMyhcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIFwiK3ArXCIsIGQyKSxcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIFwiK3ArXCIgKyAxLCBkMiksXFxuICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBcIitwK1wiICsgMiwgZDIpXFxuICAgICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgICAgaWYgKFwiK2QrXCIpIHtcXG4gICAgICAgICAgICAgICAgdmVjMyB4VmFsdWVzID0gdmVjMyhcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIFwiK3ArXCIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgXCIrcCtcIiArIDEpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgXCIrcCtcIiArIDIpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgdmVjMyB4VmFsdWVzID0gdmVjMyhcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBcIitwK1wiLCB4UiwgeEMpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIFwiK3ArXCIgKyAxLCB4UiwgeEMpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIFwiK3ArXCIgKyAyLCB4UiwgeEMpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgZmxvYXQgcmVzdWx0ID0gZG90UHJvZDtcXG4gICAgICAgIFwiK2IrXCJcXG4gICAgICAgIFwiK3grXCJcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLGthPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCIsXCJXXCJdLHRoaXMub3V0cHV0U2hhcGU9dC5vdXRTaGFwZTt2YXIgZT10LnBhZEluZm8uZnJvbnQsbj10LnBhZEluZm8udG9wLHI9dC5wYWRJbmZvLmxlZnQsbz10LnN0cmlkZURlcHRoLGE9dC5zdHJpZGVIZWlnaHQsaT10LnN0cmlkZVdpZHRoLHM9dC5kaWxhdGlvbkRlcHRoLHU9dC5kaWxhdGlvbkhlaWdodCxsPXQuZGlsYXRpb25XaWR0aCxjPXQuZmlsdGVyRGVwdGgsaD10LmZpbHRlckhlaWdodCxwPXQuZmlsdGVyV2lkdGgsZj00Kk1hdGguZmxvb3IodC5pbkNoYW5uZWxzLzQpLGQ9dC5pbkNoYW5uZWxzJTQ7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMzIHN0cmlkZXMgPSBpdmVjMyhcIitvK1wiLCBcIithK1wiLCBcIitpK1wiKTtcXG4gICAgICBjb25zdCBpdmVjMyBwYWRzID0gaXZlYzMoXCIrZStcIiwgXCIrbitcIiwgXCIrcitcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzUgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgIGludCBkMiA9IGNvb3Jkcy51O1xcblxcbiAgICAgICAgaXZlYzMgeEZSQ0Nvcm5lciA9IGl2ZWMzKGNvb3Jkcy55LCBjb29yZHMueiwgY29vcmRzLncpICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICBpbnQgeEZDb3JuZXIgPSB4RlJDQ29ybmVyLng7XFxuICAgICAgICBpbnQgeFJDb3JuZXIgPSB4RlJDQ29ybmVyLnk7XFxuICAgICAgICBpbnQgeENDb3JuZXIgPSB4RlJDQ29ybmVyLno7XFxuXFxuICAgICAgICAvLyBDb252b2x2ZSB4KD8sID8sID8sIGQxKSB3aXRoIHcoOiwgOiwgOiwgZDEsIGQyKSB0byBnZXRcXG4gICAgICAgIC8vIHkoeUYsIHlSLCB5QywgZDIpLiA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGxcXG4gICAgICAgIC8vIHZhbHVlcyBpbiB0aGF0IGF4aXMuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcbiAgICAgICAgZm9yIChpbnQgd0YgPSAwOyB3RiA8IFwiK2MrXCI7IHdGKyspIHtcXG4gICAgICAgICAgaW50IHhGID0geEZDb3JuZXIgKyB3RiAqIFwiK3MrXCI7XFxuXFxuICAgICAgICAgIGlmICh4RiA8IDAgfHwgeEYgPj0gXCIrdC5pbkRlcHRoK1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK2grXCI7IHdSKyspIHtcXG4gICAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSICogXCIrdStcIjtcXG5cXG4gICAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrcCtcIjsgd0MrKykge1xcbiAgICAgICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyB3QyAqIFwiK2wrXCI7XFxuXFxuICAgICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGZvciAoaW50IGQxID0gMDsgZDEgPCBcIitmK1wiOyBkMSArPSA0KSB7XFxuICAgICAgICAgICAgICAgIHZlYzQgeFZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgZDEpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIGQxICsgMSksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgZDEgKyAyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBkMSArIDMpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIHZlYzQgd1ZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBkMSwgZDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgZDEgKyAxLCBkMiksXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBkMSArIDIsIGQyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIGQxICsgMywgZDIpXFxuICAgICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgaWYgKFwiKygxPT09ZCkrXCIpIHtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPVxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIFwiK2YrXCIpICpcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIFwiK2YrXCIsIGQyKTtcXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoXCIrKDI9PT1kKStcIikge1xcbiAgICAgICAgICAgICAgICB2ZWMyIHhWYWx1ZXMgPSB2ZWMyKFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIFwiK2YrXCIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIFwiK2YrXCIgKyAxKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICB2ZWMyIHdWYWx1ZXMgPSB2ZWMyKFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgXCIrZitcIiwgZDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgXCIrZitcIiArIDEsIGQyKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IGRvdCh4VmFsdWVzLCB3VmFsdWVzKTtcXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoXCIrKDM9PT1kKStcIikge1xcbiAgICAgICAgICAgICAgICB2ZWMzIHhWYWx1ZXMgPSB2ZWMzKFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIFwiK2YrXCIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIFwiK2YrXCIgKyAxKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBcIitmK1wiICsgMilcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgdmVjMyB3VmFsdWVzID0gdmVjMyhcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIFwiK2YrXCIsIGQyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIFwiK2YrXCIgKyAxLCBkMiksXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBcIitmK1wiICsgMiwgZDIpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gZG90KHhWYWx1ZXMsIHdWYWx1ZXMpO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLE5hPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PWUmJihlPSExKSx2b2lkIDA9PT1uJiYobj1udWxsKSx2b2lkIDA9PT1yJiYocj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIldcIl0sdGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO3ZhciBvPXQuaW5IZWlnaHQsYT10LmluV2lkdGgsaT10LnBhZEluZm8udG9wLHM9dC5wYWRJbmZvLmxlZnQsdT10LnN0cmlkZUhlaWdodCxsPXQuc3RyaWRlV2lkdGgsYz10LmRpbGF0aW9uSGVpZ2h0LGg9dC5kaWxhdGlvbldpZHRoLHA9dC5maWx0ZXJIZWlnaHQsZj10LmZpbHRlcldpZHRoLGQ9dC5vdXRDaGFubmVscy90LmluQ2hhbm5lbHMsdj1cIlwiLG09XCJcIjtuJiYodj1yP1wiZmxvYXQgYWN0aXZhdGlvbihmbG9hdCBhKSB7XFxuICAgICAgICAgIGZsb2F0IGIgPSBnZXRQcmVsdUFjdGl2YXRpb25XZWlnaHRzQXRPdXRDb29yZHMoKTtcXG4gICAgICAgICAgXCIrbitcIlxcbiAgICAgICAgfVwiOlwiXFxuICAgICAgICAgIGZsb2F0IGFjdGl2YXRpb24oZmxvYXQgeCkge1xcbiAgICAgICAgICAgIFwiK24rXCJcXG4gICAgICAgICAgfVxcbiAgICAgICAgXCIsbT1cInJlc3VsdCA9IGFjdGl2YXRpb24ocmVzdWx0KTtcIik7dmFyIGc9ZT9cInJlc3VsdCArPSBnZXRCaWFzQXRPdXRDb29yZHMoKTtcIjpcIlwiO2UmJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwiYmlhc1wiKSxyJiZ0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcInByZWx1QWN0aXZhdGlvbldlaWdodHNcIiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK3YrXCJcXG5cXG4gICAgICBjb25zdCBpdmVjMiBzdHJpZGVzID0gaXZlYzIoXCIrdStcIiwgXCIrbCtcIik7XFxuICAgICAgY29uc3QgaXZlYzIgcGFkcyA9IGl2ZWMyKFwiK2krXCIsIFwiK3MrXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpdmVjMiB4UkNDb3JuZXIgPSBjb29yZHMueXogKiBzdHJpZGVzIC0gcGFkcztcXG4gICAgICAgIGludCBkMiA9IGNvb3Jkcy53O1xcbiAgICAgICAgaW50IGQxID0gZDIgLyBcIitkK1wiO1xcbiAgICAgICAgaW50IHEgPSBkMiAtIGQxICogXCIrZCtcIjtcXG5cXG4gICAgICAgIGludCB4UkNvcm5lciA9IHhSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IHhDQ29ybmVyID0geFJDQ29ybmVyLnk7XFxuXFxuICAgICAgICAvLyBDb252b2x2ZSB4KD8sID8sIGQxKSB3aXRoIHcoOiwgOiwgZDEsIHEpIHRvIGdldCB5KHlSLCB5QywgZDIpLlxcbiAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWQuIDogPSBhY3Jvc3MgYWxsIHZhbHVlcyBpbiB0aGF0IGF4aXMuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcbiAgICAgICAgLy8gVE8gRE8oZHNtaWxrb3YpOiBGbGF0dGVuIHRoZSB0d28gZm9yIGxvb3BzIGFuZCB2ZWM0IHRoZSBvcGVyYXRpb25zLlxcbiAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK3ArXCI7IHdSKyspIHtcXG4gICAgICAgICAgaW50IHhSID0geFJDb3JuZXIgKyB3UiAqIFwiK2MrXCI7XFxuXFxuICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrbytcIikge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIitmK1wiOyB3QysrKSB7XFxuICAgICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyB3QyAqIFwiK2grXCI7XFxuXFxuICAgICAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIithK1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZmxvYXQgeFZhbCA9IGdldFgoYmF0Y2gsIHhSLCB4QywgZDEpO1xcbiAgICAgICAgICAgIGZsb2F0IHdWYWwgPSBnZXRXKHdSLCB3QywgZDEsIHEpO1xcbiAgICAgICAgICAgIGRvdFByb2QgKz0geFZhbCAqIHdWYWw7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGZsb2F0IHJlc3VsdCA9IGRvdFByb2Q7XFxuICAgICAgICBcIitnK1wiXFxuICAgICAgICBcIittK1wiXFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxTYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1lJiYoZT0hMSksdm9pZCAwPT09biYmKG49bnVsbCksdm9pZCAwPT09ciYmKHI9ITEpLHRoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCIsXCJXXCJdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwLHRoaXMub3V0cHV0U2hhcGU9dC5vdXRTaGFwZTtmb3IodmFyIG89dC5pbkhlaWdodCxhPXQuaW5XaWR0aCxpPXQucGFkSW5mby50b3Ascz10LnBhZEluZm8ubGVmdCx1PXQuc3RyaWRlSGVpZ2h0LGw9dC5zdHJpZGVXaWR0aCxjPXQuZGlsYXRpb25IZWlnaHQscD10LmRpbGF0aW9uV2lkdGgsZj10LmZpbHRlckhlaWdodCxkPXQuZmlsdGVyV2lkdGgsdj1kLG09XCJpbnQgeFI7IGludCB4QzsgaW50IHhDT2Zmc2V0O1wiLGc9MDtnPGY7ZysrKWZvcih2YXIgeT0wO3k8ZDt5KyspbSs9XCJcXG4gICAgICAgICAgdmVjNCB4VGV4ZWxSXCIrZytcIkNcIisyKnkrXCIgPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgdmVjNCB3UlwiK2crXCJDXCIreStcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICB2ZWM0IHhSXCIrZytcIkNcIit5K1wiID0gdmVjNCgwLik7XCI7Zm9yKGc9MDtnPGY7ZysrKWZvcih2YXIgeD0wO3g8djt4Kyspe2lmKG0rPVwiXFxuICAgICAgICAgIHhSID0geFJDb3JuZXIgKyBcIitnKmMrXCI7XFxuICAgICAgICAgIHhDID0geENDb3JuZXIgKyBcIisoeT0yKngpKnArXCI7XFxuICAgICAgICBcIiwxPT09bCl7aWYoeTxkJiYobSs9cyUyPT0xP1wiXFxuICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID0geEMgKyAxO1xcbiAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJiB4Q09mZnNldCA+PSAwICYmIHhDT2Zmc2V0IDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitnK1wiQ1wiK3krXCIgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZytcIkNcIit5K1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIDEgLSAyO1xcbiAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJiB4Q09mZnNldCA+PSAwICYmIHhDT2Zmc2V0IDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgIHZlYzQgcHJldmlvdXMgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgICB4UlwiK2crXCJDXCIreStcIiA9IHZlYzQocHJldmlvdXMuencsIHhUZXhlbFJcIitnK1wiQ1wiK3krXCIueHkpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgIHhSXCIrZytcIkNcIit5K1wiID0gdmVjNCgwLCAwLCB4VGV4ZWxSXCIrZytcIkNcIit5K1wiLnh5KTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgXCI6XCJcXG4gICAgICAgICAgICAgICAgaWYoeFIgPj0gMCAmJiB4UiA8IFwiK28rXCIgJiYgeEMgPj0gMCAmJiB4QyA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZytcIkNcIit5K1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDLCBkMSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2crXCJDXCIreStcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHhSXCIrZytcIkNcIit5K1wiID0geFRleGVsUlwiK2crXCJDXCIreStcIjtcXG4gICAgICAgICAgICAgIFwiLHkrMTxkKSl7dmFyIGI9cyUyPT0wP2gocCk6cDtwJTI9PTAmJnMlMj09MXx8cCUyIT0wJiZzJTIhPTE/KG0rPVwiXFxuICAgICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIFwiK3MlMitcIiArIFwiK2IrXCI7XFxuXFxuICAgICAgICAgICAgICAgICAgaWYoeFIgPj0gMCAmJiB4UiA8IFwiK28rXCIgJiZcXG4gICAgICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZytcIkNcIisoeSsyKStcIiA9IGdldFgoYmF0Y2gsIHhSLCB4Q09mZnNldCwgZDEpO1xcbiAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgXCIscD4xJiYobSs9XCJcXG4gICAgICAgICAgICAgICAgICAgIHhDT2Zmc2V0IC09IDI7XFxuICAgICAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrbytcIiAmJlxcbiAgICAgICAgICAgICAgICAgICAgICB4Q09mZnNldCA+PSAwICYmIHhDT2Zmc2V0IDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZytcIkNcIit5K1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZytcIkNcIit5K1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgXCIpLG0rPVwiXFxuICAgICAgICAgICAgICAgICAgeFJcIitnK1wiQ1wiKyh5KzEpK1wiID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitnK1wiQ1wiK3krXCIuencsIHhUZXhlbFJcIitnK1wiQ1wiKyh5KzIpK1wiLnh5KTtcXG4gICAgICAgICAgICAgICAgXCIpOm0rPVwiXFxuICAgICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIFwiK2IrXCI7XFxuXFxuICAgICAgICAgICAgICAgICAgaWYoeFIgPj0gMCAmJiB4UiA8IFwiK28rXCIgJiZcXG4gICAgICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZytcIkNcIisoeSsyKStcIiA9IGdldFgoYmF0Y2gsIHhSLCB4Q09mZnNldCwgZDEpO1xcbiAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgICB4UlwiK2crXCJDXCIrKHkrMSkrXCIgPSB4VGV4ZWxSXCIrZytcIkNcIisoeSsyKStcIjtcXG4gICAgICAgICAgICAgICAgXCJ9fWVsc2UgeTxkJiYobSs9XCJcXG4gICAgICAgICAgICAgIGlmKHhSID49IDAgJiYgeFIgPCBcIitvK1wiKSB7XFxuICAgICAgICAgICAgXCIscyUyPT0xPyhtKz1cIlxcbiAgICAgICAgICAgICAgICB4Q09mZnNldCA9IHhDICsgMSAtIFwiK2wrXCI7XFxuICAgICAgICAgICAgICAgIGlmKHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2crXCJDXCIreStcIiA9IGdldFgoYmF0Y2gsIHhSLCB4Q09mZnNldCwgZDEpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitnK1wiQ1wiK3krXCIgPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBpZih4QyArIDEgPj0gMCAmJiB4QyArIDEgPCBcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2crXCJDXCIrKHkrMikrXCIgPSBnZXRYKGJhdGNoLCB4UiwgeEMgKyAxLCBkMSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2crXCJDXCIrKHkrMikrXCIgPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICB4UlwiK2crXCJDXCIreStcIiA9IHZlYzQoXFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2crXCJDXCIreStcIi56dywgeFRleGVsUlwiK2crXCJDXCIrKHkrMikrXCIuencpO1xcbiAgICAgICAgICAgICAgXCIseSsxPGQmJihtKz1cIlxcbiAgICAgICAgICAgICAgICAgIHZlYzQgZmluYWwgPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgICAgICAgICB4Q09mZnNldCA9IHhDICsgMSArIFwiK2wrXCI7XFxuICAgICAgICAgICAgICAgICAgaWYoeENPZmZzZXQgPj0gMCAmJiB4Q09mZnNldCA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIGZpbmFsID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgIHhSXCIrZytcIkNcIisoeSsxKStcIiA9IHZlYzQoeFRleGVsUlwiK2crXCJDXCIrKHkrMikrXCIueHksIGZpbmFsLnh5KTtcXG4gICAgICAgICAgICAgICAgXCIpKToobSs9XCJcXG4gICAgICAgICAgICAgICAgaWYoeEMgPj0gMCAmJiB4QyA8IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZytcIkNcIit5K1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDLCBkMSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2crXCJDXCIreStcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID0geEMgKyBcIitsK1wiO1xcbiAgICAgICAgICAgICAgICBpZih4Q09mZnNldCA+PSAwICYmIHhDT2Zmc2V0IDwgXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitnK1wiQ1wiKyh5KzIpK1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2crXCJDXCIrKHkrMikrXCIgPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICB4UlwiK2crXCJDXCIreStcIiA9IHZlYzQoXFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2crXCJDXCIreStcIi54eSwgeFRleGVsUlwiK2crXCJDXCIrKHkrMikrXCIueHkpO1xcbiAgICAgICAgICAgICAgXCIseSsxPGQmJihtKz1cIlxcbiAgICAgICAgICAgICAgICAgIHhSXCIrZytcIkNcIisoeSsxKStcIiA9IHZlYzQoXFxuICAgICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZytcIkNcIit5K1wiLnp3LCB4VGV4ZWxSXCIrZytcIkNcIisoeSsyKStcIi56dyk7XFxuICAgICAgICAgICAgICAgIFwiKSksbSs9XCJ9XCIpO3k8ZCYmKG0rPVwiXFxuICAgICAgICAgICAgdmVjNCB3VGV4ZWxSXCIrZytcIkNcIit5K1wiID0gZ2V0VyhcIitnK1wiLCBcIit5K1wiLCBkMSwgcSk7XFxuICAgICAgICAgICAgd1JcIitnK1wiQ1wiK3krXCIgPSB2ZWM0KHdUZXhlbFJcIitnK1wiQ1wiK3krXCIueHosIHdUZXhlbFJcIitnK1wiQ1wiK3krXCIueHopO1xcbiAgICAgICAgICBcIix5KzE8ZCYmKG0rPVwiXFxuICAgICAgICAgICAgICB2ZWM0IHdUZXhlbFJcIitnK1wiQ1wiKyh5KzEpK1wiID0gZ2V0VyhcIitnK1wiLCBcIisoeSsxKStcIiwgZDEsIHEpO1xcbiAgICAgICAgICAgICAgd1JcIitnK1wiQ1wiKyh5KzEpK1wiID1cXG4gICAgICAgICAgICAgICAgdmVjNCh3VGV4ZWxSXCIrZytcIkNcIisoeSsxKStcIi54eiwgd1RleGVsUlwiK2crXCJDXCIrKHkrMSkrXCIueHopO1wiKSl9Zm9yKGc9MDtnPGY7ZysrKWZvcih5PTA7eTxkO3krKyltKz1cImRvdFByb2QgKz0geFJcIitnK1wiQ1wiK3krXCIgKiB3UlwiK2crXCJDXCIreStcIjtcIjt2YXIgdz1cIlwiLEM9XCJcIjtuJiYodz1yP1widmVjNCBhY3RpdmF0aW9uKHZlYzQgYSkge1xcbiAgICAgICAgICB2ZWM0IGIgPSBnZXRQcmVsdUFjdGl2YXRpb25XZWlnaHRzQXRPdXRDb29yZHMoKTtcXG4gICAgICAgICAgXCIrbitcIlxcbiAgICAgICAgfVwiOlwidmVjNCBhY3RpdmF0aW9uKHZlYzQgeCkge1xcbiAgICAgICAgICBcIituK1wiXFxuICAgICAgICB9XCIsQz1cInJlc3VsdCA9IGFjdGl2YXRpb24ocmVzdWx0KTtcIik7dmFyIEU9ZT9cInJlc3VsdCArPSBnZXRCaWFzQXRPdXRDb29yZHMoKTtcIjpcIlwiO2UmJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwiYmlhc1wiKSxyJiZ0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcInByZWx1QWN0aXZhdGlvbldlaWdodHNcIiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK3crXCJcXG5cXG4gICAgICBjb25zdCBpdmVjMiBzdHJpZGVzID0gaXZlYzIoXCIrdStcIiwgXCIrbCtcIik7XFxuICAgICAgY29uc3QgaXZlYzIgcGFkcyA9IGl2ZWMyKFwiK2krXCIsIFwiK3MrXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG5cXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpdmVjMiB4UkNDb3JuZXIgPSBjb29yZHMueXogKiBzdHJpZGVzIC0gcGFkcztcXG4gICAgICAgIGludCBkMiA9IGNvb3Jkcy53O1xcbiAgICAgICAgaW50IGQxID0gZDI7XFxuICAgICAgICBpbnQgcSA9IDA7XFxuICAgICAgICBpbnQgeFJDb3JuZXIgPSB4UkNDb3JuZXIueDtcXG4gICAgICAgIGludCB4Q0Nvcm5lciA9IHhSQ0Nvcm5lci55O1xcblxcbiAgICAgICAgdmVjNCBkb3RQcm9kID0gdmVjNCgwLik7XFxuXFxuICAgICAgICBcIittK1wiXFxuXFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IGRvdFByb2Q7XFxuICAgICAgICBcIitFK1wiXFxuICAgICAgICBcIitDK1wiXFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxBYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJJbWFnZVwiLFwiQm94ZXNcIixcIkJveEluZFwiXSx0aGlzLm91dHB1dFNoYXBlPVtdO3ZhciBhPXRbMF0saT10WzFdLHM9dFsyXSx1PXRbM10sbD1lWzBdLGM9blswXSxoPW5bMV07dGhpcy5vdXRwdXRTaGFwZT1bbCxjLGgsdV07dmFyIHA9XCJiaWxpbmVhclwiPT09cj8xOjAsZj1baS0xK1wiLjBcIixzLTErXCIuMFwiXSxkPWZbMF0sdj1mWzFdLG09Yz4xP1tcIlwiKyhpLTEpLyhjLTEpLFwiKHkyLXkxKSAqIGhlaWdodF9yYXRpb1wiLFwieTEqXCIrZCtcIiArIGZsb2F0KHkpKihoZWlnaHRfc2NhbGUpXCJdOltcIjAuMFwiLFwiMC4wXCIsXCIwLjUgKiAoeTEreTIpICogXCIrZF0sZz1tWzBdLHk9bVsxXSx4PW1bMl0sYj1oPjE/W1wiXCIrKHMtMSkvKGgtMSksXCIoeDIteDEpICogd2lkdGhfcmF0aW9cIixcIngxKlwiK3YrXCIgKyBmbG9hdCh4KSood2lkdGhfc2NhbGUpXCJdOltcIjAuMFwiLFwiMC4wXCIsXCIwLjUgKiAoeDEreDIpICogXCIrdl0sdz1iWzBdLEM9YlsxXSxFPWJbMl07dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGZsb2F0IGhlaWdodF9yYXRpbyA9IGZsb2F0KFwiK2crXCIpO1xcbiAgICAgIGNvbnN0IGZsb2F0IHdpZHRoX3JhdGlvID0gZmxvYXQoXCIrdytcIik7XFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCB5ID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IHggPSBjb29yZHNbMl07XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG5cXG4gICAgICAgIC8vIGdldCBib3ggdmFsc1xcbiAgICAgICAgZmxvYXQgeTEgPSBnZXRCb3hlcyhiLDApO1xcbiAgICAgICAgZmxvYXQgeDEgPSBnZXRCb3hlcyhiLDEpO1xcbiAgICAgICAgZmxvYXQgeTIgPSBnZXRCb3hlcyhiLDIpO1xcbiAgICAgICAgZmxvYXQgeDIgPSBnZXRCb3hlcyhiLDMpO1xcblxcbiAgICAgICAgLy8gZ2V0IGltYWdlIGluIGJhdGNoIGluZGV4XFxuICAgICAgICBpbnQgYkluZCA9IHJvdW5kKGdldEJveEluZChiKSk7XFxuICAgICAgICBpZihiSW5kIDwgMCB8fCBiSW5kID49IFwiK2ErXCIpIHtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgZmxvYXQgaGVpZ2h0X3NjYWxlID0gXCIreStcIjtcXG4gICAgICAgIGZsb2F0IHdpZHRoX3NjYWxlID0gXCIrQytcIjtcXG5cXG4gICAgICAgIGZsb2F0IGluX3kgPSBcIit4K1wiO1xcbiAgICAgICAgaWYoIGluX3kgPCAwLjAgfHwgaW5feSA+IFwiK2QrXCIgKSB7XFxuICAgICAgICAgIHNldE91dHB1dChmbG9hdChcIitvK1wiKSk7XFxuICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG4gICAgICAgIGZsb2F0IGluX3ggPSBcIitFK1wiO1xcbiAgICAgICAgaWYoIGluX3ggPCAwLjAgfHwgaW5feCA+IFwiK3YrXCIgKSB7XFxuICAgICAgICAgIHNldE91dHB1dChmbG9hdChcIitvK1wiKSk7XFxuICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHZlYzIgc291cmNlRnJhY0luZGV4Q1IgPSB2ZWMyKGluX3gsaW5feSk7XFxuICAgICAgICBpZihcIitwK1wiID09IDEpIHtcXG4gICAgICAgICAgLy8gQ29tcHV0ZSB0aGUgZm91ciBpbnRlZ2VyIGluZGljZXMuXFxuICAgICAgICAgIGl2ZWMyIHNvdXJjZUZsb29yQ1IgPSBpdmVjMihzb3VyY2VGcmFjSW5kZXhDUik7XFxuICAgICAgICAgIGl2ZWMyIHNvdXJjZUNlaWxDUiA9IGl2ZWMyKGNlaWwoc291cmNlRnJhY0luZGV4Q1IpKTtcXG5cXG4gICAgICAgICAgZmxvYXQgdG9wTGVmdCA9IGdldEltYWdlKGIsIHNvdXJjZUZsb29yQ1IueSwgc291cmNlRmxvb3JDUi54LCBkKTtcXG4gICAgICAgICAgZmxvYXQgYm90dG9tTGVmdCA9IGdldEltYWdlKGIsIHNvdXJjZUNlaWxDUi55LCBzb3VyY2VGbG9vckNSLngsIGQpO1xcbiAgICAgICAgICBmbG9hdCB0b3BSaWdodCA9IGdldEltYWdlKGIsIHNvdXJjZUZsb29yQ1IueSwgc291cmNlQ2VpbENSLngsIGQpO1xcbiAgICAgICAgICBmbG9hdCBib3R0b21SaWdodCA9IGdldEltYWdlKGIsIHNvdXJjZUNlaWxDUi55LCBzb3VyY2VDZWlsQ1IueCwgZCk7XFxuXFxuICAgICAgICAgIHZlYzIgZnJhY0NSID0gc291cmNlRnJhY0luZGV4Q1IgLSB2ZWMyKHNvdXJjZUZsb29yQ1IpO1xcblxcbiAgICAgICAgICBmbG9hdCB0b3AgPSB0b3BMZWZ0ICsgKHRvcFJpZ2h0IC0gdG9wTGVmdCkgKiBmcmFjQ1IueDtcXG4gICAgICAgICAgZmxvYXQgYm90dG9tID0gYm90dG9tTGVmdCArIChib3R0b21SaWdodCAtIGJvdHRvbUxlZnQpICogZnJhY0NSLng7XFxuICAgICAgICAgIGZsb2F0IG5ld1ZhbHVlID0gdG9wICsgKGJvdHRvbSAtIHRvcCkgKiBmcmFjQ1IueTtcXG4gICAgICAgICAgc2V0T3V0cHV0KG5ld1ZhbHVlKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIC8vIENvbXB1dGUgdGhlIGNvb3JkaW5hdG9ycyBvZiBuZWFyZXN0IG5laWdoYm9yIHBvaW50LlxcbiAgICAgICAgICBpdmVjMiBzb3VyY2VOZWFyZXN0Q1IgPSBpdmVjMihmbG9vcihcXG4gICAgICAgICAgICBzb3VyY2VGcmFjSW5kZXhDUiArIHZlYzIoMC41LDAuNSkpKTtcXG4gICAgICAgICAgZmxvYXQgbmV3VmFsdWUgPSBnZXRJbWFnZShiLCBzb3VyY2VOZWFyZXN0Q1IueSwgc291cmNlTmVhcmVzdENSLngsIGQpO1xcbiAgICAgICAgICBzZXRPdXRwdXQobmV3VmFsdWUpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgXCJ9fSgpLFRhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLm91dHB1dFNoYXBlPXQ7dmFyIHI9dC5sZW5ndGgsbz10W3QubGVuZ3RoLTFdLGE9bj9cIjxcIjpcIj5cIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgaW50IGdldEluZGV4KGludCBpKSB7XFxuICAgICAgICBcIisobj9cInJldHVybiBcIitvK1wiIC1pIC0gMTtcIjpcInJldHVybiBpO1wiKStcIlxcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitYbyhyKStcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBlbmQgPSBcIitEYShyLFwiY29vcmRzXCIpK1wiO1xcbiAgICAgICAgZmxvYXQgdmFsID0gMC4wO1xcbiAgICAgICAgZm9yIChpbnQgaSA9IFwiK28rXCIgLSAxOyBpID49IDA7IGkgLT0gMSkge1xcbiAgICAgICAgICBpbnQgaWR4ID0gZ2V0SW5kZXgoaSk7XFxuICAgICAgICAgIGlmIChpZHggXCIrYStcIiBlbmQpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpZiAoaWR4ID09IGVuZCAmJiBcIitlK1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgXCIrRGEocixcImNvb3Jkc1wiKStcIiA9IGlkeDtcXG4gICAgICAgICAgdmFsICs9IGdldFgoXCIrZnVuY3Rpb24odCxlKXtpZigxPT09dClyZXR1cm5cIlwiK2U7aWYoMj09PXQpcmV0dXJuIGUrXCIueCwgXCIrZStcIi55XCI7aWYoMz09PXQpcmV0dXJuIGUrXCIueCwgXCIrZStcIi55LCBcIitlK1wiLnpcIjtpZig0PT09dClyZXR1cm4gZStcIi54LCBcIitlK1wiLnksIFwiK2UrXCIueiwgXCIrZStcIi53XCI7dGhyb3cgRXJyb3IoXCJDdW11bGF0aXZlIHN1bSBmb3IgcmFuayBcIit0K1wiIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpfShyLFwiY29vcmRzXCIpK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dCh2YWwpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpO2Z1bmN0aW9uIERhKHQsZSl7aWYoMT09PXQpcmV0dXJuXCJcIitlO2lmKDI9PT10KXJldHVybiBlK1wiLnlcIjtpZigzPT09dClyZXR1cm4gZStcIi56XCI7aWYoND09PXQpcmV0dXJuIGUrXCIud1wiO3Rocm93IEVycm9yKFwiQ3VtdWxhdGl2ZSBzdW0gZm9yIHJhbmsgXCIrdCtcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKX12YXIgX2E9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXTt2YXIgbj1CbygpO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgaXZlYzMgb3V0Q29vcmRzRnJvbUZsYXRJbmRleChpbnQgaW5kZXgpIHtcXG4gICAgICAgIFwiK1BvKFtcInJcIixcImNcIixcImRcIl0sdCkrXCJcXG4gICAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqXFxuICAgICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgICAgaW50IGluZGV4ID0gNCAqIChyZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnkpO1xcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG5cXG4gICAgICAgIGZvciAoaW50IGk9MDsgaTw0OyBpKyspIHtcXG4gICAgICAgICAgaW50IGZsYXRJbmRleCA9IGluZGV4ICsgaTtcXG4gICAgICAgICAgaXZlYzMgcmMgPSBvdXRDb29yZHNGcm9tRmxhdEluZGV4KGZsYXRJbmRleCk7XFxuICAgICAgICAgIHJlc3VsdFtpXSA9IGdldEEocmMueCwgcmMueSwgcmMueik7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIituLm91dHB1dCtcIiA9IHJlc3VsdDtcXG4gICAgICB9XFxuICAgIFwifX0oKSxPYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwO3ZhciBuPUJvKCk7dGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBpdmVjMyBvdXRDb29yZHNGcm9tRmxhdEluZGV4KGludCBpbmRleCkge1xcbiAgICAgICAgXCIrUG8oW1wiclwiLFwiY1wiLFwiZFwiXSx0KStcIlxcbiAgICAgICAgcmV0dXJuIGl2ZWMzKHIsIGMsIGQpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgICBpbnQgaW5kZXggPSA0ICogKHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueSk7XFxuXFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcblxcbiAgICAgICAgZm9yIChpbnQgaT0wOyBpPDQ7IGkrKykge1xcbiAgICAgICAgICBpbnQgZmxhdEluZGV4ID0gaW5kZXggKyBpO1xcbiAgICAgICAgICBpdmVjMyByYyA9IG91dENvb3Jkc0Zyb21GbGF0SW5kZXgoZmxhdEluZGV4KTtcXG4gICAgICAgICAgcmVzdWx0W2ldID0gZ2V0Q2hhbm5lbChnZXRBKHJjLngsIHJjLnksIHJjLnopLCB2ZWMyKHJjLnksIHJjLnopKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIFwiK24ub3V0cHV0K1wiID0gcmVzdWx0O1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLEZhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sdGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy5ibG9ja1NpemU9ZSx0aGlzLmRhdGFGb3JtYXQ9bix0aGlzLnVzZXJDb2RlPVwiXFxuICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICBpbnQgaCA9IFwiK3RoaXMuZ2V0SGVpZ2h0Q29vcmRTdHJpbmcoKStcIjtcXG4gICAgICBpbnQgdyA9IFwiK3RoaXMuZ2V0V2lkdGhDb29yZFN0cmluZygpK1wiO1xcbiAgICAgIGludCBkID0gXCIrdGhpcy5nZXREZXB0aENvb3JkU3RyaW5nKCkrXCI7XFxuXFxuICAgICAgaW50IGluX2ggPSBoIC8gXCIrZStcIjtcXG4gICAgICBpbnQgb2Zmc2V0X2ggPSBpbW9kKGgsIFwiK2UrXCIpO1xcbiAgICAgIGludCBpbl93ID0gdyAvIFwiK2UrXCI7XFxuICAgICAgaW50IG9mZnNldF93ID0gaW1vZCh3LCBcIitlK1wiKTtcXG4gICAgICBpbnQgb2Zmc2V0X2QgPSAob2Zmc2V0X2ggKiBcIitlK1wiICsgb2Zmc2V0X3cpICpcXG4gICAgICAgIFwiK3RoaXMuZ2V0T3V0cHV0RGVwdGhTaXplKCkrXCI7XFxuICAgICAgaW50IGluX2QgPSBkICsgb2Zmc2V0X2Q7XFxuXFxuICAgICAgZmxvYXQgcmVzdWx0ID0gXCIrdGhpcy5nZXRJbnB1dFNhbXBsaW5nU3RyaW5nKCkrXCI7XFxuICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgIH1cXG4gIFwifXJldHVybiB0LnByb3RvdHlwZS5nZXRIZWlnaHRDb29yZFN0cmluZz1mdW5jdGlvbigpe3JldHVyblwiTkhXQ1wiPT09dGhpcy5kYXRhRm9ybWF0P1wiY29vcmRzWzFdXCI6XCJjb29yZHNbMl1cIn0sdC5wcm90b3R5cGUuZ2V0V2lkdGhDb29yZFN0cmluZz1mdW5jdGlvbigpe3JldHVyblwiTkhXQ1wiPT09dGhpcy5kYXRhRm9ybWF0P1wiY29vcmRzWzJdXCI6XCJjb29yZHNbM11cIn0sdC5wcm90b3R5cGUuZ2V0RGVwdGhDb29yZFN0cmluZz1mdW5jdGlvbigpe3JldHVyblwiTkhXQ1wiPT09dGhpcy5kYXRhRm9ybWF0P1wiY29vcmRzWzNdXCI6XCJjb29yZHNbMV1cIn0sdC5wcm90b3R5cGUuZ2V0T3V0cHV0RGVwdGhTaXplPWZ1bmN0aW9uKCl7cmV0dXJuXCJOSFdDXCI9PT10aGlzLmRhdGFGb3JtYXQ/dGhpcy5vdXRwdXRTaGFwZVszXTp0aGlzLm91dHB1dFNoYXBlWzFdfSx0LnByb3RvdHlwZS5nZXRJbnB1dFNhbXBsaW5nU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJOSFdDXCI9PT10aGlzLmRhdGFGb3JtYXQ/XCJnZXRYKGIsIGluX2gsIGluX3csIGluX2QpXCI6XCJnZXRYKGIsIGluX2QsIGluX2gsIGluX3cpXCJ9LHR9KCksTWE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIlhcIl0sdGhpcy5vdXRwdXRTaGFwZT1bdCx0XSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgICAgZmxvYXQgdmFsID0gY29vcmRzWzBdID09IGNvb3Jkc1sxXSA/IGdldFgoY29vcmRzWzBdKSA6IDAuMDtcXG4gICAgICAgICAgc2V0T3V0cHV0KHZhbCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksQmE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07dmFyIGU9Qm8oKTt0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK1dvK1wiXFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgeCA9IGdldEFBdE91dENvb3JkcygpO1xcbiAgICAgICAgXCIrZS5vdXRwdXQrXCIgPSBlbmNvZGVfZmxvYXQoeCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksUGE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITA7dmFyIGU9Qm8oKTt0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK1dvK1wiXFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzMgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCB4ID0gZ2V0Q2hhbm5lbChnZXRBQXRPdXRDb29yZHMoKSwgdmVjMihjb29yZHMueSwgY29vcmRzLnopKTtcXG4gICAgICAgIFwiK2Uub3V0cHV0K1wiID0gZW5jb2RlX2Zsb2F0KHgpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLExhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07dmFyIHI9Qm8oKSxvPWVbMF0sYT1lWzFdO3RoaXMub3V0cHV0U2hhcGU9dDt2YXIgaT1cInJlc3VsdFwiO24mJihpPVwiZmxvb3IocmVzdWx0ICogMjU1LiArIDAuNSlcIiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK0xvKHQpK1wiXFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzMgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuXFxuICAgICAgICBpbnQgZmxhdEluZGV4ID0gZ2V0RmxhdEluZGV4KGNvb3Jkcyk7XFxuICAgICAgICBpbnQgb2Zmc2V0ID0gaW1vZChmbGF0SW5kZXgsIDQpO1xcblxcbiAgICAgICAgZmxhdEluZGV4ID0gaWRpdihmbGF0SW5kZXgsIDQsIDEuKTtcXG4gICAgICAgIFxcbiAgICAgICAgaW50IHIgPSBmbGF0SW5kZXggLyBcIithK1wiO1xcbiAgICAgICAgaW50IGMgPSBpbW9kKGZsYXRJbmRleCwgXCIrYStcIik7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIoYywgcikgKyBoYWxmQ1IpIC8gdmVjMihcIithK1wiLjAsIFwiK28rXCIuMCk7XFxuICAgICAgICB2ZWM0IHZhbHVlcyA9IFwiK3IudGV4dHVyZTJEK1wiKEEsIHV2KTtcXG5cXG4gICAgICAgIGZsb2F0IHJlc3VsdDtcXG5cXG4gICAgICAgIGlmKG9mZnNldCA9PSAwKSB7XFxuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlc1swXTtcXG4gICAgICAgIH0gZWxzZSBpZihvZmZzZXQgPT0gMSkge1xcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZXNbMV07XFxuICAgICAgICB9IGVsc2UgaWYob2Zmc2V0ID09IDIpIHtcXG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWVzWzJdO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWVzWzNdO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgXCIrci5vdXRwdXQrXCIgPSB2ZWM0KFwiK2krXCIsIDAuLCAwLiwgMC4pO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLFdhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07dmFyIHI9Qm8oKSxvPWVbMF0sYT1lWzFdO3RoaXMub3V0cHV0U2hhcGU9dDt2YXIgaT1cIlwiLHM9XCJyZXN1bHRcIjtuJiYocz1cImZsb29yKHJlc3VsdCAqIDI1NS4gKyAwLjUpXCIpO2Zvcih2YXIgdT0wO3U8PTE7dSsrKWZvcih2YXIgbD0wO2w8PTE7bCsrKXt2YXIgYz0yKnUrbDtpKz1cIlxcbiAgICAgICAgICBsb2NhbENvb3JkcyA9IGNvb3JkcztcXG4gICAgICAgICAgaWYobG9jYWxDb29yZHNbMl0gKyBcIitsK1wiIDwgXCIrdFsyXStcIikge1xcbiAgICAgICAgICAgIGxvY2FsQ29vcmRzWzJdICs9IFwiK2wrXCI7XFxuICAgICAgICAgICAgaWYobG9jYWxDb29yZHNbMV0gKyBcIit1K1wiIDwgXCIrdFsxXStcIikge1xcbiAgICAgICAgICAgICAgbG9jYWxDb29yZHNbMV0gKz0gXCIrdStcIjtcXG5cXG4gICAgICAgICAgICAgIGZsYXRJbmRleCA9IGdldEZsYXRJbmRleChsb2NhbENvb3Jkcyk7XFxuICAgICAgICAgICAgICBvZmZzZXQgPSBpbW9kKGZsYXRJbmRleCwgNCk7XFxuICAgIFxcbiAgICAgICAgICAgICAgZmxhdEluZGV4ID0gaWRpdihmbGF0SW5kZXgsIDQsIDEuKTtcXG5cXG4gICAgICAgICAgICAgIHIgPSBmbGF0SW5kZXggLyBcIithK1wiO1xcbiAgICAgICAgICAgICAgYyA9IGltb2QoZmxhdEluZGV4LCBcIithK1wiKTtcXG4gICAgICAgICAgICAgIHV2ID0gKHZlYzIoYywgcikgKyBoYWxmQ1IpIC8gdmVjMihcIithK1wiLjAsIFwiK28rXCIuMCk7XFxuICAgICAgICAgICAgICB2YWx1ZXMgPSBcIityLnRleHR1cmUyRCtcIihBLCB1dik7XFxuXFxuICAgICAgICAgICAgICBpZihvZmZzZXQgPT0gMCkge1xcbiAgICAgICAgICAgICAgICByZXN1bHRbXCIrYytcIl0gPSB2YWx1ZXNbMF07XFxuICAgICAgICAgICAgICB9IGVsc2UgaWYob2Zmc2V0ID09IDEpIHtcXG4gICAgICAgICAgICAgICAgcmVzdWx0W1wiK2MrXCJdID0gdmFsdWVzWzFdO1xcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKG9mZnNldCA9PSAyKSB7XFxuICAgICAgICAgICAgICAgIHJlc3VsdFtcIitjK1wiXSA9IHZhbHVlc1syXTtcXG4gICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJlc3VsdFtcIitjK1wiXSA9IHZhbHVlc1szXTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIFwifXRoaXMudXNlckNvZGU9XCJcXG4gICAgICBcIitMbyh0KStcIlxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMzIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG4gICAgICAgIGludCBmbGF0SW5kZXgsIHIsIGMsIG9mZnNldDtcXG4gICAgICAgIGl2ZWMzIGxvY2FsQ29vcmRzO1xcbiAgICAgICAgdmVjMiB1djtcXG4gICAgICAgIHZlYzQgdmFsdWVzO1xcbiAgICAgICAgXFxuICAgICAgICBcIitpK1wiXFxuXFxuICAgICAgICBcIityLm91dHB1dCtcIiA9IFwiK3MrXCI7XFxuICAgICAgfVxcbiAgICBcIn19KCksVWE9XCJyZXR1cm4gcmVhbCAqIGV4cFIgLSBpbWFnICogZXhwSTtcIixWYT1cInJldHVybiByZWFsICogZXhwSSArIGltYWcgKiBleHBSO1wiLHphPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wicmVhbFwiLFwiaW1hZ1wiXTt2YXIgcj1lWzFdO3RoaXMub3V0cHV0U2hhcGU9ZTt2YXIgbz1uP1wiMi4wICogXCIrTWF0aC5QSTpcIi0yLjAgKiBcIitNYXRoLlBJLGE9bj9yK1wiLjBcIjpcIjEuMFwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBmbG9hdCBleHBvbmVudE11bHRpcGxpZXIgPSBcIitvK1wiO1xcblxcbiAgICAgIGZsb2F0IHVuYXJ5T3BDb21wbGV4KGZsb2F0IHJlYWwsIGZsb2F0IGV4cFIsIGZsb2F0IGltYWcsIGZsb2F0IGV4cEkpIHtcXG4gICAgICAgIFwiK3QrXCJcXG4gICAgICB9XFxuXFxuICAgICAgZmxvYXQgbXVsTWF0REZUKGludCBiYXRjaCwgaW50IGluZGV4KSB7XFxuICAgICAgICBmbG9hdCBpbmRleFJhdGlvID0gZmxvYXQoaW5kZXgpIC8gZmxvYXQoXCIrcitcIik7XFxuICAgICAgICBmbG9hdCBleHBvbmVudE11bHRpcGxpZXJUaW1lc0luZGV4UmF0aW8gPVxcbiAgICAgICAgICAgIGV4cG9uZW50TXVsdGlwbGllciAqIGluZGV4UmF0aW87XFxuXFxuICAgICAgICBmbG9hdCByZXN1bHQgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK3IrXCI7IGkrKykge1xcbiAgICAgICAgICAvLyB4ID0gKC0yfDIgKiBQSSAvIE4pICogaW5kZXggKiBpO1xcbiAgICAgICAgICBmbG9hdCB4ID0gZXhwb25lbnRNdWx0aXBsaWVyVGltZXNJbmRleFJhdGlvICogZmxvYXQoaSk7XFxuICAgICAgICAgIGZsb2F0IGV4cFIgPSBjb3MoeCk7XFxuICAgICAgICAgIGZsb2F0IGV4cEkgPSBzaW4oeCk7XFxuICAgICAgICAgIGZsb2F0IHJlYWwgPSBnZXRSZWFsKGJhdGNoLCBpKTtcXG4gICAgICAgICAgZmxvYXQgaW1hZyA9IGdldEltYWcoYmF0Y2gsIGkpO1xcblxcbiAgICAgICAgICByZXN1bHQgKz1cXG4gICAgICAgICAgICAgIHVuYXJ5T3BDb21wbGV4KHJlYWwsIGV4cFIsIGltYWcsIGV4cEkpIC8gXCIrYStcIjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgc2V0T3V0cHV0KG11bE1hdERGVChjb29yZHNbMF0sIGNvb3Jkc1sxXSkpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLEdhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB1bmlmb3JtIGZsb2F0IHZhbHVlO1xcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIC8vIElucHV0IGNhbiBiZSBvYnRhaW5lZCBmcm9tIHVuaWZvcm0gdmFsdWUuXFxuICAgICAgICBzZXRPdXRwdXQodmFsdWUpO1xcbiAgICAgIH1cXG4gICAgXCJ9cmV0dXJuIHQucHJvdG90eXBlLmdldEN1c3RvbVNldHVwRnVuYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBmdW5jdGlvbihuLHIpe251bGw9PWUudmFsdWVMb2MmJihlLnZhbHVlTG9jPW4uZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhyLFwidmFsdWVcIikpLG4uZ2wudW5pZm9ybTFmKGUudmFsdWVMb2MsdCl9fSx0fSgpLEhhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdO3ZhciBlPUJvKCksbj10WzBdLHI9dFsxXTt0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMzIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IHRleFIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgdGV4QyA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBkZXB0aCA9IGNvb3Jkc1syXTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgLyB2ZWMyKFwiK3IrXCIuMCwgXCIrbitcIi4wKTtcXG5cXG4gICAgICAgIHZlYzQgdmFsdWVzID0gXCIrZS50ZXh0dXJlMkQrXCIoQSwgdXYpO1xcbiAgICAgICAgZmxvYXQgdmFsdWU7XFxuICAgICAgICBpZiAoZGVwdGggPT0gMCkge1xcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5yO1xcbiAgICAgICAgfSBlbHNlIGlmIChkZXB0aCA9PSAxKSB7XFxuICAgICAgICAgIHZhbHVlID0gdmFsdWVzLmc7XFxuICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09IDIpIHtcXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZXMuYjtcXG4gICAgICAgIH0gZWxzZSBpZiAoZGVwdGggPT0gMykge1xcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5hO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgc2V0T3V0cHV0KGZsb29yKHZhbHVlICogMjU1LjAgKyAwLjUpKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxxYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXTt2YXIgZT1CbygpLG49dFswXSxyPXRbMV07dGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCB0ZXhSID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IHRleEMgPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgZGVwdGggPSBjb29yZHNbMl07XFxuXFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcblxcbiAgICAgICAgZm9yKGludCByb3c9MDsgcm93PD0xOyByb3crKykge1xcbiAgICAgICAgICBmb3IoaW50IGNvbD0wOyBjb2w8PTE7IGNvbCsrKSB7XFxuICAgICAgICAgICAgdGV4QyA9IGNvb3Jkc1sxXSArIHJvdztcXG4gICAgICAgICAgICBkZXB0aCA9IGNvb3Jkc1syXSArIGNvbDtcXG5cXG4gICAgICAgICAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC8gdmVjMihcIityK1wiLjAsIFwiK24rXCIuMCk7XFxuICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSBcIitlLnRleHR1cmUyRCtcIihBLCB1dik7XFxuICAgICAgICAgICAgZmxvYXQgdmFsdWU7XFxuICAgICAgICAgICAgaWYgKGRlcHRoID09IDApIHtcXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzLnI7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChkZXB0aCA9PSAxKSB7XFxuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5nO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVwdGggPT0gMikge1xcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXMuYjtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09IDMpIHtcXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzLmE7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIHJlc3VsdFtyb3cgKiAyICsgY29sXSA9IGZsb29yKHZhbHVlICogMjU1LjAgKyAwLjUpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIitlLm91dHB1dCtcIiA9IHJlc3VsdDtcXG4gICAgICB9XFxuICAgIFwifX0oKSwkYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIixcImluZGljZXNcIl07dmFyIHI9dC5zbGljZSgpO3Jbbl09ZSx0aGlzLm91dHB1dFNoYXBlPXIsdGhpcy5yYW5rPXIubGVuZ3RoO3ZhciBvPVhvKHRoaXMucmFuayksYT1mdW5jdGlvbih0LGUpe3ZhciBuPXQubGVuZ3RoO2lmKG4+NCl0aHJvdyBFcnJvcihcIkdhdGhlciBmb3IgcmFuayBcIituK1wiIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpO2lmKDE9PT1uKXJldHVyblwiaW50KGdldEluZGljZXMocmVzUkMpKVwiO2Zvcih2YXIgcj1bXCJyZXNSQy54XCIsXCJyZXNSQy55XCIsXCJyZXNSQy56XCIsXCJyZXNSQy53XCJdLG89W10sYT0wO2E8dC5sZW5ndGg7YSsrKWE9PT1lP28ucHVzaChcImludChnZXRJbmRpY2VzKFwiK3JbYV0rXCIpKVwiKTpvLnB1c2goXCJcIityW2FdKTtyZXR1cm4gby5qb2luKCl9KHQsbik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK28rXCIgcmVzUkMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIHNldE91dHB1dChnZXRBKFwiK2ErXCIpKTtcXG4gICAgICB9XFxuICAgIFwifX0oKTt2YXIgS2E9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3RoaXMuc2xpY2VEaW09dCx0aGlzLnN0cmlkZXM9ZSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwiaW5kaWNlc1wiXSx0aGlzLm91dHB1dFNoYXBlPW47dmFyIHI9WG8oZS5sZW5ndGgpLG89WG8obi5sZW5ndGgpLGE9dGhpcy5zbGljZURpbT4xP1wic3RyaWRlc1tqXVwiOlwic3RyaWRlc1wiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIFwiK3IrXCIgc3RyaWRlcyA9IFwiK3IrXCIoXCIrdGhpcy5zdHJpZGVzK1wiKTtcXG4gICAgICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAgIFwiK28rXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGludCBmbGF0dGVuSW5kZXggPSAwO1xcbiAgICAgICAgICBmb3IgKGludCBqID0gMDsgaiA8IFwiK3RoaXMuc2xpY2VEaW0rXCI7IGorKykge1xcbiAgICAgICAgICAgIGludCBpbmRleCA9IHJvdW5kKGdldEluZGljZXMoY29vcmRzWzBdLCBqKSk7XFxuICAgICAgICAgICAgZmxhdHRlbkluZGV4ICs9IGluZGV4ICogXCIrYStcIjtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBzZXRPdXRwdXQoZ2V0WChmbGF0dGVuSW5kZXgsIGNvb3Jkc1sxXSkpO1xcbiAgICAgICAgfVxcbiAgICAgIFwifX0oKTtmdW5jdGlvbiBqYSh0LGUpe3ZhciBuPUJvKCk7cmV0dXJuIEt0KHQsZSxuLnZlcnNpb24rXCJcXG4gICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbiAgICBcIituLmF0dHJpYnV0ZStcIiB2ZWMzIGNsaXBTcGFjZVBvcztcXG4gICAgXCIrbi5hdHRyaWJ1dGUrXCIgdmVjMiB1djtcXG4gICAgXCIrbi52YXJ5aW5nVnMrXCIgdmVjMiByZXN1bHRVVjtcXG5cXG4gICAgdm9pZCBtYWluKCkge1xcbiAgICAgIGdsX1Bvc2l0aW9uID0gdmVjNChjbGlwU3BhY2VQb3MsIDEpO1xcbiAgICAgIHJlc3VsdFVWID0gdXY7XFxuICAgIH1cIil9ZnVuY3Rpb24gWGEodCxlKXtyZXR1cm4gZWUodCxlLG5ldyBGbG9hdDMyQXJyYXkoWy0xLDEsMCwwLDEsLTEsLTEsMCwwLDAsMSwxLDAsMSwxLDEsLTEsMCwxLDBdKSl9ZnVuY3Rpb24gWWEodCxlKXtyZXR1cm4gbmUodCxlLG5ldyBVaW50MTZBcnJheShbMCwxLDIsMiwxLDNdKSl9ZnVuY3Rpb24gUWEodCxlLG4scixvLGEsaSl7b2UobixyKTt2YXIgcz1yZSh0LGUpLHU9dC5URVhUVVJFXzJEO3JldHVybiBWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kVGV4dHVyZSh1LHMpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4UGFyYW1ldGVyaSh1LHQuVEVYVFVSRV9XUkFQX1MsdC5DTEFNUF9UT19FREdFKX0pLFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LnRleFBhcmFtZXRlcmkodSx0LlRFWFRVUkVfV1JBUF9ULHQuQ0xBTVBfVE9fRURHRSl9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC50ZXhQYXJhbWV0ZXJpKHUsdC5URVhUVVJFX01JTl9GSUxURVIsdC5ORUFSRVNUKX0pLFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LnRleFBhcmFtZXRlcmkodSx0LlRFWFRVUkVfTUFHX0ZJTFRFUix0Lk5FQVJFU1QpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4SW1hZ2UyRCh1LDAsbyxuLHIsMCxhLGksbnVsbCl9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsbnVsbCl9KSxzfWZ1bmN0aW9uIEphKHQsZSxuLHIsbyl7dmFyIGE9UHQobixyKTtyZXR1cm4gUWEodCxlLGFbMF0sYVsxXSxvLmludGVybmFsRm9ybWF0RmxvYXQsby50ZXh0dXJlRm9ybWF0RmxvYXQsdC5GTE9BVCl9ZnVuY3Rpb24gWmEodCxlLG4scixvKXt2YXIgYT1QdChuLHIpO3JldHVybiBRYSh0LGUsYVswXSxhWzFdLG8uaW50ZXJuYWxGb3JtYXRIYWxmRmxvYXQsby50ZXh0dXJlRm9ybWF0RmxvYXQsby50ZXh0dXJlVHlwZUhhbGZGbG9hdCl9ZnVuY3Rpb24gdGkodCxlLG4scixvKXt2YXIgYT1QdChuLHIpO3JldHVybiBRYSh0LGUsYVswXSxhWzFdLHQuUkdCQSx0LlJHQkEsdC5VTlNJR05FRF9CWVRFKX1mdW5jdGlvbiBlaSh0LGUsbixyLG8pe3ZhciBhPVd0KG4scik7cmV0dXJuIFFhKHQsZSxhWzBdLGFbMV0sby5pbnRlcm5hbEZvcm1hdFBhY2tlZEZsb2F0LHQuUkdCQSx0LkZMT0FUKX1mdW5jdGlvbiBuaSh0LGUsbixyLG8pe3ZhciBhPVd0KG4scik7cmV0dXJuIFFhKHQsZSxhWzBdLGFbMV0sby5pbnRlcm5hbEZvcm1hdFBhY2tlZEhhbGZGbG9hdCx0LlJHQkEsby50ZXh0dXJlVHlwZUhhbGZGbG9hdCl9ZnVuY3Rpb24gcmkodCxlLG4scil7cmV0dXJuIFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmJpbmRCdWZmZXIodC5BUlJBWV9CVUZGRVIscil9KSxpZSh0LGUsbixcImNsaXBTcGFjZVBvc1wiLHIsMywyMCwwKSYmaWUodCxlLG4sXCJ1dlwiLHIsMiwyMCwxMil9ZnVuY3Rpb24gb2kodCxlLG4scixvLGEsaSl7dmFyIHMsdSxsO1Z0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxuKX0pLGEgaW5zdGFuY2VvZiBVaW50OEFycmF5PyhzPW5ldyBVaW50OEFycmF5KHIqbyo0KSx1PXQuVU5TSUdORURfQllURSxsPXQuUkdCQSk6KHM9bmV3IEZsb2F0MzJBcnJheShyKm8qNCksdT10LkZMT0FULGw9aS5pbnRlcm5hbEZvcm1hdFBhY2tlZEZsb2F0KSxzLnNldChhKSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC50ZXhJbWFnZTJEKHQuVEVYVFVSRV8yRCwwLGwscixvLDAsdC5SR0JBLHUscyl9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsbnVsbCl9KX1mdW5jdGlvbiBhaSh0LGUsbixyKXtWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsbil9KSxyLmRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5P1Z0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LnRleEltYWdlMkQodC5URVhUVVJFXzJELDAsdC5SR0JBLHIud2lkdGgsci5oZWlnaHQsMCx0LlJHQkEsdC5VTlNJR05FRF9CWVRFLHIuZGF0YSl9KTpWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC50ZXhJbWFnZTJEKHQuVEVYVFVSRV8yRCwwLHQuUkdCQSx0LlJHQkEsdC5VTlNJR05FRF9CWVRFLHIpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSl9ZnVuY3Rpb24gaWkodCxlLG4scixvKXt2YXIgYT10LmNyZWF0ZUJ1ZmZlcigpO1Z0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmJpbmRCdWZmZXIodC5QSVhFTF9QQUNLX0JVRkZFUixhKX0pO3ZhciBpPTE2Km4qcjtyZXR1cm4gVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYnVmZmVyRGF0YSh0LlBJWEVMX1BBQ0tfQlVGRkVSLGksdC5TVFJFQU1fUkVBRCl9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5yZWFkUGl4ZWxzKDAsMCxyLG4sdC5SR0JBLHQuRkxPQVQsMCl9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuUElYRUxfUEFDS19CVUZGRVIsbnVsbCl9KSxhfWZ1bmN0aW9uIHNpKHQsZSxuKXt2YXIgcj10LG89bmV3IEZsb2F0MzJBcnJheShuKTtyZXR1cm4gci5iaW5kQnVmZmVyKHIuUElYRUxfUEFDS19CVUZGRVIsZSksci5nZXRCdWZmZXJTdWJEYXRhKHIuUElYRUxfUEFDS19CVUZGRVIsMCxvKSxyLmJpbmRCdWZmZXIoci5QSVhFTF9QQUNLX0JVRkZFUixudWxsKSxvfWZ1bmN0aW9uIHVpKHQsZSxuLHIsbyl7dmFyIGE9UHQobixyKSxpPWFbMF0scz1hWzFdLHU9bmV3IFVpbnQ4QXJyYXkobipyKjQpO3JldHVybiBWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5yZWFkUGl4ZWxzKDAsMCxpLHMsby5kb3dubG9hZFRleHR1cmVGb3JtYXQsdC5VTlNJR05FRF9CWVRFLHUpfSksbmV3IEZsb2F0MzJBcnJheSh1LmJ1ZmZlcil9ZnVuY3Rpb24gbGkodCxlLG4scixvLGEsaSxzKXt2YXIgdT10LGw9bmV3IEZsb2F0MzJBcnJheShmdW5jdGlvbih0LGUpe3ZhciBuPVd0KHQsZSk7cmV0dXJuIG5bMF0qblsxXSo0fShhLGkpKTtyZXR1cm4gdS5iaW5kQnVmZmVyKHUuUElYRUxfUEFDS19CVUZGRVIsZSksdS5nZXRCdWZmZXJTdWJEYXRhKHUuUElYRUxfUEFDS19CVUZGRVIsMCxsKSx1LmJpbmRCdWZmZXIodS5QSVhFTF9QQUNLX0JVRkZFUixudWxsKSxsfWZ1bmN0aW9uIGNpKHQsZSxuLHIpe3ZhciBvPW5ldyBGbG9hdDMyQXJyYXkobipyKjQpO3JldHVybiBWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5yZWFkUGl4ZWxzKDAsMCxyLG4sdC5SR0JBLHQuRkxPQVQsbyl9KSxvfXZhciBoaT1PYmplY3QuZnJlZXplKHtjcmVhdGVWZXJ0ZXhTaGFkZXI6amEsY3JlYXRlVmVydGV4QnVmZmVyOlhhLGNyZWF0ZUluZGV4QnVmZmVyOllhLGNyZWF0ZUZsb2F0MzJNYXRyaXhUZXh0dXJlOkphLGNyZWF0ZUZsb2F0MTZNYXRyaXhUZXh0dXJlOlphLGNyZWF0ZVVuc2lnbmVkQnl0ZXNNYXRyaXhUZXh0dXJlOnRpLGNyZWF0ZVBhY2tlZE1hdHJpeFRleHR1cmU6ZWksY3JlYXRlRmxvYXQxNlBhY2tlZE1hdHJpeFRleHR1cmU6bmksYmluZFZlcnRleFByb2dyYW1BdHRyaWJ1dGVTdHJlYW1zOnJpLHVwbG9hZERlbnNlTWF0cml4VG9UZXh0dXJlOm9pLHVwbG9hZFBpeGVsRGF0YVRvVGV4dHVyZTphaSxjcmVhdGVCdWZmZXJGcm9tT3V0cHV0VGV4dHVyZTppaSxkb3dubG9hZEZsb2F0MzJNYXRyaXhGcm9tQnVmZmVyOnNpLGRvd25sb2FkQnl0ZUVuY29kZWRGbG9hdE1hdHJpeEZyb21PdXRwdXRUZXh0dXJlOnVpLGRvd25sb2FkUGFja2VkTWF0cml4RnJvbUJ1ZmZlcjpsaSxkb3dubG9hZE1hdHJpeEZyb21QYWNrZWRPdXRwdXRUZXh0dXJlOmNpfSkscGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMub3V0cHV0VGV4dHVyZT1udWxsLHRoaXMucHJvZ3JhbT1udWxsLHRoaXMuZGlzcG9zZWQ9ITEsdGhpcy52ZXJ0ZXhBdHRyc0FyZUJvdW5kPSExLHRoaXMuaXRlbXNUb1BvbGw9W107dmFyIGU9aS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpO2lmKG51bGwhPXQ/KHRoaXMuZ2w9dCxGdChlLHQpKTp0aGlzLmdsPU10KGUpLDE9PT1pLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpdGhpcy50ZXh0dXJlRmxvYXRFeHRlbnNpb249JHQodGhpcy5nbCx0aGlzLmRlYnVnLFwiT0VTX3RleHR1cmVfZmxvYXRcIiksdGhpcy5jb2xvckJ1ZmZlckZsb2F0RXh0ZW5zaW9uPXRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKFwiV0VCR0xfY29sb3JfYnVmZmVyX2Zsb2F0XCIpLHRoaXMudGV4dHVyZUhhbGZGbG9hdEV4dGVuc2lvbj0kdCh0aGlzLmdsLHRoaXMuZGVidWcsXCJPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0XCIpLHRoaXMuY29sb3JCdWZmZXJIYWxmRmxvYXRFeHRlbnNpb249dGhpcy5nbC5nZXRFeHRlbnNpb24oXCJFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXRcIik7ZWxzZXtpZihrZSh0aGlzLmdsLFwiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdFwiKSl0aGlzLmNvbG9yQnVmZmVyRmxvYXRFeHRlbnNpb249dGhpcy5nbC5nZXRFeHRlbnNpb24oXCJFWFRfY29sb3JfYnVmZmVyX2Zsb2F0XCIpO2Vsc2V7aWYoIWtlKHRoaXMuZ2wsXCJFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXRcIikpdGhyb3cgbmV3IEVycm9yKFwiR0wgY29udGV4dCBkb2VzIG5vdCBzdXBwb3J0IGNvbG9yIHJlbmRlcmFibGUgZmxvYXRzXCIpO3RoaXMuY29sb3JCdWZmZXJIYWxmRmxvYXRFeHRlbnNpb249dGhpcy5nbC5nZXRFeHRlbnNpb24oXCJFWFRfY29sb3JfYnVmZmVyX2hhbGZfZmxvYXRcIil9fXRoaXMudmVydGV4QnVmZmVyPVhhKHRoaXMuZ2wsdGhpcy5kZWJ1ZyksdGhpcy5pbmRleEJ1ZmZlcj1ZYSh0aGlzLmdsLHRoaXMuZGVidWcpLHRoaXMuZnJhbWVidWZmZXI9YWUodGhpcy5nbCx0aGlzLmRlYnVnKSx0aGlzLnRleHR1cmVDb25maWc9VXQodGhpcy5nbCx0aGlzLnRleHR1cmVIYWxmRmxvYXRFeHRlbnNpb24pfXJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJkZWJ1Z1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaS5nZXRCb29sKFwiREVCVUdcIil9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoIXRoaXMuZGlzcG9zZWQpe251bGwhPXRoaXMucHJvZ3JhbSYmY29uc29sZS53YXJuKFwiRGlzcG9zaW5nIGEgR1BHUFVDb250ZXh0IHRoYXQgc3RpbGwgaGFzIGEgYm91bmQgV2ViR0xQcm9ncmFtLiBUaGlzIGlzIHByb2JhYmx5IGEgcmVzb3VyY2UgbGVhaywgZGVsZXRlIHRoZSBwcm9ncmFtIHdpdGggR1BHUFVDb250ZXh0LmRlbGV0ZVByb2dyYW0gYmVmb3JlIGRpc3Bvc2luZy5cIiksbnVsbCE9dGhpcy5vdXRwdXRUZXh0dXJlJiZjb25zb2xlLndhcm4oXCJEaXNwb3NpbmcgYSBHUEdQVUNvbnRleHQgdGhhdCBzdGlsbCBoYXMgYSBib3VuZCBvdXRwdXQgbWF0cml4IHRleHR1cmUuICBUaGlzIGlzIHByb2JhYmx5IGEgcmVzb3VyY2UgbGVhaywgZGVsZXRlIHRoZSBvdXRwdXQgbWF0cml4IHRleHR1cmUgd2l0aCBHUEdQVUNvbnRleHQuZGVsZXRlTWF0cml4VGV4dHVyZSBiZWZvcmUgZGlzcG9zaW5nLlwiKTt2YXIgZT10aGlzLmdsO1Z0KGUsdGhpcy5kZWJ1ZyxmdW5jdGlvbigpe3JldHVybiBlLmZpbmlzaCgpfSksVnQoZSx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIGUuYmluZEZyYW1lYnVmZmVyKGUuRlJBTUVCVUZGRVIsbnVsbCl9KSxWdChlLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWxldGVGcmFtZWJ1ZmZlcih0LmZyYW1lYnVmZmVyKX0pLFZ0KGUsdGhpcy5kZWJ1ZyxmdW5jdGlvbigpe3JldHVybiBlLmJpbmRCdWZmZXIoZS5BUlJBWV9CVUZGRVIsbnVsbCl9KSxWdChlLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gZS5iaW5kQnVmZmVyKGUuRUxFTUVOVF9BUlJBWV9CVUZGRVIsbnVsbCl9KSxWdChlLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gZS5kZWxldGVCdWZmZXIodC5pbmRleEJ1ZmZlcil9KSx0aGlzLmRpc3Bvc2VkPSEwfX0sdC5wcm90b3R5cGUuY3JlYXRlRmxvYXQzMk1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxKYSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLmNyZWF0ZUZsb2F0MTZNYXRyaXhUZXh0dXJlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksWmEodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSx0aGlzLnRleHR1cmVDb25maWcpfSx0LnByb3RvdHlwZS5jcmVhdGVVbnNpZ25lZEJ5dGVzTWF0cml4VGV4dHVyZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRpKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0LGUsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUudXBsb2FkUGl4ZWxEYXRhVG9UZXh0dXJlPWZ1bmN0aW9uKHQsZSl7dGhpcy50aHJvd0lmRGlzcG9zZWQoKSxhaSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlKX0sdC5wcm90b3R5cGUudXBsb2FkRGVuc2VNYXRyaXhUb1RleHR1cmU9ZnVuY3Rpb24odCxlLG4scil7dGhpcy50aHJvd0lmRGlzcG9zZWQoKSxvaSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLG4scix0aGlzLnRleHR1cmVDb25maWcpfSx0LnByb3RvdHlwZS5jcmVhdGVGbG9hdDE2UGFja2VkTWF0cml4VGV4dHVyZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLG5pKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0LGUsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUuY3JlYXRlUGFja2VkTWF0cml4VGV4dHVyZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLGVpKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0LGUsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUuZGVsZXRlTWF0cml4VGV4dHVyZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5vdXRwdXRUZXh0dXJlPT09dCYmKHBlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0aGlzLmZyYW1lYnVmZmVyKSx0aGlzLm91dHB1dFRleHR1cmU9bnVsbCksVnQodGhpcy5nbCx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIGUuZ2wuZGVsZXRlVGV4dHVyZSh0KX0pfSx0LnByb3RvdHlwZS5kb3dubG9hZEJ5dGVFbmNvZGVkRmxvYXRNYXRyaXhGcm9tT3V0cHV0VGV4dHVyZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcztyZXR1cm4gdGhpcy5kb3dubG9hZE1hdHJpeERyaXZlcih0LGZ1bmN0aW9uKCl7cmV0dXJuIHVpKHIuZ2wsci5kZWJ1ZyxlLG4sci50ZXh0dXJlQ29uZmlnKX0pfSx0LnByb3RvdHlwZS5kb3dubG9hZFBhY2tlZE1hdHJpeEZyb21CdWZmZXI9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiBsaSh0aGlzLmdsLHQsMCwwLDAsbyxhLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLmRvd25sb2FkRmxvYXQzMk1hdHJpeEZyb21CdWZmZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gc2kodGhpcy5nbCx0LGUpfSx0LnByb3RvdHlwZS5jcmVhdGVCdWZmZXJGcm9tVGV4dHVyZT1mdW5jdGlvbih0LGUsbil7dGhpcy5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXIodCk7dmFyIHI9aWkodGhpcy5nbCx0aGlzLmRlYnVnLGUsbix0aGlzLnRleHR1cmVDb25maWcpO3JldHVybiB0aGlzLnVuYmluZFRleHR1cmVUb0ZyYW1lQnVmZmVyKCkscn0sdC5wcm90b3R5cGUuY3JlYXRlQW5kV2FpdEZvckZlbmNlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5jcmVhdGVGZW5jZSh0aGlzLmdsKTtyZXR1cm4gdGhpcy5wb2xsRmVuY2UodCl9LHQucHJvdG90eXBlLmNyZWF0ZUZlbmNlPWZ1bmN0aW9uKHQpe3ZhciBlLG4scj10aGlzO2lmKGkuZ2V0Qm9vbChcIldFQkdMX0ZFTkNFX0FQSV9FTkFCTEVEXCIpKXt2YXIgbz10LGE9by5mZW5jZVN5bmMoby5TWU5DX0dQVV9DT01NQU5EU19DT01QTEVURSwwKTt0LmZsdXNoKCksbj1mdW5jdGlvbigpe3ZhciB0PW8uY2xpZW50V2FpdFN5bmMoYSwwLDApO3JldHVybiB0PT09by5BTFJFQURZX1NJR05BTEVEfHx0PT09by5DT05ESVRJT05fU0FUSVNGSUVEfSxlPWF9ZWxzZSBpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9WRVJTSU9OXCIpPjA/KGU9dGhpcy5iZWdpblF1ZXJ5KCksdGhpcy5lbmRRdWVyeSgpLG49ZnVuY3Rpb24oKXtyZXR1cm4gci5pc1F1ZXJ5QXZhaWxhYmxlKGUsaS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKSl9KTpuPWZ1bmN0aW9uKCl7cmV0dXJuITB9O3JldHVybntxdWVyeTplLGlzRmVuY2VQYXNzZWQ6bn19LHQucHJvdG90eXBlLmRvd25sb2FkTWF0cml4RnJvbVBhY2tlZFRleHR1cmU9ZnVuY3Rpb24odCxlLG4pe3ZhciByPXRoaXM7cmV0dXJuIHRoaXMuZG93bmxvYWRNYXRyaXhEcml2ZXIodCxmdW5jdGlvbigpe3JldHVybiBjaShyLmdsLHIuZGVidWcsZSxuKX0pfSx0LnByb3RvdHlwZS5jcmVhdGVQcm9ncmFtPWZ1bmN0aW9uKHQpe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCk7dmFyIGU9dGhpcy5nbCxuPWp0KGUsdGhpcy5kZWJ1Zyx0KSxyPWphKGUsdGhpcy5kZWJ1Zyksbz1KdChlLHRoaXMuZGVidWcpO3JldHVybiBWdChlLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gZS5hdHRhY2hTaGFkZXIobyxyKX0pLFZ0KGUsdGhpcy5kZWJ1ZyxmdW5jdGlvbigpe3JldHVybiBlLmF0dGFjaFNoYWRlcihvLG4pfSksWnQoZSx0aGlzLmRlYnVnLG8pLHRoaXMuZGVidWcmJnRlKGUsdGhpcy5kZWJ1ZyxvKSx0aGlzLnZlcnRleEF0dHJzQXJlQm91bmR8fCh0aGlzLnNldFByb2dyYW0obyksdGhpcy52ZXJ0ZXhBdHRyc0FyZUJvdW5kPXJpKGUsdGhpcy5kZWJ1Zyx0aGlzLnByb2dyYW0sdGhpcy52ZXJ0ZXhCdWZmZXIpKSxvfSx0LnByb3RvdHlwZS5kZWxldGVQcm9ncmFtPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0PT09dGhpcy5wcm9ncmFtJiYodGhpcy5wcm9ncmFtPW51bGwpLG51bGwhPXQmJlZ0KHRoaXMuZ2wsdGhpcy5kZWJ1ZyxmdW5jdGlvbigpe3JldHVybiBlLmdsLmRlbGV0ZVByb2dyYW0odCl9KX0sdC5wcm90b3R5cGUuc2V0UHJvZ3JhbT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5wcm9ncmFtPXQsbnVsbCE9dGhpcy5wcm9ncmFtJiZ0aGlzLmRlYnVnJiZ0ZSh0aGlzLmdsLHRoaXMuZGVidWcsdGhpcy5wcm9ncmFtKSxWdCh0aGlzLmdsLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gZS5nbC51c2VQcm9ncmFtKHQpfSl9LHQucHJvdG90eXBlLmdldFVuaWZvcm1Mb2NhdGlvbj1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPSEwKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLG4/dWUodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSk6bGUodGhpcy5nbCx0LGUpfSx0LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVMb2NhdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksVnQodGhpcy5nbCx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIG4uZ2wuZ2V0QXR0cmliTG9jYXRpb24odCxlKX0pfSx0LnByb3RvdHlwZS5nZXRVbmlmb3JtTG9jYXRpb25Ob1Rocm93PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5nbC5nZXRVbmlmb3JtTG9jYXRpb24odCxlKX0sdC5wcm90b3R5cGUuc2V0SW5wdXRNYXRyaXhUZXh0dXJlPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMudGhyb3dJZk5vUHJvZ3JhbSgpLGNlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0aGlzLnByb2dyYW0sdCxlLG4pfSx0LnByb3RvdHlwZS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnNldE91dHB1dE1hdHJpeFRleHR1cmVEcml2ZXIodCxuLGUpfSx0LnByb3RvdHlwZS5zZXRPdXRwdXRQYWNrZWRNYXRyaXhUZXh0dXJlPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnRocm93SWZEaXNwb3NlZCgpO3ZhciByPVd0KGUsbiksbz1yWzBdLGE9clsxXTt0aGlzLnNldE91dHB1dE1hdHJpeFRleHR1cmVEcml2ZXIodCxvLGEpfSx0LnByb3RvdHlwZS5zZXRPdXRwdXRNYXRyaXhXcml0ZVJlZ2lvbj1mdW5jdGlvbih0LGUsbixyKXt0aGlzLnNldE91dHB1dE1hdHJpeFdyaXRlUmVnaW9uRHJpdmVyKG4sdCxyLGUpfSx0LnByb3RvdHlwZS5zZXRPdXRwdXRQYWNrZWRNYXRyaXhXcml0ZVJlZ2lvbj1mdW5jdGlvbih0LGUsbixyKXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRPdXRwdXRQYWNrZWRNYXRyaXhXcml0ZVJlZ2lvbiBub3QgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5kZWJ1Z1ZhbGlkYXRlPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5wcm9ncmFtJiZ0ZSh0aGlzLmdsLHRoaXMuZGVidWcsdGhpcy5wcm9ncmFtKSxmZSh0aGlzLmdsKX0sdC5wcm90b3R5cGUuZXhlY3V0ZVByb2dyYW09ZnVuY3Rpb24oKXt0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMudGhyb3dJZk5vUHJvZ3JhbSgpO3ZhciB0PXRoaXMuZ2w7dGhpcy5kZWJ1ZyYmdGhpcy5kZWJ1Z1ZhbGlkYXRlKCksVnQodCx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIHQuZHJhd0VsZW1lbnRzKHQuVFJJQU5HTEVTLDYsdC5VTlNJR05FRF9TSE9SVCwwKX0pfSx0LnByb3RvdHlwZS5ibG9ja1VudGlsQWxsUHJvZ3JhbXNDb21wbGV0ZWQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksVnQodGhpcy5nbCx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIHQuZ2wuZmluaXNoKCl9KX0sdC5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbj1mdW5jdGlvbigpe3JldHVybiBudWxsPT10aGlzLmRpc2pvaW50UXVlcnlUaW1lckV4dGVuc2lvbiYmKHRoaXMuZGlzam9pbnRRdWVyeVRpbWVyRXh0ZW5zaW9uPSR0KHRoaXMuZ2wsdGhpcy5kZWJ1ZywyPT09aS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKT9cIkVYVF9kaXNqb2ludF90aW1lcl9xdWVyeV93ZWJnbDJcIjpcIkVYVF9kaXNqb2ludF90aW1lcl9xdWVyeVwiKSksdGhpcy5kaXNqb2ludFF1ZXJ5VGltZXJFeHRlbnNpb259LHQucHJvdG90eXBlLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uKCl9LHQucHJvdG90eXBlLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDE9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uKCl9LHQucHJvdG90eXBlLmJlZ2luUXVlcnk9ZnVuY3Rpb24oKXtpZigyPT09aS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKSl7dmFyIHQ9dGhpcy5nbCxlPXRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMigpLG49dC5jcmVhdGVRdWVyeSgpO3JldHVybiB0LmJlZ2luUXVlcnkoZS5USU1FX0VMQVBTRURfRVhULG4pLG59dmFyIHI9dGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wxKCksbz1yLmNyZWF0ZVF1ZXJ5RVhUKCk7cmV0dXJuIHIuYmVnaW5RdWVyeUVYVChyLlRJTUVfRUxBUFNFRF9FWFQsbyksb30sdC5wcm90b3R5cGUuZW5kUXVlcnk9ZnVuY3Rpb24oKXtpZigyIT09aS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKSl7dmFyIHQ9dGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wxKCk7dC5lbmRRdWVyeUVYVCh0LlRJTUVfRUxBUFNFRF9FWFQpfWVsc2V7dmFyIGU9dGhpcy5nbCxuPXRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMigpO2UuZW5kUXVlcnkobi5USU1FX0VMQVBTRURfRVhUKX19LHQucHJvdG90eXBlLndhaXRGb3JRdWVyeUFuZEdldFRpbWU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKG4pe3N3aXRjaChuLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsRShmdW5jdGlvbigpe3JldHVybiBlLmRpc3Bvc2VkfHxlLmlzUXVlcnlBdmFpbGFibGUodCxpLmdldE51bWJlcihcIldFQkdMX0RJU0pPSU5UX1FVRVJZX1RJTUVSX0VYVEVOU0lPTl9WRVJTSU9OXCIpKX0pXTtjYXNlIDE6cmV0dXJuIG4uc2VudCgpLFsyLHRoaXMuZ2V0UXVlcnlUaW1lKHQsaS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKSldfX0pfSl9LHQucHJvdG90eXBlLmdldFF1ZXJ5VGltZT1mdW5jdGlvbih0LGUpe2lmKDA9PT1lKXJldHVybiBudWxsO2lmKDI9PT1lKXt2YXIgbj10aGlzLmdsO3JldHVybiBuLmdldFF1ZXJ5UGFyYW1ldGVyKHQsbi5RVUVSWV9SRVNVTFQpLzFlNn12YXIgcj10aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDEoKTtyZXR1cm4gci5nZXRRdWVyeU9iamVjdEVYVCh0LHIuUVVFUllfUkVTVUxUX0VYVCkvMWU2fSx0LnByb3RvdHlwZS5pc1F1ZXJ5QXZhaWxhYmxlPWZ1bmN0aW9uKHQsZSl7aWYoMD09PWUpcmV0dXJuITA7aWYoMj09PWUpe3ZhciBuPXRoaXMuZ2wscj10aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDIoKSxvPW4uZ2V0UXVlcnlQYXJhbWV0ZXIodCxuLlFVRVJZX1JFU1VMVF9BVkFJTEFCTEUpO3JldHVybiBudWxsPT10aGlzLmRpc2pvaW50JiYodGhpcy5kaXNqb2ludD10aGlzLmdsLmdldFBhcmFtZXRlcihyLkdQVV9ESVNKT0lOVF9FWFQpKSxvJiYhdGhpcy5kaXNqb2ludH1vPShyPXRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMSgpKS5nZXRRdWVyeU9iamVjdEVYVCh0LHIuUVVFUllfUkVTVUxUX0FWQUlMQUJMRV9FWFQpO3JldHVybiBudWxsPT10aGlzLmRpc2pvaW50JiYodGhpcy5kaXNqb2ludD10aGlzLmdsLmdldFBhcmFtZXRlcihyLkdQVV9ESVNKT0lOVF9FWFQpKSxvJiYhdGhpcy5kaXNqb2ludH0sdC5wcm90b3R5cGUucG9sbEZlbmNlPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKG4pe2UuYWRkSXRlbVRvUG9sbChmdW5jdGlvbigpe3JldHVybiB0LmlzRmVuY2VQYXNzZWQoKX0sZnVuY3Rpb24oKXtyZXR1cm4gbigpfSl9KX0sdC5wcm90b3R5cGUucG9sbEl0ZW1zPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT0wO2U8dC5sZW5ndGg7KytlKXt2YXIgbj10W2VdKCk7aWYoIW4pYnJlYWt9cmV0dXJuIGUtMX0odGhpcy5pdGVtc1RvUG9sbC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuaXNEb25lRm59KSksZT0wO2U8PXQ7KytlKXsoMCx0aGlzLml0ZW1zVG9Qb2xsW2VdLnJlc29sdmVGbikoKX10aGlzLml0ZW1zVG9Qb2xsPXRoaXMuaXRlbXNUb1BvbGwuc2xpY2UodCsxKX0sdC5wcm90b3R5cGUuYWRkSXRlbVRvUG9sbD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7dGhpcy5pdGVtc1RvUG9sbC5wdXNoKHtpc0RvbmVGbjp0LHJlc29sdmVGbjplfSksdGhpcy5pdGVtc1RvUG9sbC5sZW5ndGg+MXx8RShmdW5jdGlvbigpe3JldHVybiBuLnBvbGxJdGVtcygpLDA9PT1uLml0ZW1zVG9Qb2xsLmxlbmd0aH0pfSx0LnByb3RvdHlwZS5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXI9ZnVuY3Rpb24odCl7dGhpcy50aHJvd0lmRGlzcG9zZWQoKSxoZSh0aGlzLmdsLHRoaXMuZGVidWcsdCx0aGlzLmZyYW1lYnVmZmVyKSx0aGlzLmRlYnVnJiZmZSh0aGlzLmdsKX0sdC5wcm90b3R5cGUudW5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXI9ZnVuY3Rpb24oKXtudWxsIT10aGlzLm91dHB1dFRleHR1cmU/KGhlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0aGlzLm91dHB1dFRleHR1cmUsdGhpcy5mcmFtZWJ1ZmZlciksdGhpcy5kZWJ1ZyYmZmUodGhpcy5nbCkpOnBlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0aGlzLmZyYW1lYnVmZmVyKX0sdC5wcm90b3R5cGUuZG93bmxvYWRNYXRyaXhEcml2ZXI9ZnVuY3Rpb24odCxlKXt0aGlzLmJpbmRUZXh0dXJlVG9GcmFtZUJ1ZmZlcih0KTt2YXIgbj1lKCk7cmV0dXJuIHRoaXMudW5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXIoKSxufSx0LnByb3RvdHlwZS5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlRHJpdmVyPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLnRocm93SWZEaXNwb3NlZCgpO3ZhciByPXRoaXMuZ2w7aGUocix0aGlzLmRlYnVnLHQsdGhpcy5mcmFtZWJ1ZmZlciksdGhpcy5kZWJ1ZyYmZmUociksdGhpcy5vdXRwdXRUZXh0dXJlPXQsVnQocix0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIHIudmlld3BvcnQoMCwwLGUsbil9KSxWdChyLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gci5zY2lzc29yKDAsMCxlLG4pfSl9LHQucHJvdG90eXBlLnNldE91dHB1dE1hdHJpeFdyaXRlUmVnaW9uRHJpdmVyPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPXRoaXM7dGhpcy50aHJvd0lmRGlzcG9zZWQoKSxWdCh0aGlzLmdsLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gby5nbC5zY2lzc29yKHQsZSxuLHIpfSl9LHQucHJvdG90eXBlLnRocm93SWZEaXNwb3NlZD1mdW5jdGlvbigpe2lmKHRoaXMuZGlzcG9zZWQpdGhyb3cgbmV3IEVycm9yKFwiQXR0ZW1wdGVkIHRvIHVzZSBkaXNwb3NlZCBHUEdQVUNvbnRleHQuXCIpfSx0LnByb3RvdHlwZS50aHJvd0lmTm9Qcm9ncmFtPWZ1bmN0aW9uKCl7aWYobnVsbD09dGhpcy5wcm9ncmFtKXRocm93IG5ldyBFcnJvcihcIk5vIEdQVSBwcm9ncmFtIGlzIGN1cnJlbnRseSBzZXQuXCIpfSx0fSgpO2Z1bmN0aW9uIGZpKHQsZSl7aWYodC5sZW5ndGghPT1lLmxlbmd0aCl0aHJvdyBFcnJvcihcIkJpbmFyeSB3YXMgY29tcGlsZWQgd2l0aCBcIit0Lmxlbmd0aCtcIiBpbnB1dHMsIGJ1dCB3YXMgZXhlY3V0ZWQgd2l0aCBcIitlLmxlbmd0aCtcIiBpbnB1dHNcIik7dC5mb3JFYWNoKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5sb2dpY2FsU2hhcGUsbz1lW25dLGE9by5zaGFwZTtpZigheShyLGEpKXRocm93IEVycm9yKFwiQmluYXJ5IHdhcyBjb21waWxlZCB3aXRoIGRpZmZlcmVudCBzaGFwZXMgdGhhbiB0aGUgY3VycmVudCBhcmdzLiBTaGFwZXMgXCIrcitcIiBhbmQgXCIrYStcIiBtdXN0IG1hdGNoXCIpO2lmKCF0LmlzVW5pZm9ybXx8IW8uaXNVbmlmb3JtKXt2YXIgaT10LnRleFNoYXBlLHM9by5pc1VuaWZvcm0/bnVsbDpvLnRleERhdGEudGV4U2hhcGU7aWYoIXkoaSxzKSl0aHJvdyBFcnJvcihcIkJpbmFyeSB3YXMgY29tcGlsZWQgd2l0aCBkaWZmZXJlbnQgdGV4dHVyZSBzaGFwZXMgdGhhbiB0aGUgY3VycmVudCBhcmdzLiBTaGFwZSBcIitpK1wiIGFuZCBcIitzK1wiIG11c3QgbWF0Y2hcIil9fSl9dmFyIGRpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMCx0aGlzLm91dHB1dFNoYXBlPXQ7Zm9yKHZhciByPW4uZmlsdGVyV2lkdGgsbz1uLmluQ2hhbm5lbHMsYT1uLnN0cmlkZVdpZHRoLGk9bi5zdHJpZGVIZWlnaHQscz1uLnBhZEluZm8sdT1uLm91dFdpZHRoLGw9bi5kaWxhdGlvbldpZHRoLGM9bi5kaWxhdGlvbkhlaWdodCxoPW4uZGF0YUZvcm1hdCxwPXMubGVmdCxmPXMudG9wLGQ9bypyLHY9Qm8oKSxtPVwiY2hhbm5lbHNMYXN0XCI9PT1oLGc9bT8wOjEseT1tPzE6Mix4PVwiXCIsYj0wO2I8PTE7YisrKWZvcih2YXIgdz0wO3c8PTE7dysrKXgrPVwiXFxuICAgICAgICAgIGJsb2NrSW5kZXggPSByYy55ICsgXCIrdytcIjtcXG4gICAgICAgICAgcG9zID0gcmMueCArIFwiK2IrXCI7XFxuXFxuICAgICAgICAgIGlmKGJsb2NrSW5kZXggPCBcIit0WzFdK1wiICYmIHBvcyA8IFwiK3RbMF0rXCIpIHtcXG4gICAgICAgICAgICBvZmZzZXRZID0gaW50KGJsb2NrSW5kZXggLyAoXCIrdStcIikpICogXCIraStcIiAtIFwiK2YrXCI7XFxuICAgICAgICAgICAgZDAgPSBvZmZzZXRZICsgXCIrYytcIiAqIChwb3MgLyBcIitkK1wiKTtcXG5cXG4gICAgICAgICAgICBpZihkMCA8IFwiK2VbZ10rXCIgJiYgZDAgPj0gMCkge1xcblxcbiAgICAgICAgICAgICAgb2Zmc2V0WCA9IGludChtb2QoZmxvYXQoYmxvY2tJbmRleCksIFwiK3UrXCIuKSAqIFwiK2ErXCIuIC0gXCIrcCtcIi4pO1xcbiAgICAgICAgICAgICAgZDEgPSBvZmZzZXRYICsgXCIrbCtcIiAqIChpbnQobW9kKGZsb2F0KHBvcyksIFwiK2QrXCIuKSAvIFwiK28rXCIuKSk7XFxuXFxuICAgICAgICAgICAgICBpZihkMSA8IFwiK2VbeV0rXCIgJiYgZDEgPj0gMCkge1xcblxcbiAgICAgICAgICAgICAgICBjaCA9IGludChtb2QoZmxvYXQocG9zKSwgXCIrbytcIi4pKTtcXG5cXG4gICAgICAgICAgICAgICAgaWYgKFwiK20rXCIpIHtcXG4gICAgICAgICAgICAgICAgICBpbm5lckRpbXMgPSB2ZWMyKGQxLCBjaCk7XFxuICAgICAgICAgICAgICAgICAgcmVzdWx0W1wiKygyKmIrdykrXCJdID0gZ2V0Q2hhbm5lbChcXG4gICAgICAgICAgICAgICAgICAgIGdldEEoZDAsIGludChpbm5lckRpbXMueCksXFxuICAgICAgICAgICAgICAgICAgICBpbnQoaW5uZXJEaW1zLnkpKSwgaW5uZXJEaW1zKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICBpbm5lckRpbXMgPSB2ZWMyKGQwLCBkMSk7XFxuICAgICAgICAgICAgICAgICAgcmVzdWx0W1wiKygyKmIrdykrXCJdID0gZ2V0Q2hhbm5lbChcXG4gICAgICAgICAgICAgICAgICAgIGdldEEoY2gsIGludChpbm5lckRpbXMueCksXFxuICAgICAgICAgICAgICAgICAgICBpbnQoaW5uZXJEaW1zLnkpKSwgaW5uZXJEaW1zKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgXCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuXFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMCk7XFxuXFxuICAgICAgICBpbnQgYmxvY2tJbmRleCwgcG9zLCBvZmZzZXRZLCBkMCwgb2Zmc2V0WCwgZDEsIGNoO1xcbiAgICAgICAgdmVjMiBpbm5lckRpbXM7XFxuXFxuICAgICAgICBcIit4K1wiXFxuXFxuICAgICAgICBcIit2Lm91dHB1dCtcIiA9IHJlc3VsdDtcXG4gICAgICB9XFxuICAgIFwifX0oKSx2aT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9W107dmFyIGEsaT1lLHM9dFszXS0xO3RoaXMub3V0cHV0U2hhcGU9dDt2YXIgdT1cImZsb2F0KFwiK24rXCIpICsgZmxvYXQoXCIrcitcIikgKiBzdW1cIjthPS41PT09bz9cImludmVyc2VzcXJ0KFwiK3UrXCIpXCI6MT09PW8/XCIxLjAvKFwiK3UrXCIpXCI6XCJleHAobG9nKFwiK3UrXCIpICogZmxvYXQoLVwiK28rXCIpKTtcIix0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCByID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGMgPSBjb29yZHNbMl07XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG4gICAgICAgIGZsb2F0IHggPSBnZXRYKGIsIHIsIGMsIGQpO1xcbiAgICAgICAgZmxvYXQgc3VtID0gMC4wO1xcbiAgICAgICAgZm9yIChpbnQgaiA9IC1cIitpK1wiOyBqIDw9IFwiK2krXCI7IGorKykge1xcbiAgICAgICAgICBpbnQgaWR4ID0gZCArIGo7XFxuICAgICAgICAgIGlmIChpZHggPj0gMCAmJiBpZHggPD0gIFwiK3MrXCIpIHtcXG4gICAgICAgICAgICBmbG9hdCB6ID0gZ2V0WChiLCByLCBjLCBpZHgpO1xcbiAgICAgICAgICAgIHN1bSArPSB6ICogejtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgZmxvYXQgdmFsID0geCAqIFwiK2ErXCI7XFxuICAgICAgICBzZXRPdXRwdXQodmFsKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxtaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJpbnB1dEltYWdlXCIsXCJvdXRwdXRJbWFnZVwiLFwiZHlcIl0sdGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy5kZXB0aD10WzNdLHRoaXMuZGVwdGhSYWRpdXM9ZSx0aGlzLmJpYXM9bix0aGlzLmFscGhhPXIsdGhpcy5iZXRhPW8sdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgciA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBjID0gY29vcmRzWzJdO1xcblxcbiAgICAgICAgZmxvYXQgcmVzdWx0ID0gMC4wO1xcbiAgICAgICAgZm9yIChpbnQgZCA9IDA7IGQgPCBcIit0aGlzLmRlcHRoK1wiOyArK2QpIHtcXG4gICAgICAgICAgaW50IGRlcHRoQmVnaW4gPSBpbnQobWF4KDAuMCwgZmxvYXQoZCAtIFwiK2UrXCIpKSk7XFxuICAgICAgICAgIGludCBkZXB0aEVuZCA9IGludChtaW4oZmxvYXQoXCIrdGhpcy5kZXB0aCtcIiksXFxuICAgICAgICAgICAgICBmbG9hdChkICsgXCIrZStcIiArIDEpKSk7XFxuXFxuICAgICAgICAgIGNvbnN0IGludCBNSU5fREVQVEhfQkVHSU4gPSAwO1xcbiAgICAgICAgICBjb25zdCBpbnQgTUFYX0RFUFRIX0VORCA9IFwiK3RoaXMuZGVwdGgrXCI7XFxuXFxuICAgICAgICAgIGZsb2F0IG5vcm0gPSAwLjA7XFxuICAgICAgICAgIGZvciAoaW50IGsgPSBNSU5fREVQVEhfQkVHSU47IGsgPCBNQVhfREVQVEhfRU5EOyArK2spIHtcXG4gICAgICAgICAgICBpZiAoayA8IGRlcHRoQmVnaW4pe1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGVsc2UgaWYgKGsgPj0gZGVwdGhCZWdpbiAmJiBrIDwgZGVwdGhFbmQpIHtcXG4gICAgICAgICAgICAgIG5vcm0gKz0gZ2V0SW5wdXRJbWFnZShiLCByLCBjLCBrKSAqIGdldElucHV0SW1hZ2UoYiwgciwgYywgayk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIG5vcm0gPSBmbG9hdChcIityK1wiKSAqIG5vcm0gKyBmbG9hdChcIituK1wiKTtcXG5cXG4gICAgICAgICAgZm9yKGludCBrID0gTUlOX0RFUFRIX0JFR0lOOyBrIDwgTUFYX0RFUFRIX0VORDsgKytrKXtcXG4gICAgICAgICAgICBpZiAoayA8IGRlcHRoQmVnaW4pe1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGVsc2UgaWYgKGsgPj0gZGVwdGhCZWdpbiAmJiBrIDwgZGVwdGhFbmQpe1xcbiAgICAgICAgICAgICAgZmxvYXQgZHlpID0gLTIuMCAqIGZsb2F0KFwiK3IrXCIpXFxuICAgICAgICAgICAgICAgICogZmxvYXQoXCIrbytcIilcXG4gICAgICAgICAgICAgICAgKiBnZXRJbnB1dEltYWdlKGIgLHIgLGMsIGspICogZ2V0T3V0cHV0SW1hZ2UoYiwgciwgYywgZClcXG4gICAgICAgICAgICAgICAgLyBub3JtO1xcbiAgICAgICAgICAgICAgaWYgKGsgPT0gZCkge1xcbiAgICAgICAgICAgICAgICBkeWkgKz0gcG93KG5vcm0sIC0xLjAgKiBcIitvK1wiKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIGlmIChrID09IGNvb3Jkc1szXSkge1xcbiAgICAgICAgICAgICAgICBkeWkgKj0gZ2V0RHkoYiwgciwgYywgZCk7XFxuICAgICAgICAgICAgICAgIHJlc3VsdCArPSBkeWk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGVsc2Uge1xcbiAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgfVxcbiAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLGdpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sdGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMDt2YXIgYSxpPWUscz10WzNdLTE7dGhpcy5vdXRwdXRTaGFwZT10O3ZhciB1PVwiZmxvYXQoXCIrbitcIikgKyBmbG9hdChcIityK1wiKSAqIHN1bVwiO2E9LjU9PT1vP1wiaW52ZXJzZXNxcnQoXCIrdStcIilcIjoxPT09bz9cIjEuMC8oXCIrdStcIilcIjpcImV4cChsb2coXCIrdStcIikgKiBmbG9hdCgtXCIrbytcIikpO1wiLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgciA9IGNvb3Jkcy55O1xcbiAgICAgICAgaW50IGMgPSBjb29yZHMuejtcXG4gICAgICAgIGludCBkID0gY29vcmRzLnc7XFxuXFxuICAgICAgICBib29sIGhhc05leHRDb2wgPSBkIDwgXCIrdGhpcy5vdXRwdXRTaGFwZVszXStcIjtcXG4gICAgICAgIGJvb2wgaGFzTmV4dFJvdyA9IGMgPCBcIit0aGlzLm91dHB1dFNoYXBlWzJdK1wiO1xcblxcbiAgICAgICAgdmVjNCBzdW0gPSB2ZWM0KDAuKTtcXG4gICAgICAgIHZlYzQgeEZyYWdBdE91dHB1dENvb3JkcyA9IGdldFgoYiwgciwgYywgZCk7XFxuXFxuICAgICAgICB2ZWM0IHhBdE91dHB1dENvb3JkcyA9IHZlYzQoXFxuICAgICAgICAgIGdldENoYW5uZWwoeEZyYWdBdE91dHB1dENvb3JkcywgdmVjMihjLCBkKSksXFxuICAgICAgICAgIGhhc05leHRDb2wgP1xcbiAgICAgICAgICAgIGdldENoYW5uZWwoeEZyYWdBdE91dHB1dENvb3JkcywgdmVjMihjLCBkICsgMSkpIDogMC4wLFxcbiAgICAgICAgICBoYXNOZXh0Um93ID9cXG4gICAgICAgICAgICBnZXRDaGFubmVsKHhGcmFnQXRPdXRwdXRDb29yZHMgLCB2ZWMyKGMgKyAxLCBkKSkgOiAwLjAsXFxuICAgICAgICAgIChoYXNOZXh0Um93ICYmIGhhc05leHRDb2wpID9cXG4gICAgICAgICAgICBnZXRDaGFubmVsKHhGcmFnQXRPdXRwdXRDb29yZHMsIHZlYzIoYyArIDEsIGQgKyAxKSkgOiAwLjBcXG4gICAgICAgICk7XFxuXFxuICAgICAgICBpbnQgZmlyc3RDaGFubmVsID0gZCAtIFwiK2krXCI7XFxuICAgICAgICB2ZWMyIGNhY2hlID0gdmVjMigwLik7XFxuICAgICAgICBpZihmaXJzdENoYW5uZWwgPj0gMCl7XFxuICAgICAgICAgIHZlYzQgZmlyc3RDaGFubmVsRnJhZyA9IGdldFgoYiwgciwgYywgZmlyc3RDaGFubmVsKTtcXG4gICAgICAgICAgY2FjaGUueCA9IGdldENoYW5uZWwoZmlyc3RDaGFubmVsRnJhZywgdmVjMihjLCBmaXJzdENoYW5uZWwpKTtcXG4gICAgICAgICAgICBpZihoYXNOZXh0Um93KXtcXG4gICAgICAgICAgICAgIGNhY2hlLnkgPSBnZXRDaGFubmVsKGZpcnN0Q2hhbm5lbEZyYWcsIHZlYzIoYyArIDEsIGZpcnN0Q2hhbm5lbCkpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGl2ZWMyIGRlcHRoID0gaXZlYzIoZCwgZCArIDEpO1xcbiAgICAgICAgZm9yIChpbnQgaiA9IC0gXCIraStcIjsgaiA8PSBcIitpK1wiOyBqKyspIHtcXG4gICAgICAgICAgaXZlYzIgaWR4ID0gZGVwdGggKyBqO1xcbiAgICAgICAgICBidmVjMiBhYm92ZUxvd2VyQm91bmQgPSBncmVhdGVyVGhhbkVxdWFsKGlkeCwgaXZlYzIoMCkpO1xcbiAgICAgICAgICBidmVjMiBiZWxvd1VwcGVyQm91bmQgPSBsZXNzVGhhbkVxdWFsKGlkeCwgaXZlYzIoXCIrcytcIikpO1xcblxcbiAgICAgICAgICBib29sIGRlcHRoSW5SYW5nZSA9IGFib3ZlTG93ZXJCb3VuZC54ICYmIGJlbG93VXBwZXJCb3VuZC54O1xcbiAgICAgICAgICBib29sIGRlcHRoUGx1c09uZUluUmFuZ2UgPSBhYm92ZUxvd2VyQm91bmQueSAmJiBiZWxvd1VwcGVyQm91bmQueTtcXG5cXG4gICAgICAgICAgaWYoZGVwdGhJblJhbmdlIHx8IGRlcHRoUGx1c09uZUluUmFuZ2Upe1xcbiAgICAgICAgICAgIHZlYzQgeiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgIHZlYzQgeEZyYWdBdEN1cnJlbnREZXB0aDtcXG4gICAgICAgICAgICB6Lnh6ID0gY2FjaGUueHk7XFxuICAgICAgICAgICAgaWYoZGVwdGhQbHVzT25lSW5SYW5nZSAmJiBoYXNOZXh0Q29sKXtcXG4gICAgICAgICAgICAgIHhGcmFnQXRDdXJyZW50RGVwdGggPSBpZHgueSAhPSBkID9cXG4gICAgICAgICAgICAgICAgZ2V0WChiLCByLCBjLCBpZHgueSkgOiB4RnJhZ0F0T3V0cHV0Q29vcmRzO1xcbiAgICAgICAgICAgICAgei55ID0gZ2V0Q2hhbm5lbCh4RnJhZ0F0Q3VycmVudERlcHRoLCB2ZWMyKGMsIGlkeC55KSk7XFxuICAgICAgICAgICAgICBpZihoYXNOZXh0Um93KXtcXG4gICAgICAgICAgICAgICAgei53ID0gZ2V0Q2hhbm5lbCh4RnJhZ0F0Q3VycmVudERlcHRoLCB2ZWMyKGMgKyAxLCBpZHgueSkpO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBjYWNoZS54eSA9IHoueXc7XFxuICAgICAgICAgICAgc3VtICs9IHogKiB6O1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHhBdE91dHB1dENvb3JkcyAqIFwiK2ErXCI7XFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSx5aT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiZHlcIixcIm1heFBvc1wiXSx0aGlzLm91dHB1dFNoYXBlPXQuaW5TaGFwZTt2YXIgZT10LnN0cmlkZUhlaWdodCxuPXQuc3RyaWRlV2lkdGgscj10LmRpbGF0aW9uSGVpZ2h0LG89dC5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsYT10LmVmZmVjdGl2ZUZpbHRlcldpZHRoLGk9by0xLXQucGFkSW5mby50b3Ascz1hLTEtdC5wYWRJbmZvLmxlZnQsdT1vKmEtMTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzIgcGFkcyA9IGl2ZWMyKFwiK2krXCIsIFwiK3MrXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG5cXG4gICAgICAgIGl2ZWMyIGR5UkNDb3JuZXIgPSBjb29yZHMueXogLSBwYWRzO1xcbiAgICAgICAgaW50IGR5UkNvcm5lciA9IGR5UkNDb3JuZXIueDtcXG4gICAgICAgIGludCBkeUNDb3JuZXIgPSBkeVJDQ29ybmVyLnk7XFxuXFxuICAgICAgICAvLyBDb252b2x2ZSBkeSg/LCA/LCBkKSB3aXRoIHBvcyBtYXNrKDosIDosIGQpIHRvIGdldCBkeCh4UiwgeEMsIGQpLlxcbiAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWQuIDogPSBhY3Jvc3MgYWxsIHZhbHVlcyBpbiB0aGF0IGF4aXMuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcbiAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK28rXCI7XFxuICAgICAgICAgIHdSICs9IFwiK3IrXCIpIHtcXG4gICAgICAgICAgZmxvYXQgZHlSID0gZmxvYXQoZHlSQ29ybmVyICsgd1IpIC8gXCIrZStcIi4wO1xcblxcbiAgICAgICAgICBpZiAoZHlSIDwgMC4wIHx8IGR5UiA+PSBcIit0Lm91dEhlaWdodCtcIi4wIHx8IGZyYWN0KGR5UikgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5UiA9IGludChkeVIpO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrYStcIjsgd0MrKykge1xcbiAgICAgICAgICAgIGZsb2F0IGR5QyA9IGZsb2F0KGR5Q0Nvcm5lciArIHdDKSAvIFwiK24rXCIuMDtcXG5cXG4gICAgICAgICAgICBpZiAoZHlDIDwgMC4wIHx8IGR5QyA+PSBcIit0Lm91dFdpZHRoK1wiLjAgfHxcXG4gICAgICAgICAgICAgICAgZnJhY3QoZHlDKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGludCBpZHlDID0gaW50KGR5Qyk7XFxuXFxuICAgICAgICAgICAgZmxvYXQgZHlWYWx1ZSA9IGdldER5KGIsIGlkeVIsIGlkeUMsIGQpO1xcbiAgICAgICAgICAgIGludCBtYXhQb3NWYWx1ZSA9IFwiK3UrXCIgLSBpbnQoZ2V0TWF4UG9zKGIsIGlkeVIsIGlkeUMsIGQpKTtcXG5cXG4gICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgdmFsdWUsIGNoZWNrIGl0IGFnYWluc3QgdGhlIHZhbHVlIGZyb20gdGhlXFxuICAgICAgICAgICAgLy8gcG9zaXRpb24gbWF0cml4LlxcbiAgICAgICAgICAgIGludCBjdXJQb3NWYWx1ZSA9IHdSICogXCIrYStcIiArIHdDO1xcbiAgICAgICAgICAgIGZsb2F0IG1hc2sgPSBmbG9hdChtYXhQb3NWYWx1ZSA9PSBjdXJQb3NWYWx1ZSA/IDEuMCA6IDAuMCk7XFxuXFxuICAgICAgICAgICAgZG90UHJvZCArPSBkeVZhbHVlICogbWFzaztcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLHhpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiLFwibWF4UG9zXCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuc3RyaWRlRGVwdGgsbj10LnN0cmlkZUhlaWdodCxyPXQuc3RyaWRlV2lkdGgsbz10LmRpbGF0aW9uRGVwdGgsYT10LmRpbGF0aW9uSGVpZ2h0LGk9dC5kaWxhdGlvbldpZHRoLHM9dC5lZmZlY3RpdmVGaWx0ZXJEZXB0aCx1PXQuZWZmZWN0aXZlRmlsdGVySGVpZ2h0LGw9dC5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxjPXMtMS10LnBhZEluZm8uZnJvbnQsaD11LTEtdC5wYWRJbmZvLnRvcCxwPWwtMS10LnBhZEluZm8ubGVmdCxmPXMqdSpsLTE7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMzIHBhZHMgPSBpdmVjMyhcIitjK1wiLCBcIitoK1wiLCBcIitwK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNSBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IGNoID0gY29vcmRzLnU7XFxuXFxuICAgICAgICBpdmVjMyBkeUNvcm5lciA9IGl2ZWMzKGNvb3Jkcy55LCBjb29yZHMueiwgY29vcmRzLncpIC0gcGFkcztcXG4gICAgICAgIGludCBkeURDb3JuZXIgPSBkeUNvcm5lci54O1xcbiAgICAgICAgaW50IGR5UkNvcm5lciA9IGR5Q29ybmVyLnk7XFxuICAgICAgICBpbnQgZHlDQ29ybmVyID0gZHlDb3JuZXIuejtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIGR5KD8sID8sID8sIGNoKSB3aXRoIHBvcyBtYXNrKDosIDosIDosIGQpIHRvIGdldFxcbiAgICAgICAgLy8gZHgoeEQsIHhSLCB4QywgY2gpLlxcbiAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWQuIDogPSBhY3Jvc3MgYWxsIHZhbHVlcyBpbiB0aGF0IGF4aXMuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgd0QgPSAwOyB3RCA8IFwiK3MrXCI7XFxuICAgICAgICAgICB3RCArPSBcIitvK1wiKSB7XFxuICAgICAgICAgIGZsb2F0IGR5RCA9IGZsb2F0KGR5RENvcm5lciArIHdEKSAvIFwiK2UrXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5RCA8IDAuMCB8fCBkeUQgPj0gXCIrdC5vdXREZXB0aCtcIi4wIHx8IGZyYWN0KGR5RCkgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5RCA9IGludChkeUQpO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrdStcIjtcXG4gICAgICAgICAgICAgIHdSICs9IFwiK2ErXCIpIHtcXG4gICAgICAgICAgICBmbG9hdCBkeVIgPSBmbG9hdChkeVJDb3JuZXIgKyB3UikgLyBcIituK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrbCtcIjtcXG4gICAgICAgICAgICAgICAgd0MgKz0gXCIraStcIikge1xcbiAgICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIrcitcIi4wO1xcblxcbiAgICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgICAgZnJhY3QoZHlDKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIGludCBpZHlDID0gaW50KGR5Qyk7XFxuXFxuICAgICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYmF0Y2gsIGlkeUQsIGlkeVIsIGlkeUMsIGNoKTtcXG4gICAgICAgICAgICAgIGludCBtYXhQb3NWYWx1ZSA9IFwiK2YrXCIgLVxcbiAgICAgICAgICAgICAgICAgIGludChnZXRNYXhQb3MoYmF0Y2gsIGlkeUQsIGlkeVIsIGlkeUMsIGNoKSk7XFxuXFxuICAgICAgICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgdmFsdWUsIGNoZWNrIGl0IGFnYWluc3QgdGhlIHZhbHVlIGZyb20gdGhlXFxuICAgICAgICAgICAgICAvLyBwb3NpdGlvbiBtYXRyaXguXFxuICAgICAgICAgICAgICBpbnQgY3VyUG9zVmFsdWUgPVxcbiAgICAgICAgICAgICAgICAgIHdEICogXCIrdStcIiAqIFwiK2wrXCIgK1xcbiAgICAgICAgICAgICAgICAgIHdSICogXCIrbCtcIiArIHdDO1xcbiAgICAgICAgICAgICAgZmxvYXQgbWFzayA9IGZsb2F0KG1heFBvc1ZhbHVlID09IGN1clBvc1ZhbHVlID8gMS4wIDogMC4wKTtcXG5cXG4gICAgICAgICAgICAgIGRvdFByb2QgKz0gZHlWYWx1ZSAqIG1hc2s7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksYmk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09biYmKG49ITEpLHZvaWQgMD09PXImJihyPSExKSx2b2lkIDA9PT1vJiYobz0hMSksdm9pZCAwPT09YSYmKGE9bnVsbCksdm9pZCAwPT09aSYmKGk9ITEpLHRoaXMudmFyaWFibGVOYW1lcz1bXCJtYXRyaXhBXCIsXCJtYXRyaXhCXCJdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwLHRoaXMub3V0cHV0U2hhcGU9ZTt2YXIgcz1uP3RbMV06dFsyXSx1PU1hdGguY2VpbChzLzIpLGw9bj9cImkgKiAyLCByYy55XCI6XCJyYy55LCBpICogMlwiLGM9cj9cInJjLnosIGkgKiAyXCI6XCJpICogMiwgcmMuelwiLGg9bj9bXCJhLnh4eXlcIixcImEuenp3d1wiXTpbXCJhLnh4enpcIixcImEueXl3d1wiXSxwPXI/W1wiYi54enh6XCIsXCJiLnl3eXdcIl06W1wiYi54eXh5XCIsXCJiLnp3endcIl0sZj1cIlwiLGQ9XCJcIjthJiYoZj1pP1widmVjNCBhY3RpdmF0aW9uKHZlYzQgYSkge1xcbiAgICAgICAgICB2ZWM0IGIgPSBnZXRQcmVsdUFjdGl2YXRpb25XZWlnaHRzQXRPdXRDb29yZHMoKTtcXG4gICAgICAgICAgXCIrYStcIlxcbiAgICAgICAgfVwiOlwidmVjNCBhY3RpdmF0aW9uKHZlYzQgeCkge1xcbiAgICAgICAgICBcIithK1wiXFxuICAgICAgICB9XCIsZD1cInJlc3VsdCA9IGFjdGl2YXRpb24ocmVzdWx0KTtcIik7dmFyIHY9bz9cInJlc3VsdCArPSBnZXRCaWFzQXRPdXRDb29yZHMoKTtcIjpcIlwiO28mJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwiYmlhc1wiKSxpJiZ0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcInByZWx1QWN0aXZhdGlvbldlaWdodHNcIiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK2YrXCJcXG5cXG4gICAgICBjb25zdCBmbG9hdCBzaGFyZWREaW1lbnNpb24gPSBcIit1K1wiLjA7XFxuXFxuICAgICAgdmVjNCBkb3QyeDJBUm93QkNvbChpdmVjMyByYykge1xcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDApO1xcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIit1K1wiOyBpKyspIHtcXG4gICAgICAgICAgdmVjNCBhID0gZ2V0TWF0cml4QShyYy54LCBcIitsK1wiKTtcXG4gICAgICAgICAgdmVjNCBiID0gZ2V0TWF0cml4QihyYy54LCBcIitjK1wiKTtcXG5cXG4gICAgICAgICAgLy8gVGhlc2Ugc3dpenpsZWQgcHJvZHVjdHMgbmVlZCB0byBiZSBzZXBhcmF0ZWx5IGFkZGVkLlxcbiAgICAgICAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS90ZW5zb3JmbG93L3RmanMvaXNzdWVzLzE3MzVcXG4gICAgICAgICAgcmVzdWx0ICs9IChcIitoWzBdK1wiICogXCIrcFswXStcIik7XFxuICAgICAgICAgIHJlc3VsdCArPSAoXCIraFsxXStcIiAqIFwiK3BbMV0rXCIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzMgcmMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gZG90MngyQVJvd0JDb2wocmMpO1xcblxcbiAgICAgICAgXCIrditcIlxcblxcbiAgICAgICAgXCIrZCtcIlxcblxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksd2k9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wicHJvYnNcIl0sdGhpcy5vdXRwdXRTaGFwZT1bdCxuXSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdW5pZm9ybSBmbG9hdCBzZWVkO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzWzBdO1xcblxcbiAgICAgICAgZmxvYXQgciA9IHJhbmRvbShzZWVkKTtcXG4gICAgICAgIGZsb2F0IGNkZiA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgXCIrKGUtMSkrXCI7IGkrKykge1xcbiAgICAgICAgICBjZGYgKz0gZ2V0UHJvYnMoYmF0Y2gsIGkpO1xcblxcbiAgICAgICAgICBpZiAociA8IGNkZikge1xcbiAgICAgICAgICAgIHNldE91dHB1dChmbG9hdChpKSk7XFxuICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICAvLyBJZiBubyBvdGhlciBldmVudCBoYXBwZW5lZCwgbGFzdCBldmVudCBoYXBwZW5lZC5cXG4gICAgICAgIHNldE91dHB1dChmbG9hdChcIisoZS0xKStcIikpO1xcbiAgICAgIH1cXG4gICAgXCJ9cmV0dXJuIHQucHJvdG90eXBlLmdldEN1c3RvbVNldHVwRnVuYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBmdW5jdGlvbihuLHIpe251bGw9PWUuc2VlZExvYyYmKGUuc2VlZExvYz1uLmdldFVuaWZvcm1Mb2NhdGlvbihyLFwic2VlZFwiKSksbi5nbC51bmlmb3JtMWYoZS5zZWVkTG9jLHQpfX0sdH0oKSxDaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiaW5kaWNlc1wiXSx0aGlzLm91dHB1dFNoYXBlPVt0LGVdLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBpbmRleCA9IHJvdW5kKGdldEluZGljZXMoY29vcmRzLngpKTtcXG4gICAgICAgIHNldE91dHB1dChtaXgoZmxvYXQoXCIrcitcIiksIGZsb2F0KFwiK24rXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICBmbG9hdChpbmRleCA9PSBjb29yZHMueSkpKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxFaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLm91dHB1dFNoYXBlPXQ7dmFyIGU9dC5sZW5ndGg7aWYoMD09PWUpdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBzZXRPdXRwdXQodmVjNChnZXRBKCksIDAuLCAwLiwgMC4pKTtcXG4gICAgICAgIH1cXG4gICAgICBcIjtlbHNle3ZhciBuPU1vKFwicmNcIixlKSxyPVhvKGUpLG89ZnVuY3Rpb24odCxlLG4pe2lmKDE9PT10KXJldHVyblwicmMgPiBcIitlWzBdO2Zvcih2YXIgcj1cIlwiLG89dC0yO288dDtvKyspcis9bltvXStcIiA+PSBcIitlW29dLG88dC0xJiYocis9XCJ8fFwiKTtyZXR1cm4gcn0oZSx0LG4pLGE9ZnVuY3Rpb24odCxlLG4scil7aWYoMT09PXQpcmV0dXJuXCJcIjt2YXIgbz1yLnNsaWNlKC0yKTtyZXR1cm5cIlxcbiAgICBpbnQgciA9IFwiK29bMF0rXCI7XFxuICAgIGludCBjID0gXCIrb1sxXStcIjtcXG4gICAgaW50IHJwMSA9IHIgKyAxO1xcbiAgICBpbnQgY3AxID0gYyArIDE7XFxuXFxuICAgIGJvb2wgY0VkZ2UgPSBjcDEgPj0gXCIrZStcIjtcXG4gICAgYm9vbCByRWRnZSA9IHJwMSA+PSBcIituK1wiO1xcbiAgXCJ9KGUsdFt0Lmxlbmd0aC0xXSx0W3QubGVuZ3RoLTJdLG4pLGk9ZnVuY3Rpb24odCxlKXt2YXIgbj10Lmxlbmd0aCxyPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPVtdLHI9MDtyPD0xO3IrKylmb3IodmFyIG89MDtvPD0xO28rKyl7Zm9yKHZhciBhPSgwPT09cj9cInJcIjpcInJwMVwiKStcIiwgXCIrKDA9PT1vP1wiY1wiOlwiY3AxXCIpLGk9MjtpPHQ7aSsrKWE9ZVtlLmxlbmd0aC0xLWldK1wiLFwiK2E7bi5wdXNoKGEpfXJldHVybiBufShuLGUpO3JldHVybiAxPT09bj9cImdldEEocmMpLFxcbiAgICAgICAgICAgIHJjICsgMSA+PSBcIit0WzBdK1wiID8gMC4gOiBnZXRBKHJjICsgMSksXFxuICAgICAgICAgICAgMCwgMFwiOlwiZ2V0QShcIityWzBdK1wiKSxcXG4gICAgICAgICAgY0VkZ2UgPyAwLiA6IGdldEEoXCIrclsxXStcIiksXFxuICAgICAgICAgIHJFZGdlID8gMC4gOiBnZXRBKFwiK3JbMl0rXCIpLFxcbiAgICAgICAgICByRWRnZSB8fCBjRWRnZSA/IDAuIDogZ2V0QShcIityWzNdK1wiKVwifSh0LG4pO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgXCIrcitcIiByYyA9IGdldE91dHB1dENvb3JkcygpO1xcblxcbiAgICAgICAgICBpZihcIitvK1wiKSB7XFxuICAgICAgICAgICAgc2V0T3V0cHV0KHZlYzQoMCkpO1xcbiAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIFwiK2ErXCJcXG5cXG4gICAgICAgICAgICBzZXRPdXRwdXQodmVjNChcIitpK1wiKSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICBcIn19fSgpO3ZhciBSaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sdGhpcy5vdXRwdXRTaGFwZT1lLm1hcChmdW5jdGlvbihlLG4pe3JldHVybiBlWzBdK3Rbbl0rZVsxXX0pO3ZhciByPXQubGVuZ3RoLG89WG8ociksYT1lLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdFswXX0pLmpvaW4oXCIsXCIpLGk9ZS5tYXAoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVswXSt0W25dfSkuam9pbihcIixcIikscz1bXCJjb29yZHNbMF1cIixcImNvb3Jkc1sxXVwiLFwiY29vcmRzWzJdXCIsXCJjb29yZHNbM11cIl0uc2xpY2UoMCxyKTt0aGlzLnVzZXJDb2RlPTEhPT1yP1wiXFxuICAgICAgXCIrbytcIiBzdGFydCA9IFwiK28rXCIoXCIrYStcIik7XFxuICAgICAgXCIrbytcIiBlbmQgPSBcIitvK1wiKFwiK2krXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK28rXCIgb3V0QyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaWYgKGFueShsZXNzVGhhbihvdXRDLCBzdGFydCkpIHx8IGFueShncmVhdGVyVGhhbkVxdWFsKG91dEMsIGVuZCkpKSB7XFxuICAgICAgICAgIHNldE91dHB1dChmbG9hdChcIituK1wiKSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICBcIitvK1wiIGNvb3JkcyA9IG91dEMgLSBzdGFydDtcXG4gICAgICAgICAgc2V0T3V0cHV0KGdldFgoXCIrcytcIikpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgXCI6XCJcXG4gICAgICAgIGludCBzdGFydCA9IFwiK2ErXCI7XFxuICAgICAgICBpbnQgZW5kID0gXCIraStcIjtcXG5cXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaW50IG91dEMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgICAgaWYgKG91dEMgPCBzdGFydCB8fCBvdXRDID49IGVuZCkge1xcbiAgICAgICAgICAgIHNldE91dHB1dChmbG9hdChcIituK1wiKSk7XFxuICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgc2V0T3V0cHV0KGdldFgob3V0QyAtIHN0YXJ0KSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICBcIn19KCksSWk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwLHRoaXMub3V0cHV0U2hhcGU9ZS5tYXAoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVswXSt0W25dK2VbMV19KTtmb3IodmFyIHI9dC5sZW5ndGgsbz1YbyhyKSxhPWUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfSkuam9pbihcIixcIiksaT1lLm1hcChmdW5jdGlvbihlLG4pe3JldHVybiBlWzBdK3Rbbl19KS5qb2luKFwiLFwiKSxzPU1vKFwicmNcIixyKSx1PU1vKFwic291cmNlXCIsciksbD1zW3ItMV0rXCIgPCBcIit0aGlzLm91dHB1dFNoYXBlW3ItMV0sYz0xPT09cj9cInNvdXJjZVwiOlwidmVjMihcIit1LnNsaWNlKC0yKS5qb2luKCkrXCIpXCIsaD1bbytcIiByYyA9IG91dHB1dExvYztcIixzW3ItMV0rXCIgKz0gMTtcXG4gICAgICAgaWYoXCIrbCtcIikge1xcbiAgICAgIFwiLDE9PT1yP1wiXCI6XCJ9XFxuICAgICAgIHJjID0gb3V0cHV0TG9jO1xcbiAgICAgICBcIitzW3ItMl0rXCIgKz0gMTtcXG4gICAgICAgaWYoXCIrc1tyLTJdK1wiIDwgXCIrdGhpcy5vdXRwdXRTaGFwZVtyLTJdK1wiKSB7XCIsMT09PXI/XCJcIjpcIiAgXCIrc1tyLTFdK1wiICs9IDE7XFxuICAgICAgICAgaWYoXCIrbCtcIikge1wiXSxwPTE9PT1yP1wicmMgPCBzdGFydCB8fCByYyA+PSBlbmRcIjpcImFueShsZXNzVGhhbihyYywgc3RhcnQpKSB8fCBhbnkoZ3JlYXRlclRoYW5FcXVhbChyYywgZW5kKSlcIixmPVwiXCIsZD0wLHY9MT09PXI/Mjo0O2Q8djtkKyspZis9XCJcXG4gICAgICAgIFwiK2hbZF0rXCJcXG4gICAgICAgIGlmIChcIitwK1wiKSB7XFxuICAgICAgICAgIHJlc3VsdFtcIitkK1wiXSA9IGZsb2F0KFwiK24rXCIpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgXCIrbytcIiBzb3VyY2UgPSByYyAtIHN0YXJ0O1xcbiAgICAgICAgICByZXN1bHRbXCIrZCtcIl0gPSBnZXRDaGFubmVsKGdldFgoXCIrdS5qb2luKCkrXCIpLCBcIitjK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICBcIjtmKz0xPT09cj9cIn0gXCI6XCJ9fVwiLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBcIitvK1wiIHN0YXJ0ID0gXCIrbytcIihcIithK1wiKTtcXG4gICAgICBjb25zdCBcIitvK1wiIGVuZCA9IFwiK28rXCIoXCIraStcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrbytcIiBvdXRwdXRMb2MgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuICAgICAgICBcIitmK1wiXFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxraT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7aWYodGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sXCJhdmdcIj09PWUmJm4pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbXB1dGUgcG9zaXRpb25zIGZvciBhdmVyYWdlIHBvb2wuXCIpO3ZhciByPXQuZmlsdGVyV2lkdGgsbz10LnN0cmlkZUhlaWdodCxhPXQuc3RyaWRlV2lkdGgsaT10LmRpbGF0aW9uSGVpZ2h0LHM9dC5kaWxhdGlvbldpZHRoLHU9dC5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsbD10LmVmZmVjdGl2ZUZpbHRlcldpZHRoLGM9dC5wYWRJbmZvLnRvcCxoPXQucGFkSW5mby5sZWZ0O3RoaXMub3V0cHV0U2hhcGU9dC5vdXRTaGFwZTt2YXIgcD1cImF2Z1wiPT09ZSxmPVwiMC4wXCI7aWYocHx8KGY9XCItMS4wIC8gMWUtMjBcIiksbil0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgICBjb25zdCBpdmVjMiBzdHJpZGVzID0gaXZlYzIoXCIrbytcIiwgXCIrYStcIik7XFxuICAgICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIrYytcIiwgXCIraCtcIik7XFxuXFxuICAgICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuICAgICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgICBpdmVjMiB4UkNDb3JuZXIgPSBjb29yZHMueXogKiBzdHJpZGVzIC0gcGFkcztcXG4gICAgICAgICAgaW50IHhSQ29ybmVyID0geFJDQ29ybmVyLng7XFxuICAgICAgICAgIGludCB4Q0Nvcm5lciA9IHhSQ0Nvcm5lci55O1xcblxcbiAgICAgICAgICAvLyBtYXgvbWluIHgoPywgPywgZCkgdG8gZ2V0IHkoeVIsIHlDLCBkKS5cXG4gICAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWRcXG4gICAgICAgICAgZmxvYXQgbWluTWF4VmFsdWUgPSAwLjA7XFxuICAgICAgICAgIGZsb2F0IG1pbk1heFZhbHVlRm91bmQgPSAwLjA7XFxuICAgICAgICAgIGludCBtaW5NYXhQb3NpdGlvbiA9IDA7XFxuICAgICAgICAgIGZsb2F0IGF2Z1ZhbHVlID0gMC4wO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrdStcIjtcXG4gICAgICAgICAgICAgIHdSICs9IFwiK2krXCIpIHtcXG4gICAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSO1xcblxcbiAgICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrdC5pbkhlaWdodCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIitsK1wiO1xcbiAgICAgICAgICAgICAgICB3QyArPSBcIitzK1wiKSB7XFxuICAgICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDO1xcblxcbiAgICAgICAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIit0LmluV2lkdGgrXCIpIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBmbG9hdCB2YWx1ZSA9IGdldFgoYmF0Y2gsIHhSLCB4QywgZCk7XFxuXFxuICAgICAgICAgICAgICAvLyBJZiBhIG1pbiAvIG1heCB2YWx1ZSBoYXMgYWxyZWFkeSBiZWVuIGZvdW5kLCB1c2UgaXQuIElmIG5vdCxcXG4gICAgICAgICAgICAgIC8vIHVzZSB0aGUgY3VycmVudCB2YWx1ZS5cXG4gICAgICAgICAgICAgIGZsb2F0IGN1cnJNaW5NYXhWYWx1ZSA9IG1peChcXG4gICAgICAgICAgICAgICAgICB2YWx1ZSwgbWluTWF4VmFsdWUsIG1pbk1heFZhbHVlRm91bmQpO1xcbiAgICAgICAgICAgICAgaWYgKHZhbHVlID49IGN1cnJNaW5NYXhWYWx1ZSkge1xcbiAgICAgICAgICAgICAgICBtaW5NYXhWYWx1ZSA9IHZhbHVlO1xcbiAgICAgICAgICAgICAgICBtaW5NYXhWYWx1ZUZvdW5kID0gMS4wO1xcbiAgICAgICAgICAgICAgICBtaW5NYXhQb3NpdGlvbiA9IHdSICogXCIrbCtcIiArIHdDO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgICBzZXRPdXRwdXQoZmxvYXQobWluTWF4UG9zaXRpb24pKTtcXG4gICAgICAgIH1cXG4gICAgICBcIjtlbHNle3ZhciBkPWUrXCIoXCIrZStcIihcIitlK1wiKG1pbk1heFZhbHVlWzBdLCBtaW5NYXhWYWx1ZVsxXSksIG1pbk1heFZhbHVlWzJdKSwgbWluTWF4VmFsdWVbM10pXCI7XCJhdmdcIj09PWUmJihkPVwiYXZnVmFsdWUgLyBjb3VudFwiKTt2YXIgdj00Kk1hdGguZmxvb3Ioci80KSxtPXIlNCxnPVwiXFxuICAgICAgaWYgKFwiK3ArXCIpIHtcXG4gICAgICAgIGF2Z1ZhbHVlICs9IGRvdCh2YWx1ZXMsIG9uZXMpO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBtaW5NYXhWYWx1ZSA9IG1heCh2YWx1ZXMsIG1pbk1heFZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMiBzdHJpZGVzID0gaXZlYzIoXCIrbytcIiwgXCIrYStcIik7XFxuICAgICAgY29uc3QgaXZlYzIgcGFkcyA9IGl2ZWMyKFwiK2MrXCIsIFwiK2grXCIpO1xcbiAgICAgIGNvbnN0IGZsb2F0IGluaXRpYWxpemF0aW9uVmFsdWUgPSBcIitmK1wiO1xcbiAgICAgIGNvbnN0IHZlYzQgb25lcyA9IHZlYzQoMS4wLCAxLjAsIDEuMCwgMS4wKTtcXG5cXG4gICAgICBmbG9hdCBjb3VudCA9IDAuMDtcXG5cXG4gICAgICBmbG9hdCBnZXRWYWx1ZShpbnQgYmF0Y2gsIGludCB4UiwgaW50IHhDLCBpbnQgZCkge1xcbiAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIit0LmluV2lkdGgrXCIpIHtcXG4gICAgICAgICAgcmV0dXJuIGluaXRpYWxpemF0aW9uVmFsdWU7XFxuICAgICAgICB9XFxuICAgICAgICBjb3VudCArPSAxLjA7XFxuICAgICAgICByZXR1cm4gZ2V0WChiYXRjaCwgeFIsIHhDLCBkKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG5cXG4gICAgICAgIGl2ZWMyIHhSQ0Nvcm5lciA9IGNvb3Jkcy55eiAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgaW50IHhSQ29ybmVyID0geFJDQ29ybmVyLng7XFxuICAgICAgICBpbnQgeENDb3JuZXIgPSB4UkNDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIG1heC9taW4geCg/LCA/LCBkKSB0byBnZXQgeSh5UiwgeUMsIGQpLlxcbiAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWRcXG4gICAgICAgIHZlYzQgbWluTWF4VmFsdWUgPSB2ZWM0KFwiK2YrXCIpO1xcbiAgICAgICAgZmxvYXQgYXZnVmFsdWUgPSAwLjA7XFxuICAgICAgICBjb3VudCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIit1K1wiO1xcbiAgICAgICAgICAgIHdSICs9IFwiK2krXCIpIHtcXG4gICAgICAgICAgaW50IHhSID0geFJDb3JuZXIgKyB3UjtcXG5cXG4gICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK3YrXCI7IHdDICs9IDQpIHtcXG4gICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDICogXCIrcytcIjtcXG5cXG4gICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDLCBkKSxcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMgKyBcIitzK1wiLCBkKSxcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMgKyAyICogXCIrcytcIiwgZCksXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDICsgMyAqIFwiK3MrXCIsIGQpXFxuICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICBcIitnK1wiXFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyBcIit2K1wiO1xcbiAgICAgICAgICBpZiAoXCIrKDE9PT1tKStcIikge1xcbiAgICAgICAgICAgIHZlYzQgdmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMsIGQpLFxcbiAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICBcIitnK1wiXFxuICAgICAgICAgIH0gZWxzZSBpZiAoXCIrKDI9PT1tKStcIikge1xcbiAgICAgICAgICAgIHZlYzQgdmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMsIGQpLFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QyArIFwiK3MrXCIsIGQpLFxcbiAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgIFwiK2crXCJcXG4gICAgICAgICAgfSBlbHNlIGlmIChcIisoMz09PW0pK1wiKSB7XFxuICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QywgZCksXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDICsgXCIrcytcIiwgZCksXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDICsgMiAqIFwiK3MrXCIsIGQpLFxcbiAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgXCIrZytcIlxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoXCIrZCtcIik7XFxuICAgICAgfVxcbiAgICBcIn19fSgpLE5pPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSxcImF2Z1wiPT09ZSYmbil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBwb3NpdGlvbnMgZm9yIGF2ZXJhZ2UgcG9vbC5cIik7dmFyIHI9dC5maWx0ZXJXaWR0aCxvPXQuc3RyaWRlRGVwdGgsYT10LnN0cmlkZUhlaWdodCxpPXQuc3RyaWRlV2lkdGgscz10LmRpbGF0aW9uRGVwdGgsdT10LmRpbGF0aW9uSGVpZ2h0LGw9dC5kaWxhdGlvbldpZHRoLGM9dC5lZmZlY3RpdmVGaWx0ZXJEZXB0aCxoPXQuZWZmZWN0aXZlRmlsdGVySGVpZ2h0LHA9dC5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxmPXQucGFkSW5mby5mcm9udCxkPXQucGFkSW5mby50b3Asdj10LnBhZEluZm8ubGVmdDt0aGlzLm91dHB1dFNoYXBlPXQub3V0U2hhcGU7dmFyIG09XCJhdmdcIj09PWUsZz1cIjAuMFwiO2lmKG18fChnPVwiLTEuMCAvIDFlLTIwXCIpLG4pdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgICAgY29uc3QgaXZlYzMgc3RyaWRlcyA9XFxuICAgICAgICAgICAgaXZlYzMoXCIrbytcIiwgXCIrYStcIiwgXCIraStcIik7XFxuICAgICAgICBjb25zdCBpdmVjMyBwYWRzID0gaXZlYzMoXCIrZitcIiwgXCIrZCtcIiwgXCIrditcIik7XFxuXFxuICAgICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgICAgaW50IGNoID0gY29vcmRzLnU7XFxuXFxuICAgICAgICAgIGl2ZWMzIHhDb3JuZXIgPSBpdmVjMyhjb29yZHMueSwgY29vcmRzLnosIGNvb3Jkcy53KSAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgICBpbnQgeERDb3JuZXIgPSB4Q29ybmVyLng7XFxuICAgICAgICAgIGludCB4UkNvcm5lciA9IHhDb3JuZXIueTtcXG4gICAgICAgICAgaW50IHhDQ29ybmVyID0geENvcm5lci56O1xcblxcbiAgICAgICAgICAvLyBtYXgvbWluIHgoPywgPywgPywgY2gpIHRvIGdldCB5KHlELCB5UiwgeUMsIGNoKS5cXG4gICAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWRcXG4gICAgICAgICAgZmxvYXQgbWluTWF4VmFsdWUgPSAwLjA7XFxuICAgICAgICAgIGZsb2F0IG1pbk1heFZhbHVlRm91bmQgPSAwLjA7XFxuICAgICAgICAgIGludCBtaW5NYXhQb3NpdGlvbiA9IDA7XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdEID0gMDsgd0QgPCBcIitjK1wiO1xcbiAgICAgICAgICAgICAgd0QgKz0gXCIrcytcIikge1xcbiAgICAgICAgICAgIGludCB4RCA9IHhEQ29ybmVyICsgd0Q7XFxuXFxuICAgICAgICAgICAgaWYgKHhEIDwgMCB8fCB4RCA+PSBcIit0LmluRGVwdGgrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIraCtcIjtcXG4gICAgICAgICAgICAgICAgd1IgKz0gXCIrdStcIikge1xcbiAgICAgICAgICAgICAgaW50IHhSID0geFJDb3JuZXIgKyB3UjtcXG5cXG4gICAgICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrdC5pbkhlaWdodCtcIikge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIitwK1wiO1xcbiAgICAgICAgICAgICAgICAgIHdDICs9IFwiK2wrXCIpIHtcXG4gICAgICAgICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyB3QztcXG5cXG4gICAgICAgICAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIit0LmluV2lkdGgrXCIpIHtcXG4gICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICBmbG9hdCB2YWx1ZSA9IGdldFgoYmF0Y2gsIHhELCB4UiwgeEMsIGNoKTtcXG5cXG4gICAgICAgICAgICAgICAgLy8gSWYgYSBtaW4gLyBtYXggdmFsdWUgaGFzIGFscmVhZHkgYmVlbiBmb3VuZCwgdXNlIGl0LiBJZiBub3QsXFxuICAgICAgICAgICAgICAgIC8vIHVzZSB0aGUgY3VycmVudCB2YWx1ZS5cXG4gICAgICAgICAgICAgICAgZmxvYXQgY3Vyck1pbk1heFZhbHVlID0gbWl4KFxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsIG1pbk1heFZhbHVlLCBtaW5NYXhWYWx1ZUZvdW5kKTtcXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID49IGN1cnJNaW5NYXhWYWx1ZSkge1xcbiAgICAgICAgICAgICAgICAgIG1pbk1heFZhbHVlID0gdmFsdWU7XFxuICAgICAgICAgICAgICAgICAgbWluTWF4VmFsdWVGb3VuZCA9IDEuMDtcXG4gICAgICAgICAgICAgICAgICBtaW5NYXhQb3NpdGlvbiA9XFxuICAgICAgICAgICAgICAgICAgICAgIHdEICogXCIraCtcIiAqIFwiK3ArXCIgK1xcbiAgICAgICAgICAgICAgICAgICAgICB3UiAqIFwiK3ArXCIgKyB3Qzs7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KG1pbk1heFBvc2l0aW9uKSk7XFxuICAgICAgICB9XFxuICAgICAgXCI7ZWxzZXt2YXIgeT1lK1wiKFwiK2UrXCIoXCIrZStcIihtaW5NYXhWYWx1ZVswXSwgbWluTWF4VmFsdWVbMV0pLCBtaW5NYXhWYWx1ZVsyXSksIG1pbk1heFZhbHVlWzNdKVwiO1wiYXZnXCI9PT1lJiYoeT1cImF2Z1ZhbHVlIC8gY291bnRcIik7dmFyIHg9NCpNYXRoLmZsb29yKHIvNCksYj1yJTQsdz1cIlxcbiAgICAgIGlmIChcIittK1wiKSB7XFxuICAgICAgICBhdmdWYWx1ZSArPSBkb3QodmFsdWVzLCBvbmVzKTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgbWluTWF4VmFsdWUgPSBtYXgodmFsdWVzLCBtaW5NYXhWYWx1ZSk7XFxuICAgICAgfVxcbiAgICBcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzMgc3RyaWRlcyA9XFxuICAgICAgICBpdmVjMyhcIitvK1wiLCBcIithK1wiLCBcIitpK1wiKTtcXG4gICAgICBjb25zdCBpdmVjMyBwYWRzID0gaXZlYzMoXCIrZitcIiwgXCIrZCtcIiwgXCIrditcIik7XFxuICAgICAgY29uc3QgZmxvYXQgaW5pdGlhbGl6YXRpb25WYWx1ZSA9IFwiK2crXCI7XFxuICAgICAgY29uc3QgdmVjNCBvbmVzID0gdmVjNCgxLjAsIDEuMCwgMS4wLCAxLjApO1xcblxcbiAgICAgIGZsb2F0IGNvdW50ID0gMC4wO1xcblxcbiAgICAgIGZsb2F0IGdldFZhbHVlKGludCBiYXRjaCwgaW50IHhELCBpbnQgeFIsIGludCB4QywgaW50IGNoKSB7XFxuICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICByZXR1cm4gaW5pdGlhbGl6YXRpb25WYWx1ZTtcXG4gICAgICAgIH1cXG4gICAgICAgIGNvdW50ICs9IDEuMDtcXG4gICAgICAgIHJldHVybiBnZXRYKGJhdGNoLCB4RCwgeFIsIHhDLCBjaCk7XFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgY2ggPSBjb29yZHMudTtcXG5cXG4gICAgICAgIGl2ZWMzIHhDb3JuZXIgPSBpdmVjMyhjb29yZHMueSwgY29vcmRzLnosIGNvb3Jkcy53KSAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgaW50IHhEQ29ybmVyID0geENvcm5lci54O1xcbiAgICAgICAgaW50IHhSQ29ybmVyID0geENvcm5lci55O1xcbiAgICAgICAgaW50IHhDQ29ybmVyID0geENvcm5lci56O1xcblxcbiAgICAgICAgLy8gbWF4L21pbiB4KD8sID8sID8sIGQpIHRvIGdldCB5KHlELCB5UiwgeUMsIGNoKS5cXG4gICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkXFxuICAgICAgICB2ZWM0IG1pbk1heFZhbHVlID0gdmVjNChcIitnK1wiKTtcXG4gICAgICAgIGZsb2F0IGF2Z1ZhbHVlID0gMC4wO1xcbiAgICAgICAgY291bnQgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCB3RCA9IDA7IHdEIDwgXCIrYytcIjtcXG4gICAgICAgICAgICB3RCArPSBcIitzK1wiKSB7XFxuICAgICAgICAgIGludCB4RCA9IHhEQ29ybmVyICsgd0Q7XFxuXFxuICAgICAgICAgIGlmICh4RCA8IDAgfHwgeEQgPj0gXCIrdC5pbkRlcHRoK1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK2grXCI7XFxuICAgICAgICAgICAgd1IgKz0gXCIrdStcIikge1xcbiAgICAgICAgICAgIGludCB4UiA9IHhSQ29ybmVyICsgd1I7XFxuXFxuICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK3grXCI7IHdDICs9IDQpIHtcXG4gICAgICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgd0MgKiBcIitsK1wiO1xcblxcbiAgICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QywgY2gpLFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QyArIFwiK2wrXCIsIGNoKSxcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMgKyAyICogXCIrbCtcIiwgY2gpLFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QyArIDMgKiBcIitsK1wiLCBjaClcXG4gICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICBcIit3K1wiXFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgXCIreCtcIjtcXG4gICAgICAgICAgICBpZiAoXCIrKDE9PT1iKStcIikge1xcbiAgICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QywgY2gpLFxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgICAgXCIrdytcIlxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoXCIrKDI9PT1iKStcIikge1xcbiAgICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QywgY2gpLFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QyArIFwiK2wrXCIsIGNoKSxcXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgIFwiK3crXCJcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFwiKygzPT09YikrXCIpIHtcXG4gICAgICAgICAgICAgIHZlYzQgdmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMsIGNoKSxcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMgKyBcIitsK1wiLCBjaCksXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDICsgMiAqIFwiK2wrXCIsIGNoKSxcXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgIFwiK3crXCJcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KFwiK3krXCIpO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgXCJ9fX0oKSxTaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdO3ZhciBuPXQud2luZG93U2l6ZSxyPXQuYmF0Y2hTaXplLG89dC5pblNpemUsYT1NYXRoLmNlaWwoby9uKTt0aGlzLm91dHB1dFNoYXBlPVtyLGFdO3ZhciBpPVwiMC4wXCIscz1cIlwiO1wicHJvZFwiPT09ZT9pPVwiMS4wXCI6XCJtaW5cIj09PWU/KGk9XCIxLjAgLyAxZS0yMFwiLHM9XCJtaW5cIik6XCJtYXhcIj09PWUmJihpPVwiLTEuMCAvIDFlLTIwXCIscz1cIm1heFwiKTt2YXIgdT1lK1wiKFwiK2UrXCIoXCIrZStcIihtaW5NYXhWYWx1ZVswXSwgbWluTWF4VmFsdWVbMV0pLCBtaW5NYXhWYWx1ZVsyXSksIG1pbk1heFZhbHVlWzNdKVwiO1wic3VtXCI9PT1lP3U9XCJzdW1WYWx1ZVwiOlwicHJvZFwiPT09ZT91PVwicHJvZFZhbHVlXCI6XCJhbGxcIj09PWU/dT1cImFsbFZhbHVlXCI6XCJhbnlcIj09PWUmJih1PVwiYW55VmFsdWVcIik7dmFyIGw9NCpNYXRoLmZsb29yKG4vNCksYz1uJTQsaD1cIlxcbiAgICAgIGlmIChcIisoXCJzdW1cIj09PWUpK1wiKSB7XFxuICAgICAgICBzdW1WYWx1ZSArPSBkb3QodmFsdWVzLCBvbmVzKTtcXG4gICAgICB9IGVsc2UgaWYgKFwiKyhcInByb2RcIj09PWUpK1wiKSB7XFxuICAgICAgICB2ZWMyIHRtcCA9IHZlYzIodmFsdWVzWzBdLCB2YWx1ZXNbMV0pICogdmVjMih2YWx1ZXNbMl0sIHZhbHVlc1szXSk7XFxuICAgICAgICBwcm9kVmFsdWUgKj0gdG1wWzBdICogdG1wWzFdO1xcbiAgICAgIH0gZWxzZSB7XFxuICAgICAgICBtaW5NYXhWYWx1ZSA9IFwiK3MrXCIodmFsdWVzLCBtaW5NYXhWYWx1ZSk7XFxuICAgICAgfVxcbiAgICBcIixwPVwidmVjNFwiO1wiYWxsXCI9PT1lPyhpPVwiMS4wXCIsaD1cIlxcbiAgICAgICAgYm9vbCByZWR1Y2VkQWxsVmFsdWUgPSBhbGwodmFsdWVzKTtcXG4gICAgICAgIGZsb2F0IGZsb2F0ZWRSZWR1Y2VkQWxsVmFsdWUgPSBmbG9hdChyZWR1Y2VkQWxsVmFsdWUpO1xcbiAgICAgICAgYWxsVmFsdWUgPSBmbG9hdChhbGxWYWx1ZSA+PSAxLjAgJiYgZmxvYXRlZFJlZHVjZWRBbGxWYWx1ZSA+PSAxLjApO1xcbiAgICAgIFwiLHA9XCJidmVjNFwiKTpcImFueVwiPT09ZSYmKGk9XCIwLjBcIixoPVwiXFxuICAgICAgICBib29sIHJlZHVjZWRBbnlWYWx1ZSA9IGFueSh2YWx1ZXMpO1xcbiAgICAgICAgZmxvYXQgZmxvYXRlZFJlZHVjZWRBbnlWYWx1ZSA9IGZsb2F0KHJlZHVjZWRBbnlWYWx1ZSk7XFxuICAgICAgICBhbnlWYWx1ZSA9IGZsb2F0KGFueVZhbHVlID49IDEuMCB8fCBmbG9hdGVkUmVkdWNlZEFueVZhbHVlID49IDEuMCk7XFxuICAgICAgXCIscD1cImJ2ZWM0XCIpO3ZhciBmPVwiXCI7byVuPjAmJihmPVwiXFxuICAgICAgICBpZiAoaW5JZHggPCAwIHx8IGluSWR4ID49IFwiK28rXCIpIHtcXG4gICAgICAgICAgcmV0dXJuIGluaXRpYWxpemF0aW9uVmFsdWU7XFxuICAgICAgICB9XFxuICAgICAgXCIpLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBmbG9hdCBpbml0aWFsaXphdGlvblZhbHVlID0gXCIraStcIjtcXG4gICAgICBjb25zdCB2ZWM0IG9uZXMgPSB2ZWM0KDEuMCwgMS4wLCAxLjAsIDEuMCk7XFxuXFxuICAgICAgZmxvYXQgZ2V0VmFsdWUoaW50IGJhdGNoLCBpbnQgaW5JZHgpIHtcXG4gICAgICAgIFwiK2YrXCJcXG4gICAgICAgIHJldHVybiBnZXRYKGJhdGNoLCBpbklkeCk7XFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IG91dElkeCA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBpbk9mZnNldCA9IG91dElkeCAqIFwiK24rXCI7XFxuXFxuICAgICAgICB2ZWM0IG1pbk1heFZhbHVlID0gdmVjNChcIitpK1wiKTtcXG4gICAgICAgIGZsb2F0IHByb2RWYWx1ZSA9IDEuMDtcXG4gICAgICAgIGZsb2F0IHN1bVZhbHVlID0gMC4wO1xcbiAgICAgICAgZmxvYXQgYWxsVmFsdWUgPSAxLjA7XFxuICAgICAgICBmbG9hdCBhbnlWYWx1ZSA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgXCIrbCtcIjsgaSArPSA0KSB7XFxuICAgICAgICAgIGludCBpbklkeCA9IGluT2Zmc2V0ICsgaTtcXG4gICAgICAgICAgXCIrcCtcIiB2YWx1ZXMgPSBcIitwK1wiKFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMSksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMiksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMylcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgXCIraCtcIlxcbiAgICAgICAgfVxcblxcbiAgICAgICAgaW50IGluSWR4ID0gaW5PZmZzZXQgKyBcIitsK1wiO1xcbiAgICAgICAgaWYgKFwiKygxPT09YykrXCIpIHtcXG4gICAgICAgICAgXCIrcCtcIiB2YWx1ZXMgPSBcIitwK1wiKFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgXCIraCtcIlxcbiAgICAgICAgfSBlbHNlIGlmIChcIisoMj09PWMpK1wiKSB7XFxuICAgICAgICAgIFwiK3ArXCIgdmFsdWVzID0gXCIrcCtcIihcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHgpLFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCArIDEpLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICBcIitoK1wiXFxuICAgICAgICB9IGVsc2UgaWYgKFwiKygzPT09YykrXCIpIHtcXG4gICAgICAgICAgXCIrcCtcIiB2YWx1ZXMgPSBcIitwK1wiKFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMSksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMiksXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICBcIitoK1wiXFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoXCIrdStcIik7XFxuICAgICAgfVxcbiAgICBcIn19KCksQWk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMCx0aGlzLm91dHB1dFNoYXBlPXQ7Zm9yKHZhciBuPVwiXCIscj0wO3I8NDtyKyspe3ZhciBvPVwidGhpc1JDID0gcmM7XCI7ciUyPT0xJiYobys9XCJ0aGlzUkMueiArPSAxO1wiKSxyPjEmJihvKz1cInRoaXNSQy55ICs9IDE7XCIpLG4rPVwiXFxuICAgICAgICBcIitvK1wiXFxuICAgICAgICBcIisocj4wP1wiaWYodGhpc1JDLnkgPCByb3dzICYmIHRoaXNSQy56IDwgY29scyl7XCI6XCJcIikrXCJcXG4gICAgICAgICAgaW50IGZsYXRJbmRleCA9IGdldEZsYXRJbmRleCh0aGlzUkMpO1xcblxcbiAgICAgICAgICBpdmVjMyBpbnB1dFJDID0gaW5wdXRDb29yZHNGcm9tUmVzaGFwZWRPdXRDb29yZHMoZmxhdEluZGV4KTtcXG4gICAgICAgICAgdmVjMiBpbnB1dFJDSW5uZXJEaW1zID0gdmVjMihmbG9hdChpbnB1dFJDLnkpLGZsb2F0KGlucHV0UkMueikpO1xcblxcbiAgICAgICAgICByZXN1bHRbXCIrcitcIl0gPVxcbiAgICAgICAgICAgIGdldENoYW5uZWwoZ2V0QShpbnB1dFJDLngsIGlucHV0UkMueSwgaW5wdXRSQy56KSwgaW5wdXRSQ0lubmVyRGltcyk7XFxuICAgICAgICBcIisocj4wP1wifVwiOlwiXCIpK1wiXFxuICAgICAgXCJ9dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFxcbiAgICBpdmVjMyBpbnB1dENvb3Jkc0Zyb21SZXNoYXBlZE91dENvb3JkcyhpbnQgaW5kZXgpIHtcXG4gICAgICBcIitQbyhbXCJyXCIsXCJjXCIsXCJkXCJdLGUpK1wiXFxuICAgICAgcmV0dXJuIGl2ZWMzKHIsIGMsIGQpO1xcbiAgICB9XFxuICBcXG4gICAgICBcIitMbyh0KStcIlxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMzIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuXFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcblxcbiAgICAgICAgaXZlYzMgdGhpc1JDO1xcbiAgICAgICAgaW50IHJvd3MgPSBcIit0WzFdK1wiO1xcbiAgICAgICAgaW50IGNvbHMgPSBcIit0WzJdK1wiO1xcblxcbiAgICAgICAgXCIrbitcIlxcblxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn19KCk7dmFyIFRpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiZHlcIl0sdGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLm91dHB1dFNoYXBlPWUuc2hhcGU7dmFyIHI9ZS5zaGFwZSxvPXJbMV0sYT1yWzJdLGk9dC5zaGFwZSxzPWlbMV0sdT1pWzJdLGw9W24mJnM+MT9vLTE6byxuJiZ1PjE/YS0xOmFdLGM9W24mJnM+MT9zLTE6cyxuJiZ1PjE/dS0xOnVdLGg9bFswXS9jWzBdLHA9bFsxXS9jWzFdLGY9MS9oLGQ9MS9wLHY9MipNYXRoLmNlaWwoZikrMixtPTIqTWF0aC5jZWlsKGQpKzI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG4gICAgICAgIGludCByID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGMgPSBjb29yZHNbMl07XFxuXFxuICAgICAgICBmbG9hdCBhY2N1bXVsYXRvciA9IDAuMDtcXG5cXG4gICAgICAgIGNvbnN0IGZsb2F0IGhlaWdodFNjYWxlID0gZmxvYXQoXCIraCtcIik7XFxuICAgICAgICBjb25zdCBmbG9hdCB3aWR0aFNjYWxlID0gZmxvYXQoXCIrcCtcIik7XFxuXFxuICAgICAgICBjb25zdCBmbG9hdCBpbnZIZWlnaHRTY2FsZSA9IGZsb2F0KFwiK2YrXCIpO1xcbiAgICAgICAgY29uc3QgZmxvYXQgaW52V2lkdGhTY2FsZSA9IGZsb2F0KFwiK2QrXCIpO1xcblxcbiAgICAgICAgY29uc3QgaW50IHdpbkhlaWdodCA9IGludChcIit2K1wiKTtcXG4gICAgICAgIGNvbnN0IGludCB3aW5XaWR0aCA9IGludChcIittK1wiKTtcXG5cXG4gICAgICAgIC8vIENvbXB1dGUgYm91bmRzIGZvciB3aGVyZSBpbiBkeSB3ZSB3aWxsIGxvb2tcXG4gICAgICAgIGZsb2F0IHN0YXJ0UkxlcnAgPSBmbG9vcihmbG9hdChyKSAqIGludkhlaWdodFNjYWxlKTtcXG4gICAgICAgIGludCBzdGFydER5UiA9IGludChzdGFydFJMZXJwIC0gZmxvYXQod2luSGVpZ2h0IC8gMikpO1xcblxcbiAgICAgICAgZmxvYXQgc3RhcnRDTGVycCA9IGZsb29yKGZsb2F0KGMpICogaW52V2lkdGhTY2FsZSk7XFxuICAgICAgICBpbnQgc3RhcnREeUMgPSBpbnQoc3RhcnRDTGVycCAtIGZsb2F0KHdpbldpZHRoIC8gMikpO1xcblxcbiAgICAgICAgLy8gTG9vcCBvdmVyIGR5XFxuICAgICAgICBmb3IgKGludCBkeVJPZmZzZXQgPSAwOyBkeVJPZmZzZXQgPCB3aW5IZWlnaHQ7IGR5Uk9mZnNldCsrKSB7XFxuICAgICAgICAgIGludCBkeVIgPSBkeVJPZmZzZXQgKyBzdGFydER5UjtcXG5cXG4gICAgICAgICAgLy8gR3VhcmQgYWdhaW5zdCB0aGUgd2luZG93IGV4Y2VlZGluZyB0aGUgYm91bmRzIG9mIGR5XFxuICAgICAgICAgIGlmIChkeVIgPCAwIHx8IGR5UiA+PSBcIitzK1wiKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgZm9yIChpbnQgZHlDT2Zmc2V0ID0gMDsgZHlDT2Zmc2V0IDwgd2luV2lkdGg7IGR5Q09mZnNldCsrKSB7XFxuICAgICAgICAgICAgaW50IGR5QyA9IGR5Q09mZnNldCArIHN0YXJ0RHlDO1xcblxcbiAgICAgICAgICAgIC8vIEd1YXJkIGFnYWluc3QgdGhlIHdpbmRvdyBleGNlZWRpbmcgdGhlIGJvdW5kcyBvZiBkeVxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwIHx8IGR5QyA+PSBcIit1K1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZmxvYXQgZHhSID0gZmxvYXQoZHlSKSAqIGhlaWdodFNjYWxlO1xcbiAgICAgICAgICAgIGludCB0b3BEeFJJbmRleCA9IGludChmbG9vcihkeFIpKTtcXG4gICAgICAgICAgICBpbnQgYm90dG9tRHhSSW5kZXggPSBpbnQobWluKGNlaWwoZHhSKSwgXCIrKG8tMSkrXCIuMCkpO1xcbiAgICAgICAgICAgIGZsb2F0IGR4UkxlcnAgPSBkeFIgLSBmbG9hdCh0b3BEeFJJbmRleCk7XFxuICAgICAgICAgICAgZmxvYXQgaW52ZXJzZUR4UkxlcnAgPSAxLjAgLSBkeFJMZXJwO1xcblxcbiAgICAgICAgICAgIGZsb2F0IGR4QyA9IGZsb2F0KGR5QykgKiB3aWR0aFNjYWxlO1xcbiAgICAgICAgICAgIGludCBsZWZ0RHhDSW5kZXggPSBpbnQoZmxvb3IoZHhDKSk7XFxuICAgICAgICAgICAgaW50IHJpZ2h0RHhDSW5kZXggPSBpbnQobWluKGNlaWwoZHhDKSwgXCIrKGEtMSkrXCIuMCkpO1xcbiAgICAgICAgICAgIGZsb2F0IGR4Q0xlcnAgPSBkeEMgLSBmbG9hdChsZWZ0RHhDSW5kZXgpO1xcbiAgICAgICAgICAgIGZsb2F0IGludmVyc2VEeENMZXJwID0gMS4wIC0gZHhDTGVycDtcXG5cXG4gICAgICAgICAgICBpZiAociA9PSB0b3BEeFJJbmRleCAmJiBjID09IGxlZnREeENJbmRleCkge1xcbiAgICAgICAgICAgICAgLy8gdG9wTGVmdFxcbiAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz1cXG4gICAgICAgICAgICAgICAgZ2V0RHkoYiwgZHlSLCBkeUMsIGQpICogaW52ZXJzZUR4UkxlcnAgKiBpbnZlcnNlRHhDTGVycDtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgaWYgKHIgPT0gdG9wRHhSSW5kZXggJiYgYyA9PSByaWdodER4Q0luZGV4KSB7XFxuICAgICAgICAgICAgICAvLyB0b3BSaWdodFxcbiAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gZ2V0RHkoYiwgZHlSLCBkeUMsIGQpICogaW52ZXJzZUR4UkxlcnAgKiBkeENMZXJwO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAociA9PSBib3R0b21EeFJJbmRleCAmJiBjID09IGxlZnREeENJbmRleCkge1xcbiAgICAgICAgICAgICAgLy8gYm90dG9tTGVmdFxcbiAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gZ2V0RHkoYiwgZHlSLCBkeUMsIGQpICogZHhSTGVycCAqIGludmVyc2VEeENMZXJwO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpZiAociA9PSBib3R0b21EeFJJbmRleCAmJiBjID09IHJpZ2h0RHhDSW5kZXgpIHtcXG4gICAgICAgICAgICAgIC8vIGJvdHRvbVJpZ2h0XFxuICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSBnZXREeShiLCBkeVIsIGR5QywgZCkgKiBkeFJMZXJwICogZHhDTGVycDtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIC8vIEVuZCBsb29wIG92ZXIgZHlcXG5cXG4gICAgICAgIHNldE91dHB1dChhY2N1bXVsYXRvcik7XFxuICAgICAgfVxcbiAgICBcIn19KCksRGk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy5vdXRwdXRTaGFwZT1bXTt2YXIgbz10WzBdLGE9dFsxXSxpPXRbMl0scz10WzNdO3RoaXMub3V0cHV0U2hhcGU9W28sZSxuLHNdO3ZhciB1PVtyJiZlPjE/YS0xOmEsciYmbj4xP2ktMTppXSxsPVtyJiZlPjE/ZS0xOmUsciYmbj4xP24tMTpuXTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgdmVjMiBlZmZlY3RpdmVJbnB1dE92ZXJPdXRwdXRSYXRpb1JDID0gdmVjMihcXG4gICAgICAgICAgXCIrdVswXS9sWzBdK1wiLFxcbiAgICAgICAgICBcIit1WzFdL2xbMV0rXCIpO1xcbiAgICAgIGNvbnN0IHZlYzIgaW5wdXRTaGFwZVJDID0gdmVjMihcIithK1wiLjAsIFwiK2krXCIuMCk7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcbiAgICAgICAgaXZlYzIgeVJDID0gY29vcmRzLnl6O1xcblxcbiAgICAgICAgLy8gRnJhY3Rpb25hbCBzb3VyY2UgaW5kZXguXFxuICAgICAgICB2ZWMyIHNvdXJjZUZyYWNJbmRleFJDID0gdmVjMih5UkMpICogZWZmZWN0aXZlSW5wdXRPdmVyT3V0cHV0UmF0aW9SQztcXG5cXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIGZvdXIgaW50ZWdlciBpbmRpY2VzLlxcbiAgICAgICAgaXZlYzIgc291cmNlRmxvb3JSQyA9IGl2ZWMyKHNvdXJjZUZyYWNJbmRleFJDKTtcXG4gICAgICAgIGl2ZWMyIHNvdXJjZUNlaWxSQyA9IGl2ZWMyKFxcbiAgICAgICAgICBtaW4oaW5wdXRTaGFwZVJDIC0gMS4wLCBjZWlsKHNvdXJjZUZyYWNJbmRleFJDKSkpO1xcblxcbiAgICAgICAgZmxvYXQgdG9wTGVmdCA9IGdldEEoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VGbG9vclJDLnksIGQpO1xcbiAgICAgICAgZmxvYXQgYm90dG9tTGVmdCA9IGdldEEoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUZsb29yUkMueSwgZCk7XFxuICAgICAgICBmbG9hdCB0b3BSaWdodCA9IGdldEEoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VDZWlsUkMueSwgZCk7XFxuICAgICAgICBmbG9hdCBib3R0b21SaWdodCA9IGdldEEoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUNlaWxSQy55LCBkKTtcXG5cXG4gICAgICAgIHZlYzIgZnJhY1JDID0gc291cmNlRnJhY0luZGV4UkMgLSB2ZWMyKHNvdXJjZUZsb29yUkMpO1xcblxcbiAgICAgICAgZmxvYXQgdG9wID0gdG9wTGVmdCArICh0b3BSaWdodCAtIHRvcExlZnQpICogZnJhY1JDLnk7XFxuICAgICAgICBmbG9hdCBib3R0b20gPSBib3R0b21MZWZ0ICsgKGJvdHRvbVJpZ2h0IC0gYm90dG9tTGVmdCkgKiBmcmFjUkMueTtcXG4gICAgICAgIGZsb2F0IG5ld1ZhbHVlID0gdG9wICsgKGJvdHRvbSAtIHRvcCkgKiBmcmFjUkMueDtcXG5cXG4gICAgICAgIHNldE91dHB1dChuZXdWYWx1ZSk7XFxuICAgICAgfVxcbiAgICBcIn19KCksX2k9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy5vdXRwdXRTaGFwZT1bXTt2YXIgbz10WzBdLGE9dFsxXSxpPXRbMl0scz10WzNdO3RoaXMub3V0cHV0U2hhcGU9W28sZSxuLHNdO3ZhciB1PVtyJiZlPjE/YS0xOmEsciYmbj4xP2ktMTppXSxsPVtyJiZlPjE/ZS0xOmUsciYmbj4xP24tMTpuXTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgdmVjMyBlZmZlY3RpdmVJbnB1dE92ZXJPdXRwdXRSYXRpb1JDID0gdmVjMyhcXG4gICAgICAgICAgXCIrdVswXS9sWzBdK1wiLFxcbiAgICAgICAgICBcIit1WzFdL2xbMV0rXCIsXFxuICAgICAgICAgIFwiK3VbMV0vbFsxXStcIik7XFxuICAgICAgY29uc3QgdmVjMyBpbnB1dFNoYXBlUkMgPSB2ZWMzKFwiK2ErXCIuMCwgXCIraStcIi4wLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIitpK1wiLjApO1xcblxcbiAgICAgIGZsb2F0IGdldEFWYWx1ZShpbnQgYiwgaW50IHIsIGludCBjLCBpbnQgZCkge1xcbiAgICAgICAgcmV0dXJuIGdldENoYW5uZWwoZ2V0QShiLCByLCBjLCBkKSwgdmVjMihjLCBkKSk7XFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG4gICAgICAgIC8vIENhbGN1bGF0ZSB2YWx1ZXMgZm9yIG5leHQgY29sdW1uIGluIHlSQy56LlxcbiAgICAgICAgaXZlYzMgeVJDID0gY29vcmRzLnl6eiArIGl2ZWMzKDAsIDAsIDEpO1xcblxcbiAgICAgICAgLy8gRnJhY3Rpb25hbCBzb3VyY2UgaW5kZXguXFxuICAgICAgICB2ZWMzIHNvdXJjZUZyYWNJbmRleFJDID0gdmVjMyh5UkMpICogZWZmZWN0aXZlSW5wdXRPdmVyT3V0cHV0UmF0aW9SQztcXG5cXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIGZvdXIgaW50ZWdlciBpbmRpY2VzLlxcbiAgICAgICAgaXZlYzMgc291cmNlRmxvb3JSQyA9IGl2ZWMzKHNvdXJjZUZyYWNJbmRleFJDKTtcXG4gICAgICAgIGl2ZWMzIHNvdXJjZUNlaWxSQyA9IGl2ZWMzKFxcbiAgICAgICAgICBtaW4oaW5wdXRTaGFwZVJDIC0gMS4wLCBjZWlsKHNvdXJjZUZyYWNJbmRleFJDKSkpO1xcbiAgICAgICAgXFxuICAgICAgICAvLyBTaG91bGQgd2UgY2FsY3VsYXRlIG5leHQgY29sdW1uIGFuZCByb3cgZWxlbWVudHMgaW4gMngyIHBhY2tlZCBjZWxsLlxcbiAgICAgICAgYm9vbCBoYXNOZXh0Q29sID0gZCA8IFwiKyhzLTEpK1wiOyBcXG4gICAgICAgIGJvb2wgaGFzTmV4dFJvdyA9IGNvb3Jkcy56IDwgXCIrKG4tMSkrXCI7XFxuXFxuICAgICAgICAvLyBJbiBwYXJhbGxlbCwgY29uc3RydWN0IGZvdXIgY29ybmVycyBmb3IgYWxsIGZvdXIgY29tcG9uZW50cyBpblxcbiAgICAgICAgLy8gcGFja2VkIDJ4MiBjZWxsLlxcbiAgICAgICAgdmVjNCB0b3BMZWZ0ID0gdmVjNChcXG4gICAgICAgICAgZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlRmxvb3JSQy55LCBkKSxcXG4gICAgICAgICAgaGFzTmV4dENvbCA/IGdldEFWYWx1ZShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUZsb29yUkMueSwgZCArIDEpXFxuICAgICAgICAgICAgICAgICAgICAgOiAwLjAsXFxuICAgICAgICAgIGhhc05leHRSb3cgPyBnZXRBVmFsdWUoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VGbG9vclJDLnosIGQpXFxuICAgICAgICAgICAgICAgICAgICAgOiAwLjAsXFxuICAgICAgICAgIChoYXNOZXh0Um93ICYmIGhhc05leHRDb2wpID9cXG4gICAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VGbG9vclJDLnosIGQgKyAxKSA6IDAuMCk7XFxuXFxuICAgICAgICB2ZWM0IGJvdHRvbUxlZnQgPSB2ZWM0KFxcbiAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUZsb29yUkMueSwgZCksXFxuICAgICAgICAgIGhhc05leHRDb2wgPyBnZXRBVmFsdWUoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUZsb29yUkMueSwgZCArIDEpXFxuICAgICAgICAgICAgICAgICAgICAgOiAwLjAsXFxuICAgICAgICAgIGhhc05leHRSb3cgPyBnZXRBVmFsdWUoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUZsb29yUkMueiwgZClcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgKGhhc05leHRSb3cgJiYgaGFzTmV4dENvbCkgP1xcbiAgICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlRmxvb3JSQy56LCBkICsgMSkgOiAwLjApO1xcblxcbiAgICAgICAgdmVjNCB0b3BSaWdodCA9IHZlYzQoXFxuICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUNlaWxSQy55LCBkKSxcXG4gICAgICAgICAgaGFzTmV4dENvbCA/IGdldEFWYWx1ZShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUNlaWxSQy55LCBkICsgMSlcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgaGFzTmV4dFJvdyA/IGdldEFWYWx1ZShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUNlaWxSQy56LCBkKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICAoaGFzTmV4dFJvdyAmJiBoYXNOZXh0Q29sKSA/XFxuICAgICAgICAgICAgZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlQ2VpbFJDLnosIGQgKyAxKSA6IDAuMCk7XFxuXFxuICAgICAgICB2ZWM0IGJvdHRvbVJpZ2h0ID0gdmVjNChcXG4gICAgICAgICAgZ2V0QVZhbHVlKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VDZWlsUkMueSwgZCksXFxuICAgICAgICAgIGhhc05leHRDb2wgPyBnZXRBVmFsdWUoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUNlaWxSQy55LCBkICsgMSlcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgaGFzTmV4dFJvdyA/IGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlQ2VpbFJDLnosIGQpXFxuICAgICAgICAgICAgICAgICAgICAgOiAwLjAsXFxuICAgICAgICAgIChoYXNOZXh0Um93ICYmIGhhc05leHRDb2wpID9cXG4gICAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUNlaWxSQy56LCBkICsgMSkgOiAwLjApO1xcblxcbiAgICAgICAgdmVjMyBmcmFjUkMgPSBzb3VyY2VGcmFjSW5kZXhSQyAtIHZlYzMoc291cmNlRmxvb3JSQyk7XFxuXFxuICAgICAgICB2ZWM0IHRvcCA9IG1peCh0b3BMZWZ0LCB0b3BSaWdodCwgZnJhY1JDLnl5enopO1xcbiAgICAgICAgdmVjNCBib3R0b20gPSBtaXgoYm90dG9tTGVmdCwgYm90dG9tUmlnaHQsIGZyYWNSQy55eXp6KTtcXG4gICAgICAgIHZlYzQgbmV3VmFsdWUgPSBtaXgodG9wLCBib3R0b20sIGZyYWNSQy54KTtcXG5cXG4gICAgICAgIHNldE91dHB1dChuZXdWYWx1ZSk7XFxuICAgICAgfVxcbiAgICBcIn19KCksT2k9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMub3V0cHV0U2hhcGU9ZS5zaGFwZTt2YXIgcj1lLnNoYXBlLG89clsxXSxhPXJbMl0saT10LnNoYXBlLHM9aVsxXSx1PWlbMl0sbD1bbiYmcz4xP28tMTpvLG4mJnU+MT9hLTE6YV0sYz1bbiYmcz4xP3MtMTpzLG4mJnU+MT91LTE6dV0saD1sWzBdL2NbMF0scD1sWzFdL2NbMV0sZj0xL2gsZD0xL3Asdj0yKk1hdGguY2VpbChmKSsyLG09MipNYXRoLmNlaWwoZCkrMjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcbiAgICAgICAgaW50IHIgPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgYyA9IGNvb3Jkc1syXTtcXG5cXG4gICAgICAgIGZsb2F0IGFjY3VtdWxhdG9yID0gMC4wO1xcblxcbiAgICAgICAgY29uc3QgZmxvYXQgaGVpZ2h0U2NhbGUgPSBmbG9hdChcIitoK1wiKTtcXG4gICAgICAgIGNvbnN0IGZsb2F0IHdpZHRoU2NhbGUgPSBmbG9hdChcIitwK1wiKTtcXG5cXG4gICAgICAgIGNvbnN0IGZsb2F0IGludkhlaWdodFNjYWxlID0gZmxvYXQoXCIrZitcIik7XFxuICAgICAgICBjb25zdCBmbG9hdCBpbnZXaWR0aFNjYWxlID0gZmxvYXQoXCIrZCtcIik7XFxuXFxuICAgICAgICBjb25zdCBpbnQgd2luSGVpZ2h0ID0gaW50KFwiK3YrXCIpO1xcbiAgICAgICAgY29uc3QgaW50IHdpbldpZHRoID0gaW50KFwiK20rXCIpO1xcblxcbiAgICAgICAgLy8gQ29tcHV0ZSBib3VuZHMgZm9yIHdoZXJlIGluIGR5IHdlIHdpbGwgbG9va1xcbiAgICAgICAgZmxvYXQgc3RhcnRSTGVycCA9IGZsb29yKGZsb2F0KHIpICogaW52SGVpZ2h0U2NhbGUpO1xcbiAgICAgICAgaW50IHN0YXJ0RHlSID0gaW50KGZsb29yKHN0YXJ0UkxlcnAgLSBmbG9hdCh3aW5IZWlnaHQgLyAyKSkpO1xcblxcbiAgICAgICAgZmxvYXQgc3RhcnRDTGVycCA9IGZsb29yKGZsb2F0KGMpICogaW52V2lkdGhTY2FsZSk7XFxuICAgICAgICBpbnQgc3RhcnREeUMgPSBpbnQoZmxvb3Ioc3RhcnRDTGVycCAtIGZsb2F0KHdpbldpZHRoIC8gMikpKTtcXG5cXG4gICAgICAgIC8vIExvb3Agb3ZlciBkeVxcbiAgICAgICAgZm9yIChpbnQgZHlST2Zmc2V0ID0gMDsgZHlST2Zmc2V0IDwgd2luSGVpZ2h0OyBkeVJPZmZzZXQrKykge1xcbiAgICAgICAgICBpbnQgZHlSID0gZHlST2Zmc2V0ICsgc3RhcnREeVI7XFxuXFxuICAgICAgICAgIC8vIEd1YXJkIGFnYWluc3QgdGhlIHdpbmRvdyBleGNlZWRpbmcgdGhlIGJvdW5kcyBvZiBkeVxcbiAgICAgICAgICBpZiAoZHlSIDwgMCB8fCBkeVIgPj0gXCIrcytcIikge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGZvciAoaW50IGR5Q09mZnNldCA9IDA7IGR5Q09mZnNldCA8IHdpbldpZHRoOyBkeUNPZmZzZXQrKykge1xcbiAgICAgICAgICAgIGludCBkeUMgPSBkeUNPZmZzZXQgKyBzdGFydER5QztcXG5cXG4gICAgICAgICAgICAvLyBHdWFyZCBhZ2FpbnN0IHRoZSB3aW5kb3cgZXhjZWVkaW5nIHRoZSBib3VuZHMgb2YgZHlcXG4gICAgICAgICAgICBpZiAoZHlDIDwgMCB8fCBkeUMgPj0gXCIrdStcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZsb2F0IHNvdXJjZUZyYWNSb3cgPVxcbiAgICAgICAgICAgICAgZmxvYXQoXCIrbFswXStcIikgKlxcbiAgICAgICAgICAgICAgICAoZmxvYXQoZHlSKSAvIGZsb2F0KFwiK2NbMF0rXCIpKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBzb3VyY2VGcmFjQ29sID1cXG4gICAgICAgICAgICAgICAgZmxvYXQoXCIrbFsxXStcIikgKlxcbiAgICAgICAgICAgICAgICAgIChmbG9hdChkeUMpIC8gZmxvYXQoXCIrY1sxXStcIikpO1xcblxcbiAgICAgICAgICAgIGludCBzb3VyY2VOZWFyZXN0Um93ID0gaW50KG1pbihcXG4gICAgICAgICAgICAgICAgZmxvYXQoaW50KFwiK28rXCIpIC0gMSksXFxuICAgICAgICAgICAgICAgIFwiK24rXCIgPyBmbG9hdChyb3VuZChzb3VyY2VGcmFjUm93KSkgOlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9hdChmbG9vcihzb3VyY2VGcmFjUm93KSkpKTtcXG5cXG4gICAgICAgICAgICBpbnQgc291cmNlTmVhcmVzdENvbCA9IGludChtaW4oXFxuICAgICAgICAgICAgICAgIGZsb2F0KGludChcIithK1wiKSAtIDEpLFxcbiAgICAgICAgICAgICAgICBcIituK1wiID8gZmxvYXQocm91bmQoc291cmNlRnJhY0NvbCkpIDpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQoZmxvb3Ioc291cmNlRnJhY0NvbCkpKSk7XFxuXFxuICAgICAgICAgICAgaWYgKHIgPT0gc291cmNlTmVhcmVzdFJvdyAmJiBjID09IHNvdXJjZU5lYXJlc3RDb2wpIHtcXG4gICAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IGdldER5KGIsIGR5UiwgZHlDLCBkKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIC8vIEVuZCBsb29wIG92ZXIgZHlcXG5cXG4gICAgICAgIHNldE91dHB1dChhY2N1bXVsYXRvcik7XFxuICAgICAgfVxcbiAgICBcIn19KCksRmk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy5vdXRwdXRTaGFwZT1bXTt2YXIgbz10WzBdLGE9dFsxXSxpPXRbMl0scz10WzNdO3RoaXMub3V0cHV0U2hhcGU9W28sZSxuLHNdO3ZhciB1PVtyJiZlPjE/YS0xOmEsciYmbj4xP2ktMTppXSxsPVtyJiZlPjE/ZS0xOmUsciYmbj4xP24tMTpuXSxjPXI/XCIwLjVcIjpcIjAuMFwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCB2ZWMyIGVmZmVjdGl2ZUlucHV0T3Zlck91dHB1dFJhdGlvUkMgPSB2ZWMyKFxcbiAgICAgICAgICBcIit1WzBdL2xbMF0rXCIsXFxuICAgICAgICAgIFwiK3VbMV0vbFsxXStcIik7XFxuICAgICAgY29uc3QgdmVjMiBpbnB1dFNoYXBlUkMgPSB2ZWMyKFwiK2ErXCIuMCwgXCIraStcIi4wKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuICAgICAgICBpdmVjMiB5UkMgPSBjb29yZHMueXo7XFxuXFxuICAgICAgICAvLyBGcmFjdGlvbmFsIHNvdXJjZSBpbmRleC5cXG4gICAgICAgIHZlYzIgc291cmNlRnJhY0luZGV4UkMgPSB2ZWMyKHlSQykgKiBlZmZlY3RpdmVJbnB1dE92ZXJPdXRwdXRSYXRpb1JDO1xcblxcbiAgICAgICAgLy8gQ29tcHV0ZSB0aGUgY29vcmRpbmF0b3JzIG9mIG5lYXJlc3QgbmVpZ2hib3IgcG9pbnQuXFxuICAgICAgICBpdmVjMiBzb3VyY2VOZWFyZXN0UkMgPSBpdmVjMihcXG4gICAgICAgICAgbWluKGlucHV0U2hhcGVSQyAtIDEuMCwgZmxvb3Ioc291cmNlRnJhY0luZGV4UkMgKyBcIitjK1wiKSkpO1xcblxcbiAgICAgICAgZmxvYXQgbmV3VmFsdWUgPSBnZXRBKGIsIHNvdXJjZU5lYXJlc3RSQy54LCBzb3VyY2VOZWFyZXN0UkMueSwgZCk7XFxuXFxuICAgICAgICBzZXRPdXRwdXQobmV3VmFsdWUpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLE1pPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl07dmFyIG49dC5sZW5ndGg7aWYobj40KXRocm93IG5ldyBFcnJvcihcIldlYkdMIGJhY2tlbmQ6IFJldmVyc2Ugb2YgcmFuay1cIituK1wiIHRlbnNvciBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtpZih0aGlzLm91dHB1dFNoYXBlPXQsMSE9PW4pe3ZhciByPXQubWFwKGZ1bmN0aW9uKG4scil7cmV0dXJuIGZ1bmN0aW9uKG4pe3JldHVybi0xIT09ZS5pbmRleE9mKG4pJiYxIT09dFtuXT90W25dK1wiIC0gY29vcmRzW1wiK24rXCJdIC0gMVwiOlwiY29vcmRzW1wiK24rXCJdXCJ9KHIpfSkuam9pbihcIixcIiksbz1YbyhuKTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrbytcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIHNldE91dHB1dChnZXRYKFwiK3IrXCIpKTtcXG4gICAgICB9XFxuICAgIFwifWVsc2UgdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBpbnQgY29vcmQgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgICAgc2V0T3V0cHV0KGdldFgoXCIrdFswXStcIiAtIGNvb3JkIC0gMSkpO1xcbiAgICAgICAgfVxcbiAgICAgIFwifX0oKSxCaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwO3ZhciBuPXQubGVuZ3RoO2lmKG4+NCl0aHJvdyBuZXcgRXJyb3IoXCJXZWJHTCBiYWNrZW5kOiBSZXZlcnNlIG9mIHJhbmstXCIrbitcIiB0ZW5zb3IgaXMgbm90IHlldCBzdXBwb3J0ZWRcIik7dGhpcy5vdXRwdXRTaGFwZT10O3ZhciByPU1vKFwicmNcIixuKSxvPXJbbi0xXStcIiArIDEgPCBcIit0aGlzLm91dHB1dFNoYXBlW24tMV0sYT1yW24tMl0rXCIgKyAxIDwgXCIrdGhpcy5vdXRwdXRTaGFwZVtuLTJdLGk9WG8obik7ZnVuY3Rpb24gcyhuKXt2YXIgcj10Lm1hcChmdW5jdGlvbihyLG8pe3JldHVybiBmdW5jdGlvbihuLHIpe3JldHVybi0xIT09ZS5pbmRleE9mKG4pJiYxIT09dFtuXT90W25dK1wiIC0gXCIrcltuXStcIiAtIDFcIjpcIlwiK3Jbbl19KG8sbil9KTtyZXR1cm5cImdldENoYW5uZWwoZ2V0WChcIityLmpvaW4oXCIsXCIpK1wiKSwgdmVjMihcIityLnNsaWNlKC0yKS5qb2luKFwiLFwiKStcIikpXCJ9dGhpcy51c2VyQ29kZT0xPT09bj9cIlxcbiAgICAgICAgdm9pZCBtYWluKCl7XFxuICAgICAgICAgIGludCByYyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcbiAgICAgICAgICByZXN1bHQuciA9IGdldENoYW5uZWwoZ2V0WChcIit0WzBdK1wiIC0gcmMgLSAxKSxcXG4gICAgICAgICAgICBcIit0WzBdK1wiIC0gcmMgLSAxKTtcXG4gICAgICAgICAgaWYoXCIrbytcIil7XFxuICAgICAgICAgICAgICByZXN1bHQuZyA9IGdldENoYW5uZWwoZ2V0WChcIit0WzBdK1wiIC0gKHJjICArIDEpIC0gMSksXFxuICAgICAgICAgICAgICAgIFwiK3RbMF0rXCIgLSAocmMgICsgMSkgLSAxKTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICAgIH1cXG4gICAgICBcIjpcIlxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBcIitpK1wiIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuICAgICAgICAgIHJlc3VsdC5yID0gXCIrZnVuY3Rpb24odCl7cmV0dXJuIHModCl9KHIuc2xpY2UoKSkrXCI7XFxuICAgICAgICAgIGlmKFwiK28rXCIpe1xcbiAgICAgICAgICAgIHJlc3VsdC5nID0gXCIrZnVuY3Rpb24odCl7cmV0dXJuIHRbbi0xXT1cIihcIit0W24tMV0rXCIgKyAxKVwiLHModCl9KHIuc2xpY2UoKSkrXCI7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaWYoXCIrYStcIikge1xcbiAgICAgICAgICAgIHJlc3VsdC5iID0gXCIrZnVuY3Rpb24odCl7cmV0dXJuIHRbbi0yXT1cIihcIit0W24tMl0rXCIgKyAxKVwiLHModCl9KHIuc2xpY2UoKSkrXCI7XFxuICAgICAgICAgICAgaWYoXCIrbytcIikge1xcbiAgICAgICAgICAgICAgcmVzdWx0LmEgPSBcIitmdW5jdGlvbih0KXtyZXR1cm4gdFtuLTFdPVwiKFwiK3Rbbi0xXStcIiArIDEpXCIsdFtuLTJdPVwiKFwiK3Rbbi0yXStcIiArIDEpXCIscyh0KX0oci5zbGljZSgpKStcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgICB9XFxuICAgIFwifX0oKSxQaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1pJiYoaT0hMCksdGhpcy52YXJpYWJsZU5hbWVzPVtcInVwZGF0ZXNcIixcImluZGljZXNcIixcImRlZmF1bHRWYWx1ZVwiXSx0aGlzLm91dHB1dFNoYXBlPWE7dmFyIHM9WG8oby5sZW5ndGgpLHU9WG8oYS5sZW5ndGgpLGw9XCJcIjsxPT09bj9sPVwiaVwiOjI9PT1uJiYobD1cImksIGpcIik7dmFyIGM9XCJnZXRJbmRpY2VzKFwiK2wrXCIpXCIsaD1cIlwiOzE9PT1yP2g9XCJpXCI6Mj09PXImJihoPVwiaSwgY29vcmRzWzFdXCIpO3ZhciBwPVwiZ2V0VXBkYXRlcyhcIitoK1wiKVwiLGY9ZT4xP1wic3RyaWRlc1tqXVwiOlwic3RyaWRlc1wiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIFwiK3MrXCIgc3RyaWRlcyA9IFwiK3MrXCIoXCIrbytcIik7XFxuXFxuICAgICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAgIFwiK3UrXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGZsb2F0IHN1bSA9IDAuMDtcXG4gICAgICAgICAgYm9vbCBmb3VuZCA9IGZhbHNlO1xcbiAgICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK3QrXCI7IGkrKykge1xcbiAgICAgICAgICAgIGludCBmbGF0dGVuZWRJbmRleCA9IDA7XFxuICAgICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBcIitlK1wiOyBqKyspIHtcXG4gICAgICAgICAgICAgIGludCBpbmRleCA9IHJvdW5kKFwiK2MrXCIpO1xcbiAgICAgICAgICAgICAgZmxhdHRlbmVkSW5kZXggKz0gaW5kZXggKiBcIitmK1wiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpZiAoZmxhdHRlbmVkSW5kZXggPT0gY29vcmRzWzBdKSB7XFxuICAgICAgICAgICAgICBzdW0gKz0gXCIrcCtcIjtcXG4gICAgICAgICAgICAgIGZvdW5kID0gdHJ1ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KG1peChnZXREZWZhdWx0VmFsdWUoKSwgc3VtLCBmbG9hdChmb3VuZCkpKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn19KCksTGk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwic2VnbWVudElkc1wiXTt2YXIgbj10LndpbmRvd1NpemUscj10LmJhdGNoU2l6ZSxvPXQuaW5TaXplLGE9dC5udW1TZWdtZW50cyxpPWEqTWF0aC5jZWlsKG8vbik7dGhpcy5vdXRwdXRTaGFwZT1bcixpXTt2YXIgcz00Kk1hdGguZmxvb3Iobi80KSx1PW4lNCxsPVwiXFxuICAgICAgICBzdW1WYWx1ZSArPSBkb3QodmFsdWVzLCBzZWdGaWx0ZXIpO1xcbiAgICBcIixjPVwiXCI7byVuPjAmJihjPVwiXFxuICAgICAgICBpZiAoaW5JZHggPCAwIHx8IGluSWR4ID49IFwiK28rXCIpIHtcXG4gICAgICAgICAgcmV0dXJuIGluaXRpYWxpemF0aW9uVmFsdWU7XFxuICAgICAgICB9XFxuICAgICAgXCIpO3ZhciBoPVwiXCI7byVuPjAmJihoPVwiXFxuICAgICAgICBpZiAoaW5JZHggPCAwIHx8IGluSWR4ID49IFwiK28rXCIpIHtcXG4gICAgICAgICAgcmV0dXJuIC0xLjA7XFxuICAgICAgICB9XFxuICAgICAgXCIpLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBmbG9hdCBpbml0aWFsaXphdGlvblZhbHVlID0gMC4wO1xcblxcbiAgICAgIGZsb2F0IGdldFZhbHVlKGludCBiYXRjaCwgaW50IGluSWR4KSB7XFxuICAgICAgICBcIitjK1wiXFxuICAgICAgICByZXR1cm4gZ2V0WChiYXRjaCwgaW5JZHgpO1xcbiAgICAgIH1cXG5cXG4gICAgICBmbG9hdCBnZXRTZWdtZW50SWRBdEluZGV4KGludCBpbklkeCkge1xcbiAgICAgICAgXCIraCtcIlxcbiAgICAgICAgcmV0dXJuIGdldFNlZ21lbnRJZHMoaW5JZHgpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBvdXRJZHggPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgaW5PZmZzZXQgPSBpbnQoZmxvb3IoZmxvYXQob3V0SWR4KSAvIGZsb2F0KFxcbiAgICAgICAgICBcIithK1wiKSkgKiBmbG9hdChcIituK1wiKSk7XFxuICAgICAgICBpbnQgY3VycmVudFNlZyA9IGludChtb2QoZmxvYXQob3V0SWR4KSwgZmxvYXQoXCIrYStcIikpKTtcXG5cXG4gICAgICAgIGZsb2F0IHN1bVZhbHVlID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIitzK1wiOyBpICs9IDQpIHtcXG4gICAgICAgICAgaW50IGluSWR4ID0gaW5PZmZzZXQgKyBpO1xcbiAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAyKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAzKVxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICB2ZWM0IHNlZ0ZpbHRlciA9IHZlYzQoXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHgpKSA9PSBjdXJyZW50U2VnID8gMSA6IDAsXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHggKyAxKSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4ICsgMikpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCArIDMpKSA9PSBjdXJyZW50U2VnID8gMSA6IDBcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgXCIrbCtcIlxcbiAgICAgICAgfVxcblxcbiAgICAgICAgaW50IGluSWR4ID0gaW5PZmZzZXQgKyBcIitzK1wiO1xcbiAgICAgICAgaWYgKFwiKygxPT09dSkrXCIpIHtcXG4gICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgaW50IGluSWR4U2VnID0gaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHgpKTtcXG5cXG4gICAgICAgICAgdmVjNCBzZWdGaWx0ZXIgPSB2ZWM0KFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4KSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgMCxcXG4gICAgICAgICAgICAwXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2wrXCJcXG4gICAgICAgIH0gZWxzZSBpZiAoXCIrKDI9PT11KStcIikge1xcbiAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgdmVjNCBzZWdGaWx0ZXIgPSB2ZWM0KFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4KSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4ICsgMSkpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgICAwXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2wrXCJcXG4gICAgICAgIH0gZWxzZSBpZiAoXCIrKDM9PT11KStcIikge1xcbiAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAyKSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIHZlYzQgc2VnRmlsdGVyID0gdmVjNChcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCkpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCArIDEpKSA9PSBjdXJyZW50U2VnID8gMSA6IDAsXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHggKyAyKSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIDBcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgXCIrbCtcIlxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KHN1bVZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxXaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dmFyIHIsbztpZih0aGlzLnZhcmlhYmxlTmFtZXM9W1wiY1wiLFwiYVwiLFwiYlwiXSx0aGlzLm91dHB1dFNoYXBlPWUsbj40KXRocm93IEVycm9yKFwiV2hlcmUgZm9yIHJhbmsgXCIrbitcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtpZigxPT09bilvPVwicmVzUkNcIixyPVwicmVzUkNcIjtlbHNle2Zvcih2YXIgYT1bXCJyZXNSQy54XCIsXCJyZXNSQy55XCIsXCJyZXNSQy56XCIsXCJyZXNSQy53XCJdLGk9W10scz1bXSx1PTA7dTxlLmxlbmd0aDt1Kyspcy5wdXNoKFwiXCIrYVt1XSksdTx0JiZpLnB1c2goXCJcIithW3VdKTtyPWkuam9pbigpLG89cy5qb2luKCl9dmFyIGw9WG8obik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK2wrXCIgcmVzUkMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGNWYWwgPSBnZXRDKFwiK3IrXCIpO1xcbiAgICAgICAgaWYgKGNWYWwgPj0gMS4wKSB7XFxuICAgICAgICAgIHNldE91dHB1dChnZXRBKFwiK28rXCIpKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHNldE91dHB1dChnZXRCKFwiK28rXCIpKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIFwifX0oKSxVaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInNvdXJjZVwiXSx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy5yYW5rPXQubGVuZ3RoO3ZhciBlLG49WG8odGhpcy5yYW5rKSxyPVwidW5pZm9ybSBpbnQgc3RhcnRbXCIrdGhpcy5yYW5rK1wiXTtcIixvPWZ1bmN0aW9uKHQpe2lmKDE9PT10KXJldHVyblwic291cmNlTG9jXCI7aWYodDw9NilyZXR1cm4gVmkuc2xpY2UoMCx0KS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuXCJzb3VyY2VMb2MuXCIrdH0pLmpvaW4oXCIsXCIpO3Rocm93IEVycm9yKFwiU2xpY2luZyBmb3IgcmFuayBcIit0K1wiIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpfSh0aGlzLnJhbmspO2U9XCJcXG4gICAgICAgIFwiK24rXCIgc291cmNlTG9jO1xcbiAgICAgICAgXCIrbitcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIFwiK3QubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJzb3VyY2VMb2MuXCIrVmlbZV0rXCIgPSBzdGFydFtcIitlK1wiXSArIGNvb3Jkcy5cIitWaVtlXStcIjtcIn0pLmpvaW4oXCJcXG5cIikrXCJcXG4gICAgICBcIix0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrcitcIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK2UrXCJcXG4gICAgICAgIHNldE91dHB1dChnZXRTb3VyY2UoXCIrbytcIikpO1xcbiAgICAgIH1cXG4gICAgXCJ9cmV0dXJuIHQucHJvdG90eXBlLmdldEN1c3RvbVNldHVwRnVuYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzO2lmKHQubGVuZ3RoIT09dGhpcy5yYW5rKXRocm93IEVycm9yKFwiVGhlIHJhbmsgKFwiK3RoaXMucmFuaytcIikgb2YgdGhlIHByb2dyYW0gbXVzdCBtYXRjaCB0aGUgbGVuZ3RoIG9mIHN0YXJ0IChcIit0Lmxlbmd0aCtcIilcIik7cmV0dXJuIGZ1bmN0aW9uKG4scil7bnVsbD09ZS5zdGFydExvYyYmKGUuc3RhcnRMb2M9bi5nZXRVbmlmb3JtTG9jYXRpb25Ob1Rocm93KHIsXCJzdGFydFwiKSxudWxsPT1lLnN0YXJ0TG9jKXx8bi5nbC51bmlmb3JtMWl2KGUuc3RhcnRMb2MsdCl9fSx0fSgpLFZpPVtcInhcIixcInlcIixcInpcIixcIndcIixcInVcIixcInZcIl07dmFyIHppPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wic291cmNlXCJdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnJhbms9dC5sZW5ndGg7dmFyIGU9WG8odGhpcy5yYW5rKSxuPU1vKFwiY29vcmRzXCIsdGhpcy5yYW5rKSxyPU1vKFwic291cmNlTG9jXCIsdGhpcy5yYW5rKSxvPTE9PT10aGlzLnJhbms/XCJzb3VyY2VMb2NcIjpcInZlYzIoXCIrci5zbGljZSgtMikuam9pbigpK1wiKVwiLGE9XCJnZXRDaGFubmVsKGdldFNvdXJjZShcIityLmpvaW4oKStcIiksIFwiK28rXCIpXCIsaT1cIlxcbiAgICAgIHJlc3VsdC54ID0gXCIrYStcIjtcXG4gICAgICBpZiAoKytcIituW3RoaXMucmFuay0xXStcIiA8IFwiK3RbdGhpcy5yYW5rLTFdK1wiKSB7XFxuICAgICAgICArK1wiK3JbdGhpcy5yYW5rLTFdK1wiO1xcbiAgICAgICAgcmVzdWx0LnkgPSBcIithK1wiO1xcbiAgICAgICAgLS1cIityW3RoaXMucmFuay0xXStcIjtcXG4gICAgICB9XFxuICAgIFwiLHM9MT09PXRoaXMucmFuaz9cIlwiOlwiXFxuICAgICAgLS1cIituW3RoaXMucmFuay0xXStcIjtcXG4gICAgICBpZiAoKytcIituW3RoaXMucmFuay0yXStcIiA8IFwiK3RbdGhpcy5yYW5rLTJdK1wiKSB7XFxuICAgICAgICArK1wiK3JbdGhpcy5yYW5rLTJdK1wiO1xcbiAgICAgICAgcmVzdWx0LnogPSBcIithK1wiO1xcbiAgICAgICAgaWYgKCsrXCIrblt0aGlzLnJhbmstMV0rXCIgPCBcIit0W3RoaXMucmFuay0xXStcIikge1xcbiAgICAgICAgICArK1wiK3JbdGhpcy5yYW5rLTFdK1wiO1xcbiAgICAgICAgICByZXN1bHQudyA9IFwiK2ErXCI7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICBcIix1PXRoaXMucmFuazw9ND9cInNvdXJjZUxvYyA9IGNvb3JkcyArXFxuICAgICAgICAgICAgXCIrZStcIihcIit0Lm1hcChmdW5jdGlvbih0LGUpe3JldHVyblwic3RhcnRbXCIrZStcIl1cIn0pLmpvaW4oKStcIik7XCI6dC5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm4gcltlXStcIiA9IFwiK25bZV0rXCIgKyBzdGFydFtcIitlK1wiXTtcIn0pLmpvaW4oXCJcXG5cIik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHVuaWZvcm0gaW50IHN0YXJ0W1wiK3RoaXMucmFuaytcIl07XFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrZStcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIFwiK2UrXCIgc291cmNlTG9jO1xcbiAgICAgICAgXCIrdStcIiBcXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuICAgICAgICBcIitpK1wiXFxuICAgICAgICBcIitzK1wiXFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifXJldHVybiB0LnByb3RvdHlwZS5nZXRDdXN0b21TZXR1cEZ1bmM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZih0Lmxlbmd0aCE9PXRoaXMucmFuayl0aHJvdyBFcnJvcihcIlRoZSByYW5rIChcIit0aGlzLnJhbmsrXCIpIG9mIHRoZSBwcm9ncmFtIG11c3QgbWF0Y2ggdGhlIGxlbmd0aCBvZiBzdGFydCAoXCIrdC5sZW5ndGgrXCIpXCIpO3JldHVybiBmdW5jdGlvbihuLHIpe251bGw9PWUuc3RhcnRMb2MmJihlLnN0YXJ0TG9jPW4uZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhyLFwic3RhcnRcIiksbnVsbD09ZS5zdGFydExvYyl8fG4uZ2wudW5pZm9ybTFpdihlLnN0YXJ0TG9jLHQpfX0sdH0oKSxHaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sdGhpcy5vdXRwdXRTaGFwZT1uO3ZhciByPW4ubGVuZ3RoLG89WG8obi5sZW5ndGgpLGE9WG8obi5sZW5ndGgpLGk9XCJcIjtpZigxPT09cilpPVwiY29vcmRzICogc3RyaWRlcyArIGJlZ2luXCI7ZWxzZXt2YXIgcz0wO2k9bi5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm4gcysrLDE9PT1uLmxlbmd0aD9cImNvb3JkcyAqIHN0cmlkZXNbXCIrZStcIl0gKyBiZWdpbltcIitlK1wiXVwiOlwiY29vcmRzW1wiKyhzLTEpK1wiXSAqIHN0cmlkZXNbXCIrZStcIl0gKyBiZWdpbltcIitlK1wiXVwifSkuam9pbihcIixcIil9dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK28rXCIgYmVnaW4gPSBcIitvK1wiKFwiK3QrXCIpO1xcbiAgICAgIFwiK28rXCIgc3RyaWRlcyA9IFwiK28rXCIoXCIrZStcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrYStcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIHNldE91dHB1dChnZXRYKFwiK2krXCIpKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxIaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5ncGdwdT10LHRoaXMubnVtVXNlZFRleHR1cmVzPTAsdGhpcy5udW1GcmVlVGV4dHVyZXM9MCx0aGlzLmZyZWVUZXh0dXJlcz17fSx0aGlzLmxvZ0VuYWJsZWQ9ITEsdGhpcy51c2VkVGV4dHVyZXM9e319cmV0dXJuIHQucHJvdG90eXBlLmFjcXVpcmVUZXh0dXJlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcixvPXFpKGUsbiksYT0kaSh0LG8sbik7aWYoYSBpbiB0aGlzLmZyZWVUZXh0dXJlc3x8KHRoaXMuZnJlZVRleHR1cmVzW2FdPVtdKSxhIGluIHRoaXMudXNlZFRleHR1cmVzfHwodGhpcy51c2VkVGV4dHVyZXNbYV09W10pLHRoaXMuZnJlZVRleHR1cmVzW2FdLmxlbmd0aD4wKXt0aGlzLm51bUZyZWVUZXh0dXJlcy0tLHRoaXMubnVtVXNlZFRleHR1cmVzKyssdGhpcy5sb2coKTt2YXIgaT10aGlzLmZyZWVUZXh0dXJlc1thXS5zaGlmdCgpO3JldHVybiB0aGlzLnVzZWRUZXh0dXJlc1thXS5wdXNoKGkpLGl9cmV0dXJuIHRoaXMubnVtVXNlZFRleHR1cmVzKyssdGhpcy5sb2coKSxvPT09RHQuUEFDS0VEXzJYMl9GTE9BVDMyP3I9dGhpcy5ncGdwdS5jcmVhdGVQYWNrZWRNYXRyaXhUZXh0dXJlKHRbMF0sdFsxXSk6bz09PUR0LlBBQ0tFRF8yWDJfRkxPQVQxNj9yPXRoaXMuZ3BncHUuY3JlYXRlRmxvYXQxNlBhY2tlZE1hdHJpeFRleHR1cmUodFswXSx0WzFdKTpvPT09RHQuVU5QQUNLRURfRkxPQVQzMj9yPXRoaXMuZ3BncHUuY3JlYXRlRmxvYXQzMk1hdHJpeFRleHR1cmUodFswXSx0WzFdKTpvPT09RHQuVU5QQUNLRURfRkxPQVQxNj9yPXRoaXMuZ3BncHUuY3JlYXRlRmxvYXQxNk1hdHJpeFRleHR1cmUodFswXSx0WzFdKTpvPT09RHQuUEFDS0VEXzRYMV9VTlNJR05FRF9CWVRFJiYocj10aGlzLmdwZ3B1LmNyZWF0ZVVuc2lnbmVkQnl0ZXNNYXRyaXhUZXh0dXJlKHRbMF0sdFsxXSkpLHRoaXMudXNlZFRleHR1cmVzW2FdLnB1c2gocikscn0sdC5wcm90b3R5cGUucmVsZWFzZVRleHR1cmU9ZnVuY3Rpb24odCxlLG4scil7aWYobnVsbCE9dGhpcy5mcmVlVGV4dHVyZXMpe3ZhciBvPSRpKGUscWkobixyKSxyKTtvIGluIHRoaXMuZnJlZVRleHR1cmVzfHwodGhpcy5mcmVlVGV4dHVyZXNbb109W10pLHRoaXMuZnJlZVRleHR1cmVzW29dLnB1c2godCksdGhpcy5udW1GcmVlVGV4dHVyZXMrKyx0aGlzLm51bVVzZWRUZXh0dXJlcy0tO3ZhciBhPXRoaXMudXNlZFRleHR1cmVzW29dLGk9YS5pbmRleE9mKHQpO2lmKGk8MCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgcmVsZWFzZSBhIHRleHR1cmUgdGhhdCB3YXMgbmV2ZXIgcHJvdmlkZWQgYnkgdGhpcyB0ZXh0dXJlIG1hbmFnZXJcIik7YS5zcGxpY2UoaSwxKSx0aGlzLmxvZygpfX0sdC5wcm90b3R5cGUubG9nPWZ1bmN0aW9uKCl7aWYodGhpcy5sb2dFbmFibGVkKXt2YXIgdD10aGlzLm51bUZyZWVUZXh0dXJlcyt0aGlzLm51bVVzZWRUZXh0dXJlcztjb25zb2xlLmxvZyhcIkZyZWUvVXNlZFwiLHRoaXMubnVtRnJlZVRleHR1cmVzK1wiIC8gXCIrdGhpcy5udW1Vc2VkVGV4dHVyZXMsXCIoXCIrdCtcIilcIil9fSx0LnByb3RvdHlwZS5nZXROdW1Vc2VkVGV4dHVyZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5udW1Vc2VkVGV4dHVyZXN9LHQucHJvdG90eXBlLmdldE51bUZyZWVUZXh0dXJlcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLm51bUZyZWVUZXh0dXJlc30sdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYobnVsbCE9dGhpcy5mcmVlVGV4dHVyZXMpe2Zvcih2YXIgZSBpbiB0aGlzLmZyZWVUZXh0dXJlcyl0aGlzLmZyZWVUZXh0dXJlc1tlXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QuZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShlKX0pO2Zvcih2YXIgZSBpbiB0aGlzLnVzZWRUZXh0dXJlcyl0aGlzLnVzZWRUZXh0dXJlc1tlXS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3QuZ3BncHUuZGVsZXRlTWF0cml4VGV4dHVyZShlKX0pO3RoaXMuZnJlZVRleHR1cmVzPW51bGwsdGhpcy51c2VkVGV4dHVyZXM9bnVsbCx0aGlzLm51bVVzZWRUZXh0dXJlcz0wLHRoaXMubnVtRnJlZVRleHR1cmVzPTB9fSx0fSgpO2Z1bmN0aW9uIHFpKHQsZSl7aWYodD09PVR0LlVQTE9BRClyZXR1cm4gRHQuUEFDS0VEXzJYMl9GTE9BVDMyO2lmKHQ9PT1UdC5SRU5ERVJ8fG51bGw9PXQpcmV0dXJuIGZ1bmN0aW9uKHQpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9FTkFCTEVEXCIpP3Q/RHQuUEFDS0VEXzJYMl9GTE9BVDMyOkR0LlVOUEFDS0VEX0ZMT0FUMzI6dD9EdC5QQUNLRURfMlgyX0ZMT0FUMTY6RHQuVU5QQUNLRURfRkxPQVQxNn0oZSk7aWYodD09PVR0LkRPV05MT0FEfHx0PT09VHQuUElYRUxTKXJldHVybiBEdC5QQUNLRURfNFgxX1VOU0lHTkVEX0JZVEU7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBsb2dpY2FsIHRleHR1cmUgdHlwZSBcIit0KX1mdW5jdGlvbiAkaSh0LGUsbil7cmV0dXJuIHRbMF0rXCJfXCIrdFsxXStcIl9cIitlK1wiX1wiK259dmFyIEtpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07Zm9yKHZhciBuPW5ldyBBcnJheSh0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09dFtyXSplW3JdO3RoaXMub3V0cHV0U2hhcGU9bix0aGlzLnJhbms9bi5sZW5ndGg7dmFyIG89WG8odGhpcy5yYW5rKSxhPWZ1bmN0aW9uKHQpe3ZhciBlPXQubGVuZ3RoO2lmKGU+NSl0aHJvdyBFcnJvcihcIlRpbGUgZm9yIHJhbmsgXCIrZStcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtpZigxPT09ZSlyZXR1cm5cImltb2QocmVzUkMsIFwiK3RbMF0rXCIpXCI7Zm9yKHZhciBuPVtcInJlc1JDLnhcIixcInJlc1JDLnlcIixcInJlc1JDLnpcIixcInJlc1JDLndcIixcInJlc1JDLnVcIl0scj1bXSxvPTA7bzx0Lmxlbmd0aDtvKyspci5wdXNoKFwiaW1vZChcIituW29dK1wiLCBcIit0W29dK1wiKVwiKTtyZXR1cm4gci5qb2luKCl9KHQpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIHJlc1JDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQoZ2V0QShcIithK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn19KCk7dmFyIGppPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07Zm9yKHZhciBuPW5ldyBBcnJheSh0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09dFtlW3JdXTt0aGlzLm91dHB1dFNoYXBlPW4sdGhpcy5yYW5rPW4ubGVuZ3RoO3ZhciBvPVhvKHRoaXMucmFuayksYT1mdW5jdGlvbih0KXt2YXIgZT10Lmxlbmd0aDtpZihlPjYpdGhyb3cgRXJyb3IoXCJUcmFuc3Bvc2UgZm9yIHJhbmsgXCIrZStcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtmb3IodmFyIG49W1wicmVzUkMueFwiLFwicmVzUkMueVwiLFwicmVzUkMuelwiLFwicmVzUkMud1wiLFwicmVzUkMudVwiLFwicmVzUkMudlwiXSxyPW5ldyBBcnJheShlKSxvPTA7bzx0Lmxlbmd0aDtvKyspclt0W29dXT1uW29dO3JldHVybiByLmpvaW4oKX0oZSk7dGhpcy51c2VyQ29kZT1cIlxcbiAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgXCIrbytcIiByZXNSQyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgIHNldE91dHB1dChnZXRBKFwiK2ErXCIpKTtcXG4gICAgfVxcbiAgICBcIn19KCk7dmFyIFhpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITA7Zm9yKHZhciBuPW5ldyBBcnJheSh0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09dFtlW3JdXTtpZih0aGlzLm91dHB1dFNoYXBlPW4sdGhpcy5yYW5rPW4ubGVuZ3RoLHRoaXMucmFuaz42KXRocm93IEVycm9yKFwiUGFja2VkIHRyYW5zcG9zZSBmb3IgcmFuayBcIit0aGlzLnJhbmsrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWQuXCIpO3ZhciBvPVhvKHRoaXMucmFuayksYT1GbyhcInJjXCIsdGhpcy5yYW5rKSxpPW5ldyBBcnJheSh0aGlzLnJhbmspO2ZvcihyPTA7cjxlLmxlbmd0aDtyKyspaVtlW3JdXT1hW3JdO3ZhciBzPVwidmVjMihcIitpLnNsaWNlKC0yKS5qb2luKCkrXCIpXCIsdT1cIisrXCIrYVt0aGlzLnJhbmstMV0rXCIgPCBcIituW3RoaXMucmFuay0xXSxsPVwiZ2V0Q2hhbm5lbChnZXRBKFwiK2kuam9pbigpK1wiKSwgXCIrcytcIilcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICBcIitvK1wiIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG4gICAgICByZXN1bHRbMF0gPSBcIitsK1wiO1xcbiAgICAgIGlmKFwiK3UrXCIpIHtcXG4gICAgICAgIHJlc3VsdFsxXSA9IFwiK2wrXCI7XFxuICAgICAgfVxcbiAgICAgIC0tXCIrYVt0aGlzLnJhbmstMV0rXCI7XFxuICAgICAgaWYoKytcIithW3RoaXMucmFuay0yXStcIiA8IFwiK25bdGhpcy5yYW5rLTJdK1wiKSB7XFxuICAgICAgICByZXN1bHRbMl0gPSBcIitsK1wiO1xcbiAgICAgICAgaWYoXCIrdStcIikge1xcbiAgICAgICAgICByZXN1bHRbM10gPSBcIitsK1wiO1xcbiAgICAgICAgfVxcbiAgICAgIH0gIFxcbiAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICB9XFxuICAgIFwifX0oKSxZaT0xLjc1ODA5OTM0MDg0NzM3NjgsUWk9MS4wNTA3MDA5ODczNTU0ODA1LEppPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCB1bmFyeU9wZXJhdGlvbihmbG9hdCB4KSB7XFxuICAgICAgICBcIitlK1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGZsb2F0IHggPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IHkgPSB1bmFyeU9wZXJhdGlvbih4KTtcXG5cXG4gICAgICAgIHNldE91dHB1dCh5KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxaaT1cImlmIChpc25hbih4KSkgcmV0dXJuIHg7XCIsdHM9XCJyZXR1cm4geDtcIixlcz1cInJldHVybiBhYnMoeCk7XCIsbnM9WmkrXCJcXG4gIHJldHVybiAoeCA8IDAuMCkgPyAwLjAgOiB4O1xcblwiLHJzPVppK1wiXFxuICByZXR1cm4gKHggPCAwLjApID8gMC4wIDogbWluKDYuMCwgeCk7XFxuXCIsb3M9XCJyZXR1cm4gKHggPj0gMC4wKSA/IHggOiAoZXhwKHgpIC0gMS4wKTtcIixhcz1cIlxcbiAgLy8gU3RhYmxlIGFuZCBBdHRyYWN0aW5nIEZpeGVkIFBvaW50ICgwLCAxKSBmb3IgTm9ybWFsaXplZCBXZWlnaHRzLlxcbiAgLy8gc2VlOiBodHRwczovL2FyeGl2Lm9yZy9hYnMvMTcwNi4wMjUxNVxcbiAgZmxvYXQgc2NhbGVBbHBoYSA9IFwiK1lpK1wiO1xcbiAgZmxvYXQgc2NhbGUgPSBcIitRaStcIjtcXG4gIHJldHVybiAoeCA+PSAwLjApID8gc2NhbGUgKiB4IDogc2NhbGVBbHBoYSAqIChleHAoeCkgLSAxLjApO1xcblwiO3ZhciBpcz1cInJldHVybiAteDtcIixzcz1cInJldHVybiBjZWlsKHgpO1wiLHVzPVwicmV0dXJuIGZsb29yKHgpO1wiLGxzPVwicmV0dXJuIGV4cCh4KTtcIixjcz1cInJldHVybiBleHAoeCkgLSAxLjA7XCIsaHM9WmkrXCJcXG4gIHJldHVybiBzaW4oeCk7XFxuXCIscHM9WmkrXCJcXG4gIHJldHVybiBjb3MoeCk7XFxuXCIsZnM9WmkrXCJcXG4gIGlmIChhYnMoeCkgPiAxLikge1xcbiAgICByZXR1cm4gTkFOO1xcbiAgfVxcbiAgcmV0dXJuIGFzaW4oeCk7XFxuXCIsZHM9WmkrXCJcXG4gIGlmIChhYnMoeCkgPiAxLikge1xcbiAgICByZXR1cm4gTkFOO1xcbiAgfVxcbiAgcmV0dXJuIGFjb3MoeCk7XFxuXCIsdnM9WmkrXCJcXG4gIHJldHVybiBhdGFuKHgpO1xcblwiLG1zPVppK1wicmV0dXJuIGxvZyh4ICsgc3FydCh4ICogeCArIDEuMCkpO1wiLGdzPVppK1wiXFxuICBpZiAoeCA8IDEuMCkgcmV0dXJuIE5BTjtcXG4gIHJldHVybiBsb2coeCArIHNxcnQoeCAqIHggLSAxLjApKTtcIix5cz1aaStcIlxcbiAgaWYgKCh4IDwgLTEuMCkgfHwgKHggPiAxLjApKSByZXR1cm4gTkFOO1xcbiAgcmV0dXJuIChsb2coMS4wICsgeCkgLSBsb2coMS4wIC0geCkpIC8gMi4wO1wiLHhzPVwicmV0dXJuIHg7XCIsYnM9XCJyZXR1cm4geDtcIix3cz1cIlxcbiAgdmVjNCByZXN1bHQgPSB4ICogdmVjNChncmVhdGVyVGhhbkVxdWFsKHgsIHZlYzQoMC4wKSkpO1xcbiAgYnZlYzQgaXNOYU4gPSBpc25hbih4KTtcXG5cXG4gIHJlc3VsdC5yID0gaXNOYU4uciA/IHguciA6IHJlc3VsdC5yO1xcbiAgcmVzdWx0LmcgPSBpc05hTi5nID8geC5nIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzTmFOLmIgPyB4LmIgOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA/IHguYSA6IHJlc3VsdC5hO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIixDcz1cIlxcbiAgdmVjNCByZXN1bHQgPSBtaW4oeCwgdmVjNCg2LikpICogdmVjNChncmVhdGVyVGhhbkVxdWFsKHgsIHZlYzQoMC4wKSkpO1xcbiAgYnZlYzQgaXNOYU4gPSBpc25hbih4KTtcXG5cXG4gIHJlc3VsdC5yID0gaXNOYU4uciA/IHguciA6IHJlc3VsdC5yO1xcbiAgcmVzdWx0LmcgPSBpc05hTi5nID8geC5nIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzTmFOLmIgPyB4LmIgOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA/IHguYSA6IHJlc3VsdC5hO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIixFcz1cIlxcbiAgdmVjNCByZXN1bHQ7XFxuXFxuICByZXN1bHQuciA9ICh4LnIgPj0gMC4wKSA/IHguciA6IChleHAoeC5yKSAtIDEuMCk7XFxuICByZXN1bHQuZyA9ICh4LmcgPj0gMC4wKSA/IHguZyA6IChleHAoeC5nKSAtIDEuMCk7XFxuICByZXN1bHQuYiA9ICh4LmIgPj0gMC4wKSA/IHguYiA6IChleHAoeC5iKSAtIDEuMCk7XFxuICByZXN1bHQuYSA9ICh4LmEgPj0gMC4wKSA/IHguYSA6IChleHAoeC5hKSAtIDEuMCk7XFxuXFxuICByZXR1cm4gcmVzdWx0O1xcblwiLFJzPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2ZWM0IHVuYXJ5T3BlcmF0aW9uKHZlYzQgeCkge1xcbiAgICAgICAgXCIrZStcIlxcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICB2ZWM0IHggPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIHZlYzQgeSA9IHVuYXJ5T3BlcmF0aW9uKHgpO1xcblxcbiAgICAgICAgc2V0T3V0cHV0KHkpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLElzPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwLHRoaXMub3V0cHV0U2hhcGU9dDt2YXIgZT10Lmxlbmd0aCxuPU1vKFwicmNcIixlKSxyPVhvKGUpLG89ZnVuY3Rpb24odCxlKXtpZigxPT09dClyZXR1cm5cInJjXCI7Zm9yKHZhciBuPVwiXCIscj0wO3I8dDtyKyspbis9ZVtyXSxyPHQtMSYmKG4rPVwiLFwiKTtyZXR1cm4gbn0oZSxuKSxhPW4uc2xpY2UoLTIpLGk9ZTw9MT9cInJjXCI6XCJ2ZWMyKFwiK2Euam9pbihcIixcIikrXCIpXCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK3IrXCIgcmMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIHZlYzQgcGFja2VkSW5wdXQgPSBnZXRBKFwiK28rXCIpO1xcblxcbiAgICAgICAgc2V0T3V0cHV0KGdldENoYW5uZWwocGFja2VkSW5wdXQsIFwiK2krXCIpKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxrcz17fTtmdW5jdGlvbiBOcyh0LGUpe2lmKHZvaWQgMD09PWUmJihlPSExKSxcImxpbmVhclwiPT09dClyZXR1cm4gZT9iczp0cztpZihcInJlbHVcIj09PXQpcmV0dXJuIGU/d3M6bnM7aWYoXCJlbHVcIj09PXQpcmV0dXJuIGU/RXM6b3M7aWYoXCJyZWx1NlwiPT09dClyZXR1cm4gZT9DczpycztpZihcInByZWx1XCI9PT10KXJldHVybiBlP2hhOmxhO3Rocm93IG5ldyBFcnJvcihcIkFjdGl2YXRpb24gXCIrdCtcIiBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWQgZm9yIHRoZSBXZWJHTCBiYWNrZW5kLlwiKX12YXIgU3M9NjAwO3ZhciBBcz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7aWYodGhpcy5ncGdwdT10LHRoaXMucGVuZGluZ1JlYWQ9bmV3IFdlYWtNYXAsdGhpcy5wZW5kaW5nRGlzcG9zYWw9bmV3IFdlYWtTZXQsdGhpcy5kYXRhUmVmQ291bnQ9bmV3IFdlYWtNYXAsdGhpcy5udW1CeXRlc0luR1BVPTAsdGhpcy51cGxvYWRXYWl0TXM9MCx0aGlzLmRvd25sb2FkV2FpdE1zPTAsdGhpcy53YXJuZWRBYm91dE1lbW9yeT0hMSx0aGlzLmRpc3Bvc2VkPSExLCFpLmdldEJvb2woXCJIQVNfV0VCR0xcIikpdGhyb3cgbmV3IEVycm9yKFwiV2ViR0wgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGRldmljZVwiKTtpZihudWxsPT10KXt2YXIgZT1NdChpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpO3RoaXMuYmluYXJ5Q2FjaGU9KG49aS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKWluIGtzP2tzW25dOihrc1tuXT17fSxrc1tuXSksdGhpcy5ncGdwdT1uZXcgcGkoZSksdGhpcy5jYW52YXM9ZS5jYW52YXMsdGhpcy5ncGdwdUNyZWF0ZWRMb2NhbGx5PSEwfWVsc2UgdGhpcy5iaW5hcnlDYWNoZT17fSx0aGlzLmdwZ3B1Q3JlYXRlZExvY2FsbHk9ITEsdGhpcy5jYW52YXM9dC5nbC5jYW52YXM7dmFyIG47dGhpcy50ZXh0dXJlTWFuYWdlcj1uZXcgSGkodGhpcy5ncGdwdSksdGhpcy5udW1NQkJlZm9yZVdhcm5pbmc9bnVsbD09aS5nbG9iYWwuc2NyZWVuPzEwMjQ6aS5nbG9iYWwuc2NyZWVuLmhlaWdodCppLmdsb2JhbC5zY3JlZW4ud2lkdGgqd2luZG93LmRldmljZVBpeGVsUmF0aW8qU3MvMTAyNC8xMDI0LHRoaXMudGV4RGF0YT1uZXcgWnIodGhpcyxTdCl9cmV0dXJuIHQucHJvdG90eXBlLnJlZ2lzdGVyPWZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLnRleERhdGEuaGFzKHQpKXRocm93IG5ldyBFcnJvcihcIkRhdGEgYnVmZmVyIGlzIGFscmVhZHkgcmVnaXN0ZXJlZFwiKTt0aGlzLnRleERhdGEuc2V0KHQse3NoYXBlOmUsZHR5cGU6bn0pfSx0LnByb3RvdHlwZS5mcm9tUGl4ZWxzPWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09dCl0aHJvdyBuZXcgRXJyb3IoXCJwaXhlbHMgcGFzc2VkIHRvIHRmLmJyb3dzZXIuZnJvbVBpeGVscygpIGNhbiBub3QgYmUgbnVsbFwiKTt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgT2Zmc2NyZWVuQ2FudmFzJiZ0IGluc3RhbmNlb2YgT2Zmc2NyZWVuQ2FudmFzfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQmJnQgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCxyPXQuZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXksbz1cInVuZGVmaW5lZFwiIT10eXBlb2YgSW1hZ2VEYXRhJiZ0IGluc3RhbmNlb2YgSW1hZ2VEYXRhLGE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxWaWRlb0VsZW1lbnQmJnQgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50LHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQmJnQgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50LHU9YT9bdC52aWRlb1dpZHRoLHQudmlkZW9IZWlnaHRdOlt0LndpZHRoLHQuaGVpZ2h0XSxsPXVbMF0sYz11WzFdLGg9W2MsbF0scD1bYyxsLGVdO2lmKCEobnx8cnx8b3x8YXx8cykpdGhyb3cgbmV3IEVycm9yKFwicGl4ZWxzIHBhc3NlZCB0byB0Zi5icm93c2VyLmZyb21QaXhlbHMoKSBtdXN0IGJlIGVpdGhlciBhbiBIVE1MVmlkZW9FbGVtZW50LCBIVE1MSW1hZ2VFbGVtZW50LCBIVE1MQ2FudmFzRWxlbWVudCwgSW1hZ2VEYXRhIGluIGJyb3dzZXIsIG9yIE9mZnNjcmVlbkNhbnZhcywgSW1hZ2VEYXRhIGluIHdlYndvcmtlciBvciB7ZGF0YTogVWludDMyQXJyYXksIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfSwgYnV0IHdhcyBcIit0LmNvbnN0cnVjdG9yLm5hbWUpOyhzfHxhKSYmKG51bGw9PXRoaXMuZnJvbVBpeGVsczJEQ29udGV4dCYmKHRoaXMuZnJvbVBpeGVsczJEQ29udGV4dD1CdChpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpLmdldENvbnRleHQoXCIyZFwiKSksdGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0LmNhbnZhcy53aWR0aD1sLHRoaXMuZnJvbVBpeGVsczJEQ29udGV4dC5jYW52YXMuaGVpZ2h0PWMsdGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0LmRyYXdJbWFnZSh0LDAsMCxsLGMpLHQ9dGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0LmNhbnZhcyk7dmFyIGYsZCx2PXRoaXMubWFrZVRlbnNvckhhbmRsZShoLFwiaW50MzJcIik7aWYodGhpcy50ZXhEYXRhLmdldCh2LmRhdGFJZCkudXNhZ2U9VHQuUElYRUxTLHRoaXMuZ3BncHUudXBsb2FkUGl4ZWxEYXRhVG9UZXh0dXJlKHRoaXMuZ2V0VGV4dHVyZSh2LmRhdGFJZCksdCksaS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKSl7Zj1uZXcgcWEocCk7dmFyIG09dGhpcy5tYWtlUGFja2VkVGVuc29yKGYub3V0cHV0U2hhcGUsdi5kdHlwZSk7ZD10aGlzLmNvbXBpbGVBbmRSdW4oZixbdl0sbSl9ZWxzZSBmPW5ldyBIYShwKSxkPXRoaXMuY29tcGlsZUFuZFJ1bihmLFt2XSk7cmV0dXJuIHRoaXMuZGlzcG9zZURhdGEodi5kYXRhSWQpLGR9LHQucHJvdG90eXBlLm1ha2VUZW5zb3JIYW5kbGU9ZnVuY3Rpb24odCxlKXt2YXIgbj17fTtyZXR1cm4gdGhpcy5yZWdpc3RlcihuLHQsZSkse2RhdGFJZDpuLHNoYXBlOnQsZHR5cGU6ZX19LHQucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJNYXRoQmFja2VuZFdlYkdMLndyaXRlKCk6IHZhbHVlcyBjYW4gbm90IGJlIG51bGxcIik7aWYoaS5nZXRCb29sKFwiREVCVUdcIikpZm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07aWYoIUh0KHIpKXtpZihpLmdldEJvb2woXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9DQVBBQkxFXCIpKXRocm93IEVycm9yKFwiVGhlIHZhbHVlIFwiK3IrXCIgY2Fubm90IGJlIHJlcHJlc2VudGVkIHdpdGggeW91ciBjdXJyZW50IHNldHRpbmdzLiBDb25zaWRlciBlbmFibGluZyBmbG9hdDMyIHJlbmRlcmluZzogJ3RmLkVOVi5zZXQoJ1dFQkdMX1JFTkRFUl9GTE9BVDMyX0VOQUJMRUQnLCB0cnVlKTsnXCIpO3Rocm93IEVycm9yKFwiVGhlIHZhbHVlIFwiK3IrXCIgY2Fubm90IGJlIHJlcHJlc2VudGVkIG9uIHRoaXMgZGV2aWNlLlwiKX19dmFyIG89dGhpcy50ZXhEYXRhLmdldCh0KTtpZihcImNvbXBsZXg2NFwiPT09by5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgd3JpdGUgdG8gYSBjb21wbGV4NjQgZHR5cGUuIFBsZWFzZSB1c2UgdGYuY29tcGxleChyZWFsLCBpbWFnKS5cIik7dGhpcy5yZWxlYXNlR1BVRGF0YSh0KSxvLnVzYWdlPVR0LlVQTE9BRCxvLnZhbHVlcz1lfSx0LnByb3RvdHlwZS5yZWFkU3luYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnRleERhdGEuZ2V0KHQpLG49ZS52YWx1ZXMscj1lLmR0eXBlLG89ZS5jb21wbGV4VGVuc29ycyxhPWUuc2xpY2UsaT1lLnNoYXBlLHM9ZS5pc1BhY2tlZDtpZihudWxsIT1hKXt2YXIgdT12b2lkIDA7dT1zP25ldyBScyhpLHhzKTpuZXcgSmkoaSx4cyk7dmFyIGw9dGhpcy5jb21waWxlQW5kUnVuKHUsW3tkYXRhSWQ6dCxzaGFwZTppLGR0eXBlOnJ9XSksYz10aGlzLnJlYWRTeW5jKGwuZGF0YUlkKTtyZXR1cm4gbC5kaXNwb3NlKCksY31pZihudWxsIT1uKXJldHVybiB0aGlzLmNvbnZlcnRBbmRDYWNoZU9uQ1BVKHQpO2lmKFwic3RyaW5nXCI9PT1yKXJldHVybiBuO3ZhciBoLHAsZj1udWxsIT10aGlzLmFjdGl2ZVRpbWVyczsoZiYmKGg9JCgpKSxcImNvbXBsZXg2NFwiPT09cik/cD13byhvLnJlYWwuZGF0YVN5bmMoKSxvLmltYWcuZGF0YVN5bmMoKSk6cD10aGlzLmdldFZhbHVlc0Zyb21UZXh0dXJlKHQpO3JldHVybiBmJiYodGhpcy5kb3dubG9hZFdhaXRNcys9JCgpLWgpLHRoaXMuY29udmVydEFuZENhY2hlT25DUFUodCxwKX0sdC5wcm90b3R5cGUucmVhZD1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuLG8sYSxzLHUsbCxjLGgscCxmLGQsdixtLHkseCxiLHcsQyxFLFIsSTtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6aWYodGhpcy5wZW5kaW5nUmVhZC5oYXModCkpcmV0dXJuIGU9dGhpcy5wZW5kaW5nUmVhZC5nZXQodCksWzIsbmV3IFByb21pc2UoZnVuY3Rpb24odCl7cmV0dXJuIGUucHVzaCh0KX0pXTtpZihuPXRoaXMudGV4RGF0YS5nZXQodCksbz1uLnZhbHVlcyxhPW4uc2hhcGUscz1uLnNsaWNlLHU9bi5kdHlwZSxsPW4uY29tcGxleFRlbnNvcnMsYz1uLmlzUGFja2VkLG51bGwhPXMpcmV0dXJuIGg9dm9pZCAwLGg9Yz9uZXcgUnMoYSx4cyk6bmV3IEppKGEseHMpLHA9dGhpcy5jb21waWxlQW5kUnVuKGgsW3tkYXRhSWQ6dCxzaGFwZTphLGR0eXBlOnV9XSksZj10aGlzLnJlYWQocC5kYXRhSWQpLHAuZGlzcG9zZSgpLFsyLGZdO2lmKG51bGwhPW8pcmV0dXJuWzIsdGhpcy5jb252ZXJ0QW5kQ2FjaGVPbkNQVSh0KV07aWYoIWkuZ2V0Qm9vbChcIldFQkdMX0RPV05MT0FEX0ZMT0FUX0VOQUJMRURcIikmJjI9PT1pLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yLmRhdGEoKSB3aXRoIFdFQkdMX0RPV05MT0FEX0ZMT0FUX0VOQUJMRUQ9ZmFsc2UgYW5kIFdFQkdMX1ZFUlNJT049MiBub3QgeWV0IHN1cHBvcnRlZC5cIik7cmV0dXJuIGQ9bnVsbCxcImNvbXBsZXg2NFwiIT09dSYmaS5nZXQoXCJXRUJHTF9CVUZGRVJfU1VQUE9SVEVEXCIpJiYodj10aGlzLmRlY29kZSh0KSxtPXRoaXMudGV4RGF0YS5nZXQodi5kYXRhSWQpLGQ9KEk9dGhpcy5ncGdwdSkuY3JlYXRlQnVmZmVyRnJvbVRleHR1cmUuYXBwbHkoSSxbbS50ZXh0dXJlXS5jb25jYXQoTHQoYSkpKSksdGhpcy5wZW5kaW5nUmVhZC5zZXQodCxbXSksXCJjb21wbGV4NjRcIj09PXU/WzMsMl06WzQsdGhpcy5ncGdwdS5jcmVhdGVBbmRXYWl0Rm9yRmVuY2UoKV07Y2FzZSAxOnIuc2VudCgpLHIubGFiZWw9MjtjYXNlIDI6cmV0dXJuXCJjb21wbGV4NjRcIiE9PXU/WzMsNF06WzQsUHJvbWlzZS5hbGwoW2wucmVhbC5kYXRhKCksbC5pbWFnLmRhdGEoKV0pXTtjYXNlIDM6cmV0dXJuIHg9ci5zZW50KCksYj14WzBdLHc9eFsxXSx5PXdvKGIsdyksWzMsNV07Y2FzZSA0Om51bGw9PWQ/eT10aGlzLmdldFZhbHVlc0Zyb21UZXh0dXJlKHQpOihDPWcoYSkseT10aGlzLmdwZ3B1LmRvd25sb2FkRmxvYXQzMk1hdHJpeEZyb21CdWZmZXIoZCxDKSksci5sYWJlbD01O2Nhc2UgNTpyZXR1cm4gbnVsbCE9diYmdGhpcy5kaXNwb3NlRGF0YSh2LmRhdGFJZCksRT10aGlzLmNvbnZlcnRBbmRDYWNoZU9uQ1BVKHQseSksUj10aGlzLnBlbmRpbmdSZWFkLmdldCh0KSx0aGlzLnBlbmRpbmdSZWFkLmRlbGV0ZSh0KSxSLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQoRSl9KSx0aGlzLnBlbmRpbmdEaXNwb3NhbC5oYXModCkmJih0aGlzLnBlbmRpbmdEaXNwb3NhbC5kZWxldGUodCksdGhpcy5kaXNwb3NlRGF0YSh0KSksWzIsRV19fSl9KX0sdC5wcm90b3R5cGUuZ2V0VmFsdWVzRnJvbVRleHR1cmU9ZnVuY3Rpb24odCl7dmFyIGUsbj10aGlzLHI9dGhpcy50ZXhEYXRhLmdldCh0KSxvPXIuc2hhcGUsYT1yLmR0eXBlLHM9ci5pc1BhY2tlZCx1PWcobyk7aWYoaS5nZXRCb29sKFwiV0VCR0xfRE9XTkxPQURfRkxPQVRfRU5BQkxFRFwiKSl7dmFyIGw9dGhpcy5kZWNvZGUodCksYz10aGlzLnRleERhdGEuZ2V0KGwuZGF0YUlkKSxoPShlPXRoaXMuZ3BncHUpLmRvd25sb2FkTWF0cml4RnJvbVBhY2tlZFRleHR1cmUuYXBwbHkoZSxbYy50ZXh0dXJlXS5jb25jYXQoTHQobykpKS5zdWJhcnJheSgwLHUpO3JldHVybiB0aGlzLmRpc3Bvc2VEYXRhKGwuZGF0YUlkKSxofXZhciBwPWkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIikmJiEwPT09cyxmPXA/eGUobyk6byxkPXRoaXMubWFrZVRlbnNvckhhbmRsZShmLFwiZmxvYXQzMlwiKTtkLnNpemU9ZyhvKSx0aGlzLnRleERhdGEuZ2V0KGQuZGF0YUlkKS51c2FnZT1UdC5ET1dOTE9BRDt2YXIgdj1WZShmdW5jdGlvbigpe3ZhciBlPXA/bmV3IFBhKGYpOm5ldyBCYShmKTtyZXR1cm4gbi5jb21waWxlQW5kUnVuKGUsW3tzaGFwZTpmLGR0eXBlOmEsZGF0YUlkOnR9XSxkLG51bGwpfSksbT10aGlzLnRleERhdGEuZ2V0KHYuZGF0YUlkKSx5PXRoaXMuZ3BncHUuZG93bmxvYWRCeXRlRW5jb2RlZEZsb2F0TWF0cml4RnJvbU91dHB1dFRleHR1cmUobS50ZXh0dXJlLG0udGV4U2hhcGVbMF0sbS50ZXhTaGFwZVsxXSkuc3ViYXJyYXkoMCx1KTtyZXR1cm4gdGhpcy5kaXNwb3NlRGF0YShkLmRhdGFJZCkseX0sdC5wcm90b3R5cGUudGltZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuLG8sYSxpLHMsdTtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9dGhpcy5hY3RpdmVUaW1lcnMsbj1bXSxvPSExLG51bGw9PXRoaXMucHJvZ3JhbVRpbWVyc1N0YWNrPyh0aGlzLnByb2dyYW1UaW1lcnNTdGFjaz1uLG89ITApOnRoaXMuYWN0aXZlVGltZXJzLnB1c2gobiksdGhpcy5hY3RpdmVUaW1lcnM9bix0KCksYT1tKHRoaXMuYWN0aXZlVGltZXJzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5xdWVyeX0pKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPXR9KSxpPW0odGhpcy5hY3RpdmVUaW1lcnMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT10fSksdGhpcy5hY3RpdmVUaW1lcnM9ZSxvJiYodGhpcy5wcm9ncmFtVGltZXJzU3RhY2s9bnVsbCksWzQsUHJvbWlzZS5hbGwoYSldO2Nhc2UgMTpyZXR1cm4gcz1yLnNlbnQoKSx1PXt1cGxvYWRXYWl0TXM6dGhpcy51cGxvYWRXYWl0TXMsZG93bmxvYWRXYWl0TXM6dGhpcy5kb3dubG9hZFdhaXRNcyxrZXJuZWxNczpwKHMpLGdldEV4dHJhUHJvZmlsZUluZm86ZnVuY3Rpb24oKXtyZXR1cm4gcy5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm57bmFtZTppW2VdLG1zOnR9fSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWUrXCI6IFwiK3QubXN9KS5qb2luKFwiLCBcIil9LHdhbGxNczpudWxsfSx0aGlzLnVwbG9hZFdhaXRNcz0wLHRoaXMuZG93bmxvYWRXYWl0TXM9MCxbMix1XX19KX0pfSx0LnByb3RvdHlwZS5tZW1vcnk9ZnVuY3Rpb24oKXtyZXR1cm57dW5yZWxpYWJsZTohMSxudW1CeXRlc0luR1BVOnRoaXMubnVtQnl0ZXNJbkdQVX19LHQucHJvdG90eXBlLnN0YXJ0VGltZXI9ZnVuY3Rpb24oKXtyZXR1cm4gaS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKT4wP3RoaXMuZ3BncHUuYmVnaW5RdWVyeSgpOntzdGFydE1zOiQoKSxlbmRNczpudWxsfX0sdC5wcm90b3R5cGUuZW5kVGltZXI9ZnVuY3Rpb24odCl7cmV0dXJuIGkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIik+MD8odGhpcy5ncGdwdS5lbmRRdWVyeSgpLHQpOih0LmVuZE1zPSQoKSx0KX0sdC5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsZnVuY3Rpb24obil7cmV0dXJuIGkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIik+MD9bMix0aGlzLmdwZ3B1LndhaXRGb3JRdWVyeUFuZEdldFRpbWUodCldOlsyLChlPXQpLmVuZE1zLWUuc3RhcnRNc119KX0pfSx0LnByb3RvdHlwZS5kaXNwb3NlRGF0YT1mdW5jdGlvbih0KXtpZighdGhpcy5wZW5kaW5nRGlzcG9zYWwuaGFzKHQpKWlmKHRoaXMucGVuZGluZ1JlYWQuaGFzKHQpKXRoaXMucGVuZGluZ0Rpc3Bvc2FsLmFkZCh0KTtlbHNlIGlmKHRoaXMudGV4RGF0YS5oYXModCkpe3RoaXMucmVsZWFzZUdQVURhdGEodCk7dmFyIGU9dGhpcy50ZXhEYXRhLmdldCh0KS5jb21wbGV4VGVuc29ycztudWxsIT1lJiYoZS5yZWFsLmRpc3Bvc2UoKSxlLmltYWcuZGlzcG9zZSgpKSx0aGlzLnRleERhdGEuZGVsZXRlKHQpfX0sdC5wcm90b3R5cGUucmVsZWFzZUdQVURhdGE9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy50ZXhEYXRhLmdldCh0KSxuPWUudGV4dHVyZSxyPWUuZHR5cGUsbz1lLnRleFNoYXBlLGE9ZS51c2FnZSxpPWUuaXNQYWNrZWQscz1lLnNsaWNlLHU9cyYmcy5vcmlnRGF0YUlkfHx0LGw9dGhpcy5kYXRhUmVmQ291bnQuZ2V0KHUpO2w+MT90aGlzLmRhdGFSZWZDb3VudC5zZXQodSxsLTEpOih0aGlzLmRhdGFSZWZDb3VudC5kZWxldGUodSksbnVsbCE9biYmKHRoaXMubnVtQnl0ZXNJbkdQVS09dGhpcy5jb21wdXRlQnl0ZXMobyxyKSx0aGlzLnRleHR1cmVNYW5hZ2VyLnJlbGVhc2VUZXh0dXJlKG4sbyxhLGkpKSk7dmFyIGM9dGhpcy50ZXhEYXRhLmdldCh0KTtjLnRleHR1cmU9bnVsbCxjLnRleFNoYXBlPW51bGwsYy5pc1BhY2tlZD0hMSxjLnNsaWNlPW51bGx9LHQucHJvdG90eXBlLmdldFRleHR1cmU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudXBsb2FkVG9HUFUodCksdGhpcy50ZXhEYXRhLmdldCh0KS50ZXh0dXJlfSx0LnByb3RvdHlwZS5nZXREYXRhSW5mbz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50ZXhEYXRhLmdldCh0KX0sdC5wcm90b3R5cGUuZ2V0Q1BVQmFja2VuZD1mdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9DUFVfRk9SV0FSRFwiKT8obnVsbD09dGhpcy5jcHVCYWNrZW5kJiYodGhpcy5jcHVCYWNrZW5kPVN0LmZpbmRCYWNrZW5kKFwiY3B1XCIpKSx0aGlzLmNwdUJhY2tlbmQpOm51bGx9LHQucHJvdG90eXBlLnNob3VsZEV4ZWN1dGVPbkNQVT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIHZvaWQgMD09PWUmJihlPTEyOCksbnVsbCE9dGhpcy5nZXRDUFVCYWNrZW5kKCkmJnQuZXZlcnkoZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PW4udGV4RGF0YS5nZXQodC5kYXRhSWQpLnRleHR1cmUmJnQuc2l6ZTxlfSl9LHQucHJvdG90eXBlLmdldEdQR1BVQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdwZ3B1fSx0LnByb3RvdHlwZS5jb21wbGV4PWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tYWtlT3V0cHV0QXJyYXkodC5zaGFwZSxcImNvbXBsZXg2NFwiKTtyZXR1cm4gdGhpcy50ZXhEYXRhLmdldChuLmRhdGFJZCkuY29tcGxleFRlbnNvcnM9e3JlYWw6U3Qua2VlcCh0LmNsb25lKCkpLGltYWc6U3Qua2VlcChlLmNsb25lKCkpfSxufSx0LnByb3RvdHlwZS5yZWFsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKS5jb21wbGV4VGVuc29ycy5yZWFsLmNsb25lKCl9LHQucHJvdG90eXBlLmltYWc9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzLmltYWcuY2xvbmUoKX0sdC5wcm90b3R5cGUuc2xpY2U9ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5zbGljZSh0LGUsbik7aWYoMD09PWcobikpcmV0dXJuIGJuKFtdLG4sdC5kdHlwZSk7dmFyIHI9dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCkuaXNQYWNrZWQsbz16cih0LnNoYXBlLGUsbik7aWYocnx8IW8pe3ZhciBhPWkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiKT9uZXcgemkobik6bmV3IFVpKG4pLHM9YS5nZXRDdXN0b21TZXR1cEZ1bmMoZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0XSxudWxsLHMpfXJldHVybiB0aGlzLnVwbG9hZFRvR1BVKHQuZGF0YUlkKSx0aGlzLnNoYWxsb3dTbGljZSh0LGUsbil9LHQucHJvdG90eXBlLnNoYWxsb3dTbGljZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCksbz1jdC5tYWtlKG4se30sdC5kdHlwZSx0aGlzKSxhPXRoaXMudGV4RGF0YS5nZXQoby5kYXRhSWQpO09iamVjdC5hc3NpZ24oYSxyKSxhLnNoYXBlPW4sYS5kdHlwZT10LmR0eXBlO3ZhciBpPUdyKGUsdC5zdHJpZGVzKTtyLnNsaWNlJiYoaSs9ci5zbGljZS5mbGF0T2Zmc2V0KSxhLnNsaWNlPXtmbGF0T2Zmc2V0Omksb3JpZ0RhdGFJZDpyLnNsaWNlJiZyLnNsaWNlLm9yaWdEYXRhSWR8fHQuZGF0YUlkfTt2YXIgcz10aGlzLmRhdGFSZWZDb3VudC5nZXQoYS5zbGljZS5vcmlnRGF0YUlkKXx8MTtyZXR1cm4gdGhpcy5kYXRhUmVmQ291bnQuc2V0KGEuc2xpY2Uub3JpZ0RhdGFJZCxzKzEpLG99LHQucHJvdG90eXBlLnN0cmlkZWRTbGljZT1mdW5jdGlvbih0LGUsbixyKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuc3RyaWRlZFNsaWNlKHQsZSxuLHIpO3ZhciBvPVdyKGUsbixyKTtpZihvLnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10fSkpcmV0dXJuIGJuKFtdLG8pO3ZhciBhPW5ldyBHaShlLHIsbyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0XSl9LHQucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24odCxlKXt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0FSUkFZX09QRVJBVElPTlNcIik/bmV3IEJpKHQuc2hhcGUsZSk6bmV3IE1pKHQuc2hhcGUsZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSl9LHQucHJvdG90eXBlLmNvbmNhdD1mdW5jdGlvbih0LGUpe2lmKFwiY29tcGxleDY0XCI9PT10WzBdLmR0eXBlKXt2YXIgbj10Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4geW4odCl9KSxyPXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB4bih0KX0pO3JldHVybiBnbih0aGlzLmNvbmNhdChuLGUpLHRoaXMuY29uY2F0KHIsZSkpfWlmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKHQpKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuY29uY2F0KHQsZSk7aWYoMT09PXQubGVuZ3RoKXJldHVybiB0WzBdO2lmKHQubGVuZ3RoPmkuZ2V0TnVtYmVyKFwiV0VCR0xfTUFYX1RFWFRVUkVTX0lOX1NIQURFUlwiKSl7dmFyIG89TWF0aC5mbG9vcih0Lmxlbmd0aC8yKSxhPXRoaXMuY29uY2F0KHQuc2xpY2UoMCxvKSxlKSxzPXRoaXMuY29uY2F0KHQuc2xpY2UobyksZSk7cmV0dXJuIHRoaXMuY29uY2F0KFthLHNdLGUpfWlmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiKSYmdFswXS5yYW5rPjEpe3ZhciB1PW5ldyBnYSh0Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pLGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4odSx0KX12YXIgbD12bih0Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pLGUpLGM9dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuYXMyRCgtMSxnKHQuc2hhcGUuc2xpY2UoZSkpKX0pLGg9bmV3IG1hKGMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNoYXBlfSkpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oaCxjKS5yZXNoYXBlKGwpfSx0LnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLm5lZyh0KTtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkVW5hcnlPcCh0LGlzLHQuZHR5cGUpO3ZhciBlPW5ldyBKaSh0LnNoYXBlLGlzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuYmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89bj90LnNoYXBlWzJdOnQuc2hhcGVbMV0sYT1yP2Uuc2hhcGVbMV06ZS5zaGFwZVsyXSxpPW4/dC5zaGFwZVsxXTp0LnNoYXBlWzJdLHM9dC5zaGFwZVswXTtpZigoMT09PW98fDE9PT1hKSYmaT4xZTMpe24mJih0PXQudHJhbnNwb3NlKFswLDIsMV0pKSxyJiYoZT1lLnRyYW5zcG9zZShbMCwyLDFdKSk7dmFyIHU9MT09PWE/dDp0LmFzM0QocyxpLDEpLGw9MT09PWE/MjoxLGM9MT09PWE/ZS5hczNEKHMsMSxpKTplO3JldHVybiB0aGlzLm11bHRpcGx5KHUsYykuc3VtKGwsITApfXZhciBoPXh0KHQuZHR5cGUsZS5kdHlwZSkscD1uZXcgYmkodC5zaGFwZSxbcyxvLGFdLG4sciksZj10aGlzLm1ha2VQYWNrZWRUZW5zb3IocC5vdXRwdXRTaGFwZSxoKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHAsW3QsZV0sZil9LHQucHJvdG90eXBlLmZ1c2VkQmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCl7dmFyIGU9dC5hLG49dC5iLHI9dC50cmFuc3Bvc2VBLG89dC50cmFuc3Bvc2VCLGE9dC5iaWFzLGk9dC5hY3RpdmF0aW9uLHM9dC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzLHU9cj9lLnNoYXBlWzJdOmUuc2hhcGVbMV0sbD1vP24uc2hhcGVbMV06bi5zaGFwZVsyXSxjPWUuc2hhcGVbMF0saD14dChlLmR0eXBlLG4uZHR5cGUpLHA9bnVsbCE9YSxmPW51bGwhPXMsZD1pP05zKGksITApOm51bGwsdj1uZXcgYmkoZS5zaGFwZSxbYyx1LGxdLHIsbyxwLGQsZiksbT10aGlzLm1ha2VQYWNrZWRUZW5zb3Iodi5vdXRwdXRTaGFwZSxoKSxnPVtlLG5dO3JldHVybiBhJiZnLnB1c2goYSkscyYmZy5wdXNoKHMpLHRoaXMuY29tcGlsZUFuZFJ1bih2LGcsbSl9LHQucHJvdG90eXBlLm11bHRpcGx5PWZ1bmN0aW9uKHQsZSl7aWYoXCJjb21wbGV4NjRcIj09PXQuZHR5cGUpe3ZhciBuPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLHI9dGhpcy50ZXhEYXRhLmdldChlLmRhdGFJZCksbz1uZXcgYWEocmEsdC5zaGFwZSxlLnNoYXBlKSxhPW5ldyBhYShvYSx0LnNoYXBlLGUuc2hhcGUpLHM9W3RoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGUodCxuLmNvbXBsZXhUZW5zb3JzLnJlYWwpLHRoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGUodCxuLmNvbXBsZXhUZW5zb3JzLmltYWcpLHRoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGUoZSxyLmNvbXBsZXhUZW5zb3JzLnJlYWwpLHRoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGUoZSxyLmNvbXBsZXhUZW5zb3JzLmltYWcpXSx1PXRoaXMuY29tcGlsZUFuZFJ1bihvLHMpLGw9dGhpcy5jb21waWxlQW5kUnVuKGEscyksYz10aGlzLmNvbXBsZXgodSxsKTtyZXR1cm4gdS5kaXNwb3NlKCksbC5kaXNwb3NlKCksY31pZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5tdWx0aXBseSh0LGUpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLHVhLHQuZHR5cGUpO3ZhciBoPW5ldyBjYSh1YSx0LnNoYXBlLGUuc2hhcGUpLHA9dGhpcy5tYWtlT3V0cHV0QXJyYXkoaC5vdXRwdXRTaGFwZSx0LmR0eXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGgsW3QsZV0scCl9LHQucHJvdG90eXBlLmJhdGNoTm9ybWFsaXphdGlvbj1mdW5jdGlvbih0LGUsbixyLG8sYSl7dmFyIHM9W3QsZSxuXSx1PW51bGw7bnVsbCE9YSYmKHU9YS5zaGFwZSxzLnB1c2goYSkpO3ZhciBsPW51bGw7aWYobnVsbCE9byYmKGw9by5zaGFwZSxzLnB1c2gobykpLGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfTk9STUFMSVpBVElPTlwiKSl7dmFyIGM9bmV3IG5hKHQuc2hhcGUsZS5zaGFwZSxuLnNoYXBlLHUsbCxyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGMscyl9dmFyIGg9bmV3IGVhKHQuc2hhcGUsZS5zaGFwZSxuLnNoYXBlLHUsbCxyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGgscyl9LHQucHJvdG90eXBlLmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uNEQ9ZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT1pLmdldEJvb2woXCJXRUJHTF9QQUNLX05PUk1BTElaQVRJT05cIik/bmV3IGdpKHQuc2hhcGUsZSxuLHIsbyk6bmV3IHZpKHQuc2hhcGUsZSxuLHIsbyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0XSl9LHQucHJvdG90eXBlLkxSTkdyYWQ9ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dmFyIHM9bmV3IG1pKGUuc2hhcGUscixvLGEsaSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihzLFtlLG4sdF0pfSx0LnByb3RvdHlwZS50aWxlPWZ1bmN0aW9uKHQsZSl7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpe3ZhciBuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gWCh0KX0pO3JldHVybiBTbyh0cih0LnNoYXBlLHQuZHR5cGUsbiksZSl9dmFyIHI9bmV3IEtpKHQuc2hhcGUsZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSl9LHQucHJvdG90eXBlLnBhZD1mdW5jdGlvbih0LGUsbil7dmFyIHI9aS5nZXRCb29sKFwiV0VCR0xfUEFDS19BUlJBWV9PUEVSQVRJT05TXCIpP25ldyBJaSh0LnNoYXBlLGUsbik6bmV3IFJpKHQuc2hhcGUsZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3RdKX0sdC5wcm90b3R5cGUudHJhbnNwb3NlPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLnRyYW5zcG9zZSh0LGUpO3ZhciBuPWkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiKT9uZXcgWGkodC5zaGFwZSxlKTpuZXcgamkodC5zaGFwZSxlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3RdKX0sdC5wcm90b3R5cGUuZ2F0aGVyPWZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5nYXRoZXIodCxlLG4pO3ZhciByPW5ldyAkYSh0LnNoYXBlLGUuc2l6ZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSx0LnByb3RvdHlwZS5iYXRjaFRvU3BhY2VORD1mdW5jdGlvbih0LGUsbil7Zih0LnJhbms8PTQsZnVuY3Rpb24oKXtyZXR1cm5cImJhdGNoVG9TcGFjZU5EIGZvciByYW5rID4gNCB3aXRoIGEgV2ViR0wgYmFja2VuZCBub3QgaW1wbGVtZW50ZWQgeWV0XCJ9KTt2YXIgcj1lLnJlZHVjZShmdW5jdGlvbih0LGUpe3JldHVybiB0KmV9KSxvPVNyKHQuc2hhcGUsZSxyKSxhPUFyKG8ubGVuZ3RoLGUubGVuZ3RoKSxpPVRyKHQuc2hhcGUsZSxyKSxzPURyKG4sZS5sZW5ndGgpLHU9X3IoaSxuLGUubGVuZ3RoKTtyZXR1cm4gdC5yZXNoYXBlKG8pLnRyYW5zcG9zZShhKS5yZXNoYXBlKGkpLnNsaWNlKHMsdSl9LHQucHJvdG90eXBlLnNwYWNlVG9CYXRjaE5EPWZ1bmN0aW9uKHQsZSxuKXtmKHQucmFuazw9NCxmdW5jdGlvbigpe3JldHVyblwic3BhY2VUb0JhdGNoTkQgZm9yIHJhbmsgPiA0IHdpdGggYSBXZWJHTCBiYWNrZW5kIG5vdCBpbXBsZW1lbnRlZCB5ZXRcIn0pO3ZhciByPWUucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQqZX0pLG89W1swLDBdXTtvLnB1c2guYXBwbHkobyxuKTtmb3IodmFyIGE9MStlLmxlbmd0aDthPHQuc2hhcGUubGVuZ3RoOysrYSlvLnB1c2goWzAsMF0pO3ZhciBpPXQucGFkKG8pLHM9U3IoaS5zaGFwZSxlLHIsITEpLHU9QXIocy5sZW5ndGgsZS5sZW5ndGgsITEpLGw9VHIoaS5zaGFwZSxlLHIsITEpO3JldHVybiBpLnJlc2hhcGUocykudHJhbnNwb3NlKHUpLnJlc2hhcGUobCl9LHQucHJvdG90eXBlLnJlZHVjZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dC5zaGFwZVswXSxvPXQuc2hhcGVbMV0sYT1NcihvKSxpPW5ldyBTaSh7d2luZG93U2l6ZTphLGluU2l6ZTpvLGJhdGNoU2l6ZTpyfSxlKSxzPWkub3V0cHV0U2hhcGUsdT1zWzBdLGw9c1sxXSxjPXRoaXMubWFrZU91dHB1dEFycmF5KFt1LGxdLG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oaSxbdF0sYyksMT09PWMuc2hhcGVbMV0/Yzp0aGlzLnJlZHVjZShjLGUsbil9LHQucHJvdG90eXBlLmFyZ1JlZHVjZT1mdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49bnVsbCk7dmFyIHI9dC5zaGFwZVswXSxvPXQuc2hhcGVbMV07bnVsbCE9biYmKHI9bi5zaGFwZVswXSxvPW4uc2hhcGVbMV0pO3ZhciBhPU1yKG8pLGk9bmV3IE9vKHt3aW5kb3dTaXplOmEsaW5TaXplOm8sYmF0Y2hTaXplOnJ9LGUsbnVsbD09bikscz1pLm91dHB1dFNoYXBlLHU9c1swXSxsPXNbMV0sYz10aGlzLm1ha2VPdXRwdXRBcnJheShbdSxsXSxcImludDMyXCIpLGg9W3RdO3JldHVybiBudWxsIT1uJiZoLnB1c2gobiksdGhpcy5jb21waWxlQW5kUnVuKGksaCxjKSwxPT09Yy5zaGFwZVsxXT9jOnRoaXMuYXJnUmVkdWNlKHQsZSxjKX0sdC5wcm90b3R5cGUuYXJnUmVkdWNlUGFja2VkPWZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj1udWxsKTt2YXIgcj1udWxsIT1uP24uc2hhcGU6dC5zaGFwZSxvPU1yKHJbci5sZW5ndGgtMV0pLGE9bmV3IEpvKHIsbyxlLG51bGw9PW4pLGk9dGhpcy5tYWtlUGFja2VkVGVuc29yKGEub3V0cHV0U2hhcGUsXCJpbnQzMlwiKSxzPW51bGw9PW4/W3RdOlt0LG5dO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oYSxzLGkpLGkucmFuaz09PXQucmFuaz90aGlzLmFyZ1JlZHVjZVBhY2tlZCh0LGUsaSk6aX0sdC5wcm90b3R5cGUuc3VtPWZ1bmN0aW9uKHQsZSl7Y24oXCJzdW1cIixlLHQucmFuayk7dmFyIG49dW4odC5zaGFwZSxlKSxyPW5bMF0sbz1nKG5bMV0pLGE9dC5hczJEKC0xLG8pLGk9YnQodC5kdHlwZSk7cmV0dXJuIHRoaXMucmVkdWNlKGEsXCJzdW1cIixpKS5yZXNoYXBlKHIpfSx0LnByb3RvdHlwZS5wcm9kPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLnByb2QodCxlKTt2YXIgbj11bih0LnNoYXBlLGUpLHI9blswXSxvPWcoblsxXSksYT10LmFzMkQoLTEsbyksaT1idCh0LmR0eXBlKTtyZXR1cm4gdGhpcy5yZWR1Y2UoYSxcInByb2RcIixpKS5yZXNoYXBlKHIpfSx0LnByb3RvdHlwZS51bnNvcnRlZFNlZ21lbnRTdW09ZnVuY3Rpb24odCxlLG4pe3ZhciByPTAsbz1obihbcl0sdC5yYW5rKSxhPXQ7bnVsbCE9byYmKGE9dC50cmFuc3Bvc2Uobykscj1mbigxLHQucmFuaylbMF0pO3ZhciBpPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9W10sbz10Lmxlbmd0aCxhPTA7YTxvO2ErKylhIT09ZT9yLnB1c2godFthXSk6ci5wdXNoKG4pO3JldHVybiByfShhLnNoYXBlLHIsbikscz1nKFthLnNoYXBlW3JdXSksdT1hLmFzMkQoLTEscyksbD1idCh0LmR0eXBlKSxjPXRoaXMuc2VnT3BDb21wdXRlKHUsXCJ1bnNvcnRlZFNlZ21lbnRTdW1cIixlLGwsbikucmVzaGFwZShpKTtyZXR1cm4gbnVsbCE9byYmKGM9Yy50cmFuc3Bvc2UocG4obykpKSxjfSx0LnByb3RvdHlwZS5zZWdPcENvbXB1dGU9ZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10LnNoYXBlWzBdLGk9dC5zaGFwZVsxXSxzPWZ1bmN0aW9uKHQsZSl7dmFyIG4scj0hMTtmb3IodDw9RnI/KG49dCxyPSEwKTpuPVUodCxNYXRoLmZsb29yKE1hdGguc3FydCh0KSkpOyFyOyluPmV8fG49PT10P3I9ITA6bj1VKHQsbisxKTtyZXR1cm4gbn0oaSxvKSx1PW5ldyBMaSh7d2luZG93U2l6ZTpzLGluU2l6ZTppLGJhdGNoU2l6ZTphLG51bVNlZ21lbnRzOm99LGUpLGw9dS5vdXRwdXRTaGFwZSxjPWxbMF0saD1sWzFdLHA9dGhpcy5tYWtlT3V0cHV0QXJyYXkoW2MsaF0scik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bih1LFt0LG5dLHApLHAuc2hhcGVbMV09PT1vP3A6KG49T24oMCxvKS50aWxlKFtpL3NdKSx0aGlzLnNlZ09wQ29tcHV0ZShwLGUsbixyLG8pKX0sdC5wcm90b3R5cGUuYXJnTWluTWF4UmVkdWNlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1bZV07aWYoY24oXCJhcmdcIituLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSkscix0LnJhbmspLCFpLmdldEJvb2woXCJXRUJHTF9QQUNLX1JFRFVDRVwiKXx8dC5yYW5rPD0yKXt2YXIgbz11bih0LnNoYXBlLHIpLGE9b1swXSxzPWcob1sxXSksdT10LmFzMkQoLTEscyk7cmV0dXJuIHRoaXMuYXJnUmVkdWNlKHUsbikucmVzaGFwZShhKX1yZXR1cm4gdGhpcy5hcmdSZWR1Y2VQYWNrZWQodCxuKX0sdC5wcm90b3R5cGUuYXJnTWluPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXJnTWluTWF4UmVkdWNlKHQsZSxcIm1pblwiKX0sdC5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXJnTWluTWF4UmVkdWNlKHQsZSxcIm1heFwiKX0sdC5wcm90b3R5cGUuY3Vtc3VtPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKGUhPT10LnJhbmstMSl0aHJvdyBuZXcgRXJyb3IoXCJXZWJHTCBjdW1zdW0gc2hhZGVyIGV4cGVjdHMgYW4gaW5uZXItbW9zdCBheGlzPVwiKyh0LnJhbmstMSkrXCIgYnV0IGdvdCBheGlzPVwiK2UpO3ZhciBvPW5ldyBUYSh0LnNoYXBlLG4scik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihvLFt0XSl9LHQucHJvdG90eXBlLmVxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIHJldHVybiB2ZWM0KGVxdWFsKGEsIGIpKTtcXG5cIixcImJvb2xcIik7dmFyIG49bmV3IGNhKFwicmV0dXJuIGZsb2F0KGEgPT0gYik7XCIsdC5zaGFwZSxlLnNoYXBlKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsXCJib29sXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxyKX0sdC5wcm90b3R5cGUubm90RXF1YWw9ZnVuY3Rpb24odCxlKXtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQobm90RXF1YWwoYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgY2EoXCJyZXR1cm4gZmxvYXQoYSAhPSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLHIpfSx0LnByb3RvdHlwZS5sZXNzPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubGVzcyh0LGUpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICByZXR1cm4gdmVjNChsZXNzVGhhbihhLCBiKSk7XFxuXCIsXCJib29sXCIpO3ZhciBuPW5ldyBjYShcInJldHVybiBmbG9hdChhIDwgYik7XCIsdC5zaGFwZSxlLnNoYXBlKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsXCJib29sXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxyKX0sdC5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIHJldHVybiB2ZWM0KGxlc3NUaGFuRXF1YWwoYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgY2EoXCJyZXR1cm4gZmxvYXQoYSA8PSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLHIpfSx0LnByb3RvdHlwZS5ncmVhdGVyPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuZ3JlYXRlcih0LGUpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICByZXR1cm4gdmVjNChncmVhdGVyVGhhbihhLCBiKSk7XFxuXCIsXCJib29sXCIpO3ZhciBuPW5ldyBjYShcInJldHVybiBmbG9hdChhID4gYik7XCIsdC5zaGFwZSxlLnNoYXBlKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsXCJib29sXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxyKX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIHJldHVybiB2ZWM0KGdyZWF0ZXJUaGFuRXF1YWwoYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgY2EoXCJyZXR1cm4gZmxvYXQoYSA+PSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLHIpfSx0LnByb3RvdHlwZS5sb2dpY2FsTm90PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBKaSh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KCEoeCA+PSAxLjApKTtcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmxvZ2ljYWxBbmQ9ZnVuY3Rpb24odCxlKXtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQoXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChhLCB2ZWM0KDEuMCkpKSAqXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChiLCB2ZWM0KDEuMCkpKSk7XFxuXCIsXCJib29sXCIpO3ZhciBuPW5ldyBjYShcInJldHVybiBmbG9hdChhID49IDEuMCAmJiBiID49IDEuMCk7XCIsdC5zaGFwZSxlLnNoYXBlKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsXCJib29sXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxyKX0sdC5wcm90b3R5cGUubG9naWNhbE9yPWZ1bmN0aW9uKHQsZSl7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIHJldHVybiBtaW4oXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChhLCB2ZWM0KDEuMCkpKSArXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChiLCB2ZWM0KDEuMCkpKSxcXG4gICAgdmVjNCgxLjApKTtcXG5cIixcImJvb2xcIik7dmFyIG49bmV3IGNhKFwicmV0dXJuIGZsb2F0KGEgPj0gMS4wIHx8IGIgPj0gMS4wKTtcIix0LnNoYXBlLGUuc2hhcGUpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLHIpfSx0LnByb3RvdHlwZS5zZWxlY3Q9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBXaSh0LnJhbmssZS5zaGFwZSxlLnJhbmspLG89dGhpcy5tYWtlT3V0cHV0QXJyYXkoci5vdXRwdXRTaGFwZSx4dChlLmR0eXBlLG4uZHR5cGUpKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZSxuXSxvKX0sdC5wcm90b3R5cGUud2hlcmU9ZnVuY3Rpb24odCl7dG4oXCJ0Zi53aGVyZSgpIGluIHdlYmdsIGxvY2tzIHRoZSBVSSB0aHJlYWQuIENhbGwgdGYud2hlcmVBc3luYygpIGluc3RlYWRcIik7dmFyIGU9dC5kYXRhU3luYygpO3JldHVybiBUbyh0LnNoYXBlLGUpfSx0LnByb3RvdHlwZS50b3BrPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gQW8odC5kYXRhU3luYygpLHQuc2hhcGUsdC5kdHlwZSxlKX0sdC5wcm90b3R5cGUubWluPWZ1bmN0aW9uKHQsZSl7Y24oXCJtaW5cIixlLHQucmFuayk7dmFyIG49dW4odC5zaGFwZSxlKSxyPW5bMF0sbz1nKG5bMV0pLGE9dC5hczJEKC0xLG8pO3JldHVybiB0aGlzLnJlZHVjZShhLFwibWluXCIsYS5kdHlwZSkucmVzaGFwZShyKX0sdC5wcm90b3R5cGUubWluaW11bT1mdW5jdGlvbih0LGUpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0LGVdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLm1pbmltdW0odCxlKTt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBwYShcIlxcbiAgdmVjNCByZXN1bHQgPSB2ZWM0KG1pbihhLCBiKSk7XFxuICB2ZWM0IGlzTmFOID0gbWluKHZlYzQoaXNuYW4oYSkpICsgdmVjNChpc25hbihiKSksIHZlYzQoMS4wKSk7XFxuICBcXG4gIHJlc3VsdC5yID0gaXNOYU4uciA+IDAuID8gTkFOIDogcmVzdWx0LnI7XFxuICByZXN1bHQuZyA9IGlzTmFOLmcgPiAwLiA/IE5BTiA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc05hTi5iID4gMC4gPyBOQU4gOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA+IDAuID8gTkFOIDogcmVzdWx0LmE7XFxuXFxuICByZXR1cm4gcmVzdWx0O1xcblwiLHQuc2hhcGUsZS5zaGFwZSk6bmV3IGNhKFwiXFxuICBpZiAoaXNuYW4oYSkpIHJldHVybiBhO1xcbiAgaWYgKGlzbmFuKGIpKSByZXR1cm4gYjtcXG5cXG4gIHJldHVybiBtaW4oYSwgYik7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0pfSx0LnByb3RvdHlwZS5tb2Q9ZnVuY3Rpb24odCxlKXt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBwYShcIlxcbiAgdmVjNCByZXN1bHQgPSBtb2QoYSwgYik7XFxuICB2ZWM0IGlzTmFOID0gdmVjNChlcXVhbChiLCB2ZWM0KDAuMCkpKTtcXG4gIFxcbiAgcmVzdWx0LnIgPSBpc05hTi5yID4gMC4gPyBOQU4gOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA+IDAuID8gTkFOIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzTmFOLmIgPiAwLiA/IE5BTiA6IHJlc3VsdC5iO1xcbiAgcmVzdWx0LmEgPSBpc05hTi5hID4gMC4gPyBOQU4gOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTpuZXcgY2EoXCJpZiAoYiA9PSAwLjApIHJldHVybiBOQU47XFxuICByZXR1cm4gbW9kKGEsIGIpO1wiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdKX0sdC5wcm90b3R5cGUubWF4PWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLm1heCh0LGUpO2NuKFwibWF4XCIsZSx0LnJhbmspO3ZhciBuPXVuKHQuc2hhcGUsZSkscj1uWzBdLG89ZyhuWzFdKSxhPXQuYXMyRCgtMSxvKTtyZXR1cm4gdGhpcy5yZWR1Y2UoYSxcIm1heFwiLGEuZHR5cGUpLnJlc2hhcGUocil9LHQucHJvdG90eXBlLm1heGltdW09ZnVuY3Rpb24odCxlKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5tYXhpbXVtKHQsZSk7dmFyIG49aS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKT9uZXcgcGEoXCJcXG4gIHZlYzQgcmVzdWx0ID0gdmVjNChtYXgoYSwgYikpO1xcbiAgdmVjNCBpc05hTiA9IG1pbih2ZWM0KGlzbmFuKGEpKSArIHZlYzQoaXNuYW4oYikpLCB2ZWM0KDEuMCkpO1xcbiAgXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPiAwLiA/IE5BTiA6IHJlc3VsdC5yO1xcbiAgcmVzdWx0LmcgPSBpc05hTi5nID4gMC4gPyBOQU4gOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA+IDAuID8gTkFOIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPiAwLiA/IE5BTiA6IHJlc3VsdC5hO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBjYShcIlxcbiAgaWYgKGlzbmFuKGEpKSByZXR1cm4gYTtcXG4gIGlmIChpc25hbihiKSkgcmV0dXJuIGI7XFxuXFxuICByZXR1cm4gbWF4KGEsIGIpO1xcblwiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdKX0sdC5wcm90b3R5cGUuYWxsPWZ1bmN0aW9uKHQsZSl7Y24oXCJhbGxcIixlLHQucmFuayk7dmFyIG49dW4odC5zaGFwZSxlKSxyPW5bMF0sbz1nKG5bMV0pLGE9dC5hczJEKC0xLG8pO3JldHVybiB0aGlzLnJlZHVjZShhLFwiYWxsXCIsYS5kdHlwZSkucmVzaGFwZShyKX0sdC5wcm90b3R5cGUuYW55PWZ1bmN0aW9uKHQsZSl7Y24oXCJhbnlcIixlLHQucmFuayk7dmFyIG49dW4odC5zaGFwZSxlKSxyPW5bMF0sbz1nKG5bMV0pLGE9dC5hczJEKC0xLG8pO3JldHVybiB0aGlzLnJlZHVjZShhLFwiYW55XCIsYS5kdHlwZSkucmVzaGFwZShyKX0sdC5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2U9ZnVuY3Rpb24odCxlKXt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBwYShcInJldHVybiAoYSAtIGIpICogKGEgLSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBjYShcInJldHVybiAoYSAtIGIpICogKGEgLSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSl9LHQucHJvdG90eXBlLnJlYWxEaXZpZGU9ZnVuY3Rpb24odCxlKXtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXtyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIC8vIHZlYzQgb25lID0gdmVjNChlcXVhbChhLCBiKSk7XFxuICAvLyByZXR1cm4gb25lICsgKHZlYzQoMS4wKSAtIG9uZSkgKiBhIC8gYjtcXG4gIHZlYzQgcmVzdWx0ID0gYSAvIGI7XFxuICBpZihhLnggPT0gYi54KSB7XFxuICAgIHJlc3VsdC54ID0gMS47XFxuICB9XFxuICBpZihhLnkgPT0gYi55KSB7XFxuICAgIHJlc3VsdC55ID0gMS47XFxuICB9XFxuICBpZihhLnogPT0gYi56KSB7XFxuICAgIHJlc3VsdC56ID0gMS47XFxuICB9XFxuICBpZihhLncgPT0gYi53KSB7XFxuICAgIHJlc3VsdC53ID0gMS47XFxuICB9XFxuXFxuICByZXR1cm4gcmVzdWx0O1xcblwiLFwiZmxvYXQzMlwiLCEwKX12YXIgbj1uZXcgY2EoXCJcXG5pZiAoYSA9PSBiKSB7XFxuICByZXR1cm4gMS4wO1xcbn07XFxucmV0dXJuIGEgLyBiO1wiLHQuc2hhcGUsZS5zaGFwZSkscj10aGlzLm1ha2VPdXRwdXRBcnJheShuLm91dHB1dFNoYXBlLFwiZmxvYXQzMlwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0scil9LHQucHJvdG90eXBlLmZsb29yRGl2PWZ1bmN0aW9uKHQsZSl7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIGl2ZWM0IGlhID0gcm91bmQoYSk7XFxuICBpdmVjNCBpYiA9IHJvdW5kKGIpO1xcbiAgYnZlYzQgY29uZCA9IG5vdEVxdWFsKGliLCBpdmVjNCgwKSk7XFxuICBpdmVjNCByZXN1bHQgPSBpdmVjNCgwKTtcXG4gIHZlYzQgcyA9IHNpZ24oYSkgKiBzaWduKGIpO1xcblxcbiAgLy8gV2luZG93cyAoRDNEKSB3YW50cyBndWFyYW50ZWVkIG5vbi16ZXJvIGludCBkaXZpc2lvbiBhdCBjb21waWxlLXRpbWUuXFxuICBpZiAoY29uZFswXSkge1xcbiAgICByZXN1bHRbMF0gPSBpZGl2KGlhWzBdLCBpYlswXSwgc1swXSk7XFxuICB9XFxuICBpZiAoY29uZFsxXSkge1xcbiAgICByZXN1bHRbMV0gPSBpZGl2KGlhWzFdLCBpYlsxXSwgc1sxXSk7XFxuICB9XFxuICBpZiAoY29uZFsyXSkge1xcbiAgICByZXN1bHRbMl0gPSBpZGl2KGlhWzJdLCBpYlsyXSwgc1syXSk7XFxuICB9XFxuICBpZiAoY29uZFszXSkge1xcbiAgICByZXN1bHRbM10gPSBpZGl2KGlhWzNdLCBpYlszXSwgc1szXSk7XFxuICB9XFxuICByZXR1cm4gdmVjNChyZXN1bHQpO1xcblwiLFwiaW50MzJcIik7dmFyIG49bmV3IGNhKFwiXFxuICBmbG9hdCBzID0gc2lnbihhKSAqIHNpZ24oYik7XFxuICBpbnQgaWEgPSByb3VuZChhKTtcXG4gIGludCBpYiA9IHJvdW5kKGIpO1xcbiAgaWYgKGliICE9IDApIHtcXG4gICAgLy8gV2luZG93cyAoRDNEKSB3YW50cyBndWFyYW50ZWVkIG5vbi16ZXJvIGludCBkaXZpc2lvbiBhdCBjb21waWxlLXRpbWUuXFxuICAgIHJldHVybiBmbG9hdChpZGl2KGlhLCBpYiwgcykpO1xcbiAgfSBlbHNlIHtcXG4gICAgcmV0dXJuIE5BTjtcXG4gIH1cXG5cIix0LnNoYXBlLGUuc2hhcGUpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImludDMyXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxyKX0sdC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSl7aWYoXCJjb21wbGV4NjRcIj09PXQuZHR5cGUmJlwiY29tcGxleDY0XCI9PT1lLmR0eXBlKXJldHVybiB0aGlzLmNvbXBsZXhTZXBhcmFibGVCaW5hcnlPcCh0LGUsaWEpO2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0LGVdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmFkZCh0LGUpO3ZhciBuPXh0KHQuZHR5cGUsZS5kdHlwZSk7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsaWEsbik7dmFyIHI9bmV3IGNhKGlhLHQuc2hhcGUsZS5zaGFwZSksbz10aGlzLm1ha2VPdXRwdXRBcnJheShyLm91dHB1dFNoYXBlLG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSxvKX0sdC5wcm90b3R5cGUucGFja2VkVW5hcnlPcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IFJzKHQuc2hhcGUsZSksbz10aGlzLm1ha2VQYWNrZWRUZW5zb3Ioci5vdXRwdXRTaGFwZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3RdLG8pfSx0LnByb3RvdHlwZS5wYWNrZWRCaW5hcnlPcD1mdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PW8mJihvPSExKTt2YXIgYT1uZXcgcGEobix0LnNoYXBlLGUuc2hhcGUsbyksaT10aGlzLm1ha2VQYWNrZWRUZW5zb3IoYS5vdXRwdXRTaGFwZSxyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGEsW3QsZV0saSl9LHQucHJvdG90eXBlLmNvbXBsZXhTZXBhcmFibGVCaW5hcnlPcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcyxvPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLGE9dGhpcy50ZXhEYXRhLmdldChlLmRhdGFJZCksaT1bW28uY29tcGxleFRlbnNvcnMucmVhbCxhLmNvbXBsZXhUZW5zb3JzLnJlYWxdLFtvLmNvbXBsZXhUZW5zb3JzLmltYWcsYS5jb21wbGV4VGVuc29ycy5pbWFnXV0ubWFwKGZ1bmN0aW9uKG8pe3ZhciBhPW9bMF0saT1vWzFdLHM9ci5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZSh0LGEpLHU9ci5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZShlLGkpLGw9bmV3IGNhKG4sdC5zaGFwZSxlLnNoYXBlKSxjPXIubWFrZU91dHB1dEFycmF5KGwub3V0cHV0U2hhcGUseHQoYS5kdHlwZSxpLmR0eXBlKSk7cmV0dXJuIHIuY29tcGlsZUFuZFJ1bihsLFtzLHVdLGMpfSkscz1pWzBdLHU9aVsxXSxsPXRoaXMuY29tcGxleChzLHUpO3JldHVybiBzLmRpc3Bvc2UoKSx1LmRpc3Bvc2UoKSxsfSx0LnByb3RvdHlwZS5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZT1mdW5jdGlvbih0LGUpe3JldHVybntkYXRhSWQ6ZS5kYXRhSWQsZHR5cGU6ZS5kdHlwZSxzaGFwZTp0LnNoYXBlfX0sdC5wcm90b3R5cGUuYWRkTj1mdW5jdGlvbih0KXtpZigxPT09dC5sZW5ndGgpcmV0dXJuIHRbMF07aWYodC5sZW5ndGg+aS5nZXQoXCJXRUJHTF9NQVhfVEVYVFVSRVNfSU5fU0hBREVSXCIpKXt2YXIgZT1NYXRoLmZsb29yKHQubGVuZ3RoLzIpLG49dGhpcy5hZGROKHQuc2xpY2UoMCxlKSkscj10aGlzLmFkZE4odC5zbGljZShlKSk7cmV0dXJuIHRoaXMuYWRkTihbbixyXSl9dmFyIG89dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuZHR5cGV9KS5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4geHQodCxlKX0pLGE9dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KSxzPWkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIiksdT1zP25ldyBfbyh0WzBdLnNoYXBlLGEpOm5ldyBEbyh0WzBdLnNoYXBlLGEpLGw9cz90aGlzLm1ha2VQYWNrZWRUZW5zb3IodS5vdXRwdXRTaGFwZSxvKTp0aGlzLm1ha2VPdXRwdXRBcnJheSh1Lm91dHB1dFNoYXBlLG8pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4odSx0LGwpfSx0LnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe2lmKFwiY29tcGxleDY0XCI9PT10LmR0eXBlJiZcImNvbXBsZXg2NFwiPT09ZS5kdHlwZSlyZXR1cm4gdGhpcy5jb21wbGV4U2VwYXJhYmxlQmluYXJ5T3AodCxlLHNhKTtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5zdWJ0cmFjdCh0LGUpO3ZhciBuPXh0KHQuZHR5cGUsZS5kdHlwZSk7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsc2EsdC5kdHlwZSk7dmFyIHI9bmV3IGNhKHNhLHQuc2hhcGUsZS5zaGFwZSksbz10aGlzLm1ha2VPdXRwdXRBcnJheShyLm91dHB1dFNoYXBlLG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSxvKX0sdC5wcm90b3R5cGUucG93PWZ1bmN0aW9uKHQsZSl7dmFyIG49aS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSxyPW4/bmV3IHBhKFwiXFxuICAvLyBpc01vZFJvdW5kMSBoYXMgMSBmb3IgY29tcG9uZW50cyB3aXRoIHJvdW5kKG1vZChiLCAyLjApKSA9PSAxLCAwIG90aGVyd2lzZS5cXG4gIHZlYzQgaXNNb2RSb3VuZDEgPSB2ZWM0KGVxdWFsKHJvdW5kKG1vZChiLCAyLjApKSwgaXZlYzQoMSkpKTtcXG4gIHZlYzQgbXVsdGlwbGllciA9IHNpZ24oYSkgKiBpc01vZFJvdW5kMSArICh2ZWM0KDEuMCkgLSBpc01vZFJvdW5kMSk7XFxuICB2ZWM0IHJlc3VsdCA9IG11bHRpcGxpZXIgKiBwb3coYWJzKGEpLCBiKTtcXG5cXG4gIC8vIEVuc3VyZSB0aGF0IGFeMCA9IDEsIGluY2x1ZGluZyAwXjAgPSAxIGFzIHRoaXMgY29ycmVzcG9uZCB0byBURiBhbmQgSlNcXG4gIGJ2ZWM0IGlzRXhwWmVybyA9IGVxdWFsKGIsIHZlYzQoMC4wKSk7XFxuICByZXN1bHQuciA9IGlzRXhwWmVyby5yID8gMS4wIDogcmVzdWx0LnI7XFxuICByZXN1bHQuZyA9IGlzRXhwWmVyby5nID8gMS4wIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzRXhwWmVyby5iID8gMS4wIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzRXhwWmVyby5hID8gMS4wIDogcmVzdWx0LmE7XFxuXFxuICB2ZWM0IGlzTmFOID0gdmVjNChsZXNzVGhhbihhLCB2ZWM0KDAuMCkpKSAqIHZlYzQobGVzc1RoYW4oZmxvb3IoYiksIGIpKTtcXG4gIFxcbiAgcmVzdWx0LnIgPSBpc05hTi5yID4gMC4gPyBOQU4gOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA+IDAuID8gTkFOIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzTmFOLmIgPiAwLiA/IE5BTiA6IHJlc3VsdC5iO1xcbiAgcmVzdWx0LmEgPSBpc05hTi5hID4gMC4gPyBOQU4gOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTpuZXcgY2EoXCJcXG5pZihhIDwgMC4wICYmIGZsb29yKGIpIDwgYil7XFxuICByZXR1cm4gTkFOO1xcbn1cXG5pZiAoYiA9PSAwLjApIHtcXG4gIHJldHVybiAxLjA7XFxufVxcbnJldHVybiAocm91bmQobW9kKGIsIDIuMCkpICE9IDEpID9cXG4gICAgcG93KGFicyhhKSwgYikgOiBzaWduKGEpICogcG93KGFicyhhKSwgYik7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKSxvPXh0KHQuZHR5cGUsZS5kdHlwZSksYT1uP3RoaXMubWFrZVBhY2tlZFRlbnNvcihyLm91dHB1dFNoYXBlLG8pOnRoaXMubWFrZU91dHB1dEFycmF5KHIub3V0cHV0U2hhcGUsbyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGVdLGEpfSx0LnByb3RvdHlwZS5jZWlsPWZ1bmN0aW9uKHQpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5jZWlsKHQpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfVU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRVbmFyeU9wKHQsc3MsdC5kdHlwZSk7dmFyIGU9bmV3IEppKHQuc2hhcGUsc3MpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5mbG9vcj1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuZmxvb3IodCk7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCx1cyx0LmR0eXBlKTt2YXIgZT1uZXcgSmkodC5zaGFwZSx1cyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLnNpZ249ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEppKHQuc2hhcGUsXCJcXG4gIGlmIChpc25hbih4KSkgeyByZXR1cm4gMC4wOyB9XFxuICByZXR1cm4gc2lnbih4KTtcXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmlzTmFOPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBKaSh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KGlzbmFuKHgpKTtcIiksbj10aGlzLm1ha2VPdXRwdXRBcnJheShlLm91dHB1dFNoYXBlLFwiYm9vbFwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdLG4pfSx0LnByb3RvdHlwZS5pc0luZj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSxcInJldHVybiBmbG9hdChpc2luZih4KSk7XCIpLG49dGhpcy5tYWtlT3V0cHV0QXJyYXkoZS5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSxuKX0sdC5wcm90b3R5cGUuaXNGaW5pdGU9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEppKHQuc2hhcGUsXCJyZXR1cm4gZmxvYXQoIWlzbmFuKHgpICYmICFpc2luZih4KSk7XCIpLG49dGhpcy5tYWtlT3V0cHV0QXJyYXkoZS5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSxuKX0sdC5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEppKHQuc2hhcGUsXCJcXG4gIC8vIE9wZW5HTCBFUyBkb2VzIG5vdCBzdXBwb3J0IHJvdW5kIGZ1bmN0aW9uLlxcbiAgLy8gVGhlIGFsZ29yaXRobSBpcyBiYXNlZCBvbiBiYW5rZXIncyByb3VuZGluZy5cXG4gIGZsb2F0IGJhc2UgPSBmbG9vcih4KTtcXG4gIGlmICgoeCAtIGJhc2UpIDwgMC41KSB7XFxuICAgIHJldHVybiBmbG9vcih4KTtcXG4gIH0gZWxzZSBpZiAoKHggLSBiYXNlKSA+IDAuNSkge1xcbiAgICByZXR1cm4gY2VpbCh4KTtcXG4gIH0gZWxzZSB7XFxuICAgIGlmIChtb2QoYmFzZSwgMi4wKSA9PSAwLjApIHtcXG4gICAgICByZXR1cm4gYmFzZTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICByZXR1cm4gYmFzZSArIDEuMDtcXG4gICAgfVxcbiAgfVxcblwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuZXhwPWZ1bmN0aW9uKHQpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5leHAodCk7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxscyx0LmR0eXBlKTt2YXIgZT1uZXcgSmkodC5zaGFwZSxscyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmV4cG0xPWZ1bmN0aW9uKHQpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5leHBtMSh0KTtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkVW5hcnlPcCh0LGNzLHQuZHR5cGUpO3ZhciBlPW5ldyBKaSh0LnNoYXBlLGNzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUubG9nPWZ1bmN0aW9uKHQpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5sb2codCk7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxcIlxcbiAgdmVjNCByZXN1bHQgPSBsb2coeCk7XFxuICB2ZWM0IGlzTmFOID0gdmVjNChsZXNzVGhhbih4LCB2ZWM0KDAuMCkpKTtcXG4gIHJlc3VsdC5yID0gaXNOYU4uciA9PSAxLjAgPyBOQU4gOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA9PSAxLjAgPyBOQU4gOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA9PSAxLjAgPyBOQU4gOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA9PSAxLjAgPyBOQU4gOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsdC5kdHlwZSk7dmFyIGU9bmV3IEppKHQuc2hhcGUsXCJpZiAoeCA8IDAuMCkgcmV0dXJuIE5BTjtcXG4gIHJldHVybiBsb2coeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5sb2cxcD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSxcInJldHVybiBsb2coMS4wICsgeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5zcXJ0PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBKaSh0LnNoYXBlLFwicmV0dXJuIHNxcnQoeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5yc3FydD1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQucnNxcnQodCk7dmFyIGU9bmV3IEppKHQuc2hhcGUsXCJyZXR1cm4gaW52ZXJzZXNxcnQoeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5zcXVhcmU9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEppKHQuc2hhcGUsXCJyZXR1cm4geCAqIHg7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5yZWNpcHJvY2FsPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBKaSh0LnNoYXBlLFwicmV0dXJuIDEuMCAvIHg7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5yZWx1PWZ1bmN0aW9uKHQpe3ZhciBlO3JldHVybiBlPWkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIik/bmV3IFJzKHQuc2hhcGUsd3MpOm5ldyBKaSh0LnNoYXBlLG5zKSx0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5yZWx1Nj1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gZT1pLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpP25ldyBScyh0LnNoYXBlLENzKTpuZXcgSmkodC5zaGFwZSxycyksdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUucHJlbHU9ZnVuY3Rpb24odCxlKXt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBwYShoYSx0LnNoYXBlLGUuc2hhcGUpOm5ldyBjYShsYSx0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSl9LHQucHJvdG90eXBlLmVsdT1mdW5jdGlvbih0KXtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkVW5hcnlPcCh0LEVzLHQuZHR5cGUpO3ZhciBlPW5ldyBKaSh0LnNoYXBlLG9zKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuZWx1RGVyPWZ1bmN0aW9uKHQsZSl7dmFyIG49aS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKT9uZXcgcGEoXCJcXG4gIHZlYzQgYkdURVplcm8gPSB2ZWM0KGdyZWF0ZXJUaGFuRXF1YWwoYiwgdmVjNCgwLikpKTtcXG4gIHJldHVybiAoYkdURVplcm8gKiBhKSArICgodmVjNCgxLjApIC0gYkdURVplcm8pICogKGEgKiAoYiArIHZlYzQoMS4wKSkpKTtcXG5cIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBjYShcInJldHVybiAoYiA+PSAxLjApID8gYSA6IGEgKiAoYiArIDEuMCk7XCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0pfSx0LnByb3RvdHlwZS5zZWx1PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBKaSh0LnNoYXBlLGFzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuaW50PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBKaSh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KGludCh4KSk7XCIpLG49dGhpcy5tYWtlT3V0cHV0QXJyYXkoZS5vdXRwdXRTaGFwZSxcImludDMyXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0sbil9LHQucHJvdG90eXBlLmNsaXA9ZnVuY3Rpb24odCxlLG4pe3ZhciByLG89KHI9aS5nZXRCb29sKFwiV0VCR0xfUEFDS19DTElQXCIpP25ldyBkYSh0LnNoYXBlKTpuZXcgZmEodC5zaGFwZSkpLmdldEN1c3RvbVNldHVwRnVuYyhlLG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdF0sbnVsbCxvKX0sdC5wcm90b3R5cGUuYWJzPWZ1bmN0aW9uKHQpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5hYnModCk7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxlcyx0LmR0eXBlKTt2YXIgZT1uZXcgSmkodC5zaGFwZSxlcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmNvbXBsZXhBYnM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCksbj1uZXcgdmEodC5zaGFwZSkscj1bdGhpcy5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZSh0LGUuY29tcGxleFRlbnNvcnMucmVhbCksdGhpcy5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZSh0LGUuY29tcGxleFRlbnNvcnMuaW1hZyldO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixyKX0sdC5wcm90b3R5cGUuc2lnbW9pZD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSxcInJldHVybiAxLjAgLyAoMS4wICsgZXhwKC0xLjAgKiB4KSk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5zb2Z0cGx1cz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSxcIlxcbiAgZmxvYXQgZXBzaWxvbiA9IDEuMTkyMDkyODk1NTA3ODEyNWUtNztcXG4gIGZsb2F0IHRocmVzaG9sZCA9IGxvZyhlcHNpbG9uKSArIDIuMDtcXG5cXG4gIGJvb2wgdG9vX2xhcmdlID0geCA+IC10aHJlc2hvbGQ7XFxuICBib29sIHRvb19zbWFsbCA9IHggPCB0aHJlc2hvbGQ7XFxuXFxuICBmbG9hdCByZXN1bHQ7XFxuICBmbG9hdCBleHBfeCA9IGV4cCh4KTtcXG5cXG4gIGlmICh0b29fbGFyZ2Upe1xcbiAgICByZXN1bHQgPSB4O1xcbiAgfVxcbiAgZWxzZSBpZiAodG9vX3NtYWxsKXtcXG4gICAgcmVzdWx0ID0gZXhwX3g7XFxuICB9XFxuICBlbHNle1xcbiAgICByZXN1bHQgPSBsb2coZXhwX3ggKyAxLjApO1xcbiAgfVxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLnNpbj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSxocyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmNvcz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSxwcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLnRhbj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSxcInJldHVybiB0YW4oeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5hc2luPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBKaSh0LnNoYXBlLGZzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuYWNvcz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSxkcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmF0YW49ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEppKHQuc2hhcGUsdnMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5hdGFuMj1mdW5jdGlvbih0LGUpe3ZhciBuPWkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIik/bmV3IHBhKFwiXFxuICB2ZWM0IHJlc3VsdCA9IGF0YW4oYSwgYik7XFxuICB2ZWM0IGlzTmFOID0gbWluKHZlYzQoaXNuYW4oYSkpICsgdmVjNChpc25hbihiKSksIHZlYzQoMS4wKSk7XFxuICBcXG4gIHJlc3VsdC5yID0gaXNOYU4uciA+IDAuID8gTkFOIDogcmVzdWx0LnI7XFxuICByZXN1bHQuZyA9IGlzTmFOLmcgPiAwLiA/IE5BTiA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc05hTi5iID4gMC4gPyBOQU4gOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA+IDAuID8gTkFOIDogcmVzdWx0LmE7XFxuXFxuICByZXR1cm4gcmVzdWx0O1xcblwiLHQuc2hhcGUsZS5zaGFwZSk6bmV3IGNhKFwiXFxuICBpZiAoaXNuYW4oYSkpIHJldHVybiBhO1xcbiAgaWYgKGlzbmFuKGIpKSByZXR1cm4gYjtcXG5cXG4gIHJldHVybiBhdGFuKGEsIGIpO1xcblwiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdKX0sdC5wcm90b3R5cGUuc2luaD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSxcIlxcbiAgZmxvYXQgZTJ4ID0gZXhwKHgpO1xcbiAgcmV0dXJuIChlMnggLSAxLjAgLyBlMngpIC8gMi4wO1xcblwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuY29zaD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSxcIlxcbiAgZmxvYXQgZTJ4ID0gZXhwKC14KTtcXG4gIHJldHVybiAoZTJ4ICsgMS4wIC8gZTJ4KSAvIDIuMDtcXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLnRhbmg9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEppKHQuc2hhcGUsXCJcXG4gIGZsb2F0IGUyeCA9IGV4cCgtMi4wICogYWJzKHgpKTtcXG4gIHJldHVybiBzaWduKHgpICogKDEuMCAtIGUyeCkgLyAoMS4wICsgZTJ4KTtcXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmFzaW5oPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBKaSh0LnNoYXBlLG1zKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuYWNvc2g9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IEppKHQuc2hhcGUsZ3MpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5hdGFuaD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSx5cyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmVyZj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgSmkodC5zaGFwZSwnXFxuICAvLyBFcnJvciBmdW5jdGlvbiBpcyBjYWxjdWxhdGVkIGFwcHJveGltYXRlbHkgd2l0aCBlbGVtZW50YXJ5IGZ1bmN0aW9uLlxcbiAgLy8gU2VlIFwiSGFuZGJvb2sgb2YgTWF0aGVtYXRpY2FsIEZ1bmN0aW9ucyB3aXRoIEZvcm11bGFzLFxcbiAgLy8gR3JhcGhzLCBhbmQgTWF0aGVtYXRpY2FsIFRhYmxlc1wiLCBBYnJhbW93aXR6IGFuZCBTdGVndW4uXFxuICBmbG9hdCBwID0gMC4zMjc1OTExO1xcbiAgZmxvYXQgYTEgPSAwLjI1NDgyOTU5MjtcXG4gIGZsb2F0IGEyID0gLTAuMjg0NDk2NzM2O1xcbiAgZmxvYXQgYTMgPSAxLjQyMTQxMzc0MTtcXG4gIGZsb2F0IGE0ID0gLTEuNDUzMTUyMDI3O1xcbiAgZmxvYXQgYTUgPSAxLjA2MTQwNTQyOTtcXG5cXG4gIGZsb2F0IHNpZ24gPSBzaWduKHgpO1xcbiAgeCA9IGFicyh4KTtcXG4gIGZsb2F0IHQgPSAxLjAgLyAoMS4wICsgcCAqIHgpO1xcbiAgcmV0dXJuIHNpZ24gKiAoMS4wIC0gKCgoKChhNSp0ICsgYTQpKnQpICsgYTMpKnQgKyBhMikqdCArIGExKSp0KmV4cCgteCp4KSk7XFxuJyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLnN0ZXA9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgSmkodC5zaGFwZSxmdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MCksWmkrXCJcXG4gICAgcmV0dXJuIHggPiAwLjAgPyAxLjAgOiBmbG9hdChcIit0K1wiKTtcXG4gIFwifShlKSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSl9LHQucHJvdG90eXBlLmNvbnYyZEJ5TWF0TXVsPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2YXIgcz10LnNoYXBlLHU9dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCksbD1uLmluQ2hhbm5lbHMsYz1zWzBdKnNbMV0qc1syXSxoPW4ub3V0Q2hhbm5lbHMscD1cImNoYW5uZWxzTGFzdFwiPT09bi5kYXRhRm9ybWF0LGQ9KDE9PT1jfHwxPT09aCkmJmw+MWUzLHY9c1syXSUyIT0wJiYhIXUuaXNQYWNrZWQ7aWYoZHx8IWkuZ2V0Qm9vbChcIldFQkdMX0xBWklMWV9VTlBBQ0tcIil8fCFpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpfHwhdil7dmFyIG09cD9zWzBdKnNbMV0qc1syXTpzWzBdKnNbMl0qc1szXSxnPXRoaXMucmVzaGFwZSh0LFsxLG0sbi5pbkNoYW5uZWxzXSkseT10aGlzLnJlc2hhcGUoZSxbMSxuLmluQ2hhbm5lbHMsbi5vdXRDaGFubmVsc10pO3JldHVybiB0aGlzLnJlc2hhcGUodGhpcy5mdXNlZEJhdGNoTWF0TXVsKHthOmcsYjp5LHRyYW5zcG9zZUE6ITEsdHJhbnNwb3NlQjohMSxiaWFzOnIsYWN0aXZhdGlvbjpvLHByZWx1QWN0aXZhdGlvbldlaWdodHM6YX0pLG4ub3V0U2hhcGUpfXZhciB4PXA/c1swXSpzWzFdKihzWzJdKzEpOnNbMF0qc1syXSooc1szXSsxKSxiPWN0Lm1ha2UoWzEseCxuLmluQ2hhbm5lbHNdLHtkYXRhSWQ6dC5kYXRhSWR9LHQuZHR5cGUsdGhpcyksdz11LnNoYXBlO3Uuc2hhcGU9dS5zaGFwZS5zbGljZSgpLHUuc2hhcGVbdS5zaGFwZS5sZW5ndGgtMl0rKyxmKENlKHUuc2hhcGUsYi5zaGFwZSksZnVuY3Rpb24oKXtyZXR1cm5cInBhY2tlZCByZXNoYXBlIFwiK3Uuc2hhcGUrXCIgdG8gXCIrYi5zaGFwZStcIiBpc24ndCBmcmVlXCJ9KTt2YXIgQz10aGlzLnJlc2hhcGUoZSxbMSxuLmluQ2hhbm5lbHMsbi5vdXRDaGFubmVsc10pLEU9dGhpcy5mdXNlZEJhdGNoTWF0TXVsKHthOmIsYjpDLHRyYW5zcG9zZUE6ITEsdHJhbnNwb3NlQjohMSxiaWFzOnIsYWN0aXZhdGlvbjpvLHByZWx1QWN0aXZhdGlvbldlaWdodHM6YX0pLFI9dGhpcy50ZXhEYXRhLmdldChFLmRhdGFJZCk7cmV0dXJuIGYoUi5pc1BhY2tlZCxmdW5jdGlvbigpe3JldHVyblwiYmF0Y2hNYXRNdWwgcmVzdWx0IGlzIGV4cGVjdGVkIHRvIGJlIHBhY2tlZFwifSksdS5zaGFwZT13LFIuc2hhcGU9bi5vdXRTaGFwZSxjdC5tYWtlKG4ub3V0U2hhcGUse2RhdGFJZDpFLmRhdGFJZH0sRS5kdHlwZSx0aGlzKX0sdC5wcm90b3R5cGUuY29udjJkV2l0aEltMlJvdz1mdW5jdGlvbih0LGUsbixyLG8sYSl7dmFyIGk9bi5maWx0ZXJXaWR0aCxzPW4uZmlsdGVySGVpZ2h0LHU9bi5pbkNoYW5uZWxzLGw9bi5vdXRXaWR0aCxjPW4ub3V0SGVpZ2h0LGg9XCJjaGFubmVsc0xhc3RcIj09PW4uZGF0YUZvcm1hdCxwPWkqcyp1LGY9YypsLGQ9W3AsZl0sdj10LnNxdWVlemUoWzBdKSxtPWUucmVzaGFwZShbMSxwLC0xXSksZz1uZXcgZGkoZCx2LnNoYXBlLG4pLHk9dGhpcy5jb21waWxlQW5kUnVuKGcsW3ZdKS5yZXNoYXBlKFsxLGRbMF0sZFsxXV0pLHg9bnVsbCE9cixiPW51bGwhPWEsdz1vP05zKG8sITApOm51bGwsQz1uZXcgYmkoeS5zaGFwZSxbMSxmLG4ub3V0Q2hhbm5lbHNdLCEwLCExLHgsdyxiKSxFPVt5LG1dO3ImJkUucHVzaChyKSxiJiZFLnB1c2goYSk7dmFyIFI9dGhpcy5jb21waWxlQW5kUnVuKEMsRSk7cmV0dXJuIGg/Ui5yZXNoYXBlKFsxLGMsbCxuLm91dENoYW5uZWxzXSk6Ui5yZXNoYXBlKFsxLG4ub3V0Q2hhbm5lbHMsYyxsXSl9LHQucHJvdG90eXBlLmZ1c2VkQ29udjJkPWZ1bmN0aW9uKHQpe3ZhciBlPXQuaW5wdXQsbj10LmZpbHRlcixyPXQuY29udkluZm8sbz10LmJpYXMsYT10LmFjdGl2YXRpb24scz10LnByZWx1QWN0aXZhdGlvbldlaWdodHM7aWYoMT09PXIuZmlsdGVySGVpZ2h0JiYxPT09ci5maWx0ZXJXaWR0aCYmMT09PXIuZGlsYXRpb25IZWlnaHQmJjE9PT1yLmRpbGF0aW9uV2lkdGgmJjE9PT1yLnN0cmlkZUhlaWdodCYmMT09PXIuc3RyaWRlV2lkdGgmJihcIlNBTUVcIj09PXIucGFkSW5mby50eXBlfHxcIlZBTElEXCI9PT1yLnBhZEluZm8udHlwZSkpcmV0dXJuIHRoaXMuY29udjJkQnlNYXRNdWwoZSxuLHIsbyxhLHMpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX0NPTlZfSU0yQ09MXCIpJiYxPT09ZS5zaGFwZVswXSlyZXR1cm4gdGhpcy5jb252MmRXaXRoSW0yUm93KGUsbixyLG8sYSxzKTt2YXIgdT1udWxsIT1vLGw9bnVsbCE9cyxjPWE/TnMoYSwhMSk6bnVsbCxoPW5ldyBJYShyLHUsYyxsKSxwPVtlLG5dO3JldHVybiBvJiZwLnB1c2gobykscyYmcC5wdXNoKHMpLHRoaXMuY29tcGlsZUFuZFJ1bihoLHApfSx0LnByb3RvdHlwZS5jb252MmQ9ZnVuY3Rpb24odCxlLG4pe2lmKDE9PT1uLmZpbHRlckhlaWdodCYmMT09PW4uZmlsdGVyV2lkdGgmJjE9PT1uLmRpbGF0aW9uSGVpZ2h0JiYxPT09bi5kaWxhdGlvbldpZHRoJiYxPT09bi5zdHJpZGVIZWlnaHQmJjE9PT1uLnN0cmlkZVdpZHRoJiYoXCJTQU1FXCI9PT1uLnBhZEluZm8udHlwZXx8XCJWQUxJRFwiPT09bi5wYWRJbmZvLnR5cGUpKXJldHVybiB0aGlzLmNvbnYyZEJ5TWF0TXVsKHQsZSxuKTtpZihpLmdldEJvb2woXCJXRUJHTF9DT05WX0lNMkNPTFwiKSYmMT09PXQuc2hhcGVbMF0pcmV0dXJuIHRoaXMuY29udjJkV2l0aEltMlJvdyh0LGUsbik7dmFyIHI9bmV3IElhKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSl9LHQucHJvdG90eXBlLmNvbnYyZERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uZXcgYmEobik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGVdKX0sdC5wcm90b3R5cGUuY29udjJkRGVyRmlsdGVyPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uZXcgeGEobik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGVdKX0sdC5wcm90b3R5cGUuZnVzZWREZXB0aHdpc2VDb252MkQ9ZnVuY3Rpb24odCl7dmFyIGUsbj10LmlucHV0LHI9dC5maWx0ZXIsbz10LmNvbnZJbmZvLGE9dC5iaWFzLHM9dC5hY3RpdmF0aW9uLHU9dC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzLGw9aS5nZXRCb29sKFwiV0VCR0xfUEFDS19ERVBUSFdJU0VDT05WXCIpJiZvLnN0cmlkZVdpZHRoPD0yJiZvLm91dENoYW5uZWxzL28uaW5DaGFubmVscz09MSxjPXM/TnMocyxsKTpudWxsLGg9W24scl0scD1udWxsIT1hLGY9bnVsbCE9dTtyZXR1cm4gcCYmaC5wdXNoKGEpLGYmJmgucHVzaCh1KSxsPyhlPW5ldyBTYShvLHAsYyxmKSx0aGlzLmNvbXBpbGVBbmRSdW4oZSxoLHRoaXMubWFrZVBhY2tlZFRlbnNvcihvLm91dFNoYXBlLG4uZHR5cGUpKSk6KGU9bmV3IE5hKG8scCxjLGYpLHRoaXMuY29tcGlsZUFuZFJ1bihlLGgpKX0sdC5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJEPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcjtyZXR1cm4gaS5nZXRCb29sKFwiV0VCR0xfUEFDS19ERVBUSFdJU0VDT05WXCIpJiZuLnN0cmlkZVdpZHRoPD0yJiZuLm91dENoYW5uZWxzL24uaW5DaGFubmVscz09MT8ocj1uZXcgU2EobiksdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0sdGhpcy5tYWtlUGFja2VkVGVuc29yKG4ub3V0U2hhcGUsdC5kdHlwZSkpKToocj1uZXcgTmEobiksdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pKX0sdC5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJERGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBSYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSx0LnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkREZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBFYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSx0LnByb3RvdHlwZS5jb252M2Q9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBrYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSx0LnByb3RvdHlwZS5jb252M2REZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IENhKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSl9LHQucHJvdG90eXBlLmNvbnYzZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IHdhKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSl9LHQucHJvdG90eXBlLm1heFBvb2w9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcga2koZSxcIm1heFwiLCExKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsdC5kdHlwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSxyKX0sdC5wcm90b3R5cGUuYXZnUG9vbD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBraShlLFwiYXZnXCIsITEpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImZsb2F0MzJcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSxyKX0sdC5wcm90b3R5cGUubWF4UG9vbEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW5ldyBraShyLFwibWF4XCIsITApLGE9dGhpcy5jb21waWxlQW5kUnVuKG8sW2VdKSxpPW5ldyB5aShyKSxzPXRoaXMubWFrZU91dHB1dEFycmF5KGkub3V0cHV0U2hhcGUsZS5kdHlwZSksdT10aGlzLmNvbXBpbGVBbmRSdW4oaSxbdCxhXSxzKTtyZXR1cm4gYS5kaXNwb3NlKCksdX0sdC5wcm90b3R5cGUuYXZnUG9vbEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uZXcgWm8obiksbz10aGlzLm1ha2VPdXRwdXRBcnJheShyLm91dHB1dFNoYXBlLGUuZHR5cGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdF0sbyl9LHQucHJvdG90eXBlLmNhc3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZ28odCxlLHRoaXMpfSx0LnByb3RvdHlwZS51bnN0YWNrPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuc2hhcGVbZV0scj1uZXcgQXJyYXkodC5yYW5rLTEpLG89MCxhPTA7YTx0LnJhbms7YSsrKWEhPT1lJiYocltvKytdPXQuc2hhcGVbYV0pO3ZhciBpPW5ldyBBcnJheSh0LnJhbmspLmZpbGwoMCkscz10LnNoYXBlLnNsaWNlKCk7c1tlXT0xO3ZhciB1PW5ldyBBcnJheShuKTtmb3IoYT0wO2E8dS5sZW5ndGg7YSsrKWlbZV09YSx1W2FdPXRoaXMuc2xpY2UodCxpLHMpLnJlc2hhcGUocik7cmV0dXJuIHV9LHQucHJvdG90eXBlLmF2Z1Bvb2wzZD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBOaShlLFwiYXZnXCIsITEpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImZsb2F0MzJcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSxyKX0sdC5wcm90b3R5cGUuYXZnUG9vbDNkQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyB0YShuKSxvPXRoaXMubWFrZU91dHB1dEFycmF5KHIub3V0cHV0U2hhcGUsZS5kdHlwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSxvKX0sdC5wcm90b3R5cGUubWF4UG9vbDNkPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IE5pKGUsXCJtYXhcIiwhMSkscj10aGlzLm1ha2VPdXRwdXRBcnJheShuLm91dHB1dFNoYXBlLFwiZmxvYXQzMlwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3RdLHIpfSx0LnByb3RvdHlwZS5tYXhQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz1uZXcgTmkocixcIm1heFwiLCEwKSxhPXRoaXMuY29tcGlsZUFuZFJ1bihvLFtlXSksaT1uZXcgeGkocikscz10aGlzLm1ha2VPdXRwdXRBcnJheShpLm91dHB1dFNoYXBlLGUuZHR5cGUpLHU9dGhpcy5jb21waWxlQW5kUnVuKGksW3QsYV0scyk7cmV0dXJuIGEuZGlzcG9zZSgpLHV9LHQucHJvdG90eXBlLnJlc2hhcGU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKTtyZXR1cm4hbi5pc1BhY2tlZHx8Q2UodC5zaGFwZSxlKXx8bnVsbCE9PW4udGV4dHVyZSYmQ2Uobi5zaGFwZSxlKT95byh0LGUpOnRoaXMucGFja2VkUmVzaGFwZSh0LGUpfSx0LnByb3RvdHlwZS5yZXNpemVCaWxpbmVhcj1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0lNQUdFX09QRVJBVElPTlNcIik/bmV3IF9pKHQuc2hhcGUsZSxuLHIpOm5ldyBEaSh0LnNoYXBlLGUsbixyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG8sW3RdKX0sdC5wcm90b3R5cGUucmVzaXplQmlsaW5lYXJCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IFRpKHQsZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3RdKX0sdC5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW5ldyBGaSh0LnNoYXBlLGUsbixyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG8sW3RdKX0sdC5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBPaSh0LGUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSl9LHQucHJvdG90eXBlLm11bHRpbm9taWFsPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPWU/dDpRcih0KSxhPW8uc2hhcGVbMF0saT1vLnNoYXBlWzFdLHM9bmV3IHdpKGEsaSxuKSx1PXRoaXMubWFrZU91dHB1dEFycmF5KHMub3V0cHV0U2hhcGUsXCJpbnQzMlwiKSxsPXMuZ2V0Q3VzdG9tU2V0dXBGdW5jKHIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocyxbb10sdSxsKX0sdC5wcm90b3R5cGUub25lSG90PWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW5ldyBDaSh0LnNpemUsZSxuLHIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obyxbdF0pfSx0LnByb3RvdHlwZS5kaWFnPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBNYSh0LnNpemUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5ub25NYXhTdXBwcmVzc2lvbj1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB0bihcInRmLm5vbk1heFN1cHByZXNzaW9uKCkgaW4gd2ViZ2wgbG9ja3MgdGhlIFVJIHRocmVhZC4gQ2FsbCB0Zi5ub25NYXhTdXBwcmVzc2lvbkFzeW5jKCkgaW5zdGVhZFwiKSxJbyh0LmRhdGFTeW5jKCksZS5kYXRhU3luYygpLG4scixvKX0sdC5wcm90b3R5cGUuY3JvcEFuZFJlc2l6ZT1mdW5jdGlvbih0LGUsbixyLG8sYSl7dmFyIGk9bmV3IEFhKHQuc2hhcGUsZS5zaGFwZSxyLG8sYSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihpLFt0LGUsbl0pfSx0LnByb3RvdHlwZS5kZXB0aFRvU3BhY2U9ZnVuY3Rpb24odCxlLG4pe2YoZT4xLGZ1bmN0aW9uKCl7cmV0dXJuXCJibG9ja1NpemUgc2hvdWxkIGJlID4gMSBmb3IgZGVwdGhUb1NwYWNlLCBidXQgd2FzOiBcIitlfSk7dmFyIHI9dC5zaGFwZVswXSxvPVwiTkhXQ1wiPT09bj90LnNoYXBlWzFdOnQuc2hhcGVbMl0sYT1cIk5IV0NcIj09PW4/dC5zaGFwZVsyXTp0LnNoYXBlWzNdLGk9XCJOSFdDXCI9PT1uP3Quc2hhcGVbM106dC5zaGFwZVsxXSxzPW8qZSx1PWEqZSxsPWkvKGUqZSksYz1uZXcgRmEoXCJOSFdDXCI9PT1uP1tyLHMsdSxsXTpbcixsLHMsdV0sZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGMsW3RdKX0sdC5wcm90b3R5cGUuc3BsaXQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBObyh0LGUsbil9LHQucHJvdG90eXBlLnNjYXR0ZXJORD1mdW5jdGlvbih0LGUsbil7dmFyIHI9UHIoMCx0LG4pLG89ci5zbGljZVJhbmssYT1yLm51bVVwZGF0ZXMsaT1yLnNsaWNlU2l6ZSxzPXIuc3RyaWRlcyx1PXIub3V0cHV0U2l6ZSxsPVt1L2ksaV0sYz10LnJlc2hhcGUoW2Esb10pLGg9ZS5yZXNoYXBlKFthLGldKTtpZigwPT09dSlyZXR1cm4geW8oYm4oW10pLG4pO3ZhciBwPUNuKDApLGY9bmV3IFBpKGEsbyxjLnJhbmssaC5yYW5rLHMsbCk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihmLFtoLGMscF0pLnJlc2hhcGUobil9LHQucHJvdG90eXBlLnNwYXJzZVRvRGVuc2U9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89UHIoMCx0LG4pLGE9by5zbGljZVJhbmssaT1vLm51bVVwZGF0ZXMscz1vLnN0cmlkZXMsdT1vLm91dHB1dFNpemUsbD1uZXcgUGkoaSxhLHQucmFuayxlLnJhbmsscyxbdSwxXSwhMSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihsLFtlLHQscl0pLnJlc2hhcGUobil9LHQucHJvdG90eXBlLmZmdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5mZnRJbXBsKHQsITEpfSx0LnByb3RvdHlwZS5pZmZ0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZmdEltcGwodCwhMCl9LHQucHJvdG90eXBlLmZmdEltcGw9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKSxyPW5ldyB6YShVYSx0LnNoYXBlLGUpLG89bmV3IHphKFZhLHQuc2hhcGUsZSksYT1bdGhpcy5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZSh0LG4uY29tcGxleFRlbnNvcnMucmVhbCksdGhpcy5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZSh0LG4uY29tcGxleFRlbnNvcnMuaW1hZyldLGk9dGhpcy5jb21waWxlQW5kUnVuKHIsYSkscz10aGlzLmNvbXBpbGVBbmRSdW4obyxhKSx1PXRoaXMuY29tcGxleChpLHMpLmFzMkQodC5zaGFwZVswXSx0LnNoYXBlWzFdKTtyZXR1cm4gaS5kaXNwb3NlKCkscy5kaXNwb3NlKCksdX0sdC5wcm90b3R5cGUuZ2F0aGVyTkQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnNoYXBlLHI9bltuLmxlbmd0aC0xXSxvPU9yKHQsZSksYT1vWzBdLGk9b1sxXSxzPW9bMl0sdT1vWzNdLGw9ZS5yZXNoYXBlKFtpLHJdKSxjPXQucmVzaGFwZShbdC5zaXplL3Msc10pLGg9bmV3IEthKHIsdSxbaSxzXSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihoLFtjLGxdKS5yZXNoYXBlKGEpfSx0LnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKHQsZSxuKXtpZihcInN0cmluZ1wiPT09KG49bnx8TChlKSkpe3ZhciByPVMobixnKHQpKTtyZXR1cm4gci5maWxsKGUpLGN0Lm1ha2UodCx7dmFsdWVzOnJ9LG4pfXZhciBvPW5ldyBHYSh0LGUpLGE9by5nZXRDdXN0b21TZXR1cEZ1bmMoZSksaT10aGlzLm1ha2VPdXRwdXRBcnJheSh0LG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obyxbXSxpLGEpfSx0LnByb3RvdHlwZS5vbmVzTGlrZT1mdW5jdGlvbih0KXtpZihcInN0cmluZ1wiPT09dC5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJvbmVzTGlrZSBpcyBub3Qgc3VwcG9ydGVkIHVuZGVyIHN0cmluZyBkdHlwZVwiKTtyZXR1cm4gdGhpcy5maWxsKHQuc2hhcGUsMSx0LmR0eXBlKX0sdC5wcm90b3R5cGUuemVyb3NMaWtlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZpbGwodC5zaGFwZSxcInN0cmluZ1wiPT09dC5kdHlwZT9cIlwiOjAsdC5kdHlwZSl9LHQucHJvdG90eXBlLmxpbnNwYWNlPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4geG8odCxlLG4pfSx0LnByb3RvdHlwZS5tYWtlT3V0cHV0QXJyYXk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gY3QubWFrZSh0LHt9LGUsdGhpcyl9LHQucHJvdG90eXBlLm1ha2VQYWNrZWRUZW5zb3I9ZnVuY3Rpb24odCxlKXt2YXIgbj1jdC5tYWtlKHQse30sZSx0aGlzKTtyZXR1cm4gdGhpcy50ZXhEYXRhLmdldChuLmRhdGFJZCkuaXNQYWNrZWQ9ITAsbn0sdC5wcm90b3R5cGUudW5wYWNrVGVuc29yPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBJcyh0LnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdLGN0Lm1ha2UoZS5vdXRwdXRTaGFwZSx7fSx0LmR0eXBlLHRoaXMpKX0sdC5wcm90b3R5cGUucGFja1RlbnNvcj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgRWkodC5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSx0aGlzLm1ha2VQYWNrZWRUZW5zb3IodC5zaGFwZSx0LmR0eXBlKSxudWxsLCEwKX0sdC5wcm90b3R5cGUucGFja2VkUmVzaGFwZT1mdW5jdGlvbih0LGUpe3ZhciBuPXQucmVzaGFwZShbZ2UodC5zaGFwZSldLmNvbmNhdCh5ZSh0LnNoYXBlKSkpLHI9W2dlKGUpXS5jb25jYXQoeWUoZSkpLG89bmV3IEFpKHIsbi5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihvLFtuXSxudWxsLG51bGwsITApLnJlc2hhcGUoZSl9LHQucHJvdG90eXBlLmRlY29kZT1mdW5jdGlvbih0KXt2YXIgZSxuPXRoaXMudGV4RGF0YS5nZXQodCkscj1uLmlzUGFja2VkLG89bi5zaGFwZSxhPW4uZHR5cGUsaT14ZShvKSxzPUx0KG8pLHU9dGhpcy5tYWtlVGVuc29ySGFuZGxlKG8sXCJmbG9hdDMyXCIpO3JldHVybiB0aGlzLnRleERhdGEuZ2V0KHUuZGF0YUlkKS5pc1BhY2tlZD0hMCx0aGlzLnRleERhdGEuZ2V0KHUuZGF0YUlkKS5kdHlwZT1hLHRoaXMudGV4RGF0YS5nZXQodS5kYXRhSWQpLnRleFNoYXBlPXMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiAyKnR9KSxlPXI/bmV3IE9hKGkscyk6bmV3IF9hKGkscyksdGhpcy5jb21waWxlQW5kUnVuKGUsW3tzaGFwZTppLGR0eXBlOmEsZGF0YUlkOnR9XSx1LG51bGwsITApLHV9LHQucHJvdG90eXBlLmNvbXBpbGVBbmRSdW49ZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10aGlzO2lmKHZvaWQgMD09PW8mJihvPSExKSxudWxsPT1uJiYobj10LnVzZXNQYWNrZWRUZXh0dXJlcz90aGlzLm1ha2VQYWNrZWRUZW5zb3IodC5vdXRwdXRTaGFwZSxlWzBdLmR0eXBlKTp0aGlzLm1ha2VPdXRwdXRBcnJheSh0Lm91dHB1dFNoYXBlLGVbMF0uZHR5cGUpKSwwPT09bi5zaXplKXJldHVybiB0aGlzLnRleERhdGEuZ2V0KG4uZGF0YUlkKS52YWx1ZXM9TihuLmR0eXBlLDApLG47dmFyIHM9ZS5tYXAoZnVuY3Rpb24oZSl7aWYoXCJjb21wbGV4NjRcIj09PWUuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiR1BHUFVQcm9ncmFtIGRvZXMgbm90IHN1cHBvcnQgY29tcGxleDY0IGlucHV0LiBGb3IgY29tcGxleDY0IGR0eXBlcywgcGxlYXNlIHNlcGFyYXRlIHRoZSBwcm9ncmFtIGludG8gcmVhbCBhbmQgaW1hZ2luYXJ5IHBhcnRzLlwiKTt2YXIgbj1hLnRleERhdGEuZ2V0KGUuZGF0YUlkKTtpZihudWxsPT1uLnRleHR1cmUpe2lmKCF0LnVzZXNQYWNrZWRUZXh0dXJlcyYmZyhlLnNoYXBlKTw9aS5nZXROdW1iZXIoXCJXRUJHTF9TSVpFX1VQTE9BRF9VTklGT1JNXCIpKXJldHVybntzaGFwZTplLnNoYXBlLHRleERhdGE6bnVsbCxpc1VuaWZvcm06ITAsdW5pZm9ybVZhbHVlczpuLnZhbHVlc307dC51c2VzUGFja2VkVGV4dHVyZXMmJihuLmlzUGFja2VkPSEwLG4uc2hhcGU9ZS5zaGFwZSl9ZWxzZSBpZighIW4uaXNQYWNrZWQhPSEhdC51c2VzUGFja2VkVGV4dHVyZXMpZT1uLmlzUGFja2VkP2EudW5wYWNrVGVuc29yKGUpOmEucGFja1RlbnNvcihlKSxuPWEudGV4RGF0YS5nZXQoZS5kYXRhSWQpO2Vsc2UgaWYobi5pc1BhY2tlZCYmIUNlKG4uc2hhcGUsZS5zaGFwZSkpe3ZhciByPWUsbz1lLnNoYXBlO2Uuc2hhcGU9bi5zaGFwZSxlPWEucGFja2VkUmVzaGFwZShlLG8pLG49YS50ZXhEYXRhLmdldChlLmRhdGFJZCksci5zaGFwZT1vfXJldHVybiBhLnVwbG9hZFRvR1BVKGUuZGF0YUlkKSx7c2hhcGU6ZS5zaGFwZSx0ZXhEYXRhOm4saXNVbmlmb3JtOiExfX0pO3RoaXMudXBsb2FkVG9HUFUobi5kYXRhSWQpO3ZhciB1LGw9e3NoYXBlOm4uc2hhcGUsdGV4RGF0YTp0aGlzLnRleERhdGEuZ2V0KG4uZGF0YUlkKSxpc1VuaWZvcm06ITF9LGM9ZnVuY3Rpb24odCxlLG4pe3ZhciByPVwiXCI7ZS5jb25jYXQobikuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1udWxsIT10LnRleERhdGEmJm51bGwhPXQudGV4RGF0YS5zbGljZSYmdC50ZXhEYXRhLnNsaWNlLmZsYXRPZmZzZXQ+MCxuPXQuaXNVbmlmb3JtP1widW5pZm9ybVwiOnQudGV4RGF0YS50ZXhTaGFwZTtyKz10LnNoYXBlK1wiX1wiK24rXCJfXCIrZX0pO3ZhciBvPXQudXNlckNvZGUsYT10LmNvbnN0cnVjdG9yLm5hbWU7cmV0dXJuIGErPVwiX1wiK3IrXCJfXCIrb30odCxzLGwpLGg9dGhpcy5nZXRBbmRTYXZlQmluYXJ5KGMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dmFyIG89ZS51c2VyQ29kZSxhPW4ubWFwKGZ1bmN0aW9uKHQsbil7dmFyIHI9e2xvZ2ljYWxTaGFwZTp0LnNoYXBlLHRleFNoYXBlOnQuaXNVbmlmb3JtP251bGw6dC50ZXhEYXRhLnRleFNoYXBlLGlzVW5pZm9ybTp0LmlzVW5pZm9ybSxpc1BhY2tlZDohdC5pc1VuaWZvcm0mJnQudGV4RGF0YS5pc1BhY2tlZCxmbGF0T2Zmc2V0Om51bGx9O3JldHVybiBudWxsIT10LnRleERhdGEmJm51bGwhPXQudGV4RGF0YS5zbGljZSYmdC50ZXhEYXRhLnNsaWNlLmZsYXRPZmZzZXQ+MCYmKHIuZmxhdE9mZnNldD10LnRleERhdGEuc2xpY2UuZmxhdE9mZnNldCkse25hbWU6ZS52YXJpYWJsZU5hbWVzW25dLHNoYXBlSW5mbzpyfX0pLHM9YS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGVJbmZvfSksdT17bG9naWNhbFNoYXBlOnIuc2hhcGUsdGV4U2hhcGU6ci50ZXhEYXRhLnRleFNoYXBlLGlzVW5pZm9ybTohMSxpc1BhY2tlZDpyLnRleERhdGEuaXNQYWNrZWQsZmxhdE9mZnNldDpudWxsfSxsPVVvKGEsdSxvLGUudXNlc1BhY2tlZFRleHR1cmVzKSxjPXQuY3JlYXRlUHJvZ3JhbShsKSxoPW51bGwscD10LmdldFVuaWZvcm1Mb2NhdGlvbihjLFwiTkFOXCIsITEpOzE9PT1pLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikmJihoPXQuZ2V0VW5pZm9ybUxvY2F0aW9uKGMsXCJJTkZJTklUWVwiLCExKSk7Zm9yKHZhciBmPXt9LGQ9MDtkPGUudmFyaWFibGVOYW1lcy5sZW5ndGg7ZCsrKXt2YXIgdj1lLnZhcmlhYmxlTmFtZXNbZF07Zlt2XT10LmdldFVuaWZvcm1Mb2NhdGlvbihjLHYsITEpLGZbXCJvZmZzZXRcIit2XT10LmdldFVuaWZvcm1Mb2NhdGlvbihjLFwib2Zmc2V0XCIrdiwhMSl9cmV0dXJue3Byb2dyYW06ZSxzb3VyY2U6bCx3ZWJHTFByb2dyYW06Yyx1bmlmb3JtTG9jYXRpb25zOmYsaW5TaGFwZUluZm9zOnMsb3V0U2hhcGVJbmZvOnUsaW5mTG9jOmgsbmFuTG9jOnB9fShhLmdwZ3B1LHQscyxsKX0pLHA9bnVsbCE9dGhpcy5hY3RpdmVUaW1lcnM7cmV0dXJuIHAmJih1PXRoaXMuc3RhcnRUaW1lcigpKSxmdW5jdGlvbih0LGUsbixyLG8pe2ZpKGUuaW5TaGFwZUluZm9zLG4pLGZpKFtlLm91dFNoYXBlSW5mb10sW3JdKTt2YXIgYT1yLnRleERhdGEudGV4dHVyZSxzPXIudGV4RGF0YS50ZXhTaGFwZTtyLnRleERhdGEuaXNQYWNrZWQ/dC5zZXRPdXRwdXRQYWNrZWRNYXRyaXhUZXh0dXJlKGEsc1swXSxzWzFdKTp0LnNldE91dHB1dE1hdHJpeFRleHR1cmUoYSxzWzBdLHNbMV0pLHQuc2V0UHJvZ3JhbShlLndlYkdMUHJvZ3JhbSksMT09PWkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKSYmbnVsbCE9PWUuaW5mTG9jJiZ0LmdsLnVuaWZvcm0xZihlLmluZkxvYywxLzApLG51bGwhPT1lLm5hbkxvYyYmdC5nbC51bmlmb3JtMWYoZS5uYW5Mb2MsTmFOKSxuLmZvckVhY2goZnVuY3Rpb24obixyKXt2YXIgbz1lLnByb2dyYW0udmFyaWFibGVOYW1lc1tyXSxhPWUudW5pZm9ybUxvY2F0aW9uc1tvXSxpPWUudW5pZm9ybUxvY2F0aW9uc1tcIm9mZnNldFwiK29dO2lmKG51bGwhPWEpaWYobi5pc1VuaWZvcm0paWYoZyhuLnNoYXBlKTwyKXQuZ2wudW5pZm9ybTFmKGEsbi51bmlmb3JtVmFsdWVzWzBdKTtlbHNle3ZhciBzPW4udW5pZm9ybVZhbHVlcztzIGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHwocz1uZXcgRmxvYXQzMkFycmF5KHMpKSx0LmdsLnVuaWZvcm0xZnYoYSxzKX1lbHNlIG51bGwhPW4udGV4RGF0YS5zbGljZSYmbnVsbCE9aSYmdC5nbC51bmlmb3JtMWkoaSxuLnRleERhdGEuc2xpY2UuZmxhdE9mZnNldCksdC5zZXRJbnB1dE1hdHJpeFRleHR1cmUobi50ZXhEYXRhLnRleHR1cmUsYSxyKX0pLG51bGwhPW8mJm8odCxlLndlYkdMUHJvZ3JhbSksdC5leGVjdXRlUHJvZ3JhbSgpfSh0aGlzLmdwZ3B1LGgscyxsLHIpLHAmJih1PXRoaXMuZW5kVGltZXIodSksdGhpcy5hY3RpdmVUaW1lcnMucHVzaCh7bmFtZTp0LmNvbnN0cnVjdG9yLm5hbWUscXVlcnk6dGhpcy5nZXRRdWVyeVRpbWUodSl9KSksIWkuZ2V0Qm9vbChcIldFQkdMX0xBWklMWV9VTlBBQ0tcIikmJnRoaXMudGV4RGF0YS5nZXQobi5kYXRhSWQpLmlzUGFja2VkJiYhMT09PW8/dGhpcy51bnBhY2tUZW5zb3Iobik6bn0sdC5wcm90b3R5cGUuZ2V0QW5kU2F2ZUJpbmFyeT1mdW5jdGlvbih0LGUpe3JldHVybiB0IGluIHRoaXMuYmluYXJ5Q2FjaGV8fCh0aGlzLmJpbmFyeUNhY2hlW3RdPWUoKSksdGhpcy5iaW5hcnlDYWNoZVt0XX0sdC5wcm90b3R5cGUuZ2V0VGV4dHVyZU1hbmFnZXI9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50ZXh0dXJlTWFuYWdlcn0sdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuZGlzcG9zZWR8fCh0aGlzLnRleHR1cmVNYW5hZ2VyLmRpc3Bvc2UoKSxudWxsIT10aGlzLmNhbnZhcyYmbnVsbCE9dGhpcy5jYW52YXMucmVtb3ZlP3RoaXMuY2FudmFzLnJlbW92ZSgpOnRoaXMuY2FudmFzPW51bGwsbnVsbCE9dGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0JiZ0aGlzLmZyb21QaXhlbHMyRENvbnRleHQuY2FudmFzLnJlbW92ZSYmdGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0LmNhbnZhcy5yZW1vdmUoKSx0aGlzLmdwZ3B1Q3JlYXRlZExvY2FsbHkmJih0aGlzLmdwZ3B1LnByb2dyYW09bnVsbCx0aGlzLmdwZ3B1LmRpc3Bvc2UoKSksdGhpcy5kaXNwb3NlZD0hMCl9LHQucHJvdG90eXBlLmZsb2F0UHJlY2lzaW9uPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztyZXR1cm4gbnVsbD09dGhpcy5mbG9hdFByZWNpc2lvblZhbHVlJiYodGhpcy5mbG9hdFByZWNpc2lvblZhbHVlPVZlKGZ1bmN0aW9uKCl7aWYoIWkuZ2V0KFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfRU5BQkxFRFwiKSl7dmFyIGU9aS5nZXRCb29sKFwiREVCVUdcIik7aS5zZXQoXCJERUJVR1wiLCExKTt2YXIgbj10LmFicyhDbigxZS04KSkuZGF0YVN5bmMoKVswXTtpZihpLnNldChcIkRFQlVHXCIsZSksbj4wKXJldHVybiAzMn1yZXR1cm4gMTZ9KSksdGhpcy5mbG9hdFByZWNpc2lvblZhbHVlfSx0LnByb3RvdHlwZS5lcHNpbG9uPWZ1bmN0aW9uKCl7cmV0dXJuIDMyPT09dGhpcy5mbG9hdFByZWNpc2lvbigpPzFlLTc6MWUtNH0sdC5wcm90b3R5cGUudXBsb2FkVG9HUFU9ZnVuY3Rpb24odCl7dmFyIGUsbj10aGlzLnRleERhdGEuZ2V0KHQpLHI9bi5zaGFwZSxvPW4uZHR5cGUsYT1uLnZhbHVlcyxpPW4udGV4dHVyZSxzPW4udXNhZ2UsdT1uLmlzUGFja2VkO2lmKG51bGw9PWkpe3ZhciBsLGM9bnVsbCE9dGhpcy5hY3RpdmVUaW1lcnM7YyYmKGw9JCgpKTt2YXIgaD1uLnRleFNoYXBlO2lmKG51bGw9PWgmJihoPWJlKHIsdSksbi50ZXhTaGFwZT1oKSxudWxsIT1hKXt2YXIgcD14ZShyKSxmPXZvaWQgMCxkPWhbMV0sdj1oWzBdLG09YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk7dT8oZD0oZT1XdChoWzBdLGhbMV0pKVswXSx2PWVbMV0sZj1uZXcgV2EocCxbdixkXSxtKSk6Zj1uZXcgTGEocCxbdixkXSxtKTt2YXIgeT10aGlzLm1ha2VUZW5zb3JIYW5kbGUoW3YsZF0sbyk7dGhpcy50ZXhEYXRhLmdldCh5LmRhdGFJZCkudXNhZ2U9bT9UdC5QSVhFTFM6VHQuVVBMT0FELHRoaXMuZ3BncHUudXBsb2FkRGVuc2VNYXRyaXhUb1RleHR1cmUodGhpcy5nZXRUZXh0dXJlKHkuZGF0YUlkKSxkLHYsYSk7dmFyIHg9dGhpcy5tYWtlVGVuc29ySGFuZGxlKGYub3V0cHV0U2hhcGUseS5kdHlwZSk7eC5zaXplPWcoZi5vdXRwdXRTaGFwZSksdGhpcy50ZXhEYXRhLmdldCh4LmRhdGFJZCkuaXNQYWNrZWQ9dSx0aGlzLmNvbXBpbGVBbmRSdW4oZixbeV0seCk7dmFyIGI9dGhpcy50ZXhEYXRhLmdldCh4LmRhdGFJZCk7bi50ZXh0dXJlPWIudGV4dHVyZSxuLnRleFNoYXBlPWIudGV4U2hhcGUsbi5pc1BhY2tlZD1iLmlzUGFja2VkLG4udXNhZ2U9Yi51c2FnZSx0aGlzLmRpc3Bvc2VEYXRhKHkuZGF0YUlkKSx0aGlzLnRleERhdGEuZGVsZXRlKHguZGF0YUlkKSxuLnZhbHVlcz1udWxsLGMmJih0aGlzLnVwbG9hZFdhaXRNcys9JCgpLWwpfWVsc2V7dmFyIHc9dGhpcy5hY3F1aXJlVGV4dHVyZShoLHMsbyx1KTtuLnRleHR1cmU9d319fSx0LnByb3RvdHlwZS5jb252ZXJ0QW5kQ2FjaGVPbkNQVT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXMudGV4RGF0YS5nZXQodCkscj1uLmR0eXBlO3JldHVybiB0aGlzLnJlbGVhc2VHUFVEYXRhKHQpLG51bGwhPWUmJihuLnZhbHVlcz1mdW5jdGlvbih0LGUpe2lmKFwiZmxvYXQzMlwiPT09ZXx8XCJjb21wbGV4NjRcIj09PWUpcmV0dXJuIHQ7aWYoXCJpbnQzMlwiPT09ZXx8XCJib29sXCI9PT1lKXtmb3IodmFyIG49XCJpbnQzMlwiPT09ZT9uZXcgSW50MzJBcnJheSh0Lmxlbmd0aCk6bmV3IFVpbnQ4QXJyYXkodC5sZW5ndGgpLHI9MDtyPG4ubGVuZ3RoOysrciluW3JdPU1hdGgucm91bmQodFtyXSk7cmV0dXJuIG59dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkdHlwZSBcIitlKX0oZSxyKSksbi52YWx1ZXN9LHQucHJvdG90eXBlLmFjcXVpcmVUZXh0dXJlPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKHRoaXMubnVtQnl0ZXNJbkdQVSs9dGhpcy5jb21wdXRlQnl0ZXModCxuKSwhdGhpcy53YXJuZWRBYm91dE1lbW9yeSYmdGhpcy5udW1CeXRlc0luR1BVPjEwMjQqdGhpcy5udW1NQkJlZm9yZVdhcm5pbmcqMTAyNCl7dmFyIG89KHRoaXMubnVtQnl0ZXNJbkdQVS8xMDI0LzEwMjQpLnRvRml4ZWQoMik7dGhpcy53YXJuZWRBYm91dE1lbW9yeT0hMCxjb25zb2xlLndhcm4oXCJIaWdoIG1lbW9yeSB1c2FnZSBpbiBHUFU6IFwiK28rXCIgTUIsIG1vc3QgbGlrZWx5IGR1ZSB0byBhIG1lbW9yeSBsZWFrXCIpfXJldHVybiB0aGlzLnRleHR1cmVNYW5hZ2VyLmFjcXVpcmVUZXh0dXJlKHQsZSxyKX0sdC5wcm90b3R5cGUuY29tcHV0ZUJ5dGVzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRbMF0qdFsxXSpPKGUpfSx0fSgpO0F0KCkmJlN0LnJlZ2lzdGVyQmFja2VuZChcIndlYmdsXCIsZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEFzfSwyKTt2YXIgVHM9bW4oe2Fic186ZnVuY3Rpb24odCl7dmFyIGU9cm4odCxcInhcIixcImFic1wiKTtyZXR1cm5cImNvbXBsZXg2NFwiPT09ZS5kdHlwZT9TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuY29tcGxleEFicyhlKX0seyR4OmV9KTpTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmFicyhlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4udG9GbG9hdCgpLnN0ZXAoLTEpKX19fSl9fSksRHM9bW4oe2Fjb3NfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJhY29zXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmFjb3MoZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdlN0cmljdChDbigxKS5zdWIobi50b0Zsb2F0KCkuc3F1YXJlKCkpLnNxcnQoKSkubmVnKCl9fX0pfX0pLF9zPW1uKHthY29zaF86ZnVuY3Rpb24odCl7dmFyIGU9cm4odCxcInhcIixcImFjb3NoXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmFjb3NoKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXZTdHJpY3Qobi50b0Zsb2F0KCkuc3F1YXJlKCkuc3ViKDEpLnNxcnQoKSl9fX0pfX0pLE9zPW1uKHthc2luXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwiYXNpblwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5hc2luKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXZTdHJpY3QoQ24oMSkuc3ViKG4udG9GbG9hdCgpLnNxdWFyZSgpKS5zcXJ0KCkpfX19KX19KSxGcz1tbih7YXNpbmhfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJhc2luaFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5hc2luaChlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2U3RyaWN0KENuKDEpLmFkZChuLnRvRmxvYXQoKS5zcXVhcmUoKSkuc3FydCgpKX19fSl9fSksTXM9bW4oe2F0YW5fOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJhdGFuXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmF0YW4oZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdihuLnRvRmxvYXQoKS5zcXVhcmUoKS5hZGQoMSkpfX19KX19KSxCcz1tbih7YXRhbmhfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJhdGFuaFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5hdGFuaChlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KENuKDEpLnN1YihuLnRvRmxvYXQoKS5zcXVhcmUoKSkpfX19KX19KSxQcz1tbih7Y2VpbF86ZnVuY3Rpb24odCl7dmFyIGU9cm4odCxcInhcIixcImNlaWxcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5jZWlsKGUpfSx7JHg6ZX0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIE1uKHQpfX19KX19KSxMcz1tbih7Y2xpcEJ5VmFsdWVfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1ybih0LFwieFwiLFwiY2xpcEJ5VmFsdWVcIik7cmV0dXJuIGYoZTw9bixmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY2xpcDogbWluIChcIitlK1wiKSBtdXN0IGJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byBtYXggKFwiK24rXCIpLlwifSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbyl7dmFyIGE9dC5jbGlwKHIsZSxuKTtyZXR1cm4gbyhbcl0pLGF9LHskeDpyfSxmdW5jdGlvbih0LHIpe3ZhciBvPXJbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQud2hlcmUoby5ncmVhdGVyRXF1YWwoZSkubG9naWNhbEFuZChvLmxlc3NFcXVhbChuKSksTW4odCkpfX19KX19KSxXcz1tbih7Y29zXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwiY29zXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmNvcyhlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIG4udG9GbG9hdCgpLnNpbigpLm5lZygpLm11bCh0KX19fSl9fSksVXM9bW4oe2Nvc2hfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJjb3NoXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmNvc2goZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBuLnRvRmxvYXQoKS5zaW5oKCkubXVsU3RyaWN0KHQpfX19KX19KSxWcz1tbih7ZXJmXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwiZXJmXCIpO3JldHVybiBmKFwiaW50MzJcIj09PWUuZHR5cGV8fFwiZmxvYXQzMlwiPT09ZS5kdHlwZSxmdW5jdGlvbigpe3JldHVyblwiSW5wdXQgZHR5cGUgbXVzdCBiZSBgaW50MzJgIG9yIGBmbG9hdDMyYC5cIn0pLFwiaW50MzJcIj09PWUuZHR5cGUmJihlPWUudG9GbG9hdCgpKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmVyZihlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4uc3F1YXJlKCkubmVnKCkuZXhwKCkubXVsKDIvTWF0aC5zcXJ0KE1hdGguUEkpKSl9fX0pfX0pLHpzPW1uKHtleHBfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJleHBcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuZXhwKGUpO3JldHVybiBuKFtyXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsU3RyaWN0KGVbMF0pfX19KX19KSxHcz1tbih7ZXhwbTFfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJleHBtMVwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5leHBtMShlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4uZXhwKCkpfX19KX19KSxIcz1tbih7Zmxvb3JfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJmbG9vclwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmZsb29yKGUpfSx7JHg6ZX0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIE1uKHQpfX19KX19KSxxcz1tbih7bG9nXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwibG9nXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmxvZyhlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4udG9GbG9hdCgpKX19fSl9fSksJHM9bW4oe2xvZzFwXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwibG9nMXBcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQubG9nMXAoZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdihuLmFkZCgxKSl9fX0pfX0pLEtzPW1uKHtsb2dTaWdtb2lkXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwibG9nU2lnbW9pZFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zb2Z0cGx1cyhlLm5lZygpKS5uZWcoKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4ubmVnKCkuc2lnbW9pZCgpKX19fSl9fSksanM9bW4oe25lZ186ZnVuY3Rpb24odCl7dmFyIGU9cm4odCxcInhcIixcIm5lZ1wiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5lZyhlKX0seyR4OmV9LGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0Lm5lZygpfX19KX19KSxYcz1tbih7cmVjaXByb2NhbF86ZnVuY3Rpb24odCl7dmFyIGU9cm4odCxcInhcIixcInJlY2lwcm9jYWxcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQucmVjaXByb2NhbChlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4uc3F1YXJlKCkubmVnKCkpfX19KX19KSxZcz1tbih7cm91bmRfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJyb3VuZFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJvdW5kKGUpfSx7JHg6ZX0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIE1uKHQpfX19KX19KSxRcz1tbih7cnNxcnRfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJyc3FydFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5yc3FydChlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4ucG93KDEuNSkubXVsKDIpKS5uZWcoKX19fSl9fSksSnM9bW4oe3NpZ21vaWRfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJzaWdtb2lkXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LnNpZ21vaWQoZSk7cmV0dXJuIG4oW3JdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLm11bChDbigxKS5zdWIobikpKX19fSl9fSksWnM9bW4oe3NpZ25fOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJzaWduXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2lnbihlKX0seyR4OmV9LGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBNbih0KX19fSl9fSksdHU9bW4oe2lzTmFOXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwiaXNOYU5cIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5pc05hTihlKX0seyR4OmV9LGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBNbih0KX19fSl9fSksZXU9bW4oe2lzSW5mXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwiaXNJbmZcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5pc0luZihlKX0seyR4OmV9LGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBNbih0KX19fSl9fSksbnU9bW4oe2lzRmluaXRlXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwiaXNGaW5pdGVcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5pc0Zpbml0ZShlKX0seyR4OmV9LGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBNbih0KX19fSl9fSkscnU9bW4oe3Npbl86ZnVuY3Rpb24odCl7dmFyIGU9cm4odCxcInhcIixcInNpblwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zaW4oZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBuLnRvRmxvYXQoKS5jb3MoKS5tdWwodCl9fX0pfX0pLG91PW1uKHtzaW5oXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwic2luaFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zaW5oKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gbi50b0Zsb2F0KCkuY29zaCgpLm11bFN0cmljdCh0KX19fSl9fSksYXU9bW4oe3NvZnRwbHVzXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwic29mdHBsdXNcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuc29mdHBsdXMoZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLnNpZ21vaWQoKSl9fX0pfX0pLGl1PW1uKHtzcXJ0XzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwic3FydFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zcXJ0KGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXYobi50b0Zsb2F0KCkuc3FydCgpLm11bCgyKSl9fX0pfX0pLHN1PW1uKHtzcXVhcmVfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJzcXVhcmVcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3JldHVybiBuKFtlXSksdC5zcXVhcmUoZSl9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4udG9GbG9hdCgpLm11bCgyKSl9fX0pfX0pLHV1PW1uKHtzdGVwXzpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPTApO3ZhciBuPXJuKHQsXCJ4XCIsXCJzdGVwXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3RlcChuLGUpfSx7JHg6bn0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIE1uKHQpfX19KX19KSxsdT1tbih7dGFuXzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwidGFuXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LnRhbihlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4uY29zKCkuc3F1YXJlKCkpfX19KX19KSxjdT1tbih7dGFuaF86ZnVuY3Rpb24odCl7dmFyIGU9cm4odCxcInhcIixcInRhbmhcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQudGFuaChlKTtyZXR1cm4gbihbcl0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIENuKDEpLnN1YihuLnNxdWFyZSgpKS5tdWxTdHJpY3QodCl9fX0pfX0pO2Z1bmN0aW9uIGh1KHQsZSxuLHIsbyxhKXt2YXIgaSxzLHU9cm4odCxcInhcIixcImJhdGNoTm9ybVwiKSxsPXJuKGUsXCJtZWFuXCIsXCJiYXRjaE5vcm1cIiksYz1ybihuLFwidmFyaWFuY2VcIixcImJhdGNoTm9ybVwiKTtyZXR1cm4gbnVsbCE9byYmKGk9cm4obyxcInNjYWxlXCIsXCJiYXRjaE5vcm1cIikpLG51bGwhPXImJihzPXJuKHIsXCJvZmZzZXRcIixcImJhdGNoTm9ybVwiKSksZigyPT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm0zRDogeCBtdXN0IGJlIHJhbmsgMyBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSksZigyPT09bC5yYW5rfHwxPT09bC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm0yRDogbWVhbiBtdXN0IGJlIHJhbmsgMiBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2wucmFuaytcIi5cIn0pLGYoMj09PWMucmFua3x8MT09PWMucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtMkQ6IHZhcmlhbmNlIG11c3QgYmUgcmFuayAyIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrYy5yYW5rK1wiLlwifSksbnVsbCE9aSYmZigyPT09aS5yYW5rfHwxPT09aS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm0yRDogc2NhbGUgbXVzdCBiZSByYW5rIDIgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitpLnJhbmsrXCIuXCJ9KSxudWxsIT1zJiZmKDI9PT1zLnJhbmt8fDE9PT1zLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTJEOiBvZmZzZXQgbXVzdCBiZSByYW5rIDIgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitzLnJhbmsrXCIuXCJ9KSxkdSh1LGwsYyxzLGksYSl9ZnVuY3Rpb24gcHUodCxlLG4scixvLGEpe3ZhciBpLHMsdT1ybih0LFwieFwiLFwiYmF0Y2hOb3JtXCIpLGw9cm4oZSxcIm1lYW5cIixcImJhdGNoTm9ybVwiKSxjPXJuKG4sXCJ2YXJpYW5jZVwiLFwiYmF0Y2hOb3JtXCIpO3JldHVybiBudWxsIT1vJiYoaT1ybihvLFwic2NhbGVcIixcImJhdGNoTm9ybVwiKSksbnVsbCE9ciYmKHM9cm4ocixcIm9mZnNldFwiLFwiYmF0Y2hOb3JtXCIpKSxmKDM9PT11LnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiB4IG11c3QgYmUgcmFuayAzIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSxmKDM9PT1sLnJhbmt8fDE9PT1sLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiBtZWFuIG11c3QgYmUgcmFuayAzIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSksZigzPT09Yy5yYW5rfHwxPT09Yy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm0zRDogdmFyaWFuY2UgbXVzdCBiZSByYW5rIDMgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSxudWxsIT1pJiZmKDM9PT1pLnJhbmt8fDE9PT1pLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiBzY2FsZSBtdXN0IGJlIHJhbmsgMyBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2kucmFuaytcIi5cIn0pLG51bGwhPXMmJmYoMz09PXMucmFua3x8MT09PXMucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtM0Q6IG9mZnNldCBtdXN0IGJlIHJhbmsgMyBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK3MucmFuaytcIi5cIn0pLGR1KHUsbCxjLHMsaSxhKX1mdW5jdGlvbiBmdSh0LGUsbixyLG8sYSl7dmFyIGkscyx1PXJuKHQsXCJ4XCIsXCJiYXRjaE5vcm1cIiksbD1ybihlLFwibWVhblwiLFwiYmF0Y2hOb3JtXCIpLGM9cm4obixcInZhcmlhbmNlXCIsXCJiYXRjaE5vcm1cIik7cmV0dXJuIG51bGwhPW8mJihpPXJuKG8sXCJzY2FsZVwiLFwiYmF0Y2hOb3JtXCIpKSxudWxsIT1yJiYocz1ybihyLFwib2Zmc2V0XCIsXCJiYXRjaE5vcm1cIikpLGYoND09PXUucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtNEQ6IHggbXVzdCBiZSByYW5rIDQgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pLGYoND09PWwucmFua3x8MT09PWwucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtNEQ6IG1lYW4gbXVzdCBiZSByYW5rIDQgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitsLnJhbmsrXCIuXCJ9KSxmKDQ9PT1jLnJhbmt8fDE9PT1jLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTREOiB2YXJpYW5jZSBtdXN0IGJlIHJhbmsgNCBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2MucmFuaytcIi5cIn0pLG51bGwhPWkmJmYoND09PWkucmFua3x8MT09PWkucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtNEQ6IHNjYWxlIG11c3QgYmUgcmFuayA0IG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIraS5yYW5rK1wiLlwifSksbnVsbCE9cyYmZig0PT09cy5yYW5rfHwxPT09cy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm00RDogb2Zmc2V0IG11c3QgYmUgcmFuayA0IG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSksZHUodSxsLGMscyxpLGEpfWZ1bmN0aW9uIGR1KHQsZSxuLHIsbyxhKXtudWxsPT1hJiYoYT0uMDAxKTt2YXIgaSxzLHUsbD1ybih0LFwieFwiLFwiYmF0Y2hOb3JtXCIpLGM9cm4oZSxcIm1lYW5cIixcImJhdGNoTm9ybVwiKSxoPXJuKG4sXCJ2YXJpYW5jZVwiLFwiYmF0Y2hOb3JtXCIpO251bGwhPW8mJihpPXJuKG8sXCJzY2FsZVwiLFwiYmF0Y2hOb3JtXCIpKSxudWxsIT1yJiYocz1ybihyLFwib2Zmc2V0XCIsXCJiYXRjaE5vcm1cIikpLGYoYy5yYW5rPT09aC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJCYXRjaCBub3JtYWxpemF0aW9uIGdyYWRpZW50IHJlcXVpcmVzIG1lYW4gYW5kIHZhcmlhbmNlIHRvIGhhdmUgZXF1YWwgcmFua3MuXCJ9KSxmKG51bGw9PXN8fGMucmFuaz09PXMucmFuayxmdW5jdGlvbigpe3JldHVyblwiQmF0Y2ggbm9ybWFsaXphdGlvbiBncmFkaWVudCByZXF1aXJlcyBtZWFuIGFuZCBvZmZzZXQgdG8gaGF2ZSBlcXVhbCByYW5rcy5cIn0pLGYobnVsbD09aXx8Yy5yYW5rPT09aS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJCYXRjaCBub3JtYWxpemF0aW9uIGdyYWRpZW50IHJlcXVpcmVzIG1lYW4gYW5kIHNjYWxlIHRvIGhhdmUgZXF1YWwgcmFua3MuXCJ9KSx1PTA9PT1sLnJhbmt8fDE9PT1sLnJhbms/bC5hczREKDEsMSwxLGwuc2l6ZSk6Mj09PWwucmFuaz9sLmFzNEQoMSwxLGwuc2hhcGVbMF0sbC5zaGFwZVsxXSk6Mz09PWwucmFuaz9sLmFzNEQoMSxsLnNoYXBlWzBdLGwuc2hhcGVbMV0sbC5zaGFwZVsyXSk6bDtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5iYXRjaE5vcm1hbGl6YXRpb24odSx2dShjKSx2dShoKSxhLHZ1KGkpLHZ1KHMpKTtyZXR1cm4gZShbbCxjLGgsaV0pLG59LHskeDpsLCRtZWFuOmMsJHZhcmlhbmNlOmgsJHNjYWxlOmksJG9mZnNldDpzfSxmdW5jdGlvbih0LGUpe3ZhciBuPWUscj1uWzBdLG89blsxXSxpPW5bMl0scz1uWzNdLGw9bnVsbD09cz9DbigxKTpzLGM9bm8oby5zaGFwZSx1LnNoYXBlKSxoPVtdO2lmKDE9PT1vLnJhbmspe2Zvcih2YXIgcD0wO3A8dS5zaGFwZS5sZW5ndGgtMTsrK3ApaC5wdXNoKHUuc2hhcGVbcF0pO2gucHVzaCgxKX12YXIgZj1yLnN1YihvKSxkPXQubXVsKGwpLHY9UXMoaS5hZGQoQ24oYSkpKSxtPXYubXVsKHYpLm11bCh2KS5tdWwoQ24oLS41KSk7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIDE9PT1vLnJhbms/dC5tdWwoUnIodi5hczREKDEsMSwxLG8uc2hhcGVbMF0pLGgpKS5tdWwobCkucmVzaGFwZShyLnNoYXBlKTp0Lm11bCh2KS5tdWwobCkucmVzaGFwZShyLnNoYXBlKX0sJG1lYW46ZnVuY3Rpb24oKXt2YXIgdD12Lm11bChDbigtMSkpLm11bChkKTtyZXR1cm4gMT09PW8ucmFuayYmKHQ9dC5zdW0oYykpLHQucmVzaGFwZShvLnNoYXBlKX0sJHZhcmlhbmNlOmZ1bmN0aW9uKCl7dmFyIHQ9bS5tdWwoZikubXVsKGQpO3JldHVybiAxPT09by5yYW5rJiYodD10LnN1bShjKSksdC5yZXNoYXBlKG8uc2hhcGUpfSwkc2NhbGU6ZnVuY3Rpb24oKXt2YXIgZT1mLm11bCh2KSxuPXQubXVsKGUpO3JldHVybiAxPT09by5yYW5rJiYobj1uLnN1bShjKSksbi5yZXNoYXBlKG8uc2hhcGUpfSwkb2Zmc2V0OmZ1bmN0aW9uKCl7dmFyIGU9dDtyZXR1cm4gMT09PW8ucmFuayYmKGU9ZS5zdW0oYykpLGUucmVzaGFwZShvLnNoYXBlKX19fSkucmVzaGFwZShsLnNoYXBlKX1mdW5jdGlvbiB2dSh0KXtyZXR1cm4gbnVsbD09dD9udWxsOjA9PT10LnJhbms/dC5hczFEKCk6MT09PXQucmFuaz90OjI9PT10LnJhbms/dC5hczREKDEsMSx0LnNoYXBlWzBdLHQuc2hhcGVbMV0pOjM9PT10LnJhbms/dC5hczREKDEsdC5zaGFwZVswXSx0LnNoYXBlWzFdLHQuc2hhcGVbMl0pOnR9ZnVuY3Rpb24gbXUoKXtCZShcInRmLmJhdGNoTm9ybWFsaXphdGlvbigpIGlzIGdvaW5nIGF3YXkuIFVzZSB0Zi5iYXRjaE5vcm0oKSBpbnN0ZWFkLCBhbmQgbm90ZSB0aGUgcG9zaXRpb25hbCBhcmd1bWVudCBjaGFuZ2Ugb2Ygc2NhbGUsIG9mZnNldCwgYW5kIHZhcmlhbmNlRXBzaWxvblwiKX12YXIgZ3U9bW4oe2JhdGNoTm9ybWFsaXphdGlvbjJkXzpmdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIHZvaWQgMD09PXImJihyPS4wMDEpLG11KCksaHUodCxlLG4sYSxvLHIpfX0pLHl1PW1uKHtiYXRjaE5vcm1hbGl6YXRpb24zZF86ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj0uMDAxKSxtdSgpLHB1KHQsZSxuLGEsbyxyKX19KSx4dT1tbih7YmF0Y2hOb3JtYWxpemF0aW9uNGRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9LjAwMSksbXUoKSxmdSh0LGUsbixhLG8scil9fSksYnU9bW4oe2JhdGNoTm9ybWFsaXphdGlvbl86ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj0uMDAxKSxtdSgpLGR1KHQsZSxuLGEsbyxyKX19KSx3dT1tbih7YmF0Y2hOb3JtXzpkdX0pLEN1PW1uKHtiYXRjaE5vcm0yZF86aHV9KSxFdT1tbih7YmF0Y2hOb3JtM2RfOnB1fSksUnU9bW4oe2JhdGNoTm9ybTRkXzpmdX0pO3ZhciBJdT1tbih7bG9naWNhbEFuZF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwiYVwiLFwibG9naWNhbEFuZFwiLFwiYm9vbFwiKSxyPXJuKGUsXCJiXCIsXCJsb2dpY2FsQW5kXCIsXCJib29sXCIpO3JldHVybiBybyhuLnNoYXBlLHIuc2hhcGUpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5sb2dpY2FsQW5kKG4scil9LHskYTpuLCRiOnJ9KX19KSxrdT1tbih7bG9naWNhbE5vdF86ZnVuY3Rpb24odCl7dmFyIGU9cm4odCxcInhcIixcImxvZ2ljYWxOb3RcIixcImJvb2xcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5sb2dpY2FsTm90KGUpfSx7JHg6ZX0pfX0pLE51PW1uKHtsb2dpY2FsT3JfOmZ1bmN0aW9uKHQsZSl7dmFyIG49cm4odCxcImFcIixcImxvZ2ljYWxPclwiLFwiYm9vbFwiKSxyPXJuKGUsXCJiXCIsXCJsb2dpY2FsT3JcIixcImJvb2xcIik7cmV0dXJuIHJvKG4uc2hhcGUsci5zaGFwZSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmxvZ2ljYWxPcihuLHIpfSx7JGE6biwkYjpyfSl9fSksU3U9bW4oe2xvZ2ljYWxYb3JfOmZ1bmN0aW9uKHQsZSl7dmFyIG49cm4odCxcImFcIixcImxvZ2ljYWxYb3JcIixcImJvb2xcIikscj1ybihlLFwiYlwiLFwibG9naWNhbFhvclwiLFwiYm9vbFwiKTtyZXR1cm4gcm8obi5zaGFwZSxyLnNoYXBlKSxOdSh0LGUpLmxvZ2ljYWxBbmQoSXUodCxlKS5sb2dpY2FsTm90KCkpfX0pLEF1PW1uKHt3aGVyZV86ZnVuY3Rpb24odCxlLG4pe3ZhciByPXJuKGUsXCJhXCIsXCJ3aGVyZVwiKSxvPXJuKG4sXCJiXCIsXCJ3aGVyZVwiKSxhPXJuKHQsXCJjb25kaXRpb25cIixcIndoZXJlXCIsXCJib29sXCIpO3JldHVybiBkKHIuc2hhcGUsby5zaGFwZSxcIkVycm9yIGluIHdoZXJlOiBcIiksMT09PWEucmFuaz9mKGEuc2hhcGVbMF09PT1yLnNoYXBlWzBdLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZmlyc3QgZGltZW5zaW9uIG9mIGBhYCBtdXN0IG1hdGNoIHRoZSBzaXplIG9mIGBjb25kaXRpb25gLlwifSk6ZChhLnNoYXBlLG8uc2hhcGUsXCJFcnJvciBpbiB3aGVyZTogXCIpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQuc2VsZWN0KGEscixvKTtyZXR1cm4gZShbYV0pLG59LHskY29uZGl0aW9uOmEsJGE6ciwkYjpvfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyRjb25kaXRpb246ZnVuY3Rpb24oKXtyZXR1cm4gTW4obikudG9GbG9hdCgpfSwkYTpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmNhc3QodC5kdHlwZSkpfSwkYjpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmxvZ2ljYWxOb3QoKS5jYXN0KHQuZHR5cGUpKX19fSl9fSksVHU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbixvO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCwoZT1ybih0LFwiY29uZGl0aW9uXCIsXCJ3aGVyZUFzeW5jXCIsXCJib29sXCIpKS5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gbj1yLnNlbnQoKSxvPVRvKGUuc2hhcGUsbiksdCE9PWUmJmUuZGlzcG9zZSgpLFsyLG9dfX0pfSl9O3ZhciBEdT1tbih7YWRkXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9cm4odCxcImFcIixcImFkZFwiKSxvPXJuKGUsXCJiXCIsXCJhZGRcIik7bj13dChyLG8pLHI9blswXSxvPW5bMV07dmFyIGE9cm8oci5zaGFwZSxvLnNoYXBlKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFkZChyLG8pfSx7JGE6ciwkYjpvfSxmdW5jdGlvbih0KXtyZXR1cm57JGE6ZnVuY3Rpb24oKXt2YXIgZT10LG49bm8oci5zaGFwZSxhKTtyZXR1cm4gbi5sZW5ndGg+MCYmKGU9ZS5zdW0obikpLGUucmVzaGFwZShyLnNoYXBlKX0sJGI6ZnVuY3Rpb24oKXt2YXIgZT10LG49bm8oby5zaGFwZSxhKTtyZXR1cm4gbi5sZW5ndGg+MCYmKGU9ZS5zdW0obikpLGUucmVzaGFwZShvLnNoYXBlKX19fSl9fSksX3U9bW4oe2FkZE5fOmZ1bmN0aW9uKHQpe2YoQXJyYXkuaXNBcnJheSh0KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGFyZ3VtZW50IHBhc3NlZCB0byB0Zi5hZGROKCkgbXVzdCBiZSBhIGxpc3Qgb2YgdGVuc29yc1wifSksZih0Lmxlbmd0aD49MSxmdW5jdGlvbigpe3JldHVyblwiTXVzdCBwYXNzIGF0IGxlYXN0IG9uZSB0ZW5zb3IgdG8gdGYuYWRkTigpLCBidXQgZ290IFwiK3QubGVuZ3RofSk7dmFyIGU9dC5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm4gcm4odCxcInRlbnNvcnNcIitlLFwiYWRkTlwiKX0pLG49ZVswXTtlLmZvckVhY2goZnVuY3Rpb24odCl7aWYodC5kdHlwZSE9PW4uZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiQWxsIHRlbnNvcnMgcGFzc2VkIHRvIHRmLmFkZE4oKSBtdXN0IGhhdmUgdGhlIHNhbWUgZHR5cGVcIil9KSxlLmZvckVhY2goZnVuY3Rpb24odCl7aWYoIXkodC5zaGFwZSxuLnNoYXBlKSl0aHJvdyBuZXcgRXJyb3IoXCJBbGwgdGVuc29ycyBwYXNzZWQgdG8gdGYuYWRkTigpIG11c3QgaGF2ZSB0aGUgc2FtZSBzaGFwZVwiKX0pO3ZhciByPWU7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5hZGROKGUpfSxyLGZ1bmN0aW9uKHQpe3ZhciBuPXt9O3JldHVybiBlLmZvckVhY2goZnVuY3Rpb24oZSxyKXtuW3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHQuY2xvbmUoKX19KSxufSl9fSksT3U9bW4oe2FkZFN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwiYVwiLFwiYWRkU3RyaWN0XCIpLHI9cm4oZSxcImJcIixcImFkZFN0cmljdFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBhZGRTdHJpY3Q6IFwiKSxuLmFkZChyKX19KSxGdT1tbih7YXRhbjJfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ybih0LFwiYVwiLFwiYXRhbjJcIiksbz1ybihlLFwiYlwiLFwiYXRhbjJcIik7bj13dChyLG8pLHI9blswXSxvPW5bMV07dmFyIGE9cm8oci5zaGFwZSxvLnNoYXBlKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5hdGFuMihyLG8pO3JldHVybiBlKFtyLG9dKSxufSx7JGE6ciwkYjpvfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnskYTpmdW5jdGlvbigpe3ZhciBlPUR1KG4uc3F1YXJlKCksci5zcXVhcmUoKSksbz10Lm11bChyLmRpdihlKSksaT1ubyhuLnNoYXBlLGEpO3JldHVybiBpLmxlbmd0aD4wJiYobz1vLnN1bShpKSksby5yZXNoYXBlKG4uc2hhcGUpfSwkYjpmdW5jdGlvbigpe3ZhciBlPUR1KG4uc3F1YXJlKCksci5zcXVhcmUoKSksbz1qcyh0Lm11bChuLmRpdihlKSkpLGk9bm8oci5zaGFwZSxhKTtyZXR1cm4gaS5sZW5ndGg+MCYmKG89by5zdW0oaSkpLG8ucmVzaGFwZShyLnNoYXBlKX19fSl9fSksTXU9bW4oe2Rpdl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPXJuKHQsXCJhXCIsXCJkaXZcIiksbz1ybihlLFwiYlwiLFwiZGl2XCIpO2lmKG49d3QocixvKSxyPW5bMF0sbz1uWzFdLFwiaW50MzJcIj09PXIuZHR5cGUmJlwiaW50MzJcIj09PW8uZHR5cGUpcmV0dXJuIFB1KHIsbyk7dmFyIGE9cm8oci5zaGFwZSxvLnNoYXBlKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5yZWFsRGl2aWRlKHIsbyk7cmV0dXJuIGUoW3Isb10pLG59LHskYTpyLCRiOm99LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJueyRhOmZ1bmN0aW9uKCl7dmFyIGU9dC5kaXYoci50b0Zsb2F0KCkpLG89bm8obi5zaGFwZSxhKTtyZXR1cm4gby5sZW5ndGg+MD9lLnN1bShvKS5yZXNoYXBlKG4uc2hhcGUpOmV9LCRiOmZ1bmN0aW9uKCl7dmFyIGU9dC5tdWwobi50b0Zsb2F0KCkpLG89bm8oci5zaGFwZSxhKTtvLmxlbmd0aD4wJiYoZT1lLnN1bShvKS5yZXNoYXBlKHIuc2hhcGUpKTt2YXIgaT1yLnNxdWFyZSgpO3JldHVybiBlLmRpdihpLnRvRmxvYXQoKSkubmVnKCl9fX0pfX0pLEJ1PW1uKHtkaXZTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49cm4odCxcImFcIixcImRpdlwiKSxyPXJuKGUsXCJiXCIsXCJkaXZcIik7cmV0dXJuIGQobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gZGl2aWRlU3RyaWN0OiBcIiksbi5kaXYocil9fSksUHU9bW4oe2Zsb29yRGl2XzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9cm4odCxcImFcIixcImZsb29yRGl2XCIpLG89cm4oZSxcImJcIixcImZsb29yRGl2XCIpO249d3QocixvKSxyPW5bMF0sbz1uWzFdO3ZhciBhPXJvKHIuc2hhcGUsby5zaGFwZSk7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQuZmxvb3JEaXYocixvKTtyZXR1cm4gZShbcixvXSksbn0seyRhOnIsJGI6b30sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57JGE6ZnVuY3Rpb24oKXt2YXIgZT10LmRpdihyLnRvRmxvYXQoKSksbz1ubyhuLnNoYXBlLGEpO3JldHVybiBvLmxlbmd0aD4wP2Uuc3VtKG8pLnJlc2hhcGUobi5zaGFwZSk6ZX0sJGI6ZnVuY3Rpb24oKXt2YXIgZT10Lm11bChuLnRvRmxvYXQoKSksbz1ubyhyLnNoYXBlLGEpO28ubGVuZ3RoPjAmJihlPWUuc3VtKG8pLnJlc2hhcGUoci5zaGFwZSkpO3ZhciBpPXIuc3F1YXJlKCk7cmV0dXJuIGUuZGl2KGkudG9GbG9hdCgpKS5uZWcoKX19fSl9fSksTHU9bW4oe21heGltdW1fOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ybih0LFwiYVwiLFwibWF4aW11bVwiKSxvPXJuKGUsXCJiXCIsXCJtYXhpbXVtXCIpO3JldHVybiBuPXd0KHIsbykscj1uWzBdLG89blsxXSxcImJvb2xcIj09PXIuZHR5cGUmJihyPXIudG9JbnQoKSxvPW8udG9JbnQoKSkscm8oci5zaGFwZSxvLnNoYXBlKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1heGltdW0ocixvKTtyZXR1cm4gZShbcixvXSksbn0seyRhOnIsJGI6b30sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57JGE6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5ncmVhdGVyRXF1YWwocikudG9GbG9hdCgpKX0sJGI6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5sZXNzKHIpLnRvRmxvYXQoKSl9fX0pfX0pLFd1PW1uKHttYXhpbXVtU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPXJuKHQsXCJhXCIsXCJtYXhpbXVtU3RyaWN0XCIpLHI9cm4oZSxcImJcIixcIm1heGltdW1TdHJpY3RcIik7cmV0dXJuIGQobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gbWF4aW11bVN0cmljdDogXCIpLG4ubWF4aW11bShyKX19KSxVdT1tbih7bWluaW11bV86ZnVuY3Rpb24odCxlKXt2YXIgbixyPXJuKHQsXCJhXCIsXCJtaW5pbXVtXCIpLG89cm4oZSxcImJcIixcIm1pbmltdW1cIik7cmV0dXJuIG49d3QocixvKSxyPW5bMF0sbz1uWzFdLFwiYm9vbFwiPT09ci5kdHlwZSYmKHI9ci50b0ludCgpLG89by50b0ludCgpKSxybyhyLnNoYXBlLG8uc2hhcGUpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWluaW11bShyLG8pO3JldHVybiBlKFtyLG9dKSxufSx7JGE6ciwkYjpvfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnskYTpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmxlc3NFcXVhbChyKS50b0Zsb2F0KCkpfSwkYjpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmdyZWF0ZXIocikudG9GbG9hdCgpKX19fSl9fSksVnU9bW4oe21pbmltdW1TdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49cm4odCxcImFcIixcIm1pbmltdW1TdHJpY3RcIikscj1ybihlLFwiYlwiLFwibWluaW11bVN0cmljdFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBtaW5pbXVtU3RyaWN0OiBcIiksbi5taW5pbXVtKHIpfX0pLHp1PW1uKHttb2RfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ybih0LFwiYVwiLFwibW9kXCIpLG89cm4oZSxcImJcIixcIm1vZFwiKTtuPXd0KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1ybyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1vZChyLG8pO3JldHVybiBlKFtyLG9dKSxufSx7JGE6ciwkYjpvfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnskYTpmdW5jdGlvbigpe3ZhciBlPW5vKG4uc2hhcGUsYSk7cmV0dXJuIGUubGVuZ3RoPjA/dC5zdW0oZSkucmVzaGFwZShuLnNoYXBlKTp0fSwkYjpmdW5jdGlvbigpe3ZhciBlPXQubXVsKG4uZGl2KHIpLmZsb29yKCkubmVnKCkpLG89bm8oci5zaGFwZSxhKTtyZXR1cm4gby5sZW5ndGg+MD9lLnN1bShvKS5yZXNoYXBlKHIuc2hhcGUpOmV9fX0pfX0pLEd1PW1uKHttb2RTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49cm4odCxcImFcIixcIm1vZFN0cmljdFwiKSxyPXJuKGUsXCJiXCIsXCJtb2RTdHJpY3RcIik7cmV0dXJuIGQobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gbW9kU3RyaWN0OiBcIiksbi5tb2Qocil9fSksSHU9bW4oe211bF86ZnVuY3Rpb24odCxlKXt2YXIgbixyPXJuKHQsXCJhXCIsXCJtdWxcIiksbz1ybihlLFwiYlwiLFwibXVsXCIpO249d3QocixvKSxyPW5bMF0sbz1uWzFdO3ZhciBhPXJvKHIuc2hhcGUsby5zaGFwZSk7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQubXVsdGlwbHkocixvKTtyZXR1cm4gZShbcixvXSksbn0seyRhOnIsJGI6b30sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57JGE6ZnVuY3Rpb24oKXt2YXIgZT10Lm11bChyLnRvRmxvYXQoKSksbz1ubyhuLnNoYXBlLGEpO3JldHVybiBvLmxlbmd0aD4wP2Uuc3VtKG8pLnJlc2hhcGUobi5zaGFwZSk6ZX0sJGI6ZnVuY3Rpb24oKXt2YXIgZT10Lm11bChuLnRvRmxvYXQoKSksbz1ubyhyLnNoYXBlLGEpO3JldHVybiBvLmxlbmd0aD4wP2Uuc3VtKG8pLnJlc2hhcGUoci5zaGFwZSk6ZX19fSl9fSkscXU9bW4oe211bFN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwiYVwiLFwibXVsXCIpLHI9cm4oZSxcImJcIixcIm11bFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBtdWx0aXBseVN0cmljdDogXCIpLG4ubXVsKHIpfX0pLCR1PW1uKHtwb3dfOmZ1bmN0aW9uKHQsZSl7dmFyIG49cm4odCxcImJhc2VcIixcInBvd1wiKSxyPXJuKGUsXCJleHBcIixcInBvd1wiKSxvPXJvKG4uc2hhcGUsci5zaGFwZSk7cmV0dXJuIHQ9bi5jYXN0KHh0KG4uZHR5cGUsci5kdHlwZSkpLGU9ci5jYXN0KHh0KG4uZHR5cGUsci5kdHlwZSkpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBvPXQucG93KG4scik7cmV0dXJuIGUoW24scixvXSksb30seyRiYXNlOm4sJGV4cDpyfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLGE9ZVsyXTtyZXR1cm57JGJhc2U6ZnVuY3Rpb24oKXt2YXIgZT1yLnRvRmxvYXQoKSxhPXQubXVsKGUubXVsKG4ucG93KGUuc3ViKENuKDEpKSkpKSxpPW5vKG4uc2hhcGUsbyk7cmV0dXJuIGkubGVuZ3RoPjAmJihhPWEuc3VtKGkpKSxhLnJlc2hhcGUobi5zaGFwZSl9LCRleHA6ZnVuY3Rpb24oKXt2YXIgZT1uLmdyZWF0ZXIoMCksaT1uLmxvZygpLndoZXJlKGUsTW4obikpLHM9dC5tdWwoYS5tdWwoaSkpLHU9bm8oci5zaGFwZSxvKTtyZXR1cm4gdS5sZW5ndGg+MCYmKHM9cy5zdW0odSkpLHMucmVzaGFwZShyLnNoYXBlKX19fSl9fSksS3U9bW4oe3Bvd1N0cmljdF86ZnVuY3Rpb24odCxlKXtyZXR1cm4gZCh0LnNoYXBlLGUuc2hhcGUsXCJFcnJvciBpbiBwb3dTdHJpY3Q6IFwiKSx0LnBvdyhlKX19KSxqdT1tbih7c3F1YXJlZERpZmZlcmVuY2VfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ybih0LFwiYVwiLFwic3F1YXJlZERpZmZlcmVuY2VcIiksbz1ybihlLFwiYlwiLFwic3F1YXJlZERpZmZlcmVuY2VcIik7cmV0dXJuIG49d3QocixvKSxyPW5bMF0sbz1uWzFdLHJvKHIuc2hhcGUsby5zaGFwZSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5zcXVhcmVkRGlmZmVyZW5jZShyLG8pO3JldHVybiBlKFtyLG9dKSxufSx7JGE6ciwkYjpvfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLG89Q24oMik7cmV0dXJueyRhOmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4uc3ViKHIpLm11bChvKSl9LCRiOmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKHIuc3ViKG4pLm11bChvKSl9fX0pfX0pLFh1PW1uKHtzcXVhcmVkRGlmZmVyZW5jZVN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwiYVwiLFwic3F1YXJlZERpZmZlcmVuY2VTdHJpY3RcIikscj1ybihlLFwiYlwiLFwic3F1YXJlZERpZmZlcmVuY2VTdHJpY3RcIik7cmV0dXJuIGQobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gc3F1YXJlZERpZmZlcmVuY2VTdHJpY3Q6IFwiKSxuLnNxdWFyZWREaWZmZXJlbmNlKHIpfX0pLFl1PW1uKHtzdWJfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ybih0LFwiYVwiLFwic3ViXCIpLG89cm4oZSxcImJcIixcInN1YlwiKTtuPXd0KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1ybyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3VidHJhY3QocixvKX0seyRhOnIsJGI6b30sZnVuY3Rpb24odCl7cmV0dXJueyRhOmZ1bmN0aW9uKCl7dmFyIGU9dCxuPW5vKHIuc2hhcGUsYSk7cmV0dXJuIG4ubGVuZ3RoPjAmJihlPWUuc3VtKG4pKSxlLnJlc2hhcGUoci5zaGFwZSl9LCRiOmZ1bmN0aW9uKCl7dmFyIGU9dCxuPW5vKG8uc2hhcGUsYSk7cmV0dXJuIG4ubGVuZ3RoPjAmJihlPWUuc3VtKG4pKSxlLm5lZygpLnJlc2hhcGUoby5zaGFwZSl9fX0pfX0pLFF1PW1uKHtzdWJTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49cm4odCxcImFcIixcInN1YlN0cmljdFwiKSxyPXJuKGUsXCJiXCIsXCJzdWJTdHJpY3RcIik7cmV0dXJuIGQobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gc3ViU3RyaWN0OiBcIiksbi5zdWIocil9fSk7dmFyIEp1PW1uKHtlcXVhbF86ZnVuY3Rpb24odCxlKXt2YXIgbixyPXJuKHQsXCJhXCIsXCJlcXVhbFwiKSxvPXJuKGUsXCJiXCIsXCJlcXVhbFwiKTtyZXR1cm4gbj13dChyLG8pLHI9blswXSxvPW5bMV0scm8oci5zaGFwZSxvLnNoYXBlKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuZXF1YWwocixvKX0seyRhOnIsJGI6b30pfX0pLFp1PW1uKHtlcXVhbFN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwiYVwiLFwiZXF1YWxTdHJpY3RcIikscj1ybihlLFwiYlwiLFwiZXF1YWxTdHJpY3RcIik7cmV0dXJuIGQobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gZXF1YWxTdHJpY3Q6IFwiKSxuLmVxdWFsKHIpfX0pLHRsPW1uKHtncmVhdGVyXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9cm4odCxcImFcIixcImdyZWF0ZXJcIiksbz1ybihlLFwiYlwiLFwiZ3JlYXRlclwiKTtyZXR1cm4gbj13dChyLG8pLHI9blswXSxvPW5bMV0scm8oci5zaGFwZSxvLnNoYXBlKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuZ3JlYXRlcihyLG8pfSx7JGE6ciwkYjpvfSl9fSksZWw9bW4oe2dyZWF0ZXJFcXVhbF86ZnVuY3Rpb24odCxlKXt2YXIgbixyPXJuKHQsXCJhXCIsXCJncmVhdGVyRXF1YWxcIiksbz1ybihlLFwiYlwiLFwiZ3JlYXRlckVxdWFsXCIpO3JldHVybiBuPXd0KHIsbykscj1uWzBdLG89blsxXSxybyhyLnNoYXBlLG8uc2hhcGUpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQuZ3JlYXRlckVxdWFsKHIsbyk7cmV0dXJuIGUoW3Isb10pLG59LHskYTpyLCRiOm99LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJueyRhOmZ1bmN0aW9uKCl7cmV0dXJuIE1uKG4pfSwkYjpmdW5jdGlvbigpe3JldHVybiBNbihyKX19fSl9fSksbmw9bW4oe2dyZWF0ZXJFcXVhbFN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwiYVwiLFwiZ3JlYXRlckVxdWFsU3RyaWN0XCIpLHI9cm4oZSxcImJcIixcImdyZWF0ZXJFcXVhbFN0cmljdFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBncmVhdGVyRXF1YWxTdHJpY3Q6IFwiKSxuLmdyZWF0ZXJFcXVhbChyKX19KSxybD1tbih7Z3JlYXRlclN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwiYVwiLFwiZ3JlYXRlclN0cmljdFwiKSxyPXJuKGUsXCJiXCIsXCJncmVhdGVyU3RyaWN0XCIpO3JldHVybiBkKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIGdyZWF0ZXJTdHJpY3Q6IFwiKSxuLmdyZWF0ZXIocil9fSksb2w9bW4oe2xlc3NfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ybih0LFwiYVwiLFwibGVzc1wiKSxvPXJuKGUsXCJiXCIsXCJsZXNzXCIpO3JldHVybiBuPXd0KHIsbykscj1uWzBdLG89blsxXSxybyhyLnNoYXBlLG8uc2hhcGUpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5sZXNzKHIsbyl9LHskYTpyLCRiOm99KX19KSxhbD1tbih7bGVzc0VxdWFsXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9cm4odCxcImFcIixcImxlc3NFcXVhbFwiKSxvPXJuKGUsXCJiXCIsXCJsZXNzRXF1YWxcIik7cmV0dXJuIG49d3QocixvKSxyPW5bMF0sbz1uWzFdLHJvKHIuc2hhcGUsby5zaGFwZSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0Lmxlc3NFcXVhbChyLG8pfSx7JGE6ciwkYjpvfSl9fSksaWw9bW4oe2xlc3NFcXVhbFN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwiYVwiLFwibGVzc0VxdWFsU3RyaWN0XCIpLHI9cm4oZSxcImJcIixcImxlc3NFcXVhbFN0cmljdFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBsZXNzRXF1YWxTdHJpY3Q6IFwiKSxuLmxlc3NFcXVhbChyKX19KSxzbD1tbih7bGVzc1N0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwiYVwiLFwibGVzc1N0cmljdFwiKSxyPXJuKGUsXCJiXCIsXCJsZXNzU3RyaWN0XCIpO3JldHVybiBkKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIGxlc3NTdHJpY3Q6IFwiKSxuLmxlc3Mocil9fSksdWw9bW4oe25vdEVxdWFsXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9cm4odCxcImFcIixcIm5vdEVxdWFsXCIpLG89cm4oZSxcImJcIixcIm5vdEVxdWFsXCIpO3JldHVybiBuPXd0KHIsbykscj1uWzBdLG89blsxXSxybyhyLnNoYXBlLG8uc2hhcGUpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5ub3RFcXVhbChyLG8pfSx7JGE6ciwkYjpvfSl9fSksbGw9bW4oe25vdEVxdWFsU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPXJuKHQsXCJhXCIsXCJub3RFcXVhbFN0cmljdFwiKSxyPXJuKGUsXCJiXCIsXCJub3RFcXVhbFN0cmljdFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBub3RFcXVhbFN0cmljdDogXCIpLG4ubm90RXF1YWwocil9fSk7ZnVuY3Rpb24gY2wodCxlKXtmb3IodmFyIG49W10scj10O3I8ZTsrK3Ipbi5wdXNoKHIpO3JldHVybiBufWZ1bmN0aW9uIGhsKHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0Lmxlbmd0aDsrK24pZm9yKHZhciByPTA7cjx0W25dLmxlbmd0aDsrK3IpZS5wdXNoKHRbbl1bcl0pO3JldHVybiBlfXZhciBwbD1tbih7Z2F0aGVyXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49MCk7dmFyIHI9cm4odCxcInhcIixcImdhdGhlclwiKSxvPXJuKGUsXCJpbmRpY2VzXCIsXCJnYXRoZXJcIixcImludDMyXCIpO249SShuLHIuc2hhcGUpWzBdO3ZhciBhPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9dC5zaGFwZVtuXSxvPVtdLGE9MSxpPTEscz0wO3M8bjtzKyspby5wdXNoKHQuc2hhcGVbc10pLGEqPXQuc2hhcGVbc107Zm9yKHM9MDtzPGUucmFuaztzKyspby5wdXNoKGUuc2hhcGVbc10pO2ZvcihzPW4rMTtzPHQucmFuaztzKyspby5wdXNoKHQuc2hhcGVbc10pLGkqPXQuc2hhcGVbc107cmV0dXJue2JhdGNoU2l6ZTphLHNsaWNlU2l6ZTppLGRpbVNpemU6cixvdXRwdXRTaGFwZTpvfX0ocixvLG4pO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgYT10LmdhdGhlcihyLG8uZmxhdHRlbigpLG4pO3JldHVybiBlKFtvXSksYX0seyR4OnJ9LGZ1bmN0aW9uKHQsZSl7dmFyIG89ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXt2YXIgZT1yLnNoYXBlLGE9by5zaXplLGk9ZS5zbGljZSgwLG4pLHM9aS5sZW5ndGgsdT1lLnNsaWNlKG4sZS5sZW5ndGgpLnNsaWNlKDEpLGw9dS5sZW5ndGgsYz1jbCgwLHMpLGg9Y2wocysxLHMrMStsKSxwPWhsKFtpLFthXSx1XSksZj10LnJlc2hhcGUocCksZD1vLnJlc2hhcGUoW2FdKSx2PWhsKFtbc10sYyxoXSksbT1mLnRyYW5zcG9zZSh2KSxnPWZsKG0sZCxyLnNoYXBlW25dKSx5PXBuKHYpO3JldHVybiBnPWcudHJhbnNwb3NlKHkpfX19KS5yZXNoYXBlKGEub3V0cHV0U2hhcGUpfX0pLGZsPW1uKHt1bnNvcnRlZFNlZ21lbnRTdW1fOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1ybih0LFwieFwiLFwidW5zb3J0ZWRTZWdtZW50U3VtXCIpLG89cm4oZSxcInNlZ21lbnRJZHNcIixcInVuc29ydGVkU2VnbWVudFN1bVwiLFwiaW50MzJcIik7cmV0dXJuIGYoeChuKSxmdW5jdGlvbigpe3JldHVyblwibnVtU2VnbWVudHMgbXVzdCBiZSBvZiBkdHlwZSBpbnRcIn0pLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBhPXQudW5zb3J0ZWRTZWdtZW50U3VtKHIsbyxuKTtyZXR1cm4gZShbb10pLGF9LHskeDpyfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPUx1KGUsTW4oZSkpLHI9cGwodCxuKSxvPWVsKGUsQ24oMCxcImludDMyXCIpKSxhPXIucmFuay1vLnJhbmssaT0wO2k8YTsrK2kpbz1zcihvLGkrMSk7bz1JdShvLEFuKHIuc2hhcGUsXCJib29sXCIpKTt2YXIgcz1NbihyKTtyZXR1cm4gQXUobyxyLHMpfSh0LG4pfX19KX19KTt2YXIgZGw9ZnVuY3Rpb24odCxlLG8pe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBuLGEsaSxzLHUsbCxjLGgscCx2LG0sZyx5O3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpmb3Iobj1ybih0LFwidGVuc29yXCIsXCJib29sTWFza1wiKSxhPXJuKGUsXCJtYXNrXCIsXCJib29sTWFza1wiLFwiYm9vbFwiKSxpPW51bGw9PW8/MDpvLHM9YS5yYW5rLHU9bi5zaGFwZSxmKHM+MCxmdW5jdGlvbigpe3JldHVyblwibWFzayBjYW5ub3QgYmUgc2NhbGFyXCJ9KSxkKHUuc2xpY2UoaSxpK3MpLGEuc2hhcGUsXCJtYXNrJ3Mgc2hhcGUgbXVzdCBtYXRjaCB0aGUgZmlyc3QgSyBkaW1lbnNpb25zIG9mIHRlbnNvcidzIHNoYXBlLFwiKSxsPTEsYz1pO2M8aStzO2MrKylsKj11W2NdO3JldHVybiBoPXUuc2xpY2UoMCxpKS5jb25jYXQoW2xdLHUuc2xpY2UoaStzKSkscD1uLnJlc2hhcGUoaCksdj1hLnJlc2hhcGUoWy0xXSksWzQsVHUodildO2Nhc2UgMTpyZXR1cm4gbT1yLnNlbnQoKSxnPW0uc3F1ZWV6ZShbMV0pLHk9cGwocCxnLGkpLHQhPT1uJiZuLmRpc3Bvc2UoKSxlIT09YSYmYS5kaXNwb3NlKCksZy5kaXNwb3NlKCkscC5kaXNwb3NlKCksdi5kaXNwb3NlKCksbS5kaXNwb3NlKCksWzIseV19fSl9KX07ZnVuY3Rpb24gdmwodCxlLG4scixvLGEsaSl7dm9pZCAwPT09YSYmKGE9XCJOSFdDXCIpLGYodC5sZW5ndGg9PT1lLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkxlbmd0aCBvZiBpblNoYXBlIChcIit0Lmxlbmd0aCtcIikgYW5kIHJhbmsgb2YgZHkgKFwiK2UucmFuaytcIikgbXVzdCBtYXRjaFwifSk7dmFyIHM9dCx1PWUsbD0hMTszPT09ZS5yYW5rJiYobD0hMCx1PWUuYXM0RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdKSxzPVsxLHRbMF0sdFsxXSx0WzJdXSksZig0PT09cy5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBpblNoYXBlIG11c3QgYmUgbGVuZ3RoIDQsIGJ1dCBnb3QgbGVuZ3RoIFwiK3MubGVuZ3RoK1wiLlwifSksZig0PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJJbnB1dDogZHkgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIit1LnJhbmt9KSxmKDQ9PT1uLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBmaWx0ZXIgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIituLnJhbmt9KTt2YXIgYz1cIk5IV0NcIj09PWE/c1szXTpzWzFdLGg9XCJOSFdDXCI9PT1hP3Uuc2hhcGVbM106dS5zaGFwZVsxXTtmKGM9PT1uLnNoYXBlWzJdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJJbnB1dDogZGVwdGggb2YgaW5wdXQgKFwiK2MrXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIituLnNoYXBlWzJdK1wiLlwifSksZihoPT09bi5zaGFwZVszXSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVySW5wdXQ6IGRlcHRoIG9mIG91dHB1dCAoXCIraCtcIikgbXVzdCBtYXRjaCBvdXRwdXQgZGVwdGggZm9yIGZpbHRlciBcIituLnNoYXBlWzNdK1wiLlwifSksbnVsbCE9aSYmZih4KG8pLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJJbnB1dDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIraStcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSk7dmFyIHA9bW8oYSksZD1pbyhzLG4uc2hhcGUsciwxLG8saSwhMSxwKSx2PVN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciByPXQuY29udjJkRGVySW5wdXQodSxuLGQpO3JldHVybiBlKFtuLHVdKSxyfSx7ZHk0RDp1LGZpbHRlcjpufSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scz1lWzFdO3JldHVybntkeTREOmZ1bmN0aW9uKCl7cmV0dXJuIHhsKHQsbixyLG8sYSwxLGkpfSxmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gd2wodCxzLG4uc2hhcGUscixvLGEsaSl9fX0pO3JldHVybiBsP3YuYXMzRCh2LnNoYXBlWzFdLHYuc2hhcGVbMl0sdi5zaGFwZVszXSk6dn1mdW5jdGlvbiBtbCh0KXt2YXIgZT1mdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdD9bdCx0LHRdOjI9PT10Lmxlbmd0aD9bdFswXSx0WzFdLDFdOnR9KHQpLG49ZVswXSxyPWVbMV0sbz1lWzJdO3JldHVybiAxPT09biYmMT09PXImJjE9PT1vfWZ1bmN0aW9uIGdsKHQsZSxuLHIsbyl7Zih0Lmxlbmd0aD09PWUucmFuayxmdW5jdGlvbigpe3JldHVyblwiTGVuZ3RoIG9mIGluU2hhcGUgKFwiK3QubGVuZ3RoK1wiKSBhbmQgcmFuayBvZiBkeSAoXCIrZS5yYW5rK1wiKSBtdXN0IG1hdGNoXCJ9KTt2YXIgYT10LGk9ZSxzPSExOzQ9PT1lLnJhbmsmJihzPSEwLGk9ZS5hczVEKDEsZS5zaGFwZVswXSxlLnNoYXBlWzFdLGUuc2hhcGVbMl0sZS5zaGFwZVszXSksYT1bMSx0WzBdLHRbMV0sdFsyXSx0WzNdXSk7dmFyIHU9YVs0XSxsPWkuc2hhcGVbNF07Zig1PT09YS5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlcklucHV0OiBpblNoYXBlIG11c3QgYmUgbGVuZ3RoIDUsIGJ1dCBnb3QgbGVuZ3RoIFwiK2EubGVuZ3RoK1wiLlwifSksZig1PT09aS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJJbnB1dDogZHkgbXVzdCBiZSByYW5rIDUsIGJ1dCBnb3QgcmFuayBcIitpLnJhbmt9KSxmKDU9PT1uLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlcklucHV0OiBmaWx0ZXIgbXVzdCBiZSByYW5rIDUsIGJ1dCBnb3QgcmFuayBcIituLnJhbmt9KSxmKHU9PT1uLnNoYXBlWzNdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJJbnB1dDogZGVwdGggb2YgaW5wdXQgKFwiK3UrXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIituLnNoYXBlWzNdK1wiLlwifSksZihsPT09bi5zaGFwZVs0XSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjNkRGVySW5wdXQ6IGRlcHRoIG9mIG91dHB1dCAoXCIrbCtcIikgbXVzdCBtYXRjaCBvdXRwdXQgZGVwdGggZm9yIGZpbHRlciBcIituLnNoYXBlWzRdK1wiLlwifSk7dmFyIGM9c28oYSxuLnNoYXBlLHIsMSxvKSxoPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb252M2REZXJJbnB1dChpLG4sYyl9LHtkeTVEOml9KTtyZXR1cm4gcz9oLmFzNEQoaC5zaGFwZVsxXSxoLnNoYXBlWzJdLGguc2hhcGVbM10saC5zaGFwZVs0XSk6aH12YXIgeWw9bW4oe2NvbnYxZF86ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09byYmKG89XCJOV0NcIiksdm9pZCAwPT09YSYmKGE9MSk7dmFyIHM9cm4odCxcInhcIixcImNvbnYxZFwiKSx1PXJuKGUsXCJmaWx0ZXJcIixcImNvbnYxZFwiKSxsPXMsYz0hMTsyPT09cy5yYW5rJiYoYz0hMCxsPXMuYXMzRCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSkpLGYoMz09PWwucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjFkOiBpbnB1dCBtdXN0IGJlIHJhbmsgMywgYnV0IGdvdCByYW5rIFwiK2wucmFuaytcIi5cIn0pLGYoMz09PXUucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjFkOiBmaWx0ZXIgbXVzdCBiZSByYW5rIDMsIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSxudWxsIT1pJiZmKHgociksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxZDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIraStcIiBidXQgZ290IHBhZCBcIityK1wiLlwifSksZihsLnNoYXBlWzJdPT09dS5zaGFwZVsxXSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjFkOiBkZXB0aCBvZiBpbnB1dCAoXCIrbC5zaGFwZVsyXStcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBmb3IgZmlsdGVyIFwiK3Uuc2hhcGVbMV0rXCIuXCJ9KSxmKHZvKG4sYSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxRDogRWl0aGVyIHN0cmlkZSBvciBkaWxhdGlvbiBtdXN0IGJlIDEuIEdvdCBzdHJpZGUgXCIrbitcIiBhbmQgZGlsYXRpb24gJ1wiK2ErXCInXCJ9KSxmKFwiTldDXCI9PT1vLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MWQ6IGdvdCBkYXRhRm9ybWF0IG9mIFwiK28rXCIgYnV0IG9ubHkgTldDIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuXCJ9KTt2YXIgaD11LmFzNEQoMSx1LnNoYXBlWzBdLHUuc2hhcGVbMV0sdS5zaGFwZVsyXSkscD1sLmFzNEQobC5zaGFwZVswXSwxLGwuc2hhcGVbMV0sbC5zaGFwZVsyXSksZD14bChwLGgsWzEsbl0scixcIk5IV0NcIixbMSxhXSxpKTtyZXR1cm4gYz9kLmFzMkQoZC5zaGFwZVsyXSxkLnNoYXBlWzNdKTpkLmFzM0QoZC5zaGFwZVswXSxkLnNoYXBlWzJdLGQuc2hhcGVbM10pfX0pLHhsPW1uKHtjb252MmRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PW8mJihvPVwiTkhXQ1wiKSx2b2lkIDA9PT1hJiYoYT1bMSwxXSk7dmFyIHM9cm4odCxcInhcIixcImNvbnYyZFwiKSx1PXJuKGUsXCJmaWx0ZXJcIixcImNvbnYyZFwiKSxsPXMsYz0hMTszPT09cy5yYW5rJiYoYz0hMCxsPXMuYXM0RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdKSksZig0PT09bC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSksZig0PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pLG51bGwhPWkmJmYoeChyKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitpK1wiIGJ1dCBnb3QgcGFkIFwiK3IrXCIuXCJ9KTt2YXIgaD1cIk5IV0NcIj09PW8/bC5zaGFwZVszXTpsLnNoYXBlWzFdO2YoaD09PXUuc2hhcGVbMl0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZDogZGVwdGggb2YgaW5wdXQgKFwiK2grXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIit1LnNoYXBlWzJdK1wiLlwifSksZih2byhuLGEpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MkQ6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrYStcIidcIn0pO3ZhciBwPW1vKG8pLGQ9aW8obC5zaGFwZSx1LnNoYXBlLG4sYSxyLGksITEscCksdj1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10LmNvbnYyZChsLHUsZCk7cmV0dXJuIGUoW3UsbF0pLG59LHt4OmwsJGZpbHRlcjp1fSxmdW5jdGlvbih0LGUpe3ZhciBpPWUscz1pWzBdLHU9aVsxXTtyZXR1cm4gZihmbyhhKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZ3JhZGllbnQgb2YgY29udjJEOiBkaWxhdGlvbiByYXRlcyBncmVhdGVyIHRoYW4gMSBhcmUgbm90IHlldCBzdXBwb3J0ZWQgaW4gZ3JhZGllbnRzLiBHb3QgZGlsYXRpb25zICdcIithK1wiJ1wifSkse3g6ZnVuY3Rpb24oKXtyZXR1cm4gQ2wodS5zaGFwZSx0LHMsbixyLG8pfSwkZmlsdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHdsKHUsdCxzLnNoYXBlLG4scixvKX19fSk7cmV0dXJuIGM/di5hczNEKHYuc2hhcGVbMV0sdi5zaGFwZVsyXSx2LnNoYXBlWzNdKTp2fX0pLGJsPW1uKHtjb252M2RfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2b2lkIDA9PT1vJiYobz1cIk5ESFdDXCIpLHZvaWQgMD09PWEmJihhPVsxLDEsMV0pO3ZhciBpPXJuKHQsXCJ4XCIsXCJjb252M2RcIikscz1ybihlLFwiZmlsdGVyXCIsXCJjb252M2RcIiksdT1pLGw9ITE7ND09PWkucmFuayYmKGw9ITAsdT1pLmFzNUQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSxpLnNoYXBlWzNdKSksZig1PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2Q6IGlucHV0IG11c3QgYmUgcmFuayA1LCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSksZig1PT09cy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2Q6IGZpbHRlciBtdXN0IGJlIHJhbmsgNSwgYnV0IGdvdCByYW5rIFwiK3MucmFuaytcIi5cIn0pLGYodS5zaGFwZVs0XT09PXMuc2hhcGVbM10sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZDogZGVwdGggb2YgaW5wdXQgKFwiK3Uuc2hhcGVbNF0rXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIitzLnNoYXBlWzNdK1wiLlwifSksZihmdW5jdGlvbih0LGUpe3JldHVybiBtbCh0KXx8bWwoZSl9KG4sYSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzRDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrbitcIiBhbmQgZGlsYXRpb25zICdcIithK1wiJ1wifSksZihcIk5ESFdDXCI9PT1vLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2Q6IGdvdCBkYXRhRm9ybWF0IG9mIFwiK28rXCIgYnV0IG9ubHkgTkRIV0MgaXMgY3VycmVudGx5IHN1cHBvcnRlZC5cIn0pO3ZhciBjPXNvKHUuc2hhcGUscy5zaGFwZSxuLGEsciksaD1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10LmNvbnYzZCh1LHMsYyk7cmV0dXJuIGUoW3Usc10pLG59LHt4OnUsJGZpbHRlcjpzfSxmdW5jdGlvbih0LGUpe2YobWwoYSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGdyYWRpZW50IG9mIGNvbnYzRDogZGlsYXRpb24gcmF0ZXMgZ3JlYXRlciB0aGFuIDEgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkIGluIGdyYWRpZW50cy4gR290IGRpbGF0aW9ucyAnXCIrYStcIidcIn0pO3ZhciBvPWVbMF0saT1lWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGdsKG8uc2hhcGUsdCxpLG4scil9LCRmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10OzQ9PT10LnJhbmsmJihhPXQuYXM1RCgxLHQuc2hhcGVbMF0sdC5zaGFwZVsxXSx0LnNoYXBlWzJdLHQuc2hhcGVbM10pKTt2YXIgaT1lOzQ9PT1pLnJhbmsmJihpPWUuYXM1RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdLGUuc2hhcGVbM10pKSxmKDU9PT1hLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlckZpbHRlcjogaW5wdXQgbXVzdCBiZSByYW5rIDUsIGJ1dCBnb3Qgc2hhcGUgXCIrYS5zaGFwZStcIi5cIn0pLGYoNT09PWkucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjNkRGVyRmlsdGVyOiBkeSBtdXN0IGJlIHJhbmsgNSwgYnV0IGdvdCBzaGFwZSBcIitpLnNoYXBlK1wiLlwifSksZig1PT09bi5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlckZpbHRlcjogZmlsdGVyU2hhcGUgbXVzdCBiZSBsZW5ndGggNSwgYnV0IGdvdCBcIituK1wiLlwifSksZihhLnNoYXBlWzRdPT09blszXSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjNkRGVyRmlsdGVyOiBkZXB0aCBvZiBpbnB1dCBcIithLnNoYXBlWzRdK1wiKSBtdXN0IG1hdGNoIGlucHV0IGRlcHRoIGluIGZpbHRlciAoXCIrblszXStcIi5cIn0pLGYoaS5zaGFwZVs0XT09PW5bNF0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlckZpbHRlcjogZGVwdGggb2YgZHkgKFwiK2kuc2hhcGVbNF0rXCIpIG11c3QgbWF0Y2ggb3V0cHV0IGRlcHRoIGZvciBmaWx0ZXIgKFwiK25bNF0rXCIpLlwifSk7dmFyIHM9c28oYS5zaGFwZSxuLHIsMSxvKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnYzZERlckZpbHRlcihhLGkscyl9LHt4NUQ6YSxkeTVEOml9KX0obyx0LGkuc2hhcGUsbixyKX19fSk7cmV0dXJuIGw/aC5hczREKGguc2hhcGVbMV0saC5zaGFwZVsyXSxoLnNoYXBlWzNdLGguc2hhcGVbNF0pOmh9fSksd2w9bW4oe2NvbnYyZERlckZpbHRlcl86ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09YSYmKGE9XCJOSFdDXCIpO3ZhciBzPXQ7Mz09PXQucmFuayYmKHM9dC5hczREKDEsdC5zaGFwZVswXSx0LnNoYXBlWzFdLHQuc2hhcGVbMl0pKTt2YXIgdT1lOzM9PT11LnJhbmsmJih1PWUuYXM0RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdKSksZig0PT09cy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJGaWx0ZXI6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHNoYXBlIFwiK3Muc2hhcGUrXCIuXCJ9KSxmKDQ9PT11LnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlckZpbHRlcjogZHkgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3Qgc2hhcGUgXCIrdS5zaGFwZStcIi5cIn0pLGYoND09PW4ubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJGaWx0ZXI6IGZpbHRlclNoYXBlIG11c3QgYmUgbGVuZ3RoIDQsIGJ1dCBnb3QgXCIrbitcIi5cIn0pO3ZhciBsPVwiTkhXQ1wiPT09YT9zLnNoYXBlWzNdOnMuc2hhcGVbMV0sYz1cIk5IV0NcIj09PWE/dS5zaGFwZVszXTp1LnNoYXBlWzFdO2YobD09PW5bMl0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlckZpbHRlcjogZGVwdGggb2YgaW5wdXQgXCIrbCtcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBpbiBmaWx0ZXIgKFwiK25bMl0rXCIuXCJ9KSxmKGM9PT1uWzNdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJGaWx0ZXI6IGRlcHRoIG9mIGR5IChcIitjK1wiKSBtdXN0IG1hdGNoIG91dHB1dCBkZXB0aCBmb3IgZmlsdGVyIChcIituWzNdK1wiKS5cIn0pLG51bGwhPWkmJmYoeChvKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVyRmlsdGVyOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitpK1wiIGJ1dCBnb3QgcGFkIFwiK28rXCIuXCJ9KTt2YXIgaD1tbyhhKSxwPWlvKHMuc2hhcGUsbixyLDEsbyxpLCExLGgpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuY29udjJkRGVyRmlsdGVyKHMsdSxwKX0se3g0RDpzLGR5NEQ6dX0pfX0pLENsPW1uKHtjb252MmREZXJJbnB1dF86dmx9KSxFbD1tbih7ZGVwdGh3aXNlQ29udjJkXzpmdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1vJiYobz1cIk5IV0NcIiksdm9pZCAwPT09YSYmKGE9WzEsMV0pO3ZhciBzPXJuKHQsXCJ4XCIsXCJkZXB0aHdpc2VDb252MmRcIiksdT1ybihlLFwiZmlsdGVyXCIsXCJkZXB0aHdpc2VDb252MmRcIiksbD1zLGM9ITE7Mz09PXMucmFuayYmKGM9ITAsbD1zLmFzNEQoMSxzLnNoYXBlWzBdLHMuc2hhcGVbMV0scy5zaGFwZVsyXSkpLGYoND09PWwucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZGVwdGh3aXNlQ29udjJkOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK2wucmFuaytcIi5cIn0pLGYoND09PXUucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZGVwdGh3aXNlQ29udjJkOiBmaWx0ZXIgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSxmKGwuc2hhcGVbM109PT11LnNoYXBlWzJdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkZXB0aHdpc2VDb252MmQ6IG51bWJlciBvZiBpbnB1dCBjaGFubmVscyAoXCIrbC5zaGFwZVszXStcIikgbXVzdCBtYXRjaCB0aGUgaW5DaGFubmVscyBkaW1lbnNpb24gaW4gZmlsdGVyIFwiK3Uuc2hhcGVbMl0rXCIuXCJ9KSxudWxsPT1hJiYoYT1bMSwxXSksZih2byhuLGEpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkZXB0aHdpc2VDb252MmQ6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrYStcIidcIn0pLG51bGwhPWkmJmYoeChyKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZGVwdGh3aXNlQ29udjJkOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitpK1wiIGJ1dCBnb3QgcGFkIFwiK3IrXCIuXCJ9KTt2YXIgaD1pbyhsLnNoYXBlLHUuc2hhcGUsbixhLHIsaSwhMCkscD1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10LmRlcHRod2lzZUNvbnYyRChsLHUsaCk7cmV0dXJuIGUoW2wsdV0pLG59LHt4OmwsJGZpbHRlcjp1fSxmdW5jdGlvbih0LGUpe2YoZm8oYSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGdyYWRpZW50IG9mIGRlcHRod2lzZUNvbnYyZDogZGlsYXRpb24gcmF0ZXMgZ3JlYXRlciB0aGFuIDEgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkLiBHb3QgZGlsYXRpb25zICdcIithK1wiJ1wifSk7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gUmwobi5zaGFwZSx0LHIsaCl9LCRmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gSWwobix0LHIuc2hhcGUsaCl9fX0pO3JldHVybiBjP3AuYXMzRChwLnNoYXBlWzFdLHAuc2hhcGVbMl0scC5zaGFwZVszXSk6cH19KSxSbD1tbih7ZGVwdGh3aXNlQ29udjJkRGVySW5wdXRfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPWUsYT0hMTszPT09ZS5yYW5rJiYoYT0hMCxvPWUuYXM0RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdKSk7dmFyIGk9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRlcHRod2lzZUNvbnYyRERlcklucHV0KG8sbixyKX0se2R5NEQ6b30pO3JldHVybiBhP2kuYXMzRChpLnNoYXBlWzFdLGkuc2hhcGVbMl0saS5zaGFwZVszXSk6aX19KSxJbD1tbih7ZGVwdGh3aXNlQ29udjJkRGVyRmlsdGVyXzpmdW5jdGlvbih0LGUsbixyKXt2YXIgbz10OzM9PT10LnJhbmsmJihvPXQuYXM0RCgxLHQuc2hhcGVbMF0sdC5zaGFwZVsxXSx0LnNoYXBlWzJdKSk7dmFyIGE9ZTtyZXR1cm4gMz09PWEucmFuayYmKGE9ZS5hczREKDEsZS5zaGFwZVswXSxlLnNoYXBlWzFdLGUuc2hhcGVbMl0pKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuZGVwdGh3aXNlQ29udjJERGVyRmlsdGVyKG8sYSxyKX0se3g0RDpvLGR5NEQ6YX0pfX0pLGtsPW1uKHtzZXBhcmFibGVDb252MmRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWEmJihhPVsxLDFdKSx2b2lkIDA9PT1pJiYoaT1cIk5IV0NcIik7dmFyIHM9cm4odCxcInhcIixcInNlcGFyYWJsZUNvbnYyZFwiKSx1PXJuKGUsXCJkZXB0aHdpc2VGaWx0ZXJcIixcInNlcGFyYWJsZUNvbnYyZFwiKSxsPXJuKG4sXCJwb2ludHdpc2VGaWx0ZXJcIixcInNlcGFyYWJsZUNvbnYyZFwiKSxjPXMsaD0hMTtpZigzPT09cy5yYW5rJiYoaD0hMCxjPXMuYXM0RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdKSksXCJOQ0hXXCI9PT1pKXRocm93IG5ldyBFcnJvcihcInNlcGFyYWJsZUNvbnYyZCBjdXJyZW50bHkgZG9lcyBub3Qgc3VwcG9ydCBkYXRhRm9ybWF0IE5DSFc7IG9ubHkgTkhXQyBpcyBzdXBwb3J0ZWRcIik7Zig0PT09Yy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzZXBhcmFibGVDb252MmQ6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrYy5yYW5rK1wiLlwifSksZig0PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzZXBhcmFibGVDb252MmQ6IGRlcHRod2lzZSBmaWx0ZXIgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSxmKDQ9PT1sLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNlcGFyYWJsZUNvbnYyZDogcG9pbnR3aXNlIGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pLGYoMT09PWwuc2hhcGVbMF0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNlcGFyYWJsZUNvbnYyZDogdGhlIGZpcnN0IGRpbWVuc2lvbiBvZiBwb2ludHdpc2UgZmlsdGVyICBtdXN0IGJlIDEsIGJ1dCBnb3QgXCIrbC5zaGFwZVswXStcIi5cIn0pLGYoMT09PWwuc2hhcGVbMV0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNlcGFyYWJsZUNvbnYyZDogdGhlIHNlY29uZCBkaW1lbnNpb24gb2YgcG9pbnR3aXNlIGZpbHRlciBtdXN0IGJlIDEsIGJ1dCBnb3QgXCIrbC5zaGFwZVsxXStcIi5cIn0pO3ZhciBwPXUuc2hhcGVbMl0sZD11LnNoYXBlWzNdO2YobC5zaGFwZVsyXT09PXAqZCxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2VwYXJhYmxlQ29udjJkOiB0aGUgdGhpcmQgZGltZW5zaW9uIG9mIHBvaW50d2lzZSBmaWx0ZXIgbXVzdCBiZSBcIitwKmQrXCIsIGJ1dCBnb3QgXCIrbC5zaGFwZVsyXStcIi5cIn0pO3ZhciB2PUVsKGMsdSxyLG8saSxhKSxtPXhsKHYsbCwxLFwidmFsaWRcIixpKTtyZXR1cm4gaD9tLmFzM0QobS5zaGFwZVsxXSxtLnNoYXBlWzJdLG0uc2hhcGVbM10pOm19fSksTmw9bW4oe2NvbnYyZFRyYW5zcG9zZV86ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2bChuLHJuKHQsXCJ4XCIsXCJjb252MmRUcmFuc3Bvc2VcIikscm4oZSxcImZpbHRlclwiLFwiY29udjJkVHJhbnNwb3NlXCIpLHIsbyxcIk5IV0NcIixhKX19KSxTbD1tbih7Y29udjNkVHJhbnNwb3NlXzpmdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiBnbChuLHJuKHQsXCJ4XCIsXCJjb252M2RUcmFuc3Bvc2VcIikscm4oZSxcImZpbHRlclwiLFwiY29udjNkVHJhbnNwb3NlXCIpLHIsbyl9fSk7dmFyIEFsPW1uKHttYXRNdWxfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvO3ZvaWQgMD09PW4mJihuPSExKSx2b2lkIDA9PT1yJiYocj0hMSk7dmFyIGE9cm4odCxcImFcIixcIm1hdE11bFwiKSxpPXJuKGUsXCJiXCIsXCJtYXRNdWxcIik7bz13dChhLGkpLGE9b1swXSxpPW9bMV07dmFyIHM9bj9hLnNoYXBlW2EucmFuay0yXTphLnNoYXBlW2EucmFuay0xXSx1PXI/aS5zaGFwZVtpLnJhbmstMV06aS5zaGFwZVtpLnJhbmstMl0sbD1uP2Euc2hhcGVbYS5yYW5rLTFdOmEuc2hhcGVbYS5yYW5rLTJdLGM9cj9pLnNoYXBlW2kucmFuay0yXTppLnNoYXBlW2kucmFuay0xXSxoPWEuc2hhcGUuc2xpY2UoMCwtMikscD1pLnNoYXBlLnNsaWNlKDAsLTIpLGQ9ZyhoKSx2PWcocCk7ZihhLnJhbms+PTImJmkucmFuaz49MiYmYS5yYW5rPT09aS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXRNdWw6IGlucHV0cyBtdXN0IGhhdmUgdGhlIHNhbWUgcmFuayBvZiBhdCBsZWFzdCAyLCBnb3QgcmFua3MgXCIrYS5yYW5rK1wiIGFuZCBcIitpLnJhbmsrXCIuXCJ9KSxmKHkoaCxwKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF0TXVsOiBvdXRlciBkaW1lbnNpb25zIChcIitoK1wiKSBhbmQgKFwiK3ArXCIpIG9mIFRlbnNvcnMgd2l0aCBzaGFwZXMgXCIrYS5zaGFwZStcIiBhbmQgXCIraS5zaGFwZStcIiBtdXN0IG1hdGNoLlwifSksZihzPT09dSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF0TXVsOiBpbm5lciBzaGFwZXMgKFwiK3MrXCIpIGFuZCAoXCIrdStcIikgb2YgVGVuc29ycyB3aXRoIHNoYXBlcyBcIithLnNoYXBlK1wiIGFuZCBcIitpLnNoYXBlK1wiIGFuZCB0cmFuc3Bvc2VBPVwiK24rXCIgYW5kIHRyYW5zcG9zZUI9XCIrcitcIiBtdXN0IG1hdGNoLlwifSk7dmFyIG09YS5zaGFwZS5zbGljZSgwLC0yKS5jb25jYXQoW2wsY10pLHg9bj9hLmFzM0QoZCxzLGwpOmEuYXMzRChkLGwscyksYj1yP2kuYXMzRCh2LGMsdSk6aS5hczNEKHYsdSxjKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG89dC5iYXRjaE1hdE11bCh4LGIsbixyKTtyZXR1cm4gZShbeCxiXSksb30seyRhOngsJGI6Yn0sZnVuY3Rpb24odCxlKXt2YXIgbz1lLGE9b1swXSxpPW9bMV07cmV0dXJuIG58fHI/IW4mJnI/eyRhOmZ1bmN0aW9uKCl7cmV0dXJuIHQubWF0TXVsKGksITEsITEpfSwkYjpmdW5jdGlvbigpe3JldHVybiB0Lm1hdE11bChhLCEwLCExKX19Om4mJiFyP3skYTpmdW5jdGlvbigpe3JldHVybiBpLm1hdE11bCh0LCExLCEwKX0sJGI6ZnVuY3Rpb24oKXtyZXR1cm4gYS5tYXRNdWwodCwhMSwhMSl9fTp7JGE6ZnVuY3Rpb24oKXtyZXR1cm4gaS5tYXRNdWwodCwhMCwhMCl9LCRiOmZ1bmN0aW9uKCl7cmV0dXJuIHQubWF0TXVsKGEsITAsITApfX06eyRhOmZ1bmN0aW9uKCl7cmV0dXJuIHQubWF0TXVsKGksITEsITApfSwkYjpmdW5jdGlvbigpe3JldHVybiBhLm1hdE11bCh0LCEwLCExKX19fSkucmVzaGFwZShtKX19KSxUbD1tbih7ZG90XzpmdW5jdGlvbih0LGUpe3ZhciBuPXJuKHQsXCJ0MVwiLFwiZG90XCIpLHI9cm4oZSxcInQyXCIsXCJkb3RcIik7ZighKDEhPT1uLnJhbmsmJjIhPT1uLnJhbmt8fDEhPT1yLnJhbmsmJjIhPT1yLnJhbmspLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkb3Q6IGlucHV0cyBtdXN0IGFsbCBiZSByYW5rIDEgb3IgMiwgYnV0IGdvdCByYW5rcyBcIituLnJhbmsrXCIgYW5kIFwiK3IucmFuaytcIi5cIn0pO3ZhciBvPTE9PT1uLnJhbms/bi5zaXplOm4uc2hhcGVbMV0sYT0xPT09ci5yYW5rP3Iuc2l6ZTpyLnNoYXBlWzBdO3JldHVybiBmKG89PT1hLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBkb3Q6IGlubmVyIGRpbWVuc2lvbnMgb2YgaW5wdXRzIG11c3QgbWF0Y2gsIGJ1dCBnb3QgXCIrbytcIiBhbmQgXCIrYStcIi5cIn0pLDE9PT1uLnJhbmsmJjE9PT1yLnJhbms/bi5hczJEKDEsLTEpLm1hdE11bChyLmFzMkQoLTEsMSkpLmFzU2NhbGFyKCk6MT09PW4ucmFuayYmMj09PXIucmFuaz9uLmFzMkQoMSwtMSkubWF0TXVsKHIuYXMyRChyLnNoYXBlWzBdLHIuc2hhcGVbMV0pKS5hczFEKCk6Mj09PW4ucmFuayYmMT09PXIucmFuaz9uLm1hdE11bChyLmFzMkQoLTEsMSkpLmFzMUQoKTpuLm1hdE11bChyLmFzMkQoci5zaGFwZVswXSxyLnNoYXBlWzFdKSl9fSksRGw9bW4oe291dGVyUHJvZHVjdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwidjFcIixcIm91dGVyUHJvZHVjdFwiKSxyPXJuKGUsXCJ2MlwiLFwib3V0ZXJQcm9kdWN0XCIpO3JldHVybiBmKDE9PT1uLnJhbmsmJjE9PT1yLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG91dGVyUHJvZHVjdDogaW5wdXRzIG11c3QgYmUgcmFuayAxLCBidXQgZ290IHJhbmtzIFwiK24ucmFuaytcIiBhbmQgXCIrci5yYW5rK1wiLlwifSksbi5hczJEKC0xLDEpLm1hdE11bChyLmFzMkQoMSwtMSkpfX0pO3ZhciBfbD1tbih7cmV2ZXJzZV86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwieFwiLFwicmV2ZXJzZVwiKTtpZigwPT09bi5yYW5rKXJldHVybiBuLmNsb25lKCk7dmFyIHI9SShlLG4uc2hhcGUpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQucmV2ZXJzZShuLHIpfSx7JHg6bn0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQucmV2ZXJzZShyKX19fSkucmVzaGFwZUFzKG4pfX0pLE9sPW1uKHtyZXZlcnNlMWRfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJyZXZlcnNlXCIpO3JldHVybiBmKDE9PT1lLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHJldmVyc2UxRDogeCBtdXN0IGJlIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrZS5yYW5rK1wiLlwifSksX2woZSwwKX19KSxGbD1tbih7cmV2ZXJzZTJkXzpmdW5jdGlvbih0LGUpe3ZhciBuPXJuKHQsXCJ4XCIsXCJyZXZlcnNlXCIpO3JldHVybiBmKDI9PT1uLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHJldmVyc2UyRDogeCBtdXN0IGJlIHJhbmsgMiBidXQgZ290IHJhbmsgXCIrbi5yYW5rK1wiLlwifSksX2wobixlKX19KSxNbD1tbih7cmV2ZXJzZTNkXzpmdW5jdGlvbih0LGUpe3ZhciBuPXJuKHQsXCJ4XCIsXCJyZXZlcnNlXCIpO3JldHVybiBmKDM9PT1uLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHJldmVyc2UzRDogeCBtdXN0IGJlIHJhbmsgMyBidXQgZ290IHJhbmsgXCIrbi5yYW5rK1wiLlwifSksX2wobixlKX19KSxCbD1tbih7cmV2ZXJzZTRkXzpmdW5jdGlvbih0LGUpe3ZhciBuPXJuKHQsXCJ4XCIsXCJyZXZlcnNlXCIpO3JldHVybiBmKDQ9PT1uLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHJldmVyc2U0RDogeCBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrbi5yYW5rK1wiLlwifSksX2wobixlKX19KTtmdW5jdGlvbiBQbCh0LGUsbixyLG8sYSl7dmFyIGk9cm4odCxcInhcIixcIm1heFBvb2xcIikscz1pLHU9ITE7Mz09PWkucmFuayYmKHU9ITAscz1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpLG51bGw9PXImJihyPVsxLDFdKSxmKDQ9PT1zLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2w6IGlucHV0IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIitzLnJhbmsrXCIuXCJ9KSxmKHZvKG4sciksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2w6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrcitcIidcIn0pLG51bGwhPWEmJmYoeChvKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIrYStcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSk7dmFyIGw9b28ocy5zaGFwZSxlLG4scixvLGEpLGM9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5tYXhQb29sKHMsbCk7cmV0dXJuIGUoW3Msbl0pLG59LHt4OnN9LGZ1bmN0aW9uKHQsYSl7dmFyIGk9YVswXSxzPWFbMV07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvLGEsaSxzKXt2YXIgdT1ybih0LFwiZHlcIixcIm1heFBvb2xCYWNrcHJvcFwiKSxsPXJuKGUsXCJpbnB1dFwiLFwibWF4UG9vbEJhY2twcm9wXCIpLGM9cm4obixcIm91dHB1dFwiLFwibWF4UG9vbEJhY2twcm9wXCIpO2YobC5yYW5rPT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJSYW5rIG9mIGlucHV0IChcIitsLnJhbmsrXCIpIGRvZXMgbm90IG1hdGNoIHJhbmsgb2YgZHkgKFwiK3UucmFuaytcIilcIn0pLG51bGw9PWEmJihhPVsxLDFdKSxmKHZvKG8sYSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2xCYWNrUHJvcDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrbytcIiBhbmQgZGlsYXRpb25zICdcIithK1wiJ1wifSksZig0PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sQmFja3Byb3A6IGR5IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSxmKDQ9PT1sLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2xCYWNrcHJvcDogaW5wdXQgbXVzdCBiZSByYW5rIDQgYnV0IGdvdCByYW5rIFwiK2wucmFuaytcIi5cIn0pLG51bGwhPXMmJmYoeChpKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbEJhY2twcm9wOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitzK1wiIGJ1dCBnb3QgcGFkIFwiK2krXCIuXCJ9KTt2YXIgaD1vbyhsLnNoYXBlLHIsbyxhLGkscyk7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5tYXhQb29sQmFja3Byb3AodSxsLGMsaCl9LHskZHk6dSwkaW5wdXQ6bH0pfSh0LGkscyxlLG4scixvKX19fSk7cmV0dXJuIHU/Yy5hczNEKGMuc2hhcGVbMV0sYy5zaGFwZVsyXSxjLnNoYXBlWzNdKTpjfWZ1bmN0aW9uIExsKHQsZSxuLHIsbyxhKXt2YXIgaT1ybih0LFwieFwiLFwiYXZnUG9vbFwiLFwiZmxvYXQzMlwiKTtudWxsPT1yJiYocj1bMSwxXSksZih2byhuLHIpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIituK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK3IrXCInXCJ9KTt2YXIgcz1pLHU9ITE7Mz09PWkucmFuayYmKHU9ITAscz1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpLGYoND09PXMucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYXZnUG9vbDogeCBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSksbnVsbCE9YSYmZih4KG8pLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIithK1wiIGJ1dCBnb3QgcGFkIFwiK28rXCIuXCJ9KTt2YXIgbD1vbyhzLnNoYXBlLGUsbixyLG8sYSksYz1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuYXZnUG9vbChzLGwpfSx7eDpzfSxmdW5jdGlvbih0KXtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8sYSl7dmFyIGk9cm4odCxcImR5XCIsXCJhdmdQb29sQmFja3Byb3BcIikscz1ybihlLFwiaW5wdXRcIixcImF2Z1Bvb2xCYWNrcHJvcFwiKTtmKHMucmFuaz09PWkucmFuayxmdW5jdGlvbigpe3JldHVyblwiUmFuayBvZiBpbnB1dCAoXCIrcy5yYW5rK1wiKSBkb2VzIG5vdCBtYXRjaCByYW5rIG9mIGR5IChcIitpLnJhbmsrXCIpXCJ9KSxudWxsPT1vJiYobz1bMSwxXSksZih2byhyLG8pLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sQmFja3Byb3A6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK3IrXCIgYW5kIGRpbGF0aW9ucyAnXCIrbytcIidcIn0pO3ZhciB1PXMsbD1pLGM9ITE7Mz09PXMucmFuayYmKGM9ITAsdT1zLmFzNEQoMSxzLnNoYXBlWzBdLHMuc2hhcGVbMV0scy5zaGFwZVsyXSksbD1pLmFzNEQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSkpLGYoND09PWwucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYXZnUG9vbEJhY2twcm9wOiBkeSBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSksZig0PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sQmFja3Byb3A6IGlucHV0IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KTt2YXIgaD1vbyh1LnNoYXBlLG4scixvLGEpLHA9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmF2Z1Bvb2xCYWNrcHJvcChsLHUsaCl9LHtkeTREOmwsaW5wdXQ0RDp1fSk7cmV0dXJuIGM/cC5hczNEKHAuc2hhcGVbMV0scC5zaGFwZVsyXSxwLnNoYXBlWzNdKTpwfSh0LHMsZSxuLHIsbyl9fX0pO3JldHVybiBjPWMuY2FzdChpLmR0eXBlKSx1P2MuYXMzRChjLnNoYXBlWzFdLGMuc2hhcGVbMl0sYy5zaGFwZVszXSk6Y312YXIgV2w9bW4oe21heFBvb2xfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIFBsKHQsZSxuLDEscixvKX19KSxVbD1tbih7YXZnUG9vbF86ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gTGwodCxlLG4sMSxyLG8pfX0pLFZsPW1uKHtwb29sXzpmdW5jdGlvbih0LGUsbixyLG8sYSl7bnVsbD09byYmKG89WzEsMV0pLG51bGw9PWEmJihhPTEpLDA9PT1yJiYocj1cInZhbGlkXCIpO3ZhciBpPXJuKHQsXCJ4XCIsXCJtYXhQb29sXCIpLHM9aSx1PSExOzM9PT1pLnJhbmsmJih1PSEwLHM9aS5hczREKDEsaS5zaGFwZVswXSxpLnNoYXBlWzFdLGkuc2hhcGVbMl0pKSxmKHZvKGEsbyksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHBvb2w6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK2ErXCIgYW5kIGRpbGF0aW9ucyAnXCIrbytcIidcIn0pO3ZhciBsLGM9b28ocy5zaGFwZSxlLGEsbyxyKSxoPVtjLmRpbGF0aW9uSGVpZ2h0LGMuZGlsYXRpb25XaWR0aF07bD1cInNhbWVcIj09PXI/ZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1hcChmdW5jdGlvbih0LG4pe3JldHVybiB0Kyh0LTEpKihlW25dLTEpfSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LTF9KSxyPW4ubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLmZsb29yKHQvMil9KSxvPW4ubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQtcltlXX0pO3JldHVybiBuLm1hcChmdW5jdGlvbih0LGUpe3JldHVybltyW2VdLG9bZV1dfSl9KFtjLmZpbHRlckhlaWdodCxjLmZpbHRlcldpZHRoXSxoKTpbWzAsMF0sWzAsMF1dO3ZhciBwPTE9PT1oWzBdJiYxPT09aFsxXSxkPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdFswXX0pLG89bi5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHRbMV19KSxhPXQuY29uY2F0KHIsbyksaT1lLm1hcChmdW5jdGlvbih0LGUpe3JldHVybih0LWFbZV0ldCkldH0pLHM9by5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtpW2VdfSksdT1lLm1hcChmdW5jdGlvbih0LGUpe3JldHVybltyW2VdLHNbZV1dfSksbD1lLm1hcChmdW5jdGlvbih0LGUpe3JldHVyblswLGlbZV1dfSk7cmV0dXJuW3UsbF19KFtjLmluSGVpZ2h0LGMuaW5XaWR0aF0saCxsKSx2PWRbMF0sbT1kWzFdLGc9cD9yOlwidmFsaWRcIix5PXA/czp3cihzLGgsdikseD0oXCJhdmdcIj09PW4/ZnVuY3Rpb24oKXtyZXR1cm4gTGwoeSxlLGEsMSxnKX06ZnVuY3Rpb24oKXtyZXR1cm4gUGwoeSxlLGEsMSxnKX0pKCksYj1wP3g6bnIoeCxoLG0pO3JldHVybiB1P2IuYXMzRChiLnNoYXBlWzFdLGIuc2hhcGVbMl0sYi5zaGFwZVszXSk6Yn19KSx6bD1tbih7bWF4UG9vbDNkXzpmdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1hJiYoYT1cIk5ESFdDXCIpO3ZhciBzPXJuKHQsXCJ4XCIsXCJtYXhQb29sM2RcIiksdT1zLGw9ITE7ND09PXMucmFuayYmKGw9ITAsdT1zLmFzNUQoMSxzLnNoYXBlWzBdLHMuc2hhcGVbMV0scy5zaGFwZVsyXSxzLnNoYXBlWzNdKSksbnVsbD09aSYmKGk9WzEsMSwxXSksZig1PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sM2Q6IHggbXVzdCBiZSByYW5rIDUgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pLGYoXCJOREhXQ1wiPT09YSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkOiBPbmx5IE5ESFdDIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQsIGJ1dCBnb3QgZGF0YUZvcm1hdCBvZiBcIithfSksZih2byhuLGkpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sM2Q6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIraStcIidcIn0pLG51bGwhPW8mJmYoeChyKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitvK1wiIGJ1dCBnb3QgcGFkIFwiK3IrXCIuXCJ9KTt2YXIgYz1hbyh1LnNoYXBlLGUsbixpLHIsbyxhKSxoPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWF4UG9vbDNkKHUsYyk7cmV0dXJuIGUoW3Usbl0pLG59LHt4OnV9LGZ1bmN0aW9uKHQsYSl7dmFyIHM9YVswXSx1PWFbMV07cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvLGEsaSxzKXt2YXIgdT1ybih0LFwiZHlcIixcIm1heFBvb2wzZEJhY2twcm9wXCIpLGw9cm4oZSxcImlucHV0XCIsXCJtYXhQb29sM2RCYWNrcHJvcFwiKSxjPXJuKG4sXCJvdXRwdXRcIixcIm1heFBvb2wzZEJhY2twcm9wXCIpLGg9dSxwPWwsZD1jLHY9ITE7ND09PWwucmFuayYmKHY9ITAsaD11LmFzNUQoMSx1LnNoYXBlWzBdLHUuc2hhcGVbMV0sdS5zaGFwZVsyXSx1LnNoYXBlWzNdKSxwPWwuYXM1RCgxLGwuc2hhcGVbMF0sbC5zaGFwZVsxXSxsLnNoYXBlWzJdLGwuc2hhcGVbM10pLGQ9Yy5hczVEKDEsYy5zaGFwZVswXSxjLnNoYXBlWzFdLGMuc2hhcGVbMl0sYy5zaGFwZVszXSkpLGYoNT09PWgucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IGR5IG11c3QgYmUgcmFuayA1IGJ1dCBnb3QgcmFuayBcIitoLnJhbmsrXCIuXCJ9KSxmKDU9PT1wLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2wzZEJhY2twcm9wOiBpbnB1dCBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrcC5yYW5rK1wiLlwifSksZig1PT09ZC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sM2RCYWNrcHJvcDogb3V0cHV0IG11c3QgYmUgcmFuayA1IGJ1dCBnb3QgcmFuayBcIitkLnJhbmsrXCIuXCJ9KSxudWxsPT1hJiYoYT1bMSwxLDFdKSxmKHZvKG8sYSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2wzZEJhY2twcm9wOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIitvK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK2ErXCInXCJ9KSxudWxsIT1zJiZmKHgoaSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2wzZEJhY2twcm9wOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitzK1wiIGJ1dCBnb3QgcGFkIFwiK2krXCIuXCJ9KTt2YXIgbT1hbyhwLnNoYXBlLHIsbyxhLGkscyksZz1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQubWF4UG9vbDNkQmFja3Byb3AoaCxwLGQsbSl9LHtkeTVEOmgsaW5wdXQ1RDpwfSk7cmV0dXJuIHY/Zy5hczREKGcuc2hhcGVbMV0sZy5zaGFwZVsyXSxnLnNoYXBlWzNdLGcuc2hhcGVbNF0pOmd9KHQscyx1LGUsbixpLHIsbyl9fX0pO3JldHVybiBsP2guYXM0RChoLnNoYXBlWzFdLGguc2hhcGVbMl0saC5zaGFwZVszXSxoLnNoYXBlWzRdKTpofX0pLEdsPW1uKHthdmdQb29sM2RfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWEmJihhPVwiTkRIV0NcIik7dmFyIHM9cm4odCxcInhcIixcImF2Z1Bvb2wzZFwiLFwiZmxvYXQzMlwiKSx1PXMsbD0hMTs0PT09cy5yYW5rJiYobD0hMCx1PXMuYXM1RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdLHMuc2hhcGVbM10pKSxudWxsPT1pJiYoaT1bMSwxLDFdKSxmKDU9PT11LnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZDogeCBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSksZihcIk5ESFdDXCI9PT1hLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sM2Q6IE9ubHkgTkRIV0MgaXMgY3VycmVudGx5IHN1cHBvcnRlZCwgYnV0IGdvdCBkYXRhRm9ybWF0IG9mIFwiK2F9KSxmKHZvKG4saSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrbitcIiBhbmQgZGlsYXRpb25zICdcIitpK1wiJ1wifSksbnVsbCE9byYmZih4KHIpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sM2Q6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK28rXCIgYnV0IGdvdCBwYWQgXCIrcitcIi5cIn0pO3ZhciBjPWFvKHUuc2hhcGUsZSxuLGkscixvLGEpLGg9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmF2Z1Bvb2wzZCh1LGMpfSx7eDp1fSxmdW5jdGlvbih0KXtyZXR1cm57eDpmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2YXIgcz1ybih0LFwiZHlcIixcImF2Z1Bvb2wzZEJhY2twcm9wXCIpLHU9cm4oZSxcImlucHV0XCIsXCJhdmdQb29sM2RCYWNrcHJvcFwiKSxsPXMsYz11LGg9ITE7ND09PXUucmFuayYmKGg9ITAsbD1zLmFzNUQoMSxzLnNoYXBlWzBdLHMuc2hhcGVbMV0scy5zaGFwZVsyXSxzLnNoYXBlWzNdKSxjPXUuYXM1RCgxLHUuc2hhcGVbMF0sdS5zaGFwZVsxXSx1LnNoYXBlWzJdLHUuc2hhcGVbM10pKSxmKDU9PT1sLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZEJhY2twcm9wOiBkeSBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSksZig1PT09Yy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sM2RCYWNrcHJvcDogaW5wdXQgbXVzdCBiZSByYW5rIDUgYnV0IGdvdCByYW5rIFwiK2MucmFuaytcIi5cIn0pLG51bGw9PW8mJihvPVsxLDEsMV0pLGYodm8ocixvKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYXZnUG9vbDNkQmFja3Byb3A6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK3IrXCIgYW5kIGRpbGF0aW9ucyAnXCIrbytcIidcIn0pLG51bGwhPWkmJmYoeChhKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK2krXCIgYnV0IGdvdCBwYWQgXCIrYStcIi5cIn0pO3ZhciBwPWFvKGMuc2hhcGUsbixyLG8sYSxpKSxkPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5hdmdQb29sM2RCYWNrcHJvcChsLGMscCl9LHtkeTVEOmwsaW5wdXQ1RDpjfSk7cmV0dXJuIGg/ZC5hczREKGQuc2hhcGVbMV0sZC5zaGFwZVsyXSxkLnNoYXBlWzNdLGQuc2hhcGVbNF0pOmR9KHQsdSxlLG4saSxyLG8pfX19KTtyZXR1cm4gaD1oLmNhc3QodS5kdHlwZSksbD9oLmFzNEQoaC5zaGFwZVsxXSxoLnNoYXBlWzJdLGguc2hhcGVbM10saC5zaGFwZVs0XSk6aH19KTt2YXIgSGw9bW4oe3NsaWNlXzpmdW5jdGlvbih0LGUsbil7dmFyIHIsbyxhPXJuKHQsXCJ4XCIsXCJzbGljZVwiKTtpZigwPT09YS5yYW5rKXRocm93IG5ldyBFcnJvcihcIlNsaWNpbmcgc2NhbGFyIGlzIG5vdCBwb3NzaWJsZVwiKTsocj1cIm51bWJlclwiPT10eXBlb2YgZT9bZV0uY29uY2F0KG5ldyBBcnJheShhLnJhbmstMSkuZmlsbCgwKSk6ZS5sZW5ndGg8YS5yYW5rP2UuY29uY2F0KG5ldyBBcnJheShhLnJhbmstZS5sZW5ndGgpLmZpbGwoMCkpOmUuc2xpY2UoKSkuZm9yRWFjaChmdW5jdGlvbih0KXtmKC0xIT09dCxmdW5jdGlvbigpe3JldHVyblwic2xpY2UoKSBkb2VzIG5vdCBzdXBwb3J0IG5lZ2F0aXZlIGJlZ2luIGluZGV4aW5nLlwifSl9KSxvPShvPW51bGw9PW4/bmV3IEFycmF5KGEucmFuaykuZmlsbCgtMSk6XCJudW1iZXJcIj09dHlwZW9mIG4/W25dLmNvbmNhdChuZXcgQXJyYXkoYS5yYW5rLTEpLmZpbGwoLTEpKTpuLmxlbmd0aDxhLnJhbms/bi5jb25jYXQobmV3IEFycmF5KGEucmFuay1uLmxlbmd0aCkuZmlsbCgtMSkpOm4pLm1hcChmdW5jdGlvbih0LGUpe3JldHVybiB0Pj0wP3Q6KGYoLTE9PT10LGZ1bmN0aW9uKCl7cmV0dXJuXCJOZWdhdGl2ZSBzaXplIHZhbHVlcyBzaG91bGQgYmUgZXhhY3RseSAtMSBidXQgZ290IFwiK3QrXCIgZm9yIHRoZSBzbGljZSgpIHNpemUgYXQgaW5kZXggXCIrZStcIi5cIn0pLGEuc2hhcGVbZV0tcltlXSl9KSxmdW5jdGlvbih0LGUsbil7Zih0LnJhbms9PT1lLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2xpY2VcIit0LnJhbmsrXCJEOiBMZW5ndGggb2YgYmVnaW4gXCIrZStcIiBtdXN0IG1hdGNoIHRoZSByYW5rIG9mIHRoZSBhcnJheSAoXCIrdC5yYW5rK1wiKS5cIn0pLGYodC5yYW5rPT09bi5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNsaWNlXCIrdC5yYW5rK1wiRDogTGVuZ3RoIG9mIHNpemUgXCIrbitcIiBtdXN0IG1hdGNoIHRoZSByYW5rIG9mIHRoZSBhcnJheSAoXCIrdC5yYW5rK1wiKS5cIn0pO2Zvcih2YXIgcj1mdW5jdGlvbihyKXtmKGVbcl0rbltyXTw9dC5zaGFwZVtyXSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2xpY2VcIit0LnJhbmsrXCJEOiBiZWdpbltcIityK1wiXSArIHNpemVbXCIrcitcIl0gKFwiKyhlW3JdK25bcl0pK1wiKSB3b3VsZCBvdmVyZmxvdyBpbnB1dC5zaGFwZVtcIityK1wiXSAoXCIrdC5zaGFwZVtyXStcIilcIn0pfSxvPTA7bzx0LnJhbms7KytvKXIobyl9KGEscixvKTt2YXIgaT1hLnNoYXBlO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2xpY2UoYSxyLG8pfSx7JHg6YX0sZnVuY3Rpb24odCl7Zm9yKHZhciBlPVtdLG49MDtuPHQucmFuaztuKyspZS5wdXNoKFtyW25dLGlbbl0tcltuXS1vW25dXSk7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQucGFkKGUpfX19KX19KSxxbD1tbih7c2xpY2UxZF86ZnVuY3Rpb24odCxlLG4pe3ZhciByPXJuKHQsXCJ4XCIsXCJzbGljZTFkXCIpO3JldHVybiBmKDE9PT1yLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cInNsaWNlMWQgZXhwZWN0cyBhIHJhbmstMSB0ZW5zb3IsIGJ1dCBnb3QgYSByYW5rLVwiK3IucmFuaytcIiB0ZW5zb3JcIn0pLEhsKHIsW2VdLFtuXSl9fSksJGw9bW4oe3NsaWNlMmRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1ybih0LFwieFwiLFwic2xpY2UyZFwiKTtyZXR1cm4gZigyPT09ci5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJzbGljZTJkIGV4cGVjdHMgYSByYW5rLTIgdGVuc29yLCBidXQgZ290IGEgcmFuay1cIityLnJhbmsrXCIgdGVuc29yXCJ9KSxIbChyLGUsbil9fSksS2w9bW4oe3NsaWNlM2RfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1ybih0LFwieFwiLFwic2xpY2UzZFwiKTtyZXR1cm4gZigzPT09ci5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJzbGljZTNkIGV4cGVjdHMgYSByYW5rLTMgdGVuc29yLCBidXQgZ290IGEgcmFuay1cIityLnJhbmsrXCIgdGVuc29yXCJ9KSxIbChyLGUsbil9fSksamw9bW4oe3NsaWNlNGRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1ybih0LFwieFwiLFwic2xpY2U0ZFwiKTtyZXR1cm4gZig0PT09ci5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJzbGljZTRkIGV4cGVjdHMgYSByYW5rLTQgdGVuc29yLCBidXQgZ290IGEgcmFuay1cIityLnJhbmsrXCIgdGVuc29yXCJ9KSxIbChyLGUsbil9fSk7ZnVuY3Rpb24gWGwodCxlLG4scixvKXtyZXR1cm4gZS5yYW5rPG4ucmFuayYmKGU9ZS5yZXNoYXBlKGxuKGUuc2hhcGUscikpKSx0LnJhbms8bi5yYW5rJiYodD10LnJlc2hhcGUobG4odC5zaGFwZSxyKSkpLHskeDpmdW5jdGlvbigpe3ZhciByPXQubXVsKG4uZXF1YWwoZSkuY2FzdCh0LmR0eXBlKSk7cmV0dXJuIG51bGw9PW8/cjpyLnRyYW5zcG9zZShvKX19fXZhciBZbD1tbih7YWxsXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPXJuKHQsXCJ4XCIsXCJhbGxcIixcImJvb2xcIiksbz1JKGUsci5zaGFwZSksYT1vLGk9aG4oYSxyLnJhbmspO251bGwhPWkmJihyPXIudHJhbnNwb3NlKGkpLGE9Zm4oYS5sZW5ndGgsci5yYW5rKSk7dmFyIHM9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFsbChyLGEpfSx7JHg6cn0pO2lmKG4pe3ZhciB1PWxuKHMuc2hhcGUsbyk7cmV0dXJuIHMucmVzaGFwZSh1KX1yZXR1cm4gc319KSxRbD1tbih7YW55XzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPXJuKHQsXCJ4XCIsXCJhbnlcIixcImJvb2xcIiksbz1JKGUsci5zaGFwZSksYT1vLGk9aG4oYSxyLnJhbmspO251bGwhPWkmJihyPXIudHJhbnNwb3NlKGkpLGE9Zm4oYS5sZW5ndGgsci5yYW5rKSk7dmFyIHM9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFueShyLGEpfSx7JHg6cn0pO2lmKG4pe3ZhciB1PWxuKHMuc2hhcGUsbyk7cmV0dXJuIHMucmVzaGFwZSh1KX1yZXR1cm4gc319KSxKbD1tbih7YXJnTWF4XzpmdW5jdGlvbih0LGUpe3ZvaWQgMD09PWUmJihlPTApO3ZhciBuPXJuKHQsXCJ4XCIsXCJhcmdNYXhcIik7bnVsbD09ZSYmKGU9MCk7dmFyIHI9SShlLG4uc2hhcGUpLG89aG4ocixuLnJhbmspO3JldHVybiBudWxsIT1vJiYobj1uLnRyYW5zcG9zZShvKSxyPWZuKHIubGVuZ3RoLG4ucmFuaykpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBvPXQuYXJnTWF4KG4sclswXSk7cmV0dXJuIGUoW25dKSxvfSx7JHg6bn0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBNbihuKX19fSl9fSksWmw9bW4oe2FyZ01pbl86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0wKTt2YXIgbj1ybih0LFwieFwiLFwiYXJnTWluXCIpO251bGw9PWUmJihlPTApO3ZhciByPUkoZSxuLnNoYXBlKSxvPWhuKHIsbi5yYW5rKTtyZXR1cm4gbnVsbCE9byYmKG49bi50cmFuc3Bvc2Uobykscj1mbihyLmxlbmd0aCxuLnJhbmspKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbz10LmFyZ01pbihuLHJbMF0pO3JldHVybiBlKFtuXSksb30seyR4Om59LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gTW4obil9fX0pfX0pLHRjPW1uKHtsb2dTdW1FeHBfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9cm4odCxcInhcIixcImxvZ1N1bUV4cFwiKSxvPUkoZSxyLnNoYXBlKSxhPXIubWF4KG8sITApLGk9ci5zdWIoYSkuZXhwKCkuc3VtKG8pLmxvZygpLHM9YS5yZXNoYXBlKGkuc2hhcGUpLmFkZChpKTtpZihuKXt2YXIgdT1sbihzLnNoYXBlLG8pO3JldHVybiBzLnJlc2hhcGUodSl9cmV0dXJuIHN9fSksZWM9bW4oe21heF86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1ybih0LFwieFwiLFwibWF4XCIpLG89cixhPUkoZSxyLnNoYXBlKSxpPWEscz1obihpLHIucmFuayk7bnVsbCE9cyYmKHI9ci50cmFuc3Bvc2UocyksaT1mbihpLmxlbmd0aCxyLnJhbmspKTt2YXIgdT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1heChyLGkpO3JldHVybiBlKFtvLG5dKSxufSx7JHg6cn0sZnVuY3Rpb24odCxlKXtyZXR1cm4gWGwodCxlWzFdLGVbMF0sYSxzKX0pO2lmKG4pe3ZhciBsPWxuKHUuc2hhcGUsYSk7dT11LnJlc2hhcGUobCl9cmV0dXJuIHV9fSksbmM9bW4oe21lYW5fOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9cm4odCxcInhcIixcIm1lYW5cIiksbz1JKGUsci5zaGFwZSksYT1nKHVuKHIuc2hhcGUsbylbMV0pO3JldHVybiBYcihmdW5jdGlvbih0KXt2YXIgcj1DbihhKTtyZXR1cm57dmFsdWU6KHIuZHR5cGU9PT10LmR0eXBlP3Q6dC5jYXN0KHIuZHR5cGUpKS5kaXYocikuc3VtKGUsbiksZ3JhZEZ1bmM6ZnVuY3Rpb24oZSl7dmFyIG49dC5zaGFwZS5zbGljZSgpO3JldHVybiBvLmZvckVhY2goZnVuY3Rpb24odCl7blt0XT0xfSksZS5yZXNoYXBlKG4pLm11bChBbih0LnNoYXBlLFwiZmxvYXQzMlwiKSkuZGl2KGEpfX19KShyKX19KSxyYz1tbih7bWluXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPXJuKHQsXCJ4XCIsXCJtaW5cIiksbz1yLGE9SShlLHIuc2hhcGUpLGk9YSxzPWhuKGksci5yYW5rKTtudWxsIT1zJiYocj1yLnRyYW5zcG9zZShzKSxpPWZuKGkubGVuZ3RoLHIucmFuaykpO3ZhciB1PVN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWluKHIsaSk7cmV0dXJuIGUoW28sbl0pLG59LHskeDpyfSxmdW5jdGlvbih0LGUpe3JldHVybiBYbCh0LGVbMV0sZVswXSxhLHMpfSk7aWYobil7dmFyIGw9bG4odS5zaGFwZSxhKTt1PXUucmVzaGFwZShsKX1yZXR1cm4gdX19KSxvYz1tbih7bW9tZW50c186ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1JKGUsKHQ9cm4odCxcInhcIixcIm1vbWVudHNcIikpLnNoYXBlKSxvPXQubWVhbihyLG4pLGE9by5zaGFwZTtufHwoYT1sbihvLnNoYXBlLHIpKTt2YXIgaT10LnRvRmxvYXQoKS5zdWIoby5yZXNoYXBlKGEpKS5zcXVhcmUoKTtyZXR1cm57bWVhbjpvLHZhcmlhbmNlOmkubWVhbihyLG4pfX19KSxhYz1tbih7c3VtXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPXJuKHQsXCJ4XCIsXCJzdW1cIik7XCJib29sXCI9PT1yLmR0eXBlJiYocj1yLnRvSW50KCkpO3ZhciBvPUkoZSxyLnNoYXBlKTtyZXR1cm4gWHIoZnVuY3Rpb24odCl7dmFyIGU9aG4obyx0LnJhbmspLHI9byxhPXQ7bnVsbCE9ZSYmKGE9dC50cmFuc3Bvc2UoZSkscj1mbihyLmxlbmd0aCx0LnJhbmspKTt2YXIgaT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3VtKGEscil9LHtwZXJtdXRlZFg6YX0pO2lmKG4pe3ZhciBzPWxuKGkuc2hhcGUsbyk7aT1pLnJlc2hhcGUocyl9cmV0dXJue3ZhbHVlOmksZ3JhZEZ1bmM6ZnVuY3Rpb24oZSl7dmFyIG49dC5zaGFwZS5zbGljZSgpO3JldHVybiBvLmZvckVhY2goZnVuY3Rpb24odCl7blt0XT0xfSksZS5yZXNoYXBlKG4pLm11bChBbih0LnNoYXBlLFwiZmxvYXQzMlwiKSl9fX0pKHIpfX0pLGljPW1uKHtwcm9kXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPXJuKHQsXCJ4XCIsXCJwcm9kXCIpO1wiYm9vbFwiPT09ci5kdHlwZSYmKHI9ci50b0ludCgpKTt2YXIgbz1JKGUsci5zaGFwZSksYT1obihvLHIucmFuayksaT1vLHM9cjtudWxsIT1hJiYocz1yLnRyYW5zcG9zZShhKSxpPWZuKGkubGVuZ3RoLHIucmFuaykpO3ZhciB1PVN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5wcm9kKHMsaSl9LHtwZXJtdXRlZFg6c30pO2lmKG4pe3ZhciBsPWxuKHUuc2hhcGUsbyk7dT11LnJlc2hhcGUobCl9cmV0dXJuIHV9fSk7dmFyIHNjPW1uKHtlbHVfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJlbHVcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuZWx1KGUpO3JldHVybiBuKFtyXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKGUpe3JldHVybiBlLmVsdURlcih0LG4pfSx7ZHk6dCx5Om59KX19fSl9fSksdWM9bW4oe2xlYWt5UmVsdV86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0uMik7dmFyIG49cm4odCxcInhcIixcImxlYWt5UmVsdVwiKTtyZXR1cm4gTHUoQ24oZSkubXVsKG4pLG4pfX0pLGxjPW1uKHtwcmVsdV86ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwieFwiLFwicHJlbHVcIikscj1ybihlLFwiYWxwaGFcIixcInByZWx1XCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbz10LnByZWx1KG4scik7cmV0dXJuIGUoW24scl0pLG99LHskeDpuLCRhbHBoYTpyfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdLG89bi5ncmVhdGVyKDApO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBBdShvLHQsdC5tdWwocikpfSwkYWxwaGE6ZnVuY3Rpb24oKXt2YXIgZT1BdShvLE1uKHQpLHQubXVsKG4pKSxhPW5vKHIuc2hhcGUsdC5zaGFwZSk7cmV0dXJuIGEubGVuZ3RoPjAmJihlPWUuc3VtKGEpKSxlLnJlc2hhcGUoci5zaGFwZSl9fX0pfX0pLGNjPW1uKHtyZWx1XzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwicmVsdVwiKTtyZXR1cm5cImJvb2xcIj09PWUuZHR5cGU/ZS50b0ludCgpOlN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQucmVsdShlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsU3RyaWN0KG4uc3RlcCgpLnRvRmxvYXQoKSl9fX0pfX0pLGhjPW1uKHtyZWx1Nl86ZnVuY3Rpb24odCl7dmFyIGU9cm4odCxcInhcIixcInJlbHU2XCIpO3JldHVyblwiYm9vbFwiPT09ZS5kdHlwZT9lLnRvSW50KCk6U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5yZWx1NihlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1uLmxlc3NFcXVhbCg2KS5tdWwobi5zdGVwKCkpO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0Lm11bFN0cmljdChyLnRvRmxvYXQoKSl9fX0pfX0pLHBjPW1uKHtzZWx1XzpmdW5jdGlvbih0KXt2YXIgZT1ybih0LFwieFwiLFwic2VsdVwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zZWx1KGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXt2YXIgZT1uLmdyZWF0ZXIoQ24oMCkpLHI9Q24oWWkpLG89Q24oUWkpLGE9dC5tdWwobyksaT10Lm11bChyKS5tdWwobi50b0Zsb2F0KCkuZXhwKCkpO3JldHVybiBBdShlLGEsaSl9fX0pfX0pO3ZhciBmYz1tbih7dHJhbnNwb3NlXzpmdW5jdGlvbih0LGUpe3ZhciBuPXJuKHQsXCJ4XCIsXCJ0cmFuc3Bvc2VcIik7cmV0dXJuIG51bGw9PWUmJihlPW4uc2hhcGUubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGV9KS5yZXZlcnNlKCkpLGYobi5yYW5rPT09ZS5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHRyYW5zcG9zZTogcmFuayBvZiBpbnB1dCBcIituLnJhbmsrXCIgbXVzdCBtYXRjaCBsZW5ndGggb2YgcGVybSBcIitlK1wiLlwifSksZS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2YodD49MCYmdDxuLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkFsbCBlbnRyaWVzIGluICdwZXJtJyBtdXN0IGJlIGJldHdlZW4gMCBhbmQgXCIrKG4ucmFuay0xKStcIiBidXQgZ290IFwiK2V9KX0pLG4ucmFuazw9MT9uLmNsb25lKCk6U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRyYW5zcG9zZShuLGUpfSx7JHg6bn0sZnVuY3Rpb24odCl7dmFyIG49cG4oZSk7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQudHJhbnNwb3NlKG4pfX19KX19KTt2YXIgZGM9bW4oe2xvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PWUmJihlPTUpLHZvaWQgMD09PW4mJihuPTEpLHZvaWQgMD09PXImJihyPTEpLHZvaWQgMD09PW8mJihvPS41KTt2YXIgYT1ybih0LFwieFwiLFwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb25cIik7Zig0PT09YS5yYW5rfHwzPT09YS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjogeCBtdXN0IGJlIHJhbmsgMyBvciA0IGJ1dCBnb3RcXG4gICAgICAgICAgICAgICByYW5rIFwiK2EucmFuaytcIi5cIn0pLGYoeChlKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb246IGRlcHRoUmFkaXVzIG11c3QgYmUgYW4gaW50ZWdlciBidXQgZ290IGRlcHRoUmFkaXVzIFwiK2UrXCIuXCJ9KTt2YXIgaT1hLHM9ITE7Mz09PWEucmFuayYmKHM9ITAsaT1hLmFzNEQoMSxhLnNoYXBlWzBdLGEuc2hhcGVbMV0sYS5zaGFwZVsyXSkpO3ZhciB1PVN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGEpe3ZhciBzPXQubG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb240RChpLGUsbixyLG8pO3JldHVybiBhKFtpLHNdKSxzfSx7eDREOml9LGZ1bmN0aW9uKHQsYSl7dmFyIGk9YVswXSxzPWFbMV07cmV0dXJue3g0RDpmdW5jdGlvbigpe3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24oYSl7cmV0dXJuIGEuTFJOR3JhZCh0LGkscyxlLG4scixvKX0se30pfX19KTtyZXR1cm4gcz91LmFzM0QodS5zaGFwZVsxXSx1LnNoYXBlWzJdLHUuc2hhcGVbM10pOnV9fSk7dmFyIHZjPW1uKHtub3JtXzpmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1lJiYoZT1cImV1Y2xpZGVhblwiKSx2b2lkIDA9PT1uJiYobj1udWxsKSx2b2lkIDA9PT1yJiYocj0hMSk7dmFyIG89ZnVuY3Rpb24gdChlLG4scil7aWYodm9pZCAwPT09ciYmKHI9bnVsbCksMD09PWUucmFuaylyZXR1cm4gZS5hYnMoKTtpZigxIT09ZS5yYW5rJiZudWxsPT09cilyZXR1cm4gdChlLnJlc2hhcGUoWy0xXSksbixyKTtpZigxPT09ZS5yYW5rfHxcIm51bWJlclwiPT10eXBlb2Ygcnx8QXJyYXkuaXNBcnJheShyKSYmMT09PXIubGVuZ3RoKXtpZigxPT09bilyZXR1cm4gZS5hYnMoKS5zdW0ocik7aWYobj09PTEvMClyZXR1cm4gZS5hYnMoKS5tYXgocik7aWYobj09PS0xLzApcmV0dXJuIGUuYWJzKCkubWluKHIpO2lmKFwiZXVjbGlkZWFuXCI9PT1ufHwyPT09bilyZXR1cm4gZS5hYnMoKS5wb3coQ24oMixcImludDMyXCIpKS5zdW0ocikuc3FydCgpO3Rocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG5vcm06IGludmFsaWQgb3JkIHZhbHVlOiBcIituKX1pZihBcnJheS5pc0FycmF5KHIpJiYyPT09ci5sZW5ndGgpe2lmKDE9PT1uKXJldHVybiBlLmFicygpLnN1bShyWzBdKS5tYXgoclsxXS0xKTtpZihuPT09MS8wKXJldHVybiBlLmFicygpLnN1bShyWzFdKS5tYXgoclswXSk7aWYobj09PS0xLzApcmV0dXJuIGUuYWJzKCkuc3VtKHJbMV0pLm1pbihyWzBdKTtpZihcImZyb1wiPT09bnx8XCJldWNsaWRlYW5cIj09PW4pcmV0dXJuIGUuc3F1YXJlKCkuc3VtKHIpLnNxcnQoKTt0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiBub3JtOiBpbnZhbGlkIG9yZCB2YWx1ZTogXCIrbil9dGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgaW4gbm9ybTogaW52YWxpZCBheGlzOiBcIityKX0odD1ybih0LFwieFwiLFwibm9ybVwiKSxlLG4pLGE9by5zaGFwZTtpZihyKXt2YXIgaT1JKG4sdC5zaGFwZSk7YT1sbihvLnNoYXBlLGkpfXJldHVybiBvLnJlc2hhcGUoYSl9fSk7dmFyIG1jPW1uKHtiYXNpY0xTVE1DZWxsXzpmdW5jdGlvbih0LGUsbixyLG8sYSl7dmFyIGk9cm4odCxcImZvcmdldEJpYXNcIixcImJhc2ljTFNUTUNlbGxcIikscz1ybihlLFwibHN0bUtlcm5lbFwiLFwiYmFzaWNMU1RNQ2VsbFwiKSx1PXJuKG4sXCJsc3RtQmlhc1wiLFwiYmFzaWNMU1RNQ2VsbFwiKSxsPXJuKHIsXCJkYXRhXCIsXCJiYXNpY0xTVE1DZWxsXCIpLGM9cm4obyxcImNcIixcImJhc2ljTFNUTUNlbGxcIiksaD1ybihhLFwiaFwiLFwiYmFzaWNMU1RNQ2VsbFwiKSxwPWwuY29uY2F0KGgsMSkubWF0TXVsKHMpLmFkZCh1KSxmPXAuc2hhcGVbMF0sZD1wLnNoYXBlWzFdLzQsdj1bZixkXSxtPXAuc2xpY2UoWzAsMF0sdiksZz1wLnNsaWNlKFswLGRdLHYpLHk9cC5zbGljZShbMCwyKmRdLHYpLHg9cC5zbGljZShbMCwzKmRdLHYpLGI9bS5zaWdtb2lkKCkubXVsU3RyaWN0KGcudGFuaCgpKS5hZGRTdHJpY3QoYy5tdWxTdHJpY3QoaS5hZGQoeSkuc2lnbW9pZCgpKSksdz1iLnRhbmgoKS5tdWxTdHJpY3QoeC5zaWdtb2lkKCkpO3JldHVybltiLHddfX0pLGdjPW1uKHttdWx0aVJOTkNlbGxfOmZ1bmN0aW9uKHQsZSxuLHIpe2Zvcih2YXIgbz1ybihlLFwiZGF0YVwiLFwibXVsdGlSTk5DZWxsXCIpLGE9b24obixcImNcIixcIm11bHRpUk5OQ2VsbFwiKSxpPW9uKHIsXCJoXCIsXCJtdWx0aVJOTkNlbGxcIikscz1vLHU9W10sbD0wO2w8dC5sZW5ndGg7bCsrKXt2YXIgYz10W2xdKHMsYVtsXSxpW2xdKTt1LnB1c2goY1swXSksdS5wdXNoKGNbMV0pLHM9Y1sxXX12YXIgaD1bXSxwPVtdO2ZvcihsPTA7bDx1Lmxlbmd0aDtsKz0yKWgucHVzaCh1W2xdKSxwLnB1c2godVtsKzFdKTtyZXR1cm5baCxwXX19KTt2YXIgeWM9bW4oe21vdmluZ0F2ZXJhZ2VfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09byYmKG89ITApO3ZhciBhPXJuKHQsXCJ2XCIsXCJtb3ZpbmdBdmVyYWdlXCIpLGk9cm4oZSxcInhcIixcIm1vdmluZ0F2ZXJhZ2VcIikscz1ybihuLFwiZGVjYXlcIixcIm1vdmluZ0F2ZXJhZ2VcIik7Q3QoYSxpKSxmKHkoYS5zaGFwZSxpLnNoYXBlKSxmdW5jdGlvbigpe3JldHVyblwiU2hhcGUgbWlzbWF0Y2ggaW4gdiBhbmQgeFwifSk7dmFyIHU9Q24oMSksbD11LnN1YihzKSxjPWkuc3ViKGEpLm11bChsKTtpZihvKXtmKG51bGwhPXIsZnVuY3Rpb24oKXtyZXR1cm5cIldoZW4gdXNpbmcgemVyb0RlYmlhczogdHJ1ZSwgc3RlcCBpcyByZXF1aXJlZC5cIn0pO3ZhciBoPXJuKHIsXCJzdGVwXCIsXCJtb3ZpbmdBdmVyYWdlXCIpO2M9Yy5kaXYodS5zdWIoJHUocyxoKSkpfXJldHVybiBhLmFkZChjKX19KTt2YXIgeGM9bW4oe3N0cmlkZWRTbGljZV86ZnVuY3Rpb24odCxlLG4scixvLGEsaSxzLHUpe2lmKHZvaWQgMD09PW8mJihvPTApLHZvaWQgMD09PWEmJihhPTApLHZvaWQgMD09PWkmJihpPTApLHZvaWQgMD09PXMmJihzPTApLHZvaWQgMD09PXUmJih1PTApLG51bGw9PXImJihyPW5ldyBBcnJheShlLmxlbmd0aCkpLDAhPT1pKXRocm93IG5ldyBFcnJvcihcImVsbGlwc2lzIG1hc2sgaXMgbm90IHlldCBzdXBwb3J0ZWRcIik7dmFyIGw9cm4odCxcInhcIixcInN0cmlkZWRTbGljZVwiKSxjPUxyKHMpLGg9bC5zaGFwZS5zbGljZSgpO2MuZm9yRWFjaChmdW5jdGlvbih0KXtlW3RdPTAsblt0XT0xLGguc3BsaWNlKHQsMCwxKX0pLGw9bC5yZXNoYXBlKGgpO2Zvcih2YXIgcD0wO3A8bC5yYW5rO3ArKyllW3BdPVVyKG8sZSxyLGwuc2hhcGUscCksbltwXT1WcihhLG4scixsLnNoYXBlLHApLHJbcF09cltwXXx8MTt2YXIgZj1Mcih1KTtmLmZvckVhY2goZnVuY3Rpb24odCl7blt0XT1lW3RdKzEsclt0XT0xfSk7dmFyIGQ9V3IoZSxuLHIpLHY9ZC5maWx0ZXIoZnVuY3Rpb24odCxlKXtyZXR1cm4tMT09PWYuaW5kZXhPZihlKX0pO3JldHVybiByLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiAxPT09dH0pP0hsKGwsZSxkKS5yZXNoYXBlKHYpOlN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5zdHJpZGVkU2xpY2UobCxlLG4scil9LHskeDpsfSkucmVzaGFwZSh2KX19KTt2YXIgYmM9bW4oe3RvcGtfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT0xKSx2b2lkIDA9PT1uJiYobj0hMCk7dmFyIHI9cm4odCxcInhcIixcInRvcGtcIik7aWYoMD09PXIucmFuayl0aHJvdyBuZXcgRXJyb3IoXCJ0b3BrKCkgZXhwZWN0cyB0aGUgaW5wdXQgdG8gYmUgb2YgcmFuayAxIG9yIGhpZ2hlclwiKTt2YXIgbz1yLnNoYXBlW3Iuc2hhcGUubGVuZ3RoLTFdO2lmKGU+byl0aHJvdyBuZXcgRXJyb3IoXCInaycgcGFzc2VkIHRvIHRvcGsoKSBtdXN0IGJlIDw9IHRoZSBsYXN0IGRpbWVuc2lvbiAoXCIrbytcIikgYnV0IGdvdCBcIitlKTt2YXIgYT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQudG9wayhyLGUsbil9LHskeDpyfSk7cmV0dXJue3ZhbHVlczphWzBdLGluZGljZXM6YVsxXX19fSk7dmFyIHdjPW1uKHtzY2F0dGVyTkRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1ybih0LFwiaW5kaWNlc1wiLFwic2NhdHRlck5EXCIsXCJpbnQzMlwiKSxvPXJuKGUsXCJ1cGRhdGVzXCIsXCJzY2F0dGVyTkRcIik7cmV0dXJuIEJyKG8scixuKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2NhdHRlck5EKHIsbyxuKX0seyRpbmRpY2VzOnIsJHVwZGF0ZXM6b30pfX0pO3ZhciBDYz1tbih7ZmZ0XzpmdW5jdGlvbih0KXtmKFwiY29tcGxleDY0XCI9PT10LmR0eXBlLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHR5cGUgZm9yIHRmLnNwZWN0cmFsLmZmdCgpIG11c3QgYmUgY29tcGxleDY0IGJ1dCBnb3QgXCIrdC5kdHlwZStcIi5cIn0pO3ZhciBlPXQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMV0sbj10LnNpemUvZSxyPXQuYXMyRChuLGUpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuZmZ0KHIpfSx7aW5wdXQ6dH0pLnJlc2hhcGUodC5zaGFwZSl9fSksRWM9bW4oe2lmZnRfOmZ1bmN0aW9uKHQpe2YoXCJjb21wbGV4NjRcIj09PXQuZHR5cGUsZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBkdHlwZSBmb3IgdGYuc3BlY3RyYWwuaWZmdCgpIG11c3QgYmUgY29tcGxleDY0IGJ1dCBnb3QgXCIrdC5kdHlwZStcIi5cIn0pO3ZhciBlPXQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMV0sbj10LnNpemUvZSxyPXQuYXMyRChuLGUpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuaWZmdChyKX0se2lucHV0OnR9KS5yZXNoYXBlKHQuc2hhcGUpfX0pLFJjPW1uKHtyZmZ0XzpmdW5jdGlvbih0LGUpe2YoXCJmbG9hdDMyXCI9PT10LmR0eXBlLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHR5cGUgZm9yIHJmZnQoKSBtdXN0IGJlIHJlYWwgdmFsdWUgYnV0IGdvdCBcIit0LmR0eXBlfSk7dmFyIG4scj10LnNoYXBlW3Quc2hhcGUubGVuZ3RoLTFdLG89dC5zaXplL3I7aWYobnVsbCE9ZSYmZTxyKXt2YXIgYT10LnNoYXBlLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gMH0pLGk9dC5zaGFwZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHR9KTtpW3Quc2hhcGUubGVuZ3RoLTFdPWUsbj10LnNsaWNlKGEsaSkscj1lfWVsc2UgaWYobnVsbCE9ZSYmZT5yKXt2YXIgcz10LnNoYXBlLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdH0pO3NbdC5zaGFwZS5sZW5ndGgtMV09ZS1yLG49dC5jb25jYXQoVG4ocyksdC5zaGFwZS5sZW5ndGgtMSkscj1lfWVsc2Ugbj10O3ZhciB1PW4uemVyb3NMaWtlKCksbD1nbihuLHUpLmFzMkQobyxyKSxjPUNjKGwpLGg9TWF0aC5mbG9vcihyLzIpKzEscD15bihjKSxkPXhuKGMpLHY9cC5zcGxpdChbaCxyLWhdLHAuc2hhcGUubGVuZ3RoLTEpLG09ZC5zcGxpdChbaCxyLWhdLGQuc2hhcGUubGVuZ3RoLTEpLGc9bi5zaGFwZS5zbGljZSgpO3JldHVybiBnW24uc2hhcGUubGVuZ3RoLTFdPWgsZ24odlswXSxtWzBdKS5yZXNoYXBlKGcpfX0pLEljPW1uKHtpcmZmdF86ZnVuY3Rpb24odCl7dmFyIGU9dC5zaGFwZVt0LnNoYXBlLmxlbmd0aC0xXSxuPXQuc2l6ZS9lO2lmKGU8PTIpe3ZhciByPXQuYXMyRChuLGUpLG89RWMocik7cmV0dXJuIHluKG8pfXZhciBhPVtuLDIqKGUtMSldLGk9eW4odCkuYXMyRChuLGUpLHM9eG4odCkuYXMyRChuLGUpLHU9aS5zbGljZShbMCwxXSxbbixlLTJdKS5yZXZlcnNlKDEpLGw9cy5zbGljZShbMCwxXSxbbixlLTJdKS5yZXZlcnNlKDEpLm11bChDbigtMSkpLGM9aS5jb25jYXQodSwxKSxoPXMuY29uY2F0KGwsMSk7cmV0dXJuIHI9Z24oYyxoKS5hczJEKGFbMF0sYVsxXSksbz1FYyhyKSx5bihvKX19KSxrYz1PYmplY3QuZnJlZXplKHtmZnQ6Q2MsaWZmdDpFYyxyZmZ0OlJjLGlyZmZ0OkljfSk7dmFyIE5jPW1uKHtzcGFyc2VUb0RlbnNlXzpmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0wKTt2YXIgbz1ybih0LFwic3BhcnNlSW5kaWNlc1wiLFwic3BhcnNlVG9EZW5zZVwiLFwiaW50MzJcIiksYT1ybihlLFwic3BhcnNlVmFsdWVzXCIsXCJzcGFyc2VUb0RlbnNlXCIpLGk9cm4ocixcImRlZmF1bHRWYWx1ZVwiLFwic3BhcnNlVG9EZW5zZVwiLGEuZHR5cGUpO3JldHVybiBmdW5jdGlvbih0LGUsbixyKXtpZihcImludDMyXCIhPT10LmR0eXBlKXRocm93IG5ldyBFcnJvcihcInRmLnNwYXJzZVRvRGVuc2UoKSBleHBlY3RzIHRoZSBpbmRpY2VzIHRvIGJlIGludDMyIHR5cGUsIGJ1dCB0aGUgZHR5cGUgd2FzIFwiK3QuZHR5cGUrXCIuXCIpO2lmKHQucmFuaz4yKXRocm93IG5ldyBFcnJvcihcInNwYXJzZUluZGljZXMgc2hvdWxkIGJlIGEgc2NhbGFyLCB2ZWN0b3IsIG9yIG1hdHJpeCwgYnV0IGdvdCBzaGFwZSBcIit0LnNoYXBlK1wiLlwiKTt2YXIgbz10LnJhbms+MD90LnNoYXBlWzBdOjEsYT10LnJhbms+MT90LnNoYXBlWzFdOjE7aWYobi5sZW5ndGghPT1hKXRocm93IG5ldyBFcnJvcihcIm91dHB1dFNoYXBlIGhhcyBpbmNvcnJlY3QgbnVtYmVyIG9mIGVsZW1lbnRzOiwgXCIrbi5sZW5ndGgrXCIsIHNob3VsZCBiZTogXCIrYStcIi5cIik7dmFyIGk9ZS5zaXplO2lmKDAhPT1lLnJhbmsmJigxIT09ZS5yYW5rfHxpIT09bykpdGhyb3cgbmV3IEVycm9yKFwic3BhcnNlVmFsdWVzIGhhcyBpbmNvcnJlY3Qgc2hhcGUgXCIrZS5zaGFwZStcIiwgc2hvdWxkIGJlIFtdIG9yIFtcIitvK1wiXVwiKTtpZihlLmR0eXBlIT09ci5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJzcGFyc2VWYWx1ZXMuZHR5cGUgbXVzdCBtYXRjaCBkZWZhdWx0VmFsdWVzLmR0eXBlXCIpfShvLGEsbixpKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3BhcnNlVG9EZW5zZShvLGEsbixpKX0seyRzcGFyc2VJbmRpY2VzOm8sJHNwYXJzZVZhbHVlczphLCRkZWZhdWx0VmFsdWU6aX0pfX0pO3ZhciBTYz1tbih7Z2F0aGVyTkRfOmZ1bmN0aW9uKHQsZSl7dmFyIG49cm4oZSxcImluZGljZXNcIixcImdhdGhlck5EXCIsXCJpbnQzMlwiKSxyPXJuKHQsXCJ4XCIsXCJnYXRoZXJORFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmdhdGhlck5EKHIsbil9LHskeDpyLCRpbmRpY2VzOm59KX19KTt2YXIgQWM9bW4oe2RpYWdfOmZ1bmN0aW9uKHQpe3ZhciBlPXJuKHQsXCJ4XCIsXCJkaWFnXCIpLmZsYXR0ZW4oKSxuPXQuc2hhcGUuY29uY2F0KHQuc2hhcGUpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuZGlhZyhlKX0seyR4OmV9KS5yZXNoYXBlKG4pfX0pO3ZhciBUYz1tbih7ZHJvcG91dF86ZnVuY3Rpb24odCxlLG4scil7dmFyIG89cm4odCxcInhcIixcImRyb3BvdXRcIik7aWYoZihcImZsb2F0MzJcIj09PW8uZHR5cGUsZnVuY3Rpb24oKXtyZXR1cm5cInggaGFzIHRvIGJlIGEgZmxvYXRpbmcgcG9pbnQgdGVuc29yIHNpbmNlIGl0J3MgZ29pbmcgdG8gYmUgc2NhbGVkLCBidXQgZ290IGEgXCIrby5kdHlwZStcIiB0ZW5zb3IgaW5zdGVhZC5cIn0pLGYoZT49MCYmZTwxLGZ1bmN0aW9uKCl7cmV0dXJuXCJyYXRlIG11c3QgYmUgYSBmbG9hdCBpbiB0aGUgcmFuZ2UgWzAsIDEpLCBidXQgZ290IFwiK2UrXCIuXCJ9KSwwPT09ZSlyZXR1cm4gdCBpbnN0YW5jZW9mIGN0P28uY2xvbmUoKTpvO3ZhciBhPWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09ZSlyZXR1cm4gdC5zaGFwZS5zbGljZSgpO2lmKHkodC5zaGFwZSxlKSlyZXR1cm4gZTtpZih0LnNoYXBlLmxlbmd0aD09PWUubGVuZ3RoKXtmb3IodmFyIG49W10scj0wO3I8dC5zaGFwZS5sZW5ndGg7cisrKW51bGw9PWVbcl0mJm51bGwhPXQuc2hhcGVbcl0/bi5wdXNoKHQuc2hhcGVbcl0pOm4ucHVzaChlW3JdKTtyZXR1cm4gbn1yZXR1cm4gZX0obyxuKSxpPTEtZSxzPXhyKGEsMCwxLFwiZmxvYXQzMlwiLHIpLmFkZChpKS5mbG9vcigpLmRpdihpKTtyZXR1cm4gby5tdWwocyl9fSk7ZnVuY3Rpb24gRGModCxlLG4pe2Zvcih2YXIgcj0xLXQlMixvPW5ldyBGbG9hdDMyQXJyYXkodCksYT0wO2E8dDsrK2Epe3ZhciBpPTIqTWF0aC5QSSphLyh0K3ItMSk7b1thXT1lLW4qTWF0aC5jb3MoaSl9cmV0dXJuIEVuKG8sXCJmbG9hdDMyXCIpfXZhciBfYz1tbih7aGFubldpbmRvd186ZnVuY3Rpb24odCl7cmV0dXJuIERjKHQsLjUsLjUpfX0pLE9jPW1uKHtoYW1taW5nV2luZG93XzpmdW5jdGlvbih0KXtyZXR1cm4gRGModCwuNTQsLjQ2KX19KSxGYz1tbih7ZnJhbWVfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ciYmKHI9ITEpLHZvaWQgMD09PW8mJihvPTApO2Zvcih2YXIgYT0wLGk9W107YStlPD10LnNpemU7KWkucHVzaChIbCh0LGEsZSkpLGErPW47aWYocilmb3IoO2E8dC5zaXplOyl7dmFyIHM9YStlLXQuc2l6ZSx1PUJuKFtIbCh0LGEsZS1zKSxEbihbc10sbyldKTtpLnB1c2godSksYSs9bn1yZXR1cm4gMD09PWkubGVuZ3RoP1JuKFtdLFswLGVdKTpCbihpKS5hczJEKGkubGVuZ3RoLGUpfX0pLE1jPW1uKHtzdGZ0XzpmdW5jdGlvbih0LGUsbixyLG8pe3ZhciBhO3ZvaWQgMD09PW8mJihvPV9jKSxudWxsPT1yJiYoYT1lLHI9TWF0aC5mbG9vcihNYXRoLnBvdygyLE1hdGguY2VpbChNYXRoLmxvZyhhKS9NYXRoLmxvZygyKSkpKSk7Zm9yKHZhciBpPUZjKHQsZSxuKSxzPUh1KGksbyhlKSksdT1bXSxsPTA7bDxpLnNoYXBlWzBdO2wrKyl1LnB1c2goUmMocy5zbGljZShbbCwwXSxbMSxlXSkscikpO3JldHVybiBCbih1KX19KSxCYz1PYmplY3QuZnJlZXplKHtoYW5uV2luZG93Ol9jLGhhbW1pbmdXaW5kb3c6T2MsZnJhbWU6RmMsc3RmdDpNY30pO3ZhciBQYyxMYz1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIHZvaWQgMD09PW8mJihvPTEpLG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIG4sYSxpLHMsdSxsLGMsaCxwLHYsbSxnLHkseDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG49cm4odCxcInByZWRpY3Rpb25zXCIsXCJpblRvcEtcIiksYT1ybihlLFwidGFyZ2V0c1wiLFwiaW5Ub3BLXCIpLGYobi5yYW5rPjEsZnVuY3Rpb24oKXtyZXR1cm5cImluVG9wSygpIGV4cGVjdHMgdGhlIHByZWRpY3Rpb25zIHRvIGJlIG9mIHJhbmsgMiBvciBoaWdoZXIsIGJ1dCBnb3QgXCIrbi5yYW5rfSksZihuLnJhbmstMT09PWEucmFuayxmdW5jdGlvbigpe3JldHVyblwicHJlZGljdGlvbnMgcmFuayBzaG91bGQgYmUgMSBsYXJnZXIgdGhhbiB0YXJnZXRzIHJhbmssIGJ1dCBnb3QgcHJlZGljdGlvbnMgcmFuayBcIituLnJhbmsrXCIgYW5kIHRhcmdldHMgcmFuayBcIithLnJhbmt9KSxkKG4uc2hhcGUuc2xpY2UoMCxuLnNoYXBlLmxlbmd0aC0xKSxhLnNoYXBlLFwicHJlZGljdGlvbnMncyBzaGFwZSBzaG91bGQgYmUgYWxpZ24gd2l0aCB0aGUgdGFyZ2V0cycgc2hhcGUsIGV4Y2VwdCB0aGUgbGFzdCBkaW1lbnNpb24uXCIpLGk9bi5zaGFwZVtuLnNoYXBlLmxlbmd0aC0xXSxmKG8+MCYmbzw9aSxmdW5jdGlvbigpe3JldHVyblwiJ2snIHBhc3NlZCB0byBpblRvcEsoKSBtdXN0IGJlID4gMCAmJiA8PSB0aGUgcHJlZGljdGlvbnMgbGFzdCBkaW1lbnNpb24gKFwiK2krXCIpLCBidXQgZ290IFwiK299KSxbNCxuLmRhdGEoKV07Y2FzZSAxOnJldHVybiBzPXIuc2VudCgpLFs0LGEuZGF0YSgpXTtjYXNlIDI6Zm9yKHU9ci5zZW50KCksbD1bcy5sZW5ndGgvaSxpXSxoPWxbMV0scD1OKFwiYm9vbFwiLGM9bFswXSksdj0wO3Y8Yzt2Kyspe2ZvcihtPXYqaCxnPXMuc3ViYXJyYXkobSxtK2gpLHk9W10seD0wO3g8Zy5sZW5ndGg7eCsrKXkucHVzaCh7dmFsdWU6Z1t4XSxpbmRleDp4fSk7Zm9yKHkuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiBlLnZhbHVlLXQudmFsdWV9KSxwW3ZdPTAseD0wO3g8bzt4KyspaWYoeVt4XS5pbmRleD09PXVbdl0pe3Bbdl09MTticmVha319cmV0dXJuIHQhPT1uJiZuLmRpc3Bvc2UoKSxlIT09YSYmYS5kaXNwb3NlKCksWzIsYm4ocCxhLnNoYXBlLFwiYm9vbFwiKV19fSl9KX07IWZ1bmN0aW9uKHQpe3RbdC5OT05FPTBdPVwiTk9ORVwiLHRbdC5NRUFOPTFdPVwiTUVBTlwiLHRbdC5TVU09Ml09XCJTVU1cIix0W3QuU1VNX0JZX05PTlpFUk9fV0VJR0hUUz0zXT1cIlNVTV9CWV9OT05aRVJPX1dFSUdIVFNcIn0oUGN8fChQYz17fSkpO3ZhciBXYz1tbih7YWJzb2x1dGVEaWZmZXJlbmNlXzpmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj1QYy5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgbz1ybih0LFwibGFiZWxzXCIsXCJhYnNvbHV0ZURpZmZlcmVuY2VcIiksYT1ybihlLFwicHJlZGljdGlvbnNcIixcImFic29sdXRlRGlmZmVyZW5jZVwiKSxpPW51bGw7bnVsbCE9biYmKGk9cm4obixcIndlaWdodHNcIixcImFic29sdXRlRGlmZmVyZW5jZVwiKSksZChvLnNoYXBlLGEuc2hhcGUsXCJFcnJvciBpbiBhYnNvbHV0ZURpZmZlcmVuY2U6IFwiKTt2YXIgcz1vLnN1YihhKS5hYnMoKTtyZXR1cm4gVWMocyxpLHIpfX0pLFVjPW1uKHtjb21wdXRlV2VpZ2h0ZWRMb3NzXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49UGMuU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIHI9cm4odCxcImxvc3Nlc1wiLFwiY29tcHV0ZVdlaWdodGVkTG9zc1wiKSxvPW51bGw7bnVsbCE9ZSYmKG89cm4oZSxcIndlaWdodHNcIixcImNvbXB1dGVXZWlnaHRlZExvc3NcIikpO3ZhciBhPW51bGw9PW8/cjpyLm11bChvKTtpZihuPT09UGMuTk9ORSlyZXR1cm4gYTtpZihuPT09UGMuU1VNKXJldHVybiBhLnN1bSgpO2lmKG49PT1QYy5NRUFOKXtpZihudWxsPT1vKXJldHVybiBhLm1lYW4oKTt2YXIgaT1yLnNpemUvby5zaXplLHM9YS5zdW0oKS5kaXYoby5zdW0oKSk7cmV0dXJuIGk+MT9zLmRpdihDbihpKSk6c31pZihuPT09UGMuU1VNX0JZX05PTlpFUk9fV0VJR0hUUyl7aWYobnVsbD09bylyZXR1cm4gYS5zdW0oKS5kaXYoQ24oci5zaXplKSk7dmFyIHU9by5tdWwoQW4oci5zaGFwZSkpLm5vdEVxdWFsKENuKDApKS5zdW0oKS50b0Zsb2F0KCk7cmV0dXJuIGEuc3VtKCkuZGl2KHUpfXRocm93IEVycm9yKFwiVW5rbm93biByZWR1Y3Rpb246IFwiK24pfX0pLFZjPW1uKHtjb3NpbmVEaXN0YW5jZV86ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1vJiYobz1QYy5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgYT1ybih0LFwibGFiZWxzXCIsXCJjb3NpbmVEaXN0YW5jZVwiKSxpPXJuKGUsXCJwcmVkaWN0aW9uc1wiLFwiY29zaW5lRGlzdGFuY2VcIikscz1udWxsO251bGwhPXImJihzPXJuKHIsXCJ3ZWlnaHRzXCIsXCJjb3NpbmVEaXN0YW5jZVwiKSksZChhLnNoYXBlLGkuc2hhcGUsXCJFcnJvciBpbiBjb3NpbmVEaXN0YW5jZTogXCIpO3ZhciB1PUNuKDEpLnN1YihhLm11bChpKS5zdW0obiwhMCkpO3JldHVybiBVYyh1LHMsbyl9fSksemM9bW4oe2hpbmdlTG9zc186ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ciYmKHI9UGMuU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIG89cm4odCxcImxhYmVsc1wiLFwiaGluZ2VMb3NzXCIpLGE9cm4oZSxcInByZWRpY3Rpb25zXCIsXCJoaW5nZUxvc3NcIiksaT1udWxsO251bGwhPW4mJihpPXJuKG4sXCJ3ZWlnaHRzXCIsXCJoaW5nZUxvc3NcIikpLGQoby5zaGFwZSxhLnNoYXBlLFwiRXJyb3IgaW4gaGluZ2VMb3NzOiBcIik7dmFyIHM9Q24oMSk7bz1DbigyKS5tdWwobykuc3ViKHMpO3ZhciB1PXMuc3ViKG8ubXVsKGEpKS5yZWx1KCk7cmV0dXJuIFVjKHUsaSxyKX19KSxHYz1tbih7aHViZXJMb3NzXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PXImJihyPTEpLHZvaWQgMD09PW8mJihvPVBjLlNVTV9CWV9OT05aRVJPX1dFSUdIVFMpO3ZhciBhPXJuKHQsXCJsYWJlbHNcIixcImh1YmVyTG9zc1wiKSxpPXJuKGUsXCJwcmVkaWN0aW9uc1wiLFwiaHViZXJMb3NzXCIpLHM9bnVsbDtudWxsIT1uJiYocz1ybihuLFwid2VpZ2h0c1wiLFwiaHViZXJMb3NzXCIpKSxkKGEuc2hhcGUsaS5zaGFwZSxcIkVycm9yIGluIGh1YmVyTG9zczogXCIpO3ZhciB1PUNuKHIpLGw9aS5zdWIoYSkuYWJzKCksYz1VdShsLHUpLGg9bC5zdWIoYykscD1DbiguNSkubXVsKGMuc3F1YXJlKCkpLmFkZCh1Lm11bChoKSk7cmV0dXJuIFVjKHAscyxvKX19KSxIYz1tbih7bG9nTG9zc186ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1yJiYocj0xZS03KSx2b2lkIDA9PT1vJiYobz1QYy5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgYT1ybih0LFwibGFiZWxzXCIsXCJsb2dMb3NzXCIpLGk9cm4oZSxcInByZWRpY3Rpb25zXCIsXCJsb2dMb3NzXCIpLHM9bnVsbDtudWxsIT1uJiYocz1ybihuLFwid2VpZ2h0c1wiLFwibG9nTG9zc1wiKSksZChhLnNoYXBlLGkuc2hhcGUsXCJFcnJvciBpbiBsb2dMb3NzOiBcIik7dmFyIHU9Q24oMSksbD1DbihyKSxjPWEubXVsKGkuYWRkKGwpLmxvZygpKS5uZWcoKS5zdWIodS5zdWIoYSkubXVsKHUuc3ViKGkpLmFkZChsKS5sb2coKSkpO3JldHVybiBVYyhjLHMsbyl9fSkscWM9bW4oe21lYW5TcXVhcmVkRXJyb3JfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPVBjLlNVTV9CWV9OT05aRVJPX1dFSUdIVFMpO3ZhciBvPXJuKHQsXCJsYWJlbHNcIixcIm1lYW5TcXVhcmVkRXJyb3JcIiksYT1ybihlLFwicHJlZGljdGlvbnNcIixcIm1lYW5TcXVhcmVkRXJyb3JcIiksaT1udWxsO251bGwhPW4mJihpPXJuKG4sXCJ3ZWlnaHRzXCIsXCJtZWFuU3F1YXJlZEVycm9yXCIpKSxkKG8uc2hhcGUsYS5zaGFwZSxcIkVycm9yIGluIG1lYW5TcXVhcmVkRXJyb3I6IFwiKTt2YXIgcz1vLnNxdWFyZWREaWZmZXJlbmNlKGEpO3JldHVybiBVYyhzLGkscil9fSksJGM9bW4oe3NpZ21vaWRDcm9zc0VudHJvcHlfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ciYmKHI9MCksdm9pZCAwPT09byYmKG89UGMuU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIGE9cm4odCxcIm11bHRpQ2xhc3NMYWJlbHNcIixcInNpZ21vaWRDcm9zc0VudHJvcHlcIiksaT1ybihlLFwibG9naXRzXCIsXCJzaWdtb2lkQ3Jvc3NFbnRyb3B5XCIpLHM9bnVsbDtpZihudWxsIT1uJiYocz1ybihuLFwid2VpZ2h0c1wiLFwic2lnbW9pZENyb3NzRW50cm9weVwiKSksZChhLnNoYXBlLGkuc2hhcGUsXCJFcnJvciBpbiBzaWdtb2lkQ3Jvc3NFbnRyb3B5OiBcIikscj4wKXt2YXIgdT1DbihyKSxsPUNuKDEpLGM9Q24oLjUpO2E9YS5tdWwobC5zdWIodSkpLmFkZChjLm11bCh1KSl9dmFyIGg9ZnVuY3Rpb24odCxlKXt2YXIgbj1ybih0LFwibGFiZWxzXCIsXCJzaWdtb2lkQ3Jvc3NFbnRyb3B5V2l0aExvZ2l0c1wiKSxyPXJuKGUsXCJsb2dpdHNcIixcInNpZ21vaWRDcm9zc0VudHJvcHlXaXRoTG9naXRzXCIpO2Qobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gc2lnbW9pZENyb3NzRW50cm9weVdpdGhMb2dpdHM6IFwiKTt2YXIgbz1yLnJlbHUoKSxhPXIubXVsKG4pLGk9ci5hYnMoKS5uZWcoKS5leHAoKS5sb2cxcCgpO3JldHVybiBvLnN1YihhKS5hZGQoaSl9KGEsaSk7cmV0dXJuIFVjKGgscyxvKX19KSxLYz1tbih7c29mdG1heENyb3NzRW50cm9weV86ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1yJiYocj0wKSx2b2lkIDA9PT1vJiYobz1QYy5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgYT1ybih0LFwib25laG90TGFiZWxzXCIsXCJzb2Z0bWF4Q3Jvc3NFbnRyb3B5XCIpLGk9cm4oZSxcImxvZ2l0c1wiLFwic29mdG1heENyb3NzRW50cm9weVwiKSxzPW51bGw7aWYobnVsbCE9biYmKHM9cm4obixcIndlaWdodHNcIixcInNvZnRtYXhDcm9zc0VudHJvcHlcIikpLGQoYS5zaGFwZSxpLnNoYXBlLFwiRXJyb3IgaW4gc29mdG1heENyb3NzRW50cm9weTogXCIpLHI+MCl7dmFyIHU9Q24ociksbD1DbigxKSxjPUNuKGEuc2hhcGVbMV0pO2E9YS5tdWwobC5zdWIodSkpLmFkZCh1LmRpdihjKSl9dmFyIGg9ZnVuY3Rpb24odCxlLG4pe2lmKHZvaWQgMD09PW4mJihuPS0xKSwtMT09PW4mJihuPWUucmFuay0xKSxuIT09ZS5yYW5rLTEpdGhyb3cgRXJyb3IoXCJTb2Z0bWF4IGNyb3NzIGVudHJvcHkgYWxvbmcgYSBub24tbGFzdCBkaW1lbnNpb24gaXMgbm90IHlldCBzdXBwb3J0ZWQuIExhYmVscyAvIGxvZ2l0cyB3YXMgcmFuayBcIitlLnJhbmsrXCIgYW5kIGRpbSB3YXMgXCIrbik7cmV0dXJuIFhyKGZ1bmN0aW9uKHQsZSxyKXt2YXIgbz1lLmxvZ1N1bUV4cChbbl0sITApLGE9ZS50b0Zsb2F0KCkuc3ViKG8pO3JldHVybiByKFt0LGFdKSx7dmFsdWU6YS5tdWwodCkubmVnKCkuc3VtKFtuXSksZ3JhZEZ1bmM6ZnVuY3Rpb24odCxlKXt2YXIgcj1lWzBdLG89ZVsxXSxhPWxuKHQuc2hhcGUsW25dKTtyZXR1cm5bdC5yZXNoYXBlKGEpLm11bChyLnRvRmxvYXQoKS5zdWIoby5leHAoKSkpLHQucmVzaGFwZShhKS5tdWwoby5leHAoKS5zdWIoci50b0Zsb2F0KCkpKV19fX0pKHQsZSl9KGEsaSk7cmV0dXJuIFVjKGgscyxvKX19KSxqYz1PYmplY3QuZnJlZXplKHtnZXQgUmVkdWN0aW9uKCl7cmV0dXJuIFBjfSxhYnNvbHV0ZURpZmZlcmVuY2U6V2MsY29tcHV0ZVdlaWdodGVkTG9zczpVYyxjb3NpbmVEaXN0YW5jZTpWYyxoaW5nZUxvc3M6emMsaHViZXJMb3NzOkdjLGxvZ0xvc3M6SGMsbWVhblNxdWFyZWRFcnJvcjpxYyxzaWdtb2lkQ3Jvc3NFbnRyb3B5OiRjLHNvZnRtYXhDcm9zc0VudHJvcHk6S2N9KTtmdW5jdGlvbiBYYyh0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSksU3QudGlkeShmdW5jdGlvbigpe2lmKDIhPT10LnNoYXBlLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJxcjJkKCkgcmVxdWlyZXMgYSAyRCBUZW5zb3IsIGJ1dCBnb3QgYSBcIit0LnNoYXBlLmxlbmd0aCtcIkQgVGVuc29yLlwiKTtmb3IodmFyIG49dC5zaGFwZVswXSxyPXQuc2hhcGVbMV0sbz11cihuKSxhPXQuY2xvbmUoKSxpPVJuKFtbMV1dLFsxLDFdKSxzPWkuY2xvbmUoKSx1PW4+PXI/cjpuLGw9ZnVuY3Rpb24odCl7dmFyIGUsdT1hLGw9cyxjPW87ZT1TdC50aWR5KGZ1bmN0aW9uKCl7dmFyIGU9YS5zbGljZShbdCx0XSxbbi10LDFdKSx1PWUubm9ybSgpLGw9YS5zbGljZShbdCx0XSxbMSwxXSksYz1SbihbWy0xXV0pLndoZXJlKGwuZ3JlYXRlcigwKSxSbihbWzFdXSkpLGg9bC5zdWIoYy5tdWwodSkpLHA9ZS5kaXYoaCk7cz0xPT09cC5zaGFwZVswXT9pLmNsb25lKCk6aS5jb25jYXQocC5zbGljZShbMSwwXSxbcC5zaGFwZVswXS0xLHAuc2hhcGVbMV1dKSwwKTt2YXIgZj1jLm1hdE11bChoKS5kaXYodSkubmVnKCksZD1hLnNsaWNlKFt0LDBdLFtuLXQscl0pLHY9Zi5tdWwocyk7aWYoMD09PXQpYT1kLnN1Yih2Lm1hdE11bChzLnRyYW5zcG9zZSgpLm1hdE11bChkKSkpO2Vsc2V7dmFyIG09ZC5zdWIodi5tYXRNdWwocy50cmFuc3Bvc2UoKS5tYXRNdWwoZCkpKTthPWEuc2xpY2UoWzAsMF0sW3Qscl0pLmNvbmNhdChtLDApfXZhciBnPW8uc2xpY2UoWzAsdF0sW24sby5zaGFwZVsxXS10XSk7aWYoMD09PXQpbz1nLnN1YihnLm1hdE11bChzKS5tYXRNdWwodi50cmFuc3Bvc2UoKSkpO2Vsc2V7dmFyIHk9Zy5zdWIoZy5tYXRNdWwocykubWF0TXVsKHYudHJhbnNwb3NlKCkpKTtvPW8uc2xpY2UoWzAsMF0sW24sdF0pLmNvbmNhdCh5LDEpfXJldHVybltzLGEsb119KSxzPWVbMF0sYT1lWzFdLG89ZVsyXSx6ZShbdSxsLGNdKX0sYz0wO2M8dTsrK2MpbChjKTtyZXR1cm4hZSYmbj5yJiYobz1vLnNsaWNlKFswLDBdLFtuLHJdKSxhPWEuc2xpY2UoWzAsMF0sW3Iscl0pKSxbbyxhXX0pfXZhciBZYz1tbih7Z3JhbVNjaG1pZHRfOmZ1bmN0aW9uKHQpe3ZhciBlO2lmKEFycmF5LmlzQXJyYXkodCkpe2U9ITEsZihudWxsIT10JiZ0Lmxlbmd0aD4wLGZ1bmN0aW9uKCl7cmV0dXJuXCJHcmFtLVNjaG1pZHQgcHJvY2VzczogaW5wdXQgbXVzdCBub3QgYmUgbnVsbCwgdW5kZWZpbmVkLCBvciBlbXB0eVwifSk7Zm9yKHZhciBuPXRbMF0uc2hhcGVbMF0scj1mdW5jdGlvbihlKXtmKHRbZV0uc2hhcGVbMF09PT1uLGZ1bmN0aW9uKCl7cmV0dXJuXCJHcmFtLVNjaG1pZHQ6IE5vbi11bmlxdWUgbGVuZ3RocyBmb3VuZCBpbiB0aGUgaW5wdXQgdmVjdG9yczogKFwiK3RbZV0uc2hhcGVbMF0rXCIgdnMuIFwiK24rXCIpXCJ9KX0sbz0xO288dC5sZW5ndGg7KytvKXIobyl9ZWxzZSBlPSEwLHQ9Vm4odCx0LnNoYXBlWzBdLDApLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gQ3IodCxbMF0pfSk7Zih0Lmxlbmd0aDw9dFswXS5zaGFwZVswXSxmdW5jdGlvbigpe3JldHVyblwiR3JhbS1TY2htaWR0OiBOdW1iZXIgb2YgdmVjdG9ycyAoXCIrdC5sZW5ndGgrXCIpIGV4Y2VlZHMgbnVtYmVyIG9mIGRpbWVuc2lvbnMgKFwiK3RbMF0uc2hhcGVbMF0rXCIpLlwifSk7dmFyIGE9W10saT10LHM9ZnVuY3Rpb24odCl7YS5wdXNoKFN0LnRpZHkoZnVuY3Rpb24oKXt2YXIgZT1pW3RdO2lmKHQ+MClmb3IodmFyIG49MDtuPHQ7KytuKXt2YXIgcj1hYyhhW25dLm11bFN0cmljdChlKSkubXVsKGFbbl0pO2U9ZS5zdWIocil9cmV0dXJuIGUuZGl2KHZjKGUsXCJldWNsaWRlYW5cIikpfSkpfTtmb3Iobz0wO288dC5sZW5ndGg7KytvKXMobyk7cmV0dXJuIGU/RXIoYSwwKTphfX0pLFFjPW1uKHtxcl86ZnVuY3Rpb24odCxlKXtpZih2b2lkIDA9PT1lJiYoZT0hMSksdC5yYW5rPDIpdGhyb3cgbmV3IEVycm9yKFwicXIoKSByZXF1aXJlcyBpbnB1dCB0ZW5zb3IgdG8gaGF2ZSBhIHJhbmsgPj0gMiwgYnV0IGdvdCByYW5rIFwiK3QucmFuayk7aWYoMj09PXQucmFuaylyZXR1cm4gWGModCxlKTt2YXIgbj10LnNoYXBlLnNsaWNlKDAsdC5zaGFwZS5sZW5ndGgtMikucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQqZX0pLHI9a3IodC5yZXNoYXBlKFtuLHQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMl0sdC5zaGFwZVt0LnNoYXBlLmxlbmd0aC0xXV0pLDApLG89W10sYT1bXTtyZXR1cm4gci5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBuPVhjKHQsZSkscj1uWzBdLGk9blsxXTtvLnB1c2gociksYS5wdXNoKGkpfSksW0VyKG8sMCkucmVzaGFwZSh0LnNoYXBlKSxFcihhLDApLnJlc2hhcGUodC5zaGFwZSldfX0pLEpjPU9iamVjdC5mcmVlemUoe2dyYW1TY2htaWR0OlljLHFyOlFjfSk7ZnVuY3Rpb24gWmModCxlLG4scixvKXtudWxsPT1yJiYocj0uNSksbnVsbD09byYmKG89TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTt2YXIgYT10LnNoYXBlWzBdO3JldHVybiBuPU1hdGgubWluKG4sYSksZigwPD1yJiZyPD0xLGZ1bmN0aW9uKCl7cmV0dXJuXCJpb3VUaHJlc2hvbGQgbXVzdCBiZSBpbiBbMCwgMV0sIGJ1dCB3YXMgJ1wiK3IrXCInXCJ9KSxmKDI9PT10LnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cImJveGVzIG11c3QgYmUgYSAyRCB0ZW5zb3IsIGJ1dCB3YXMgb2YgcmFuayAnXCIrdC5yYW5rK1wiJ1wifSksZig0PT09dC5zaGFwZVsxXSxmdW5jdGlvbigpe3JldHVyblwiYm94ZXMgbXVzdCBoYXZlIDQgY29sdW1ucywgYnV0IDJuZCBkaW1lbnNpb24gd2FzIFwiK3Quc2hhcGVbMV19KSxmKDE9PT1lLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cInNjb3JlcyBtdXN0IGJlIGEgMUQgdGVuc29yXCJ9KSxmKGUuc2hhcGVbMF09PT1hLGZ1bmN0aW9uKCl7cmV0dXJuXCJzY29yZXMgaGFzIGluY29tcGF0aWJsZSBzaGFwZSB3aXRoIGJveGVzLiBFeHBlY3RlZCBcIithK1wiLCBidXQgd2FzIFwiK2Uuc2hhcGVbMF19KSx7bWF4T3V0cHV0U2l6ZTpuLGlvdVRocmVzaG9sZDpyLHNjb3JlVGhyZXNob2xkOm99fXZhciB0aD1tbih7cmVzaXplQmlsaW5lYXJfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9cm4odCxcImltYWdlc1wiLFwicmVzaXplQmlsaW5lYXJcIik7ZigzPT09ci5yYW5rfHw0PT09ci5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXNpemVCaWxpbmVhcjogeCBtdXN0IGJlIHJhbmsgMyBvciA0LCBidXQgZ290IHJhbmsgXCIrci5yYW5rK1wiLlwifSksZigyPT09ZS5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHJlc2l6ZUJpbGluZWFyOiBuZXcgc2hhcGUgbXVzdCAyRCwgYnV0IGdvdCBzaGFwZSBcIitlK1wiLlwifSk7dmFyIG89cixhPSExOzM9PT1yLnJhbmsmJihhPSEwLG89ci5hczREKDEsci5zaGFwZVswXSxyLnNoYXBlWzFdLHIuc2hhcGVbMl0pKTt2YXIgaT1lWzBdLHM9ZVsxXSx1PVN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3JldHVybiBlKFtvXSksdC5yZXNpemVCaWxpbmVhcihvLGkscyxuKX0se2JhdGNoSW1hZ2VzOm99LGZ1bmN0aW9uKHQsZSl7cmV0dXJue2JhdGNoSW1hZ2VzOmZ1bmN0aW9uKCl7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbihyKXtyZXR1cm4gci5yZXNpemVCaWxpbmVhckJhY2twcm9wKHQsZVswXSxuKX0se30pfX19KTtyZXR1cm4gYT91LmFzM0QodS5zaGFwZVsxXSx1LnNoYXBlWzJdLHUuc2hhcGVbM10pOnV9fSksZWg9bW4oe3Jlc2l6ZU5lYXJlc3ROZWlnaGJvcl86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1ybih0LFwiaW1hZ2VzXCIsXCJyZXNpemVOZWFyZXN0TmVpZ2hib3JcIik7ZigzPT09ci5yYW5rfHw0PT09ci5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXNpemVOZWFyZXN0TmVpZ2hib3I6IHggbXVzdCBiZSByYW5rIDMgb3IgNCwgYnV0IGdvdCByYW5rIFwiK3IucmFuaytcIi5cIn0pLGYoMj09PWUubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXNpemVOZWFyZXN0TmVpZ2hib3I6IG5ldyBzaGFwZSBtdXN0IDJELCBidXQgZ290IHNoYXBlIFwiK2UrXCIuXCJ9KSxmKFwiZmxvYXQzMlwiPT09ci5kdHlwZXx8XCJpbnQzMlwiPT09ci5kdHlwZSxmdW5jdGlvbigpe3JldHVyblwiYGltYWdlc2AgbXVzdCBoYXZlIGBpbnQzMmAgb3IgYGZsb2F0MzJgIGFzIGR0eXBlXCJ9KTt2YXIgbz1yLGE9ITE7Mz09PXIucmFuayYmKGE9ITAsbz1yLmFzNEQoMSxyLnNoYXBlWzBdLHIuc2hhcGVbMV0sci5zaGFwZVsyXSkpO3ZhciBpPWVbMF0scz1lWzFdLHU9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUoW29dKSx0LnJlc2l6ZU5lYXJlc3ROZWlnaGJvcihvLGkscyxuKX0se2JhdGNoSW1hZ2VzOm99LGZ1bmN0aW9uKHQsZSl7cmV0dXJue2JhdGNoSW1hZ2VzOmZ1bmN0aW9uKCl7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbihyKXtyZXR1cm4gci5yZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcCh0LGVbMF0sbil9LHt9KX19fSk7cmV0dXJuIGE/dS5hczNEKHUuc2hhcGVbMV0sdS5zaGFwZVsyXSx1LnNoYXBlWzNdKTp1fX0pLG5oPW1uKHtub25NYXhTdXBwcmVzc2lvbl86ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1yJiYocj0uNSksdm9pZCAwPT09byYmKG89TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTt2YXIgYT1ybih0LFwiYm94ZXNcIixcIm5vbk1heFN1cHByZXNzaW9uXCIpLGk9cm4oZSxcInNjb3Jlc1wiLFwibm9uTWF4U3VwcHJlc3Npb25cIikscz1aYyhhLGksbixyLG8pO3JldHVybiBuPXMubWF4T3V0cHV0U2l6ZSxyPXMuaW91VGhyZXNob2xkLG89cy5zY29yZVRocmVzaG9sZCxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQubm9uTWF4U3VwcHJlc3Npb24oYSxpLG4scixvKX0seyRib3hlczphfSl9fSkscmg9ZnVuY3Rpb24odCxlLG8sYSxpKXtyZXR1cm4gdm9pZCAwPT09YSYmKGE9LjUpLHZvaWQgMD09PWkmJihpPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSksbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgbixzLHUsbCxjLGgscDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG49cm4odCxcImJveGVzXCIsXCJub25NYXhTdXBwcmVzc2lvbkFzeW5jXCIpLHM9cm4oZSxcInNjb3Jlc1wiLFwibm9uTWF4U3VwcHJlc3Npb25Bc3luY1wiKSx1PVpjKG4scyxvLGEsaSksbz11Lm1heE91dHB1dFNpemUsYT11LmlvdVRocmVzaG9sZCxpPXUuc2NvcmVUaHJlc2hvbGQsWzQsUHJvbWlzZS5hbGwoW24uZGF0YSgpLHMuZGF0YSgpXSldO2Nhc2UgMTpyZXR1cm4gbD1yLnNlbnQoKSxjPWxbMF0saD1sWzFdLHA9SW8oYyxoLG8sYSxpKSxuIT09dCYmbi5kaXNwb3NlKCkscyE9PWUmJnMuZGlzcG9zZSgpLFsyLHBdfX0pfSl9LG9oPW1uKHtjcm9wQW5kUmVzaXplXzpmdW5jdGlvbih0LGUsbixyLG8sYSl7dmFyIGk9cm4odCxcImltYWdlXCIsXCJjcm9wQW5kUmVzaXplXCIsXCJmbG9hdDMyXCIpLHM9cm4oZSxcImJveGVzXCIsXCJjcm9wQW5kUmVzaXplXCIsXCJmbG9hdDMyXCIpLHU9cm4obixcImJveEluZFwiLFwiY3JvcEFuZFJlc2l6ZVwiLFwiaW50MzJcIik7bz1vfHxcImJpbGluZWFyXCIsYT1hfHwwO3ZhciBsPXMuc2hhcGVbMF07cmV0dXJuIGYoND09PWkucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY3JvcEFuZFJlc2l6ZTogaW1hZ2UgbXVzdCBiZSByYW5rIDQsYnV0IGdvdCByYW5rIFwiK2kucmFuaytcIi5cIn0pLGYoMj09PXMucmFuayYmND09PXMuc2hhcGVbMV0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNyb3BBbmRSZXNpemU6IGJveGVzIG11c3QgYmUgaGF2ZSBzaXplIFtcIitsK1wiLDRdIGJ1dCBoYWQgc2hhcGUgXCIrcy5zaGFwZStcIi5cIn0pLGYoMT09PXUucmFuayYmdS5zaGFwZVswXT09PWwsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNyb3BBbmRSZXNpemU6IGJveEluZCBtdXN0IGJlIGhhdmUgc2l6ZSBbXCIrbCtcIl0gYnV0IGhhZCBzaGFwZSBcIitzLnNoYXBlK1wiLlwifSksZigyPT09ci5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNyb3BBbmRSZXNpemU6IGNyb3BTaXplIG11c3QgYmUgb2YgbGVuZ3RoIDIsIGJ1dCBnb3QgbGVuZ3RoIFwiK3IubGVuZ3RoK1wiLlwifSksZihyWzBdPj0xJiZyWzFdPj0xLGZ1bmN0aW9uKCl7cmV0dXJuXCJjcm9wU2l6ZSBtdXN0IGJlIGF0bGVhc3QgWzEsMV0sIGJ1dCB3YXMgXCIrcn0pLGYoXCJiaWxpbmVhclwiPT09b3x8XCJuZWFyZXN0XCI9PT1vLGZ1bmN0aW9uKCl7cmV0dXJuXCJtZXRob2QgbXVzdCBiZSBiaWxpbmVhciBvciBuZWFyZXN0LCBidXQgd2FzIFwiK299KSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXtyZXR1cm4gdC5jcm9wQW5kUmVzaXplKGkscyx1LHIsbyxhKX0seyRpbWFnZTppLCRib3hlczpzfSl9fSksYWg9T2JqZWN0LmZyZWV6ZSh7cmVzaXplQmlsaW5lYXI6dGgscmVzaXplTmVhcmVzdE5laWdoYm9yOmVoLG5vbk1heFN1cHByZXNzaW9uOm5oLG5vbk1heFN1cHByZXNzaW9uQXN5bmM6cmgsY3JvcEFuZFJlc2l6ZTpvaH0pO3ZhciBpaD1tbih7bWF0TXVsXzpmdW5jdGlvbih0KXt2YXIgZSxuPXQuYSxyPXQuYixvPXQudHJhbnNwb3NlQSxhPXZvaWQgMCE9PW8mJm8saT10LnRyYW5zcG9zZUIscz12b2lkIDAhPT1pJiZpLHU9dC5iaWFzLGw9dC5hY3RpdmF0aW9uLGM9dm9pZCAwPT09bD9cImxpbmVhclwiOmwsaD10LnByZWx1QWN0aXZhdGlvbldlaWdodHMscD1ybihuLFwiYVwiLFwiZnVzZWQgbWF0TXVsXCIpLGQ9cm4ocixcImJcIixcImZ1c2VkIG1hdE11bFwiKTtlPXd0KHAsZCkscD1lWzBdLGQ9ZVsxXTt2YXIgdj1hP3Auc2hhcGVbcC5yYW5rLTJdOnAuc2hhcGVbcC5yYW5rLTFdLG09cz9kLnNoYXBlW2QucmFuay0xXTpkLnNoYXBlW2QucmFuay0yXSx4PWE/cC5zaGFwZVtwLnJhbmstMV06cC5zaGFwZVtwLnJhbmstMl0sYj1zP2Quc2hhcGVbZC5yYW5rLTJdOmQuc2hhcGVbZC5yYW5rLTFdLHc9cC5zaGFwZS5zbGljZSgwLC0yKSxDPWQuc2hhcGUuc2xpY2UoMCwtMiksRT1nKHcpLFI9ZyhDKTtmKHAucmFuaz49MiYmZC5yYW5rPj0yJiZwLnJhbms9PT1kLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIG1hdE11bDogaW5wdXRzIG11c3QgaGF2ZSB0aGUgc2FtZSByYW5rIG9mIGF0IGxlYXN0IDIsIGdvdCByYW5rcyBcIitwLnJhbmsrXCIgYW5kIFwiK2QucmFuaytcIi5cIn0pLGYoeSh3LEMpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBtYXRNdWw6IG91dGVyIGRpbWVuc2lvbnMgKFwiK3crXCIpIGFuZCAoXCIrQytcIikgb2YgVGVuc29ycyB3aXRoIHNoYXBlcyBcIitwLnNoYXBlK1wiIGFuZCBcIitkLnNoYXBlK1wiIG11c3QgbWF0Y2guXCJ9KSxmKHY9PT1tLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBtYXRNdWw6IGlubmVyIHNoYXBlcyAoXCIrditcIikgYW5kIChcIittK1wiKSBvZiBUZW5zb3JzIHdpdGggc2hhcGVzIFwiK3Auc2hhcGUrXCIgYW5kIFwiK2Quc2hhcGUrXCIgYW5kIHRyYW5zcG9zZUE9XCIrYStcIiBhbmQgdHJhbnNwb3NlQj1cIitzK1wiIG11c3QgbWF0Y2guXCJ9KTt2YXIgSSxrLE49cC5zaGFwZS5zbGljZSgwLC0yKS5jb25jYXQoW3gsYl0pLFM9YT9wLmFzM0QoRSx2LHgpOnAuYXMzRChFLHgsdiksQT1zP2QuYXMzRChSLGIsbSk6ZC5hczNEKFIsbSxiKTtudWxsIT11JiZybyhOLChJPXd0KEk9cm4odSxcImJpYXNcIixcImZ1c2VkIG1hdE11bFwiKSxwKVswXSkuc2hhcGUpLG51bGwhPWgmJihrPXJuKGgsXCJwcmVsdSB3ZWlnaHRzXCIsXCJmdXNlZCBtYXRNdWxcIikpO3ZhciBUPXskYTpTLCRiOkF9O3JldHVybiBudWxsIT11JiYoVC4kYmlhcz1JKSxudWxsIT1oJiYoVC4kcHJlbHVBY3RpdmF0aW9uV2VpZ2h0cz1rKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10LmZ1c2VkQmF0Y2hNYXRNdWwoe2E6UyxiOkEsdHJhbnNwb3NlQTphLHRyYW5zcG9zZUI6cyxiaWFzOkksYWN0aXZhdGlvbjpjLHByZWx1QWN0aXZhdGlvbldlaWdodHM6a30pO3JldHVybiBlKFtTLEEsbl0pLG59LFQsZnVuY3Rpb24odCxlKXt2YXIgbixyPWVbMF0sbz1lWzFdLGk9ZVsyXTtpZihudWxsPT1jfHxcImxpbmVhclwiPT09YyluPXQ7ZWxzZXtpZihcInJlbHVcIiE9PWMpdGhyb3cgbmV3IEVycm9yKFwiR3JhZGllbnQgZm9yIGFjdGl2YXRpb24gXCIrYytcIiBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWQgeWV0LlwiKTtuPXQubXVsKGkuc3RlcCgpKX12YXIgbD17fTtyZXR1cm4gbnVsbCE9dSYmKGw9eyRiaWFzOmZ1bmN0aW9uKCl7dmFyIHQ9bixlPW5vKEkuc2hhcGUsbi5zaGFwZSk7cmV0dXJuIGUubGVuZ3RoPjAmJih0PXQuc3VtKGUpKSx0LnJlc2hhcGUoSS5zaGFwZSl9fSksYXx8cz8hYSYmcz9PYmplY3QuYXNzaWduKHskYTpmdW5jdGlvbigpe3JldHVybiBuLm1hdE11bChvLCExLCExKX0sJGI6ZnVuY3Rpb24oKXtyZXR1cm4gbi5tYXRNdWwociwhMCwhMSl9fSxsKTphJiYhcz9PYmplY3QuYXNzaWduKHskYTpmdW5jdGlvbigpe3JldHVybiBvLm1hdE11bChuLCExLCEwKX0sJGI6ZnVuY3Rpb24oKXtyZXR1cm4gci5tYXRNdWwobiwhMSwhMSl9fSxsKTpPYmplY3QuYXNzaWduKHskYTpmdW5jdGlvbigpe3JldHVybiBvLm1hdE11bChuLCEwLCEwKX0sJGI6ZnVuY3Rpb24oKXtyZXR1cm4gbi5tYXRNdWwociwhMCwhMCl9fSxsKTpPYmplY3QuYXNzaWduKHskYTpmdW5jdGlvbigpe3JldHVybiBuLm1hdE11bChvLCExLCEwKX0sJGI6ZnVuY3Rpb24oKXtyZXR1cm4gci5tYXRNdWwobiwhMCwhMSl9fSxsKX0pLnJlc2hhcGUoTil9fSksc2g9bW4oe2NvbnYyZF86ZnVuY3Rpb24odCl7dmFyIGU9dC54LG49dC5maWx0ZXIscj10LnN0cmlkZXMsbz10LnBhZCxhPXQuZGF0YUZvcm1hdCxpPXZvaWQgMD09PWE/XCJOSFdDXCI6YSxzPXQuZGlsYXRpb25zLHU9dm9pZCAwPT09cz9bMSwxXTpzLGw9dC5kaW1Sb3VuZGluZ01vZGUsYz10LmJpYXMsaD10LmFjdGl2YXRpb24scD12b2lkIDA9PT1oP1wibGluZWFyXCI6aCxkPXQucHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyx2PXJuKGUsXCJ4XCIsXCJjb252MmRcIiksbT1ybihuLFwiZmlsdGVyXCIsXCJjb252MmRcIiksZz12LHk9ITE7Mz09PXYucmFuayYmKHk9ITAsZz12LmFzNEQoMSx2LnNoYXBlWzBdLHYuc2hhcGVbMV0sdi5zaGFwZVsyXSkpLGYoND09PWcucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZnVzZWQgY29udjJkOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK2cucmFuaytcIi5cIn0pLGYoND09PW0ucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZnVzZWQgY29udjJkOiBmaWx0ZXIgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIittLnJhbmsrXCIuXCJ9KSxudWxsIT1sJiZmKHgobyksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGNvbnYyZDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIrbCtcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSksZihnLnNoYXBlWzNdPT09bS5zaGFwZVsyXSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkOiBkZXB0aCBvZiBpbnB1dCAoXCIrZy5zaGFwZVszXStcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBmb3IgZmlsdGVyIFwiK20uc2hhcGVbMl0rXCIuXCJ9KSxmKHZvKHIsdSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyRDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrcitcIiBhbmQgZGlsYXRpb25zICdcIit1K1wiJ1wifSksZihcIk5IV0NcIj09PWksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZDogZ290IGRhdGFGb3JtYXQgb2YgXCIraStcIiBidXQgb25seSBOSFdDIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuXCJ9KTt2YXIgYix3LEM9aW8oZy5zaGFwZSxtLnNoYXBlLHIsdSxvLGwpO251bGwhPWMmJihiPXd0KGI9cm4oYyxcImJpYXNcIixcImZ1c2VkIGNvbnYyZFwiKSx2KVswXSxybyhDLm91dFNoYXBlLGIuc2hhcGUpKSxudWxsIT1kJiYodz1ybihkLFwicHJlbHUgd2VpZ2h0c1wiLFwiZnVzZWQgY29udjJkXCIpKTt2YXIgRT17eDpnLCRmaWx0ZXI6bX07bnVsbCE9YyYmKEUuJGJpYXM9YiksbnVsbCE9ZCYmKEUuJHByZWx1QWN0aXZhdGlvbldlaWdodHM9dyk7dmFyIFI9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5mdXNlZENvbnYyZCh7aW5wdXQ6ZyxmaWx0ZXI6bSxjb252SW5mbzpDLGJpYXM6YixhY3RpdmF0aW9uOnAscHJlbHVBY3RpdmF0aW9uV2VpZ2h0czp3fSk7cmV0dXJuIGUoW20sZyxuXSksbn0sRSxmdW5jdGlvbih0LGUpe3ZhciBuLGE9ZSxpPWFbMF0scz1hWzFdLGw9YVsyXTtpZihudWxsPT1wfHxcImxpbmVhclwiPT09cCluPXQ7ZWxzZXtpZihcInJlbHVcIiE9PXApdGhyb3cgbmV3IEVycm9yKFwiR3JhZGllbnQgZm9yIGFjdGl2YXRpb24gXCIrcCtcIiBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWQgeWV0LlwiKTtuPXQubXVsKGwuc3RlcCgpKX1mKGZvKHUpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBncmFkaWVudCBvZiBmdXNlZCBjb252MkQ6IGRpbGF0aW9uIHJhdGVzIGdyZWF0ZXIgdGhhbiAxIGFyZSBub3QgeWV0IHN1cHBvcnRlZCBpbiBncmFkaWVudHMuIEdvdCBkaWxhdGlvbnMgJ1wiK3UrXCInXCJ9KTt2YXIgaD17fTtyZXR1cm4gbnVsbCE9YyYmKGg9eyRiaWFzOmZ1bmN0aW9uKCl7dmFyIHQ9bixlPW5vKGIuc2hhcGUsbi5zaGFwZSk7cmV0dXJuIGUubGVuZ3RoPjAmJih0PXQuc3VtKGUpKSx0LnJlc2hhcGUoYi5zaGFwZSl9fSksT2JqZWN0LmFzc2lnbih7eDpmdW5jdGlvbigpe3JldHVybiBDbChzLnNoYXBlLG4saSxyLG8pfSwkZmlsdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIHdsKHMsbixpLnNoYXBlLHIsbyl9fSxoKX0pO3JldHVybiB5P1IuYXMzRChSLnNoYXBlWzFdLFIuc2hhcGVbMl0sUi5zaGFwZVszXSk6Un19KSx1aD1tbih7ZGVwdGh3aXNlQ29udjJkXzpmdW5jdGlvbih0KXt2YXIgZT10Lngsbj10LmZpbHRlcixyPXQuc3RyaWRlcyxvPXQucGFkLGE9KHQuZGF0YUZvcm1hdCx0LmRpbGF0aW9ucyksaT12b2lkIDA9PT1hP1sxLDFdOmEscz10LmRpbVJvdW5kaW5nTW9kZSx1PXQuYmlhcyxsPXQuYWN0aXZhdGlvbixjPXZvaWQgMD09PWw/XCJsaW5lYXJcIjpsLGg9dC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzLHA9cm4oZSxcInhcIixcImRlcHRod2lzZUNvbnYyZFwiKSxkPXJuKG4sXCJmaWx0ZXJcIixcImRlcHRod2lzZUNvbnYyZFwiKSx2PXAsbT0hMTszPT09cC5yYW5rJiYobT0hMCx2PXAuYXM0RCgxLHAuc2hhcGVbMF0scC5zaGFwZVsxXSxwLnNoYXBlWzJdKSksZig0PT09di5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBkZXB0aHdpc2VDb252MmQ6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrdi5yYW5rK1wiLlwifSksZig0PT09ZC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBkZXB0aHdpc2VDb252MmQ6IGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK2QucmFuaytcIi5cIn0pLGYodi5zaGFwZVszXT09PWQuc2hhcGVbMl0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGRlcHRod2lzZUNvbnYyZDogbnVtYmVyIG9mIGlucHV0IGNoYW5uZWxzIChcIit2LnNoYXBlWzNdK1wiKSBtdXN0IG1hdGNoIHRoZSBpbkNoYW5uZWxzIGRpbWVuc2lvbiBpbiBmaWx0ZXIgXCIrZC5zaGFwZVsyXStcIi5cIn0pLG51bGw9PWkmJihpPVsxLDFdKSxmKHZvKHIsaSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGRlcHRod2lzZUNvbnYyZDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrcitcIiBhbmQgZGlsYXRpb25zICdcIitpK1wiJ1wifSksbnVsbCE9cyYmZih4KG8pLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBkZXB0aHdpc2VDb252MmQ6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZyBkaW1Sb3VuZGluZ01vZGUgXCIrcytcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSk7dmFyIGcseSxiPWlvKHYuc2hhcGUsZC5zaGFwZSxyLGksbyxzLCEwKTtudWxsIT11JiYoZz13dChnPXJuKHUsXCJiaWFzXCIsXCJmdXNlZCBjb252MmRcIikscClbMF0scm8oYi5vdXRTaGFwZSxnLnNoYXBlKSksbnVsbCE9aCYmKHk9cm4oaCxcInByZWx1IHdlaWdodHNcIixcImZ1c2VkIGRlcHRod2lzZUNvbnYyZFwiKSk7dmFyIHc9e3g6diwkZmlsdGVyOmR9O251bGwhPXUmJih3LiRiaWFzPWcpLG51bGwhPWgmJih3LiRwcmVsdUFjdGl2YXRpb25XZWlnaHRzPXkpO3ZhciBDPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQuZnVzZWREZXB0aHdpc2VDb252MkQoe2lucHV0OnYsZmlsdGVyOmQsY29udkluZm86YixiaWFzOmcsYWN0aXZhdGlvbjpjLHByZWx1QWN0aXZhdGlvbldlaWdodHM6eX0pO3JldHVybiBlKFt2LGQsbl0pLG59LHcsZnVuY3Rpb24odCxlKXtmKGZvKGkpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBncmFkaWVudCBvZiBmdXNlZCBkZXB0aHdpc2VDb252MmQ6IGRpbGF0aW9uIHJhdGVzIGdyZWF0ZXIgdGhhbiAxIGFyZSBub3QgeWV0IHN1cHBvcnRlZC4gR290IGRpbGF0aW9ucyAnXCIraStcIidcIn0pO3ZhciBuLHI9ZVswXSxvPWVbMV0sYT1lWzJdO2lmKG51bGw9PWN8fFwibGluZWFyXCI9PT1jKW49dDtlbHNle2lmKFwicmVsdVwiIT09Yyl0aHJvdyBuZXcgRXJyb3IoXCJHcmFkaWVudCBmb3IgYWN0aXZhdGlvbiBcIitjK1wiIGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZCB5ZXQuXCIpO249dC5tdWwoYS5zdGVwKCkpfXZhciBzPXt9O3JldHVybiBudWxsIT11JiYocz17JGJpYXM6ZnVuY3Rpb24oKXt2YXIgdD1uLGU9bm8oZy5zaGFwZSxuLnNoYXBlKTtyZXR1cm4gZS5sZW5ndGg+MCYmKHQ9dC5zdW0oZSkpLHQucmVzaGFwZShnLnNoYXBlKX19KSxPYmplY3QuYXNzaWduKHt4OmZ1bmN0aW9uKCl7cmV0dXJuIFJsKHIuc2hhcGUsbixvLGIpfSwkZmlsdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIElsKHIsbixvLnNoYXBlLGIpfX0scyl9KTtyZXR1cm4gbT9DLmFzM0QoQy5zaGFwZVsxXSxDLnNoYXBlWzJdLEMuc2hhcGVbM10pOkN9fSksbGg9T2JqZWN0LmZyZWV6ZSh7bWF0TXVsOmloLGNvbnYyZDpzaCxkZXB0aHdpc2VDb252MmQ6dWh9KSxjaD1PYmplY3QuZnJlZXplKHtpbWFnZTphaCxsaW5hbGc6SmMsbG9zc2VzOmpjLHNwZWN0cmFsOmtjLGZ1c2VkOmxoLHNpZ25hbDpCYyxjb252MWQ6eWwsY29udjJkOnhsLGNvbnYzZDpibCxkZXB0aHdpc2VDb252MmQ6RWwsc2VwYXJhYmxlQ29udjJkOmtsLGNvbnYyZFRyYW5zcG9zZTpObCxjb252M2RUcmFuc3Bvc2U6U2wsb3A6bW4sYmF0Y2hOb3JtYWxpemF0aW9uMmQ6Z3UsYmF0Y2hOb3JtYWxpemF0aW9uM2Q6eXUsYmF0Y2hOb3JtYWxpemF0aW9uNGQ6eHUsYmF0Y2hOb3JtYWxpemF0aW9uOmJ1LGJhdGNoTm9ybTp3dSxiYXRjaE5vcm0yZDpDdSxiYXRjaE5vcm0zZDpFdSxiYXRjaE5vcm00ZDpSdSxib29sZWFuTWFza0FzeW5jOmRsLGNvbXBsZXg6Z24scmVhbDp5bixpbWFnOnhuLGNvbmNhdDpCbixjb25jYXQxZDpQbixjb25jYXQyZDpMbixjb25jYXQzZDpXbixjb25jYXQ0ZDpVbixzcGxpdDpWbixtYXRNdWw6QWwsZG90OlRsLG91dGVyUHJvZHVjdDpEbCxyZXZlcnNlOl9sLHJldmVyc2UxZDpPbCxyZXZlcnNlMmQ6RmwscmV2ZXJzZTNkOk1sLHJldmVyc2U0ZDpCbCxtYXhQb29sOldsLGF2Z1Bvb2w6VWwscG9vbDpWbCxtYXhQb29sM2Q6emwsYXZnUG9vbDNkOkdsLHNsaWNlOkhsLHNsaWNlMWQ6cWwsc2xpY2UyZDokbCxzbGljZTNkOktsLHNsaWNlNGQ6amwsYWJzOlRzLGFjb3M6RHMsYWNvc2g6X3MsYXNpbjpPcyxhc2luaDpGcyxhdGFuOk1zLGF0YW5oOkJzLGNlaWw6UHMsY2xpcEJ5VmFsdWU6THMsY29zOldzLGNvc2g6VXMsZXJmOlZzLGV4cDp6cyxleHBtMTpHcyxmbG9vcjpIcyxsb2c6cXMsbG9nMXA6JHMsbG9nU2lnbW9pZDpLcyxuZWc6anMscmVjaXByb2NhbDpYcyxyb3VuZDpZcyxyc3FydDpRcyxzaWdtb2lkOkpzLHNpZ246WnMsaXNOYU46dHUsaXNJbmY6ZXUsaXNGaW5pdGU6bnUsc2luOnJ1LHNpbmg6b3Usc29mdHBsdXM6YXUsc3FydDppdSxzcXVhcmU6c3Usc3RlcDp1dSx0YW46bHUsdGFuaDpjdSxhbGw6WWwsYW55OlFsLGFyZ01heDpKbCxhcmdNaW46WmwsbG9nU3VtRXhwOnRjLG1heDplYyxtZWFuOm5jLG1pbjpyYyxtb21lbnRzOm9jLHN1bTphYyxwcm9kOmljLGVxdWFsOkp1LGVxdWFsU3RyaWN0Olp1LGdyZWF0ZXI6dGwsZ3JlYXRlckVxdWFsOmVsLGdyZWF0ZXJFcXVhbFN0cmljdDpubCxncmVhdGVyU3RyaWN0OnJsLGxlc3M6b2wsbGVzc0VxdWFsOmFsLGxlc3NFcXVhbFN0cmljdDppbCxsZXNzU3RyaWN0OnNsLG5vdEVxdWFsOnVsLG5vdEVxdWFsU3RyaWN0OmxsLGFkZDpEdSxhZGROOl91LGFkZFN0cmljdDpPdSxhdGFuMjpGdSxkaXY6TXUsZGl2U3RyaWN0OkJ1LGZsb29yRGl2OlB1LG1heGltdW06THUsbWF4aW11bVN0cmljdDpXdSxtaW5pbXVtOlV1LG1pbmltdW1TdHJpY3Q6VnUsbW9kOnp1LG1vZFN0cmljdDpHdSxtdWw6SHUsbXVsU3RyaWN0OnF1LHBvdzokdSxwb3dTdHJpY3Q6S3Usc3F1YXJlZERpZmZlcmVuY2U6anUsc3F1YXJlZERpZmZlcmVuY2VTdHJpY3Q6WHUsc3ViOll1LHN1YlN0cmljdDpRdSxlbHU6c2MsbGVha3lSZWx1OnVjLHByZWx1OmxjLHJlbHU6Y2MscmVsdTY6aGMsc2VsdTpwYyxsb2dpY2FsQW5kOkl1LGxvZ2ljYWxOb3Q6a3UsbG9naWNhbE9yOk51LGxvZ2ljYWxYb3I6U3Usd2hlcmU6QXUsd2hlcmVBc3luYzpUdSxidWZmZXI6dHIscHJpbnQ6ZXIsYmF0Y2hUb1NwYWNlTkQ6bnIsY2FzdDpycixjbG9uZTpvcixjdW1zdW06YXIsZGVwdGhUb1NwYWNlOmlyLGV4cGFuZERpbXM6c3IsZXllOnVyLG11bHRpbm9taWFsOmxyLG9uZUhvdDpjcixwYWQ6aHIscGFkMWQ6cHIscGFkMmQ6ZnIscGFkM2Q6ZHIscGFkNGQ6dnIscmFuZDptcixyYW5kb21Ob3JtYWw6Z3IscmFuZG9tR2FtbWE6eXIscmFuZG9tVW5pZm9ybTp4cixyZXNoYXBlOmJyLHNwYWNlVG9CYXRjaE5EOndyLHNxdWVlemU6Q3Isc3RhY2s6RXIsdGlsZTpScix0cnVuY2F0ZWROb3JtYWw6SXIsdW5zdGFjazprcixzZXRkaWZmMWRBc3luYzpOcixmaWxsOkRuLGxpbnNwYWNlOl9uLG9uZXM6QW4scmFuZ2U6T24sc2NhbGFyOkNuLHRlbnNvcjpibix0ZW5zb3IxZDpFbix0ZW5zb3IyZDpSbix0ZW5zb3IzZDpJbix0ZW5zb3I0ZDprbix0ZW5zb3I1ZDpObix0ZW5zb3I2ZDpTbix6ZXJvczpUbixvbmVzTGlrZTpGbix6ZXJvc0xpa2U6TW4sdHJhbnNwb3NlOmZjLHNvZnRtYXg6UXIsbG9nU29mdG1heDpKcixsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjpkYyxub3JtOnZjLGdhdGhlcjpwbCx1bnNvcnRlZFNlZ21lbnRTdW06ZmwsYmFzaWNMU1RNQ2VsbDptYyxtdWx0aVJOTkNlbGw6Z2MsbW92aW5nQXZlcmFnZTp5YyxzdHJpZGVkU2xpY2U6eGMsdG9wazpiYyxzY2F0dGVyTkQ6d2MsZmZ0OkNjLGlmZnQ6RWMscmZmdDpSYyxpcmZmdDpJYyxzcGFyc2VUb0RlbnNlOk5jLGdhdGhlck5EOlNjLGRpYWc6QWMsZHJvcG91dDpUYyxoYW5uV2luZG93Ol9jLGhhbW1pbmdXaW5kb3c6T2MsZnJhbWU6RmMsc3RmdDpNYyxpblRvcEtBc3luYzpMY30pO2Z1bmN0aW9uIGhoKHQsZSxuLHIpe2lmKFwibGluZWFyXCI9PT1uKXJldHVybiB0LmxpbmVhcihlKTtpZihcInJlbHVcIj09PW4pcmV0dXJuIHQucmVsdShlKTtpZihcImVsdVwiPT09bilyZXR1cm4gdC5lbHUoZSk7aWYoXCJyZWx1NlwiPT09bilyZXR1cm4gdC5yZWx1NihlKTtpZihcInByZWx1XCI9PT1uKXJldHVybiB0LnByZWx1KGUscik7dGhyb3cgbmV3IEVycm9yKFwiQWN0aXZhdGlvbiBcIituK1wiIGhhcyBub3QgYmVlbiBpbXBsZW1lbnRlZCBmb3IgdGhlIENQVSBiYWNrZW5kLlwiKX12YXIgcGg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7aWYodGhpcy5ibG9ja1NpemU9NDgsdGhpcy5maXJzdFVzZT0hMCxpLmdldChcIklTX0JST1dTRVJcIikpe3ZhciB0PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBPZmZzY3JlZW5DYW52YXM/bmV3IE9mZnNjcmVlbkNhbnZhcygzMDAsMTUwKTpcInVuZGVmaW5lZFwiIT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTpudWxsO251bGwhPT10JiYodGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0PXQuZ2V0Q29udGV4dChcIjJkXCIpKX10aGlzLmRhdGE9bmV3IFpyKHRoaXMsU3QpfXJldHVybiB0LnByb3RvdHlwZS5yZWdpc3Rlcj1mdW5jdGlvbih0LGUsbil7aWYodGhpcy5maXJzdFVzZSYmKHRoaXMuZmlyc3RVc2U9ITEsaS5nZXQoXCJJU19OT0RFXCIpJiZ0bihcIlxcbj09PT09PT09PT09PT09PT09PT09PT09PT09PT1cXG5IaSB0aGVyZSDwn5GLLiBMb29rcyBsaWtlIHlvdSBhcmUgcnVubmluZyBUZW5zb3JGbG93LmpzIGluIE5vZGUuanMuIFRvIHNwZWVkIHRoaW5ncyB1cCBkcmFtYXRpY2FsbHksIGluc3RhbGwgb3VyIG5vZGUgYmFja2VuZCwgd2hpY2ggYmluZHMgdG8gVGVuc29yRmxvdyBDKyssIGJ5IHJ1bm5pbmcgbnBtIGkgQHRlbnNvcmZsb3cvdGZqcy1ub2RlLCBvciBucG0gaSBAdGVuc29yZmxvdy90ZmpzLW5vZGUtZ3B1IGlmIHlvdSBoYXZlIENVREEuIFRoZW4gY2FsbCByZXF1aXJlKCdAdGVuc29yZmxvdy90ZmpzLW5vZGUnKTsgKC1ncHUgc3VmZml4IGZvciBDVURBKSBhdCB0aGUgc3RhcnQgb2YgeW91ciBwcm9ncmFtLiBWaXNpdCBodHRwczovL2dpdGh1Yi5jb20vdGVuc29yZmxvdy90ZmpzLW5vZGUgZm9yIG1vcmUgZGV0YWlscy5cXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09XFxuXCIpKSx0aGlzLmRhdGEuaGFzKHQpKXRocm93IG5ldyBFcnJvcihcIkRhdGEgYnVmZmVyIGlzIGFscmVhZHkgcmVnaXN0ZXJlZFwiKTt0aGlzLmRhdGEuc2V0KHQse2R0eXBlOm59KX0sdC5wcm90b3R5cGUud3JpdGU9ZnVuY3Rpb24odCxlKXtpZihudWxsPT1lKXRocm93IG5ldyBFcnJvcihcIk1hdGhCYWNrZW5kQ1BVLndyaXRlKCk6IHZhbHVlcyBjYW4gbm90IGJlIG51bGxcIik7dGhpcy5kYXRhLmdldCh0KS52YWx1ZXM9ZX0sdC5wcm90b3R5cGUuZnJvbVBpeGVscz1mdW5jdGlvbih0LGUpe2lmKG51bGw9PXQpdGhyb3cgbmV3IEVycm9yKFwicGl4ZWxzIHBhc3NlZCB0byB0Zi5icm93c2VyLmZyb21QaXhlbHMoKSBjYW4gbm90IGJlIG51bGxcIik7dmFyIG4scixvPXQuZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXksYT1cInVuZGVmaW5lZFwiIT10eXBlb2YgSW1hZ2VEYXRhJiZ0IGluc3RhbmNlb2YgSW1hZ2VEYXRhLHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxWaWRlb0VsZW1lbnQmJnQgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50LHU9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQmJnQgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50LGw9cz9bdC52aWRlb1dpZHRoLHQudmlkZW9IZWlnaHRdOlt0LndpZHRoLHQuaGVpZ2h0XSxjPWxbMF0saD1sWzFdO2lmKGkuZ2V0KFwiSVNfTk9ERVwiKSYmbnVsbD09dC5nZXRDb250ZXh0KXRocm93IG5ldyBFcnJvcihcIldoZW4gcnVubmluZyBpbiBub2RlLCBwaXhlbHMgbXVzdCBiZSBhbiBIVE1MQ2FudmFzRWxlbWVudCBsaWtlIHRoZSBvbmUgcmV0dXJuZWQgYnkgdGhlIGBjYW52YXNgIG5wbSBwYWNrYWdlXCIpO2lmKG51bGwhPXQuZ2V0Q29udGV4dCluPXQuZ2V0Q29udGV4dChcIjJkXCIpLmdldEltYWdlRGF0YSgwLDAsYyxoKS5kYXRhO2Vsc2UgaWYoYXx8byluPXQuZGF0YTtlbHNle2lmKCF1JiYhcyl0aHJvdyBuZXcgRXJyb3IoXCJwaXhlbHMgcGFzc2VkIHRvIHRmLmJyb3dzZXIuZnJvbVBpeGVscygpIG11c3QgYmUgZWl0aGVyIGFuIEhUTUxWaWRlb0VsZW1lbnQsIEhUTUxJbWFnZUVsZW1lbnQsIEhUTUxDYW52YXNFbGVtZW50LCBJbWFnZURhdGEgb3Ige2RhdGE6IFVpbnQzMkFycmF5LCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlcn0sIGJ1dCB3YXMgXCIrdC5jb25zdHJ1Y3Rvci5uYW1lKTtpZihudWxsPT10aGlzLmZyb21QaXhlbHMyRENvbnRleHQpdGhyb3cgbmV3IEVycm9yKFwiQ2FuJ3QgcmVhZCBwaXhlbHMgZnJvbSBIVE1MSW1hZ2VFbGVtZW50IG91dHNpZGUgdGhlIGJyb3dzZXIuXCIpO3RoaXMuZnJvbVBpeGVsczJEQ29udGV4dC5jYW52YXMud2lkdGg9Yyx0aGlzLmZyb21QaXhlbHMyRENvbnRleHQuY2FudmFzLmhlaWdodD1oLHRoaXMuZnJvbVBpeGVsczJEQ29udGV4dC5kcmF3SW1hZ2UodCwwLDAsYyxoKSxuPXRoaXMuZnJvbVBpeGVsczJEQ29udGV4dC5nZXRJbWFnZURhdGEoMCwwLGMsaCkuZGF0YX1pZig0PT09ZSlyPW5ldyBJbnQzMkFycmF5KG4pO2Vsc2V7dmFyIHA9YypoO3I9bmV3IEludDMyQXJyYXkocCplKTtmb3IodmFyIGY9MDtmPHA7ZisrKWZvcih2YXIgZD0wO2Q8ZTsrK2QpcltmKmUrZF09bls0KmYrZF19cmV0dXJuIEluKHIsW2gsYyxlXSxcImludDMyXCIpfSx0LnByb3RvdHlwZS5yZWFkPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24oZSl7cmV0dXJuWzIsdGhpcy5yZWFkU3luYyh0KV19KX0pfSx0LnByb3RvdHlwZS5yZWFkU3luYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmRhdGEuZ2V0KHQpLG49ZS5kdHlwZSxyPWUuY29tcGxleFRlbnNvcnM7cmV0dXJuXCJjb21wbGV4NjRcIj09PW4/d28odGhpcy5yZWFkU3luYyhyLnJlYWwuZGF0YUlkKSx0aGlzLnJlYWRTeW5jKHIuaW1hZy5kYXRhSWQpKTp0aGlzLmRhdGEuZ2V0KHQpLnZhbHVlc30sdC5wcm90b3R5cGUuYnVmZmVyU3luYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPWU7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpdHJ5e249ZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIFgodCl9KX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGVjb2RlIGVuY29kZWQgc3RyaW5nIGJ5dGVzIGludG8gdXRmLThcIil9cmV0dXJuIHRyKHQuc2hhcGUsdC5kdHlwZSxuKX0sdC5wcm90b3R5cGUuZGlzcG9zZURhdGE9ZnVuY3Rpb24odCl7aWYodGhpcy5kYXRhLmhhcyh0KSl7dmFyIGU9dGhpcy5kYXRhLmdldCh0KS5jb21wbGV4VGVuc29ycztudWxsIT1lJiYoZS5yZWFsLmRpc3Bvc2UoKSxlLmltYWcuZGlzcG9zZSgpKSx0aGlzLmRhdGEuZGVsZXRlKHQpfX0sdC5wcm90b3R5cGUudGltZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKG4pe3JldHVybiBlPSQoKSx0KCksWzIse2tlcm5lbE1zOiQoKS1lfV19KX0pfSx0LnByb3RvdHlwZS5tZW1vcnk9ZnVuY3Rpb24oKXtyZXR1cm57dW5yZWxpYWJsZTohMCxyZWFzb25zOltcIlRoZSByZXBvcnRlZCBtZW1vcnkgaXMgYW4gdXBwZXIgYm91bmQuIER1ZSB0byBhdXRvbWF0aWMgZ2FyYmFnZSBjb2xsZWN0aW9uLCB0aGUgdHJ1ZSBhbGxvY2F0ZWQgbWVtb3J5IG1heSBiZSBsZXNzLlwiXX19LHQucHJvdG90eXBlLmNvbXBsZXg9ZnVuY3Rpb24odCxlKXt2YXIgbj1jdC5tYWtlKHQuc2hhcGUse30sXCJjb21wbGV4NjRcIik7cmV0dXJuIHRoaXMuZGF0YS5nZXQobi5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzPXtyZWFsOlN0LmtlZXAodC5jbG9uZSgpKSxpbWFnOlN0LmtlZXAoZS5jbG9uZSgpKX0sbn0sdC5wcm90b3R5cGUucmVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhLmdldCh0LmRhdGFJZCkuY29tcGxleFRlbnNvcnMucmVhbC5jbG9uZSgpfSx0LnByb3RvdHlwZS5pbWFnPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRhdGEuZ2V0KHQuZGF0YUlkKS5jb21wbGV4VGVuc29ycy5pbWFnLmNsb25lKCl9LHQucHJvdG90eXBlLmFzc2VydE5vdENvbXBsZXg9ZnVuY3Rpb24odCxlKXtBcnJheS5pc0FycmF5KHQpfHwodD1bdF0pLHQuZm9yRWFjaChmdW5jdGlvbih0KXtudWxsIT10JiZmKFwiY29tcGxleDY0XCIhPT10LmR0eXBlLGZ1bmN0aW9uKCl7cmV0dXJuIGUrXCIgZG9lcyBub3Qgc3VwcG9ydCBjb21wbGV4NjQgdGVuc29ycy5cIn0pfSl9LHQucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInNsaWNlXCIpLHpyKHQuc2hhcGUsZSxuKSl7dmFyIHI9R3IoZSx0LnN0cmlkZXMpLG89ZyhuKTtyZXR1cm4gYm4odGhpcy5yZWFkU3luYyh0LmRhdGFJZCkuc3ViYXJyYXkocixyK28pLG4sdC5kdHlwZSl9Zm9yKHZhciBhPXRyKG4sdC5kdHlwZSksaT10aGlzLmJ1ZmZlclN5bmModCkscz0wO3M8YS5zaXplOysrcyl7dmFyIHU9YS5pbmRleFRvTG9jKHMpLm1hcChmdW5jdGlvbih0LG4pe3JldHVybiB0K2Vbbl19KTthLnZhbHVlc1tzXT1pLmdldC5hcHBseShpLHUpfXJldHVybiBhLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLnN0cmlkZWRTbGljZT1mdW5jdGlvbih0LGUsbixyKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInN0cmlkZWRTbGljZVwiKTt2YXIgbz1XcihlLG4scik7aWYoby5zb21lKGZ1bmN0aW9uKHQpe3JldHVybiAwPT09dH0pKXJldHVybiBibihbXSxvKTtmb3IodmFyIGE9dHIobyx0LmR0eXBlKSxpPXRoaXMuYnVmZmVyU3luYyh0KSxzPTA7czxhLnNpemU7cysrKXtmb3IodmFyIHU9YS5pbmRleFRvTG9jKHMpLGw9bmV3IEFycmF5KHUubGVuZ3RoKSxjPTA7YzxsLmxlbmd0aDtjKyspbFtjXT11W2NdKnJbY10rZVtjXTthLnNldC5hcHBseShhLFtpLmdldC5hcHBseShpLGwpXS5jb25jYXQodSkpfXJldHVybiBhLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmRpYWc9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49dHIoW3Quc2l6ZSx0LnNpemVdLHQuZHR5cGUpLHI9bi52YWx1ZXMsbz0wO288ZS5sZW5ndGg7bysrKXJbbyp0LnNpemUrb109ZVtvXTtyZXR1cm4gbi50b1RlbnNvcigpfSx0LnByb3RvdHlwZS51bnN0YWNrPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuc2hhcGVbZV0scj1uZXcgQXJyYXkodC5yYW5rLTEpLG89MCxhPTA7YTx0LnJhbms7YSsrKWEhPT1lJiYocltvKytdPXQuc2hhcGVbYV0pO3ZhciBpPW5ldyBBcnJheSh0LnJhbmspLmZpbGwoMCkscz10LnNoYXBlLnNsaWNlKCk7c1tlXT0xO3ZhciB1PW5ldyBBcnJheShuKTtmb3IoYT0wO2E8dS5sZW5ndGg7YSsrKWlbZV09YSx1W2FdPXRoaXMuc2xpY2UodCxpLHMpLnJlc2hhcGUocik7cmV0dXJuIHV9LHQucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24odCxlKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInJldmVyc2VcIik7Zm9yKHZhciBuPXRyKHQuc2hhcGUsdC5kdHlwZSkscj10aGlzLmJ1ZmZlclN5bmModCksbz1mdW5jdGlvbihvKXt2YXIgYT1uLmluZGV4VG9Mb2MobyksaT1hLnNsaWNlKCk7ZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe3JldHVybiBpW2VdPXQuc2hhcGVbZV0tMS1pW2VdfSksbi5zZXQuYXBwbHkobixbci5nZXQuYXBwbHkocixpKV0uY29uY2F0KGEpKX0sYT0wO2E8bi5zaXplO2ErKylvKGEpO3JldHVybiBuLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmNvbmNhdD1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7aWYoXCJjb21wbGV4NjRcIj09PXRbMF0uZHR5cGUpe3ZhciByPXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB5bih0KX0pLG89dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHhuKHQpfSk7cmV0dXJuIGduKHRoaXMuY29uY2F0KHIsZSksdGhpcy5jb25jYXQobyxlKSl9dmFyIGE9dC5tYXAoZnVuY3Rpb24odCl7dmFyIG49Zyh0LnNoYXBlLnNsaWNlKGUpKTtyZXR1cm4gdC5hczJEKC0xLG4pfSksaT12bihhLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pLDEpLHM9dHIoaSx0WzBdLmR0eXBlKS52YWx1ZXM7aWYoMT09PWFbMF0uc2hhcGVbMF0pe3ZhciB1PTA7YS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3Muc2V0KG4ucmVhZFN5bmModC5kYXRhSWQpLHUpLHUrPXQuc2l6ZX0pfWVsc2V7dmFyIGw9MDthLmZvckVhY2goZnVuY3Rpb24odCl7Zm9yKHZhciBlPW4ucmVhZFN5bmModC5kYXRhSWQpLHI9MCxvPTA7bzx0LnNoYXBlWzBdOysrbylmb3IodmFyIGE9byppWzFdK2wsdT0wO3U8dC5zaGFwZVsxXTsrK3Upc1thK3VdPWVbcisrXTtsKz10LnNoYXBlWzFdfSl9dmFyIGM9dm4odC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KSxlKTtyZXR1cm4gYm4ocyxjLHRbMF0uZHR5cGUpfSx0LnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwibmVnXCIpLHRoaXMubXVsdGlwbHkoQ24oLTEpLHQpfSx0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCxlKXtyZXR1cm5cImNvbXBsZXg2NFwiPT09dC5kdHlwZXx8XCJjb21wbGV4NjRcIj09PWUuZHR5cGU/dGhpcy5icm9hZGNhc3RlZEJpbmFyeUNvbXBsZXhPcCh0LmNhc3QoXCJjb21wbGV4NjRcIiksZS5jYXN0KFwiY29tcGxleDY0XCIpLGZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybntyZWFsOnQrbixpbWFnOmUrcn19KTp0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHh0KHQuZHR5cGUsZS5kdHlwZSksZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtlfSl9LHQucHJvdG90eXBlLmFkZE49ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImFkZE5cIik7Zm9yKHZhciBuPXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBlLnJlYWRTeW5jKHQuZGF0YUlkKX0pLHI9dHIodFswXS5zaGFwZSx0WzBdLmR0eXBlKSxvPXIudmFsdWVzLGE9MDthPHQubGVuZ3RoO2ErKylmb3IodmFyIGk9blthXSxzPTA7czxvLmxlbmd0aDtzKyspb1tzXSs9aVtzXTtyZXR1cm4gci50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3JldHVyblwiY29tcGxleDY0XCI9PT10LmR0eXBlfHxcImNvbXBsZXg2NFwiPT09ZS5kdHlwZT90aGlzLmJyb2FkY2FzdGVkQmluYXJ5Q29tcGxleE9wKHQuY2FzdChcImNvbXBsZXg2NFwiKSxlLmNhc3QoXCJjb21wbGV4NjRcIiksZnVuY3Rpb24odCxlLG4scil7cmV0dXJue3JlYWw6dC1uLGltYWc6ZS1yfX0pOnRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUseHQodC5kdHlwZSxlLmR0eXBlKSxmdW5jdGlvbih0LGUpe3JldHVybiB0LWV9KX0sdC5wcm90b3R5cGUucG93PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcInBvd1wiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHQuZHR5cGUsZnVuY3Rpb24odCxlKXtyZXR1cm4gTWF0aC5wb3codCxlKX0pfSx0LnByb3RvdHlwZS5iYXRjaE1hdE11bD1mdW5jdGlvbih0LGUsbixyKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJtYXRNdWxcIik7Zm9yKHZhciBvPW4/dC5zaGFwZVsxXTp0LnNoYXBlWzJdLGE9bj90LnNoYXBlWzJdOnQuc2hhcGVbMV0saT1yP2Uuc2hhcGVbMV06ZS5zaGFwZVsyXSxzPXQuc2hhcGVbMF0sdT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLGM9bj9bdC5zdHJpZGVzWzBdLDEsdC5zdHJpZGVzWzFdXTpbdC5zdHJpZGVzWzBdLHQuc3RyaWRlc1sxXSwxXSxoPWNbMF0scD1jWzFdLGY9Y1syXSxkPXI/WzEsZS5zdHJpZGVzWzFdLGUuc3RyaWRlc1swXV06W2Uuc3RyaWRlc1sxXSwxLGUuc3RyaWRlc1swXV0sdj1kWzBdLG09ZFsxXSxnPWRbMl0seT1hKmkseD10cihbcyxhLGldLHQuZHR5cGUpLGI9eC52YWx1ZXMsdz10aGlzLmJsb2NrU2l6ZSxDPTA7QzxzO0MrKylmb3IodmFyIEU9MDtFPGE7RSs9dylmb3IodmFyIFI9MDtSPGk7Uis9dylmb3IodmFyIEk9MDtJPG87SSs9dylmb3IodmFyIGs9TWF0aC5taW4oRSt3LGEpLE49TWF0aC5taW4oUit3LGkpLFM9TWF0aC5taW4oSSt3LG8pLEE9RTtBPGs7QSsrKWZvcih2YXIgVD1SO1Q8TjtUKyspe2Zvcih2YXIgRD0wLF89STtfPFM7XysrKUQrPXVbQypoK0EqcCtfKmZdKmxbXyp2K1QqbStDKmddO2JbQyp5KyhBKmkrVCldKz1EfXJldHVybiB4LnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmZ1c2VkQmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCl7dmFyIGU9dC5hLG49dC5iLHI9dC50cmFuc3Bvc2VBLG89dC50cmFuc3Bvc2VCLGE9dC5iaWFzLGk9dC5hY3RpdmF0aW9uLHM9dC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzLHU9dGhpcy5iYXRjaE1hdE11bChlLG4scixvKTtyZXR1cm4gYSYmKHU9dGhpcy5hZGQodSxhKSksaSYmKHU9aGgodGhpcyx1LGkscykpLHV9LHQucHJvdG90eXBlLm11bHRpcGx5PWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJjb21wbGV4NjRcIj09PXQuZHR5cGV8fFwiY29tcGxleDY0XCI9PT1lLmR0eXBlP3RoaXMuYnJvYWRjYXN0ZWRCaW5hcnlDb21wbGV4T3AodC5jYXN0KFwiY29tcGxleDY0XCIpLGUuY2FzdChcImNvbXBsZXg2NFwiKSxmdW5jdGlvbih0LGUsbixyKXtyZXR1cm57cmVhbDp0Km4tZSpyLGltYWc6dCpyK2Uqbn19KTp0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHh0KHQuZHR5cGUsZS5kdHlwZSksZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSl9LHQucHJvdG90eXBlLnJlYWxEaXZpZGU9ZnVuY3Rpb24odCxlKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJyZWFsRGl2aWRlXCIpO3JldHVybiB0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLFwiZmxvYXQzMlwiLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQvZX0pfSx0LnByb3RvdHlwZS5mbG9vckRpdj1mdW5jdGlvbih0LGUpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImZsb29yRGl2XCIpO3JldHVybiB0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLFwiaW50MzJcIixmdW5jdGlvbih0LGUpe3JldHVybiBNYXRoLmZsb29yKHQvZSl9KX0sdC5wcm90b3R5cGUuc3VtPWZ1bmN0aW9uKHQsZSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJzdW1cIiksY24oXCJzdW1cIixlLHQucmFuayk7Zm9yKHZhciBuPXVuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPVRuKHIseHQodC5kdHlwZSxcImludDMyXCIpKSxpPWcobykscz10aGlzLnJlYWRTeW5jKGEuZGF0YUlkKSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGw9MDtsPHMubGVuZ3RoOysrbCl7Zm9yKHZhciBjPWwqaSxoPTAscD0wO3A8aTsrK3ApaCs9dVtjK3BdO3NbbF09aH1yZXR1cm4gYX0sdC5wcm90b3R5cGUucHJvZD1mdW5jdGlvbih0LGUpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwic3VtXCIpO2Zvcih2YXIgbj11bih0LnNoYXBlLGUpLHI9blswXSxvPW5bMV0sYT1UbihyLHh0KHQuZHR5cGUsXCJpbnQzMlwiKSksaT1nKG8pLHM9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCksdT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPTA7bDxzLmxlbmd0aDsrK2wpe2Zvcih2YXIgYz1sKmksaD0xLHA9MDtwPGk7KytwKWgqPXVbYytwXTtzW2xdPWh9cmV0dXJuIGF9LHQucHJvdG90eXBlLnVuc29ydGVkU2VnbWVudFN1bT1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJ1bnNvcnRlZFNlZ21lbnRTdW1cIik7Zm9yKHZhciByPVtdLG89dC5yYW5rLWUucmFuayxhPTA7YTxvOysrYSllPWUuZXhwYW5kRGltcyhhKzEpO2ZvcihhPTA7YTxuOysrYSl7dmFyIGk9Q24oYSxcImludDMyXCIpLHM9SnUoaSxlKS5hc1R5cGUoXCJmbG9hdDMyXCIpLm11bCh0KS5zdW0oMCk7ci5wdXNoKHMpfXJldHVybiBFcihyKX0sdC5wcm90b3R5cGUuYXJnTWluPWZ1bmN0aW9uKHQsZSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJhcmdNaW5cIik7dmFyIG49W2VdO2NuKFwiYXJnTWluXCIsbix0LnJhbmspO2Zvcih2YXIgcj11bih0LnNoYXBlLG4pLG89clswXSxhPXJbMV0saT1UbihvLFwiaW50MzJcIikscz1nKGEpLHU9dGhpcy5yZWFkU3luYyhpLmRhdGFJZCksbD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxjPTA7Yzx1Lmxlbmd0aDsrK2Mpe2Zvcih2YXIgaD1jKnMscD1sW2hdLGY9MCxkPTA7ZDxzOysrZCl7dmFyIHY9bFtoK2RdO3Y8cCYmKHA9dixmPWQpfXVbY109Zn1yZXR1cm4gaX0sdC5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJhcmdNYXhcIik7dmFyIG49W2VdO2NuKFwiYXJnTWF4XCIsbix0LnJhbmspO2Zvcih2YXIgcj11bih0LnNoYXBlLG4pLG89clswXSxhPXJbMV0saT1UbihvLFwiaW50MzJcIikscz1nKGEpLHU9dGhpcy5yZWFkU3luYyhpLmRhdGFJZCksbD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxjPTA7Yzx1Lmxlbmd0aDsrK2Mpe2Zvcih2YXIgaD1jKnMscD1sW2hdLGY9MCxkPTA7ZDxzOysrZCl7dmFyIHY9bFtoK2RdO3Y+cCYmKHA9dixmPWQpfXVbY109Zn1yZXR1cm4gaX0sdC5wcm90b3R5cGUuY3Vtc3VtPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKHRoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiY3Vtc3VtXCIpLGUhPT10LnJhbmstMSl0aHJvdyBuZXcgRXJyb3IoXCJiYWNrZW5kLmN1bXN1bSBpbiBDUFUgZXhwZWN0cyBhbiBpbm5lci1tb3N0IGF4aXM9XCIrKHQucmFuay0xKStcIiBidXQgZ290IGF4aXM9XCIrZSk7Zm9yKHZhciBvPXh0KHQuZHR5cGUsXCJpbnQzMlwiKSxhPVRuKHQuc2hhcGUsbyksaT10aGlzLnJlYWRTeW5jKGEuZGF0YUlkKSxzPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHU9dC5zaGFwZVt0LnJhbmstMV0sbD1yP2Z1bmN0aW9uKHQsZSl7cmV0dXJuIHQrdS1lLTF9OmZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX0sYz0wO2M8cy5sZW5ndGg7Yys9dSlmb3IodmFyIGg9MDtoPHU7aCsrKXt2YXIgcD1sKGMsaCk7aWYoMD09PWgpaVtwXT1uPzA6c1twXTtlbHNle3ZhciBmPWwoYyxoLTEpO2lbcF09bj9zW2ZdK2lbZl06c1twXStpW2ZdfX1yZXR1cm4gYX0sdC5wcm90b3R5cGUuZXF1YWw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiZXF1YWxcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIixmdW5jdGlvbih0LGUpe3JldHVybiB0PT09ZT8xOjB9KX0sdC5wcm90b3R5cGUubm90RXF1YWw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwibm90RXF1YWxcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIixmdW5jdGlvbih0LGUpe3JldHVybiB0IT09ZT8xOjB9KX0sdC5wcm90b3R5cGUubGVzcz1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJsZXNzXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsZnVuY3Rpb24odCxlKXtyZXR1cm4gdDxlPzE6MH0pfSx0LnByb3RvdHlwZS5sZXNzRXF1YWw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwibGVzc0VxdWFsXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsZnVuY3Rpb24odCxlKXtyZXR1cm4gdDw9ZT8xOjB9KX0sdC5wcm90b3R5cGUuZ3JlYXRlcj1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJncmVhdGVyXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsZnVuY3Rpb24odCxlKXtyZXR1cm4gdD5lPzE6MH0pfSx0LnByb3RvdHlwZS5ncmVhdGVyRXF1YWw9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiZ3JlYXRlckVxdWFsXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsZnVuY3Rpb24odCxlKXtyZXR1cm4gdD49ZT8xOjB9KX0sdC5wcm90b3R5cGUubG9naWNhbE5vdD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImxvZ2ljYWxOb3RcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPWVbcl0/MDoxO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSxcImJvb2xcIil9LHQucHJvdG90eXBlLmxvZ2ljYWxBbmQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwibG9naWNhbEFuZFwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLFwiYm9vbFwiLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQmJmV9KX0sdC5wcm90b3R5cGUubG9naWNhbE9yPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImxvZ2ljYWxPclwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLFwiYm9vbFwiLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHR8fGV9KX0sdC5wcm90b3R5cGUuc2VsZWN0PWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZSxuXSxcInNlbGVjdFwiKTtmb3IodmFyIHI9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbz10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxhPXRoaXMucmVhZFN5bmMobi5kYXRhSWQpLGk9VG4oZS5zaGFwZSx4dChlLmR0eXBlLG4uZHR5cGUpKSxzPXRoaXMucmVhZFN5bmMoaS5kYXRhSWQpLHU9MCxsPTA9PT10LnJhbmt8fHQucmFuaz4xfHwxPT09ZS5yYW5rPzE6ZyhlLnNoYXBlLnNsaWNlKDEpKSxjPTA7YzxyLmxlbmd0aDtjKyspZm9yKHZhciBoPTA7aDxsO2grKykxPT09cltjXT9zW3UrK109b1tjXTpzW3UrK109YVtjXTtyZXR1cm4gaX0sdC5wcm90b3R5cGUud2hlcmU9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0XSxcIndoZXJlXCIpO3ZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpO3JldHVybiBUbyh0LnNoYXBlLGUpfSx0LnByb3RvdHlwZS50b3BrPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJ0b3BrXCIpLEFvKHRoaXMucmVhZFN5bmModC5kYXRhSWQpLHQuc2hhcGUsdC5kdHlwZSxlKX0sdC5wcm90b3R5cGUubWluPWZ1bmN0aW9uKHQsZSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJtaW5cIiksY24oXCJtaW5cIixlLHQucmFuayk7Zm9yKHZhciBuPXVuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPVRuKHIsdC5kdHlwZSksaT1nKG8pLHM9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCksdT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPTA7bDxzLmxlbmd0aDsrK2wpe2Zvcih2YXIgYz1sKmksaD11W2NdLHA9MDtwPGk7KytwKXt2YXIgZj11W2MrcF07ZjxoJiYoaD1mKX1zW2xdPWh9cmV0dXJuIGF9LHQucHJvdG90eXBlLm1pbmltdW09ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwibWluaW11bVwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHQuZHR5cGUsZnVuY3Rpb24odCxlKXtyZXR1cm4gTWF0aC5taW4odCxlKX0pfSx0LnByb3RvdHlwZS5tb2Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwibW9kXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsdC5kdHlwZSxmdW5jdGlvbih0LGUpe3ZhciBuPXQlZTtyZXR1cm4gdDwwJiZlPDB8fHQ+PTAmJmU+PTA/bjoobitlKSVlfSl9LHQucHJvdG90eXBlLm1heD1mdW5jdGlvbih0LGUpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwibWF4XCIpLGNuKFwibWF4XCIsZSx0LnJhbmspO2Zvcih2YXIgbj11bih0LnNoYXBlLGUpLHI9blswXSxvPW5bMV0sYT1UbihyLHQuZHR5cGUpLGk9ZyhvKSxzPXRoaXMucmVhZFN5bmMoYS5kYXRhSWQpLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbD0wO2w8cy5sZW5ndGg7KytsKXtmb3IodmFyIGM9bCppLGg9dVtjXSxwPTA7cDxpOysrcCl7dmFyIGY9dVtjK3BdO2Y+aCYmKGg9Zil9c1tsXT1ofXJldHVybiBhfSx0LnByb3RvdHlwZS5tYXhpbXVtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcIm1heGltdW1cIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx0LmR0eXBlLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1hdGgubWF4KHQsZSl9KX0sdC5wcm90b3R5cGUuYWxsPWZ1bmN0aW9uKHQsZSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJhbGxcIiksY24oXCJhbGxcIixlLHQucmFuayk7Zm9yKHZhciBuPXVuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPVRuKHIsdC5kdHlwZSksaT1nKG8pLHM9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCksdT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPTA7bDxzLmxlbmd0aDsrK2wpe2Zvcih2YXIgYz1sKmksaD11W2NdLHA9MDtwPGk7KytwKXt2YXIgZj11W2MrcF07aD1oJiZmfXNbbF09aH1yZXR1cm4gYX0sdC5wcm90b3R5cGUuYW55PWZ1bmN0aW9uKHQsZSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJhbnlcIiksY24oXCJhbnlcIixlLHQucmFuayk7Zm9yKHZhciBuPXVuKHQuc2hhcGUsZSkscj1uWzBdLG89blsxXSxhPVRuKHIsdC5kdHlwZSksaT1nKG8pLHM9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCksdT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPTA7bDxzLmxlbmd0aDsrK2wpe2Zvcih2YXIgYz1sKmksaD11W2NdLHA9MDtwPGk7KytwKXt2YXIgZj11W2MrcF07aD1ofHxmfXNbbF09aH1yZXR1cm4gYX0sdC5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwic3F1YXJlZERpZmZlcmVuY2VcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx0LmR0eXBlLGZ1bmN0aW9uKHQsZSl7dmFyIG49dC1lO3JldHVybiBuKm59KX0sdC5wcm90b3R5cGUuY2VpbD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImNlaWxcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKW5bcl09TWF0aC5jZWlsKGVbcl0pO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLmZsb29yPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiZmxvb3JcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKW5bcl09TWF0aC5mbG9vcihlW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0pfSx0LnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwieFwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpZVtyXTwwP25bcl09LTE6ZVtyXT4wP25bcl09MTpuW3JdPTA7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUuaXNOYU49ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJ4XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpTnVtYmVyLmlzTmFOKGVbcl0pJiYobltyXT0xKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0sXCJib29sXCIpfSx0LnByb3RvdHlwZS5pc0luZj1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInhcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcilNYXRoLmFicyhlW3JdKT09PTEvMCYmKG5bcl09MSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59LFwiYm9vbFwiKX0sdC5wcm90b3R5cGUuaXNGaW5pdGU9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJ4XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpTnVtYmVyLmlzRmluaXRlKGVbcl0pJiYobltyXT0xKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0sXCJib29sXCIpfSx0LnByb3RvdHlwZS5yb3VuZD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInJvdW5kXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcil7dmFyIG89TWF0aC5mbG9vcihlW3JdKTtlW3JdLW88LjU/bltyXT1NYXRoLmZsb29yKGVbcl0pOmVbcl0tbz4uNT9uW3JdPU1hdGguY2VpbChlW3JdKTpuW3JdPW8lMj09MD9vOm8rMX1yZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0pfSx0LnByb3RvdHlwZS5leHA9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJleHBcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKW5bcl09TWF0aC5leHAoZVtyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUuZXhwbTE9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJleHBtMVwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpbltyXT1NYXRoLmV4cG0xKGVbcl0pO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLmxvZz1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImxvZ1wiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07bltyXT1NYXRoLmxvZyhvKX1yZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0pfSx0LnByb3RvdHlwZS5sb2cxcD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImxvZzFwXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcil7dmFyIG89ZVtyXTtuW3JdPU1hdGgubG9nMXAobyl9cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUuc3FydD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInNxcnRcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKXt2YXIgbz1lW3JdO25bcl09TWF0aC5zcXJ0KG8pfXJldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLnJzcXJ0PWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwicnNxcnRcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKXt2YXIgbz1lW3JdO25bcl09MS9NYXRoLnNxcnQobyl9cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUuc3F1YXJlPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwic3F1YXJlXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcil7dmFyIG89ZVtyXTtuW3JdPW8qb31yZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0pfSx0LnByb3RvdHlwZS5yZWNpcHJvY2FsPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwicmVjaXByb2NhbFwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpbltyXT0xL2Vbcl07cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUubGluZWFyPWZ1bmN0aW9uKHQpe3JldHVybiB0fSx0LnByb3RvdHlwZS5yZWx1PWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwicmVsdVwiKTtmb3IodmFyIGU9VG4odC5zaGFwZSx0LmR0eXBlKSxuPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHI9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbz0wO288ci5sZW5ndGg7KytvKW5bb109TWF0aC5tYXgoMCxyW29dKTtyZXR1cm4gZX0sdC5wcm90b3R5cGUucmVsdTY9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJyZWx1XCIpO2Zvcih2YXIgZT1Ubih0LnNoYXBlLHQuZHR5cGUpLG49dGhpcy5yZWFkU3luYyhlLmRhdGFJZCkscj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPTA7bzxyLmxlbmd0aDsrK28pbltvXT1NYXRoLm1pbihNYXRoLm1heCgwLHJbb10pLDYpO3JldHVybiBlfSx0LnByb3RvdHlwZS5wcmVsdT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJwcmVsdVwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHQuZHR5cGUsZnVuY3Rpb24odCxlKXtyZXR1cm4gdDwwP2UqdDp0fSl9LHQucHJvdG90eXBlLmVsdT1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImVsdVwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKXt2YXIgbz1uW3JdO2Vbcl09bz49MD9vOk1hdGguZXhwKG8pLTF9cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUuZWx1RGVyPWZ1bmN0aW9uKHQsZSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiZWx1RGVyXCIpO2Zvcih2YXIgbj1uZXcgRmxvYXQzMkFycmF5KGUuc2l6ZSkscj10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9MDthPHIubGVuZ3RoOysrYSl7dmFyIGk9clthXTtuW2FdPWk+PTE/b1thXTpvW2FdKihpKzEpfXJldHVybiBjdC5tYWtlKGUuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLnNlbHU9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJzZWx1XCIpO2Zvcih2YXIgZT1ZaSxuPVFpLHI9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG89dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksYT0wO2E8by5sZW5ndGg7KythKXt2YXIgaT1vW2FdO3JbYV09aT49MD9uKmk6ZSooTWF0aC5leHAoaSktMSl9cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOnJ9KX0sdC5wcm90b3R5cGUuY2xpcD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJjbGlwXCIpO2Zvcih2YXIgcj1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxhPTA7YTxvLmxlbmd0aDsrK2Epe3ZhciBpPW9bYV07clthXT1pPm4/bjppPGU/ZTppfXJldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpyfSl9LHQucHJvdG90eXBlLmFicz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5hYnMobltyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUuY29tcGxleEFicz1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8dC5zaXplOysrcil7dmFyIG89blsyKnJdLGE9blsyKnIrMV07ZVtyXT1NYXRoLmh5cG90KG8sYSl9cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUuaW50PWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiaW50XCIpO2Zvcih2YXIgZT1uZXcgSW50MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09bltyXTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0sXCJpbnQzMlwiKX0sdC5wcm90b3R5cGUuc2lnbW9pZD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInNpZ21vaWRcIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPTEvKDErTWF0aC5leHAoLW5bcl0pKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5zb2Z0cGx1cz1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInNvZnRwbHVzXCIpO2Zvcih2YXIgZT1NYXRoLmxvZygxLjE5MjA5Mjg5NTUwNzgxMjVlLTcpKzIsbj1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSkscj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPTA7bzxyLmxlbmd0aDsrK28pe3ZhciBhPXJbb10+LWUsaT1yW29dPGUscz1NYXRoLmV4cChyW29dKSx1PXZvaWQgMDt1PWk/czphP3Jbb106TWF0aC5sb2coMStzKSxuW29dPXV9cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUuc2luPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwic2luXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLnNpbihuW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5jb3M9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJjb3NcIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPU1hdGguY29zKG5bcl0pO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczplfSl9LHQucHJvdG90eXBlLnRhbj1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInRhblwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC50YW4obltyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUuYXNpbj1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImFzaW5cIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPU1hdGguYXNpbihuW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5hY29zPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiYWNvc1wiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5hY29zKG5bcl0pO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczplfSl9LHQucHJvdG90eXBlLmF0YW49ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJhdGFuXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmF0YW4obltyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUuYXRhbjI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiYXRhbjJcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx0LmR0eXBlLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1hdGguYXRhbjIodCxlKX0pfSx0LnByb3RvdHlwZS5zaW5oPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwic2luaFwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5zaW5oKG5bcl0pO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczplfSl9LHQucHJvdG90eXBlLmNvc2g9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJjb3NoXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmNvc2gobltyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUudGFuaD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInRhbmhcIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPWIobltyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUuYXNpbmg9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJhc2luaFwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5hc2luaChuW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5hY29zaD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImFjb3NoXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFjb3NoKG5bcl0pO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczplfSl9LHQucHJvdG90eXBlLmF0YW5oPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiYXRhbmhcIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPU1hdGguYXRhbmgobltyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUuZXJmPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiZXJmXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3Ipe3ZhciBvPU1hdGguc2lnbihuW3JdKSxhPU1hdGguYWJzKG5bcl0pLGk9MS8oMSsuMzI3NTkxMSphKTtlW3JdPW8qKDEtKCgoKDEuMDYxNDA1NDI5KmktMS40NTMxNTIwMjcpKmkrMS40MjE0MTM3NDEpKmktLjI4NDQ5NjczNikqaSsuMjU0ODI5NTkyKSppKk1hdGguZXhwKC1hKmEpKX1yZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5zdGVwPWZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCksdGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJzdGVwXCIpO2Zvcih2YXIgbj1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSkscj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPTA7bzxyLmxlbmd0aDsrK28pe3ZhciBhPXJbb107aXNOYU4oYSk/bltvXT1OYU46bltvXT1hPjA/MTplfXJldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLmZ1c2VkQ29udjJkPWZ1bmN0aW9uKHQpe3ZhciBlPXQuaW5wdXQsbj10LmZpbHRlcixyPXQuY29udkluZm8sbz10LmJpYXMsYT10LmFjdGl2YXRpb24saT10LnByZWx1QWN0aXZhdGlvbldlaWdodHMscz10aGlzLmNvbnYyZChlLG4scik7cmV0dXJuIG8mJihzPXRoaXMuYWRkKHMsbykpLGEmJihzPWhoKHRoaXMscyxhLGkpKSxzfSx0LnByb3RvdHlwZS5jb252MmQ9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImNvbnYyZFwiKTtmb3IodmFyIHI9bi5maWx0ZXJIZWlnaHQsbz1uLmZpbHRlcldpZHRoLGE9bi5kaWxhdGlvbkhlaWdodCxpPW4uZGlsYXRpb25XaWR0aCxzPW4ucGFkSW5mby5sZWZ0LHU9bi5wYWRJbmZvLnRvcCxsPVwiY2hhbm5lbHNMYXN0XCI9PT1uLmRhdGFGb3JtYXQsYz10cihuLm91dFNoYXBlLHQuZHR5cGUpLGg9dC5zdHJpZGVzWzBdLHA9bD90LnN0cmlkZXNbMV06dC5zdHJpZGVzWzJdLGY9bD90LnN0cmlkZXNbMl06MSxkPWw/MTp0LnN0cmlkZXNbMV0sdj1jLnN0cmlkZXNbMF0sbT1sP2Muc3RyaWRlc1sxXTpjLnN0cmlkZXNbMl0sZz1sP2Muc3RyaWRlc1syXToxLHk9bD8xOmMuc3RyaWRlc1sxXSx4PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGI9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksdz1jLnZhbHVlcyxDPTA7QzxuLmJhdGNoU2l6ZTsrK0MpZm9yKHZhciBFPUMqaCxSPUMqdixJPTA7STxuLm91dEhlaWdodDsrK0kpZm9yKHZhciBrPVIrSSptLE49SSpuLnN0cmlkZUhlaWdodC11LFM9MDtTPHI7UysrKXt2YXIgQT1OK1MqYTtpZighKEE8MHx8QT49bi5pbkhlaWdodCkpZm9yKHZhciBUPVMqZS5zdHJpZGVzWzBdLEQ9RStBKnAsXz0wO188bi5vdXRXaWR0aDsrK18pZm9yKHZhciBPPWsrXypnLEY9XypuLnN0cmlkZVdpZHRoLXMsTT0wO008bztNKyspe3ZhciBCPUYrTSppO2lmKCEoQjwwfHxCPj1uLmluV2lkdGgpKWZvcih2YXIgUD1EK0IqZixMPVQrTSplLnN0cmlkZXNbMV0sVz0wO1c8bi5pbkNoYW5uZWxzOysrVyl7Zm9yKHZhciBVPXhbUCtXKmRdLFY9MDtWPG4ub3V0Q2hhbm5lbHM7KytWKXdbTytWKnldKz1VKmJbTCtWXTtMKz1uLm91dENoYW5uZWxzfX19cmV0dXJuIGMudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUuY29udjNkPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9bi5maWx0ZXJEZXB0aCxvPW4uZmlsdGVySGVpZ2h0LGE9bi5maWx0ZXJXaWR0aCxpPW4uZGlsYXRpb25EZXB0aCxzPW4uZGlsYXRpb25IZWlnaHQsdT1uLmRpbGF0aW9uV2lkdGgsbD1uLnBhZEluZm8uZnJvbnQsYz1uLnBhZEluZm8ubGVmdCxoPW4ucGFkSW5mby50b3AscD10cihuLm91dFNoYXBlLHQuZHR5cGUpLGY9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZD10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSx2PXAudmFsdWVzLG09MDttPG4uYmF0Y2hTaXplOysrbSlmb3IodmFyIGc9bSp0LnN0cmlkZXNbMF0seT1tKnAuc3RyaWRlc1swXSx4PTA7eDxuLm91dERlcHRoOysreClmb3IodmFyIGI9eSt4KnAuc3RyaWRlc1sxXSx3PXgqbi5zdHJpZGVEZXB0aC1sLEM9MDtDPHI7QysrKXt2YXIgRT13K0MqaTtpZighKEU8MHx8RT49bi5pbkRlcHRoKSlmb3IodmFyIFI9QyplLnN0cmlkZXNbMF0sST1nK0UqdC5zdHJpZGVzWzFdLGs9MDtrPG4ub3V0SGVpZ2h0Oysraylmb3IodmFyIE49YitrKnAuc3RyaWRlc1syXSxTPWsqbi5zdHJpZGVIZWlnaHQtaCxBPTA7QTxvO0ErKyl7dmFyIFQ9UytBKnM7aWYoIShUPDB8fFQ+PW4uaW5IZWlnaHQpKWZvcih2YXIgRD1SK0EqZS5zdHJpZGVzWzFdLF89SStUKnQuc3RyaWRlc1syXSxPPTA7TzxuLm91dFdpZHRoOysrTylmb3IodmFyIEY9TitPKm4ub3V0Q2hhbm5lbHMsTT1PKm4uc3RyaWRlV2lkdGgtYyxCPTA7QjxhO0IrKyl7dmFyIFA9TStCKnU7aWYoIShQPDB8fFA+PW4uaW5XaWR0aCkpZm9yKHZhciBMPUQrQiplLnN0cmlkZXNbMl0sVz1fK1Aqbi5pbkNoYW5uZWxzLFU9TCxWPTA7VjxuLmluQ2hhbm5lbHM7KytWKXtmb3IodmFyIHo9ZltXK1ZdLEc9MDtHPG4ub3V0Q2hhbm5lbHM7KytHKXZbRitHXSs9eipkW1UrR107VSs9bi5vdXRDaGFubmVsc319fX1yZXR1cm4gcC50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5jb252MmREZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiY29udjJkRGVySW5wdXRcIik7Zm9yKHZhciByPXRyKG4uaW5TaGFwZSxcImZsb2F0MzJcIiksbz1yLnZhbHVlcyxhPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGk9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCkscz1lLnN0cmlkZXMsdT1zWzBdLGw9c1sxXSxjPXNbMl0saD1uLmJhdGNoU2l6ZSxwPW4uZmlsdGVySGVpZ2h0LGY9bi5maWx0ZXJXaWR0aCxkPW4uaW5DaGFubmVscyx2PW4uaW5IZWlnaHQsbT1uLmluV2lkdGgsZz1uLm91dENoYW5uZWxzLHk9bi5vdXRIZWlnaHQseD1uLm91dFdpZHRoLGI9bi5zdHJpZGVIZWlnaHQsdz1uLnN0cmlkZVdpZHRoLEM9bi5kYXRhRm9ybWF0LEU9cC0xLW4ucGFkSW5mby50b3AsUj1mLTEtbi5wYWRJbmZvLmxlZnQsST1cImNoYW5uZWxzTGFzdFwiPT09QyxrPXIuc3RyaWRlc1swXSxOPUk/ci5zdHJpZGVzWzFdOnIuc3RyaWRlc1syXSxTPUk/ci5zdHJpZGVzWzJdOjEsQT1JPzE6ci5zdHJpZGVzWzFdLFQ9dC5zdHJpZGVzWzBdLEQ9ST90LnN0cmlkZXNbMV06dC5zdHJpZGVzWzJdLF89ST90LnN0cmlkZXNbMl06MSxPPUk/MTp0LnN0cmlkZXNbMV0sRj0wO0Y8aDsrK0YpZm9yKHZhciBNPTA7TTxkOysrTSlmb3IodmFyIEI9MDtCPHY7KytCKWZvcih2YXIgUD1CLUUsTD1NYXRoLm1heCgwLE1hdGguY2VpbChQL2IpKSxXPU1hdGgubWluKHksKHArUCkvYiksVT0wO1U8bTsrK1Upe2Zvcih2YXIgVj1VLVIsej1NYXRoLm1heCgwLE1hdGguY2VpbChWL3cpKSxHPU1hdGgubWluKHgsKGYrVikvdyksSD0wLHE9TDtxPFc7KytxKWZvcih2YXIgJD1xKmItUCxLPXo7SzxHOysrSylmb3IodmFyIGo9VCpGK0QqcStfKkssWD11KihwLTEtJCkrbCooZi0xLShLKnctVikpK2MqTSxZPTA7WTxnOysrWSl7SCs9YVtqK08qWV0qaVtYK1ldfW9baypGK04qQitTKlUrQSpNXT1IfXJldHVybiByLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmNvbnYzZERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9dHIobi5pblNoYXBlLFwiZmxvYXQzMlwiKSxvPXIudmFsdWVzLGE9ci5zdHJpZGVzLGk9YVswXSxzPWFbMV0sdT1hWzJdLGw9YVszXSxjPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGg9dC5zdHJpZGVzLHA9aFswXSxmPWhbMV0sZD1oWzJdLHY9aFszXSxtPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLGc9ZS5zdHJpZGVzLHk9Z1swXSx4PWdbMV0sYj1nWzJdLHc9Z1szXSxDPW4uYmF0Y2hTaXplLEU9bi5maWx0ZXJEZXB0aCxSPW4uZmlsdGVySGVpZ2h0LEk9bi5maWx0ZXJXaWR0aCxrPW4uaW5DaGFubmVscyxOPW4uaW5EZXB0aCxTPW4uaW5IZWlnaHQsQT1uLmluV2lkdGgsVD1uLm91dENoYW5uZWxzLEQ9bi5vdXREZXB0aCxfPW4ub3V0SGVpZ2h0LE89bi5vdXRXaWR0aCxGPW4uc3RyaWRlRGVwdGgsTT1uLnN0cmlkZUhlaWdodCxCPW4uc3RyaWRlV2lkdGgsUD1FLTEtbi5wYWRJbmZvLmZyb250LEw9Ui0xLW4ucGFkSW5mby50b3AsVz1JLTEtbi5wYWRJbmZvLmxlZnQsVT0wO1U8QzsrK1UpZm9yKHZhciBWPTA7VjxrOysrVilmb3IodmFyIHo9MDt6PE47Kyt6KWZvcih2YXIgRz16LVAsSD1NYXRoLm1heCgwLE1hdGguY2VpbChHL0YpKSxxPU1hdGgubWluKEQsKEUrRykvRiksJD0wOyQ8UzsrKyQpZm9yKHZhciBLPSQtTCxqPU1hdGgubWF4KDAsTWF0aC5jZWlsKEsvTSkpLFg9TWF0aC5taW4oXywoUitLKS9NKSxZPTA7WTxBOysrWSl7Zm9yKHZhciBRPVktVyxKPU1hdGgubWF4KDAsTWF0aC5jZWlsKFEvQikpLFo9TWF0aC5taW4oTywoSStRKS9CKSx0dD0wLGV0PUg7ZXQ8cTsrK2V0KWZvcih2YXIgbnQ9ZXQqRi1HLHJ0PWo7cnQ8WDsrK3J0KWZvcih2YXIgb3Q9cnQqTS1LLGF0PUo7YXQ8WjsrK2F0KWZvcih2YXIgaXQ9cCpVK2YqZXQrZCpydCt2KmF0LHN0PXkqKEUtMS1udCkreCooUi0xLW90KStiKihJLTEtKGF0KkItUSkpK3cqVix1dD0wO3V0PFQ7Kyt1dCl7dHQrPWNbaXQrdXRdKm1bc3QrdXRdfW9baSpVK3Mqeit1KiQrbCpZK1ZdPXR0fXJldHVybiByLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmNvbnYyZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiY29udjJkRGVyRmlsdGVyXCIpO2Zvcih2YXIgcj1uLnN0cmlkZUhlaWdodCxvPW4uc3RyaWRlV2lkdGgsYT1uLmZpbHRlckhlaWdodCxpPW4uZmlsdGVyV2lkdGgscz1cImNoYW5uZWxzTGFzdFwiPT09bi5kYXRhRm9ybWF0LHU9dHIobi5maWx0ZXJTaGFwZSxcImZsb2F0MzJcIiksbD1uLnBhZEluZm8ubGVmdCxjPW4ucGFkSW5mby50b3AsaD10aGlzLmJ1ZmZlclN5bmModCkscD10aGlzLmJ1ZmZlclN5bmMoZSksZj0wO2Y8YTsrK2YpZm9yKHZhciBkPU1hdGgubWF4KDAsTWF0aC5jZWlsKChjLWYpL3IpKSx2PU1hdGgubWluKG4ub3V0SGVpZ2h0LChuLmluSGVpZ2h0K2MtZikvciksbT0wO208aTsrK20pZm9yKHZhciBnPU1hdGgubWF4KDAsTWF0aC5jZWlsKChsLW0pL28pKSx5PU1hdGgubWluKG4ub3V0V2lkdGgsKG4uaW5XaWR0aCtsLW0pL28pLHg9MDt4PG4uaW5DaGFubmVsczsrK3gpZm9yKHZhciBiPTA7YjxuLm91dENoYW5uZWxzOysrYil7Zm9yKHZhciB3PTAsQz0wO0M8bi5iYXRjaFNpemU7KytDKWZvcih2YXIgRT1kO0U8djsrK0UpZm9yKHZhciBSPWYrRSpyLWMsST1nO0k8eTsrK0kpe3ZhciBrPW0rSSpvLWw7dys9cz9oLmdldChDLFIsayx4KSpwLmdldChDLEUsSSxiKTpoLmdldChDLHgsUixrKSpwLmdldChDLGIsRSxJKX11LnNldCh3LGYsbSx4LGIpfXJldHVybiB1LnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmNvbnYzZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPW4uc3RyaWRlRGVwdGgsbz1uLnN0cmlkZUhlaWdodCxhPW4uc3RyaWRlV2lkdGgsaT1uLmZpbHRlckRlcHRoLHM9bi5maWx0ZXJIZWlnaHQsdT1uLmZpbHRlcldpZHRoLGw9dHIobi5maWx0ZXJTaGFwZSxcImZsb2F0MzJcIiksYz1sLnZhbHVlcyxoPWwuc3RyaWRlcyxwPWhbMF0sZj1oWzFdLGQ9aFsyXSx2PWhbM10sbT10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxnPWUuc3RyaWRlcyx5PWdbMF0seD1nWzFdLGI9Z1syXSx3PWdbM10sQz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxFPXQuc3RyaWRlcyxSPUVbMF0sST1FWzFdLGs9RVsyXSxOPUVbM10sUz1uLnBhZEluZm8uZnJvbnQsQT1uLnBhZEluZm8ubGVmdCxUPW4ucGFkSW5mby50b3AsRD0wO0Q8aTsrK0QpZm9yKHZhciBfPU1hdGgubWF4KDAsTWF0aC5jZWlsKChTLUQpL3IpKSxPPU1hdGgubWluKG4ub3V0RGVwdGgsKG4uaW5EZXB0aCtTLUQpL3IpLEY9RCpwLE09MDtNPHM7KytNKWZvcih2YXIgQj1NYXRoLm1heCgwLE1hdGguY2VpbCgoVC1NKS9vKSksUD1NYXRoLm1pbihuLm91dEhlaWdodCwobi5pbkhlaWdodCtULU0pL28pLEw9TSpmK0YsVz0wO1c8dTsrK1cpZm9yKHZhciBVPU1hdGgubWF4KDAsTWF0aC5jZWlsKChBLVcpL2EpKSxWPU1hdGgubWluKG4ub3V0V2lkdGgsKG4uaW5XaWR0aCtBLVcpL2EpLHo9VypkK0wsRz0wO0c8bi5pbkNoYW5uZWxzOysrRylmb3IodmFyIEg9Ryp2K3oscT0wO3E8bi5vdXRDaGFubmVsczsrK3Epe2Zvcih2YXIgJD0wLEs9MDtLPG4uYmF0Y2hTaXplOysrSylmb3IodmFyIGo9SypSLFg9Syp5LFk9XztZPE87KytZKWZvcih2YXIgUT0oRCtZKnItUykqSStqLEo9WSp4K1gsWj1CO1o8UDsrK1opZm9yKHZhciB0dD0oTStaKm8tVCkqaytRLGV0PVoqYitKLG50PVU7bnQ8VjsrK250KXt2YXIgcnQ9bnQqdytldDskKz1DWyhXK250KmEtQSkqTit0dCtHXSptW3J0K3FdfWNbSCtxXT0kfXJldHVybiBsLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmZ1c2VkRGVwdGh3aXNlQ29udjJEPWZ1bmN0aW9uKHQpe3ZhciBlPXQuaW5wdXQsbj10LmZpbHRlcixyPXQuY29udkluZm8sbz10LmJpYXMsYT10LmFjdGl2YXRpb24saT10LnByZWx1QWN0aXZhdGlvbldlaWdodHMscz10aGlzLmRlcHRod2lzZUNvbnYyRChlLG4scik7cmV0dXJuIG8mJihzPXRoaXMuYWRkKHMsbykpLGEmJihzPWhoKHRoaXMscyxhLGkpKSxzfSx0LnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkQ9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImRlcHRod2lzZUNvbnYyRFwiKTtmb3IodmFyIHI9bi5maWx0ZXJIZWlnaHQsbz1uLmZpbHRlcldpZHRoLGE9bi5kaWxhdGlvbkhlaWdodCxpPW4uZGlsYXRpb25XaWR0aCxzPW4ucGFkSW5mby5sZWZ0LHU9bi5wYWRJbmZvLnRvcCxsPW4ub3V0Q2hhbm5lbHMvbi5pbkNoYW5uZWxzLGM9dHIobi5vdXRTaGFwZSx0LmR0eXBlKSxoPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHA9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksZj1jLnZhbHVlcyxkPTA7ZDxuLmJhdGNoU2l6ZTsrK2QpZm9yKHZhciB2PWQqdC5zdHJpZGVzWzBdLG09ZCpjLnN0cmlkZXNbMF0sZz0wO2c8bi5vdXRIZWlnaHQ7KytnKWZvcih2YXIgeT1tK2cqYy5zdHJpZGVzWzFdLHg9ZypuLnN0cmlkZUhlaWdodC1zLGI9MDtiPHI7KytiKXt2YXIgdz14K2IqYTtpZighKHc8MHx8dz49bi5pbkhlaWdodCkpZm9yKHZhciBDPWIqZS5zdHJpZGVzWzBdLEU9dit3KnQuc3RyaWRlc1sxXSxSPTA7UjxuLm91dFdpZHRoOysrUilmb3IodmFyIEk9eStSKmMuc3RyaWRlc1syXSxrPVIqbi5zdHJpZGVXaWR0aC11LE49MDtOPG87KytOKXt2YXIgUz1rK04qaTtpZighKFM8MHx8Uz49bi5pbldpZHRoKSlmb3IodmFyIEE9QytOKmUuc3RyaWRlc1sxXSxUPUUrUypuLmluQ2hhbm5lbHMsRD1JLF89QSxPPTA7TzxuLmluQ2hhbm5lbHM7KytPKXtmb3IodmFyIEY9aFtUK09dLE09MDtNPGw7KytNKWZbRCtNXSs9RipwW18rTV07RCs9bCxfKz1sfX19cmV0dXJuIGMudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJERGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImRlcHRod2lzZUNvbnYyRERlcklucHV0XCIpO2Zvcih2YXIgcj10cihuLmluU2hhcGUsXCJmbG9hdDMyXCIpLG89ci52YWx1ZXMsYT1yLnN0cmlkZXMsaT1hWzBdLHM9YVsxXSx1PWFbMl0sbD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxjPXQuc3RyaWRlcyxoPWNbMF0scD1jWzFdLGY9Y1syXSxkPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHY9ZS5zdHJpZGVzLG09dlswXSxnPXZbMV0seT12WzJdLHg9bi5iYXRjaFNpemUsYj1uLmZpbHRlckhlaWdodCx3PW4uZmlsdGVyV2lkdGgsQz1uLmluQ2hhbm5lbHMsRT1uLmluSGVpZ2h0LFI9bi5pbldpZHRoLEk9bi5vdXRDaGFubmVscyxrPW4ub3V0SGVpZ2h0LE49bi5vdXRXaWR0aCxTPW4uc3RyaWRlSGVpZ2h0LEE9bi5zdHJpZGVXaWR0aCxUPWItMS1uLnBhZEluZm8udG9wLEQ9dy0xLW4ucGFkSW5mby5sZWZ0LF89SS9DLE89MDtPPHg7KytPKWZvcih2YXIgRj0wO0Y8QzsrK0YpZm9yKHZhciBNPTA7TTxFOysrTSlmb3IodmFyIEI9TS1ULFA9TWF0aC5tYXgoMCxNYXRoLmNlaWwoQi9TKSksTD1NYXRoLm1pbihrLChiK0IpL1MpLFc9MDtXPFI7KytXKXtmb3IodmFyIFU9Vy1ELFY9TWF0aC5tYXgoMCxNYXRoLmNlaWwoVS9BKSksej1NYXRoLm1pbihOLCh3K1UpL0EpLEc9MCxIPVA7SDxMOysrSClmb3IodmFyIHE9SCpTLUIsJD1WOyQ8ejsrKyQpZm9yKHZhciBLPWgqTytwKkgrZiokLGo9bSooYi0xLXEpK2cqKHctMS0oJCpBLVUpKSt5KkYsWD0wO1g8XzsrK1gpe0crPWxbSysoRipfK1gpXSpkW2orWF19b1tpKk8rcypNK3UqVytGXT1HfXJldHVybiByLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiZGVwdGh3aXNlQ29udjJERGVyRmlsdGVyXCIpO2Zvcih2YXIgcj1uLnN0cmlkZUhlaWdodCxvPW4uc3RyaWRlV2lkdGgsYT1uLmZpbHRlckhlaWdodCxpPW4uZmlsdGVyV2lkdGgscz10cihuLmZpbHRlclNoYXBlLFwiZmxvYXQzMlwiKSx1PW4ucGFkSW5mby5sZWZ0LGw9bi5wYWRJbmZvLnRvcCxjPW4ub3V0Q2hhbm5lbHMvbi5pbkNoYW5uZWxzLGg9dGhpcy5idWZmZXJTeW5jKHQpLHA9dGhpcy5idWZmZXJTeW5jKGUpLGY9MDtmPGE7KytmKWZvcih2YXIgZD1NYXRoLm1heCgwLE1hdGguY2VpbCgobC1mKS9yKSksdj1NYXRoLm1pbihuLm91dEhlaWdodCwobi5pbkhlaWdodCtsLWYpL3IpLG09MDttPGk7KyttKWZvcih2YXIgZz1NYXRoLm1heCgwLE1hdGguY2VpbCgodS1tKS9vKSkseT1NYXRoLm1pbihuLm91dFdpZHRoLChuLmluV2lkdGgrdS1tKS9vKSx4PTA7eDxuLm91dENoYW5uZWxzOysreCl7Zm9yKHZhciBiPU1hdGgudHJ1bmMoeC9jKSx3PXglYyxDPTAsRT0wO0U8bi5iYXRjaFNpemU7KytFKWZvcih2YXIgUj1kO1I8djsrK1IpZm9yKHZhciBJPWYrUipyLWwsaz1nO2s8eTsrK2spe3ZhciBOPW0raypvLXU7Qys9aC5nZXQoRSxJLE4sYikqcC5nZXQoRSxSLGsseCl9cy5zZXQoQyxmLG0sYix3KX1yZXR1cm4gcy50b1RlbnNvcigpfSx0LnByb3RvdHlwZS50aWxlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwidGlsZVwiKSxTbyh0aGlzLmJ1ZmZlclN5bmModCksZSl9LHQucHJvdG90eXBlLnBhZD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJwYWRcIik7dmFyIHI9ZS5tYXAoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVswXSt0LnNoYXBlW25dK2VbMV19KSxvPWUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfSksYT10aGlzLmJ1ZmZlclN5bmModCksaT10cihyLHQuZHR5cGUpOzAhPT1uJiZpLnZhbHVlcy5maWxsKG4pO2Zvcih2YXIgcz0wO3M8dC5zaXplO3MrKyl7dmFyIHU9YS5pbmRleFRvTG9jKHMpLGw9dS5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtvW2VdfSk7aS5zZXQuYXBwbHkoaSxbYS5nZXQuYXBwbHkoYSx1KV0uY29uY2F0KGwpKX1yZXR1cm4gaS50b1RlbnNvcigpfSx0LnByb3RvdHlwZS50cmFuc3Bvc2U9ZnVuY3Rpb24odCxlKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInRyYW5zcG9zZVwiKTtmb3IodmFyIG49bmV3IEFycmF5KHQucmFuaykscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09dC5zaGFwZVtlW3JdXTt2YXIgbz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxhPXRyKG4sdC5kdHlwZSksaT10aGlzLmJ1ZmZlclN5bmModCk7Zm9yKHI9MDtyPHQuc2l6ZTsrK3Ipe2Zvcih2YXIgcz1pLmluZGV4VG9Mb2MociksdT1uZXcgQXJyYXkocy5sZW5ndGgpLGw9MDtsPHUubGVuZ3RoO2wrKyl1W2xdPXNbZVtsXV07dmFyIGM9YS5sb2NUb0luZGV4KHUpO2EudmFsdWVzW2NdPW9bcl19cmV0dXJuIGEudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUuZ2F0aGVyPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJnYXRoZXJcIik7dmFyIHI9dC5zaGFwZS5zbGljZSgpLG89dGhpcy5yZWFkU3luYyhlLmRhdGFJZCk7cltuXT1vLmxlbmd0aDtmb3IodmFyIGE9dHIocix0LmR0eXBlKSxpPXRoaXMuYnVmZmVyU3luYyh0KSxzPTA7czxhLnNpemU7KytzKXt2YXIgdT1hLmluZGV4VG9Mb2MocyksbD11LnNsaWNlKCk7bFtuXT1vW3Vbbl1dO3ZhciBjPWkubG9jVG9JbmRleChsKTthLnZhbHVlc1tzXT1pLnZhbHVlc1tjXX1yZXR1cm4gYS50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5iYXRjaFRvU3BhY2VORD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0XSxcImJhdGNoVG9TcGFjZU5EXCIpO3ZhciByPWUucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQqZX0pLG89U3IodC5zaGFwZSxlLHIpLGE9QXIoby5sZW5ndGgsZS5sZW5ndGgpLGk9VHIodC5zaGFwZSxlLHIpLHM9RHIobixlLmxlbmd0aCksdT1fcihpLG4sZS5sZW5ndGgpO3JldHVybiB0LnJlc2hhcGUobykudHJhbnNwb3NlKGEpLnJlc2hhcGUoaSkuc2xpY2Uocyx1KX0sdC5wcm90b3R5cGUuc3BhY2VUb0JhdGNoTkQ9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdF0sXCJzcGFjZVRvQmF0Y2hORFwiKTt2YXIgcj1lLnJlZHVjZShmdW5jdGlvbih0LGUpe3JldHVybiB0KmV9KSxvPVtbMCwwXV07by5wdXNoLmFwcGx5KG8sbik7Zm9yKHZhciBhPTErZS5sZW5ndGg7YTx0LnNoYXBlLmxlbmd0aDsrK2Epby5wdXNoKFswLDBdKTt2YXIgaT10LnBhZChvKSxzPVNyKGkuc2hhcGUsZSxyLCExKSx1PUFyKHMubGVuZ3RoLGUubGVuZ3RoLCExKSxsPVRyKGkuc2hhcGUsZSxyLCExKTtyZXR1cm4gaS5yZXNoYXBlKHMpLnRyYW5zcG9zZSh1KS5yZXNoYXBlKGwpfSx0LnByb3RvdHlwZS5wb29sPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInBvb2xcIik7Zm9yKHZhciByPWUuc3RyaWRlSGVpZ2h0LG89ZS5zdHJpZGVXaWR0aCxhPWUuZGlsYXRpb25IZWlnaHQsaT1lLmRpbGF0aW9uV2lkdGgscz1lLmVmZmVjdGl2ZUZpbHRlckhlaWdodCx1PWUuZWZmZWN0aXZlRmlsdGVyV2lkdGgsbD1lLnBhZEluZm8udG9wLGM9ZS5wYWRJbmZvLmxlZnQsaD1cIm1heFwiPT09bj9OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk6TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLHA9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZj10cihlLm91dFNoYXBlLHQuZHR5cGUpLGQ9Zi52YWx1ZXMsdj1lLm91dFNoYXBlWzFdKmUub3V0U2hhcGVbMl0qZS5vdXRTaGFwZVszXSxtPWUub3V0U2hhcGVbMl0qZS5vdXRTaGFwZVszXSxnPWUub3V0U2hhcGVbM10seT0wO3k8ZS5iYXRjaFNpemU7Kyt5KWZvcih2YXIgeD15KnYsYj15KnQuc3RyaWRlc1swXSx3PTA7dzxlLmluQ2hhbm5lbHM7Kyt3KWZvcih2YXIgQz0wO0M8ZS5vdXRIZWlnaHQ7KytDKWZvcih2YXIgRT1DKnItbCxSPU1hdGgubWF4KDAsRSksST1NYXRoLm1pbihlLmluSGVpZ2h0LHMrRSksaz14K0MqbSxOPTA7TjxlLm91dFdpZHRoOysrTil7Zm9yKHZhciBTPU4qby1jLEE9TWF0aC5tYXgoMCxTKSxUPU1hdGgubWluKGUuaW5XaWR0aCx1K1MpLEQ9aCxfPTAsTz0wLEY9UjtGPEk7Ris9YSl7Zm9yKHZhciBNPWIrRip0LnN0cmlkZXNbMV0sQj1BO0I8VDtCKz1pKXt2YXIgUD1wW00rQip0LnN0cmlkZXNbMl0rd107XCJtYXhcIj09PW4mJlA+RD9EPVA6XCJhdmdcIj09PW4mJihfKz1QLE8rKyl9aWYoaXNOYU4oRCkpYnJlYWt9ZFtrK04qZyt3XT1cImF2Z1wiPT09bj9fL086RH1yZXR1cm4gZi50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5tYXhQb29sPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMucG9vbCh0LGUsXCJtYXhcIil9LHQucHJvdG90eXBlLm1heFBvb2xQb3NpdGlvbnM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dHIoZS5vdXRTaGFwZSxcImludDMyXCIpLHI9ZS5zdHJpZGVIZWlnaHQsbz1lLnN0cmlkZVdpZHRoLGE9ZS5kaWxhdGlvbkhlaWdodCxpPWUuZGlsYXRpb25XaWR0aCxzPWUuZWZmZWN0aXZlRmlsdGVySGVpZ2h0LHU9ZS5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxsPWUucGFkSW5mby50b3AsYz1lLnBhZEluZm8ubGVmdCxoPXRoaXMuYnVmZmVyU3luYyh0KSxwPTA7cDxlLmJhdGNoU2l6ZTsrK3ApZm9yKHZhciBmPTA7ZjxlLmluQ2hhbm5lbHM7KytmKWZvcih2YXIgZD0wO2Q8ZS5vdXRIZWlnaHQ7KytkKXtmb3IodmFyIHY9ZCpyLWwsbT12O208MDspbSs9YTtmb3IodmFyIGc9TWF0aC5taW4oZS5pbkhlaWdodCxzK3YpLHk9MDt5PGUub3V0V2lkdGg7Kyt5KXtmb3IodmFyIHg9eSpvLWMsYj14O2I8MDspYis9aTtmb3IodmFyIHc9TWF0aC5taW4oZS5pbldpZHRoLHUreCksQz1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksRT0tMSxSPW07UjxnO1IrPWEpZm9yKHZhciBJPVItdixrPWI7azx3O2srPWkpe3ZhciBOPWsteCxTPWguZ2V0KHAsUixrLGYpO1M+QyYmKEM9UyxFPUkqdStOKX1uLnNldChFLHAsZCx5LGYpfX1yZXR1cm4gbi50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5tYXhQb29sQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4scil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFtlLG5dLFwibWF4UG9vbEJhY2twcm9wXCIpO2Zvcih2YXIgbz10aGlzLm1heFBvb2xQb3NpdGlvbnMoZSxyKSxhPXIuc3RyaWRlSGVpZ2h0LGk9ci5zdHJpZGVXaWR0aCxzPXIuZGlsYXRpb25IZWlnaHQsdT1yLmRpbGF0aW9uV2lkdGgsbD1yLmVmZmVjdGl2ZUZpbHRlckhlaWdodCxjPXIuZWZmZWN0aXZlRmlsdGVyV2lkdGgsaD1jLTEtci5wYWRJbmZvLmxlZnQscD1sLTEtci5wYWRJbmZvLnRvcCxmPXRyKGUuc2hhcGUsXCJmbG9hdDMyXCIpLGQ9dGhpcy5idWZmZXJTeW5jKG8pLHY9dGhpcy5idWZmZXJTeW5jKHQpLG09MDttPHIuYmF0Y2hTaXplOysrbSlmb3IodmFyIGc9MDtnPHIuaW5DaGFubmVsczsrK2cpZm9yKHZhciB5PTA7eTxyLmluSGVpZ2h0OysreSlmb3IodmFyIHg9MDt4PHIuaW5XaWR0aDsrK3gpe2Zvcih2YXIgYj15LXAsdz14LWgsQz0wLEU9MDtFPGw7RSs9cyl7dmFyIFI9KGIrRSkvYTtpZighKFI8MHx8Uj49ci5vdXRIZWlnaHR8fE1hdGguZmxvb3IoUikhPT1SKSlmb3IodmFyIEk9MDtJPGM7SSs9dSl7dmFyIGs9KHcrSSkvaTtpZighKGs8MHx8az49ci5vdXRXaWR0aHx8TWF0aC5mbG9vcihrKSE9PWspKXt2YXIgTj1sKmMtMS1kLmdldChtLFIsayxnKT09PUUqYytJPzE6MDtpZigwIT09TilDKz12LmdldChtLFIsayxnKSpOfX19Zi5zZXQoQyxtLHkseCxnKX1yZXR1cm4gZi50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5hdmdQb29sQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImF2Z1Bvb2xCYWNrcHJvcFwiKTtmb3IodmFyIHI9bi5zdHJpZGVIZWlnaHQsbz1uLnN0cmlkZVdpZHRoLGE9bi5maWx0ZXJIZWlnaHQsaT1uLmZpbHRlcldpZHRoLHM9bi5kaWxhdGlvbkhlaWdodCx1PW4uZGlsYXRpb25XaWR0aCxsPW4uZWZmZWN0aXZlRmlsdGVySGVpZ2h0LGM9bi5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxoPWMtMS1uLnBhZEluZm8ubGVmdCxwPWwtMS1uLnBhZEluZm8udG9wLGY9dHIoZS5zaGFwZSxcImZsb2F0MzJcIiksZD0xLyhhKmkpLHY9dGhpcy5idWZmZXJTeW5jKHQpLG09MDttPG4uYmF0Y2hTaXplOysrbSlmb3IodmFyIGc9MDtnPG4uaW5DaGFubmVsczsrK2cpZm9yKHZhciB5PTA7eTxuLmluSGVpZ2h0OysreSlmb3IodmFyIHg9MDt4PG4uaW5XaWR0aDsrK3gpe2Zvcih2YXIgYj15LXAsdz14LWgsQz0wLEU9MDtFPGw7RSs9cyl7dmFyIFI9KGIrRSkvcjtpZighKFI8MHx8Uj49bi5vdXRIZWlnaHR8fE1hdGguZmxvb3IoUikhPT1SKSlmb3IodmFyIEk9MDtJPGM7SSs9dSl7dmFyIGs9KHcrSSkvbztpZighKGs8MHx8az49bi5vdXRXaWR0aHx8TWF0aC5mbG9vcihrKSE9PWspKUMrPXYuZ2V0KG0sUixrLGcpfX1mLnNldChDKmQsbSx5LHgsZyl9cmV0dXJuIGYudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUucG9vbDNkPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInBvb2wzZFwiKTtmb3IodmFyIHI9ZS5zdHJpZGVEZXB0aCxvPWUuc3RyaWRlSGVpZ2h0LGE9ZS5zdHJpZGVXaWR0aCxpPWUuZGlsYXRpb25EZXB0aCxzPWUuZGlsYXRpb25IZWlnaHQsdT1lLmRpbGF0aW9uV2lkdGgsbD1lLmVmZmVjdGl2ZUZpbHRlckRlcHRoLGM9ZS5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsaD1lLmVmZmVjdGl2ZUZpbHRlcldpZHRoLHA9ZS5wYWRJbmZvLmZyb250LGY9ZS5wYWRJbmZvLnRvcCxkPWUucGFkSW5mby5sZWZ0LHY9XCJtYXhcIj09PW4/TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZOk51bWJlci5QT1NJVElWRV9JTkZJTklUWSxtPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGc9dHIoZS5vdXRTaGFwZSx0LmR0eXBlKSx5PWcudmFsdWVzLHg9ZS5vdXRTaGFwZVsxXSplLm91dFNoYXBlWzJdKmUub3V0U2hhcGVbM10qZS5vdXRTaGFwZVs0XSxiPWUub3V0U2hhcGVbMl0qZS5vdXRTaGFwZVszXSplLm91dFNoYXBlWzRdLHc9ZS5vdXRTaGFwZVszXSplLm91dFNoYXBlWzRdLEM9ZS5vdXRTaGFwZVs0XSxFPTA7RTxlLmJhdGNoU2l6ZTsrK0UpZm9yKHZhciBSPUUqeCxJPUUqdC5zdHJpZGVzWzBdLGs9MDtrPGUuaW5DaGFubmVsczsrK2spZm9yKHZhciBOPTA7TjxlLm91dERlcHRoOysrTil7Zm9yKHZhciBTPU4qci1wLEE9UztBPDA7KUErPWk7Zm9yKHZhciBUPU1hdGgubWluKGUuaW5EZXB0aCxsK1MpLEQ9UitOKmIsXz0wO188ZS5vdXRIZWlnaHQ7KytfKXtmb3IodmFyIE89XypvLWYsRj1PO0Y8MDspRis9cztmb3IodmFyIE09TWF0aC5taW4oZS5pbkhlaWdodCxjK08pLEI9RCtfKncsUD0wO1A8ZS5vdXRXaWR0aDsrK1Ape2Zvcih2YXIgTD1QKmEtZCxXPUw7VzwwOylXKz11O2Zvcih2YXIgVT1NYXRoLm1pbihlLmluV2lkdGgsaCtMKSxWPUIrUCpDLHo9dixHPTAsSD0wLHE9QTtxPFQ7cSs9aSl7Zm9yKHZhciAkPUkrcSp0LnN0cmlkZXNbMV0sSz1GO0s8TTtLKz1zKXtmb3IodmFyIGo9JCtLKnQuc3RyaWRlc1syXSxYPVc7WDxVO1grPXUpe3ZhciBZPW1baitYKnQuc3RyaWRlc1szXStrXTtpZihcIm1heFwiPT09biYmWT56P3o9WTpcImF2Z1wiPT09biYmKEcrPVksSCsrKSxpc05hTih6KSlicmVha31pZihpc05hTih6KSlicmVha31pZihpc05hTih6KSlicmVha315W1Yra109XCJhdmdcIj09PW4/Ry9IOnp9fX1yZXR1cm4gZy50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5hdmdQb29sM2Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJhdmdQb29sM2RcIiksdGhpcy5wb29sM2QodCxlLFwiYXZnXCIpLnRvRmxvYXQoKX0sdC5wcm90b3R5cGUuYXZnUG9vbDNkQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImF2Z1Bvb2wzZEJhY2twcm9wXCIpO2Zvcih2YXIgcj1uLnN0cmlkZURlcHRoLG89bi5zdHJpZGVIZWlnaHQsYT1uLnN0cmlkZVdpZHRoLGk9bi5maWx0ZXJEZXB0aCxzPW4uZmlsdGVySGVpZ2h0LHU9bi5maWx0ZXJXaWR0aCxsPW4uZGlsYXRpb25EZXB0aCxjPW4uZGlsYXRpb25IZWlnaHQsaD1uLmRpbGF0aW9uV2lkdGgscD1uLmVmZmVjdGl2ZUZpbHRlckRlcHRoLGY9bi5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsZD1uLmVmZmVjdGl2ZUZpbHRlcldpZHRoLHY9cC0xLW4ucGFkSW5mby5mcm9udCxtPWQtMS1uLnBhZEluZm8ubGVmdCxnPWYtMS1uLnBhZEluZm8udG9wLHk9dHIoZS5zaGFwZSxcImZsb2F0MzJcIikseD0xLyhpKnMqdSksYj10aGlzLmJ1ZmZlclN5bmModCksdz0wO3c8bi5iYXRjaFNpemU7Kyt3KWZvcih2YXIgQz0wO0M8bi5pbkNoYW5uZWxzOysrQylmb3IodmFyIEU9MDtFPG4uaW5EZXB0aDsrK0UpZm9yKHZhciBSPTA7UjxuLmluSGVpZ2h0OysrUilmb3IodmFyIEk9MDtJPG4uaW5XaWR0aDsrK0kpe2Zvcih2YXIgaz1FLXYsTj1SLWcsUz1JLW0sQT0wLFQ9MDtUPHA7VCs9bCl7dmFyIEQ9KGsrVCkvcjtpZighKEQ8MHx8RD49bi5vdXREZXB0aHx8TWF0aC5mbG9vcihEKSE9PUQpKWZvcih2YXIgXz0wO188ZjtfKz1jKXt2YXIgTz0oTitfKS9vO2lmKCEoTzwwfHxPPj1uLm91dEhlaWdodHx8TWF0aC5mbG9vcihPKSE9PU8pKWZvcih2YXIgRj0wO0Y8ZDtGKz1oKXt2YXIgTT0oUytGKS9hO2lmKCEoTTwwfHxNPj1uLm91dFdpZHRofHxNYXRoLmZsb29yKE0pIT09TSkpQSs9Yi5nZXQodyxELE8sTSxDKX19fXkuc2V0KEEqeCx3LEUsUixJLEMpfXJldHVybiB5LnRvVGVuc29yKCl9LHQucHJvdG90eXBlLm1heFBvb2wzZD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcIm1heFBvb2wzZFwiKSx0aGlzLnBvb2wzZCh0LGUsXCJtYXhcIikudG9GbG9hdCgpfSx0LnByb3RvdHlwZS5tYXhQb29sM2RQb3NpdGlvbnM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dHIoZS5vdXRTaGFwZSxcImludDMyXCIpLHI9ZS5zdHJpZGVEZXB0aCxvPWUuc3RyaWRlSGVpZ2h0LGE9ZS5zdHJpZGVXaWR0aCxpPWUuZGlsYXRpb25EZXB0aCxzPWUuZGlsYXRpb25IZWlnaHQsdT1lLmRpbGF0aW9uV2lkdGgsbD1lLmVmZmVjdGl2ZUZpbHRlckRlcHRoLGM9ZS5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsaD1lLmVmZmVjdGl2ZUZpbHRlcldpZHRoLHA9ZS5wYWRJbmZvLmZyb250LGY9ZS5wYWRJbmZvLnRvcCxkPWUucGFkSW5mby5sZWZ0LHY9dGhpcy5idWZmZXJTeW5jKHQpLG09MDttPGUuYmF0Y2hTaXplOysrbSlmb3IodmFyIGc9MDtnPGUuaW5DaGFubmVsczsrK2cpZm9yKHZhciB5PTA7eTxlLm91dERlcHRoOysreSl7Zm9yKHZhciB4PXkqci1wLGI9eDtiPDA7KWIrPWk7Zm9yKHZhciB3PU1hdGgubWluKGUuaW5EZXB0aCxsK3gpLEM9MDtDPGUub3V0SGVpZ2h0OysrQyl7Zm9yKHZhciBFPUMqby1mLFI9RTtSPDA7KVIrPXM7Zm9yKHZhciBJPU1hdGgubWluKGUuaW5IZWlnaHQsYytFKSxrPTA7azxlLm91dFdpZHRoOysrayl7Zm9yKHZhciBOPWsqYS1kLFM9TjtTPDA7KVMrPXU7Zm9yKHZhciBBPU1hdGgubWluKGUuaW5XaWR0aCxoK04pLFQ9TnVtYmVyLk5FR0FUSVZFX0lORklOSVRZLEQ9LTEsXz1iO188dztfKz1pKWZvcih2YXIgTz1fLXgsRj1SO0Y8STtGKz1zKWZvcih2YXIgTT1GLUUsQj1TO0I8QTtCKz11KXt2YXIgUD1CLU4sTD12LmdldChtLF8sRixCLGcpO0w+PVQmJihUPUwsRD1PKmMqaCtNKmMrUCl9bi5zZXQoRCxtLHksQyxrLGcpfX19cmV0dXJuIG4udG9UZW5zb3IoKX0sdC5wcm90b3R5cGUubWF4UG9vbDNkQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4scil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFtlLG5dLFwibWF4UG9vbDNkQmFja3Byb3BcIik7Zm9yKHZhciBvPXRoaXMubWF4UG9vbDNkUG9zaXRpb25zKGUsciksYT1yLnN0cmlkZURlcHRoLGk9ci5zdHJpZGVIZWlnaHQscz1yLnN0cmlkZVdpZHRoLHU9ci5kaWxhdGlvbkRlcHRoLGw9ci5kaWxhdGlvbkhlaWdodCxjPXIuZGlsYXRpb25XaWR0aCxoPXIuZWZmZWN0aXZlRmlsdGVyRGVwdGgscD1yLmVmZmVjdGl2ZUZpbHRlckhlaWdodCxmPXIuZWZmZWN0aXZlRmlsdGVyV2lkdGgsZD1oLTEtci5wYWRJbmZvLmZyb250LHY9Zi0xLXIucGFkSW5mby5sZWZ0LG09cC0xLXIucGFkSW5mby50b3AsZz10cihlLnNoYXBlLFwiZmxvYXQzMlwiKSx5PXRoaXMuYnVmZmVyU3luYyhvKSx4PXRoaXMuYnVmZmVyU3luYyh0KSxiPTA7YjxyLmJhdGNoU2l6ZTsrK2IpZm9yKHZhciB3PTA7dzxyLmluQ2hhbm5lbHM7Kyt3KWZvcih2YXIgQz0wO0M8ci5pbkRlcHRoOysrQylmb3IodmFyIEU9MDtFPHIuaW5IZWlnaHQ7KytFKWZvcih2YXIgUj0wO1I8ci5pbldpZHRoOysrUil7Zm9yKHZhciBJPUMtZCxrPUUtbSxOPVItdixTPTAsQT0wO0E8aDtBKz11KXt2YXIgVD0oSStBKS9hO2lmKCEoVDwwfHxUPj1yLm91dERlcHRofHxNYXRoLmZsb29yKFQpIT09VCkpZm9yKHZhciBEPTA7RDxwO0QrPWwpe3ZhciBfPShrK0QpL2k7aWYoIShfPDB8fF8+PXIub3V0SGVpZ2h0fHxNYXRoLmZsb29yKF8pIT09XykpZm9yKHZhciBPPTA7TzxmO08rPWMpe3ZhciBGPShOK08pL3M7aWYoIShGPDB8fEY+PXIub3V0V2lkdGh8fE1hdGguZmxvb3IoRikhPT1GKSl7dmFyIE09aCpwKmYtMS15LmdldChiLFQsXyxGLHcpPT09QSpwKmYrRCpmK08/MTowO2lmKDAhPT1NKVMrPXguZ2V0KGIsVCxfLEYsdykqTX19fX1nLnNldChTLGIsQyxFLFIsdyl9cmV0dXJuIGcudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUuY2FzdD1mdW5jdGlvbih0LGUpe3JldHVybiBnbyh0LGUsdGhpcyl9LHQucHJvdG90eXBlLnJlc2hhcGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4geW8odCxlKX0sdC5wcm90b3R5cGUuYXZnUG9vbD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImF2Z1Bvb2xcIiksdGhpcy5wb29sKHQsZSxcImF2Z1wiKS50b0Zsb2F0KCl9LHQucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwicmVzaXplQmlsaW5lYXJcIik7Zm9yKHZhciBvPXQuc2hhcGUsYT1vWzBdLGk9b1sxXSxzPW9bMl0sdT1vWzNdLGw9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksYz1uZXcgRmxvYXQzMkFycmF5KGcoW2EsZSxuLHVdKSksaD1bciYmZT4xP2ktMTppLHImJm4+MT9zLTE6c10scD1bciYmZT4xP2UtMTplLHImJm4+MT9uLTE6bl0sZj0wLGQ9aFswXS9wWzBdLHY9aFsxXS9wWzFdLG09MDttPGE7bSsrKWZvcih2YXIgeT0wO3k8ZTt5KyspZm9yKHZhciB4PWQqeSxiPU1hdGguZmxvb3IoeCksdz14LWIsQz1NYXRoLm1pbihpLTEsTWF0aC5jZWlsKHgpKSxFPW0qdC5zdHJpZGVzWzBdK2IqdC5zdHJpZGVzWzFdLFI9bSp0LnN0cmlkZXNbMF0rQyp0LnN0cmlkZXNbMV0sST0wO0k8bjtJKyspZm9yKHZhciBrPXYqSSxOPU1hdGguZmxvb3IoayksUz1rLU4sQT1NYXRoLm1pbihzLTEsTWF0aC5jZWlsKGspKSxUPUUrTip0LnN0cmlkZXNbMl0sRD1SK04qdC5zdHJpZGVzWzJdLF89RSsgK0EqdC5zdHJpZGVzWzJdLE89UitBKnQuc3RyaWRlc1syXSxGPTA7Rjx1O0YrKyl7dmFyIE09bFtUK0ZdLEI9bFtEK0ZdLFA9TSsobFtfK0ZdLU0pKlMsTD1QKyhCKyhsW08rRl0tQikqUy1QKSp3O2NbZisrXT1MfXJldHVybiBibihjLFthLGUsbix1XSl9LHQucHJvdG90eXBlLnJlc2l6ZUJpbGluZWFyQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcInJlc2l6ZUJpbGluZWFyQmFja3Byb3BcIik7Zm9yKHZhciByPWUuc2hhcGUsbz1yWzBdLGE9clsxXSxpPXJbMl0scz1yWzNdLHU9dC5zaGFwZSxsPXVbMV0sYz11WzJdLGg9bmV3IEZsb2F0MzJBcnJheShvKmEqaSpzKSxwPVtuJiZsPjE/YS0xOmEsbiYmYz4xP2ktMTppXSxmPVtuJiZsPjE/bC0xOmwsbiYmYz4xP2MtMTpjXSxkPXBbMF0vZlswXSx2PXBbMV0vZlsxXSxtPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGc9MCx5PTA7eTxvO3krKylmb3IodmFyIHg9eSplLnN0cmlkZXNbMF0sYj0wO2I8bDtiKyspZm9yKHZhciB3PWIqZCxDPU1hdGguZmxvb3IodyksRT1NYXRoLm1pbihNYXRoLmNlaWwodyksYS0xKSxSPXgrQyplLnN0cmlkZXNbMV0sST14K0UqZS5zdHJpZGVzWzFdLGs9dy1DLE49MS1rLFM9MDtTPGM7UysrKWZvcih2YXIgQT1TKnYsVD1NYXRoLmZsb29yKEEpLEQ9TWF0aC5taW4oTWF0aC5jZWlsKEEpLGktMSksXz1BLVQsTz0xLV8sRj1SK1QqZS5zdHJpZGVzWzJdLE09UitEKmUuc3RyaWRlc1syXSxCPUkrVCplLnN0cmlkZXNbMl0sUD1JK0QqZS5zdHJpZGVzWzJdLEw9TipPLFc9TipfLFU9aypPLFY9aypfLHo9MDt6PHM7eisrKXt2YXIgRz1tW2crK107aFtGK3pdKz1HKkwsaFtNK3pdKz1HKlcsaFtCK3pdKz1HKlUsaFtQK3pdKz1HKlZ9cmV0dXJuIGtuKGgsW28saSxhLHNdLGUuZHR5cGUpfSx0LnByb3RvdHlwZS5yZXNpemVOZWFyZXN0TmVpZ2hib3I9ZnVuY3Rpb24odCxlLG4scil7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJyZXNpemVOZWFyZXN0TmVpZ2hib3JcIik7Zm9yKHZhciBvPXQuc2hhcGUsYT1vWzBdLGk9b1sxXSxzPW9bMl0sdT1vWzNdLGw9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksYz1uZXcgRmxvYXQzMkFycmF5KGEqZSpuKnUpLGg9W3ImJmU+MT9pLTE6aSxyJiZuPjE/cy0xOnNdLHA9W3ImJmU+MT9lLTE6ZSxyJiZuPjE/bi0xOm5dLGY9aFswXS9wWzBdLGQ9aFsxXS9wWzFdLHY9MCxtPTA7bTxhO20rKylmb3IodmFyIGc9bSp0LnN0cmlkZXNbMF0seT0wO3k8ZTt5KyspZm9yKHZhciB4PWYqeSxiPWcrTWF0aC5taW4oaS0xLHI/TWF0aC5yb3VuZCh4KTpNYXRoLmZsb29yKHgpKSp0LnN0cmlkZXNbMV0sdz0wO3c8bjt3KyspZm9yKHZhciBDPWQqdyxFPWIrTWF0aC5taW4ocy0xLHI/TWF0aC5yb3VuZChDKTpNYXRoLmZsb29yKEMpKSp0LnN0cmlkZXNbMl0sUj0wO1I8dTtSKyspe3ZhciBJPWxbRStSXTtjW3YrK109SX1yZXR1cm4gYm4oYyxbYSxlLG4sdV0sdC5kdHlwZSl9LHQucHJvdG90eXBlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvckJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJyZXNpemVOZWFyZXN0TmVpZ2hib3JCYWNrcHJvcFwiKTtmb3IodmFyIHI9ZS5zaGFwZSxvPXJbMF0sYT1yWzFdLGk9clsyXSxzPXJbM10sdT10LnNoYXBlLGw9dVsxXSxjPXVbMl0saD1uZXcgRmxvYXQzMkFycmF5KG8qYSppKnMpLHA9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZj1bbiYmbD4xP2EtMTphLG4mJmM+MT9pLTE6aV0sZD1bbiYmbD4xP2wtMTpsLG4mJmM+MT9jLTE6Y10sdj1mWzBdL2RbMF0sbT1mWzFdL2RbMV0sZz0xL3YseT0xL20seD0yKk1hdGguY2VpbChnKSsyLGI9MipNYXRoLmNlaWwoeSkrMix3PTA7dzxvO3crKylmb3IodmFyIEM9dyplLnN0cmlkZXNbMF0sRT0wO0U8YTtFKyspZm9yKHZhciBSPUMrRSplLnN0cmlkZXNbMV0sST1NYXRoLmZsb29yKEUqZyksaz1NYXRoLmZsb29yKEkteC8yKSxOPTA7TjxpO04rKylmb3IodmFyIFM9UitOKmUuc3RyaWRlc1syXSxBPU1hdGguZmxvb3IoTip5KSxUPU1hdGguZmxvb3IoQS1iLzIpLEQ9MDtEPHM7RCsrKXtmb3IodmFyIF89MCxPPTA7Tzx4O08rKyl7dmFyIEY9TytrO2lmKCEoRjwwfHxGPj1sKSl7dmFyIE09QytGKnQuc3RyaWRlc1sxXSxCPUYqdjtpZihFPT09TWF0aC5taW4oYS0xLG4/TWF0aC5yb3VuZChCKTpNYXRoLmZsb29yKEIpKSlmb3IodmFyIFA9MDtQPGI7UCsrKXt2YXIgTD1QK1Q7aWYoIShMPDB8fEw+PWMpKXt2YXIgVz1NK0wqdC5zdHJpZGVzWzJdLFU9TCptO049PT1NYXRoLm1pbihpLTEsbj9NYXRoLnJvdW5kKFUpOk1hdGguZmxvb3IoVSkpJiYoXys9cFtXK0RdKX19fX1oW1MrRF09X31yZXR1cm4ga24oaCxlLnNoYXBlLGUuZHR5cGUpfSx0LnByb3RvdHlwZS5iYXRjaE5vcm1hbGl6YXRpb249ZnVuY3Rpb24odCxlLG4scixvLGEpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlLG4sbyxhXSxcImJhdGNoTm9ybVwiKTtmb3IodmFyIGk9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscz10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSx1PXRoaXMucmVhZFN5bmMobi5kYXRhSWQpLGw9bz90aGlzLnJlYWRTeW5jKG8uZGF0YUlkKTpuZXcgRmxvYXQzMkFycmF5KFsxXSksYz1hP3RoaXMucmVhZFN5bmMoYS5kYXRhSWQpOm5ldyBGbG9hdDMyQXJyYXkoWzBdKSxoPW5ldyBGbG9hdDMyQXJyYXkoaS5sZW5ndGgpLHA9Yy5sZW5ndGgsZj1sLmxlbmd0aCxkPXUubGVuZ3RoLHY9cy5sZW5ndGgsbT0wLGc9MCx5PTAseD0wLGI9MDtiPGkubGVuZ3RoOysrYiloW2JdPWNbbSsrXSsoaVtiXS1zW2crK10pKmxbeSsrXS9NYXRoLnNxcnQodVt4KytdK3IpLG0+PXAmJihtPTApLGc+PXYmJihnPTApLHk+PWYmJih5PTApLHg+PWQmJih4PTApO3JldHVybiBrbihoLHQuc2hhcGUpfSx0LnByb3RvdHlwZS5sb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjREPWZ1bmN0aW9uKHQsZSxuLHIsbyl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjREXCIpO3ZhciBhPXQuc2hhcGVbM10saT1hLTEscz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSx1PXQuc2l6ZSxsPW5ldyBGbG9hdDMyQXJyYXkodSk7ZnVuY3Rpb24gYyh0KXtmb3IodmFyIG49dCVhLHI9dC1uK01hdGgubWF4KDAsbi1lKSxvPXQtbitNYXRoLm1pbihuK2UsaSksdT0wO3I8PW87cisrKXt2YXIgbD1zW3JdO3UrPWwqbH1yZXR1cm4gdX1mb3IodmFyIGg9MDtoPHU7aCsrKXt2YXIgcD1jKGgpLGY9c1toXSpNYXRoLnBvdyhuK3IqcCwtbyk7bFtoXT1mfXJldHVybiBrbihsLHQuc2hhcGUpfSx0LnByb3RvdHlwZS5MUk5HcmFkPWZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiTFJOR3JhZFwiKTtmb3IodmFyIHM9dC5zaGFwZVszXSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGw9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksYz10aGlzLnJlYWRTeW5jKG4uZGF0YUlkKSxoPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxwPXQuc2l6ZSxmPTA7ZjxwO2YrKyl7Zm9yKHZhciBkPWYlcyx2PWYtZCtNYXRoLm1heCgwLGQtciksbT1mLWQrTWF0aC5taW4ocyxkK3IrMSksZz0wLHk9djt5PG07eSsrKWcrPU1hdGgucG93KGxbeV0sMik7Zz1hKmcrbztmb3IoeT12O3k8bTt5Kyspe3ZhciB4PS0yKmEqaSpsW3ldKmNbZl0vZztmPT09eSYmKHgrPU1hdGgucG93KGcsLWkpKSx4Kj11W2ZdLGhbeV0rPXh9fXJldHVybiBrbihoLHQuc2hhcGUpfSx0LnByb3RvdHlwZS5tdWx0aW5vbWlhbD1mdW5jdGlvbih0LGUsbixyKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcIm11bHRpbm9taWFsXCIpO2Zvcih2YXIgbz1lP3Q6UXIodCksYT1vLnNoYXBlWzBdLGk9by5zaGFwZVsxXSxzPVRuKFthLG5dLFwiaW50MzJcIiksdT10aGlzLnJlYWRTeW5jKHMuZGF0YUlkKSxsPXRoaXMucmVhZFN5bmMoby5kYXRhSWQpLGM9MDtjPGE7KytjKXt2YXIgaD1jKmkscD1uZXcgRmxvYXQzMkFycmF5KGktMSk7cFswXT1sW2hdO2Zvcih2YXIgZj0xO2Y8cC5sZW5ndGg7KytmKXBbZl09cFtmLTFdK2xbaCtmXTtmb3IodmFyIGQ9WW4oci50b1N0cmluZygpKSx2PWMqbixtPTA7bTxuOysrbSl7dmFyIGc9ZCgpO3VbdittXT1wLmxlbmd0aDtmb3IodmFyIHk9MDt5PHAubGVuZ3RoO3krKylpZihnPHBbeV0pe3VbdittXT15O2JyZWFrfX19cmV0dXJuIHN9LHQucHJvdG90eXBlLm9uZUhvdD1mdW5jdGlvbih0LGUsbixyKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcIm9uZUhvdFwiKTt2YXIgbz1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSplKTtvLmZpbGwocik7Zm9yKHZhciBhPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGk9MDtpPHQuc2l6ZTsrK2kpYVtpXT49MCYmYVtpXTxlJiYob1tpKmUrYVtpXV09bik7cmV0dXJuIFJuKG8sW3Quc2l6ZSxlXSxcImludDMyXCIpfSx0LnByb3RvdHlwZS5ub25NYXhTdXBwcmVzc2lvbj1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcIm5vbk1heFN1cHByZXNzaW9uXCIpLElvKHRoaXMucmVhZFN5bmModC5kYXRhSWQpLHRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLG4scixvKX0sdC5wcm90b3R5cGUuZmZ0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZmdEJhdGNoKHQsITEpfSx0LnByb3RvdHlwZS5pZmZ0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZmdEJhdGNoKHQsITApfSx0LnByb3RvdHlwZS5mZnRCYXRjaD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10LnNoYXBlWzBdLHI9dC5zaGFwZVsxXSxvPXRyKHQuc2hhcGUsXCJmbG9hdDMyXCIpLGE9dHIodC5zaGFwZSxcImZsb2F0MzJcIiksaT15bih0KS5hczJEKG4scikscz14bih0KS5hczJEKG4sciksdT0wO3U8bjt1KyspZm9yKHZhciBsPWkuc2xpY2UoW3UsMF0sWzEscl0pLGM9cy5zbGljZShbdSwwXSxbMSxyXSksaD1nbihsLGMpLHA9dGhpcy5yZWFkU3luYyh0aGlzLmZmdEltcGwoaCxlKS5kYXRhSWQpLGY9MDtmPHI7ZisrKXt2YXIgZD1DbyhwLGYpO28udmFsdWVzW3UqcitmXT1kLnJlYWwsYS52YWx1ZXNbdSpyK2ZdPWQuaW1hZ31yZXR1cm4gZ24oby50b1RlbnNvcigpLGEudG9UZW5zb3IoKSkuYXMyRChuLHIpfSx0LnByb3RvdHlwZS5mZnRJbXBsPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5hczFEKCkscj1uLnNpemU7aWYodGhpcy5pc0V4cG9uZW50T2YyKHIpKXt2YXIgbz10aGlzLmZmdFJhZGl4MihuLHIsZSkuYXMyRCh0LnNoYXBlWzBdLHQuc2hhcGVbMV0pO3JldHVybiBlJiYobz1nbih5bihvKS5kaXYoQ24ocikpLHhuKG8pLmRpdihDbihyKSkpKSxvfXZhciBhPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGk9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5sZW5ndGgvMiksbj1uZXcgRmxvYXQzMkFycmF5KHQubGVuZ3RoLzIpLHI9MDtyPHQubGVuZ3RoO3IrPTIpZVtyLzJdPXRbcl0sbltyLzJdPXRbcisxXTtyZXR1cm57cmVhbDplLGltYWc6bn19KHRoaXMuZm91cmllclRyYW5zZm9ybUJ5TWF0bXVsKGEscixlKSk7cmV0dXJuIGduKGkucmVhbCxpLmltYWcpLmFzMkQodC5zaGFwZVswXSx0LnNoYXBlWzFdKX0sdC5wcm90b3R5cGUuaXNFeHBvbmVudE9mMj1mdW5jdGlvbih0KXtyZXR1cm4gMD09KHQmdC0xKX0sdC5wcm90b3R5cGUuZmZ0UmFkaXgyPWZ1bmN0aW9uKHQsZSxuKXtpZigxPT09ZSlyZXR1cm4gdDt2YXIgcj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPWUvMixhPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1NYXRoLmNlaWwodC5sZW5ndGgvNCksbj1uZXcgRmxvYXQzMkFycmF5KGUpLHI9bmV3IEZsb2F0MzJBcnJheShlKSxvPTA7bzx0Lmxlbmd0aDtvKz00KW5bTWF0aC5mbG9vcihvLzQpXT10W29dLHJbTWF0aC5mbG9vcihvLzQpXT10W28rMV07cmV0dXJue3JlYWw6bixpbWFnOnJ9fShyKSxpPWduKGEucmVhbCxhLmltYWcpLmFzMUQoKSxzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1NYXRoLmZsb29yKHQubGVuZ3RoLzQpLG49bmV3IEZsb2F0MzJBcnJheShlKSxyPW5ldyBGbG9hdDMyQXJyYXkoZSksbz0yO288dC5sZW5ndGg7bys9NCluW01hdGguZmxvb3Ioby80KV09dFtvXSxyW01hdGguZmxvb3Ioby80KV09dFtvKzFdO3JldHVybntyZWFsOm4saW1hZzpyfX0ociksdT1nbihzLnJlYWwscy5pbWFnKS5hczFEKCk7aT10aGlzLmZmdFJhZGl4MihpLG8sbiksdT10aGlzLmZmdFJhZGl4Mih1LG8sbik7dmFyIGw9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49bmV3IEZsb2F0MzJBcnJheSh0LzIpLHI9bmV3IEZsb2F0MzJBcnJheSh0LzIpLG89MDtvPE1hdGguY2VpbCh0LzIpO28rKyl7dmFyIGE9KGU/MjotMikqTWF0aC5QSSooby90KTtuW29dPU1hdGguY29zKGEpLHJbb109TWF0aC5zaW4oYSl9cmV0dXJue3JlYWw6bixpbWFnOnJ9fShlLG4pLGM9Z24obC5yZWFsLGwuaW1hZykubXVsKHUpLGg9aS5hZGQoYykscD1pLnN1YihjKSxmPXluKGgpLmNvbmNhdCh5bihwKSksZD14bihoKS5jb25jYXQoeG4ocCkpO3JldHVybiBnbihmLGQpLmFzMUQoKX0sdC5wcm90b3R5cGUuZm91cmllclRyYW5zZm9ybUJ5TWF0bXVsPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9bmV3IEZsb2F0MzJBcnJheSgyKmUpLG89MDtvPGU7bysrKXtmb3IodmFyIGE9MCxpPTAscz0wO3M8ZTtzKyspe3ZhciB1PVJvKG8qcyxlLG4pLGw9Q28odCxzKTthKz1sLnJlYWwqdS5yZWFsLWwuaW1hZyp1LmltYWcsaSs9bC5yZWFsKnUuaW1hZytsLmltYWcqdS5yZWFsfW4mJihhLz1lLGkvPWUpLEVvKHIsYSxpLG8pfXJldHVybiByfSx0LnByb3RvdHlwZS5kZXB0aFRvU3BhY2U9ZnVuY3Rpb24odCxlLG4pe2YoXCJOSFdDXCI9PT1uLGZ1bmN0aW9uKCl7cmV0dXJuXCJPbmx5IE5IV0MgZGF0YUZvcm1hdCBzdXBwb3J0ZWQgb24gQ1BVIGZvciBkZXB0aFRvU3BhY2UuIEdvdCBcIitufSksZihlPjEsZnVuY3Rpb24oKXtyZXR1cm5cImJsb2NrU2l6ZSBzaG91bGQgYmUgPiAxIGZvciBkZXB0aFRvU3BhY2UsIGJ1dCB3YXM6IFwiK2V9KTtmb3IodmFyIHI9dC5zaGFwZVswXSxvPXQuc2hhcGVbMV0sYT10LnNoYXBlWzJdLGk9dC5zaGFwZVszXSxzPW8qZSx1PWEqZSxsPWkvKGUqZSksYz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxoPW5ldyBGbG9hdDMyQXJyYXkocipzKnUqbCkscD0wLGQ9MDtkPHI7KytkKWZvcih2YXIgdj0wO3Y8czsrK3YpZm9yKHZhciBtPU1hdGguZmxvb3Iodi9lKSxnPXYlZSx5PTA7eTx1OysreSlmb3IodmFyIHg9TWF0aC5mbG9vcih5L2UpLGI9KGcqZSt5JWUpKmwsdz0wO3c8bDsrK3cpe3ZhciBDPXcrYitpKih4K2EqKG0rbypkKSk7aFtwKytdPWNbQ119cmV0dXJuIGtuKGgsW3Iscyx1LGxdKX0sdC5wcm90b3R5cGUuYnJvYWRjYXN0ZWRCaW5hcnlPcD1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz1ybyh0LnNoYXBlLGUuc2hhcGUpLGE9dHIobyxuKSxpPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHM9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksdT1lbyh0LnNoYXBlLG8pLGw9ZW8oZS5zaGFwZSxvKSxjPWEudmFsdWVzO2lmKHUubGVuZ3RoK2wubGVuZ3RoPT09MClmb3IodmFyIGg9MDtoPGMubGVuZ3RoOysraCljW2hdPXIoaVtoJWkubGVuZ3RoXSxzW2glcy5sZW5ndGhdKTtlbHNle3ZhciBwPXRoaXMuYnVmZmVyU3luYyh0KSxmPXRoaXMuYnVmZmVyU3luYyhlKSxkPWZ1bmN0aW9uKG4pe3ZhciBvPWEuaW5kZXhUb0xvYyhuKSxoPW8uc2xpY2UoLXQucmFuayk7dS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiBoW3RdPTB9KTt2YXIgZD1wLmxvY1RvSW5kZXgoaCksdj1vLnNsaWNlKC1lLnJhbmspO2wuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gdlt0XT0wfSk7dmFyIG09Zi5sb2NUb0luZGV4KHYpO2Nbbl09cihpW2RdLHNbbV0pfTtmb3IoaD0wO2g8Yy5sZW5ndGg7KytoKWQoaCl9cmV0dXJuIGEudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUuYnJvYWRjYXN0ZWRCaW5hcnlDb21wbGV4T3A9ZnVuY3Rpb24odCxlLG4pe3ZhciByPXJvKHQuc2hhcGUsZS5zaGFwZSksbz10cihyLFwiZmxvYXQzMlwiKSxhPXRyKHIsXCJmbG9hdDMyXCIpLGk9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscz10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSx1PWVvKHQuc2hhcGUsciksbD1lbyhlLnNoYXBlLHIpLGM9by52YWx1ZXMsaD1hLnZhbHVlcztpZih1Lmxlbmd0aCtsLmxlbmd0aD09PTApZm9yKHZhciBwPTA7cDxjLmxlbmd0aDtwKyspe3ZhciBmPXAlaS5sZW5ndGgsZD1wJXMubGVuZ3RoLHY9bihpWzIqZl0saVsyKmYrMV0sc1syKmRdLHNbMipkKzFdKTtjW3BdPXYucmVhbCxoW3BdPXYuaW1hZ31lbHNle3ZhciBtPXRoaXMuYnVmZmVyU3luYyh0aGlzLmRhdGEuZ2V0KHQuZGF0YUlkKS5jb21wbGV4VGVuc29ycy5yZWFsKSxnPXRoaXMuYnVmZmVyU3luYyh0aGlzLmRhdGEuZ2V0KGUuZGF0YUlkKS5jb21wbGV4VGVuc29ycy5yZWFsKSx5PWZ1bmN0aW9uKHIpe3ZhciBhPW8uaW5kZXhUb0xvYyhyKSxwPWEuc2xpY2UoLXQucmFuayk7dS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiBwW3RdPTB9KTt2YXIgZj1tLmxvY1RvSW5kZXgocCksZD1hLnNsaWNlKC1lLnJhbmspO2wuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZFt0XT0wfSk7dmFyIHY9Zy5sb2NUb0luZGV4KGQpLHk9bihpWzIqZl0saVsyKmYrMV0sc1syKnZdLHNbMip2KzFdKTtjW3JdPXkucmVhbCxoW3JdPXkuaW1hZ307Zm9yKHA9MDtwPGMubGVuZ3RoO3ArKyl5KHApfXJldHVybiB0aGlzLmNvbXBsZXgoby50b1RlbnNvcigpLGEudG9UZW5zb3IoKSl9LHQucHJvdG90eXBlLnNwbGl0PWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gTm8odCxlLG4pfSx0LnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7fSx0LnByb3RvdHlwZS5mbG9hdFByZWNpc2lvbj1mdW5jdGlvbigpe3JldHVybiAzMn0sdC5wcm90b3R5cGUuZXBzaWxvbj1mdW5jdGlvbigpe3JldHVybiAxZS03fSx0LnByb3RvdHlwZS5jcm9wQW5kUmVzaXplPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtmb3IodmFyIGk9dC5zaGFwZSxzPWlbMF0sdT1pWzFdLGw9aVsyXSxjPWlbM10saD1lLnNoYXBlWzBdLHA9clswXSxmPXJbMV0sZD10cihbaCxwLGYsY10sdC5kdHlwZSksdj10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxtPXRoaXMucmVhZFN5bmMobi5kYXRhSWQpLGc9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkseT10LnN0cmlkZXMseD1kLnN0cmlkZXMsYj0wO2I8aDtiKyspe3ZhciB3PTQqYixDPXZbd10sRT12W3crMV0sUj12W3crMl0sST12W3crM10saz1tW2JdO2lmKCEoaz49cykpZm9yKHZhciBOPXA+MT8oUi1DKSoodS0xKS8ocC0xKTowLFM9Zj4xPyhJLUUpKihsLTEpLyhmLTEpOjAsQT0wO0E8cDtBKyspe3ZhciBUPXA+MT9DKih1LTEpK0EqTjouNSooQytSKSoodS0xKTtpZihUPDB8fFQ+dS0xKWZvcih2YXIgRD0wO0Q8ZjtEKyspZm9yKHZhciBfPTA7XzxjO18rKyl7dmFyIE89XytEKnhbMl0rQSp4WzFdK2IqeFswXTtkLnZhbHVlc1tPXT1hfWVsc2UgaWYoXCJiaWxpbmVhclwiPT09byl7dmFyIEY9TWF0aC5mbG9vcihUKSxNPU1hdGguY2VpbChUKSxCPVQtRjtmb3IoRD0wO0Q8ZjtEKyspe2lmKChxPWY+MT9FKihsLTEpK0QqUzouNSooRStJKSoobC0xKSk8MHx8cT5sLTEpZm9yKF89MDtfPGM7XysrKXtPPV8rRCp4WzJdK0EqeFsxXStiKnhbMF07ZC52YWx1ZXNbT109YX1lbHNle3ZhciBQPU1hdGguZmxvb3IocSksTD1NYXRoLmNlaWwocSksVz1xLVA7Zm9yKF89MDtfPGM7XysrKXt2YXIgVT1nW089XytQKnlbMl0rRip5WzFdK2sqeVswXV0sVj1nW089XytMKnlbMl0rRip5WzFdK2sqeVswXV0sej1nW089XytQKnlbMl0rTSp5WzFdK2sqeVswXV0sRz1VKyhWLVUpKlcsSD16KyhnW089XytMKnlbMl0rTSp5WzFdK2sqeVswXV0teikqVztPPV8rRCp4WzJdK0EqeFsxXStiKnhbMF0sZC52YWx1ZXNbT109RysoSC1HKSpCfX19fWVsc2UgZm9yKEQ9MDtEPGY7KytEKXt2YXIgcTtpZigocT1mPjE/RSoobC0xKStEKlM6LjUqKEUrSSkqKGwtMSkpPDB8fHE+bC0xKWZvcihfPTA7XzxjO18rKyl7Tz1fK0QqeFsyXStBKnhbMV0rYip4WzBdO2QudmFsdWVzW09dPWF9ZWxzZXt2YXIgJD1NYXRoLnJvdW5kKHEpLEs9TWF0aC5yb3VuZChUKTtmb3IoXz0wO188YztfKyspe3ZhciBqPV8rJCp5WzJdK0sqeVsxXStrKnlbMF0sWD1fK0QqeFsyXStBKnhbMV0rYip4WzBdO2QudmFsdWVzW1hdPWdbal19fX19fXJldHVybiBkLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLnNwYXJzZVRvRGVuc2U9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89UHIoMCx0LG4pLGE9by5zbGljZVJhbmssaT1vLm51bVVwZGF0ZXMscz1vLnNsaWNlU2l6ZSx1PW8uc3RyaWRlcyxsPW8ub3V0cHV0U2l6ZTtyZXR1cm4gdGhpcy5zY2F0dGVyKHQsZSxuLGwscyxpLGEsdSxyLCExKX0sdC5wcm90b3R5cGUuZ2F0aGVyTkQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnNoYXBlLHI9bltuLmxlbmd0aC0xXSxvPU9yKHQsZSksYT1vWzBdLGk9b1sxXSxzPW9bMl0sdT1vWzNdO2lmKDA9PT1pKXJldHVybiBibihbXSxhLHQuZHR5cGUpO2Zvcih2YXIgbD1uZXcgaXQoW2ksc10sdC5kdHlwZSksYz10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxoPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHA9MDtwPGk7cCsrKXtmb3IodmFyIGY9W10sZD0wLHY9MDt2PHI7disrKXt2YXIgbT1jW3Aqcit2XTtkKz1tKnVbdl0sZi5wdXNoKG0pfWlmKGQ8MHx8ZD49dC5zaXplL3MpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbmRpY2VzOiBcIitmK1wiIGRvZXMgbm90IGluZGV4IGludG8gXCIrdC5zaGFwZSk7Zm9yKHZhciBnPTA7ZzxzO2crKylsLnZhbHVlc1twKnMrZ109aFtkKnMrZ119cmV0dXJuIGwudG9UZW5zb3IoKS5yZXNoYXBlKGEpfSx0LnByb3RvdHlwZS5zY2F0dGVyTkQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPVByKDAsdCxuKSxvPXIuc2xpY2VSYW5rLGE9ci5udW1VcGRhdGVzLGk9ci5zbGljZVNpemUscz1yLnN0cmlkZXMsdT1yLm91dHB1dFNpemUsbD1DbigwKTtyZXR1cm4gdGhpcy5zY2F0dGVyKHQsZSxuLHUsaSxhLG8scyxsLCEwKX0sdC5wcm90b3R5cGUuZmlsbD1mdW5jdGlvbih0LGUsbil7dmFyIHI9UyhuPW58fEwoZSksZyh0KSk7cmV0dXJuIHIuZmlsbChlKSxjdC5tYWtlKHQse3ZhbHVlczpyfSxuKX0sdC5wcm90b3R5cGUub25lc0xpa2U9ZnVuY3Rpb24odCl7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwib25lc0xpa2UgaXMgbm90IHN1cHBvcnRlZCBmb3Igc3RyaW5nIHRlbnNvcnNcIik7cmV0dXJuIHRoaXMuZmlsbCh0LnNoYXBlLDEsdC5kdHlwZSl9LHQucHJvdG90eXBlLnplcm9zTGlrZT1mdW5jdGlvbih0KXt2YXIgZT1TKHQuZHR5cGUsZyh0LnNoYXBlKSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9LHQuZHR5cGUpfSx0LnByb3RvdHlwZS5saW5zcGFjZT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHhvKHQsZSxuKX0sdC5wcm90b3R5cGUuc2NhdHRlcj1mdW5jdGlvbih0LGUsbixyLG8sYSxpLHMsdSxsKXt2YXIgYz1bci9vLG9dLGg9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscD10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKTtpZigwPT09cilyZXR1cm4gYm4oW10sbixlLmR0eXBlKTt2YXIgZj1uZXcgaXQoYyxlLmR0eXBlKTtmLnZhbHVlcy5maWxsKHRoaXMucmVhZFN5bmModS5kYXRhSWQpWzBdKTtmb3IodmFyIGQ9MDtkPGE7ZCsrKXtmb3IodmFyIHY9W10sbT0wLGc9MDtnPGk7ZysrKXt2YXIgeT1oW2QqaStnXTt2LnB1c2goeSksbSs9eSpzW2ddfWlmKG08MHx8bT49ci9vKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgaW5kaWNlczogXCIrditcIiBkb2VzIG5vdCBpbmRleCBpbnRvIFwiK24pO2Zvcih2YXIgeD0wO3g8bzt4KyspbD9mLnZhbHVlc1ttKm8reF0rPXBbZCpvK3hdOmYudmFsdWVzW20qbyt4XT0wPT09ZS5yYW5rP3BbMF06cFtkKm8reF19cmV0dXJuIGYudG9UZW5zb3IoKS5yZXNoYXBlKG4pfSx0fSgpO1N0LnJlZ2lzdGVyQmFja2VuZChcImNwdVwiLGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBwaH0sMSk7dmFyIGZoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5wcm90b3R5cGUuZmV0Y2g9ZnVuY3Rpb24odCxlKXtyZXR1cm4gZmV0Y2godCxlKX0sdC5wcm90b3R5cGUubm93PWZ1bmN0aW9uKCl7cmV0dXJuIHBlcmZvcm1hbmNlLm5vdygpfSx0LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24odCxlKXtpZihcInV0Zi04XCIhPT1lJiZcInV0ZjhcIiE9PWUpdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIGVuY29kZXIgb25seSBzdXBwb3J0cyB1dGYtOCwgYnV0IGdvdCBcIitlKTtyZXR1cm4gbnVsbD09dGhpcy50ZXh0RW5jb2RlciYmKHRoaXMudGV4dEVuY29kZXI9bmV3IFRleHRFbmNvZGVyKSx0aGlzLnRleHRFbmNvZGVyLmVuY29kZSh0KX0sdC5wcm90b3R5cGUuZGVjb2RlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyBUZXh0RGVjb2RlcihlKS5kZWNvZGUodCl9LHR9KCk7aS5nZXQoXCJJU19CUk9XU0VSXCIpJiZpLnNldFBsYXRmb3JtKFwiYnJvd3NlclwiLG5ldyBmaCk7dmFyIGRoLHZoPWZ1bmN0aW9uKCl7cmV0dXJuIHJlcXVpcmUoXCJub2RlLWZldGNoXCIpfSxtaD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLnV0aWw9cmVxdWlyZShcInV0aWxcIiksdGhpcy50ZXh0RW5jb2Rlcj1uZXcgdGhpcy51dGlsLlRleHRFbmNvZGVyfXJldHVybiB0LnByb3RvdHlwZS5mZXRjaD1mdW5jdGlvbih0LGUpe3JldHVybiBudWxsIT1pLmdsb2JhbC5mZXRjaD9pLmdsb2JhbC5mZXRjaCh0LGUpOihudWxsPT1kaCYmKGRoPXZoKCkpLGRoKHQsZSkpfSx0LnByb3RvdHlwZS5ub3c9ZnVuY3Rpb24oKXt2YXIgdD1wcm9jZXNzLmhydGltZSgpO3JldHVybiAxZTMqdFswXSt0WzFdLzFlNn0sdC5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKHQsZSl7aWYoXCJ1dGYtOFwiIT09ZSYmXCJ1dGY4XCIhPT1lKXRocm93IG5ldyBFcnJvcihcIk5vZGUgYnVpbHQtaW4gZW5jb2RlciBvbmx5IHN1cHBvcnRzIHV0Zi04LCBidXQgZ290IFwiK2UpO3JldHVybiB0aGlzLnRleHRFbmNvZGVyLmVuY29kZSh0KX0sdC5wcm90b3R5cGUuZGVjb2RlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIDA9PT10Lmxlbmd0aD9cIlwiOm5ldyB0aGlzLnV0aWwuVGV4dERlY29kZXIoZSkuZGVjb2RlKHQpfSx0fSgpO2kuZ2V0KFwiSVNfTk9ERVwiKSYmaS5zZXRQbGF0Zm9ybShcIm5vZGVcIixuZXcgbWgpO3ZhciBnaD17ZmxvYXQzMjo0LGludDMyOjQsdWludDE2OjIsdWludDg6MSxib29sOjF9LHloPTQ7ZnVuY3Rpb24geGgodCxlKXtmb3IodmFyIG49e30scj0wLG89ZnVuY3Rpb24oZSl7dmFyIG89ZS5uYW1lLGE9ZS5kdHlwZSxpPWUuc2hhcGUscz1nKGkpLHU9dm9pZCAwO2lmKFwicXVhbnRpemF0aW9uXCJpbiBlKXt2YXIgbD1lLnF1YW50aXphdGlvbjtpZihcInVpbnQ4XCIhPT1sLmR0eXBlJiZcInVpbnQxNlwiIT09bC5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJXZWlnaHQgXCIrZS5uYW1lK1wiIGhhcyB1bmtub3duIHF1YW50aXphdGlvbiBkdHlwZSBcIitsLmR0eXBlK1wiLiBTdXBwb3J0ZWQgcXVhbnRpemF0aW9uIGR0eXBlcyBhcmU6ICd1aW50OCcgYW5kICd1aW50MTYnLlwiKTt2YXIgYz1naFtsLmR0eXBlXSxoPXQuc2xpY2UocixyK3MqYykscD1cInVpbnQ4XCI9PT1sLmR0eXBlP25ldyBVaW50OEFycmF5KGgpOm5ldyBVaW50MTZBcnJheShoKTtpZihcImZsb2F0MzJcIj09PWEpdT1GbG9hdDMyQXJyYXkuZnJvbShwLGZ1bmN0aW9uKHQpe3JldHVybiB0Kmwuc2NhbGUrbC5taW59KTtlbHNle2lmKFwiaW50MzJcIiE9PWEpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZHR5cGUgaW4gd2VpZ2h0ICdcIitvK1wiJzogXCIrYSk7dT1JbnQzMkFycmF5LmZyb20ocCxmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5yb3VuZCh0Kmwuc2NhbGUrbC5taW4pfSl9cis9cypjfWVsc2UgaWYoXCJzdHJpbmdcIj09PWEpe3ZhciBmPWcoZS5zaGFwZSk7dT1bXTtmb3IodmFyIGQ9MDtkPGY7ZCsrKXt2YXIgdj1uZXcgVWludDMyQXJyYXkodC5zbGljZShyLHIreWgpKVswXTtyKz15aDt2YXIgbT1uZXcgVWludDhBcnJheSh0LnNsaWNlKHIscit2KSk7dS5wdXNoKG0pLHIrPXZ9fWVsc2V7dmFyIHk9Z2hbYV07aD10LnNsaWNlKHIscitzKnkpO2lmKFwiZmxvYXQzMlwiPT09YSl1PW5ldyBGbG9hdDMyQXJyYXkoaCk7ZWxzZSBpZihcImludDMyXCI9PT1hKXU9bmV3IEludDMyQXJyYXkoaCk7ZWxzZXtpZihcImJvb2xcIiE9PWEpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZHR5cGUgaW4gd2VpZ2h0ICdcIitvK1wiJzogXCIrYSk7dT1uZXcgVWludDhBcnJheShoKX1yKz1zKnl9bltvXT1ibih1LGksYSl9LGE9MCxpPWU7YTxpLmxlbmd0aDthKyspe28oaVthXSl9cmV0dXJuIG59ZnVuY3Rpb24gYmgodCl7aWYobnVsbD09PXQpdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbnB1dCB2YWx1ZTogXCIrSlNPTi5zdHJpbmdpZnkodCkpO3ZhciBlPTAsbj1bXTt0LmZvckVhY2goZnVuY3Rpb24odCl7aWYoZSs9dC5ieXRlTGVuZ3RoLG4ucHVzaCh0LmJ5dGVMZW5ndGg9PT10LmJ1ZmZlci5ieXRlTGVuZ3RoP3Q6bmV3IHQuY29uc3RydWN0b3IodCkpLCEodCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheXx8dCBpbnN0YW5jZW9mIEludDMyQXJyYXl8fHQgaW5zdGFuY2VvZiBVaW50OEFycmF5KSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBUeXBlZEFycmF5IHN1YnR5cGU6IFwiK3QuY29uc3RydWN0b3IubmFtZSl9KTt2YXIgcj1uZXcgVWludDhBcnJheShlKSxvPTA7cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbih0KXtyLnNldChuZXcgVWludDhBcnJheSh0LmJ1ZmZlciksbyksbys9dC5ieXRlTGVuZ3RofSksci5idWZmZXJ9dmFyIHdoPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBCdWZmZXImJihcInVuZGVmaW5lZFwiPT10eXBlb2YgQmxvYnx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGF0b2J8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBidG9hKTtmdW5jdGlvbiBDaCh0KXtyZXR1cm4gd2g/QnVmZmVyLmJ5dGVMZW5ndGgodCk6bmV3IEJsb2IoW3RdKS5zaXplfWZ1bmN0aW9uIEVoKHQpe3ZhciBlPTA7dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UrPXQuYnl0ZUxlbmd0aH0pO3ZhciBuPW5ldyBVaW50OEFycmF5KGUpLHI9MDtyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe24uc2V0KG5ldyBVaW50OEFycmF5KHQpLHIpLHIrPXQuYnl0ZUxlbmd0aH0pLG4uYnVmZmVyfWZ1bmN0aW9uIFJoKHQpe2Zvcih0PXQudHJpbSgpO3QuZW5kc1dpdGgoXCIvXCIpOyl0PXQuc2xpY2UoMCx0Lmxlbmd0aC0xKTt2YXIgZT10LnNwbGl0KFwiL1wiKTtyZXR1cm4gZVtlLmxlbmd0aC0xXX1mdW5jdGlvbiBJaCh0KXtpZih0Lm1vZGVsVG9wb2xvZ3kgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil0aHJvdyBuZXcgRXJyb3IoXCJFeHBlY3RlZCBKU09OIG1vZGVsIHRvcG9sb2d5LCByZWNlaXZlZCBBcnJheUJ1ZmZlci5cIik7cmV0dXJue2RhdGVTYXZlZDpuZXcgRGF0ZSxtb2RlbFRvcG9sb2d5VHlwZTpcIkpTT05cIixtb2RlbFRvcG9sb2d5Qnl0ZXM6bnVsbD09dC5tb2RlbFRvcG9sb2d5PzA6Q2goSlNPTi5zdHJpbmdpZnkodC5tb2RlbFRvcG9sb2d5KSksd2VpZ2h0U3BlY3NCeXRlczpudWxsPT10LndlaWdodFNwZWNzPzA6Q2goSlNPTi5zdHJpbmdpZnkodC53ZWlnaHRTcGVjcykpLHdlaWdodERhdGFCeXRlczpudWxsPT10LndlaWdodERhdGE/MDp0LndlaWdodERhdGEuYnl0ZUxlbmd0aH19dmFyIGtoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuc2F2ZVJvdXRlcnM9W10sdGhpcy5sb2FkUm91dGVycz1bXX1yZXR1cm4gdC5nZXRJbnN0YW5jZT1mdW5jdGlvbigpe3JldHVybiBudWxsPT10Lmluc3RhbmNlJiYodC5pbnN0YW5jZT1uZXcgdCksdC5pbnN0YW5jZX0sdC5yZWdpc3RlclNhdmVSb3V0ZXI9ZnVuY3Rpb24oZSl7dC5nZXRJbnN0YW5jZSgpLnNhdmVSb3V0ZXJzLnB1c2goZSl9LHQucmVnaXN0ZXJMb2FkUm91dGVyPWZ1bmN0aW9uKGUpe3QuZ2V0SW5zdGFuY2UoKS5sb2FkUm91dGVycy5wdXNoKGUpfSx0LmdldFNhdmVIYW5kbGVycz1mdW5jdGlvbihlKXtyZXR1cm4gdC5nZXRIYW5kbGVycyhlLFwic2F2ZVwiKX0sdC5nZXRMb2FkSGFuZGxlcnM9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdC5nZXRIYW5kbGVycyhlLFwibG9hZFwiLG4pfSx0LmdldEhhbmRsZXJzPWZ1bmN0aW9uKGUsbixyKXt2YXIgbz1bXTtyZXR1cm4oXCJsb2FkXCI9PT1uP3QuZ2V0SW5zdGFuY2UoKS5sb2FkUm91dGVyczp0LmdldEluc3RhbmNlKCkuc2F2ZVJvdXRlcnMpLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIG49dChlLHIpO251bGwhPT1uJiZvLnB1c2gobil9KSxvfSx0fSgpLE5oPVwiOi8vXCIsU2g9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy5tYW5hZ2Vycz17fX1yZXR1cm4gdC5nZXRJbnN0YW5jZT1mdW5jdGlvbigpe3JldHVybiBudWxsPT10Lmluc3RhbmNlJiYodC5pbnN0YW5jZT1uZXcgdCksdC5pbnN0YW5jZX0sdC5yZWdpc3Rlck1hbmFnZXI9ZnVuY3Rpb24oZSxuKXtmKG51bGwhPWUsZnVuY3Rpb24oKXtyZXR1cm5cInNjaGVtZSBtdXN0IG5vdCBiZSB1bmRlZmluZWQgb3IgbnVsbC5cIn0pLGUuZW5kc1dpdGgoTmgpJiYoZT1lLnNsaWNlKDAsZS5pbmRleE9mKE5oKSkpLGYoZS5sZW5ndGg+MCxmdW5jdGlvbigpe3JldHVyblwic2NoZW1lIG11c3Qgbm90IGJlIGFuIGVtcHR5IHN0cmluZy5cIn0pO3ZhciByPXQuZ2V0SW5zdGFuY2UoKTtmKG51bGw9PXIubWFuYWdlcnNbZV0sZnVuY3Rpb24oKXtyZXR1cm5cIkEgbW9kZWwgc3RvcmUgbWFuYWdlciBpcyBhbHJlYWR5IHJlZ2lzdGVyZWQgZm9yIHNjaGVtZSAnXCIrZStcIicuXCJ9KSxyLm1hbmFnZXJzW2VdPW59LHQuZ2V0TWFuYWdlcj1mdW5jdGlvbih0KXt2YXIgZT10aGlzLmdldEluc3RhbmNlKCkubWFuYWdlcnNbdF07aWYobnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2RlbCBtYW5hZ2VyIGZvciBzY2hlbWUgJ1wiK3QrXCInXCIpO3JldHVybiBlfSx0LmdldFNjaGVtZXM9ZnVuY3Rpb24oKXtyZXR1cm4gT2JqZWN0LmtleXModGhpcy5nZXRJbnN0YW5jZSgpLm1hbmFnZXJzKX0sdH0oKTtmdW5jdGlvbiBBaCh0KXtpZigtMT09PXQuaW5kZXhPZihOaCkpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHVybCBzdHJpbmcgcHJvdmlkZWQgZG9lcyBub3QgY29udGFpbiBhIHNjaGVtZS4gU3VwcG9ydGVkIHNjaGVtZXMgYXJlOiBcIitTaC5nZXRTY2hlbWVzKCkuam9pbihcIixcIikpO3JldHVybntzY2hlbWU6dC5zcGxpdChOaClbMF0scGF0aDp0LnNwbGl0KE5oKVsxXX19ZnVuY3Rpb24gVGgodCxlLG8pe3JldHVybiB2b2lkIDA9PT1vJiYobz0hMSksbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgbixhLGkscyx1LGwsYyxoLHA7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOnJldHVybiBmKHQhPT1lLGZ1bmN0aW9uKCl7cmV0dXJuXCJPbGQgcGF0aCBhbmQgbmV3IHBhdGggYXJlIHRoZSBzYW1lOiAnXCIrdCtcIidcIn0pLGYoKG49a2guZ2V0TG9hZEhhbmRsZXJzKHQpKS5sZW5ndGg+MCxmdW5jdGlvbigpe3JldHVyblwiQ29weWluZyBmYWlsZWQgYmVjYXVzZSBubyBsb2FkIGhhbmRsZXIgaXMgZm91bmQgZm9yIHNvdXJjZSBVUkwgXCIrdCtcIi5cIn0pLGYobi5sZW5ndGg8MixmdW5jdGlvbigpe3JldHVyblwiQ29weWluZyBmYWlsZWQgYmVjYXVzZSBtb3JlIHRoYW4gb25lIChcIituLmxlbmd0aCtcIikgbG9hZCBoYW5kbGVycyBmb3Igc291cmNlIFVSTCBcIit0K1wiLlwifSksYT1uWzBdLGYoKGk9a2guZ2V0U2F2ZUhhbmRsZXJzKGUpKS5sZW5ndGg+MCxmdW5jdGlvbigpe3JldHVyblwiQ29weWluZyBmYWlsZWQgYmVjYXVzZSBubyBzYXZlIGhhbmRsZXIgaXMgZm91bmQgZm9yIGRlc3RpbmF0aW9uIFVSTCBcIitlK1wiLlwifSksZihpLmxlbmd0aDwyLGZ1bmN0aW9uKCl7cmV0dXJuXCJDb3B5aW5nIGZhaWxlZCBiZWNhdXNlIG1vcmUgdGhhbiBvbmUgKFwiK24ubGVuZ3RoK1wiKSBzYXZlIGhhbmRsZXJzIGZvciBkZXN0aW5hdGlvbiBVUkwgXCIrZStcIi5cIn0pLHM9aVswXSx1PUFoKHQpLnNjaGVtZSxsPUFoKHQpLnBhdGgsYz11PT09QWgodCkuc2NoZW1lLFs0LGEubG9hZCgpXTtjYXNlIDE6cmV0dXJuIGg9ci5zZW50KCksbyYmYz9bNCxTaC5nZXRNYW5hZ2VyKHUpLnJlbW92ZU1vZGVsKGwpXTpbMywzXTtjYXNlIDI6ci5zZW50KCksci5sYWJlbD0zO2Nhc2UgMzpyZXR1cm5bNCxzLnNhdmUoaCldO2Nhc2UgNDpyZXR1cm4gcD1yLnNlbnQoKSwhb3x8Yz9bMyw2XTpbNCxTaC5nZXRNYW5hZ2VyKHUpLnJlbW92ZU1vZGVsKGwpXTtjYXNlIDU6ci5zZW50KCksci5sYWJlbD02O2Nhc2UgNjpyZXR1cm5bMixwLm1vZGVsQXJ0aWZhY3RzSW5mb119fSl9KX12YXIgRGg9XCJtb2RlbHNfc3RvcmVcIixfaD1cIm1vZGVsX2luZm9fc3RvcmVcIjtmdW5jdGlvbiBPaCgpe2lmKCFpLmdldEJvb2woXCJJU19CUk9XU0VSXCIpKXRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBvYnRhaW4gSW5kZXhlZERCIGZhY3RvcnkgYmVjYXVzZSB0aGUgY3VycmVudCBlbnZpcm9ubWVudGlzIG5vdCBhIHdlYiBicm93c2VyLlwiKTt2YXIgdD13aW5kb3csZT10LmluZGV4ZWREQnx8dC5tb3pJbmRleGVkREJ8fHQud2Via2l0SW5kZXhlZERCfHx0Lm1zSW5kZXhlZERCfHx0LnNoaW1JbmRleGVkREI7aWYobnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY3VycmVudCBicm93c2VyIGRvZXMgbm90IGFwcGVhciB0byBzdXBwb3J0IEluZGV4ZWREQi5cIik7cmV0dXJuIGV9ZnVuY3Rpb24gRmgodCl7dmFyIGU9dC5yZXN1bHQ7ZS5jcmVhdGVPYmplY3RTdG9yZShEaCx7a2V5UGF0aDpcIm1vZGVsUGF0aFwifSksZS5jcmVhdGVPYmplY3RTdG9yZShfaCx7a2V5UGF0aDpcIm1vZGVsUGF0aFwifSl9dmFyIE1oPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtpZih0aGlzLmluZGV4ZWREQj1PaCgpLG51bGw9PXR8fCF0KXRocm93IG5ldyBFcnJvcihcIkZvciBJbmRleGVkREIsIG1vZGVsUGF0aCBtdXN0IG5vdCBiZSBudWxsLCB1bmRlZmluZWQgb3IgZW1wdHkuXCIpO3RoaXMubW9kZWxQYXRoPXR9cmV0dXJuIHQucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihlKXtpZih0Lm1vZGVsVG9wb2xvZ3kgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyTG9jYWxTdG9yYWdlLnNhdmUoKSBkb2VzIG5vdCBzdXBwb3J0IHNhdmluZyBtb2RlbCB0b3BvbG9neSBpbiBiaW5hcnkgZm9ybWF0cyB5ZXQuXCIpO3JldHVyblsyLHRoaXMuZGF0YWJhc2VBY3Rpb24odGhpcy5tb2RlbFBhdGgsdCldfSl9KX0sdC5wcm90b3R5cGUubG9hZD1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24odCl7cmV0dXJuWzIsdGhpcy5kYXRhYmFzZUFjdGlvbih0aGlzLm1vZGVsUGF0aCldfSl9KX0sdC5wcm90b3R5cGUuZGF0YWJhc2VBY3Rpb249ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0LHIpe3ZhciBvPW4uaW5kZXhlZERCLm9wZW4oXCJ0ZW5zb3JmbG93anNcIiwxKTtvLm9udXBncmFkZW5lZWRlZD1mdW5jdGlvbigpe3JldHVybiBGaChvKX0sby5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt2YXIgYT1vLnJlc3VsdDtpZihudWxsPT1lKXt2YXIgaT1hLnRyYW5zYWN0aW9uKERoLFwicmVhZG9ubHlcIikscz1pLm9iamVjdFN0b3JlKERoKS5nZXQobi5tb2RlbFBhdGgpO3Mub25zdWNjZXNzPWZ1bmN0aW9uKCl7aWYobnVsbD09cy5yZXN1bHQpcmV0dXJuIGEuY2xvc2UoKSxyKG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIHdpdGggcGF0aCAnXCIrbi5tb2RlbFBhdGgrXCInIGluIEluZGV4ZWREQi5cIikpO3Qocy5yZXN1bHQubW9kZWxBcnRpZmFjdHMpfSxzLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIGEuY2xvc2UoKSxyKHMuZXJyb3IpfSxpLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5jbG9zZSgpfX1lbHNle3ZhciB1LGw9SWgoZSksYz1hLnRyYW5zYWN0aW9uKF9oLFwicmVhZHdyaXRlXCIpLGg9Yy5vYmplY3RTdG9yZShfaCkscD1oLnB1dCh7bW9kZWxQYXRoOm4ubW9kZWxQYXRoLG1vZGVsQXJ0aWZhY3RzSW5mbzpsfSk7cC5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt2YXIgbz0odT1hLnRyYW5zYWN0aW9uKERoLFwicmVhZHdyaXRlXCIpKS5vYmplY3RTdG9yZShEaCkucHV0KHttb2RlbFBhdGg6bi5tb2RlbFBhdGgsbW9kZWxBcnRpZmFjdHM6ZSxtb2RlbEFydGlmYWN0c0luZm86bH0pO28ub25zdWNjZXNzPWZ1bmN0aW9uKCl7cmV0dXJuIHQoe21vZGVsQXJ0aWZhY3RzSW5mbzpsfSl9LG8ub25lcnJvcj1mdW5jdGlvbih0KXt2YXIgZT0oaD1jLm9iamVjdFN0b3JlKF9oKSkuZGVsZXRlKG4ubW9kZWxQYXRoKTtlLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3JldHVybiBhLmNsb3NlKCkscihvLmVycm9yKX0sZS5vbmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiBhLmNsb3NlKCkscihvLmVycm9yKX19fSxwLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIGEuY2xvc2UoKSxyKHAuZXJyb3IpfSxjLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtudWxsPT11P2EuY2xvc2UoKTp1Lm9uY29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5jbG9zZSgpfX19fSxvLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHIoby5lcnJvcil9fSl9LHQuVVJMX1NDSEVNRT1cImluZGV4ZWRkYjovL1wiLHR9KCksQmg9ZnVuY3Rpb24odCl7cmV0dXJuIGkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikmJiFBcnJheS5pc0FycmF5KHQpJiZ0LnN0YXJ0c1dpdGgoTWguVVJMX1NDSEVNRSk/KGU9dC5zbGljZShNaC5VUkxfU0NIRU1FLmxlbmd0aCksbmV3IE1oKGUpKTpudWxsO3ZhciBlfTtraC5yZWdpc3RlclNhdmVSb3V0ZXIoQmgpLGtoLnJlZ2lzdGVyTG9hZFJvdXRlcihCaCk7dmFyIFBoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMuaW5kZXhlZERCPU9oKCl9cmV0dXJuIHQucHJvdG90eXBlLmxpc3RNb2RlbHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybiByKHRoaXMsZnVuY3Rpb24oZSl7cmV0dXJuWzIsbmV3IFByb21pc2UoZnVuY3Rpb24oZSxuKXt2YXIgcj10LmluZGV4ZWREQi5vcGVuKFwidGVuc29yZmxvd2pzXCIsMSk7ci5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gRmgocil9LHIub25zdWNjZXNzPWZ1bmN0aW9uKCl7dmFyIHQ9ci5yZXN1bHQsbz10LnRyYW5zYWN0aW9uKF9oLFwicmVhZG9ubHlcIiksYT1vLm9iamVjdFN0b3JlKF9oKS5nZXRBbGwoKTthLm9uc3VjY2Vzcz1mdW5jdGlvbigpe2Zvcih2YXIgdD17fSxuPTAscj1hLnJlc3VsdDtuPHIubGVuZ3RoO24rKyl7dmFyIG89cltuXTt0W28ubW9kZWxQYXRoXT1vLm1vZGVsQXJ0aWZhY3RzSW5mb31lKHQpfSxhLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIHQuY2xvc2UoKSxuKGEuZXJyb3IpfSxvLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gdC5jbG9zZSgpfX0sci5vbmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiBuKHIuZXJyb3IpfX0pXX0pfSl9LHQucHJvdG90eXBlLnJlbW92ZU1vZGVsPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihuKXt2YXIgcjtyZXR1cm4gdD0ocj10KS5zdGFydHNXaXRoKE1oLlVSTF9TQ0hFTUUpP3Iuc2xpY2UoTWguVVJMX1NDSEVNRS5sZW5ndGgpOnIsWzIsbmV3IFByb21pc2UoZnVuY3Rpb24obixyKXt2YXIgbz1lLmluZGV4ZWREQi5vcGVuKFwidGVuc29yZmxvd2pzXCIsMSk7by5vbnVwZ3JhZGVuZWVkZWQ9ZnVuY3Rpb24oKXtyZXR1cm4gRmgobyl9LG8ub25zdWNjZXNzPWZ1bmN0aW9uKCl7dmFyIGUsYT1vLnJlc3VsdCxpPWEudHJhbnNhY3Rpb24oX2gsXCJyZWFkd3JpdGVcIikscz1pLm9iamVjdFN0b3JlKF9oKSx1PXMuZ2V0KHQpO3Uub25zdWNjZXNzPWZ1bmN0aW9uKCl7aWYobnVsbD09dS5yZXN1bHQpcmV0dXJuIGEuY2xvc2UoKSxyKG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIHdpdGggcGF0aCAnXCIrdCtcIicgaW4gSW5kZXhlZERCLlwiKSk7dmFyIG89cy5kZWxldGUodCksaT1mdW5jdGlvbigpe3ZhciBvPShlPWEudHJhbnNhY3Rpb24oRGgsXCJyZWFkd3JpdGVcIikpLm9iamVjdFN0b3JlKERoKS5kZWxldGUodCk7by5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXtyZXR1cm4gbih1LnJlc3VsdC5tb2RlbEFydGlmYWN0c0luZm8pfSxvLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHIodS5lcnJvcil9fTtvLm9uc3VjY2Vzcz1pLG8ub25lcnJvcj1mdW5jdGlvbih0KXtyZXR1cm4gaSgpLGEuY2xvc2UoKSxyKHUuZXJyb3IpfX0sdS5vbmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiBhLmNsb3NlKCkscih1LmVycm9yKX0saS5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7bnVsbD09ZT9hLmNsb3NlKCk6ZS5vbmNvbXBsZXRlPWZ1bmN0aW9uKCl7cmV0dXJuIGEuY2xvc2UoKX19fSxvLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIHIoby5lcnJvcil9fSldfSl9KX0sdH0oKTtpZihpLmdldEJvb2woXCJJU19CUk9XU0VSXCIpKXRyeXtTaC5yZWdpc3Rlck1hbmFnZXIoTWguVVJMX1NDSEVNRSxuZXcgUGgpfWNhdGNoKHQpe312YXIgTGg9XCIvXCIsV2g9XCJ0ZW5zb3JmbG93anNfbW9kZWxzXCIsVWg9XCJpbmZvXCIsVmg9XCJtb2RlbF90b3BvbG9neVwiLHpoPVwid2VpZ2h0X3NwZWNzXCIsR2g9XCJ3ZWlnaHRfZGF0YVwiLEhoPVwibW9kZWxfbWV0YWRhdGFcIjtmdW5jdGlvbiBxaCh0KXtyZXR1cm57aW5mbzpbV2gsdCxVaF0uam9pbihMaCksdG9wb2xvZ3k6W1doLHQsVmhdLmpvaW4oTGgpLHdlaWdodFNwZWNzOltXaCx0LHpoXS5qb2luKExoKSx3ZWlnaHREYXRhOltXaCx0LEdoXS5qb2luKExoKSxtb2RlbE1ldGFkYXRhOltXaCx0LEhoXS5qb2luKExoKX19ZnVuY3Rpb24gJGgodCl7dmFyIGU9dC5zcGxpdChMaCk7aWYoZS5sZW5ndGg8Myl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGtleSBmb3JtYXQ6IFwiK3QpO3JldHVybiBlLnNsaWNlKDEsZS5sZW5ndGgtMSkuam9pbihMaCl9dmFyIEtoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtpZighaS5nZXRCb29sKFwiSVNfQlJPV1NFUlwiKXx8dm9pZCAwPT09d2luZG93LmxvY2FsU3RvcmFnZSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgY3VycmVudCBlbnZpcm9ubWVudCBkb2VzIG5vdCBzdXBwb3J0IGxvY2FsIHN0b3JhZ2UuXCIpO2lmKHRoaXMuTFM9d2luZG93LmxvY2FsU3RvcmFnZSxudWxsPT10fHwhdCl0aHJvdyBuZXcgRXJyb3IoXCJGb3IgbG9jYWwgc3RvcmFnZSwgbW9kZWxQYXRoIG11c3Qgbm90IGJlIG51bGwsIHVuZGVmaW5lZCBvciBlbXB0eS5cIik7dGhpcy5tb2RlbFBhdGg9dCx0aGlzLmtleXM9cWgodGhpcy5tb2RlbFBhdGgpfXJldHVybiB0LnByb3RvdHlwZS5zYXZlPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlLG4sbztyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe2lmKHQubW9kZWxUb3BvbG9neSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXJMb2NhbFN0b3JhZ2Uuc2F2ZSgpIGRvZXMgbm90IHN1cHBvcnQgc2F2aW5nIG1vZGVsIHRvcG9sb2d5IGluIGJpbmFyeSBmb3JtYXRzIHlldC5cIik7ZT1KU09OLnN0cmluZ2lmeSh0Lm1vZGVsVG9wb2xvZ3kpLG49SlNPTi5zdHJpbmdpZnkodC53ZWlnaHRTcGVjcyksbz1JaCh0KTt0cnl7cmV0dXJuIHRoaXMuTFMuc2V0SXRlbSh0aGlzLmtleXMuaW5mbyxKU09OLnN0cmluZ2lmeShvKSksdGhpcy5MUy5zZXRJdGVtKHRoaXMua2V5cy50b3BvbG9neSxlKSx0aGlzLkxTLnNldEl0ZW0odGhpcy5rZXlzLndlaWdodFNwZWNzLG4pLHRoaXMuTFMuc2V0SXRlbSh0aGlzLmtleXMud2VpZ2h0RGF0YSwoYT10LndlaWdodERhdGEsd2g/QnVmZmVyLmZyb20oYSkudG9TdHJpbmcoXCJiYXNlNjRcIik6YnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsbmV3IFVpbnQ4QXJyYXkoYSkpKSkpLHRoaXMuTFMuc2V0SXRlbSh0aGlzLmtleXMubW9kZWxNZXRhZGF0YSxKU09OLnN0cmluZ2lmeSh7Zm9ybWF0OnQuZm9ybWF0LGdlbmVyYXRlZEJ5OnQuZ2VuZXJhdGVkQnksY29udmVydGVkQnk6dC5jb252ZXJ0ZWRCeX0pKSxbMix7bW9kZWxBcnRpZmFjdHNJbmZvOm99XX1jYXRjaCh0KXt0aHJvdyB0aGlzLkxTLnJlbW92ZUl0ZW0odGhpcy5rZXlzLmluZm8pLHRoaXMuTFMucmVtb3ZlSXRlbSh0aGlzLmtleXMudG9wb2xvZ3kpLHRoaXMuTFMucmVtb3ZlSXRlbSh0aGlzLmtleXMud2VpZ2h0U3BlY3MpLHRoaXMuTFMucmVtb3ZlSXRlbSh0aGlzLmtleXMud2VpZ2h0RGF0YSksdGhpcy5MUy5yZW1vdmVJdGVtKHRoaXMua2V5cy5tb2RlbE1ldGFkYXRhKSxuZXcgRXJyb3IoXCJGYWlsZWQgdG8gc2F2ZSBtb2RlbCAnXCIrdGhpcy5tb2RlbFBhdGgrXCInIHRvIGxvY2FsIHN0b3JhZ2U6IHNpemUgcXVvdGEgYmVpbmcgZXhjZWVkZWQgaXMgYSBwb3NzaWJsZSBjYXVzZSBvZiB0aGlzIGZhaWx1cmU6IG1vZGVsVG9wb2xvZ3lCeXRlcz1cIitvLm1vZGVsVG9wb2xvZ3lCeXRlcytcIiwgd2VpZ2h0U3BlY3NCeXRlcz1cIitvLndlaWdodFNwZWNzQnl0ZXMrXCIsIHdlaWdodERhdGFCeXRlcz1cIitvLndlaWdodERhdGFCeXRlcytcIi5cIil9dmFyIGE7cmV0dXJuWzJdfSl9KX0sdC5wcm90b3R5cGUubG9hZD1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciB0LGUsbixvLGEsaSxzO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7aWYobnVsbD09KHQ9SlNPTi5wYXJzZSh0aGlzLkxTLmdldEl0ZW0odGhpcy5rZXlzLmluZm8pKSkpdGhyb3cgbmV3IEVycm9yKFwiSW4gbG9jYWwgc3RvcmFnZSwgdGhlcmUgaXMgbm8gbW9kZWwgd2l0aCBuYW1lICdcIit0aGlzLm1vZGVsUGF0aCtcIidcIik7aWYoXCJKU09OXCIhPT10Lm1vZGVsVG9wb2xvZ3lUeXBlKXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXJMb2NhbFN0b3JhZ2UgZG9lcyBub3Qgc3VwcG9ydCBsb2FkaW5nIG5vbi1KU09OIG1vZGVsIHRvcG9sb2d5IHlldC5cIik7aWYoZT17fSxudWxsPT0obj1KU09OLnBhcnNlKHRoaXMuTFMuZ2V0SXRlbSh0aGlzLmtleXMudG9wb2xvZ3kpKSkpdGhyb3cgbmV3IEVycm9yKFwiSW4gbG9jYWwgc3RvcmFnZSwgdGhlIHRvcG9sb2d5IG9mIG1vZGVsICdcIit0aGlzLm1vZGVsUGF0aCtcIicgaXMgbWlzc2luZy5cIik7aWYoZS5tb2RlbFRvcG9sb2d5PW4sbnVsbD09KG89SlNPTi5wYXJzZSh0aGlzLkxTLmdldEl0ZW0odGhpcy5rZXlzLndlaWdodFNwZWNzKSkpKXRocm93IG5ldyBFcnJvcihcIkluIGxvY2FsIHN0b3JhZ2UsIHRoZSB3ZWlnaHQgc3BlY3Mgb2YgbW9kZWwgJ1wiK3RoaXMubW9kZWxQYXRoK1wiJyBhcmUgbWlzc2luZy5cIik7aWYoZS53ZWlnaHRTcGVjcz1vLG51bGwhPShhPXRoaXMuTFMuZ2V0SXRlbSh0aGlzLmtleXMubW9kZWxNZXRhZGF0YSkpJiYoaT1KU09OLnBhcnNlKGEpLGUuZm9ybWF0PWkuZm9ybWF0LGUuZ2VuZXJhdGVkQnk9aS5nZW5lcmF0ZWRCeSxlLmNvbnZlcnRlZEJ5PWkuY29udmVydGVkQnkpLG51bGw9PShzPXRoaXMuTFMuZ2V0SXRlbSh0aGlzLmtleXMud2VpZ2h0RGF0YSkpKXRocm93IG5ldyBFcnJvcihcIkluIGxvY2FsIHN0b3JhZ2UsIHRoZSBiaW5hcnkgd2VpZ2h0IHZhbHVlcyBvZiBtb2RlbCAnXCIrdGhpcy5tb2RlbFBhdGgrXCInIGFyZSBtaXNzaW5nLlwiKTtyZXR1cm4gZS53ZWlnaHREYXRhPWZ1bmN0aW9uKHQpe2lmKHdoKXt2YXIgZT1CdWZmZXIuZnJvbSh0LFwiYmFzZTY0XCIpO3JldHVybiBlLmJ1ZmZlci5zbGljZShlLmJ5dGVPZmZzZXQsZS5ieXRlT2Zmc2V0K2UuYnl0ZUxlbmd0aCl9Zm9yKHZhciBuPWF0b2IodCkscj1uZXcgVWludDhBcnJheShuLmxlbmd0aCksbz0wO288bi5sZW5ndGg7KytvKXIuc2V0KFtuLmNoYXJDb2RlQXQobyldLG8pO3JldHVybiByLmJ1ZmZlcn0ocyksWzIsZV19KX0pfSx0LlVSTF9TQ0hFTUU9XCJsb2NhbHN0b3JhZ2U6Ly9cIix0fSgpLGpoPWZ1bmN0aW9uKHQpe3JldHVybiBpLmdldEJvb2woXCJJU19CUk9XU0VSXCIpJiYhQXJyYXkuaXNBcnJheSh0KSYmdC5zdGFydHNXaXRoKEtoLlVSTF9TQ0hFTUUpPyhlPXQuc2xpY2UoS2guVVJMX1NDSEVNRS5sZW5ndGgpLG5ldyBLaChlKSk6bnVsbDt2YXIgZX07a2gucmVnaXN0ZXJTYXZlUm91dGVyKGpoKSxraC5yZWdpc3RlckxvYWRSb3V0ZXIoamgpO3ZhciBYaD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXtmKGkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIiksZnVuY3Rpb24oKXtyZXR1cm5cIkN1cnJlbnQgZW52aXJvbm1lbnQgaXMgbm90IGEgd2ViIGJyb3dzZXJcIn0pLGYodm9pZCAwIT09d2luZG93LmxvY2FsU3RvcmFnZSxmdW5jdGlvbigpe3JldHVyblwiQ3VycmVudCBicm93c2VyIGRvZXMgbm90IGFwcGVhciB0byBzdXBwb3J0IGxvY2FsU3RvcmFnZVwifSksdGhpcy5MUz13aW5kb3cubG9jYWxTdG9yYWdlfXJldHVybiB0LnByb3RvdHlwZS5saXN0TW9kZWxzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIHQsZSxuLG8sYSxpO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7Zm9yKHQ9e30sZT1XaCtMaCxuPUxoK1VoLG89MDtvPHRoaXMuTFMubGVuZ3RoOysrbykoYT10aGlzLkxTLmtleShvKSkuc3RhcnRzV2l0aChlKSYmYS5lbmRzV2l0aChuKSYmKGk9JGgoYSksdFtpXT1KU09OLnBhcnNlKHRoaXMuTFMuZ2V0SXRlbShhKSkpO3JldHVyblsyLHRdfSl9KX0sdC5wcm90b3R5cGUucmVtb3ZlTW9kZWw9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbjtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3ZhciBvO2lmKHQ9KG89dCkuc3RhcnRzV2l0aChLaC5VUkxfU0NIRU1FKT9vLnNsaWNlKEtoLlVSTF9TQ0hFTUUubGVuZ3RoKTpvLGU9cWgodCksbnVsbD09dGhpcy5MUy5nZXRJdGVtKGUuaW5mbykpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kZWwgYXQgcGF0aCAnXCIrdCtcIidcIik7cmV0dXJuIG49SlNPTi5wYXJzZSh0aGlzLkxTLmdldEl0ZW0oZS5pbmZvKSksdGhpcy5MUy5yZW1vdmVJdGVtKGUuaW5mbyksdGhpcy5MUy5yZW1vdmVJdGVtKGUudG9wb2xvZ3kpLHRoaXMuTFMucmVtb3ZlSXRlbShlLndlaWdodFNwZWNzKSx0aGlzLkxTLnJlbW92ZUl0ZW0oZS53ZWlnaHREYXRhKSxbMixuXX0pfSl9LHR9KCk7aWYoaS5nZXRCb29sKFwiSVNfQlJPV1NFUlwiKSl0cnl7U2gucmVnaXN0ZXJNYW5hZ2VyKEtoLlVSTF9TQ0hFTUUsbmV3IFhoKX1jYXRjaCh0KXt9dmFyIFloPVwibW9kZWxcIixRaD1cIi5qc29uXCIsSmg9XCIud2VpZ2h0cy5iaW5cIjtmdW5jdGlvbiBaaCh0KXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCl7cmV0dXJuIHNldFRpbWVvdXQodCl9KS50aGVuKHQpfXZhciB0cD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoZSl7aWYoIWkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikpdGhyb3cgbmV3IEVycm9yKFwiYnJvd3NlckRvd25sb2FkcygpIGNhbm5vdCBwcm9jZWVkIGJlY2F1c2UgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQgaXMgbm90IGEgYnJvd3Nlci5cIik7ZS5zdGFydHNXaXRoKHQuVVJMX1NDSEVNRSkmJihlPWUuc2xpY2UodC5VUkxfU0NIRU1FLmxlbmd0aCkpLG51bGwhPWUmJjAhPT1lLmxlbmd0aHx8KGU9WWgpLHRoaXMubW9kZWxUb3BvbG9neUZpbGVOYW1lPWUrUWgsdGhpcy53ZWlnaHREYXRhRmlsZU5hbWU9ZStKaH1yZXR1cm4gdC5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuLG8sYSxpLHM7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBkb2N1bWVudCl0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VyIGRvd25sb2FkcyBhcmUgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50IHNpbmNlIGBkb2N1bWVudGAgaXMgbm90IHByZXNlbnRcIik7aWYoZT13aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbdC53ZWlnaHREYXRhXSx7dHlwZTpcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwifSkpLCEodC5tb2RlbFRvcG9sb2d5IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKXJldHVyblszLDFdO3Rocm93IG5ldyBFcnJvcihcIkJyb3dzZXJEb3dubG9hZHMuc2F2ZSgpIGRvZXMgbm90IHN1cHBvcnQgc2F2aW5nIG1vZGVsIHRvcG9sb2d5IGluIGJpbmFyeSBmb3JtYXRzIHlldC5cIik7Y2FzZSAxOnJldHVybiBuPVt7cGF0aHM6W1wiLi9cIit0aGlzLndlaWdodERhdGFGaWxlTmFtZV0sd2VpZ2h0czp0LndlaWdodFNwZWNzfV0sbz17bW9kZWxUb3BvbG9neTp0Lm1vZGVsVG9wb2xvZ3ksZm9ybWF0OnQuZm9ybWF0LGdlbmVyYXRlZEJ5OnQuZ2VuZXJhdGVkQnksY29udmVydGVkQnk6dC5jb252ZXJ0ZWRCeSx3ZWlnaHRzTWFuaWZlc3Q6bn0sYT13aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkobyldLHt0eXBlOlwiYXBwbGljYXRpb24vanNvblwifSkpLChpPW51bGw9PXRoaXMuanNvbkFuY2hvcj9kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTp0aGlzLmpzb25BbmNob3IpLmRvd25sb2FkPXRoaXMubW9kZWxUb3BvbG9neUZpbGVOYW1lLGkuaHJlZj1hLFs0LFpoKGZ1bmN0aW9uKCl7cmV0dXJuIGkuZGlzcGF0Y2hFdmVudChuZXcgTW91c2VFdmVudChcImNsaWNrXCIpKX0pXTtjYXNlIDI6cmV0dXJuIHIuc2VudCgpLG51bGw9PXQud2VpZ2h0RGF0YT9bMyw0XTooKHM9bnVsbD09dGhpcy53ZWlnaHREYXRhQW5jaG9yP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpOnRoaXMud2VpZ2h0RGF0YUFuY2hvcikuZG93bmxvYWQ9dGhpcy53ZWlnaHREYXRhRmlsZU5hbWUscy5ocmVmPWUsWzQsWmgoZnVuY3Rpb24oKXtyZXR1cm4gcy5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIikpfSldKTtjYXNlIDM6ci5zZW50KCksci5sYWJlbD00O2Nhc2UgNDpyZXR1cm5bMix7bW9kZWxBcnRpZmFjdHNJbmZvOkloKHQpfV19fSl9KX0sdC5VUkxfU0NIRU1FPVwiZG93bmxvYWRzOi8vXCIsdH0oKSxlcD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7aWYobnVsbD09dHx8dC5sZW5ndGg8MSl0aHJvdyBuZXcgRXJyb3IoXCJXaGVuIGNhbGxpbmcgYnJvd3NlckZpbGVzLCBhdCBsZWFzdCAxIGZpbGUgaXMgcmVxdWlyZWQsIGJ1dCByZWNlaXZlZCBcIit0KTt0aGlzLmZpbGVzPXR9cmV0dXJuIHQucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdCxlLG49dGhpcztyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3JldHVybiB0PXRoaXMuZmlsZXNbMF0sZT10aGlzLmZpbGVzLnNsaWNlKDEpLFsyLG5ldyBQcm9taXNlKGZ1bmN0aW9uKHIsbyl7dmFyIGE9bmV3IEZpbGVSZWFkZXI7YS5vbmxvYWQ9ZnVuY3Rpb24oYSl7dmFyIGk9SlNPTi5wYXJzZShhLnRhcmdldC5yZXN1bHQpLHM9aS5tb2RlbFRvcG9sb2d5O2lmKG51bGwhPXMpezA9PT1lLmxlbmd0aCYmcih7bW9kZWxUb3BvbG9neTpzfSk7dmFyIHU9aS53ZWlnaHRzTWFuaWZlc3Q7aWYobnVsbCE9dSl7dmFyIGw7dHJ5e2w9bi5jaGVja01hbmlmZXN0QW5kV2VpZ2h0RmlsZXModSxlKX1jYXRjaCh0KXtyZXR1cm4gdm9pZCBvKHQpfXZhciBjPVtdLGg9W10scD1bXTt1LmZvckVhY2goZnVuY3Rpb24odCl7dC5wYXRocy5mb3JFYWNoKGZ1bmN0aW9uKHQpe2gucHVzaCh0KSxwLnB1c2gobnVsbCl9KSxjLnB1c2guYXBwbHkoYyx0LndlaWdodHMpfSksdS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QucGF0aHMuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1uZXcgRmlsZVJlYWRlcjtlLm9ubG9hZD1mdW5jdGlvbihlKXt2YXIgbj1lLnRhcmdldC5yZXN1bHQsbz1oLmluZGV4T2YodCk7cFtvXT1uLC0xPT09cC5pbmRleE9mKG51bGwpJiZyKHttb2RlbFRvcG9sb2d5OnMsd2VpZ2h0U3BlY3M6Yyx3ZWlnaHREYXRhOkVoKHApfSl9LGUub25lcnJvcj1mdW5jdGlvbihlKXtyZXR1cm4gbyhcIkZhaWxlZCB0byB3ZWlnaHRzIGRhdGEgZnJvbSBmaWxlIG9mIHBhdGggJ1wiK3QrXCInLlwiKX0sZS5yZWFkQXNBcnJheUJ1ZmZlcihsW3RdKX0pfSl9ZWxzZSBvKG5ldyBFcnJvcihcIndlaWdodE1hbmlmZXN0IGZpZWxkIGlzIG1pc3NpbmcgZnJvbSBmaWxlIFwiK3QubmFtZSkpfWVsc2UgbyhuZXcgRXJyb3IoXCJtb2RlbFRvcG9sb2d5IGZpZWxkIGlzIG1pc3NpbmcgZnJvbSBmaWxlIFwiK3QubmFtZSkpfSxhLm9uZXJyb3I9ZnVuY3Rpb24oZSl7cmV0dXJuIG8oXCJGYWlsZWQgdG8gcmVhZCBtb2RlbCB0b3BvbG9neSBhbmQgd2VpZ2h0cyBtYW5pZmVzdCBKU09OIGZyb20gZmlsZSAnXCIrdC5uYW1lK1wiJy4gQnJvd3NlckZpbGVzIHN1cHBvcnRzIGxvYWRpbmcgS2VyYXMtc3R5bGUgdGYuTW9kZWwgYXJ0aWZhY3RzIG9ubHkuXCIpfSxhLnJlYWRBc1RleHQodCl9KV19KX0pfSx0LnByb3RvdHlwZS5jaGVja01hbmlmZXN0QW5kV2VpZ2h0RmlsZXM9ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W10scj1lLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gUmgodC5uYW1lKX0pLG89e30sYT0wLGk9dDthPGkubGVuZ3RoO2ErKyl7aVthXS5wYXRocy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBhPVJoKHQpO2lmKC0xIT09bi5pbmRleE9mKGEpKXRocm93IG5ldyBFcnJvcihcIkR1cGxpY2F0ZSBmaWxlIGJhc2VuYW1lIGZvdW5kIGluIHdlaWdodHMgbWFuaWZlc3Q6ICdcIithK1wiJ1wiKTtpZihuLnB1c2goYSksLTE9PT1yLmluZGV4T2YoYSkpdGhyb3cgbmV3IEVycm9yKFwiV2VpZ2h0IGZpbGUgd2l0aCBiYXNlbmFtZSAnXCIrYStcIicgaXMgbm90IHByb3ZpZGVkLlwiKTtvW3RdPWVbci5pbmRleE9mKGEpXX0pfWlmKG4ubGVuZ3RoIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiTWlzbWF0Y2ggaW4gdGhlIG51bWJlciBvZiBmaWxlcyBpbiB3ZWlnaHRzIG1hbmlmZXN0IChcIituLmxlbmd0aCtcIikgYW5kIHRoZSBudW1iZXIgb2Ygd2VpZ2h0IGZpbGVzIHByb3ZpZGVkIChcIitlLmxlbmd0aCtcIikuXCIpO3JldHVybiBvfSx0fSgpO2Z1bmN0aW9uIG5wKHQsZSxuLHIpeyFmdW5jdGlvbih0KXtmKG51bGwhPXQmJkFycmF5LmlzQXJyYXkodCkmJnQubGVuZ3RoPjAsZnVuY3Rpb24oKXtyZXR1cm5cInByb21pc2VzIG11c3QgYmUgYSBub25lIGVtcHR5IGFycmF5XCJ9KX0odCksZnVuY3Rpb24odCxlKXtmKHQ+PTAmJnQ8PTEsZnVuY3Rpb24oKXtyZXR1cm5cIlByb2dyZXNzIGZyYWN0aW9uIG11c3QgYmUgaW4gcmFuZ2UgWzAsIDFdLCBidXQgZ290IHN0YXJ0RnJhY3Rpb24gXCIrdH0pLGYoZT49MCYmZTw9MSxmdW5jdGlvbigpe3JldHVyblwiUHJvZ3Jlc3MgZnJhY3Rpb24gbXVzdCBiZSBpbiByYW5nZSBbMCwgMV0sIGJ1dCBnb3QgZW5kRnJhY3Rpb24gXCIrZX0pLGYoZT49dCxmdW5jdGlvbigpe3JldHVyblwic3RhcnRGcmFjdGlvbiBtdXN0IGJlIG5vIG1vcmUgdGhhbiBlbmRGcmFjdGlvbiwgYnV0IGdvdCBzdGFydEZyYWN0aW9uIFwiK3QrXCIgYW5kIGVuZEZyYWN0aW9uIFwiK2V9KX0obj1udWxsPT1uPzA6bixyPW51bGw9PXI/MTpyKTt2YXIgbz0wO3JldHVybiBQcm9taXNlLmFsbCh0Lm1hcChmdW5jdGlvbihhKXtyZXR1cm4gYS50aGVuKGZ1bmN0aW9uKGEpe3ZhciBpPW4rICsrby90Lmxlbmd0aCooci1uKTtyZXR1cm4gZShpKSxhfSksYX0pKX1mdW5jdGlvbiBycCh0LGUpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBuLG8sYSxzLHUsbCxjLGgscDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIG51bGw9PWUmJihlPXt9KSxuPW51bGw9PWUuZmV0Y2hGdW5jP2kucGxhdGZvcm0uZmV0Y2g6ZS5mZXRjaEZ1bmMsbz10Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gbih0LGUucmVxdWVzdEluaXQse2lzQmluYXJ5OiEwfSl9KSxhPTAscz0uNSxudWxsIT1lLm9uUHJvZ3Jlc3M/WzMsMl06WzQsUHJvbWlzZS5hbGwobyldO2Nhc2UgMTpyZXR1cm4gdT1yLnNlbnQoKSxbMyw0XTtjYXNlIDI6cmV0dXJuWzQsbnAobyxlLm9uUHJvZ3Jlc3MsYSxzKV07Y2FzZSAzOnU9ci5zZW50KCksci5sYWJlbD00O2Nhc2UgNDpyZXR1cm4gbD11Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5hcnJheUJ1ZmZlcigpfSksYz0uNSxoPTEsbnVsbCE9ZS5vblByb2dyZXNzP1szLDZdOls0LFByb21pc2UuYWxsKGwpXTtjYXNlIDU6cmV0dXJuIHA9ci5zZW50KCksWzMsOF07Y2FzZSA2OnJldHVybls0LG5wKGwsZS5vblByb2dyZXNzLGMsaCldO2Nhc2UgNzpwPXIuc2VudCgpLHIubGFiZWw9ODtjYXNlIDg6cmV0dXJuWzIscF19fSl9KX1mdW5jdGlvbiBvcCh0KXt2YXIgZT10aGlzO3JldHVybiBmdW5jdGlvbihvLGEsaSl7cmV0dXJuIHZvaWQgMD09PWEmJihhPVwiXCIpLG4oZSx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbixzLHUsbCxjLGgscCxmLGQ7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKGU9by5tYXAoZnVuY3Rpb24oKXtyZXR1cm4hMX0pLG49e30scz1udWxsIT1pP2kubWFwKGZ1bmN0aW9uKCl7cmV0dXJuITF9KTpbXSx1PVtdLG8uZm9yRWFjaChmdW5jdGlvbih0LHIpe3ZhciBvPTA7dC53ZWlnaHRzLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGE9XCJxdWFudGl6YXRpb25cImluIHQ/dC5xdWFudGl6YXRpb24uZHR5cGU6dC5kdHlwZSxsPWdoW2FdKmcodC5zaGFwZSksYz1mdW5jdGlvbigpe2Vbcl09ITAsbnVsbD09bltyXSYmKG5bcl09W10pLG5bcl0ucHVzaCh7bWFuaWZlc3RFbnRyeTp0LGdyb3VwT2Zmc2V0Om8sc2l6ZUJ5dGVzOmx9KX07bnVsbCE9aT9pLmZvckVhY2goZnVuY3Rpb24oZSxuKXtlPT09dC5uYW1lJiYoYygpLHNbbl09ITApfSk6YygpLHUucHVzaCh0Lm5hbWUpLG8rPWx9KX0pLCFzLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB0fSkpdGhyb3cgbD1pLmZpbHRlcihmdW5jdGlvbih0LGUpe3JldHVybiFzW2VdfSksbmV3IEVycm9yKFwiQ291bGQgbm90IGZpbmQgd2VpZ2h0cyBpbiBtYW5pZmVzdCB3aXRoIG5hbWVzOiBcIitsLmpvaW4oXCIsIFwiKStcIi4gXFxuTWFuaWZlc3QgSlNPTiBoYXMgd2VpZ2h0cyB3aXRoIG5hbWVzOiBcIit1LmpvaW4oXCIsIFwiKStcIi5cIik7cmV0dXJuIGM9ZS5yZWR1Y2UoZnVuY3Rpb24odCxlLG4pe3JldHVybiBlJiZ0LnB1c2gobiksdH0sW10pLGg9W10sYy5mb3JFYWNoKGZ1bmN0aW9uKHQpe29bdF0ucGF0aHMuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1hKyhhLmVuZHNXaXRoKFwiL1wiKT9cIlwiOlwiL1wiKSt0O2gucHVzaChlKX0pfSksWzQsdChoKV07Y2FzZSAxOnJldHVybiBwPXIuc2VudCgpLGY9e30sZD0wLGMuZm9yRWFjaChmdW5jdGlvbih0KXtmb3IodmFyIGU9b1t0XS5wYXRocy5sZW5ndGgscj0wLGE9MDthPGU7YSsrKXIrPXBbZCthXS5ieXRlTGVuZ3RoO2Zvcih2YXIgaT1uZXcgQXJyYXlCdWZmZXIocikscz1uZXcgVWludDhBcnJheShpKSx1PTAsbD0wO2w8ZTtsKyspe3ZhciBjPW5ldyBVaW50OEFycmF5KHBbZCtsXSk7cy5zZXQoYyx1KSx1Kz1jLmJ5dGVMZW5ndGh9blt0XS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPXhoKGkuc2xpY2UodC5ncm91cE9mZnNldCx0Lmdyb3VwT2Zmc2V0K3Quc2l6ZUJ5dGVzKSxbdC5tYW5pZmVzdEVudHJ5XSk7Zm9yKHZhciBuIGluIGUpZltuXT1lW25dfSksZCs9ZX0pLFsyLGZdfX0pfSl9fWtoLnJlZ2lzdGVyU2F2ZVJvdXRlcihmdW5jdGlvbih0KXtyZXR1cm4gaS5nZXRCb29sKFwiSVNfQlJPV1NFUlwiKSYmIUFycmF5LmlzQXJyYXkodCkmJnQuc3RhcnRzV2l0aCh0cC5VUkxfU0NIRU1FKT8oZT10LnNsaWNlKHRwLlVSTF9TQ0hFTUUubGVuZ3RoKSx2b2lkIDA9PT1lJiYoZT1cIm1vZGVsXCIpLG5ldyB0cChlKSk6bnVsbDt2YXIgZX0pO3ZhciBhcD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXtpZih0aGlzLkRFRkFVTFRfTUVUSE9EPVwiUE9TVFwiLG51bGw9PWUmJihlPXt9KSx0aGlzLndlaWdodFBhdGhQcmVmaXg9ZS53ZWlnaHRQYXRoUHJlZml4LHRoaXMub25Qcm9ncmVzcz1lLm9uUHJvZ3Jlc3MsbnVsbCE9ZS5mZXRjaEZ1bmM/KGYoXCJmdW5jdGlvblwiPT10eXBlb2YgZS5mZXRjaEZ1bmMsZnVuY3Rpb24oKXtyZXR1cm5cIk11c3QgcGFzcyBhIGZ1bmN0aW9uIHRoYXQgbWF0Y2hlcyB0aGUgc2lnbmF0dXJlIG9mIGBmZXRjaGAgKHNlZSBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRmV0Y2hfQVBJKVwifSksdGhpcy5mZXRjaD1lLmZldGNoRnVuYyk6dGhpcy5mZXRjaD1pLnBsYXRmb3JtLmZldGNoLGYobnVsbCE9dCYmdC5sZW5ndGg+MCxmdW5jdGlvbigpe3JldHVyblwiVVJMIHBhdGggZm9yIGh0dHAgbXVzdCBub3QgYmUgbnVsbCwgdW5kZWZpbmVkIG9yIGVtcHR5LlwifSksQXJyYXkuaXNBcnJheSh0KSYmZigyPT09dC5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIlVSTCBwYXRocyBmb3IgaHR0cCBtdXN0IGhhdmUgYSBsZW5ndGggb2YgMiwgKGFjdHVhbCBsZW5ndGggaXMgXCIrdC5sZW5ndGgrXCIpLlwifSksdGhpcy5wYXRoPXQsbnVsbCE9ZS5yZXF1ZXN0SW5pdCYmbnVsbCE9ZS5yZXF1ZXN0SW5pdC5ib2R5KXRocm93IG5ldyBFcnJvcihcInJlcXVlc3RJbml0IGlzIGV4cGVjdGVkIHRvIGhhdmUgbm8gcHJlLWV4aXN0aW5nIGJvZHksIGJ1dCBoYXMgb25lLlwiKTt0aGlzLnJlcXVlc3RJbml0PWUucmVxdWVzdEluaXR8fHt9fXJldHVybiB0LnByb3RvdHlwZS5zYXZlPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlLG4sbyxhO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDppZih0Lm1vZGVsVG9wb2xvZ3kgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcil0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VySFRUUFJlcXVlc3Quc2F2ZSgpIGRvZXMgbm90IHN1cHBvcnQgc2F2aW5nIG1vZGVsIHRvcG9sb2d5IGluIGJpbmFyeSBmb3JtYXRzIHlldC5cIik7cmV0dXJuKGU9T2JqZWN0LmFzc2lnbih7bWV0aG9kOnRoaXMuREVGQVVMVF9NRVRIT0R9LHRoaXMucmVxdWVzdEluaXQpKS5ib2R5PW5ldyBGb3JtRGF0YSxuPVt7cGF0aHM6W1wiLi9tb2RlbC53ZWlnaHRzLmJpblwiXSx3ZWlnaHRzOnQud2VpZ2h0U3BlY3N9XSxvPXttb2RlbFRvcG9sb2d5OnQubW9kZWxUb3BvbG9neSxmb3JtYXQ6dC5mb3JtYXQsZ2VuZXJhdGVkQnk6dC5nZW5lcmF0ZWRCeSxjb252ZXJ0ZWRCeTp0LmNvbnZlcnRlZEJ5LHVzZXJEZWZpbmVkTWV0YWRhdGE6dC51c2VyRGVmaW5lZE1ldGFkYXRhLHdlaWdodHNNYW5pZmVzdDpufSxlLmJvZHkuYXBwZW5kKFwibW9kZWwuanNvblwiLG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShvKV0se3R5cGU6XCJhcHBsaWNhdGlvbi9qc29uXCJ9KSxcIm1vZGVsLmpzb25cIiksbnVsbCE9dC53ZWlnaHREYXRhJiZlLmJvZHkuYXBwZW5kKFwibW9kZWwud2VpZ2h0cy5iaW5cIixuZXcgQmxvYihbdC53ZWlnaHREYXRhXSx7dHlwZTpcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwifSksXCJtb2RlbC53ZWlnaHRzLmJpblwiKSxbNCx0aGlzLmZldGNoKHRoaXMucGF0aCxlKV07Y2FzZSAxOmlmKChhPXIuc2VudCgpKS5vaylyZXR1cm5bMix7bW9kZWxBcnRpZmFjdHNJbmZvOkloKHQpLHJlc3BvbnNlczpbYV19XTt0aHJvdyBuZXcgRXJyb3IoXCJCcm93c2VySFRUUFJlcXVlc3Quc2F2ZSgpIGZhaWxlZCBkdWUgdG8gSFRUUCByZXNwb25zZSBzdGF0dXMgXCIrYS5zdGF0dXMrXCIuXCIpfX0pfSl9LHQucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdCxlLG4sbyxhLGkscyx1O3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmZldGNoKHRoaXMucGF0aCx0aGlzLnJlcXVlc3RJbml0KV07Y2FzZSAxOmlmKCEodD1yLnNlbnQoKSkub2spdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdCB0byBcIit0aGlzLnBhdGgrXCIgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgXCIrdC5zdGF0dXMrXCIuIFBsZWFzZSB2ZXJpZnkgdGhpcyBVUkwgcG9pbnRzIHRvIHRoZSBtb2RlbCBKU09OIG9mIHRoZSBtb2RlbCB0byBsb2FkLlwiKTtyLmxhYmVsPTI7Y2FzZSAyOnJldHVybiByLnRyeXMucHVzaChbMiw0LCw1XSksWzQsdC5qc29uKCldO2Nhc2UgMzpyZXR1cm4gZT1yLnNlbnQoKSxbMyw1XTtjYXNlIDQ6dGhyb3cgci5zZW50KCksbj1cIkZhaWxlZCB0byBwYXJzZSBtb2RlbCBKU09OIG9mIHJlc3BvbnNlIGZyb20gXCIrdGhpcy5wYXRoK1wiLlwiLHRoaXMucGF0aC5lbmRzV2l0aChcIi5wYlwiKT9uKz1cIiBZb3VyIHBhdGggY29udGFpbnMgYSAucGIgZmlsZSBleHRlbnNpb24uIFN1cHBvcnQgZm9yIC5wYiBtb2RlbHMgaGF2ZSBiZWVuIHJlbW92ZWQgaW4gVGVuc29yRmxvdy5qcyAxLjAgaW4gZmF2b3Igb2YgLmpzb24gbW9kZWxzLiBZb3UgY2FuIHJlLWNvbnZlcnQgeW91ciBQeXRob24gVGVuc29yRmxvdyBtb2RlbCB1c2luZyB0aGUgVGVuc29yRmxvdy5qcyAxLjAgY29udmVyc2lvbiBzY3JpcHRzIG9yIHlvdSBjYW4gY29udmVydCB5b3VyLnBiIG1vZGVscyB3aXRoIHRoZSAncGIyanNvbidOUE0gc2NyaXB0IGluIHRoZSB0ZW5zb3JmbG93L3RmanMtY29udmVydGVyIHJlcG9zaXRvcnkuXCI6bis9XCIgUGxlYXNlIG1ha2Ugc3VyZSB0aGUgc2VydmVyIGlzIHNlcnZpbmcgdmFsaWQgSlNPTiBmb3IgdGhpcyByZXF1ZXN0LlwiLG5ldyBFcnJvcihuKTtjYXNlIDU6aWYobz1lLm1vZGVsVG9wb2xvZ3ksYT1lLndlaWdodHNNYW5pZmVzdCxudWxsPT1vJiZudWxsPT1hKXRocm93IG5ldyBFcnJvcihcIlRoZSBKU09OIGZyb20gSFRUUCBwYXRoIFwiK3RoaXMucGF0aCtcIiBjb250YWlucyBuZWl0aGVyIG1vZGVsIHRvcG9sb2d5IG9yIG1hbmlmZXN0IGZvciB3ZWlnaHRzLlwiKTtyZXR1cm4gbnVsbD09YT9bMyw3XTpbNCx0aGlzLmxvYWRXZWlnaHRzKGEpXTtjYXNlIDY6dT1yLnNlbnQoKSxpPXVbMF0scz11WzFdLHIubGFiZWw9NztjYXNlIDc6cmV0dXJuWzIse21vZGVsVG9wb2xvZ3k6byx3ZWlnaHRTcGVjczppLHdlaWdodERhdGE6c31dfX0pfSl9LHQucHJvdG90eXBlLmxvYWRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlLG4sbyxhLGkscyx1LGwsYyxoLHA7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmZvcihlPUFycmF5LmlzQXJyYXkodGhpcy5wYXRoKT90aGlzLnBhdGhbMV06dGhpcy5wYXRoLG49ZnVuY3Rpb24odCl7dmFyIGU9dC5sYXN0SW5kZXhPZihcIi9cIiksbj10Lmxhc3RJbmRleE9mKFwiP1wiKSxyPXQuc3Vic3RyaW5nKDAsZSksbz1uPmU/dC5zdWJzdHJpbmcobik6XCJcIjtyZXR1cm5bcitcIi9cIixvXX0oZSksbz1uWzBdLGE9blsxXSxpPXRoaXMud2VpZ2h0UGF0aFByZWZpeHx8byxzPVtdLHU9MCxsPXQ7dTxsLmxlbmd0aDt1KyspYz1sW3VdLHMucHVzaC5hcHBseShzLGMud2VpZ2h0cyk7cmV0dXJuIGg9W10sdC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QucGF0aHMuZm9yRWFjaChmdW5jdGlvbih0KXtoLnB1c2goaSt0K2EpfSl9KSxbNCxycChoLHtyZXF1ZXN0SW5pdDp0aGlzLnJlcXVlc3RJbml0LGZldGNoRnVuYzp0aGlzLmZldGNoLG9uUHJvZ3Jlc3M6dGhpcy5vblByb2dyZXNzfSldO2Nhc2UgMTpyZXR1cm4gcD1yLnNlbnQoKSxbMixbcyxFaChwKV1dfX0pfSl9LHQuVVJMX1NDSEVNRV9SRUdFWD0vXmh0dHBzPzpcXC9cXC8vLHR9KCk7ZnVuY3Rpb24gaXAodCl7cmV0dXJuIG51bGwhPXQubWF0Y2goYXAuVVJMX1NDSEVNRV9SRUdFWCl9dmFyIHNwPWZ1bmN0aW9uKHQsZSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGZldGNoKXJldHVybiBudWxsO3JldHVybihBcnJheS5pc0FycmF5KHQpP3QuZXZlcnkoZnVuY3Rpb24odCl7cmV0dXJuIGlwKHQpfSk6aXAodCkpP3VwKHQse29uUHJvZ3Jlc3M6ZX0pOm51bGx9O2Z1bmN0aW9uIHVwKHQsZSl7cmV0dXJuIG5ldyBhcCh0LGUpfWtoLnJlZ2lzdGVyU2F2ZVJvdXRlcihzcCksa2gucmVnaXN0ZXJMb2FkUm91dGVyKHNwKTt2YXIgbHA9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMubW9kZWxBcnRpZmFjdHM9dH1yZXR1cm4gdC5wcm90b3R5cGUubG9hZD1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24odCl7cmV0dXJuWzIsdGhpcy5tb2RlbEFydGlmYWN0c119KX0pfSx0fSgpLGNwPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLnNhdmVIYW5kbGVyPXR9cmV0dXJuIHQucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihlKXtyZXR1cm5bMix0aGlzLnNhdmVIYW5kbGVyKHQpXX0pfSl9LHR9KCk7dmFyIGhwPU9iamVjdC5mcmVlemUoe2Jyb3dzZXJGaWxlczpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IGVwKHQpfSxicm93c2VySFRUUFJlcXVlc3Q6ZnVuY3Rpb24odCxlKXtyZXR1cm4gdXAodCxlKX0sY29uY2F0ZW5hdGVBcnJheUJ1ZmZlcnM6RWgsZGVjb2RlV2VpZ2h0czp4aCxlbmNvZGVXZWlnaHRzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIG8sYSxpLHMsdSxsPXRoaXM7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihjKXtzd2l0Y2goYy5sYWJlbCl7Y2FzZSAwOmZvcihvPVtdLGE9W10saT1BcnJheS5pc0FycmF5KHQpP3QubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KTpPYmplY3Qua2V5cyh0KSxzPWZ1bmN0aW9uKHMpe3ZhciB1PWlbc10sYz1BcnJheS5pc0FycmF5KHQpP3Rbc10udGVuc29yOnRbdV07aWYoXCJmbG9hdDMyXCIhPT1jLmR0eXBlJiZcImludDMyXCIhPT1jLmR0eXBlJiZcImJvb2xcIiE9PWMuZHR5cGUmJlwic3RyaW5nXCIhPT1jLmR0eXBlKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGR0eXBlIGluIHdlaWdodCAnXCIrdStcIic6IFwiK2MuZHR5cGUpO3ZhciBoPXtuYW1lOnUsc2hhcGU6Yy5zaGFwZSxkdHlwZTpjLmR0eXBlfTtpZihcInN0cmluZ1wiPT09Yy5kdHlwZSl7dmFyIHA9bmV3IFByb21pc2UoZnVuY3Rpb24odCl7cmV0dXJuIG4obCx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbixvLGEsaSxzLHU7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOnJldHVybls0LGMuYnl0ZXMoKV07Y2FzZSAxOmZvcihlPXIuc2VudCgpLG49ZS5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCtlLmxlbmd0aH0sMCkreWgqZS5sZW5ndGgsbz1uZXcgVWludDhBcnJheShuKSxhPTAsaT0wO2k8ZS5sZW5ndGg7aSsrKXM9ZVtpXSx1PW5ldyBVaW50OEFycmF5KG5ldyBVaW50MzJBcnJheShbcy5sZW5ndGhdKS5idWZmZXIpLG8uc2V0KHUsYSksYSs9eWgsby5zZXQocyxhKSxhKz1zLmxlbmd0aDtyZXR1cm4gdChvKSxbMl19fSl9KX0pO2EucHVzaChwKX1lbHNlIGEucHVzaChjLmRhdGEoKSk7bnVsbCE9ZSYmKGguZ3JvdXA9ZSksby5wdXNoKGgpfSx1PTA7dTxpLmxlbmd0aDsrK3Upcyh1KTtyZXR1cm5bNCxQcm9taXNlLmFsbChhKV07Y2FzZSAxOnJldHVyblsyLHtkYXRhOmJoKGMuc2VudCgpKSxzcGVjczpvfV19fSl9KX0sZnJvbU1lbW9yeTpmdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gMT09PWFyZ3VtZW50cy5sZW5ndGg/bnVsbCE9dC5tb2RlbFRvcG9sb2d5fHxudWxsIT10LndlaWdodFNwZWNzP25ldyBscCh0KTooY29uc29sZS53YXJuKFwiUGxlYXNlIGNhbGwgdGYuaW8uZnJvbU1lbW9yeSgpIHdpdGggb25seSBvbmUgYXJndW1lbnQuIFRoZSBhcmd1bWVudCBzaG91bGQgYmUgb2YgdHlwZSBNb2RlbEFydGlmYWN0cy4gVGhlIG11bHRpLWFyZ3VtZW50IHNpZ25hdHVyZSBvZiB0Zi5pby5mcm9tTWVtb3J5KCkgaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHJlbGVhc2UuXCIpLG5ldyBscCh7bW9kZWxUb3BvbG9neTp0fSkpOihjb25zb2xlLndhcm4oXCJQbGVhc2UgY2FsbCB0Zi5pby5mcm9tTWVtb3J5KCkgd2l0aCBvbmx5IG9uZSBhcmd1bWVudC4gVGhlIGFyZ3VtZW50IHNob3VsZCBiZSBvZiB0eXBlIE1vZGVsQXJ0aWZhY3RzLiBUaGUgbXVsdGktYXJndW1lbnQgc2lnbmF0dXJlIG9mIHRmLmlvLmZyb21NZW1vcnkoKSBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cIiksbmV3IGxwKHttb2RlbFRvcG9sb2d5OnQsd2VpZ2h0U3BlY3M6ZSx3ZWlnaHREYXRhOm4sdHJhaW5pbmdDb25maWc6cn0pKX0sZ2V0TG9hZEhhbmRsZXJzOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIGtoLmdldExvYWRIYW5kbGVycyh0LGUpfSxnZXRNb2RlbEFydGlmYWN0c0luZm9Gb3JKU09OOkloLGdldFNhdmVIYW5kbGVyczpmdW5jdGlvbih0KXtyZXR1cm4ga2guZ2V0U2F2ZUhhbmRsZXJzKHQpfSxodHRwOnVwLGlzSFRUUFNjaGVtZTppcCxsb2FkV2VpZ2h0czpmdW5jdGlvbih0LGUsbyxhKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9XCJcIiksbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKG4pe3JldHVyblsyLG9wKGZ1bmN0aW9uKHQpe3JldHVybiBycCh0LHtyZXF1ZXN0SW5pdDphfSl9KSh0LGUsbyldfSl9KX0scmVnaXN0ZXJMb2FkUm91dGVyOmZ1bmN0aW9uKHQpe3JldHVybiBraC5yZWdpc3RlckxvYWRSb3V0ZXIodCl9LHJlZ2lzdGVyU2F2ZVJvdXRlcjpmdW5jdGlvbih0KXtyZXR1cm4ga2gucmVnaXN0ZXJTYXZlUm91dGVyKHQpfSx3ZWlnaHRzTG9hZGVyRmFjdG9yeTpvcCx3aXRoU2F2ZUhhbmRsZXI6ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBjcCh0KX0sY29weU1vZGVsOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihuKXtyZXR1cm5bMixUaCh0LGUsITEpXX0pfSl9LGxpc3RNb2RlbHM6ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdCxlLG4sbyxhLGkscztyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6dD1TaC5nZXRTY2hlbWVzKCksZT17fSxuPTAsbz10LHIubGFiZWw9MTtjYXNlIDE6cmV0dXJuIG48by5sZW5ndGg/KGE9b1tuXSxbNCxTaC5nZXRNYW5hZ2VyKGEpLmxpc3RNb2RlbHMoKV0pOlszLDRdO2Nhc2UgMjpmb3IocyBpbiBpPXIuc2VudCgpKWVbYStOaCtzXT1pW3NdO3IubGFiZWw9MztjYXNlIDM6cmV0dXJuIG4rKyxbMywxXTtjYXNlIDQ6cmV0dXJuWzIsZV19fSl9KX0sbW92ZU1vZGVsOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihuKXtyZXR1cm5bMixUaCh0LGUsITApXX0pfSl9LHJlbW92ZU1vZGVsOmZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsZnVuY3Rpb24obil7cmV0dXJuIGU9QWgodCksWzIsU2guZ2V0TWFuYWdlcihlLnNjaGVtZSkucmVtb3ZlTW9kZWwoZS5wYXRoKV19KX0pfX0pO3ZhciBwcD1tbih7Y29uZnVzaW9uTWF0cml4XzpmdW5jdGlvbih0LGUsbil7dmFyIHI9cm4odCxcImxhYmVsc1wiLFwiY29uZnVzaW9uTWF0cml4XCIpLG89cm4oZSxcInByZWRpY3Rpb25zXCIsXCJjb25mdXNpb25NYXRyaXhcIik7ZihudWxsPT1ufHxuPjAmJk51bWJlci5pc0ludGVnZXIobiksZnVuY3Rpb24oKXtyZXR1cm5cIklmIHByb3ZpZGVkLCBudW1DbGFzc2VzIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLCBidXQgZ290IFwiK259KSxmKDE9PT1yLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkV4cGVjdGVkIHRoZSByYW5rIG9mIGxhYmVscyB0byBiZSAxLCBidXQgZ290IFwiK3IucmFua30pLGYoMT09PW8ucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXhwZWN0ZWQgdGhlIHJhbmsgb2YgcHJlZGljdGlvbnMgdG8gYmUgMSwgYnV0IGdvdCBcIitvLnJhbmt9KSxmKHIuc2hhcGVbMF09PT1vLnNoYXBlWzBdLGZ1bmN0aW9uKCl7cmV0dXJuXCJNaXNtYXRjaCBpbiB0aGUgbnVtYmVyIG9mIGV4YW1wbGVzOiBcIityLnNoYXBlWzBdK1wiIHZzLiBcIitvLnNoYXBlWzBdK1wiLiBMYWJlbHMgYW5kIHByZWRpY3Rpb25zIHNob3VsZCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBlbGVtZW50cy5cIn0pLGYobj4wJiZOdW1iZXIuaXNJbnRlZ2VyKG4pLGZ1bmN0aW9uKCl7cmV0dXJuXCJudW1DbGFzc2VzIGlzIHJlcXVpcmVkIHRvIGJlIGEgcG9zaXRpdmUgaW50ZWdlciwgYnV0IGdvdCBcIitufSk7dmFyIGE9Y3Ioci5hc1R5cGUoXCJpbnQzMlwiKSxuKSxpPWNyKG8uYXNUeXBlKFwiaW50MzJcIiksbik7cmV0dXJuIGEudHJhbnNwb3NlKCkubWF0TXVsKGkpLmFzVHlwZShcImludDMyXCIpfX0pLGZwPU9iamVjdC5mcmVlemUoe2NvbmZ1c2lvbk1hdHJpeDpwcH0pO3ZhciBkcD1tbih7ZnJvbVBpeGVsc186ZnVuY3Rpb24odCxlKXtpZih2b2lkIDA9PT1lJiYoZT0zKSxlPjQpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbnN0cnVjdCBUZW5zb3Igd2l0aCBtb3JlIHRoYW4gNCBjaGFubmVscyBmcm9tIHBpeGVscy5cIik7dmFyIG49XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxWaWRlb0VsZW1lbnQmJnQgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50O2lmKG4mJm4mJnQucmVhZHlTdGF0ZTwyKXRocm93IG5ldyBFcnJvcihcIlRoZSB2aWRlbyBlbGVtZW50IGhhcyBub3QgbG9hZGVkIGRhdGEgeWV0LiBQbGVhc2Ugd2FpdCBmb3IgYGxvYWRlZGRhdGFgIGV2ZW50IG9uIHRoZSA8dmlkZW8+IGVsZW1lbnQuXCIpO3JldHVybiBTdC5mcm9tUGl4ZWxzKHQsZSl9fSksdnA9T2JqZWN0LmZyZWV6ZSh7dG9QaXhlbHM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgbixvLGEsaSxzLHUsbCxjLGgscCxmLGQsdixtLGcseSx4LGIsdyxDLEUsUixJO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDppZihuPXJuKHQsXCJpbWdcIixcInRvUGl4ZWxzXCIpLHQgaW5zdGFuY2VvZiBjdHx8KG49bi50b0ludCgpKSwyIT09bi5yYW5rJiYzIT09bi5yYW5rKXRocm93IG5ldyBFcnJvcihcInRvUGl4ZWxzIG9ubHkgc3VwcG9ydHMgcmFuayAyIG9yIDMgdGVuc29ycywgZ290IHJhbmsgXCIrbi5yYW5rK1wiLlwiKTtpZihvPW4uc2hhcGUuc2xpY2UoMCwyKSxhPW9bMF0saT1vWzFdLChzPTI9PT1uLnJhbms/MTpuLnNoYXBlWzJdKT40fHwyPT09cyl0aHJvdyBuZXcgRXJyb3IoXCJ0b1BpeGVscyBvbmx5IHN1cHBvcnRzIGRlcHRoIG9mIHNpemUgMSwgMyBvciA0IGJ1dCBnb3QgXCIrcyk7cmV0dXJuWzQsbi5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gdT1yLnNlbnQoKSxsPW4ubWluKCksYz1uLm1heCgpLFs0LFByb21pc2UuYWxsKFtsLmRhdGEoKSxjLmRhdGEoKV0pXTtjYXNlIDI6aWYoaD1yLnNlbnQoKSxwPWhbMF0sZj1oWzFdLGQ9cFswXSx2PWZbMF0sbC5kaXNwb3NlKCksYy5kaXNwb3NlKCksXCJmbG9hdDMyXCI9PT1uLmR0eXBlKXtpZihkPDB8fHY+MSl0aHJvdyBuZXcgRXJyb3IoXCJUZW5zb3IgdmFsdWVzIGZvciBhIGZsb2F0MzIgVGVuc29yIG11c3QgYmUgaW4gdGhlIHJhbmdlIFswIC0gMV0gYnV0IGdvdCByYW5nZSBbXCIrZCtcIiAtIFwiK3YrXCJdLlwiKX1lbHNle2lmKFwiaW50MzJcIiE9PW4uZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgdHlwZSBmb3IgdG9QaXhlbHM6IFwiK24uZHR5cGUrXCIuIFBsZWFzZSB1c2UgZmxvYXQzMiBvciBpbnQzMiB0ZW5zb3JzLlwiKTtpZihkPDB8fHY+MjU1KXRocm93IG5ldyBFcnJvcihcIlRlbnNvciB2YWx1ZXMgZm9yIGEgaW50MzIgVGVuc29yIG11c3QgYmUgaW4gdGhlIHJhbmdlIFswIC0gMjU1XSBidXQgZ290IHJhbmdlIFtcIitkK1wiIC0gXCIrditcIl0uXCIpfWZvcihtPVwiZmxvYXQzMlwiPT09bi5kdHlwZT8yNTU6MSxnPW5ldyBVaW50OENsYW1wZWRBcnJheShpKmEqNCkseT0wO3k8YSppOysreSl4PXZvaWQgMCxiPXZvaWQgMCx3PXZvaWQgMCxDPXZvaWQgMCwxPT09cz8oeD11W3ldKm0sYj11W3ldKm0sdz11W3ldKm0sQz0yNTUpOjM9PT1zPyh4PXVbMyp5XSptLGI9dVszKnkrMV0qbSx3PXVbMyp5KzJdKm0sQz0yNTUpOjQ9PT1zJiYoeD11WzQqeV0qbSxiPXVbNCp5KzFdKm0sdz11WzQqeSsyXSptLEM9dVs0KnkrM10qbSksZ1swKyhFPTQqeSldPU1hdGgucm91bmQoeCksZ1tFKzFdPU1hdGgucm91bmQoYiksZ1tFKzJdPU1hdGgucm91bmQodyksZ1tFKzNdPU1hdGgucm91bmQoQyk7cmV0dXJuIG51bGwhPWUmJihlLndpZHRoPWksZS5oZWlnaHQ9YSxSPWUuZ2V0Q29udGV4dChcIjJkXCIpLEk9bmV3IEltYWdlRGF0YShnLGksYSksUi5wdXRJbWFnZURhdGEoSSwwLDApKSxuIT09dCYmbi5kaXNwb3NlKCksWzIsZ119fSl9KX0sZnJvbVBpeGVsczpkcH0pLG1wPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q2xhc3NOYW1lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29uc3RydWN0b3IuY2xhc3NOYW1lfSx0LmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZSl9LHR9KCksZ3A9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy5jbGFzc05hbWVNYXA9e319cmV0dXJuIHQuZ2V0TWFwPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PXQuaW5zdGFuY2UmJih0Lmluc3RhbmNlPW5ldyB0KSx0Lmluc3RhbmNlfSx0LnJlZ2lzdGVyPWZ1bmN0aW9uKGUpe3QuZ2V0TWFwKCkuY2xhc3NOYW1lTWFwW2UuY2xhc3NOYW1lXT1bZSxlLmZyb21Db25maWddfSx0fSgpO2Z1bmN0aW9uIHlwKHQpe2YobnVsbCE9dC5jbGFzc05hbWUsZnVuY3Rpb24oKXtyZXR1cm5cIkNsYXNzIGJlaW5nIHJlZ2lzdGVyZWQgZG9lcyBub3QgaGF2ZSB0aGUgc3RhdGljIGNsYXNzTmFtZSBwcm9wZXJ0eSBkZWZpbmVkLlwifSksZihcInN0cmluZ1wiPT10eXBlb2YgdC5jbGFzc05hbWUsZnVuY3Rpb24oKXtyZXR1cm5cImNsYXNzTmFtZSBpcyByZXF1aXJlZCB0byBiZSBhIHN0cmluZywgYnV0IGdvdCB0eXBlIFwiK3R5cGVvZiB0LmNsYXNzTmFtZX0pLGYodC5jbGFzc05hbWUubGVuZ3RoPjAsZnVuY3Rpb24oKXtyZXR1cm5cIkNsYXNzIGJlaW5nIHJlZ2lzdGVyZWQgaGFzIGFuIGVtcHR5LXN0cmluZyBhcyBpdHMgY2xhc3NOYW1lLCB3aGljaCBpcyBkaXNhbGxvd2VkLlwifSksZ3AucmVnaXN0ZXIodCl9dmFyIHhwPU9iamVjdC5mcmVlemUoe1NlcmlhbGl6YWJsZTptcCxTZXJpYWxpemF0aW9uTWFwOmdwLHJlZ2lzdGVyQ2xhc3M6eXB9KSxicD0uMDAxLHdwPS4xO2Z1bmN0aW9uIENwKCl7cmV0dXJuIDMyPT09U3QuYmFja2VuZC5mbG9hdFByZWNpc2lvbigpP2JwOndwfWZ1bmN0aW9uIEVwKHQsZSxuKXt2YXIgcj0hMDtpZigoXyh0KXx8XyhlKSkmJihyPSExKSxfKHQpJiZfKGUpJiYocj0hMCkscil7dmFyIG89dC5jb25zdHJ1Y3Rvci5uYW1lLGE9ZS5jb25zdHJ1Y3Rvci5uYW1lO2lmKG8hPT1hKXRocm93IG5ldyBFcnJvcihcIkFycmF5cyBhcmUgb2YgZGlmZmVyZW50IHR5cGUuIEFjdHVhbDogXCIrbytcIi4gRXhwZWN0ZWQ6IFwiK2EpfWlmKEFycmF5LmlzQXJyYXkodCkmJkFycmF5LmlzQXJyYXkoZSkpe3ZhciBpPWVuKHQpLHM9ZW4oZSk7aWYoIXkoaSxzKSl0aHJvdyBuZXcgRXJyb3IoXCJBcnJheXMgaGF2ZSBkaWZmZXJlbnQgc2hhcGVzLiBBY3R1YWw6IFtcIitpK1wiXS4gRXhwZWN0ZWQ6IFtcIitzK1wiXVwiKX12YXIgdT1fKHQpP3Q6bSh0KSxsPV8oZSk/ZTptKGUpO2lmKHUubGVuZ3RoIT09bC5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiQXJyYXlzIGhhdmUgZGlmZmVyZW50IGxlbmd0aHMgYWN0dWFsOiBcIit1Lmxlbmd0aCtcIiB2cyBleHBlY3RlZDogXCIrbC5sZW5ndGgrXCIuXFxuQWN0dWFsOiAgIFwiK3UrXCIuXFxuRXhwZWN0ZWQ6IFwiK2wrXCIuXCIpO2Zvcih2YXIgYz0wO2M8bC5sZW5ndGg7KytjKXt2YXIgaD11W2NdLHA9bFtjXTtpZighbihoLHApKXRocm93IG5ldyBFcnJvcihcIkFycmF5cyBkaWZmZXI6IGFjdHVhbFtcIitjK1wiXSA9IFwiK2grXCIsIGV4cGVjdGVkW1wiK2MrXCJdID0gXCIrcCtcIi5cXG5BY3R1YWw6ICAgXCIrdStcIi5cXG5FeHBlY3RlZDogXCIrbCtcIi5cIil9fWZ1bmN0aW9uIFJwKHQsZSxuKXtyZXR1cm4haXNGaW5pdGUodCkmJiFpc0Zpbml0ZShlKXx8IShpc05hTih0KXx8aXNOYU4oZSl8fE1hdGguYWJzKHQtZSk+bil9dmFyIElwPU9iamVjdC5mcmVlemUoe1RFU1RfRVBTSUxPTl9GTE9BVDE2OndwLGV4cGVjdEFycmF5c0Nsb3NlOmZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gbnVsbD09biYmKG49Q3AoKSksRXAodCxlLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIFJwKHQsZSxuKX0pfSx0ZXN0RXBzaWxvbjpDcCxleHBlY3RQcm9taXNlVG9GYWlsOmZ1bmN0aW9uKHQsZSl7dCgpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gZS5mYWlsKCl9LGZ1bmN0aW9uKCl7cmV0dXJuIGUoKX0pfSxleHBlY3RBcnJheXNFcXVhbDpmdW5jdGlvbih0LGUpe3ZhciBuPVwic3RyaW5nXCI9PXR5cGVvZiBlfHxcIm51bWJlclwiPT10eXBlb2YgZXx8XCJib29sZWFuXCI9PXR5cGVvZiBlP1tlXTplO3JldHVybiBNKHQpfHxNKHRbMF0pfHxNKGUpfHxNKGVbMF0pP0VwKHQsbixmdW5jdGlvbih0LGUpe3JldHVybiB0PT1lfSk6RXAodCxlLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIFJwKHQsZSwwKX0pfSxleHBlY3ROdW1iZXJzQ2xvc2U6ZnVuY3Rpb24odCxlLG4pe2lmKG51bGw9PW4mJihuPUNwKCkpLCFScCh0LGUsbikpdGhyb3cgbmV3IEVycm9yKFwiTnVtYmVycyBkaWZmZXI6IGFjdHVhbCA9PT0gXCIrdCtcIiwgZXhwZWN0ZWQgPT09IFwiK2UpfSxleHBlY3RWYWx1ZXNJblJhbmdlOmZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKylpZih0W3JdPGV8fHRbcl0+bil0aHJvdyBuZXcgRXJyb3IoXCJWYWx1ZSBvdXQgb2YgcmFuZ2U6XCIrdFtyXStcIiBsb3c6IFwiK2UrXCIsIGhpZ2g6IFwiK24pfSxleHBlY3RBcnJheUJ1ZmZlcnNFcXVhbDpmdW5jdGlvbih0LGUpe2V4cGVjdChuZXcgRmxvYXQzMkFycmF5KHQpKS50b0VxdWFsKG5ldyBGbG9hdDMyQXJyYXkoZSkpfX0pLGtwPVwiMS4yLjEwXCI7dmFyIE5wPU9iamVjdC5mcmVlemUoe2dwZ3B1X3V0aWw6aGksd2ViZ2xfdXRpbDpfZSxmb3JjZUhhbGZGbG9hdDpmdW5jdGlvbigpe2kuc2V0KFwiV0VCR0xfRk9SQ0VfRjE2X1RFWFRVUkVTXCIsITApfSxNYXRoQmFja2VuZFdlYkdMOkFzLHNldFdlYkdMQ29udGV4dDpGdCxHUEdQVUNvbnRleHQ6cGl9KSxTcD1mdW5jdGlvbih0KXtmdW5jdGlvbiBvKCl7cmV0dXJuIG51bGwhPT10JiZ0LmFwcGx5KHRoaXMsYXJndW1lbnRzKXx8dGhpc31yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLm1pbmltaXplPWZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT0hMSk7dmFyIHI9dGhpcy5jb21wdXRlR3JhZGllbnRzKHQsbiksbz1yLnZhbHVlLGE9ci5ncmFkcztpZihudWxsIT1uKXt2YXIgaT1uLm1hcChmdW5jdGlvbih0KXtyZXR1cm57bmFtZTp0Lm5hbWUsdGVuc29yOmFbdC5uYW1lXX19KTt0aGlzLmFwcGx5R3JhZGllbnRzKGkpfWVsc2UgdGhpcy5hcHBseUdyYWRpZW50cyhhKTtyZXR1cm4gemUoYSksZT9vOihvLmRpc3Bvc2UoKSxudWxsKX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KG8ucHJvdG90eXBlLFwiaXRlcmF0aW9uc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09dGhpcy5pdGVyYXRpb25zXyYmKHRoaXMuaXRlcmF0aW9uc189MCksdGhpcy5pdGVyYXRpb25zX30sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxvLnByb3RvdHlwZS5pbmNyZW1lbnRJdGVyYXRpb25zPWZ1bmN0aW9uKCl7dGhpcy5pdGVyYXRpb25zXz10aGlzLml0ZXJhdGlvbnMrMX0sby5wcm90b3R5cGUuY29tcHV0ZUdyYWRpZW50cz1mdW5jdGlvbih0LGUpe3JldHVybiBqcih0LGUpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5pdGVyYXRpb25zXyYmemUodGhpcy5pdGVyYXRpb25zXyl9LG8ucHJvdG90eXBlLnNhdmVJdGVyYXRpb25zPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dGhpcy5pdGVyYXRpb25zXyYmKHRoaXMuaXRlcmF0aW9uc189MCksWzIse25hbWU6XCJpdGVyXCIsdGVuc29yOkNuKHRoaXMuaXRlcmF0aW9uc18sXCJpbnQzMlwiKX1dfSl9KX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiZ2V0V2VpZ2h0cygpIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgdGhpcyBvcHRpbWl6ZXIgeWV0LlwiKX0pfSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJzZXRXZWlnaHRzKCkgaXMgbm90IGltcGxlbWVudGVkIGZvciB0aGlzIG9wdGltaXplciBjbGFzcyBcIit0aGlzLmdldENsYXNzTmFtZSgpKX0pfSl9LG8ucHJvdG90eXBlLmV4dHJhY3RJdGVyYXRpb25zPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm4gZT10aGlzLFs0LHRbMF0udGVuc29yLmRhdGEoKV07Y2FzZSAxOnJldHVybiBlLml0ZXJhdGlvbnNfPW4uc2VudCgpWzBdLFsyLHQuc2xpY2UoMSldfX0pfSl9LG99KG1wKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoU3AsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dC5taW5pbWl6ZSYmbnVsbCE9dC5jb21wdXRlR3JhZGllbnRzJiZudWxsIT10LmFwcGx5R3JhZGllbnRzfX0pO3ZhciBBcD1mdW5jdGlvbih0KXtmdW5jdGlvbiBvKGUsbixyKXt2b2lkIDA9PT1yJiYocj1udWxsKTt2YXIgbz10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG8ubGVhcm5pbmdSYXRlPWUsby5yaG89bixvLmVwc2lsb249cixvLmFjY3VtdWxhdGVkR3JhZHM9W10sby5hY2N1bXVsYXRlZFVwZGF0ZXM9W10sbnVsbD09ciYmKG8uZXBzaWxvbj1TdC5iYWNrZW5kLmVwc2lsb24oKSksb31yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7KEFycmF5LmlzQXJyYXkodCk/dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pOk9iamVjdC5rZXlzKHQpKS5mb3JFYWNoKGZ1bmN0aW9uKG4scil7dmFyIG89U3QucmVnaXN0ZXJlZFZhcmlhYmxlc1tuXTtudWxsPT1lLmFjY3VtdWxhdGVkR3JhZHNbcl0mJihlLmFjY3VtdWxhdGVkR3JhZHNbcl09e29yaWdpbmFsTmFtZTpuK1wiL2FjY3VtX2dyYWRcIix2YXJpYWJsZTpWZShmdW5jdGlvbigpe3JldHVybiBNbihvKS52YXJpYWJsZSghMSl9KX0pLG51bGw9PWUuYWNjdW11bGF0ZWRVcGRhdGVzW3JdJiYoZS5hY2N1bXVsYXRlZFVwZGF0ZXNbcl09e29yaWdpbmFsTmFtZTpuK1wiL2FjY3VtX3ZhclwiLHZhcmlhYmxlOlZlKGZ1bmN0aW9uKCl7cmV0dXJuIE1uKG8pLnZhcmlhYmxlKCExKX0pfSk7dmFyIGE9QXJyYXkuaXNBcnJheSh0KT90W3JdLnRlbnNvcjp0W25dO2lmKG51bGwhPWEpe3ZhciBpPWUuYWNjdW11bGF0ZWRHcmFkc1tyXS52YXJpYWJsZSxzPWUuYWNjdW11bGF0ZWRVcGRhdGVzW3JdLnZhcmlhYmxlO1ZlKGZ1bmN0aW9uKCl7dmFyIHQ9aS5tdWwoZS5yaG8pLmFkZChhLnNxdWFyZSgpLm11bCgxLWUucmhvKSksbj1zLmFkZChlLmVwc2lsb24pLnNxcnQoKS5kaXYoaS5hZGQoZS5lcHNpbG9uKS5zcXJ0KCkpLm11bChhKSxyPXMubXVsKGUucmhvKS5hZGQobi5zcXVhcmUoKS5tdWwoMS1lLnJobykpO2kuYXNzaWduKHQpLHMuYXNzaWduKHIpO3ZhciB1PW4ubXVsKC1lLmxlYXJuaW5nUmF0ZSkuYWRkKG8pO28uYXNzaWduKHUpfSl9fSksdGhpcy5pbmNyZW1lbnRJdGVyYXRpb25zKCl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtudWxsIT10aGlzLmFjY3VtdWxhdGVkVXBkYXRlcyYmKHplKHRoaXMuYWNjdW11bGF0ZWRHcmFkcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSksemUodGhpcy5hY2N1bXVsYXRlZFVwZGF0ZXMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnZhcmlhYmxlfSkpKX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciB0O3JldHVybiByKHRoaXMsZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDpyZXR1cm4gdD10aGlzLmFjY3VtdWxhdGVkR3JhZHMuY29uY2F0KHRoaXMuYWNjdW11bGF0ZWRVcGRhdGVzKSxbNCx0aGlzLnNhdmVJdGVyYXRpb25zKCldO2Nhc2UgMTpyZXR1cm5bMixbZS5zZW50KCldLmNvbmNhdCh0Lm1hcChmdW5jdGlvbih0KXtyZXR1cm57bmFtZTp0Lm9yaWdpbmFsTmFtZSx0ZW5zb3I6dC52YXJpYWJsZX19KSldfX0pfSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihuKXtzd2l0Y2gobi5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZXh0cmFjdEl0ZXJhdGlvbnModCldO2Nhc2UgMTpyZXR1cm4gdD1uLnNlbnQoKSxlPXQubGVuZ3RoLzIsITEsdGhpcy5hY2N1bXVsYXRlZEdyYWRzPXQuc2xpY2UoMCxlKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pLHRoaXMuYWNjdW11bGF0ZWRVcGRhdGVzPXQuc2xpY2UoZSwyKmUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm57b3JpZ2luYWxOYW1lOnQubmFtZSx2YXJpYWJsZTp0LnRlbnNvci52YXJpYWJsZSghMSl9fSksWzJdfX0pfSl9LG8ucHJvdG90eXBlLmdldENvbmZpZz1mdW5jdGlvbigpe3JldHVybntsZWFybmluZ1JhdGU6dGhpcy5sZWFybmluZ1JhdGUscmhvOnRoaXMucmhvLGVwc2lsb246dGhpcy5lcHNpbG9ufX0sby5mcm9tQ29uZmlnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyB0KGUubGVhcm5pbmdSYXRlLGUucmhvLGUuZXBzaWxvbil9LG8uY2xhc3NOYW1lPVwiQWRhZGVsdGFcIixvfShTcCk7eXAoQXApO3ZhciBUcD1mdW5jdGlvbih0KXtmdW5jdGlvbiBvKGUsbil7dm9pZCAwPT09biYmKG49LjEpO3ZhciByPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gci5sZWFybmluZ1JhdGU9ZSxyLmluaXRpYWxBY2N1bXVsYXRvclZhbHVlPW4sci5hY2N1bXVsYXRlZEdyYWRzPVtdLHJ9cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS5hcHBseUdyYWRpZW50cz1mdW5jdGlvbih0KXt2YXIgZT10aGlzOyhBcnJheS5pc0FycmF5KHQpP3QubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KTpPYmplY3Qua2V5cyh0KSkuZm9yRWFjaChmdW5jdGlvbihuLHIpe3ZhciBvPVN0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07aWYobnVsbD09ZS5hY2N1bXVsYXRlZEdyYWRzW3JdKXtlLmFjY3VtdWxhdGVkR3JhZHNbcl09e29yaWdpbmFsTmFtZTpuK1wiL2FjY3VtdWxhdG9yXCIsdmFyaWFibGU6VmUoZnVuY3Rpb24oKXtyZXR1cm4gRG4oby5zaGFwZSxlLmluaXRpYWxBY2N1bXVsYXRvclZhbHVlKS52YXJpYWJsZSghMSl9KX19dmFyIGE9QXJyYXkuaXNBcnJheSh0KT90W3JdLnRlbnNvcjp0W25dO2lmKG51bGwhPWEpe3ZhciBpPWUuYWNjdW11bGF0ZWRHcmFkc1tyXS52YXJpYWJsZTtWZShmdW5jdGlvbigpe3ZhciB0PWkuYWRkKGEuc3F1YXJlKCkpO2kuYXNzaWduKHQpO3ZhciBuPWEuZGl2KHQuYWRkKFN0LmJhY2tlbmQuZXBzaWxvbigpKS5zcXJ0KCkpLm11bCgtZS5sZWFybmluZ1JhdGUpLmFkZChvKTtvLmFzc2lnbihuKX0pfX0pLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5hY2N1bXVsYXRlZEdyYWRzJiZ6ZSh0aGlzLmFjY3VtdWxhdGVkR3JhZHMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnZhcmlhYmxlfSkpfSxvLnByb3RvdHlwZS5nZXRXZWlnaHRzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbih0KXtzd2l0Y2godC5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuc2F2ZUl0ZXJhdGlvbnMoKV07Y2FzZSAxOnJldHVyblsyLFt0LnNlbnQoKV0uY29uY2F0KHRoaXMuYWNjdW11bGF0ZWRHcmFkcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJue25hbWU6dC5vcmlnaW5hbE5hbWUsdGVuc29yOnQudmFyaWFibGV9fSkpXX19KX0pfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmV4dHJhY3RJdGVyYXRpb25zKHQpXTtjYXNlIDE6cmV0dXJuIHQ9ZS5zZW50KCksITEsdGhpcy5hY2N1bXVsYXRlZEdyYWRzPXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSxbMl19fSl9KX0sby5wcm90b3R5cGUuZ2V0Q29uZmlnPWZ1bmN0aW9uKCl7cmV0dXJue2xlYXJuaW5nUmF0ZTp0aGlzLmxlYXJuaW5nUmF0ZSxpbml0aWFsQWNjdW11bGF0b3JWYWx1ZTp0aGlzLmluaXRpYWxBY2N1bXVsYXRvclZhbHVlfX0sby5mcm9tQ29uZmlnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyB0KGUubGVhcm5pbmdSYXRlLGUuaW5pdGlhbEFjY3VtdWxhdG9yVmFsdWUpfSxvLmNsYXNzTmFtZT1cIkFkYWdyYWRcIixvfShTcCk7eXAoVHApO3ZhciBEcD1mdW5jdGlvbih0KXtmdW5jdGlvbiBvKGUsbixyLG8pe3ZvaWQgMD09PW8mJihvPW51bGwpO3ZhciBhPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gYS5sZWFybmluZ1JhdGU9ZSxhLmJldGExPW4sYS5iZXRhMj1yLGEuZXBzaWxvbj1vLGEuYWNjdW11bGF0ZWRGaXJzdE1vbWVudD1bXSxhLmFjY3VtdWxhdGVkU2Vjb25kTW9tZW50PVtdLFZlKGZ1bmN0aW9uKCl7YS5hY2NCZXRhMT1DbihuKS52YXJpYWJsZSgpLGEuYWNjQmV0YTI9Q24ocikudmFyaWFibGUoKX0pLG51bGw9PW8mJihhLmVwc2lsb249U3QuYmFja2VuZC5lcHNpbG9uKCkpLGF9cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS5hcHBseUdyYWRpZW50cz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49QXJyYXkuaXNBcnJheSh0KT90Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5uYW1lfSk6T2JqZWN0LmtleXModCk7VmUoZnVuY3Rpb24oKXt2YXIgcj1ZdSgxLGUuYWNjQmV0YTEpLG89WXUoMSxlLmFjY0JldGEyKTtuLmZvckVhY2goZnVuY3Rpb24obixhKXt2YXIgaT1TdC5yZWdpc3RlcmVkVmFyaWFibGVzW25dO251bGw9PWUuYWNjdW11bGF0ZWRGaXJzdE1vbWVudFthXSYmKGUuYWNjdW11bGF0ZWRGaXJzdE1vbWVudFthXT17b3JpZ2luYWxOYW1lOm4rXCIvbVwiLHZhcmlhYmxlOlZlKGZ1bmN0aW9uKCl7cmV0dXJuIE1uKGkpLnZhcmlhYmxlKCExKX0pfSksbnVsbD09ZS5hY2N1bXVsYXRlZFNlY29uZE1vbWVudFthXSYmKGUuYWNjdW11bGF0ZWRTZWNvbmRNb21lbnRbYV09e29yaWdpbmFsTmFtZTpuK1wiL3ZcIix2YXJpYWJsZTpWZShmdW5jdGlvbigpe3JldHVybiBNbihpKS52YXJpYWJsZSghMSl9KX0pO3ZhciBzPUFycmF5LmlzQXJyYXkodCk/dFthXS50ZW5zb3I6dFtuXTtpZihudWxsIT1zKXt2YXIgdT1lLmFjY3VtdWxhdGVkRmlyc3RNb21lbnRbYV0udmFyaWFibGUsbD1lLmFjY3VtdWxhdGVkU2Vjb25kTW9tZW50W2FdLnZhcmlhYmxlLGM9dS5tdWwoZS5iZXRhMSkuYWRkKHMubXVsKDEtZS5iZXRhMSkpLGg9bC5tdWwoZS5iZXRhMikuYWRkKHMuc3F1YXJlKCkubXVsKDEtZS5iZXRhMikpLHA9Yy5kaXYociksZj1oLmRpdihvKTt1LmFzc2lnbihjKSxsLmFzc2lnbihoKTt2YXIgZD1wLmRpdihmLnNxcnQoKS5hZGQoZS5lcHNpbG9uKSkubXVsKC1lLmxlYXJuaW5nUmF0ZSkuYWRkKGkpO2kuYXNzaWduKGQpfX0pLGUuYWNjQmV0YTEuYXNzaWduKGUuYWNjQmV0YTEubXVsKGUuYmV0YTEpKSxlLmFjY0JldGEyLmFzc2lnbihlLmFjY0JldGEyLm11bChlLmJldGEyKSl9KSx0aGlzLmluY3JlbWVudEl0ZXJhdGlvbnMoKX0sby5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuYWNjQmV0YTEuZGlzcG9zZSgpLHRoaXMuYWNjQmV0YTIuZGlzcG9zZSgpLG51bGwhPXRoaXMuYWNjdW11bGF0ZWRGaXJzdE1vbWVudCYmemUodGhpcy5hY2N1bXVsYXRlZEZpcnN0TW9tZW50Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSxudWxsIT10aGlzLmFjY3VtdWxhdGVkU2Vjb25kTW9tZW50JiZ6ZSh0aGlzLmFjY3VtdWxhdGVkU2Vjb25kTW9tZW50Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciB0O3JldHVybiByKHRoaXMsZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDpyZXR1cm4gdD10aGlzLmFjY3VtdWxhdGVkRmlyc3RNb21lbnQuY29uY2F0KHRoaXMuYWNjdW11bGF0ZWRTZWNvbmRNb21lbnQpLFs0LHRoaXMuc2F2ZUl0ZXJhdGlvbnMoKV07Y2FzZSAxOnJldHVyblsyLFtlLnNlbnQoKV0uY29uY2F0KHQubWFwKGZ1bmN0aW9uKHQpe3JldHVybntuYW1lOnQub3JpZ2luYWxOYW1lLHRlbnNvcjp0LnZhcmlhYmxlfX0pKV19fSl9KX0sby5wcm90b3R5cGUuc2V0V2VpZ2h0cz1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuPXRoaXM7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZXh0cmFjdEl0ZXJhdGlvbnModCldO2Nhc2UgMTpyZXR1cm4gdD1yLnNlbnQoKSxWZShmdW5jdGlvbigpe24uYWNjQmV0YTEuYXNzaWduKCR1KG4uYmV0YTEsbi5pdGVyYXRpb25zXysxKSksbi5hY2NCZXRhMi5hc3NpZ24oJHUobi5iZXRhMixuLml0ZXJhdGlvbnNfKzEpKX0pLGU9dC5sZW5ndGgvMiwhMSx0aGlzLmFjY3VtdWxhdGVkRmlyc3RNb21lbnQ9dC5zbGljZSgwLGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm57b3JpZ2luYWxOYW1lOnQubmFtZSx2YXJpYWJsZTp0LnRlbnNvci52YXJpYWJsZSghMSl9fSksdGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudD10LnNsaWNlKGUsMiplKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pLFsyXX19KX0pfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLGJldGExOnRoaXMuYmV0YTEsYmV0YTI6dGhpcy5iZXRhMixlcHNpbG9uOnRoaXMuZXBzaWxvbn19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSxlLmJldGExLGUuYmV0YTIsZS5lcHNpbG9uKX0sby5jbGFzc05hbWU9XCJBZGFtXCIsb30oU3ApO3lwKERwKTt2YXIgX3A9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4scixvLGEpe3ZvaWQgMD09PW8mJihvPW51bGwpLHZvaWQgMD09PWEmJihhPTApO3ZhciBpPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gaS5sZWFybmluZ1JhdGU9ZSxpLmJldGExPW4saS5iZXRhMj1yLGkuZXBzaWxvbj1vLGkuZGVjYXk9YSxpLmFjY3VtdWxhdGVkRmlyc3RNb21lbnQ9W10saS5hY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybT1bXSxWZShmdW5jdGlvbigpe2kuaXRlcmF0aW9uPUNuKDApLnZhcmlhYmxlKCksaS5hY2NCZXRhMT1DbihuKS52YXJpYWJsZSgpfSksbnVsbD09byYmKGkuZXBzaWxvbj1TdC5iYWNrZW5kLmVwc2lsb24oKSksaX1yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj1BcnJheS5pc0FycmF5KHQpP3QubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KTpPYmplY3Qua2V5cyh0KTtWZShmdW5jdGlvbigpe3ZhciByPVl1KDEsZS5hY2NCZXRhMSksbz1NdSgtZS5sZWFybmluZ1JhdGUsZS5pdGVyYXRpb24ubXVsKGUuZGVjYXkpLmFkZCgxKSk7bi5mb3JFYWNoKGZ1bmN0aW9uKG4sYSl7dmFyIGk9U3QucmVnaXN0ZXJlZFZhcmlhYmxlc1tuXTtudWxsPT1lLmFjY3VtdWxhdGVkRmlyc3RNb21lbnRbYV0mJihlLmFjY3VtdWxhdGVkRmlyc3RNb21lbnRbYV09e29yaWdpbmFsTmFtZTpuK1wiL21cIix2YXJpYWJsZTpNbihpKS52YXJpYWJsZSghMSl9KSxudWxsPT1lLmFjY3VtdWxhdGVkV2VpZ2h0ZWRJbmZOb3JtW2FdJiYoZS5hY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybVthXT17b3JpZ2luYWxOYW1lOm4rXCIvdlwiLHZhcmlhYmxlOk1uKGkpLnZhcmlhYmxlKCExKX0pO3ZhciBzPUFycmF5LmlzQXJyYXkodCk/dFthXS50ZW5zb3I6dFtuXTtpZihudWxsIT1zKXt2YXIgdT1lLmFjY3VtdWxhdGVkRmlyc3RNb21lbnRbYV0udmFyaWFibGUsbD1lLmFjY3VtdWxhdGVkV2VpZ2h0ZWRJbmZOb3JtW2FdLnZhcmlhYmxlLGM9dS5tdWwoZS5iZXRhMSkuYWRkKHMubXVsKDEtZS5iZXRhMSkpLGg9bC5tdWwoZS5iZXRhMikscD1zLmFicygpLGY9aC5tYXhpbXVtKHApO3UuYXNzaWduKGMpLGwuYXNzaWduKGYpO3ZhciBkPW8uZGl2KHIpLm11bChjLmRpdihmLmFkZChlLmVwc2lsb24pKSkuYWRkKGkpO2kuYXNzaWduKGQpfX0pLGUuaXRlcmF0aW9uLmFzc2lnbihlLml0ZXJhdGlvbi5hZGQoMSkpLGUuYWNjQmV0YTEuYXNzaWduKGUuYWNjQmV0YTEubXVsKGUuYmV0YTEpKX0pLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5hY2NCZXRhMS5kaXNwb3NlKCksdGhpcy5pdGVyYXRpb24uZGlzcG9zZSgpLG51bGwhPXRoaXMuYWNjdW11bGF0ZWRGaXJzdE1vbWVudCYmemUodGhpcy5hY2N1bXVsYXRlZEZpcnN0TW9tZW50Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSxudWxsIT10aGlzLmFjY3VtdWxhdGVkV2VpZ2h0ZWRJbmZOb3JtJiZ6ZSh0aGlzLmFjY3VtdWxhdGVkV2VpZ2h0ZWRJbmZOb3JtLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiZ2V0V2VpZ2h0cygpIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgQWRhbWF4IHlldC5cIil9KX0pfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwic2V0V2VpZ2h0cygpIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgQWRhbWF4IHlldC5cIil9KX0pfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLGJldGExOnRoaXMuYmV0YTEsYmV0YTI6dGhpcy5iZXRhMixlcHNpbG9uOnRoaXMuZXBzaWxvbixkZWNheTp0aGlzLmRlY2F5fX0sby5mcm9tQ29uZmlnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyB0KGUubGVhcm5pbmdSYXRlLGUuYmV0YTEsZS5iZXRhMixlLmVwc2lsb24sZS5kZWNheSl9LG8uY2xhc3NOYW1lPVwiQWRhbWF4XCIsb30oU3ApO3lwKF9wKTt2YXIgT3A9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlKXt2YXIgbj10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIG4ubGVhcm5pbmdSYXRlPWUsbi5zZXRMZWFybmluZ1JhdGUoZSksbn1yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7KEFycmF5LmlzQXJyYXkodCk/dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pOk9iamVjdC5rZXlzKHQpKS5mb3JFYWNoKGZ1bmN0aW9uKG4scil7dmFyIG89QXJyYXkuaXNBcnJheSh0KT90W3JdLnRlbnNvcjp0W25dO2lmKG51bGwhPW8pe3ZhciBhPVN0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07VmUoZnVuY3Rpb24oKXt2YXIgdD1lLmMubXVsKG8pLmFkZChhKTthLmFzc2lnbih0KX0pfX0pLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5zZXRMZWFybmluZ1JhdGU9ZnVuY3Rpb24odCl7dGhpcy5sZWFybmluZ1JhdGU9dCxudWxsIT10aGlzLmMmJnRoaXMuYy5kaXNwb3NlKCksdGhpcy5jPUdlKENuKC10KSl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmMuZGlzcG9zZSgpfSxvLnByb3RvdHlwZS5nZXRXZWlnaHRzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbih0KXtzd2l0Y2godC5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuc2F2ZUl0ZXJhdGlvbnMoKV07Y2FzZSAxOnJldHVyblsyLFt0LnNlbnQoKV1dfX0pfSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZXh0cmFjdEl0ZXJhdGlvbnModCldO2Nhc2UgMTppZigwIT09KHQ9ZS5zZW50KCkpLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJTR0Qgb3B0aW1pemVyIGRvZXMgbm90IGhhdmUgc2V0dGFibGUgd2VpZ2h0cy5cIik7cmV0dXJuWzJdfX0pfSl9LG8ucHJvdG90eXBlLmdldENvbmZpZz1mdW5jdGlvbigpe3JldHVybntsZWFybmluZ1JhdGU6dGhpcy5sZWFybmluZ1JhdGV9fSxvLmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZS5sZWFybmluZ1JhdGUpfSxvLmNsYXNzTmFtZT1cIlNHRFwiLG99KFNwKTt5cChPcCk7dmFyIEZwPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG8oZSxuLHIpe3ZvaWQgMD09PXImJihyPSExKTt2YXIgbz10LmNhbGwodGhpcyxlKXx8dGhpcztyZXR1cm4gby5sZWFybmluZ1JhdGU9ZSxvLm1vbWVudHVtPW4sby51c2VOZXN0ZXJvdj1yLG8uYWNjdW11bGF0aW9ucz1bXSxvLm09Q24oby5tb21lbnR1bSksb31yZXR1cm4gZShvLHQpLG8ucHJvdG90eXBlLmFwcGx5R3JhZGllbnRzPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7KEFycmF5LmlzQXJyYXkodCk/dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pOk9iamVjdC5rZXlzKHQpKS5mb3JFYWNoKGZ1bmN0aW9uKG4scil7dmFyIG89U3QucmVnaXN0ZXJlZFZhcmlhYmxlc1tuXTtpZihudWxsPT1lLmFjY3VtdWxhdGlvbnNbcl0pe2UuYWNjdW11bGF0aW9uc1tyXT17b3JpZ2luYWxOYW1lOm4rXCIvbW9tZW50dW1cIix2YXJpYWJsZTpWZShmdW5jdGlvbigpe3JldHVybiBNbihvKS52YXJpYWJsZSghMSl9KX19dmFyIGE9ZS5hY2N1bXVsYXRpb25zW3JdLnZhcmlhYmxlLGk9QXJyYXkuaXNBcnJheSh0KT90W3JdLnRlbnNvcjp0W25dO251bGwhPWkmJlZlKGZ1bmN0aW9uKCl7dmFyIHQsbj1lLm0ubXVsKGEpLmFkZChpKTt0PWUudXNlTmVzdGVyb3Y/ZS5jLm11bChpLmFkZChuLm11bChlLm0pKSkuYWRkKG8pOmUuYy5tdWwobikuYWRkKG8pLGEuYXNzaWduKG4pLG8uYXNzaWduKHQpfSl9KSx0aGlzLmluY3JlbWVudEl0ZXJhdGlvbnMoKX0sby5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMubS5kaXNwb3NlKCksbnVsbCE9dGhpcy5hY2N1bXVsYXRpb25zJiZ6ZSh0aGlzLmFjY3VtdWxhdGlvbnMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnZhcmlhYmxlfSkpfSxvLnByb3RvdHlwZS5zZXRNb21lbnR1bT1mdW5jdGlvbih0KXt0aGlzLm1vbWVudHVtPXR9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHQpe3N3aXRjaCh0LmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW3Quc2VudCgpXS5jb25jYXQodGhpcy5hY2N1bXVsYXRpb25zLm1hcChmdW5jdGlvbih0KXtyZXR1cm57bmFtZTp0Lm9yaWdpbmFsTmFtZSx0ZW5zb3I6dC52YXJpYWJsZX19KSldfX0pfSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZXh0cmFjdEl0ZXJhdGlvbnModCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSwhMSx0aGlzLmFjY3VtdWxhdGlvbnM9dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pLFsyXX19KX0pfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLG1vbWVudHVtOnRoaXMubW9tZW50dW0sdXNlTmVzdGVyb3Y6dGhpcy51c2VOZXN0ZXJvdn19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSxlLm1vbWVudHVtLGUudXNlTmVzdGVyb3YpfSxvLmNsYXNzTmFtZT1cIk1vbWVudHVtXCIsb30oT3ApO3lwKEZwKTt2YXIgTXA9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4scixvLGEpe3ZvaWQgMD09PW4mJihuPS45KSx2b2lkIDA9PT1yJiYocj0wKSx2b2lkIDA9PT1vJiYobz1udWxsKSx2b2lkIDA9PT1hJiYoYT0hMSk7dmFyIGk9dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBpLmxlYXJuaW5nUmF0ZT1lLGkuZGVjYXk9bixpLm1vbWVudHVtPXIsaS5lcHNpbG9uPW8saS5hY2N1bXVsYXRlZE1lYW5TcXVhcmVzPVtdLGkuYWNjdW11bGF0ZWRNb21lbnRzPVtdLGkuYWNjdW11bGF0ZWRNZWFuR3JhZHM9W10saS5jZW50ZXJlZD1hLG51bGw9PW8mJihpLmVwc2lsb249U3QuYmFja2VuZC5lcHNpbG9uKCkpLGl9cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS5hcHBseUdyYWRpZW50cz1mdW5jdGlvbih0KXt2YXIgZT10aGlzOyhBcnJheS5pc0FycmF5KHQpP3QubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KTpPYmplY3Qua2V5cyh0KSkuZm9yRWFjaChmdW5jdGlvbihuLHIpe3ZhciBvPVN0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07bnVsbD09ZS5hY2N1bXVsYXRlZE1lYW5TcXVhcmVzW3JdJiYoZS5hY2N1bXVsYXRlZE1lYW5TcXVhcmVzW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9ybXNcIix2YXJpYWJsZTpWZShmdW5jdGlvbigpe3JldHVybiBNbihvKS52YXJpYWJsZSghMSl9KX0pLG51bGw9PWUuYWNjdW11bGF0ZWRNb21lbnRzW3JdJiYoZS5hY2N1bXVsYXRlZE1vbWVudHNbcl09e29yaWdpbmFsTmFtZTpuK1wiL21vbWVudHVtXCIsdmFyaWFibGU6VmUoZnVuY3Rpb24oKXtyZXR1cm4gTW4obykudmFyaWFibGUoITEpfSl9KSxudWxsPT1lLmFjY3VtdWxhdGVkTWVhbkdyYWRzW3JdJiZlLmNlbnRlcmVkJiYoZS5hY2N1bXVsYXRlZE1lYW5HcmFkc1tyXT17b3JpZ2luYWxOYW1lOm4rXCIvbWdcIix2YXJpYWJsZTpWZShmdW5jdGlvbigpe3JldHVybiBNbihvKS52YXJpYWJsZSghMSl9KX0pO3ZhciBhPUFycmF5LmlzQXJyYXkodCk/dFtyXS50ZW5zb3I6dFtuXTtpZihudWxsIT1hKXt2YXIgaT1lLmFjY3VtdWxhdGVkTWVhblNxdWFyZXNbcl0udmFyaWFibGUscz1lLmFjY3VtdWxhdGVkTW9tZW50c1tyXS52YXJpYWJsZTtWZShmdW5jdGlvbigpe3ZhciB0PWkubXVsKGUuZGVjYXkpLmFkZChhLnNxdWFyZSgpLm11bCgxLWUuZGVjYXkpKTtpZihlLmNlbnRlcmVkKXt2YXIgbj1lLmFjY3VtdWxhdGVkTWVhbkdyYWRzW3JdLnZhcmlhYmxlLHU9bi5tdWwoZS5kZWNheSkuYWRkKGEubXVsKDEtZS5kZWNheSkpLGw9cy5tdWwoZS5tb21lbnR1bSkuYWRkKGEubXVsKGUubGVhcm5pbmdSYXRlKS5kaXYodC5zdWIodS5zcXVhcmUoKS5hZGQoZS5lcHNpbG9uKSkuc3FydCgpKSk7aS5hc3NpZ24odCksbi5hc3NpZ24odSkscy5hc3NpZ24obCk7dmFyIGM9by5zdWIobCk7by5hc3NpZ24oYyl9ZWxzZXt2YXIgaD1pLm11bChlLmRlY2F5KS5hZGQoYS5zcXVhcmUoKS5tdWwoMS1lLmRlY2F5KSk7bD1zLm11bChlLm1vbWVudHVtKS5hZGQoYS5tdWwoZS5sZWFybmluZ1JhdGUpLmRpdihoLmFkZChlLmVwc2lsb24pLnNxcnQoKSkpO2kuYXNzaWduKGgpLHMuYXNzaWduKGwpO2M9by5zdWIobCk7by5hc3NpZ24oYyl9fSl9fSksdGhpcy5pbmNyZW1lbnRJdGVyYXRpb25zKCl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXtudWxsIT10aGlzLmFjY3VtdWxhdGVkTWVhblNxdWFyZXMmJnplKHRoaXMuYWNjdW11bGF0ZWRNZWFuU3F1YXJlcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSksbnVsbCE9dGhpcy5hY2N1bXVsYXRlZE1lYW5HcmFkcyYmdGhpcy5jZW50ZXJlZCYmemUodGhpcy5hY2N1bXVsYXRlZE1lYW5HcmFkcy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSksbnVsbCE9dGhpcy5hY2N1bXVsYXRlZE1vbWVudHMmJnplKHRoaXMuYWNjdW11bGF0ZWRNb21lbnRzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciB0O3JldHVybiByKHRoaXMsZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDpyZXR1cm4gdD10aGlzLmFjY3VtdWxhdGVkTWVhblNxdWFyZXMuY29uY2F0KHRoaXMuYWNjdW11bGF0ZWRNb21lbnRzKSx0aGlzLmNlbnRlcmVkJiZ0LnB1c2guYXBwbHkodCx0aGlzLmFjY3VtdWxhdGVkTWVhbkdyYWRzKSxbNCx0aGlzLnNhdmVJdGVyYXRpb25zKCldO2Nhc2UgMTpyZXR1cm5bMixbZS5zZW50KCldLmNvbmNhdCh0Lm1hcChmdW5jdGlvbih0KXtyZXR1cm57bmFtZTp0Lm9yaWdpbmFsTmFtZSx0ZW5zb3I6dC52YXJpYWJsZX19KSldfX0pfSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihuKXtzd2l0Y2gobi5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZXh0cmFjdEl0ZXJhdGlvbnModCldO2Nhc2UgMTpyZXR1cm4gdD1uLnNlbnQoKSxlPXRoaXMuY2VudGVyZWQ/dC5sZW5ndGgvMzp0Lmxlbmd0aC8yLCExLHRoaXMuYWNjdW11bGF0ZWRNZWFuU3F1YXJlcz10LnNsaWNlKDAsZSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSx0aGlzLmFjY3VtdWxhdGVkTW9tZW50cz10LnNsaWNlKGUsMiplKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pLHRoaXMuY2VudGVyZWQmJih0aGlzLmFjY3VtdWxhdGVkTWVhbkdyYWRzPXQuc2xpY2UoMiplLDMqZSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSksWzJdfX0pfSl9LG8ucHJvdG90eXBlLmdldENvbmZpZz1mdW5jdGlvbigpe3JldHVybntsZWFybmluZ1JhdGU6dGhpcy5sZWFybmluZ1JhdGUsZGVjYXk6dGhpcy5kZWNheSxtb21lbnR1bTp0aGlzLm1vbWVudHVtLGVwc2lsb246dGhpcy5lcHNpbG9uLGNlbnRlcmVkOnRoaXMuY2VudGVyZWR9fSxvLmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZS5sZWFybmluZ1JhdGUsZS5kZWNheSxlLm1vbWVudHVtLGUuZXBzaWxvbixlLmNlbnRlcmVkKX0sby5jbGFzc05hbWU9XCJSTVNQcm9wXCIsb30oU3ApO3lwKE1wKTt2YXIgQnA9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXJldHVybiB0LnNnZD1mdW5jdGlvbih0KXtyZXR1cm4gbmV3IE9wKHQpfSx0Lm1vbWVudHVtPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49ITEpLG5ldyBGcCh0LGUsbil9LHQucm1zcHJvcD1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB2b2lkIDA9PT1lJiYoZT0uOSksdm9pZCAwPT09biYmKG49MCksdm9pZCAwPT09ciYmKHI9bnVsbCksdm9pZCAwPT09byYmKG89ITEpLG5ldyBNcCh0LGUsbixyLG8pfSx0LmFkYW09ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHZvaWQgMD09PXQmJih0PS4wMDEpLHZvaWQgMD09PWUmJihlPS45KSx2b2lkIDA9PT1uJiYobj0uOTk5KSx2b2lkIDA9PT1yJiYocj1udWxsKSxuZXcgRHAodCxlLG4scil9LHQuYWRhZGVsdGE9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT10JiYodD0uMDAxKSx2b2lkIDA9PT1lJiYoZT0uOTUpLHZvaWQgMD09PW4mJihuPW51bGwpLG5ldyBBcCh0LGUsbil9LHQuYWRhbWF4PWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHZvaWQgMD09PXQmJih0PS4wMDIpLHZvaWQgMD09PWUmJihlPS45KSx2b2lkIDA9PT1uJiYobj0uOTk5KSx2b2lkIDA9PT1yJiYocj1udWxsKSx2b2lkIDA9PT1vJiYobz0wKSxuZXcgX3AodCxlLG4scixvKX0sdC5hZGFncmFkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPS4xKSxuZXcgVHAodCxlKX0sdH0oKSxQcD17c2dkOkJwLnNnZCxtb21lbnR1bTpCcC5tb21lbnR1bSxhZGFkZWx0YTpCcC5hZGFkZWx0YSxhZGFncmFkOkJwLmFkYWdyYWQscm1zcHJvcDpCcC5ybXNwcm9wLGFkYW1heDpCcC5hZGFtYXgsYWRhbTpCcC5hZGFtfSxMcD1cInVuZGVmaW5lZFwiIT10eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lP3JlcXVlc3RBbmltYXRpb25GcmFtZTpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCgpfTtmdW5jdGlvbiBXcCgpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0KXtyZXR1cm4gTHAoZnVuY3Rpb24oKXtyZXR1cm4gdCgpfSl9KX11dD1jaDtleHBvcnR7QXAgYXMgQWRhZGVsdGFPcHRpbWl6ZXIsVHAgYXMgQWRhZ3JhZE9wdGltaXplcixEcCBhcyBBZGFtT3B0aW1pemVyLF9wIGFzIEFkYW1heE9wdGltaXplcixaciBhcyBEYXRhU3RvcmFnZSxpIGFzIEVOVixvIGFzIEVudmlyb25tZW50LHRvIGFzIEtlcm5lbEJhY2tlbmQsRnAgYXMgTW9tZW50dW1PcHRpbWl6ZXIsU3AgYXMgT3B0aW1pemVyLE1wIGFzIFJNU1Byb3BPcHRpbWl6ZXIscHQgYXMgUmFuayxQYyBhcyBSZWR1Y3Rpb24sT3AgYXMgU0dET3B0aW1pemVyLGN0IGFzIFRlbnNvcixpdCBhcyBUZW5zb3JCdWZmZXIsaHQgYXMgVmFyaWFibGUsVHMgYXMgYWJzLERzIGFzIGFjb3MsX3MgYXMgYWNvc2gsRHUgYXMgYWRkLF91IGFzIGFkZE4sT3UgYXMgYWRkU3RyaWN0LFlsIGFzIGFsbCxRbCBhcyBhbnksSmwgYXMgYXJnTWF4LFpsIGFzIGFyZ01pbixPcyBhcyBhc2luLEZzIGFzIGFzaW5oLE1zIGFzIGF0YW4sRnUgYXMgYXRhbjIsQnMgYXMgYXRhbmgsVWwgYXMgYXZnUG9vbCxHbCBhcyBhdmdQb29sM2QsSmUgYXMgYmFja2VuZCxibyBhcyBiYWNrZW5kX3V0aWwsbWMgYXMgYmFzaWNMU1RNQ2VsbCx3dSBhcyBiYXRjaE5vcm0sQ3UgYXMgYmF0Y2hOb3JtMmQsRXUgYXMgYmF0Y2hOb3JtM2QsUnUgYXMgYmF0Y2hOb3JtNGQsYnUgYXMgYmF0Y2hOb3JtYWxpemF0aW9uLGd1IGFzIGJhdGNoTm9ybWFsaXphdGlvbjJkLHl1IGFzIGJhdGNoTm9ybWFsaXphdGlvbjNkLHh1IGFzIGJhdGNoTm9ybWFsaXphdGlvbjRkLG5yIGFzIGJhdGNoVG9TcGFjZU5ELGRsIGFzIGJvb2xlYW5NYXNrQXN5bmMsdnAgYXMgYnJvd3Nlcix0ciBhcyBidWZmZXIscnIgYXMgY2FzdCxQcyBhcyBjZWlsLExzIGFzIGNsaXBCeVZhbHVlLG9yIGFzIGNsb25lLGduIGFzIGNvbXBsZXgsQm4gYXMgY29uY2F0LFBuIGFzIGNvbmNhdDFkLExuIGFzIGNvbmNhdDJkLFduIGFzIGNvbmNhdDNkLFVuIGFzIGNvbmNhdDRkLHlsIGFzIGNvbnYxZCx4bCBhcyBjb252MmQsTmwgYXMgY29udjJkVHJhbnNwb3NlLGJsIGFzIGNvbnYzZCxTbCBhcyBjb252M2RUcmFuc3Bvc2UsV3MgYXMgY29zLFVzIGFzIGNvc2gsYXIgYXMgY3Vtc3VtLFhyIGFzIGN1c3RvbUdyYWQsQmUgYXMgZGVwcmVjYXRpb25XYXJuLGlyIGFzIGRlcHRoVG9TcGFjZSxFbCBhcyBkZXB0aHdpc2VDb252MmQsQWMgYXMgZGlhZyxNZSBhcyBkaXNhYmxlRGVwcmVjYXRpb25XYXJuaW5ncyx6ZSBhcyBkaXNwb3NlLFBlIGFzIGRpc3Bvc2VWYXJpYWJsZXMsTXUgYXMgZGl2LEJ1IGFzIGRpdlN0cmljdCxUbCBhcyBkb3QsVGMgYXMgZHJvcG91dCxzYyBhcyBlbHUsRmUgYXMgZW5hYmxlRGVidWdNb2RlLE9lIGFzIGVuYWJsZVByb2RNb2RlLExlIGFzIGVuZ2luZSx1IGFzIGVudmlyb25tZW50LEp1IGFzIGVxdWFsLFp1IGFzIGVxdWFsU3RyaWN0LFZzIGFzIGVyZix6cyBhcyBleHAsc3IgYXMgZXhwYW5kRGltcyxHcyBhcyBleHBtMSx1ciBhcyBleWUsQ2MgYXMgZmZ0LERuIGFzIGZpbGwsWGUgYXMgZmluZEJhY2tlbmQsWWUgYXMgZmluZEJhY2tlbmRGYWN0b3J5LEhzIGFzIGZsb29yLFB1IGFzIGZsb29yRGl2LEZjIGFzIGZyYW1lLGxoIGFzIGZ1c2VkLHBsIGFzIGdhdGhlcixTYyBhcyBnYXRoZXJORCxLZSBhcyBnZXRCYWNrZW5kLEhyIGFzIGdyYWQscXIgYXMgZ3JhZHMsdGwgYXMgZ3JlYXRlcixlbCBhcyBncmVhdGVyRXF1YWwsbmwgYXMgZ3JlYXRlckVxdWFsU3RyaWN0LHJsIGFzIGdyZWF0ZXJTdHJpY3QsT2MgYXMgaGFtbWluZ1dpbmRvdyxfYyBhcyBoYW5uV2luZG93LEVjIGFzIGlmZnQseG4gYXMgaW1hZyxhaCBhcyBpbWFnZSxMYyBhcyBpblRvcEtBc3luYyxocCBhcyBpbyxJYyBhcyBpcmZmdCxudSBhcyBpc0Zpbml0ZSxldSBhcyBpc0luZix0dSBhcyBpc05hTixHZSBhcyBrZWVwLHVjIGFzIGxlYWt5UmVsdSxvbCBhcyBsZXNzLGFsIGFzIGxlc3NFcXVhbCxpbCBhcyBsZXNzRXF1YWxTdHJpY3Qsc2wgYXMgbGVzc1N0cmljdCxKYyBhcyBsaW5hbGcsX24gYXMgbGluc3BhY2UsZGMgYXMgbG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb24scXMgYXMgbG9nLCRzIGFzIGxvZzFwLEtzIGFzIGxvZ1NpZ21vaWQsSnIgYXMgbG9nU29mdG1heCx0YyBhcyBsb2dTdW1FeHAsSXUgYXMgbG9naWNhbEFuZCxrdSBhcyBsb2dpY2FsTm90LE51IGFzIGxvZ2ljYWxPcixTdSBhcyBsb2dpY2FsWG9yLGpjIGFzIGxvc3NlcyxBbCBhcyBtYXRNdWwsZnAgYXMgbWF0aCxlYyBhcyBtYXgsV2wgYXMgbWF4UG9vbCx6bCBhcyBtYXhQb29sM2QsTHUgYXMgbWF4aW11bSxXdSBhcyBtYXhpbXVtU3RyaWN0LG5jIGFzIG1lYW4sV2UgYXMgbWVtb3J5LHJjIGFzIG1pbixVdSBhcyBtaW5pbXVtLFZ1IGFzIG1pbmltdW1TdHJpY3QsenUgYXMgbW9kLEd1IGFzIG1vZFN0cmljdCxvYyBhcyBtb21lbnRzLHljIGFzIG1vdmluZ0F2ZXJhZ2UsSHUgYXMgbXVsLHF1IGFzIG11bFN0cmljdCxnYyBhcyBtdWx0aVJOTkNlbGwsbHIgYXMgbXVsdGlub21pYWwsanMgYXMgbmVnLFdwIGFzIG5leHRGcmFtZSx2YyBhcyBub3JtLHVsIGFzIG5vdEVxdWFsLGxsIGFzIG5vdEVxdWFsU3RyaWN0LGNyIGFzIG9uZUhvdCxBbiBhcyBvbmVzLEZuIGFzIG9uZXNMaWtlLG1uIGFzIG9wLERsIGFzIG91dGVyUHJvZHVjdCxociBhcyBwYWQscHIgYXMgcGFkMWQsZnIgYXMgcGFkMmQsZHIgYXMgcGFkM2QsdnIgYXMgcGFkNGQsVmwgYXMgcG9vbCwkdSBhcyBwb3csS3UgYXMgcG93U3RyaWN0LGxjIGFzIHByZWx1LGVyIGFzIHByaW50LGljIGFzIHByb2QsVWUgYXMgcHJvZmlsZSxtciBhcyByYW5kLHlyIGFzIHJhbmRvbUdhbW1hLGdyIGFzIHJhbmRvbU5vcm1hbCx4ciBhcyByYW5kb21Vbmlmb3JtLE9uIGFzIHJhbmdlLCRlIGFzIHJlYWR5LHluIGFzIHJlYWwsWHMgYXMgcmVjaXByb2NhbCxRZSBhcyByZWdpc3RlckJhY2tlbmQsY2MgYXMgcmVsdSxoYyBhcyByZWx1NixqZSBhcyByZW1vdmVCYWNrZW5kLGJyIGFzIHJlc2hhcGUsX2wgYXMgcmV2ZXJzZSxPbCBhcyByZXZlcnNlMWQsRmwgYXMgcmV2ZXJzZTJkLE1sIGFzIHJldmVyc2UzZCxCbCBhcyByZXZlcnNlNGQsUmMgYXMgcmZmdCxZcyBhcyByb3VuZCxRcyBhcyByc3FydCxDbiBhcyBzY2FsYXIsd2MgYXMgc2NhdHRlck5ELHBjIGFzIHNlbHUsa2wgYXMgc2VwYXJhYmxlQ29udjJkLHhwIGFzIHNlcmlhbGl6YXRpb24scWUgYXMgc2V0QmFja2VuZCxaZSBhcyBzZXRQbGF0Zm9ybSxOciBhcyBzZXRkaWZmMWRBc3luYyxKcyBhcyBzaWdtb2lkLFpzIGFzIHNpZ24sQmMgYXMgc2lnbmFsLHJ1IGFzIHNpbixvdSBhcyBzaW5oLEhsIGFzIHNsaWNlLHFsIGFzIHNsaWNlMWQsJGwgYXMgc2xpY2UyZCxLbCBhcyBzbGljZTNkLGpsIGFzIHNsaWNlNGQsUXIgYXMgc29mdG1heCxhdSBhcyBzb2Z0cGx1cyx3ciBhcyBzcGFjZVRvQmF0Y2hORCxOYyBhcyBzcGFyc2VUb0RlbnNlLGtjIGFzIHNwZWN0cmFsLFZuIGFzIHNwbGl0LGl1IGFzIHNxcnQsc3UgYXMgc3F1YXJlLGp1IGFzIHNxdWFyZWREaWZmZXJlbmNlLFh1IGFzIHNxdWFyZWREaWZmZXJlbmNlU3RyaWN0LENyIGFzIHNxdWVlemUsRXIgYXMgc3RhY2ssdXUgYXMgc3RlcCxNYyBhcyBzdGZ0LHhjIGFzIHN0cmlkZWRTbGljZSxZdSBhcyBzdWIsUXUgYXMgc3ViU3RyaWN0LGFjIGFzIHN1bSxsdSBhcyB0YW4sY3UgYXMgdGFuaCxibiBhcyB0ZW5zb3IsRW4gYXMgdGVuc29yMWQsUm4gYXMgdGVuc29yMmQsSW4gYXMgdGVuc29yM2Qsa24gYXMgdGVuc29yNGQsTm4gYXMgdGVuc29yNWQsU24gYXMgdGVuc29yNmQsSXQgYXMgdGVuc29yX3V0aWwsSXAgYXMgdGVzdF91dGlsLFZlIGFzIHRpZHksUnIgYXMgdGlsZSxIZSBhcyB0aW1lLGJjIGFzIHRvcGssUHAgYXMgdHJhaW4sZmMgYXMgdHJhbnNwb3NlLElyIGFzIHRydW5jYXRlZE5vcm1hbCxmbCBhcyB1bnNvcnRlZFNlZ21lbnRTdW0sa3IgYXMgdW5zdGFjayxZIGFzIHV0aWwsJHIgYXMgdmFsdWVBbmRHcmFkLEtyIGFzIHZhbHVlQW5kR3JhZHMsZ3QgYXMgdmFyaWFibGUsanIgYXMgdmFyaWFibGVHcmFkcyxrcCBhcyB2ZXJzaW9uX2NvcmUsTnAgYXMgd2ViZ2wsQXUgYXMgd2hlcmUsVHUgYXMgd2hlcmVBc3luYyxUbiBhcyB6ZXJvcyxNbiBhcyB6ZXJvc0xpa2V9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGYtY29yZS5lc20uanMubWFwXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8ZmVyb3NzQGZlcm9zcy5vcmc+IDxodHRwOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbnZhciBiYXNlNjQgPSByZXF1aXJlKCdiYXNlNjQtanMnKVxudmFyIGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbmV4cG9ydHMuQnVmZmVyID0gQnVmZmVyXG5leHBvcnRzLlNsb3dCdWZmZXIgPSBTbG93QnVmZmVyXG5leHBvcnRzLklOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbmV4cG9ydHMua01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIHRyeSB7XG4gICAgdmFyIGFyciA9IG5ldyBVaW50OEFycmF5KDEpXG4gICAgYXJyLl9fcHJvdG9fXyA9IHtfX3Byb3RvX186IFVpbnQ4QXJyYXkucHJvdG90eXBlLCBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH19XG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDIgJiYgLy8gdHlwZWQgYXJyYXkgaW5zdGFuY2VzIGNhbiBiZSBhdWdtZW50ZWRcbiAgICAgICAgdHlwZW9mIGFyci5zdWJhcnJheSA9PT0gJ2Z1bmN0aW9uJyAmJiAvLyBjaHJvbWUgOS0xMCBsYWNrIGBzdWJhcnJheWBcbiAgICAgICAgYXJyLnN1YmFycmF5KDEsIDEpLmJ5dGVMZW5ndGggPT09IDAgLy8gaWUxMCBoYXMgYnJva2VuIGBzdWJhcnJheWBcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbmZ1bmN0aW9uIGtNYXhMZW5ndGggKCkge1xuICByZXR1cm4gQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgICA/IDB4N2ZmZmZmZmZcbiAgICA6IDB4M2ZmZmZmZmZcbn1cblxuZnVuY3Rpb24gY3JlYXRlQnVmZmVyICh0aGF0LCBsZW5ndGgpIHtcbiAgaWYgKGtNYXhMZW5ndGgoKSA8IGxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHR5cGVkIGFycmF5IGxlbmd0aCcpXG4gIH1cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgICB0aGF0Ll9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjazogUmV0dXJuIGFuIG9iamVjdCBpbnN0YW5jZSBvZiB0aGUgQnVmZmVyIGNsYXNzXG4gICAgaWYgKHRoYXQgPT09IG51bGwpIHtcbiAgICAgIHRoYXQgPSBuZXcgQnVmZmVyKGxlbmd0aClcbiAgICB9XG4gICAgdGhhdC5sZW5ndGggPSBsZW5ndGhcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogVGhlIEJ1ZmZlciBjb25zdHJ1Y3RvciByZXR1cm5zIGluc3RhbmNlcyBvZiBgVWludDhBcnJheWAgdGhhdCBoYXZlIHRoZWlyXG4gKiBwcm90b3R5cGUgY2hhbmdlZCB0byBgQnVmZmVyLnByb3RvdHlwZWAuIEZ1cnRoZXJtb3JlLCBgQnVmZmVyYCBpcyBhIHN1YmNsYXNzIG9mXG4gKiBgVWludDhBcnJheWAsIHNvIHRoZSByZXR1cm5lZCBpbnN0YW5jZXMgd2lsbCBoYXZlIGFsbCB0aGUgbm9kZSBgQnVmZmVyYCBtZXRob2RzXG4gKiBhbmQgdGhlIGBVaW50OEFycmF5YCBtZXRob2RzLiBTcXVhcmUgYnJhY2tldCBub3RhdGlvbiB3b3JrcyBhcyBleHBlY3RlZCAtLSBpdFxuICogcmV0dXJucyBhIHNpbmdsZSBvY3RldC5cbiAqXG4gKiBUaGUgYFVpbnQ4QXJyYXlgIHByb3RvdHlwZSByZW1haW5zIHVubW9kaWZpZWQuXG4gKi9cblxuZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAgIHZhbHVlOiBudWxsLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKG9iaikpIHtcbiAgICB2YXIgbGVuID0gY2hlY2tlZChvYmoubGVuZ3RoKSB8IDBcbiAgICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbilcblxuICAgIGlmICh0aGF0Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoYXRcbiAgICB9XG5cbiAgICBvYmouY29weSh0aGF0LCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIHRoYXRcbiAgfVxuXG4gIGlmIChvYmopIHtcbiAgICBpZiAoKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSB8fCAnbGVuZ3RoJyBpbiBvYmopIHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgaXNuYW4ob2JqLmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUJ1ZmZlcih0aGF0LCAwKVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UodGhhdCwgb2JqKVxuICAgIH1cblxuICAgIGlmIChvYmoudHlwZSA9PT0gJ0J1ZmZlcicgJiYgaXNBcnJheShvYmouZGF0YSkpIHtcbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iai5kYXRhKVxuICAgIH1cbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcsIEJ1ZmZlciwgQXJyYXlCdWZmZXIsIEFycmF5LCBvciBhcnJheS1saWtlIG9iamVjdC4nKVxufVxuXG5mdW5jdGlvbiBjaGVja2VkIChsZW5ndGgpIHtcbiAgLy8gTm90ZTogY2Fubm90IHVzZSBgbGVuZ3RoIDwga01heExlbmd0aCgpYCBoZXJlIGJlY2F1c2UgdGhhdCBmYWlscyB3aGVuXG4gIC8vIGxlbmd0aCBpcyBOYU4gKHdoaWNoIGlzIG90aGVyd2lzZSBjb2VyY2VkIHRvIHplcm8uKVxuICBpZiAobGVuZ3RoID49IGtNYXhMZW5ndGgoKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIGFsbG9jYXRlIEJ1ZmZlciBsYXJnZXIgdGhhbiBtYXhpbXVtICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICdzaXplOiAweCcgKyBrTWF4TGVuZ3RoKCkudG9TdHJpbmcoMTYpICsgJyBieXRlcycpXG4gIH1cbiAgcmV0dXJuIGxlbmd0aCB8IDBcbn1cblxuZnVuY3Rpb24gU2xvd0J1ZmZlciAobGVuZ3RoKSB7XG4gIGlmICgrbGVuZ3RoICE9IGxlbmd0aCkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGVxZXFlcVxuICAgIGxlbmd0aCA9IDBcbiAgfVxuICByZXR1cm4gQnVmZmVyLmFsbG9jKCtsZW5ndGgpXG59XG5cbkJ1ZmZlci5pc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyIChiKSB7XG4gIHJldHVybiAhIShiICE9IG51bGwgJiYgYi5faXNCdWZmZXIpXG59XG5cbkJ1ZmZlci5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAoYSwgYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICAgIH1cbiAgICBidWYuY29weShidWZmZXIsIHBvcylcbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBzdHJpbmcgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpIHtcbiAgICByZXR1cm4gc3RyaW5nLmJ5dGVMZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIHN0cmluZyAhPT0gJ3N0cmluZycpIHtcbiAgICBzdHJpbmcgPSAnJyArIHN0cmluZ1xuICB9XG5cbiAgdmFyIGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgaWYgKGxlbiA9PT0gMCkgcmV0dXJuIDBcblxuICAvLyBVc2UgYSBmb3IgbG9vcCB0byBhdm9pZCByZWN1cnNpb25cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGVuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cbkJ1ZmZlci5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aFxuXG5mdW5jdGlvbiBzbG93VG9TdHJpbmcgKGVuY29kaW5nLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG5cbiAgLy8gTm8gbmVlZCB0byB2ZXJpZnkgdGhhdCBcInRoaXMubGVuZ3RoIDw9IE1BWF9VSU5UMzJcIiBzaW5jZSBpdCdzIGEgcmVhZC1vbmx5XG4gIC8vIHByb3BlcnR5IG9mIGEgdHlwZWQgYXJyYXkuXG5cbiAgLy8gVGhpcyBiZWhhdmVzIG5laXRoZXIgbGlrZSBTdHJpbmcgbm9yIFVpbnQ4QXJyYXkgaW4gdGhhdCB3ZSBzZXQgc3RhcnQvZW5kXG4gIC8vIHRvIHRoZWlyIHVwcGVyL2xvd2VyIGJvdW5kcyBpZiB0aGUgdmFsdWUgcGFzc2VkIGlzIG91dCBvZiByYW5nZS5cbiAgLy8gdW5kZWZpbmVkIGlzIGhhbmRsZWQgc3BlY2lhbGx5IGFzIHBlciBFQ01BLTI2MiA2dGggRWRpdGlvbixcbiAgLy8gU2VjdGlvbiAxMy4zLjMuNyBSdW50aW1lIFNlbWFudGljczogS2V5ZWRCaW5kaW5nSW5pdGlhbGl6YXRpb24uXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkIHx8IHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIC8vIFJldHVybiBlYXJseSBpZiBzdGFydCA+IHRoaXMubGVuZ3RoLiBEb25lIGhlcmUgdG8gcHJldmVudCBwb3RlbnRpYWwgdWludDMyXG4gIC8vIGNvZXJjaW9uIGZhaWwgYmVsb3cuXG4gIGlmIChzdGFydCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKGVuZCA8PSAwKSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICAvLyBGb3JjZSBjb2Vyc2lvbiB0byB1aW50MzIuIFRoaXMgd2lsbCBhbHNvIGNvZXJjZSBmYWxzZXkvTmFOIHZhbHVlcyB0byAwLlxuICBlbmQgPj4+PSAwXG4gIHN0YXJ0ID4+Pj0gMFxuXG4gIGlmIChlbmQgPD0gc3RhcnQpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgICByZXR1cm4gYXNjaWlTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxhdGluMVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdXRmMTZsZVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9IChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCBhbmQgYGlzLWJ1ZmZlcmAgKGluIFNhZmFyaSA1LTcpIHRvIGRldGVjdFxuLy8gQnVmZmVyIGluc3RhbmNlcy5cbkJ1ZmZlci5wcm90b3R5cGUuX2lzQnVmZmVyID0gdHJ1ZVxuXG5mdW5jdGlvbiBzd2FwIChiLCBuLCBtKSB7XG4gIHZhciBpID0gYltuXVxuICBiW25dID0gYlttXVxuICBiW21dID0gaVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAxNiA9IGZ1bmN0aW9uIHN3YXAxNiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDQgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDMyLWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAzKVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyAyKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDY0ID0gZnVuY3Rpb24gc3dhcDY0ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA4ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA2NC1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA4KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgNylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgNilcbiAgICBzd2FwKHRoaXMsIGkgKyAyLCBpICsgNSlcbiAgICBzd2FwKHRoaXMsIGkgKyAzLCBpICsgNClcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGggfCAwXG4gIGlmIChsZW5ndGggPT09IDApIHJldHVybiAnJ1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCAwLCBsZW5ndGgpXG4gIHJldHVybiBzbG93VG9TdHJpbmcuYXBwbHkodGhpcywgYXJndW1lbnRzKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmVxdWFscyA9IGZ1bmN0aW9uIGVxdWFscyAoYikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFU1xuICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5tYXRjaCgvLnsyfS9nKS5qb2luKCcgJylcbiAgICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIH1cbiAgcmV0dXJuICc8QnVmZmVyICcgKyBzdHIgKyAnPidcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5jb21wYXJlID0gZnVuY3Rpb24gY29tcGFyZSAodGFyZ2V0LCBzdGFydCwgZW5kLCB0aGlzU3RhcnQsIHRoaXNFbmQpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICB9XG5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICBpZiAoZW5kID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmQgPSB0YXJnZXQgPyB0YXJnZXQubGVuZ3RoIDogMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNTdGFydCA9IDBcbiAgfVxuICBpZiAodGhpc0VuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc0VuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoc3RhcnQgPCAwIHx8IGVuZCA+IHRhcmdldC5sZW5ndGggfHwgdGhpc1N0YXJ0IDwgMCB8fCB0aGlzRW5kID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb3V0IG9mIHJhbmdlIGluZGV4JylcbiAgfVxuXG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCAmJiBzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIGlmICh0aGlzU3RhcnQgPj0gdGhpc0VuZCkge1xuICAgIHJldHVybiAtMVxuICB9XG4gIGlmIChzdGFydCA+PSBlbmQpIHtcbiAgICByZXR1cm4gMVxuICB9XG5cbiAgc3RhcnQgPj4+PSAwXG4gIGVuZCA+Pj49IDBcbiAgdGhpc1N0YXJ0ID4+Pj0gMFxuICB0aGlzRW5kID4+Pj0gMFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQpIHJldHVybiAwXG5cbiAgdmFyIHggPSB0aGlzRW5kIC0gdGhpc1N0YXJ0XG4gIHZhciB5ID0gZW5kIC0gc3RhcnRcbiAgdmFyIGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgdmFyIHRoaXNDb3B5ID0gdGhpcy5zbGljZSh0aGlzU3RhcnQsIHRoaXNFbmQpXG4gIHZhciB0YXJnZXRDb3B5ID0gdGFyZ2V0LnNsaWNlKHN0YXJ0LCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgIGlmICh0aGlzQ29weVtpXSAhPT0gdGFyZ2V0Q29weVtpXSkge1xuICAgICAgeCA9IHRoaXNDb3B5W2ldXG4gICAgICB5ID0gdGFyZ2V0Q29weVtpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbi8vIEZpbmRzIGVpdGhlciB0aGUgZmlyc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0ID49IGBieXRlT2Zmc2V0YCxcbi8vIE9SIHRoZSBsYXN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA8PSBgYnl0ZU9mZnNldGAuXG4vL1xuLy8gQXJndW1lbnRzOlxuLy8gLSBidWZmZXIgLSBhIEJ1ZmZlciB0byBzZWFyY2hcbi8vIC0gdmFsIC0gYSBzdHJpbmcsIEJ1ZmZlciwgb3IgbnVtYmVyXG4vLyAtIGJ5dGVPZmZzZXQgLSBhbiBpbmRleCBpbnRvIGBidWZmZXJgOyB3aWxsIGJlIGNsYW1wZWQgdG8gYW4gaW50MzJcbi8vIC0gZW5jb2RpbmcgLSBhbiBvcHRpb25hbCBlbmNvZGluZywgcmVsZXZhbnQgaXMgdmFsIGlzIGEgc3RyaW5nXG4vLyAtIGRpciAtIHRydWUgZm9yIGluZGV4T2YsIGZhbHNlIGZvciBsYXN0SW5kZXhPZlxuZnVuY3Rpb24gYmlkaXJlY3Rpb25hbEluZGV4T2YgKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIC8vIEVtcHR5IGJ1ZmZlciBtZWFucyBubyBtYXRjaFxuICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkgcmV0dXJuIC0xXG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXRcbiAgaWYgKHR5cGVvZiBieXRlT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gYnl0ZU9mZnNldFxuICAgIGJ5dGVPZmZzZXQgPSAwXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA+IDB4N2ZmZmZmZmYpIHtcbiAgICBieXRlT2Zmc2V0ID0gMHg3ZmZmZmZmZlxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAtMHg4MDAwMDAwMCkge1xuICAgIGJ5dGVPZmZzZXQgPSAtMHg4MDAwMDAwMFxuICB9XG4gIGJ5dGVPZmZzZXQgPSArYnl0ZU9mZnNldCAgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKGlzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJidWZmZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyIGluc3RhbmNlJylcbiAgaWYgKHZhbHVlID4gbWF4IHx8IHZhbHVlIDwgbWluKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IGlzIG91dCBvZiBib3VuZHMnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gYnVmLmxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIHZhciBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50OCA9IGZ1bmN0aW9uIHdyaXRlVUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQxNiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmYgKyB2YWx1ZSArIDFcbiAgZm9yICh2YXIgaSA9IDAsIGogPSBNYXRoLm1pbihidWYubGVuZ3RoIC0gb2Zmc2V0LCAyKTsgaSA8IGo7ICsraSkge1xuICAgIGJ1ZltvZmZzZXQgKyBpXSA9ICh2YWx1ZSAmICgweGZmIDw8ICg4ICogKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkpKSkgPj4+XG4gICAgICAobGl0dGxlRW5kaWFuID8gaSA6IDEgLSBpKSAqIDhcbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4ZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5mdW5jdGlvbiBvYmplY3RXcml0ZVVJbnQzMiAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4pIHtcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgNCk7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgPj4+IChsaXR0bGVFbmRpYW4gPyBpIDogMyAtIGkpICogOCkgJiAweGZmXG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50TEUgPSBmdW5jdGlvbiB3cml0ZUludExFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gMFxuICB2YXIgbXVsID0gMVxuICB2YXIgc3ViID0gMFxuICB0aGlzW29mZnNldF0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgLSAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50QkUgPSBmdW5jdGlvbiB3cml0ZUludEJFICh2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbGltaXQgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCAtIDEpXG5cbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBsaW1pdCAtIDEsIC1saW1pdClcbiAgfVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICBpZiAodmFsdWUgPCAwICYmIHN1YiA9PT0gMCAmJiB0aGlzW29mZnNldCArIGkgKyAxXSAhPT0gMCkge1xuICAgICAgc3ViID0gMVxuICAgIH1cbiAgICB0aGlzW29mZnNldCArIGldID0gKCh2YWx1ZSAvIG11bCkgPj4gMCkgLSBzdWIgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50OCA9IGZ1bmN0aW9uIHdyaXRlSW50OCAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAxLCAweDdmLCAtMHg4MClcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkgdmFsdWUgPSBNYXRoLmZsb29yKHZhbHVlKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmYgKyB2YWx1ZSArIDFcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2TEUgPSBmdW5jdGlvbiB3cml0ZUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlICYgMHhmZilcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSlcbiAgfVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuZnVuY3Rpb24gY2hlY2tJRUVFNzU0IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAob2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0luZGV4IG91dCBvZiByYW5nZScpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRmxvYXQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgNCwgMy40MDI4MjM0NjYzODUyODg2ZSszOCwgLTMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgMjMsIDQpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdExFID0gZnVuY3Rpb24gd3JpdGVGbG9hdExFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0QkUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuZnVuY3Rpb24gd3JpdGVEb3VibGUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgaWYgKGVuZCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdzb3VyY2VFbmQgb3V0IG9mIGJvdW5kcycpXG5cbiAgLy8gQXJlIHdlIG9vYj9cbiAgaWYgKGVuZCA+IHRoaXMubGVuZ3RoKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0IDwgZW5kIC0gc3RhcnQpIHtcbiAgICBlbmQgPSB0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgKyBzdGFydFxuICB9XG5cbiAgdmFyIGxlbiA9IGVuZCAtIHN0YXJ0XG4gIHZhciBpXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCAmJiBzdGFydCA8IHRhcmdldFN0YXJ0ICYmIHRhcmdldFN0YXJ0IDwgZW5kKSB7XG4gICAgLy8gZGVzY2VuZGluZyBjb3B5IGZyb20gZW5kXG4gICAgZm9yIChpID0gbGVuIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2UgaWYgKGxlbiA8IDEwMDAgfHwgIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gYXNjZW5kaW5nIGNvcHkgZnJvbSBzdGFydFxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgdGFyZ2V0W2kgKyB0YXJnZXRTdGFydF0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgVWludDhBcnJheS5wcm90b3R5cGUuc2V0LmNhbGwoXG4gICAgICB0YXJnZXQsXG4gICAgICB0aGlzLnN1YmFycmF5KHN0YXJ0LCBzdGFydCArIGxlbiksXG4gICAgICB0YXJnZXRTdGFydFxuICAgIClcbiAgfVxuXG4gIHJldHVybiBsZW5cbn1cblxuLy8gVXNhZ2U6XG4vLyAgICBidWZmZXIuZmlsbChudW1iZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKGJ1ZmZlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoc3RyaW5nWywgb2Zmc2V0WywgZW5kXV1bLCBlbmNvZGluZ10pXG5CdWZmZXIucHJvdG90eXBlLmZpbGwgPSBmdW5jdGlvbiBmaWxsICh2YWwsIHN0YXJ0LCBlbmQsIGVuY29kaW5nKSB7XG4gIC8vIEhhbmRsZSBzdHJpbmcgY2FzZXM6XG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIGlmICh0eXBlb2Ygc3RhcnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IHN0YXJ0XG4gICAgICBzdGFydCA9IDBcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgZW5kID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBlbmRcbiAgICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gICAgfVxuICAgIGlmICh2YWwubGVuZ3RoID09PSAxKSB7XG4gICAgICB2YXIgY29kZSA9IHZhbC5jaGFyQ29kZUF0KDApXG4gICAgICBpZiAoY29kZSA8IDI1Nikge1xuICAgICAgICB2YWwgPSBjb2RlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbmNvZGluZyAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBlbmNvZGluZyAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2VuY29kaW5nIG11c3QgYmUgYSBzdHJpbmcnKVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJyAmJiAhQnVmZmVyLmlzRW5jb2RpbmcoZW5jb2RpbmcpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgfVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMjU1XG4gIH1cblxuICAvLyBJbnZhbGlkIHJhbmdlcyBhcmUgbm90IHNldCB0byBhIGRlZmF1bHQsIHNvIGNhbiByYW5nZSBjaGVjayBlYXJseS5cbiAgaWYgKHN0YXJ0IDwgMCB8fCB0aGlzLmxlbmd0aCA8IHN0YXJ0IHx8IHRoaXMubGVuZ3RoIDwgZW5kKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ091dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIHN0YXJ0ID0gc3RhcnQgPj4+IDBcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyB0aGlzLmxlbmd0aCA6IGVuZCA+Pj4gMFxuXG4gIGlmICghdmFsKSB2YWwgPSAwXG5cbiAgdmFyIGlcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgZm9yIChpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgICAgdGhpc1tpXSA9IHZhbFxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogdXRmOFRvQnl0ZXMobmV3IEJ1ZmZlcih2YWwsIGVuY29kaW5nKS50b1N0cmluZygpKVxuICAgIHZhciBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBmb3IgKGkgPSAwOyBpIDwgZW5kIC0gc3RhcnQ7ICsraSkge1xuICAgICAgdGhpc1tpICsgc3RhcnRdID0gYnl0ZXNbaSAlIGxlbl1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpc1xufVxuXG4vLyBIRUxQRVIgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT09XG5cbnZhciBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXitcXC8wLTlBLVphLXotX10vZ1xuXG5mdW5jdGlvbiBiYXNlNjRjbGVhbiAoc3RyKSB7XG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHJpbmd0cmltKHN0cikucmVwbGFjZShJTlZBTElEX0JBU0U2NF9SRSwgJycpXG4gIC8vIE5vZGUgY29udmVydHMgc3RyaW5ncyB3aXRoIGxlbmd0aCA8IDIgdG8gJydcbiAgaWYgKHN0ci5sZW5ndGggPCAyKSByZXR1cm4gJydcbiAgLy8gTm9kZSBhbGxvd3MgZm9yIG5vbi1wYWRkZWQgYmFzZTY0IHN0cmluZ3MgKG1pc3NpbmcgdHJhaWxpbmcgPT09KSwgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHdoaWxlIChzdHIubGVuZ3RoICUgNCAhPT0gMCkge1xuICAgIHN0ciA9IHN0ciArICc9J1xuICB9XG4gIHJldHVybiBzdHJcbn1cblxuZnVuY3Rpb24gc3RyaW5ndHJpbSAoc3RyKSB7XG4gIGlmIChzdHIudHJpbSkgcmV0dXJuIHN0ci50cmltKClcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9eXFxzK3xcXHMrJC9nLCAnJylcbn1cblxuZnVuY3Rpb24gdG9IZXggKG4pIHtcbiAgaWYgKG4gPCAxNikgcmV0dXJuICcwJyArIG4udG9TdHJpbmcoMTYpXG4gIHJldHVybiBuLnRvU3RyaW5nKDE2KVxufVxuXG5mdW5jdGlvbiB1dGY4VG9CeXRlcyAoc3RyaW5nLCB1bml0cykge1xuICB1bml0cyA9IHVuaXRzIHx8IEluZmluaXR5XG4gIHZhciBjb2RlUG9pbnRcbiAgdmFyIGxlbmd0aCA9IHN0cmluZy5sZW5ndGhcbiAgdmFyIGxlYWRTdXJyb2dhdGUgPSBudWxsXG4gIHZhciBieXRlcyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIC8vIE5vZGUncyBjb2RlIHNlZW1zIHRvIGJlIGRvaW5nIHRoaXMgYW5kIG5vdCAmIDB4N0YuLlxuICAgIGJ5dGVBcnJheS5wdXNoKHN0ci5jaGFyQ29kZUF0KGkpICYgMHhGRilcbiAgfVxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVUb0J5dGVzIChzdHIsIHVuaXRzKSB7XG4gIHZhciBjLCBoaSwgbG9cbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG5cbiAgICBjID0gc3RyLmNoYXJDb2RlQXQoaSlcbiAgICBoaSA9IGMgPj4gOFxuICAgIGxvID0gYyAlIDI1NlxuICAgIGJ5dGVBcnJheS5wdXNoKGxvKVxuICAgIGJ5dGVBcnJheS5wdXNoKGhpKVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiBiYXNlNjRUb0J5dGVzIChzdHIpIHtcbiAgcmV0dXJuIGJhc2U2NC50b0J5dGVBcnJheShiYXNlNjRjbGVhbihzdHIpKVxufVxuXG5mdW5jdGlvbiBibGl0QnVmZmVyIChzcmMsIGRzdCwgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiBpc25hbiAodmFsKSB7XG4gIHJldHVybiB2YWwgIT09IHZhbCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuIiwiJ3VzZSBzdHJpY3QnXG5cbmV4cG9ydHMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcbmV4cG9ydHMudG9CeXRlQXJyYXkgPSB0b0J5dGVBcnJheVxuZXhwb3J0cy5mcm9tQnl0ZUFycmF5ID0gZnJvbUJ5dGVBcnJheVxuXG52YXIgbG9va3VwID0gW11cbnZhciByZXZMb29rdXAgPSBbXVxudmFyIEFyciA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSAndW5kZWZpbmVkJyA/IFVpbnQ4QXJyYXkgOiBBcnJheVxuXG52YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuZm9yICh2YXIgaSA9IDAsIGxlbiA9IGNvZGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcbiAgbG9va3VwW2ldID0gY29kZVtpXVxuICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbn1cblxuLy8gU3VwcG9ydCBkZWNvZGluZyBVUkwtc2FmZSBiYXNlNjQgc3RyaW5ncywgYXMgTm9kZS5qcyBkb2VzLlxuLy8gU2VlOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9CYXNlNjQjVVJMX2FwcGxpY2F0aW9uc1xucmV2TG9va3VwWyctJy5jaGFyQ29kZUF0KDApXSA9IDYyXG5yZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcblxuZnVuY3Rpb24gZ2V0TGVucyAoYjY0KSB7XG4gIHZhciBsZW4gPSBiNjQubGVuZ3RoXG5cbiAgaWYgKGxlbiAlIDQgPiAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN0cmluZy4gTGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiA0JylcbiAgfVxuXG4gIC8vIFRyaW0gb2ZmIGV4dHJhIGJ5dGVzIGFmdGVyIHBsYWNlaG9sZGVyIGJ5dGVzIGFyZSBmb3VuZFxuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZWF0Z2FtbWl0L2Jhc2U2NC1qcy9pc3N1ZXMvNDJcbiAgdmFyIHZhbGlkTGVuID0gYjY0LmluZGV4T2YoJz0nKVxuICBpZiAodmFsaWRMZW4gPT09IC0xKSB2YWxpZExlbiA9IGxlblxuXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSB2YWxpZExlbiA9PT0gbGVuXG4gICAgPyAwXG4gICAgOiA0IC0gKHZhbGlkTGVuICUgNClcblxuICByZXR1cm4gW3ZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW5dXG59XG5cbi8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoYjY0KSB7XG4gIHZhciBsZW5zID0gZ2V0TGVucyhiNjQpXG4gIHZhciB2YWxpZExlbiA9IGxlbnNbMF1cbiAgdmFyIHBsYWNlSG9sZGVyc0xlbiA9IGxlbnNbMV1cbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIF9ieXRlTGVuZ3RoIChiNjQsIHZhbGlkTGVuLCBwbGFjZUhvbGRlcnNMZW4pIHtcbiAgcmV0dXJuICgodmFsaWRMZW4gKyBwbGFjZUhvbGRlcnNMZW4pICogMyAvIDQpIC0gcGxhY2VIb2xkZXJzTGVuXG59XG5cbmZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG5cbiAgdmFyIGFyciA9IG5ldyBBcnIoX2J5dGVMZW5ndGgoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSlcblxuICB2YXIgY3VyQnl0ZSA9IDBcblxuICAvLyBpZiB0aGVyZSBhcmUgcGxhY2Vob2xkZXJzLCBvbmx5IGdldCB1cCB0byB0aGUgbGFzdCBjb21wbGV0ZSA0IGNoYXJzXG4gIHZhciBsZW4gPSBwbGFjZUhvbGRlcnNMZW4gPiAwXG4gICAgPyB2YWxpZExlbiAtIDRcbiAgICA6IHZhbGlkTGVuXG5cbiAgdmFyIGlcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgMTIpIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDIpXSA8PCA2KSB8XG4gICAgICByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVyc0xlbiA9PT0gMikge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPj4gNClcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDEpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHxcbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCA0KSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPj4gMilcbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gOCkgJiAweEZGXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIHRyaXBsZXRUb0Jhc2U2NCAobnVtKSB7XG4gIHJldHVybiBsb29rdXBbbnVtID4+IDE4ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gMTIgJiAweDNGXSArXG4gICAgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gJiAweDNGXVxufVxuXG5mdW5jdGlvbiBlbmNvZGVDaHVuayAodWludDgsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHRtcFxuICB2YXIgb3V0cHV0ID0gW11cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyBpICs9IDMpIHtcbiAgICB0bXAgPVxuICAgICAgKCh1aW50OFtpXSA8PCAxNikgJiAweEZGMDAwMCkgK1xuICAgICAgKCh1aW50OFtpICsgMV0gPDwgOCkgJiAweEZGMDApICtcbiAgICAgICh1aW50OFtpICsgMl0gJiAweEZGKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZnVuY3Rpb24gZnJvbUJ5dGVBcnJheSAodWludDgpIHtcbiAgdmFyIHRtcFxuICB2YXIgbGVuID0gdWludDgubGVuZ3RoXG4gIHZhciBleHRyYUJ5dGVzID0gbGVuICUgMyAvLyBpZiB3ZSBoYXZlIDEgYnl0ZSBsZWZ0LCBwYWQgMiBieXRlc1xuICB2YXIgcGFydHMgPSBbXVxuICB2YXIgbWF4Q2h1bmtMZW5ndGggPSAxNjM4MyAvLyBtdXN0IGJlIG11bHRpcGxlIG9mIDNcblxuICAvLyBnbyB0aHJvdWdoIHRoZSBhcnJheSBldmVyeSB0aHJlZSBieXRlcywgd2UnbGwgZGVhbCB3aXRoIHRyYWlsaW5nIHN0dWZmIGxhdGVyXG4gIGZvciAodmFyIGkgPSAwLCBsZW4yID0gbGVuIC0gZXh0cmFCeXRlczsgaSA8IGxlbjI7IGkgKz0gbWF4Q2h1bmtMZW5ndGgpIHtcbiAgICBwYXJ0cy5wdXNoKGVuY29kZUNodW5rKFxuICAgICAgdWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKVxuICAgICkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAyXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdICtcbiAgICAgICc9PSdcbiAgICApXG4gIH0gZWxzZSBpZiAoZXh0cmFCeXRlcyA9PT0gMikge1xuICAgIHRtcCA9ICh1aW50OFtsZW4gLSAyXSA8PCA4KSArIHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMTBdICtcbiAgICAgIGxvb2t1cFsodG1wID4+IDQpICYgMHgzRl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgMikgJiAweDNGXSArXG4gICAgICAnPSdcbiAgICApXG4gIH1cblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsImV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIHNjb3BlID0gKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsKSB8fFxuICAgICAgICAgICAgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYpIHx8XG4gICAgICAgICAgICB3aW5kb3c7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG5cbi8vIERPTSBBUElzLCBmb3IgY29tcGxldGVuZXNzXG5cbmV4cG9ydHMuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRUaW1lb3V0LCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCBzY29wZSwgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbChzY29wZSwgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIHNldGltbWVkaWF0ZSBhdHRhY2hlcyBpdHNlbGYgdG8gdGhlIGdsb2JhbCBvYmplY3RcbnJlcXVpcmUoXCJzZXRpbW1lZGlhdGVcIik7XG4vLyBPbiBzb21lIGV4b3RpYyBlbnZpcm9ubWVudHMsIGl0J3Mgbm90IGNsZWFyIHdoaWNoIG9iamVjdCBgc2V0aW1tZWRpYXRlYCB3YXNcbi8vIGFibGUgdG8gaW5zdGFsbCBvbnRvLiAgU2VhcmNoIGVhY2ggcG9zc2liaWxpdHkgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlXG4vLyBgc2V0aW1tZWRpYXRlYCBsaWJyYXJ5LlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbC5zZXRJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuc2V0SW1tZWRpYXRlKTtcbmV4cG9ydHMuY2xlYXJJbW1lZGlhdGUgPSAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIgJiYgc2VsZi5jbGVhckltbWVkaWF0ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHRoaXMgJiYgdGhpcy5jbGVhckltbWVkaWF0ZSk7XG4iLCIoZnVuY3Rpb24gKGdsb2JhbCwgdW5kZWZpbmVkKSB7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICBpZiAoZ2xvYmFsLnNldEltbWVkaWF0ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG5leHRIYW5kbGUgPSAxOyAvLyBTcGVjIHNheXMgZ3JlYXRlciB0aGFuIHplcm9cbiAgICB2YXIgdGFza3NCeUhhbmRsZSA9IHt9O1xuICAgIHZhciBjdXJyZW50bHlSdW5uaW5nQVRhc2sgPSBmYWxzZTtcbiAgICB2YXIgZG9jID0gZ2xvYmFsLmRvY3VtZW50O1xuICAgIHZhciByZWdpc3RlckltbWVkaWF0ZTtcblxuICAgIGZ1bmN0aW9uIHNldEltbWVkaWF0ZShjYWxsYmFjaykge1xuICAgICAgLy8gQ2FsbGJhY2sgY2FuIGVpdGhlciBiZSBhIGZ1bmN0aW9uIG9yIGEgc3RyaW5nXG4gICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24oXCJcIiArIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICAgIC8vIENvcHkgZnVuY3Rpb24gYXJndW1lbnRzXG4gICAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBhcmdzW2ldID0gYXJndW1lbnRzW2kgKyAxXTtcbiAgICAgIH1cbiAgICAgIC8vIFN0b3JlIGFuZCByZWdpc3RlciB0aGUgdGFza1xuICAgICAgdmFyIHRhc2sgPSB7IGNhbGxiYWNrOiBjYWxsYmFjaywgYXJnczogYXJncyB9O1xuICAgICAgdGFza3NCeUhhbmRsZVtuZXh0SGFuZGxlXSA9IHRhc2s7XG4gICAgICByZWdpc3RlckltbWVkaWF0ZShuZXh0SGFuZGxlKTtcbiAgICAgIHJldHVybiBuZXh0SGFuZGxlKys7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaGFuZGxlKSB7XG4gICAgICAgIGRlbGV0ZSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuKHRhc2spIHtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGFzay5jYWxsYmFjaztcbiAgICAgICAgdmFyIGFyZ3MgPSB0YXNrLmFyZ3M7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICBjYWxsYmFjayhhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgY2FsbGJhY2suYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcnVuSWZQcmVzZW50KGhhbmRsZSkge1xuICAgICAgICAvLyBGcm9tIHRoZSBzcGVjOiBcIldhaXQgdW50aWwgYW55IGludm9jYXRpb25zIG9mIHRoaXMgYWxnb3JpdGhtIHN0YXJ0ZWQgYmVmb3JlIHRoaXMgb25lIGhhdmUgY29tcGxldGVkLlwiXG4gICAgICAgIC8vIFNvIGlmIHdlJ3JlIGN1cnJlbnRseSBydW5uaW5nIGEgdGFzaywgd2UnbGwgbmVlZCB0byBkZWxheSB0aGlzIGludm9jYXRpb24uXG4gICAgICAgIGlmIChjdXJyZW50bHlSdW5uaW5nQVRhc2spIHtcbiAgICAgICAgICAgIC8vIERlbGF5IGJ5IGRvaW5nIGEgc2V0VGltZW91dC4gc2V0SW1tZWRpYXRlIHdhcyB0cmllZCBpbnN0ZWFkLCBidXQgaW4gRmlyZWZveCA3IGl0IGdlbmVyYXRlZCBhXG4gICAgICAgICAgICAvLyBcInRvbyBtdWNoIHJlY3Vyc2lvblwiIGVycm9yLlxuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgdGFzayA9IHRhc2tzQnlIYW5kbGVbaGFuZGxlXTtcbiAgICAgICAgICAgIGlmICh0YXNrKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBydW4odGFzayk7XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbW1lZGlhdGUoaGFuZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE5leHRUaWNrSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uICgpIHsgcnVuSWZQcmVzZW50KGhhbmRsZSk7IH0pO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhblVzZVBvc3RNZXNzYWdlKCkge1xuICAgICAgICAvLyBUaGUgdGVzdCBhZ2FpbnN0IGBpbXBvcnRTY3JpcHRzYCBwcmV2ZW50cyB0aGlzIGltcGxlbWVudGF0aW9uIGZyb20gYmVpbmcgaW5zdGFsbGVkIGluc2lkZSBhIHdlYiB3b3JrZXIsXG4gICAgICAgIC8vIHdoZXJlIGBnbG9iYWwucG9zdE1lc3NhZ2VgIG1lYW5zIHNvbWV0aGluZyBjb21wbGV0ZWx5IGRpZmZlcmVudCBhbmQgY2FuJ3QgYmUgdXNlZCBmb3IgdGhpcyBwdXJwb3NlLlxuICAgICAgICBpZiAoZ2xvYmFsLnBvc3RNZXNzYWdlICYmICFnbG9iYWwuaW1wb3J0U2NyaXB0cykge1xuICAgICAgICAgICAgdmFyIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIG9sZE9uTWVzc2FnZSA9IGdsb2JhbC5vbm1lc3NhZ2U7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcG9zdE1lc3NhZ2VJc0FzeW5jaHJvbm91cyA9IGZhbHNlO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShcIlwiLCBcIipcIik7XG4gICAgICAgICAgICBnbG9iYWwub25tZXNzYWdlID0gb2xkT25NZXNzYWdlO1xuICAgICAgICAgICAgcmV0dXJuIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgLy8gSW5zdGFsbHMgYW4gZXZlbnQgaGFuZGxlciBvbiBgZ2xvYmFsYCBmb3IgdGhlIGBtZXNzYWdlYCBldmVudDogc2VlXG4gICAgICAgIC8vICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4vRE9NL3dpbmRvdy5wb3N0TWVzc2FnZVxuICAgICAgICAvLyAqIGh0dHA6Ly93d3cud2hhdHdnLm9yZy9zcGVjcy93ZWItYXBwcy9jdXJyZW50LXdvcmsvbXVsdGlwYWdlL2NvbW1zLmh0bWwjY3Jvc3NEb2N1bWVudE1lc3NhZ2VzXG5cbiAgICAgICAgdmFyIG1lc3NhZ2VQcmVmaXggPSBcInNldEltbWVkaWF0ZSRcIiArIE1hdGgucmFuZG9tKCkgKyBcIiRcIjtcbiAgICAgICAgdmFyIG9uR2xvYmFsTWVzc2FnZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQuc291cmNlID09PSBnbG9iYWwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZXZlbnQuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmRhdGEuaW5kZXhPZihtZXNzYWdlUHJlZml4KSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudCgrZXZlbnQuZGF0YS5zbGljZShtZXNzYWdlUHJlZml4Lmxlbmd0aCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgICAgICAgZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSwgZmFsc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2xvYmFsLmF0dGFjaEV2ZW50KFwib25tZXNzYWdlXCIsIG9uR2xvYmFsTWVzc2FnZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgZ2xvYmFsLnBvc3RNZXNzYWdlKG1lc3NhZ2VQcmVmaXggKyBoYW5kbGUsIFwiKlwiKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsTWVzc2FnZUNoYW5uZWxJbXBsZW1lbnRhdGlvbigpIHtcbiAgICAgICAgdmFyIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcbiAgICAgICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgdmFyIGhhbmRsZSA9IGV2ZW50LmRhdGE7XG4gICAgICAgICAgICBydW5JZlByZXNlbnQoaGFuZGxlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgY2hhbm5lbC5wb3J0Mi5wb3N0TWVzc2FnZShoYW5kbGUpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBodG1sID0gZG9jLmRvY3VtZW50RWxlbWVudDtcbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBhIDxzY3JpcHQ+IGVsZW1lbnQ7IGl0cyByZWFkeXN0YXRlY2hhbmdlIGV2ZW50IHdpbGwgYmUgZmlyZWQgYXN5bmNocm9ub3VzbHkgb25jZSBpdCBpcyBpbnNlcnRlZFxuICAgICAgICAgICAgLy8gaW50byB0aGUgZG9jdW1lbnQuIERvIHNvLCB0aHVzIHF1ZXVpbmcgdXAgdGhlIHRhc2suIFJlbWVtYmVyIHRvIGNsZWFuIHVwIG9uY2UgaXQncyBiZWVuIGNhbGxlZC5cbiAgICAgICAgICAgIHZhciBzY3JpcHQgPSBkb2MuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcbiAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgc2NyaXB0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaHRtbC5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgICAgICAgICAgIHNjcmlwdCA9IG51bGw7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaHRtbC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxTZXRUaW1lb3V0SW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KHJ1bklmUHJlc2VudCwgMCwgaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiBzdXBwb3J0ZWQsIHdlIHNob3VsZCBhdHRhY2ggdG8gdGhlIHByb3RvdHlwZSBvZiBnbG9iYWwsIHNpbmNlIHRoYXQgaXMgd2hlcmUgc2V0VGltZW91dCBldCBhbC4gbGl2ZS5cbiAgICB2YXIgYXR0YWNoVG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiYgT2JqZWN0LmdldFByb3RvdHlwZU9mKGdsb2JhbCk7XG4gICAgYXR0YWNoVG8gPSBhdHRhY2hUbyAmJiBhdHRhY2hUby5zZXRUaW1lb3V0ID8gYXR0YWNoVG8gOiBnbG9iYWw7XG5cbiAgICAvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IGUuZy4gYnJvd3NlcmlmeSBlbnZpcm9ubWVudHMuXG4gICAgaWYgKHt9LnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSBcIltvYmplY3QgcHJvY2Vzc11cIikge1xuICAgICAgICAvLyBGb3IgTm9kZS5qcyBiZWZvcmUgMC45XG4gICAgICAgIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGNhblVzZVBvc3RNZXNzYWdlKCkpIHtcbiAgICAgICAgLy8gRm9yIG5vbi1JRTEwIG1vZGVybiBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsUG9zdE1lc3NhZ2VJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChnbG9iYWwuTWVzc2FnZUNoYW5uZWwpIHtcbiAgICAgICAgLy8gRm9yIHdlYiB3b3JrZXJzLCB3aGVyZSBzdXBwb3J0ZWRcbiAgICAgICAgaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZG9jICYmIFwib25yZWFkeXN0YXRlY2hhbmdlXCIgaW4gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIikpIHtcbiAgICAgICAgLy8gRm9yIElFIDbigJM4XG4gICAgICAgIGluc3RhbGxSZWFkeVN0YXRlQ2hhbmdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZvciBvbGRlciBicm93c2Vyc1xuICAgICAgICBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCk7XG4gICAgfVxuXG4gICAgYXR0YWNoVG8uc2V0SW1tZWRpYXRlID0gc2V0SW1tZWRpYXRlO1xuICAgIGF0dGFjaFRvLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG59KHR5cGVvZiBzZWxmID09PSBcInVuZGVmaW5lZFwiID8gdHlwZW9mIGdsb2JhbCA9PT0gXCJ1bmRlZmluZWRcIiA/IHRoaXMgOiBnbG9iYWwgOiBzZWxmKSk7XG4iLCJpbXBvcnQgKiBhcyB0ZmMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHA1IGZyb20gJy4vaW5kZXgnO1xuXG5cbi8qKlxuICogQSBjbGFzcyB0byBkZXNjcmliZSBhIHRlbnNvciwgYSBnZW5lcmFsaXphdGlvbiBvZiB2ZWN0b3JzIGFuZCBtYXRyaWNlcy5cbiAqIFRlbnNvcnMgY2FuIGJlIHRob3VnaHQgb2YgYXMgKHBvc3NpYmx5KSBtdWx0aWRpbWVuc2lvbmFsIGFycmF5cyB0aGF0IHN1cHBvcnRcbiAqIG1hbnkgdXNlZnVsIG9wZXJhdGlvbnMuIFRoZXkgYXJlIGFwcGxpZWQgdGhyb3VnaG91dCBtYXRoZW1hdGljcywgcGh5c2ljcyxcbiAqIGVuZ2luZWVyaW5nLCBhbmQgY29tcHV0ZXIgc2NpZW5jZS5cbiAqL1xuY2xhc3MgVGVuc29yIHtcbiAgcHVibGljIHRlbnNvcjogdGZjLlZhcmlhYmxlO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RzIGEgbmV3IHRlbnNvciBvYmplY3QuXG4gICAqIFxuICAgKiBAcGFyYW0gb2JqIHRoZSBudW1lcmljYWwgb2JqZWN0IHVzZWQgdG8gY3JlYXRlIHRoZSB0ZW5zb3JcbiAgICogQHBhcmFtIGRpbSAob3B0aW9uYWwpIHRoZSBkaW1lbnNpb25hbGl0eSBvZiB0aGUgcDUuVmVjdG9yIHVzZWRcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9iajogYW55LCBkaW0/OiBudW1iZXIpIHtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdGhpcy50ZW5zb3IgPSB0ZmMudmFyaWFibGUodGZjLnNjYWxhcihvYmopKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgdGhpcy50ZW5zb3IgPSB0ZmMudmFyaWFibGUodGZjLnRlbnNvcihvYmopKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgcDUuVmVjdG9yKSB7XG4gICAgICAgIGlmICghKGRpbSA+PSAyICYmIGRpbSA8PSAzKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncDUuVmVjdG9ycyBtdXN0IGJlIDIgb3IgMy1kaW1lbnNpb25hbC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHYgPSBvYmouYXJyYXkoKS5zbGljZSgwLCBkaW0pO1xuICAgICAgICB0aGlzLnRlbnNvciA9IHRmYy52YXJpYWJsZSh0ZmMudGVuc29yKHYpKTtcbiAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgdGZjLlRlbnNvcikge1xuICAgICAgICB0aGlzLnRlbnNvciA9IHRmYy52YXJpYWJsZShvYmopO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZW5zb3JzIG11c3QgYmUgY3JlYXRlZCBmcm9tIE51bWJlcnMsIEFycmF5cywgb3IgcDUuVmVjdG9ycy4nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgYW55IG5lY2Vzc2FyeSBjb252ZXJzaW9ucyBmcm9tIE51bWJlciBvciBwNS5WZWN0b3IuXG4gICAqIFxuICAgKiBAcGFyYW0gYiAgIHRoZSBpbnB1dCBOdW1iZXIsIHA1LlZlY3Rvciwgb3IgVGVuc29yIHRvIGJlIG1hZGUgY29tcGF0aWJsZVxuICAgKiBAcGFyYW0gZGltIChvcHRpb25hbCkgdGhlIG51bWJlciBvZiBkaW1lbmlvbnMgaW4gYSBwNS5WZWN0b3JcbiAgICogQHJldHVybnMgICB0aGUgZXF1aXZhbGVudCB0ZW5zb3JcbiAgICovXG4gIHByaXZhdGUgaGFuZGxlVHlwZShiOiBhbnksIGRpbT86IG51bWJlcik6IFRlbnNvciB7XG4gICAgbGV0IGJfOiBUZW5zb3I7XG4gICAgaWYgKHR5cGVvZiBiID09PSAnbnVtYmVyJykge1xuICAgICAgYl8gPSBjcmVhdGVUZW5zb3IoYik7XG4gICAgfSBlbHNlIGlmIChiIGluc3RhbmNlb2YgcDUuVmVjdG9yKSB7XG4gICAgICBiXyA9IGNyZWF0ZVRlbnNvcihiLCBkaW0pO1xuICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIFRlbnNvcikge1xuICAgICAgYl8gPSBiO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ09wZXJhdGlvbiBvbmx5IGRlZmluZWQgb24gTnVtYmVycywgcDUuVmVjdG9ycywgb3IgVGVuc29ycy4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYl87XG4gIH1cblxuICAvKipcbiAgICogRXF1YWxpdHkgY2hlY2sgYWdhaW5zdCBhIE51bWJlciwgcDUuVmVjdG9yLCBvciBUZW5zb3IuXG4gICAqIFxuICAgKiBAcGFyYW0gYiAgIHRoZSB0ZW5zb3IgdG8gYmUgY29tcGFyZWRcbiAgICogQHBhcmFtIGRpbSAob3B0aW9uYWwpIHRoZSBkaW1lbnNpb25hbGl0eSBvZiB0aGUgcDUuVmVjdG9yIHVzZWRcbiAgICogQHJldHVybnMgICB3aGV0aGVyIHRoZSBvYmplY3RzIGFyZSBlcXVhbHNcbiAgICovXG4gIGVxdWFscyhiOiBhbnksIGRpbT86IG51bWJlcik6IGJvb2xlYW4ge1xuICAgIGxldCByZXN1bHQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCBiXzogVGVuc29yID0gdGhpcy5oYW5kbGVUeXBlKGIsIGRpbSk7XG4gICAgICBpZiAodGhpcy50ZW5zb3IucmFuayAhPT0gYl8udGVuc29yLnJhbmspIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBjaGVjazogdGZjLlRlbnNvciA9IHRmYy5hbGwodGhpcy50ZW5zb3IuZXF1YWwoYl8udGVuc29yKSk7XG4gICAgICAgIGlmIChjaGVjay5hcnJheVN5bmMoKSA9PT0gMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEhhbmRsZSBhbnkgY2hhbmdlcyBpbiB0aGUgdGVuc29yJ3MgcmFuayBkdWUgdG8gYW4gb3BlcmF0aW9uLlxuICAgKiBOb3RlOiBPbmx5IGNhbGwgbWV0aG9kIGZyb20gd2l0aGluIHRmYy50aWR5KCkgdG8gYXZvaWQgbWVtb3J5IGxlYWtzLlxuICAgKiBcbiAgICogQHBhcmFtIHJlc3VsdCB0aGUgdGVuc29yIHJlc3VsdGluZyBmcm9tIGFuIG9wZXJhdGlvblxuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVSYW5rKHJlc3VsdDogdGZjLlRlbnNvcikge1xuICAgIGlmICh0aGlzLnRlbnNvci5yYW5rICE9PSByZXN1bHQucmFuaykge1xuICAgICAgdGhpcy50ZW5zb3IuZGlzcG9zZSgpO1xuICAgICAgdGhpcy50ZW5zb3IgPSB0ZmMudmFyaWFibGUocmVzdWx0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy50ZW5zb3IuYXNzaWduKHJlc3VsdCk7XG4gICAgfVxuICB9XG5cbiAgLy8gPT09PT0gQ2FsY3VsYXRpb24gPT09PT1cblxuICAvKipcbiAgICogQWRkcyB0d28gdGVuc29ycyBlbGVtZW50LXdpc2UuXG4gICAqIFxuICAgKiBAcGFyYW0gYiB0aGUgdGVuc29yIHRvIGJlIGFkZGVkXG4gICAqL1xuICBhZGQoYjogYW55LCBkaW0/OiBudW1iZXIpIHtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCBiXzogVGVuc29yID0gdGhpcy5oYW5kbGVUeXBlKGIsIGRpbSk7XG4gICAgICBjb25zdCByZXN1bHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5hZGQoYl8udGVuc29yKTtcbiAgICAgIHRoaXMuaGFuZGxlUmFuayhyZXN1bHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0cyB0d28gdGVuc29ycyBlbGVtZW50LXdpc2UuXG4gICAqIFxuICAgKiBAcGFyYW0gYiAgIHRoZSB0ZW5zb3IgdG8gYmUgc3VidHJhY3RlZFxuICAgKiBAcGFyYW0gZGltIChvcHRpb25hbCkgdGhlIG51bWJlciBvZiBkaW1lbnNpb25zIGluIGEgcDUuVmVjdG9yXG4gICAqL1xuICBzdWIoYjogYW55LCBkaW0/OiBudW1iZXIpIHtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCBiXzogVGVuc29yID0gdGhpcy5oYW5kbGVUeXBlKGIsIGRpbSk7XG4gICAgICBjb25zdCByZXN1bHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5zdWIoYl8udGVuc29yKTtcbiAgICAgIHRoaXMuaGFuZGxlUmFuayhyZXN1bHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgdHdvIHRlbnNvcnMgZWxlbWVudC13aXNlLlxuICAgKiBcbiAgICogQHBhcmFtIGIgdGhlIHRlbnNvciB0byBiZSBtdWx0aXBsaWVkXG4gICAqL1xuICBtdWx0KGI6IGFueSwgZGltPzogbnVtYmVyKSB7XG4gICAgdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgYl86IFRlbnNvciA9IHRoaXMuaGFuZGxlVHlwZShiLCBkaW0pO1xuICAgICAgY29uc3QgcmVzdWx0OiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3IubXVsKGJfLnRlbnNvcik7XG4gICAgICB0aGlzLmhhbmRsZVJhbmsocmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXZpZGVzIHR3byB0ZW5zb3JzIGVsZW1lbnQtd2lzZS5cbiAgICogXG4gICAqIEBwYXJhbSBiICAgdGhlIHRlbnNvciB0byBiZSBkaXZpZGVkIGJ5XG4gICAqIEBwYXJhbSBkaW0gKG9wdGlvbmFsKSB0aGUgbnVtYmVyIG9mIGRpbWVuc2lvbnMgaW4gYSBwNS5WZWN0b3JcbiAgICovXG4gIGRpdihiOiBhbnksIGRpbT86IG51bWJlcikge1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IGJfOiBUZW5zb3IgPSB0aGlzLmhhbmRsZVR5cGUoYiwgZGltKTtcbiAgICAgIGNvbnN0IHJlc3VsdDogdGZjLlRlbnNvciA9IHRoaXMudGVuc29yLmRpdihiXy50ZW5zb3IpO1xuICAgICAgdGhpcy5oYW5kbGVSYW5rKHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgZG90IHByb2R1Y3Qgb2YgdHdvIG1hdHJpY2VzIGFuZC9vciB2ZWN0b3JzLlxuICAgKiBOb3RlOiBPbmx5IHdvcmtzIHdoZW4gYm90aCBvcGVyYW5kcyBhcmUgcmFuayAxIG9yIDIuXG4gICAqIFxuICAgKiBAcGFyYW0gYiAgIHRoZSBtYXRyaXggb3IgdmVjdG9yIHRvIGJlIGRvdHRlZFxuICAgKiBAcGFyYW0gZGltIChvcHRpb25hbCkgdGhlIG51bWJlciBvZiBkaW1lbnNpb25zIGluIGEgcDUuVmVjdG9yXG4gICAqL1xuICBkb3QoYjogYW55LCBkaW0/OiBudW1iZXIpIHtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCBiXzogVGVuc29yID0gdGhpcy5oYW5kbGVUeXBlKGIsIGRpbSk7XG4gICAgICBjb25zdCByZXN1bHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5kb3QoYl8udGVuc29yKTtcbiAgICAgIHRoaXMuaGFuZGxlUmFuayhyZXN1bHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGFic29sdXRlIHZhbHVlIChtYWduaXV0ZGUpIG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuXG4gICAqIFRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiBhIG51bWJlciBpcyBhbHdheXMgcG9zaXRpdmUuXG4gICAqIFxuICAgKiBAcmV0dXJucyB0aGUgYWJzb2x1dGUgdmFsdWUgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKi9cbiAgYWJzKCk6IFRlbnNvciB7XG4gICAgbGV0IHJlc3VsdDogVGVuc29yO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5hYnMoKTtcbiAgICAgIHJlc3VsdCA9IGNyZWF0ZVRlbnNvcih0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgY2xvc2VzdCBpbnQgdmFsdWUgdGhhdCBpcyBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG9cbiAgICogdGhlIHZhbHVlIG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuIEZvciBleGFtcGxlLCBjZWlsKDkuMDMpIHJldHVybnNcbiAgICogdGhlIHZhbHVlIDEwLlxuICAgKiBcbiAgICogQHJldHVybnMgZWFjaCB0ZW5zb3IgZWxlbWVudCByb3VuZGVkIHVwXG4gICAqL1xuICBjZWlsKCk6IFRlbnNvciB7XG4gICAgbGV0IHJlc3VsdDogVGVuc29yO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5jZWlsKCk7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnN0cmFpbnMgdGhlIHZhbHVlIG9mIGVhY2ggdGVuc29yIGVsZW1lbnQgYmV0d2VlbiBhIG1pbmltdW0gYW5kXG4gICAqIG1heGltdW0gdmFsdWUuXG4gICAqIFxuICAgKiBAcGFyYW0gbG93ICB0aGUgbWluaW11bSB2YWx1ZVxuICAgKiBAcGFyYW0gaGlnaCB0aGUgbWF4aW11bSB2YWx1ZVxuICAgKiBAcmV0dXJucyAgICBlYWNoIHRlbnNvciBlbGVtZW50IGNvbnN0cmFpbmVkIHRvIHRoZSBnaXZlbiByYW5nZVxuICAgKi9cbiAgY29uc3RyYWluKGxvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIpOiBUZW5zb3Ige1xuICAgIGxldCByZXN1bHQ6IFRlbnNvcjtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3IuY2xpcEJ5VmFsdWUobG93LCBoaWdoKTtcbiAgICAgIHJlc3VsdCA9IGNyZWF0ZVRlbnNvcih0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogUmFpc2UgRXVsZXIncyBudW1iZXIgZSAoMi43MTgyOC4uLikgdG8gdGhlIHBvd2VyIG9mIGVhY2ggdGVuc29yXG4gICAqIGVsZW1lbnQuXG4gICAqIFxuICAgKiBAcmV0dXJucyBlXm4gZm9yIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAgICovXG4gIGV4cCgpOiBUZW5zb3Ige1xuICAgIGxldCByZXN1bHQ6IFRlbnNvcjtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3IuZXhwKCk7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGNsb3Nlc3QgaW50IHZhbHVlIHRoYXQgaXMgbGVzcyB0aGFuIG9yIGVxdWFsIHRvXG4gICAqIHRoZSB2YWx1ZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50LiBGb3IgZXhhbXBsZSwgZmxvb3IoOS45NykgcmV0dXJuc1xuICAgKiB0aGUgdmFsdWUgOS5cbiAgICogXG4gICAqIEByZXR1cm5zIGVhY2ggdGVuc29yIGVsZW1lbnQgcm91bmRlZCBkb3duXG4gICAqL1xuICBmbG9vcigpOiBUZW5zb3Ige1xuICAgIGxldCByZXN1bHQ6IFRlbnNvcjtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3IuZmxvb3IoKTtcbiAgICAgIHJlc3VsdCA9IGNyZWF0ZVRlbnNvcih0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgbmF0dXJhbCBsb2dhcml0aG0gKHRoZSBiYXNlLWUgbG9nYXJpdGhtKSBvZiBlYWNoIHRlbnNvclxuICAgKiBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgZWFjaCB0ZW5zb3IgZWxlbWVudCB0byBiZSBhIHZhbHVlXG4gICAqIGdyZWF0ZXIgdGhhbiAwLjAuXG4gICAqIFxuICAgKiBAcmV0dXJucyB0aGUgbmF0dXJhbCBsb2dhcml0aG0gb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKi9cbiAgbG9nKCk6IFRlbnNvciB7XG4gICAgbGV0IHJlc3VsdDogVGVuc29yO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5sb2coKTtcbiAgICAgIHJlc3VsdCA9IGNyZWF0ZVRlbnNvcih0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lcyB0aGUgbGFyZ2VzdCB2YWx1ZSBpbiBhIHRlbnNvciwgYW5kIHRoZW4gcmV0dXJucyB0aGF0IHZhbHVlLlxuICAgKiBcbiAgICogQHJldHVybnMgdGhlIG1heGltdW0gbnVtYmVyIGluIHRoZSB0ZW5zb3JcbiAgICovXG4gIG1heCgpOiBudW1iZXIge1xuICAgIGxldCByZXN1bHQ6IGFueTtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLm1heCh0aGlzLnRlbnNvcik7XG4gICAgICByZXN1bHQgPSB0LmFycmF5U3luYygpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIHRoZSBzbWFsbGVzdCB2YWx1ZSBpbiBhIHRlbnNvciwgYW5kIHRoZW4gcmV0dXJucyB0aGF0IHZhbHVlLlxuICAgKiBcbiAgICogQHJldHVybnMgdGhlIG1pbmltdW0gbnVtYmVyIGluIHRoZSB0ZW5zb3JcbiAgICovXG4gIG1pbigpOiBudW1iZXIge1xuICAgIGxldCByZXN1bHQ6IGFueTtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLm1pbih0aGlzLnRlbnNvcik7XG4gICAgICByZXN1bHQgPSB0LmFycmF5U3luYygpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGYWNpbGl0YXRlcyBleHBvbmVudGlhbCBleHByZXNzaW9ucy4gVGhlIHBvdygpIG1ldGhvZCBpcyBhblxuICAgKiBlZmZpY2llbnQgd2F5IG9mIG11bHRpcGx5aW5nIHRlbnNvcnMgYnkgdGhlbXNlbHZlcyAob3IgdGhlaXJcbiAgICogcmVjaXByb2NhbHMpIGluIGxhcmdlIHF1YW50aXRpZXMuXG4gICAqIFxuICAgKiBAcGFyYW0gYiB0aGUgcG93ZXIgYnkgd2hpY2ggdG8gcmFpc2UgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKi9cbiAgcG93KGI6IGFueSk6IFRlbnNvciB7XG4gICAgbGV0IHJlc3VsdDogVGVuc29yO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IGJfOiBUZW5zb3IgPSB0aGlzLmhhbmRsZVR5cGUoYik7XG4gICAgICBjb25zdCB0ID0gdGhpcy50ZW5zb3IucG93KGJfLnRlbnNvcik7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGludGVnZXIgY2xvc2VzdCB0byBlYWNoIHRlbnNvciBlbGVtZW50LiBGb3JcbiAgICogZXhhbXBsZSwgcm91bmQoMTMzLjgpIHJldHVybnMgdGhlIHZhbHVlIDEzNC5cbiAgICogXG4gICAqIEByZXR1cm5zIGVhY2ggdGVuc29yIGVsZW1lbnQgcm91bmRlZFxuICAgKi9cbiAgcm91bmQoKTogVGVuc29yIHtcbiAgICBsZXQgcmVzdWx0OiBUZW5zb3I7XG4gICAgdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRoaXMudGVuc29yLnJvdW5kKCk7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNxdWFyZXMgZWFjaCB0ZW5zb3IgZWxlbWVudCAobXVsdGlwbGllcyBhIG51bWJlciBieSBpdHNlbGYpLiBUaGVcbiAgICogcmVzdWx0IGlzIGFsd2F5cyBhIHBvc2l0aXZlIG51bWJlciwgYXMgbXVsdGlwbHlpbmcgdHdvIG5lZ2F0aXZlXG4gICAqIG51bWJlcnMgYWx3YXlzIHlpZWxkcyBhIHBvc2l0aXZlIHJlc3VsdC4gRm9yIGV4YW1wbGUsIC0xICogLTEgPSAxLlxuICAgKiBcbiAgICogQHJldHVybnMgdGhlIHNxdWFyZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gICAqL1xuICBzcSgpOiBUZW5zb3Ige1xuICAgIGxldCByZXN1bHQ6IFRlbnNvcjtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3Iuc3F1YXJlKCk7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIHNxdWFyZSByb290IG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuIFRoZSBzcXVhcmUgcm9vdFxuICAgKiBvZiBhIG51bWJlciBpcyBhbHdheXMgcG9zaXRpdmUsIGV2ZW4gdGhvdWdoIHRoZXJlIG1heSBiZSBhIHZhbGlkXG4gICAqIG5lZ2F0aXZlIHJvb3QuIFRoZSBzcXVhcmUgcm9vdCBzIG9mIG51bWJlciBhIGlzIHN1Y2ggdGhhdCBzKnMgPSBhLlxuICAgKiBJdCBpcyB0aGUgb3Bwb3NpdGUgb2Ygc3F1YXJpbmcuXG4gICAqIFxuICAgKiBAcmV0dXJucyB0aGUgc3F1YXJlIHJvb3Qgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKi9cbiAgc3FydCgpOiBUZW5zb3Ige1xuICAgIGxldCByZXN1bHQ6IFRlbnNvcjtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3Iuc3FydCgpO1xuICAgICAgcmVzdWx0ID0gY3JlYXRlVGVuc29yKHQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vID09PT09IFRyaWdvbm9tZXRyeSA9PT09PVxuXG4gIC8qKlxuICAgKiBUaGUgaW52ZXJzZSBvZiBjb3MoKSwgcmV0dXJucyB0aGUgYXJjIGNvc2luZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50LlxuICAgKiBUaGlzIGZ1bmN0aW9uIGV4cGVjdHMgdGhlIHZhbHVlcyBpbiB0aGUgcmFuZ2Ugb2YgLTEgdG8gMSBhbmQgdmFsdWVzXG4gICAqIGFyZSByZXR1cm5lZCBpbiB0aGUgcmFuZ2UgMCB0byBQSSAoMy4xNDE1OTI3KS5cbiAgICogXG4gICAqIEByZXR1cm5zIHRoZSBhcmMgY29zaW5lIG9mIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAgICovXG4gIGFjb3MoKTogVGVuc29yIHtcbiAgICBsZXQgcmVzdWx0OiBUZW5zb3I7XG4gICAgdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRoaXMudGVuc29yLmFjb3MoKTtcbiAgICAgIHJlc3VsdCA9IGNyZWF0ZVRlbnNvcih0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGludmVyc2Ugb2Ygc2luKCksIHJldHVybnMgdGhlIGFyYyBzaW5lIG9mIGEgZWFjaCB0ZW5zb3IgZWxlbWVudC5cbiAgICogVGhpcyBmdW5jdGlvbiBleHBlY3RzIHRoZSB2YWx1ZXMgaW4gdGhlIHJhbmdlIG9mIC0xIHRvIDEgYW5kIHZhbHVlc1xuICAgKiBhcmUgcmV0dXJuZWQgaW4gdGhlIHJhbmdlIC1QSS8yIHRvIFBJLzIuXG4gICAqIFxuICAgKiBAcmV0dXJucyB0aGUgYXJjIHNpbmUgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKi9cbiAgYXNpbigpOiBUZW5zb3Ige1xuICAgIGxldCByZXN1bHQ6IFRlbnNvcjtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3IuYXNpbigpO1xuICAgICAgcmVzdWx0ID0gY3JlYXRlVGVuc29yKHQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgaW52ZXJzZSBvZiB0YW4oKSwgcmV0dXJucyB0aGUgYXJjIHRhbmdlbnQgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudC5cbiAgICogVGhpcyBmdW5jdGlvbiBleHBlY3RzIHRoZSB2YWx1ZXMgaW4gdGhlIHJhbmdlIG9mIC1JbmZpbml0eSB0byBJbmZpbml0eVxuICAgKiAoZXhjbHVzaXZlKSBhbmQgdmFsdWVzIGFyZSByZXR1cm5lZCBpbiB0aGUgcmFuZ2UgLVBJLzIgdG8gUEkvMi5cbiAgICogXG4gICAqIEByZXR1cm5zIHRoZSBhcmMgdGFuZ2VudCBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gICAqL1xuICBhdGFuKCk6IFRlbnNvciB7XG4gICAgbGV0IHJlc3VsdDogVGVuc29yO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5hdGFuKCk7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZXMgdGhlIGFuZ2xlIChpbiByYWRpYW5zKSBmcm9tIGEgc3BlY2lmaWVkIHBvaW50IHRvIHRoZVxuICAgKiBjb29yZGluYXRlIG9yaWdpbiBhcyBtZWFzdXJlZCBmcm9tIHRoZSBwb3NpdGl2ZSB4LWF4aXMuIFZhbHVlcyBhcmVcbiAgICogcmV0dXJuZWQgYXMgYSBmbG9hdCBpbiB0aGUgcmFuZ2UgZnJvbSBQSSB0byAtUEkuXG4gICAqIFxuICAgKiBAcGFyYW0gYiB0aGUgeC1jb29yZGluYXRlKHMpIHVzZWQgZm9yIGNvbXB1dGluZyB0aGUgYXJjIHRhbmdlbnRcbiAgICogQHJldHVybnMgdGhlIGFyYyB0YW5nZW50IG9mIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAgICovXG4gIGF0YW4yKGI6IGFueSk6IFRlbnNvciB7XG4gICAgbGV0IHJlc3VsdDogVGVuc29yO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IGJfOiBUZW5zb3IgPSB0aGlzLmhhbmRsZVR5cGUoYik7XG4gICAgICBjb25zdCB0ID0gdGhpcy50ZW5zb3IuYXRhbjIoYl8udGVuc29yKTtcbiAgICAgIHJlc3VsdCA9IGNyZWF0ZVRlbnNvcih0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgY29zaW5lIG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuIFRoaXMgZnVuY3Rpb25cbiAgICogZG9lcyBub3QgeWV0IHRha2UgaW50byBhY2NvdW50IHRoZSBjdXJyZW50IGFuZ2xlTW9kZS5cbiAgICogVmFsdWVzIGFyZSByZXR1cm5lZCBpbiB0aGUgcmFuZ2UgLTEgdG8gMS5cbiAgICogXG4gICAqIEByZXR1cm5zIHRoZSBjb3NpbmUgb2YgZWFjaCB0ZW5zb3IgZWxlbWVudFxuICAgKi9cbiAgY29zKCk6IFRlbnNvciB7XG4gICAgbGV0IHJlc3VsdDogVGVuc29yO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5jb3MoKTtcbiAgICAgIHJlc3VsdCA9IGNyZWF0ZVRlbnNvcih0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlcyB0aGUgc2luZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50LiBUaGlzIGZ1bmN0aW9uXG4gICAqIGRvZXMgbm90IHlldCB0YWtlIGludG8gYWNjb3VudCB0aGUgY3VycmVudCBhbmdsZU1vZGUuXG4gICAqIFZhbHVlcyBhcmUgcmV0dXJuZWQgaW4gdGhlIHJhbmdlIC0xIHRvIDEuXG4gICAqIFxuICAgKiBAcmV0dXJucyB0aGUgc2luZSBvZiBlYWNoIHRlbnNvciBlbGVtZW50XG4gICAqL1xuICBzaW4oKTogVGVuc29yIHtcbiAgICBsZXQgcmVzdWx0OiBUZW5zb3I7XG4gICAgdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRoaXMudGVuc29yLnNpbigpO1xuICAgICAgcmVzdWx0ID0gY3JlYXRlVGVuc29yKHQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSB0YW5nZW50IG9mIGVhY2ggdGVuc29yIGVsZW1lbnQuIFRoaXMgZnVuY3Rpb25cbiAgICogZG9lcyBub3QgeWV0IHRha2UgaW50byBhY2NvdW50IHRoZSBjdXJyZW50IGFuZ2xlTW9kZS5cbiAgICogVmFsdWVzIGFyZSByZXR1cm5lZCBpbiB0aGUgcmFuZ2Ugb2YgYWxsIHJlYWwgbnVtYmVycy5cbiAgICogXG4gICAqIEByZXR1cm5zIHRoZSB0YW5nZW50IG9mIGVhY2ggdGVuc29yIGVsZW1lbnRcbiAgICovXG4gIHRhbigpOiBUZW5zb3Ige1xuICAgIGxldCByZXN1bHQ6IFRlbnNvcjtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3IudGFuKCk7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gPT09PT0gQ3JlYXRpb24gTWV0aG9kcyA9PT09PVxuXG4gIC8qKlxuICAgKiBHZXRzIGEgY29weSBvZiB0aGUgdGVuc29yLCByZXR1cm5zIGEgVGVuc29yIG9iamVjdC5cbiAgICogXG4gICAqIEByZXR1cm5zIGEgY29weSBvZiB0aGUgdGVuc29yXG4gICAqL1xuICBjb3B5KCk6IFRlbnNvciB7XG4gICAgbGV0IHJlc3VsdDogVGVuc29yO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5jbG9uZSgpO1xuICAgICAgcmVzdWx0ID0gY3JlYXRlVGVuc29yKHQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYW4gaWRlbnRpdHkgbWF0cml4IHdpdGggdGhlIGdpdmVuIGRpbWVuc2lvbnMuXG4gICAqIFxuICAgKiBAcGFyYW0gbnVtUm93cyB0aGUgbnVtYmVyIG9mIHJvd3NcbiAgICogQHBhcmFtIG51bUNvbHMgKG9wdGlvbmFsKSB0aGUgbnVtYmVyIG9mIGNvbHVtbnNcbiAgICogQHJldHVybnMgICAgICAgdGhlIGlkZW50aXR5IG1hdHJpeFxuICAgKi9cbiAgc3RhdGljIGV5ZShudW1Sb3dzOiBudW1iZXIsIG51bUNvbHM/OiBudW1iZXIpOiBUZW5zb3Ige1xuICAgIGxldCByZXN1bHQ6IFRlbnNvcjtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCB0OiB0ZmMuVGVuc29yID0gdGZjLmV5ZShudW1Sb3dzLCBudW1Db2xzKTtcbiAgICAgIHJlc3VsdCA9IGNyZWF0ZVRlbnNvcih0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgdGVuc29yIGZpbGxlZCB3aXRoIGEgZ2l2ZW4gdmFsdWUuXG4gICAqIFxuICAgKiBAcGFyYW0gc2hhcGUgdGhlIHNoYXBlIG9mIHRoZSB0ZW5zb3JcbiAgICogQHBhcmFtIHZhbHVlIHRoZSB2YWx1ZSB0byBmaWxsIHRoZSB0ZW5zb3Igd2l0aFxuICAgKi9cbiAgc3RhdGljIGZpbGwoc2hhcGU6IG51bWJlcltdLCB2YWx1ZTogbnVtYmVyKTogVGVuc29yIHtcbiAgICBsZXQgcmVzdWx0OiBUZW5zb3I7XG4gICAgdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy5maWxsKHNoYXBlLCB2YWx1ZSk7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHRlbnNvciBmaWxsZWQgd2l0aCBldmVubHkgc3BhY2VkIHZhbHVlcy5cbiAgICogXG4gICAqIEBwYXJhbSBtaW4gdGhlIGxvd2VyIGJvdW5kIChpbmNsdXNpdmUpXG4gICAqIEBwYXJhbSBtYXggdGhlIHVwcGVyIGJvdW5kIChpbmNsdXNpdmUpXG4gICAqIEBwYXJhbSBudW0gdGhlIG51bWJlciBvZiB2YWx1ZXMgdG8gZ2VuZXJhdGVcbiAgICovXG4gIHN0YXRpYyBsaW5zcGFjZShtaW46IG51bWJlciwgbWF4OiBudW1iZXIsIG51bTogbnVtYmVyKTogVGVuc29yIHtcbiAgICBsZXQgcmVzdWx0OiBUZW5zb3I7XG4gICAgdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgdDogdGZjLlRlbnNvciA9IHRmYy5saW5zcGFjZShtaW4sIG1heCwgbnVtKTtcbiAgICAgIHJlc3VsdCA9IGNyZWF0ZVRlbnNvcih0KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgdGVuc29yIGZ1bGwgb2Ygb25lcy5cbiAgICogXG4gICAqIEBwYXJhbSBzaGFwZSB0aGUgc2hhcGUgb2YgdGhlIHRlbnNvclxuICAgKi9cbiAgc3RhdGljIG9uZXMoc2hhcGU6IG51bWJlcltdKTogVGVuc29yIHtcbiAgICBsZXQgcmVzdWx0OiBUZW5zb3I7XG4gICAgdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgbGV0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMub25lcyhzaGFwZSk7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHRlbnNvciBmdWxsIG9mIHVuaWZvcm1seSBkaXN0cmlidXRlZCByYW5kb20gbnVtYmVycy5cbiAgICogXG4gICAqIEBwYXJhbSBzaGFwZSB0aGUgc2hhcGUgb2YgdGhlIHRlbnNvclxuICAgKiBAcmV0dXJucyAgICAgIHRoZSByYW5kb20gdGVuc29yXG4gICAqL1xuICBzdGF0aWMgcmFuZG9tKHNoYXBlOiBudW1iZXJbXSk6IFRlbnNvciB7XG4gICAgbGV0IHJlc3VsdDogVGVuc29yO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMucmFuZG9tVW5pZm9ybShzaGFwZSk7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHRlbnNvciBmdWxsIG9mIG5vcm1hbGx5IGRpc3RyaWJ1dGVkIHJhbmRvbSBudW1iZXJzLlxuICAgKiBcbiAgICogQHBhcmFtIHNoYXBlIHRoZSBzaGFwZSBvZiB0ZW5zb3JcbiAgICogQHBhcmFtIG1lYW4gIChvcHRpb25hbCkgdGhlIG1lYW5cbiAgICogQHBhcmFtIHNkICAgIChvcHRpb25hbCkgdGhlIHN0YW5kYXJkIGRldmlhdGlvblxuICAgKiBAcmV0dXJucyAgICAgIHRoZSByYW5kb20gdGVuc29yXG4gICAqL1xuICBzdGF0aWMgcmFuZG9tR2F1c3NpYW4oc2hhcGU6IG51bWJlcltdLCBtZWFuPzogbnVtYmVyLCBzZD86IG51bWJlcik6IFRlbnNvciB7XG4gICAgbGV0IHJlc3VsdDogVGVuc29yO1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGxldCB0OiB0ZmMuVGVuc29yID0gdGZjLnJhbmRvbU5vcm1hbChzaGFwZSwgbWVhbiwgc2QpO1xuICAgICAgcmVzdWx0ID0gY3JlYXRlVGVuc29yKHQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgYSB0ZW5zb3IgZmlsbGVkIHdpdGggbnVtYmVycyBpbiB0aGUgcmFuZ2UgcHJvdmlkZWQuXG4gICAqIFxuICAgKiBAcGFyYW0gbWluICB0aGUgbG93ZXIgYm91bmQgKGluY2x1c2l2ZSlcbiAgICogQHBhcmFtIG1heCAgdGhlIHVwcGVyIGJvdW5kIChleGNsdXNpdmUpXG4gICAqIEBwYXJhbSBzdGVwIChvcHRpb25hbCkgdGhlIGludGVnZXIgc3BhY2luZyBiZXR3ZWVuIHZhbHVlc1xuICAgKi9cbiAgc3RhdGljIHJhbmdlKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlciwgc3RlcD86IG51bWJlcikge1xuICAgIGxldCByZXN1bHQ6IFRlbnNvcjtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBsZXQgdDogdGZjLlRlbnNvciA9IHRmYy5yYW5nZShtaW4sIG1heCwgc3RlcCk7XG4gICAgICByZXN1bHQgPSBjcmVhdGVUZW5zb3IodCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHRlbnNvciBmdWxsIG9mIHplcm9zLlxuICAgKiBcbiAgICogQHBhcmFtIHNoYXBlIHRoZSBzaGFwZSBvZiB0aGUgdGVuc29yXG4gICAqL1xuICBzdGF0aWMgemVyb3Moc2hhcGU6IG51bWJlcltdKTogVGVuc29yIHtcbiAgICBsZXQgcmVzdWx0OiBUZW5zb3I7XG4gICAgdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgbGV0IHQ6IHRmYy5UZW5zb3IgPSB0ZmMuemVyb3Moc2hhcGUpO1xuICAgICAgcmVzdWx0ID0gY3JlYXRlVGVuc29yKHQpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFRlbnNvciAodGhlIGRhdGF0eXBlIGZvciBzdG9yaW5nIHRlbnNvcnMpLlxuICpcbiAqIEBwYXJhbSBvYmogdGhlIG51bWVyaWNhbCBvYmplY3QgdXNlZCB0byBjcmVhdGUgdGhlIHRlbnNvclxuICogQHBhcmFtIGRpbSAob3B0aW9uYWwpIHRoZSBkaW1lbnNpb25hbGl0eSBvZiB0aGUgcDUuVmVjdG9yIHVzZWRcbiAqIEByZXR1cm5zICAgIHRoZSB0ZW5zb3JcbiAqL1xuY29uc3QgY3JlYXRlVGVuc29yID0gZnVuY3Rpb24gY3JlYXRlVGVuc29yT2JqZWN0KG9iajogYW55LCBkaW0/OiBudW1iZXIpOiBUZW5zb3Ige1xuICByZXR1cm4gbmV3IFRlbnNvcihvYmosIGRpbSk7XG59O1xuXG5leHBvcnQge1xuICBUZW5zb3IsXG4gIGNyZWF0ZVRlbnNvcixcbn07XG4iLCJpbXBvcnQgKiBhcyB0ZmMgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuaW1wb3J0IHsgVGVuc29yLCBjcmVhdGVUZW5zb3IgfSBmcm9tICcuL3RlbnNvcic7XG5cblxuZGVjbGFyZSB2YXIgcDU6IGFueTtcbnA1LnByb3RvdHlwZS50ZmMgPSB0ZmM7XG5wNS5wcm90b3R5cGUuVGVuc29yID0gVGVuc29yO1xucDUucHJvdG90eXBlLmNyZWF0ZVRlbnNvciA9IGNyZWF0ZVRlbnNvcjtcblxuZXhwb3J0IGRlZmF1bHQgcDU7XG4iXSwic291cmNlUm9vdCI6IiJ9
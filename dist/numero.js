var num=function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=16)}([function(t,e,n){"use strict";n.r(e),function(t,r,o,i){n.d(e,"AdadeltaOptimizer",(function(){return kd})),n.d(e,"AdagradOptimizer",(function(){return Od})),n.d(e,"AdamOptimizer",(function(){return Dd})),n.d(e,"AdamaxOptimizer",(function(){return Md})),n.d(e,"DataStorage",(function(){return fo})),n.d(e,"ENV",(function(){return d})),n.d(e,"Environment",(function(){return c})),n.d(e,"KernelBackend",(function(){return ho})),n.d(e,"MomentumOptimizer",(function(){return Pd})),n.d(e,"Optimizer",(function(){return Nd})),n.d(e,"RMSPropOptimizer",(function(){return Bd})),n.d(e,"Rank",(function(){return bt})),n.d(e,"Reduction",(function(){return kc})),n.d(e,"SGDOptimizer",(function(){return Ld})),n.d(e,"Tensor",(function(){return _t})),n.d(e,"TensorBuffer",(function(){return mt})),n.d(e,"Variable",(function(){return It})),n.d(e,"abs",(function(){return Ns})),n.d(e,"acos",(function(){return ks})),n.d(e,"acosh",(function(){return Os})),n.d(e,"add",(function(){return Nu})),n.d(e,"addN",(function(){return ku})),n.d(e,"addStrict",(function(){return Ou})),n.d(e,"all",(function(){return jp})),n.d(e,"any",(function(){return Kp})),n.d(e,"argMax",(function(){return Zp})),n.d(e,"argMin",(function(){return Qp})),n.d(e,"asin",(function(){return Ds})),n.d(e,"asinh",(function(){return Ms})),n.d(e,"atan",(function(){return Ls})),n.d(e,"atan2",(function(){return Du})),n.d(e,"atanh",(function(){return Ps})),n.d(e,"avgPool",(function(){return Up})),n.d(e,"avgPool3d",(function(){return Wp})),n.d(e,"backend",(function(){return cn})),n.d(e,"backend_util",(function(){return Mo})),n.d(e,"basicLSTMCell",(function(){return mc})),n.d(e,"batchNorm",(function(){return bu})),n.d(e,"batchNorm2d",(function(){return xu})),n.d(e,"batchNorm3d",(function(){return Eu})),n.d(e,"batchNorm4d",(function(){return wu})),n.d(e,"batchNormalization",(function(){return _u})),n.d(e,"batchNormalization2d",(function(){return gu})),n.d(e,"batchNormalization3d",(function(){return vu})),n.d(e,"batchNormalization4d",(function(){return yu})),n.d(e,"batchToSpaceND",(function(){return hr})),n.d(e,"booleanMaskAsync",(function(){return fp})),n.d(e,"browser",(function(){return vd})),n.d(e,"buffer",(function(){return dr})),n.d(e,"cast",(function(){return mr})),n.d(e,"ceil",(function(){return Bs})),n.d(e,"clipByValue",(function(){return Fs})),n.d(e,"clone",(function(){return gr})),n.d(e,"complex",(function(){return Sn})),n.d(e,"concat",(function(){return $n})),n.d(e,"concat1d",(function(){return jn})),n.d(e,"concat2d",(function(){return Kn})),n.d(e,"concat3d",(function(){return Zn})),n.d(e,"concat4d",(function(){return Qn})),n.d(e,"conv1d",(function(){return vp})),n.d(e,"conv2d",(function(){return yp})),n.d(e,"conv2dTranspose",(function(){return Rp})),n.d(e,"conv3d",(function(){return _p})),n.d(e,"conv3dTranspose",(function(){return Tp})),n.d(e,"cos",(function(){return Us})),n.d(e,"cosh",(function(){return qs})),n.d(e,"cumsum",(function(){return vr})),n.d(e,"customGrad",(function(){return uo})),n.d(e,"deprecationWarn",(function(){return Ye})),n.d(e,"depthToSpace",(function(){return yr})),n.d(e,"depthwiseConv2d",(function(){return Ep})),n.d(e,"diag",(function(){return Sc})),n.d(e,"disableDeprecationWarnings",(function(){return Xe})),n.d(e,"dispose",(function(){return Je})),n.d(e,"disposeVariables",(function(){return $e})),n.d(e,"div",(function(){return Mu})),n.d(e,"divStrict",(function(){return Lu})),n.d(e,"dot",(function(){return Cp})),n.d(e,"dropout",(function(){return Cc})),n.d(e,"elu",(function(){return ac})),n.d(e,"enableDebugMode",(function(){return He})),n.d(e,"enableProdMode",(function(){return Ve})),n.d(e,"engine",(function(){return je})),n.d(e,"env",(function(){return l})),n.d(e,"equal",(function(){return Zu})),n.d(e,"equalStrict",(function(){return Qu})),n.d(e,"erf",(function(){return Gs})),n.d(e,"exp",(function(){return Ws})),n.d(e,"expandDims",(function(){return _r})),n.d(e,"expm1",(function(){return zs})),n.d(e,"eye",(function(){return br})),n.d(e,"fft",(function(){return xc})),n.d(e,"fill",(function(){return zn})),n.d(e,"findBackend",(function(){return sn})),n.d(e,"findBackendFactory",(function(){return un})),n.d(e,"floor",(function(){return Vs})),n.d(e,"floorDiv",(function(){return Pu})),n.d(e,"frame",(function(){return Mc})),n.d(e,"fused",(function(){return ll})),n.d(e,"gather",(function(){return lp})),n.d(e,"gatherND",(function(){return Tc})),n.d(e,"getBackend",(function(){return on})),n.d(e,"getKernel",(function(){return h})),n.d(e,"getKernelsForBackend",(function(){return m})),n.d(e,"grad",(function(){return ro})),n.d(e,"grads",(function(){return oo})),n.d(e,"greater",(function(){return Ju})),n.d(e,"greaterEqual",(function(){return tp})),n.d(e,"greaterEqualStrict",(function(){return ep})),n.d(e,"greaterStrict",(function(){return np})),n.d(e,"hammingWindow",(function(){return Dc})),n.d(e,"hannWindow",(function(){return Oc})),n.d(e,"ifft",(function(){return Ec})),n.d(e,"imag",(function(){return Nn})),n.d(e,"image",(function(){return rl})),n.d(e,"inTopKAsync",(function(){return Bc})),n.d(e,"io",(function(){return fd})),n.d(e,"irfft",(function(){return Ac})),n.d(e,"isFinite",(function(){return nu})),n.d(e,"isInf",(function(){return eu})),n.d(e,"isNaN",(function(){return tu})),n.d(e,"keep",(function(){return tn})),n.d(e,"leakyRelu",(function(){return sc})),n.d(e,"less",(function(){return rp})),n.d(e,"lessEqual",(function(){return op})),n.d(e,"lessEqualStrict",(function(){return ip})),n.d(e,"lessStrict",(function(){return ap})),n.d(e,"linalg",(function(){return Zc})),n.d(e,"linspace",(function(){return Vn})),n.d(e,"localResponseNormalization",(function(){return fc})),n.d(e,"log",(function(){return Hs})),n.d(e,"log1p",(function(){return Xs})),n.d(e,"logSigmoid",(function(){return Ys})),n.d(e,"logSoftmax",(function(){return lo})),n.d(e,"logSumExp",(function(){return Jp})),n.d(e,"logicalAnd",(function(){return Au})),n.d(e,"logicalNot",(function(){return Iu})),n.d(e,"logicalOr",(function(){return Ru})),n.d(e,"logicalXor",(function(){return Tu})),n.d(e,"losses",(function(){return Yc})),n.d(e,"matMul",(function(){return Sp})),n.d(e,"math",(function(){return md})),n.d(e,"max",(function(){return tc})),n.d(e,"maxPool",(function(){return Fp})),n.d(e,"maxPool3d",(function(){return Gp})),n.d(e,"maximum",(function(){return Bu})),n.d(e,"maximumStrict",(function(){return Fu})),n.d(e,"mean",(function(){return ec})),n.d(e,"memory",(function(){return Ke})),n.d(e,"min",(function(){return nc})),n.d(e,"minimum",(function(){return Uu})),n.d(e,"minimumStrict",(function(){return qu})),n.d(e,"mod",(function(){return Gu})),n.d(e,"modStrict",(function(){return Wu})),n.d(e,"moments",(function(){return rc})),n.d(e,"movingAverage",(function(){return vc})),n.d(e,"mul",(function(){return zu})),n.d(e,"mulStrict",(function(){return Vu})),n.d(e,"multiRNNCell",(function(){return gc})),n.d(e,"multinomial",(function(){return xr})),n.d(e,"neg",(function(){return $s})),n.d(e,"nextFrame",(function(){return Gd})),n.d(e,"norm",(function(){return hc})),n.d(e,"notEqual",(function(){return sp})),n.d(e,"notEqualStrict",(function(){return up})),n.d(e,"oneHot",(function(){return Er})),n.d(e,"ones",(function(){return Gn})),n.d(e,"onesLike",(function(){return Xn})),n.d(e,"op",(function(){return Tn})),n.d(e,"outerProduct",(function(){return Np})),n.d(e,"pad",(function(){return wr})),n.d(e,"pad1d",(function(){return Ar})),n.d(e,"pad2d",(function(){return Ir})),n.d(e,"pad3d",(function(){return Rr})),n.d(e,"pad4d",(function(){return Tr})),n.d(e,"pool",(function(){return qp})),n.d(e,"pow",(function(){return Hu})),n.d(e,"powStrict",(function(){return Xu})),n.d(e,"prelu",(function(){return uc})),n.d(e,"print",(function(){return fr})),n.d(e,"prod",(function(){return ic})),n.d(e,"profile",(function(){return Ze})),n.d(e,"rand",(function(){return Sr})),n.d(e,"randomGamma",(function(){return Nr})),n.d(e,"randomNormal",(function(){return Cr})),n.d(e,"randomUniform",(function(){return kr})),n.d(e,"range",(function(){return Hn})),n.d(e,"ready",(function(){return rn})),n.d(e,"real",(function(){return Cn})),n.d(e,"reciprocal",(function(){return js})),n.d(e,"registerBackend",(function(){return pn})),n.d(e,"registerKernel",(function(){return g})),n.d(e,"relu",(function(){return pc})),n.d(e,"relu6",(function(){return cc})),n.d(e,"removeBackend",(function(){return an})),n.d(e,"reshape",(function(){return Or})),n.d(e,"reverse",(function(){return kp})),n.d(e,"reverse1d",(function(){return Op})),n.d(e,"reverse2d",(function(){return Dp})),n.d(e,"reverse3d",(function(){return Mp})),n.d(e,"reverse4d",(function(){return Lp})),n.d(e,"rfft",(function(){return wc})),n.d(e,"round",(function(){return Ks})),n.d(e,"rsqrt",(function(){return Zs})),n.d(e,"scalar",(function(){return Dn})),n.d(e,"scatterND",(function(){return bc})),n.d(e,"selu",(function(){return lc})),n.d(e,"separableConv2d",(function(){return Ip})),n.d(e,"serialization",(function(){return xd})),n.d(e,"setBackend",(function(){return nn})),n.d(e,"setPlatform",(function(){return ln})),n.d(e,"setdiff1dAsync",(function(){return Ur})),n.d(e,"sigmoid",(function(){return Qs})),n.d(e,"sign",(function(){return Js})),n.d(e,"signal",(function(){return Pc})),n.d(e,"sin",(function(){return ru})),n.d(e,"sinh",(function(){return ou})),n.d(e,"slice",(function(){return zp})),n.d(e,"slice1d",(function(){return Vp})),n.d(e,"slice2d",(function(){return Hp})),n.d(e,"slice3d",(function(){return Xp})),n.d(e,"slice4d",(function(){return Yp})),n.d(e,"slice_util",(function(){return no})),n.d(e,"softmax",(function(){return co})),n.d(e,"softplus",(function(){return iu})),n.d(e,"spaceToBatchND",(function(){return Dr})),n.d(e,"sparseToDense",(function(){return Rc})),n.d(e,"spectral",(function(){return Ic})),n.d(e,"split",(function(){return Jn})),n.d(e,"sqrt",(function(){return au})),n.d(e,"square",(function(){return Cs})),n.d(e,"squaredDifference",(function(){return Yu})),n.d(e,"squaredDifferenceStrict",(function(){return $u})),n.d(e,"squeeze",(function(){return Mr})),n.d(e,"stack",(function(){return Lr})),n.d(e,"step",(function(){return su})),n.d(e,"stft",(function(){return Lc})),n.d(e,"stridedSlice",(function(){return yc})),n.d(e,"sub",(function(){return ju})),n.d(e,"subStrict",(function(){return Ku})),n.d(e,"sum",(function(){return oc})),n.d(e,"tan",(function(){return uu})),n.d(e,"tanh",(function(){return pu})),n.d(e,"tensor",(function(){return kn})),n.d(e,"tensor1d",(function(){return Mn})),n.d(e,"tensor2d",(function(){return Ln})),n.d(e,"tensor3d",(function(){return Pn})),n.d(e,"tensor4d",(function(){return Bn})),n.d(e,"tensor5d",(function(){return Fn})),n.d(e,"tensor6d",(function(){return Un})),n.d(e,"tensor_util",(function(){return Dt})),n.d(e,"test_util",(function(){return Td})),n.d(e,"tidy",(function(){return Qe})),n.d(e,"tile",(function(){return Pr})),n.d(e,"time",(function(){return en})),n.d(e,"topk",(function(){return _c})),n.d(e,"train",(function(){return Ud})),n.d(e,"transpose",(function(){return dc})),n.d(e,"truncatedNormal",(function(){return Br})),n.d(e,"unregisterKernel",(function(){return v})),n.d(e,"unsortedSegmentSum",(function(){return dp})),n.d(e,"unstack",(function(){return Fr})),n.d(e,"util",(function(){return at})),n.d(e,"valueAndGrad",(function(){return io})),n.d(e,"valueAndGrads",(function(){return ao})),n.d(e,"variable",(function(){return qn})),n.d(e,"variableGrads",(function(){return so})),n.d(e,"version_core",(function(){return Sd})),n.d(e,"webgl",(function(){return Cd})),n.d(e,"where",(function(){return Su})),n.d(e,"whereAsync",(function(){return Cu})),n.d(e,"zeros",(function(){return Wn})),n.d(e,"zerosLike",(function(){return Yn}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var a=function(t,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function s(t,e){function n(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function u(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?o(t.value):new n((function(e){e(t.value)})).then(a,s)}u((r=r.apply(t,e||[])).next())}))}function p(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var c=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,e){null!=this.platform&&console.warn("Platform "+this.platformName+" has already been set. Overwriting the platform with "+e+"."),this.platformName=t,this.platform=e},t.prototype.registerFlag=function(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn("Setting feature override from URL "+t+": "+r+"."),this.set(t,r)}},t.prototype.get=function(t){return t in this.flags?this.flags[t]:(this.flags[t]=this.evaluateFlag(t),this.flags[t])},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,"features",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e){if(null==this.flagRegistry[t])throw new Error("Cannot set flag "+t+" as it has not been registered.");this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error("Cannot evaluate flag '"+t+"': no evaluation function found.");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var e,n,r=(e=this.global.location.search,n={},e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];return function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(n,e[0],e[1]),e.join("=")})),n);"tfjsflags"in r&&r.tfjsflags.split(",").forEach((function(e){var n=e.split(":"),r=n[0],o=n[1];t.urlFlags[r]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error("Could not parse value flag value "+e+" for flag "+t+".")}(r,o)}))}},t}();function l(){return d}var d=null,f=new Map;function h(t,e){var n=y(t,e);return f.get(n)}function m(t){for(var e=f.entries(),n=[];;){var r=e.next(),o=r.done,i=r.value;if(o)break;var a=i[0],s=i[1];a.split("_")[0]===t&&n.push(s)}return n}function g(t){var e=t.kernelName,n=t.backendName,r=y(e,n);if(f.has(r))throw new Error("The kernel '"+e+"' for backend '"+n+"' is already registered");f.set(r,t)}function v(t,e){var n=y(t,e);if(!f.has(n))throw new Error("The kernel '"+t+"' for backend '"+e+"' is not registered");f.delete(n)}function y(t,e){return e+"_"+t}function _(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function b(t,e,n){return Math.max(t,Math.min(e,n))}function x(t){return t%2==0?t:t+1}function E(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function w(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function A(t,e,n){void 0===n&&(n=""),w(S(t,e),(function(){return n+" Shapes "+t+" and "+e+" must match"}))}function I(t){w(null!=t,(function(){return"The input to the tensor constructor must be a non-null value."}))}function R(t,e,n){if(void 0===e&&(e=[]),void 0===n&&(n=!1),null==e&&(e=[]),Array.isArray(t)||W(t)&&!n)for(var r=0;r<t.length;++r)R(t[r],e,n);else e.push(t);return e}function T(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function S(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function C(t){return t%1==0}function N(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)}function k(t){var e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function O(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function D(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise((function(r,o){var i=0,a=function(){if(t())r();else{var s=e(++i);null!=n&&i>=n?o():setTimeout(a,s)}};a()}))}function M(t,e){for(var n=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)n*=t[o];else if(-1===t[o]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+o);r=o}else if(t[o]<0)throw Error("Shapes can not be < 0. Found "+t[o]+" at dim "+o);if(-1===r){if(e>0&&e!==n)throw Error("Size("+e+") must match the product of shape "+t);return t}if(0===n)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(e%n!=0)throw Error("The implicit shape can't be a fractional number. Got "+e+" / "+n);var i=t.slice();return i[r]=e/n,i}function L(t,e){var n=e.length;return w((t=null==t?e.map((function(t,e){return e})):[].concat(t)).every((function(t){return t>=-n&&t<n})),(function(){return"All values in axis param must be in range [-"+n+", "+n+") but got axis "+t})),w(t.every((function(t){return C(t)})),(function(){return"All values in axis param must be integers but got axis "+t})),t.map((function(t){return t<0?n+t:t}))}function P(t,e){for(var n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,i=null==e||o?null:L(e,t).sort(),a=0,s=0;s<t.length;++s){if(null!=i){if(i[a]===s&&1!==t[s])throw new Error("Can't squeeze axis "+s+" since its dim '"+t[s]+"' is not 1");(null==i[a]||i[a]>s)&&1===t[s]&&(n.push(t[s]),r.push(s)),i[a]<=s&&a++}1!==t[s]&&(n.push(t[s]),r.push(s))}return{newShape:n,keptDims:r}}function B(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function F(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function U(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+e+" being uploaded contains "+r+".")}}function q(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function G(t,e){return!("complex64"===e||"float32"===e&&"complex64"!==t||"int32"===e&&"float32"!==t&&"complex64"!==t||"bool"===e&&"bool"===t)}function W(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function z(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function V(t){if(null==t)return 0;var e=0;return t.forEach((function(t){return e+=t.length})),e}function H(t){return"string"==typeof t||t instanceof String}function X(t){return"boolean"==typeof t}function Y(t){return"number"==typeof t}function $(t){return Array.isArray(t)?$(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":Y(t)?"float32":H(t)?"string":X(t)?"bool":"float32"}function j(t){return!!(t&&t.constructor&&t.call&&t.apply)}function K(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}function Z(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function Q(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=R(t)),n&&U(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){for(var r=new Uint8Array(t.length),o=0;o<r.length;++o)0!==Math.round(t[o])&&(r[o]=1);return r}throw new Error("Unknown data type "+e)}function J(t,e){if(0===t.length)return e[0];var n=t.reduce((function(t,e){return t*e}));if(0===n)return[];if(n!==e.length)throw new Error("["+t+"] does not match the input size.");return function t(e,n,r){var o=new Array;if(1===n.length)for(var i=n[0],a=0;a<i;a++)o[a]=r[e+a];else{i=n[0];var s=n.slice(1),u=s.reduce((function(t,e){return t*e}));for(a=0;a<i;a++)o[a]=t(e+a*u,s,r)}return o}(0,t,e)}function tt(t,e){for(var n=et(t,e),r=0;r<n.length;r++)n[r]=1;return n}function et(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function nt(){return l().platform.now()}function rt(t){t.forEach((function(e){w(Number.isInteger(e)&&e>=0,(function(){return"Tensor must have a shape comprised of positive integers but got shape ["+t+"]."}))}))}function ot(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",l().platform.encode(t,e)}function it(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",l().platform.decode(t,e)}var at=Object.freeze({shuffle:_,clamp:b,nearestLargerEven:x,sum:E,randUniform:function(t,e){var n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){for(var n=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(e[r]);n+=o*o}return n},assert:w,assertShapesMatch:A,assertNonNull:I,flatten:R,sizeFromShape:T,isScalarShape:function(t){return 0===t.length},arraysEqual:S,isInt:C,tanh:N,sizeToSquarishShape:k,createShuffledIndices:function(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return _(e),e},rightPad:O,repeatedTry:D,inferFromImplicitShape:M,parseAxisParam:L,squeezeShape:P,getTypedArrayFromDType:B,getArrayFromDType:F,checkConversionForErrors:U,isValidDtype:q,hasEncodingLoss:G,isTypedArray:W,bytesPerElement:z,bytesFromStringArray:V,isString:H,isBoolean:X,isNumber:Y,inferDtype:$,isFunction:j,nearestDivisor:K,computeStrides:Z,toTypedArray:Q,toNestedArray:J,makeOnesTypedArray:tt,makeZerosTypedArray:et,now:nt,assertNonNegativeIntegerDimensions:rt,fetch:function(t,e){return l().platform.fetch(t,e)},encodeString:ot,decodeString:it}),st=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ut)}return t.prototype.profileKernel=function(t,e,n){var r,o=this,i=this.backendTimer.time((function(){r=n()}));return r.forEach((function(n){n.data().then((function(r){!function(t,e,n){if("float32"!==e)return!1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn("Found "+o+" in the result of '"+n+"'"),!0}}(r,n.dtype,t),i.then((function(i){var a="";null!=i.getExtraProfileInfo&&(a=i.getExtraProfileInfo()),o.logger.logKernelProfile(t,n,r,i.kernelMs,e,a)}))}))})),r},t}(),ut=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r,o,i){var a=O(r+"ms",9),s=O(t,25),u=e.rank,p=e.size,c=O(e.shape.toString(),14),l="";for(var d in o){var f=o[d].shape,h=f.length;l+=d+": "+h+"D "+(h>0?f:"")+" "}console.log("%c"+s+"\t%c"+a+"\t%c"+u+"D "+c+"\t%c"+p+"\t%c"+l+"\t%c"+i,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")},t}(),pt=20,ct=3,lt=7;function dt(t,e,n){return O(Array.isArray(t)?parseFloat(t[0].toFixed(lt))+" + "+parseFloat(t[1].toFixed(lt))+"j":H(t)?"'"+t+"'":"bool"===n?ft(t):parseFloat(t.toFixed(lt)).toString(),e)}function ft(t){return 0===t?"false":"true"}function ht(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}var mt=function(){function t(t,e,n){var r=this;if(this.dtype=e,this.shape=t.slice(),this.size=T(t),null!=n){var o=n.length;w(o===this.size,(function(){return"Length of values '"+o+"' does not match the size inferred by the shape '"+r.size+"'."}))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||F(e,this.size),this.strides=Z(t)}return t.prototype.set=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),w(n.length===this.rank,(function(){return"The number of provided coordinates ("+n.length+") must match the rank ("+e.rank+")"}));var o=this.locToIndex(n);this.values[o]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=0,r=0,o=t;r<o.length;r++){var i=o[r];if(i<0||i>=this.shape[n]){var a="Requested out of range element at "+t+".   Buffer shape="+this.shape;throw new Error(a)}n++}for(var s=t[t.length-1],u=0;u<t.length-1;++u)s+=this.strides[u]*t[u];return this.values[s]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return gt().makeTensor(this.values,this.shape,this.dtype)},t}(),gt=null,vt=null,yt=null,_t=function(){function t(t,e,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=T(t),this.strides=Z(t),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}return t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),w(1===this.size,(function(){return"The array must have only 1 element."})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,o){return this.throwIfDisposed(),this.reshape([t,e,n,r,o])},t.prototype.asType=function(t){return this.throwIfDisposed(),vt.cast(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return u(this,void 0,void 0,(function(){var t;return p(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,vt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return vt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return u(this,void 0,void 0,(function(){var t;return p(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,J(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return J(this.shape,this.dataSync())},t.prototype.data=function(){return u(this,void 0,void 0,(function(){var t,e;return p(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),t=gt().read(this.dataId),"string"!==this.dtype?[3,2]:[4,t];case 1:e=n.sent();try{return[2,e.map((function(t){return it(t)}))]}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}n.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=gt().readSync(this.dataId);if("string"===this.dtype)try{return t.map((function(t){return it(t)}))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t},t.prototype.bytes=function(){return u(this,void 0,void 0,(function(){var t;return p(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),[4,gt().read(this.dataId)];case 1:return t=e.sent(),"string"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(gt().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),vt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),vt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),vt.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),vt.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),vt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),vt.clone(this)},t.prototype.oneHot=function(t,e,n){return this.throwIfDisposed(),vt.oneHot(this,t,e,n)},t.prototype.toString=function(t){return void 0===t&&(t=!1),function(t,e,n,r){var o=Z(e),i=function(t,e,n,r){var o=T(e),i=r[r.length-1],a=new Array(i).fill(0),s=e.length,u="complex64"===n?ht(t):t;if(s>1)for(var p=0;p<o/i;p++)for(var c=p*i,l=0;l<i;l++)a[l]=Math.max(a[l],dt(u[c+l],0,n).length);return a}(t,e,n,o),a=e.length,s=function t(e,n,r,o,i,a){void 0===a&&(a=!0);var s="complex64"===r?2:1,u=n[0],p=n.length;if(0===p)return"complex64"===r?[dt(ht(e)[0],0,r)]:"bool"===r?[ft(e[0])]:[e[0].toString()];if(1===p){if(u>pt){var c=ct*s,l=Array.from(e.slice(0,c)),d=Array.from(e.slice(u-ct*s,u));return"complex64"===r&&(l=ht(l),d=ht(d)),["["+l.map((function(t,e){return dt(t,i[e],r)})).join(", ")+", ..., "+d.map((function(t,e){return dt(t,i[u-ct+e],r)})).join(", ")+"]"]}return["["+("complex64"===r?ht(e):Array.from(e)).map((function(t,e){return dt(t,i[e],r)})).join(", ")+"]"]}var f=n.slice(1),h=o.slice(1),m=o[0]*s,g=[];if(u>pt){for(var v=0;v<ct;v++){var y=(_=v*m)+m;g.push.apply(g,t(e.slice(_,y),f,r,h,i,!1))}g.push("...");for(v=u-ct;v<u;v++){y=(_=v*m)+m;g.push.apply(g,t(e.slice(_,y),f,r,h,i,v===u-1))}}else for(v=0;v<u;v++){var _;y=(_=v*m)+m;g.push.apply(g,t(e.slice(_,y),f,r,h,i,v===u-1))}var b=2===p?",":"";g[0]="["+g[0]+b;for(v=1;v<g.length-1;v++)g[v]=" "+g[v]+b;var x=",\n";for(v=2;v<p;v++)x+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(a?"":x),g}(t,e,n,o,i),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+a),u.push("  shape: ["+e+"]"),u.push("  values:")),u.push(s.map((function(t){return"    "+t})).join("\n")),u.join("\n")}(this.dataSync(),this.shape,this.dtype,t)},t.prototype.tile=function(t){return this.throwIfDisposed(),vt.tile(this,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),vt.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),vt.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),vt.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t="euclidean"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),vt.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),vt.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),vt.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),vt.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),vt.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),vt.stack([this,t],e)},t.prototype.unstack=function(t){return void 0===t&&(t=0),vt.unstack(this,t)},t.prototype.pad=function(t,e){return void 0===e&&(e=0),vt.pad(this,t,e)},t.prototype.batchNormalization=function(t,e,n,r,o){return void 0===n&&(n=.001),yt("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),this.batchNorm(t,e,o,r,n)},t.prototype.batchNorm=function(t,e,n,r,o){return void 0===o&&(o=.001),this.throwIfDisposed(),vt.batchNorm(this,t,e,n,r,o)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),vt.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),vt.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),vt.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),vt.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),vt.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),vt.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),vt.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),vt.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),vt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),vt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),vt.cast(this,t)},t.prototype.add=function(t){return this.throwIfDisposed(),vt.add(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),vt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),vt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),vt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),vt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),vt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),vt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),vt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),vt.mulStrict(this,t)},t.prototype.div=function(t){return this.throwIfDisposed(),vt.div(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),vt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),vt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),vt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),vt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),vt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),vt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),vt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),vt.modStrict(this,t)},t.prototype.squaredDifference=function(t){return this.throwIfDisposed(),vt.squaredDifference(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),vt.squaredDifferenceStrict(this,t)},t.prototype.transpose=function(t){return this.throwIfDisposed(),vt.transpose(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),vt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),vt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),vt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),vt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),vt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),vt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),vt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),vt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),vt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),vt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),vt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),vt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),vt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),vt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),vt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),vt.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),vt.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),vt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),vt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),vt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),vt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),vt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),vt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),vt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),vt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),vt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),vt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),vt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),vt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),vt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),vt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),vt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),vt.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),vt.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),vt.relu(this)},t.prototype.relu6=function(){return this.throwIfDisposed(),vt.relu6(this)},t.prototype.elu=function(){return this.throwIfDisposed(),vt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),vt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),vt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),vt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),vt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),vt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),vt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),vt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),vt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),vt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),vt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),vt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),vt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),vt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),vt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),vt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),vt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),vt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),vt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),vt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),vt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),vt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),vt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),vt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),vt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),vt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),vt.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),vt.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,o,i){return void 0===r&&(r="NWC"),void 0===o&&(o=1),this.throwIfDisposed(),vt.conv1d(this,t,e,n,r,o,i)},t.prototype.conv2d=function(t,e,n,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),vt.conv2d(this,t,e,n,r,o,i)},t.prototype.conv2dTranspose=function(t,e,n,r,o){return this.throwIfDisposed(),vt.conv2dTranspose(this,t,e,n,r,o)},t.prototype.depthwiseConv2D=function(t,e,n,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),vt.depthwiseConv2d(this,t,e,n,r,o,i)},t.prototype.separableConv2d=function(t,e,n,r,o,i){return void 0===o&&(o=[1,1]),void 0===i&&(i="NHWC"),this.throwIfDisposed(),vt.separableConv2d(this,t,e,n,r,o,i)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),vt.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),vt.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),vt.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,o){return this.throwIfDisposed(),vt.pool(this,t,e,n,r,o)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),gt().makeVariable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),vt.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),vt.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),vt.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),vt.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,o,i,a,s){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===s&&(s=0),this.throwIfDisposed(),vt.stridedSlice(this,t,e,n,r,o,i,a,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),vt.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),vt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),vt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),vt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),vt.spectral.irfft(this)},t}();Object.defineProperty(_t,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var bt,xt,Et,wt,At,It=function(t){function e(e,n,r,o){var i=t.call(this,e.shape,e.dtype,e.dataId,o)||this;return i.trainable=n,i.name=r,i}return s(e,t),e.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!S(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");gt().disposeTensor(this),this.dataId=t.dataId,gt().incRef(this,null)},e.prototype.dispose=function(){gt().disposeVariable(this),this.isDisposedInternal=!0},e}(_t);Object.defineProperty(It,Symbol.hasInstance,{value:function(t){return t instanceof _t&&null!=t.assign&&t.assign instanceof Function}}),function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(bt||(bt={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(xt||(xt={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(Et||(Et={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(wt||(wt={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(At||(At={}));var Rt={float32:wt,int32:xt,bool:Et,complex64:At};function Tt(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error("Can not upcast "+t+" with "+e)}return Rt[t][e]}function St(t){return Tt(t,"int32")}function Ct(t,e){if(t.dtype===e.dtype)return[t,e];var n=Tt(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function Nt(t,e){w(t.dtype===e.dtype,(function(){return"The dtypes of the first("+t.dtype+") and second("+e.dtype+") input must match"}))}function kt(t){var e=[];return function t(e,n,r){if(null!=e)if(e instanceof _t)n.push(e);else if(o=e,Array.isArray(o)||"object"==typeof o){var o,i=e;for(var a in i){var s=i[a];r.has(s)||(r.add(s),t(s,n,r))}}}(t,e,new Set),e}var Ot,Dt=Object.freeze({makeTypesMatch:Ct,assertTypesMatch:Nt,isTensorInList:function(t,e){for(var n=0;n<e.length;n++)if(e[n].id===t.id)return!0;return!1},getTensorsInContainer:kt}),Mt=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),Lt=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Mt}return t.prototype.ready=function(){return u(this,void 0,void 0,(function(){var t,e,n;return p(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),e=0,r.label=1;case 1:return e<t.length?(n=t[e],[4,this.initializeBackend(n).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(n)]:[3,4];case 3:return r.sent(),[2];case 4:return e++,[3,1];case 5:throw new Error("Could not initialize any backends, all backend initializations failed.")}}))}))},Object.defineProperty(t.prototype,"backend",{get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '"+this.backendName+"' has not yet been initialized. Make sure to await tf.ready() before calling other methods");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),e=t.name;if(t.asyncInit)throw new Error("The highest priority backend '"+e+"' has not yet been initialized. Make sure to await tf.ready() before calling other methods");this.setBackend(e)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,e,n){return void 0===n&&(n=1),t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)},t.prototype.setBackend=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return p(this,(function(o){switch(o.label){case 0:if(null==this.registryFactory[t])throw new Error("Backend name '"+t+"' not found in registry");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,e=this.initializeBackend(t),n=e.success,e.asyncInit?[4,n]:[3,2]);case 1:return r=o.sent(),[3,3];case 2:r=n,o.label=3;case 3:if(!r)return[2,!1];o.label=4;case 4:return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new st(this.backendInstance),[2,!0]}}))}))},t.prototype.setupRegisteredKernels=function(){var t=this;m(this.backendName).forEach((function(e){null!=e.setupFunc&&e.setupFunc(t.backendInstance)}))},t.prototype.disposeRegisteredKernels=function(t){var e=this;m(t).forEach((function(n){null!=n.disposeFunc&&n.disposeFunc(e.registry[t])}))},t.prototype.initializeBackend=function(t){var e=this,n=this.registryFactory[t];if(null==n)throw new Error("Cannot initialize backend "+t+", no registration found.");try{var r=n.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,i=r.then((function(n){return!(o<e.pendingBackendInitId||(e.registry[t]=n,e.pendingBackendInit=null,0))})).catch((function(n){return!(o<e.pendingBackendInitId||(e.pendingBackendInit=null,console.warn("Initialization of backend "+t+" failed"),console.warn(n.stack||n.message),1))}));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(e){return console.warn("Initialization of backend "+t+" failed"),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(e,n){return t.registryFactory[n].priority-t.registryFactory[e].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),e=0;e<t.length;e++){var n=t[e],r=this.initializeBackend(n),o=r.success,i=r.asyncInit;if(i||o)return{name:n,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")},t.prototype.moveData=function(t,e){var n=this.state.tensorInfo.get(e),r=n.backend,o=this.readSync(e);r.disposeData(e),n.backend=t,t.move(e,o,n.shape,n.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++},t.prototype.tidy=function(t,e){var n,r=this,o=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(n)}),(function(){return(n=e())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n}))},t.prototype.scopedRun=function(t,e,n){t();try{var r=n();return e(),r}catch(t){throw e(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var e=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),n={x:t};return this.addTapeNode(this.state.activeScope.name,n,[e],(function(t){return{x:function(){return t.toFloat()}}}),[]),e},t.prototype.runKernel=function(t,e,n,r,o){return this.runKernelFunc(null,e,null,t,n,r,o)},t.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool("IS_TEST")},t.prototype.checkKernelForMemLeak=function(t,e,n){var r=this.backend.numDataIds(),o=0;n.forEach((function(t){o+="complex64"===t.dtype?3:1}));var i=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],a=r-e-o-i;if(a>0)throw new Error("Backend '"+this.backendName+"' has an internal memory leak ("+a+" data ids) after running '"+t+"'")},t.prototype.runKernelFunc=function(t,e,n,r,o,i,a){var s,u=this;void 0===i&&(i=[]),void 0===a&&(a=[]);var p,c=[],l=this.isTapeOn(),d=null!=this.state.activeScope?this.state.activeScope.name:"",f=function(t){l&&(c=t.map((function(t){return u.keep(u.clone(t))})))},m=this.state.numBytes,g=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var v,y=h(r,this.backendName);return p=null!=y?function(){var t=u.backend.numDataIds();v=y.kernelFunc({inputs:e,attrs:o,backend:u.backend});var n=Array.isArray(v)?v:[v];u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(d,t,n);var r=n.map((function(t){var e=t.dataId,n=t.shape,r=t.dtype;return u.makeTensorFromDataId(e,n,r)})),s=r.filter((function(t,e){return a[e]}));return f(i.slice().concat(s)),r}:function(){var e=u.backend.numDataIds();v=u.tidy((function(){return t(u.backend,f)}));var n=Array.isArray(v)?v:[v];return u.shouldCheckForMemLeaks()&&u.checkKernelForMemLeak(d,e,n),n},this.scopedRun((function(){return u.state.kernelDepth++}),(function(){return u.state.kernelDepth--}),(function(){s=u.ENV.getBool("DEBUG")?u.profiler.profileKernel(d,e,(function(){return p()})):p()})),l&&this.addTapeNode(d,e,s,n,c),this.state.profiling&&this.state.activeProfile.kernels.push({name:d,bytesAdded:this.state.numBytes-m,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-g,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((function(t){return e[t].shape})),outputShapes:s.map((function(t){return t.shape}))}),Array.isArray(v)?s:s[0]},t.prototype.makeTensor=function(t,e,n,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;var o=t;"string"===n&&H(t[0])&&(o=t.map((function(t){return ot(t)})));var i=r.write(o,e,n),a=new _t(e,n,i,this.nextTensorId());if(this.incRef(a,r),"string"===n){var s=this.state.tensorInfo.get(i),u=V(o);this.state.numBytes+=u-s.bytes,s.bytes=u}return a},t.prototype.makeTensorFromDataId=function(t,e,n,r){var o=new _t(e,n=n||"float32",t,this.nextTensorId());return this.incRef(o,r),o},t.prototype.makeVariable=function(t,e,n,r){void 0===e&&(e=!0),n=n||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.asType(r));var o=new It(t,e,n,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error("Variable with name "+o.name+" was already registered");return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o},t.prototype.incRef=function(t,e){var n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;var r=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(r=t.size*z(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:e||this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof It||this.track(t)},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;var e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var e=this.state.registeredVariables[t];this.disposeVariable(e)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t},t.prototype.profile=function(t){return u(this,void 0,void 0,(function(){var e,n;return p(this,(function(r){return this.state.profiling=!0,e=this.state.numBytes,n=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,e,n,r,o){var i=this,a={id:this.state.nextTapeNodeId++,name:t,inputs:e,outputs:n,saved:o};null!=r&&(a.gradient=function(t){return t=t.map((function(t,e){if(null==t){var r=n[e],o=et(r.size,r.dtype);return i.makeTensor(o,r.shape,r.dtype)}return t})),r(t.length>1?t:t[0],o)}),this.state.activeTape.push(a)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e},t.prototype.endScope=function(t){for(var e=this,n=kt(t),r=new Set(n.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var i=this.state.activeScope.track[o];i.kept||r.has(i.id)||i.dispose()}var a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],n.forEach((function(t){t.kept||t.scopeId!==a.id||e.track(t)}))},t.prototype.gradients=function(t,e,n,r){var o=this;if(void 0===r&&(r=!1),w(e.length>0,(function(){return"gradients() received an empty list of xs."})),null!=n&&"float32"!==n.dtype)throw new Error("dy must have 'float32' dtype, but has '"+n.dtype+"'");var i=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy("forward",t)}));w(i instanceof _t,(function(){return"The result y returned by f() must be a tensor."}));var a=function(t,e,n){for(var r={},o={},i=0;i<e.length;i++)r[e[i].id]=!0;for(i=0;i<t.length;i++){var a=(h=t[i]).inputs;for(var s in a){for(var u=a[s],p=!1,c=0;c<e.length;c++)if(r[u.id]){h.outputs.forEach((function(t){return r[t.id]=!0})),p=!0,o[h.id]=!0;break}if(p)break}}var l={};l[n.id]=!0;var d={};for(i=t.length-1;i>=0;i--)for(a=(h=t[i]).inputs,c=0;c<h.outputs.length;c++)if(l[h.outputs[c].id]){for(var s in a)l[a[s].id]=!0,d[h.id]=!0;break}var f=[];for(i=0;i<t.length;i++){var h;if(o[(h=t[i]).id]&&d[h.id]){var m={};for(var s in h.inputs){var g=h.inputs[s];r[g.id]&&(m[s]=g)}var v=Object.assign({},h);v.inputs=m,v.outputs=h.outputs,f.push(v)}}return f}(this.state.activeTape,e,i);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var t,r,s={};s[i.id]=null==n?(r=tt(T(t=i.shape),"float32"),Pt.makeTensor(r,t,"float32")):n,function(t,e,n){for(var r=function(r){var o=e[r],i=[];if(o.outputs.forEach((function(e){var n=t[e.id];null!=n?i.push(n):i.push(null)})),null==o.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+o.name+".");var a=o.gradient(i),s=function(e){if(!(e in a))throw new Error("Cannot backprop through input "+e+". Available gradients found: "+Object.keys(a)+".");var r=n((function(){return a[e]()}));if("float32"!==r.dtype)throw new Error("Error in gradient for op "+o.name+". The gradient of input "+e+" must have 'float32' dtype, but has '"+r.dtype+"'");var i=o.inputs[e];if(!S(r.shape,i.shape))throw new Error("Error in gradient for op "+o.name+". The gradient of input '"+e+"' has shape '"+r.shape+"', which does not match the shape of the input '"+i.shape+"'");if(null==t[i.id])t[i.id]=r;else{var s=t[i.id];t[i.id]=s.add(r),s.dispose()}};for(var u in o.inputs)s(u)},o=e.length-1;o>=0;o--)r(o)}(s,a,(function(t){return o.tidy(t)}));var u=e.map((function(t){return s[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var e in t.saved)t.saved[e].dispose()})),o.state.activeTape=null),{value:i,grads:u}}))},t.prototype.customGrad=function(t){var e=this;return w(j(t),(function(){return"The f passed in customGrad(f) must be a function."})),function(){for(var n,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];w(r.every((function(t){return t instanceof _t})),(function(){return"The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var i={};return r.forEach((function(t,e){i[e]=t})),e.runKernelFunc((function(e,o){return w((n=t.apply(void 0,r.concat([o]))).value instanceof _t,(function(){return"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),w(j(n.gradFunc),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),n.value}),i,(function(t,e){var o=n.gradFunc(t,e),i=Array.isArray(o)?o:[o];w(i.length===r.length,(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),w(i.every((function(t){return t instanceof _t})),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var a={};return i.forEach((function(t,e){a[e]=function(){return t}})),a}))}},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.fromPixels=function(t,e){return this.backend.fromPixels(t,e)},t.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e,n;return p(this,(function(r){switch(r.label){case 0:return e=nt(),[4,this.backend.time(t)];case 1:return(n=r.sent()).wallMs=nt()-e,[2,n]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,"registeredVariables",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Mt,this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}(),Pt=function(){var e=function(){if(null==Ot){var e=void 0;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==r)e=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Ot=e}return Ot}();if(null==e._tfengine){var n=new c(e);e._tfengine=new Lt(n)}return function(t){d=t}(e._tfengine.ENV),gt=function(){return e._tfengine},e._tfengine}();function Bt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Ft=l();Ft.registerFlag("DEBUG",(function(){return!1}),(function(t){t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Ft.registerFlag("IS_BROWSER",(function(){return Bt()})),Ft.registerFlag("IS_NODE",(function(){return void 0!==r&&void 0!==r.versions&&void 0!==r.versions.node})),Ft.registerFlag("IS_CHROME",(function(){return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Ft.registerFlag("PROD",(function(){return!1})),Ft.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return Ft.getBool("DEBUG")})),Ft.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return!0})),Ft.registerFlag("IS_TEST",(function(){return!1}));var Ut,qt,Gt,Wt={},zt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Vt(t,e){Wt[t]=e}function Ht(t){t in Wt||(Wt[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var e=Xt(t);return e.addEventListener("webglcontextlost",(function(e){e.preventDefault(),delete Wt[t]}),!1),1===t?e.getContext("webgl",zt)||e.getContext("experimental-webgl",zt):e.getContext("webgl2",zt)}(t));var e=Wt[t];return e.isContextLost()?(delete Wt[t],Ht(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Wt[t])}function Xt(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function Yt(t,e){return[e,t]}function $t(t){var e=T(t);return k(Math.ceil(e/4))}function jt(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function Kt(t,e){var n,r,o,i,a,s,u,p,c,d=t;return 2===l().getNumber("WEBGL_VERSION")?(n=d.R32F,r=d.R16F,o=d.RGBA16F,i=d.RGBA32F,a=d.RED,s=4,u=1,p=d.HALF_FLOAT,c=d.FLOAT):(n=t.RGBA,r=t.RGBA,o=t.RGBA,i=d.RGBA,a=t.RGBA,s=4,u=4,p=null!=e?e.HALF_FLOAT_OES:null,c=t.FLOAT),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:s,defaultNumChannels:u,textureTypeHalfFloat:p,textureTypeFloat:c}}function Zt(t,e,n){var r=n();return e&&function(t){var e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+ee(t,e))}(t),r}!function(t){t[t.DENSE=0]="DENSE",t[t.SHARED_BATCH=1]="SHARED_BATCH"}(Ut||(Ut={})),function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(qt||(qt={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Gt||(Gt={}));var Qt=5.96e-8,Jt=65504;function te(t){return!!(l().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||Qt<Math.abs(t)&&Math.abs(t)<Jt)}function ee(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}function ne(t,e,n){return Ie(t,e,(function(){return t.getExtension(n)}),'Extension "'+n+'" not supported on this browser.')}function re(t,e,n){var r=Ie(t,e,(function(){return t.createShader(t.VERTEX_SHADER)}),"Unable to create vertex WebGLShader.");if(Zt(t,e,(function(){return t.shaderSource(r,n)})),Zt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}function oe(t,e,n){var r=Ie(t,e,(function(){return t.createShader(t.FRAGMENT_SHADER)}),"Unable to create fragment WebGLShader.");if(Zt(t,e,(function(){return t.shaderSource(r,n)})),Zt(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){var n=se.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);for(var r=+n[1],o=t.split("\n"),i=o.length.toString().length+2,a=o.map((function(t,e){return O((e+1).toString(),i)+t})),s=0,u=0;u<a.length;u++)s=Math.max(a[u].length,s);var p=a.slice(0,r-1),c=a.slice(r-1,r),l=a.slice(r);console.log(p.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+O(c[0],s),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(l.join("\n"))}(n,t.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}var ie,ae,se=/ERROR: [0-9]+:([0-9]+):/g;function ue(t,e){return Ie(t,e,(function(){return t.createProgram()}),"Unable to create WebGLProgram.")}function pe(t,e,n){if(Zt(t,e,(function(){return t.linkProgram(n)})),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}function ce(t,e,n){if(Zt(t,e,(function(){return t.validateProgram(n)})),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function le(t,e,n){var r=Ie(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return Zt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),Zt(t,e,(function(){return t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function de(t,e,n){var r=Ie(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return Zt(t,e,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),Zt(t,e,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function fe(t,e){return Ie(t,e,(function(){return t.createTexture()}),"Unable to create WebGLTexture.")}function he(t,e){var n=l().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){var r="["+t+"x"+e+"]";throw new Error("Requested texture size "+r+" is invalid.")}if(t>n||e>n)throw r="["+t+"x"+e+"]",new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU ["+n+"x"+n+"].")}function me(t,e){return Ie(t,e,(function(){return t.createFramebuffer()}),"Unable to create WebGLFramebuffer.")}function ge(t,e,n,r,o,i,a,s){var u=t.getAttribLocation(n,r);return-1!==u&&(Zt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,o)})),Zt(t,e,(function(){return t.vertexAttribPointer(u,i,t.FLOAT,!1,a,s)})),Zt(t,e,(function(){return t.enableVertexAttribArray(u)})),!0)}function ve(t,e,n,r){Re(t,r),Zt(t,e,(function(){return t.activeTexture(t.TEXTURE0+r)})),Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)}))}function ye(t,e,n,r){return Ie(t,e,(function(){return t.getUniformLocation(n,r)}),'uniform "'+r+'" not present in program.')}function _e(t,e,n){return t.getUniformLocation(e,n)}function be(t,e,n,r,o,i){Zt(t,e,(function(){return ve(t,e,r,i)})),Zt(t,e,(function(){return t.uniform1i(o,i)}))}function xe(t,e,n,r){Zt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),Zt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0)}))}function Ee(t,e,n){Zt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)})),Zt(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}))}function we(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+Ae(t,e))}function Ae(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}function Ie(t,e,n,r){var o=Zt(t,e,(function(){return n()}));if(null==o)throw new Error(r);return o}function Re(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE"+n+"].")}function Te(t,e){return void 0===e&&(e=2),T(t.slice(0,t.length-e))}function Se(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Ce(t){var e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Te(t)].concat(Se(t))),e}function Ne(t,e){var n;void 0===e&&(e=!1);var r=l().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(r*=2,1===(t=t.map((function(e,n){return n>=t.length-2?x(t[n]):t[n]}))).length&&(t=[2,t[0]])),2!==t.length){var o=P(t);t=o.newShape}var i=T(t);if(t.length<=1&&i<=r)return[1,i];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){var a=Te(t),s=2,u=2;return t.length&&(s=(n=Se(t))[0],u=n[1]),k(i=a*(s/2)*(u/2)).map((function(t){return 2*t}))}return k(i)}function ke(t){return t%2==0}function Oe(t,e){if(S(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){var n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(ke(n)&&ke(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&ke(t[0])&&ke(e[0])}function De(t){if(null==ie){var e=Ht(t);ie=e.getParameter(e.MAX_TEXTURE_SIZE)}return ie}function Me(t){if(null==ae){var e=Ht(t);ae=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,ae)}function Le(t){if(0===t)return 0;var e=Ht(t);return Pe(e,"EXT_disjoint_timer_query_webgl2")&&2===t?2:Pe(e,"EXT_disjoint_timer_query")?1:0}function Pe(t,e){return null!=t.getExtension(e)}function Be(t){try{if(null!=Ht(t))return!0}catch(t){return!1}return!1}function Fe(t){if(0===t)return!1;var e=Ht(t);if(1===t){if(!Pe(e,"OES_texture_float"))return!1}else if(!Pe(e,"EXT_color_buffer_float"))return!1;return qe(e)}function Ue(t){if(0===t)return!1;var e=Ht(t);if(1!==t){if(Pe(e,"EXT_color_buffer_float"))return qe(e);if(Pe(e,"EXT_color_buffer_half_float")){var n=e.getExtension("EXT_color_buffer_half_float");return function(t,e){var n=Kt(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);var o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),i}(e,n)}return!1}return!!Pe(e,"OES_texture_float")&&!!Pe(e,"WEBGL_color_buffer_float")&&qe(e)}function qe(t){var e=Kt(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);var o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),o}function Ge(t){return 2===t&&null!=Ht(t).fenceSync}var We=Object.freeze({callAndCheck:Zt,canBeRepresented:te,getWebGLErrorMessage:ee,getExtensionOrThrow:ne,createVertexShader:re,createFragmentShader:oe,createProgram:ue,linkProgram:pe,validateProgram:ce,createStaticVertexBuffer:le,createStaticIndexBuffer:de,getNumChannels:function(){return 2===l().getNumber("WEBGL_VERSION")?1:4},createTexture:fe,validateTextureSize:he,createFramebuffer:me,bindVertexBufferToProgramAttribute:ge,bindTextureUnit:ve,unbindTextureUnit:function(t,e,n){Re(t,n),Zt(t,e,(function(){return t.activeTexture(t.TEXTURE0+n)})),Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:ye,getProgramUniformLocation:_e,bindTextureToProgramUniformSampler:be,bindCanvasToFramebuffer:function(t,e){Zt(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),Zt(t,e,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),Zt(t,e,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}))},bindColorTextureToFramebuffer:xe,unbindColorTextureFromFramebuffer:Ee,validateFramebuffer:we,getFramebufferErrorMessage:Ae,getBatchDim:Te,getRowsCols:Se,getShapeAs3D:Ce,getTextureShapeFromLogicalShape:Ne,isReshapeFree:Oe,getWebGLMaxTextureSize:De,resetMaxTextureSize:function(){ie=null},resetMaxTexturesInShader:function(){ae=null},getMaxTexturesInShader:Me,getWebGLDisjointQueryTimerVersion:Le,hasExtension:Pe,isWebGLVersionEnabled:Be,isCapableOfRenderingToFloatTexture:Fe,isDownloadFloatTextureEnabled:Ue,isWebGLFenceEnabled:Ge}),ze=l();function Ve(){l().set("PROD",!0)}function He(){l().set("DEBUG",!0)}function Xe(){l().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Ye(t){l().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function $e(){Pt.disposeVariables()}function je(){return Pt}function Ke(){return Pt.memory()}function Ze(t){return Pt.profile(t)}function Qe(t,e){return Pt.tidy(t,e)}function Je(t){kt(t).forEach((function(t){return t.dispose()}))}function tn(t){return Pt.keep(t)}function en(t){return Pt.time(t)}function nn(t){return Pt.setBackend(t)}function rn(){return Pt.ready()}function on(){return Pt.backendName}function an(t){Pt.removeBackend(t)}function sn(t){return Pt.findBackend(t)}function un(t){return Pt.findBackendFactory(t)}function pn(t,e,n){return void 0===n&&(n=1),Pt.registerBackend(t,e,n)}function cn(){return Pt.backend}function ln(t,e){l().setPlatform(t,e)}function dn(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];l().getBool("IS_TEST")||console.warn.apply(console,t)}function fn(t,e){var n=t;if(W(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(n)||W(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&l().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],Array.isArray(e)||W(e)){w(n.length>0,(function(){return"Element arr["+r.join("][")+"] should be a primitive, but is an array of "+e.length+" elements"})),w(e.length===n[0],(function(){return"Element arr["+r.join("][")+"] should have "+n[0]+" elements, but has "+e.length+" elements"}));for(var o=n.slice(1),i=0;i<e.length;++i)t(e[i],o,r.concat(i))}else w(0===n.length,(function(){return"Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+n[0]+" elements"}))}(t,r,[]),r}function hn(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error("Argument '"+n+"' passed to '"+r+"' must be "+t+" tensor, but got "+e+" tensor")}function mn(t,e,n,r){if(void 0===r&&(r="numeric"),t instanceof _t)return hn(r,t.dtype,e,n),t;var o=$(t);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),hn(r,o,e,n),null==t||!W(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){var i=null==t?"null":t.constructor.name;throw new Error("Argument '"+e+"' passed to '"+n+"' must be a Tensor or TensorLike, but got '"+i+"'")}var a=fn(t,o);W(t)||Array.isArray(t)||(t=[t]);var s="string"!==o?Q(t,o,l().getBool("DEBUG")):R(t,[],!0);return Pt.makeTensor(s,a,o)}function gn(t,e,n,r){if(void 0===r&&(r="numeric"),!Array.isArray(t))throw new Error("Argument "+e+" passed to "+n+" must be a `Tensor[]` or `TensorLike[]`");return t.map((function(t,r){return mn(t,e+"["+r+"]",n)}),r)}function vn(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function yn(t,e,n){for(var r=t.length+e.length,o=[],i=0,a=0,s=0;s<r;s++)-1===n.indexOf(s)?o.push(t[i++]):o.push(e[a++]);return o}function _n(t,e){for(var n=[],r=t.length,o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return[n,e.map((function(e){return t[e]}))]}function bn(t,e){return yn(t,e.map((function(t){return 1})),e)}function xn(t,e,n){w(vn(e,n),(function(){return t+" supports only inner-most axes for now. Got axes "+e+" and rank-"+n+" input."}))}function En(t,e){if(vn(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((function(t){return n.push(t)})),n}function wn(t){return t.map((function(t,e){return[e,t]})).sort((function(t,e){return t[1]-e[1]})).map((function(t){return t[0]}))}function An(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}function In(t,e){var n=t[0].length;t.forEach((function(t,e){w(t.length===n,(function(){return"Error in concat"+n+"D: rank of tensors["+e+"] must be the same as the rank of the rest ("+n+")"}))})),w(e>=0&&e<n,(function(){return"Error in concat"+n+"D: axis must be between 0 and "+(n-1)+"."}));var r=t[0];t.forEach((function(t,o){for(var i=0;i<n;i++)w(i===e||t[i]===r[i],(function(){return"Error in concat"+n+"D: Shape of tensors["+o+"] ("+t+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+o+"."}))}))}function Rn(t,e){for(var n=t[0].slice(),r=1;r<t.length;r++)n[e]+=t[r][e];return n}function Tn(t){var e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");var n=e[0],r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));var o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Pt.startScope(n);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Pt.endScope(o),o}catch(t){throw Pt.endScope(null),t}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}ze.registerFlag("HAS_WEBGL",(function(){return ze.getNumber("WEBGL_VERSION")>0})),ze.registerFlag("WEBGL_VERSION",(function(){return Be(2)?2:Be(1)?1:0})),ze.registerFlag("WEBGL_BUFFER_SUPPORTED",(function(){return 2===ze.get("WEBGL_VERSION")})),ze.registerFlag("WEBGL_CPU_FORWARD",(function(){return!0})),ze.registerFlag("WEBGL_FORCE_F16_TEXTURES",(function(){return!1})),ze.registerFlag("WEBGL_PACK",(function(){return ze.getBool("HAS_WEBGL")})),ze.registerFlag("WEBGL_PACK_NORMALIZATION",(function(){return ze.getBool("WEBGL_PACK")})),ze.registerFlag("WEBGL_PACK_CLIP",(function(){return ze.getBool("WEBGL_PACK")})),ze.registerFlag("WEBGL_PACK_DEPTHWISECONV",(function(){return!1})),ze.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(function(){return ze.getBool("WEBGL_PACK")})),ze.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(function(){return ze.getBool("WEBGL_PACK")})),ze.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(function(){return ze.getBool("WEBGL_PACK")})),ze.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(function(){return ze.getBool("WEBGL_PACK")})),ze.registerFlag("WEBGL_PACK_REDUCE",(function(){return ze.getBool("WEBGL_PACK")})),ze.registerFlag("WEBGL_LAZILY_UNPACK",(function(){return ze.getBool("WEBGL_PACK")})),ze.registerFlag("WEBGL_CONV_IM2COL",(function(){return ze.getBool("WEBGL_PACK")})),ze.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(function(){return De(ze.getNumber("WEBGL_VERSION"))})),ze.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(function(){return Me(ze.getNumber("WEBGL_VERSION"))})),ze.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(function(){var t=ze.getNumber("WEBGL_VERSION");return 0===t?0:Le(t)})),ze.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(function(){return ze.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))));var t})),ze.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(function(){return Fe(ze.getNumber("WEBGL_VERSION"))})),ze.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(function(){return!ze.getBool("WEBGL_FORCE_F16_TEXTURES")&&ze.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")})),ze.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(function(){return Ue(ze.getNumber("WEBGL_VERSION"))})),ze.registerFlag("WEBGL_FENCE_API_ENABLED",(function(){return Ge(ze.getNumber("WEBGL_VERSION"))})),ze.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(function(){return ze.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0})),yt=Ye;var Sn=Tn({complex_:function(t,e){var n=mn(t,"real","complex"),r=mn(e,"imag","complex");return A(n.shape,r.shape,"real and imag shapes, "+n.shape+" and "+r.shape+", must match in call to tf.complex()."),Pt.runKernelFunc((function(t){return t.complex(n,r)}),{$real:n,$imag:r})}}),Cn=Tn({real_:function(t){var e=mn(t,"input","real");return Pt.runKernelFunc((function(t){return t.real(e)}),{$input:e})}}),Nn=Tn({imag_:function(t){var e=mn(t,"input","imag");return Pt.runKernelFunc((function(t){return t.imag(e)}),{$input:e})}});function kn(t,e,n){return On(t,e,fn(t,n),n)}function On(t,e,n,r){if(null==r&&(r=$(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!W(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){rt(e);var o=T(e),i=T(n);w(o===i,(function(){return"Based on the provided shape, ["+e+"], the tensor should have "+o+" values but has "+i}));for(var a=0;a<n.length;++a){var s=n[a],u=a!==n.length-1||s!==T(e.slice(a));w(n[a]===e[a]||!u,(function(){return"Error creating a new Tensor. Inferred shape ("+n+") does not match the provided shape ("+e+"). "}))}}return W(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?Q(t,r,l().getBool("DEBUG")):R(t,[],!0),Pt.makeTensor(t,e,r)}function Dn(t,e){if((W(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&W(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return On(t,[],[],e)}function Mn(t,e){I(t);var n=fn(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return On(t,null,n,e)}function Ln(t,e,n){if(I(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");var r=fn(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return On(t,e,r,n)}function Pn(t,e,n){if(I(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");var r=fn(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return On(t,e,r,n)}function Bn(t,e,n){if(I(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");var r=fn(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return On(t,e,r,n)}function Fn(t,e,n){if(I(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");var r=fn(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return On(t,e,r,n)}function Un(t,e,n){if(I(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");var r=fn(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return On(t,e=e||r,r,n)}function qn(t,e,n,r){return void 0===e&&(e=!0),Pt.makeVariable(t,e,n,r)}function Gn(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=Gn(t,"float32"),r=Wn(t,"float32");return Sn(n,r)}var o=tt(T(t),e);return Pt.makeTensor(o,t,e)}function Wn(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=Wn(t,"float32"),r=Wn(t,"float32");return Sn(n,r)}var o=et(T(t),e);return Pt.makeTensor(o,t,e)}function zn(t,e,n){return Pt.runKernelFunc((function(r){return r.fill(t,e,n)}),{})}function Vn(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");return Pt.runKernelFunc((function(r){return r.linspace(t,e,n)}),{})}function Hn(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r="float32"),0===n)throw new Error("Cannot have a step of zero");if(t===e||t<e&&n<0||e<t&&n>1)return Wn([0],r);var o=et(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+n;return Mn(o,r)}var Xn=Tn({onesLike_:function(t){var e=mn(t,"x","onesLike");if("complex64"===e.dtype){var n=Xn(Cn(e)),r=Yn(Nn(e));return Sn(n,r)}return Pt.runKernelFunc((function(t){return t.onesLike(e)}),{$x:e},(function(t,e){return{$x:function(){return Yn(t)}}}))}}),Yn=Tn({zerosLike_:function(t){var e=mn(t,"x","zerosLike");return Pt.runKernelFunc((function(t){return t.zerosLike(e)}),{$x:e},(function(t,e){return{$x:function(){return Yn(t)}}}))}}),$n=Tn({concat_:function(t,e){void 0===e&&(e=0),w(t.length>=1,(function(){return"Pass at least one tensor to concat"}));var n=gn(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((function(t){if("complex64"!==t.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype "+t.dtype+". ")})),e=L(e,n[0].shape)[0];var r=Rn(n.map((function(t){return t.shape})),e);if(0===T(r))return kn([],r);if(1===(n=n.filter((function(t){return t.size>0}))).length)return n[0];var o=n.map((function(t){return t.shape}));In(o,e);var i=n;return Pt.runKernelFunc((function(t){return t.concat(n,e)}),i,(function(t){var n=o.map((function(t){return t[e]}));return Jn(t,n,e).map((function(t){return function(){return t}}))}))}}),jn=Tn({concat1d_:function(t){return $n(t,0)}}),Kn=Tn({concat2d_:function(t,e){return $n(t,e)}}),Zn=Tn({concat3d_:function(t,e){return $n(t,e)}}),Qn=Tn({concat4d_:function(t,e){return $n(t,e)}}),Jn=Tn({split_:function(t,e,n){void 0===n&&(n=0);var r,o=mn(t,"x","split");return n=L(n,o.shape)[0],"number"==typeof e?(w(o.shape[n]%e==0,(function(){return"Number of splits must evenly divide the axis."})),r=new Array(e).fill(o.shape[n]/e)):(w(o.shape[n]===e.reduce((function(t,e){return t+e})),(function(){return"The sum of sizes must match the size of the axis dimension."})),r=e),Pt.runKernelFunc((function(t){return t.split(o,r,n)}),{$x:o},(function(t){return{$x:function(){return $n(t,n)}}}))}});function tr(t,e){return t(e={exports:{}},e.exports),e.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;var er=tr((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function i(t,e){var n=new r(t),i=e&&e.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.alea=i}(0,t)})),nr=tr((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xor128=i}(0,t)})),rr=tr((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xorwow=i}(0,t)})),or=tr((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function i(t,e){null==t&&(t=+new Date);var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.x&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xorshift7=i}(0,t)})),ir=tr((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,i=e.i;return e.w=r=r+1640531527|0,n=o[i+34&127],t=o[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,o,i,a,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),o=0,i=-32;i<u;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(a=a+1640531527|0,o=0==(n=s[127&i]^=r+a)?o+1:0);for(o>=128&&(s[127&(e&&e.length||0)]=-1),o=127,i=512;i>0;--i)r=s[o+34&127],n=s[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[o]=r^n;t.w=a,t.X=s,t.i=o}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function i(t,e){null==t&&(t=+new Date);var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.X&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xor4096=i}(0,t)})),ar=tr((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.tychei=i}(0,t)})),sr=tr((function(t){!function(e,r){var o,i=this,a=256,s=6,u="random",p=r.pow(a,s),c=r.pow(2,52),l=2*c,d=a-1;function f(t,n,d){var f=[],y=g(function t(e,n){var r,o=[],i=typeof e;if(n&&"object"==i)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:"string"==i?e:e+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[t,v(e)]:null==t?function(){try{var t;return o&&(t=o.randomBytes)?t=t(a):(t=new Uint8Array(a),(i.crypto||i.msCrypto).getRandomValues(t)),v(t)}catch(t){var n=i.navigator,r=n&&n.plugins;return[+new Date,i,r,i.screen,v(e)]}}():t,3),f),_=new h(f),b=function(){for(var t=_.g(s),e=p,n=0;t<c;)t=(t+n)*a,e*=a,n=_.g(1);for(;t>=l;)t/=2,e/=2,n>>>=1;return(t+n)/e};return b.int32=function(){return 0|_.g(4)},b.quick=function(){return _.g(4)/4294967296},b.double=b,g(v(_.S),e),(n.pass||d||function(t,e,n,o){return o&&(o.S&&m(o,_),t.state=function(){return m(_,{})}),n?(r[u]=t,e):t})(b,y,"global"in n?n.global:this==r,n.state)}function h(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<a;)s[o]=o++;for(o=0;o<a;o++)s[o]=s[i=d&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=d&o+1],n=n*a+s[d&(s[o]=s[i=d&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(a)}function m(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function g(t,e){for(var n,r=t+"",o=0;o<r.length;)e[d&o]=d&(n^=19*e[d&o])+r.charCodeAt(o++);return v(e)}function v(t){return String.fromCharCode.apply(0,t)}if(r["seed"+u]=f,g(r.random(),e),t.exports){t.exports=f;try{o=n(11)}catch(t){}}}([],Math)}));sr.alea=er,sr.xor128=nr,sr.xorwow=rr,sr.xorshift7=or,sr.xor4096=ir,sr.tychei=ar;var ur=sr.alea,pr=function(){function t(t,e,n,r,o){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var i=o||Math.random();this.random=ur(i.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var o=void 0,i=void 0,a=void 0;do{a=(o=2*this.random()-1)*o+(i=2*this.random()-1)*i}while(a>=1||0===a);var s=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*o*s,n=this.mean+this.stdDev*i*s,this.truncated&&!this.isValidTruncated(e)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),cr=function(){function t(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;var o=r||Math.random();this.randu=ur(o.toString()),this.randn=new pr(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,e,n,r,o,i;;){do{r=this.randn.nextValue(),i=1+this.c*r}while(i<=0);if(i*=i*i,e=1-.331*(t=r*r)*t,n=.5*t+this.d*(1-i+Math.log(i)),(o=this.randu())<e||Math.log(o)<n)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)},t.prototype.convertValue=function(t){return"float32"===this.dtype?t:Math.round(t)},t}(),lr=function(){function t(t,e,n,r){var o=this;if(void 0===t&&(t=0),void 0===e&&(e=1),this.canReturnFloat=function(){return null==o.dtype||"float32"===o.dtype},this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between "+t+" - "+e+" <= 1 and dtype is not float");this.random=ur(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();function dr(t,e,n){return void 0===e&&(e="float32"),e=e||"float32",rt(t),new mt(t,e,n)}function fr(t,e){void 0===e&&(e=!1),console.log(t.toString(e))}var hr=Tn({batchToSpaceND_:function(t,e,n){var r=mn(t,"x","batchToSpaceND"),o=e.reduce((function(t,e){return t*e}));return w(r.rank>=1+e.length,(function(){return"input rank is "+r.rank+" but should be > than blockShape.length "+e.length})),w(n.length===e.length,(function(){return"crops.length is "+n.length+" but should be equal to blockShape.length  "+e.length})),w(r.shape[0]%o==0,(function(){return"input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+e.join(" * ")+" === "+o})),Pt.runKernelFunc((function(t){return t.batchToSpaceND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.spaceToBatchND(e,n)}}}))}}),mr=Tn({cast_:function(t,e){var n=mn(t,"x","cast");if(!q(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");var r={dtype:e};return Pt.runKernelFunc((function(t){return t.cast(n,e)}),{x:n},(function(t){return{x:function(){return t.clone()}}}),"Cast",r)}}),gr=Tn({clone_:function(t){var e=mn(t,"x","clone",null);return Pt.runKernelFunc((function(){return Pt.makeTensorFromDataId(e.dataId,e.shape,e.dtype)}),{$x:e},(function(t){return{$x:function(){return t.toFloat()}}}))}}),vr=Tn({cumsum_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var o=mn(t,"x","cumsum"),i=En([e|=0],o.rank),a=o;null!=i&&(a=o.transpose(i));var s=An(1,o.rank)[0],u=Pt.runKernelFunc((function(t){return t.cumsum(a,s,n,r)}),{permutedX:a},(function(t){return{permutedX:function(){return t.cumsum(e,n,!r)}}}));return null!=i&&(u=u.transpose(i)),u}}),yr=Tn({depthToSpace_:function(t,e,n){void 0===n&&(n="NHWC");var r=mn(t,"x","depthToSpace"),o="NHWC"===n?r.shape[1]:r.shape[2],i="NHWC"===n?r.shape[2]:r.shape[3],a="NHWC"===n?r.shape[3]:r.shape[1];return w(o*e>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+o+" and "+e+"  for depthToSpace with input shape\n      "+r.shape})),w(i*e>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+i+" and "+e+" for depthToSpace with input shape\n          "+r.shape})),w(a%(e*e)==0,(function(){return"Dimension size must be evenly divisible by "+e*e+" but is "+a+" for depthToSpace with input shape "+r.shape})),Pt.runKernelFunc((function(t){return t.depthToSpace(r,e,n)}),{$x:r})}}),_r=Tn({expandDims_:function(t,e){void 0===e&&(e=0);var n=mn(t,"x","expandDims",null);w(e<=n.rank,(function(){return"Axis must be <= rank of the tensor"}));var r=n.shape.slice();return e<0&&(w(-(n.rank+1)<=e,(function(){return"Axis must be in the interval ["+-(n.rank+1)+", "+n.rank+"]"})),e=n.rank+e+1),r.splice(e,0,1),Or(n,r)}}),br=Tn({eye_:function(t,e,n,r){void 0===r&&(r="float32"),null==e&&(e=t);for(var o=dr([t,e],r),i=t<=e?t:e,a=0;a<i;++a)o.set(1,a,a);var s=o.toTensor().as2D(t,e);if(null==n)return s;if(1===n.length)return Pr(_r(s,0),[n[0],1,1]);if(2===n.length)return Pr(_r(_r(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return Pr(_r(_r(_r(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+n.length+"D.")}}),xr=Tn({multinomial_:function(t,e,n,r){void 0===r&&(r=!1);var o=mn(t,"logits","multinomial"),i=o.size,a=o.rank;if(i<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+i+".");if(a>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+a);n=n||Math.random();var s=1===a?o.as2D(1,-1):o,u=Pt.runKernelFunc((function(t){return t.multinomial(s,r,e,n)}),{logits2D:s});return 1===a?u.as1D():u}}),Er=Tn({oneHot_:function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);var o=mn(t,"indices","oneHot","int32"),i=o.shape.concat([e]);return o=o.flatten(),Pt.runKernelFunc((function(t){return t.oneHot(o,e,n,r)}),{$indices:o},(function(t){return{$indices:function(){return Wn(o.shape,"float32")}}})).reshape(i)}}),wr=Tn({pad_:function(t,e,n){void 0===n&&(n=0);var r=mn(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var o=e.map((function(t){return t[0]}));return Pt.runKernelFunc((function(t){return t.pad(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.slice(o,r.shape)}}}))}}),Ar=Tn({pad1d_:function(t,e,n){return void 0===n&&(n=0),w(2===e.length,(function(){return"Invalid number of paddings. Must be length of 2."})),wr(t,[e],n)}}),Ir=Tn({pad2d_:function(t,e,n){return void 0===n&&(n=0),w(2===e.length&&2===e[0].length&&2===e[1].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),wr(t,e,n)}}),Rr=Tn({pad3d_:function(t,e,n){return void 0===n&&(n=0),w(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),wr(t,e,n)}}),Tr=Tn({pad4d_:function(t,e,n){return void 0===n&&(n=0),w(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),wr(t,e,n)}}),Sr=Tn({rand_:function(t,e,n){var r=T(t),o=null;if(null==n||"float32"===n)o=new Float32Array(r);else if("int32"===n)o=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);o=new Uint8Array(r)}for(var i=0;i<r;i++)o[i]=e();return Pt.makeTensor(o,t,n)}}),Cr=Tn({randomNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new pr(e,n,r,!1,o),a=dr(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Nr=Tn({randomGamma_:function(t,e,n,r,o){if(void 0===n&&(n=1),void 0===r&&(r="float32"),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);for(var i=new cr(e,n,r,o),a=dr(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),kr=Tn({randomUniform_:function(t,e,n,r,o){void 0===e&&(e=0),void 0===n&&(n=1),void 0===r&&(r="float32");for(var i=dr(t,r),a=new lr(e,n,null,o),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}}),Or=Tn({reshape_:function(t,e){var n=mn(t,"x","reshape",null);e=M(e,n.size),w(n.size===T(e),(function(){return"new shape and old shape must have the same number of elements."}));var r={shape:e};return Pt.runKernelFunc((function(t){return t.reshape(n,e)}),{x:n},(function(t){return{x:function(){return t.reshape(n.shape)}}}),"Reshape",r)}}),Dr=Tn({spaceToBatchND_:function(t,e,n){var r=mn(t,"x","spaceToBatchND");return w(r.rank>=1+e.length,(function(){return"input rank "+r.rank+" should be > than [blockShape] "+e.length})),w(n.length===e.length,(function(){return"paddings.shape[0] "+n.length+" must be equal to [blockShape] "+e.length})),w(r.shape.reduce((function(t,r,o){return o>0&&o<=e.length?t&&(r+n[o-1][0]+n[o-1][1])%e[o-1]==0:t}),!0),(function(){return"input spatial dimensions "+r.shape.slice(1)+" with paddings "+n.toString()+" must be divisible by blockShapes "+e.toString()})),Pt.runKernelFunc((function(t){return t.spaceToBatchND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.batchToSpaceND(e,n)}}}))}}),Mr=Tn({squeeze_:function(t,e){var n=mn(t,"x","squeeze");return Or(n,P(n.shape,e).newShape)}}),Lr=Tn({stack_:function(t,e){void 0===e&&(e=0);var n=gn(t,"tensors","stack");if(w(n.length>=1,(function(){return"Pass at least one tensor to tf.stack"})),1===n.length)return n[0].expandDims(e);var r=n[0].rank,o=n[0].shape,i=n[0].dtype;w(e<=r,(function(){return"Axis must be <= rank of the tensor"})),n.forEach((function(t){A(o,t.shape,"All tensors passed to stack must have matching shapes")})),n.forEach((function(t){w(i===t.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var a=n.map((function(t){return t.expandDims(e)}));return $n(a,e)}}),Pr=Tn({tile_:function(t,e){var n=mn(t,"x","tile",null);return w(n.rank===e.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of reps "+e+"."})),Pt.runKernelFunc((function(t,r){var o=t.tile(n,e);return r([n]),o}),{$x:n},(function(t,n){var r=n[0];return{$x:function(){var n=Yn(r);if(1===r.rank)for(var o=0;o<e[0];++o)n=n.add(t.slice([o*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(o=0;o<e[0];++o)for(var i=0;i<e[1];++i)n=n.add(t.slice([o*r.shape[0],i*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(o=0;o<e[0];++o)for(i=0;i<e[1];++i)for(var a=0;a<e[2];++a)n=n.add(t.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(o=0;o<e[0];++o)for(i=0;i<e[1];++i)for(a=0;a<e[2];++a)for(var s=0;s<e[3];++s)n=n.add(t.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2],s*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return n}}}))}}),Br=Tn({truncatedNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new pr(e,n,r,!0,o),a=dr(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Fr=Tn({unstack_:function(t,e){void 0===e&&(e=0),e=e||0;var n=mn(t,"x","unstack");return w(e>=-n.shape.length&&e<n.shape.length,(function(){return"Axis = "+e+" is not in [-"+n.shape.length+", "+n.shape.length+")"})),e<0&&(e+=n.shape.length),Pt.runKernelFunc((function(t){return t.unstack(n,e)}),{$x:n},(function(t){return{$x:function(){return Lr(t,e)}}}))}}),Ur=function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,c,l,d;return p(this,(function(p){switch(p.label){case 0:return n=mn(t,"x","setdiff1d"),r=mn(e,"y","setdiff1d"),w(n.dtype===r.dtype,(function(){return"x and y should have the same dtype, but got x ("+n.dtype+") and y ("+r.dtype+")."})),w(1===n.rank,(function(){return"x should be 1D tensor, but got x ("+n.shape+")."})),w(1===r.rank,(function(){return"y should be 1D tensor, but got y ("+r.shape+")."})),[4,n.data()];case 1:return o=p.sent(),[4,r.data()];case 2:for(i=p.sent(),a=new Set(i),s=0,l=0;l<o.length;l++)a.has(o[l])||s++;for(u=new mt([s],n.dtype),c=new mt([s],"int32"),l=0,d=0;l<o.length;l++)a.has(o[l])||(u.values[d]=o[l],c.values[d]=l,d++);return[2,[u.toTensor(),c.toTensor()]]}}))}))};function qr(t,e,n,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(e.slice(0))).push(t[0]/n),o=o.concat(t.slice(1));else{o=o.concat(t[0]);for(var i=e.length,a=0;a<i;++a)o=o.concat([t[a+1]/e[a],e[a]]);o=o.concat(t.slice(i+1))}return o}function Gr(t,e,n){void 0===n&&(n=!0);var r=[];if(n){r.push(e);for(var o=e+1;o<t;++o)o<=2*e?(r.push(o),r.push(o-(e+1))):r.push(o)}else{var i=[],a=[];for(o=1;o<t;++o)o>=2*e+1||o%2==1?a.push(o):i.push(o);r.push.apply(r,i),r.push(0),r.push.apply(r,a)}return r}function Wr(t,e,n,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(var i=1;i<t.length;++i)i<=e.length?r?o.push(e[i-1]*t[i]):o.push(t[i]/e[i-1]):o.push(t[i]);return o}function zr(t,e){for(var n=[0],r=0;r<e;++r)n.push(t[r][0]);return n}function Vr(t,e,n){for(var r=t.slice(0,1),o=0;o<n;++o)r.push(t[o+1]-e[o][0]-e[o][1]);return r}function Hr(t,e){if(t.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+t.rank+".");if(e.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if("int32"!==e.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+e.dtype+".");if(e.shape[e.rank-1]>t.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+e.shape[e.rank-1]+" vs. "+t.rank);if(0===t.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+t.shape+".");for(var n=e.shape,r=n[n.length-1],o=1,i=0;i<n.length-1;++i)o*=n[i];var a=t.shape,s=n.slice();s.pop();var u=1;for(i=r;i<t.rank;++i)u*=a[i],s.push(a[i]);var p=Z(t.shape).map((function(t){return t/u})).concat([1]).slice(0,r);return[s,o,u,p]}var Xr=30;function Yr(t){return t<=Xr?t:K(t,Math.floor(Math.sqrt(t)))}function $r(t,e,n){for(var r=e.rank>1?e.shape[e.rank-1]:1,o=n.length,i=1,a=r;a<o;++a)i*=n[a];var s=r<1?1:r;return{sliceRank:r,numUpdates:e.size/s,sliceSize:i,strides:Z(n.slice(0,r)).concat([1]),outputSize:T(n)}}function jr(t,e,n){w(t.rank===e.length,(function(){return"Error in slice"+t.rank+"D: Length of begin "+e+" must match the rank of the array ("+t.rank+")."})),w(t.rank===n.length,(function(){return"Error in slice"+t.rank+"D: Length of size "+n+" must match the rank of the array ("+t.rank+")."}));for(var r=function(r){w(e[r]+n[r]<=t.shape[r],(function(){return"Error in slice"+t.rank+"D: begin["+r+"] + size["+r+"] ("+(e[r]+n[r])+") would overflow input.shape["+r+"] ("+t.shape[r]+")"}))},o=0;o<t.rank;++o)r(o)}function Kr(t){for(var e=[],n=0;t>0;)1&t&&e.push(n),t/=2,n++;return e}function Zr(t,e,n){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function Qr(t,e,n,r,o){var i=e[o],a=n[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),b(0,i,s-1)}function Jr(t,e,n,r,o){var i=e[o],a=n[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),a>0?b(0,i,s):b(-1,i,s-1)}function to(t,e,n){for(var r=n.length,o=0;o<n.length;o++)if(n[o]>1){r=o;break}for(o=r+1;o<n.length;o++)if(e[o]>0||n[o]!==t[o])return!1;return!0}function eo(t,e){for(var n=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}var no=Object.freeze({assertParamsValid:jr,maskToAxes:Kr,computeOutShape:Zr,startForAxis:Qr,stopForAxis:Jr,isSliceContinous:to,computeFlatOffset:eo});function ro(t){return w(j(t),(function(){return"The f passed in grad(f) must be a function"})),function(e,n){var r=mn(e,"x","tf.grad",null),o=null!=n?mn(n,"dy","tf.grad"):null;return Pt.tidy((function(){var e=Pt.gradients((function(){return t(r)}),[r],o),n=e.value,i=e.grads;return null!=o&&A(n.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),po(i),i[0]}))}}function oo(t){return w(j(t),(function(){return"The f passed in grads(f) must be a function"})),function(e,n){w(Array.isArray(e),(function(){return"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"}));var r=gn(e,"args","tf.grads",null),o=null!=n?mn(n,"dy","tf.grads"):null;return Pt.tidy((function(){var e=Pt.gradients((function(){return t.apply(void 0,r)}),r,o),n=e.value,i=e.grads;return null!=o&&A(n.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),po(i),i}))}}function io(t){return w(j(t),(function(){return"The f passed in valueAndGrad(f) must be a function"})),function(e,n){w(e instanceof _t,(function(){return"The x passed in valueAndGrad(f)(x) must be a tensor"})),w(null==n||n instanceof _t,(function(){return"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"}));var r=Pt.gradients((function(){return t(e)}),[e],n),o=r.grads,i=r.value;return po(o),{grad:o[0],value:i}}}function ao(t){return w(j(t),(function(){return"The f passed in valueAndGrads(f) must be a function"})),function(e,n){w(Array.isArray(e)&&e.every((function(t){return t instanceof _t})),(function(){return"The args passed in valueAndGrads(f)(args) must be array of tensors"})),w(null==n||n instanceof _t,(function(){return"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"}));var r=Pt.gradients((function(){return t.apply(void 0,e)}),e,n);return null!=n&&A(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),po(r.grads),r}}function so(t,e){w(j(t),(function(){return"The f passed in variableGrads(f) must be a function"})),w(null==e||Array.isArray(e)&&e.every((function(t){return t instanceof It})),(function(){return"The varList passed in variableGrads(f, varList) must be an array of variables"}));var n=null!=e;if(!n)for(var r in e=[],Pt.registeredVariables)e.push(Pt.registeredVariables[r]);var o=n?e.filter((function(t){return!t.trainable})):null,i=e.length;w((e=e.filter((function(t){return t.trainable}))).length>0,(function(){return"variableGrads() expects at least one of the input variables to be trainable, but none of the "+i+" variables is trainable."}));var a=Pt.gradients(t,e,null,!0),s=a.value,u=a.grads;w(u.some((function(t){return null!=t})),(function(){return"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),w(0===s.rank,(function(){return"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+s.rank+" tensor"}));var p={};return e.forEach((function(t,e){null!=u[e]&&(p[t.name]=u[e])})),null!=o&&o.forEach((function(t){return p[t.name]=null})),{value:s,grads:p}}function uo(t){return Pt.customGrad(t)}function po(t){if(t.filter((function(t){return null==t})).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var co=Tn({softmax_:function(t,e){void 0===e&&(e=-1);var n=mn(t,"logits","softmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and dim was "+e);return uo((function(t,n){var r=t.logSumExp([e],!0),o=t.toFloat().sub(r).exp();return n([o]),{value:o,gradFunc:function(t,n){var r=n[0],o=t.mul(r);return o.sub(o.sum([e],!0).mul(r))}}}))(n)}}),lo=Tn({logSoftmax_:function(t,e){void 0===e&&(e=-1);var n=mn(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and axis was "+e);return uo((function(t,n){var r=t.max(e,!0),o=t.sub(r),i=o.toFloat().sub(o.exp().sum(e,!0).log());return n([i]),{value:i,gradFunc:function(t,n){var r=n[0].exp();return t.sub(t.sum(e,!0).mul(r))}}}))(n)}}),fo=function(){function t(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap,this.dataIdsCount=0}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,e){this.dataIdsCount++,this.data.set(t,e)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.dataIdsCount--,this.data.delete(t)},t.prototype.numDataIds=function(){return this.dataIdsCount},t}(),ho=function(){function t(){}return t.prototype.time=function(t){return mo()},t.prototype.read=function(t){return mo()},t.prototype.readSync=function(t){return mo()},t.prototype.numDataIds=function(){return mo()},t.prototype.disposeData=function(t){return mo()},t.prototype.fromPixels=function(t,e){return mo()},t.prototype.write=function(t,e,n){return mo()},t.prototype.move=function(t,e,n,r){return mo()},t.prototype.memory=function(){return mo()},t.prototype.floatPrecision=function(){return mo()},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,e,n,r){return mo()},t.prototype.fusedBatchMatMul=function(t){return t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights,mo()},t.prototype.slice=function(t,e,n){return mo()},t.prototype.stridedSlice=function(t,e,n,r){return mo()},t.prototype.unstack=function(t,e){return mo()},t.prototype.reverse=function(t,e){return mo()},t.prototype.concat=function(t,e){return mo()},t.prototype.neg=function(t){return mo()},t.prototype.add=function(t,e){return mo()},t.prototype.addN=function(t){return mo()},t.prototype.subtract=function(t,e){return mo()},t.prototype.multiply=function(t,e){return mo()},t.prototype.realDivide=function(t,e){return mo()},t.prototype.floorDiv=function(t,e){return mo()},t.prototype.sum=function(t,e){return mo()},t.prototype.prod=function(t,e){return mo()},t.prototype.unsortedSegmentSum=function(t,e,n){return mo()},t.prototype.argMin=function(t,e){return mo()},t.prototype.argMax=function(t,e){return mo()},t.prototype.equal=function(t,e){return mo()},t.prototype.notEqual=function(t,e){return mo()},t.prototype.less=function(t,e){return mo()},t.prototype.lessEqual=function(t,e){return mo()},t.prototype.greater=function(t,e){return mo()},t.prototype.greaterEqual=function(t,e){return mo()},t.prototype.logicalNot=function(t){return mo()},t.prototype.logicalAnd=function(t,e){return mo()},t.prototype.logicalOr=function(t,e){return mo()},t.prototype.where=function(t){return mo()},t.prototype.select=function(t,e,n){return mo()},t.prototype.topk=function(t,e,n){return mo()},t.prototype.min=function(t,e){return mo()},t.prototype.minimum=function(t,e){return mo()},t.prototype.mod=function(t,e){return mo()},t.prototype.max=function(t,e){return mo()},t.prototype.maximum=function(t,e){return mo()},t.prototype.all=function(t,e){return mo()},t.prototype.any=function(t,e){return mo()},t.prototype.squaredDifference=function(t,e){return mo()},t.prototype.ceil=function(t){return mo()},t.prototype.floor=function(t){return mo()},t.prototype.round=function(t){return mo()},t.prototype.sign=function(t){return mo()},t.prototype.isNaN=function(t){return mo()},t.prototype.isInf=function(t){return mo()},t.prototype.isFinite=function(t){return mo()},t.prototype.pow=function(t,e){return mo()},t.prototype.exp=function(t){return mo()},t.prototype.expm1=function(t){return mo()},t.prototype.log=function(t){return mo()},t.prototype.log1p=function(t){return mo()},t.prototype.sqrt=function(t){return mo()},t.prototype.rsqrt=function(t){return mo()},t.prototype.square=function(t){return mo()},t.prototype.reciprocal=function(t){return mo()},t.prototype.relu=function(t){return mo()},t.prototype.relu6=function(t){return mo()},t.prototype.prelu=function(t,e){return mo()},t.prototype.elu=function(t){return mo()},t.prototype.eluDer=function(t,e){return mo()},t.prototype.selu=function(t){return mo()},t.prototype.int=function(t){return mo()},t.prototype.clip=function(t,e,n){return mo()},t.prototype.abs=function(t){return mo()},t.prototype.complexAbs=function(t){return mo()},t.prototype.sigmoid=function(t){return mo()},t.prototype.softplus=function(t){return mo()},t.prototype.sin=function(t){return mo()},t.prototype.cos=function(t){return mo()},t.prototype.tan=function(t){return mo()},t.prototype.asin=function(t){return mo()},t.prototype.acos=function(t){return mo()},t.prototype.atan=function(t){return mo()},t.prototype.atan2=function(t,e){return mo()},t.prototype.sinh=function(t){return mo()},t.prototype.cosh=function(t){return mo()},t.prototype.tanh=function(t){return mo()},t.prototype.asinh=function(t){return mo()},t.prototype.acosh=function(t){return mo()},t.prototype.atanh=function(t){return mo()},t.prototype.erf=function(t){return mo()},t.prototype.step=function(t,e){return mo()},t.prototype.fusedConv2d=function(t){return t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,mo()},t.prototype.conv2d=function(t,e,n){return mo()},t.prototype.conv2dDerInput=function(t,e,n){return mo()},t.prototype.conv2dDerFilter=function(t,e,n){return mo()},t.prototype.fusedDepthwiseConv2D=function(t){return t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights,mo()},t.prototype.depthwiseConv2D=function(t,e,n){return mo()},t.prototype.depthwiseConv2DDerInput=function(t,e,n){return mo()},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){return mo()},t.prototype.conv3d=function(t,e,n){return mo()},t.prototype.conv3dDerInput=function(t,e,n){return mo()},t.prototype.conv3dDerFilter=function(t,e,n){return mo()},t.prototype.maxPool=function(t,e){return mo()},t.prototype.maxPoolBackprop=function(t,e,n,r){return mo()},t.prototype.avgPool=function(t,e){return mo()},t.prototype.avgPoolBackprop=function(t,e,n){return mo()},t.prototype.avgPool3d=function(t,e){return mo()},t.prototype.avgPool3dBackprop=function(t,e,n){return mo()},t.prototype.maxPool3d=function(t,e){return mo()},t.prototype.maxPool3dBackprop=function(t,e,n,r){return mo()},t.prototype.reshape=function(t,e){return mo()},t.prototype.cast=function(t,e){return mo()},t.prototype.tile=function(t,e){return mo()},t.prototype.pad=function(t,e,n){return mo()},t.prototype.transpose=function(t,e){return mo()},t.prototype.gather=function(t,e,n){return mo()},t.prototype.gatherND=function(t,e){return mo()},t.prototype.scatterND=function(t,e,n){return mo()},t.prototype.batchToSpaceND=function(t,e,n){return mo()},t.prototype.spaceToBatchND=function(t,e,n){return mo()},t.prototype.resizeBilinear=function(t,e,n,r){return mo()},t.prototype.resizeBilinearBackprop=function(t,e,n){return mo()},t.prototype.resizeNearestNeighbor=function(t,e,n,r){return mo()},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){return mo()},t.prototype.batchNormalization=function(t,e,n,r,o,i){return mo()},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){return mo()},t.prototype.LRNGrad=function(t,e,n,r,o,i,a){return mo()},t.prototype.multinomial=function(t,e,n,r){return mo()},t.prototype.oneHot=function(t,e,n,r){return mo()},t.prototype.cumsum=function(t,e,n,r){return mo()},t.prototype.nonMaxSuppression=function(t,e,n,r,o){return mo()},t.prototype.fft=function(t){return mo()},t.prototype.ifft=function(t){return mo()},t.prototype.complex=function(t,e){return mo()},t.prototype.real=function(t){return mo()},t.prototype.imag=function(t){return mo()},t.prototype.cropAndResize=function(t,e,n,r,o,i){return mo()},t.prototype.depthToSpace=function(t,e,n){return mo()},t.prototype.split=function(t,e,n){return mo()},t.prototype.sparseToDense=function(t,e,n,r){return mo()},t.prototype.diag=function(t){return mo()},t.prototype.fill=function(t,e,n){throw new Error("Not yet implemented.")},t.prototype.onesLike=function(t){return mo()},t.prototype.zerosLike=function(t){return mo()},t.prototype.linspace=function(t,e,n){return mo()},t.prototype.dispose=function(){return mo()},t}();function mo(){throw new Error("Not yet implemented or not found in the registry. Did you forget to import the kernel?")}function go(t,e){for(var n=t.length,r=[],o=0;o<n;o++){var i=n-1-o,a=t[i]||1;(e[e.length-1-o]||1)>1&&1===a&&r.unshift(i)}return r}function vo(t,e){for(var n=[],r=0;r<e.length;r++){var o=t[t.length-r-1],i=e.length-r-1,a=e[i];(null==o||1===o&&a>1)&&n.unshift(i)}return n}function yo(t,e){for(var n=[],r=Math.max(t.length,e.length),o=0;o<r;o++){var i=t[t.length-o-1];null==i&&(i=1);var a=e[e.length-o-1];if(null==a&&(a=1),1===i)n.unshift(a);else if(1===a)n.unshift(i);else{if(i!==a)throw Error("Operands could not be broadcast together with shapes "+t+" and "+e+".");n.unshift(i)}}return n}function _o(t,e,n,r,o,i,a){void 0===a&&(a="channelsLast");var s,u=Ao(e),p=u[0],c=u[1];if("channelsLast"===a)s=[p,c,t[3],t[3]];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);s=[p,c,t[1],t[1]]}return xo(t,s,n,r,o,i,!1,a)}function bo(t,e,n,r,o,i,a){void 0===a&&(a="NDHWC");var s,u,p=Io(e),c=p[0],l=p[1],d=p[2];if("NDHWC"===a)u="channelsLast",s=[c,l,d,t[4],t[4]];else{if("NCDHW"!==a)throw new Error("Unknown dataFormat "+a);u="channelsFirst",s=[c,l,d,t[1],t[1]]}return Eo(t,s,n,r,o,!1,u,i)}function xo(t,e,n,r,o,i,a,s){void 0===a&&(a=!1),void 0===s&&(s="channelsLast");var u=[-1,-1,-1,-1],p=u[0],c=u[1],l=u[2],d=u[3];if("channelsLast"===s)p=t[0],c=t[1],l=t[2],d=t[3];else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);p=t[0],d=t[1],c=t[2],l=t[3]}var f,h=e[0],m=e[1],g=e[3],v=Ao(n),y=v[0],_=v[1],b=Ao(r),x=b[0],E=b[1],A=Ro(h,x),I=Ro(m,E),R=function(t,e,n,r,o,i,a,s){var u,p,c;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};var l=function(t,e,n,r,o){null==r&&(r=wo(t,e,n));var i=t[1],a=To((t[0]-e+2*r)/n+1,o);w(C(a),(function(){return"The output # of rows ("+a+") must be an integer. Change the stride and/or zero pad parameters"}));var s=To((i-e+2*r)/n+1,o);return w(C(s),(function(){return"The output # of columns ("+s+") must be an integer. Change the stride and/or zero pad parameters"})),[a,s]}([e,n],i,r,t,s);p=l[0],c=l[1]}else if("same"===t){p=Math.ceil(e/r),c=Math.ceil(n/o);var d=Math.max(0,(p-1)*r+i-e),f=Math.max(0,(c-1)*o+a-n),h=Math.floor(d/2),m=d-h,g=Math.floor(f/2);u={top:h,bottom:m,left:g,right:f-g,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);u={top:0,bottom:0,left:0,right:0,type:"VALID"},p=Math.ceil((e-i+1)/r),c=Math.ceil((n-a+1)/o)}return{padInfo:u,outHeight:p,outWidth:c}}(o,c,l,y,_,A,I,i),T=R.padInfo,S=R.outHeight,N=R.outWidth,k=a?g*d:g;return"channelsFirst"===s?f=[p,k,S,N]:"channelsLast"===s&&(f=[p,S,N,k]),{batchSize:p,dataFormat:s,inHeight:c,inWidth:l,inChannels:d,outHeight:S,outWidth:N,outChannels:k,padInfo:T,strideHeight:y,strideWidth:_,filterHeight:h,filterWidth:m,effectiveFilterHeight:A,effectiveFilterWidth:I,dilationHeight:x,dilationWidth:E,inShape:t,outShape:f,filterShape:e}}function Eo(t,e,n,r,o,i,a,s){void 0===i&&(i=!1),void 0===a&&(a="channelsLast");var u=[-1,-1,-1,-1,-1],p=u[0],c=u[1],l=u[2],d=u[3],f=u[4];if("channelsLast"===a)p=t[0],c=t[1],l=t[2],d=t[3],f=t[4];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);p=t[0],f=t[1],c=t[2],l=t[3],d=t[4]}var h,m=e[0],g=e[1],v=e[2],y=e[4],_=Io(n),b=_[0],x=_[1],E=_[2],A=Io(r),I=A[0],R=A[1],T=A[2],S=Ro(m,I),N=Ro(g,R),k=Ro(v,T),O=function(t,e,n,r,o,i,a,s,u,p,c){var l,d,f,h;if("number"==typeof t){l={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};var m=function(t,e,n,r,o,i){null==o&&(o=wo(t,e,r));var a=t[1],s=t[2],u=To((t[0]-e+2*o)/r+1,i);w(C(u),(function(){return"The output # of depths ("+u+") must be an integer. Change the stride and/or zero pad parameters"}));var p=To((a-e+2*o)/r+1,i);w(C(p),(function(){return"The output # of rows ("+p+") must be an integer. Change the stride and/or zero pad parameters"}));var c=To((s-e+2*o)/r+1,i);return w(C(c),(function(){return"The output # of columns ("+c+") must be an integer. Change the stride and/or zero pad parameters"})),[u,p,c,1]}([e,n,r,1],s,0,o,t,c);d=m[0],f=m[1],h=m[2]}else if("same"===t){var g=((d=Math.ceil(e/o))-1)*o+s-e,v=((f=Math.ceil(n/i))-1)*i+u-n,y=((h=Math.ceil(r/a))-1)*a+p-r,_=Math.floor(g/2),b=g-_,x=Math.floor(v/2),E=v-x,A=Math.floor(y/2);l={top:x,bottom:E,left:A,right:y-A,front:_,back:b,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);l={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},d=Math.ceil((e-s+1)/o),f=Math.ceil((n-u+1)/i),h=Math.ceil((r-p+1)/a)}return{padInfo:l,outDepth:d,outHeight:f,outWidth:h}}(o,c,l,d,b,x,E,S,N,k,s),D=O.padInfo,M=O.outDepth,L=O.outHeight,P=O.outWidth,B=i?y*f:y;return"channelsFirst"===a?h=[p,B,M,L,P]:"channelsLast"===a&&(h=[p,M,L,P,B]),{batchSize:p,dataFormat:a,inDepth:c,inHeight:l,inWidth:d,inChannels:f,outDepth:M,outHeight:L,outWidth:P,outChannels:B,padInfo:D,strideDepth:b,strideHeight:x,strideWidth:E,filterDepth:m,filterHeight:g,filterWidth:v,effectiveFilterDepth:S,effectiveFilterHeight:N,effectiveFilterWidth:k,dilationDepth:I,dilationHeight:R,dilationWidth:T,inShape:t,outShape:h,filterShape:e}}function wo(t,e,n,r){void 0===r&&(r=1);var o=Ro(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function Ao(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function Io(t){return"number"==typeof t?[t,t,t]:t}function Ro(t,e){return e<=1?t:t+(t-1)*(e-1)}function To(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function So(t){var e=Ao(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function Co(t,e){return So(t)||So(e)}function No(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}function ko(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();var r=Wn(t.shape),o=t.toFloat(),i=n.complex(o,r);return r.dispose(),o.dispose(),i}if(!G(t.dtype,e))return Pt.makeTensorFromDataId(t.dataId,t.shape,e);if("complex64"===t.dtype){var a=n.real(t);return i=a.cast(e),a.dispose(),i}if("int32"===e)return n.int(t);if("bool"===e){var s=Dn(0,t.dtype);return i=n.notEqual(t,s),s.dispose(),i}throw new Error("Error in Cast: failed to cast "+t.dtype+" to "+e)}function Oo(t,e){return Pt.makeTensorFromDataId(t.dataId,e,t.dtype)}function Do(t,e,n){var r=(e-t)/(n-1),o=et(n,"float32");o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+r;return Mn(o,"float32")}var Mo=Object.freeze({castTensor:ko,reshapeTensor:Oo,linspaceImpl:Do,upcastType:Tt,axesAreInnerMostDims:vn,combineLocations:yn,computeOutAndReduceShapes:_n,expandShapeToKeepDim:bn,assertAxesAreInnerMostDims:xn,getAxesPermutation:En,getUndoAxesPermutation:wn,getInnerMostAxes:An,getBroadcastDims:go,getReductionAxes:vo,assertAndGetBroadcastShape:yo,assertParamsConsistent:In,computeOutShape:Rn,computePool2DInfo:_o,computePool3DInfo:bo,computeConv2DInfo:xo,computeConv3DInfo:Eo,computeDefaultPad:wo,tupleValuesAreOne:So,eitherStridesOrDilationsAreOne:Co,convertConv2DDataFormat:No});function Lo(t,e){if(t.length!==e.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+t.length+", imag: "+e.length+".");for(var n=new Float32Array(2*t.length),r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Po(t,e){return{real:t[2*e],imag:t[2*e+1]}}function Bo(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function Fo(t,e,n){var r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Uo(t,e,n,r,o){for(var i=Array.from(e).map((function(t,e){return{score:t,boxIndex:e}})).filter((function(t){return t.score>o})).sort((function(t,e){return e.score-t.score})),a=[],s=0;s<i.length;s++){var u=i[s],p=u.score,c=u.boxIndex;if(p<o)break;for(var l=!1,d=a.length-1;d>=0;--d)if(qo(t,c,a[d])>=r){l=!0;break}if(!l&&(a.push(c),a.length>=n))break}return Mn(a,"int32")}function qo(t,e,n){var r=t.subarray(4*e,4*e+4),o=t.subarray(4*n,4*n+4),i=Math.min(r[0],r[2]),a=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),p=Math.min(o[0],o[2]),c=Math.min(o[1],o[3]),l=Math.max(o[0],o[2]),d=Math.max(o[1],o[3]),f=(s-i)*(u-a),h=(l-p)*(d-c);if(f<=0||h<=0)return 0;var m=Math.max(i,p),g=Math.max(a,c),v=Math.min(s,l),y=Math.min(u,d),_=Math.max(v-m,0)*Math.max(y-g,0);return _/(f+h-_)}function Go(t,e,n){var r=new Array(t.rank).fill(0),o=t.shape.slice();return e.map((function(e){o[n]=e;var i=t.slice(r,o);return r[n]+=e,i}))}function Wo(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var o=dr(n,t.dtype);for(r=0;r<o.values.length;++r){for(var i=o.indexToLoc(r),a=new Array(t.rank),s=0;s<a.length;s++)a[s]=i[s]%t.shape[s];var u=t.locToIndex(a);o.values[r]=t.values[u]}return o.toTensor()}function zo(t,e,n,r,o){for(var i=e[e.length-1],a=[t.length/i,i],s=a[0],u=a[1],p=B(n,s*r),c=B("int32",s*r),l=0;l<s;l++){for(var d=l*u,f=t.subarray(d,d+u),h=[],m=0;m<f.length;m++)h.push({value:f[m],index:m});h.sort((function(t,e){return e.value-t.value}));var g=l*r,v=p.subarray(g,g+r),y=c.subarray(g,g+r);for(m=0;m<r;m++)v[m]=h[m].value,y[m]=h[m].index}var _=e.slice();return _[_.length-1]=r,[kn(p,_,n),kn(c,_,"int32")]}function Vo(t,e){for(var n=[],r=0;r<e.length;r++)e[r]&&n.push(r);var o=dr(t,"int32"),i=dr([n.length,t.length],"int32");for(r=0;r<n.length;r++){var a=o.indexToLoc(n[r]),s=r*t.length;i.values.set(a,s)}return i.toTensor()}var Ho=function(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((function(t,e){return"T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("float v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        float result = "+r+";\n        setOutput(result);\n      }\n    "},Xo=function(t,e){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.variableNames=e.map((function(t,e){return"T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("vec4 v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        vec4 result = "+r+";\n        setOutput(result);\n      }\n    "},Yo=function(t,e,n){this.variableNames=["A"];var r=t.windowSize,o=t.batchSize,i=t.inSize,a=Math.ceil(i/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a];var s="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+u+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+s+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    "};function $o(t,e){return["x","y","z","w","u","v"].slice(0,e).map((function(e){return t+"."+e}))}function jo(t,e){return 1===e?[t]:$o(t,e)}function Ko(){var t,e,n,r,o,i,a,s,u,p;return 2===l().getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",o="texture",i="outputColor",a="out vec4 outputColor;",s="\n      bool isnan_custom(float val) {\n        return (val > 0.0 || val < 0.0) ? false : val != 0.0;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",u="",p="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",o="texture2D",i="gl_FragColor",a="",s="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",p="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:o,output:i,defineOutput:a,defineSpecialNaN:s,defineSpecialInf:u,defineRound:p}}function Zo(t,e,n){void 0===n&&(n="index");var r=Z(e);return r.map((function(e,o){return"int "+t[o]+" = "+n+" / "+e+"; "+(o===r.length-1?"int "+t[o+1]+" = "+n+" - "+t[o]+" * "+e:"index -= "+t[o]+" * "+e)+";"})).join("")}function Qo(t){var e=Z(t).map((function(t){return t.toString()}));return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * "+e[0]+" + coords.y * "+e[1]+" + coords.z;\n  }\n"}var Jo="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function ti(t,e,n,r){var o=[];t.forEach((function(t){var e=T(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push("uniform float "+t.name+(e>1?"["+e+"]":"")+";"):(o.push("uniform sampler2D "+t.name+";"),o.push("uniform int offset"+t.name+";"))}));var i,a,s=o.join("\n"),u=t.map((function(t){return function(t,e,n){void 0===n&&(n=!1);var r="";r+=n?function t(e){var n,r,o;switch(e.shapeInfo.logicalShape.length){case 0:return n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=Ko(),"\n    vec4 "+r+"() {\n      return "+o.texture2D+"("+n+", halfCR);\n    }\n  ";case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],i=Ko();return"\n    vec4 "+n+"(int index) {\n      vec2 uv = packedUVfrom1D(\n        "+o[0]+", "+o[1]+", index);\n      return "+i.texture2D+"("+e+", uv);\n    }\n  "}(e);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,i=o[0],a=o[1],s=Ko();if(null!=o&&S(e,o))return"\n      vec4 "+r+"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2("+a+".0, "+i+".0);\n\n        return "+s.texture2D+"("+n+", uv);\n      }\n    ";var u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return"\n    vec4 "+r+"(int row, int col) {\n      vec2 uv = packedUVfrom2D("+Math.ceil(e[1]/2)+", "+u[0]+", "+u[1]+", row, col);\n      return "+s.texture2D+"("+n+", uv);\n    }\n  "}(e);case 3:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===n[0]){var s=ui(e,n.slice(1));return"\n        "+t(s)+"\n        vec4 "+o+"(int b, int row, int col) {\n          return "+o+"("+pi(["b","row","col"],[1,2])+");\n        }\n      "}var u=a[0],p=a[1],c=Math.ceil(n[2]/2);return"\n    vec4 "+o+"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        "+u+", "+p+", "+c*Math.ceil(n[1]/2)+", "+c+", b, row, col);\n      return "+Ko().texture2D+"("+r+", uv);\n    }\n  "}(e);default:return function(t){for(var e=t.shapeInfo.logicalShape,n=e.length,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],s=a[0],u=a[1],p=Math.ceil(e[n-1]/2),c=p*Math.ceil(e[n-2]/2),l="int b, int row, int col",d="b * "+c+" + (row / 2) * "+p+" + (col / 2)",f=2;f<n-1;f++)l="int b"+f+", "+l,d="b"+f+" * "+(c*=e[n-f-1])+" + "+d;return"\n    vec4 "+o+"("+l+") {\n      int index = "+d+";\n      int texR = index / "+u+";\n      int texC = index - texR * "+u+";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+u+", "+s+");\n      return "+Ko().texture2D+"("+r+", uv);\n    }\n  "}(e)}}(t):function t(e){var n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"float "+n+"() {return "+e+";}";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===o&&1===i)return"\n      float "+n+"() {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var a=t.shapeInfo.texShape;return"\n    float "+n+"() {\n      vec2 uv = uvFromFlat("+a[0]+", "+a[1]+", "+ii(e)+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(e);case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"\n      float "+n+"(int index) {\n        "+ai(t)+"\n      }\n    ";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===i&&1===o)return"\n      float "+n+"(int index) {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var a=ii(e);return 1===i?"\n      float "+n+"(int index) {\n        vec2 uv = vec2(0.5, (float(index + "+a+") + 0.5) / "+o+".0);\n        return sampleTexture("+e+", uv);\n      }\n    ":1===o?"\n      float "+n+"(int index) {\n        vec2 uv = vec2((float(index + "+a+") + 0.5) / "+i+".0, 0.5);\n        return sampleTexture("+e+", uv);\n      }\n    ":"\n    float "+n+"(int index) {\n      vec2 uv = uvFromFlat("+o+", "+i+", index + "+a+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(e);case 2:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape;if(null!=i&&S(n,i)){var a=i[0];return"\n    float "+o+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+i[1]+".0, "+a+".0);\n      return sampleTexture("+r+", uv);\n    }\n  "}var s=P(n),u=s.newShape,p=s.keptDims,c=u;if(c.length<n.length){var l=ui(e,c);return"\n      "+t(l)+"\n      float "+o+"(int row, int col) {\n        return "+o+"("+pi(["row","col"],p)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2("+n[1]+", 1)));\n        "+ai(e)+"\n      }\n    ";var d=i[0],f=i[1],h=ii(r);return 1===f?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+h+"), vec3("+n[1]+", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / "+d+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":1===d?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+h+"), vec3("+n[1]+", 1, 1));\n      vec2 uv = vec2((index + 0.5) / "+f+".0, 0.5);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n  float "+o+"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * "+n[1]+" + col + "+h+";\n    vec2 uv = uvFromFlat("+d+", "+f+", index);\n    return sampleTexture("+r+", uv);\n  }\n"}(e);case 3:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[1]*n[2],a=n[2],s=P(n),u=s.newShape,p=s.keptDims,c=u;if(c.length<n.length){var l=ui(e,c);return"\n        "+t(l)+"\n        float "+o+"(int row, int col, int depth) {\n          return "+o+"("+pi(["row","col","depth"],p)+");\n        }\n      "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3("+i+", "+a+", 1)));\n        "+ai(e)+"\n      }\n    ";var d=e.shapeInfo.texShape,f=d[0],h=d[1],m=e.shapeInfo.flatOffset;return h===i&&null==m?"\n        float "+o+"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2("+a+", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+h+".0, "+f+".0);\n          return sampleTexture("+r+", uv);\n        }\n      ":h===a&&null==m?"\n    float "+o+"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2("+n[1]+", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+h+".0, "+f+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n      float "+o+"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * "+i+" + col * "+a+" + depth + "+ii(r)+";\n        vec2 uv = uvFromFlat("+f+", "+h+", index);\n        return sampleTexture("+r+", uv);\n      }\n  "}(e);case 4:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[3],a=n[2]*i,s=n[1]*a,u=P(n),p=u.newShape,c=u.keptDims;if(p.length<n.length){var l=ui(e,p);return"\n      "+t(l)+"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        return "+o+"("+pi(["row","col","depth","depth2"],c)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4("+s+", "+a+", "+i+", 1)));\n        "+ai(e)+"\n      }\n    ";var d=e.shapeInfo.flatOffset,f=e.shapeInfo.texShape,h=f[0],m=f[1];return m===s&&null==d?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3("+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+m+".0, "+h+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":m===i&&null==d?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3("+n[1]*n[2]+", "+n[2]+", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+m+".0, "+h+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+s+" + col * "+a+" +\n          depth * "+i+" + depth2;\n      vec2 uv = uvFromFlat("+h+", "+m+", index + "+ii(r)+");\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);case 5:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[4],a=n[3]*i,s=n[2]*a,u=n[1]*s,p=P(n),c=p.newShape,l=p.keptDims;if(c.length<n.length){var d=ui(e,c);return"\n      "+t(d)+"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        return "+o+"("+pi(["row","col","depth","depth2","depth3"],l)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+u+", "+s+", "+a+", "+i+")) +\n          depth3;\n        "+ai(e)+"\n      }\n    ";var f=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,m=h[0],g=h[1];return g===u&&null==f?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4("+s+", "+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":g===i&&null==f?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+n[1]*n[2]*n[3]+",\n               "+n[2]*n[3]+", "+n[3]+", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+u+" + col * "+s+" + depth * "+a+" +\n          depth2 * "+i+" + depth3 + "+ii(r)+";\n      vec2 uv = uvFromFlat("+m+", "+g+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);case 6:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=P(n),a=i.newShape,s=i.keptDims;if(a.length<n.length){var u=ui(e,a);return"\n      "+t(u)+"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return "+o+"("+pi(["row","col","depth","depth2","depth3","depth4"],s)+");\n      }\n    "}var p=n[5],c=n[4]*p,l=n[3]*c,d=n[2]*l,f=n[1]*d;if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4("+f+", "+d+", "+l+", "+c+")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2("+p+", 1)));\n        "+ai(e)+"\n      }\n    ";var h=e.shapeInfo.flatOffset,m=e.shapeInfo.texShape,g=m[0],v=m[1];return v===f&&null==h?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4("+d+", "+l+", "+c+", "+p+")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+v+".0, "+g+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":v===p&&null==h?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4("+n[1]*n[2]*n[3]*n[4]+",\n               "+n[2]*n[3]*n[4]+",\n               "+n[3]*n[4]+",\n               "+n[4]+")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+v+".0, "+g+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+f+" + col * "+d+" + depth * "+l+" +\n          depth2 * "+c+" + depth3 * "+p+" + depth4 + "+ii(r)+";\n      vec2 uv = uvFromFlat("+g+", "+v+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);default:throw new Error(n.length+"-D input sampling is not yet supported")}}(t);var o=t.shapeInfo.logicalShape,i=e.logicalShape;return o.length<=i.length&&(r+=n?function(t,e){var n,r=t.name,o=r.charAt(0).toUpperCase()+r.slice(1),i="get"+o+"AtOutCoords",a=t.shapeInfo.logicalShape.length,s=e.logicalShape.length,u=go(t.shapeInfo.logicalShape,e.logicalShape),p=si(s),c=s-a,l=["x","y","z","w","u","v"];n=0===a?"":s<2&&u.length>=1?"coords = 0;":u.map((function(t){return"coords."+l[t+c]+" = 0;"})).join("\n");var d;d=s<2&&a>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return"coords."+l[e+c]})).join(", ");var f="return outputValue;",h=1===T(t.shapeInfo.logicalShape),m=1===T(e.logicalShape);if(1!==a||h||m){if(h&&!m)f=1===s?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){var g=a-2,v=a-1;u.indexOf(g)>-1&&u.indexOf(v)>-1?f="return vec4(outputValue.x);":u.indexOf(g)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(v)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 "+i+"() {\n      "+p+" coords = getOutputCoords();\n      "+n+"\n      vec4 outputValue = get"+o+"("+d+");\n      "+f+"\n    }\n  "}(t,e):function(t,e){var n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",i=e.texShape,a=t.shapeInfo.texShape,s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&s===u&&null==t.shapeInfo.flatOffset&&S(a,i))return"\n      float "+o+"() {\n        return sampleTexture("+n+", resultUV);\n      }\n    ";var p=si(u),c=go(t.shapeInfo.logicalShape,e.logicalShape),l=u-s,d=["x","y","z","w","u","v"];return"\n    float "+o+"() {\n      "+p+" coords = getOutputCoords();\n      "+(0===s?"":u<2&&c.length>=1?"coords = 0;":c.map((function(t){return"coords."+d[t+l]+" = 0;"})).join("\n"))+"\n      return get"+r+"("+(u<2&&s>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return"coords."+d[e+l]})).join(", "))+");\n    }\n  "}(t,e)),r}(t,e,r)})).join("\n"),p=e.texShape,c=Ko(),l=function(t){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return "+t.texture2D+"(textureSampler, uv).r;\n    }\n  "}(c),d=function(t){return t.version+"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    "+t.varyingFs+" vec2 resultUV;\n    "+t.defineOutput+"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    "+t.defineSpecialNaN+"\n    "+t.defineSpecialInf+"\n    "+t.defineRound+"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    "+ei+"\n    "+ni+"\n    "+ri+"\n  "}(c);return e.isPacked?(i=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return 1===n[0]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * "+n[1]+".0);\n      }\n    ":1===n[1]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * "+n[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      return 2 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n    }\n  "}(0,e);case 2:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(S(t,e))return"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2("+n[0]+", "+n[1]+"));\n      }\n    ";var r=Math.ceil(t[1]/2);return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=t,r=e,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=(i=Math.ceil(n[2]/2))*Math.ceil(n[1]/2),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+o[0]+", "+o[1]+"));\n      int index = resTexRC.x * "+o[1]+" + resTexRC.y;\n\n      int b = index / "+a+";\n      index -= b * "+a+";\n\n      int r = 2 * (index / "+i+");\n      int c = imod(index, "+i+") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";default:return function(t,e){for(var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2),i=o,a="",s="b, r, c",u=2;u<t.length-1;u++)a="\n      int b"+u+" = index / "+(i*=t[t.length-u-1])+";\n      index -= b"+u+" * "+i+";\n    "+a,s="b"+u+", "+s;return"\n    ivec"+t.length+" getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+a+"\n\n      int b = index / "+o+";\n      index -= b * "+o+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec"+t.length+"("+s+");\n    }\n  "}(t,e)}var n,r,o,i,a}(e.logicalShape,p),a=function(t){return"\n    void setOutput(vec4 val) {\n      "+t.output+" = val;\n    }\n  "}(c)):(i=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){return 1===e[0]?"\n      int getOutputCoords() {\n        return int(resultUV.x * "+e[1]+".0);\n      }\n    ":1===e[1]?"\n      int getOutputCoords() {\n        return int(resultUV.y * "+e[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      return resTexRC.x * "+e[1]+" + resTexRC.y;\n    }\n  "}(0,e);case 2:return function(t,e){return S(t,e)?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+e[0]+", "+e[1]+"));\n      }\n    ":1===t[1]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":1===t[0]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      int r = index / "+t[1]+";\n      int c = index - r * "+t[1]+";\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=e,r=Zo(["r","c","d"],t),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      "+r+"\n      return ivec3(r, c, d);\n    }\n  ";case 4:return function(t,e){var n=Zo(["r","c","d","d2"],t);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      "+n+"\n      return ivec4(r, c, d, d2);\n    }\n  "}(t,e);case 5:return function(t,e){var n=Zo(["r","c","d","d2","d3"],t);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2("+e[0]+",\n                             "+e[1]+"));\n\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "}(t,e);case 6:return function(t,e){var n=Zo(["r","c","d","d2","d3","d4"],t);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}var n,r}(e.logicalShape,p),a=function(t){return"\n    void setOutput(float val) {\n      "+t.output+" = vec4(val, 0, 0, 0);\n    }\n  "}(c)),r&&(d+=oi),[d,l,a,s,i,u,n].join("\n")}var ei="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ni="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ri="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",oi="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function ii(t){return"offset"+t}function ai(t){var e=t.name,n=T(t.shapeInfo.logicalShape);return n<2?"return "+e+";":"\n    for (int i = 0; i < "+n+"; i++) {\n      if (i == index) {\n        return "+e+"[i];\n      }\n    }\n  "}function si(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error("GPU for rank "+t+" is not yet supported")}function ui(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function pi(t,e){return e.map((function(e){return t[e]})).join(", ")}var ci=function(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,w(t.length>2,(function(){return"Packed arg"+(n.charAt(0).toUpperCase()+n.slice(1))+" supports only inputs with rank above 2."}));var o=t[t.length-1],i=Math.ceil(o/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");var a,s,u=this.outputShape,p=u.length,c=si(p),l=jo("coords",p);if(1===i){var d=si(s=p+1);a="\n        "+d+" sourceLocR = "+d+"("+l.join()+", 0);\n        ++"+l[p-1]+";\n        "+d+" sourceLocG = "+d+"("+l.join()+", 0);\n        ++"+l[p-2]+";\n        "+d+" sourceLocA = "+d+"("+l.join()+", 0);\n        --"+l[p-1]+";\n        "+d+" sourceLocB = "+d+"("+l.join()+", 0);\n        --"+l[p-2]+";"}else s=p,a="\n        "+c+" sourceLocR = coords;\n        ++"+l[p-1]+";\n        "+c+" sourceLocG = coords;\n        ++"+l[p-2]+";\n        "+c+" sourceLocA = coords;\n        --"+l[p-1]+";\n        "+c+" sourceLocB = coords;\n        --"+l[p-2]+";";var f=["x","y","z","w","u","v"].slice(0,s),h="."+f[s-1],m=f.map((function(t){return"int "+t})),g=jo("sourceLocR",s-1).concat("inIdx.r"),v=jo("sourceLocG",s-1).concat("inIdx.g"),y=jo("sourceLocB",s-1).concat("inIdx.b"),_=jo("sourceLocA",s-1).concat("inIdx.a"),b="max"===n?"greaterThan":"lessThan",x=r?"":"\n          inIdx = round(vec4(getBestIndicesAChannel("+g.join()+"),\n                             getBestIndicesAChannel("+v.join()+"),\n                             getBestIndicesAChannel("+y.join()+"),\n                             getBestIndicesAChannel("+_.join()+")));",E="vec4(\n            getAChannel("+g.join()+"),\n            hasNextCol ? getAChannel("+v.join()+") : 0.,\n            hasNextRow ? getAChannel("+y.join()+") : 0.,\n            hasNextRow && hasNextCol ? getAChannel("+_.join()+") : 0.)",A=r?"":"\n      float getBestIndicesAChannel("+m.join()+") {\n        return getChannel(getBestIndicesA("+f.join()+"),\n                                          vec2("+f.slice(-2).join()+"));\n      }";this.userCode="\n      float getAChannel("+m.join()+") {\n        return getChannel(getA("+f.join()+"),\n                               vec2("+f.slice(-2).join()+"));\n      }\n      "+A+"\n      void main() {\n        "+c+" coords = getOutputCoords();\n        bool hasNextCol = "+l[p-1]+" < "+(u[p-1]-1)+";\n        bool hasNextRow = "+l[p-2]+" < "+(u[p-2]-1)+";\n        "+a+"\n        ivec4 srcIdx = ivec4(sourceLocR"+h+", sourceLocG"+h+",\n          sourceLocB"+h+", sourceLocA"+h+") * "+e+";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = "+E+";\n\n        for (int i = 0; i < "+e+"; i++) {\n          inIdx = srcIdx;\n          "+x+"\n          vec4 candidate = "+E+";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4("+b+"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    "},li=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,p=s-1-t.padInfo.top,c=u-1-t.padInfo.left,l=1/(e*n);this.userCode="\n      const ivec2 pads = ivec2("+p+", "+c+");\n      const float avgMultiplier = float("+l+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+s+";\n            wR += "+i+") {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+u+";\n            wC+= "+a+") {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},di=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,p=t.dilationWidth,c=t.effectiveFilterDepth,l=t.effectiveFilterHeight,d=t.effectiveFilterWidth,f=c-1-t.padInfo.front,h=l-1-t.padInfo.top,m=d-1-t.padInfo.left,g=1/(e*n*r);this.userCode="\n      const ivec3 pads = ivec3("+f+", "+h+", "+m+");\n      const float avgMultiplier = float("+g+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+c+";\n            wD += "+s+") {\n          float dyD = float(dyDCorner + wD) / "+o+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+l+";\n              wR += "+u+") {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+d+";\n                wC += "+p+") {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},fi=function(t,e,n,r,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],yo(t,e),yo(t,n);var a="0.0";null!=r&&(yo(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var s="1.0";null!=o&&(yo(t,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+a+";\n        float scale = "+s+";\n        float inv = scale * inversesqrt(variance + float("+i+"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    "},hi=function(t,e,n,r,o,i){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],yo(t,e),yo(t,n);var a="vec4(0.0)";null!=r&&(yo(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var s="vec4(1.0)";null!=o&&(yo(t,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = "+a+";\n        vec4 scale = "+s+";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4("+i+"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    "},mi=function(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=yo(e,n),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        "+t+"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    "},gi="return a + b;",vi="return a - b;",yi="return a * b;",_i="return (a < 0.) ? b * a : a;",bi=function(t,e,n){this.variableNames=["A","B"],this.outputShape=yo(e,n),this.userCode="\n      float binaryOperation(float a, float b) {\n        "+t+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "},xi="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",Ei=function(t,e,n,r){void 0===r&&(r=!1),this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=yo(e,n);var o=this.outputShape.length,i="";if(r)if(0===o||1===T(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i="\n          "+si(o)+" coords = getOutputCoords();\n        ",1===o)i+="\n            result.y = (coords + 1) >= "+this.outputShape[0]+" ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";else{var a=jo("coords",o);i+="\n            bool nextRowOutOfBounds =\n              ("+a[o-2]+" + 1) >= "+this.outputShape[o-2]+";\n            bool nextColOutOfBounds =\n              ("+a[o-1]+" + 1) >= "+this.outputShape[o-1]+";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          "}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        "+t+"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        "+i+"\n\n        setOutput(result);\n      }\n    "},wi=function(){function t(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Ai=function(){function t(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),Ii=function(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "},Ri=function(t){this.outputShape=[],this.outputShape=Rn(t,1),this.variableNames=t.map((function(t,e){return"T"+e}));var e=new Array(t.length-1);e[0]=t[0][1];for(var n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];var r=["if (yC < "+e[0]+") setOutput(getT0(yR, yC));"];for(n=1;n<e.length;n++){var o=e[n-1];r.push("else if (yC < "+e[n]+") setOutput(getT"+n+"(yR, yC-"+o+"));")}var i=e.length,a=e[e.length-1];r.push("else setOutput(getT"+i+"(yR, yC-"+a+"));"),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        "+r.join("\n        ")+"\n      }\n    "},Ti=function(t,e){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=Rn(t,e);var n=this.outputShape,r=n.length,o=si(r),i=jo("coords",r),a=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((function(t,e){return"T"+e}));var s=new Array(t.length-1);s[0]=t[0][e];for(var u=1;u<s.length;u++)s[u]=s[u-1]+t[u][e];var p=a[e],c=a.slice(-2),l=a.join(),d="if ("+p+" < "+s[0]+") {\n        return getChannel(\n            getT0("+l+"), vec2("+c.join()+"));\n        }";for(u=1;u<s.length;u++){var f=s[u-1];d+="\n        if ("+p+" < "+s[u]+"  && "+p+" >= "+s[u-1]+") {\n          return getChannel(\n            getT"+u+"("+Si(a,p,f)+"),\n            vec2("+Si(c,p,f)+"));\n        }"}var h=s.length,m=s[s.length-1];d+="\n        return getChannel(\n          getT"+h+"("+Si(a,p,m)+"),\n          vec2("+Si(c,p,m)+"));",this.userCode="\n      float getValue("+a.map((function(t){return"int "+t}))+") {\n        "+d+"\n      }\n\n      void main() {\n        "+o+" coords = getOutputCoords();\n        vec4 result = vec4(getValue("+i+"), 0., 0., 0.);\n\n        "+i[r-1]+" = "+i[r-1]+" + 1;\n        if ("+i[r-1]+" < "+n[r-1]+") {\n          result.g = getValue("+i+");\n        }\n\n        "+i[r-2]+" = "+i[r-2]+" + 1;\n        if ("+i[r-2]+" < "+n[r-2]+") {\n          result.a = getValue("+i+");\n        }\n\n        "+i[r-1]+" = "+i[r-1]+" - 1;\n        if ("+i[r-2]+" < "+n[r-2]+" &&\n            "+i[r-1]+" < "+n[r-1]+") {\n          result.b = getValue("+i+");\n        }\n        setOutput(result);\n      }\n    "};function Si(t,e,n){var r=t.indexOf(e);return t.map((function(t,e){return e===r?t+" - "+n:t})).join()}var Ci=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i="channelsLast"===t.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              if ("+i+") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ni=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i="channelsLast"===t.dataFormat,a=e-1-t.padInfo.top,s=n-1-t.padInfo.left,u=i?1:2,p=i?2:3,c=i?3:1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords["+c+"];\n\n        ivec2 dyCorner = ivec2(coords["+u+"], coords["+p+"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n\n              if ("+i+") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ki=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yF = 0; yF < "+t.outDepth+"; yF++) {\n            int xF = wF + yF * "+e+" - "+o+";\n\n            if (xF < 0 || xF >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n              int xR = wR + yR * "+n+" - "+i+";\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n                int xC = wC + yC * "+r+" - "+a+";\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Oi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=e-1-t.padInfo.front,u=n-1-t.padInfo.top,p=r-1-t.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3("+s+", "+u+", "+p+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+e+"; wF++) {\n          float dyF = float(dyFCorner + wF) / "+o+".0;\n\n          if (dyF < 0.0 || dyF >= "+t.outDepth+".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = "+e+" - 1 - wF;\n\n          for (int wR = 0; wR < "+n+"; wR++) {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = "+n+" - 1 - wR;\n\n            for (int wC = 0; wC < "+r+"; wC++) {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = "+r+" - 1 - wC;\n\n              for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Di=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * "+i+" + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Mi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=e-1-t.padInfo.top,a=n-1-t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < "+s+"; dm++) {\n              int d2 = d1 * "+s+" + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Li=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.padInfo.top,i=t.padInfo.left,a=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,p=t.dilationWidth,c=t.filterHeight,l=t.filterWidth,d=4*Math.floor(t.inChannels/4),f=t.inChannels%4,h="channelsLast"===t.dataFormat,m=h?1:2,g=h?2:3,v=h?3:1,y="",_="";n&&(y=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",_="result = activation(result);");var b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+y+"\n\n      const ivec2 strides = ivec2("+a+", "+s+");\n      const ivec2 pads = ivec2("+o+", "+i+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords["+v+"];\n\n        ivec2 xRCCorner =\n            ivec2(coords["+m+"], coords["+g+"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+c+"; wR++) {\n          int xR = xRCorner + wR * "+u+";\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+l+"; wC++) {\n            int xC = xCCorner + wC * "+p+";\n\n            if (xC < 0 || xC >= "+t.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+d+"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if ("+h+") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if ("+(1===f)+") {\n\n              if ("+h+") {\n                dotProd +=\n                    getX(batch, xR, xC, "+d+") *\n                    getW(wR, wC, "+d+", d2);\n              } else {\n                dotProd +=\n                    getX(batch, "+d+", xR, xC) *\n                    getW(wR, wC, "+d+", d2);\n              }\n\n            } else if ("+(2===f)+") {\n              vec2 wValues = vec2(\n                getW(wR, wC, "+d+", d2),\n                getW(wR, wC, "+d+" + 1, d2)\n              );\n\n              if ("+h+") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, "+d+"),\n                  getX(batch, xR, xC, "+d+" + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, "+d+", xR, xC),\n                  getX(batch, "+d+" + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if ("+(3===f)+") {\n              vec3 wValues = vec3(\n                getW(wR, wC, "+d+", d2),\n                getW(wR, wC, "+d+" + 1, d2),\n                getW(wR, wC, "+d+" + 2, d2)\n              );\n\n              if ("+h+") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, "+d+"),\n                  getX(batch, xR, xC, "+d+" + 1),\n                  getX(batch, xR, xC, "+d+" + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, "+d+", xR, xC),\n                  getX(batch, "+d+" + 1, xR, xC),\n                  getX(batch, "+d+" + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        "+b+"\n        "+_+"\n        setOutput(result);\n      }\n    "},Pi=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,p=t.dilationWidth,c=t.filterDepth,l=t.filterHeight,d=t.filterWidth,f=4*Math.floor(t.inChannels/4),h=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+e+", "+n+", "+r+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+c+"; wF++) {\n          int xF = xFCorner + wF * "+s+";\n\n          if (xF < 0 || xF >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+l+"; wR++) {\n            int xR = xRCorner + wR * "+u+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+d+"; wC++) {\n              int xC = xCCorner + wC * "+p+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < "+f+"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if ("+(1===h)+") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, "+f+") *\n                  getW(wF, wR, wC, "+f+", d2);\n              } else if ("+(2===h)+") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, "+f+"),\n                  getX(batch, xF, xR, xC, "+f+" + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, "+f+", d2),\n                  getW(wF, wR, wC, "+f+" + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if ("+(3===h)+") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, "+f+"),\n                  getX(batch, xF, xR, xC, "+f+" + 1),\n                  getX(batch, xF, xR, xC, "+f+" + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, "+f+", d2),\n                  getW(wF, wR, wC, "+f+" + 1, d2),\n                  getW(wF, wR, wC, "+f+" + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Bi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.inHeight,i=t.inWidth,a=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,p=t.strideWidth,c=t.dilationHeight,l=t.dilationWidth,d=t.filterHeight,f=t.filterWidth,h=t.outChannels/t.inChannels,m="",g="";n&&(m=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",g="result = activation(result);");var v=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+m+"\n\n      const ivec2 strides = ivec2("+u+", "+p+");\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+h+";\n        int q = d2 - d1 * "+h+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+d+"; wR++) {\n          int xR = xRCorner + wR * "+c+";\n\n          if (xR < 0 || xR >= "+o+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+f+"; wC++) {\n            int xC = xCCorner + wC * "+l+";\n\n            if (xC < 0 || xC >= "+i+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        "+v+"\n        "+g+"\n        setOutput(result);\n      }\n    "},Fi=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.outShape;for(var o=t.inHeight,i=t.inWidth,a=t.padInfo.top,s=t.padInfo.left,u=t.strideHeight,p=t.strideWidth,c=t.dilationHeight,l=t.dilationWidth,d=t.filterHeight,f=t.filterWidth,h=f,m="int xR; int xC; int xCOffset;",g=0;g<d;g++)for(var v=0;v<f;v++)m+="\n          vec4 xTexelR"+g+"C"+2*v+" = vec4(0.);\n          vec4 wR"+g+"C"+v+" = vec4(0.);\n          vec4 xR"+g+"C"+v+" = vec4(0.);";for(g=0;g<d;g++)for(var y=0;y<h;y++){if(m+="\n          xR = xRCorner + "+g*c+";\n          xC = xCCorner + "+(v=2*y)*l+";\n        ",1===p){if(v<f&&(m+=s%2==1?"\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+g+"C"+v+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+g+"C"+v+" = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < "+o+" && xCOffset >= 0 && xCOffset < "+i+") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR"+g+"C"+v+" = vec4(previous.zw, xTexelR"+g+"C"+v+".xy);\n                } else {\n                  xR"+g+"C"+v+" = vec4(0, 0, xTexelR"+g+"C"+v+".xy);\n                }\n              ":"\n                if(xR >= 0 && xR < "+o+" && xC >= 0 && xC < "+i+") {\n                  xTexelR"+g+"C"+v+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+g+"C"+v+" = vec4(0.);\n                }\n\n                xR"+g+"C"+v+" = xTexelR"+g+"C"+v+";\n              ",v+1<f)){var _=s%2==0?x(l):l;l%2==0&&s%2==1||l%2!=0&&s%2!=1?(m+="\n                  xCOffset = xC + "+s%2+" + "+_+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+g+"C"+(v+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n                ",l>1&&(m+="\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < "+o+" &&\n                      xCOffset >= 0 && xCOffset < "+i+") {\n                      xTexelR"+g+"C"+v+" = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR"+g+"C"+v+" = vec4(0.);\n                    }\n                  "),m+="\n                  xR"+g+"C"+(v+1)+" = vec4(\n                    xTexelR"+g+"C"+v+".zw, xTexelR"+g+"C"+(v+2)+".xy);\n                "):m+="\n                  xCOffset = xC + "+_+";\n\n                  if(xR >= 0 && xR < "+o+" &&\n                    xCOffset >= 0 && xCOffset < "+i+") {\n                    xTexelR"+g+"C"+(v+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR"+g+"C"+(v+1)+" = xTexelR"+g+"C"+(v+2)+";\n                "}}else v<f&&(m+="\n              if(xR >= 0 && xR < "+o+") {\n            ",s%2==1?(m+="\n                xCOffset = xC + 1 - "+p+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+g+"C"+v+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+g+"C"+v+" = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < "+i+") {\n                  xTexelR"+g+"C"+(v+2)+" = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR"+g+"C"+(v+2)+" = vec4(0.);\n                }\n\n                xR"+g+"C"+v+" = vec4(\n                  xTexelR"+g+"C"+v+".zw, xTexelR"+g+"C"+(v+2)+".zw);\n              ",v+1<f&&(m+="\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + "+p+";\n                  if(xCOffset >= 0 && xCOffset < "+i+") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR"+g+"C"+(v+1)+" = vec4(xTexelR"+g+"C"+(v+2)+".xy, final.xy);\n                ")):(m+="\n                if(xC >= 0 && xC < "+i+") {\n                  xTexelR"+g+"C"+v+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+g+"C"+v+" = vec4(0.);\n                }\n\n                xCOffset = xC + "+p+";\n                if(xCOffset >= 0 && xCOffset < "+i+") {\n                  xTexelR"+g+"C"+(v+2)+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+g+"C"+(v+2)+" = vec4(0.);\n                }\n\n                xR"+g+"C"+v+" = vec4(\n                  xTexelR"+g+"C"+v+".xy, xTexelR"+g+"C"+(v+2)+".xy);\n              ",v+1<f&&(m+="\n                  xR"+g+"C"+(v+1)+" = vec4(\n                    xTexelR"+g+"C"+v+".zw, xTexelR"+g+"C"+(v+2)+".zw);\n                ")),m+="}");v<f&&(m+="\n            vec4 wTexelR"+g+"C"+v+" = getW("+g+", "+v+", d1, q);\n            wR"+g+"C"+v+" = vec4(wTexelR"+g+"C"+v+".xz, wTexelR"+g+"C"+v+".xz);\n          ",v+1<f&&(m+="\n              vec4 wTexelR"+g+"C"+(v+1)+" = getW("+g+", "+(v+1)+", d1, q);\n              wR"+g+"C"+(v+1)+" =\n                vec4(wTexelR"+g+"C"+(v+1)+".xz, wTexelR"+g+"C"+(v+1)+".xz);"))}for(g=0;g<d;g++)for(v=0;v<f;v++)m+="dotProd += xR"+g+"C"+v+" * wR"+g+"C"+v+";";var b="",E="";n&&(b=r?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"vec4 activation(vec4 x) {\n          "+n+"\n        }",E="result = activation(result);");var w=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+b+"\n\n      const ivec2 strides = ivec2("+u+", "+p+");\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 dotProd = vec4(0.);\n\n        "+m+"\n\n        vec4 result = dotProd;\n        "+w+"\n        "+E+"\n        setOutput(result);\n      }\n    "},Ui=function(t,e,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var i=t[0],a=t[1],s=t[2],u=t[3],p=e[0],c=n[0],l=n[1];this.outputShape=[p,c,l,u];var d="bilinear"===r?1:0,f=[a-1+".0",s-1+".0"],h=f[0],m=f[1],g=c>1?[""+(a-1)/(c-1),"(y2-y1) * height_ratio","y1*"+h+" + float(y)*(height_scale)"]:["0.0","0.0","0.5 * (y1+y2) * "+h],v=g[0],y=g[1],_=g[2],b=l>1?[""+(s-1)/(l-1),"(x2-x1) * width_ratio","x1*"+m+" + float(x)*(width_scale)"]:["0.0","0.0","0.5 * (x1+x2) * "+m],x=b[0],E=b[1],w=b[2];this.userCode="\n      const float height_ratio = float("+v+");\n      const float width_ratio = float("+x+");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= "+i+") {\n          return;\n        }\n\n        float height_scale = "+y+";\n        float width_scale = "+E+";\n\n        float in_y = "+_+";\n        if( in_y < 0.0 || in_y > "+h+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n        float in_x = "+w+";\n        if( in_x < 0.0 || in_x > "+m+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if("+d+" == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    "},qi=function(t,e,n){this.variableNames=["x"],this.outputShape=t;var r=t.length,o=t[t.length-1],i=n?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+(n?"return "+o+" -i - 1;":"return i;")+"\n      }\n\n      void main() {\n        "+si(r)+" coords = getOutputCoords();\n        int end = "+Gi(r,"coords")+";\n        float val = 0.0;\n        for (int i = "+o+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+i+" end) {\n            continue;\n          }\n          if (idx == end && "+e+") {\n            continue;\n          }\n          "+Gi(r,"coords")+" = idx;\n          val += getX("+function(t,e){if(1===t)return""+e;if(2===t)return e+".x, "+e+".y";if(3===t)return e+".x, "+e+".y, "+e+".z";if(4===t)return e+".x, "+e+".y, "+e+".z, "+e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}(r,"coords")+");\n        }\n        setOutput(val);\n      }\n    "};function Gi(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}var Wi=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=Ut.DENSE;var e=$t(t),n=Ko();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Zo(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        "+n.output+" = result;\n      }\n    "},zi=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=Ut.DENSE;var e=$t(t),n=Ko();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Zo(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        "+n.output+" = result;\n      }\n    "},Vi=function(){function t(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = "+this.getHeightCoordString()+";\n      int w = "+this.getWidthCoordString()+";\n      int d = "+this.getDepthCoordString()+";\n\n      int in_h = h / "+e+";\n      int offset_h = imod(h, "+e+");\n      int in_w = w / "+e+";\n      int offset_w = imod(w, "+e+");\n      int offset_d = (offset_h * "+e+" + offset_w) *\n        "+this.getOutputDepthSize()+";\n      int in_d = d + offset_d;\n\n      float result = "+this.getInputSamplingString()+";\n      setOutput(result);\n    }\n  "}return t.prototype.getHeightCoordString=function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"},t.prototype.getWidthCoordString=function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"},t.prototype.getDepthCoordString=function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"},t.prototype.getOutputDepthSize=function(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},t}(),Hi=function(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "},Xi=function(t){this.variableNames=["A"],this.outTexUsage=qt.DOWNLOAD;var e=Ko();this.outputShape=t,this.userCode="\n      "+Jo+"\n\n      void main() {\n        float x = getAAtOutCoords();\n        "+e.output+" = encode_float(x);\n      }\n    "},Yi=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=qt.DOWNLOAD;var e=Ko();this.outputShape=t,this.userCode="\n      "+Jo+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        "+e.output+" = encode_float(x);\n      }\n    "},$i=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"];var r=Ko(),o=e[0],i=e[1];this.outputShape=t;var a="result";n&&(a="floor(result * 255. + 0.5)"),this.userCode="\n      "+Qo(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / "+i+";\n        int c = imod(flatIndex, "+i+");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n        vec4 values = "+r.texture2D+"(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        "+r.output+" = vec4("+a+", 0., 0., 0.);\n      }\n    "},ji=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var r=Ko(),o=e[0],i=e[1];this.outputShape=t;var a="",s="result";n&&(s="floor(result * 255. + 0.5)");for(var u=0;u<=1;u++)for(var p=0;p<=1;p++){var c=2*u+p;a+="\n          localCoords = coords;\n          if(localCoords[2] + "+p+" < "+t[2]+") {\n            localCoords[2] += "+p+";\n            if(localCoords[1] + "+u+" < "+t[1]+") {\n              localCoords[1] += "+u+";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n\n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / "+i+";\n              c = imod(flatIndex, "+i+");\n              uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n              values = "+r.texture2D+"(A, uv);\n\n              if(offset == 0) {\n                result["+c+"] = values[0];\n              } else if(offset == 1) {\n                result["+c+"] = values[1];\n              } else if(offset == 2) {\n                result["+c+"] = values[2];\n              } else {\n                result["+c+"] = values[3];\n              }\n            }\n          }\n        "}this.userCode="\n      "+Qo(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n\n        "+a+"\n\n        "+r.output+" = "+s+";\n      }\n    "},Ki=function(t,e,n){this.variableNames=["real","imag"];var r=e[1];this.outputShape=e;var o=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,i=n?r+".0":"1.0";this.userCode="\n      const float exponentMultiplier = "+o+";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        "+t+"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float("+r+");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < "+r+"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / "+i+";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    "},Zi=function(){function t(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.valueLoc&&(e.valueLoc=n.getUniformLocationNoThrow(r,"value")),n.gl.uniform1f(e.valueLoc,t)}},t}(),Qi=function(t){this.variableNames=["A"];var e=Ko(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+n+".0);\n\n        vec4 values = "+e.texture2D+"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    "},Ji=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;var e=Ko(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2("+r+".0, "+n+".0);\n            vec4 values = "+e.texture2D+"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        "+e.output+" = result;\n      }\n    "},ta=function(t,e,n){this.variableNames=["A","indices"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var o=si(this.rank),i=function(t,e){var n=t.length;if(n>4)throw Error("Gather for rank "+n+" is not yet supported");if(1===n)return"int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],i=0;i<t.length;i++)i===e?o.push("int(getIndices("+r[i]+"))"):o.push(""+r[i]);return o.join()}(t,n);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},ea=function(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;var r=si(e.length),o=si(n.length),i=this.sliceDim>1?"strides[j]":"strides";this.userCode="\n        "+r+" strides = "+r+"("+this.strides+");\n         void main() {\n          "+o+" coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < "+this.sliceDim+"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * "+i+";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      "};function na(t,e){var n=Ko();return re(t,e,n.version+"\n    precision highp float;\n    "+n.attribute+" vec3 clipSpacePos;\n    "+n.attribute+" vec2 uv;\n    "+n.varyingVs+" vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function ra(t,e){return le(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function oa(t,e){return de(t,e,new Uint16Array([0,1,2,2,1,3]))}function ia(t,e,n,r,o,i,a){he(n,r);var s=fe(t,e),u=t.TEXTURE_2D;return Zt(t,e,(function(){return t.bindTexture(u,s)})),Zt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),Zt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),Zt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)})),Zt(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)})),Zt(t,e,(function(){return t.texImage2D(u,0,o,n,r,0,i,a,null)})),Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),s}function aa(t,e,n,r,o){var i=Yt(n,r);return ia(t,e,i[0],i[1],o.internalFormatFloat,o.textureFormatFloat,t.FLOAT)}function sa(t,e,n,r,o){var i=Yt(n,r);return ia(t,e,i[0],i[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function ua(t,e,n,r,o){var i=Yt(n,r);return ia(t,e,i[0],i[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function pa(t,e,n,r,o){var i=jt(n,r);return ia(t,e,i[0],i[1],o.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function ca(t,e,n,r,o){var i=jt(n,r);return ia(t,e,i[0],i[1],o.internalFormatPackedHalfFloat,t.RGBA,o.textureTypeHalfFloat)}function la(t,e,n,r){return Zt(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),ge(t,e,n,"clipSpacePos",r,3,20,0)&&ge(t,e,n,"uv",r,2,20,12)}function da(t,e,n,r,o,i,a){var s,u,p;Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),i instanceof Uint8Array?(s=new Uint8Array(r*o*4),u=t.UNSIGNED_BYTE,p=t.RGBA):(s=new Float32Array(r*o*4),u=t.FLOAT,p=a.internalFormatPackedFloat),s.set(i),Zt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,p,r,o,0,t.RGBA,u,s)})),Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function fa(t,e,n,r){Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),r.data instanceof Uint8Array?Zt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):Zt(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),Zt(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function ha(t,e,n,r,o){var i=t.createBuffer();Zt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,i)}));var a=16*n*r;return Zt(t,e,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)})),Zt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)})),Zt(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),i}function ma(t,e,n){var r=t,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function ga(t,e,n,r,o){var i=Yt(n,r),a=i[0],s=i[1],u=new Uint8Array(n*r*4);return Zt(t,e,(function(){return t.readPixels(0,0,a,s,o.downloadTextureFormat,t.UNSIGNED_BYTE,u)})),new Float32Array(u.buffer)}function va(t,e,n,r,o,i,a,s){var u=t,p=new Float32Array(function(t,e){var n=jt(t,e);return n[0]*n[1]*4}(i,a));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,p),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),p}function ya(t,e,n,r){var o=new Float32Array(n*r*4);return Zt(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,o)})),o}var _a=Object.freeze({createVertexShader:na,createVertexBuffer:ra,createIndexBuffer:oa,createFloat32MatrixTexture:aa,createFloat16MatrixTexture:sa,createUnsignedBytesMatrixTexture:ua,createPackedMatrixTexture:pa,createFloat16PackedMatrixTexture:ca,bindVertexProgramAttributeStreams:la,uploadDenseMatrixToTexture:da,uploadPixelDataToTexture:fa,createBufferFromOutputTexture:ha,downloadFloat32MatrixFromBuffer:ma,downloadByteEncodedFloatMatrixFromOutputTexture:ga,downloadPackedMatrixFromBuffer:va,downloadMatrixFromPackedOutputTexture:ya}),ba=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var e=l().getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,Vt(e,t)):this.gl=Ht(e),1===l().getNumber("WEBGL_VERSION"))this.textureFloatExtension=ne(this.gl,this.debug,"OES_texture_float"),this.colorBufferFloatExtension=this.gl.getExtension("WEBGL_color_buffer_float"),this.textureHalfFloatExtension=ne(this.gl,this.debug,"OES_texture_half_float"),this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float");else if(Pe(this.gl,"EXT_color_buffer_float"))this.colorBufferFloatExtension=this.gl.getExtension("EXT_color_buffer_float");else{if(!Pe(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=ra(this.gl,this.debug),this.indexBuffer=oa(this.gl,this.debug),this.framebuffer=me(this.gl,this.debug),this.textureConfig=Kt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(t.prototype,"debug",{get:function(){return l().getBool("DEBUG")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var e=this.gl;Zt(e,this.debug,(function(){return e.finish()})),Zt(e,this.debug,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)})),Zt(e,this.debug,(function(){return e.deleteFramebuffer(t.framebuffer)})),Zt(e,this.debug,(function(){return e.bindBuffer(e.ARRAY_BUFFER,null)})),Zt(e,this.debug,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)})),Zt(e,this.debug,(function(){return e.deleteBuffer(t.indexBuffer)})),this.disposed=!0}},t.prototype.createFloat32MatrixTexture=function(t,e){return this.throwIfDisposed(),aa(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,e){return this.throwIfDisposed(),sa(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,e){return this.throwIfDisposed(),ua(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),fa(this.gl,this.debug,t,e)},t.prototype.uploadDenseMatrixToTexture=function(t,e,n,r){this.throwIfDisposed(),da(this.gl,this.debug,t,e,n,r,this.textureConfig)},t.prototype.createFloat16PackedMatrixTexture=function(t,e){return this.throwIfDisposed(),ca(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),pa(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(Ee(this.gl,this.debug,this.framebuffer),this.outputTexture=null),Zt(this.gl,this.debug,(function(){return e.gl.deleteTexture(t)}))},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return ga(r.gl,r.debug,e,n,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,e,n,r,o,i){return va(this.gl,t,0,0,0,o,i,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,e){return ma(this.gl,t,e)},t.prototype.createBufferFromTexture=function(t,e,n){this.bindTextureToFrameBuffer(t);var r=ha(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var e,n,r=this;if(l().getBool("WEBGL_FENCE_API_ENABLED")){var o=t,i=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=function(){var t=o.clientWaitSync(i,0,0);return t===o.ALREADY_SIGNALED||t===o.CONDITION_SATISFIED},e=i}else l().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(e,l().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):n=function(){return!0};return{query:e,isFencePassed:n}},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return ya(r.gl,r.debug,e,n)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=oe(e,this.debug,t),r=na(e,this.debug),o=ue(e,this.debug);return Zt(e,this.debug,(function(){return e.attachShader(o,r)})),Zt(e,this.debug,(function(){return e.attachShader(o,n)})),pe(e,this.debug,o),this.debug&&ce(e,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=la(e,this.debug,this.program,this.vertexBuffer)),o},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&Zt(this.gl,this.debug,(function(){return e.gl.deleteProgram(t)}))},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&ce(this.gl,this.debug,this.program),Zt(this.gl,this.debug,(function(){return e.gl.useProgram(t)}))},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?ye(this.gl,this.debug,t,e):_e(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),Zt(this.gl,this.debug,(function(){return n.gl.getAttribLocation(t,e)}))},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),be(this.gl,this.debug,this.program,t,e,n)},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=jt(e,n),o=r[0],i=r[1];this.setOutputMatrixTextureDriver(t,o,i)},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},t.prototype.debugValidate=function(){null!=this.program&&ce(this.gl,this.debug,this.program),we(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),Zt(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),Zt(this.gl,this.debug,(function(){return t.gl.finish()}))},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=ne(this.gl,this.debug,2===l().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===l().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},t.prototype.endQuery=function(){if(2!==l().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return u(this,void 0,void 0,(function(){var e=this;return p(this,(function(n){switch(n.label){case 0:return[4,D((function(){return e.disposed||e.isQueryAvailable(t,l().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}))];case 1:return n.sent(),[2,this.getQueryTime(t,l().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))]}}))}))},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,e){if(0===e)return!0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}return o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT),null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},t.prototype.pollFence=function(t){var e=this;return new Promise((function(n){e.addItemToPoll((function(){return t.isFencePassed()}),(function(){return n()}))}))},t.prototype.pollItems=function(){for(var t=function(t){for(var e=0;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),e=0;e<=t;++e)(0,this.itemsToPoll[e].resolveFn)();this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,e){var n=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||D((function(){return n.pollItems(),0===n.itemsToPoll.length}))},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),xe(this.gl,this.debug,t,this.framebuffer),this.debug&&we(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(xe(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&we(this.gl)):Ee(this.gl,this.debug,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,e){this.bindTextureToFrameBuffer(t);var n=e();return this.unbindTextureToFrameBuffer(),n},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;xe(r,this.debug,t,this.framebuffer),this.debug&&we(r),this.outputTexture=t,Zt(r,this.debug,(function(){return r.viewport(0,0,e,n)})),Zt(r,this.debug,(function(){return r.scissor(0,0,e,n)}))},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var o=this;this.throwIfDisposed(),Zt(this.gl,this.debug,(function(){return o.gl.scissor(t,e,n,r)}))},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},t}();function xa(t,e){if(t.length!==e.length)throw Error("Binary was compiled with "+t.length+" inputs, but was executed with "+e.length+" inputs");t.forEach((function(t,n){var r=t.logicalShape,o=e[n],i=o.shape;if(!S(r,i))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+i+" must match");if(!t.isUniform||!o.isUniform){var a=t.texShape,s=o.isUniform?null:o.texData.texShape;if(!S(a,s))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+a+" and "+s+" must match")}}))}var Ea=function(t,e,n){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var r=n.filterWidth,o=n.inChannels,i=n.strideWidth,a=n.strideHeight,s=n.padInfo,u=n.outWidth,p=n.dilationWidth,c=n.dilationHeight,l=n.dataFormat,d=s.left,f=s.top,h=o*r,m=Ko(),g="channelsLast"===l,v=g?0:1,y=g?1:2,_="",b=0;b<=1;b++)for(var x=0;x<=1;x++)_+="\n          blockIndex = rc.y + "+x+";\n          pos = rc.x + "+b+";\n\n          if(blockIndex < "+t[1]+" && pos < "+t[0]+") {\n            offsetY = int(blockIndex / ("+u+")) * "+a+" - "+f+";\n            d0 = offsetY + "+c+" * (pos / "+h+");\n\n            if(d0 < "+e[v]+" && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), "+u+".) * "+i+". - "+d+".);\n              d1 = offsetX + "+p+" * (int(mod(float(pos), "+h+".) / "+o+".));\n\n              if(d1 < "+e[y]+" && d1 >= 0) {\n\n                ch = int(mod(float(pos), "+o+".));\n\n                if ("+g+") {\n                  innerDims = vec2(d1, ch);\n                  result["+(2*b+x)+"] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result["+(2*b+x)+"] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        "+_+"\n\n        "+m.output+" = result;\n      }\n    "},wa=function(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[];var i,a=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";i=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+a+"; j <= "+a+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+s+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+i+";\n        setOutput(val);\n      }\n    "},Aa=function(t,e,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=o,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < "+this.depth+"; ++d) {\n          int depthBegin = int(max(0.0, float(d - "+e+")));\n          int depthEnd = int(min(float("+this.depth+"),\n              float(d + "+e+" + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = "+this.depth+";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float("+r+") * norm + float("+n+");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float("+r+")\n                * float("+o+")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * "+o+");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    "},Ia=function(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;var i,a=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";i=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < "+this.outputShape[3]+";\n        bool hasNextRow = c < "+this.outputShape[2]+";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - "+a+";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - "+a+"; j <= "+a+"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2("+s+"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * "+i+";\n        setOutput(result);\n      }\n    "},Ra=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=o-1-t.padInfo.top,s=i-1-t.padInfo.left,u=o*i-1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+o+";\n          wR += "+r+") {\n          float dyR = float(dyRCorner + wR) / "+e+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+i+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+n+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+u+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+i+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ta=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,s=t.effectiveFilterDepth,u=t.effectiveFilterHeight,p=t.effectiveFilterWidth,c=s-1-t.padInfo.front,l=u-1-t.padInfo.top,d=p-1-t.padInfo.left,f=s*u*p-1;this.userCode="\n      const ivec3 pads = ivec3("+c+", "+l+", "+d+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+s+";\n           wD += "+o+") {\n          float dyD = float(dyDCorner + wD) / "+e+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+i+") {\n            float dyR = float(dyRCorner + wR) / "+n+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+p+";\n                wC += "+a+") {\n              float dyC = float(dyCCorner + wC) / "+r+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = "+f+" -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * "+u+" * "+p+" +\n                  wR * "+p+" + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Sa=function(t,e,n,r,o,i,a){void 0===n&&(n=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===i&&(i=null),void 0===a&&(a=!1),this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e;var s=n?t[1]:t[2],u=Math.ceil(s/2),p=n?"i * 2, rc.y":"rc.y, i * 2",c=r?"rc.z, i * 2":"i * 2, rc.z",l=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],d=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],f="",h="";i&&(f=a?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+i+"\n        }":"vec4 activation(vec4 x) {\n          "+i+"\n        }",h="result = activation(result);");var m=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+f+"\n\n      const float sharedDimension = "+u+".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < "+u+"; i++) {\n          vec4 a = getMatrixA(rc.x, "+p+");\n          vec4 b = getMatrixB(rc.x, "+c+");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += ("+l[0]+" * "+d[0]+");\n          result += ("+l[1]+" * "+d[1]+");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        "+m+"\n\n        "+h+"\n\n        setOutput(result);\n      }\n    "},Ca=function(){function t(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(e-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(e-1)+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,"seed")),n.gl.uniform1f(e.seedLoc,t)}},t}(),Na=function(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+n+"),\n                      float(index == coords.y)));\n      }\n    "},ka=function(t){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=t;var e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{var n=jo("rc",e),r=si(e),o=function(t,e,n){if(1===t)return"rc > "+e[0];for(var r="",o=t-2;o<t;o++)r+=n[o]+" >= "+e[o],o<t-1&&(r+="||");return r}(e,t,n),i=function(t,e,n,r){if(1===t)return"";var o=r.slice(-2);return"\n    int r = "+o[0]+";\n    int c = "+o[1]+";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= "+e+";\n    bool rEdge = rp1 >= "+n+";\n  "}(e,t[t.length-1],t[t.length-2],n),a=function(t,e){var n=t.length,r=function(t,e){for(var n=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var i=(0===r?"r":"rp1")+", "+(0===o?"c":"cp1"),a=2;a<t;a++)i=e[e.length-1-a]+","+i;n.push(i)}return n}(n,e);return 1===n?"getA(rc),\n            rc + 1 >= "+t[0]+" ? 0. : getA(rc + 1),\n            0, 0":"getA("+r[0]+"),\n          cEdge ? 0. : getA("+r[1]+"),\n          rEdge ? 0. : getA("+r[2]+"),\n          rEdge || cEdge ? 0. : getA("+r[3]+")"}(t,n);this.userCode="\n        void main() {\n          "+r+" rc = getOutputCoords();\n\n          if("+o+") {\n            setOutput(vec4(0));\n          } else {\n            "+i+"\n\n            setOutput(vec4("+a+"));\n          }\n        }\n      "}},Oa=function(t,e,n){this.variableNames=["x"],this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));var r=t.length,o=si(r),i=e.map((function(t){return t[0]})).join(","),a=e.map((function(e,n){return e[0]+t[n]})).join(","),s=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+o+" start = "+o+"("+i+");\n      "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+n+"));\n        } else {\n          "+o+" coords = outC - start;\n          setOutput(getX("+s+"));\n        }\n      }\n    ":"\n        int start = "+i+";\n        int end = "+a+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+n+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      "},Da=function(t,e,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));for(var r=t.length,o=si(r),i=e.map((function(t){return t[0]})).join(","),a=e.map((function(e,n){return e[0]+t[n]})).join(","),s=jo("rc",r),u=jo("source",r),p=s[r-1]+" < "+this.outputShape[r-1],c=1===r?"source":"vec2("+u.slice(-2).join()+")",l=[o+" rc = outputLoc;",s[r-1]+" += 1;\n       if("+p+") {\n      ",1===r?"":"}\n       rc = outputLoc;\n       "+s[r-2]+" += 1;\n       if("+s[r-2]+" < "+this.outputShape[r-2]+") {",1===r?"":"  "+s[r-1]+" += 1;\n         if("+p+") {"],d=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",f="",h=0,m=1===r?2:4;h<m;h++)f+="\n        "+l[h]+"\n        if ("+d+") {\n          result["+h+"] = float("+n+");\n        } else {\n          "+o+" source = rc - start;\n          result["+h+"] = getChannel(getX("+u.join()+"), "+c+");\n        }\n      ";f+=1===r?"} ":"}}",this.userCode="\n      const "+o+" start = "+o+"("+i+");\n      const "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        "+f+"\n        setOutput(result);\n      }\n    "},Ma=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,o=t.strideHeight,i=t.strideWidth,a=t.dilationHeight,s=t.dilationWidth,u=t.effectiveFilterHeight,p=t.effectiveFilterWidth,c=t.padInfo.top,l=t.padInfo.left;this.outputShape=t.outShape;var d="avg"===e,f="0.0";if(d||(f="-1.0 / 1e-20"),n)this.userCode="\n        const ivec2 strides = ivec2("+o+", "+i+");\n        const ivec2 pads = ivec2("+c+", "+l+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+a+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+p+";\n                wC += "+s+") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * "+p+" + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var h=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(h="avgValue / count");var m=4*Math.floor(r/4),g=r%4,v="\n      if ("+d+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+o+", "+i+");\n      const ivec2 pads = ivec2("+c+", "+l+");\n      const float initializationValue = "+f+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+f+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+u+";\n            wR += "+a+") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+m+"; wC += 4) {\n            int xC = xCCorner + wC * "+s+";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              getValue(batch, xR, xC + 3 * "+s+", d)\n            );\n\n            "+v+"\n          }\n\n          int xC = xCCorner + "+m+";\n          if ("+(1===g)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+v+"\n          } else if ("+(2===g)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+v+"\n          } else if ("+(3===g)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              initializationValue\n            );\n\n            "+v+"\n          }\n        }\n        setOutput("+h+");\n      }\n    "}},La=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,p=t.dilationWidth,c=t.effectiveFilterDepth,l=t.effectiveFilterHeight,d=t.effectiveFilterWidth,f=t.padInfo.front,h=t.padInfo.top,m=t.padInfo.left;this.outputShape=t.outShape;var g="avg"===e,v="0.0";if(g||(v="-1.0 / 1e-20"),n)this.userCode="\n        const ivec3 strides =\n            ivec3("+o+", "+i+", "+a+");\n        const ivec3 pads = ivec3("+f+", "+h+", "+m+");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < "+c+";\n              wD += "+s+") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int wR = 0; wR < "+l+";\n                wR += "+u+") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int wC = 0; wC < "+d+";\n                  wC += "+p+") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * "+l+" * "+d+" +\n                      wR * "+d+" + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var y=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(y="avgValue / count");var _=4*Math.floor(r/4),b=r%4,x="\n      if ("+g+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec3 strides =\n        ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+f+", "+h+", "+m+");\n      const float initializationValue = "+v+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+v+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < "+c+";\n            wD += "+s+") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+l+";\n            wR += "+u+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+_+"; wC += 4) {\n              int xC = xCCorner + wC * "+p+";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+p+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+p+", ch),\n                getValue(batch, xD, xR, xC + 3 * "+p+", ch)\n              );\n\n              "+x+"\n            }\n\n            int xC = xCCorner + "+_+";\n            if ("+(1===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              "+x+"\n            } else if ("+(2===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+p+", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              "+x+"\n            } else if ("+(3===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+p+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+p+", ch),\n                initializationValue\n              );\n\n              "+x+"\n            }\n          }\n          setOutput("+y+");\n        }\n      }\n    "}},Pa=function(t,e){this.variableNames=["x"];var n=t.windowSize,r=t.batchSize,o=t.inSize,i=Math.ceil(o/n);this.outputShape=[r,i];var a="0.0",s="";"prod"===e?a="1.0":"min"===e?(a="1.0 / 1e-20",s="min"):"max"===e&&(a="-1.0 / 1e-20",s="max");var u=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");var p=4*Math.floor(n/4),c=n%4,l="\n      if ("+("sum"===e)+") {\n        sumValue += dot(values, ones);\n      } else if ("+("prod"===e)+") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = "+s+"(values, minMaxValue);\n      }\n    ",d="vec4";"all"===e?(a="1.0",l="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",d="bvec4"):"any"===e&&(a="0.0",l="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",d="bvec4");var f="";o%n>0&&(f="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+a+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+f+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+n+";\n\n        vec4 minMaxValue = vec4("+a+");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < "+p+"; i += 4) {\n          int inIdx = inOffset + i;\n          "+d+" values = "+d+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+l+"\n        }\n\n        int inIdx = inOffset + "+p+";\n        if ("+(1===c)+") {\n          "+d+" values = "+d+"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          "+l+"\n        } else if ("+(2===c)+") {\n          "+d+" values = "+d+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          "+l+"\n        } else if ("+(3===c)+") {\n          "+d+" values = "+d+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          "+l+"\n        }\n        setOutput("+u+");\n      }\n    "},Ba=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t;for(var n="",r=0;r<4;r++){var o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),n+="\n        "+o+"\n        "+(r>0?"if(thisRC.y < rows && thisRC.z < cols){":"")+"\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result["+r+"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        "+(r>0?"}":"")+"\n      "}this.userCode="\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      "+Zo(["r","c","d"],e)+"\n      return ivec3(r, c, d);\n    }\n  \n      "+Qo(t)+"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = "+t[1]+";\n        int cols = "+t[2]+";\n\n        "+n+"\n\n        setOutput(result);\n      }\n    "},Fa=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],i=r[2],a=t.shape,s=a[1],u=a[2],p=[n&&s>1?o-1:o,n&&u>1?i-1:i],c=[n&&s>1?s-1:s,n&&u>1?u-1:u],l=p[0]/c[0],d=p[1]/c[1],f=1/l,h=1/d,m=2*Math.ceil(f)+2,g=2*Math.ceil(h)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+l+");\n        const float widthScale = float("+d+");\n\n        const float invHeightScale = float("+f+");\n        const float invWidthScale = float("+h+");\n\n        const int winHeight = int("+m+");\n        const int winWidth = int("+g+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(o-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(i-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Ua=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],p=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/p[0]+",\n          "+u[1]/p[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "},qa=function(t,e,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],p=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          "+u[0]/p[0]+",\n          "+u[1]/p[1]+",\n          "+u[1]/p[1]+");\n      const vec3 inputShapeRC = vec3("+i+".0, "+a+".0,\n                                     "+a+".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < "+(s-1)+";\n        bool hasNextRow = coords.z < "+(n-1)+";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    "},Ga=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],i=r[2],a=t.shape,s=a[1],u=a[2],p=[n&&s>1?o-1:o,n&&u>1?i-1:i],c=[n&&s>1?s-1:s,n&&u>1?u-1:u],l=p[0]/c[0],d=p[1]/c[1],f=1/l,h=1/d,m=2*Math.ceil(f)+2,g=2*Math.ceil(h)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+l+");\n        const float widthScale = float("+d+");\n\n        const float invHeightScale = float("+f+");\n        const float invWidthScale = float("+h+");\n\n        const int winHeight = int("+m+");\n        const int winWidth = int("+g+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float("+p[0]+") *\n                (float(dyR) / float("+c[0]+"));\n\n            float sourceFracCol =\n                float("+p[1]+") *\n                  (float(dyC) / float("+c[1]+"));\n\n            int sourceNearestRow = int(min(\n                float(int("+o+") - 1),\n                "+n+" ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int("+i+") - 1),\n                "+n+" ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Wa=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],p=[r&&e>1?e-1:e,r&&n>1?n-1:n],c=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/p[0]+",\n          "+u[1]/p[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+c+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    "},za=function(t,e){this.variableNames=["x"];var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");if(this.outputShape=t,1!==n){var r=t.map((function(n,r){return function(n){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - coords["+n+"] - 1":"coords["+n+"]"}(r)})).join(","),o=si(n);this.userCode="\n      void main() {\n        "+o+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    "}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+t[0]+" - coord - 1));\n        }\n      "},Va=function(t,e){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");this.outputShape=t;var r=jo("rc",n),o=r[n-1]+" + 1 < "+this.outputShape[n-1],i=r[n-2]+" + 1 < "+this.outputShape[n-2],a=si(n);function s(n){var r=t.map((function(r,o){return function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - "+r[n]+" - 1":""+r[n]}(o,n)}));return"getChannel(getX("+r.join(",")+"), vec2("+r.slice(-2).join(",")+"))"}this.userCode=1===n?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX("+t[0]+" - rc - 1),\n            "+t[0]+" - rc - 1);\n          if("+o+"){\n              result.g = getChannel(getX("+t[0]+" - (rc  + 1) - 1),\n                "+t[0]+" - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      ":"\n        void main() {\n          "+a+" rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = "+function(t){return s(t)}(r.slice())+";\n          if("+o+"){\n            result.g = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",s(t)}(r.slice())+";\n          }\n          if("+i+") {\n            result.b = "+function(t){return t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            if("+o+") {\n              result.a = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            }\n          }\n          setOutput(result);\n        }\n    "},Ha=function(t,e,n,r,o,i,a){void 0===a&&(a=!0),this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;var s=si(o.length),u=si(i.length),p="";1===n?p="i":2===n&&(p="i, j");var c="getIndices("+p+")",l="";1===r?l="i":2===r&&(l="i, coords[1]");var d="getUpdates("+l+")",f=e>1?"strides[j]":"strides";this.userCode="\n        "+s+" strides = "+s+"("+o+");\n\n        void main() {\n          "+u+" coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < "+t+"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < "+e+"; j++) {\n              int index = round("+c+");\n              flattenedIndex += index * "+f+";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += "+d+";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      "},Xa=function(t,e){this.variableNames=["x","segmentIds"];var n=t.windowSize,r=t.batchSize,o=t.inSize,i=t.numSegments,a=i*Math.ceil(o/n);this.outputShape=[r,a];var s=4*Math.floor(n/4),u=n%4,p="\n        sumValue += dot(values, segFilter);\n    ",c="";o%n>0&&(c="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      ");var l="";o%n>0&&(l="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return -1.0;\n        }\n      "),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        "+c+"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        "+l+"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          "+i+")) * float("+n+"));\n        int currentSeg = int(mod(float(outIdx), float("+i+")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+s+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          "+p+"\n        }\n\n        int inIdx = inOffset + "+s+";\n        if ("+(1===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          "+p+"\n        } else if ("+(2===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          "+p+"\n        } else if ("+(3===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          "+p+"\n        }\n        setOutput(sumValue);\n      }\n    "},Ya=function(t,e,n){var r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error("Where for rank "+n+" is not yet supported");if(1===n)o="resRC",r="resRC";else{for(var i=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],s=[],u=0;u<e.length;u++)s.push(""+i[u]),u<t&&a.push(""+i[u]);r=a.join(),o=s.join()}var p=si(n);this.userCode="\n      void main() {\n        "+p+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+o+"));\n        } else {\n          setOutput(getB("+o+"));\n        }\n      }\n    "},$a=function(){function t(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var e,n=si(this.rank),r="uniform int start["+this.rank+"];",o=function(t){if(1===t)return"sourceLoc";if(t<=6)return ja.slice(0,t).map((function(t){return"sourceLoc."+t})).join(",");throw Error("Slicing for rank "+t+" is not yet supported")}(this.rank);e="\n        "+n+" sourceLoc;\n        "+n+" coords = getOutputCoords();\n        "+t.map((function(t,e){return"sourceLoc."+ja[e]+" = start["+e+"] + coords."+ja[e]+";"})).join("\n")+"\n      ",this.userCode="\n      "+r+"\n      void main() {\n        "+e+"\n        setOutput(getSource("+o+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),ja=["x","y","z","w","u","v"],Ka=function(){function t(t){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.rank=t.length;var e=si(this.rank),n=jo("coords",this.rank),r=jo("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":"vec2("+r.slice(-2).join()+")",i="getChannel(getSource("+r.join()+"), "+o+")",a="\n      result.x = "+i+";\n      if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n        ++"+r[this.rank-1]+";\n        result.y = "+i+";\n        --"+r[this.rank-1]+";\n      }\n    ",s=1===this.rank?"":"\n      --"+n[this.rank-1]+";\n      if (++"+n[this.rank-2]+" < "+t[this.rank-2]+") {\n        ++"+r[this.rank-2]+";\n        result.z = "+i+";\n        if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n          ++"+r[this.rank-1]+";\n          result.w = "+i+";\n        }\n      }\n    ",u=this.rank<=4?"sourceLoc = coords +\n            "+e+"("+t.map((function(t,e){return"start["+e+"]"})).join()+");":t.map((function(t,e){return r[e]+" = "+n[e]+" + start["+e+"];"})).join("\n");this.userCode="\n      uniform int start["+this.rank+"];\n      void main() {\n        "+e+" coords = getOutputCoords();\n        "+e+" sourceLoc;\n        "+u+"\n        vec4 result = vec4(0.);\n        "+a+"\n        "+s+"\n        setOutput(result);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),Za=function(t,e,n){this.variableNames=["x"],this.outputShape=n;var r=n.length,o=si(n.length),i=si(n.length),a="";if(1===r)a="coords * strides + begin";else{var s=0;a=n.map((function(t,e){return s++,1===n.length?"coords * strides["+e+"] + begin["+e+"]":"coords["+(s-1)+"] * strides["+e+"] + begin["+e+"]"})).join(",")}this.userCode="\n      "+o+" begin = "+o+"("+t+");\n      "+o+" strides = "+o+"("+e+");\n\n      void main() {\n        "+i+" coords = getOutputCoords();\n        setOutput(getX("+a+"));\n      }\n    "},Qa=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,e,n){var r,o=Ja(e,n),i=ts(t,o,n);if(i in this.freeTextures||(this.freeTextures[i]=[]),i in this.usedTextures||(this.usedTextures[i]=[]),this.freeTextures[i].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var a=this.freeTextures[i].shift();return this.usedTextures[i].push(a),a}return this.numUsedTextures++,this.log(),o===Gt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):o===Gt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):o===Gt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):o===Gt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):o===Gt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[i].push(r),r},t.prototype.releaseTexture=function(t,e,n,r){if(null!=this.freeTextures){var o=ts(e,Ja(n,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(t),this.numFreeTextures++,this.numUsedTextures--;var i=this.usedTextures[o],a=i.indexOf(t);if(a<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(a,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+t+")")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var e in this.freeTextures)this.freeTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));for(var e in this.usedTextures)this.usedTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function Ja(t,e){if(t===qt.UPLOAD)return Gt.PACKED_2X2_FLOAT32;if(t===qt.RENDER||null==t)return function(t){return l().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Gt.PACKED_2X2_FLOAT32:Gt.UNPACKED_FLOAT32:t?Gt.PACKED_2X2_FLOAT16:Gt.UNPACKED_FLOAT16}(e);if(t===qt.DOWNLOAD||t===qt.PIXELS)return Gt.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function ts(t,e,n){return t[0]+"_"+t[1]+"_"+e+"_"+n}var es=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var o=si(this.rank),i=function(t){var e=t.length;if(e>5)throw Error("Tile for rank "+e+" is not yet supported");if(1===e)return"imod(resRC, "+t[0]+")";for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[],o=0;o<t.length;o++)r.push("imod("+n[o]+", "+t[o]+")");return r.join()}(t);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},ns=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var o=si(this.rank),i=function(t){var e=t.length;if(e>6)throw Error("Transpose for rank "+e+" is not yet supported");for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e),o=0;o<t.length;o++)r[t[o]]=n[o];return r.join()}(e);this.userCode="\n    void main() {\n      "+o+" resRC = getOutputCoords();\n      setOutput(getA("+i+"));\n    }\n    "},rs=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error("Packed transpose for rank "+this.rank+" is not yet supported.");var o=si(this.rank),i=$o("rc",this.rank),a=new Array(this.rank);for(r=0;r<e.length;r++)a[e[r]]=i[r];var s="vec2("+a.slice(-2).join()+")",u="++"+i[this.rank-1]+" < "+n[this.rank-1],p="getChannel(getA("+a.join()+"), "+s+")";this.userCode="\n    void main() {\n      "+o+" rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = "+p+";\n      if("+u+") {\n        result[1] = "+p+";\n      }\n      --"+i[this.rank-1]+";\n      if(++"+i[this.rank-2]+" < "+n[this.rank-2]+") {\n        result[2] = "+p+";\n        if("+u+") {\n          result[3] = "+p+";\n        }\n      }\n      setOutput(result);\n    }\n    "},os=1.7580993408473768,is=1.0507009873554805,as=function(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      float unaryOperation(float x) {\n        "+e+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},ss="if (isnan(x)) return x;",us="return x;",ps="return abs(x);",cs=ss+"\n  return (x < 0.0) ? 0.0 : x;\n",ls=ss+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",ds="return (x >= 0.0) ? x : (exp(x) - 1.0);",fs="return -x;",hs="return ceil(x);",ms="return floor(x);",gs="return exp(x);",vs="return exp(x) - 1.0;",ys="return x;",_s="return x;",bs="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",xs="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",Es="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",ws=function(t,e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t,this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        "+e+"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},As=function(t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=t;var e=t.length,n=jo("rc",e),r=si(e),o=function(t,e){if(1===t)return"rc";for(var n="",r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),i=n.slice(-2),a=e<=1?"rc":"vec2("+i.join(",")+")";this.userCode="\n      void main() {\n        "+r+" rc = getOutputCoords();\n        vec4 packedInput = getA("+o+");\n\n        setOutput(getChannel(packedInput, "+a+"));\n      }\n    "},Is={};function Rs(t,e){if(void 0===e&&(e=!1),"linear"===t)return e?_s:us;if("relu"===t)return e?bs:cs;if("elu"===t)return e?Es:ds;if("relu6"===t)return e?xs:ls;if("prelu"===t)return e?xi:_i;throw new Error("Activation "+t+" has not been implemented for the WebGL backend.")}var Ts=600,Ss=function(t){function e(e){var n,r=t.call(this)||this;if(r.gpgpu=e,r.pendingRead=new WeakMap,r.pendingDisposal=new WeakSet,r.dataRefCount=new WeakMap,r.numBytesInGPU=0,r.uploadWaitMs=0,r.downloadWaitMs=0,r.warnedAboutMemory=!1,r.pendingDeletes=0,r.disposed=!1,!l().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==e){var o=Ht(l().getNumber("WEBGL_VERSION"));r.binaryCache=(n=l().getNumber("WEBGL_VERSION"))in Is?Is[n]:(Is[n]={},Is[n]),r.gpgpu=new ba(o),r.canvas=o.canvas,r.gpgpuCreatedLocally=!0}else r.binaryCache={},r.gpgpuCreatedLocally=!1,r.canvas=e.gl.canvas;return r.textureManager=new Qa(r.gpgpu),r.numMBBeforeWarning=null==l().global.screen?1024:l().global.screen.height*l().global.screen.width*window.devicePixelRatio*Ts/1024/1024,r.texData=new fo(r,Pt),r}return s(e,t),e.prototype.numDataIds=function(){return this.texData.numDataIds()+(this.cpuBackend?this.cpuBackend.numDataIds():0)-this.pendingDeletes},e.prototype.fromPixels=function(t,e){if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var n="undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement,r=t.data instanceof Uint8Array,o="undefined"!=typeof ImageData&&t instanceof ImageData,i="undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement,a="undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement,s=i?[t.videoWidth,t.videoHeight]:[t.width,t.height],u=s[0],p=s[1],c=[p,u],d=[p,u,e];if(!(n||r||o||i||a))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);(a||i)&&(null==this.fromPixels2DContext&&(this.fromPixels2DContext=Xt(l().getNumber("WEBGL_VERSION")).getContext("2d")),this.fromPixels2DContext.canvas.width=u,this.fromPixels2DContext.canvas.height=p,this.fromPixels2DContext.drawImage(t,0,0,u,p),t=this.fromPixels2DContext.canvas);var f,h,m=this.makeTensorInfo(c,"int32");return this.texData.get(m.dataId).usage=qt.PIXELS,this.gpgpu.uploadPixelDataToTexture(this.getTexture(m.dataId),t),l().getBool("WEBGL_PACK")?(f=new Ji(d),h=this.compileAndRun(f,[m])):(f=new Qi(d),h=this.compileAndRun(f,[m])),this.disposeData(m.dataId),h},e.prototype.write=function(t,e,n){if(l().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===n&&null!=t)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");var r={};return this.texData.set(r,{shape:e,dtype:n,values:t,usage:qt.UPLOAD}),r},e.prototype.move=function(t,e,n,r){if(l().getBool("DEBUG")&&this.checkNumericalProblems(e),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(t,{shape:n,dtype:r,values:e,usage:qt.UPLOAD})},e.prototype.readSync=function(t){var e=this.texData.get(t),n=e.values,r=e.dtype,o=e.complexTensors,i=e.slice,a=e.shape,s=e.isPacked;if(null!=i){var u;u=s?new ws(a,ys):new as(a,ys);var p=this.runWebGLProgram(u,[{dataId:t,shape:a,dtype:r}],r),c=this.readSync(p.dataId);return this.disposeData(p.dataId),c}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;var l,d,f=null!=this.activeTimers;return f&&(l=nt()),d="complex64"===r?Lo(o.real.dataSync(),o.imag.dataSync()):this.getValuesFromTexture(t),f&&(this.downloadWaitMs+=nt()-l),this.convertAndCacheOnCPU(t,d)},e.prototype.read=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s,u,c,d,f,h,m,g,v,y,_,b,x,E,w,A;return p(this,(function(p){switch(p.label){case 0:if(this.pendingRead.has(t))return e=this.pendingRead.get(t),[2,new Promise((function(t){return e.push(t)}))];if(n=this.texData.get(t),r=n.values,o=n.shape,i=n.slice,a=n.dtype,s=n.complexTensors,u=n.isPacked,null!=i)return void 0,c=u?new ws(o,ys):new as(o,ys),d=this.runWebGLProgram(c,[{dataId:t,shape:o,dtype:a}],a),f=this.read(d.dataId),this.disposeData(d.dataId),[2,f];if(null!=r)return[2,this.convertAndCacheOnCPU(t)];if(!l().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===l().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");return h=null,"complex64"!==a&&l().get("WEBGL_BUFFER_SUPPORTED")&&(m=this.decode(t),g=this.texData.get(m.dataId),h=(A=this.gpgpu).createBufferFromTexture.apply(A,[g.texture].concat($t(o)))),this.pendingRead.set(t,[]),"complex64"===a?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:p.sent(),p.label=2;case 2:return"complex64"!==a?[3,4]:[4,Promise.all([s.real.data(),s.imag.data()])];case 3:return y=p.sent(),_=y[0],b=y[1],v=Lo(_,b),[3,5];case 4:null==h?v=this.getValuesFromTexture(t):(x=T(o),v=this.gpgpu.downloadFloat32MatrixFromBuffer(h,x)),p.label=5;case 5:return null!=m&&this.disposeData(m.dataId),E=this.convertAndCacheOnCPU(t,v),w=this.pendingRead.get(t),this.pendingRead.delete(t),w.forEach((function(t){return t(E)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t),this.pendingDeletes--),[2,E]}}))}))},e.prototype.checkNumericalProblems=function(t){if(null!=t)for(var e=0;e<t.length;e++){var n=t[e];if(!te(n)){if(l().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value "+n+" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value "+n+" cannot be represented on this device.")}}},e.prototype.getValuesFromTexture=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,i=n.isPacked,a=T(r);if(l().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){var s=this.decode(t),u=this.texData.get(s.dataId),p=(e=this.gpgpu).downloadMatrixFromPackedTexture.apply(e,[u.texture].concat($t(r))).subarray(0,a);return this.disposeData(s.dataId),p}var c=l().getBool("WEBGL_PACK")&&!0===i,d=c?Ce(r):r,f=c?new Yi(d):new Xi(d),h=this.runWebGLProgram(f,[{shape:d,dtype:o,dataId:t}],"float32"),m=this.texData.get(h.dataId),g=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(m.texture,m.texShape[0],m.texShape[1]).subarray(0,a);return this.disposeData(h.dataId),g},e.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s;return p(this,(function(u){switch(u.label){case 0:return e=this.activeTimers,n=[],r=!1,null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t(),o=R(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),i=R(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=e,r&&(this.programTimersStack=null),[4,Promise.all(o)];case 1:return a=u.sent(),s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:E(a),getExtraProfileInfo:function(){return a.map((function(t,e){return{name:i[e],ms:t}})).map((function(t){return t.name+": "+t.ms})).join(", ")},wallMs:null},this.uploadWaitMs=0,this.downloadWaitMs=0,[2,s]}}))}))},e.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},e.prototype.startTimer=function(){return l().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?this.gpgpu.beginQuery():{startMs:nt(),endMs:null}},e.prototype.endTimer=function(t){return l().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(this.gpgpu.endQuery(),t):(t.endMs=nt(),t)},e.prototype.getQueryTime=function(t){return u(this,void 0,void 0,(function(){var e;return p(this,(function(n){return l().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(e=t).endMs-e.startMs]}))}))},e.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t)){if(this.pendingRead.has(t))return this.pendingDisposal.add(t),void this.pendingDeletes++;if(this.texData.has(t)){this.releaseGPUData(t);var e=this.texData.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}}},e.prototype.releaseGPUData=function(t){var e=this.texData.get(t),n=e.texture,r=e.dtype,o=e.texShape,i=e.usage,a=e.isPacked,s=e.slice,u=s&&s.origDataId||t,p=this.dataRefCount.get(u);p>1?this.dataRefCount.set(u,p-1):(this.dataRefCount.delete(u),null!=n&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(n,o,i,a)));var c=this.texData.get(t);c.texture=null,c.texShape=null,c.isPacked=!1,c.slice=null},e.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},e.prototype.getDataInfo=function(t){return this.texData.get(t)},e.prototype.getCPUBackend=function(){return l().getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Pt.findBackend("cpu")),this.cpuBackend):null},e.prototype.shouldExecuteOnCPU=function(t,e){var n=this;return void 0===e&&(e=128),null!=this.getCPUBackend()&&t.every((function(t){return null==n.texData.get(t.dataId).texture&&t.size<e}))},e.prototype.getGPGPUContext=function(){return this.gpgpu},e.prototype.complex=function(t,e){var n=this.makeOutput(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Pt.keep(t.clone()),imag:Pt.keep(e.clone())},n},e.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},e.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},e.prototype.slice=function(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===T(n))return kn([],n,t.dtype);var r=this.texData.get(t.dataId).isPacked,o=to(t.shape,e,n);if(r||!o){var i=l().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Ka(n):new $a(n),a=i.getCustomSetupFunc(e);return this.compileAndRun(i,[t],null,a)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)},e.prototype.shallowSlice=function(t,e,n){var r=this.texData.get(t.dataId),o=this.makeOutput(n,t.dtype),i=this.texData.get(o.dataId);Object.assign(i,r),i.shape=n,i.dtype=t.dtype;var a=eo(e,t.strides);r.slice&&(a+=r.slice.flatOffset),i.slice={flatOffset:a,origDataId:r.slice&&r.slice.origDataId||t.dataId};var s=this.dataRefCount.get(i.slice.origDataId)||1;return this.dataRefCount.set(i.slice.origDataId,s+1),o},e.prototype.stridedSlice=function(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);var o=Zr(e,n,r);if(o.some((function(t){return 0===t})))return kn([],o);var i=new Za(e,r,o);return this.compileAndRun(i,[t])},e.prototype.reverse=function(t,e){var n=l().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Va(t.shape,e):new za(t.shape,e);return this.compileAndRun(n,[t])},e.prototype.concat=function(t,e){if("complex64"===t[0].dtype){var n=t.map((function(t){return Cn(t)})),r=t.map((function(t){return Nn(t)}));return Sn(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>l().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){var o=Math.floor(t.length/2),i=this.concat(t.slice(0,o),e),a=this.concat(t.slice(o),e);return this.concat([i,a],e)}if(l().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){var s=new Ti(t.map((function(t){return t.shape})),e);return this.compileAndRun(s,t)}var u=Rn(t.map((function(t){return t.shape})),e),p=t.map((function(t){return t.as2D(-1,T(t.shape.slice(e)))})),c=new Ri(p.map((function(t){return t.shape})));return this.compileAndRun(c,p).reshape(u)},e.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(l().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,fs,t.dtype);var e=new as(t.shape,fs);return this.compileAndRun(e,[t])},e.prototype.batchMatMul=function(t,e,n,r){var o=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],a=n?t.shape[1]:t.shape[2],s=t.shape[0];if((1===o||1===i)&&a>1e3){n&&(t=t.transpose([0,2,1])),r&&(e=e.transpose([0,2,1]));var u=1===i?t:t.as3D(s,a,1),p=1===i?2:1,c=1===i?e.as3D(s,1,a):e;return this.multiply(u,c).sum(p,!0)}var l=Tt(t.dtype,e.dtype),d=new Sa(t.shape,[s,o,i],n,r);return this.compileAndRun(d,[t,e],l)},e.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=r?e.shape[2]:e.shape[1],p=o?n.shape[1]:n.shape[2],c=e.shape[0],l=Tt(e.dtype,n.dtype),d=null!=i,f=null!=s,h=a?Rs(a,!0):null,m=new Sa(e.shape,[c,u,p],r,o,d,h,f),g=[e,n];return i&&g.push(i),s&&g.push(s),this.compileAndRun(m,g,l)},e.prototype.multiply=function(t,e){if("complex64"===t.dtype){var n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),o=new mi("return areal * breal - aimag * bimag;",t.shape,e.shape),i=new mi("return areal * bimag + aimag * breal;",t.shape,e.shape),a=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag),this.makeComplexComponentTensorInfo(e,r.complexTensors.real),this.makeComplexComponentTensorInfo(e,r.complexTensors.imag)],s=this.compileAndRun(o,a),u=this.compileAndRun(i,a),p=this.complex(s,u);return s.dispose(),u.dispose(),p}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,yi,t.dtype);var c=new bi(yi,t.shape,e.shape);return this.compileAndRun(c,[t,e],t.dtype)},e.prototype.batchNormalization=function(t,e,n,r,o,i){var a=[t,e,n],s=null;null!=i&&(s=i.shape,a.push(i));var u=null;if(null!=o&&(u=o.shape,a.push(o)),l().getBool("WEBGL_PACK_NORMALIZATION")){var p=new hi(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(p,a)}var c=new fi(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(c,a)},e.prototype.localResponseNormalization4D=function(t,e,n,r,o){var i=l().getBool("WEBGL_PACK_NORMALIZATION")?new Ia(t.shape,e,n,r,o):new wa(t.shape,e,n,r,o);return this.compileAndRun(i,[t])},e.prototype.LRNGrad=function(t,e,n,r,o,i,a){var s=new Aa(e.shape,r,o,i,a);return this.compileAndRun(s,[e,n,t])},e.prototype.tile=function(t,e){if("string"===t.dtype){var n=this.readSync(t.dataId).map((function(t){return it(t)}));return Wo(dr(t.shape,t.dtype,n),e)}var r=new es(t.shape,e);return this.compileAndRun(r,[t])},e.prototype.pad=function(t,e,n){var r=l().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Da(t.shape,e,n):new Oa(t.shape,e,n);return this.compileAndRun(r,[t])},e.prototype.transpose=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.transpose(t,e);var n=l().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new rs(t.shape,e):new ns(t.shape,e);return this.compileAndRun(n,[t])},e.prototype.gather=function(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);var r=new ta(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},e.prototype.batchToSpaceND=function(t,e,n){w(t.rank<=4,(function(){return"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),o=qr(t.shape,e,r),i=Gr(o.length,e.length),a=Wr(t.shape,e,r),s=zr(n,e.length),u=Vr(a,n,e.length);return t.reshape(o).transpose(i).reshape(a).slice(s,u)},e.prototype.spaceToBatchND=function(t,e,n){w(t.rank<=4,(function(){return"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var i=1+e.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),s=qr(a.shape,e,r,!1),u=Gr(s.length,e.length,!1),p=Wr(a.shape,e,r,!1);return a.reshape(s).transpose(u).reshape(p)},e.prototype.reduce=function(t,e,n){var r=t.shape[0],o=t.shape[1],i=Yr(o),a=new Pa({windowSize:i,inSize:o,batchSize:r},e),s=this.compileAndRun(a,[t],n);return 1===s.shape[1]?s:this.reduce(s,e,n)},e.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],o=t.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);var i=Yr(o),a=new Yo({windowSize:i,inSize:o,batchSize:r},e,null==n),s=[t];null!=n&&s.push(n);var u=this.compileAndRun(a,s,"int32");return 1===u.shape[1]?u:this.argReduce(t,e,u)},e.prototype.argReducePacked=function(t,e,n){void 0===n&&(n=null);var r=null!=n?n.shape:t.shape,o=Yr(r[r.length-1]),i=new ci(r,o,e,null==n),a=null==n?[t]:[t,n],s=this.compileAndRun(i,a,"int32");return s.rank===t.rank?this.argReducePacked(t,e,s):s},e.prototype.sum=function(t,e){xn("sum",e,t.rank);var n=_n(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o),a=St(t.dtype);return this.reduce(i,"sum",a).reshape(r)},e.prototype.prod=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);var n=_n(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o),a=St(t.dtype);return this.reduce(i,"prod",a).reshape(r)},e.prototype.unsortedSegmentSum=function(t,e,n){var r=0,o=En([r],t.rank),i=t;null!=o&&(i=t.transpose(o),r=An(1,t.rank)[0]);var a=function(t,e,n){for(var r=[],o=t.length,i=0;i<o;i++)i!==e?r.push(t[i]):r.push(n);return r}(i.shape,r,n),s=T([i.shape[r]]),u=i.as2D(-1,s),p=St(t.dtype),c=this.segOpCompute(u,"unsortedSegmentSum",e,p,n).reshape(a);return null!=o&&(c=c.transpose(wn(o))),c},e.prototype.segOpCompute=function(t,e,n,r,o){var i=t.shape[0],a=t.shape[1],s=function(t,e){var n,r=!1;for(t<=Xr?(n=t,r=!0):n=K(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=K(t,n+1);return n}(a,o),u=new Xa({windowSize:s,inSize:a,batchSize:i,numSegments:o},e),p=this.compileAndRun(u,[t,n],r);return p.shape[1]===o?p:(n=Hn(0,o).tile([a/s]),this.segOpCompute(p,e,n,r,o))},e.prototype.argMinMaxReduce=function(t,e,n){var r=[e];if(xn("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!l().getBool("WEBGL_PACK_REDUCE")||t.rank<=2){var o=_n(t.shape,r),i=o[0],a=T(o[1]),s=t.as2D(-1,a);return this.argReduce(s,n).reshape(i)}return this.argReducePacked(t,n)},e.prototype.argMin=function(t,e){return this.argMinMaxReduce(t,e,"min")},e.prototype.argMax=function(t,e){return this.argMinMaxReduce(t,e,"max")},e.prototype.cumsum=function(t,e,n,r){if(e!==t.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis="+(t.rank-1)+" but got axis="+e);var o=new qi(t.shape,n,r);return this.compileAndRun(o,[t])},e.prototype.equal=function(t,e){if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");var n=new bi("return float(a == b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.notEqual=function(t,e){if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");var n=new bi("return float(a != b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.less=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");var n=new bi("return float(a < b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.lessEqual=function(t,e){if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");var n=new bi("return float(a <= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.greater=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");var n=new bi("return float(a > b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.greaterEqual=function(t,e){if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");var n=new bi("return float(a >= b);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.logicalNot=function(t){var e=new as(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])},e.prototype.logicalAnd=function(t,e){if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");var n=new bi("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.logicalOr=function(t,e){if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");var n=new bi("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e],"bool")},e.prototype.select=function(t,e,n){var r=new Ya(t.rank,e.shape,e.rank);return this.compileAndRun(r,[t,e,n],Tt(e.dtype,n.dtype))},e.prototype.where=function(t){dn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var e=t.dataSync();return Vo(t.shape,e)},e.prototype.topk=function(t,e,n){return zo(t.dataSync(),t.shape,t.dtype,e)},e.prototype.min=function(t,e){xn("min",e,t.rank);var n=_n(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o);return this.reduce(i,"min",i.dtype).reshape(r)},e.prototype.minimum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);var n=l().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ei("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new bi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.mod=function(t,e){var n=l().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ei("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new bi("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.max=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,e);xn("max",e,t.rank);var n=_n(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o);return this.reduce(i,"max",i.dtype).reshape(r)},e.prototype.maximum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);var n=l().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ei("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new bi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.all=function(t,e){xn("all",e,t.rank);var n=_n(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o);return this.reduce(i,"all",i.dtype).reshape(r)},e.prototype.any=function(t,e){xn("any",e,t.rank);var n=_n(t.shape,e),r=n[0],o=T(n[1]),i=t.as2D(-1,o);return this.reduce(i,"any",i.dtype).reshape(r)},e.prototype.squaredDifference=function(t,e){var n=l().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ei("return (a - b) * (a - b);",t.shape,e.shape):new bi("return (a - b) * (a - b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.realDivide=function(t,e){if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n","float32",!0);var n=new bi("\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape);return this.compileAndRun(n,[t,e],"float32")},e.prototype.floorDiv=function(t,e){if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");var n=new bi("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape);return this.compileAndRun(n,[t,e],"int32")},e.prototype.add=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,gi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);var n=Tt(t.dtype,e.dtype);if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,gi,n);var r=new bi(gi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},e.prototype.packedUnaryOp=function(t,e,n){var r=new ws(t.shape,e);return this.compileAndRun(r,[t],n)},e.prototype.packedBinaryOp=function(t,e,n,r,o){void 0===o&&(o=!1);var i=new Ei(n,t.shape,e.shape,o);return this.compileAndRun(i,[t,e],r)},e.prototype.complexSeparableBinaryOp=function(t,e,n){var r=this,o=this.texData.get(t.dataId),i=this.texData.get(e.dataId),a=[[o.complexTensors.real,i.complexTensors.real],[o.complexTensors.imag,i.complexTensors.imag]].map((function(o){var i=o[0],a=o[1],s=r.makeComplexComponentTensorInfo(t,i),u=r.makeComplexComponentTensorInfo(e,a),p=new bi(n,t.shape,e.shape);return r.compileAndRun(p,[s,u],Tt(i.dtype,a.dtype))})),s=a[0],u=a[1],p=this.complex(s,u);return s.dispose(),u.dispose(),p},e.prototype.makeComplexComponentTensorInfo=function(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}},e.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>l().get("WEBGL_MAX_TEXTURES_IN_SHADER")){var e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}var o=t.map((function(t){return t.dtype})).reduce((function(t,e){return Tt(t,e)})),i=t.map((function(t){return t.shape})),a=l().getBool("WEBGL_PACK")?new Xo(t[0].shape,i):new Ho(t[0].shape,i);return this.compileAndRun(a,t,o)},e.prototype.subtract=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,vi);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);var n=Tt(t.dtype,e.dtype);if(l().getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,vi,t.dtype);var r=new bi(vi,t.shape,e.shape);return this.compileAndRun(r,[t,e],n)},e.prototype.pow=function(t,e){var n=l().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ei("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new bi("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),r=Tt(t.dtype,e.dtype);return this.compileAndRun(n,[t,e],r)},e.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(l().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,hs,t.dtype);var e=new as(t.shape,hs);return this.compileAndRun(e,[t])},e.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(l().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ms,t.dtype);var e=new as(t.shape,ms);return this.compileAndRun(e,[t])},e.prototype.sign=function(t){var e=new as(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])},e.prototype.isNaN=function(t){var e=new as(t.shape,"return float(isnan(x));");return this.compileAndRun(e,[t],"bool")},e.prototype.isInf=function(t){var e=new as(t.shape,"return float(isinf(x));");return this.compileAndRun(e,[t],"bool")},e.prototype.isFinite=function(t){var e=new as(t.shape,"return float(!isnan(x) && !isinf(x));");return this.compileAndRun(e,[t],"bool")},e.prototype.round=function(t){var e=new as(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])},e.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(l().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,gs,t.dtype);var e=new as(t.shape,gs);return this.compileAndRun(e,[t])},e.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(l().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,vs,t.dtype);var e=new as(t.shape,vs);return this.compileAndRun(e,[t])},e.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(l().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);var e=new as(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])},e.prototype.log1p=function(t){var e=new as(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])},e.prototype.sqrt=function(t){var e=new as(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])},e.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var e=new as(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])},e.prototype.reciprocal=function(t){var e=new as(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])},e.prototype.relu=function(t){var e;return e=l().getBool("WEBGL_PACK")?new ws(t.shape,bs):new as(t.shape,cs),this.compileAndRun(e,[t])},e.prototype.relu6=function(t){var e;return e=l().getBool("WEBGL_PACK")?new ws(t.shape,xs):new as(t.shape,ls),this.compileAndRun(e,[t])},e.prototype.prelu=function(t,e){var n=l().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ei(xi,t.shape,e.shape):new bi(_i,t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.elu=function(t){if(l().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Es,t.dtype);var e=new as(t.shape,ds);return this.compileAndRun(e,[t])},e.prototype.eluDer=function(t,e){var n=l().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ei("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new bi("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.selu=function(t){var e=new as(t.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(e,[t])},e.prototype.int=function(t){var e=new as(t.shape,"return float(int(x));");return this.compileAndRun(e,[t],"int32")},e.prototype.clip=function(t,e,n){var r,o=(r=l().getBool("WEBGL_PACK_CLIP")?new Ai(t.shape):new wi(t.shape)).getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,o)},e.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(l().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ps,t.dtype);var e=new as(t.shape,ps);return this.compileAndRun(e,[t])},e.prototype.complexAbs=function(t){var e=this.texData.get(t.dataId),n=new Ii(t.shape),r=[this.makeComplexComponentTensorInfo(t,e.complexTensors.real),this.makeComplexComponentTensorInfo(t,e.complexTensors.imag)];return this.compileAndRun(n,r)},e.prototype.sigmoid=function(t){var e=new as(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])},e.prototype.softplus=function(t){var e=new as(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])},e.prototype.sin=function(t){var e=new as(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])},e.prototype.cos=function(t){var e=new as(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])},e.prototype.tan=function(t){var e=new as(t.shape,"return tan(x);");return this.compileAndRun(e,[t])},e.prototype.asin=function(t){var e=new as(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n");return this.compileAndRun(e,[t])},e.prototype.acos=function(t){var e=new as(t.shape,"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n");return this.compileAndRun(e,[t])},e.prototype.atan=function(t){var e=new as(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])},e.prototype.atan2=function(t,e){var n=l().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new Ei("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new bi("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},e.prototype.sinh=function(t){var e=new as(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},e.prototype.cosh=function(t){var e=new as(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},e.prototype.tanh=function(t){var e=new as(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])},e.prototype.asinh=function(t){var e=new as(t.shape,"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])},e.prototype.acosh=function(t){var e=new as(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])},e.prototype.atanh=function(t){var e=new as(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])},e.prototype.erf=function(t){var e=new as(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n');return this.compileAndRun(e,[t])},e.prototype.step=function(t,e){var n=new as(t.shape,function(t){return void 0===t&&(t=0),ss+"\n    return x > 0.0 ? 1.0 : float("+t+");\n  "}(e));return this.compileAndRun(n,[t])},e.prototype.conv2dByMatMul=function(t,e,n,r,o,i){var a=t.shape,s=this.texData.get(t.dataId),u=n.inChannels,p=a[0]*a[1]*a[2],c=n.outChannels,d="channelsLast"===n.dataFormat,f=(1===p||1===c)&&u>1e3,h=a[2]%2!=0&&!!s.isPacked;if(f||!l().getBool("WEBGL_LAZILY_UNPACK")||!l().getBool("WEBGL_PACK_BINARY_OPERATIONS")||!h){var m=d?a[0]*a[1]*a[2]:a[0]*a[2]*a[3],g=this.reshape(t,[1,m,n.inChannels]),v=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:g,b:v,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),n.outShape)}var y=d?a[0]*a[1]*(a[2]+1):a[0]*a[2]*(a[3]+1),_={dataId:t.dataId,shape:[1,y,n.inChannels],dtype:t.dtype},b=s.shape;s.shape=s.shape.slice(),s.shape[s.shape.length-2]++,w(Oe(s.shape,_.shape),(function(){return"packed reshape "+s.shape+" to "+_.shape+" isn't free"}));var x=this.reshape(e,[1,n.inChannels,n.outChannels]),E=this.fusedBatchMatMul({a:_,b:x,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),A=this.texData.get(E.dataId);return w(A.isPacked,(function(){return"batchMatMul result is expected to be packed"})),s.shape=b,A.shape=n.outShape,Pt.makeTensorFromDataId(E.dataId,n.outShape,E.dtype)},e.prototype.conv2dWithIm2Row=function(t,e,n,r,o,i){var a=n.filterWidth,s=n.filterHeight,u=n.inChannels,p=n.outWidth,c=n.outHeight,l="channelsLast"===n.dataFormat,d=a*s*u,f=c*p,h=[d,f],m=t.squeeze([0]),g=e.reshape([1,d,-1]),v=new Ea(h,m.shape,n),y=this.compileAndRun(v,[m]).reshape([1,h[0],h[1]]),_=null!=r,b=null!=i,x=o?Rs(o,!0):null,E=new Sa(y.shape,[1,f,n.outChannels],!0,!1,_,x,b),w=[y,g];r&&w.push(r),b&&w.push(i);var A=this.compileAndRun(E,w);return l?A.reshape([1,c,p,n.outChannels]):A.reshape([1,n.outChannels,c,p])},e.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights;if(1===r.filterHeight&&1===r.filterWidth&&1===r.dilationHeight&&1===r.dilationWidth&&1===r.strideHeight&&1===r.strideWidth&&("SAME"===r.padInfo.type||"VALID"===r.padInfo.type))return this.conv2dByMatMul(e,n,r,o,i,a);if(l().getBool("WEBGL_CONV_IM2COL")&&1===e.shape[0])return this.conv2dWithIm2Row(e,n,r,o,i,a);var s=null!=o,u=null!=a,p=i?Rs(i,!1):null,c=new Li(r,s,p,u),d=[e,n];return o&&d.push(o),a&&d.push(a),this.compileAndRun(c,d)},e.prototype.conv2d=function(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(l().getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);var r=new Li(n);return this.compileAndRun(r,[t,e])},e.prototype.conv2dDerInput=function(t,e,n){var r=new Ni(n);return this.compileAndRun(r,[t,e])},e.prototype.conv2dDerFilter=function(t,e,n){var r=new Ci(n);return this.compileAndRun(r,[t,e])},e.prototype.fusedDepthwiseConv2D=function(t){var e,n=t.input,r=t.filter,o=t.convInfo,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=l().getBool("WEBGL_PACK_DEPTHWISECONV")&&o.strideWidth<=2&&o.outChannels/o.inChannels==1,p=a?Rs(a,u):null,c=[n,r],d=null!=i,f=null!=s;return d&&c.push(i),f&&c.push(s),u?(e=new Fi(o,d,p,f),this.compileAndRun(e,c)):(e=new Bi(o,d,p,f),this.compileAndRun(e,c))},e.prototype.depthwiseConv2D=function(t,e,n){var r;return l().getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Fi(n),this.compileAndRun(r,[t,e])):(r=new Bi(n),this.compileAndRun(r,[t,e]))},e.prototype.depthwiseConv2DDerInput=function(t,e,n){var r=new Mi(n);return this.compileAndRun(r,[t,e])},e.prototype.depthwiseConv2DDerFilter=function(t,e,n){var r=new Di(n);return this.compileAndRun(r,[t,e])},e.prototype.conv3d=function(t,e,n){var r=new Pi(n);return this.compileAndRun(r,[t,e])},e.prototype.conv3dDerInput=function(t,e,n){var r=new Oi(n);return this.compileAndRun(r,[t,e])},e.prototype.conv3dDerFilter=function(t,e,n){var r=new ki(n);return this.compileAndRun(r,[t,e])},e.prototype.maxPool=function(t,e){var n=new Ma(e,"max",!1);return this.compileAndRun(n,[t])},e.prototype.avgPool=function(t,e){var n=new Ma(e,"avg",!1);return this.compileAndRun(n,[t],"float32")},e.prototype.maxPoolBackprop=function(t,e,n,r){var o=new Ma(r,"max",!0),i=this.compileAndRun(o,[e]),a=new Ra(r),s=this.compileAndRun(a,[t,i],e.dtype);return i.dispose(),s},e.prototype.avgPoolBackprop=function(t,e,n){var r=new li(n);return this.compileAndRun(r,[t],e.dtype)},e.prototype.cast=function(t,e){return ko(t,e,this)},e.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==e&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(i=0;i<u.length;i++)a[e]=i,u[i]=this.slice(t,a,s).reshape(r);return u},e.prototype.avgPool3d=function(t,e){var n=new La(e,"avg",!1);return this.compileAndRun(n,[t],"float32")},e.prototype.avgPool3dBackprop=function(t,e,n){var r=new di(n);return this.compileAndRun(r,[t],e.dtype)},e.prototype.maxPool3d=function(t,e){var n=new La(e,"max",!1);return this.compileAndRun(n,[t],"float32")},e.prototype.maxPool3dBackprop=function(t,e,n,r){var o=new La(r,"max",!0),i=this.compileAndRun(o,[e]),a=new Ta(r),s=this.compileAndRun(a,[t,i],e.dtype);return i.dispose(),s},e.prototype.reshape=function(t,e){var n=this.texData.get(t.dataId);if(n.isPacked&&!Oe(t.shape,e)&&(null===n.texture||!Oe(n.shape,e))){var r=this.packedReshape(t,e);return Pt.makeTensorFromDataId(r.dataId,r.shape,r.dtype)}return Oo(t,e)},e.prototype.resizeBilinear=function(t,e,n,r){var o=l().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new qa(t.shape,e,n,r):new Ua(t.shape,e,n,r);return this.compileAndRun(o,[t])},e.prototype.resizeBilinearBackprop=function(t,e,n){var r=new Fa(t,e,n);return this.compileAndRun(r,[t])},e.prototype.resizeNearestNeighbor=function(t,e,n,r){var o=new Wa(t.shape,e,n,r);return this.compileAndRun(o,[t])},e.prototype.resizeNearestNeighborBackprop=function(t,e,n){var r=new Ga(t,e,n);return this.compileAndRun(r,[t])},e.prototype.multinomial=function(t,e,n,r){var o=e?t:co(t),i=o.shape[0],a=o.shape[1],s=new Ca(i,a,n),u=s.getCustomSetupFunc(r);return this.compileAndRun(s,[o],"int32",u)},e.prototype.oneHot=function(t,e,n,r){var o=new Na(t.size,e,n,r);return this.compileAndRun(o,[t])},e.prototype.diag=function(t){var e=new Hi(t.size);return this.compileAndRun(e,[t])},e.prototype.nonMaxSuppression=function(t,e,n,r,o){return dn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"),Uo(t.dataSync(),e.dataSync(),n,r,o)},e.prototype.cropAndResize=function(t,e,n,r,o,i){var a=new Ui(t.shape,e.shape,r,o,i);return this.compileAndRun(a,[t,e,n])},e.prototype.depthToSpace=function(t,e,n){w(e>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+e}));var r=t.shape[0],o="NHWC"===n?t.shape[1]:t.shape[2],i="NHWC"===n?t.shape[2]:t.shape[3],a="NHWC"===n?t.shape[3]:t.shape[1],s=o*e,u=i*e,p=a/(e*e),c=new Vi("NHWC"===n?[r,s,u,p]:[r,p,s,u],e,n);return this.compileAndRun(c,[t])},e.prototype.split=function(t,e,n){return Go(t,e,n)},e.prototype.scatterND=function(t,e,n){var r=$r(0,t,n),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,s=r.strides,u=r.outputSize,p=[u/a,a],c=t.reshape([i,o]),l=e.reshape([i,a]);if(0===u)return Oo(kn([]),n);var d=Dn(0),f=new Ha(i,o,c.rank,l.rank,s,p);return this.compileAndRun(f,[l,c,d]).reshape(n)},e.prototype.sparseToDense=function(t,e,n,r){var o=$r(0,t,n),i=o.sliceRank,a=o.numUpdates,s=o.strides,u=o.outputSize,p=new Ha(a,i,t.rank,e.rank,s,[u,1],!1);return this.compileAndRun(p,[e,t,r]).reshape(n)},e.prototype.fft=function(t){return this.fftImpl(t,!1)},e.prototype.ifft=function(t){return this.fftImpl(t,!0)},e.prototype.fftImpl=function(t,e){var n=this.texData.get(t.dataId),r=new Ki("return real * expR - imag * expI;",t.shape,e),o=new Ki("return real * expI + imag * expR;",t.shape,e),i=[this.makeComplexComponentTensorInfo(t,n.complexTensors.real),this.makeComplexComponentTensorInfo(t,n.complexTensors.imag)],a=this.compileAndRun(r,i),s=this.compileAndRun(o,i),u=this.complex(a,s).as2D(t.shape[0],t.shape[1]);return a.dispose(),s.dispose(),u},e.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Hr(t,e),i=o[0],a=o[1],s=o[2],u=o[3],p=e.reshape([a,r]),c=t.reshape([t.size/s,s]),l=new ea(r,u,[a,s]);return this.compileAndRun(l,[c,p]).reshape(i)},e.prototype.fill=function(t,e,n){if("string"===(n=n||$(e))){var r=F(n,T(t));return r.fill(e),Pt.makeTensor(r,t,n,this)}var o=new Zi(t,e),i=o.getCustomSetupFunc(e);return this.compileAndRun(o,[],n,i)},e.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)},e.prototype.zerosLike=function(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)},e.prototype.linspace=function(t,e,n){return Do(t,e,n)},e.prototype.makeTensorInfo=function(t,e){var n=this.write(null,t,e);return this.texData.get(n).usage=null,{dataId:n,shape:t,dtype:e}},e.prototype.makeOutput=function(t,e){var n=this.makeTensorInfo(t,e).dataId;return Pt.makeTensorFromDataId(n,t,e,this)},e.prototype.unpackTensor=function(t){var e=new As(t.shape);return this.runWebGLProgram(e,[t],t.dtype)},e.prototype.packTensor=function(t){var e=new ka(t.shape);return this.runWebGLProgram(e,[t],t.dtype,null,!0)},e.prototype.packedReshape=function(t,e){var n=[Te(t.shape)].concat(Se(t.shape)),r={dtype:t.dtype,shape:n,dataId:t.dataId},o=[Te(e)].concat(Se(e)),i=new Ba(o,n),a=this.runWebGLProgram(i,[r],t.dtype,null,!0);return{dataId:a.dataId,shape:e,dtype:a.dtype}},e.prototype.decode=function(t){var e,n=this.texData.get(t),r=n.isPacked,o=n.shape,i=n.dtype,a=Ce(o);return e=r?new zi(a):new Wi(a),{dtype:i,shape:o,dataId:this.runWebGLProgram(e,[{shape:a,dtype:i,dataId:t}],i,null,!0).dataId}},e.prototype.runWebGLProgram=function(t,e,n,r,o){var i=this;void 0===o&&(o=!1);var a=this.makeTensorInfo(t.outputShape,n),s=this.texData.get(a.dataId);if(t.packedOutput&&(s.isPacked=!0),t.outPackingScheme===Ut.DENSE){var u=$t(t.outputShape);s.texShape=u.map((function(t){return 2*t}))}if(null!=t.outTexUsage&&(s.usage=t.outTexUsage),0===T(a.shape))return s.values=B(a.dtype,0),a;var p=[],c=e.map((function(e){if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var n=i.texData.get(e.dataId);if(null==n.texture){if(!t.packedInputs&&T(e.shape)<=l().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.packedInputs&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.packedInputs)e=n.isPacked?i.unpackTensor(e):i.packTensor(e),p.push(e),n=i.texData.get(e.dataId);else if(n.isPacked&&!Oe(n.shape,e.shape)){var r=e,o=e.shape;e.shape=n.shape,e=i.packedReshape(e,o),p.push(e),n=i.texData.get(e.dataId),r.shape=o}return i.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(a.dataId);var d,f={shape:a.shape,texData:s,isUniform:!1},h=function(t,e,n){var r="";e.concat(n).forEach((function(t){var e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=t.shape+"_"+n+"_"+e}));var o=t.userCode;return t.constructor.name+"_"+r+"_"+o}(t,c,f),m=this.getAndSaveBinary(h,(function(){return function(t,e,n,r){var o=e.userCode,i=n.map((function(t,n){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),a=i.map((function(t){return t.shapeInfo})),s={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=ti(i,s,o,e.packedInputs),p=t.createProgram(u),c=null,d=t.getUniformLocation(p,"NAN",!1);1===l().getNumber("WEBGL_VERSION")&&(c=t.getUniformLocation(p,"INFINITY",!1));for(var f={},h=0;h<e.variableNames.length;h++){var m=e.variableNames[h];f[m]=t.getUniformLocation(p,m,!1),f["offset"+m]=t.getUniformLocation(p,"offset"+m,!1)}return{program:e,source:u,webGLProgram:p,uniformLocations:f,inShapeInfos:a,outShapeInfo:s,infLoc:c,nanLoc:d}}(i.gpgpu,t,c,f)})),g=null!=this.activeTimers;if(g&&(d=this.startTimer()),function(t,e,n,r,o){xa(e.inShapeInfos,n),xa([e.outShapeInfo],[r]);var i=r.texData.texture,a=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(i,a[0],a[1]):t.setOutputMatrixTexture(i,a[0],a[1]),t.setProgram(e.webGLProgram),1===l().getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((function(n,r){var o=e.program.variableNames[r],i=e.uniformLocations[o],a=e.uniformLocations["offset"+o];if(null!=i)if(n.isUniform)if(T(n.shape)<2)t.gl.uniform1f(i,n.uniformValues[0]);else{var s=n.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),t.gl.uniform1fv(i,s)}else null!=n.texData.slice&&null!=a&&t.gl.uniform1i(a,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,i,r)})),null!=o&&o(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,m,c,f,r),p.forEach((function(t){return i.disposeData(t.dataId)})),g&&(d=this.endTimer(d),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(d)})),!l().getBool("WEBGL_LAZILY_UNPACK")&&s.isPacked&&!1===o){var v=this.unpackTensor(a);return this.disposeData(a.dataId),v}return a},e.prototype.compileAndRun=function(t,e,n,r,o){void 0===o&&(o=!1),n=n||e[0].dtype;var i=this.runWebGLProgram(t,e,n,r,o);return Pt.makeTensorFromDataId(i.dataId,i.shape,i.dtype)},e.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},e.prototype.getTextureManager=function(){return this.textureManager},e.prototype.dispose=function(){this.disposed||(this.textureManager.dispose(),null!=this.canvas&&"undefined"!=typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,null!=this.fromPixels2DContext&&this.fromPixels2DContext.canvas.remove&&this.fromPixels2DContext.canvas.remove(),this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)},e.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=Qe((function(){if(!l().get("WEBGL_RENDER_FLOAT32_ENABLED")){var e=l().getBool("DEBUG");l().set("DEBUG",!1);var n=t.abs(Dn(1e-8)).dataSync()[0];if(l().set("DEBUG",e),n>0)return 32}return 16}))),this.floatPrecisionValue},e.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},e.prototype.uploadToGPU=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,i=n.values,a=n.texture,s=n.usage,u=n.isPacked;if(null==a){var p,c=null!=this.activeTimers;c&&(p=nt());var l=n.texShape;if(null==l&&(l=Ne(r,u),n.texShape=l),null!=i){var d=Ce(r),f=void 0,h=l[1],m=l[0],g=i instanceof Uint8Array;u?(h=(e=jt(l[0],l[1]))[0],m=e[1],f=new ji(d,[m,h],g)):f=new $i(d,[m,h],g);var v=this.makeTensorInfo([m,h],o);this.texData.get(v.dataId).usage=g?qt.PIXELS:qt.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(v.dataId),h,m,i);var y=this.runWebGLProgram(f,[v],o,null,!0),_=this.texData.get(y.dataId);n.texture=_.texture,n.texShape=_.texShape,n.isPacked=_.isPacked,n.usage=_.usage,this.disposeData(v.dataId),this.texData.delete(y.dataId),n.values=null,c&&(this.uploadWaitMs+=nt()-p)}else{var b=this.acquireTexture(l,s,o,u);n.texture=b}}},e.prototype.convertAndCacheOnCPU=function(t,e){var n=this.texData.get(t),r=n.dtype;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){for(var n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values},e.prototype.acquireTexture=function(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: "+o+" MB, most likely due to a memory leak")}return this.textureManager.acquireTexture(t,e,r)},e.prototype.computeBytes=function(t,e){return t[0]*t[1]*z(e)},e}(ho);Bt()&&Pt.registerBackend("webgl",(function(){return new Ss}),2);var Cs=Tn({square_:function(t){var e=mn(t,"x","square"),n=[e];return Pt.runKernelFunc((function(t,n){return n([e]),t.square(e)}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().mul(2))}}}),"Square",{},n,[])}}),Ns=Tn({abs_:function(t){var e=mn(t,"x","abs");return"complex64"===e.dtype?Pt.runKernelFunc((function(t){return t.complexAbs(e)}),{$x:e}):Pt.runKernelFunc((function(t,n){var r=t.abs(e);return n([e]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.toFloat().step(-1))}}}),"Abs")}}),ks=Tn({acos_:function(t){var e=mn(t,"x","acos");return Pt.runKernelFunc((function(t,n){var r=t.acos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Dn(1).sub(n.toFloat().square()).sqrt()).neg()}}}))}}),Os=Tn({acosh_:function(t){var e=mn(t,"x","acosh");return Pt.runKernelFunc((function(t,n){var r=t.acosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(n.toFloat().square().sub(1).sqrt())}}}))}}),Ds=Tn({asin_:function(t){var e=mn(t,"x","asin");return Pt.runKernelFunc((function(t,n){var r=t.asin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Dn(1).sub(n.toFloat().square()).sqrt())}}}))}}),Ms=Tn({asinh_:function(t){var e=mn(t,"x","asinh");return Pt.runKernelFunc((function(t,n){var r=t.asinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Dn(1).add(n.toFloat().square()).sqrt())}}}))}}),Ls=Tn({atan_:function(t){var e=mn(t,"x","atan");return Pt.runKernelFunc((function(t,n){var r=t.atan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().square().add(1))}}}))}}),Ps=Tn({atanh_:function(t){var e=mn(t,"x","atanh");return Pt.runKernelFunc((function(t,n){var r=t.atanh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(Dn(1).sub(n.toFloat().square()))}}}))}}),Bs=Tn({ceil_:function(t){var e=mn(t,"x","ceil");return Pt.runKernelFunc((function(t){return t.ceil(e)}),{$x:e},(function(t){return{$x:function(){return Yn(t)}}}))}}),Fs=Tn({clipByValue_:function(t,e,n){var r=mn(t,"x","clipByValue");return w(e<=n,(function(){return"Error in clip: min ("+e+") must be less than or equal to max ("+n+")."})),Pt.runKernelFunc((function(t,o){var i=t.clip(r,e,n);return o([r]),i}),{$x:r},(function(t,r){var o=r[0];return{$x:function(){return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)),Yn(t))}}}))}}),Us=Tn({cos_:function(t){var e=mn(t,"x","cos");return Pt.runKernelFunc((function(t,n){var r=t.cos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sin().neg().mul(t)}}}))}}),qs=Tn({cosh_:function(t){var e=mn(t,"x","cosh");return Pt.runKernelFunc((function(t,n){var r=t.cosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sinh().mulStrict(t)}}}))}}),Gs=Tn({erf_:function(t){var e=mn(t,"x","erf");return w("int32"===e.dtype||"float32"===e.dtype,(function(){return"Input dtype must be `int32` or `float32`."})),"int32"===e.dtype&&(e=e.toFloat()),Pt.runKernelFunc((function(t,n){var r=t.erf(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),Ws=Tn({exp_:function(t){var e=mn(t,"x","exp");return Pt.runKernelFunc((function(t,n){var r=t.exp(e);return n([r]),r}),{$x:e},(function(t,e){return{$x:function(){return t.mulStrict(e[0])}}}))}}),zs=Tn({expm1_:function(t){var e=mn(t,"x","expm1");return Pt.runKernelFunc((function(t,n){var r=t.expm1(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.exp())}}}))}}),Vs=Tn({floor_:function(t){var e=mn(t,"x","floor");return Pt.runKernelFunc((function(t){return t.floor(e)}),{$x:e},(function(t){return{$x:function(){return Yn(t)}}}))}}),Hs=Tn({log_:function(t){var e=mn(t,"x","log");return Pt.runKernelFunc((function(t,n){var r=t.log(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat())}}}))}}),Xs=Tn({log1p_:function(t){var e=mn(t,"x","log1p");return Pt.runKernelFunc((function(t,n){var r=t.log1p(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.add(1))}}}))}}),Ys=Tn({logSigmoid_:function(t){var e=mn(t,"x","logSigmoid");return Pt.runKernelFunc((function(t,n){var r=t.softplus(e.neg()).neg();return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.neg().sigmoid())}}}))}}),$s=Tn({neg_:function(t){var e=mn(t,"x","neg");return Pt.runKernelFunc((function(t){return t.neg(e)}),{$x:e},(function(t){return{$x:function(){return t.neg()}}}))}}),js=Tn({reciprocal_:function(t){var e=mn(t,"x","reciprocal");return Pt.runKernelFunc((function(t,n){var r=t.reciprocal(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.square().neg())}}}))}}),Ks=Tn({round_:function(t){var e=mn(t,"x","round");return Pt.runKernelFunc((function(t){return t.round(e)}),{$x:e},(function(t){return{$x:function(){return Yn(t)}}}))}}),Zs=Tn({rsqrt_:function(t){var e=mn(t,"x","rsqrt");return Pt.runKernelFunc((function(t,n){var r=t.rsqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.pow(1.5).mul(2)).neg()}}}))}}),Qs=Tn({sigmoid_:function(t){var e=mn(t,"x","sigmoid");return Pt.runKernelFunc((function(t,n){var r=t.sigmoid(e);return n([r]),r}),{x:e},(function(t,e){var n=e[0];return{x:function(){return t.mul(n.mul(Dn(1).sub(n)))}}}),"Sigmoid")}}),Js=Tn({sign_:function(t){var e=mn(t,"x","sign");return Pt.runKernelFunc((function(t){return t.sign(e)}),{$x:e},(function(t){return{$x:function(){return Yn(t)}}}))}}),tu=Tn({isNaN_:function(t){var e=mn(t,"x","isNaN");return Pt.runKernelFunc((function(t){return t.isNaN(e)}),{$x:e},(function(t){return{$x:function(){return Yn(t)}}}))}}),eu=Tn({isInf_:function(t){var e=mn(t,"x","isInf");return Pt.runKernelFunc((function(t){return t.isInf(e)}),{$x:e},(function(t){return{$x:function(){return Yn(t)}}}))}}),nu=Tn({isFinite_:function(t){var e=mn(t,"x","isFinite");return Pt.runKernelFunc((function(t){return t.isFinite(e)}),{$x:e},(function(t){return{$x:function(){return Yn(t)}}}))}}),ru=Tn({sin_:function(t){var e=mn(t,"x","sin");return Pt.runKernelFunc((function(t,n){var r=t.sin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cos().mul(t)}}}))}}),ou=Tn({sinh_:function(t){var e=mn(t,"x","sinh");return Pt.runKernelFunc((function(t,n){var r=t.sinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cosh().mulStrict(t)}}}))}}),iu=Tn({softplus_:function(t){var e=mn(t,"x","softplus");return Pt.runKernelFunc((function(t,n){var r=t.softplus(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.sigmoid())}}}))}}),au=Tn({sqrt_:function(t){var e=mn(t,"x","sqrt");return Pt.runKernelFunc((function(t,n){var r=t.sqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().sqrt().mul(2))}}}))}}),su=Tn({step_:function(t,e){void 0===e&&(e=0);var n=mn(t,"x","step");return Pt.runKernelFunc((function(t){return t.step(n,e)}),{$x:n},(function(t){return{$x:function(){return Yn(t)}}}))}}),uu=Tn({tan_:function(t){var e=mn(t,"x","tan");return Pt.runKernelFunc((function(t,n){var r=t.tan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.cos().square())}}}))}}),pu=Tn({tanh_:function(t){var e=mn(t,"x","tanh");return Pt.runKernelFunc((function(t,n){var r=t.tanh(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Dn(1).sub(n.square()).mulStrict(t)}}}))}});function cu(t,e,n,r,o,i){var a,s,u=mn(t,"x","batchNorm"),p=mn(e,"mean","batchNorm"),c=mn(n,"variance","batchNorm");return null!=o&&(a=mn(o,"scale","batchNorm")),null!=r&&(s=mn(r,"offset","batchNorm")),w(2===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),w(2===p.rank||1===p.rank,(function(){return"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank "+p.rank+"."})),w(2===c.rank||1===c.rank,(function(){return"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank "+c.rank+"."})),null!=a&&w(2===a.rank||1===a.rank,(function(){return"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank "+a.rank+"."})),null!=s&&w(2===s.rank||1===s.rank,(function(){return"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank "+s.rank+"."})),fu(u,p,c,s,a,i)}function lu(t,e,n,r,o,i){var a,s,u=mn(t,"x","batchNorm"),p=mn(e,"mean","batchNorm"),c=mn(n,"variance","batchNorm");return null!=o&&(a=mn(o,"scale","batchNorm")),null!=r&&(s=mn(r,"offset","batchNorm")),w(3===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),w(3===p.rank||1===p.rank,(function(){return"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank "+p.rank+"."})),w(3===c.rank||1===c.rank,(function(){return"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank "+c.rank+"."})),null!=a&&w(3===a.rank||1===a.rank,(function(){return"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank "+a.rank+"."})),null!=s&&w(3===s.rank||1===s.rank,(function(){return"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank "+s.rank+"."})),fu(u,p,c,s,a,i)}function du(t,e,n,r,o,i){var a,s,u=mn(t,"x","batchNorm"),p=mn(e,"mean","batchNorm"),c=mn(n,"variance","batchNorm");return null!=o&&(a=mn(o,"scale","batchNorm")),null!=r&&(s=mn(r,"offset","batchNorm")),w(4===u.rank,(function(){return"Error in batchNorm4D: x must be rank 4 but got rank "+u.rank+"."})),w(4===p.rank||1===p.rank,(function(){return"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank "+p.rank+"."})),w(4===c.rank||1===c.rank,(function(){return"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank "+c.rank+"."})),null!=a&&w(4===a.rank||1===a.rank,(function(){return"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank "+a.rank+"."})),null!=s&&w(4===s.rank||1===s.rank,(function(){return"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank "+s.rank+"."})),fu(u,p,c,s,a,i)}function fu(t,e,n,r,o,i){null==i&&(i=.001);var a,s,u,p=mn(t,"x","batchNorm"),c=mn(e,"mean","batchNorm"),l=mn(n,"variance","batchNorm");null!=o&&(a=mn(o,"scale","batchNorm")),null!=r&&(s=mn(r,"offset","batchNorm")),w(c.rank===l.rank,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),w(null==s||c.rank===s.rank,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),w(null==a||c.rank===a.rank,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."})),u=0===p.rank||1===p.rank?p.as4D(1,1,1,p.size):2===p.rank?p.as4D(1,1,p.shape[0],p.shape[1]):3===p.rank?p.as4D(1,p.shape[0],p.shape[1],p.shape[2]):p;var d=[p,c,l,a];return Pt.runKernelFunc((function(t,e){var n=t.batchNormalization(u,hu(c),hu(l),i,hu(a),hu(s));return e([p,c,l,a]),n}),{x:p,mean:c,variance:l,scale:a,offset:s},(function(t,e){var n=e,r=n[0],o=n[1],a=n[2],s=n[3],p=null==s?Dn(1):s,c=vo(o.shape,u.shape),l=[];if(1===o.rank){for(var d=0;d<u.shape.length-1;++d)l.push(u.shape[d]);l.push(1)}var f=r.sub(o),h=t.mul(p),m=Zs(a.add(Dn(i))),g=m.mul(m).mul(m).mul(Dn(-.5));return{x:function(){return 1===o.rank?t.mul(Pr(m.as4D(1,1,1,o.shape[0]),l)).mul(p).reshape(r.shape):t.mul(m).mul(p).reshape(r.shape)},mean:function(){var t=m.mul(Dn(-1)).mul(h);return 1===o.rank&&(t=t.sum(c)),t.reshape(o.shape)},variance:function(){var t=g.mul(f).mul(h);return 1===o.rank&&(t=t.sum(c)),t.reshape(o.shape)},scale:function(){var e=f.mul(m),n=t.mul(e);return 1===o.rank&&(n=n.sum(c)),n.reshape(o.shape)},offset:function(){var e=t;return 1===o.rank&&(e=e.sum(c)),e.reshape(o.shape)}}}),"BatchNormalization",{varianceEpsilon:i},d).reshape(p.shape)}function hu(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function mu(){Ye("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon")}var gu=Tn({batchNormalization2d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),mu(),cu(t,e,n,i,o,r)}}),vu=Tn({batchNormalization3d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),mu(),lu(t,e,n,i,o,r)}}),yu=Tn({batchNormalization4d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),mu(),du(t,e,n,i,o,r)}}),_u=Tn({batchNormalization_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),mu(),fu(t,e,n,i,o,r)}}),bu=Tn({batchNorm_:fu}),xu=Tn({batchNorm2d_:cu}),Eu=Tn({batchNorm3d_:lu}),wu=Tn({batchNorm4d_:du}),Au=Tn({logicalAnd_:function(t,e){var n=mn(t,"a","logicalAnd","bool"),r=mn(e,"b","logicalAnd","bool");return yo(n.shape,r.shape),Pt.runKernelFunc((function(t){return t.logicalAnd(n,r)}),{$a:n,$b:r})}}),Iu=Tn({logicalNot_:function(t){var e=mn(t,"x","logicalNot","bool");return Pt.runKernelFunc((function(t){return t.logicalNot(e)}),{$x:e})}}),Ru=Tn({logicalOr_:function(t,e){var n=mn(t,"a","logicalOr","bool"),r=mn(e,"b","logicalOr","bool");return yo(n.shape,r.shape),Pt.runKernelFunc((function(t){return t.logicalOr(n,r)}),{$a:n,$b:r})}}),Tu=Tn({logicalXor_:function(t,e){var n=mn(t,"a","logicalXor","bool"),r=mn(e,"b","logicalXor","bool");return yo(n.shape,r.shape),Ru(t,e).logicalAnd(Au(t,e).logicalNot())}}),Su=Tn({where_:function(t,e,n){var r=mn(e,"a","where"),o=mn(n,"b","where"),i=mn(t,"condition","where","bool");return A(r.shape,o.shape,"Error in where: "),1===i.rank?w(i.shape[0]===r.shape[0],(function(){return"The first dimension of `a` must match the size of `condition`."})):A(i.shape,o.shape,"Error in where: "),Pt.runKernelFunc((function(t,e){var n=t.select(i,r,o);return e([i]),n}),{$condition:i,$a:r,$b:o},(function(t,e){var n=e[0];return{$condition:function(){return Yn(n).toFloat()},$a:function(){return t.mul(n.cast(t.dtype))},$b:function(){return t.mul(n.logicalNot().cast(t.dtype))}}}))}}),Cu=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return p(this,(function(o){switch(o.label){case 0:return[4,(e=mn(t,"condition","whereAsync","bool")).data()];case 1:return n=o.sent(),r=Vo(e.shape,n),t!==e&&e.dispose(),[2,r]}}))}))},Nu=Tn({add_:function(t,e){var n,r=mn(t,"a","add"),o=mn(e,"b","add");n=Ct(r,o),r=n[0],o=n[1];var i=yo(r.shape,o.shape);return Pt.runKernelFunc((function(t){return t.add(r,o)}),{a:r,b:o},(function(t){return{a:function(){var e=t,n=vo(r.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},b:function(){var e=t,n=vo(o.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(o.shape)}}}),"Add")}}),ku=Tn({addN_:function(t){w(Array.isArray(t),(function(){return"The argument passed to tf.addN() must be a list of tensors"})),w(t.length>=1,(function(){return"Must pass at least one tensor to tf.addN(), but got "+t.length}));var e=t.map((function(t,e){return mn(t,"tensors"+e,"addN")})),n=e[0];e.forEach((function(t){if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((function(t){if(!S(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));var r=e;return Pt.runKernelFunc((function(t){return t.addN(e)}),r,(function(t){var n={};return e.forEach((function(e,r){n[r]=function(){return t.clone()}})),n}))}}),Ou=Tn({addStrict_:function(t,e){var n=mn(t,"a","addStrict"),r=mn(e,"b","addStrict");return A(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),Du=Tn({atan2_:function(t,e){var n,r=mn(t,"a","atan2"),o=mn(e,"b","atan2");n=Ct(r,o),r=n[0],o=n[1];var i=yo(r.shape,o.shape);return Pt.runKernelFunc((function(t,e){var n=t.atan2(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=Nu(n.square(),r.square()),o=t.mul(r.div(e)),a=vo(n.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(n.shape)},$b:function(){var e=Nu(n.square(),r.square()),o=$s(t.mul(n.div(e))),a=vo(r.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(r.shape)}}}))}}),Mu=Tn({div_:function(t,e){var n,r=mn(t,"a","div"),o=mn(e,"b","div");if(n=Ct(r,o),r=n[0],o=n[1],"int32"===r.dtype&&"int32"===o.dtype)return Pu(r,o);var i=yo(r.shape,o.shape);return Pt.runKernelFunc((function(t,e){var n=t.realDivide(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.div(r.toFloat()),o=vo(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=vo(r.shape,i);o.length>0&&(e=e.sum(o).reshape(r.shape));var a=r.square();return e.div(a.toFloat()).neg()}}}),"Div")}}),Lu=Tn({divStrict_:function(t,e){var n=mn(t,"a","div"),r=mn(e,"b","div");return A(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),Pu=Tn({floorDiv_:function(t,e){var n,r=mn(t,"a","floorDiv"),o=mn(e,"b","floorDiv");n=Ct(r,o),r=n[0],o=n[1];var i=yo(r.shape,o.shape);return Pt.runKernelFunc((function(t,e){var n=t.floorDiv(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=t.div(r.toFloat()),o=vo(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},$b:function(){var e=t.mul(n.toFloat()),o=vo(r.shape,i);o.length>0&&(e=e.sum(o).reshape(r.shape));var a=r.square();return e.div(a.toFloat()).neg()}}}))}}),Bu=Tn({maximum_:function(t,e){var n,r=mn(t,"a","maximum"),o=mn(e,"b","maximum");return n=Ct(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),yo(r.shape,o.shape),Pt.runKernelFunc((function(t,e){var n=t.maximum(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return t.mul(n.greaterEqual(r).toFloat())},$b:function(){return t.mul(n.less(r).toFloat())}}}))}}),Fu=Tn({maximumStrict_:function(t,e){var n=mn(t,"a","maximumStrict"),r=mn(e,"b","maximumStrict");return A(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),Uu=Tn({minimum_:function(t,e){var n,r=mn(t,"a","minimum"),o=mn(e,"b","minimum");return n=Ct(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),yo(r.shape,o.shape),Pt.runKernelFunc((function(t,e){var n=t.minimum(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return t.mul(n.lessEqual(r).toFloat())},$b:function(){return t.mul(n.greater(r).toFloat())}}}))}}),qu=Tn({minimumStrict_:function(t,e){var n=mn(t,"a","minimumStrict"),r=mn(e,"b","minimumStrict");return A(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),Gu=Tn({mod_:function(t,e){var n,r=mn(t,"a","mod"),o=mn(e,"b","mod");n=Ct(r,o),r=n[0],o=n[1];var i=yo(r.shape,o.shape);return Pt.runKernelFunc((function(t,e){var n=t.mod(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=vo(n.shape,i);return e.length>0?t.sum(e).reshape(n.shape):t},$b:function(){var e=t.mul(n.div(r).floor().neg()),o=vo(r.shape,i);return o.length>0?e.sum(o).reshape(r.shape):e}}}))}}),Wu=Tn({modStrict_:function(t,e){var n=mn(t,"a","modStrict"),r=mn(e,"b","modStrict");return A(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),zu=Tn({mul_:function(t,e){var n,r=mn(t,"a","mul"),o=mn(e,"b","mul");n=Ct(r,o),r=n[0],o=n[1];var i=yo(r.shape,o.shape);return Pt.runKernelFunc((function(t,e){var n=t.multiply(r,o);return e([r,o]),n}),{a:r,b:o},(function(t,e){var n=e[0],r=e[1];return{a:function(){var e=t.mul(r.toFloat()),o=vo(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},b:function(){var e=t.mul(n.toFloat()),o=vo(r.shape,i);return o.length>0?e.sum(o).reshape(r.shape):e}}}),"Mul")}}),Vu=Tn({mulStrict_:function(t,e){var n=mn(t,"a","mul"),r=mn(e,"b","mul");return A(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),Hu=Tn({pow_:function(t,e){var n=mn(t,"base","pow"),r=mn(e,"exp","pow"),o=yo(n.shape,r.shape);return t=n.cast(Tt(n.dtype,r.dtype)),e=r.cast(Tt(n.dtype,r.dtype)),Pt.runKernelFunc((function(t,e){var o=t.pow(n,r);return e([n,r,o]),o}),{$base:n,$exp:r},(function(t,e){var n=e[0],r=e[1],i=e[2];return{$base:function(){var e=r.toFloat(),i=t.mul(e.mul(n.pow(e.sub(Dn(1))))),a=vo(n.shape,o);return a.length>0&&(i=i.sum(a)),i.reshape(n.shape)},$exp:function(){var e=n.greater(0),a=n.log().where(e,Yn(n)),s=t.mul(i.mul(a)),u=vo(r.shape,o);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}}))}}),Xu=Tn({powStrict_:function(t,e){return A(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),Yu=Tn({squaredDifference_:function(t,e){var n,r=mn(t,"a","squaredDifference"),o=mn(e,"b","squaredDifference");return n=Ct(r,o),r=n[0],o=n[1],yo(r.shape,o.shape),Pt.runKernelFunc((function(t,e){var n=t.squaredDifference(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1],o=Dn(2);return{$a:function(){return t.mul(n.sub(r).mul(o))},$b:function(){return t.mul(r.sub(n).mul(o))}}}))}}),$u=Tn({squaredDifferenceStrict_:function(t,e){var n=mn(t,"a","squaredDifferenceStrict"),r=mn(e,"b","squaredDifferenceStrict");return A(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),ju=Tn({sub_:function(t,e){var n,r=mn(t,"a","sub"),o=mn(e,"b","sub");n=Ct(r,o),r=n[0],o=n[1];var i=yo(r.shape,o.shape);return Pt.runKernelFunc((function(t){return t.subtract(r,o)}),{a:r,b:o},(function(t){return{a:function(){var e=t,n=vo(r.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},b:function(){var e=t,n=vo(o.shape,i);return n.length>0&&(e=e.sum(n)),e.neg().reshape(o.shape)}}}),"Sub")}}),Ku=Tn({subStrict_:function(t,e){var n=mn(t,"a","subStrict"),r=mn(e,"b","subStrict");return A(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}}),Zu=Tn({equal_:function(t,e){var n,r=mn(t,"a","equal"),o=mn(e,"b","equal");return n=Ct(r,o),r=n[0],o=n[1],yo(r.shape,o.shape),Pt.runKernelFunc((function(t){return t.equal(r,o)}),{$a:r,$b:o})}}),Qu=Tn({equalStrict_:function(t,e){var n=mn(t,"a","equalStrict"),r=mn(e,"b","equalStrict");return A(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),Ju=Tn({greater_:function(t,e){var n,r=mn(t,"a","greater"),o=mn(e,"b","greater");return n=Ct(r,o),r=n[0],o=n[1],yo(r.shape,o.shape),Pt.runKernelFunc((function(t){return t.greater(r,o)}),{$a:r,$b:o})}}),tp=Tn({greaterEqual_:function(t,e){var n,r=mn(t,"a","greaterEqual"),o=mn(e,"b","greaterEqual");return n=Ct(r,o),r=n[0],o=n[1],yo(r.shape,o.shape),Pt.runKernelFunc((function(t,e){var n=t.greaterEqual(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return Yn(n)},$b:function(){return Yn(r)}}}))}}),ep=Tn({greaterEqualStrict_:function(t,e){var n=mn(t,"a","greaterEqualStrict"),r=mn(e,"b","greaterEqualStrict");return A(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),np=Tn({greaterStrict_:function(t,e){var n=mn(t,"a","greaterStrict"),r=mn(e,"b","greaterStrict");return A(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),rp=Tn({less_:function(t,e){var n,r=mn(t,"a","less"),o=mn(e,"b","less");return n=Ct(r,o),r=n[0],o=n[1],yo(r.shape,o.shape),Pt.runKernelFunc((function(t){return t.less(r,o)}),{$a:r,$b:o})}}),op=Tn({lessEqual_:function(t,e){var n,r=mn(t,"a","lessEqual"),o=mn(e,"b","lessEqual");return n=Ct(r,o),r=n[0],o=n[1],yo(r.shape,o.shape),Pt.runKernelFunc((function(t){return t.lessEqual(r,o)}),{$a:r,$b:o})}}),ip=Tn({lessEqualStrict_:function(t,e){var n=mn(t,"a","lessEqualStrict"),r=mn(e,"b","lessEqualStrict");return A(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),ap=Tn({lessStrict_:function(t,e){var n=mn(t,"a","lessStrict"),r=mn(e,"b","lessStrict");return A(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),sp=Tn({notEqual_:function(t,e){var n,r=mn(t,"a","notEqual"),o=mn(e,"b","notEqual");return n=Ct(r,o),r=n[0],o=n[1],yo(r.shape,o.shape),Pt.runKernelFunc((function(t){return t.notEqual(r,o)}),{$a:r,$b:o})}}),up=Tn({notEqualStrict_:function(t,e){var n=mn(t,"a","notEqualStrict"),r=mn(e,"b","notEqualStrict");return A(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});function pp(t,e){for(var n=[],r=t;r<e;++r)n.push(r);return n}function cp(t){for(var e=[],n=0;n<t.length;++n)for(var r=0;r<t[n].length;++r)e.push(t[n][r]);return e}var lp=Tn({gather_:function(t,e,n){void 0===n&&(n=0);var r=mn(t,"x","gather"),o=mn(e,"indices","gather","int32");n=L(n,r.shape)[0];var i=function(t,e,n){for(var r=t.shape[n],o=[],i=1,a=1,s=0;s<n;s++)o.push(t.shape[s]),i*=t.shape[s];for(s=0;s<e.rank;s++)o.push(e.shape[s]);for(s=n+1;s<t.rank;s++)o.push(t.shape[s]),a*=t.shape[s];return{batchSize:i,sliceSize:a,dimSize:r,outputShape:o}}(r,o,n);return Pt.runKernelFunc((function(t,e){var i=t.gather(r,o.flatten(),n);return e([o]),i}),{$x:r},(function(t,e){var o=e[0];return{$x:function(){var e=r.shape,i=o.size,a=e.slice(0,n),s=a.length,u=e.slice(n,e.length).slice(1),p=u.length,c=pp(0,s),l=pp(s+1,s+1+p),d=cp([a,[i],u]),f=t.reshape(d),h=o.reshape([i]),m=cp([[s],c,l]),g=f.transpose(m),v=dp(g,h,r.shape[n]),y=wn(m);return v.transpose(y)}}})).reshape(i.outputShape)}}),dp=Tn({unsortedSegmentSum_:function(t,e,n){var r=mn(t,"x","unsortedSegmentSum"),o=mn(e,"segmentIds","unsortedSegmentSum","int32");return w(C(n),(function(){return"numSegments must be of dtype int"})),Pt.runKernelFunc((function(t,e){var i=t.unsortedSegmentSum(r,o,n);return e([o]),i}),{$x:r},(function(t,e){var n=e[0];return{$x:function(){return function(t,e){for(var n=Bu(e,Yn(e)),r=lp(t,n),o=tp(e,Dn(0,"int32")),i=r.rank-o.rank,a=0;a<i;++a)o=_r(o,a+1);o=Au(o,Gn(r.shape,"bool"));var s=Yn(r);return Su(o,r,s)}(t,n)}}}))}}),fp=function(t,e,n){return u(this,void 0,void 0,(function(){var r,o,i,a,s,u,c,l,d,f,h,m,g;return p(this,(function(p){switch(p.label){case 0:for(r=mn(t,"tensor","boolMask"),o=mn(e,"mask","boolMask","bool"),i=null==n?0:n,a=o.rank,s=r.shape,w(a>0,(function(){return"mask cannot be scalar"})),A(s.slice(i,i+a),o.shape,"mask's shape must match the first K dimensions of tensor's shape,"),u=1,c=i;c<i+a;c++)u*=s[c];return l=s.slice(0,i).concat([u],s.slice(i+a)),d=r.reshape(l),f=o.reshape([-1]),[4,Cu(f)];case 1:return h=p.sent(),m=h.squeeze([1]),g=lp(d,m,i),t!==r&&r.dispose(),e!==o&&o.dispose(),m.dispose(),d.dispose(),f.dispose(),h.dispose(),[2,g]}}))}))};function hp(t,e,n,r,o,i,a){void 0===i&&(i="NHWC"),w(t.length===e.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var s=t,u=e,p=!1;3===e.rank&&(p=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),s=[1,t[0],t[1],t[2]]),w(4===s.length,(function(){return"Error in conv2dDerInput: inShape must be length 4, but got length "+s.length+"."})),w(4===u.rank,(function(){return"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank})),w(4===n.rank,(function(){return"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank}));var c="NHWC"===i?s[3]:s[1],l="NHWC"===i?u.shape[3]:u.shape[1];w(c===n.shape[2],(function(){return"Error in conv2dDerInput: depth of input ("+c+") must match input depth for filter "+n.shape[2]+"."})),w(l===n.shape[3],(function(){return"Error in conv2dDerInput: depth of output ("+l+") must match output depth for filter "+n.shape[3]+"."})),null!=a&&w(C(o),(function(){return"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var d=No(i),f=xo(s,n.shape,r,1,o,a,!1,d),h=Pt.runKernelFunc((function(t,e){var r=t.conv2dDerInput(u,n,f);return e([n,u]),r}),{dy4D:u,filter:n},(function(t,e){var n=e[0],s=e[1];return{dy4D:function(){return yp(t,n,r,o,i,1,a)},filter:function(){return bp(t,s,n.shape,r,o,i,a)}}}));return p?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}function mp(t){var e=function(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function gp(t,e,n,r,o){w(t.length===e.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var i=t,a=e,s=!1;4===e.rank&&(s=!0,a=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),i=[1,t[0],t[1],t[2],t[3]]);var u=i[4],p=a.shape[4];w(5===i.length,(function(){return"Error in conv3dDerInput: inShape must be length 5, but got length "+i.length+"."})),w(5===a.rank,(function(){return"Error in conv3dDerInput: dy must be rank 5, but got rank "+a.rank})),w(5===n.rank,(function(){return"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank})),w(u===n.shape[3],(function(){return"Error in conv3dDerInput: depth of input ("+u+") must match input depth for filter "+n.shape[3]+"."})),w(p===n.shape[4],(function(){return"Error in conv3dDerInput: depth of output ("+p+") must match output depth for filter "+n.shape[4]+"."}));var c=Eo(i,n.shape,r,1,o),l=Pt.runKernelFunc((function(t){return t.conv3dDerInput(a,n,c)}),{dy5D:a});return s?l.as4D(l.shape[1],l.shape[2],l.shape[3],l.shape[4]):l}var vp=Tn({conv1d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NWC"),void 0===i&&(i=1);var s=mn(t,"x","conv1d"),u=mn(e,"filter","conv1d"),p=s,c=!1;2===s.rank&&(c=!0,p=s.as3D(1,s.shape[0],s.shape[1])),w(3===p.rank,(function(){return"Error in conv1d: input must be rank 3, but got rank "+p.rank+"."})),w(3===u.rank,(function(){return"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."})),null!=a&&w(C(r),(function(){return"Error in conv1d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."})),w(p.shape[2]===u.shape[1],(function(){return"Error in conv1d: depth of input ("+p.shape[2]+") must match input depth for filter "+u.shape[1]+"."})),w(Co(n,i),(function(){return"Error in conv1D: Either stride or dilation must be 1. Got stride "+n+" and dilation '"+i+"'"})),w("NWC"===o,(function(){return"Error in conv1d: got dataFormat of "+o+" but only NWC is currently supported."}));var l=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),d=p.as4D(p.shape[0],1,p.shape[1],p.shape[2]),f=yp(d,l,[1,n],r,"NHWC",[1,i],a);return c?f.as2D(f.shape[2],f.shape[3]):f.as3D(f.shape[0],f.shape[2],f.shape[3])}}),yp=Tn({conv2d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var s=mn(t,"x","conv2d"),u=mn(e,"filter","conv2d"),p=s,c=!1;3===s.rank&&(c=!0,p=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),w(4===p.rank,(function(){return"Error in conv2d: input must be rank 4, but got rank "+p.rank+"."})),w(4===u.rank,(function(){return"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."})),null!=a&&w(C(r),(function(){return"Error in conv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var l="NHWC"===o?p.shape[3]:p.shape[1];w(l===u.shape[2],(function(){return"Error in conv2d: depth of input ("+l+") must match input depth for filter "+u.shape[2]+"."})),w(Co(n,i),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"}));var d=No(o),f=xo(p.shape,u.shape,n,i,r,a,!1,d),h=Pt.runKernelFunc((function(t,e){var n=t.conv2d(p,u,f);return e([u,p]),n}),{x:p,$filter:u},(function(t,e){var a=e,s=a[0],u=a[1];return w(So(i),(function(){return"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"})),{x:function(){return xp(u.shape,t,s,n,r,o)},$filter:function(){return bp(u,t,s.shape,n,r,o)}}}));return c?h.as3D(h.shape[1],h.shape[2],h.shape[3]):h}}),_p=Tn({conv3d_:function(t,e,n,r,o,i){void 0===o&&(o="NDHWC"),void 0===i&&(i=[1,1,1]);var a=mn(t,"x","conv3d"),s=mn(e,"filter","conv3d"),u=a,p=!1;4===a.rank&&(p=!0,u=a.as5D(1,a.shape[0],a.shape[1],a.shape[2],a.shape[3])),w(5===u.rank,(function(){return"Error in conv3d: input must be rank 5, but got rank "+u.rank+"."})),w(5===s.rank,(function(){return"Error in conv3d: filter must be rank 5, but got rank "+s.rank+"."})),w(u.shape[4]===s.shape[3],(function(){return"Error in conv3d: depth of input ("+u.shape[4]+") must match input depth for filter "+s.shape[3]+"."})),w(function(t,e){return mp(t)||mp(e)}(n,i),(function(){return"Error in conv3D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),w("NDHWC"===o,(function(){return"Error in conv3d: got dataFormat of "+o+" but only NDHWC is currently supported."}));var c=Eo(u.shape,s.shape,n,i,r),l=Pt.runKernelFunc((function(t,e){var n=t.conv3d(u,s,c);return e([u,s]),n}),{x:u,$filter:s},(function(t,e){w(mp(i),(function(){return"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"}));var o=e[0],a=e[1];return{x:function(){return gp(o.shape,t,a,n,r)},$filter:function(){return function(t,e,n,r,o){var i=t;4===t.rank&&(i=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var a=e;4===a.rank&&(a=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3])),w(5===i.rank,(function(){return"Error in conv3dDerFilter: input must be rank 5, but got shape "+i.shape+"."})),w(5===a.rank,(function(){return"Error in conv3dDerFilter: dy must be rank 5, but got shape "+a.shape+"."})),w(5===n.length,(function(){return"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."})),w(i.shape[4]===n[3],(function(){return"Error in conv3dDerFilter: depth of input "+i.shape[4]+") must match input depth in filter ("+n[3]+"."})),w(a.shape[4]===n[4],(function(){return"Error in conv3dDerFilter: depth of dy ("+a.shape[4]+") must match output depth for filter ("+n[4]+")."}));var s=Eo(i.shape,n,r,1,o);return Pt.runKernelFunc((function(t){return t.conv3dDerFilter(i,a,s)}),{x5D:i,dy5D:a})}(o,t,a.shape,n,r)}}}));return p?l.as4D(l.shape[1],l.shape[2],l.shape[3],l.shape[4]):l}}),bp=Tn({conv2dDerFilter_:function(t,e,n,r,o,i,a){void 0===i&&(i="NHWC");var s=t;3===t.rank&&(s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var u=e;3===u.rank&&(u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),w(4===s.rank,(function(){return"Error in conv2dDerFilter: input must be rank 4, but got shape "+s.shape+"."})),w(4===u.rank,(function(){return"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."})),w(4===n.length,(function(){return"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."}));var p="NHWC"===i?s.shape[3]:s.shape[1],c="NHWC"===i?u.shape[3]:u.shape[1];w(p===n[2],(function(){return"Error in conv2dDerFilter: depth of input "+p+") must match input depth in filter ("+n[2]+"."})),w(c===n[3],(function(){return"Error in conv2dDerFilter: depth of dy ("+c+") must match output depth for filter ("+n[3]+")."})),null!=a&&w(C(o),(function(){return"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var l=No(i),d=xo(s.shape,n,r,1,o,a,!1,l);return Pt.runKernelFunc((function(t){return t.conv2dDerFilter(s,u,d)}),{x4D:s,dy4D:u})}}),xp=Tn({conv2dDerInput_:hp}),Ep=Tn({depthwiseConv2d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var s=mn(t,"x","depthwiseConv2d"),u=mn(e,"filter","depthwiseConv2d"),p=s,c=!1;3===s.rank&&(c=!0,p=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),w(4===p.rank,(function(){return"Error in depthwiseConv2d: input must be rank 4, but got rank "+p.rank+"."})),w(4===u.rank,(function(){return"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."})),w(p.shape[3]===u.shape[2],(function(){return"Error in depthwiseConv2d: number of input channels ("+p.shape[3]+") must match the inChannels dimension in filter "+u.shape[2]+"."})),null==i&&(i=[1,1]),w(Co(n,i),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),null!=a&&w(C(r),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var l=xo(p.shape,u.shape,n,i,r,a,!0),d=Pt.runKernelFunc((function(t,e){var n=t.depthwiseConv2D(p,u,l);return e([p,u]),n}),{x:p,$filter:u},(function(t,e){w(So(i),(function(){return"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+i+"'"}));var n=e[0],r=e[1];return{x:function(){return wp(n.shape,t,r,l)},$filter:function(){return Ap(n,t,r.shape,l)}}}));return c?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}}),wp=Tn({depthwiseConv2dDerInput_:function(t,e,n,r){var o=e,i=!1;3===e.rank&&(i=!0,o=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var a=Pt.runKernelFunc((function(t){return t.depthwiseConv2DDerInput(o,n,r)}),{dy4D:o});return i?a.as3D(a.shape[1],a.shape[2],a.shape[3]):a}}),Ap=Tn({depthwiseConv2dDerFilter_:function(t,e,n,r){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var i=e;return 3===i.rank&&(i=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Pt.runKernelFunc((function(t){return t.depthwiseConv2DDerFilter(o,i,r)}),{x4D:o,dy4D:i})}}),Ip=Tn({separableConv2d_:function(t,e,n,r,o,i,a){void 0===i&&(i=[1,1]),void 0===a&&(a="NHWC");var s=mn(t,"x","separableConv2d"),u=mn(e,"depthwiseFilter","separableConv2d"),p=mn(n,"pointwiseFilter","separableConv2d"),c=s,l=!1;if(3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");w(4===c.rank,(function(){return"Error in separableConv2d: input must be rank 4, but got rank "+c.rank+"."})),w(4===u.rank,(function(){return"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+u.rank+"."})),w(4===p.rank,(function(){return"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+u.rank+"."})),w(1===p.shape[0],(function(){return"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+p.shape[0]+"."})),w(1===p.shape[1],(function(){return"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got "+p.shape[1]+"."}));var d=u.shape[2],f=u.shape[3];w(p.shape[2]===d*f,(function(){return"Error in separableConv2d: the third dimension of pointwise filter must be "+d*f+", but got "+p.shape[2]+"."}));var h=Ep(c,u,r,o,a,i),m=yp(h,p,1,"valid",a);return l?m.as3D(m.shape[1],m.shape[2],m.shape[3]):m}}),Rp=Tn({conv2dTranspose_:function(t,e,n,r,o,i){return hp(n,mn(t,"x","conv2dTranspose"),mn(e,"filter","conv2dTranspose"),r,o,"NHWC",i)}}),Tp=Tn({conv3dTranspose_:function(t,e,n,r,o){return gp(n,mn(t,"x","conv3dTranspose"),mn(e,"filter","conv3dTranspose"),r,o)}}),Sp=Tn({matMul_:function(t,e,n,r){var o;void 0===n&&(n=!1),void 0===r&&(r=!1);var i=mn(t,"a","matMul"),a=mn(e,"b","matMul");o=Ct(i,a),i=o[0],a=o[1];var s=n?i.shape[i.rank-2]:i.shape[i.rank-1],u=r?a.shape[a.rank-1]:a.shape[a.rank-2],p=n?i.shape[i.rank-1]:i.shape[i.rank-2],c=r?a.shape[a.rank-2]:a.shape[a.rank-1],l=i.shape.slice(0,-2),d=a.shape.slice(0,-2),f=T(l),h=T(d);w(i.rank>=2&&a.rank>=2&&i.rank===a.rank,(function(){return"Error in matMul: inputs must have the same rank of at least 2, got ranks "+i.rank+" and "+a.rank+"."})),w(S(l,d),(function(){return"Error in matMul: outer dimensions ("+l+") and ("+d+") of Tensors with shapes "+i.shape+" and "+a.shape+" must match."})),w(s===u,(function(){return"Error in matMul: inner shapes ("+s+") and ("+u+") of Tensors with shapes "+i.shape+" and "+a.shape+" and transposeA="+n+" and transposeB="+r+" must match."}));var m=i.shape.slice(0,-2).concat([p,c]),g=n?i.as3D(f,s,p):i.as3D(f,p,s),v=r?a.as3D(h,c,u):a.as3D(h,u,c),y={transposeA:n,transposeB:r};return Pt.runKernelFunc((function(t,e){var o=t.batchMatMul(g,v,n,r);return e([g,v]),o}),{a:g,b:v},(function(t,e){var o=e,i=o[0],a=o[1];return n||r?!n&&r?{a:function(){return t.matMul(a,!1,!1)},b:function(){return t.matMul(i,!0,!1)}}:n&&!r?{a:function(){return a.matMul(t,!1,!0)},b:function(){return i.matMul(t,!1,!1)}}:{a:function(){return a.matMul(t,!0,!0)},b:function(){return t.matMul(i,!0,!0)}}:{a:function(){return t.matMul(a,!1,!0)},b:function(){return i.matMul(t,!0,!1)}}}),"BatchMatMul",y).reshape(m)}}),Cp=Tn({dot_:function(t,e){var n=mn(t,"t1","dot"),r=mn(e,"t2","dot");w(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(function(){return"Error in dot: inputs must all be rank 1 or 2, but got ranks "+n.rank+" and "+r.rank+"."}));var o=1===n.rank?n.size:n.shape[1],i=1===r.rank?r.size:r.shape[0];return w(o===i,(function(){return"Error in dot: inner dimensions of inputs must match, but got "+o+" and "+i+"."})),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),Np=Tn({outerProduct_:function(t,e){var n=mn(t,"v1","outerProduct"),r=mn(e,"v2","outerProduct");return w(1===n.rank&&1===r.rank,(function(){return"Error in outerProduct: inputs must be rank 1, but got ranks "+n.rank+" and "+r.rank+"."})),n.as2D(-1,1).matMul(r.as2D(1,-1))}}),kp=Tn({reverse_:function(t,e){var n=mn(t,"x","reverse");if(0===n.rank)return n.clone();var r=L(e,n.shape);return Pt.runKernelFunc((function(t){return t.reverse(n,r)}),{$x:n},(function(t){return{$x:function(){return t.reverse(r)}}})).reshapeAs(n)}}),Op=Tn({reverse1d_:function(t){var e=mn(t,"x","reverse");return w(1===e.rank,(function(){return"Error in reverse1D: x must be rank 1 but got rank "+e.rank+"."})),kp(e,0)}}),Dp=Tn({reverse2d_:function(t,e){var n=mn(t,"x","reverse");return w(2===n.rank,(function(){return"Error in reverse2D: x must be rank 2 but got rank "+n.rank+"."})),kp(n,e)}}),Mp=Tn({reverse3d_:function(t,e){var n=mn(t,"x","reverse");return w(3===n.rank,(function(){return"Error in reverse3D: x must be rank 3 but got rank "+n.rank+"."})),kp(n,e)}}),Lp=Tn({reverse4d_:function(t,e){var n=mn(t,"x","reverse");return w(4===n.rank,(function(){return"Error in reverse4D: x must be rank 4 but got rank "+n.rank+"."})),kp(n,e)}});function Pp(t,e,n,r,o,i){var a=mn(t,"x","maxPool"),s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),null==r&&(r=[1,1]),w(4===s.rank,(function(){return"Error in maxPool: input must be rank 4 but got rank "+s.rank+"."})),w(Co(n,r),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"})),null!=i&&w(C(o),(function(){return"Error in maxPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var p=_o(s.shape,e,n,r,o,i),c=Pt.runKernelFunc((function(t,e){var n=t.maxPool(s,p);return e([s,n]),n}),{x:s},(function(t,i){var a=i[0],s=i[1];return{x:function(){return function(t,e,n,r,o,i,a,s){var u=mn(t,"dy","maxPoolBackprop"),p=mn(e,"input","maxPoolBackprop"),c=mn(n,"output","maxPoolBackprop");w(p.rank===u.rank,(function(){return"Rank of input ("+p.rank+") does not match rank of dy ("+u.rank+")"})),null==i&&(i=[1,1]),w(Co(o,i),(function(){return"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),w(4===u.rank,(function(){return"Error in maxPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."})),w(4===p.rank,(function(){return"Error in maxPoolBackprop: input must be rank 4 but got rank "+p.rank+"."}));var l=_o(p.shape,r,o,i,a,s);return Pt.runKernelFunc((function(t){return t.maxPoolBackprop(u,p,c,l)}),{$dy:u,$input:p})}(t,a,s,e,n,r,o)}}}));return u?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}function Bp(t,e,n,r,o,i){var a=mn(t,"x","avgPool","float32");null==r&&(r=[1,1]),w(Co(n,r),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"}));var s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),w(4===s.rank,(function(){return"Error in avgPool: x must be rank 4 but got rank "+s.rank+"."})),null!=i&&w(C(o),(function(){return"Error in avgPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var p=_o(s.shape,e,n,r,o,i),c=Pt.runKernelFunc((function(t){return t.avgPool(s,p)}),{x:s},(function(t){return{x:function(){return function(t,e,n,r,o,i){var a=mn(t,"dy","avgPoolBackprop"),s=mn(e,"input","avgPoolBackprop");w(s.rank===a.rank,(function(){return"Rank of input ("+s.rank+") does not match rank of dy ("+a.rank+")"})),null==o&&(o=[1,1]),w(Co(r,o),(function(){return"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"}));var u=s,p=a,c=!1;3===s.rank&&(c=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),p=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),w(4===p.rank,(function(){return"Error in avgPoolBackprop: dy must be rank 4 but got rank "+p.rank+"."})),w(4===u.rank,(function(){return"Error in avgPoolBackprop: input must be rank 4 but got rank "+u.rank+"."}));var l=_o(u.shape,n,r,o,i),d=Pt.runKernelFunc((function(t){return t.avgPoolBackprop(p,u,l)}),{dy4D:p,input4D:u});return c?d.as3D(d.shape[1],d.shape[2],d.shape[3]):d}(t,s,e,n,r,o)}}}));return c=c.cast(a.dtype),u?c.as3D(c.shape[1],c.shape[2],c.shape[3]):c}var Fp=Tn({maxPool_:function(t,e,n,r,o){return Pp(t,e,n,1,r,o)}}),Up=Tn({avgPool_:function(t,e,n,r,o){return Bp(t,e,n,1,r,o)}}),qp=Tn({pool_:function(t,e,n,r,o,i){null==o&&(o=[1,1]),null==i&&(i=1),0===r&&(r="valid");var a=mn(t,"x","maxPool"),s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),w(Co(i,o),(function(){return"Error in pool: Either strides or dilations must be 1. Got strides "+i+" and dilations '"+o+"'"}));var p,c=_o(s.shape,e,i,o,r),l=[c.dilationHeight,c.dilationWidth];p="same"===r?function(t,e){var n=t.map((function(t,n){return t+(t-1)*(e[n]-1)})).map((function(t){return t-1})),r=n.map((function(t){return Math.floor(t/2)})),o=n.map((function(t,e){return t-r[e]}));return n.map((function(t,e){return[r[e],o[e]]}))}([c.filterHeight,c.filterWidth],l):[[0,0],[0,0]];var d=1===l[0]&&1===l[1],f=function(t,e,n){var r=n.map((function(t){return t[0]})),o=n.map((function(t){return t[1]})),i=t.concat(r,o),a=e.map((function(t,e){return(t-i[e]%t)%t})),s=o.map((function(t,e){return t+a[e]}));return[e.map((function(t,e){return[r[e],s[e]]})),e.map((function(t,e){return[0,a[e]]}))]}([c.inHeight,c.inWidth],l,p),h=f[0],m=f[1],g=d?r:"valid",v=d?s:Dr(s,l,h),y=("avg"===n?function(){return Bp(v,e,i,1,g)}:function(){return Pp(v,e,i,1,g)})(),_=d?y:hr(y,l,m);return u?_.as3D(_.shape[1],_.shape[2],_.shape[3]):_}}),Gp=Tn({maxPool3d_:function(t,e,n,r,o,i,a){void 0===i&&(i="NDHWC");var s=mn(t,"x","maxPool3d"),u=s,p=!1;4===s.rank&&(p=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==a&&(a=[1,1,1]),w(5===u.rank,(function(){return"Error in maxPool3d: x must be rank 5 but got rank "+u.rank+"."})),w("NDHWC"===i,(function(){return"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),w(Co(n,a),(function(){return"Error in maxPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&w(C(r),(function(){return"Error in maxPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var c=bo(u.shape,e,n,a,r,o,i),l=Pt.runKernelFunc((function(t,e){var n=t.maxPool3d(u,c);return e([u,n]),n}),{x:u},(function(t,i){var s=i[0],u=i[1];return{x:function(){return function(t,e,n,r,o,i,a,s){var u=mn(t,"dy","maxPool3dBackprop"),p=mn(e,"input","maxPool3dBackprop"),c=mn(n,"output","maxPool3dBackprop"),l=u,d=p,f=c,h=!1;4===p.rank&&(h=!0,l=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),d=p.as5D(1,p.shape[0],p.shape[1],p.shape[2],p.shape[3]),f=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3])),w(5===l.rank,(function(){return"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+l.rank+"."})),w(5===d.rank,(function(){return"Error in maxPool3dBackprop: input must be rank 5 but got rank "+d.rank+"."})),w(5===f.rank,(function(){return"Error in maxPool3dBackprop: output must be rank 5 but got rank "+f.rank+"."})),null==i&&(i=[1,1,1]),w(Co(o,i),(function(){return"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),null!=s&&w(C(a),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+a+"."}));var m=bo(d.shape,r,o,i,a,s),g=Pt.runKernelFunc((function(t){return t.maxPool3dBackprop(l,d,f,m)}),{dy5D:l,input5D:d});return h?g.as4D(g.shape[1],g.shape[2],g.shape[3],g.shape[4]):g}(t,s,u,e,n,a,r,o)}}}));return p?l.as4D(l.shape[1],l.shape[2],l.shape[3],l.shape[4]):l}}),Wp=Tn({avgPool3d_:function(t,e,n,r,o,i,a){void 0===i&&(i="NDHWC");var s=mn(t,"x","avgPool3d","float32"),u=s,p=!1;4===s.rank&&(p=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==a&&(a=[1,1,1]),w(5===u.rank,(function(){return"Error in avgPool3d: x must be rank 5 but got rank "+u.rank+"."})),w("NDHWC"===i,(function(){return"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),w(Co(n,a),(function(){return"Error in avgPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&w(C(r),(function(){return"Error in avgPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var c=bo(u.shape,e,n,a,r,o,i),l=Pt.runKernelFunc((function(t){return t.avgPool3d(u,c)}),{x:u},(function(t){return{x:function(){return function(t,e,n,r,o,i,a){var s=mn(t,"dy","avgPool3dBackprop"),u=mn(e,"input","avgPool3dBackprop"),p=s,c=u,l=!1;4===u.rank&&(l=!0,p=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),c=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3])),w(5===p.rank,(function(){return"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+p.rank+"."})),w(5===c.rank,(function(){return"Error in avgPool3dBackprop: input must be rank 5 but got rank "+c.rank+"."})),null==o&&(o=[1,1,1]),w(Co(r,o),(function(){return"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"})),null!=a&&w(C(i),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+"."}));var d=bo(c.shape,n,r,o,i,a),f=Pt.runKernelFunc((function(t){return t.avgPool3dBackprop(p,c,d)}),{dy5D:p,input5D:c});return l?f.as4D(f.shape[1],f.shape[2],f.shape[3],f.shape[4]):f}(t,u,e,n,a,r,o)}}}));return l=l.cast(u.dtype),p?l.as4D(l.shape[1],l.shape[2],l.shape[3],l.shape[4]):l}}),zp=Tn({slice_:function(t,e,n){var r,o,i=mn(t,"x","slice");if(0===i.rank)throw new Error("Slicing scalar is not possible");(r="number"==typeof e?[e].concat(new Array(i.rank-1).fill(0)):e.length<i.rank?e.concat(new Array(i.rank-e.length).fill(0)):e.slice()).forEach((function(t){w(-1!==t,(function(){return"slice() does not support negative begin indexing."}))})),o=(o=null==n?new Array(i.rank).fill(-1):"number"==typeof n?[n].concat(new Array(i.rank-1).fill(-1)):n.length<i.rank?n.concat(new Array(i.rank-n.length).fill(-1)):n).map((function(t,e){return t>=0?t:(w(-1===t,(function(){return"Negative size values should be exactly -1 but got "+t+" for the slice() size at index "+e+"."})),i.shape[e]-r[e])})),jr(i,r,o);var a=i.shape,s={begin:r,size:o};return Pt.runKernelFunc((function(t){return t.slice(i,r,o)}),{x:i},(function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],a[n]-r[n]-o[n]]);return{x:function(){return t.pad(e)}}}),"Slice",s)}}),Vp=Tn({slice1d_:function(t,e,n){var r=mn(t,"x","slice1d");return w(1===r.rank,(function(){return"slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"})),zp(r,[e],[n])}}),Hp=Tn({slice2d_:function(t,e,n){var r=mn(t,"x","slice2d");return w(2===r.rank,(function(){return"slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"})),zp(r,e,n)}}),Xp=Tn({slice3d_:function(t,e,n){var r=mn(t,"x","slice3d");return w(3===r.rank,(function(){return"slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"})),zp(r,e,n)}}),Yp=Tn({slice4d_:function(t,e,n){var r=mn(t,"x","slice4d");return w(4===r.rank,(function(){return"slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"})),zp(r,e,n)}});function $p(t,e,n,r,o){return e.rank<n.rank&&(e=e.reshape(bn(e.shape,r))),t.rank<n.rank&&(t=t.reshape(bn(t.shape,r))),{$x:function(){var r=t.mul(n.equal(e).cast(t.dtype));return null==o?r:r.transpose(o)}}}var jp=Tn({all_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=mn(t,"x","all","bool"),o=L(e,r.shape),i=o,a=En(i,r.rank);null!=a&&(r=r.transpose(a),i=An(i.length,r.rank));var s=Pt.runKernelFunc((function(t){return t.all(r,i)}),{$x:r});if(n){var u=bn(s.shape,o);return s.reshape(u)}return s}}),Kp=Tn({any_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=mn(t,"x","any","bool"),o=L(e,r.shape),i=o,a=En(i,r.rank);null!=a&&(r=r.transpose(a),i=An(i.length,r.rank));var s=Pt.runKernelFunc((function(t){return t.any(r,i)}),{$x:r});if(n){var u=bn(s.shape,o);return s.reshape(u)}return s}}),Zp=Tn({argMax_:function(t,e){void 0===e&&(e=0);var n=mn(t,"x","argMax");null==e&&(e=0);var r=L(e,n.shape),o=En(r,n.rank);return null!=o&&(n=n.transpose(o),r=An(r.length,n.rank)),Pt.runKernelFunc((function(t,e){var o=t.argMax(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return Yn(n)}}}))}}),Qp=Tn({argMin_:function(t,e){void 0===e&&(e=0);var n=mn(t,"x","argMin");null==e&&(e=0);var r=L(e,n.shape),o=En(r,n.rank);return null!=o&&(n=n.transpose(o),r=An(r.length,n.rank)),Pt.runKernelFunc((function(t,e){var o=t.argMin(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return Yn(n)}}}))}}),Jp=Tn({logSumExp_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=mn(t,"x","logSumExp"),o=L(e,r.shape),i=r.max(o,!0),a=r.sub(i).exp().sum(o).log(),s=i.reshape(a.shape).add(a);if(n){var u=bn(s.shape,o);return s.reshape(u)}return s}}),tc=Tn({max_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=mn(t,"x","max"),o=r,i=L(e,r.shape),a=i,s=En(a,r.rank);null!=s&&(r=r.transpose(s),a=An(a.length,r.rank));var u=Pt.runKernelFunc((function(t,e){var n=t.max(r,a);return e([o,n]),n}),{$x:r},(function(t,e){return $p(t,e[1],e[0],i,s)}));if(n){var p=bn(u.shape,i);u=u.reshape(p)}return u}}),ec=Tn({mean_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=mn(t,"x","mean"),o=L(e,r.shape),i=T(_n(r.shape,o)[1]);return uo((function(t){var r=Dn(i);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(Gn(t.shape,"float32")).div(i)}}}))(r)}}),nc=Tn({min_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=mn(t,"x","min"),o=r,i=L(e,r.shape),a=i,s=En(a,r.rank);null!=s&&(r=r.transpose(s),a=An(a.length,r.rank));var u=Pt.runKernelFunc((function(t,e){var n=t.min(r,a);return e([o,n]),n}),{$x:r},(function(t,e){return $p(t,e[1],e[0],i,s)}));if(n){var p=bn(u.shape,i);u=u.reshape(p)}return u}}),rc=Tn({moments_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=L(e,(t=mn(t,"x","moments")).shape),o=t.mean(r,n),i=o.shape;n||(i=bn(o.shape,r));var a=t.toFloat().sub(o.reshape(i)).square();return{mean:o,variance:a.mean(r,n)}}}),oc=Tn({sum_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=mn(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());var o=L(e,r.shape);return uo((function(t){var e=En(o,t.rank),r=o,i=t;null!=e&&(i=t.transpose(e),r=An(r.length,t.rank));var a=Pt.runKernelFunc((function(t){return t.sum(i,r)}),{permutedX:i});if(n){var s=bn(a.shape,o);a=a.reshape(s)}return{value:a,gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(Gn(t.shape,"float32"))}}}))(r)}}),ic=Tn({prod_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=mn(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());var o=L(e,r.shape),i=En(o,r.rank),a=o,s=r;null!=i&&(s=r.transpose(i),a=An(a.length,r.rank));var u=Pt.runKernelFunc((function(t){return t.prod(s,a)}),{permutedX:s});if(n){var p=bn(u.shape,o);u=u.reshape(p)}return u}}),ac=Tn({elu_:function(t){var e=mn(t,"x","elu");return Pt.runKernelFunc((function(t,n){var r=t.elu(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Pt.runKernelFunc((function(e){return e.eluDer(t,n)}),{dy:t,y:n})}}}))}}),sc=Tn({leakyRelu_:function(t,e){void 0===e&&(e=.2);var n=mn(t,"x","leakyRelu");return Bu(Dn(e).mul(n),n)}}),uc=Tn({prelu_:function(t,e){var n=mn(t,"x","prelu"),r=mn(e,"alpha","prelu");return Pt.runKernelFunc((function(t,e){var o=t.prelu(n,r);return e([n,r]),o}),{x:n,alpha:r},(function(t,e){var n=e[0],r=e[1],o=n.greater(0);return{x:function(){return Su(o,t,t.mul(r))},alpha:function(){var e=Su(o,Yn(t),t.mul(n)),i=vo(r.shape,t.shape);return i.length>0&&(e=e.sum(i)),e.reshape(r.shape)}}}),"Prelu")}}),pc=Tn({relu_:function(t){var e=mn(t,"x","relu");return"bool"===e.dtype?e.toInt():Pt.runKernelFunc((function(t,n){var r=t.relu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mulStrict(n.step().toFloat())}}}))}}),cc=Tn({relu6_:function(t){var e=mn(t,"x","relu6");return"bool"===e.dtype?e.toInt():Pt.runKernelFunc((function(t,n){var r=t.relu6(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0],r=n.lessEqual(6).mul(n.step());return{$x:function(){return t.mulStrict(r.toFloat())}}}))}}),lc=Tn({selu_:function(t){var e=mn(t,"x","selu");return Pt.runKernelFunc((function(t,n){var r=t.selu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){var e=n.greater(Dn(0)),r=Dn(os),o=Dn(is),i=t.mul(o),a=t.mul(r).mul(n.toFloat().exp());return Su(e,i,a)}}}))}}),dc=Tn({transpose_:function(t,e){var n=mn(t,"x","transpose");return null==e&&(e=n.shape.map((function(t,e){return e})).reverse()),w(n.rank===e.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of perm "+e+"."})),e.forEach((function(t){w(t>=0&&t<n.rank,(function(){return"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e}))})),n.rank<=1?n.clone():Pt.runKernelFunc((function(t){return t.transpose(n,e)}),{$x:n},(function(t){var n=wn(e);return{$x:function(){return t.transpose(n)}}}))}}),fc=Tn({localResponseNormalization_:function(t,e,n,r,o){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===o&&(o=.5);var i=mn(t,"x","localResponseNormalization");w(4===i.rank||3===i.rank,(function(){return"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+i.rank+"."})),w(C(e),(function(){return"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius "+e+"."}));var a=i,s=!1;3===i.rank&&(s=!0,a=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));var u=Pt.runKernelFunc((function(t,i){var s=t.localResponseNormalization4D(a,e,n,r,o);return i([a,s]),s}),{x4D:a},(function(t,i){var a=i[0],s=i[1];return{x4D:function(){return Pt.runKernelFunc((function(i){return i.LRNGrad(t,a,s,e,n,r,o)}),{})}}}));return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),hc=Tn({norm_:function(t,e,n,r){void 0===e&&(e="euclidean"),void 0===n&&(n=null),void 0===r&&(r=!1);var o=function t(e,n,r){if(void 0===r&&(r=null),0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(Dn(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=mn(t,"x","norm"),e,n),i=o.shape;if(r){var a=L(n,t.shape);i=bn(o.shape,a)}return o.reshape(i)}}),mc=Tn({basicLSTMCell_:function(t,e,n,r,o,i){var a=mn(t,"forgetBias","basicLSTMCell"),s=mn(e,"lstmKernel","basicLSTMCell"),u=mn(n,"lstmBias","basicLSTMCell"),p=mn(r,"data","basicLSTMCell"),c=mn(o,"c","basicLSTMCell"),l=mn(i,"h","basicLSTMCell"),d=p.concat(l,1).matMul(s).add(u),f=d.shape[0],h=d.shape[1]/4,m=[f,h],g=d.slice([0,0],m),v=d.slice([0,h],m),y=d.slice([0,2*h],m),_=d.slice([0,3*h],m),b=g.sigmoid().mulStrict(v.tanh()).addStrict(c.mulStrict(a.add(y).sigmoid())),x=b.tanh().mulStrict(_.sigmoid());return[b,x]}}),gc=Tn({multiRNNCell_:function(t,e,n,r){for(var o=mn(e,"data","multiRNNCell"),i=gn(n,"c","multiRNNCell"),a=gn(r,"h","multiRNNCell"),s=o,u=[],p=0;p<t.length;p++){var c=t[p](s,i[p],a[p]);u.push(c[0]),u.push(c[1]),s=c[1]}var l=[],d=[];for(p=0;p<u.length;p+=2)l.push(u[p]),d.push(u[p+1]);return[l,d]}}),vc=Tn({movingAverage_:function(t,e,n,r,o){void 0===o&&(o=!0);var i=mn(t,"v","movingAverage"),a=mn(e,"x","movingAverage"),s=mn(n,"decay","movingAverage");Nt(i,a),w(S(i.shape,a.shape),(function(){return"Shape mismatch in v and x"}));var u=Dn(1),p=u.sub(s),c=a.sub(i).mul(p);if(o){w(null!=r,(function(){return"When using zeroDebias: true, step is required."}));var l=mn(r,"step","movingAverage");c=c.div(u.sub(Hu(s,l)))}return i.add(c)}}),yc=Tn({stridedSlice_:function(t,e,n,r,o,i,a,s,u){if(void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===s&&(s=0),void 0===u&&(u=0),null==r&&(r=new Array(e.length)),0!==a)throw new Error("ellipsis mask is not yet supported");var p=mn(t,"x","stridedSlice"),c=Kr(s),l=p.shape.slice();c.forEach((function(t){e[t]=0,n[t]=1,l.splice(t,0,1)})),p=p.reshape(l);for(var d=0;d<p.rank;d++)e[d]=Qr(o,e,r,p.shape,d),n[d]=Jr(i,n,r,p.shape,d),r[d]=r[d]||1;var f=Kr(u);f.forEach((function(t){n[t]=e[t]+1,r[t]=1}));var h=Zr(e,n,r),m=h.filter((function(t,e){return-1===f.indexOf(e)}));return r.every((function(t){return 1===t}))?zp(p,e,h).reshape(m):Pt.runKernelFunc((function(t){return t.stridedSlice(p,e,n,r)}),{$x:p}).reshape(m)}}),_c=Tn({topk_:function(t,e,n){void 0===e&&(e=1),void 0===n&&(n=!0);var r=mn(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var o=r.shape[r.shape.length-1];if(e>o)throw new Error("'k' passed to topk() must be <= the last dimension ("+o+") but got "+e);var i=Pt.runKernelFunc((function(t){return t.topk(r,e,n)}),{$x:r});return{values:i[0],indices:i[1]}}}),bc=Tn({scatterND_:function(t,e,n){var r=mn(t,"indices","scatterND","int32"),o=mn(e,"updates","scatterND");return function(t,e,n){if(e.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}!function(t,e,n){var r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,i="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+", indices.shape: "+e.shape+", shape: "+t+", sliceDim: "+r+", and batchDim: "+o+".";if(n.rank<o)throw new Error(i+" update.rank < "+o+". ");if(t.length<r+(n.rank-o))throw new Error(i+" Output shape length < "+(r+(n.rank-o)));if(n.rank!==o+t.length-r)throw new Error(i+" update.rank != "+(o+t.length-r));for(var a=0;a<o;++a)if(n.shape[a]!==e.shape[a])throw new Error(i+" updates.shape["+a+"] ("+n.shape[a]+") != indices.shape["+a+"] ("+e.shape[a]+").");for(a=0;a<n.rank-o;++a)if(n.shape[a+o]!==t[a+r])throw new Error(i+" updates.shape["+(a+o)+"] ("+n.shape[a+o]+") != shape["+(a+o)+"] ("+t[a+o]+")")}(n,e,t)}(o,r,n),Pt.runKernelFunc((function(t){return t.scatterND(r,o,n)}),{$indices:r,$updates:o})}}),xc=Tn({fft_:function(t){w("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.fft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Pt.runKernelFunc((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),Ec=Tn({ifft_:function(t){w("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.ifft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Pt.runKernelFunc((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),wc=Tn({rfft_:function(t,e){w("float32"===t.dtype,(function(){return"The dtype for rfft() must be real value but got "+t.dtype}));var n,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=e&&e<r){var i=t.shape.map((function(t){return 0})),a=t.shape.map((function(t){return t}));a[t.shape.length-1]=e,n=t.slice(i,a),r=e}else if(null!=e&&e>r){var s=t.shape.map((function(t){return t}));s[t.shape.length-1]=e-r,n=t.concat(Wn(s),t.shape.length-1),r=e}else n=t;var u=n.zerosLike(),p=Sn(n,u).as2D(o,r),c=xc(p),l=Math.floor(r/2)+1,d=Cn(c),f=Nn(c),h=d.split([l,r-l],d.shape.length-1),m=f.split([l,r-l],f.shape.length-1),g=n.shape.slice();return g[n.shape.length-1]=l,Sn(h[0],m[0]).reshape(g)}}),Ac=Tn({irfft_:function(t){var e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){var r=t.as2D(n,e),o=Ec(r);return Cn(o)}var i=[n,2*(e-1)],a=Cn(t).as2D(n,e),s=Nn(t).as2D(n,e),u=a.slice([0,1],[n,e-2]).reverse(1),p=s.slice([0,1],[n,e-2]).reverse(1).mul(Dn(-1)),c=a.concat(u,1),l=s.concat(p,1);return r=Sn(c,l).as2D(i[0],i[1]),o=Ec(r),Cn(o)}}),Ic=Object.freeze({fft:xc,ifft:Ec,rfft:wc,irfft:Ac}),Rc=Tn({sparseToDense_:function(t,e,n,r){void 0===r&&(r=0);var o=mn(t,"sparseIndices","sparseToDense","int32"),i=mn(e,"sparseValues","sparseToDense"),a=mn(r,"defaultValue","sparseToDense",i.dtype);return function(t,e,n,r){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+t.shape+".");var o=t.rank>0?t.shape[0]:1,i=t.rank>1?t.shape[1]:1;if(n.length!==i)throw new Error("outputShape has incorrect number of elements:, "+n.length+", should be: "+i+".");var a=e.size;if(0!==e.rank&&(1!==e.rank||a!==o))throw new Error("sparseValues has incorrect shape "+e.shape+", should be [] or ["+o+"]");if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,i,n,a),Pt.runKernelFunc((function(t){return t.sparseToDense(o,i,n,a)}),{$sparseIndices:o,$sparseValues:i,$defaultValue:a})}}),Tc=Tn({gatherND_:function(t,e){var n=mn(e,"indices","gatherND","int32"),r=mn(t,"x","gatherND");return Pt.runKernelFunc((function(t){return t.gatherND(r,n)}),{$x:r,$indices:n})}}),Sc=Tn({diag_:function(t){var e=mn(t,"x","diag").flatten(),n=t.shape.concat(t.shape);return Pt.runKernelFunc((function(t){return t.diag(e)}),{$x:e}).reshape(n)}}),Cc=Tn({dropout_:function(t,e,n,r){var o=mn(t,"x","dropout");if(w("float32"===o.dtype,(function(){return"x has to be a floating point tensor since it's going to be scaled, but got a "+o.dtype+" tensor instead."})),w(e>=0&&e<1,(function(){return"rate must be a float in the range [0, 1), but got "+e+"."})),0===e)return t instanceof _t?o.clone():o;var i=function(t,e){if(null==e)return t.shape.slice();if(S(t.shape,e))return e;if(t.shape.length===e.length){for(var n=[],r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(o,n),a=1-e,s=kr(i,0,1,"float32",r).add(a).floor().div(a);return o.mul(s)}});function Nc(t,e,n){for(var r=1-t%2,o=new Float32Array(t),i=0;i<t;++i){var a=2*Math.PI*i/(t+r-1);o[i]=e-n*Math.cos(a)}return Mn(o,"float32")}var kc,Oc=Tn({hannWindow_:function(t){return Nc(t,.5,.5)}}),Dc=Tn({hammingWindow_:function(t){return Nc(t,.54,.46)}}),Mc=Tn({frame_:function(t,e,n,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var i=0,a=[];i+e<=t.size;)a.push(zp(t,i,e)),i+=n;if(r)for(;i<t.size;){var s=i+e-t.size,u=$n([zp(t,i,e-s),zn([s],o)]);a.push(u),i+=n}return 0===a.length?Ln([],[0,e]):$n(a).as2D(a.length,e)}}),Lc=Tn({stft_:function(t,e,n,r,o){var i;void 0===o&&(o=Oc),null==r&&(i=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(i)/Math.log(2)))));for(var a=Mc(t,e,n),s=zu(a,o(e)),u=[],p=0;p<a.shape[0];p++)u.push(wc(s.slice([p,0],[1,e]),r));return $n(u)}}),Pc=Object.freeze({hannWindow:Oc,hammingWindow:Dc,frame:Mc,stft:Lc}),Bc=function(t,e,n){return void 0===n&&(n=1),u(this,void 0,void 0,(function(){var r,o,i,a,s,u,c,l,d,f,h,m,g,v;return p(this,(function(p){switch(p.label){case 0:return r=mn(t,"predictions","inTopK"),o=mn(e,"targets","inTopK"),w(r.rank>1,(function(){return"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank})),w(r.rank-1===o.rank,(function(){return"predictions rank should be 1 larger than targets rank, but got predictions rank "+r.rank+" and targets rank "+o.rank})),A(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),i=r.shape[r.shape.length-1],w(n>0&&n<=i,(function(){return"'k' passed to inTopK() must be > 0 && <= the predictions last dimension ("+i+"), but got "+n})),[4,r.data()];case 1:return a=p.sent(),[4,o.data()];case 2:for(s=p.sent(),u=[a.length/i,i],l=u[1],d=B("bool",c=u[0]),f=0;f<c;f++){for(h=f*l,m=a.subarray(h,h+l),g=[],v=0;v<m.length;v++)g.push({value:m[v],index:v});for(g.sort((function(t,e){return e.value-t.value})),d[f]=0,v=0;v<n;v++)if(g[v].index===s[f]){d[f]=1;break}}return t!==r&&r.dispose(),e!==o&&o.dispose(),[2,kn(d,o.shape,"bool")]}}))}))};!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(kc||(kc={}));var Fc=Tn({absoluteDifference_:function(t,e,n,r){void 0===r&&(r=kc.SUM_BY_NONZERO_WEIGHTS);var o=mn(t,"labels","absoluteDifference"),i=mn(e,"predictions","absoluteDifference"),a=null;null!=n&&(a=mn(n,"weights","absoluteDifference")),A(o.shape,i.shape,"Error in absoluteDifference: ");var s=o.sub(i).abs();return Uc(s,a,r)}}),Uc=Tn({computeWeightedLoss_:function(t,e,n){void 0===n&&(n=kc.SUM_BY_NONZERO_WEIGHTS);var r=mn(t,"losses","computeWeightedLoss"),o=null;null!=e&&(o=mn(e,"weights","computeWeightedLoss"));var i=null==o?r:r.mul(o);if(n===kc.NONE)return i;if(n===kc.SUM)return i.sum();if(n===kc.MEAN){if(null==o)return i.mean();var a=r.size/o.size,s=i.sum().div(o.sum());return a>1?s.div(Dn(a)):s}if(n===kc.SUM_BY_NONZERO_WEIGHTS){if(null==o)return i.sum().div(Dn(r.size));var u=o.mul(Gn(r.shape)).notEqual(Dn(0)).sum().toFloat();return i.sum().div(u)}throw Error("Unknown reduction: "+n)}}),qc=Tn({cosineDistance_:function(t,e,n,r,o){void 0===o&&(o=kc.SUM_BY_NONZERO_WEIGHTS);var i=mn(t,"labels","cosineDistance"),a=mn(e,"predictions","cosineDistance"),s=null;null!=r&&(s=mn(r,"weights","cosineDistance")),A(i.shape,a.shape,"Error in cosineDistance: ");var u=Dn(1).sub(i.mul(a).sum(n,!0));return Uc(u,s,o)}}),Gc=Tn({hingeLoss_:function(t,e,n,r){void 0===r&&(r=kc.SUM_BY_NONZERO_WEIGHTS);var o=mn(t,"labels","hingeLoss"),i=mn(e,"predictions","hingeLoss"),a=null;null!=n&&(a=mn(n,"weights","hingeLoss")),A(o.shape,i.shape,"Error in hingeLoss: ");var s=Dn(1);o=Dn(2).mul(o).sub(s);var u=s.sub(o.mul(i)).relu();return Uc(u,a,r)}}),Wc=Tn({huberLoss_:function(t,e,n,r,o){void 0===r&&(r=1),void 0===o&&(o=kc.SUM_BY_NONZERO_WEIGHTS);var i=mn(t,"labels","huberLoss"),a=mn(e,"predictions","huberLoss"),s=null;null!=n&&(s=mn(n,"weights","huberLoss")),A(i.shape,a.shape,"Error in huberLoss: ");var u=Dn(r),p=a.sub(i).abs(),c=Uu(p,u),l=p.sub(c),d=Dn(.5).mul(c.square()).add(u.mul(l));return Uc(d,s,o)}}),zc=Tn({logLoss_:function(t,e,n,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=kc.SUM_BY_NONZERO_WEIGHTS);var i=mn(t,"labels","logLoss"),a=mn(e,"predictions","logLoss"),s=null;null!=n&&(s=mn(n,"weights","logLoss")),A(i.shape,a.shape,"Error in logLoss: ");var u=Dn(1),p=Dn(r),c=i.mul(a.add(p).log()).neg().sub(u.sub(i).mul(u.sub(a).add(p).log()));return Uc(c,s,o)}}),Vc=Tn({meanSquaredError_:function(t,e,n,r){void 0===r&&(r=kc.SUM_BY_NONZERO_WEIGHTS);var o=mn(t,"labels","meanSquaredError"),i=mn(e,"predictions","meanSquaredError"),a=null;null!=n&&(a=mn(n,"weights","meanSquaredError")),A(o.shape,i.shape,"Error in meanSquaredError: ");var s=o.squaredDifference(i);return Uc(s,a,r)}}),Hc=Tn({sigmoidCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=kc.SUM_BY_NONZERO_WEIGHTS);var i=mn(t,"multiClassLabels","sigmoidCrossEntropy"),a=mn(e,"logits","sigmoidCrossEntropy"),s=null;if(null!=n&&(s=mn(n,"weights","sigmoidCrossEntropy")),A(i.shape,a.shape,"Error in sigmoidCrossEntropy: "),r>0){var u=Dn(r),p=Dn(1),c=Dn(.5);i=i.mul(p.sub(u)).add(c.mul(u))}var l=function(t,e){var n=mn(t,"labels","sigmoidCrossEntropyWithLogits"),r=mn(e,"logits","sigmoidCrossEntropyWithLogits");A(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var o=r.relu(),i=r.mul(n),a=r.abs().neg().exp().log1p();return o.sub(i).add(a)}(i,a);return Uc(l,s,o)}}),Xc=Tn({softmaxCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=kc.SUM_BY_NONZERO_WEIGHTS);var i=mn(t,"onehotLabels","softmaxCrossEntropy"),a=mn(e,"logits","softmaxCrossEntropy"),s=null;if(null!=n&&(s=mn(n,"weights","softmaxCrossEntropy")),A(i.shape,a.shape,"Error in softmaxCrossEntropy: "),r>0){var u=Dn(r),p=Dn(1),c=Dn(i.shape[1]);i=i.mul(p.sub(u)).add(u.div(c))}var l=function(t,e,n){if(void 0===n&&(n=-1),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+e.rank+" and dim was "+n);return uo((function(t,e,r){var o=e.logSumExp([n],!0),i=e.toFloat().sub(o);return r([t,i]),{value:i.mul(t).neg().sum([n]),gradFunc:function(t,e){var r=e[0],o=e[1],i=bn(t.shape,[n]);return[t.reshape(i).mul(r.toFloat().sub(o.exp())),t.reshape(i).mul(o.exp().sub(r.toFloat()))]}}}))(t,e)}(i,a);return Uc(l,s,o)}}),Yc=Object.freeze({get Reduction(){return kc},absoluteDifference:Fc,computeWeightedLoss:Uc,cosineDistance:qc,hingeLoss:Gc,huberLoss:Wc,logLoss:zc,meanSquaredError:Vc,sigmoidCrossEntropy:Hc,softmaxCrossEntropy:Xc});function $c(t,e){return void 0===e&&(e=!1),Pt.tidy((function(){if(2!==t.shape.length)throw new Error("qr2d() requires a 2D Tensor, but got a "+t.shape.length+"D Tensor.");for(var n=t.shape[0],r=t.shape[1],o=br(n),i=t.clone(),a=Ln([[1]],[1,1]),s=a.clone(),u=n>=r?r:n,p=function(t){var e,u=i,p=s,c=o;e=Pt.tidy((function(){var e=i.slice([t,t],[n-t,1]),u=e.norm(),p=i.slice([t,t],[1,1]),c=Ln([[-1]]).where(p.greater(0),Ln([[1]])),l=p.sub(c.mul(u)),d=e.div(l);s=1===d.shape[0]?a.clone():a.concat(d.slice([1,0],[d.shape[0]-1,d.shape[1]]),0);var f=c.matMul(l).div(u).neg(),h=i.slice([t,0],[n-t,r]),m=f.mul(s);if(0===t)i=h.sub(m.matMul(s.transpose().matMul(h)));else{var g=h.sub(m.matMul(s.transpose().matMul(h)));i=i.slice([0,0],[t,r]).concat(g,0)}var v=o.slice([0,t],[n,o.shape[1]-t]);if(0===t)o=v.sub(v.matMul(s).matMul(m.transpose()));else{var y=v.sub(v.matMul(s).matMul(m.transpose()));o=o.slice([0,0],[n,t]).concat(y,1)}return[s,i,o]})),s=e[0],i=e[1],o=e[2],Je([u,p,c])},c=0;c<u;++c)p(c);return!e&&n>r&&(o=o.slice([0,0],[n,r]),i=i.slice([0,0],[r,r])),[o,i]}))}var jc=Tn({gramSchmidt_:function(t){var e;if(Array.isArray(t)){e=!1,w(null!=t&&t.length>0,(function(){return"Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var n=t[0].shape[0],r=function(e){w(t[e].shape[0]===n,(function(){return"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[e].shape[0]+" vs. "+n+")"}))},o=1;o<t.length;++o)r(o)}else e=!0,t=Jn(t,t.shape[0],0).map((function(t){return Mr(t,[0])}));w(t.length<=t[0].shape[0],(function(){return"Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+")."}));var i=[],a=t,s=function(t){i.push(Pt.tidy((function(){var e=a[t];if(t>0)for(var n=0;n<t;++n){var r=oc(i[n].mulStrict(e)).mul(i[n]);e=e.sub(r)}return e.div(hc(e,"euclidean"))})))};for(o=0;o<t.length;++o)s(o);return e?Lr(i,0):i}}),Kc=Tn({qr_:function(t,e){if(void 0===e&&(e=!1),t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return $c(t,e);var n=t.shape.slice(0,t.shape.length-2).reduce((function(t,e){return t*e})),r=Fr(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],i=[];return r.forEach((function(t){var n=$c(t,e),r=n[0],a=n[1];o.push(r),i.push(a)})),[Lr(o,0).reshape(t.shape),Lr(i,0).reshape(t.shape)]}}),Zc=Object.freeze({gramSchmidt:jc,qr:Kc});function Qc(t,e,n,r,o){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY);var i=t.shape[0];return n=Math.min(n,i),w(0<=r&&r<=1,(function(){return"iouThreshold must be in [0, 1], but was '"+r+"'"})),w(2===t.rank,(function(){return"boxes must be a 2D tensor, but was of rank '"+t.rank+"'"})),w(4===t.shape[1],(function(){return"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]})),w(1===e.rank,(function(){return"scores must be a 1D tensor"})),w(e.shape[0]===i,(function(){return"scores has incompatible shape with boxes. Expected "+i+", but was "+e.shape[0]})),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o}}var Jc=Tn({resizeBilinear_:function(t,e,n){void 0===n&&(n=!1);var r=mn(t,"images","resizeBilinear");w(3===r.rank||4===r.rank,(function(){return"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."})),w(2===e.length,(function(){return"Error in resizeBilinear: new shape must 2D, but got shape "+e+"."}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=e[0],s=e[1],u=Pt.runKernelFunc((function(t,e){return e([o]),t.resizeBilinear(o,a,s,n)}),{batchImages:o},(function(t,e){return{batchImages:function(){return Pt.runKernelFunc((function(r){return r.resizeBilinearBackprop(t,e[0],n)}),{})}}}));return i?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),tl=Tn({resizeNearestNeighbor_:function(t,e,n){void 0===n&&(n=!1);var r=mn(t,"images","resizeNearestNeighbor");w(3===r.rank||4===r.rank,(function(){return"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."})),w(2===e.length,(function(){return"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."})),w("float32"===r.dtype||"int32"===r.dtype,(function(){return"`images` must have `int32` or `float32` as dtype"}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=e[0],s=e[1],u=Pt.runKernelFunc((function(t,e){return e([o]),t.resizeNearestNeighbor(o,a,s,n)}),{batchImages:o},(function(t,e){return{batchImages:function(){return Pt.runKernelFunc((function(r){return r.resizeNearestNeighborBackprop(t,e[0],n)}),{})}}}));return i?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),el=Tn({nonMaxSuppression_:function(t,e,n,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var i=mn(t,"boxes","nonMaxSuppression"),a=mn(e,"scores","nonMaxSuppression"),s=Qc(i,a,n,r,o);return n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold,Pt.runKernelFunc((function(t){return t.nonMaxSuppression(i,a,n,r,o)}),{$boxes:i})}}),nl=Tn({cropAndResize_:function(t,e,n,r,o,i){var a=mn(t,"image","cropAndResize","float32"),s=mn(e,"boxes","cropAndResize","float32"),u=mn(n,"boxInd","cropAndResize","int32");o=o||"bilinear",i=i||0;var p=s.shape[0];return w(4===a.rank,(function(){return"Error in cropAndResize: image must be rank 4,but got rank "+a.rank+"."})),w(2===s.rank&&4===s.shape[1],(function(){return"Error in cropAndResize: boxes must be have size ["+p+",4] but had shape "+s.shape+"."})),w(1===u.rank&&u.shape[0]===p,(function(){return"Error in cropAndResize: boxInd must be have size ["+p+"] but had shape "+s.shape+"."})),w(2===r.length,(function(){return"Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."})),w(r[0]>=1&&r[1]>=1,(function(){return"cropSize must be atleast [1,1], but was "+r})),w("bilinear"===o||"nearest"===o,(function(){return"method must be bilinear or nearest, but was "+o})),Pt.runKernelFunc((function(t,e){return t.cropAndResize(a,s,u,r,o,i)}),{$image:a,$boxes:s})}}),rl=Object.freeze({resizeBilinear:Jc,resizeNearestNeighbor:tl,nonMaxSuppression:el,nonMaxSuppressionAsync:function(t,e,n,r,o){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),u(this,void 0,void 0,(function(){var i,a,s,u,c,l,d;return p(this,(function(p){switch(p.label){case 0:return i=mn(t,"boxes","nonMaxSuppressionAsync"),a=mn(e,"scores","nonMaxSuppressionAsync"),s=Qc(i,a,n,r,o),n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold,[4,Promise.all([i.data(),a.data()])];case 1:return u=p.sent(),c=u[0],l=u[1],d=Uo(c,l,n,r,o),i!==t&&i.dispose(),a!==e&&a.dispose(),[2,d]}}))}))},cropAndResize:nl}),ol=function(t,e){return!(t>0||"linear"!==e&&"relu"!==e)},il=function(t,e,n){if(null==n||"linear"===n)return t;if("relu"===n)return t.mul(e.step());throw new Error("Gradient for activation "+n+" has not been implemented yet.")},al=function(t,e){var n=e,r=vo(t.shape,e.shape);return r.length>0&&(n=n.sum(r)),n.reshape(t.shape)},sl=function(t,e,n){if("linear"===e)return t;if("relu"===e)return pc(t);if("elu"===e)return ac(t);if("relu6"===e)return cc(t);if("prelu"===e)return uc(t,n);throw new Error("Unknown fused activation "+e+".")},ul=Tn({matMul_:function(t){var e,n=t.a,r=t.b,o=t.transposeA,i=void 0!==o&&o,a=t.transposeB,s=void 0!==a&&a,u=t.bias,p=t.activation,c=void 0===p?"linear":p,l=t.preluActivationWeights;if(!1===ol(Pt.state.gradientDepth,c)){var d=Sp(n,r,i,s);return null!=u&&(d=Nu(d,u)),sl(d,c,l)}var f=mn(n,"a","fused matMul"),h=mn(r,"b","fused matMul");e=Ct(f,h),f=e[0],h=e[1];var m=i?f.shape[f.rank-2]:f.shape[f.rank-1],g=s?h.shape[h.rank-1]:h.shape[h.rank-2],v=i?f.shape[f.rank-1]:f.shape[f.rank-2],y=s?h.shape[h.rank-2]:h.shape[h.rank-1],_=f.shape.slice(0,-2),b=h.shape.slice(0,-2),x=T(_),E=T(b);w(f.rank>=2&&h.rank>=2&&f.rank===h.rank,(function(){return"Error in fused matMul: inputs must have the same rank of at least 2, got ranks "+f.rank+" and "+h.rank+"."})),w(S(_,b),(function(){return"Error in fused matMul: outer dimensions ("+_+") and ("+b+") of Tensors with shapes "+f.shape+" and "+h.shape+" must match."})),w(m===g,(function(){return"Error in fused matMul: inner shapes ("+m+") and ("+g+") of Tensors with shapes "+f.shape+" and "+h.shape+" and transposeA="+i+" and transposeB="+s+" must match."}));var A,I,R=f.shape.slice(0,-2).concat([v,y]),C=i?f.as3D(x,m,v):f.as3D(x,v,m),N=s?h.as3D(E,y,g):h.as3D(E,g,y);null!=u&&yo(R,(A=Ct(A=mn(u,"bias","fused matMul"),f)[0]).shape),null!=l&&(I=mn(l,"prelu weights","fused matMul"));var k={$a:C,$b:N};return null!=u&&(k.$bias=A),null!=l&&(k.$preluActivationWeights=I),Pt.runKernelFunc((function(t,e){var n=t.fusedBatchMatMul({a:C,b:N,transposeA:i,transposeB:s,bias:A,activation:c,preluActivationWeights:I});return e([C,N,n]),n}),k,(function(t,e){var n=e[0],r=e[1],o=e[2],a=il(t,o,c),p={};return null!=u&&(p={$bias:function(){return al(A,a)}}),i||s?!i&&s?Object.assign({$a:function(){return a.matMul(r,!1,!1)},$b:function(){return a.matMul(n,!0,!1)}},p):i&&!s?Object.assign({$a:function(){return r.matMul(a,!1,!0)},$b:function(){return n.matMul(a,!1,!1)}},p):Object.assign({$a:function(){return r.matMul(a,!0,!0)},$b:function(){return a.matMul(n,!0,!0)}},p):Object.assign({$a:function(){return a.matMul(r,!1,!0)},$b:function(){return n.matMul(a,!0,!1)}},p)})).reshape(R)}}),pl=Tn({conv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,i=t.dataFormat,a=void 0===i?"NHWC":i,s=t.dilations,u=void 0===s?[1,1]:s,p=t.dimRoundingMode,c=t.bias,l=t.activation,d=void 0===l?"linear":l,f=t.preluActivationWeights;if(d=d||"linear",!1===ol(Pt.state.gradientDepth,d)){var h=yp(e,n,r,o,a,u,p);return null!=c&&(h=Nu(h,c)),sl(h,d,f)}var m=mn(e,"x","conv2d"),g=mn(n,"filter","conv2d"),v=m,y=!1;3===m.rank&&(y=!0,v=m.as4D(1,m.shape[0],m.shape[1],m.shape[2])),w(4===v.rank,(function(){return"Error in fused conv2d: input must be rank 4, but got rank "+v.rank+"."})),w(4===g.rank,(function(){return"Error in fused conv2d: filter must be rank 4, but got rank "+g.rank+"."})),null!=p&&w(C(o),(function(){return"Error in fused conv2d: pad must be an integer when using, dimRoundingMode "+p+" but got pad "+o+"."})),w(v.shape[3]===g.shape[2],(function(){return"Error in conv2d: depth of input ("+v.shape[3]+") must match input depth for filter "+g.shape[2]+"."})),w(Co(r,u),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),w("NHWC"===a,(function(){return"Error in conv2d: got dataFormat of "+a+" but only NHWC is currently supported."}));var _,b,x=xo(v.shape,g.shape,r,u,o,p);null!=c&&(_=Ct(_=mn(c,"bias","fused conv2d"),m)[0],yo(x.outShape,_.shape)),null!=f&&(b=mn(f,"prelu weights","fused conv2d"));var E={x:v,$filter:g};null!=c&&(E.$bias=_),null!=f&&(E.$preluActivationWeights=b);var A=Pt.runKernelFunc((function(t,e){var n=t.fusedConv2d({input:v,filter:g,convInfo:x,bias:_,activation:d,preluActivationWeights:b});return e([g,v,n]),n}),E,(function(t,e){var n=e,i=n[0],a=n[1],s=n[2],p=il(t,s,d);w(So(u),(function(){return"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+u+"'"}));var l={};return null!=c&&(l={$bias:function(){return al(_,p)}}),Object.assign({x:function(){return xp(a.shape,p,i,r,o)},$filter:function(){return bp(a,p,i.shape,r,o)}},l)}));return y?A.as3D(A.shape[1],A.shape[2],A.shape[3]):A}}),cl=Tn({depthwiseConv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,i=t.dataFormat,a=void 0===i?"NHWC":i,s=t.dilations,u=void 0===s?[1,1]:s,p=t.dimRoundingMode,c=t.bias,l=t.activation,d=void 0===l?"linear":l,f=t.preluActivationWeights;if(!1===ol(Pt.state.gradientDepth,d)){var h=Ep(e,n,r,o,a,u,p);return null!=c&&(h=Nu(h,c)),sl(h,d,f)}var m=mn(e,"x","depthwiseConv2d"),g=mn(n,"filter","depthwiseConv2d"),v=m,y=!1;3===m.rank&&(y=!0,v=m.as4D(1,m.shape[0],m.shape[1],m.shape[2])),w(4===v.rank,(function(){return"Error in fused depthwiseConv2d: input must be rank 4, but got rank "+v.rank+"."})),w(4===g.rank,(function(){return"Error in fused depthwiseConv2d: filter must be rank 4, but got rank "+g.rank+"."})),w(v.shape[3]===g.shape[2],(function(){return"Error in fused depthwiseConv2d: number of input channels ("+v.shape[3]+") must match the inChannels dimension in filter "+g.shape[2]+"."})),null==u&&(u=[1,1]),w(Co(r,u),(function(){return"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),null!=p&&w(C(o),(function(){return"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode "+p+" but got pad "+o+"."}));var _,b,x=xo(v.shape,g.shape,r,u,o,p,!0);null!=c&&(_=Ct(_=mn(c,"bias","fused conv2d"),m)[0],yo(x.outShape,_.shape)),null!=f&&(b=mn(f,"prelu weights","fused depthwiseConv2d"));var E={x:v,$filter:g};null!=c&&(E.$bias=_),null!=f&&(E.$preluActivationWeights=b);var A=Pt.runKernelFunc((function(t,e){var n=t.fusedDepthwiseConv2D({input:v,filter:g,convInfo:x,bias:_,activation:d,preluActivationWeights:b});return e([v,g,n]),n}),E,(function(t,e){w(So(u),(function(){return"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+u+"'"}));var n=e[0],r=e[1],o=e[2],i=il(t,o,d),a={};return null!=c&&(a={$bias:function(){return al(_,i)}}),Object.assign({x:function(){return wp(n.shape,i,r,x)},$filter:function(){return Ap(n,i,r.shape,x)}},a)}));return y?A.as3D(A.shape[1],A.shape[2],A.shape[3]):A}}),ll=Object.freeze({matMul:ul,conv2d:pl,depthwiseConv2d:cl}),dl=Object.freeze({image:rl,linalg:Zc,losses:Yc,spectral:Ic,fused:ll,signal:Pc,square:Cs,conv1d:vp,conv2d:yp,conv3d:_p,depthwiseConv2d:Ep,separableConv2d:Ip,conv2dTranspose:Rp,conv3dTranspose:Tp,op:Tn,batchNormalization2d:gu,batchNormalization3d:vu,batchNormalization4d:yu,batchNormalization:_u,batchNorm:bu,batchNorm2d:xu,batchNorm3d:Eu,batchNorm4d:wu,booleanMaskAsync:fp,complex:Sn,real:Cn,imag:Nn,concat:$n,concat1d:jn,concat2d:Kn,concat3d:Zn,concat4d:Qn,split:Jn,matMul:Sp,dot:Cp,outerProduct:Np,reverse:kp,reverse1d:Op,reverse2d:Dp,reverse3d:Mp,reverse4d:Lp,maxPool:Fp,avgPool:Up,pool:qp,maxPool3d:Gp,avgPool3d:Wp,slice:zp,slice1d:Vp,slice2d:Hp,slice3d:Xp,slice4d:Yp,abs:Ns,acos:ks,acosh:Os,asin:Ds,asinh:Ms,atan:Ls,atanh:Ps,ceil:Bs,clipByValue:Fs,cos:Us,cosh:qs,erf:Gs,exp:Ws,expm1:zs,floor:Vs,log:Hs,log1p:Xs,logSigmoid:Ys,neg:$s,reciprocal:js,round:Ks,rsqrt:Zs,sigmoid:Qs,sign:Js,isNaN:tu,isInf:eu,isFinite:nu,sin:ru,sinh:ou,softplus:iu,sqrt:au,step:su,tan:uu,tanh:pu,all:jp,any:Kp,argMax:Zp,argMin:Qp,logSumExp:Jp,max:tc,mean:ec,min:nc,moments:rc,sum:oc,prod:ic,equal:Zu,equalStrict:Qu,greater:Ju,greaterEqual:tp,greaterEqualStrict:ep,greaterStrict:np,less:rp,lessEqual:op,lessEqualStrict:ip,lessStrict:ap,notEqual:sp,notEqualStrict:up,add:Nu,addN:ku,addStrict:Ou,atan2:Du,div:Mu,divStrict:Lu,floorDiv:Pu,maximum:Bu,maximumStrict:Fu,minimum:Uu,minimumStrict:qu,mod:Gu,modStrict:Wu,mul:zu,mulStrict:Vu,pow:Hu,powStrict:Xu,squaredDifference:Yu,squaredDifferenceStrict:$u,sub:ju,subStrict:Ku,elu:ac,leakyRelu:sc,prelu:uc,relu:pc,relu6:cc,selu:lc,logicalAnd:Au,logicalNot:Iu,logicalOr:Ru,logicalXor:Tu,where:Su,whereAsync:Cu,buffer:dr,print:fr,batchToSpaceND:hr,cast:mr,clone:gr,cumsum:vr,depthToSpace:yr,expandDims:_r,eye:br,multinomial:xr,oneHot:Er,pad:wr,pad1d:Ar,pad2d:Ir,pad3d:Rr,pad4d:Tr,rand:Sr,randomNormal:Cr,randomGamma:Nr,randomUniform:kr,reshape:Or,spaceToBatchND:Dr,squeeze:Mr,stack:Lr,tile:Pr,truncatedNormal:Br,unstack:Fr,setdiff1dAsync:Ur,fill:zn,linspace:Vn,ones:Gn,range:Hn,scalar:Dn,tensor:kn,tensor1d:Mn,tensor2d:Ln,tensor3d:Pn,tensor4d:Bn,tensor5d:Fn,tensor6d:Un,variable:qn,zeros:Wn,onesLike:Xn,zerosLike:Yn,transpose:dc,softmax:co,logSoftmax:lo,localResponseNormalization:fc,norm:hc,gather:lp,unsortedSegmentSum:dp,basicLSTMCell:mc,multiRNNCell:gc,movingAverage:vc,stridedSlice:yc,topk:_c,scatterND:bc,fft:xc,ifft:Ec,rfft:wc,irfft:Ac,sparseToDense:Rc,gatherND:Tc,diag:Sc,dropout:Cc,hannWindow:Oc,hammingWindow:Dc,frame:Mc,stft:Lc,inTopKAsync:Bc});function fl(t,e){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&w("complex64"!==t.dtype,(function(){return e+" does not support complex64 tensors."}))}))}function hl(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("relu6"===n)return t.relu6(e);if("prelu"===n)return t.prelu(e,r);throw new Error("Activation "+n+" has not been implemented for the CPU backend.")}var ml=function(t){function e(){var e=t.call(this)||this;if(e.blockSize=48,e.firstUse=!0,l().get("IS_BROWSER")){var n="undefined"!=typeof OffscreenCanvas?new OffscreenCanvas(300,150):"undefined"!=typeof document?document.createElement("canvas"):null;null!==n&&(e.fromPixels2DContext=n.getContext("2d"))}return e.data=new fo(e,Pt),e}return s(e,t),e.prototype.write=function(t,e,n){this.firstUse&&(this.firstUse=!1,l().get("IS_NODE")&&dn("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n"));var r={};return this.data.set(r,{values:t,dtype:n}),r},e.prototype.move=function(t,e,n,r){this.data.set(t,{values:e,dtype:r})},e.prototype.numDataIds=function(){return this.data.numDataIds()},e.prototype.fromPixels=function(t,e){if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var n,r,o=t.data instanceof Uint8Array,i="undefined"!=typeof ImageData&&t instanceof ImageData,a="undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement,s="undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement,u=a?[t.videoWidth,t.videoHeight]:[t.width,t.height],p=u[0],c=u[1];if(l().get("IS_NODE")&&null==t.getContext)throw new Error("When running in node, pixels must be an HTMLCanvasElement like the one returned by the `canvas` npm package");if(null!=t.getContext)n=t.getContext("2d").getImageData(0,0,p,c).data;else if(i||o)n=t.data;else{if(!s&&!a)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);if(null==this.fromPixels2DContext)throw new Error("Can't read pixels from HTMLImageElement outside the browser.");this.fromPixels2DContext.canvas.width=p,this.fromPixels2DContext.canvas.height=c,this.fromPixels2DContext.drawImage(t,0,0,p,c),n=this.fromPixels2DContext.getImageData(0,0,p,c).data}if(4===e)r=new Int32Array(n);else{var d=p*c;r=new Int32Array(d*e);for(var f=0;f<d;f++)for(var h=0;h<e;++h)r[f*e+h]=n[4*f+h]}return Pn(r,[c,p,e],"int32")},e.prototype.read=function(t){return u(this,void 0,void 0,(function(){return p(this,(function(e){return[2,this.readSync(t)]}))}))},e.prototype.readSync=function(t){var e=this.data.get(t),n=e.dtype,r=e.complexTensors;return"complex64"===n?Lo(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},e.prototype.bufferSync=function(t){var e=this.readSync(t.dataId),n=e;if("string"===t.dtype)try{n=e.map((function(t){return it(t)}))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return dr(t.shape,t.dtype,n)},e.prototype.makeOutput=function(t,e,n){var r=this.write(t,e,n);return Pt.makeTensorFromDataId(r,e,n,this)},e.prototype.disposeData=function(t){if(this.data.has(t)){var e=this.data.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}},e.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e;return p(this,(function(n){return e=nt(),t(),[2,{kernelMs:nt()-e}]}))}))},e.prototype.memory=function(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}},e.prototype.complex=function(t,e){var n=this.makeOutput(null,t.shape,"complex64");return this.data.get(n.dataId).complexTensors={real:Pt.keep(t.clone()),imag:Pt.keep(e.clone())},n},e.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},e.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},e.prototype.slice=function(t,e,n){if(fl(t,"slice"),to(t.shape,e,n)){var r=eo(e,t.strides),o=T(n);return kn(this.readSync(t.dataId).subarray(r,r+o),n,t.dtype)}for(var i=dr(n,t.dtype),a=this.bufferSync(t),s=0;s<i.size;++s){var u=i.indexToLoc(s).map((function(t,n){return t+e[n]}));i.values[s]=a.get.apply(a,u)}return i.toTensor()},e.prototype.stridedSlice=function(t,e,n,r){fl(t,"stridedSlice");var o=Zr(e,n,r);if(o.some((function(t){return 0===t})))return kn([],o);for(var i=dr(o,t.dtype),a=this.bufferSync(t),s=0;s<i.size;s++){for(var u=i.indexToLoc(s),p=new Array(u.length),c=0;c<p.length;c++)p[c]=u[c]*r[c]+e[c];i.set.apply(i,[a.get.apply(a,p)].concat(u))}return i.toTensor()},e.prototype.diag=function(t){for(var e=this.readSync(t.dataId),n=dr([t.size,t.size],t.dtype),r=n.values,o=0;o<e.length;o++)r[o*t.size+o]=e[o];return n.toTensor()},e.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==e&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(i=0;i<u.length;i++)a[e]=i,u[i]=this.slice(t,a,s).reshape(r);return u},e.prototype.reverse=function(t,e){fl(t,"reverse");for(var n=dr(t.shape,t.dtype),r=this.bufferSync(t),o=function(o){var i=n.indexToLoc(o),a=i.slice();e.forEach((function(e){return a[e]=t.shape[e]-1-a[e]})),n.set.apply(n,[r.get.apply(r,a)].concat(i))},i=0;i<n.size;i++)o(i);return n.toTensor()},e.prototype.concat=function(t,e){var n=this;if("complex64"===t[0].dtype){var r=t.map((function(t){return Cn(t)})),o=t.map((function(t){return Nn(t)}));return Sn(this.concat(r,e),this.concat(o,e))}var i=t.map((function(t){var n=T(t.shape.slice(e));return t.as2D(-1,n)})),a=Rn(i.map((function(t){return t.shape})),1),s=dr(a,t[0].dtype).values;if(1===i[0].shape[0]){var u=0;i.forEach((function(t){s.set(n.readSync(t.dataId),u),u+=t.size}))}else{var p=0;i.forEach((function(t){for(var e=n.readSync(t.dataId),r=0,o=0;o<t.shape[0];++o)for(var i=o*a[1]+p,u=0;u<t.shape[1];++u)s[i+u]=e[r++];p+=t.shape[1]}))}var c=Rn(t.map((function(t){return t.shape})),e);return kn(s,c,t[0].dtype)},e.prototype.neg=function(t){return fl(t,"neg"),this.multiply(Dn(-1),t)},e.prototype.add=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t+n,imag:e+r}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t+e}))},e.prototype.addN=function(t){var e=this;fl(t,"addN");for(var n=t.map((function(t){return e.readSync(t.dataId)})),r=dr(t[0].shape,t[0].dtype),o=r.values,i=0;i<t.length;i++)for(var a=n[i],s=0;s<o.length;s++)o[s]+=a[s];return r.toTensor()},e.prototype.subtract=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t-n,imag:e-r}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t-e}))},e.prototype.pow=function(t,e){return fl([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.pow(t,e)}))},e.prototype.batchMatMul=function(t,e,n,r){fl([t,e],"matMul");for(var o=n?t.shape[1]:t.shape[2],i=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],s=t.shape[0],u=this.readSync(t.dataId),p=this.readSync(e.dataId),c=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],l=c[0],d=c[1],f=c[2],h=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],m=h[0],g=h[1],v=h[2],y=i*a,_=dr([s,i,a],t.dtype),b=_.values,x=this.blockSize,E=0;E<s;E++)for(var w=0;w<i;w+=x)for(var A=0;A<a;A+=x)for(var I=0;I<o;I+=x)for(var R=Math.min(w+x,i),T=Math.min(A+x,a),S=Math.min(I+x,o),C=w;C<R;C++)for(var N=A;N<T;N++){for(var k=0,O=I;O<S;O++)k+=u[E*l+C*d+O*f]*p[O*m+N*g+E*v];b[E*y+(C*a+N)]+=k}return _.toTensor()},e.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=this.batchMatMul(e,n,r,o);return i&&(u=this.add(u,i)),a&&(u=hl(this,u,a,s)),u},e.prototype.multiply=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t*n-e*r,imag:t*r+e*n}})):this.broadcastedBinaryOp(t,e,Tt(t.dtype,e.dtype),(function(t,e){return t*e}))},e.prototype.realDivide=function(t,e){return fl([t,e],"realDivide"),this.broadcastedBinaryOp(t,e,"float32",(function(t,e){return t/e}))},e.prototype.floorDiv=function(t,e){return fl([t,e],"floorDiv"),this.broadcastedBinaryOp(t,e,"int32",(function(t,e){return Math.floor(t/e)}))},e.prototype.sum=function(t,e){fl(t,"sum"),xn("sum",e,t.rank);for(var n=_n(t.shape,e),r=n[0],o=n[1],i=Wn(r,Tt(t.dtype,"int32")),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),p=0;p<s.length;++p){for(var c=p*a,l=0,d=0;d<a;++d)l+=u[c+d];s[p]=l}return i},e.prototype.prod=function(t,e){fl(t,"sum");for(var n=_n(t.shape,e),r=n[0],o=n[1],i=Wn(r,Tt(t.dtype,"int32")),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),p=0;p<s.length;++p){for(var c=p*a,l=1,d=0;d<a;++d)l*=u[c+d];s[p]=l}return i},e.prototype.unsortedSegmentSum=function(t,e,n){fl(t,"unsortedSegmentSum");for(var r=[],o=t.rank-e.rank,i=0;i<o;++i)e=e.expandDims(i+1);for(i=0;i<n;++i){var a=Dn(i,"int32"),s=Zu(a,e).asType("float32").mul(t).sum(0);r.push(s)}return Lr(r)},e.prototype.argMin=function(t,e){fl(t,"argMin");var n=[e];xn("argMin",n,t.rank);for(var r=_n(t.shape,n),o=r[0],i=r[1],a=Wn(o,"int32"),s=T(i),u=this.readSync(a.dataId),p=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*s,d=p[l],f=0,h=0;h<s;++h){var m=p[l+h];m<d&&(d=m,f=h)}u[c]=f}return a},e.prototype.argMax=function(t,e){fl(t,"argMax");var n=[e];xn("argMax",n,t.rank);for(var r=_n(t.shape,n),o=r[0],i=r[1],a=Wn(o,"int32"),s=T(i),u=this.readSync(a.dataId),p=this.readSync(t.dataId),c=0;c<u.length;++c){for(var l=c*s,d=p[l],f=0,h=0;h<s;++h){var m=p[l+h];m>d&&(d=m,f=h)}u[c]=f}return a},e.prototype.cumsum=function(t,e,n,r){if(fl(t,"cumsum"),e!==t.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis="+(t.rank-1)+" but got axis="+e);for(var o=Tt(t.dtype,"int32"),i=Wn(t.shape,o),a=this.readSync(i.dataId),s=this.readSync(t.dataId),u=t.shape[t.rank-1],p=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},c=0;c<s.length;c+=u)for(var l=0;l<u;l++){var d=p(c,l);if(0===l)a[d]=n?0:s[d];else{var f=p(c,l-1);a[d]=n?s[f]+a[f]:s[d]+a[f]}}return i},e.prototype.equal=function(t,e){return fl([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t===e?1:0}))},e.prototype.notEqual=function(t,e){return fl([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t!==e?1:0}))},e.prototype.less=function(t,e){return fl([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<e?1:0}))},e.prototype.lessEqual=function(t,e){return fl([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<=e?1:0}))},e.prototype.greater=function(t,e){return fl([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>e?1:0}))},e.prototype.greaterEqual=function(t,e){return fl([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>=e?1:0}))},e.prototype.logicalNot=function(t){fl(t,"logicalNot");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return this.makeOutput(n,t.shape,"bool")},e.prototype.logicalAnd=function(t,e){return fl([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t&&e}))},e.prototype.logicalOr=function(t,e){return fl([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t||e}))},e.prototype.select=function(t,e,n){fl([t,e,n],"select");for(var r=this.readSync(t.dataId),o=this.readSync(e.dataId),i=this.readSync(n.dataId),a=Wn(e.shape,Tt(e.dtype,n.dtype)),s=this.readSync(a.dataId),u=0,p=0===t.rank||t.rank>1||1===e.rank?1:T(e.shape.slice(1)),c=0;c<r.length;c++)for(var l=0;l<p;l++)1===r[c]?s[u++]=o[c]:s[u++]=i[c];return a},e.prototype.where=function(t){fl([t],"where");var e=this.readSync(t.dataId);return Vo(t.shape,e)},e.prototype.topk=function(t,e,n){return fl(t,"topk"),zo(this.readSync(t.dataId),t.shape,t.dtype,e)},e.prototype.min=function(t,e){fl(t,"min"),xn("min",e,t.rank);for(var n=_n(t.shape,e),r=n[0],o=n[1],i=Wn(r,t.dtype),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),p=0;p<s.length;++p){for(var c=p*a,l=u[c],d=0;d<a;++d){var f=u[c+d];f<l&&(l=f)}s[p]=l}return i},e.prototype.minimum=function(t,e){return fl([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.min(t,e)}))},e.prototype.mod=function(t,e){return fl([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))},e.prototype.max=function(t,e){fl(t,"max"),xn("max",e,t.rank);for(var n=_n(t.shape,e),r=n[0],o=n[1],i=Wn(r,t.dtype),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),p=0;p<s.length;++p){for(var c=p*a,l=u[c],d=0;d<a;++d){var f=u[c+d];f>l&&(l=f)}s[p]=l}return i},e.prototype.maximum=function(t,e){return fl([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.max(t,e)}))},e.prototype.all=function(t,e){fl(t,"all"),xn("all",e,t.rank);for(var n=_n(t.shape,e),r=n[0],o=n[1],i=Wn(r,t.dtype),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),p=0;p<s.length;++p){for(var c=p*a,l=u[c],d=0;d<a;++d){var f=u[c+d];l=l&&f}s[p]=l}return i},e.prototype.any=function(t,e){fl(t,"any"),xn("any",e,t.rank);for(var n=_n(t.shape,e),r=n[0],o=n[1],i=Wn(r,t.dtype),a=T(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),p=0;p<s.length;++p){for(var c=p*a,l=u[c],d=0;d<a;++d){var f=u[c+d];l=l||f}s[p]=l}return i},e.prototype.squaredDifference=function(t,e){return fl([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t-e;return n*n}))},e.prototype.ceil=function(t){fl(t,"ceil");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.floor=function(t){fl(t,"floor");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.sign=function(t){fl(t,"x");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return this.makeOutput(n,t.shape,"float32")},e.prototype.isNaN=function(t){fl(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isNaN(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},e.prototype.isInf=function(t){fl(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Math.abs(e[r])===1/0&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},e.prototype.isFinite=function(t){fl(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isFinite(e[r])&&(n[r]=1);return this.makeOutput(n,t.shape,"bool")},e.prototype.round=function(t){fl(t,"round");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=Math.floor(e[r]);e[r]-o<.5?n[r]=Math.floor(e[r]):e[r]-o>.5?n[r]=Math.ceil(e[r]):n[r]=o%2==0?o:o+1}return this.makeOutput(n,t.shape,"float32")},e.prototype.exp=function(t){fl(t,"exp");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.expm1=function(t){fl(t,"expm1");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return this.makeOutput(n,t.shape,"float32")},e.prototype.log=function(t){fl(t,"log");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log(o)}return this.makeOutput(n,t.shape,"float32")},e.prototype.log1p=function(t){fl(t,"log1p");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log1p(o)}return this.makeOutput(n,t.shape,"float32")},e.prototype.sqrt=function(t){fl(t,"sqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.sqrt(o)}return this.makeOutput(n,t.shape,"float32")},e.prototype.rsqrt=function(t){fl(t,"rsqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=1/Math.sqrt(o)}return this.makeOutput(n,t.shape,"float32")},e.prototype.reciprocal=function(t){fl(t,"reciprocal");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return this.makeOutput(n,t.shape,"float32")},e.prototype.linear=function(t){return t},e.prototype.relu=function(t){fl(t,"relu");for(var e=Wn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.max(0,r[o]);return e},e.prototype.relu6=function(t){fl(t,"relu");for(var e=Wn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.min(Math.max(0,r[o]),6);return e},e.prototype.prelu=function(t,e){return fl([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return t<0?e*t:t}))},e.prototype.elu=function(t){fl(t,"elu");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?o:Math.exp(o)-1}return this.makeOutput(e,t.shape,"float32")},e.prototype.eluDer=function(t,e){fl([t,e],"eluDer");for(var n=new Float32Array(e.size),r=this.readSync(e.dataId),o=this.readSync(t.dataId),i=0;i<r.length;++i){var a=r[i];n[i]=a>=1?o[i]:o[i]*(a+1)}return this.makeOutput(n,e.shape,"float32")},e.prototype.selu=function(t){fl(t,"selu");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?1.0507009873554805*o:1.7580993408473768*(Math.exp(o)-1)}return this.makeOutput(e,t.shape,"float32")},e.prototype.clip=function(t,e,n){fl(t,"clip");for(var r=new Float32Array(t.size),o=this.readSync(t.dataId),i=0;i<o.length;++i){var a=o[i];r[i]=a>n?n:a<e?e:a}return this.makeOutput(r,t.shape,"float32")},e.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.complexAbs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<t.size;++r){var o=n[2*r],i=n[2*r+1];e[r]=Math.hypot(o,i)}return this.makeOutput(e,t.shape,"float32")},e.prototype.int=function(t){fl(t,"int");for(var e=new Int32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=n[r];return this.makeOutput(e,t.shape,"int32")},e.prototype.sigmoid=function(t){fl(t,"sigmoid");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return this.makeOutput(e,t.shape,"float32")},e.prototype.softplus=function(t){fl(t,"softplus");for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i,a=r[o]>-e,s=r[o]<e,u=Math.exp(r[o]);i=s?u:a?r[o]:Math.log(1+u),n[o]=i}return this.makeOutput(n,t.shape,"float32")},e.prototype.sin=function(t){fl(t,"sin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.cos=function(t){fl(t,"cos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.tan=function(t){fl(t,"tan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.asin=function(t){fl(t,"asin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.acos=function(t){fl(t,"acos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.atan=function(t){fl(t,"atan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.atan2=function(t,e){return fl([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.atan2(t,e)}))},e.prototype.sinh=function(t){fl(t,"sinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.cosh=function(t){fl(t,"cosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.tanh=function(t){fl(t,"tanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=N(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.asinh=function(t){fl(t,"asinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.acosh=function(t){fl(t,"acosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.atanh=function(t){fl(t,"atanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return this.makeOutput(e,t.shape,"float32")},e.prototype.erf=function(t){fl(t,"erf");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=Math.sign(n[r]),i=Math.abs(n[r]),a=1/(1+.3275911*i);e[r]=o*(1-((((1.061405429*a-1.453152027)*a+1.421413741)*a-.284496736)*a+.254829592)*a*Math.exp(-i*i))}return this.makeOutput(e,t.shape,"float32")},e.prototype.step=function(t,e){void 0===e&&(e=0),fl(t,"step");for(var n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i=r[o];isNaN(i)?n[o]=NaN:n[o]=i>0?1:e}return this.makeOutput(n,t.shape,"float32")},e.prototype.fusedConv2d=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights,s=this.conv2d(e,n,r);return o&&(s=this.add(s,o)),i&&(s=hl(this,s,i,a)),s},e.prototype.conv2d=function(t,e,n){fl([t,e],"conv2d");for(var r=n.filterHeight,o=n.filterWidth,i=n.dilationHeight,a=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,p="channelsLast"===n.dataFormat,c=dr(n.outShape,t.dtype),l=t.strides[0],d=p?t.strides[1]:t.strides[2],f=p?t.strides[2]:1,h=p?1:t.strides[1],m=c.strides[0],g=p?c.strides[1]:c.strides[2],v=p?c.strides[2]:1,y=p?1:c.strides[1],_=this.readSync(t.dataId),b=this.readSync(e.dataId),x=c.values,E=0;E<n.batchSize;++E)for(var w=E*l,A=E*m,I=0;I<n.outHeight;++I)for(var R=A+I*g,T=I*n.strideHeight-u,S=0;S<r;S++){var C=T+S*i;if(!(C<0||C>=n.inHeight))for(var N=S*e.strides[0],k=w+C*d,O=0;O<n.outWidth;++O)for(var D=R+O*v,M=O*n.strideWidth-s,L=0;L<o;L++){var P=M+L*a;if(!(P<0||P>=n.inWidth))for(var B=k+P*f,F=N+L*e.strides[1],U=0;U<n.inChannels;++U){for(var q=_[B+U*h],G=0;G<n.outChannels;++G)x[D+G*y]+=q*b[F+G];F+=n.outChannels}}}return c.toTensor()},e.prototype.conv3d=function(t,e,n){for(var r=n.filterDepth,o=n.filterHeight,i=n.filterWidth,a=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,p=n.padInfo.front,c=n.padInfo.left,l=n.padInfo.top,d=dr(n.outShape,t.dtype),f=this.readSync(t.dataId),h=this.readSync(e.dataId),m=d.values,g=0;g<n.batchSize;++g)for(var v=g*t.strides[0],y=g*d.strides[0],_=0;_<n.outDepth;++_)for(var b=y+_*d.strides[1],x=_*n.strideDepth-p,E=0;E<r;E++){var w=x+E*a;if(!(w<0||w>=n.inDepth))for(var A=E*e.strides[0],I=v+w*t.strides[1],R=0;R<n.outHeight;++R)for(var T=b+R*d.strides[2],S=R*n.strideHeight-l,C=0;C<o;C++){var N=S+C*s;if(!(N<0||N>=n.inHeight))for(var k=A+C*e.strides[1],O=I+N*t.strides[2],D=0;D<n.outWidth;++D)for(var M=T+D*n.outChannels,L=D*n.strideWidth-c,P=0;P<i;P++){var B=L+P*u;if(!(B<0||B>=n.inWidth))for(var F=k+P*e.strides[2],U=O+B*n.inChannels,q=F,G=0;G<n.inChannels;++G){for(var W=f[U+G],z=0;z<n.outChannels;++z)m[M+z]+=W*h[q+z];q+=n.outChannels}}}}return d.toTensor()},e.prototype.conv2dDerInput=function(t,e,n){fl([t,e],"conv2dDerInput");for(var r=dr(n.inShape,"float32"),o=r.values,i=this.readSync(t.dataId),a=this.readSync(e.dataId),s=e.strides,u=s[0],p=s[1],c=s[2],l=n.batchSize,d=n.filterHeight,f=n.filterWidth,h=n.inChannels,m=n.inHeight,g=n.inWidth,v=n.outChannels,y=n.outHeight,_=n.outWidth,b=n.strideHeight,x=n.strideWidth,E=n.dataFormat,w=d-1-n.padInfo.top,A=f-1-n.padInfo.left,I="channelsLast"===E,R=r.strides[0],T=I?r.strides[1]:r.strides[2],S=I?r.strides[2]:1,C=I?1:r.strides[1],N=t.strides[0],k=I?t.strides[1]:t.strides[2],O=I?t.strides[2]:1,D=I?1:t.strides[1],M=0;M<l;++M)for(var L=0;L<h;++L)for(var P=0;P<m;++P)for(var B=P-w,F=Math.max(0,Math.ceil(B/b)),U=Math.min(y,(d+B)/b),q=0;q<g;++q){for(var G=q-A,W=Math.max(0,Math.ceil(G/x)),z=Math.min(_,(f+G)/x),V=0,H=F;H<U;++H)for(var X=H*b-B,Y=W;Y<z;++Y)for(var $=N*M+k*H+O*Y,j=u*(d-1-X)+p*(f-1-(Y*x-G))+c*L,K=0;K<v;++K)V+=i[$+D*K]*a[j+K];o[R*M+T*P+S*q+C*L]=V}return r.toTensor()},e.prototype.conv3dDerInput=function(t,e,n){for(var r=dr(n.inShape,"float32"),o=r.values,i=r.strides,a=i[0],s=i[1],u=i[2],p=i[3],c=this.readSync(t.dataId),l=t.strides,d=l[0],f=l[1],h=l[2],m=l[3],g=this.readSync(e.dataId),v=e.strides,y=v[0],_=v[1],b=v[2],x=v[3],E=n.batchSize,w=n.filterDepth,A=n.filterHeight,I=n.filterWidth,R=n.inChannels,T=n.inDepth,S=n.inHeight,C=n.inWidth,N=n.outChannels,k=n.outDepth,O=n.outHeight,D=n.outWidth,M=n.strideDepth,L=n.strideHeight,P=n.strideWidth,B=w-1-n.padInfo.front,F=A-1-n.padInfo.top,U=I-1-n.padInfo.left,q=0;q<E;++q)for(var G=0;G<R;++G)for(var W=0;W<T;++W)for(var z=W-B,V=Math.max(0,Math.ceil(z/M)),H=Math.min(k,(w+z)/M),X=0;X<S;++X)for(var Y=X-F,$=Math.max(0,Math.ceil(Y/L)),j=Math.min(O,(A+Y)/L),K=0;K<C;++K){for(var Z=K-U,Q=Math.max(0,Math.ceil(Z/P)),J=Math.min(D,(I+Z)/P),tt=0,et=V;et<H;++et)for(var nt=et*M-z,rt=$;rt<j;++rt)for(var ot=rt*L-Y,it=Q;it<J;++it)for(var at=d*q+f*et+h*rt+m*it,st=y*(w-1-nt)+_*(A-1-ot)+b*(I-1-(it*P-Z))+x*G,ut=0;ut<N;++ut)tt+=c[at+ut]*g[st+ut];o[a*q+s*W+u*X+p*K+G]=tt}return r.toTensor()},e.prototype.conv2dDerFilter=function(t,e,n){fl([t,e],"conv2dDerFilter");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s="channelsLast"===n.dataFormat,u=dr(n.filterShape,"float32"),p=n.padInfo.left,c=n.padInfo.top,l=this.bufferSync(t),d=this.bufferSync(e),f=0;f<i;++f)for(var h=Math.max(0,Math.ceil((c-f)/r)),m=Math.min(n.outHeight,(n.inHeight+c-f)/r),g=0;g<a;++g)for(var v=Math.max(0,Math.ceil((p-g)/o)),y=Math.min(n.outWidth,(n.inWidth+p-g)/o),_=0;_<n.inChannels;++_)for(var b=0;b<n.outChannels;++b){for(var x=0,E=0;E<n.batchSize;++E)for(var w=h;w<m;++w)for(var A=f+w*r-c,I=v;I<y;++I){var R=g+I*o-p;x+=s?l.get(E,A,R,_)*d.get(E,w,I,b):l.get(E,_,A,R)*d.get(E,b,w,I)}u.set(x,f,g,_,b)}return u.toTensor()},e.prototype.conv3dDerFilter=function(t,e,n){for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.filterDepth,s=n.filterHeight,u=n.filterWidth,p=dr(n.filterShape,"float32"),c=p.values,l=p.strides,d=l[0],f=l[1],h=l[2],m=l[3],g=this.readSync(e.dataId),v=e.strides,y=v[0],_=v[1],b=v[2],x=v[3],E=this.readSync(t.dataId),w=t.strides,A=w[0],I=w[1],R=w[2],T=w[3],S=n.padInfo.front,C=n.padInfo.left,N=n.padInfo.top,k=0;k<a;++k)for(var O=Math.max(0,Math.ceil((S-k)/r)),D=Math.min(n.outDepth,(n.inDepth+S-k)/r),M=k*d,L=0;L<s;++L)for(var P=Math.max(0,Math.ceil((N-L)/o)),B=Math.min(n.outHeight,(n.inHeight+N-L)/o),F=L*f+M,U=0;U<u;++U)for(var q=Math.max(0,Math.ceil((C-U)/i)),G=Math.min(n.outWidth,(n.inWidth+C-U)/i),W=U*h+F,z=0;z<n.inChannels;++z)for(var V=z*m+W,H=0;H<n.outChannels;++H){for(var X=0,Y=0;Y<n.batchSize;++Y)for(var $=Y*A,j=Y*y,K=O;K<D;++K)for(var Z=(k+K*r-S)*I+$,Q=K*_+j,J=P;J<B;++J)for(var tt=(L+J*o-N)*R+Z,et=J*b+Q,nt=q;nt<G;++nt){var rt=nt*x+et;X+=E[(U+nt*i-C)*T+tt+z]*g[rt+H]}c[V+H]=X}return p.toTensor()},e.prototype.fusedDepthwiseConv2D=function(t){var e=t.input,n=t.filter,r=t.convInfo,o=t.bias,i=t.activation,a=t.preluActivationWeights,s=this.depthwiseConv2D(e,n,r);return o&&(s=this.add(s,o)),i&&(s=hl(this,s,i,a)),s},e.prototype.depthwiseConv2D=function(t,e,n){fl([t,e],"depthwiseConv2D");for(var r=n.filterHeight,o=n.filterWidth,i=n.dilationHeight,a=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,p=n.outChannels/n.inChannels,c=dr(n.outShape,t.dtype),l=this.readSync(t.dataId),d=this.readSync(e.dataId),f=c.values,h=0;h<n.batchSize;++h)for(var m=h*t.strides[0],g=h*c.strides[0],v=0;v<n.outHeight;++v)for(var y=g+v*c.strides[1],_=v*n.strideHeight-s,b=0;b<r;++b){var x=_+b*i;if(!(x<0||x>=n.inHeight))for(var E=b*e.strides[0],w=m+x*t.strides[1],A=0;A<n.outWidth;++A)for(var I=y+A*c.strides[2],R=A*n.strideWidth-u,T=0;T<o;++T){var S=R+T*a;if(!(S<0||S>=n.inWidth))for(var C=E+T*e.strides[1],N=w+S*n.inChannels,k=I,O=C,D=0;D<n.inChannels;++D){for(var M=l[N+D],L=0;L<p;++L)f[k+L]+=M*d[O+L];k+=p,O+=p}}}return c.toTensor()},e.prototype.depthwiseConv2DDerInput=function(t,e,n){fl([t,e],"depthwiseConv2DDerInput");for(var r=dr(n.inShape,"float32"),o=r.values,i=r.strides,a=i[0],s=i[1],u=i[2],p=this.readSync(t.dataId),c=t.strides,l=c[0],d=c[1],f=c[2],h=this.readSync(e.dataId),m=e.strides,g=m[0],v=m[1],y=m[2],_=n.batchSize,b=n.filterHeight,x=n.filterWidth,E=n.inChannels,w=n.inHeight,A=n.inWidth,I=n.outChannels,R=n.outHeight,T=n.outWidth,S=n.strideHeight,C=n.strideWidth,N=b-1-n.padInfo.top,k=x-1-n.padInfo.left,O=I/E,D=0;D<_;++D)for(var M=0;M<E;++M)for(var L=0;L<w;++L)for(var P=L-N,B=Math.max(0,Math.ceil(P/S)),F=Math.min(R,(b+P)/S),U=0;U<A;++U){for(var q=U-k,G=Math.max(0,Math.ceil(q/C)),W=Math.min(T,(x+q)/C),z=0,V=B;V<F;++V)for(var H=V*S-P,X=G;X<W;++X)for(var Y=l*D+d*V+f*X,$=g*(b-1-H)+v*(x-1-(X*C-q))+y*M,j=0;j<O;++j)z+=p[Y+(M*O+j)]*h[$+j];o[a*D+s*L+u*U+M]=z}return r.toTensor()},e.prototype.depthwiseConv2DDerFilter=function(t,e,n){fl([t,e],"depthwiseConv2DDerFilter");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s=dr(n.filterShape,"float32"),u=n.padInfo.left,p=n.padInfo.top,c=n.outChannels/n.inChannels,l=this.bufferSync(t),d=this.bufferSync(e),f=0;f<i;++f)for(var h=Math.max(0,Math.ceil((p-f)/r)),m=Math.min(n.outHeight,(n.inHeight+p-f)/r),g=0;g<a;++g)for(var v=Math.max(0,Math.ceil((u-g)/o)),y=Math.min(n.outWidth,(n.inWidth+u-g)/o),_=0;_<n.outChannels;++_){for(var b=Math.trunc(_/c),x=_%c,E=0,w=0;w<n.batchSize;++w)for(var A=h;A<m;++A)for(var I=f+A*r-p,R=v;R<y;++R){var T=g+R*o-u;E+=l.get(w,I,T,b)*d.get(w,A,R,_)}s.set(E,f,g,b,x)}return s.toTensor()},e.prototype.tile=function(t,e){return fl(t,"tile"),Wo(this.bufferSync(t),e)},e.prototype.pad=function(t,e,n){fl(t,"pad");var r=e.map((function(e,n){return e[0]+t.shape[n]+e[1]})),o=e.map((function(t){return t[0]})),i=this.bufferSync(t),a=dr(r,t.dtype);0!==n&&a.values.fill(n);for(var s=0;s<t.size;s++){var u=i.indexToLoc(s),p=u.map((function(t,e){return t+o[e]}));a.set.apply(a,[i.get.apply(i,u)].concat(p))}return a.toTensor()},e.prototype.transpose=function(t,e){fl(t,"transpose");for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[e[r]];var o=this.readSync(t.dataId),i=dr(n,t.dtype),a=this.bufferSync(t);for(r=0;r<t.size;++r){for(var s=a.indexToLoc(r),u=new Array(s.length),p=0;p<u.length;p++)u[p]=s[e[p]];var c=i.locToIndex(u);i.values[c]=o[r]}return i.toTensor()},e.prototype.gather=function(t,e,n){fl([t,e],"gather");var r=t.shape.slice(),o=this.readSync(e.dataId);r[n]=o.length;for(var i=dr(r,t.dtype),a=this.bufferSync(t),s=0;s<i.size;++s){var u=i.indexToLoc(s),p=u.slice();p[n]=o[u[n]];var c=a.locToIndex(p);i.values[s]=a.values[c]}return i.toTensor()},e.prototype.batchToSpaceND=function(t,e,n){fl([t],"batchToSpaceND");var r=e.reduce((function(t,e){return t*e})),o=qr(t.shape,e,r),i=Gr(o.length,e.length),a=Wr(t.shape,e,r),s=zr(n,e.length),u=Vr(a,n,e.length);return t.reshape(o).transpose(i).reshape(a).slice(s,u)},e.prototype.spaceToBatchND=function(t,e,n){fl([t],"spaceToBatchND");var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var i=1+e.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),s=qr(a.shape,e,r,!1),u=Gr(s.length,e.length,!1),p=Wr(a.shape,e,r,!1);return a.reshape(s).transpose(u).reshape(p)},e.prototype.pool=function(t,e,n){fl(t,"pool");for(var r=e.strideHeight,o=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,p=e.padInfo.top,c=e.padInfo.left,l="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,d=this.readSync(t.dataId),f=dr(e.outShape,t.dtype),h=f.values,m=e.outShape[1]*e.outShape[2]*e.outShape[3],g=e.outShape[2]*e.outShape[3],v=e.outShape[3],y=0;y<e.batchSize;++y)for(var _=y*m,b=y*t.strides[0],x=0;x<e.inChannels;++x)for(var E=0;E<e.outHeight;++E)for(var w=E*r-p,A=Math.max(0,w),I=Math.min(e.inHeight,s+w),R=_+E*g,T=0;T<e.outWidth;++T){for(var S=T*o-c,C=Math.max(0,S),N=Math.min(e.inWidth,u+S),k=l,O=0,D=0,M=A;M<I;M+=i){for(var L=b+M*t.strides[1],P=C;P<N;P+=a){var B=d[L+P*t.strides[2]+x];"max"===n&&B>k?k=B:"avg"===n&&(O+=B,D++)}if(isNaN(k))break}h[R+T*v+x]="avg"===n?O/D:k}return f.toTensor()},e.prototype.maxPool=function(t,e){return this.pool(t,e,"max")},e.prototype.maxPoolPositions=function(t,e){for(var n=dr(e.outShape,"int32"),r=e.strideHeight,o=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,p=e.padInfo.top,c=e.padInfo.left,l=this.bufferSync(t),d=0;d<e.batchSize;++d)for(var f=0;f<e.inChannels;++f)for(var h=0;h<e.outHeight;++h){for(var m=h*r-p,g=m;g<0;)g+=i;for(var v=Math.min(e.inHeight,s+m),y=0;y<e.outWidth;++y){for(var _=y*o-c,b=_;b<0;)b+=a;for(var x=Math.min(e.inWidth,u+_),E=Number.NEGATIVE_INFINITY,w=-1,A=g;A<v;A+=i)for(var I=A-m,R=b;R<x;R+=a){var T=R-_,S=l.get(d,A,R,f);S>E&&(E=S,w=I*u+T)}n.set(w,d,h,y,f)}}return n.toTensor()},e.prototype.maxPoolBackprop=function(t,e,n,r){fl([e,n],"maxPoolBackprop");for(var o=this.maxPoolPositions(e,r),i=r.strideHeight,a=r.strideWidth,s=r.dilationHeight,u=r.dilationWidth,p=r.effectiveFilterHeight,c=r.effectiveFilterWidth,l=c-1-r.padInfo.left,d=p-1-r.padInfo.top,f=dr(e.shape,"float32"),h=this.bufferSync(o),m=this.bufferSync(t),g=0;g<r.batchSize;++g)for(var v=0;v<r.inChannels;++v)for(var y=0;y<r.inHeight;++y)for(var _=0;_<r.inWidth;++_){for(var b=y-d,x=_-l,E=0,w=0;w<p;w+=s){var A=(b+w)/i;if(!(A<0||A>=r.outHeight||Math.floor(A)!==A))for(var I=0;I<c;I+=u){var R=(x+I)/a;if(!(R<0||R>=r.outWidth||Math.floor(R)!==R)){var T=p*c-1-h.get(g,A,R,v)===w*c+I?1:0;0!==T&&(E+=m.get(g,A,R,v)*T)}}}f.set(E,g,y,_,v)}return f.toTensor()},e.prototype.avgPoolBackprop=function(t,e,n){fl([t,e],"avgPoolBackprop");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,p=n.effectiveFilterHeight,c=n.effectiveFilterWidth,l=c-1-n.padInfo.left,d=p-1-n.padInfo.top,f=dr(e.shape,"float32"),h=1/(i*a),m=this.bufferSync(t),g=0;g<n.batchSize;++g)for(var v=0;v<n.inChannels;++v)for(var y=0;y<n.inHeight;++y)for(var _=0;_<n.inWidth;++_){for(var b=y-d,x=_-l,E=0,w=0;w<p;w+=s){var A=(b+w)/r;if(!(A<0||A>=n.outHeight||Math.floor(A)!==A))for(var I=0;I<c;I+=u){var R=(x+I)/o;R<0||R>=n.outWidth||Math.floor(R)!==R||(E+=m.get(g,A,R,v))}}f.set(E*h,g,y,_,v)}return f.toTensor()},e.prototype.pool3d=function(t,e,n){fl(t,"pool3d");for(var r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,p=e.effectiveFilterDepth,c=e.effectiveFilterHeight,l=e.effectiveFilterWidth,d=e.padInfo.front,f=e.padInfo.top,h=e.padInfo.left,m="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,g=this.readSync(t.dataId),v=dr(e.outShape,t.dtype),y=v.values,_=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],b=e.outShape[2]*e.outShape[3]*e.outShape[4],x=e.outShape[3]*e.outShape[4],E=e.outShape[4],w=0;w<e.batchSize;++w)for(var A=w*_,I=w*t.strides[0],R=0;R<e.inChannels;++R)for(var T=0;T<e.outDepth;++T){for(var S=T*r-d,C=S;C<0;)C+=a;for(var N=Math.min(e.inDepth,p+S),k=A+T*b,O=0;O<e.outHeight;++O){for(var D=O*o-f,M=D;M<0;)M+=s;for(var L=Math.min(e.inHeight,c+D),P=k+O*x,B=0;B<e.outWidth;++B){for(var F=B*i-h,U=F;U<0;)U+=u;for(var q=Math.min(e.inWidth,l+F),G=P+B*E,W=m,z=0,V=0,H=C;H<N;H+=a){for(var X=I+H*t.strides[1],Y=M;Y<L;Y+=s){for(var $=X+Y*t.strides[2],j=U;j<q;j+=u){var K=g[$+j*t.strides[3]+R];if("max"===n&&K>W?W=K:"avg"===n&&(z+=K,V++),isNaN(W))break}if(isNaN(W))break}if(isNaN(W))break}y[G+R]="avg"===n?z/V:W}}}return v.toTensor()},e.prototype.avgPool3d=function(t,e){return fl(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()},e.prototype.avgPool3dBackprop=function(t,e,n){fl([t,e],"avgPool3dBackprop");for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.filterDepth,s=n.filterHeight,u=n.filterWidth,p=n.dilationDepth,c=n.dilationHeight,l=n.dilationWidth,d=n.effectiveFilterDepth,f=n.effectiveFilterHeight,h=n.effectiveFilterWidth,m=d-1-n.padInfo.front,g=h-1-n.padInfo.left,v=f-1-n.padInfo.top,y=dr(e.shape,"float32"),_=1/(a*s*u),b=this.bufferSync(t),x=0;x<n.batchSize;++x)for(var E=0;E<n.inChannels;++E)for(var w=0;w<n.inDepth;++w)for(var A=0;A<n.inHeight;++A)for(var I=0;I<n.inWidth;++I){for(var R=w-m,T=A-v,S=I-g,C=0,N=0;N<d;N+=p){var k=(R+N)/r;if(!(k<0||k>=n.outDepth||Math.floor(k)!==k))for(var O=0;O<f;O+=c){var D=(T+O)/o;if(!(D<0||D>=n.outHeight||Math.floor(D)!==D))for(var M=0;M<h;M+=l){var L=(S+M)/i;L<0||L>=n.outWidth||Math.floor(L)!==L||(C+=b.get(x,k,D,L,E))}}}y.set(C*_,x,w,A,I,E)}return y.toTensor()},e.prototype.maxPool3d=function(t,e){return fl(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()},e.prototype.maxPool3dPositions=function(t,e){for(var n=dr(e.outShape,"int32"),r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,p=e.effectiveFilterDepth,c=e.effectiveFilterHeight,l=e.effectiveFilterWidth,d=e.padInfo.front,f=e.padInfo.top,h=e.padInfo.left,m=this.bufferSync(t),g=0;g<e.batchSize;++g)for(var v=0;v<e.inChannels;++v)for(var y=0;y<e.outDepth;++y){for(var _=y*r-d,b=_;b<0;)b+=a;for(var x=Math.min(e.inDepth,p+_),E=0;E<e.outHeight;++E){for(var w=E*o-f,A=w;A<0;)A+=s;for(var I=Math.min(e.inHeight,c+w),R=0;R<e.outWidth;++R){for(var T=R*i-h,S=T;S<0;)S+=u;for(var C=Math.min(e.inWidth,l+T),N=Number.NEGATIVE_INFINITY,k=-1,O=b;O<x;O+=a)for(var D=O-_,M=A;M<I;M+=s)for(var L=M-w,P=S;P<C;P+=u){var B=P-T,F=m.get(g,O,M,P,v);F>=N&&(N=F,k=D*c*l+L*c+B)}n.set(k,g,y,E,R,v)}}}return n.toTensor()},e.prototype.maxPool3dBackprop=function(t,e,n,r){fl([e,n],"maxPool3dBackprop");for(var o=this.maxPool3dPositions(e,r),i=r.strideDepth,a=r.strideHeight,s=r.strideWidth,u=r.dilationDepth,p=r.dilationHeight,c=r.dilationWidth,l=r.effectiveFilterDepth,d=r.effectiveFilterHeight,f=r.effectiveFilterWidth,h=l-1-r.padInfo.front,m=f-1-r.padInfo.left,g=d-1-r.padInfo.top,v=dr(e.shape,"float32"),y=this.bufferSync(o),_=this.bufferSync(t),b=0;b<r.batchSize;++b)for(var x=0;x<r.inChannels;++x)for(var E=0;E<r.inDepth;++E)for(var w=0;w<r.inHeight;++w)for(var A=0;A<r.inWidth;++A){for(var I=E-h,R=w-g,T=A-m,S=0,C=0;C<l;C+=u){var N=(I+C)/i;if(!(N<0||N>=r.outDepth||Math.floor(N)!==N))for(var k=0;k<d;k+=p){var O=(R+k)/a;if(!(O<0||O>=r.outHeight||Math.floor(O)!==O))for(var D=0;D<f;D+=c){var M=(T+D)/s;if(!(M<0||M>=r.outWidth||Math.floor(M)!==M)){var L=l*d*f-1-y.get(b,N,O,M,x)===C*d*f+k*f+D?1:0;0!==L&&(S+=_.get(b,N,O,M,x)*L)}}}}v.set(S,b,E,w,A,x)}return v.toTensor()},e.prototype.cast=function(t,e){return ko(t,e,this)},e.prototype.reshape=function(t,e){return Oo(t,e)},e.prototype.avgPool=function(t,e){return fl(t,"avgPool"),this.pool(t,e,"avg").toFloat()},e.prototype.resizeBilinear=function(t,e,n,r){fl(t,"resizeBilinear");for(var o=t.shape,i=o[0],a=o[1],s=o[2],u=o[3],p=this.readSync(t.dataId),c=new Float32Array(T([i,e,n,u])),l=[r&&e>1?a-1:a,r&&n>1?s-1:s],d=[r&&e>1?e-1:e,r&&n>1?n-1:n],f=0,h=l[0]/d[0],m=l[1]/d[1],g=0;g<i;g++)for(var v=0;v<e;v++)for(var y=h*v,_=Math.floor(y),b=y-_,x=Math.min(a-1,Math.ceil(y)),E=g*t.strides[0]+_*t.strides[1],w=g*t.strides[0]+x*t.strides[1],A=0;A<n;A++)for(var I=m*A,R=Math.floor(I),S=I-R,C=Math.min(s-1,Math.ceil(I)),N=E+R*t.strides[2],k=w+R*t.strides[2],O=E+ +C*t.strides[2],D=w+C*t.strides[2],M=0;M<u;M++){var L=p[N+M],P=p[k+M],B=L+(p[O+M]-L)*S,F=B+(P+(p[D+M]-P)*S-B)*b;c[f++]=F}return kn(c,[i,e,n,u])},e.prototype.resizeBilinearBackprop=function(t,e,n){fl([t,e],"resizeBilinearBackprop");for(var r=e.shape,o=r[0],i=r[1],a=r[2],s=r[3],u=t.shape,p=u[1],c=u[2],l=new Float32Array(o*i*a*s),d=[n&&p>1?i-1:i,n&&c>1?a-1:a],f=[n&&p>1?p-1:p,n&&c>1?c-1:c],h=d[0]/f[0],m=d[1]/f[1],g=this.readSync(t.dataId),v=0,y=0;y<o;y++)for(var _=y*e.strides[0],b=0;b<p;b++)for(var x=b*h,E=Math.floor(x),w=Math.min(Math.ceil(x),i-1),A=_+E*e.strides[1],I=_+w*e.strides[1],R=x-E,T=1-R,S=0;S<c;S++)for(var C=S*m,N=Math.floor(C),k=Math.min(Math.ceil(C),a-1),O=C-N,D=1-O,M=A+N*e.strides[2],L=A+k*e.strides[2],P=I+N*e.strides[2],B=I+k*e.strides[2],F=T*D,U=T*O,q=R*D,G=R*O,W=0;W<s;W++){var z=g[v++];l[M+W]+=z*F,l[L+W]+=z*U,l[P+W]+=z*q,l[B+W]+=z*G}return Bn(l,[o,a,i,s],e.dtype)},e.prototype.resizeNearestNeighbor=function(t,e,n,r){fl(t,"resizeNearestNeighbor");for(var o=t.shape,i=o[0],a=o[1],s=o[2],u=o[3],p=this.readSync(t.dataId),c=new Float32Array(i*e*n*u),l=[r&&e>1?a-1:a,r&&n>1?s-1:s],d=[r&&e>1?e-1:e,r&&n>1?n-1:n],f=l[0]/d[0],h=l[1]/d[1],m=0,g=0;g<i;g++)for(var v=g*t.strides[0],y=0;y<e;y++)for(var _=f*y,b=v+Math.min(a-1,r?Math.round(_):Math.floor(_))*t.strides[1],x=0;x<n;x++)for(var E=h*x,w=b+Math.min(s-1,r?Math.round(E):Math.floor(E))*t.strides[2],A=0;A<u;A++){var I=p[w+A];c[m++]=I}return kn(c,[i,e,n,u],t.dtype)},e.prototype.resizeNearestNeighborBackprop=function(t,e,n){fl([t,e],"resizeNearestNeighborBackprop");for(var r=e.shape,o=r[0],i=r[1],a=r[2],s=r[3],u=t.shape,p=u[1],c=u[2],l=new Float32Array(o*i*a*s),d=this.readSync(t.dataId),f=[n&&p>1?i-1:i,n&&c>1?a-1:a],h=[n&&p>1?p-1:p,n&&c>1?c-1:c],m=f[0]/h[0],g=f[1]/h[1],v=1/m,y=1/g,_=2*Math.ceil(v)+2,b=2*Math.ceil(y)+2,x=0;x<o;x++)for(var E=x*e.strides[0],w=0;w<i;w++)for(var A=E+w*e.strides[1],I=Math.floor(w*v),R=Math.floor(I-_/2),T=0;T<a;T++)for(var S=A+T*e.strides[2],C=Math.floor(T*y),N=Math.floor(C-b/2),k=0;k<s;k++){for(var O=0,D=0;D<_;D++){var M=D+R;if(!(M<0||M>=p)){var L=E+M*t.strides[1],P=M*m;if(w===Math.min(i-1,n?Math.round(P):Math.floor(P)))for(var B=0;B<b;B++){var F=B+N;if(!(F<0||F>=c)){var U=L+F*t.strides[2],q=F*g;T===Math.min(a-1,n?Math.round(q):Math.floor(q))&&(O+=d[U+k])}}}}l[S+k]=O}return Bn(l,e.shape,e.dtype)},e.prototype.batchNormalization=function(t,e,n,r,o,i){fl([t,e,n,o,i],"batchNorm");for(var a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=this.readSync(n.dataId),p=o?this.readSync(o.dataId):new Float32Array([1]),c=i?this.readSync(i.dataId):new Float32Array([0]),l=new Float32Array(a.length),d=c.length,f=p.length,h=u.length,m=s.length,g=0,v=0,y=0,_=0,b=0;b<a.length;++b)l[b]=c[g++]+(a[b]-s[v++])*p[y++]/Math.sqrt(u[_++]+r),g>=d&&(g=0),v>=m&&(v=0),y>=f&&(y=0),_>=h&&(_=0);return Bn(l,t.shape)},e.prototype.localResponseNormalization4D=function(t,e,n,r,o){fl(t,"localResponseNormalization4D");var i=t.shape[3],a=i-1,s=this.readSync(t.dataId),u=t.size,p=new Float32Array(u);function c(t){for(var n=t%i,r=t-n+Math.max(0,n-e),o=t-n+Math.min(n+e,a),u=0;r<=o;r++){var p=s[r];u+=p*p}return u}for(var l=0;l<u;l++){var d=c(l),f=s[l]*Math.pow(n+r*d,-o);p[l]=f}return Bn(p,t.shape)},e.prototype.LRNGrad=function(t,e,n,r,o,i,a){fl(t,"LRNGrad");for(var s=t.shape[3],u=this.readSync(t.dataId),p=this.readSync(e.dataId),c=this.readSync(n.dataId),l=new Float32Array(t.size),d=t.size,f=0;f<d;f++){for(var h=f%s,m=f-h+Math.max(0,h-r),g=f-h+Math.min(s,h+r+1),v=0,y=m;y<g;y++)v+=Math.pow(p[y],2);for(v=i*v+o,y=m;y<g;y++){var _=-2*i*a*p[y]*c[f]/v;f===y&&(_+=Math.pow(v,-a)),_*=u[f],l[y]+=_}}return Bn(l,t.shape)},e.prototype.multinomial=function(t,e,n,r){fl(t,"multinomial");for(var o=e?t:co(t),i=o.shape[0],a=o.shape[1],s=Wn([i,n],"int32"),u=this.readSync(s.dataId),p=this.readSync(o.dataId),c=0;c<i;++c){var l=c*a,d=new Float32Array(a-1);d[0]=p[l];for(var f=1;f<d.length;++f)d[f]=d[f-1]+p[l+f];for(var h=ur(r.toString()),m=c*n,g=0;g<n;++g){var v=h();u[m+g]=d.length;for(var y=0;y<d.length;y++)if(v<d[y]){u[m+g]=y;break}}}return s},e.prototype.oneHot=function(t,e,n,r){fl(t,"oneHot");var o=new Float32Array(t.size*e);o.fill(r);for(var i=this.readSync(t.dataId),a=0;a<t.size;++a)i[a]>=0&&i[a]<e&&(o[a*e+i[a]]=n);return Ln(o,[t.size,e],"int32")},e.prototype.nonMaxSuppression=function(t,e,n,r,o){return fl(t,"nonMaxSuppression"),Uo(this.readSync(t.dataId),this.readSync(e.dataId),n,r,o)},e.prototype.fft=function(t){return this.fftBatch(t,!1)},e.prototype.ifft=function(t){return this.fftBatch(t,!0)},e.prototype.fftBatch=function(t,e){for(var n=t.shape[0],r=t.shape[1],o=dr(t.shape,"float32"),i=dr(t.shape,"float32"),a=Cn(t).as2D(n,r),s=Nn(t).as2D(n,r),u=0;u<n;u++)for(var p=a.slice([u,0],[1,r]),c=s.slice([u,0],[1,r]),l=Sn(p,c),d=this.readSync(this.fftImpl(l,e).dataId),f=0;f<r;f++){var h=Po(d,f);o.values[u*r+f]=h.real,i.values[u*r+f]=h.imag}return Sn(o.toTensor(),i.toTensor()).as2D(n,r)},e.prototype.fftImpl=function(t,e){var n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(o=Sn(Cn(o).div(Dn(r)),Nn(o).div(Dn(r)))),o}var i=this.readSync(t.dataId),a=function(t){for(var e=new Float32Array(t.length/2),n=new Float32Array(t.length/2),r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(this.fourierTransformByMatmul(i,r,e));return Sn(a.real,a.imag).as2D(t.shape[0],t.shape[1])},e.prototype.isExponentOf2=function(t){return 0==(t&t-1)},e.prototype.fftRadix2=function(t,e,n){if(1===e)return t;var r=this.readSync(t.dataId),o=e/2,i=function(t){for(var e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=0;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),a=Sn(i.real,i.imag).as1D(),s=function(t){for(var e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=2;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),u=Sn(s.real,s.imag).as1D();a=this.fftRadix2(a,o,n),u=this.fftRadix2(u,o,n);var p=function(t,e){for(var n=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var i=(e?2:-2)*Math.PI*(o/t);n[o]=Math.cos(i),r[o]=Math.sin(i)}return{real:n,imag:r}}(e,n),c=Sn(p.real,p.imag).mul(u),l=a.add(c),d=a.sub(c),f=Cn(l).concat(Cn(d)),h=Nn(l).concat(Nn(d));return Sn(f,h).as1D()},e.prototype.fourierTransformByMatmul=function(t,e,n){for(var r=new Float32Array(2*e),o=0;o<e;o++){for(var i=0,a=0,s=0;s<e;s++){var u=Fo(o*s,e,n),p=Po(t,s);i+=p.real*u.real-p.imag*u.imag,a+=p.real*u.imag+p.imag*u.real}n&&(i/=e,a/=e),Bo(r,i,a,o)}return r},e.prototype.depthToSpace=function(t,e,n){w("NHWC"===n,(function(){return"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n})),w(e>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+e}));for(var r=t.shape[0],o=t.shape[1],i=t.shape[2],a=t.shape[3],s=o*e,u=i*e,p=a/(e*e),c=this.readSync(t.dataId),l=new Float32Array(r*s*u*p),d=0,f=0;f<r;++f)for(var h=0;h<s;++h)for(var m=Math.floor(h/e),g=h%e,v=0;v<u;++v)for(var y=Math.floor(v/e),_=(g*e+v%e)*p,b=0;b<p;++b){var x=b+_+a*(y+i*(m+o*f));l[d++]=c[x]}return Bn(l,[r,s,u,p])},e.prototype.broadcastedBinaryOp=function(t,e,n,r){var o=yo(t.shape,e.shape),i=dr(o,n),a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=go(t.shape,o),p=go(e.shape,o),c=i.values;if(u.length+p.length===0)for(var l=0;l<c.length;++l)c[l]=r(a[l%a.length],s[l%s.length]);else{var d=this.bufferSync(t),f=this.bufferSync(e),h=function(n){var o=i.indexToLoc(n),l=o.slice(-t.rank);u.forEach((function(t){return l[t]=0}));var h=d.locToIndex(l),m=o.slice(-e.rank);p.forEach((function(t){return m[t]=0}));var g=f.locToIndex(m);c[n]=r(a[h],s[g])};for(l=0;l<c.length;++l)h(l)}return i.toTensor()},e.prototype.broadcastedBinaryComplexOp=function(t,e,n){var r=yo(t.shape,e.shape),o=dr(r,"float32"),i=dr(r,"float32"),a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=go(t.shape,r),p=go(e.shape,r),c=o.values,l=i.values;if(u.length+p.length===0)for(var d=0;d<c.length;d++){var f=d%a.length,h=d%s.length,m=n(a[2*f],a[2*f+1],s[2*h],s[2*h+1]);c[d]=m.real,l[d]=m.imag}else{var g=this.bufferSync(this.data.get(t.dataId).complexTensors.real),v=this.bufferSync(this.data.get(e.dataId).complexTensors.real),y=function(r){var i=o.indexToLoc(r),d=i.slice(-t.rank);u.forEach((function(t){return d[t]=0}));var f=g.locToIndex(d),h=i.slice(-e.rank);p.forEach((function(t){return h[t]=0}));var m=v.locToIndex(h),y=n(a[2*f],a[2*f+1],s[2*m],s[2*m+1]);c[r]=y.real,l[r]=y.imag};for(d=0;d<c.length;d++)y(d)}return this.complex(o.toTensor(),i.toTensor())},e.prototype.split=function(t,e,n){return Go(t,e,n)},e.prototype.dispose=function(){},e.prototype.floatPrecision=function(){return 32},e.prototype.epsilon=function(){return 1e-7},e.prototype.cropAndResize=function(t,e,n,r,o,i){for(var a=t.shape,s=a[0],u=a[1],p=a[2],c=a[3],l=e.shape[0],d=r[0],f=r[1],h=dr([l,d,f,c],t.dtype),m=this.readSync(e.dataId),g=this.readSync(n.dataId),v=this.readSync(t.dataId),y=t.strides,_=h.strides,b=0;b<l;b++){var x=4*b,E=m[x],w=m[x+1],A=m[x+2],I=m[x+3],R=g[b];if(!(R>=s))for(var T=d>1?(A-E)*(u-1)/(d-1):0,S=f>1?(I-w)*(p-1)/(f-1):0,C=0;C<d;C++){var N=d>1?E*(u-1)+C*T:.5*(E+A)*(u-1);if(N<0||N>u-1)for(var k=0;k<f;k++)for(var O=0;O<c;O++){var D=O+k*_[2]+C*_[1]+b*_[0];h.values[D]=i}else if("bilinear"===o){var M=Math.floor(N),L=Math.ceil(N),P=N-M;for(k=0;k<f;k++)if((H=f>1?w*(p-1)+k*S:.5*(w+I)*(p-1))<0||H>p-1)for(O=0;O<c;O++)D=O+k*_[2]+C*_[1]+b*_[0],h.values[D]=i;else{var B=Math.floor(H),F=Math.ceil(H),U=H-B;for(O=0;O<c;O++){var q=v[D=O+B*y[2]+M*y[1]+R*y[0]],G=v[D=O+F*y[2]+M*y[1]+R*y[0]],W=v[D=O+B*y[2]+L*y[1]+R*y[0]],z=q+(G-q)*U,V=W+(v[D=O+F*y[2]+L*y[1]+R*y[0]]-W)*U;D=O+k*_[2]+C*_[1]+b*_[0],h.values[D]=z+(V-z)*P}}}else for(k=0;k<f;++k){var H;if((H=f>1?w*(p-1)+k*S:.5*(w+I)*(p-1))<0||H>p-1)for(O=0;O<c;O++)D=O+k*_[2]+C*_[1]+b*_[0],h.values[D]=i;else{var X=Math.round(H),Y=Math.round(N);for(O=0;O<c;O++){var $=O+X*y[2]+Y*y[1]+R*y[0],j=O+k*_[2]+C*_[1]+b*_[0];h.values[j]=v[$]}}}}}return h.toTensor()},e.prototype.sparseToDense=function(t,e,n,r){var o=$r(0,t,n),i=o.sliceRank,a=o.numUpdates,s=o.sliceSize,u=o.strides,p=o.outputSize;return this.scatter(t,e,n,p,s,a,i,u,r,!1)},e.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Hr(t,e),i=o[0],a=o[1],s=o[2],u=o[3];if(0===a)return kn([],i,t.dtype);for(var p=new mt([a,s],t.dtype),c=this.readSync(e.dataId),l=this.readSync(t.dataId),d=0;d<a;d++){for(var f=[],h=0,m=0;m<r;m++){var g=c[d*r+m];h+=g*u[m],f.push(g)}if(h<0||h>=t.size/s)throw new Error("Invalid indices: "+f+" does not index into "+t.shape);for(var v=0;v<s;v++)p.values[d*s+v]=l[h*s+v]}return p.toTensor().reshape(i)},e.prototype.scatterND=function(t,e,n){var r=$r(0,t,n),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,s=r.strides,u=r.outputSize,p=Dn(0);return this.scatter(t,e,n,u,a,i,o,s,p,!0)},e.prototype.fill=function(t,e,n){var r=F(n=n||$(e),T(t));return r.fill(e),Pt.makeTensor(r,t,n,this)},e.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)},e.prototype.zerosLike=function(t){var e=F(t.dtype,T(t.shape));return this.makeOutput(e,t.shape,t.dtype)},e.prototype.linspace=function(t,e,n){return Do(t,e,n)},e.prototype.scatter=function(t,e,n,r,o,i,a,s,u,p){var c=[r/o,o],l=this.readSync(t.dataId),d=this.readSync(e.dataId);if(0===r)return kn([],n,e.dtype);var f=new mt(c,e.dtype);f.values.fill(this.readSync(u.dataId)[0]);for(var h=0;h<i;h++){for(var m=[],g=0,v=0;v<a;v++){var y=l[h*a+v];m.push(y),g+=y*s[v]}if(g<0||g>=r/o)throw new Error("Invalid indices: "+m+" does not index into "+n);for(var _=0;_<o;_++)p?f.values[g*o+_]+=d[h*o+_]:f.values[g*o+_]=0===e.rank?d[0]:d[h*o+_]}return f.toTensor().reshape(n)},e}(ho);Pt.registerBackend("cpu",(function(){return new ml}),1),g({kernelName:"Square",backendName:"cpu",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n;fl(r,"square");for(var i=o.data.get(r.dataId).values,a=new Float32Array(i.length),s=0;s<i.length;++s){var u=i[s];a[s]=u*u}return{dataId:o.write(a,r.shape,r.dtype),shape:r.shape,dtype:r.dtype}}}),g({kernelName:"Square",backendName:"webgl",kernelFunc:function(t){var e=t.inputs,n=t.backend,r=e.x,o=n,i=new as(r.shape,"return x * x;");return o.runWebGLProgram(i,[r],r.dtype)}});var gl=function(){function t(){}return t.prototype.fetch=function(t,e){return fetch(t,e)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return new TextDecoder(e).decode(t)},t}();l().get("IS_BROWSER")&&l().setPlatform("browser",new gl);var vl,yl=function(){function t(){this.util=n(13),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,e){return null!=l().global.fetch?l().global.fetch(t,e):(null==vl&&(vl=n(12)),vl(t,e))},t.prototype.now=function(){var t=r.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)},t}();l().get("IS_NODE")&&l().setPlatform("node",new yl);var _l={float32:4,int32:4,uint16:2,uint8:1,bool:1},bl=4;function xl(t,e){for(var n={},r=0,o=function(e){var o=e.name,i=e.dtype,a=e.shape,s=T(a),u=void 0;if("quantization"in e){var p=e.quantization;if("uint8"!==p.dtype&&"uint16"!==p.dtype)throw new Error("Weight "+e.name+" has unknown quantization dtype "+p.dtype+". Supported quantization dtypes are: 'uint8' and 'uint16'.");var c=_l[p.dtype],l=t.slice(r,r+s*c),d="uint8"===p.dtype?new Uint8Array(l):new Uint16Array(l);if("float32"===i)u=Float32Array.from(d,(function(t){return t*p.scale+p.min}));else{if("int32"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);u=Int32Array.from(d,(function(t){return Math.round(t*p.scale+p.min)}))}r+=s*c}else if("string"===i){var f=T(e.shape);u=[];for(var h=0;h<f;h++){var m=new Uint32Array(t.slice(r,r+bl))[0];r+=bl;var g=new Uint8Array(t.slice(r,r+m));u.push(g),r+=m}}else{var v=_l[i];if(l=t.slice(r,r+s*v),"float32"===i)u=new Float32Array(l);else if("int32"===i)u=new Int32Array(l);else{if("bool"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);u=new Uint8Array(l)}r+=s*v}n[o]=kn(u,a,i)},i=0,a=e;i<a.length;i++)o(a[i]);return n}function El(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var e=0,n=[];t.forEach((function(t){if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));var r=new Uint8Array(e),o=0;return n.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}var wl=void 0!==o&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function Al(t){return wl?o.byteLength(t):new Blob([t]).size}function Il(t){var e=0;t.forEach((function(t){e+=t.byteLength}));var n=new Uint8Array(e),r=0;return t.forEach((function(t){n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function Rl(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var e=t.split("/");return e[e.length-1]}function Tl(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:Al(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:Al(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var Sl=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e)},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e)},t.getSaveHandlers=function(e){return t.getHandlers(e,"save")},t.getLoadHandlers=function(e,n){return t.getHandlers(e,"load",n)},t.getHandlers=function(e,n,r){var o=[];return("load"===n?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var n=t(e,r);null!==n&&o.push(n)})),o},t}(),Cl="://",Nl=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){w(null!=e,(function(){return"scheme must not be undefined or null."})),e.endsWith(Cl)&&(e=e.slice(0,e.indexOf(Cl))),w(e.length>0,(function(){return"scheme must not be an empty string."}));var r=t.getInstance();w(null==r.managers[e],(function(){return"A model store manager is already registered for scheme '"+e+"'."})),r.managers[e]=n},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error("Cannot find model manager for scheme '"+t+"'");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function kl(t){if(-1===t.indexOf(Cl))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+Nl.getSchemes().join(","));return{scheme:t.split(Cl)[0],path:t.split(Cl)[1]}}function Ol(t,e,n){return void 0===n&&(n=!1),u(this,void 0,void 0,(function(){var r,o,i,a,s,u,c,l,d;return p(this,(function(p){switch(p.label){case 0:return w(t!==e,(function(){return"Old path and new path are the same: '"+t+"'"})),w((r=Sl.getLoadHandlers(t)).length>0,(function(){return"Copying failed because no load handler is found for source URL "+t+"."})),w(r.length<2,(function(){return"Copying failed because more than one ("+r.length+") load handlers for source URL "+t+"."})),o=r[0],w((i=Sl.getSaveHandlers(e)).length>0,(function(){return"Copying failed because no save handler is found for destination URL "+e+"."})),w(i.length<2,(function(){return"Copying failed because more than one ("+r.length+") save handlers for destination URL "+e+"."})),a=i[0],s=kl(t).scheme,u=kl(t).path,c=s===kl(t).scheme,[4,o.load()];case 1:return l=p.sent(),n&&c?[4,Nl.getManager(s).removeModel(u)]:[3,3];case 2:p.sent(),p.label=3;case 3:return[4,a.save(l)];case 4:return d=p.sent(),!n||c?[3,6]:[4,Nl.getManager(s).removeModel(u)];case 5:p.sent(),p.label=6;case 6:return[2,d.modelArtifactsInfo]}}))}))}var Dl="models_store",Ml="model_info_store";function Ll(){if(!l().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t=window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function Pl(t){var e=t.result;e.createObjectStore(Dl,{keyPath:"modelPath"}),e.createObjectStore(Ml,{keyPath:"modelPath"})}var Bl=function(){function t(t){if(this.indexedDB=Ll(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){return p(this,(function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){return p(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,e){var n=this;return new Promise((function(t,r){var o=n.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return Pl(o)},o.onsuccess=function(){var i=o.result;if(null==e){var a=i.transaction(Dl,"readonly"),s=a.objectStore(Dl).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return i.close(),r(new Error("Cannot find model with path '"+n.modelPath+"' in IndexedDB."));t(s.result.modelArtifacts)},s.onerror=function(t){return i.close(),r(s.error)},a.oncomplete=function(){return i.close()}}else{var u,p=Tl(e),c=i.transaction(Ml,"readwrite"),l=c.objectStore(Ml),d=l.put({modelPath:n.modelPath,modelArtifactsInfo:p});d.onsuccess=function(){var o=(u=i.transaction(Dl,"readwrite")).objectStore(Dl).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:p});o.onsuccess=function(){return t({modelArtifactsInfo:p})},o.onerror=function(t){var e=(l=c.objectStore(Ml)).delete(n.modelPath);e.onsuccess=function(){return i.close(),r(o.error)},e.onerror=function(t){return i.close(),r(o.error)}}},d.onerror=function(t){return i.close(),r(d.error)},c.oncomplete=function(){null==u?i.close():u.oncomplete=function(){return i.close()}}}},o.onerror=function(t){return r(o.error)}}))},t.URL_SCHEME="indexeddb://",t}(),Fl=function(t){return l().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Bl.URL_SCHEME)?(e=t.slice(Bl.URL_SCHEME.length),new Bl(e)):null;var e};Sl.registerSaveRouter(Fl),Sl.registerLoadRouter(Fl);var Ul=function(){function t(){this.indexedDB=Ll()}return t.prototype.listModels=function(){return u(this,void 0,void 0,(function(){var t=this;return p(this,(function(e){return[2,new Promise((function(e,n){var r=t.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return Pl(r)},r.onsuccess=function(){var t=r.result,o=t.transaction(Ml,"readonly"),i=o.objectStore(Ml).getAll();i.onsuccess=function(){for(var t={},n=0,r=i.result;n<r.length;n++){var o=r[n];t[o.modelPath]=o.modelArtifactsInfo}e(t)},i.onerror=function(e){return t.close(),n(i.error)},o.oncomplete=function(){return t.close()}},r.onerror=function(t){return n(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return u(this,void 0,void 0,(function(){var e=this;return p(this,(function(n){var r;return t=(r=t).startsWith(Bl.URL_SCHEME)?r.slice(Bl.URL_SCHEME.length):r,[2,new Promise((function(n,r){var o=e.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return Pl(o)},o.onsuccess=function(){var e,i=o.result,a=i.transaction(Ml,"readwrite"),s=a.objectStore(Ml),u=s.get(t);u.onsuccess=function(){if(null==u.result)return i.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var o=s.delete(t),a=function(){var o=(e=i.transaction(Dl,"readwrite")).objectStore(Dl).delete(t);o.onsuccess=function(){return n(u.result.modelArtifactsInfo)},o.onerror=function(t){return r(u.error)}};o.onsuccess=a,o.onerror=function(t){return a(),i.close(),r(u.error)}},u.onerror=function(t){return i.close(),r(u.error)},a.oncomplete=function(){null==e?i.close():e.oncomplete=function(){return i.close()}}},o.onerror=function(t){return r(o.error)}}))]}))}))},t}();if(l().getBool("IS_BROWSER"))try{Nl.registerManager(Bl.URL_SCHEME,new Ul)}catch(a){}var ql="/",Gl="tensorflowjs_models",Wl="info",zl="model_topology",Vl="weight_specs",Hl="weight_data",Xl="model_metadata";function Yl(t){return{info:[Gl,t,Wl].join(ql),topology:[Gl,t,zl].join(ql),weightSpecs:[Gl,t,Vl].join(ql),weightData:[Gl,t,Hl].join(ql),modelMetadata:[Gl,t,Xl].join(ql)}}function $l(t){var e=t.split(ql);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join(ql)}var jl=function(){function t(t){if(!l().getBool("IS_BROWSER")||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Yl(this.modelPath)}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return p(this,(function(i){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=Tl(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,(a=t.weightData,wl?o.from(a).toString("base64"):btoa(String.fromCharCode.apply(null,new Uint8Array(a))))),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy})),[2,{modelArtifactsInfo:r}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}var a;return[2]}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,i,a,s;return p(this,(function(u){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(e.modelTopology=n,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(e.weightSpecs=r,null!=(i=this.LS.getItem(this.keys.modelMetadata))&&(a=JSON.parse(i),e.format=a.format,e.generatedBy=a.generatedBy,e.convertedBy=a.convertedBy),null==(s=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return e.weightData=function(t){if(wl){var e=o.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}for(var n=atob(t),r=new Uint8Array(n.length),i=0;i<n.length;++i)r.set([n.charCodeAt(i)],i);return r.buffer}(s),[2,e]}))}))},t.URL_SCHEME="localstorage://",t}(),Kl=function(t){return l().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(jl.URL_SCHEME)?(e=t.slice(jl.URL_SCHEME.length),new jl(e)):null;var e};Sl.registerSaveRouter(Kl),Sl.registerLoadRouter(Kl);var Zl=function(){function t(){w(l().getBool("IS_BROWSER"),(function(){return"Current environment is not a web browser"})),w(void 0!==window.localStorage,(function(){return"Current browser does not appear to support localStorage"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i;return p(this,(function(a){for(t={},e=Gl+ql,n=ql+Wl,r=0;r<this.LS.length;++r)(o=this.LS.key(r)).startsWith(e)&&o.endsWith(n)&&(i=$l(o),t[i]=JSON.parse(this.LS.getItem(o)));return[2,t]}))}))},t.prototype.removeModel=function(t){return u(this,void 0,void 0,(function(){var e,n;return p(this,(function(r){var o;if(t=(o=t).startsWith(jl.URL_SCHEME)?o.slice(jl.URL_SCHEME.length):o,e=Yl(t),null==this.LS.getItem(e.info))throw new Error("Cannot find model at path '"+t+"'");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]}))}))},t}();if(l().getBool("IS_BROWSER"))try{Nl.registerManager(jl.URL_SCHEME,new Zl)}catch(a){}var Ql="model",Jl=".json",td=".weights.bin";function ed(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var nd=function(){function t(e){if(!l().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e=Ql),this.modelTopologyFileName=e+Jl,this.weightDataFileName=e+td}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a;return p(this,(function(s){switch(s.label){case 0:if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 1:return n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=o,[4,ed((function(){return i.dispatchEvent(new MouseEvent("click"))}))];case 2:return s.sent(),null==t.weightData?[3,4]:((a=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,a.href=e,[4,ed((function(){return a.dispatchEvent(new MouseEvent("click"))}))]);case 3:s.sent(),s.label=4;case 4:return[2,{modelArtifactsInfo:Tl(t)}]}}))}))},t.URL_SCHEME="downloads://",t}(),rd=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}return t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n=this;return p(this,(function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise((function(r,o){var i=new FileReader;i.onload=function(i){var a=JSON.parse(i.target.result),s=a.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=a.weightsManifest;if(null!=u){var p;try{p=n.checkManifestAndWeightFiles(u,e)}catch(t){return void o(t)}var c=[],l=[],d=[];u.forEach((function(t){t.paths.forEach((function(t){l.push(t),d.push(null)})),c.push.apply(c,t.weights)})),u.forEach((function(t){t.paths.forEach((function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,o=l.indexOf(t);d[o]=n,-1===d.indexOf(null)&&r({modelTopology:s,weightSpecs:c,weightData:Il(d)})},e.onerror=function(e){return o("Failed to weights data from file of path '"+t+"'.")},e.readAsArrayBuffer(p[t])}))}))}else o(new Error("weightManifest field is missing from file "+t.name))}else o(new Error("modelTopology field is missing from file "+t.name))},i.onerror=function(e){return o("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},i.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map((function(t){return Rl(t.name)})),o={},i=0,a=t;i<a.length;i++)a[i].paths.forEach((function(t){var i=Rl(t);if(-1!==n.indexOf(i))throw new Error("Duplicate file basename found in weights manifest: '"+i+"'");if(n.push(i),-1===r.indexOf(i))throw new Error("Weight file with basename '"+i+"' is not provided.");o[t]=e[r.indexOf(i)]}));if(n.length!==e.length)throw new Error("Mismatch in the number of files in weights manifest ("+n.length+") and the number of weight files provided ("+e.length+").");return o},t}();function od(t,e,n,r){!function(t){w(null!=t&&Array.isArray(t)&&t.length>0,(function(){return"promises must be a none empty array"}))}(t),function(t,e){w(t>=0&&t<=1,(function(){return"Progress fraction must be in range [0, 1], but got startFraction "+t})),w(e>=0&&e<=1,(function(){return"Progress fraction must be in range [0, 1], but got endFraction "+e})),w(e>=t,(function(){return"startFraction must be no more than endFraction, but got startFraction "+t+" and endFraction "+e}))}(n=null==n?0:n,r=null==r?1:r);var o=0;return Promise.all(t.map((function(i){return i.then((function(i){var a=n+ ++o/t.length*(r-n);return e(a),i})),i})))}function id(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,c,d;return p(this,(function(p){switch(p.label){case 0:return null==e&&(e={}),n=null==e.fetchFunc?l().platform.fetch:e.fetchFunc,r=t.map((function(t){return n(t,e.requestInit,{isBinary:!0})})),o=0,i=.5,null!=e.onProgress?[3,2]:[4,Promise.all(r)];case 1:return a=p.sent(),[3,4];case 2:return[4,od(r,e.onProgress,o,i)];case 3:a=p.sent(),p.label=4;case 4:return s=a.map((function(t){return t.arrayBuffer()})),u=.5,c=1,null!=e.onProgress?[3,6]:[4,Promise.all(s)];case 5:return d=p.sent(),[3,8];case 6:return[4,od(s,e.onProgress,u,c)];case 7:d=p.sent(),p.label=8;case 8:return[2,d]}}))}))}function ad(t){var e=this;return function(n,r,o){return void 0===r&&(r=""),u(e,void 0,void 0,(function(){var e,i,a,s,u,c,l,d,f,h;return p(this,(function(p){switch(p.label){case 0:if(e=n.map((function(){return!1})),i={},a=null!=o?o.map((function(){return!1})):[],s=[],n.forEach((function(t,n){var r=0;t.weights.forEach((function(t){var u="quantization"in t?t.quantization.dtype:t.dtype,p=_l[u]*T(t.shape),c=function(){e[n]=!0,null==i[n]&&(i[n]=[]),i[n].push({manifestEntry:t,groupOffset:r,sizeBytes:p})};null!=o?o.forEach((function(e,n){e===t.name&&(c(),a[n]=!0)})):c(),s.push(t.name),r+=p}))})),!a.every((function(t){return t})))throw u=o.filter((function(t,e){return!a[e]})),new Error("Could not find weights in manifest with names: "+u.join(", ")+". \nManifest JSON has weights with names: "+s.join(", ")+".");return c=e.reduce((function(t,e,n){return e&&t.push(n),t}),[]),l=[],c.forEach((function(t){n[t].paths.forEach((function(t){var e=r+(r.endsWith("/")?"":"/")+t;l.push(e)}))})),[4,t(l)];case 1:return d=p.sent(),f={},h=0,c.forEach((function(t){for(var e=n[t].paths.length,r=0,o=0;o<e;o++)r+=d[h+o].byteLength;for(var a=new ArrayBuffer(r),s=new Uint8Array(a),u=0,p=0;p<e;p++){var c=new Uint8Array(d[h+p]);s.set(c,u),u+=c.byteLength}i[t].forEach((function(t){var e=xl(a.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var n in e)f[n]=e[n]})),h+=e})),[2,f]}}))}))}}Sl.registerSaveRouter((function(t){return l().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(nd.URL_SCHEME)?(void 0===(e=t.slice(nd.URL_SCHEME.length))&&(e="model"),new nd(e)):null;var e}));var sd=function(){function t(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(w("function"==typeof e.fetchFunc,(function(){return"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=e.fetchFunc):this.fetch=l().platform.fetch,w(null!=t&&t.length>0,(function(){return"URL path for http must not be null, undefined or empty."})),Array.isArray(t)&&w(2===t.length,(function(){return"URL paths for http must have a length of 2, (actual length is "+t.length+")."})),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o;return p(this,(function(i){switch(i.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:n},e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.fetch(this.path,e)];case 1:if((o=i.sent()).ok)return[2,{modelArtifactsInfo:Tl(t),responses:[o]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+o.status+".")}}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i,a,s;return p(this,(function(u){switch(u.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=u.sent()).ok)throw new Error("Request to "+this.path+" failed with status code "+t.status+". Please verify this URL points to the model JSON of the model to load.");u.label=2;case 2:return u.trys.push([2,4,,5]),[4,t.json()];case 3:return e=u.sent(),[3,5];case 4:throw u.sent(),n="Failed to parse model JSON of response from "+this.path+".",this.path.endsWith(".pb")?n+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":n+=" Please make sure the server is serving valid JSON for this request.",new Error(n);case 5:if(r=e.modelTopology,o=e.weightsManifest,null==r&&null==o)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==o?[3,7]:[4,this.loadWeights(o)];case 6:s=u.sent(),i=s[0],a=s[1],u.label=7;case 7:return[2,{modelTopology:r,weightSpecs:i,weightData:a}]}}))}))},t.prototype.loadWeights=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s,u,c,l,d;return p(this,(function(p){switch(p.label){case 0:for(e=Array.isArray(this.path)?this.path[1]:this.path,n=function(t){var e=t.lastIndexOf("/"),n=t.lastIndexOf("?");return[t.substring(0,e)+"/",n>e?t.substring(n):""]}(e),r=n[0],o=n[1],i=this.weightPathPrefix||r,a=[],s=0,u=t;s<u.length;s++)c=u[s],a.push.apply(a,c.weights);return l=[],t.forEach((function(t){t.paths.forEach((function(t){l.push(i+t+o)}))})),[4,id(l,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return d=p.sent(),[2,[a,Il(d)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\/\//,t}();function ud(t){return null!=t.match(sd.URL_SCHEME_REGEX)}var pd=function(t,e){return"undefined"==typeof fetch?null:(Array.isArray(t)?t.every((function(t){return ud(t)})):ud(t))?cd(t,{onProgress:e}):null};function cd(t,e){return new sd(t,e)}Sl.registerSaveRouter(pd),Sl.registerLoadRouter(pd);var ld=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return u(this,void 0,void 0,(function(){return p(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),dd=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){return p(this,(function(e){return[2,this.saveHandler(t)]}))}))},t}(),fd=Object.freeze({browserFiles:function(t){return new rd(t)},browserHTTPRequest:function(t,e){return cd(t,e)},concatenateArrayBuffers:Il,decodeWeights:xl,encodeWeights:function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s=this;return p(this,(function(c){switch(c.label){case 0:for(n=[],r=[],o=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),i=function(i){var a=o[i],c=Array.isArray(t)?t[i].tensor:t[a];if("float32"!==c.dtype&&"int32"!==c.dtype&&"bool"!==c.dtype&&"string"!==c.dtype)throw new Error("Unsupported dtype in weight '"+a+"': "+c.dtype);var l={name:a,shape:c.shape,dtype:c.dtype};if("string"===c.dtype){var d=new Promise((function(t){return u(s,void 0,void 0,(function(){var e,n,r,o,i,a,s;return p(this,(function(u){switch(u.label){case 0:return[4,c.bytes()];case 1:for(e=u.sent(),n=e.reduce((function(t,e){return t+e.length}),0)+bl*e.length,r=new Uint8Array(n),o=0,i=0;i<e.length;i++)a=e[i],s=new Uint8Array(new Uint32Array([a.length]).buffer),r.set(s,o),o+=bl,r.set(a,o),o+=a.length;return t(r),[2]}}))}))}));r.push(d)}else r.push(c.data());null!=e&&(l.group=e),n.push(l)},a=0;a<o.length;++a)i(a);return[4,Promise.all(r)];case 1:return[2,{data:El(c.sent()),specs:n}]}}))}))},fromMemory:function(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new ld(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new ld({modelTopology:t})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new ld({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))},getLoadHandlers:function(t,e){return Sl.getLoadHandlers(t,e)},getModelArtifactsInfoForJSON:Tl,getSaveHandlers:function(t){return Sl.getSaveHandlers(t)},http:cd,isHTTPScheme:ud,loadWeights:function(t,e,n,r){return void 0===e&&(e=""),u(this,void 0,void 0,(function(){return p(this,(function(o){return[2,ad((function(t){return id(t,{requestInit:r})}))(t,e,n)]}))}))},registerLoadRouter:function(t){return Sl.registerLoadRouter(t)},registerSaveRouter:function(t){return Sl.registerSaveRouter(t)},weightsLoaderFactory:ad,withSaveHandler:function(t){return new dd(t)},copyModel:function(t,e){return u(this,void 0,void 0,(function(){return p(this,(function(n){return[2,Ol(t,e,!1)]}))}))},listModels:function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i,a;return p(this,(function(s){switch(s.label){case 0:t=Nl.getSchemes(),e={},n=0,r=t,s.label=1;case 1:return n<r.length?(o=r[n],[4,Nl.getManager(o).listModels()]):[3,4];case 2:for(a in i=s.sent())e[o+Cl+a]=i[a];s.label=3;case 3:return n++,[3,1];case 4:return[2,e]}}))}))},moveModel:function(t,e){return u(this,void 0,void 0,(function(){return p(this,(function(n){return[2,Ol(t,e,!0)]}))}))},removeModel:function(t){return u(this,void 0,void 0,(function(){var e;return p(this,(function(n){return e=kl(t),[2,Nl.getManager(e.scheme).removeModel(e.path)]}))}))}}),hd=Tn({confusionMatrix_:function(t,e,n){var r=mn(t,"labels","confusionMatrix"),o=mn(e,"predictions","confusionMatrix");w(null==n||n>0&&Number.isInteger(n),(function(){return"If provided, numClasses must be a positive integer, but got "+n})),w(1===r.rank,(function(){return"Expected the rank of labels to be 1, but got "+r.rank})),w(1===o.rank,(function(){return"Expected the rank of predictions to be 1, but got "+o.rank})),w(r.shape[0]===o.shape[0],(function(){return"Mismatch in the number of examples: "+r.shape[0]+" vs. "+o.shape[0]+". Labels and predictions should have the same number of elements."})),w(n>0&&Number.isInteger(n),(function(){return"numClasses is required to be a positive integer, but got "+n}));var i=Er(r.asType("int32"),n),a=Er(o.asType("int32"),n);return i.transpose().matMul(a).asType("int32")}}),md=Object.freeze({confusionMatrix:hd}),gd=Tn({fromPixels_:function(t,e){if(void 0===e&&(e=3),e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");var n="undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement;if(n&&n&&t.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");return Pt.fromPixels(t,e)}}),vd=Object.freeze({toPixels:function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,c,l,d,f,h,m,g,v,y,_,b,x,E,w,A,I;return p(this,(function(p){switch(p.label){case 0:if(n=mn(t,"img","toPixels"),t instanceof _t||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+n.rank+".");if(r=n.shape.slice(0,2),o=r[0],i=r[1],(a=2===n.rank?1:n.shape[2])>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);return[4,n.data()];case 1:return s=p.sent(),u=n.min(),c=n.max(),[4,Promise.all([u.data(),c.data()])];case 2:if(l=p.sent(),d=l[0],f=l[1],h=d[0],m=f[0],u.dispose(),c.dispose(),"float32"===n.dtype){if(h<0||m>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+h+" - "+m+"].")}else{if("int32"!==n.dtype)throw new Error("Unsupported type for toPixels: "+n.dtype+". Please use float32 or int32 tensors.");if(h<0||m>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+h+" - "+m+"].")}for(g="float32"===n.dtype?255:1,v=new Uint8ClampedArray(i*o*4),y=0;y<o*i;++y)_=void 0,b=void 0,x=void 0,E=void 0,1===a?(_=s[y]*g,b=s[y]*g,x=s[y]*g,E=255):3===a?(_=s[3*y]*g,b=s[3*y+1]*g,x=s[3*y+2]*g,E=255):4===a&&(_=s[4*y]*g,b=s[4*y+1]*g,x=s[4*y+2]*g,E=s[4*y+3]*g),v[0+(w=4*y)]=Math.round(_),v[w+1]=Math.round(b),v[w+2]=Math.round(x),v[w+3]=Math.round(E);return null!=e&&(e.width=i,e.height=o,A=e.getContext("2d"),I=new ImageData(v,i,o),A.putImageData(I,0,0)),n!==t&&n.dispose(),[2,v]}}))}))},fromPixels:gd}),yd=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),_d=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(e){t.getMap().classNameMap[e.className]=[e,e.fromConfig]},t}();function bd(t){w(null!=t.className,(function(){return"Class being registered does not have the static className property defined."})),w("string"==typeof t.className,(function(){return"className is required to be a string, but got type "+typeof t.className})),w(t.className.length>0,(function(){return"Class being registered has an empty-string as its className, which is disallowed."})),_d.register(t)}var xd=Object.freeze({Serializable:yd,SerializationMap:_d,registerClass:bd}),Ed=.001,wd=.1;function Ad(){return 32===Pt.backend.floatPrecision()?Ed:wd}function Id(t,e,n){var r=!0;if((W(t)||W(e))&&(r=!1),W(t)&&W(e)&&(r=!0),r){var o=t.constructor.name,i=e.constructor.name;if(o!==i)throw new Error("Arrays are of different type. Actual: "+o+". Expected: "+i)}if(Array.isArray(t)&&Array.isArray(e)){var a=fn(t),s=fn(e);if(!S(a,s))throw new Error("Arrays have different shapes. Actual: ["+a+"]. Expected: ["+s+"]")}var u=W(t)?t:R(t),p=W(e)?e:R(e);if(u.length!==p.length)throw new Error("Arrays have different lengths actual: "+u.length+" vs expected: "+p.length+".\nActual:   "+u+".\nExpected: "+p+".");for(var c=0;c<p.length;++c){var l=u[c],d=p[c];if(!n(l,d))throw new Error("Arrays differ: actual["+c+"] = "+l+", expected["+c+"] = "+d+".\nActual:   "+u+".\nExpected: "+p+".")}}function Rd(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var Td=Object.freeze({TEST_EPSILON_FLOAT16:wd,expectArraysClose:function(t,e,n){return null==n&&(n=Ad()),Id(t,e,(function(t,e){return Rd(t,e,n)}))},testEpsilon:Ad,expectPromiseToFail:function(t,e){t().then((function(){return e.fail()}),(function(){return e()}))},expectArraysEqual:function(t,e){var n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return H(t)||H(t[0])||H(e)||H(e[0])?Id(t,n,(function(t,e){return t==e})):Id(t,e,(function(t,e){return Rd(t,e,0)}))},expectNumbersClose:function(t,e,n){if(null==n&&(n=Ad()),!Rd(t,e,n))throw new Error("Numbers differ: actual === "+t+", expected === "+e)},expectValuesInRange:function(t,e,n){for(var r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error("Value out of range:"+t[r]+" low: "+e+", high: "+n)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}}),Sd="1.3.1",Cd=Object.freeze({gpgpu_util:_a,webgl_util:We,forceHalfFloat:function(){l().set("WEBGL_FORCE_F16_TEXTURES",!0)},MathBackendWebGL:Ss,setWebGLContext:Vt,GPGPUContext:ba}),Nd=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),o=r.value,i=r.grads;if(null!=n){var a=n.map((function(t){return{name:t.name,tensor:i[t.name]}}));this.applyGradients(a)}else this.applyGradients(i);return Je(i),e?o:(o.dispose(),null)},Object.defineProperty(e.prototype,"iterations",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),e.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},e.prototype.computeGradients=function(t,e){return so(t,e)},e.prototype.dispose=function(){null!=this.iterations_&&Je(this.iterations_)},e.prototype.saveIterations=function(){return u(this,void 0,void 0,(function(){return p(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:"iter",tensor:Dn(this.iterations_,"int32")}]}))}))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return p(this,(function(t){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return p(this,(function(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}))}))},e.prototype.extractIterations=function(t){return u(this,void 0,void 0,(function(){var e;return p(this,(function(n){switch(n.label){case 0:return e=this,[4,t[0].tensor.data()];case 1:return e.iterations_=n.sent()[0],[2,t.slice(1)]}}))}))},e}(yd);Object.defineProperty(Nd,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var kd=function(t){function e(e,n,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=e,o.rho=n,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Pt.backend.epsilon()),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Pt.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accum_grad",variable:Qe((function(){return Yn(o).variable(!1)}))}),null==e.accumulatedUpdates[r]&&(e.accumulatedUpdates[r]={originalName:n+"/accum_var",variable:Qe((function(){return Yn(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedGrads[r].variable,s=e.accumulatedUpdates[r].variable;Qe((function(){var t=a.mul(e.rho).add(i.square().mul(1-e.rho)),n=s.add(e.epsilon).sqrt().div(a.add(e.epsilon).sqrt()).mul(i),r=s.mul(e.rho).add(n.square().mul(1-e.rho));a.assign(t),s.assign(r);var u=n.mul(-e.learningRate).add(o);o.assign(u)}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedUpdates&&(Je(this.accumulatedGrads.map((function(t){return t.variable}))),Je(this.accumulatedUpdates.map((function(t){return t.variable}))))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return p(this,(function(e){switch(e.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e;return p(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=t.length/2,this.accumulatedGrads=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},e.className="Adadelta",e}(Nd);bd(kd);var Od=function(t){function e(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads=[],r}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Pt.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accumulator",variable:Qe((function(){return zn(o.shape,e.initialAccumulatorValue).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedGrads[r].variable;Qe((function(){var t=a.add(i.square());a.assign(t);var n=i.div(t.add(Pt.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);o.assign(n)}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedGrads&&Je(this.accumulatedGrads.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return p(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return p(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},e.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},e.className="Adagrad",e}(Nd);bd(Od);var Dd=function(t){function e(e,n,r,o){void 0===o&&(o=null);var i=t.call(this)||this;return i.learningRate=e,i.beta1=n,i.beta2=r,i.epsilon=o,i.accumulatedFirstMoment=[],i.accumulatedSecondMoment=[],Qe((function(){i.accBeta1=Dn(n).variable(),i.accBeta2=Dn(r).variable()})),null==o&&(i.epsilon=Pt.backend.epsilon()),i}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Qe((function(){var r=ju(1,e.accBeta1),o=ju(1,e.accBeta2);n.forEach((function(n,i){var a=Pt.registeredVariables[n];null==e.accumulatedFirstMoment[i]&&(e.accumulatedFirstMoment[i]={originalName:n+"/m",variable:Qe((function(){return Yn(a).variable(!1)}))}),null==e.accumulatedSecondMoment[i]&&(e.accumulatedSecondMoment[i]={originalName:n+"/v",variable:Qe((function(){return Yn(a).variable(!1)}))});var s=Array.isArray(t)?t[i].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[i].variable,p=e.accumulatedSecondMoment[i].variable,c=u.mul(e.beta1).add(s.mul(1-e.beta1)),l=p.mul(e.beta2).add(s.square().mul(1-e.beta2)),d=c.div(r),f=l.div(o);u.assign(c),p.assign(l);var h=d.div(f.sqrt().add(e.epsilon)).mul(-e.learningRate).add(a);a.assign(h)}})),e.accBeta1.assign(e.accBeta1.mul(e.beta1)),e.accBeta2.assign(e.accBeta2.mul(e.beta2))})),this.incrementIterations()},e.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Je(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&Je(this.accumulatedSecondMoment.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return p(this,(function(e){switch(e.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e,n=this;return p(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),Qe((function(){n.accBeta1.assign(Hu(n.beta1,n.iterations_+1)),n.accBeta2.assign(Hu(n.beta2,n.iterations_+1))})),e=t.length/2,this.accumulatedFirstMoment=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},e.className="Adam",e}(Nd);bd(Dd);var Md=function(t){function e(e,n,r,o,i){void 0===o&&(o=null),void 0===i&&(i=0);var a=t.call(this)||this;return a.learningRate=e,a.beta1=n,a.beta2=r,a.epsilon=o,a.decay=i,a.accumulatedFirstMoment=[],a.accumulatedWeightedInfNorm=[],Qe((function(){a.iteration=Dn(0).variable(),a.accBeta1=Dn(n).variable()})),null==o&&(a.epsilon=Pt.backend.epsilon()),a}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Qe((function(){var r=ju(1,e.accBeta1),o=Mu(-e.learningRate,e.iteration.mul(e.decay).add(1));n.forEach((function(n,i){var a=Pt.registeredVariables[n];null==e.accumulatedFirstMoment[i]&&(e.accumulatedFirstMoment[i]={originalName:n+"/m",variable:Yn(a).variable(!1)}),null==e.accumulatedWeightedInfNorm[i]&&(e.accumulatedWeightedInfNorm[i]={originalName:n+"/v",variable:Yn(a).variable(!1)});var s=Array.isArray(t)?t[i].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[i].variable,p=e.accumulatedWeightedInfNorm[i].variable,c=u.mul(e.beta1).add(s.mul(1-e.beta1)),l=p.mul(e.beta2),d=s.abs(),f=l.maximum(d);u.assign(c),p.assign(f);var h=o.div(r).mul(c.div(f.add(e.epsilon))).add(a);a.assign(h)}})),e.iteration.assign(e.iteration.add(1)),e.accBeta1.assign(e.accBeta1.mul(e.beta1))})),this.incrementIterations()},e.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Je(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&Je(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return p(this,(function(t){throw new Error("getWeights() is not implemented for Adamax yet.")}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return p(this,(function(t){throw new Error("setWeights() is not implemented for Adamax yet.")}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},e.className="Adamax",e}(Nd);bd(Md);var Ld=function(t){function e(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Array.isArray(t)?t[r].tensor:t[n];if(null!=o){var i=Pt.registeredVariables[n];Qe((function(){var t=e.c.mul(o).add(i);i.assign(t)}))}})),this.incrementIterations()},e.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=tn(Dn(-t))},e.prototype.dispose=function(){this.c.dispose()},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return p(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return p(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=e.sent()).length)throw new Error("SGD optimizer does not have settable weights.");return[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate}},e.fromConfig=function(t,e){return new t(e.learningRate)},e.className="SGD",e}(Nd);bd(Ld);var Pd=function(t){function e(e,n,r){void 0===r&&(r=!1);var o=t.call(this,e)||this;return o.learningRate=e,o.momentum=n,o.useNesterov=r,o.accumulations=[],o.m=Dn(o.momentum),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Pt.registeredVariables[n];null==e.accumulations[r]&&(e.accumulations[r]={originalName:n+"/momentum",variable:Qe((function(){return Yn(o).variable(!1)}))});var i=e.accumulations[r].variable,a=Array.isArray(t)?t[r].tensor:t[n];null!=a&&Qe((function(){var t,n=e.m.mul(i).add(a);t=e.useNesterov?e.c.mul(a.add(n.mul(e.m))).add(o):e.c.mul(n).add(o),i.assign(n),o.assign(t)}))})),this.incrementIterations()},e.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&Je(this.accumulations.map((function(t){return t.variable})))},e.prototype.setMomentum=function(t){this.momentum=t},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return p(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return p(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},e.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},e.className="Momentum",e}(Ld);bd(Pd);var Bd=function(t){function e(e,n,r,o,i){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===i&&(i=!1);var a=t.call(this)||this;return a.learningRate=e,a.decay=n,a.momentum=r,a.epsilon=o,a.accumulatedMeanSquares=[],a.accumulatedMoments=[],a.accumulatedMeanGrads=[],a.centered=i,null==o&&(a.epsilon=Pt.backend.epsilon()),a}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Pt.registeredVariables[n];null==e.accumulatedMeanSquares[r]&&(e.accumulatedMeanSquares[r]={originalName:n+"/rms",variable:Qe((function(){return Yn(o).variable(!1)}))}),null==e.accumulatedMoments[r]&&(e.accumulatedMoments[r]={originalName:n+"/momentum",variable:Qe((function(){return Yn(o).variable(!1)}))}),null==e.accumulatedMeanGrads[r]&&e.centered&&(e.accumulatedMeanGrads[r]={originalName:n+"/mg",variable:Qe((function(){return Yn(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedMeanSquares[r].variable,s=e.accumulatedMoments[r].variable;Qe((function(){var t=a.mul(e.decay).add(i.square().mul(1-e.decay));if(e.centered){var n=e.accumulatedMeanGrads[r].variable,u=n.mul(e.decay).add(i.mul(1-e.decay)),p=s.mul(e.momentum).add(i.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));a.assign(t),n.assign(u),s.assign(p);var c=o.sub(p);o.assign(c)}else{var l=a.mul(e.decay).add(i.square().mul(1-e.decay));p=s.mul(e.momentum).add(i.mul(e.learningRate).div(l.add(e.epsilon).sqrt())),a.assign(l),s.assign(p),c=o.sub(p),o.assign(c)}}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&Je(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&Je(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&Je(this.accumulatedMoments.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return p(this,(function(e){switch(e.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e;return p(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=this.centered?t.length/3:t.length/2,this.accumulatedMeanSquares=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},e.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},e.className="RMSProp",e}(Nd);bd(Bd);var Fd=function(){function t(){}return t.sgd=function(t){return new Ld(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new Pd(t,e,n)},t.rmsprop=function(t,e,n,r,o){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===o&&(o=!1),new Bd(t,e,n,r,o)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new Dd(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=null),new kd(t,e,n)},t.adamax=function(t,e,n,r,o){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===o&&(o=0),new Md(t,e,n,r,o)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new Od(t,e)},t}(),Ud={sgd:Fd.sgd,momentum:Fd.momentum,adadelta:Fd.adadelta,adagrad:Fd.adagrad,rmsprop:Fd.rmsprop,adamax:Fd.adamax,adam:Fd.adam},qd="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:void 0!==i?i:function(t){return t()};function Gd(){return new Promise((function(t){return qd((function(){return t()}))}))}vt=dl}.call(this,n(1),n(3),n(5).Buffer,n(9).setImmediate)},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){t.exports=p5},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,p=[],c=!1,l=-1;function d(){c&&u&&(c=!1,u.length?p=u.concat(p):l=-1,p.length&&f())}function f(){if(!c){var t=s(d);c=!0;for(var e=p.length;e;){for(u=p,p=[];++l<e;)u&&u[l].run();l=-1,e=p.length}u=null,c=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function h(t,e){this.fun=t,this.array=e}function m(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];p.push(new h(t,e)),1!==p.length||c||s(f)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(module,exports,__webpack_require__){(function(){var $,ABS,ADD,ADJ,AND,APPROXRATIO,ARCCOS,ARCCOSH,ARCSIN,ARCSINH,ARCTAN,ARCTANH,ARG,ASSUME_REAL_VARIABLES,ATOMIZE,AUTOEXPAND,BAKE,BESSELJ,BESSELY,BINDING,BINOMIAL,BINOM_check_args,BUF,C1,C2,C3,C4,C5,C6,CEILING,CHECK,CHOOSE,CIRCEXP,CLEAR,CLEARALL,CLEARPATTERNS,CLOCK,COEFF,COFACTOR,CONDENSE,CONJ,CONS,CONTRACT,COS,COSH,Condense,DEBUG,DEBUG_ABS,DEBUG_ARG,DEBUG_CLOCKFORM,DEBUG_IMAG,DEBUG_IS,DEBUG_POWER,DEBUG_RECT,DECOMP,DEFINT,DEGREE,DENOMINATOR,DERIVATIVE,DET,DET_check_arg,DIM,DIRAC,DIVISORS,DO,DOT,DOUBLE,DRAW,DRAWX,DSOLVE,E,EIGEN,EIGENVAL,EIGENVEC,EIG_N,EIG_check_arg,EIG_yydd,EIG_yyqq,ERF,ERFC,EVAL,EXP,EXPAND,EXPCOS,EXPSIN,Eval,Eval_Eval,Eval_abs,Eval_add,Eval_adj,Eval_and,Eval_approxratio,Eval_arccos,Eval_arccosh,Eval_arcsin,Eval_arcsinh,Eval_arctan,Eval_arctanh,Eval_arg,Eval_besselj,Eval_bessely,Eval_binding,Eval_binomial,Eval_ceiling,Eval_check,Eval_choose,Eval_circexp,Eval_clear,Eval_clearall,Eval_clearpatterns,Eval_clock,Eval_coeff,Eval_cofactor,Eval_condense,Eval_conj,Eval_cons,Eval_contract,Eval_cos,Eval_cosh,Eval_decomp,Eval_defint,Eval_degree,Eval_denominator,Eval_derivative,Eval_det,Eval_dim,Eval_dirac,Eval_divisors,Eval_do,Eval_dsolve,Eval_eigen,Eval_eigenval,Eval_eigenvec,Eval_erf,Eval_erfc,Eval_exp,Eval_expand,Eval_expcos,Eval_expsin,Eval_factor,Eval_factorial,Eval_factorpoly,Eval_filter,Eval_float,Eval_floor,Eval_for,Eval_function_reference,Eval_gamma,Eval_gcd,Eval_hermite,Eval_hilbert,Eval_imag,Eval_index,Eval_inner,Eval_integral,Eval_inv,Eval_invg,Eval_isinteger,Eval_isprime,Eval_laguerre,Eval_lcm,Eval_leading,Eval_legendre,Eval_log,Eval_lookup,Eval_mod,Eval_multiply,Eval_noexpand,Eval_not,Eval_nroots,Eval_number,Eval_numerator,Eval_operator,Eval_or,Eval_outer,Eval_pattern,Eval_patternsinfo,Eval_polar,Eval_power,Eval_predicate,Eval_prime,Eval_print,Eval_print2dascii,Eval_printcomputer,Eval_printhuman,Eval_printlatex,Eval_printlist,Eval_product,Eval_quote,Eval_quotient,Eval_rank,Eval_rationalize,Eval_real,Eval_rect,Eval_roots,Eval_round,Eval_setq,Eval_sgn,Eval_shape,Eval_silentpattern,Eval_simfac,Eval_simplify,Eval_sin,Eval_sinh,Eval_sqrt,Eval_stop,Eval_subst,Eval_sum,Eval_sym,Eval_symbolsinfo,Eval_tan,Eval_tanh,Eval_taylor,Eval_tensor,Eval_test,Eval_testeq,Eval_testge,Eval_testgt,Eval_testle,Eval_testlt,Eval_transpose,Eval_unit,Eval_user_function,Eval_zero,Evalpoly,FACTOR,FACTORIAL,FACTORPOLY,FILTER,FLOATF,FLOOR,FOR,FORCE_FIXED_PRINTOUT,FUNCTION,Find,GAMMA,GCD,HERMITE,HILBERT,IMAG,INDEX,INNER,INTEGRAL,INV,INVG,INV_check_arg,INV_decomp,ISINTEGER,ISPRIME,LAGUERRE,LAST,LAST_2DASCII_PRINT,LAST_FULL_PRINT,LAST_LATEX_PRINT,LAST_LIST_PRINT,LAST_PLAIN_PRINT,LAST_PRINT,LCM,LEADING,LEGENDRE,LOG,LOOKUP,M,MAXDIM,MAXPRIMETAB,MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES,MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE,MAX_FIXED_PRINTOUT_DIGITS,MAX_PROGRAM_SIZE,MEQUAL,METAA,METAB,METAX,MLENGTH,MOD,MSIGN,MULTIPLY,MZERO,N,NIL,NOT,NROOTS,NROOTS_ABS,NROOTS_DELTA,NROOTS_EPSILON,NROOTS_RANDOM,NROOTS_YMAX,NROOTS_divpoly,NSYM,NUM,NUMBER,NUMERATOR,OPERATOR,OR,OUTER,PATTERN,PATTERNSINFO,PI,POLAR,POWER,PRIME,PRINT,PRINT2DASCII,PRINTFULL,PRINTLATEX,PRINTLIST,PRINTMODE_2DASCII,PRINTMODE_COMPUTER,PRINTMODE_HUMAN,PRINTMODE_LATEX,PRINTMODE_LIST,PRINTOUTRESULT,PRINTPLAIN,PRINT_LEAVE_E_ALONE,PRINT_LEAVE_X_ALONE,PRODUCT,QUOTE,QUOTIENT,RANK,RATIONALIZE,REAL,ROOTS,ROUND,SECRETX,SELFTEST,SETQ,SGN,SHAPE,SILENTPATTERN,SIMPLIFY,SIN,SINH,SPACE_BETWEEN_COLUMNS,SPACE_BETWEEN_ROWS,SQRT,STOP,STR,SUBST,SUM,SYM,SYMBOLSINFO,SYMBOL_A,SYMBOL_A_UNDERSCORE,SYMBOL_B,SYMBOL_B_UNDERSCORE,SYMBOL_C,SYMBOL_D,SYMBOL_I,SYMBOL_IDENTITY_MATRIX,SYMBOL_J,SYMBOL_N,SYMBOL_R,SYMBOL_S,SYMBOL_T,SYMBOL_X,SYMBOL_X_UNDERSCORE,SYMBOL_Y,SYMBOL_Z,TAN,TANH,TAYLOR,TENSOR,TEST,TESTEQ,TESTGE,TESTGT,TESTLE,TESTLT,TIMING_DEBUGS,TOS,TRACE,TRANSPOSE,T_DOUBLE,T_EQ,T_FUNCTION,T_GTEQ,T_INTEGER,T_LTEQ,T_NEQ,T_NEWLINE,T_QUOTASSIGN,T_STRING,T_SYMBOL,U,UNIT,USR_SYMBOLS,VERSION,YMAX,YYE,YYRECT,ZERO,__emit_char,__emit_str,__factor_add,__factorial,__is_negative,__is_radical_number,__lcm,__legendre,__legendre2,__legendre3,__normalize_radical_factors,__rationalize_tensor,_print,abs,absValFloat,absval,absval_tensor,add,addSymbolLeftOfAssignment,addSymbolRightOfAssignment,add_all,add_factor_to_accumulator,add_numbers,add_terms,addf,adj,alloc_tensor,allocatedId,any_denominators,approxAll,approxLogs,approxLogsOfRationals,approxOneRatioOnly,approxRadicals,approxRadicalsOfRationals,approxRationalsOfLogs,approxRationalsOfPowersOfE,approxRationalsOfPowersOfPI,approxRationalsOfRadicals,approxSineOfRationalMultiplesOfPI,approxSineOfRationals,approxTrigonometric,approx_just_an_integer,approx_logarithmsOfRationals,approx_nothingUseful,approx_radicalOfRatio,approx_ratioOfRadical,approx_rationalOfE,approx_rationalOfPi,approx_rationalsOfLogarithms,approx_sine_of_pi_times_rational,approx_sine_of_rational,approxratioRecursive,arccos,arccosh,arcsin,arcsinh,arctan,arctanh,areunivarpolysfactoredorexpandedform,arg,arglist,assignmentFound,avoidCalculatingPowersIntoArctans,bake,bake_poly,bake_poly_term,besselj,bessely,bigInt,bignum_factorial,bignum_float,bignum_power_number,bignum_scan_float,bignum_scan_integer,bignum_truncate,binding,binomial,buffer,build_tensor,caaddr,caadr,caar,cadaddr,cadadr,cadar,caddaddr,caddadr,caddar,caddddr,cadddr,caddr,cadr,called_from_Algebra_block,car,cdaddr,cdadr,cdar,cddaddr,cddar,cdddaddr,cddddr,cdddr,cddr,cdr,ceiling,chainOfUserSymbolsNotFunctionsBeingEvaluated,charTabIndex,chartab,checkFloatHasWorkedOutCompletely,check_esc_flag,check_stack,check_tensor_dimensions,choose,choose_check_args,circexp,clearAlgebraEnvironment,clearRenamedVariablesToAvoidBindingToExternalScope,clear_symbols,clear_term,clearall,clockform,cmpGlyphs,cmp_args,cmp_expr,cmp_terms,cmp_terms_count,codeGen,coeff,cofactor,collectLatexStringFromReturnValue,collectUserSymbols,combine_factors,combine_gammas,combine_terms,compareState,compare_numbers,compare_rationals,compare_tensors,compatible,computeDependenciesFromAlgebra,computeResultsAndJavaScriptFromAlgebra,compute_fa,conjugate,cons,consCount,contract,convert_bignum_to_double,convert_rational_to_double,copy_tensor,cosine,cosine_of_angle,cosine_of_angle_sum,count,countOccurrencesOfSymbol,count_denominators,counter,countsize,d_scalar_scalar,d_scalar_scalar_1,d_scalar_tensor,d_tensor_scalar,d_tensor_tensor,dabs,darccos,darccosh,darcsin,darcsinh,darctan,darctanh,dbesselj0,dbesseljn,dbessely0,dbesselyn,dcos,dcosh,dd,decomp,decomp_product,decomp_sum,defineSomeHandyConstants,define_user_function,defn,defn_str,degree,denominator,derf,derfc,derivative,derivative_of_integral,det,determinant,detg,dfunction,dhermite,dirac,display,display_flag,displaychar,divide,divide_numbers,divisors,divisors_onstack,divpoly,dlog,do_clearPatterns,do_clearall,do_simplify_nested_radicals,dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication,dotprod_unicode,doubleToReasonableString,dpow,dpower,dproduct,draw_flag,draw_stop_return,dsgn,dsin,dsinh,dsum,dtan,dtanh,dupl,eigen,elelmIndex,elem,emit_denominator,emit_denominators,emit_expr,emit_factor,emit_factorial_function,emit_flat_tensor,emit_fraction,emit_function,emit_index_function,emit_multiply,emit_number,emit_numerators,emit_numerical_fraction,emit_power,emit_string,emit_subexpr,emit_symbol,emit_tensor,emit_tensor_inner,emit_term,emit_top_expr,emit_unsigned_expr,emit_x,equal,equaln,equalq,erfc,errorMessage,esc_flag,evaluatingAsFloats,evaluatingPolar,exec,expand,expand_get_A,expand_get_AF,expand_get_B,expand_get_C,expand_get_CF,expand_tensor,expanding,expcos,exponential,expr_level,expsin,f1,f10,f2,f3,f4,f5,f9,f_equals_a,factor,factor_a,factor_again,factor_b,factor_number,factor_small_number,factor_term,factorial,factorpoly,factors,factpoly_expo,fill_buf,filter,filter_main,filter_sum,filter_tensor,findDependenciesInScript,findPossibleClockForm,findPossibleExponentialForm,findroot,fixup_fraction,fixup_power,flag,floatToRatioRoutine,fmt_index,fmt_level,fmt_x,frame,freeze,functionInvokationsScanningStack,gamma,gamma_of_sum,gammaf,gcd,gcd_main,gcd_numbers,gcd_polys,gcd_powers_with_same_base,gcd_product_product,gcd_product_sum,gcd_sum,gcd_sum_product,gcd_sum_sum,gen,getSimpleRoots,getStateHash,get_binding,get_factor_from_complex_root,get_factor_from_real_root,get_innerprod_factors,get_next_token,get_printname,get_size,get_token,getdisplaystr,glyph,gp,guess,hasImaginaryCoeff,hasNegativeRationalExponent,hash_addition,hash_function,hash_multiplication,hash_power,hashcode_values,hashed_itab,hermite,hilbert,i1,imag,imaginaryunit,index_function,init,initNRoots,inited,inner,inner_f,input_str,integral,integral_of_form,integral_of_product,integral_of_sum,inv,inverse,invert_number,invg,isNumberOneOverSomething,isNumericAtom,isNumericAtomOrTensor,isSimpleRoot,isSmall,isSymbolLeftOfAssignment,isSymbolReclaimable,isZeroAtomOrTensor,isZeroLikeOrNonZeroLikeOrUndetermined,is_denominator,is_factor,is_small_integer,is_square_matrix,is_usr_symbol,isadd,isalnumorunderscore,isalpha,isalphaOrUnderscore,iscomplexnumber,iscomplexnumberdouble,iscons,isdenominator,isdigit,isdouble,iseveninteger,isfactor,isfactorial,isfloating,isfraction,isidentitymatrix,isimaginarynumber,isimaginarynumberdouble,isimaginaryunit,isinnerordot,isinteger,isintegerfactor,isintegerorintegerfloat,isinv,iskeyword,isminusone,isminusoneoversqrttwo,isminusoneovertwo,ismultiply,isnegative,isnegativenumber,isnegativeterm,isnonnegativeinteger,isnpi,isone,isoneover,isoneoversqrttwo,isoneovertwo,isplusone,isplustwo,ispolyexpandedform,ispolyexpandedform_expr,ispolyexpandedform_factor,ispolyexpandedform_term,ispolyfactoredorexpandedform,ispolyfactoredorexpandedform_factor,ispolyfactoredorexpandedform_power,isposint,ispositivenumber,ispower,isquarterturn,isrational,isspace,isstr,issymbol,issymbolic,istensor,istranspose,isunderscore,isunivarpolyfactoredorexpandedform,itab,italu_hashcode,j1,laguerre,laguerre2,lastFoundSymbol,latexErrorSign,lcm,leading,legendre,length,lessp,level,list,listLength,logarithm,logbuf,lookupsTotal,lu_decomp,madd,makePositive,makeSignSameAs,make_hashed_itab,mask,mcmp,mcmpint,mdiv,mdivrem,meta_mode,mgcd,mini_solve,mint,mmod,mmul,mod,monic,move,moveTos,mp_clr_bit,mp_denominator,mp_numerator,mp_set_bit,mpow,mprime,mroot,mshiftright,msub,mtotal,multinomial_sum,multiply,multiply_all,multiply_all_noexpand,multiply_consecutive_constants,multiply_denominators,multiply_denominators_factor,multiply_denominators_term,multiply_noexpand,multiply_numbers,n_factor_number,negate,negate_expand,negate_noexpand,negate_number,new_string,newline_flag,nil_symbols,normaliseDots,normalisedCoeff,normalize_angle,nroots_a,nroots_b,nroots_c,nroots_df,nroots_dx,nroots_fa,nroots_fb,nroots_x,nroots_y,nterms,nthCadr,numerator,numericRootOfPolynomial,o,one,oneElement,one_as_double,out_buf,out_count,out_of_memory,outer,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,parse,parse_internal,parse_p1,parse_p2,parse_time_simplifications,partition,patternHasBeenFound,patternsinfo,peek,performing_roots,polar,polarRectAMinusOneBase,polycoeff,polyform,pop,pop_double,pop_frame,pop_integer,power,power_str,power_sum,power_tensor,predefinedSymbolsInGlobalScope_doNotTrackInDependencies,prime,primetab,print2dascii,printMode,print_ABS_latex,print_ARCCOS_codegen,print_ARCSIN_codegen,print_ARCTAN_codegen,print_BINOMIAL_latex,print_COS_codegen,print_DEFINT_latex,print_DOT_codegen,print_DOT_latex,print_DO_codegen,print_FOR_codegen,print_INV_codegen,print_INV_latex,print_PRODUCT_codegen,print_PRODUCT_latex,print_SETQ_codegen,print_SIN_codegen,print_SQRT_latex,print_SUM_codegen,print_SUM_latex,print_TAN_codegen,print_TESTEQ_latex,print_TESTGE_latex,print_TESTGT_latex,print_TESTLE_latex,print_TESTLT_latex,print_TEST_codegen,print_TEST_latex,print_TRANSPOSE_codegen,print_TRANSPOSE_latex,print_UNIT_codegen,print_a_over_b,print_base,print_base_of_denom,print_char,print_denom,print_double,print_expo_of_denom,print_exponent,print_expr,print_factor,print_factorial_function,print_glyphs,print_index_function,print_list,print_multiply_sign,print_number,print_power,print_str,print_subexpr,print_tensor,print_tensor_inner,print_tensor_inner_latex,print_tensor_latex,print_term,printchar,printchar_nowrap,printline,program_buf,promote_tensor,push,pushTryNotToDuplicate,push_cars,push_double,push_factor,push_frame,push_identity_matrix,push_integer,push_rational,push_symbol,push_term_factors,push_terms,push_zero_matrix,qadd,qdiv,qmul,qpow,qpowf,quickfactor,quickpower,rational,rationalize,rationalize_coefficients,real,reciprocate,rect,recursionLevelNestedRadicalsRemoval,recursiveDependencies,ref,ref1,rememberPrint,remove_negative_exponents,reset_after_error,restore,restoreMetaBindings,rewrite_args,rewrite_args_tensor,roots,roots2,roots3,run,runUserDefinedSimplifications,save,saveMetaBindings,scalar_times_tensor,scan,scan_error,scan_expression,scan_factor,scan_function_call_with_function_name,scan_function_call_without_function_name,scan_index,scan_meta,scan_power,scan_relation,scan_stmt,scan_str,scan_string,scan_subexpr,scan_symbol,scan_tensor,scan_term,scanned,scanningParameters,setM,setSignTo,set_binding,set_component,setq_indexed,sfac_product,sfac_product_f,sgn,shape,show_power_debug,sign,sign_of_term,simfac,simfac_term,simpleComplexityMeasure,simplify,simplifyForCodeGeneration,simplify_1_in_products,simplify_main,simplify_nested_radicals,simplify_polar,simplify_polarRect,simplify_rational_expressions,simplify_rectToClock,simplify_tensor,simplify_trig,simplifyfactorials,sine,sine_of_angle,sine_of_angle_sum,skipRootVariableToBeSolved,sort_stack,square,ssqrt,stack,stackAddsCount,std_symbol,step,step2,stop,strcmp,stringsEmittedByUserPrintouts,subf,subst,subtract,subtract_numbers,swap,symbol,symbolsDependencies,symbolsHavingReassignments,symbolsInExpressionsWithoutAssignments,symbolsLeftOfAssignment,symbolsRightOfAssignment,symbolsinfo,symnum,symtab,take_care_of_nested_radicals,tangent,taylor,tensor,tensor_plus_tensor,tensor_times_scalar,testApprox,test_flag,text_metric,theRandom,token,token_buf,token_str,top,top_level_eval,tos,transform,transpose,transpose_unicode,trigmode,trivial_divide,try_kth_prime,turnErrorMessageToLatex,ucmp,unfreeze,unique,unique_f,update_token_buf,userSimplificationsInListForm,userSimplificationsInStringForm,usr_symbol,verbosing,version,will_be_displayed_as_fraction,ybinomial,ycosh,ydirac,yerf,yerfc,yfloor,yindex,yround,ysinh,yyarg,yybesselj,yybessely,yyceiling,yycondense,yycontract,yycosh,yydegree,yydetg,yydivpoly,yyerf,yyerfc,yyexpand,yyfactorpoly,yyfloat,yyfloor,yyhermite,yyhermite2,yyinvg,yylcm,yylog,yymultiply,yyouter,yypower,yyrationalize,yyround,yysgn,yysimfac,yysinh,yytangent,zero,zzfloat,hasProp={}.hasOwnProperty,slice=[].slice;for(bigInt=__webpack_require__(14),version="1.3.0",SELFTEST=1,NSYM=1e3,DEBUG=!1,PRINTOUTRESULT=!1,PRINTMODE_LATEX="PRINTMODE_LATEX",PRINTMODE_2DASCII="PRINTMODE_2DASCII",PRINTMODE_COMPUTER="PRINTMODE_COMPUTER",PRINTMODE_HUMAN="PRINTMODE_HUMAN",PRINTMODE_LIST="PRINTMODE_LIST",printMode=PRINTMODE_COMPUTER,dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication=!0,recursionLevelNestedRadicalsRemoval=0,do_simplify_nested_radicals=!0,avoidCalculatingPowersIntoArctans=!0,rational=function(){function t(){}return t.prototype.a=null,t.prototype.b=null,t}(),U=function(){function t(){this.cons={},this.cons.car=null,this.cons.cdr=null,this.q=new rational}return t.prototype.cons=null,t.prototype.printname="",t.prototype.str="",t.prototype.tensor=null,t.prototype.q=null,t.prototype.d=0,t.prototype.k=0,t.prototype.tag=0,t.prototype.toString=function(){return print_expr(this)},t.prototype.toLatexString=function(){return collectLatexStringFromReturnValue(this)},t}(),errorMessage="",CONS=0,NUM=1,DOUBLE=2,STR=3,TENSOR=4,SYM=5,counter=0,ABS=counter++,ADD=counter++,ADJ=counter++,AND=counter++,APPROXRATIO=counter++,ARCCOS=counter++,ARCCOSH=counter++,ARCSIN=counter++,ARCSINH=counter++,ARCTAN=counter++,ARCTANH=counter++,ARG=counter++,ATOMIZE=counter++,BESSELJ=counter++,BESSELY=counter++,BINDING=counter++,BINOMIAL=counter++,CEILING=counter++,CHECK=counter++,CHOOSE=counter++,CIRCEXP=counter++,CLEAR=counter++,CLEARALL=counter++,CLEARPATTERNS=counter++,CLOCK=counter++,COEFF=counter++,COFACTOR=counter++,CONDENSE=counter++,CONJ=counter++,CONTRACT=counter++,COS=counter++,COSH=counter++,DECOMP=counter++,DEFINT=counter++,DEGREE=counter++,DENOMINATOR=counter++,DERIVATIVE=counter++,DET=counter++,DIM=counter++,DIRAC=counter++,DIVISORS=counter++,DO=counter++,DOT=counter++,DRAW=counter++,DSOLVE=counter++,EIGEN=counter++,EIGENVAL=counter++,EIGENVEC=counter++,ERF=counter++,ERFC=counter++,EVAL=counter++,EXP=counter++,EXPAND=counter++,EXPCOS=counter++,EXPSIN=counter++,FACTOR=counter++,FACTORIAL=counter++,FACTORPOLY=counter++,FILTER=counter++,FLOATF=counter++,FLOOR=counter++,FOR=counter++,FUNCTION=counter++,GAMMA=counter++,GCD=counter++,HERMITE=counter++,HILBERT=counter++,IMAG=counter++,INDEX=counter++,INNER=counter++,INTEGRAL=counter++,INV=counter++,INVG=counter++,ISINTEGER=counter++,ISPRIME=counter++,LAGUERRE=counter++,LCM=counter++,LEADING=counter++,LEGENDRE=counter++,LOG=counter++,LOOKUP=counter++,MOD=counter++,MULTIPLY=counter++,NOT=counter++,NROOTS=counter++,NUMBER=counter++,NUMERATOR=counter++,OPERATOR=counter++,OR=counter++,OUTER=counter++,PATTERN=counter++,PATTERNSINFO=counter++,POLAR=counter++,POWER=counter++,PRIME=counter++,PRINT_LEAVE_E_ALONE=counter++,PRINT_LEAVE_X_ALONE=counter++,PRINT=counter++,PRINT2DASCII=counter++,PRINTFULL=counter++,PRINTLATEX=counter++,PRINTLIST=counter++,PRINTPLAIN=counter++,PRODUCT=counter++,QUOTE=counter++,QUOTIENT=counter++,RANK=counter++,RATIONALIZE=counter++,REAL=counter++,ROUND=counter++,YYRECT=counter++,ROOTS=counter++,SETQ=counter++,SGN=counter++,SILENTPATTERN=counter++,SIMPLIFY=counter++,SIN=counter++,SINH=counter++,SHAPE=counter++,SQRT=counter++,STOP=counter++,SUBST=counter++,SUM=counter++,SYMBOLSINFO=counter++,TAN=counter++,TANH=counter++,TAYLOR=counter++,TEST=counter++,TESTEQ=counter++,TESTGE=counter++,TESTGT=counter++,TESTLE=counter++,TESTLT=counter++,TRANSPOSE=counter++,UNIT=counter++,ZERO=counter++,NIL=counter++,LAST=counter++,LAST_PRINT=counter++,LAST_2DASCII_PRINT=counter++,LAST_FULL_PRINT=counter++,LAST_LATEX_PRINT=counter++,LAST_LIST_PRINT=counter++,LAST_PLAIN_PRINT=counter++,AUTOEXPAND=counter++,BAKE=counter++,ASSUME_REAL_VARIABLES=counter++,TRACE=counter++,FORCE_FIXED_PRINTOUT=counter++,MAX_FIXED_PRINTOUT_DIGITS=counter++,YYE=counter++,DRAWX=counter++,METAA=counter++,METAB=counter++,METAX=counter++,SECRETX=counter++,VERSION=counter++,PI=counter++,SYMBOL_A=counter++,SYMBOL_B=counter++,SYMBOL_C=counter++,SYMBOL_D=counter++,SYMBOL_I=counter++,SYMBOL_J=counter++,SYMBOL_N=counter++,SYMBOL_R=counter++,SYMBOL_S=counter++,SYMBOL_T=counter++,SYMBOL_X=counter++,SYMBOL_Y=counter++,SYMBOL_Z=counter++,SYMBOL_IDENTITY_MATRIX=counter++,SYMBOL_A_UNDERSCORE=counter++,SYMBOL_B_UNDERSCORE=counter++,SYMBOL_X_UNDERSCORE=counter++,C1=counter++,C2=counter++,C3=counter++,C4=counter++,C5=counter++,C6=counter++,USR_SYMBOLS=counter++,E=YYE,TOS=1e5,BUF=1e4,MAX_PROGRAM_SIZE=100001,MAXPRIMETAB=1e4,MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES=5,MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE=10,MAXDIM=24,symbolsDependencies={},symbolsHavingReassignments=[],symbolsInExpressionsWithoutAssignments=[],patternHasBeenFound=!1,predefinedSymbolsInGlobalScope_doNotTrackInDependencies=["rationalize","abs","e","i","pi","sin","ceiling","cos","roots","integral","derivative","defint","sqrt","eig","cov","deig","dcov","float","floor","product","root","round","sum","test","unit"],parse_time_simplifications=!0,chainOfUserSymbolsNotFunctionsBeingEvaluated=[],stringsEmittedByUserPrintouts="",called_from_Algebra_block=!1,tensor=function(){function t(){this.dim=function(){var t,e,n;for(n=[],t=0,e=MAXDIM;0<=e?t<=e:t>=e;0<=e?t++:t--)n.push(0);return n}(),this.elem=[]}return t.prototype.ndim=0,t.prototype.dim=null,t.prototype.nelem=0,t.prototype.elem=null,t}(),display=function(){function t(){}return t.prototype.h=0,t.prototype.w=0,t.prototype.n=0,t.prototype.a=[],t}(),text_metric=function(){function t(){}return t.prototype.ascent=0,t.prototype.descent=0,t.prototype.width=0,t}(),tos=0,expanding=0,evaluatingAsFloats=0,evaluatingPolar=0,fmt_x=0,fmt_index=0,fmt_level=0,verbosing=0,primetab=function(){var t,e,n,r;for(r=[2],e=3;r.length<MAXPRIMETAB;){for(n=0,t=Math.sqrt(e);n<r.length&&r[n]<=t;){if(e%r[n]==0){n=-1;break}n++}-1!==n&&r.push(e),e+=2}return r[MAXPRIMETAB]=0,r}(),esc_flag=0,draw_flag=0,mtotal=0,trigmode=0,logbuf="",program_buf="",symtab=[],binding=[],isSymbolReclaimable=[],arglist=[],stack=[],frame=0,p0=null,p1=null,p2=null,p3=null,p4=null,p5=null,p6=null,p7=null,p8=null,p9=null,zero=null,one=null,one_as_double=null,imaginaryunit=null,out_buf="",out_count=0,test_flag=0,codeGen=!1,draw_stop_return=null,userSimplificationsInListForm=[],userSimplificationsInStringForm=[],transpose_unicode=7488,dotprod_unicode=183,symbol=function(t){return symtab[t]},iscons=function(t){return t.k===CONS},isrational=function(t){return t.k===NUM},isdouble=function(t){return t.k===DOUBLE},isNumericAtom=function(t){return isrational(t)||isdouble(t)},isstr=function(t){return t.k===STR},istensor=function(t){if(null!=t)return t.k===TENSOR},isNumericAtomOrTensor=function(t){var e,n,r,o,i;if(isNumericAtom(t)||t===symbol(SYMBOL_IDENTITY_MATRIX))return 1;if(!istensor(t)&&!isNumericAtom(t))return 0;for(r=t.tensor.nelem,e=t.tensor.elem,n=o=0,i=r;0<=i?o<i:o>i;n=0<=i?++o:--o)if(!isNumericAtomOrTensor(e[n]))return 0;return 1},issymbol=function(t){return t.k===SYM},iskeyword=function(t){return issymbol(t)&&symnum(t)<NIL},car=function(t){return iscons(t)?t.cons.car:symbol(NIL)},cdr=function(t){return iscons(t)?t.cons.cdr:symbol(NIL)},caar=function(t){return car(car(t))},cadr=function(t){return car(cdr(t))},cdar=function(t){return cdr(car(t))},cddr=function(t){return cdr(cdr(t))},caadr=function(t){return car(car(cdr(t)))},caddr=function(t){return car(cdr(cdr(t)))},cadar=function(t){return car(cdr(car(t)))},cdadr=function(t){return cdr(car(cdr(t)))},cddar=function(t){return cdr(cdr(car(t)))},cdddr=function(t){return cdr(cdr(cdr(t)))},caaddr=function(t){return car(car(cdr(cdr(t))))},cadadr=function(t){return car(cdr(car(cdr(t))))},caddar=function(t){return car(cdr(cdr(car(t))))},cdaddr=function(t){return cdr(car(cdr(cdr(t))))},cadddr=function(t){return car(cdr(cdr(cdr(t))))},cddddr=function(t){return cdr(cdr(cdr(cdr(t))))},caddddr=function(t){return car(cdr(cdr(cdr(cdr(t)))))},cadaddr=function(t){return car(cdr(car(cdr(cdr(t)))))},cddaddr=function(t){return cdr(cdr(car(cdr(cdr(t)))))},caddadr=function(t){return car(cdr(cdr(car(cdr(t)))))},cdddaddr=function(t){return cdr(cdr(cdr(car(cdr(cdr(t))))))},caddaddr=function(t){return car(cdr(cdr(car(cdr(cdr(t))))))},listLength=function(t){var e;for(e=-1;iscons(t);)t=cdr(t),e++;return e},nthCadr=function(t,e){var n;for(n=0;n<=e;)t=cdr(t),n++;return car(t)},isadd=function(t){return car(t)===symbol(ADD)},ismultiply=function(t){return car(t)===symbol(MULTIPLY)},ispower=function(t){return car(t)===symbol(POWER)},isfactorial=function(t){return car(t)===symbol(FACTORIAL)},isinnerordot=function(t){return car(t)===symbol(INNER)||car(t)===symbol(DOT)},istranspose=function(t){return car(t)===symbol(TRANSPOSE)},isinv=function(t){return car(t)===symbol(INV)},isidentitymatrix=function(t){return t===symbol(SYMBOL_IDENTITY_MATRIX)},MSIGN=function(t){return t.isPositive()?1:t.isZero()?0:-1},MLENGTH=function(t){return t.toString().length},MZERO=function(t){return t.isZero()},MEQUAL=function(t,e){return t.equals(e)},reset_after_error=function(){return moveTos(0),esc_flag=0,draw_flag=0,frame=TOS,evaluatingAsFloats=0,evaluatingPolar=0},$=null!==exports?exports:this,$.version=version,$.isadd=isadd,$.ismultiply=ismultiply,$.ispower=ispower,$.isfactorial=isfactorial,$.car=car,$.cdr=cdr,$.caar=caar,$.cadr=cadr,$.cdar=cdar,$.cddr=cddr,$.caadr=caadr,$.caddr=caddr,$.cadar=cadar,$.cdadr=cdadr,$.cddar=cddar,$.cdddr=cdddr,$.caaddr=caaddr,$.cadadr=cadadr,$.caddar=caddar,$.cdaddr=cdaddr,$.cadddr=cadddr,$.cddddr=cddddr,$.caddddr=caddddr,$.cadaddr=cadaddr,$.cddaddr=cddaddr,$.caddadr=caddadr,$.cdddaddr=cdddaddr,$.caddaddr=caddaddr,$.symbol=symbol,$.iscons=iscons,$.isrational=isrational,$.isdouble=isdouble,$.isNumericAtom=isNumericAtom,$.isstr=isstr,$.istensor=istensor,$.issymbol=issymbol,$.iskeyword=iskeyword,$.CONS=CONS,$.NUM=NUM,$.DOUBLE=DOUBLE,$.STR=STR,$.TENSOR=TENSOR,$.SYM=SYM,DEBUG_ABS=!1,Eval_abs=function(){return push(cadr(p1)),Eval(),abs()},absValFloat=function(){return Eval(),absval(),Eval(),zzfloat()},abs=function(){var t;if(t=top(),DEBUG_ABS&&console.trace(">>>>  ABS of "+t),numerator(),DEBUG_ABS&&console.log("ABS numerator "+stack[tos-1]),absval(),DEBUG_ABS&&console.log("ABSVAL numerator: "+stack[tos-1]),push(t),denominator(),DEBUG_ABS&&console.log("ABS denominator: "+stack[tos-1]),absval(),DEBUG_ABS&&console.log("ABSVAL denominator: "+stack[tos-1]),divide(),DEBUG_ABS&&console.log("ABSVAL divided: "+stack[tos-1]),DEBUG_ABS)return console.log("<<<<<<<  ABS")},absval=function(){var t,e;if(save(),e=p1=pop(),DEBUG_ABS&&console.log("ABS of "+p1),isZeroAtomOrTensor(p1))return DEBUG_ABS&&console.log(" abs: "+p1+" just zero"),push(zero),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(isnegativenumber(p1))return DEBUG_ABS&&console.log(" abs: "+p1+" just a negative"),push(p1),negate(),void restore();if(ispositivenumber(p1))return DEBUG_ABS&&console.log(" abs: "+p1+" just a positive"),push(p1),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(p1===symbol(PI))return DEBUG_ABS&&console.log(" abs: "+p1+" of PI"),push(p1),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(ADD)&&(findPossibleClockForm(p1)||findPossibleExponentialForm(p1)||Find(p1,imaginaryunit)))return DEBUG_ABS&&console.log(" abs: "+p1+" is a sum"),DEBUG_ABS&&console.log("abs of a sum"),push(p1),rect(),p1=pop(),push(p1),real(),push_integer(2),power(),push(p1),imag(),push_integer(2),power(),add(),push_rational(1,2),power(),simplify_trig(),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(POWER)&&equaln(cadr(p1),-1))return DEBUG_ABS&&console.log(" abs: "+p1+" is -1 to any power"),evaluatingAsFloats?(DEBUG_ABS&&console.log(" abs: numeric, so result is 1.0"),push_double(1)):(DEBUG_ABS&&console.log(" abs: symbolic, so result is 1"),push_integer(1)),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(POWER)&&ispositivenumber(caddr(p1)))return DEBUG_ABS&&console.log(" abs: "+p1+" is something to the power of a positive number"),push(cadr(p1)),abs(),push(caddr(p1)),power(),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(POWER)&&cadr(p1)===symbol(E))return DEBUG_ABS&&console.log(" abs: "+p1+" is an exponential"),push(caddr(p1)),real(),exponential(),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore();if(car(p1)===symbol(MULTIPLY)){for(DEBUG_ABS&&console.log(" abs: "+p1+" is a product"),t=!1,p1=cdr(p1);iscons(p1);)push(car(p1)),absval(),t&&multiply(),t=!0,p1=cdr(p1);return DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore()}return car(p1)===symbol(ABS)?(DEBUG_ABS&&console.log(" abs: "+p1+" is abs of a abs"),push_symbol(ABS),push(cadr(p1)),list(2),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),void restore()):istensor(p1)?(absval_tensor(),void restore()):((isnegativeterm(p1)||car(p1)===symbol(ADD)&&isnegativeterm(cadr(p1)))&&(push(p1),negate(),p1=pop()),DEBUG_ABS&&console.log(" abs: "+p1+" is nothing decomposable"),push_symbol(ABS),push(p1),list(2),DEBUG_ABS&&console.log(" --\x3e ABS of "+e+" : "+stack[tos-1]),restore())},absval_tensor=function(){return 1!==p1.tensor.ndim&&stop("abs(tensor) with tensor rank > 1"),push(p1),push(p1),conjugate(),inner(),push_rational(1,2),power(),simplify(),Eval()},flag=0,Eval_add=function(){var t;for(t=tos,p1=cdr(p1);iscons(p1);)push(car(p1)),Eval(),p2=pop(),push_terms(p2),p1=cdr(p1);return add_terms(tos-t)},stackAddsCount=0,add_terms=function(t){var e,n,r,o,i,a,s,u,p;if(stackAddsCount++,n=0,e=tos-t,DEBUG&&console.log("stack before adding terms #"+stackAddsCount),DEBUG)for(n=i=0,a=tos;0<=a?i<a:i>a;n=0<=a?++i:--i)console.log(print_list(stack[n]));for(n=r=0;r<10&&!(t<2)&&(flag=0,(p=stack.slice(e,e+t)).sort(cmp_terms),stack=stack.slice(0,e).concat(p).concat(stack.slice(e+t)),0!==flag);n=++r)t=combine_terms(e,t);switch(moveTos(e+t),t){case 0:evaluatingAsFloats?push_double(0):push(zero);break;case 1:break;default:list(t),p1=pop(),push_symbol(ADD),push(p1),cons()}if(DEBUG&&console.log("stack after adding terms #"+stackAddsCount),DEBUG){for(u=[],n=o=0,s=tos;0<=s?o<s:o>s;n=0<=s?++o:--o)u.push(console.log(print_list(stack[n])));return u}},cmp_terms_count=0,cmp_terms=function(t,e){var n,r,o,i;if(cmp_terms_count++,n=0,isNumericAtom(t)&&isNumericAtom(e))return flag=1,0;if(istensor(t)&&istensor(e)){if(t.tensor.ndim<e.tensor.ndim)return-1;if(t.tensor.ndim>e.tensor.ndim)return 1;for(n=r=0,o=t.tensor.ndim;0<=o?r<o:r>o;n=0<=o?++r:--r){if(t.tensor.dim[n]<e.tensor.dim[n])return-1;if(t.tensor.dim[n]>e.tensor.dim[n])return 1}return flag=1,0}return car(t)===symbol(MULTIPLY)&&(t=cdr(t),isNumericAtom(car(t))&&(t=cdr(t),cdr(t)===symbol(NIL)&&(t=car(t)))),car(e)===symbol(MULTIPLY)&&(e=cdr(e),isNumericAtom(car(e))&&(e=cdr(e),cdr(e)===symbol(NIL)&&(e=car(e)))),0===(i=cmp_expr(t,e))&&(flag=1),i},combine_terms=function(t,e){var n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_;for(n=0;n<e-1;)if(check_esc_flag(),p3=stack[t+n],p4=stack[t+n+1],istensor(p3)&&istensor(p4)){if(push(p3),push(p4),tensor_plus_tensor(),(p1=pop())!==symbol(NIL)){for(stack[t+n]=p1,o=u=p=n+1,c=e-1;p<=c?u<c:u>c;o=p<=c?++u:--u)stack[t+o]=stack[t+o+1];e--,n--}n++}else if(istensor(p3)||istensor(p4))n++;else if(isNumericAtom(p3)&&isNumericAtom(p4)){if(push(p3),push(p4),add_numbers(),p1=pop(),isZeroAtomOrTensor(p1)){for(o=r=l=n,d=e-2;l<=d?r<d:r>d;o=l<=d?++r:--r)stack[t+o]=stack[t+o+2];e-=2}else{for(stack[t+n]=p1,o=i=f=n+1,h=e-1;f<=h?i<h:i>h;o=f<=h?++i:--i)stack[t+o]=stack[t+o+1];e--}n--,n++}else if(isNumericAtom(p3)||isNumericAtom(p4))n++;else if(evaluatingAsFloats?(p1=one_as_double,p2=one_as_double):(p1=one,p2=one),_=0,car(p3)===symbol(MULTIPLY)&&(p3=cdr(p3),_=1,isNumericAtom(car(p3))&&(p1=car(p3),p3=cdr(p3),cdr(p3)===symbol(NIL)&&(p3=car(p3),_=0))),car(p4)===symbol(MULTIPLY)&&(p4=cdr(p4),isNumericAtom(car(p4))&&(p2=car(p4),p4=cdr(p4),cdr(p4)===symbol(NIL)&&(p4=car(p4)))),equal(p3,p4))if(push(p1),push(p2),add_numbers(),p1=pop(),isZeroAtomOrTensor(p1)){for(o=a=m=n,g=e-2;m<=g?a<g:a>g;o=m<=g?++a:--a)stack[t+o]=stack[t+o+2];e-=2,n--,n++}else{for(push(p1),_?(push(symbol(MULTIPLY)),push(p3),cons()):push(p3),multiply(),stack[t+n]=pop(),o=s=v=n+1,y=e-1;v<=y?s<y:s>y;o=v<=y?++s:--s)stack[t+o]=stack[t+o+1];e--,n--,n++}else n++;return e},push_terms=function(t){var e;if(car(t)===symbol(ADD)){for(t=cdr(t),e=[];iscons(t);)push(car(t)),e.push(t=cdr(t));return e}if(!isZeroAtomOrTensor(t))return push(t)},add=function(){var t;return save(),p2=pop(),p1=pop(),t=tos,push_terms(p1),push_terms(p2),add_terms(tos-t),restore()},add_all=function(t){var e,n,r,o,i;for(n=0,save(),i=tos-t,e=tos,n=r=0,o=t;0<=o?r<o:r>o;n=0<=o?++r:--r)push_terms(stack[i+n]);return add_terms(tos-e),p1=pop(),moveTos(tos-t),push(p1),restore()},subtract=function(){return negate(),add()},Eval_adj=function(){return push(cadr(p1)),Eval(),adj()},adj=function(){var t,e,n,r,o,i,a;for(t=0,n=0,0,save(),p1=pop(),istensor(p1)&&2===p1.tensor.ndim&&p1.tensor.dim[0]===p1.tensor.dim[1]?1:stop("adj: square matrix expected"),r=p1.tensor.dim[0],(p2=alloc_tensor(r*r)).tensor.ndim=2,p2.tensor.dim[0]=r,p2.tensor.dim[1]=r,t=o=0,i=r;0<=i?o<i:o>i;t=0<=i?++o:--o)for(n=e=0,a=r;0<=a?e<a:e>a;n=0<=a?++e:--e)cofactor(p1,r,t,n),p2.tensor.elem[r*n+t]=pop();return push(p2),restore()},Eval_approxratio=function(){var t;return t=cadr(p1),push(t),approxratioRecursive()},approxratioRecursive=function(){var t,e,n,r,o;if(t=0,save(),p1=pop(),istensor(p1)){for((p4=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,t=n=0,r=p1.tensor.ndim;0<=r?n<r:n>r;t=0<=r?++n:--n)p4.tensor.dim[t]=p1.tensor.dim[t];for(t=e=0,o=p1.tensor.nelem;0<=o?e<o:e>o;t=0<=o?++e:--e)push(p1.tensor.elem[t]),approxratioRecursive(),p4.tensor.elem[t]=pop(),check_tensor_dimensions(p4);push(p4)}else p1.k===DOUBLE?(push(p1),approxOneRatioOnly()):iscons(p1)?(push(car(p1)),approxratioRecursive(),push(cdr(p1)),approxratioRecursive(),cons()):push(p1);return restore()},approxOneRatioOnly=function(){var t,e,n,r,o,i;if(zzfloat(),(r=pop()).k!==DOUBLE)return push_symbol(APPROXRATIO),push(theArgument),list(2);2===(n=(o=r.d).toString().split(".")).length?(t=n[1].length,e=1/Math.pow(10,t),i=floatToRatioRoutine(o,e),push_rational(i[0],i[1])):push_integer(o)},floatToRatioRoutine=function(t,e){var n,r,o,i,a,s,u;if(o=void 0,r=void 0,n=void 0,s=void 0,i=void 0,a=void 0,u=[0,0],isNaN(t))return u;if(Infinity===t)return u[0]=1,u[1]=0,u;if(-Infinity===t)return u[0]=-1,u[1]=0,u;if(n=t<0?-1:1,t=Math.abs(t),Math.abs(t-Math.floor(t))<e)return o=t*n,r=1,u[0]=o,u[1]=r,u;if(t<1e-19)return o=n,r=1e19,u[0]=o,u[1]=r,u;if(t>1e19)return o=1e19*n,r=1,u[0]=o,u[1]=r,u;for(s=t,i=0,r=1;s=1/(s-Math.floor(s)),a=r,r=r*Math.floor(s)+i,i=a,o=Math.floor(t*r+.5),Math.abs(t-o/r)>e&&s!==Math.floor(s););return o*=n,u[0]=o,u[1]=r,u},approx_just_an_integer=0,approx_sine_of_rational=1,approx_sine_of_pi_times_rational=2,approx_rationalOfPi=3,approx_radicalOfRatio=4,approx_nothingUseful=5,approx_ratioOfRadical=6,approx_rationalOfE=7,approx_logarithmsOfRationals=8,approx_rationalsOfLogarithms=9,approxRationalsOfRadicals=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g;if(2!==(g=t.toString().split(".")).length)return[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2];for(l=g[1].length,f=1/Math.pow(10,l),console.log("precision: "+f),e=null,c=Number.MAX_VALUE,d=0,u=(m=[2,3,5,6,7,8,10]).length;d<u;d++)for(i=m[d],s=a=1;a<=10;s=++a)o=Math.sqrt(i)/s,Math.abs(o)>1e-10?(h=t/o,p=Math.round(h),r=Math.abs(1-h/p)):(h=1,p=1,r=Math.abs(t-o)),r<2*f&&(n=simpleComplexityMeasure(p,i,s))<c&&(c=n,e=[p+" * sqrt( "+i+" ) / "+s,approx_ratioOfRadical,p,i,s]);return e},approxRadicalsOfRationals=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y;if(2!==(y=t.toString().split(".")).length)return[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2];for(d=y[1].length,h=1/Math.pow(10,d),console.log("precision: "+h),e=null,l=Number.MAX_VALUE,f=0,u=(g=[1,2,3,5,6,7,8,10]).length;f<u;f++)for(i=g[f],a=0,p=(v=[1,2,3,5,6,7,8,10]).length;a<p;a++)s=v[a],o=Math.sqrt(i/s),Math.abs(o)>1e-10?(m=t/o,c=Math.round(m),r=Math.abs(1-m/c)):(m=1,c=1,r=Math.abs(t-o)),r<2*h&&(n=simpleComplexityMeasure(c,i,s))<l&&(l=n,e=[c+" * (sqrt( "+i+" / "+s+" )",approx_radicalOfRatio,c,i,s]);return e},approxRadicals=function(t){var e,n,r,o,i;return 2!==(i=t.toString().split(".")).length?[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2]:(r=i[1].length,o=1/Math.pow(10,r),console.log("precision: "+o),null!=(n=approxRationalsOfRadicals(t))?n:null!=(e=approxRadicalsOfRationals(t))?e:null)},approxLogs=function(t){var e,n,r,o,i;return 2!==(i=t.toString().split(".")).length?[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2]:(r=i[1].length,o=1/Math.pow(10,r),console.log("precision: "+o),null!=(n=approxRationalsOfLogs(t))?n:null!=(e=approxLogsOfRationals(t))?e:null)},approxRationalsOfLogs=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h;if(2!==(h=t.toString().split(".")).length)return[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2];for(c=h[1].length,d=1/Math.pow(10,c),console.log("precision: "+d),e=null,p=Number.MAX_VALUE,i=l=2;l<=5;i=++l)for(s=a=1;a<=5;s=++a)o=Math.log(i)/s,Math.abs(o)>1e-10?(f=t/o,u=Math.round(f),r=Math.abs(1-f/u)):(f=1,u=1,r=Math.abs(t-o)),1!==u&&Math.abs(Math.floor(u/s))===Math.abs(u/s)||r<2.2*d&&(n=simpleComplexityMeasure(u,i,s))<p&&(p=n,e=[u+" * log( "+i+" ) / "+s,approx_rationalsOfLogarithms,u,i,s]);return e},approxLogsOfRationals=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h;if(2!==(h=t.toString().split(".")).length)return[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2];for(c=h[1].length,d=1/Math.pow(10,c),console.log("precision: "+d),e=null,p=Number.MAX_VALUE,i=l=1;l<=5;i=++l)for(s=a=1;a<=5;s=++a)o=Math.log(i/s),Math.abs(o)>1e-10?(f=t/o,u=Math.round(f),r=Math.abs(1-f/u)):(f=1,u=1,r=Math.abs(t-o)),r<1.96*d&&(n=simpleComplexityMeasure(u,i,s))<p&&(p=n,e=[u+" * log( "+i+" / "+s+" )",approx_logarithmsOfRationals,u,i,s]);return e},approxRationalsOfPowersOfE=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h;if(2!==(h=t.toString().split(".")).length)return[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2];for(c=h[1].length,d=1/Math.pow(10,c),console.log("precision: "+d),e=null,p=Number.MAX_VALUE,i=l=1;l<=2;i=++l)for(s=a=1;a<=12;s=++a)o=Math.pow(Math.E,i)/s,Math.abs(o)>1e-10?(f=t/o,u=Math.round(f),r=Math.abs(1-f/u)):(f=1,u=1,r=Math.abs(t-o)),r<2*d&&(n=simpleComplexityMeasure(u,i,s))<p&&(p=n,e=[u+" * (e ^ "+i+" ) / "+s,approx_rationalOfE,u,i,s]);return e},approxRationalsOfPowersOfPI=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h;if(2!==(h=t.toString().split(".")).length)return[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2];for(c=h[1].length,d=1/Math.pow(10,c),console.log("precision: "+d),e=null,p=Number.MAX_VALUE,i=l=1;l<=5;i=++l)for(s=a=1;a<=12;s=++a)o=Math.pow(Math.PI,i)/s,Math.abs(o)>1e-10?(f=t/o,u=Math.round(f),r=Math.abs(1-f/u)):(f=1,u=1,r=Math.abs(t-o)),r<2*d&&(n=simpleComplexityMeasure(u,i,s))<p&&(p=n,e=[u+" * (pi ^ "+i+" ) / "+s+" )",approx_rationalOfPi,u,i,s]);return e},approxTrigonometric=function(t){var e,n,r,o,i;return 2!==(i=t.toString().split(".")).length?[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2]:(r=i[1].length,o=1/Math.pow(10,r),console.log("precision: "+o),null!=(n=approxSineOfRationals(t))?n:null!=(e=approxSineOfRationalMultiplesOfPI(t))?e:null)},approxSineOfRationals=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m;if(2!==(m=t.toString().split(".")).length)return[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2];for(l=m[1].length,f=1/Math.pow(10,l),console.log("precision: "+f),e=null,c=Number.MAX_VALUE,a=d=1;d<=4;a=++d)for(u=s=1;s<=4;u=++s)o=a/u,i=Math.sin(o),Math.abs(i)>1e-10?(h=t/i,p=Math.round(h),r=Math.abs(1-h/p)):(h=1,p=1,r=Math.abs(t-i)),r<2*f&&(n=simpleComplexityMeasure(p,a,u))<c&&(c=n,e=[p+" * sin( "+a+"/"+u+" )",approx_sine_of_rational,p,a,u]);return e},approxSineOfRationalMultiplesOfPI=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m;if(2!==(m=t.toString().split(".")).length)return[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2];for(l=m[1].length,f=1/Math.pow(10,l),console.log("precision: "+f),e=null,c=Number.MAX_VALUE,a=d=1;d<=13;a=++d)for(u=s=1;s<=13;u=++s)o=a/u,i=Math.sin(Math.PI*o),Math.abs(i)>1e-10?(h=t/i,p=Math.round(h),r=Math.abs(1-h/p)):(h=1,p=1,r=Math.abs(t-i)),r<23*f&&(n=simpleComplexityMeasure(p,a,u))<c&&(c=n,e=[p+" * sin( "+a+"/"+u+" * pi )",approx_sine_of_pi_times_rational,p,a,u]);return e},approxAll=function(t){var e,n,r,o,i,a,s,u,p,c,l;return 2!==(l=t.toString().split(".")).length?[""+Math.floor(t),approx_just_an_integer,Math.floor(t),1,2]:(p=l[1].length,c=1/Math.pow(10,p),console.log("precision: "+c),u=Number.MAX_VALUE,s=0,a=null,!0,null!=(n=approxRadicals(t))&&((s=simpleComplexityMeasure(n))<u?(console.log("better explanation by approxRadicals: "+n+" complexity: "+s),u=s,a=n):console.log("subpar explanation by approxRadicals: "+n+" complexity: "+s)),null!=(e=approxLogs(t))&&((s=simpleComplexityMeasure(e))<u?(console.log("better explanation by approxLogs: "+e+" complexity: "+s),u=s,a=e):console.log("subpar explanation by approxLogs: "+e+" complexity: "+s)),null!=(r=approxRationalsOfPowersOfE(t))&&((s=simpleComplexityMeasure(r))<u?(console.log("better explanation by approxRationalsOfPowersOfE: "+r+" complexity: "+s),u=s,a=r):console.log("subpar explanation by approxRationalsOfPowersOfE: "+r+" complexity: "+s)),null!=(o=approxRationalsOfPowersOfPI(t))&&((s=simpleComplexityMeasure(o))<u?(console.log("better explanation by approxRationalsOfPowersOfPI: "+o+" complexity: "+s),u=s,a=o):console.log("subpar explanation by approxRationalsOfPowersOfPI: "+o+" complexity: "+s)),null!=(i=approxTrigonometric(t))&&((s=simpleComplexityMeasure(i))<u?(console.log("better explanation by approxTrigonometric: "+i+" complexity: "+s),u=s,a=i):console.log("subpar explanation by approxTrigonometric: "+i+" complexity: "+s)),a)},simpleComplexityMeasure=function(t,e,n){var r;if(r=null,t instanceof Array){switch(t[1]){case approx_sine_of_pi_times_rational:r=4;break;case approx_rationalOfPi:r=Math.pow(4,Math.abs(t[3]))*Math.abs(t[2]);break;case approx_rationalOfE:r=Math.pow(3,Math.abs(t[3]))*Math.abs(t[2]);break;default:r=0}r+=Math.abs(t[2])*(Math.abs(t[3])+Math.abs(t[4]))}else r+=Math.abs(t)*(Math.abs(e)+Math.abs(n));return 1===t[2]?r-=1:r+=1,1===t[3]?r-=1:r+=1,1===t[4]?r-=1:r+=1,r<0&&(r=0),r},testApprox=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_,b,x,E,w,A,I,R,T,S,C,N,k,O,D,M,L,P,B,F,U,q,G,W,z,V,H,X,Y,$,j,K,Z,Q,J,tt,et,nt,rt,ot;for(T=0,h=(L=[2,3,5,6,7,8,10]).length;T<h;T++)for(n=L[T],r=0,m=(P=[2,3,5,6,7,8,10]).length;r<m;r++)n!==(a=P[r])&&(console.log("testapproxRadicals testing: 1 * sqrt( "+n+" ) / "+a),e=n/a,tt=Math.sqrt(n)/a,H=(z=approxRadicals(tt))[2]*Math.sqrt(z[3])/z[4],Math.abs(tt-H)>1e-15&&console.log("fail testapproxRadicals: 1 * sqrt( "+n+" ) / "+a+" . obtained: "+z));for(s=0,g=(B=[2,3,5,6,7,8,10]).length;s<g;s++)for(n=B[s],l=0,v=(F=[2,3,5,6,7,8,10]).length;l<v;l++)n!==(a=F[l])&&(console.log("testapproxRadicals testing with 4 digits: 1 * sqrt( "+n+" ) / "+a),e=n/a,tt=(N=Math.sqrt(n)/a).toFixed(4),H=(z=approxRadicals(tt))[2]*Math.sqrt(z[3])/z[4],Math.abs(N-H)>1e-15&&console.log("fail testapproxRadicals with 4 digits: 1 * sqrt( "+n+" ) / "+a+" . obtained: "+z));for(E=0,y=(U=[2,3,5,6,7,8,10]).length;E<y;E++)for(n=U[E],I=0,_=(q=[2,3,5,6,7,8,10]).length;I<_;I++)n!==(a=q[I])&&(console.log("testapproxRadicals testing: 1 * sqrt( "+n+" / "+a+" )"),e=n/a,tt=Math.sqrt(n/a),null!=(z=approxRadicals(tt))&&(H=z[2]*Math.sqrt(z[3]/z[4]),z[1]===approx_radicalOfRatio&&Math.abs(tt-H)>1e-15&&console.log("fail testapproxRadicals: 1 * sqrt( "+n+" / "+a+" ) . obtained: "+z)));for(S=0,b=(G=[1,2,3,5,6,7,8,10]).length;S<b;S++)for(n=G[S],k=0,x=(W=[1,2,3,5,6,7,8,10]).length;k<x;k++)a=W[k],1===n&&1===a||(console.log("testapproxRadicals testing with 4 digits:: 1 * sqrt( "+n+" / "+a+" )"),e=n/a,tt=(N=Math.sqrt(n/a)).toFixed(4),H=(z=approxRadicals(tt))[2]*Math.sqrt(z[3]/z[4]),z[1]===approx_radicalOfRatio&&Math.abs(N-H)>1e-15&&console.log("fail testapproxRadicals with 4 digits:: 1 * sqrt( "+n+" / "+a+" ) . obtained: "+z));for(n=D=1;D<=5;n=++D)for(a=X=1;X<=5;a=++X)console.log("testApproxAll testing: 1 * log("+n+" ) / "+a),e=n/a,tt=Math.log(n)/a,H=(z=approxAll(tt))[2]*Math.log(z[3])/z[4],Math.abs(tt-H)>1e-15&&console.log("fail testApproxAll: 1 * log("+n+" ) / "+a+" . obtained: "+z);for(n=$=1;$<=5;n=++$)for(a=K=1;K<=5;a=++K)console.log("testApproxAll testing with 4 digits: 1 * log("+n+" ) / "+a),e=n/a,tt=(N=Math.log(n)/a).toFixed(4),H=(z=approxAll(tt))[2]*Math.log(z[3])/z[4],Math.abs(N-H)>1e-15&&console.log("fail testApproxAll with 4 digits: 1 * log("+n+" ) / "+a+" . obtained: "+z);for(n=Q=1;Q<=5;n=++Q)for(a=et=1;et<=5;a=++et)console.log("testApproxAll testing: 1 * log("+n+" / "+a+" )"),e=n/a,tt=Math.log(n/a),H=(z=approxAll(tt))[2]*Math.log(z[3]/z[4]),Math.abs(tt-H)>1e-15&&console.log("fail testApproxAll: 1 * log("+n+" / "+a+" ) . obtained: "+z);for(n=rt=1;rt<=5;n=++rt)for(a=o=1;o<=5;a=++o)console.log("testApproxAll testing with 4 digits: 1 * log("+n+" / "+a+" )"),e=n/a,tt=(N=Math.log(n/a)).toFixed(4),H=(z=approxAll(tt))[2]*Math.log(z[3]/z[4]),Math.abs(N-H)>1e-15&&console.log("fail testApproxAll with 4 digits: 1 * log("+n+" / "+a+" ) . obtained: "+z);for(n=u=1;u<=2;n=++u)for(a=d=1;d<=12;a=++d)console.log("testApproxAll testing: 1 * (e ^ "+n+" ) / "+a),e=n/a,tt=Math.pow(Math.E,n)/a,H=(z=approxAll(tt))[2]*Math.pow(Math.E,z[3])/z[4],Math.abs(tt-H)>1e-15&&console.log("fail testApproxAll: 1 * (e ^ "+n+" ) / "+a+" . obtained: "+z);for(n=w=1;w<=2;n=++w)for(a=R=1;R<=12;a=++R)console.log("approxRationalsOfPowersOfE testing with 4 digits: 1 * (e ^ "+n+" ) / "+a),e=n/a,tt=(N=Math.pow(Math.E,n)/a).toFixed(4),H=(z=approxRationalsOfPowersOfE(tt))[2]*Math.pow(Math.E,z[3])/z[4],Math.abs(N-H)>1e-15&&console.log("fail approxRationalsOfPowersOfE with 4 digits: 1 * (e ^ "+n+" ) / "+a+" . obtained: "+z);for(n=C=1;C<=2;n=++C)for(a=O=1;O<=12;a=++O)console.log("testApproxAll testing: 1 * pi ^ "+n+" / "+a),e=n/a,tt=Math.pow(Math.PI,n)/a,H=(z=approxAll(tt))[2]*Math.pow(Math.PI,z[3])/z[4],Math.abs(tt-H)>1e-15&&console.log("fail testApproxAll: 1 * pi ^ "+n+" / "+a+" ) . obtained: "+z);for(n=M=1;M<=2;n=++M)for(a=Y=1;Y<=12;a=++Y)console.log("approxRationalsOfPowersOfPI testing with 4 digits: 1 * pi ^ "+n+" / "+a),e=n/a,tt=(N=Math.pow(Math.PI,n)/a).toFixed(4),H=(z=approxRationalsOfPowersOfPI(tt))[2]*Math.pow(Math.PI,z[3])/z[4],Math.abs(N-H)>1e-15&&console.log("fail approxRationalsOfPowersOfPI with 4 digits: 1 * pi ^ "+n+" / "+a+" ) . obtained: "+z);for(n=j=1;j<=4;n=++j)for(a=Z=1;Z<=4;a=++Z)console.log("testApproxAll testing: 1 * sin( "+n+"/"+a+" )"),e=n/a,tt=Math.sin(e),V=(z=approxAll(tt))[3]/z[4],H=z[2]*Math.sin(V),Math.abs(tt-H)>1e-15&&console.log("fail testApproxAll: 1 * sin( "+n+"/"+a+" ) . obtained: "+z);for(n=J=1;J<=4;n=++J)for(a=nt=1;nt<=4;a=++nt)console.log("testApproxAll testing with 5 digits: 1 * sin( "+n+"/"+a+" )"),e=n/a,tt=(N=Math.sin(e)).toFixed(5),null==(z=approxAll(tt))&&console.log("fail testApproxAll with 5 digits: 1 * sin( "+n+"/"+a+" ) . obtained:  undefined "),V=z[3]/z[4],H=z[2]*Math.sin(V),(t=Math.abs(N-H))>1e-14&&console.log("fail testApproxAll with 5 digits: 1 * sin( "+n+"/"+a+" ) . obtained: "+z+" error: "+t);for(n=ot=1;ot<=4;n=++ot)for(a=i=1;i<=4;a=++i)console.log("testApproxAll testing with 4 digits: 1 * sin( "+n+"/"+a+" )"),e=n/a,tt=(N=Math.sin(e)).toFixed(4),null==(z=approxAll(tt))&&console.log("fail testApproxAll with 4 digits: 1 * sin( "+n+"/"+a+" ) . obtained:  undefined "),V=z[3]/z[4],H=z[2]*Math.sin(V),(t=Math.abs(N-H))>1e-14&&console.log("fail testApproxAll with 4 digits: 1 * sin( "+n+"/"+a+" ) . obtained: "+z+" error: "+t);for("0"!==approxAll(tt=0)[0]&&console.log("fail testApproxAll: 0"),"0"!==approxAll(tt=0)[0]&&console.log("fail testApproxAll: 0.0"),"0"!==approxAll(tt=0)[0]&&console.log("fail testApproxAll: 0.00"),"0"!==approxAll(tt=0)[0]&&console.log("fail testApproxAll: 0.000"),"0"!==approxAll(tt=0)[0]&&console.log("fail testApproxAll: 0.0000"),"1"!==approxAll(tt=1)[0]&&console.log("fail testApproxAll: 1"),"1"!==approxAll(tt=1)[0]&&console.log("fail testApproxAll: 1.0"),"1"!==approxAll(tt=1)[0]&&console.log("fail testApproxAll: 1.00"),"1"!==approxAll(tt=1)[0]&&console.log("fail testApproxAll: 1.000"),"1"!==approxAll(tt=1)[0]&&console.log("fail testApproxAll: 1.0000"),"1"!==approxAll(tt=1)[0]&&console.log("fail testApproxAll: 1.00000"),tt=Math.sqrt(2),"1 * sqrt( 2 ) / 1"!==approxAll(tt)[0]&&console.log("fail testApproxAll: Math.sqrt(2)"),"1 * sqrt( 2 ) / 1"!==approxAll(tt=1.41)[0]&&console.log("fail testApproxAll: 1.41"),"1 * sqrt( 2 ) / 1"!==approxRadicals(tt=1.4)[0]&&console.log("fail approxRadicals: 1.4"),"1 * log( 2 ) / 1"!==approxLogs(tt=.6)[0]&&console.log("fail approxLogs: 0.6"),"1 * log( 2 ) / 1"!==approxLogs(tt=.69)[0]&&console.log("fail approxLogs: 0.69"),"1 * log( 2 ) / 1"!==approxLogs(tt=.7)[0]&&console.log("fail approxLogs: 0.7"),"1 * log( 3 ) / 1"!==approxLogs(tt=1.09)[0]&&console.log("fail approxLogs: 1.09"),"1 * log( 3 ) / 1"!==approxAll(tt=1.09)[0]&&console.log("fail approxAll: 1.09"),"1 * log( 3 ) / 1"!==approxAll(tt=1.098)[0]&&console.log("fail approxAll: 1.098"),"1 * log( 3 ) / 1"!==approxAll(tt=1.1)[0]&&console.log("fail approxAll: 1.1"),"1 * log( 3 ) / 1"!==approxAll(tt=1.11)[0]&&console.log("fail approxAll: 1.11"),tt=Math.sqrt(3),"1 * sqrt( 3 ) / 1"!==approxAll(tt)[0]&&console.log("fail testApproxAll: Math.sqrt(3)"),"1"!==approxAll(tt=1)[0]&&console.log("fail testApproxAll: 1.0000"),"1 * (pi ^ 1 ) / 1 )"!==approxAll(tt=3.141592)[0]&&console.log("fail testApproxAll: 3.141592"),"10 * (pi ^ 1 ) / 1 )"!==approxAll(tt=31.41592)[0]&&console.log("fail testApproxAll: 31.41592"),"100 * (pi ^ 1 ) / 1 )"!==approxAll(tt=314.1592)[0]&&console.log("fail testApproxAll: 314.1592"),"10000000 * (pi ^ 1 ) / 1 )"!==approxAll(tt=31415926.53589793)[0]&&console.log("fail testApproxAll: 31415926.53589793"),tt=Math.sqrt(2),"2 * sin( 1/4 * pi )"!==approxTrigonometric(tt)[0]&&console.log("fail approxTrigonometric: Math.sqrt(2)"),tt=Math.sqrt(3),"2 * sin( 1/3 * pi )"!==approxTrigonometric(tt)[0]&&console.log("fail approxTrigonometric: Math.sqrt(3)"),tt=(Math.sqrt(6)-Math.sqrt(2))/4,"1 * sin( 1/12 * pi )"!==approxAll(tt)[0]&&console.log("fail testApproxAll: (Math.sqrt(6) - Math.sqrt(2))/4"),tt=Math.sqrt(2-Math.sqrt(2))/2,"1 * sin( 1/8 * pi )"!==approxAll(tt)[0]&&console.log("fail testApproxAll: Math.sqrt(2 - Math.sqrt(2))/2"),tt=(Math.sqrt(6)+Math.sqrt(2))/4,"1 * sin( 5/12 * pi )"!==approxAll(tt)[0]&&console.log("fail testApproxAll: (Math.sqrt(6) + Math.sqrt(2))/4"),tt=Math.sqrt(2+Math.sqrt(3))/2,"1 * sin( 5/12 * pi )"!==approxAll(tt)[0]&&console.log("fail testApproxAll: Math.sqrt(2 + Math.sqrt(3))/2"),tt=(Math.sqrt(5)-1)/4,"1 * sin( 1/10 * pi )"!==approxAll(tt)[0]&&console.log("fail testApproxAll: (Math.sqrt(5) - 1)/4"),tt=Math.sqrt(10-2*Math.sqrt(5))/4,"1 * sin( 1/5 * pi )"!==approxAll(tt)[0]&&console.log("fail testApproxAll: Math.sqrt(10 - 2*Math.sqrt(5))/4"),tt=Math.sin(Math.PI/7),"1 * sin( 1/7 * pi )"!==approxAll(tt)[0]&&console.log("fail testApproxAll: Math.sin(Math.PI/7)"),tt=Math.sin(Math.PI/9),"1 * sin( 1/9 * pi )"!==approxAll(tt)[0]&&console.log("fail testApproxAll: Math.sin(Math.PI/9)"),"6 * (pi ^ 5 ) / 1 )"!==approxRationalsOfPowersOfPI(tt=1836.15267)[0]&&console.log("fail approxRationalsOfPowersOfPI: 1836.15267"),n=p=1;p<=13;n=++p)for(a=c=1;c<=13;a=++c)console.log("approxTrigonometric testing: 1 * sin( "+n+"/"+a+" * pi )"),e=n/a,tt=Math.sin(Math.PI*e),V=(z=approxTrigonometric(tt))[3]/z[4],H=z[2]*Math.sin(Math.PI*V),Math.abs(tt-H)>1e-15&&console.log("fail approxTrigonometric: 1 * sin( "+n+"/"+a+" * pi ) . obtained: "+z);for(n=f=1;f<=13;n=++f)for(a=A=1;A<=13;a=++A)5===n&&11===a||6===n&&11===a||(console.log("approxTrigonometric testing with 4 digits: 1 * sin( "+n+"/"+a+" * pi )"),e=n/a,tt=(N=Math.sin(Math.PI*e)).toFixed(4),V=(z=approxTrigonometric(tt))[3]/z[4],H=z[2]*Math.sin(Math.PI*V),(t=Math.abs(N-H))>1e-14&&console.log("fail approxTrigonometric with 4 digits: 1 * sin( "+n+"/"+a+" * pi ) . obtained: "+z+" error: "+t));return console.log("testApprox done")},$.approxRadicals=approxRadicals,$.approxRationalsOfLogs=approxRationalsOfLogs,$.approxAll=approxAll,$.testApprox=testApprox,Eval_arccos=function(){return push(cadr(p1)),Eval(),arccos()},arccos=function(){var t;if(0,t=0,save(),p1=pop(),car(p1)===symbol(COS))return push(cadr(p1)),void restore();if(isdouble(p1))return 0,t=Math.acos(p1.d),push_double(t),void restore();if(isoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return evaluatingAsFloats?push_double(Math.PI/4):(push_rational(1,4),push_symbol(PI),multiply()),void restore();if(isminusoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),-1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return evaluatingAsFloats?push_double(3*Math.PI/4):(push_rational(3,4),push_symbol(PI),multiply()),void restore();if(!isrational(p1))return push_symbol(ARCCOS),push(p1),list(2),void restore();switch(push(p1),push_integer(2),multiply(),pop_integer()){case-2:evaluatingAsFloats?push_double(Math.PI):push_symbol(PI);break;case-1:evaluatingAsFloats?push_double(2*Math.PI/3):(push_rational(2,3),push_symbol(PI),multiply());break;case 0:evaluatingAsFloats?push_double(Math.PI/2):(push_rational(1,2),push_symbol(PI),multiply());break;case 1:evaluatingAsFloats?push_double(Math.PI/3):(push_rational(1,3),push_symbol(PI),multiply());break;case 2:evaluatingAsFloats?push_double(0):push(zero);break;default:push_symbol(ARCCOS),push(p1),list(2)}return restore()},Eval_arccosh=function(){return push(cadr(p1)),Eval(),arccosh()},arccosh=function(){var t;return t=0,save(),p1=pop(),car(p1)===symbol(COSH)?(push(cadr(p1)),void restore()):isdouble(p1)?((t=p1.d)<1&&stop("arccosh function argument is less than 1.0"),t=Math.log(t+Math.sqrt(t*t-1)),push_double(t),void restore()):isplusone(p1)?(push(zero),void restore()):(push_symbol(ARCCOSH),push(p1),list(2),restore())},Eval_arcsin=function(){return push(cadr(p1)),Eval(),arcsin()},arcsin=function(){var t;if(0,t=0,save(),p1=pop(),car(p1)===symbol(SIN))return push(cadr(p1)),void restore();if(isdouble(p1))return 0,t=Math.asin(p1.d),push_double(t),void restore();if(isoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return push_rational(1,4),push_symbol(PI),multiply(),void restore();if(isminusoneoversqrttwo(p1)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),-1,2)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),2)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2))return evaluatingAsFloats?push_double(-Math.PI/4):(push_rational(-1,4),push_symbol(PI),multiply()),void restore();if(!isrational(p1))return push_symbol(ARCSIN),push(p1),list(2),void restore();switch(push(p1),push_integer(2),multiply(),pop_integer()){case-2:evaluatingAsFloats?push_double(-Math.PI/2):(push_rational(-1,2),push_symbol(PI),multiply());break;case-1:evaluatingAsFloats?push_double(-Math.PI/6):(push_rational(-1,6),push_symbol(PI),multiply());break;case 0:evaluatingAsFloats?push_double(0):push(zero);break;case 1:evaluatingAsFloats?push_double(Math.PI/6):(push_rational(1,6),push_symbol(PI),multiply());break;case 2:evaluatingAsFloats?push_double(Math.PI/2):(push_rational(1,2),push_symbol(PI),multiply());break;default:push_symbol(ARCSIN),push(p1),list(2)}return restore()},Eval_arcsinh=function(){return push(cadr(p1)),Eval(),arcsinh()},arcsinh=function(){var t;return t=0,save(),p1=pop(),car(p1)===symbol(SINH)?(push(cadr(p1)),void restore()):isdouble(p1)?(t=p1.d,t=Math.log(t+Math.sqrt(t*t+1)),push_double(t),void restore()):isZeroAtomOrTensor(p1)?(push(zero),void restore()):(push_symbol(ARCSINH),push(p1),list(2),restore())},Eval_arctan=function(){return push(cadr(p1)),Eval(),arctan()},arctan=function(){var t;return t=0,save(),p1=pop(),car(p1)===symbol(TAN)?(push(cadr(p1)),void restore()):isdouble(p1)?(0,t=Math.atan(p1.d),push_double(t),void restore()):isZeroAtomOrTensor(p1)?(push(zero),void restore()):isnegative(p1)?(push(p1),negate(),arctan(),negate(),void restore()):Find(p1,symbol(SIN))&&Find(p1,symbol(COS))&&(push(p1),numerator(),p2=pop(),push(p1),denominator(),p3=pop(),car(p2)===symbol(SIN)&&car(p3)===symbol(COS)&&equal(cadr(p2),cadr(p3)))?(push(cadr(p2)),void restore()):car(p1)===symbol(POWER)&&equaln(cadr(p1),3)&&equalq(caddr(p1),-1,2)||car(p1)===symbol(MULTIPLY)&&equalq(car(cdr(p1)),1,3)&&car(car(cdr(cdr(p1))))===symbol(POWER)&&equaln(car(cdr(car(cdr(cdr(p1))))),3)&&equalq(car(cdr(cdr(car(cdr(cdr(p1)))))),1,2)?(push_rational(1,6),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),multiply(),void restore()):equaln(p1,1)?(push_rational(1,4),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),multiply(),void restore()):car(p1)===symbol(POWER)&&equaln(cadr(p1),3)&&equalq(caddr(p1),1,2)?(push_rational(1,3),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),multiply(),void restore()):(push_symbol(ARCTAN),push(p1),list(2),restore())},Eval_arctanh=function(){return push(cadr(p1)),Eval(),arctanh()},arctanh=function(){var t;return t=0,save(),p1=pop(),car(p1)===symbol(TANH)?(push(cadr(p1)),void restore()):isdouble(p1)?(((t=p1.d)<-1||t>1)&&stop("arctanh function argument is not in the interval [-1,1]"),t=Math.log((1+t)/(1-t))/2,push_double(t),void restore()):isZeroAtomOrTensor(p1)?(push(zero),void restore()):(push_symbol(ARCTANH),push(p1),list(2),restore())},DEBUG_ARG=!1,Eval_arg=function(){return push(cadr(p1)),Eval(),arg()},arg=function(){return save(),p1=pop(),push(p1),numerator(),yyarg(),push(p1),denominator(),yyarg(),subtract(),restore()},yyarg=function(){if(save(),p1=pop(),ispositivenumber(p1)||p1===symbol(PI))isdouble(p1)||evaluatingAsFloats?push_double(0):push_integer(0);else if(isnegativenumber(p1))isdouble(p1)||evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),negate();else if(issymbol(p1))push_symbol(ARG),push(p1),list(2);else if(car(p1)===symbol(POWER)&&equaln(cadr(p1),-1))evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),push(caddr(p1)),multiply();else if(car(p1)===symbol(POWER)&&cadr(p1)===symbol(E))push(caddr(p1)),imag();else if(car(p1)===symbol(POWER)&&isoneovertwo(caddr(p1)))DEBUG_ARG&&console.log("arg of a sqrt: "+p1),push(cadr(p1)),arg(),DEBUG_ARG&&console.log(" = 1/2 * "+stack[tos-1]),push(caddr(p1)),multiply();else if(car(p1)===symbol(MULTIPLY))for(push_integer(0),p1=cdr(p1);iscons(p1);)push(car(p1)),arg(),add(),p1=cdr(p1);else car(p1)===symbol(ADD)?(push(p1),rect(),p1=pop(),push(p1),real(),p2=pop(),push(p1),imag(),p3=pop(),isZeroAtomOrTensor(p2)?(evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),isnegative(p3)&&negate()):(push(p3),push(p2),divide(),arctan(),isnegative(p2)&&(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),isnegative(p3)?subtract():add()))):isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))?(push_symbol(ARG),push(p1),list(2)):push_integer(0);return restore()},bake=function(){var t,e,n,r,o,i;if(t=0,0,0,0,0,0,expanding++,save(),p1=pop(),e=ispolyexpandedform(p1,symbol(SYMBOL_S)),n=ispolyexpandedform(p1,symbol(SYMBOL_T)),r=ispolyexpandedform(p1,symbol(SYMBOL_X)),o=ispolyexpandedform(p1,symbol(SYMBOL_Y)),i=ispolyexpandedform(p1,symbol(SYMBOL_Z)),1===e&&0===n&&0===r&&0===o&&0===i)p2=symbol(SYMBOL_S),bake_poly();else if(0===e&&1===n&&0===r&&0===o&&0===i)p2=symbol(SYMBOL_T),bake_poly();else if(0===e&&0===n&&1===r&&0===o&&0===i)p2=symbol(SYMBOL_X),bake_poly();else if(0===e&&0===n&&0===r&&1===o&&0===i)p2=symbol(SYMBOL_Y),bake_poly();else if(0===e&&0===n&&0===r&&0===o&&1===i)p2=symbol(SYMBOL_Z),bake_poly();else if(iscons(p1)&&car(p1)!==symbol(FOR)){for(t=tos,push(car(p1)),p1=cdr(p1);iscons(p1);)push(car(p1)),bake(),p1=cdr(p1);list(tos-t)}else push(p1);return restore(),expanding--},polyform=function(){var t;if(t=0,save(),p2=pop(),p1=pop(),ispolyexpandedform(p1,p2))bake_poly();else if(iscons(p1)){for(t=tos,push(car(p1)),p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),polyform(),p1=cdr(p1);list(tos-t)}else push(p1);return restore()},bake_poly=function(){var t,e,n,r,o,i;for(0,n=0,0,0,t=tos,push(p1),push(p2),r=coeff(),e=tos,n=i=r-1;i>=0;n=i+=-1)p1=stack[t+n],bake_poly_term(n);return(o=tos-e)>1&&(list(o),push(symbol(ADD)),swap(),cons()),p1=pop(),moveTos(tos-r),push(p1)},bake_poly_term=function(t){var e,n;if(0,0,!isZeroAtomOrTensor(p1)){if(0!==t){if(e=tos,car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1);else equaln(p1,1)||push(p1);return 1===t?push(p2):(push(symbol(POWER)),push(p2),push_integer(t),list(3)),(n=tos-e)>1?(list(n),push(symbol(MULTIPLY)),swap(),cons()):void 0}if(car(p1)===symbol(ADD))for(p1=cdr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1);else push(p1)}},Eval_besselj=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),besselj()},besselj=function(){return save(),yybesselj(),restore()},yybesselj=function(){var t,e;if(t=0,0,p2=pop(),p1=pop(),push(p2),e=pop_integer(),isdouble(p1)&&!isNaN(e))return t=jn(e,p1.d),void push_double(t);if(isZeroAtomOrTensor(p1)&&isZeroAtomOrTensor(p2))push_integer(1);else{if(!isZeroAtomOrTensor(p1)||isNaN(e))return p2.k===NUM&&MEQUAL(p2.q.b,2)?MEQUAL(p2.q.a,1)?(evaluatingAsFloats?push_double(2/Math.PI):(push_integer(2),push_symbol(PI),divide()),push(p1),divide(),push_rational(1,2),power(),push(p1),sine(),void multiply()):MEQUAL(p2.q.a,-1)?(evaluatingAsFloats?push_double(2/Math.PI):(push_integer(2),push_symbol(PI),divide()),push(p1),divide(),push_rational(1,2),power(),push(p1),cosine(),void multiply()):(push_integer(MSIGN(p2.q.a)),p3=pop(),push_integer(2),push(p1),divide(),push(p2),push(p3),subtract(),multiply(),push(p1),push(p2),push(p3),subtract(),besselj(),multiply(),push(p1),push(p2),push_integer(2),push(p3),multiply(),subtract(),besselj(),void subtract()):isnegativeterm(p1)?(push(p1),negate(),push(p2),power(),push(p1),push(p2),negate(),power(),multiply(),push_symbol(BESSELJ),push(p1),negate(),push(p2),list(3),void multiply()):isnegativeterm(p2)?(push_integer(-1),push(p2),power(),push_symbol(BESSELJ),push(p1),push(p2),negate(),list(3),void multiply()):(push(symbol(BESSELJ)),push(p1),push(p2),list(3));push_integer(0)}},Eval_bessely=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),bessely()},bessely=function(){return save(),yybessely(),restore()},yybessely=function(){var t,e;return t=0,0,p2=pop(),p1=pop(),push(p2),e=pop_integer(),isdouble(p1)&&!isNaN(e)?(t=yn(e,p1.d),void push_double(t)):isnegativeterm(p2)?(push_integer(-1),push(p2),power(),push_symbol(BESSELY),push(p1),push(p2),negate(),list(3),void multiply()):(push_symbol(BESSELY),push(p1),push(p2),void list(3))},mint=function(t){return bigInt(t)},isSmall=function(t){return t.geq(Number.MIN_SAFE_INTEGER)&&t.leq(Number.MAX_SAFE_INTEGER)},setSignTo=function(t,e){if(t.isPositive()){if(e<0)return t.multiply(bigInt(-1))}else if(e>0)return t.multiply(bigInt(-1));return t},makeSignSameAs=function(t,e){if(t.isPositive()){if(e.isNegative())return t.multiply(bigInt(-1))}else if(e.isPositive())return t.multiply(bigInt(-1));return t},makePositive=function(t){return t.isNegative()?t.multiply(bigInt(-1)):t},add_numbers=function(){var t,e;if(t=1,e=1,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),t=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(t+e),restore();qadd()},subtract_numbers=function(){var t,e;if(t=0,e=0,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),t=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(t-e),restore();qsub()},multiply_numbers=function(){var t,e;if(t=0,e=0,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),t=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(t*e),restore();qmul()},divide_numbers=function(){var t,e;if(t=0,e=0,!isrational(stack[tos-1])||!isrational(stack[tos-2]))return save(),p2=pop(),p1=pop(),isZeroAtomOrTensor(p2)&&stop("divide by zero"),t=isdouble(p1)?p1.d:convert_rational_to_double(p1),e=isdouble(p2)?p2.d:convert_rational_to_double(p2),push_double(t/e),restore();qdiv()},invert_number=function(){var t,e;return save(),p1=pop(),isZeroAtomOrTensor(p1)&&stop("divide by zero"),isdouble(p1)?(push_double(1/p1.d),void restore()):(t=bigInt(p1.q.a),e=bigInt(p1.q.b),e=makeSignSameAs(e,t),t=setSignTo(t,1),(p1=new U).k=NUM,p1.q.a=e,p1.q.b=t,push(p1),restore())},compare_rationals=function(t,e){var n,r;return 0,n=mmul(t.q.a,e.q.b),r=mmul(t.q.b,e.q.a),mcmp(n,r)},compare_numbers=function(t,e){var n,r;return n=0,r=0,isrational(t)&&isrational(e)?compare_rationals(t,e):(n=isdouble(t)?t.d:convert_rational_to_double(t))<(r=isdouble(e)?e.d:convert_rational_to_double(e))?-1:n>r?1:0},negate_number=function(){if(save(),p1=pop(),isZeroAtomOrTensor(p1))return push(p1),void restore();switch(p1.k){case NUM:(p2=new U).k=NUM,p2.q.a=bigInt(p1.q.a.multiply(bigInt.minusOne)),p2.q.b=bigInt(p1.q.b),push(p2);break;case DOUBLE:push_double(-p1.d);break;default:stop("bug caught in mp_negate_number")}return restore()},bignum_truncate=function(){var t;return save(),p1=pop(),t=mdiv(p1.q.a,p1.q.b),(p1=new U).k=NUM,p1.q.a=t,p1.q.b=bigInt(1),push(p1),restore()},mp_numerator=function(){return save(),(p1=pop()).k!==NUM?(push(one),void restore()):((p2=new U).k=NUM,p2.q.a=bigInt(p1.q.a),p2.q.b=bigInt(1),push(p2),restore())},mp_denominator=function(){return save(),(p1=pop()).k!==NUM?(push(one),void restore()):((p2=new U).k=NUM,p2.q.a=bigInt(p1.q.b),p2.q.b=bigInt(1),push(p2),restore())},bignum_power_number=function(t){var e,n,r;return save(),p1=pop(),e=mpow(p1.q.a,Math.abs(t)),n=mpow(p1.q.b,Math.abs(t)),t<0&&(r=e,e=makeSignSameAs(e=n,n=r),n=setSignTo(n,1)),(p1=new U).k=NUM,p1.q.a=e,p1.q.b=n,push(p1),restore()},convert_bignum_to_double=function(t){return t.toJSNumber()},convert_rational_to_double=function(t){var e;return t.q,(e=t.q.a.divmod(t.q.b)).quotient+e.remainder/t.q.b.toJSNumber()},push_integer=function(t){return DEBUG&&console.log("pushing integer "+t),save(),(p1=new U).k=NUM,p1.q.a=bigInt(t),p1.q.b=bigInt(1),push(p1),restore()},push_double=function(t){return save(),(p1=new U).k=DOUBLE,p1.d=t,push(p1),restore()},push_rational=function(t,e){var n;return(n=new U).k=NUM,n.q.a=bigInt(t),n.q.b=bigInt(e),push(n)},pop_integer=function(){var t;switch(t=NaN,save(),(p1=pop()).k){case NUM:isinteger(p1)&&isSmall(p1.q.a)&&(t=p1.q.a.toJSNumber());break;case DOUBLE:DEBUG&&console.log("popping integer but double is found"),Math.floor(p1.d)===p1.d&&(DEBUG&&console.log("...altough it's an integer"),t=p1.d)}return restore(),t},print_double=function(t,e){var n,r;return n="",r=doubleToReasonableString(t.d),n+=print_str(1===e&&"-"===r?r+1:r)},bignum_scan_integer=function(t){var e,n,r;return save(),"+"!==(r=t[n=0])&&"-"!==r||n++,e=bigInt(t.substring(n)),(p1=new U).k=NUM,p1.q.a=e,p1.q.b=bigInt(1),push(p1),"-"===r&&negate(),restore()},bignum_scan_float=function(t){return push_double(parseFloat(t))},print_number=function(t,e){var n,r,o;switch(r="",o="","",t.k){case NUM:n=t.q.a.toString(),e||"-"===n[0]&&(n=n.substring(1)),printMode===PRINTMODE_LATEX&&isfraction(t)&&(n="\\frac{"+n+"}{"),r+=n,isfraction(t)&&(printMode!==PRINTMODE_LATEX&&(r+="/"),o=t.q.b.toString(),printMode===PRINTMODE_LATEX&&(o+="}"),r+=o);break;case DOUBLE:n=doubleToReasonableString(t.d),e||"-"===n[0]&&(n=n.substring(1)),r+=n}return r},gcd_numbers=function(){return save(),p2=pop(),p1=pop(),(p3=new U).k=NUM,p3.q.a=mgcd(p1.q.a,p2.q.a),p3.q.b=mgcd(p1.q.b,p2.q.b),p3.q.a=setSignTo(p3.q.a,1),push(p3),restore()},pop_double=function(){var t;switch(t=0,save(),(p1=pop()).k){case NUM:t=convert_rational_to_double(p1);break;case DOUBLE:t=p1.d;break;default:t=0}return restore(),t},bignum_float=function(){var t;return 0,t=convert_rational_to_double(pop()),push_double(t)},bignum_factorial=function(t){return save(),(p1=new U).k=NUM,p1.q.a=__factorial(t),p1.q.b=bigInt(1),push(p1),restore()},__factorial=function(t){var e,n,r,o,i;if(r=0,0===t||1===t)return e=bigInt(1);if(e=bigInt(2),n=bigInt(0),3<=t)for(r=o=3,i=t;3<=i?o<=i:o>=i;r=3<=i?++o:--o)n=bigInt(r),e=mmul(e,n);return e},mask=[1,2,4,8,16,32,64,128,256,512,1024,2048,4096,8192,16384,32768,65536,131072,262144,524288,1048576,2097152,4194304,8388608,16777216,33554432,67108864,134217728,268435456,536870912,1073741824,2147483648],mp_set_bit=function(t,e){return console.log("not implemented yet"),t[e/32]|=mask[e%32]},mp_clr_bit=function(t,e){return console.log("not implemented yet"),t[e/32]&=~mask[e%32]},mshiftright=function(t){return t.shiftRight()},Eval_binomial=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),binomial()},binomial=function(){return save(),ybinomial(),restore()},ybinomial=function(){if(p2=pop(),p1=pop(),0!==BINOM_check_args())return push(p1),factorial(),push(p2),factorial(),divide(),push(p1),push(p2),subtract(),factorial(),divide();push(zero)},BINOM_check_args=function(){return isNumericAtom(p1)&&lessp(p1,zero)?0:isNumericAtom(p2)&&lessp(p2,zero)?0:isNumericAtom(p1)&&isNumericAtom(p2)&&lessp(p1,p2)?0:1},Eval_ceiling=function(){return push(cadr(p1)),Eval(),ceiling()},ceiling=function(){return save(),yyceiling(),restore()},yyceiling=function(){var t;return t=0,p1=pop(),isNumericAtom(p1)?isdouble(p1)?(t=Math.ceil(p1.d),void push_double(t)):isinteger(p1)?void push(p1):((p3=new U).k=NUM,p3.q.a=mdiv(p1.q.a,p1.q.b),p3.q.b=mint(1),push(p3),isnegativenumber(p1)?1:(push_integer(1),add())):(push_symbol(CEILING),push(p1),void list(2))},Eval_choose=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),choose()},choose=function(){return save(),p2=pop(),p1=pop(),0===choose_check_args()?(push_integer(0),void restore()):(push(p1),factorial(),push(p2),factorial(),divide(),push(p1),push(p2),subtract(),factorial(),divide(),restore())},choose_check_args=function(){return isNumericAtom(p1)&&lessp(p1,zero)?0:isNumericAtom(p2)&&lessp(p2,zero)?0:isNumericAtom(p1)&&isNumericAtom(p2)&&lessp(p1,p2)?0:1},Eval_circexp=function(){return push(cadr(p1)),Eval(),circexp(),Eval()},circexp=function(){var t,e,n,r;if(e=0,t=0,save(),p1=pop(),car(p1)===symbol(COS))return push(cadr(p1)),expcos(),void restore();if(car(p1)===symbol(SIN))return push(cadr(p1)),expsin(),void restore();if(car(p1)===symbol(TAN))return p1=cadr(p1),push(imaginaryunit),push(p1),multiply(),exponential(),p2=pop(),push(imaginaryunit),push(p1),multiply(),negate(),exponential(),p3=pop(),push(p3),push(p2),subtract(),push(imaginaryunit),multiply(),push(p2),push(p3),add(),divide(),void restore();if(car(p1)===symbol(COSH))return p1=cadr(p1),push(p1),exponential(),push(p1),negate(),exponential(),add(),push_rational(1,2),multiply(),void restore();if(car(p1)===symbol(SINH))return p1=cadr(p1),push(p1),exponential(),push(p1),negate(),exponential(),subtract(),push_rational(1,2),multiply(),void restore();if(car(p1)===symbol(TANH))return p1=cadr(p1),push(p1),push_integer(2),multiply(),exponential(),p1=pop(),push(p1),push_integer(1),subtract(),push(p1),push_integer(1),add(),divide(),void restore();if(iscons(p1)){for(t=tos;iscons(p1);)push(car(p1)),circexp(),p1=cdr(p1);return list(tos-t),void restore()}if(p1.k===TENSOR){for(push(p1),copy_tensor(),e=n=0,r=(p1=pop()).tensor.nelem;0<=r?n<r:n>r;e=0<=r?++n:--n)push(p1.tensor.elem[e]),circexp(),p1.tensor.elem[e]=pop();return push(p1),void restore()}return push(p1),restore()},Eval_clearall=function(){return do_clearall(),push(symbol(NIL))},do_clearall=function(){return 0===test_flag&&clear_term(),do_clearPatterns(),clear_symbols(),defn(),codeGen=!1},clearall=function(){return run("clearall")},clearRenamedVariablesToAvoidBindingToExternalScope=function(){var t,e,n,r;for(r=[],t=e=0,n=symtab.length;0<=n?e<n:e>n;t=0<=n?++e:--e)-1!==symtab[t].printname.indexOf("AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE")?(symtab[t].k=SYM,symtab[t].printname="",binding[t]=symtab[t],r.push(isSymbolReclaimable[t]=!0)):r.push(void 0);return r},Eval_clear=function(){var t,e;for(p2=cdr(p1);iscons(p2);)(e=car(p2)).k!==SYM&&stop("symbol error"),t=symtab.indexOf(e),symtab[t].k=SYM,symtab[t].printname="",binding[t]=symtab[t],isSymbolReclaimable[t]=!0,p2=cdr(p2);return push(symbol(NIL))},DEBUG_CLOCKFORM=!1,Eval_clock=function(){return push(cadr(p1)),Eval(),clockform()},clockform=function(){return save(),p1=pop(),push(p1),abs(),DEBUG_CLOCKFORM&&console.log("clockform: abs of "+p1+" : "+stack[tos-1]),push_symbol(POWER),push_integer(-1),push(p1),arg(),DEBUG_CLOCKFORM&&console.log("clockform: arg of "+p1+" : "+stack[tos-1]),evaluatingAsFloats?push_double(Math.PI):push(symbol(PI)),divide(),DEBUG_CLOCKFORM&&console.log("clockform: divide : "+stack[tos-1]),list(3),DEBUG_CLOCKFORM&&console.log("clockform: power : "+stack[tos-1]),multiply(),DEBUG_CLOCKFORM&&console.log("clockform: multiply : "+stack[tos-1]),restore()},Eval_coeff=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),p3=pop(),p2=pop(),p1=pop(),p3===symbol(NIL)&&(p3=p2,p2=symbol(SYMBOL_X)),push(p1),push(p2),push(p3),power(),divide(),push(p2),filter()},coeff=function(){var t,e,n;for(save(),p2=pop(),p1=pop(),t=tos;;){if(push(p1),push(p2),push(zero),subst(),Eval(),p3=pop(),push(p3),push(p1),push(p3),subtract(),p1=pop(),equal(p1,zero))return e=tos-t,restore(),e;push(p1),push(p2),n=expanding,expanding=1,divide(),expanding=n,p1=pop()}},Eval_cofactor=function(){var t,e,n;return 0,0,0,push(cadr(p1)),Eval(),p2=pop(),istensor(p2)&&2===p2.tensor.ndim&&p2.tensor.dim[0]===p2.tensor.dim[1]?1:stop("cofactor: 1st arg: square matrix expected"),n=p2.tensor.dim[0],push(caddr(p1)),Eval(),((t=pop_integer())<1||t>n)&&stop("cofactor: 2nd arg: row index expected"),push(cadddr(p1)),Eval(),((e=pop_integer())<1||e>n)&&stop("cofactor: 3rd arg: column index expected"),cofactor(p2,n,t-1,e-1)},cofactor=function(t,e,n,r){var o,i,a,s,u,p;for(o=0,a=0,o=s=0,u=e;0<=u?s<u:s>u;o=0<=u?++s:--s)for(a=i=0,p=e;0<=p?i<p:i>p;a=0<=p?++i:--i)o!==n&&a!==r&&push(t.tensor.elem[e*o+a]);if(determinant(e-1),(n+r)%2)return negate()},Eval_condense=function(){return push(cadr(p1)),Eval(),Condense()},Condense=function(){var t;return t=expanding,expanding=0,save(),yycondense(),restore(),expanding=t},yycondense=function(){if(p1=pop(),car(p1)===symbol(ADD)){for(p3=cdr(p1),push(car(p3)),p3=cdr(p3);iscons(p3);)push(car(p3)),gcd(),p3=cdr(p3);for(inverse(),p2=pop(),push(zero),p3=cdr(p1);iscons(p3);)push(p2),push(car(p3)),multiply_noexpand(),add(),p3=cdr(p3);return yyexpand(),push(p2),divide()}push(p1)},Eval_conj=function(){return push(cadr(p1)),Eval(),p1=pop(),push(p1),Find(p1,imaginaryunit)?conjugate():(polar(),conjugate(),clockform())},conjugate=function(){return push(imaginaryunit),push(imaginaryunit),negate(),subst(),Eval()},consCount=0,cons=function(){var t;return consCount++,DEBUG&&console.log("cons tos: "+tos+" # "+consCount),(t=new U).k=CONS,t.cons.cdr=pop(),t===t.cons.cdr&&console.log("something wrong p == its cdr"),t.cons.car=pop(),push(t)},Eval_contract=function(){return push(cadr(p1)),Eval(),cddr(p1)===symbol(NIL)?(push_integer(1),push_integer(2)):(push(caddr(p1)),Eval(),push(cadddr(p1)),Eval()),contract()},contract=function(){return save(),yycontract(),restore()},yycontract=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_,b,x,E,w,A,I,R;if(o=0,i=0,s=0,p=0,c=0,d=0,0,0,v=0,e=[],n=[],p3=pop(),p2=pop(),p1=pop(),!istensor(p1))return isZeroAtomOrTensor(p1)||stop("contract: tensor expected, 1st arg is not a tensor"),void push(zero);for(push(p2),c=pop_integer(),push(p3),d=pop_integer(),g=p1.tensor.ndim,(c<1||c>g||d<1||d>g||c===d||p1.tensor.dim[c-1]!==p1.tensor.dim[d-1])&&stop("contract: index out of range"),c--,d--,h=p1.tensor.dim[c],v=1,i=y=0,b=g;0<=b?y<b:y>b;i=0<=b?++y:--y)i!==c&&i!==d&&(v*=p1.tensor.dim[i]);for((p2=alloc_tensor(v)).tensor.ndim=g-2,s=0,i=a=0,x=g;0<=x?a<x:a>x;i=0<=x?++a:--a)i!==c&&i!==d&&(p2.tensor.dim[s++]=p1.tensor.dim[i]);for(t=p1.tensor.elem,r=p2.tensor.elem,i=u=0,E=g;0<=E?u<E:u>E;i=0<=E?++u:--u)e[i]=0,n[i]=p1.tensor.dim[i];for(i=l=0,w=v;0<=w?l<w:l>w;i=0<=w?++l:--l){for(push(zero),s=f=0,A=h;0<=A?f<A:f>A;s=0<=A?++f:--f){for(e[c]=s,e[d]=s,o=0,p=m=0,I=g;0<=I?m<I:m>I;p=0<=I?++m:--m)o=o*n[p]+e[p];push(t[o]),add()}for(r[i]=pop(),s=_=R=g-1;R<=0?_<=0:_>=0;s=R<=0?++_:--_)if(s!==c&&s!==d){if(++e[s]<n[s])break;e[s]=0}}return push(1===v?r[0]:p2)},Eval_cos=function(){return push(cadr(p1)),Eval(),cosine()},cosine=function(){return save(),p1=pop(),car(p1)===symbol(ADD)?cosine_of_angle_sum():cosine_of_angle(),restore()},cosine_of_angle_sum=function(){for(p2=cdr(p1);iscons(p2);){if(p4=car(p2),isnpi(p4))return push(p1),push(p4),subtract(),p3=pop(),push(p3),cosine(),push(p4),cosine(),multiply(),push(p3),sine(),push(p4),sine(),multiply(),void subtract();p2=cdr(p2)}return cosine_of_angle()},cosine_of_angle=function(){var t,e;if(car(p1)!==symbol(ARCCOS)){if(isdouble(p1))return t=Math.cos(p1.d),Math.abs(t)<1e-10&&(t=0),void push_double(t);if(isnegative(p1)&&(push(p1),negate(),p1=pop()),car(p1)===symbol(ARCTAN))return push_integer(1),push(cadr(p1)),push_integer(2),power(),add(),push_rational(-1,2),void power();if(push(p1),push_integer(180),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),divide(),(e=pop_integer())<0||isNaN(e))return push(symbol(COS)),push(p1),void list(2);switch(e%360){case 90:case 270:return push_integer(0);case 60:case 300:return push_rational(1,2);case 120:case 240:return push_rational(-1,2);case 45:case 315:return push_rational(1,2),push_integer(2),push_rational(1,2),power(),multiply();case 135:case 225:return push_rational(-1,2),push_integer(2),push_rational(1,2),power(),multiply();case 30:case 330:return push_rational(1,2),push_integer(3),push_rational(1,2),power(),multiply();case 150:case 210:return push_rational(-1,2),push_integer(3),push_rational(1,2),power(),multiply();case 0:return push_integer(1);case 180:return push_integer(-1);default:return push(symbol(COS)),push(p1),list(2)}}else push(cadr(p1))},Eval_cosh=function(){return push(cadr(p1)),Eval(),ycosh()},ycosh=function(){return save(),yycosh(),restore()},yycosh=function(){var t;if(t=0,p1=pop(),car(p1)!==symbol(ARCCOSH)){if(isdouble(p1))return t=Math.cosh(p1.d),Math.abs(t)<1e-10&&(t=0),void push_double(t);if(!isZeroAtomOrTensor(p1))return push_symbol(COSH),push(p1),list(2);push(one)}else push(cadr(p1))},Eval_decomp=function(){var t;return save(),console.log("Eval_decomp is being called!!!!!!!!!!!!!!!!!!!!"),t=tos,push(symbol(NIL)),push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p1=pop())===symbol(NIL)?guess():push(p1),decomp(!1),list(tos-t),restore()},pushTryNotToDuplicate=function(t){if(!(tos>0&&(DEBUG&&console.log("comparing "+t+" to: "+stack[tos-1]),equal(t,stack[tos-1]))))return push(t);DEBUG&&console.log("skipping "+t+" because it's already on stack ")},decomp=function(t){if(save(),p2=pop(),p1=pop(),DEBUG&&console.log("DECOMPOSING "+p1),t){if(!iscons(p1))return DEBUG&&console.log(" ground thing: "+p1),pushTryNotToDuplicate(p1),void restore()}else if(0===Find(p1,p2))return DEBUG&&console.log(" entire expression is constant"),pushTryNotToDuplicate(p1),void restore();if(isadd(p1))return decomp_sum(t),void restore();if(ismultiply(p1))return decomp_product(t),void restore();for(DEBUG&&console.log(" naive decomp"),p3=cdr(p1),DEBUG&&console.log("startig p3: "+p3);iscons(p3);)t&&push(car(p3)),DEBUG&&console.log("recursive decomposition"),push(car(p3)),DEBUG&&console.log("car(p3): "+car(p3)),push(p2),DEBUG&&console.log("p2: "+p2),decomp(t),p3=cdr(p3);return restore()},decomp_sum=function(t){var e;for(DEBUG&&console.log(" decomposing the sum "),0,p3=cdr(p1);iscons(p3);)(Find(car(p3),p2)||t)&&(push(car(p3)),push(p2),decomp(t)),p3=cdr(p3);for(e=tos,p3=cdr(p1);iscons(p3);)0===Find(car(p3),p2)&&pushTryNotToDuplicate(car(p3)),p3=cdr(p3);if(tos-e)return add_all(tos-e),p3=pop(),pushTryNotToDuplicate(p3),push(p3),negate()},decomp_product=function(t){var e;for(DEBUG&&console.log(" decomposing the product "),0,p3=cdr(p1);iscons(p3);)(Find(car(p3),p2)||t)&&(push(car(p3)),push(p2),decomp(t)),p3=cdr(p3);for(e=tos,p3=cdr(p1);iscons(p3);)0===Find(car(p3),p2)&&pushTryNotToDuplicate(car(p3)),p3=cdr(p3);if(tos-e)return multiply_all(tos-e)},define_user_function=function(){return p3=caadr(p1),p4=cdadr(p1),p5=caddr(p1),issymbol(p3)||stop("function name?"),car(p5)===symbol(EVAL)&&(push(cadr(p5)),Eval(),p5=pop()),push_symbol(FUNCTION),push(p5),push(p4),list(3),p5=pop(),set_binding(p3,p5),push_symbol(NIL)},Eval_function_reference=function(){return push(p1)},Eval_defint=function(){for(push(cadr(p1)),Eval(),p2=pop(),p1=cddr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1),Eval(),p3=pop(),push(car(p1)),p1=cdr(p1),Eval(),p4=pop(),push(car(p1)),p1=cdr(p1),Eval(),p5=pop(),push(p2),push(p3),integral(),p2=pop(),push(p2),push(p3),push(p5),subst(),Eval(),push(p2),push(p3),push(p4),subst(),Eval(),subtract(),p2=pop();return push(p2)},Eval_degree=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p1=pop())===symbol(NIL)?guess():push(p1),degree()},degree=function(){return save(),p2=pop(),p1=pop(),p3=zero,yydegree(p1),push(p3),restore()},yydegree=function(t){var e;if(equal(t,p2)){if(isZeroAtomOrTensor(p3))return p3=one}else if(car(t)===symbol(POWER)){if(equal(cadr(t),p2)&&isNumericAtom(caddr(t))&&lessp(p3,caddr(t)))return p3=caddr(t)}else if(iscons(t)){for(t=cdr(t),e=[];iscons(t);)yydegree(car(t)),e.push(t=cdr(t));return e}},Eval_denominator=function(){return push(cadr(p1)),Eval(),denominator()},denominator=function(){var t,e;if(t=0,e=pop(),car(e)===symbol(ADD)&&(push(e),rationalize(),e=pop()),car(e)!==symbol(MULTIPLY)||isplusone(car(cdr(e))))return isrational(e)?(push(e),mp_denominator()):car(e)===symbol(POWER)&&isnegativeterm(caddr(e))?(push(e),reciprocate()):push(one);for(t=tos,e=cdr(e);iscons(e);)push(car(e)),denominator(),e=cdr(e);return multiply_all(tos-t)},Eval_derivative=function(){var t,e,n,r,o;for(0,p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?(guess(),push(symbol(NIL))):isNumericAtom(p2)?(guess(),push(p2)):(push(p2),p1=cdr(p1),push(car(p1)),Eval()),p5=pop(),p4=pop(),p3=pop();;){if(isNumericAtom(p5)?(push(p5),e=pop_integer(),isNaN(e)&&stop("nth derivative: check n")):e=1,push(p3),e>=0)for(n=0,r=e;0<=r?n<r:n>r;0<=r?++n:--n)push(p4),derivative();else for(t=0,o=e=-e;0<=o?t<o:t>o;0<=o?++t:--t)push(p4),integral();if(p3=pop(),p5===symbol(NIL))break;if(isNumericAtom(p5)){if(p1=cdr(p1),push(car(p1)),Eval(),(p5=pop())===symbol(NIL))break;isNumericAtom(p5)?1:(p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop())}else p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop()}return push(p3)},derivative=function(){return save(),p2=pop(),p1=pop(),isNumericAtom(p2)&&stop("undefined function"),istensor(p1)?istensor(p2)?d_tensor_tensor():d_tensor_scalar():istensor(p2)?d_scalar_tensor():d_scalar_scalar(),restore()},d_scalar_scalar=function(){return issymbol(p2)?d_scalar_scalar_1():(push(p1),push(p2),push(symbol(SECRETX)),subst(),push(symbol(SECRETX)),derivative(),push(symbol(SECRETX)),push(p2),subst())},d_scalar_scalar_1=function(){if(equal(p1,p2))push(one);else if(iscons(p1))if(isadd(p1))dsum();else if(car(p1)!==symbol(MULTIPLY))if(car(p1)!==symbol(POWER))if(car(p1)!==symbol(DERIVATIVE))if(car(p1)!==symbol(LOG))if(car(p1)!==symbol(SIN))if(car(p1)!==symbol(COS))if(car(p1)!==symbol(TAN))if(car(p1)!==symbol(ARCSIN))if(car(p1)!==symbol(ARCCOS))if(car(p1)!==symbol(ARCTAN))if(car(p1)!==symbol(SINH))if(car(p1)!==symbol(COSH))if(car(p1)!==symbol(TANH))if(car(p1)!==symbol(ARCSINH))if(car(p1)!==symbol(ARCCOSH))if(car(p1)!==symbol(ARCTANH))if(car(p1)!==symbol(ABS))if(car(p1)!==symbol(SGN))if(car(p1)!==symbol(HERMITE))if(car(p1)!==symbol(ERF))if(car(p1)!==symbol(ERFC))if(car(p1)!==symbol(BESSELJ))if(car(p1)!==symbol(BESSELY)){if(car(p1)!==symbol(INTEGRAL)||caddr(p1)!==p2)return dfunction();derivative_of_integral()}else isZeroAtomOrTensor(caddr(p1))?dbessely0():dbesselyn();else isZeroAtomOrTensor(caddr(p1))?dbesselj0():dbesseljn();else derfc();else derf();else dhermite();else dsgn();else dabs();else darctanh();else darccosh();else darcsinh();else dtanh();else dcosh();else dsinh();else darctan();else darccos();else darcsin();else dtan();else dcos();else dsin();else dlog();else dd();else dpower();else dproduct();else push(zero)},dsum=function(){var t;for(t=tos,p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),derivative(),p1=cdr(p1);return add_all(tos-t)},dproduct=function(){var t,e,n,r,o,i,a;for(t=0,n=0,0,t=o=0,i=r=length(p1)-1;0<=i?o<i:o>i;t=0<=i?++o:--o){for(p3=cdr(p1),n=e=0,a=r;0<=a?e<a:e>a;n=0<=a?++e:--e)push(car(p3)),t===n&&(push(p2),derivative()),p3=cdr(p3);multiply_all(r)}return add_all(r)},dpower=function(){return push(caddr(p1)),push(cadr(p1)),divide(),push(cadr(p1)),push(p2),derivative(),multiply(),push(cadr(p1)),logarithm(),push(caddr(p1)),push(p2),derivative(),multiply(),add(),push(p1),multiply()},dlog=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),divide()},dd=function(){return push(cadr(p1)),push(p2),derivative(),p3=pop(),car(p3)===symbol(DERIVATIVE)?(push_symbol(DERIVATIVE),push_symbol(DERIVATIVE),push(cadr(p3)),lessp(caddr(p3),caddr(p1))?(push(caddr(p3)),list(3),push(caddr(p1))):(push(caddr(p1)),list(3),push(caddr(p3))),list(3)):(push(p3),push(caddr(p1)),derivative())},dfunction=function(){return(p3=cdr(p1))===symbol(NIL)||Find(p3,p2)?(push_symbol(DERIVATIVE),push(p1),push(p2),list(3)):push(zero)},dsin=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),cosine(),multiply()},dcos=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),sine(),multiply(),negate()},dtan=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),cosine(),push_integer(-2),power(),multiply()},darcsin=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),subtract(),push_rational(-1,2),power(),multiply()},darccos=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),subtract(),push_rational(-1,2),power(),multiply(),negate()},darctan=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),add(),inverse(),multiply(),simplify()},dsinh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),ycosh(),multiply()},dcosh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),ysinh(),multiply()},dtanh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),ycosh(),push_integer(-2),power(),multiply()},darcsinh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(2),power(),push_integer(1),add(),push_rational(-1,2),power(),multiply()},darccosh=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(2),power(),push_integer(-1),add(),push_rational(-1,2),power(),multiply()},darctanh=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(1),push(cadr(p1)),push_integer(2),power(),subtract(),inverse(),multiply()},dabs=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),sgn(),multiply()},dsgn=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),dirac(),multiply(),push_integer(2),multiply()},dhermite=function(){return push(cadr(p1)),push(p2),derivative(),push_integer(2),push(caddr(p1)),multiply(),multiply(),push(cadr(p1)),push(caddr(p1)),push_integer(-1),add(),hermite(),multiply()},derf=function(){return push(cadr(p1)),push_integer(2),power(),push_integer(-1),multiply(),exponential(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(-1,2),power(),multiply(),push_integer(2),multiply(),push(cadr(p1)),push(p2),derivative(),multiply()},derfc=function(){return push(cadr(p1)),push_integer(2),power(),push_integer(-1),multiply(),exponential(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(-1,2),power(),multiply(),push_integer(-2),multiply(),push(cadr(p1)),push(p2),derivative(),multiply()},dbesselj0=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(1),besselj(),multiply(),push_integer(-1),multiply()},dbesseljn=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push(caddr(p1)),push_integer(-1),add(),besselj(),push(caddr(p1)),push_integer(-1),multiply(),push(cadr(p1)),divide(),push(cadr(p1)),push(caddr(p1)),besselj(),multiply(),add(),multiply()},dbessely0=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push_integer(1),besselj(),multiply(),push_integer(-1),multiply()},dbesselyn=function(){return push(cadr(p1)),push(p2),derivative(),push(cadr(p1)),push(caddr(p1)),push_integer(-1),add(),bessely(),push(caddr(p1)),push_integer(-1),multiply(),push(cadr(p1)),divide(),push(cadr(p1)),push(caddr(p1)),bessely(),multiply(),add(),multiply()},derivative_of_integral=function(){return push(cadr(p1))},DET_check_arg=function(){return istensor(p1)?2!==p1.tensor.ndim?0:p1.tensor.dim[0]!==p1.tensor.dim[1]?0:1:0},det=function(){var t,e,n,r,o,i,a;if(e=0,0,save(),p1=pop(),0===DET_check_arg())return push_symbol(DET),push(p1),list(2),void restore();for(r=p1.tensor.nelem,t=p1.tensor.elem,e=o=0,i=r;(0<=i?o<i:o>i)&&isNumericAtom(t[e]);e=0<=i?++o:--o);if(e===r)yydetg();else{for(e=n=0,a=p1.tensor.nelem;0<=a?n<a:n>a;e=0<=a?++n:--n)push(p1.tensor.elem[e]);determinant(p1.tensor.dim[0])}return restore()},determinant=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h;for(0,o=0,a=0,s=0,p=0,d=0,f=0,h=0,e=[],r=tos-t*t,o=u=0,c=t;0<=c?u<c:u>c;o=0<=c?++u:--u)e[o]=o,e[o+t]=0,e[o+t+t]=1;for(f=1,push(zero);;){for(push_integer(1===f?1:-1),o=i=0,l=t;0<=l?i<l:i>l;o=0<=l?++i:--i)s=t*e[o]+o,push(stack[r+s]),multiply();for(add(),a=t-1,d=0,n=!1;;)if((p=e[t+a]+e[t+t+a])<0)e[t+t+a]=-e[t+t+a],a--;else{if(p!==a+1)break;if(0===a){n=!0;break}d++,e[t+t+a]=-e[t+t+a],a--}if(n)break;h=e[a-e[t+a]+d],e[a-e[t+a]+d]=e[a-p+d],e[a-p+d]=h,e[t+a]=p,f=-f}return stack[r]=stack[tos-1],moveTos(r+1)},detg=function(){return save(),p1=pop(),0===DET_check_arg()?(push_symbol(DET),push(p1),list(2),void restore()):(yydetg(),restore())},yydetg=function(){var t,e,n,r;for(t=0,0,t=n=0,r=(e=p1.tensor.dim[0])*e;0<=r?n<r:n>r;t=0<=r?++n:--n)push(p1.tensor.elem[t]);return lu_decomp(e),moveTos(tos-e*e),push(p1)},M=function(t,e,n,r){return stack[t+e*n+r]},setM=function(t,e,n,r,o){return stack[t+e*n+r]=o},lu_decomp=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y;for(e=0,0,r=0,i=0,n=tos-t*t,p1=one,e=p=0,c=t-1;0<=c?p<c:p>c;e=0<=c?++p:--p){if(equal(M(n,t,e,e),zero)){for(r=o=l=e+1,d=t;(l<=d?o<d:o>d)&&equal(M(n,t,r,e),zero);r=l<=d?++o:--o);if(r===t){p1=zero;break}for(i=a=f=e,h=t;f<=h?a<h:a>h;i=f<=h?++a:--a)p2=M(n,t,e,i),setM(n,t,e,i,M(n,t,r,i)),setM(n,t,r,i,p2);push(p1),negate(),p1=pop()}for(push(p1),push(M(n,t,e,e)),multiply(),p1=pop(),r=s=m=e+1,g=t;m<=g?s<g:s>g;r=m<=g?++s:--s)for(push(M(n,t,r,e)),push(M(n,t,e,e)),divide(),negate(),p2=pop(),setM(n,t,r,e,zero),i=u=v=e+1,y=t;v<=y?u<y:u>y;i=v<=y?++u:--u)push(M(n,t,e,i)),push(p2),multiply(),push(M(n,t,r,i)),add(),setM(n,t,r,i,pop())}return push(p1),push(M(n,t,t-1,t-1)),multiply(),p1=pop()},Eval_dirac=function(){return push(cadr(p1)),Eval(),dirac()},dirac=function(){return save(),ydirac(),restore()},ydirac=function(){return p1=pop(),isdouble(p1)?0===p1.d?void push_integer(1):void push_integer(0):isrational(p1)?MZERO(mmul(p1.q.a,p1.q.b))?void push_integer(1):void push_integer(0):car(p1)===symbol(POWER)?(push_symbol(DIRAC),push(cadr(p1)),void list(2)):isnegativeterm(p1)?(push_symbol(DIRAC),push(p1),negate(),void list(2)):((isnegativeterm(p1)||car(p1)===symbol(ADD)&&isnegativeterm(cadr(p1)))&&(push(p1),negate(),p1=pop()),push_symbol(DIRAC),push(p1),list(2))},divisors=function(){var t,e,n,r,o,i;for(e=0,0,0,save(),t=tos-1,divisors_onstack(),n=tos-t,(i=stack.slice(t,t+n)).sort(cmp_expr),stack=stack.slice(0,t).concat(i).concat(stack.slice(t+n)),(p1=alloc_tensor(n)).tensor.ndim=1,p1.tensor.dim[0]=n,e=r=0,o=n;0<=o?r<o:r>o;e=0<=o?++r:--r)p1.tensor.elem[e]=stack[t+e];return moveTos(t),push(p1),restore()},divisors_onstack=function(){var t,e,n,r,o,i;if(0,e=0,0,0,save(),p1=pop(),t=tos,isNumericAtom(p1))push(p1),factor_small_number();else if(car(p1)===symbol(ADD))push(p1),__factor_add();else if(car(p1)===symbol(MULTIPLY))for(p1=cdr(p1),isNumericAtom(car(p1))&&(push(car(p1)),factor_small_number(),p1=cdr(p1));iscons(p1);)p2=car(p1),car(p2)===symbol(POWER)?(push(cadr(p2)),push(caddr(p2))):(push(p2),push(one)),p1=cdr(p1);else car(p1)===symbol(POWER)?(push(cadr(p1)),push(caddr(p1))):(push(p1),push(one));for(n=tos,push(one),gen(t,n),e=o=0,i=r=tos-n;0<=i?o<i:o>i;e=0<=i?++o:--o)stack[t+e]=stack[n+e];return moveTos(t+r),restore()},gen=function(t,e){var n,r,o,i;if(0,r=0,save(),p1=pop(),t===e)return push(p1),void restore();if(p2=stack[t+0],p3=stack[t+1],push(p3),n=pop_integer(),!isNaN(n))for(r=o=0,i=Math.abs(n);0<=i?o<=i:o>=i;r=0<=i?++o:--o)push(p1),push(p2),push_integer(sign(n)*r),power(),multiply(),gen(t+2,e);return restore()},__factor_add=function(){for(save(),p1=pop(),p3=cdr(p1),push(car(p3)),p3=cdr(p3);iscons(p3);)push(car(p3)),gcd(),p3=cdr(p3);if(p2=pop(),isplusone(p2))return push(p1),push(one),void restore();if(isNumericAtom(p2))push(p2),factor_small_number();else if(car(p2)===symbol(MULTIPLY))for(p3=cdr(p2),isNumericAtom(car(p3))?(push(car(p3)),factor_small_number()):(push(car(p3)),push(one)),p3=cdr(p3);iscons(p3);)push(car(p3)),push(one),p3=cdr(p3);else push(p2),push(one);for(push(p2),inverse(),p2=pop(),push(zero),p3=cdr(p1);iscons(p3);)push(p2),push(car(p3)),multiply(),add(),p3=cdr(p3);return push(one),restore()},dpow=function(){var t,e,n,r,o,i;return t=0,e=0,0,0,o=0,0,r=pop_double(),0===(n=pop_double())&&r<0&&stop("divide by zero"),n>=0||r%1==0?(o=Math.pow(n,r),void push_double(o)):(o=Math.pow(Math.abs(n),r),i=Math.PI*r,r%.5==0?(t=0,e=Math.sin(i)):(t=Math.cos(i),e=Math.sin(i)),push_double(t*o),push_double(e*o),push(imaginaryunit),multiply(),add())},EIG_N=0,EIG_yydd=[],EIG_yyqq=[],Eval_eigen=function(){return 0===EIG_check_arg()&&stop("eigen: argument is not a square matrix"),eigen(EIGEN),p1=usr_symbol("D"),set_binding(p1,p2),p1=usr_symbol("Q"),set_binding(p1,p3),push(symbol(NIL))},Eval_eigenval=function(){return 0===EIG_check_arg()?(push_symbol(EIGENVAL),push(p1),void list(2)):(eigen(EIGENVAL),push(p2))},Eval_eigenvec=function(){return 0===EIG_check_arg()?(push_symbol(EIGENVEC),push(p1),void list(2)):(eigen(EIGENVEC),push(p3))},EIG_check_arg=function(){var t,e,n,r,o,i,a,s,u,p,c;if(t=0,n=0,push(cadr(p1)),Eval(),yyfloat(),Eval(),p1=pop(),!istensor(p1))return 0;for(2===p1.tensor.ndim&&p1.tensor.dim[0]===p1.tensor.dim[1]||stop("eigen: argument is not a square matrix"),t=i=0,a=EIG_N=p1.tensor.dim[0];0<=a?i<a:i>a;t=0<=a?++i:--i)for(n=e=0,s=EIG_N;0<=s?e<s:e>s;n=0<=s?++e:--e)isdouble(p1.tensor.elem[EIG_N*t+n])||stop("eigen: matrix is not numerical");for(t=r=0,u=EIG_N-1;0<=u?r<u:r>u;t=0<=u?++r:--r)for(n=o=p=t+1,c=EIG_N;p<=c?o<c:o>c;n=p<=c?++o:--o)Math.abs(p1.tensor.elem[EIG_N*t+n].d-p1.tensor.elem[EIG_N*n+t].d)>1e-10&&stop("eigen: matrix is not symmetrical");return 1},eigen=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_,b,x,E,w,A;for(e=0,r=0,e=u=0,d=EIG_N*EIG_N;0<=d?u<d:u>d;e=0<=d?++u:--u)EIG_yydd[e]=0;for(e=n=0,f=EIG_N*EIG_N;0<=f?n<f:n>f;e=0<=f?++n:--n)EIG_yyqq[e]=0;for(e=o=0,m=EIG_N;0<=m?o<m:o>m;e=0<=m?++o:--o)for(EIG_yydd[EIG_N*e+e]=p1.tensor.elem[EIG_N*e+e].d,r=i=g=e+1,v=EIG_N;g<=v?i<v:i>v;r=g<=v?++i:--i)EIG_yydd[EIG_N*e+r]=p1.tensor.elem[EIG_N*e+r].d,EIG_yydd[EIG_N*r+e]=p1.tensor.elem[EIG_N*e+r].d;for(e=a=0,y=EIG_N;0<=y?a<y:a>y;e=0<=y?++a:--a)for(EIG_yyqq[EIG_N*e+e]=1,r=s=_=e+1,b=EIG_N;_<=b?s<b:s>b;r=_<=b?++s:--s)EIG_yyqq[EIG_N*e+r]=0,EIG_yyqq[EIG_N*r+e]=0;for(e=p=0;p<100&&0!==step();e=++p);if(100===e&&printstr("\nnote: eigen did not converge\n"),t===EIGEN||t===EIGENVAL)for(push(p1),copy_tensor(),p2=pop(),e=c=0,x=EIG_N;0<=x?c<x:c>x;e=0<=x?++c:--c)for(r=l=0,E=EIG_N;0<=E?l<E:l>E;r=0<=E?++l:--l)push_double(EIG_yydd[EIG_N*e+r]),p2.tensor.elem[EIG_N*e+r]=pop();if(t===EIGEN||t===EIGENVEC){for(push(p1),copy_tensor(),p3=pop(),w=[],e=A=0,h=EIG_N;0<=h?A<h:A>h;e=0<=h?++A:--A)w.push(function(){var t,n,o;for(n=[],r=o=0,t=EIG_N;0<=t?o<t:o>t;r=0<=t?++o:--o)push_double(EIG_yyqq[EIG_N*e+r]),n.push(p3.tensor.elem[EIG_N*e+r]=pop());return n}());return w}},step=function(){var t,e,n,r,o,i,a,s;for(e=0,r=0,t=0,e=o=0,i=EIG_N-1;0<=i?o<i:o>i;e=0<=i?++o:--o)for(r=n=a=e+1,s=EIG_N;a<=s?n<s:n>s;r=a<=s?++n:--n)0!==EIG_yydd[EIG_N*e+r]&&(step2(e,r),t++);return t},step2=function(t,e){var n,r,o,i,a,s,u,p,c,l,d,f,h;for(a=0,f=0,0,0,r=0,0,d=0,h=.5*(EIG_yydd[EIG_N*t+t]-EIG_yydd[EIG_N*e+e])/EIG_yydd[EIG_N*t+e],f=1/(Math.abs(h)+Math.sqrt(h*h+1)),h<0&&(f=-f),l=f*(n=1/Math.sqrt(f*f+1)),a=s=0,u=EIG_N;0<=u?s<u:s>u;a=0<=u?++s:--s)r=EIG_yydd[EIG_N*t+a],d=EIG_yydd[EIG_N*e+a],EIG_yydd[EIG_N*t+a]=n*r+l*d,EIG_yydd[EIG_N*e+a]=n*d-l*r;for(a=o=0,p=EIG_N;0<=p?o<p:o>p;a=0<=p?++o:--o)r=EIG_yydd[EIG_N*a+t],d=EIG_yydd[EIG_N*a+e],EIG_yydd[EIG_N*a+t]=n*r+l*d,EIG_yydd[EIG_N*a+e]=n*d-l*r;for(a=i=0,c=EIG_N;0<=c?i<c:i>c;a=0<=c?++i:--i)r=EIG_yyqq[EIG_N*t+a],d=EIG_yyqq[EIG_N*e+a],EIG_yyqq[EIG_N*t+a]=n*r+l*d,EIG_yyqq[EIG_N*e+a]=n*d-l*r;return EIG_yydd[EIG_N*t+e]=0,EIG_yydd[EIG_N*e+t]=0},Eval_erf=function(){return push(cadr(p1)),Eval(),yerf()},yerf=function(){return save(),yyerf(),restore()},yyerf=function(){var t;if(t=0,p1=pop(),isdouble(p1))return t=1-erfc(p1.d),void push_double(t);if(isZeroAtomOrTensor(p1))push(zero);else{if(isnegativeterm(p1))return push_symbol(ERF),push(p1),negate(),list(2),void negate();push_symbol(ERF),push(p1),list(2)}},Eval_erfc=function(){return push(cadr(p1)),Eval(),yerfc()},yerfc=function(){return save(),yyerfc(),restore()},yyerfc=function(){var t;if(t=0,p1=pop(),isdouble(p1))return t=erfc(p1.d),void push_double(t);isZeroAtomOrTensor(p1)?push(one):(push_symbol(ERFC),push(p1),list(2))},erfc=function(t){var e,n,r;return 0===t?1:(0,0,0,e=(n=1/(1+.5*(r=Math.abs(t))))*Math.exp(-r*r-1.26551223+n*(1.00002368+n*(.37409196+n*(.09678418+n*(n*(.27886807+n*(n*(1.48851587+n*(.17087277*n-.82215223))-1.13520398))-.18628806))))),t>=0?e:2-e)},Eval=function(){var t;switch(check_esc_flag(),save(),p1=pop(),!evaluatingAsFloats&&isfloating(p1)&&(t=!0,evaluatingAsFloats++),p1.k){case CONS:Eval_cons();break;case NUM:evaluatingAsFloats?push_double(convert_rational_to_double(p1)):push(p1);break;case DOUBLE:case STR:push(p1);break;case TENSOR:Eval_tensor();break;case SYM:Eval_sym();break;default:stop("atom?")}return t&&evaluatingAsFloats--,restore()},Eval_sym=function(){var t,e,n,r,o,i;if(iskeyword(p1))return push(p1),push(symbol(LAST)),list(2),void Eval();if(p1===symbol(PI)&&evaluatingAsFloats)push_double(Math.PI);else if(p2=get_binding(p1),DEBUG&&console.log("looked up: "+p1+" which contains: "+p2),push(p2),p1!==p2){if(-1!==(r=chainOfUserSymbolsNotFunctionsBeingEvaluated.indexOf(p1))){for(t="",e=n=o=r,i=chainOfUserSymbolsNotFunctionsBeingEvaluated.length;o<=i?n<i:n>i;e=o<=i?++n:--n)t+=chainOfUserSymbolsNotFunctionsBeingEvaluated[e].printname+" -> ";return t+=p1.printname,void stop("recursive evaluation of symbols: "+t)}return chainOfUserSymbolsNotFunctionsBeingEvaluated.push(p1),Eval(),chainOfUserSymbolsNotFunctionsBeingEvaluated.pop()}},Eval_cons=function(){var t;if(t=car(p1),car(t)!==symbol(EVAL))switch(issymbol(t)||stop("cons?"),symnum(t)){case ABS:return Eval_abs();case ADD:return Eval_add();case ADJ:return Eval_adj();case AND:return Eval_and();case ARCCOS:return Eval_arccos();case ARCCOSH:return Eval_arccosh();case ARCSIN:return Eval_arcsin();case ARCSINH:return Eval_arcsinh();case ARCTAN:return Eval_arctan();case ARCTANH:return Eval_arctanh();case ARG:return Eval_arg();case ATOMIZE:return Eval_atomize();case BESSELJ:return Eval_besselj();case BESSELY:return Eval_bessely();case BINDING:return Eval_binding();case BINOMIAL:return Eval_binomial();case CEILING:return Eval_ceiling();case CHECK:return Eval_check();case CHOOSE:return Eval_choose();case CIRCEXP:return Eval_circexp();case CLEAR:return Eval_clear();case CLEARALL:return Eval_clearall();case CLEARPATTERNS:return Eval_clearpatterns();case CLOCK:return Eval_clock();case COEFF:return Eval_coeff();case COFACTOR:return Eval_cofactor();case CONDENSE:return Eval_condense();case CONJ:return Eval_conj();case CONTRACT:return Eval_contract();case COS:return Eval_cos();case COSH:return Eval_cosh();case DECOMP:return Eval_decomp();case DEGREE:return Eval_degree();case DEFINT:return Eval_defint();case DENOMINATOR:return Eval_denominator();case DERIVATIVE:return Eval_derivative();case DET:return Eval_det();case DIM:return Eval_dim();case DIRAC:return Eval_dirac();case DIVISORS:return Eval_divisors();case DO:return Eval_do();case DOT:return Eval_inner();case DRAW:return Eval_draw();case DSOLVE:return Eval_dsolve();case EIGEN:return Eval_eigen();case EIGENVAL:return Eval_eigenval();case EIGENVEC:return Eval_eigenvec();case ERF:return Eval_erf();case ERFC:return Eval_erfc();case EVAL:return Eval_Eval();case EXP:return Eval_exp();case EXPAND:return Eval_expand();case EXPCOS:return Eval_expcos();case EXPSIN:return Eval_expsin();case FACTOR:return Eval_factor();case FACTORIAL:return Eval_factorial();case FACTORPOLY:return Eval_factorpoly();case FILTER:return Eval_filter();case FLOATF:return Eval_float();case APPROXRATIO:return Eval_approxratio();case FLOOR:return Eval_floor();case FOR:return Eval_for();case FUNCTION:return Eval_function_reference();case GAMMA:return Eval_gamma();case GCD:return Eval_gcd();case HERMITE:return Eval_hermite();case HILBERT:return Eval_hilbert();case IMAG:return Eval_imag();case INDEX:return Eval_index();case INNER:return Eval_inner();case INTEGRAL:return Eval_integral();case INV:return Eval_inv();case INVG:return Eval_invg();case ISINTEGER:return Eval_isinteger();case ISPRIME:return Eval_isprime();case LAGUERRE:return Eval_laguerre();case LCM:return Eval_lcm();case LEADING:return Eval_leading();case LEGENDRE:return Eval_legendre();case LOG:return Eval_log();case LOOKUP:return Eval_lookup();case MOD:return Eval_mod();case MULTIPLY:return Eval_multiply();case NOT:return Eval_not();case NROOTS:return Eval_nroots();case NUMBER:return Eval_number();case NUMERATOR:return Eval_numerator();case OPERATOR:return Eval_operator();case OR:return Eval_or();case OUTER:return Eval_outer();case PATTERN:return Eval_pattern();case PATTERNSINFO:return Eval_patternsinfo();case POLAR:return Eval_polar();case POWER:return Eval_power();case PRIME:return Eval_prime();case PRINT:return Eval_print();case PRINT2DASCII:return Eval_print2dascii();case PRINTFULL:return Eval_printcomputer();case PRINTLATEX:return Eval_printlatex();case PRINTLIST:return Eval_printlist();case PRINTPLAIN:return Eval_printhuman();case PRODUCT:return Eval_product();case QUOTE:return Eval_quote();case QUOTIENT:return Eval_quotient();case RANK:return Eval_rank();case RATIONALIZE:return Eval_rationalize();case REAL:return Eval_real();case ROUND:return Eval_round();case YYRECT:return Eval_rect();case ROOTS:return Eval_roots();case SETQ:return Eval_setq();case SGN:return Eval_sgn();case SILENTPATTERN:return Eval_silentpattern();case SIMPLIFY:return Eval_simplify();case SIN:return Eval_sin();case SINH:return Eval_sinh();case SHAPE:return Eval_shape();case SQRT:return Eval_sqrt();case STOP:return Eval_stop();case SUBST:return Eval_subst();case SUM:return Eval_sum();case SYMBOLSINFO:return Eval_symbolsinfo();case TAN:return Eval_tan();case TANH:return Eval_tanh();case TAYLOR:return Eval_taylor();case TEST:return Eval_test();case TESTEQ:return Eval_testeq();case TESTGE:return Eval_testge();case TESTGT:return Eval_testgt();case TESTLE:return Eval_testle();case TESTLT:return Eval_testlt();case TRANSPOSE:return Eval_transpose();case UNIT:return Eval_unit();case ZERO:return Eval_zero();default:return Eval_user_function()}else Eval_user_function()},Eval_binding=function(){return push(get_binding(cadr(p1)))},Eval_check=function(){var t;return null==(t=isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1)))?push(p1):push_integer(t)},Eval_det=function(){return push(cadr(p1)),Eval(),det()},Eval_dim=function(){var t;return push(cadr(p1)),Eval(),p2=pop(),iscons(cddr(p1))?(push(caddr(p1)),Eval(),t=pop_integer()):t=1,istensor(p2)?t<1||t>p2.tensor.ndim?push(p1):push_integer(p2.tensor.dim[t-1]):push_integer(1)},Eval_divisors=function(){return push(cadr(p1)),Eval(),divisors()},Eval_do=function(){var t;for(push(car(p1)),p1=cdr(p1),t=[];iscons(p1);)pop(),push(car(p1)),Eval(),t.push(p1=cdr(p1));return t},Eval_dsolve=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),dsolve()},Eval_Eval=function(){for(push(cadr(p1)),Eval(),p1=cddr(p1);iscons(p1);)push(car(p1)),Eval(),push(cadr(p1)),Eval(),subst(),p1=cddr(p1);return Eval()},Eval_exp=function(){return push(cadr(p1)),Eval(),exponential()},Eval_factorial=function(){return push(cadr(p1)),Eval(),factorial()},Eval_factorpoly=function(){var t;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),factorpoly(),p1=cdr(p1),t=[];iscons(p1);)push(car(p1)),Eval(),factorpoly(),t.push(p1=cdr(p1));return t},Eval_hermite=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),hermite()},Eval_hilbert=function(){return push(cadr(p1)),Eval(),hilbert()},Eval_index=function(){var t,e,n;if(t=tos,e=p1,p1=cdr(p1),push(car(p1)),Eval(),n=stack[tos-1],isNumericAtom(n)&&stop("trying to access a scalar as a tensor"),!istensor(n))return moveTos(t),void push(e);for(p1=cdr(p1);iscons(p1);){if(push(car(p1)),Eval(),!isintegerorintegerfloat(stack[tos-1]))return moveTos(t),void push(e);p1=cdr(p1)}return index_function(tos-t)},Eval_inv=function(){return push(cadr(p1)),Eval(),inv()},Eval_invg=function(){return push(cadr(p1)),Eval(),invg()},Eval_isinteger=function(){if(push(cadr(p1)),Eval(),p1=pop(),isrational(p1))isinteger(p1)?push(one):push(zero);else{if(!isdouble(p1))return push_symbol(ISINTEGER),push(p1),list(2);Math.floor(p1.d)===p1.d?push(one):push(zero)}},Eval_number=function(){return push(cadr(p1)),Eval(),(p1=pop()).k===NUM||p1.k===DOUBLE?push_integer(1):push_integer(0)},Eval_operator=function(){var t;for(t=tos,push_symbol(OPERATOR),p1=cdr(p1);iscons(p1);)push(car(p1)),Eval(),p1=cdr(p1);return list(tos-t)},Eval_quote=function(){return push(cadr(p1))},Eval_rank=function(){return push(cadr(p1)),Eval(),p1=pop(),istensor(p1)?push_integer(p1.tensor.ndim):push(zero)},Eval_setq=function(){if(caadr(p1)!==symbol(INDEX)){if(!iscons(cadr(p1)))return issymbol(cadr(p1))||stop("symbol assignment: error in symbol"),push(caddr(p1)),Eval(),p2=pop(),set_binding(cadr(p1),p2),push(symbol(NIL));define_user_function()}else setq_indexed()},setq_indexed=function(){var t;for(p4=cadadr(p1),console.log("p4: "+p4),issymbol(p4)||stop("indexed assignment: expected a symbol name"),t=tos,push(caddr(p1)),Eval(),p2=cdadr(p1);iscons(p2);)push(car(p2)),Eval(),p2=cdr(p2);return set_component(tos-t),p3=pop(),set_binding(p4,p3),push(symbol(NIL))},Eval_sqrt=function(){return push(cadr(p1)),Eval(),push_rational(1,2),power()},Eval_stop=function(){return stop("user stop")},Eval_subst=function(){return push(cadddr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadr(p1)),Eval(),subst(),Eval()},Eval_unit=function(){var t,e,n,r;if(t=0,0,push(cadr(p1)),Eval(),e=pop_integer(),isNaN(e))push(p1);else{if(!(e<1)){for((p1=alloc_tensor(e*e)).tensor.ndim=2,p1.tensor.dim[0]=e,p1.tensor.dim[1]=e,t=n=0,r=e;0<=r?n<r:n>r;t=0<=r?++n:--n)p1.tensor.elem[e*t+t]=one;return check_tensor_dimensions(p1),push(p1)}push(p1)}},Eval_noexpand=function(){var t;return t=expanding,expanding=0,Eval(),expanding=t},Eval_predicate=function(){return save(),p1=top(),car(p1)===symbol(SETQ)&&(pop(),push_symbol(TESTEQ),push(cadr(p1)),push(caddr(p1)),list(3)),Eval(),restore()},Eval_expand=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),expand()},expand=function(){var t;if(save(),p9=pop(),p5=pop(),istensor(p5))return expand_tensor(),void restore();if(car(p5)!==symbol(ADD))return push(p5),numerator(),p3=pop(),push(p5),denominator(),p2=pop(),remove_negative_exponents(),push(p3),push(p2),push(p9),!isone(p3)&&!isone(p2)||ispolyexpandedform(p2,p9)&&!isone(p2)?(divpoly(),p7=pop(),push(p3),push(p2),push(p7),multiply(),subtract(),p3=pop(),isZeroAtomOrTensor(p3)?(push(p7),void restore()):(push(p2),push(p9),factorpoly(),p2=pop(),expand_get_C(),expand_get_B(),expand_get_A(),istensor(p4)?(push(p4),t=expanding,expanding=1,inv(),expanding=t,push(p3),inner(),push(p2),inner()):(push(p3),push(p4),t=expanding,expanding=1,divide(),expanding=t,push(p2),multiply()),push(p7),add(),restore())):(pop(),pop(),pop(),push(p5),void restore());for(push_integer(0),p1=cdr(p5);iscons(p1);)push(car(p1)),push(p9),expand(),add(),p1=cdr(p1);restore()},expand_tensor=function(){var t,e,n;for(t=0,push(p5),copy_tensor(),t=e=0,n=(p5=pop()).tensor.nelem;0<=n?e<n:e>n;t=0<=n?++e:--e)push(p5.tensor.elem[t]),push(p9),expand(),p5.tensor.elem[t]=pop();return push(p5)},remove_negative_exponents=function(){var t,e,n,r,o,i;for(0,e=0,n=0,r=0,0,t=tos,factors(p2),factors(p3),n=0,e=o=0,i=tos-t;0<=i?o<i:o>i;e=0<=i?++o:--o)p1=stack[t+e],car(p1)===symbol(POWER)&&cadr(p1)===p9&&(push(caddr(p1)),r=pop_integer(),isNaN(r)||r<n&&(n=r));if(moveTos(t),0!==n)return push(p2),push(p9),push_integer(-n),power(),multiply(),p2=pop(),push(p3),push(p9),push_integer(-n),power(),multiply(),p3=pop()},expand_get_C=function(){var t,e,n,r,o,i,a,s,u,p;if(0,n=0,o=0,0,e=tos,car(p2)===symbol(MULTIPLY))for(p1=cdr(p2);iscons(p1);)p5=car(p1),expand_get_CF(),p1=cdr(p1);else p5=p2,expand_get_CF();if(1!==(i=tos-e)){for((p4=alloc_tensor(i*i)).tensor.ndim=2,p4.tensor.dim[0]=i,p4.tensor.dim[1]=i,t=e,n=a=0,u=i;0<=u?a<u:a>u;n=0<=u?++a:--a)for(o=r=0,p=i;0<=p?r<p:r>p;o=0<=p?++r:--r)push(stack[t+o]),push(p9),push_integer(n),power(),s=expanding,expanding=1,divide(),expanding=s,push(p9),filter(),p4.tensor.elem[i*n+o]=pop();return moveTos(tos-i)}p4=pop()},expand_get_CF=function(){var t,e,n,r,o,i,a,s;if(0,e=0,n=0,r=0,Find(p5,p9)){for(i=expanding,expanding=1,trivial_divide(),expanding=i,car(p5)===symbol(POWER)?(push(caddr(p5)),r=pop_integer(),p6=cadr(p5)):(r=1,p6=p5),push(p6),push(p9),degree(),t=pop_integer(),s=[],e=o=0,a=r;0<=a?o<a:o>a;e=0<=a?++o:--o)s.push(function(){var r,o,a;for(a=[],n=r=0,o=t;0<=o?r<o:r>o;n=0<=o?++r:--r)push(p8),push(p6),push_integer(e),power(),i=expanding,expanding=1,multiply(),expanding=i,push(p9),push_integer(n),power(),i=expanding,expanding=1,multiply(),a.push(expanding=i);return a}());return s}},trivial_divide=function(){var t;if(t=0,car(p2)===symbol(MULTIPLY)){for(t=tos,p0=cdr(p2);iscons(p0);)equal(car(p0),p5)||(push(car(p0)),Eval()),p0=cdr(p0);multiply_all(tos-t)}else push_integer(1);return p8=pop()},expand_get_B=function(){var t,e,n,r,o;if(t=0,0,istensor(p4)){for(e=p4.tensor.dim[0],(p8=alloc_tensor(e)).tensor.ndim=1,p8.tensor.dim[0]=e,t=n=0,o=e;0<=o?n<o:n>o;t=0<=o?++n:--n)push(p3),push(p9),push_integer(t),power(),r=expanding,expanding=1,divide(),expanding=r,push(p9),filter(),p8.tensor.elem[t]=pop();return p3=p8}},expand_get_A=function(){var t,e,n,r,o;if(0,e=0,0,!istensor(p4))return push(p2),reciprocate(),void(p2=pop());if(t=tos,car(p2)===symbol(MULTIPLY))for(p8=cdr(p2);iscons(p8);)p5=car(p8),expand_get_AF(),p8=cdr(p8);else p5=p2,expand_get_AF();for((p8=alloc_tensor(n=tos-t)).tensor.ndim=1,p8.tensor.dim[0]=n,e=r=0,o=n;0<=o?r<o:r>o;e=0<=o?++r:--r)p8.tensor.elem[e]=stack[t+e];return moveTos(t),p2=p8},expand_get_AF=function(){var t,e,n,r,o,i,a;if(0,e=0,n=0,r=1,Find(p5,p9)){for(car(p5)===symbol(POWER)&&(push(caddr(p5)),r=pop_integer(),p5=cadr(p5)),push(p5),push(p9),degree(),t=pop_integer(),a=[],e=o=i=r;i<=0?o<0:o>0;e=i<=0?++o:--o)a.push(function(){var r,o,i;for(i=[],n=r=0,o=t;0<=o?r<o:r>o;n=0<=o?++r:--r)push(p5),push_integer(e),power(),reciprocate(),push(p9),push_integer(n),power(),i.push(multiply());return i}());return a}},Eval_expcos=function(){return push(cadr(p1)),Eval(),expcos()},expcos=function(){return save(),p1=pop(),push(imaginaryunit),push(p1),multiply(),exponential(),push_rational(1,2),multiply(),push(imaginaryunit),negate(),push(p1),multiply(),exponential(),push_rational(1,2),multiply(),add(),restore()},Eval_expsin=function(){return push(cadr(p1)),Eval(),expsin()},expsin=function(){return save(),p1=pop(),push(imaginaryunit),push(p1),multiply(),exponential(),push(imaginaryunit),divide(),push_rational(1,2),multiply(),push(imaginaryunit),negate(),push(p1),multiply(),exponential(),push(imaginaryunit),divide(),push_rational(1,2),multiply(),subtract(),restore()},Eval_factor=function(){var t;for(push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),factor(),p1=cdddr(p1),t=[];iscons(p1);)push(car(p1)),Eval(),factor_again(),t.push(p1=cdr(p1));return t},factor_again=function(){var t,e;if(save(),p2=pop(),p1=pop(),t=tos,car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),factor_term(),p1=cdr(p1);else push(p1),push(p2),factor_term();return(e=tos-t)>1&&multiply_all_noexpand(e),restore()},factor_term=function(){if(save(),factorpoly(),p1=pop(),car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),p1=cdr(p1);else push(p1);return restore()},factor=function(){return save(),p2=pop(),p1=pop(),isinteger(p1)?(push(p1),factor_number()):(push(p1),push(p2),factorpoly()),restore()},factor_small_number=function(){var t,e,n,r,o,i;for(n=0,save(),r=pop_integer(),isNaN(r)&&stop("number too big to factor"),r<0&&(r=-r),n=o=0,i=MAXPRIMETAB;(0<=i?o<i:o>i)&&!((t=primetab[n])>r/t);n=0<=i?++o:--o){for(e=0;r%t==0;)r/=t,e++;e&&(push_integer(t),push_integer(e))}return r>1&&(push_integer(r),push_integer(1)),restore()},factorial=function(){var t;return 0,save(),p1=pop(),push(p1),(t=pop_integer())<0||isNaN(t)?(push_symbol(FACTORIAL),push(p1),list(2),void restore()):(bignum_factorial(t),restore())},simplifyfactorials=function(){var t;if(0,save(),t=expanding,expanding=0,p1=pop(),car(p1)===symbol(ADD)){for(push(zero),p1=cdr(p1);iscons(p1);)push(car(p1)),simplifyfactorials(),add(),p1=cdr(p1);return expanding=t,void restore()}return car(p1)===symbol(MULTIPLY)?(sfac_product(),expanding=t,void restore()):(push(p1),expanding=t,restore())},sfac_product=function(){var t,e,n,r,o,i,a,s,u,p,c;for(t=0,n=0,o=0,c=tos,p1=cdr(p1),o=0;iscons(p1);)push(car(p1)),p1=cdr(p1),o++;for(t=i=0,a=o-1;0<=a?i<a:i>a;t=0<=a?++i:--i)if(stack[c+t]!==symbol(NIL))for(n=e=s=t+1,u=o;s<=u?e<u:e>u;n=s<=u?++e:--e)stack[c+n]!==symbol(NIL)&&sfac_product_f(c,t,n);for(push(one),t=r=0,p=o;0<=p?r<p:r>p;t=0<=p?++r:--r)stack[c+t]!==symbol(NIL)&&(push(stack[c+t]),multiply());return p1=pop(),moveTos(tos-o),push(p1)},sfac_product_f=function(t,e,n){var r,o,i,a;if(r=0,o=0,p1=stack[t+e],p2=stack[t+n],ispower(p1)?(p3=caddr(p1),p1=cadr(p1)):p3=one,ispower(p2)?(p4=caddr(p2),p2=cadr(p2)):p4=one,isfactorial(p1)&&isfactorial(p2)){if(push(p3),push(p4),add(),yyexpand(),0!==(o=pop_integer()))return;if(push(cadr(p1)),push(cadr(p2)),subtract(),yyexpand(),0===(o=pop_integer())||isNaN(o))return;for(o<0&&(o=-o,p5=p1,p1=p2,p2=p5,p5=p3,p3=p4,p4=p5),push(one),r=i=1,a=o;1<=a?i<=a:i>=a;r=1<=a?++i:--i)push(cadr(p2)),push_integer(r),add(),push(p3),power(),multiply();return stack[t+e]=pop(),stack[t+n]=symbol(NIL)}},polycoeff=0,factpoly_expo=0,factorpoly=function(){return save(),p2=pop(),p1=pop(),Find(p1,p2)&&ispolyexpandedform(p1,p2)&&issymbol(p2)?(push(p1),push(p2),yyfactorpoly(),restore()):(push(p1),void restore())},yyfactorpoly=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v;for(0,i=0,save(),p2=pop(),p1=pop(),o=tos,isfloating(p1)&&stop("floating point numbers in polynomial"),polycoeff=tos,push(p1),push(p2),factpoly_expo=coeff()-1,rationalize_coefficients(o),v="real",g=null;factpoly_expo>0;)if(isZeroAtomOrTensor(stack[polycoeff+0])?(push_integer(1),p4=pop(),push_integer(0),p5=pop()):"real"===v?r=get_factor_from_real_root():"complex"===v&&(n=get_factor_from_complex_root(g)),"real"===v){if(0===r){v="complex";continue}for(push(p4),push(p2),multiply(),push(p5),add(),p8=pop(),DEBUG&&console.log("success\nFACTOR="+p8),push(p7),push(p8),multiply_noexpand(),p7=pop(),yydivpoly();factpoly_expo&&isZeroAtomOrTensor(stack[polycoeff+factpoly_expo]);)factpoly_expo--;for(push(zero),i=p=0,d=factpoly_expo;0<=d?p<=d:p>=d;i=0<=d?++p:--p)push(stack[polycoeff+i]),push(p2),push_integer(i),power(),multiply(),add();g=pop()}else if("complex"===v){if(0===n)break;if(push(p4),push(p2),subtract(),push(p4),conjugate(),push(p2),subtract(),multiply(),p8=pop(),DEBUG&&console.log("success\nFACTOR="+p8),push(p7),l=pop(),push(p7),push(p8),multiply_noexpand(),p7=pop(),null==g){for(push(zero),i=a=0,f=factpoly_expo;0<=f?a<=f:a>=f;i=0<=f?++a:--a)push(stack[polycoeff+i]),push(p2),push_integer(i),power(),multiply(),add();g=pop()}if(push(e=g),push(p8),push(p2),divpoly(),g=pop(),push(g),push(p8),multiply(),t=pop(),!equal(t,e))return DEBUG&&console.log("we found a polynomial based on complex root and its conj but it doesn't divide the poly, quitting"),DEBUG&&console.log("so just returning previousFactorisation times dividend: "+l+" * "+e),push(l),push(e),c=expanding,expanding=0,yycondense(),expanding=c,multiply_noexpand(),p7=pop(),stack[o]=p7,moveTos(o+1),void restore();for(i=s=0,h=factpoly_expo;0<=h?s<=h:s>=h;i=0<=h?++s:--s)pop();push(g),push(p2),coeff(),factpoly_expo-=2}for(push(zero),i=u=0,m=factpoly_expo;0<=m?u<=m:u>=m;i=0<=m?++u:--u)push(stack[polycoeff+i]),push(p2),push_integer(i),power(),multiply(),add();return p1=pop(),DEBUG&&console.log("POLY="+p1),push(p1),c=expanding,expanding=0,yycondense(),expanding=c,p1=pop(),factpoly_expo>0&&isnegativeterm(stack[polycoeff+factpoly_expo])&&(push(p1),negate(),p1=pop(),push(p7),negate_noexpand(),p7=pop()),push(p7),push(p1),multiply_noexpand(),p7=pop(),DEBUG&&console.log("RESULT="+p7),stack[o]=p7,moveTos(o+1),restore()},rationalize_coefficients=function(t){var e,n,r,o,i,a,s;for(e=0,p7=one,e=r=o=t,i=tos;o<=i?r<i:r>i;e=o<=i?++r:--r)push(stack[e]),denominator(),push(p7),lcm(),p7=pop();for(e=n=a=t,s=tos;a<=s?n<s:n>s;e=a<=s?++n:--n)push(p7),push(stack[e]),multiply(),stack[e]=pop();if(push(p7),reciprocate(),p7=pop(),DEBUG)return console.log("rationalize_coefficients result")},get_factor_from_real_root=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v;if(r=0,0,0,0,0,0,0,DEBUG){for(push(zero),r=c=0,l=factpoly_expo;0<=l?c<=l:c>=l;r=0<=l?++c:--c)push(stack[polycoeff+r]),push(p2),push_integer(r),power(),multiply(),add();p1=pop(),console.log("POLY="+p1)}if(n=tos,e=tos,push(stack[polycoeff+factpoly_expo]),divisors_onstack(),p=tos-e,t=tos,push(stack[polycoeff+0]),divisors_onstack(),u=tos-t,DEBUG){for(console.log("divisors of base term"),r=o=0,d=u;0<=d?o<d:o>d;r=0<=d?++o:--o)console.log(", "+stack[t+r]);for(console.log("divisors of leading term"),r=i=0,f=p;0<=f?i<f:i>f;r=0<=f?++i:--i)console.log(", "+stack[e+r])}for(g=a=0,h=p;0<=h?a<h:a>h;g=0<=h?++a:--a)for(v=s=0,m=u;0<=m?s<m:s>m;v=0<=m?++s:--s){if(p4=stack[e+g],p5=stack[t+v],push(p5),push(p4),divide(),negate(),p3=pop(),Evalpoly(),DEBUG&&(console.log("try A="+p4),console.log(", B="+p5),console.log(", root "+p2),console.log("=-B/A="+p3),console.log(", POLY("+p3),console.log(")="+p6)),isZeroAtomOrTensor(p6))return moveTos(n),DEBUG&&console.log("get_factor_from_real_root returning 1"),1;if(push(p5),negate(),p5=pop(),push(p3),negate(),p3=pop(),Evalpoly(),DEBUG&&(console.log("try A="+p4),console.log(", B="+p5),console.log(", root "+p2),console.log("=-B/A="+p3),console.log(", POLY("+p3),console.log(")="+p6)),isZeroAtomOrTensor(p6))return moveTos(n),DEBUG&&console.log("get_factor_from_real_root returning 1"),1}return moveTos(n),DEBUG&&console.log("get_factor_from_real_root returning 0"),0},get_factor_from_complex_root=function(t){var e,n,r,o,i;if(0,0,0,0,0,0,0,factpoly_expo<=2)return DEBUG&&console.log("no more factoring via complex roots to be found in polynomial of degree <= 2"),0;if(p1=t,DEBUG&&console.log("complex root finding for POLY="+p1),e=tos,tos,push_integer(-1),push_rational(2,3),power(),rect(),p4=pop(),DEBUG&&console.log("complex root finding: trying with "+p4),push(p4),p3=pop(),push(p3),Evalpoly(),DEBUG&&console.log("complex root finding result: "+p6),isZeroAtomOrTensor(p6))return moveTos(e),DEBUG&&console.log("get_factor_from_complex_root returning 1"),1;if(push_integer(1),push_rational(2,3),power(),rect(),p4=pop(),DEBUG&&console.log("complex root finding: trying with "+p4),push(p4),p3=pop(),push(p3),Evalpoly(),DEBUG&&console.log("complex root finding result: "+p6),isZeroAtomOrTensor(p6))return moveTos(e),DEBUG&&console.log("get_factor_from_complex_root returning 1"),1;for(o=r=-10;r<=10;o=++r)for(i=n=1;n<=5;i=++n)if(push_integer(o),push_integer(i),push(imaginaryunit),multiply(),add(),rect(),p4=pop(),push(p4),p3=pop(),push(p3),Evalpoly(),isZeroAtomOrTensor(p6))return moveTos(e),DEBUG&&console.log("found complex root: "+p6),1;return moveTos(e),DEBUG&&console.log("get_factor_from_complex_root returning 0"),0},yydivpoly=function(){var t,e,n;for(t=0,p6=zero,t=e=n=factpoly_expo;n<=0?e<0:e>0;t=n<=0?++e:--e)push(stack[polycoeff+t]),stack[polycoeff+t]=p6,push(p4),divide(),p6=pop(),push(stack[polycoeff+t-1]),push(p6),push(p5),multiply(),subtract(),stack[polycoeff+t-1]=pop();if(stack[polycoeff+0]=p6,DEBUG)return console.log("yydivpoly Q:")},Evalpoly=function(){var t,e,n;for(t=0,push(zero),t=e=n=factpoly_expo;n<=0?e<=0:e>=0;t=n<=0?++e:--e)push(p3),multiply(),push(stack[polycoeff+t]),DEBUG&&(console.log("Evalpoly top of stack:"),console.log(print_list(stack[tos-t]))),add();return p6=pop()},factors=function(t){var e;if(e=tos,car(t)===symbol(ADD))for(t=cdr(t);iscons(t);)push_term_factors(car(t)),t=cdr(t);else push_term_factors(t);return tos-e},push_term_factors=function(t){var e;if(car(t)===symbol(MULTIPLY)){for(t=cdr(t),e=[];iscons(t);)push(car(t)),e.push(t=cdr(t));return e}return push(t)},Eval_filter=function(){var t;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),t=[];iscons(p1);)push(car(p1)),Eval(),filter(),t.push(p1=cdr(p1));return t},filter=function(){return save(),p2=pop(),p1=pop(),filter_main(),restore()},filter_main=function(){return car(p1)===symbol(ADD)?filter_sum():istensor(p1)?filter_tensor():Find(p1,p2)?push_integer(0):push(p1)},filter_sum=function(){var t;for(push_integer(0),p1=cdr(p1),t=[];iscons(p1);)push(car(p1)),push(p2),filter(),add(),t.push(p1=cdr(p1));return t},filter_tensor=function(){var t,e,n,r,o,i;for(t=0,0,n=p1.tensor.nelem,(p3=alloc_tensor(n)).tensor.ndim=p1.tensor.ndim,t=r=0,o=p1.tensor.ndim;0<=o?r<o:r>o;t=0<=o?++r:--r)p3.tensor.dim[t]=p1.tensor.dim[t];for(t=e=0,i=n;0<=i?e<i:e>i;t=0<=i?++e:--e)push(p1.tensor.elem[t]),push(p2),filter(),p3.tensor.elem[t]=pop();return push(p3)},Eval_float=function(){return evaluatingAsFloats++,push(cadr(p1)),Eval(),yyfloat(),Eval(),evaluatingAsFloats--},checkFloatHasWorkedOutCompletely=function(t){var e,n,r,o,i;if(o=countOccurrencesOfSymbol(symbol(POWER),t),r=countOccurrencesOfSymbol(symbol(PI),t),e=countOccurrencesOfSymbol(symbol(E),t),n=countOccurrencesOfSymbol(symbol(MULTIPLY),t),i=countOccurrencesOfSymbol(symbol(ADD),t),DEBUG&&(console.log("     ... numberOfPowers: "+o),console.log("     ... numberOfPIs: "+r),console.log("     ... numberOfEs: "+e),console.log("     ... numberOfMults: "+n),console.log("     ... numberOfSums: "+i)),o>1||r>0||e>0||n>1||i>1)return stop("float: some unevalued parts in "+t)},zzfloat=function(){return save(),evaluatingAsFloats++,Eval(),yyfloat(),Eval(),evaluatingAsFloats--,restore()},yyfloat=function(){var t,e,n,r;if(e=0,t=0,evaluatingAsFloats++,save(),p1=pop(),iscons(p1)){for(t=tos;iscons(p1);)push(car(p1)),yyfloat(),p1=cdr(p1);list(tos-t)}else if(p1.k===TENSOR){for(push(p1),copy_tensor(),e=n=0,r=(p1=pop()).tensor.nelem;0<=r?n<r:n>r;e=0<=r?++n:--n)push(p1.tensor.elem[e]),yyfloat(),p1.tensor.elem[e]=pop();push(p1)}else p1.k===NUM?(push(p1),bignum_float()):p1===symbol(PI)?push_double(Math.PI):p1===symbol(E)?push_double(Math.E):push(p1);return restore(),evaluatingAsFloats--},Eval_floor=function(){return push(cadr(p1)),Eval(),yfloor()},yfloor=function(){return save(),yyfloor(),restore()},yyfloor=function(){var t;return t=0,p1=pop(),isNumericAtom(p1)?isdouble(p1)?(t=Math.floor(p1.d),void push_double(t)):isinteger(p1)?void push(p1):((p3=new U).k=NUM,p3.q.a=mdiv(p1.q.a,p1.q.b),p3.q.b=mint(1),push(p3),isnegativenumber(p1)?(push_integer(-1),add()):void 0):(push_symbol(FLOOR),push(p1),void list(2))},Eval_for=function(){var t,e,n,r,o,i,a;if(t=0,0,0,r=caddr(p1),issymbol(r)||stop("for: 2nd arg should be the variable to loop over"),push(cadddr(p1)),Eval(),e=pop_integer(),isNaN(e))push(p1);else{if(push(caddddr(p1)),Eval(),n=pop_integer(),!isNaN(n)){for(p4=get_binding(r),t=o=i=e,a=n;i<=a?o<=a:o>=a;t=i<=a?++o:--o)push_integer(t),p5=pop(),set_binding(r,p5),push(cadr(p1)),Eval(),pop();return set_binding(r,p4),push_symbol(NIL)}push(p1)}},Eval_gamma=function(){return push(cadr(p1)),Eval(),gamma()},gamma=function(){return save(),gammaf(),restore()},gammaf=function(){return p1=pop(),isrational(p1)&&MEQUAL(p1.q.a,1)&&MEQUAL(p1.q.b,2)?(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(1,2),void power()):isrational(p1)&&MEQUAL(p1.q.a,3)&&MEQUAL(p1.q.b,2)?(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_rational(1,2),power(),push_rational(1,2),void multiply()):isnegativeterm(p1)?(evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push_integer(-1),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),push(p1),multiply(),sine(),push(p1),multiply(),push(p1),negate(),gamma(),multiply(),void divide()):void(car(p1)!==symbol(ADD)?(push_symbol(GAMMA),push(p1),list(2)):gamma_of_sum())},gamma_of_sum=function(){return p3=cdr(p1),isrational(car(p3))&&MEQUAL(car(p3).q.a,1)&&MEQUAL(car(p3).q.b,1)?(push(cadr(p3)),push(cadr(p3)),gamma(),multiply()):isrational(car(p3))&&MEQUAL(car(p3).q.a,-1)&&MEQUAL(car(p3).q.b,1)?(push(cadr(p3)),gamma(),push(cadr(p3)),push_integer(-1),add(),divide()):(push_symbol(GAMMA),push(p1),void list(2))},Eval_gcd=function(){var t;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),t=[];iscons(p1);)push(car(p1)),Eval(),gcd(),t.push(p1=cdr(p1));return t},gcd=function(){var t;return t=expanding,save(),gcd_main(),restore(),expanding=t},gcd_main=function(){var t;if(expanding=1,p2=pop(),p1=pop(),equal(p1,p2))push(p1);else{if(isrational(p1)&&isrational(p2))return push(p1),push(p2),void gcd_numbers();if(t=areunivarpolysfactoredorexpandedform(p1,p2))gcd_polys(t);else if(car(p1)!==symbol(ADD)||car(p2)!==symbol(ADD))if(car(p1)===symbol(ADD)&&(gcd_sum(p1),p1=pop()),car(p2)===symbol(ADD)&&(gcd_sum(p2),p2=pop()),car(p1)!==symbol(MULTIPLY))if(car(p2)!==symbol(MULTIPLY)){if(car(p1)!==symbol(MULTIPLY)||car(p2)!==symbol(MULTIPLY))return gcd_powers_with_same_base();gcd_product_product()}else gcd_product_sum();else gcd_sum_product();else gcd_sum_sum()}},areunivarpolysfactoredorexpandedform=function(t,e){var n;return!(!(n=isunivarpolyfactoredorexpandedform(t))||!isunivarpolyfactoredorexpandedform(e,n))&&n},gcd_polys=function(t){if(push(p1),push(t),factorpoly(),p1=pop(),push(p2),push(t),factorpoly(),p2=pop(),DEBUG&&console.log("factored polys:"),DEBUG&&console.log("p1:"+p1.toString()),DEBUG&&console.log("p2:"+p2.toString()),car(p1)!==symbol(MULTIPLY)&&car(p2)!==symbol(MULTIPLY)||(car(p1)!==symbol(MULTIPLY)&&(push_symbol(MULTIPLY),push(p1),push(one),list(3),p1=pop()),car(p2)!==symbol(MULTIPLY)&&(push_symbol(MULTIPLY),push(p2),push(one),list(3),p2=pop())),car(p1)!==symbol(MULTIPLY)||car(p2)!==symbol(MULTIPLY))return gcd_powers_with_same_base(),!0;gcd_product_product()},gcd_product_product=function(){var t;for(push(one),p3=cdr(p1),t=[];iscons(p3);){for(p4=cdr(p2);iscons(p4);)push(car(p3)),push(car(p4)),gcd(),multiply(),p4=cdr(p4);t.push(p3=cdr(p3))}return t},gcd_powers_with_same_base=function(){if(car(p1)===symbol(POWER)?(p3=caddr(p1),p1=cadr(p1)):p3=one,car(p2)===symbol(POWER)?(p4=caddr(p2),p2=cadr(p2)):p4=one,equal(p1,p2)){if(isNumericAtom(p3)&&isNumericAtom(p4))return push(p1),lessp(p3,p4)?push(p3):push(p4),void power();if(push(p3),push(p4),divide(),p5=pop(),isNumericAtom(p5))return push(p1),p5=car(p3)===symbol(MULTIPLY)&&isNumericAtom(cadr(p3))?cadr(p3):one,p6=car(p4)===symbol(MULTIPLY)&&isNumericAtom(cadr(p4))?cadr(p4):one,lessp(p5,p6)?push(p3):push(p4),void power();if(push(p3),push(p4),subtract(),p5=pop(),isNumericAtom(p5))return push(p1),isnegativenumber(p5)?push(p3):push(p4),power();push(one)}else push(one)},gcd_sum_sum=function(){if(length(p1)===length(p2)){for(p3=cdr(p1),push(car(p3)),p3=cdr(p3);iscons(p3);)push(car(p3)),gcd(),p3=cdr(p3);for(p3=pop(),p4=cdr(p2),push(car(p4)),p4=cdr(p4);iscons(p4);)push(car(p4)),gcd(),p4=cdr(p4);return p4=pop(),push(p1),push(p3),divide(),p5=pop(),push(p2),push(p4),divide(),p6=pop(),equal(p5,p6)?(push(p5),push(p3),push(p4),gcd(),multiply()):push(one)}push(one)},gcd_sum=function(t){var e;for(t=cdr(t),push(car(t)),t=cdr(t),e=[];iscons(t);)push(car(t)),gcd(),e.push(t=cdr(t));return e},gcd_sum_product=function(){var t;for(push(one),p3=cdr(p1),t=[];iscons(p3);)push(car(p3)),push(p2),gcd(),multiply(),t.push(p3=cdr(p3));return t},gcd_product_sum=function(){var t;for(push(one),p4=cdr(p2),t=[];iscons(p4);)push(p1),push(car(p4)),gcd(),multiply(),t.push(p4=cdr(p4));return t},guess=function(){var t;return t=pop(),push(t),Find(t,symbol(SYMBOL_X))?push_symbol(SYMBOL_X):Find(t,symbol(SYMBOL_Y))?push_symbol(SYMBOL_Y):Find(t,symbol(SYMBOL_Z))?push_symbol(SYMBOL_Z):Find(t,symbol(SYMBOL_T))?push_symbol(SYMBOL_T):Find(t,symbol(SYMBOL_S))?push_symbol(SYMBOL_S):push_symbol(SYMBOL_X)},hermite=function(){return save(),yyhermite(),restore()},yyhermite=function(){var t;return 0,p2=pop(),p1=pop(),push(p2),(t=pop_integer())<0||isNaN(t)?(push_symbol(HERMITE),push(p1),push(p2),void list(3)):issymbol(p1)?yyhermite2(t):(p3=p1,p1=symbol(SECRETX),yyhermite2(t),p1=p3,push(symbol(SECRETX)),push(p1),subst(),Eval())},yyhermite2=function(t){var e,n,r,o;for(e=0,push_integer(1),push_integer(0),p4=pop(),o=[],e=n=0,r=t;0<=r?n<r:n>r;e=0<=r?++n:--n)p5=p4,p4=pop(),push(p1),push(p4),multiply(),push_integer(e),push(p5),multiply(),subtract(),push_integer(2),o.push(multiply());return o},hilbert=function(){var t,e,n,r,o,i,a;if(t=0,n=0,0,save(),p2=pop(),push(p2),(r=pop_integer())<2)return push_symbol(HILBERT),push(p2),list(2),void restore();for(push_zero_matrix(r,r),p1=pop(),t=o=0,i=r;0<=i?o<i:o>i;t=0<=i?++o:--o)for(n=e=0,a=r;0<=a?e<a:e>a;n=0<=a?++e:--e)push_integer(t+n+1),inverse(),p1.tensor.elem[t*r+n]=pop();return push(p1),restore()},DEBUG_IMAG=!1,Eval_imag=function(){return push(cadr(p1)),Eval(),imag()},imag=function(){return save(),rect(),p1=pop(),DEBUG_IMAG&&console.log("IMAGE of "+p1),push(p1),push(p1),conjugate(),DEBUG_IMAG&&console.log(" image: conjugate result: "+stack[tos-1]),subtract(),push_integer(2),divide(),DEBUG_IMAG&&console.log(" image: 1st divide result: "+stack[tos-1]),push(imaginaryunit),divide(),DEBUG_IMAG&&console.log(" image: 2nd divide result: "+stack[tos-1]),restore()},index_function=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_,b;for(e=0,o=0,0,0,p=0,b=0,save(),(a=t-1)>(u=(p1=stack[_=tos-t]).tensor.ndim)&&stop("too many indices for tensor"),o=0,e=c=0,l=a;0<=l?c<l:c>l;e=0<=l?++c:--c)push(stack[_+e+1]),((b=pop_integer())<1||b>p1.tensor.dim[e])&&stop("index out of range"),o=o*p1.tensor.dim[e]+b-1;if(u===a)return moveTos(tos-t),push(p1.tensor.elem[o]),void restore();for(e=n=d=a,f=u;d<=f?n<f:n>f;e=d<=f?++n:--n)o=o*p1.tensor.dim[e]+0;for(p=1,e=r=h=a,m=u;h<=m?r<m:r>m;e=h<=m?++r:--r)p*=p1.tensor.dim[e];for((p2=alloc_tensor(p)).tensor.ndim=u-a,e=i=g=a,v=u;g<=v?i<v:i>v;e=g<=v?++i:--i)p2.tensor.dim[e-a]=p1.tensor.dim[e];for(e=s=0,y=p;0<=y?s<y:s>y;e=0<=y?++s:--s)p2.tensor.elem[e]=p1.tensor.elem[o+e];return check_tensor_dimensions(p1),check_tensor_dimensions(p2),moveTos(tos-t),push(p2),restore()},set_component=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_;for(e=0,o=0,0,0,_=0,save(),t<3&&stop("error in indexed assign"),p2=stack[y=tos-t],p1=stack[y+1],istensor(p1)||stop("error in indexed assign: assigning to something that is not a tensor"),(a=t-2)>(p=p1.tensor.ndim)&&stop("error in indexed assign"),o=0,e=c=0,l=a;0<=l?c<l:c>l;e=0<=l?++c:--c)push(stack[y+e+2]),((_=pop_integer())<1||_>p1.tensor.dim[e])&&stop("error in indexed assign\n"),o=o*p1.tensor.dim[e]+_-1;for(e=n=d=a,f=p;d<=f?n<f:n>f;e=d<=f?++n:--n)o=o*p1.tensor.dim[e]+0;for((p3=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,e=r=0,h=p1.tensor.ndim;0<=h?r<h:r>h;e=0<=h?++r:--r)p3.tensor.dim[e]=p1.tensor.dim[e];for(e=i=0,m=p1.tensor.nelem;0<=m?i<m:i>m;e=0<=m?++i:--i)p3.tensor.elem[e]=p1.tensor.elem[e];if(check_tensor_dimensions(p1),check_tensor_dimensions(p3),p1=p3,p===a)return istensor(p2)&&stop("error in indexed assign"),p1.tensor.elem[o]=p2,check_tensor_dimensions(p1),moveTos(tos-t),push(p1),void restore();for(istensor(p2)||stop("error in indexed assign"),p-a!==p2.tensor.ndim&&stop("error in indexed assign"),e=s=0,g=p2.tensor.ndim;0<=g?s<g:s>g;e=0<=g?++s:--s)p1.tensor.dim[a+e]!==p2.tensor.dim[e]&&stop("error in indexed assign");for(e=u=0,v=p2.tensor.nelem;0<=v?u<v:u>v;e=0<=v?++u:--u)p1.tensor.elem[o+e]=p2.tensor.elem[e];return check_tensor_dimensions(p1),check_tensor_dimensions(p2),moveTos(tos-t),push(p1),restore()},Eval_inner=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d,f,h,m;for((m=[]).push(car(cdr(p1))),car(cdr(cdr(p1)))===symbol(NIL)&&stop("pattern needs at least a template and a transformed version"),i=cdr(cdr(p1));i!==symbol(NIL);)m.push(car(i)),i=cdr(i);if(m.length>2){for(push_symbol(INNER),push(m[m.length-2]),push(m[m.length-1]),list(3),e=a=2,u=m.length;2<=u?a<u:a>u;e=2<=u?++a:--a)push_symbol(INNER),swap(),push(m[m.length-e-1]),swap(),list(3);return p1=pop(),void Eval_inner()}for(get_innerprod_factors(p1,s=[]),d=[],e=n=0,p=s.length;0<=p?n<p:n>p;e=0<=p?++n:--n)s[e]!==symbol(SYMBOL_IDENTITY_MATRIX)&&d.push(s[e]);if(s=d,d=[],s.length>1){for(h=0,e=r=0,c=s.length;(0<=c?r<c:r>c)&&e+h+1<=s.length-1&&(isNumericAtomOrTensor(s[e+h])||isNumericAtomOrTensor(s[e+h+1])?d.push(s[e+h]):(push(s[e+h]),Eval(),inv(),push(s[e+h+1]),Eval(),subtract(),t=pop(),isZeroAtomOrTensor(t)?h+=1:d.push(s[e+h])),e+h===s.length-2&&d.push(s[s.length-1]),!(e+h>=s.length-1));e=0<=c?++r:--r);s=d}if(push(symbol(INNER)),!(s.length>0))return pop(),void push(symbol(SYMBOL_IDENTITY_MATRIX));for(e=o=0,l=s.length;0<=l?o<l:o>l;e=0<=l?++o:--o)push(s[e]);for(list(s.length+1),p1=pop(),p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),f=[];iscons(p1);)push(car(p1)),Eval(),inner(),f.push(p1=cdr(p1));return f},inner=function(){var t,e,n,r;if(save(),p2=pop(),p1=pop(),isnegativeterm(p2)&&isnegativeterm(p1)&&(push(p2),negate(),p2=pop(),push(p1),negate(),p1=pop()),isinnerordot(p1)&&(t=car(cdr(p1)),e=car(cdr(cdr(p1))),n=p2,p1=t,push(e),push(n),inner(),p2=pop()),p1===symbol(SYMBOL_IDENTITY_MATRIX))return push(p2),void restore();if(p2===symbol(SYMBOL_IDENTITY_MATRIX))return push(p1),void restore();if(istensor(p1)&&istensor(p2))inner_f();else{if(!isNumericAtomOrTensor(p1)&&!isNumericAtomOrTensor(p2)&&(push(p1),push(p2),inv(),subtract(),r=pop(),isZeroAtomOrTensor(r)))return push_symbol(SYMBOL_IDENTITY_MATRIX),void restore();if(expanding&&isadd(p1)){for(p1=cdr(p1),push(zero);iscons(p1);)push(car(p1)),push(p2),inner(),add(),p1=cdr(p1);return void restore()}if(expanding&&isadd(p2)){for(p2=cdr(p2),push(zero);iscons(p2);)push(p1),push(car(p2)),inner(),add(),p2=cdr(p2);return void restore()}if(push(p1),push(p2),istensor(p1)&&isNumericAtom(p2))tensor_times_scalar();else if(isNumericAtom(p1)&&istensor(p2))scalar_times_tensor();else{if(!isNumericAtom(p1)&&!isNumericAtom(p2))return pop(),pop(),push_symbol(INNER),push(p1),push(p2),list(3),void restore();multiply()}}return restore()},inner_f=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_,b,x,E,w;for(i=0,(d=p1.tensor.dim[p1.tensor.ndim-1])!==p2.tensor.dim[0]&&stop("inner: tensor dimension check"),(h=p1.tensor.ndim+p2.tensor.ndim-2)>MAXDIM&&stop("inner: rank of result exceeds maximum"),t=p1.tensor.elem,n=p2.tensor.elem,e=1,i=m=0,v=p1.tensor.ndim-1;0<=v?m<v:m>v;i=0<=v?++m:--m)e*=p1.tensor.dim[i];for(r=1,i=a=1,y=p2.tensor.ndim;1<=y?a<y:a>y;i=1<=y?++a:--a)r*=p2.tensor.dim[i];for(o=(p3=alloc_tensor(e*r)).tensor.elem,i=u=0,_=e;0<=_?u<_:u>_;i=0<=_?++u:--u)for(s=c=0,b=d;0<=b?c<b:c>b;s=0<=b?++c:--c)if(!isZeroAtomOrTensor(t[i*d+s]))for(p=l=0,x=r;0<=x?l<x:l>x;p=0<=x?++l:--l)push(t[i*d+s]),push(n[s*r+p]),multiply(),push(o[i*r+p]),add(),o[i*r+p]=pop();if(0===h)return push(p3.tensor.elem[0]);for(p3.tensor.ndim=h,s=0,i=f=0,E=p1.tensor.ndim-1;0<=E?f<E:f>E;i=0<=E?++f:--f)p3.tensor.dim[i]=p1.tensor.dim[i];for(s=p1.tensor.ndim-1,i=g=0,w=p2.tensor.ndim-1;0<=w?g<w:g>w;i=0<=w?++g:--g)p3.tensor.dim[s+i]=p2.tensor.dim[i+1];return push(p3)},get_innerprod_factors=function(t,e){if(iscons(t)){if(cdr(t)!==symbol(NIL))return isinnerordot(t)?(get_innerprod_factors(car(cdr(t)),e),void get_innerprod_factors(cdr(cdr(t)),e)):add_factor_to_accumulator(t,e);t=get_innerprod_factors(car(t),e)}else add_factor_to_accumulator(t,e)},add_factor_to_accumulator=function(t,e){if(t!==symbol(NIL))return e.push(t)},itab=["f(a,a*x)","f(1/x,log(x))","f(x^a,x^(a+1)/(a+1))","f(x^(-2),-x^(-1))","f(x^(-1/2),2*x^(1/2))","f(x^(1/2),2/3*x^(3/2))","f(x,x^2/2)","f(x^2,x^3/3)","f(exp(a*x),1/a*exp(a*x))","f(exp(a*x+b),1/a*exp(a*x+b))","f(x*exp(a*x^2),exp(a*x^2)/(2*a))","f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))","f(log(a*x),x*log(a*x)-x)","f(a^x,a^x/log(a),or(not(number(a)),a>0))","f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))","f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))","f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))","f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))","f(1/(a+b*x),1/b*log(a+b*x))","f(1/(a+b*x)^2,-1/(b*(a+b*x)))","f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)","f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)","f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))","f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))","f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))","f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))","f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))","f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))","f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))","f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))","f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))","f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))","f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))","f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))","f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))","f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))","f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))","f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))","f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))","f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))","f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))","f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))","f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))","f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))","f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))","f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)","f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)","f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))","f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))","f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)","f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)","f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)","f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))","f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))","f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))","f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))","f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))","f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))","f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))","f(x/sqrt(x^2+a),sqrt(x^2+a))","f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))","f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))","f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))","f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))","f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))","f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))","f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))","f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))","f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))","f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))","f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))","f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)","f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))","f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))","f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))","f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))","f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))","f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))","f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))","f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))","f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))","f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))","f(x/sqrt(a-x^2),-sqrt(a-x^2))","f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))","f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))","f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))","f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))","f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))","f(sin(a*x),-cos(a*x)/a)","f(cos(a*x),sin(a*x)/a)","f(tan(a*x),-log(cos(a*x))/a)","f(1/tan(a*x),log(sin(a*x))/a)","f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)","f(1/sin(a*x),log(tan(a*x/2))/a)","f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))","f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))","f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))","f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))","f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))","f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))","f(1/sin(a*x)^2,-1/(a*tan(a*x)))","f(1/cos(a*x)^2,tan(a*x)/a)","f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))","f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)","f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))","f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)","f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))","f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)","f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)","f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)","f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))","f(sin(a+b*x),-cos(a+b*x)/b)","f(cos(a+b*x),sin(a+b*x)/b)","f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)","f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)","f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)","f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)","f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)","f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)","f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)","f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)","f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)","f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)","f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)","f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)","f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)","f(x*log(a*x),x^2*log(a*x)/2-x^2/4)","f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)","f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)","f(1/x*1/(a+log(x)),log(a+log(x)))","f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)","f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)","f(sinh(x),cosh(x))","f(cosh(x),sinh(x))","f(tanh(x),log(cosh(x)))","f(x*sinh(x),x*cosh(x)-sinh(x))","f(x*cosh(x),x*sinh(x)-cosh(x))","f(sinh(x)^2,sinh(2*x)/4-x/2)","f(tanh(x)^2,x-tanh(x))","f(cosh(x)^2,sinh(2*x)/4+x/2)","f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)","f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)","f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)","f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))","f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)","f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)","f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)","f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))","f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))","f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))","f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))","f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))","f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))",0],Eval_integral=function(){var t,e,n,r,o;for(0,e=0,p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?(guess(),push(symbol(NIL))):isNumericAtom(p2)?(guess(),push(p2)):(push(p2),p1=cdr(p1),push(car(p1)),Eval()),p5=pop(),p4=pop(),p3=pop();;){if(isNumericAtom(p5)?(push(p5),e=pop_integer(),isNaN(e)&&stop("nth integral: check n")):e=1,push(p3),e>=0)for(n=0,r=e;0<=r?n<r:n>r;0<=r?++n:--n)push(p4),integral();else for(t=0,o=e=-e;0<=o?t<o:t>o;0<=o?++t:--t)push(p4),derivative();if(p3=pop(),p5===symbol(NIL))break;if(isNumericAtom(p5)){if(p1=cdr(p1),push(car(p1)),Eval(),(p5=pop())===symbol(NIL))break;isNumericAtom(p5)?1:(p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop())}else p4=p5,p1=cdr(p1),push(car(p1)),Eval(),p5=pop()}return push(p3)},integral=function(){return save(),p2=pop(),p1=pop(),car(p1)===symbol(ADD)?integral_of_sum():car(p1)===symbol(MULTIPLY)?integral_of_product():integral_of_form(),p1=pop(),Find(p1,symbol(INTEGRAL))&&stop("integral: sorry, could not find a solution"),push(p1),simplify(),Eval(),restore()},integral_of_sum=function(){var t;for(p1=cdr(p1),push(car(p1)),push(p2),integral(),p1=cdr(p1),t=[];iscons(p1);)push(car(p1)),push(p2),integral(),add(),t.push(p1=cdr(p1));return t},integral_of_product=function(){return push(p1),push(p2),partition(),p1=pop(),integral_of_form(),multiply()},integral_of_form=function(){var t,e;return t=italu_hashcode(p1,p2).toFixed(6),(e=hashed_itab[t])?(push(p1),push(p2),transform(e,!1),(p3=pop())===symbol(NIL)?(push_symbol(INTEGRAL),push(p1),push(p2),list(3)):push(p3)):(push_symbol(INTEGRAL),push(p1),push(p2),void list(3))},hashcode_values={x:.95532,constexp:1.43762,constant:1.1441659362941434,constbase:1.2036412230421882,sin:1.7330548251830322,arcsin:1.6483368529465805,cos:1.0586721236863401,arccos:1.8405225918106694,tan:1.1224943776292506,arctan:1.1297397925394963,sinh:1.8176164926060079,cosh:1.9404934661708022,tanh:1.6421307715103122,log:1.477443701354924,erf:1.0825269225702916},italu_hashcode=function(t,e){var n;if(issymbol(t))return equal(t,e)?hashcode_values.x:hashcode_values.constant;if(iscons(t))switch(symnum(car(t))){case ADD:return hash_addition(cdr(t),e);case MULTIPLY:return hash_multiplication(cdr(t),e);case POWER:return hash_power(cadr(t),caddr(t),e);case EXP:return hash_power(symbol(E),cadr(t),e);case SQRT:return push_double(.5),n=pop(),hash_power(cadr(t),n,e);default:return hash_function(t,e)}return hashcode_values.constant},hash_function=function(t,e){var n,r,o;if(!Find(cadr(t),e))return hashcode_values.constant;if(o=car(t),n=italu_hashcode(cadr(t),e),!(r=hashcode_values[o.printname]))throw new Error("Unsupported function "+o.printname);return Math.pow(r,n)},hash_addition=function(t,e){var n,r,o,i;for(i={};iscons(t);)o=car(t),t=cdr(t),0,i[(Find(o,e)?italu_hashcode(o,e):hashcode_values.constant).toFixed(6)]=!0;for(n in r=0,i)hasProp.call(i,n)&&(i[n],r+=parseFloat(n,10));return r},hash_multiplication=function(t,e){var n,r;for(n=1;iscons(t);)r=car(t),t=cdr(t),Find(r,e)&&(n*=italu_hashcode(r,e));return n},hash_power=function(t,e,n){var r,o;if(r=hashcode_values.constant,o=hashcode_values.constexp,Find(t,n)&&(r=italu_hashcode(t,n)),Find(e,n))o=italu_hashcode(e,n);else{if(r===hashcode_values.constant)return hashcode_values.constant;isminusone(e)?o=-1:isoneovertwo(e)?o=.5:isminusoneovertwo(e)?o=-.5:equalq(e,2,1)?o=2:equalq(e,-2,1)&&(o=-2)}return Math.pow(r,o)},make_hashed_itab=function(){var t,e,n,r,o,i,a;for(i={},r=0,n=itab.length;r<n&&(o=itab[r]);r++)scan_meta(o),t=pop(),a=cadr(t),i[e=italu_hashcode(a,symbol(METAX)).toFixed(6)]||(i[e]=[]),i[e].push(o);return console.log("hashed_itab = "+JSON.stringify(i,null,2)),i},$.make_hashed_itab=make_hashed_itab,hashed_itab={1.144166:["f(a,a*x)"],"1.046770":["f(1/x,log(x))"],"0.936400":["f(x^a,x^(a+1)/(a+1))"],1.095727:["f(x^(-2),-x^(-1))"],1.023118:["f(x^(-1/2),2*x^(1/2))"],.977405:["f(x^(1/2),2/3*x^(3/2))"],"0.955320":["f(x,x^2/2)"],.912636:["f(x^2,x^3/3)"],1.137302:["f(exp(a*x),1/a*exp(a*x))","f(a^x,a^x/log(a),or(not(number(a)),a>0))"],1.326774:["f(exp(a*x+b),1/a*exp(a*x+b))"],1.080259:["f(x*exp(a*x^2),exp(a*x^2)/(2*a))"],1.260228:["f(x*exp(a*x^2+b),exp(a*x^2+b)/(2*a))"],1.451902:["f(log(a*x),x*log(a*x)-x)"],.486192:["f(1/(a+x^2),1/sqrt(a)*arctan(x/sqrt(a)),or(not(number(a)),a>0))","f(1/(a-x^2),1/sqrt(a)*arctanh(x/sqrt(a)))","f(1/(a+b*x^2),1/sqrt(a*b)*arctan(x*sqrt(a*b)/a),or(not(number(a*b)),a*b>0))","f(1/(a+b*x^2),1/(2*sqrt(-a*b))*log((a+x*sqrt(-a*b))/(a-x*sqrt(-a*b))),or(not(number(a*b)),a*b<0))"],.697274:["f(1/sqrt(a-x^2),arcsin(x/(sqrt(a))))","f(1/sqrt(a+x^2),log(x+sqrt(a+x^2)))","f(1/sqrt(x^2+a),log(x+sqrt(x^2+a)))"],.476307:["f(1/(a+b*x),1/b*log(a+b*x))"],.226868:["f(1/(a+b*x)^2,-1/(b*(a+b*x)))"],2.904531:["f(1/(a+b*x)^3,-1/(2*b)*1/(a+b*x)^2)"],.455026:["f(x/(a+b*x),x/b-a*log(a+b*x)/b/b)"],.216732:["f(x/(a+b*x)^2,1/b^2*(log(a+b*x)+a/(a+b*x)))"],.434695:["f(x^2/(a+b*x),1/b^2*(1/2*(a+b*x)^2-2*a*(a+b*x)+a^2*log(a+b*x)))"],.207048:["f(x^2/(a+b*x)^2,1/b^3*(a+b*x-2*a*log(a+b*x)-a^2/(a+b*x)))"],2.650781:["f(x^2/(a+b*x)^3,1/b^3*(log(a+b*x)+2*a/(a+b*x)-1/2*a^2/(a+b*x)^2))"],.498584:["f(1/x*1/(a+b*x),-1/a*log((a+b*x)/x))"],.237479:["f(1/x*1/(a+b*x)^2,1/a*1/(a+b*x)-1/a^2*log((a+b*x)/x))"],3.040375:["f(1/x*1/(a+b*x)^3,1/a^3*(1/2*((2*a+b*x)/(a+b*x))^2+log(x/(a+b*x))))"],.521902:["f(1/x^2*1/(a+b*x),-1/(a*x)+b/a^2*log((a+b*x)/x))"],.446014:["f(1/x^3*1/(a+b*x),(2*b*x-a)/(2*a^2*x^2)+b^2/a^3*log(x/(a+b*x)))"],.248586:["f(1/x^2*1/(a+b*x)^2,-(a+2*b*x)/(a^2*x*(a+b*x))+2*b/a^3*log((a+b*x)/x))"],.464469:["f(x/(a+b*x^2),1/2*1/b*log(a+b*x^2))"],.443716:["f(x^2/(a+b*x^2),x/b-a/b*integral(1/(a+b*x^2),x))"],.236382:["f(1/(a+b*x^2)^2,x/(2*a*(a+b*x^2))+1/2*1/a*integral(1/(a+b*x^2),x))"],.508931:["f(1/x*1/(a+b*x^2),1/2*1/a*log(x^2/(a+b*x^2)))"],.532733:["f(1/x^2*1/(a+b*x^2),-1/(a*x)-b/a*integral(1/(a+b*x^2),x))"],.480638:["f(1/(a+b*x^3),1/3*1/a*(a/b)^(1/3)*(1/2*log(((a/b)^(1/3)+x)^3/(a+b*x^3))+sqrt(3)*arctan((2*x-(a/b)^(1/3))*(a/b)^(-1/3)/sqrt(3))))"],.438648:["f(x^2/(a+b*x^3),1/3*1/b*log(a+b*x^3))"],.459164:["f(x/(a+b*x^4),1/2*sqrt(b/a)/b*arctan(x^2*sqrt(b/a)),or(not(number(a*b)),a*b>0))","f(x/(a+b*x^4),1/4*sqrt(-b/a)/b*log((x^2-sqrt(-a/b))/(x^2+sqrt(-a/b))),or(not(number(a*b)),a*b<0))"],"0.450070":["f(x^3/(a+b*x^4),1/4*1/b*log(a+b*x^4))"],"1.448960":["f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))"],1.384221:["f(x*sqrt(a+b*x),-2*(2*a-3*b*x)*sqrt((a+b*x)^3)/15/b^2)"],1.322374:["f(x^2*sqrt(a+b*x),2*(8*a^2-12*a*b*x+15*b^2*x^2)*sqrt((a+b*x)^3)/105/b^3)"],1.516728:["f(sqrt(a+b*x)/x,2*sqrt(a+b*x)+a*integral(1/x*1/sqrt(a+b*x),x))"],1.587665:["f(sqrt(a+b*x)/x^2,-sqrt(a+b*x)/x+b/2*integral(1/x*1/sqrt(a+b*x),x))"],"0.690150":["f(1/sqrt(a+b*x),2*sqrt(a+b*x)/b)"],.659314:["f(x/sqrt(a+b*x),-2/3*(2*a-b*x)*sqrt(a+b*x)/b^2)"],.629856:["f(x^2/sqrt(a+b*x),2/15*(8*a^2-4*a*b*x+3*b^2*x^2)*sqrt(a+b*x)/b^3)"],.722428:["f(1/x*1/sqrt(a+b*x),1/sqrt(a)*log((sqrt(a+b*x)-sqrt(a))/(sqrt(a+b*x)+sqrt(a))),or(not(number(a)),a>0))","f(1/x*1/sqrt(a+b*x),2/sqrt(-a)*arctan(sqrt(-(a+b*x)/a)),or(not(number(a)),a<0))"],.756216:["f(1/x^2*1/sqrt(a+b*x),-sqrt(a+b*x)/a/x-1/2*b/a*integral(1/x*1/sqrt(a+b*x),x))"],1.434156:["f(sqrt(x^2+a),1/2*(x*sqrt(x^2+a)+a*log(x+sqrt(x^2+a))))","f(sqrt(a-x^2),1/2*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(abs(a)))))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*log(x*sqrt(a)+sqrt(a*x^2+b))/2/sqrt(a),and(number(a),a>0))","f(sqrt(a*x^2+b),x*sqrt(a*x^2+b)/2+b*arcsin(x*sqrt(-a/b))/2/sqrt(-a),and(number(a),a<0))"],.729886:["f(1/x*1/sqrt(x^2+a),arcsec(x/sqrt(-a))/sqrt(-a),or(not(number(a)),a<0))","f(1/x*1/sqrt(x^2+a),-1/sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(1/x*1/sqrt(a-x^2),-1/sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))"],"1.501230":["f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(a)*log((sqrt(a)+sqrt(x^2+a))/x),or(not(number(a)),a>0))","f(sqrt(x^2+a)/x,sqrt(x^2+a)-sqrt(-a)*arcsec(x/sqrt(-a)),or(not(number(a)),a<0))","f(sqrt(a-x^2)/x,sqrt(a-x^2)-sqrt(a)*log((sqrt(a)+sqrt(a-x^2))/x),or(not(number(a)),a>0))"],"0.666120":["f(x/sqrt(x^2+a),sqrt(x^2+a))","f(x/sqrt(a-x^2),-sqrt(a-x^2))"],1.370077:["f(x*sqrt(x^2+a),1/3*sqrt((x^2+a)^3))","f(x*sqrt(a-x^2),-1/3*sqrt((a-x^2)^3))"],1.730087:["f(sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2+a^(1/3))^3)+3/2*a^(1/3)*x*sqrt(x^2+a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2+a^(1/3)))))","f(sqrt(-a+x^6-3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/4*(x*sqrt((x^2-a^(1/3))^3)-3/2*a^(1/3)*x*sqrt(x^2-a^(1/3))+3/2*a^(2/3)*log(x+sqrt(x^2-a^(1/3)))))"],.578006:["f(1/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),x/a^(1/3)/sqrt(x^2+a^(1/3)))"],"0.552180":["f(x/sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),-1/sqrt(x^2+a^(1/3)))"],1.652787:["f(x*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/5*sqrt((x^2+a^(1/3))^5))"],1.308862:["f(x^2*sqrt(x^2+a),1/4*x*sqrt((x^2+a)^3)-1/8*a*x*sqrt(x^2+a)-1/8*a^2*log(x+sqrt(x^2+a)))","f(x^2*sqrt(a-x^2),-x/4*sqrt((a-x^2)^3)+1/8*a*(x*sqrt(a-x^2)+a*arcsin(x/sqrt(a))),or(not(number(a)),a>0))"],1.342944:["f(x^3*sqrt(x^2+a),(1/5*x^2-2/15*a)*sqrt((x^2+a)^3),and(number(a),a>0))","f(x^3*sqrt(x^2+a),sqrt((x^2+a)^5)/5-a*sqrt((x^2+a)^3)/3,and(number(a),a<0))","f(x^3*sqrt(a-x^2),(-1/5*x^2-2/15*a)*sqrt((a-x^2)^3),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^3,-1/2*sqrt(a-x^2)/x^2+1/2*log((sqrt(a)+sqrt(a-x^2))/x)/sqrt(a),or(not(number(a)),a>0))","f(sqrt(a-x^2)/x^4,-1/3*sqrt((a-x^2)^3)/a/x^3,or(not(number(a)),a>0))"],.636358:["f(x^2/sqrt(x^2+a),1/2*x*sqrt(x^2+a)-1/2*a*log(x+sqrt(x^2+a)))","f(x^2/sqrt(a-x^2),-x/2*sqrt(a-x^2)+a/2*arcsin(x/sqrt(a)),or(not(number(a)),a>0))"],.652928:["f(x^3/sqrt(x^2+a),1/3*sqrt((x^2+a)^3)-a*sqrt(x^2+a))","f(1/x^3*1/sqrt(x^2+a),-1/2*sqrt(x^2+a)/a/x^2+1/2*log((sqrt(a)+sqrt(x^2+a))/x)/a^(3/2),or(not(number(a)),a>0))","f(1/x^3*1/sqrt(x^2-a),1/2*sqrt(x^2-a)/a/x^2+1/2*1/(a^(3/2))*arcsec(x/(a^(1/2))),or(not(number(a)),a>0))"],.764022:["f(1/x^2*1/sqrt(x^2+a),-sqrt(x^2+a)/a/x)","f(1/x^2*1/sqrt(a-x^2),-sqrt(a-x^2)/a/x,or(not(number(a)),a>0))"],"1.578940":["f(x^2*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/6*x*sqrt((x^2+a^(1/3))^5)-1/24*a^(1/3)*x*sqrt((x^2+a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2+a^(1/3))-1/16*a*log(x+sqrt(x^2+a^(1/3))),or(not(number(a)),a>0))","f(x^2*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/6*x*sqrt((x^2-a^(1/3))^5)+1/24*a^(1/3)*x*sqrt((x^2-a^(1/3))^3)-1/16*a^(2/3)*x*sqrt(x^2-a^(1/3))+1/16*a*log(x+sqrt(x^2-a^(1/3))),or(not(number(a)),a>0))"],1.620055:["f(x^3*sqrt(a+x^6+3*a^(1/3)*x^4+3*a^(2/3)*x^2),1/7*sqrt((x^2+a^(1/3))^7)-1/5*a^(1/3)*sqrt((x^2+a^(1/3))^5),or(not(number(a)),a>0))","f(x^3*sqrt(-a-3*a^(1/3)*x^4+3*a^(2/3)*x^2+x^6),1/7*sqrt((x^2-a^(1/3))^7)+1/5*a^(1/3)*sqrt((x^2-a^(1/3))^5),or(not(number(a)),a>0))"],.332117:["f(1/(x-a)/sqrt(x^2-a^2),-sqrt(x^2-a^2)/a/(x-a))","f(1/(x+a)/sqrt(x^2-a^2),sqrt(x^2-a^2)/a/(x+a))"],1.571443:["f(sqrt(a-x^2)/x^2,-sqrt(a-x^2)/x-arcsin(x/sqrt(a)),or(not(number(a)),a>0))"],1.690994:["f(sin(a*x),-cos(a*x)/a)"],1.055979:["f(cos(a*x),sin(a*x)/a)"],1.116714:["f(tan(a*x),-log(cos(a*x))/a)"],.895484:["f(1/tan(a*x),log(sin(a*x))/a)"],.946989:["f(1/cos(a*x),log(tan(pi/4+a*x/2))/a)"],.591368:["f(1/sin(a*x),log(tan(a*x/2))/a)"],2.859462:["f(sin(a*x)^2,x/2-sin(2*a*x)/(4*a))"],"2.128050":["f(sin(a*x)^3,-cos(a*x)*(sin(a*x)^2+2)/(3*a))","f(sin(a*x)^4,3/8*x-sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))"],1.115091:["f(cos(a*x)^2,x/2+sin(2*a*x)/(4*a))"],1.081452:["f(cos(a*x)^3,sin(a*x)*(cos(a*x)^2+2)/(3*a))","f(cos(a*x)^4,3/8*x+sin(2*a*x)/(4*a)+sin(4*a*x)/(32*a))"],.349716:["f(1/sin(a*x)^2,-1/(a*tan(a*x)))"],.896788:["f(1/cos(a*x)^2,tan(a*x)/a)"],1.785654:["f(sin(a*x)*cos(a*x),sin(a*x)^2/(2*a))"],"3.188560":["f(sin(a*x)^2*cos(a*x)^2,-sin(4*a*x)/(32*a)+x/8)"],1.516463:["f(sin(a*x)/cos(a*x)^2,1/(a*cos(a*x)))"],2.707879:["f(sin(a*x)^2/cos(a*x),(log(tan(pi/4+a*x/2))-sin(a*x))/a)"],.369293:["f(cos(a*x)/sin(a*x)^2,-1/(a*sin(a*x)))"],.560019:["f(1/(sin(a*x)*cos(a*x)),log(tan(a*x))/a)"],.530332:["f(1/(sin(a*x)*cos(a*x)^2),(1/cos(a*x)+log(tan(a*x/2)))/a)"],.331177:["f(1/(sin(a*x)^2*cos(a*x)),(log(tan(pi/4+a*x/2))-1/sin(a*x))/a)"],.313621:["f(1/(sin(a*x)^2*cos(a*x)^2),-2/(a*tan(2*a*x)))"],3.172365:["f(sin(a+b*x),-cos(a+b*x)/b)"],1.127162:["f(cos(a+b*x),sin(a+b*x)/b)"],.352714:["f(1/(b+b*sin(a*x)),-tan(pi/4-a*x/2)/a/b)","f(1/(b-b*sin(a*x)),tan(pi/4+a*x/2)/a/b)","f(1/(a+b*sin(x)),1/sqrt(b^2-a^2)*log((a*tan(x/2)+b-sqrt(b^2-a^2))/(a*tan(x/2)+b+sqrt(b^2-a^2))),b^2-a^2)"],.454515:["f(1/(b+b*cos(a*x)),tan(a*x/2)/a/b)","f(1/(b-b*cos(a*x)),-1/tan(a*x/2)/a/b)","f(1/(a+b*cos(x)),1/sqrt(b^2-a^2)*log((sqrt(b^2-a^2)*tan(x/2)+a+b)/(sqrt(b^2-a^2)*tan(x/2)-a-b)),b^2-a^2)"],1.615441:["f(x*sin(a*x),sin(a*x)/a^2-x*cos(a*x)/a)"],1.543263:["f(x^2*sin(a*x),2*x*sin(a*x)/a^2-(a^2*x^2-2)*cos(a*x)/a^3)"],1.008798:["f(x*cos(a*x),cos(a*x)/a^2+x*sin(a*x)/a)"],.963724:["f(x^2*cos(a*x),2*x*cos(a*x)/a^2+(a^2*x^2-2)*sin(a*x)/a^3)"],1.611938:["f(arcsin(a*x),x*arcsin(a*x)+sqrt(1-a^2*x^2)/a)"],1.791033:["f(arccos(a*x),x*arccos(a*x)-sqrt(1-a^2*x^2)/a)"],1.123599:["f(arctan(a*x),x*arctan(a*x)-1/2*log(1+a^2*x^2)/a)"],1.387031:["f(x*log(a*x),x^2*log(a*x)/2-x^2/4)"],1.325058:["f(x^2*log(a*x),x^3*log(a*x)/3-1/9*x^3)"],2.108018:["f(log(x)^2,x*log(x)^2-2*x*log(x)+2*x)"],.403214:["f(1/x*1/(a+log(x)),log(a+log(x)))"],2.269268:["f(log(a*x+b),(a*x+b)*log(a*x+b)/a-x)"],2.486498:["f(log(a*x+b)/x^2,a/b*log(x)-(a*x+b)*log(a*x+b)/b/x)"],1.769733:["f(sinh(x),cosh(x))"],1.883858:["f(cosh(x),sinh(x))"],"1.606140":["f(tanh(x),log(cosh(x)))"],1.690661:["f(x*sinh(x),x*cosh(x)-sinh(x))"],1.799688:["f(x*cosh(x),x*sinh(x)-cosh(x))"],3.131954:["f(sinh(x)^2,sinh(2*x)/4-x/2)"],2.579685:["f(tanh(x)^2,x-tanh(x))"],3.548923:["f(cosh(x)^2,sinh(2*x)/4+x/2)"],1.058866:["f(x^3*exp(a*x^2),exp(a*x^2)*(x^2/a-1/(a^2))/2)"],"1.235270":["f(x^3*exp(a*x^2+b),exp(a*x^2)*exp(b)*(x^2/a-1/(a^2))/2)"],1.130783:["f(exp(a*x^2),-i*sqrt(pi)*erf(i*sqrt(a)*x)/sqrt(a)/2)"],1.078698:["f(erf(a*x),x*erf(a*x)+exp(-a^2*x^2)/a/sqrt(pi))"],"2.573650":["f(x^2*(1-x^2)^(3/2),(x*sqrt(1-x^2)*(-8*x^4+14*x^2-3)+3*arcsin(x))/48)","f(x^2*(1-x^2)^(5/2),(x*sqrt(1-x^2)*(48*x^6-136*x^4+118*x^2-15)+15*arcsin(x))/384)"],2.640666:["f(x^4*(1-x^2)^(3/2),(-x*sqrt(1-x^2)*(16*x^6-24*x^4+2*x^2+3)+3*arcsin(x))/128)"],1.086487:["f(x*exp(a*x),exp(a*x)*(a*x-1)/(a^2))"],1.267493:["f(x*exp(a*x+b),exp(a*x+b)*(a*x-1)/(a^2))"],1.037943:["f(x^2*exp(a*x),exp(a*x)*(a^2*x^2-2*a*x+2)/(a^3))"],1.210862:["f(x^2*exp(a*x+b),exp(a*x+b)*(a^2*x^2-2*a*x+2)/(a^3))"],"1.064970":["f(x^3*exp(a*x),exp(a*x)*x^3/a-3/a*integral(x^2*exp(a*x),x))"],1.242392:["f(x^3*exp(a*x+b),exp(a*x+b)*x^3/a-3/a*integral(x^2*exp(a*x+b),x))"]},INV_check_arg=function(){return istensor(p1)?2!==p1.tensor.ndim?0:p1.tensor.dim[0]!==p1.tensor.dim[1]?0:1:0},inv=function(){var t,e,n,r;if(0,0,save(),p1=pop(),isinv(p1))return push(car(cdr(p1))),void restore();if(isidentitymatrix(p1))return push(p1),void restore();if(!expanding||!isinnerordot(p1))return 0===INV_check_arg()?(push_symbol(INV),push(p1),list(2),void restore()):(isNumericAtomOrTensor(p1)?yyinvg():(push(p1),adj(),push(p1),det(),p2=pop(),isZeroAtomOrTensor(p2)&&stop("inverse of singular matrix"),push(p2),divide()),restore());for(p1=cdr(p1),t=[];iscons(p1);)t.push(car(p1)),p1=cdr(p1);for(e=n=r=t.length-1;r<=0?n<=0:n>=0;e=r<=0?++n:--n)push(t[e]),inv(),e!==t.length-1&&inner();restore()},invg=function(){return save(),p1=pop(),0===INV_check_arg()?(push_symbol(INVG),push(p1),list(2),void restore()):(yyinvg(),restore())},yyinvg=function(){var t,e,n,r,o,i,a,s,u,p,c,l;for(0,e=0,r=0,0,a=p1.tensor.dim[0],t=tos,e=s=0,u=a;0<=u?s<u:s>u;e=0<=u?++s:--s)for(r=n=0,p=a;0<=p?n<p:n>p;r=0<=p?++n:--n)push(e===r?one:zero);for(e=o=0,c=a*a;0<=c?o<c:o>c;e=0<=c?++o:--o)push(p1.tensor.elem[e]);for(INV_decomp(a),(p1=alloc_tensor(a*a)).tensor.ndim=2,p1.tensor.dim[0]=a,p1.tensor.dim[1]=a,e=i=0,l=a*a;0<=l?i<l:i>l;e=0<=l?++i:--i)p1.tensor.elem[e]=stack[t+e];return moveTos(tos-2*a*a),push(p1)},INV_decomp=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m;for(0,n=0,r=0,i=0,0,m=(e=tos-t*t)-t*t,h=[],n=u=0,p=t;0<=p?u<p:u>p;n=0<=p?++u:--u){if(equal(stack[e+t*n+n],zero)){for(r=o=c=n+1,l=t;(c<=l?o<l:o>l)&&equal(stack[e+t*r+n],zero);r=c<=l?++o:--o);for(r===t&&stop("inverse of singular matrix"),i=a=0,d=t;0<=d?a<d:a>d;i=0<=d?++a:--a)p2=stack[e+t*n+i],stack[e+t*n+i]=stack[e+t*r+i],stack[e+t*r+i]=p2,p2=stack[m+t*n+i],stack[m+t*n+i]=stack[m+t*r+i],stack[m+t*r+i]=p2}for(p2=stack[e+t*n+n],i=s=0,f=t;0<=f?s<f:s>f;i=0<=f?++s:--s)i>n&&(push(stack[e+t*n+i]),push(p2),divide(),stack[e+t*n+i]=pop()),push(stack[m+t*n+i]),push(p2),divide(),stack[m+t*n+i]=pop();h.push(function(){var o,a,s;for(s=[],r=o=0,a=t;0<=a?o<a:o>a;r=0<=a?++o:--o)r!==n&&(p2=stack[e+t*r+n],s.push(function(){var o,a,s;for(s=[],i=o=0,a=t;0<=a?o<a:o>a;i=0<=a?++o:--o)i>n&&(push(stack[e+t*r+i]),push(stack[e+t*n+i]),push(p2),multiply(),subtract(),stack[e+t*r+i]=pop()),push(stack[m+t*r+i]),push(stack[m+t*n+i]),push(p2),multiply(),subtract(),s.push(stack[m+t*r+i]=pop());return s}()));return s}())}return h},DEBUG_IS=!1,isZeroAtomOrTensor=function(t){var e,n,r;switch(e=0,t.k){case NUM:if(MZERO(t.q.a))return 1;break;case DOUBLE:if(0===t.d)return 1;break;case TENSOR:for(e=n=0,r=t.tensor.nelem;0<=r?n<r:n>r;e=0<=r?++n:--n)if(!isZeroAtomOrTensor(t.tensor.elem[e]))return 0;return 1}return 0},isZeroLikeOrNonZeroLikeOrUndetermined=function(t){var e;if(push(t),Eval_predicate(),e=pop(),isZeroAtomOrTensor(e))return 0;if(isNumericAtomOrTensor(e))return 1;if(push(e),zzfloat(),e=pop(),isZeroAtomOrTensor(e))return 0;if(isNumericAtomOrTensor(e))return 1;if(Find(e,imaginaryunit)){if(push(e),absValFloat(),Eval_predicate(),e=pop(),isZeroAtomOrTensor(e))return 0;if(isNumericAtomOrTensor(e))return 1}return null},isnegativenumber=function(t){switch(t.k){case NUM:if(-1===MSIGN(t.q.a))return 1;break;case DOUBLE:if(t.d<0)return 1}return 0},ispositivenumber=function(t){switch(t.k){case NUM:if(1===MSIGN(t.q.a))return 1;break;case DOUBLE:if(t.d>0)return 1}return 0},isplustwo=function(t){switch(t.k){case NUM:if(MEQUAL(t.q.a,2)&&MEQUAL(t.q.b,1))return 1;break;case DOUBLE:if(2===t.d)return 1}return 0},isplusone=function(t){switch(t.k){case NUM:if(MEQUAL(t.q.a,1)&&MEQUAL(t.q.b,1))return 1;break;case DOUBLE:if(1===t.d)return 1}return 0},isminusone=function(t){switch(t.k){case NUM:if(MEQUAL(t.q.a,-1)&&MEQUAL(t.q.b,1))return 1;break;case DOUBLE:if(-1===t.d)return 1}return 0},isone=function(t){return isplusone(t)||isminusone(t)},isinteger=function(t){return t.k===NUM&&MEQUAL(t.q.b,1)?1:0},isintegerorintegerfloat=function(t){return t.k===DOUBLE?t.d===Math.round(t.d)?1:0:isinteger(t)},isnonnegativeinteger=function(t){return isrational(t)&&MEQUAL(t.q.b,1)&&1===MSIGN(t.q.a)?1:0},isposint=function(t){return isinteger(t)&&1===MSIGN(t.q.a)?1:0},isunivarpolyfactoredorexpandedform=function(t,e){return null==e&&(push(t),guess(),e=pop(),pop()),ispolyfactoredorexpandedform(t,e)&&Find(t,symbol(SYMBOL_X))+Find(t,symbol(SYMBOL_Y))+Find(t,symbol(SYMBOL_Z))===1?e:0},ispolyfactoredorexpandedform=function(t,e){return ispolyfactoredorexpandedform_factor(t,e)},ispolyfactoredorexpandedform_factor=function(t,e){if(car(t)===symbol(MULTIPLY)){for(t=cdr(t);iscons(t);){if(DEBUG&&console.log("ispolyfactoredorexpandedform_factor testing "+car(t)),!ispolyfactoredorexpandedform_power(car(t),e))return DEBUG&&console.log("... tested negative:"+car(t)),0;t=cdr(t)}return 1}return ispolyfactoredorexpandedform_power(t,e)},ispolyfactoredorexpandedform_power=function(t,e){return car(t)===symbol(POWER)?(DEBUG&&console.log("ispolyfactoredorexpandedform_power (isposint(caddr(p)) "+(isposint(caddr(t)),DEBUG?console.log("ispolyfactoredorexpandedform_power ispolyexpandedform_expr(cadr(p), x)) "+ispolyexpandedform_expr(cadr(t),e)):void 0)),isposint(caddr(t))&&ispolyexpandedform_expr(cadr(t),e)):(DEBUG&&console.log("ispolyfactoredorexpandedform_power not a power, testing if this is exp form: "+t),ispolyexpandedform_expr(t,e))},ispolyexpandedform=function(t,e){return Find(t,e)?ispolyexpandedform_expr(t,e):0},ispolyexpandedform_expr=function(t,e){if(car(t)===symbol(ADD)){for(t=cdr(t);iscons(t);){if(!ispolyexpandedform_term(car(t),e))return 0;t=cdr(t)}return 1}return ispolyexpandedform_term(t,e)},ispolyexpandedform_term=function(t,e){if(car(t)===symbol(MULTIPLY)){for(t=cdr(t);iscons(t);){if(!ispolyexpandedform_factor(car(t),e))return 0;t=cdr(t)}return 1}return ispolyexpandedform_factor(t,e)},ispolyexpandedform_factor=function(t,e){return equal(t,e)?1:car(t)===symbol(POWER)&&equal(cadr(t),e)?isposint(caddr(t))?1:0:Find(t,e)?0:1},isnegativeterm=function(t){return isnegativenumber(t)?1:car(t)===symbol(MULTIPLY)&&isnegativenumber(cadr(t))?1:0},hasNegativeRationalExponent=function(t){return car(t)===symbol(POWER)&&isrational(car(cdr(cdr(t))))&&isnegativenumber(car(cdr(t)))?(DEBUG_IS&&console.log("hasNegativeRationalExponent: "+t.toString()+" has imaginary component"),1):(DEBUG_IS&&console.log("hasNegativeRationalExponent: "+t.toString()+" has NO imaginary component"),0)},isimaginarynumberdouble=function(t){return car(t)===symbol(MULTIPLY)&&3===length(t)&&isdouble(cadr(t))&&hasNegativeRationalExponent(caddr(t))||equal(t,imaginaryunit)?1:0},isimaginarynumber=function(t){return car(t)===symbol(MULTIPLY)&&3===length(t)&&isNumericAtom(cadr(t))&&equal(caddr(t),imaginaryunit)||equal(t,imaginaryunit)||hasNegativeRationalExponent(caddr(t))?(DEBUG_IS&&console.log("isimaginarynumber: "+t.toString()+" is imaginary number"),1):(DEBUG_IS&&console.log("isimaginarynumber: "+t.toString()+" isn't an imaginary number"),0)},iscomplexnumberdouble=function(t){return car(t)===symbol(ADD)&&3===length(t)&&isdouble(cadr(t))&&isimaginarynumberdouble(caddr(t))||isimaginarynumberdouble(t)?1:0},iscomplexnumber=function(t){return car(t)===symbol(ADD)&&3===length(t)&&isNumericAtom(cadr(t))&&isimaginarynumber(caddr(t))||isimaginarynumber(t)?(DEBUG&&console.log("iscomplexnumber: "+t.toString()+" is imaginary number"),1):(DEBUG&&console.log("iscomplexnumber: "+t.toString()+" is imaginary number"),0)},iseveninteger=function(t){return isinteger(t)&&t.q.a.isEven()?1:0},isnegative=function(t){return car(t)===symbol(ADD)&&isnegativeterm(cadr(t))?1:isnegativeterm(t)?1:0},issymbolic=function(t){if(issymbol(t))return 1;for(;iscons(t);){if(issymbolic(car(t)))return 1;t=cdr(t)}return 0},isintegerfactor=function(t){return isinteger(t)||car(t)===symbol(POWER)&&isinteger(cadr(t))&&isinteger(caddr(t))?1:0},isNumberOneOverSomething=function(t){return isfraction(t)&&MEQUAL(t.q.a.abs(),1)?1:0},isoneover=function(t){return car(t)===symbol(POWER)&&isminusone(caddr(t))?1:0},isfraction=function(t){return t.k!==NUM||MEQUAL(t.q.b,1)?0:1},equaln=function(t,e){switch(t.k){case NUM:if(MEQUAL(t.q.a,e)&&MEQUAL(t.q.b,1))return 1;break;case DOUBLE:if(t.d===e)return 1}return 0},equalq=function(t,e,n){switch(t.k){case NUM:if(MEQUAL(t.q.a,e)&&MEQUAL(t.q.b,n))return 1;break;case DOUBLE:if(t.d===e/n)return 1}return 0},isoneovertwo=function(t){return equalq(t,1,2)?1:0},isminusoneovertwo=function(t){return equalq(t,-1,2)?1:0},isoneoversqrttwo=function(t){return car(t)===symbol(POWER)&&equaln(cadr(t),2)&&equalq(caddr(t),-1,2)?1:0},isminusoneoversqrttwo=function(t){return car(t)===symbol(MULTIPLY)&&equaln(cadr(t),-1)&&isoneoversqrttwo(caddr(t))&&3===length(t)?1:0},isfloating=function(t){if(t.k===DOUBLE||t===symbol(FLOATF))return 1;for(;iscons(t);){if(isfloating(car(t)))return 1;t=cdr(t)}return 0},isimaginaryunit=function(t){return equal(t,imaginaryunit)?1:0},isquarterturn=function(t){var e,n;if(n=0,e=0,car(t)!==symbol(MULTIPLY))return 0;if(equal(cadr(t),imaginaryunit))return caddr(t)!==symbol(PI)?0:3!==length(t)?0:2;if(!isNumericAtom(cadr(t)))return 0;if(!equal(caddr(t),imaginaryunit))return 0;if(cadddr(t)!==symbol(PI))return 0;if(4!==length(t))return 0;if(push(cadr(t)),push_integer(2),multiply(),n=pop_integer(),isNaN(n))return 0;switch(n<1&&(e=1,n=-n),n%4){case 0:n=1;break;case 1:n=e?4:3;break;case 2:n=2;break;case 3:n=e?3:4}return n},isnpi=function(t){var e;return e=0,t===symbol(PI)?2:car(t)===symbol(MULTIPLY)&&isNumericAtom(cadr(t))&&caddr(t)===symbol(PI)&&3===length(t)?(0,push(cadr(t)),push_integer(2),multiply(),e=pop_integer(),isNaN(e)?0:e=e<0?4- -e%4:1+(e-1)%4):0},$.isZeroAtomOrTensor=isZeroAtomOrTensor,$.isnegativenumber=isnegativenumber,$.isplusone=isplusone,$.isminusone=isminusone,$.isinteger=isinteger,$.isnonnegativeinteger=isnonnegativeinteger,$.isposint=isposint,$.isnegativeterm=isnegativeterm,$.isimaginarynumber=isimaginarynumber,$.iscomplexnumber=iscomplexnumber,$.iseveninteger=iseveninteger,$.isnegative=isnegative,$.issymbolic=issymbolic,$.isintegerfactor=isintegerfactor,$.isoneover=isoneover,$.isfraction=isfraction,$.isoneoversqrttwo=isoneoversqrttwo,$.isminusoneoversqrttwo=isminusoneoversqrttwo,$.isfloating=isfloating,$.isimaginaryunit=isimaginaryunit,$.isquarterturn=isquarterturn,$.isnpi=isnpi,Eval_isprime=function(){return push(cadr(p1)),Eval(),p1=pop(),isnonnegativeinteger(p1)&&mprime(p1.q.a)?push_integer(1):push_integer(0)},Eval_laguerre=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(0):push(p2),laguerre()},laguerre=function(){var t;return 0,save(),p3=pop(),p2=pop(),p1=pop(),push(p2),(t=pop_integer())<0||isNaN(t)?(push_symbol(LAGUERRE),push(p1),push(p2),push(p3),list(4),void restore()):(issymbol(p1)?laguerre2(t):(p4=p1,p1=symbol(SECRETX),laguerre2(t),p1=p4,push(symbol(SECRETX)),push(p1),subst(),Eval()),restore())},laguerre2=function(t){var e,n,r,o;for(e=0,push_integer(1),push_integer(0),p6=pop(),o=[],e=n=0,r=t;0<=r?n<r:n>r;e=0<=r?++n:--n)p5=p6,p6=pop(),push_integer(2*e+1),push(p1),subtract(),push(p3),add(),push(p6),multiply(),push_integer(e),push(p3),add(),push(p5),multiply(),subtract(),push_integer(e+1),o.push(divide());return o},Eval_lcm=function(){var t;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),t=[];iscons(p1);)push(car(p1)),Eval(),lcm(),t.push(p1=cdr(p1));return t},lcm=function(){var t;return t=expanding,save(),yylcm(),restore(),expanding=t},yylcm=function(){return expanding=1,p2=pop(),p1=pop(),push(p1),push(p2),gcd(),push(p1),divide(),push(p2),divide(),inverse()},Eval_leading=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p1=pop())===symbol(NIL)?guess():push(p1),leading()},leading=function(){return save(),p2=pop(),p1=pop(),push(p1),push(p2),degree(),p3=pop(),push(p1),push(p2),push(p3),power(),divide(),push(p2),filter(),restore()},Eval_legendre=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(0):push(p2),legendre()},legendre=function(){return save(),__legendre(),restore()},__legendre=function(){var t,e;return 0,0,p3=pop(),p2=pop(),p1=pop(),push(p2),e=pop_integer(),push(p3),t=pop_integer(),e<0||isNaN(e)||t<0||isNaN(t)?(push_symbol(LEGENDRE),push(p1),push(p2),push(p3),void list(4)):(issymbol(p1)?__legendre2(e,t):(p4=p1,p1=symbol(SECRETX),__legendre2(e,t),p1=p4,push(symbol(SECRETX)),push(p1),subst(),Eval()),__legendre3(t))},__legendre2=function(t,e){var n,r,o,i,a,s;for(n=0,push_integer(1),push_integer(0),p6=pop(),n=o=0,i=t;0<=i?o<i:o>i;n=0<=i?++o:--o)p5=p6,p6=pop(),push_integer(2*n+1),push(p1),multiply(),push(p6),multiply(),push_integer(n),push(p5),multiply(),subtract(),push_integer(n+1),divide();for(s=[],n=r=0,a=e;0<=a?r<a:r>a;n=0<=a?++r:--r)push(p1),s.push(derivative());return s},__legendre3=function(t){if(0!==t)return car(p1)===symbol(COS)?(push(cadr(p1)),sine(),square()):car(p1)===symbol(SIN)?(push(cadr(p1)),cosine(),square()):(push_integer(1),push(p1),square(),subtract()),push_integer(t),push_rational(1,2),multiply(),power(),multiply(),t%2?negate():void 0},list=function(t){var e,n,r;for(0,push(symbol(NIL)),r=[],e=0,n=t;0<=n?e<n:e>n;0<=n?++e:--e)r.push(cons());return r},Eval_log=function(){return push(cadr(p1)),Eval(),logarithm()},logarithm=function(){return save(),yylog(),restore()},yylog=function(){var t;if(t=0,(p1=pop())!==symbol(E))if(equaln(p1,1))push_integer(0);else{if(isnegativenumber(p1))return push(p1),negate(),logarithm(),push(imaginaryunit),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),multiply(),void add();if(isdouble(p1))return t=Math.log(p1.d),void push_double(t);if(isfraction(p1))return push(p1),numerator(),logarithm(),push(p1),denominator(),logarithm(),void subtract();if(car(p1)===symbol(POWER))return push(caddr(p1)),push(cadr(p1)),logarithm(),void multiply();if(car(p1)!==symbol(MULTIPLY))return push_symbol(LOG),push(p1),list(2);for(push_integer(0),p1=cdr(p1);iscons(p1);)push(car(p1)),logarithm(),add(),p1=cdr(p1)}else push_integer(1)},Eval_lookup=function(){return p1=cadr(p1),iscons(p1)||cadr(p1).k!==SYM||(p1=get_binding(p1)),push(p1)},madd=function(t,e){return t.add(e)},msub=function(t,e){return t.subtract(e)},addf=function(t,e){return t.add(e)},subf=function(t,e){return t.subtract(e)},ucmp=function(t,e){return t.compareAbs(e)},mgcd=function(t,e){return bigInt.gcd(t,e)},new_string=function(t){return save(),(p1=new U).k=STR,p1.str=t,push(p1),restore()},out_of_memory=function(){return stop("out of memory")},push_zero_matrix=function(t,e){return push(alloc_tensor(t*e)),stack[tos-1].tensor.ndim=2,stack[tos-1].tensor.dim[0]=t,stack[tos-1].tensor.dim[1]=e},push_identity_matrix=function(t){var e,n,r;for(push_zero_matrix(t,t),e=0,e=n=0,r=t;0<=r?n<r:n>r;e=0<=r?++n:--n)stack[tos-1].tensor.elem[e*t+e]=one;return check_tensor_dimensions(stack[tos-1])},push_cars=function(t){var e;for(e=[];iscons(t);)push(car(t)),e.push(t=cdr(t));return e},peek=function(){return save(),p1=pop(),push(p1),restore()},equal=function(t,e){return 0===cmp_expr(t,e)?1:0},lessp=function(t,e){return cmp_expr(t,e)<0?1:0},sign=function(t){return t<0?-1:t>0?1:0},cmp_expr=function(t,e){var n;if(n=0,t===e)return 0;if(t===symbol(NIL))return-1;if(e===symbol(NIL))return 1;if(isNumericAtom(t)&&isNumericAtom(e))return sign(compare_numbers(t,e));if(isNumericAtom(t))return-1;if(isNumericAtom(e))return 1;if(isstr(t)&&isstr(e))return sign(strcmp(t.str,e.str));if(isstr(t))return-1;if(isstr(e))return 1;if(issymbol(t)&&issymbol(e))return sign(strcmp(get_printname(t),get_printname(e)));if(issymbol(t))return-1;if(issymbol(e))return 1;if(istensor(t)&&istensor(e))return compare_tensors(t,e);if(istensor(t))return-1;if(istensor(e))return 1;for(;iscons(t)&&iscons(e);){if(0!==(n=cmp_expr(car(t),car(e))))return n;t=cdr(t),e=cdr(e)}return iscons(e)?-1:iscons(t)?1:0},length=function(t){var e;for(e=0;iscons(t);)t=cdr(t),e++;return e},unique=function(t){return save(),p1=symbol(NIL),p2=symbol(NIL),unique_f(t),p2!==symbol(NIL)&&(p1=symbol(NIL)),t=p1,restore(),t},unique_f=function(t){if(isstr(t))p1===symbol(NIL)?p1=t:t!==p1&&(p2=t);else for(;iscons(t);){if(unique_f(car(t)),p2!==symbol(NIL))return;t=cdr(t)}},ssqrt=function(){return push_rational(1,2),power()},yyexpand=function(){var t;return t=expanding,expanding=1,Eval(),expanding=t},exponential=function(){return push_symbol(E),swap(),power()},square=function(){return push_integer(2),power()},sort_stack=function(t){var e,n;return e=tos-t,(n=stack.slice(e,e+t)).sort(cmp_expr),stack=stack.slice(0,e).concat(n).concat(stack.slice(e+t))},$.equal=equal,$.length=length,mmul=function(t,e){return t.multiply(e)},mdiv=function(t,e){return t.divide(e)},mmod=function(t,e){return t.mod(e)},mdivrem=function(t,e){var n;return[(n=t.divmod(e)).quotient,n.remainder]},Eval_mod=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),mod()},mod=function(){var t;return t=0,save(),p2=pop(),p1=pop(),isZeroAtomOrTensor(p2)&&stop("mod function: divide by zero"),isNumericAtom(p1)&&isNumericAtom(p2)?(isdouble(p1)&&(push(p1),t=pop_integer(),isNaN(t)&&stop("mod function: cannot convert float value to integer"),push_integer(t),p1=pop()),isdouble(p2)&&(push(p2),t=pop_integer(),isNaN(t)&&stop("mod function: cannot convert float value to integer"),push_integer(t),p2=pop()),isinteger(p1)&&isinteger(p2)||stop("mod function: integer arguments expected"),(p3=new U).k=NUM,p3.q.a=mmod(p1.q.a,p2.q.a),p3.q.b=mint(1),push(p3),restore()):(push_symbol(MOD),push(p1),push(p2),list(3),void restore())},mpow=function(t,e){return t.pow(e)},mprime=function(t){return t.isProbablePrime()},mroot=function(t,e){var n,r,o,i,a,s,u;for(t=t.abs(),n=0,0,o=0,0===e&&stop("root index is zero"),o=0;t.shiftRight(o)>0;)o++;if(0===o)return mint(0);for(o=Math.floor((o-1)/e),r=Math.floor(o/32+1),s=bigInt(r),n=i=0,a=r;0<=a?i<a:i>a;n=0<=a?++i:--i)s=s.and(bigInt(1).shiftLeft(n).not());for(;o>=0;){switch(s=s.or(bigInt(1).shiftLeft(o)),u=mpow(s,e),mcmp(u,t)){case 0:return s;case 1:s=s.and(bigInt(1).shiftLeft(o).not())}o--}return 0},Eval_multiply=function(){var t;for(push(cadr(p1)),Eval(),p1=cddr(p1),t=[];iscons(p1);)push(car(p1)),Eval(),multiply(),t.push(p1=cdr(p1));return t},multiply=function(){return esc_flag&&stop("escape key stop"),isNumericAtom(stack[tos-2])&&isNumericAtom(stack[tos-1])?multiply_numbers():(save(),yymultiply(),restore())},yymultiply=function(){var t,e,n,r,o,i;if(0,e=0,0,p2=pop(),p1=pop(),t=tos,isZeroAtomOrTensor(p1)||isZeroAtomOrTensor(p2))evaluatingAsFloats?push_double(0):push(zero);else if(expanding&&isadd(p1))for(p1=cdr(p1),evaluatingAsFloats?push_double(0):push(zero);iscons(p1);)push(car(p1)),push(p2),multiply(),add(),p1=cdr(p1);else if(expanding&&isadd(p2))for(p2=cdr(p2),evaluatingAsFloats?push_double(0):push(zero);iscons(p2);)push(p1),push(car(p2)),multiply(),add(),p2=cdr(p2);else{if(!istensor(p1)&&istensor(p2))return push(p1),push(p2),void scalar_times_tensor();if(istensor(p1)&&!istensor(p2))return push(p1),push(p2),void tensor_times_scalar();for(car(p1)===symbol(MULTIPLY)?p1=cdr(p1):(push(p1),list(1),p1=pop()),car(p2)===symbol(MULTIPLY)?p2=cdr(p2):(push(p2),list(1),p2=pop()),isNumericAtom(car(p1))&&isNumericAtom(car(p2))?(push(car(p1)),push(car(p2)),multiply_numbers(),p1=cdr(p1),p2=cdr(p2)):isNumericAtom(car(p1))?(push(car(p1)),p1=cdr(p1)):isNumericAtom(car(p2))?(push(car(p2)),p2=cdr(p2)):evaluatingAsFloats?push_double(1):push(one),parse_p1(),parse_p2();iscons(p1)&&iscons(p2);)if(caar(p1)!==symbol(OPERATOR)||caar(p2)!==symbol(OPERATOR))switch(cmp_expr(p3,p4)){case-1:push(car(p1)),p1=cdr(p1),parse_p1();break;case 1:push(car(p2)),p2=cdr(p2),parse_p2();break;case 0:combine_factors(t),p1=cdr(p1),p2=cdr(p2),parse_p1(),parse_p2();break;default:stop("internal error 2")}else push_symbol(OPERATOR),push(cdar(p1)),push(cdar(p2)),append(),cons(),p1=cdr(p1),p2=cdr(p2),parse_p1(),parse_p2();for(;iscons(p1);)push(car(p1)),p1=cdr(p1);for(;iscons(p2);)push(car(p2)),p2=cdr(p2);if(__normalize_radical_factors(t),expanding)for(e=r=o=t,i=tos;o<=i?r<i:r>i;e=o<=i?++r:--r)if(isadd(stack[e]))return void multiply_all(tos-t);if(1!==(n=tos-t)){if(!isrational(stack[t])||!equaln(stack[t],1))return list(n),p7=pop(),push_symbol(MULTIPLY),push(p7),cons();2===n?(p7=pop(),pop(),push(p7)):(stack[t]=symbol(MULTIPLY),list(n))}}},parse_p1=function(){if(p3=car(p1),p5=evaluatingAsFloats?one_as_double:one,car(p3)===symbol(POWER))return p5=caddr(p3),p3=cadr(p3)},parse_p2=function(){if(p4=car(p2),p6=evaluatingAsFloats?one_as_double:one,car(p4)===symbol(POWER))return p6=caddr(p4),p4=cadr(p4)},combine_factors=function(t){return push(p4),push(p5),push(p6),add(),power(),p7=pop(),isNumericAtom(p7)?(push(stack[t]),push(p7),multiply_numbers(),stack[t]=pop()):car(p7)===symbol(MULTIPLY)&&isNumericAtom(cadr(p7))&&cdddr(p7)===symbol(NIL)?(push(stack[t]),push(cadr(p7)),multiply_numbers(),stack[t]=pop(),push(caddr(p7))):push(p7)},gp=[[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[0,0,1,-6,-7,-8,-3,-4,-5,13,14,15,-16,9,10,11,-12],[0,0,6,-1,-11,10,-2,-15,14,12,-5,4,-9,16,-8,7,-13],[0,0,7,11,-1,-9,15,-2,-13,5,12,-3,-10,8,16,-6,-14],[0,0,8,-10,9,-1,-14,13,-2,-4,3,12,-11,-7,6,16,-15],[0,0,3,2,15,-14,1,11,-10,16,-8,7,13,12,-5,4,9],[0,0,4,-15,2,13,-11,1,9,8,16,-6,14,5,12,-3,10],[0,0,5,14,-13,2,10,-9,1,-7,6,16,15,-4,3,12,11],[0,0,13,12,-5,4,16,-8,7,-1,-11,10,-3,-2,-15,14,-6],[0,0,14,5,12,-3,8,16,-6,11,-1,-9,-4,15,-2,-13,-7],[0,0,15,-4,3,12,-7,6,16,-10,9,-1,-5,-14,13,-2,-8],[0,0,16,-9,-10,-11,-13,-14,-15,-3,-4,-5,1,-6,-7,-8,2],[0,0,9,-16,8,-7,-12,5,-4,-2,-15,14,6,-1,-11,10,3],[0,0,10,-8,-16,6,-5,-12,3,15,-2,-13,7,11,-1,-9,4],[0,0,11,7,-6,-16,4,-3,-12,-14,13,-2,8,-10,9,-1,5],[0,0,12,13,14,15,9,10,11,-6,-7,-8,-2,-3,-4,-5,-1]],combine_gammas=function(t){var e;if((e=gp[Math.floor(p1.gamma)][Math.floor(p2.gamma)])<0&&(e=-e,push(stack[t]),negate(),stack[t]=pop()),e>1)return push(_gamma[e])},multiply_noexpand=function(){var t;return t=expanding,expanding=0,multiply(),expanding=t},multiply_all=function(t){var e,n,r,o;if(n=0,1!==t){if(0!==t){for(push(stack[e=tos-t]),n=r=1,o=t;1<=o?r<o:r>o;n=1<=o?++r:--r)push(stack[e+n]),multiply();return stack[e]=pop(),moveTos(e+1)}push(evaluatingAsFloats?one_as_double:one)}},multiply_all_noexpand=function(t){var e;return e=expanding,expanding=0,multiply_all(t),expanding=e},divide=function(){return isNumericAtom(stack[tos-2])&&isNumericAtom(stack[tos-1])?divide_numbers():(inverse(),multiply())},inverse=function(){return isNumericAtom(stack[tos-1])?invert_number():(push_integer(-1),power())},reciprocate=function(){return inverse()},negate=function(){return isNumericAtom(stack[tos-1])?negate_number():(evaluatingAsFloats?push_double(-1):push_integer(-1),multiply())},negate_expand=function(){var t;return t=expanding,expanding=1,negate(),expanding=t},negate_noexpand=function(){var t;return t=expanding,expanding=0,negate(),expanding=t},__normalize_radical_factors=function(t){var e,n,r,o,i,a,s,u,p,c;if(e=0,!(isplusone(stack[t])||isminusone(stack[t])||isdouble(stack[t]))){for(e=o=i=t+1,a=tos;(i<=a?o<a:o>a)&&!__is_radical_number(stack[e]);e=i<=a?++o:--o);if(e!==tos){for(save(),push(stack[t]),mp_numerator(),p1=pop(),e=n=s=t+1,u=tos;(s<=u?n<u:n>u)&&(!isplusone(p1)&&!isminusone(p1));e=s<=u?++n:--n)__is_radical_number(stack[e])&&(p3=cadr(stack[e]),p4=caddr(stack[e]),isnegativenumber(p4)&&(push(p1),push(p3),divide(),p5=pop(),isinteger(p5)&&(p1=p5,push_symbol(POWER),push(p3),push(evaluatingAsFloats?one_as_double:one),push(p4),add(),list(3),stack[e]=pop())));for(push(stack[t]),mp_denominator(),p2=pop(),e=r=p=t+1,c=tos;(p<=c?r<c:r>c)&&!isplusone(p2);e=p<=c?++r:--r)if(__is_radical_number(stack[e])&&(p3=cadr(stack[e]),p4=caddr(stack[e]),!isnegativenumber(p4)&&(push(p2),push(p3),divide(),p5=pop(),isinteger(p5)))){if(p2=p5,push_symbol(POWER),push(p3),push(p4),push(one),subtract(),dontCreateNewRadicalsInDenominatorWhenEvalingMultiplication&&isinteger(p3)&&!isinteger(stack[tos-1])&&isnegativenumber(stack[tos-1])){pop(),pop(),pop(),push(p1),push(p3),divide(),p1=pop();break}list(3),stack[e]=pop()}return push(p1),push(p2),divide(),stack[t]=pop(),restore()}}},__is_radical_number=function(t){return car(t)===symbol(POWER)&&isNumericAtom(cadr(t))&&isNumericAtom(caddr(t))&&!isminusone(cadr(t))?1:0},NROOTS_YMAX=101,NROOTS_DELTA=1e-6,NROOTS_EPSILON=1e-9,NROOTS_ABS=function(t){return Math.sqrt(t.r*t.r+t.i*t.i)},theRandom=0,NROOTS_RANDOM=function(){return 4*Math.random()-2},numericRootOfPolynomial=function(){function t(){}return t.prototype.r=0,t.prototype.i=0,t}(),nroots_a=new numericRootOfPolynomial,nroots_b=new numericRootOfPolynomial,nroots_x=new numericRootOfPolynomial,nroots_y=new numericRootOfPolynomial,nroots_fa=new numericRootOfPolynomial,nroots_fb=new numericRootOfPolynomial,nroots_dx=new numericRootOfPolynomial,nroots_df=new numericRootOfPolynomial,nroots_c=[],initNRoots=o=0,ref=NROOTS_YMAX;0<=ref?o<ref:o>ref;initNRoots=0<=ref?++o:--o)nroots_c[initNRoots]=new numericRootOfPolynomial;for(Eval_nroots=function(){var t,e,n,r,o,i,a,s,u;for(0,e=0,o=0,a=0,push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),p2=pop(),p1=pop(),ispolyexpandedform(p1,p2)||stop("nroots: polynomial?"),t=tos,push(p1),push(p2),(a=coeff())>NROOTS_YMAX&&stop("nroots: degree?"),e=n=0,s=a;0<=s?n<s:n>s;e=0<=s?++n:--n)push(stack[t+e]),real(),yyfloat(),Eval(),p1=pop(),push(stack[t+e]),imag(),yyfloat(),Eval(),p2=pop(),isdouble(p1)&&isdouble(p2)||stop("nroots: coefficients?"),nroots_c[e].r=p1.d,nroots_c[e].i=p2.d;for(moveTos(t),monic(a),o=r=a;r>1;o=r+=-1)findroot(o),Math.abs(nroots_a.r)<NROOTS_DELTA&&(nroots_a.r=0),Math.abs(nroots_a.i)<NROOTS_DELTA&&(nroots_a.i=0),push_double(nroots_a.r),push_double(nroots_a.i),push(imaginaryunit),multiply(),add(),NROOTS_divpoly(o);if((a=tos-t)>1){for(sort_stack(a),(p1=alloc_tensor(a)).tensor.ndim=1,p1.tensor.dim[0]=a,e=i=0,u=a;0<=u?i<u:i>u;e=0<=u?++i:--i)p1.tensor.elem[e]=stack[t+e];return moveTos(t),push(p1)}},monic=function(t){var e,n,r,o;for(n=0,0,nroots_y.r=nroots_c[t-1].r,nroots_y.i=nroots_c[t-1].i,o=nroots_y.r*nroots_y.r+nroots_y.i*nroots_y.i,n=e=0,r=t-1;0<=r?e<r:e>r;n=0<=r?++e:--e)nroots_c[n].r=(nroots_c[n].r*nroots_y.r+nroots_c[n].i*nroots_y.i)/o,nroots_c[n].i=(nroots_c[n].i*nroots_y.r-nroots_c[n].r*nroots_y.i)/o;return nroots_c[t-1].r=1,nroots_c[t-1].i=0},findroot=function(t){var e,n,r,o;if(0,0,o=0,NROOTS_ABS(nroots_c[0])<NROOTS_DELTA)return nroots_a.r=0,void(nroots_a.i=0);for(e=0;e<100;++e)for(nroots_a.r=NROOTS_RANDOM(),nroots_a.i=NROOTS_RANDOM(),compute_fa(t),nroots_b.r=nroots_a.r,nroots_b.i=nroots_a.i,nroots_fb.r=nroots_fa.r,nroots_fb.i=nroots_fa.i,nroots_a.r=NROOTS_RANDOM(),nroots_a.i=NROOTS_RANDOM(),n=0;n<1e3;++n){if(compute_fa(t),r=NROOTS_ABS(nroots_fa),DEBUG&&console.log("nrabs: "+r),r<NROOTS_EPSILON)return;if(NROOTS_ABS(nroots_fa)<NROOTS_ABS(nroots_fb)&&(nroots_x.r=nroots_a.r,nroots_x.i=nroots_a.i,nroots_a.r=nroots_b.r,nroots_a.i=nroots_b.i,nroots_b.r=nroots_x.r,nroots_b.i=nroots_x.i,nroots_x.r=nroots_fa.r,nroots_x.i=nroots_fa.i,nroots_fa.r=nroots_fb.r,nroots_fa.i=nroots_fb.i,nroots_fb.r=nroots_x.r,nroots_fb.i=nroots_x.i),nroots_dx.r=nroots_b.r-nroots_a.r,nroots_dx.i=nroots_b.i-nroots_a.i,nroots_df.r=nroots_fb.r-nroots_fa.r,nroots_df.i=nroots_fb.i-nroots_fa.i,0===(o=nroots_df.r*nroots_df.r+nroots_df.i*nroots_df.i))break;nroots_y.r=(nroots_dx.r*nroots_df.r+nroots_dx.i*nroots_df.i)/o,nroots_y.i=(nroots_dx.i*nroots_df.r-nroots_dx.r*nroots_df.i)/o,nroots_a.r=nroots_b.r-(nroots_y.r*nroots_fb.r-nroots_y.i*nroots_fb.i),nroots_a.i=nroots_b.i-(nroots_y.r*nroots_fb.i+nroots_y.i*nroots_fb.r)}return stop("nroots: convergence error")},compute_fa=function(t){var e,n,r,o,i;for(n=0,i=0,nroots_x.r=nroots_a.r,nroots_x.i=nroots_a.i,nroots_fa.r=nroots_c[0].r+nroots_c[1].r*nroots_x.r-nroots_c[1].i*nroots_x.i,nroots_fa.i=nroots_c[0].i+nroots_c[1].r*nroots_x.i+nroots_c[1].i*nroots_x.r,o=[],n=e=2,r=t;2<=r?e<r:e>r;n=2<=r?++e:--e)i=nroots_a.r*nroots_x.r-nroots_a.i*nroots_x.i,nroots_x.i=nroots_a.r*nroots_x.i+nroots_a.i*nroots_x.r,nroots_x.r=i,nroots_fa.r+=nroots_c[n].r*nroots_x.r-nroots_c[n].i*nroots_x.i,o.push(nroots_fa.i+=nroots_c[n].r*nroots_x.i+nroots_c[n].i*nroots_x.r);return o},NROOTS_divpoly=function(t){var e,n,r,o,i,a;for(r=0,r=e=o=t-1;o<=0?e<0:e>0;r=o<=0?++e:--e)nroots_c[r-1].r+=nroots_c[r].r*nroots_a.r-nroots_c[r].i*nroots_a.i,nroots_c[r-1].i+=nroots_c[r].i*nroots_a.r+nroots_c[r].r*nroots_a.i;for(NROOTS_ABS(nroots_c[0])>NROOTS_DELTA&&stop("nroots: residual error"),a=[],r=n=0,i=t-1;0<=i?n<i:n>i;r=0<=i?++n:--n)nroots_c[r].r=nroots_c[r+1].r,a.push(nroots_c[r].i=nroots_c[r+1].i);return a},Eval_numerator=function(){return push(cadr(p1)),Eval(),numerator()},numerator=function(){var t,e;if(t=0,e=pop(),car(e)===symbol(ADD)&&(push(e),rationalize(),e=pop()),car(e)!==symbol(MULTIPLY)||isplusone(car(cdr(e))))return isrational(e)?(push(e),mp_numerator()):car(e)===symbol(POWER)&&isnegativeterm(caddr(e))?push(one):push(e);for(t=tos,e=cdr(e);iscons(e);)push(car(e)),numerator(),e=cdr(e);return multiply_all(tos-t)},Eval_outer=function(){var t;for(p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),t=[];iscons(p1);)push(car(p1)),Eval(),outer(),t.push(p1=cdr(p1));return t},outer=function(){return save(),p2=pop(),p1=pop(),istensor(p1)&&istensor(p2)?yyouter():(push(p1),push(p2),istensor(p1)?tensor_times_scalar():istensor(p2)?scalar_times_tensor():multiply()),restore()},yyouter=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d;for(t=0,n=0,o=0,0,0,(s=p1.tensor.ndim+p2.tensor.ndim)>MAXDIM&&stop("outer: rank of result exceeds maximum"),u=p1.tensor.nelem*p2.tensor.nelem,(p3=alloc_tensor(u)).tensor.ndim=s,t=e=0,p=p1.tensor.ndim;0<=p?e<p:e>p;t=0<=p?++e:--e)p3.tensor.dim[t]=p1.tensor.dim[t];for(n=t,t=r=0,c=p2.tensor.ndim;0<=c?r<c:r>c;t=0<=c?++r:--r)p3.tensor.dim[n+t]=p2.tensor.dim[t];for(o=0,t=i=0,l=p1.tensor.nelem;0<=l?i<l:i>l;t=0<=l?++i:--i)for(n=a=0,d=p2.tensor.nelem;0<=d?a<d:a>d;n=0<=d?++a:--a)push(p1.tensor.elem[t]),push(p2.tensor.elem[n]),multiply(),p3.tensor.elem[o++]=pop();return push(p3)},partition=function(){for(save(),p2=pop(),p1=pop(),push_integer(1),p3=pop(),p4=p3,p1=cdr(p1);iscons(p1);)Find(car(p1),p2)?(push(p4),push(car(p1)),multiply(),p4=pop()):(push(p3),push(car(p1)),multiply(),p3=pop()),p1=cdr(p1);return push(p3),push(p4),restore()},Eval_silentpattern=function(){return Eval_pattern(),pop(),push_symbol(NIL)},Eval_pattern=function(){var t,e,n,r,o;return iscons(cdr(p1))||stop("pattern needs at least a template and a transformed version"),t=car(cdr(p1)),(n=car(cdr(cdr(p1))))===symbol(NIL)&&stop("pattern needs at least a template and a transformed version"),o=iscons(cdr(cdr(p1)))?car(cdr(cdr(cdr(p1)))):symbol(NIL),equal(t,n)&&stop("recursive pattern"),r="template: "+print_list(t),r+=" tests: "+print_list(o),DEBUG&&console.log("pattern stringkey: "+r),-1===(e=userSimplificationsInStringForm.indexOf(r))?(userSimplificationsInStringForm.push(r),userSimplificationsInListForm.push(cdr(p1))):(DEBUG&&console.log("pattern already exists, replacing. "+cdr(p1)),userSimplificationsInStringForm[e]=r,userSimplificationsInListForm[e]=cdr(p1)),push_symbol(PATTERN),push(cdr(p1)),list(2)},do_clearPatterns=function(){return userSimplificationsInListForm=[],userSimplificationsInStringForm=[]},Eval_clearpatterns=function(){return do_clearPatterns(),push_symbol(NIL)},Eval_patternsinfo=function(){var t;return""!==(t=patternsinfo())?new_string(t):push_symbol(NIL)},patternsinfo=function(){var t,e,n;for(n="",t=0,e=userSimplificationsInListForm.length;t<e;t++)userSimplificationsInListForm[t],n+=userSimplificationsInListForm+"\n";return n},Eval_polar=function(){return push(cadr(p1)),Eval(),polar()},polar=function(){return evaluatingPolar++,save(),p1=pop(),push(p1),abs(),push(imaginaryunit),push(p1),arg(),multiply(),exponential(),multiply(),evaluatingPolar--,restore()},n_factor_number=0,factor_number=function(){var t;return 0,save(),p1=pop(),equaln(p1,0)||equaln(p1,1)||equaln(p1,-1)?(push(p1),void restore()):(n_factor_number=p1.q.a,t=tos,factor_a(),tos-t>1&&(list(tos-t),push_symbol(MULTIPLY),swap(),cons()),restore())},factor_a=function(){var t,e;for(e=0,n_factor_number.isNegative()&&(n_factor_number=setSignTo(n_factor_number,1),push_integer(-1)),e=t=0;t<1e4;e=++t)if(try_kth_prime(e),0===n_factor_number.compare(1))return;return factor_b()},try_kth_prime=function(t){var e,n,r,o;for(e=0,n=mint(primetab[t]),e=0;;){if(0===n_factor_number.compare(1))return void(e&&push_factor(n,e));if(r=(o=mdivrem(n_factor_number,n))[0],!o[1].isZero())break;e++,n_factor_number=r}if(e&&push_factor(n,e),-1===mcmp(r,n))return push_factor(n_factor_number,1),n_factor_number=mint(1)},factor_b=function(){var t,e,n,r,o,i,a;for(n=0,r=0,t=mint(1),i=mint(5),a=mint(2),n=1,r=1;;){if(mprime(n_factor_number))return push_factor(n_factor_number,1),0;for(;;){if(esc_flag&&stop("esc"),o=msub(a,i),o=setSignTo(o,1),e=mgcd(o,n_factor_number),!MEQUAL(e,1)){if(push_factor(e,1),0===mcmp(e,n_factor_number))return-1;o=mdiv(n_factor_number,e),i=o=mmod(i,n_factor_number=o),a=o=mmod(a,n_factor_number);break}0==--n&&(a=i,n=r*=2),o=mmul(i,i),i=madd(o,t),i=o=mmod(i,n_factor_number)}}},push_factor=function(t,e){if((p1=new U).k=NUM,p1.q.a=t,p1.q.b=mint(1),push(p1),e>1)return push_symbol(POWER),swap(),(p1=new U).k=NUM,p1.q.a=mint(e),p1.q.b=mint(1),push(p1),list(3)},DEBUG_POWER=!1,Eval_power=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),power()},power=function(){return save(),yypower(),restore()},yypower=function(){var t,e,n,r,o,i,a;if(a=0,p2=pop(),p1=pop(),r=p2,n=p1,DEBUG_POWER&&console.log("POWER: "+p1+" ^ "+p2),equal(p1,one)||isZeroAtomOrTensor(p2))return evaluatingAsFloats?push_double(1):push(one),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(equal(p2,one))return push(p1),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(isminusone(p1)&&isminusone(p2))return evaluatingAsFloats?push_double(1):push(one),negate(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(isminusone(p1)&&isoneovertwo(p2))return push(imaginaryunit),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(isminusone(p1)&&isminusoneovertwo(p2))return push(imaginaryunit),negate(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(isminusone(p1)&&!isdouble(p1)&&isrational(p2)&&!isinteger(p2)&&ispositivenumber(p2)&&!evaluatingAsFloats)return DEBUG_POWER&&console.log("   power: -1 ^ rational"),DEBUG_POWER&&console.log(" trick: p2.q.a , p2.q.b "+p2.q.a+" , "+p2.q.b),p2.q.a<p2.q.b?(push_symbol(POWER),push(p1),push(p2),list(3)):(push_symbol(MULTIPLY),push(p1),push_symbol(POWER),push(p1),push_rational(p2.q.a.mod(p2.q.b),p2.q.b),list(3),list(3),DEBUG_POWER&&console.log(" trick applied : "+stack[tos-1])),rect(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(isrational(p1)&&isrational(p2))return DEBUG_POWER&&console.log("   power: isrational(p1) && isrational(p2)"),push(p1),push(p2),qpow(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(isNumericAtom(p1)&&isNumericAtom(p2))return DEBUG_POWER&&console.log("   power: both base and exponent are either rational or double "),DEBUG_POWER&&console.log("POWER - isNumericAtom(p1) && isNumericAtom(p2)"),push(p1),push(p2),dpow(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(istensor(p1))return DEBUG_POWER&&console.log("   power: istensor(p1) "),power_tensor(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(car(p1)===symbol(ABS)&&iseveninteger(p2)&&!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES))))return DEBUG_POWER&&console.log("   power: even power of absolute of real value "),push(cadr(p1)),push(p2),power(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(p1===symbol(E)&&car(p2)===symbol(LOG))return push(cadr(p2)),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(p1===symbol(E)&&isdouble(p2))return DEBUG_POWER&&console.log("   power: p1 == symbol(E) && isdouble(p2) "),push_double(Math.exp(p2.d)),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(p1===symbol(E)&&0!==Find(p2,imaginaryunit)&&0!==Find(p2,symbol(PI))&&!evaluatingPolar&&(push_symbol(POWER),push(p1),push(p2),list(3),DEBUG_POWER&&console.log("   power: turning complex exponential to rect: "+stack[tos-1]),rect(),e=pop(),0===Find(e,symbol(PI))))return DEBUG_POWER&&console.log("   power: turned complex exponential to rect: "+e),void push(e);if(car(p1)===symbol(MULTIPLY)&&isinteger(p2)){for(DEBUG_POWER&&console.log("   power: (a * b) ^ c  ->  (a ^ c) * (b ^ c) "),p1=cdr(p1),push(car(p1)),push(p2),power(),p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),power(),multiply(),p1=cdr(p1);DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1])}else{if(i=!1,isNumericAtom(cadr(p1))&&(i=sign(compare_numbers(cadr(p1),zero))),car(p1)===symbol(POWER)&&(isinteger(p2)||i))return push(cadr(p1)),push(caddr(p1)),push(p2),multiply(),power(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(t=!1,iseveninteger(caddr(p1))&&(push(caddr(p1)),push(p2),multiply(),o=pop(),isone(o)&&(t=!0)),car(p1)===symbol(POWER)&&t)return DEBUG_POWER&&console.log("   power: car(p1) == symbol(POWER) && b_isEven_and_c_isItsInverse "),push(cadr(p1)),abs(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(expanding&&isadd(p1)&&isNumericAtom(p2)&&(push(p2),(a=pop_integer())>1&&!isNaN(a)))return DEBUG_POWER&&console.log("   power: expanding && isadd(p1) && isNumericAtom(p2) "),power_sum(a),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(1===trigmode&&car(p1)===symbol(SIN)&&iseveninteger(p2))return DEBUG_POWER&&console.log("   power: trigmode == 1 && car(p1) == symbol(SIN) && iseveninteger(p2) "),push_integer(1),push(cadr(p1)),cosine(),push_integer(2),power(),subtract(),push(p2),push_rational(1,2),multiply(),power(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(2===trigmode&&car(p1)===symbol(COS)&&iseveninteger(p2))return DEBUG_POWER&&console.log("   power: trigmode == 2 && car(p1) == symbol(COS) && iseveninteger(p2) "),push_integer(1),push(cadr(p1)),sine(),push_integer(2),power(),subtract(),push(p2),push_rational(1,2),multiply(),power(),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(iscomplexnumber(p1)){if(DEBUG_POWER&&console.log(" power - handling the case (a + ib) ^ n"),isinteger(p2))return push(p1),conjugate(),p3=pop(),push(p3),push(p3),push(p1),multiply(),divide(),isone(p2)||(push(p2),negate(),power()),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]));if(isNumericAtom(p2))return push(p1),abs(),push(p2),power(),push_integer(-1),push(p1),arg(),push(p2),multiply(),evaluatingAsFloats||iscomplexnumberdouble(p1)&&isdouble(p2)?push_double(Math.PI):push(symbol(PI)),divide(),power(),multiply(),avoidCalculatingPowersIntoArctans&&Find(stack[tos-1],symbol(ARCTAN))&&(pop(),push_symbol(POWER),push(p1),push(p2),list(3)),void(DEBUG_POWER&&console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]))}if(!simplify_polar())return DEBUG_POWER&&console.log("   power: nothing can be done "),push_symbol(POWER),push(p1),push(p2),list(3),DEBUG_POWER?console.log("   power of "+n+" ^ "+r+": "+stack[tos-1]):void 0;DEBUG_POWER&&console.log("   power: using simplify_polar")}},power_sum=function(t){var e,n,r,o,i,a,s,u,p,c;for(e=[],n=0,o=0,0,a=length(p1)-1,push_frame(a*(t+1)),p1=cdr(p1),n=r=0,u=a;0<=u?r<u:r>u;n=0<=u?++r:--r){for(o=i=0,p=t;0<=p?i<=p:i>=p;o=0<=p?++i:--i)push(car(p1)),push_integer(o),power(),stack[frame+n*(t+1)+o]=pop();p1=cdr(p1)}for(push_integer(t),factorial(),p1=pop(),n=s=0,c=a;0<=c?s<c:s>c;n=0<=c?++s:--s)e[n]=0;return push(zero),multinomial_sum(a,t,e,0,t),pop_frame(a*(t+1))},multinomial_sum=function(t,e,n,r,o){var i,a,s,u,p,c,l;if(a=0,!(r<t-1)){for(n[r]=o,push(p1),a=s=0,c=t;0<=c?s<c:s>c;a=0<=c?++s:--s)push_integer(n[a]),factorial(),divide();for(a=u=0,l=t;0<=l?u<l:u>l;a=0<=l?++u:--u)push(stack[frame+a*(e+1)+n[a]]),multiply();return add()}for(a=i=0,p=o;0<=p?i<=p:i>=p;a=0<=p?++i:--i)n[r]=a,multinomial_sum(t,e,n,r+1,o-a)},simplify_polar=function(){var t;switch(t=0,t=isquarterturn(p2)){case 0:1;break;case 1:return push_integer(1),1;case 2:return push_integer(-1),1;case 3:return push(imaginaryunit),1;case 4:return push(imaginaryunit),negate(),1}if(car(p2)===symbol(ADD)){for(p3=cdr(p2);iscons(p3)&&!(t=isquarterturn(car(p3)));)p3=cdr(p3);switch(t){case 0:return 0;case 1:push_integer(1);break;case 2:push_integer(-1);break;case 3:push(imaginaryunit);break;case 4:push(imaginaryunit),negate()}return push(p2),push(car(p3)),subtract(),exponential(),multiply(),1}return 0},Eval_prime=function(){return push(cadr(p1)),Eval(),prime()},prime=function(){var t;return t=0,((t=pop_integer())<1||t>MAXPRIMETAB)&&stop("prime: Argument out of range."),t=primetab[t-1],push_integer(t)},power_str="^",codeGen=!1,Eval_print=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),printMode),push(symbol(NIL))},Eval_print2dascii=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_2DASCII),push(symbol(NIL))},Eval_printcomputer=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_COMPUTER),push(symbol(NIL))},Eval_printlatex=function(){return stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_LATEX),push(symbol(NIL))},Eval_printhuman=function(){var t;return t=test_flag,test_flag=0,stringsEmittedByUserPrintouts+=_print(cdr(p1),PRINTMODE_HUMAN),test_flag=t,push(symbol(NIL))},Eval_printlist=function(){var t;return t=_print(cdr(p1),PRINTMODE_LIST),stringsEmittedByUserPrintouts+=t,push(symbol(NIL))},_print=function(t,e){var n,r;for(n="";iscons(t);)push(car(t)),Eval(),p2=pop(),r=printMode,e===PRINTMODE_COMPUTER?(printMode=PRINTMODE_COMPUTER,n=printline(p2),rememberPrint(n,LAST_FULL_PRINT)):e===PRINTMODE_HUMAN?(printMode=PRINTMODE_HUMAN,n=printline(p2),rememberPrint(n,LAST_PLAIN_PRINT)):e===PRINTMODE_2DASCII?(printMode=PRINTMODE_2DASCII,n=print2dascii(p2),rememberPrint(n,LAST_2DASCII_PRINT)):e===PRINTMODE_LATEX?(printMode=PRINTMODE_LATEX,n=printline(p2),rememberPrint(n,LAST_LATEX_PRINT)):e===PRINTMODE_LIST&&(printMode=PRINTMODE_LIST,n=print_list(p2),rememberPrint(n,LAST_LIST_PRINT)),printMode=r,t=cdr(t);return DEBUG&&console.log("emttedString from display: "+stringsEmittedByUserPrintouts),n},rememberPrint=function(t,e){var n;return scan('"'+t+'"'),n=pop(),set_binding(symbol(e),n)},print_str=function(t){return DEBUG&&console.log("emttedString from print_str: "+stringsEmittedByUserPrintouts),t},print_char=function(t){return t},collectLatexStringFromReturnValue=function(t){var e,n,r;return e=printMode,printMode=PRINTMODE_LATEX,n=codeGen,codeGen=!1,r=(r=print_expr(t)).replace(/_/g,"\\_"),printMode=e,codeGen=n,DEBUG&&console.log("emttedString from collectLatexStringFromReturnValue: "+stringsEmittedByUserPrintouts),r},printline=function(t){var e;return e="",e+=print_expr(t)},print_base_of_denom=function(t){var e;return e="",isfraction(t)||car(t)===symbol(ADD)||car(t)===symbol(MULTIPLY)||car(t)===symbol(POWER)||lessp(t,zero)?(e+=print_char("("),e+=print_expr(t),e+=print_char(")")):e+=print_expr(t),e},print_expo_of_denom=function(t){var e;return e="",isfraction(t)||car(t)===symbol(ADD)||car(t)===symbol(MULTIPLY)||car(t)===symbol(POWER)?(e+=print_char("("),e+=print_expr(t),e+=print_char(")")):e+=print_expr(t),e},print_denom=function(t,e){var n;return n="",save(),p1=cadr(t),p2=caddr(t),isminusone(p2)?(n+=print_base_of_denom(p1),restore(),n):(1===e&&(n+=print_char("(")),push(p2),negate(),p2=pop(),n+=print_power(p1,p2),1===e&&(n+=print_char(")")),restore(),n)},print_a_over_b=function(t){var e,n,r;for(e="",flag=0,r=0,n=0,save(),r=0,n=0,p1=cdr(t),p2=car(p1),isrational(p2)?(push(p2),mp_numerator(),absval(),p3=pop(),push(p2),mp_denominator(),p4=pop(),isplusone(p3)||r++,isplusone(p4)||n++,p1=cdr(p1)):(p3=one,p4=one);iscons(p1);)p2=car(p1),is_denominator(p2)?n++:r++,p1=cdr(p1);if(printMode===PRINTMODE_LATEX&&(e+=print_str("\\frac{")),0===r)e+=print_char("1");else for(flag=0,p1=cdr(t),isrational(car(p1))&&(p1=cdr(p1)),isplusone(p3)||(e+=print_factor(p3),flag=1);iscons(p1);)p2=car(p1),is_denominator(p2)?1:(flag&&(e+=print_multiply_sign()),e+=print_factor(p2),flag=1),p1=cdr(p1);for(e+=print_str(printMode===PRINTMODE_LATEX?"}{":printMode!==PRINTMODE_HUMAN||test_flag?"/":" / "),n>1&&printMode!==PRINTMODE_LATEX&&(e+=print_char("(")),flag=0,p1=cdr(t),isrational(car(p1))&&(p1=cdr(p1)),isplusone(p4)||(e+=print_factor(p4),flag=1);iscons(p1);)p2=car(p1),is_denominator(p2)&&(flag&&(e+=print_multiply_sign()),e+=print_denom(p2,n),flag=1),p1=cdr(p1);return n>1&&printMode!==PRINTMODE_LATEX&&(e+=print_char(")")),printMode===PRINTMODE_LATEX&&(e+=print_str("}")),restore(),e},print_expr=function(t){var e;if(e="",isadd(t))for(t=cdr(t),"-"===sign_of_term(car(t))&&(e+=print_str("-")),e+=print_term(car(t)),t=cdr(t);iscons(t);)"+"===sign_of_term(car(t))?e+=print_str(printMode!==PRINTMODE_HUMAN||test_flag?"+":" + "):e+=print_str(printMode!==PRINTMODE_HUMAN||test_flag?"-":" - "),e+=print_term(car(t)),t=cdr(t);else"-"===sign_of_term(t)&&(e+=print_str("-")),e+=print_term(t);return e},sign_of_term=function(t){var e;return e="",car(t)===symbol(MULTIPLY)&&isNumericAtom(cadr(t))&&lessp(cadr(t),zero)?e+="-":isNumericAtom(t)&&lessp(t,zero)?e+="-":e+="+",e},print_term=function(t){var e,n,r,o,i;if(e="",car(t)===symbol(MULTIPLY)&&any_denominators(t))return e+=print_a_over_b(t);if(car(t)===symbol(MULTIPLY)){for(t=cdr(t),isminusone(car(t))&&(t=cdr(t)),i=!1,isNumericAtom(car(t))&&(i=!0),r=!1,printMode===PRINTMODE_LATEX&&iscons(cdr(t))&&isNumberOneOverSomething(car(t))&&(r=!0,n=car(t).q.b.toString()),r?(o=e,e=""):e+=print_factor(car(t)),t=cdr(t);iscons(t);)printMode===PRINTMODE_LATEX&&i&&caar(t)===symbol(POWER)&&isNumericAtom(car(cdr(car(t))))&&(isfraction(car(cdr(cdr(car(t)))))||(e+=" \\cdot ")),e+=print_multiply_sign(),e+=print_factor(car(t)),i=!1,isNumericAtom(car(t))&&(i=!0),t=cdr(t);r&&(e=o+"\\frac{"+e+"}{"+n+"}")}else e+=print_factor(t);return e},print_subexpr=function(t){var e;return e="",e+=print_char("("),e+=print_expr(t),e+=print_char(")")},print_factorial_function=function(t){var e;return e="",t=cadr(t),isfraction(t)||car(t)===symbol(ADD)||car(t)===symbol(MULTIPLY)||car(t)===symbol(POWER)||car(t)===symbol(FACTORIAL)?e+=print_subexpr(t):e+=print_expr(t),e+=print_char("!")},print_ABS_latex=function(t){var e;return e="",e+=print_str("\\left |"),e+=print_expr(cadr(t)),e+=print_str(" \\right |")},print_BINOMIAL_latex=function(t){var e;return e="",e+=print_str("\\binom{"),e+=print_expr(cadr(t)),e+=print_str("}{"),e+=print_expr(caddr(t)),e+=print_str("} ")},print_DOT_latex=function(t){var e;return e="",e+=print_expr(cadr(t)),e+=print_str(" \\cdot "),e+=print_expr(caddr(t))},print_DOT_codegen=function(t){var e;return e="dot(",e+=print_expr(cadr(t)),e+=", ",e+=print_expr(caddr(t)),e+=")"},print_SIN_codegen=function(t){var e;return e="Math.sin(",e+=print_expr(cadr(t)),e+=")"},print_COS_codegen=function(t){var e;return e="Math.cos(",e+=print_expr(cadr(t)),e+=")"},print_TAN_codegen=function(t){var e;return e="Math.tan(",e+=print_expr(cadr(t)),e+=")"},print_ARCSIN_codegen=function(t){var e;return e="Math.asin(",e+=print_expr(cadr(t)),e+=")"},print_ARCCOS_codegen=function(t){var e;return e="Math.acos(",e+=print_expr(cadr(t)),e+=")"},print_ARCTAN_codegen=function(t){var e;return e="Math.atan(",e+=print_expr(cadr(t)),e+=")"},print_SQRT_latex=function(t){var e;return e="",e+=print_str("\\sqrt{"),e+=print_expr(cadr(t)),e+=print_str("} ")},print_TRANSPOSE_latex=function(t){var e;return e="",e+=print_str("{"),iscons(cadr(t))&&(e+=print_str("(")),e+=print_expr(cadr(t)),iscons(cadr(t))&&(e+=print_str(")")),e+=print_str("}"),e+=print_str("^T")},print_TRANSPOSE_codegen=function(t){var e;return e="",e+=print_str("transpose("),e+=print_expr(cadr(t)),e+=print_str(")")},print_UNIT_codegen=function(t){var e;return e="",e+=print_str("identity("),e+=print_expr(cadr(t)),e+=print_str(")")},print_INV_latex=function(t){var e;return e="",e+=print_str("{"),iscons(cadr(t))&&(e+=print_str("(")),e+=print_expr(cadr(t)),iscons(cadr(t))&&(e+=print_str(")")),e+=print_str("}"),e+=print_str("^{-1}")},print_INV_codegen=function(t){var e;return e="",e+=print_str("inv("),e+=print_expr(cadr(t)),e+=print_str(")")},print_DEFINT_latex=function(t){var e,n,r,o,i,a,s,u,p;for(e="",n=car(cdr(t)),a=t=cdr(t),i=0;iscons(cdr(cdr(t)));)i++,u=cdr(cdr(t)),e+=print_str("\\int^{"),e+=print_expr(car(cdr(u))),e+=print_str("}_{"),e+=print_expr(car(u)),e+=print_str("} \\! "),t=cdr(u);for(e+=print_expr(n),e+=print_str(" \\,"),t=a,r=o=1,s=i;1<=s?o<=s:o>=s;r=1<=s?++o:--o)p=cdr(t),e+=print_str(" \\mathrm{d} "),e+=print_expr(car(p)),r<i&&(e+=print_str(" \\, ")),t=cdr(cdr(p));return e},print_tensor=function(t){var e;return e="",e+=print_tensor_inner(t,0,0)[1]},print_tensor_inner=function(t,e,n){var r,o,i,a,s,u,p;if(r="",r+=print_str("["),e<t.tensor.ndim-1)for(o=i=0,s=t.tensor.dim[e];0<=s?i<s:i>s;o=0<=s?++i:--i)n=(u=print_tensor_inner(t,e+1,n))[0],r+=u[1],o!==t.tensor.dim[e]-1&&(r+=print_str(","));else for(o=a=0,p=t.tensor.dim[e];0<=p?a<p:a>p;o=0<=p?++a:--a)r+=print_expr(t.tensor.elem[n]),o!==t.tensor.dim[e]-1&&(r+=print_str(",")),n++;return[n,r+=print_str("]")]},print_tensor_latex=function(t){var e;return e="",t.tensor.ndim<=2&&(e+=print_tensor_inner_latex(!0,t,0,0)[1]),e},print_tensor_inner_latex=function(t,e,n,r){var o,i,a,s,u,p,c;if(o="",t&&(o+="\\begin{bmatrix} "),n<e.tensor.ndim-1)for(i=a=0,u=e.tensor.dim[n];0<=u?a<u:a>u;i=0<=u?++a:--a)r=(p=print_tensor_inner_latex(0,e,n+1,r))[0],o+=p[1],i!==e.tensor.dim[n]-1&&(o+=print_str(" \\\\ "));else for(i=s=0,c=e.tensor.dim[n];0<=c?s<c:s>c;i=0<=c?++s:--s)o+=print_expr(e.tensor.elem[r]),i!==e.tensor.dim[n]-1&&(o+=print_str(" & ")),r++;return t&&(o+=" \\end{bmatrix}"),[r,o]},print_SUM_latex=function(t){var e;return e="\\sum_{",e+=print_expr(caddr(t)),e+="=",e+=print_expr(cadddr(t)),e+="}^{",e+=print_expr(caddddr(t)),e+="}{",e+=print_expr(cadr(t)),e+="}"},print_SUM_codegen=function(t){var e,n,r,o;return e=cadr(t),o=caddr(t),n=cadddr(t),r=caddddr(t),"(function(){ var "+o+";  var holderSum = 0;  var lowerlimit = "+print_expr(n)+";  var upperlimit = "+print_expr(r)+";  for ("+o+" = lowerlimit; "+o+" < upperlimit; "+o+"++) {    holderSum += "+print_expr(e)+"; }  return holderSum;})()"},print_TEST_latex=function(t){var e;for(e="\\left\\{ \\begin{array}{ll}",t=cdr(t);iscons(t);){if(cdr(t)===symbol(NIL)){e+="{",e+=print_expr(car(t)),e+="} & otherwise ",e+=" \\\\\\\\";break}e+="{",e+=print_expr(cadr(t)),e+="} & if & ",e+=print_expr(car(t)),e+=" \\\\\\\\",t=cddr(t)}return(e=e.substring(0,e.length-4))+"\\end{array} \\right."},print_TEST_codegen=function(t){var e,n;for(e="(function(){",t=cdr(t),n=0;iscons(t);){if(cdr(t)===symbol(NIL)){e+="else {",e+="return ("+print_expr(car(t))+");",e+="}";break}n&&(e+=" else "),e+="if ("+print_expr(car(t))+"){",e+="return ("+print_expr(cadr(t))+");",e+="}",n++,t=cddr(t)}return e+="})()"},print_TESTLT_latex=function(t){var e;return e="{",e+=print_expr(cadr(t)),e+="}",e+=" < ",e+="{",(e+=print_expr(caddr(t)))+"}"},print_TESTLE_latex=function(t){var e;return e="{",e+=print_expr(cadr(t)),e+="}",e+=" \\leq ",e+="{",(e+=print_expr(caddr(t)))+"}"},print_TESTGT_latex=function(t){var e;return e="{",e+=print_expr(cadr(t)),e+="}",e+=" > ",e+="{",(e+=print_expr(caddr(t)))+"}"},print_TESTGE_latex=function(t){var e;return e="{",e+=print_expr(cadr(t)),e+="}",e+=" \\geq ",e+="{",(e+=print_expr(caddr(t)))+"}"},print_TESTEQ_latex=function(t){var e;return e="{",e+=print_expr(cadr(t)),e+="}",e+=" = ",e+="{",(e+=print_expr(caddr(t)))+"}"},print_FOR_codegen=function(t){var e,n,r,o;return e=cadr(t),o=caddr(t),n=cadddr(t),r=caddddr(t),"(function(){ var "+o+";  var lowerlimit = "+print_expr(n)+";  var upperlimit = "+print_expr(r)+";  for ("+o+" = lowerlimit; "+o+" < upperlimit; "+o+"++) {    "+print_expr(e)+" } })()"},print_DO_codegen=function(t){var e;for(e="",t=cdr(t);iscons(t);)e+=print_expr(car(t)),t=cdr(t);return e},print_SETQ_codegen=function(t){var e;return e="",e+=print_expr(cadr(t)),e+=" = ",e+=print_expr(caddr(t)),e+="; "},print_PRODUCT_latex=function(t){var e;return e="\\prod_{",e+=print_expr(caddr(t)),e+="=",e+=print_expr(cadddr(t)),e+="}^{",e+=print_expr(caddddr(t)),e+="}{",e+=print_expr(cadr(t)),e+="}"},print_PRODUCT_codegen=function(t){var e,n,r,o;return e=cadr(t),o=caddr(t),n=cadddr(t),r=caddddr(t),"(function(){ var "+o+";  var holderProduct = 1;  var lowerlimit = "+print_expr(n)+";  var upperlimit = "+print_expr(r)+";  for ("+o+" = lowerlimit; "+o+" < upperlimit; "+o+"++) {    holderProduct *= "+print_expr(e)+"; }  return holderProduct;})()"},print_base=function(t){var e;return e="",isadd(cadr(t))||caadr(t)===symbol(MULTIPLY)||caadr(t)===symbol(POWER)||isnegativenumber(cadr(t))?(e+=print_str("("),e+=print_expr(cadr(t)),e+=print_str(")")):isNumericAtom(cadr(t))&&(lessp(cadr(t),zero)||isfraction(cadr(t)))?(e+=print_str("("),e+=print_factor(cadr(t)),e+=print_str(")")):e+=print_factor(cadr(t)),e},print_exponent=function(t){var e;return e="",iscons(caddr(t))||isfraction(caddr(t))||isNumericAtom(caddr(t))&&lessp(caddr(t),zero)?(e+=print_str("("),e+=print_expr(caddr(t)),e+=print_str(")")):e+=print_factor(caddr(t)),e},print_power=function(t,e){var n,r,o,i;if(n="",DEBUG&&console.log("power base: "+t+"  exponent: "+e),isoneovertwo(e))if(equaln(t,2)){if(codeGen)return n+=print_str("Math.SQRT2")}else{if(printMode===PRINTMODE_LATEX)return n+=print_str("\\sqrt{"),n+=print_expr(t),n+=print_str("}");if(codeGen)return n+=print_str("Math.sqrt("),n+=print_expr(t),n+=print_str(")")}if(equaln(get_binding(symbol(PRINT_LEAVE_E_ALONE)),1)&&t===symbol(E))return codeGen?(n+=print_str("Math.exp("),n+=print_expo_of_denom(e),n+=print_str(")")):(printMode===PRINTMODE_LATEX?(n+=print_str("e^{"),n+=print_expr(e),n+=print_str("}")):(n+=print_str("exp("),n+=print_expr(e),n+=print_str(")")),n);if(codeGen)return n+=print_str("Math.pow("),n+=print_base_of_denom(t),n+=print_str(", "),n+=print_expo_of_denom(e),n+=print_str(")");if(equaln(get_binding(symbol(PRINT_LEAVE_X_ALONE)),0)||"x"!==t.printname){if(t!==symbol(E)){if(isminusone(e))return n+=print_str(printMode===PRINTMODE_LATEX?"\\frac{1}{":printMode!==PRINTMODE_HUMAN||test_flag?"1/":"1 / "),iscons(t)&&printMode!==PRINTMODE_LATEX?(n+=print_str("("),n+=print_expr(t),n+=print_str(")")):n+=print_expr(t),printMode===PRINTMODE_LATEX&&(n+=print_str("}")),n;if(isnegativeterm(e))return n+=print_str(printMode===PRINTMODE_LATEX?"\\frac{1}{":printMode!==PRINTMODE_HUMAN||test_flag?"1/":"1 / "),push(e),push_integer(-1),multiply(),o=pop(),iscons(t)&&printMode!==PRINTMODE_LATEX?(n+=print_str("("),n+=print_power(t,o),n+=print_str(")")):n+=print_power(t,o),printMode===PRINTMODE_LATEX&&(n+=print_str("}")),n}if(isfraction(e)&&printMode===PRINTMODE_LATEX)return n+=print_str("\\sqrt"),push(e),denominator(),r=pop(),isplustwo(r)||(n+=print_str("["),n+=print_expr(r),n+=print_str("]")),n+=print_str("{"),push(e),numerator(),i=pop(),n+=print_power(t,e=i),n+=print_str("}")}return printMode===PRINTMODE_LATEX&&isplusone(e)?n+=print_expr(t):(isadd(t)||isnegativenumber(t)?(n+=print_str("("),n+=print_expr(t),n+=print_str(")")):car(t)===symbol(MULTIPLY)||car(t)===symbol(POWER)?(printMode!==PRINTMODE_LATEX&&(n+=print_str("(")),n+=print_factor(t,!0),printMode!==PRINTMODE_LATEX&&(n+=print_str(")"))):isNumericAtom(t)&&(lessp(t,zero)||isfraction(t))?(n+=print_str("("),n+=print_factor(t),n+=print_str(")")):n+=print_factor(t),n+=print_str(printMode!==PRINTMODE_HUMAN||test_flag?"^":power_str),printMode===PRINTMODE_LATEX?print_expr(e).length>1?(n+=print_str("{"),n+=print_expr(e),n+=print_str("}")):n+=print_expr(e):iscons(e)||isfraction(e)||isNumericAtom(e)&&lessp(e,zero)?(n+=print_str("("),n+=print_expr(e),n+=print_str(")")):n+=print_factor(e)),n},print_index_function=function(t){var e;if(e="",t=cdr(t),caar(t)===symbol(ADD)||caar(t)===symbol(MULTIPLY)||caar(t)===symbol(POWER)||caar(t)===symbol(FACTORIAL)?e+=print_subexpr(car(t)):e+=print_expr(car(t)),e+=print_str("["),t=cdr(t),iscons(t))for(e+=print_expr(car(t)),t=cdr(t);iscons(t);)e+=print_str(","),e+=print_expr(car(t)),t=cdr(t);return e+=print_str("]")},print_factor=function(t,e){var n,r,o,i,a;if(n="",isNumericAtom(t))return n+=print_number(t,!1);if(isstr(t))return n+=print_str('"'),n+=print_str(t.str),n+=print_str('"');if(istensor(t))return n+=printMode===PRINTMODE_LATEX?print_tensor_latex(t):print_tensor(t);if(car(t)===symbol(MULTIPLY))return e||"-"!==sign_of_term(t)&&printMode===PRINTMODE_LATEX||(n+=print_str(printMode===PRINTMODE_LATEX?" \\left (":"(")),n+=print_expr(t),e||"-"!==sign_of_term(t)&&printMode===PRINTMODE_LATEX||(n+=print_str(printMode===PRINTMODE_LATEX?" \\right ) ":")")),n;if(isadd(t))return e||(n+=print_str("(")),n+=print_expr(t),e||(n+=print_str(")")),n;if(car(t)===symbol(POWER))return r=cadr(t),o=caddr(t),n+=print_power(r,o);if(car(t)===symbol(FUNCTION))return i=cadr(t),codeGen||(a=caddr(t),n+=print_str("function "),DEBUG&&console.log("emittedString from print_factor "+stringsEmittedByUserPrintouts),n+=print_list(a),n+=print_str(" -> ")),n+=print_expr(i);if(car(t)===symbol(PATTERN))return n+=print_expr(caadr(t)),n+=print_str(printMode===PRINTMODE_LATEX?" \\rightarrow ":printMode!==PRINTMODE_HUMAN||test_flag?"->":" -> "),n+=print_expr(car(cdr(cadr(t))));if(car(t)===symbol(INDEX)&&issymbol(cadr(t)))return n+=print_index_function(t);if(car(t)===symbol(FACTORIAL))return n+=print_factorial_function(t);if(car(t)===symbol(ABS)&&printMode===PRINTMODE_LATEX)return n+=print_ABS_latex(t);if(car(t)===symbol(SQRT)&&printMode===PRINTMODE_LATEX)return n+=print_SQRT_latex(t);if(car(t)===symbol(TRANSPOSE)){if(printMode===PRINTMODE_LATEX)return n+=print_TRANSPOSE_latex(t);if(codeGen)return n+=print_TRANSPOSE_codegen(t)}else if(car(t)===symbol(UNIT)){if(codeGen)return n+=print_UNIT_codegen(t)}else if(car(t)===symbol(INV)){if(printMode===PRINTMODE_LATEX)return n+=print_INV_latex(t);if(codeGen)return n+=print_INV_codegen(t)}else{if(car(t)===symbol(BINOMIAL)&&printMode===PRINTMODE_LATEX)return n+=print_BINOMIAL_latex(t);if(car(t)===symbol(DEFINT)&&printMode===PRINTMODE_LATEX)return n+=print_DEFINT_latex(t);if(isinnerordot(t)){if(printMode===PRINTMODE_LATEX)return n+=print_DOT_latex(t);if(codeGen)return n+=print_DOT_codegen(t)}else if(car(t)===symbol(SIN)){if(codeGen)return n+=print_SIN_codegen(t)}else if(car(t)===symbol(COS)){if(codeGen)return n+=print_COS_codegen(t)}else if(car(t)===symbol(TAN)){if(codeGen)return n+=print_TAN_codegen(t)}else if(car(t)===symbol(ARCSIN)){if(codeGen)return n+=print_ARCSIN_codegen(t)}else if(car(t)===symbol(ARCCOS)){if(codeGen)return n+=print_ARCCOS_codegen(t)}else if(car(t)===symbol(ARCTAN)){if(codeGen)return n+=print_ARCTAN_codegen(t)}else if(car(t)===symbol(SUM)){if(printMode===PRINTMODE_LATEX)return n+=print_SUM_latex(t);if(codeGen)return n+=print_SUM_codegen(t)}else if(car(t)===symbol(PRODUCT)){if(printMode===PRINTMODE_LATEX)return n+=print_PRODUCT_latex(t);if(codeGen)return n+=print_PRODUCT_codegen(t)}else if(car(t)===symbol(FOR)){if(codeGen)return n+=print_FOR_codegen(t)}else if(car(t)===symbol(DO)){if(codeGen)return n+=print_DO_codegen(t)}else if(car(t)===symbol(TEST)){if(codeGen)return n+=print_TEST_codegen(t);if(printMode===PRINTMODE_LATEX)return n+=print_TEST_latex(t)}else if(car(t)===symbol(TESTLT)){if(codeGen)return n+="(("+print_expr(cadr(t))+") < ("+print_expr(caddr(t))+"))";if(printMode===PRINTMODE_LATEX)return n+=print_TESTLT_latex(t)}else if(car(t)===symbol(TESTLE)){if(codeGen)return n+="(("+print_expr(cadr(t))+") <= ("+print_expr(caddr(t))+"))";if(printMode===PRINTMODE_LATEX)return n+=print_TESTLE_latex(t)}else if(car(t)===symbol(TESTGT)){if(codeGen)return n+="(("+print_expr(cadr(t))+") > ("+print_expr(caddr(t))+"))";if(printMode===PRINTMODE_LATEX)return n+=print_TESTGT_latex(t)}else if(car(t)===symbol(TESTGE)){if(codeGen)return n+="(("+print_expr(cadr(t))+") >= ("+print_expr(caddr(t))+"))";if(printMode===PRINTMODE_LATEX)return n+=print_TESTGE_latex(t)}else if(car(t)===symbol(TESTEQ)){if(codeGen)return n+="(("+print_expr(cadr(t))+") === ("+print_expr(caddr(t))+"))";if(printMode===PRINTMODE_LATEX)return n+=print_TESTEQ_latex(t)}else if(car(t)===symbol(FLOOR)){if(codeGen)return n+="Math.floor("+print_expr(cadr(t))+")";if(printMode===PRINTMODE_LATEX)return n+=" \\lfloor {"+print_expr(cadr(t))+"} \\rfloor "}else if(car(t)===symbol(CEILING)){if(codeGen)return n+="Math.ceiling("+print_expr(cadr(t))+")";if(printMode===PRINTMODE_LATEX)return n+=" \\lceil {"+print_expr(cadr(t))+"} \\rceil "}else if(car(t)===symbol(ROUND)){if(codeGen)return n+="Math.round("+print_expr(cadr(t))+")"}else if(car(t)===symbol(SETQ))return codeGen?n+=print_SETQ_codegen(t):(n+=print_expr(cadr(t)),n+=print_str("="),n+=print_expr(caddr(t)))}if(iscons(t)){if(n+=print_factor(car(t)),t=cdr(t),e||(n+=print_str("(")),iscons(t))for(n+=print_expr(car(t)),t=cdr(t);iscons(t);)n+=print_str(","),n+=print_expr(car(t)),t=cdr(t);return e||(n+=print_str(")")),n}return t===symbol(DERIVATIVE)?n+=print_char("d"):t===symbol(E)?n+=print_str(codeGen?"Math.E":"e"):t===symbol(PI)?n+=print_str(printMode===PRINTMODE_LATEX?"\\pi":"pi"):n+=print_str(get_printname(t)),n},print_list=function(t){var e;switch(e="",t.k){case CONS:for(e+="(",e+=print_list(car(t)),t===cdr(t)&&t!==symbol(NIL)&&console.log("oh no recursive!"),t=cdr(t);iscons(t);)e+=" ",e+=print_list(car(t)),(t=cdr(t))===cdr(t)&&t!==symbol(NIL)&&console.log("oh no recursive!");t!==symbol(NIL)&&(e+=" . ",e+=print_list(t)),e+=")";break;case STR:e+=t.str;break;case NUM:case DOUBLE:e+=print_number(t,!0);break;case SYM:e+=get_printname(t);break;default:e+="<tensor>"}return e},print_multiply_sign=function(){var t;if(t="",printMode===PRINTMODE_LATEX){if(printMode!==PRINTMODE_HUMAN||test_flag)return t;t+=print_str(" ")}return t+=print_str(printMode!==PRINTMODE_HUMAN||test_flag||codeGen?"*":" ")},is_denominator=function(t){return car(t)===symbol(POWER)&&cadr(t)!==symbol(E)&&isnegativeterm(caddr(t))?1:0},any_denominators=function(t){var e;for(t=cdr(t);iscons(t);){if(e=car(t),is_denominator(e))return 1;t=cdr(t)}return 0},YMAX=1e4,glyph=function(){function t(){}return t.prototype.c=0,t.prototype.x=0,t.prototype.y=0,t}(),chartab=[],charTabIndex=i1=0,ref1=YMAX;0<=ref1?i1<ref1:i1>ref1;charTabIndex=0<=ref1?++i1:--i1)chartab[charTabIndex]=new glyph;for(yindex=0,level=0,emit_x=0,expr_level=0,display_flag=0,printchar_nowrap=function(t){var e;return e="",e+=t},printchar=function(t){return printchar_nowrap(t)},print2dascii=function(t){var e,n,r;return 0,0,0,save(),yindex=0,level=0,emit_x=0,emit_top_expr(t),(n=get_size(0,yindex))[0],r=n[1],n[2],r>100?(printline(t),void restore()):(e=print_glyphs(),restore(),e)},emit_top_expr=function(t){return car(t)===symbol(SETQ)?(emit_expr(cadr(t)),__emit_str(" = "),void emit_expr(caddr(t))):istensor(t)?emit_tensor(t):emit_expr(t)},will_be_displayed_as_fraction=function(t){if(level>0)return 0;if(isfraction(t))return 1;if(car(t)!==symbol(MULTIPLY))return 0;if(isfraction(cadr(t)))return 1;for(;iscons(t);){if(isdenominator(car(t)))return 1;t=cdr(t)}return 0},emit_expr=function(t){if(expr_level++,car(t)===symbol(ADD))for(t=cdr(t),__is_negative(car(t))&&(__emit_char("-"),will_be_displayed_as_fraction(car(t))&&__emit_char(" ")),emit_term(car(t)),t=cdr(t);iscons(t);)__is_negative(car(t))?(__emit_char(" "),__emit_char("-"),__emit_char(" ")):(__emit_char(" "),__emit_char("+"),__emit_char(" ")),emit_term(car(t)),t=cdr(t);else __is_negative(t)&&(__emit_char("-"),will_be_displayed_as_fraction(t)&&__emit_char(" ")),emit_term(t);return expr_level--},emit_unsigned_expr=function(t){var e;if(car(t)===symbol(ADD)){for(t=cdr(t),emit_term(car(t)),t=cdr(t),e=[];iscons(t);)__is_negative(car(t))?(__emit_char(" "),__emit_char("-"),__emit_char(" ")):(__emit_char(" "),__emit_char("+"),__emit_char(" ")),emit_term(car(t)),e.push(t=cdr(t));return e}return emit_term(t)},__is_negative=function(t){return isnegativenumber(t)?1:car(t)===symbol(MULTIPLY)&&isnegativenumber(cadr(t))?1:0},emit_term=function(t){var e;return car(t)===symbol(MULTIPLY)?(e=count_denominators(t))&&0===level?emit_fraction(t,e):emit_multiply(t,e):emit_factor(t)},isdenominator=function(t){return car(t)===symbol(POWER)&&cadr(t)!==symbol(E)&&__is_negative(caddr(t))?1:0},count_denominators=function(t){var e,n;for(e=0,t=cdr(t);iscons(t);)n=car(t),isdenominator(n)&&e++,t=cdr(t);return e},emit_multiply=function(t,e){var n;if(0===e){for(t=cdr(t),(isplusone(car(t))||isminusone(car(t)))&&(t=cdr(t)),emit_factor(car(t)),t=cdr(t),n=[];iscons(t);)__emit_char(" "),emit_factor(car(t)),n.push(t=cdr(t));return n}return emit_numerators(t),__emit_char("/"),e>1||isfraction(cadr(t))?(__emit_char("("),emit_denominators(t),__emit_char(")")):emit_denominators(t)},emit_fraction=function(t,e){var n,r,o,i,a;for(n=0,0,0,i=0,0,save(),p3=one,p4=one,isrational(cadr(t))&&(push(cadr(t)),mp_numerator(),absval(),p3=pop(),push(cadr(t)),mp_denominator(),p4=pop()),isdouble(cadr(t))&&(push(cadr(t)),absval(),p3=pop()),i=isplusone(p3)?0:1,p1=cdr(t),isNumericAtom(car(p1))&&(p1=cdr(p1));iscons(p1);)p2=car(p1),isdenominator(p2)?1:i++,p1=cdr(p1);for(a=emit_x,r=yindex,n=0,isplusone(p3)||(emit_number(p3,0),n++),p1=cdr(t),isNumericAtom(car(p1))&&(p1=cdr(p1));iscons(p1);)p2=car(p1),isdenominator(p2)?1:(n>0&&__emit_char(" "),1===i?emit_expr(p2):emit_factor(p2),n++),p1=cdr(p1);for(0===n&&__emit_char("1"),o=yindex,n=0,isplusone(p4)||(emit_number(p4,0),n++,e++),p1=cdr(t),isrational(car(p1))&&(p1=cdr(p1));iscons(p1);)p2=car(p1),isdenominator(p2)&&(n>0&&__emit_char(" "),emit_denominator(p2,e),n++),p1=cdr(p1);return fixup_fraction(a,r,o),restore()},emit_numerators=function(t){var e;for(save(),e=0,p1=one,t=cdr(t),isrational(car(t))?(push(car(t)),mp_numerator(),absval(),p1=pop(),t=cdr(t)):isdouble(car(t))&&(push(car(t)),absval(),p1=pop(),t=cdr(t)),e=0,isplusone(p1)||(emit_number(p1,0),e++);iscons(t);)isdenominator(car(t))?1:(e>0&&__emit_char(" "),emit_factor(car(t)),e++),t=cdr(t);return 0===e&&__emit_char("1"),restore()},emit_denominators=function(t){var e;for(save(),e=0,t=cdr(t),isfraction(car(t))&&(push(car(t)),mp_denominator(),p1=pop(),emit_number(p1,0),e++,t=cdr(t));iscons(t);)isdenominator(car(t))&&(e>0&&__emit_char(" "),emit_denominator(car(t),0),e++),t=cdr(t);return restore()},emit_factor=function(t){istensor(t)?emit_flat_tensor(t):isdouble(t)?emit_number(t,0):car(t)!==symbol(ADD)&&car(t)!==symbol(MULTIPLY)?car(t)!==symbol(POWER)?iscons(t)?emit_function(t):isNumericAtom(t)?0===level?emit_numerical_fraction(t):emit_number(t,0):issymbol(t)?emit_symbol(t):isstr(t)&&emit_string(t):emit_power(t):emit_subexpr(t)},emit_numerical_fraction=function(t){var e,n,r;return 0,0,0,save(),push(t),mp_numerator(),absval(),p3=pop(),push(t),mp_denominator(),p4=pop(),isplusone(p4)?(emit_number(p3,0),void restore()):(r=emit_x,e=yindex,emit_number(p3,0),n=yindex,emit_number(p4,0),fixup_fraction(r,e,n),restore())},isfactor=function(t){return iscons(t)&&car(t)!==symbol(ADD)&&car(t)!==symbol(MULTIPLY)&&car(t)!==symbol(POWER)?1:issymbol(t)?1:isfraction(t)?0:isnegativenumber(t)?0:isNumericAtom(t)?1:0},emit_power=function(t){var e,n,r;return e=0,n=0,r=0,cadr(t)===symbol(E)?(__emit_str("exp("),emit_expr(caddr(t)),void __emit_char(")")):level>0?void(isminusone(caddr(t))?(__emit_char("1"),__emit_char("/"),isfactor(cadr(t))?emit_factor(cadr(t)):emit_subexpr(cadr(t))):(isfactor(cadr(t))?emit_factor(cadr(t)):emit_subexpr(cadr(t)),__emit_char("^"),isfactor(caddr(t))?emit_factor(caddr(t)):emit_subexpr(caddr(t)))):__is_negative(caddr(t))?(r=emit_x,e=yindex,__emit_char("1"),n=yindex,emit_denominator(t,1),void fixup_fraction(r,e,n)):(e=yindex,isfactor(cadr(t))?emit_factor(cadr(t)):emit_subexpr(cadr(t)),n=yindex,level++,emit_expr(caddr(t)),level--,fixup_power(e,n))},emit_denominator=function(t,e){var n,r;if(0,0,!isminusone(caddr(t)))return n=yindex,isfactor(cadr(t))?emit_factor(cadr(t)):emit_subexpr(cadr(t)),r=yindex,level++,emit_unsigned_expr(caddr(t)),level--,fixup_power(n,r);1===e?emit_expr(cadr(t)):emit_factor(cadr(t))},emit_function=function(t){if(car(t)===symbol(INDEX)&&issymbol(cadr(t)))emit_index_function(t);else{if(car(t)!==symbol(FACTORIAL)){if(car(t)===symbol(DERIVATIVE)?__emit_char("d"):emit_symbol(car(t)),__emit_char("("),t=cdr(t),iscons(t))for(emit_expr(car(t)),t=cdr(t);iscons(t);)__emit_char(","),emit_expr(car(t)),t=cdr(t);return __emit_char(")")}emit_factorial_function(t)}},emit_index_function=function(t){if(t=cdr(t),caar(t)===symbol(ADD)||caar(t)===symbol(MULTIPLY)||caar(t)===symbol(POWER)||caar(t)===symbol(FACTORIAL)?emit_subexpr(car(t)):emit_expr(car(t)),__emit_char("["),t=cdr(t),iscons(t))for(emit_expr(car(t)),t=cdr(t);iscons(t);)__emit_char(","),emit_expr(car(t)),t=cdr(t);return __emit_char("]")},emit_factorial_function=function(t){return t=cadr(t),isfraction(t)||car(t)===symbol(ADD)||car(t)===symbol(MULTIPLY)||car(t)===symbol(POWER)||car(t)===symbol(FACTORIAL)?emit_subexpr(t):emit_expr(t),__emit_char("!")},emit_subexpr=function(t){return __emit_char("("),emit_expr(t),__emit_char(")")},emit_symbol=function(t){var e,n,r,o,i;if(e=0,t!==symbol(E)){for(i=[],e=n=0,o=(r=get_printname(t)).length;0<=o?n<o:n>o;e=0<=o?++n:--n)i.push(__emit_char(r[e]));return i}__emit_str("exp(1)")},emit_string=function(t){var e,n,r,o;for(e=0,r=t.str,__emit_char('"'),e=n=0,o=r.length;0<=o?n<o:n>o;e=0<=o?++n:--n)__emit_char(r[e]);return __emit_char('"')},fixup_fraction=function(t,e,n){var r,o,i,a,s,u,p,c,l,d,f,h;for(r=0,0,0,c=0,0,0,0,0,0,0,0,o=(a=get_size(e,n))[0],l=a[1],f=a[2],(s=get_size(n,yindex))[0],d=s[1],h=s[2],r=d>l?(d-l)/2:0,r++,move(e,n,r,-(f+o-1)-1),r=d>l?-l:(l-d)/2-l,r++,move(n,yindex,r,1-h),c=d>l?d:l,emit_x=t,p=[],i=0,u=c+=2;0<=u?i<u:i>u;0<=u?++i:--i)p.push(__emit_char("-"));return p},fixup_power=function(t,e){var n,r,o,i,a;return n=0,0,0,0,0,0,0,(o=get_size(t,e))[0],o[1],a=o[2],r=(i=get_size(e,yindex))[0],i[1],n=-i[2]-r+1,move(e,yindex,0,n+=a-1)},move=function(t,e,n,r){var o,i,a,s,u;for(o=0,u=[],o=i=a=t,s=e;a<=s?i<s:i>s;o=a<=s?++i:--i)chartab[o].x+=n,u.push(chartab[o].y+=r);return u},get_size=function(t,e){var n,r,o,i,a,s,u,p;for(n=0,a=chartab[t].x,o=chartab[t].x,s=chartab[t].y,i=chartab[t].y,n=r=u=t+1,p=e;u<=p?r<p:r>p;n=u<=p?++r:--r)chartab[n].x<a&&(a=chartab[n].x),chartab[n].x>o&&(o=chartab[n].x),chartab[n].y<s&&(s=chartab[n].y),chartab[n].y>i&&(i=chartab[n].y);return[i-s+1,o-a+1,s]},displaychar=function(t){return __emit_char(t)},__emit_char=function(t){if(yindex!==YMAX)return chartab[yindex],chartab[yindex].c=t,chartab[yindex].x=emit_x,chartab[yindex].y=0,yindex++,emit_x++},__emit_str=function(t){var e,n,r,o;for(e=0,o=[],e=n=0,r=t.length;0<=r?n<r:n>r;e=0<=r?++n:--n)o.push(__emit_char(t[e]));return o},emit_number=function(t,e){var n,r,o,i,a,s,u,p,c,l;switch(l="",n=0,t.k){case NUM:for("-"===(l=t.q.a.toString())[0]&&0===e&&(l=l.substring(1)),n=r=0,a=l.length;0<=a?r<a:r>a;n=0<=a?++r:--r)__emit_char(l[n]);if("1"===(l=t.q.b.toString()))break;for(__emit_char("/"),p=[],n=o=0,s=l.length;0<=s?o<s:o>s;n=0<=s?++o:--o)p.push(__emit_char(l[n]));return p;case DOUBLE:for("-"===(l=doubleToReasonableString(t.d))[0]&&0===e&&(l=l.substring(1)),c=[],n=i=0,u=l.length;0<=u?i<u:i>u;n=0<=u?++i:--i)c.push(__emit_char(l[n]));return c}},cmpGlyphs=function(t,e){return t.y<e.y?-1:t.y>e.y?1:t.x<e.x?-1:t.x>e.x?1:0},print_glyphs=function(){var t,e,n,r,o,i,a;for(e=0,t="",(o=chartab.slice(0,yindex)).sort(cmpGlyphs),i=0,a=(chartab=[].concat(o).concat(chartab.slice(yindex)))[0].y,e=n=0,r=yindex;0<=r?n<r:n>r;e=0<=r?++n:--n){for(;chartab[e].y>a;)t+=printchar("\n"),i=0,a++;for(;chartab[e].x>i;)t+=printchar_nowrap(" "),i++;t+=printchar_nowrap(chartab[e].c),i++}return t},buffer="",getdisplaystr=function(){return yindex=0,level=0,emit_x=0,emit_expr(pop()),fill_buf(),buffer},fill_buf=function(){var t,e,n,r,o,i,a,s;for(i=buffer,r=0,t=0,(o=chartab.slice(0,yindex)).sort(cmpGlyphs),a=0,s=(chartab=[].concat(o).concat(chartab.slice(yindex)))[0].y,t=e=0,n=yindex;0<=n?e<n:e>n;t=0<=n?++e:--e){for(;chartab[t].y>s;)i[r++]="\n",a=0,s++;for(;chartab[t].x>a;)i[r++]=" ",a++;i[r++]=chartab[t].c,a++}return i[r++]="\n"},N=100,oneElement=function(){function t(){}return t.prototype.x=0,t.prototype.y=0,t.prototype.h=0,t.prototype.w=0,t.prototype.index=0,t.prototype.count=0,t}(),elem=[],elelmIndex=j1=0;j1<1e4;elelmIndex=++j1)elem[elelmIndex]=new oneElement;SPACE_BETWEEN_COLUMNS=3,SPACE_BETWEEN_ROWS=1,emit_tensor=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_,b,x,E;if(a=0,0,0,l=0,0,0,0,0,n=0,r=0,o=0,i=0,_=0,e=0,t.tensor.ndim>2)emit_flat_tensor(t);else{if(!((p=(d=t.tensor.dim[0])*(l=2===t.tensor.ndim?t.tensor.dim[1]:1))>N)){for(x=emit_x,a=s=0,h=p;0<=h?s<h:s>h;a=0<=h?++s:--s)elem[a].index=yindex,elem[a].x=emit_x,emit_expr(t.tensor.elem[a]),elem[a].count=yindex-elem[a].index,m=get_size(elem[a].index,yindex),elem[a].h=m[0],elem[a].w=m[1],elem[a].y=m[2];for(o=0,i=0,a=u=0,g=p;0<=g?u<g:u>g;a=0<=g?++u:--u)elem[a].h>o&&(o=elem[a].h),elem[a].w>i&&(i=elem[a].w);for(b=l*i+(l-1)*SPACE_BETWEEN_COLUMNS,E=-(d*o+(d-1)*SPACE_BETWEEN_ROWS)/2,_=c=0,v=d;0<=v?c<v:c>v;_=0<=v?++c:--c)for(e=f=0,y=l;0<=y?f<y:f>y;e=0<=y?++f:--f)n=x-elem[a=_*l+e].x,r=E-elem[a].y,move(elem[a].index,elem[a].index+elem[a].count,n,r),n=0,e>0&&(n=e*(i+SPACE_BETWEEN_COLUMNS)),r=0,_>0&&(r=_*(o+SPACE_BETWEEN_ROWS)),n+=(i-elem[a].w)/2,r+=(o-elem[a].h)/2,move(elem[a].index,elem[a].index+elem[a].count,n,r);return emit_x=x+b}emit_flat_tensor(t)}},emit_flat_tensor=function(t){return emit_tensor_inner(t,0,0)},emit_tensor_inner=function(t,e,n){var r,o,i;for(r=0,__emit_char("("),r=o=0,i=t.tensor.dim[e];0<=i?o<i:o>i;r=0<=i?++o:--o)e+1===t.tensor.ndim?(emit_expr(t.tensor.elem[n]),n+=1):n=emit_tensor_inner(t,e+1,n),r+1<t.tensor.dim[e]&&__emit_char(",");return __emit_char(")"),n},Eval_product=function(){var t,e,n,r,o,i,a,s,u;if(e=0,0,0,t=cadr(p1),n=caddr(p1),issymbol(n)||stop("sum: 2nd arg?"),push(cadddr(p1)),Eval(),r=pop_integer(),isNaN(r))push(p1);else{if(push(caddddr(p1)),Eval(),o=pop_integer(),!isNaN(o)){for(a=get_binding(n),push_integer(1),e=i=s=r,u=o;s<=u?i<=u:i>=u;e=s<=u?++i:--i)push_integer(e),p5=pop(),set_binding(n,p5),push(t),Eval(),DEBUG&&(console.log("product - factor 1: "+stack[tos-1].toString()),console.log("product - factor 2: "+stack[tos-2].toString())),multiply(),DEBUG&&console.log("product - result: "+stack[tos-1].toString());return set_binding(n,a)}push(p1)}},qadd=function(){var t,e,n,r,o,i,a,s;if(i=pop(),o=pop(),e=mmul(o.q.a,i.q.b),n=mmul(o.q.b,i.q.a),a=madd(e,n),!MZERO(a))return r=mmul(o.q.b,i.q.b),t=mgcd(a,r),t=makeSignSameAs(t,r),(s=new U).k=NUM,s.q.a=mdiv(a,t),s.q.b=mdiv(r,t),push(s);push(zero)},qdiv=function(){var t,e,n;return save(),p2=pop(),p1=pop(),MZERO(p2.q.a)&&stop("divide by zero"),MZERO(p1.q.a)?(push(zero),void restore()):(t=mmul(p1.q.a,p2.q.b),e=mmul(p1.q.b,p2.q.a),n=mgcd(t,e),n=makeSignSameAs(n,e),(p1=new U).k=NUM,p1.q.a=mdiv(t,n),p1.q.b=mdiv(e,n),push(p1),restore())},qmul=function(){var t,e,n;return save(),p2=pop(),p1=pop(),MZERO(p1.q.a)||MZERO(p2.q.a)?(push(zero),void restore()):(t=mmul(p1.q.a,p2.q.a),e=mmul(p1.q.b,p2.q.b),n=mgcd(t,e),n=makeSignSameAs(n,e),(p1=new U).k=NUM,p1.q.a=mdiv(t,n),p1.q.b=mdiv(e,n),push(p1),restore())},qpow=function(){return save(),qpowf(),restore()},qpowf=function(){var t,e,n,r,o,i;if(n=0,p2=pop(),p1=pop(),isplusone(p1)||isZeroAtomOrTensor(p2))push_integer(1);else if(isminusone(p1)&&isoneovertwo(p2))push(imaginaryunit);else{if(isZeroAtomOrTensor(p1))return isnegativenumber(p2)&&stop("divide by zero"),void push(zero);if(!isplusone(p2))return isinteger(p2)?(push(p2),n=pop_integer(),isNaN(n)?(push_symbol(POWER),push(p1),push(p2),void list(3)):(o=mpow(p1.q.a,Math.abs(n)),i=mpow(p1.q.b,Math.abs(n)),n<0&&(r=o,o=makeSignSameAs(o=i,i=r),i=makePositive(i)),(p3=new U).k=NUM,p3.q.a=o,p3.q.b=i,void push(p3))):isminusone(p1)?(push(p2),void normalize_angle()):isnegativenumber(p1)?(push(p1),negate(),push(p2),qpow(),push_integer(-1),push(p2),qpow(),void multiply()):isinteger(p1)?is_small_integer(p1)?(push(p1),push(p2),void quickfactor()):isSmall(p2.q.a)&&isSmall(p2.q.b)?(t=p2.q.a,e=p2.q.b,0===(o=mroot(p1.q.a,e))?(push_symbol(POWER),push(p1),push(p2),void list(3)):(i=mpow(o,t),(p3=new U).k=NUM,p2.q.a.isNegative()?(p3.q.a=bigInt(1),p3.q.b=i):(p3.q.a=i,p3.q.b=bigInt(1)),push(p3))):(push_symbol(POWER),push(p1),push(p2),void list(3)):(push(p1),mp_numerator(),push(p2),qpow(),push(p1),mp_denominator(),push(p2),negate(),qpow(),void multiply());push(p1)}},normalize_angle=function(){return save(),p1=pop(),isinteger(p1)?(p1.q.a.isOdd()?push_integer(-1):push_integer(1),void restore()):(push(p1),bignum_truncate(),p2=pop(),isnegativenumber(p1)&&(push(p2),push_integer(-1),add(),p2=pop()),push(p1),push(p2),subtract(),p3=pop(),push_symbol(POWER),push_integer(-1),push(p3),list(3),p2.q.a.isOdd()&&negate(),restore())},is_small_integer=function(t){return isSmall(t.q.a)},quickfactor=function(){var t,e,n,r,o,i;for(e=0,save(),p2=pop(),p1=pop(),t=tos,push(p1),factor_small_number(),i=t,e=n=0,o=r=tos-t;n<o;e=n+=2)push(stack[i+e]),push(stack[i+e+1]),push(p2),multiply(),quickpower();return multiply_all(tos-t-r),p1=pop(),moveTos(t),push(p1),restore()},quickpower=function(){var t;return 0,save(),p2=pop(),p1=pop(),push(p2),bignum_truncate(),p3=pop(),push(p2),push(p3),subtract(),p4=pop(),isZeroAtomOrTensor(p4)||(push_symbol(POWER),push(p1),push(p4),list(3)),push(p3),t=pop_integer(),isNaN(t)?(push_symbol(POWER),push(p1),push(p3),list(3),void restore()):0!==t?(push(p1),bignum_power_number(t),restore()):void restore()},Eval_quotient=function(){return push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),push(cadddr(p1)),Eval(),(p1=pop())===symbol(NIL)&&(p1=symbol(SYMBOL_X)),push(p1),divpoly()},divpoly=function(){var t,e,n,r,o,i,a,s,u;for(0,r=0,i=0,0,u=0,save(),p3=pop(),p2=pop(),p1=pop(),n=tos,t=tos,push(p1),push(p3),i=coeff()-1,e=tos,push(p2),push(p3),u=i-(a=coeff()-1),push_integer(0),p5=pop();u>=0;){for(push(stack[t+i]),push(stack[e+a]),divide(),p4=pop(),r=o=0,s=a;0<=s?o<=s:o>=s;r=0<=s?++o:--o)push(stack[t+u+r]),push(stack[e+r]),push(p4),multiply(),subtract(),stack[t+u+r]=pop();push(p5),push(p4),push(p3),push_integer(u),power(),multiply(),add(),p5=pop(),i--,u--}return moveTos(n),push(p5),restore()},Eval_rationalize=function(){return push(cadr(p1)),Eval(),rationalize()},rationalize=function(){var t;return t=expanding,yyrationalize(),expanding=t},yyrationalize=function(){var t,e,n;if(n=pop(),istensor(n))__rationalize_tensor(n);else{if(expanding=0,car(n)===symbol(ADD)){for(DEBUG&&(printf("rationalize: this is the input expr:\n"),printline(n)),push(one),multiply_denominators(n),t=pop(),DEBUG&&(printf("rationalize: this is the common denominator:\n"),printline(t)),push(zero),e=cdr(n);iscons(e);)push(t),push(car(e)),multiply(),add(),e=cdr(e);return DEBUG&&(printf("rationalize: original expr times common denominator:\n"),printline(stack[tos-1])),Condense(),DEBUG&&(printf("rationalize: after factoring:\n"),printline(stack[tos-1])),push(t),divide(),DEBUG?(printf("rationalize: after dividing by common denom. (and we're done):\n"),printline(stack[tos-1])):void 0}push(n)}},multiply_denominators=function(t){var e;if(car(t)===symbol(ADD)){for(t=cdr(t),e=[];iscons(t);)multiply_denominators_term(car(t)),e.push(t=cdr(t));return e}return multiply_denominators_term(t)},multiply_denominators_term=function(t){var e;if(car(t)===symbol(MULTIPLY)){for(t=cdr(t),e=[];iscons(t);)multiply_denominators_factor(car(t)),e.push(t=cdr(t));return e}return multiply_denominators_factor(t)},multiply_denominators_factor=function(t){if(car(t)===symbol(POWER))return push(t),t=caddr(t),isnegativenumber(t)?(inverse(),void __lcm()):car(t)===symbol(MULTIPLY)&&isnegativenumber(cadr(t))?(inverse(),void __lcm()):pop()},__rationalize_tensor=function(t){var e,n,r;if(e=0,push(t),Eval(),t=pop(),istensor(t)){for(e=n=0,r=t.tensor.nelem;0<=r?n<r:n>r;e=0<=r?++n:--n)push(t.tensor.elem[e]),rationalize(),t.tensor.elem[e]=pop();return check_tensor_dimensions(t),push(t)}push(t)},__lcm=function(){return save(),p1=pop(),p2=pop(),push(p1),push(p2),multiply(),push(p1),push(p2),gcd(),divide(),restore()},Eval_real=function(){return push(cadr(p1)),Eval(),real()},real=function(){return save(),rect(),p1=pop(),push(p1),push(p1),conjugate(),add(),push_integer(2),divide(),restore()},DEBUG_RECT=!1,Eval_rect=function(){return push(cadr(p1)),Eval(),rect()},rect=function(){var t;if(save(),t=p1=pop(),DEBUG_RECT&&console.log("RECT of "+t),DEBUG_RECT&&console.log("any clock forms in : "+t+" ? "+findPossibleClockForm(t)),issymbol(p1))DEBUG_RECT&&console.log(" rect: simple symbol: "+t),isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))?(push_symbol(YYRECT),push(p1),list(2)):push(p1);else if(isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES)))||findPossibleExponentialForm(p1)||findPossibleClockForm(p1)||Find(p1,symbol(SIN))&&Find(p1,symbol(COS))&&Find(p1,imaginaryunit))if(car(p1)===symbol(MULTIPLY)&&isimaginaryunit(cadr(p1))&&!isZeroAtomOrTensor(get_binding(symbol(ASSUME_REAL_VARIABLES))))push(p1);else if(car(p1)===symbol(ADD))for(DEBUG_RECT&&console.log(" rect - "+t+" is a sum "),push_integer(0),p1=cdr(p1);iscons(p1);)push(car(p1)),rect(),add(),p1=cdr(p1);else DEBUG_RECT&&console.log(" rect - "+t+" is NOT a sum "),push(p1),abs(),DEBUG_RECT&&console.log(" rect - "+t+" abs: "+stack[tos-1].toString()),push(p1),arg(),DEBUG_RECT&&console.log(" rect - "+t+" arg of "+p1+" : "+stack[tos-1].toString()),p1=pop(),push(p1),cosine(),DEBUG_RECT&&console.log(" rect - "+t+" cosine: "+stack[tos-1].toString()),push(imaginaryunit),push(p1),sine(),DEBUG_RECT&&console.log(" rect - "+t+" sine: "+stack[tos-1].toString()),multiply(),DEBUG_RECT&&console.log(" rect - "+t+" i * sine: "+stack[tos-1].toString()),add(),DEBUG_RECT&&console.log(" rect - "+t+" cos + i * sine: "+stack[tos-1].toString()),multiply();else DEBUG_RECT&&console.log(" rect: simple symbol: "+t),push(p1);if(restore(),DEBUG_RECT)return console.log("rect of "+t+" : "+stack[tos-1])},show_power_debug=!1,performing_roots=!1,Eval_roots=function(){return p2=cadr(p1),car(p2)===symbol(SETQ)||car(p2)===symbol(TESTEQ)?(push(cadr(p2)),Eval(),push(caddr(p2)),Eval(),subtract()):(push(p2),Eval(),p2=pop(),car(p2)===symbol(SETQ)||car(p2)===symbol(TESTEQ)?(push(cadr(p2)),Eval(),push(caddr(p2)),Eval(),subtract()):push(p2)),push(caddr(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),p2=pop(),p1=pop(),ispolyexpandedform(p1,p2)||stop("roots: 1st argument is not a polynomial"),push(p1),push(p2),roots()},hasImaginaryCoeff=function(t){var e,n,r;for(n=!1,tos,e=r=t;r>0;e=r+=-1)if(iscomplexnumber(stack[tos-e])){n=!0;break}return n},isSimpleRoot=function(t){var e,n,r;if(t>2){for(n=!0,tos,isZeroAtomOrTensor(stack[tos-t])&&(n=!1),e=r=t-1;r>1;e=r+=-1)if(!isZeroAtomOrTensor(stack[tos-e])){n=!1;break}}else n=!1;return n},normalisedCoeff=function(){var t,e,n,r,o,i,a,s;for(n=coeff(),t=stack[tos-1],i=[],e=r=1,a=n;1<=a?r<=a:r>=a;e=1<=a?++r:--r)i.push(pop());for(e=o=s=n-1;s<=0?o<=0:o>=0;e=s<=0?++o:--o)push(i[e]),push(t),divide();return n},roots=function(){var t,e,n,r,o,i,a,s;if(0,e=0,0,save(),recursionLevelNestedRadicalsRemoval>1)return pop(),pop(),push(symbol(NIL)),void restore();if(performing_roots=!0,t=tos-2,DEBUG&&console.log("checking if "+stack[tos-1].toString()+" is a case of simple roots"),p2=pop(),p1=pop(),push(p1),push(p2),push(p1),push(p2),n=normalisedCoeff(),isSimpleRoot(n)?(DEBUG&&console.log("yes, "+stack[tos-1].toString()+" is a case of simple roots"),o=stack[tos-n],i=stack[tos-1],moveTos(tos-n),pop(),pop(),getSimpleRoots(n,i,o)):(moveTos(tos-n),roots2()),0===(a=tos-t)&&stop("roots: the polynomial is not factorable, try nroots"),1===a)return performing_roots=!1,void restore();for(sort_stack(a),(p1=alloc_tensor(a)).tensor.ndim=1,p1.tensor.dim[0]=a,e=r=0,s=a;0<=s?r<s:r>s;e=0<=s?++r:--r)p1.tensor.elem[e]=stack[t+e];return moveTos(t),push(p1),restore(),performing_roots=!1},getSimpleRoots=function(t,e,n){var r,o,i,a,s,u,p;if(DEBUG&&console.log("getSimpleRoots"),save(),t-=1,push(n),push_rational(1,t),power(),push(e),push_rational(1,t),power(),divide(),o=pop(),t%2==0)for(p=i=1,s=t;i<=s;p=i+=2)push(o),push_integer(-1),push_rational(p,t),power(),multiply(),r=pop(),push(r),push(r),negate();else for(p=a=1,u=t;1<=u?a<=u:a>=u;p=1<=u?++a:--a)push(o),push_integer(-1),push_rational(p,t),power(),multiply(),p%2==0&&negate();return restore()},roots2=function(){var t;if(save(),p2=pop(),p1=pop(),push(p1),push(p2),push(p1),push(p2),t=normalisedCoeff(),hasImaginaryCoeff(t)?(moveTos(tos-t),pop(),pop()):(moveTos(tos-t),factorpoly(),p1=pop()),car(p1)===symbol(MULTIPLY))for(p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),roots3(),p1=cdr(p1);else push(p1),push(p2),roots3();return restore()},roots3=function(){var t;return save(),p2=pop(),p1=pop(),car(p1)===symbol(POWER)&&ispolyexpandedform(cadr(p1),p2)&&isposint(caddr(p1))?(push(cadr(p1)),push(p2),t=normalisedCoeff(),mini_solve(t)):ispolyexpandedform(p1,p2)&&(push(p1),push(p2),t=normalisedCoeff(),mini_solve(t)),restore()},mini_solve=function(t){var e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_,b,x,E,w,A,I,R,T,S,C,N,k,O,D,M,L,P,B,F,U,q,G,W,z,V,H,X,Y,$,j,K,Z,Q,J,tt,et,nt,rt,ot,it,at,st,ut,pt,ct,lt,dt;if(save(),2===t)return p3=pop(),p4=pop(),push(p4),push(p3),divide(),negate(),void restore();if(3===t)return p3=pop(),p4=pop(),p5=pop(),push(p4),push_integer(2),power(),push_integer(4),push(p3),multiply(),push(p5),multiply(),subtract(),push_rational(1,2),power(),p6=pop(),push(p6),push(p4),subtract(),push(p3),push_integer(2),multiply(),divide(),push(p6),push(p4),add(),negate(),push(p3),divide(),push_rational(1,2),multiply(),void restore();if(4===t||5===t){if(p3=pop(),p4=pop(),p5=pop(),p6=pop(),push(p5),push(p5),multiply(),S=pop(),push(S),push(p5),multiply(),C=pop(),push(p4),push(p4),multiply(),A=pop(),push(A),push(p4),multiply(),R=pop(),push(R),push(p6),multiply(),T=pop(),push(T),push_integer(-4),multiply(),B=pop(),push(R),push_integer(2),multiply(),o=pop(),push(p3),push(p3),multiply(),v=pop(),push(v),push(p3),multiply(),b=pop(),push_integer(3),push(p3),multiply(),i=pop(),push(v),push(p6),multiply(),y=pop(),push(y),push(p6),multiply(),_=pop(),push(y),push_integer(27),multiply(),r=pop(),push(_),push_integer(-27),multiply(),L=pop(),push(i),push_integer(2),multiply(),pop(),push(p3),push(p5),multiply(),w=pop(),push(w),push(p4),multiply(),x=pop(),push(x),push(p6),multiply(),E=pop(),push(w),push_integer(3),multiply(),s=pop(),push_integer(-4),push(p3),push(C),multiply(),multiply(),P=pop(),push(x),push_integer(9),multiply(),negate(),F=pop(),push(E),push_integer(18),multiply(),n=pop(),push(A),push(s),subtract(),f=pop(),push(A),push(S),multiply(),I=pop(),push(p4),negate(),push(i),divide(),U=pop(),4===t){if(DEBUG&&console.log(">>>>>>>>>>>>>>>> actually using cubic formula <<<<<<<<<<<<<<< "),DEBUG&&console.log("cubic: D0: "+f.toString()),push(f),push_integer(3),power(),push_integer(4),multiply(),u=pop(),push(f),simplify(),absValFloat(),h=pop(),DEBUG&&console.log("cubic: D0 as float: "+h.toString()),push(n),push(B),push(I),push(P),push(L),add(),add(),add(),add(),simplify(),absValFloat(),k=pop(),DEBUG&&console.log("cubic: DETERMINANT: "+k.toString()),push(o),push(F),push(r),add(),add(),m=pop(),DEBUG&&console.log("cubic: D1: "+m.toString()),push(m),push_integer(2),power(),push(u),subtract(),push_rational(1,2),power(),simplify(),g=pop(),isZeroAtomOrTensor(k))return isZeroAtomOrTensor(h)?(DEBUG&&console.log(" cubic: DETERMINANT IS ZERO and delta0 is zero"),push(U),void restore()):(DEBUG&&console.log(" cubic: DETERMINANT IS ZERO and delta0 is not zero"),push(p3),push(p6),push_integer(9),multiply(),multiply(),push(p4),push(p5),multiply(),subtract(),push(f),push_integer(2),multiply(),divide(),ct=pop(),push(ct),push(ct),push(x),push_integer(4),multiply(),push(p3),push(p3),push(p6),push_integer(9),multiply(),multiply(),multiply(),negate(),push(R),negate(),add(),add(),push(p3),push(f),multiply(),divide(),void restore());for(e=!1,K=!1;!e;)push(g),K&&negate(),push(m),add(),push_rational(1,2),multiply(),push_rational(1,3),power(),simplify(),c=pop(),DEBUG&&console.log("cubic: C: "+c.toString()),push(c),simplify(),absValFloat(),d=pop(),DEBUG&&console.log("cubic: C as absval and float: "+d.toString()),isZeroAtomOrTensor(d)?(DEBUG&&console.log(" cubic: C IS ZERO flipping the sign"),K=!0):e=!0;return push(c),push(i),multiply(),a=pop(),push(a),push_integer(2),multiply(),p=pop(),push(imaginaryunit),push_integer(3),push_rational(1,2),power(),multiply(),Z=pop(),push_integer(1),push(Z),add(),it=pop(),push_integer(1),push(Z),subtract(),ot=pop(),push(c),push(i),divide(),l=pop(),push(U),push(l),negate(),push(f),push(a),divide(),negate(),add(),add(),simplify(),push(U),push(l),push(it),multiply(),push_integer(2),divide(),push(ot),push(f),multiply(),push(p),divide(),add(),add(),simplify(),push(U),push(l),push(ot),multiply(),push_integer(2),divide(),push(it),push(f),multiply(),push(p),divide(),add(),add(),simplify(),void restore()}if(5===t){if(DEBUG&&console.log(">>>>>>>>>>>>>>>> actually using quartic formula <<<<<<<<<<<<<<< "),p7=pop(),isZeroAtomOrTensor(p4)&&isZeroAtomOrTensor(p6)&&!isZeroAtomOrTensor(p5)&&!isZeroAtomOrTensor(p7)){for(DEBUG&&console.log("biquadratic case"),push(p3),push(symbol(SECRETX)),push_integer(2),power(),multiply(),push(p5),push(symbol(SECRETX)),multiply(),push(p7),add(),add(),push(symbol(SECRETX)),roots(),Q=0,J=(at=pop().tensor.elem).length;Q<J;Q++)j=at[Q],push(j),push_rational(1,2),power(),simplify(),push(j),push_rational(1,2),power(),negate(),simplify();return void restore()}if(push(p6),push(p6),multiply(),N=pop(),push(p7),push(p7),multiply(),O=pop(),push(O),push(p7),multiply(),D=pop(),push_integer(256),push(b),push(D),multiply(),multiply(),push_integer(-192),push(y),push(O),push(p4),multiply(),multiply(),multiply(),push_integer(-128),push(v),push(S),push(O),multiply(),multiply(),multiply(),push_integer(144),push(_),push(p5),push(p7),multiply(),multiply(),multiply(),push(L),push(N),multiply(),push_integer(144),push(x),push(p4),push(O),multiply(),multiply(),multiply(),push_integer(-6),push(p3),push(A),push(N),push(p7),multiply(),multiply(),multiply(),multiply(),push_integer(-80),push(E),push(p5),push(p7),multiply(),multiply(),multiply(),push_integer(18),push(E),push(N),multiply(),multiply(),push_integer(16),push(w),push(C),push(p7),multiply(),multiply(),multiply(),push_integer(-4),push(w),push(S),push(N),multiply(),multiply(),multiply(),push_integer(-27),push(R),push(p4),push(O),multiply(),multiply(),multiply(),push_integer(18),push(T),push(p5),push(p7),multiply(),multiply(),multiply(),push(B),push(N),multiply(),push_integer(-4),push(I),push(p5),push(p7),multiply(),multiply(),multiply(),push(I),push(N),multiply(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),add(),k=pop(),DEBUG&&console.log("R_determinant: "+k.toString()),push(S),push_integer(-3),push(p4),push(p6),multiply(),multiply(),push_integer(12),push(p3),push(p7),multiply(),multiply(),add(),add(),f=pop(),DEBUG&&console.log("R_DELTA0: "+f.toString()),push_integer(2),push(C),multiply(),push_integer(-9),push(p4),push(p5),push(p6),multiply(),multiply(),multiply(),push_integer(27),push(A),push(p7),multiply(),multiply(),push_integer(27),push(p3),push(N),multiply(),multiply(),push_integer(-72),push(w),push(p7),multiply(),multiply(),add(),add(),add(),add(),m=pop(),DEBUG&&console.log("R_DELTA1: "+m.toString()),push_integer(8),push(w),multiply(),push_integer(-3),push(A),multiply(),add(),push_integer(8),push(v),multiply(),divide(),q=pop(),DEBUG&&console.log("p: "+q.toString()),push(R),push_integer(-4),push(x),multiply(),push_integer(8),push(y),multiply(),add(),add(),push_integer(8),push(b),multiply(),divide(),G=pop(),DEBUG&&console.log("q: "+G.toString()),DEBUG&&console.log("tos 1 "+tos),isZeroAtomOrTensor(p4)){for(q=p5,G=p6,W=p7,push_rational(5,2),push(q),multiply(),H=pop(),push_integer(2),push(q),push_integer(2),power(),multiply(),push(W),subtract(),X=pop(),push(q),push_integer(3),power(),push_integer(2),divide(),push_rational(-1,2),push(q),push(W),multiply(),multiply(),push_rational(-1,8),push(G),push_integer(2),power(),multiply(),add(),add(),Y=pop(),push(symbol(SECRETX)),push_integer(3),power(),push(H),push(symbol(SECRETX)),push_integer(2),power(),multiply(),push(X),push(symbol(SECRETX)),multiply(),push(Y),add(),add(),add(),DEBUG&&console.log("resolventCubic: "+stack[tos-1].toString()),push(symbol(SECRETX)),roots(),pt=pop(),DEBUG&&console.log("resolventCubicSolutions: "+pt),M=null,rt=0,et=(ut=pt.tensor.elem).length;rt<et;rt++)if(j=ut[rt],DEBUG&&console.log("examining solution: "+j),push(j),push_integer(2),multiply(),push(q),add(),absValFloat(),dt=pop(),DEBUG&&console.log("abs value is: "+j),!isZeroAtomOrTensor(dt)){M=j;break}return DEBUG&&console.log("chosen solution: "+M),push(M),push_integer(2),multiply(),push(q),add(),push_rational(1,2),power(),simplify(),lt=pop(),push(G),push_integer(2),multiply(),push(lt),divide(),simplify(),V=pop(),push(q),push_integer(3),multiply(),push(M),push_integer(2),multiply(),add(),z=pop(),push(lt),push(z),push(V),add(),negate(),push_rational(1,2),power(),simplify(),add(),push_integer(2),divide(),push(lt),push(z),push(V),add(),negate(),push_rational(1,2),power(),simplify(),subtract(),push_integer(2),divide(),push(lt),negate(),push(z),push(V),subtract(),negate(),push_rational(1,2),power(),simplify(),add(),push_integer(2),divide(),push(lt),negate(),push(z),push(V),subtract(),negate(),push_rational(1,2),power(),simplify(),subtract(),push_integer(2),divide(),void restore()}for(DEBUG&&console.log("tos 2 "+tos),push_integer(8),push(p5),push(p3),multiply(),multiply(),push_integer(-3),push(p4),push_integer(2),power(),multiply(),add(),push_integer(8),push(p3),push_integer(2),power(),multiply(),divide(),q=pop(),DEBUG&&console.log("p for depressed quartic: "+q.toString()),push(p4),push_integer(3),power(),push_integer(-4),push(p3),push(p4),push(p5),multiply(),multiply(),multiply(),push_integer(8),push(p6),push(p3),push_integer(2),power(),multiply(),multiply(),add(),add(),push_integer(8),push(p3),push_integer(3),power(),multiply(),divide(),G=pop(),DEBUG&&console.log("q for depressed quartic: "+G.toString()),push(p4),push_integer(4),power(),push_integer(-3),multiply(),push_integer(256),push(b),push(p7),multiply(),multiply(),push_integer(-64),push(y),push(p4),multiply(),multiply(),push_integer(16),push(A),push(p3),push(p5),multiply(),multiply(),multiply(),add(),add(),add(),push_integer(256),push(p3),push_integer(4),power(),multiply(),divide(),W=pop(),DEBUG&&console.log("r for depressed quartic: "+W.toString()),DEBUG&&console.log("tos 4 "+tos),push(symbol(SECRETX)),push_integer(4),power(),DEBUG&&console.log("4 * x^4: "+stack[tos-1].toString()),push(q),push(symbol(SECRETX)),push_integer(2),power(),multiply(),DEBUG&&console.log("R_p * x^2: "+stack[tos-1].toString()),push(G),push(symbol(SECRETX)),multiply(),DEBUG&&console.log("R_q * x: "+stack[tos-1].toString()),push(W),DEBUG&&console.log("R_r: "+stack[tos-1].toString()),add(),add(),add(),simplify(),DEBUG&&console.log("solving depressed quartic: "+stack[tos-1].toString()),push(symbol(SECRETX)),roots(),$=pop(),DEBUG&&console.log("depressedSolutions: "+$),nt=0,tt=(st=$.tensor.elem).length;nt<tt;nt++)j=st[nt],push(j),push(p4),push_integer(4),push(p3),multiply(),divide(),subtract(),simplify(),DEBUG&&console.log("solution from depressed: "+stack[tos-1].toString());return void restore()}}return moveTos(tos-t),restore()},Eval_round=function(){return push(cadr(p1)),Eval(),yround()},yround=function(){return save(),yyround(),restore()},yyround=function(){var t;return t=0,p1=pop(),isNumericAtom(p1)?isdouble(p1)?(t=Math.round(p1.d),void push_double(t)):isinteger(p1)?void push(p1):(push(p1),yyfloat(),p1=pop(),push_integer(Math.round(p1.d))):(push_symbol(ROUND),push(p1),void list(2))},T_INTEGER=1001,T_DOUBLE=1002,T_SYMBOL=1003,T_FUNCTION=1004,T_NEWLINE=1006,T_STRING=1007,T_GTEQ=1008,T_LTEQ=1009,T_EQ=1010,T_NEQ=1011,T_QUOTASSIGN=1012,token="",newline_flag=0,meta_mode=0,input_str=0,scan_str=0,token_str=0,token_buf=0,lastFoundSymbol=null,symbolsRightOfAssignment=null,symbolsLeftOfAssignment=null,isSymbolLeftOfAssignment=null,scanningParameters=null,functionInvokationsScanningStack=null,skipRootVariableToBeSolved=!1,assignmentFound=null,scanned="",scan=function(t){return DEBUG&&console.log("#### scanning "+t),lastFoundSymbol=null,symbolsRightOfAssignment=[],symbolsLeftOfAssignment=[],isSymbolLeftOfAssignment=!0,scanningParameters=[],functionInvokationsScanningStack=[""],assignmentFound=!1,scanned=t,meta_mode=0,expanding++,input_str=0,scan_str=0,get_next_token(),""===token?(push(symbol(NIL)),expanding--,0):(scan_stmt(),expanding--,assignmentFound||(symbolsInExpressionsWithoutAssignments=symbolsInExpressionsWithoutAssignments.concat(symbolsLeftOfAssignment)),token_str-input_str)},scan_meta=function(t){return scanned=t,meta_mode=1,expanding++,input_str=0,scan_str=0,get_next_token(),""===token?(push(symbol(NIL)),expanding--,0):(scan_stmt(),expanding--,token_str-input_str)},scan_stmt=function(){var t,e,n,r,o,i,a,s,u;if(scan_relation(),t=!1,token===T_QUOTASSIGN&&(t=!0),(token===T_QUOTASSIGN||"="===token)&&(u=lastFoundSymbol,DEBUG&&console.log("assignment!"),assignmentFound=!0,isSymbolLeftOfAssignment=!1,get_next_token(),push_symbol(SETQ),swap(),t&&push_symbol(QUOTE),scan_relation(),t&&list(2),list(3),isSymbolLeftOfAssignment=!0,codeGen)){if(-1!==(r=symbolsRightOfAssignment.indexOf(u))&&(symbolsRightOfAssignment.splice(r,1),symbolsHavingReassignments.push(u)),DEBUG)for(console.log("locally, "+u+" depends on: "),o=0,i=symbolsRightOfAssignment.length;o<i;o++)n=symbolsRightOfAssignment[o],console.log("  "+n);for(null==symbolsDependencies[u]&&(symbolsDependencies[u]=[]),e=symbolsDependencies[u],s=0,a=symbolsRightOfAssignment.length;s<a;s++)n=symbolsRightOfAssignment[s],-1===e.indexOf(n)&&e.push(n);return symbolsRightOfAssignment=[]}},scan_relation=function(){switch(scan_expression(),token){case T_EQ:return push_symbol(TESTEQ),swap(),get_next_token(),scan_expression(),list(3);case T_NEQ:return push_symbol(NOT),swap(),push_symbol(TESTEQ),swap(),get_next_token(),scan_expression(),list(3),list(2);case T_LTEQ:return push_symbol(TESTLE),swap(),get_next_token(),scan_expression(),list(3);case T_GTEQ:return push_symbol(TESTGE),swap(),get_next_token(),scan_expression(),list(3);case"<":return push_symbol(TESTLT),swap(),get_next_token(),scan_expression(),list(3);case">":return push_symbol(TESTGT),swap(),get_next_token(),scan_expression(),list(3)}},scan_expression=function(){var t;switch(t=tos,token){case"+":get_next_token(),scan_term();break;case"-":get_next_token(),scan_term(),negate();break;default:scan_term()}for(;0===newline_flag&&("+"===token||"-"===token);)"+"===token?(get_next_token(),scan_term()):(get_next_token(),scan_term(),negate());if(tos-t>1)return list(tos-t),push_symbol(ADD),swap(),cons()},is_factor=function(){if(("function"==typeof token.charCodeAt?token.charCodeAt(0):void 0)===dotprod_unicode)return 1;switch(token){case"*":case"/":return 1;case"(":case T_SYMBOL:case T_FUNCTION:case T_INTEGER:case T_DOUBLE:case T_STRING:return newline_flag?(scan_str=token_str,0):1}return 0},simplify_1_in_products=function(t,e){if(t>e&&isrational(stack[t-1])&&equaln(stack[t-1],1))return pop()},multiply_consecutive_constants=function(t,e){if(t>e+1&&isNumericAtom(stack[t-2])&&isNumericAtom(stack[t-1]))return multiply()},scan_term=function(){var t;for(t=tos,scan_factor(),parse_time_simplifications&&simplify_1_in_products(tos,t);is_factor();)"*"===token?(get_next_token(),scan_factor()):"/"===token?(simplify_1_in_products(tos,t),get_next_token(),scan_factor(),inverse()):("function"==typeof token.charCodeAt?token.charCodeAt(0):void 0)===dotprod_unicode?(get_next_token(),push_symbol(INNER),swap(),scan_factor(),list(3)):scan_factor(),parse_time_simplifications&&(multiply_consecutive_constants(tos,t),simplify_1_in_products(tos,t));return t===tos?push_integer(1):tos-t>1?(list(tos-t),push_symbol(MULTIPLY),swap(),cons()):void 0},scan_power=function(){if("^"===token)return get_next_token(),push_symbol(POWER),swap(),scan_factor(),list(3)},scan_index=function(t){for(get_next_token(),push_symbol(INDEX),swap(),scan_expression();","===token;)get_next_token(),scan_expression();return"]"!==token&&scan_error("] expected"),get_next_token(),list(tos-t)},scan_factor=function(){var t,e;for(e=tos,t=!1,"("===token?scan_subexpr():token===T_SYMBOL?scan_symbol():token===T_FUNCTION?scan_function_call_with_function_name():"["===token?scan_tensor():token===T_INTEGER?(t=!0,bignum_scan_integer(token_buf),get_next_token()):token===T_DOUBLE?(t=!0,bignum_scan_float(token_buf),get_next_token()):token===T_STRING?scan_string():scan_error("syntax error");"["===token||"("===token&&0===newline_flag&&!t;)"["===token?scan_index(e):"("===token&&scan_function_call_without_function_name();for(;"!"===token;)get_next_token(),push_symbol(FACTORIAL),swap(),list(2);for(;("function"==typeof token.charCodeAt?token.charCodeAt(0):void 0)===transpose_unicode;)get_next_token(),push_symbol(TRANSPOSE),swap(),list(2);return scan_power()},addSymbolRightOfAssignment=function(t){var e,n,r,o;if(-1===predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(t)&&-1===symbolsRightOfAssignment.indexOf(t)&&-1===symbolsRightOfAssignment.indexOf("'"+t)&&!skipRootVariableToBeSolved){for(DEBUG&&console.log("... adding symbol: "+t+" to the set of the symbols right of assignment"),r="",e=n=1,o=functionInvokationsScanningStack.length;1<=o?n<o:n>o;e=1<=o?++n:--n)""!==functionInvokationsScanningStack[e]&&(r+=functionInvokationsScanningStack[e]+"_"+e+"_");return t=r+t,symbolsRightOfAssignment.push(t)}},addSymbolLeftOfAssignment=function(t){var e,n,r,o;if(-1===predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(t)&&-1===symbolsLeftOfAssignment.indexOf(t)&&-1===symbolsLeftOfAssignment.indexOf("'"+t)&&!skipRootVariableToBeSolved){for(DEBUG&&console.log("... adding symbol: "+t+" to the set of the symbols left of assignment"),r="",e=n=1,o=functionInvokationsScanningStack.length;1<=o?n<o:n>o;e=1<=o?++n:--n)""!==functionInvokationsScanningStack[e]&&(r+=functionInvokationsScanningStack[e]+"_"+e+"_");return t=r+t,symbolsLeftOfAssignment.push(t)}},scan_symbol=function(){if(token!==T_SYMBOL&&scan_error("symbol expected"),meta_mode&&1===token_buf.length)switch(token_buf[0]){case"a":push(symbol(METAA));break;case"b":push(symbol(METAB));break;case"x":push(symbol(METAX));break;default:push(usr_symbol(token_buf))}else push(usr_symbol(token_buf));return 0===scanningParameters.length?(DEBUG&&console.log("out of scanning parameters, processing "+token_buf),lastFoundSymbol=token_buf,isSymbolLeftOfAssignment&&addSymbolLeftOfAssignment(token_buf)):(DEBUG&&console.log("still scanning parameters, skipping "+token_buf),isSymbolLeftOfAssignment&&addSymbolRightOfAssignment("'"+token_buf)),DEBUG&&console.log("found symbol: "+token_buf+" left of assignment: "+isSymbolLeftOfAssignment),isSymbolLeftOfAssignment||addSymbolRightOfAssignment(token_buf),get_next_token()},scan_string=function(){return new_string(token_buf),get_next_token()},scan_function_call_with_function_name=function(){var t,e,n,r,o,i;if(DEBUG&&console.log("-- scan_function_call_with_function_name start"),r=1,new U,o=usr_symbol(token_buf),push(o),"roots"!==(t=token_buf)&&"defint"!==t&&"sum"!==t&&"product"!==t&&"for"!==t||functionInvokationsScanningStack.push(token_buf),lastFoundSymbol=token_buf,isSymbolLeftOfAssignment||addSymbolRightOfAssignment(token_buf),get_next_token(),get_next_token(),scanningParameters.push(!0),")"!==token){for(scan_stmt(),r++;","===token;)get_next_token(),2===r&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("roots")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(t){return!new RegExp("roots_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(t)})),skipRootVariableToBeSolved=!0),2===r&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("sum")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(t){return!new RegExp("sum_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(t)})),skipRootVariableToBeSolved=!0),2===r&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("product")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(t){return!new RegExp("product_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(t)})),skipRootVariableToBeSolved=!0),2===r&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("for")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(t){return!new RegExp("for_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(t)})),skipRootVariableToBeSolved=!0),-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("defint")&&(2===r||r>2&&(r-2)%3==0)&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(t){return!new RegExp("defint_"+(functionInvokationsScanningStack.length-1)+"_"+token_buf).test(t)})),skipRootVariableToBeSolved=!0),scan_stmt(),skipRootVariableToBeSolved=!1,r++;2===r&&-1!==functionInvokationsScanningStack[functionInvokationsScanningStack.length-1].indexOf("roots")&&(symbolsRightOfAssignment=symbolsRightOfAssignment.filter((function(t){return!new RegExp("roots_"+(functionInvokationsScanningStack.length-1)+"_x").test(t)})))}for(scanningParameters.pop(),e=n=0,i=symbolsRightOfAssignment.length;0<=i?n<=i:n>=i;e=0<=i?++n:--n)null!=symbolsRightOfAssignment[e]&&("roots"===t&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("roots_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"defint"===t&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("defint_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"sum"===t&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("sum_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"product"===t&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("product_"+(functionInvokationsScanningStack.length-1)+"_"),"")),"for"===t&&(symbolsRightOfAssignment[e]=symbolsRightOfAssignment[e].replace(new RegExp("for_"+(functionInvokationsScanningStack.length-1)+"_"),"")));if(")"!==token&&scan_error(") expected"),get_next_token(),list(r),"roots"!==t&&"defint"!==t&&"sum"!==t&&"product"!==t&&"for"!==t||functionInvokationsScanningStack.pop(),t===symbol(PATTERN).printname&&(patternHasBeenFound=!0),DEBUG)return console.log("-- scan_function_call_with_function_name end")},scan_function_call_without_function_name=function(){var t;if(DEBUG&&console.log("-- scan_function_call_without_function_name start"),push_symbol(EVAL),swap(),list(2),t=1,get_next_token(),scanningParameters.push(!0),")"!==token)for(scan_stmt(),t++;","===token;)get_next_token(),scan_stmt(),t++;if(scanningParameters.pop(),")"!==token&&scan_error(") expected"),get_next_token(),list(t),DEBUG)return console.log("-- scan_function_call_without_function_name end: "+stack[tos-1])},scan_subexpr=function(){return 0,"("!==token&&scan_error("( expected"),get_next_token(),scan_stmt(),")"!==token&&scan_error(") expected"),get_next_token()},scan_tensor=function(){var t;for(t=0,"["!==token&&scan_error("[ expected"),get_next_token(),scan_stmt(),t=1;","===token;)get_next_token(),scan_stmt(),t++;return build_tensor(t),"]"!==token&&scan_error("] expected"),get_next_token()},scan_error=function(t){for(errorMessage="";input_str!==scan_str&&("\n"!==scanned[input_str]&&"\r"!==scanned[input_str]||input_str+1!==scan_str);)errorMessage+=scanned[input_str++];for(errorMessage+=" ? ";scanned[input_str]&&"\n"!==scanned[input_str]&&"\r"!==scanned[input_str];)errorMessage+=scanned[input_str++];return errorMessage+="\n",stop(t)},build_tensor=function(t){var e,n,r;for(e=0,save(),(p2=alloc_tensor(t)).tensor.ndim=1,p2.tensor.dim[0]=t,e=n=0,r=t;0<=r?n<r:n>r;e=0<=r?++n:--n)p2.tensor.elem[e]=stack[tos-t+e];return check_tensor_dimensions(p2),moveTos(tos-t),push(p2),restore()},get_next_token=function(){for(newline_flag=0;get_token(),token===T_NEWLINE;)newline_flag=1;if(DEBUG)return console.log("get_next_token token: "+token)},get_token=function(){for(;isspace(scanned[scan_str]);){if("\n"===scanned[scan_str]||"\r"===scanned[scan_str])return token=T_NEWLINE,void scan_str++;scan_str++}if(token_str=scan_str,scan_str!==scanned.length){if(!isdigit(scanned[scan_str])&&"."!==scanned[scan_str]){if(isalpha(scanned[scan_str])){for(;isalnumorunderscore(scanned[scan_str]);)scan_str++;return token="("===scanned[scan_str]?T_FUNCTION:T_SYMBOL,void update_token_buf(token_str,scan_str)}if('"'===scanned[scan_str]){for(scan_str++;'"'!==scanned[scan_str];)scan_str===scanned.length-1&&(scan_str++,scan_error("runaway string"),scan_str--),scan_str++;return scan_str++,token=T_STRING,void update_token_buf(token_str+1,scan_str-1)}if("#"===scanned[scan_str]||"-"===scanned[scan_str]&&"-"===scanned[scan_str+1]){for(;scanned[scan_str]&&"\n"!==scanned[scan_str]&&"\r"!==scanned[scan_str];)scan_str++;return scanned[scan_str]&&scan_str++,void(token=T_NEWLINE)}return":"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_QUOTASSIGN)):"="===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_EQ)):"!"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_NEQ)):"<"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_LTEQ)):">"===scanned[scan_str]&&"="===scanned[scan_str+1]?(scan_str+=2,void(token=T_GTEQ)):token=scanned[scan_str++]}for(;isdigit(scanned[scan_str]);)scan_str++;if("."===scanned[scan_str]){for(scan_str++;isdigit(scanned[scan_str]);)scan_str++;if("e"===scanned[scan_str]&&("+"===scanned[scan_str+1]||"-"===scanned[scan_str+1]||isdigit(scanned[scan_str+1])))for(scan_str+=2;isdigit(scanned[scan_str]);)scan_str++;token=T_DOUBLE}else token=T_INTEGER;update_token_buf(token_str,scan_str)}else token=""},update_token_buf=function(t,e){return token_buf=scanned.substring(t,e)},$.scan=scan,Eval_sgn=function(){return push(cadr(p1)),Eval(),sgn()},sgn=function(){return save(),yysgn(),restore()},yysgn=function(){return p1=pop(),isdouble(p1)?p1.d>0?void push_integer(1):0===p1.d?void push_integer(1):void push_integer(-1):isrational(p1)?-1===MSIGN(mmul(p1.q.a,p1.q.b))?void push_integer(-1):MZERO(mmul(p1.q.a,p1.q.b))?void push_integer(0):void push_integer(1):iscomplexnumber(p1)?(push_integer(-1),push(p1),absval(),power(),push(p1),void multiply()):isnegativeterm(p1)?(push_symbol(SGN),push(p1),negate(),list(2),push_integer(-1),void multiply()):(push_symbol(SGN),push(p1),list(2))},Eval_shape=function(){return push(cadr(p1)),Eval(),shape()},shape=function(){var t,e,n,r,o,i,a,s;for(n=0,0,0,t=[],e=[],n=r=0,a=MAXDIM;0<=a?r<a:r>a;n=0<=a?++r:--r)t[n]=0,e[n]=0;if(save(),p1=pop(),!istensor(p1))return isZeroAtomOrTensor(p1)||stop("transpose: tensor expected, 1st arg is not a tensor"),push(zero),void restore();for(i=p1.tensor.ndim,(p2=alloc_tensor(i)).tensor.ndim=1,p2.tensor.dim[0]=i,n=o=0,s=i;0<=s?o<s:o>s;n=0<=s?++o:--o)push_integer(p1.tensor.dim[n]),p2.tensor.elem[n]=pop();return push(p2),restore()},Eval_simfac=function(){return push(cadr(p1)),Eval(),simfac()},simfac=function(){var t;if(t=0,save(),p1=pop(),car(p1)===symbol(ADD)){for(t=tos,p1=cdr(p1);p1!==symbol(NIL);)push(car(p1)),simfac_term(),p1=cdr(p1);add_all(tos-t)}else push(p1),simfac_term();return restore()},simfac_term=function(){var t;if(0,save(),p1=pop(),car(p1)!==symbol(MULTIPLY))return push(p1),void restore();for(t=tos,p1=cdr(p1);p1!==symbol(NIL);)push(car(p1)),p1=cdr(p1);for(;yysimfac(t);)1;return multiply_all_noexpand(tos-t),restore()},yysimfac=function(t){var e,n,r,o,i,a,s,u;for(e=0,n=0,e=r=i=t,a=tos;i<=a?r<a:r>a;e=i<=a?++r:--r)for(p1=stack[e],n=o=s=t,u=tos;s<=u?o<u:o>u;n=s<=u?++o:--o)if(e!==n){if(p2=stack[n],car(p1)===symbol(FACTORIAL)&&car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&equal(cadr(p1),cadr(p2)))return push(cadr(p1)),push(one),subtract(),factorial(),stack[e]=pop(),stack[n]=one,1;if(car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&caadr(p2)===symbol(FACTORIAL)&&equal(p1,cadadr(p2)))return push(p1),push_integer(-1),add(),factorial(),reciprocate(),stack[e]=pop(),stack[n]=one,1;if(car(p2)===symbol(FACTORIAL)&&(push(p1),push(cadr(p2)),subtract(),p3=pop(),isplusone(p3)))return push(p1),factorial(),stack[e]=pop(),stack[n]=one,1;if(car(p1)===symbol(POWER)&&isminusone(caddr(p1))&&car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&caadr(p2)===symbol(FACTORIAL)&&(push(cadr(p1)),push(cadr(cadr(p2))),subtract(),p3=pop(),isplusone(p3)))return push(cadr(p1)),factorial(),reciprocate(),stack[e]=pop(),stack[n]=one,1;if(car(p1)===symbol(FACTORIAL)&&car(p2)===symbol(POWER)&&isminusone(caddr(p2))&&caadr(p2)===symbol(FACTORIAL)){if(push(cadr(p1)),push(cadr(cadr(p2))),subtract(),p3=pop(),isplusone(p3))return stack[e]=cadr(p1),stack[n]=one,1;if(isminusone(p3))return push(cadr(cadr(p2))),reciprocate(),stack[e]=pop(),stack[n]=one,1;if(equaln(p3,2))return stack[e]=cadr(p1),push(cadr(p1)),push_integer(-1),add(),stack[n]=pop(),1;if(equaln(p3,-2))return push(cadr(cadr(p2))),reciprocate(),stack[e]=pop(),push(cadr(cadr(p2))),push_integer(-1),add(),reciprocate(),stack[n]=pop(),1}}return 0},Eval_simplify=function(){return push(cadr(p1)),runUserDefinedSimplifications(),Eval(),simplify()},runUserDefinedSimplifications=function(){var t,e,n,r,o,i,a,s,u,p;if(0!==userSimplificationsInListForm.length&&!Find(cadr(p1),symbol(INTEGRAL))){for(u=expanding,expanding=!1,DEBUG&&console.log("runUserDefinedSimplifications passed: "+stack[tos-1].toString()),Eval(),DEBUG&&console.log("runUserDefinedSimplifications after eval no expanding: "+stack[tos-1].toString()),expanding=u,p1=stack[tos-1],DEBUG&&console.log("patterns to be checked: "),r=0,o=userSimplificationsInListForm.length;r<o;r++)n=userSimplificationsInListForm[r],DEBUG&&console.log("..."+n);for(t=!0,s=0;t&&s<MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES;)for(t=!1,s++,a=0,i=userSimplificationsInListForm.length;a<i;a++){for(n=userSimplificationsInListForm[a],p=!0,e=0;p&&e<MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE;)e++,DEBUG&&console.log("simplify - tos: "+tos+" checking pattern: "+n+" on: "+p1),push_symbol(NIL),(p=transform(n,!0))&&(t=!0),p1=stack[tos-1],DEBUG&&console.log("p1 at this stage of simplification: "+p1);e===MAX_CONSECUTIVE_APPLICATIONS_OF_SINGLE_RULE&&stop("maximum application of single transformation rule exceeded: "+n)}if(s===MAX_CONSECUTIVE_APPLICATIONS_OF_ALL_RULES&&stop("maximum application of all transformation rules exceeded "),DEBUG)return console.log("METAX = "+get_binding(symbol(METAX))),console.log("METAA = "+get_binding(symbol(METAA))),console.log("METAB = "+get_binding(symbol(METAB)))}},simplifyForCodeGeneration=function(){return save(),runUserDefinedSimplifications(),codeGen=!0,simplify_main(),codeGen=!1,restore()},simplify=function(){return save(),simplify_main(),restore()},simplify_main=function(){var args,fbody;if(p1=pop(),codeGen&&car(p1)===symbol(FUNCTION)&&(fbody=cadr(p1),push(fbody),eval(),simplify(),p3=pop(),args=caddr(p1),push_symbol(FUNCTION),push(p3),push(args),list(3),p1=pop()),!istensor(p1))return Find(p1,symbol(FACTORIAL))&&(push(p1),simfac(),p2=pop(),push(p1),rationalize(),simfac(),p3=pop(),p1=count(p2)<count(p3)?p2:p3),f10(),f1(),f2(),f3(),f4(),f5(),f9(),simplify_polarRect(),do_simplify_nested_radicals&&simplify_nested_radicals()?(DEBUG&&console.log("de-nesting successful into: "+p1.toString()),push(p1),void simplify()):(simplify_rectToClock(),simplify_rational_expressions(),push(p1));simplify_tensor()},simplify_tensor=function(){var t,e,n,r,o;for(t=0,(p2=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,t=e=0,r=p1.tensor.ndim;0<=r?e<r:e>r;t=0<=r?++e:--e)p2.tensor.dim[t]=p1.tensor.dim[t];for(t=n=0,o=p1.tensor.nelem;0<=o?n<o:n>o;t=0<=o?++n:--n)push(p1.tensor.elem[t]),simplify(),p2.tensor.elem[t]=pop();return check_tensor_dimensions(p2),isZeroAtomOrTensor(p2)&&(p2=zero),push(p2)},f1=function(){if(car(p1)===symbol(ADD))return push(p1),rationalize(),p2=pop(),count(p2)<count(p1)?p1=p2:void 0},f2=function(){if(car(p1)===symbol(ADD))return push(p1),Condense(),p2=pop(),count(p2)<=count(p1)?p1=p2:void 0},f3=function(){if(push(p1),rationalize(),negate(),rationalize(),negate(),rationalize(),p2=pop(),count(p2)<count(p1))return p1=p2},f10=function(){var t,e,n,r;if(n=car(p1),cdr(p1),(n===symbol(MULTIPLY)||isinnerordot(p1))&&car(car(cdr(p1)))===symbol(TRANSPOSE)&&car(car(cdr(cdr(p1))))===symbol(TRANSPOSE)&&(DEBUG&&console.log("maybe collecting a transpose "+p1),t=cadr(car(cdr(p1))),e=cadr(car(cdr(cdr(p1)))),n===symbol(MULTIPLY)?(push(t),push(e),multiply()):isinnerordot(p1)&&(push(e),push(t),inner()),push_integer(1),push_integer(2),r=expanding,expanding=!1,transpose(),expanding=r,p2=pop(),count(p2)<count(p1)&&(p1=p2),DEBUG))return console.log("collecting a transpose "+p2)},f4=function(){if(!isZeroAtomOrTensor(p1))return push(p1),rationalize(),inverse(),rationalize(),inverse(),rationalize(),p2=pop(),count(p2)<count(p1)?p1=p2:void 0},simplify_trig=function(){return save(),p1=pop(),f5(),push(p1),restore()},f5=function(){if(0!==Find(p1,symbol(SIN))||0!==Find(p1,symbol(COS)))return trigmode=1,push(p2=p1),Eval(),p3=pop(),trigmode=2,push(p2),Eval(),p4=pop(),trigmode=0,(count(p4)<count(p3)||nterms(p4)<nterms(p3))&&(p3=p4),count(p3)<count(p1)||nterms(p3)<nterms(p1)?p1=p3:void 0},f9=function(){var t,e;if(car(p1)===symbol(ADD)){for(push_integer(0),p2=cdr(p1);iscons(p2);)push(car(p2)),simplify(),add(),t=p1,e=p2,p1=pop(),simplify_rational_expressions(),push(p1),p1=t,p2=cdr(p2=e);return p2=pop(),count(p2)<count(p1)?p1=p2:void 0}},simplify_rational_expressions=function(){var t,e,n,r;if(push(p1),denominator(),t=pop(),!isone(t)&&(push(p1),numerator(),e=pop(),!isone(e)&&(n=areunivarpolysfactoredorexpandedform(e,t))&&(push(e),push(t),gcd(),push(n),factor(),r=pop(),!isone(r))))return push(e),push(n),factor(),push(r),inverse(),multiply_noexpand(),simplify(),stack[tos-1].toString(),push(t),push(n),factor(),push(r),inverse(),multiply_noexpand(),simplify(),stack[tos-1].toString(),divide(),Condense(),stack[tos-1].toString(),p2=pop(),count(p2)<count(p1)?p1=p2:void 0},simplify_rectToClock=function(){if(0!==Find(p1,symbol(SIN))||0!==Find(p1,symbol(COS)))return push(p1),Eval(),clockform(),p2=pop(),DEBUG&&console.log("before simplification clockform: "+p1+" after: "+p2),count(p2)<count(p1)?p1=p2:void 0},simplify_polarRect=function(){if(push(p1),polarRectAMinusOneBase(),Eval(),p2=pop(),count(p2)<count(p1))return p1=p2},polarRectAMinusOneBase=function(){var t;if(save(),p1=pop(),isimaginaryunit(p1))return push(p1),void restore();if(equal(car(p1),symbol(POWER))&&isminusone(cadr(p1)))push(one),negate(),push(caddr(p1)),polarRectAMinusOneBase(),power(),polar(),rect();else if(iscons(p1)){for(t=tos;iscons(p1);)push(car(p1)),polarRectAMinusOneBase(),p1=cdr(p1);list(tos-t)}else push(p1);restore()},nterms=function(t){return car(t)!==symbol(ADD)?1:length(t)-1},simplify_nested_radicals=function(){var t,e,n,r;return recursionLevelNestedRadicalsRemoval>0?(DEBUG&&console.log("denesting bailing out because of too much recursion"),!1):(push(p1),r=take_care_of_nested_radicals(),n=stack[tos-1],t=expanding,expanding=0,yycondense(),expanding=t,e=pop(),countOccurrencesOfSymbol(symbol(POWER),n)<countOccurrencesOfSymbol(symbol(POWER),e)?push(n):push(e),p1=pop(),r)},take_care_of_nested_radicals=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_,b,x,E,w,A,I,R,T,S,C,N,k,O,D,M,L,P,B;if(recursionLevelNestedRadicalsRemoval>0)return DEBUG&&console.log("denesting bailing out because of too much recursion"),!1;if(save(),p1=pop(),equal(car(p1),symbol(POWER))){if(i=cadr(p1),l=caddr(p1),!isminusone(l)&&equal(car(i),symbol(ADD))&&isfraction(l)&&(equalq(l,1,3)||equalq(l,1,2))){for(d=cadr(i),push(d),take_care_of_nested_radicals(),pop(),L=caddr(i),push(L),take_care_of_nested_radicals(),pop(),R=0,p=i;cdr(p)!==symbol(NIL);)R++,p=cdr(p);if(R>2)return push(p1),restore(),!1;if(u=null,s=[],B=[],car(L)===symbol(MULTIPLY)){if(P=cdr(L),iscons(P))for(;iscons(P);)O=car(P),car(O)===symbol(POWER)?(m=cadr(O),g=caddr(O),equalq(g,1,2)&&(null==u?(u=g,s.push(m)):equal(g,u)&&s.push(m))):B.push(O),P=cdr(P)}else car(L)===symbol(POWER)&&(m=cadr(L),g=caddr(L),null==u&&equalq(g,1,2)&&(u=g,s.push(m)));if(0===s.length)return push(p1),restore(),!1;for(t=d,push_integer(1),v=0,y=s.length;v<y;v++)h=s[v],push(h),multiply();for(n=pop(),push_integer(1),A=0,_=B.length;A<_;A++)h=B[A],push(h),multiply();if(e=pop(),equalq(l,1,3)){if(push(t),negate(),push(n),multiply(),push(e),divide(),a=pop(),push(a),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return push(p1),restore(),!1;if(push(a),push_integer(3),push(n),multiply(),a=pop(),push(a),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return pop(),push(p1),restore(),!1;if(push(a),push(symbol(SECRETX)),multiply(),push_integer(-3),push(t),multiply(),push(e),divide(),a=pop(),push(a),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return pop(),pop(),push(p1),restore(),!1;push(a),push(symbol(SECRETX)),push_integer(2),power(),multiply(),push_integer(1),push(symbol(SECRETX)),push_integer(3),power(),multiply(),add(),add(),add()}else if(equalq(l,1,2)){if(push(n),a=pop(),push(a),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return push(p1),restore(),!1;if(push(a),push_integer(-2),push(t),multiply(),push(e),divide(),a=pop(),push(a),real(),yyfloat(),Math.abs(pop().d)>Math.pow(2,32))return pop(),push(p1),restore(),!1;push(a),push(symbol(SECRETX)),multiply(),push_integer(1),push(symbol(SECRETX)),push_integer(2),power(),multiply(),add(),add()}if(push(symbol(SECRETX)),recursionLevelNestedRadicalsRemoval++,roots(),recursionLevelNestedRadicalsRemoval--,equal(stack[tos-1],symbol(NIL)))return DEBUG&&console.log("roots bailed out because of too much recursion"),pop(),push(p1),restore(),!1;for(k=[],I=0,b=(M=stack[tos-1].tensor.elem).length;I<b;I++)c=M[I],Find(c,symbol(POWER))||k.push(c);if(pop(),0===k.length)return push(p1),restore(),!1;for(N=[],D=[],T=0,x=k.length;T<x;T++)h=k[T],push(h),real(),yyfloat(),N.push(h),D.push(pop().d);return r=N[D.indexOf(Math.max.apply(Math,D))],equalq(l,1,3)?(push(t),push(r),push_integer(3),power(),push_integer(3),push(n),multiply(),push(r),multiply(),add(),divide(),push_rational(1,3),power()):equalq(l,1,2)&&(push(t),push(r),push_integer(2),power(),push(n),add(),divide(),push_rational(1,2),power()),null==(w=pop())?(push(p1),restore(),!1):(push(w),push(r),multiply(),equalq(l,1,3)?(E=pop(),push(w),push(n),push_rational(1,2),power(),multiply(),push(E),add(),simplify()):equalq(l,1,2)&&(E=pop(),push(w),push(n),push_rational(1,2),power(),multiply(),push(E),add(),simplify(),S=pop(),push(S),real(),yyfloat(),C=pop(),isnegativenumber(C)?(push(w),negate(),w=pop(),push(E),negate(),E=pop(),push(w),push(n),push_rational(1,2),power(),multiply(),push(E),add(),simplify()):push(S)),p1=pop(),push(p1),restore(),!0)}return push(p1),restore(),!1}if(iscons(p1)){for(f=tos,o=!1;iscons(p1);)push(car(p1)),o=o||take_care_of_nested_radicals(),p1=cdr(p1);return list(tos-f),restore(),o}return push(p1),restore(),!1},Eval_sin=function(){return push(cadr(p1)),Eval(),sine()},sine=function(){return save(),p1=pop(),car(p1)===symbol(ADD)?sine_of_angle_sum():sine_of_angle(),restore()},sine_of_angle_sum=function(){for(p2=cdr(p1);iscons(p2);){if(p4=car(p2),isnpi(p4))return push(p1),push(p4),subtract(),p3=pop(),push(p3),sine(),push(p4),cosine(),multiply(),push(p3),cosine(),push(p4),sine(),multiply(),void add();p2=cdr(p2)}return sine_of_angle()},sine_of_angle=function(){var t,e;if(car(p1)!==symbol(ARCSIN)){if(isdouble(p1))return t=Math.sin(p1.d),Math.abs(t)<1e-10&&(t=0),void push_double(t);if(isnegative(p1))return push(p1),negate(),sine(),void negate();if(car(p1)===symbol(ARCTAN))return push(cadr(p1)),push_integer(1),push(cadr(p1)),push_integer(2),power(),add(),push_rational(-1,2),power(),void multiply();if(push(p1),push_integer(180),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),divide(),(e=pop_integer())<0||isNaN(e))return push(symbol(SIN)),push(p1),void list(2);switch(e%360){case 0:case 180:return push_integer(0);case 30:case 150:return push_rational(1,2);case 210:case 330:return push_rational(-1,2);case 45:case 135:return push_rational(1,2),push_integer(2),push_rational(1,2),power(),multiply();case 225:case 315:return push_rational(-1,2),push_integer(2),push_rational(1,2),power(),multiply();case 60:case 120:return push_rational(1,2),push_integer(3),push_rational(1,2),power(),multiply();case 240:case 300:return push_rational(-1,2),push_integer(3),push_rational(1,2),power(),multiply();case 90:return push_integer(1);case 270:return push_integer(-1);default:return push(symbol(SIN)),push(p1),list(2)}}else push(cadr(p1))},Eval_sinh=function(){return push(cadr(p1)),Eval(),ysinh()},ysinh=function(){return save(),yysinh(),restore()},yysinh=function(){var t;if(t=0,p1=pop(),car(p1)!==symbol(ARCSINH)){if(isdouble(p1))return t=Math.sinh(p1.d),Math.abs(t)<1e-10&&(t=0),void push_double(t);if(!isZeroAtomOrTensor(p1))return push_symbol(SINH),push(p1),list(2);push(zero)}else push(cadr(p1))},subst=function(){var t,e,n,r,o;if(t=0,save(),p3=pop(),(p2=pop())!==symbol(NIL)&&p3!==symbol(NIL)){if(p1=pop(),istensor(p1)){for((p4=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,t=e=0,r=p1.tensor.ndim;0<=r?e<r:e>r;t=0<=r?++e:--e)p4.tensor.dim[t]=p1.tensor.dim[t];for(t=n=0,o=p1.tensor.nelem;0<=o?n<o:n>o;t=0<=o?++n:--n)push(p1.tensor.elem[t]),push(p2),push(p3),subst(),p4.tensor.elem[t]=pop(),check_tensor_dimensions(p4);push(p4)}else equal(p1,p2)?push(p3):iscons(p1)?(push(car(p1)),push(p2),push(p3),subst(),push(cdr(p1)),push(p2),push(p3),subst(),cons()):push(p1);return restore()}restore()},Eval_sum=function(){var t,e,n,r,o,i,a,s;if(e=0,0,0,t=cadr(p1),n=caddr(p1),issymbol(n)||stop("sum: 2nd arg?"),push(cadddr(p1)),Eval(),r=pop_integer(),isNaN(r))push(p1);else{if(push(caddddr(p1)),Eval(),o=pop_integer(),!isNaN(o)){for(p4=get_binding(n),push_integer(0),e=i=a=r,s=o;a<=s?i<=s:i>=s;e=a<=s?++i:--i)push_integer(e),p5=pop(),set_binding(n,p5),push(t),Eval(),add();return set_binding(n,p4)}push(p1)}},Eval_tan=function(){return push(cadr(p1)),Eval(),tangent()},tangent=function(){return save(),yytangent(),restore()},yytangent=function(){var t,e;if(0,t=0,p1=pop(),car(p1)!==symbol(ARCTAN)){if(isdouble(p1))return t=Math.tan(p1.d),Math.abs(t)<1e-10&&(t=0),void push_double(t);if(isnegative(p1))return push(p1),negate(),tangent(),void negate();if(push(p1),push_integer(180),multiply(),evaluatingAsFloats?push_double(Math.PI):push_symbol(PI),divide(),(e=pop_integer())<0||isNaN(e))return push(symbol(TAN)),push(p1),void list(2);switch(e%360){case 0:case 180:return push_integer(0);case 30:case 210:return push_rational(1,3),push_integer(3),push_rational(1,2),power(),multiply();case 150:case 330:return push_rational(-1,3),push_integer(3),push_rational(1,2),power(),multiply();case 45:case 225:return push_integer(1);case 135:case 315:return push_integer(-1);case 60:case 240:return push_integer(3),push_rational(1,2),power();case 120:case 300:return push_integer(3),push_rational(1,2),power(),negate();default:return push(symbol(TAN)),push(p1),list(2)}}else push(cadr(p1))},Eval_tanh=function(){var t;if(t=0,push(cadr(p1)),Eval(),p1=pop(),car(p1)!==symbol(ARCTANH)){if(isdouble(p1))return t=Math.tanh(p1.d),Math.abs(t)<1e-10&&(t=0),void push_double(t);if(!isZeroAtomOrTensor(p1))return push_symbol(TANH),push(p1),list(2);push(zero)}else push(cadr(p1))},Eval_taylor=function(){return p1=cdr(p1),push(car(p1)),Eval(),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?guess():push(p2),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(24):push(p2),p1=cdr(p1),push(car(p1)),Eval(),(p2=pop())===symbol(NIL)?push_integer(0):push(p2),taylor()},taylor=function(){var t,e,n,r;if(t=0,0,save(),p4=pop(),p3=pop(),p2=pop(),p1=pop(),push(p3),e=pop_integer(),isNaN(e))return push_symbol(TAYLOR),push(p1),push(p2),push(p3),push(p4),list(5),void restore();for(push(p1),push(p2),push(p4),subst(),Eval(),push_integer(1),p5=pop(),t=n=1,r=e;(1<=r?n<=r:n>=r)&&(push(p1),push(p2),derivative(),p1=pop(),!isZeroAtomOrTensor(p1));t=1<=r?++n:--n)push(p5),push(p2),push(p4),subtract(),multiply(),p5=pop(),push(p1),push(p2),push(p4),subst(),Eval(),push(p5),multiply(),push_integer(t),factorial(),divide(),add();return restore()},Eval_tensor=function(){var t,e,n,r,o,i,a,s,u;for(n=0,0,0,check_tensor_dimensions(p1),a=p1.tensor.nelem,i=p1.tensor.ndim,(p2=alloc_tensor(a)).tensor.ndim=i,n=r=0,s=i;0<=s?r<s:r>s;n=0<=s?++r:--r)p2.tensor.dim[n]=p1.tensor.dim[n];for(t=p1.tensor.elem,e=p2.tensor.elem,check_tensor_dimensions(p2),n=o=0,u=a;0<=u?o<u:o>u;n=0<=u?++o:--o)push(t[n]),Eval(),e[n]=pop();return check_tensor_dimensions(p1),check_tensor_dimensions(p2),push(p2),promote_tensor()},tensor_plus_tensor=function(){var t,e,n,r,o,i,a,s,u,p,c,l;if(r=0,0,0,save(),p2=pop(),(s=(p1=pop()).tensor.ndim)!==p2.tensor.ndim)return push(symbol(NIL)),void restore();for(r=o=0,p=s;0<=p?o<p:o>p;r=0<=p?++o:--o)if(p1.tensor.dim[r]!==p2.tensor.dim[r])return push(symbol(NIL)),void restore();for(u=p1.tensor.nelem,(p3=alloc_tensor(u)).tensor.ndim=s,r=i=0,c=s;0<=c?i<c:i>c;r=0<=c?++i:--i)p3.tensor.dim[r]=p1.tensor.dim[r];for(t=p1.tensor.elem,e=p2.tensor.elem,n=p3.tensor.elem,r=a=0,l=u;0<=l?a<l:a>l;r=0<=l?++a:--a)push(t[r]),push(e[r]),add(),n[r]=pop();return push(p3),restore()},tensor_times_scalar=function(){var t,e,n,r,o,i,a,s,u;for(n=0,0,0,save(),p2=pop(),i=(p1=pop()).tensor.ndim,a=p1.tensor.nelem,(p3=alloc_tensor(a)).tensor.ndim=i,n=r=0,s=i;0<=s?r<s:r>s;n=0<=s?++r:--r)p3.tensor.dim[n]=p1.tensor.dim[n];for(t=p1.tensor.elem,e=p3.tensor.elem,n=o=0,u=a;0<=u?o<u:o>u;n=0<=u?++o:--o)push(t[n]),push(p2),multiply(),e[n]=pop();return push(p3),restore()},scalar_times_tensor=function(){var t,e,n,r,o,i,a,s,u;for(n=0,0,0,save(),p2=pop(),p1=pop(),i=p2.tensor.ndim,a=p2.tensor.nelem,(p3=alloc_tensor(a)).tensor.ndim=i,n=r=0,s=i;0<=s?r<s:r>s;n=0<=s?++r:--r)p3.tensor.dim[n]=p2.tensor.dim[n];for(t=p2.tensor.elem,e=p3.tensor.elem,n=o=0,u=a;0<=u?o<u:o>u;n=0<=u?++o:--o)push(p1),push(t[n]),multiply(),e[n]=pop();return push(p3),restore()},check_tensor_dimensions=function(t){t.tensor.nelem!==t.tensor.elem.length&&console.log("something wrong in tensor dimensions")},is_square_matrix=function(t){return istensor(t)&&2===t.tensor.ndim&&t.tensor.dim[0]===t.tensor.dim[1]?1:0},d_tensor_tensor=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d;if(r=0,o=0,0,0,u=p1.tensor.ndim,p=p1.tensor.nelem,u+1>=MAXDIM)return push_symbol(DERIVATIVE),push(p1),push(p2),void list(3);for((p3=alloc_tensor(p*p2.tensor.nelem)).tensor.ndim=u+1,r=i=0,c=u;0<=c?i<c:i>c;r=0<=c?++i:--i)p3.tensor.dim[r]=p1.tensor.dim[r];for(p3.tensor.dim[u]=p2.tensor.dim[0],t=p1.tensor.elem,e=p2.tensor.elem,n=p3.tensor.elem,r=a=0,l=p;0<=l?a<l:a>l;r=0<=l?++a:--a)for(o=s=0,d=p2.tensor.nelem;0<=d?s<d:s>d;o=0<=d?++s:--s)push(t[r]),push(e[o]),derivative(),n[r*p2.tensor.nelem+o]=pop();return push(p3)},d_scalar_tensor=function(){var t,e,n,r,o;for((p3=alloc_tensor(p2.tensor.nelem)).tensor.ndim=1,p3.tensor.dim[0]=p2.tensor.dim[0],t=p2.tensor.elem,e=p3.tensor.elem,n=r=0,o=p2.tensor.nelem;0<=o?r<o:r>o;n=0<=o?++r:--r)push(p1),push(t[n]),derivative(),e[n]=pop();return push(p3)},d_tensor_scalar=function(){var t,e,n,r,o,i,a;for(n=0,(p3=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,n=r=0,i=p1.tensor.ndim;0<=i?r<i:r>i;n=0<=i?++r:--r)p3.tensor.dim[n]=p1.tensor.dim[n];for(t=p1.tensor.elem,e=p3.tensor.elem,n=o=0,a=p1.tensor.nelem;0<=a?o<a:o>a;n=0<=a?++o:--o)push(t[n]),push(p2),derivative(),e[n]=pop();return push(p3)},compare_tensors=function(t,e){var n,r,o,i,a;if(n=0,t.tensor.ndim<e.tensor.ndim)return-1;if(t.tensor.ndim>e.tensor.ndim)return 1;for(n=r=0,i=t.tensor.ndim;0<=i?r<i:r>i;n=0<=i?++r:--r){if(t.tensor.dim[n]<e.tensor.dim[n])return-1;if(t.tensor.dim[n]>e.tensor.dim[n])return 1}for(n=o=0,a=t.tensor.nelem;0<=a?o<a:o>a;n=0<=a?++o:--o)if(!equal(t.tensor.elem[n],e.tensor.elem[n]))return lessp(t.tensor.elem[n],e.tensor.elem[n])?-1:1;return 0},power_tensor=function(){var t,e,n,r,o,i,a,s;if(t=0,0,o=0,e=p1.tensor.ndim-1,p1.tensor.dim[0]!==p1.tensor.dim[e])return push_symbol(POWER),push(p1),push(p2),void list(3);if(push(p2),o=pop_integer(),isNaN(o))return push_symbol(POWER),push(p1),push(p2),void list(3);if(0===o){for(2!==p1.tensor.ndim&&stop("power(tensor,0) with tensor rank not equal to 2"),o=p1.tensor.dim[0],(p1=alloc_tensor(o*o)).tensor.ndim=2,p1.tensor.dim[0]=o,p1.tensor.dim[1]=o,t=n=0,i=o;0<=i?n<i:n>i;t=0<=i?++n:--n)p1.tensor.elem[o*t+t]=one;return check_tensor_dimensions(p1),void push(p1)}for(o<0&&(o=-o,push(p1),inv(),p1=pop()),push(p1),s=[],t=r=1,a=o;(1<=a?r<a:r>a)&&(push(p1),inner(),!isZeroAtomOrTensor(stack[tos-1]));t=1<=a?++r:--r)s.push(void 0);return s},copy_tensor=function(){var t,e,n,r,o;for(t=0,save(),p1=pop(),(p2=alloc_tensor(p1.tensor.nelem)).tensor.ndim=p1.tensor.ndim,t=e=0,r=p1.tensor.ndim;0<=r?e<r:e>r;t=0<=r?++e:--e)p2.tensor.dim[t]=p1.tensor.dim[t];for(t=n=0,o=p1.tensor.nelem;0<=o?n<o:n>o;t=0<=o?++n:--n)p2.tensor.elem[t]=p1.tensor.elem[t];return check_tensor_dimensions(p1),check_tensor_dimensions(p2),push(p2),restore()},promote_tensor=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d,f,h;if(t=0,e=0,n=0,0,0,save(),p1=pop(),!istensor(p1))return push(p1),void restore();for(p2=p1.tensor.elem[0],t=r=1,c=p1.tensor.nelem;1<=c?r<c:r>c;t=1<=c?++r:--r)compatible(p2,p1.tensor.elem[t])||stop("Cannot promote tensor due to inconsistent tensor components.");if(!istensor(p2))return push(p1),void restore();for((a=p1.tensor.ndim+p2.tensor.ndim)>MAXDIM&&stop("tensor rank > "+MAXDIM),s=p1.tensor.nelem*p2.tensor.nelem,(p3=alloc_tensor(s)).tensor.ndim=a,t=o=0,l=p1.tensor.ndim;0<=l?o<l:o>l;t=0<=l?++o:--o)p3.tensor.dim[t]=p1.tensor.dim[t];for(e=i=0,d=p2.tensor.ndim;0<=d?i<d:i>d;e=0<=d?++i:--i)p3.tensor.dim[t+e]=p2.tensor.dim[e];for(n=0,t=u=0,f=p1.tensor.nelem;0<=f?u<f:u>f;t=0<=f?++u:--u)for(e=p=0,h=(p2=p1.tensor.elem[t]).tensor.nelem;0<=h?p<h:p>h;e=0<=h?++p:--p)p3.tensor.elem[n++]=p2.tensor.elem[e];return check_tensor_dimensions(p2),check_tensor_dimensions(p3),push(p3),restore()},compatible=function(t,e){var n,r,o;if(!istensor(t)&&!istensor(e))return 1;if(!istensor(t)||!istensor(e))return 0;if(t.tensor.ndim!==e.tensor.ndim)return 0;for(n=r=0,o=t.tensor.ndim;0<=o?r<o:r>o;n=0<=o?++r:--r)if(t.tensor.dim[n]!==e.tensor.dim[n])return 0;return 1},Eval_test=function(){var t,e;for(e=p1,p1=cdr(p1);iscons(p1);){if(cdr(p1)===symbol(NIL))return push(car(p1)),void Eval();if(null==(t=isZeroLikeOrNonZeroLikeOrUndetermined(car(p1))))return void push(e);if(t)return push(cadr(p1)),void Eval();p1=cddr(p1)}return push_integer(0)},Eval_testeq=function(){var t,e,n;if(e=p1,push(cadr(p1)),Eval(),push(caddr(p1)),Eval(),subtract(),n=pop(),t=isZeroLikeOrNonZeroLikeOrUndetermined(n))push_integer(0);else if(null==t||t)if(push(cadr(p1)),Eval(),simplify(),push(caddr(p1)),Eval(),simplify(),subtract(),n=pop(),t=isZeroLikeOrNonZeroLikeOrUndetermined(n))push_integer(0);else{if(null==t||t)return push(e);push_integer(1)}else push_integer(1)},Eval_testge=function(){var t,e;if(e=p1,null!=(t=cmp_args()))return push_integer(t>=0?1:0);push(e)},Eval_testgt=function(){var t,e;if(e=p1,null!=(t=cmp_args()))return push_integer(t>0?1:0);push(e)},Eval_testle=function(){var t,e;if(e=p1,null!=(t=cmp_args()))return push_integer(t<=0?1:0);push(e)},Eval_testlt=function(){var t,e;if(e=p1,null!=(t=cmp_args()))return push_integer(t<0?1:0);push(e)},Eval_not=function(){var t,e;return e=p1,null==(t=isZeroLikeOrNonZeroLikeOrUndetermined(cadr(p1)))?push(e):push_integer(t?0:1)},Eval_and=function(){var t,e,n,r;for(t=cdr(r=p1),n=!1;iscons(t);)if(null==(e=isZeroLikeOrNonZeroLikeOrUndetermined(car(t))))n=!0,t=cdr(t);else if(e)t=cdr(t);else if(!e)return void push_integer(0);return n?push(r):push_integer(1)},Eval_or=function(){var t,e,n,r;for(e=cdr(r=p1),n=!1;iscons(e);)if(null==(t=isZeroLikeOrNonZeroLikeOrUndetermined(car(e))))n=!0,e=cdr(e);else{if(t)return void push_integer(1);t||(e=cdr(e))}return n?push(r):push_integer(0)},cmp_args=function(){var t;if(t=0,push(cadr(p1)),Eval(),simplify(),push(caddr(p1)),Eval(),simplify(),subtract(),(p1=pop()).k!==NUM&&p1.k!==DOUBLE&&(push(p1),yyfloat(),Eval(),p1=pop()),isZeroAtomOrTensor(p1))return 0;switch(p1.k){case NUM:t=-1===MSIGN(p1.q.a)?-1:1;break;case DOUBLE:t=p1.d<0?-1:1;break;default:t=null}return t},transform=function(t,e){var n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y;if(0,save(),p1=null,p4=pop(),p3=pop(),DEBUG&&console.log("         !!!!!!!!!   transform on: "+p3),saveMetaBindings(),set_binding(symbol(METAX),p4),g=tos,push_integer(1),push(p3),push(p4),polyform(),push(p4),n=tos-2,decomp(e),c=tos-n,DEBUG)for(console.log("  "+c+" decomposed elements ====== "),o=i=0,l=c;0<=l?i<l:i>l;o=0<=l?++i:--i)console.log("  decomposition element "+o+": "+stack[tos-1-o]);if(v=!1,e){if(!isNumericAtom(p3))if(m=t,DEBUG&&console.log("applying transform: "+m),DEBUG&&console.log("scanning table entry "+m),push(m),push(symbol(SYMBOL_A_UNDERSCORE)),push(symbol(METAA)),subst(),push(symbol(SYMBOL_B_UNDERSCORE)),push(symbol(METAB)),subst(),push(symbol(SYMBOL_X_UNDERSCORE)),push(symbol(METAX)),subst(),p1=pop(),p5=car(p1),DEBUG&&console.log("template expression: "+p5),p6=cadr(p1),p7=cddr(p1),f_equals_a(g,e))v=!0;else{for(DEBUG&&console.log("p3 at this point: "+p3),y=[],DEBUG&&console.log("car(p3): "+car(p3)),iscons(d=p3)&&(y.push(car(p3)),d=cdr(p3));iscons(d);)f=car(d),d=cdr(d),DEBUG&&console.log("tos before recursive transform: "+tos),push(f),push_symbol(NIL),DEBUG&&console.log("testing: "+f),DEBUG&&console.log("about to try to simplify other term: "+f),h=transform(t,e),v=v||h,y.push(pop()),DEBUG&&console.log("tried to simplify other term: "+f+" ...successful?: "+h+" ...transformed: "+y[y.length-1]);if(0!==y.length){for(u=0,a=y.length;u<a;u++)o=y[u],push(o);list(y.length),p6=pop()}}}else for(p=0,s=t.length;p<s;p++)if(r=t[p],DEBUG&&(console.log("scanning table entry "+r),(r+"").indexOf("f(sqrt(a+b*x),2/3*1/b*sqrt((a+b*x)^3))")),r&&(scan_meta(r),p1=pop(),p5=cadr(p1),p6=caddr(p1),p7=cdddr(p1),f_equals_a(g,e))){v=!0;break}return moveTos(g),v?(push(p6),Eval(),p1=pop(),v=!0):p1=e?p3:symbol(NIL),restoreMetaBindings(),push(p1),restore(),v},saveMetaBindings=function(){return push(get_binding(symbol(METAA))),push(get_binding(symbol(METAB))),push(get_binding(symbol(METAX)))},restoreMetaBindings=function(){return set_binding(symbol(METAX),pop()),set_binding(symbol(METAB),pop()),set_binding(symbol(METAA),pop())},f_equals_a=function(t,e){var n,r,o,i,a,s,u,p,c;for(n=0,r=0,n=o=s=t,u=tos;s<=u?o<u:o>u;n=s<=u?++o:--o)for(set_binding(symbol(METAA),stack[n]),DEBUG&&console.log("  binding METAA to "+get_binding(symbol(METAA))),r=i=p=t,c=tos;p<=c?i<c:i>c;r=p<=c?++i:--i){for(set_binding(symbol(METAB),stack[r]),DEBUG&&console.log("  binding METAB to "+get_binding(symbol(METAB))),p1=p7;iscons(p1)&&(push(car(p1)),Eval(),p2=pop(),!isZeroAtomOrTensor(p2));)p1=cdr(p1);if(!iscons(p1)&&(push(p3),DEBUG&&console.log("about to evaluate template expression: "+p5+" binding METAA to "+get_binding(symbol(METAA))+" and binding METAB to "+get_binding(symbol(METAB))+" and binding METAX to "+get_binding(symbol(METAX))),push(p5),e&&(a=expanding,expanding=!1),Eval(),e&&(expanding=a),DEBUG&&console.log("  comparing "+stack[tos-1]+" to: "+stack[tos-2]),subtract(),p1=pop(),isZeroAtomOrTensor(p1)))return DEBUG&&(console.log("binding METAA to "+get_binding(symbol(METAA))),console.log("binding METAB to "+get_binding(symbol(METAB))),console.log("binding METAX to "+get_binding(symbol(METAX))),console.log("comparing "+p3+" to: "+p5)),1}return 0},Eval_transpose=function(){return push(cadr(p1)),Eval(),cddr(p1)===symbol(NIL)?(push_integer(1),push_integer(2)):(push(caddr(p1)),Eval(),push(cadddr(p1)),Eval()),transpose()},transpose=function(){var t,e,n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_,b,x,E,w,A,I,R,T,S,C;for(a=0,p=0,c=0,l=0,f=0,0,0,C=0,n=[],r=[],a=d=0,x=MAXDIM;0<=x?d<x:d>x;a=0<=x?++d:--d)n[a]=0,r[a]=0;if(save(),p3=pop(),p2=pop(),p1=pop(),isNumericAtom(p1))return push(p1),void restore();if((isplusone(p2)&&isplustwo(p3)||isplusone(p3)&&isplustwo(p2))&&isidentitymatrix(p1))return push(p1),void restore();if(istranspose(p1)&&(s=car(cdr(cdr(p1))),u=car(cdr(cdr(cdr(p1)))),equal(s,p3)&&equal(u,p2)||equal(u,p3)&&equal(s,p2)||equal(s,symbol(NIL))&&equal(u,symbol(NIL))&&(isplusone(p3)&&isplustwo(p2)||isplusone(p2)&&isplustwo(p3))))return push(car(cdr(p1))),void restore();if(expanding&&isadd(p1)){for(p1=cdr(p1),push(zero);iscons(p1);)push(car(p1)),push(p2),push(p3),transpose(),add(),p1=cdr(p1);restore()}else if(expanding&&ismultiply(p1)){for(p1=cdr(p1),push(one);iscons(p1);)push(car(p1)),push(p2),push(p3),transpose(),multiply(),p1=cdr(p1);restore()}else{if(!expanding||!isinnerordot(p1)){if(!istensor(p1))return isZeroAtomOrTensor(p1)?(push(zero),void restore()):(push_symbol(TRANSPOSE),push(p1),isplusone(p2)&&isplustwo(p3)||isplusone(p3)&&isplustwo(p2)?list(2):(push(p2),push(p3),list(4)),void restore());if(g=p1.tensor.ndim,v=p1.tensor.nelem,1===g)return push(p1),void restore();for(push(p2),l=pop_integer(),push(p3),f=pop_integer(),(l<1||l>g||f<1||f>g)&&stop("transpose: index out of range"),l--,f--,(p2=alloc_tensor(v)).tensor.ndim=g,a=m=0,w=g;0<=w?m<w:m>w;a=0<=w?++m:--m)p2.tensor.dim[a]=p1.tensor.dim[a];for(p2.tensor.dim[l]=p1.tensor.dim[f],p2.tensor.dim[f]=p1.tensor.dim[l],t=p1.tensor.elem,o=p2.tensor.elem,a=y=0,A=g;0<=A?y<A:y>A;a=0<=A?++y:--y)n[a]=0,r[a]=p1.tensor.dim[a];for(a=_=0,I=v;0<=I?_<I:_>I;a=0<=I?++_:--_){for(C=n[l],n[l]=n[f],n[f]=C,C=r[l],r[l]=r[f],r[f]=C,c=0,p=b=0,R=g;0<=R?b<R:b>R;p=0<=R?++b:--b)c=c*r[p]+n[p];for(C=n[l],n[l]=n[f],n[f]=C,C=r[l],r[l]=r[f],r[f]=C,o[c]=t[a],p=S=T=g-1;(T<=0?S<=0:S>=0)&&!(++n[p]<r[p]);p=T<=0?++S:--S)n[p]=0}return push(p2),restore()}for(p1=cdr(p1),e=[];iscons(p1);)e.push([car(p1),p2,p3]),p1=cdr(p1);for(i=h=E=e.length-1;E<=0?h<=0:h>=0;i=E<=0?++h:--h)push(e[i][0]),push(e[i][1]),push(e[i][2]),transpose(),i!==e.length-1&&inner();restore()}},Eval_user_function=function(){var t,e;if(DEBUG&&console.log("Eval_user_function evaluating: "+car(p1)),car(p1)!==symbol(SYMBOL_D)||get_binding(symbol(SYMBOL_D))!==symbol(SYMBOL_D)){if(push(car(p1)),Eval(),t=pop(),isNumericAtom(t)?stop("expected function invocation, found multiplication instead. Use '*' symbol explicitly for multiplication."):istensor(t)?stop("expected function invocation, found tensor product instead. Use 'dot/inner' explicitly."):isstr(t)&&stop("expected function, found string instead."),p3=car(cdr(t)),p4=car(cdr(cdr(t))),p5=cdr(p1),car(t)===symbol(FUNCTION)&&t!==car(p1)){for(p1=p4,p2=p5,e=tos;iscons(p1)&&iscons(p2);)push(car(p1)),push(car(p2)),p1=cdr(p1),p2=cdr(p2);return list(tos-e),p6=pop(),push(p3),iscons(p6)&&(push(p6),rewrite_args()),Eval()}for(e=tos,push(t),p1=p5;iscons(p1);)push(car(p1)),Eval(),p1=cdr(p1);list(tos-e)}else Eval_derivative()},rewrite_args=function(){var t,e;if(e=0,save(),p2=pop(),p1=pop(),istensor(p1))return e=rewrite_args_tensor(),restore(),e;if(iscons(p1)){for(t=tos,car(p1)===car(p2)?(push_symbol(EVAL),push(car(cdr(p2))),list(2)):push(car(p1)),p1=cdr(p1);iscons(p1);)push(car(p1)),push(p2),e+=rewrite_args(),p1=cdr(p1);return list(tos-t),restore(),e}if(!issymbol(p1))return push(p1),restore(),0;for(p3=p2;iscons(p3);){if(p1===car(p3))return push(cadr(p3)),restore(),1;p3=cddr(p3)}return p3=get_binding(p1),push(p3),p1!==p3&&(push(p2),0===(e=rewrite_args())&&(pop(),push(p1))),restore(),e},rewrite_args_tensor=function(){var t,e,n,r;for(n=0,t=0,push(p1),copy_tensor(),t=e=0,r=(p1=pop()).tensor.nelem;0<=r?e<r:e>r;t=0<=r?++e:--e)push(p1.tensor.elem[t]),push(p2),n+=rewrite_args(),p1.tensor.elem[t]=pop();return check_tensor_dimensions(p1),push(p1),n},Eval_zero=function(){var t,e,n,r,o,i,a,s;for(t=0,e=[],r=0,i=0,t=n=0,a=MAXDIM;0<=a?n<a:n>a;t=0<=a?++n:--n)e[t]=0;for(r=1,i=0,p2=cdr(p1);iscons(p2);){if(push(car(p2)),Eval(),(t=pop_integer())<1||isNaN(t))return void push(zero);r*=t,e[i++]=t,p2=cdr(p2)}if(0!==i){for((p1=alloc_tensor(r)).tensor.ndim=i,t=o=0,s=i;0<=s?o<s:o>s;t=0<=s?++o:--o)p1.tensor.dim[t]=e[t];return push(p1)}push(zero)},allocatedId=0,alloc_tensor=function(t){var e,n,r,o;for(e=0,(r=new U).k=TENSOR,r.tensor=new tensor,r.tensor.nelem=t,e=n=0,o=t;0<=o?n<o:n>o;e=0<=o?++n:--n)r.tensor.elem[e]=zero;return r.tensor.allocatedId=allocatedId,allocatedId++,check_tensor_dimensions(r),r},Find=function(t,e){var n,r,o;if(n=0,equal(t,e))return 1;if(istensor(t)){for(n=r=0,o=t.tensor.nelem;0<=o?r<o:r>o;n=0<=o?++r:--r)if(Find(t.tensor.elem[n],e))return 1;return 0}for(;iscons(t);){if(Find(car(t),e))return 1;t=cdr(t)}return 0},findPossibleClockForm=function(t){var e,n,r;if(e=0,isimaginaryunit(t))return 0;if(car(t)===symbol(POWER)&&!isinteger(caddr(p1))&&Find(cadr(t),imaginaryunit))return 1;if(car(t)===symbol(POWER)&&equaln(cadr(t),-1)&&!isinteger(caddr(p1)))return 1;if(istensor(t)){for(e=n=0,r=t.tensor.nelem;0<=r?n<r:n>r;e=0<=r?++n:--n)if(findPossibleClockForm(t.tensor.elem[e]))return 1;return 0}for(;iscons(t);){if(findPossibleClockForm(car(t)))return 1;t=cdr(t)}return 0},findPossibleExponentialForm=function(t){var e,n,r;if(e=0,car(t)===symbol(POWER)&&cadr(t)===symbol(E))return Find(caddr(t),imaginaryunit);if(istensor(t)){for(e=n=0,r=t.tensor.nelem;0<=r?n<r:n>r;e=0<=r?++n:--n)if(findPossibleExponentialForm(t.tensor.elem[e]))return 1;return 0}for(;iscons(t);){if(findPossibleExponentialForm(car(t)))return 1;t=cdr(t)}return 0},$.Find=Find,init=function(){var t,e,n;if(t=0,flag=0,reset_after_error(),chainOfUserSymbolsNotFunctionsBeingEvaluated=[],!flag){for(flag=1,t=e=0,n=NSYM;0<=n?e<n:e>n;t=0<=n?++e:--e)symtab[t]=new U,symtab[t].k=SYM,binding[t]=symtab[t],isSymbolReclaimable[t]=!1;return defn()}},defn_str=['version="'+version+'"',"e=exp(1)","i=sqrt(-1)","autoexpand=1","assumeRealVariables=1","trange=[-pi,pi]","xrange=[-10,10]","yrange=[-10,10]","last=0","trace=0","forceFixedPrintout=1","maxFixedPrintoutDigits=6","printLeaveEAlone=1","printLeaveXAlone=0","cross(u,v)=[u[2]*v[3]-u[3]*v[2],u[3]*v[1]-u[1]*v[3],u[1]*v[2]-u[2]*v[1]]","curl(v)=[d(v[3],y)-d(v[2],z),d(v[1],z)-d(v[3],x),d(v[2],x)-d(v[1],y)]","div(v)=d(v[1],x)+d(v[2],y)+d(v[3],z)","ln(x)=log(x)"],defn=function(){var t,e,n,r,o;for(p0=symbol(NIL),p1=symbol(NIL),p2=symbol(NIL),p3=symbol(NIL),p4=symbol(NIL),p5=symbol(NIL),p6=symbol(NIL),p7=symbol(NIL),p8=symbol(NIL),p9=symbol(NIL),std_symbol("abs",ABS),std_symbol("add",ADD),std_symbol("adj",ADJ),std_symbol("and",AND),std_symbol("approxratio",APPROXRATIO),std_symbol("arccos",ARCCOS),std_symbol("arccosh",ARCCOSH),std_symbol("arcsin",ARCSIN),std_symbol("arcsinh",ARCSINH),std_symbol("arctan",ARCTAN),std_symbol("arctanh",ARCTANH),std_symbol("arg",ARG),std_symbol("atomize",ATOMIZE),std_symbol("besselj",BESSELJ),std_symbol("bessely",BESSELY),std_symbol("binding",BINDING),std_symbol("binomial",BINOMIAL),std_symbol("ceiling",CEILING),std_symbol("check",CHECK),std_symbol("choose",CHOOSE),std_symbol("circexp",CIRCEXP),std_symbol("clear",CLEAR),std_symbol("clearall",CLEARALL),std_symbol("clearpatterns",CLEARPATTERNS),std_symbol("clock",CLOCK),std_symbol("coeff",COEFF),std_symbol("cofactor",COFACTOR),std_symbol("condense",CONDENSE),std_symbol("conj",CONJ),std_symbol("contract",CONTRACT),std_symbol("cos",COS),std_symbol("cosh",COSH),std_symbol("decomp",DECOMP),std_symbol("defint",DEFINT),std_symbol("deg",DEGREE),std_symbol("denominator",DENOMINATOR),std_symbol("det",DET),std_symbol("derivative",DERIVATIVE),std_symbol("dim",DIM),std_symbol("dirac",DIRAC),std_symbol("divisors",DIVISORS),std_symbol("do",DO),std_symbol("dot",DOT),std_symbol("draw",DRAW),std_symbol("dsolve",DSOLVE),std_symbol("erf",ERF),std_symbol("erfc",ERFC),std_symbol("eigen",EIGEN),std_symbol("eigenval",EIGENVAL),std_symbol("eigenvec",EIGENVEC),std_symbol("eval",EVAL),std_symbol("exp",EXP),std_symbol("expand",EXPAND),std_symbol("expcos",EXPCOS),std_symbol("expsin",EXPSIN),std_symbol("factor",FACTOR),std_symbol("factorial",FACTORIAL),std_symbol("factorpoly",FACTORPOLY),std_symbol("filter",FILTER),std_symbol("float",FLOATF),std_symbol("floor",FLOOR),std_symbol("for",FOR),std_symbol("function",FUNCTION),std_symbol("Gamma",GAMMA),std_symbol("gcd",GCD),std_symbol("hermite",HERMITE),std_symbol("hilbert",HILBERT),std_symbol("imag",IMAG),std_symbol("component",INDEX),std_symbol("inner",INNER),std_symbol("integral",INTEGRAL),std_symbol("inv",INV),std_symbol("invg",INVG),std_symbol("isinteger",ISINTEGER),std_symbol("isprime",ISPRIME),std_symbol("laguerre",LAGUERRE),std_symbol("lcm",LCM),std_symbol("leading",LEADING),std_symbol("legendre",LEGENDRE),std_symbol("log",LOG),std_symbol("lookup",LOOKUP),std_symbol("mod",MOD),std_symbol("multiply",MULTIPLY),std_symbol("not",NOT),std_symbol("nroots",NROOTS),std_symbol("number",NUMBER),std_symbol("numerator",NUMERATOR),std_symbol("operator",OPERATOR),std_symbol("or",OR),std_symbol("outer",OUTER),std_symbol("pattern",PATTERN),std_symbol("patternsinfo",PATTERNSINFO),std_symbol("polar",POLAR),std_symbol("power",POWER),std_symbol("prime",PRIME),std_symbol("print",PRINT),std_symbol("print2dascii",PRINT2DASCII),std_symbol("printcomputer",PRINTFULL),std_symbol("printlatex",PRINTLATEX),std_symbol("printlist",PRINTLIST),std_symbol("printhuman",PRINTPLAIN),std_symbol("printLeaveEAlone",PRINT_LEAVE_E_ALONE),std_symbol("printLeaveXAlone",PRINT_LEAVE_X_ALONE),std_symbol("product",PRODUCT),std_symbol("quote",QUOTE),std_symbol("quotient",QUOTIENT),std_symbol("rank",RANK),std_symbol("rationalize",RATIONALIZE),std_symbol("real",REAL),std_symbol("rect",YYRECT),std_symbol("roots",ROOTS),std_symbol("round",ROUND),std_symbol("equals",SETQ),std_symbol("sgn",SGN),std_symbol("silentpattern",SILENTPATTERN),std_symbol("simplify",SIMPLIFY),std_symbol("sin",SIN),std_symbol("sinh",SINH),std_symbol("shape",SHAPE),std_symbol("sqrt",SQRT),std_symbol("stop",STOP),std_symbol("subst",SUBST),std_symbol("sum",SUM),std_symbol("symbolsinfo",SYMBOLSINFO),std_symbol("tan",TAN),std_symbol("tanh",TANH),std_symbol("taylor",TAYLOR),std_symbol("test",TEST),std_symbol("testeq",TESTEQ),std_symbol("testge",TESTGE),std_symbol("testgt",TESTGT),std_symbol("testle",TESTLE),std_symbol("testlt",TESTLT),std_symbol("transpose",TRANSPOSE),std_symbol("unit",UNIT),std_symbol("zero",ZERO),std_symbol("nil",NIL),std_symbol("autoexpand",AUTOEXPAND),std_symbol("bake",BAKE),std_symbol("assumeRealVariables",ASSUME_REAL_VARIABLES),std_symbol("last",LAST),std_symbol("lastprint",LAST_PRINT),std_symbol("last2dasciiprint",LAST_2DASCII_PRINT),std_symbol("lastfullprint",LAST_FULL_PRINT),std_symbol("lastlatexprint",LAST_LATEX_PRINT),std_symbol("lastlistprint",LAST_LIST_PRINT),std_symbol("lastplainprint",LAST_PLAIN_PRINT),std_symbol("trace",TRACE),std_symbol("forceFixedPrintout",FORCE_FIXED_PRINTOUT),std_symbol("maxFixedPrintoutDigits",MAX_FIXED_PRINTOUT_DIGITS),std_symbol("~",YYE),std_symbol("$DRAWX",DRAWX),std_symbol("$METAA",METAA),std_symbol("$METAB",METAB),std_symbol("$METAX",METAX),std_symbol("$SECRETX",SECRETX),std_symbol("version",VERSION),std_symbol("pi",PI),std_symbol("a",SYMBOL_A),std_symbol("b",SYMBOL_B),std_symbol("c",SYMBOL_C),std_symbol("d",SYMBOL_D),std_symbol("i",SYMBOL_I),std_symbol("j",SYMBOL_J),std_symbol("n",SYMBOL_N),std_symbol("r",SYMBOL_R),std_symbol("s",SYMBOL_S),std_symbol("t",SYMBOL_T),std_symbol("x",SYMBOL_X),std_symbol("y",SYMBOL_Y),std_symbol("z",SYMBOL_Z),std_symbol("I",SYMBOL_IDENTITY_MATRIX),std_symbol("a_",SYMBOL_A_UNDERSCORE),std_symbol("b_",SYMBOL_B_UNDERSCORE),std_symbol("x_",SYMBOL_X_UNDERSCORE),std_symbol("$C1",C1),std_symbol("$C2",C2),std_symbol("$C3",C3),std_symbol("$C4",C4),std_symbol("$C5",C5),std_symbol("$C6",C6),defineSomeHandyConstants(),r=codeGen,codeGen=!1,e=n=0,o=defn_str.length;0<=o?n<o:n>o;e=0<=o?++n:--n)t=defn_str[e],scan(t),DEBUG&&(console.log("... evaling "+t),console.log("top of stack:"),console.log(print_list(stack[tos-1]))),Eval(),pop();return codeGen=r},defineSomeHandyConstants=function(){return push_integer(0),zero=pop(),push_integer(1),one=pop(),push_double(1),one_as_double=pop(),push_symbol(POWER),DEBUG&&console.log(print_list(stack[tos-1])),push_integer(-1),DEBUG&&console.log(print_list(stack[tos-1])),push_rational(1,2),DEBUG&&console.log(print_list(stack[tos-1])),list(3),DEBUG&&console.log(print_list(stack[tos-1])),imaginaryunit=pop()},mcmp=function(t,e){return t.compare(e)},mcmpint=function(t,e){var n;return n=bigInt(e),mcmp(t,n)},strcmp=function(t,e){return t===e?0:t>e?1:-1},doubleToReasonableString=function(t){var e,n;return codeGen?""+t:(isZeroAtomOrTensor(get_binding(symbol(FORCE_FIXED_PRINTOUT)))?(n=""+t,n=printMode===PRINTMODE_LATEX?/\d*\.\d*e.*/gm.test(n)?n.replace(/e(.*)/gm,"\\mathrm{e}{$1}"):n.replace(/(\d+)e(.*)/gm,"$1.0\\mathrm{e}{$2}"):/\d*\.\d*e.*/gm.test(n)?n.replace(/e(.*)/gm,"*10^($1)"):n.replace(/(\d+)e(.*)/gm,"$1.0*10^($2)")):(push(get_binding(symbol(MAX_FIXED_PRINTOUT_DIGITS))),e=pop_integer(),-1===(n=(n=(n=""+t.toFixed(e)).replace(/(\.\d*?[1-9])0+$/gm,"$1")).replace(/\.0+$/gm,"")).indexOf(".")&&(n+=".0"),parseFloat(n)!==t&&(n=t.toFixed(e)+"...")),n)},clear_term=function(){},isspace=function(t){return null!=t&&(" "===t||"\t"===t||"\n"===t||"\v"===t||"\f"===t||"\r"===t)},isdigit=function(t){return null!=t&&/^\d+$/.test(t)},isalpha=function(t){return null!=t&&-1===t.search(/[^A-Za-z]/)},isalphaOrUnderscore=function(t){return null!=t&&-1===t.search(/[^A-Za-z_]/)},isunderscore=function(t){return null!=t&&-1===t.search(/_/)},isalnumorunderscore=function(t){return null!=t&&(isalphaOrUnderscore(t)||isdigit(t))},count=function(t){var e;if(iscons(t))for(e=0;iscons(t);)e+=count(car(t))+1,t=cdr(t);else e=1;return e},countOccurrencesOfSymbol=function(t,e){var n;if(n=0,iscons(e))for(;iscons(e);)n+=countOccurrencesOfSymbol(t,car(e)),e=cdr(e);else equal(t,e)&&(n=1);return n},countsize=function(t){var e,n,r,o;if(r=0,istensor(t))for(e=n=0,o=t.tensor.nelem;0<=o?n<o:n>o;e=0<=o?++n:--n)r+=t.tensor.elem[e];else if(iscons(t))for(;iscons(t);)r+=count(car(t))+1,t=cdr(t);else r=1;return r},stop=function(t){var e;throw errorMessage+="Stop: ",e=errorMessage+=t,errorMessage="",moveTos(0),new Error(e)},findDependenciesInScript=function(t,e){var n,r,o,i,a,s,u,p,c,l,d,f,h,m,g,v,y,_,b,x,E,w,A,I,R,T,S,C,N,k,O,D,M,L,P,B,F,U,q,G,W,z,V,H,X,Y,$;for(DEBUG&&console.log("stringToBeParsed: "+t),z=(new Date).getTime(),!0,codeGen=!0,symbolsDependencies={},symbolsHavingReassignments=[],symbolsInExpressionsWithoutAssignments=[],patternHasBeenFound=!1,d=0,"","",A=0,i={affectsVariables:[],affectedBy:[]},q=t;;){try{errorMessage="",check_stack(),DEBUG&&console.log("findDependenciesInScript: scanning"),A=scan(t.substring(d)),DEBUG&&console.log("scanned"),pop(),check_stack()}catch(t){s=t,PRINTOUTRESULT&&console.log(s),errorMessage=s+"",reset_after_error();break}if(0===A)break;d+=A}for(f in W="",DEBUG&&console.log("all local dependencies ----------------"),W+="All local dependencies: ",symbolsDependencies){for(Y=symbolsDependencies[f],DEBUG&&console.log("variable "+f+" depends on: "),i.affectsVariables.push(f),W+=" variable "+f+" depends on: ",h=0,m=Y.length;h<m;h++)c=Y[h],DEBUG&&console.log("    "+c),"'"!==c[0]&&i.affectedBy.push(c),W+=c+", ";W+="; "}for(W+=". ",DEBUG&&console.log("Symbols with reassignments ----------------"),W+="Symbols with reassignments: ",w=0,g=symbolsHavingReassignments.length;w<g;w++)f=symbolsHavingReassignments[w],-1===i.affectedBy.indexOf(f)&&(i.affectedBy.push(f),W+=f+", ");for(W+=". ",DEBUG&&console.log("Symbols in expressions without assignments ----------------"),W+="Symbols in expressions without assignments: ",I=0,v=symbolsInExpressionsWithoutAssignments.length;I<v;I++)f=symbolsInExpressionsWithoutAssignments[I],-1===i.affectedBy.indexOf(f)&&(i.affectedBy.push(f),W+=f+", ");if(W+=". ",i.affectedBy.push("PATTERN_DEPENDENCY"),patternHasBeenFound&&(i.affectsVariables.push("PATTERN_DEPENDENCY"),W+=" - PATTERN_DEPENDENCY inserted - "),DEBUG&&console.log("All dependencies recursively ----------------"),W+="All dependencies recursively: ",U=["",""],p="",D="",""===errorMessage&&!e){try{"","",U=run(t,!0),"",""}catch(t){s=t,PRINTOUTRESULT&&console.log(s),errorMessage=s+"",init()}if(""===errorMessage)for(f in symbolsDependencies){for(codeGen=!0,DEBUG&&console.log("  variable "+f+" is: "+get_binding(usr_symbol(f)).toString()),codeGen=!1,DEBUG&&console.log("  variable "+f+" depends on: "),W+=" variable "+f+" depends on: ",recursiveDependencies(f,M=[],[],$=[],[],r=[]),T=0,y=$.length;T<y;T++)c=$[T],DEBUG&&console.log("    --\x3e cycle through "+c);for(k=0,_=M.length;k<_;k++)c=M[k],DEBUG&&console.log("    "+c),W+=c+", ";for(W+="; ",O=0,b=r.length;O<b;O++)W+=" "+(c=r[O])+", ";for(DEBUG&&console.log("  code generation:"+f+" is: "+get_binding(usr_symbol(f)).toString()),push(get_binding(usr_symbol(f))),P=[],B=[],F=0,x=M.length;F<x;F++)"'"===(a=M[F])[0]&&(o=a.substring(1),C=usr_symbol(o),R=usr_symbol("AVOID_BINDING_TO_EXTERNAL_SCOPE_VALUE"+o),P.push(C),B.push(R),push(C),push(R),subst(),DEBUG&&console.log("after substitution: "+stack[tos-1]));try{simplifyForCodeGeneration()}catch(t){s=t,PRINTOUTRESULT&&console.log(s),errorMessage=s+"",init()}for(l=G=0,L=P.length;0<=L?G<L:G>L;l=0<=L?++G:--G)push(B[l]),push(P[l]),subst();if(clearRenamedVariablesToAvoidBindingToExternalScope(),""===errorMessage){if(V=pop(),collectUserSymbols(V,X=[]),"","",codeGen=!0,u=V.toString(),codeGen=!1,S=printMode,printMode=PRINTMODE_LATEX,n=V.toString(),printMode=S,-1!==$.indexOf(f))p+="// "+f+" is part of a cyclic dependency, no code generated.",D+="#"+f+" is part of a cyclic dependency, no code generated.";else if(0!==(X=(X=X.filter((function(t){return-1===predefinedSymbolsInGlobalScope_doNotTrackInDependencies.indexOf(t+"")}))).filter((function(t){return-1!==M.indexOf(t+"")||-1!==M.indexOf("'"+t)}))).length){for(N="(",H=0,E=X.length;H<E;H++)(c=X[H]).printname!==f&&(N+=c.printname+", ");N=N.replace(/, $/gm,""),p+=f+" = function "+(N+=")")+" { return ( "+u+" ); }",D+=f+N+" = "+n}else p+=f+" = "+u+";",D+=f+" = "+n;p+="\n",D+="\n",DEBUG&&console.log("    "+p)}}}return p=p.replace(/\n$/gm,""),D=D.replace(/\n$/gm,""),symbolsDependencies={},symbolsHavingReassignments=[],patternHasBeenFound=!1,symbolsInExpressionsWithoutAssignments=[],DEBUG&&console.log("testable string: "+W),TIMING_DEBUGS&&console.log("findDependenciesInScript time for: "+q+" : "+((new Date).getTime()-z)+"ms"),[W,U[0],p,D,U[1],errorMessage,i]},recursiveDependencies=function(t,e,n,r,o,i){var a,s,u,p,c,l,d,f;if(n.push(t),null!=symbolsDependencies[o[o.length-1]]&&-1!==symbolsDependencies[o[o.length-1]].indexOf("'"+t))return DEBUG&&console.log("can't keep following the chain of "+t+" because it's actually a variable bound to a parameter"),-1===e.indexOf("'"+t)&&-1===e.indexOf(t)&&e.push(t),e;if(o.push(t),null==symbolsDependencies[t])return-1===e.indexOf(t)&&e.push(t),e;for(p=0,c=(f=symbolsDependencies[t]).length;p<c;p++)if(s=f[p],-1!==o.indexOf(s)){for(DEBUG&&console.log("  found cycle:"),a="",d=0,l=o.length;d<l;d++)u=o[d],-1===r.indexOf(u)&&r.push(u),DEBUG&&console.log(u+" --\x3e "),a+=u+" --\x3e ";DEBUG&&console.log(" ... then "+s+" again"),a+=" ... then "+s+" again",i.push(a),-1===r.indexOf(s)&&r.push(s)}else recursiveDependencies(s,e,n,r,o,i),o.pop();return e},inited=!1,latexErrorSign="\\rlap{\\large\\color{red}\\bigtriangleup}{\\ \\ \\tiny\\color{red}!}",turnErrorMessageToLatex=function(t){return t="$$\\text{"+(t=(t=(t=(t=(t=(t=(t=t.replace(/\n/g,"")).replace(/_/g,"} \\_ \\text{")).replace(new RegExp(String.fromCharCode(transpose_unicode),"g"),"}{}^{T}\\text{")).replace(new RegExp(String.fromCharCode(dotprod_unicode),"g"),"}\\cdot \\text{")).replace("Stop:","}  \\quad \\text{Stop:")).replace("->","}  \\rightarrow \\text{")).replace("?","}\\enspace "+latexErrorSign+" \\enspace  \\text{")).replace(/\n/g,"")+"}$$"},normaliseDots=function(t){return t=(t=(t=(t=(t=t.replace(new RegExp(String.fromCharCode(8901),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(8226),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(12539),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(55296),"g"),String.fromCharCode(dotprod_unicode))).replace(new RegExp(String.fromCharCode(65381),"g"),String.fromCharCode(dotprod_unicode))},TIMING_DEBUGS=!1,run=function(t,e){var n,r,o,i,a,s,u,p,c,l;if(null==e&&(e=!1),c=(new Date).getTime(),"selftest"!==(t=normaliseDots(t))){for(inited||(inited=!0,init()),0,u=0,s=0,r="",n="";;){try{errorMessage="",check_stack(),u=scan(t.substring(s)),p1=pop(),check_stack()}catch(t){a=t,PRINTOUTRESULT&&console.log(a),r+=a.message,e&&(n+=turnErrorMessageToLatex(a.message)),reset_after_error();break}if(0===u)break;s+=u,push(p1),!1;try{stringsEmittedByUserPrintouts="",top_level_eval(),p2=pop(),check_stack(),isstr(p2)&&(DEBUG&&console.log(p2.str),DEBUG&&console.log("\n")),p2===symbol(NIL)?(i=stringsEmittedByUserPrintouts,e&&(o="$$"+stringsEmittedByUserPrintouts+"$$")):(i=print_expr(p2),i+="\n",e&&(o="$$"+collectLatexStringFromReturnValue(p2)+"$$",DEBUG&&console.log("collectedLatexResult: "+o))),r+=i,e&&(n+=o),PRINTOUTRESULT&&(DEBUG&&console.log("printline"),DEBUG&&console.log(i)),PRINTOUTRESULT&&(DEBUG&&console.log("display:"),print2dascii(p2)),e&&(n+="\n")}catch(t){!0,i=(a=t).message,e&&(o=turnErrorMessageToLatex(a.message)),PRINTOUTRESULT&&console.log(i),r+=i,""!==i&&(r+="\n"),e&&(n+=o,n+="\n"),init()}}return"\n"===r[r.length-1]&&(r=r.substring(0,r.length-1)),e&&"\n"===n[n.length-1]&&(n=n.substring(0,n.length-1)),e?(DEBUG&&console.log("allReturnedLatexStrings: "+n),p=[r,n]):p=r,TIMING_DEBUGS&&(l="run time on: "+t+" : "+((new Date).getTime()-c)+"ms",console.log(l)),r="",n="",p}selftest()},check_stack=function(){if(0!==tos&&stop("stack error"),frame!==TOS&&stop("frame error"),0!==chainOfUserSymbolsNotFunctionsBeingEvaluated.length&&stop("symbols evaluation still ongoing?"),0!==evaluatingAsFloats&&stop("numeric evaluation still ongoing?"),0!==evaluatingPolar)return stop("evaluation of polar still ongoing?")},top_level_eval=function(){var t,e,n;if(DEBUG&&console.log("#### top level eval"),trigmode=0,n=symbol(AUTOEXPAND),expanding=isZeroAtomOrTensor(get_binding(n))?0:1,e=top(),Eval(),(t=top())!==symbol(NIL))if(set_binding(symbol(LAST),t),isZeroAtomOrTensor(get_binding(symbol(BAKE)))||(bake(),t=top()),e!==symbol(SYMBOL_I)&&e!==symbol(SYMBOL_J)||!isimaginaryunit(t)){if(isimaginaryunit(get_binding(symbol(SYMBOL_J))))return push(imaginaryunit),push_symbol(SYMBOL_J),subst();if(isimaginaryunit(get_binding(symbol(SYMBOL_I))))return push(imaginaryunit),push_symbol(SYMBOL_I),subst()}else;},check_esc_flag=function(){if(esc_flag)return stop("esc key")},clearAlgebraEnvironment=function(){return do_clearall()},computeDependenciesFromAlgebra=function(t){var e,n,r;if(DEBUG&&console.log("computeDependenciesFromAlgebra!!!"),t,!0,called_from_Algebra_block=!0,t=normaliseDots(t),DEBUG){for(console.log("computeDependenciesFromAlgebra: patterns in the list --------------- "),r=0,n=userSimplificationsInListForm.length;r<n;r++)e=userSimplificationsInListForm[r],console.log(car(e)+","+cdr(e)+")");console.log("...end of list --------------- ")}return called_from_Algebra_block=!1,findDependenciesInScript(t,!0)[6]},computeResultsAndJavaScriptFromAlgebra=function(t){var e,n,r,o,i,a,s,u,p,c,l;if(t,!0,called_from_Algebra_block=!0,l=(new Date).getTime(),TIMING_DEBUGS&&console.log(" --------- computeResultsAndJavaScriptFromAlgebra input: "+t+" at: "+new Date),c=t=normaliseDots(t),DEBUG){for(console.log("computeResultsAndJavaScriptFromAlgebra: patterns in the list --------------- "),o=0,a=userSimplificationsInListForm.length;o<a;o++)r=userSimplificationsInListForm[o],console.log(car(r)+","+cdr(r)+")");console.log("...end of list --------------- ")}return(u=findDependenciesInScript(t))[0],p=u[1],e=u[2],s=u[3],i=u[4],errorMessage=u[5],n=u[6],called_from_Algebra_block=!1,""===s&&""===errorMessage||(p+="\n"+s,""!==errorMessage&&(p+="\n"+errorMessage),p=p.replace(/\n/g,"\n\n"),i+="\n$$"+s+"$$",""!==errorMessage&&(i+=turnErrorMessageToLatex(errorMessage)),i=i.replace(/\n/g,"\n\n")),i=(i=i.replace(/\n*/,"")).replace(/\$\$\$\$\n*/g,""),e=(e=e.replace(/Math\./g,"")).replace(/\n/g,"\n\n"),TIMING_DEBUGS&&console.log("computeResultsAndJavaScriptFromAlgebra time (total time from notebook and back) for: "+c+" : "+((new Date).getTime()-l)+"ms"),{code:e,result:i,latexResult:i,dependencyInfo:n}},(null!==exports?exports:this).run=run,(null!==exports?exports:this).findDependenciesInScript=findDependenciesInScript,(null!==exports?exports:this).computeDependenciesFromAlgebra=computeDependenciesFromAlgebra,(null!==exports?exports:this).computeResultsAndJavaScriptFromAlgebra=computeResultsAndJavaScriptFromAlgebra,(null!==exports?exports:this).clearAlgebraEnvironment=clearAlgebraEnvironment,tos=0,nil_symbols=0,push=function(t){return t.isZero,t===symbol(NIL)&&(nil_symbols++,DEBUG&&console.log("pushing symbol(NIL) #"+nil_symbols)),tos>=frame&&stop("stack overflow"),stack[tos++]=t},moveTos=function(t){if(tos<=t)tos=t;else for(;tos>t;)stack[tos]=null,tos--},top=function(){return stack[tos-1]},pop=function(){var t;return 0===tos&&stop("stack underflow"),stack[tos-1],t=stack[--tos],stack[tos]=null,t},push_frame=function(t){var e,n,r,o;for(e=0,(frame-=t)<tos&&stop("frame overflow, circular reference?"),o=[],e=n=0,r=t;0<=r?n<r:n>r;e=0<=r?++n:--n)o.push(stack[frame+e]=symbol(NIL));return o},pop_frame=function(t){if((frame+=t)>TOS)return stop("frame underflow")},save=function(){return(frame-=10)<tos&&stop("frame overflow, circular reference?"),stack[frame+0]=p0,stack[frame+1]=p1,stack[frame+2]=p2,stack[frame+3]=p3,stack[frame+4]=p4,stack[frame+5]=p5,stack[frame+6]=p6,stack[frame+7]=p7,stack[frame+8]=p8,stack[frame+9]=p9},restore=function(){return frame>TOS-10&&stop("frame underflow"),p0=stack[frame+0],p1=stack[frame+1],p2=stack[frame+2],p3=stack[frame+3],p4=stack[frame+4],p5=stack[frame+5],p6=stack[frame+6],p7=stack[frame+7],p8=stack[frame+8],p9=stack[frame+9],frame+=10},swap=function(){var t,e;return t=pop(),e=pop(),push(t),push(e)},dupl=function(){var t;return t=pop(),push(t),push(t)},$.dupl=dupl,$.swap=swap,$.restore=restore,$.save=save,$.push=push,$.pop=pop,Eval_symbolsinfo=function(){var t;return""!==(t=symbolsinfo())?new_string(t):push_symbol(NIL)},symbolsinfo=function(){var t,e,n,r,o,i,a;for(i="",e=n=r=NIL+1,o=symtab.length;r<=o?n<o:n>o;e=r<=o?++n:--n)if(""!==symtab[e].printname)a=symtab[e]+"",t=(binding[e]+"").substring(0,4),i+="symbol: "+a+" size: "+countsize(binding[e])+" value: "+t+"...\n";else if(!1===isSymbolReclaimable[e])break;return i},std_symbol=function(t,e,n){var r;return(r=symtab[e]).printname=t,r.latexPrint=null!=n?n:t},usr_symbol=function(t){var e,n,r;for(e=0,e=n=0,r=NSYM;0<=r?n<r:n>r;e=0<=r?++n:--n){if(t===symtab[e].printname)return symtab[e];if(""===symtab[e].printname)break}return e===NSYM&&stop("symbol table overflow"),symtab[e]=new U,symtab[e].k=SYM,symtab[e].printname=t,binding[e]=symtab[e],isSymbolReclaimable[e]=!1,symtab[e]},get_printname=function(t){return t.k!==SYM&&stop("symbol error"),t.printname},set_binding=function(t,e){var n;return t.k!==SYM&&stop("symbol error"),n=symtab.indexOf(t),-1!==symtab.indexOf(t,n+1)&&console.log("ops, more than one element!"),DEBUG&&console.log("lookup >> set_binding lookup "+n),isSymbolReclaimable[n]=!1,binding[n]=e},get_binding=function(t){var e;return t.k!==SYM&&stop("symbol error"),e=symtab.indexOf(t),-1!==symtab.indexOf(t,e+1)&&console.log("ops, more than one element!"),DEBUG&&console.log("lookup >> get_binding lookup "+e),binding[e]},is_usr_symbol=function(t){var e;return t.k===SYM&&((e=symnum(t))>PI&&e!==SYMBOL_I&&e!==SYMBOL_IDENTITY_MATRIX)},lookupsTotal=0,symnum=function(t){var e;return lookupsTotal++,t.k!==SYM&&stop("symbol error"),e=symtab.indexOf(t),-1!==symtab.indexOf(t,e+1)&&console.log("ops, more than one element!"),DEBUG&&console.log("lookup >> symnum lookup "+e+" lookup # "+lookupsTotal),e},push_symbol=function(t){return push(symtab[t])},clear_symbols=function(){var t,e,n,r,o;for(o=[],t=e=n=NIL+1,r=NSYM;n<=r?e<r:e>r;t=n<=r?++e:--e)if(""!==symtab[t].printname)symtab[t]=new U,symtab[t].k=SYM,binding[t]=symtab[t],o.push(isSymbolReclaimable[t]=!1);else if(!1===isSymbolReclaimable[t])break;return o},collectUserSymbols=function(t,e){var n,r,o;if(null==e&&(e=[]),is_usr_symbol(t)&&-1===e.indexOf(t))e.push(t);else if(istensor(t))for(n=r=0,o=t.tensor.nelem;0<=o?r<o:r>o;n=0<=o?++r:--r)collectUserSymbols(t.tensor.elem[n],e);else for(;iscons(t);)collectUserSymbols(car(t),e),t=cdr(t)},$.get_binding=get_binding,$.set_binding=set_binding,$.usr_symbol=usr_symbol,$.symbolsinfo=symbolsinfo,$.collectUserSymbols=collectUserSymbols,inited||(inited=!0,init()),$.init=init,parse_internal=function(t){return"string"==typeof t?scan(t):"number"==typeof t?t%1==0?push_integer(t):push_double(t):t instanceof U?push(t):(console.warn("unknown argument type",t),push(symbol(NIL)))},parse=function(t){var e,n;try{parse_internal(t),e=pop(),check_stack()}catch(t){throw n=t,reset_after_error(),n}return e},exec=function(){var t,e,n,r,o,i,a,s;for(a=arguments[0],e=2<=arguments.length?slice.call(arguments,1):[],r=get_binding(usr_symbol(a)),check_stack(),push(r),o=0,i=e.length;o<i;o++)t=e[o],parse_internal(t);list(1+e.length),p1=pop(),push(p1);try{top_level_eval(),s=pop(),check_stack()}catch(t){throw n=t,reset_after_error(),n}return s},$.exec=exec,$.parse=parse,function(){var t,e,n,r,o;for(o=[],n=0,r=(t=["abs","add","adj","and","approxratio","arccos","arccosh","arcsin","arcsinh","arctan","arctanh","arg","atomize","besselj","bessely","binding","binomial","ceiling","check","choose","circexp","clear","clearall","clearpatterns","clock","coeff","cofactor","condense","conj","contract","cos","cosh","decomp","defint","deg","denominator","det","derivative","dim","dirac","divisors","do","dot","draw","dsolve","eigen","eigenval","eigenvec","erf","erfc","eval","exp","expand","expcos","expsin","factor","factorial","factorpoly","filter","float","floor","for","Gamma","gcd","hermite","hilbert","imag","component","inner","integral","inv","invg","isinteger","isprime","laguerre","lcm","leading","legendre","log","mod","multiply","not","nroots","number","numerator","operator","or","outer","pattern","patternsinfo","polar","power","prime","print","print2dascii","printcomputer","printlatex","printlist","printhuman","product","quote","quotient","rank","rationalize","real","rect","roots","round","equals","shape","sgn","silentpattern","simplify","sin","sinh","sqrt","stop","subst","sum","symbolsinfo","tan","tanh","taylor","test","testeq","testge","testgt","testle","testlt","transpose","unit","zero"]).length;n<r;n++)e=t[n],o.push($[e]=exec.bind(this,e))}(),freeze=function(){var t,e,n,r,o;for(e=[],t=[],[],"",n=r=0,o=symtab.length;0<=o?r<o:r>o;n=0<=o?++r:--r)!1===isSymbolReclaimable[n]&&(e.push(symtab[n]),t.push(binding[n]));return[e,t,userSimplificationsInListForm.slice(0),zero,one,imaginaryunit,getStateHash()]},unfreeze=function(t){var e,n,r,o,i,a;for(r=t[0],e=t[1],n=t[2],zero=t[3],one=t[4],imaginaryunit=t[5],o=i=0,a=r.length;0<=a?i<a:i>a;o=0<=a?++i:--i)symtab[o]=r[o],binding[o]=e[o];return userSimplificationsInListForm=n.slice(0)},compareState=function(t){return getStateHash()===t},getStateHash=function(){var t,e,n,r,o,i,a;for(t="",e=n=i=NIL+1,a=symtab.length;i<=a?n<a:n>a;e=i<=a?++n:--n)if(""!==symtab[e].printname)t+=" //"+print_list(symtab[e])+" : "+print_list(binding[e]);else if(!1===isSymbolReclaimable[e])break;for(o=0,r=userSimplificationsInListForm.length;o<r;o++)t+=" pattern: "+(e=userSimplificationsInListForm[o]);return DEBUG&&console.log("frozenHash: "+t),t}}).call(this)},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */
var r=n(6),o=n(7),i=n(8);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return p(this,t,e,n)}function p(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=d(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|h(e,n),o=(t=s(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|f(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?s(t,0):d(t,e);if("Buffer"===e.type&&i(e.data))return d(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function c(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(c(e),t=s(t,e<0?0:0|f(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function d(t,e){var n=e.length<0?0:0|f(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function f(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function h(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return G(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return W(t).length;default:if(r)return G(t).length;e=(""+e).toLowerCase(),r=!0}}function m(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return N(this,e,n);case"utf8":case"utf-8":return R(this,e,n);case"ascii":return S(this,e,n);case"latin1":case"binary":return C(this,e,n);case"base64":return I(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return k(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function v(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,o);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,o){var i,a=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,n/=2}function p(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){var c=-1;for(i=n;i<s;i++)if(p(t,i)===p(e,-1===c?0:i-c)){if(-1===c&&(c=i),i-c+1===u)return c*a}else-1!==c&&(i-=i-c),c=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var l=!0,d=0;d<u;d++)if(p(t,i+d)!==p(e,d)){l=!1;break}if(l)return i}return-1}function _(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function b(t,e,n,r){return z(G(e,t.length-n),t,n,r)}function x(t,e,n,r){return z(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function E(t,e,n,r){return x(t,e,n,r)}function w(t,e,n,r){return z(W(e),t,n,r)}function A(t,e,n,r){return z(function(t,e){for(var n,r,o,i=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function I(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function R(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,a,s,u,p=t[o],c=null,l=p>239?4:p>223?3:p>191?2:1;if(o+l<=n)switch(l){case 1:p<128&&(c=p);break;case 2:128==(192&(i=t[o+1]))&&(u=(31&p)<<6|63&i)>127&&(c=u);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(u=(15&p)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(c=u);break;case 4:i=t[o+1],a=t[o+2],s=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&p)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(c=u)}null===c?(c=65533,l=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),o+=l}return function(t){var e=t.length;if(e<=T)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=T));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return p(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return c(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return l(null,t)},u.allocUnsafeSlow=function(t){return l(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var a=t[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},u.byteLength=h,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?R(this,0,t):m.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,o){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),a=(n>>>=0)-(e>>>=0),s=Math.min(i,a),p=this.slice(r,o),c=t.slice(e,n),l=0;l<s;++l)if(p[l]!==c[l]){i=p[l],a=c[l];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return v(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return v(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return _(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return x(this,t,e,n);case"latin1":case"binary":return E(this,t,e,n);case"base64":return w(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var T=4096;function S(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function C(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function N(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=q(t[i]);return o}function k(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function O(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function D(t,e,n,r,o,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function M(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function L(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function P(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function B(t,e,n,r,i){return i||P(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function F(t,e,n,r,i){return i||P(t,0,n,8),o.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var o=e-t;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||O(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||O(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},u.prototype.readUInt8=function(t,e){return e||O(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||O(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||O(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||O(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||O(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||O(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||O(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||O(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||O(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||O(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||O(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||O(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||O(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||O(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||O(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||O(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||D(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||D(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||D(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||D(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||D(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||D(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):L(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||D(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);D(this,t,e,n,o-1,-o)}var i=0,a=1,s=0;for(this[e]=255&t;++i<n&&(a*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/a>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);D(this,t,e,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[e+i]=255&t;--i>=0&&(a*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/a>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||D(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||D(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||D(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||D(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):L(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||D(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return B(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return B(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return F(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return F(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var a=u.isBuffer(t)?t:G(new u(t,r).toString()),s=a.length;for(i=0;i<n-e;++i)this[i+e]=a[i%s]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function q(t){return t<16?"0"+t.toString(16):t.toString(16)}function G(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function W(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(U,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function z(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(1))},function(t,e,n){"use strict";e.byteLength=function(t){var e=p(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=p(t),a=r[0],s=r[1],u=new i(function(t,e,n){return 3*(e+n)/4-n}(0,a,s)),c=0,l=s>0?a-4:a;for(n=0;n<l;n+=4)e=o[t.charCodeAt(n)]<<18|o[t.charCodeAt(n+1)]<<12|o[t.charCodeAt(n+2)]<<6|o[t.charCodeAt(n+3)],u[c++]=e>>16&255,u[c++]=e>>8&255,u[c++]=255&e;2===s&&(e=o[t.charCodeAt(n)]<<2|o[t.charCodeAt(n+1)]>>4,u[c++]=255&e);1===s&&(e=o[t.charCodeAt(n)]<<10|o[t.charCodeAt(n+1)]<<4|o[t.charCodeAt(n+2)]>>2,u[c++]=e>>8&255,u[c++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(l(t,a,a+16383>s?s:a+16383));1===o?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function p(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function c(t){return r[t>>18&63]+r[t>>12&63]+r[t>>6&63]+r[63&t]}function l(t,e,n){for(var r,o=[],i=e;i<n;i+=3)r=(t[i]<<16&16711680)+(t[i+1]<<8&65280)+(255&t[i+2]),o.push(c(r));return o.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,p=u>>1,c=-7,l=n?o-1:0,d=n?-1:1,f=t[e+l];for(l+=d,i=f&(1<<-c)-1,f>>=-c,c+=s;c>0;i=256*i+t[e+l],l+=d,c-=8);for(a=i&(1<<-c)-1,i>>=-c,c+=r;c>0;a=256*a+t[e+l],l+=d,c-=8);if(0===i)i=1-p;else{if(i===u)return a?NaN:1/0*(f?-1:1);a+=Math.pow(2,r),i-=p}return(f?-1:1)*a*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var a,s,u,p=8*i-o-1,c=(1<<p)-1,l=c>>1,d=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,f=r?0:i-1,h=r?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=c):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+l>=1?d/u:d*Math.pow(2,1-l))*u>=2&&(a++,u/=2),a+l>=c?(s=0,a=c):a+l>=1?(s=(e*u-1)*Math.pow(2,o),a+=l):(s=e*Math.pow(2,l-1)*Math.pow(2,o),a=0));o>=8;t[n+f]=255&s,f+=h,s/=256,o-=8);for(a=a<<o|s,p+=o;p>0;t[n+f]=255&a,f+=h,a/=256,p-=8);t[n+f-h]|=128*m}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(10),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,o,i,a,s,u=1,p={},c=!1,l=t.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(t);d=d&&d.setTimeout?d:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){h(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){h(t.data)},r=function(t){i.port2.postMessage(t)}):l&&"onreadystatechange"in l.createElement("script")?(o=l.documentElement,r=function(t){var e=l.createElement("script");e.onreadystatechange=function(){h(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):r=function(t){setTimeout(h,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&h(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),d.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return p[u]=o,r(u),u++},d.clearImmediate=f}function f(t){delete p[t]}function h(t){if(c)setTimeout(h,0,t);else{var e=p[t];if(e){c=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{f(t),c=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(3))},function(t,e){},function(t,e){},function(t,e){},function(t,e,n){(function(t){var r,o=function(t){"use strict";var e=1e7,n=7,r=9007199254740992,i=f(r),a="0123456789abcdefghijklmnopqrstuvwxyz",s="function"==typeof BigInt;function u(t,e,n,r){return void 0===t?u[0]:void 0!==e&&(10!=+e||n)?V(t,e,n,r):j(t)}function p(t,e){this.value=t,this.sign=e,this.isSmall=!1}function c(t){this.value=t,this.sign=t<0,this.isSmall=!0}function l(t){this.value=t}function d(t){return-r<t&&t<r}function f(t){return t<1e7?[t]:t<1e14?[t%1e7,Math.floor(t/1e7)]:[t%1e7,Math.floor(t/1e7)%1e7,Math.floor(t/1e14)]}function h(t){m(t);var n=t.length;if(n<4&&N(t,i)<0)switch(n){case 0:return 0;case 1:return t[0];case 2:return t[0]+t[1]*e;default:return t[0]+(t[1]+t[2]*e)*e}return t}function m(t){for(var e=t.length;0===t[--e];);t.length=e+1}function g(t){for(var e=new Array(t),n=-1;++n<t;)e[n]=0;return e}function v(t){return t>0?Math.floor(t):Math.ceil(t)}function y(t,n){var r,o,i=t.length,a=n.length,s=new Array(i),u=0,p=e;for(o=0;o<a;o++)u=(r=t[o]+n[o]+u)>=p?1:0,s[o]=r-u*p;for(;o<i;)u=(r=t[o]+u)===p?1:0,s[o++]=r-u*p;return u>0&&s.push(u),s}function _(t,e){return t.length>=e.length?y(t,e):y(e,t)}function b(t,n){var r,o,i=t.length,a=new Array(i),s=e;for(o=0;o<i;o++)r=t[o]-s+n,n=Math.floor(r/s),a[o]=r-n*s,n+=1;for(;n>0;)a[o++]=n%s,n=Math.floor(n/s);return a}function x(t,n){var r,o,i=t.length,a=n.length,s=new Array(i),u=0,p=e;for(r=0;r<a;r++)(o=t[r]-u-n[r])<0?(o+=p,u=1):u=0,s[r]=o;for(r=a;r<i;r++){if(!((o=t[r]-u)<0)){s[r++]=o;break}o+=p,s[r]=o}for(;r<i;r++)s[r]=t[r];return m(s),s}function E(t,n,r){var o,i,a=t.length,s=new Array(a),u=-n,l=e;for(o=0;o<a;o++)i=t[o]+u,u=Math.floor(i/l),i%=l,s[o]=i<0?i+l:i;return"number"==typeof(s=h(s))?(r&&(s=-s),new c(s)):new p(s,r)}function w(t,n){var r,o,i,a,s=t.length,u=n.length,p=g(s+u),c=e;for(i=0;i<s;++i){a=t[i];for(var l=0;l<u;++l)r=a*n[l]+p[i+l],o=Math.floor(r/c),p[i+l]=r-o*c,p[i+l+1]+=o}return m(p),p}function A(t,n){var r,o,i=t.length,a=new Array(i),s=e,u=0;for(o=0;o<i;o++)r=t[o]*n+u,u=Math.floor(r/s),a[o]=r-u*s;for(;u>0;)a[o++]=u%s,u=Math.floor(u/s);return a}function I(t,e){for(var n=[];e-- >0;)n.push(0);return n.concat(t)}function R(t,n,r){return new p(t<e?A(n,t):w(n,f(t)),r)}function T(t){var n,r,o,i,a=t.length,s=g(a+a),u=e;for(o=0;o<a;o++){r=0-(i=t[o])*i;for(var p=o;p<a;p++)n=i*t[p]*2+s[o+p]+r,r=Math.floor(n/u),s[o+p]=n-r*u;s[o+a]=r}return m(s),s}function S(t,n){var r,o,i,a,s=t.length,u=g(s),p=e;for(i=0,r=s-1;r>=0;--r)i=(a=i*p+t[r])-(o=v(a/n))*n,u[r]=0|o;return[u,0|i]}function C(t,n){var r,o=j(n);if(s)return[new l(t.value/o.value),new l(t.value%o.value)];var i,a=t.value,d=o.value;if(0===d)throw new Error("Cannot divide by zero");if(t.isSmall)return o.isSmall?[new c(v(a/d)),new c(a%d)]:[u[0],t];if(o.isSmall){if(1===d)return[t,u[0]];if(-1==d)return[t.negate(),u[0]];var y=Math.abs(d);if(y<e){i=h((r=S(a,y))[0]);var _=r[1];return t.sign&&(_=-_),"number"==typeof i?(t.sign!==o.sign&&(i=-i),[new c(i),new c(_)]):[new p(i,t.sign!==o.sign),new c(_)]}d=f(y)}var b=N(a,d);if(-1===b)return[u[0],t];if(0===b)return[u[t.sign===o.sign?1:-1],u[0]];i=(r=a.length+d.length<=200?function(t,n){var r,o,i,a,s,u,p,c=t.length,l=n.length,d=e,f=g(n.length),m=n[l-1],v=Math.ceil(d/(2*m)),y=A(t,v),_=A(n,v);for(y.length<=c&&y.push(0),_.push(0),m=_[l-1],o=c-l;o>=0;o--){for(r=d-1,y[o+l]!==m&&(r=Math.floor((y[o+l]*d+y[o+l-1])/m)),i=0,a=0,u=_.length,s=0;s<u;s++)i+=r*_[s],p=Math.floor(i/d),a+=y[o+s]-(i-p*d),i=p,a<0?(y[o+s]=a+d,a=-1):(y[o+s]=a,a=0);for(;0!==a;){for(r-=1,i=0,s=0;s<u;s++)(i+=y[o+s]-d+_[s])<0?(y[o+s]=i+d,i=0):(y[o+s]=i,i=1);a+=i}f[o]=r}return y=S(y,v)[0],[h(f),h(y)]}(a,d):function(t,n){for(var r,o,i,a,s,u=t.length,p=n.length,c=[],l=[],d=e;u;)if(l.unshift(t[--u]),m(l),N(l,n)<0)c.push(0);else{i=l[(o=l.length)-1]*d+l[o-2],a=n[p-1]*d+n[p-2],o>p&&(i=(i+1)*d),r=Math.ceil(i/a);do{if(N(s=A(n,r),l)<=0)break;r--}while(r);c.push(r),l=x(l,s)}return c.reverse(),[h(c),h(l)]}(a,d))[0];var E=t.sign!==o.sign,w=r[1],I=t.sign;return"number"==typeof i?(E&&(i=-i),i=new c(i)):i=new p(i,E),"number"==typeof w?(I&&(w=-w),w=new c(w)):w=new p(w,I),[i,w]}function N(t,e){if(t.length!==e.length)return t.length>e.length?1:-1;for(var n=t.length-1;n>=0;n--)if(t[n]!==e[n])return t[n]>e[n]?1:-1;return 0}function k(t){var e=t.abs();return!e.isUnit()&&(!!(e.equals(2)||e.equals(3)||e.equals(5))||!(e.isEven()||e.isDivisibleBy(3)||e.isDivisibleBy(5))&&(!!e.lesser(49)||void 0))}function O(t,e){for(var n,r,i,a=t.prev(),s=a,u=0;s.isEven();)s=s.divide(2),u++;t:for(r=0;r<e.length;r++)if(!t.lesser(e[r])&&!(i=o(e[r]).modPow(s,t)).isUnit()&&!i.equals(a)){for(n=u-1;0!=n;n--){if((i=i.square().mod(t)).isUnit())return!1;if(i.equals(a))continue t}return!1}return!0}p.prototype=Object.create(u.prototype),c.prototype=Object.create(u.prototype),l.prototype=Object.create(u.prototype),p.prototype.add=function(t){var e=j(t);if(this.sign!==e.sign)return this.subtract(e.negate());var n=this.value,r=e.value;return e.isSmall?new p(b(n,Math.abs(r)),this.sign):new p(_(n,r),this.sign)},p.prototype.plus=p.prototype.add,c.prototype.add=function(t){var e=j(t),n=this.value;if(n<0!==e.sign)return this.subtract(e.negate());var r=e.value;if(e.isSmall){if(d(n+r))return new c(n+r);r=f(Math.abs(r))}return new p(b(r,Math.abs(n)),n<0)},c.prototype.plus=c.prototype.add,l.prototype.add=function(t){return new l(this.value+j(t).value)},l.prototype.plus=l.prototype.add,p.prototype.subtract=function(t){var e=j(t);if(this.sign!==e.sign)return this.add(e.negate());var n=this.value,r=e.value;return e.isSmall?E(n,Math.abs(r),this.sign):function(t,e,n){var r;return N(t,e)>=0?r=x(t,e):(r=x(e,t),n=!n),"number"==typeof(r=h(r))?(n&&(r=-r),new c(r)):new p(r,n)}(n,r,this.sign)},p.prototype.minus=p.prototype.subtract,c.prototype.subtract=function(t){var e=j(t),n=this.value;if(n<0!==e.sign)return this.add(e.negate());var r=e.value;return e.isSmall?new c(n-r):E(r,Math.abs(n),n>=0)},c.prototype.minus=c.prototype.subtract,l.prototype.subtract=function(t){return new l(this.value-j(t).value)},l.prototype.minus=l.prototype.subtract,p.prototype.negate=function(){return new p(this.value,!this.sign)},c.prototype.negate=function(){var t=this.sign,e=new c(-this.value);return e.sign=!t,e},l.prototype.negate=function(){return new l(-this.value)},p.prototype.abs=function(){return new p(this.value,!1)},c.prototype.abs=function(){return new c(Math.abs(this.value))},l.prototype.abs=function(){return new l(this.value>=0?this.value:-this.value)},p.prototype.multiply=function(t){var n,r,o,i=j(t),a=this.value,s=i.value,c=this.sign!==i.sign;if(i.isSmall){if(0===s)return u[0];if(1===s)return this;if(-1===s)return this.negate();if((n=Math.abs(s))<e)return new p(A(a,n),c);s=f(n)}return r=a.length,o=s.length,new p(-.012*r-.012*o+15e-6*r*o>0?function t(e,n){var r=Math.max(e.length,n.length);if(r<=30)return w(e,n);r=Math.ceil(r/2);var o=e.slice(r),i=e.slice(0,r),a=n.slice(r),s=n.slice(0,r),u=t(i,s),p=t(o,a),c=t(_(i,o),_(s,a)),l=_(_(u,I(x(x(c,u),p),r)),I(p,2*r));return m(l),l}(a,s):w(a,s),c)},p.prototype.times=p.prototype.multiply,c.prototype._multiplyBySmall=function(t){return d(t.value*this.value)?new c(t.value*this.value):R(Math.abs(t.value),f(Math.abs(this.value)),this.sign!==t.sign)},p.prototype._multiplyBySmall=function(t){return 0===t.value?u[0]:1===t.value?this:-1===t.value?this.negate():R(Math.abs(t.value),this.value,this.sign!==t.sign)},c.prototype.multiply=function(t){return j(t)._multiplyBySmall(this)},c.prototype.times=c.prototype.multiply,l.prototype.multiply=function(t){return new l(this.value*j(t).value)},l.prototype.times=l.prototype.multiply,p.prototype.square=function(){return new p(T(this.value),!1)},c.prototype.square=function(){var t=this.value*this.value;return d(t)?new c(t):new p(T(f(Math.abs(this.value))),!1)},l.prototype.square=function(t){return new l(this.value*this.value)},p.prototype.divmod=function(t){var e=C(this,t);return{quotient:e[0],remainder:e[1]}},l.prototype.divmod=c.prototype.divmod=p.prototype.divmod,p.prototype.divide=function(t){return C(this,t)[0]},l.prototype.over=l.prototype.divide=function(t){return new l(this.value/j(t).value)},c.prototype.over=c.prototype.divide=p.prototype.over=p.prototype.divide,p.prototype.mod=function(t){return C(this,t)[1]},l.prototype.mod=l.prototype.remainder=function(t){return new l(this.value%j(t).value)},c.prototype.remainder=c.prototype.mod=p.prototype.remainder=p.prototype.mod,p.prototype.pow=function(t){var e,n,r,o=j(t),i=this.value,a=o.value;if(0===a)return u[1];if(0===i)return u[0];if(1===i)return u[1];if(-1===i)return o.isEven()?u[1]:u[-1];if(o.sign)return u[0];if(!o.isSmall)throw new Error("The exponent "+o.toString()+" is too large.");if(this.isSmall&&d(e=Math.pow(i,a)))return new c(v(e));for(n=this,r=u[1];!0&a&&(r=r.times(n),--a),0!==a;)a/=2,n=n.square();return r},c.prototype.pow=p.prototype.pow,l.prototype.pow=function(t){var e=j(t),n=this.value,r=e.value,o=BigInt(0),i=BigInt(1),a=BigInt(2);if(r===o)return u[1];if(n===o)return u[0];if(n===i)return u[1];if(n===BigInt(-1))return e.isEven()?u[1]:u[-1];if(e.isNegative())return new l(o);for(var s=this,p=u[1];(r&i)===i&&(p=p.times(s),--r),r!==o;)r/=a,s=s.square();return p},p.prototype.modPow=function(t,e){if(t=j(t),(e=j(e)).isZero())throw new Error("Cannot take modPow with modulus 0");var n=u[1],r=this.mod(e);for(t.isNegative()&&(t=t.multiply(u[-1]),r=r.modInv(e));t.isPositive();){if(r.isZero())return u[0];t.isOdd()&&(n=n.multiply(r).mod(e)),t=t.divide(2),r=r.square().mod(e)}return n},l.prototype.modPow=c.prototype.modPow=p.prototype.modPow,p.prototype.compareAbs=function(t){var e=j(t),n=this.value,r=e.value;return e.isSmall?1:N(n,r)},c.prototype.compareAbs=function(t){var e=j(t),n=Math.abs(this.value),r=e.value;return e.isSmall?n===(r=Math.abs(r))?0:n>r?1:-1:-1},l.prototype.compareAbs=function(t){var e=this.value,n=j(t).value;return(e=e>=0?e:-e)===(n=n>=0?n:-n)?0:e>n?1:-1},p.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=j(t),n=this.value,r=e.value;return this.sign!==e.sign?e.sign?1:-1:e.isSmall?this.sign?-1:1:N(n,r)*(this.sign?-1:1)},p.prototype.compareTo=p.prototype.compare,c.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=j(t),n=this.value,r=e.value;return e.isSmall?n==r?0:n>r?1:-1:n<0!==e.sign?n<0?-1:1:n<0?1:-1},c.prototype.compareTo=c.prototype.compare,l.prototype.compare=function(t){if(t===1/0)return-1;if(t===-1/0)return 1;var e=this.value,n=j(t).value;return e===n?0:e>n?1:-1},l.prototype.compareTo=l.prototype.compare,p.prototype.equals=function(t){return 0===this.compare(t)},l.prototype.eq=l.prototype.equals=c.prototype.eq=c.prototype.equals=p.prototype.eq=p.prototype.equals,p.prototype.notEquals=function(t){return 0!==this.compare(t)},l.prototype.neq=l.prototype.notEquals=c.prototype.neq=c.prototype.notEquals=p.prototype.neq=p.prototype.notEquals,p.prototype.greater=function(t){return this.compare(t)>0},l.prototype.gt=l.prototype.greater=c.prototype.gt=c.prototype.greater=p.prototype.gt=p.prototype.greater,p.prototype.lesser=function(t){return this.compare(t)<0},l.prototype.lt=l.prototype.lesser=c.prototype.lt=c.prototype.lesser=p.prototype.lt=p.prototype.lesser,p.prototype.greaterOrEquals=function(t){return this.compare(t)>=0},l.prototype.geq=l.prototype.greaterOrEquals=c.prototype.geq=c.prototype.greaterOrEquals=p.prototype.geq=p.prototype.greaterOrEquals,p.prototype.lesserOrEquals=function(t){return this.compare(t)<=0},l.prototype.leq=l.prototype.lesserOrEquals=c.prototype.leq=c.prototype.lesserOrEquals=p.prototype.leq=p.prototype.lesserOrEquals,p.prototype.isEven=function(){return 0==(1&this.value[0])},c.prototype.isEven=function(){return 0==(1&this.value)},l.prototype.isEven=function(){return(this.value&BigInt(1))===BigInt(0)},p.prototype.isOdd=function(){return 1==(1&this.value[0])},c.prototype.isOdd=function(){return 1==(1&this.value)},l.prototype.isOdd=function(){return(this.value&BigInt(1))===BigInt(1)},p.prototype.isPositive=function(){return!this.sign},c.prototype.isPositive=function(){return this.value>0},l.prototype.isPositive=c.prototype.isPositive,p.prototype.isNegative=function(){return this.sign},c.prototype.isNegative=function(){return this.value<0},l.prototype.isNegative=c.prototype.isNegative,p.prototype.isUnit=function(){return!1},c.prototype.isUnit=function(){return 1===Math.abs(this.value)},l.prototype.isUnit=function(){return this.abs().value===BigInt(1)},p.prototype.isZero=function(){return!1},c.prototype.isZero=function(){return 0===this.value},l.prototype.isZero=function(){return this.value===BigInt(0)},p.prototype.isDivisibleBy=function(t){var e=j(t);return!e.isZero()&&(!!e.isUnit()||(0===e.compareAbs(2)?this.isEven():this.mod(e).isZero()))},l.prototype.isDivisibleBy=c.prototype.isDivisibleBy=p.prototype.isDivisibleBy,p.prototype.isPrime=function(t){var e=k(this);if(void 0!==e)return e;var n=this.abs(),r=n.bitLength();if(r<=64)return O(n,[2,3,5,7,11,13,17,19,23,29,31,37]);for(var i=Math.log(2)*r.toJSNumber(),a=Math.ceil(!0===t?2*Math.pow(i,2):i),s=[],u=0;u<a;u++)s.push(o(u+2));return O(n,s)},l.prototype.isPrime=c.prototype.isPrime=p.prototype.isPrime,p.prototype.isProbablePrime=function(t,e){var n=k(this);if(void 0!==n)return n;for(var r=this.abs(),i=void 0===t?5:t,a=[],s=0;s<i;s++)a.push(o.randBetween(2,r.minus(2),e));return O(r,a)},l.prototype.isProbablePrime=c.prototype.isProbablePrime=p.prototype.isProbablePrime,p.prototype.modInv=function(t){for(var e,n,r,i=o.zero,a=o.one,s=j(t),u=this.abs();!u.isZero();)e=s.divide(u),n=i,r=s,i=a,s=u,a=n.subtract(e.multiply(a)),u=r.subtract(e.multiply(u));if(!s.isUnit())throw new Error(this.toString()+" and "+t.toString()+" are not co-prime");return-1===i.compare(0)&&(i=i.add(t)),this.isNegative()?i.negate():i},l.prototype.modInv=c.prototype.modInv=p.prototype.modInv,p.prototype.next=function(){var t=this.value;return this.sign?E(t,1,this.sign):new p(b(t,1),this.sign)},c.prototype.next=function(){var t=this.value;return t+1<r?new c(t+1):new p(i,!1)},l.prototype.next=function(){return new l(this.value+BigInt(1))},p.prototype.prev=function(){var t=this.value;return this.sign?new p(b(t,1),!0):E(t,1,this.sign)},c.prototype.prev=function(){var t=this.value;return t-1>-r?new c(t-1):new p(i,!0)},l.prototype.prev=function(){return new l(this.value-BigInt(1))};for(var D=[1];2*D[D.length-1]<=e;)D.push(2*D[D.length-1]);var M=D.length,L=D[M-1];function P(t){return Math.abs(t)<=e}function B(t,e,n){e=j(e);for(var r=t.isNegative(),i=e.isNegative(),a=r?t.not():t,s=i?e.not():e,u=0,p=0,c=null,l=null,d=[];!a.isZero()||!s.isZero();)u=(c=C(a,L))[1].toJSNumber(),r&&(u=L-1-u),p=(l=C(s,L))[1].toJSNumber(),i&&(p=L-1-p),a=c[0],s=l[0],d.push(n(u,p));for(var f=0!==n(r?1:0,i?1:0)?o(-1):o(0),h=d.length-1;h>=0;h-=1)f=f.multiply(L).add(o(d[h]));return f}p.prototype.shiftLeft=function(t){var e=j(t).toJSNumber();if(!P(e))throw new Error(String(e)+" is too large for shifting.");if(e<0)return this.shiftRight(-e);var n=this;if(n.isZero())return n;for(;e>=M;)n=n.multiply(L),e-=M-1;return n.multiply(D[e])},l.prototype.shiftLeft=c.prototype.shiftLeft=p.prototype.shiftLeft,p.prototype.shiftRight=function(t){var e,n=j(t).toJSNumber();if(!P(n))throw new Error(String(n)+" is too large for shifting.");if(n<0)return this.shiftLeft(-n);for(var r=this;n>=M;){if(r.isZero()||r.isNegative()&&r.isUnit())return r;r=(e=C(r,L))[1].isNegative()?e[0].prev():e[0],n-=M-1}return(e=C(r,D[n]))[1].isNegative()?e[0].prev():e[0]},l.prototype.shiftRight=c.prototype.shiftRight=p.prototype.shiftRight,p.prototype.not=function(){return this.negate().prev()},l.prototype.not=c.prototype.not=p.prototype.not,p.prototype.and=function(t){return B(this,t,(function(t,e){return t&e}))},l.prototype.and=c.prototype.and=p.prototype.and,p.prototype.or=function(t){return B(this,t,(function(t,e){return t|e}))},l.prototype.or=c.prototype.or=p.prototype.or,p.prototype.xor=function(t){return B(this,t,(function(t,e){return t^e}))},l.prototype.xor=c.prototype.xor=p.prototype.xor;var F=1<<30,U=(e&-e)*(e&-e)|F;function q(t){var n=t.value,r="number"==typeof n?n|F:"bigint"==typeof n?n|BigInt(F):n[0]+n[1]*e|U;return r&-r}function G(t,e){return t=j(t),e=j(e),t.greater(e)?t:e}function W(t,e){return t=j(t),e=j(e),t.lesser(e)?t:e}function z(t,e){if(t=j(t).abs(),e=j(e).abs(),t.equals(e))return t;if(t.isZero())return e;if(e.isZero())return t;for(var n,r,o=u[1];t.isEven()&&e.isEven();)n=W(q(t),q(e)),t=t.divide(n),e=e.divide(n),o=o.multiply(n);for(;t.isEven();)t=t.divide(q(t));do{for(;e.isEven();)e=e.divide(q(e));t.greater(e)&&(r=e,e=t,t=r),e=e.subtract(t)}while(!e.isZero());return o.isUnit()?t:t.multiply(o)}p.prototype.bitLength=function(){var t=this;return t.compareTo(o(0))<0&&(t=t.negate().subtract(o(1))),0===t.compareTo(o(0))?o(0):o(function t(e,n){if(n.compareTo(e)<=0){var r=t(e,n.square(n)),i=r.p,a=r.e,s=i.multiply(n);return s.compareTo(e)<=0?{p:s,e:2*a+1}:{p:i,e:2*a}}return{p:o(1),e:0}}(t,o(2)).e).add(o(1))},l.prototype.bitLength=c.prototype.bitLength=p.prototype.bitLength;var V=function(t,e,n,r){n=n||a,t=String(t),r||(t=t.toLowerCase(),n=n.toLowerCase());var o,i=t.length,s=Math.abs(e),u={};for(o=0;o<n.length;o++)u[n[o]]=o;for(o=0;o<i;o++){if("-"!==(l=t[o])&&(l in u&&u[l]>=s)){if("1"===l&&1===s)continue;throw new Error(l+" is not a valid digit in base "+e+".")}}e=j(e);var p=[],c="-"===t[0];for(o=c?1:0;o<t.length;o++){var l;if((l=t[o])in u)p.push(j(u[l]));else{if("<"!==l)throw new Error(l+" is not a valid character");var d=o;do{o++}while(">"!==t[o]&&o<t.length);p.push(j(t.slice(d+1,o)))}}return H(p,e,c)};function H(t,e,n){var r,o=u[0],i=u[1];for(r=t.length-1;r>=0;r--)o=o.add(t[r].times(i)),i=i.times(e);return n?o.negate():o}function X(t,e){if((e=o(e)).isZero()){if(t.isZero())return{value:[0],isNegative:!1};throw new Error("Cannot convert nonzero numbers to base 0.")}if(e.equals(-1)){if(t.isZero())return{value:[0],isNegative:!1};if(t.isNegative())return{value:[].concat.apply([],Array.apply(null,Array(-t.toJSNumber())).map(Array.prototype.valueOf,[1,0])),isNegative:!1};var n=Array.apply(null,Array(t.toJSNumber()-1)).map(Array.prototype.valueOf,[0,1]);return n.unshift([1]),{value:[].concat.apply([],n),isNegative:!1}}var r=!1;if(t.isNegative()&&e.isPositive()&&(r=!0,t=t.abs()),e.isUnit())return t.isZero()?{value:[0],isNegative:!1}:{value:Array.apply(null,Array(t.toJSNumber())).map(Number.prototype.valueOf,1),isNegative:r};for(var i,a=[],s=t;s.isNegative()||s.compareAbs(e)>=0;){i=s.divmod(e),s=i.quotient;var u=i.remainder;u.isNegative()&&(u=e.minus(u).abs(),s=s.next()),a.push(u.toJSNumber())}return a.push(s.toJSNumber()),{value:a.reverse(),isNegative:r}}function Y(t,e,n){var r=X(t,e);return(r.isNegative?"-":"")+r.value.map((function(t){return function(t,e){return t<(e=e||a).length?e[t]:"<"+t+">"}(t,n)})).join("")}function $(t){if(d(+t)){var e=+t;if(e===v(e))return s?new l(BigInt(e)):new c(e);throw new Error("Invalid integer: "+t)}var r="-"===t[0];r&&(t=t.slice(1));var o=t.split(/e/i);if(o.length>2)throw new Error("Invalid integer: "+o.join("e"));if(2===o.length){var i=o[1];if("+"===i[0]&&(i=i.slice(1)),(i=+i)!==v(i)||!d(i))throw new Error("Invalid integer: "+i+" is not a valid exponent.");var a=o[0],u=a.indexOf(".");if(u>=0&&(i-=a.length-u-1,a=a.slice(0,u)+a.slice(u+1)),i<0)throw new Error("Cannot include negative exponent part for integers");t=a+=new Array(i+1).join("0")}if(!/^([0-9][0-9]*)$/.test(t))throw new Error("Invalid integer: "+t);if(s)return new l(BigInt(r?"-"+t:t));for(var f=[],h=t.length,g=n,y=h-g;h>0;)f.push(+t.slice(y,h)),(y-=g)<0&&(y=0),h-=g;return m(f),new p(f,r)}function j(t){return"number"==typeof t?function(t){if(s)return new l(BigInt(t));if(d(t)){if(t!==v(t))throw new Error(t+" is not an integer.");return new c(t)}return $(t.toString())}(t):"string"==typeof t?$(t):"bigint"==typeof t?new l(t):t}p.prototype.toArray=function(t){return X(this,t)},c.prototype.toArray=function(t){return X(this,t)},l.prototype.toArray=function(t){return X(this,t)},p.prototype.toString=function(t,e){if(void 0===t&&(t=10),10!==t)return Y(this,t,e);for(var n,r=this.value,o=r.length,i=String(r[--o]);--o>=0;)n=String(r[o]),i+="0000000".slice(n.length)+n;return(this.sign?"-":"")+i},c.prototype.toString=function(t,e){return void 0===t&&(t=10),10!=t?Y(this,t,e):String(this.value)},l.prototype.toString=c.prototype.toString,l.prototype.toJSON=p.prototype.toJSON=c.prototype.toJSON=function(){return this.toString()},p.prototype.valueOf=function(){return parseInt(this.toString(),10)},p.prototype.toJSNumber=p.prototype.valueOf,c.prototype.valueOf=function(){return this.value},c.prototype.toJSNumber=c.prototype.valueOf,l.prototype.valueOf=l.prototype.toJSNumber=function(){return parseInt(this.toString(),10)};for(var K=0;K<1e3;K++)u[K]=j(K),K>0&&(u[-K]=j(-K));return u.one=u[1],u.zero=u[0],u.minusOne=u[-1],u.max=G,u.min=W,u.gcd=z,u.lcm=function(t,e){return t=j(t).abs(),e=j(e).abs(),t.divide(z(t,e)).multiply(e)},u.isInstance=function(t){return t instanceof p||t instanceof c||t instanceof l},u.randBetween=function(t,n,r){t=j(t),n=j(n);var o=r||Math.random,i=W(t,n),a=G(t,n).subtract(i).add(1);if(a.isSmall)return i.add(Math.floor(o()*a));for(var s=X(a,e).value,p=[],c=!0,l=0;l<s.length;l++){var d=c?s[l]:e,f=v(o()*d);p.push(f),f<d&&(c=!1)}return i.add(u.fromArray(p,e,!1))},u.fromArray=function(t,e,n){return H(t.map(j),j(e||10),n)},u}();t.hasOwnProperty("exports")&&(t.exports=o),void 0===(r=function(){return o}.call(e,n,e,t))||(t.exports=r)}).call(this,n(15)(t))},function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,e,n){"use strict";n.r(e);var r=n(0),o=n(2),i=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((r=r.apply(t,e||[])).next())}))},a=function(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}},s=function(){function t(e,n){if(this.isComplex=!1,"number"==typeof e)this.tensor=r.scalar(e);else if(e instanceof Array)this.tensor=r.tensor(e);else if(e instanceof o.Vector){if(!(n>=2&&n<=3))throw new Error("p5.Vectors must be 2 or 3-dimensional.");var i=e.array().slice(0,n);this.tensor=r.tensor(i)}else if(e instanceof t)this.tensor=e.tensor;else{if(!(e instanceof r.Tensor))throw new Error("Tensors must be created from Numbers, Arrays, or p5.Vectors.");this.tensor=e}}return t.prototype.toString=function(){return this.tensor.toString()},t.prototype.array=function(){return i(this,void 0,void 0,(function(){return a(this,(function(t){switch(t.label){case 0:return[4,this.tensor.array()];case 1:return[2,t.sent()]}}))}))},t.prototype.arraySync=function(){return this.tensor.arraySync()},t.prototype.toVector=function(){var t=JSON.stringify(this.tensor.shape);if("[2]"===t||"[3]"===t){var e=this.arraySync();return o.prototype.createVector().set(e)}throw new Error("Tensor cannot be represented as 3d vector")},t.prototype.dispose=function(){this.tensor.dispose()},t.prototype.equals=function(e,n){var o=this;if(e instanceof t){if(e.isComplex&&this.isComplex)return this.complexEquals(e);if(e.isComplex||this.isComplex)throw new Error("Both tensors must be either real or complex.")}var i=!1;return r.tidy((function(){var a=new t(e,n);if(o.tensor.rank!==a.tensor.rank)throw new Error("Both tensors must have the same rank.");1===r.all(o.tensor.equal(a.tensor)).arraySync()&&(i=!0)})),i},t.prototype.real=function(){var e=this;if(!this.isComplex)throw new Error("Tensor must be complex to use this method.");return new t(r.tidy((function(){return r.real(e.tensor)})))},t.prototype.imag=function(){var e=this;if(!this.isComplex)throw new Error("Tensor must be complex to use this method.");return new t(r.tidy((function(){return r.imag(e.tensor)})))},t.prototype.complexEquals=function(t){var e=this,n=!1;return r.tidy((function(){var r=e.real().equals(t.real()),o=e.imag().equals(t.imag());r&&o&&(n=!0)})),n},t.prototype.add=function(e,n){var o=this,i=r.tidy((function(){var r=new t(e,n);return o.tensor.add(r.tensor)})),a=new t(i);return e instanceof t&&this.isComplex&&e.isComplex&&(a.isComplex=!0),a},t.prototype.sub=function(e,n){var o=this,i=r.tidy((function(){var r=new t(e,n);return o.tensor.sub(r.tensor)})),a=new t(i);return e instanceof t&&this.isComplex&&e.isComplex&&(a.isComplex=!0),a},t.prototype.mult=function(e,n){var o=this,i=r.tidy((function(){var r=new t(e,n);return o.tensor.mul(r.tensor)})),a=new t(i);return e instanceof t&&this.isComplex&&e.isComplex&&(a.isComplex=!0),a},t.prototype.div=function(e,n){var o=this,i=r.tidy((function(){var r=new t(e,n);return o.tensor.div(r.tensor)})),a=new t(i);return e instanceof t&&this.isComplex&&e.isComplex&&(a.isComplex=!0),a},t.prototype.dot=function(e,n){var o=this,i=r.tidy((function(){var r=new t(e,n);return o.tensor.dot(r.tensor)}));return new t(i)},t.prototype.abs=function(){var e=this;return new t(r.tidy((function(){return e.tensor.abs()})))},t.prototype.ceil=function(){var e=this;return new t(r.tidy((function(){return e.tensor.ceil()})))},t.prototype.constrain=function(e,n){var o=this;return new t(r.tidy((function(){return o.tensor.clipByValue(e,n)})))},t.prototype.exp=function(){var e=this;return new t(r.tidy((function(){return e.tensor.exp()})))},t.prototype.floor=function(){var e=this;return new t(r.tidy((function(){return e.tensor.floor()})))},t.prototype.log=function(){var e=this;return new t(r.tidy((function(){return e.tensor.log()})))},t.prototype.max=function(){var t,e=this;return r.tidy((function(){var n=r.max(e.tensor);t=n.arraySync()})),t},t.prototype.min=function(){var t,e=this;return r.tidy((function(){var n=r.min(e.tensor);t=n.arraySync()})),t},t.prototype.mod=function(e){var n=this,o=r.tidy((function(){var r=new t(e);return n.tensor.mod(r.tensor)}));return new t(o)},t.prototype.pow=function(e){var n=this,o=r.tidy((function(){var r=new t(e);return n.tensor.pow(r.tensor)}));return new t(o)},t.prototype.round=function(){var e=this;return new t(r.tidy((function(){return e.tensor.round()})))},t.prototype.sq=function(){var e=this;return new t(r.tidy((function(){return e.tensor.square()})))},t.prototype.sqrt=function(){var e=this;return new t(r.tidy((function(){return e.tensor.sqrt()})))},t.prototype.sum=function(e){var n=this;return new t(r.tidy((function(){return n.tensor.sum(e)})))},t.prototype.acos=function(){var e=this;return new t(r.tidy((function(){return e.tensor.acos()})))},t.prototype.asin=function(){var e=this;return new t(r.tidy((function(){return e.tensor.asin()})))},t.prototype.atan=function(){var e=this;return new t(r.tidy((function(){return e.tensor.atan()})))},t.prototype.atan2=function(e){var n=this,o=r.tidy((function(){var r=new t(e);return n.tensor.atan2(r.tensor)}));return new t(o)},t.prototype.cos=function(){var e=this;return new t(r.tidy((function(){return e.tensor.cos()})))},t.prototype.sin=function(){var e=this;return new t(r.tidy((function(){return e.tensor.sin()})))},t.prototype.tan=function(){var e=this;return new t(r.tidy((function(){return e.tensor.tan()})))},t.complex=function(e,n){var o=new t(r.tidy((function(){var o,i;if("number"==typeof e&&"number"==typeof n)o=r.tensor(e),i=r.tensor(n);else{if(!(e instanceof t&&n instanceof t))throw new Error("Components must be either Numbers or Tensors");o=r.clone(e.tensor),i=r.clone(n.tensor)}return r.complex(o,i)})));return o.isComplex=!0,o},t.prototype.copy=function(){var e=this;return new t(r.tidy((function(){return e.tensor.clone()})))},t.eye=function(e,n){return new t(r.tidy((function(){return r.eye(e,n)})))},t.fill=function(e,n){return new t(r.tidy((function(){return r.fill(e,n)})))},t.linspace=function(e,n,o){return new t(r.tidy((function(){return r.linspace(e,n,o)})))},t.ones=function(e){return new t(r.tidy((function(){return r.ones(e)})))},t.random=function(e){return new t(r.tidy((function(){return r.randomUniform(e)})))},t.randomGaussian=function(e,n,o){return new t(r.tidy((function(){return r.randomNormal(e,n,o)})))},t.range=function(e,n,o){return new t(r.tidy((function(){return r.range(e,n,o)})))},t.zeros=function(e){return new t(r.tidy((function(){return r.zeros(e)})))},t.prototype.flatten=function(){var t=this,e=r.tidy((function(){return t.tensor.flatten()}));return u(e)},t.prototype.pad=function(e,n){var o=this;return new t(r.tidy((function(){return o.tensor.pad(e,n)})))},t.prototype.reshape=function(e){var n=this;return new t(r.tidy((function(){return n.tensor.reshape(e)})))},t.prototype.concat=function(e,n){var o=this;return new t(r.tidy((function(){var i=[o.tensor];if(e instanceof t)i.push(e.tensor);else if(e instanceof Array){var a=e.map((function(t){return t.tensor}));i.concat(a)}return r.concat(i,n)})))},t.prototype.reverse=function(e){var n=this;return new t(r.tidy((function(){return n.tensor.reverse(e)})))},t.prototype.slice=function(e,n){var o=this;return new t(r.tidy((function(){return o.tensor.slice(e,n)})))},t.prototype.split=function(e,n){var o=this;return r.tidy((function(){return o.tensor.split(e,n)})).map((function(e){return new t(e)}))},t.stack=function(e,n){return new t(r.tidy((function(){for(var t=new Array(e.length),o=0;o<e.length;o+=1)t[o]=e[o].tensor;return r.stack(t,n)})))},t.prototype.unstack=function(e){var n=this;return r.tidy((function(){return n.tensor.unstack(e)})).map((function(e){return new t(e)}))},t.prototype.addRows=function(e,n,o){var i=this;return void 0===o&&(o=1),new t(r.tidy((function(){if(2===i.tensor.shape.length){var t=i.tensor.slice(0,n),r=i.tensor.slice(e,1),a=i.tensor.slice(n,1),s=i.tensor.slice(n+1,i.tensor.shape[0]-n-1);return a=a.add(r.mul(o)),t.concat([a,s])}})))},t.prototype.subRows=function(e,n,o){var i=this;return void 0===o&&(o=1),new t(r.tidy((function(){if(2===i.tensor.shape.length){var t=i.tensor.slice(0,n),r=i.tensor.slice(e,1),a=i.tensor.slice(n,1),s=i.tensor.slice(n+1,i.tensor.shape[0]-n-1);return a=a.sub(r.mul(o)),t.concat([a,s])}})))},t.prototype.swapRows=function(e,n){var o=this;if(e>n){var i=e;e=n,n=i}return new t(r.tidy((function(){if(2===o.tensor.shape.length){var t=o.tensor.slice(0,e),r=o.tensor.slice(e,1),i=o.tensor.slice(e+1,n-e-1),a=o.tensor.slice(n,1),s=o.tensor.slice(n+1,o.tensor.shape[0]-n-1);return t.concat([a,i,r,s])}})))},t.prototype.mulRow=function(e,n){var o=this;return new t(r.tidy((function(){if(2===o.tensor.shape.length){var t=o.tensor.slice(0,e),r=o.tensor.slice(e,1),i=o.tensor.slice(e+1,o.tensor.shape[0]-e-1);return r=r.mul(n),t.concat([r,i])}})))},t}(),u=function(t,e){return new s(t,e)},p=n(4).run;n.d(e,"tidy",(function(){return c})),n.d(e,"run",(function(){return p})),n.d(e,"tfc",(function(){return r})),n.d(e,"Tensor",(function(){return s})),p5.prototype.createTensor=u;var c=r.tidy}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
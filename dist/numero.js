!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=12)}([function(t,e,n){"use strict";n.r(e),function(t,r,o,i){n.d(e,"AdadeltaOptimizer",(function(){return lf})),n.d(e,"AdagradOptimizer",(function(){return hf})),n.d(e,"AdamOptimizer",(function(){return ff})),n.d(e,"AdamaxOptimizer",(function(){return df})),n.d(e,"DataStorage",(function(){return no})),n.d(e,"ENV",(function(){return f})),n.d(e,"Environment",(function(){return l})),n.d(e,"KernelBackend",(function(){return ro})),n.d(e,"MomentumOptimizer",(function(){return vf})),n.d(e,"Optimizer",(function(){return cf})),n.d(e,"RMSPropOptimizer",(function(){return mf})),n.d(e,"Rank",(function(){return gt})),n.d(e,"Reduction",(function(){return vl})),n.d(e,"SGDOptimizer",(function(){return pf})),n.d(e,"Tensor",(function(){return vt})),n.d(e,"TensorBuffer",(function(){return ht})),n.d(e,"Variable",(function(){return mt})),n.d(e,"abs",(function(){return vs})),n.d(e,"acos",(function(){return ms})),n.d(e,"acosh",(function(){return gs})),n.d(e,"add",(function(){return mu})),n.d(e,"addN",(function(){return gu})),n.d(e,"addStrict",(function(){return yu})),n.d(e,"all",(function(){return Mc})),n.d(e,"any",(function(){return Fc})),n.d(e,"argMax",(function(){return Bc})),n.d(e,"argMin",(function(){return Pc})),n.d(e,"asin",(function(){return ys})),n.d(e,"asinh",(function(){return xs})),n.d(e,"atan",(function(){return bs})),n.d(e,"atan2",(function(){return xu})),n.d(e,"atanh",(function(){return ws})),n.d(e,"avgPool",(function(){return Rc})),n.d(e,"avgPool3d",(function(){return kc})),n.d(e,"backend",(function(){return nn})),n.d(e,"backend_util",(function(){return Eo})),n.d(e,"basicLSTMCell",(function(){return Zc})),n.d(e,"batchNorm",(function(){return au})),n.d(e,"batchNorm2d",(function(){return su})),n.d(e,"batchNorm3d",(function(){return uu})),n.d(e,"batchNorm4d",(function(){return cu})),n.d(e,"batchNormalization",(function(){return iu})),n.d(e,"batchNormalization2d",(function(){return nu})),n.d(e,"batchNormalization3d",(function(){return ru})),n.d(e,"batchNormalization4d",(function(){return ou})),n.d(e,"batchToSpaceND",(function(){return ar})),n.d(e,"booleanMaskAsync",(function(){return Zu})),n.d(e,"browser",(function(){return Xh})),n.d(e,"buffer",(function(){return or})),n.d(e,"cast",(function(){return sr})),n.d(e,"ceil",(function(){return Cs})),n.d(e,"clipByValue",(function(){return Es})),n.d(e,"clone",(function(){return ur})),n.d(e,"complex",(function(){return wn})),n.d(e,"concat",(function(){return Un})),n.d(e,"concat1d",(function(){return Vn})),n.d(e,"concat2d",(function(){return zn})),n.d(e,"concat3d",(function(){return Gn})),n.d(e,"concat4d",(function(){return Hn})),n.d(e,"conv1d",(function(){return oc})),n.d(e,"conv2d",(function(){return ic})),n.d(e,"conv2dDerFilter",(function(){return sc})),n.d(e,"conv2dDerInput",(function(){return uc})),n.d(e,"conv2dTranspose",(function(){return hc})),n.d(e,"conv3d",(function(){return ac})),n.d(e,"conv3dTranspose",(function(){return fc})),n.d(e,"cos",(function(){return Rs})),n.d(e,"cosh",(function(){return Is})),n.d(e,"cumsum",(function(){return cr})),n.d(e,"customGrad",(function(){return Jr})),n.d(e,"deprecationWarn",(function(){return Ve})),n.d(e,"depthToSpace",(function(){return lr})),n.d(e,"depthwiseConv2d",(function(){return cc})),n.d(e,"diag",(function(){return fl})),n.d(e,"disableDeprecationWarnings",(function(){return Ue})),n.d(e,"dispose",(function(){return $e})),n.d(e,"disposeVariables",(function(){return ze})),n.d(e,"div",(function(){return bu})),n.d(e,"divStrict",(function(){return wu})),n.d(e,"dot",(function(){return pc})),n.d(e,"dropout",(function(){return dl})),n.d(e,"elu",(function(){return qc})),n.d(e,"enableDebugMode",(function(){return We})),n.d(e,"enableProdMode",(function(){return Le})),n.d(e,"environment",(function(){return p})),n.d(e,"equal",(function(){return Pu})),n.d(e,"equalStrict",(function(){return Lu})),n.d(e,"erf",(function(){return Ss})),n.d(e,"exp",(function(){return ks})),n.d(e,"expandDims",(function(){return hr})),n.d(e,"expm1",(function(){return As})),n.d(e,"eye",(function(){return fr})),n.d(e,"fft",(function(){return il})),n.d(e,"fill",(function(){return Fn})),n.d(e,"findBackend",(function(){return Ze})),n.d(e,"findBackendFactory",(function(){return tn})),n.d(e,"floor",(function(){return Ns})),n.d(e,"floorDiv",(function(){return Cu})),n.d(e,"frame",(function(){return yl})),n.d(e,"fused",(function(){return Hl})),n.d(e,"gather",(function(){return Qu})),n.d(e,"gatherND",(function(){return hl})),n.d(e,"getBackend",(function(){return Qe})),n.d(e,"grad",(function(){return jr})),n.d(e,"grads",(function(){return Kr})),n.d(e,"greater",(function(){return Wu})),n.d(e,"greaterEqual",(function(){return Uu})),n.d(e,"greaterEqualStrict",(function(){return Vu})),n.d(e,"greaterStrict",(function(){return zu})),n.d(e,"hammingWindow",(function(){return gl})),n.d(e,"hannWindow",(function(){return ml})),n.d(e,"ifft",(function(){return al})),n.d(e,"imag",(function(){return En})),n.d(e,"image",(function(){return Vl})),n.d(e,"inTopKAsync",(function(){return wl})),n.d(e,"io",(function(){return qh})),n.d(e,"irfft",(function(){return ul})),n.d(e,"isFinite",(function(){return Vs})),n.d(e,"isInf",(function(){return Us})),n.d(e,"isNaN",(function(){return Ws})),n.d(e,"keep",(function(){return je})),n.d(e,"leakyRelu",(function(){return $c})),n.d(e,"less",(function(){return Gu})),n.d(e,"lessEqual",(function(){return Hu})),n.d(e,"lessEqualStrict",(function(){return qu})),n.d(e,"lessStrict",(function(){return $u})),n.d(e,"linalg",(function(){return Fl})),n.d(e,"linspace",(function(){return Bn})),n.d(e,"localResponseNormalization",(function(){return Qc})),n.d(e,"log",(function(){return Ts})),n.d(e,"log1p",(function(){return Ds})),n.d(e,"logSigmoid",(function(){return _s})),n.d(e,"logSoftmax",(function(){return eo})),n.d(e,"logSumExp",(function(){return Lc})),n.d(e,"logicalAnd",(function(){return lu})),n.d(e,"logicalNot",(function(){return hu})),n.d(e,"logicalOr",(function(){return fu})),n.d(e,"logicalXor",(function(){return du})),n.d(e,"losses",(function(){return Dl})),n.d(e,"matMul",(function(){return dc})),n.d(e,"math",(function(){return jh})),n.d(e,"max",(function(){return Wc})),n.d(e,"maxPool",(function(){return Ec})),n.d(e,"maxPool3d",(function(){return Sc})),n.d(e,"maximum",(function(){return Eu})),n.d(e,"maximumStrict",(function(){return Ru})),n.d(e,"mean",(function(){return Uc})),n.d(e,"memory",(function(){return Ge})),n.d(e,"min",(function(){return Vc})),n.d(e,"minimum",(function(){return Iu})),n.d(e,"minimumStrict",(function(){return Su})),n.d(e,"mod",(function(){return ku})),n.d(e,"modStrict",(function(){return Au})),n.d(e,"moments",(function(){return zc})),n.d(e,"movingAverage",(function(){return el})),n.d(e,"mul",(function(){return Nu})),n.d(e,"mulStrict",(function(){return Tu})),n.d(e,"multiRNNCell",(function(){return tl})),n.d(e,"multinomial",(function(){return dr})),n.d(e,"neg",(function(){return Os})),n.d(e,"nextFrame",(function(){return bf})),n.d(e,"norm",(function(){return Jc})),n.d(e,"notEqual",(function(){return ju})),n.d(e,"notEqualStrict",(function(){return Ku})),n.d(e,"oneHot",(function(){return pr})),n.d(e,"ones",(function(){return On})),n.d(e,"onesLike",(function(){return Ln})),n.d(e,"op",(function(){return bn})),n.d(e,"outerProduct",(function(){return vc})),n.d(e,"pad",(function(){return vr})),n.d(e,"pad1d",(function(){return mr})),n.d(e,"pad2d",(function(){return gr})),n.d(e,"pad3d",(function(){return yr})),n.d(e,"pad4d",(function(){return xr})),n.d(e,"pool",(function(){return Ic})),n.d(e,"pow",(function(){return Du})),n.d(e,"powStrict",(function(){return _u})),n.d(e,"prelu",(function(){return jc})),n.d(e,"print",(function(){return ir})),n.d(e,"prod",(function(){return Hc})),n.d(e,"profile",(function(){return He})),n.d(e,"rand",(function(){return br})),n.d(e,"randomGamma",(function(){return Cr})),n.d(e,"randomNormal",(function(){return wr})),n.d(e,"randomUniform",(function(){return Er})),n.d(e,"range",(function(){return Pn})),n.d(e,"ready",(function(){return Ye})),n.d(e,"real",(function(){return Cn})),n.d(e,"reciprocal",(function(){return Ms})),n.d(e,"registerBackend",(function(){return en})),n.d(e,"relu",(function(){return Kc})),n.d(e,"removeBackend",(function(){return Je})),n.d(e,"reshape",(function(){return Rr})),n.d(e,"reverse",(function(){return mc})),n.d(e,"reverse1d",(function(){return gc})),n.d(e,"reverse2d",(function(){return yc})),n.d(e,"reverse3d",(function(){return xc})),n.d(e,"reverse4d",(function(){return bc})),n.d(e,"rfft",(function(){return sl})),n.d(e,"round",(function(){return Fs})),n.d(e,"rsqrt",(function(){return Bs})),n.d(e,"scalar",(function(){return Sn})),n.d(e,"scatterND",(function(){return ol})),n.d(e,"selu",(function(){return Xc})),n.d(e,"separableConv2d",(function(){return lc})),n.d(e,"serialization",(function(){return Zh})),n.d(e,"setBackend",(function(){return Xe})),n.d(e,"setPlatform",(function(){return rn})),n.d(e,"setdiff1dAsync",(function(){return Dr})),n.d(e,"sigmoid",(function(){return Ps})),n.d(e,"sign",(function(){return Ls})),n.d(e,"signal",(function(){return bl})),n.d(e,"sin",(function(){return zs})),n.d(e,"sinh",(function(){return Gs})),n.d(e,"slice",(function(){return Ac})),n.d(e,"slice1d",(function(){return Nc})),n.d(e,"slice2d",(function(){return Tc})),n.d(e,"slice3d",(function(){return Dc})),n.d(e,"slice4d",(function(){return _c})),n.d(e,"softmax",(function(){return to})),n.d(e,"softplus",(function(){return Hs})),n.d(e,"spaceToBatchND",(function(){return Ir})),n.d(e,"sparseToDense",(function(){return ll})),n.d(e,"spectral",(function(){return cl})),n.d(e,"split",(function(){return qn})),n.d(e,"sqrt",(function(){return qs})),n.d(e,"square",(function(){return $s})),n.d(e,"squaredDifference",(function(){return Ou})),n.d(e,"squaredDifferenceStrict",(function(){return Mu})),n.d(e,"squeeze",(function(){return Sr})),n.d(e,"stack",(function(){return kr})),n.d(e,"step",(function(){return js})),n.d(e,"stft",(function(){return xl})),n.d(e,"stridedSlice",(function(){return nl})),n.d(e,"sub",(function(){return Fu})),n.d(e,"subStrict",(function(){return Bu})),n.d(e,"sum",(function(){return Gc})),n.d(e,"tan",(function(){return Ks})),n.d(e,"tanh",(function(){return Xs})),n.d(e,"tensor",(function(){return Rn})),n.d(e,"tensor1d",(function(){return kn})),n.d(e,"tensor2d",(function(){return An})),n.d(e,"tensor3d",(function(){return Nn})),n.d(e,"tensor4d",(function(){return Tn})),n.d(e,"tensor5d",(function(){return Dn})),n.d(e,"tensor6d",(function(){return _n})),n.d(e,"tensor_util",(function(){return Tt})),n.d(e,"test_util",(function(){return af})),n.d(e,"tidy",(function(){return qe})),n.d(e,"tile",(function(){return Ar})),n.d(e,"time",(function(){return Ke})),n.d(e,"topk",(function(){return rl})),n.d(e,"train",(function(){return yf})),n.d(e,"transpose",(function(){return Yc})),n.d(e,"truncatedNormal",(function(){return Nr})),n.d(e,"unsortedSegmentSum",(function(){return Ju})),n.d(e,"unstack",(function(){return Tr})),n.d(e,"util",(function(){return nt})),n.d(e,"valueAndGrad",(function(){return Xr})),n.d(e,"valueAndGrads",(function(){return Yr})),n.d(e,"variable",(function(){return Ct})),n.d(e,"variableGrads",(function(){return Qr})),n.d(e,"version_core",(function(){return sf})),n.d(e,"webgl",(function(){return uf})),n.d(e,"where",(function(){return pu})),n.d(e,"whereAsync",(function(){return vu})),n.d(e,"zeros",(function(){return Mn})),n.d(e,"zerosLike",(function(){return Wn}));
/**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
var a=function(t,e){return(a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function s(t,e){function n(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function u(t,e,n,r){return new(n||(n=Promise))((function(o,i){function a(t){try{u(r.next(t))}catch(t){i(t)}}function s(t){try{u(r.throw(t))}catch(t){i(t)}}function u(t){t.done?o(t.value):new n((function(e){e(t.value)})).then(a,s)}u((r=r.apply(t,e||[])).next())}))}function c(t,e){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(t,a)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var l=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,e){null!=this.platform&&console.warn("Platform "+this.platformName+" has already been set. Overwriting the platform with "+e+"."),this.platformName=t,this.platform=e},t.prototype.registerFlag=function(t,e,n){if(this.flagRegistry[t]={evaluationFn:e,setHook:n},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn("Setting feature override from URL "+t+": "+r+"."),this.set(t,r)}},t.prototype.get=function(t){return t in this.flags?this.flags[t]:(this.flags[t]=this.evaluateFlag(t),this.flags[t])},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,"features",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,e){if(null==this.flagRegistry[t])throw new Error("Cannot set flag "+t+" as it has not been registered.");this.flags[t]=e,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(e)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error("Cannot evaluate flag '"+t+"': no evaluation function found.");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var e=h(this.global.location.search);"tfjsflags"in e&&e.tfjsflags.split(",").forEach((function(e){var n=e.split(":"),r=n[0],o=n[1];t.urlFlags[r]=function(t,e){if("true"===(e=e.toLowerCase())||"false"===e)return"true"===e;if(""+ +e===e)return+e;throw new Error("Could not parse value flag value "+e+" for flag "+t+".")}(r,o)}))}},t}();function h(t){var e={};return t.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return function(t,e,n){t[decodeURIComponent(e)]=decodeURIComponent(n||"")}(e,n[0],n[1]),n.join("=")})),e}var f=null;function d(t){f=t}var p=Object.freeze({Environment:l,getQueryParams:h,get ENV(){return f},setEnvironmentGlobal:d});function v(t){for(var e=t.length,n=0,r=0;e>0;)r=Math.random()*e|0,n=t[--e],t[e]=t[r],t[r]=n}function m(t,e,n){return Math.max(t,Math.min(e,n))}function g(t){return t%2==0?t:t+1}function y(t){for(var e=0,n=0;n<t.length;n++)e+=t[n];return e}function x(t,e){if(!t)throw new Error("string"==typeof e?e:e())}function b(t,e,n){void 0===n&&(n=""),x(R(t,e),(function(){return n+" Shapes "+t+" and "+e+" must match"}))}function w(t){x(null!=t,(function(){return"The input to the tensor constructor must be a non-null value."}))}function C(t,e,n){if(void 0===e&&(e=[]),void 0===n&&(n=!1),null==e&&(e=[]),Array.isArray(t)||L(t)&&!n)for(var r=0;r<t.length;++r)C(t[r],e,n);else e.push(t);return e}function E(t){if(0===t.length)return 1;for(var e=t[0],n=1;n<t.length;n++)e*=t[n];return e}function R(t,e){if(t===e)return!0;if(null==t||null==e)return!1;if(t.length!==e.length)return!1;for(var n=0;n<t.length;n++)if(t[n]!==e[n])return!1;return!0}function I(t){return t%1==0}function S(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var e=Math.exp(2*t);return(e-1)/(e+1)}function k(t){var e=Math.ceil(Math.sqrt(t));return[e,Math.ceil(t/e)]}function A(t,e){return e<=t.length?t:t+" ".repeat(e-t.length)}function N(t,e,n){return void 0===e&&(e=function(t){return 0}),new Promise((function(r,o){var i=0,a=function(){if(t())r();else{var s=e(++i);null!=n&&i>=n?o():setTimeout(a,s)}};a()}))}function T(t,e){for(var n=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)n*=t[o];else if(-1===t[o]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+o);r=o}else if(t[o]<0)throw Error("Shapes can not be < 0. Found "+t[o]+" at dim "+o);if(-1===r){if(e>0&&e!==n)throw Error("Size("+e+") must match the product of shape "+t);return t}if(0===n)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(e%n!=0)throw Error("The implicit shape can't be a fractional number. Got "+e+" / "+n);var i=t.slice();return i[r]=e/n,i}function D(t,e){var n=e.length;return x((t=null==t?e.map((function(t,e){return e})):[].concat(t)).every((function(t){return t>=-n&&t<n})),(function(){return"All values in axis param must be in range [-"+n+", "+n+") but got axis "+t})),x(t.every((function(t){return I(t)})),(function(){return"All values in axis param must be integers but got axis "+t})),t.map((function(t){return t<0?n+t:t}))}function _(t,e){for(var n=[],r=[],o=null!=e&&Array.isArray(e)&&0===e.length,i=null==e||o?null:D(e,t).sort(),a=0,s=0;s<t.length;++s){if(null!=i){if(i[a]===s&&1!==t[s])throw new Error("Can't squeeze axis "+s+" since its dim '"+t[s]+"' is not 1");(null==i[a]||i[a]>s)&&1===t[s]&&(n.push(t[s]),r.push(s)),i[a]<=s&&a++}1!==t[s]&&(n.push(t[s]),r.push(s))}return{newShape:n,keptDims:r}}function O(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else{if("bool"!==t)throw new Error("Unknown data type "+t);n=new Uint8Array(e)}return n}function M(t,e){var n=null;if(null==t||"float32"===t)n=new Float32Array(e);else if("int32"===t)n=new Int32Array(e);else if("bool"===t)n=new Uint8Array(e);else{if("string"!==t)throw new Error("Unknown data type "+t);n=new Array(e)}return n}function F(t,e){for(var n=0;n<t.length;n++){var r=t[n];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+e+" being uploaded contains "+r+".")}}function B(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function P(t,e){return!("complex64"===e||"float32"===e&&"complex64"!==t||"int32"===e&&"float32"!==t&&"complex64"!==t||"bool"===e&&"bool"===t)}function L(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function W(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function U(t){if(null==t)return 0;var e=0;return t.forEach((function(t){return e+=t.length})),e}function V(t){return"string"==typeof t||t instanceof String}function z(t){return"boolean"==typeof t}function G(t){return"number"==typeof t}function H(t){return Array.isArray(t)?H(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":G(t)?"float32":V(t)?"string":z(t)?"bool":"float32"}function q(t){return!!(t&&t.constructor&&t.call&&t.apply)}function $(t,e){for(var n=e;n<t;++n)if(t%n==0)return n;return t}function j(t){var e=t.length;if(e<2)return[];var n=new Array(e-1);n[e-2]=t[e-1];for(var r=e-3;r>=0;--r)n[r]=n[r+1]*t[r+1];return n}function K(t,e,n){if("string"===e)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=C(t)),n&&F(t,e),function(t,e){return t instanceof Float32Array&&"float32"===e||t instanceof Int32Array&&"int32"===e||t instanceof Uint8Array&&"bool"===e}(t,e))return t;if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e){for(var r=new Uint8Array(t.length),o=0;o<r.length;++o)0!==Math.round(t[o])&&(r[o]=1);return r}throw new Error("Unknown data type "+e)}function X(t,e){if(0===t.length)return e[0];var n=t.reduce((function(t,e){return t*e}));if(0===n)return[];if(n!==e.length)throw new Error("["+t+"] does not match the input size.");return function t(e,n,r){var o=new Array;if(1===n.length)for(var i=n[0],a=0;a<i;a++)o[a]=r[e+a];else{i=n[0];var s=n.slice(1),u=s.reduce((function(t,e){return t*e}));for(a=0;a<i;a++)o[a]=t(e+a*u,s,r)}return o}(0,t,e)}function Y(t,e){for(var n=Q(t,e),r=0;r<n.length;r++)n[r]=1;return n}function Q(t,e){if(null==e||"float32"===e||"complex64"===e)return new Float32Array(t);if("int32"===e)return new Int32Array(t);if("bool"===e)return new Uint8Array(t);throw new Error("Unknown data type "+e)}function J(){return f.platform.now()}function Z(t){t.forEach((function(e){x(Number.isInteger(e)&&e>=0,(function(){return"Tensor must have a shape comprised of positive integers but got shape ["+t+"]."}))}))}function tt(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",f.platform.encode(t,e)}function et(t,e){return void 0===e&&(e="utf-8"),e=e||"utf-8",f.platform.decode(t,e)}var nt=Object.freeze({shuffle:v,clamp:m,nearestLargerEven:g,sum:y,randUniform:function(t,e){var n=Math.random();return e*n+(1-n)*t},distSquared:function(t,e){for(var n=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(e[r]);n+=o*o}return n},assert:x,assertShapesMatch:b,assertNonNull:w,flatten:C,sizeFromShape:E,isScalarShape:function(t){return 0===t.length},arraysEqual:R,isInt:I,tanh:S,sizeToSquarishShape:k,createShuffledIndices:function(t){for(var e=new Uint32Array(t),n=0;n<t;++n)e[n]=n;return v(e),e},rightPad:A,repeatedTry:N,inferFromImplicitShape:T,parseAxisParam:D,squeezeShape:_,getTypedArrayFromDType:O,getArrayFromDType:M,checkConversionForErrors:F,isValidDtype:B,hasEncodingLoss:P,isTypedArray:L,bytesPerElement:W,bytesFromStringArray:U,isString:V,isBoolean:z,isNumber:G,inferDtype:H,isFunction:q,nearestDivisor:$,computeStrides:j,toTypedArray:K,toNestedArray:X,makeOnesTypedArray:Y,makeZerosTypedArray:Q,now:J,assertNonNegativeIntegerDimensions:Z,fetch:function(t,e){return f.platform.fetch(t,e)},encodeString:tt,decodeString:et}),rt=function(){function t(t,e){this.backendTimer=t,this.logger=e,null==e&&(this.logger=new ot)}return t.prototype.profileKernel=function(t,e,n){var r,o=this,i=this.backendTimer.time((function(){r=n()}));return(Array.isArray(r)?r:[r]).forEach((function(n){n.data().then((function(r){!function(t,e,n){if("float32"!==e)return!1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn("Found "+o+" in the result of '"+n+"'"),!0}}(r,n.dtype,t),i.then((function(i){var a="";null!=i.getExtraProfileInfo&&(a=i.getExtraProfileInfo()),o.logger.logKernelProfile(t,n,r,i.kernelMs,e,a)}))}))})),r},t}(),ot=function(){function t(){}return t.prototype.logKernelProfile=function(t,e,n,r,o,i){var a=A(r+"ms",9),s=A(t,25),u=e.rank,c=e.size,l=A(e.shape.toString(),14),h="";for(var f in o){var d=o[f].shape,p=d.length;h+=f+": "+p+"D "+(p>0?d:"")+" "}console.log("%c"+s+"\t%c"+a+"\t%c"+u+"D "+l+"\t%c"+c+"\t%c"+h+"\t%c"+i,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")},t}(),it=20,at=3,st=7;function ut(t,e,n){return A(Array.isArray(t)?parseFloat(t[0].toFixed(st))+" + "+parseFloat(t[1].toFixed(st))+"j":V(t)?"'"+t+"'":"bool"===n?ct(t):parseFloat(t.toFixed(st)).toString(),e)}function ct(t){return 0===t?"false":"true"}function lt(t){for(var e=[],n=0;n<t.length;n+=2)e.push([t[n],t[n+1]]);return e}var ht=function(){function t(t,e,n){var r=this;if(this.dtype=e,this.shape=t.slice(),this.size=E(t),null!=n){var o=n.length;x(o===this.size,(function(){return"Length of values '"+o+"' does not match the size inferred by the shape '"+r.size+"'."}))}if("complex64"===e)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||M(e,this.size),this.strides=j(t)}return t.prototype.set=function(t){for(var e=this,n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),x(n.length===this.rank,(function(){return"The number of provided coordinates ("+n.length+") must match the rank ("+e.rank+")"}));var o=this.locToIndex(n);this.values[o]=t},t.prototype.get=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];0===t.length&&(t=[0]);for(var n=0,r=0,o=t;r<o.length;r++){var i=o[r];if(i<0||i>=this.shape[n]){var a="Requested out of range element at "+t+".   Buffer shape="+this.shape;throw new Error(a)}n++}for(var s=t[t.length-1],u=0;u<t.length-1;++u)s+=this.strides[u]*t[u];return this.values[s]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var e=t[t.length-1],n=0;n<t.length-1;++n)e+=this.strides[n]*t[n];return e},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var e=new Array(this.shape.length),n=0;n<e.length-1;++n)e[n]=Math.floor(t/this.strides[n]),t-=e[n]*this.strides[n];return e[e.length-1]=t,e},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return vt.make(this.shape,{values:this.values},this.dtype)},t}(),ft=null,dt=null,pt=null,vt=function(){function t(t,e,n,r,o){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=e||"float32",this.size=E(t),this.strides=j(t),this.dataId=null!=r?r:{},this.id=ft().nextTensorId(),this.rankType=this.rank<5?this.rank.toString():"higher",ft().registerTensor(this,o),null!=n&&ft().write(o,this.dataId,n)}return t.make=function(e,n,r,o){var i=n.values;return null!=n.values&&"string"===r&&V(n.values[0])&&(i=n.values.map((function(t){return tt(t)}))),new t(e,r,i,n.dataId,o)},t.prototype.flatten=function(){return this.throwIfDisposed(),this.as1D()},t.prototype.asScalar=function(){return this.throwIfDisposed(),x(1===this.size,(function(){return"The array must have only 1 element."})),this.reshape([])},t.prototype.as1D=function(){return this.throwIfDisposed(),this.reshape([this.size])},t.prototype.as2D=function(t,e){return this.throwIfDisposed(),this.reshape([t,e])},t.prototype.as3D=function(t,e,n){return this.throwIfDisposed(),this.reshape([t,e,n])},t.prototype.as4D=function(t,e,n,r){return this.throwIfDisposed(),this.reshape([t,e,n,r])},t.prototype.as5D=function(t,e,n,r,o){return this.throwIfDisposed(),this.reshape([t,e,n,r,o])},t.prototype.asType=function(t){return this.throwIfDisposed(),dt.cast(this,t)},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,dt.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return dt.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return[4,this.data()];case 1:return t=e.sent(),[2,X(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return X(this.shape,this.dataSync())},t.prototype.data=function(){return u(this,void 0,void 0,(function(){var t,e;return c(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),t=ft().read(this.dataId),"string"!==this.dtype?[3,2]:[4,t];case 1:e=n.sent();try{return[2,e.map((function(t){return et(t)}))]}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}n.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=ft().readSync(this.dataId);if("string"===this.dtype)try{return t.map((function(t){return et(t)}))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t},t.prototype.bytes=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),[4,ft().read(this.dataId)];case 1:return t=e.sent(),"string"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(ft().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.toFloat=function(){return this.asType("float32")},t.prototype.toInt=function(){return this.asType("int32")},t.prototype.toBool=function(){return this.asType("bool")},t.prototype.print=function(t){return void 0===t&&(t=!1),dt.print(this,t)},t.prototype.reshape=function(t){return this.throwIfDisposed(),dt.reshape(this,t)},t.prototype.reshapeAs=function(t){return this.throwIfDisposed(),this.reshape(t.shape)},t.prototype.expandDims=function(t){return void 0===t&&(t=0),dt.expandDims(this,t)},t.prototype.cumsum=function(t,e,n){return void 0===t&&(t=0),void 0===e&&(e=!1),void 0===n&&(n=!1),dt.cumsum(this,t,e,n)},t.prototype.squeeze=function(t){return this.throwIfDisposed(),dt.squeeze(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),dt.clone(this)},t.prototype.oneHot=function(t,e,n){return this.throwIfDisposed(),dt.oneHot(this,t,e,n)},t.prototype.toString=function(t){return void 0===t&&(t=!1),function(t,e,n,r){var o=j(e),i=function(t,e,n,r){var o=E(e),i=r[r.length-1],a=new Array(i).fill(0),s=e.length,u="complex64"===n?lt(t):t;if(s>1)for(var c=0;c<o/i;c++)for(var l=c*i,h=0;h<i;h++)a[h]=Math.max(a[h],ut(u[l+h],0,n).length);return a}(t,e,n,o),a=e.length,s=function t(e,n,r,o,i,a){void 0===a&&(a=!0);var s="complex64"===r?2:1,u=n[0],c=n.length;if(0===c)return"complex64"===r?[ut(lt(e)[0],0,r)]:"bool"===r?[ct(e[0])]:[e[0].toString()];if(1===c){if(u>it){var l=at*s,h=Array.from(e.slice(0,l)),f=Array.from(e.slice(u-at*s,u));return"complex64"===r&&(h=lt(h),f=lt(f)),["["+h.map((function(t,e){return ut(t,i[e],r)})).join(", ")+", ..., "+f.map((function(t,e){return ut(t,i[u-at+e],r)})).join(", ")+"]"]}return["["+("complex64"===r?lt(e):Array.from(e)).map((function(t,e){return ut(t,i[e],r)})).join(", ")+"]"]}var d=n.slice(1),p=o.slice(1),v=o[0]*s,m=[];if(u>it){for(var g=0;g<at;g++){var y=(x=g*v)+v;m.push.apply(m,t(e.slice(x,y),d,r,p,i,!1))}m.push("...");for(g=u-at;g<u;g++){y=(x=g*v)+v;m.push.apply(m,t(e.slice(x,y),d,r,p,i,g===u-1))}}else for(g=0;g<u;g++){var x;y=(x=g*v)+v;m.push.apply(m,t(e.slice(x,y),d,r,p,i,g===u-1))}var b=2===c?",":"";m[0]="["+m[0]+b;for(g=1;g<m.length-1;g++)m[g]=" "+m[g]+b;var w=",\n";for(g=2;g<c;g++)w+="\n";return m[m.length-1]=" "+m[m.length-1]+"]"+(a?"":w),m}(t,e,n,o,i),u=["Tensor"];return r&&(u.push("  dtype: "+n),u.push("  rank: "+a),u.push("  shape: ["+e+"]"),u.push("  values:")),u.push(s.map((function(t){return"    "+t})).join("\n")),u.join("\n")}(this.dataSync(),this.shape,this.dtype,t)},t.prototype.tile=function(t){return this.throwIfDisposed(),dt.tile(this,t)},t.prototype.gather=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),dt.gather(this,t,e)},t.prototype.matMul=function(t,e,n){return void 0===e&&(e=!1),void 0===n&&(n=!1),this.throwIfDisposed(),dt.matMul(this,t,e,n)},t.prototype.dot=function(t){return this.throwIfDisposed(),dt.dot(this,t)},t.prototype.norm=function(t,e,n){return void 0===t&&(t="euclidean"),void 0===e&&(e=null),void 0===n&&(n=!1),this.throwIfDisposed(),dt.norm(this,t,e,n)},t.prototype.slice=function(t,e){return this.throwIfDisposed(),dt.slice(this,t,e)},t.prototype.reverse=function(t){return this.throwIfDisposed(),dt.reverse(this,t)},t.prototype.concat=function(e,n){return void 0===n&&(n=0),this.throwIfDisposed(),e instanceof t&&(e=[e]),dt.concat([this].concat(e),n)},t.prototype.split=function(t,e){return void 0===e&&(e=0),this.throwIfDisposed(),dt.split(this,t,e)},t.prototype.stack=function(t,e){return void 0===e&&(e=0),dt.stack([this,t],e)},t.prototype.unstack=function(t){return void 0===t&&(t=0),dt.unstack(this,t)},t.prototype.pad=function(t,e){return void 0===e&&(e=0),dt.pad(this,t,e)},t.prototype.batchNormalization=function(t,e,n,r,o){return void 0===n&&(n=.001),pt("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon"),this.batchNorm(t,e,o,r,n)},t.prototype.batchNorm=function(t,e,n,r,o){return void 0===o&&(o=.001),this.throwIfDisposed(),dt.batchNorm(this,t,e,n,r,o)},t.prototype.all=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.all(this,t,e)},t.prototype.any=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.any(this,t,e)},t.prototype.logSumExp=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.logSumExp(this,t,e)},t.prototype.sum=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.sum(this,t,e)},t.prototype.prod=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.prod(this,t,e)},t.prototype.mean=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.mean(this,t,e)},t.prototype.min=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.min(this,t,e)},t.prototype.max=function(t,e){return void 0===t&&(t=null),void 0===e&&(e=!1),this.throwIfDisposed(),dt.max(this,t,e)},t.prototype.argMin=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),dt.argMin(this,t)},t.prototype.argMax=function(t){return void 0===t&&(t=null),this.throwIfDisposed(),dt.argMax(this,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),dt.cast(this,t)},t.prototype.add=function(t){return this.throwIfDisposed(),dt.add(this,t)},t.prototype.addStrict=function(t){return this.throwIfDisposed(),dt.addStrict(this,t)},t.prototype.atan2=function(t){return this.throwIfDisposed(),dt.atan2(this,t)},t.prototype.sub=function(t){return this.throwIfDisposed(),dt.sub(this,t)},t.prototype.subStrict=function(t){return this.throwIfDisposed(),dt.subStrict(this,t)},t.prototype.pow=function(t){return this.throwIfDisposed(),dt.pow(this,t)},t.prototype.powStrict=function(t){return this.throwIfDisposed(),dt.powStrict(this,t)},t.prototype.mul=function(t){return this.throwIfDisposed(),dt.mul(this,t)},t.prototype.mulStrict=function(t){return this.throwIfDisposed(),dt.mulStrict(this,t)},t.prototype.div=function(t){return this.throwIfDisposed(),dt.div(this,t)},t.prototype.floorDiv=function(t){return this.throwIfDisposed(),dt.floorDiv(this,t)},t.prototype.divStrict=function(t){return this.throwIfDisposed(),dt.divStrict(this,t)},t.prototype.minimum=function(t){return this.throwIfDisposed(),dt.minimum(this,t)},t.prototype.minimumStrict=function(t){return this.throwIfDisposed(),dt.minimumStrict(this,t)},t.prototype.maximum=function(t){return this.throwIfDisposed(),dt.maximum(this,t)},t.prototype.maximumStrict=function(t){return this.throwIfDisposed(),dt.maximumStrict(this,t)},t.prototype.mod=function(t){return this.throwIfDisposed(),dt.mod(this,t)},t.prototype.modStrict=function(t){return this.throwIfDisposed(),dt.modStrict(this,t)},t.prototype.squaredDifference=function(t){return this.throwIfDisposed(),dt.squaredDifference(this,t)},t.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),dt.squaredDifferenceStrict(this,t)},t.prototype.transpose=function(t){return this.throwIfDisposed(),dt.transpose(this,t)},t.prototype.notEqual=function(t){return this.throwIfDisposed(),dt.notEqual(this,t)},t.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),dt.notEqualStrict(this,t)},t.prototype.less=function(t){return this.throwIfDisposed(),dt.less(this,t)},t.prototype.lessStrict=function(t){return this.throwIfDisposed(),dt.lessStrict(this,t)},t.prototype.equal=function(t){return this.throwIfDisposed(),dt.equal(this,t)},t.prototype.equalStrict=function(t){return this.throwIfDisposed(),dt.equalStrict(this,t)},t.prototype.lessEqual=function(t){return this.throwIfDisposed(),dt.lessEqual(this,t)},t.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),dt.lessEqualStrict(this,t)},t.prototype.greater=function(t){return this.throwIfDisposed(),dt.greater(this,t)},t.prototype.greaterStrict=function(t){return this.throwIfDisposed(),dt.greaterStrict(this,t)},t.prototype.greaterEqual=function(t){return this.throwIfDisposed(),dt.greaterEqual(this,t)},t.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),dt.greaterEqualStrict(this,t)},t.prototype.logicalAnd=function(t){return this.throwIfDisposed(),dt.logicalAnd(this,t)},t.prototype.logicalOr=function(t){return this.throwIfDisposed(),dt.logicalOr(this,t)},t.prototype.logicalNot=function(){return this.throwIfDisposed(),dt.logicalNot(this)},t.prototype.logicalXor=function(t){return this.throwIfDisposed(),dt.logicalXor(this,t)},t.prototype.where=function(t,e){return this.throwIfDisposed(),dt.where(t,this,e)},t.prototype.neg=function(){return this.throwIfDisposed(),dt.neg(this)},t.prototype.ceil=function(){return this.throwIfDisposed(),dt.ceil(this)},t.prototype.floor=function(){return this.throwIfDisposed(),dt.floor(this)},t.prototype.sign=function(){return this.throwIfDisposed(),dt.sign(this)},t.prototype.isNaN=function(){return this.throwIfDisposed(),dt.isNaN(this)},t.prototype.isInf=function(){return this.throwIfDisposed(),dt.isInf(this)},t.prototype.isFinite=function(){return this.throwIfDisposed(),dt.isFinite(this)},t.prototype.exp=function(){return this.throwIfDisposed(),dt.exp(this)},t.prototype.expm1=function(){return this.throwIfDisposed(),dt.expm1(this)},t.prototype.log=function(){return this.throwIfDisposed(),dt.log(this)},t.prototype.log1p=function(){return this.throwIfDisposed(),dt.log1p(this)},t.prototype.sqrt=function(){return this.throwIfDisposed(),dt.sqrt(this)},t.prototype.rsqrt=function(){return this.throwIfDisposed(),dt.rsqrt(this)},t.prototype.square=function(){return this.throwIfDisposed(),dt.square(this)},t.prototype.reciprocal=function(){return this.throwIfDisposed(),dt.reciprocal(this)},t.prototype.abs=function(){return this.throwIfDisposed(),dt.abs(this)},t.prototype.clipByValue=function(t,e){return this.throwIfDisposed(),dt.clipByValue(this,t,e)},t.prototype.relu=function(){return this.throwIfDisposed(),dt.relu(this)},t.prototype.elu=function(){return this.throwIfDisposed(),dt.elu(this)},t.prototype.selu=function(){return this.throwIfDisposed(),dt.selu(this)},t.prototype.leakyRelu=function(t){return void 0===t&&(t=.2),this.throwIfDisposed(),dt.leakyRelu(this,t)},t.prototype.prelu=function(t){return this.throwIfDisposed(),dt.prelu(this,t)},t.prototype.sigmoid=function(){return this.throwIfDisposed(),dt.sigmoid(this)},t.prototype.logSigmoid=function(){return this.throwIfDisposed(),dt.logSigmoid(this)},t.prototype.softplus=function(){return this.throwIfDisposed(),dt.softplus(this)},t.prototype.zerosLike=function(){return this.throwIfDisposed(),dt.zerosLike(this)},t.prototype.onesLike=function(){return this.throwIfDisposed(),dt.onesLike(this)},t.prototype.sin=function(){return this.throwIfDisposed(),dt.sin(this)},t.prototype.cos=function(){return this.throwIfDisposed(),dt.cos(this)},t.prototype.tan=function(){return this.throwIfDisposed(),dt.tan(this)},t.prototype.asin=function(){return this.throwIfDisposed(),dt.asin(this)},t.prototype.acos=function(){return this.throwIfDisposed(),dt.acos(this)},t.prototype.atan=function(){return this.throwIfDisposed(),dt.atan(this)},t.prototype.sinh=function(){return this.throwIfDisposed(),dt.sinh(this)},t.prototype.cosh=function(){return this.throwIfDisposed(),dt.cosh(this)},t.prototype.tanh=function(){return this.throwIfDisposed(),dt.tanh(this)},t.prototype.asinh=function(){return this.throwIfDisposed(),dt.asinh(this)},t.prototype.acosh=function(){return this.throwIfDisposed(),dt.acosh(this)},t.prototype.atanh=function(){return this.throwIfDisposed(),dt.atanh(this)},t.prototype.erf=function(){return this.throwIfDisposed(),dt.erf(this)},t.prototype.round=function(){return this.throwIfDisposed(),dt.round(this)},t.prototype.step=function(t){return void 0===t&&(t=0),this.throwIfDisposed(),dt.step(this,t)},t.prototype.softmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),dt.softmax(this,t)},t.prototype.logSoftmax=function(t){return void 0===t&&(t=-1),this.throwIfDisposed(),dt.logSoftmax(this,t)},t.prototype.resizeBilinear=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),dt.image.resizeBilinear(this,t,e)},t.prototype.resizeNearestNeighbor=function(t,e){return void 0===e&&(e=!1),this.throwIfDisposed(),dt.image.resizeNearestNeighbor(this,t,e)},t.prototype.conv1d=function(t,e,n,r,o,i){return void 0===r&&(r="NWC"),void 0===o&&(o=1),this.throwIfDisposed(),dt.conv1d(this,t,e,n,r,o,i)},t.prototype.conv2d=function(t,e,n,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),dt.conv2d(this,t,e,n,r,o,i)},t.prototype.conv2dTranspose=function(t,e,n,r,o){return this.throwIfDisposed(),dt.conv2dTranspose(this,t,e,n,r,o)},t.prototype.depthwiseConv2D=function(t,e,n,r,o,i){return void 0===r&&(r="NHWC"),void 0===o&&(o=[1,1]),this.throwIfDisposed(),dt.depthwiseConv2d(this,t,e,n,r,o,i)},t.prototype.separableConv2d=function(t,e,n,r,o,i){return void 0===o&&(o=[1,1]),void 0===i&&(i="NHWC"),this.throwIfDisposed(),dt.separableConv2d(this,t,e,n,r,o,i)},t.prototype.avgPool=function(t,e,n,r){return this.throwIfDisposed(),dt.avgPool(this,t,e,n,r)},t.prototype.maxPool=function(t,e,n,r){return this.throwIfDisposed(),dt.maxPool(this,t,e,n,r)},t.prototype.localResponseNormalization=function(t,e,n,r){return void 0===t&&(t=5),void 0===e&&(e=1),void 0===n&&(n=1),void 0===r&&(r=.5),dt.localResponseNormalization(this,t,e,n,r)},t.prototype.pool=function(t,e,n,r,o){return this.throwIfDisposed(),dt.pool(this,t,e,n,r,o)},t.prototype.variable=function(t,e,n){return void 0===t&&(t=!0),this.throwIfDisposed(),mt.variable(this,t,e,n)},t.prototype.unsortedSegmentSum=function(t,e){return this.throwIfDisposed(),dt.unsortedSegmentSum(this,t,e)},t.prototype.batchToSpaceND=function(t,e){return this.throwIfDisposed(),dt.batchToSpaceND(this,t,e)},t.prototype.spaceToBatchND=function(t,e){return this.throwIfDisposed(),dt.spaceToBatchND(this,t,e)},t.prototype.topk=function(t,e){return void 0===t&&(t=1),void 0===e&&(e=!0),this.throwIfDisposed(),dt.topk(this,t,e)},t.prototype.stridedSlice=function(t,e,n,r,o,i,a,s){return void 0===r&&(r=0),void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===s&&(s=0),this.throwIfDisposed(),dt.stridedSlice(this,t,e,n,r,o,i,a,s)},t.prototype.depthToSpace=function(t,e){return this.throwIfDisposed(),dt.depthToSpace(this,t,e)},t.prototype.fft=function(){return this.throwIfDisposed(),dt.spectral.fft(this)},t.prototype.ifft=function(){return this.throwIfDisposed(),dt.spectral.ifft(this)},t.prototype.rfft=function(){return this.throwIfDisposed(),dt.spectral.rfft(this)},t.prototype.irfft=function(){return this.throwIfDisposed(),dt.spectral.irfft(this)},t}();Object.defineProperty(vt,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.dataId&&null!=t.shape&&null!=t.dtype}});var mt=function(t){function e(e,n,r){void 0===n&&(n=!0);var o=t.call(this,e.shape,e.dtype,null,e.dataId)||this;o.trainable=n,o.name=r,null==o.name&&(o.name=ft().nextVariableId().toString());try{ft().registerVariable(o)}catch(t){throw ft().disposeTensor(o),t}return o}return s(e,t),e.variable=function(t,n,r,o){return void 0===n&&(n=!0),null!=o&&o!==t.dtype&&(t=t.asType(o)),new e(t,n,r)},e.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!R(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");ft().disposeTensor(this),this.dataId=t.dataId,ft().registerTensor(this)},e.prototype.dispose=function(){ft().disposeVariable(this),this.isDisposedInternal=!0},e}(vt);Object.defineProperty(mt,Symbol.hasInstance,{value:function(t){return t instanceof vt&&null!=t.assign&&t.assign instanceof Function}});var gt,yt,xt,bt,wt,Ct=mt.variable;!function(t){t.R0="R0",t.R1="R1",t.R2="R2",t.R3="R3",t.R4="R4",t.R5="R5",t.R6="R6"}(gt||(gt={})),function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(yt||(yt={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(xt||(xt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(bt||(bt={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(wt||(wt={}));var Et={float32:bt,int32:yt,bool:xt,complex64:wt};function Rt(t,e){if("string"===t||"string"===e){if("string"===t&&"string"===e)return"string";throw new Error("Can not upcast "+t+" with "+e)}return Et[t][e]}function It(t){return Rt(t,"int32")}function St(t,e){if(t.dtype===e.dtype)return[t,e];var n=Rt(t.dtype,e.dtype);return[t.cast(n),e.cast(n)]}function kt(t,e){x(t.dtype===e.dtype,(function(){return"The dtypes of the first("+t.dtype+") and second("+e.dtype+") input must match"}))}function At(t){var e=[];return function t(e,n,r){if(null!=e)if(e instanceof vt)n.push(e);else if(o=e,Array.isArray(o)||"object"==typeof o){var o,i=e;for(var a in i){var s=i[a];r.has(s)||(r.add(s),t(s,n,r))}}}(t,e,new Set),e}var Nt,Tt=Object.freeze({makeTypesMatch:St,assertTypesMatch:kt,isTensorInList:function(t,e){for(var n=0;n<e.length;n++)if(e[n].id===t.id)return!0;return!1},getTensorsInContainer:At}),Dt=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),_t=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new Dt}return t.prototype.ready=function(){return u(this,void 0,void 0,(function(){var t,e,n;return c(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),e=0,r.label=1;case 1:return e<t.length?(n=t[e],[4,this.initializeBackend(n).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(n)]:[3,4];case 3:return r.sent(),[2];case 4:return e++,[3,1];case 5:throw new Error("Could not initialize any backends, all backend initializations failed.")}}))}))},Object.defineProperty(t.prototype,"backend",{get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '"+this.backendName+"' has not yet been initialized. Make sure to await tf.ready() before calling other methods");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),e=t.name;if(t.asyncInit)throw new Error("The highest priority backend '"+e+"' has not yet been initialized. Make sure to await tf.ready() before calling other methods");this.setBackend(e)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,e,n){return void 0===n&&(n=1),t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:e,priority:n},!0)},t.prototype.setBackend=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(o){switch(o.label){case 0:if(null==this.registryFactory[t])throw new Error("Backend name '"+t+"' not found in registry");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,e=this.initializeBackend(t),n=e.success,e.asyncInit?[4,n]:[3,2]);case 1:return r=o.sent(),[3,3];case 2:r=n,o.label=3;case 3:if(!r)return[2,!1];o.label=4;case 4:return this.backendInstance=this.registry[t],this.profiler=new rt(this.backendInstance),[2,!0]}}))}))},t.prototype.initializeBackend=function(t){var e=this,n=this.registryFactory[t];if(null==n)throw new Error("Cannot initialize backend "+t+", no registration found.");try{var r=n.factory();if(Promise.resolve(r)===r){var o=++this.pendingBackendInitId,i=r.then((function(n){return!(o<e.pendingBackendInitId||(e.registry[t]=n,e.pendingBackendInit=null,0))})).catch((function(n){return!(o<e.pendingBackendInitId||(e.pendingBackendInit=null,console.warn("Initialization of backend "+t+" failed"),console.warn(n.stack||n.message),1))}));return this.pendingBackendInit=i,{success:i,asyncInit:!0}}return this.registry[t]=r,{success:!0,asyncInit:!1}}catch(e){return console.warn("Initialization of backend "+t+" failed"),console.warn(e.stack||e.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(e,n){return t.registryFactory[n].priority-t.registryFactory[e].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),e=0;e<t.length;e++){var n=t[e],r=this.initializeBackend(n),o=r.success,i=r.asyncInit;if(i||o)return{name:n,asyncInit:i}}throw new Error("Could not initialize any backends, all backend initializations failed.")},t.prototype.moveData=function(t,e){this.write(t,e,this.readSync(e))},t.prototype.tidy=function(t,e){var n,r=this,o=null;if(null==e){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");e=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof e)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(n)}),(function(){return(n=e())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n}))},t.prototype.scopedRun=function(t,e,n){t();try{var r=n();return e(),r}catch(t){throw e(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var e=vt.make(t.shape,{dataId:t.dataId},t.dtype);return this.addTapeNode([t],e,(function(t){return[t.toFloat()]})),e},t.prototype.runKernel=function(t,e,n){var r,o=this,i=[],a=this.isTapeOn(),s=null!=this.state.activeScope?this.state.activeScope.name:"",u=function(t){a&&(i=t.map((function(t){return o.keep(o.clone(t))})))},c=this.state.numBytes,l=this.state.numTensors;if(this.scopedRun((function(){return o.state.kernelDepth++}),(function(){return o.state.kernelDepth--}),(function(){r=o.ENV.getBool("DEBUG")?o.profiler.profileKernel(s,e,(function(){return t(o.backend,u)})):t(o.backend,u)})),a){var h={id:this.state.nextTapeNodeId++,name:s,inputs:e,outputs:Array.isArray(r)?r:[r],saved:i};null!=n&&(h.gradient=function(t){return n(t,i)}),this.state.activeTape.push(h)}return this.state.profiling&&this.state.activeProfile.kernels.push({name:s,bytesAdded:this.state.numBytes-c,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-l,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(e).map((function(t){return e[t].shape})),outputShape:Array.isArray(r)?r.map((function(t){return t.shape})):r.shape}),r},t.prototype.registerTensor=function(t,e){var n=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===n){this.state.numDataBuffers++;var r=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(r=t.size*W(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:null!=e?e:this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r,null!=e?e.register(t.dataId,t.shape,t.dtype):this.backend.register(t.dataId,t.shape,t.dtype)}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof mt||this.track(t)},t.prototype.registerVariable=function(t){if(null!=this.state.registeredVariables[t.name])throw new Error("Variable with name "+t.name+" was already registered");this.state.registeredVariables[t.name]=t},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;var e=this.state.tensorInfo.get(t.dataId);e.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=e.bytes),this.state.numDataBuffers--,e.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var e=this.state.registeredVariables[t];this.disposeVariable(e)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t},t.prototype.profile=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){return this.state.profiling=!0,e=this.state.numBytes,n=this.state.numTensors,this.state.activeProfile.kernels=[],this.state.activeProfile.result=t(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-e,this.state.activeProfile.newTensors=this.state.numTensors-n,[2,this.state.activeProfile]}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,e,n){var r={};t.forEach((function(t,e){r[e]=t}));var o={id:this.state.nextTapeNodeId++,name:this.state.activeScope.name,inputs:r,outputs:[e],gradient:function(t){var e=n(t),r={};return e.forEach((function(t,e){r[e]=function(){return t}})),r}};this.state.activeTape.push(o)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var e={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(e.name=t),this.state.scopeStack.push(e),this.state.activeScope=e},t.prototype.endScope=function(t){for(var e=this,n=At(t),r=new Set(n.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var i=this.state.activeScope.track[o];i.kept||r.has(i.id)||i.dispose()}var a=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],n.forEach((function(t){t.kept||t.scopeId!==a.id||e.track(t)}))},t.prototype.gradients=function(t,e,n,r){var o=this;if(void 0===r&&(r=!1),x(e.length>0,(function(){return"gradients() received an empty list of xs."})),null!=n&&"float32"!==n.dtype)throw new Error("dy must have 'float32' dtype, but has '"+n.dtype+"'");var i=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy("forward",t)}));x(i instanceof vt,(function(){return"The result y returned by f() must be a tensor."}));var a=function(t,e,n){for(var r={},o={},i=0;i<e.length;i++)r[e[i].id]=!0;for(i=0;i<t.length;i++){var a=(p=t[i]).inputs;for(var s in a){for(var u=a[s],c=!1,l=0;l<e.length;l++)if(r[u.id]){p.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,o[p.id]=!0;break}if(c)break}}var h={};h[n.id]=!0;var f={};for(i=t.length-1;i>=0;i--)for(a=(p=t[i]).inputs,l=0;l<p.outputs.length;l++)if(h[p.outputs[l].id]){for(var s in a)h[a[s].id]=!0,f[p.id]=!0;break}var d=[];for(i=0;i<t.length;i++){var p;if(o[(p=t[i]).id]&&f[p.id]){var v={};for(var s in p.inputs){var m=p.inputs[s];r[m.id]&&(v[s]=m)}var g=Object.assign({},p);g.inputs=v,g.outputs=p.outputs,d.push(g)}}return d}(this.state.activeTape,e,i);if(!r&&0===a.length&&e.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var t,r,s={};s[i.id]=null==n?(r=Y(E(t=i.shape),"float32"),vt.make(t,{values:r})):n,function(t,e,n){for(var r=function(r){var o=e[r],i=[];if(o.outputs.forEach((function(e){var n=t[e.id];if(null!=n)i.push(n);else{var r=vt.make(e.shape,{values:Q(e.size,e.dtype)},e.dtype);i.push(r)}})),null==o.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+o.name+".");var a=o.gradient(1===o.outputs.length?i[0]:i),s=function(e){if(!(e in a))throw new Error("Cannot backprop through input "+e+". Available gradients found: "+Object.keys(a)+".");var r=n((function(){return a[e]()}));if("float32"!==r.dtype)throw new Error("Error in gradient for op "+o.name+". The gradient of input "+e+" must have 'float32' dtype, but has '"+r.dtype+"'");var i=o.inputs[e];if(!R(r.shape,i.shape))throw new Error("Error in gradient for op "+o.name+". The gradient of input '"+e+"' has shape '"+r.shape+"', which does not match the shape of the input '"+i.shape+"'");if(null==t[i.id])t[i.id]=r;else{var s=t[i.id];t[i.id]=s.add(r),s.dispose()}};for(var u in o.inputs)s(u)},o=e.length-1;o>=0;o--)r(o)}(s,a,(function(t){return o.tidy(t)}));var u=e.map((function(t){return s[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var e in t.saved)t.saved[e].dispose()})),o.state.activeTape=null),{value:i,grads:u}}))},t.prototype.customGrad=function(t){var e=this;return x(q(t),(function(){return"The f passed in customGrad(f) must be a function."})),function(){for(var n,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];x(r.every((function(t){return t instanceof vt})),(function(){return"The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var i={};return r.forEach((function(t,e){i[e]=t})),e.runKernel((function(e,o){return x((n=t.apply(void 0,r.concat([o]))).value instanceof vt,(function(){return"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),x(q(n.gradFunc),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),n.value}),i,(function(t,e){var o=n.gradFunc(t,e),i=Array.isArray(o)?o:[o];x(i.length===r.length,(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),x(i.every((function(t){return t instanceof vt})),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var a={};return i.forEach((function(t,e){a[e]=function(){return t}})),a}))}},t.prototype.write=function(t,e,n){var r=this.state.tensorInfo.get(e),o=r.backend;if(t=t||this.backend,"string"===r.dtype){var i=U(n);this.state.numBytes+=i-r.bytes,r.bytes=i}t!==o&&(o.disposeData(e),r.backend=t,t.register(e,r.shape,r.dtype)),t.write(e,n)},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.fromPixels=function(t,e){return this.backend.fromPixels(t,e)},t.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){switch(r.label){case 0:return e=J(),[4,this.backend.time(t)];case 1:return(n=r.sent()).wallMs=J()-e,[2,n]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,"registeredVariables",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new Dt,this.registry)this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}(),Ot=function(){var e=function(){if(null==Nt){var e=void 0;if("undefined"!=typeof window)e=window;else if(void 0!==t)e=t;else if(void 0!==r)e=r;else{if("undefined"==typeof self)throw new Error("Could not find a global object");e=self}Nt=e}return Nt}();if(null==e._tfengine){var n=new l(e);e._tfengine=new _t(n)}return d(e._tfengine.ENV),ft=function(){return e._tfengine},e._tfengine}();function Mt(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}f.registerFlag("DEBUG",(function(){return!1}),(function(t){t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),f.registerFlag("IS_BROWSER",(function(){return Mt()})),f.registerFlag("IS_NODE",(function(){return void 0!==r&&void 0!==r.versions&&void 0!==r.versions.node})),f.registerFlag("IS_CHROME",(function(){return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),f.registerFlag("PROD",(function(){return!1})),f.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return f.getBool("DEBUG")})),f.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return!0})),f.registerFlag("IS_TEST",(function(){return!1}));var Ft,Bt,Pt={},Lt={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function Wt(t,e){Pt[t]=e}function Ut(t){t in Pt||(Pt[t]=function(t){if(1!==t&&2!==t)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");var e=Vt(t);return e.addEventListener("webglcontextlost",(function(e){e.preventDefault(),delete Pt[t]}),!1),1===t?e.getContext("webgl",Lt)||e.getContext("experimental-webgl",Lt):e.getContext("webgl2",Lt)}(t));var e=Pt[t];return e.isContextLost()?(delete Pt[t],Ut(t)):(e.disable(e.DEPTH_TEST),e.disable(e.STENCIL_TEST),e.disable(e.BLEND),e.disable(e.DITHER),e.disable(e.POLYGON_OFFSET_FILL),e.disable(e.SAMPLE_COVERAGE),e.enable(e.SCISSOR_TEST),e.enable(e.CULL_FACE),e.cullFace(e.BACK),Pt[t])}function Vt(t){if("undefined"!=typeof OffscreenCanvas&&2===t)return new OffscreenCanvas(300,150);if("undefined"!=typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}function zt(t,e){return[e,t]}function Gt(t){var e=E(t);return k(Math.ceil(e/4))}function Ht(t,e){return[Math.max(1,Math.ceil(e/2)),Math.max(1,Math.ceil(t/2))]}function qt(t,e){var n,r,o,i,a,s,u,c,l,h=t;return 2===f.getNumber("WEBGL_VERSION")?(n=h.R32F,r=h.R16F,o=h.RGBA16F,i=h.RGBA32F,a=h.RED,s=4,u=1,c=h.HALF_FLOAT,l=h.FLOAT):(n=t.RGBA,r=t.RGBA,o=t.RGBA,i=h.RGBA,a=t.RGBA,s=4,u=4,c=null!=e?e.HALF_FLOAT_OES:null,l=t.FLOAT),{internalFormatFloat:n,internalFormatHalfFloat:r,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:a,downloadTextureFormat:t.RGBA,downloadUnpackNumChannels:s,defaultNumChannels:u,textureTypeHalfFloat:c,textureTypeFloat:l}}function $t(t,e,n){var r=n();return e&&function(t){var e=t.getError();if(e!==t.NO_ERROR)throw new Error("WebGL Error: "+Yt(t,e))}(t),r}!function(t){t[t.RENDER=0]="RENDER",t[t.UPLOAD=1]="UPLOAD",t[t.PIXELS=2]="PIXELS",t[t.DOWNLOAD=3]="DOWNLOAD"}(Ft||(Ft={})),function(t){t[t.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",t[t.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",t[t.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",t[t.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",t[t.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(Bt||(Bt={}));var jt=5.96e-8,Kt=65504;function Xt(t){return!!(f.getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===t||jt<Math.abs(t)&&Math.abs(t)<Kt)}function Yt(t,e){switch(e){case t.NO_ERROR:return"NO_ERROR";case t.INVALID_ENUM:return"INVALID_ENUM";case t.INVALID_VALUE:return"INVALID_VALUE";case t.INVALID_OPERATION:return"INVALID_OPERATION";case t.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case t.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case t.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return"Unknown error code "+e}}function Qt(t,e,n){return be(t,e,(function(){return t.getExtension(n)}),'Extension "'+n+'" not supported on this browser.')}function Jt(t,e,n){var r=be(t,e,(function(){return t.createShader(t.VERTEX_SHADER)}),"Unable to create vertex WebGLShader.");if($t(t,e,(function(){return t.shaderSource(r,n)})),$t(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw console.log(t.getShaderInfoLog(r)),new Error("Failed to compile vertex shader.");return r}function Zt(t,e,n){var r=be(t,e,(function(){return t.createShader(t.FRAGMENT_SHADER)}),"Unable to create fragment WebGLShader.");if($t(t,e,(function(){return t.shaderSource(r,n)})),$t(t,e,(function(){return t.compileShader(r)})),!1===t.getShaderParameter(r,t.COMPILE_STATUS))throw function(t,e){var n=ne.exec(e);if(null==n)return console.log("Couldn't parse line number in error: "+e),void console.log(t);for(var r=+n[1],o=t.split("\n"),i=o.length.toString().length+2,a=o.map((function(t,e){return A((e+1).toString(),i)+t})),s=0,u=0;u<a.length;u++)s=Math.max(a[u].length,s);var c=a.slice(0,r-1),l=a.slice(r-1,r),h=a.slice(r);console.log(c.join("\n")),console.log(e.split("\n")[0]),console.log("%c "+A(l[0],s),"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(h.join("\n"))}(n,t.getShaderInfoLog(r)),new Error("Failed to compile fragment shader.");return r}var te,ee,ne=/ERROR: [0-9]+:([0-9]+):/g;function re(t,e){return be(t,e,(function(){return t.createProgram()}),"Unable to create WebGLProgram.")}function oe(t,e,n){if($t(t,e,(function(){return t.linkProgram(n)})),!1===t.getProgramParameter(n,t.LINK_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Failed to link vertex and fragment shaders.")}function ie(t,e,n){if($t(t,e,(function(){return t.validateProgram(n)})),!1===t.getProgramParameter(n,t.VALIDATE_STATUS))throw console.log(t.getProgramInfoLog(n)),new Error("Shader program validation failed.")}function ae(t,e,n){var r=be(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return $t(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),$t(t,e,(function(){return t.bufferData(t.ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function se(t,e,n){var r=be(t,e,(function(){return t.createBuffer()}),"Unable to create WebGLBuffer");return $t(t,e,(function(){return t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r)})),$t(t,e,(function(){return t.bufferData(t.ELEMENT_ARRAY_BUFFER,n,t.STATIC_DRAW)})),r}function ue(t,e){return be(t,e,(function(){return t.createTexture()}),"Unable to create WebGLTexture.")}function ce(t,e){var n=f.getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t<=0||e<=0){var r="["+t+"x"+e+"]";throw new Error("Requested texture size "+r+" is invalid.")}if(t>n||e>n)throw r="["+t+"x"+e+"]",new Error("Requested texture size "+r+" greater than WebGL maximum on this browser / GPU ["+n+"x"+n+"].")}function le(t,e){return be(t,e,(function(){return t.createFramebuffer()}),"Unable to create WebGLFramebuffer.")}function he(t,e,n,r,o,i,a,s){var u=t.getAttribLocation(n,r);return-1!==u&&($t(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,o)})),$t(t,e,(function(){return t.vertexAttribPointer(u,i,t.FLOAT,!1,a,s)})),$t(t,e,(function(){return t.enableVertexAttribArray(u)})),!0)}function fe(t,e,n,r){we(t,r),$t(t,e,(function(){return t.activeTexture(t.TEXTURE0+r)})),$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)}))}function de(t,e,n,r){return be(t,e,(function(){return t.getUniformLocation(n,r)}),'uniform "'+r+'" not present in program.')}function pe(t,e,n){return t.getUniformLocation(e,n)}function ve(t,e,n,r,o,i){$t(t,e,(function(){return fe(t,e,r,i)})),$t(t,e,(function(){return t.uniform1i(o,i)}))}function me(t,e,n,r){$t(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,r)})),$t(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0)}))}function ge(t,e,n){$t(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,n)})),$t(t,e,(function(){return t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,null,0)}))}function ye(t){var e=t.checkFramebufferStatus(t.FRAMEBUFFER);if(e!==t.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+xe(t,e))}function xe(t,e){switch(e){case t.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case t.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case t.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return"unknown error "+e}}function be(t,e,n,r){var o=$t(t,e,(function(){return n()}));if(null==o)throw new Error(r);return o}function we(t,e){var n=t.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=e+t.TEXTURE0;if(r<t.TEXTURE0||r>n)throw new Error("textureUnit must be in [gl.TEXTURE0, gl.TEXTURE"+n+"].")}function Ce(t,e){return void 0===e&&(e=2),E(t.slice(0,t.length-e))}function Ee(t){if(0===t.length)throw Error("Cannot get rows and columns of an empty shape array.");return[t.length>1?t[t.length-2]:1,t[t.length-1]]}function Re(t){var e=[1,1,1];return 0===t.length||1===t.length&&1===t[0]||(e=[Ce(t)].concat(Ee(t))),e}function Ie(t,e){var n;void 0===e&&(e=!1);var r=f.getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e&&(r*=2,1===(t=t.map((function(e,n){return n>=t.length-2?g(t[n]):t[n]}))).length&&(t=[2,t[0]])),2!==t.length){var o=_(t);t=o.newShape}var i=E(t);if(t.length<=1&&i<=r)return[1,i];if(2===t.length&&t[0]<=r&&t[1]<=r)return t;if(3===t.length&&t[0]*t[1]<=r&&t[2]<=r)return[t[0]*t[1],t[2]];if(3===t.length&&t[0]<=r&&t[1]*t[2]<=r)return[t[0],t[1]*t[2]];if(4===t.length&&t[0]*t[1]*t[2]<=r&&t[3]<=r)return[t[0]*t[1]*t[2],t[3]];if(4===t.length&&t[0]<=r&&t[1]*t[2]*t[3]<=r)return[t[0],t[1]*t[2]*t[3]];if(e){var a=Ce(t),s=2,u=2;return t.length&&(s=(n=Ee(t))[0],u=n[1]),k(i=a*(s/2)*(u/2)).map((function(t){return 2*t}))}return k(i)}function Se(t){return t%2==0}function ke(t,e){if(R(t=t.slice(-2),e=e.slice(-2)))return!0;if(!t.length||!e.length)return!0;if(0===t[0]||0===t[1]||0===e[0]||0===e[1])return!0;if(t.length!==e.length){var n=t.slice(-1)[0],r=e.slice(-1)[0];if(n===r)return!0;if(Se(n)&&Se(r)&&(1===t[0]||1===e[0]))return!0}return t[1]===e[1]&&Se(t[0])&&Se(e[0])}function Ae(t){if(null==te){var e=Ut(t);te=e.getParameter(e.MAX_TEXTURE_SIZE)}return te}function Ne(t){if(null==ee){var e=Ut(t);ee=e.getParameter(e.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,ee)}function Te(t){if(0===t)return 0;var e=Ut(t);return De(e,"EXT_disjoint_timer_query_webgl2")&&2===t?2:De(e,"EXT_disjoint_timer_query")?1:0}function De(t,e){return null!=t.getExtension(e)}function _e(t){try{if(null!=Ut(t))return!0}catch(t){return!1}return!1}function Oe(t){if(0===t)return!1;var e=Ut(t);if(1===t){if(!De(e,"OES_texture_float"))return!1}else if(!De(e,"EXT_color_buffer_float"))return!1;return Fe(e)}function Me(t){if(0===t)return!1;var e=Ut(t);if(1!==t){if(De(e,"EXT_color_buffer_float"))return Fe(e);if(De(e,"EXT_color_buffer_half_float")){var n=e.getExtension("EXT_color_buffer_half_float");return function(t,e){var n=qt(t,e),r=t.createTexture();t.bindTexture(t.TEXTURE_2D,r),t.texImage2D(t.TEXTURE_2D,0,n.internalFormatHalfFloat,1,1,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);var o=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,o),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,r,0);var i=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(r),t.deleteFramebuffer(o),i}(e,n)}return!1}return!!De(e,"OES_texture_float")&&!!De(e,"WEBGL_color_buffer_float")&&Fe(e)}function Fe(t){var e=qt(t),n=t.createTexture();t.bindTexture(t.TEXTURE_2D,n),t.texImage2D(t.TEXTURE_2D,0,e.internalFormatFloat,1,1,0,e.textureFormatFloat,e.textureTypeFloat,null);var r=t.createFramebuffer();t.bindFramebuffer(t.FRAMEBUFFER,r),t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,n,0);var o=t.checkFramebufferStatus(t.FRAMEBUFFER)===t.FRAMEBUFFER_COMPLETE;return t.bindTexture(t.TEXTURE_2D,null),t.bindFramebuffer(t.FRAMEBUFFER,null),t.deleteTexture(n),t.deleteFramebuffer(r),o}function Be(t){return 2===t&&null!=Ut(t).fenceSync}var Pe=Object.freeze({callAndCheck:$t,canBeRepresented:Xt,getWebGLErrorMessage:Yt,getExtensionOrThrow:Qt,createVertexShader:Jt,createFragmentShader:Zt,createProgram:re,linkProgram:oe,validateProgram:ie,createStaticVertexBuffer:ae,createStaticIndexBuffer:se,getNumChannels:function(){return 2===f.getNumber("WEBGL_VERSION")?1:4},createTexture:ue,validateTextureSize:ce,createFramebuffer:le,bindVertexBufferToProgramAttribute:he,bindTextureUnit:fe,unbindTextureUnit:function(t,e,n){we(t,n),$t(t,e,(function(){return t.activeTexture(t.TEXTURE0+n)})),$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))},getProgramUniformLocationOrThrow:de,getProgramUniformLocation:pe,bindTextureToProgramUniformSampler:ve,bindCanvasToFramebuffer:function(t,e){$t(t,e,(function(){return t.bindFramebuffer(t.FRAMEBUFFER,null)})),$t(t,e,(function(){return t.viewport(0,0,t.canvas.width,t.canvas.height)})),$t(t,e,(function(){return t.scissor(0,0,t.canvas.width,t.canvas.height)}))},bindColorTextureToFramebuffer:me,unbindColorTextureFromFramebuffer:ge,validateFramebuffer:ye,getFramebufferErrorMessage:xe,getBatchDim:Ce,getRowsCols:Ee,getShapeAs3D:Re,getTextureShapeFromLogicalShape:Ie,isReshapeFree:ke,getWebGLMaxTextureSize:Ae,resetMaxTextureSize:function(){te=null},resetMaxTexturesInShader:function(){ee=null},getMaxTexturesInShader:Ne,getWebGLDisjointQueryTimerVersion:Te,hasExtension:De,isWebGLVersionEnabled:_e,isCapableOfRenderingToFloatTexture:Oe,isDownloadFloatTextureEnabled:Me,isWebGLFenceEnabled:Be});function Le(){f.set("PROD",!0)}function We(){f.set("DEBUG",!0)}function Ue(){f.set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function Ve(t){f.getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function ze(){Ot.disposeVariables()}function Ge(){return Ot.memory()}function He(t){return Ot.profile(t)}function qe(t,e){return Ot.tidy(t,e)}function $e(t){At(t).forEach((function(t){return t.dispose()}))}function je(t){return Ot.keep(t)}function Ke(t){return Ot.time(t)}function Xe(t){return Ot.setBackend(t)}function Ye(){return Ot.ready()}function Qe(){return Ot.backendName}function Je(t){Ot.removeBackend(t)}function Ze(t){return Ot.findBackend(t)}function tn(t){return Ot.findBackendFactory(t)}function en(t,e,n){return void 0===n&&(n=1),Ot.registerBackend(t,e,n)}function nn(){return Ot.backend}function rn(t,e){f.setPlatform(t,e)}function on(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];f.getBool("IS_TEST")||console.warn.apply(console,t)}function an(t,e){var n=t;if(L(t))return"string"===e?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(n)||L(n)&&"string"!==e;)r.push(n.length),n=n[0];return Array.isArray(t)&&f.getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(e,n,r){if(r=r||[],Array.isArray(e)||L(e)){x(n.length>0,(function(){return"Element arr["+r.join("][")+"] should be a primitive, but is an array of "+e.length+" elements"})),x(e.length===n[0],(function(){return"Element arr["+r.join("][")+"] should have "+n[0]+" elements, but has "+e.length+" elements"}));for(var o=n.slice(1),i=0;i<e.length;++i)t(e[i],o,r.concat(i))}else x(0===n.length,(function(){return"Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+n[0]+" elements"}))}(t,r,[]),r}function sn(t,e,n,r){if(null!=t&&("numeric"!==t&&t!==e||"numeric"===t&&"string"===e))throw new Error("Argument '"+n+"' passed to '"+r+"' must be "+t+" tensor, but got "+e+" tensor")}function un(t,e,n,r){if(void 0===r&&(r="numeric"),t instanceof vt)return sn(r,t.dtype,e,n),t;var o=H(t);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),sn(r,o,e,n),null==t||!L(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){var i=null==t?"null":t.constructor.name;throw new Error("Argument '"+e+"' passed to '"+n+"' must be a Tensor or TensorLike, but got '"+i+"'")}var a=an(t,o);L(t)||Array.isArray(t)||(t=[t]);var s="string"!==o?K(t,o,f.getBool("DEBUG")):C(t,[],!0);return vt.make(a,{values:s},o)}function cn(t,e,n,r){if(void 0===r&&(r="numeric"),!Array.isArray(t))throw new Error("Argument "+e+" passed to "+n+" must be a `Tensor[]` or `TensorLike[]`");return t.map((function(t,r){return un(t,e+"["+r+"]",n)}),r)}function ln(t,e){for(var n=0;n<t.length;++n)if(t[t.length-n-1]!==e-1-n)return!1;return!0}function hn(t,e,n){for(var r=t.length+e.length,o=[],i=0,a=0,s=0;s<r;s++)-1===n.indexOf(s)?o.push(t[i++]):o.push(e[a++]);return o}function fn(t,e){for(var n=[],r=t.length,o=0;o<r;o++)-1===e.indexOf(o)&&n.push(t[o]);return[n,e.map((function(e){return t[e]}))]}function dn(t,e){return hn(t,e.map((function(t){return 1})),e)}function pn(t,e,n){x(ln(e,n),(function(){return t+" supports only inner-most axes for now. Got axes "+e+" and rank-"+n+" input."}))}function vn(t,e){if(ln(t,e))return null;for(var n=[],r=0;r<e;++r)-1===t.indexOf(r)&&n.push(r);return t.forEach((function(t){return n.push(t)})),n}function mn(t){return t.map((function(t,e){return[e,t]})).sort((function(t,e){return t[1]-e[1]})).map((function(t){return t[0]}))}function gn(t,e){for(var n=[],r=e-t;r<e;++r)n.push(r);return n}function yn(t,e){var n=t[0].length;t.forEach((function(t,e){x(t.length===n,(function(){return"Error in concat"+n+"D: rank of tensors["+e+"] must be the same as the rank of the rest ("+n+")"}))})),x(e>=0&&e<n,(function(){return"Error in concat"+n+"D: axis must be between 0 and "+(n-1)+"."}));var r=t[0];t.forEach((function(t,o){for(var i=0;i<n;i++)x(i===e||t[i]===r[i],(function(){return"Error in concat"+n+"D: Shape of tensors["+o+"] ("+t+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+o+"."}))}))}function xn(t,e){for(var n=t[0].slice(),r=1;r<t.length;r++)n[e]+=t[r][e];return n}function bn(t){var e=Object.keys(t);if(1!==e.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+e.length+" keys.");var n=e[0],r=t[n];n.endsWith("_")&&(n=n.substring(0,n.length-1));var o=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];Ot.startScope(n);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Ot.endScope(o),o}catch(t){throw Ot.endScope(null),t}};return Object.defineProperty(o,"name",{value:n,configurable:!0}),o}f.registerFlag("HAS_WEBGL",(function(){return f.getNumber("WEBGL_VERSION")>0})),f.registerFlag("WEBGL_VERSION",(function(){return _e(2)?2:_e(1)?1:0})),f.registerFlag("WEBGL_BUFFER_SUPPORTED",(function(){return 2===f.get("WEBGL_VERSION")})),f.registerFlag("WEBGL_CPU_FORWARD",(function(){return!0})),f.registerFlag("WEBGL_FORCE_F16_TEXTURES",(function(){return!1})),f.registerFlag("WEBGL_PACK",(function(){return f.getBool("HAS_WEBGL")})),f.registerFlag("WEBGL_PACK_NORMALIZATION",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_CLIP",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_DEPTHWISECONV",(function(){return!1})),f.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_PACK_REDUCE",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_LAZILY_UNPACK",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_CONV_IM2COL",(function(){return f.getBool("WEBGL_PACK")})),f.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(function(){return Ae(f.getNumber("WEBGL_VERSION"))})),f.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(function(){return Ne(f.getNumber("WEBGL_VERSION"))})),f.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(function(){var t=f.getNumber("WEBGL_VERSION");return 0===t?0:Te(t)})),f.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(function(){return f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&(t=navigator.userAgent||navigator.vendor||window.opera,!(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))));var t})),f.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(function(){return Oe(f.getNumber("WEBGL_VERSION"))})),f.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(function(){return!f.getBool("WEBGL_FORCE_F16_TEXTURES")&&f.getBool("WEBGL_RENDER_FLOAT32_CAPABLE")})),f.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(function(){return Me(f.getNumber("WEBGL_VERSION"))})),f.registerFlag("WEBGL_FENCE_API_ENABLED",(function(){return Be(f.getNumber("WEBGL_VERSION"))})),f.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(function(){return f.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0})),pt=Ve;var wn=bn({complex_:function(t,e){var n=un(t,"real","complex"),r=un(e,"imag","complex");return b(n.shape,r.shape,"real and imag shapes, "+n.shape+" and "+r.shape+", must match in call to tf.complex()."),Ot.runKernel((function(t){return t.complex(n,r)}),{$real:n,$imag:r})}}),Cn=bn({real_:function(t){var e=un(t,"input","real");return Ot.runKernel((function(t){return t.real(e)}),{$input:e})}}),En=bn({imag_:function(t){var e=un(t,"input","imag");return Ot.runKernel((function(t){return t.imag(e)}),{$input:e})}});function Rn(t,e,n){return In(t,e,an(t,n),n)}function In(t,e,n,r){if(null==r&&(r=H(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!L(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){Z(e);var o=E(e),i=E(n);x(o===i,(function(){return"Based on the provided shape, ["+e+"], the tensor should have "+o+" values but has "+i}));for(var a=0;a<n.length;++a){var s=n[a],u=a!==n.length-1||s!==E(e.slice(a));x(n[a]===e[a]||!u,(function(){return"Error creating a new Tensor. Inferred shape ("+n+") does not match the provided shape ("+e+"). "}))}}return L(t)||Array.isArray(t)||(t=[t]),e=e||n,t="string"!==r?K(t,r,f.getBool("DEBUG")):C(t,[],!0),vt.make(e,{values:t},r)}function Sn(t,e){if((L(t)&&"string"!==e||Array.isArray(t))&&"complex64"!==e)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===e&&L(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return In(t,[],[],e)}function kn(t,e){w(t);var n=an(t,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return In(t,null,n,e)}function An(t,e,n){if(w(t),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");var r=an(t,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return In(t,e,r,n)}function Nn(t,e,n){if(w(t),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");var r=an(t,n);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return In(t,e,r,n)}function Tn(t,e,n){if(w(t),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");var r=an(t,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return In(t,e,r,n)}function Dn(t,e,n){if(w(t),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");var r=an(t,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return In(t,e,r,n)}function _n(t,e,n){if(w(t),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");var r=an(t,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return In(t,e=e||r,r,n)}function On(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=On(t,"float32"),r=Mn(t,"float32");return wn(n,r)}var o=Y(E(t),e);return vt.make(t,{values:o},e)}function Mn(t,e){if(void 0===e&&(e="float32"),"complex64"===e){var n=Mn(t,"float32"),r=Mn(t,"float32");return wn(n,r)}var o=Q(E(t),e);return vt.make(t,{values:o},e)}function Fn(t,e,n){return Ot.runKernel((function(r){return r.fill(t,e,n)}),{})}function Bn(t,e,n){if(n<=0)throw new Error("The number of values should be positive.");return Ot.runKernel((function(r){return r.linspace(t,e,n)}),{})}function Pn(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r="float32"),0===n)throw new Error("Cannot have a step of zero");if(t===e||t<e&&n<0||e<t&&n>1)return Mn([0],r);var o=Q(Math.abs(Math.ceil((e-t)/n)),r);e<t&&1===n&&(n=-1),o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+n;return kn(o,r)}var Ln=bn({onesLike_:function(t){var e=un(t,"x","onesLike");if("complex64"===e.dtype){var n=Ln(Cn(e)),r=Wn(En(e));return wn(n,r)}return Ot.runKernel((function(t){return t.onesLike(e)}),{$x:e},(function(t,e){return{$x:function(){return Wn(t)}}}))}}),Wn=bn({zerosLike_:function(t){var e=un(t,"x","zerosLike");return Ot.runKernel((function(t){return t.zerosLike(e)}),{$x:e},(function(t,e){return{$x:function(){return Wn(t)}}}))}}),Un=bn({concat_:function(t,e){void 0===e&&(e=0),x(t.length>=1,(function(){return"Pass at least one tensor to concat"}));var n=cn(t,"tensors","concat");"complex64"===n[0].dtype&&n.forEach((function(t){if("complex64"!==t.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype "+t.dtype+". ")})),e=D(e,n[0].shape)[0];var r=xn(n.map((function(t){return t.shape})),e);if(0===E(r))return Rn([],r);if(1===(n=n.filter((function(t){return t.size>0}))).length)return n[0];var o=n.map((function(t){return t.shape}));yn(o,e);var i=n;return Ot.runKernel((function(t){return t.concat(n,e)}),i,(function(t){var n=o.map((function(t){return t[e]}));return qn(t,n,e).map((function(t){return function(){return t}}))}))}}),Vn=bn({concat1d_:function(t){return Un(t,0)}}),zn=bn({concat2d_:function(t,e){return Un(t,e)}}),Gn=bn({concat3d_:function(t,e){return Un(t,e)}}),Hn=bn({concat4d_:function(t,e){return Un(t,e)}}),qn=bn({split_:function(t,e,n){void 0===n&&(n=0);var r,o=un(t,"x","split");return n=D(n,o.shape)[0],"number"==typeof e?(x(o.shape[n]%e==0,(function(){return"Number of splits must evenly divide the axis."})),r=new Array(e).fill(o.shape[n]/e)):(x(o.shape[n]===e.reduce((function(t,e){return t+e})),(function(){return"The sum of sizes must match the size of the axis dimension."})),r=e),Ot.runKernel((function(t){return t.split(o,r,n)}),{$x:o},(function(t){return{$x:function(){return Un(t,n)}}}))}});function $n(t,e){return t(e={exports:{}},e.exports),e.exports}"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==t||"undefined"!=typeof self&&self;var jn=$n((function(t){!function(t,e,n){function r(t){var e,n=this,r=(e=4022871197,function(t){t=t.toString();for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)});n.next=function(){var t=2091639*n.s0+2.3283064365386963e-10*n.c;return n.s0=n.s1,n.s1=n.s2,n.s2=t-(n.c=0|t)},n.c=1,n.s0=r(" "),n.s1=r(" "),n.s2=r(" "),n.s0-=r(t),n.s0<0&&(n.s0+=1),n.s1-=r(t),n.s1<0&&(n.s1+=1),n.s2-=r(t),n.s2<0&&(n.s2+=1),r=null}function o(t,e){return e.c=t.c,e.s0=t.s0,e.s1=t.s1,e.s2=t.s2,e}function i(t,e){var n=new r(t),i=e&&e.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.alea=i}(0,t)})),Kn=$n((function(t){!function(t,e,n){function r(t){var e=this,n="";e.x=0,e.y=0,e.z=0,e.w=0,e.next=function(){var t=e.x^e.x<<11;return e.x=e.y,e.y=e.z,e.z=e.w,e.w^=e.w>>>19^t^t>>>8},t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xor128=i}(0,t)})),Xn=$n((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.x^e.x>>>2;return e.x=e.y,e.y=e.z,e.z=e.w,e.w=e.v,(e.d=e.d+362437|0)+(e.v=e.v^e.v<<4^t^t<<1)|0},e.x=0,e.y=0,e.z=0,e.w=0,e.v=0,t===(0|t)?e.x=t:n+=t;for(var r=0;r<n.length+64;r++)e.x^=0|n.charCodeAt(r),r==n.length&&(e.d=e.x<<10^e.x>>>4),e.next()}function o(t,e){return e.x=t.x,e.y=t.y,e.z=t.z,e.w=t.w,e.v=t.v,e.d=t.d,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xorwow=i}(0,t)})),Yn=$n((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.x,o=e.i;return t=r[o],n=(t^=t>>>7)^t<<24,n^=(t=r[o+1&7])^t>>>10,n^=(t=r[o+3&7])^t>>>3,n^=(t=r[o+4&7])^t<<7,t=r[o+7&7],n^=(t^=t<<13)^t<<9,r[o]=n,e.i=o+1&7,n},function(t,e){var n,r=[];if(e===(0|e))r[0]=e;else for(e=""+e,n=0;n<e.length;++n)r[7&n]=r[7&n]<<15^e.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],t.x=r,t.i=0,n=256;n>0;--n)t.next()}(e,t)}function o(t,e){return e.x=t.x.slice(),e.i=t.i,e}function i(t,e){null==t&&(t=+new Date);var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.x&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xorshift7=i}(0,t)})),Qn=$n((function(t){!function(t,e,n){function r(t){var e=this;e.next=function(){var t,n,r=e.w,o=e.X,i=e.i;return e.w=r=r+1640531527|0,n=o[i+34&127],t=o[i=i+1&127],n^=n<<13,t^=t<<17,n^=n>>>15,t^=t>>>12,n=o[i]=n^t,e.i=i,n+(r^r>>>16)|0},function(t,e){var n,r,o,i,a,s=[],u=128;for(e===(0|e)?(r=e,e=null):(e+="\0",r=0,u=Math.max(u,e.length)),o=0,i=-32;i<u;++i)e&&(r^=e.charCodeAt((i+32)%e.length)),0===i&&(a=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,i>=0&&(a=a+1640531527|0,o=0==(n=s[127&i]^=r+a)?o+1:0);for(o>=128&&(s[127&(e&&e.length||0)]=-1),o=127,i=512;i>0;--i)r=s[o+34&127],n=s[o=o+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,s[o]=r^n;t.w=a,t.X=s,t.i=o}(e,t)}function o(t,e){return e.i=t.i,e.w=t.w,e.X=t.X.slice(),e}function i(t,e){null==t&&(t=+new Date);var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&(i.X&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.xor4096=i}(0,t)})),Jn=$n((function(t){!function(t,e,n){function r(t){var e=this,n="";e.next=function(){var t=e.b,n=e.c,r=e.d,o=e.a;return t=t<<25^t>>>7^n,n=n-r|0,r=r<<24^r>>>8^o,o=o-t|0,e.b=t=t<<20^t>>>12^n,e.c=n=n-r|0,e.d=r<<16^n>>>16^o,e.a=o-t|0},e.a=0,e.b=0,e.c=-1640531527,e.d=1367130551,t===Math.floor(t)?(e.a=t/4294967296|0,e.b=0|t):n+=t;for(var r=0;r<n.length+20;r++)e.b^=0|n.charCodeAt(r),e.next()}function o(t,e){return e.a=t.a,e.b=t.b,e.c=t.c,e.d=t.d,e}function i(t,e){var n=new r(t),i=e&&e.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var t=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},a.int32=n.next,a.quick=a,i&&("object"==typeof i&&o(i,n),a.state=function(){return o(n,{})}),a}e&&e.exports?e.exports=i:this.tychei=i}(0,t)})),Zn=$n((function(t){!function(e,r){var o,i=this,a=256,s=6,u="random",c=r.pow(a,s),l=r.pow(2,52),h=2*l,f=a-1;function d(t,n,f){var d=[],y=m(function t(e,n){var r,o=[],i=typeof e;if(n&&"object"==i)for(r in e)try{o.push(t(e[r],n-1))}catch(t){}return o.length?o:"string"==i?e:e+"\0"}((n=1==n?{entropy:!0}:n||{}).entropy?[t,g(e)]:null==t?function(){try{var t;return o&&(t=o.randomBytes)?t=t(a):(t=new Uint8Array(a),(i.crypto||i.msCrypto).getRandomValues(t)),g(t)}catch(t){var n=i.navigator,r=n&&n.plugins;return[+new Date,i,r,i.screen,g(e)]}}():t,3),d),x=new p(d),b=function(){for(var t=x.g(s),e=c,n=0;t<l;)t=(t+n)*a,e*=a,n=x.g(1);for(;t>=h;)t/=2,e/=2,n>>>=1;return(t+n)/e};return b.int32=function(){return 0|x.g(4)},b.quick=function(){return x.g(4)/4294967296},b.double=b,m(g(x.S),e),(n.pass||f||function(t,e,n,o){return o&&(o.S&&v(o,x),t.state=function(){return v(x,{})}),n?(r[u]=t,e):t})(b,y,"global"in n?n.global:this==r,n.state)}function p(t){var e,n=t.length,r=this,o=0,i=r.i=r.j=0,s=r.S=[];for(n||(t=[n++]);o<a;)s[o]=o++;for(o=0;o<a;o++)s[o]=s[i=f&i+t[o%n]+(e=s[o])],s[i]=e;(r.g=function(t){for(var e,n=0,o=r.i,i=r.j,s=r.S;t--;)e=s[o=f&o+1],n=n*a+s[f&(s[o]=s[i=f&i+e])+(s[i]=e)];return r.i=o,r.j=i,n})(a)}function v(t,e){return e.i=t.i,e.j=t.j,e.S=t.S.slice(),e}function m(t,e){for(var n,r=t+"",o=0;o<r.length;)e[f&o]=f&(n^=19*e[f&o])+r.charCodeAt(o++);return g(e)}function g(t){return String.fromCharCode.apply(0,t)}if(r["seed"+u]=d,m(r.random(),e),t.exports){t.exports=d;try{o=n(9)}catch(t){}}}([],Math)}));Zn.alea=jn,Zn.xor128=Kn,Zn.xorwow=Xn,Zn.xorshift7=Yn,Zn.xor4096=Qn,Zn.tychei=Jn;var tr=Zn.alea,er=function(){function t(t,e,n,r,o){this.mean=t,this.stdDev=e,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var i=o||Math.random();this.random=tr(i.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var e,n,r=!1;!r;){var o=void 0,i=void 0,a=void 0;do{a=(o=2*this.random()-1)*o+(i=2*this.random()-1)*i}while(a>=1||0===a);var s=Math.sqrt(-2*Math.log(a)/a);e=this.mean+this.stdDev*o*s,n=this.mean+this.stdDev*i*s,this.truncated&&!this.isValidTruncated(e)||(r=!0)}return this.truncated&&!this.isValidTruncated(n)||(this.nextVal=this.convertValue(n)),this.convertValue(e)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),nr=function(){function t(t,e,n,r){this.alpha=t,this.beta=1/e,this.dtype=n;var o=r||Math.random();this.randu=tr(o.toString()),this.randn=new er(0,1,n,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,e,n,r,o,i;;){do{r=this.randn.nextValue(),i=1+this.c*r}while(i<=0);if(i*=i*i,e=1-.331*(t=r*r)*t,n=.5*t+this.d*(1-i+Math.log(i)),(o=this.randu())<e||Math.log(o)<n)break}return i=1/this.beta*this.d*i,this.alpha<1&&(i*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(i)},t.prototype.convertValue=function(t){return"float32"===this.dtype?t:Math.round(t)},t}(),rr=function(){function t(t,e,n,r){var o=this;if(void 0===t&&(t=0),void 0===e&&(e=1),this.canReturnFloat=function(){return null==o.dtype||"float32"===o.dtype},this.min=t,this.range=e-t,this.dtype=n,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between "+t+" - "+e+" <= 1 and dtype is not float");this.random=tr(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();function or(t,e,n){return void 0===e&&(e="float32"),e=e||"float32",Z(t),new ht(t,e,n)}function ir(t,e){void 0===e&&(e=!1),console.log(t.toString(e))}var ar=bn({batchToSpaceND_:function(t,e,n){var r=un(t,"x","batchToSpaceND"),o=e.reduce((function(t,e){return t*e}));return x(r.rank>=1+e.length,(function(){return"input rank is "+r.rank+" but should be > than blockShape.length "+e.length})),x(n.length===e.length,(function(){return"crops.length is "+n.length+" but should be equal to blockShape.length  "+e.length})),x(r.shape[0]%o==0,(function(){return"input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+e.join(" * ")+" === "+o})),Ot.runKernel((function(t){return t.batchToSpaceND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.spaceToBatchND(e,n)}}}))}}),sr=bn({cast_:function(t,e){var n=un(t,"x","cast");if(!B(e))throw new Error("Failed to cast to unknown dtype "+e);if("string"===e&&"string"!==n.dtype||"string"!==e&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");return Ot.runKernel((function(t){return t.cast(n,e)}),{$x:n},(function(t){return{$x:function(){return t.clone()}}}))}}),ur=bn({clone_:function(t){var e=un(t,"x","clone",null);return Ot.runKernel((function(t){return vt.make(e.shape,{dataId:e.dataId},e.dtype)}),{$x:e},(function(t){return{$x:function(){return t.toFloat()}}}))}}),cr=bn({cumsum_:function(t,e,n,r){void 0===e&&(e=0),void 0===n&&(n=!1),void 0===r&&(r=!1);var o=un(t,"x","cumsum"),i=vn([e|=0],o.rank),a=o;null!=i&&(a=o.transpose(i));var s=gn(1,o.rank)[0],u=Ot.runKernel((function(t){return t.cumsum(a,s,n,r)}),{permutedX:a},(function(t){return{permutedX:function(){return t.cumsum(e,n,!r)}}}));return null!=i&&(u=u.transpose(i)),u}}),lr=bn({depthToSpace_:function(t,e,n){void 0===n&&(n="NHWC");var r=un(t,"x","depthToSpace"),o="NHWC"===n?r.shape[1]:r.shape[2],i="NHWC"===n?r.shape[2]:r.shape[3],a="NHWC"===n?r.shape[3]:r.shape[1];return x(o*e>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+o+" and "+e+"  for depthToSpace with input shape\n      "+r.shape})),x(i*e>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n      "+i+" and "+e+" for depthToSpace with input shape\n          "+r.shape})),x(a%(e*e)==0,(function(){return"Dimension size must be evenly divisible by "+e*e+" but is "+a+" for depthToSpace with input shape "+r.shape})),Ot.runKernel((function(t){return t.depthToSpace(r,e,n)}),{$x:r})}}),hr=bn({expandDims_:function(t,e){void 0===e&&(e=0);var n=un(t,"x","expandDims",null);x(e<=n.rank,(function(){return"Axis must be <= rank of the tensor"}));var r=n.shape.slice();return e<0&&(x(-(n.rank+1)<=e,(function(){return"Axis must be in the interval ["+-(n.rank+1)+", "+n.rank+"]"})),e=n.rank+e+1),r.splice(e,0,1),Rr(n,r)}}),fr=bn({eye_:function(t,e,n,r){void 0===r&&(r="float32"),null==e&&(e=t);for(var o=or([t,e],r),i=t<=e?t:e,a=0;a<i;++a)o.set(1,a,a);var s=o.toTensor().as2D(t,e);if(null==n)return s;if(1===n.length)return Ar(hr(s,0),[n[0],1,1]);if(2===n.length)return Ar(hr(hr(s,0),0),[n[0],n[1],1,1]);if(3===n.length)return Ar(hr(hr(hr(s,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+n.length+"D.")}}),dr=bn({multinomial_:function(t,e,n,r){void 0===r&&(r=!1);var o=un(t,"logits","multinomial"),i=o.size,a=o.rank;if(i<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+i+".");if(a>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+a);n=n||Math.random();var s=1===a?o.as2D(1,-1):o,u=Ot.runKernel((function(t){return t.multinomial(s,r,e,n)}),{logits2D:s});return 1===a?u.as1D():u}}),pr=bn({oneHot_:function(t,e,n,r){if(void 0===n&&(n=1),void 0===r&&(r=0),e<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+e);var o=un(t,"indices","oneHot","int32"),i=o.shape.concat([e]);return o=o.flatten(),Ot.runKernel((function(t){return t.oneHot(o,e,n,r)}),{$indices:o},(function(t){return{$indices:function(){return Mn(o.shape,"float32")}}})).reshape(i)}}),vr=bn({pad_:function(t,e,n){void 0===n&&(n=0);var r=un(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var o=e.map((function(t){return t[0]}));return Ot.runKernel((function(t){return t.pad(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.slice(o,r.shape)}}}))}}),mr=bn({pad1d_:function(t,e,n){return void 0===n&&(n=0),x(2===e.length,(function(){return"Invalid number of paddings. Must be length of 2."})),vr(t,[e],n)}}),gr=bn({pad2d_:function(t,e,n){return void 0===n&&(n=0),x(2===e.length&&2===e[0].length&&2===e[1].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),vr(t,e,n)}}),yr=bn({pad3d_:function(t,e,n){return void 0===n&&(n=0),x(3===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),vr(t,e,n)}}),xr=bn({pad4d_:function(t,e,n){return void 0===n&&(n=0),x(4===e.length&&2===e[0].length&&2===e[1].length&&2===e[2].length&&2===e[3].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),vr(t,e,n)}}),br=bn({rand_:function(t,e,n){var r=E(t),o=null;if(null==n||"float32"===n)o=new Float32Array(r);else if("int32"===n)o=new Int32Array(r);else{if("bool"!==n)throw new Error("Unknown data type "+n);o=new Uint8Array(r)}for(var i=0;i<r;i++)o[i]=e();return vt.make(t,{values:o},n)}}),wr=bn({randomNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new er(e,n,r,!1,o),a=or(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Cr=bn({randomGamma_:function(t,e,n,r,o){if(void 0===n&&(n=1),void 0===r&&(r="float32"),null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);for(var i=new nr(e,n,r,o),a=or(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Er=bn({randomUniform_:function(t,e,n,r,o){void 0===e&&(e=0),void 0===n&&(n=1),void 0===r&&(r="float32");for(var i=or(t,r),a=new rr(e,n,null,o),s=0;s<i.values.length;s++)i.values[s]=a.nextValue();return i.toTensor()}}),Rr=bn({reshape_:function(t,e){var n=un(t,"x","reshape",null);return e=T(e,n.size),x(n.size===E(e),(function(){return"new shape and old shape must have the same number of elements."})),Ot.runKernel((function(t){return t.reshape(n,e)}),{$x:n},(function(t){return{$x:function(){return t.reshape(n.shape)}}}))}}),Ir=bn({spaceToBatchND_:function(t,e,n){var r=un(t,"x","spaceToBatchND");return x(r.rank>=1+e.length,(function(){return"input rank "+r.rank+" should be > than [blockShape] "+e.length})),x(n.length===e.length,(function(){return"paddings.shape[0] "+n.length+" must be equal to [blockShape] "+e.length})),x(r.shape.reduce((function(t,r,o){return o>0&&o<=e.length?t&&(r+n[o-1][0]+n[o-1][1])%e[o-1]==0:t}),!0),(function(){return"input spatial dimensions "+r.shape.slice(1)+" with paddings "+n.toString()+" must be divisible by blockShapes "+e.toString()})),Ot.runKernel((function(t){return t.spaceToBatchND(r,e,n)}),{$x:r},(function(t){return{$x:function(){return t.batchToSpaceND(e,n)}}}))}}),Sr=bn({squeeze_:function(t,e){var n=un(t,"x","squeeze");return Rr(n,_(n.shape,e).newShape)}}),kr=bn({stack_:function(t,e){void 0===e&&(e=0);var n=cn(t,"tensors","stack");if(x(n.length>=1,(function(){return"Pass at least one tensor to tf.stack"})),1===n.length)return n[0].expandDims(e);var r=n[0].rank,o=n[0].shape,i=n[0].dtype;x(e<=r,(function(){return"Axis must be <= rank of the tensor"})),n.forEach((function(t){b(o,t.shape,"All tensors passed to stack must have matching shapes")})),n.forEach((function(t){x(i===t.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var a=n.map((function(t){return t.expandDims(e)}));return Un(a,e)}}),Ar=bn({tile_:function(t,e){var n=un(t,"x","tile",null);return x(n.rank===e.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of reps "+e+"."})),Ot.runKernel((function(t,r){var o=t.tile(n,e);return r([n]),o}),{$x:n},(function(t,n){var r=n[0];return{$x:function(){var n=Wn(r);if(1===r.rank)for(var o=0;o<e[0];++o)n=n.add(t.slice([o*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(o=0;o<e[0];++o)for(var i=0;i<e[1];++i)n=n.add(t.slice([o*r.shape[0],i*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(o=0;o<e[0];++o)for(i=0;i<e[1];++i)for(var a=0;a<e[2];++a)n=n.add(t.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(o=0;o<e[0];++o)for(i=0;i<e[1];++i)for(a=0;a<e[2];++a)for(var s=0;s<e[3];++s)n=n.add(t.slice([o*r.shape[0],i*r.shape[1],a*r.shape[2],s*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return n}}}))}}),Nr=bn({truncatedNormal_:function(t,e,n,r,o){if(void 0===e&&(e=0),void 0===n&&(n=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var i=new er(e,n,r,!0,o),a=or(t,r),s=0;s<a.values.length;s++)a.values[s]=i.nextValue();return a.toTensor()}}),Tr=bn({unstack_:function(t,e){void 0===e&&(e=0),e=e||0;var n=un(t,"x","unstack");return x(e>=-n.shape.length&&e<n.shape.length,(function(){return"Axis = "+e+" is not in [-"+n.shape.length+", "+n.shape.length+")"})),e<0&&(e+=n.shape.length),Ot.runKernel((function(t){return t.unstack(n,e)}),{$x:n},(function(t){return{$x:function(){return kr(t,e)}}}))}}),Dr=function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:return n=un(t,"x","setdiff1d"),r=un(e,"y","setdiff1d"),x(n.dtype===r.dtype,(function(){return"x and y should have the same dtype, but got x ("+n.dtype+") and y ("+r.dtype+")."})),x(1===n.rank,(function(){return"x should be 1D tensor, but got x ("+n.shape+")."})),x(1===r.rank,(function(){return"y should be 1D tensor, but got y ("+r.shape+")."})),[4,n.data()];case 1:return o=c.sent(),[4,r.data()];case 2:for(i=c.sent(),a=new Set(i),s=0,h=0;h<o.length;h++)a.has(o[h])||s++;for(u=new ht([s],n.dtype),l=new ht([s],"int32"),h=0,f=0;h<o.length;h++)a.has(o[h])||(u.values[f]=o[h],l.values[f]=h,f++);return[2,[u.toTensor(),l.toTensor()]]}}))}))};function _r(t,e,n,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(e.slice(0))).push(t[0]/n),o=o.concat(t.slice(1));else{o=o.concat(t[0]);for(var i=e.length,a=0;a<i;++a)o=o.concat([t[a+1]/e[a],e[a]]);o=o.concat(t.slice(i+1))}return o}function Or(t,e,n){void 0===n&&(n=!0);var r=[];if(n){r.push(e);for(var o=e+1;o<t;++o)o<=2*e?(r.push(o),r.push(o-(e+1))):r.push(o)}else{var i=[],a=[];for(o=1;o<t;++o)o>=2*e+1||o%2==1?a.push(o):i.push(o);r.push.apply(r,i),r.push(0),r.push.apply(r,a)}return r}function Mr(t,e,n,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/n):o.push(t[0]*n);for(var i=1;i<t.length;++i)i<=e.length?r?o.push(e[i-1]*t[i]):o.push(t[i]/e[i-1]):o.push(t[i]);return o}function Fr(t,e){for(var n=[0],r=0;r<e;++r)n.push(t[r][0]);return n}function Br(t,e,n){for(var r=t.slice(0,1),o=0;o<n;++o)r.push(t[o+1]-e[o][0]-e[o][1]);return r}function Pr(t,e){if(t.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+t.rank+".");if(e.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if("int32"!==e.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+e.dtype+".");if(e.shape[e.rank-1]>t.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+e.shape[e.rank-1]+" vs. "+t.rank);if(0===t.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+t.shape+".");for(var n=e.shape,r=n[n.length-1],o=1,i=0;i<n.length-1;++i)o*=n[i];var a=t.shape,s=n.slice();s.pop();var u=1;for(i=r;i<t.rank;++i)u*=a[i],s.push(a[i]);var c=j(t.shape).map((function(t){return t/u})).concat([1]).slice(0,r);return[s,o,u,c]}var Lr=30;function Wr(t){return t<=Lr?t:$(t,Math.floor(Math.sqrt(t)))}function Ur(t,e,n){for(var r=e.rank>1?e.shape[e.rank-1]:1,o=n.length,i=1,a=r;a<o;++a)i*=n[a];var s=r<1?1:r;return{sliceRank:r,numUpdates:e.size/s,sliceSize:i,strides:j(n.slice(0,r)).concat([1]),outputSize:E(n)}}function Vr(t){for(var e=[],n=0;t>0;)1&t&&e.push(n),t/=2,n++;return e}function zr(t,e,n){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((e[o]-t[o])/n[o]);return r}function Gr(t,e,n,r,o){var i=e[o],a=n[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),m(0,i,s-1)}function Hr(t,e,n,r,o){var i=e[o],a=n[o]||1;(t&1<<o||null==i)&&(i=a>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),a>0?m(0,i,s):m(-1,i,s-1)}function qr(t,e,n){for(var r=n.length,o=0;o<n.length;o++)if(n[o]>1){r=o;break}for(o=r+1;o<n.length;o++)if(e[o]>0||n[o]!==t[o])return!1;return!0}function $r(t,e){for(var n=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)n+=t[r]*e[r];return n}function jr(t){return x(q(t),(function(){return"The f passed in grad(f) must be a function"})),function(e,n){var r=un(e,"x","tf.grad",null),o=null!=n?un(n,"dy","tf.grad"):null;return Ot.tidy((function(){var e=Ot.gradients((function(){return t(r)}),[r],o),n=e.value,i=e.grads;return null!=o&&b(n.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),Zr(i),i[0]}))}}function Kr(t){return x(q(t),(function(){return"The f passed in grads(f) must be a function"})),function(e,n){x(Array.isArray(e),(function(){return"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"}));var r=cn(e,"args","tf.grads",null),o=null!=n?un(n,"dy","tf.grads"):null;return Ot.tidy((function(){var e=Ot.gradients((function(){return t.apply(void 0,r)}),r,o),n=e.value,i=e.grads;return null!=o&&b(n.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Zr(i),i}))}}function Xr(t){return x(q(t),(function(){return"The f passed in valueAndGrad(f) must be a function"})),function(e,n){x(e instanceof vt,(function(){return"The x passed in valueAndGrad(f)(x) must be a tensor"})),x(null==n||n instanceof vt,(function(){return"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"}));var r=Ot.gradients((function(){return t(e)}),[e],n),o=r.grads,i=r.value;return Zr(o),{grad:o[0],value:i}}}function Yr(t){return x(q(t),(function(){return"The f passed in valueAndGrads(f) must be a function"})),function(e,n){x(Array.isArray(e)&&e.every((function(t){return t instanceof vt})),(function(){return"The args passed in valueAndGrads(f)(args) must be array of tensors"})),x(null==n||n instanceof vt,(function(){return"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"}));var r=Ot.gradients((function(){return t.apply(void 0,e)}),e,n);return null!=n&&b(r.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),Zr(r.grads),r}}function Qr(t,e){x(q(t),(function(){return"The f passed in variableGrads(f) must be a function"})),x(null==e||Array.isArray(e)&&e.every((function(t){return t instanceof mt})),(function(){return"The varList passed in variableGrads(f, varList) must be an array of variables"}));var n=null!=e;if(!n)for(var r in e=[],Ot.registeredVariables)e.push(Ot.registeredVariables[r]);var o=n?e.filter((function(t){return!t.trainable})):null,i=e.length;x((e=e.filter((function(t){return t.trainable}))).length>0,(function(){return"variableGrads() expects at least one of the input variables to be trainable, but none of the "+i+" variables is trainable."}));var a=Ot.gradients(t,e,null,!0),s=a.value,u=a.grads;x(u.some((function(t){return null!=t})),(function(){return"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),x(0===s.rank,(function(){return"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+s.rank+" tensor"}));var c={};return e.forEach((function(t,e){null!=u[e]&&(c[t.name]=u[e])})),null!=o&&o.forEach((function(t){return c[t.name]=null})),{value:s,grads:c}}function Jr(t){return Ot.customGrad(t)}function Zr(t){if(t.filter((function(t){return null==t})).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var to=bn({softmax_:function(t,e){void 0===e&&(e=-1);var n=un(t,"logits","softmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and dim was "+e);return Jr((function(t,n){var r=t.logSumExp([e],!0),o=t.toFloat().sub(r).exp();return n([o]),{value:o,gradFunc:function(t,n){var r=n[0],o=t.mul(r);return o.sub(o.sum([e],!0).mul(r))}}}))(n)}}),eo=bn({logSoftmax_:function(t,e){void 0===e&&(e=-1);var n=un(t,"logits","logSoftmax");if(-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+n.rank+" and axis was "+e);return Jr((function(t,n){var r=t.max(e,!0),o=t.sub(r),i=o.toFloat().sub(o.exp().sum(e,!0).log());return n([i]),{value:i,gradFunc:function(t,n){var r=n[0].exp();return t.sub(t.sum(e,!0).mul(r))}}}))(n)}}),no=function(){function t(t,e){this.backend=t,this.dataMover=e,this.data=new WeakMap}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,e){this.data.set(t,e)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.data.delete(t)},t}(),ro=function(){function t(){}return t.prototype.time=function(t){throw new Error("Not yet implemented.")},t.prototype.read=function(t){throw new Error("Not yet implemented.")},t.prototype.readSync=function(t){throw new Error("Not yet implemented.")},t.prototype.disposeData=function(t){throw new Error("Not yet implemented.")},t.prototype.write=function(t,e){throw new Error("Not yet implemented.")},t.prototype.fromPixels=function(t,e){throw new Error("Not yet implemented.")},t.prototype.register=function(t,e,n){throw new Error("Not yet implemented.")},t.prototype.memory=function(){throw new Error("Not yet implemented.")},t.prototype.floatPrecision=function(){throw new Error("Not yet implemented")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.fusedBatchMatMul=function(t){throw t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights,new Error("Not yet implemented")},t.prototype.slice=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.stridedSlice=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.unstack=function(t,e){throw new Error("Not yet implemented")},t.prototype.reverse=function(t,e){throw new Error("Not yet implemented")},t.prototype.concat=function(t,e){throw new Error("Not yet implemented")},t.prototype.neg=function(t){throw new Error("Not yet implemented")},t.prototype.add=function(t,e){throw new Error("Not yet implemented")},t.prototype.addN=function(t){throw new Error("Not yet implemented")},t.prototype.subtract=function(t,e){throw new Error("Not yet implemented")},t.prototype.multiply=function(t,e){throw new Error("Not yet implemented")},t.prototype.realDivide=function(t,e){throw new Error("Not yet implemented")},t.prototype.floorDiv=function(t,e){throw new Error("Not yet implemented")},t.prototype.sum=function(t,e){throw new Error("Not yet implemented")},t.prototype.prod=function(t,e){throw new Error("Not yet implemented")},t.prototype.unsortedSegmentSum=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.argMin=function(t,e){throw new Error("Not yet implemented")},t.prototype.argMax=function(t,e){throw new Error("Not yet implemented")},t.prototype.equal=function(t,e){throw new Error("Not yet implemented")},t.prototype.notEqual=function(t,e){throw new Error("Not yet implemented")},t.prototype.less=function(t,e){throw new Error("Not yet implemented")},t.prototype.lessEqual=function(t,e){throw new Error("Not yet implemented")},t.prototype.greater=function(t,e){throw new Error("Not yet implemented")},t.prototype.greaterEqual=function(t,e){throw new Error("Not yet implemented")},t.prototype.logicalNot=function(t){throw new Error("Not yet implemented")},t.prototype.logicalAnd=function(t,e){throw new Error("Not yet implemented")},t.prototype.logicalOr=function(t,e){throw new Error("Not yet implemented")},t.prototype.where=function(t){throw new Error("Not yet implemented")},t.prototype.select=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.topk=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.min=function(t,e){throw new Error("Not yet implemented")},t.prototype.minimum=function(t,e){throw new Error("Not yet implemented")},t.prototype.mod=function(t,e){throw new Error("Not yet implemented")},t.prototype.max=function(t,e){throw new Error("Not yet implemented")},t.prototype.maximum=function(t,e){throw new Error("Not yet implemented")},t.prototype.all=function(t,e){throw new Error("Not yet implemented")},t.prototype.any=function(t,e){throw new Error("Not yet implemented")},t.prototype.squaredDifference=function(t,e){throw new Error("Not yet implemented")},t.prototype.ceil=function(t){throw new Error("Not yet implemented")},t.prototype.floor=function(t){throw new Error("Not yet implemented")},t.prototype.round=function(t){throw new Error("Not yet implemented")},t.prototype.sign=function(t){throw new Error("Not yet implemented")},t.prototype.isNaN=function(t){throw new Error("Not yet implemented")},t.prototype.isInf=function(t){throw new Error("Not yet implemented")},t.prototype.isFinite=function(t){throw new Error("Not yet implemented")},t.prototype.pow=function(t,e){throw new Error("Not yet implemented")},t.prototype.exp=function(t){throw new Error("Not yet implemented")},t.prototype.expm1=function(t){throw new Error("Not yet implemented")},t.prototype.log=function(t){throw new Error("Not yet implemented")},t.prototype.log1p=function(t){throw new Error("Not yet implemented")},t.prototype.sqrt=function(t){throw new Error("Not yet implemented")},t.prototype.rsqrt=function(t){throw new Error("Not yet implemented")},t.prototype.square=function(t){throw new Error("Not yet implemented")},t.prototype.reciprocal=function(t){throw new Error("Not yet implemented")},t.prototype.relu=function(t){throw new Error("Not yet implemented")},t.prototype.prelu=function(t,e){throw new Error("Not yet implemented")},t.prototype.elu=function(t){throw new Error("Not yet implemented")},t.prototype.eluDer=function(t,e){throw new Error("Not yet implemented")},t.prototype.selu=function(t){throw new Error("Not yet implemented")},t.prototype.int=function(t){throw new Error("Not yet implemented")},t.prototype.clip=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.abs=function(t){throw new Error("Not yet implemented")},t.prototype.complexAbs=function(t){throw new Error("Not yet implemented")},t.prototype.sigmoid=function(t){throw new Error("Not yet implemented")},t.prototype.softplus=function(t){throw new Error("Not yet implemented")},t.prototype.sin=function(t){throw new Error("Not yet implemented")},t.prototype.cos=function(t){throw new Error("Not yet implemented")},t.prototype.tan=function(t){throw new Error("Not yet implemented")},t.prototype.asin=function(t){throw new Error("Not yet implemented")},t.prototype.acos=function(t){throw new Error("Not yet implemented")},t.prototype.atan=function(t){throw new Error("Not yet implemented")},t.prototype.atan2=function(t,e){throw new Error("Not yet implemented")},t.prototype.sinh=function(t){throw new Error("Not yet implemented")},t.prototype.cosh=function(t){throw new Error("Not yet implemented")},t.prototype.tanh=function(t){throw new Error("Not yet implemented")},t.prototype.asinh=function(t){throw new Error("Not yet implemented")},t.prototype.acosh=function(t){throw new Error("Not yet implemented")},t.prototype.atanh=function(t){throw new Error("Not yet implemented")},t.prototype.erf=function(t){throw new Error("Not yet implemented")},t.prototype.step=function(t,e){throw new Error("Not yet implemented")},t.prototype.fusedConv2d=function(t,e,n,r,o,i){throw new Error("Not yet implemented")},t.prototype.conv2d=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv2dDerInput=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv2dDerFilter=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.depthwiseConv2D=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.depthwiseConv2DDerInput=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv3d=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv3dDerInput=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.conv3dDerFilter=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.maxPool=function(t,e){throw new Error("Not yet implemented")},t.prototype.maxPoolBackprop=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.avgPool=function(t,e){throw new Error("Not yet implemented")},t.prototype.avgPoolBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.avgPool3d=function(t,e){throw new Error("Not yet implemented")},t.prototype.avgPool3dBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.maxPool3d=function(t,e){throw new Error("Not yet implemented")},t.prototype.maxPool3dBackprop=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.reshape=function(t,e){throw new Error("Not yet implemented")},t.prototype.cast=function(t,e){throw new Error("Not yet implemented")},t.prototype.tile=function(t,e){throw new Error("Not yet implemented")},t.prototype.pad=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.transpose=function(t,e){throw new Error("Not yet implemented")},t.prototype.gather=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.gatherND=function(t,e){throw new Error("Not yet implemented")},t.prototype.scatterND=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.batchToSpaceND=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.spaceToBatchND=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.resizeBilinear=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.resizeBilinearBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.resizeNearestNeighbor=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.batchNormalization=function(t,e,n,r,o,i){throw new Error("Not yet implemented")},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){throw new Error("Not yet implemented")},t.prototype.LRNGrad=function(t,e,n,r,o,i,a){throw new Error("Not yet implemented")},t.prototype.multinomial=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.oneHot=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.cumsum=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.nonMaxSuppression=function(t,e,n,r,o){throw new Error("Not yet implemented")},t.prototype.fft=function(t){throw new Error("Not yet implemented")},t.prototype.ifft=function(t){throw new Error("Not yet implemented")},t.prototype.complex=function(t,e){throw new Error("Not yet implemented")},t.prototype.real=function(t){throw new Error("Not yet implemented")},t.prototype.imag=function(t){throw new Error("Not yet implemented")},t.prototype.cropAndResize=function(t,e,n,r,o,i){throw new Error("Not yet implemented")},t.prototype.depthToSpace=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.split=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.sparseToDense=function(t,e,n,r){throw new Error("Not yet implemented")},t.prototype.diag=function(t){throw new Error("Not yet implemented")},t.prototype.fill=function(t,e,n){throw new Error("Not yet implemented.")},t.prototype.onesLike=function(t){throw new Error("Not yet implemented")},t.prototype.zerosLike=function(t){throw new Error("Not yet implemented")},t.prototype.linspace=function(t,e,n){throw new Error("Not yet implemented")},t.prototype.dispose=function(){throw new Error("Not yet implemented")},t}();function oo(t,e){for(var n=t.length,r=[],o=0;o<n;o++){var i=n-1-o,a=t[i]||1;(e[e.length-1-o]||1)>1&&1===a&&r.unshift(i)}return r}function io(t,e){for(var n=[],r=0;r<e.length;r++){var o=t[t.length-r-1],i=e.length-r-1,a=e[i];(null==o||1===o&&a>1)&&n.unshift(i)}return n}function ao(t,e){for(var n=[],r=Math.max(t.length,e.length),o=0;o<r;o++){var i=t[t.length-o-1];null==i&&(i=1);var a=e[e.length-o-1];if(null==a&&(a=1),1===i)n.unshift(a);else if(1===a)n.unshift(i);else{if(i!==a)throw Error("Operands could not be broadcast together with shapes "+t+" and "+e+".");n.unshift(i)}}return n}function so(t,e,n,r,o,i,a){void 0===a&&(a="channelsLast");var s,u=fo(e),c=u[0],l=u[1];if("channelsLast"===a)s=[c,l,t[3],t[3]];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);s=[c,l,t[1],t[1]]}return co(t,s,n,r,o,i,!1,a)}function uo(t,e,n,r,o,i,a){void 0===a&&(a="NDHWC");var s,u,c=po(e),l=c[0],h=c[1],f=c[2];if("NDHWC"===a)u="channelsLast",s=[l,h,f,t[4],t[4]];else{if("NCDHW"!==a)throw new Error("Unknown dataFormat "+a);u="channelsFirst",s=[l,h,f,t[1],t[1]]}return lo(t,s,n,r,o,!1,u,i)}function co(t,e,n,r,o,i,a,s){void 0===a&&(a=!1),void 0===s&&(s="channelsLast");var u=[-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3];if("channelsLast"===s)c=t[0],l=t[1],h=t[2],f=t[3];else{if("channelsFirst"!==s)throw new Error("Unknown dataFormat "+s);c=t[0],f=t[1],l=t[2],h=t[3]}var d,p=e[0],v=e[1],m=e[3],g=fo(n),y=g[0],b=g[1],w=fo(r),C=w[0],E=w[1],R=vo(p,C),S=vo(v,E),k=function(t,e,n,r,o,i,a,s){var u,c,l;if("number"==typeof t){u={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};var h=function(t,e,n,r,o){null==r&&(r=ho(t,e,n));var i=t[1],a=mo((t[0]-e+2*r)/n+1,o);x(I(a),(function(){return"The output # of rows ("+a+") must be an integer. Change the stride and/or zero pad parameters"}));var s=mo((i-e+2*r)/n+1,o);return x(I(s),(function(){return"The output # of columns ("+s+") must be an integer. Change the stride and/or zero pad parameters"})),[a,s]}([e,n],i,r,t,s);c=h[0],l=h[1]}else if("same"===t){c=Math.ceil(e/r),l=Math.ceil(n/o);var f=Math.max(0,(c-1)*r+i-e),d=Math.max(0,(l-1)*o+a-n),p=Math.floor(f/2),v=f-p,m=Math.floor(d/2);u={top:p,bottom:v,left:m,right:d-m,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);u={top:0,bottom:0,left:0,right:0,type:"VALID"},c=Math.ceil((e-i+1)/r),l=Math.ceil((n-a+1)/o)}return{padInfo:u,outHeight:c,outWidth:l}}(o,l,h,y,b,R,S,i),A=k.padInfo,N=k.outHeight,T=k.outWidth,D=a?m*f:m;return"channelsFirst"===s?d=[c,D,N,T]:"channelsLast"===s&&(d=[c,N,T,D]),{batchSize:c,dataFormat:s,inHeight:l,inWidth:h,inChannels:f,outHeight:N,outWidth:T,outChannels:D,padInfo:A,strideHeight:y,strideWidth:b,filterHeight:p,filterWidth:v,effectiveFilterHeight:R,effectiveFilterWidth:S,dilationHeight:C,dilationWidth:E,inShape:t,outShape:d,filterShape:e}}function lo(t,e,n,r,o,i,a,s){void 0===i&&(i=!1),void 0===a&&(a="channelsLast");var u=[-1,-1,-1,-1,-1],c=u[0],l=u[1],h=u[2],f=u[3],d=u[4];if("channelsLast"===a)c=t[0],l=t[1],h=t[2],f=t[3],d=t[4];else{if("channelsFirst"!==a)throw new Error("Unknown dataFormat "+a);c=t[0],d=t[1],l=t[2],h=t[3],f=t[4]}var p,v=e[0],m=e[1],g=e[2],y=e[4],b=po(n),w=b[0],C=b[1],E=b[2],R=po(r),S=R[0],k=R[1],A=R[2],N=vo(v,S),T=vo(m,k),D=vo(g,A),_=function(t,e,n,r,o,i,a,s,u,c,l){var h,f,d,p;if("number"==typeof t){h={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};var v=function(t,e,n,r,o,i){null==o&&(o=ho(t,e,r));var a=t[1],s=t[2],u=mo((t[0]-e+2*o)/r+1,i);x(I(u),(function(){return"The output # of depths ("+u+") must be an integer. Change the stride and/or zero pad parameters"}));var c=mo((a-e+2*o)/r+1,i);x(I(c),(function(){return"The output # of rows ("+c+") must be an integer. Change the stride and/or zero pad parameters"}));var l=mo((s-e+2*o)/r+1,i);return x(I(l),(function(){return"The output # of columns ("+l+") must be an integer. Change the stride and/or zero pad parameters"})),[u,c,l,1]}([e,n,r,1],s,0,o,t,l);f=v[0],d=v[1],p=v[2]}else if("same"===t){var m=((f=Math.ceil(e/o))-1)*o+s-e,g=((d=Math.ceil(n/i))-1)*i+u-n,y=((p=Math.ceil(r/a))-1)*a+c-r,b=Math.floor(m/2),w=m-b,C=Math.floor(g/2),E=g-C,R=Math.floor(y/2);h={top:C,bottom:E,left:R,right:y-R,front:b,back:w,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);h={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},f=Math.ceil((e-s+1)/o),d=Math.ceil((n-u+1)/i),p=Math.ceil((r-c+1)/a)}return{padInfo:h,outDepth:f,outHeight:d,outWidth:p}}(o,l,h,f,w,C,E,N,T,D,s),O=_.padInfo,M=_.outDepth,F=_.outHeight,B=_.outWidth,P=i?y*d:y;return"channelsFirst"===a?p=[c,P,M,F,B]:"channelsLast"===a&&(p=[c,M,F,B,P]),{batchSize:c,dataFormat:a,inDepth:l,inHeight:h,inWidth:f,inChannels:d,outDepth:M,outHeight:F,outWidth:B,outChannels:P,padInfo:O,strideDepth:w,strideHeight:C,strideWidth:E,filterDepth:v,filterHeight:m,filterWidth:g,effectiveFilterDepth:N,effectiveFilterHeight:T,effectiveFilterWidth:D,dilationDepth:S,dilationHeight:k,dilationWidth:A,inShape:t,outShape:p,filterShape:e}}function ho(t,e,n,r){void 0===r&&(r=1);var o=vo(e,r);return Math.floor((t[0]*(n-1)-n+o)/2)}function fo(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function po(t){return"number"==typeof t?[t,t,t]:t}function vo(t,e){return e<=1?t:t+(t-1)*(e-1)}function mo(t,e){if(!e)return t;switch(e){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+e)}}function go(t){var e=fo(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function yo(t,e){return go(t)||go(e)}function xo(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}function bo(t,e,n){if("complex64"===e){if("complex64"===t.dtype)return t.clone();var r=Mn(t.shape),o=t.toFloat(),i=n.complex(o,r);return r.dispose(),o.dispose(),i}if(!P(t.dtype,e))return vt.make(t.shape,{dataId:t.dataId},e);if("complex64"===t.dtype){var a=n.real(t);return i=a.cast(e),a.dispose(),i}if("int32"===e)return n.int(t);if("bool"===e){var s=Sn(0,t.dtype);return i=n.notEqual(t,s),s.dispose(),i}throw new Error("Error in Cast: failed to cast "+t.dtype+" to "+e)}function wo(t,e){return vt.make(e,{dataId:t.dataId},t.dtype)}function Co(t,e,n){var r=(e-t)/(n-1),o=Q(n,"float32");o[0]=t;for(var i=1;i<o.length;i++)o[i]=o[i-1]+r;return kn(o,"float32")}var Eo=Object.freeze({castTensor:bo,reshapeTensor:wo,linspaceImpl:Co,upcastType:Rt,axesAreInnerMostDims:ln,combineLocations:hn,computeOutAndReduceShapes:fn,expandShapeToKeepDim:dn,assertAxesAreInnerMostDims:pn,getAxesPermutation:vn,getUndoAxesPermutation:mn,getInnerMostAxes:gn,getBroadcastDims:oo,getReductionAxes:io,assertAndGetBroadcastShape:ao,assertParamsConsistent:yn,computeOutShape:xn,computePool2DInfo:so,computePool3DInfo:uo,computeConv2DInfo:co,computeConv3DInfo:lo,computeDefaultPad:ho,tupleValuesAreOne:go,eitherStridesOrDilationsAreOne:yo,convertConv2DDataFormat:xo});function Ro(t,e){if(t.length!==e.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+t.length+", imag: "+e.length+".");for(var n=new Float32Array(2*t.length),r=0;r<n.length;r+=2)n[r]=t[r/2],n[r+1]=e[r/2];return n}function Io(t,e){return{real:t[2*e],imag:t[2*e+1]}}function So(t,e,n,r){t[2*r]=e,t[2*r+1]=n}function ko(t,e,n){var r=(n?2:-2)*Math.PI*(t/e);return{real:Math.cos(r),imag:Math.sin(r)}}function Ao(t,e,n,r,o){for(var i=Array.from(e).map((function(t,e){return{score:t,boxIndex:e}})).filter((function(t){return t.score>o})).sort((function(t,e){return e.score-t.score})),a=[],s=0;s<i.length;s++){var u=i[s],c=u.score,l=u.boxIndex;if(c<o)break;for(var h=!1,f=a.length-1;f>=0;--f)if(No(t,l,a[f])>=r){h=!0;break}if(!h&&(a.push(l),a.length>=n))break}return kn(a,"int32")}function No(t,e,n){var r=t.subarray(4*e,4*e+4),o=t.subarray(4*n,4*n+4),i=Math.min(r[0],r[2]),a=Math.min(r[1],r[3]),s=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),h=Math.max(o[0],o[2]),f=Math.max(o[1],o[3]),d=(s-i)*(u-a),p=(h-c)*(f-l);if(d<=0||p<=0)return 0;var v=Math.max(i,c),m=Math.max(a,l),g=Math.min(s,h),y=Math.min(u,f),x=Math.max(g-v,0)*Math.max(y-m,0);return x/(d+p-x)}function To(t,e,n){var r=new Array(t.rank).fill(0),o=t.shape.slice();return e.map((function(e){o[n]=e;var i=t.slice(r,o);return r[n]+=e,i}))}function Do(t,e){for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[r]*e[r];var o=or(n,t.dtype);for(r=0;r<o.values.length;++r){for(var i=o.indexToLoc(r),a=new Array(t.rank),s=0;s<a.length;s++)a[s]=i[s]%t.shape[s];var u=t.locToIndex(a);o.values[r]=t.values[u]}return o.toTensor()}function _o(t,e,n,r,o){for(var i=e[e.length-1],a=[t.length/i,i],s=a[0],u=a[1],c=O(n,s*r),l=O("int32",s*r),h=0;h<s;h++){for(var f=h*u,d=t.subarray(f,f+u),p=[],v=0;v<d.length;v++)p.push({value:d[v],index:v});p.sort((function(t,e){return e.value-t.value}));var m=h*r,g=c.subarray(m,m+r),y=l.subarray(m,m+r);for(v=0;v<r;v++)g[v]=p[v].value,y[v]=p[v].index}var x=e.slice();return x[x.length-1]=r,[Rn(c,x,n),Rn(l,x,"int32")]}function Oo(t,e){for(var n=[],r=0;r<e.length;r++)e[r]&&n.push(r);var o=or(t,"int32"),i=or([n.length,t.length],"int32");for(r=0;r<n.length;r++){var a=o.indexToLoc(n[r]),s=r*t.length;i.values.set(a,s)}return i.toTensor()}var Mo=function(t,e){this.outputShape=[],this.outputShape=t,this.variableNames=e.map((function(t,e){return"T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("float v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        float result = "+r+";\n        setOutput(result);\n      }\n    "},Fo=function(t,e){this.outputShape=[],this.usesPackedTextures=!0,this.outputShape=t,this.variableNames=e.map((function(t,e){return"T"+e}));var n=[];this.variableNames.forEach((function(t){n.push("vec4 v"+t+" = get"+t+"AtOutCoords();")}));var r=this.variableNames.map((function(t){return"v"+t})).join(" + ");this.userCode="\n      void main() {\n        "+n.join("\n        ")+"\n\n        vec4 result = "+r+";\n        setOutput(result);\n      }\n    "},Bo=function(t,e,n){this.variableNames=["A"];var r=t.windowSize,o=t.batchSize,i=t.inSize,a=Math.ceil(i/r);n||this.variableNames.push("bestIndicesA"),this.outputShape=[o,a];var s="max"===e?">":"<",u=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+r+";\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < "+r+"; i++) {\n          int inIdx = "+u+";\n          float candidate = getA(batch, inIdx);\n          if (candidate "+s+" bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    "};function Po(t,e){return["x","y","z","w","u","v"].slice(0,e).map((function(e){return t+"."+e}))}function Lo(t,e){return 1===e?[t]:Po(t,e)}function Wo(){var t,e,n,r,o,i,a,s,u,c;return 2===f.getNumber("WEBGL_VERSION")?(t="#version 300 es",e="in",n="out",r="in",o="texture",i="outputColor",a="out vec4 outputColor;",s="\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 0. || val == 0.) ? false : true;\n      }\n    ",u="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(t="",e="attribute",n="varying",r="varying",o="texture2D",i="gl_FragColor",a="",s="\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n    ",u="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:t,attribute:e,varyingVs:n,varyingFs:r,texture2D:o,output:i,defineOutput:a,defineSpecialNaN:s,defineSpecialInf:u,defineRound:c}}function Uo(t,e,n){void 0===n&&(n="index");var r=j(e);return r.map((function(e,o){return"int "+t[o]+" = "+n+" / "+e+"; "+(o===r.length-1?"int "+t[o+1]+" = "+n+" - "+t[o]+" * "+e:"index -= "+t[o]+" * "+e)+";"})).join("")}function Vo(t){var e=j(t).map((function(t){return t.toString()}));return"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * "+e[0]+" + coords.y * "+e[1]+" + coords.z;\n  }\n"}var zo="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n";function Go(t,e,n,r){var o=[];t.forEach((function(t){var e=E(t.shapeInfo.logicalShape);t.shapeInfo.isUniform?o.push("uniform float "+t.name+(e>1?"["+e+"]":"")+";"):(o.push("uniform sampler2D "+t.name+";"),o.push("uniform int offset"+t.name+";"))}));var i,a,s=o.join("\n"),u=t.map((function(t){return function(t,e,n){void 0===n&&(n=!1);var r="";r+=n?function t(e){var n,r,o;switch(e.shapeInfo.logicalShape.length){case 0:return n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=Wo(),"\n    vec4 "+r+"() {\n      return "+o.texture2D+"("+n+", halfCR);\n    }\n  ";case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1),r=t.shapeInfo.texShape,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],i=Wo();return"\n    vec4 "+n+"(int index) {\n      vec2 uv = packedUVfrom1D(\n        "+o[0]+", "+o[1]+", index);\n      return "+i.texture2D+"("+e+", uv);\n    }\n  "}(e);case 2:return function(t){var e=t.shapeInfo.logicalShape,n=t.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),o=t.shapeInfo.texShape,i=o[0],a=o[1],s=Wo();if(null!=o&&R(e,o))return"\n      vec4 "+r+"(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2("+a+".0, "+i+".0);\n\n        return "+s.texture2D+"("+n+", uv);\n      }\n    ";var u=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];return"\n    vec4 "+r+"(int row, int col) {\n      vec2 uv = packedUVfrom2D("+Math.ceil(e[1]/2)+", "+u[0]+", "+u[1]+", row, col);\n      return "+s.texture2D+"("+n+", uv);\n    }\n  "}(e);case 3:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)];if(1===n[0]){var s=Qo(e,n.slice(1));return"\n        "+t(s)+"\n        vec4 "+o+"(int b, int row, int col) {\n          return "+o+"("+Jo(["b","row","col"],[1,2])+");\n        }\n      "}var u=a[0],c=a[1],l=Math.ceil(n[2]/2);return"\n    vec4 "+o+"(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        "+u+", "+c+", "+l*Math.ceil(n[1]/2)+", "+l+", b, row, col);\n      return "+Wo().texture2D+"("+r+", uv);\n    }\n  "}(e);default:return function(t){for(var e=t.shapeInfo.logicalShape,n=e.length,r=t.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=t.shapeInfo.texShape,a=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],s=a[0],u=a[1],c=Math.ceil(e[n-1]/2),l=c*Math.ceil(e[n-2]/2),h="int b, int row, int col",f="b * "+l+" + (row / 2) * "+c+" + (col / 2)",d=2;d<n-1;d++)h="int b"+d+", "+h,f="b"+d+" * "+(l*=e[n-d-1])+" + "+f;return"\n    vec4 "+o+"("+h+") {\n      int index = "+f+";\n      int texR = index / "+u+";\n      int texC = index - texR * "+u+";\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+u+", "+s+");\n      return "+Wo().texture2D+"("+r+", uv);\n    }\n  "}(e)}}(t):function t(e){var n=e.shapeInfo.logicalShape;switch(n.length){case 0:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"float "+n+"() {return "+e+";}";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===o&&1===i)return"\n      float "+n+"() {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var a=t.shapeInfo.texShape;return"\n    float "+n+"() {\n      vec2 uv = uvFromFlat("+a[0]+", "+a[1]+", "+Ko(e)+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(e);case 1:return function(t){var e=t.name,n="get"+e.charAt(0).toUpperCase()+e.slice(1);if(t.shapeInfo.isUniform)return"\n      float "+n+"(int index) {\n        "+Xo(t)+"\n      }\n    ";var r=t.shapeInfo.texShape,o=r[0],i=r[1];if(1===i&&1===o)return"\n      float "+n+"(int index) {\n        return sampleTexture("+e+", halfCR);\n      }\n    ";var a=Ko(e);return 1===i?"\n      float "+n+"(int index) {\n        vec2 uv = vec2(0.5, (float(index + "+a+") + 0.5) / "+o+".0);\n        return sampleTexture("+e+", uv);\n      }\n    ":1===o?"\n      float "+n+"(int index) {\n        vec2 uv = vec2((float(index + "+a+") + 0.5) / "+i+".0, 0.5);\n        return sampleTexture("+e+", uv);\n      }\n    ":"\n    float "+n+"(int index) {\n      vec2 uv = uvFromFlat("+o+", "+i+", index + "+a+");\n      return sampleTexture("+e+", uv);\n    }\n  "}(e);case 2:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=e.shapeInfo.texShape;if(null!=i&&R(n,i)){var a=i[0];return"\n    float "+o+"(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2("+i[1]+".0, "+a+".0);\n      return sampleTexture("+r+", uv);\n    }\n  "}var s=_(n),u=s.newShape,c=s.keptDims,l=u;if(l.length<n.length){var h=Qo(e,l);return"\n      "+t(h)+"\n      float "+o+"(int row, int col) {\n        return "+o+"("+Jo(["row","col"],c)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2("+n[1]+", 1)));\n        "+Xo(e)+"\n      }\n    ";var f=i[0],d=i[1],p=Ko(r);return 1===d?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+p+"), vec3("+n[1]+", 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / "+f+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":1===f?"\n    float "+o+"(int row, int col) {\n      float index = dot(vec3(row, col, "+p+"), vec3("+n[1]+", 1, 1));\n      vec2 uv = vec2((index + 0.5) / "+d+".0, 0.5);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n  float "+o+"(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * "+n[1]+" + col + "+p+";\n    vec2 uv = uvFromFlat("+f+", "+d+", index);\n    return sampleTexture("+r+", uv);\n  }\n"}(e);case 3:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[1]*n[2],a=n[2],s=_(n),u=s.newShape,c=s.keptDims,l=u;if(l.length<n.length){var h=Qo(e,l);return"\n        "+t(h)+"\n        float "+o+"(int row, int col, int depth) {\n          return "+o+"("+Jo(["row","col","depth"],c)+");\n        }\n      "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3("+i+", "+a+", 1)));\n        "+Xo(e)+"\n      }\n    ";var f=e.shapeInfo.texShape,d=f[0],p=f[1],v=e.shapeInfo.flatOffset;return p===i&&null==v?"\n        float "+o+"(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2("+a+", 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2("+p+".0, "+d+".0);\n          return sampleTexture("+r+", uv);\n        }\n      ":p===a&&null==v?"\n    float "+o+"(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2("+n[1]+", 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+p+".0, "+d+".0);\n      return sampleTexture("+r+", uv);\n    }\n  ":"\n      float "+o+"(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * "+i+" + col * "+a+" + depth + "+Ko(r)+";\n        vec2 uv = uvFromFlat("+d+", "+p+", index);\n        return sampleTexture("+r+", uv);\n      }\n  "}(e);case 4:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[3],a=n[2]*i,s=n[1]*a,u=_(n),c=u.newShape,l=u.keptDims;if(c.length<n.length){var h=Qo(e,c);return"\n      "+t(h)+"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        return "+o+"("+Jo(["row","col","depth","depth2"],l)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4("+s+", "+a+", "+i+", 1)));\n        "+Xo(e)+"\n      }\n    ";var f=e.shapeInfo.flatOffset,d=e.shapeInfo.texShape,p=d[0],v=d[1];return v===s&&null==f?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3("+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+v+".0, "+p+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":v===i&&null==f?"\n      float "+o+"(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3("+n[1]*n[2]+", "+n[2]+", 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+v+".0, "+p+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+s+" + col * "+a+" +\n          depth * "+i+" + depth2;\n      vec2 uv = uvFromFlat("+p+", "+v+", index + "+Ko(r)+");\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);case 5:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=n[4],a=n[3]*i,s=n[2]*a,u=n[1]*s,c=_(n),l=c.newShape,h=c.keptDims;if(l.length<n.length){var f=Qo(e,l);return"\n      "+t(f)+"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        return "+o+"("+Jo(["row","col","depth","depth2","depth3"],h)+");\n      }\n    "}if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+u+", "+s+", "+a+", "+i+")) +\n          depth3;\n        "+Xo(e)+"\n      }\n    ";var d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,v=p[0],m=p[1];return m===u&&null==d?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4("+s+", "+a+", "+i+", 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+m+".0, "+v+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":m===i&&null==d?"\n      float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4("+n[1]*n[2]*n[3]+",\n               "+n[2]*n[3]+", "+n[3]+", 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+m+".0, "+v+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+u+" + col * "+s+" + depth * "+a+" +\n          depth2 * "+i+" + depth3 + "+Ko(r)+";\n      vec2 uv = uvFromFlat("+v+", "+m+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);case 6:return function(e){var n=e.shapeInfo.logicalShape,r=e.name,o="get"+r.charAt(0).toUpperCase()+r.slice(1),i=_(n),a=i.newShape,s=i.keptDims;if(a.length<n.length){var u=Qo(e,a);return"\n      "+t(u)+"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return "+o+"("+Jo(["row","col","depth","depth2","depth3","depth4"],s)+");\n      }\n    "}var c=n[5],l=n[4]*c,h=n[3]*l,f=n[2]*h,d=n[1]*f;if(e.shapeInfo.isUniform)return"\n      float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4("+d+", "+f+", "+h+", "+l+")) +\n          dot(\n            vec2(depth3, depth4),\n            vec2("+c+", 1)));\n        "+Xo(e)+"\n      }\n    ";var p=e.shapeInfo.flatOffset,v=e.shapeInfo.texShape,m=v[0],g=v[1];return g===d&&null==p?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4("+f+", "+h+", "+l+", "+c+")) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":g===c&&null==p?"\n      float "+o+"(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4("+n[1]*n[2]*n[3]*n[4]+",\n               "+n[2]*n[3]*n[4]+",\n               "+n[3]*n[4]+",\n               "+n[4]+")) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2("+g+".0, "+m+".0);\n        return sampleTexture("+r+", uv);\n      }\n    ":"\n    float "+o+"(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * "+d+" + col * "+f+" + depth * "+h+" +\n          depth2 * "+l+" + depth3 * "+c+" + depth4 + "+Ko(r)+";\n      vec2 uv = uvFromFlat("+m+", "+g+", index);\n      return sampleTexture("+r+", uv);\n    }\n  "}(e);default:throw new Error(n.length+"-D input sampling is not yet supported")}}(t);var o=t.shapeInfo.logicalShape,i=e.logicalShape;return o.length<=i.length&&(r+=n?function(t,e){var n,r=t.name,o=r.charAt(0).toUpperCase()+r.slice(1),i="get"+o+"AtOutCoords",a=t.shapeInfo.logicalShape.length,s=e.logicalShape.length,u=oo(t.shapeInfo.logicalShape,e.logicalShape),c=Yo(s),l=s-a,h=["x","y","z","w","u","v"];n=0===a?"":s<2&&u.length>=1?"coords = 0;":u.map((function(t){return"coords."+h[t+l]+" = 0;"})).join("\n");var f;f=s<2&&a>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return"coords."+h[e+l]})).join(", ");var d="return outputValue;",p=1===E(t.shapeInfo.logicalShape),v=1===E(e.logicalShape);if(1!==a||p||v){if(p&&!v)d=1===s?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){var m=a-2,g=a-1;u.indexOf(m)>-1&&u.indexOf(g)>-1?d="return vec4(outputValue.x);":u.indexOf(m)>-1?d="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(g)>-1&&(d="return vec4(outputValue.xx, outputValue.zz);")}}else d="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return"\n    vec4 "+i+"() {\n      "+c+" coords = getOutputCoords();\n      "+n+"\n      vec4 outputValue = get"+o+"("+f+");\n      "+d+"\n    }\n  "}(t,e):function(t,e){var n=t.name,r=n.charAt(0).toUpperCase()+n.slice(1),o="get"+r+"AtOutCoords",i=e.texShape,a=t.shapeInfo.texShape,s=t.shapeInfo.logicalShape.length,u=e.logicalShape.length;if(!t.shapeInfo.isUniform&&s===u&&null==t.shapeInfo.flatOffset&&R(a,i))return"\n      float "+o+"() {\n        return sampleTexture("+n+", resultUV);\n      }\n    ";var c=Yo(u),l=oo(t.shapeInfo.logicalShape,e.logicalShape),h=u-s,f=["x","y","z","w","u","v"];return"\n    float "+o+"() {\n      "+c+" coords = getOutputCoords();\n      "+(0===s?"":u<2&&l.length>=1?"coords = 0;":l.map((function(t){return"coords."+f[t+h]+" = 0;"})).join("\n"))+"\n      return get"+r+"("+(u<2&&s>0?"coords":t.shapeInfo.logicalShape.map((function(t,e){return"coords."+f[e+h]})).join(", "))+");\n    }\n  "}(t,e)),r}(t,e,r)})).join("\n"),c=e.texShape,l=Wo(),h=function(t){return"\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return "+t.texture2D+"(textureSampler, uv).r;\n    }\n  "}(l),f=function(t){return t.version+"\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    "+t.varyingFs+" vec2 resultUV;\n    "+t.defineOutput+"\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    #define isnan(value) isnan_custom(value)\n    "+t.defineSpecialNaN+"\n    bvec4 isnan_custom(vec4 val) {\n      return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n    }\n\n    "+t.defineSpecialInf+"\n    "+t.defineRound+"\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    "+Ho+"\n    "+qo+"\n    "+$o+"\n  "}(l);return e.isPacked?(i=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];return 1===n[0]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * "+n[1]+".0);\n      }\n    ":1===n[1]?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * "+n[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      return 2 * (resTexRC.x * "+n[1]+" + resTexRC.y);\n    }\n  "}(0,e);case 2:return function(t,e){var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)];if(R(t,e))return"\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2("+n[0]+", "+n[1]+"));\n      }\n    ";var r=Math.ceil(t[1]/2);return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=t,r=e,o=[Math.ceil(r[0]/2),Math.ceil(r[1]/2)],a=(i=Math.ceil(n[2]/2))*Math.ceil(n[1]/2),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+o[0]+", "+o[1]+"));\n      int index = resTexRC.x * "+o[1]+" + resTexRC.y;\n\n      int b = index / "+a+";\n      index -= b * "+a+";\n\n      int r = 2 * (index / "+i+");\n      int c = imod(index, "+i+") * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";default:return function(t,e){for(var n=[Math.ceil(e[0]/2),Math.ceil(e[1]/2)],r=Math.ceil(t[t.length-1]/2),o=r*Math.ceil(t[t.length-2]/2),i=o,a="",s="b, r, c",u=2;u<t.length-1;u++)a="\n      int b"+u+" = index / "+(i*=t[t.length-u-1])+";\n      index -= b"+u+" * "+i+";\n    "+a,s="b"+u+", "+s;return"\n    ivec"+t.length+" getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n\n      "+a+"\n\n      int b = index / "+o+";\n      index -= b * "+o+";\n\n      int r = 2 * (index / "+r+");\n      int c = imod(index, "+r+") * 2;\n\n      return ivec"+t.length+"("+s+");\n    }\n  "}(t,e)}var n,r,o,i,a}(e.logicalShape,c),a=function(t){return"\n    void setOutput(vec4 val) {\n      "+t.output+" = val;\n    }\n  "}(l)):(i=function(t,e){switch(t.length){case 0:return"\n    int getOutputCoords() {\n      return 0;\n    }\n  ";case 1:return function(t,e){return 1===e[0]?"\n      int getOutputCoords() {\n        return int(resultUV.x * "+e[1]+".0);\n      }\n    ":1===e[1]?"\n      int getOutputCoords() {\n        return int(resultUV.y * "+e[0]+".0);\n      }\n    ":"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      return resTexRC.x * "+e[1]+" + resTexRC.y;\n    }\n  "}(0,e);case 2:return function(t,e){return R(t,e)?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2("+e[0]+", "+e[1]+"));\n      }\n    ":1===t[1]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":1===t[0]?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2("+e[0]+", "+e[1]+"));\n        int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      int r = index / "+t[1]+";\n      int c = index - r * "+t[1]+";\n      return ivec2(r, c);\n    }\n  "}(t,e);case 3:return n=e,r=Uo(["r","c","d"],t),"\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2("+n[0]+", "+n[1]+"));\n      int index = resTexRC.x * "+n[1]+" + resTexRC.y;\n      "+r+"\n      return ivec3(r, c, d);\n    }\n  ";case 4:return function(t,e){var n=Uo(["r","c","d","d2"],t);return"\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n      "+n+"\n      return ivec4(r, c, d, d2);\n    }\n  "}(t,e);case 5:return function(t,e){var n=Uo(["r","c","d","d2","d3"],t);return"\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2("+e[0]+",\n                             "+e[1]+"));\n\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  "}(t,e);case 6:return function(t,e){var n=Uo(["r","c","d","d2","d3","d4"],t);return"\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2("+e[0]+", "+e[1]+"));\n      int index = resTexRC.x * "+e[1]+" + resTexRC.y;\n\n      "+n+"\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  "}(t,e);default:throw new Error(t.length+"-D output sampling is not yet supported")}var n,r}(e.logicalShape,c),a=function(t){return"\n    void setOutput(float val) {\n      "+t.output+" = vec4(val, 0, 0, 0);\n    }\n  "}(l)),r&&(f+=jo),[f,h,a,s,i,u,n].join("\n")}var Ho="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",qo="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",$o="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",jo="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function Ko(t){return"offset"+t}function Xo(t){var e=t.name,n=E(t.shapeInfo.logicalShape);return n<2?"return "+e+";":"\n    for (int i = 0; i < "+n+"; i++) {\n      if (i == index) {\n        return "+e+"[i];\n      }\n    }\n  "}function Yo(t){if(t<=1)return"int";if(2===t)return"ivec2";if(3===t)return"ivec3";if(4===t)return"ivec4";if(5===t)return"ivec5";if(6===t)return"ivec6";throw Error("GPU for rank "+t+" is not yet supported")}function Qo(t,e){var n=JSON.parse(JSON.stringify(t));return n.shapeInfo.logicalShape=e,n}function Jo(t,e){return e.map((function(e){return t[e]})).join(", ")}var Zo=function(t,e,n,r){this.variableNames=["A"],this.usesPackedTextures=!0,x(t.length>2,(function(){return"Packed arg"+(n.charAt(0).toUpperCase()+n.slice(1))+" supports only inputs with rank above 2."}));var o=t[t.length-1],i=Math.ceil(o/e);this.outputShape=t.slice(0,-1),i>1&&this.outputShape.push(i),r||this.variableNames.push("bestIndicesA");var a,s,u=this.outputShape,c=u.length,l=Yo(c),h=Lo("coords",c);if(1===i){var f=Yo(s=c+1);a="\n        "+f+" sourceLocR = "+f+"("+h.join()+", 0);\n        ++"+h[c-1]+";\n        "+f+" sourceLocG = "+f+"("+h.join()+", 0);\n        ++"+h[c-2]+";\n        "+f+" sourceLocA = "+f+"("+h.join()+", 0);\n        --"+h[c-1]+";\n        "+f+" sourceLocB = "+f+"("+h.join()+", 0);\n        --"+h[c-2]+";"}else s=c,a="\n        "+l+" sourceLocR = coords;\n        ++"+h[c-1]+";\n        "+l+" sourceLocG = coords;\n        ++"+h[c-2]+";\n        "+l+" sourceLocA = coords;\n        --"+h[c-1]+";\n        "+l+" sourceLocB = coords;\n        --"+h[c-2]+";";var d=["x","y","z","w","u","v"].slice(0,s),p="."+d[s-1],v=d.map((function(t){return"int "+t})),m=Lo("sourceLocR",s-1).concat("inIdx.r"),g=Lo("sourceLocG",s-1).concat("inIdx.g"),y=Lo("sourceLocB",s-1).concat("inIdx.b"),b=Lo("sourceLocA",s-1).concat("inIdx.a"),w="max"===n?"greaterThan":"lessThan",C=r?"":"\n          inIdx = round(vec4(getBestIndicesAChannel("+m.join()+"),\n                             getBestIndicesAChannel("+g.join()+"),\n                             getBestIndicesAChannel("+y.join()+"),\n                             getBestIndicesAChannel("+b.join()+")));",E="vec4(\n            getAChannel("+m.join()+"),\n            hasNextCol ? getAChannel("+g.join()+") : 0.,\n            hasNextRow ? getAChannel("+y.join()+") : 0.,\n            hasNextRow && hasNextCol ? getAChannel("+b.join()+") : 0.)",R=r?"":"\n      float getBestIndicesAChannel("+v.join()+") {\n        return getChannel(getBestIndicesA("+d.join()+"),\n                                          vec2("+d.slice(-2).join()+"));\n      }";this.userCode="\n      float getAChannel("+v.join()+") {\n        return getChannel(getA("+d.join()+"),\n                               vec2("+d.slice(-2).join()+"));\n      }\n      "+R+"\n      void main() {\n        "+l+" coords = getOutputCoords();\n        bool hasNextCol = "+h[c-1]+" < "+(u[c-1]-1)+";\n        bool hasNextRow = "+h[c-2]+" < "+(u[c-2]-1)+";\n        "+a+"\n        ivec4 srcIdx = ivec4(sourceLocR"+p+", sourceLocG"+p+",\n          sourceLocB"+p+", sourceLocA"+p+") * "+e+";\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = "+E+";\n\n        for (int i = 0; i < "+e+"; i++) {\n          inIdx = srcIdx;\n          "+C+"\n          vec4 candidate = "+E+";\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4("+w+"(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    "},ti=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=t.dilationHeight,a=t.dilationWidth,s=t.effectiveFilterHeight,u=t.effectiveFilterWidth,c=s-1-t.padInfo.top,l=u-1-t.padInfo.left,h=1/(e*n);this.userCode="\n      const ivec2 pads = ivec2("+c+", "+l+");\n      const float avgMultiplier = float("+h+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+s+";\n            wR += "+i+") {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+u+";\n            wC+= "+a+") {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ei=function(t){this.variableNames=["dy"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,d=l-1-t.padInfo.front,p=h-1-t.padInfo.top,v=f-1-t.padInfo.left,m=1/(e*n*r);this.userCode="\n      const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n      const float avgMultiplier = float("+m+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          float dyD = float(dyDCorner + wD) / "+o+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+h+";\n              wR += "+u+") {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+f+";\n                wC += "+c+") {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ni=function(t,e,n,r,o,i){this.outputShape=[],this.variableNames=["x","mean","variance"],ao(t,e),ao(t,n);var a="0.0";null!=r&&(ao(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var s="1.0";null!=o&&(ao(t,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = "+a+";\n        float scale = "+s+";\n        float inv = scale * inversesqrt(variance + float("+i+"));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    "},ri=function(t,e,n,r,o,i){this.usesPackedTextures=!0,this.variableNames=["x","mean","variance"],ao(t,e),ao(t,n);var a="vec4(0.0)";null!=r&&(ao(t,r),this.variableNames.push("offset"),a="getOffsetAtOutCoords()");var s="vec4(1.0)";null!=o&&(ao(t,o),this.variableNames.push("scale"),s="getScaleAtOutCoords()"),this.outputShape=t,this.userCode="\n      void main() {\n        vec4 offset = "+a+";\n        vec4 scale = "+s+";\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4("+i+"));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    "},oi=function(t,e,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=ao(e,n),this.userCode="\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        "+t+"\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    "},ii="return a + b;",ai="return a - b;",si="return a * b;",ui="return (a < 0.) ? b * a : a;",ci=function(t,e,n){this.variableNames=["A","B"],this.outputShape=ao(e,n),this.userCode="\n      float binaryOperation(float a, float b) {\n        "+t+"\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    "},li="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n",hi=function(t,e,n,r){void 0===r&&(r=!1),this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.usesPackedTextures=!0,this.outputShape=ao(e,n);var o=this.outputShape.length,i="";if(r)if(0===o||1===E(this.outputShape))i="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else if(i="\n          "+Yo(o)+" coords = getOutputCoords();\n        ",1===o)i+="\n            result.y = (coords + 1) >= "+this.outputShape[0]+" ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ";else{var a=Lo("coords",o);i+="\n            bool nextRowOutOfBounds =\n              ("+a[o-2]+" + 1) >= "+this.outputShape[o-2]+";\n            bool nextColOutOfBounds =\n              ("+a[o-1]+" + 1) >= "+this.outputShape[o-1]+";\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          "}this.userCode="\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        "+t+"\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        "+i+"\n\n        setOutput(result);\n      }\n    "},fi=function(){function t(t){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),di=function(){function t(t){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t,this.userCode="\n      uniform float minVal;\n      uniform float maxVal;\n\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t,e){var n=this;return function(r,o){null==n.minLoc&&(n.minLoc=r.getUniformLocationNoThrow(o,"minVal"),n.maxLoc=r.getUniformLocationNoThrow(o,"maxVal")),r.gl.uniform1f(n.minLoc,t),r.gl.uniform1f(n.maxLoc,e)}},t}(),pi=function(t){this.variableNames=["real","imag"],this.outputShape=t,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "},vi=function(t){this.outputShape=[],this.outputShape=xn(t,1),this.variableNames=t.map((function(t,e){return"T"+e}));var e=new Array(t.length-1);e[0]=t[0][1];for(var n=1;n<e.length;n++)e[n]=e[n-1]+t[n][1];var r=["if (yC < "+e[0]+") setOutput(getT0(yR, yC));"];for(n=1;n<e.length;n++){var o=e[n-1];r.push("else if (yC < "+e[n]+") setOutput(getT"+n+"(yR, yC-"+o+"));")}var i=e.length,a=e[e.length-1];r.push("else setOutput(getT"+i+"(yR, yC-"+a+"));"),this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        "+r.join("\n        ")+"\n      }\n    "},mi=function(t,e){this.usesPackedTextures=!0,this.outputShape=[],this.outputShape=xn(t,e);var n=this.outputShape,r=n.length,o=Yo(r),i=Lo("coords",r),a=["x","y","z","w","u","v"].slice(0,r);this.variableNames=t.map((function(t,e){return"T"+e}));var s=new Array(t.length-1);s[0]=t[0][e];for(var u=1;u<s.length;u++)s[u]=s[u-1]+t[u][e];var c=a[e],l="vec2("+a.slice(-2).join()+")",h=a.join(),f="if ("+c+" < "+s[0]+")\n          return getChannel(getT0("+h+"), "+l+");";for(u=1;u<s.length;u++){var d=s[u-1];f+="\n        else if ("+c+" < "+s[u]+") {\n          "+c+" -= "+d+";\n          return getChannel(getT"+u+"("+h+"), "+l+");\n        }"}var p=s.length;f+="\n        else {\n          "+c+" -= "+s[s.length-1]+";\n          return getChannel(getT"+p+"("+h+"), "+l+");\n        }",this.userCode="\n      float getValue("+a.map((function(t){return"int "+t}))+") {\n        "+f+"\n      }\n\n      void main() {\n        "+o+" coords = getOutputCoords();\n        vec4 result = vec4(getValue("+i+"), 0., 0., 0.);\n        if (++"+i[r-1]+" < "+n[r-1]+") {\n          result.g = getValue("+i+");\n        }\n        if (++"+i[r-2]+" < "+n[r-2]+") {\n          result.a = getValue("+i+");\n        }\n        if ("+i[r-2]+" < "+n[r-2]+" &&\n            --"+i[r-1]+" < "+n[r-1]+") {\n          result.b = getValue("+i+");\n        }\n        setOutput(result);\n      }\n    "},gi=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i="channelsLast"===t.dataFormat;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              if ("+i+") {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},yi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i="channelsLast"===t.dataFormat,a=e-1-t.padInfo.top,s=n-1-t.padInfo.left,u=i?1:2,c=i?2:3,l=i?3:1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords["+l+"];\n\n        ivec2 dyCorner = ivec2(coords["+u+"], coords["+c+"]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n\n              if ("+i+") {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},xi=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.padInfo.front,i=t.padInfo.top,a=t.padInfo.left;this.userCode="\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yF = 0; yF < "+t.outDepth+"; yF++) {\n            int xF = wF + yF * "+e+" - "+o+";\n\n            if (xF < 0 || xF >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n              int xR = wR + yR * "+n+" - "+i+";\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n                int xC = wC + yC * "+r+" - "+a+";\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},bi=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterDepth,n=t.filterHeight,r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=e-1-t.padInfo.front,u=n-1-t.padInfo.top,c=r-1-t.padInfo.left;this.userCode="\n      const ivec3 pads = ivec3("+s+", "+u+", "+c+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+e+"; wF++) {\n          float dyF = float(dyFCorner + wF) / "+o+".0;\n\n          if (dyF < 0.0 || dyF >= "+t.outDepth+".0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = "+e+" - 1 - wF;\n\n          for (int wR = 0; wR < "+n+"; wR++) {\n            float dyR = float(dyRCorner + wR) / "+i+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = "+n+" - 1 - wR;\n\n            for (int wC = 0; wC < "+r+"; wC++) {\n              float dyC = float(dyCCorner + wC) / "+a+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = "+r+" - 1 - wC;\n\n              for (int d2 = 0; d2 < "+t.outChannels+"; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},wi=function(t){this.variableNames=["x","dy"],this.outputShape=t.filterShape;var e=t.strideHeight,n=t.strideWidth,r=t.padInfo.top,o=t.padInfo.left,i=t.outChannels/t.inChannels;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * "+i+" + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < "+t.batchSize+"; b++) {\n          for (int yR = 0; yR < "+t.outHeight+"; yR++) {\n            int xR = wR + yR * "+e+" - "+r+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int yC = 0; yC < "+t.outWidth+"; yC++) {\n              int xC = wC + yC * "+n+" - "+o+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ci=function(t){this.variableNames=["dy","W"],this.outputShape=t.inShape;var e=t.filterHeight,n=t.filterWidth,r=t.strideHeight,o=t.strideWidth,i=e-1-t.padInfo.top,a=n-1-t.padInfo.left,s=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 pads = ivec2("+i+", "+a+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < "+e+"; wR++) {\n          float dyR = float(dyRCorner + wR) / "+r+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = "+e+" - 1 - wR;\n\n          for (int wC = 0; wC < "+n+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+o+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = "+n+" - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < "+s+"; dm++) {\n              int d2 = d1 * "+s+" + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ei=function(t,e,n,r){void 0===e&&(e=!1),void 0===n&&(n=null),void 0===r&&(r=!1),this.variableNames=["x","W"],this.outputShape=t.outShape;var o=t.padInfo.top,i=t.padInfo.left,a=t.strideHeight,s=t.strideWidth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterHeight,h=t.filterWidth,f=4*Math.floor(t.inChannels/4),d=t.inChannels%4,p="channelsLast"===t.dataFormat,v=p?1:2,m=p?2:3,g=p?3:1,y="",x="";n&&(y=r?"float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          "+n+"\n        }":"\n          float activation(float x) {\n            "+n+"\n          }\n        ",x="result = activation(result);");var b=e?"result += getBiasAtOutCoords();":"";e&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+y+"\n\n      const ivec2 strides = ivec2("+a+", "+s+");\n      const ivec2 pads = ivec2("+o+", "+i+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords["+g+"];\n\n        ivec2 xRCCorner =\n            ivec2(coords["+v+"], coords["+m+"]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+l+"; wR++) {\n          int xR = xRCorner + wR * "+u+";\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+h+"; wC++) {\n            int xC = xCCorner + wC * "+c+";\n\n            if (xC < 0 || xC >= "+t.inWidth+") {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < "+f+"; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if ("+p+") {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if ("+(1===d)+") {\n\n              if ("+p+") {\n                dotProd +=\n                    getX(batch, xR, xC, "+f+") *\n                    getW(wR, wC, "+f+", d2);\n              } else {\n                dotProd +=\n                    getX(batch, "+f+", xR, xC) *\n                    getW(wR, wC, "+f+", d2);\n              }\n\n            } else if ("+(2===d)+") {\n              vec2 wValues = vec2(\n                getW(wR, wC, "+f+", d2),\n                getW(wR, wC, "+f+" + 1, d2)\n              );\n\n              if ("+p+") {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, "+f+"),\n                  getX(batch, xR, xC, "+f+" + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, "+f+", xR, xC),\n                  getX(batch, "+f+" + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if ("+(3===d)+") {\n              vec3 wValues = vec3(\n                getW(wR, wC, "+f+", d2),\n                getW(wR, wC, "+f+" + 1, d2),\n                getW(wR, wC, "+f+" + 2, d2)\n              );\n\n              if ("+p+") {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, "+f+"),\n                  getX(batch, xR, xC, "+f+" + 1),\n                  getX(batch, xR, xC, "+f+" + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, "+f+", xR, xC),\n                  getX(batch, "+f+" + 1, xR, xC),\n                  getX(batch, "+f+" + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        "+b+"\n        "+x+"\n        setOutput(result);\n      }\n    "},Ri=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.padInfo.front,n=t.padInfo.top,r=t.padInfo.left,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.filterDepth,h=t.filterHeight,f=t.filterWidth,d=4*Math.floor(t.inChannels/4),p=t.inChannels%4;this.userCode="\n      const ivec3 strides = ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+e+", "+n+", "+r+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < "+l+"; wF++) {\n          int xF = xFCorner + wF * "+s+";\n\n          if (xF < 0 || xF >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+h+"; wR++) {\n            int xR = xRCorner + wR * "+u+";\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+f+"; wC++) {\n              int xC = xCCorner + wC * "+c+";\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < "+d+"; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if ("+(1===p)+") {\n                dotProd +=\n                  getX(batch, xF, xR, xC, "+d+") *\n                  getW(wF, wR, wC, "+d+", d2);\n              } else if ("+(2===p)+") {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, "+d+"),\n                  getX(batch, xF, xR, xC, "+d+" + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, "+d+", d2),\n                  getW(wF, wR, wC, "+d+" + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if ("+(3===p)+") {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, "+d+"),\n                  getX(batch, xF, xR, xC, "+d+" + 1),\n                  getX(batch, xF, xR, xC, "+d+" + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, "+d+", d2),\n                  getW(wF, wR, wC, "+d+" + 1, d2),\n                  getW(wF, wR, wC, "+d+" + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Ii=function(t){this.variableNames=["x","W"],this.outputShape=t.outShape;var e=t.inHeight,n=t.inWidth,r=t.padInfo.top,o=t.padInfo.left,i=t.strideHeight,a=t.strideWidth,s=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,l=t.filterWidth,h=t.outChannels/t.inChannels;this.userCode="\n      const ivec2 strides = ivec2("+i+", "+a+");\n      const ivec2 pads = ivec2("+r+", "+o+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / "+h+";\n        int q = d2 - d1 * "+h+";\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < "+c+"; wR++) {\n          int xR = xRCorner + wR * "+s+";\n\n          if (xR < 0 || xR >= "+e+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+l+"; wC++) {\n            int xC = xCCorner + wC * "+u+";\n\n            if (xC < 0 || xC >= "+n+") {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},Si=function(t){this.variableNames=["x","W"],this.usesPackedTextures=!0,this.outputShape=t.outShape;for(var e=t.inHeight,n=t.inWidth,r=t.padInfo.top,o=t.padInfo.left,i=t.strideHeight,a=t.strideWidth,s=t.dilationHeight,u=t.dilationWidth,c=t.filterHeight,l=t.filterWidth,h=l,f="int xR; int xC; int xCOffset;",d=0;d<c;d++)for(var p=0;p<l;p++)f+="\n          vec4 xTexelR"+d+"C"+2*p+" = vec4(0.);\n          vec4 wR"+d+"C"+p+" = vec4(0.);\n          vec4 xR"+d+"C"+p+" = vec4(0.);";for(d=0;d<c;d++)for(var v=0;v<h;v++){if(f+="\n          xR = xRCorner + "+d*s+";\n          xC = xCCorner + "+(p=2*v)*u+";\n        ",1===a){if(p<l&&(f+=o%2==1?"\n                xCOffset = xC + 1;\n                if(xR >= 0 && xR < "+e+" && xCOffset >= 0 && xCOffset < "+n+") {\n                  xTexelR"+d+"C"+p+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+d+"C"+p+" = vec4(0.);\n                }\n\n                xCOffset = xC + 1 - 2;\n                if(xR >= 0 && xR < "+e+" && xCOffset >= 0 && xCOffset < "+n+") {\n                  vec4 previous = getX(batch, xR, xCOffset, d1);\n                  xR"+d+"C"+p+" = vec4(previous.zw, xTexelR"+d+"C"+p+".xy);\n                } else {\n                  xR"+d+"C"+p+" = vec4(0, 0, xTexelR"+d+"C"+p+".xy);\n                }\n              ":"\n                if(xR >= 0 && xR < "+e+" && xC >= 0 && xC < "+n+") {\n                  xTexelR"+d+"C"+p+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+d+"C"+p+" = vec4(0.);\n                }\n\n                xR"+d+"C"+p+" = xTexelR"+d+"C"+p+";\n              ",p+1<l)){var m=o%2==0?g(u):u;u%2==0&&o%2==1||u%2!=0&&o%2!=1?(f+="\n                  xCOffset = xC + "+o%2+" + "+m+";\n\n                  if(xR >= 0 && xR < "+e+" &&\n                    xCOffset >= 0 && xCOffset < "+n+") {\n                    xTexelR"+d+"C"+(p+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n                ",u>1&&(f+="\n                    xCOffset -= 2;\n                    if(xR >= 0 && xR < "+e+" &&\n                      xCOffset >= 0 && xCOffset < "+n+") {\n                      xTexelR"+d+"C"+p+" = getX(batch, xR, xCOffset, d1);\n                    } else {\n                      xTexelR"+d+"C"+p+" = vec4(0.);\n                    }\n                  "),f+="\n                  xR"+d+"C"+(p+1)+" = vec4(\n                    xTexelR"+d+"C"+p+".zw, xTexelR"+d+"C"+(p+2)+".xy);\n                "):f+="\n                  xCOffset = xC + "+m+";\n\n                  if(xR >= 0 && xR < "+e+" &&\n                    xCOffset >= 0 && xCOffset < "+n+") {\n                    xTexelR"+d+"C"+(p+2)+" = getX(batch, xR, xCOffset, d1);\n                  }\n\n                  xR"+d+"C"+(p+1)+" = xTexelR"+d+"C"+(p+2)+";\n                "}}else p<l&&(f+="\n              if(xR >= 0 && xR < "+e+") {\n            ",o%2==1?(f+="\n                xCOffset = xC + 1 - "+a+";\n                if(xCOffset >= 0 && xCOffset < "+n+") {\n                  xTexelR"+d+"C"+p+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+d+"C"+p+" = vec4(0.);\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < "+n+") {\n                  xTexelR"+d+"C"+(p+2)+" = getX(batch, xR, xC + 1, d1);\n                } else {\n                  xTexelR"+d+"C"+(p+2)+" = vec4(0.);\n                }\n\n                xR"+d+"C"+p+" = vec4(\n                  xTexelR"+d+"C"+p+".zw, xTexelR"+d+"C"+(p+2)+".zw);\n              ",p+1<l&&(f+="\n                  vec4 final = vec4(0.);\n                  xCOffset = xC + 1 + "+a+";\n                  if(xCOffset >= 0 && xCOffset < "+n+") {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xR"+d+"C"+(p+1)+" = vec4(xTexelR"+d+"C"+(p+2)+".xy, final.xy);\n                ")):(f+="\n                if(xC >= 0 && xC < "+n+") {\n                  xTexelR"+d+"C"+p+" = getX(batch, xR, xC, d1);\n                } else {\n                  xTexelR"+d+"C"+p+" = vec4(0.);\n                }\n\n                xCOffset = xC + "+a+";\n                if(xCOffset >= 0 && xCOffset < "+n+") {\n                  xTexelR"+d+"C"+(p+2)+" = getX(batch, xR, xCOffset, d1);\n                } else {\n                  xTexelR"+d+"C"+(p+2)+" = vec4(0.);\n                }\n\n                xR"+d+"C"+p+" = vec4(\n                  xTexelR"+d+"C"+p+".xy, xTexelR"+d+"C"+(p+2)+".xy);\n              ",p+1<l&&(f+="\n                  xR"+d+"C"+(p+1)+" = vec4(\n                    xTexelR"+d+"C"+p+".zw, xTexelR"+d+"C"+(p+2)+".zw);\n                ")),f+="}");p<l&&(f+="\n            vec4 wTexelR"+d+"C"+p+" = getW("+d+", "+p+", d1, q);\n            wR"+d+"C"+p+" = vec4(wTexelR"+d+"C"+p+".xz, wTexelR"+d+"C"+p+".xz);\n          ",p+1<l&&(f+="\n              vec4 wTexelR"+d+"C"+(p+1)+" = getW("+d+", "+(p+1)+", d1, q);\n              wR"+d+"C"+(p+1)+" =\n                vec4(wTexelR"+d+"C"+(p+1)+".xz, wTexelR"+d+"C"+(p+1)+".xz);"))}for(d=0;d<c;d++)for(p=0;p<l;p++)f+="result += xR"+d+"C"+p+" * wR"+d+"C"+p+";";this.userCode="\n      const ivec2 strides = ivec2("+i+", "+a+");\n      const ivec2 pads = ivec2("+r+", "+o+");\n\n      void main() {\n\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2;\n        int q = 0;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        vec4 result = vec4(0.);\n\n        "+f+"\n\n        setOutput(result);\n      }\n    "},ki=function(t,e,n,r,o){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];var i=t[0],a=t[1],s=t[2],u=t[3],c=e[0],l=n[0],h=n[1];this.outputShape=[c,l,h,u];var f="bilinear"===r?1:0,d=[a-1+".0",s-1+".0"],p=d[0],v=d[1],m=l>1?[""+(a-1)/(l-1),"(y2-y1) * height_ratio","y1*"+p+" + float(y)*(height_scale)"]:["0.0","0.0","0.5 * (y1+y2) * "+p],g=m[0],y=m[1],x=m[2],b=h>1?[""+(s-1)/(h-1),"(x2-x1) * width_ratio","x1*"+v+" + float(x)*(width_scale)"]:["0.0","0.0","0.5 * (x1+x2) * "+v],w=b[0],C=b[1],E=b[2];this.userCode="\n      const float height_ratio = float("+g+");\n      const float width_ratio = float("+w+");\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= "+i+") {\n          return;\n        }\n\n        float height_scale = "+y+";\n        float width_scale = "+C+";\n\n        float in_y = "+x+";\n        if( in_y < 0.0 || in_y > "+p+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n        float in_x = "+E+";\n        if( in_x < 0.0 || in_x > "+v+" ) {\n          setOutput(float("+o+"));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if("+f+" == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    "},Ai=function(t,e,n){this.variableNames=["x"],this.outputShape=t;var r=t.length,o=t[t.length-1],i=n?"<":">";this.userCode="\n      int getIndex(int i) {\n        "+(n?"return "+o+" -i - 1;":"return i;")+"\n      }\n\n      void main() {\n        "+Yo(r)+" coords = getOutputCoords();\n        int end = "+Ni(r,"coords")+";\n        float val = 0.0;\n        for (int i = "+o+" - 1; i >= 0; i -= 1) {\n          int idx = getIndex(i);\n          if (idx "+i+" end) {\n            continue;\n          }\n          if (idx == end && "+e+") {\n            continue;\n          }\n          "+Ni(r,"coords")+" = idx;\n          val += getX("+function(t,e){if(1===t)return""+e;if(2===t)return e+".x, "+e+".y";if(3===t)return e+".x, "+e+".y, "+e+".z";if(4===t)return e+".x, "+e+".y, "+e+".z, "+e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}(r,"coords")+");\n        }\n        setOutput(val);\n      }\n    "};function Ni(t,e){if(1===t)return""+e;if(2===t)return e+".y";if(3===t)return e+".z";if(4===t)return e+".w";throw Error("Cumulative sum for rank "+t+" is not yet supported")}var Ti=function(t,e){this.variableNames=["A"];var n=Wo();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Uo(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        "+n.output+" = result;\n      }\n    "},Di=function(t,e){this.variableNames=["A"],this.usesPackedTextures=!0;var n=Wo();this.outputShape=t,this.userCode="\n      ivec3 outCoordsFromFlatIndex(int index) {\n        "+Uo(["r","c","d"],t)+"\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n          vec2("+e[0]+", "+e[1]+"));\n        int index = 4 * (resTexRC.x * "+e[1]+" + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        "+n.output+" = result;\n      }\n    "},_i=function(){function t(t,e,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=t,this.blockSize=e,this.dataFormat=n,this.userCode="\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = "+this.getHeightCoordString()+";\n      int w = "+this.getWidthCoordString()+";\n      int d = "+this.getDepthCoordString()+";\n\n      int in_h = h / "+e+";\n      int offset_h = imod(h, "+e+");\n      int in_w = w / "+e+";\n      int offset_w = imod(w, "+e+");\n      int offset_d = (offset_h * "+e+" + offset_w) *\n        "+this.getOutputDepthSize()+";\n      int in_d = d + offset_d;\n\n      float result = "+this.getInputSamplingString()+";\n      setOutput(result);\n    }\n  "}return t.prototype.getHeightCoordString=function(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"},t.prototype.getWidthCoordString=function(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"},t.prototype.getDepthCoordString=function(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"},t.prototype.getOutputDepthSize=function(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]},t.prototype.getInputSamplingString=function(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"},t}(),Oi=function(t){this.variableNames=["X"],this.outputShape=[t,t],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "},Mi=function(t){this.variableNames=["A"];var e=Wo();this.outputShape=t,this.userCode="\n      "+zo+"\n\n      void main() {\n        float x = getAAtOutCoords();\n        "+e.output+" = encode_float(x);\n      }\n    "},Fi=function(t){this.variableNames=["A"],this.usesPackedTextures=!0;var e=Wo();this.outputShape=t,this.userCode="\n      "+zo+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        "+e.output+" = encode_float(x);\n      }\n    "},Bi=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"];var r=Wo(),o=e[0],i=e[1];this.outputShape=t;var a="result";n&&(a="floor(result * 255. + 0.5)"),this.userCode="\n      "+Vo(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n        \n        int r = flatIndex / "+i+";\n        int c = imod(flatIndex, "+i+");\n        vec2 uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n        vec4 values = "+r.texture2D+"(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        "+r.output+" = vec4("+a+", 0., 0., 0.);\n      }\n    "},Pi=function(t,e,n){void 0===n&&(n=!1),this.variableNames=["A"];var r=Wo(),o=e[0],i=e[1];this.outputShape=t;var a="",s="result";n&&(s="floor(result * 255. + 0.5)");for(var u=0;u<=1;u++)for(var c=0;c<=1;c++){var l=2*u+c;a+="\n          localCoords = coords;\n          if(localCoords[2] + "+c+" < "+t[2]+") {\n            localCoords[2] += "+c+";\n            if(localCoords[1] + "+u+" < "+t[1]+") {\n              localCoords[1] += "+u+";\n\n              flatIndex = getFlatIndex(localCoords);\n              offset = imod(flatIndex, 4);\n    \n              flatIndex = idiv(flatIndex, 4, 1.);\n\n              r = flatIndex / "+i+";\n              c = imod(flatIndex, "+i+");\n              uv = (vec2(c, r) + halfCR) / vec2("+i+".0, "+o+".0);\n              values = "+r.texture2D+"(A, uv);\n\n              if(offset == 0) {\n                result["+l+"] = values[0];\n              } else if(offset == 1) {\n                result["+l+"] = values[1];\n              } else if(offset == 2) {\n                result["+l+"] = values[2];\n              } else {\n                result["+l+"] = values[3];\n              }\n            }\n          }\n        "}this.userCode="\n      "+Vo(t)+"\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        vec4 result = vec4(0.);\n        int flatIndex, r, c, offset;\n        ivec3 localCoords;\n        vec2 uv;\n        vec4 values;\n        \n        "+a+"\n\n        "+r.output+" = "+s+";\n      }\n    "},Li=function(t,e,n){this.variableNames=["real","imag"];var r=e[1];this.outputShape=e;var o=n?"2.0 * "+Math.PI:"-2.0 * "+Math.PI,i=n?r+".0":"1.0";this.userCode="\n      const float exponentMultiplier = "+o+";\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        "+t+"\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float("+r+");\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < "+r+"; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / "+i+";\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    "},Wi=function(){function t(t,e){this.outputShape=[],this.variableNames=["x"],this.outputShape=t,this.userCode="\n      uniform float value;\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.valueLoc&&(e.valueLoc=n.getUniformLocationNoThrow(r,"value")),n.gl.uniform1f(e.valueLoc,t)}},t}(),Ui=function(t){this.variableNames=["A"];var e=Wo(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+n+".0);\n\n        vec4 values = "+e.texture2D+"(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    "},Vi=function(t){this.variableNames=["A"];var e=Wo(),n=t[0],r=t[1];this.outputShape=t,this.userCode="\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) / vec2("+r+".0, "+n+".0);\n            vec4 values = "+e.texture2D+"(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        "+e.output+" = result;\n      }\n    "},zi=function(t,e,n){this.variableNames=["A","indices"];var r=t.slice();r[n]=e,this.outputShape=r,this.rank=r.length;var o=Yo(this.rank),i=function(t,e){var n=t.length;if(n>4)throw Error("Gather for rank "+n+" is not yet supported");if(1===n)return"int(getIndices(resRC))";for(var r=["resRC.x","resRC.y","resRC.z","resRC.w"],o=[],i=0;i<t.length;i++)i===e?o.push("int(getIndices("+r[i]+"))"):o.push(""+r[i]);return o.join()}(t,n);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},Gi=function(t,e,n){this.sliceDim=t,this.strides=e,this.variableNames=["x","indices"],this.outputShape=n;var r=Yo(e.length),o=Yo(n.length),i=this.sliceDim>1?"strides[j]":"strides";this.userCode="\n        "+r+" strides = "+r+"("+this.strides+");\n         void main() {\n          "+o+" coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < "+this.sliceDim+"; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * "+i+";\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      "};function Hi(t,e){var n=Wo();return Jt(t,e,n.version+"\n    precision highp float;\n    "+n.attribute+" vec3 clipSpacePos;\n    "+n.attribute+" vec2 uv;\n    "+n.varyingVs+" vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }")}function qi(t,e){return ae(t,e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function $i(t,e){return se(t,e,new Uint16Array([0,1,2,2,1,3]))}function ji(t,e,n,r,o,i,a){ce(n,r);var s=ue(t,e),u=t.TEXTURE_2D;return $t(t,e,(function(){return t.bindTexture(u,s)})),$t(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_S,t.CLAMP_TO_EDGE)})),$t(t,e,(function(){return t.texParameteri(u,t.TEXTURE_WRAP_T,t.CLAMP_TO_EDGE)})),$t(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MIN_FILTER,t.NEAREST)})),$t(t,e,(function(){return t.texParameteri(u,t.TEXTURE_MAG_FILTER,t.NEAREST)})),$t(t,e,(function(){return t.texImage2D(u,0,o,n,r,0,i,a,null)})),$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)})),s}function Ki(t,e,n,r,o){var i=zt(n,r);return ji(t,e,i[0],i[1],o.internalFormatFloat,o.textureFormatFloat,t.FLOAT)}function Xi(t,e,n,r,o){var i=zt(n,r);return ji(t,e,i[0],i[1],o.internalFormatHalfFloat,o.textureFormatFloat,o.textureTypeHalfFloat)}function Yi(t,e,n,r,o){var i=zt(n,r);return ji(t,e,i[0],i[1],t.RGBA,t.RGBA,t.UNSIGNED_BYTE)}function Qi(t,e,n,r,o){var i=Ht(n,r);return ji(t,e,i[0],i[1],o.internalFormatPackedFloat,t.RGBA,t.FLOAT)}function Ji(t,e,n,r,o){var i=Ht(n,r);return ji(t,e,i[0],i[1],o.internalFormatPackedHalfFloat,t.RGBA,o.textureTypeHalfFloat)}function Zi(t,e,n,r){return $t(t,e,(function(){return t.bindBuffer(t.ARRAY_BUFFER,r)})),he(t,e,n,"clipSpacePos",r,3,20,0)&&he(t,e,n,"uv",r,2,20,12)}function ta(t,e,n,r,o,i,a){var s,u,c;$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),i instanceof Uint8Array?(s=new Uint8Array(r*o*4),u=t.UNSIGNED_BYTE,c=t.RGBA):(s=new Float32Array(r*o*4),u=t.FLOAT,c=a.internalFormatPackedFloat),s.set(i),$t(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,c,r,o,0,t.RGBA,u,s)})),$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function ea(t,e,n,r){$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,n)})),r.data instanceof Uint8Array?$t(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,r.width,r.height,0,t.RGBA,t.UNSIGNED_BYTE,r.data)})):$t(t,e,(function(){return t.texImage2D(t.TEXTURE_2D,0,t.RGBA,t.RGBA,t.UNSIGNED_BYTE,r)})),$t(t,e,(function(){return t.bindTexture(t.TEXTURE_2D,null)}))}function na(t,e,n,r,o){var i=t.createBuffer();$t(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,i)}));var a=16*n*r;return $t(t,e,(function(){return t.bufferData(t.PIXEL_PACK_BUFFER,a,t.STREAM_READ)})),$t(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,0)})),$t(t,e,(function(){return t.bindBuffer(t.PIXEL_PACK_BUFFER,null)})),i}function ra(t,e,n){var r=t,o=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,e),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,o),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),o}function oa(t,e,n,r,o){var i=zt(n,r),a=i[0],s=i[1],u=new Uint8Array(n*r*4);return $t(t,e,(function(){return t.readPixels(0,0,a,s,o.downloadTextureFormat,t.UNSIGNED_BYTE,u)})),new Float32Array(u.buffer)}function ia(t,e,n,r,o,i,a,s){var u=t,c=new Float32Array(function(t,e){var n=Ht(t,e);return n[0]*n[1]*4}(i,a));return u.bindBuffer(u.PIXEL_PACK_BUFFER,e),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,c),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),c}function aa(t,e,n,r){var o=new Float32Array(n*r*4);return $t(t,e,(function(){return t.readPixels(0,0,r,n,t.RGBA,t.FLOAT,o)})),o}var sa=Object.freeze({createVertexShader:Hi,createVertexBuffer:qi,createIndexBuffer:$i,createFloat32MatrixTexture:Ki,createFloat16MatrixTexture:Xi,createUnsignedBytesMatrixTexture:Yi,createPackedMatrixTexture:Qi,createFloat16PackedMatrixTexture:Ji,bindVertexProgramAttributeStreams:Zi,uploadDenseMatrixToTexture:ta,uploadPixelDataToTexture:ea,createBufferFromOutputTexture:na,downloadFloat32MatrixFromBuffer:ra,downloadByteEncodedFloatMatrixFromOutputTexture:oa,downloadPackedMatrixFromBuffer:ia,downloadMatrixFromPackedOutputTexture:aa}),ua=function(){function t(t){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];var e=f.getNumber("WEBGL_VERSION");if(null!=t?(this.gl=t,Wt(e,t)):this.gl=Ut(e),1===f.getNumber("WEBGL_VERSION"))this.textureFloatExtension=Qt(this.gl,this.debug,"OES_texture_float"),this.colorBufferFloatExtension=this.gl.getExtension("WEBGL_color_buffer_float"),this.textureHalfFloatExtension=Qt(this.gl,this.debug,"OES_texture_half_float"),this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float");else if(De(this.gl,"EXT_color_buffer_float"))this.colorBufferFloatExtension=this.gl.getExtension("EXT_color_buffer_float");else{if(!De(this.gl,"EXT_color_buffer_half_float"))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension("EXT_color_buffer_half_float")}this.vertexBuffer=qi(this.gl,this.debug),this.indexBuffer=$i(this.gl,this.debug),this.framebuffer=le(this.gl,this.debug),this.textureConfig=qt(this.gl,this.textureHalfFloatExtension)}return Object.defineProperty(t.prototype,"debug",{get:function(){return f.getBool("DEBUG")},enumerable:!0,configurable:!0}),t.prototype.dispose=function(){var t=this;if(!this.disposed){null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");var e=this.gl;$t(e,this.debug,(function(){return e.finish()})),$t(e,this.debug,(function(){return e.bindFramebuffer(e.FRAMEBUFFER,null)})),$t(e,this.debug,(function(){return e.deleteFramebuffer(t.framebuffer)})),$t(e,this.debug,(function(){return e.bindBuffer(e.ARRAY_BUFFER,null)})),$t(e,this.debug,(function(){return e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)})),$t(e,this.debug,(function(){return e.deleteBuffer(t.indexBuffer)})),this.disposed=!0}},t.prototype.createFloat32MatrixTexture=function(t,e){return this.throwIfDisposed(),Ki(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createFloat16MatrixTexture=function(t,e){return this.throwIfDisposed(),Xi(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createUnsignedBytesMatrixTexture=function(t,e){return this.throwIfDisposed(),Yi(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.uploadPixelDataToTexture=function(t,e){this.throwIfDisposed(),ea(this.gl,this.debug,t,e)},t.prototype.uploadDenseMatrixToTexture=function(t,e,n,r){this.throwIfDisposed(),ta(this.gl,this.debug,t,e,n,r,this.textureConfig)},t.prototype.createFloat16PackedMatrixTexture=function(t,e){return this.throwIfDisposed(),Ji(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.createPackedMatrixTexture=function(t,e){return this.throwIfDisposed(),Qi(this.gl,this.debug,t,e,this.textureConfig)},t.prototype.deleteMatrixTexture=function(t){var e=this;this.throwIfDisposed(),this.outputTexture===t&&(ge(this.gl,this.debug,this.framebuffer),this.outputTexture=null),$t(this.gl,this.debug,(function(){return e.gl.deleteTexture(t)}))},t.prototype.downloadByteEncodedFloatMatrixFromOutputTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return oa(r.gl,r.debug,e,n,r.textureConfig)}))},t.prototype.downloadPackedMatrixFromBuffer=function(t,e,n,r,o,i){return ia(this.gl,t,0,0,0,o,i,this.textureConfig)},t.prototype.downloadFloat32MatrixFromBuffer=function(t,e){return ra(this.gl,t,e)},t.prototype.createBufferFromTexture=function(t,e,n){this.bindTextureToFrameBuffer(t);var r=na(this.gl,this.debug,e,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r},t.prototype.createAndWaitForFence=function(){var t=this.createFence(this.gl);return this.pollFence(t)},t.prototype.createFence=function(t){var e,n,r=this;if(f.getBool("WEBGL_FENCE_API_ENABLED")){var o=t,i=o.fenceSync(o.SYNC_GPU_COMMANDS_COMPLETE,0);t.flush(),n=function(){var t=o.clientWaitSync(i,0,0);return t===o.ALREADY_SIGNALED||t===o.CONDITION_SATISFIED},e=i}else f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(e=this.beginQuery(),this.endQuery(),n=function(){return r.isQueryAvailable(e,f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}):n=function(){return!0};return{query:e,isFencePassed:n}},t.prototype.downloadMatrixFromPackedTexture=function(t,e,n){var r=this;return this.downloadMatrixDriver(t,(function(){return aa(r.gl,r.debug,e,n)}))},t.prototype.createProgram=function(t){this.throwIfDisposed();var e=this.gl,n=Zt(e,this.debug,t),r=Hi(e,this.debug),o=re(e,this.debug);return $t(e,this.debug,(function(){return e.attachShader(o,r)})),$t(e,this.debug,(function(){return e.attachShader(o,n)})),oe(e,this.debug,o),this.debug&&ie(e,this.debug,o),this.vertexAttrsAreBound||(this.setProgram(o),this.vertexAttrsAreBound=Zi(e,this.debug,this.program,this.vertexBuffer)),o},t.prototype.deleteProgram=function(t){var e=this;this.throwIfDisposed(),t===this.program&&(this.program=null),null!=t&&$t(this.gl,this.debug,(function(){return e.gl.deleteProgram(t)}))},t.prototype.setProgram=function(t){var e=this;this.throwIfDisposed(),this.program=t,null!=this.program&&this.debug&&ie(this.gl,this.debug,this.program),$t(this.gl,this.debug,(function(){return e.gl.useProgram(t)}))},t.prototype.getUniformLocation=function(t,e,n){return void 0===n&&(n=!0),this.throwIfDisposed(),n?de(this.gl,this.debug,t,e):pe(this.gl,t,e)},t.prototype.getAttributeLocation=function(t,e){var n=this;return this.throwIfDisposed(),$t(this.gl,this.debug,(function(){return n.gl.getAttribLocation(t,e)}))},t.prototype.getUniformLocationNoThrow=function(t,e){return this.throwIfDisposed(),this.gl.getUniformLocation(t,e)},t.prototype.setInputMatrixTexture=function(t,e,n){this.throwIfDisposed(),this.throwIfNoProgram(),ve(this.gl,this.debug,this.program,t,e,n)},t.prototype.setOutputMatrixTexture=function(t,e,n){this.setOutputMatrixTextureDriver(t,n,e)},t.prototype.setOutputPackedMatrixTexture=function(t,e,n){this.throwIfDisposed();var r=Ht(e,n),o=r[0],i=r[1];this.setOutputMatrixTextureDriver(t,o,i)},t.prototype.setOutputMatrixWriteRegion=function(t,e,n,r){this.setOutputMatrixWriteRegionDriver(n,t,r,e)},t.prototype.setOutputPackedMatrixWriteRegion=function(t,e,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")},t.prototype.debugValidate=function(){null!=this.program&&ie(this.gl,this.debug,this.program),ye(this.gl)},t.prototype.executeProgram=function(){this.throwIfDisposed(),this.throwIfNoProgram();var t=this.gl;this.debug&&this.debugValidate(),$t(t,this.debug,(function(){return t.drawElements(t.TRIANGLES,6,t.UNSIGNED_SHORT,0)}))},t.prototype.blockUntilAllProgramsCompleted=function(){var t=this;this.throwIfDisposed(),$t(this.gl,this.debug,(function(){return t.gl.finish()}))},t.prototype.getQueryTimerExtension=function(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=Qt(this.gl,this.debug,2===f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension},t.prototype.getQueryTimerExtensionWebGL2=function(){return this.getQueryTimerExtension()},t.prototype.getQueryTimerExtensionWebGL1=function(){return this.getQueryTimerExtension()},t.prototype.beginQuery=function(){if(2===f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.gl,e=this.getQueryTimerExtensionWebGL2(),n=t.createQuery();return t.beginQuery(e.TIME_ELAPSED_EXT,n),n}var r=this.getQueryTimerExtensionWebGL1(),o=r.createQueryEXT();return r.beginQueryEXT(r.TIME_ELAPSED_EXT,o),o},t.prototype.endQuery=function(){if(2!==f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){var t=this.getQueryTimerExtensionWebGL1();t.endQueryEXT(t.TIME_ELAPSED_EXT)}else{var e=this.gl,n=this.getQueryTimerExtensionWebGL2();e.endQuery(n.TIME_ELAPSED_EXT)}},t.prototype.waitForQueryAndGetTime=function(t){return u(this,void 0,void 0,(function(){var e=this;return c(this,(function(n){switch(n.label){case 0:return[4,N((function(){return e.disposed||e.isQueryAvailable(t,f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}))];case 1:return n.sent(),[2,this.getQueryTime(t,f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))]}}))}))},t.prototype.getQueryTime=function(t,e){if(0===e)return null;if(2===e){var n=this.gl;return n.getQueryParameter(t,n.QUERY_RESULT)/1e6}var r=this.getQueryTimerExtensionWebGL1();return r.getQueryObjectEXT(t,r.QUERY_RESULT_EXT)/1e6},t.prototype.isQueryAvailable=function(t,e){if(0===e)return!0;if(2===e){var n=this.gl,r=this.getQueryTimerExtensionWebGL2(),o=n.getQueryParameter(t,n.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint}return o=(r=this.getQueryTimerExtensionWebGL1()).getQueryObjectEXT(t,r.QUERY_RESULT_AVAILABLE_EXT),null==this.disjoint&&(this.disjoint=this.gl.getParameter(r.GPU_DISJOINT_EXT)),o&&!this.disjoint},t.prototype.pollFence=function(t){var e=this;return new Promise((function(n){e.addItemToPoll((function(){return t.isFencePassed()}),(function(){return n()}))}))},t.prototype.pollItems=function(){for(var t=function(t){for(var e=0;e<t.length;++e){if(!t[e]())break}return e-1}(this.itemsToPoll.map((function(t){return t.isDoneFn}))),e=0;e<=t;++e)(0,this.itemsToPoll[e].resolveFn)();this.itemsToPoll=this.itemsToPoll.slice(t+1)},t.prototype.addItemToPoll=function(t,e){var n=this;this.itemsToPoll.push({isDoneFn:t,resolveFn:e}),this.itemsToPoll.length>1||N((function(){return n.pollItems(),0===n.itemsToPoll.length}))},t.prototype.bindTextureToFrameBuffer=function(t){this.throwIfDisposed(),me(this.gl,this.debug,t,this.framebuffer),this.debug&&ye(this.gl)},t.prototype.unbindTextureToFrameBuffer=function(){null!=this.outputTexture?(me(this.gl,this.debug,this.outputTexture,this.framebuffer),this.debug&&ye(this.gl)):ge(this.gl,this.debug,this.framebuffer)},t.prototype.downloadMatrixDriver=function(t,e){this.bindTextureToFrameBuffer(t);var n=e();return this.unbindTextureToFrameBuffer(),n},t.prototype.setOutputMatrixTextureDriver=function(t,e,n){this.throwIfDisposed();var r=this.gl;me(r,this.debug,t,this.framebuffer),this.debug&&ye(r),this.outputTexture=t,$t(r,this.debug,(function(){return r.viewport(0,0,e,n)})),$t(r,this.debug,(function(){return r.scissor(0,0,e,n)}))},t.prototype.setOutputMatrixWriteRegionDriver=function(t,e,n,r){var o=this;this.throwIfDisposed(),$t(this.gl,this.debug,(function(){return o.gl.scissor(t,e,n,r)}))},t.prototype.throwIfDisposed=function(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")},t.prototype.throwIfNoProgram=function(){if(null==this.program)throw new Error("No GPU program is currently set.")},t}();function ca(t,e){if(t.length!==e.length)throw Error("Binary was compiled with "+t.length+" inputs, but was executed with "+e.length+" inputs");t.forEach((function(t,n){var r=t.logicalShape,o=e[n],i=o.shape;if(!R(r,i))throw Error("Binary was compiled with different shapes than the current args. Shapes "+r+" and "+i+" must match");if(!t.isUniform||!o.isUniform){var a=t.texShape,s=o.isUniform?null:o.texData.texShape;if(!R(a,s))throw Error("Binary was compiled with different texture shapes than the current args. Shape "+a+" and "+s+" must match")}}))}var la=function(t,e,n){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t;for(var r=n.filterWidth,o=n.inChannels,i=n.strideWidth,a=n.strideHeight,s=n.padInfo,u=n.outWidth,c=n.dilationWidth,l=n.dilationHeight,h=n.dataFormat,f=s.left,d=s.top,p=o*r,v=Wo(),m="channelsLast"===h,g=m?0:1,y=m?1:2,x="",b=0;b<=1;b++)for(var w=0;w<=1;w++)x+="\n          blockIndex = rc.y + "+w+";\n          pos = rc.x + "+b+";\n\n          if(blockIndex < "+t[1]+" && pos < "+t[0]+") {\n            offsetY = int(blockIndex / ("+u+")) * "+a+" - "+d+";\n            d0 = offsetY + "+l+" * (pos / "+p+");\n\n            if(d0 < "+e[g]+" && d0 >= 0) {\n\n              offsetX = int(mod(float(blockIndex), "+u+".) * "+i+". - "+f+".);\n              d1 = offsetX + "+c+" * (int(mod(float(pos), "+p+".) / "+o+".));\n\n              if(d1 < "+e[y]+" && d1 >= 0) {\n\n                ch = int(mod(float(pos), "+o+".));\n\n                if ("+m+") {\n                  innerDims = vec2(d1, ch);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result["+(2*b+w)+"] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        ";this.userCode="\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        "+x+"\n\n        "+v.output+" = result;\n      }\n    "},ha=function(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[];var i,a=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";i=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -"+a+"; j <= "+a+"; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  "+s+") {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * "+i+";\n        setOutput(val);\n      }\n    "},fa=function(t,e,n,r,o){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=t,this.depth=t[3],this.depthRadius=e,this.bias=n,this.alpha=r,this.beta=o,this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < "+this.depth+"; ++d) {\n          int depthBegin = int(max(0.0, float(d - "+e+")));\n          int depthEnd = int(min(float("+this.depth+"),\n              float(d + "+e+" + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = "+this.depth+";\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float("+r+") * norm + float("+n+");\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float("+r+")\n                * float("+o+")\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * "+o+");\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    "},da=function(t,e,n,r,o){this.variableNames=["x"],this.outputShape=[],this.usesPackedTextures=!0;var i,a=e,s=t[3]-1;this.outputShape=t;var u="float("+n+") + float("+r+") * sum";i=.5===o?"inversesqrt("+u+")":1===o?"1.0/("+u+")":"exp(log("+u+") * float(-"+o+"));",this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < "+this.outputShape[3]+";\n        bool hasNextRow = c < "+this.outputShape[2]+";\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - "+a+";\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - "+a+"; j <= "+a+"; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2("+s+"));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * "+i+";\n        setOutput(result);\n      }\n    "},pa=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideHeight,n=t.strideWidth,r=t.dilationHeight,o=t.effectiveFilterHeight,i=t.effectiveFilterWidth,a=o-1-t.padInfo.top,s=i-1-t.padInfo.left,u=o*i-1;this.userCode="\n      const ivec2 pads = ivec2("+a+", "+s+");\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < "+o+";\n          wR += "+r+") {\n          float dyR = float(dyRCorner + wR) / "+e+".0;\n\n          if (dyR < 0.0 || dyR >= "+t.outHeight+".0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < "+i+"; wC++) {\n            float dyC = float(dyCCorner + wC) / "+n+".0;\n\n            if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = "+u+" - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * "+i+" + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},va=function(t){this.variableNames=["dy","maxPos"],this.outputShape=t.inShape;var e=t.strideDepth,n=t.strideHeight,r=t.strideWidth,o=t.dilationDepth,i=t.dilationHeight,a=t.dilationWidth,s=t.effectiveFilterDepth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=s-1-t.padInfo.front,h=u-1-t.padInfo.top,f=c-1-t.padInfo.left,d=s*u*c-1;this.userCode="\n      const ivec3 pads = ivec3("+l+", "+h+", "+f+");\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < "+s+";\n           wD += "+o+") {\n          float dyD = float(dyDCorner + wD) / "+e+".0;\n\n          if (dyD < 0.0 || dyD >= "+t.outDepth+".0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+i+") {\n            float dyR = float(dyRCorner + wR) / "+n+".0;\n\n            if (dyR < 0.0 || dyR >= "+t.outHeight+".0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+a+") {\n              float dyC = float(dyCCorner + wC) / "+r+".0;\n\n              if (dyC < 0.0 || dyC >= "+t.outWidth+".0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = "+d+" -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * "+u+" * "+c+" +\n                  wR * "+c+" + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    "},ma=function(t,e,n,r,o,i,a){void 0===n&&(n=!1),void 0===r&&(r=!1),void 0===o&&(o=!1),void 0===i&&(i=null),void 0===a&&(a=!1),this.variableNames=["matrixA","matrixB"],this.usesPackedTextures=!0,this.outputShape=e;var s=n?t[1]:t[2],u=Math.ceil(s/2),c=n?"i * 2, rc.y":"rc.y, i * 2",l=r?"rc.z, i * 2":"i * 2, rc.z",h=n?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=r?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"],d="",p="";i&&(d=a?"vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          "+i+"\n        }":"vec4 activation(vec4 x) {\n          "+i+"\n        }",p="result = activation(result);");var v=o?"result += getBiasAtOutCoords();":"";o&&this.variableNames.push("bias"),a&&this.variableNames.push("preluActivationWeights"),this.userCode="\n      "+d+"\n\n      const float sharedDimension = "+u+".0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < "+u+"; i++) {\n          vec4 a = getMatrixA(rc.x, "+c+");\n          vec4 b = getMatrixB(rc.x, "+l+");\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += ("+h[0]+" * "+f[0]+");\n          result += ("+h[1]+" * "+f[1]+");\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        "+v+"\n\n        "+p+"\n\n        setOutput(result);\n      }\n    "},ga=function(){function t(t,e,n){this.variableNames=["probs"],this.outputShape=[t,n],this.userCode="\n      uniform float seed;\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < "+(e-1)+"; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float("+(e-1)+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;return function(n,r){null==e.seedLoc&&(e.seedLoc=n.getUniformLocation(r,"seed")),n.gl.uniform1f(e.seedLoc,t)}},t}(),ya=function(t,e,n,r){this.variableNames=["indices"],this.outputShape=[t,e],this.userCode="\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float("+r+"), float("+n+"),\n                      float(index == coords.y)));\n      }\n    "},xa=function(t){this.variableNames=["A"],this.outputShape=t;var e=t.length;if(0===e)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{var n=Lo("rc",e),r=Yo(e),o=function(t,e,n){if(1===t)return"rc > "+e[0];for(var r="",o=t-2;o<t;o++)r+=n[o]+" >= "+e[o],o<t-1&&(r+="||");return r}(e,t,n),i=function(t,e,n,r){if(1===t)return"";var o=r.slice(-2);return"\n    int r = "+o[0]+";\n    int c = "+o[1]+";\n    int rp1 = r + 1;\n    int cp1 = c + 1;\n\n    bool cEdge = cp1 >= "+e+";\n    bool rEdge = rp1 >= "+n+";\n  "}(e,t[t.length-1],t[t.length-2],n),a=function(t,e){var n=t.length,r=function(t,e){for(var n=[],r=0;r<=1;r++)for(var o=0;o<=1;o++){for(var i=(0===r?"r":"rp1")+", "+(0===o?"c":"cp1"),a=2;a<t;a++)i=e[e.length-1-a]+","+i;n.push(i)}return n}(n,e);return 1===n?"getA(rc),\n            rc + 1 >= "+t[0]+" ? 0. : getA(rc + 1),\n            0, 0":"getA("+r[0]+"),\n          cEdge ? 0. : getA("+r[1]+"),\n          rEdge ? 0. : getA("+r[2]+"),\n          rEdge || cEdge ? 0. : getA("+r[3]+")"}(t,n);this.userCode="\n        void main() {\n          "+r+" rc = getOutputCoords();\n\n          if("+o+") {\n            setOutput(vec4(0));\n          } else {\n            "+i+"\n\n            setOutput(vec4("+a+"));\n          }\n        }\n      "}},ba=function(t,e,n){this.variableNames=["x"],this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));var r=t.length,o=Yo(r),i=e.map((function(t){return t[0]})).join(","),a=e.map((function(e,n){return e[0]+t[n]})).join(","),s=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?"\n      "+o+" start = "+o+"("+i+");\n      "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(float("+n+"));\n        } else {\n          "+o+" coords = outC - start;\n          setOutput(getX("+s+"));\n        }\n      }\n    ":"\n        int start = "+i+";\n        int end = "+a+";\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(float("+n+"));\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      "},wa=function(t,e,n){this.variableNames=["x"],this.usesPackedTextures=!0,this.outputShape=e.map((function(e,n){return e[0]+t[n]+e[1]}));for(var r=t.length,o=Yo(r),i=e.map((function(t){return t[0]})).join(","),a=e.map((function(e,n){return e[0]+t[n]})).join(","),s=Lo("rc",r),u=Lo("source",r),c=s[r-1]+" < "+this.outputShape[r-1],l=1===r?"source":"vec2("+u.slice(-2).join()+")",h=[o+" rc = outputLoc;",s[r-1]+" += 1;\n       if("+c+") {\n      ",1===r?"":"}\n       rc = outputLoc;\n       "+s[r-2]+" += 1;\n       if("+s[r-2]+" < "+this.outputShape[r-2]+") {",1===r?"":"  "+s[r-1]+" += 1;\n         if("+c+") {"],f=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))",d="",p=0,v=1===r?2:4;p<v;p++)d+="\n        "+h[p]+"\n        if ("+f+") {\n          result["+p+"] = float("+n+");\n        } else {\n          "+o+" source = rc - start;\n          result["+p+"] = getChannel(getX("+u.join()+"), "+l+");\n        }\n      ";d+=1===r?"} ":"}}",this.userCode="\n      const "+o+" start = "+o+"("+i+");\n      const "+o+" end = "+o+"("+a+");\n\n      void main() {\n        "+o+" outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        "+d+"\n        setOutput(result);\n      }\n    "},Ca=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,o=t.strideHeight,i=t.strideWidth,a=t.dilationHeight,s=t.dilationWidth,u=t.effectiveFilterHeight,c=t.effectiveFilterWidth,l=t.padInfo.top,h=t.padInfo.left;this.outputShape=t.outShape;var f="avg"===e,d="0.0";if(f||(d="-1.0 / 1e-20"),n)this.userCode="\n        const ivec2 strides = ivec2("+o+", "+i+");\n        const ivec2 pads = ivec2("+l+", "+h+");\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < "+u+";\n              wR += "+a+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+c+";\n                wC += "+s+") {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= "+t.inWidth+") {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value >= currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = wR * "+c+" + wC;\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var p=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(p="avgValue / count");var v=4*Math.floor(r/4),m=r%4,g="\n      if ("+f+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec2 strides = ivec2("+o+", "+i+");\n      const ivec2 pads = ivec2("+l+", "+h+");\n      const float initializationValue = "+d+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+d+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < "+u+";\n            wR += "+a+") {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= "+t.inHeight+") {\n            continue;\n          }\n\n          for (int wC = 0; wC < "+v+"; wC += 4) {\n            int xC = xCCorner + wC * "+s+";\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              getValue(batch, xR, xC + 3 * "+s+", d)\n            );\n\n            "+g+"\n          }\n\n          int xC = xCCorner + "+v+";\n          if ("+(1===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            "+g+"\n          } else if ("+(2===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              initializationValue,\n              initializationValue\n            );\n\n            "+g+"\n          } else if ("+(3===m)+") {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + "+s+", d),\n              getValue(batch, xR, xC + 2 * "+s+", d),\n              initializationValue\n            );\n\n            "+g+"\n          }\n        }\n        setOutput("+p+");\n      }\n    "}},Ea=function(t,e,n){if(this.variableNames=["x"],"avg"===e&&n)throw new Error("Cannot compute positions for average pool.");var r=t.filterWidth,o=t.strideDepth,i=t.strideHeight,a=t.strideWidth,s=t.dilationDepth,u=t.dilationHeight,c=t.dilationWidth,l=t.effectiveFilterDepth,h=t.effectiveFilterHeight,f=t.effectiveFilterWidth,d=t.padInfo.front,p=t.padInfo.top,v=t.padInfo.left;this.outputShape=t.outShape;var m="avg"===e,g="0.0";if(m||(g="-1.0 / 1e-20"),n)this.userCode="\n        const ivec3 strides =\n            ivec3("+o+", "+i+", "+a+");\n        const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < "+l+";\n              wD += "+s+") {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= "+t.inDepth+") {\n              continue;\n            }\n\n            for (int wR = 0; wR < "+h+";\n                wR += "+u+") {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= "+t.inHeight+") {\n                continue;\n              }\n\n              for (int wC = 0; wC < "+f+";\n                  wC += "+c+") {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= "+t.inWidth+") {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value >= currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition =\n                      wD * "+h+" * "+f+" +\n                      wR * "+f+" + wC;;\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      ";else{var y=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"avg"===e&&(y="avgValue / count");var x=4*Math.floor(r/4),b=r%4,w="\n      if ("+m+") {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    ";this.userCode="\n      const ivec3 strides =\n        ivec3("+o+", "+i+", "+a+");\n      const ivec3 pads = ivec3("+d+", "+p+", "+v+");\n      const float initializationValue = "+g+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= "+t.inWidth+") {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4("+g+");\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < "+l+";\n            wD += "+s+") {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= "+t.inDepth+") {\n            continue;\n          }\n\n          for (int wR = 0; wR < "+h+";\n            wR += "+u+") {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= "+t.inHeight+") {\n              continue;\n            }\n\n            for (int wC = 0; wC < "+x+"; wC += 4) {\n              int xC = xCCorner + wC * "+c+";\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                getValue(batch, xD, xR, xC + 3 * "+c+", ch)\n              );\n\n              "+w+"\n            }\n\n            int xC = xCCorner + "+x+";\n            if ("+(1===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              "+w+"\n            } else if ("+(2===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                initializationValue,\n                initializationValue\n              );\n\n              "+w+"\n            } else if ("+(3===b)+") {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + "+c+", ch),\n                getValue(batch, xD, xR, xC + 2 * "+c+", ch),\n                initializationValue\n              );\n\n              "+w+"\n            }\n          }\n          setOutput("+y+");\n        }\n      }\n    "}},Ra=function(t,e){this.variableNames=["x"];var n=t.windowSize,r=t.batchSize,o=t.inSize,i=Math.ceil(o/n);this.outputShape=[r,i];var a="0.0",s="";"prod"===e?a="1.0":"min"===e?(a="1.0 / 1e-20",s="min"):"max"===e&&(a="-1.0 / 1e-20",s="max");var u=e+"("+e+"("+e+"(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])";"sum"===e?u="sumValue":"prod"===e?u="prodValue":"all"===e?u="allValue":"any"===e&&(u="anyValue");var c=4*Math.floor(n/4),l=n%4,h="\n      if ("+("sum"===e)+") {\n        sumValue += dot(values, ones);\n      } else if ("+("prod"===e)+") {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = "+s+"(values, minMaxValue);\n      }\n    ",f="vec4";"all"===e?(a="1.0",h="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",f="bvec4"):"any"===e&&(a="0.0",h="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",f="bvec4");var d="";o%n>0&&(d="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      "),this.userCode="\n      const float initializationValue = "+a+";\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        "+d+"\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * "+n+";\n\n        vec4 minMaxValue = vec4("+a+");\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < "+c+"; i += 4) {\n          int inIdx = inOffset + i;\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          "+h+"\n        }\n\n        int inIdx = inOffset + "+c+";\n        if ("+(1===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          "+h+"\n        } else if ("+(2===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          "+h+"\n        } else if ("+(3===l)+") {\n          "+f+" values = "+f+"(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          "+h+"\n        }\n        setOutput("+u+");\n      }\n    "},Ia=function(t,e){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t;for(var n="",r=0;r<4;r++){var o="thisRC = rc;";r%2==1&&(o+="thisRC.z += 1;"),r>1&&(o+="thisRC.y += 1;"),n+="\n        "+o+"\n        "+(r>0?"if(thisRC.y < rows && thisRC.z < cols){":"")+"\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result["+r+"] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        "+(r>0?"}":"")+"\n      "}this.userCode="\n      \n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      "+Uo(["r","c","d"],e)+"\n      return ivec3(r, c, d);\n    }\n  \n      "+Vo(t)+"\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = "+t[1]+";\n        int cols = "+t[2]+";\n\n        "+n+"\n\n        setOutput(result);\n      }\n    "},Sa=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],i=r[2],a=t.shape,s=a[1],u=a[2],c=[n&&s>1?o-1:o,n&&u>1?i-1:i],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,m=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+h+");\n        const float widthScale = float("+f+");\n\n        const float invHeightScale = float("+d+");\n        const float invWidthScale = float("+p+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+m+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), "+(o-1)+".0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), "+(i-1)+".0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},ka=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(sourceFracIndexRC);\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    "},Aa=function(t,e,n,r){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],c=[r&&e>1?e-1:e,r&&n>1?n-1:n];this.userCode="\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+",\n          "+u[1]/c[1]+");\n      const vec3 inputShapeRC = vec3("+i+".0, "+a+".0,\n                                     "+a+".0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = vec3(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(sourceFracIndexRC);\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n        \n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < "+(s-1)+"; \n        bool hasNextRow = coords.z < "+(n-1)+";\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    "},Na=function(t,e,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=e.shape;var r=e.shape,o=r[1],i=r[2],a=t.shape,s=a[1],u=a[2],c=[n&&s>1?o-1:o,n&&u>1?i-1:i],l=[n&&s>1?s-1:s,n&&u>1?u-1:u],h=c[0]/l[0],f=c[1]/l[1],d=1/h,p=1/f,v=2*Math.ceil(d)+2,m=2*Math.ceil(p)+2;this.userCode="\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float("+h+");\n        const float widthScale = float("+f+");\n\n        const float invHeightScale = float("+d+");\n        const float invWidthScale = float("+p+");\n\n        const int winHeight = int("+v+");\n        const int winWidth = int("+m+");\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= "+s+") {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= "+u+") {\n              continue;\n            }\n\n            float sourceFracRow =\n              float("+c[0]+") *\n                (float(dyR) / float("+l[0]+"));\n\n            float sourceFracCol =\n                float("+c[1]+") *\n                  (float(dyC) / float("+l[1]+"));\n\n            int sourceNearestRow = int(min(\n                float(int("+o+") - 1),\n                "+n+" ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int("+i+") - 1),\n                "+n+" ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    "},Ta=function(t,e,n,r){this.variableNames=["A"],this.outputShape=[];var o=t[0],i=t[1],a=t[2],s=t[3];this.outputShape=[o,e,n,s];var u=[r&&e>1?i-1:i,r&&n>1?a-1:a],c=[r&&e>1?e-1:e,r&&n>1?n-1:n],l=r?"0.5":"0.0";this.userCode="\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          "+u[0]/c[0]+",\n          "+u[1]/c[1]+");\n      const vec2 inputShapeRC = vec2("+i+".0, "+a+".0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + "+l+")));\n\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    "},Da=function(t,e){this.variableNames=["x"];var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");if(this.outputShape=t,1!==n){var r=t.map((function(n,r){return function(n){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - coords["+n+"] - 1":"coords["+n+"]"}(r)})).join(","),o=Yo(n);this.userCode="\n      void main() {\n        "+o+" coords = getOutputCoords();\n        setOutput(getX("+r+"));\n      }\n    "}else this.userCode="\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX("+t[0]+" - coord - 1));\n        }\n      "},_a=function(t,e){this.variableNames=["x"],this.usesPackedTextures=!0;var n=t.length;if(n>4)throw new Error("WebGL backend: Reverse of rank-"+n+" tensor is not yet supported");this.outputShape=t;var r=Lo("rc",n),o=r[n-1]+" + 1 < "+this.outputShape[n-1],i=r[n-2]+" + 1 < "+this.outputShape[n-2],a=Yo(n);function s(n){var r=t.map((function(r,o){return function(n,r){return-1!==e.indexOf(n)&&1!==t[n]?t[n]+" - "+r[n]+" - 1":""+r[n]}(o,n)}));return"getChannel(getX("+r.join(",")+"), vec2("+r.slice(-2).join(",")+"))"}this.userCode=1===n?"\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX("+t[0]+" - rc - 1),\n            "+t[0]+" - rc - 1);\n          if("+o+"){\n              result.g = getChannel(getX("+t[0]+" - (rc  + 1) - 1),\n                "+t[0]+" - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      ":"\n        void main() {\n          "+a+" rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = "+function(t){return s(t)}(r.slice())+";\n          if("+o+"){\n            result.g = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",s(t)}(r.slice())+";\n          }\n          if("+i+") {\n            result.b = "+function(t){return t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            if("+o+") {\n              result.a = "+function(t){return t[n-1]="("+t[n-1]+" + 1)",t[n-2]="("+t[n-2]+" + 1)",s(t)}(r.slice())+";\n            }\n          }\n          setOutput(result);\n        }\n    "},Oa=function(t,e,n,r,o,i,a){void 0===a&&(a=!0),this.variableNames=["updates","indices","defaultValue"],this.outputShape=i;var s=Yo(o.length),u=Yo(i.length),c="";1===n?c="i":2===n&&(c="i, j");var l="getIndices("+c+")",h="";1===r?h="i":2===r&&(h="i, coords[1]");var f="getUpdates("+h+")",d=e>1?"strides[j]":"strides";this.userCode="\n        "+s+" strides = "+s+"("+o+");\n\n        void main() {\n          "+u+" coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < "+t+"; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < "+e+"; j++) {\n              int index = round("+l+");\n              flattenedIndex += index * "+d+";\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += "+f+";\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      "},Ma=function(t,e){this.variableNames=["x","segmentIds"];var n=t.windowSize,r=t.batchSize,o=t.inSize,i=t.numSegments,a=i*Math.ceil(o/n);this.outputShape=[r,a];var s=4*Math.floor(n/4),u=n%4,c="\n        sumValue += dot(values, segFilter);\n    ",l="";o%n>0&&(l="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return initializationValue;\n        }\n      ");var h="";o%n>0&&(h="\n        if (inIdx < 0 || inIdx >= "+o+") {\n          return -1.0;\n        }\n      "),this.userCode="\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        "+l+"\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        "+h+"\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          "+i+")) * float("+n+"));\n        int currentSeg = int(mod(float(outIdx), float("+i+")));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < "+s+"; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          "+c+"\n        }\n\n        int inIdx = inOffset + "+s+";\n        if ("+(1===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          "+c+"\n        } else if ("+(2===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          "+c+"\n        } else if ("+(3===u)+") {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          "+c+"\n        }\n        setOutput(sumValue);\n      }\n    "},Fa=function(t,e,n){var r,o;if(this.variableNames=["c","a","b"],this.outputShape=e,n>4)throw Error("Where for rank "+n+" is not yet supported");if(1===n)o="resRC",r="resRC";else{for(var i=["resRC.x","resRC.y","resRC.z","resRC.w"],a=[],s=[],u=0;u<e.length;u++)s.push(""+i[u]),u<t&&a.push(""+i[u]);r=a.join(),o=s.join()}var c=Yo(n);this.userCode="\n      void main() {\n        "+c+" resRC = getOutputCoords();\n        float cVal = getC("+r+");\n        if (cVal >= 1.0) {\n          setOutput(getA("+o+"));\n        } else {\n          setOutput(getB("+o+"));\n        }\n      }\n    "},Ba=function(){function t(t){this.variableNames=["source"],this.outputShape=t,this.rank=t.length;var e,n=Yo(this.rank),r="uniform int start["+this.rank+"];",o=function(t){if(1===t)return"sourceLoc";if(t<=6)return Pa.slice(0,t).map((function(t){return"sourceLoc."+t})).join(",");throw Error("Slicing for rank "+t+" is not yet supported")}(this.rank);e="\n        "+n+" sourceLoc;\n        "+n+" coords = getOutputCoords();\n        "+t.map((function(t,e){return"sourceLoc."+Pa[e]+" = start["+e+"] + coords."+Pa[e]+";"})).join("\n")+"\n      ",this.userCode="\n      "+r+"\n      void main() {\n        "+e+"\n        setOutput(getSource("+o+"));\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),Pa=["x","y","z","w","u","v"],La=function(){function t(t){this.variableNames=["source"],this.usesPackedTextures=!0,this.outputShape=t,this.rank=t.length;var e=Yo(this.rank),n=Lo("coords",this.rank),r=Lo("sourceLoc",this.rank),o=1===this.rank?"sourceLoc":"vec2("+r.slice(-2).join()+")",i="getChannel(getSource("+r.join()+"), "+o+")",a="\n      result.x = "+i+";\n      if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n        ++"+r[this.rank-1]+";\n        result.y = "+i+";\n        --"+r[this.rank-1]+";\n      }\n    ",s=1===this.rank?"":"\n      --"+n[this.rank-1]+";\n      if (++"+n[this.rank-2]+" < "+t[this.rank-2]+") {\n        ++"+r[this.rank-2]+";\n        result.z = "+i+";\n        if (++"+n[this.rank-1]+" < "+t[this.rank-1]+") {\n          ++"+r[this.rank-1]+";\n          result.w = "+i+";\n        }\n      }\n    ",u=this.rank<=4?"sourceLoc = coords +\n            "+e+"("+t.map((function(t,e){return"start["+e+"]"})).join()+");":t.map((function(t,e){return r[e]+" = "+n[e]+" + start["+e+"];"})).join("\n");this.userCode="\n      uniform int start["+this.rank+"];\n      void main() {\n        "+e+" coords = getOutputCoords();\n        "+e+" sourceLoc;\n        "+u+" \n        vec4 result = vec4(0.);\n        "+a+"\n        "+s+"\n        setOutput(result);\n      }\n    "}return t.prototype.getCustomSetupFunc=function(t){var e=this;if(t.length!==this.rank)throw Error("The rank ("+this.rank+") of the program must match the length of start ("+t.length+")");return function(n,r){null==e.startLoc&&(e.startLoc=n.getUniformLocationNoThrow(r,"start"),null==e.startLoc)||n.gl.uniform1iv(e.startLoc,t)}},t}(),Wa=function(t,e,n){this.variableNames=["x"],this.outputShape=n;var r=n.length,o=Yo(n.length),i=Yo(n.length),a="";if(1===r)a="coords * strides + begin";else{var s=0;a=n.map((function(t,e){return s++,1===n.length?"coords * strides["+e+"] + begin["+e+"]":"coords["+(s-1)+"] * strides["+e+"] + begin["+e+"]"})).join(",")}this.userCode="\n      "+o+" begin = "+o+"("+t+");\n      "+o+" strides = "+o+"("+e+");\n\n      void main() {\n        "+i+" coords = getOutputCoords();\n        setOutput(getX("+a+"));\n      }\n    "},Ua=function(){function t(t){this.gpgpu=t,this.numUsedTextures=0,this.numFreeTextures=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}return t.prototype.acquireTexture=function(t,e,n){var r,o=Va(e,n),i=za(t,o,n);if(i in this.freeTextures||(this.freeTextures[i]=[]),i in this.usedTextures||(this.usedTextures[i]=[]),this.freeTextures[i].length>0){this.numFreeTextures--,this.numUsedTextures++,this.log();var a=this.freeTextures[i].shift();return this.usedTextures[i].push(a),a}return this.numUsedTextures++,this.log(),o===Bt.PACKED_2X2_FLOAT32?r=this.gpgpu.createPackedMatrixTexture(t[0],t[1]):o===Bt.PACKED_2X2_FLOAT16?r=this.gpgpu.createFloat16PackedMatrixTexture(t[0],t[1]):o===Bt.UNPACKED_FLOAT32?r=this.gpgpu.createFloat32MatrixTexture(t[0],t[1]):o===Bt.UNPACKED_FLOAT16?r=this.gpgpu.createFloat16MatrixTexture(t[0],t[1]):o===Bt.PACKED_4X1_UNSIGNED_BYTE&&(r=this.gpgpu.createUnsignedBytesMatrixTexture(t[0],t[1])),this.usedTextures[i].push(r),r},t.prototype.releaseTexture=function(t,e,n,r){if(null!=this.freeTextures){var o=za(e,Va(n,r),r);o in this.freeTextures||(this.freeTextures[o]=[]),this.freeTextures[o].push(t),this.numFreeTextures++,this.numUsedTextures--;var i=this.usedTextures[o],a=i.indexOf(t);if(a<0)throw new Error("Cannot release a texture that was never provided by this texture manager");i.splice(a,1),this.log()}},t.prototype.log=function(){if(this.logEnabled){var t=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",this.numFreeTextures+" / "+this.numUsedTextures,"("+t+")")}},t.prototype.getNumUsedTextures=function(){return this.numUsedTextures},t.prototype.getNumFreeTextures=function(){return this.numFreeTextures},t.prototype.dispose=function(){var t=this;if(null!=this.freeTextures){for(var e in this.freeTextures)this.freeTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));for(var e in this.usedTextures)this.usedTextures[e].forEach((function(e){t.gpgpu.deleteMatrixTexture(e)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0}},t}();function Va(t,e){if(t===Ft.UPLOAD)return Bt.PACKED_2X2_FLOAT32;if(t===Ft.RENDER||null==t)return function(t){return f.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?t?Bt.PACKED_2X2_FLOAT32:Bt.UNPACKED_FLOAT32:t?Bt.PACKED_2X2_FLOAT16:Bt.UNPACKED_FLOAT16}(e);if(t===Ft.DOWNLOAD||t===Ft.PIXELS)return Bt.PACKED_4X1_UNSIGNED_BYTE;throw new Error("Unknown logical texture type "+t)}function za(t,e,n){return t[0]+"_"+t[1]+"_"+e+"_"+n}var Ga=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[r]*e[r];this.outputShape=n,this.rank=n.length;var o=Yo(this.rank),i=function(t){var e=t.length;if(e>5)throw Error("Tile for rank "+e+" is not yet supported");if(1===e)return"imod(resRC, "+t[0]+")";for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[],o=0;o<t.length;o++)r.push("imod("+n[o]+", "+t[o]+")");return r.join()}(t);this.userCode="\n      void main() {\n        "+o+" resRC = getOutputCoords();\n        setOutput(getA("+i+"));\n      }\n    "},Ha=function(t,e){this.variableNames=["A"];for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];this.outputShape=n,this.rank=n.length;var o=Yo(this.rank),i=function(t){var e=t.length;if(e>6)throw Error("Transpose for rank "+e+" is not yet supported");for(var n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(e),o=0;o<t.length;o++)r[t[o]]=n[o];return r.join()}(e);this.userCode="\n    void main() {\n      "+o+" resRC = getOutputCoords();\n      setOutput(getA("+i+"));\n    }\n    "},qa=function(t,e){this.variableNames=["A"],this.usesPackedTextures=!0;for(var n=new Array(t.length),r=0;r<n.length;r++)n[r]=t[e[r]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error("Packed transpose for rank "+this.rank+" is not yet supported.");var o=Yo(this.rank),i=Po("rc",this.rank),a=new Array(this.rank);for(r=0;r<e.length;r++)a[e[r]]=i[r];var s="vec2("+a.slice(-2).join()+")",u="++"+i[this.rank-1]+" < "+n[this.rank-1],c="getChannel(getA("+a.join()+"), "+s+")";this.userCode="\n    void main() {\n      "+o+" rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = "+c+";\n      if("+u+") {\n        result[1] = "+c+";\n      }\n      --"+i[this.rank-1]+";\n      if(++"+i[this.rank-2]+" < "+n[this.rank-2]+") {\n        result[2] = "+c+";\n        if("+u+") {\n          result[3] = "+c+";\n        }\n      }  \n      setOutput(result);\n    }\n    "},$a=1.7580993408473768,ja=1.0507009873554805,Ka=function(t,e){this.variableNames=["A"],this.outputShape=t,this.userCode="\n      float unaryOperation(float x) {\n        "+e+"\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},Xa="if (isnan(x)) return x;",Ya="return x;",Qa="return abs(x);",Ja=Xa+"\n  return (x < 0.0) ? 0.0 : x;\n",Za="return (x >= 0.0) ? x : (exp(x) - 1.0);",ts="return -x;",es="return ceil(x);",ns="return floor(x);",rs="return exp(x);",os="return exp(x) - 1.0;",is="return x;",as="return x;",ss="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",us="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",cs=function(t,e){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t,this.userCode="\n      vec4 unaryOperation(vec4 x) {\n        "+e+"\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    "},ls=function(t){this.variableNames=["A"],this.usesPackedTextures=!0,this.outputShape=t;var e=t.length,n=Lo("rc",e),r=Yo(e),o=function(t,e){if(1===t)return"rc";for(var n="",r=0;r<t;r++)n+=e[r],r<t-1&&(n+=",");return n}(e,n),i=n.slice(-2),a=e<=1?"rc":"vec2("+i.join(",")+")";this.userCode="\n      void main() {\n        "+r+" rc = getOutputCoords();\n        vec4 packedInput = getA("+o+");\n\n        setOutput(getChannel(packedInput, "+a+"));\n      }\n    "},hs={};function fs(t,e){if(void 0===e&&(e=!1),"linear"===t)return e?as:Ya;if("relu"===t)return e?ss:Ja;if("elu"===t)return e?us:Za;if("prelu"===t)return e?li:ui;throw new Error("Activation "+t+" has not been implemented for the WebGL backend.")}var ds=600,ps=function(){function t(t){if(this.gpgpu=t,this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.warnedAboutMemory=!1,this.disposed=!1,!f.getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");if(null==t){var e=Ut(f.getNumber("WEBGL_VERSION"));this.binaryCache=(n=f.getNumber("WEBGL_VERSION"))in hs?hs[n]:(hs[n]={},hs[n]),this.gpgpu=new ua(e),this.canvas=e.canvas,this.gpgpuCreatedLocally=!0}else this.binaryCache={},this.gpgpuCreatedLocally=!1,this.canvas=t.gl.canvas;var n;this.textureManager=new Ua(this.gpgpu),this.numMBBeforeWarning=null==f.global.screen?1024:f.global.screen.height*f.global.screen.width*window.devicePixelRatio*ds/1024/1024,this.texData=new no(this,Ot)}return t.prototype.register=function(t,e,n){if(this.texData.has(t))throw new Error("Data buffer is already registered");this.texData.set(t,{shape:e,dtype:n})},t.prototype.fromPixels=function(t,e){if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var n="undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas||"undefined"!=typeof HTMLCanvasElement&&t instanceof HTMLCanvasElement,r=t.data instanceof Uint8Array,o="undefined"!=typeof ImageData&&t instanceof ImageData,i="undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement,a="undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement,s=i?[t.videoWidth,t.videoHeight]:[t.width,t.height],u=s[0],c=s[1],l=[c,u],h=[c,u,e];if(!(n||r||o||i||a))throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);(a||i)&&(null==this.fromPixels2DContext&&(this.fromPixels2DContext=Vt(f.getNumber("WEBGL_VERSION")).getContext("2d")),this.fromPixels2DContext.canvas.width=u,this.fromPixels2DContext.canvas.height=c,this.fromPixels2DContext.drawImage(t,0,0,u,c),t=this.fromPixels2DContext.canvas);var d,p,v=this.makeTensorHandle(l,"int32");if(this.texData.get(v.dataId).usage=Ft.PIXELS,this.gpgpu.uploadPixelDataToTexture(this.getTexture(v.dataId),t),f.getBool("WEBGL_PACK")){d=new Vi(h);var m=this.makePackedTensor(d.outputShape,v.dtype);p=this.compileAndRun(d,[v],m)}else d=new Ui(h),p=this.compileAndRun(d,[v]);return this.disposeData(v.dataId),p},t.prototype.makeTensorHandle=function(t,e){var n={};return this.register(n,t,e),{dataId:n,shape:t,dtype:e}},t.prototype.write=function(t,e){if(null==e)throw new Error("MathBackendWebGL.write(): values can not be null");if(f.getBool("DEBUG"))for(var n=0;n<e.length;n++){var r=e[n];if(!Xt(r)){if(f.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error("The value "+r+" cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.ENV.set('WEBGL_RENDER_FLOAT32_ENABLED', true);'");throw Error("The value "+r+" cannot be represented on this device.")}}var o=this.texData.get(t);if("complex64"===o.dtype)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.releaseGPUData(t),o.usage=Ft.UPLOAD,o.values=e},t.prototype.readSync=function(t){var e=this.texData.get(t),n=e.values,r=e.dtype,o=e.complexTensors,i=e.slice,a=e.shape,s=e.isPacked;if(null!=i){var u;u=s?new cs(a,is):new Ka(a,is);var c=this.compileAndRun(u,[{dataId:t,shape:a,dtype:r}]),l=this.readSync(c.dataId);return c.dispose(),l}if(null!=n)return this.convertAndCacheOnCPU(t);if("string"===r)return n;var h,f,d=null!=this.activeTimers;return d&&(h=J()),f="complex64"===r?Ro(o.real.dataSync(),o.imag.dataSync()):this.getValuesFromTexture(t),d&&(this.downloadWaitMs+=J()-h),this.convertAndCacheOnCPU(t,f)},t.prototype.read=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s,u,l,h,d,p,v,m,g,y,x,b,w,C,R,I;return c(this,(function(c){switch(c.label){case 0:if(this.pendingRead.has(t))return e=this.pendingRead.get(t),[2,new Promise((function(t){return e.push(t)}))];if(n=this.texData.get(t),r=n.values,o=n.shape,i=n.slice,a=n.dtype,s=n.complexTensors,u=n.isPacked,null!=i)return void 0,l=u?new cs(o,is):new Ka(o,is),h=this.compileAndRun(l,[{dataId:t,shape:o,dtype:a}]),d=this.read(h.dataId),h.dispose(),[2,d];if(null!=r)return[2,this.convertAndCacheOnCPU(t)];if(!f.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===f.getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");return p=null,"complex64"!==a&&f.get("WEBGL_BUFFER_SUPPORTED")&&(v=this.decode(t),m=this.texData.get(v.dataId),p=(I=this.gpgpu).createBufferFromTexture.apply(I,[m.texture].concat(Gt(o)))),this.pendingRead.set(t,[]),"complex64"===a?[3,2]:[4,this.gpgpu.createAndWaitForFence()];case 1:c.sent(),c.label=2;case 2:return"complex64"!==a?[3,4]:[4,Promise.all([s.real.data(),s.imag.data()])];case 3:return y=c.sent(),x=y[0],b=y[1],g=Ro(x,b),[3,5];case 4:null==p?g=this.getValuesFromTexture(t):(w=E(o),g=this.gpgpu.downloadFloat32MatrixFromBuffer(p,w)),c.label=5;case 5:return null!=v&&this.disposeData(v.dataId),C=this.convertAndCacheOnCPU(t,g),R=this.pendingRead.get(t),this.pendingRead.delete(t),R.forEach((function(t){return t(C)})),this.pendingDisposal.has(t)&&(this.pendingDisposal.delete(t),this.disposeData(t)),[2,C]}}))}))},t.prototype.getValuesFromTexture=function(t){var e,n=this,r=this.texData.get(t),o=r.shape,i=r.dtype,a=r.isPacked,s=E(o);if(f.getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){var u=this.decode(t),c=this.texData.get(u.dataId),l=(e=this.gpgpu).downloadMatrixFromPackedTexture.apply(e,[c.texture].concat(Gt(o))).subarray(0,s);return this.disposeData(u.dataId),l}var h=f.getBool("WEBGL_PACK")&&!0===a,d=h?Re(o):o,p=this.makeTensorHandle(d,"float32");p.size=E(o),this.texData.get(p.dataId).usage=Ft.DOWNLOAD;var v=qe((function(){var e=h?new Fi(d):new Mi(d);return n.compileAndRun(e,[{shape:d,dtype:i,dataId:t}],p,null)})),m=this.texData.get(v.dataId),g=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(m.texture,m.texShape[0],m.texShape[1]).subarray(0,s);return this.disposeData(p.dataId),g},t.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s;return c(this,(function(u){switch(u.label){case 0:return e=this.activeTimers,n=[],r=!1,null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,t(),o=C(this.activeTimers.map((function(t){return t.query}))).filter((function(t){return null!=t})),i=C(this.activeTimers.map((function(t){return t.name}))).filter((function(t){return null!=t})),this.activeTimers=e,r&&(this.programTimersStack=null),[4,Promise.all(o)];case 1:return a=u.sent(),s={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:y(a),getExtraProfileInfo:function(){return a.map((function(t,e){return{name:i[e],ms:t}})).map((function(t){return t.name+": "+t.ms})).join(", ")},wallMs:null},this.uploadWaitMs=0,this.downloadWaitMs=0,[2,s]}}))}))},t.prototype.memory=function(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU}},t.prototype.startTimer=function(){return f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?this.gpgpu.beginQuery():{startMs:J(),endMs:null}},t.prototype.endTimer=function(t){return f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(this.gpgpu.endQuery(),t):(t.endMs=J(),t)},t.prototype.getQueryTime=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return f.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?[2,this.gpgpu.waitForQueryAndGetTime(t)]:[2,(e=t).endMs-e.startMs]}))}))},t.prototype.disposeData=function(t){if(!this.pendingDisposal.has(t))if(this.pendingRead.has(t))this.pendingDisposal.add(t);else if(this.texData.has(t)){this.releaseGPUData(t);var e=this.texData.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.texData.delete(t)}},t.prototype.releaseGPUData=function(t){var e=this.texData.get(t),n=e.texture,r=e.dtype,o=e.texShape,i=e.usage,a=e.isPacked,s=e.slice,u=s&&s.origDataId||t,c=this.dataRefCount.get(u);c>1?this.dataRefCount.set(u,c-1):(this.dataRefCount.delete(u),null!=n&&(this.numBytesInGPU-=this.computeBytes(o,r),this.textureManager.releaseTexture(n,o,i,a)));var l=this.texData.get(t);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null},t.prototype.getTexture=function(t){return this.uploadToGPU(t),this.texData.get(t).texture},t.prototype.getDataInfo=function(t){return this.texData.get(t)},t.prototype.getCPUBackend=function(){return f.getBool("WEBGL_CPU_FORWARD")?(null==this.cpuBackend&&(this.cpuBackend=Ot.findBackend("cpu")),this.cpuBackend):null},t.prototype.shouldExecuteOnCPU=function(t,e){var n=this;return void 0===e&&(e=128),null!=this.getCPUBackend()&&t.every((function(t){return null==n.texData.get(t.dataId).texture&&t.size<e}))},t.prototype.getGPGPUContext=function(){return this.gpgpu},t.prototype.complex=function(t,e){var n=this.makeOutputArray(t.shape,"complex64");return this.texData.get(n.dataId).complexTensors={real:Ot.keep(t.clone()),imag:Ot.keep(e.clone())},n},t.prototype.real=function(t){return this.texData.get(t.dataId).complexTensors.real.clone()},t.prototype.imag=function(t){return this.texData.get(t.dataId).complexTensors.imag.clone()},t.prototype.slice=function(t,e,n){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.slice(t,e,n);if(0===E(n))return Rn([],n,t.dtype);var r=this.texData.get(t.dataId).isPacked,o=qr(t.shape,e,n);if(r||!o){var i=f.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new La(n):new Ba(n),a=i.getCustomSetupFunc(e);return this.compileAndRun(i,[t],null,a)}return this.uploadToGPU(t.dataId),this.shallowSlice(t,e,n)},t.prototype.shallowSlice=function(t,e,n){var r=this.texData.get(t.dataId),o=vt.make(n,{},t.dtype,this),i=this.texData.get(o.dataId);Object.assign(i,r),i.shape=n,i.dtype=t.dtype;var a=$r(e,t.strides);r.slice&&(a+=r.slice.flatOffset),i.slice={flatOffset:a,origDataId:r.slice&&r.slice.origDataId||t.dataId};var s=this.dataRefCount.get(i.slice.origDataId)||1;return this.dataRefCount.set(i.slice.origDataId,s+1),o},t.prototype.stridedSlice=function(t,e,n,r){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.stridedSlice(t,e,n,r);var o=zr(e,n,r);if(o.some((function(t){return 0===t})))return Rn([],o);var i=new Wa(e,r,o);return this.compileAndRun(i,[t])},t.prototype.reverse=function(t,e){var n=f.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new _a(t.shape,e):new Da(t.shape,e);return this.compileAndRun(n,[t])},t.prototype.concat=function(t,e){if("complex64"===t[0].dtype){var n=t.map((function(t){return Cn(t)})),r=t.map((function(t){return En(t)}));return wn(this.concat(n,e),this.concat(r,e))}if(this.shouldExecuteOnCPU(t))return this.cpuBackend.concat(t,e);if(1===t.length)return t[0];if(t.length>f.getNumber("WEBGL_MAX_TEXTURES_IN_SHADER")){var o=Math.floor(t.length/2),i=this.concat(t.slice(0,o),e),a=this.concat(t.slice(o),e);return this.concat([i,a],e)}if(f.getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&t[0].rank>1){var s=new mi(t.map((function(t){return t.shape})),e);return this.compileAndRun(s,t)}var u=xn(t.map((function(t){return t.shape})),e),c=t.map((function(t){return t.as2D(-1,E(t.shape.slice(e)))})),l=new vi(c.map((function(t){return t.shape})));return this.compileAndRun(l,c).reshape(u)},t.prototype.neg=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.neg(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ts,t.dtype);var e=new Ka(t.shape,ts);return this.compileAndRun(e,[t])},t.prototype.batchMatMul=function(t,e,n,r){var o=n?t.shape[2]:t.shape[1],i=r?e.shape[1]:e.shape[2],a=n?t.shape[1]:t.shape[2],s=t.shape[0];if((1===o||1===i)&&a>1e3){n&&(t=t.transpose([0,2,1])),r&&(e=e.transpose([0,2,1]));var u=1===i?t:t.as3D(s,a,1),c=1===i?2:1,l=1===i?e.as3D(s,1,a):e;return this.multiply(u,l).sum(c,!0)}var h=Rt(t.dtype,e.dtype),f=new ma(t.shape,[s,o,i],n,r),d=this.makePackedTensor(f.outputShape,h);return this.compileAndRun(f,[t,e],d)},t.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=r?e.shape[2]:e.shape[1],c=o?n.shape[1]:n.shape[2],l=e.shape[0],h=Rt(e.dtype,n.dtype),f=null!=i,d=null!=s,p=a?fs(a,!0):null,v=new ma(e.shape,[l,u,c],r,o,f,p,d),m=this.makePackedTensor(v.outputShape,h),g=[e,n];return i&&g.push(i),s&&g.push(s),this.compileAndRun(v,g,m)},t.prototype.multiply=function(t,e){if("complex64"===t.dtype){var n=this.texData.get(t.dataId),r=this.texData.get(e.dataId),o=new oi("return areal * breal - aimag * bimag;",t.shape,e.shape),i=new oi("return areal * bimag + aimag * breal;",t.shape,e.shape),a=[this.makeComplexComponentTensorHandle(t,n.complexTensors.real),this.makeComplexComponentTensorHandle(t,n.complexTensors.imag),this.makeComplexComponentTensorHandle(e,r.complexTensors.real),this.makeComplexComponentTensorHandle(e,r.complexTensors.imag)],s=this.compileAndRun(o,a),u=this.compileAndRun(i,a),c=this.complex(s,u);return s.dispose(),u.dispose(),c}if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.multiply(t,e);if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,si,t.dtype);var l=new ci(si,t.shape,e.shape),h=this.makeOutputArray(l.outputShape,t.dtype);return this.compileAndRun(l,[t,e],h)},t.prototype.batchNormalization=function(t,e,n,r,o,i){var a=[t,e,n],s=null;null!=i&&(s=i.shape,a.push(i));var u=null;if(null!=o&&(u=o.shape,a.push(o)),f.getBool("WEBGL_PACK_NORMALIZATION")){var c=new ri(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(c,a)}var l=new ni(t.shape,e.shape,n.shape,s,u,r);return this.compileAndRun(l,a)},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){var i=f.getBool("WEBGL_PACK_NORMALIZATION")?new da(t.shape,e,n,r,o):new ha(t.shape,e,n,r,o);return this.compileAndRun(i,[t])},t.prototype.LRNGrad=function(t,e,n,r,o,i,a){var s=new fa(e.shape,r,o,i,a);return this.compileAndRun(s,[e,n,t])},t.prototype.tile=function(t,e){if("string"===t.dtype){var n=this.readSync(t.dataId).map((function(t){return et(t)}));return Do(or(t.shape,t.dtype,n),e)}var r=new Ga(t.shape,e);return this.compileAndRun(r,[t])},t.prototype.pad=function(t,e,n){var r=f.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new wa(t.shape,e,n):new ba(t.shape,e,n);return this.compileAndRun(r,[t])},t.prototype.transpose=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.transpose(t,e);var n=f.getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new qa(t.shape,e):new Ha(t.shape,e);return this.compileAndRun(n,[t])},t.prototype.gather=function(t,e,n){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.gather(t,e,n);var r=new zi(t.shape,e.size,n);return this.compileAndRun(r,[t,e])},t.prototype.batchToSpaceND=function(t,e,n){x(t.rank<=4,(function(){return"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),o=_r(t.shape,e,r),i=Or(o.length,e.length),a=Mr(t.shape,e,r),s=Fr(n,e.length),u=Br(a,n,e.length);return t.reshape(o).transpose(i).reshape(a).slice(s,u)},t.prototype.spaceToBatchND=function(t,e,n){x(t.rank<=4,(function(){return"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"}));var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var i=1+e.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),s=_r(a.shape,e,r,!1),u=Or(s.length,e.length,!1),c=Mr(a.shape,e,r,!1);return a.reshape(s).transpose(u).reshape(c)},t.prototype.reduce=function(t,e,n){var r=t.shape[0],o=t.shape[1],i=Wr(o),a=new Ra({windowSize:i,inSize:o,batchSize:r},e),s=a.outputShape,u=s[0],c=s[1],l=this.makeOutputArray([u,c],n);return this.compileAndRun(a,[t],l),1===l.shape[1]?l:this.reduce(l,e,n)},t.prototype.argReduce=function(t,e,n){void 0===n&&(n=null);var r=t.shape[0],o=t.shape[1];null!=n&&(r=n.shape[0],o=n.shape[1]);var i=Wr(o),a=new Bo({windowSize:i,inSize:o,batchSize:r},e,null==n),s=a.outputShape,u=s[0],c=s[1],l=this.makeOutputArray([u,c],"int32"),h=[t];return null!=n&&h.push(n),this.compileAndRun(a,h,l),1===l.shape[1]?l:this.argReduce(t,e,l)},t.prototype.argReducePacked=function(t,e,n){void 0===n&&(n=null);var r=null!=n?n.shape:t.shape,o=Wr(r[r.length-1]),i=new Zo(r,o,e,null==n),a=this.makePackedTensor(i.outputShape,"int32"),s=null==n?[t]:[t,n];return this.compileAndRun(i,s,a),a.rank===t.rank?this.argReducePacked(t,e,a):a},t.prototype.sum=function(t,e){pn("sum",e,t.rank);var n=fn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o),a=It(t.dtype);return this.reduce(i,"sum",a).reshape(r)},t.prototype.prod=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.prod(t,e);var n=fn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o),a=It(t.dtype);return this.reduce(i,"prod",a).reshape(r)},t.prototype.unsortedSegmentSum=function(t,e,n){var r=0,o=vn([r],t.rank),i=t;null!=o&&(i=t.transpose(o),r=gn(1,t.rank)[0]);var a=function(t,e,n){for(var r=[],o=t.length,i=0;i<o;i++)i!==e?r.push(t[i]):r.push(n);return r}(i.shape,r,n),s=E([i.shape[r]]),u=i.as2D(-1,s),c=It(t.dtype),l=this.segOpCompute(u,"unsortedSegmentSum",e,c,n).reshape(a);return null!=o&&(l=l.transpose(mn(o))),l},t.prototype.segOpCompute=function(t,e,n,r,o){var i=t.shape[0],a=t.shape[1],s=function(t,e){var n,r=!1;for(t<=Lr?(n=t,r=!0):n=$(t,Math.floor(Math.sqrt(t)));!r;)n>e||n===t?r=!0:n=$(t,n+1);return n}(a,o),u=new Ma({windowSize:s,inSize:a,batchSize:i,numSegments:o},e),c=u.outputShape,l=c[0],h=c[1],f=this.makeOutputArray([l,h],r);return this.compileAndRun(u,[t,n],f),f.shape[1]===o?f:(n=Pn(0,o).tile([a/s]),this.segOpCompute(f,e,n,r,o))},t.prototype.argMinMaxReduce=function(t,e,n){var r=[e];if(pn("arg"+n.charAt(0).toUpperCase()+n.slice(1),r,t.rank),!f.getBool("WEBGL_PACK_REDUCE")||t.rank<=2){var o=fn(t.shape,r),i=o[0],a=E(o[1]),s=t.as2D(-1,a);return this.argReduce(s,n).reshape(i)}return this.argReducePacked(t,n)},t.prototype.argMin=function(t,e){return this.argMinMaxReduce(t,e,"min")},t.prototype.argMax=function(t,e){return this.argMinMaxReduce(t,e,"max")},t.prototype.cumsum=function(t,e,n,r){if(e!==t.rank-1)throw new Error("WebGL cumsum shader expects an inner-most axis="+(t.rank-1)+" but got axis="+e);var o=new Ai(t.shape,n,r);return this.compileAndRun(o,[t])},t.prototype.equal=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(equal(a, b));\n","bool");var n=new ci("return float(a == b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.notEqual=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(notEqual(a, b));\n","bool");var n=new ci("return float(a != b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.less=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.less(t,e);if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThan(a, b));\n","bool");var n=new ci("return float(a < b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.lessEqual=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(lessThanEqual(a, b));\n","bool");var n=new ci("return float(a <= b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.greater=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.greater(t,e);if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThan(a, b));\n","bool");var n=new ci("return float(a > b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.greaterEqual=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(greaterThanEqual(a, b));\n","bool");var n=new ci("return float(a >= b);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.logicalNot=function(t){var e=new Ka(t.shape,"return float(!(x >= 1.0));");return this.compileAndRun(e,[t])},t.prototype.logicalAnd=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n","bool");var n=new ci("return float(a >= 1.0 && b >= 1.0);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.logicalOr=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n","bool");var n=new ci("return float(a >= 1.0 || b >= 1.0);",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"bool");return this.compileAndRun(n,[t,e],r)},t.prototype.select=function(t,e,n){var r=new Fa(t.rank,e.shape,e.rank),o=this.makeOutputArray(r.outputShape,Rt(e.dtype,n.dtype));return this.compileAndRun(r,[t,e,n],o)},t.prototype.where=function(t){on("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");var e=t.dataSync();return Oo(t.shape,e)},t.prototype.topk=function(t,e,n){return _o(t.dataSync(),t.shape,t.dtype,e)},t.prototype.min=function(t,e){pn("min",e,t.rank);var n=fn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o);return this.reduce(i,"min",i.dtype).reshape(r)},t.prototype.minimum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.minimum(t,e);var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hi("\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new ci("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.mod=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hi("\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new ci("if (b == 0.0) return NAN;\n  return mod(a, b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.max=function(t,e){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.max(t,e);pn("max",e,t.rank);var n=fn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o);return this.reduce(i,"max",i.dtype).reshape(r)},t.prototype.maximum=function(t,e){if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.maximum(t,e);var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hi("\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new ci("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.all=function(t,e){pn("all",e,t.rank);var n=fn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o);return this.reduce(i,"all",i.dtype).reshape(r)},t.prototype.any=function(t,e){pn("any",e,t.rank);var n=fn(t.shape,e),r=n[0],o=E(n[1]),i=t.as2D(-1,o);return this.reduce(i,"any",i.dtype).reshape(r)},t.prototype.squaredDifference=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hi("return (a - b) * (a - b);",t.shape,e.shape):new ci("return (a - b) * (a - b);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.realDivide=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(b.x == 0.0) {\n    result.x = NAN;\n  } else if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(b.y == 0.0) {\n    result.y = NAN;\n  } else if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(b.z == 0.0) {\n    result.z = NAN;\n  } else if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(b.w == 0.0) {\n    result.w = NAN;\n  } else if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n","float32",!0);var n=new ci("\nif (b == 0.0) {\n  return NAN;\n}\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t,e],r)},t.prototype.floorDiv=function(t,e){if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n","int32");var n=new ci("\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",t.shape,e.shape),r=this.makeOutputArray(n.outputShape,"int32");return this.compileAndRun(n,[t,e],r)},t.prototype.add=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,ii);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.add(t,e);var n=Rt(t.dtype,e.dtype);if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,ii,n);var r=new ci(ii,t.shape,e.shape),o=this.makeOutputArray(r.outputShape,n);return this.compileAndRun(r,[t,e],o)},t.prototype.packedUnaryOp=function(t,e,n){var r=new cs(t.shape,e),o=this.makePackedTensor(r.outputShape,n);return this.compileAndRun(r,[t],o)},t.prototype.packedBinaryOp=function(t,e,n,r,o){void 0===o&&(o=!1);var i=new hi(n,t.shape,e.shape,o),a=this.makePackedTensor(i.outputShape,r);return this.compileAndRun(i,[t,e],a)},t.prototype.complexSeparableBinaryOp=function(t,e,n){var r=this,o=this.texData.get(t.dataId),i=this.texData.get(e.dataId),a=[[o.complexTensors.real,i.complexTensors.real],[o.complexTensors.imag,i.complexTensors.imag]].map((function(o){var i=o[0],a=o[1],s=r.makeComplexComponentTensorHandle(t,i),u=r.makeComplexComponentTensorHandle(e,a),c=new ci(n,t.shape,e.shape),l=r.makeOutputArray(c.outputShape,Rt(i.dtype,a.dtype));return r.compileAndRun(c,[s,u],l)})),s=a[0],u=a[1],c=this.complex(s,u);return s.dispose(),u.dispose(),c},t.prototype.makeComplexComponentTensorHandle=function(t,e){return{dataId:e.dataId,dtype:e.dtype,shape:t.shape}},t.prototype.addN=function(t){if(1===t.length)return t[0];if(t.length>f.get("WEBGL_MAX_TEXTURES_IN_SHADER")){var e=Math.floor(t.length/2),n=this.addN(t.slice(0,e)),r=this.addN(t.slice(e));return this.addN([n,r])}var o=t.map((function(t){return t.dtype})).reduce((function(t,e){return Rt(t,e)})),i=t.map((function(t){return t.shape})),a=f.getBool("WEBGL_PACK"),s=a?new Fo(t[0].shape,i):new Mo(t[0].shape,i),u=a?this.makePackedTensor(s.outputShape,o):this.makeOutputArray(s.outputShape,o);return this.compileAndRun(s,t,u)},t.prototype.subtract=function(t,e){if("complex64"===t.dtype&&"complex64"===e.dtype)return this.complexSeparableBinaryOp(t,e,ai);if(this.shouldExecuteOnCPU([t,e]))return this.cpuBackend.subtract(t,e);var n=Rt(t.dtype,e.dtype);if(f.getBool("WEBGL_PACK_BINARY_OPERATIONS"))return this.packedBinaryOp(t,e,ai,t.dtype);var r=new ci(ai,t.shape,e.shape),o=this.makeOutputArray(r.outputShape,n);return this.compileAndRun(r,[t,e],o)},t.prototype.pow=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS"),r=n?new hi("\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new ci("\nif(a < 0.0 && floor(b) < b){\n  return NAN;\n}\nif (b == 0.0) {\n  return 1.0;\n}\nreturn (round(mod(b, 2.0)) != 1) ?\n    pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",t.shape,e.shape),o=Rt(t.dtype,e.dtype),i=n?this.makePackedTensor(r.outputShape,o):this.makeOutputArray(r.outputShape,o);return this.compileAndRun(r,[t,e],i)},t.prototype.ceil=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.ceil(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,es,t.dtype);var e=new Ka(t.shape,es);return this.compileAndRun(e,[t])},t.prototype.floor=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.floor(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,ns,t.dtype);var e=new Ka(t.shape,ns);return this.compileAndRun(e,[t])},t.prototype.sign=function(t){var e=new Ka(t.shape,"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n");return this.compileAndRun(e,[t])},t.prototype.isNaN=function(t){var e=new Ka(t.shape,"return float(isnan(x));"),n=this.makeOutputArray(e.outputShape,"bool");return this.compileAndRun(e,[t],n)},t.prototype.isInf=function(t){var e=new Ka(t.shape,"return float(isinf(x));"),n=this.makeOutputArray(e.outputShape,"bool");return this.compileAndRun(e,[t],n)},t.prototype.isFinite=function(t){var e=new Ka(t.shape,"return float(!isnan(x) && !isinf(x));"),n=this.makeOutputArray(e.outputShape,"bool");return this.compileAndRun(e,[t],n)},t.prototype.round=function(t){var e=new Ka(t.shape,"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n");return this.compileAndRun(e,[t])},t.prototype.exp=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.exp(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,rs,t.dtype);var e=new Ka(t.shape,rs);return this.compileAndRun(e,[t])},t.prototype.expm1=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.expm1(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,os,t.dtype);var e=new Ka(t.shape,os);return this.compileAndRun(e,[t])},t.prototype.log=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.log(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,"\n  vec4 result = log(x);\n  vec4 isNaN = vec4(lessThan(x, vec4(0.0)));\n  result.r = isNaN.r == 1.0 ? NAN : result.r;\n  result.g = isNaN.g == 1.0 ? NAN : result.g;\n  result.b = isNaN.b == 1.0 ? NAN : result.b;\n  result.a = isNaN.a == 1.0 ? NAN : result.a;\n\n  return result;\n",t.dtype);var e=new Ka(t.shape,"if (x < 0.0) return NAN;\n  return log(x);");return this.compileAndRun(e,[t])},t.prototype.log1p=function(t){var e=new Ka(t.shape,"return log(1.0 + x);");return this.compileAndRun(e,[t])},t.prototype.sqrt=function(t){var e=new Ka(t.shape,"return sqrt(x);");return this.compileAndRun(e,[t])},t.prototype.rsqrt=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.rsqrt(t);var e=new Ka(t.shape,"return inversesqrt(x);");return this.compileAndRun(e,[t])},t.prototype.square=function(t){var e=new Ka(t.shape,"return x * x;");return this.compileAndRun(e,[t])},t.prototype.reciprocal=function(t){var e=new Ka(t.shape,"return 1.0 / x;");return this.compileAndRun(e,[t])},t.prototype.relu=function(t){var e;return e=f.getBool("WEBGL_PACK")?new cs(t.shape,ss):new Ka(t.shape,Ja),this.compileAndRun(e,[t])},t.prototype.prelu=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hi(li,t.shape,e.shape):new ci(ui,t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.elu=function(t){if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,us,t.dtype);var e=new Ka(t.shape,Za);return this.compileAndRun(e,[t])},t.prototype.eluDer=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hi("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",t.shape,e.shape):new ci("return (b >= 1.0) ? a : a * (b + 1.0);",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.selu=function(t){var e=new Ka(t.shape,"\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = 1.7580993408473768;\n  float scale = 1.0507009873554805;\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n");return this.compileAndRun(e,[t])},t.prototype.int=function(t){var e=new Ka(t.shape,"return float(int(x));"),n=this.makeOutputArray(e.outputShape,"int32");return this.compileAndRun(e,[t],n)},t.prototype.clip=function(t,e,n){var r,o=(r=f.getBool("WEBGL_PACK_CLIP")?new di(t.shape):new fi(t.shape)).getCustomSetupFunc(e,n);return this.compileAndRun(r,[t],null,o)},t.prototype.abs=function(t){if(this.shouldExecuteOnCPU([t]))return this.cpuBackend.abs(t);if(f.getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(t,Qa,t.dtype);var e=new Ka(t.shape,Qa);return this.compileAndRun(e,[t])},t.prototype.complexAbs=function(t){var e=this.texData.get(t.dataId),n=new pi(t.shape),r=[this.makeComplexComponentTensorHandle(t,e.complexTensors.real),this.makeComplexComponentTensorHandle(t,e.complexTensors.imag)];return this.compileAndRun(n,r)},t.prototype.sigmoid=function(t){var e=new Ka(t.shape,"return 1.0 / (1.0 + exp(-1.0 * x));");return this.compileAndRun(e,[t])},t.prototype.softplus=function(t){var e=new Ka(t.shape,"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n");return this.compileAndRun(e,[t])},t.prototype.sin=function(t){var e=new Ka(t.shape,"if (isnan(x)) return x;\n  return sin(x);\n");return this.compileAndRun(e,[t])},t.prototype.cos=function(t){var e=new Ka(t.shape,"if (isnan(x)) return x;\n  return cos(x);\n");return this.compileAndRun(e,[t])},t.prototype.tan=function(t){var e=new Ka(t.shape,"return tan(x);");return this.compileAndRun(e,[t])},t.prototype.asin=function(t){var e=new Ka(t.shape,"return asin(x);");return this.compileAndRun(e,[t])},t.prototype.acos=function(t){var e=new Ka(t.shape,"return acos(x);");return this.compileAndRun(e,[t])},t.prototype.atan=function(t){var e=new Ka(t.shape,"if (isnan(x)) return x;\n  return atan(x);\n");return this.compileAndRun(e,[t])},t.prototype.atan2=function(t,e){var n=f.getBool("WEBGL_PACK_BINARY_OPERATIONS")?new hi("\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",t.shape,e.shape):new ci("\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",t.shape,e.shape);return this.compileAndRun(n,[t,e])},t.prototype.sinh=function(t){var e=new Ka(t.shape,"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},t.prototype.cosh=function(t){var e=new Ka(t.shape,"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n");return this.compileAndRun(e,[t])},t.prototype.tanh=function(t){var e=new Ka(t.shape,"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n");return this.compileAndRun(e,[t])},t.prototype.asinh=function(t){var e=new Ka(t.shape,"return log(x + sqrt(x * x + 1.0));");return this.compileAndRun(e,[t])},t.prototype.acosh=function(t){var e=new Ka(t.shape,"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\n  return log(x + sqrt(x * x - 1.0));");return this.compileAndRun(e,[t])},t.prototype.atanh=function(t){var e=new Ka(t.shape,"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\n  return (log(1.0 + x) - log(1.0 - x)) / 2.0;");return this.compileAndRun(e,[t])},t.prototype.erf=function(t){var e=new Ka(t.shape,'\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = 0.3275911;\n  float a1 = 0.254829592;\n  float a2 = -0.284496736;\n  float a3 = 1.421413741;\n  float a4 = -1.453152027;\n  float a5 = 1.061405429;\n\n  float t = 1.0 / (1.0 + p * x);\n  return 1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x);\n');return this.compileAndRun(e,[t])},t.prototype.step=function(t,e){var n=new Ka(t.shape,function(t){return void 0===t&&(t=0),Xa+"\n    return x > 0.0 ? 1.0 : float("+t+");\n  "}(e));return this.compileAndRun(n,[t])},t.prototype.conv2dByMatMul=function(t,e,n,r,o,i){var a=t.shape,s=this.texData.get(t.dataId),u=n.inChannels,c=a[0]*a[1]*a[2],l=n.outChannels,h="channelsLast"===n.dataFormat,d=(1===c||1===l)&&u>1e3,p=a[2]%2!=0&&!!s.isPacked;if(d||!f.getBool("WEBGL_LAZILY_UNPACK")||!f.getBool("WEBGL_PACK_BINARY_OPERATIONS")||!p){var v=h?a[0]*a[1]*a[2]:a[0]*a[2]*a[3],m=this.reshape(t,[1,v,n.inChannels]),g=this.reshape(e,[1,n.inChannels,n.outChannels]);return this.reshape(this.fusedBatchMatMul({a:m,b:g,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),n.outShape)}var y=h?a[0]*a[1]*(a[2]+1):a[0]*a[2]*(a[3]+1),b=vt.make([1,y,n.inChannels],{dataId:t.dataId},t.dtype,this),w=s.shape;s.shape=s.shape.slice(),s.shape[s.shape.length-2]++,x(ke(s.shape,b.shape),(function(){return"packed reshape "+s.shape+" to "+b.shape+" isn't free"}));var C=this.reshape(e,[1,n.inChannels,n.outChannels]),E=this.fusedBatchMatMul({a:b,b:C,transposeA:!1,transposeB:!1,bias:r,activation:o,preluActivationWeights:i}),R=this.texData.get(E.dataId);return x(R.isPacked,(function(){return"batchMatMul result is expected to be packed"})),s.shape=w,R.shape=n.outShape,vt.make(n.outShape,{dataId:E.dataId},E.dtype,this)},t.prototype.conv2dWithIm2Row=function(t,e,n,r,o,i){var a=n.filterWidth,s=n.filterHeight,u=n.inChannels,c=n.outWidth,l=n.outHeight,h="channelsLast"===n.dataFormat,f=a*s*u,d=l*c,p=[f,d],v=t.squeeze([0]),m=e.reshape([1,f,-1]),g=new la(p,v.shape,n),y=this.compileAndRun(g,[v]).reshape([1,p[0],p[1]]),x=null!=r,b=null!=i,w=o?fs(o,!0):null,C=new ma(y.shape,[1,d,n.outChannels],!0,!1,x,w,b),E=[y,m];r&&E.push(r),b&&E.push(i);var R=this.compileAndRun(C,E);return h?R.reshape([1,l,c,n.outChannels]):R.reshape([1,n.outChannels,l,c])},t.prototype.fusedConv2d=function(t,e,n,r,o,i){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n,r,o,i);if(f.getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n,r,o,i);var a=null!=r,s=null!=i,u=o?fs(o,!1):null,c=new Ei(n,a,u,s),l=[t,e];return r&&l.push(r),i&&l.push(i),this.compileAndRun(c,l)},t.prototype.conv2d=function(t,e,n){if(1===n.filterHeight&&1===n.filterWidth&&1===n.dilationHeight&&1===n.dilationWidth&&1===n.strideHeight&&1===n.strideWidth&&("SAME"===n.padInfo.type||"VALID"===n.padInfo.type))return this.conv2dByMatMul(t,e,n);if(f.getBool("WEBGL_CONV_IM2COL")&&1===t.shape[0])return this.conv2dWithIm2Row(t,e,n);var r=new Ei(n);return this.compileAndRun(r,[t,e])},t.prototype.conv2dDerInput=function(t,e,n){var r=new yi(n);return this.compileAndRun(r,[t,e])},t.prototype.conv2dDerFilter=function(t,e,n){var r=new gi(n);return this.compileAndRun(r,[t,e])},t.prototype.depthwiseConv2D=function(t,e,n){var r;return f.getBool("WEBGL_PACK_DEPTHWISECONV")&&n.strideWidth<=2&&n.outChannels/n.inChannels==1?(r=new Si(n),this.compileAndRun(r,[t,e],this.makePackedTensor(n.outShape,t.dtype))):(r=new Ii(n),this.compileAndRun(r,[t,e]))},t.prototype.depthwiseConv2DDerInput=function(t,e,n){var r=new Ci(n);return this.compileAndRun(r,[t,e])},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){var r=new wi(n);return this.compileAndRun(r,[t,e])},t.prototype.conv3d=function(t,e,n){var r=new Ri(n);return this.compileAndRun(r,[t,e])},t.prototype.conv3dDerInput=function(t,e,n){var r=new bi(n);return this.compileAndRun(r,[t,e])},t.prototype.conv3dDerFilter=function(t,e,n){var r=new xi(n);return this.compileAndRun(r,[t,e])},t.prototype.maxPool=function(t,e){var n=new Ca(e,"max",!1),r=this.makeOutputArray(n.outputShape,t.dtype);return this.compileAndRun(n,[t],r)},t.prototype.avgPool=function(t,e){var n=new Ca(e,"avg",!1),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t],r)},t.prototype.maxPoolBackprop=function(t,e,n,r){var o=new Ca(r,"max",!0),i=this.compileAndRun(o,[e]),a=new pa(r),s=this.makeOutputArray(a.outputShape,e.dtype),u=this.compileAndRun(a,[t,i],s);return i.dispose(),u},t.prototype.avgPoolBackprop=function(t,e,n){var r=new ti(n),o=this.makeOutputArray(r.outputShape,e.dtype);return this.compileAndRun(r,[t],o)},t.prototype.cast=function(t,e){return bo(t,e,this)},t.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==e&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(i=0;i<u.length;i++)a[e]=i,u[i]=this.slice(t,a,s).reshape(r);return u},t.prototype.avgPool3d=function(t,e){var n=new Ea(e,"avg",!1),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t],r)},t.prototype.avgPool3dBackprop=function(t,e,n){var r=new ei(n),o=this.makeOutputArray(r.outputShape,e.dtype);return this.compileAndRun(r,[t],o)},t.prototype.maxPool3d=function(t,e){var n=new Ea(e,"max",!1),r=this.makeOutputArray(n.outputShape,"float32");return this.compileAndRun(n,[t],r)},t.prototype.maxPool3dBackprop=function(t,e,n,r){var o=new Ea(r,"max",!0),i=this.compileAndRun(o,[e]),a=new va(r),s=this.makeOutputArray(a.outputShape,e.dtype),u=this.compileAndRun(a,[t,i],s);return i.dispose(),u},t.prototype.reshape=function(t,e){var n=this.texData.get(t.dataId);return!n.isPacked||ke(t.shape,e)||null!==n.texture&&ke(n.shape,e)?wo(t,e):this.packedReshape(t,e)},t.prototype.resizeBilinear=function(t,e,n,r){var o=f.getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new Aa(t.shape,e,n,r):new ka(t.shape,e,n,r);return this.compileAndRun(o,[t])},t.prototype.resizeBilinearBackprop=function(t,e,n){var r=new Sa(t,e,n);return this.compileAndRun(r,[t])},t.prototype.resizeNearestNeighbor=function(t,e,n,r){var o=new Ta(t.shape,e,n,r);return this.compileAndRun(o,[t])},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){var r=new Na(t,e,n);return this.compileAndRun(r,[t])},t.prototype.multinomial=function(t,e,n,r){var o=e?t:to(t),i=o.shape[0],a=o.shape[1],s=new ga(i,a,n),u=this.makeOutputArray(s.outputShape,"int32"),c=s.getCustomSetupFunc(r);return this.compileAndRun(s,[o],u,c)},t.prototype.oneHot=function(t,e,n,r){var o=new ya(t.size,e,n,r);return this.compileAndRun(o,[t])},t.prototype.diag=function(t){var e=new Oi(t.size);return this.compileAndRun(e,[t])},t.prototype.nonMaxSuppression=function(t,e,n,r,o){return on("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead"),Ao(t.dataSync(),e.dataSync(),n,r,o)},t.prototype.cropAndResize=function(t,e,n,r,o,i){var a=new ki(t.shape,e.shape,r,o,i);return this.compileAndRun(a,[t,e,n])},t.prototype.depthToSpace=function(t,e,n){x(e>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+e}));var r=t.shape[0],o="NHWC"===n?t.shape[1]:t.shape[2],i="NHWC"===n?t.shape[2]:t.shape[3],a="NHWC"===n?t.shape[3]:t.shape[1],s=o*e,u=i*e,c=a/(e*e),l=new _i("NHWC"===n?[r,s,u,c]:[r,c,s,u],e,n);return this.compileAndRun(l,[t])},t.prototype.split=function(t,e,n){return To(t,e,n)},t.prototype.scatterND=function(t,e,n){var r=Ur(0,t,n),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,s=r.strides,u=r.outputSize,c=[u/a,a],l=t.reshape([i,o]),h=e.reshape([i,a]);if(0===u)return wo(Rn([]),n);var f=Sn(0),d=new Oa(i,o,l.rank,h.rank,s,c);return this.compileAndRun(d,[h,l,f]).reshape(n)},t.prototype.sparseToDense=function(t,e,n,r){var o=Ur(0,t,n),i=o.sliceRank,a=o.numUpdates,s=o.strides,u=o.outputSize,c=new Oa(a,i,t.rank,e.rank,s,[u,1],!1);return this.compileAndRun(c,[e,t,r]).reshape(n)},t.prototype.fft=function(t){return this.fftImpl(t,!1)},t.prototype.ifft=function(t){return this.fftImpl(t,!0)},t.prototype.fftImpl=function(t,e){var n=this.texData.get(t.dataId),r=new Li("return real * expR - imag * expI;",t.shape,e),o=new Li("return real * expI + imag * expR;",t.shape,e),i=[this.makeComplexComponentTensorHandle(t,n.complexTensors.real),this.makeComplexComponentTensorHandle(t,n.complexTensors.imag)],a=this.compileAndRun(r,i),s=this.compileAndRun(o,i),u=this.complex(a,s).as2D(t.shape[0],t.shape[1]);return a.dispose(),s.dispose(),u},t.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Pr(t,e),i=o[0],a=o[1],s=o[2],u=o[3],c=e.reshape([a,r]),l=t.reshape([t.size/s,s]),h=new Gi(r,u,[a,s]);return this.compileAndRun(h,[l,c]).reshape(i)},t.prototype.fill=function(t,e,n){if("string"===(n=n||H(e))){var r=M(n,E(t));return r.fill(e),vt.make(t,{values:r},n)}var o=new Wi(t,e),i=o.getCustomSetupFunc(e),a=this.makeOutputArray(t,n);return this.compileAndRun(o,[],a,i)},t.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported under string dtype");return this.fill(t.shape,1,t.dtype)},t.prototype.zerosLike=function(t){return this.fill(t.shape,"string"===t.dtype?"":0,t.dtype)},t.prototype.linspace=function(t,e,n){return Co(t,e,n)},t.prototype.makeOutputArray=function(t,e){return vt.make(t,{},e,this)},t.prototype.makePackedTensor=function(t,e){var n=vt.make(t,{},e,this);return this.texData.get(n.dataId).isPacked=!0,n},t.prototype.unpackTensor=function(t){var e=new ls(t.shape);return this.compileAndRun(e,[t],vt.make(e.outputShape,{},t.dtype,this))},t.prototype.packTensor=function(t){var e=new xa(t.shape);return this.compileAndRun(e,[t],this.makePackedTensor(t.shape,t.dtype),null,!0)},t.prototype.packedReshape=function(t,e){var n=t.reshape([Ce(t.shape)].concat(Ee(t.shape))),r=[Ce(e)].concat(Ee(e)),o=new Ia(r,n.shape);return this.compileAndRun(o,[n]).reshape(e)},t.prototype.decode=function(t){var e,n=this.texData.get(t),r=n.isPacked,o=n.shape,i=n.dtype,a=Re(o),s=Gt(o),u=this.makeTensorHandle(o,"float32");return this.texData.get(u.dataId).isPacked=!0,this.texData.get(u.dataId).dtype=i,this.texData.get(u.dataId).texShape=s.map((function(t){return 2*t})),e=r?new Di(a,s):new Ti(a,s),this.compileAndRun(e,[{shape:a,dtype:i,dataId:t}],u,null,!0),u},t.prototype.compileAndRun=function(t,e,n,r,o){var i=this;if(void 0===o&&(o=!1),null==n&&(n=t.usesPackedTextures?this.makePackedTensor(t.outputShape,e[0].dtype):this.makeOutputArray(t.outputShape,e[0].dtype)),0===n.size)return this.texData.get(n.dataId).values=O(n.dtype,0),n;var a=e.map((function(e){if("complex64"===e.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");var n=i.texData.get(e.dataId);if(null==n.texture){if(!t.usesPackedTextures&&E(e.shape)<=f.getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:e.shape,texData:null,isUniform:!0,uniformValues:n.values};t.usesPackedTextures&&(n.isPacked=!0,n.shape=e.shape)}else if(!!n.isPacked!=!!t.usesPackedTextures)e=n.isPacked?i.unpackTensor(e):i.packTensor(e),n=i.texData.get(e.dataId);else if(n.isPacked&&!ke(n.shape,e.shape)){var r=e,o=e.shape;e.shape=n.shape,e=i.packedReshape(e,o),n=i.texData.get(e.dataId),r.shape=o}return i.uploadToGPU(e.dataId),{shape:e.shape,texData:n,isUniform:!1}}));this.uploadToGPU(n.dataId);var s,u={shape:n.shape,texData:this.texData.get(n.dataId),isUniform:!1},c=function(t,e,n){var r="";e.concat(n).forEach((function(t){var e=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0,n=t.isUniform?"uniform":t.texData.texShape;r+=t.shape+"_"+n+"_"+e}));var o=t.userCode;return t.constructor.name+"_"+r+"_"+o}(t,a,u),l=this.getAndSaveBinary(c,(function(){return function(t,e,n,r){var o=e.userCode,i=n.map((function(t,n){var r={logicalShape:t.shape,texShape:t.isUniform?null:t.texData.texShape,isUniform:t.isUniform,isPacked:!t.isUniform&&t.texData.isPacked,flatOffset:null};return null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0&&(r.flatOffset=t.texData.slice.flatOffset),{name:e.variableNames[n],shapeInfo:r}})),a=i.map((function(t){return t.shapeInfo})),s={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=Go(i,s,o,e.usesPackedTextures),c=t.createProgram(u),l=null,h=t.getUniformLocation(c,"NAN",!1);1===f.getNumber("WEBGL_VERSION")&&(l=t.getUniformLocation(c,"INFINITY",!1));for(var d={},p=0;p<e.variableNames.length;p++){var v=e.variableNames[p];d[v]=t.getUniformLocation(c,v,!1),d["offset"+v]=t.getUniformLocation(c,"offset"+v,!1)}return{program:e,source:u,webGLProgram:c,uniformLocations:d,inShapeInfos:a,outShapeInfo:s,infLoc:l,nanLoc:h}}(i.gpgpu,t,a,u)})),h=null!=this.activeTimers;return h&&(s=this.startTimer()),function(t,e,n,r,o){ca(e.inShapeInfos,n),ca([e.outShapeInfo],[r]);var i=r.texData.texture,a=r.texData.texShape;r.texData.isPacked?t.setOutputPackedMatrixTexture(i,a[0],a[1]):t.setOutputMatrixTexture(i,a[0],a[1]),t.setProgram(e.webGLProgram),1===f.getNumber("WEBGL_VERSION")&&null!==e.infLoc&&t.gl.uniform1f(e.infLoc,1/0),null!==e.nanLoc&&t.gl.uniform1f(e.nanLoc,NaN),n.forEach((function(n,r){var o=e.program.variableNames[r],i=e.uniformLocations[o],a=e.uniformLocations["offset"+o];if(null!=i)if(n.isUniform)if(E(n.shape)<2)t.gl.uniform1f(i,n.uniformValues[0]);else{var s=n.uniformValues;s instanceof Float32Array||(s=new Float32Array(s)),t.gl.uniform1fv(i,s)}else null!=n.texData.slice&&null!=a&&t.gl.uniform1i(a,n.texData.slice.flatOffset),t.setInputMatrixTexture(n.texData.texture,i,r)})),null!=o&&o(t,e.webGLProgram),t.executeProgram()}(this.gpgpu,l,a,u,r),h&&(s=this.endTimer(s),this.activeTimers.push({name:t.constructor.name,query:this.getQueryTime(s)})),!f.getBool("WEBGL_LAZILY_UNPACK")&&this.texData.get(n.dataId).isPacked&&!1===o?this.unpackTensor(n):n},t.prototype.getAndSaveBinary=function(t,e){return t in this.binaryCache||(this.binaryCache[t]=e()),this.binaryCache[t]},t.prototype.getTextureManager=function(){return this.textureManager},t.prototype.dispose=function(){this.disposed||(this.textureManager.dispose(),null!=this.canvas&&null!=this.canvas.remove?this.canvas.remove():this.canvas=null,null!=this.fromPixels2DContext&&this.fromPixels2DContext.canvas.remove&&this.fromPixels2DContext.canvas.remove(),this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0)},t.prototype.floatPrecision=function(){var t=this;return null==this.floatPrecisionValue&&(this.floatPrecisionValue=qe((function(){if(!f.get("WEBGL_RENDER_FLOAT32_ENABLED")){var e=f.getBool("DEBUG");f.set("DEBUG",!1);var n=t.abs(Sn(1e-8)).dataSync()[0];if(f.set("DEBUG",e),n>0)return 32}return 16}))),this.floatPrecisionValue},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.uploadToGPU=function(t){var e,n=this.texData.get(t),r=n.shape,o=n.dtype,i=n.values,a=n.texture,s=n.usage,u=n.isPacked;if(null==a){var c,l=null!=this.activeTimers;l&&(c=J());var h=n.texShape;if(null==h&&(h=Ie(r,u),n.texShape=h),null!=i){var f=Re(r),d=void 0,p=h[1],v=h[0],m=i instanceof Uint8Array;u?(p=(e=Ht(h[0],h[1]))[0],v=e[1],d=new Pi(f,[v,p],m)):d=new Bi(f,[v,p],m);var g=this.makeTensorHandle([v,p],o);this.texData.get(g.dataId).usage=m?Ft.PIXELS:Ft.UPLOAD,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(g.dataId),p,v,i);var y=this.makeTensorHandle(d.outputShape,g.dtype);y.size=E(d.outputShape),this.texData.get(y.dataId).isPacked=u,this.compileAndRun(d,[g],y);var x=this.texData.get(y.dataId);n.texture=x.texture,n.texShape=x.texShape,n.isPacked=x.isPacked,n.usage=x.usage,this.disposeData(g.dataId),this.texData.delete(y.dataId),n.values=null,l&&(this.uploadWaitMs+=J()-c)}else{var b=this.acquireTexture(h,s,o,u);n.texture=b}}},t.prototype.convertAndCacheOnCPU=function(t,e){var n=this.texData.get(t),r=n.dtype;return this.releaseGPUData(t),null!=e&&(n.values=function(t,e){if("float32"===e||"complex64"===e)return t;if("int32"===e||"bool"===e){for(var n="int32"===e?new Int32Array(t.length):new Uint8Array(t.length),r=0;r<n.length;++r)n[r]=Math.round(t[r]);return n}throw new Error("Unknown dtype "+e)}(e,r)),n.values},t.prototype.acquireTexture=function(t,e,n,r){if(this.numBytesInGPU+=this.computeBytes(t,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){var o=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn("High memory usage in GPU: "+o+" MB, most likely due to a memory leak")}return this.textureManager.acquireTexture(t,e,r)},t.prototype.computeBytes=function(t,e){return t[0]*t[1]*W(e)},t}();Mt()&&Ot.registerBackend("webgl",(function(){return new ps}),2);var vs=bn({abs_:function(t){var e=un(t,"x","abs");return"complex64"===e.dtype?Ot.runKernel((function(t){return t.complexAbs(e)}),{$x:e}):Ot.runKernel((function(t,n){var r=t.abs(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.toFloat().step(-1))}}}))}}),ms=bn({acos_:function(t){var e=un(t,"x","acos");return Ot.runKernel((function(t,n){var r=t.acos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Sn(1).sub(n.toFloat().square()).sqrt()).neg()}}}))}}),gs=bn({acosh_:function(t){var e=un(t,"x","acosh");return Ot.runKernel((function(t,n){var r=t.acosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(n.toFloat().square().sub(1).sqrt())}}}))}}),ys=bn({asin_:function(t){var e=un(t,"x","asin");return Ot.runKernel((function(t,n){var r=t.asin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Sn(1).sub(n.toFloat().square()).sqrt())}}}))}}),xs=bn({asinh_:function(t){var e=un(t,"x","asinh");return Ot.runKernel((function(t,n){var r=t.asinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.divStrict(Sn(1).add(n.toFloat().square()).sqrt())}}}))}}),bs=bn({atan_:function(t){var e=un(t,"x","atan");return Ot.runKernel((function(t,n){var r=t.atan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().square().add(1))}}}))}}),ws=bn({atanh_:function(t){var e=un(t,"x","atanh");return Ot.runKernel((function(t,n){var r=t.atanh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(Sn(1).sub(n.toFloat().square()))}}}))}}),Cs=bn({ceil_:function(t){var e=un(t,"x","ceil");return Ot.runKernel((function(t){return t.ceil(e)}),{$x:e},(function(t){return{$x:function(){return Wn(t)}}}))}}),Es=bn({clipByValue_:function(t,e,n){var r=un(t,"x","clipByValue");return x(e<=n,(function(){return"Error in clip: min ("+e+") must be less than or equal to max ("+n+")."})),Ot.runKernel((function(t,o){var i=t.clip(r,e,n);return o([r]),i}),{$x:r},(function(t,r){var o=r[0];return{$x:function(){return t.where(o.greaterEqual(e).logicalAnd(o.lessEqual(n)),Wn(t))}}}))}}),Rs=bn({cos_:function(t){var e=un(t,"x","cos");return Ot.runKernel((function(t,n){var r=t.cos(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sin().neg().mul(t)}}}))}}),Is=bn({cosh_:function(t){var e=un(t,"x","cosh");return Ot.runKernel((function(t,n){var r=t.cosh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().sinh().mulStrict(t)}}}))}}),Ss=bn({erf_:function(t){var e=un(t,"x","erf");return x("int32"===e.dtype||"float32"===e.dtype,(function(){return"Input dtype must be `int32` or `float32`."})),"int32"===e.dtype&&(e=e.toFloat()),Ot.runKernel((function(t,n){var r=t.erf(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.square().neg().exp().mul(2/Math.sqrt(Math.PI)))}}}))}}),ks=bn({exp_:function(t){var e=un(t,"x","exp");return Ot.runKernel((function(t,n){var r=t.exp(e);return n([r]),r}),{$x:e},(function(t,e){return{$x:function(){return t.mulStrict(e[0])}}}))}}),As=bn({expm1_:function(t){var e=un(t,"x","expm1");return Ot.runKernel((function(t,n){var r=t.expm1(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.exp())}}}))}}),Ns=bn({floor_:function(t){var e=un(t,"x","floor");return Ot.runKernel((function(t){return t.floor(e)}),{$x:e},(function(t){return{$x:function(){return Wn(t)}}}))}}),Ts=bn({log_:function(t){var e=un(t,"x","log");return Ot.runKernel((function(t,n){var r=t.log(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat())}}}))}}),Ds=bn({log1p_:function(t){var e=un(t,"x","log1p");return Ot.runKernel((function(t,n){var r=t.log1p(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.add(1))}}}))}}),_s=bn({logSigmoid_:function(t){var e=un(t,"x","logSigmoid");return Ot.runKernel((function(t,n){var r=t.softplus(e.neg()).neg();return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.neg().sigmoid())}}}))}}),Os=bn({neg_:function(t){var e=un(t,"x","neg");return Ot.runKernel((function(t){return t.neg(e)}),{$x:e},(function(t){return{$x:function(){return t.neg()}}}))}}),Ms=bn({reciprocal_:function(t){var e=un(t,"x","reciprocal");return Ot.runKernel((function(t,n){var r=t.reciprocal(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.square().neg())}}}))}}),Fs=bn({round_:function(t){var e=un(t,"x","round");return Ot.runKernel((function(t){return t.round(e)}),{$x:e},(function(t){return{$x:function(){return Wn(t)}}}))}}),Bs=bn({rsqrt_:function(t){var e=un(t,"x","rsqrt");return Ot.runKernel((function(t,n){var r=t.rsqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.pow(1.5).mul(2)).neg()}}}))}}),Ps=bn({sigmoid_:function(t){var e=un(t,"x","sigmoid");return Ot.runKernel((function(t,n){var r=t.sigmoid(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.mul(Sn(1).sub(n)))}}}))}}),Ls=bn({sign_:function(t){var e=un(t,"x","sign");return Ot.runKernel((function(t){return t.sign(e)}),{$x:e},(function(t){return{$x:function(){return Wn(t)}}}))}}),Ws=bn({isNaN_:function(t){var e=un(t,"x","isNaN");return Ot.runKernel((function(t){return t.isNaN(e)}),{$x:e},(function(t){return{$x:function(){return Wn(t)}}}))}}),Us=bn({isInf_:function(t){var e=un(t,"x","isInf");return Ot.runKernel((function(t){return t.isInf(e)}),{$x:e},(function(t){return{$x:function(){return Wn(t)}}}))}}),Vs=bn({isFinite_:function(t){var e=un(t,"x","isFinite");return Ot.runKernel((function(t){return t.isFinite(e)}),{$x:e},(function(t){return{$x:function(){return Wn(t)}}}))}}),zs=bn({sin_:function(t){var e=un(t,"x","sin");return Ot.runKernel((function(t,n){var r=t.sin(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cos().mul(t)}}}))}}),Gs=bn({sinh_:function(t){var e=un(t,"x","sinh");return Ot.runKernel((function(t,n){var r=t.sinh(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return n.toFloat().cosh().mulStrict(t)}}}))}}),Hs=bn({softplus_:function(t){var e=un(t,"x","softplus");return Ot.runKernel((function(t,n){var r=t.softplus(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.sigmoid())}}}))}}),qs=bn({sqrt_:function(t){var e=un(t,"x","sqrt");return Ot.runKernel((function(t,n){var r=t.sqrt(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.toFloat().sqrt().mul(2))}}}))}}),$s=bn({square_:function(t){var e=un(t,"x","square");return Ot.runKernel((function(t,n){return n([e]),t.square(e)}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mul(n.toFloat().mul(2))}}}))}}),js=bn({step_:function(t,e){void 0===e&&(e=0);var n=un(t,"x","step");return Ot.runKernel((function(t){return t.step(n,e)}),{$x:n},(function(t){return{$x:function(){return Wn(t)}}}))}}),Ks=bn({tan_:function(t){var e=un(t,"x","tan");return Ot.runKernel((function(t,n){var r=t.tan(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.div(n.cos().square())}}}))}}),Xs=bn({tanh_:function(t){var e=un(t,"x","tanh");return Ot.runKernel((function(t,n){var r=t.tanh(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Sn(1).sub(n.square()).mulStrict(t)}}}))}});function Ys(t,e,n,r,o,i){var a,s,u=un(t,"x","batchNorm"),c=un(e,"mean","batchNorm"),l=un(n,"variance","batchNorm");return null!=o&&(a=un(o,"scale","batchNorm")),null!=r&&(s=un(r,"offset","batchNorm")),x(2===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),x(2===c.rank||1===c.rank,(function(){return"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank "+c.rank+"."})),x(2===l.rank||1===l.rank,(function(){return"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank "+l.rank+"."})),null!=a&&x(2===a.rank||1===a.rank,(function(){return"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank "+a.rank+"."})),null!=s&&x(2===s.rank||1===s.rank,(function(){return"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank "+s.rank+"."})),Zs(u,c,l,s,a,i)}function Qs(t,e,n,r,o,i){var a,s,u=un(t,"x","batchNorm"),c=un(e,"mean","batchNorm"),l=un(n,"variance","batchNorm");return null!=o&&(a=un(o,"scale","batchNorm")),null!=r&&(s=un(r,"offset","batchNorm")),x(3===u.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+u.rank+"."})),x(3===c.rank||1===c.rank,(function(){return"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank "+c.rank+"."})),x(3===l.rank||1===l.rank,(function(){return"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank "+l.rank+"."})),null!=a&&x(3===a.rank||1===a.rank,(function(){return"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank "+a.rank+"."})),null!=s&&x(3===s.rank||1===s.rank,(function(){return"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank "+s.rank+"."})),Zs(u,c,l,s,a,i)}function Js(t,e,n,r,o,i){var a,s,u=un(t,"x","batchNorm"),c=un(e,"mean","batchNorm"),l=un(n,"variance","batchNorm");return null!=o&&(a=un(o,"scale","batchNorm")),null!=r&&(s=un(r,"offset","batchNorm")),x(4===u.rank,(function(){return"Error in batchNorm4D: x must be rank 4 but got rank "+u.rank+"."})),x(4===c.rank||1===c.rank,(function(){return"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank "+c.rank+"."})),x(4===l.rank||1===l.rank,(function(){return"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank "+l.rank+"."})),null!=a&&x(4===a.rank||1===a.rank,(function(){return"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank "+a.rank+"."})),null!=s&&x(4===s.rank||1===s.rank,(function(){return"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank "+s.rank+"."})),Zs(u,c,l,s,a,i)}function Zs(t,e,n,r,o,i){null==i&&(i=.001);var a,s,u,c=un(t,"x","batchNorm"),l=un(e,"mean","batchNorm"),h=un(n,"variance","batchNorm");return null!=o&&(a=un(o,"scale","batchNorm")),null!=r&&(s=un(r,"offset","batchNorm")),x(l.rank===h.rank,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),x(null==s||l.rank===s.rank,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),x(null==a||l.rank===a.rank,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."})),u=0===c.rank||1===c.rank?c.as4D(1,1,1,c.size):2===c.rank?c.as4D(1,1,c.shape[0],c.shape[1]):3===c.rank?c.as4D(1,c.shape[0],c.shape[1],c.shape[2]):c,Ot.runKernel((function(t,e){var n=t.batchNormalization(u,tu(l),tu(h),i,tu(a),tu(s));return e([c,l,h,a]),n}),{$x:c,$mean:l,$variance:h,$scale:a,$offset:s},(function(t,e){var n=e,r=n[0],o=n[1],a=n[2],s=n[3],c=null==s?Sn(1):s,l=io(o.shape,u.shape),h=[];if(1===o.rank){for(var f=0;f<u.shape.length-1;++f)h.push(u.shape[f]);h.push(1)}var d=r.sub(o),p=t.mul(c),v=Bs(a.add(Sn(i))),m=v.mul(v).mul(v).mul(Sn(-.5));return{$x:function(){return 1===o.rank?t.mul(Ar(v.as4D(1,1,1,o.shape[0]),h)).mul(c).reshape(r.shape):t.mul(v).mul(c).reshape(r.shape)},$mean:function(){var t=v.mul(Sn(-1)).mul(p);return 1===o.rank&&(t=t.sum(l)),t.reshape(o.shape)},$variance:function(){var t=m.mul(d).mul(p);return 1===o.rank&&(t=t.sum(l)),t.reshape(o.shape)},$scale:function(){var e=d.mul(v),n=t.mul(e);return 1===o.rank&&(n=n.sum(l)),n.reshape(o.shape)},$offset:function(){var e=t;return 1===o.rank&&(e=e.sum(l)),e.reshape(o.shape)}}})).reshape(c.shape)}function tu(t){return null==t?null:0===t.rank?t.as1D():1===t.rank?t:2===t.rank?t.as4D(1,1,t.shape[0],t.shape[1]):3===t.rank?t.as4D(1,t.shape[0],t.shape[1],t.shape[2]):t}function eu(){Ve("tf.batchNormalization() is going away. Use tf.batchNorm() instead, and note the positional argument change of scale, offset, and varianceEpsilon")}var nu=bn({batchNormalization2d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),eu(),Ys(t,e,n,i,o,r)}}),ru=bn({batchNormalization3d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),eu(),Qs(t,e,n,i,o,r)}}),ou=bn({batchNormalization4d_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),eu(),Js(t,e,n,i,o,r)}}),iu=bn({batchNormalization_:function(t,e,n,r,o,i){return void 0===r&&(r=.001),eu(),Zs(t,e,n,i,o,r)}}),au=bn({batchNorm_:Zs}),su=bn({batchNorm2d_:Ys}),uu=bn({batchNorm3d_:Qs}),cu=bn({batchNorm4d_:Js}),lu=bn({logicalAnd_:function(t,e){var n=un(t,"a","logicalAnd","bool"),r=un(e,"b","logicalAnd","bool");return ao(n.shape,r.shape),Ot.runKernel((function(t){return t.logicalAnd(n,r)}),{$a:n,$b:r})}}),hu=bn({logicalNot_:function(t){var e=un(t,"x","logicalNot","bool");return Ot.runKernel((function(t){return t.logicalNot(e)}),{$x:e})}}),fu=bn({logicalOr_:function(t,e){var n=un(t,"a","logicalOr","bool"),r=un(e,"b","logicalOr","bool");return ao(n.shape,r.shape),Ot.runKernel((function(t){return t.logicalOr(n,r)}),{$a:n,$b:r})}}),du=bn({logicalXor_:function(t,e){var n=un(t,"a","logicalXor","bool"),r=un(e,"b","logicalXor","bool");return ao(n.shape,r.shape),fu(t,e).logicalAnd(lu(t,e).logicalNot())}}),pu=bn({where_:function(t,e,n){var r=un(e,"a","where"),o=un(n,"b","where"),i=un(t,"condition","where","bool");return b(r.shape,o.shape,"Error in where: "),1===i.rank?x(i.shape[0]===r.shape[0],(function(){return"The first dimension of `a` must match the size of `condition`."})):b(i.shape,o.shape,"Error in where: "),Ot.runKernel((function(t,e){var n=t.select(i,r,o);return e([i]),n}),{$condition:i,$a:r,$b:o},(function(t,e){var n=e[0];return{$condition:function(){return Wn(n).toFloat()},$a:function(){return t.mul(n.cast(t.dtype))},$b:function(){return t.mul(n.logicalNot().cast(t.dtype))}}}))}}),vu=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(o){switch(o.label){case 0:return[4,(e=un(t,"condition","whereAsync","bool")).data()];case 1:return n=o.sent(),r=Oo(e.shape,n),t!==e&&e.dispose(),[2,r]}}))}))},mu=bn({add_:function(t,e){var n,r=un(t,"a","add"),o=un(e,"b","add");n=St(r,o),r=n[0],o=n[1];var i=ao(r.shape,o.shape);return Ot.runKernel((function(t){return t.add(r,o)}),{$a:r,$b:o},(function(t){return{$a:function(){var e=t,n=io(r.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},$b:function(){var e=t,n=io(o.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(o.shape)}}}))}}),gu=bn({addN_:function(t){x(Array.isArray(t),(function(){return"The argument passed to tf.addN() must be a list of tensors"})),x(t.length>=1,(function(){return"Must pass at least one tensor to tf.addN(), but got "+t.length}));var e=t.map((function(t,e){return un(t,"tensors"+e,"addN")})),n=e[0];e.forEach((function(t){if(t.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),e.forEach((function(t){if(!R(t.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));var r=e;return Ot.runKernel((function(t){return t.addN(e)}),r,(function(t){var n={};return e.forEach((function(e,r){n[r]=function(){return t.clone()}})),n}))}}),yu=bn({addStrict_:function(t,e){var n=un(t,"a","addStrict"),r=un(e,"b","addStrict");return b(n.shape,r.shape,"Error in addStrict: "),n.add(r)}}),xu=bn({atan2_:function(t,e){var n,r=un(t,"a","atan2"),o=un(e,"b","atan2");n=St(r,o),r=n[0],o=n[1];var i=ao(r.shape,o.shape);return Ot.runKernel((function(t,e){var n=t.atan2(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=mu(n.square(),r.square()),o=t.mul(r.div(e)),a=io(n.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(n.shape)},$b:function(){var e=mu(n.square(),r.square()),o=Os(t.mul(n.div(e))),a=io(r.shape,i);return a.length>0&&(o=o.sum(a)),o.reshape(r.shape)}}}))}}),bu=bn({div_:function(t,e){var n,r=un(t,"a","div"),o=un(e,"b","div");if(n=St(r,o),r=n[0],o=n[1],"int32"===r.dtype&&"int32"===o.dtype)return Cu(r,o);var i=ao(r.shape,o.shape);return Ot.runKernel((function(t,e){var n=t.realDivide(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=t.div(r.toFloat()),o=io(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},$b:function(){var e=t.mul(n.toFloat()),o=io(r.shape,i);o.length>0&&(e=e.sum(o).reshape(r.shape));var a=r.square();return e.div(a.toFloat()).neg()}}}))}}),wu=bn({divStrict_:function(t,e){var n=un(t,"a","div"),r=un(e,"b","div");return b(n.shape,r.shape,"Error in divideStrict: "),n.div(r)}}),Cu=bn({floorDiv_:function(t,e){var n,r=un(t,"a","floorDiv"),o=un(e,"b","floorDiv");n=St(r,o),r=n[0],o=n[1];var i=ao(r.shape,o.shape);return Ot.runKernel((function(t,e){var n=t.floorDiv(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=t.div(r.toFloat()),o=io(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},$b:function(){var e=t.mul(n.toFloat()),o=io(r.shape,i);o.length>0&&(e=e.sum(o).reshape(r.shape));var a=r.square();return e.div(a.toFloat()).neg()}}}))}}),Eu=bn({maximum_:function(t,e){var n,r=un(t,"a","maximum"),o=un(e,"b","maximum");return n=St(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),ao(r.shape,o.shape),Ot.runKernel((function(t,e){var n=t.maximum(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return t.mul(n.greaterEqual(r).toFloat())},$b:function(){return t.mul(n.less(r).toFloat())}}}))}}),Ru=bn({maximumStrict_:function(t,e){var n=un(t,"a","maximumStrict"),r=un(e,"b","maximumStrict");return b(n.shape,r.shape,"Error in maximumStrict: "),n.maximum(r)}}),Iu=bn({minimum_:function(t,e){var n,r=un(t,"a","minimum"),o=un(e,"b","minimum");return n=St(r,o),r=n[0],o=n[1],"bool"===r.dtype&&(r=r.toInt(),o=o.toInt()),ao(r.shape,o.shape),Ot.runKernel((function(t,e){var n=t.minimum(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return t.mul(n.lessEqual(r).toFloat())},$b:function(){return t.mul(n.greater(r).toFloat())}}}))}}),Su=bn({minimumStrict_:function(t,e){var n=un(t,"a","minimumStrict"),r=un(e,"b","minimumStrict");return b(n.shape,r.shape,"Error in minimumStrict: "),n.minimum(r)}}),ku=bn({mod_:function(t,e){var n,r=un(t,"a","mod"),o=un(e,"b","mod");n=St(r,o),r=n[0],o=n[1];var i=ao(r.shape,o.shape);return Ot.runKernel((function(t,e){var n=t.mod(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=io(n.shape,i);return e.length>0?t.sum(e).reshape(n.shape):t},$b:function(){var e=t.mul(n.div(r).floor().neg()),o=io(r.shape,i);return o.length>0?e.sum(o).reshape(r.shape):e}}}))}}),Au=bn({modStrict_:function(t,e){var n=un(t,"a","modStrict"),r=un(e,"b","modStrict");return b(n.shape,r.shape,"Error in modStrict: "),n.mod(r)}}),Nu=bn({mul_:function(t,e){var n,r=un(t,"a","mul"),o=un(e,"b","mul");n=St(r,o),r=n[0],o=n[1];var i=ao(r.shape,o.shape);return Ot.runKernel((function(t,e){var n=t.multiply(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){var e=t.mul(r.toFloat()),o=io(n.shape,i);return o.length>0?e.sum(o).reshape(n.shape):e},$b:function(){var e=t.mul(n.toFloat()),o=io(r.shape,i);return o.length>0?e.sum(o).reshape(r.shape):e}}}))}}),Tu=bn({mulStrict_:function(t,e){var n=un(t,"a","mul"),r=un(e,"b","mul");return b(n.shape,r.shape,"Error in multiplyStrict: "),n.mul(r)}}),Du=bn({pow_:function(t,e){var n=un(t,"base","pow"),r=un(e,"exp","pow"),o=ao(n.shape,r.shape);return t=n.cast(Rt(n.dtype,r.dtype)),e=r.cast(Rt(n.dtype,r.dtype)),Ot.runKernel((function(t,e){var o=t.pow(n,r);return e([n,r,o]),o}),{$base:n,$exp:r},(function(t,e){var n=e[0],r=e[1],i=e[2];return{$base:function(){var e=r.toFloat(),i=t.mul(e.mul(n.pow(e.sub(Sn(1))))),a=io(n.shape,o);return a.length>0&&(i=i.sum(a)),i.reshape(n.shape)},$exp:function(){var e=n.greater(0),a=n.log().where(e,Wn(n)),s=t.mul(i.mul(a)),u=io(r.shape,o);return u.length>0&&(s=s.sum(u)),s.reshape(r.shape)}}}))}}),_u=bn({powStrict_:function(t,e){return b(t.shape,e.shape,"Error in powStrict: "),t.pow(e)}}),Ou=bn({squaredDifference_:function(t,e){var n,r=un(t,"a","squaredDifference"),o=un(e,"b","squaredDifference");return n=St(r,o),r=n[0],o=n[1],ao(r.shape,o.shape),Ot.runKernel((function(t,e){var n=t.squaredDifference(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1],o=Sn(2);return{$a:function(){return t.mul(n.sub(r).mul(o))},$b:function(){return t.mul(r.sub(n).mul(o))}}}))}}),Mu=bn({squaredDifferenceStrict_:function(t,e){var n=un(t,"a","squaredDifferenceStrict"),r=un(e,"b","squaredDifferenceStrict");return b(n.shape,r.shape,"Error in squaredDifferenceStrict: "),n.squaredDifference(r)}}),Fu=bn({sub_:function(t,e){var n,r=un(t,"a","sub"),o=un(e,"b","sub");n=St(r,o),r=n[0],o=n[1];var i=ao(r.shape,o.shape);return Ot.runKernel((function(t){return t.subtract(r,o)}),{$a:r,$b:o},(function(t){return{$a:function(){var e=t,n=io(r.shape,i);return n.length>0&&(e=e.sum(n)),e.reshape(r.shape)},$b:function(){var e=t,n=io(o.shape,i);return n.length>0&&(e=e.sum(n)),e.neg().reshape(o.shape)}}}))}}),Bu=bn({subStrict_:function(t,e){var n=un(t,"a","subStrict"),r=un(e,"b","subStrict");return b(n.shape,r.shape,"Error in subStrict: "),n.sub(r)}}),Pu=bn({equal_:function(t,e){var n,r=un(t,"a","equal"),o=un(e,"b","equal");return n=St(r,o),r=n[0],o=n[1],ao(r.shape,o.shape),Ot.runKernel((function(t){return t.equal(r,o)}),{$a:r,$b:o})}}),Lu=bn({equalStrict_:function(t,e){var n=un(t,"a","equalStrict"),r=un(e,"b","equalStrict");return b(n.shape,r.shape,"Error in equalStrict: "),n.equal(r)}}),Wu=bn({greater_:function(t,e){var n,r=un(t,"a","greater"),o=un(e,"b","greater");return n=St(r,o),r=n[0],o=n[1],ao(r.shape,o.shape),Ot.runKernel((function(t){return t.greater(r,o)}),{$a:r,$b:o})}}),Uu=bn({greaterEqual_:function(t,e){var n,r=un(t,"a","greaterEqual"),o=un(e,"b","greaterEqual");return n=St(r,o),r=n[0],o=n[1],ao(r.shape,o.shape),Ot.runKernel((function(t,e){var n=t.greaterEqual(r,o);return e([r,o]),n}),{$a:r,$b:o},(function(t,e){var n=e[0],r=e[1];return{$a:function(){return Wn(n)},$b:function(){return Wn(r)}}}))}}),Vu=bn({greaterEqualStrict_:function(t,e){var n=un(t,"a","greaterEqualStrict"),r=un(e,"b","greaterEqualStrict");return b(n.shape,r.shape,"Error in greaterEqualStrict: "),n.greaterEqual(r)}}),zu=bn({greaterStrict_:function(t,e){var n=un(t,"a","greaterStrict"),r=un(e,"b","greaterStrict");return b(n.shape,r.shape,"Error in greaterStrict: "),n.greater(r)}}),Gu=bn({less_:function(t,e){var n,r=un(t,"a","less"),o=un(e,"b","less");return n=St(r,o),r=n[0],o=n[1],ao(r.shape,o.shape),Ot.runKernel((function(t){return t.less(r,o)}),{$a:r,$b:o})}}),Hu=bn({lessEqual_:function(t,e){var n,r=un(t,"a","lessEqual"),o=un(e,"b","lessEqual");return n=St(r,o),r=n[0],o=n[1],ao(r.shape,o.shape),Ot.runKernel((function(t){return t.lessEqual(r,o)}),{$a:r,$b:o})}}),qu=bn({lessEqualStrict_:function(t,e){var n=un(t,"a","lessEqualStrict"),r=un(e,"b","lessEqualStrict");return b(n.shape,r.shape,"Error in lessEqualStrict: "),n.lessEqual(r)}}),$u=bn({lessStrict_:function(t,e){var n=un(t,"a","lessStrict"),r=un(e,"b","lessStrict");return b(n.shape,r.shape,"Error in lessStrict: "),n.less(r)}}),ju=bn({notEqual_:function(t,e){var n,r=un(t,"a","notEqual"),o=un(e,"b","notEqual");return n=St(r,o),r=n[0],o=n[1],ao(r.shape,o.shape),Ot.runKernel((function(t){return t.notEqual(r,o)}),{$a:r,$b:o})}}),Ku=bn({notEqualStrict_:function(t,e){var n=un(t,"a","notEqualStrict"),r=un(e,"b","notEqualStrict");return b(n.shape,r.shape,"Error in notEqualStrict: "),n.notEqual(r)}});function Xu(t,e){for(var n=[],r=t;r<e;++r)n.push(r);return n}function Yu(t){for(var e=[],n=0;n<t.length;++n)for(var r=0;r<t[n].length;++r)e.push(t[n][r]);return e}var Qu=bn({gather_:function(t,e,n){void 0===n&&(n=0);var r=un(t,"x","gather"),o=un(e,"indices","gather","int32");n=D(n,r.shape)[0];var i=function(t,e,n){for(var r=t.shape[n],o=[],i=1,a=1,s=0;s<n;s++)o.push(t.shape[s]),i*=t.shape[s];for(s=0;s<e.rank;s++)o.push(e.shape[s]);for(s=n+1;s<t.rank;s++)o.push(t.shape[s]),a*=t.shape[s];return{batchSize:i,sliceSize:a,dimSize:r,outputShape:o}}(r,o,n);return Ot.runKernel((function(t,e){var i=t.gather(r,o.flatten(),n);return e([o]),i}),{$x:r},(function(t,e){var o=e[0];return{$x:function(){var e=r.shape,i=o.size,a=e.slice(0,n),s=a.length,u=e.slice(n,e.length).slice(1),c=u.length,l=Xu(0,s),h=Xu(s+1,s+1+c),f=Yu([a,[i],u]),d=t.reshape(f),p=o.reshape([i]),v=Yu([[s],l,h]),m=d.transpose(v),g=Ju(m,p,r.shape[n]),y=mn(v);return g.transpose(y)}}})).reshape(i.outputShape)}}),Ju=bn({unsortedSegmentSum_:function(t,e,n){var r=un(t,"x","unsortedSegmentSum"),o=un(e,"segmentIds","unsortedSegmentSum","int32");return x(I(n),(function(){return"numSegments must be of dtype int"})),Ot.runKernel((function(t,e){var i=t.unsortedSegmentSum(r,o,n);return e([o]),i}),{$x:r},(function(t,e){var n=e[0];return{$x:function(){return function(t,e){for(var n=Eu(e,Wn(e)),r=Qu(t,n),o=Uu(e,Sn(0,"int32")),i=r.rank-o.rank,a=0;a<i;++a)o=hr(o,a+1);o=lu(o,On(r.shape,"bool"));var s=Wn(r);return pu(o,r,s)}(t,n)}}}))}}),Zu=function(t,e,n){return u(this,void 0,void 0,(function(){var r,o,i,a,s,u,l,h,f,d,p,v,m;return c(this,(function(c){switch(c.label){case 0:for(r=un(t,"tensor","boolMask"),o=un(e,"mask","boolMask","bool"),i=null==n?0:n,a=o.rank,s=r.shape,x(a>0,(function(){return"mask cannot be scalar"})),b(s.slice(i,i+a),o.shape,"mask's shape must match the first K dimensions of tensor's shape,"),u=1,l=i;l<i+a;l++)u*=s[l];return h=s.slice(0,i).concat([u],s.slice(i+a)),f=r.reshape(h),d=o.reshape([-1]),[4,vu(d)];case 1:return p=c.sent(),v=p.squeeze([1]),m=Qu(f,v,i),t!==r&&r.dispose(),e!==o&&o.dispose(),v.dispose(),f.dispose(),d.dispose(),p.dispose(),[2,m]}}))}))};function tc(t,e,n,r,o,i,a){void 0===i&&(i="NHWC"),x(t.length===e.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var s=t,u=e,c=!1;3===e.rank&&(c=!0,u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]),s=[1,t[0],t[1],t[2]]),x(4===s.length,(function(){return"Error in conv2dDerInput: inShape must be length 4, but got length "+s.length+"."})),x(4===u.rank,(function(){return"Error in conv2dDerInput: dy must be rank 4, but got rank "+u.rank})),x(4===n.rank,(function(){return"Error in conv2dDerInput: filter must be rank 4, but got rank "+n.rank}));var l="NHWC"===i?s[3]:s[1],h="NHWC"===i?u.shape[3]:u.shape[1];x(l===n.shape[2],(function(){return"Error in conv2dDerInput: depth of input ("+l+") must match input depth for filter "+n.shape[2]+"."})),x(h===n.shape[3],(function(){return"Error in conv2dDerInput: depth of output ("+h+") must match output depth for filter "+n.shape[3]+"."})),null!=a&&x(I(o),(function(){return"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var f=xo(i),d=co(s,n.shape,r,1,o,a,!1,f),p=Ot.runKernel((function(t,e){var r=t.conv2dDerInput(u,n,d);return e([n,u]),r}),{dy4D:u,filter:n},(function(t,e){var n=e[0],s=e[1];return{dy4D:function(){return ic(t,n,r,o,i,1,a)},filter:function(){return sc(t,s,n.shape,r,o,i,a)}}}));return c?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}function ec(t,e,n,r,o,i,a){void 0===i&&(i="NHWC");var s=t;3===t.rank&&(s=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var u=e;3===u.rank&&(u=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),x(4===s.rank,(function(){return"Error in conv2dDerFilter: input must be rank 4, but got shape "+s.shape+"."})),x(4===u.rank,(function(){return"Error in conv2dDerFilter: dy must be rank 4, but got shape "+u.shape+"."})),x(4===n.length,(function(){return"Error in conv2dDerFilter: filterShape must be length 4, but got "+n+"."}));var c="NHWC"===i?s.shape[3]:s.shape[1],l="NHWC"===i?u.shape[3]:u.shape[1];x(c===n[2],(function(){return"Error in conv2dDerFilter: depth of input "+c+") must match input depth in filter ("+n[2]+"."})),x(l===n[3],(function(){return"Error in conv2dDerFilter: depth of dy ("+l+") must match output depth for filter ("+n[3]+")."})),null!=a&&x(I(o),(function(){return"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+o+"."}));var h=xo(i),f=co(s.shape,n,r,1,o,a,!1,h);return Ot.runKernel((function(t){return t.conv2dDerFilter(s,u,f)}),{x4D:s,dy4D:u})}function nc(t){var e=function(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}(t),n=e[0],r=e[1],o=e[2];return 1===n&&1===r&&1===o}function rc(t,e,n,r,o){x(t.length===e.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+e.rank+") must match"}));var i=t,a=e,s=!1;4===e.rank&&(s=!0,a=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3]),i=[1,t[0],t[1],t[2],t[3]]);var u=i[4],c=a.shape[4];x(5===i.length,(function(){return"Error in conv3dDerInput: inShape must be length 5, but got length "+i.length+"."})),x(5===a.rank,(function(){return"Error in conv3dDerInput: dy must be rank 5, but got rank "+a.rank})),x(5===n.rank,(function(){return"Error in conv3dDerInput: filter must be rank 5, but got rank "+n.rank})),x(u===n.shape[3],(function(){return"Error in conv3dDerInput: depth of input ("+u+") must match input depth for filter "+n.shape[3]+"."})),x(c===n.shape[4],(function(){return"Error in conv3dDerInput: depth of output ("+c+") must match output depth for filter "+n.shape[4]+"."}));var l=lo(i,n.shape,r,1,o),h=Ot.runKernel((function(t){return t.conv3dDerInput(a,n,l)}),{dy5D:a});return s?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}var oc=bn({conv1d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NWC"),void 0===i&&(i=1);var s=un(t,"x","conv1d"),u=un(e,"filter","conv1d"),c=s,l=!1;2===s.rank&&(l=!0,c=s.as3D(1,s.shape[0],s.shape[1])),x(3===c.rank,(function(){return"Error in conv1d: input must be rank 3, but got rank "+c.rank+"."})),x(3===u.rank,(function(){return"Error in conv1d: filter must be rank 3, but got rank "+u.rank+"."})),null!=a&&x(I(r),(function(){return"Error in conv1d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."})),x(c.shape[2]===u.shape[1],(function(){return"Error in conv1d: depth of input ("+c.shape[2]+") must match input depth for filter "+u.shape[1]+"."})),x(yo(n,i),(function(){return"Error in conv1D: Either stride or dilation must be 1. Got stride "+n+" and dilation '"+i+"'"})),x("NWC"===o,(function(){return"Error in conv1d: got dataFormat of "+o+" but only NWC is currently supported."}));var h=u.as4D(1,u.shape[0],u.shape[1],u.shape[2]),f=c.as4D(c.shape[0],1,c.shape[1],c.shape[2]),d=ic(f,h,[1,n],r,"NHWC",[1,i],a);return l?d.as2D(d.shape[2],d.shape[3]):d.as3D(d.shape[0],d.shape[2],d.shape[3])}}),ic=bn({conv2d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var s=un(t,"x","conv2d"),u=un(e,"filter","conv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),x(4===c.rank,(function(){return"Error in conv2d: input must be rank 4, but got rank "+c.rank+"."})),x(4===u.rank,(function(){return"Error in conv2d: filter must be rank 4, but got rank "+u.rank+"."})),null!=a&&x(I(r),(function(){return"Error in conv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var h="NHWC"===o?c.shape[3]:c.shape[1];x(h===u.shape[2],(function(){return"Error in conv2d: depth of input ("+h+") must match input depth for filter "+u.shape[2]+"."})),x(yo(n,i),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"}));var f=xo(o),d=co(c.shape,u.shape,n,i,r,a,!1,f),p=Ot.runKernel((function(t,e){var n=t.conv2d(c,u,d);return e([u,c]),n}),{x:c,$filter:u},(function(t,e){var a=e,s=a[0],u=a[1];return x(go(i),(function(){return"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"})),{x:function(){return tc(u.shape,t,s,n,r,o)},$filter:function(){return ec(u,t,s.shape,n,r,o)}}}));return l?p.as3D(p.shape[1],p.shape[2],p.shape[3]):p}}),ac=bn({conv3d_:function(t,e,n,r,o,i){void 0===o&&(o="NDHWC"),void 0===i&&(i=[1,1,1]);var a=un(t,"x","conv3d"),s=un(e,"filter","conv3d"),u=a,c=!1;4===a.rank&&(c=!0,u=a.as5D(1,a.shape[0],a.shape[1],a.shape[2],a.shape[3])),x(5===u.rank,(function(){return"Error in conv3d: input must be rank 5, but got rank "+u.rank+"."})),x(5===s.rank,(function(){return"Error in conv3d: filter must be rank 5, but got rank "+s.rank+"."})),x(u.shape[4]===s.shape[3],(function(){return"Error in conv3d: depth of input ("+u.shape[4]+") must match input depth for filter "+s.shape[3]+"."})),x(function(t,e){return nc(t)||nc(e)}(n,i),(function(){return"Error in conv3D: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),x("NDHWC"===o,(function(){return"Error in conv3d: got dataFormat of "+o+" but only NDHWC is currently supported."}));var l=lo(u.shape,s.shape,n,i,r),h=Ot.runKernel((function(t,e){var n=t.conv3d(u,s,l);return e([u,s]),n}),{x:u,$filter:s},(function(t,e){x(nc(i),(function(){return"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+i+"'"}));var o=e[0],a=e[1];return{x:function(){return rc(o.shape,t,a,n,r)},$filter:function(){return function(t,e,n,r,o){var i=t;4===t.rank&&(i=t.as5D(1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]));var a=e;4===a.rank&&(a=e.as5D(1,e.shape[0],e.shape[1],e.shape[2],e.shape[3])),x(5===i.rank,(function(){return"Error in conv3dDerFilter: input must be rank 5, but got shape "+i.shape+"."})),x(5===a.rank,(function(){return"Error in conv3dDerFilter: dy must be rank 5, but got shape "+a.shape+"."})),x(5===n.length,(function(){return"Error in conv3dDerFilter: filterShape must be length 5, but got "+n+"."})),x(i.shape[4]===n[3],(function(){return"Error in conv3dDerFilter: depth of input "+i.shape[4]+") must match input depth in filter ("+n[3]+"."})),x(a.shape[4]===n[4],(function(){return"Error in conv3dDerFilter: depth of dy ("+a.shape[4]+") must match output depth for filter ("+n[4]+")."}));var s=lo(i.shape,n,r,1,o);return Ot.runKernel((function(t){return t.conv3dDerFilter(i,a,s)}),{x5D:i,dy5D:a})}(o,t,a.shape,n,r)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),sc=bn({conv2dDerFilter_:ec}),uc=bn({conv2dDerInput_:tc}),cc=bn({depthwiseConv2d_:function(t,e,n,r,o,i,a){void 0===o&&(o="NHWC"),void 0===i&&(i=[1,1]);var s=un(t,"x","depthwiseConv2d"),u=un(e,"filter","depthwiseConv2d"),c=s,l=!1;3===s.rank&&(l=!0,c=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),x(4===c.rank,(function(){return"Error in depthwiseConv2d: input must be rank 4, but got rank "+c.rank+"."})),x(4===u.rank,(function(){return"Error in depthwiseConv2d: filter must be rank 4, but got rank "+u.rank+"."})),x(c.shape[3]===u.shape[2],(function(){return"Error in depthwiseConv2d: number of input channels ("+c.shape[3]+") must match the inChannels dimension in filter "+u.shape[2]+"."})),null==i&&(i=[1,1]),x(yo(n,i),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+i+"'"})),null!=a&&x(I(r),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+r+"."}));var h=co(c.shape,u.shape,n,i,r,a,!0),f=Ot.runKernel((function(t,e){var n=t.depthwiseConv2D(c,u,h);return e([c,u]),n}),{x:c,$filter:u},(function(t,e){x(go(i),(function(){return"Error in gradient of depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+i+"'"}));var n=e[0],r=e[1];return{x:function(){return function(t,e,n,r){var o=e,i=!1;3===e.rank&&(i=!0,o=e.as4D(1,e.shape[0],e.shape[1],e.shape[2]));var a=Ot.runKernel((function(t){return t.depthwiseConv2DDerInput(o,n,r)}),{dy4D:o});return i?a.as3D(a.shape[1],a.shape[2],a.shape[3]):a}(n.shape,t,r,h)},$filter:function(){return function(t,e,n,r){var o=t;3===t.rank&&(o=t.as4D(1,t.shape[0],t.shape[1],t.shape[2]));var i=e;return 3===i.rank&&(i=e.as4D(1,e.shape[0],e.shape[1],e.shape[2])),Ot.runKernel((function(t){return t.depthwiseConv2DDerFilter(o,i,r)}),{x4D:o,dy4D:i})}(n,t,r.shape,h)}}}));return l?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}}),lc=bn({separableConv2d_:function(t,e,n,r,o,i,a){void 0===i&&(i=[1,1]),void 0===a&&(a="NHWC");var s=un(t,"x","separableConv2d"),u=un(e,"depthwiseFilter","separableConv2d"),c=un(n,"pointwiseFilter","separableConv2d"),l=s,h=!1;if(3===s.rank&&(h=!0,l=s.as4D(1,s.shape[0],s.shape[1],s.shape[2])),"NCHW"===a)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");x(4===l.rank,(function(){return"Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."})),x(4===u.rank,(function(){return"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+u.rank+"."})),x(4===c.rank,(function(){return"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+u.rank+"."})),x(1===c.shape[0],(function(){return"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+c.shape[0]+"."})),x(1===c.shape[1],(function(){return"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got "+c.shape[1]+"."}));var f=u.shape[2],d=u.shape[3];x(c.shape[2]===f*d,(function(){return"Error in separableConv2d: the third dimension of pointwise filter must be "+f*d+", but got "+c.shape[2]+"."}));var p=cc(l,u,r,o,a,i),v=ic(p,c,1,"valid",a);return h?v.as3D(v.shape[1],v.shape[2],v.shape[3]):v}}),hc=bn({conv2dTranspose_:function(t,e,n,r,o,i){return tc(n,un(t,"x","conv2dTranspose"),un(e,"filter","conv2dTranspose"),r,o,"NHWC",i)}}),fc=bn({conv3dTranspose_:function(t,e,n,r,o){return rc(n,un(t,"x","conv3dTranspose"),un(e,"filter","conv3dTranspose"),r,o)}}),dc=bn({matMul_:function(t,e,n,r){var o;void 0===n&&(n=!1),void 0===r&&(r=!1);var i=un(t,"a","matMul"),a=un(e,"b","matMul");o=St(i,a),i=o[0],a=o[1];var s=n?i.shape[i.rank-2]:i.shape[i.rank-1],u=r?a.shape[a.rank-1]:a.shape[a.rank-2],c=n?i.shape[i.rank-1]:i.shape[i.rank-2],l=r?a.shape[a.rank-2]:a.shape[a.rank-1],h=i.shape.slice(0,-2),f=a.shape.slice(0,-2),d=E(h),p=E(f);x(i.rank>=2&&a.rank>=2&&i.rank===a.rank,(function(){return"Error in matMul: inputs must have the same rank of at least 2, got ranks "+i.rank+" and "+a.rank+"."})),x(R(h,f),(function(){return"Error in matMul: outer dimensions ("+h+") and ("+f+") of Tensors with shapes "+i.shape+" and "+a.shape+" must match."})),x(s===u,(function(){return"Error in matMul: inner shapes ("+s+") and ("+u+") of Tensors with shapes "+i.shape+" and "+a.shape+" and transposeA="+n+" and transposeB="+r+" must match."}));var v=i.shape.slice(0,-2).concat([c,l]),m=n?i.as3D(d,s,c):i.as3D(d,c,s),g=r?a.as3D(p,l,u):a.as3D(p,u,l);return Ot.runKernel((function(t,e){var o=t.batchMatMul(m,g,n,r);return e([m,g]),o}),{$a:m,$b:g},(function(t,e){var o=e,i=o[0],a=o[1];return n||r?!n&&r?{$a:function(){return t.matMul(a,!1,!1)},$b:function(){return t.matMul(i,!0,!1)}}:n&&!r?{$a:function(){return a.matMul(t,!1,!0)},$b:function(){return i.matMul(t,!1,!1)}}:{$a:function(){return a.matMul(t,!0,!0)},$b:function(){return t.matMul(i,!0,!0)}}:{$a:function(){return t.matMul(a,!1,!0)},$b:function(){return i.matMul(t,!0,!1)}}})).reshape(v)}}),pc=bn({dot_:function(t,e){var n=un(t,"t1","dot"),r=un(e,"t2","dot");x(!(1!==n.rank&&2!==n.rank||1!==r.rank&&2!==r.rank),(function(){return"Error in dot: inputs must all be rank 1 or 2, but got ranks "+n.rank+" and "+r.rank+"."}));var o=1===n.rank?n.size:n.shape[1],i=1===r.rank?r.size:r.shape[0];return x(o===i,(function(){return"Error in dot: inner dimensions of inputs must match, but got "+o+" and "+i+"."})),1===n.rank&&1===r.rank?n.as2D(1,-1).matMul(r.as2D(-1,1)).asScalar():1===n.rank&&2===r.rank?n.as2D(1,-1).matMul(r.as2D(r.shape[0],r.shape[1])).as1D():2===n.rank&&1===r.rank?n.matMul(r.as2D(-1,1)).as1D():n.matMul(r.as2D(r.shape[0],r.shape[1]))}}),vc=bn({outerProduct_:function(t,e){var n=un(t,"v1","outerProduct"),r=un(e,"v2","outerProduct");return x(1===n.rank&&1===r.rank,(function(){return"Error in outerProduct: inputs must be rank 1, but got ranks "+n.rank+" and "+r.rank+"."})),n.as2D(-1,1).matMul(r.as2D(1,-1))}}),mc=bn({reverse_:function(t,e){var n=un(t,"x","reverse");if(0===n.rank)return n.clone();var r=D(e,n.shape);return Ot.runKernel((function(t){return t.reverse(n,r)}),{$x:n},(function(t){return{$x:function(){return t.reverse(r)}}})).reshapeAs(n)}}),gc=bn({reverse1d_:function(t){var e=un(t,"x","reverse");return x(1===e.rank,(function(){return"Error in reverse1D: x must be rank 1 but got rank "+e.rank+"."})),mc(e,0)}}),yc=bn({reverse2d_:function(t,e){var n=un(t,"x","reverse");return x(2===n.rank,(function(){return"Error in reverse2D: x must be rank 2 but got rank "+n.rank+"."})),mc(n,e)}}),xc=bn({reverse3d_:function(t,e){var n=un(t,"x","reverse");return x(3===n.rank,(function(){return"Error in reverse3D: x must be rank 3 but got rank "+n.rank+"."})),mc(n,e)}}),bc=bn({reverse4d_:function(t,e){var n=un(t,"x","reverse");return x(4===n.rank,(function(){return"Error in reverse4D: x must be rank 4 but got rank "+n.rank+"."})),mc(n,e)}});function wc(t,e,n,r,o,i){var a=un(t,"x","maxPool"),s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),null==r&&(r=[1,1]),x(4===s.rank,(function(){return"Error in maxPool: input must be rank 4 but got rank "+s.rank+"."})),x(yo(n,r),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"})),null!=i&&x(I(o),(function(){return"Error in maxPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=so(s.shape,e,n,r,o,i),l=Ot.runKernel((function(t,e){var n=t.maxPool(s,c);return e([s,n]),n}),{x:s},(function(t,i){var a=i[0],s=i[1];return{x:function(){return function(t,e,n,r,o,i,a,s){var u=un(t,"dy","maxPoolBackprop"),c=un(e,"input","maxPoolBackprop"),l=un(n,"output","maxPoolBackprop");x(c.rank===u.rank,(function(){return"Rank of input ("+c.rank+") does not match rank of dy ("+u.rank+")"})),null==i&&(i=[1,1]),x(yo(o,i),(function(){return"Error in maxPoolBackProp: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),x(4===u.rank,(function(){return"Error in maxPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."})),x(4===c.rank,(function(){return"Error in maxPoolBackprop: input must be rank 4 but got rank "+c.rank+"."}));var h=so(c.shape,r,o,i,a,s);return Ot.runKernel((function(t){return t.maxPoolBackprop(u,c,l,h)}),{$dy:u,$input:c})}(t,a,s,e,n,r,o)}}}));return u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}function Cc(t,e,n,r,o,i){var a=un(t,"x","avgPool","float32");null==r&&(r=[1,1]),x(yo(n,r),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+r+"'"}));var s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),x(4===s.rank,(function(){return"Error in avgPool: x must be rank 4 but got rank "+s.rank+"."})),null!=i&&x(I(o),(function(){return"Error in avgPool: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var c=so(s.shape,e,n,r,o,i),l=Ot.runKernel((function(t){return t.avgPool(s,c)}),{x:s},(function(t){return{x:function(){return function(t,e,n,r,o,i){var a=un(t,"dy","avgPoolBackprop"),s=un(e,"input","avgPoolBackprop");x(s.rank===a.rank,(function(){return"Rank of input ("+s.rank+") does not match rank of dy ("+a.rank+")"})),null==o&&(o=[1,1]),x(yo(r,o),(function(){return"Error in avgPoolBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"}));var u=s,c=a,l=!1;3===s.rank&&(l=!0,u=s.as4D(1,s.shape[0],s.shape[1],s.shape[2]),c=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),x(4===c.rank,(function(){return"Error in avgPoolBackprop: dy must be rank 4 but got rank "+c.rank+"."})),x(4===u.rank,(function(){return"Error in avgPoolBackprop: input must be rank 4 but got rank "+u.rank+"."}));var h=so(u.shape,n,r,o,i),f=Ot.runKernel((function(t){return t.avgPoolBackprop(c,u,h)}),{dy4D:c,input4D:u});return l?f.as3D(f.shape[1],f.shape[2],f.shape[3]):f}(t,s,e,n,r,o)}}}));return l=l.cast(a.dtype),u?l.as3D(l.shape[1],l.shape[2],l.shape[3]):l}var Ec=bn({maxPool_:function(t,e,n,r,o){return wc(t,e,n,1,r,o)}}),Rc=bn({avgPool_:function(t,e,n,r,o){return Cc(t,e,n,1,r,o)}}),Ic=bn({pool_:function(t,e,n,r,o,i){null==o&&(o=[1,1]),null==i&&(i=1),0===r&&(r="valid");var a=un(t,"x","maxPool"),s=a,u=!1;3===a.rank&&(u=!0,s=a.as4D(1,a.shape[0],a.shape[1],a.shape[2])),x(yo(i,o),(function(){return"Error in pool: Either strides or dilations must be 1. Got strides "+i+" and dilations '"+o+"'"}));var c,l=so(s.shape,e,i,o,r),h=[l.dilationHeight,l.dilationWidth];c="same"===r?function(t,e){var n=t.map((function(t,n){return t+(t-1)*(e[n]-1)})).map((function(t){return t-1})),r=n.map((function(t){return Math.floor(t/2)})),o=n.map((function(t,e){return t-r[e]}));return n.map((function(t,e){return[r[e],o[e]]}))}([l.filterHeight,l.filterWidth],h):[[0,0],[0,0]];var f=1===h[0]&&1===h[1],d=function(t,e,n){var r=n.map((function(t){return t[0]})),o=n.map((function(t){return t[1]})),i=t.concat(r,o),a=e.map((function(t,e){return(t-i[e]%t)%t})),s=o.map((function(t,e){return t+a[e]}));return[e.map((function(t,e){return[r[e],s[e]]})),e.map((function(t,e){return[0,a[e]]}))]}([l.inHeight,l.inWidth],h,c),p=d[0],v=d[1],m=f?r:"valid",g=f?s:Ir(s,h,p),y=("avg"===n?function(){return Cc(g,e,i,1,m)}:function(){return wc(g,e,i,1,m)})(),b=f?y:ar(y,h,v);return u?b.as3D(b.shape[1],b.shape[2],b.shape[3]):b}}),Sc=bn({maxPool3d_:function(t,e,n,r,o,i,a){void 0===i&&(i="NDHWC");var s=un(t,"x","maxPool3d"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==a&&(a=[1,1,1]),x(5===u.rank,(function(){return"Error in maxPool3d: x must be rank 5 but got rank "+u.rank+"."})),x("NDHWC"===i,(function(){return"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),x(yo(n,a),(function(){return"Error in maxPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&x(I(r),(function(){return"Error in maxPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=uo(u.shape,e,n,a,r,o,i),h=Ot.runKernel((function(t,e){var n=t.maxPool3d(u,l);return e([u,n]),n}),{x:u},(function(t,i){var s=i[0],u=i[1];return{x:function(){return function(t,e,n,r,o,i,a,s){var u=un(t,"dy","maxPool3dBackprop"),c=un(e,"input","maxPool3dBackprop"),l=un(n,"output","maxPool3dBackprop"),h=u,f=c,d=l,p=!1;4===c.rank&&(p=!0,h=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]),f=c.as5D(1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]),d=l.as5D(1,l.shape[0],l.shape[1],l.shape[2],l.shape[3])),x(5===h.rank,(function(){return"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+h.rank+"."})),x(5===f.rank,(function(){return"Error in maxPool3dBackprop: input must be rank 5 but got rank "+f.rank+"."})),x(5===d.rank,(function(){return"Error in maxPool3dBackprop: output must be rank 5 but got rank "+d.rank+"."})),null==i&&(i=[1,1,1]),x(yo(o,i),(function(){return"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+i+"'"})),null!=s&&x(I(a),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+s+" but got pad "+a+"."}));var v=uo(f.shape,r,o,i,a,s),m=Ot.runKernel((function(t){return t.maxPool3dBackprop(h,f,d,v)}),{dy5D:h,input5D:f});return p?m.as4D(m.shape[1],m.shape[2],m.shape[3],m.shape[4]):m}(t,s,u,e,n,a,r,o)}}}));return c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),kc=bn({avgPool3d_:function(t,e,n,r,o,i,a){void 0===i&&(i="NDHWC");var s=un(t,"x","avgPool3d","float32"),u=s,c=!1;4===s.rank&&(c=!0,u=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3])),null==a&&(a=[1,1,1]),x(5===u.rank,(function(){return"Error in avgPool3d: x must be rank 5 but got rank "+u.rank+"."})),x("NDHWC"===i,(function(){return"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+i})),x(yo(n,a),(function(){return"Error in avgPool3d: Either strides or dilations must be 1. Got strides "+n+" and dilations '"+a+"'"})),null!=o&&x(I(r),(function(){return"Error in avgPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l=uo(u.shape,e,n,a,r,o,i),h=Ot.runKernel((function(t){return t.avgPool3d(u,l)}),{x:u},(function(t){return{x:function(){return function(t,e,n,r,o,i,a){var s=un(t,"dy","avgPool3dBackprop"),u=un(e,"input","avgPool3dBackprop"),c=s,l=u,h=!1;4===u.rank&&(h=!0,c=s.as5D(1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]),l=u.as5D(1,u.shape[0],u.shape[1],u.shape[2],u.shape[3])),x(5===c.rank,(function(){return"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."})),x(5===l.rank,(function(){return"Error in avgPool3dBackprop: input must be rank 5 but got rank "+l.rank+"."})),null==o&&(o=[1,1,1]),x(yo(r,o),(function(){return"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"})),null!=a&&x(I(i),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+a+" but got pad "+i+"."}));var f=uo(l.shape,n,r,o,i,a),d=Ot.runKernel((function(t){return t.avgPool3dBackprop(c,l,f)}),{dy5D:c,input5D:l});return h?d.as4D(d.shape[1],d.shape[2],d.shape[3],d.shape[4]):d}(t,u,e,n,a,r,o)}}}));return h=h.cast(u.dtype),c?h.as4D(h.shape[1],h.shape[2],h.shape[3],h.shape[4]):h}}),Ac=bn({slice_:function(t,e,n){var r,o,i=un(t,"x","slice");if(0===i.rank)throw new Error("Slicing scalar is not possible");(r="number"==typeof e?[e].concat(new Array(i.rank-1).fill(0)):e.length<i.rank?e.concat(new Array(i.rank-e.length).fill(0)):e.slice()).forEach((function(t){x(-1!==t,(function(){return"slice() does not support negative begin indexing."}))})),o=(o=null==n?new Array(i.rank).fill(-1):"number"==typeof n?[n].concat(new Array(i.rank-1).fill(-1)):n.length<i.rank?n.concat(new Array(i.rank-n.length).fill(-1)):n).map((function(t,e){return t>=0?t:(x(-1===t,(function(){return"Negative size values should be exactly -1 but got "+t+" for the slice() size at index "+e+"."})),i.shape[e]-r[e])})),function(t,e,n){x(t.rank===e.length,(function(){return"Error in slice"+t.rank+"D: Length of begin "+e+" must match the rank of the array ("+t.rank+")."})),x(t.rank===n.length,(function(){return"Error in slice"+t.rank+"D: Length of size "+n+" must match the rank of the array ("+t.rank+")."}));for(var r=function(r){x(e[r]+n[r]<=t.shape[r],(function(){return"Error in slice"+t.rank+"D: begin["+r+"] + size["+r+"] ("+(e[r]+n[r])+") would overflow input.shape["+r+"] ("+t.shape[r]+")"}))},o=0;o<t.rank;++o)r(o)}(i,r,o);var a=i.shape;return Ot.runKernel((function(t){return t.slice(i,r,o)}),{$x:i},(function(t){for(var e=[],n=0;n<t.rank;n++)e.push([r[n],a[n]-r[n]-o[n]]);return{$x:function(){return t.pad(e)}}}))}}),Nc=bn({slice1d_:function(t,e,n){var r=un(t,"x","slice1d");return x(1===r.rank,(function(){return"slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"})),Ac(r,[e],[n])}}),Tc=bn({slice2d_:function(t,e,n){var r=un(t,"x","slice2d");return x(2===r.rank,(function(){return"slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"})),Ac(r,e,n)}}),Dc=bn({slice3d_:function(t,e,n){var r=un(t,"x","slice3d");return x(3===r.rank,(function(){return"slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"})),Ac(r,e,n)}}),_c=bn({slice4d_:function(t,e,n){var r=un(t,"x","slice4d");return x(4===r.rank,(function(){return"slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"})),Ac(r,e,n)}});function Oc(t,e,n,r,o){return e.rank<n.rank&&(e=e.reshape(dn(e.shape,r))),t.rank<n.rank&&(t=t.reshape(dn(t.shape,r))),{$x:function(){var r=t.mul(n.equal(e).cast(t.dtype));return null==o?r:r.transpose(o)}}}var Mc=bn({all_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=un(t,"x","all","bool"),o=D(e,r.shape),i=o,a=vn(i,r.rank);null!=a&&(r=r.transpose(a),i=gn(i.length,r.rank));var s=Ot.runKernel((function(t){return t.all(r,i)}),{$x:r});if(n){var u=dn(s.shape,o);return s.reshape(u)}return s}}),Fc=bn({any_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=un(t,"x","any","bool"),o=D(e,r.shape),i=o,a=vn(i,r.rank);null!=a&&(r=r.transpose(a),i=gn(i.length,r.rank));var s=Ot.runKernel((function(t){return t.any(r,i)}),{$x:r});if(n){var u=dn(s.shape,o);return s.reshape(u)}return s}}),Bc=bn({argMax_:function(t,e){void 0===e&&(e=0);var n=un(t,"x","argMax");null==e&&(e=0);var r=D(e,n.shape),o=vn(r,n.rank);return null!=o&&(n=n.transpose(o),r=gn(r.length,n.rank)),Ot.runKernel((function(t,e){var o=t.argMax(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return Wn(n)}}}))}}),Pc=bn({argMin_:function(t,e){void 0===e&&(e=0);var n=un(t,"x","argMin");null==e&&(e=0);var r=D(e,n.shape),o=vn(r,n.rank);return null!=o&&(n=n.transpose(o),r=gn(r.length,n.rank)),Ot.runKernel((function(t,e){var o=t.argMin(n,r[0]);return e([n]),o}),{$x:n},(function(t,e){var n=e[0];return{$x:function(){return Wn(n)}}}))}}),Lc=bn({logSumExp_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=un(t,"x","logSumExp"),o=D(e,r.shape),i=r.max(o,!0),a=r.sub(i).exp().sum(o).log(),s=i.reshape(a.shape).add(a);if(n){var u=dn(s.shape,o);return s.reshape(u)}return s}}),Wc=bn({max_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=un(t,"x","max"),o=r,i=D(e,r.shape),a=i,s=vn(a,r.rank);null!=s&&(r=r.transpose(s),a=gn(a.length,r.rank));var u=Ot.runKernel((function(t,e){var n=t.max(r,a);return e([o,n]),n}),{$x:r},(function(t,e){return Oc(t,e[1],e[0],i,s)}));if(n){var c=dn(u.shape,i);u=u.reshape(c)}return u}}),Uc=bn({mean_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=un(t,"x","mean"),o=D(e,r.shape),i=E(fn(r.shape,o)[1]);return Jr((function(t){var r=Sn(i);return{value:(r.dtype===t.dtype?t:t.cast(r.dtype)).div(r).sum(e,n),gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(On(t.shape,"float32")).div(i)}}}))(r)}}),Vc=bn({min_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=un(t,"x","min"),o=r,i=D(e,r.shape),a=i,s=vn(a,r.rank);null!=s&&(r=r.transpose(s),a=gn(a.length,r.rank));var u=Ot.runKernel((function(t,e){var n=t.min(r,a);return e([o,n]),n}),{$x:r},(function(t,e){return Oc(t,e[1],e[0],i,s)}));if(n){var c=dn(u.shape,i);u=u.reshape(c)}return u}}),zc=bn({moments_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=D(e,(t=un(t,"x","moments")).shape),o=t.mean(r,n),i=o.shape;n||(i=dn(o.shape,r));var a=t.toFloat().sub(o.reshape(i)).square();return{mean:o,variance:a.mean(r,n)}}}),Gc=bn({sum_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=un(t,"x","sum");"bool"===r.dtype&&(r=r.toInt());var o=D(e,r.shape);return Jr((function(t){var e=vn(o,t.rank),r=o,i=t;null!=e&&(i=t.transpose(e),r=gn(r.length,t.rank));var a=Ot.runKernel((function(t){return t.sum(i,r)}),{permutedX:i});if(n){var s=dn(a.shape,o);a=a.reshape(s)}return{value:a,gradFunc:function(e){var n=t.shape.slice();return o.forEach((function(t){n[t]=1})),e.reshape(n).mul(On(t.shape,"float32"))}}}))(r)}}),Hc=bn({prod_:function(t,e,n){void 0===e&&(e=null),void 0===n&&(n=!1);var r=un(t,"x","prod");"bool"===r.dtype&&(r=r.toInt());var o=D(e,r.shape),i=vn(o,r.rank),a=o,s=r;null!=i&&(s=r.transpose(i),a=gn(a.length,r.rank));var u=Ot.runKernel((function(t){return t.prod(s,a)}),{permutedX:s});if(n){var c=dn(u.shape,o);u=u.reshape(c)}return u}}),qc=bn({elu_:function(t){var e=un(t,"x","elu");return Ot.runKernel((function(t,n){var r=t.elu(e);return n([r]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return Ot.runKernel((function(e){return e.eluDer(t,n)}),{dy:t,y:n})}}}))}}),$c=bn({leakyRelu_:function(t,e){void 0===e&&(e=.2);var n=un(t,"x","leakyRelu");return Eu(Sn(e).mul(n),n)}}),jc=bn({prelu_:function(t,e){var n=un(t,"x","prelu"),r=un(e,"alpha","prelu");return Ot.runKernel((function(t,e){var o=t.prelu(n,r);return e([n,r]),o}),{$x:n,$alpha:r},(function(t,e){var n=e[0],r=e[1],o=n.greater(0);return{$x:function(){return pu(o,t,t.mul(r))},$alpha:function(){var e=pu(o,Wn(t),t.mul(n)),i=io(r.shape,t.shape);return i.length>0&&(e=e.sum(i)),e.reshape(r.shape)}}}))}}),Kc=bn({relu_:function(t){var e=un(t,"x","relu");return"bool"===e.dtype?e.toInt():Ot.runKernel((function(t,n){var r=t.relu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){return t.mulStrict(n.step().toFloat())}}}))}}),Xc=bn({selu_:function(t){var e=un(t,"x","selu");return Ot.runKernel((function(t,n){var r=t.selu(e);return n([e]),r}),{$x:e},(function(t,e){var n=e[0];return{$x:function(){var e=n.greater(Sn(0)),r=Sn($a),o=Sn(ja),i=t.mul(o),a=t.mul(r).mul(n.toFloat().exp());return pu(e,i,a)}}}))}}),Yc=bn({transpose_:function(t,e){var n=un(t,"x","transpose");return null==e&&(e=n.shape.map((function(t,e){return e})).reverse()),x(n.rank===e.length,(function(){return"Error in transpose: rank of input "+n.rank+" must match length of perm "+e+"."})),e.forEach((function(t){x(t>=0&&t<n.rank,(function(){return"All entries in 'perm' must be between 0 and "+(n.rank-1)+" but got "+e}))})),n.rank<=1?n.clone():Ot.runKernel((function(t){return t.transpose(n,e)}),{$x:n},(function(t){var n=mn(e);return{$x:function(){return t.transpose(n)}}}))}}),Qc=bn({localResponseNormalization_:function(t,e,n,r,o){void 0===e&&(e=5),void 0===n&&(n=1),void 0===r&&(r=1),void 0===o&&(o=.5);var i=un(t,"x","localResponseNormalization");x(4===i.rank||3===i.rank,(function(){return"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+i.rank+"."})),x(I(e),(function(){return"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius "+e+"."}));var a=i,s=!1;3===i.rank&&(s=!0,a=i.as4D(1,i.shape[0],i.shape[1],i.shape[2]));var u=Ot.runKernel((function(t,i){var s=t.localResponseNormalization4D(a,e,n,r,o);return i([a,s]),s}),{x4D:a},(function(t,i){var a=i[0],s=i[1];return{x4D:function(){return Ot.runKernel((function(i){return i.LRNGrad(t,a,s,e,n,r,o)}),{})}}}));return s?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Jc=bn({norm_:function(t,e,n,r){void 0===e&&(e="euclidean"),void 0===n&&(n=null),void 0===r&&(r=!1);var o=function t(e,n,r){if(void 0===r&&(r=null),0===e.rank)return e.abs();if(1!==e.rank&&null===r)return t(e.reshape([-1]),n,r);if(1===e.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===n)return e.abs().sum(r);if(n===1/0)return e.abs().max(r);if(n===-1/0)return e.abs().min(r);if("euclidean"===n||2===n)return e.abs().pow(Sn(2,"int32")).sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}if(Array.isArray(r)&&2===r.length){if(1===n)return e.abs().sum(r[0]).max(r[1]-1);if(n===1/0)return e.abs().sum(r[1]).max(r[0]);if(n===-1/0)return e.abs().sum(r[1]).min(r[0]);if("fro"===n||"euclidean"===n)return e.square().sum(r).sqrt();throw new Error("Error in norm: invalid ord value: "+n)}throw new Error("Error in norm: invalid axis: "+r)}(t=un(t,"x","norm"),e,n),i=o.shape;if(r){var a=D(n,t.shape);i=dn(o.shape,a)}return o.reshape(i)}}),Zc=bn({basicLSTMCell_:function(t,e,n,r,o,i){var a=un(t,"forgetBias","basicLSTMCell"),s=un(e,"lstmKernel","basicLSTMCell"),u=un(n,"lstmBias","basicLSTMCell"),c=un(r,"data","basicLSTMCell"),l=un(o,"c","basicLSTMCell"),h=un(i,"h","basicLSTMCell"),f=c.concat(h,1).matMul(s).add(u),d=f.shape[0],p=f.shape[1]/4,v=[d,p],m=f.slice([0,0],v),g=f.slice([0,p],v),y=f.slice([0,2*p],v),x=f.slice([0,3*p],v),b=m.sigmoid().mulStrict(g.tanh()).addStrict(l.mulStrict(a.add(y).sigmoid())),w=b.tanh().mulStrict(x.sigmoid());return[b,w]}}),tl=bn({multiRNNCell_:function(t,e,n,r){for(var o=un(e,"data","multiRNNCell"),i=cn(n,"c","multiRNNCell"),a=cn(r,"h","multiRNNCell"),s=o,u=[],c=0;c<t.length;c++){var l=t[c](s,i[c],a[c]);u.push(l[0]),u.push(l[1]),s=l[1]}var h=[],f=[];for(c=0;c<u.length;c+=2)h.push(u[c]),f.push(u[c+1]);return[h,f]}}),el=bn({movingAverage_:function(t,e,n,r,o){void 0===o&&(o=!0);var i=un(t,"v","movingAverage"),a=un(e,"x","movingAverage"),s=un(n,"decay","movingAverage");kt(i,a),x(R(i.shape,a.shape),(function(){return"Shape mismatch in v and x"}));var u=Sn(1),c=u.sub(s),l=a.sub(i).mul(c);if(o){x(null!=r,(function(){return"When using zeroDebias: true, step is required."}));var h=un(r,"step","movingAverage");l=l.div(u.sub(Du(s,h)))}return i.add(l)}}),nl=bn({stridedSlice_:function(t,e,n,r,o,i,a,s,u){if(void 0===o&&(o=0),void 0===i&&(i=0),void 0===a&&(a=0),void 0===s&&(s=0),void 0===u&&(u=0),null==r&&(r=new Array(e.length)),0!==a)throw new Error("ellipsis mask is not yet supported");var c=un(t,"x","stridedSlice"),l=Vr(s),h=c.shape.slice();l.forEach((function(t){e[t]=0,n[t]=1,h.splice(t,0,1)})),c=c.reshape(h);for(var f=0;f<c.rank;f++)e[f]=Gr(o,e,r,c.shape,f),n[f]=Hr(i,n,r,c.shape,f),r[f]=r[f]||1;var d=Vr(u);d.forEach((function(t){n[t]=e[t]+1,r[t]=1}));var p=zr(e,n,r),v=p.filter((function(t,e){return-1===d.indexOf(e)}));return r.every((function(t){return 1===t}))?Ac(c,e,p).reshape(v):Ot.runKernel((function(t){return t.stridedSlice(c,e,n,r)}),{$x:c}).reshape(v)}}),rl=bn({topk_:function(t,e,n){void 0===e&&(e=1),void 0===n&&(n=!0);var r=un(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var o=r.shape[r.shape.length-1];if(e>o)throw new Error("'k' passed to topk() must be <= the last dimension ("+o+") but got "+e);var i=Ot.runKernel((function(t){return t.topk(r,e,n)}),{$x:r});return{values:i[0],indices:i[1]}}}),ol=bn({scatterND_:function(t,e,n){var r=un(t,"indices","scatterND","int32"),o=un(e,"updates","scatterND");return function(t,e,n){if(e.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+e.rank+".");if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==e.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+e.dtype);if(n.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+n);if(0===n.length){if(0===e.size)throw new Error("Indices specified for empty output. indices shape: "+e.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}!function(t,e,n){var r=e.rank>1?e.shape[e.rank-1]:1,o=e.rank>1?e.rank-1:1,i="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+n.shape+", indices.shape: "+e.shape+", shape: "+t+", sliceDim: "+r+", and batchDim: "+o+".";if(n.rank<o)throw new Error(i+" update.rank < "+o+". ");if(t.length<r+(n.rank-o))throw new Error(i+" Output shape length < "+(r+(n.rank-o)));if(n.rank!==o+t.length-r)throw new Error(i+" update.rank != "+(o+t.length-r));for(var a=0;a<o;++a)if(n.shape[a]!==e.shape[a])throw new Error(i+" updates.shape["+a+"] ("+n.shape[a]+") != indices.shape["+a+"] ("+e.shape[a]+").");for(a=0;a<n.rank-o;++a)if(n.shape[a+o]!==t[a+r])throw new Error(i+" updates.shape["+(a+o)+"] ("+n.shape[a+o]+") != shape["+(a+o)+"] ("+t[a+o]+")")}(n,e,t)}(o,r,n),Ot.runKernel((function(t){return t.scatterND(r,o,n)}),{$indices:r,$updates:o})}}),il=bn({fft_:function(t){x("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.fft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Ot.runKernel((function(t){return t.fft(r)}),{input:t}).reshape(t.shape)}}),al=bn({ifft_:function(t){x("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.ifft() must be complex64 but got "+t.dtype+"."}));var e=t.shape[t.shape.length-1],n=t.size/e,r=t.as2D(n,e);return Ot.runKernel((function(t){return t.ifft(r)}),{input:t}).reshape(t.shape)}}),sl=bn({rfft_:function(t,e){x("float32"===t.dtype,(function(){return"The dtype for rfft() must be real value but got "+t.dtype}));var n,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=e&&e<r){var i=t.shape.map((function(t){return 0})),a=t.shape.map((function(t){return t}));a[t.shape.length-1]=e,n=t.slice(i,a),r=e}else if(null!=e&&e>r){var s=t.shape.map((function(t){return t}));s[t.shape.length-1]=e-r,n=t.concat(Mn(s),t.shape.length-1),r=e}else n=t;var u=n.zerosLike(),c=wn(n,u).as2D(o,r),l=il(c),h=Math.floor(r/2)+1,f=Cn(l),d=En(l),p=f.split([h,r-h],f.shape.length-1),v=d.split([h,r-h],d.shape.length-1),m=n.shape.slice();return m[n.shape.length-1]=h,wn(p[0],v[0]).reshape(m)}}),ul=bn({irfft_:function(t){var e=t.shape[t.shape.length-1],n=t.size/e;if(e<=2){var r=t.as2D(n,e),o=al(r);return Cn(o)}var i=[n,2*(e-1)],a=Cn(t).as2D(n,e),s=En(t).as2D(n,e),u=a.slice([0,1],[n,e-2]).reverse(1),c=s.slice([0,1],[n,e-2]).reverse(1).mul(Sn(-1)),l=a.concat(u,1),h=s.concat(c,1);return r=wn(l,h).as2D(i[0],i[1]),o=al(r),Cn(o)}}),cl=Object.freeze({fft:il,ifft:al,rfft:sl,irfft:ul}),ll=bn({sparseToDense_:function(t,e,n,r){void 0===r&&(r=0);var o=un(t,"sparseIndices","sparseToDense","int32"),i=un(e,"sparseValues","sparseToDense"),a=un(r,"defaultValue","sparseToDense",i.dtype);return function(t,e,n,r){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+t.shape+".");var o=t.rank>0?t.shape[0]:1,i=t.rank>1?t.shape[1]:1;if(n.length!==i)throw new Error("outputShape has incorrect number of elements:, "+n.length+", should be: "+i+".");var a=e.size;if(0!==e.rank&&(1!==e.rank||a!==o))throw new Error("sparseValues has incorrect shape "+e.shape+", should be [] or ["+o+"]");if(e.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,i,n,a),Ot.runKernel((function(t){return t.sparseToDense(o,i,n,a)}),{$sparseIndices:o,$sparseValues:i,$defaultValue:a})}}),hl=bn({gatherND_:function(t,e){var n=un(e,"indices","gatherND","int32"),r=un(t,"x","gatherND");return Ot.runKernel((function(t){return t.gatherND(r,n)}),{$x:r,$indices:n})}}),fl=bn({diag_:function(t){var e=un(t,"x","diag").flatten(),n=t.shape.concat(t.shape);return Ot.runKernel((function(t){return t.diag(e)}),{$x:e}).reshape(n)}}),dl=bn({dropout_:function(t,e,n,r){var o=un(t,"x","dropout");if(x("float32"===o.dtype,(function(){return"x has to be a floating point tensor since it's going to be scaled, but got a "+o.dtype+" tensor instead."})),x(e>=0&&e<1,(function(){return"rate must be a float in the range [0, 1), but got "+e+"."})),0===e)return t instanceof vt?o.clone():o;var i=function(t,e){if(null==e)return t.shape.slice();if(R(t.shape,e))return e;if(t.shape.length===e.length){for(var n=[],r=0;r<t.shape.length;r++)null==e[r]&&null!=t.shape[r]?n.push(t.shape[r]):n.push(e[r]);return n}return e}(o,n),a=1-e,s=Er(i,0,1,"float32",r).add(a).floor().div(a);return o.mul(s)}});function pl(t,e,n){for(var r=1-t%2,o=new Float32Array(t),i=0;i<t;++i){var a=2*Math.PI*i/(t+r-1);o[i]=e-n*Math.cos(a)}return kn(o,"float32")}var vl,ml=bn({hannWindow_:function(t){return pl(t,.5,.5)}}),gl=bn({hammingWindow_:function(t){return pl(t,.54,.46)}}),yl=bn({frame_:function(t,e,n,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var i=0,a=[];i+e<=t.size;)a.push(Ac(t,i,e)),i+=n;if(r)for(;i<t.size;){var s=i+e-t.size,u=Un([Ac(t,i,e-s),Fn([s],o)]);a.push(u),i+=n}return 0===a.length?An([],[0,e]):Un(a).as2D(a.length,e)}}),xl=bn({stft_:function(t,e,n,r,o){var i;void 0===o&&(o=ml),null==r&&(i=e,r=Math.floor(Math.pow(2,Math.ceil(Math.log(i)/Math.log(2)))));for(var a=yl(t,e,n),s=Nu(a,o(e)),u=[],c=0;c<a.shape[0];c++)u.push(sl(s.slice([c,0],[1,e]),r));return Un(u)}}),bl=Object.freeze({hannWindow:ml,hammingWindow:gl,frame:yl,stft:xl}),wl=function(t,e,n){return void 0===n&&(n=1),u(this,void 0,void 0,(function(){var r,o,i,a,s,u,l,h,f,d,p,v,m,g;return c(this,(function(c){switch(c.label){case 0:return r=un(t,"predictions","inTopK"),o=un(e,"targets","inTopK"),x(r.rank>1,(function(){return"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank})),x(r.rank-1===o.rank,(function(){return"predictions rank should be 1 larger than targets rank, but got predictions rank "+r.rank+" and targets rank "+o.rank})),b(r.shape.slice(0,r.shape.length-1),o.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),i=r.shape[r.shape.length-1],x(n>0&&n<=i,(function(){return"'k' passed to inTopK() must be > 0 && <= the predictions last dimension ("+i+"), but got "+n})),[4,r.data()];case 1:return a=c.sent(),[4,o.data()];case 2:for(s=c.sent(),u=[a.length/i,i],h=u[1],f=O("bool",l=u[0]),d=0;d<l;d++){for(p=d*h,v=a.subarray(p,p+h),m=[],g=0;g<v.length;g++)m.push({value:v[g],index:g});for(m.sort((function(t,e){return e.value-t.value})),f[d]=0,g=0;g<n;g++)if(m[g].index===s[d]){f[d]=1;break}}return t!==r&&r.dispose(),e!==o&&o.dispose(),[2,Rn(f,o.shape,"bool")]}}))}))};!function(t){t[t.NONE=0]="NONE",t[t.MEAN=1]="MEAN",t[t.SUM=2]="SUM",t[t.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(vl||(vl={}));var Cl=bn({absoluteDifference_:function(t,e,n,r){void 0===r&&(r=vl.SUM_BY_NONZERO_WEIGHTS);var o=un(t,"labels","absoluteDifference"),i=un(e,"predictions","absoluteDifference"),a=null;null!=n&&(a=un(n,"weights","absoluteDifference")),b(o.shape,i.shape,"Error in absoluteDifference: ");var s=o.sub(i).abs();return El(s,a,r)}}),El=bn({computeWeightedLoss_:function(t,e,n){void 0===n&&(n=vl.SUM_BY_NONZERO_WEIGHTS);var r=un(t,"losses","computeWeightedLoss"),o=null;null!=e&&(o=un(e,"weights","computeWeightedLoss"));var i=null==o?r:r.mul(o);if(n===vl.NONE)return i;if(n===vl.SUM)return i.sum();if(n===vl.MEAN){if(null==o)return i.mean();var a=r.size/o.size,s=i.sum().div(o.sum());return a>1?s.div(Sn(a)):s}if(n===vl.SUM_BY_NONZERO_WEIGHTS){if(null==o)return i.sum().div(Sn(r.size));var u=o.mul(On(r.shape)).notEqual(Sn(0)).sum().toFloat();return i.sum().div(u)}throw Error("Unknown reduction: "+n)}}),Rl=bn({cosineDistance_:function(t,e,n,r,o){void 0===o&&(o=vl.SUM_BY_NONZERO_WEIGHTS);var i=un(t,"labels","cosineDistance"),a=un(e,"predictions","cosineDistance"),s=null;null!=r&&(s=un(r,"weights","cosineDistance")),b(i.shape,a.shape,"Error in cosineDistance: ");var u=Sn(1).sub(i.mul(a).sum(n,!0));return El(u,s,o)}}),Il=bn({hingeLoss_:function(t,e,n,r){void 0===r&&(r=vl.SUM_BY_NONZERO_WEIGHTS);var o=un(t,"labels","hingeLoss"),i=un(e,"predictions","hingeLoss"),a=null;null!=n&&(a=un(n,"weights","hingeLoss")),b(o.shape,i.shape,"Error in hingeLoss: ");var s=Sn(1);o=Sn(2).mul(o).sub(s);var u=s.sub(o.mul(i)).relu();return El(u,a,r)}}),Sl=bn({huberLoss_:function(t,e,n,r,o){void 0===r&&(r=1),void 0===o&&(o=vl.SUM_BY_NONZERO_WEIGHTS);var i=un(t,"labels","huberLoss"),a=un(e,"predictions","huberLoss"),s=null;null!=n&&(s=un(n,"weights","huberLoss")),b(i.shape,a.shape,"Error in huberLoss: ");var u=Sn(r),c=a.sub(i).abs(),l=Iu(c,u),h=c.sub(l),f=Sn(.5).mul(l.square()).add(u.mul(h));return El(f,s,o)}}),kl=bn({logLoss_:function(t,e,n,r,o){void 0===r&&(r=1e-7),void 0===o&&(o=vl.SUM_BY_NONZERO_WEIGHTS);var i=un(t,"labels","logLoss"),a=un(e,"predictions","logLoss"),s=null;null!=n&&(s=un(n,"weights","logLoss")),b(i.shape,a.shape,"Error in logLoss: ");var u=Sn(1),c=Sn(r),l=i.mul(a.add(c).log()).neg().sub(u.sub(i).mul(u.sub(a).add(c).log()));return El(l,s,o)}}),Al=bn({meanSquaredError_:function(t,e,n,r){void 0===r&&(r=vl.SUM_BY_NONZERO_WEIGHTS);var o=un(t,"labels","meanSquaredError"),i=un(e,"predictions","meanSquaredError"),a=null;null!=n&&(a=un(n,"weights","meanSquaredError")),b(o.shape,i.shape,"Error in meanSquaredError: ");var s=o.squaredDifference(i);return El(s,a,r)}}),Nl=bn({sigmoidCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=vl.SUM_BY_NONZERO_WEIGHTS);var i=un(t,"multiClassLabels","sigmoidCrossEntropy"),a=un(e,"logits","sigmoidCrossEntropy"),s=null;if(null!=n&&(s=un(n,"weights","sigmoidCrossEntropy")),b(i.shape,a.shape,"Error in sigmoidCrossEntropy: "),r>0){var u=Sn(r),c=Sn(1),l=Sn(.5);i=i.mul(c.sub(u)).add(l.mul(u))}var h=function(t,e){var n=un(t,"labels","sigmoidCrossEntropyWithLogits"),r=un(e,"logits","sigmoidCrossEntropyWithLogits");b(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var o=r.relu(),i=r.mul(n),a=r.abs().neg().exp().log1p();return o.sub(i).add(a)}(i,a);return El(h,s,o)}}),Tl=bn({softmaxCrossEntropy_:function(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=vl.SUM_BY_NONZERO_WEIGHTS);var i=un(t,"onehotLabels","softmaxCrossEntropy"),a=un(e,"logits","softmaxCrossEntropy"),s=null;if(null!=n&&(s=un(n,"weights","softmaxCrossEntropy")),b(i.shape,a.shape,"Error in softmaxCrossEntropy: "),r>0){var u=Sn(r),c=Sn(1),l=Sn(i.shape[1]);i=i.mul(c.sub(u)).add(u.div(l))}var h=function(t,e,n){if(void 0===n&&(n=-1),-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+e.rank+" and dim was "+n);return Jr((function(t,e,r){var o=e.logSumExp([n],!0),i=e.toFloat().sub(o);return r([t,i]),{value:i.mul(t).neg().sum([n]),gradFunc:function(t,e){var r=e[0],o=e[1],i=dn(t.shape,[n]);return[t.reshape(i).mul(r.toFloat().sub(o.exp())),t.reshape(i).mul(o.exp().sub(r.toFloat()))]}}}))(t,e)}(i,a);return El(h,s,o)}}),Dl=Object.freeze({get Reduction(){return vl},absoluteDifference:Cl,computeWeightedLoss:El,cosineDistance:Rl,hingeLoss:Il,huberLoss:Sl,logLoss:kl,meanSquaredError:Al,sigmoidCrossEntropy:Nl,softmaxCrossEntropy:Tl});function _l(t,e){return void 0===e&&(e=!1),Ot.tidy((function(){if(2!==t.shape.length)throw new Error("qr2d() requires a 2D Tensor, but got a "+t.shape.length+"D Tensor.");for(var n=t.shape[0],r=t.shape[1],o=fr(n),i=t.clone(),a=An([[1]],[1,1]),s=a.clone(),u=n>=r?r:n,c=function(t){var e,u=i,c=s,l=o;e=Ot.tidy((function(){var e=i.slice([t,t],[n-t,1]),u=e.norm(),c=i.slice([t,t],[1,1]),l=An([[-1]]).where(c.greater(0),An([[1]])),h=c.sub(l.mul(u)),f=e.div(h);s=1===f.shape[0]?a.clone():a.concat(f.slice([1,0],[f.shape[0]-1,f.shape[1]]),0);var d=l.matMul(h).div(u).neg(),p=i.slice([t,0],[n-t,r]),v=d.mul(s);if(0===t)i=p.sub(v.matMul(s.transpose().matMul(p)));else{var m=p.sub(v.matMul(s.transpose().matMul(p)));i=i.slice([0,0],[t,r]).concat(m,0)}var g=o.slice([0,t],[n,o.shape[1]-t]);if(0===t)o=g.sub(g.matMul(s).matMul(v.transpose()));else{var y=g.sub(g.matMul(s).matMul(v.transpose()));o=o.slice([0,0],[n,t]).concat(y,1)}return[s,i,o]})),s=e[0],i=e[1],o=e[2],$e([u,c,l])},l=0;l<u;++l)c(l);return!e&&n>r&&(o=o.slice([0,0],[n,r]),i=i.slice([0,0],[r,r])),[o,i]}))}var Ol=bn({gramSchmidt_:function(t){var e;if(Array.isArray(t)){e=!1,x(null!=t&&t.length>0,(function(){return"Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var n=t[0].shape[0],r=function(e){x(t[e].shape[0]===n,(function(){return"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[e].shape[0]+" vs. "+n+")"}))},o=1;o<t.length;++o)r(o)}else e=!0,t=qn(t,t.shape[0],0).map((function(t){return Sr(t,[0])}));x(t.length<=t[0].shape[0],(function(){return"Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+")."}));var i=[],a=t,s=function(t){i.push(Ot.tidy((function(){var e=a[t];if(t>0)for(var n=0;n<t;++n){var r=Gc(i[n].mulStrict(e)).mul(i[n]);e=e.sub(r)}return e.div(Jc(e,"euclidean"))})))};for(o=0;o<t.length;++o)s(o);return e?kr(i,0):i}}),Ml=bn({qr_:function(t,e){if(void 0===e&&(e=!1),t.rank<2)throw new Error("qr() requires input tensor to have a rank >= 2, but got rank "+t.rank);if(2===t.rank)return _l(t,e);var n=t.shape.slice(0,t.shape.length-2).reduce((function(t,e){return t*e})),r=Tr(t.reshape([n,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],i=[];return r.forEach((function(t){var n=_l(t,e),r=n[0],a=n[1];o.push(r),i.push(a)})),[kr(o,0).reshape(t.shape),kr(i,0).reshape(t.shape)]}}),Fl=Object.freeze({gramSchmidt:Ol,qr:Ml});function Bl(t,e,n,r,o){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY);var i=t.shape[0];return n=Math.min(n,i),x(0<=r&&r<=1,(function(){return"iouThreshold must be in [0, 1], but was '"+r+"'"})),x(2===t.rank,(function(){return"boxes must be a 2D tensor, but was of rank '"+t.rank+"'"})),x(4===t.shape[1],(function(){return"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]})),x(1===e.rank,(function(){return"scores must be a 1D tensor"})),x(e.shape[0]===i,(function(){return"scores has incompatible shape with boxes. Expected "+i+", but was "+e.shape[0]})),{maxOutputSize:n,iouThreshold:r,scoreThreshold:o}}var Pl=bn({resizeBilinear_:function(t,e,n){void 0===n&&(n=!1);var r=un(t,"images","resizeBilinear");x(3===r.rank||4===r.rank,(function(){return"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."})),x(2===e.length,(function(){return"Error in resizeBilinear: new shape must 2D, but got shape "+e+"."}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=e[0],s=e[1],u=Ot.runKernel((function(t,e){return e([o]),t.resizeBilinear(o,a,s,n)}),{batchImages:o},(function(t,e){return{batchImages:function(){return Ot.runKernel((function(r){return r.resizeBilinearBackprop(t,e[0],n)}),{})}}}));return i?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Ll=bn({resizeNearestNeighbor_:function(t,e,n){void 0===n&&(n=!1);var r=un(t,"images","resizeNearestNeighbor");x(3===r.rank||4===r.rank,(function(){return"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."})),x(2===e.length,(function(){return"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+e+"."})),x("float32"===r.dtype||"int32"===r.dtype,(function(){return"`images` must have `int32` or `float32` as dtype"}));var o=r,i=!1;3===r.rank&&(i=!0,o=r.as4D(1,r.shape[0],r.shape[1],r.shape[2]));var a=e[0],s=e[1],u=Ot.runKernel((function(t,e){return e([o]),t.resizeNearestNeighbor(o,a,s,n)}),{batchImages:o},(function(t,e){return{batchImages:function(){return Ot.runKernel((function(r){return r.resizeNearestNeighborBackprop(t,e[0],n)}),{})}}}));return i?u.as3D(u.shape[1],u.shape[2],u.shape[3]):u}}),Wl=bn({nonMaxSuppression_:function(t,e,n,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var i=un(t,"boxes","nonMaxSuppression"),a=un(e,"scores","nonMaxSuppression"),s=Bl(i,a,n,r,o);return n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold,Ot.runKernel((function(t){return t.nonMaxSuppression(i,a,n,r,o)}),{$boxes:i})}}),Ul=bn({cropAndResize_:function(t,e,n,r,o,i){var a=un(t,"image","cropAndResize","float32"),s=un(e,"boxes","cropAndResize","float32"),u=un(n,"boxInd","cropAndResize","int32");o=o||"bilinear",i=i||0;var c=s.shape[0];return x(4===a.rank,(function(){return"Error in cropAndResize: image must be rank 4,but got rank "+a.rank+"."})),x(2===s.rank&&4===s.shape[1],(function(){return"Error in cropAndResize: boxes must be have size ["+c+",4] but had shape "+s.shape+"."})),x(1===u.rank&&u.shape[0]===c,(function(){return"Error in cropAndResize: boxInd must be have size ["+c+"] but had shape "+s.shape+"."})),x(2===r.length,(function(){return"Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."})),x(r[0]>=1&&r[1]>=1,(function(){return"cropSize must be atleast [1,1], but was "+r})),x("bilinear"===o||"nearest"===o,(function(){return"method must be bilinear or nearest, but was "+o})),Ot.runKernel((function(t,e){return t.cropAndResize(a,s,u,r,o,i)}),{$image:a,$boxes:s})}}),Vl=Object.freeze({resizeBilinear:Pl,resizeNearestNeighbor:Ll,nonMaxSuppression:Wl,nonMaxSuppressionAsync:function(t,e,n,r,o){return void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),u(this,void 0,void 0,(function(){var i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:return i=un(t,"boxes","nonMaxSuppressionAsync"),a=un(e,"scores","nonMaxSuppressionAsync"),s=Bl(i,a,n,r,o),n=s.maxOutputSize,r=s.iouThreshold,o=s.scoreThreshold,[4,Promise.all([i.data(),a.data()])];case 1:return u=c.sent(),l=u[0],h=u[1],f=Ao(l,h,n,r,o),i!==t&&i.dispose(),a!==e&&a.dispose(),[2,f]}}))}))},cropAndResize:Ul}),zl=bn({matMul_:function(t){var e,n=t.a,r=t.b,o=t.transposeA,i=void 0!==o&&o,a=t.transposeB,s=void 0!==a&&a,u=t.bias,c=t.activation,l=void 0===c?"linear":c,h=t.preluActivationWeights,f=un(n,"a","fused matMul"),d=un(r,"b","fused matMul");e=St(f,d),f=e[0],d=e[1];var p=i?f.shape[f.rank-2]:f.shape[f.rank-1],v=s?d.shape[d.rank-1]:d.shape[d.rank-2],m=i?f.shape[f.rank-1]:f.shape[f.rank-2],g=s?d.shape[d.rank-2]:d.shape[d.rank-1],y=f.shape.slice(0,-2),b=d.shape.slice(0,-2),w=E(y),C=E(b);x(f.rank>=2&&d.rank>=2&&f.rank===d.rank,(function(){return"Error in fused matMul: inputs must have the same rank of at least 2, got ranks "+f.rank+" and "+d.rank+"."})),x(R(y,b),(function(){return"Error in fused matMul: outer dimensions ("+y+") and ("+b+") of Tensors with shapes "+f.shape+" and "+d.shape+" must match."})),x(p===v,(function(){return"Error in fused matMul: inner shapes ("+p+") and ("+v+") of Tensors with shapes "+f.shape+" and "+d.shape+" and transposeA="+i+" and transposeB="+s+" must match."}));var I,S,k=f.shape.slice(0,-2).concat([m,g]),A=i?f.as3D(w,p,m):f.as3D(w,m,p),N=s?d.as3D(C,g,v):d.as3D(C,v,g);null!=u&&ao(k,(I=St(I=un(u,"bias","fused matMul"),f)[0]).shape),null!=h&&(S=un(h,"prelu weights","fused matMul"));var T={$a:A,$b:N};return null!=u&&(T.$bias=I),null!=h&&(T.$preluActivationWeights=S),Ot.runKernel((function(t,e){var n=t.fusedBatchMatMul({a:A,b:N,transposeA:i,transposeB:s,bias:I,activation:l,preluActivationWeights:S});return e([A,N,n]),n}),T,(function(t,e){var n,r=e[0],o=e[1],a=e[2];if(null==l||"linear"===l)n=t;else{if("relu"!==l)throw new Error("Gradient for activation "+l+" has not been implemented yet.");n=t.mul(a.step())}var c={};return null!=u&&(c={$bias:function(){var t=n,e=io(I.shape,n.shape);return e.length>0&&(t=t.sum(e)),t.reshape(I.shape)}}),i||s?!i&&s?Object.assign({$a:function(){return n.matMul(o,!1,!1)},$b:function(){return n.matMul(r,!0,!1)}},c):i&&!s?Object.assign({$a:function(){return o.matMul(n,!1,!0)},$b:function(){return r.matMul(n,!1,!1)}},c):Object.assign({$a:function(){return o.matMul(n,!0,!0)},$b:function(){return n.matMul(r,!0,!0)}},c):Object.assign({$a:function(){return n.matMul(o,!1,!0)},$b:function(){return r.matMul(n,!0,!1)}},c)})).reshape(k)}}),Gl=bn({conv2d_:function(t){var e=t.x,n=t.filter,r=t.strides,o=t.pad,i=t.dataFormat,a=void 0===i?"NHWC":i,s=t.dilations,u=void 0===s?[1,1]:s,c=t.dimRoundingMode,l=t.bias,h=t.activation,f=void 0===h?"linear":h,d=t.preluActivationWeights,p=un(e,"x","conv2d"),v=un(n,"filter","conv2d"),m=p,g=!1;3===p.rank&&(g=!0,m=p.as4D(1,p.shape[0],p.shape[1],p.shape[2])),x(4===m.rank,(function(){return"Error in fused conv2d: input must be rank 4, but got rank "+m.rank+"."})),x(4===v.rank,(function(){return"Error in fused conv2d: filter must be rank 4, but got rank "+v.rank+"."})),null!=c&&x(I(o),(function(){return"Error in fused conv2d: pad must be an integer when using, dimRoundingMode "+c+" but got pad "+o+"."})),x(m.shape[3]===v.shape[2],(function(){return"Error in conv2d: depth of input ("+m.shape[3]+") must match input depth for filter "+v.shape[2]+"."})),x(yo(r,u),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+u+"'"})),x("NHWC"===a,(function(){return"Error in conv2d: got dataFormat of "+a+" but only NHWC is currently supported."}));var y,b,w=co(m.shape,v.shape,r,u,o,c);null!=l&&(y=St(y=un(l,"bias","fused conv2d"),p)[0],ao(w.outShape,y.shape)),null!=d&&(b=un(d,"prelu weights","fused conv2d"));var C={x:m,$filter:v};null!=l&&(C.$bias=y),null!=d&&(C.$preluActivationWeights=b);var E=Ot.runKernel((function(t,e){var n=t.fusedConv2d(m,v,w,y,f,b);return e([v,m,n]),n}),C,(function(t,e){var n,i=e,a=i[0],s=i[1],c=i[2];if(null==f||"linear"===f)n=t;else{if("relu"!==f)throw new Error("Gradient for activation "+f+" has not been implemented yet.");n=t.mul(c.step())}x(go(u),(function(){return"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+u+"'"}));var h={};return null!=l&&(h={$bias:function(){var t=n,e=io(y.shape,n.shape);return e.length>0&&(t=t.sum(e)),t.reshape(y.shape)}}),Object.assign({x:function(){return uc(s.shape,n,a,r,o)},$filter:function(){return sc(s,n,a.shape,r,o)}},h)}));return g?E.as3D(E.shape[1],E.shape[2],E.shape[3]):E}}),Hl=Object.freeze({matMul:zl,conv2d:Gl}),ql=Object.freeze({image:Vl,linalg:Fl,losses:Dl,spectral:cl,fused:Hl,signal:bl,op:bn,batchNormalization2d:nu,batchNormalization3d:ru,batchNormalization4d:ou,batchNormalization:iu,batchNorm:au,batchNorm2d:su,batchNorm3d:uu,batchNorm4d:cu,booleanMaskAsync:Zu,complex:wn,real:Cn,imag:En,concat:Un,concat1d:Vn,concat2d:zn,concat3d:Gn,concat4d:Hn,split:qn,conv1d:oc,conv2d:ic,conv3d:ac,conv2dDerFilter:sc,conv2dDerInput:uc,depthwiseConv2d:cc,separableConv2d:lc,conv2dTranspose:hc,conv3dTranspose:fc,matMul:dc,dot:pc,outerProduct:vc,reverse:mc,reverse1d:gc,reverse2d:yc,reverse3d:xc,reverse4d:bc,maxPool:Ec,avgPool:Rc,pool:Ic,maxPool3d:Sc,avgPool3d:kc,slice:Ac,slice1d:Nc,slice2d:Tc,slice3d:Dc,slice4d:_c,abs:vs,acos:ms,acosh:gs,asin:ys,asinh:xs,atan:bs,atanh:ws,ceil:Cs,clipByValue:Es,cos:Rs,cosh:Is,erf:Ss,exp:ks,expm1:As,floor:Ns,log:Ts,log1p:Ds,logSigmoid:_s,neg:Os,reciprocal:Ms,round:Fs,rsqrt:Bs,sigmoid:Ps,sign:Ls,isNaN:Ws,isInf:Us,isFinite:Vs,sin:zs,sinh:Gs,softplus:Hs,sqrt:qs,square:$s,step:js,tan:Ks,tanh:Xs,all:Mc,any:Fc,argMax:Bc,argMin:Pc,logSumExp:Lc,max:Wc,mean:Uc,min:Vc,moments:zc,sum:Gc,prod:Hc,equal:Pu,equalStrict:Lu,greater:Wu,greaterEqual:Uu,greaterEqualStrict:Vu,greaterStrict:zu,less:Gu,lessEqual:Hu,lessEqualStrict:qu,lessStrict:$u,notEqual:ju,notEqualStrict:Ku,add:mu,addN:gu,addStrict:yu,atan2:xu,div:bu,divStrict:wu,floorDiv:Cu,maximum:Eu,maximumStrict:Ru,minimum:Iu,minimumStrict:Su,mod:ku,modStrict:Au,mul:Nu,mulStrict:Tu,pow:Du,powStrict:_u,squaredDifference:Ou,squaredDifferenceStrict:Mu,sub:Fu,subStrict:Bu,elu:qc,leakyRelu:$c,prelu:jc,relu:Kc,selu:Xc,logicalAnd:lu,logicalNot:hu,logicalOr:fu,logicalXor:du,where:pu,whereAsync:vu,buffer:or,print:ir,batchToSpaceND:ar,cast:sr,clone:ur,cumsum:cr,depthToSpace:lr,expandDims:hr,eye:fr,multinomial:dr,oneHot:pr,pad:vr,pad1d:mr,pad2d:gr,pad3d:yr,pad4d:xr,rand:br,randomNormal:wr,randomGamma:Cr,randomUniform:Er,reshape:Rr,spaceToBatchND:Ir,squeeze:Sr,stack:kr,tile:Ar,truncatedNormal:Nr,unstack:Tr,setdiff1dAsync:Dr,fill:Fn,linspace:Bn,ones:On,range:Pn,scalar:Sn,tensor:Rn,tensor1d:kn,tensor2d:An,tensor3d:Nn,tensor4d:Tn,tensor5d:Dn,tensor6d:_n,zeros:Mn,onesLike:Ln,zerosLike:Wn,transpose:Yc,softmax:to,logSoftmax:eo,localResponseNormalization:Qc,norm:Jc,gather:Qu,unsortedSegmentSum:Ju,basicLSTMCell:Zc,multiRNNCell:tl,movingAverage:el,stridedSlice:nl,topk:rl,scatterND:ol,fft:il,ifft:al,rfft:sl,irfft:ul,sparseToDense:ll,gatherND:hl,diag:fl,dropout:dl,hannWindow:ml,hammingWindow:gl,frame:yl,stft:xl,inTopKAsync:wl});function $l(t,e,n,r){if("linear"===n)return t.linear(e);if("relu"===n)return t.relu(e);if("elu"===n)return t.elu(e);if("prelu"===n)return t.prelu(e,r);throw new Error("Activation "+n+" has not been implemented for the CPU backend.")}var jl=function(){function t(){if(this.blockSize=48,this.firstUse=!0,f.get("IS_BROWSER")){var t="undefined"!=typeof OffscreenCanvas?new OffscreenCanvas(300,150):"undefined"!=typeof document?document.createElement("canvas"):null;null!==t&&(this.fromPixels2DContext=t.getContext("2d"))}this.data=new no(this,Ot)}return t.prototype.register=function(t,e,n){if(this.firstUse&&(this.firstUse=!1,f.get("IS_NODE")&&on("\n============================\nHi there 👋. Looks like you are running TensorFlow.js in Node.js. To speed things up dramatically, install our node backend, which binds to TensorFlow C++, by running npm i @tensorflow/tfjs-node, or npm i @tensorflow/tfjs-node-gpu if you have CUDA. Then call require('@tensorflow/tfjs-node'); (-gpu suffix for CUDA) at the start of your program. Visit https://github.com/tensorflow/tfjs-node for more details.\n============================\n")),this.data.has(t))throw new Error("Data buffer is already registered");this.data.set(t,{dtype:n})},t.prototype.write=function(t,e){if(null==e)throw new Error("MathBackendCPU.write(): values can not be null");this.data.get(t).values=e},t.prototype.fromPixels=function(t,e){if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var n,r,o=t.data instanceof Uint8Array,i="undefined"!=typeof ImageData&&t instanceof ImageData,a="undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement,s="undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement,u=a?[t.videoWidth,t.videoHeight]:[t.width,t.height],c=u[0],l=u[1];if(f.get("IS_NODE")&&null==t.getContext)throw new Error("When running in node, pixels must be an HTMLCanvasElement like the one returned by the `canvas` npm package");if(null!=t.getContext)n=t.getContext("2d").getImageData(0,0,c,l).data;else if(i||o)n=t.data;else{if(!s&&!a)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);if(null==this.fromPixels2DContext)throw new Error("Can't read pixels from HTMLImageElement outside the browser.");this.fromPixels2DContext.canvas.width=c,this.fromPixels2DContext.canvas.height=l,this.fromPixels2DContext.drawImage(t,0,0,c,l),n=this.fromPixels2DContext.getImageData(0,0,c,l).data}if(4===e)r=new Int32Array(n);else{var h=c*l;r=new Int32Array(h*e);for(var d=0;d<h;d++)for(var p=0;p<e;++p)r[d*e+p]=n[4*d+p]}return Nn(r,[l,c,e],"int32")},t.prototype.read=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.readSync(t)]}))}))},t.prototype.readSync=function(t){var e=this.data.get(t),n=e.dtype,r=e.complexTensors;return"complex64"===n?Ro(this.readSync(r.real.dataId),this.readSync(r.imag.dataId)):this.data.get(t).values},t.prototype.bufferSync=function(t){var e=this.readSync(t.dataId),n=e;if("string"===t.dtype)try{n=e.map((function(t){return et(t)}))}catch(t){throw new Error("Failed to decode encoded string bytes into utf-8")}return or(t.shape,t.dtype,n)},t.prototype.disposeData=function(t){if(this.data.has(t)){var e=this.data.get(t).complexTensors;null!=e&&(e.real.dispose(),e.imag.dispose()),this.data.delete(t)}},t.prototype.time=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return e=J(),t(),[2,{kernelMs:J()-e}]}))}))},t.prototype.memory=function(){return{unreliable:!0,reasons:["The reported memory is an upper bound. Due to automatic garbage collection, the true allocated memory may be less."]}},t.prototype.complex=function(t,e){var n=vt.make(t.shape,{},"complex64");return this.data.get(n.dataId).complexTensors={real:Ot.keep(t.clone()),imag:Ot.keep(e.clone())},n},t.prototype.real=function(t){return this.data.get(t.dataId).complexTensors.real.clone()},t.prototype.imag=function(t){return this.data.get(t.dataId).complexTensors.imag.clone()},t.prototype.assertNotComplex=function(t,e){Array.isArray(t)||(t=[t]),t.forEach((function(t){null!=t&&x("complex64"!==t.dtype,(function(){return e+" does not support complex64 tensors."}))}))},t.prototype.slice=function(t,e,n){if(this.assertNotComplex(t,"slice"),qr(t.shape,e,n)){var r=$r(e,t.strides),o=E(n);return Rn(this.readSync(t.dataId).subarray(r,r+o),n,t.dtype)}for(var i=or(n,t.dtype),a=this.bufferSync(t),s=0;s<i.size;++s){var u=i.indexToLoc(s).map((function(t,n){return t+e[n]}));i.values[s]=a.get.apply(a,u)}return i.toTensor()},t.prototype.stridedSlice=function(t,e,n,r){this.assertNotComplex(t,"stridedSlice");var o=zr(e,n,r);if(o.some((function(t){return 0===t})))return Rn([],o);for(var i=or(o,t.dtype),a=this.bufferSync(t),s=0;s<i.size;s++){for(var u=i.indexToLoc(s),c=new Array(u.length),l=0;l<c.length;l++)c[l]=u[l]*r[l]+e[l];i.set.apply(i,[a.get.apply(a,c)].concat(u))}return i.toTensor()},t.prototype.diag=function(t){for(var e=this.readSync(t.dataId),n=or([t.size,t.size],t.dtype),r=n.values,o=0;o<e.length;o++)r[o*t.size+o]=e[o];return n.toTensor()},t.prototype.unstack=function(t,e){for(var n=t.shape[e],r=new Array(t.rank-1),o=0,i=0;i<t.rank;i++)i!==e&&(r[o++]=t.shape[i]);var a=new Array(t.rank).fill(0),s=t.shape.slice();s[e]=1;var u=new Array(n);for(i=0;i<u.length;i++)a[e]=i,u[i]=this.slice(t,a,s).reshape(r);return u},t.prototype.reverse=function(t,e){this.assertNotComplex(t,"reverse");for(var n=or(t.shape,t.dtype),r=this.bufferSync(t),o=function(o){var i=n.indexToLoc(o),a=i.slice();e.forEach((function(e){return a[e]=t.shape[e]-1-a[e]})),n.set.apply(n,[r.get.apply(r,a)].concat(i))},i=0;i<n.size;i++)o(i);return n.toTensor()},t.prototype.concat=function(t,e){var n=this;if("complex64"===t[0].dtype){var r=t.map((function(t){return Cn(t)})),o=t.map((function(t){return En(t)}));return wn(this.concat(r,e),this.concat(o,e))}var i=t.map((function(t){var n=E(t.shape.slice(e));return t.as2D(-1,n)})),a=xn(i.map((function(t){return t.shape})),1),s=or(a,t[0].dtype).values;if(1===i[0].shape[0]){var u=0;i.forEach((function(t){s.set(n.readSync(t.dataId),u),u+=t.size}))}else{var c=0;i.forEach((function(t){for(var e=n.readSync(t.dataId),r=0,o=0;o<t.shape[0];++o)for(var i=o*a[1]+c,u=0;u<t.shape[1];++u)s[i+u]=e[r++];c+=t.shape[1]}))}var l=xn(t.map((function(t){return t.shape})),e);return Rn(s,l,t[0].dtype)},t.prototype.neg=function(t){return this.assertNotComplex(t,"neg"),this.multiply(Sn(-1),t)},t.prototype.add=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t+n,imag:e+r}})):this.broadcastedBinaryOp(t,e,Rt(t.dtype,e.dtype),(function(t,e){return t+e}))},t.prototype.addN=function(t){var e=this;this.assertNotComplex(t,"addN");for(var n=t.map((function(t){return e.readSync(t.dataId)})),r=or(t[0].shape,t[0].dtype),o=r.values,i=0;i<t.length;i++)for(var a=n[i],s=0;s<o.length;s++)o[s]+=a[s];return r.toTensor()},t.prototype.subtract=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t-n,imag:e-r}})):this.broadcastedBinaryOp(t,e,Rt(t.dtype,e.dtype),(function(t,e){return t-e}))},t.prototype.pow=function(t,e){return this.assertNotComplex([t,e],"pow"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.pow(t,e)}))},t.prototype.batchMatMul=function(t,e,n,r){this.assertNotComplex([t,e],"matMul");for(var o=n?t.shape[1]:t.shape[2],i=n?t.shape[2]:t.shape[1],a=r?e.shape[1]:e.shape[2],s=t.shape[0],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=n?[t.strides[0],1,t.strides[1]]:[t.strides[0],t.strides[1],1],h=l[0],f=l[1],d=l[2],p=r?[1,e.strides[1],e.strides[0]]:[e.strides[1],1,e.strides[0]],v=p[0],m=p[1],g=p[2],y=i*a,x=or([s,i,a],t.dtype),b=x.values,w=this.blockSize,C=0;C<s;C++)for(var E=0;E<i;E+=w)for(var R=0;R<a;R+=w)for(var I=0;I<o;I+=w)for(var S=Math.min(E+w,i),k=Math.min(R+w,a),A=Math.min(I+w,o),N=E;N<S;N++)for(var T=R;T<k;T++){for(var D=0,_=I;_<A;_++)D+=u[C*h+N*f+_*d]*c[_*v+T*m+C*g];b[C*y+(N*a+T)]+=D}return x.toTensor()},t.prototype.fusedBatchMatMul=function(t){var e=t.a,n=t.b,r=t.transposeA,o=t.transposeB,i=t.bias,a=t.activation,s=t.preluActivationWeights,u=this.batchMatMul(e,n,r,o);return i&&(u=this.add(u,i)),a&&(u=$l(this,u,a,s)),u},t.prototype.multiply=function(t,e){return"complex64"===t.dtype||"complex64"===e.dtype?this.broadcastedBinaryComplexOp(t.cast("complex64"),e.cast("complex64"),(function(t,e,n,r){return{real:t*n-e*r,imag:t*r+e*n}})):this.broadcastedBinaryOp(t,e,Rt(t.dtype,e.dtype),(function(t,e){return t*e}))},t.prototype.realDivide=function(t,e){return this.assertNotComplex([t,e],"realDivide"),this.broadcastedBinaryOp(t,e,"float32",(function(t,e){return t/e}))},t.prototype.floorDiv=function(t,e){return this.assertNotComplex([t,e],"floorDiv"),this.broadcastedBinaryOp(t,e,"int32",(function(t,e){return Math.floor(t/e)}))},t.prototype.sum=function(t,e){this.assertNotComplex(t,"sum"),pn("sum",e,t.rank);for(var n=fn(t.shape,e),r=n[0],o=n[1],i=Mn(r,Rt(t.dtype,"int32")),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=0,f=0;f<a;++f)h+=u[l+f];s[c]=h}return i},t.prototype.prod=function(t,e){this.assertNotComplex(t,"sum");for(var n=fn(t.shape,e),r=n[0],o=n[1],i=Mn(r,Rt(t.dtype,"int32")),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=1,f=0;f<a;++f)h*=u[l+f];s[c]=h}return i},t.prototype.unsortedSegmentSum=function(t,e,n){this.assertNotComplex(t,"unsortedSegmentSum");for(var r=[],o=t.rank-e.rank,i=0;i<o;++i)e=e.expandDims(i+1);for(i=0;i<n;++i){var a=Sn(i,"int32"),s=Pu(a,e).asType("float32").mul(t).sum(0);r.push(s)}return kr(r)},t.prototype.argMin=function(t,e){this.assertNotComplex(t,"argMin");var n=[e];pn("argMin",n,t.rank);for(var r=fn(t.shape,n),o=r[0],i=r[1],a=Mn(o,"int32"),s=E(i),u=this.readSync(a.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v<f&&(f=v,d=p)}u[l]=d}return a},t.prototype.argMax=function(t,e){this.assertNotComplex(t,"argMax");var n=[e];pn("argMax",n,t.rank);for(var r=fn(t.shape,n),o=r[0],i=r[1],a=Mn(o,"int32"),s=E(i),u=this.readSync(a.dataId),c=this.readSync(t.dataId),l=0;l<u.length;++l){for(var h=l*s,f=c[h],d=0,p=0;p<s;++p){var v=c[h+p];v>f&&(f=v,d=p)}u[l]=d}return a},t.prototype.cumsum=function(t,e,n,r){if(this.assertNotComplex(t,"cumsum"),e!==t.rank-1)throw new Error("backend.cumsum in CPU expects an inner-most axis="+(t.rank-1)+" but got axis="+e);for(var o=Rt(t.dtype,"int32"),i=Mn(t.shape,o),a=this.readSync(i.dataId),s=this.readSync(t.dataId),u=t.shape[t.rank-1],c=r?function(t,e){return t+u-e-1}:function(t,e){return t+e},l=0;l<s.length;l+=u)for(var h=0;h<u;h++){var f=c(l,h);if(0===h)a[f]=n?0:s[f];else{var d=c(l,h-1);a[f]=n?s[d]+a[d]:s[f]+a[d]}}return i},t.prototype.equal=function(t,e){return this.assertNotComplex([t,e],"equal"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t===e?1:0}))},t.prototype.notEqual=function(t,e){return this.assertNotComplex([t,e],"notEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t!==e?1:0}))},t.prototype.less=function(t,e){return this.assertNotComplex([t,e],"less"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<e?1:0}))},t.prototype.lessEqual=function(t,e){return this.assertNotComplex([t,e],"lessEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t<=e?1:0}))},t.prototype.greater=function(t,e){return this.assertNotComplex([t,e],"greater"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>e?1:0}))},t.prototype.greaterEqual=function(t,e){return this.assertNotComplex([t,e],"greaterEqual"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t>=e?1:0}))},t.prototype.logicalNot=function(t){this.assertNotComplex(t,"logicalNot");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)n[r]=e[r]?0:1;return vt.make(t.shape,{values:n},"bool")},t.prototype.logicalAnd=function(t,e){return this.assertNotComplex([t,e],"logicalAnd"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t&&e}))},t.prototype.logicalOr=function(t,e){return this.assertNotComplex([t,e],"logicalOr"),this.broadcastedBinaryOp(t,e,"bool",(function(t,e){return t||e}))},t.prototype.select=function(t,e,n){this.assertNotComplex([t,e,n],"select");for(var r=this.readSync(t.dataId),o=this.readSync(e.dataId),i=this.readSync(n.dataId),a=Mn(e.shape,Rt(e.dtype,n.dtype)),s=this.readSync(a.dataId),u=0,c=0===t.rank||t.rank>1||1===e.rank?1:e.shape[1],l=0;l<r.length;l++)for(var h=0;h<c;h++)1===r[l]?s[u++]=o[l]:s[u++]=i[l];return a},t.prototype.where=function(t){this.assertNotComplex([t],"where");var e=this.readSync(t.dataId);return Oo(t.shape,e)},t.prototype.topk=function(t,e,n){return this.assertNotComplex(t,"topk"),_o(this.readSync(t.dataId),t.shape,t.dtype,e)},t.prototype.min=function(t,e){this.assertNotComplex(t,"min"),pn("min",e,t.rank);for(var n=fn(t.shape,e),r=n[0],o=n[1],i=Mn(r,t.dtype),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var d=u[l+f];d<h&&(h=d)}s[c]=h}return i},t.prototype.minimum=function(t,e){return this.assertNotComplex([t,e],"minimum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.min(t,e)}))},t.prototype.mod=function(t,e){return this.assertNotComplex([t,e],"mod"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t%e;return t<0&&e<0||t>=0&&e>=0?n:(n+e)%e}))},t.prototype.max=function(t,e){this.assertNotComplex(t,"max"),pn("max",e,t.rank);for(var n=fn(t.shape,e),r=n[0],o=n[1],i=Mn(r,t.dtype),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var d=u[l+f];d>h&&(h=d)}s[c]=h}return i},t.prototype.maximum=function(t,e){return this.assertNotComplex([t,e],"maximum"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.max(t,e)}))},t.prototype.all=function(t,e){this.assertNotComplex(t,"all"),pn("all",e,t.rank);for(var n=fn(t.shape,e),r=n[0],o=n[1],i=Mn(r,t.dtype),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var d=u[l+f];h=h&&d}s[c]=h}return i},t.prototype.any=function(t,e){this.assertNotComplex(t,"any"),pn("any",e,t.rank);for(var n=fn(t.shape,e),r=n[0],o=n[1],i=Mn(r,t.dtype),a=E(o),s=this.readSync(i.dataId),u=this.readSync(t.dataId),c=0;c<s.length;++c){for(var l=c*a,h=u[l],f=0;f<a;++f){var d=u[l+f];h=h||d}s[c]=h}return i},t.prototype.squaredDifference=function(t,e){return this.assertNotComplex([t,e],"squaredDifference"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){var n=t-e;return n*n}))},t.prototype.ceil=function(t){this.assertNotComplex(t,"ceil");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.ceil(e[r]);return vt.make(t.shape,{values:n})},t.prototype.floor=function(t){this.assertNotComplex(t,"floor");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.floor(e[r]);return vt.make(t.shape,{values:n})},t.prototype.sign=function(t){this.assertNotComplex(t,"x");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)e[r]<0?n[r]=-1:e[r]>0?n[r]=1:n[r]=0;return vt.make(t.shape,{values:n})},t.prototype.isNaN=function(t){this.assertNotComplex(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isNaN(e[r])&&(n[r]=1);return vt.make(t.shape,{values:n},"bool")},t.prototype.isInf=function(t){this.assertNotComplex(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Math.abs(e[r])===1/0&&(n[r]=1);return vt.make(t.shape,{values:n},"bool")},t.prototype.isFinite=function(t){this.assertNotComplex(t,"x");for(var e=this.readSync(t.dataId),n=new Uint8Array(e.length),r=0;r<e.length;++r)Number.isFinite(e[r])&&(n[r]=1);return vt.make(t.shape,{values:n},"bool")},t.prototype.round=function(t){this.assertNotComplex(t,"round");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=Math.floor(e[r]);e[r]-o<.5?n[r]=Math.floor(e[r]):e[r]-o>.5?n[r]=Math.ceil(e[r]):n[r]=o%2==0?o:o+1}return vt.make(t.shape,{values:n})},t.prototype.exp=function(t){this.assertNotComplex(t,"exp");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.exp(e[r]);return vt.make(t.shape,{values:n})},t.prototype.expm1=function(t){this.assertNotComplex(t,"expm1");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=Math.expm1(e[r]);return vt.make(t.shape,{values:n})},t.prototype.log=function(t){this.assertNotComplex(t,"log");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log(o)}return vt.make(t.shape,{values:n})},t.prototype.log1p=function(t){this.assertNotComplex(t,"log1p");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.log1p(o)}return vt.make(t.shape,{values:n})},t.prototype.sqrt=function(t){this.assertNotComplex(t,"sqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=Math.sqrt(o)}return vt.make(t.shape,{values:n})},t.prototype.rsqrt=function(t){this.assertNotComplex(t,"rsqrt");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=1/Math.sqrt(o)}return vt.make(t.shape,{values:n})},t.prototype.square=function(t){this.assertNotComplex(t,"square");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r){var o=e[r];n[r]=o*o}return vt.make(t.shape,{values:n})},t.prototype.reciprocal=function(t){this.assertNotComplex(t,"reciprocal");for(var e=this.readSync(t.dataId),n=new Float32Array(e.length),r=0;r<e.length;++r)n[r]=1/e[r];return vt.make(t.shape,{values:n})},t.prototype.linear=function(t){return t},t.prototype.relu=function(t){this.assertNotComplex(t,"relu");for(var e=Mn(t.shape,t.dtype),n=this.readSync(e.dataId),r=this.readSync(t.dataId),o=0;o<r.length;++o)n[o]=Math.max(0,r[o]);return e},t.prototype.prelu=function(t,e){return this.assertNotComplex([t,e],"prelu"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return t<0?e*t:t}))},t.prototype.elu=function(t){this.assertNotComplex(t,"elu");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?o:Math.exp(o)-1}return vt.make(t.shape,{values:e})},t.prototype.eluDer=function(t,e){this.assertNotComplex([t,e],"eluDer");for(var n=new Float32Array(e.size),r=this.readSync(e.dataId),o=this.readSync(t.dataId),i=0;i<r.length;++i){var a=r[i];n[i]=a>=1?o[i]:o[i]*(a+1)}return vt.make(e.shape,{values:n})},t.prototype.selu=function(t){this.assertNotComplex(t,"selu");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r];e[r]=o>=0?1.0507009873554805*o:1.7580993408473768*(Math.exp(o)-1)}return vt.make(t.shape,{values:e})},t.prototype.clip=function(t,e,n){this.assertNotComplex(t,"clip");for(var r=new Float32Array(t.size),o=this.readSync(t.dataId),i=0;i<o.length;++i){var a=o[i];r[i]=a>n?n:a<e?e:a}return vt.make(t.shape,{values:r})},t.prototype.abs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.abs(n[r]);return vt.make(t.shape,{values:e})},t.prototype.complexAbs=function(t){for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<t.size;++r){var o=n[2*r],i=n[2*r+1];e[r]=Math.hypot(o,i)}return vt.make(t.shape,{values:e})},t.prototype.int=function(t){this.assertNotComplex(t,"int");for(var e=new Int32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=n[r];return vt.make(t.shape,{values:e},"int32")},t.prototype.sigmoid=function(t){this.assertNotComplex(t,"sigmoid");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=1/(1+Math.exp(-n[r]));return vt.make(t.shape,{values:e})},t.prototype.softplus=function(t){this.assertNotComplex(t,"softplus");for(var e=Math.log(1.1920928955078125e-7)+2,n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i,a=r[o]>-e,s=r[o]<e,u=Math.exp(r[o]);i=s?u:a?r[o]:Math.log(1+u),n[o]=i}return vt.make(t.shape,{values:n})},t.prototype.sin=function(t){this.assertNotComplex(t,"sin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sin(n[r]);return vt.make(t.shape,{values:e})},t.prototype.cos=function(t){this.assertNotComplex(t,"cos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cos(n[r]);return vt.make(t.shape,{values:e})},t.prototype.tan=function(t){this.assertNotComplex(t,"tan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.tan(n[r]);return vt.make(t.shape,{values:e})},t.prototype.asin=function(t){this.assertNotComplex(t,"asin");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asin(n[r]);return vt.make(t.shape,{values:e})},t.prototype.acos=function(t){this.assertNotComplex(t,"acos");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acos(n[r]);return vt.make(t.shape,{values:e})},t.prototype.atan=function(t){this.assertNotComplex(t,"atan");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atan(n[r]);return vt.make(t.shape,{values:e})},t.prototype.atan2=function(t,e){return this.assertNotComplex([t,e],"atan2"),this.broadcastedBinaryOp(t,e,t.dtype,(function(t,e){return Math.atan2(t,e)}))},t.prototype.sinh=function(t){this.assertNotComplex(t,"sinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.sinh(n[r]);return vt.make(t.shape,{values:e})},t.prototype.cosh=function(t){this.assertNotComplex(t,"cosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.cosh(n[r]);return vt.make(t.shape,{values:e})},t.prototype.tanh=function(t){this.assertNotComplex(t,"tanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=S(n[r]);return vt.make(t.shape,{values:e})},t.prototype.asinh=function(t){this.assertNotComplex(t,"asinh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.asinh(n[r]);return vt.make(t.shape,{values:e})},t.prototype.acosh=function(t){this.assertNotComplex(t,"acosh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.acosh(n[r]);return vt.make(t.shape,{values:e})},t.prototype.atanh=function(t){this.assertNotComplex(t,"atanh");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r)e[r]=Math.atanh(n[r]);return vt.make(t.shape,{values:e})},t.prototype.erf=function(t){this.assertNotComplex(t,"erf");for(var e=new Float32Array(t.size),n=this.readSync(t.dataId),r=0;r<n.length;++r){var o=n[r],i=1/(1+.3275911*o);e[r]=1-((((1.061405429*i-1.453152027)*i+1.421413741)*i-.284496736)*i+.254829592)*i*Math.exp(-o*o)}return vt.make(t.shape,{values:e})},t.prototype.step=function(t,e){void 0===e&&(e=0),this.assertNotComplex(t,"step");for(var n=new Float32Array(t.size),r=this.readSync(t.dataId),o=0;o<r.length;++o){var i=r[o];isNaN(i)?n[o]=NaN:n[o]=i>0?1:e}return vt.make(t.shape,{values:n})},t.prototype.fusedConv2d=function(t,e,n,r,o,i){var a=this.conv2d(t,e,n);return r&&(a=this.add(a,r)),o&&(a=$l(this,a,o,i)),a},t.prototype.conv2d=function(t,e,n){this.assertNotComplex([t,e],"conv2d");for(var r=n.filterHeight,o=n.filterWidth,i=n.dilationHeight,a=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c="channelsLast"===n.dataFormat,l=or(n.outShape,t.dtype),h=t.strides[0],f=c?t.strides[1]:t.strides[2],d=c?t.strides[2]:1,p=c?1:t.strides[1],v=l.strides[0],m=c?l.strides[1]:l.strides[2],g=c?l.strides[2]:1,y=c?1:l.strides[1],x=this.readSync(t.dataId),b=this.readSync(e.dataId),w=l.values,C=0;C<n.batchSize;++C)for(var E=C*h,R=C*v,I=0;I<n.outHeight;++I)for(var S=R+I*m,k=I*n.strideHeight-u,A=0;A<r;A++){var N=k+A*i;if(!(N<0||N>=n.inHeight))for(var T=A*e.strides[0],D=E+N*f,_=0;_<n.outWidth;++_)for(var O=S+_*g,M=_*n.strideWidth-s,F=0;F<o;F++){var B=M+F*a;if(!(B<0||B>=n.inWidth))for(var P=D+B*d,L=T+F*e.strides[1],W=0;W<n.inChannels;++W){for(var U=x[P+W*p],V=0;V<n.outChannels;++V)w[O+V*y]+=U*b[L+V];L+=n.outChannels}}}return l.toTensor()},t.prototype.conv3d=function(t,e,n){for(var r=n.filterDepth,o=n.filterHeight,i=n.filterWidth,a=n.dilationDepth,s=n.dilationHeight,u=n.dilationWidth,c=n.padInfo.front,l=n.padInfo.left,h=n.padInfo.top,f=or(n.outShape,t.dtype),d=this.readSync(t.dataId),p=this.readSync(e.dataId),v=f.values,m=0;m<n.batchSize;++m)for(var g=m*t.strides[0],y=m*f.strides[0],x=0;x<n.outDepth;++x)for(var b=y+x*f.strides[1],w=x*n.strideDepth-c,C=0;C<r;C++){var E=w+C*a;if(!(E<0||E>=n.inDepth))for(var R=C*e.strides[0],I=g+E*t.strides[1],S=0;S<n.outHeight;++S)for(var k=b+S*f.strides[2],A=S*n.strideHeight-h,N=0;N<o;N++){var T=A+N*s;if(!(T<0||T>=n.inHeight))for(var D=R+N*e.strides[1],_=I+T*t.strides[2],O=0;O<n.outWidth;++O)for(var M=k+O*n.outChannels,F=O*n.strideWidth-l,B=0;B<i;B++){var P=F+B*u;if(!(P<0||P>=n.inWidth))for(var L=D+B*e.strides[2],W=_+P*n.inChannels,U=L,V=0;V<n.inChannels;++V){for(var z=d[W+V],G=0;G<n.outChannels;++G)v[M+G]+=z*p[U+G];U+=n.outChannels}}}}return f.toTensor()},t.prototype.conv2dDerInput=function(t,e,n){this.assertNotComplex([t,e],"conv2dDerInput");for(var r=or(n.inShape,"float32"),o=r.values,i=this.readSync(t.dataId),a=this.readSync(e.dataId),s=e.strides,u=s[0],c=s[1],l=s[2],h=n.batchSize,f=n.filterHeight,d=n.filterWidth,p=n.inChannels,v=n.inHeight,m=n.inWidth,g=n.outChannels,y=n.outHeight,x=n.outWidth,b=n.strideHeight,w=n.strideWidth,C=n.dataFormat,E=f-1-n.padInfo.top,R=d-1-n.padInfo.left,I="channelsLast"===C,S=r.strides[0],k=I?r.strides[1]:r.strides[2],A=I?r.strides[2]:1,N=I?1:r.strides[1],T=t.strides[0],D=I?t.strides[1]:t.strides[2],_=I?t.strides[2]:1,O=I?1:t.strides[1],M=0;M<h;++M)for(var F=0;F<p;++F)for(var B=0;B<v;++B)for(var P=B-E,L=Math.max(0,Math.ceil(P/b)),W=Math.min(y,(f+P)/b),U=0;U<m;++U){for(var V=U-R,z=Math.max(0,Math.ceil(V/w)),G=Math.min(x,(d+V)/w),H=0,q=L;q<W;++q)for(var $=q*b-P,j=z;j<G;++j)for(var K=T*M+D*q+_*j,X=u*(f-1-$)+c*(d-1-(j*w-V))+l*F,Y=0;Y<g;++Y)H+=i[K+O*Y]*a[X+Y];o[S*M+k*B+A*U+N*F]=H}return r.toTensor()},t.prototype.conv3dDerInput=function(t,e,n){for(var r=or(n.inShape,"float32"),o=r.values,i=r.strides,a=i[0],s=i[1],u=i[2],c=i[3],l=this.readSync(t.dataId),h=t.strides,f=h[0],d=h[1],p=h[2],v=h[3],m=this.readSync(e.dataId),g=e.strides,y=g[0],x=g[1],b=g[2],w=g[3],C=n.batchSize,E=n.filterDepth,R=n.filterHeight,I=n.filterWidth,S=n.inChannels,k=n.inDepth,A=n.inHeight,N=n.inWidth,T=n.outChannels,D=n.outDepth,_=n.outHeight,O=n.outWidth,M=n.strideDepth,F=n.strideHeight,B=n.strideWidth,P=E-1-n.padInfo.front,L=R-1-n.padInfo.top,W=I-1-n.padInfo.left,U=0;U<C;++U)for(var V=0;V<S;++V)for(var z=0;z<k;++z)for(var G=z-P,H=Math.max(0,Math.ceil(G/M)),q=Math.min(D,(E+G)/M),$=0;$<A;++$)for(var j=$-L,K=Math.max(0,Math.ceil(j/F)),X=Math.min(_,(R+j)/F),Y=0;Y<N;++Y){for(var Q=Y-W,J=Math.max(0,Math.ceil(Q/B)),Z=Math.min(O,(I+Q)/B),tt=0,et=H;et<q;++et)for(var nt=et*M-G,rt=K;rt<X;++rt)for(var ot=rt*F-j,it=J;it<Z;++it)for(var at=f*U+d*et+p*rt+v*it,st=y*(E-1-nt)+x*(R-1-ot)+b*(I-1-(it*B-Q))+w*V,ut=0;ut<T;++ut)tt+=l[at+ut]*m[st+ut];o[a*U+s*z+u*$+c*Y+V]=tt}return r.toTensor()},t.prototype.conv2dDerFilter=function(t,e,n){this.assertNotComplex([t,e],"conv2dDerFilter");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s="channelsLast"===n.dataFormat,u=or(n.filterShape,"float32"),c=n.padInfo.left,l=n.padInfo.top,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<i;++d)for(var p=Math.max(0,Math.ceil((l-d)/r)),v=Math.min(n.outHeight,(n.inHeight+l-d)/r),m=0;m<a;++m)for(var g=Math.max(0,Math.ceil((c-m)/o)),y=Math.min(n.outWidth,(n.inWidth+c-m)/o),x=0;x<n.inChannels;++x)for(var b=0;b<n.outChannels;++b){for(var w=0,C=0;C<n.batchSize;++C)for(var E=p;E<v;++E)for(var R=d+E*r-l,I=g;I<y;++I){var S=m+I*o-c;w+=s?h.get(C,R,S,x)*f.get(C,E,I,b):h.get(C,x,R,S)*f.get(C,b,E,I)}u.set(w,d,m,x,b)}return u.toTensor()},t.prototype.conv3dDerFilter=function(t,e,n){for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=or(n.filterShape,"float32"),l=c.values,h=c.strides,f=h[0],d=h[1],p=h[2],v=h[3],m=this.readSync(e.dataId),g=e.strides,y=g[0],x=g[1],b=g[2],w=g[3],C=this.readSync(t.dataId),E=t.strides,R=E[0],I=E[1],S=E[2],k=E[3],A=n.padInfo.front,N=n.padInfo.left,T=n.padInfo.top,D=0;D<a;++D)for(var _=Math.max(0,Math.ceil((A-D)/r)),O=Math.min(n.outDepth,(n.inDepth+A-D)/r),M=D*f,F=0;F<s;++F)for(var B=Math.max(0,Math.ceil((T-F)/o)),P=Math.min(n.outHeight,(n.inHeight+T-F)/o),L=F*d+M,W=0;W<u;++W)for(var U=Math.max(0,Math.ceil((N-W)/i)),V=Math.min(n.outWidth,(n.inWidth+N-W)/i),z=W*p+L,G=0;G<n.inChannels;++G)for(var H=G*v+z,q=0;q<n.outChannels;++q){for(var $=0,j=0;j<n.batchSize;++j)for(var K=j*R,X=j*y,Y=_;Y<O;++Y)for(var Q=(D+Y*r-A)*I+K,J=Y*x+X,Z=B;Z<P;++Z)for(var tt=(F+Z*o-T)*S+Q,et=Z*b+J,nt=U;nt<V;++nt){var rt=nt*w+et;$+=C[(W+nt*i-N)*k+tt+G]*m[rt+q]}l[H+q]=$}return c.toTensor()},t.prototype.depthwiseConv2D=function(t,e,n){this.assertNotComplex([t,e],"depthwiseConv2D");for(var r=n.filterHeight,o=n.filterWidth,i=n.dilationHeight,a=n.dilationWidth,s=n.padInfo.left,u=n.padInfo.top,c=n.outChannels/n.inChannels,l=or(n.outShape,t.dtype),h=this.readSync(t.dataId),f=this.readSync(e.dataId),d=l.values,p=0;p<n.batchSize;++p)for(var v=p*t.strides[0],m=p*l.strides[0],g=0;g<n.outHeight;++g)for(var y=m+g*l.strides[1],x=g*n.strideHeight-s,b=0;b<r;++b){var w=x+b*i;if(!(w<0||w>=n.inHeight))for(var C=b*e.strides[0],E=v+w*t.strides[1],R=0;R<n.outWidth;++R)for(var I=y+R*l.strides[2],S=R*n.strideWidth-u,k=0;k<o;++k){var A=S+k*a;if(!(A<0||A>=n.inWidth))for(var N=C+k*e.strides[1],T=E+A*n.inChannels,D=I,_=N,O=0;O<n.inChannels;++O){for(var M=h[T+O],F=0;F<c;++F)d[D+F]+=M*f[_+F];D+=c,_+=c}}}return l.toTensor()},t.prototype.depthwiseConv2DDerInput=function(t,e,n){this.assertNotComplex([t,e],"depthwiseConv2DDerInput");for(var r=or(n.inShape,"float32"),o=r.values,i=r.strides,a=i[0],s=i[1],u=i[2],c=this.readSync(t.dataId),l=t.strides,h=l[0],f=l[1],d=l[2],p=this.readSync(e.dataId),v=e.strides,m=v[0],g=v[1],y=v[2],x=n.batchSize,b=n.filterHeight,w=n.filterWidth,C=n.inChannels,E=n.inHeight,R=n.inWidth,I=n.outChannels,S=n.outHeight,k=n.outWidth,A=n.strideHeight,N=n.strideWidth,T=b-1-n.padInfo.top,D=w-1-n.padInfo.left,_=I/C,O=0;O<x;++O)for(var M=0;M<C;++M)for(var F=0;F<E;++F)for(var B=F-T,P=Math.max(0,Math.ceil(B/A)),L=Math.min(S,(b+B)/A),W=0;W<R;++W){for(var U=W-D,V=Math.max(0,Math.ceil(U/N)),z=Math.min(k,(w+U)/N),G=0,H=P;H<L;++H)for(var q=H*A-B,$=V;$<z;++$)for(var j=h*O+f*H+d*$,K=m*(b-1-q)+g*(w-1-($*N-U))+y*M,X=0;X<_;++X)G+=c[j+(M*_+X)]*p[K+X];o[a*O+s*F+u*W+M]=G}return r.toTensor()},t.prototype.depthwiseConv2DDerFilter=function(t,e,n){this.assertNotComplex([t,e],"depthwiseConv2DDerFilter");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s=or(n.filterShape,"float32"),u=n.padInfo.left,c=n.padInfo.top,l=n.outChannels/n.inChannels,h=this.bufferSync(t),f=this.bufferSync(e),d=0;d<i;++d)for(var p=Math.max(0,Math.ceil((c-d)/r)),v=Math.min(n.outHeight,(n.inHeight+c-d)/r),m=0;m<a;++m)for(var g=Math.max(0,Math.ceil((u-m)/o)),y=Math.min(n.outWidth,(n.inWidth+u-m)/o),x=0;x<n.outChannels;++x){for(var b=Math.trunc(x/l),w=x%l,C=0,E=0;E<n.batchSize;++E)for(var R=p;R<v;++R)for(var I=d+R*r-c,S=g;S<y;++S){var k=m+S*o-u;C+=h.get(E,I,k,b)*f.get(E,R,S,x)}s.set(C,d,m,b,w)}return s.toTensor()},t.prototype.tile=function(t,e){return this.assertNotComplex(t,"tile"),Do(this.bufferSync(t),e)},t.prototype.pad=function(t,e,n){this.assertNotComplex(t,"pad");var r=e.map((function(e,n){return e[0]+t.shape[n]+e[1]})),o=e.map((function(t){return t[0]})),i=this.bufferSync(t),a=or(r,t.dtype);0!==n&&a.values.fill(n);for(var s=0;s<t.size;s++){var u=i.indexToLoc(s),c=u.map((function(t,e){return t+o[e]}));a.set.apply(a,[i.get.apply(i,u)].concat(c))}return a.toTensor()},t.prototype.transpose=function(t,e){this.assertNotComplex(t,"transpose");for(var n=new Array(t.rank),r=0;r<n.length;r++)n[r]=t.shape[e[r]];var o=this.readSync(t.dataId),i=or(n,t.dtype),a=this.bufferSync(t);for(r=0;r<t.size;++r){for(var s=a.indexToLoc(r),u=new Array(s.length),c=0;c<u.length;c++)u[c]=s[e[c]];var l=i.locToIndex(u);i.values[l]=o[r]}return i.toTensor()},t.prototype.gather=function(t,e,n){this.assertNotComplex([t,e],"gather");var r=t.shape.slice(),o=this.readSync(e.dataId);r[n]=o.length;for(var i=or(r,t.dtype),a=this.bufferSync(t),s=0;s<i.size;++s){var u=i.indexToLoc(s),c=u.slice();c[n]=o[u[n]];var l=a.locToIndex(c);i.values[s]=a.values[l]}return i.toTensor()},t.prototype.batchToSpaceND=function(t,e,n){this.assertNotComplex([t],"batchToSpaceND");var r=e.reduce((function(t,e){return t*e})),o=_r(t.shape,e,r),i=Or(o.length,e.length),a=Mr(t.shape,e,r),s=Fr(n,e.length),u=Br(a,n,e.length);return t.reshape(o).transpose(i).reshape(a).slice(s,u)},t.prototype.spaceToBatchND=function(t,e,n){this.assertNotComplex([t],"spaceToBatchND");var r=e.reduce((function(t,e){return t*e})),o=[[0,0]];o.push.apply(o,n);for(var i=1+e.length;i<t.shape.length;++i)o.push([0,0]);var a=t.pad(o),s=_r(a.shape,e,r,!1),u=Or(s.length,e.length,!1),c=Mr(a.shape,e,r,!1);return a.reshape(s).transpose(u).reshape(c)},t.prototype.pool=function(t,e,n){this.assertNotComplex(t,"pool");for(var r=e.strideHeight,o=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=e.padInfo.top,l=e.padInfo.left,h="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,f=this.readSync(t.dataId),d=or(e.outShape,t.dtype),p=d.values,v=e.outShape[1]*e.outShape[2]*e.outShape[3],m=e.outShape[2]*e.outShape[3],g=e.outShape[3],y=0;y<e.batchSize;++y)for(var x=y*v,b=y*t.strides[0],w=0;w<e.inChannels;++w)for(var C=0;C<e.outHeight;++C)for(var E=C*r-c,R=Math.max(0,E),I=Math.min(e.inHeight,s+E),S=x+C*m,k=0;k<e.outWidth;++k){for(var A=k*o-l,N=Math.max(0,A),T=Math.min(e.inWidth,u+A),D=h,_=0,O=0,M=R;M<I;M+=i){for(var F=b+M*t.strides[1],B=N;B<T;B+=a){var P=f[F+B*t.strides[2]+w];"max"===n&&P>D?D=P:"avg"===n&&(_+=P,O++)}if(isNaN(D))break}p[S+k*g+w]="avg"===n?_/O:D}return d.toTensor()},t.prototype.maxPool=function(t,e){return this.pool(t,e,"max")},t.prototype.maxPoolPositions=function(t,e){for(var n=or(e.outShape,"int32"),r=e.strideHeight,o=e.strideWidth,i=e.dilationHeight,a=e.dilationWidth,s=e.effectiveFilterHeight,u=e.effectiveFilterWidth,c=e.padInfo.top,l=e.padInfo.left,h=this.bufferSync(t),f=0;f<e.batchSize;++f)for(var d=0;d<e.inChannels;++d)for(var p=0;p<e.outHeight;++p){for(var v=p*r-c,m=v;m<0;)m+=i;for(var g=Math.min(e.inHeight,s+v),y=0;y<e.outWidth;++y){for(var x=y*o-l,b=x;b<0;)b+=a;for(var w=Math.min(e.inWidth,u+x),C=Number.NEGATIVE_INFINITY,E=-1,R=m;R<g;R+=i)for(var I=R-v,S=b;S<w;S+=a){var k=S-x,A=h.get(f,R,S,d);A>C&&(C=A,E=I*u+k)}n.set(E,f,p,y,d)}}return n.toTensor()},t.prototype.maxPoolBackprop=function(t,e,n,r){this.assertNotComplex([e,n],"maxPoolBackprop");for(var o=this.maxPoolPositions(e,r),i=r.strideHeight,a=r.strideWidth,s=r.dilationHeight,u=r.dilationWidth,c=r.effectiveFilterHeight,l=r.effectiveFilterWidth,h=l-1-r.padInfo.left,f=c-1-r.padInfo.top,d=or(e.shape,"float32"),p=this.bufferSync(o),v=this.bufferSync(t),m=0;m<r.batchSize;++m)for(var g=0;g<r.inChannels;++g)for(var y=0;y<r.inHeight;++y)for(var x=0;x<r.inWidth;++x){for(var b=y-f,w=x-h,C=0,E=0;E<c;E+=s){var R=(b+E)/i;if(!(R<0||R>=r.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=u){var S=(w+I)/a;if(!(S<0||S>=r.outWidth||Math.floor(S)!==S)){var k=c*l-1-p.get(m,R,S,g)===E*l+I?1:0;0!==k&&(C+=v.get(m,R,S,g)*k)}}}d.set(C,m,y,x,g)}return d.toTensor()},t.prototype.avgPoolBackprop=function(t,e,n){this.assertNotComplex([t,e],"avgPoolBackprop");for(var r=n.strideHeight,o=n.strideWidth,i=n.filterHeight,a=n.filterWidth,s=n.dilationHeight,u=n.dilationWidth,c=n.effectiveFilterHeight,l=n.effectiveFilterWidth,h=l-1-n.padInfo.left,f=c-1-n.padInfo.top,d=or(e.shape,"float32"),p=1/(i*a),v=this.bufferSync(t),m=0;m<n.batchSize;++m)for(var g=0;g<n.inChannels;++g)for(var y=0;y<n.inHeight;++y)for(var x=0;x<n.inWidth;++x){for(var b=y-f,w=x-h,C=0,E=0;E<c;E+=s){var R=(b+E)/r;if(!(R<0||R>=n.outHeight||Math.floor(R)!==R))for(var I=0;I<l;I+=u){var S=(w+I)/o;S<0||S>=n.outWidth||Math.floor(S)!==S||(C+=v.get(m,R,S,g))}}d.set(C*p,m,y,x,g)}return d.toTensor()},t.prototype.pool3d=function(t,e,n){this.assertNotComplex(t,"pool3d");for(var r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v="max"===n?Number.NEGATIVE_INFINITY:Number.POSITIVE_INFINITY,m=this.readSync(t.dataId),g=or(e.outShape,t.dtype),y=g.values,x=e.outShape[1]*e.outShape[2]*e.outShape[3]*e.outShape[4],b=e.outShape[2]*e.outShape[3]*e.outShape[4],w=e.outShape[3]*e.outShape[4],C=e.outShape[4],E=0;E<e.batchSize;++E)for(var R=E*x,I=E*t.strides[0],S=0;S<e.inChannels;++S)for(var k=0;k<e.outDepth;++k){for(var A=k*r-f,N=A;N<0;)N+=a;for(var T=Math.min(e.inDepth,c+A),D=R+k*b,_=0;_<e.outHeight;++_){for(var O=_*o-d,M=O;M<0;)M+=s;for(var F=Math.min(e.inHeight,l+O),B=D+_*w,P=0;P<e.outWidth;++P){for(var L=P*i-p,W=L;W<0;)W+=u;for(var U=Math.min(e.inWidth,h+L),V=B+P*C,z=v,G=0,H=0,q=N;q<T;q+=a){for(var $=I+q*t.strides[1],j=M;j<F;j+=s){for(var K=$+j*t.strides[2],X=W;X<U;X+=u){var Y=m[K+X*t.strides[3]+S];if("max"===n&&Y>z?z=Y:"avg"===n&&(G+=Y,H++),isNaN(z))break}if(isNaN(z))break}if(isNaN(z))break}y[V+S]="avg"===n?G/H:z}}}return g.toTensor()},t.prototype.avgPool3d=function(t,e){return this.assertNotComplex(t,"avgPool3d"),this.pool3d(t,e,"avg").toFloat()},t.prototype.avgPool3dBackprop=function(t,e,n){this.assertNotComplex([t,e],"avgPool3dBackprop");for(var r=n.strideDepth,o=n.strideHeight,i=n.strideWidth,a=n.filterDepth,s=n.filterHeight,u=n.filterWidth,c=n.dilationDepth,l=n.dilationHeight,h=n.dilationWidth,f=n.effectiveFilterDepth,d=n.effectiveFilterHeight,p=n.effectiveFilterWidth,v=f-1-n.padInfo.front,m=p-1-n.padInfo.left,g=d-1-n.padInfo.top,y=or(e.shape,"float32"),x=1/(a*s*u),b=this.bufferSync(t),w=0;w<n.batchSize;++w)for(var C=0;C<n.inChannels;++C)for(var E=0;E<n.inDepth;++E)for(var R=0;R<n.inHeight;++R)for(var I=0;I<n.inWidth;++I){for(var S=E-v,k=R-g,A=I-m,N=0,T=0;T<f;T+=c){var D=(S+T)/r;if(!(D<0||D>=n.outDepth||Math.floor(D)!==D))for(var _=0;_<d;_+=l){var O=(k+_)/o;if(!(O<0||O>=n.outHeight||Math.floor(O)!==O))for(var M=0;M<p;M+=h){var F=(A+M)/i;F<0||F>=n.outWidth||Math.floor(F)!==F||(N+=b.get(w,D,O,F,C))}}}y.set(N*x,w,E,R,I,C)}return y.toTensor()},t.prototype.maxPool3d=function(t,e){return this.assertNotComplex(t,"maxPool3d"),this.pool3d(t,e,"max").toFloat()},t.prototype.maxPool3dPositions=function(t,e){for(var n=or(e.outShape,"int32"),r=e.strideDepth,o=e.strideHeight,i=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,u=e.dilationWidth,c=e.effectiveFilterDepth,l=e.effectiveFilterHeight,h=e.effectiveFilterWidth,f=e.padInfo.front,d=e.padInfo.top,p=e.padInfo.left,v=this.bufferSync(t),m=0;m<e.batchSize;++m)for(var g=0;g<e.inChannels;++g)for(var y=0;y<e.outDepth;++y){for(var x=y*r-f,b=x;b<0;)b+=a;for(var w=Math.min(e.inDepth,c+x),C=0;C<e.outHeight;++C){for(var E=C*o-d,R=E;R<0;)R+=s;for(var I=Math.min(e.inHeight,l+E),S=0;S<e.outWidth;++S){for(var k=S*i-p,A=k;A<0;)A+=u;for(var N=Math.min(e.inWidth,h+k),T=Number.NEGATIVE_INFINITY,D=-1,_=b;_<w;_+=a)for(var O=_-x,M=R;M<I;M+=s)for(var F=M-E,B=A;B<N;B+=u){var P=B-k,L=v.get(m,_,M,B,g);L>=T&&(T=L,D=O*l*h+F*l+P)}n.set(D,m,y,C,S,g)}}}return n.toTensor()},t.prototype.maxPool3dBackprop=function(t,e,n,r){this.assertNotComplex([e,n],"maxPool3dBackprop");for(var o=this.maxPool3dPositions(e,r),i=r.strideDepth,a=r.strideHeight,s=r.strideWidth,u=r.dilationDepth,c=r.dilationHeight,l=r.dilationWidth,h=r.effectiveFilterDepth,f=r.effectiveFilterHeight,d=r.effectiveFilterWidth,p=h-1-r.padInfo.front,v=d-1-r.padInfo.left,m=f-1-r.padInfo.top,g=or(e.shape,"float32"),y=this.bufferSync(o),x=this.bufferSync(t),b=0;b<r.batchSize;++b)for(var w=0;w<r.inChannels;++w)for(var C=0;C<r.inDepth;++C)for(var E=0;E<r.inHeight;++E)for(var R=0;R<r.inWidth;++R){for(var I=C-p,S=E-m,k=R-v,A=0,N=0;N<h;N+=u){var T=(I+N)/i;if(!(T<0||T>=r.outDepth||Math.floor(T)!==T))for(var D=0;D<f;D+=c){var _=(S+D)/a;if(!(_<0||_>=r.outHeight||Math.floor(_)!==_))for(var O=0;O<d;O+=l){var M=(k+O)/s;if(!(M<0||M>=r.outWidth||Math.floor(M)!==M)){var F=h*f*d-1-y.get(b,T,_,M,w)===N*f*d+D*d+O?1:0;0!==F&&(A+=x.get(b,T,_,M,w)*F)}}}}g.set(A,b,C,E,R,w)}return g.toTensor()},t.prototype.cast=function(t,e){return bo(t,e,this)},t.prototype.reshape=function(t,e){return wo(t,e)},t.prototype.avgPool=function(t,e){return this.assertNotComplex(t,"avgPool"),this.pool(t,e,"avg").toFloat()},t.prototype.resizeBilinear=function(t,e,n,r){this.assertNotComplex(t,"resizeBilinear");for(var o=t.shape,i=o[0],a=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(E([i,e,n,u])),h=[r&&e>1?a-1:a,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=0,p=h[0]/f[0],v=h[1]/f[1],m=0;m<i;m++)for(var g=0;g<e;g++)for(var y=p*g,x=Math.floor(y),b=y-x,w=Math.min(a-1,Math.ceil(y)),C=m*t.strides[0]+x*t.strides[1],R=m*t.strides[0]+w*t.strides[1],I=0;I<n;I++)for(var S=v*I,k=Math.floor(S),A=S-k,N=Math.min(s-1,Math.ceil(S)),T=C+k*t.strides[2],D=R+k*t.strides[2],_=C+ +N*t.strides[2],O=R+N*t.strides[2],M=0;M<u;M++){var F=c[T+M],B=c[D+M],P=F+(c[_+M]-F)*A,L=P+(B+(c[O+M]-B)*A-P)*b;l[d++]=L}return Rn(l,[i,e,n,u])},t.prototype.resizeBilinearBackprop=function(t,e,n){this.assertNotComplex([t,e],"resizeBilinearBackprop");for(var r=e.shape,o=r[0],i=r[1],a=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*i*a*s),f=[n&&c>1?i-1:i,n&&l>1?a-1:a],d=[n&&c>1?c-1:c,n&&l>1?l-1:l],p=f[0]/d[0],v=f[1]/d[1],m=this.readSync(t.dataId),g=0,y=0;y<o;y++)for(var x=y*e.strides[0],b=0;b<c;b++)for(var w=b*p,C=Math.floor(w),E=Math.min(Math.ceil(w),i-1),R=x+C*e.strides[1],I=x+E*e.strides[1],S=w-C,k=1-S,A=0;A<l;A++)for(var N=A*v,T=Math.floor(N),D=Math.min(Math.ceil(N),a-1),_=N-T,O=1-_,M=R+T*e.strides[2],F=R+D*e.strides[2],B=I+T*e.strides[2],P=I+D*e.strides[2],L=k*O,W=k*_,U=S*O,V=S*_,z=0;z<s;z++){var G=m[g++];h[M+z]+=G*L,h[F+z]+=G*W,h[B+z]+=G*U,h[P+z]+=G*V}return Tn(h,[o,a,i,s],e.dtype)},t.prototype.resizeNearestNeighbor=function(t,e,n,r){this.assertNotComplex(t,"resizeNearestNeighbor");for(var o=t.shape,i=o[0],a=o[1],s=o[2],u=o[3],c=this.readSync(t.dataId),l=new Float32Array(i*e*n*u),h=[r&&e>1?a-1:a,r&&n>1?s-1:s],f=[r&&e>1?e-1:e,r&&n>1?n-1:n],d=h[0]/f[0],p=h[1]/f[1],v=0,m=0;m<i;m++)for(var g=m*t.strides[0],y=0;y<e;y++)for(var x=d*y,b=g+Math.min(a-1,r?Math.round(x):Math.floor(x))*t.strides[1],w=0;w<n;w++)for(var C=p*w,E=b+Math.min(s-1,r?Math.round(C):Math.floor(C))*t.strides[2],R=0;R<u;R++){var I=c[E+R];l[v++]=I}return Rn(l,[i,e,n,u],t.dtype)},t.prototype.resizeNearestNeighborBackprop=function(t,e,n){this.assertNotComplex([t,e],"resizeNearestNeighborBackprop");for(var r=e.shape,o=r[0],i=r[1],a=r[2],s=r[3],u=t.shape,c=u[1],l=u[2],h=new Float32Array(o*i*a*s),f=this.readSync(t.dataId),d=[n&&c>1?i-1:i,n&&l>1?a-1:a],p=[n&&c>1?c-1:c,n&&l>1?l-1:l],v=d[0]/p[0],m=d[1]/p[1],g=1/v,y=1/m,x=2*Math.ceil(g)+2,b=2*Math.ceil(y)+2,w=0;w<o;w++)for(var C=w*e.strides[0],E=0;E<i;E++)for(var R=C+E*e.strides[1],I=Math.floor(E*g),S=Math.floor(I-x/2),k=0;k<a;k++)for(var A=R+k*e.strides[2],N=Math.floor(k*y),T=Math.floor(N-b/2),D=0;D<s;D++){for(var _=0,O=0;O<x;O++){var M=O+S;if(!(M<0||M>=c)){var F=C+M*t.strides[1],B=M*v;if(E===Math.min(i-1,n?Math.round(B):Math.floor(B)))for(var P=0;P<b;P++){var L=P+T;if(!(L<0||L>=l)){var W=F+L*t.strides[2],U=L*m;k===Math.min(a-1,n?Math.round(U):Math.floor(U))&&(_+=f[W+D])}}}}h[A+D]=_}return Tn(h,e.shape,e.dtype)},t.prototype.batchNormalization=function(t,e,n,r,o,i){this.assertNotComplex([t,e,n,o,i],"batchNorm");for(var a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=this.readSync(n.dataId),c=o?this.readSync(o.dataId):new Float32Array([1]),l=i?this.readSync(i.dataId):new Float32Array([0]),h=new Float32Array(a.length),f=l.length,d=c.length,p=u.length,v=s.length,m=0,g=0,y=0,x=0,b=0;b<a.length;++b)h[b]=l[m++]+(a[b]-s[g++])*c[y++]/Math.sqrt(u[x++]+r),m>=f&&(m=0),g>=v&&(g=0),y>=d&&(y=0),x>=p&&(x=0);return Tn(h,t.shape)},t.prototype.localResponseNormalization4D=function(t,e,n,r,o){this.assertNotComplex(t,"localResponseNormalization4D");var i=t.shape[3],a=i-1,s=this.readSync(t.dataId),u=t.size,c=new Float32Array(u);function l(t){for(var n=t%i,r=t-n+Math.max(0,n-e),o=t-n+Math.min(n+e,a),u=0;r<=o;r++){var c=s[r];u+=c*c}return u}for(var h=0;h<u;h++){var f=l(h),d=s[h]*Math.pow(n+r*f,-o);c[h]=d}return Tn(c,t.shape)},t.prototype.LRNGrad=function(t,e,n,r,o,i,a){this.assertNotComplex(t,"LRNGrad");for(var s=t.shape[3],u=this.readSync(t.dataId),c=this.readSync(e.dataId),l=this.readSync(n.dataId),h=new Float32Array(t.size),f=t.size,d=0;d<f;d++){for(var p=d%s,v=d-p+Math.max(0,p-r),m=d-p+Math.min(s,p+r+1),g=0,y=v;y<m;y++)g+=Math.pow(c[y],2);for(g=i*g+o,y=v;y<m;y++){var x=-2*i*a*c[y]*l[d]/g;d===y&&(x+=Math.pow(g,-a)),x*=u[d],h[y]+=x}}return Tn(h,t.shape)},t.prototype.multinomial=function(t,e,n,r){this.assertNotComplex(t,"multinomial");for(var o=e?t:to(t),i=o.shape[0],a=o.shape[1],s=Mn([i,n],"int32"),u=this.readSync(s.dataId),c=this.readSync(o.dataId),l=0;l<i;++l){var h=l*a,f=new Float32Array(a-1);f[0]=c[h];for(var d=1;d<f.length;++d)f[d]=f[d-1]+c[h+d];for(var p=tr(r.toString()),v=l*n,m=0;m<n;++m){var g=p();u[v+m]=f.length;for(var y=0;y<f.length;y++)if(g<f[y]){u[v+m]=y;break}}}return s},t.prototype.oneHot=function(t,e,n,r){this.assertNotComplex(t,"oneHot");var o=new Float32Array(t.size*e);o.fill(r);for(var i=this.readSync(t.dataId),a=0;a<t.size;++a)i[a]>=0&&i[a]<e&&(o[a*e+i[a]]=n);return An(o,[t.size,e],"int32")},t.prototype.nonMaxSuppression=function(t,e,n,r,o){return this.assertNotComplex(t,"nonMaxSuppression"),Ao(this.readSync(t.dataId),this.readSync(e.dataId),n,r,o)},t.prototype.fft=function(t){return this.fftBatch(t,!1)},t.prototype.ifft=function(t){return this.fftBatch(t,!0)},t.prototype.fftBatch=function(t,e){for(var n=t.shape[0],r=t.shape[1],o=or(t.shape,"float32"),i=or(t.shape,"float32"),a=Cn(t).as2D(n,r),s=En(t).as2D(n,r),u=0;u<n;u++)for(var c=a.slice([u,0],[1,r]),l=s.slice([u,0],[1,r]),h=wn(c,l),f=this.readSync(this.fftImpl(h,e).dataId),d=0;d<r;d++){var p=Io(f,d);o.values[u*r+d]=p.real,i.values[u*r+d]=p.imag}return wn(o.toTensor(),i.toTensor()).as2D(n,r)},t.prototype.fftImpl=function(t,e){var n=t.as1D(),r=n.size;if(this.isExponentOf2(r)){var o=this.fftRadix2(n,r,e).as2D(t.shape[0],t.shape[1]);return e&&(o=wn(Cn(o).div(Sn(r)),En(o).div(Sn(r)))),o}var i=this.readSync(t.dataId),a=function(t){for(var e=new Float32Array(t.length/2),n=new Float32Array(t.length/2),r=0;r<t.length;r+=2)e[r/2]=t[r],n[r/2]=t[r+1];return{real:e,imag:n}}(this.fourierTransformByMatmul(i,r,e));return wn(a.real,a.imag).as2D(t.shape[0],t.shape[1])},t.prototype.isExponentOf2=function(t){return 0==(t&t-1)},t.prototype.fftRadix2=function(t,e,n){if(1===e)return t;var r=this.readSync(t.dataId),o=e/2,i=function(t){for(var e=Math.ceil(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=0;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),a=wn(i.real,i.imag).as1D(),s=function(t){for(var e=Math.floor(t.length/4),n=new Float32Array(e),r=new Float32Array(e),o=2;o<t.length;o+=4)n[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:n,imag:r}}(r),u=wn(s.real,s.imag).as1D();a=this.fftRadix2(a,o,n),u=this.fftRadix2(u,o,n);var c=function(t,e){for(var n=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var i=(e?2:-2)*Math.PI*(o/t);n[o]=Math.cos(i),r[o]=Math.sin(i)}return{real:n,imag:r}}(e,n),l=wn(c.real,c.imag).mul(u),h=a.add(l),f=a.sub(l),d=Cn(h).concat(Cn(f)),p=En(h).concat(En(f));return wn(d,p).as1D()},t.prototype.fourierTransformByMatmul=function(t,e,n){for(var r=new Float32Array(2*e),o=0;o<e;o++){for(var i=0,a=0,s=0;s<e;s++){var u=ko(o*s,e,n),c=Io(t,s);i+=c.real*u.real-c.imag*u.imag,a+=c.real*u.imag+c.imag*u.real}n&&(i/=e,a/=e),So(r,i,a,o)}return r},t.prototype.depthToSpace=function(t,e,n){x("NHWC"===n,(function(){return"Only NHWC dataFormat supported on CPU for depthToSpace. Got "+n})),x(e>1,(function(){return"blockSize should be > 1 for depthToSpace, but was: "+e}));for(var r=t.shape[0],o=t.shape[1],i=t.shape[2],a=t.shape[3],s=o*e,u=i*e,c=a/(e*e),l=this.readSync(t.dataId),h=new Float32Array(r*s*u*c),f=0,d=0;d<r;++d)for(var p=0;p<s;++p)for(var v=Math.floor(p/e),m=p%e,g=0;g<u;++g)for(var y=Math.floor(g/e),b=(m*e+g%e)*c,w=0;w<c;++w){var C=w+b+a*(y+i*(v+o*d));h[f++]=l[C]}return Tn(h,[r,s,u,c])},t.prototype.broadcastedBinaryOp=function(t,e,n,r){var o=ao(t.shape,e.shape),i=or(o,n),a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=oo(t.shape,o),c=oo(e.shape,o),l=i.values;if(u.length+c.length===0)for(var h=0;h<l.length;++h)l[h]=r(a[h%a.length],s[h%s.length]);else{var f=this.bufferSync(t),d=this.bufferSync(e),p=function(n){var o=i.indexToLoc(n),h=o.slice(-t.rank);u.forEach((function(t){return h[t]=0}));var p=f.locToIndex(h),v=o.slice(-e.rank);c.forEach((function(t){return v[t]=0}));var m=d.locToIndex(v);l[n]=r(a[p],s[m])};for(h=0;h<l.length;++h)p(h)}return i.toTensor()},t.prototype.broadcastedBinaryComplexOp=function(t,e,n){var r=ao(t.shape,e.shape),o=or(r,"float32"),i=or(r,"float32"),a=this.readSync(t.dataId),s=this.readSync(e.dataId),u=oo(t.shape,r),c=oo(e.shape,r),l=o.values,h=i.values;if(u.length+c.length===0)for(var f=0;f<l.length;f++){var d=f%a.length,p=f%s.length,v=n(a[2*d],a[2*d+1],s[2*p],s[2*p+1]);l[f]=v.real,h[f]=v.imag}else{var m=this.bufferSync(this.data.get(t.dataId).complexTensors.real),g=this.bufferSync(this.data.get(e.dataId).complexTensors.real),y=function(r){var i=o.indexToLoc(r),f=i.slice(-t.rank);u.forEach((function(t){return f[t]=0}));var d=m.locToIndex(f),p=i.slice(-e.rank);c.forEach((function(t){return p[t]=0}));var v=g.locToIndex(p),y=n(a[2*d],a[2*d+1],s[2*v],s[2*v+1]);l[r]=y.real,h[r]=y.imag};for(f=0;f<l.length;f++)y(f)}return this.complex(o.toTensor(),i.toTensor())},t.prototype.split=function(t,e,n){return To(t,e,n)},t.prototype.dispose=function(){},t.prototype.floatPrecision=function(){return 32},t.prototype.epsilon=function(){return 1e-7},t.prototype.cropAndResize=function(t,e,n,r,o,i){for(var a=t.shape,s=a[0],u=a[1],c=a[2],l=a[3],h=e.shape[0],f=r[0],d=r[1],p=or([h,f,d,l],t.dtype),v=this.readSync(e.dataId),m=this.readSync(n.dataId),g=this.readSync(t.dataId),y=t.strides,x=p.strides,b=0;b<h;b++){var w=4*b,C=v[w],E=v[w+1],R=v[w+2],I=v[w+3],S=m[b];if(!(S>=s))for(var k=f>1?(R-C)*(u-1)/(f-1):0,A=d>1?(I-E)*(c-1)/(d-1):0,N=0;N<f;N++){var T=f>1?C*(u-1)+N*k:.5*(C+R)*(u-1);if(T<0||T>u-1)for(var D=0;D<d;D++)for(var _=0;_<l;_++){var O=_+D*x[2]+N*x[1]+b*x[0];p.values[O]=i}else if("bilinear"===o){var M=Math.floor(T),F=Math.ceil(T),B=T-M;for(D=0;D<d;D++)if((q=d>1?E*(c-1)+D*A:.5*(E+I)*(c-1))<0||q>c-1)for(_=0;_<l;_++)O=_+D*x[2]+N*x[1]+b*x[0],p.values[O]=i;else{var P=Math.floor(q),L=Math.ceil(q),W=q-P;for(_=0;_<l;_++){var U=g[O=_+P*y[2]+M*y[1]+S*y[0]],V=g[O=_+L*y[2]+M*y[1]+S*y[0]],z=g[O=_+P*y[2]+F*y[1]+S*y[0]],G=U+(V-U)*W,H=z+(g[O=_+L*y[2]+F*y[1]+S*y[0]]-z)*W;O=_+D*x[2]+N*x[1]+b*x[0],p.values[O]=G+(H-G)*B}}}else for(D=0;D<d;++D){var q;if((q=d>1?E*(c-1)+D*A:.5*(E+I)*(c-1))<0||q>c-1)for(_=0;_<l;_++)O=_+D*x[2]+N*x[1]+b*x[0],p.values[O]=i;else{var $=Math.round(q),j=Math.round(T);for(_=0;_<l;_++){var K=_+$*y[2]+j*y[1]+S*y[0],X=_+D*x[2]+N*x[1]+b*x[0];p.values[X]=g[K]}}}}}return p.toTensor()},t.prototype.sparseToDense=function(t,e,n,r){var o=Ur(0,t,n),i=o.sliceRank,a=o.numUpdates,s=o.sliceSize,u=o.strides,c=o.outputSize;return this.scatter(t,e,n,c,s,a,i,u,r,!1)},t.prototype.gatherND=function(t,e){var n=e.shape,r=n[n.length-1],o=Pr(t,e),i=o[0],a=o[1],s=o[2],u=o[3];if(0===a)return Rn([],i,t.dtype);for(var c=new ht([a,s],t.dtype),l=this.readSync(e.dataId),h=this.readSync(t.dataId),f=0;f<a;f++){for(var d=[],p=0,v=0;v<r;v++){var m=l[f*r+v];p+=m*u[v],d.push(m)}if(p<0||p>=t.size/s)throw new Error("Invalid indices: "+d+" does not index into "+t.shape);for(var g=0;g<s;g++)c.values[f*s+g]=h[p*s+g]}return c.toTensor().reshape(i)},t.prototype.scatterND=function(t,e,n){var r=Ur(0,t,n),o=r.sliceRank,i=r.numUpdates,a=r.sliceSize,s=r.strides,u=r.outputSize,c=Sn(0);return this.scatter(t,e,n,u,a,i,o,s,c,!0)},t.prototype.fill=function(t,e,n){var r=M(n=n||H(e),E(t));return r.fill(e),vt.make(t,{values:r},n)},t.prototype.onesLike=function(t){if("string"===t.dtype)throw new Error("onesLike is not supported for string tensors");return this.fill(t.shape,1,t.dtype)},t.prototype.zerosLike=function(t){var e=M(t.dtype,E(t.shape));return vt.make(t.shape,{values:e},t.dtype)},t.prototype.linspace=function(t,e,n){return Co(t,e,n)},t.prototype.scatter=function(t,e,n,r,o,i,a,s,u,c){var l=[r/o,o],h=this.readSync(t.dataId),f=this.readSync(e.dataId);if(0===r)return Rn([],n,e.dtype);var d=new ht(l,e.dtype);d.values.fill(this.readSync(u.dataId)[0]);for(var p=0;p<i;p++){for(var v=[],m=0,g=0;g<a;g++){var y=h[p*a+g];v.push(y),m+=y*s[g]}if(m<0||m>=r/o)throw new Error("Invalid indices: "+v+" does not index into "+n);for(var x=0;x<o;x++)c?d.values[m*o+x]+=f[p*o+x]:d.values[m*o+x]=0===e.rank?f[0]:f[p*o+x]}return d.toTensor().reshape(n)},t}();Ot.registerBackend("cpu",(function(){return new jl}),1);var Kl=function(){function t(){this.textEncoder=new TextEncoder}return t.prototype.fetch=function(t,e){return fetch(t,e)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Browser's encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return new TextDecoder(e).decode(t)},t}();f.get("IS_BROWSER")&&f.setPlatform("browser",new Kl);var Xl,Yl=function(){function t(){this.util=n(11),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,e){return null!=f.global.fetch?f.global.fetch(t,e):(null==Xl&&(Xl=n(10)),Xl(t,e))},t.prototype.now=function(){var t=r.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,e){if("utf-8"!==e&&"utf8"!==e)throw new Error("Node built-in encoder only supports utf-8, but got "+e);return this.textEncoder.encode(t)},t.prototype.decode=function(t,e){return 0===t.length?"":new this.util.TextDecoder(e).decode(t)},t}();f.get("IS_NODE")&&f.setPlatform("node",new Yl);var Ql={float32:4,int32:4,uint16:2,uint8:1,bool:1},Jl=4;function Zl(t,e){for(var n={},r=0,o=function(e){var o=e.name,i=e.dtype,a=e.shape,s=E(a),u=void 0;if("quantization"in e){var c=e.quantization;if("uint8"!==c.dtype&&"uint16"!==c.dtype)throw new Error("Weight "+e.name+" has unknown quantization dtype "+c.dtype+". Supported quantization dtypes are: 'uint8' and 'uint16'.");var l=Ql[c.dtype],h=t.slice(r,r+s*l),f="uint8"===c.dtype?new Uint8Array(h):new Uint16Array(h);if("float32"===i)u=Float32Array.from(f,(function(t){return t*c.scale+c.min}));else{if("int32"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);u=Int32Array.from(f,(function(t){return Math.round(t*c.scale+c.min)}))}r+=s*l}else if("string"===i){var d=E(e.shape);u=[];for(var p=0;p<d;p++){var v=new Uint32Array(t.slice(r,r+Jl))[0];r+=Jl;var m=new Uint8Array(t.slice(r,r+v));u.push(m),r+=v}}else{var g=Ql[i];if(h=t.slice(r,r+s*g),"float32"===i)u=new Float32Array(h);else if("int32"===i)u=new Int32Array(h);else{if("bool"!==i)throw new Error("Unsupported dtype in weight '"+o+"': "+i);u=new Uint8Array(h)}r+=s*g}n[o]=Rn(u,a,i)},i=0,a=e;i<a.length;i++)o(a[i]);return n}function th(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var e=0,n=[];t.forEach((function(t){if(e+=t.byteLength,n.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));var r=new Uint8Array(e),o=0;return n.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}var eh=void 0!==o&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function nh(t){return eh?o.byteLength(t):new Blob([t]).size}function rh(t){var e=0;t.forEach((function(t){e+=t.byteLength}));var n=new Uint8Array(e),r=0;return t.forEach((function(t){n.set(new Uint8Array(t),r),r+=t.byteLength})),n.buffer}function oh(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var e=t.split("/");return e[e.length-1]}function ih(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:nh(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:nh(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}var ah=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(e){t.getInstance().saveRouters.push(e)},t.registerLoadRouter=function(e){t.getInstance().loadRouters.push(e)},t.getSaveHandlers=function(e){return t.getHandlers(e,"save")},t.getLoadHandlers=function(e,n){return t.getHandlers(e,"load",n)},t.getHandlers=function(e,n,r){var o=[];return("load"===n?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var n=t(e,r);null!==n&&o.push(n)})),o},t}(),sh="://",uh=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(e,n){x(null!=e,(function(){return"scheme must not be undefined or null."})),e.endsWith(sh)&&(e=e.slice(0,e.indexOf(sh))),x(e.length>0,(function(){return"scheme must not be an empty string."}));var r=t.getInstance();x(null==r.managers[e],(function(){return"A model store manager is already registered for scheme '"+e+"'."})),r.managers[e]=n},t.getManager=function(t){var e=this.getInstance().managers[t];if(null==e)throw new Error("Cannot find model manager for scheme '"+t+"'");return e},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function ch(t){if(-1===t.indexOf(sh))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+uh.getSchemes().join(","));return{scheme:t.split(sh)[0],path:t.split(sh)[1]}}function lh(t,e,n){return void 0===n&&(n=!1),u(this,void 0,void 0,(function(){var r,o,i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:return x(t!==e,(function(){return"Old path and new path are the same: '"+t+"'"})),x((r=ah.getLoadHandlers(t)).length>0,(function(){return"Copying failed because no load handler is found for source URL "+t+"."})),x(r.length<2,(function(){return"Copying failed because more than one ("+r.length+") load handlers for source URL "+t+"."})),o=r[0],x((i=ah.getSaveHandlers(e)).length>0,(function(){return"Copying failed because no save handler is found for destination URL "+e+"."})),x(i.length<2,(function(){return"Copying failed because more than one ("+r.length+") save handlers for destination URL "+e+"."})),a=i[0],s=ch(t).scheme,u=ch(t).path,l=s===ch(t).scheme,[4,o.load()];case 1:return h=c.sent(),n&&l?[4,uh.getManager(s).removeModel(u)]:[3,3];case 2:c.sent(),c.label=3;case 3:return[4,a.save(h)];case 4:return f=c.sent(),!n||l?[3,6]:[4,uh.getManager(s).removeModel(u)];case 5:c.sent(),c.label=6;case 6:return[2,f.modelArtifactsInfo]}}))}))}var hh="models_store",fh="model_info_store";function dh(){if(!f.getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t=window,e=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==e)throw new Error("The current browser does not appear to support IndexedDB.");return e}function ph(t){var e=t.result;e.createObjectStore(hh,{keyPath:"modelPath"}),e.createObjectStore(fh,{keyPath:"modelPath"})}var vh=function(){function t(t){if(this.indexedDB=dh(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,e){var n=this;return new Promise((function(t,r){var o=n.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return ph(o)},o.onsuccess=function(){var i=o.result;if(null==e){var a=i.transaction(hh,"readonly"),s=a.objectStore(hh).get(n.modelPath);s.onsuccess=function(){if(null==s.result)return i.close(),r(new Error("Cannot find model with path '"+n.modelPath+"' in IndexedDB."));t(s.result.modelArtifacts)},s.onerror=function(t){return i.close(),r(s.error)},a.oncomplete=function(){return i.close()}}else{var u,c=ih(e),l=i.transaction(fh,"readwrite"),h=l.objectStore(fh),f=h.put({modelPath:n.modelPath,modelArtifactsInfo:c});f.onsuccess=function(){var o=(u=i.transaction(hh,"readwrite")).objectStore(hh).put({modelPath:n.modelPath,modelArtifacts:e,modelArtifactsInfo:c});o.onsuccess=function(){return t({modelArtifactsInfo:c})},o.onerror=function(t){var e=(h=l.objectStore(fh)).delete(n.modelPath);e.onsuccess=function(){return i.close(),r(o.error)},e.onerror=function(t){return i.close(),r(o.error)}}},f.onerror=function(t){return i.close(),r(f.error)},l.oncomplete=function(){null==u?i.close():u.oncomplete=function(){return i.close()}}}},o.onerror=function(t){return r(o.error)}}))},t.URL_SCHEME="indexeddb://",t}(),mh=function(t){return f.getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(vh.URL_SCHEME)?(e=t.slice(vh.URL_SCHEME.length),new vh(e)):null;var e};ah.registerSaveRouter(mh),ah.registerLoadRouter(mh);var gh=function(){function t(){this.indexedDB=dh()}return t.prototype.listModels=function(){return u(this,void 0,void 0,(function(){var t=this;return c(this,(function(e){return[2,new Promise((function(e,n){var r=t.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return ph(r)},r.onsuccess=function(){var t=r.result,o=t.transaction(fh,"readonly"),i=o.objectStore(fh).getAll();i.onsuccess=function(){for(var t={},n=0,r=i.result;n<r.length;n++){var o=r[n];t[o.modelPath]=o.modelArtifactsInfo}e(t)},i.onerror=function(e){return t.close(),n(i.error)},o.oncomplete=function(){return t.close()}},r.onerror=function(t){return n(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return u(this,void 0,void 0,(function(){var e=this;return c(this,(function(n){var r;return t=(r=t).startsWith(vh.URL_SCHEME)?r.slice(vh.URL_SCHEME.length):r,[2,new Promise((function(n,r){var o=e.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return ph(o)},o.onsuccess=function(){var e,i=o.result,a=i.transaction(fh,"readwrite"),s=a.objectStore(fh),u=s.get(t);u.onsuccess=function(){if(null==u.result)return i.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var o=s.delete(t),a=function(){var o=(e=i.transaction(hh,"readwrite")).objectStore(hh).delete(t);o.onsuccess=function(){return n(u.result.modelArtifactsInfo)},o.onerror=function(t){return r(u.error)}};o.onsuccess=a,o.onerror=function(t){return a(),i.close(),r(u.error)}},u.onerror=function(t){return i.close(),r(u.error)},a.oncomplete=function(){null==e?i.close():e.oncomplete=function(){return i.close()}}},o.onerror=function(t){return r(o.error)}}))]}))}))},t}();if(f.getBool("IS_BROWSER"))try{uh.registerManager(vh.URL_SCHEME,new gh)}catch(a){}var yh="/",xh="tensorflowjs_models",bh="info",wh="model_topology",Ch="weight_specs",Eh="weight_data",Rh="model_metadata";function Ih(t){return{info:[xh,t,bh].join(yh),topology:[xh,t,wh].join(yh),weightSpecs:[xh,t,Ch].join(yh),weightData:[xh,t,Eh].join(yh),modelMetadata:[xh,t,Rh].join(yh)}}function Sh(t){var e=t.split(yh);if(e.length<3)throw new Error("Invalid key format: "+t);return e.slice(1,e.length-1).join(yh)}var kh=function(){function t(t){if(!f.getBool("IS_BROWSER")||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=Ih(this.modelPath)}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r;return c(this,(function(i){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");e=JSON.stringify(t.modelTopology),n=JSON.stringify(t.weightSpecs),r=ih(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,e),this.LS.setItem(this.keys.weightSpecs,n),this.LS.setItem(this.keys.weightData,(a=t.weightData,eh?o.from(a).toString("base64"):btoa(String.fromCharCode.apply(null,new Uint8Array(a))))),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy})),[2,{modelArtifactsInfo:r}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}var a;return[2]}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,i,a,s;return c(this,(function(u){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(e={},null==(n=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(e.modelTopology=n,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(e.weightSpecs=r,null!=(i=this.LS.getItem(this.keys.modelMetadata))&&(a=JSON.parse(i),e.format=a.format,e.generatedBy=a.generatedBy,e.convertedBy=a.convertedBy),null==(s=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return e.weightData=function(t){if(eh){var e=o.from(t,"base64");return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}for(var n=atob(t),r=new Uint8Array(n.length),i=0;i<n.length;++i)r.set([n.charCodeAt(i)],i);return r.buffer}(s),[2,e]}))}))},t.URL_SCHEME="localstorage://",t}(),Ah=function(t){return f.getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(kh.URL_SCHEME)?(e=t.slice(kh.URL_SCHEME.length),new kh(e)):null;var e};ah.registerSaveRouter(Ah),ah.registerLoadRouter(Ah);var Nh=function(){function t(){x(f.getBool("IS_BROWSER"),(function(){return"Current environment is not a web browser"})),x(void 0!==window.localStorage,(function(){return"Current browser does not appear to support localStorage"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i;return c(this,(function(a){for(t={},e=xh+yh,n=yh+bh,r=0;r<this.LS.length;++r)(o=this.LS.key(r)).startsWith(e)&&o.endsWith(n)&&(i=Sh(o),t[i]=JSON.parse(this.LS.getItem(o)));return[2,t]}))}))},t.prototype.removeModel=function(t){return u(this,void 0,void 0,(function(){var e,n;return c(this,(function(r){var o;if(t=(o=t).startsWith(kh.URL_SCHEME)?o.slice(kh.URL_SCHEME.length):o,e=Ih(t),null==this.LS.getItem(e.info))throw new Error("Cannot find model at path '"+t+"'");return n=JSON.parse(this.LS.getItem(e.info)),this.LS.removeItem(e.info),this.LS.removeItem(e.topology),this.LS.removeItem(e.weightSpecs),this.LS.removeItem(e.weightData),[2,n]}))}))},t}();if(f.getBool("IS_BROWSER"))try{uh.registerManager(kh.URL_SCHEME,new Nh)}catch(a){}var Th="model",Dh=".json",_h=".weights.bin";function Oh(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var Mh=function(){function t(e){if(!f.getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith(t.URL_SCHEME)&&(e=e.slice(t.URL_SCHEME.length)),null!=e&&0!==e.length||(e=Th),this.modelTopologyFileName=e+Dh,this.weightDataFileName=e+_h}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a;return c(this,(function(s){switch(s.label){case 0:if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");if(e=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 1:return n=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},o=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=o,[4,Oh((function(){return i.dispatchEvent(new MouseEvent("click"))}))];case 2:return s.sent(),null==t.weightData?[3,4]:((a=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,a.href=e,[4,Oh((function(){return a.dispatchEvent(new MouseEvent("click"))}))]);case 3:s.sent(),s.label=4;case 4:return[2,{modelArtifactsInfo:ih(t)}]}}))}))},t.URL_SCHEME="downloads://",t}(),Fh=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}return t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n=this;return c(this,(function(r){return t=this.files[0],e=this.files.slice(1),[2,new Promise((function(r,o){var i=new FileReader;i.onload=function(i){var a=JSON.parse(i.target.result),s=a.modelTopology;if(null!=s){0===e.length&&r({modelTopology:s});var u=a.weightsManifest;if(null!=u){var c;try{c=n.checkManifestAndWeightFiles(u,e)}catch(t){return void o(t)}var l=[],h=[],f=[];u.forEach((function(t){t.paths.forEach((function(t){h.push(t),f.push(null)})),l.push.apply(l,t.weights)})),u.forEach((function(t){t.paths.forEach((function(t){var e=new FileReader;e.onload=function(e){var n=e.target.result,o=h.indexOf(t);f[o]=n,-1===f.indexOf(null)&&r({modelTopology:s,weightSpecs:l,weightData:rh(f)})},e.onerror=function(e){return o("Failed to weights data from file of path '"+t+"'.")},e.readAsArrayBuffer(c[t])}))}))}else o(new Error("weightManifest field is missing from file "+t.name))}else o(new Error("modelTopology field is missing from file "+t.name))},i.onerror=function(e){return o("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},i.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,e){for(var n=[],r=e.map((function(t){return oh(t.name)})),o={},i=0,a=t;i<a.length;i++)a[i].paths.forEach((function(t){var i=oh(t);if(-1!==n.indexOf(i))throw new Error("Duplicate file basename found in weights manifest: '"+i+"'");if(n.push(i),-1===r.indexOf(i))throw new Error("Weight file with basename '"+i+"' is not provided.");o[t]=e[r.indexOf(i)]}));if(n.length!==e.length)throw new Error("Mismatch in the number of files in weights manifest ("+n.length+") and the number of weight files provided ("+e.length+").");return o},t}();function Bh(t,e,n,r){!function(t){x(null!=t&&Array.isArray(t)&&t.length>0,(function(){return"promises must be a none empty array"}))}(t),function(t,e){x(t>=0&&t<=1,(function(){return"Progress fraction must be in range [0, 1], but got startFraction "+t})),x(e>=0&&e<=1,(function(){return"Progress fraction must be in range [0, 1], but got endFraction "+e})),x(e>=t,(function(){return"startFraction must be no more than endFraction, but got startFraction "+t+" and endFraction "+e}))}(n=null==n?0:n,r=null==r?1:r);var o=0;return Promise.all(t.map((function(i){return i.then((function(i){var a=n+ ++o/t.length*(r-n);return e(a),i})),i})))}function Ph(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,l,h;return c(this,(function(c){switch(c.label){case 0:return null==e&&(e={}),n=null==e.fetchFunc?f.platform.fetch:e.fetchFunc,r=t.map((function(t){return n(t,e.requestInit,{isBinary:!0})})),o=0,i=.5,null!=e.onProgress?[3,2]:[4,Promise.all(r)];case 1:return a=c.sent(),[3,4];case 2:return[4,Bh(r,e.onProgress,o,i)];case 3:a=c.sent(),c.label=4;case 4:return s=a.map((function(t){return t.arrayBuffer()})),u=.5,l=1,null!=e.onProgress?[3,6]:[4,Promise.all(s)];case 5:return h=c.sent(),[3,8];case 6:return[4,Bh(s,e.onProgress,u,l)];case 7:h=c.sent(),c.label=8;case 8:return[2,h]}}))}))}function Lh(t){var e=this;return function(n,r,o){return void 0===r&&(r=""),u(e,void 0,void 0,(function(){var e,i,a,s,u,l,h,f,d,p;return c(this,(function(c){switch(c.label){case 0:if(e=n.map((function(){return!1})),i={},a=null!=o?o.map((function(){return!1})):[],s=[],n.forEach((function(t,n){var r=0;t.weights.forEach((function(t){var u="quantization"in t?t.quantization.dtype:t.dtype,c=Ql[u]*E(t.shape),l=function(){e[n]=!0,null==i[n]&&(i[n]=[]),i[n].push({manifestEntry:t,groupOffset:r,sizeBytes:c})};null!=o?o.forEach((function(e,n){e===t.name&&(l(),a[n]=!0)})):l(),s.push(t.name),r+=c}))})),!a.every((function(t){return t})))throw u=o.filter((function(t,e){return!a[e]})),new Error("Could not find weights in manifest with names: "+u.join(", ")+". \nManifest JSON has weights with names: "+s.join(", ")+".");return l=e.reduce((function(t,e,n){return e&&t.push(n),t}),[]),h=[],l.forEach((function(t){n[t].paths.forEach((function(t){var e=r+(r.endsWith("/")?"":"/")+t;h.push(e)}))})),[4,t(h)];case 1:return f=c.sent(),d={},p=0,l.forEach((function(t){for(var e=n[t].paths.length,r=0,o=0;o<e;o++)r+=f[p+o].byteLength;for(var a=new ArrayBuffer(r),s=new Uint8Array(a),u=0,c=0;c<e;c++){var l=new Uint8Array(f[p+c]);s.set(l,u),u+=l.byteLength}i[t].forEach((function(t){var e=Zl(a.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var n in e)d[n]=e[n]})),p+=e})),[2,d]}}))}))}}ah.registerSaveRouter((function(t){return f.getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Mh.URL_SCHEME)?(void 0===(e=t.slice(Mh.URL_SCHEME.length))&&(e="model"),new Mh(e)):null;var e}));var Wh=function(){function t(t,e){if(this.DEFAULT_METHOD="POST",null==e&&(e={}),this.weightPathPrefix=e.weightPathPrefix,this.onProgress=e.onProgress,null!=e.fetchFunc?(x("function"==typeof e.fetchFunc,(function(){return"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=e.fetchFunc):this.fetch=f.platform.fetch,x(null!=t&&t.length>0,(function(){return"URL path for http must not be null, undefined or empty."})),Array.isArray(t)&&x(2===t.length,(function(){return"URL paths for http must have a length of 2, (actual length is "+t.length+")."})),this.path=t,null!=e.requestInit&&null!=e.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=e.requestInit||{}}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o;return c(this,(function(i){switch(i.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(e=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,n=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:n},e.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&e.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.fetch(this.path,e)];case 1:if((o=i.sent()).ok)return[2,{modelArtifactsInfo:ih(t),responses:[o]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+o.status+".")}}))}))},t.prototype.load=function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i,a,s;return c(this,(function(u){switch(u.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=u.sent()).ok)throw new Error("Request to "+this.path+" failed with status code "+t.status+". Please verify this URL points to the model JSON of the model to load.");u.label=2;case 2:return u.trys.push([2,4,,5]),[4,t.json()];case 3:return e=u.sent(),[3,5];case 4:throw u.sent(),n="Failed to parse model JSON of response from "+this.path+".",this.path.endsWith(".pb")?n+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":n+=" Please make sure the server is serving valid JSON for this request.",new Error(n);case 5:if(r=e.modelTopology,o=e.weightsManifest,null==r&&null==o)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==o?[3,7]:[4,this.loadWeights(o)];case 6:s=u.sent(),i=s[0],a=s[1],u.label=7;case 7:return[2,{modelTopology:r,weightSpecs:i,weightData:a}]}}))}))},t.prototype.loadWeights=function(t){return u(this,void 0,void 0,(function(){var e,n,r,o,i,a,s,u,l,h,f;return c(this,(function(c){switch(c.label){case 0:for(e=Array.isArray(this.path)?this.path[1]:this.path,n=function(t){var e=t.lastIndexOf("/"),n=t.lastIndexOf("?");return[t.substring(0,e)+"/",n>e?t.substring(n):""]}(e),r=n[0],o=n[1],i=this.weightPathPrefix||r,a=[],s=0,u=t;s<u.length;s++)l=u[s],a.push.apply(a,l.weights);return h=[],t.forEach((function(t){t.paths.forEach((function(t){h.push(i+t+o)}))})),[4,Ph(h,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 1:return f=c.sent(),[2,[a,rh(f)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\/\//,t}();function Uh(t){return null!=t.match(Wh.URL_SCHEME_REGEX)}var Vh=function(t,e){return"undefined"==typeof fetch?null:(Array.isArray(t)?t.every((function(t){return Uh(t)})):Uh(t))?zh(t,{onProgress:e}):null};function zh(t,e){return new Wh(t,e)}ah.registerSaveRouter(Vh),ah.registerLoadRouter(Vh);var Gh=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),Hh=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.saveHandler(t)]}))}))},t}(),qh=Object.freeze({browserFiles:function(t){return new Fh(t)},browserHTTPRequest:function(t,e){return zh(t,e)},concatenateArrayBuffers:rh,decodeWeights:Zl,encodeWeights:function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s=this;return c(this,(function(l){switch(l.label){case 0:for(n=[],r=[],o=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),i=function(i){var a=o[i],l=Array.isArray(t)?t[i].tensor:t[a];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype)throw new Error("Unsupported dtype in weight '"+a+"': "+l.dtype);var h={name:a,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){var f=new Promise((function(t){return u(s,void 0,void 0,(function(){var e,n,r,o,i,a,s;return c(this,(function(u){switch(u.label){case 0:return[4,l.bytes()];case 1:for(e=u.sent(),n=e.reduce((function(t,e){return t+e.length}),0)+Jl*e.length,r=new Uint8Array(n),o=0,i=0;i<e.length;i++)a=e[i],s=new Uint8Array(new Uint32Array([a.length]).buffer),r.set(s,o),o+=Jl,r.set(a,o),o+=a.length;return t(r),[2]}}))}))}));r.push(f)}else r.push(l.data());null!=e&&(h.group=e),n.push(h)},a=0;a<o.length;++a)i(a);return[4,Promise.all(r)];case 1:return[2,{data:th(l.sent()),specs:n}]}}))}))},fromMemory:function(t,e,n,r){return 1===arguments.length?null!=t.modelTopology||null!=t.weightSpecs?new Gh(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Gh({modelTopology:t})):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Gh({modelTopology:t,weightSpecs:e,weightData:n,trainingConfig:r}))},getLoadHandlers:function(t,e){return ah.getLoadHandlers(t,e)},getModelArtifactsInfoForJSON:ih,getSaveHandlers:function(t){return ah.getSaveHandlers(t)},http:zh,isHTTPScheme:Uh,loadWeights:function(t,e,n,r){return void 0===e&&(e=""),u(this,void 0,void 0,(function(){return c(this,(function(o){return[2,Lh((function(t){return Ph(t,{requestInit:r})}))(t,e,n)]}))}))},registerLoadRouter:function(t){return ah.registerLoadRouter(t)},registerSaveRouter:function(t){return ah.registerSaveRouter(t)},weightsLoaderFactory:Lh,withSaveHandler:function(t){return new Hh(t)},copyModel:function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return[2,lh(t,e,!1)]}))}))},listModels:function(){return u(this,void 0,void 0,(function(){var t,e,n,r,o,i,a;return c(this,(function(s){switch(s.label){case 0:t=uh.getSchemes(),e={},n=0,r=t,s.label=1;case 1:return n<r.length?(o=r[n],[4,uh.getManager(o).listModels()]):[3,4];case 2:for(a in i=s.sent())e[o+sh+a]=i[a];s.label=3;case 3:return n++,[3,1];case 4:return[2,e]}}))}))},moveModel:function(t,e){return u(this,void 0,void 0,(function(){return c(this,(function(n){return[2,lh(t,e,!0)]}))}))},removeModel:function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){return e=ch(t),[2,uh.getManager(e.scheme).removeModel(e.path)]}))}))}}),$h=bn({confusionMatrix_:function(t,e,n){var r=un(t,"labels","confusionMatrix"),o=un(e,"predictions","confusionMatrix");x(null==n||n>0&&Number.isInteger(n),(function(){return"If provided, numClasses must be a positive integer, but got "+n})),x(1===r.rank,(function(){return"Expected the rank of labels to be 1, but got "+r.rank})),x(1===o.rank,(function(){return"Expected the rank of predictions to be 1, but got "+o.rank})),x(r.shape[0]===o.shape[0],(function(){return"Mismatch in the number of examples: "+r.shape[0]+" vs. "+o.shape[0]+". Labels and predictions should have the same number of elements."})),x(n>0&&Number.isInteger(n),(function(){return"numClasses is required to be a positive integer, but got "+n}));var i=pr(r.asType("int32"),n),a=pr(o.asType("int32"),n);return i.transpose().matMul(a).asType("int32")}}),jh=Object.freeze({confusionMatrix:$h}),Kh=bn({fromPixels_:function(t,e){if(void 0===e&&(e=3),e>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");var n="undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement;if(n&&n&&t.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.");return Ot.fromPixels(t,e)}}),Xh=Object.freeze({toPixels:function(t,e){return u(this,void 0,void 0,(function(){var n,r,o,i,a,s,u,l,h,f,d,p,v,m,g,y,x,b,w,C,E,R,I;return c(this,(function(c){switch(c.label){case 0:if(n=un(t,"img","toPixels"),t instanceof vt||(n=n.toInt()),2!==n.rank&&3!==n.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+n.rank+".");if(r=n.shape.slice(0,2),o=r[0],i=r[1],(a=2===n.rank?1:n.shape[2])>4||2===a)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+a);return[4,n.data()];case 1:return s=c.sent(),u=n.min(),l=n.max(),[4,Promise.all([u.data(),l.data()])];case 2:if(h=c.sent(),f=h[0],d=h[1],p=f[0],v=d[0],u.dispose(),l.dispose(),"float32"===n.dtype){if(p<0||v>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but got range ["+p+" - "+v+"].")}else{if("int32"!==n.dtype)throw new Error("Unsupported type for toPixels: "+n.dtype+". Please use float32 or int32 tensors.");if(p<0||v>255)throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but got range ["+p+" - "+v+"].")}for(m="float32"===n.dtype?255:1,g=new Uint8ClampedArray(i*o*4),y=0;y<o*i;++y)x=void 0,b=void 0,w=void 0,C=void 0,1===a?(x=s[y]*m,b=s[y]*m,w=s[y]*m,C=255):3===a?(x=s[3*y]*m,b=s[3*y+1]*m,w=s[3*y+2]*m,C=255):4===a&&(x=s[4*y]*m,b=s[4*y+1]*m,w=s[4*y+2]*m,C=s[4*y+3]*m),g[0+(E=4*y)]=Math.round(x),g[E+1]=Math.round(b),g[E+2]=Math.round(w),g[E+3]=Math.round(C);return null!=e&&(e.width=i,e.height=o,R=e.getContext("2d"),I=new ImageData(g,i,o),R.putImageData(I,0,0)),n!==t&&n.dispose(),[2,g]}}))}))},fromPixels:Kh}),Yh=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,e){return new t(e)},t}(),Qh=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(e){t.getMap().classNameMap[e.className]=[e,e.fromConfig]},t}();function Jh(t){x(null!=t.className,(function(){return"Class being registered does not have the static className property defined."})),x("string"==typeof t.className,(function(){return"className is required to be a string, but got type "+typeof t.className})),x(t.className.length>0,(function(){return"Class being registered has an empty-string as its className, which is disallowed."})),Qh.register(t)}var Zh=Object.freeze({Serializable:Yh,SerializationMap:Qh,registerClass:Jh}),tf=.001,ef=.1;function nf(){return 32===Ot.backend.floatPrecision()?tf:ef}function rf(t,e,n){var r=!0;if((L(t)||L(e))&&(r=!1),L(t)&&L(e)&&(r=!0),r){var o=t.constructor.name,i=e.constructor.name;if(o!==i)throw new Error("Arrays are of different type. Actual: "+o+". Expected: "+i)}if(Array.isArray(t)&&Array.isArray(e)){var a=an(t),s=an(e);if(!R(a,s))throw new Error("Arrays have different shapes. Actual: ["+a+"]. Expected: ["+s+"]")}var u=L(t)?t:C(t),c=L(e)?e:C(e);if(u.length!==c.length)throw new Error("Arrays have different lengths actual: "+u.length+" vs expected: "+c.length+".\nActual:   "+u+".\nExpected: "+c+".");for(var l=0;l<c.length;++l){var h=u[l],f=c[l];if(!n(h,f))throw new Error("Arrays differ: actual["+l+"] = "+h+", expected["+l+"] = "+f+".\nActual:   "+u+".\nExpected: "+c+".")}}function of(t,e,n){return!isFinite(t)&&!isFinite(e)||!(isNaN(t)||isNaN(e)||Math.abs(t-e)>n)}var af=Object.freeze({TEST_EPSILON_FLOAT16:ef,expectArraysClose:function(t,e,n){return null==n&&(n=nf()),rf(t,e,(function(t,e){return of(t,e,n)}))},testEpsilon:nf,expectPromiseToFail:function(t,e){t().then((function(){return e.fail()}),(function(){return e()}))},expectArraysEqual:function(t,e){var n="string"==typeof e||"number"==typeof e||"boolean"==typeof e?[e]:e;return V(t)||V(t[0])||V(e)||V(e[0])?rf(t,n,(function(t,e){return t==e})):rf(t,e,(function(t,e){return of(t,e,0)}))},expectNumbersClose:function(t,e,n){if(null==n&&(n=nf()),!of(t,e,n))throw new Error("Numbers differ: actual === "+t+", expected === "+e)},expectValuesInRange:function(t,e,n){for(var r=0;r<t.length;r++)if(t[r]<e||t[r]>n)throw new Error("Value out of range:"+t[r]+" low: "+e+", high: "+n)},expectArrayBuffersEqual:function(t,e){expect(new Float32Array(t)).toEqual(new Float32Array(e))}}),sf="1.2.9",uf=Object.freeze({gpgpu_util:sa,webgl_util:Pe,forceHalfFloat:function(){f.set("WEBGL_FORCE_F16_TEXTURES",!0)},MathBackendWebGL:ps,setWebGLContext:Wt,GPGPUContext:ua}),cf=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return s(e,t),e.prototype.minimize=function(t,e,n){void 0===e&&(e=!1);var r=this.computeGradients(t,n),o=r.value,i=r.grads;if(null!=n){var a=n.map((function(t){return{name:t.name,tensor:i[t.name]}}));this.applyGradients(a)}else this.applyGradients(i);return $e(i),e?o:(o.dispose(),null)},Object.defineProperty(e.prototype,"iterations",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),e.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},e.prototype.computeGradients=function(t,e){return Qr(t,e)},e.prototype.dispose=function(){null!=this.iterations_&&$e(this.iterations_)},e.prototype.saveIterations=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:"iter",tensor:Sn(this.iterations_,"int32")}]}))}))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}))}))},e.prototype.extractIterations=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return e=this,[4,t[0].tensor.data()];case 1:return e.iterations_=n.sent()[0],[2,t.slice(1)]}}))}))},e}(Yh);Object.defineProperty(cf,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var lf=function(t){function e(e,n,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=e,o.rho=n,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Ot.backend.epsilon()),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Ot.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accum_grad",variable:qe((function(){return Wn(o).variable(!1)}))}),null==e.accumulatedUpdates[r]&&(e.accumulatedUpdates[r]={originalName:n+"/accum_var",variable:qe((function(){return Wn(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedGrads[r].variable,s=e.accumulatedUpdates[r].variable;qe((function(){var t=a.mul(e.rho).add(i.square().mul(1-e.rho)),n=s.add(e.epsilon).sqrt().div(a.add(e.epsilon).sqrt()).mul(i),r=s.mul(e.rho).add(n.square().mul(1-e.rho));a.assign(t),s.assign(r);var u=n.mul(-e.learningRate).add(o);o.assign(u)}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedUpdates&&($e(this.accumulatedGrads.map((function(t){return t.variable}))),$e(this.accumulatedUpdates.map((function(t){return t.variable}))))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=t.length/2,this.accumulatedGrads=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.rho,e.epsilon)},e.className="Adadelta",e}(cf);Jh(lf);var hf=function(t){function e(e,n){void 0===n&&(n=.1);var r=t.call(this)||this;return r.learningRate=e,r.initialAccumulatorValue=n,r.accumulatedGrads=[],r}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Ot.registeredVariables[n];null==e.accumulatedGrads[r]&&(e.accumulatedGrads[r]={originalName:n+"/accumulator",variable:qe((function(){return Fn(o.shape,e.initialAccumulatorValue).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedGrads[r].variable;qe((function(){var t=a.add(i.square());a.assign(t);var n=i.div(t.add(Ot.backend.epsilon()).sqrt()).mul(-e.learningRate).add(o);o.assign(n)}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedGrads&&$e(this.accumulatedGrads.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},e.fromConfig=function(t,e){return new t(e.learningRate,e.initialAccumulatorValue)},e.className="Adagrad",e}(cf);Jh(hf);var ff=function(t){function e(e,n,r,o){void 0===o&&(o=null);var i=t.call(this)||this;return i.learningRate=e,i.beta1=n,i.beta2=r,i.epsilon=o,i.accumulatedFirstMoment=[],i.accumulatedSecondMoment=[],qe((function(){i.accBeta1=Sn(n).variable(),i.accBeta2=Sn(r).variable()})),null==o&&(i.epsilon=Ot.backend.epsilon()),i}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);qe((function(){var r=Fu(1,e.accBeta1),o=Fu(1,e.accBeta2);n.forEach((function(n,i){var a=Ot.registeredVariables[n];null==e.accumulatedFirstMoment[i]&&(e.accumulatedFirstMoment[i]={originalName:n+"/m",variable:qe((function(){return Wn(a).variable(!1)}))}),null==e.accumulatedSecondMoment[i]&&(e.accumulatedSecondMoment[i]={originalName:n+"/v",variable:qe((function(){return Wn(a).variable(!1)}))});var s=Array.isArray(t)?t[i].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[i].variable,c=e.accumulatedSecondMoment[i].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2).add(s.square().mul(1-e.beta2)),f=l.div(r),d=h.div(o);u.assign(l),c.assign(h);var p=f.div(d.sqrt().add(e.epsilon)).mul(-e.learningRate).add(a);a.assign(p)}})),e.accBeta1.assign(e.accBeta1.mul(e.beta1)),e.accBeta2.assign(e.accBeta2.mul(e.beta2))})),this.incrementIterations()},e.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&$e(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&$e(this.accumulatedSecondMoment.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e,n=this;return c(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),qe((function(){n.accBeta1.assign(Du(n.beta1,n.iterations_+1)),n.accBeta2.assign(Du(n.beta2,n.iterations_+1))})),e=t.length/2,this.accumulatedFirstMoment=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon)},e.className="Adam",e}(cf);Jh(ff);var df=function(t){function e(e,n,r,o,i){void 0===o&&(o=null),void 0===i&&(i=0);var a=t.call(this)||this;return a.learningRate=e,a.beta1=n,a.beta2=r,a.epsilon=o,a.decay=i,a.accumulatedFirstMoment=[],a.accumulatedWeightedInfNorm=[],qe((function(){a.iteration=Sn(0).variable(),a.accBeta1=Sn(n).variable()})),null==o&&(a.epsilon=Ot.backend.epsilon()),a}return s(e,t),e.prototype.applyGradients=function(t){var e=this,n=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);qe((function(){var r=Fu(1,e.accBeta1),o=bu(-e.learningRate,e.iteration.mul(e.decay).add(1));n.forEach((function(n,i){var a=Ot.registeredVariables[n];null==e.accumulatedFirstMoment[i]&&(e.accumulatedFirstMoment[i]={originalName:n+"/m",variable:Wn(a).variable(!1)}),null==e.accumulatedWeightedInfNorm[i]&&(e.accumulatedWeightedInfNorm[i]={originalName:n+"/v",variable:Wn(a).variable(!1)});var s=Array.isArray(t)?t[i].tensor:t[n];if(null!=s){var u=e.accumulatedFirstMoment[i].variable,c=e.accumulatedWeightedInfNorm[i].variable,l=u.mul(e.beta1).add(s.mul(1-e.beta1)),h=c.mul(e.beta2),f=s.abs(),d=h.maximum(f);u.assign(l),c.assign(d);var p=o.div(r).mul(l.div(d.add(e.epsilon))).add(a);a.assign(p)}})),e.iteration.assign(e.iteration.add(1)),e.accBeta1.assign(e.accBeta1.mul(e.beta1))})),this.incrementIterations()},e.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&$e(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&$e(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("getWeights() is not implemented for Adamax yet.")}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(t){throw new Error("setWeights() is not implemented for Adamax yet.")}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},e.fromConfig=function(t,e){return new t(e.learningRate,e.beta1,e.beta2,e.epsilon,e.decay)},e.className="Adamax",e}(cf);Jh(df);var pf=function(t){function e(e){var n=t.call(this)||this;return n.learningRate=e,n.setLearningRate(e),n}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Array.isArray(t)?t[r].tensor:t[n];if(null!=o){var i=Ot.registeredVariables[n];qe((function(){var t=e.c.mul(o).add(i);i.assign(t)}))}})),this.incrementIterations()},e.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=je(Sn(-t))},e.prototype.dispose=function(){this.c.dispose()},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=e.sent()).length)throw new Error("SGD optimizer does not have settable weights.");return[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate}},e.fromConfig=function(t,e){return new t(e.learningRate)},e.className="SGD",e}(cf);Jh(pf);var vf=function(t){function e(e,n,r){void 0===r&&(r=!1);var o=t.call(this,e)||this;return o.learningRate=e,o.momentum=n,o.useNesterov=r,o.accumulations=[],o.m=Sn(o.momentum),o}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Ot.registeredVariables[n];null==e.accumulations[r]&&(e.accumulations[r]={originalName:n+"/momentum",variable:qe((function(){return Wn(o).variable(!1)}))});var i=e.accumulations[r].variable,a=Array.isArray(t)?t[r].tensor:t[n];null!=a&&qe((function(){var t,n=e.m.mul(i).add(a);t=e.useNesterov?e.c.mul(a.add(n.mul(e.m))).add(o):e.c.mul(n).add(o),i.assign(n),o.assign(t)}))})),this.incrementIterations()},e.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&$e(this.accumulations.map((function(t){return t.variable})))},e.prototype.setMomentum=function(t){this.momentum=t},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){return c(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){return c(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},e.fromConfig=function(t,e){return new t(e.learningRate,e.momentum,e.useNesterov)},e.className="Momentum",e}(pf);Jh(vf);var mf=function(t){function e(e,n,r,o,i){void 0===n&&(n=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===i&&(i=!1);var a=t.call(this)||this;return a.learningRate=e,a.decay=n,a.momentum=r,a.epsilon=o,a.accumulatedMeanSquares=[],a.accumulatedMoments=[],a.accumulatedMeanGrads=[],a.centered=i,null==o&&(a.epsilon=Ot.backend.epsilon()),a}return s(e,t),e.prototype.applyGradients=function(t){var e=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(n,r){var o=Ot.registeredVariables[n];null==e.accumulatedMeanSquares[r]&&(e.accumulatedMeanSquares[r]={originalName:n+"/rms",variable:qe((function(){return Wn(o).variable(!1)}))}),null==e.accumulatedMoments[r]&&(e.accumulatedMoments[r]={originalName:n+"/momentum",variable:qe((function(){return Wn(o).variable(!1)}))}),null==e.accumulatedMeanGrads[r]&&e.centered&&(e.accumulatedMeanGrads[r]={originalName:n+"/mg",variable:qe((function(){return Wn(o).variable(!1)}))});var i=Array.isArray(t)?t[r].tensor:t[n];if(null!=i){var a=e.accumulatedMeanSquares[r].variable,s=e.accumulatedMoments[r].variable;qe((function(){var t=a.mul(e.decay).add(i.square().mul(1-e.decay));if(e.centered){var n=e.accumulatedMeanGrads[r].variable,u=n.mul(e.decay).add(i.mul(1-e.decay)),c=s.mul(e.momentum).add(i.mul(e.learningRate).div(t.sub(u.square().add(e.epsilon)).sqrt()));a.assign(t),n.assign(u),s.assign(c);var l=o.sub(c);o.assign(l)}else{var h=a.mul(e.decay).add(i.square().mul(1-e.decay));c=s.mul(e.momentum).add(i.mul(e.learningRate).div(h.add(e.epsilon).sqrt())),a.assign(h),s.assign(c),l=o.sub(c),o.assign(l)}}))}})),this.incrementIterations()},e.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&$e(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&$e(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&$e(this.accumulatedMoments.map((function(t){return t.variable})))},e.prototype.getWeights=function(){return u(this,void 0,void 0,(function(){var t;return c(this,(function(e){switch(e.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[e.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},e.prototype.setWeights=function(t){return u(this,void 0,void 0,(function(){var e;return c(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),e=this.centered?t.length/3:t.length/2,this.accumulatedMeanSquares=t.slice(0,e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(e,2*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*e,3*e).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},e.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},e.fromConfig=function(t,e){return new t(e.learningRate,e.decay,e.momentum,e.epsilon,e.centered)},e.className="RMSProp",e}(cf);Jh(mf);var gf=function(){function t(){}return t.sgd=function(t){return new pf(t)},t.momentum=function(t,e,n){return void 0===n&&(n=!1),new vf(t,e,n)},t.rmsprop=function(t,e,n,r,o){return void 0===e&&(e=.9),void 0===n&&(n=0),void 0===r&&(r=null),void 0===o&&(o=!1),new mf(t,e,n,r,o)},t.adam=function(t,e,n,r){return void 0===t&&(t=.001),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),new ff(t,e,n,r)},t.adadelta=function(t,e,n){return void 0===t&&(t=.001),void 0===e&&(e=.95),void 0===n&&(n=null),new lf(t,e,n)},t.adamax=function(t,e,n,r,o){return void 0===t&&(t=.002),void 0===e&&(e=.9),void 0===n&&(n=.999),void 0===r&&(r=null),void 0===o&&(o=0),new df(t,e,n,r,o)},t.adagrad=function(t,e){return void 0===e&&(e=.1),new hf(t,e)},t}(),yf={sgd:gf.sgd,momentum:gf.momentum,adadelta:gf.adadelta,adagrad:gf.adagrad,rmsprop:gf.rmsprop,adamax:gf.adamax,adam:gf.adam},xf="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:void 0!==i?i:function(t){return t()};function bf(){return new Promise((function(t){return xf((function(){return t()}))}))}dt=ql}.call(this,n(1),n(2),n(3).Buffer,n(7).setImmediate)},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e){var n,r,o=t.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(t){if(n===setTimeout)return setTimeout(t,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(t){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(t){r=a}}();var u,c=[],l=!1,h=-1;function f(){l&&u&&(l=!1,u.length?c=u.concat(c):h=-1,c.length&&d())}function d(){if(!l){var t=s(f);l=!0;for(var e=c.length;e;){for(u=c,c=[];++h<e;)u&&u[h].run();h=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function p(t,e){this.fun=t,this.array=e}function v(){}o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new p(t,e)),1!==c.length||l||s(d)},p.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=v,o.addListener=v,o.once=v,o.off=v,o.removeListener=v,o.removeAllListeners=v,o.emit=v,o.prependListener=v,o.prependOnceListener=v,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(t,e,n){"use strict";(function(t){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(4),o=n(5),i=n(6);function a(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(t,e){if(a()<e)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=u.prototype:(null===t&&(t=new u(e)),t.length=e),t}function u(t,e,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return h(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);u.TYPED_ARRAY_SUPPORT?(t=e).__proto__=u.prototype:t=f(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|p(e,n),o=(t=s(t,r)).write(e,n);o!==r&&(t=t.slice(0,o));return t}(t,e,n):function(t,e){if(u.isBuffer(e)){var n=0|d(e.length);return 0===(t=s(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?s(t,0):f(t,e);if("Buffer"===e.type&&i(e.data))return f(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function l(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function h(t,e){if(l(e),t=s(t,e<0?0:0|d(e)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function f(t,e){var n=e.length<0?0:0|d(e.length);t=s(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function d(t){if(t>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|t}function p(t,e){if(u.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return V(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return z(t).length;default:if(r)return V(t).length;e=(""+e).toLowerCase(),r=!0}}function v(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return T(this,e,n);case"utf8":case"utf-8":return S(this,e,n);case"ascii":return A(this,e,n);case"latin1":case"binary":return N(this,e,n);case"base64":return I(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function m(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function g(t,e,n,r,o){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=o?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(o)return-1;n=t.length-1}else if(n<0){if(!o)return-1;n=0}if("string"==typeof e&&(e=u.from(e,r)),u.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,o);if("number"==typeof e)return e&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?o?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,o);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,o){var i,a=1,s=t.length,u=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,u/=2,n/=2}function c(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(o){var l=-1;for(i=n;i<s;i++)if(c(t,i)===c(e,-1===l?0:i-l)){if(-1===l&&(l=i),i-l+1===u)return l*a}else-1!==l&&(i-=i-l),l=-1}else for(n+u>s&&(n=s-u),i=n;i>=0;i--){for(var h=!0,f=0;f<u;f++)if(c(t,i+f)!==c(e,f)){h=!1;break}if(h)return i}return-1}function x(t,e,n,r){n=Number(n)||0;var o=t.length-n;r?(r=Number(r))>o&&(r=o):r=o;var i=e.length;if(i%2!=0)throw new TypeError("Invalid hex string");r>i/2&&(r=i/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function b(t,e,n,r){return G(V(e,t.length-n),t,n,r)}function w(t,e,n,r){return G(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function C(t,e,n,r){return w(t,e,n,r)}function E(t,e,n,r){return G(z(e),t,n,r)}function R(t,e,n,r){return G(function(t,e){for(var n,r,o,i=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,o=n%256,i.push(o),i.push(r);return i}(e,t.length-n),t,n,r)}function I(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function S(t,e,n){n=Math.min(t.length,n);for(var r=[],o=e;o<n;){var i,a,s,u,c=t[o],l=null,h=c>239?4:c>223?3:c>191?2:1;if(o+h<=n)switch(h){case 1:c<128&&(l=c);break;case 2:128==(192&(i=t[o+1]))&&(u=(31&c)<<6|63&i)>127&&(l=u);break;case 3:i=t[o+1],a=t[o+2],128==(192&i)&&128==(192&a)&&(u=(15&c)<<12|(63&i)<<6|63&a)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:i=t[o+1],a=t[o+2],s=t[o+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(u=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&u<1114112&&(l=u)}null===l?(l=65533,h=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),o+=h}return function(t){var e=t.length;if(e<=k)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=k));return n}(r)}e.Buffer=u,e.SlowBuffer=function(t){+t!=t&&(t=0);return u.alloc(+t)},e.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=a(),u.poolSize=8192,u._augment=function(t){return t.__proto__=u.prototype,t},u.from=function(t,e,n){return c(null,t,e,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(t,e,n){return function(t,e,n,r){return l(e),e<=0?s(t,e):void 0!==n?"string"==typeof r?s(t,e).fill(n,r):s(t,e).fill(n):s(t,e)}(null,t,e,n)},u.allocUnsafe=function(t){return h(null,t)},u.allocUnsafeSlow=function(t){return h(null,t)},u.isBuffer=function(t){return!(null==t||!t._isBuffer)},u.compare=function(t,e){if(!u.isBuffer(t)||!u.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,o=0,i=Math.min(n,r);o<i;++o)if(t[o]!==e[o]){n=t[o],r=e[o];break}return n<r?-1:r<n?1:0},u.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(t,e){if(!i(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return u.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=u.allocUnsafe(e),o=0;for(n=0;n<t.length;++n){var a=t[n];if(!u.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(r,o),o+=a.length}return r},u.byteLength=p,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)m(this,e,e+1);return this},u.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)m(this,e,e+3),m(this,e+1,e+2);return this},u.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)m(this,e,e+7),m(this,e+1,e+6),m(this,e+2,e+5),m(this,e+3,e+4);return this},u.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?S(this,0,t):v.apply(this,arguments)},u.prototype.equals=function(t){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===u.compare(this,t)},u.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},u.prototype.compare=function(t,e,n,r,o){if(!u.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===o&&(o=this.length),e<0||n>t.length||r<0||o>this.length)throw new RangeError("out of range index");if(r>=o&&e>=n)return 0;if(r>=o)return-1;if(e>=n)return 1;if(this===t)return 0;for(var i=(o>>>=0)-(r>>>=0),a=(n>>>=0)-(e>>>=0),s=Math.min(i,a),c=this.slice(r,o),l=t.slice(e,n),h=0;h<s;++h)if(c[h]!==l[h]){i=c[h],a=l[h];break}return i<a?-1:a<i?1:0},u.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},u.prototype.indexOf=function(t,e,n){return g(this,t,e,n,!0)},u.prototype.lastIndexOf=function(t,e,n){return g(this,t,e,n,!1)},u.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var o=this.length-e;if((void 0===n||n>o)&&(n=o),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var i=!1;;)switch(r){case"hex":return x(this,t,e,n);case"utf8":case"utf-8":return b(this,t,e,n);case"ascii":return w(this,t,e,n);case"latin1":case"binary":return C(this,t,e,n);case"base64":return E(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return R(this,t,e,n);default:if(i)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),i=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var k=4096;function A(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(127&t[o]);return r}function N(t,e,n){var r="";n=Math.min(t.length,n);for(var o=e;o<n;++o)r+=String.fromCharCode(t[o]);return r}function T(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var o="",i=e;i<n;++i)o+=U(t[i]);return o}function D(t,e,n){for(var r=t.slice(e,n),o="",i=0;i<r.length;i+=2)o+=String.fromCharCode(r[i]+256*r[i+1]);return o}function _(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function O(t,e,n,r,o,i){if(!u.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>o||e<i)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function M(t,e,n,r){e<0&&(e=65535+e+1);for(var o=0,i=Math.min(t.length-n,2);o<i;++o)t[n+o]=(e&255<<8*(r?o:1-o))>>>8*(r?o:1-o)}function F(t,e,n,r){e<0&&(e=4294967295+e+1);for(var o=0,i=Math.min(t.length-n,4);o<i;++o)t[n+o]=e>>>8*(r?o:3-o)&255}function B(t,e,n,r,o,i){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function P(t,e,n,r,i){return i||B(t,0,n,4),o.write(t,e,n,r,23,4),n+4}function L(t,e,n,r,i){return i||B(t,0,n,8),o.write(t,e,n,r,52,8),n+8}u.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=u.prototype;else{var o=e-t;n=new u(o,void 0);for(var i=0;i<o;++i)n[i]=this[i+t]}return n},u.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r},u.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=this[t+--e],o=1;e>0&&(o*=256);)r+=this[t+--e]*o;return r},u.prototype.readUInt8=function(t,e){return e||_(t,1,this.length),this[t]},u.prototype.readUInt16LE=function(t,e){return e||_(t,2,this.length),this[t]|this[t+1]<<8},u.prototype.readUInt16BE=function(t,e){return e||_(t,2,this.length),this[t]<<8|this[t+1]},u.prototype.readUInt32LE=function(t,e){return e||_(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},u.prototype.readUInt32BE=function(t,e){return e||_(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},u.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=this[t],o=1,i=0;++i<e&&(o*=256);)r+=this[t+i]*o;return r>=(o*=128)&&(r-=Math.pow(2,8*e)),r},u.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||_(t,e,this.length);for(var r=e,o=1,i=this[t+--r];r>0&&(o*=256);)i+=this[t+--r]*o;return i>=(o*=128)&&(i-=Math.pow(2,8*e)),i},u.prototype.readInt8=function(t,e){return e||_(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},u.prototype.readInt16LE=function(t,e){e||_(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(t,e){e||_(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(t,e){return e||_(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},u.prototype.readInt32BE=function(t,e){return e||_(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},u.prototype.readFloatLE=function(t,e){return e||_(t,4,this.length),o.read(this,t,!0,23,4)},u.prototype.readFloatBE=function(t,e){return e||_(t,4,this.length),o.read(this,t,!1,23,4)},u.prototype.readDoubleLE=function(t,e){return e||_(t,8,this.length),o.read(this,t,!0,52,8)},u.prototype.readDoubleBE=function(t,e){return e||_(t,8,this.length),o.read(this,t,!1,52,8)},u.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var o=1,i=0;for(this[e]=255&t;++i<n&&(o*=256);)this[e+i]=t/o&255;return e+n},u.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||O(this,t,e,n,Math.pow(2,8*n)-1,0);var o=n-1,i=1;for(this[e+o]=255&t;--o>=0&&(i*=256);)this[e+o]=t/i&255;return e+n},u.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,255,0),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},u.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):F(this,t,e,!0),e+4},u.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):F(this,t,e,!1),e+4},u.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);O(this,t,e,n,o-1,-o)}var i=0,a=1,s=0;for(this[e]=255&t;++i<n&&(a*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/a>>0)-s&255;return e+n},u.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var o=Math.pow(2,8*n-1);O(this,t,e,n,o-1,-o)}var i=n-1,a=1,s=0;for(this[e+i]=255&t;--i>=0&&(a*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/a>>0)-s&255;return e+n},u.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,1,127,-128),u.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},u.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):M(this,t,e,!0),e+2},u.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):M(this,t,e,!1),e+2},u.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):F(this,t,e,!0),e+4},u.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||O(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),u.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):F(this,t,e,!1),e+4},u.prototype.writeFloatLE=function(t,e,n){return P(this,t,e,!0,n)},u.prototype.writeFloatBE=function(t,e,n){return P(this,t,e,!1,n)},u.prototype.writeDoubleLE=function(t,e,n){return L(this,t,e,!0,n)},u.prototype.writeDoubleBE=function(t,e,n){return L(this,t,e,!1,n)},u.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var o,i=r-n;if(this===t&&n<e&&e<r)for(o=i-1;o>=0;--o)t[o+e]=this[o+n];else if(i<1e3||!u.TYPED_ARRAY_SUPPORT)for(o=0;o<i;++o)t[o+e]=this[o+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+i),e);return i},u.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var o=t.charCodeAt(0);o<256&&(t=o)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var i;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(i=e;i<n;++i)this[i]=t;else{var a=u.isBuffer(t)?t:V(new u(t,r).toString()),s=a.length;for(i=0;i<n-e;++i)this[i+e]=a[i%s]}return this};var W=/[^+\/0-9A-Za-z-_]/g;function U(t){return t<16?"0"+t.toString(16):t.toString(16)}function V(t,e){var n;e=e||1/0;for(var r=t.length,o=null,i=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!o){if(n>56319){(e-=3)>-1&&i.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&i.push(239,191,189);continue}o=n;continue}if(n<56320){(e-=3)>-1&&i.push(239,191,189),o=n;continue}n=65536+(o-55296<<10|n-56320)}else o&&(e-=3)>-1&&i.push(239,191,189);if(o=null,n<128){if((e-=1)<0)break;i.push(n)}else if(n<2048){if((e-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function z(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(W,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function G(t,e,n,r){for(var o=0;o<r&&!(o+n>=e.length||o>=t.length);++o)e[o+n]=t[o];return o}}).call(this,n(1))},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=c(t),a=r[0],s=r[1],u=new i(function(t,e,n){return 3*(e+n)/4-n}(0,a,s)),l=0,h=s>0?a-4:a;for(n=0;n<h;n+=4)e=o[t.charCodeAt(n)]<<18|o[t.charCodeAt(n+1)]<<12|o[t.charCodeAt(n+2)]<<6|o[t.charCodeAt(n+3)],u[l++]=e>>16&255,u[l++]=e>>8&255,u[l++]=255&e;2===s&&(e=o[t.charCodeAt(n)]<<2|o[t.charCodeAt(n+1)]>>4,u[l++]=255&e);1===s&&(e=o[t.charCodeAt(n)]<<10|o[t.charCodeAt(n+1)]<<4|o[t.charCodeAt(n+2)]>>2,u[l++]=e>>8&255,u[l++]=255&e);return u},e.fromByteArray=function(t){for(var e,n=t.length,o=n%3,i=[],a=0,s=n-o;a<s;a+=16383)i.push(l(t,a,a+16383>s?s:a+16383));1===o?(e=t[n-1],i.push(r[e>>2]+r[e<<4&63]+"==")):2===o&&(e=(t[n-2]<<8)+t[n-1],i.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return i.join("")};for(var r=[],o=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,u=a.length;s<u;++s)r[s]=a[s],o[a.charCodeAt(s)]=s;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function l(t,e,n){for(var o,i,a=[],s=e;s<n;s+=3)o=(t[s]<<16&16711680)+(t[s+1]<<8&65280)+(255&t[s+2]),a.push(r[(i=o)>>18&63]+r[i>>12&63]+r[i>>6&63]+r[63&i]);return a.join("")}o["-".charCodeAt(0)]=62,o["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,o){var i,a,s=8*o-r-1,u=(1<<s)-1,c=u>>1,l=-7,h=n?o-1:0,f=n?-1:1,d=t[e+h];for(h+=f,i=d&(1<<-l)-1,d>>=-l,l+=s;l>0;i=256*i+t[e+h],h+=f,l-=8);for(a=i&(1<<-l)-1,i>>=-l,l+=r;l>0;a=256*a+t[e+h],h+=f,l-=8);if(0===i)i=1-c;else{if(i===u)return a?NaN:1/0*(d?-1:1);a+=Math.pow(2,r),i-=c}return(d?-1:1)*a*Math.pow(2,i-r)},e.write=function(t,e,n,r,o,i){var a,s,u,c=8*i-o-1,l=(1<<c)-1,h=l>>1,f=23===o?Math.pow(2,-24)-Math.pow(2,-77):0,d=r?0:i-1,p=r?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=l):(a=Math.floor(Math.log(e)/Math.LN2),e*(u=Math.pow(2,-a))<1&&(a--,u*=2),(e+=a+h>=1?f/u:f*Math.pow(2,1-h))*u>=2&&(a++,u/=2),a+h>=l?(s=0,a=l):a+h>=1?(s=(e*u-1)*Math.pow(2,o),a+=h):(s=e*Math.pow(2,h-1)*Math.pow(2,o),a=0));o>=8;t[n+d]=255&s,d+=p,s/=256,o-=8);for(a=a<<o|s,c+=o;c>0;t[n+d]=255&a,d+=p,a/=256,c-=8);t[n+d-p]|=128*v}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e,n){(function(t){var r=void 0!==t&&t||"undefined"!=typeof self&&self||window,o=Function.prototype.apply;function i(t,e){this._id=t,this._clearFn=e}e.setTimeout=function(){return new i(o.call(setTimeout,r,arguments),clearTimeout)},e.setInterval=function(){return new i(o.call(setInterval,r,arguments),clearInterval)},e.clearTimeout=e.clearInterval=function(t){t&&t.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(r,this._id)},e.enroll=function(t,e){clearTimeout(t._idleTimeoutId),t._idleTimeout=e},e.unenroll=function(t){clearTimeout(t._idleTimeoutId),t._idleTimeout=-1},e._unrefActive=e.active=function(t){clearTimeout(t._idleTimeoutId);var e=t._idleTimeout;e>=0&&(t._idleTimeoutId=setTimeout((function(){t._onTimeout&&t._onTimeout()}),e))},n(8),e.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==t&&t.setImmediate||this&&this.setImmediate,e.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==t&&t.clearImmediate||this&&this.clearImmediate}).call(this,n(1))},function(t,e,n){(function(t,e){!function(t,n){"use strict";if(!t.setImmediate){var r,o,i,a,s,u=1,c={},l=!1,h=t.document,f=Object.getPrototypeOf&&Object.getPrototypeOf(t);f=f&&f.setTimeout?f:t,"[object process]"==={}.toString.call(t.process)?r=function(t){e.nextTick((function(){p(t)}))}:!function(){if(t.postMessage&&!t.importScripts){var e=!0,n=t.onmessage;return t.onmessage=function(){e=!1},t.postMessage("","*"),t.onmessage=n,e}}()?t.MessageChannel?((i=new MessageChannel).port1.onmessage=function(t){p(t.data)},r=function(t){i.port2.postMessage(t)}):h&&"onreadystatechange"in h.createElement("script")?(o=h.documentElement,r=function(t){var e=h.createElement("script");e.onreadystatechange=function(){p(t),e.onreadystatechange=null,o.removeChild(e),e=null},o.appendChild(e)}):r=function(t){setTimeout(p,0,t)}:(a="setImmediate$"+Math.random()+"$",s=function(e){e.source===t&&"string"==typeof e.data&&0===e.data.indexOf(a)&&p(+e.data.slice(a.length))},t.addEventListener?t.addEventListener("message",s,!1):t.attachEvent("onmessage",s),r=function(e){t.postMessage(a+e,"*")}),f.setImmediate=function(t){"function"!=typeof t&&(t=new Function(""+t));for(var e=new Array(arguments.length-1),n=0;n<e.length;n++)e[n]=arguments[n+1];var o={callback:t,args:e};return c[u]=o,r(u),u++},f.clearImmediate=d}function d(t){delete c[t]}function p(t){if(l)setTimeout(p,0,t);else{var e=c[t];if(e){l=!0;try{!function(t){var e=t.callback,r=t.args;switch(r.length){case 0:e();break;case 1:e(r[0]);break;case 2:e(r[0],r[1]);break;case 3:e(r[0],r[1],r[2]);break;default:e.apply(n,r)}}(e)}finally{d(t),l=!1}}}}}("undefined"==typeof self?void 0===t?this:t:self)}).call(this,n(1),n(2))},function(t,e){},function(t,e){},function(t,e){},function(t,e,n){"use strict";n.r(e);var r=n(0),o=function(){function t(t){var e=this;r.tidy((function(){if("number"==typeof t)e.tensor=r.variable(r.scalar(t));else if(t instanceof Array)e.tensor=r.variable(r.tensor(t));else{if(!(t instanceof a.Vector))throw new Error("Tensors must be created from Numbers, Arrays, or p5.Vectors.");e.tensor=r.variable(r.tensor(t.array()))}}))}return t.prototype.equals=function(t){var e=this,n=!1;return r.tidy((function(){1===r.all(e.tensor.equal(t.tensor)).arraySync()&&(n=!0)})),n},t.prototype.handleRank=function(t){this.tensor.rank!==t.rank?(this.tensor.dispose(),this.tensor=r.variable(t)):this.tensor.assign(t)},t.prototype.add=function(t){var e=this;r.tidy((function(){var n=e.tensor.add(t.tensor);e.handleRank(n)}))},t.prototype.sub=function(t){var e=this;r.tidy((function(){var n=e.tensor.sub(t.tensor);e.handleRank(n)}))},t.prototype.mul=function(t){var e=this;r.tidy((function(){var n=e.tensor.mul(t.tensor);e.handleRank(n)}))},t.prototype.div=function(t){var e=this;r.tidy((function(){var n=e.tensor.div(t.tensor);e.handleRank(n)}))},t.prototype.dot=function(e,n){var o=this;r.tidy((function(){var r;if(e instanceof t)r=o.tensor.dot(e.tensor);else{if(!(e instanceof a.Vector))throw new Error("Tensors must be dotted with Tensors or p5.Vectors.");var s=void 0,u=void 0;if(2===n)s=e.array().slice(0,2);else{if(3!==n)throw new Error("p5.Vectors must be 2 or 3-dimensional.");s=e.array().slice(0,3)}u=i(s),r=o.tensor.dot(u.tensor),u.tensor.dispose()}o.handleRank(r)}))},t}(),i=function(t){return new o(t)};p5.prototype.tfc=r,p5.prototype.Tensor=o,p5.prototype.createTensor=i;var a=e.default=p5}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0ZW5zb3JmbG93L3RmanMtY29yZS9kaXN0L3RmLWNvcmUuZXNtLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2llZWU3NTQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbWVycy1icm93c2VyaWZ5L21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NldGltbWVkaWF0ZS9zZXRJbW1lZGlhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RlbnNvci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJlIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJBcnJheSIsInRoaXMiLCJjb25zdHJ1Y3RvciIsIlByb21pc2UiLCJhIiwidSIsIm5leHQiLCJ0aHJvdyIsImRvbmUiLCJ0aGVuIiwiYXBwbHkiLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwicmV0dXJuIiwiaXRlcmF0b3IiLCJUeXBlRXJyb3IiLCJwb3AiLCJsZW5ndGgiLCJwdXNoIiwiZ2xvYmFsIiwiZmxhZ3MiLCJmbGFnUmVnaXN0cnkiLCJ1cmxGbGFncyIsInBvcHVsYXRlVVJMRmxhZ3MiLCJzZXRQbGF0Zm9ybSIsInBsYXRmb3JtIiwiY29uc29sZSIsIndhcm4iLCJwbGF0Zm9ybU5hbWUiLCJyZWdpc3RlckZsYWciLCJldmFsdWF0aW9uRm4iLCJzZXRIb29rIiwic2V0IiwiZXZhbHVhdGVGbGFnIiwiZ2V0TnVtYmVyIiwiZ2V0Qm9vbCIsImdldEZsYWdzIiwiY29uZmlndXJhYmxlIiwiRXJyb3IiLCJzZXRGbGFncyIsImFzc2lnbiIsInJlc2V0IiwibG9jYXRpb24iLCJzZWFyY2giLCJ0ZmpzZmxhZ3MiLCJzcGxpdCIsImZvckVhY2giLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCJhcmd1bWVudHMiLCJkZWNvZGVVUklDb21wb25lbnQiLCJqb2luIiwiZnJlZXplIiwiRW52aXJvbm1lbnQiLCJnZXRRdWVyeVBhcmFtcyIsInNldEVudmlyb25tZW50R2xvYmFsIiwiTWF0aCIsInJhbmRvbSIsIm1heCIsIm1pbiIsImgiLCJmIiwieSIsInYiLCJpc0FycmF5IiwiXyIsImciLCJ4IiwiYiIsInRhbmgiLCJleHAiLCJ3IiwiY2VpbCIsInNxcnQiLCJDIiwicmVwZWF0IiwiRSIsInNldFRpbWVvdXQiLCJSIiwic2xpY2UiLCJJIiwibWFwIiwiY29uY2F0IiwiZXZlcnkiLCJrIiwic29ydCIsIm5ld1NoYXBlIiwia2VwdERpbXMiLCJOIiwiRmxvYXQzMkFycmF5IiwiSW50MzJBcnJheSIsIlVpbnQ4QXJyYXkiLCJTIiwiQSIsImlzTmFOIiwiaXNGaW5pdGUiLCJUIiwiRCIsIk8iLCJGIiwiTSIsIlN0cmluZyIsIkIiLCJQIiwiTCIsIlciLCJVIiwiViIsInoiLCJyb3VuZCIsIkciLCJyZWR1Y2UiLCJIIiwicSIsIiQiLCJub3ciLCJLIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaiIsImVuY29kZSIsIlgiLCJkZWNvZGUiLCJZIiwic2h1ZmZsZSIsImNsYW1wIiwibmVhcmVzdExhcmdlckV2ZW4iLCJzdW0iLCJyYW5kVW5pZm9ybSIsImRpc3RTcXVhcmVkIiwiYXNzZXJ0IiwiYXNzZXJ0U2hhcGVzTWF0Y2giLCJhc3NlcnROb25OdWxsIiwiZmxhdHRlbiIsInNpemVGcm9tU2hhcGUiLCJpc1NjYWxhclNoYXBlIiwiYXJyYXlzRXF1YWwiLCJpc0ludCIsInNpemVUb1NxdWFyaXNoU2hhcGUiLCJjcmVhdGVTaHVmZmxlZEluZGljZXMiLCJVaW50MzJBcnJheSIsInJpZ2h0UGFkIiwicmVwZWF0ZWRUcnkiLCJpbmZlckZyb21JbXBsaWNpdFNoYXBlIiwicGFyc2VBeGlzUGFyYW0iLCJzcXVlZXplU2hhcGUiLCJnZXRUeXBlZEFycmF5RnJvbURUeXBlIiwiZ2V0QXJyYXlGcm9tRFR5cGUiLCJjaGVja0NvbnZlcnNpb25Gb3JFcnJvcnMiLCJpc1ZhbGlkRHR5cGUiLCJoYXNFbmNvZGluZ0xvc3MiLCJpc1R5cGVkQXJyYXkiLCJieXRlc1BlckVsZW1lbnQiLCJieXRlc0Zyb21TdHJpbmdBcnJheSIsImlzU3RyaW5nIiwiaXNCb29sZWFuIiwiaXNOdW1iZXIiLCJpbmZlckR0eXBlIiwiaXNGdW5jdGlvbiIsIm5lYXJlc3REaXZpc29yIiwiY29tcHV0ZVN0cmlkZXMiLCJ0b1R5cGVkQXJyYXkiLCJ0b05lc3RlZEFycmF5IiwibWFrZU9uZXNUeXBlZEFycmF5IiwibWFrZVplcm9zVHlwZWRBcnJheSIsImFzc2VydE5vbk5lZ2F0aXZlSW50ZWdlckRpbWVuc2lvbnMiLCJmZXRjaCIsImVuY29kZVN0cmluZyIsImRlY29kZVN0cmluZyIsIlEiLCJiYWNrZW5kVGltZXIiLCJsb2dnZXIiLCJKIiwicHJvZmlsZUtlcm5lbCIsInRpbWUiLCJkYXRhIiwiZHR5cGUiLCJnZXRFeHRyYVByb2ZpbGVJbmZvIiwibG9nS2VybmVsUHJvZmlsZSIsImtlcm5lbE1zIiwicmFuayIsInNpemUiLCJzaGFwZSIsInRvU3RyaW5nIiwibG9nIiwiWiIsInR0IiwiZXQiLCJydCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwib3QiLCJhdCIsIml0IiwidmFsdWVzIiwic3RyaWRlcyIsImxvY1RvSW5kZXgiLCJpbmRleFRvTG9jIiwiZmxvb3IiLCJ0b1RlbnNvciIsImN0IiwibWFrZSIsInN0IiwidXQiLCJsdCIsImtlcHQiLCJpc0Rpc3Bvc2VkSW50ZXJuYWwiLCJkYXRhSWQiLCJpZCIsIm5leHRUZW5zb3JJZCIsInJhbmtUeXBlIiwicmVnaXN0ZXJUZW5zb3IiLCJ3cml0ZSIsInRocm93SWZEaXNwb3NlZCIsImFzMUQiLCJhc1NjYWxhciIsInJlc2hhcGUiLCJhczJEIiwiYXMzRCIsImFzNEQiLCJhczVEIiwiYXNUeXBlIiwiY2FzdCIsImJ1ZmZlciIsImJ1ZmZlclN5bmMiLCJkYXRhU3luYyIsImFycmF5IiwiYXJyYXlTeW5jIiwicmVhZCIsInJlYWRTeW5jIiwiYnl0ZXMiLCJkaXNwb3NlIiwiaXNEaXNwb3NlZCIsImRpc3Bvc2VUZW5zb3IiLCJ0b0Zsb2F0IiwidG9JbnQiLCJ0b0Jvb2wiLCJwcmludCIsInJlc2hhcGVBcyIsImV4cGFuZERpbXMiLCJjdW1zdW0iLCJzcXVlZXplIiwiY2xvbmUiLCJvbmVIb3QiLCJmaWxsIiwiZnJvbSIsIm50IiwidGlsZSIsImdhdGhlciIsIm1hdE11bCIsImRvdCIsIm5vcm0iLCJyZXZlcnNlIiwic3RhY2siLCJ1bnN0YWNrIiwicGFkIiwiYmF0Y2hOb3JtYWxpemF0aW9uIiwiYmF0Y2hOb3JtIiwiYWxsIiwiYW55IiwibG9nU3VtRXhwIiwicHJvZCIsIm1lYW4iLCJhcmdNaW4iLCJhcmdNYXgiLCJhZGQiLCJhZGRTdHJpY3QiLCJhdGFuMiIsInN1YiIsInN1YlN0cmljdCIsInBvdyIsInBvd1N0cmljdCIsIm11bCIsIm11bFN0cmljdCIsImRpdiIsImZsb29yRGl2IiwiZGl2U3RyaWN0IiwibWluaW11bSIsIm1pbmltdW1TdHJpY3QiLCJtYXhpbXVtIiwibWF4aW11bVN0cmljdCIsIm1vZCIsIm1vZFN0cmljdCIsInNxdWFyZWREaWZmZXJlbmNlIiwic3F1YXJlZERpZmZlcmVuY2VTdHJpY3QiLCJ0cmFuc3Bvc2UiLCJub3RFcXVhbCIsIm5vdEVxdWFsU3RyaWN0IiwibGVzcyIsImxlc3NTdHJpY3QiLCJlcXVhbCIsImVxdWFsU3RyaWN0IiwibGVzc0VxdWFsIiwibGVzc0VxdWFsU3RyaWN0IiwiZ3JlYXRlciIsImdyZWF0ZXJTdHJpY3QiLCJncmVhdGVyRXF1YWwiLCJncmVhdGVyRXF1YWxTdHJpY3QiLCJsb2dpY2FsQW5kIiwibG9naWNhbE9yIiwibG9naWNhbE5vdCIsImxvZ2ljYWxYb3IiLCJ3aGVyZSIsIm5lZyIsInNpZ24iLCJpc0luZiIsImV4cG0xIiwibG9nMXAiLCJyc3FydCIsInNxdWFyZSIsInJlY2lwcm9jYWwiLCJhYnMiLCJjbGlwQnlWYWx1ZSIsInJlbHUiLCJlbHUiLCJzZWx1IiwibGVha3lSZWx1IiwicHJlbHUiLCJzaWdtb2lkIiwibG9nU2lnbW9pZCIsInNvZnRwbHVzIiwiemVyb3NMaWtlIiwib25lc0xpa2UiLCJzaW4iLCJjb3MiLCJ0YW4iLCJhc2luIiwiYWNvcyIsImF0YW4iLCJzaW5oIiwiY29zaCIsImFzaW5oIiwiYWNvc2giLCJhdGFuaCIsImVyZiIsInN0ZXAiLCJzb2Z0bWF4IiwibG9nU29mdG1heCIsInJlc2l6ZUJpbGluZWFyIiwiaW1hZ2UiLCJyZXNpemVOZWFyZXN0TmVpZ2hib3IiLCJjb252MWQiLCJjb252MmQiLCJjb252MmRUcmFuc3Bvc2UiLCJkZXB0aHdpc2VDb252MkQiLCJkZXB0aHdpc2VDb252MmQiLCJzZXBhcmFibGVDb252MmQiLCJhdmdQb29sIiwibWF4UG9vbCIsImxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uIiwicG9vbCIsInZhcmlhYmxlIiwiaHQiLCJ1bnNvcnRlZFNlZ21lbnRTdW0iLCJiYXRjaFRvU3BhY2VORCIsInNwYWNlVG9CYXRjaE5EIiwidG9wayIsInN0cmlkZWRTbGljZSIsImRlcHRoVG9TcGFjZSIsImZmdCIsInNwZWN0cmFsIiwiaWZmdCIsInJmZnQiLCJpcmZmdCIsImhhc0luc3RhbmNlIiwidHJhaW5hYmxlIiwibmV4dFZhcmlhYmxlSWQiLCJyZWdpc3RlclZhcmlhYmxlIiwiZGlzcG9zZVZhcmlhYmxlIiwiRnVuY3Rpb24iLCJwdCIsImZ0IiwiZHQiLCJ2dCIsIm10IiwiZ3QiLCJSMCIsIlIxIiwiUjIiLCJSMyIsIlI0IiwiUjUiLCJSNiIsImZsb2F0MzIiLCJpbnQzMiIsImJvb2wiLCJjb21wbGV4NjQiLCJ5dCIsInh0IiwiYnQiLCJ3dCIsIkN0IiwiRXQiLCJoYXMiLCJTZXQiLCJSdCIsIkl0IiwibWFrZVR5cGVzTWF0Y2giLCJhc3NlcnRUeXBlc01hdGNoIiwiaXNUZW5zb3JJbkxpc3QiLCJnZXRUZW5zb3JzSW5Db250YWluZXIiLCJrdCIsInJlZ2lzdGVyZWRWYXJpYWJsZXMiLCJuZXh0VGFwZU5vZGVJZCIsIm51bUJ5dGVzIiwibnVtVGVuc29ycyIsIm51bVN0cmluZ1RlbnNvcnMiLCJudW1EYXRhQnVmZmVycyIsImdyYWRpZW50RGVwdGgiLCJrZXJuZWxEZXB0aCIsInNjb3BlU3RhY2siLCJuZXh0U2NvcGVJZCIsInRlbnNvckluZm8iLCJXZWFrTWFwIiwicHJvZmlsaW5nIiwiYWN0aXZlUHJvZmlsZSIsIm5ld0J5dGVzIiwibmV3VGVuc29ycyIsInBlYWtCeXRlcyIsImtlcm5lbHMiLCJyZXN1bHQiLCJOdCIsIkVOViIsInJlZ2lzdHJ5IiwicmVnaXN0cnlGYWN0b3J5IiwicGVuZGluZ0JhY2tlbmRJbml0SWQiLCJzdGF0ZSIsInJlYWR5IiwicGVuZGluZ0JhY2tlbmRJbml0IiwiYmFja2VuZEluc3RhbmNlIiwiZ2V0U29ydGVkQmFja2VuZHMiLCJpbml0aWFsaXplQmFja2VuZCIsInN1Y2Nlc3MiLCJzZXRCYWNrZW5kIiwiYmFja2VuZE5hbWUiLCJpbml0aWFsaXplQmFja2VuZHNBbmRSZXR1cm5CZXN0IiwiYXN5bmNJbml0IiwiYmFja2VuZE5hbWVzIiwia2V5cyIsImZpbmRCYWNrZW5kIiwiZmluZEJhY2tlbmRGYWN0b3J5IiwiZmFjdG9yeSIsInJlZ2lzdGVyQmFja2VuZCIsInByaW9yaXR5IiwicHJvZmlsZXIiLCJyZXNvbHZlIiwiY2F0Y2giLCJtZXNzYWdlIiwicmVtb3ZlQmFja2VuZCIsIm1vdmVEYXRhIiwidGlkeSIsInNjb3BlZFJ1biIsInN0YXJ0U2NvcGUiLCJlbmRTY29wZSIsImVycm9yIiwiYWRkVGFwZU5vZGUiLCJydW5LZXJuZWwiLCJpc1RhcGVPbiIsImFjdGl2ZVNjb3BlIiwia2VlcCIsImJhY2tlbmQiLCJpbnB1dHMiLCJvdXRwdXRzIiwic2F2ZWQiLCJncmFkaWVudCIsImFjdGl2ZVRhcGUiLCJieXRlc0FkZGVkIiwidG90YWxCeXRlc1NuYXBzaG90IiwidGVuc29yc0FkZGVkIiwidG90YWxUZW5zb3JzU25hcHNob3QiLCJpbnB1dFNoYXBlcyIsIm91dHB1dFNoYXBlIiwicmVmQ291bnQiLCJyZWdpc3RlciIsInRyYWNrIiwiZGlzcG9zZURhdGEiLCJkZWxldGUiLCJkaXNwb3NlVmFyaWFibGVzIiwibWVtb3J5IiwidW5yZWxpYWJsZSIsInJlYXNvbnMiLCJwcm9maWxlIiwic3RhcnRUYXBlIiwiZW5kVGFwZSIsInNjb3BlSWQiLCJncmFkaWVudHMiLCJncmFkcyIsImN1c3RvbUdyYWQiLCJncmFkRnVuYyIsImZyb21QaXhlbHMiLCJ3YWxsTXMiLCJTdCIsIndpbmRvdyIsInByb2Nlc3MiLCJzZWxmIiwiX3RmZW5naW5lIiwiQXQiLCJkb2N1bWVudCIsIldvcmtlckdsb2JhbFNjb3BlIiwidmVyc2lvbnMiLCJub2RlIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwidGVzdCIsInZlbmRvciIsIlR0IiwiRHQiLCJfdCIsIk90IiwiYWxwaGEiLCJhbnRpYWxpYXMiLCJwcmVtdWx0aXBsaWVkQWxwaGEiLCJwcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJkZXB0aCIsInN0ZW5jaWwiLCJmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0IiwiRnQiLCJNdCIsIkJ0IiwiYWRkRXZlbnRMaXN0ZW5lciIsInByZXZlbnREZWZhdWx0IiwiZ2V0Q29udGV4dCIsImlzQ29udGV4dExvc3QiLCJkaXNhYmxlIiwiREVQVEhfVEVTVCIsIlNURU5DSUxfVEVTVCIsIkJMRU5EIiwiRElUSEVSIiwiUE9MWUdPTl9PRkZTRVRfRklMTCIsIlNBTVBMRV9DT1ZFUkFHRSIsImVuYWJsZSIsIlNDSVNTT1JfVEVTVCIsIkNVTExfRkFDRSIsImN1bGxGYWNlIiwiQkFDSyIsIk9mZnNjcmVlbkNhbnZhcyIsImNyZWF0ZUVsZW1lbnQiLCJQdCIsIkx0IiwiV3QiLCJVdCIsIlIzMkYiLCJSMTZGIiwiUkdCQTE2RiIsIlJHQkEzMkYiLCJSRUQiLCJIQUxGX0ZMT0FUIiwiRkxPQVQiLCJSR0JBIiwiSEFMRl9GTE9BVF9PRVMiLCJpbnRlcm5hbEZvcm1hdEZsb2F0IiwiaW50ZXJuYWxGb3JtYXRIYWxmRmxvYXQiLCJpbnRlcm5hbEZvcm1hdFBhY2tlZEhhbGZGbG9hdCIsImludGVybmFsRm9ybWF0UGFja2VkRmxvYXQiLCJ0ZXh0dXJlRm9ybWF0RmxvYXQiLCJkb3dubG9hZFRleHR1cmVGb3JtYXQiLCJkb3dubG9hZFVucGFja051bUNoYW5uZWxzIiwiZGVmYXVsdE51bUNoYW5uZWxzIiwidGV4dHVyZVR5cGVIYWxmRmxvYXQiLCJ0ZXh0dXJlVHlwZUZsb2F0IiwiVnQiLCJnZXRFcnJvciIsIk5PX0VSUk9SIiwicXQiLCJSRU5ERVIiLCJVUExPQUQiLCJQSVhFTFMiLCJET1dOTE9BRCIsIlVOUEFDS0VEX0ZMT0FUMTYiLCJVTlBBQ0tFRF9GTE9BVDMyIiwiUEFDS0VEXzRYMV9VTlNJR05FRF9CWVRFIiwiUEFDS0VEXzJYMl9GTE9BVDMyIiwiUEFDS0VEXzJYMl9GTE9BVDE2IiwienQiLCJHdCIsIkh0IiwiSU5WQUxJRF9FTlVNIiwiSU5WQUxJRF9WQUxVRSIsIklOVkFMSURfT1BFUkFUSU9OIiwiSU5WQUxJRF9GUkFNRUJVRkZFUl9PUEVSQVRJT04iLCJPVVRfT0ZfTUVNT1JZIiwiQ09OVEVYVF9MT1NUX1dFQkdMIiwiJHQiLCJ2ZSIsImdldEV4dGVuc2lvbiIsIkt0IiwiY3JlYXRlU2hhZGVyIiwiVkVSVEVYX1NIQURFUiIsInNoYWRlclNvdXJjZSIsImNvbXBpbGVTaGFkZXIiLCJnZXRTaGFkZXJQYXJhbWV0ZXIiLCJDT01QSUxFX1NUQVRVUyIsImdldFNoYWRlckluZm9Mb2ciLCJqdCIsIkZSQUdNRU5UX1NIQURFUiIsIlF0IiwiZXhlYyIsIlh0IiwiWXQiLCJKdCIsImNyZWF0ZVByb2dyYW0iLCJadCIsImxpbmtQcm9ncmFtIiwiZ2V0UHJvZ3JhbVBhcmFtZXRlciIsIkxJTktfU1RBVFVTIiwiZ2V0UHJvZ3JhbUluZm9Mb2ciLCJ0ZSIsInZhbGlkYXRlUHJvZ3JhbSIsIlZBTElEQVRFX1NUQVRVUyIsImVlIiwiY3JlYXRlQnVmZmVyIiwiYmluZEJ1ZmZlciIsIkFSUkFZX0JVRkZFUiIsImJ1ZmZlckRhdGEiLCJTVEFUSUNfRFJBVyIsIm5lIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJyZSIsImNyZWF0ZVRleHR1cmUiLCJvZSIsImFlIiwiY3JlYXRlRnJhbWVidWZmZXIiLCJpZSIsImdldEF0dHJpYkxvY2F0aW9uIiwidmVydGV4QXR0cmliUG9pbnRlciIsImVuYWJsZVZlcnRleEF0dHJpYkFycmF5Iiwic2UiLCJtZSIsImFjdGl2ZVRleHR1cmUiLCJURVhUVVJFMCIsImJpbmRUZXh0dXJlIiwiVEVYVFVSRV8yRCIsInVlIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwibGUiLCJjZSIsInVuaWZvcm0xaSIsImhlIiwiYmluZEZyYW1lYnVmZmVyIiwiRlJBTUVCVUZGRVIiLCJmcmFtZWJ1ZmZlclRleHR1cmUyRCIsIkNPTE9SX0FUVEFDSE1FTlQwIiwicGUiLCJmZSIsImNoZWNrRnJhbWVidWZmZXJTdGF0dXMiLCJGUkFNRUJVRkZFUl9DT01QTEVURSIsImRlIiwiRlJBTUVCVUZGRVJfSU5DT01QTEVURV9BVFRBQ0hNRU5UIiwiRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlQiLCJGUkFNRUJVRkZFUl9JTkNPTVBMRVRFX0RJTUVOU0lPTlMiLCJGUkFNRUJVRkZFUl9VTlNVUFBPUlRFRCIsIk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTIiwiZ2UiLCJ5ZSIsInhlIiwiYmUiLCJ3ZSIsIkNlIiwiRWUiLCJnZXRQYXJhbWV0ZXIiLCJNQVhfVEVYVFVSRV9TSVpFIiwiUmUiLCJNQVhfVEVYVFVSRV9JTUFHRV9VTklUUyIsIkllIiwia2UiLCJOZSIsIlNlIiwiVGUiLCJBZSIsInRleEltYWdlMkQiLCJkZWxldGVUZXh0dXJlIiwiZGVsZXRlRnJhbWVidWZmZXIiLCJEZSIsImZlbmNlU3luYyIsIl9lIiwiY2FsbEFuZENoZWNrIiwiY2FuQmVSZXByZXNlbnRlZCIsImdldFdlYkdMRXJyb3JNZXNzYWdlIiwiZ2V0RXh0ZW5zaW9uT3JUaHJvdyIsImNyZWF0ZVZlcnRleFNoYWRlciIsImNyZWF0ZUZyYWdtZW50U2hhZGVyIiwiY3JlYXRlU3RhdGljVmVydGV4QnVmZmVyIiwiY3JlYXRlU3RhdGljSW5kZXhCdWZmZXIiLCJnZXROdW1DaGFubmVscyIsInZhbGlkYXRlVGV4dHVyZVNpemUiLCJiaW5kVmVydGV4QnVmZmVyVG9Qcm9ncmFtQXR0cmlidXRlIiwiYmluZFRleHR1cmVVbml0IiwidW5iaW5kVGV4dHVyZVVuaXQiLCJnZXRQcm9ncmFtVW5pZm9ybUxvY2F0aW9uT3JUaHJvdyIsImdldFByb2dyYW1Vbmlmb3JtTG9jYXRpb24iLCJiaW5kVGV4dHVyZVRvUHJvZ3JhbVVuaWZvcm1TYW1wbGVyIiwiYmluZENhbnZhc1RvRnJhbWVidWZmZXIiLCJ2aWV3cG9ydCIsImNhbnZhcyIsIndpZHRoIiwiaGVpZ2h0Iiwic2Npc3NvciIsImJpbmRDb2xvclRleHR1cmVUb0ZyYW1lYnVmZmVyIiwidW5iaW5kQ29sb3JUZXh0dXJlRnJvbUZyYW1lYnVmZmVyIiwidmFsaWRhdGVGcmFtZWJ1ZmZlciIsImdldEZyYW1lYnVmZmVyRXJyb3JNZXNzYWdlIiwiZ2V0QmF0Y2hEaW0iLCJnZXRSb3dzQ29scyIsImdldFNoYXBlQXMzRCIsImdldFRleHR1cmVTaGFwZUZyb21Mb2dpY2FsU2hhcGUiLCJpc1Jlc2hhcGVGcmVlIiwiZ2V0V2ViR0xNYXhUZXh0dXJlU2l6ZSIsInJlc2V0TWF4VGV4dHVyZVNpemUiLCJyZXNldE1heFRleHR1cmVzSW5TaGFkZXIiLCJnZXRNYXhUZXh0dXJlc0luU2hhZGVyIiwiZ2V0V2ViR0xEaXNqb2ludFF1ZXJ5VGltZXJWZXJzaW9uIiwiaGFzRXh0ZW5zaW9uIiwiaXNXZWJHTFZlcnNpb25FbmFibGVkIiwiaXNDYXBhYmxlT2ZSZW5kZXJpbmdUb0Zsb2F0VGV4dHVyZSIsImlzRG93bmxvYWRGbG9hdFRleHR1cmVFbmFibGVkIiwiaXNXZWJHTEZlbmNlRW5hYmxlZCIsIk9lIiwiRmUiLCJNZSIsIkJlIiwiUGUiLCJMZSIsIldlIiwiVWUiLCJWZSIsInplIiwiR2UiLCJIZSIsInFlIiwiJGUiLCJLZSIsImplIiwiWGUiLCJZZSIsIlFlIiwiSmUiLCJaZSIsInRuIiwiZW4iLCJubiIsImluZGV4T2YiLCJybiIsIm9uIiwiYW4iLCJzbiIsInVuIiwibG4iLCJjbiIsImhuIiwicG4iLCJmbiIsImRuIiwidm4iLCJlbmRzV2l0aCIsInN1YnN0cmluZyIsIm9wZXJhIiwic3Vic3RyIiwibW4iLCJjb21wbGV4XyIsImNvbXBsZXgiLCIkcmVhbCIsIiRpbWFnIiwiZ24iLCJyZWFsXyIsInJlYWwiLCIkaW5wdXQiLCJ5biIsImltYWdfIiwiaW1hZyIsInhuIiwiYm4iLCJ3biIsIkNuIiwiRW4iLCJSbiIsIkluIiwia24iLCJObiIsIlNuIiwiQW4iLCJUbiIsIkRuIiwibGluc3BhY2UiLCJfbiIsIk9uIiwib25lc0xpa2VfIiwiRm4iLCIkeCIsInplcm9zTGlrZV8iLCJNbiIsImNvbmNhdF8iLCJmaWx0ZXIiLCJVbiIsIkJuIiwiY29uY2F0MWRfIiwiUG4iLCJjb25jYXQyZF8iLCJMbiIsImNvbmNhdDNkXyIsIlduIiwiY29uY2F0NGRfIiwic3BsaXRfIiwiVm4iLCJnbG9iYWxUaGlzIiwiem4iLCJjaGFyQ29kZUF0IiwiczAiLCJzMSIsInMyIiwiZG91YmxlIiwicXVpY2siLCJhbGVhIiwiR24iLCJ4b3IxMjgiLCJIbiIsInhvcndvdyIsInFuIiwiRGF0ZSIsInhvcnNoaWZ0NyIsIiRuIiwieG9yNDA5NiIsIktuIiwidHljaGVpIiwiam4iLCJlbnRyb3B5IiwicmFuZG9tQnl0ZXMiLCJjcnlwdG8iLCJtc0NyeXB0byIsImdldFJhbmRvbVZhbHVlcyIsInBsdWdpbnMiLCJzY3JlZW4iLCJwYXNzIiwiZnJvbUNoYXJDb2RlIiwiWG4iLCJZbiIsInN0ZERldiIsIm5leHRWYWwiLCJOYU4iLCJ0cnVuY2F0ZWQiLCJ1cHBlciIsImxvd2VyIiwibmV4dFZhbHVlIiwiaXNWYWxpZFRydW5jYXRlZCIsImNvbnZlcnRWYWx1ZSIsIlFuIiwiYmV0YSIsInJhbmR1IiwicmFuZG4iLCJKbiIsImNhblJldHVybkZsb2F0IiwicmFuZ2UiLCJabiIsInRyIiwiZXIiLCJiYXRjaFRvU3BhY2VORF8iLCJuciIsImNhc3RfIiwicnIiLCJjbG9uZV8iLCJvciIsImN1bXN1bV8iLCJwZXJtdXRlZFgiLCJhciIsImRlcHRoVG9TcGFjZV8iLCJpciIsImV4cGFuZERpbXNfIiwic3BsaWNlIiwieHIiLCJzciIsImV5ZV8iLCJFciIsInVyIiwibXVsdGlub21pYWxfIiwibXVsdGlub21pYWwiLCJsb2dpdHMyRCIsImxyIiwib25lSG90XyIsIiRpbmRpY2VzIiwiY3IiLCJwYWRfIiwiaHIiLCJwYWQxZF8iLCJwciIsInBhZDJkXyIsImZyIiwicGFkM2RfIiwiZHIiLCJwYWQ0ZF8iLCJ2ciIsInJhbmRfIiwibXIiLCJyYW5kb21Ob3JtYWxfIiwiZ3IiLCJyYW5kb21HYW1tYV8iLCJ5ciIsInJhbmRvbVVuaWZvcm1fIiwicmVzaGFwZV8iLCJiciIsInNwYWNlVG9CYXRjaE5EXyIsIndyIiwic3F1ZWV6ZV8iLCJDciIsInN0YWNrXyIsInRpbGVfIiwiUnIiLCJ0cnVuY2F0ZWROb3JtYWxfIiwiSXIiLCJ1bnN0YWNrXyIsImtyIiwiTnIiLCJTciIsIkFyIiwiVHIiLCJEciIsIl9yIiwiT3IiLCJGciIsIkJyIiwic2xpY2VSYW5rIiwibnVtVXBkYXRlcyIsInNsaWNlU2l6ZSIsIm91dHB1dFNpemUiLCJQciIsIkxyIiwiV3IiLCJNSU5fU0FGRV9JTlRFR0VSIiwiTUFYX1NBRkVfSU5URUdFUiIsIlVyIiwiVnIiLCJ6ciIsIkdyIiwiWHIiLCJIciIsInFyIiwiZ3JhZCIsIiRyIiwiS3IiLCJzb21lIiwianIiLCJZciIsInNvZnRtYXhfIiwiUXIiLCJsb2dTb2Z0bWF4XyIsIkpyIiwiZGF0YU1vdmVyIiwiWnIiLCJmbG9hdFByZWNpc2lvbiIsImVwc2lsb24iLCJiYXRjaE1hdE11bCIsImZ1c2VkQmF0Y2hNYXRNdWwiLCJ0cmFuc3Bvc2VBIiwidHJhbnNwb3NlQiIsImJpYXMiLCJhY3RpdmF0aW9uIiwicHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyIsImFkZE4iLCJzdWJ0cmFjdCIsIm11bHRpcGx5IiwicmVhbERpdmlkZSIsInNlbGVjdCIsImVsdURlciIsImludCIsImNsaXAiLCJjb21wbGV4QWJzIiwiZnVzZWRDb252MmQiLCJjb252MmREZXJJbnB1dCIsImNvbnYyZERlckZpbHRlciIsImRlcHRod2lzZUNvbnYyRERlcklucHV0IiwiZGVwdGh3aXNlQ29udjJERGVyRmlsdGVyIiwiY29udjNkIiwiY29udjNkRGVySW5wdXQiLCJjb252M2REZXJGaWx0ZXIiLCJtYXhQb29sQmFja3Byb3AiLCJhdmdQb29sQmFja3Byb3AiLCJhdmdQb29sM2QiLCJhdmdQb29sM2RCYWNrcHJvcCIsIm1heFBvb2wzZCIsIm1heFBvb2wzZEJhY2twcm9wIiwiZ2F0aGVyTkQiLCJzY2F0dGVyTkQiLCJyZXNpemVCaWxpbmVhckJhY2twcm9wIiwicmVzaXplTmVhcmVzdE5laWdoYm9yQmFja3Byb3AiLCJsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjREIiwiTFJOR3JhZCIsIm5vbk1heFN1cHByZXNzaW9uIiwiY3JvcEFuZFJlc2l6ZSIsInNwYXJzZVRvRGVuc2UiLCJkaWFnIiwidG8iLCJ1bnNoaWZ0IiwiZW8iLCJubyIsInJvIiwidW8iLCJhbyIsIm9vIiwibG8iLCJpbyIsImNvIiwidG9wIiwiYm90dG9tIiwibGVmdCIsInJpZ2h0IiwidHlwZSIsInNvIiwiaG8iLCJwYWRJbmZvIiwib3V0SGVpZ2h0Iiwib3V0V2lkdGgiLCJiYXRjaFNpemUiLCJkYXRhRm9ybWF0IiwiaW5IZWlnaHQiLCJpbldpZHRoIiwiaW5DaGFubmVscyIsIm91dENoYW5uZWxzIiwic3RyaWRlSGVpZ2h0Iiwic3RyaWRlV2lkdGgiLCJmaWx0ZXJIZWlnaHQiLCJmaWx0ZXJXaWR0aCIsImVmZmVjdGl2ZUZpbHRlckhlaWdodCIsImVmZmVjdGl2ZUZpbHRlcldpZHRoIiwiZGlsYXRpb25IZWlnaHQiLCJkaWxhdGlvbldpZHRoIiwiaW5TaGFwZSIsIm91dFNoYXBlIiwiZmlsdGVyU2hhcGUiLCJmcm9udCIsImJhY2siLCJvdXREZXB0aCIsImluRGVwdGgiLCJzdHJpZGVEZXB0aCIsImZpbHRlckRlcHRoIiwiZWZmZWN0aXZlRmlsdGVyRGVwdGgiLCJkaWxhdGlvbkRlcHRoIiwicG8iLCJmbyIsInZvIiwibW8iLCJnbyIsInlvIiwieG8iLCJjYXN0VGVuc29yIiwicmVzaGFwZVRlbnNvciIsImxpbnNwYWNlSW1wbCIsInVwY2FzdFR5cGUiLCJheGVzQXJlSW5uZXJNb3N0RGltcyIsImNvbWJpbmVMb2NhdGlvbnMiLCJjb21wdXRlT3V0QW5kUmVkdWNlU2hhcGVzIiwiZXhwYW5kU2hhcGVUb0tlZXBEaW0iLCJhc3NlcnRBeGVzQXJlSW5uZXJNb3N0RGltcyIsImdldEF4ZXNQZXJtdXRhdGlvbiIsImdldFVuZG9BeGVzUGVybXV0YXRpb24iLCJnZXRJbm5lck1vc3RBeGVzIiwiZ2V0QnJvYWRjYXN0RGltcyIsImdldFJlZHVjdGlvbkF4ZXMiLCJhc3NlcnRBbmRHZXRCcm9hZGNhc3RTaGFwZSIsImFzc2VydFBhcmFtc0NvbnNpc3RlbnQiLCJjb21wdXRlT3V0U2hhcGUiLCJjb21wdXRlUG9vbDJESW5mbyIsImNvbXB1dGVQb29sM0RJbmZvIiwiY29tcHV0ZUNvbnYyREluZm8iLCJjb21wdXRlQ29udjNESW5mbyIsImNvbXB1dGVEZWZhdWx0UGFkIiwidHVwbGVWYWx1ZXNBcmVPbmUiLCJlaXRoZXJTdHJpZGVzT3JEaWxhdGlvbnNBcmVPbmUiLCJjb252ZXJ0Q29udjJERGF0YUZvcm1hdCIsImJvIiwid28iLCJDbyIsIkVvIiwiUEkiLCJSbyIsInNjb3JlIiwiYm94SW5kZXgiLCJJbyIsInN1YmFycmF5Iiwia28iLCJObyIsIlNvIiwiaW5kZXgiLCJBbyIsIlRvIiwidmFyaWFibGVOYW1lcyIsInVzZXJDb2RlIiwiRG8iLCJ1c2VzUGFja2VkVGV4dHVyZXMiLCJfbyIsIndpbmRvd1NpemUiLCJpblNpemUiLCJPbyIsIkZvIiwiTW8iLCJ2ZXJzaW9uIiwiYXR0cmlidXRlIiwidmFyeWluZ1ZzIiwidmFyeWluZ0ZzIiwidGV4dHVyZTJEIiwib3V0cHV0IiwiZGVmaW5lT3V0cHV0IiwiZGVmaW5lU3BlY2lhbE5hTiIsImRlZmluZVNwZWNpYWxJbmYiLCJkZWZpbmVSb3VuZCIsIkJvIiwiUG8iLCJMbyIsIldvIiwic2hhcGVJbmZvIiwibG9naWNhbFNoYXBlIiwiaXNVbmlmb3JtIiwiVm8iLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInRleFNoYXBlIiwiWG8iLCJZbyIsIlVvIiwiJG8iLCJLbyIsImZsYXRPZmZzZXQiLCJqbyIsInpvIiwiR28iLCJIbyIsImlzUGFja2VkIiwicW8iLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJRbyIsIkpvIiwiWm8iLCJ0YSIsImVhIiwib2EiLCJhYSIsImlhIiwic2EiLCJ1YSIsImxhIiwiY2EiLCJoYSIsInN1cHBvcnRzQnJvYWRjYXN0aW5nIiwicGEiLCJnZXRDdXN0b21TZXR1cEZ1bmMiLCJtaW5Mb2MiLCJnZXRVbmlmb3JtTG9jYXRpb25Ob1Rocm93IiwibWF4TG9jIiwiZ2wiLCJ1bmlmb3JtMWYiLCJmYSIsImRhIiwidmEiLCJtYSIsImdhIiwieWEiLCJ4YSIsImJhIiwid2EiLCJDYSIsIkVhIiwiUmEiLCJJYSIsImthIiwiTmEiLCJTYSIsIkFhIiwiVGEiLCJEYSIsIl9hIiwiYmxvY2tTaXplIiwiZ2V0SGVpZ2h0Q29vcmRTdHJpbmciLCJnZXRXaWR0aENvb3JkU3RyaW5nIiwiZ2V0RGVwdGhDb29yZFN0cmluZyIsImdldE91dHB1dERlcHRoU2l6ZSIsImdldElucHV0U2FtcGxpbmdTdHJpbmciLCJPYSIsIkZhIiwiTWEiLCJCYSIsIlBhIiwiVWEiLCJWYSIsInZhbHVlTG9jIiwiemEiLCJHYSIsIkhhIiwicWEiLCJzbGljZURpbSIsIiRhIiwiS2EiLCJqYSIsIlVpbnQxNkFycmF5IiwiWGEiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJDTEFNUF9UT19FREdFIiwiVEVYVFVSRV9XUkFQX1QiLCJURVhUVVJFX01JTl9GSUxURVIiLCJORUFSRVNUIiwiVEVYVFVSRV9NQUdfRklMVEVSIiwiWWEiLCJRYSIsIkphIiwiVU5TSUdORURfQllURSIsIlphIiwidGkiLCJlaSIsIm5pIiwicmkiLCJvaSIsIlBJWEVMX1BBQ0tfQlVGRkVSIiwiU1RSRUFNX1JFQUQiLCJyZWFkUGl4ZWxzIiwiYWkiLCJnZXRCdWZmZXJTdWJEYXRhIiwiaWkiLCJzaSIsInVpIiwibGkiLCJjcmVhdGVWZXJ0ZXhCdWZmZXIiLCJjcmVhdGVJbmRleEJ1ZmZlciIsImNyZWF0ZUZsb2F0MzJNYXRyaXhUZXh0dXJlIiwiY3JlYXRlRmxvYXQxNk1hdHJpeFRleHR1cmUiLCJjcmVhdGVVbnNpZ25lZEJ5dGVzTWF0cml4VGV4dHVyZSIsImNyZWF0ZVBhY2tlZE1hdHJpeFRleHR1cmUiLCJjcmVhdGVGbG9hdDE2UGFja2VkTWF0cml4VGV4dHVyZSIsImJpbmRWZXJ0ZXhQcm9ncmFtQXR0cmlidXRlU3RyZWFtcyIsInVwbG9hZERlbnNlTWF0cml4VG9UZXh0dXJlIiwidXBsb2FkUGl4ZWxEYXRhVG9UZXh0dXJlIiwiY3JlYXRlQnVmZmVyRnJvbU91dHB1dFRleHR1cmUiLCJkb3dubG9hZEZsb2F0MzJNYXRyaXhGcm9tQnVmZmVyIiwiZG93bmxvYWRCeXRlRW5jb2RlZEZsb2F0TWF0cml4RnJvbU91dHB1dFRleHR1cmUiLCJkb3dubG9hZFBhY2tlZE1hdHJpeEZyb21CdWZmZXIiLCJkb3dubG9hZE1hdHJpeEZyb21QYWNrZWRPdXRwdXRUZXh0dXJlIiwiY2kiLCJvdXRwdXRUZXh0dXJlIiwicHJvZ3JhbSIsImRpc3Bvc2VkIiwidmVydGV4QXR0cnNBcmVCb3VuZCIsIml0ZW1zVG9Qb2xsIiwidGV4dHVyZUZsb2F0RXh0ZW5zaW9uIiwiZGVidWciLCJjb2xvckJ1ZmZlckZsb2F0RXh0ZW5zaW9uIiwidGV4dHVyZUhhbGZGbG9hdEV4dGVuc2lvbiIsImNvbG9yQnVmZmVySGFsZkZsb2F0RXh0ZW5zaW9uIiwidmVydGV4QnVmZmVyIiwiaW5kZXhCdWZmZXIiLCJmcmFtZWJ1ZmZlciIsInRleHR1cmVDb25maWciLCJmaW5pc2giLCJkZWxldGVCdWZmZXIiLCJkZWxldGVNYXRyaXhUZXh0dXJlIiwiZG93bmxvYWRNYXRyaXhEcml2ZXIiLCJjcmVhdGVCdWZmZXJGcm9tVGV4dHVyZSIsImJpbmRUZXh0dXJlVG9GcmFtZUJ1ZmZlciIsInVuYmluZFRleHR1cmVUb0ZyYW1lQnVmZmVyIiwiY3JlYXRlQW5kV2FpdEZvckZlbmNlIiwiY3JlYXRlRmVuY2UiLCJwb2xsRmVuY2UiLCJTWU5DX0dQVV9DT01NQU5EU19DT01QTEVURSIsImZsdXNoIiwiY2xpZW50V2FpdFN5bmMiLCJBTFJFQURZX1NJR05BTEVEIiwiQ09ORElUSU9OX1NBVElTRklFRCIsImJlZ2luUXVlcnkiLCJlbmRRdWVyeSIsImlzUXVlcnlBdmFpbGFibGUiLCJxdWVyeSIsImlzRmVuY2VQYXNzZWQiLCJkb3dubG9hZE1hdHJpeEZyb21QYWNrZWRUZXh0dXJlIiwiYXR0YWNoU2hhZGVyIiwic2V0UHJvZ3JhbSIsImRlbGV0ZVByb2dyYW0iLCJ1c2VQcm9ncmFtIiwiZ2V0QXR0cmlidXRlTG9jYXRpb24iLCJzZXRJbnB1dE1hdHJpeFRleHR1cmUiLCJ0aHJvd0lmTm9Qcm9ncmFtIiwic2V0T3V0cHV0TWF0cml4VGV4dHVyZSIsInNldE91dHB1dE1hdHJpeFRleHR1cmVEcml2ZXIiLCJzZXRPdXRwdXRQYWNrZWRNYXRyaXhUZXh0dXJlIiwic2V0T3V0cHV0TWF0cml4V3JpdGVSZWdpb24iLCJzZXRPdXRwdXRNYXRyaXhXcml0ZVJlZ2lvbkRyaXZlciIsInNldE91dHB1dFBhY2tlZE1hdHJpeFdyaXRlUmVnaW9uIiwiZGVidWdWYWxpZGF0ZSIsImV4ZWN1dGVQcm9ncmFtIiwiZHJhd0VsZW1lbnRzIiwiVFJJQU5HTEVTIiwiVU5TSUdORURfU0hPUlQiLCJibG9ja1VudGlsQWxsUHJvZ3JhbXNDb21wbGV0ZWQiLCJnZXRRdWVyeVRpbWVyRXh0ZW5zaW9uIiwiZGlzam9pbnRRdWVyeVRpbWVyRXh0ZW5zaW9uIiwiZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMiIsImdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDEiLCJjcmVhdGVRdWVyeSIsIlRJTUVfRUxBUFNFRF9FWFQiLCJjcmVhdGVRdWVyeUVYVCIsImJlZ2luUXVlcnlFWFQiLCJlbmRRdWVyeUVYVCIsIndhaXRGb3JRdWVyeUFuZEdldFRpbWUiLCJnZXRRdWVyeVRpbWUiLCJnZXRRdWVyeVBhcmFtZXRlciIsIlFVRVJZX1JFU1VMVCIsImdldFF1ZXJ5T2JqZWN0RVhUIiwiUVVFUllfUkVTVUxUX0VYVCIsIlFVRVJZX1JFU1VMVF9BVkFJTEFCTEUiLCJkaXNqb2ludCIsIkdQVV9ESVNKT0lOVF9FWFQiLCJRVUVSWV9SRVNVTFRfQVZBSUxBQkxFX0VYVCIsImFkZEl0ZW1Ub1BvbGwiLCJwb2xsSXRlbXMiLCJpc0RvbmVGbiIsInJlc29sdmVGbiIsImhpIiwidGV4RGF0YSIsInBpIiwiZmkiLCJkaSIsImRlcHRoUmFkaXVzIiwidmkiLCJtaSIsImdpIiwieWkiLCJ4aSIsInNlZWRMb2MiLCJiaSIsIndpIiwiQ2kiLCJFaSIsIlJpIiwiSWkiLCJraSIsIk5pIiwiU2kiLCJBaSIsIlRpIiwiRGkiLCJfaSIsIk9pIiwiRmkiLCJNaSIsIkJpIiwibnVtU2VnbWVudHMiLCJQaSIsIkxpIiwiV2kiLCJzdGFydExvYyIsInVuaWZvcm0xaXYiLCJVaSIsIlZpIiwiemkiLCJncGdwdSIsIm51bVVzZWRUZXh0dXJlcyIsIm51bUZyZWVUZXh0dXJlcyIsImZyZWVUZXh0dXJlcyIsImxvZ0VuYWJsZWQiLCJ1c2VkVGV4dHVyZXMiLCJhY3F1aXJlVGV4dHVyZSIsIkdpIiwiSGkiLCJzaGlmdCIsInJlbGVhc2VUZXh0dXJlIiwiZ2V0TnVtVXNlZFRleHR1cmVzIiwiZ2V0TnVtRnJlZVRleHR1cmVzIiwicWkiLCIkaSIsIktpIiwiamkiLCJYaSIsIllpIiwiUWkiLCJKaSIsIlppIiwidHMiLCJlcyIsInJzIiwib3MiLCJhcyIsImlzIiwic3MiLCJmcyIsImRzIiwidnMiLCJtcyIsImdzIiwieXMiLCJ4cyIsImJzIiwid3MiLCJDcyIsInBlbmRpbmdSZWFkIiwicGVuZGluZ0Rpc3Bvc2FsIiwiV2Vha1NldCIsImRhdGFSZWZDb3VudCIsIm51bUJ5dGVzSW5HUFUiLCJ1cGxvYWRXYWl0TXMiLCJkb3dubG9hZFdhaXRNcyIsIndhcm5lZEFib3V0TWVtb3J5IiwiYmluYXJ5Q2FjaGUiLCJncGdwdUNyZWF0ZWRMb2NhbGx5IiwidGV4dHVyZU1hbmFnZXIiLCJudW1NQkJlZm9yZVdhcm5pbmciLCJkZXZpY2VQaXhlbFJhdGlvIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJJbWFnZURhdGEiLCJIVE1MVmlkZW9FbGVtZW50IiwiSFRNTEltYWdlRWxlbWVudCIsInZpZGVvV2lkdGgiLCJ2aWRlb0hlaWdodCIsImZyb21QaXhlbHMyRENvbnRleHQiLCJkcmF3SW1hZ2UiLCJtYWtlVGVuc29ySGFuZGxlIiwidXNhZ2UiLCJnZXRUZXh0dXJlIiwibWFrZVBhY2tlZFRlbnNvciIsImNvbXBpbGVBbmRSdW4iLCJyZWxlYXNlR1BVRGF0YSIsImNvbXBsZXhUZW5zb3JzIiwiY29udmVydEFuZENhY2hlT25DUFUiLCJhY3RpdmVUaW1lcnMiLCJnZXRWYWx1ZXNGcm9tVGV4dHVyZSIsInRleHR1cmUiLCJwcm9ncmFtVGltZXJzU3RhY2siLCJzdGFydFRpbWVyIiwic3RhcnRNcyIsImVuZE1zIiwiZW5kVGltZXIiLCJvcmlnRGF0YUlkIiwiY29tcHV0ZUJ5dGVzIiwidXBsb2FkVG9HUFUiLCJnZXREYXRhSW5mbyIsImdldENQVUJhY2tlbmQiLCJjcHVCYWNrZW5kIiwic2hvdWxkRXhlY3V0ZU9uQ1BVIiwiZ2V0R1BHUFVDb250ZXh0IiwibWFrZU91dHB1dEFycmF5Iiwic2hhbGxvd1NsaWNlIiwicGFja2VkVW5hcnlPcCIsIm1ha2VDb21wbGV4Q29tcG9uZW50VGVuc29ySGFuZGxlIiwicGFja2VkQmluYXJ5T3AiLCJhcmdSZWR1Y2UiLCJhcmdSZWR1Y2VQYWNrZWQiLCJzZWdPcENvbXB1dGUiLCJhcmdNaW5NYXhSZWR1Y2UiLCJjb21wbGV4U2VwYXJhYmxlQmluYXJ5T3AiLCJjb252MmRCeU1hdE11bCIsImNvbnYyZFdpdGhJbTJSb3ciLCJwYWNrZWRSZXNoYXBlIiwiZmZ0SW1wbCIsInVucGFja1RlbnNvciIsInBhY2tUZW5zb3IiLCJ1bmlmb3JtVmFsdWVzIiwiZ2V0QW5kU2F2ZUJpbmFyeSIsInNvdXJjZSIsIndlYkdMUHJvZ3JhbSIsInVuaWZvcm1Mb2NhdGlvbnMiLCJpblNoYXBlSW5mb3MiLCJvdXRTaGFwZUluZm8iLCJpbmZMb2MiLCJuYW5Mb2MiLCJ1bmlmb3JtMWZ2IiwiZ2V0VGV4dHVyZU1hbmFnZXIiLCJyZW1vdmUiLCJmbG9hdFByZWNpc2lvblZhbHVlIiwiRXMiLCJhYnNfIiwiUnMiLCJhY29zXyIsIklzIiwiYWNvc2hfIiwia3MiLCJhc2luXyIsIk5zIiwiYXNpbmhfIiwiU3MiLCJhdGFuXyIsIkFzIiwiYXRhbmhfIiwiVHMiLCJjZWlsXyIsIkRzIiwiY2xpcEJ5VmFsdWVfIiwiX3MiLCJjb3NfIiwiT3MiLCJjb3NoXyIsIkZzIiwiZXJmXyIsIk1zIiwiZXhwXyIsIkJzIiwiZXhwbTFfIiwiUHMiLCJmbG9vcl8iLCJMcyIsImxvZ18iLCJXcyIsImxvZzFwXyIsIlVzIiwibG9nU2lnbW9pZF8iLCJWcyIsIm5lZ18iLCJ6cyIsInJlY2lwcm9jYWxfIiwiR3MiLCJyb3VuZF8iLCJIcyIsInJzcXJ0XyIsInFzIiwic2lnbW9pZF8iLCIkcyIsInNpZ25fIiwiS3MiLCJpc05hTl8iLCJqcyIsImlzSW5mXyIsIlhzIiwiaXNGaW5pdGVfIiwiWXMiLCJzaW5fIiwiUXMiLCJzaW5oXyIsIkpzIiwic29mdHBsdXNfIiwiWnMiLCJzcXJ0XyIsInR1Iiwic3F1YXJlXyIsImV1Iiwic3RlcF8iLCJudSIsInRhbl8iLCJydSIsInRhbmhfIiwib3UiLCJzdSIsImF1IiwiaXUiLCJ1dSIsIiRtZWFuIiwiJHZhcmlhbmNlIiwiJHNjYWxlIiwiJG9mZnNldCIsImx1IiwiY3UiLCJiYXRjaE5vcm1hbGl6YXRpb24yZF8iLCJodSIsImJhdGNoTm9ybWFsaXphdGlvbjNkXyIsInB1IiwiYmF0Y2hOb3JtYWxpemF0aW9uNGRfIiwiZnUiLCJiYXRjaE5vcm1hbGl6YXRpb25fIiwiZHUiLCJiYXRjaE5vcm1fIiwidnUiLCJiYXRjaE5vcm0yZF8iLCJtdSIsImJhdGNoTm9ybTNkXyIsImd1IiwiYmF0Y2hOb3JtNGRfIiwieXUiLCJsb2dpY2FsQW5kXyIsIiRiIiwieHUiLCJsb2dpY2FsTm90XyIsImJ1IiwibG9naWNhbE9yXyIsInd1IiwibG9naWNhbFhvcl8iLCJDdSIsIndoZXJlXyIsIiRjb25kaXRpb24iLCJFdSIsIlJ1IiwiYWRkXyIsIkl1IiwiYWRkTl8iLCJrdSIsImFkZFN0cmljdF8iLCJOdSIsImF0YW4yXyIsIlN1IiwiZGl2XyIsIlR1IiwiQXUiLCJkaXZTdHJpY3RfIiwiZmxvb3JEaXZfIiwiRHUiLCJtYXhpbXVtXyIsIl91IiwibWF4aW11bVN0cmljdF8iLCJPdSIsIm1pbmltdW1fIiwiRnUiLCJtaW5pbXVtU3RyaWN0XyIsIk11IiwibW9kXyIsIkJ1IiwibW9kU3RyaWN0XyIsIlB1IiwibXVsXyIsIkx1IiwibXVsU3RyaWN0XyIsIld1IiwicG93XyIsIiRiYXNlIiwiJGV4cCIsIlV1IiwicG93U3RyaWN0XyIsIlZ1Iiwic3F1YXJlZERpZmZlcmVuY2VfIiwienUiLCJzcXVhcmVkRGlmZmVyZW5jZVN0cmljdF8iLCJHdSIsInN1Yl8iLCJIdSIsInN1YlN0cmljdF8iLCJxdSIsImVxdWFsXyIsIiR1IiwiZXF1YWxTdHJpY3RfIiwiS3UiLCJncmVhdGVyXyIsImp1IiwiZ3JlYXRlckVxdWFsXyIsIlh1IiwiZ3JlYXRlckVxdWFsU3RyaWN0XyIsIll1IiwiZ3JlYXRlclN0cmljdF8iLCJRdSIsImxlc3NfIiwiSnUiLCJsZXNzRXF1YWxfIiwiWnUiLCJsZXNzRXF1YWxTdHJpY3RfIiwidGwiLCJsZXNzU3RyaWN0XyIsImVsIiwibm90RXF1YWxfIiwibmwiLCJub3RFcXVhbFN0cmljdF8iLCJybCIsIm9sIiwiYWwiLCJnYXRoZXJfIiwiZGltU2l6ZSIsImlsIiwidW5zb3J0ZWRTZWdtZW50U3VtXyIsInNsIiwidWwiLCJkeTREIiwiZmwiLCJ2bCIsImxsIiwieDREIiwiY2wiLCJobCIsImR5NUQiLCJwbCIsImNvbnYxZF8iLCJjb252MmRfIiwiJGZpbHRlciIsImRsIiwiY29udjNkXyIsIng1RCIsImNvbnYyZERlckZpbHRlcl8iLCJtbCIsImNvbnYyZERlcklucHV0XyIsImRlcHRod2lzZUNvbnYyZF8iLCJ5bCIsInNlcGFyYWJsZUNvbnYyZF8iLCJ4bCIsImNvbnYyZFRyYW5zcG9zZV8iLCJibCIsImNvbnYzZFRyYW5zcG9zZV8iLCJ3bCIsIm1hdE11bF8iLCJDbCIsImRvdF8iLCJFbCIsIm91dGVyUHJvZHVjdF8iLCJSbCIsInJldmVyc2VfIiwiSWwiLCJyZXZlcnNlMWRfIiwia2wiLCJyZXZlcnNlMmRfIiwiTmwiLCJyZXZlcnNlM2RfIiwiU2wiLCJyZXZlcnNlNGRfIiwiQWwiLCIkZHkiLCJUbCIsImlucHV0NEQiLCJEbCIsIm1heFBvb2xfIiwiX2wiLCJhdmdQb29sXyIsIk9sIiwicG9vbF8iLCJGbCIsIm1heFBvb2wzZF8iLCJpbnB1dDVEIiwiTWwiLCJhdmdQb29sM2RfIiwiQmwiLCJzbGljZV8iLCJQbCIsInNsaWNlMWRfIiwiTGwiLCJzbGljZTJkXyIsIldsIiwic2xpY2UzZF8iLCJVbCIsInNsaWNlNGRfIiwiVmwiLCJ6bCIsImFsbF8iLCJHbCIsImFueV8iLCJIbCIsImFyZ01heF8iLCJxbCIsImFyZ01pbl8iLCIkbCIsImxvZ1N1bUV4cF8iLCJLbCIsIm1heF8iLCJqbCIsIm1lYW5fIiwiWGwiLCJtaW5fIiwiWWwiLCJtb21lbnRzXyIsInZhcmlhbmNlIiwiUWwiLCJzdW1fIiwiSmwiLCJwcm9kXyIsIlpsIiwiZWx1XyIsImR5IiwidGMiLCJsZWFreVJlbHVfIiwiZWMiLCJwcmVsdV8iLCIkYWxwaGEiLCJuYyIsInJlbHVfIiwicmMiLCJzZWx1XyIsIm9jIiwidHJhbnNwb3NlXyIsImFjIiwibG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb25fIiwiaWMiLCJub3JtXyIsInNjIiwiYmFzaWNMU1RNQ2VsbF8iLCJ1YyIsIm11bHRpUk5OQ2VsbF8iLCJsYyIsIm1vdmluZ0F2ZXJhZ2VfIiwiY2MiLCJzdHJpZGVkU2xpY2VfIiwiaGMiLCJ0b3BrXyIsImluZGljZXMiLCJwYyIsInNjYXR0ZXJORF8iLCJNciIsIiR1cGRhdGVzIiwiZmMiLCJmZnRfIiwiaW5wdXQiLCJkYyIsImlmZnRfIiwidmMiLCJyZmZ0XyIsIm1jIiwiaXJmZnRfIiwiZ2MiLCJ5YyIsInNwYXJzZVRvRGVuc2VfIiwiJHNwYXJzZUluZGljZXMiLCIkc3BhcnNlVmFsdWVzIiwiJGRlZmF1bHRWYWx1ZSIsInhjIiwiZ2F0aGVyTkRfIiwiYmMiLCJkaWFnXyIsIndjIiwiZHJvcG91dF8iLCJDYyIsIlNjIiwiRWMiLCJoYW5uV2luZG93XyIsIlJjIiwiaGFtbWluZ1dpbmRvd18iLCJJYyIsImZyYW1lXyIsImtjIiwic3RmdF8iLCJOYyIsImhhbm5XaW5kb3ciLCJoYW1taW5nV2luZG93IiwiZnJhbWUiLCJzdGZ0IiwiQWMiLCJOT05FIiwiTUVBTiIsIlNVTSIsIlNVTV9CWV9OT05aRVJPX1dFSUdIVFMiLCJUYyIsImFic29sdXRlRGlmZmVyZW5jZV8iLCJEYyIsImNvbXB1dGVXZWlnaHRlZExvc3NfIiwiX2MiLCJjb3NpbmVEaXN0YW5jZV8iLCJPYyIsImhpbmdlTG9zc18iLCJGYyIsImh1YmVyTG9zc18iLCJNYyIsImxvZ0xvc3NfIiwiQmMiLCJtZWFuU3F1YXJlZEVycm9yXyIsIlBjIiwic2lnbW9pZENyb3NzRW50cm9weV8iLCJMYyIsInNvZnRtYXhDcm9zc0VudHJvcHlfIiwiV2MiLCJhYnNvbHV0ZURpZmZlcmVuY2UiLCJjb21wdXRlV2VpZ2h0ZWRMb3NzIiwiY29zaW5lRGlzdGFuY2UiLCJoaW5nZUxvc3MiLCJodWJlckxvc3MiLCJsb2dMb3NzIiwibWVhblNxdWFyZWRFcnJvciIsInNpZ21vaWRDcm9zc0VudHJvcHkiLCJzb2Z0bWF4Q3Jvc3NFbnRyb3B5IiwiVWMiLCJWYyIsImdyYW1TY2htaWR0XyIsInpjIiwicXJfIiwiR2MiLCJncmFtU2NobWlkdCIsIkhjIiwiTkVHQVRJVkVfSU5GSU5JVFkiLCJtYXhPdXRwdXRTaXplIiwiaW91VGhyZXNob2xkIiwic2NvcmVUaHJlc2hvbGQiLCJxYyIsInJlc2l6ZUJpbGluZWFyXyIsImJhdGNoSW1hZ2VzIiwiJGMiLCJyZXNpemVOZWFyZXN0TmVpZ2hib3JfIiwiS2MiLCJub25NYXhTdXBwcmVzc2lvbl8iLCIkYm94ZXMiLCJYYyIsImNyb3BBbmRSZXNpemVfIiwiJGltYWdlIiwiWWMiLCJub25NYXhTdXBwcmVzc2lvbkFzeW5jIiwiUWMiLCIkYmlhcyIsIiRwcmVsdUFjdGl2YXRpb25XZWlnaHRzIiwiSmMiLCJkaWxhdGlvbnMiLCJkaW1Sb3VuZGluZ01vZGUiLCJaYyIsInRoIiwibGluYWxnIiwibG9zc2VzIiwiZnVzZWQiLCJzaWduYWwiLCJvcCIsImJhdGNoTm9ybWFsaXphdGlvbjJkIiwiYmF0Y2hOb3JtYWxpemF0aW9uM2QiLCJiYXRjaE5vcm1hbGl6YXRpb240ZCIsImJhdGNoTm9ybTJkIiwiYmF0Y2hOb3JtM2QiLCJiYXRjaE5vcm00ZCIsImJvb2xlYW5NYXNrQXN5bmMiLCJjb25jYXQxZCIsImNvbmNhdDJkIiwiY29uY2F0M2QiLCJjb25jYXQ0ZCIsImNvbnYzZFRyYW5zcG9zZSIsIm91dGVyUHJvZHVjdCIsInJldmVyc2UxZCIsInJldmVyc2UyZCIsInJldmVyc2UzZCIsInJldmVyc2U0ZCIsInNsaWNlMWQiLCJzbGljZTJkIiwic2xpY2UzZCIsInNsaWNlNGQiLCJtb21lbnRzIiwid2hlcmVBc3luYyIsImV5ZSIsInBhZDFkIiwicGFkMmQiLCJwYWQzZCIsInBhZDRkIiwicmFuZCIsInJhbmRvbU5vcm1hbCIsInJhbmRvbUdhbW1hIiwicmFuZG9tVW5pZm9ybSIsInRydW5jYXRlZE5vcm1hbCIsInNldGRpZmYxZEFzeW5jIiwib25lcyIsInNjYWxhciIsInRlbnNvciIsInRlbnNvcjFkIiwidGVuc29yMmQiLCJ0ZW5zb3IzZCIsInRlbnNvcjRkIiwidGVuc29yNWQiLCJ0ZW5zb3I2ZCIsInplcm9zIiwiYmFzaWNMU1RNQ2VsbCIsIm11bHRpUk5OQ2VsbCIsIm1vdmluZ0F2ZXJhZ2UiLCJkcm9wb3V0IiwiaW5Ub3BLQXN5bmMiLCJlaCIsImxpbmVhciIsIm5oIiwiZmlyc3RVc2UiLCJnZXRJbWFnZURhdGEiLCJhc3NlcnROb3RDb21wbGV4IiwiYnJvYWRjYXN0ZWRCaW5hcnlDb21wbGV4T3AiLCJicm9hZGNhc3RlZEJpbmFyeU9wIiwiaHlwb3QiLCJ0cnVuYyIsIlBPU0lUSVZFX0lORklOSVRZIiwibWF4UG9vbFBvc2l0aW9ucyIsInBvb2wzZCIsIm1heFBvb2wzZFBvc2l0aW9ucyIsImZmdEJhdGNoIiwiaXNFeHBvbmVudE9mMiIsImZmdFJhZGl4MiIsImZvdXJpZXJUcmFuc2Zvcm1CeU1hdG11bCIsInNjYXR0ZXIiLCJyaCIsInRleHRFbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJwZXJmb3JtYW5jZSIsIlRleHREZWNvZGVyIiwib2giLCJpaCIsInV0aWwiLCJocnRpbWUiLCJzaCIsInVpbnQxNiIsInVpbnQ4IiwidWgiLCJsaCIsInF1YW50aXphdGlvbiIsInNjYWxlIiwiY2giLCJieXRlTGVuZ3RoIiwiaGgiLCJCdWZmZXIiLCJCbG9iIiwiYXRvYiIsImJ0b2EiLCJwaCIsImZoIiwiZGgiLCJ0cmltIiwidmgiLCJtb2RlbFRvcG9sb2d5IiwiQXJyYXlCdWZmZXIiLCJkYXRlU2F2ZWQiLCJtb2RlbFRvcG9sb2d5VHlwZSIsIm1vZGVsVG9wb2xvZ3lCeXRlcyIsIndlaWdodFNwZWNzQnl0ZXMiLCJ3ZWlnaHRTcGVjcyIsIndlaWdodERhdGFCeXRlcyIsIndlaWdodERhdGEiLCJtaCIsInNhdmVSb3V0ZXJzIiwibG9hZFJvdXRlcnMiLCJnZXRJbnN0YW5jZSIsImluc3RhbmNlIiwicmVnaXN0ZXJTYXZlUm91dGVyIiwicmVnaXN0ZXJMb2FkUm91dGVyIiwiZ2V0U2F2ZUhhbmRsZXJzIiwiZ2V0SGFuZGxlcnMiLCJnZXRMb2FkSGFuZGxlcnMiLCJnaCIsInloIiwibWFuYWdlcnMiLCJyZWdpc3Rlck1hbmFnZXIiLCJnZXRNYW5hZ2VyIiwiZ2V0U2NoZW1lcyIsInhoIiwic2NoZW1lIiwicGF0aCIsImJoIiwibG9hZCIsInJlbW92ZU1vZGVsIiwic2F2ZSIsIm1vZGVsQXJ0aWZhY3RzSW5mbyIsIndoIiwiQ2giLCJFaCIsImluZGV4ZWREQiIsIm1vekluZGV4ZWREQiIsIndlYmtpdEluZGV4ZWREQiIsIm1zSW5kZXhlZERCIiwic2hpbUluZGV4ZWREQiIsIlJoIiwiY3JlYXRlT2JqZWN0U3RvcmUiLCJrZXlQYXRoIiwiSWgiLCJtb2RlbFBhdGgiLCJkYXRhYmFzZUFjdGlvbiIsIm9wZW4iLCJvbnVwZ3JhZGVuZWVkZWQiLCJvbnN1Y2Nlc3MiLCJ0cmFuc2FjdGlvbiIsIm9iamVjdFN0b3JlIiwiY2xvc2UiLCJtb2RlbEFydGlmYWN0cyIsIm9uZXJyb3IiLCJvbmNvbXBsZXRlIiwicHV0IiwiVVJMX1NDSEVNRSIsImtoIiwic3RhcnRzV2l0aCIsIk5oIiwibGlzdE1vZGVscyIsImdldEFsbCIsIlNoIiwiQWgiLCJUaCIsIkRoIiwiX2giLCJPaCIsIkZoIiwiTWgiLCJpbmZvIiwidG9wb2xvZ3kiLCJtb2RlbE1ldGFkYXRhIiwiQmgiLCJQaCIsImxvY2FsU3RvcmFnZSIsIkxTIiwic2V0SXRlbSIsImZvcm1hdCIsImdlbmVyYXRlZEJ5IiwiY29udmVydGVkQnkiLCJyZW1vdmVJdGVtIiwiZ2V0SXRlbSIsImJ5dGVPZmZzZXQiLCJMaCIsIldoIiwiVWgiLCJWaCIsInpoIiwiR2giLCJIaCIsIm1vZGVsVG9wb2xvZ3lGaWxlTmFtZSIsIndlaWdodERhdGFGaWxlTmFtZSIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInBhdGhzIiwid2VpZ2h0cyIsIndlaWdodHNNYW5pZmVzdCIsImpzb25BbmNob3IiLCJkb3dubG9hZCIsImhyZWYiLCJkaXNwYXRjaEV2ZW50IiwiTW91c2VFdmVudCIsIndlaWdodERhdGFBbmNob3IiLCJxaCIsImZpbGVzIiwiRmlsZVJlYWRlciIsIm9ubG9hZCIsInRhcmdldCIsImNoZWNrTWFuaWZlc3RBbmRXZWlnaHRGaWxlcyIsInJlYWRBc0FycmF5QnVmZmVyIiwicmVhZEFzVGV4dCIsIiRoIiwiS2giLCJmZXRjaEZ1bmMiLCJyZXF1ZXN0SW5pdCIsImlzQmluYXJ5Iiwib25Qcm9ncmVzcyIsImFycmF5QnVmZmVyIiwiamgiLCJtYW5pZmVzdEVudHJ5IiwiZ3JvdXBPZmZzZXQiLCJzaXplQnl0ZXMiLCJYaCIsIkRFRkFVTFRfTUVUSE9EIiwid2VpZ2h0UGF0aFByZWZpeCIsImJvZHkiLCJtZXRob2QiLCJGb3JtRGF0YSIsImFwcGVuZCIsIm9rIiwicmVzcG9uc2VzIiwic3RhdHVzIiwianNvbiIsImxvYWRXZWlnaHRzIiwibGFzdEluZGV4T2YiLCJVUkxfU0NIRU1FX1JFR0VYIiwiWWgiLCJtYXRjaCIsIlFoIiwiSmgiLCJaaCIsInRwIiwic2F2ZUhhbmRsZXIiLCJlcCIsImJyb3dzZXJGaWxlcyIsImJyb3dzZXJIVFRQUmVxdWVzdCIsImNvbmNhdGVuYXRlQXJyYXlCdWZmZXJzIiwiZGVjb2RlV2VpZ2h0cyIsImVuY29kZVdlaWdodHMiLCJncm91cCIsInNwZWNzIiwiZnJvbU1lbW9yeSIsInRyYWluaW5nQ29uZmlnIiwiZ2V0TW9kZWxBcnRpZmFjdHNJbmZvRm9ySlNPTiIsImh0dHAiLCJpc0hUVFBTY2hlbWUiLCJ3ZWlnaHRzTG9hZGVyRmFjdG9yeSIsIndpdGhTYXZlSGFuZGxlciIsImNvcHlNb2RlbCIsIm1vdmVNb2RlbCIsIm5wIiwiY29uZnVzaW9uTWF0cml4XyIsInJwIiwiY29uZnVzaW9uTWF0cml4IiwiZnJvbVBpeGVsc18iLCJyZWFkeVN0YXRlIiwiYXAiLCJ0b1BpeGVscyIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwicHV0SW1hZ2VEYXRhIiwiaXAiLCJnZXRDbGFzc05hbWUiLCJjbGFzc05hbWUiLCJmcm9tQ29uZmlnIiwic3AiLCJjbGFzc05hbWVNYXAiLCJnZXRNYXAiLCJ1cCIsImxwIiwiU2VyaWFsaXphYmxlIiwiU2VyaWFsaXphdGlvbk1hcCIsInJlZ2lzdGVyQ2xhc3MiLCJjcCIsImhwIiwicHAiLCJmcCIsImRwIiwidnAiLCJURVNUX0VQU0lMT05fRkxPQVQxNiIsImV4cGVjdEFycmF5c0Nsb3NlIiwidGVzdEVwc2lsb24iLCJleHBlY3RQcm9taXNlVG9GYWlsIiwiZmFpbCIsImV4cGVjdEFycmF5c0VxdWFsIiwiZXhwZWN0TnVtYmVyc0Nsb3NlIiwiZXhwZWN0VmFsdWVzSW5SYW5nZSIsImV4cGVjdEFycmF5QnVmZmVyc0VxdWFsIiwiZXhwZWN0IiwidG9FcXVhbCIsIm1wIiwiZ3AiLCJncGdwdV91dGlsIiwid2ViZ2xfdXRpbCIsImZvcmNlSGFsZkZsb2F0IiwiTWF0aEJhY2tlbmRXZWJHTCIsInNldFdlYkdMQ29udGV4dCIsIkdQR1BVQ29udGV4dCIsInlwIiwibWluaW1pemUiLCJjb21wdXRlR3JhZGllbnRzIiwiYXBwbHlHcmFkaWVudHMiLCJpdGVyYXRpb25zXyIsImluY3JlbWVudEl0ZXJhdGlvbnMiLCJpdGVyYXRpb25zIiwic2F2ZUl0ZXJhdGlvbnMiLCJnZXRXZWlnaHRzIiwic2V0V2VpZ2h0cyIsImV4dHJhY3RJdGVyYXRpb25zIiwieHAiLCJsZWFybmluZ1JhdGUiLCJyaG8iLCJhY2N1bXVsYXRlZEdyYWRzIiwiYWNjdW11bGF0ZWRVcGRhdGVzIiwib3JpZ2luYWxOYW1lIiwiZ2V0Q29uZmlnIiwiYnAiLCJpbml0aWFsQWNjdW11bGF0b3JWYWx1ZSIsIndwIiwiYmV0YTEiLCJiZXRhMiIsImFjY3VtdWxhdGVkRmlyc3RNb21lbnQiLCJhY2N1bXVsYXRlZFNlY29uZE1vbWVudCIsImFjY0JldGExIiwiYWNjQmV0YTIiLCJDcCIsImRlY2F5IiwiYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm0iLCJpdGVyYXRpb24iLCJFcCIsInNldExlYXJuaW5nUmF0ZSIsIlJwIiwibW9tZW50dW0iLCJ1c2VOZXN0ZXJvdiIsImFjY3VtdWxhdGlvbnMiLCJzZXRNb21lbnR1bSIsIklwIiwiYWNjdW11bGF0ZWRNZWFuU3F1YXJlcyIsImFjY3VtdWxhdGVkTW9tZW50cyIsImFjY3VtdWxhdGVkTWVhbkdyYWRzIiwiY2VudGVyZWQiLCJrcCIsInNnZCIsInJtc3Byb3AiLCJhZGFtIiwiYWRhZGVsdGEiLCJhZGFtYXgiLCJhZGFncmFkIiwiTnAiLCJTcCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInNldEltbWVkaWF0ZSIsIkFwIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsImNsZWFyVGltZW91dCIsImN1cnJlbnRRdWV1ZSIsInF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsInRpbWVvdXQiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibm9vcCIsIm5leHRUaWNrIiwiYXJncyIsInRpdGxlIiwiYnJvd3NlciIsImVudiIsImFyZ3YiLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImN3ZCIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJiYXNlNjQiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJ0aGF0IiwiUmFuZ2VFcnJvciIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsInVuZGVmaW5lZCIsImZyb21BcnJheUxpa2UiLCJmcm9tQXJyYXlCdWZmZXIiLCJzdHJpbmciLCJlbmNvZGluZyIsImlzRW5jb2RpbmciLCJhY3R1YWwiLCJmcm9tU3RyaW5nIiwib2JqIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwiY29weSIsInZhbCIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwiaXNWaWV3IiwibG93ZXJlZENhc2UiLCJ1dGY4VG9CeXRlcyIsImJhc2U2NFRvQnl0ZXMiLCJzbG93VG9TdHJpbmciLCJzdGFydCIsImVuZCIsImhleFNsaWNlIiwidXRmOFNsaWNlIiwiYXNjaWlTbGljZSIsImxhdGluMVNsaWNlIiwiYmFzZTY0U2xpY2UiLCJ1dGYxNmxlU2xpY2UiLCJzd2FwIiwiYmlkaXJlY3Rpb25hbEluZGV4T2YiLCJhcnJheUluZGV4T2YiLCJhcnIiLCJpbmRleFNpemUiLCJhcnJMZW5ndGgiLCJ2YWxMZW5ndGgiLCJidWYiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsIm9mZnNldCIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInBhcnNlSW50IiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJzdHIiLCJieXRlQXJyYXkiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidW5pdHMiLCJ1dGYxNmxlVG9CeXRlcyIsImZyb21CeXRlQXJyYXkiLCJyZXMiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJmb28iLCJ0eXBlZEFycmF5U3VwcG9ydCIsInBvb2xTaXplIiwiX2F1Z21lbnQiLCJzcGVjaWVzIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsImxpc3QiLCJwb3MiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJlcXVhbHMiLCJpbnNwZWN0IiwidGhpc1N0YXJ0IiwidGhpc0VuZCIsInRoaXNDb3B5IiwidGFyZ2V0Q29weSIsImluY2x1ZGVzIiwidG9KU09OIiwiX2FyciIsInJldCIsIm91dCIsInRvSGV4IiwiY2hlY2tPZmZzZXQiLCJleHQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29kZSIsIklOVkFMSURfQkFTRTY0X1JFIiwiSW5maW5pdHkiLCJsZWFkU3Vycm9nYXRlIiwidG9CeXRlQXJyYXkiLCJzdHJpbmd0cmltIiwiYmFzZTY0Y2xlYW4iLCJzcmMiLCJkc3QiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwiZXh0cmFCeXRlcyIsInBhcnRzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJMTjIiLCJUaW1lb3V0IiwiY2xlYXJGbiIsIl9pZCIsIl9jbGVhckZuIiwic2NvcGUiLCJzZXRJbnRlcnZhbCIsImNsZWFySW50ZXJ2YWwiLCJ1bnJlZiIsInJlZiIsImVucm9sbCIsIml0ZW0iLCJtc2VjcyIsIl9pZGxlVGltZW91dElkIiwiX2lkbGVUaW1lb3V0IiwidW5lbnJvbGwiLCJfdW5yZWZBY3RpdmUiLCJhY3RpdmUiLCJfb25UaW1lb3V0IiwiY2xlYXJJbW1lZGlhdGUiLCJyZWdpc3RlckltbWVkaWF0ZSIsImh0bWwiLCJjaGFubmVsIiwibWVzc2FnZVByZWZpeCIsIm9uR2xvYmFsTWVzc2FnZSIsIm5leHRIYW5kbGUiLCJ0YXNrc0J5SGFuZGxlIiwiY3VycmVudGx5UnVubmluZ0FUYXNrIiwiZG9jIiwiYXR0YWNoVG8iLCJnZXRQcm90b3R5cGVPZiIsImhhbmRsZSIsInJ1bklmUHJlc2VudCIsInBvc3RNZXNzYWdlIiwiaW1wb3J0U2NyaXB0cyIsInBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMiLCJvbGRPbk1lc3NhZ2UiLCJvbm1lc3NhZ2UiLCJjYW5Vc2VQb3N0TWVzc2FnZSIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDEiLCJldmVudCIsInBvcnQyIiwiZG9jdW1lbnRFbGVtZW50Iiwic2NyaXB0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsImF0dGFjaEV2ZW50IiwiY2FsbGJhY2siLCJ0YXNrIiwiVmVjdG9yIiwiaGFuZGxlUmFuayIsImRpbSIsIlRlbnNvciIsImJfIiwidDIiLCJjcmVhdGVUZW5zb3IiLCJwNSIsInRmYyJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksSSwrQkNsRnJEOzs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQSxJQUFJYixFQUFFLFNBQVNjLEVBQUVQLEdBQUcsT0FBT1AsRUFBRVIsT0FBT3VCLGdCQUFnQixDQUFDQyxVQUFVLGNBQWNDLE9BQU8sU0FBU2pCLEVBQUVjLEdBQUdkLEVBQUVnQixVQUFVRixJQUFJLFNBQVNkLEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxLQUFLTyxFQUFFQSxFQUFFSCxlQUFlSixLQUFLUCxFQUFFTyxHQUFHTyxFQUFFUCxNQUFNTyxFQUFFUCxJQUFJLFNBQVNPLEVBQUVBLEVBQUVQLEdBQUcsU0FBU1gsSUFBSXNCLEtBQUtDLFlBQVlMLEVBQUVkLEVBQUVjLEVBQUVQLEdBQUdPLEVBQUVKLFVBQVUsT0FBT0gsRUFBRWYsT0FBT1ksT0FBT0csSUFBSVgsRUFBRWMsVUFBVUgsRUFBRUcsVUFBVSxJQUFJZCxHQUFHLFNBQVNXLEVBQUVQLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsT0FBTyxJQUFJVyxJQUFJQSxFQUFFYSxXQUFVLFNBQVM3QixFQUFFOEIsR0FBRyxTQUFTdkMsRUFBRWtCLEdBQUcsSUFBSXNCLEVBQUUxQixFQUFFMkIsS0FBS3ZCLElBQUksTUFBTUEsR0FBR3FCLEVBQUVyQixJQUFJLFNBQVNhLEVBQUViLEdBQUcsSUFBSXNCLEVBQUUxQixFQUFFNEIsTUFBTXhCLElBQUksTUFBTUEsR0FBR3FCLEVBQUVyQixJQUFJLFNBQVNzQixFQUFFdEIsR0FBR0EsRUFBRXlCLEtBQUtsQyxFQUFFUyxFQUFFRCxPQUFPLElBQUlRLEdBQUUsU0FBU08sR0FBR0EsRUFBRWQsRUFBRUQsVUFBUzJCLEtBQUs1QyxFQUFFK0IsR0FBR1MsR0FBRzFCLEVBQUVBLEVBQUUrQixNQUFNM0IsRUFBRWMsR0FBRyxLQUFLUyxXQUFVLFNBQVMzQixFQUFFSSxFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsRUFBRSxDQUFDOEMsTUFBTSxFQUFFQyxLQUFLLFdBQVcsR0FBRyxFQUFFdEMsRUFBRSxHQUFHLE1BQU1BLEVBQUUsR0FBRyxPQUFPQSxFQUFFLElBQUl1QyxLQUFLLEdBQUdDLElBQUksSUFBSSxPQUFPVixFQUFFLENBQUNFLEtBQUtWLEVBQUUsR0FBR1csTUFBTVgsRUFBRSxHQUFHbUIsT0FBT25CLEVBQUUsSUFBSSxtQkFBbUJoQixTQUFTd0IsRUFBRXhCLE9BQU9vQyxVQUFVLFdBQVcsT0FBT2YsT0FBT0csRUFBRSxTQUFTUixFQUFFUSxHQUFHLE9BQU8sU0FBU1IsR0FBRyxPQUFPLFNBQVNRLEdBQUcsR0FBR2QsRUFBRSxNQUFNLElBQUkyQixVQUFVLG1DQUFtQyxLQUFLcEQsR0FBRyxJQUFJLEdBQUd5QixFQUFFLEVBQUVYLElBQUlMLEVBQUUsRUFBRThCLEVBQUUsR0FBR3pCLEVBQUVvQyxPQUFPWCxFQUFFLEdBQUd6QixFQUFFNEIsU0FBU2pDLEVBQUVLLEVBQUVvQyxTQUFTekMsRUFBRU4sS0FBS1csR0FBRyxHQUFHQSxFQUFFMkIsU0FBU2hDLEVBQUVBLEVBQUVOLEtBQUtXLEVBQUV5QixFQUFFLEtBQUtJLEtBQUssT0FBT2xDLEVBQUUsT0FBT0ssRUFBRSxFQUFFTCxJQUFJOEIsRUFBRSxDQUFDLEVBQUVBLEVBQUUsR0FBRzlCLEVBQUVRLFFBQVFzQixFQUFFLElBQUksS0FBSyxFQUFFLEtBQUssRUFBRTlCLEVBQUU4QixFQUFFLE1BQU0sS0FBSyxFQUFFLE9BQU92QyxFQUFFOEMsUUFBUSxDQUFDN0IsTUFBTXNCLEVBQUUsR0FBR0ksTUFBSyxHQUFJLEtBQUssRUFBRTNDLEVBQUU4QyxRQUFRaEMsRUFBRXlCLEVBQUUsR0FBR0EsRUFBRSxDQUFDLEdBQUcsU0FBUyxLQUFLLEVBQUVBLEVBQUV2QyxFQUFFaUQsSUFBSUksTUFBTXJELEVBQUVnRCxLQUFLSyxNQUFNLFNBQVMsUUFBUSxLQUFLNUMsR0FBR0EsRUFBRVQsRUFBRWdELE1BQU1NLE9BQU8sR0FBRzdDLEVBQUVBLEVBQUU2QyxPQUFPLE1BQU0sSUFBSWYsRUFBRSxJQUFJLElBQUlBLEVBQUUsSUFBSSxDQUFDdkMsRUFBRSxFQUFFLFNBQVMsR0FBRyxJQUFJdUMsRUFBRSxNQUFNOUIsR0FBRzhCLEVBQUUsR0FBRzlCLEVBQUUsSUFBSThCLEVBQUUsR0FBRzlCLEVBQUUsSUFBSSxDQUFDVCxFQUFFOEMsTUFBTVAsRUFBRSxHQUFHLE1BQU0sR0FBRyxJQUFJQSxFQUFFLElBQUl2QyxFQUFFOEMsTUFBTXJDLEVBQUUsR0FBRyxDQUFDVCxFQUFFOEMsTUFBTXJDLEVBQUUsR0FBR0EsRUFBRThCLEVBQUUsTUFBTSxHQUFHOUIsR0FBR1QsRUFBRThDLE1BQU1yQyxFQUFFLEdBQUcsQ0FBQ1QsRUFBRThDLE1BQU1yQyxFQUFFLEdBQUdULEVBQUVpRCxJQUFJTSxLQUFLaEIsR0FBRyxNQUFNOUIsRUFBRSxJQUFJVCxFQUFFaUQsSUFBSUksTUFBTXJELEVBQUVnRCxLQUFLSyxNQUFNLFNBQVNkLEVBQUVQLEVBQUU3QixLQUFLZSxFQUFFbEIsR0FBRyxNQUFNa0IsR0FBR3FCLEVBQUUsQ0FBQyxFQUFFckIsR0FBR0osRUFBRSxFQUFFLFFBQVFXLEVBQUVoQixFQUFFLEVBQUUsR0FBRyxFQUFFOEIsRUFBRSxHQUFHLE1BQU1BLEVBQUUsR0FBRyxNQUFNLENBQUN0QixNQUFNc0IsRUFBRSxHQUFHQSxFQUFFLFFBQUcsRUFBT0ksTUFBSyxHQUFqeEIsQ0FBc3hCLENBQUNKLEVBQUVSLE1BQU0sSUFBSXRCLEVBQUUsV0FBVyxTQUFTUyxFQUFFQSxHQUFHa0IsS0FBS29CLE9BQU90QyxFQUFFa0IsS0FBS3FCLE1BQU0sR0FBR3JCLEtBQUtzQixhQUFhLEdBQUd0QixLQUFLdUIsU0FBUyxHQUFHdkIsS0FBS3dCLG1CQUFtQixPQUFPMUMsRUFBRVUsVUFBVWlDLFlBQVksU0FBUzNDLEVBQUVjLEdBQUcsTUFBTUksS0FBSzBCLFVBQVVDLFFBQVFDLEtBQUssWUFBWTVCLEtBQUs2QixhQUFhLHdEQUF3RGpDLEVBQUUsS0FBS0ksS0FBSzZCLGFBQWEvQyxFQUFFa0IsS0FBSzBCLFNBQVM5QixHQUFHZCxFQUFFVSxVQUFVc0MsYUFBYSxTQUFTaEQsRUFBRWMsRUFBRVAsR0FBRyxHQUFHVyxLQUFLc0IsYUFBYXhDLEdBQUcsQ0FBQ2lELGFBQWFuQyxFQUFFb0MsUUFBUTNDLEdBQUcsTUFBTVcsS0FBS3VCLFNBQVN6QyxHQUFHLENBQUMsSUFBSUosRUFBRXNCLEtBQUt1QixTQUFTekMsR0FBRzZDLFFBQVFDLEtBQUsscUNBQXFDOUMsRUFBRSxLQUFLSixFQUFFLEtBQUtzQixLQUFLaUMsSUFBSW5ELEVBQUVKLEtBQUtJLEVBQUVVLFVBQVVmLElBQUksU0FBU0ssR0FBRyxPQUFPQSxLQUFLa0IsS0FBS3FCLE1BQU1yQixLQUFLcUIsTUFBTXZDLElBQUlrQixLQUFLcUIsTUFBTXZDLEdBQUdrQixLQUFLa0MsYUFBYXBELEdBQUdrQixLQUFLcUIsTUFBTXZDLEtBQUtBLEVBQUVVLFVBQVUyQyxVQUFVLFNBQVNyRCxHQUFHLE9BQU9rQixLQUFLdkIsSUFBSUssSUFBSUEsRUFBRVUsVUFBVTRDLFFBQVEsU0FBU3RELEdBQUcsT0FBT2tCLEtBQUt2QixJQUFJSyxJQUFJQSxFQUFFVSxVQUFVNkMsU0FBUyxXQUFXLE9BQU9yQyxLQUFLcUIsT0FBTy9DLE9BQU9DLGVBQWVPLEVBQUVVLFVBQVUsV0FBVyxDQUFDZixJQUFJLFdBQVcsT0FBT3VCLEtBQUtxQixPQUFPN0MsWUFBVyxFQUFHOEQsY0FBYSxJQUFLeEQsRUFBRVUsVUFBVXlDLElBQUksU0FBU25ELEVBQUVjLEdBQUcsR0FBRyxNQUFNSSxLQUFLc0IsYUFBYXhDLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSxtQkFBbUJ6RCxFQUFFLG1DQUFtQ2tCLEtBQUtxQixNQUFNdkMsR0FBR2MsRUFBRSxNQUFNSSxLQUFLc0IsYUFBYXhDLEdBQUdrRCxTQUFTaEMsS0FBS3NCLGFBQWF4QyxHQUFHa0QsUUFBUXBDLElBQUlkLEVBQUVVLFVBQVUwQyxhQUFhLFNBQVNwRCxHQUFHLEdBQUcsTUFBTWtCLEtBQUtzQixhQUFheEMsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHlCQUF5QnpELEVBQUUsb0NBQW9DLE9BQU9rQixLQUFLc0IsYUFBYXhDLEdBQUdpRCxnQkFBZ0JqRCxFQUFFVSxVQUFVZ0QsU0FBUyxTQUFTMUQsR0FBR2tCLEtBQUtxQixNQUFNL0MsT0FBT21FLE9BQU8sR0FBRzNELElBQUlBLEVBQUVVLFVBQVVrRCxNQUFNLFdBQVcxQyxLQUFLcUIsTUFBTSxHQUFHckIsS0FBS3VCLFNBQVMsR0FBR3ZCLEtBQUt3QixvQkFBb0IxQyxFQUFFVSxVQUFVZ0MsaUJBQWlCLFdBQVcsSUFBSTFDLEVBQUVrQixLQUFLLFFBQUcsSUFBU0EsS0FBS29CLGFBQVEsSUFBU3BCLEtBQUtvQixPQUFPdUIsZUFBVSxJQUFTM0MsS0FBS29CLE9BQU91QixTQUFTQyxPQUFPLENBQUMsSUFBSWhELEVBQUVPLEVBQUVILEtBQUtvQixPQUFPdUIsU0FBU0MsUUFBVyxjQUFjaEQsR0FBRUEsRUFBRWlELFVBQVVDLE1BQU0sS0FBS0MsU0FBUSxTQUFTbkQsR0FBRyxJQUFJUCxFQUFFTyxFQUFFa0QsTUFBTSxLQUFLcEUsRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBR1AsRUFBRXlDLFNBQVM3QyxHQUFHLFNBQVNJLEVBQUVjLEdBQUcsR0FBRyxVQUFVQSxFQUFFQSxFQUFFb0QsZ0JBQWdCLFVBQVVwRCxFQUFFLE1BQU0sU0FBU0EsRUFBRSxHQUFHLEtBQUtBLElBQUlBLEVBQUUsT0FBT0EsRUFBRSxNQUFNLElBQUkyQyxNQUFNLG9DQUFvQzNDLEVBQUUsYUFBYWQsRUFBRSxLQUF4SyxDQUE4S0osRUFBRUwsUUFBT1MsRUFBeDZELEdBQTY2RCxTQUFTcUIsRUFBRXJCLEdBQUcsSUFBSWMsRUFBRSxHQUFHLE9BQU9kLEVBQUVtRSxRQUFRLCtCQUE4QixTQUFTbkUsR0FBRyxJQUFJLElBQUlPLEVBQUUsR0FBR1gsRUFBRSxFQUFFQSxFQUFFd0UsVUFBVWhDLE9BQU94QyxJQUFJVyxFQUFFWCxFQUFFLEdBQUd3RSxVQUFVeEUsR0FBRyxPQUFPLFNBQVNJLEVBQUVjLEVBQUVQLEdBQUdQLEVBQUVxRSxtQkFBbUJ2RCxJQUFJdUQsbUJBQW1COUQsR0FBRyxJQUEvRCxDQUFvRU8sRUFBRVAsRUFBRSxHQUFHQSxFQUFFLElBQUlBLEVBQUUrRCxLQUFLLFFBQU94RCxFQUFFLElBQUloQyxFQUFFLEtBQUssU0FBUytCLEVBQUViLEdBQUdsQixFQUFFa0IsRUFBRSxJQUFJc0IsRUFBRTlCLE9BQU8rRSxPQUFPLENBQUNDLFlBQVlqRixFQUFFa0YsZUFBZXBELEVBQUUsVUFBVSxPQUFPdkMsR0FBRzRGLHFCQUFxQjdELElBQUksU0FBUzlCLEVBQUVpQixHQUFHLElBQUksSUFBSWMsRUFBRWQsRUFBRW9DLE9BQU83QixFQUFFLEVBQUVYLEVBQUUsRUFBRWtCLEVBQUUsR0FBR2xCLEVBQUUrRSxLQUFLQyxTQUFTOUQsRUFBRSxFQUFFUCxFQUFFUCxJQUFJYyxHQUFHZCxFQUFFYyxHQUFHZCxFQUFFSixHQUFHSSxFQUFFSixHQUFHVyxFQUFFLFNBQVNwQixFQUFFYSxFQUFFYyxFQUFFUCxHQUFHLE9BQU9vRSxLQUFLRSxJQUFJN0UsRUFBRTJFLEtBQUtHLElBQUloRSxFQUFFUCxJQUFJLFNBQVN3RSxFQUFFL0UsR0FBRyxPQUFPQSxFQUFFLEdBQUcsRUFBRUEsRUFBRUEsRUFBRSxFQUFFLFNBQVNZLEVBQUVaLEdBQUcsSUFBSSxJQUFJYyxFQUFFLEVBQUVQLEVBQUUsRUFBRUEsRUFBRVAsRUFBRW9DLE9BQU83QixJQUFJTyxHQUFHZCxFQUFFTyxHQUFHLE9BQU9PLEVBQUUsU0FBU2tFLEVBQUVoRixFQUFFYyxHQUFHLElBQUlkLEVBQUUsTUFBTSxJQUFJeUQsTUFBTSxpQkFBaUIzQyxFQUFFQSxFQUFFQSxLQUFLLFNBQVMxQixFQUFFWSxFQUFFYyxFQUFFUCxRQUFHLElBQVNBLElBQUlBLEVBQUUsSUFBSXlFLEVBQUVDLEVBQUVqRixFQUFFYyxJQUFHLFdBQVcsT0FBT1AsRUFBRSxXQUFXUCxFQUFFLFFBQVFjLEVBQUUsaUJBQWdCLFNBQVNvRSxFQUFFbEYsR0FBR2dGLEVBQUUsTUFBTWhGLEdBQUUsV0FBVyxNQUFNLG1FQUFrRSxTQUFTZCxFQUFFYyxFQUFFYyxFQUFFUCxHQUFHLFFBQUcsSUFBU08sSUFBSUEsRUFBRSxTQUFJLElBQVNQLElBQUlBLEdBQUUsR0FBSSxNQUFNTyxJQUFJQSxFQUFFLElBQUlHLE1BQU1rRSxRQUFRbkYsSUFBSW9GLEVBQUVwRixLQUFLTyxFQUFFLElBQUksSUFBSVgsRUFBRSxFQUFFQSxFQUFFSSxFQUFFb0MsU0FBU3hDLEVBQUVWLEVBQUVjLEVBQUVKLEdBQUdrQixFQUFFUCxRQUFRTyxFQUFFdUIsS0FBS3JDLEdBQUcsT0FBT2MsRUFBRSxTQUFTdUUsRUFBRXJGLEdBQUcsR0FBRyxJQUFJQSxFQUFFb0MsT0FBTyxPQUFPLEVBQUUsSUFBSSxJQUFJdEIsRUFBRWQsRUFBRSxHQUFHTyxFQUFFLEVBQUVBLEVBQUVQLEVBQUVvQyxPQUFPN0IsSUFBSU8sR0FBR2QsRUFBRU8sR0FBRyxPQUFPTyxFQUFFLFNBQVNtRSxFQUFFakYsRUFBRWMsR0FBRyxHQUFHZCxJQUFJYyxFQUFFLE9BQU0sRUFBRyxHQUFHLE1BQU1kLEdBQUcsTUFBTWMsRUFBRSxPQUFNLEVBQUcsR0FBR2QsRUFBRW9DLFNBQVN0QixFQUFFc0IsT0FBTyxPQUFNLEVBQUcsSUFBSSxJQUFJN0IsRUFBRSxFQUFFQSxFQUFFUCxFQUFFb0MsT0FBTzdCLElBQUksR0FBR1AsRUFBRU8sS0FBS08sRUFBRVAsR0FBRyxPQUFNLEVBQUcsT0FBTSxFQUFHLFNBQVMrRSxFQUFFdEYsR0FBRyxPQUFPQSxFQUFFLEdBQUcsRUFBRSxTQUFTdUYsRUFBRXZGLEdBQUcsR0FBRyxNQUFNMkUsS0FBS2EsS0FBSyxPQUFPYixLQUFLYSxLQUFLeEYsR0FBRyxHQUFHQSxJQUFJLElBQUksT0FBTyxFQUFFLEdBQUdBLEtBQUksSUFBSyxPQUFPLEVBQUUsSUFBSWMsRUFBRTZELEtBQUtjLElBQUksRUFBRXpGLEdBQUcsT0FBT2MsRUFBRSxJQUFJQSxFQUFFLEdBQUcsU0FBUzRFLEVBQUUxRixHQUFHLElBQUljLEVBQUU2RCxLQUFLZ0IsS0FBS2hCLEtBQUtpQixLQUFLNUYsSUFBSSxNQUFNLENBQUNjLEVBQUU2RCxLQUFLZ0IsS0FBSzNGLEVBQUVjLElBQUksU0FBUytFLEVBQUU3RixFQUFFYyxHQUFHLE9BQU9BLEdBQUdkLEVBQUVvQyxPQUFPcEMsRUFBRUEsRUFBRSxJQUFJOEYsT0FBT2hGLEVBQUVkLEVBQUVvQyxRQUFRLFNBQVMyRCxFQUFFL0YsRUFBRWMsRUFBRVAsR0FBRyxZQUFPLElBQVNPLElBQUlBLEVBQUUsU0FBU2QsR0FBRyxPQUFPLElBQUksSUFBSW9CLFNBQVEsU0FBU3hCLEVBQUVMLEdBQUcsSUFBSThCLEVBQUUsRUFBRXZDLEVBQUUsV0FBVyxHQUFHa0IsSUFBSUosUUFBUSxDQUFDLElBQUlpQixFQUFFQyxJQUFJTyxHQUFHLE1BQU1kLEdBQUdjLEdBQUdkLEVBQUVoQixJQUFJeUcsV0FBV2xILEVBQUUrQixLQUFLL0IsT0FBTSxTQUFTbUgsRUFBRWpHLEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxFQUFFLEVBQUVYLEdBQUcsRUFBRUwsRUFBRSxFQUFFQSxFQUFFUyxFQUFFb0MsU0FBUzdDLEVBQUUsR0FBR1MsRUFBRVQsSUFBSSxFQUFFZ0IsR0FBR1AsRUFBRVQsUUFBUSxJQUFJLElBQUlTLEVBQUVULEdBQUcsQ0FBQyxJQUFJLElBQUlLLEVBQUUsTUFBTTZELE1BQU0seURBQXlEN0QsRUFBRSxZQUFZTCxHQUFHSyxFQUFFTCxPQUFPLEdBQUdTLEVBQUVULEdBQUcsRUFBRSxNQUFNa0UsTUFBTSxnQ0FBZ0N6RCxFQUFFVCxHQUFHLFdBQVdBLEdBQUcsSUFBSSxJQUFJSyxFQUFFLENBQUMsR0FBR2tCLEVBQUUsR0FBR0EsSUFBSVAsRUFBRSxNQUFNa0QsTUFBTSxRQUFRM0MsRUFBRSxxQ0FBcUNkLEdBQUcsT0FBT0EsRUFBRSxHQUFHLElBQUlPLEVBQUUsTUFBTWtELE1BQU0scUNBQXFDekQsRUFBRSwrQkFBK0IsR0FBR2MsRUFBRVAsR0FBRyxFQUFFLE1BQU1rRCxNQUFNLHdEQUF3RDNDLEVBQUUsTUFBTVAsR0FBRyxJQUFJYyxFQUFFckIsRUFBRWtHLFFBQVEsT0FBTzdFLEVBQUV6QixHQUFHa0IsRUFBRVAsRUFBRWMsRUFBRSxTQUFTOEUsRUFBRW5HLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRXNCLE9BQU8sT0FBTzRDLEdBQUdoRixFQUFFLE1BQU1BLEVBQUVjLEVBQUVzRixLQUFJLFNBQVNwRyxFQUFFYyxHQUFHLE9BQU9BLEtBQUksR0FBR3VGLE9BQU9yRyxJQUFJc0csT0FBTSxTQUFTdEcsR0FBRyxPQUFPQSxJQUFJTyxHQUFHUCxFQUFFTyxNQUFJLFdBQVcsTUFBTSwrQ0FBK0NBLEVBQUUsS0FBS0EsRUFBRSxrQkFBa0JQLEtBQUlnRixFQUFFaEYsRUFBRXNHLE9BQU0sU0FBU3RHLEdBQUcsT0FBT3NGLEVBQUV0RixPQUFLLFdBQVcsTUFBTSwwREFBMERBLEtBQUlBLEVBQUVvRyxLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUUsRUFBRU8sRUFBRVAsRUFBRUEsS0FBSSxTQUFTdUcsRUFBRXZHLEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxFQUFFLEdBQUdYLEVBQUUsR0FBR0wsRUFBRSxNQUFNdUIsR0FBR0csTUFBTWtFLFFBQVFyRSxJQUFJLElBQUlBLEVBQUVzQixPQUFPZixFQUFFLE1BQU1QLEdBQUd2QixFQUFFLEtBQUs0RyxFQUFFckYsRUFBRWQsR0FBR3dHLE9BQU8xSCxFQUFFLEVBQUUrQixFQUFFLEVBQUVBLEVBQUViLEVBQUVvQyxTQUFTdkIsRUFBRSxDQUFDLEdBQUcsTUFBTVEsRUFBRSxDQUFDLEdBQUdBLEVBQUV2QyxLQUFLK0IsR0FBRyxJQUFJYixFQUFFYSxHQUFHLE1BQU0sSUFBSTRDLE1BQU0sc0JBQXNCNUMsRUFBRSxtQkFBbUJiLEVBQUVhLEdBQUcsZUFBZSxNQUFNUSxFQUFFdkMsSUFBSXVDLEVBQUV2QyxHQUFHK0IsSUFBSSxJQUFJYixFQUFFYSxLQUFLTixFQUFFOEIsS0FBS3JDLEVBQUVhLElBQUlqQixFQUFFeUMsS0FBS3hCLElBQUlRLEVBQUV2QyxJQUFJK0IsR0FBRy9CLElBQUksSUFBSWtCLEVBQUVhLEtBQUtOLEVBQUU4QixLQUFLckMsRUFBRWEsSUFBSWpCLEVBQUV5QyxLQUFLeEIsSUFBSSxNQUFNLENBQUM0RixTQUFTbEcsRUFBRW1HLFNBQVM5RyxHQUFHLFNBQVMrRyxFQUFFM0csRUFBRWMsR0FBRyxJQUFJUCxFQUFFLEtBQUssR0FBRyxNQUFNUCxHQUFHLFlBQVlBLEVBQUVPLEVBQUUsSUFBSXFHLGFBQWE5RixRQUFRLEdBQUcsVUFBVWQsRUFBRU8sRUFBRSxJQUFJc0csV0FBVy9GLE9BQU8sQ0FBQyxHQUFHLFNBQVNkLEVBQUUsTUFBTSxJQUFJeUQsTUFBTSxxQkFBcUJ6RCxHQUFHTyxFQUFFLElBQUl1RyxXQUFXaEcsR0FBRyxPQUFPUCxFQUFFLFNBQVN3RyxFQUFFL0csRUFBRWMsR0FBRyxJQUFJUCxFQUFFLEtBQUssR0FBRyxNQUFNUCxHQUFHLFlBQVlBLEVBQUVPLEVBQUUsSUFBSXFHLGFBQWE5RixRQUFRLEdBQUcsVUFBVWQsRUFBRU8sRUFBRSxJQUFJc0csV0FBVy9GLFFBQVEsR0FBRyxTQUFTZCxFQUFFTyxFQUFFLElBQUl1RyxXQUFXaEcsT0FBTyxDQUFDLEdBQUcsV0FBV2QsRUFBRSxNQUFNLElBQUl5RCxNQUFNLHFCQUFxQnpELEdBQUdPLEVBQUUsSUFBSVUsTUFBTUgsR0FBRyxPQUFPUCxFQUFFLFNBQVN5RyxFQUFFaEgsRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUUsRUFBRUEsRUFBRVAsRUFBRW9DLE9BQU83QixJQUFJLENBQUMsSUFBSVgsRUFBRUksRUFBRU8sR0FBRyxHQUFHMEcsTUFBTXJILEtBQUtzSCxTQUFTdEgsR0FBRyxNQUFNNkQsTUFBTSxvQkFBb0IzQyxFQUFFLDRCQUE0QmxCLEVBQUUsTUFBTSxTQUFTdUgsRUFBRW5ILEdBQUcsTUFBTSxTQUFTQSxHQUFHLGNBQWNBLEdBQUcsWUFBWUEsR0FBRyxVQUFVQSxHQUFHLFdBQVdBLEVBQUUsU0FBU29ILEVBQUVwSCxFQUFFYyxHQUFHLFFBQU0sY0FBY0EsR0FBSyxZQUFZQSxHQUFHLGNBQWNkLEdBQU0sVUFBVWMsR0FBRyxZQUFZZCxHQUFHLGNBQWNBLEdBQUssU0FBU2MsR0FBRyxTQUFTZCxHQUFLLFNBQVNvRixFQUFFcEYsR0FBRyxPQUFPQSxhQUFhNEcsY0FBYzVHLGFBQWE2RyxZQUFZN0csYUFBYThHLFdBQVcsU0FBU08sRUFBRXJILEdBQUcsR0FBRyxZQUFZQSxHQUFHLFVBQVVBLEVBQUUsT0FBTyxFQUFFLEdBQUcsY0FBY0EsRUFBRSxPQUFPLEVBQUUsR0FBRyxTQUFTQSxFQUFFLE9BQU8sRUFBRSxNQUFNLElBQUl5RCxNQUFNLGlCQUFpQnpELEdBQUcsU0FBU3NILEVBQUV0SCxHQUFHLEdBQUcsTUFBTUEsRUFBRSxPQUFPLEVBQUUsSUFBSWMsRUFBRSxFQUFFLE9BQU9kLEVBQUVpRSxTQUFRLFNBQVNqRSxHQUFHLE9BQU9jLEdBQUdkLEVBQUVvQyxVQUFTdEIsRUFBRSxTQUFTeUcsRUFBRXZILEdBQUcsTUFBTSxpQkFBaUJBLEdBQUdBLGFBQWF3SCxPQUFPLFNBQVNDLEVBQUV6SCxHQUFHLE1BQU0sa0JBQWtCQSxFQUFFLFNBQVMwSCxFQUFFMUgsR0FBRyxNQUFNLGlCQUFpQkEsRUFBRSxTQUFTMkgsRUFBRTNILEdBQUcsT0FBT2lCLE1BQU1rRSxRQUFRbkYsR0FBRzJILEVBQUUzSCxFQUFFLElBQUlBLGFBQWE0RyxhQUFhLFVBQVU1RyxhQUFhNkcsWUFBWTdHLGFBQWE4RyxXQUFXLFFBQVFZLEVBQUUxSCxHQUFHLFVBQVV1SCxFQUFFdkgsR0FBRyxTQUFTeUgsRUFBRXpILEdBQUcsT0FBTyxVQUFVLFNBQVM0SCxFQUFFNUgsR0FBRyxTQUFTQSxHQUFHQSxFQUFFbUIsYUFBYW5CLEVBQUVmLE1BQU1lLEVBQUUyQixPQUFPLFNBQVNrRyxFQUFFN0gsRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUVPLEVBQUVQLEVBQUVQLElBQUlPLEVBQUUsR0FBR1AsRUFBRU8sR0FBRyxFQUFFLE9BQU9BLEVBQUUsT0FBT1AsRUFBRSxTQUFTOEgsRUFBRTlILEdBQUcsSUFBSWMsRUFBRWQsRUFBRW9DLE9BQU8sR0FBR3RCLEVBQUUsRUFBRSxNQUFNLEdBQUcsSUFBSVAsRUFBRSxJQUFJVSxNQUFNSCxFQUFFLEdBQUdQLEVBQUVPLEVBQUUsR0FBR2QsRUFBRWMsRUFBRSxHQUFHLElBQUksSUFBSWxCLEVBQUVrQixFQUFFLEVBQUVsQixHQUFHLElBQUlBLEVBQUVXLEVBQUVYLEdBQUdXLEVBQUVYLEVBQUUsR0FBR0ksRUFBRUosRUFBRSxHQUFHLE9BQU9XLEVBQUUsU0FBU3dILEVBQUUvSCxFQUFFYyxFQUFFUCxHQUFHLEdBQUcsV0FBV08sRUFBRSxNQUFNLElBQUkyQyxNQUFNLDZDQUE2QyxHQUFHeEMsTUFBTWtFLFFBQVFuRixLQUFLQSxFQUFFZCxFQUFFYyxJQUFJTyxHQUFHeUcsRUFBRWhILEVBQUVjLEdBQUcsU0FBU2QsRUFBRWMsR0FBRyxPQUFPZCxhQUFhNEcsY0FBYyxZQUFZOUYsR0FBR2QsYUFBYTZHLFlBQVksVUFBVS9GLEdBQUdkLGFBQWE4RyxZQUFZLFNBQVNoRyxFQUF2SSxDQUEwSWQsRUFBRWMsR0FBRyxPQUFPZCxFQUFFLEdBQUcsTUFBTWMsR0FBRyxZQUFZQSxHQUFHLGNBQWNBLEVBQUUsT0FBTyxJQUFJOEYsYUFBYTVHLEdBQUcsR0FBRyxVQUFVYyxFQUFFLE9BQU8sSUFBSStGLFdBQVc3RyxHQUFHLEdBQUcsU0FBU2MsRUFBRSxDQUFDLElBQUksSUFBSWxCLEVBQUUsSUFBSWtILFdBQVc5RyxFQUFFb0MsUUFBUTdDLEVBQUUsRUFBRUEsRUFBRUssRUFBRXdDLFNBQVM3QyxFQUFFLElBQUlvRixLQUFLcUQsTUFBTWhJLEVBQUVULE1BQU1LLEVBQUVMLEdBQUcsR0FBRyxPQUFPSyxFQUFFLE1BQU0sSUFBSTZELE1BQU0scUJBQXFCM0MsR0FBRyxTQUFTbUgsRUFBRWpJLEVBQUVjLEdBQUcsR0FBRyxJQUFJZCxFQUFFb0MsT0FBTyxPQUFPdEIsRUFBRSxHQUFHLElBQUlQLEVBQUVQLEVBQUVrSSxRQUFPLFNBQVNsSSxFQUFFYyxHQUFHLE9BQU9kLEVBQUVjLEtBQUksR0FBRyxJQUFJUCxFQUFFLE1BQU0sR0FBRyxHQUFHQSxJQUFJTyxFQUFFc0IsT0FBTyxNQUFNLElBQUlxQixNQUFNLElBQUl6RCxFQUFFLG9DQUFvQyxPQUFPLFNBQVNBLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsSUFBSUwsRUFBRSxJQUFJMEIsTUFBTSxHQUFHLElBQUlWLEVBQUU2QixPQUFPLElBQUksSUFBSWYsRUFBRWQsRUFBRSxHQUFHekIsRUFBRSxFQUFFQSxFQUFFdUMsRUFBRXZDLElBQUlTLEVBQUVULEdBQUdjLEVBQUVrQixFQUFFaEMsT0FBTyxDQUFDdUMsRUFBRWQsRUFBRSxHQUFHLElBQUlNLEVBQUVOLEVBQUUyRixNQUFNLEdBQUc1RSxFQUFFVCxFQUFFcUgsUUFBTyxTQUFTbEksRUFBRWMsR0FBRyxPQUFPZCxFQUFFYyxLQUFJLElBQUloQyxFQUFFLEVBQUVBLEVBQUV1QyxFQUFFdkMsSUFBSVMsRUFBRVQsR0FBR2tCLEVBQUVjLEVBQUVoQyxFQUFFd0MsRUFBRVQsRUFBRWpCLEdBQUcsT0FBT0wsRUFBck0sQ0FBd00sRUFBRVMsRUFBRWMsR0FBRyxTQUFTcUgsRUFBRW5JLEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxFQUFFNkgsRUFBRXBJLEVBQUVjLEdBQUdsQixFQUFFLEVBQUVBLEVBQUVXLEVBQUU2QixPQUFPeEMsSUFBSVcsRUFBRVgsR0FBRyxFQUFFLE9BQU9XLEVBQUUsU0FBUzZILEVBQUVwSSxFQUFFYyxHQUFHLEdBQUcsTUFBTUEsR0FBRyxZQUFZQSxHQUFHLGNBQWNBLEVBQUUsT0FBTyxJQUFJOEYsYUFBYTVHLEdBQUcsR0FBRyxVQUFVYyxFQUFFLE9BQU8sSUFBSStGLFdBQVc3RyxHQUFHLEdBQUcsU0FBU2MsRUFBRSxPQUFPLElBQUlnRyxXQUFXOUcsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHFCQUFxQjNDLEdBQUcsU0FBU3VILElBQUksT0FBT3ZKLEVBQUU4RCxTQUFTMEYsTUFBTSxTQUFTQyxFQUFFdkksR0FBR0EsRUFBRWlFLFNBQVEsU0FBU25ELEdBQUdrRSxFQUFFd0QsT0FBT0MsVUFBVTNILElBQUlBLEdBQUcsR0FBRSxXQUFXLE1BQU0sMEVBQTBFZCxFQUFFLFdBQVMsU0FBUzBJLEdBQUUxSSxFQUFFYyxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxTQUFTQSxFQUFFQSxHQUFHLFFBQVFoQyxFQUFFOEQsU0FBUytGLE9BQU8zSSxFQUFFYyxHQUFHLFNBQVM4SCxHQUFFNUksRUFBRWMsR0FBRyxZQUFPLElBQVNBLElBQUlBLEVBQUUsU0FBU0EsRUFBRUEsR0FBRyxRQUFRaEMsRUFBRThELFNBQVNpRyxPQUFPN0ksRUFBRWMsR0FBRyxJQUFJZ0ksR0FBRXRKLE9BQU8rRSxPQUFPLENBQUN3RSxRQUFRaEssRUFBRWlLLE1BQU03SixFQUFFOEosa0JBQWtCbEUsRUFBRW1FLElBQUl0SSxFQUFFdUksWUFBWSxTQUFTbkosRUFBRWMsR0FBRyxJQUFJUCxFQUFFb0UsS0FBS0MsU0FBUyxPQUFPOUQsRUFBRVAsR0FBRyxFQUFFQSxHQUFHUCxHQUFHb0osWUFBWSxTQUFTcEosRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUUsRUFBRVgsRUFBRSxFQUFFQSxFQUFFSSxFQUFFb0MsT0FBT3hDLElBQUksQ0FBQyxJQUFJTCxFQUFFaUosT0FBT3hJLEVBQUVKLElBQUk0SSxPQUFPMUgsRUFBRWxCLElBQUlXLEdBQUdoQixFQUFFQSxFQUFFLE9BQU9nQixHQUFHOEksT0FBT3JFLEVBQUVzRSxrQkFBa0JsSyxFQUFFbUssY0FBY3JFLEVBQUVzRSxRQUFRdEssRUFBRXVLLGNBQWNwRSxFQUFFcUUsY0FBYyxTQUFTMUosR0FBRyxPQUFPLElBQUlBLEVBQUVvQyxRQUFRdUgsWUFBWTFFLEVBQUUyRSxNQUFNdEUsRUFBRUUsS0FBS0QsRUFBRXNFLG9CQUFvQm5FLEVBQUVvRSxzQkFBc0IsU0FBUzlKLEdBQUcsSUFBSSxJQUFJYyxFQUFFLElBQUlpSixZQUFZL0osR0FBR08sRUFBRSxFQUFFQSxFQUFFUCxJQUFJTyxFQUFFTyxFQUFFUCxHQUFHQSxFQUFFLE9BQU94QixFQUFFK0IsR0FBR0EsR0FBR2tKLFNBQVNuRSxFQUFFb0UsWUFBWWxFLEVBQUVtRSx1QkFBdUJqRSxFQUFFa0UsZUFBZWhFLEVBQUVpRSxhQUFhN0QsRUFBRThELHVCQUF1QjFELEVBQUUyRCxrQkFBa0J2RCxFQUFFd0QseUJBQXlCdkQsRUFBRXdELGFBQWFyRCxFQUFFc0QsZ0JBQWdCckQsRUFBRXNELGFBQWF0RixFQUFFdUYsZ0JBQWdCdEQsRUFBRXVELHFCQUFxQnRELEVBQUV1RCxTQUFTdEQsRUFBRXVELFVBQVVyRCxFQUFFc0QsU0FBU3JELEVBQUVzRCxXQUFXckQsRUFBRXNELFdBQVdyRCxFQUFFc0QsZUFBZXJELEVBQUVzRCxlQUFlckQsRUFBRXNELGFBQWFyRCxFQUFFc0QsY0FBY3BELEVBQUVxRCxtQkFBbUJuRCxFQUFFb0Qsb0JBQW9CbkQsRUFBRUUsSUFBSUQsRUFBRW1ELG1DQUFtQ2pELEVBQUVrRCxNQUFNLFNBQVN6TCxFQUFFYyxHQUFHLE9BQU9oQyxFQUFFOEQsU0FBUzZJLE1BQU16TCxFQUFFYyxJQUFJNEssYUFBYWhELEdBQUVpRCxhQUFhL0MsS0FBSWdELEdBQUUsV0FBVyxTQUFTNUwsRUFBRUEsRUFBRWMsR0FBR0ksS0FBSzJLLGFBQWE3TCxFQUFFa0IsS0FBSzRLLE9BQU9oTCxFQUFFLE1BQU1BLElBQUlJLEtBQUs0SyxPQUFPLElBQUlDLElBQUcsT0FBTy9MLEVBQUVVLFVBQVVzTCxjQUFjLFNBQVNoTSxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUVMLEVBQUUyQixLQUFLRyxFQUFFSCxLQUFLMkssYUFBYUksTUFBSyxXQUFXck0sRUFBRVcsT0FBTSxPQUFPVSxNQUFNa0UsUUFBUXZGLEdBQUdBLEVBQUUsQ0FBQ0EsSUFBSXFFLFNBQVEsU0FBUzFELEdBQUdBLEVBQUUyTCxPQUFPeEssTUFBSyxTQUFTOUIsSUFBSSxTQUFTSSxFQUFFYyxFQUFFUCxHQUFHLEdBQUcsWUFBWU8sRUFBRSxPQUFNLEVBQUcsSUFBSSxJQUFJbEIsRUFBRSxFQUFFQSxFQUFFSSxFQUFFb0MsT0FBT3hDLElBQUksQ0FBQyxJQUFJTCxFQUFFUyxFQUFFSixHQUFHLEdBQUdxSCxNQUFNMUgsS0FBSzJILFNBQVMzSCxHQUFHLE9BQU9zRCxRQUFRQyxLQUFLLFNBQVN2RCxFQUFFLHNCQUFzQmdCLEVBQUUsTUFBSyxHQUF2SyxDQUE0S1gsRUFBRVcsRUFBRTRMLE1BQU1uTSxHQUFHcUIsRUFBRUssTUFBSyxTQUFTTCxHQUFHLElBQUl2QyxFQUFFLEdBQUcsTUFBTXVDLEVBQUUrSyxzQkFBc0J0TixFQUFFdUMsRUFBRStLLHVCQUF1QjdNLEVBQUV1TSxPQUFPTyxpQkFBaUJyTSxFQUFFTyxFQUFFWCxFQUFFeUIsRUFBRWlMLFNBQVN4TCxFQUFFaEMsWUFBU2MsR0FBR0ksRUFBemxCLEdBQWttQitMLEdBQUUsV0FBVyxTQUFTL0wsS0FBSyxPQUFPQSxFQUFFVSxVQUFVMkwsaUJBQWlCLFNBQVNyTSxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxJQUFJdkMsRUFBRStHLEVBQUVqRyxFQUFFLEtBQUssR0FBR2lCLEVBQUVnRixFQUFFN0YsRUFBRSxJQUFJc0IsRUFBRVIsRUFBRXlMLEtBQUt4TixFQUFFK0IsRUFBRTBMLEtBQUtyTixFQUFFMEcsRUFBRS9FLEVBQUUyTCxNQUFNQyxXQUFXLElBQUkzSCxFQUFFLEdBQUcsSUFBSSxJQUFJbkUsS0FBS3JCLEVBQUUsQ0FBQyxJQUFJeUYsRUFBRXpGLEVBQUVxQixHQUFHNkwsTUFBTXJOLEVBQUU0RixFQUFFNUMsT0FBTzJDLEdBQUduRSxFQUFFLEtBQUt4QixFQUFFLE1BQU1BLEVBQUUsRUFBRTRGLEVBQUUsSUFBSSxJQUFJbkMsUUFBUThKLElBQUksS0FBSzlMLEVBQUUsT0FBTy9CLEVBQUUsT0FBT3dDLEVBQUUsS0FBS25DLEVBQUUsT0FBT0osRUFBRSxPQUFPZ0csRUFBRSxPQUFPMUQsRUFBRSxtQkFBbUIsWUFBWSxhQUFhLGdCQUFnQixlQUFlLHFCQUFxQnJCLEVBQXBaLEdBQXlaNE0sR0FBRSxHQUFHQyxHQUFHLEVBQUVDLEdBQUcsRUFBK2dELFNBQVNDLEdBQUcvTSxFQUFFYyxFQUFFUCxHQUFHLE9BQU9zRixFQUFFNUUsTUFBTWtFLFFBQVFuRixHQUFHZ04sV0FBV2hOLEVBQUUsR0FBR2lOLFFBQVFILEtBQUssTUFBTUUsV0FBV2hOLEVBQUUsR0FBR2lOLFFBQVFILEtBQUssSUFBSXZGLEVBQUV2SCxHQUFHLElBQUlBLEVBQUUsSUFBSSxTQUFTTyxFQUFFMk0sR0FBR2xOLEdBQUdnTixXQUFXaE4sRUFBRWlOLFFBQVFILEtBQUtKLFdBQVc1TCxHQUFHLFNBQVNvTSxHQUFHbE4sR0FBRyxPQUFPLElBQUlBLEVBQUUsUUFBUSxPQUFPLFNBQVNtTixHQUFHbk4sR0FBRyxJQUFJLElBQUljLEVBQUUsR0FBR1AsRUFBRSxFQUFFQSxFQUFFUCxFQUFFb0MsT0FBTzdCLEdBQUcsRUFBRU8sRUFBRXVCLEtBQUssQ0FBQ3JDLEVBQUVPLEdBQUdQLEVBQUVPLEVBQUUsS0FBSyxPQUFPTyxFQUFFLElBQUlzTSxHQUFHLFdBQVcsU0FBU3BOLEVBQUVBLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRXNCLEtBQUssR0FBR0EsS0FBS2lMLE1BQU1yTCxFQUFFSSxLQUFLdUwsTUFBTXpNLEVBQUVrRyxRQUFRaEYsS0FBS3NMLEtBQUtuSCxFQUFFckYsR0FBRyxNQUFNTyxFQUFFLENBQUMsSUFBSWhCLEVBQUVnQixFQUFFNkIsT0FBTzRDLEVBQUV6RixJQUFJMkIsS0FBS3NMLE1BQUssV0FBVyxNQUFNLHFCQUFxQmpOLEVBQUUsb0RBQW9ESyxFQUFFNE0sS0FBSyxRQUFPLEdBQUcsY0FBYzFMLEVBQUUsTUFBTSxJQUFJMkMsTUFBTSw4SkFBOEp2QyxLQUFLbU0sT0FBTzlNLEdBQUd3RyxFQUFFakcsRUFBRUksS0FBS3NMLE1BQU10TCxLQUFLb00sUUFBUXhGLEVBQUU5SCxHQUFHLE9BQU9BLEVBQUVVLFVBQVV5QyxJQUFJLFNBQVNuRCxHQUFHLElBQUksSUFBSWMsRUFBRUksS0FBS1gsRUFBRSxHQUFHWCxFQUFFLEVBQUVBLEVBQUV3RSxVQUFVaEMsT0FBT3hDLElBQUlXLEVBQUVYLEVBQUUsR0FBR3dFLFVBQVV4RSxHQUFHLElBQUlXLEVBQUU2QixTQUFTN0IsRUFBRSxDQUFDLElBQUl5RSxFQUFFekUsRUFBRTZCLFNBQVNsQixLQUFLcUwsTUFBSyxXQUFXLE1BQU0sdUNBQXVDaE0sRUFBRTZCLE9BQU8sMEJBQTBCdEIsRUFBRXlMLEtBQUssT0FBTSxJQUFJaE4sRUFBRTJCLEtBQUtxTSxXQUFXaE4sR0FBR1csS0FBS21NLE9BQU85TixHQUFHUyxHQUFHQSxFQUFFVSxVQUFVZixJQUFJLFdBQVcsSUFBSSxJQUFJSyxFQUFFLEdBQUdjLEVBQUUsRUFBRUEsRUFBRXNELFVBQVVoQyxPQUFPdEIsSUFBSWQsRUFBRWMsR0FBR3NELFVBQVV0RCxHQUFHLElBQUlkLEVBQUVvQyxTQUFTcEMsRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJTyxFQUFFLEVBQUVYLEVBQUUsRUFBRUwsRUFBRVMsRUFBRUosRUFBRUwsRUFBRTZDLE9BQU94QyxJQUFJLENBQUMsSUFBSXlCLEVBQUU5QixFQUFFSyxHQUFHLEdBQUd5QixFQUFFLEdBQUdBLEdBQUdILEtBQUt1TCxNQUFNbE0sR0FBRyxDQUFDLElBQUl6QixFQUFFLHFDQUFxQ2tCLEVBQUUsb0JBQW9Ca0IsS0FBS3VMLE1BQU0sTUFBTSxJQUFJaEosTUFBTTNFLEdBQUd5QixJQUFJLElBQUksSUFBSU0sRUFBRWIsRUFBRUEsRUFBRW9DLE9BQU8sR0FBR2QsRUFBRSxFQUFFQSxFQUFFdEIsRUFBRW9DLE9BQU8sSUFBSWQsRUFBRVQsR0FBR0ssS0FBS29NLFFBQVFoTSxHQUFHdEIsRUFBRXNCLEdBQUcsT0FBT0osS0FBS21NLE9BQU94TSxJQUFJYixFQUFFVSxVQUFVNk0sV0FBVyxTQUFTdk4sR0FBRyxHQUFHLElBQUlrQixLQUFLcUwsS0FBSyxPQUFPLEVBQUUsR0FBRyxJQUFJckwsS0FBS3FMLEtBQUssT0FBT3ZNLEVBQUUsR0FBRyxJQUFJLElBQUljLEVBQUVkLEVBQUVBLEVBQUVvQyxPQUFPLEdBQUc3QixFQUFFLEVBQUVBLEVBQUVQLEVBQUVvQyxPQUFPLElBQUk3QixFQUFFTyxHQUFHSSxLQUFLb00sUUFBUS9NLEdBQUdQLEVBQUVPLEdBQUcsT0FBT08sR0FBR2QsRUFBRVUsVUFBVThNLFdBQVcsU0FBU3hOLEdBQUcsR0FBRyxJQUFJa0IsS0FBS3FMLEtBQUssTUFBTSxHQUFHLEdBQUcsSUFBSXJMLEtBQUtxTCxLQUFLLE1BQU0sQ0FBQ3ZNLEdBQUcsSUFBSSxJQUFJYyxFQUFFLElBQUlHLE1BQU1DLEtBQUt1TCxNQUFNckssUUFBUTdCLEVBQUUsRUFBRUEsRUFBRU8sRUFBRXNCLE9BQU8sSUFBSTdCLEVBQUVPLEVBQUVQLEdBQUdvRSxLQUFLOEksTUFBTXpOLEVBQUVrQixLQUFLb00sUUFBUS9NLElBQUlQLEdBQUdjLEVBQUVQLEdBQUdXLEtBQUtvTSxRQUFRL00sR0FBRyxPQUFPTyxFQUFFQSxFQUFFc0IsT0FBTyxHQUFHcEMsRUFBRWMsR0FBR3RCLE9BQU9DLGVBQWVPLEVBQUVVLFVBQVUsT0FBTyxDQUFDZixJQUFJLFdBQVcsT0FBT3VCLEtBQUt1TCxNQUFNckssUUFBUTFDLFlBQVcsRUFBRzhELGNBQWEsSUFBS3hELEVBQUVVLFVBQVVnTixTQUFTLFdBQVcsT0FBT0MsR0FBR0MsS0FBSzFNLEtBQUt1TCxNQUFNLENBQUNZLE9BQU9uTSxLQUFLbU0sUUFBUW5NLEtBQUtpTCxRQUFRbk0sRUFBenRELEdBQTh0RDZOLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxHQUFHLEtBQVNKLEdBQUcsV0FBVyxTQUFTM04sRUFBRUEsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRzJCLEtBQUs4TSxNQUFLLEVBQUc5TSxLQUFLK00sb0JBQW1CLEVBQUcvTSxLQUFLdUwsTUFBTXpNLEVBQUVrRyxRQUFRaEYsS0FBS2lMLE1BQU1yTCxHQUFHLFVBQVVJLEtBQUtzTCxLQUFLbkgsRUFBRXJGLEdBQUdrQixLQUFLb00sUUFBUXhGLEVBQUU5SCxHQUFHa0IsS0FBS2dOLE9BQU8sTUFBTXRPLEVBQUVBLEVBQUUsR0FBR3NCLEtBQUtpTixHQUFHTixLQUFLTyxlQUFlbE4sS0FBS21OLFNBQVNuTixLQUFLcUwsS0FBSyxFQUFFckwsS0FBS3FMLEtBQUtHLFdBQVcsU0FBU21CLEtBQUtTLGVBQWVwTixLQUFLM0IsR0FBRyxNQUFNZ0IsR0FBR3NOLEtBQUtVLE1BQU1oUCxFQUFFMkIsS0FBS2dOLE9BQU8zTixHQUFHLE9BQU9QLEVBQUU0TixLQUFLLFNBQVM5TSxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLElBQUk4QixFQUFFZCxFQUFFOE0sT0FBTyxPQUFPLE1BQU05TSxFQUFFOE0sUUFBUSxXQUFXek4sR0FBRzJILEVBQUVoSCxFQUFFOE0sT0FBTyxNQUFNaE0sRUFBRWQsRUFBRThNLE9BQU9qSCxLQUFJLFNBQVNwRyxHQUFHLE9BQU8wSSxHQUFFMUksT0FBTSxJQUFJQSxFQUFFYyxFQUFFbEIsRUFBRXlCLEVBQUVkLEVBQUUyTixPQUFPM08sSUFBSVMsRUFBRVUsVUFBVThJLFFBQVEsV0FBVyxPQUFPdEksS0FBS3NOLGtCQUFrQnROLEtBQUt1TixRQUFRek8sRUFBRVUsVUFBVWdPLFNBQVMsV0FBVyxPQUFPeE4sS0FBS3NOLGtCQUFrQnhKLEVBQUUsSUFBSTlELEtBQUtzTCxNQUFLLFdBQVcsTUFBTSx5Q0FBd0N0TCxLQUFLeU4sUUFBUSxLQUFLM08sRUFBRVUsVUFBVStOLEtBQUssV0FBVyxPQUFPdk4sS0FBS3NOLGtCQUFrQnROLEtBQUt5TixRQUFRLENBQUN6TixLQUFLc0wsUUFBUXhNLEVBQUVVLFVBQVVrTyxLQUFLLFNBQVM1TyxFQUFFYyxHQUFHLE9BQU9JLEtBQUtzTixrQkFBa0J0TixLQUFLeU4sUUFBUSxDQUFDM08sRUFBRWMsS0FBS2QsRUFBRVUsVUFBVW1PLEtBQUssU0FBUzdPLEVBQUVjLEVBQUVQLEdBQUcsT0FBT1csS0FBS3NOLGtCQUFrQnROLEtBQUt5TixRQUFRLENBQUMzTyxFQUFFYyxFQUFFUCxLQUFLUCxFQUFFVSxVQUFVb08sS0FBSyxTQUFTOU8sRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxPQUFPc0IsS0FBS3NOLGtCQUFrQnROLEtBQUt5TixRQUFRLENBQUMzTyxFQUFFYyxFQUFFUCxFQUFFWCxLQUFLSSxFQUFFVSxVQUFVcU8sS0FBSyxTQUFTL08sRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxPQUFPMkIsS0FBS3NOLGtCQUFrQnROLEtBQUt5TixRQUFRLENBQUMzTyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxLQUFLUyxFQUFFVSxVQUFVc08sT0FBTyxTQUFTaFAsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR21CLEtBQUsvTixLQUFLbEIsSUFBSVIsT0FBT0MsZUFBZU8sRUFBRVUsVUFBVSxPQUFPLENBQUNmLElBQUksV0FBVyxPQUFPdUIsS0FBS3VMLE1BQU1ySyxRQUFRMUMsWUFBVyxFQUFHOEQsY0FBYSxJQUFLeEQsRUFBRVUsVUFBVXdPLE9BQU8sV0FBVyxPQUFPM08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJbEIsRUFBRSxPQUFPSixFQUFFc0IsTUFBSyxTQUFTSixHQUFHLE9BQU9BLEVBQUVjLE9BQU8sS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFVixLQUFLZ0wsUUFBUSxLQUFLLEVBQUUsT0FBT2xNLEVBQUVjLEVBQUVlLE9BQU8sQ0FBQyxFQUFFaU0sR0FBR29CLE9BQU9oTyxLQUFLdUwsTUFBTXZMLEtBQUtpTCxNQUFNbk0sWUFBVUEsRUFBRVUsVUFBVXlPLFdBQVcsV0FBVyxPQUFPckIsR0FBR29CLE9BQU9oTyxLQUFLdUwsTUFBTXZMLEtBQUtpTCxNQUFNakwsS0FBS2tPLGFBQWFwUCxFQUFFVSxVQUFVMk8sTUFBTSxXQUFXLE9BQU85TyxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlsQixFQUFFLE9BQU9KLEVBQUVzQixNQUFLLFNBQVNKLEdBQUcsT0FBT0EsRUFBRWMsT0FBTyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUVWLEtBQUtnTCxRQUFRLEtBQUssRUFBRSxPQUFPbE0sRUFBRWMsRUFBRWUsT0FBTyxDQUFDLEVBQUVvRyxFQUFFL0csS0FBS3VMLE1BQU16TSxZQUFVQSxFQUFFVSxVQUFVNE8sVUFBVSxXQUFXLE9BQU9ySCxFQUFFL0csS0FBS3VMLE1BQU12TCxLQUFLa08sYUFBYXBQLEVBQUVVLFVBQVV3TCxLQUFLLFdBQVcsT0FBTzNMLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSWxCLEVBQUVjLEVBQUUsT0FBT2xCLEVBQUVzQixNQUFLLFNBQVNYLEdBQUcsT0FBT0EsRUFBRXFCLE9BQU8sS0FBSyxFQUFFLE9BQU9WLEtBQUtzTixrQkFBa0J4TyxFQUFFNk4sS0FBSzBCLEtBQUtyTyxLQUFLZ04sUUFBUSxXQUFXaE4sS0FBS2lMLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFbk0sR0FBRyxLQUFLLEVBQUVjLEVBQUVQLEVBQUVzQixPQUFPLElBQUksTUFBTSxDQUFDLEVBQUVmLEVBQUVzRixLQUFJLFNBQVNwRyxHQUFHLE9BQU80SSxHQUFFNUksT0FBTSxNQUFNQSxHQUFHLE1BQU0sSUFBSXlELE1BQU0saUdBQWlHbEQsRUFBRXFCLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUU1QixXQUFTQSxFQUFFVSxVQUFVME8sU0FBUyxXQUFXbE8sS0FBS3NOLGtCQUFrQixJQUFJeE8sRUFBRTZOLEtBQUsyQixTQUFTdE8sS0FBS2dOLFFBQVEsR0FBRyxXQUFXaE4sS0FBS2lMLE1BQU0sSUFBSSxPQUFPbk0sRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsT0FBTzRJLEdBQUU1SSxNQUFLLE1BQU1BLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSxpR0FBaUcsT0FBT3pELEdBQUdBLEVBQUVVLFVBQVUrTyxNQUFNLFdBQVcsT0FBT2xQLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSWxCLEVBQUUsT0FBT0osRUFBRXNCLE1BQUssU0FBU0osR0FBRyxPQUFPQSxFQUFFYyxPQUFPLEtBQUssRUFBRSxPQUFPVixLQUFLc04sa0JBQWtCLENBQUMsRUFBRVgsS0FBSzBCLEtBQUtyTyxLQUFLZ04sU0FBUyxLQUFLLEVBQUUsT0FBT2xPLEVBQUVjLEVBQUVlLE9BQU8sV0FBV1gsS0FBS2lMLE1BQU0sQ0FBQyxFQUFFbk0sR0FBRyxDQUFDLEVBQUUsSUFBSThHLFdBQVc5RyxFQUFFa1AsaUJBQWVsUCxFQUFFVSxVQUFVZ1AsUUFBUSxXQUFXeE8sS0FBS3lPLGFBQWE5QixLQUFLK0IsY0FBYzFPLE1BQU1BLEtBQUsrTSxvQkFBbUIsSUFBS3pPLE9BQU9DLGVBQWVPLEVBQUVVLFVBQVUsYUFBYSxDQUFDZixJQUFJLFdBQVcsT0FBT3VCLEtBQUsrTSxvQkFBb0J2TyxZQUFXLEVBQUc4RCxjQUFhLElBQUt4RCxFQUFFVSxVQUFVOE4sZ0JBQWdCLFdBQVcsR0FBR3ROLEtBQUt5TyxXQUFXLE1BQU0sSUFBSWxNLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVW1QLFFBQVEsV0FBVyxPQUFPM08sS0FBSzhOLE9BQU8sWUFBWWhQLEVBQUVVLFVBQVVvUCxNQUFNLFdBQVcsT0FBTzVPLEtBQUs4TixPQUFPLFVBQVVoUCxFQUFFVSxVQUFVcVAsT0FBTyxXQUFXLE9BQU83TyxLQUFLOE4sT0FBTyxTQUFTaFAsRUFBRVUsVUFBVXNQLE1BQU0sU0FBU2hRLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxHQUFFLEdBQUk4TixHQUFHa0MsTUFBTTlPLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVaU8sUUFBUSxTQUFTM08sR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR2EsUUFBUXpOLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVdVAsVUFBVSxTQUFTalEsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQnROLEtBQUt5TixRQUFRM08sRUFBRXlNLFFBQVF6TSxFQUFFVSxVQUFVd1AsV0FBVyxTQUFTbFEsR0FBRyxZQUFPLElBQVNBLElBQUlBLEVBQUUsR0FBRzhOLEdBQUdvQyxXQUFXaFAsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVV5UCxPQUFPLFNBQVNuUSxFQUFFYyxFQUFFUCxHQUFHLFlBQU8sSUFBU1AsSUFBSUEsRUFBRSxRQUFHLElBQVNjLElBQUlBLEdBQUUsUUFBSSxJQUFTUCxJQUFJQSxHQUFFLEdBQUl1TixHQUFHcUMsT0FBT2pQLEtBQUtsQixFQUFFYyxFQUFFUCxJQUFJUCxFQUFFVSxVQUFVMFAsUUFBUSxTQUFTcFEsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR3NDLFFBQVFsUCxLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVTJQLE1BQU0sV0FBVyxPQUFPblAsS0FBS3NOLGtCQUFrQlYsR0FBR3VDLE1BQU1uUCxPQUFPbEIsRUFBRVUsVUFBVTRQLE9BQU8sU0FBU3RRLEVBQUVjLEVBQUVQLEdBQUcsT0FBT1csS0FBS3NOLGtCQUFrQlYsR0FBR3dDLE9BQU9wUCxLQUFLbEIsRUFBRWMsRUFBRVAsSUFBSVAsRUFBRVUsVUFBVWdNLFNBQVMsU0FBUzFNLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxHQUFFLEdBQTNvUCxTQUFZQSxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLElBQUlMLEVBQUV1SSxFQUFFaEgsR0FBR08sRUFBRSxTQUFTckIsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFOEYsRUFBRXZFLEdBQUdPLEVBQUV6QixFQUFFQSxFQUFFd0MsT0FBTyxHQUFHdEQsRUFBRSxJQUFJbUMsTUFBTUksR0FBR2tQLEtBQUssR0FBRzFQLEVBQUVDLEVBQUVzQixPQUFPZCxFQUFFLGNBQWNmLEVBQUU0TSxHQUFHbk4sR0FBR0EsRUFBRSxHQUFHYSxFQUFFLEVBQUUsSUFBSSxJQUFJOUIsRUFBRSxFQUFFQSxFQUFFUSxFQUFFOEIsRUFBRXRDLElBQUksSUFBSSxJQUFJSSxFQUFFSixFQUFFc0MsRUFBRTBELEVBQUUsRUFBRUEsRUFBRTFELEVBQUUwRCxJQUFJakcsRUFBRWlHLEdBQUdKLEtBQUtFLElBQUkvRixFQUFFaUcsR0FBR2dJLEdBQUd6TCxFQUFFbkMsRUFBRTRGLEdBQUcsRUFBRXhFLEdBQUc2QixRQUFRLE9BQU90RCxFQUFqTixDQUFvTmtCLEVBQUVjLEVBQUVQLEVBQUVoQixHQUFHVCxFQUFFZ0MsRUFBRXNCLE9BQU92QixFQUFFLFNBQVNiLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsUUFBRyxJQUFTQSxJQUFJQSxHQUFFLEdBQUksSUFBSStCLEVBQUUsY0FBY2pCLEVBQUUsRUFBRSxFQUFNMEIsRUFBRWYsRUFBRSxHQUFPeEIsRUFBRXdCLEVBQUU2QixPQUFPLEdBQUcsSUFBSXJELEVBQUcsTUFBRyxjQUFjYSxFQUFxQixDQUFDbU4sR0FBYkksR0FBR3JNLEdBQWUsR0FBRyxFQUFFbEIsSUFBVSxTQUFTQSxFQUFFLENBQUNzTixHQUFHcE0sRUFBRSxLQUFLLENBQUNBLEVBQUUsR0FBRzRMLFlBQVksR0FBRyxJQUFJM04sRUFBRSxDQUFDLEdBQUd1QyxFQUFFc0wsR0FBRSxDQUFDLElBQUk3SCxFQUFFOEgsR0FBR2hNLEVBQUVELEVBQUVLLE1BQU11UCxLQUFLMVAsRUFBRW9GLE1BQU0sRUFBRW5CLElBQUlDLEVBQUUvRCxNQUFNdVAsS0FBSzFQLEVBQUVvRixNQUFNNUUsRUFBRXVMLEdBQUdoTSxFQUFFUyxJQUFJLE1BQU0sY0FBYzFCLElBQUlnQixFQUFFdU0sR0FBR3ZNLEdBQUdvRSxFQUFFbUksR0FBR25JLElBQUksQ0FBQyxJQUFJcEUsRUFBRXdGLEtBQUksU0FBU3BHLEVBQUVjLEdBQUcsT0FBT2lNLEdBQUcvTSxFQUFFcUIsRUFBRVAsR0FBR2xCLE1BQUswRSxLQUFLLE1BQU0sVUFBVVUsRUFBRW9CLEtBQUksU0FBU3BHLEVBQUVjLEdBQUcsT0FBT2lNLEdBQUcvTSxFQUFFcUIsRUFBRUMsRUFBRXVMLEdBQUcvTCxHQUFHbEIsTUFBSzBFLEtBQUssTUFBTSxLQUErQyxNQUFNLENBQUMsS0FBM0MsY0FBYzFFLEVBQUV1TixHQUFHck0sR0FBR0csTUFBTXVQLEtBQUsxUCxJQUFnQnNGLEtBQUksU0FBU3BHLEVBQUVjLEdBQUcsT0FBT2lNLEdBQUcvTSxFQUFFcUIsRUFBRVAsR0FBR2xCLE1BQUswRSxLQUFLLE1BQU0sS0FBSyxJQUFJWSxFQUFFM0UsRUFBRTJGLE1BQU0sR0FBT2hILEVBQUVLLEVBQUUyRyxNQUFNLEdBQU9iLEVBQUU5RixFQUFFLEdBQUdzQixFQUFNb0UsRUFBRSxHQUFHLEdBQUczRCxFQUFFc0wsR0FBRSxDQUFDLElBQUksSUFBSXRILEVBQUUsRUFBRUEsRUFBRXVILEdBQUd2SCxJQUFJLENBQUMsSUFBVUksR0FBTkgsRUFBRUQsRUFBRUQsR0FBTUEsRUFBRUosRUFBRTVDLEtBQUtWLE1BQU1zRCxFQUFFakYsRUFBRWMsRUFBRW9GLE1BQU1YLEVBQUVHLEdBQUdSLEVBQUV0RixFQUFFVixFQUFFbUMsR0FBRSxJQUFLNEQsRUFBRTVDLEtBQUssT0FBTyxJQUFRaUQsRUFBRWhFLEVBQUV1TCxHQUFHdkgsRUFBRWhFLEVBQUVnRSxJQUFJLENBQVdJLEdBQU5ILEVBQUVELEVBQUVELEdBQU1BLEVBQUVKLEVBQUU1QyxLQUFLVixNQUFNc0QsRUFBRWpGLEVBQUVjLEVBQUVvRixNQUFNWCxFQUFFRyxHQUFHUixFQUFFdEYsRUFBRVYsRUFBRW1DLEVBQUVpRSxJQUFJaEUsRUFBRSxVQUFVLElBQVFnRSxFQUFFLEVBQUVBLEVBQUVoRSxFQUFFZ0UsSUFBSSxDQUFDLElBQUlDLEVBQU1HLEdBQU5ILEVBQUVELEVBQUVELEdBQU1BLEVBQUVKLEVBQUU1QyxLQUFLVixNQUFNc0QsRUFBRWpGLEVBQUVjLEVBQUVvRixNQUFNWCxFQUFFRyxHQUFHUixFQUFFdEYsRUFBRVYsRUFBRW1DLEVBQUVpRSxJQUFJaEUsRUFBRSxJQUFJLElBQUl1RSxFQUFFLElBQUk5RyxFQUFFLElBQUksR0FBR2tHLEVBQUUsR0FBRyxJQUFJQSxFQUFFLEdBQUdZLEVBQUUsSUFBUVAsRUFBRSxFQUFFQSxFQUFFTCxFQUFFN0MsT0FBTyxFQUFFa0QsSUFBSUwsRUFBRUssR0FBRyxJQUFJTCxFQUFFSyxHQUFHTyxFQUFFLElBQUlFLEVBQUUsTUFBTSxJQUFRVCxFQUFFLEVBQUVBLEVBQUV2RyxFQUFFdUcsSUFBSVMsR0FBRyxLQUFrRCxPQUE3Q2QsRUFBRUEsRUFBRTdDLE9BQU8sR0FBRyxJQUFJNkMsRUFBRUEsRUFBRTdDLE9BQU8sR0FBRyxLQUFLdEQsRUFBRSxHQUFHaUgsR0FBVWQsRUFBN2pDLENBQWdrQ2pGLEVBQUVjLEVBQUVQLEVBQUVoQixFQUFFOEIsR0FBR0MsRUFBRSxDQUFDLFVBQVUsT0FBTzFCLElBQUkwQixFQUFFZSxLQUFLLFlBQVk5QixHQUFHZSxFQUFFZSxLQUFLLFdBQVd2RCxHQUFHd0MsRUFBRWUsS0FBSyxhQUFhdkIsRUFBRSxLQUFLUSxFQUFFZSxLQUFLLGNBQWNmLEVBQUVlLEtBQUt4QixFQUFFdUYsS0FBSSxTQUFTcEcsR0FBRyxNQUFNLE9BQU9BLEtBQUlzRSxLQUFLLE9BQU9oRCxFQUFFZ0QsS0FBSyxNQUF3b01tTSxDQUFHdlAsS0FBS2tPLFdBQVdsTyxLQUFLdUwsTUFBTXZMLEtBQUtpTCxNQUFNbk0sSUFBSUEsRUFBRVUsVUFBVWdRLEtBQUssU0FBUzFRLEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUc0QyxLQUFLeFAsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVVpUSxPQUFPLFNBQVMzUSxFQUFFYyxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxHQUFHSSxLQUFLc04sa0JBQWtCVixHQUFHNkMsT0FBT3pQLEtBQUtsQixFQUFFYyxJQUFJZCxFQUFFVSxVQUFVa1EsT0FBTyxTQUFTNVEsRUFBRWMsRUFBRVAsR0FBRyxZQUFPLElBQVNPLElBQUlBLEdBQUUsUUFBSSxJQUFTUCxJQUFJQSxHQUFFLEdBQUlXLEtBQUtzTixrQkFBa0JWLEdBQUc4QyxPQUFPMVAsS0FBS2xCLEVBQUVjLEVBQUVQLElBQUlQLEVBQUVVLFVBQVVtUSxJQUFJLFNBQVM3USxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHK0MsSUFBSTNQLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVb1EsS0FBSyxTQUFTOVEsRUFBRWMsRUFBRVAsR0FBRyxZQUFPLElBQVNQLElBQUlBLEVBQUUsa0JBQWEsSUFBU2MsSUFBSUEsRUFBRSxXQUFNLElBQVNQLElBQUlBLEdBQUUsR0FBSVcsS0FBS3NOLGtCQUFrQlYsR0FBR2dELEtBQUs1UCxLQUFLbEIsRUFBRWMsRUFBRVAsSUFBSVAsRUFBRVUsVUFBVXdGLE1BQU0sU0FBU2xHLEVBQUVjLEdBQUcsT0FBT0ksS0FBS3NOLGtCQUFrQlYsR0FBRzVILE1BQU1oRixLQUFLbEIsRUFBRWMsSUFBSWQsRUFBRVUsVUFBVXFRLFFBQVEsU0FBUy9RLEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUdpRCxRQUFRN1AsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVUyRixPQUFPLFNBQVN2RixFQUFFUCxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxHQUFHVyxLQUFLc04sa0JBQWtCMU4sYUFBYWQsSUFBSWMsRUFBRSxDQUFDQSxJQUFJZ04sR0FBR3pILE9BQU8sQ0FBQ25GLE1BQU1tRixPQUFPdkYsR0FBR1AsSUFBSVAsRUFBRVUsVUFBVXNELE1BQU0sU0FBU2hFLEVBQUVjLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxFQUFFLEdBQUdJLEtBQUtzTixrQkFBa0JWLEdBQUc5SixNQUFNOUMsS0FBS2xCLEVBQUVjLElBQUlkLEVBQUVVLFVBQVVzUSxNQUFNLFNBQVNoUixFQUFFYyxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxHQUFHZ04sR0FBR2tELE1BQU0sQ0FBQzlQLEtBQUtsQixHQUFHYyxJQUFJZCxFQUFFVSxVQUFVdVEsUUFBUSxTQUFTalIsR0FBRyxZQUFPLElBQVNBLElBQUlBLEVBQUUsR0FBRzhOLEdBQUdtRCxRQUFRL1AsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVV3USxJQUFJLFNBQVNsUixFQUFFYyxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxHQUFHZ04sR0FBR29ELElBQUloUSxLQUFLbEIsRUFBRWMsSUFBSWQsRUFBRVUsVUFBVXlRLG1CQUFtQixTQUFTblIsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxZQUFPLElBQVNnQixJQUFJQSxFQUFFLE1BQU13TixHQUFHLG9KQUFvSjdNLEtBQUtrUSxVQUFVcFIsRUFBRWMsRUFBRXZCLEVBQUVLLEVBQUVXLElBQUlQLEVBQUVVLFVBQVUwUSxVQUFVLFNBQVNwUixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxNQUFNMkIsS0FBS3NOLGtCQUFrQlYsR0FBR3NELFVBQVVsUSxLQUFLbEIsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsSUFBSVMsRUFBRVUsVUFBVTJRLElBQUksU0FBU3JSLEVBQUVjLEdBQUcsWUFBTyxJQUFTZCxJQUFJQSxFQUFFLFdBQU0sSUFBU2MsSUFBSUEsR0FBRSxHQUFJSSxLQUFLc04sa0JBQWtCVixHQUFHdUQsSUFBSW5RLEtBQUtsQixFQUFFYyxJQUFJZCxFQUFFVSxVQUFVNFEsSUFBSSxTQUFTdFIsRUFBRWMsR0FBRyxZQUFPLElBQVNkLElBQUlBLEVBQUUsV0FBTSxJQUFTYyxJQUFJQSxHQUFFLEdBQUlJLEtBQUtzTixrQkFBa0JWLEdBQUd3RCxJQUFJcFEsS0FBS2xCLEVBQUVjLElBQUlkLEVBQUVVLFVBQVU2USxVQUFVLFNBQVN2UixFQUFFYyxHQUFHLFlBQU8sSUFBU2QsSUFBSUEsRUFBRSxXQUFNLElBQVNjLElBQUlBLEdBQUUsR0FBSUksS0FBS3NOLGtCQUFrQlYsR0FBR3lELFVBQVVyUSxLQUFLbEIsRUFBRWMsSUFBSWQsRUFBRVUsVUFBVXdJLElBQUksU0FBU2xKLEVBQUVjLEdBQUcsWUFBTyxJQUFTZCxJQUFJQSxFQUFFLFdBQU0sSUFBU2MsSUFBSUEsR0FBRSxHQUFJSSxLQUFLc04sa0JBQWtCVixHQUFHNUUsSUFBSWhJLEtBQUtsQixFQUFFYyxJQUFJZCxFQUFFVSxVQUFVOFEsS0FBSyxTQUFTeFIsRUFBRWMsR0FBRyxZQUFPLElBQVNkLElBQUlBLEVBQUUsV0FBTSxJQUFTYyxJQUFJQSxHQUFFLEdBQUlJLEtBQUtzTixrQkFBa0JWLEdBQUcwRCxLQUFLdFEsS0FBS2xCLEVBQUVjLElBQUlkLEVBQUVVLFVBQVUrUSxLQUFLLFNBQVN6UixFQUFFYyxHQUFHLFlBQU8sSUFBU2QsSUFBSUEsRUFBRSxXQUFNLElBQVNjLElBQUlBLEdBQUUsR0FBSUksS0FBS3NOLGtCQUFrQlYsR0FBRzJELEtBQUt2USxLQUFLbEIsRUFBRWMsSUFBSWQsRUFBRVUsVUFBVW9FLElBQUksU0FBUzlFLEVBQUVjLEdBQUcsWUFBTyxJQUFTZCxJQUFJQSxFQUFFLFdBQU0sSUFBU2MsSUFBSUEsR0FBRSxHQUFJSSxLQUFLc04sa0JBQWtCVixHQUFHaEosSUFBSTVELEtBQUtsQixFQUFFYyxJQUFJZCxFQUFFVSxVQUFVbUUsSUFBSSxTQUFTN0UsRUFBRWMsR0FBRyxZQUFPLElBQVNkLElBQUlBLEVBQUUsV0FBTSxJQUFTYyxJQUFJQSxHQUFFLEdBQUlJLEtBQUtzTixrQkFBa0JWLEdBQUdqSixJQUFJM0QsS0FBS2xCLEVBQUVjLElBQUlkLEVBQUVVLFVBQVVnUixPQUFPLFNBQVMxUixHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxNQUFNa0IsS0FBS3NOLGtCQUFrQlYsR0FBRzRELE9BQU94USxLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVWlSLE9BQU8sU0FBUzNSLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxFQUFFLE1BQU1rQixLQUFLc04sa0JBQWtCVixHQUFHNkQsT0FBT3pRLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVdU8sS0FBSyxTQUFTalAsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR21CLEtBQUsvTixLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVWtSLElBQUksU0FBUzVSLEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUc4RCxJQUFJMVEsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVVtUixVQUFVLFNBQVM3UixHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHK0QsVUFBVTNRLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVb1IsTUFBTSxTQUFTOVIsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR2dFLE1BQU01USxLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVXFSLElBQUksU0FBUy9SLEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUdpRSxJQUFJN1EsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVVzUixVQUFVLFNBQVNoUyxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHa0UsVUFBVTlRLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVdVIsSUFBSSxTQUFTalMsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR21FLElBQUkvUSxLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVXdSLFVBQVUsU0FBU2xTLEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUdvRSxVQUFVaFIsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVV5UixJQUFJLFNBQVNuUyxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHcUUsSUFBSWpSLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVMFIsVUFBVSxTQUFTcFMsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR3NFLFVBQVVsUixLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVTJSLElBQUksU0FBU3JTLEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUd1RSxJQUFJblIsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVU0UixTQUFTLFNBQVN0UyxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHd0UsU0FBU3BSLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVNlIsVUFBVSxTQUFTdlMsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR3lFLFVBQVVyUixLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVThSLFFBQVEsU0FBU3hTLEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUcwRSxRQUFRdFIsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVUrUixjQUFjLFNBQVN6UyxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHMkUsY0FBY3ZSLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVZ1MsUUFBUSxTQUFTMVMsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBRzRFLFFBQVF4UixLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVWlTLGNBQWMsU0FBUzNTLEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUc2RSxjQUFjelIsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVVrUyxJQUFJLFNBQVM1UyxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHOEUsSUFBSTFSLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVbVMsVUFBVSxTQUFTN1MsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBRytFLFVBQVUzUixLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVW9TLGtCQUFrQixTQUFTOVMsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR2dGLGtCQUFrQjVSLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVcVMsd0JBQXdCLFNBQVMvUyxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHaUYsd0JBQXdCN1IsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVVzUyxVQUFVLFNBQVNoVCxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHa0YsVUFBVTlSLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVdVMsU0FBUyxTQUFTalQsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR21GLFNBQVMvUixLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVXdTLGVBQWUsU0FBU2xULEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUdvRixlQUFlaFMsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVV5UyxLQUFLLFNBQVNuVCxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHcUYsS0FBS2pTLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVMFMsV0FBVyxTQUFTcFQsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR3NGLFdBQVdsUyxLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVTJTLE1BQU0sU0FBU3JULEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUd1RixNQUFNblMsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVU0UyxZQUFZLFNBQVN0VCxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHd0YsWUFBWXBTLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVNlMsVUFBVSxTQUFTdlQsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR3lGLFVBQVVyUyxLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVThTLGdCQUFnQixTQUFTeFQsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBRzBGLGdCQUFnQnRTLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVK1MsUUFBUSxTQUFTelQsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBRzJGLFFBQVF2UyxLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVWdULGNBQWMsU0FBUzFULEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUc0RixjQUFjeFMsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVVpVCxhQUFhLFNBQVMzVCxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHNkYsYUFBYXpTLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVa1QsbUJBQW1CLFNBQVM1VCxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHOEYsbUJBQW1CMVMsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVVtVCxXQUFXLFNBQVM3VCxHQUFHLE9BQU9rQixLQUFLc04sa0JBQWtCVixHQUFHK0YsV0FBVzNTLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVb1QsVUFBVSxTQUFTOVQsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR2dHLFVBQVU1UyxLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVXFULFdBQVcsV0FBVyxPQUFPN1MsS0FBS3NOLGtCQUFrQlYsR0FBR2lHLFdBQVc3UyxPQUFPbEIsRUFBRVUsVUFBVXNULFdBQVcsU0FBU2hVLEdBQUcsT0FBT2tCLEtBQUtzTixrQkFBa0JWLEdBQUdrRyxXQUFXOVMsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVV1VCxNQUFNLFNBQVNqVSxFQUFFYyxHQUFHLE9BQU9JLEtBQUtzTixrQkFBa0JWLEdBQUdtRyxNQUFNalUsRUFBRWtCLEtBQUtKLElBQUlkLEVBQUVVLFVBQVV3VCxJQUFJLFdBQVcsT0FBT2hULEtBQUtzTixrQkFBa0JWLEdBQUdvRyxJQUFJaFQsT0FBT2xCLEVBQUVVLFVBQVVpRixLQUFLLFdBQVcsT0FBT3pFLEtBQUtzTixrQkFBa0JWLEdBQUduSSxLQUFLekUsT0FBT2xCLEVBQUVVLFVBQVUrTSxNQUFNLFdBQVcsT0FBT3ZNLEtBQUtzTixrQkFBa0JWLEdBQUdMLE1BQU12TSxPQUFPbEIsRUFBRVUsVUFBVXlULEtBQUssV0FBVyxPQUFPalQsS0FBS3NOLGtCQUFrQlYsR0FBR3FHLEtBQUtqVCxPQUFPbEIsRUFBRVUsVUFBVXVHLE1BQU0sV0FBVyxPQUFPL0YsS0FBS3NOLGtCQUFrQlYsR0FBRzdHLE1BQU0vRixPQUFPbEIsRUFBRVUsVUFBVTBULE1BQU0sV0FBVyxPQUFPbFQsS0FBS3NOLGtCQUFrQlYsR0FBR3NHLE1BQU1sVCxPQUFPbEIsRUFBRVUsVUFBVXdHLFNBQVMsV0FBVyxPQUFPaEcsS0FBS3NOLGtCQUFrQlYsR0FBRzVHLFNBQVNoRyxPQUFPbEIsRUFBRVUsVUFBVStFLElBQUksV0FBVyxPQUFPdkUsS0FBS3NOLGtCQUFrQlYsR0FBR3JJLElBQUl2RSxPQUFPbEIsRUFBRVUsVUFBVTJULE1BQU0sV0FBVyxPQUFPblQsS0FBS3NOLGtCQUFrQlYsR0FBR3VHLE1BQU1uVCxPQUFPbEIsRUFBRVUsVUFBVWlNLElBQUksV0FBVyxPQUFPekwsS0FBS3NOLGtCQUFrQlYsR0FBR25CLElBQUl6TCxPQUFPbEIsRUFBRVUsVUFBVTRULE1BQU0sV0FBVyxPQUFPcFQsS0FBS3NOLGtCQUFrQlYsR0FBR3dHLE1BQU1wVCxPQUFPbEIsRUFBRVUsVUFBVWtGLEtBQUssV0FBVyxPQUFPMUUsS0FBS3NOLGtCQUFrQlYsR0FBR2xJLEtBQUsxRSxPQUFPbEIsRUFBRVUsVUFBVTZULE1BQU0sV0FBVyxPQUFPclQsS0FBS3NOLGtCQUFrQlYsR0FBR3lHLE1BQU1yVCxPQUFPbEIsRUFBRVUsVUFBVThULE9BQU8sV0FBVyxPQUFPdFQsS0FBS3NOLGtCQUFrQlYsR0FBRzBHLE9BQU90VCxPQUFPbEIsRUFBRVUsVUFBVStULFdBQVcsV0FBVyxPQUFPdlQsS0FBS3NOLGtCQUFrQlYsR0FBRzJHLFdBQVd2VCxPQUFPbEIsRUFBRVUsVUFBVWdVLElBQUksV0FBVyxPQUFPeFQsS0FBS3NOLGtCQUFrQlYsR0FBRzRHLElBQUl4VCxPQUFPbEIsRUFBRVUsVUFBVWlVLFlBQVksU0FBUzNVLEVBQUVjLEdBQUcsT0FBT0ksS0FBS3NOLGtCQUFrQlYsR0FBRzZHLFlBQVl6VCxLQUFLbEIsRUFBRWMsSUFBSWQsRUFBRVUsVUFBVWtVLEtBQUssV0FBVyxPQUFPMVQsS0FBS3NOLGtCQUFrQlYsR0FBRzhHLEtBQUsxVCxPQUFPbEIsRUFBRVUsVUFBVW1VLElBQUksV0FBVyxPQUFPM1QsS0FBS3NOLGtCQUFrQlYsR0FBRytHLElBQUkzVCxPQUFPbEIsRUFBRVUsVUFBVW9VLEtBQUssV0FBVyxPQUFPNVQsS0FBS3NOLGtCQUFrQlYsR0FBR2dILEtBQUs1VCxPQUFPbEIsRUFBRVUsVUFBVXFVLFVBQVUsU0FBUy9VLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxFQUFFLElBQUlrQixLQUFLc04sa0JBQWtCVixHQUFHaUgsVUFBVTdULEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVc1UsTUFBTSxTQUFTaFYsR0FBRyxPQUFPa0IsS0FBS3NOLGtCQUFrQlYsR0FBR2tILE1BQU05VCxLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVXVVLFFBQVEsV0FBVyxPQUFPL1QsS0FBS3NOLGtCQUFrQlYsR0FBR21ILFFBQVEvVCxPQUFPbEIsRUFBRVUsVUFBVXdVLFdBQVcsV0FBVyxPQUFPaFUsS0FBS3NOLGtCQUFrQlYsR0FBR29ILFdBQVdoVSxPQUFPbEIsRUFBRVUsVUFBVXlVLFNBQVMsV0FBVyxPQUFPalUsS0FBS3NOLGtCQUFrQlYsR0FBR3FILFNBQVNqVSxPQUFPbEIsRUFBRVUsVUFBVTBVLFVBQVUsV0FBVyxPQUFPbFUsS0FBS3NOLGtCQUFrQlYsR0FBR3NILFVBQVVsVSxPQUFPbEIsRUFBRVUsVUFBVTJVLFNBQVMsV0FBVyxPQUFPblUsS0FBS3NOLGtCQUFrQlYsR0FBR3VILFNBQVNuVSxPQUFPbEIsRUFBRVUsVUFBVTRVLElBQUksV0FBVyxPQUFPcFUsS0FBS3NOLGtCQUFrQlYsR0FBR3dILElBQUlwVSxPQUFPbEIsRUFBRVUsVUFBVTZVLElBQUksV0FBVyxPQUFPclUsS0FBS3NOLGtCQUFrQlYsR0FBR3lILElBQUlyVSxPQUFPbEIsRUFBRVUsVUFBVThVLElBQUksV0FBVyxPQUFPdFUsS0FBS3NOLGtCQUFrQlYsR0FBRzBILElBQUl0VSxPQUFPbEIsRUFBRVUsVUFBVStVLEtBQUssV0FBVyxPQUFPdlUsS0FBS3NOLGtCQUFrQlYsR0FBRzJILEtBQUt2VSxPQUFPbEIsRUFBRVUsVUFBVWdWLEtBQUssV0FBVyxPQUFPeFUsS0FBS3NOLGtCQUFrQlYsR0FBRzRILEtBQUt4VSxPQUFPbEIsRUFBRVUsVUFBVWlWLEtBQUssV0FBVyxPQUFPelUsS0FBS3NOLGtCQUFrQlYsR0FBRzZILEtBQUt6VSxPQUFPbEIsRUFBRVUsVUFBVWtWLEtBQUssV0FBVyxPQUFPMVUsS0FBS3NOLGtCQUFrQlYsR0FBRzhILEtBQUsxVSxPQUFPbEIsRUFBRVUsVUFBVW1WLEtBQUssV0FBVyxPQUFPM1UsS0FBS3NOLGtCQUFrQlYsR0FBRytILEtBQUszVSxPQUFPbEIsRUFBRVUsVUFBVThFLEtBQUssV0FBVyxPQUFPdEUsS0FBS3NOLGtCQUFrQlYsR0FBR3RJLEtBQUt0RSxPQUFPbEIsRUFBRVUsVUFBVW9WLE1BQU0sV0FBVyxPQUFPNVUsS0FBS3NOLGtCQUFrQlYsR0FBR2dJLE1BQU01VSxPQUFPbEIsRUFBRVUsVUFBVXFWLE1BQU0sV0FBVyxPQUFPN1UsS0FBS3NOLGtCQUFrQlYsR0FBR2lJLE1BQU03VSxPQUFPbEIsRUFBRVUsVUFBVXNWLE1BQU0sV0FBVyxPQUFPOVUsS0FBS3NOLGtCQUFrQlYsR0FBR2tJLE1BQU05VSxPQUFPbEIsRUFBRVUsVUFBVXVWLElBQUksV0FBVyxPQUFPL1UsS0FBS3NOLGtCQUFrQlYsR0FBR21JLElBQUkvVSxPQUFPbEIsRUFBRVUsVUFBVXNILE1BQU0sV0FBVyxPQUFPOUcsS0FBS3NOLGtCQUFrQlYsR0FBRzlGLE1BQU05RyxPQUFPbEIsRUFBRVUsVUFBVXdWLEtBQUssU0FBU2xXLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxFQUFFLEdBQUdrQixLQUFLc04sa0JBQWtCVixHQUFHb0ksS0FBS2hWLEtBQUtsQixJQUFJQSxFQUFFVSxVQUFVeVYsUUFBUSxTQUFTblcsR0FBRyxZQUFPLElBQVNBLElBQUlBLEdBQUcsR0FBR2tCLEtBQUtzTixrQkFBa0JWLEdBQUdxSSxRQUFRalYsS0FBS2xCLElBQUlBLEVBQUVVLFVBQVUwVixXQUFXLFNBQVNwVyxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsR0FBRyxHQUFHa0IsS0FBS3NOLGtCQUFrQlYsR0FBR3NJLFdBQVdsVixLQUFLbEIsSUFBSUEsRUFBRVUsVUFBVTJWLGVBQWUsU0FBU3JXLEVBQUVjLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxHQUFFLEdBQUlJLEtBQUtzTixrQkFBa0JWLEdBQUd3SSxNQUFNRCxlQUFlblYsS0FBS2xCLEVBQUVjLElBQUlkLEVBQUVVLFVBQVU2VixzQkFBc0IsU0FBU3ZXLEVBQUVjLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxHQUFFLEdBQUlJLEtBQUtzTixrQkFBa0JWLEdBQUd3SSxNQUFNQyxzQkFBc0JyVixLQUFLbEIsRUFBRWMsSUFBSWQsRUFBRVUsVUFBVThWLE9BQU8sU0FBU3hXLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixHQUFHLFlBQU8sSUFBU3pCLElBQUlBLEVBQUUsWUFBTyxJQUFTTCxJQUFJQSxFQUFFLEdBQUcyQixLQUFLc04sa0JBQWtCVixHQUFHMEksT0FBT3RWLEtBQUtsQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsSUFBSXJCLEVBQUVVLFVBQVUrVixPQUFPLFNBQVN6VyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxZQUFPLElBQVN6QixJQUFJQSxFQUFFLGFBQVEsSUFBU0wsSUFBSUEsRUFBRSxDQUFDLEVBQUUsSUFBSTJCLEtBQUtzTixrQkFBa0JWLEdBQUcySSxPQUFPdlYsS0FBS2xCLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixJQUFJckIsRUFBRVUsVUFBVWdXLGdCQUFnQixTQUFTMVcsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxPQUFPMkIsS0FBS3NOLGtCQUFrQlYsR0FBRzRJLGdCQUFnQnhWLEtBQUtsQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxJQUFJUyxFQUFFVSxVQUFVaVcsZ0JBQWdCLFNBQVMzVyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxZQUFPLElBQVN6QixJQUFJQSxFQUFFLGFBQVEsSUFBU0wsSUFBSUEsRUFBRSxDQUFDLEVBQUUsSUFBSTJCLEtBQUtzTixrQkFBa0JWLEdBQUc4SSxnQkFBZ0IxVixLQUFLbEIsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLElBQUlyQixFQUFFVSxVQUFVbVcsZ0JBQWdCLFNBQVM3VyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxZQUFPLElBQVM5QixJQUFJQSxFQUFFLENBQUMsRUFBRSxTQUFJLElBQVM4QixJQUFJQSxFQUFFLFFBQVFILEtBQUtzTixrQkFBa0JWLEdBQUcrSSxnQkFBZ0IzVixLQUFLbEIsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLElBQUlyQixFQUFFVSxVQUFVb1csUUFBUSxTQUFTOVcsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxPQUFPc0IsS0FBS3NOLGtCQUFrQlYsR0FBR2dKLFFBQVE1VixLQUFLbEIsRUFBRWMsRUFBRVAsRUFBRVgsSUFBSUksRUFBRVUsVUFBVXFXLFFBQVEsU0FBUy9XLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsT0FBT3NCLEtBQUtzTixrQkFBa0JWLEdBQUdpSixRQUFRN1YsS0FBS2xCLEVBQUVjLEVBQUVQLEVBQUVYLElBQUlJLEVBQUVVLFVBQVVzVywyQkFBMkIsU0FBU2hYLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsWUFBTyxJQUFTSSxJQUFJQSxFQUFFLFFBQUcsSUFBU2MsSUFBSUEsRUFBRSxRQUFHLElBQVNQLElBQUlBLEVBQUUsUUFBRyxJQUFTWCxJQUFJQSxFQUFFLElBQUlrTyxHQUFHa0osMkJBQTJCOVYsS0FBS2xCLEVBQUVjLEVBQUVQLEVBQUVYLElBQUlJLEVBQUVVLFVBQVV1VyxLQUFLLFNBQVNqWCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLE9BQU8yQixLQUFLc04sa0JBQWtCVixHQUFHbUosS0FBSy9WLEtBQUtsQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxJQUFJUyxFQUFFVSxVQUFVd1csU0FBUyxTQUFTbFgsRUFBRWMsRUFBRVAsR0FBRyxZQUFPLElBQVNQLElBQUlBLEdBQUUsR0FBSWtCLEtBQUtzTixrQkFBa0IySSxHQUFHRCxTQUFTaFcsS0FBS2xCLEVBQUVjLEVBQUVQLElBQUlQLEVBQUVVLFVBQVUwVyxtQkFBbUIsU0FBU3BYLEVBQUVjLEdBQUcsT0FBT0ksS0FBS3NOLGtCQUFrQlYsR0FBR3NKLG1CQUFtQmxXLEtBQUtsQixFQUFFYyxJQUFJZCxFQUFFVSxVQUFVMlcsZUFBZSxTQUFTclgsRUFBRWMsR0FBRyxPQUFPSSxLQUFLc04sa0JBQWtCVixHQUFHdUosZUFBZW5XLEtBQUtsQixFQUFFYyxJQUFJZCxFQUFFVSxVQUFVNFcsZUFBZSxTQUFTdFgsRUFBRWMsR0FBRyxPQUFPSSxLQUFLc04sa0JBQWtCVixHQUFHd0osZUFBZXBXLEtBQUtsQixFQUFFYyxJQUFJZCxFQUFFVSxVQUFVNlcsS0FBSyxTQUFTdlgsRUFBRWMsR0FBRyxZQUFPLElBQVNkLElBQUlBLEVBQUUsUUFBRyxJQUFTYyxJQUFJQSxHQUFFLEdBQUlJLEtBQUtzTixrQkFBa0JWLEdBQUd5SixLQUFLclcsS0FBS2xCLEVBQUVjLElBQUlkLEVBQUVVLFVBQVU4VyxhQUFhLFNBQVN4WCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsRUFBRXZDLEVBQUUrQixHQUFHLFlBQU8sSUFBU2pCLElBQUlBLEVBQUUsUUFBRyxJQUFTTCxJQUFJQSxFQUFFLFFBQUcsSUFBUzhCLElBQUlBLEVBQUUsUUFBRyxJQUFTdkMsSUFBSUEsRUFBRSxRQUFHLElBQVMrQixJQUFJQSxFQUFFLEdBQUdLLEtBQUtzTixrQkFBa0JWLEdBQUcwSixhQUFhdFcsS0FBS2xCLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsRUFBRStCLElBQUliLEVBQUVVLFVBQVUrVyxhQUFhLFNBQVN6WCxFQUFFYyxHQUFHLE9BQU9JLEtBQUtzTixrQkFBa0JWLEdBQUcySixhQUFhdlcsS0FBS2xCLEVBQUVjLElBQUlkLEVBQUVVLFVBQVVnWCxJQUFJLFdBQVcsT0FBT3hXLEtBQUtzTixrQkFBa0JWLEdBQUc2SixTQUFTRCxJQUFJeFcsT0FBT2xCLEVBQUVVLFVBQVVrWCxLQUFLLFdBQVcsT0FBTzFXLEtBQUtzTixrQkFBa0JWLEdBQUc2SixTQUFTQyxLQUFLMVcsT0FBT2xCLEVBQUVVLFVBQVVtWCxLQUFLLFdBQVcsT0FBTzNXLEtBQUtzTixrQkFBa0JWLEdBQUc2SixTQUFTRSxLQUFLM1csT0FBT2xCLEVBQUVVLFVBQVVvWCxNQUFNLFdBQVcsT0FBTzVXLEtBQUtzTixrQkFBa0JWLEdBQUc2SixTQUFTRyxNQUFNNVcsT0FBT2xCLEVBQXQ3ZixHQUEyN2ZSLE9BQU9DLGVBQWVrTyxHQUFHOU4sT0FBT2tZLFlBQVksQ0FBQ2hZLE1BQU0sU0FBU0MsR0FBRyxRQUFRQSxHQUFHLE1BQU1BLEVBQUVrTyxRQUFRLE1BQU1sTyxFQUFFeU0sT0FBTyxNQUFNek0sRUFBRW1NLFNBQVMsSUFBSWdMLEdBQUcsU0FBU25YLEdBQUcsU0FBU08sRUFBRU8sRUFBRVAsRUFBRVgsUUFBRyxJQUFTVyxJQUFJQSxHQUFFLEdBQUksSUFBSWhCLEVBQUVTLEVBQUVmLEtBQUtpQyxLQUFLSixFQUFFMkwsTUFBTTNMLEVBQUVxTCxNQUFNLEtBQUtyTCxFQUFFb04sU0FBU2hOLEtBQUszQixFQUFFeVksVUFBVXpYLEVBQUVoQixFQUFFRixLQUFLTyxFQUFFLE1BQU1MLEVBQUVGLE9BQU9FLEVBQUVGLEtBQUt3TyxLQUFLb0ssaUJBQWlCdkwsWUFBWSxJQUFJbUIsS0FBS3FLLGlCQUFpQjNZLEdBQUcsTUFBTVMsR0FBRyxNQUFNNk4sS0FBSytCLGNBQWNyUSxHQUFHUyxFQUFFLE9BQU9ULEVBQUUsT0FBT3VCLEVBQUVQLEVBQUVQLEdBQUdPLEVBQUUyVyxTQUFTLFNBQVNsWCxFQUFFYyxFQUFFbEIsRUFBRUwsR0FBRyxZQUFPLElBQVN1QixJQUFJQSxHQUFFLEdBQUksTUFBTXZCLEdBQUdBLElBQUlTLEVBQUVtTSxRQUFRbk0sRUFBRUEsRUFBRWdQLE9BQU96UCxJQUFJLElBQUlnQixFQUFFUCxFQUFFYyxFQUFFbEIsSUFBSVcsRUFBRUcsVUFBVWlELE9BQU8sU0FBUzNELEdBQUcsR0FBR0EsRUFBRW1NLFFBQVFqTCxLQUFLaUwsTUFBTSxNQUFNLElBQUkxSSxNQUFNLDJCQUEyQnpELEVBQUVtTSxNQUFNLHlCQUF5QmpMLEtBQUtpTCxNQUFNLGdCQUFnQixJQUFJbEgsRUFBRWpGLEVBQUV5TSxNQUFNdkwsS0FBS3VMLE9BQU8sTUFBTSxJQUFJaEosTUFBTSwyQkFBMkJ6RCxFQUFFeU0sTUFBTSx5QkFBeUJ2TCxLQUFLdUwsTUFBTSxnQkFBZ0JvQixLQUFLK0IsY0FBYzFPLE1BQU1BLEtBQUtnTixPQUFPbE8sRUFBRWtPLE9BQU9MLEtBQUtTLGVBQWVwTixPQUFPWCxFQUFFRyxVQUFVZ1AsUUFBUSxXQUFXN0IsS0FBS3NLLGdCQUFnQmpYLE1BQU1BLEtBQUsrTSxvQkFBbUIsR0FBSTFOLEVBQTN6QixDQUE4ekJvTixJQUFJbk8sT0FBT0MsZUFBZTBYLEdBQUd0WCxPQUFPa1ksWUFBWSxDQUFDaFksTUFBTSxTQUFTQyxHQUFHLE9BQU9BLGFBQWEyTixJQUFJLE1BQU0zTixFQUFFMkQsUUFBUTNELEVBQUUyRCxrQkFBa0J5VSxZQUFZLElBQUlDLEdBQUdDLEdBQUdDLEdBQUdDLEdBQUdDLEdBQUdDLEdBQUd2QixHQUFHRCxVQUFVLFNBQVNsWCxHQUFHQSxFQUFFMlksR0FBRyxLQUFLM1ksRUFBRTRZLEdBQUcsS0FBSzVZLEVBQUU2WSxHQUFHLEtBQUs3WSxFQUFFOFksR0FBRyxLQUFLOVksRUFBRStZLEdBQUcsS0FBSy9ZLEVBQUVnWixHQUFHLEtBQUtoWixFQUFFaVosR0FBRyxLQUE3RSxDQUFtRlosS0FBS0EsR0FBRyxLQUFLLFNBQVNyWSxHQUFHQSxFQUFFa1osUUFBUSxVQUFVbFosRUFBRW1aLE1BQU0sUUFBUW5aLEVBQUVvWixLQUFLLFFBQVFwWixFQUFFcVosVUFBVSxZQUEzRSxDQUF3RmYsS0FBS0EsR0FBRyxLQUFLLFNBQVN0WSxHQUFHQSxFQUFFa1osUUFBUSxVQUFVbFosRUFBRW1aLE1BQU0sUUFBUW5aLEVBQUVvWixLQUFLLE9BQU9wWixFQUFFcVosVUFBVSxZQUExRSxDQUF1RmQsS0FBS0EsR0FBRyxLQUFLLFNBQVN2WSxHQUFHQSxFQUFFa1osUUFBUSxVQUFVbFosRUFBRW1aLE1BQU0sVUFBVW5aLEVBQUVvWixLQUFLLFVBQVVwWixFQUFFcVosVUFBVSxZQUEvRSxDQUE0RmIsS0FBS0EsR0FBRyxLQUFLLFNBQVN4WSxHQUFHQSxFQUFFa1osUUFBUSxZQUFZbFosRUFBRW1aLE1BQU0sWUFBWW5aLEVBQUVvWixLQUFLLFlBQVlwWixFQUFFcVosVUFBVSxZQUFyRixDQUFrR1osS0FBS0EsR0FBRyxLQUFLLElBQUlhLEdBQUcsQ0FBQ0osUUFBUVYsR0FBR1csTUFBTWIsR0FBR2MsS0FBS2IsR0FBR2MsVUFBVVosSUFBSSxTQUFTYyxHQUFHdlosRUFBRWMsR0FBRyxHQUFHLFdBQVdkLEdBQUcsV0FBV2MsRUFBRSxDQUFDLEdBQUcsV0FBV2QsR0FBRyxXQUFXYyxFQUFFLE1BQU0sU0FBUyxNQUFNLElBQUkyQyxNQUFNLGtCQUFrQnpELEVBQUUsU0FBU2MsR0FBRyxPQUFPd1ksR0FBR3RaLEdBQUdjLEdBQUcsU0FBUzBZLEdBQUd4WixHQUFHLE9BQU91WixHQUFHdlosRUFBRSxTQUFTLFNBQVN5WixHQUFHelosRUFBRWMsR0FBRyxHQUFHZCxFQUFFbU0sUUFBUXJMLEVBQUVxTCxNQUFNLE1BQU0sQ0FBQ25NLEVBQUVjLEdBQUcsSUFBSVAsRUFBRWdaLEdBQUd2WixFQUFFbU0sTUFBTXJMLEVBQUVxTCxPQUFPLE1BQU0sQ0FBQ25NLEVBQUVpUCxLQUFLMU8sR0FBR08sRUFBRW1PLEtBQUsxTyxJQUFJLFNBQVNtWixHQUFHMVosRUFBRWMsR0FBR2tFLEVBQUVoRixFQUFFbU0sUUFBUXJMLEVBQUVxTCxPQUFNLFdBQVcsTUFBTSwyQkFBMkJuTSxFQUFFbU0sTUFBTSxnQkFBZ0JyTCxFQUFFcUwsTUFBTSx3QkFBdUIsU0FBU3dOLEdBQUczWixHQUFHLElBQUljLEVBQUUsR0FBRyxPQUFPLFNBQVNkLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsR0FBRyxNQUFNa0IsRUFBUyxHQUFHQSxhQUFhNk0sR0FBZXBOLEVBQUU4QixLQUFLdkIsUUFBRyxHQUFHdkIsRUFBRXVCLEVBQUdHLE1BQU1rRSxRQUFRNUYsSUFBSSxpQkFBaUJBLEVBQTNDLENBQW9ELElBQUlBLEVBQU04QixFQUFFUCxFQUFFLElBQUksSUFBSWhDLEtBQUt1QyxFQUFFLENBQUMsSUFBSVIsRUFBRVEsRUFBRXZDLEdBQUdjLEVBQUVnYSxJQUFJL1ksS0FBS2pCLEVBQUVnUyxJQUFJL1EsR0FBR2IsRUFBRWEsRUFBRU4sRUFBRVgsTUFBcE0sQ0FBME1JLEVBQUVjLEVBQUUsSUFBSStZLEtBQUsvWSxFQUFFLElBQUlnWixHQUFHQyxHQUFHdmEsT0FBTytFLE9BQU8sQ0FBQ3lWLGVBQWVQLEdBQUdRLGlCQUFpQlAsR0FBR1EsZUFBZSxTQUFTbGEsRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUUsRUFBRUEsRUFBRU8sRUFBRXNCLE9BQU83QixJQUFJLEdBQUdPLEVBQUVQLEdBQUc0TixLQUFLbk8sRUFBRW1PLEdBQUcsT0FBTSxFQUFHLE9BQU0sR0FBSWdNLHNCQUFzQlIsS0FBS1MsR0FBRyxXQUFXLFNBQVNwYSxJQUFJa0IsS0FBS21aLG9CQUFvQixHQUFHblosS0FBS29aLGVBQWUsRUFBRXBaLEtBQUtxWixTQUFTLEVBQUVyWixLQUFLc1osV0FBVyxFQUFFdFosS0FBS3VaLGlCQUFpQixFQUFFdlosS0FBS3daLGVBQWUsRUFBRXhaLEtBQUt5WixjQUFjLEVBQUV6WixLQUFLMFosWUFBWSxFQUFFMVosS0FBSzJaLFdBQVcsR0FBRzNaLEtBQUs0WixZQUFZLEVBQUU1WixLQUFLNlosV0FBVyxJQUFJQyxRQUFROVosS0FBSytaLFdBQVUsRUFBRy9aLEtBQUtnYSxjQUFjLENBQUNDLFNBQVMsRUFBRUMsV0FBVyxFQUFFQyxVQUFVLEVBQUVDLFFBQVEsR0FBR0MsT0FBTyxNQUFNLE9BQU92YixFQUFFVSxVQUFVZ1AsUUFBUSxXQUFXLElBQUksSUFBSTFQLEtBQUtrQixLQUFLbVosb0JBQW9CblosS0FBS21aLG9CQUFvQnJhLEdBQUcwUCxXQUFXMVAsRUFBemQsR0FBOGR3YixHQUFHLFdBQVcsU0FBU3hiLEVBQUVBLEdBQUdrQixLQUFLdWEsSUFBSXpiLEVBQUVrQixLQUFLd2EsU0FBUyxHQUFHeGEsS0FBS3lhLGdCQUFnQixHQUFHemEsS0FBSzBhLHFCQUFxQixFQUFFMWEsS0FBSzJhLE1BQU0sSUFBSXpCLEdBQUcsT0FBT3BhLEVBQUVVLFVBQVVvYixNQUFNLFdBQVcsT0FBT3ZiLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSWxCLEVBQUVjLEVBQUVQLEVBQUUsT0FBT1gsRUFBRXNCLE1BQUssU0FBU3RCLEdBQUcsT0FBT0EsRUFBRWdDLE9BQU8sS0FBSyxFQUFFLEdBQUcsTUFBTVYsS0FBSzZhLG1CQUFtQixNQUFNLENBQUMsRUFBRTdhLEtBQUs2YSxtQkFBbUJyYSxNQUFLLGdCQUFlLEdBQUcsTUFBTVIsS0FBSzhhLGdCQUFnQixNQUFNLENBQUMsR0FBR2hjLEVBQUVrQixLQUFLK2Esb0JBQW9CbmIsRUFBRSxFQUFFbEIsRUFBRWdDLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBT2QsRUFBRWQsRUFBRW9DLFFBQVE3QixFQUFFUCxFQUFFYyxHQUFHLENBQUMsRUFBRUksS0FBS2diLGtCQUFrQjNiLEdBQUc0YixVQUFVLENBQUMsRUFBRSxHQUFHLEtBQUssRUFBRSxPQUFPdmMsRUFBRWlDLE9BQU8sQ0FBQyxFQUFFWCxLQUFLa2IsV0FBVzdiLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLE9BQU9YLEVBQUVpQyxPQUFPLENBQUMsR0FBRyxLQUFLLEVBQUUsT0FBT2YsSUFBSSxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsTUFBTSxJQUFJMkMsTUFBTSxrRkFBZ0ZqRSxPQUFPQyxlQUFlTyxFQUFFVSxVQUFVLFVBQVUsQ0FBQ2YsSUFBSSxXQUFXLEdBQUcsTUFBTXVCLEtBQUs2YSxtQkFBbUIsTUFBTSxJQUFJdFksTUFBTSxZQUFZdkMsS0FBS21iLFlBQVksOEZBQThGLEdBQUcsTUFBTW5iLEtBQUs4YSxnQkFBZ0IsQ0FBQyxJQUFJaGMsRUFBRWtCLEtBQUtvYixrQ0FBa0N4YixFQUFFZCxFQUFFWCxLQUFLLEdBQUdXLEVBQUV1YyxVQUFVLE1BQU0sSUFBSTlZLE1BQU0saUNBQWlDM0MsRUFBRSw4RkFBOEZJLEtBQUtrYixXQUFXdGIsR0FBRyxPQUFPSSxLQUFLOGEsaUJBQWlCdGMsWUFBVyxFQUFHOEQsY0FBYSxJQUFLeEQsRUFBRVUsVUFBVThiLGFBQWEsV0FBVyxPQUFPaGQsT0FBT2lkLEtBQUt2YixLQUFLeWEsa0JBQWtCM2IsRUFBRVUsVUFBVWdjLFlBQVksU0FBUzFjLEdBQUcsS0FBS0EsS0FBS2tCLEtBQUt3YSxVQUFVLENBQUMsS0FBSzFiLEtBQUtrQixLQUFLeWEsaUJBQWlCLE9BQU8sS0FBSyxHQUFHemEsS0FBS2diLGtCQUFrQmxjLEdBQUd1YyxVQUFVLE9BQU8sS0FBSyxPQUFPcmIsS0FBS3dhLFNBQVMxYixJQUFJQSxFQUFFVSxVQUFVaWMsbUJBQW1CLFNBQVMzYyxHQUFHLE9BQU9BLEtBQUtrQixLQUFLeWEsZ0JBQWdCemEsS0FBS3lhLGdCQUFnQjNiLEdBQUc0YyxRQUFRLE1BQU01YyxFQUFFVSxVQUFVbWMsZ0JBQWdCLFNBQVM3YyxFQUFFYyxFQUFFUCxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxHQUFHUCxLQUFLa0IsS0FBS3lhLGlCQUFpQjlZLFFBQVFDLEtBQUs5QyxFQUFFLHVFQUFzRSxJQUFLa0IsS0FBS3lhLGdCQUFnQjNiLEdBQUcsQ0FBQzRjLFFBQVE5YixFQUFFZ2MsU0FBU3ZjLElBQUcsSUFBS1AsRUFBRVUsVUFBVTBiLFdBQVcsU0FBU3BjLEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJSixFQUFFUCxFQUFFaEIsRUFBRSxPQUFPSyxFQUFFc0IsTUFBSyxTQUFTdEIsR0FBRyxPQUFPQSxFQUFFZ0MsT0FBTyxLQUFLLEVBQUUsR0FBRyxNQUFNVixLQUFLeWEsZ0JBQWdCM2IsR0FBRyxNQUFNLElBQUl5RCxNQUFNLGlCQUFpQnpELEVBQUUsMkJBQTJCLE9BQU9rQixLQUFLbWIsWUFBWXJjLEVBQUUsTUFBTWtCLEtBQUt3YSxTQUFTMWIsR0FBRyxDQUFDLEVBQUUsSUFBSWtCLEtBQUs4YSxnQkFBZ0IsS0FBS2xiLEVBQUVJLEtBQUtnYixrQkFBa0JsYyxHQUFHTyxFQUFFTyxFQUFFcWIsUUFBUXJiLEVBQUV5YixVQUFVLENBQUMsRUFBRWhjLEdBQUcsQ0FBQyxFQUFFLElBQUksS0FBSyxFQUFFLE9BQU9oQixFQUFFSyxFQUFFaUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUV0QyxFQUFFZ0IsRUFBRVgsRUFBRWdDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSXJDLEVBQUUsTUFBTSxDQUFDLEdBQUUsR0FBSUssRUFBRWdDLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBT1YsS0FBSzhhLGdCQUFnQjlhLEtBQUt3YSxTQUFTMWIsR0FBR2tCLEtBQUs2YixTQUFTLElBQUluUixHQUFFMUssS0FBSzhhLGlCQUFpQixDQUFDLEdBQUUsV0FBVWhjLEVBQUVVLFVBQVV3YixrQkFBa0IsU0FBU2xjLEdBQUcsSUFBSWMsRUFBRUksS0FBS1gsRUFBRVcsS0FBS3lhLGdCQUFnQjNiLEdBQUcsR0FBRyxNQUFNTyxFQUFFLE1BQU0sSUFBSWtELE1BQU0sNkJBQTZCekQsRUFBRSw0QkFBNEIsSUFBSSxJQUFJSixFQUFFVyxFQUFFcWMsVUFBVSxHQUFHeGIsUUFBUTRiLFFBQVFwZCxLQUFLQSxFQUFFLENBQUMsSUFBSUwsSUFBSTJCLEtBQUswYSxxQkFBcUJ2YSxFQUFFekIsRUFBRThCLE1BQUssU0FBU25CLEdBQUcsUUFBUWhCLEVBQUV1QixFQUFFOGEsdUJBQXdCOWEsRUFBRTRhLFNBQVMxYixHQUFHTyxFQUFFTyxFQUFFaWIsbUJBQW1CLEtBQUssT0FBTWtCLE9BQU0sU0FBUzFjLEdBQUcsUUFBUWhCLEVBQUV1QixFQUFFOGEsdUJBQXdCOWEsRUFBRWliLG1CQUFtQixLQUFLbFosUUFBUUMsS0FBSyw2QkFBNkI5QyxFQUFFLFdBQVc2QyxRQUFRQyxLQUFLdkMsRUFBRXlRLE9BQU96USxFQUFFMmMsU0FBUyxPQUFNLE9BQU9oYyxLQUFLNmEsbUJBQW1CMWEsRUFBRSxDQUFDOGEsUUFBUTlhLEVBQUVrYixXQUFVLEdBQUksT0FBT3JiLEtBQUt3YSxTQUFTMWIsR0FBR0osRUFBRSxDQUFDdWMsU0FBUSxFQUFHSSxXQUFVLEdBQUksTUFBTXpiLEdBQUcsT0FBTytCLFFBQVFDLEtBQUssNkJBQTZCOUMsRUFBRSxXQUFXNkMsUUFBUUMsS0FBS2hDLEVBQUVrUSxPQUFPbFEsRUFBRW9jLFNBQVMsQ0FBQ2YsU0FBUSxFQUFHSSxXQUFVLEtBQU12YyxFQUFFVSxVQUFVeWMsY0FBYyxTQUFTbmQsR0FBRyxLQUFLQSxLQUFLa0IsS0FBS3lhLGlCQUFpQixNQUFNLElBQUlsWSxNQUFNekQsRUFBRSxrQ0FBa0NrQixLQUFLbWIsY0FBY3JjLEdBQUcsTUFBTWtCLEtBQUs2YSxvQkFBb0I3YSxLQUFLMGEsdUJBQXVCNWIsS0FBS2tCLEtBQUt3YSxXQUFXeGEsS0FBS3dhLFNBQVMxYixHQUFHMFAsaUJBQWlCeE8sS0FBS3dhLFNBQVMxYixXQUFXa0IsS0FBS3lhLGdCQUFnQjNiLEdBQUdrQixLQUFLbWIsY0FBY3JjLElBQUlrQixLQUFLNmEsbUJBQW1CLEtBQUs3YSxLQUFLbWIsWUFBWSxLQUFLbmIsS0FBSzhhLGdCQUFnQixPQUFPaGMsRUFBRVUsVUFBVXViLGtCQUFrQixXQUFXLElBQUlqYyxFQUFFa0IsS0FBSyxHQUFHLElBQUkxQixPQUFPaWQsS0FBS3ZiLEtBQUt5YSxpQkFBaUJ2WixPQUFPLE1BQU0sSUFBSXFCLE1BQU0saUNBQWlDLE9BQU9qRSxPQUFPaWQsS0FBS3ZiLEtBQUt5YSxpQkFBaUJuVixNQUFLLFNBQVMxRixFQUFFUCxHQUFHLE9BQU9QLEVBQUUyYixnQkFBZ0JwYixHQUFHdWMsU0FBUzljLEVBQUUyYixnQkFBZ0I3YSxHQUFHZ2MsYUFBWTljLEVBQUVVLFVBQVU0YixnQ0FBZ0MsV0FBVyxJQUFJLElBQUl0YyxFQUFFa0IsS0FBSythLG9CQUFvQm5iLEVBQUUsRUFBRUEsRUFBRWQsRUFBRW9DLE9BQU90QixJQUFJLENBQUMsSUFBSVAsRUFBRVAsRUFBRWMsR0FBR2xCLEVBQUVzQixLQUFLZ2Isa0JBQWtCM2IsR0FBR2hCLEVBQUVLLEVBQUV1YyxRQUFROWEsRUFBRXpCLEVBQUUyYyxVQUFVLEdBQUdsYixHQUFHOUIsRUFBRSxNQUFNLENBQUNGLEtBQUtrQixFQUFFZ2MsVUFBVWxiLEdBQUcsTUFBTSxJQUFJb0MsTUFBTSwyRUFBMkV6RCxFQUFFVSxVQUFVMGMsU0FBUyxTQUFTcGQsRUFBRWMsR0FBR0ksS0FBS3FOLE1BQU12TyxFQUFFYyxFQUFFSSxLQUFLc08sU0FBUzFPLEtBQUtkLEVBQUVVLFVBQVUyYyxLQUFLLFNBQVNyZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUVzQixLQUFLM0IsRUFBRSxLQUFLLEdBQUcsTUFBTXVCLEVBQUUsQ0FBQyxHQUFHLG1CQUFtQmQsRUFBRSxNQUFNLElBQUl5RCxNQUFNLHVDQUF1QzNDLEVBQUVkLE1BQU0sQ0FBQyxHQUFHLGlCQUFpQkEsS0FBS0EsYUFBYXdILFFBQVEsTUFBTSxJQUFJL0QsTUFBTSxrRkFBa0YsR0FBRyxtQkFBbUIzQyxFQUFFLE1BQU0sSUFBSTJDLE1BQU0sa0ZBQWtGbEUsRUFBRVMsRUFBRSxPQUFPa0IsS0FBS29jLFdBQVUsV0FBVyxPQUFPMWQsRUFBRTJkLFdBQVdoZSxNQUFJLFdBQVcsT0FBT0ssRUFBRTRkLFNBQVNqZCxNQUFJLFdBQVcsT0FBT0EsRUFBRU8sZUFBZU0sU0FBU3lCLFFBQVE0YSxNQUFNLDJDQUEyQ2xkLE1BQUtQLEVBQUVVLFVBQVU0YyxVQUFVLFNBQVN0ZCxFQUFFYyxFQUFFUCxHQUFHUCxJQUFJLElBQUksSUFBSUosRUFBRVcsSUFBSSxPQUFPTyxJQUFJbEIsRUFBRSxNQUFNSSxHQUFHLE1BQU1jLElBQUlkLElBQUlBLEVBQUVVLFVBQVUwTixhQUFhLFdBQVcsT0FBT3BPLEVBQUVvTyxnQkFBZ0JwTyxFQUFFVSxVQUFVdVgsZUFBZSxXQUFXLE9BQU9qWSxFQUFFaVksa0JBQWtCalksRUFBRVUsVUFBVTJQLE1BQU0sU0FBU3JRLEdBQUcsSUFBSWMsRUFBRTZNLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDeUIsT0FBT2xPLEVBQUVrTyxRQUFRbE8sRUFBRW1NLE9BQU8sT0FBT2pMLEtBQUt3YyxZQUFZLENBQUMxZCxHQUFHYyxHQUFFLFNBQVNkLEdBQUcsTUFBTSxDQUFDQSxFQUFFNlAsY0FBYS9PLEdBQUdkLEVBQUVVLFVBQVVpZCxVQUFVLFNBQVMzZCxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUVMLEVBQUUyQixLQUFLRyxFQUFFLEdBQUd2QyxFQUFFb0MsS0FBSzBjLFdBQVcvYyxFQUFFLE1BQU1LLEtBQUsyYSxNQUFNZ0MsWUFBWTNjLEtBQUsyYSxNQUFNZ0MsWUFBWXhlLEtBQUssR0FBR2lDLEVBQUUsU0FBU3RCLEdBQUdsQixJQUFJdUMsRUFBRXJCLEVBQUVvRyxLQUFJLFNBQVNwRyxHQUFHLE9BQU9ULEVBQUV1ZSxLQUFLdmUsRUFBRThRLE1BQU1yUSxTQUFRakIsRUFBRW1DLEtBQUsyYSxNQUFNdEIsU0FBU3BiLEVBQUUrQixLQUFLMmEsTUFBTXJCLFdBQVcsR0FBR3RaLEtBQUtvYyxXQUFVLFdBQVcsT0FBTy9kLEVBQUVzYyxNQUFNakIsaUJBQWUsV0FBVyxPQUFPcmIsRUFBRXNjLE1BQU1qQixpQkFBZSxXQUFXaGIsRUFBRUwsRUFBRWtjLElBQUluWSxRQUFRLFNBQVMvRCxFQUFFd2QsU0FBUy9RLGNBQWNuTCxFQUFFQyxHQUFFLFdBQVcsT0FBT2QsRUFBRVQsRUFBRXdlLFFBQVF6YyxNQUFLdEIsRUFBRVQsRUFBRXdlLFFBQVF6YyxNQUFLeEMsRUFBRSxDQUFDLElBQUlpRyxFQUFFLENBQUNvSixHQUFHak4sS0FBSzJhLE1BQU12QixpQkFBaUJqYixLQUFLd0IsRUFBRW1kLE9BQU9sZCxFQUFFbWQsUUFBUWhkLE1BQU1rRSxRQUFRdkYsR0FBR0EsRUFBRSxDQUFDQSxHQUFHc2UsTUFBTTdjLEdBQUcsTUFBTWQsSUFBSXdFLEVBQUVvWixTQUFTLFNBQVNuZSxHQUFHLE9BQU9PLEVBQUVQLEVBQUVxQixLQUFLSCxLQUFLMmEsTUFBTXVDLFdBQVcvYixLQUFLMEMsR0FBRyxPQUFPN0QsS0FBSzJhLE1BQU1aLFdBQVcvWixLQUFLMmEsTUFBTVgsY0FBY0ksUUFBUWpaLEtBQUssQ0FBQ2hELEtBQUt3QixFQUFFd2QsV0FBV25kLEtBQUsyYSxNQUFNdEIsU0FBU3hiLEVBQUV1ZixtQkFBbUJwZCxLQUFLMmEsTUFBTXRCLFNBQVNnRSxhQUFhcmQsS0FBSzJhLE1BQU1yQixXQUFXcmIsRUFBRXFmLHFCQUFxQnRkLEtBQUsyYSxNQUFNckIsV0FBV2lFLFlBQVlqZixPQUFPaWQsS0FBSzNiLEdBQUdzRixLQUFJLFNBQVNwRyxHQUFHLE9BQU9jLEVBQUVkLEdBQUd5TSxTQUFRaVMsWUFBWXpkLE1BQU1rRSxRQUFRdkYsR0FBR0EsRUFBRXdHLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRXlNLFNBQVE3TSxFQUFFNk0sUUFBUTdNLEdBQUdJLEVBQUVVLFVBQVU0TixlQUFlLFNBQVN0TyxFQUFFYyxHQUFHLElBQUlQLEVBQUVXLEtBQUsyYSxNQUFNZCxXQUFXbkIsSUFBSTVaLEVBQUVrTyxRQUFRaE4sS0FBSzJhLE1BQU1kLFdBQVdwYixJQUFJSyxFQUFFa08sUUFBUXlRLFNBQVMsRUFBRSxHQUFHemQsS0FBSzJhLE1BQU1yQixhQUFhLFdBQVd4YSxFQUFFbU0sT0FBT2pMLEtBQUsyYSxNQUFNcEIsbUJBQW1CLElBQUlsYSxFQUFFLENBQUNXLEtBQUsyYSxNQUFNbkIsaUJBQWlCLElBQUk5YSxFQUFFLEVBQUUsY0FBY0ksRUFBRW1NLE9BQU8sV0FBV25NLEVBQUVtTSxRQUFRdk0sRUFBRUksRUFBRXdNLEtBQUtuRixFQUFFckgsRUFBRW1NLFFBQVFqTCxLQUFLMmEsTUFBTWQsV0FBVzVYLElBQUluRCxFQUFFa08sT0FBTyxDQUFDNlAsUUFBUSxNQUFNamQsRUFBRUEsRUFBRUksS0FBSzZjLFFBQVE1UixNQUFNbk0sRUFBRW1NLE1BQU1NLE1BQU16TSxFQUFFeU0sTUFBTWdELE1BQU03UCxFQUFFK2UsU0FBUyxJQUFJemQsS0FBSzJhLE1BQU10QixVQUFVM2EsRUFBRSxNQUFNa0IsRUFBRUEsRUFBRThkLFNBQVM1ZSxFQUFFa08sT0FBT2xPLEVBQUV5TSxNQUFNek0sRUFBRW1NLE9BQU9qTCxLQUFLNmMsUUFBUWEsU0FBUzVlLEVBQUVrTyxPQUFPbE8sRUFBRXlNLE1BQU16TSxFQUFFbU0sT0FBT2pMLEtBQUsyYSxNQUFNZCxXQUFXcGIsSUFBSUssRUFBRWtPLFFBQVF5USxXQUFXM2UsYUFBYW1YLElBQUlqVyxLQUFLMmQsTUFBTTdlLElBQUlBLEVBQUVVLFVBQVV3WCxpQkFBaUIsU0FBU2xZLEdBQUcsR0FBRyxNQUFNa0IsS0FBSzJhLE1BQU14QixvQkFBb0JyYSxFQUFFWCxNQUFNLE1BQU0sSUFBSW9FLE1BQU0sc0JBQXNCekQsRUFBRVgsS0FBSywyQkFBMkI2QixLQUFLMmEsTUFBTXhCLG9CQUFvQnJhLEVBQUVYLE1BQU1XLEdBQUdBLEVBQUVVLFVBQVVrUCxjQUFjLFNBQVM1UCxHQUFHLEdBQUdrQixLQUFLMmEsTUFBTWQsV0FBV25CLElBQUk1WixFQUFFa08sUUFBUSxDQUFDaE4sS0FBSzJhLE1BQU1yQixhQUFhLFdBQVd4YSxFQUFFbU0sT0FBT2pMLEtBQUsyYSxNQUFNcEIsbUJBQW1CLElBQUkzWixFQUFFSSxLQUFLMmEsTUFBTWQsV0FBV3BiLElBQUlLLEVBQUVrTyxRQUFRcE4sRUFBRTZkLFVBQVUsR0FBRyxjQUFjM2UsRUFBRW1NLFFBQVFqTCxLQUFLMmEsTUFBTXRCLFVBQVV6WixFQUFFMk8sT0FBT3ZPLEtBQUsyYSxNQUFNbkIsaUJBQWlCNVosRUFBRWlkLFFBQVFlLFlBQVk5ZSxFQUFFa08sUUFBUWhOLEtBQUsyYSxNQUFNZCxXQUFXZ0UsT0FBTy9lLEVBQUVrTyxTQUFTaE4sS0FBSzJhLE1BQU1kLFdBQVdwYixJQUFJSyxFQUFFa08sUUFBUXlRLGFBQWEzZSxFQUFFVSxVQUFVc2UsaUJBQWlCLFdBQVcsSUFBSSxJQUFJaGYsS0FBS2tCLEtBQUsyYSxNQUFNeEIsb0JBQW9CLENBQUMsSUFBSXZaLEVBQUVJLEtBQUsyYSxNQUFNeEIsb0JBQW9CcmEsR0FBR2tCLEtBQUtpWCxnQkFBZ0JyWCxLQUFLZCxFQUFFVSxVQUFVeVgsZ0JBQWdCLFNBQVNuWSxHQUFHa0IsS0FBSzBPLGNBQWM1UCxHQUFHLE1BQU1rQixLQUFLMmEsTUFBTXhCLG9CQUFvQnJhLEVBQUVYLGNBQWM2QixLQUFLMmEsTUFBTXhCLG9CQUFvQnJhLEVBQUVYLE9BQU9XLEVBQUVVLFVBQVV1ZSxPQUFPLFdBQVcsSUFBSWpmLEVBQUVrQixLQUFLNmMsUUFBUWtCLFNBQVMsT0FBT2pmLEVBQUV3YSxXQUFXdFosS0FBSzJhLE1BQU1yQixXQUFXeGEsRUFBRTBhLGVBQWV4WixLQUFLMmEsTUFBTW5CLGVBQWUxYSxFQUFFdWEsU0FBU3JaLEtBQUsyYSxNQUFNdEIsU0FBU3JaLEtBQUsyYSxNQUFNcEIsaUJBQWlCLElBQUl6YSxFQUFFa2YsWUFBVyxFQUFHLE1BQU1sZixFQUFFbWYsVUFBVW5mLEVBQUVtZixRQUFRLElBQUluZixFQUFFbWYsUUFBUTljLEtBQUssMEVBQTBFckMsR0FBR0EsRUFBRVUsVUFBVTBlLFFBQVEsU0FBU3BmLEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJSixFQUFFUCxFQUFFLE9BQU9YLEVBQUVzQixNQUFLLFNBQVN0QixHQUFHLE9BQU9zQixLQUFLMmEsTUFBTVosV0FBVSxFQUFHbmEsRUFBRUksS0FBSzJhLE1BQU10QixTQUFTaGEsRUFBRVcsS0FBSzJhLE1BQU1yQixXQUFXdFosS0FBSzJhLE1BQU1YLGNBQWNJLFFBQVEsR0FBR3BhLEtBQUsyYSxNQUFNWCxjQUFjSyxPQUFPdmIsSUFBSWtCLEtBQUsyYSxNQUFNWixXQUFVLEVBQUcvWixLQUFLMmEsTUFBTVgsY0FBY0csVUFBVTFXLEtBQUtFLElBQUlsRCxNQUFNZ0QsS0FBS3pELEtBQUsyYSxNQUFNWCxjQUFjSSxRQUFRbFYsS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFc2UsdUJBQXNCcGQsS0FBSzJhLE1BQU1YLGNBQWNDLFNBQVNqYSxLQUFLMmEsTUFBTXRCLFNBQVN6WixFQUFFSSxLQUFLMmEsTUFBTVgsY0FBY0UsV0FBV2xhLEtBQUsyYSxNQUFNckIsV0FBV2phLEVBQUUsQ0FBQyxFQUFFVyxLQUFLMmEsTUFBTVgsc0JBQW9CbGIsRUFBRVUsVUFBVWtkLFNBQVMsV0FBVyxPQUFPMWMsS0FBSzJhLE1BQU1sQixjQUFjLEdBQUcsSUFBSXpaLEtBQUsyYSxNQUFNakIsYUFBYTVhLEVBQUVVLFVBQVVnZCxZQUFZLFNBQVMxZCxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUsR0FBR0ksRUFBRWlFLFNBQVEsU0FBU2pFLEVBQUVjLEdBQUdsQixFQUFFa0IsR0FBR2QsS0FBSSxJQUFJVCxFQUFFLENBQUM0TyxHQUFHak4sS0FBSzJhLE1BQU12QixpQkFBaUJqYixLQUFLNkIsS0FBSzJhLE1BQU1nQyxZQUFZeGUsS0FBSzJlLE9BQU9wZSxFQUFFcWUsUUFBUSxDQUFDbmQsR0FBR3FkLFNBQVMsU0FBU25lLEdBQUcsSUFBSWMsRUFBRVAsRUFBRVAsR0FBR0osRUFBRSxHQUFHLE9BQU9rQixFQUFFbUQsU0FBUSxTQUFTakUsRUFBRWMsR0FBR2xCLEVBQUVrQixHQUFHLFdBQVcsT0FBT2QsTUFBS0osSUFBSXNCLEtBQUsyYSxNQUFNdUMsV0FBVy9iLEtBQUs5QyxJQUFJUyxFQUFFVSxVQUFVb2QsS0FBSyxTQUFTOWQsR0FBRyxPQUFPQSxFQUFFZ08sTUFBSyxFQUFHaE8sR0FBR0EsRUFBRVUsVUFBVTJlLFVBQVUsV0FBVyxJQUFJbmUsS0FBSzJhLE1BQU1sQixnQkFBZ0J6WixLQUFLMmEsTUFBTXVDLFdBQVcsSUFBSWxkLEtBQUsyYSxNQUFNbEIsaUJBQWlCM2EsRUFBRVUsVUFBVTRlLFFBQVEsV0FBV3BlLEtBQUsyYSxNQUFNbEIsaUJBQWlCM2EsRUFBRVUsVUFBVTZjLFdBQVcsU0FBU3ZkLEdBQUcsSUFBSWMsRUFBRSxDQUFDK2QsTUFBTSxHQUFHeGYsS0FBSyxnQkFBZ0I4TyxHQUFHak4sS0FBSzJhLE1BQU1mLGVBQWU5YSxJQUFJYyxFQUFFekIsS0FBS1csR0FBR2tCLEtBQUsyYSxNQUFNaEIsV0FBV3hZLEtBQUt2QixHQUFHSSxLQUFLMmEsTUFBTWdDLFlBQVkvYyxHQUFHZCxFQUFFVSxVQUFVOGMsU0FBUyxTQUFTeGQsR0FBRyxJQUFJLElBQUljLEVBQUVJLEtBQUtYLEVBQUVvWixHQUFHM1osR0FBR0osRUFBRSxJQUFJaWEsSUFBSXRaLEVBQUU2RixLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUVtTyxPQUFNNU8sRUFBRSxFQUFFQSxFQUFFMkIsS0FBSzJhLE1BQU1nQyxZQUFZZ0IsTUFBTXpjLE9BQU83QyxJQUFJLENBQUMsSUFBSThCLEVBQUVILEtBQUsyYSxNQUFNZ0MsWUFBWWdCLE1BQU10ZixHQUFHOEIsRUFBRTJNLE1BQU1wTyxFQUFFZ2EsSUFBSXZZLEVBQUU4TSxLQUFLOU0sRUFBRXFPLFVBQVUsSUFBSTVRLEVBQUVvQyxLQUFLMmEsTUFBTWhCLFdBQVcxWSxNQUFNakIsS0FBSzJhLE1BQU1nQyxZQUFZLElBQUkzYyxLQUFLMmEsTUFBTWhCLFdBQVd6WSxPQUFPLEtBQUtsQixLQUFLMmEsTUFBTWhCLFdBQVczWixLQUFLMmEsTUFBTWhCLFdBQVd6WSxPQUFPLEdBQUc3QixFQUFFMEQsU0FBUSxTQUFTakUsR0FBR0EsRUFBRWdPLE1BQU1oTyxFQUFFdWYsVUFBVXpnQixFQUFFcVAsSUFBSXJOLEVBQUUrZCxNQUFNN2UsT0FBTUEsRUFBRVUsVUFBVThlLFVBQVUsU0FBU3hmLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsSUFBSUwsRUFBRTJCLEtBQUssUUFBRyxJQUFTdEIsSUFBSUEsR0FBRSxHQUFJb0YsRUFBRWxFLEVBQUVzQixPQUFPLEdBQUUsV0FBVyxNQUFNLCtDQUE4QyxNQUFNN0IsR0FBRyxZQUFZQSxFQUFFNEwsTUFBTSxNQUFNLElBQUkxSSxNQUFNLDBDQUEwQ2xELEVBQUU0TCxNQUFNLEtBQUssSUFBSTlLLEVBQUVILEtBQUtvYyxXQUFVLFdBQVcsT0FBTy9kLEVBQUU4ZixlQUFhLFdBQVcsT0FBTzlmLEVBQUUrZixhQUFXLFdBQVcsT0FBTy9mLEVBQUU4ZCxLQUFLLFVBQVVyZCxNQUFLZ0YsRUFBRTNELGFBQWFzTSxJQUFHLFdBQVcsTUFBTSxvREFBbUQsSUFBSTdPLEVBQUUsU0FBU2tCLEVBQUVjLEVBQUVQLEdBQUcsSUFBSSxJQUFJWCxFQUFFLEdBQUdMLEVBQUUsR0FBRzhCLEVBQUUsRUFBRUEsRUFBRVAsRUFBRXNCLE9BQU9mLElBQUl6QixFQUFFa0IsRUFBRU8sR0FBRzhNLEtBQUksRUFBRyxJQUFJOU0sRUFBRSxFQUFFQSxFQUFFckIsRUFBRW9DLE9BQU9mLElBQUksQ0FBQyxJQUFJdkMsR0FBR00sRUFBRVksRUFBRXFCLElBQUkyYyxPQUFPLElBQUksSUFBSW5kLEtBQUsvQixFQUFFLENBQUMsSUFBSSxJQUFJd0MsRUFBRXhDLEVBQUUrQixHQUFHOUIsR0FBRSxFQUFHSSxFQUFFLEVBQUVBLEVBQUUyQixFQUFFc0IsT0FBT2pELElBQUksR0FBR1MsRUFBRTBCLEVBQUU2TSxJQUFJLENBQUMvTyxFQUFFNmUsUUFBUWhhLFNBQVEsU0FBU2pFLEdBQUcsT0FBT0osRUFBRUksRUFBRW1PLEtBQUksS0FBS3BQLEdBQUUsRUFBR1EsRUFBRUgsRUFBRStPLEtBQUksRUFBRyxNQUFNLEdBQUdwUCxFQUFFLE9BQU8sSUFBSWdHLEVBQUUsR0FBR0EsRUFBRXhFLEVBQUU0TixLQUFJLEVBQUcsSUFBSXZOLEVBQUUsR0FBRyxJQUFJUyxFQUFFckIsRUFBRW9DLE9BQU8sRUFBRWYsR0FBRyxFQUFFQSxJQUFJLElBQUl2QyxHQUFHTSxFQUFFWSxFQUFFcUIsSUFBSTJjLE9BQU83ZSxFQUFFLEVBQUVBLEVBQUVDLEVBQUU2ZSxRQUFRN2IsT0FBT2pELElBQUksR0FBRzRGLEVBQUUzRixFQUFFNmUsUUFBUTllLEdBQUdnUCxJQUFJLENBQUMsSUFBSSxJQUFJdE4sS0FBSy9CLEVBQUVpRyxFQUFFakcsRUFBRStCLEdBQUdzTixLQUFJLEVBQUd2TixFQUFFeEIsRUFBRStPLEtBQUksRUFBRyxNQUFNLElBQUluSixFQUFFLEdBQUcsSUFBSTNELEVBQUUsRUFBRUEsRUFBRXJCLEVBQUVvQyxPQUFPZixJQUFJLENBQUMsSUFBSWpDLEVBQUUsR0FBR0csR0FBR0gsRUFBRVksRUFBRXFCLElBQUk4TSxLQUFLdk4sRUFBRXhCLEVBQUUrTyxJQUFJLENBQUMsSUFBSWpKLEVBQUUsR0FBRyxJQUFJLElBQUlyRSxLQUFLekIsRUFBRTRlLE9BQU8sQ0FBQyxJQUFJOWUsRUFBRUUsRUFBRTRlLE9BQU9uZCxHQUFHakIsRUFBRVYsRUFBRWlQLE1BQU1qSixFQUFFckUsR0FBRzNCLEdBQUcsSUFBSW1HLEVBQUU3RixPQUFPbUUsT0FBTyxHQUFHdkUsR0FBR2lHLEVBQUUyWSxPQUFPOVksRUFBRUcsRUFBRTRZLFFBQVE3ZSxFQUFFNmUsUUFBUWpaLEVBQUUzQyxLQUFLZ0QsSUFBSSxPQUFPTCxFQUF2b0IsQ0FBMG9COUQsS0FBSzJhLE1BQU11QyxXQUFXdGQsRUFBRU8sR0FBRyxJQUFJekIsR0FBRyxJQUFJZCxFQUFFc0QsUUFBUXRCLEVBQUVzQixPQUFPLEVBQUUsTUFBTSxJQUFJcUIsTUFBTSx1SUFBdUksT0FBT3ZDLEtBQUttYyxLQUFLLFlBQVcsV0FBVyxJQUFJcmQsRUFBRUosRUFBRWlCLEVBQUUsR0FBR0EsRUFBRVEsRUFBRThNLElBQUksTUFBTTVOLEdBQWFYLEVBQUV1SSxFQUFFOUMsRUFBZHJGLEVBQUVxQixFQUFFb0wsT0FBZSxXQUFXa0IsR0FBR0MsS0FBSzVOLEVBQUUsQ0FBQ3FOLE9BQU96TixLQUFLVyxFQUFFLFNBQVNQLEVBQUVjLEVBQUVQLEdBQUcsSUFBSSxJQUFJWCxFQUFFLFNBQVNBLEdBQUcsSUFBSUwsRUFBRXVCLEVBQUVsQixHQUFHeUIsRUFBRSxHQUFHLEdBQUc5QixFQUFFMGUsUUFBUWhhLFNBQVEsU0FBU25ELEdBQUcsSUFBSVAsRUFBRVAsRUFBRWMsRUFBRXFOLElBQUksR0FBRyxNQUFNNU4sRUFBRWMsRUFBRWdCLEtBQUs5QixPQUFPLENBQUMsSUFBSVgsRUFBRStOLEdBQUdDLEtBQUs5TSxFQUFFMkwsTUFBTSxDQUFDWSxPQUFPakYsRUFBRXRILEVBQUUwTCxLQUFLMUwsRUFBRXFMLFFBQVFyTCxFQUFFcUwsT0FBTzlLLEVBQUVnQixLQUFLekMsT0FBTSxNQUFNTCxFQUFFNGUsU0FBUyxNQUFNLElBQUkxYSxNQUFNLDREQUE0RGxFLEVBQUVGLEtBQUssS0FBSyxJQUFJUCxFQUFFUyxFQUFFNGUsU0FBUyxJQUFJNWUsRUFBRTBlLFFBQVE3YixPQUFPZixFQUFFLEdBQUdBLEdBQUdSLEVBQUUsU0FBU0MsR0FBRyxLQUFLQSxLQUFLaEMsR0FBRyxNQUFNLElBQUkyRSxNQUFNLGlDQUFpQzNDLEVBQUUsZ0NBQWdDdEIsT0FBT2lkLEtBQUszZCxHQUFHLEtBQUssSUFBSWMsRUFBRVcsR0FBRSxXQUFXLE9BQU96QixFQUFFZ0MsUUFBTyxHQUFHLFlBQVlsQixFQUFFdU0sTUFBTSxNQUFNLElBQUkxSSxNQUFNLDRCQUE0QmxFLEVBQUVGLEtBQUssMkJBQTJCeUIsRUFBRSx3Q0FBd0NsQixFQUFFdU0sTUFBTSxLQUFLLElBQUk5SyxFQUFFOUIsRUFBRXllLE9BQU9sZCxHQUFHLElBQUltRSxFQUFFckYsRUFBRTZNLE1BQU1wTCxFQUFFb0wsT0FBTyxNQUFNLElBQUloSixNQUFNLDRCQUE0QmxFLEVBQUVGLEtBQUssNEJBQTRCeUIsRUFBRSxnQkFBZ0JsQixFQUFFNk0sTUFBTSxtREFBbURwTCxFQUFFb0wsTUFBTSxLQUFLLEdBQUcsTUFBTXpNLEVBQUVxQixFQUFFOE0sSUFBSW5PLEVBQUVxQixFQUFFOE0sSUFBSXZPLE1BQU0sQ0FBQyxJQUFJaUIsRUFBRWIsRUFBRXFCLEVBQUU4TSxJQUFJbk8sRUFBRXFCLEVBQUU4TSxJQUFJdE4sRUFBRStRLElBQUloUyxHQUFHaUIsRUFBRTZPLFlBQVksSUFBSSxJQUFJcE8sS0FBSy9CLEVBQUV5ZSxPQUFPbmQsRUFBRVMsSUFBSS9CLEVBQUV1QixFQUFFc0IsT0FBTyxFQUFFN0MsR0FBRyxFQUFFQSxJQUFJSyxFQUFFTCxHQUFqL0IsQ0FBcS9Cc0IsRUFBRS9CLEdBQUUsU0FBU2tCLEdBQUcsT0FBT1QsRUFBRThkLEtBQUtyZCxNQUFLLElBQUlzQixFQUFFUixFQUFFc0YsS0FBSSxTQUFTcEcsR0FBRyxPQUFPYSxFQUFFYixFQUFFbU8sT0FBTSxPQUFPLElBQUk1TyxFQUFFc2MsTUFBTWxCLGdCQUFnQnBiLEVBQUVzYyxNQUFNdUMsV0FBV25hLFNBQVEsU0FBU2pFLEdBQUcsSUFBSSxJQUFJYyxLQUFLZCxFQUFFa2UsTUFBTWxlLEVBQUVrZSxNQUFNcGQsR0FBRzRPLGFBQVluUSxFQUFFc2MsTUFBTXVDLFdBQVcsTUFBTSxDQUFDcmUsTUFBTXNCLEVBQUVvZSxNQUFNbmUsT0FBTXRCLEVBQUVVLFVBQVVnZixXQUFXLFNBQVMxZixHQUFHLElBQUljLEVBQUVJLEtBQUssT0FBTzhELEVBQUU0QyxFQUFFNUgsSUFBRyxXQUFXLE1BQU0sdURBQXNELFdBQVcsSUFBSSxJQUFJTyxFQUFFWCxFQUFFLEdBQUdMLEVBQUUsRUFBRUEsRUFBRTZFLFVBQVVoQyxPQUFPN0MsSUFBSUssRUFBRUwsR0FBRzZFLFVBQVU3RSxHQUFHeUYsRUFBRXBGLEVBQUUwRyxPQUFNLFNBQVN0RyxHQUFHLE9BQU9BLGFBQWEyTixPQUFLLFdBQVcsTUFBTSxzRUFBcUUsSUFBSXRNLEVBQUUsR0FBRyxPQUFPekIsRUFBRXFFLFNBQVEsU0FBU2pFLEVBQUVjLEdBQUdPLEVBQUVQLEdBQUdkLEtBQUljLEVBQUU2YyxXQUFVLFNBQVM3YyxFQUFFdkIsR0FBRyxPQUFPeUYsR0FBR3pFLEVBQUVQLEVBQUUyQixXQUFNLEVBQU8vQixFQUFFeUcsT0FBTyxDQUFDOUcsTUFBTVEsaUJBQWlCNE4sSUFBRyxXQUFXLE1BQU0sZ0dBQStGM0ksRUFBRTRDLEVBQUVySCxFQUFFb2YsV0FBVSxXQUFXLE1BQU0sc0dBQXFHcGYsRUFBRVIsUUFBT3NCLEdBQUUsU0FBU3JCLEVBQUVjLEdBQUcsSUFBSXZCLEVBQUVnQixFQUFFb2YsU0FBUzNmLEVBQUVjLEdBQUdPLEVBQUVKLE1BQU1rRSxRQUFRNUYsR0FBR0EsRUFBRSxDQUFDQSxHQUFHeUYsRUFBRTNELEVBQUVlLFNBQVN4QyxFQUFFd0MsUUFBTyxXQUFXLE1BQU0seUtBQXdLNEMsRUFBRTNELEVBQUVpRixPQUFNLFNBQVN0RyxHQUFHLE9BQU9BLGFBQWEyTixPQUFLLFdBQVcsTUFBTSwwSUFBeUksSUFBSTdPLEVBQUUsR0FBRyxPQUFPdUMsRUFBRTRDLFNBQVEsU0FBU2pFLEVBQUVjLEdBQUdoQyxFQUFFZ0MsR0FBRyxXQUFXLE9BQU9kLE1BQUtsQixPQUFNa0IsRUFBRVUsVUFBVTZOLE1BQU0sU0FBU3ZPLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRXNCLEtBQUsyYSxNQUFNZCxXQUFXcGIsSUFBSW1CLEdBQUd2QixFQUFFSyxFQUFFbWUsUUFBUSxHQUFHL2QsRUFBRUEsR0FBR2tCLEtBQUs2YyxRQUFRLFdBQVduZSxFQUFFdU0sTUFBTSxDQUFDLElBQUk5SyxFQUFFaUcsRUFBRS9HLEdBQUdXLEtBQUsyYSxNQUFNdEIsVUFBVWxaLEVBQUV6QixFQUFFNlAsTUFBTTdQLEVBQUU2UCxNQUFNcE8sRUFBRXJCLElBQUlULElBQUlBLEVBQUV1ZixZQUFZaGUsR0FBR2xCLEVBQUVtZSxRQUFRL2QsRUFBRUEsRUFBRTRlLFNBQVM5ZCxFQUFFbEIsRUFBRTZNLE1BQU03TSxFQUFFdU0sUUFBUW5NLEVBQUV1TyxNQUFNek4sRUFBRVAsSUFBSVAsRUFBRVUsVUFBVThPLFNBQVMsU0FBU3hQLEdBQUcsT0FBT2tCLEtBQUsyYSxNQUFNZCxXQUFXcGIsSUFBSUssR0FBRytkLFFBQVF2TyxTQUFTeFAsSUFBSUEsRUFBRVUsVUFBVTZPLEtBQUssU0FBU3ZQLEdBQUcsT0FBT2tCLEtBQUsyYSxNQUFNZCxXQUFXcGIsSUFBSUssR0FBRytkLFFBQVF4TyxLQUFLdlAsSUFBSUEsRUFBRVUsVUFBVWtmLFdBQVcsU0FBUzVmLEVBQUVjLEdBQUcsT0FBT0ksS0FBSzZjLFFBQVE2QixXQUFXNWYsRUFBRWMsSUFBSWQsRUFBRVUsVUFBVXVMLEtBQUssU0FBU2pNLEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJSixFQUFFUCxFQUFFLE9BQU9YLEVBQUVzQixNQUFLLFNBQVN0QixHQUFHLE9BQU9BLEVBQUVnQyxPQUFPLEtBQUssRUFBRSxPQUFPZCxFQUFFdUgsSUFBSSxDQUFDLEVBQUVuSCxLQUFLNmMsUUFBUTlSLEtBQUtqTSxJQUFJLEtBQUssRUFBRSxPQUFPTyxFQUFFWCxFQUFFaUMsUUFBUWdlLE9BQU94WCxJQUFJdkgsRUFBRSxDQUFDLEVBQUVQLFdBQVNQLEVBQUVVLFVBQVVtZSxNQUFNLFNBQVM3ZSxHQUFHLE9BQU8sTUFBTWtCLEtBQUsyYSxNQUFNZ0MsY0FBYzdkLEVBQUV1ZixRQUFRcmUsS0FBSzJhLE1BQU1nQyxZQUFZMVAsR0FBR2pOLEtBQUsyYSxNQUFNZ0MsWUFBWWdCLE1BQU14YyxLQUFLckMsSUFBSUEsR0FBR1IsT0FBT0MsZUFBZU8sRUFBRVUsVUFBVSxzQkFBc0IsQ0FBQ2YsSUFBSSxXQUFXLE9BQU91QixLQUFLMmEsTUFBTXhCLHFCQUFxQjNhLFlBQVcsRUFBRzhELGNBQWEsSUFBS3hELEVBQUVVLFVBQVVrRCxNQUFNLFdBQVcsSUFBSSxJQUFJNUQsS0FBS2tCLEtBQUswYSx1QkFBdUIxYSxLQUFLMmEsTUFBTW5NLFVBQVV4TyxLQUFLdWEsSUFBSTdYLFFBQVExQyxLQUFLMmEsTUFBTSxJQUFJekIsR0FBR2xaLEtBQUt3YSxTQUFTeGEsS0FBS3dhLFNBQVMxYixHQUFHMFAsaUJBQWlCeE8sS0FBS3dhLFNBQVMxYixHQUFHa0IsS0FBS21iLFlBQVksS0FBS25iLEtBQUs4YSxnQkFBZ0IsS0FBSzlhLEtBQUs2YSxtQkFBbUIsTUFBTS9iLEVBQUVvTyxhQUFhLEVBQUVwTyxFQUFFaVksZUFBZSxFQUFFalksRUFBLzNkLEdBQXc0ZDhmLEdBQUcsV0FBVyxJQUFJOWYsRUFBRSxXQUFXLEdBQUcsTUFBTThaLEdBQUcsQ0FBQyxJQUFJOVosT0FBRSxFQUFPLEdBQUcsb0JBQW9CK2YsT0FBTy9mLEVBQUUrZixZQUFZLFFBQUcsSUFBb0J6ZCxFQUFPdEMsRUFBRXNDLE9BQVksUUFBRyxJQUFvQjBkLEVBQVFoZ0IsRUFBRWdnQixNQUFZLENBQUMsR0FBRyxvQkFBb0JDLEtBQUssTUFBTSxJQUFJeGMsTUFBTSxrQ0FBa0N6RCxFQUFFaWdCLEtBQUtuRyxHQUFHOVosRUFBRSxPQUFPOFosR0FBNVEsR0FBa1IsR0FBRyxNQUFNOVosRUFBRWtnQixVQUFVLENBQUMsSUFBSXBmLEVBQUUsSUFBSXZCLEVBQUVTLEdBQUdBLEVBQUVrZ0IsVUFBVSxJQUFJMUUsR0FBRzFhLEdBQUcsT0FBT0QsRUFBRWIsRUFBRWtnQixVQUFVekUsS0FBSzVOLEdBQUcsV0FBVyxPQUFPN04sRUFBRWtnQixXQUFXbGdCLEVBQUVrZ0IsVUFBNVosR0FBeWEsU0FBU0MsS0FBSyxNQUFNLG9CQUFvQkosUUFBUSxNQUFNQSxPQUFPSyxVQUFVLG9CQUFvQkMsa0JBQWtCdmhCLEVBQUVrRSxhQUFhLFNBQVEsV0FBVyxPQUFNLEtBQUksU0FBU2hELEdBQUdBLEdBQUc2QyxRQUFRQyxLQUFLLGtKQUFpSmhFLEVBQUVrRSxhQUFhLGNBQWEsV0FBVyxPQUFPbWQsUUFBT3JoQixFQUFFa0UsYUFBYSxXQUFVLFdBQVcsWUFBTSxJQUFvQmdkLFFBQVMsSUFBU0EsRUFBUU0sZUFBVSxJQUFTTixFQUFRTSxTQUFTQyxRQUFPemhCLEVBQUVrRSxhQUFhLGFBQVksV0FBVyxNQUFNLG9CQUFvQndkLFdBQVcsTUFBTUEsV0FBVyxNQUFNQSxVQUFVQyxXQUFXLFNBQVNDLEtBQUtGLFVBQVVDLFlBQVksYUFBYUMsS0FBS0YsVUFBVUcsV0FBVTdoQixFQUFFa0UsYUFBYSxRQUFPLFdBQVcsT0FBTSxLQUFLbEUsRUFBRWtFLGFBQWEsc0NBQXFDLFdBQVcsT0FBT2xFLEVBQUV3RSxRQUFRLFlBQVd4RSxFQUFFa0UsYUFBYSxnQ0FBK0IsV0FBVyxPQUFNLEtBQUtsRSxFQUFFa0UsYUFBYSxXQUFVLFdBQVcsT0FBTSxLQUFLLElBQUk0ZCxHQUFHQyxHQUFHQyxHQUFHLEdBQUdDLEdBQUcsQ0FBQ0MsT0FBTSxFQUFHQyxXQUFVLEVBQUdDLG9CQUFtQixFQUFHQyx1QkFBc0IsRUFBR0MsT0FBTSxFQUFHQyxTQUFRLEVBQUdDLDhCQUE2QixHQUFJLFNBQVNDLEdBQUd2aEIsRUFBRWMsR0FBR2dnQixHQUFHOWdCLEdBQUdjLEVBQUUsU0FBUzBnQixHQUFHeGhCLEdBQUdBLEtBQUs4Z0IsS0FBS0EsR0FBRzlnQixHQUFHLFNBQVNBLEdBQUcsR0FBRyxJQUFJQSxHQUFHLElBQUlBLEVBQUUsTUFBTSxJQUFJeUQsTUFBTSwwREFBMEQsSUFBSTNDLEVBQUUyZ0IsR0FBR3poQixHQUFHLE9BQUdjLEVBQUU0Z0IsaUJBQWlCLG9CQUFtQixTQUFTNWdCLEdBQUdBLEVBQUU2Z0Isd0JBQXdCYixHQUFHOWdCLE1BQUksR0FBSSxJQUFJQSxFQUFTYyxFQUFFOGdCLFdBQVcsUUFBUWIsS0FBS2pnQixFQUFFOGdCLFdBQVcscUJBQXFCYixJQUFXamdCLEVBQUU4Z0IsV0FBVyxTQUFTYixJQUF0VCxDQUEyVC9nQixJQUFJLElBQUljLEVBQUVnZ0IsR0FBRzlnQixHQUFHLE9BQU9jLEVBQUUrZ0Isd0JBQXdCZixHQUFHOWdCLEdBQUd3aEIsR0FBR3hoQixLQUFLYyxFQUFFZ2hCLFFBQVFoaEIsRUFBRWloQixZQUFZamhCLEVBQUVnaEIsUUFBUWhoQixFQUFFa2hCLGNBQWNsaEIsRUFBRWdoQixRQUFRaGhCLEVBQUVtaEIsT0FBT25oQixFQUFFZ2hCLFFBQVFoaEIsRUFBRW9oQixRQUFRcGhCLEVBQUVnaEIsUUFBUWhoQixFQUFFcWhCLHFCQUFxQnJoQixFQUFFZ2hCLFFBQVFoaEIsRUFBRXNoQixpQkFBaUJ0aEIsRUFBRXVoQixPQUFPdmhCLEVBQUV3aEIsY0FBY3hoQixFQUFFdWhCLE9BQU92aEIsRUFBRXloQixXQUFXemhCLEVBQUUwaEIsU0FBUzFoQixFQUFFMmhCLE1BQU0zQixHQUFHOWdCLElBQUksU0FBU3loQixHQUFHemhCLEdBQUcsR0FBRyxvQkFBb0IwaUIsaUJBQWlCLElBQUkxaUIsRUFBRSxPQUFPLElBQUkwaUIsZ0JBQWdCLElBQUksS0FBSyxHQUFHLG9CQUFvQnRDLFNBQVMsT0FBT0EsU0FBU3VDLGNBQWMsVUFBVSxNQUFNLElBQUlsZixNQUFNLDBDQUEwQyxTQUFTbWYsR0FBRzVpQixFQUFFYyxHQUFHLE1BQU0sQ0FBQ0EsRUFBRWQsR0FBRyxTQUFTNmlCLEdBQUc3aUIsR0FBRyxJQUFJYyxFQUFFdUUsRUFBRXJGLEdBQUcsT0FBTzBGLEVBQUVmLEtBQUtnQixLQUFLN0UsRUFBRSxJQUFJLFNBQVNnaUIsR0FBRzlpQixFQUFFYyxHQUFHLE1BQU0sQ0FBQzZELEtBQUtFLElBQUksRUFBRUYsS0FBS2dCLEtBQUs3RSxFQUFFLElBQUk2RCxLQUFLRSxJQUFJLEVBQUVGLEtBQUtnQixLQUFLM0YsRUFBRSxLQUFLLFNBQVMraUIsR0FBRy9pQixFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFUixFQUFFUyxFQUFFdkMsRUFBRUksRUFBRTRGLEVBQUVuRSxFQUFFWixFQUFFLE9BQU8sSUFBSWxCLEVBQUV1RSxVQUFVLGtCQUFrQjlDLEVBQUVLLEVBQUVvaUIsS0FBS3BqQixFQUFFZ0IsRUFBRXFpQixLQUFLMWpCLEVBQUVxQixFQUFFc2lCLFFBQVE3aEIsRUFBRVQsRUFBRXVpQixRQUFRdGlCLEVBQUVELEVBQUV3aUIsSUFBSTloQixFQUFFLEVBQUV2QyxFQUFFLEVBQUVJLEVBQUV5QixFQUFFeWlCLFdBQVd0ZSxFQUFFbkUsRUFBRTBpQixRQUFRL2lCLEVBQUVQLEVBQUV1akIsS0FBSzNqQixFQUFFSSxFQUFFdWpCLEtBQUtoa0IsRUFBRVMsRUFBRXVqQixLQUFLbGlCLEVBQUVULEVBQUUyaUIsS0FBSzFpQixFQUFFYixFQUFFdWpCLEtBQUtqaUIsRUFBRSxFQUFFdkMsRUFBRSxFQUFFSSxFQUFFLE1BQU0yQixFQUFFQSxFQUFFMGlCLGVBQWUsS0FBS3plLEVBQUUvRSxFQUFFc2pCLE9BQU8sQ0FBQ0csb0JBQW9CbGpCLEVBQUVtakIsd0JBQXdCOWpCLEVBQUUrakIsOEJBQThCcGtCLEVBQUVxa0IsMEJBQTBCdmlCLEVBQUV3aUIsbUJBQW1CaGpCLEVBQUVpakIsc0JBQXNCOWpCLEVBQUV1akIsS0FBS1EsMEJBQTBCemlCLEVBQUUwaUIsbUJBQW1CamxCLEVBQUVrbEIscUJBQXFCOWtCLEVBQUUra0IsaUJBQWlCbmYsR0FBRyxTQUFTb2YsR0FBR25rQixFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUVXLElBQUksT0FBT08sR0FBRyxTQUFTZCxHQUFHLElBQUljLEVBQUVkLEVBQUVva0IsV0FBVyxHQUFHdGpCLElBQUlkLEVBQUVxa0IsU0FBUyxNQUFNLElBQUk1Z0IsTUFBTSxnQkFBZ0I2Z0IsR0FBR3RrQixFQUFFYyxJQUF0RixDQUEyRmQsR0FBR0osR0FBRyxTQUFTSSxHQUFHQSxFQUFFQSxFQUFFdWtCLE9BQU8sR0FBRyxTQUFTdmtCLEVBQUVBLEVBQUV3a0IsT0FBTyxHQUFHLFNBQVN4a0IsRUFBRUEsRUFBRXlrQixPQUFPLEdBQUcsU0FBU3prQixFQUFFQSxFQUFFMGtCLFNBQVMsR0FBRyxXQUFqRyxDQUE2RzlELEtBQUtBLEdBQUcsS0FBSyxTQUFTNWdCLEdBQUdBLEVBQUVBLEVBQUUya0IsaUJBQWlCLEdBQUcsbUJBQW1CM2tCLEVBQUVBLEVBQUU0a0IsaUJBQWlCLEdBQUcsbUJBQW1CNWtCLEVBQUVBLEVBQUU2a0IseUJBQXlCLEdBQUcsMkJBQTJCN2tCLEVBQUVBLEVBQUU4a0IsbUJBQW1CLEdBQUcscUJBQXFCOWtCLEVBQUVBLEVBQUUra0IsbUJBQW1CLEdBQUcscUJBQXRPLENBQTRQbEUsS0FBS0EsR0FBRyxLQUFLLElBQUltRSxHQUFHLFFBQVFDLEdBQUcsTUFBTSxTQUFTQyxHQUFHbGxCLEdBQUcsU0FBU2xCLEVBQUV3RSxRQUFRLGlDQUFpQyxJQUFJdEQsR0FBR2dsQixHQUFHcmdCLEtBQUsrUCxJQUFJMVUsSUFBSTJFLEtBQUsrUCxJQUFJMVUsR0FBR2lsQixJQUFJLFNBQVNYLEdBQUd0a0IsRUFBRWMsR0FBRyxPQUFPQSxHQUFHLEtBQUtkLEVBQUVxa0IsU0FBUyxNQUFNLFdBQVcsS0FBS3JrQixFQUFFbWxCLGFBQWEsTUFBTSxlQUFlLEtBQUtubEIsRUFBRW9sQixjQUFjLE1BQU0sZ0JBQWdCLEtBQUtwbEIsRUFBRXFsQixrQkFBa0IsTUFBTSxvQkFBb0IsS0FBS3JsQixFQUFFc2xCLDhCQUE4QixNQUFNLGdDQUFnQyxLQUFLdGxCLEVBQUV1bEIsY0FBYyxNQUFNLGdCQUFnQixLQUFLdmxCLEVBQUV3bEIsbUJBQW1CLE1BQU0scUJBQXFCLFFBQVEsTUFBTSxzQkFBc0Ixa0IsR0FBRyxTQUFTMmtCLEdBQUd6bEIsRUFBRWMsRUFBRVAsR0FBRyxPQUFPbWxCLEdBQUcxbEIsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUUybEIsYUFBYXBsQixLQUFJLGNBQWNBLEVBQUUsb0NBQW9DLFNBQVNxbEIsR0FBRzVsQixFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUU4bEIsR0FBRzFsQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRTZsQixhQUFhN2xCLEVBQUU4bEIsaUJBQWdCLHdDQUF3QyxHQUFHM0IsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRStsQixhQUFhbm1CLEVBQUVXLE1BQUs0akIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRWdtQixjQUFjcG1CLE9BQUssSUFBS0ksRUFBRWltQixtQkFBbUJybUIsRUFBRUksRUFBRWttQixnQkFBZ0IsTUFBTXJqQixRQUFROEosSUFBSTNNLEVBQUVtbUIsaUJBQWlCdm1CLElBQUksSUFBSTZELE1BQU0sb0NBQW9DLE9BQU83RCxFQUFFLFNBQVN3bUIsR0FBR3BtQixFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUU4bEIsR0FBRzFsQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRTZsQixhQUFhN2xCLEVBQUVxbUIsbUJBQWtCLDBDQUEwQyxHQUFHbEMsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRStsQixhQUFhbm1CLEVBQUVXLE1BQUs0akIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRWdtQixjQUFjcG1CLE9BQUssSUFBS0ksRUFBRWltQixtQkFBbUJybUIsRUFBRUksRUFBRWttQixnQkFBZ0IsTUFBTSxTQUFTbG1CLEVBQUVjLEdBQUcsSUFBSVAsRUFBRStsQixHQUFHQyxLQUFLemxCLEdBQUcsR0FBRyxNQUFNUCxFQUFFLE9BQU9zQyxRQUFROEosSUFBSSx3Q0FBd0M3TCxRQUFRK0IsUUFBUThKLElBQUkzTSxHQUFHLElBQUksSUFBSUosR0FBR1csRUFBRSxHQUFHaEIsRUFBRVMsRUFBRWdFLE1BQU0sTUFBTTNDLEVBQUU5QixFQUFFNkMsT0FBT3NLLFdBQVd0SyxPQUFPLEVBQUV0RCxFQUFFUyxFQUFFNkcsS0FBSSxTQUFTcEcsRUFBRWMsR0FBRyxPQUFPK0UsR0FBRy9FLEVBQUUsR0FBRzRMLFdBQVdyTCxHQUFHckIsS0FBSWEsRUFBRSxFQUFFUyxFQUFFLEVBQUVBLEVBQUV4QyxFQUFFc0QsT0FBT2QsSUFBSVQsRUFBRThELEtBQUtFLElBQUkvRixFQUFFd0MsR0FBR2MsT0FBT3ZCLEdBQUcsSUFBSTlCLEVBQUVELEVBQUVvSCxNQUFNLEVBQUV0RyxFQUFFLEdBQUdULEVBQUVMLEVBQUVvSCxNQUFNdEcsRUFBRSxFQUFFQSxHQUFHbUYsRUFBRWpHLEVBQUVvSCxNQUFNdEcsR0FBR2lELFFBQVE4SixJQUFJNU4sRUFBRXVGLEtBQUssT0FBT3pCLFFBQVE4SixJQUFJN0wsRUFBRWtELE1BQU0sTUFBTSxJQUFJbkIsUUFBUThKLElBQUksTUFBTTlHLEVBQUUxRyxFQUFFLEdBQUcwQixHQUFHLGlFQUFpRWdDLFFBQVE4SixJQUFJNUgsRUFBRVQsS0FBSyxPQUE5ZixDQUFzZ0IvRCxFQUFFUCxFQUFFbW1CLGlCQUFpQnZtQixJQUFJLElBQUk2RCxNQUFNLHNDQUFzQyxPQUFPN0QsRUFBRSxJQUFJNG1CLEdBQUdDLEdBQUdILEdBQUcsMkJBQTJCLFNBQVNJLEdBQUcxbUIsRUFBRWMsR0FBRyxPQUFPNGtCLEdBQUcxbEIsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUUybUIsa0JBQWlCLGtDQUFrQyxTQUFTQyxHQUFHNW1CLEVBQUVjLEVBQUVQLEdBQUcsR0FBRzRqQixHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFNm1CLFlBQVl0bUIsT0FBSyxJQUFLUCxFQUFFOG1CLG9CQUFvQnZtQixFQUFFUCxFQUFFK21CLGFBQWEsTUFBTWxrQixRQUFROEosSUFBSTNNLEVBQUVnbkIsa0JBQWtCem1CLElBQUksSUFBSWtELE1BQU0sK0NBQStDLFNBQVN3akIsR0FBR2puQixFQUFFYyxFQUFFUCxHQUFHLEdBQUc0akIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRWtuQixnQkFBZ0IzbUIsT0FBSyxJQUFLUCxFQUFFOG1CLG9CQUFvQnZtQixFQUFFUCxFQUFFbW5CLGlCQUFpQixNQUFNdGtCLFFBQVE4SixJQUFJM00sRUFBRWduQixrQkFBa0J6bUIsSUFBSSxJQUFJa0QsTUFBTSxxQ0FBcUMsU0FBUzJqQixHQUFHcG5CLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRThsQixHQUFHMWxCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFcW5CLGlCQUFnQixnQ0FBZ0MsT0FBT2xELEdBQUdua0IsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUVzbkIsV0FBV3RuQixFQUFFdW5CLGFBQWEzbkIsTUFBS3VrQixHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFd25CLFdBQVd4bkIsRUFBRXVuQixhQUFhaG5CLEVBQUVQLEVBQUV5bkIsZ0JBQWU3bkIsRUFBRSxTQUFTOG5CLEdBQUcxbkIsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFOGxCLEdBQUcxbEIsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUVxbkIsaUJBQWdCLGdDQUFnQyxPQUFPbEQsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRXNuQixXQUFXdG5CLEVBQUUybkIscUJBQXFCL25CLE1BQUt1a0IsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRXduQixXQUFXeG5CLEVBQUUybkIscUJBQXFCcG5CLEVBQUVQLEVBQUV5bkIsZ0JBQWU3bkIsRUFBRSxTQUFTZ29CLEdBQUc1bkIsRUFBRWMsR0FBRyxPQUFPNGtCLEdBQUcxbEIsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUU2bkIsa0JBQWlCLGtDQUFrQyxTQUFTQyxHQUFHOW5CLEVBQUVjLEdBQUcsSUFBSVAsRUFBRXpCLEVBQUV1RSxVQUFVLDBCQUEwQixHQUFHckQsR0FBRyxHQUFHYyxHQUFHLEVBQUUsQ0FBQyxJQUFJbEIsRUFBRSxJQUFJSSxFQUFFLElBQUljLEVBQUUsSUFBSSxNQUFNLElBQUkyQyxNQUFNLDBCQUEwQjdELEVBQUUsZ0JBQWdCLEdBQUdJLEVBQUVPLEdBQUdPLEVBQUVQLEVBQXFCLE1BQWxCWCxFQUFFLElBQUlJLEVBQUUsSUFBSWMsRUFBRSxJQUFVLElBQUkyQyxNQUFNLDBCQUEwQjdELEVBQUUsc0RBQTBEVyxFQUFFLElBQUlBLEVBQUUsTUFBVyxTQUFTd25CLEdBQUcvbkIsRUFBRWMsR0FBRyxPQUFPNGtCLEdBQUcxbEIsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUVnb0Isc0JBQXFCLHNDQUFzQyxTQUFTQyxHQUFHam9CLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsRUFBRStCLEdBQUcsSUFBSVMsRUFBRXRCLEVBQUVrb0Isa0JBQWtCM25CLEVBQUVYLEdBQUcsT0FBTyxJQUFJMEIsSUFBSTZpQixHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFc25CLFdBQVd0bkIsRUFBRXVuQixhQUFhaG9CLE1BQUs0a0IsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRW1vQixvQkFBb0I3bUIsRUFBRUQsRUFBRXJCLEVBQUVzakIsT0FBTSxFQUFHeGtCLEVBQUUrQixNQUFLc2pCLEdBQUdua0IsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUVvb0Isd0JBQXdCOW1CLE9BQUssR0FBSSxTQUFTK21CLEdBQUdyb0IsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRzBvQixHQUFHdG9CLEVBQUVKLEdBQUd1a0IsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRXVvQixjQUFjdm9CLEVBQUV3b0IsU0FBUzVvQixNQUFLdWtCLEdBQUdua0IsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUV5b0IsWUFBWXpvQixFQUFFMG9CLFdBQVdub0IsTUFBSyxTQUFTb29CLEdBQUczb0IsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxPQUFPOGxCLEdBQUcxbEIsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUU0b0IsbUJBQW1Ccm9CLEVBQUVYLEtBQUksWUFBWUEsRUFBRSw2QkFBNkIsU0FBU2lwQixHQUFHN29CLEVBQUVjLEVBQUVQLEdBQUcsT0FBT1AsRUFBRTRvQixtQkFBbUI5bkIsRUFBRVAsR0FBRyxTQUFTdW9CLEdBQUc5b0IsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUc4aUIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT3VuQixHQUFHcm9CLEVBQUVjLEVBQUVsQixFQUFFeUIsTUFBSzhpQixHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFK29CLFVBQVV4cEIsRUFBRThCLE1BQUssU0FBUzJuQixHQUFHaHBCLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUd1a0IsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRWlwQixnQkFBZ0JqcEIsRUFBRWtwQixZQUFZdHBCLE1BQUt1a0IsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRW1wQixxQkFBcUJucEIsRUFBRWtwQixZQUFZbHBCLEVBQUVvcEIsa0JBQWtCcHBCLEVBQUUwb0IsV0FBV25vQixFQUFFLE1BQUssU0FBUzhvQixHQUFHcnBCLEVBQUVjLEVBQUVQLEdBQUc0akIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRWlwQixnQkFBZ0JqcEIsRUFBRWtwQixZQUFZM29CLE1BQUs0akIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRW1wQixxQkFBcUJucEIsRUFBRWtwQixZQUFZbHBCLEVBQUVvcEIsa0JBQWtCcHBCLEVBQUUwb0IsV0FBVyxLQUFLLE1BQUssU0FBU1ksR0FBR3RwQixHQUFHLElBQUljLEVBQUVkLEVBQUV1cEIsdUJBQXVCdnBCLEVBQUVrcEIsYUFBYSxHQUFHcG9CLElBQUlkLEVBQUV3cEIscUJBQXFCLE1BQU0sSUFBSS9sQixNQUFNLDhCQUE4QmdtQixHQUFHenBCLEVBQUVjLElBQUksU0FBUzJvQixHQUFHenBCLEVBQUVjLEdBQUcsT0FBT0EsR0FBRyxLQUFLZCxFQUFFMHBCLGtDQUFrQyxNQUFNLG9DQUFvQyxLQUFLMXBCLEVBQUUycEIsMENBQTBDLE1BQU0sNENBQTRDLEtBQUszcEIsRUFBRTRwQixrQ0FBa0MsTUFBTSxvQ0FBb0MsS0FBSzVwQixFQUFFNnBCLHdCQUF3QixNQUFNLDBCQUEwQixRQUFRLE1BQU0saUJBQWlCL29CLEdBQUcsU0FBUzRrQixHQUFHMWxCLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsSUFBSUwsRUFBRTRrQixHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPUCxPQUFNLEdBQUcsTUFBTWhCLEVBQUUsTUFBTSxJQUFJa0UsTUFBTTdELEdBQUcsT0FBT0wsRUFBRSxTQUFTK29CLEdBQUd0b0IsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFOHBCLGlDQUFpQyxFQUFFbHFCLEVBQUVrQixFQUFFZCxFQUFFd29CLFNBQVMsR0FBRzVvQixFQUFFSSxFQUFFd29CLFVBQVU1b0IsRUFBRVcsRUFBRSxNQUFNLElBQUlrRCxNQUFNLGtEQUFzRGxELEVBQUUsTUFBVSxTQUFTd3BCLEdBQUcvcEIsRUFBRWMsR0FBRyxZQUFPLElBQVNBLElBQUlBLEVBQUUsR0FBR3VFLEVBQUVyRixFQUFFa0csTUFBTSxFQUFFbEcsRUFBRW9DLE9BQU90QixJQUFJLFNBQVNrcEIsR0FBR2hxQixHQUFHLEdBQUcsSUFBSUEsRUFBRW9DLE9BQU8sTUFBTXFCLE1BQU0sd0RBQXdELE1BQU0sQ0FBQ3pELEVBQUVvQyxPQUFPLEVBQUVwQyxFQUFFQSxFQUFFb0MsT0FBTyxHQUFHLEVBQUVwQyxFQUFFQSxFQUFFb0MsT0FBTyxJQUFJLFNBQVM2bkIsR0FBR2pxQixHQUFHLElBQUljLEVBQUUsQ0FBQyxFQUFFLEVBQUUsR0FBRyxPQUFPLElBQUlkLEVBQUVvQyxRQUFRLElBQUlwQyxFQUFFb0MsUUFBUSxJQUFJcEMsRUFBRSxLQUFLYyxFQUFFLENBQUNpcEIsR0FBRy9wQixJQUFJcUcsT0FBTzJqQixHQUFHaHFCLEtBQUtjLEVBQUUsU0FBU29wQixHQUFHbHFCLEVBQUVjLEdBQUcsSUFBSVAsT0FBRSxJQUFTTyxJQUFJQSxHQUFFLEdBQUksSUFBSWxCLEVBQUVkLEVBQUV1RSxVQUFVLDBCQUEwQixHQUFHdkMsSUFBSWxCLEdBQUcsRUFBRSxLQUFLSSxFQUFFQSxFQUFFb0csS0FBSSxTQUFTdEYsRUFBRVAsR0FBRyxPQUFPQSxHQUFHUCxFQUFFb0MsT0FBTyxFQUFFMkMsRUFBRS9FLEVBQUVPLElBQUlQLEVBQUVPLE9BQU02QixTQUFTcEMsRUFBRSxDQUFDLEVBQUVBLEVBQUUsTUFBTSxJQUFJQSxFQUFFb0MsT0FBTyxDQUFDLElBQUk3QyxFQUFFZ0gsRUFBRXZHLEdBQUdBLEVBQUVULEVBQUVrSCxTQUFTLElBQUlwRixFQUFFZ0UsRUFBRXJGLEdBQUcsR0FBR0EsRUFBRW9DLFFBQVEsR0FBR2YsR0FBR3pCLEVBQUUsTUFBTSxDQUFDLEVBQUV5QixHQUFHLEdBQUcsSUFBSXJCLEVBQUVvQyxRQUFRcEMsRUFBRSxJQUFJSixHQUFHSSxFQUFFLElBQUlKLEVBQUUsT0FBT0ksRUFBRSxHQUFHLElBQUlBLEVBQUVvQyxRQUFRcEMsRUFBRSxHQUFHQSxFQUFFLElBQUlKLEdBQUdJLEVBQUUsSUFBSUosRUFBRSxNQUFNLENBQUNJLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLElBQUksR0FBRyxJQUFJQSxFQUFFb0MsUUFBUXBDLEVBQUUsSUFBSUosR0FBR0ksRUFBRSxHQUFHQSxFQUFFLElBQUlKLEVBQUUsTUFBTSxDQUFDSSxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxJQUFJLEdBQUcsSUFBSUEsRUFBRW9DLFFBQVFwQyxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxJQUFJSixHQUFHSSxFQUFFLElBQUlKLEVBQUUsTUFBTSxDQUFDSSxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLElBQUksR0FBRyxJQUFJQSxFQUFFb0MsUUFBUXBDLEVBQUUsSUFBSUosR0FBR0ksRUFBRSxHQUFHQSxFQUFFLEdBQUdBLEVBQUUsSUFBSUosRUFBRSxNQUFNLENBQUNJLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLEdBQUdBLEVBQUUsSUFBSSxHQUFHYyxFQUFFLENBQUMsSUFBSUQsRUFBRWtwQixHQUFHL3BCLEdBQUdzQixFQUFFLEVBQUV2QyxFQUFFLEVBQUUsT0FBT2lCLEVBQUVvQyxTQUFTZCxHQUFHZixFQUFFeXBCLEdBQUdocUIsSUFBSSxHQUFHakIsRUFBRXdCLEVBQUUsSUFBSW1GLEVBQUVyRSxFQUFFUixHQUFHUyxFQUFFLElBQUl2QyxFQUFFLElBQUlxSCxLQUFJLFNBQVNwRyxHQUFHLE9BQU8sRUFBRUEsS0FBSSxPQUFPMEYsRUFBRXJFLEdBQUcsU0FBUzhvQixHQUFHbnFCLEdBQUcsT0FBT0EsRUFBRSxHQUFHLEVBQUUsU0FBU29xQixHQUFHcHFCLEVBQUVjLEdBQUcsR0FBR21FLEVBQUVqRixFQUFFQSxFQUFFa0csT0FBTyxHQUFHcEYsRUFBRUEsRUFBRW9GLE9BQU8sSUFBSSxPQUFNLEVBQUcsSUFBSWxHLEVBQUVvQyxTQUFTdEIsRUFBRXNCLE9BQU8sT0FBTSxFQUFHLEdBQUcsSUFBSXBDLEVBQUUsSUFBSSxJQUFJQSxFQUFFLElBQUksSUFBSWMsRUFBRSxJQUFJLElBQUlBLEVBQUUsR0FBRyxPQUFNLEVBQUcsR0FBR2QsRUFBRW9DLFNBQVN0QixFQUFFc0IsT0FBTyxDQUFDLElBQUk3QixFQUFFUCxFQUFFa0csT0FBTyxHQUFHLEdBQUd0RyxFQUFFa0IsRUFBRW9GLE9BQU8sR0FBRyxHQUFHLEdBQUczRixJQUFJWCxFQUFFLE9BQU0sRUFBRyxHQUFHdXFCLEdBQUc1cEIsSUFBSTRwQixHQUFHdnFCLEtBQUssSUFBSUksRUFBRSxJQUFJLElBQUljLEVBQUUsSUFBSSxPQUFNLEVBQUcsT0FBT2QsRUFBRSxLQUFLYyxFQUFFLElBQUlxcEIsR0FBR25xQixFQUFFLEtBQUttcUIsR0FBR3JwQixFQUFFLElBQUksU0FBU3VwQixHQUFHcnFCLEdBQUcsR0FBRyxNQUFNd21CLEdBQUcsQ0FBQyxJQUFJMWxCLEVBQUUwZ0IsR0FBR3hoQixHQUFHd21CLEdBQUcxbEIsRUFBRXdwQixhQUFheHBCLEVBQUV5cEIsa0JBQWtCLE9BQU8vRCxHQUFHLFNBQVNnRSxHQUFHeHFCLEdBQUcsR0FBRyxNQUFNeW1CLEdBQUcsQ0FBQyxJQUFJM2xCLEVBQUUwZ0IsR0FBR3hoQixHQUFHeW1CLEdBQUczbEIsRUFBRXdwQixhQUFheHBCLEVBQUUycEIseUJBQXlCLE9BQU85bEIsS0FBS0csSUFBSSxHQUFHMmhCLElBQUksU0FBU2lFLEdBQUcxcUIsR0FBRyxHQUFHLElBQUlBLEVBQUUsT0FBTyxFQUFFLElBQUljLEVBQUUwZ0IsR0FBR3hoQixHQUFHLE9BQU8ycUIsR0FBRzdwQixFQUFFLG9DQUFvQyxJQUFJZCxFQUFFLEVBQUUycUIsR0FBRzdwQixFQUFFLDRCQUE0QixFQUFFLEVBQUUsU0FBUzZwQixHQUFHM3FCLEVBQUVjLEdBQUcsT0FBTyxNQUFNZCxFQUFFMmxCLGFBQWE3a0IsR0FBRyxTQUFTOHBCLEdBQUc1cUIsR0FBRyxJQUFJLEdBQUcsTUFBTXdoQixHQUFHeGhCLEdBQUcsT0FBTSxFQUFHLE1BQU1BLEdBQUcsT0FBTSxFQUFHLE9BQU0sRUFBRyxTQUFTNnFCLEdBQUc3cUIsR0FBRyxHQUFHLElBQUlBLEVBQUUsT0FBTSxFQUFHLElBQUljLEVBQUUwZ0IsR0FBR3hoQixHQUFHLEdBQUcsSUFBSUEsR0FBRyxJQUFJMnFCLEdBQUc3cEIsRUFBRSxxQkFBcUIsT0FBTSxPQUFRLElBQUk2cEIsR0FBRzdwQixFQUFFLDBCQUEwQixPQUFNLEVBQUcsT0FBT2dxQixHQUFHaHFCLEdBQUcsU0FBU2lxQixHQUFHL3FCLEdBQUcsR0FBRyxJQUFJQSxFQUFFLE9BQU0sRUFBRyxJQUFJYyxFQUFFMGdCLEdBQUd4aEIsR0FBRyxHQUFHLElBQUlBLEVBQUUsQ0FBQyxHQUFHMnFCLEdBQUc3cEIsRUFBRSwwQkFBMEIsT0FBT2dxQixHQUFHaHFCLEdBQUcsR0FBRzZwQixHQUFHN3BCLEVBQUUsK0JBQStCLENBQUMsSUFBSVAsRUFBRU8sRUFBRTZrQixhQUFhLCtCQUErQixPQUFPLFNBQVMzbEIsRUFBRWMsR0FBRyxJQUFJUCxFQUFFd2lCLEdBQUcvaUIsRUFBRWMsR0FBR2xCLEVBQUVJLEVBQUU2bkIsZ0JBQWdCN25CLEVBQUV5b0IsWUFBWXpvQixFQUFFMG9CLFdBQVc5b0IsR0FBR0ksRUFBRWdyQixXQUFXaHJCLEVBQUUwb0IsV0FBVyxFQUFFbm9CLEVBQUVtakIsd0JBQXdCLEVBQUUsRUFBRSxFQUFFbmpCLEVBQUVzakIsbUJBQW1CdGpCLEVBQUUwakIscUJBQXFCLE1BQU0sSUFBSTFrQixFQUFFUyxFQUFFZ29CLG9CQUFvQmhvQixFQUFFaXBCLGdCQUFnQmpwQixFQUFFa3BCLFlBQVkzcEIsR0FBR1MsRUFBRW1wQixxQkFBcUJucEIsRUFBRWtwQixZQUFZbHBCLEVBQUVvcEIsa0JBQWtCcHBCLEVBQUUwb0IsV0FBVzlvQixFQUFFLEdBQUcsSUFBSXlCLEVBQUVyQixFQUFFdXBCLHVCQUF1QnZwQixFQUFFa3BCLGVBQWVscEIsRUFBRXdwQixxQkFBcUIsT0FBT3hwQixFQUFFeW9CLFlBQVl6b0IsRUFBRTBvQixXQUFXLE1BQU0xb0IsRUFBRWlwQixnQkFBZ0JqcEIsRUFBRWtwQixZQUFZLE1BQU1scEIsRUFBRWlyQixjQUFjcnJCLEdBQUdJLEVBQUVrckIsa0JBQWtCM3JCLEdBQUc4QixFQUFyZ0IsQ0FBd2dCUCxFQUFFUCxHQUFHLE9BQU0sRUFBRyxRQUFRb3FCLEdBQUc3cEIsRUFBRSx3QkFBeUI2cEIsR0FBRzdwQixFQUFFLDZCQUE2QmdxQixHQUFHaHFCLEdBQUksU0FBU2dxQixHQUFHOXFCLEdBQUcsSUFBSWMsRUFBRWlpQixHQUFHL2lCLEdBQUdPLEVBQUVQLEVBQUU2bkIsZ0JBQWdCN25CLEVBQUV5b0IsWUFBWXpvQixFQUFFMG9CLFdBQVdub0IsR0FBR1AsRUFBRWdyQixXQUFXaHJCLEVBQUUwb0IsV0FBVyxFQUFFNW5CLEVBQUUyaUIsb0JBQW9CLEVBQUUsRUFBRSxFQUFFM2lCLEVBQUUraUIsbUJBQW1CL2lCLEVBQUVvakIsaUJBQWlCLE1BQU0sSUFBSXRrQixFQUFFSSxFQUFFZ29CLG9CQUFvQmhvQixFQUFFaXBCLGdCQUFnQmpwQixFQUFFa3BCLFlBQVl0cEIsR0FBR0ksRUFBRW1wQixxQkFBcUJucEIsRUFBRWtwQixZQUFZbHBCLEVBQUVvcEIsa0JBQWtCcHBCLEVBQUUwb0IsV0FBV25vQixFQUFFLEdBQUcsSUFBSWhCLEVBQUVTLEVBQUV1cEIsdUJBQXVCdnBCLEVBQUVrcEIsZUFBZWxwQixFQUFFd3BCLHFCQUFxQixPQUFPeHBCLEVBQUV5b0IsWUFBWXpvQixFQUFFMG9CLFdBQVcsTUFBTTFvQixFQUFFaXBCLGdCQUFnQmpwQixFQUFFa3BCLFlBQVksTUFBTWxwQixFQUFFaXJCLGNBQWMxcUIsR0FBR1AsRUFBRWtyQixrQkFBa0J0ckIsR0FBR0wsRUFBRSxTQUFTNHJCLEdBQUduckIsR0FBRyxPQUFPLElBQUlBLEdBQUcsTUFBTXdoQixHQUFHeGhCLEdBQUdvckIsVUFBVSxJQUFJQyxHQUFHN3JCLE9BQU8rRSxPQUFPLENBQUMrbUIsYUFBYW5ILEdBQUdvSCxpQkFBaUJyRyxHQUFHc0cscUJBQXFCbEgsR0FBR21ILG9CQUFvQmhHLEdBQUdpRyxtQkFBbUI5RixHQUFHK0YscUJBQXFCdkYsR0FBR08sY0FBY0QsR0FBR0csWUFBWUQsR0FBR00sZ0JBQWdCRCxHQUFHMkUseUJBQXlCeEUsR0FBR3lFLHdCQUF3Qm5FLEdBQUdvRSxlQUFlLFdBQVcsT0FBTyxJQUFJaHRCLEVBQUV1RSxVQUFVLGlCQUFpQixFQUFFLEdBQUd3a0IsY0FBY0QsR0FBR21FLG9CQUFvQmpFLEdBQUdFLGtCQUFrQkQsR0FBR2lFLG1DQUFtQy9ELEdBQUdnRSxnQkFBZ0I1RCxHQUFHNkQsa0JBQWtCLFNBQVNsc0IsRUFBRWMsRUFBRVAsR0FBRytuQixHQUFHdG9CLEVBQUVPLEdBQUc0akIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRXVvQixjQUFjdm9CLEVBQUV3b0IsU0FBU2pvQixNQUFLNGpCLEdBQUdua0IsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUV5b0IsWUFBWXpvQixFQUFFMG9CLFdBQVcsVUFBU3lELGlDQUFpQ3hELEdBQUd5RCwwQkFBMEJ2RCxHQUFHd0QsbUNBQW1DdkQsR0FBR3dELHdCQUF3QixTQUFTdHNCLEVBQUVjLEdBQUdxakIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRWlwQixnQkFBZ0JqcEIsRUFBRWtwQixZQUFZLFNBQVEvRSxHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFdXNCLFNBQVMsRUFBRSxFQUFFdnNCLEVBQUV3c0IsT0FBT0MsTUFBTXpzQixFQUFFd3NCLE9BQU9FLFdBQVV2SSxHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFMnNCLFFBQVEsRUFBRSxFQUFFM3NCLEVBQUV3c0IsT0FBT0MsTUFBTXpzQixFQUFFd3NCLE9BQU9FLFlBQVdFLDhCQUE4QjVELEdBQUc2RCxrQ0FBa0N4RCxHQUFHeUQsb0JBQW9CeEQsR0FBR3lELDJCQUEyQnRELEdBQUd1RCxZQUFZakQsR0FBR2tELFlBQVlqRCxHQUFHa0QsYUFBYWpELEdBQUdrRCxnQ0FBZ0NqRCxHQUFHa0QsY0FBY2hELEdBQUdpRCx1QkFBdUJoRCxHQUFHaUQsb0JBQW9CLFdBQVc5RyxHQUFHLE1BQU0rRyx5QkFBeUIsV0FBVzlHLEdBQUcsTUFBTStHLHVCQUF1QmhELEdBQUdpRCxrQ0FBa0MvQyxHQUFHZ0QsYUFBYS9DLEdBQUdnRCxzQkFBc0IvQyxHQUFHZ0QsbUNBQW1DL0MsR0FBR2dELDhCQUE4QjlDLEdBQUcrQyxvQkFBb0IzQyxLQUFLLFNBQVM0QyxLQUFLanZCLEVBQUVxRSxJQUFJLFFBQU8sR0FBSSxTQUFTNnFCLEtBQUtsdkIsRUFBRXFFLElBQUksU0FBUSxHQUFJLFNBQVM4cUIsS0FBS252QixFQUFFcUUsSUFBSSxnQ0FBK0IsR0FBSU4sUUFBUUMsS0FBSywwREFBMEQsU0FBU29yQixHQUFHbHVCLEdBQUdsQixFQUFFd0UsUUFBUSxpQ0FBaUNULFFBQVFDLEtBQUs5QyxFQUFFLCtFQUErRSxTQUFTbXVCLEtBQUtyTyxHQUFHZCxtQkFBbUIsU0FBU29QLEtBQUssT0FBT3RPLEdBQUdiLFNBQVMsU0FBU29QLEdBQUdydUIsR0FBRyxPQUFPOGYsR0FBR1YsUUFBUXBmLEdBQUcsU0FBU3N1QixHQUFHdHVCLEVBQUVjLEdBQUcsT0FBT2dmLEdBQUd6QyxLQUFLcmQsRUFBRWMsR0FBRyxTQUFTeXRCLEdBQUd2dUIsR0FBRzJaLEdBQUczWixHQUFHaUUsU0FBUSxTQUFTakUsR0FBRyxPQUFPQSxFQUFFMFAsYUFBWSxTQUFTOGUsR0FBR3h1QixHQUFHLE9BQU84ZixHQUFHaEMsS0FBSzlkLEdBQUcsU0FBU3l1QixHQUFHenVCLEdBQUcsT0FBTzhmLEdBQUc3VCxLQUFLak0sR0FBRyxTQUFTMHVCLEdBQUcxdUIsR0FBRyxPQUFPOGYsR0FBRzFELFdBQVdwYyxHQUFHLFNBQVMydUIsS0FBSyxPQUFPN08sR0FBR2hFLFFBQVEsU0FBUzhTLEtBQUssT0FBTzlPLEdBQUd6RCxZQUFZLFNBQVN3UyxHQUFHN3VCLEdBQUc4ZixHQUFHM0MsY0FBY25kLEdBQUcsU0FBUzh1QixHQUFHOXVCLEdBQUcsT0FBTzhmLEdBQUdwRCxZQUFZMWMsR0FBRyxTQUFTK3VCLEdBQUcvdUIsR0FBRyxPQUFPOGYsR0FBR25ELG1CQUFtQjNjLEdBQUcsU0FBU2d2QixHQUFHaHZCLEVBQUVjLEVBQUVQLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxFQUFFLEdBQUd1ZixHQUFHakQsZ0JBQWdCN2MsRUFBRWMsRUFBRVAsR0FBRyxTQUFTMHVCLEtBQUssT0FBT25QLEdBQUcvQixRQUFRLFNBQVNtUixHQUFHbHZCLEVBQUVjLEdBQUdoQyxFQUFFNkQsWUFBWTNDLEVBQUVjLEdBQUcsU0FBU3F1QixLQUFLLElBQUksSUFBSW52QixFQUFFLEdBQUdjLEVBQUUsRUFBRUEsRUFBRXNELFVBQVVoQyxPQUFPdEIsSUFBSWQsRUFBRWMsR0FBR3NELFVBQVV0RCxHQUFHaEMsRUFBRXdFLFFBQVEsWUFBWVQsUUFBUUMsS0FBS25CLE1BQU1rQixRQUFRN0MsR0FBRyxTQUFTb3ZCLEdBQUdwdkIsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFLEdBQUdvRixFQUFFcEYsR0FBRyxNQUFNLFdBQVdjLEVBQUUsR0FBRyxDQUFDZCxFQUFFb0MsUUFBUSxJQUFJbkIsTUFBTWtFLFFBQVFuRixHQUFHLE1BQU0sR0FBRyxJQUFJLElBQUlKLEVBQUUsR0FBR3FCLE1BQU1rRSxRQUFRNUUsSUFBSTZFLEVBQUU3RSxJQUFJLFdBQVdPLEdBQUdsQixFQUFFeUMsS0FBSzlCLEVBQUU2QixRQUFRN0IsRUFBRUEsRUFBRSxHQUFHLE9BQU9VLE1BQU1rRSxRQUFRbkYsSUFBSWxCLEVBQUV3RSxRQUFRLHVDQUF1QyxTQUFTdEQsRUFBRWMsRUFBRVAsRUFBRVgsR0FBVyxHQUFSQSxFQUFFQSxHQUFHLEdBQU9xQixNQUFNa0UsUUFBUXJFLElBQUtzRSxFQUFFdEUsR0FBekIsQ0FBaUxrRSxFQUFFekUsRUFBRTZCLE9BQU8sR0FBRSxXQUFXLE1BQU0sZUFBZXhDLEVBQUUwRSxLQUFLLE1BQU0sK0NBQStDeEQsRUFBRXNCLE9BQU8sZUFBYzRDLEVBQUVsRSxFQUFFc0IsU0FBUzdCLEVBQUUsSUFBRyxXQUFXLE1BQU0sZUFBZVgsRUFBRTBFLEtBQUssTUFBTSxpQkFBaUIvRCxFQUFFLEdBQUcsc0JBQXNCTyxFQUFFc0IsT0FBTyxlQUErQixJQUFqQixJQUFJN0MsRUFBRWdCLEVBQUUyRixNQUFNLEdBQVc3RSxFQUFFLEVBQUVBLEVBQUVQLEVBQUVzQixTQUFTZixFQUFFckIsRUFBRWMsRUFBRU8sR0FBRzlCLEVBQUVLLEVBQUV5RyxPQUFPaEYsU0FBemMyRCxFQUFFLElBQUl6RSxFQUFFNkIsUUFBTyxXQUFXLE1BQU0sZUFBZXhDLEVBQUUwRSxLQUFLLE1BQU0sMERBQTBEL0QsRUFBRSxHQUFHLGVBQTdMLENBQWdoQlAsRUFBRUosRUFBRSxJQUFJQSxFQUFFLFNBQVN5dkIsR0FBR3J2QixFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLEdBQUcsTUFBTUksSUFBSSxZQUFZQSxHQUFHQSxJQUFJYyxHQUFHLFlBQVlkLEdBQUcsV0FBV2MsR0FBRyxNQUFNLElBQUkyQyxNQUFNLGFBQWFsRCxFQUFFLGdCQUFnQlgsRUFBRSxhQUFhSSxFQUFFLG9CQUFvQmMsRUFBRSxXQUFXLFNBQVN3dUIsR0FBR3R2QixFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxXQUFXSSxhQUFhMk4sR0FBRyxPQUFPMGhCLEdBQUd6dkIsRUFBRUksRUFBRW1NLE1BQU1yTCxFQUFFUCxHQUFHUCxFQUFFLElBQUlULEVBQUVvSSxFQUFFM0gsR0FBRyxHQUFHLFdBQVdULEdBQUcsQ0FBQyxPQUFPLFFBQVEsV0FBV2d3QixRQUFRM3ZCLElBQUksSUFBSUwsRUFBRUssR0FBR3l2QixHQUFHenZCLEVBQUVMLEVBQUV1QixFQUFFUCxHQUFHLE1BQU1QLElBQUlvRixFQUFFcEYsS0FBS2lCLE1BQU1rRSxRQUFRbkYsSUFBSSxpQkFBaUJBLEdBQUcsa0JBQWtCQSxHQUFHLGlCQUFpQkEsRUFBRSxDQUFDLElBQUlxQixFQUFFLE1BQU1yQixFQUFFLE9BQU9BLEVBQUVtQixZQUFZOUIsS0FBSyxNQUFNLElBQUlvRSxNQUFNLGFBQWEzQyxFQUFFLGdCQUFnQlAsRUFBRSw4Q0FBOENjLEVBQUUsS0FBSyxJQUFJUixFQUFFdXVCLEdBQUdwdkIsRUFBRVQsR0FBRzZGLEVBQUVwRixJQUFJaUIsTUFBTWtFLFFBQVFuRixLQUFLQSxFQUFFLENBQUNBLElBQUksSUFBSXNCLEVBQUUsV0FBVy9CLEVBQUV3SSxFQUFFL0gsRUFBRVQsRUFBRVQsRUFBRXdFLFFBQVEsVUFBVXBFLEVBQUVjLEVBQUUsSUFBRyxHQUFJLE9BQU8yTixHQUFHQyxLQUFLL00sRUFBRSxDQUFDd00sT0FBTy9MLEdBQUcvQixHQUFHLFNBQVNpd0IsR0FBR3h2QixFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxZQUFZcUIsTUFBTWtFLFFBQVFuRixHQUFHLE1BQU0sSUFBSXlELE1BQU0sWUFBWTNDLEVBQUUsY0FBY1AsRUFBRSwyQ0FBMkMsT0FBT1AsRUFBRW9HLEtBQUksU0FBU3BHLEVBQUVKLEdBQUcsT0FBTzB2QixHQUFHdHZCLEVBQUVjLEVBQUUsSUFBSWxCLEVBQUUsSUFBSVcsS0FBSVgsR0FBRyxTQUFTNnZCLEdBQUd6dkIsRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUUsRUFBRUEsRUFBRVAsRUFBRW9DLFNBQVM3QixFQUFFLEdBQUdQLEVBQUVBLEVBQUVvQyxPQUFPN0IsRUFBRSxLQUFLTyxFQUFFLEVBQUVQLEVBQUUsT0FBTSxFQUFHLE9BQU0sRUFBRyxTQUFTbXZCLEdBQUcxdkIsRUFBRWMsRUFBRVAsR0FBRyxJQUFJLElBQUlYLEVBQUVJLEVBQUVvQyxPQUFPdEIsRUFBRXNCLE9BQU83QyxFQUFFLEdBQUc4QixFQUFFLEVBQUV2QyxFQUFFLEVBQUUrQixFQUFFLEVBQUVBLEVBQUVqQixFQUFFaUIsS0FBSyxJQUFJTixFQUFFZ3ZCLFFBQVExdUIsR0FBR3RCLEVBQUU4QyxLQUFLckMsRUFBRXFCLE1BQU05QixFQUFFOEMsS0FBS3ZCLEVBQUVoQyxNQUFNLE9BQU9TLEVBQUUsU0FBU293QixHQUFHM3ZCLEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxFQUFFLEdBQUdYLEVBQUVJLEVBQUVvQyxPQUFPN0MsRUFBRSxFQUFFQSxFQUFFSyxFQUFFTCxLQUFLLElBQUl1QixFQUFFeXVCLFFBQVFod0IsSUFBSWdCLEVBQUU4QixLQUFLckMsRUFBRVQsSUFBSSxNQUFNLENBQUNnQixFQUFFTyxFQUFFc0YsS0FBSSxTQUFTdEYsR0FBRyxPQUFPZCxFQUFFYyxPQUFNLFNBQVM4dUIsR0FBRzV2QixFQUFFYyxHQUFHLE9BQU80dUIsR0FBRzF2QixFQUFFYyxFQUFFc0YsS0FBSSxTQUFTcEcsR0FBRyxPQUFPLEtBQUljLEdBQUcsU0FBUyt1QixHQUFHN3ZCLEVBQUVjLEVBQUVQLEdBQUd5RSxFQUFFeXFCLEdBQUczdUIsRUFBRVAsSUFBRyxXQUFXLE9BQU9QLEVBQUUsb0RBQW9EYyxFQUFFLGFBQWFQLEVBQUUsYUFBWSxTQUFTdXZCLEdBQUc5dkIsRUFBRWMsR0FBRyxHQUFHMnVCLEdBQUd6dkIsRUFBRWMsR0FBRyxPQUFPLEtBQUssSUFBSSxJQUFJUCxFQUFFLEdBQUdYLEVBQUUsRUFBRUEsRUFBRWtCLElBQUlsQixHQUFHLElBQUlJLEVBQUV1dkIsUUFBUTN2QixJQUFJVyxFQUFFOEIsS0FBS3pDLEdBQUcsT0FBT0ksRUFBRWlFLFNBQVEsU0FBU2pFLEdBQUcsT0FBT08sRUFBRThCLEtBQUtyQyxNQUFLTyxFQUFFLFNBQVN3dkIsR0FBRy92QixHQUFHLE9BQU9BLEVBQUVvRyxLQUFJLFNBQVNwRyxFQUFFYyxHQUFHLE1BQU0sQ0FBQ0EsRUFBRWQsTUFBS3dHLE1BQUssU0FBU3hHLEVBQUVjLEdBQUcsT0FBT2QsRUFBRSxHQUFHYyxFQUFFLE1BQUtzRixLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUUsTUFBSyxTQUFTZ3dCLEdBQUdod0IsRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUUsR0FBR1gsRUFBRWtCLEVBQUVkLEVBQUVKLEVBQUVrQixJQUFJbEIsRUFBRVcsRUFBRThCLEtBQUt6QyxHQUFHLE9BQU9XLEVBQUUsU0FBUzB2QixHQUFHandCLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRSxHQUFHb0MsT0FBT3BDLEVBQUVpRSxTQUFRLFNBQVNqRSxFQUFFYyxHQUFHa0UsRUFBRWhGLEVBQUVvQyxTQUFTN0IsR0FBRSxXQUFXLE1BQU0sa0JBQWtCQSxFQUFFLHNCQUFzQk8sRUFBRSwrQ0FBK0NQLEVBQUUsVUFBUXlFLEVBQUVsRSxHQUFHLEdBQUdBLEVBQUVQLEdBQUUsV0FBVyxNQUFNLGtCQUFrQkEsRUFBRSxrQ0FBa0NBLEVBQUUsR0FBRyxPQUFNLElBQUlYLEVBQUVJLEVBQUUsR0FBR0EsRUFBRWlFLFNBQVEsU0FBU2pFLEVBQUVULEdBQUcsSUFBSSxJQUFJOEIsRUFBRSxFQUFFQSxFQUFFZCxFQUFFYyxJQUFJMkQsRUFBRTNELElBQUlQLEdBQUdkLEVBQUVxQixLQUFLekIsRUFBRXlCLElBQUcsV0FBVyxNQUFNLGtCQUFrQmQsRUFBRSx1QkFBdUJoQixFQUFFLE1BQU1TLEVBQUUsMkNBQTJDSixFQUFFLHFDQUFxQ0wsRUFBRSxVQUFRLFNBQVMyd0IsR0FBR2x3QixFQUFFYyxHQUFHLElBQUksSUFBSVAsRUFBRVAsRUFBRSxHQUFHa0csUUFBUXRHLEVBQUUsRUFBRUEsRUFBRUksRUFBRW9DLE9BQU94QyxJQUFJVyxFQUFFTyxJQUFJZCxFQUFFSixHQUFHa0IsR0FBRyxPQUFPUCxFQUFFLFNBQVM0dkIsR0FBR253QixHQUFHLElBQUljLEVBQUV0QixPQUFPaWQsS0FBS3pjLEdBQUcsR0FBRyxJQUFJYyxFQUFFc0IsT0FBTyxNQUFNLElBQUlxQixNQUFNLHlHQUF5RzNDLEVBQUVzQixPQUFPLFVBQVUsSUFBSTdCLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVJLEVBQUVPLEdBQUdBLEVBQUU2dkIsU0FBUyxPQUFPN3ZCLEVBQUVBLEVBQUU4dkIsVUFBVSxFQUFFOXZCLEVBQUU2QixPQUFPLElBQUksSUFBSTdDLEVBQUUsV0FBVyxJQUFJLElBQUlTLEVBQUUsR0FBR2MsRUFBRSxFQUFFQSxFQUFFc0QsVUFBVWhDLE9BQU90QixJQUFJZCxFQUFFYyxHQUFHc0QsVUFBVXRELEdBQUdnZixHQUFHdkMsV0FBV2hkLEdBQUcsSUFBSSxJQUFJaEIsRUFBRUssRUFBRStCLFdBQU0sRUFBTzNCLEdBQUcsT0FBT1QsYUFBYTZCLFNBQVN5QixRQUFRNGEsTUFBTSwyQ0FBMkNxQyxHQUFHdEMsU0FBU2plLEdBQUdBLEVBQUUsTUFBTVMsR0FBRyxNQUFNOGYsR0FBR3RDLFNBQVMsTUFBTXhkLElBQUksT0FBT1IsT0FBT0MsZUFBZUYsRUFBRSxPQUFPLENBQUNRLE1BQU1RLEVBQUVpRCxjQUFhLElBQUtqRSxFQUFFVCxFQUFFa0UsYUFBYSxhQUFZLFdBQVcsT0FBT2xFLEVBQUV1RSxVQUFVLGlCQUFpQixLQUFJdkUsRUFBRWtFLGFBQWEsaUJBQWdCLFdBQVcsT0FBTzRuQixHQUFHLEdBQUcsRUFBRUEsR0FBRyxHQUFHLEVBQUUsS0FBSTlyQixFQUFFa0UsYUFBYSwwQkFBeUIsV0FBVyxPQUFPLElBQUlsRSxFQUFFYSxJQUFJLG9CQUFtQmIsRUFBRWtFLGFBQWEscUJBQW9CLFdBQVcsT0FBTSxLQUFLbEUsRUFBRWtFLGFBQWEsNEJBQTJCLFdBQVcsT0FBTSxLQUFLbEUsRUFBRWtFLGFBQWEsY0FBYSxXQUFXLE9BQU9sRSxFQUFFd0UsUUFBUSxnQkFBZXhFLEVBQUVrRSxhQUFhLDRCQUEyQixXQUFXLE9BQU9sRSxFQUFFd0UsUUFBUSxpQkFBZ0J4RSxFQUFFa0UsYUFBYSxtQkFBa0IsV0FBVyxPQUFPbEUsRUFBRXdFLFFBQVEsaUJBQWdCeEUsRUFBRWtFLGFBQWEsNEJBQTJCLFdBQVcsT0FBTSxLQUFLbEUsRUFBRWtFLGFBQWEsZ0NBQStCLFdBQVcsT0FBT2xFLEVBQUV3RSxRQUFRLGlCQUFnQnhFLEVBQUVrRSxhQUFhLCtCQUE4QixXQUFXLE9BQU9sRSxFQUFFd0UsUUFBUSxpQkFBZ0J4RSxFQUFFa0UsYUFBYSwrQkFBOEIsV0FBVyxPQUFPbEUsRUFBRXdFLFFBQVEsaUJBQWdCeEUsRUFBRWtFLGFBQWEsK0JBQThCLFdBQVcsT0FBT2xFLEVBQUV3RSxRQUFRLGlCQUFnQnhFLEVBQUVrRSxhQUFhLHFCQUFvQixXQUFXLE9BQU9sRSxFQUFFd0UsUUFBUSxpQkFBZ0J4RSxFQUFFa0UsYUFBYSx1QkFBc0IsV0FBVyxPQUFPbEUsRUFBRXdFLFFBQVEsaUJBQWdCeEUsRUFBRWtFLGFBQWEscUJBQW9CLFdBQVcsT0FBT2xFLEVBQUV3RSxRQUFRLGlCQUFnQnhFLEVBQUVrRSxhQUFhLDBCQUF5QixXQUFXLE9BQU9xbkIsR0FBR3ZyQixFQUFFdUUsVUFBVSxxQkFBb0J2RSxFQUFFa0UsYUFBYSxnQ0FBK0IsV0FBVyxPQUFPd25CLEdBQUcxckIsRUFBRXVFLFVBQVUscUJBQW9CdkUsRUFBRWtFLGFBQWEsZ0RBQStDLFdBQVcsSUFBSWhELEVBQUVsQixFQUFFdUUsVUFBVSxpQkFBaUIsT0FBTyxJQUFJckQsRUFBRSxFQUFFMHFCLEdBQUcxcUIsTUFBS2xCLEVBQUVrRSxhQUFhLGlEQUFnRCxXQUFXLE9BQU9sRSxFQUFFdUUsVUFBVSxnREFBZ0QsSUFBSXJELEVBQUV3Z0IsVUFBVUMsV0FBV0QsVUFBVUcsUUFBUVosT0FBT3VRLFFBQVEsMlRBQTJUNVAsS0FBSzFnQixJQUFJLDBrREFBMGtEMGdCLEtBQUsxZ0IsRUFBRXV3QixPQUFPLEVBQUUsTUFBTSxJQUFJdndCLEtBQUlsQixFQUFFa0UsYUFBYSxnQ0FBK0IsV0FBVyxPQUFPNm5CLEdBQUcvckIsRUFBRXVFLFVBQVUscUJBQW9CdkUsRUFBRWtFLGFBQWEsZ0NBQStCLFdBQVcsT0FBT2xFLEVBQUV3RSxRQUFRLDZCQUE2QnhFLEVBQUV3RSxRQUFRLG1DQUFrQ3hFLEVBQUVrRSxhQUFhLGdDQUErQixXQUFXLE9BQU8rbkIsR0FBR2pzQixFQUFFdUUsVUFBVSxxQkFBb0J2RSxFQUFFa0UsYUFBYSwyQkFBMEIsV0FBVyxPQUFPbW9CLEdBQUdyc0IsRUFBRXVFLFVBQVUscUJBQW9CdkUsRUFBRWtFLGFBQWEsNkJBQTRCLFdBQVcsT0FBT2xFLEVBQUV3RSxRQUFRLGdDQUFnQyxFQUFFLEtBQUl5SyxHQUFHbWdCLEdBQUcsSUFBSXNDLEdBQUdMLEdBQUcsQ0FBQ00sU0FBUyxTQUFTendCLEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsT0FBTyxXQUFXSixFQUFFMHZCLEdBQUd4dUIsRUFBRSxPQUFPLFdBQVcsT0FBTzFCLEVBQUVtQixFQUFFa00sTUFBTTdNLEVBQUU2TSxNQUFNLHlCQUF5QmxNLEVBQUVrTSxNQUFNLFFBQVE3TSxFQUFFNk0sTUFBTSx5Q0FBeUNxVCxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFMHdCLFFBQVFud0IsRUFBRVgsS0FBSSxDQUFDK3dCLE1BQU1wd0IsRUFBRXF3QixNQUFNaHhCLE9BQU9peEIsR0FBR1YsR0FBRyxDQUFDVyxNQUFNLFNBQVM5d0IsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxRQUFRLFFBQVEsT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUUrd0IsS0FBS2p3QixLQUFJLENBQUNrd0IsT0FBT2x3QixPQUFPbXdCLEdBQUdkLEdBQUcsQ0FBQ2UsTUFBTSxTQUFTbHhCLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsUUFBUSxRQUFRLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFbXhCLEtBQUtyd0IsS0FBSSxDQUFDa3dCLE9BQU9sd0IsT0FBTyxTQUFTc3dCLEdBQUdweEIsRUFBRWMsRUFBRVAsR0FBRyxPQUFPOHdCLEdBQUdyeEIsRUFBRWMsRUFBRXN1QixHQUFHcHZCLEVBQUVPLEdBQUdBLEdBQUcsU0FBUzh3QixHQUFHcnhCLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsR0FBRyxNQUFNQSxJQUFJQSxFQUFFK0gsRUFBRTNILElBQUksY0FBY0osRUFBRSxNQUFNLElBQUk2RCxNQUFNLG9GQUFvRixJQUFJMkIsRUFBRXBGLEtBQUtpQixNQUFNa0UsUUFBUW5GLElBQUksaUJBQWlCQSxHQUFHLGtCQUFrQkEsR0FBRyxpQkFBaUJBLEVBQUUsTUFBTSxJQUFJeUQsTUFBTSw0SEFBNEgsR0FBRyxNQUFNM0MsRUFBRSxDQUFDeUgsRUFBRXpILEdBQUcsSUFBSXZCLEVBQUU4RixFQUFFdkUsR0FBR08sRUFBRWdFLEVBQUU5RSxHQUFHeUUsRUFBRXpGLElBQUk4QixHQUFFLFdBQVcsTUFBTSxpQ0FBaUNQLEVBQUUsNkJBQTZCdkIsRUFBRSxtQkFBbUI4QixLQUFJLElBQUksSUFBSVIsRUFBRSxFQUFFQSxFQUFFTixFQUFFNkIsU0FBU3ZCLEVBQUUsQ0FBQyxJQUFJUyxFQUFFZixFQUFFTSxHQUFHOUIsRUFBRThCLElBQUlOLEVBQUU2QixPQUFPLEdBQUdkLElBQUkrRCxFQUFFdkUsRUFBRW9GLE1BQU1yRixJQUFJbUUsRUFBRXpFLEVBQUVNLEtBQUtDLEVBQUVELEtBQUs5QixHQUFFLFdBQVcsTUFBTSxnREFBZ0R3QixFQUFFLHdDQUF3Q08sRUFBRSxVQUFTLE9BQU9zRSxFQUFFcEYsSUFBSWlCLE1BQU1rRSxRQUFRbkYsS0FBS0EsRUFBRSxDQUFDQSxJQUFJYyxFQUFFQSxHQUFHUCxFQUFFUCxFQUFFLFdBQVdKLEVBQUVtSSxFQUFFL0gsRUFBRUosRUFBRWQsRUFBRXdFLFFBQVEsVUFBVXBFLEVBQUVjLEVBQUUsSUFBRyxHQUFJMk4sR0FBR0MsS0FBSzlNLEVBQUUsQ0FBQ3VNLE9BQU9yTixHQUFHSixHQUFHLFNBQVMweEIsR0FBR3R4QixFQUFFYyxHQUFHLElBQUlzRSxFQUFFcEYsSUFBSSxXQUFXYyxHQUFHRyxNQUFNa0UsUUFBUW5GLEtBQUssY0FBY2MsRUFBRSxNQUFNLElBQUkyQyxNQUFNLGtGQUFrRixHQUFHLFdBQVczQyxHQUFHc0UsRUFBRXBGLE1BQU1BLGFBQWE4RyxZQUFZLE1BQU0sSUFBSXJELE1BQU0sNkVBQTZFLE9BQU80dEIsR0FBR3J4QixFQUFFLEdBQUcsR0FBR2MsR0FBRyxTQUFTeXdCLEdBQUd2eEIsRUFBRWMsR0FBR29FLEVBQUVsRixHQUFHLElBQUlPLEVBQUU2dUIsR0FBR3B2QixFQUFFYyxHQUFHLEdBQUcsSUFBSVAsRUFBRTZCLE9BQU8sTUFBTSxJQUFJcUIsTUFBTSxzREFBc0QsT0FBTzR0QixHQUFHcnhCLEVBQUUsS0FBS08sRUFBRU8sR0FBRyxTQUFTMHdCLEdBQUd4eEIsRUFBRWMsRUFBRVAsR0FBRyxHQUFHMkUsRUFBRWxGLEdBQUcsTUFBTWMsR0FBRyxJQUFJQSxFQUFFc0IsT0FBTyxNQUFNLElBQUlxQixNQUFNLGlEQUFpRCxJQUFJN0QsRUFBRXd2QixHQUFHcHZCLEVBQUVPLEdBQUcsR0FBRyxJQUFJWCxFQUFFd0MsUUFBUSxJQUFJeEMsRUFBRXdDLE9BQU8sTUFBTSxJQUFJcUIsTUFBTSxrRUFBa0UsR0FBRyxJQUFJN0QsRUFBRXdDLFFBQVEsTUFBTXRCLEVBQUUsTUFBTSxJQUFJMkMsTUFBTSxnRkFBZ0YsT0FBTzR0QixHQUFHcnhCLEVBQUVjLEVBQUVsQixFQUFFVyxHQUFHLFNBQVNreEIsR0FBR3p4QixFQUFFYyxFQUFFUCxHQUFHLEdBQUcyRSxFQUFFbEYsR0FBRyxNQUFNYyxHQUFHLElBQUlBLEVBQUVzQixPQUFPLE1BQU0sSUFBSXFCLE1BQU0sbURBQW1ELElBQUk3RCxFQUFFd3ZCLEdBQUdwdkIsRUFBRU8sR0FBRyxHQUFHLElBQUlYLEVBQUV3QyxRQUFRLElBQUl4QyxFQUFFd0MsT0FBTyxNQUFNLElBQUlxQixNQUFNLG9FQUFvRSxHQUFHLElBQUk3RCxFQUFFd0MsUUFBUSxNQUFNdEIsRUFBRSxNQUFNLElBQUkyQyxNQUFNLDJFQUEyRSxPQUFPNHRCLEdBQUdyeEIsRUFBRWMsRUFBRWxCLEVBQUVXLEdBQUcsU0FBU214QixHQUFHMXhCLEVBQUVjLEVBQUVQLEdBQUcsR0FBRzJFLEVBQUVsRixHQUFHLE1BQU1jLEdBQUcsSUFBSUEsRUFBRXNCLE9BQU8sTUFBTSxJQUFJcUIsTUFBTSxrREFBa0QsSUFBSTdELEVBQUV3dkIsR0FBR3B2QixFQUFFTyxHQUFHLEdBQUcsSUFBSVgsRUFBRXdDLFFBQVEsSUFBSXhDLEVBQUV3QyxPQUFPLE1BQU0sSUFBSXFCLE1BQU0sc0VBQXNFLEdBQUcsSUFBSTdELEVBQUV3QyxRQUFRLE1BQU10QixFQUFFLE1BQU0sSUFBSTJDLE1BQU0sMkVBQTJFLE9BQU80dEIsR0FBR3J4QixFQUFFYyxFQUFFbEIsRUFBRVcsR0FBRyxTQUFTb3hCLEdBQUczeEIsRUFBRWMsRUFBRVAsR0FBRyxHQUFHMkUsRUFBRWxGLEdBQUcsTUFBTWMsR0FBRyxJQUFJQSxFQUFFc0IsT0FBTyxNQUFNLElBQUlxQixNQUFNLGtEQUFrRCxJQUFJN0QsRUFBRXd2QixHQUFHcHZCLEVBQUVPLEdBQUcsR0FBRyxJQUFJWCxFQUFFd0MsUUFBUSxJQUFJeEMsRUFBRXdDLE9BQU8sTUFBTSxJQUFJcUIsTUFBTSx3RUFBd0UsR0FBRyxJQUFJN0QsRUFBRXdDLFFBQVEsTUFBTXRCLEVBQUUsTUFBTSxJQUFJMkMsTUFBTSwyRUFBMkUsT0FBTzR0QixHQUFHcnhCLEVBQUVjLEVBQUVsQixFQUFFVyxHQUFHLFNBQVNxeEIsR0FBRzV4QixFQUFFYyxFQUFFUCxHQUFHLEdBQUcyRSxFQUFFbEYsR0FBRyxNQUFNYyxHQUFHLElBQUlBLEVBQUVzQixPQUFPLE1BQU0sSUFBSXFCLE1BQU0saURBQWlELElBQUk3RCxFQUFFd3ZCLEdBQUdwdkIsRUFBRU8sR0FBRyxHQUFHLElBQUlYLEVBQUV3QyxRQUFRLElBQUl4QyxFQUFFd0MsT0FBTyxNQUFNLElBQUlxQixNQUFNLDBFQUEwRSxHQUFHLElBQUk3RCxFQUFFd0MsUUFBUSxNQUFNdEIsRUFBRSxNQUFNLElBQUkyQyxNQUFNLDJFQUEyRSxPQUFPNHRCLEdBQUdyeEIsRUFBRWMsRUFBRUEsR0FBR2xCLEVBQUVBLEVBQUVXLEdBQUcsU0FBU3N4QixHQUFHN3hCLEVBQUVjLEdBQUcsUUFBRyxJQUFTQSxJQUFJQSxFQUFFLFdBQVcsY0FBY0EsRUFBRSxDQUFDLElBQUlQLEVBQUVzeEIsR0FBRzd4QixFQUFFLFdBQVdKLEVBQUVreUIsR0FBRzl4QixFQUFFLFdBQVcsT0FBT3d3QixHQUFHandCLEVBQUVYLEdBQUcsSUFBSUwsRUFBRTRJLEVBQUU5QyxFQUFFckYsR0FBR2MsR0FBRyxPQUFPNk0sR0FBR0MsS0FBSzVOLEVBQUUsQ0FBQ3FOLE9BQU85TixHQUFHdUIsR0FBRyxTQUFTZ3hCLEdBQUc5eEIsRUFBRWMsR0FBRyxRQUFHLElBQVNBLElBQUlBLEVBQUUsV0FBVyxjQUFjQSxFQUFFLENBQUMsSUFBSVAsRUFBRXV4QixHQUFHOXhCLEVBQUUsV0FBV0osRUFBRWt5QixHQUFHOXhCLEVBQUUsV0FBVyxPQUFPd3dCLEdBQUdqd0IsRUFBRVgsR0FBRyxJQUFJTCxFQUFFNkksRUFBRS9DLEVBQUVyRixHQUFHYyxHQUFHLE9BQU82TSxHQUFHQyxLQUFLNU4sRUFBRSxDQUFDcU4sT0FBTzlOLEdBQUd1QixHQUFHLFNBQVNpeEIsR0FBRy94QixFQUFFYyxFQUFFUCxHQUFHLE9BQU91ZixHQUFHbkMsV0FBVSxTQUFTL2QsR0FBRyxPQUFPQSxFQUFFMlEsS0FBS3ZRLEVBQUVjLEVBQUVQLEtBQUksSUFBSSxTQUFTeXhCLEdBQUdoeUIsRUFBRWMsRUFBRVAsR0FBRyxHQUFHQSxHQUFHLEVBQUUsTUFBTSxJQUFJa0QsTUFBTSw0Q0FBNEMsT0FBT3FjLEdBQUduQyxXQUFVLFNBQVMvZCxHQUFHLE9BQU9BLEVBQUVxeUIsU0FBU2p5QixFQUFFYyxFQUFFUCxLQUFJLElBQUksU0FBUzJ4QixHQUFHbHlCLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsUUFBRyxJQUFTVyxJQUFJQSxFQUFFLFFBQUcsSUFBU1gsSUFBSUEsRUFBRSxXQUFXLElBQUlXLEVBQUUsTUFBTSxJQUFJa0QsTUFBTSw4QkFBOEIsR0FBR3pELElBQUljLEdBQUdkLEVBQUVjLEdBQUdQLEVBQUUsR0FBR08sRUFBRWQsR0FBR08sRUFBRSxFQUFFLE9BQU91eEIsR0FBRyxDQUFDLEdBQUdseUIsR0FBRyxJQUFJTCxFQUFFNkksRUFBRXpELEtBQUsrUCxJQUFJL1AsS0FBS2dCLE1BQU03RSxFQUFFZCxHQUFHTyxJQUFJWCxHQUFHa0IsRUFBRWQsR0FBRyxJQUFJTyxJQUFJQSxHQUFHLEdBQUdoQixFQUFFLEdBQUdTLEVBQUUsSUFBSSxJQUFJcUIsRUFBRSxFQUFFQSxFQUFFOUIsRUFBRTZDLE9BQU9mLElBQUk5QixFQUFFOEIsR0FBRzlCLEVBQUU4QixFQUFFLEdBQUdkLEVBQUUsT0FBT2d4QixHQUFHaHlCLEVBQUVLLEdBQUcsSUFBSXV5QixHQUFHaEMsR0FBRyxDQUFDaUMsVUFBVSxTQUFTcHlCLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxZQUFZLEdBQUcsY0FBY2MsRUFBRXFMLE1BQU0sQ0FBQyxJQUFJNUwsRUFBRTR4QixHQUFHdEIsR0FBRy92QixJQUFJbEIsRUFBRXl5QixHQUFHcEIsR0FBR253QixJQUFJLE9BQU8wdkIsR0FBR2p3QixFQUFFWCxHQUFHLE9BQU9rZ0IsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRXFWLFNBQVN2VSxLQUFJLENBQUN3eEIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsTUFBTSxDQUFDd3hCLEdBQUcsV0FBVyxPQUFPRCxHQUFHcnlCLFdBQVVxeUIsR0FBR2xDLEdBQUcsQ0FBQ29DLFdBQVcsU0FBU3Z5QixHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksYUFBYSxPQUFPOGYsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRW9WLFVBQVV0VSxLQUFJLENBQUN3eEIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsTUFBTSxDQUFDd3hCLEdBQUcsV0FBVyxPQUFPRCxHQUFHcnlCLFdBQWN3eUIsR0FBR3JDLEdBQUcsQ0FBQ3NDLFFBQVEsU0FBU3p5QixFQUFFYyxRQUFHLElBQVNBLElBQUlBLEVBQUUsR0FBR2tFLEVBQUVoRixFQUFFb0MsUUFBUSxHQUFFLFdBQVcsTUFBTSx3Q0FBdUMsSUFBSTdCLEVBQUVpdkIsR0FBR3h2QixFQUFFLFVBQVUsVUFBVSxjQUFjTyxFQUFFLEdBQUc0TCxPQUFPNUwsRUFBRTBELFNBQVEsU0FBU2pFLEdBQUcsR0FBRyxjQUFjQSxFQUFFbU0sTUFBTSxNQUFNLElBQUkxSSxNQUFNLDRFQUE0RXpELEVBQUVtTSxNQUFNLFNBQVFyTCxFQUFFcUYsRUFBRXJGLEVBQUVQLEVBQUUsR0FBR2tNLE9BQU8sR0FBRyxJQUFJN00sRUFBRXN3QixHQUFHM3ZCLEVBQUU2RixLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUV5TSxTQUFRM0wsR0FBRyxHQUFHLElBQUl1RSxFQUFFekYsR0FBRyxPQUFPd3hCLEdBQUcsR0FBR3h4QixHQUFHLEdBQUcsS0FBS1csRUFBRUEsRUFBRW15QixRQUFPLFNBQVMxeUIsR0FBRyxPQUFPQSxFQUFFd00sS0FBSyxNQUFLcEssT0FBTyxPQUFPN0IsRUFBRSxHQUFHLElBQUloQixFQUFFZ0IsRUFBRTZGLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRXlNLFNBQVF3akIsR0FBRzF3QixFQUFFdUIsR0FBRyxJQUFJTyxFQUFFZCxFQUFFLE9BQU91ZixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFcUcsT0FBTzlGLEVBQUVPLEtBQUlPLEdBQUUsU0FBU3JCLEdBQUcsSUFBSU8sRUFBRWhCLEVBQUU2RyxLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUVjLE1BQUssT0FBTzZ4QixHQUFHM3lCLEVBQUVPLEVBQUVPLEdBQUdzRixLQUFJLFNBQVNwRyxHQUFHLE9BQU8sV0FBVyxPQUFPQSxZQUFVNHlCLEdBQUd6QyxHQUFHLENBQUMwQyxVQUFVLFNBQVM3eUIsR0FBRyxPQUFPd3lCLEdBQUd4eUIsRUFBRSxNQUFNOHlCLEdBQUczQyxHQUFHLENBQUM0QyxVQUFVLFNBQVMveUIsRUFBRWMsR0FBRyxPQUFPMHhCLEdBQUd4eUIsRUFBRWMsTUFBTWt5QixHQUFHN0MsR0FBRyxDQUFDOEMsVUFBVSxTQUFTanpCLEVBQUVjLEdBQUcsT0FBTzB4QixHQUFHeHlCLEVBQUVjLE1BQU1veUIsR0FBRy9DLEdBQUcsQ0FBQ2dELFVBQVUsU0FBU256QixFQUFFYyxHQUFHLE9BQU8weEIsR0FBR3h5QixFQUFFYyxNQUFNNnhCLEdBQUd4QyxHQUFHLENBQUNpRCxPQUFPLFNBQVNwekIsRUFBRWMsRUFBRVAsUUFBRyxJQUFTQSxJQUFJQSxFQUFFLEdBQUcsSUFBSVgsRUFBRUwsRUFBRSt2QixHQUFHdHZCLEVBQUUsSUFBSSxTQUFTLE9BQU9PLEVBQUU0RixFQUFFNUYsRUFBRWhCLEVBQUVrTixPQUFPLEdBQUcsaUJBQWlCM0wsR0FBR2tFLEVBQUV6RixFQUFFa04sTUFBTWxNLEdBQUdPLEdBQUcsR0FBRSxXQUFXLE1BQU0sbURBQWtEbEIsRUFBRSxJQUFJcUIsTUFBTUgsR0FBR3lQLEtBQUtoUixFQUFFa04sTUFBTWxNLEdBQUdPLEtBQUtrRSxFQUFFekYsRUFBRWtOLE1BQU1sTSxLQUFLTyxFQUFFb0gsUUFBTyxTQUFTbEksRUFBRWMsR0FBRyxPQUFPZCxFQUFFYyxNQUFJLFdBQVcsTUFBTSxpRUFBZ0VsQixFQUFFa0IsR0FBR2dmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUVnRSxNQUFNekUsRUFBRUssRUFBRVcsS0FBSSxDQUFDK3hCLEdBQUcveUIsSUFBRyxTQUFTUyxHQUFHLE1BQU0sQ0FBQ3N5QixHQUFHLFdBQVcsT0FBT0UsR0FBR3h5QixFQUFFTyxXQUF1SixTQUFTOHlCLEdBQUdyekIsRUFBRWMsR0FBRyxPQUFPZCxFQUFFYyxFQUFFLENBQUNsQyxRQUFRLElBQUlrQyxFQUFFbEMsU0FBU2tDLEVBQUVsQyxRQUFuTSxvQkFBb0IwMEIsV0FBV0EsV0FBVyxvQkFBb0J2VCxPQUFPQSxZQUFPLElBQW9CemQsR0FBYyxvQkFBb0IyZCxNQUFNQSxLQUFtRSxJQUFJc1QsR0FBR0YsSUFBRyxTQUFTcnpCLElBQUksU0FBU0EsRUFBRWMsRUFBRVAsR0FBRyxTQUFTWCxFQUFFSSxHQUFHLElBQUljLEVBQUVQLEVBQUVXLEtBQUt0QixHQUFHa0IsRUFBRSxXQUFXLFNBQVNkLEdBQUdBLEVBQUVBLEVBQUUwTSxXQUFXLElBQUksSUFBSW5NLEVBQUUsRUFBRUEsRUFBRVAsRUFBRW9DLE9BQU83QixJQUFJLENBQUMsSUFBSVgsRUFBRSxvQkFBb0JrQixHQUFHZCxFQUFFd3pCLFdBQVdqekIsSUFBSVgsR0FBR2tCLEVBQUVsQixJQUFJLEVBQUVrQixHQUFHbEIsR0FBR2tCLEtBQUssRUFBRUEsR0FBRyxZQUFZbEIsR0FBR2tCLEdBQUcsT0FBTyx3QkFBd0JBLElBQUksS0FBS1AsRUFBRWdCLEtBQUssV0FBVyxJQUFJdkIsRUFBRSxRQUFRTyxFQUFFa3pCLEdBQUcsdUJBQXVCbHpCLEVBQUVwQixFQUFFLE9BQU9vQixFQUFFa3pCLEdBQUdsekIsRUFBRW16QixHQUFHbnpCLEVBQUVtekIsR0FBR256QixFQUFFb3pCLEdBQUdwekIsRUFBRW96QixHQUFHM3pCLEdBQUdPLEVBQUVwQixFQUFFLEVBQUVhLElBQUlPLEVBQUVwQixFQUFFLEVBQUVvQixFQUFFa3pCLEdBQUc3ekIsRUFBRSxLQUFLVyxFQUFFbXpCLEdBQUc5ekIsRUFBRSxLQUFLVyxFQUFFb3pCLEdBQUcvekIsRUFBRSxLQUFLVyxFQUFFa3pCLElBQUk3ekIsRUFBRUksR0FBR08sRUFBRWt6QixHQUFHLElBQUlsekIsRUFBRWt6QixJQUFJLEdBQUdsekIsRUFBRW16QixJQUFJOXpCLEVBQUVJLEdBQUdPLEVBQUVtekIsR0FBRyxJQUFJbnpCLEVBQUVtekIsSUFBSSxHQUFHbnpCLEVBQUVvekIsSUFBSS96QixFQUFFSSxHQUFHTyxFQUFFb3pCLEdBQUcsSUFBSXB6QixFQUFFb3pCLElBQUksR0FBRy96QixFQUFFLEtBQUssU0FBU0wsRUFBRVMsRUFBRWMsR0FBRyxPQUFPQSxFQUFFM0IsRUFBRWEsRUFBRWIsRUFBRTJCLEVBQUUyeUIsR0FBR3p6QixFQUFFeXpCLEdBQUczeUIsRUFBRTR5QixHQUFHMXpCLEVBQUUwekIsR0FBRzV5QixFQUFFNnlCLEdBQUczekIsRUFBRTJ6QixHQUFHN3lCLEVBQUUsU0FBU08sRUFBRXJCLEVBQUVjLEdBQUcsSUFBSVAsRUFBRSxJQUFJWCxFQUFFSSxHQUFHcUIsRUFBRVAsR0FBR0EsRUFBRSthLE1BQU0vYyxFQUFFeUIsRUFBRWdCLEtBQUssT0FBT3pDLEVBQUVxYSxNQUFNLFdBQVcsT0FBTyxXQUFXNVksRUFBRWdCLE9BQU8sR0FBR3pDLEVBQUU4MEIsT0FBTyxXQUFXLE9BQU85MEIsSUFBSSx1QkFBd0IsUUFBUUEsSUFBSSxJQUFJQSxFQUFFKzBCLE1BQU0vMEIsRUFBRXVDLElBQUksaUJBQWlCQSxHQUFHOUIsRUFBRThCLEVBQUVkLEdBQUd6QixFQUFFK2MsTUFBTSxXQUFXLE9BQU90YyxFQUFFZ0IsRUFBRSxNQUFNekIsRUFBRWdDLEdBQUdBLEVBQUVsQyxRQUFRa0MsRUFBRWxDLFFBQVF5QyxFQUFtQ0gsS0FBSzR5QixLQUFLenlCLEVBQWgzQixDQUFtM0IsRUFBRXJCLE1BQVErekIsR0FBR1YsSUFBRyxTQUFTcnpCLElBQUksU0FBU0EsRUFBRWMsRUFBRVAsR0FBRyxTQUFTWCxFQUFFSSxHQUFHLElBQUljLEVBQUVJLEtBQUtYLEVBQUUsR0FBR08sRUFBRXdFLEVBQUUsRUFBRXhFLEVBQUVtRSxFQUFFLEVBQUVuRSxFQUFFaUgsRUFBRSxFQUFFakgsRUFBRTRFLEVBQUUsRUFBRTVFLEVBQUVTLEtBQUssV0FBVyxJQUFJdkIsRUFBRWMsRUFBRXdFLEVBQUV4RSxFQUFFd0UsR0FBRyxHQUFHLE9BQU94RSxFQUFFd0UsRUFBRXhFLEVBQUVtRSxFQUFFbkUsRUFBRW1FLEVBQUVuRSxFQUFFaUgsRUFBRWpILEVBQUVpSCxFQUFFakgsRUFBRTRFLEVBQUU1RSxFQUFFNEUsR0FBRzVFLEVBQUU0RSxJQUFJLEdBQUcxRixFQUFFQSxJQUFJLEdBQUdBLEtBQUssRUFBRUEsR0FBR2MsRUFBRXdFLEVBQUV0RixFQUFFTyxHQUFHUCxFQUFFLElBQUksSUFBSUosRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsT0FBTyxHQUFHeEMsSUFBSWtCLEVBQUV3RSxHQUFHLEVBQUUvRSxFQUFFaXpCLFdBQVc1ekIsR0FBR2tCLEVBQUVTLE9BQU8sU0FBU2hDLEVBQUVTLEVBQUVjLEdBQUcsT0FBT0EsRUFBRXdFLEVBQUV0RixFQUFFc0YsRUFBRXhFLEVBQUVtRSxFQUFFakYsRUFBRWlGLEVBQUVuRSxFQUFFaUgsRUFBRS9ILEVBQUUrSCxFQUFFakgsRUFBRTRFLEVBQUUxRixFQUFFMEYsRUFBRTVFLEVBQUUsU0FBU08sRUFBRXJCLEVBQUVjLEdBQUcsSUFBSVAsRUFBRSxJQUFJWCxFQUFFSSxHQUFHcUIsRUFBRVAsR0FBR0EsRUFBRSthLE1BQU0vYyxFQUFFLFdBQVcsT0FBT3lCLEVBQUVnQixTQUFTLEdBQUcsWUFBWSxPQUFPekMsRUFBRTgwQixPQUFPLFdBQVcsR0FBRyxJQUFJNXpCLElBQUlPLEVBQUVnQixTQUFTLEtBQUtoQixFQUFFZ0IsU0FBUyxHQUFHLGFBQWEsR0FBRyxVQUFVLElBQUl2QixHQUFHLE9BQU9BLEdBQUdsQixFQUFFcWEsTUFBTTVZLEVBQUVnQixLQUFLekMsRUFBRSswQixNQUFNLzBCLEVBQUV1QyxJQUFJLGlCQUFpQkEsR0FBRzlCLEVBQUU4QixFQUFFZCxHQUFHekIsRUFBRStjLE1BQU0sV0FBVyxPQUFPdGMsRUFBRWdCLEVBQUUsTUFBTXpCLEVBQUVnQyxHQUFHQSxFQUFFbEMsUUFBUWtDLEVBQUVsQyxRQUFReUMsRUFBbUNILEtBQUs4eUIsT0FBTzN5QixFQUF6cEIsQ0FBNHBCLEVBQUVyQixNQUFRaTBCLEdBQUdaLElBQUcsU0FBU3J6QixJQUFJLFNBQVNBLEVBQUVjLEVBQUVQLEdBQUcsU0FBU1gsRUFBRUksR0FBRyxJQUFJYyxFQUFFSSxLQUFLWCxFQUFFLEdBQUdPLEVBQUVTLEtBQUssV0FBVyxJQUFJdkIsRUFBRWMsRUFBRXdFLEVBQUV4RSxFQUFFd0UsSUFBSSxFQUFFLE9BQU94RSxFQUFFd0UsRUFBRXhFLEVBQUVtRSxFQUFFbkUsRUFBRW1FLEVBQUVuRSxFQUFFaUgsRUFBRWpILEVBQUVpSCxFQUFFakgsRUFBRTRFLEVBQUU1RSxFQUFFNEUsRUFBRTVFLEVBQUVvRSxHQUFHcEUsRUFBRTFCLEVBQUUwQixFQUFFMUIsRUFBRSxPQUFPLElBQUkwQixFQUFFb0UsRUFBRXBFLEVBQUVvRSxFQUFFcEUsRUFBRW9FLEdBQUcsRUFBRWxGLEVBQUVBLEdBQUcsR0FBRyxHQUFHYyxFQUFFd0UsRUFBRSxFQUFFeEUsRUFBRW1FLEVBQUUsRUFBRW5FLEVBQUVpSCxFQUFFLEVBQUVqSCxFQUFFNEUsRUFBRSxFQUFFNUUsRUFBRW9FLEVBQUUsRUFBRWxGLEtBQUssRUFBRUEsR0FBR2MsRUFBRXdFLEVBQUV0RixFQUFFTyxHQUFHUCxFQUFFLElBQUksSUFBSUosRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsT0FBTyxHQUFHeEMsSUFBSWtCLEVBQUV3RSxHQUFHLEVBQUUvRSxFQUFFaXpCLFdBQVc1ekIsR0FBR0EsR0FBR1csRUFBRTZCLFNBQVN0QixFQUFFMUIsRUFBRTBCLEVBQUV3RSxHQUFHLEdBQUd4RSxFQUFFd0UsSUFBSSxHQUFHeEUsRUFBRVMsT0FBTyxTQUFTaEMsRUFBRVMsRUFBRWMsR0FBRyxPQUFPQSxFQUFFd0UsRUFBRXRGLEVBQUVzRixFQUFFeEUsRUFBRW1FLEVBQUVqRixFQUFFaUYsRUFBRW5FLEVBQUVpSCxFQUFFL0gsRUFBRStILEVBQUVqSCxFQUFFNEUsRUFBRTFGLEVBQUUwRixFQUFFNUUsRUFBRW9FLEVBQUVsRixFQUFFa0YsRUFBRXBFLEVBQUUxQixFQUFFWSxFQUFFWixFQUFFMEIsRUFBRSxTQUFTTyxFQUFFckIsRUFBRWMsR0FBRyxJQUFJUCxFQUFFLElBQUlYLEVBQUVJLEdBQUdxQixFQUFFUCxHQUFHQSxFQUFFK2EsTUFBTS9jLEVBQUUsV0FBVyxPQUFPeUIsRUFBRWdCLFNBQVMsR0FBRyxZQUFZLE9BQU96QyxFQUFFODBCLE9BQU8sV0FBVyxHQUFHLElBQUk1ekIsSUFBSU8sRUFBRWdCLFNBQVMsS0FBS2hCLEVBQUVnQixTQUFTLEdBQUcsYUFBYSxHQUFHLFVBQVUsSUFBSXZCLEdBQUcsT0FBT0EsR0FBR2xCLEVBQUVxYSxNQUFNNVksRUFBRWdCLEtBQUt6QyxFQUFFKzBCLE1BQU0vMEIsRUFBRXVDLElBQUksaUJBQWlCQSxHQUFHOUIsRUFBRThCLEVBQUVkLEdBQUd6QixFQUFFK2MsTUFBTSxXQUFXLE9BQU90YyxFQUFFZ0IsRUFBRSxNQUFNekIsRUFBRWdDLEdBQUdBLEVBQUVsQyxRQUFRa0MsRUFBRWxDLFFBQVF5QyxFQUFtQ0gsS0FBS2d6QixPQUFPN3lCLEVBQWp2QixDQUFvdkIsRUFBRXJCLE1BQVFtMEIsR0FBR2QsSUFBRyxTQUFTcnpCLElBQUksU0FBU0EsRUFBRWMsRUFBRVAsR0FBRyxTQUFTWCxFQUFFSSxHQUFHLElBQUljLEVBQUVJLEtBQUtKLEVBQUVTLEtBQUssV0FBVyxJQUFJdkIsRUFBRU8sRUFBRVgsRUFBRWtCLEVBQUV3RSxFQUFFL0YsRUFBRXVCLEVBQUVoQyxFQUFFLE9BQU9rQixFQUFFSixFQUFFTCxHQUFHZ0IsR0FBR1AsR0FBR0EsSUFBSSxHQUFHQSxHQUFHLEdBQUdPLElBQUlQLEVBQUVKLEVBQUVMLEVBQUUsRUFBRSxJQUFJUyxJQUFJLEdBQUdPLElBQUlQLEVBQUVKLEVBQUVMLEVBQUUsRUFBRSxJQUFJUyxJQUFJLEVBQUVPLElBQUlQLEVBQUVKLEVBQUVMLEVBQUUsRUFBRSxJQUFJUyxHQUFHLEVBQUVBLEVBQUVKLEVBQUVMLEVBQUUsRUFBRSxHQUFHZ0IsSUFBSVAsR0FBR0EsR0FBRyxJQUFJQSxHQUFHLEVBQUVKLEVBQUVMLEdBQUdnQixFQUFFTyxFQUFFaEMsRUFBRVMsRUFBRSxFQUFFLEVBQUVnQixHQUFHLFNBQVNQLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVgsRUFBRSxHQUFHLEdBQUdrQixLQUFLLEVBQUVBLEdBQUdsQixFQUFFLEdBQUdrQixPQUFPLElBQUlBLEVBQUUsR0FBR0EsRUFBRVAsRUFBRSxFQUFFQSxFQUFFTyxFQUFFc0IsU0FBUzdCLEVBQUVYLEVBQUUsRUFBRVcsR0FBR1gsRUFBRSxFQUFFVyxJQUFJLEdBQUdPLEVBQUUweUIsV0FBV2p6QixHQUFHWCxFQUFFVyxFQUFFLEVBQUUsSUFBSSxHQUFHLEtBQUtYLEVBQUV3QyxPQUFPLEdBQUd4QyxFQUFFeUMsS0FBSyxHQUFHLElBQUk5QixFQUFFLEVBQUVBLEVBQUUsR0FBRyxJQUFJWCxFQUFFVyxLQUFLQSxHQUFHLElBQUksR0FBR0EsRUFBRVgsRUFBRSxJQUFJLEVBQUVBLEVBQUVXLEdBQUdQLEVBQUVzRixFQUFFMUYsRUFBRUksRUFBRWxCLEVBQUUsRUFBRXlCLEVBQUUsSUFBSUEsRUFBRSxJQUFJQSxFQUFFUCxFQUFFdUIsT0FBdk8sQ0FBK09ULEVBQUVkLEdBQUcsU0FBU1QsRUFBRVMsRUFBRWMsR0FBRyxPQUFPQSxFQUFFd0UsRUFBRXRGLEVBQUVzRixFQUFFWSxRQUFRcEYsRUFBRWhDLEVBQUVrQixFQUFFbEIsRUFBRWdDLEVBQUUsU0FBU08sRUFBRXJCLEVBQUVjLEdBQUcsTUFBTWQsSUFBSUEsR0FBRyxJQUFJbzBCLE1BQU0sSUFBSTd6QixFQUFFLElBQUlYLEVBQUVJLEdBQUdxQixFQUFFUCxHQUFHQSxFQUFFK2EsTUFBTS9jLEVBQUUsV0FBVyxPQUFPeUIsRUFBRWdCLFNBQVMsR0FBRyxZQUFZLE9BQU96QyxFQUFFODBCLE9BQU8sV0FBVyxHQUFHLElBQUk1ekIsSUFBSU8sRUFBRWdCLFNBQVMsS0FBS2hCLEVBQUVnQixTQUFTLEdBQUcsYUFBYSxHQUFHLFVBQVUsSUFBSXZCLEdBQUcsT0FBT0EsR0FBR2xCLEVBQUVxYSxNQUFNNVksRUFBRWdCLEtBQUt6QyxFQUFFKzBCLE1BQU0vMEIsRUFBRXVDLElBQUlBLEVBQUVpRSxHQUFHL0YsRUFBRThCLEVBQUVkLEdBQUd6QixFQUFFK2MsTUFBTSxXQUFXLE9BQU90YyxFQUFFZ0IsRUFBRSxNQUFNekIsRUFBRWdDLEdBQUdBLEVBQUVsQyxRQUFRa0MsRUFBRWxDLFFBQVF5QyxFQUFtQ0gsS0FBS216QixVQUFVaHpCLEVBQWo0QixDQUFvNEIsRUFBRXJCLE1BQVFzMEIsR0FBR2pCLElBQUcsU0FBU3J6QixJQUFJLFNBQVNBLEVBQUVjLEVBQUVQLEdBQUcsU0FBU1gsRUFBRUksR0FBRyxJQUFJYyxFQUFFSSxLQUFLSixFQUFFUyxLQUFLLFdBQVcsSUFBSXZCLEVBQUVPLEVBQUVYLEVBQUVrQixFQUFFNEUsRUFBRW5HLEVBQUV1QixFQUFFOEgsRUFBRXZILEVBQUVQLEVBQUVoQyxFQUFFLE9BQU9nQyxFQUFFNEUsRUFBRTlGLEVBQUVBLEVBQUUsV0FBVyxFQUFFVyxFQUFFaEIsRUFBRThCLEVBQUUsR0FBRyxLQUFLckIsRUFBRVQsRUFBRThCLEVBQUVBLEVBQUUsRUFBRSxLQUFLZCxHQUFHQSxHQUFHLEdBQUdQLEdBQUdBLEdBQUcsR0FBR08sR0FBR0EsSUFBSSxHQUFHUCxHQUFHQSxJQUFJLEdBQUdPLEVBQUVoQixFQUFFOEIsR0FBR2QsRUFBRVAsRUFBRWMsRUFBRWhDLEVBQUV1QyxFQUFFZCxHQUFHWCxFQUFFQSxJQUFJLElBQUksR0FBRyxTQUFTSSxFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsRUFBRStCLEVBQUUsR0FBR1MsRUFBRSxJQUFJLElBQUlSLEtBQUssRUFBRUEsSUFBSWxCLEVBQUVrQixFQUFFQSxFQUFFLE9BQU9BLEdBQUcsS0FBS2xCLEVBQUUsRUFBRTBCLEVBQUVxRCxLQUFLRSxJQUFJdkQsRUFBRVIsRUFBRXNCLFNBQVM3QyxFQUFFLEVBQUU4QixHQUFHLEdBQUdBLEVBQUVDLElBQUlELEVBQUVQLElBQUlsQixHQUFHa0IsRUFBRTB5QixZQUFZbnlCLEVBQUUsSUFBSVAsRUFBRXNCLFNBQVMsSUFBSWYsSUFBSXZDLEVBQUVjLEdBQUdBLEdBQUdBLEdBQUcsR0FBR0EsR0FBR0EsSUFBSSxHQUFHQSxHQUFHQSxHQUFHLEVBQUVBLEdBQUdBLElBQUksR0FBR3lCLEdBQUcsSUFBSXZDLEVBQUVBLEVBQUUsV0FBVyxFQUFFUyxFQUFFLElBQUlnQixFQUFFTSxFQUFFLElBQUlRLElBQUl6QixFQUFFZCxHQUFHUyxFQUFFLEVBQUUsR0FBRyxJQUFJQSxHQUFHLE1BQU1zQixFQUFFLEtBQUtDLEdBQUdBLEVBQUVzQixRQUFRLEtBQUssR0FBRzdDLEVBQUUsSUFBSThCLEVBQUUsSUFBSUEsRUFBRSxJQUFJQSxFQUFFekIsRUFBRWlCLEVBQUV0QixFQUFFLEdBQUcsS0FBS2dCLEVBQUVNLEVBQUV0QixFQUFFQSxFQUFFLEVBQUUsS0FBS0ssR0FBR0EsR0FBRyxHQUFHVyxHQUFHQSxHQUFHLEdBQUdYLEdBQUdBLElBQUksR0FBR1csR0FBR0EsSUFBSSxHQUFHTSxFQUFFdEIsR0FBR0ssRUFBRVcsRUFBRVAsRUFBRTBGLEVBQUU1RyxFQUFFa0IsRUFBRTRJLEVBQUUvSCxFQUFFYixFQUFFbEIsRUFBRVMsRUFBaGEsQ0FBbWF1QixFQUFFZCxHQUFHLFNBQVNULEVBQUVTLEVBQUVjLEdBQUcsT0FBT0EsRUFBRWhDLEVBQUVrQixFQUFFbEIsRUFBRWdDLEVBQUU0RSxFQUFFMUYsRUFBRTBGLEVBQUU1RSxFQUFFOEgsRUFBRTVJLEVBQUU0SSxFQUFFMUMsUUFBUXBGLEVBQUUsU0FBU08sRUFBRXJCLEVBQUVjLEdBQUcsTUFBTWQsSUFBSUEsR0FBRyxJQUFJbzBCLE1BQU0sSUFBSTd6QixFQUFFLElBQUlYLEVBQUVJLEdBQUdxQixFQUFFUCxHQUFHQSxFQUFFK2EsTUFBTS9jLEVBQUUsV0FBVyxPQUFPeUIsRUFBRWdCLFNBQVMsR0FBRyxZQUFZLE9BQU96QyxFQUFFODBCLE9BQU8sV0FBVyxHQUFHLElBQUk1ekIsSUFBSU8sRUFBRWdCLFNBQVMsS0FBS2hCLEVBQUVnQixTQUFTLEdBQUcsYUFBYSxHQUFHLFVBQVUsSUFBSXZCLEdBQUcsT0FBT0EsR0FBR2xCLEVBQUVxYSxNQUFNNVksRUFBRWdCLEtBQUt6QyxFQUFFKzBCLE1BQU0vMEIsRUFBRXVDLElBQUlBLEVBQUV1SCxHQUFHckosRUFBRThCLEVBQUVkLEdBQUd6QixFQUFFK2MsTUFBTSxXQUFXLE9BQU90YyxFQUFFZ0IsRUFBRSxNQUFNekIsRUFBRWdDLEdBQUdBLEVBQUVsQyxRQUFRa0MsRUFBRWxDLFFBQVF5QyxFQUFtQ0gsS0FBS3F6QixRQUFRbHpCLEVBQTVpQyxDQUEraUMsRUFBRXJCLE1BQVF3MEIsR0FBR25CLElBQUcsU0FBU3J6QixJQUFJLFNBQVNBLEVBQUVjLEVBQUVQLEdBQUcsU0FBU1gsRUFBRUksR0FBRyxJQUFJYyxFQUFFSSxLQUFLWCxFQUFFLEdBQUdPLEVBQUVTLEtBQUssV0FBVyxJQUFJdkIsRUFBRWMsRUFBRXlFLEVBQUVoRixFQUFFTyxFQUFFM0IsRUFBRVMsRUFBRWtCLEVBQUUxQixFQUFFRyxFQUFFdUIsRUFBRU8sRUFBRSxPQUFPckIsRUFBRUEsR0FBRyxHQUFHQSxJQUFJLEVBQUVPLEVBQUVBLEVBQUVBLEVBQUVYLEVBQUUsRUFBRUEsRUFBRUEsR0FBRyxHQUFHQSxJQUFJLEVBQUVMLEVBQUVBLEVBQUVBLEVBQUVTLEVBQUUsRUFBRWMsRUFBRXlFLEVBQUV2RixFQUFFQSxHQUFHLEdBQUdBLElBQUksR0FBR08sRUFBRU8sRUFBRTNCLEVBQUVvQixFQUFFQSxFQUFFWCxFQUFFLEVBQUVrQixFQUFFMUIsRUFBRVEsR0FBRyxHQUFHVyxJQUFJLEdBQUdoQixFQUFFdUIsRUFBRU8sRUFBRTlCLEVBQUVTLEVBQUUsR0FBR2MsRUFBRU8sRUFBRSxFQUFFUCxFQUFFeUUsRUFBRSxFQUFFekUsRUFBRTNCLEdBQUcsV0FBVzJCLEVBQUUxQixFQUFFLFdBQVdZLElBQUkyRSxLQUFLOEksTUFBTXpOLElBQUljLEVBQUVPLEVBQUVyQixFQUFFLFdBQVcsRUFBRWMsRUFBRXlFLEVBQUUsRUFBRXZGLEdBQUdPLEdBQUdQLEVBQUUsSUFBSSxJQUFJSixFQUFFLEVBQUVBLEVBQUVXLEVBQUU2QixPQUFPLEdBQUd4QyxJQUFJa0IsRUFBRXlFLEdBQUcsRUFBRWhGLEVBQUVpekIsV0FBVzV6QixHQUFHa0IsRUFBRVMsT0FBTyxTQUFTaEMsRUFBRVMsRUFBRWMsR0FBRyxPQUFPQSxFQUFFTyxFQUFFckIsRUFBRXFCLEVBQUVQLEVBQUV5RSxFQUFFdkYsRUFBRXVGLEVBQUV6RSxFQUFFM0IsRUFBRWEsRUFBRWIsRUFBRTJCLEVBQUUxQixFQUFFWSxFQUFFWixFQUFFMEIsRUFBRSxTQUFTTyxFQUFFckIsRUFBRWMsR0FBRyxJQUFJUCxFQUFFLElBQUlYLEVBQUVJLEdBQUdxQixFQUFFUCxHQUFHQSxFQUFFK2EsTUFBTS9jLEVBQUUsV0FBVyxPQUFPeUIsRUFBRWdCLFNBQVMsR0FBRyxZQUFZLE9BQU96QyxFQUFFODBCLE9BQU8sV0FBVyxHQUFHLElBQUk1ekIsSUFBSU8sRUFBRWdCLFNBQVMsS0FBS2hCLEVBQUVnQixTQUFTLEdBQUcsYUFBYSxHQUFHLFVBQVUsSUFBSXZCLEdBQUcsT0FBT0EsR0FBR2xCLEVBQUVxYSxNQUFNNVksRUFBRWdCLEtBQUt6QyxFQUFFKzBCLE1BQU0vMEIsRUFBRXVDLElBQUksaUJBQWlCQSxHQUFHOUIsRUFBRThCLEVBQUVkLEdBQUd6QixFQUFFK2MsTUFBTSxXQUFXLE9BQU90YyxFQUFFZ0IsRUFBRSxNQUFNekIsRUFBRWdDLEdBQUdBLEVBQUVsQyxRQUFRa0MsRUFBRWxDLFFBQVF5QyxFQUFtQ0gsS0FBS3V6QixPQUFPcHpCLEVBQXJ4QixDQUF3eEIsRUFBRXJCLE1BQVEwMEIsR0FBR3JCLElBQUcsU0FBU3J6QixJQUFJLFNBQVNjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRUwsRUFBRTJCLEtBQUtHLEVBQUUsSUFBSXZDLEVBQUUsRUFBRStCLEVBQUUsU0FBU1MsRUFBRWYsRUFBRTBSLElBQUk1USxFQUFFdkMsR0FBR0MsRUFBRXdCLEVBQUUwUixJQUFJLEVBQUUsSUFBSTlTLEVBQUUsRUFBRUosRUFBRWdHLEVBQUUxRCxFQUFFLEVBQUUsU0FBU1QsRUFBRVosRUFBRStFLEVBQUVuRSxHQUFHLElBQUl5RSxFQUFFLEdBQUdKLEVBQUVDLEVBQUUsU0FBU2xGLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRUwsRUFBRSxHQUFHOEIsU0FBU1AsRUFBRSxHQUFHUCxHQUFHLFVBQVVjLEVBQUUsSUFBSXpCLEtBQUtrQixFQUFFLElBQUl2QixFQUFFOEMsS0FBS3JDLEVBQUVjLEVBQUVsQixHQUFHVyxFQUFFLElBQUksTUFBTVAsSUFBSSxPQUFPVCxFQUFFNkMsT0FBTzdDLEVBQUUsVUFBVThCLEVBQUVQLEVBQUVBLEVBQUUsS0FBdkksRUFBOElpRSxFQUFFLEdBQUdBLEVBQUUsQ0FBQzR2QixTQUFRLEdBQUk1dkIsR0FBRyxJQUFJNHZCLFFBQVEsQ0FBQzMwQixFQUFFZCxFQUFFNEIsSUFBSSxNQUFNZCxFQUFFLFdBQVcsSUFBSSxJQUFJQSxFQUFFLE9BQU9KLElBQUlJLEVBQUVKLEVBQUVnMUIsYUFBYTUwQixFQUFFQSxFQUFFcUIsSUFBSXJCLEVBQUUsSUFBSThHLFdBQVd6RixJQUFJOUIsRUFBRXMxQixRQUFRdDFCLEVBQUV1MUIsVUFBVUMsZ0JBQWdCLzBCLElBQUlkLEVBQUVjLEdBQUcsTUFBTUEsR0FBRyxJQUFJTyxFQUFFaEIsRUFBRWloQixVQUFVMWhCLEVBQUV5QixHQUFHQSxFQUFFeTBCLFFBQVEsTUFBTSxFQUFFLElBQUlaLEtBQUs3MEIsRUFBRVQsRUFBRVMsRUFBRTAxQixPQUFPLzFCLEVBQUU0QixLQUF2TSxHQUErTWQsRUFBRSxHQUFHcUYsR0FBR0MsRUFBRSxJQUFJTixFQUFFSyxHQUFHRSxFQUFFLFdBQVcsSUFBSSxJQUFJdkYsRUFBRXNGLEVBQUVELEVBQUV2RyxHQUFHZ0MsRUFBRVEsRUFBRWYsRUFBRSxFQUFFUCxFQUFFakIsR0FBR2lCLEdBQUdBLEVBQUVPLEdBQUdjLEVBQUVQLEdBQUdPLEVBQUVkLEVBQUUrRSxFQUFFRCxFQUFFLEdBQUcsS0FBS3JGLEdBQUdiLEdBQUdhLEdBQUcsRUFBRWMsR0FBRyxFQUFFUCxLQUFLLEVBQUUsT0FBT1AsRUFBRU8sR0FBR08sR0FBRyxPQUFPeUUsRUFBRTRULE1BQU0sV0FBVyxPQUFPLEVBQUU3VCxFQUFFRCxFQUFFLElBQUlFLEVBQUVzdUIsTUFBTSxXQUFXLE9BQU92dUIsRUFBRUQsRUFBRSxHQUFHLFlBQVlFLEVBQUVxdUIsT0FBT3J1QixFQUFFTCxFQUFFaEcsRUFBRW9HLEVBQUV5QixHQUFHakcsSUFBSWlFLEVBQUVtd0IsTUFBTXQwQixHQUFHLFNBQVNaLEVBQUVjLEVBQUVsQixFQUFFTCxHQUFHLE9BQU9BLElBQUlBLEVBQUV3SCxHQUFHM0gsRUFBRUcsRUFBRStGLEdBQUd0RixFQUFFNmIsTUFBTSxXQUFXLE9BQU96YyxFQUFFa0csRUFBRSxNQUFNMUYsR0FBR1csRUFBRU0sR0FBR2IsRUFBRWMsR0FBR2QsSUFBSXVGLEVBQUVOLEVBQUUsV0FBV0YsRUFBRUEsRUFBRXpDLE9BQU9wQixNQUFNWCxFQUFFd0UsRUFBRThXLE9BQU8sU0FBUzdXLEVBQUVoRixHQUFHLElBQUljLEVBQUVQLEVBQUVQLEVBQUVvQyxPQUFPeEMsRUFBRXNCLEtBQUszQixFQUFFLEVBQUVULEVBQUVjLEVBQUVkLEVBQUVjLEVBQUU4SSxFQUFFLEVBQUU3SCxFQUFFakIsRUFBRW1ILEVBQUUsR0FBRyxJQUFJeEcsSUFBSVAsRUFBRSxDQUFDTyxNQUFNaEIsRUFBRThCLEdBQUdSLEVBQUV0QixHQUFHQSxJQUFJLElBQUlBLEVBQUUsRUFBRUEsRUFBRThCLEVBQUU5QixJQUFJc0IsRUFBRXRCLEdBQUdzQixFQUFFL0IsRUFBRWlHLEVBQUVqRyxFQUFFa0IsRUFBRVQsRUFBRWdCLElBQUlPLEVBQUVELEVBQUV0QixLQUFLc0IsRUFBRS9CLEdBQUdnQyxHQUFHbEIsRUFBRXlGLEVBQUUsU0FBU3JGLEdBQUcsSUFBSSxJQUFJYyxFQUFFUCxFQUFFLEVBQUVoQixFQUFFSyxFQUFFZCxFQUFFQSxFQUFFYyxFQUFFOEksRUFBRTdILEVBQUVqQixFQUFFbUgsRUFBRS9HLEtBQUtjLEVBQUVELEVBQUV0QixFQUFFd0YsRUFBRXhGLEVBQUUsR0FBR2dCLEVBQUVBLEVBQUVjLEVBQUVSLEVBQUVrRSxHQUFHbEUsRUFBRXRCLEdBQUdzQixFQUFFL0IsRUFBRWlHLEVBQUVqRyxFQUFFZ0MsS0FBS0QsRUFBRS9CLEdBQUdnQyxJQUFJLE9BQU9sQixFQUFFZCxFQUFFUyxFQUFFSyxFQUFFOEksRUFBRTVKLEVBQUV5QixJQUFJYyxHQUFHLFNBQVNqQyxFQUFFWSxFQUFFYyxHQUFHLE9BQU9BLEVBQUVoQyxFQUFFa0IsRUFBRWxCLEVBQUVnQyxFQUFFNEgsRUFBRTFJLEVBQUUwSSxFQUFFNUgsRUFBRWlHLEVBQUUvRyxFQUFFK0csRUFBRWIsUUFBUXBGLEVBQUUsU0FBU29FLEVBQUVsRixFQUFFYyxHQUFHLElBQUksSUFBSVAsRUFBRVgsRUFBRUksRUFBRSxHQUFHVCxFQUFFLEVBQUVBLEVBQUVLLEVBQUV3QyxRQUFRdEIsRUFBRWlFLEVBQUV4RixHQUFHd0YsR0FBR3hFLEdBQUcsR0FBR08sRUFBRWlFLEVBQUV4RixJQUFJSyxFQUFFNHpCLFdBQVdqMEIsS0FBSyxPQUFPTCxFQUFFNEIsR0FBRyxTQUFTNUIsRUFBRWMsR0FBRyxPQUFPd0gsT0FBTzJ0QixhQUFheHpCLE1BQU0sRUFBRTNCLEdBQUcsR0FBR08sRUFBRSxPQUFPTSxHQUFHRCxFQUFFc0UsRUFBRTNFLEVBQUVxRSxTQUFTOUQsR0FBR2QsRUFBRXBCLFFBQVEsQ0FBQ29CLEVBQUVwQixRQUFRZ0MsRUFBRSxJQUFJaEIsRUFBRSxFQUFRLEdBQVUsTUFBTUksTUFBNThDLENBQW05QyxHQUFHMkUsU0FBUSt2QixHQUFHWixLQUFLUCxHQUFHbUIsR0FBR1YsT0FBT0QsR0FBR1csR0FBR1IsT0FBT0QsR0FBR1MsR0FBR0wsVUFBVUYsR0FBR08sR0FBR0gsUUFBUUQsR0FBR0ksR0FBR0QsT0FBT0QsR0FBRyxJQUFJWSxHQUFHVixHQUFHWixLQUFLdUIsR0FBRyxXQUFXLFNBQVNyMUIsRUFBRUEsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRzJCLEtBQUt1USxLQUFLelIsRUFBRWtCLEtBQUtvMEIsT0FBT3gwQixFQUFFSSxLQUFLaUwsTUFBTTVMLEVBQUVXLEtBQUtxMEIsUUFBUUMsSUFBSXQwQixLQUFLdTBCLFVBQVU3MUIsRUFBRXNCLEtBQUt1MEIsWUFBWXYwQixLQUFLdzBCLE1BQU14MEIsS0FBS3VRLEtBQUssRUFBRXZRLEtBQUtvMEIsT0FBT3AwQixLQUFLeTBCLE1BQU16MEIsS0FBS3VRLEtBQUssRUFBRXZRLEtBQUtvMEIsUUFBUSxJQUFJajBCLEVBQUU5QixHQUFHb0YsS0FBS0MsU0FBUzFELEtBQUswRCxPQUFPd3dCLEdBQUcvekIsRUFBRXFMLFlBQVksT0FBTzFNLEVBQUVVLFVBQVVrMUIsVUFBVSxXQUFXLElBQUkzdUIsTUFBTS9GLEtBQUtxMEIsU0FBUyxDQUFDLElBQUl2MUIsRUFBRWtCLEtBQUtxMEIsUUFBUSxPQUFPcjBCLEtBQUtxMEIsUUFBUUMsSUFBSXgxQixFQUFFLElBQUksSUFBSWMsRUFBRVAsRUFBRVgsR0FBRSxHQUFJQSxHQUFHLENBQUMsSUFBSUwsT0FBRSxFQUFPOEIsT0FBRSxFQUFPdkMsT0FBRSxFQUFPLEdBQUdBLEdBQUdTLEVBQUUsRUFBRTJCLEtBQUswRCxTQUFTLEdBQUdyRixHQUFHOEIsRUFBRSxFQUFFSCxLQUFLMEQsU0FBUyxHQUFHdkQsUUFBUXZDLEdBQUcsR0FBRyxJQUFJQSxHQUFHLElBQUkrQixFQUFFOEQsS0FBS2lCLE1BQU0sRUFBRWpCLEtBQUtnSSxJQUFJN04sR0FBR0EsR0FBR2dDLEVBQUVJLEtBQUt1USxLQUFLdlEsS0FBS28wQixPQUFPLzFCLEVBQUVzQixFQUFFTixFQUFFVyxLQUFLdVEsS0FBS3ZRLEtBQUtvMEIsT0FBT2owQixFQUFFUixFQUFFSyxLQUFLdTBCLFlBQVl2MEIsS0FBSzIwQixpQkFBaUIvMEIsS0FBS2xCLEdBQUUsR0FBSSxPQUFPc0IsS0FBS3UwQixZQUFZdjBCLEtBQUsyMEIsaUJBQWlCdDFCLEtBQUtXLEtBQUtxMEIsUUFBUXIwQixLQUFLNDBCLGFBQWF2MUIsSUFBSVcsS0FBSzQwQixhQUFhaDFCLElBQUlkLEVBQUVVLFVBQVVvMUIsYUFBYSxTQUFTOTFCLEdBQUcsT0FBTyxNQUFNa0IsS0FBS2lMLE9BQU8sWUFBWWpMLEtBQUtpTCxNQUFNbk0sRUFBRTJFLEtBQUtxRCxNQUFNaEksSUFBSUEsRUFBRVUsVUFBVW0xQixpQkFBaUIsU0FBUzcxQixHQUFHLE9BQU9BLEdBQUdrQixLQUFLdzBCLE9BQU8xMUIsR0FBR2tCLEtBQUt5MEIsT0FBTzMxQixFQUE3NEIsR0FBazVCKzFCLEdBQUcsV0FBVyxTQUFTLzFCLEVBQUVBLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUdzQixLQUFLOGYsTUFBTWhoQixFQUFFa0IsS0FBSzgwQixLQUFLLEVBQUVsMUIsRUFBRUksS0FBS2lMLE1BQU01TCxFQUFFLElBQUloQixFQUFFSyxHQUFHK0UsS0FBS0MsU0FBUzFELEtBQUsrMEIsTUFBTWIsR0FBRzcxQixFQUFFbU4sWUFBWXhMLEtBQUtnMUIsTUFBTSxJQUFJYixHQUFHLEVBQUUsRUFBRTkwQixHQUFFLEVBQUdXLEtBQUsrMEIsU0FBUy8wQixLQUFLOUIsRUFBRVksRUFBRSxFQUFFQSxFQUFFLEVBQUUsRUFBRUEsRUFBRSxFQUFFLEVBQUVrQixLQUFLL0IsRUFBRSxFQUFFd0YsS0FBS2lCLEtBQUssRUFBRTFFLEtBQUs5QixHQUFHLE9BQU9ZLEVBQUVVLFVBQVVrMUIsVUFBVSxXQUFXLElBQUksSUFBSTUxQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsSUFBSSxDQUFDLEdBQUd6QixFQUFFc0IsS0FBS2cxQixNQUFNTixZQUFZdjBCLEVBQUUsRUFBRUgsS0FBSy9CLEVBQUVTLFFBQVF5QixHQUFHLEdBQUcsR0FBR0EsR0FBR0EsRUFBRUEsRUFBRVAsRUFBRSxFQUFFLE1BQU1kLEVBQUVKLEVBQUVBLEdBQUdJLEVBQUVPLEVBQUUsR0FBR1AsRUFBRWtCLEtBQUs5QixHQUFHLEVBQUVpQyxFQUFFc0QsS0FBS2dJLElBQUl0TCxLQUFLOUIsRUFBRTJCLEtBQUsrMEIsU0FBU24xQixHQUFHNkQsS0FBS2dJLElBQUlwTixHQUFHZ0IsRUFBRSxNQUFNLE9BQU9jLEVBQUUsRUFBRUgsS0FBSzgwQixLQUFLOTBCLEtBQUs5QixFQUFFaUMsRUFBRUgsS0FBSzhmLE1BQU0sSUFBSTNmLEdBQUdzRCxLQUFLc04sSUFBSS9RLEtBQUsrMEIsUUFBUSxFQUFFLzBCLEtBQUs4ZixRQUFROWYsS0FBSzQwQixhQUFhejBCLElBQUlyQixFQUFFVSxVQUFVbzFCLGFBQWEsU0FBUzkxQixHQUFHLE1BQU0sWUFBWWtCLEtBQUtpTCxNQUFNbk0sRUFBRTJFLEtBQUtxRCxNQUFNaEksSUFBSUEsRUFBOW1CLEdBQW1uQm0yQixHQUFHLFdBQVcsU0FBU24yQixFQUFFQSxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLElBQUlMLEVBQUUyQixLQUFLLFFBQUcsSUFBU2xCLElBQUlBLEVBQUUsUUFBRyxJQUFTYyxJQUFJQSxFQUFFLEdBQUdJLEtBQUtrMUIsZUFBZSxXQUFXLE9BQU8sTUFBTTcyQixFQUFFNE0sT0FBTyxZQUFZNU0sRUFBRTRNLE9BQU9qTCxLQUFLNEQsSUFBSTlFLEVBQUVrQixLQUFLbTFCLE1BQU12MUIsRUFBRWQsRUFBRWtCLEtBQUtpTCxNQUFNNUwsRUFBRSxNQUFNWCxJQUFJQSxFQUFFK0UsS0FBS0MsVUFBVSxpQkFBaUJoRixJQUFJQSxFQUFFQSxFQUFFOE0sYUFBYXhMLEtBQUtrMUIsa0JBQWtCbDFCLEtBQUttMUIsT0FBTyxFQUFFLE1BQU0sSUFBSTV5QixNQUFNLDBCQUEwQnpELEVBQUUsTUFBTWMsRUFBRSxnQ0FBZ0NJLEtBQUswRCxPQUFPd3dCLEdBQUd4MUIsR0FBRyxPQUFPSSxFQUFFVSxVQUFVbzFCLGFBQWEsU0FBUzkxQixHQUFHLE9BQU9rQixLQUFLazFCLGlCQUFpQnAyQixFQUFFMkUsS0FBS3FELE1BQU1oSSxJQUFJQSxFQUFFVSxVQUFVazFCLFVBQVUsV0FBVyxPQUFPMTBCLEtBQUs0MEIsYUFBYTUwQixLQUFLNEQsSUFBSTVELEtBQUttMUIsTUFBTW4xQixLQUFLMEQsV0FBVzVFLEVBQXRrQixHQUEya0IsU0FBU3MyQixHQUFHdDJCLEVBQUVjLEVBQUVQLEdBQUcsWUFBTyxJQUFTTyxJQUFJQSxFQUFFLFdBQVdBLEVBQUVBLEdBQUcsVUFBVXlILEVBQUV2SSxHQUFHLElBQUlvTixHQUFHcE4sRUFBRWMsRUFBRVAsR0FBRyxTQUFTZzJCLEdBQUd2MkIsRUFBRWMsUUFBRyxJQUFTQSxJQUFJQSxHQUFFLEdBQUkrQixRQUFROEosSUFBSTNNLEVBQUUwTSxTQUFTNUwsSUFBSSxJQUFJMDFCLEdBQUdyRyxHQUFHLENBQUNzRyxnQkFBZ0IsU0FBU3oyQixFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksa0JBQWtCVCxFQUFFdUIsRUFBRW9ILFFBQU8sU0FBU2xJLEVBQUVjLEdBQUcsT0FBT2QsRUFBRWMsS0FBSSxPQUFPa0UsRUFBRXBGLEVBQUUyTSxNQUFNLEVBQUV6TCxFQUFFc0IsUUFBTyxXQUFXLE1BQU0saUJBQWlCeEMsRUFBRTJNLEtBQUssMkNBQTJDekwsRUFBRXNCLFVBQVM0QyxFQUFFekUsRUFBRTZCLFNBQVN0QixFQUFFc0IsUUFBTyxXQUFXLE1BQU0sbUJBQW1CN0IsRUFBRTZCLE9BQU8sOENBQThDdEIsRUFBRXNCLFVBQVM0QyxFQUFFcEYsRUFBRTZNLE1BQU0sR0FBR2xOLEdBQUcsR0FBRSxXQUFXLE1BQU0seUJBQXlCSyxFQUFFNk0sTUFBTSxHQUFHLHNFQUFzRTNMLEVBQUV3RCxLQUFLLE9BQU8sUUFBUS9FLEtBQUl1Z0IsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRXFYLGVBQWV6WCxFQUFFa0IsRUFBRVAsS0FBSSxDQUFDK3hCLEdBQUcxeUIsSUFBRyxTQUFTSSxHQUFHLE1BQU0sQ0FBQ3N5QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFc1gsZUFBZXhXLEVBQUVQLFdBQVVtMkIsR0FBR3ZHLEdBQUcsQ0FBQ3dHLE1BQU0sU0FBUzMyQixFQUFFYyxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksUUFBUSxJQUFJbUgsRUFBRXJHLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSxtQ0FBbUMzQyxHQUFHLEdBQUcsV0FBV0EsR0FBRyxXQUFXUCxFQUFFNEwsT0FBTyxXQUFXckwsR0FBRyxXQUFXUCxFQUFFNEwsTUFBTSxNQUFNLElBQUkxSSxNQUFNLHlDQUF5QyxPQUFPcWMsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRWlQLEtBQUsxTyxFQUFFTyxLQUFJLENBQUN3eEIsR0FBRy94QixJQUFHLFNBQVNQLEdBQUcsTUFBTSxDQUFDc3lCLEdBQUcsV0FBVyxPQUFPdHlCLEVBQUVxUSxnQkFBZXVtQixHQUFHekcsR0FBRyxDQUFDMEcsT0FBTyxTQUFTNzJCLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRLE1BQU0sT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU8yTixHQUFHQyxLQUFLOU0sRUFBRTJMLE1BQU0sQ0FBQ3lCLE9BQU9wTixFQUFFb04sUUFBUXBOLEVBQUVxTCxTQUFRLENBQUNtbUIsR0FBR3h4QixJQUFHLFNBQVNkLEdBQUcsTUFBTSxDQUFDc3lCLEdBQUcsV0FBVyxPQUFPdHlCLEVBQUU2UCxrQkFBaUJpbkIsR0FBRzNHLEdBQUcsQ0FBQzRHLFFBQVEsU0FBUy8yQixFQUFFYyxFQUFFUCxFQUFFWCxRQUFHLElBQVNrQixJQUFJQSxFQUFFLFFBQUcsSUFBU1AsSUFBSUEsR0FBRSxRQUFJLElBQVNYLElBQUlBLEdBQUUsR0FBSSxJQUFJTCxFQUFFK3ZCLEdBQUd0dkIsRUFBRSxJQUFJLFVBQVVxQixFQUFFeXVCLEdBQUcsQ0FBQ2h2QixHQUFHLEdBQUd2QixFQUFFZ04sTUFBTXpOLEVBQUVTLEVBQUUsTUFBTThCLElBQUl2QyxFQUFFUyxFQUFFeVQsVUFBVTNSLElBQUksSUFBSVIsRUFBRW12QixHQUFHLEVBQUV6d0IsRUFBRWdOLE1BQU0sR0FBR2pMLEVBQUV3ZSxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFbVEsT0FBT3JSLEVBQUUrQixFQUFFTixFQUFFWCxLQUFJLENBQUNvM0IsVUFBVWw0QixJQUFHLFNBQVNrQixHQUFHLE1BQU0sQ0FBQ2czQixVQUFVLFdBQVcsT0FBT2gzQixFQUFFbVEsT0FBT3JQLEVBQUVQLEdBQUdYLFFBQU8sT0FBTyxNQUFNeUIsSUFBSUMsRUFBRUEsRUFBRTBSLFVBQVUzUixJQUFJQyxLQUFLMjFCLEdBQUc5RyxHQUFHLENBQUMrRyxjQUFjLFNBQVNsM0IsRUFBRWMsRUFBRVAsUUFBRyxJQUFTQSxJQUFJQSxFQUFFLFFBQVEsSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxnQkFBZ0JULEVBQUUsU0FBU2dCLEVBQUVYLEVBQUU2TSxNQUFNLEdBQUc3TSxFQUFFNk0sTUFBTSxHQUFHcEwsRUFBRSxTQUFTZCxFQUFFWCxFQUFFNk0sTUFBTSxHQUFHN00sRUFBRTZNLE1BQU0sR0FBRzNOLEVBQUUsU0FBU3lCLEVBQUVYLEVBQUU2TSxNQUFNLEdBQUc3TSxFQUFFNk0sTUFBTSxHQUFHLE9BQU96SCxFQUFFekYsRUFBRXVCLEdBQUcsR0FBRSxXQUFXLE1BQU0sc0VBQXNFdkIsRUFBRSxRQUFRdUIsRUFBRSw4Q0FBOENsQixFQUFFNk0sU0FBUXpILEVBQUUzRCxFQUFFUCxHQUFHLEdBQUUsV0FBVyxNQUFNLHNFQUFzRU8sRUFBRSxRQUFRUCxFQUFFLGlEQUFpRGxCLEVBQUU2TSxTQUFRekgsRUFBRWxHLEdBQUdnQyxFQUFFQSxJQUFJLEdBQUUsV0FBVyxNQUFNLDhDQUE4Q0EsRUFBRUEsRUFBRSxXQUFXaEMsRUFBRSxzQ0FBc0NjLEVBQUU2TSxTQUFRcVQsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRXlYLGFBQWE3WCxFQUFFa0IsRUFBRVAsS0FBSSxDQUFDK3hCLEdBQUcxeUIsT0FBT3UzQixHQUFHaEgsR0FBRyxDQUFDaUgsWUFBWSxTQUFTcDNCLEVBQUVjLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksYUFBYSxNQUFNZ0YsRUFBRWxFLEdBQUdQLEVBQUVnTSxNQUFLLFdBQVcsTUFBTSx3Q0FBdUMsSUFBSTNNLEVBQUVXLEVBQUVrTSxNQUFNdkcsUUFBUSxPQUFPcEYsRUFBRSxJQUFJa0UsSUFBSXpFLEVBQUVnTSxLQUFLLElBQUl6TCxHQUFFLFdBQVcsTUFBTSxtQ0FBbUNQLEVBQUVnTSxLQUFLLEdBQUcsS0FBS2hNLEVBQUVnTSxLQUFLLE9BQU16TCxFQUFFUCxFQUFFZ00sS0FBS3pMLEVBQUUsR0FBR2xCLEVBQUV5M0IsT0FBT3YyQixFQUFFLEVBQUUsR0FBR3cyQixHQUFHLzJCLEVBQUVYLE1BQU0yM0IsR0FBR3BILEdBQUcsQ0FBQ3FILEtBQUssU0FBU3gzQixFQUFFYyxFQUFFUCxFQUFFWCxRQUFHLElBQVNBLElBQUlBLEVBQUUsV0FBVyxNQUFNa0IsSUFBSUEsRUFBRWQsR0FBRyxJQUFJLElBQUlULEVBQUUrMkIsR0FBRyxDQUFDdDJCLEVBQUVjLEdBQUdsQixHQUFHeUIsRUFBRXJCLEdBQUdjLEVBQUVkLEVBQUVjLEVBQUVoQyxFQUFFLEVBQUVBLEVBQUV1QyxJQUFJdkMsRUFBRVMsRUFBRTRELElBQUksRUFBRXJFLEVBQUVBLEdBQUcsSUFBSStCLEVBQUV0QixFQUFFbU8sV0FBV2tCLEtBQUs1TyxFQUFFYyxHQUFHLEdBQUcsTUFBTVAsRUFBRSxPQUFPTSxFQUFFLEdBQUcsSUFBSU4sRUFBRTZCLE9BQU8sT0FBT3ExQixHQUFHTixHQUFHdDJCLEVBQUUsR0FBRyxDQUFDTixFQUFFLEdBQUcsRUFBRSxJQUFJLEdBQUcsSUFBSUEsRUFBRTZCLE9BQU8sT0FBT3ExQixHQUFHTixHQUFHQSxHQUFHdDJCLEVBQUUsR0FBRyxHQUFHLENBQUNOLEVBQUUsR0FBR0EsRUFBRSxHQUFHLEVBQUUsSUFBSSxHQUFHLElBQUlBLEVBQUU2QixPQUFPLE9BQU9xMUIsR0FBR04sR0FBR0EsR0FBR0EsR0FBR3QyQixFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUNOLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLEdBQUcsRUFBRSxJQUFJLE1BQU0sSUFBSWtELE1BQU0scUVBQXFFbEQsRUFBRTZCLE9BQU8sU0FBU3MxQixHQUFHdkgsR0FBRyxDQUFDd0gsYUFBYSxTQUFTMzNCLEVBQUVjLEVBQUVQLEVBQUVYLFFBQUcsSUFBU0EsSUFBSUEsR0FBRSxHQUFJLElBQUlMLEVBQUUrdkIsR0FBR3R2QixFQUFFLFNBQVMsZUFBZXFCLEVBQUU5QixFQUFFaU4sS0FBSzFOLEVBQUVTLEVBQUVnTixLQUFLLEdBQUdsTCxFQUFFLEVBQUUsTUFBTSxJQUFJb0MsTUFBTSwrREFBK0RwQyxFQUFFLEtBQUssR0FBR3ZDLEVBQUUsRUFBRSxNQUFNLElBQUkyRSxNQUFNLGdEQUFnRDNFLEdBQUd5QixFQUFFQSxHQUFHb0UsS0FBS0MsU0FBUyxJQUFJL0QsRUFBRSxJQUFJL0IsRUFBRVMsRUFBRXFQLEtBQUssR0FBRyxHQUFHclAsRUFBRStCLEVBQUV3ZSxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFNDNCLFlBQVkvMkIsRUFBRWpCLEVBQUVrQixFQUFFUCxLQUFJLENBQUNzM0IsU0FBU2gzQixJQUFJLE9BQU8sSUFBSS9CLEVBQUV3QyxFQUFFbU4sT0FBT25OLEtBQUt3MkIsR0FBRzNILEdBQUcsQ0FBQzRILFFBQVEsU0FBUy8zQixFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLFFBQUcsSUFBU1csSUFBSUEsRUFBRSxRQUFHLElBQVNYLElBQUlBLEVBQUUsR0FBR2tCLEVBQUUsRUFBRSxNQUFNLElBQUkyQyxNQUFNLGlEQUFpRDNDLEdBQUcsSUFBSXZCLEVBQUUrdkIsR0FBR3R2QixFQUFFLFVBQVUsU0FBUyxTQUFTcUIsRUFBRTlCLEVBQUVrTixNQUFNcEcsT0FBTyxDQUFDdkYsSUFBSSxPQUFPdkIsRUFBRUEsRUFBRWlLLFVBQVVzVyxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFc1EsT0FBTy9RLEVBQUV1QixFQUFFUCxFQUFFWCxLQUFJLENBQUNvNEIsU0FBU3o0QixJQUFHLFNBQVNTLEdBQUcsTUFBTSxDQUFDZzRCLFNBQVMsV0FBVyxPQUFPbEcsR0FBR3Z5QixFQUFFa04sTUFBTSxnQkFBZWtDLFFBQVF0TixNQUFNNDJCLEdBQUc5SCxHQUFHLENBQUMrSCxLQUFLLFNBQVNsNEIsRUFBRWMsRUFBRVAsUUFBRyxJQUFTQSxJQUFJQSxFQUFFLEdBQUcsSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxPQUFPLEdBQUcsSUFBSUosRUFBRTJNLEtBQUssTUFBTSxJQUFJOUksTUFBTSxzREFBc0QsSUFBSWxFLEVBQUV1QixFQUFFc0YsS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFLE1BQUssT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUVrUixJQUFJdFIsRUFBRWtCLEVBQUVQLEtBQUksQ0FBQyt4QixHQUFHMXlCLElBQUcsU0FBU0ksR0FBRyxNQUFNLENBQUNzeUIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRWtHLE1BQU0zRyxFQUFFSyxFQUFFNk0sZUFBYzByQixHQUFHaEksR0FBRyxDQUFDaUksT0FBTyxTQUFTcDRCLEVBQUVjLEVBQUVQLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxFQUFFLEdBQUd5RSxFQUFFLElBQUlsRSxFQUFFc0IsUUFBTyxXQUFXLE1BQU0sc0RBQXFENjFCLEdBQUdqNEIsRUFBRSxDQUFDYyxHQUFHUCxNQUFNODNCLEdBQUdsSSxHQUFHLENBQUNtSSxPQUFPLFNBQVN0NEIsRUFBRWMsRUFBRVAsR0FBRyxZQUFPLElBQVNBLElBQUlBLEVBQUUsR0FBR3lFLEVBQUUsSUFBSWxFLEVBQUVzQixRQUFRLElBQUl0QixFQUFFLEdBQUdzQixRQUFRLElBQUl0QixFQUFFLEdBQUdzQixRQUFPLFdBQVcsTUFBTSwyREFBMEQ2MUIsR0FBR2o0QixFQUFFYyxFQUFFUCxNQUFNZzRCLEdBQUdwSSxHQUFHLENBQUNxSSxPQUFPLFNBQVN4NEIsRUFBRWMsRUFBRVAsR0FBRyxZQUFPLElBQVNBLElBQUlBLEVBQUUsR0FBR3lFLEVBQUUsSUFBSWxFLEVBQUVzQixRQUFRLElBQUl0QixFQUFFLEdBQUdzQixRQUFRLElBQUl0QixFQUFFLEdBQUdzQixRQUFRLElBQUl0QixFQUFFLEdBQUdzQixRQUFPLFdBQVcsTUFBTSwyREFBMEQ2MUIsR0FBR2o0QixFQUFFYyxFQUFFUCxNQUFNazRCLEdBQUd0SSxHQUFHLENBQUN1SSxPQUFPLFNBQVMxNEIsRUFBRWMsRUFBRVAsR0FBRyxZQUFPLElBQVNBLElBQUlBLEVBQUUsR0FBR3lFLEVBQUUsSUFBSWxFLEVBQUVzQixRQUFRLElBQUl0QixFQUFFLEdBQUdzQixRQUFRLElBQUl0QixFQUFFLEdBQUdzQixRQUFRLElBQUl0QixFQUFFLEdBQUdzQixRQUFRLElBQUl0QixFQUFFLEdBQUdzQixRQUFPLFdBQVcsTUFBTSwyREFBMEQ2MUIsR0FBR2o0QixFQUFFYyxFQUFFUCxNQUFNbzRCLEdBQUd4SSxHQUFHLENBQUN5SSxNQUFNLFNBQVM1NEIsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFeUYsRUFBRXJGLEdBQUdULEVBQUUsS0FBSyxHQUFHLE1BQU1nQixHQUFHLFlBQVlBLEVBQUVoQixFQUFFLElBQUlxSCxhQUFhaEgsUUFBUSxHQUFHLFVBQVVXLEVBQUVoQixFQUFFLElBQUlzSCxXQUFXakgsT0FBTyxDQUFDLEdBQUcsU0FBU1csRUFBRSxNQUFNLElBQUlrRCxNQUFNLHFCQUFxQmxELEdBQUdoQixFQUFFLElBQUl1SCxXQUFXbEgsR0FBRyxJQUFJLElBQUl5QixFQUFFLEVBQUVBLEVBQUV6QixFQUFFeUIsSUFBSTlCLEVBQUU4QixHQUFHUCxJQUFJLE9BQU82TSxHQUFHQyxLQUFLNU4sRUFBRSxDQUFDcU4sT0FBTzlOLEdBQUdnQixNQUFNczRCLEdBQUcxSSxHQUFHLENBQUMySSxjQUFjLFNBQVM5NEIsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxRQUFHLElBQVN1QixJQUFJQSxFQUFFLFFBQUcsSUFBU1AsSUFBSUEsRUFBRSxHQUFHLE1BQU1YLEdBQUcsU0FBU0EsRUFBRSxNQUFNLElBQUk2RCxNQUFNLHlCQUF5QjdELEdBQUcsSUFBSSxJQUFJeUIsRUFBRSxJQUFJZzBCLEdBQUd2MEIsRUFBRVAsRUFBRVgsR0FBRSxFQUFHTCxHQUFHVCxFQUFFdzNCLEdBQUd0MkIsRUFBRUosR0FBR2lCLEVBQUUsRUFBRUEsRUFBRS9CLEVBQUV1TyxPQUFPakwsT0FBT3ZCLElBQUkvQixFQUFFdU8sT0FBT3hNLEdBQUdRLEVBQUV1MEIsWUFBWSxPQUFPOTJCLEVBQUU0TyxjQUFjcXJCLEdBQUc1SSxHQUFHLENBQUM2SSxhQUFhLFNBQVNoNUIsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxRQUFHLElBQVNnQixJQUFJQSxFQUFFLFFBQUcsSUFBU1gsSUFBSUEsRUFBRSxXQUFXLE1BQU1XLElBQUlBLEVBQUUsR0FBRyxNQUFNWCxJQUFJQSxFQUFFLFdBQVcsWUFBWUEsR0FBRyxVQUFVQSxFQUFFLE1BQU0sSUFBSTZELE1BQU0seUJBQXlCN0QsR0FBRyxJQUFJLElBQUl5QixFQUFFLElBQUkwMEIsR0FBR2oxQixFQUFFUCxFQUFFWCxFQUFFTCxHQUFHVCxFQUFFdzNCLEdBQUd0MkIsRUFBRUosR0FBR2lCLEVBQUUsRUFBRUEsRUFBRS9CLEVBQUV1TyxPQUFPakwsT0FBT3ZCLElBQUkvQixFQUFFdU8sT0FBT3hNLEdBQUdRLEVBQUV1MEIsWUFBWSxPQUFPOTJCLEVBQUU0TyxjQUFjdXJCLEdBQUc5SSxHQUFHLENBQUMrSSxlQUFlLFNBQVNsNUIsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsUUFBRyxJQUFTdUIsSUFBSUEsRUFBRSxRQUFHLElBQVNQLElBQUlBLEVBQUUsUUFBRyxJQUFTWCxJQUFJQSxFQUFFLFdBQVcsSUFBSSxJQUFJeUIsRUFBRWkxQixHQUFHdDJCLEVBQUVKLEdBQUdkLEVBQUUsSUFBSXEzQixHQUFHcjFCLEVBQUVQLEVBQUUsS0FBS2hCLEdBQUdzQixFQUFFLEVBQUVBLEVBQUVRLEVBQUVnTSxPQUFPakwsT0FBT3ZCLElBQUlRLEVBQUVnTSxPQUFPeE0sR0FBRy9CLEVBQUU4MkIsWUFBWSxPQUFPdjBCLEVBQUVxTSxjQUFjNHBCLEdBQUduSCxHQUFHLENBQUNnSixTQUFTLFNBQVNuNUIsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLFVBQVUsTUFBTSxPQUFPYyxFQUFFbUYsRUFBRW5GLEVBQUVQLEVBQUVpTSxNQUFNeEgsRUFBRXpFLEVBQUVpTSxPQUFPbkgsRUFBRXZFLElBQUcsV0FBVyxNQUFNLG9FQUFtRWdmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUUyTyxRQUFRcE8sRUFBRU8sS0FBSSxDQUFDd3hCLEdBQUcveEIsSUFBRyxTQUFTUCxHQUFHLE1BQU0sQ0FBQ3N5QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFMk8sUUFBUXBPLEVBQUVrTSxlQUFjMnNCLEdBQUdqSixHQUFHLENBQUNrSixnQkFBZ0IsU0FBU3I1QixFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksa0JBQWtCLE9BQU9nRixFQUFFcEYsRUFBRTJNLE1BQU0sRUFBRXpMLEVBQUVzQixRQUFPLFdBQVcsTUFBTSxjQUFjeEMsRUFBRTJNLEtBQUssa0NBQWtDekwsRUFBRXNCLFVBQVM0QyxFQUFFekUsRUFBRTZCLFNBQVN0QixFQUFFc0IsUUFBTyxXQUFXLE1BQU0scUJBQXFCN0IsRUFBRTZCLE9BQU8sa0NBQWtDdEIsRUFBRXNCLFVBQVM0QyxFQUFFcEYsRUFBRTZNLE1BQU12RSxRQUFPLFNBQVNsSSxFQUFFSixFQUFFTCxHQUFHLE9BQU9BLEVBQUUsR0FBR0EsR0FBR3VCLEVBQUVzQixPQUFPcEMsSUFBSUosRUFBRVcsRUFBRWhCLEVBQUUsR0FBRyxHQUFHZ0IsRUFBRWhCLEVBQUUsR0FBRyxJQUFJdUIsRUFBRXZCLEVBQUUsSUFBSSxFQUFFUyxLQUFHLElBQUksV0FBVyxNQUFNLDRCQUE0QkosRUFBRTZNLE1BQU12RyxNQUFNLEdBQUcsa0JBQWtCM0YsRUFBRW1NLFdBQVcscUNBQXFDNUwsRUFBRTRMLGNBQWFvVCxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFc1gsZUFBZTFYLEVBQUVrQixFQUFFUCxLQUFJLENBQUMreEIsR0FBRzF5QixJQUFHLFNBQVNJLEdBQUcsTUFBTSxDQUFDc3lCLEdBQUcsV0FBVyxPQUFPdHlCLEVBQUVxWCxlQUFldlcsRUFBRVAsV0FBVSs0QixHQUFHbkosR0FBRyxDQUFDb0osU0FBUyxTQUFTdjVCLEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsSUFBSSxXQUFXLE9BQU9zM0IsR0FBRy8yQixFQUFFZ0csRUFBRWhHLEVBQUVrTSxNQUFNM0wsR0FBRzJGLGFBQWEreUIsR0FBR3JKLEdBQUcsQ0FBQ3NKLE9BQU8sU0FBU3o1QixFQUFFYyxRQUFHLElBQVNBLElBQUlBLEVBQUUsR0FBRyxJQUFJUCxFQUFFaXZCLEdBQUd4dkIsRUFBRSxVQUFVLFNBQVMsR0FBR2dGLEVBQUV6RSxFQUFFNkIsUUFBUSxHQUFFLFdBQVcsTUFBTSwwQ0FBeUMsSUFBSTdCLEVBQUU2QixPQUFPLE9BQU83QixFQUFFLEdBQUcyUCxXQUFXcFAsR0FBRyxJQUFJbEIsRUFBRVcsRUFBRSxHQUFHZ00sS0FBS2hOLEVBQUVnQixFQUFFLEdBQUdrTSxNQUFNcEwsRUFBRWQsRUFBRSxHQUFHNEwsTUFBTW5ILEVBQUVsRSxHQUFHbEIsR0FBRSxXQUFXLE1BQU0sd0NBQXVDVyxFQUFFMEQsU0FBUSxTQUFTakUsR0FBR1osRUFBRUcsRUFBRVMsRUFBRXlNLE1BQU0sNERBQTJEbE0sRUFBRTBELFNBQVEsU0FBU2pFLEdBQUdnRixFQUFFM0QsSUFBSXJCLEVBQUVtTSxPQUFNLFdBQVcsTUFBTSw4REFBNEQsSUFBSXJOLEVBQUV5QixFQUFFNkYsS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFa1EsV0FBV3BQLE1BQUssT0FBTzB4QixHQUFHMXpCLEVBQUVnQyxNQUFNMjJCLEdBQUd0SCxHQUFHLENBQUN1SixNQUFNLFNBQVMxNUIsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLE9BQU8sTUFBTSxPQUFPZ0YsRUFBRXpFLEVBQUVnTSxPQUFPekwsRUFBRXNCLFFBQU8sV0FBVyxNQUFNLHFDQUFxQzdCLEVBQUVnTSxLQUFLLDhCQUE4QnpMLEVBQUUsT0FBTWdmLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFSixHQUFHLElBQUlMLEVBQUVTLEVBQUUwUSxLQUFLblEsRUFBRU8sR0FBRyxPQUFPbEIsRUFBRSxDQUFDVyxJQUFJaEIsSUFBRyxDQUFDK3lCLEdBQUcveEIsSUFBRyxTQUFTUCxFQUFFTyxHQUFHLElBQUlYLEVBQUVXLEVBQUUsR0FBRyxNQUFNLENBQUMreEIsR0FBRyxXQUFXLElBQUkveEIsRUFBRTh4QixHQUFHenlCLEdBQUcsR0FBRyxJQUFJQSxFQUFFMk0sS0FBSyxJQUFJLElBQUloTixFQUFFLEVBQUVBLEVBQUV1QixFQUFFLEtBQUt2QixFQUFFZ0IsRUFBRUEsRUFBRXFSLElBQUk1UixFQUFFa0csTUFBTSxDQUFDM0csRUFBRUssRUFBRTZNLE1BQU0sSUFBSSxDQUFDN00sRUFBRTZNLE1BQU0sV0FBVyxHQUFHLElBQUk3TSxFQUFFMk0sS0FBSyxJQUFJaE4sRUFBRSxFQUFFQSxFQUFFdUIsRUFBRSxLQUFLdkIsRUFBRSxJQUFJLElBQUk4QixFQUFFLEVBQUVBLEVBQUVQLEVBQUUsS0FBS08sRUFBRWQsRUFBRUEsRUFBRXFSLElBQUk1UixFQUFFa0csTUFBTSxDQUFDM0csRUFBRUssRUFBRTZNLE1BQU0sR0FBR3BMLEVBQUV6QixFQUFFNk0sTUFBTSxJQUFJLENBQUM3TSxFQUFFNk0sTUFBTSxHQUFHN00sRUFBRTZNLE1BQU0sV0FBVyxHQUFHLElBQUk3TSxFQUFFMk0sS0FBSyxJQUFJaE4sRUFBRSxFQUFFQSxFQUFFdUIsRUFBRSxLQUFLdkIsRUFBRSxJQUFJOEIsRUFBRSxFQUFFQSxFQUFFUCxFQUFFLEtBQUtPLEVBQUUsSUFBSSxJQUFJdkMsRUFBRSxFQUFFQSxFQUFFZ0MsRUFBRSxLQUFLaEMsRUFBRXlCLEVBQUVBLEVBQUVxUixJQUFJNVIsRUFBRWtHLE1BQU0sQ0FBQzNHLEVBQUVLLEVBQUU2TSxNQUFNLEdBQUdwTCxFQUFFekIsRUFBRTZNLE1BQU0sR0FBRzNOLEVBQUVjLEVBQUU2TSxNQUFNLElBQUksQ0FBQzdNLEVBQUU2TSxNQUFNLEdBQUc3TSxFQUFFNk0sTUFBTSxHQUFHN00sRUFBRTZNLE1BQU0sVUFBVSxDQUFDLEdBQUcsSUFBSTdNLEVBQUUyTSxLQUFLLE1BQU0sSUFBSTlJLE1BQU0sMkRBQTJEN0QsRUFBRTJNLEtBQUssaUJBQWlCLElBQUloTixFQUFFLEVBQUVBLEVBQUV1QixFQUFFLEtBQUt2QixFQUFFLElBQUk4QixFQUFFLEVBQUVBLEVBQUVQLEVBQUUsS0FBS08sRUFBRSxJQUFJdkMsRUFBRSxFQUFFQSxFQUFFZ0MsRUFBRSxLQUFLaEMsRUFBRSxJQUFJLElBQUkrQixFQUFFLEVBQUVBLEVBQUVDLEVBQUUsS0FBS0QsRUFBRU4sRUFBRUEsRUFBRXFSLElBQUk1UixFQUFFa0csTUFBTSxDQUFDM0csRUFBRUssRUFBRTZNLE1BQU0sR0FBR3BMLEVBQUV6QixFQUFFNk0sTUFBTSxHQUFHM04sRUFBRWMsRUFBRTZNLE1BQU0sR0FBRzVMLEVBQUVqQixFQUFFNk0sTUFBTSxJQUFJLENBQUM3TSxFQUFFNk0sTUFBTSxHQUFHN00sRUFBRTZNLE1BQU0sR0FBRzdNLEVBQUU2TSxNQUFNLEdBQUc3TSxFQUFFNk0sTUFBTSxNQUFNLE9BQU9sTSxVQUFTbzVCLEdBQUd4SixHQUFHLENBQUN5SixpQkFBaUIsU0FBUzU1QixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLFFBQUcsSUFBU3VCLElBQUlBLEVBQUUsUUFBRyxJQUFTUCxJQUFJQSxFQUFFLEdBQUcsTUFBTVgsR0FBRyxTQUFTQSxFQUFFLE1BQU0sSUFBSTZELE1BQU0seUJBQXlCN0QsR0FBRyxJQUFJLElBQUl5QixFQUFFLElBQUlnMEIsR0FBR3YwQixFQUFFUCxFQUFFWCxHQUFFLEVBQUdMLEdBQUdULEVBQUV3M0IsR0FBR3QyQixFQUFFSixHQUFHaUIsRUFBRSxFQUFFQSxFQUFFL0IsRUFBRXVPLE9BQU9qTCxPQUFPdkIsSUFBSS9CLEVBQUV1TyxPQUFPeE0sR0FBR1EsRUFBRXUwQixZQUFZLE9BQU85MkIsRUFBRTRPLGNBQWNtc0IsR0FBRzFKLEdBQUcsQ0FBQzJKLFNBQVMsU0FBUzk1QixFQUFFYyxRQUFHLElBQVNBLElBQUlBLEVBQUUsR0FBR0EsRUFBRUEsR0FBRyxFQUFFLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksV0FBVyxPQUFPZ0YsRUFBRWxFLElBQUlQLEVBQUVrTSxNQUFNckssUUFBUXRCLEVBQUVQLEVBQUVrTSxNQUFNckssUUFBTyxXQUFXLE1BQU0sVUFBVXRCLEVBQUUsZ0JBQWdCUCxFQUFFa00sTUFBTXJLLE9BQU8sS0FBSzdCLEVBQUVrTSxNQUFNckssT0FBTyxPQUFNdEIsRUFBRSxJQUFJQSxHQUFHUCxFQUFFa00sTUFBTXJLLFFBQVEwZCxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFaVIsUUFBUTFRLEVBQUVPLEtBQUksQ0FBQ3d4QixHQUFHL3hCLElBQUcsU0FBU1AsR0FBRyxNQUFNLENBQUNzeUIsR0FBRyxXQUFXLE9BQU9rSCxHQUFHeDVCLEVBQUVjLFdBQVVpNUIsR0FBRyxTQUFTLzVCLEVBQUVjLEdBQUcsT0FBT1AsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJWCxFQUFFaEIsRUFBRThCLEVBQUV2QyxFQUFFK0IsRUFBRVMsRUFBRXZDLEVBQUVJLEVBQUU0RixFQUFFbkUsRUFBRSxPQUFPaEIsRUFBRXNCLE1BQUssU0FBU3RCLEdBQUcsT0FBT0EsRUFBRWdDLE9BQU8sS0FBSyxFQUFFLE9BQU9yQixFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLGFBQWFULEVBQUUrdkIsR0FBR3h1QixFQUFFLElBQUksYUFBYWtFLEVBQUV6RSxFQUFFNEwsUUFBUTVNLEVBQUU0TSxPQUFNLFdBQVcsTUFBTSxrREFBa0Q1TCxFQUFFNEwsTUFBTSxZQUFZNU0sRUFBRTRNLE1BQU0sUUFBT25ILEVBQUUsSUFBSXpFLEVBQUVnTSxNQUFLLFdBQVcsTUFBTSxxQ0FBcUNoTSxFQUFFa00sTUFBTSxRQUFPekgsRUFBRSxJQUFJekYsRUFBRWdOLE1BQUssV0FBVyxNQUFNLHFDQUFxQ2hOLEVBQUVrTixNQUFNLFFBQU8sQ0FBQyxFQUFFbE0sRUFBRTJMLFFBQVEsS0FBSyxFQUFFLE9BQU83SyxFQUFFekIsRUFBRWlDLE9BQU8sQ0FBQyxFQUFFdEMsRUFBRTJNLFFBQVEsS0FBSyxFQUFFLElBQUlwTixFQUFFYyxFQUFFaUMsT0FBT2hCLEVBQUUsSUFBSWdaLElBQUkvYSxHQUFHd0MsRUFBRSxFQUFFeUQsRUFBRSxFQUFFQSxFQUFFMUQsRUFBRWUsT0FBTzJDLElBQUlsRSxFQUFFK1ksSUFBSXZZLEVBQUUwRCxLQUFLekQsSUFBSSxJQUFJdkMsRUFBRSxJQUFJcU8sR0FBRyxDQUFDOUwsR0FBR2YsRUFBRTRMLE9BQU9oTixFQUFFLElBQUlpTyxHQUFHLENBQUM5TCxHQUFHLFNBQVN5RCxFQUFFLEVBQUVuRSxFQUFFLEVBQUVtRSxFQUFFMUQsRUFBRWUsT0FBTzJDLElBQUlsRSxFQUFFK1ksSUFBSXZZLEVBQUUwRCxNQUFNaEcsRUFBRXNPLE9BQU96TSxHQUFHUyxFQUFFMEQsR0FBRzVGLEVBQUVrTyxPQUFPek0sR0FBR21FLEVBQUVuRSxLQUFLLE1BQU0sQ0FBQyxFQUFFLENBQUM3QixFQUFFMk8sV0FBV3ZPLEVBQUV1TyxxQkFBbUIsU0FBU3NzQixHQUFHaDZCLEVBQUVjLEVBQUVQLEVBQUVYLFFBQUcsSUFBU0EsSUFBSUEsR0FBRSxHQUFJLElBQUlMLEVBQUUsR0FBRyxHQUFHSyxHQUFHTCxFQUFFQSxFQUFFOEcsT0FBT3ZGLEVBQUVvRixNQUFNLEtBQUs3RCxLQUFLckMsRUFBRSxHQUFHTyxHQUFHaEIsRUFBRUEsRUFBRThHLE9BQU9yRyxFQUFFa0csTUFBTSxRQUFRLENBQUMzRyxFQUFFQSxFQUFFOEcsT0FBT3JHLEVBQUUsSUFBSSxJQUFJLElBQUlxQixFQUFFUCxFQUFFc0IsT0FBT3RELEVBQUUsRUFBRUEsRUFBRXVDLElBQUl2QyxFQUFFUyxFQUFFQSxFQUFFOEcsT0FBTyxDQUFDckcsRUFBRWxCLEVBQUUsR0FBR2dDLEVBQUVoQyxHQUFHZ0MsRUFBRWhDLEtBQUtTLEVBQUVBLEVBQUU4RyxPQUFPckcsRUFBRWtHLE1BQU03RSxFQUFFLElBQUksT0FBTzlCLEVBQUUsU0FBUzA2QixHQUFHajZCLEVBQUVjLEVBQUVQLFFBQUcsSUFBU0EsSUFBSUEsR0FBRSxHQUFJLElBQUlYLEVBQUUsR0FBRyxHQUFHVyxFQUFFLENBQUNYLEVBQUV5QyxLQUFLdkIsR0FBRyxJQUFJLElBQUl2QixFQUFFdUIsRUFBRSxFQUFFdkIsRUFBRVMsSUFBSVQsRUFBRUEsR0FBRyxFQUFFdUIsR0FBR2xCLEVBQUV5QyxLQUFLOUMsR0FBR0ssRUFBRXlDLEtBQUs5QyxHQUFHdUIsRUFBRSxLQUFLbEIsRUFBRXlDLEtBQUs5QyxPQUFPLENBQUMsSUFBSThCLEVBQUUsR0FBR3ZDLEVBQUUsR0FBRyxJQUFJUyxFQUFFLEVBQUVBLEVBQUVTLElBQUlULEVBQUVBLEdBQUcsRUFBRXVCLEVBQUUsR0FBR3ZCLEVBQUUsR0FBRyxFQUFFVCxFQUFFdUQsS0FBSzlDLEdBQUc4QixFQUFFZ0IsS0FBSzlDLEdBQUdLLEVBQUV5QyxLQUFLVixNQUFNL0IsRUFBRXlCLEdBQUd6QixFQUFFeUMsS0FBSyxHQUFHekMsRUFBRXlDLEtBQUtWLE1BQU0vQixFQUFFZCxHQUFHLE9BQU9jLEVBQUUsU0FBU3M2QixHQUFHbDZCLEVBQUVjLEVBQUVQLEVBQUVYLFFBQUcsSUFBU0EsSUFBSUEsR0FBRSxHQUFJLElBQUlMLEVBQUUsR0FBR0ssRUFBRUwsRUFBRThDLEtBQUtyQyxFQUFFLEdBQUdPLEdBQUdoQixFQUFFOEMsS0FBS3JDLEVBQUUsR0FBR08sR0FBRyxJQUFJLElBQUljLEVBQUUsRUFBRUEsRUFBRXJCLEVBQUVvQyxTQUFTZixFQUFFQSxHQUFHUCxFQUFFc0IsT0FBT3hDLEVBQUVMLEVBQUU4QyxLQUFLdkIsRUFBRU8sRUFBRSxHQUFHckIsRUFBRXFCLElBQUk5QixFQUFFOEMsS0FBS3JDLEVBQUVxQixHQUFHUCxFQUFFTyxFQUFFLElBQUk5QixFQUFFOEMsS0FBS3JDLEVBQUVxQixJQUFJLE9BQU85QixFQUFFLFNBQVM0NkIsR0FBR242QixFQUFFYyxHQUFHLElBQUksSUFBSVAsRUFBRSxDQUFDLEdBQUdYLEVBQUUsRUFBRUEsRUFBRWtCLElBQUlsQixFQUFFVyxFQUFFOEIsS0FBS3JDLEVBQUVKLEdBQUcsSUFBSSxPQUFPVyxFQUFFLFNBQVM2NUIsR0FBR3A2QixFQUFFYyxFQUFFUCxHQUFHLElBQUksSUFBSVgsRUFBRUksRUFBRWtHLE1BQU0sRUFBRSxHQUFHM0csRUFBRSxFQUFFQSxFQUFFZ0IsSUFBSWhCLEVBQUVLLEVBQUV5QyxLQUFLckMsRUFBRVQsRUFBRSxHQUFHdUIsRUFBRXZCLEdBQUcsR0FBR3VCLEVBQUV2QixHQUFHLElBQUksT0FBT0ssRUFBRSxTQUFTeTZCLEdBQUdyNkIsRUFBRWMsR0FBRyxHQUFHZCxFQUFFdU0sS0FBSyxFQUFFLE1BQU0sSUFBSTlJLE1BQU0sNEVBQTRFekQsRUFBRXVNLEtBQUssS0FBSyxHQUFHekwsRUFBRXlMLEtBQUssRUFBRSxNQUFNLElBQUk5SSxNQUFNLDhFQUE4RTNDLEVBQUV5TCxLQUFLLEtBQUssR0FBRyxVQUFVekwsRUFBRXFMLE1BQU0sTUFBTSxJQUFJMUksTUFBTSx5RUFBeUUzQyxFQUFFcUwsTUFBTSxLQUFLLEdBQUdyTCxFQUFFMkwsTUFBTTNMLEVBQUV5TCxLQUFLLEdBQUd2TSxFQUFFdU0sS0FBSyxNQUFNLElBQUk5SSxNQUFNLGlFQUFpRTNDLEVBQUUyTCxNQUFNM0wsRUFBRXlMLEtBQUssR0FBRyxRQUFRdk0sRUFBRXVNLE1BQU0sR0FBRyxJQUFJdk0sRUFBRXdNLEtBQUssTUFBTSxJQUFJL0ksTUFBTSxtRUFBbUV6RCxFQUFFeU0sTUFBTSxLQUFLLElBQUksSUFBSWxNLEVBQUVPLEVBQUUyTCxNQUFNN00sRUFBRVcsRUFBRUEsRUFBRTZCLE9BQU8sR0FBRzdDLEVBQUUsRUFBRThCLEVBQUUsRUFBRUEsRUFBRWQsRUFBRTZCLE9BQU8sSUFBSWYsRUFBRTlCLEdBQUdnQixFQUFFYyxHQUFHLElBQUl2QyxFQUFFa0IsRUFBRXlNLE1BQU01TCxFQUFFTixFQUFFMkYsUUFBUXJGLEVBQUVzQixNQUFNLElBQUliLEVBQUUsRUFBRSxJQUFJRCxFQUFFekIsRUFBRXlCLEVBQUVyQixFQUFFdU0sT0FBT2xMLEVBQUVDLEdBQUd4QyxFQUFFdUMsR0FBR1IsRUFBRXdCLEtBQUt2RCxFQUFFdUMsSUFBSSxJQUFJdEMsRUFBRStJLEVBQUU5SCxFQUFFeU0sT0FBT3JHLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRXNCLEtBQUkrRSxPQUFPLENBQUMsSUFBSUgsTUFBTSxFQUFFdEcsR0FBRyxNQUFNLENBQUNpQixFQUFFdEIsRUFBRStCLEVBQUV2QyxHQUFHLElBQUl1N0IsR0FBRyxHQUFHLFNBQVNDLEdBQUd2NkIsR0FBRyxPQUFPQSxHQUFHczZCLEdBQUd0NkIsRUFBRTZILEVBQUU3SCxFQUFFMkUsS0FBSzhJLE1BQU05SSxLQUFLaUIsS0FBSzVGLEtBQXU2QyxTQUFTdzZCLEdBQUd4NkIsRUFBRWMsRUFBRVAsR0FBRyxJQUFJLElBQUlYLEVBQUVrQixFQUFFeUwsS0FBSyxFQUFFekwsRUFBRTJMLE1BQU0zTCxFQUFFeUwsS0FBSyxHQUFHLEVBQUVoTixFQUFFZ0IsRUFBRTZCLE9BQU9mLEVBQUUsRUFBRXZDLEVBQUVjLEVBQUVkLEVBQUVTLElBQUlULEVBQUV1QyxHQUFHZCxFQUFFekIsR0FBRyxJQUFJK0IsRUFBRWpCLEVBQUUsRUFBRSxFQUFFQSxFQUFFLE1BQU0sQ0FBQzY2QixVQUFVNzZCLEVBQUU4NkIsV0FBVzU1QixFQUFFMEwsS0FBSzNMLEVBQUU4NUIsVUFBVXQ1QixFQUFFaU0sUUFBUXhGLEVBQUV2SCxFQUFFMkYsTUFBTSxFQUFFdEcsSUFBSXlHLE9BQU8sQ0FBQyxJQUFJdTBCLFdBQVd2MUIsRUFBRTlFLElBQUksU0FBU3M2QixHQUFHNzZCLEdBQUcsSUFBSSxJQUFJYyxFQUFFLEdBQUdQLEVBQUUsRUFBRVAsRUFBRSxHQUFHLEVBQUVBLEdBQUdjLEVBQUV1QixLQUFLOUIsR0FBR1AsR0FBRyxFQUFFTyxJQUFJLE9BQU9PLEVBQUUsU0FBU2c2QixHQUFHOTZCLEVBQUVjLEVBQUVQLEdBQUcsSUFBSSxJQUFJWCxFQUFFLEdBQUdMLEVBQUUsRUFBRUEsRUFBRVMsRUFBRW9DLE9BQU83QyxJQUFJSyxFQUFFTCxHQUFHb0YsS0FBS2dCLE1BQU03RSxFQUFFdkIsR0FBR1MsRUFBRVQsSUFBSWdCLEVBQUVoQixJQUFJLE9BQU9LLEVBQUUsU0FBU203QixHQUFHLzZCLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsSUFBSThCLEVBQUVQLEVBQUV2QixHQUFHVCxFQUFFeUIsRUFBRWhCLElBQUksR0FBR1MsRUFBRSxHQUFHVCxHQUFHLE1BQU04QixLQUFLQSxFQUFFdkMsRUFBRSxFQUFFMEosT0FBT3d5QixpQkFBaUJ4eUIsT0FBT3l5QixrQkFBa0IsSUFBSXA2QixFQUFFakIsRUFBRUwsR0FBRyxPQUFPOEIsRUFBRSxJQUFJQSxHQUFHUixHQUFLMUIsRUFBRSxFQUFFa0MsRUFBRVIsRUFBRSxHQUFHLFNBQVNxNkIsR0FBR2w3QixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLElBQUk4QixFQUFFUCxFQUFFdkIsR0FBR1QsRUFBRXlCLEVBQUVoQixJQUFJLEdBQUdTLEVBQUUsR0FBR1QsR0FBRyxNQUFNOEIsS0FBS0EsRUFBRXZDLEVBQUUsRUFBRTBKLE9BQU95eUIsaUJBQWlCenlCLE9BQU93eUIsa0JBQWtCLElBQUluNkIsRUFBRWpCLEVBQUVMLEdBQUcsT0FBTzhCLEVBQUUsSUFBSUEsR0FBR1IsR0FBSy9CLEVBQUUsRUFBRUssRUFBRSxFQUFFa0MsRUFBRVIsR0FBRzFCLEdBQUcsRUFBRWtDLEVBQUVSLEVBQUUsR0FBRyxTQUFTczZCLEdBQUduN0IsRUFBRWMsRUFBRVAsR0FBRyxJQUFJLElBQUlYLEVBQUVXLEVBQUU2QixPQUFPN0MsRUFBRSxFQUFFQSxFQUFFZ0IsRUFBRTZCLE9BQU83QyxJQUFJLEdBQUdnQixFQUFFaEIsR0FBRyxFQUFFLENBQUNLLEVBQUVMLEVBQUUsTUFBTSxJQUFJQSxFQUFFSyxFQUFFLEVBQUVMLEVBQUVnQixFQUFFNkIsT0FBTzdDLElBQUksR0FBR3VCLEVBQUV2QixHQUFHLEdBQUdnQixFQUFFaEIsS0FBS1MsRUFBRVQsR0FBRyxPQUFNLEVBQUcsT0FBTSxFQUFHLFNBQVM2N0IsR0FBR3A3QixFQUFFYyxHQUFHLElBQUksSUFBSVAsRUFBRVAsRUFBRW9DLE9BQU8sRUFBRXBDLEVBQUVBLEVBQUVvQyxPQUFPLEdBQUcsRUFBRXhDLEVBQUUsRUFBRUEsRUFBRUksRUFBRW9DLE9BQU8sRUFBRXhDLElBQUlXLEdBQUdQLEVBQUVKLEdBQUdrQixFQUFFbEIsR0FBRyxPQUFPVyxFQUFFLFNBQVM4NkIsR0FBR3I3QixHQUFHLE9BQU9nRixFQUFFNEMsRUFBRTVILElBQUcsV0FBVyxNQUFNLGdEQUErQyxTQUFTYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUwdkIsR0FBR3h1QixFQUFFLElBQUksVUFBVSxNQUFNdkIsRUFBRSxNQUFNZ0IsRUFBRSt1QixHQUFHL3VCLEVBQUUsS0FBSyxXQUFXLEtBQUssT0FBT3VmLEdBQUd6QyxNQUFLLFdBQVcsSUFBSXZjLEVBQUVnZixHQUFHTixXQUFVLFdBQVcsT0FBT3hmLEVBQUVKLEtBQUksQ0FBQ0EsR0FBR0wsR0FBR2dCLEVBQUVPLEVBQUVmLE1BQU1zQixFQUFFUCxFQUFFMmUsTUFBTSxPQUFPLE1BQU1sZ0IsR0FBR0gsRUFBRW1CLEVBQUVrTSxNQUFNbE4sRUFBRWtOLE1BQU0sa0ZBQWtGNnVCLEdBQUdqNkIsR0FBR0EsRUFBRSxPQUFNLFNBQVNrNkIsR0FBR3Y3QixHQUFHLE9BQU9nRixFQUFFNEMsRUFBRTVILElBQUcsV0FBVyxNQUFNLGlEQUFnRCxTQUFTYyxFQUFFUCxHQUFHeUUsRUFBRS9ELE1BQU1rRSxRQUFRckUsSUFBRyxXQUFXLE1BQU0sc0ZBQXFGLElBQUlsQixFQUFFNHZCLEdBQUcxdUIsRUFBRSxPQUFPLFdBQVcsTUFBTXZCLEVBQUUsTUFBTWdCLEVBQUUrdUIsR0FBRy91QixFQUFFLEtBQUssWUFBWSxLQUFLLE9BQU91ZixHQUFHekMsTUFBSyxXQUFXLElBQUl2YyxFQUFFZ2YsR0FBR04sV0FBVSxXQUFXLE9BQU94ZixFQUFFMkIsV0FBTSxFQUFPL0IsS0FBSUEsRUFBRUwsR0FBR2dCLEVBQUVPLEVBQUVmLE1BQU1zQixFQUFFUCxFQUFFMmUsTUFBTSxPQUFPLE1BQU1sZ0IsR0FBR0gsRUFBRW1CLEVBQUVrTSxNQUFNbE4sRUFBRWtOLE1BQU0saUdBQWlHNnVCLEdBQUdqNkIsR0FBR0EsTUFBSyxTQUFTbTZCLEdBQUd4N0IsR0FBRyxPQUFPZ0YsRUFBRTRDLEVBQUU1SCxJQUFHLFdBQVcsTUFBTSx3REFBdUQsU0FBU2MsRUFBRVAsR0FBR3lFLEVBQUVsRSxhQUFhNk0sSUFBRyxXQUFXLE1BQU0seURBQXdEM0ksRUFBRSxNQUFNekUsR0FBR0EsYUFBYW9OLElBQUcsV0FBVyxNQUFNLDhEQUE2RCxJQUFJL04sRUFBRWtnQixHQUFHTixXQUFVLFdBQVcsT0FBT3hmLEVBQUVjLEtBQUksQ0FBQ0EsR0FBR1AsR0FBR2hCLEVBQUVLLEVBQUU2ZixNQUFNcGUsRUFBRXpCLEVBQUVHLE1BQU0sT0FBT3U3QixHQUFHLzdCLEdBQUcsQ0FBQ2s4QixLQUFLbDhCLEVBQUUsR0FBR1EsTUFBTXNCLElBQUksU0FBU3E2QixHQUFHMTdCLEdBQUcsT0FBT2dGLEVBQUU0QyxFQUFFNUgsSUFBRyxXQUFXLE1BQU0seURBQXdELFNBQVNjLEVBQUVQLEdBQUd5RSxFQUFFL0QsTUFBTWtFLFFBQVFyRSxJQUFJQSxFQUFFd0YsT0FBTSxTQUFTdEcsR0FBRyxPQUFPQSxhQUFhMk4sT0FBSyxXQUFXLE1BQU0sd0VBQXVFM0ksRUFBRSxNQUFNekUsR0FBR0EsYUFBYW9OLElBQUcsV0FBVyxNQUFNLGtFQUFpRSxJQUFJL04sRUFBRWtnQixHQUFHTixXQUFVLFdBQVcsT0FBT3hmLEVBQUUyQixXQUFNLEVBQU9iLEtBQUlBLEVBQUVQLEdBQUcsT0FBTyxNQUFNQSxHQUFHbkIsRUFBRVEsRUFBRUcsTUFBTTBNLE1BQU1sTSxFQUFFa00sTUFBTSx5R0FBeUc2dUIsR0FBRzE3QixFQUFFNmYsT0FBTzdmLEdBQUcsU0FBUys3QixHQUFHMzdCLEVBQUVjLEdBQUdrRSxFQUFFNEMsRUFBRTVILElBQUcsV0FBVyxNQUFNLHlEQUF3RGdGLEVBQUUsTUFBTWxFLEdBQUdHLE1BQU1rRSxRQUFRckUsSUFBSUEsRUFBRXdGLE9BQU0sU0FBU3RHLEdBQUcsT0FBT0EsYUFBYW1YLE9BQUssV0FBVyxNQUFNLG1GQUFrRixJQUFJNVcsRUFBRSxNQUFNTyxFQUFFLElBQUlQLEVBQUUsSUFBSSxJQUFJWCxLQUFLa0IsRUFBRSxHQUFHZ2YsR0FBR3pGLG9CQUFvQnZaLEVBQUV1QixLQUFLeWQsR0FBR3pGLG9CQUFvQnphLElBQUksSUFBSUwsRUFBRWdCLEVBQUVPLEVBQUU0eEIsUUFBTyxTQUFTMXlCLEdBQUcsT0FBT0EsRUFBRWdZLGFBQVksS0FBSzNXLEVBQUVQLEVBQUVzQixPQUFPNEMsR0FBR2xFLEVBQUVBLEVBQUU0eEIsUUFBTyxTQUFTMXlCLEdBQUcsT0FBT0EsRUFBRWdZLGNBQWE1VixPQUFPLEdBQUUsV0FBVyxNQUFNLGdHQUFnR2YsRUFBRSw4QkFBNkIsSUFBSXZDLEVBQUVnaEIsR0FBR04sVUFBVXhmLEVBQUVjLEVBQUUsTUFBSyxHQUFJRCxFQUFFL0IsRUFBRWlCLE1BQU11QixFQUFFeEMsRUFBRTJnQixNQUFNemEsRUFBRTFELEVBQUVzNkIsTUFBSyxTQUFTNTdCLEdBQUcsT0FBTyxNQUFNQSxNQUFJLFdBQVcsTUFBTSxrTUFBaU1nRixFQUFFLElBQUluRSxFQUFFMEwsTUFBSyxXQUFXLE1BQU0saUZBQWlGMUwsRUFBRTBMLEtBQUssYUFBWSxJQUFJeE4sRUFBRSxHQUFHLE9BQU8rQixFQUFFbUQsU0FBUSxTQUFTakUsRUFBRWMsR0FBRyxNQUFNUSxFQUFFUixLQUFLL0IsRUFBRWlCLEVBQUVYLE1BQU1pQyxFQUFFUixPQUFNLE1BQU12QixHQUFHQSxFQUFFMEUsU0FBUSxTQUFTakUsR0FBRyxPQUFPakIsRUFBRWlCLEVBQUVYLE1BQU0sUUFBTyxDQUFDVSxNQUFNYyxFQUFFNGUsTUFBTTFnQixHQUFHLFNBQVM4OEIsR0FBRzc3QixHQUFHLE9BQU84ZixHQUFHSixXQUFXMWYsR0FBRyxTQUFTczdCLEdBQUd0N0IsR0FBRyxHQUFHQSxFQUFFMHlCLFFBQU8sU0FBUzF5QixHQUFHLE9BQU8sTUFBTUEsS0FBSW9DLE9BQU8sRUFBRSxNQUFNLElBQUlxQixNQUFNLDRJQUE0SSxJQUFJcTRCLEdBQUczTCxHQUFHLENBQUM0TCxTQUFTLFNBQVMvN0IsRUFBRWMsUUFBRyxJQUFTQSxJQUFJQSxHQUFHLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsU0FBUyxXQUFXLElBQUksSUFBSWMsSUFBSUEsRUFBRVAsRUFBRWdNLEtBQUssR0FBR3pMLElBQUlQLEVBQUVnTSxLQUFLLEVBQUUsTUFBTTlJLE1BQU0sNEVBQTRFbEQsRUFBRWdNLEtBQUssZ0JBQWdCekwsR0FBRyxPQUFPKzZCLElBQUcsU0FBUzc3QixFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUV1UixVQUFVLENBQUN6USxJQUFHLEdBQUl2QixFQUFFUyxFQUFFNlAsVUFBVWtDLElBQUluUyxHQUFHNkYsTUFBTSxPQUFPbEYsRUFBRSxDQUFDaEIsSUFBSSxDQUFDUSxNQUFNUixFQUFFb2dCLFNBQVMsU0FBUzNmLEVBQUVPLEdBQUcsSUFBSVgsRUFBRVcsRUFBRSxHQUFHaEIsRUFBRVMsRUFBRW1TLElBQUl2UyxHQUFHLE9BQU9MLEVBQUV3UyxJQUFJeFMsRUFBRTJKLElBQUksQ0FBQ3BJLElBQUcsR0FBSXFSLElBQUl2UyxRQUF6S2k4QixDQUFpTHQ3QixNQUFNeTdCLEdBQUc3TCxHQUFHLENBQUM4TCxZQUFZLFNBQVNqOEIsRUFBRWMsUUFBRyxJQUFTQSxJQUFJQSxHQUFHLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsU0FBUyxjQUFjLElBQUksSUFBSWMsSUFBSUEsRUFBRVAsRUFBRWdNLEtBQUssR0FBR3pMLElBQUlQLEVBQUVnTSxLQUFLLEVBQUUsTUFBTTlJLE1BQU0sZ0ZBQWdGbEQsRUFBRWdNLEtBQUssaUJBQWlCekwsR0FBRyxPQUFPKzZCLElBQUcsU0FBUzc3QixFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUU2RSxJQUFJL0QsR0FBRSxHQUFJdkIsRUFBRVMsRUFBRStSLElBQUluUyxHQUFHeUIsRUFBRTlCLEVBQUVzUSxVQUFVa0MsSUFBSXhTLEVBQUVrRyxNQUFNeUQsSUFBSXBJLEdBQUUsR0FBSTZMLE9BQU8sT0FBT3BNLEVBQUUsQ0FBQ2MsSUFBSSxDQUFDdEIsTUFBTXNCLEVBQUVzZSxTQUFTLFNBQVMzZixFQUFFTyxHQUFHLElBQUlYLEVBQUVXLEVBQUUsR0FBR2tGLE1BQU0sT0FBT3pGLEVBQUUrUixJQUFJL1IsRUFBRWtKLElBQUlwSSxHQUFFLEdBQUlxUixJQUFJdlMsUUFBckxpOEIsQ0FBNkx0N0IsTUFBTTI3QixHQUFHLFdBQVcsU0FBU2w4QixFQUFFQSxFQUFFYyxHQUFHSSxLQUFLNmMsUUFBUS9kLEVBQUVrQixLQUFLaTdCLFVBQVVyN0IsRUFBRUksS0FBS2dMLEtBQUssSUFBSThPLFFBQVEsT0FBT2hiLEVBQUVVLFVBQVVmLElBQUksU0FBU0ssR0FBRyxPQUFPa0IsS0FBS2dMLEtBQUswTixJQUFJNVosSUFBSWtCLEtBQUtpN0IsVUFBVS9lLFNBQVNsYyxLQUFLNmMsUUFBUS9kLEdBQUdrQixLQUFLZ0wsS0FBS3ZNLElBQUlLLElBQUlBLEVBQUVVLFVBQVV5QyxJQUFJLFNBQVNuRCxFQUFFYyxHQUFHSSxLQUFLZ0wsS0FBSy9JLElBQUluRCxFQUFFYyxJQUFJZCxFQUFFVSxVQUFVa1osSUFBSSxTQUFTNVosR0FBRyxPQUFPa0IsS0FBS2dMLEtBQUswTixJQUFJNVosSUFBSUEsRUFBRVUsVUFBVXFlLE9BQU8sU0FBUy9lLEdBQUcsT0FBT2tCLEtBQUtnTCxLQUFLNlMsT0FBTy9lLElBQUlBLEVBQXpXLEdBQThXbzhCLEdBQUcsV0FBVyxTQUFTcDhCLEtBQUssT0FBT0EsRUFBRVUsVUFBVXVMLEtBQUssU0FBU2pNLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx5QkFBeUJ6RCxFQUFFVSxVQUFVNk8sS0FBSyxTQUFTdlAsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHlCQUF5QnpELEVBQUVVLFVBQVU4TyxTQUFTLFNBQVN4UCxHQUFHLE1BQU0sSUFBSXlELE1BQU0seUJBQXlCekQsRUFBRVUsVUFBVW9lLFlBQVksU0FBUzllLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx5QkFBeUJ6RCxFQUFFVSxVQUFVNk4sTUFBTSxTQUFTdk8sRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHlCQUF5QnpELEVBQUVVLFVBQVVrZixXQUFXLFNBQVM1ZixFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0seUJBQXlCekQsRUFBRVUsVUFBVWtlLFNBQVMsU0FBUzVlLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx5QkFBeUJ6RCxFQUFFVSxVQUFVdWUsT0FBTyxXQUFXLE1BQU0sSUFBSXhiLE1BQU0seUJBQXlCekQsRUFBRVUsVUFBVTI3QixlQUFlLFdBQVcsTUFBTSxJQUFJNTRCLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTQ3QixRQUFRLFdBQVcsT0FBTyxLQUFLcDdCLEtBQUttN0IsaUJBQWlCLEtBQUssTUFBTXI4QixFQUFFVSxVQUFVNjdCLFlBQVksU0FBU3Y4QixFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLE1BQU0sSUFBSTZELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTg3QixpQkFBaUIsU0FBU3g4QixHQUFrRixNQUEvRUEsRUFBRXFCLEVBQUVyQixFQUFFdUYsRUFBRXZGLEVBQUV5OEIsV0FBV3o4QixFQUFFMDhCLFdBQVcxOEIsRUFBRTI4QixLQUFLMzhCLEVBQUU0OEIsV0FBVzU4QixFQUFFNjhCLHVCQUE2QixJQUFJcDVCLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXdGLE1BQU0sU0FBU2xHLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVOFcsYUFBYSxTQUFTeFgsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxNQUFNLElBQUk2RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV1USxRQUFRLFNBQVNqUixFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXFRLFFBQVEsU0FBUy9RLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVMkYsT0FBTyxTQUFTckcsRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV3VCxJQUFJLFNBQVNsVSxHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWtSLElBQUksU0FBUzVSLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVbzhCLEtBQUssU0FBUzk4QixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXE4QixTQUFTLFNBQVMvOEIsRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVzOEIsU0FBUyxTQUFTaDlCLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVdThCLFdBQVcsU0FBU2o5QixFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTRSLFNBQVMsU0FBU3RTLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVd0ksSUFBSSxTQUFTbEosRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVU4USxLQUFLLFNBQVN4UixFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTBXLG1CQUFtQixTQUFTcFgsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVnUixPQUFPLFNBQVMxUixFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWlSLE9BQU8sU0FBUzNSLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVMlMsTUFBTSxTQUFTclQsRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV1UyxTQUFTLFNBQVNqVCxFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXlTLEtBQUssU0FBU25ULEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVNlMsVUFBVSxTQUFTdlQsRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVUrUyxRQUFRLFNBQVN6VCxFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWlULGFBQWEsU0FBUzNULEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVcVQsV0FBVyxTQUFTL1QsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVtVCxXQUFXLFNBQVM3VCxFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVW9ULFVBQVUsU0FBUzlULEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVdVQsTUFBTSxTQUFTalUsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV3OEIsT0FBTyxTQUFTbDlCLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVNlcsS0FBSyxTQUFTdlgsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVvRSxJQUFJLFNBQVM5RSxFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVThSLFFBQVEsU0FBU3hTLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVa1MsSUFBSSxTQUFTNVMsRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVtRSxJQUFJLFNBQVM3RSxFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWdTLFFBQVEsU0FBUzFTLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVMlEsSUFBSSxTQUFTclIsRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVU0USxJQUFJLFNBQVN0UixFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVW9TLGtCQUFrQixTQUFTOVMsRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVpRixLQUFLLFNBQVMzRixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVStNLE1BQU0sU0FBU3pOLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVc0gsTUFBTSxTQUFTaEksR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV5VCxLQUFLLFNBQVNuVSxHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXVHLE1BQU0sU0FBU2pILEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVMFQsTUFBTSxTQUFTcFUsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV3RyxTQUFTLFNBQVNsSCxHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXVSLElBQUksU0FBU2pTLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVK0UsSUFBSSxTQUFTekYsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVUyVCxNQUFNLFNBQVNyVSxHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWlNLElBQUksU0FBUzNNLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVNFQsTUFBTSxTQUFTdFUsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVrRixLQUFLLFNBQVM1RixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTZULE1BQU0sU0FBU3ZVLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVOFQsT0FBTyxTQUFTeFUsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVUrVCxXQUFXLFNBQVN6VSxHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWtVLEtBQUssU0FBUzVVLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVc1UsTUFBTSxTQUFTaFYsRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVtVSxJQUFJLFNBQVM3VSxHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXk4QixPQUFPLFNBQVNuOUIsRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVvVSxLQUFLLFNBQVM5VSxHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTA4QixJQUFJLFNBQVNwOUIsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVUyOEIsS0FBSyxTQUFTcjlCLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVZ1UsSUFBSSxTQUFTMVUsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVU0OEIsV0FBVyxTQUFTdDlCLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVdVUsUUFBUSxTQUFTalYsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV5VSxTQUFTLFNBQVNuVixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTRVLElBQUksU0FBU3RWLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVNlUsSUFBSSxTQUFTdlYsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVU4VSxJQUFJLFNBQVN4VixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVStVLEtBQUssU0FBU3pWLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVZ1YsS0FBSyxTQUFTMVYsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVpVixLQUFLLFNBQVMzVixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVW9SLE1BQU0sU0FBUzlSLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVa1YsS0FBSyxTQUFTNVYsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVtVixLQUFLLFNBQVM3VixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVThFLEtBQUssU0FBU3hGLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVb1YsTUFBTSxTQUFTOVYsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVxVixNQUFNLFNBQVMvVixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXNWLE1BQU0sU0FBU2hXLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVdVYsSUFBSSxTQUFTalcsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV3VixLQUFLLFNBQVNsVyxFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTY4QixZQUFZLFNBQVN2OUIsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsTUFBTSxJQUFJb0MsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVK1YsT0FBTyxTQUFTelcsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVU4OEIsZUFBZSxTQUFTeDlCLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVKzhCLGdCQUFnQixTQUFTejlCLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVaVcsZ0JBQWdCLFNBQVMzVyxFQUFFYyxFQUFFUCxHQUFHLE1BQU0sSUFBSWtELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWc5Qix3QkFBd0IsU0FBUzE5QixFQUFFYyxFQUFFUCxHQUFHLE1BQU0sSUFBSWtELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWk5Qix5QkFBeUIsU0FBUzM5QixFQUFFYyxFQUFFUCxHQUFHLE1BQU0sSUFBSWtELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWs5QixPQUFPLFNBQVM1OUIsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVtOUIsZUFBZSxTQUFTNzlCLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVbzlCLGdCQUFnQixTQUFTOTlCLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVcVcsUUFBUSxTQUFTL1csRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVxOUIsZ0JBQWdCLFNBQVMvOUIsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxNQUFNLElBQUk2RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVvVyxRQUFRLFNBQVM5VyxFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXM5QixnQkFBZ0IsU0FBU2grQixFQUFFYyxFQUFFUCxHQUFHLE1BQU0sSUFBSWtELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXU5QixVQUFVLFNBQVNqK0IsRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV3OUIsa0JBQWtCLFNBQVNsK0IsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV5OUIsVUFBVSxTQUFTbitCLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVMDlCLGtCQUFrQixTQUFTcCtCLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsTUFBTSxJQUFJNkQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVaU8sUUFBUSxTQUFTM08sRUFBRWMsR0FBRyxNQUFNLElBQUkyQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV1TyxLQUFLLFNBQVNqUCxFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWdRLEtBQUssU0FBUzFRLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVd1EsSUFBSSxTQUFTbFIsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVzUyxVQUFVLFNBQVNoVCxFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWlRLE9BQU8sU0FBUzNRLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVMjlCLFNBQVMsU0FBU3IrQixFQUFFYyxHQUFHLE1BQU0sSUFBSTJDLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTQ5QixVQUFVLFNBQVN0K0IsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVUyVyxlQUFlLFNBQVNyWCxFQUFFYyxFQUFFUCxHQUFHLE1BQU0sSUFBSWtELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTRXLGVBQWUsU0FBU3RYLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVMlYsZUFBZSxTQUFTclcsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxNQUFNLElBQUk2RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVU2OUIsdUJBQXVCLFNBQVN2K0IsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVU2VixzQkFBc0IsU0FBU3ZXLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsTUFBTSxJQUFJNkQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVODlCLDhCQUE4QixTQUFTeCtCLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVeVEsbUJBQW1CLFNBQVNuUixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxNQUFNLElBQUlvQyxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVUrOUIsNkJBQTZCLFNBQVN6K0IsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxNQUFNLElBQUlrRSxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVnK0IsUUFBUSxTQUFTMStCLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsR0FBRyxNQUFNLElBQUkyRSxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVrM0IsWUFBWSxTQUFTNTNCLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsTUFBTSxJQUFJNkQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVNFAsT0FBTyxTQUFTdFEsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxNQUFNLElBQUk2RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVV5UCxPQUFPLFNBQVNuUSxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLE1BQU0sSUFBSTZELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWkrQixrQkFBa0IsU0FBUzMrQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLE1BQU0sSUFBSWtFLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVWdYLElBQUksU0FBUzFYLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVa1gsS0FBSyxTQUFTNVgsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVnd0IsUUFBUSxTQUFTMXdCLEVBQUVjLEdBQUcsTUFBTSxJQUFJMkMsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVcXdCLEtBQUssU0FBUy93QixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXl3QixLQUFLLFNBQVNueEIsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVrK0IsY0FBYyxTQUFTNStCLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixHQUFHLE1BQU0sSUFBSW9DLE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVStXLGFBQWEsU0FBU3pYLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVc0QsTUFBTSxTQUFTaEUsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVtK0IsY0FBYyxTQUFTNytCLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsTUFBTSxJQUFJNkQsTUFBTSx3QkFBd0J6RCxFQUFFVSxVQUFVbytCLEtBQUssU0FBUzkrQixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVTZQLEtBQUssU0FBU3ZRLEVBQUVjLEVBQUVQLEdBQUcsTUFBTSxJQUFJa0QsTUFBTSx5QkFBeUJ6RCxFQUFFVSxVQUFVMlUsU0FBUyxTQUFTclYsR0FBRyxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVUwVSxVQUFVLFNBQVNwVixHQUFHLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCekQsRUFBRVUsVUFBVXV4QixTQUFTLFNBQVNqeUIsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLHdCQUF3QnpELEVBQUVVLFVBQVVnUCxRQUFRLFdBQVcsTUFBTSxJQUFJak0sTUFBTSx3QkFBd0J6RCxFQUE3d1YsR0FBa3hWLFNBQVMrK0IsR0FBRy8rQixFQUFFYyxHQUFHLElBQUksSUFBSVAsRUFBRVAsRUFBRW9DLE9BQU94QyxFQUFFLEdBQUdMLEVBQUUsRUFBRUEsRUFBRWdCLEVBQUVoQixJQUFJLENBQUMsSUFBSThCLEVBQUVkLEVBQUUsRUFBRWhCLEVBQUVULEVBQUVrQixFQUFFcUIsSUFBSSxHQUFHUCxFQUFFQSxFQUFFc0IsT0FBTyxFQUFFN0MsSUFBSSxHQUFHLEdBQUcsSUFBSVQsR0FBR2MsRUFBRW8vQixRQUFRMzlCLEdBQUcsT0FBT3pCLEVBQUUsU0FBU3EvQixHQUFHai9CLEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxFQUFFLEdBQUdYLEVBQUUsRUFBRUEsRUFBRWtCLEVBQUVzQixPQUFPeEMsSUFBSSxDQUFDLElBQUlMLEVBQUVTLEVBQUVBLEVBQUVvQyxPQUFPeEMsRUFBRSxHQUFHeUIsRUFBRVAsRUFBRXNCLE9BQU94QyxFQUFFLEVBQUVkLEVBQUVnQyxFQUFFTyxJQUFJLE1BQU05QixHQUFHLElBQUlBLEdBQUdULEVBQUUsSUFBSXlCLEVBQUV5K0IsUUFBUTM5QixHQUFHLE9BQU9kLEVBQUUsU0FBUzIrQixHQUFHbC9CLEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxFQUFFLEdBQUdYLEVBQUUrRSxLQUFLRSxJQUFJN0UsRUFBRW9DLE9BQU90QixFQUFFc0IsUUFBUTdDLEVBQUUsRUFBRUEsRUFBRUssRUFBRUwsSUFBSSxDQUFDLElBQUk4QixFQUFFckIsRUFBRUEsRUFBRW9DLE9BQU83QyxFQUFFLEdBQUcsTUFBTThCLElBQUlBLEVBQUUsR0FBRyxJQUFJdkMsRUFBRWdDLEVBQUVBLEVBQUVzQixPQUFPN0MsRUFBRSxHQUFHLEdBQUcsTUFBTVQsSUFBSUEsRUFBRSxHQUFHLElBQUl1QyxFQUFFZCxFQUFFeStCLFFBQVFsZ0MsUUFBUSxHQUFHLElBQUlBLEVBQUV5QixFQUFFeStCLFFBQVEzOUIsT0FBTyxDQUFDLEdBQUdBLElBQUl2QyxFQUFFLE1BQU0yRSxNQUFNLHdEQUF3RHpELEVBQUUsUUFBUWMsRUFBRSxLQUFLUCxFQUFFeStCLFFBQVEzOUIsSUFBSSxPQUFPZCxFQUFFLFNBQVM0K0IsR0FBR24vQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsRUFBRXZDLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxnQkFBZ0IsSUFBSStCLEVBQUVTLEVBQUU4OUIsR0FBR3QrQixHQUFHL0IsRUFBRXVDLEVBQUUsR0FBR25DLEVBQUVtQyxFQUFFLEdBQUcsR0FBRyxpQkFBaUJ4QyxFQUFFK0IsRUFBRSxDQUFDOUIsRUFBRUksRUFBRWEsRUFBRSxHQUFHQSxFQUFFLFFBQVEsQ0FBQyxHQUFHLGtCQUFrQmxCLEVBQUUsTUFBTSxJQUFJMkUsTUFBTSxzQkFBc0IzRSxHQUFHK0IsRUFBRSxDQUFDOUIsRUFBRUksRUFBRWEsRUFBRSxHQUFHQSxFQUFFLElBQUksT0FBT3EvQixHQUFHci9CLEVBQUVhLEVBQUVOLEVBQUVYLEVBQUVMLEVBQUU4QixHQUFFLEVBQUd2QyxHQUFHLFNBQVN3Z0MsR0FBR3QvQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsRUFBRXZDLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxTQUFTLElBQUkrQixFQUFFUyxFQUFFdkMsRUFBRXdnQyxHQUFHeitCLEdBQUczQixFQUFFSixFQUFFLEdBQUdnRyxFQUFFaEcsRUFBRSxHQUFHNkIsRUFBRTdCLEVBQUUsR0FBRyxHQUFHLFVBQVVELEVBQUV3QyxFQUFFLGVBQWVULEVBQUUsQ0FBQzFCLEVBQUU0RixFQUFFbkUsRUFBRVosRUFBRSxHQUFHQSxFQUFFLFFBQVEsQ0FBQyxHQUFHLFVBQVVsQixFQUFFLE1BQU0sSUFBSTJFLE1BQU0sc0JBQXNCM0UsR0FBR3dDLEVBQUUsZ0JBQWdCVCxFQUFFLENBQUMxQixFQUFFNEYsRUFBRW5FLEVBQUVaLEVBQUUsR0FBR0EsRUFBRSxJQUFJLE9BQU93L0IsR0FBR3gvQixFQUFFYSxFQUFFTixFQUFFWCxFQUFFTCxHQUFFLEVBQUcrQixFQUFFRCxHQUFHLFNBQVNnK0IsR0FBR3IvQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsRUFBRXZDLEVBQUUrQixRQUFHLElBQVMvQixJQUFJQSxHQUFFLFFBQUksSUFBUytCLElBQUlBLEVBQUUsZ0JBQWdCLElBQUlTLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHdkMsRUFBRXVDLEVBQUUsR0FBR25DLEVBQUVtQyxFQUFFLEdBQUd5RCxFQUFFekQsRUFBRSxHQUFHVixFQUFFVSxFQUFFLEdBQUcsR0FBRyxpQkFBaUJULEVBQUU5QixFQUFFaUIsRUFBRSxHQUFHYixFQUFFYSxFQUFFLEdBQUcrRSxFQUFFL0UsRUFBRSxHQUFHWSxFQUFFWixFQUFFLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQmEsRUFBRSxNQUFNLElBQUk0QyxNQUFNLHNCQUFzQjVDLEdBQUc5QixFQUFFaUIsRUFBRSxHQUFHWSxFQUFFWixFQUFFLEdBQUdiLEVBQUVhLEVBQUUsR0FBRytFLEVBQUUvRSxFQUFFLEdBQUcsSUFBSVosRUFBRThGLEVBQUVwRSxFQUFFLEdBQUc1QixFQUFFNEIsRUFBRSxHQUFHdUUsRUFBRXZFLEVBQUUsR0FBR21FLEVBQUVtNkIsR0FBRzcrQixHQUFHZ0YsRUFBRU4sRUFBRSxHQUFHUyxFQUFFVCxFQUFFLEdBQUdZLEVBQUV1NUIsR0FBR3gvQixHQUFHbUcsRUFBRUYsRUFBRSxHQUFHSSxFQUFFSixFQUFFLEdBQUdNLEVBQUVzNUIsR0FBR3Y2QixFQUFFYSxHQUFHUSxFQUFFazVCLEdBQUd2Z0MsRUFBRStHLEdBQUdVLEVBQUUsU0FBUzNHLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsRUFBRStCLEdBQUcsSUFBSVMsRUFBRXZDLEVBQUVJLEVBQUUsR0FBRyxpQkFBaUJhLEVBQUUsQ0FBOEJzQixFQUFFLENBQUNvK0IsSUFBSTEvQixFQUFFMi9CLE9BQU8zL0IsRUFBRTQvQixLQUFLNS9CLEVBQUU2L0IsTUFBTTcvQixFQUFFOC9CLEtBQXhELElBQUk5L0IsRUFBRSxRQUFRLFVBQWtELElBQUlZLEVBQUUsU0FBU1osRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxNQUFNSyxJQUFJQSxFQUFFbWdDLEdBQUcvL0IsRUFBRWMsRUFBRVAsSUFBSSxJQUFXekIsRUFBRWtCLEVBQUUsR0FBR2EsRUFBRW0vQixJQUFkaGdDLEVBQUUsR0FBa0JjLEVBQUUsRUFBRWxCLEdBQUdXLEVBQUUsRUFBRWhCLEdBQUd5RixFQUFFTSxFQUFFekUsSUFBRyxXQUFXLE1BQU0seUJBQXlCQSxFQUFFLHdFQUF1RSxJQUFJUyxFQUFFMCtCLElBQUlsaEMsRUFBRWdDLEVBQUUsRUFBRWxCLEdBQUdXLEVBQUUsRUFBRWhCLEdBQUcsT0FBT3lGLEVBQUVNLEVBQUVoRSxJQUFHLFdBQVcsTUFBTSw0QkFBNEJBLEVBQUUsd0VBQXVFLENBQUNULEVBQUVTLEdBQTlXLENBQWtYLENBQUNSLEVBQUVQLEdBQUdjLEVBQUV6QixFQUFFSSxFQUFFYSxHQUFHOUIsRUFBRTZCLEVBQUUsR0FBR3pCLEVBQUV5QixFQUFFLFFBQVEsR0FBRyxTQUFTWixFQUFFLENBQUNqQixFQUFFNEYsS0FBS2dCLEtBQUs3RSxFQUFFbEIsR0FBR1QsRUFBRXdGLEtBQUtnQixLQUFLcEYsRUFBRWhCLEdBQUcsSUFBSUgsRUFBRXVGLEtBQUtFLElBQUksR0FBRzlGLEVBQUUsR0FBR2EsRUFBRXlCLEVBQUVQLEdBQUdvRSxFQUFFUCxLQUFLRSxJQUFJLEdBQUcxRixFQUFFLEdBQUdJLEVBQUVULEVBQUV5QixHQUFHckIsRUFBRXlGLEtBQUs4SSxNQUFNck8sRUFBRSxHQUFHaUcsRUFBRWpHLEVBQUVGLEVBQUUrRixFQUFFTixLQUFLOEksTUFBTXZJLEVBQUUsR0FBUzVELEVBQUUsQ0FBQ28rQixJQUFJeGdDLEVBQUV5Z0MsT0FBT3Q2QixFQUFFdTZCLEtBQUszNkIsRUFBRTQ2QixNQUE3QjM2QixFQUFFRCxFQUFtQzY2QixLQUFLLFlBQVksQ0FBQyxHQUFHLFVBQVU5L0IsRUFBRSxNQUFNeUQsTUFBTSw4QkFBOEJ6RCxHQUFHc0IsRUFBRSxDQUFDbytCLElBQUksRUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQUVDLE1BQU0sRUFBRUMsS0FBSyxTQUFTL2dDLEVBQUU0RixLQUFLZ0IsTUFBTTdFLEVBQUVPLEVBQUUsR0FBR3pCLEdBQUdULEVBQUV3RixLQUFLZ0IsTUFBTXBGLEVBQUV6QixFQUFFLEdBQUdTLEdBQUcsTUFBTSxDQUFDMGdDLFFBQVEzK0IsRUFBRTQrQixVQUFVbmhDLEVBQUVvaEMsU0FBU2hoQyxHQUF0NkIsQ0FBMDZCSSxFQUFFSixFQUFFNEYsRUFBRVEsRUFBRUcsRUFBRVMsRUFBRUksRUFBRWxGLEdBQUcwRixFQUFFSixFQUFFczVCLFFBQVFqNUIsRUFBRUwsRUFBRXU1QixVQUFVLzRCLEVBQUVSLEVBQUV3NUIsU0FBUy80QixFQUFFdEksRUFBRXVHLEVBQUV6RSxFQUFFeUUsRUFBRSxNQUFNLGtCQUFrQnhFLEVBQUV6QixFQUFFLENBQUNMLEVBQUVxSSxFQUFFSixFQUFFRyxHQUFHLGlCQUFpQnRHLElBQUl6QixFQUFFLENBQUNMLEVBQUVpSSxFQUFFRyxFQUFFQyxJQUFJLENBQUNnNUIsVUFBVXJoQyxFQUFFc2hDLFdBQVd4L0IsRUFBRXkvQixTQUFTbmhDLEVBQUVvaEMsUUFBUXg3QixFQUFFeTdCLFdBQVc1L0IsRUFBRXMvQixVQUFVbDVCLEVBQUVtNUIsU0FBU2g1QixFQUFFczVCLFlBQVlyNUIsRUFBRTY0QixRQUFRbDVCLEVBQUUyNUIsYUFBYW43QixFQUFFbzdCLFlBQVlqN0IsRUFBRWs3QixhQUFhMTdCLEVBQUUyN0IsWUFBWTNoQyxFQUFFNGhDLHNCQUFzQjM2QixFQUFFNDZCLHFCQUFxQng2QixFQUFFeTZCLGVBQWVqN0IsRUFBRWs3QixjQUFjaDdCLEVBQUVpN0IsUUFBUWxoQyxFQUFFbWhDLFNBQVMvaEMsRUFBRWdpQyxZQUFZdGdDLEdBQUcsU0FBUzArQixHQUFHeC9CLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsRUFBRStCLFFBQUcsSUFBU1EsSUFBSUEsR0FBRSxRQUFJLElBQVN2QyxJQUFJQSxFQUFFLGdCQUFnQixJQUFJd0MsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsR0FBR3ZDLEVBQUV1QyxFQUFFLEdBQUduQyxFQUFFbUMsRUFBRSxHQUFHeUQsRUFBRXpELEVBQUUsR0FBR1YsRUFBRVUsRUFBRSxHQUFHbEMsRUFBRWtDLEVBQUUsR0FBRyxHQUFHLGlCQUFpQnhDLEVBQUVDLEVBQUVpQixFQUFFLEdBQUdiLEVBQUVhLEVBQUUsR0FBRytFLEVBQUUvRSxFQUFFLEdBQUdZLEVBQUVaLEVBQUUsR0FBR1osRUFBRVksRUFBRSxPQUFPLENBQUMsR0FBRyxrQkFBa0JsQixFQUFFLE1BQU0sSUFBSTJFLE1BQU0sc0JBQXNCM0UsR0FBR0MsRUFBRWlCLEVBQUUsR0FBR1osRUFBRVksRUFBRSxHQUFHYixFQUFFYSxFQUFFLEdBQUcrRSxFQUFFL0UsRUFBRSxHQUFHWSxFQUFFWixFQUFFLEdBQUcsSUFBSWtGLEVBQUVoRyxFQUFFNEIsRUFBRSxHQUFHdUUsRUFBRXZFLEVBQUUsR0FBR21FLEVBQUVuRSxFQUFFLEdBQUd5RSxFQUFFekUsRUFBRSxHQUFHNEUsRUFBRTY1QixHQUFHaC9CLEdBQUdzRixFQUFFSCxFQUFFLEdBQUdLLEVBQUVMLEVBQUUsR0FBR08sRUFBRVAsRUFBRSxHQUFHUyxFQUFFbzVCLEdBQUczL0IsR0FBRzJHLEVBQUVKLEVBQUUsR0FBR1EsRUFBRVIsRUFBRSxHQUFHWSxFQUFFWixFQUFFLEdBQUdhLEVBQUV5NEIsR0FBR3ZnQyxFQUFFcUgsR0FBR1ksRUFBRXM0QixHQUFHcDZCLEVBQUVzQixHQUFHUyxFQUFFcTRCLEdBQUd4NkIsRUFBRThCLEdBQUczQixFQUFFLFNBQVNwRixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsRUFBRXZDLEVBQUUrQixFQUFFUyxFQUFFdkMsRUFBRUksR0FBRyxJQUFJNEYsRUFBRW5FLEVBQUV4QixFQUFFOEYsRUFBRSxHQUFHLGlCQUFpQmxGLEVBQUUsQ0FBOEIrRSxFQUFFLENBQUMyNkIsSUFBSTEvQixFQUFFMi9CLE9BQU8zL0IsRUFBRTQvQixLQUFLNS9CLEVBQUU2L0IsTUFBTTcvQixFQUFFcWhDLE1BQU1yaEMsRUFBRXNoQyxLQUFLdGhDLEVBQUU4L0IsS0FBdkUsSUFBSTkvQixFQUFFLFFBQVEsVUFBaUUsSUFBSXFGLEVBQUUsU0FBU3JGLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixHQUFHLE1BQU05QixJQUFJQSxFQUFFd2dDLEdBQUcvL0IsRUFBRWMsRUFBRWxCLElBQUksSUFBV2lCLEVBQUViLEVBQUUsR0FBR3NCLEVBQUV0QixFQUFFLEdBQUdqQixFQUFFaWhDLElBQXJCaGdDLEVBQUUsR0FBeUJjLEVBQUUsRUFBRXZCLEdBQUdLLEVBQUUsRUFBRXlCLEdBQUcyRCxFQUFFTSxFQUFFdkcsSUFBRyxXQUFXLE1BQU0sMkJBQTJCQSxFQUFFLHdFQUF1RSxJQUFJSSxFQUFFNmdDLElBQUluL0IsRUFBRUMsRUFBRSxFQUFFdkIsR0FBR0ssRUFBRSxFQUFFeUIsR0FBRzJELEVBQUVNLEVBQUVuRyxJQUFHLFdBQVcsTUFBTSx5QkFBeUJBLEVBQUUsd0VBQXVFLElBQUk0RixFQUFFaTdCLElBQUkxK0IsRUFBRVIsRUFBRSxFQUFFdkIsR0FBR0ssRUFBRSxFQUFFeUIsR0FBRyxPQUFPMkQsRUFBRU0sRUFBRVAsSUFBRyxXQUFXLE1BQU0sNEJBQTRCQSxFQUFFLHdFQUF1RSxDQUFDaEcsRUFBRUksRUFBRTRGLEVBQWtCLEdBQWppQixDQUFxaEIsQ0FBQ2pFLEVBQUVQLEVBQUVYLEVBQUUsR0FBR2lCLEVBQUUsRUFBRXRCLEVBQUVTLEVBQUViLEdBQUd5QixFQUFFeUUsRUFBRSxHQUFHakcsRUFBRWlHLEVBQUUsR0FBR0gsRUFBRUcsRUFBRSxRQUFRLEdBQUcsU0FBU3JGLEVBQUUsQ0FBb0QsSUFBSWlGLElBQXZEckUsRUFBRStELEtBQUtnQixLQUFLN0UsRUFBRXZCLElBQThDLEdBQUdBLEVBQUVzQixFQUFFQyxFQUFFeUUsSUFBcERuRyxFQUFFdUYsS0FBS2dCLEtBQUtwRixFQUFFYyxJQUEyQyxHQUFHQSxFQUFFQyxFQUFFZixFQUFFbUYsSUFBakRSLEVBQUVQLEtBQUtnQixLQUFLL0YsRUFBRWQsSUFBd0MsR0FBR0EsRUFBRUMsRUFBRWEsRUFBRWlHLEVBQUVsQixLQUFLOEksTUFBTXhJLEVBQUUsR0FBR2MsRUFBRWQsRUFBRVksRUFBRUksRUFBRXRCLEtBQUs4SSxNQUFNbEksRUFBRSxHQUFHWSxFQUFFWixFQUFFVSxFQUFFTSxFQUFFNUIsS0FBSzhJLE1BQU0vSCxFQUFFLEdBQVNYLEVBQUUsQ0FBQzI2QixJQUFJejVCLEVBQUUwNUIsT0FBT3g1QixFQUFFeTVCLEtBQUtyNUIsRUFBRXM1QixNQUE3Qm42QixFQUFFYSxFQUFtQzg2QixNQUFNeDdCLEVBQUV5N0IsS0FBS3Y3QixFQUFFKzVCLEtBQUssWUFBWSxDQUFDLEdBQUcsVUFBVTkvQixFQUFFLE1BQU15RCxNQUFNLDhCQUE4QnpELEdBQUcrRSxFQUFFLENBQUMyNkIsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsTUFBTSxFQUFFd0IsTUFBTSxFQUFFQyxLQUFLLEVBQUV4QixLQUFLLFNBQVNsL0IsRUFBRStELEtBQUtnQixNQUFNN0UsRUFBRUQsRUFBRSxHQUFHdEIsR0FBR0gsRUFBRXVGLEtBQUtnQixNQUFNcEYsRUFBRWUsRUFBRSxHQUFHRCxHQUFHNkQsRUFBRVAsS0FBS2dCLE1BQU0vRixFQUFFYixFQUFFLEdBQUdELEdBQUcsTUFBTSxDQUFDbWhDLFFBQVFsN0IsRUFBRXc4QixTQUFTM2dDLEVBQUVzL0IsVUFBVTlnQyxFQUFFK2dDLFNBQVNqN0IsR0FBNXNDLENBQWd0QzNGLEVBQUVKLEVBQUU0RixFQUFFbkUsRUFBRWlGLEVBQUVFLEVBQUVFLEVBQUVlLEVBQUVHLEVBQUVDLEVBQUV2RyxHQUFHd0csRUFBRWpDLEVBQUU2NkIsUUFBUTM0QixFQUFFbEMsRUFBRW04QixTQUFTaDZCLEVBQUVuQyxFQUFFODZCLFVBQVV6NEIsRUFBRXJDLEVBQUUrNkIsU0FBU3o0QixFQUFFckcsRUFBRWtFLEVBQUVuRyxFQUFFbUcsRUFBRSxNQUFNLGtCQUFrQnpHLEVBQUVvRyxFQUFFLENBQUNuRyxFQUFFMkksRUFBRUosRUFBRUMsRUFBRUUsR0FBRyxpQkFBaUIzSSxJQUFJb0csRUFBRSxDQUFDbkcsRUFBRXVJLEVBQUVDLEVBQUVFLEVBQUVDLElBQUksQ0FBQzA0QixVQUFVcmhDLEVBQUVzaEMsV0FBV3ZoQyxFQUFFMGlDLFFBQVFyaUMsRUFBRW1oQyxTQUFTdjdCLEVBQUV3N0IsUUFBUTMvQixFQUFFNC9CLFdBQVdwaEMsRUFBRW1pQyxTQUFTajZCLEVBQUU0NEIsVUFBVTM0QixFQUFFNDRCLFNBQVMxNEIsRUFBRWc1QixZQUFZLzRCLEVBQUV1NEIsUUFBUTU0QixFQUFFbzZCLFlBQVk1N0IsRUFBRTY2QixhQUFhMzZCLEVBQUU0NkIsWUFBWTE2QixFQUFFeTdCLFlBQVl4aUMsRUFBRTBoQyxhQUFhdjdCLEVBQUV3N0IsWUFBWTU3QixFQUFFMDhCLHFCQUFxQjM2QixFQUFFODVCLHNCQUFzQjM1QixFQUFFNDVCLHFCQUFxQjM1QixFQUFFdzZCLGNBQWNyN0IsRUFBRXk2QixlQUFlcjZCLEVBQUVzNkIsY0FBY2w2QixFQUFFbTZCLFFBQVFsaEMsRUFBRW1oQyxTQUFTajhCLEVBQUVrOEIsWUFBWXRnQyxHQUFHLFNBQVNpL0IsR0FBRy8vQixFQUFFYyxFQUFFUCxFQUFFWCxRQUFHLElBQVNBLElBQUlBLEVBQUUsR0FBRyxJQUFJTCxFQUFFa2dDLEdBQUczK0IsRUFBRWxCLEdBQUcsT0FBTytFLEtBQUs4SSxPQUFPek4sRUFBRSxJQUFJTyxFQUFFLEdBQUdBLEVBQUVoQixHQUFHLEdBQUcsU0FBUzYvQixHQUFHcC9CLEdBQUcsTUFBTSxpQkFBaUJBLEVBQUUsQ0FBQ0EsRUFBRUEsRUFBRUEsR0FBRyxJQUFJQSxFQUFFb0MsT0FBTyxDQUFDcEMsRUFBRSxHQUFHQSxFQUFFLEdBQUcsR0FBR0EsRUFBRSxTQUFTdS9CLEdBQUd2L0IsR0FBRyxNQUFNLGlCQUFpQkEsRUFBRSxDQUFDQSxFQUFFQSxFQUFFQSxHQUFHQSxFQUFFLFNBQVN5L0IsR0FBR3ovQixFQUFFYyxHQUFHLE9BQU9BLEdBQUcsRUFBRWQsRUFBRUEsR0FBR0EsRUFBRSxJQUFJYyxFQUFFLEdBQUcsU0FBU2svQixHQUFHaGdDLEVBQUVjLEdBQUcsSUFBSUEsRUFBRSxPQUFPZCxFQUFFLE9BQU9jLEdBQUcsSUFBSSxRQUFRLE9BQU82RCxLQUFLcUQsTUFBTWhJLEdBQUcsSUFBSSxPQUFPLE9BQU8yRSxLQUFLZ0IsS0FBSzNGLEdBQUcsSUFBSSxRQUFRLE9BQU8yRSxLQUFLOEksTUFBTXpOLEdBQUcsUUFBUSxNQUFNLElBQUl5RCxNQUFNLHdCQUF3QjNDLElBQUksU0FBUytnQyxHQUFHN2hDLEdBQUcsSUFBSWMsRUFBRXMrQixHQUFHcC9CLEdBQUdPLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVrQixFQUFFLEdBQUd2QixFQUFFdUIsRUFBRSxHQUFHLE9BQU8sSUFBSVAsR0FBRyxJQUFJWCxHQUFHLElBQUlMLEVBQUUsU0FBU3VpQyxHQUFHOWhDLEVBQUVjLEdBQUcsT0FBTytnQyxHQUFHN2hDLElBQUk2aEMsR0FBRy9nQyxHQUFHLFNBQVNpaEMsR0FBRy9oQyxHQUFHLEdBQUcsU0FBU0EsRUFBRSxNQUFNLGVBQWUsR0FBRyxTQUFTQSxFQUFFLE1BQU0sZ0JBQWdCLE1BQU0sSUFBSXlELE1BQU0sc0JBQXNCekQsR0FBRyxTQUFTZ2lDLEdBQUdoaUMsRUFBRWMsRUFBRVAsR0FBRyxHQUFHLGNBQWNPLEVBQUUsQ0FBQyxHQUFHLGNBQWNkLEVBQUVtTSxNQUFNLE9BQU9uTSxFQUFFcVEsUUFBUSxJQUFJelEsRUFBRWt5QixHQUFHOXhCLEVBQUV5TSxPQUFPbE4sRUFBRVMsRUFBRTZQLFVBQVV4TyxFQUFFZCxFQUFFbXdCLFFBQVFueEIsRUFBRUssR0FBRyxPQUFPQSxFQUFFOFAsVUFBVW5RLEVBQUVtUSxVQUFVck8sRUFBRSxJQUFJK0YsRUFBRXBILEVBQUVtTSxNQUFNckwsR0FBRyxPQUFPNk0sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUN5QixPQUFPbE8sRUFBRWtPLFFBQVFwTixHQUFHLEdBQUcsY0FBY2QsRUFBRW1NLE1BQU0sQ0FBQyxJQUFJck4sRUFBRXlCLEVBQUV3d0IsS0FBSy93QixHQUFlLE9BQVpxQixFQUFFdkMsRUFBRW1RLEtBQUtuTyxHQUFVaEMsRUFBRTRRLFVBQVVyTyxFQUFFLEdBQUcsVUFBVVAsRUFBRSxPQUFPUCxFQUFFNjhCLElBQUlwOUIsR0FBRyxHQUFHLFNBQVNjLEVBQUUsQ0FBQyxJQUFJRCxFQUFFeXdCLEdBQUcsRUFBRXR4QixFQUFFbU0sT0FBeUIsT0FBbEI5SyxFQUFFZCxFQUFFMFMsU0FBU2pULEVBQUVhLEdBQVVBLEVBQUU2TyxVQUFVck8sRUFBRSxNQUFNLElBQUlvQyxNQUFNLGlDQUFpQ3pELEVBQUVtTSxNQUFNLE9BQU9yTCxHQUFHLFNBQVNtaEMsR0FBR2ppQyxFQUFFYyxHQUFHLE9BQU82TSxHQUFHQyxLQUFLOU0sRUFBRSxDQUFDb04sT0FBT2xPLEVBQUVrTyxRQUFRbE8sRUFBRW1NLE9BQU8sU0FBUysxQixHQUFHbGlDLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsR0FBR2tCLEVBQUVkLElBQUlPLEVBQUUsR0FBR2hCLEVBQUU2SSxFQUFFN0gsRUFBRSxXQUFXaEIsRUFBRSxHQUFHUyxFQUFFLElBQUksSUFBSXFCLEVBQUUsRUFBRUEsRUFBRTlCLEVBQUU2QyxPQUFPZixJQUFJOUIsRUFBRThCLEdBQUc5QixFQUFFOEIsRUFBRSxHQUFHekIsRUFBRSxPQUFPMnhCLEdBQUdoeUIsRUFBRSxXQUFXLElBQUk0aUMsR0FBRzNpQyxPQUFPK0UsT0FBTyxDQUFDNjlCLFdBQVdKLEdBQUdLLGNBQWNKLEdBQUdLLGFBQWFKLEdBQUdLLFdBQVdocEIsR0FBR2lwQixxQkFBcUIvUyxHQUFHZ1QsaUJBQWlCL1MsR0FBR2dULDBCQUEwQi9TLEdBQUdnVCxxQkFBcUIvUyxHQUFHZ1QsMkJBQTJCL1MsR0FBR2dULG1CQUFtQi9TLEdBQUdnVCx1QkFBdUIvUyxHQUFHZ1QsaUJBQWlCL1MsR0FBR2dULGlCQUFpQmpFLEdBQUdrRSxpQkFBaUJoRSxHQUFHaUUsMkJBQTJCaEUsR0FBR2lFLHVCQUF1QmxULEdBQUdtVCxnQkFBZ0JsVCxHQUFHbVQsa0JBQWtCbEUsR0FBR21FLGtCQUFrQmhFLEdBQUdpRSxrQkFBa0JsRSxHQUFHbUUsa0JBQWtCaEUsR0FBR2lFLGtCQUFrQjFELEdBQUcyRCxrQkFBa0I3QixHQUFHOEIsK0JBQStCN0IsR0FBRzhCLHdCQUF3QjdCLEtBQUssU0FBUzhCLEdBQUc3akMsRUFBRWMsR0FBRyxHQUFHZCxFQUFFb0MsU0FBU3RCLEVBQUVzQixPQUFPLE1BQU0sSUFBSXFCLE1BQU0sZ0VBQWdFekQsRUFBRW9DLE9BQU8sV0FBV3RCLEVBQUVzQixPQUFPLEtBQUssSUFBSSxJQUFJN0IsRUFBRSxJQUFJcUcsYUFBYSxFQUFFNUcsRUFBRW9DLFFBQVF4QyxFQUFFLEVBQUVBLEVBQUVXLEVBQUU2QixPQUFPeEMsR0FBRyxFQUFFVyxFQUFFWCxHQUFHSSxFQUFFSixFQUFFLEdBQUdXLEVBQUVYLEVBQUUsR0FBR2tCLEVBQUVsQixFQUFFLEdBQUcsT0FBT1csRUFBRSxTQUFTdWpDLEdBQUc5akMsRUFBRWMsR0FBRyxNQUFNLENBQUNpd0IsS0FBSy93QixFQUFFLEVBQUVjLEdBQUdxd0IsS0FBS254QixFQUFFLEVBQUVjLEVBQUUsSUFBSSxTQUFTaWpDLEdBQUcvakMsRUFBRWMsRUFBRVAsRUFBRVgsR0FBR0ksRUFBRSxFQUFFSixHQUFHa0IsRUFBRWQsRUFBRSxFQUFFSixFQUFFLEdBQUdXLEVBQUUsU0FBU3lqQyxHQUFHaGtDLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsR0FBR1csRUFBRSxHQUFHLEdBQUdvRSxLQUFLcy9CLElBQUlqa0MsRUFBRWMsR0FBRyxNQUFNLENBQUNpd0IsS0FBS3BzQixLQUFLNFEsSUFBSTNWLEdBQUd1eEIsS0FBS3hzQixLQUFLMlEsSUFBSTFWLElBQUksU0FBU3NrQyxHQUFHbGtDLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsSUFBSSxJQUFJOEIsRUFBRUosTUFBTXVQLEtBQUsxUCxHQUFHc0YsS0FBSSxTQUFTcEcsRUFBRWMsR0FBRyxNQUFNLENBQUNxakMsTUFBTW5rQyxFQUFFb2tDLFNBQVN0akMsTUFBSzR4QixRQUFPLFNBQVMxeUIsR0FBRyxPQUFPQSxFQUFFbWtDLE1BQU01a0MsS0FBSWlILE1BQUssU0FBU3hHLEVBQUVjLEdBQUcsT0FBT0EsRUFBRXFqQyxNQUFNbmtDLEVBQUVta0MsU0FBUXJsQyxFQUFFLEdBQUcrQixFQUFFLEVBQUVBLEVBQUVRLEVBQUVlLE9BQU92QixJQUFJLENBQUMsSUFBSVMsRUFBRUQsRUFBRVIsR0FBRzlCLEVBQUV1QyxFQUFFNmlDLE1BQU1obEMsRUFBRW1DLEVBQUU4aUMsU0FBUyxHQUFHcmxDLEVBQUVRLEVBQUUsTUFBTSxJQUFJLElBQUl3RixHQUFFLEVBQUduRSxFQUFFOUIsRUFBRXNELE9BQU8sRUFBRXhCLEdBQUcsSUFBSUEsRUFBRyxHQUFHeWpDLEdBQUdya0MsRUFBRWIsRUFBRUwsRUFBRThCLEtBQUtoQixFQUFFLENBQUNtRixHQUFFLEVBQUcsTUFBTyxJQUFJQSxJQUFJakcsRUFBRXVELEtBQUtsRCxHQUFHTCxFQUFFc0QsUUFBUTdCLEdBQUcsTUFBTSxPQUFPZ3hCLEdBQUd6eUIsRUFBRSxTQUFTLFNBQVN1bEMsR0FBR3JrQyxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUVJLEVBQUVza0MsU0FBUyxFQUFFeGpDLEVBQUUsRUFBRUEsRUFBRSxHQUFHdkIsRUFBRVMsRUFBRXNrQyxTQUFTLEVBQUUvakMsRUFBRSxFQUFFQSxFQUFFLEdBQUdjLEVBQUVzRCxLQUFLRyxJQUFJbEYsRUFBRSxHQUFHQSxFQUFFLElBQUlkLEVBQUU2RixLQUFLRyxJQUFJbEYsRUFBRSxHQUFHQSxFQUFFLElBQUlpQixFQUFFOEQsS0FBS0UsSUFBSWpGLEVBQUUsR0FBR0EsRUFBRSxJQUFJMEIsRUFBRXFELEtBQUtFLElBQUlqRixFQUFFLEdBQUdBLEVBQUUsSUFBSWIsRUFBRTRGLEtBQUtHLElBQUl2RixFQUFFLEdBQUdBLEVBQUUsSUFBSUosRUFBRXdGLEtBQUtHLElBQUl2RixFQUFFLEdBQUdBLEVBQUUsSUFBSXdGLEVBQUVKLEtBQUtFLElBQUl0RixFQUFFLEdBQUdBLEVBQUUsSUFBSXFCLEVBQUUrRCxLQUFLRSxJQUFJdEYsRUFBRSxHQUFHQSxFQUFFLElBQUl5RixHQUFHbkUsRUFBRVEsSUFBSUMsRUFBRXhDLEdBQUdNLEdBQUcyRixFQUFFaEcsSUFBSTZCLEVBQUV6QixHQUFHLEdBQUc2RixHQUFHLEdBQUc1RixHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUk4RixFQUFFUCxLQUFLRSxJQUFJeEQsRUFBRXRDLEdBQUdHLEVBQUV5RixLQUFLRSxJQUFJL0YsRUFBRUssR0FBR2tHLEVBQUVWLEtBQUtHLElBQUlqRSxFQUFFa0UsR0FBR0UsRUFBRU4sS0FBS0csSUFBSXhELEVBQUVWLEdBQUcwRSxFQUFFWCxLQUFLRSxJQUFJUSxFQUFFSCxFQUFFLEdBQUdQLEtBQUtFLElBQUlJLEVBQUUvRixFQUFFLEdBQUcsT0FBT29HLEdBQUdOLEVBQUU1RixFQUFFa0csR0FBRyxTQUFTaS9CLEdBQUd2a0MsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFLElBQUlxQixNQUFNakIsRUFBRXVNLE1BQU1nRSxLQUFLLEdBQUdoUixFQUFFUyxFQUFFeU0sTUFBTXZHLFFBQVEsT0FBT3BGLEVBQUVzRixLQUFJLFNBQVN0RixHQUFHdkIsRUFBRWdCLEdBQUdPLEVBQUUsSUFBSU8sRUFBRXJCLEVBQUVrRyxNQUFNdEcsRUFBRUwsR0FBRyxPQUFPSyxFQUFFVyxJQUFJTyxFQUFFTyxLQUFJLFNBQVNtakMsR0FBR3hrQyxFQUFFYyxHQUFHLElBQUksSUFBSVAsRUFBRSxJQUFJVSxNQUFNakIsRUFBRXVNLE1BQU0zTSxFQUFFLEVBQUVBLEVBQUVXLEVBQUU2QixPQUFPeEMsSUFBSVcsRUFBRVgsR0FBR0ksRUFBRXlNLE1BQU03TSxHQUFHa0IsRUFBRWxCLEdBQUcsSUFBSUwsRUFBRSsyQixHQUFHLzFCLEVBQUVQLEVBQUVtTSxPQUFPLElBQUl2TSxFQUFFLEVBQUVBLEVBQUVMLEVBQUU4TixPQUFPakwsU0FBU3hDLEVBQUUsQ0FBQyxJQUFJLElBQUl5QixFQUFFOUIsRUFBRWlPLFdBQVc1TixHQUFHZCxFQUFFLElBQUltQyxNQUFNakIsRUFBRXVNLE1BQU0xTCxFQUFFLEVBQUVBLEVBQUUvQixFQUFFc0QsT0FBT3ZCLElBQUkvQixFQUFFK0IsR0FBR1EsRUFBRVIsR0FBR2IsRUFBRXlNLE1BQU01TCxHQUFHLElBQUlTLEVBQUV0QixFQUFFdU4sV0FBV3pPLEdBQUdTLEVBQUU4TixPQUFPek4sR0FBR0ksRUFBRXFOLE9BQU8vTCxHQUFHLE9BQU8vQixFQUFFbU8sV0FBVyxTQUFTKzJCLEdBQUd6a0MsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxJQUFJLElBQUk4QixFQUFFUCxFQUFFQSxFQUFFc0IsT0FBTyxHQUFHdEQsRUFBRSxDQUFDa0IsRUFBRW9DLE9BQU9mLEVBQUVBLEdBQUdSLEVBQUUvQixFQUFFLEdBQUd3QyxFQUFFeEMsRUFBRSxHQUFHQyxFQUFFNEgsRUFBRXBHLEVBQUVNLEVBQUVqQixHQUFHVCxFQUFFd0gsRUFBRSxRQUFROUYsRUFBRWpCLEdBQUdtRixFQUFFLEVBQUVBLEVBQUVsRSxFQUFFa0UsSUFBSSxDQUFDLElBQUksSUFBSW5FLEVBQUVtRSxFQUFFekQsRUFBRTBELEVBQUVoRixFQUFFc2tDLFNBQVMxakMsRUFBRUEsRUFBRVUsR0FBR2xDLEVBQUUsR0FBRzhGLEVBQUUsRUFBRUEsRUFBRUYsRUFBRTVDLE9BQU84QyxJQUFJOUYsRUFBRWlELEtBQUssQ0FBQ3RDLE1BQU1pRixFQUFFRSxHQUFHdy9CLE1BQU14L0IsSUFBSTlGLEVBQUVvSCxNQUFLLFNBQVN4RyxFQUFFYyxHQUFHLE9BQU9BLEVBQUVmLE1BQU1DLEVBQUVELFNBQVEsSUFBSWIsRUFBRTZGLEVBQUVuRixFQUFFeUYsRUFBRXRHLEVBQUV1bEMsU0FBU3BsQyxFQUFFQSxFQUFFVSxHQUFHcUYsRUFBRTlGLEVBQUVtbEMsU0FBU3BsQyxFQUFFQSxFQUFFVSxHQUFHLElBQUlzRixFQUFFLEVBQUVBLEVBQUV0RixFQUFFc0YsSUFBSUcsRUFBRUgsR0FBRzlGLEVBQUU4RixHQUFHbkYsTUFBTWtGLEVBQUVDLEdBQUc5RixFQUFFOEYsR0FBR3cvQixNQUFNLElBQUlwL0IsRUFBRXhFLEVBQUVvRixRQUFRLE9BQU9aLEVBQUVBLEVBQUVsRCxPQUFPLEdBQUd4QyxFQUFFLENBQUN3eEIsR0FBR3J5QixFQUFFdUcsRUFBRS9FLEdBQUc2d0IsR0FBR2p5QixFQUFFbUcsRUFBRSxVQUFVLFNBQVNxL0IsR0FBRzNrQyxFQUFFYyxHQUFHLElBQUksSUFBSVAsRUFBRSxHQUFHWCxFQUFFLEVBQUVBLEVBQUVrQixFQUFFc0IsT0FBT3hDLElBQUlrQixFQUFFbEIsSUFBSVcsRUFBRThCLEtBQUt6QyxHQUFHLElBQUlMLEVBQUUrMkIsR0FBR3QyQixFQUFFLFNBQVNxQixFQUFFaTFCLEdBQUcsQ0FBQy8xQixFQUFFNkIsT0FBT3BDLEVBQUVvQyxRQUFRLFNBQVMsSUFBSXhDLEVBQUUsRUFBRUEsRUFBRVcsRUFBRTZCLE9BQU94QyxJQUFJLENBQUMsSUFBSWQsRUFBRVMsRUFBRWlPLFdBQVdqTixFQUFFWCxJQUFJaUIsRUFBRWpCLEVBQUVJLEVBQUVvQyxPQUFPZixFQUFFZ00sT0FBT2xLLElBQUlyRSxFQUFFK0IsR0FBRyxPQUFPUSxFQUFFcU0sV0FBVyxJQUFJazNCLEdBQXFCLFNBQVM1a0MsRUFBRWMsR0FBR0ksS0FBS3dkLFlBQVksR0FBR3hkLEtBQUt3ZCxZQUFZMWUsRUFBRWtCLEtBQUsyakMsY0FBYy9qQyxFQUFFc0YsS0FBSSxTQUFTcEcsRUFBRWMsR0FBRyxNQUFNLElBQUlBLEtBQUksSUFBSVAsRUFBRSxHQUFHVyxLQUFLMmpDLGNBQWM1Z0MsU0FBUSxTQUFTakUsR0FBR08sRUFBRThCLEtBQUssVUFBVXJDLEVBQUUsU0FBU0EsRUFBRSxxQkFBb0IsSUFBSUosRUFBRXNCLEtBQUsyakMsY0FBY3orQixLQUFJLFNBQVNwRyxHQUFHLE1BQU0sSUFBSUEsS0FBSXNFLEtBQUssT0FBT3BELEtBQUs0akMsU0FBUyxrQ0FBa0N2a0MsRUFBRStELEtBQUssY0FBYyw4QkFBOEIxRSxFQUFFLGdEQUFtRG1sQyxHQUFxQixTQUFTL2tDLEVBQUVjLEdBQUdJLEtBQUt3ZCxZQUFZLEdBQUd4ZCxLQUFLOGpDLG9CQUFtQixFQUFHOWpDLEtBQUt3ZCxZQUFZMWUsRUFBRWtCLEtBQUsyakMsY0FBYy9qQyxFQUFFc0YsS0FBSSxTQUFTcEcsRUFBRWMsR0FBRyxNQUFNLElBQUlBLEtBQUksSUFBSVAsRUFBRSxHQUFHVyxLQUFLMmpDLGNBQWM1Z0MsU0FBUSxTQUFTakUsR0FBR08sRUFBRThCLEtBQUssU0FBU3JDLEVBQUUsU0FBU0EsRUFBRSxxQkFBb0IsSUFBSUosRUFBRXNCLEtBQUsyakMsY0FBY3orQixLQUFJLFNBQVNwRyxHQUFHLE1BQU0sSUFBSUEsS0FBSXNFLEtBQUssT0FBT3BELEtBQUs0akMsU0FBUyxrQ0FBa0N2a0MsRUFBRStELEtBQUssY0FBYyw2QkFBNkIxRSxFQUFFLGdEQUFtRHFsQyxHQUFxQixTQUFTamxDLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUsyakMsY0FBYyxDQUFDLEtBQUssSUFBSWpsQyxFQUFFSSxFQUFFa2xDLFdBQVczbEMsRUFBRVMsRUFBRW9nQyxVQUFVLytCLEVBQUVyQixFQUFFbWxDLE9BQU9ybUMsRUFBRTZGLEtBQUtnQixLQUFLdEUsRUFBRXpCLEdBQUdXLEdBQUdXLEtBQUsyakMsY0FBY3hpQyxLQUFLLGdCQUFnQm5CLEtBQUt3ZCxZQUFZLENBQUNuZixFQUFFVCxHQUFHLElBQUkrQixFQUFFLFFBQVFDLEVBQUUsSUFBSSxJQUFJUSxFQUFFZixFQUFFLGdCQUFnQiwrQ0FBK0NXLEtBQUs0akMsU0FBUyxzS0FBc0tsbEMsRUFBRSw0SEFBNEhBLEVBQUUsbUNBQW1DMEIsRUFBRSwrRUFBK0VULEVBQUUsa0tBQXFLLFNBQVN1a0MsR0FBR3BsQyxFQUFFYyxHQUFHLE1BQU0sQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBS29GLE1BQU0sRUFBRXBGLEdBQUdzRixLQUFJLFNBQVN0RixHQUFHLE9BQU9kLEVBQUUsSUFBSWMsS0FBSSxTQUFTdWtDLEdBQUdybEMsRUFBRWMsR0FBRyxPQUFPLElBQUlBLEVBQUUsQ0FBQ2QsR0FBR29sQyxHQUFHcGxDLEVBQUVjLEdBQUcsU0FBU3drQyxLQUFLLElBQUl0bEMsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEVBQUVSLEVBQUVTLEVBQUV2QyxFQUFFSSxFQUFFLE9BQU8sSUFBSUwsRUFBRXVFLFVBQVUsa0JBQWtCckQsRUFBRSxrQkFBa0JjLEVBQUUsS0FBS1AsRUFBRSxNQUFNWCxFQUFFLEtBQUtMLEVBQUUsVUFBVThCLEVBQUUsY0FBY1IsRUFBRSx3QkFBd0JTLEVBQUUsNEhBQTRIdkMsRUFBRSxHQUFHSSxFQUFFLDRPQUE0T2EsRUFBRSxHQUFHYyxFQUFFLFlBQVlQLEVBQUUsVUFBVVgsRUFBRSxVQUFVTCxFQUFFLFlBQVk4QixFQUFFLGVBQWVSLEVBQUUsR0FBR1MsRUFBRSw0SEFBNEh2QyxFQUFFLGlOQUFpTkksRUFBRSx5TEFBeUwsQ0FBQ29tQyxRQUFRdmxDLEVBQUV3bEMsVUFBVTFrQyxFQUFFMmtDLFVBQVVsbEMsRUFBRW1sQyxVQUFVOWxDLEVBQUUrbEMsVUFBVXBtQyxFQUFFcW1DLE9BQU92a0MsRUFBRXdrQyxhQUFhaGxDLEVBQUVpbEMsaUJBQWlCeGtDLEVBQUV5a0MsaUJBQWlCaG5DLEVBQUVpbkMsWUFBWTdtQyxHQUFHLFNBQVM4bUMsR0FBR2ptQyxFQUFFYyxFQUFFUCxRQUFHLElBQVNBLElBQUlBLEVBQUUsU0FBUyxJQUFJWCxFQUFFa0ksRUFBRWhILEdBQUcsT0FBT2xCLEVBQUV3RyxLQUFJLFNBQVN0RixFQUFFdkIsR0FBRyxNQUFNLE9BQU9TLEVBQUVULEdBQUcsTUFBTWdCLEVBQUUsTUFBTU8sRUFBRSxNQUFNdkIsSUFBSUssRUFBRXdDLE9BQU8sRUFBRSxPQUFPcEMsRUFBRVQsRUFBRSxHQUFHLE1BQU1nQixFQUFFLE1BQU1QLEVBQUVULEdBQUcsTUFBTXVCLEVBQUUsWUFBWWQsRUFBRVQsR0FBRyxNQUFNdUIsR0FBRyxPQUFNd0QsS0FBSyxJQUFJLFNBQVM0aEMsR0FBR2xtQyxHQUFHLElBQUljLEVBQUVnSCxFQUFFOUgsR0FBR29HLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRTBNLGNBQWEsTUFBTSwrREFBK0Q1TCxFQUFFLEdBQUcsaUJBQWlCQSxFQUFFLEdBQUcsc0JBQXNCLElBQUlxbEMsR0FBRywwN0JBQTA3QixTQUFTQyxHQUFHcG1DLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsSUFBSUwsRUFBRSxHQUFHUyxFQUFFaUUsU0FBUSxTQUFTakUsR0FBRyxJQUFJYyxFQUFFdUUsRUFBRXJGLEVBQUVxbUMsVUFBVUMsY0FBY3RtQyxFQUFFcW1DLFVBQVVFLFVBQVVobkMsRUFBRThDLEtBQUssaUJBQWlCckMsRUFBRVgsTUFBTXlCLEVBQUUsRUFBRSxJQUFJQSxFQUFFLElBQUksSUFBSSxNQUFNdkIsRUFBRThDLEtBQUsscUJBQXFCckMsRUFBRVgsS0FBSyxLQUFLRSxFQUFFOEMsS0FBSyxxQkFBcUJyQyxFQUFFWCxLQUFLLFNBQVEsSUFBSWdDLEVBQUV2QyxFQUFFK0IsRUFBRXRCLEVBQUUrRSxLQUFLLE1BQU1oRCxFQUFFdEIsRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsT0FBTyxTQUFTQSxFQUFFYyxFQUFFUCxRQUFHLElBQVNBLElBQUlBLEdBQUUsR0FBSSxJQUFJWCxFQUFFLEdBQUdBLEdBQUdXLEVBQTAybUIsU0FBU2ltQyxFQUFHeG1DLEdBQUcsSUFBSWMsRUFBRVAsRUFBRVgsRUFBRSxPQUFPSSxFQUFFcW1DLFVBQVVDLGFBQWFsa0MsUUFBUSxLQUFLLEVBQUUsT0FBT3RCLEVBQUVkLEVBQUVYLEtBQUtrQixFQUFFLE1BQU1PLEVBQUUybEMsT0FBTyxHQUFHQyxjQUFjNWxDLEVBQUVvRixNQUFNLEdBQUd0RyxFQUFFMGxDLEtBQUssY0FBYy9rQyxFQUFFLHNCQUFzQlgsRUFBRStsQyxVQUFVLElBQUk3a0MsRUFBRSx3QkFBd0IsS0FBSyxFQUFFLE9BQU8sU0FBU2QsR0FBRyxJQUFJYyxFQUFFZCxFQUFFWCxLQUFLa0IsRUFBRSxNQUFNTyxFQUFFMmxDLE9BQU8sR0FBR0MsY0FBYzVsQyxFQUFFb0YsTUFBTSxHQUFHdEcsRUFBRUksRUFBRXFtQyxVQUFVTSxTQUFTcG5DLEVBQUUsQ0FBQ29GLEtBQUtnQixLQUFLL0YsRUFBRSxHQUFHLEdBQUcrRSxLQUFLZ0IsS0FBSy9GLEVBQUUsR0FBRyxJQUFJeUIsRUFBRWlrQyxLQUFLLE1BQU0sY0FBYy9rQyxFQUFFLDJEQUEyRGhCLEVBQUUsR0FBRyxLQUFLQSxFQUFFLEdBQUcsMkJBQTJCOEIsRUFBRXNrQyxVQUFVLElBQUk3a0MsRUFBRSxvQkFBelIsQ0FBOFNkLEdBQUcsS0FBSyxFQUFFLE9BQU8sU0FBU0EsR0FBRyxJQUFJYyxFQUFFZCxFQUFFcW1DLFVBQVVDLGFBQWEvbEMsRUFBRVAsRUFBRVgsS0FBS08sRUFBRSxNQUFNVyxFQUFFa21DLE9BQU8sR0FBR0MsY0FBY25tQyxFQUFFMkYsTUFBTSxHQUFHM0csRUFBRVMsRUFBRXFtQyxVQUFVTSxTQUFTdGxDLEVBQUU5QixFQUFFLEdBQUdULEVBQUVTLEVBQUUsR0FBR3NCLEVBQUV5a0MsS0FBSyxHQUFHLE1BQU0vbEMsR0FBRzBGLEVBQUVuRSxFQUFFdkIsR0FBRyxNQUFNLGdCQUFnQkssRUFBRSw0RUFBNEVkLEVBQUUsT0FBT3VDLEVBQUUsMEJBQTBCUixFQUFFOGtDLFVBQVUsSUFBSXBsQyxFQUFFLHdCQUF3QixJQUFJZSxFQUFFLENBQUNxRCxLQUFLZ0IsS0FBS3BHLEVBQUUsR0FBRyxHQUFHb0YsS0FBS2dCLEtBQUtwRyxFQUFFLEdBQUcsSUFBd0IsTUFBTSxjQUFjSyxFQUFFLHdEQUF4QytFLEtBQUtnQixLQUFLN0UsRUFBRSxHQUFHLEdBQW1GLEtBQUtRLEVBQUUsR0FBRyxLQUFLQSxFQUFFLEdBQUcsOEJBQThCVCxFQUFFOGtDLFVBQVUsSUFBSXBsQyxFQUFFLG9CQUF2aUIsQ0FBNGpCUCxHQUFHLEtBQUssRUFBRSxPQUFPLFNBQVNBLEdBQUcsSUFBSWMsRUFBRWQsRUFBRXFtQyxVQUFVQyxhQUFhL2xDLEVBQUVQLEVBQUVYLEtBQUtPLEVBQUUsTUFBTVcsRUFBRWttQyxPQUFPLEdBQUdDLGNBQWNubUMsRUFBRTJGLE1BQU0sR0FBRzNHLEVBQUVTLEVBQUVxbUMsVUFBVU0sU0FBU3RsQyxFQUFFLENBQUNzRCxLQUFLZ0IsS0FBS3BHLEVBQUUsR0FBRyxHQUFHb0YsS0FBS2dCLEtBQUtwRyxFQUFFLEdBQUcsSUFBSSxHQUFHLElBQUl1QixFQUFFLEdBQUcsQ0FBQyxJQUFpQkQsRUFBRStsQyxHQUFHNW1DLEVBQWhCYyxFQUFFb0YsTUFBTSxJQUFhLE1BQU0sYUFBYXNnQyxFQUFHM2xDLEdBQUcsa0JBQWtCakIsRUFBRSxpREFBaURBLEVBQUUsSUFBSWluQyxHQUFHLENBQUMsSUFBSSxNQUFNLE9BQU8sQ0FBQyxFQUFFLElBQUksd0JBQXdCLElBQUl2bEMsRUFBRUQsRUFBRSxHQUFHdEMsRUFBRXNDLEVBQUUsR0FBR2xDLEVBQUV3RixLQUFLZ0IsS0FBSzdFLEVBQUUsR0FBRyxHQUFnQyxNQUFNLGNBQWNsQixFQUFFLHlFQUF5RTBCLEVBQUUsS0FBS3ZDLEVBQUUsS0FBbklJLEVBQUV3RixLQUFLZ0IsS0FBSzdFLEVBQUUsR0FBRyxHQUF5SCxLQUFLM0IsRUFBRSxpQ0FBM0htbUMsS0FBOEpLLFVBQVUsSUFBSXBsQyxFQUFFLG9CQUE1a0IsQ0FBaW1CUCxHQUFHLFFBQVEsT0FBTyxTQUFTQSxHQUFHLElBQUksSUFBSWMsRUFBRWQsRUFBRXFtQyxVQUFVQyxhQUFhL2xDLEVBQUVPLEVBQUVzQixPQUFPeEMsRUFBRUksRUFBRVgsS0FBS0UsRUFBRSxNQUFNSyxFQUFFNm1DLE9BQU8sR0FBR0MsY0FBYzltQyxFQUFFc0csTUFBTSxHQUFHN0UsRUFBRXJCLEVBQUVxbUMsVUFBVU0sU0FBUzduQyxFQUFFLENBQUM2RixLQUFLZ0IsS0FBS3RFLEVBQUUsR0FBRyxHQUFHc0QsS0FBS2dCLEtBQUt0RSxFQUFFLEdBQUcsSUFBSVIsRUFBRS9CLEVBQUUsR0FBR3dDLEVBQUV4QyxFQUFFLEdBQUdDLEVBQUU0RixLQUFLZ0IsS0FBSzdFLEVBQUVQLEVBQUUsR0FBRyxHQUFHcEIsRUFBRUosRUFBRTRGLEtBQUtnQixLQUFLN0UsRUFBRVAsRUFBRSxHQUFHLEdBQUd3RSxFQUFFLDBCQUEwQm5FLEVBQUUsT0FBT3pCLEVBQUUsa0JBQWtCSixFQUFFLGVBQWVpRyxFQUFFLEVBQUVBLEVBQUV6RSxFQUFFLEVBQUV5RSxJQUFJRCxFQUFFLFFBQVFDLEVBQUUsS0FBS0QsRUFBY25FLEVBQUUsSUFBSW9FLEVBQUUsT0FBcEI3RixHQUFHMkIsRUFBRVAsRUFBRXlFLEVBQUUsSUFBbUIsTUFBTXBFLEVBQWEsTUFBTSxjQUFjckIsRUFBRSxJQUFJd0YsRUFBRSwwQkFBMEJuRSxFQUFFLCtCQUErQlUsRUFBRSxzQ0FBc0NBLEVBQUUseURBQXlEQSxFQUFFLEtBQUtULEVBQUUsb0JBQXhNeWtDLEtBQThOSyxVQUFVLElBQUkvbEMsRUFBRSxvQkFBOW1CLENBQW1vQkksSUFBcHRyQndtQyxDQUFHeG1DLEdBQWdnUyxTQUFTOG1DLEVBQUc5bUMsR0FBRyxJQUFJYyxFQUFFZCxFQUFFcW1DLFVBQVVDLGFBQWEsT0FBT3hsQyxFQUFFc0IsUUFBUSxLQUFLLEVBQUUsT0FBTyxTQUFTcEMsR0FBRyxJQUFJYyxFQUFFZCxFQUFFWCxLQUFLa0IsRUFBRSxNQUFNTyxFQUFFMmxDLE9BQU8sR0FBR0MsY0FBYzVsQyxFQUFFb0YsTUFBTSxHQUFHLEdBQUdsRyxFQUFFcW1DLFVBQVVFLFVBQVUsTUFBTSxTQUFTaG1DLEVBQUUsY0FBY08sRUFBRSxLQUFLLElBQUlsQixFQUFFSSxFQUFFcW1DLFVBQVVNLFNBQVNwbkMsRUFBRUssRUFBRSxHQUFHeUIsRUFBRXpCLEVBQUUsR0FBRyxHQUFHLElBQUlMLEdBQUcsSUFBSThCLEVBQUUsTUFBTSxpQkFBaUJkLEVBQUUsc0NBQXNDTyxFQUFFLDRCQUE0QixJQUFJaEMsRUFBRWtCLEVBQUVxbUMsVUFBVU0sU0FBK0IsTUFBTSxlQUFlcG1DLEVBQUUsb0NBQTNDekIsRUFBRSxHQUErRSxLQUExRUEsRUFBRSxHQUErRSxLQUExRWlvQyxHQUFHam1DLEdBQThFLGtDQUFrQ0EsRUFBRSxvQkFBM2IsQ0FBZ2RkLEdBQUcsS0FBSyxFQUFFLE9BQU8sU0FBU0EsR0FBRyxJQUFJYyxFQUFFZCxFQUFFWCxLQUFLa0IsRUFBRSxNQUFNTyxFQUFFMmxDLE9BQU8sR0FBR0MsY0FBYzVsQyxFQUFFb0YsTUFBTSxHQUFHLEdBQUdsRyxFQUFFcW1DLFVBQVVFLFVBQVUsTUFBTSxpQkFBaUJobUMsRUFBRSwwQkFBMEJ5bUMsR0FBR2huQyxHQUFHLGtCQUFrQixJQUFJSixFQUFFSSxFQUFFcW1DLFVBQVVNLFNBQVNwbkMsRUFBRUssRUFBRSxHQUFHeUIsRUFBRXpCLEVBQUUsR0FBRyxHQUFHLElBQUl5QixHQUFHLElBQUk5QixFQUFFLE1BQU0saUJBQWlCZ0IsRUFBRSwrQ0FBK0NPLEVBQUUsNEJBQTRCLElBQUloQyxFQUFFaW9DLEdBQUdqbUMsR0FBRyxPQUFHLElBQUlPLEVBQVEsaUJBQWlCZCxFQUFFLDZEQUE2RHpCLEVBQUUsY0FBY1MsRUFBRSxzQ0FBc0N1QixFQUFFLHdCQUEyQixJQUFJdkIsRUFBUSxpQkFBaUJnQixFQUFFLHdEQUF3RHpCLEVBQUUsY0FBY3VDLEVBQUUsMkNBQTJDUCxFQUFFLHdCQUE4QixlQUFlUCxFQUFFLDZDQUE2Q2hCLEVBQUUsS0FBSzhCLEVBQUUsYUFBYXZDLEVBQUUsa0NBQWtDZ0MsRUFBRSxvQkFBdnpCLENBQTQwQmQsR0FBRyxLQUFLLEVBQUUsT0FBTyxTQUFTQSxHQUFHLElBQUljLEVBQUVkLEVBQUVxbUMsVUFBVUMsYUFBYS9sQyxFQUFFUCxFQUFFWCxLQUFLTyxFQUFFLE1BQU1XLEVBQUVrbUMsT0FBTyxHQUFHQyxjQUFjbm1DLEVBQUUyRixNQUFNLEdBQUczRyxFQUFFUyxFQUFFcW1DLFVBQVVNLFNBQVMsR0FBRyxNQUFNcG5DLEdBQUcwRixFQUFFbkUsRUFBRXZCLEdBQUcsQ0FBQyxJQUFJOEIsRUFBRTlCLEVBQUUsR0FBVSxNQUFNLGVBQWVLLEVBQUUsMEVBQTVCTCxFQUFFLEdBQXNHLE9BQU84QixFQUFFLG9DQUFvQ2QsRUFBRSxvQkFBb0IsSUFBSU0sRUFBRTBGLEVBQUV6RixHQUFHUSxFQUFFVCxFQUFFNEYsU0FBUzFILEVBQUU4QixFQUFFNkYsU0FBU3ZILEVBQUVtQyxFQUFFLEdBQUduQyxFQUFFaUQsT0FBT3RCLEVBQUVzQixPQUFPLENBQUMsSUFBSTJDLEVBQUU2aEMsR0FBRzVtQyxFQUFFYixHQUFHLE1BQU0sV0FBVzJuQyxFQUFHL2hDLEdBQUcsaUJBQWlCbkYsRUFBRSx3Q0FBd0NBLEVBQUUsSUFBSWluQyxHQUFHLENBQUMsTUFBTSxPQUFPOW5DLEdBQUcsb0JBQW9CLEdBQUdpQixFQUFFcW1DLFVBQVVFLFVBQVUsTUFBTSxpQkFBaUIzbUMsRUFBRSw0RUFBNEVrQixFQUFFLEdBQUcsb0JBQW9Ca21DLEdBQUdobkMsR0FBRyxrQkFBa0IsSUFBSVksRUFBRXJCLEVBQUUsR0FBR3lGLEVBQUV6RixFQUFFLEdBQUdILEVBQUUybkMsR0FBR3htQyxHQUFHLE9BQUcsSUFBSXlFLEVBQVEsZUFBZXBGLEVBQUUsZ0VBQWdFUixFQUFFLFdBQVcwQixFQUFFLEdBQUcsd0RBQXdERixFQUFFLG9DQUFvQ0wsRUFBRSxvQkFBdUIsSUFBSUssRUFBUSxlQUFlaEIsRUFBRSxnRUFBZ0VSLEVBQUUsV0FBVzBCLEVBQUUsR0FBRyxtREFBbURrRSxFQUFFLHlDQUF5Q3pFLEVBQUUsb0JBQTBCLGFBQWFYLEVBQUUsd0hBQXdIa0IsRUFBRSxHQUFHLFlBQVkxQixFQUFFLCtCQUErQndCLEVBQUUsS0FBS29FLEVBQUUsdUNBQXVDekUsRUFBRSxnQkFBdjVDLENBQXc2Q1AsR0FBRyxLQUFLLEVBQUUsT0FBTyxTQUFTQSxHQUFHLElBQUljLEVBQUVkLEVBQUVxbUMsVUFBVUMsYUFBYS9sQyxFQUFFUCxFQUFFWCxLQUFLTyxFQUFFLE1BQU1XLEVBQUVrbUMsT0FBTyxHQUFHQyxjQUFjbm1DLEVBQUUyRixNQUFNLEdBQUczRyxFQUFFdUIsRUFBRSxHQUFHQSxFQUFFLEdBQUdPLEVBQUVQLEVBQUUsR0FBR2hDLEVBQUV5SCxFQUFFekYsR0FBR0QsRUFBRS9CLEVBQUUySCxTQUFTbkYsRUFBRXhDLEVBQUU0SCxTQUFTM0gsRUFBRThCLEVBQUUsR0FBRzlCLEVBQUVxRCxPQUFPdEIsRUFBRXNCLE9BQU8sQ0FBQyxJQUFJakQsRUFBRXluQyxHQUFHNW1DLEVBQUVqQixHQUFHLE1BQU0sYUFBYStuQyxFQUFHM25DLEdBQUcsbUJBQW1CUyxFQUFFLHFEQUFxREEsRUFBRSxJQUFJaW5DLEdBQUcsQ0FBQyxNQUFNLE1BQU0sU0FBU3ZsQyxHQUFHLHdCQUF3QixHQUFHdEIsRUFBRXFtQyxVQUFVRSxVQUFVLE1BQU0saUJBQWlCM21DLEVBQUUseUhBQXlITCxFQUFFLEtBQUs4QixFQUFFLG9CQUFvQjJsQyxHQUFHaG5DLEdBQUcsa0JBQWtCLElBQUkrRSxFQUFFL0UsRUFBRXFtQyxVQUFVTSxTQUFTL2xDLEVBQUVtRSxFQUFFLEdBQUdDLEVBQUVELEVBQUUsR0FBRzNGLEVBQUVZLEVBQUVxbUMsVUFBVVksV0FBVyxPQUFHamlDLElBQUl6RixHQUFHLE1BQU1ILEVBQVEsbUJBQW1CUSxFQUFFLDBIQUEwSHlCLEVBQUUsd0ZBQXdGMkQsRUFBRSxPQUFPcEUsRUFBRSx3Q0FBd0NMLEVBQUUsNEJBQStCeUUsSUFBSTNELEdBQUcsTUFBTWpDLEVBQVEsZUFBZVEsRUFBRSxnRkFBZ0ZrQixFQUFFLEdBQUcsZ0dBQWdHa0UsRUFBRSxPQUFPcEUsRUFBRSxvQ0FBb0NMLEVBQUUsb0JBQXNDLGlCQUFpQlgsRUFBRSwySUFBMklMLEVBQUUsWUFBWThCLEVBQUUsY0FBMUwwbEMsR0FBR3htQyxHQUF1TSxtQ0FBbUNLLEVBQUUsS0FBS29FLEVBQUUsMkNBQTJDekUsRUFBRSxzQkFBMWhELENBQWlqRFAsR0FBRyxLQUFLLEVBQUUsT0FBTyxTQUFTQSxHQUFHLElBQUljLEVBQUVkLEVBQUVxbUMsVUFBVUMsYUFBYS9sQyxFQUFFUCxFQUFFWCxLQUFLTyxFQUFFLE1BQU1XLEVBQUVrbUMsT0FBTyxHQUFHQyxjQUFjbm1DLEVBQUUyRixNQUFNLEdBQUczRyxFQUFFdUIsRUFBRSxHQUFHTyxFQUFFUCxFQUFFLEdBQUd2QixFQUFFVCxFQUFFZ0MsRUFBRSxHQUFHTyxFQUFFUixFQUFFMEYsRUFBRXpGLEdBQUdRLEVBQUVULEVBQUU0RixTQUFTMUgsRUFBRThCLEVBQUU2RixTQUFTLEdBQUdwRixFQUFFYyxPQUFPdEIsRUFBRXNCLE9BQU8sQ0FBQyxJQUFJakQsRUFBRXluQyxHQUFHNW1DLEVBQUVzQixHQUFHLE1BQU0sV0FBV3dsQyxFQUFHM25DLEdBQUcsaUJBQWlCUyxFQUFFLCtEQUErREEsRUFBRSxJQUFJaW5DLEdBQUcsQ0FBQyxNQUFNLE1BQU0sUUFBUSxVQUFVOW5DLEdBQUcsb0JBQW9CLEdBQUdpQixFQUFFcW1DLFVBQVVFLFVBQVUsTUFBTSxpQkFBaUIzbUMsRUFBRSw2SUFBNklkLEVBQUUsS0FBS3VDLEVBQUUsS0FBSzlCLEVBQUUsb0JBQW9CeW5DLEdBQUdobkMsR0FBRyxrQkFBa0IsSUFBSStFLEVBQUUvRSxFQUFFcW1DLFVBQVVZLFdBQVdybUMsRUFBRVosRUFBRXFtQyxVQUFVTSxTQUFTM2hDLEVBQUVwRSxFQUFFLEdBQUd4QixFQUFFd0IsRUFBRSxHQUFHLE9BQUd4QixJQUFJTixHQUFHLE1BQU1pRyxFQUFRLGlCQUFpQm5GLEVBQUUsd0tBQXdLeUIsRUFBRSxLQUFLOUIsRUFBRSxvRkFBb0ZILEVBQUUsT0FBTzRGLEVBQUUsc0NBQXNDekUsRUFBRSx3QkFBMkJuQixJQUFJRyxHQUFHLE1BQU13RixFQUFRLGlCQUFpQm5GLEVBQUUsK0hBQStIa0IsRUFBRSxHQUFHQSxFQUFFLEdBQUcsS0FBS0EsRUFBRSxHQUFHLHdIQUF3SDFCLEVBQUUsT0FBTzRGLEVBQUUsc0NBQXNDekUsRUFBRSx3QkFBMEMsZUFBZVgsRUFBRSxtSkFBbUpkLEVBQUUsWUFBWXVDLEVBQUUseUJBQXlCOUIsRUFBRSwwQ0FBMEN5RixFQUFFLEtBQUs1RixFQUFFLGFBQTlRMm5DLEdBQUd4bUMsR0FBMFIsa0NBQWtDQSxFQUFFLG9CQUF2dUQsQ0FBNHZEUCxHQUFHLEtBQUssRUFBRSxPQUFPLFNBQVNBLEdBQUcsSUFBSWMsRUFBRWQsRUFBRXFtQyxVQUFVQyxhQUFhL2xDLEVBQUVQLEVBQUVYLEtBQUtPLEVBQUUsTUFBTVcsRUFBRWttQyxPQUFPLEdBQUdDLGNBQWNubUMsRUFBRTJGLE1BQU0sR0FBRzNHLEVBQUV1QixFQUFFLEdBQUdPLEVBQUVQLEVBQUUsR0FBR3ZCLEVBQUVULEVBQUVnQyxFQUFFLEdBQUdPLEVBQUVSLEVBQUVDLEVBQUUsR0FBR2hDLEVBQUV3QyxFQUFFaUYsRUFBRXpGLEdBQUcvQixFQUFFdUMsRUFBRW1GLFNBQVN0SCxFQUFFbUMsRUFBRW9GLFNBQVMsR0FBRzNILEVBQUVxRCxPQUFPdEIsRUFBRXNCLE9BQU8sQ0FBQyxJQUFJMkMsRUFBRTZoQyxHQUFHNW1DLEVBQUVqQixHQUFHLE1BQU0sV0FBVytuQyxFQUFHL2hDLEdBQUcsaUJBQWlCbkYsRUFBRSwyRUFBMkVBLEVBQUUsSUFBSWluQyxHQUFHLENBQUMsTUFBTSxNQUFNLFFBQVEsU0FBUyxVQUFVMW5DLEdBQUcsb0JBQW9CLEdBQUdhLEVBQUVxbUMsVUFBVUUsVUFBVSxNQUFNLGlCQUFpQjNtQyxFQUFFLGlKQUFpSmlCLEVBQUUsS0FBSy9CLEVBQUUsS0FBS3VDLEVBQUUsS0FBSzlCLEVBQUUsb0NBQW9DeW5DLEdBQUdobkMsR0FBRyxrQkFBa0IsSUFBSVksRUFBRVosRUFBRXFtQyxVQUFVWSxXQUFXamlDLEVBQUVoRixFQUFFcW1DLFVBQVVNLFNBQVN2bkMsRUFBRTRGLEVBQUUsR0FBR0UsRUFBRUYsRUFBRSxHQUFHLE9BQUdFLElBQUlyRSxHQUFHLE1BQU1ELEVBQVEsaUJBQWlCaEIsRUFBRSwrS0FBK0tkLEVBQUUsS0FBS3VDLEVBQUUsS0FBSzlCLEVBQUUsb0ZBQW9GMkYsRUFBRSxPQUFPOUYsRUFBRSxzQ0FBc0NtQixFQUFFLHdCQUEyQjJFLElBQUkzRixHQUFHLE1BQU1xQixFQUFRLGlCQUFpQmhCLEVBQUUsZ0pBQWdKa0IsRUFBRSxHQUFHQSxFQUFFLEdBQUdBLEVBQUUsR0FBRyxxQkFBcUJBLEVBQUUsR0FBR0EsRUFBRSxHQUFHLEtBQUtBLEVBQUUsR0FBRywrR0FBK0dvRSxFQUFFLE9BQU85RixFQUFFLHNDQUFzQ21CLEVBQUUsd0JBQTBDLGVBQWVYLEVBQUUsK0pBQStKaUIsRUFBRSxZQUFZL0IsRUFBRSxjQUFjdUMsRUFBRSwwQkFBMEI5QixFQUFFLGVBQXhQd25DLEdBQUd4bUMsR0FBc1EsaUNBQWlDbkIsRUFBRSxLQUFLOEYsRUFBRSx5Q0FBeUMzRSxFQUFFLG9CQUF2M0QsQ0FBNDREUCxHQUFHLEtBQUssRUFBRSxPQUFPLFNBQVNBLEdBQUcsSUFBSWMsRUFBRWQsRUFBRXFtQyxVQUFVQyxhQUFhL2xDLEVBQUVQLEVBQUVYLEtBQUtPLEVBQUUsTUFBTVcsRUFBRWttQyxPQUFPLEdBQUdDLGNBQWNubUMsRUFBRTJGLE1BQU0sR0FBRzNHLEVBQUVnSCxFQUFFekYsR0FBR08sRUFBRTlCLEVBQUVrSCxTQUFTM0gsRUFBRVMsRUFBRW1ILFNBQVMsR0FBR3JGLEVBQUVlLE9BQU90QixFQUFFc0IsT0FBTyxDQUFDLElBQUl2QixFQUFFK2xDLEdBQUc1bUMsRUFBRXFCLEdBQUcsTUFBTSxXQUFXeWxDLEVBQUdqbUMsR0FBRyxpQkFBaUJqQixFQUFFLDRHQUE0R0EsRUFBRSxJQUFJaW5DLEdBQUcsQ0FBQyxNQUFNLE1BQU0sUUFBUSxTQUFTLFNBQVMsVUFBVS9uQyxHQUFHLG9CQUFvQixJQUFJd0MsRUFBRVIsRUFBRSxHQUFHL0IsRUFBRStCLEVBQUUsR0FBR1EsRUFBRW5DLEVBQUUyQixFQUFFLEdBQUcvQixFQUFFZ0csRUFBRWpFLEVBQUUsR0FBRzNCLEVBQUV5QixFQUFFRSxFQUFFLEdBQUdpRSxFQUFFLEdBQUcvRSxFQUFFcW1DLFVBQVVFLFVBQVUsTUFBTSxpQkFBaUIzbUMsRUFBRSxvTEFBb0xnQixFQUFFLEtBQUttRSxFQUFFLEtBQUs1RixFQUFFLEtBQUtKLEVBQUUsNkVBQTZFdUMsRUFBRSxvQkFBb0IwbEMsR0FBR2huQyxHQUFHLGtCQUFrQixJQUFJZ0YsRUFBRWhGLEVBQUVxbUMsVUFBVVksV0FBVzduQyxFQUFFWSxFQUFFcW1DLFVBQVVNLFNBQVN6aEMsRUFBRTlGLEVBQUUsR0FBR0YsRUFBRUUsRUFBRSxHQUFHLE9BQUdGLElBQUkwQixHQUFHLE1BQU1vRSxFQUFRLGlCQUFpQnBGLEVBQUUsaU1BQWlNbUYsRUFBRSxLQUFLNUYsRUFBRSxLQUFLSixFQUFFLEtBQUt1QyxFQUFFLGlIQUFpSHBDLEVBQUUsT0FBT2dHLEVBQUUsc0NBQXNDM0UsRUFBRSx3QkFBMkJyQixJQUFJb0MsR0FBRyxNQUFNMEQsRUFBUSxpQkFBaUJwRixFQUFFLHFLQUFxS2tCLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLEdBQUdBLEVBQUUsR0FBRyxxQkFBcUJBLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLEdBQUcscUJBQXFCQSxFQUFFLEdBQUdBLEVBQUUsR0FBRyxxQkFBcUJBLEVBQUUsR0FBRyw0SEFBNEg1QixFQUFFLE9BQU9nRyxFQUFFLHNDQUFzQzNFLEVBQUUsd0JBQTBDLGVBQWVYLEVBQUUsOExBQThMZ0IsRUFBRSxZQUFZbUUsRUFBRSxjQUFjNUYsRUFBRSwwQkFBMEJKLEVBQUUsZUFBZXVDLEVBQUUsZUFBeFN5bEMsR0FBR3htQyxHQUFzVCxpQ0FBaUMyRSxFQUFFLEtBQUtoRyxFQUFFLHlDQUF5Q3FCLEVBQUUsb0JBQWp0RSxDQUFzdUVQLEdBQUcsUUFBUSxNQUFNLElBQUl5RCxNQUFNM0MsRUFBRXNCLE9BQU8sMkNBQXZ6bUIwa0MsQ0FBRzltQyxHQUFHLElBQUlULEVBQUVTLEVBQUVxbUMsVUFBVUMsYUFBYWpsQyxFQUFFUCxFQUFFd2xDLGFBQWk5RCxPQUFwOEQvbUMsRUFBRTZDLFFBQVFmLEVBQUVlLFNBQVN4QyxHQUFHVyxFQUFFLFNBQVNQLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVgsRUFBRUksRUFBRVgsS0FBS0UsRUFBRUssRUFBRTZtQyxPQUFPLEdBQUdDLGNBQWM5bUMsRUFBRXNHLE1BQU0sR0FBRzdFLEVBQUUsTUFBTTlCLEVBQUUsY0FBY1QsRUFBRWtCLEVBQUVxbUMsVUFBVUMsYUFBYWxrQyxPQUFPdkIsRUFBRUMsRUFBRXdsQyxhQUFhbGtDLE9BQU9kLEVBQUV5OUIsR0FBRy8rQixFQUFFcW1DLFVBQVVDLGFBQWF4bEMsRUFBRXdsQyxjQUFjdm5DLEVBQUVtb0MsR0FBR3JtQyxHQUFHMUIsRUFBRTBCLEVBQUUvQixFQUFFaUcsRUFBRSxDQUFDLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxLQUFLeEUsRUFBRSxJQUFJekIsRUFBRSxHQUFHK0IsRUFBRSxHQUFHUyxFQUFFYyxRQUFRLEVBQUUsY0FBY2QsRUFBRThFLEtBQUksU0FBU3BHLEdBQUcsTUFBTSxVQUFVK0UsRUFBRS9FLEVBQUViLEdBQUcsV0FBVW1GLEtBQUssTUFBTSxJQUFJMUQsRUFBS0EsRUFBRUMsRUFBRSxHQUFHL0IsRUFBRSxFQUFFLFNBQVNrQixFQUFFcW1DLFVBQVVDLGFBQWFsZ0MsS0FBSSxTQUFTcEcsRUFBRWMsR0FBRyxNQUFNLFVBQVVpRSxFQUFFakUsRUFBRTNCLE1BQUttRixLQUFLLE1BQU0sSUFBSVUsRUFBRSxzQkFBc0I1RixFQUFFLElBQUlpRyxFQUFFckYsRUFBRXFtQyxVQUFVQyxjQUFjcGhDLEVBQUUsSUFBSUcsRUFBRXZFLEVBQUV3bEMsY0FBYyxHQUFHLElBQUl4bkMsR0FBR00sR0FBRzhGLEdBQUcsR0FBRzlGLElBQUk4RixFQUFFRixFQUFFLElBQUluRSxFQUFFLHVFQUF1RSxxREFBcUQsR0FBR1MsRUFBRWMsT0FBTyxDQUFDLElBQUlsRCxFQUFFSixFQUFFLEVBQUVtRyxFQUFFbkcsRUFBRSxFQUFFd0MsRUFBRWl1QixRQUFRcndCLElBQUksR0FBR29DLEVBQUVpdUIsUUFBUXRxQixJQUFJLEVBQUVELEVBQUUsOEJBQThCMUQsRUFBRWl1QixRQUFRcndCLElBQUksRUFBRThGLEVBQUUsMkVBQTJFMUQsRUFBRWl1QixRQUFRdHFCLElBQUksSUFBSUQsRUFBRSxzREFBc0RBLEVBQUUsNkRBQTZELE1BQU0sY0FBYzNELEVBQUUsZUFBZXRDLEVBQUUsdUNBQXVDd0IsRUFBRSxpQ0FBaUNoQixFQUFFLElBQUlxQixFQUFFLGFBQWFvRSxFQUFFLGNBQWpvQyxDQUFncENoRixFQUFFYyxHQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRVgsS0FBS08sRUFBRVcsRUFBRWttQyxPQUFPLEdBQUdDLGNBQWNubUMsRUFBRTJGLE1BQU0sR0FBRzNHLEVBQUUsTUFBTUssRUFBRSxjQUFjeUIsRUFBRVAsRUFBRTZsQyxTQUFTN25DLEVBQUVrQixFQUFFcW1DLFVBQVVNLFNBQVM5bEMsRUFBRWIsRUFBRXFtQyxVQUFVQyxhQUFhbGtDLE9BQU9kLEVBQUVSLEVBQUV3bEMsYUFBYWxrQyxPQUFPLElBQUlwQyxFQUFFcW1DLFVBQVVFLFdBQVcxbEMsSUFBSVMsR0FBRyxNQUFNdEIsRUFBRXFtQyxVQUFVWSxZQUFZaGlDLEVBQUVuRyxFQUFFdUMsR0FBRyxNQUFNLGlCQUFpQjlCLEVBQUUsc0NBQXNDZ0IsRUFBRSw4QkFBOEIsSUFBTXBCLEVBQUUrbkMsR0FBRzVsQyxHQUFHeUQsRUFBRWc2QixHQUFHLytCLEVBQUVxbUMsVUFBVUMsYUFBYXhsQyxFQUFFd2xDLGNBQWMxbEMsRUFBRVUsRUFBRVQsRUFBRW1FLEVBQUUsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBeU4sTUFBTSxlQUFlekYsRUFBRSxlQUFlSixFQUFFLHdDQUExUCxJQUFJMEIsRUFBRSxHQUFHUyxFQUFFLEdBQUd5RCxFQUFFM0MsUUFBUSxFQUFFLGNBQWMyQyxFQUFFcUIsS0FBSSxTQUFTcEcsR0FBRyxNQUFNLFVBQVVnRixFQUFFaEYsRUFBRVksR0FBRyxXQUFVMEQsS0FBSyxPQUFtTSxxQkFBcUIxRSxFQUFFLEtBQXpNMEIsRUFBRSxHQUFHVCxFQUFFLEVBQUUsU0FBU2IsRUFBRXFtQyxVQUFVQyxhQUFhbGdDLEtBQUksU0FBU3BHLEVBQUVjLEdBQUcsTUFBTSxVQUFVa0UsRUFBRWxFLEVBQUVGLE1BQUswRCxLQUFLLE9BQW9ILGdCQUE5dkIsQ0FBK3dCdEUsRUFBRWMsSUFBV2xCLEVBQXhqRSxDQUEyakVJLEVBQUVjLEVBQUVsQixNQUFLMEUsS0FBSyxNQUFNdkYsRUFBRStCLEVBQUU2bEMsU0FBU3huQyxFQUFFbW1DLEtBQUt2Z0MsRUFBRSxTQUFTL0UsR0FBRyxNQUFNLGdGQUFnRkEsRUFBRTJsQyxVQUFVLHFDQUE5RyxDQUFvSnhtQyxHQUFHeUIsRUFBRSxTQUFTWixHQUFHLE9BQU9BLEVBQUV1bEMsUUFBUSwrRkFBK0Z2bEMsRUFBRTBsQyxVQUFVLHdCQUF3QjFsQyxFQUFFNmxDLGFBQWEsMFZBQTBWN2xDLEVBQUU4bEMsaUJBQWlCLG1JQUFtSTlsQyxFQUFFK2xDLGlCQUFpQixTQUFTL2xDLEVBQUVnbUMsWUFBWSxnbEJBQWdsQm1CLEdBQUcsU0FBU0MsR0FBRyxTQUFTQyxHQUFHLE9BQXB6QyxDQUE0ekNsb0MsR0FBRyxPQUFPMkIsRUFBRXdtQyxVQUFVam1DLEVBQUUsU0FBU3JCLEVBQUVjLEdBQUcsT0FBT2QsRUFBRW9DLFFBQVEsS0FBSyxFQUFFLE1BQU0sNERBQTRELEtBQUssRUFBRSxPQUFPLFNBQVNwQyxFQUFFYyxHQUFHLElBQUlQLEVBQUUsQ0FBQ29FLEtBQUtnQixLQUFLN0UsRUFBRSxHQUFHLEdBQUc2RCxLQUFLZ0IsS0FBSzdFLEVBQUUsR0FBRyxJQUFJLE9BQUcsSUFBSVAsRUFBRSxHQUFTLHdFQUF3RUEsRUFBRSxHQUFHLHNCQUF5QixJQUFJQSxFQUFFLEdBQVMsd0VBQXdFQSxFQUFFLEdBQUcsc0JBQTRCLGdIQUFnSEEsRUFBRSxHQUFHLEtBQUtBLEVBQUUsR0FBRyx1Q0FBdUNBLEVBQUUsR0FBRyw2QkFBcmQsQ0FBbWYsRUFBRU8sR0FBRyxLQUFLLEVBQUUsT0FBTyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUUsQ0FBQ29FLEtBQUtnQixLQUFLN0UsRUFBRSxHQUFHLEdBQUc2RCxLQUFLZ0IsS0FBSzdFLEVBQUUsR0FBRyxJQUFJLEdBQUdtRSxFQUFFakYsRUFBRWMsR0FBRyxNQUFNLGtGQUFrRlAsRUFBRSxHQUFHLEtBQUtBLEVBQUUsR0FBRyxxQkFBcUIsSUFBSVgsRUFBRStFLEtBQUtnQixLQUFLM0YsRUFBRSxHQUFHLEdBQUcsTUFBTSxrSEFBa0hPLEVBQUUsR0FBRyxLQUFLQSxFQUFFLEdBQUcseUNBQXlDQSxFQUFFLEdBQUcsOENBQThDWCxFQUFFLGlDQUFpQ0EsRUFBRSxpREFBaGUsQ0FBa2hCSSxFQUFFYyxHQUFHLEtBQUssRUFBRSxPQUFPUCxFQUFFUCxFQUFFSixFQUFFa0IsRUFBRXZCLEVBQUUsQ0FBQ29GLEtBQUtnQixLQUFLL0YsRUFBRSxHQUFHLEdBQUcrRSxLQUFLZ0IsS0FBSy9GLEVBQUUsR0FBRyxJQUF3QmQsR0FBcEJ1QyxFQUFFc0QsS0FBS2dCLEtBQUtwRixFQUFFLEdBQUcsSUFBT29FLEtBQUtnQixLQUFLcEYsRUFBRSxHQUFHLEdBQUcsa0hBQWtIaEIsRUFBRSxHQUFHLEtBQUtBLEVBQUUsR0FBRyx1Q0FBdUNBLEVBQUUsR0FBRywyQ0FBMkNULEVBQUUseUJBQXlCQSxFQUFFLG1DQUFtQ3VDLEVBQUUsaUNBQWlDQSxFQUFFLG9EQUFvRCxRQUFRLE9BQU8sU0FBU3JCLEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxFQUFFLENBQUNvRSxLQUFLZ0IsS0FBSzdFLEVBQUUsR0FBRyxHQUFHNkQsS0FBS2dCLEtBQUs3RSxFQUFFLEdBQUcsSUFBSWxCLEVBQUUrRSxLQUFLZ0IsS0FBSzNGLEVBQUVBLEVBQUVvQyxPQUFPLEdBQUcsR0FBRzdDLEVBQUVLLEVBQUUrRSxLQUFLZ0IsS0FBSzNGLEVBQUVBLEVBQUVvQyxPQUFPLEdBQUcsR0FBR2YsRUFBRTlCLEVBQUVULEVBQUUsR0FBRytCLEVBQUUsVUFBVVMsRUFBRSxFQUFFQSxFQUFFdEIsRUFBRW9DLE9BQU8sRUFBRWQsSUFBdUJ4QyxFQUFFLGdCQUFnQndDLEVBQUUsZUFBdkNELEdBQUdyQixFQUFFQSxFQUFFb0MsT0FBT2QsRUFBRSxJQUF1QyxzQkFBc0JBLEVBQUUsTUFBTUQsRUFBRSxVQUFVdkMsRUFBRStCLEVBQUUsSUFBSVMsRUFBRSxLQUFLVCxFQUFFLE1BQU0sYUFBYWIsRUFBRW9DLE9BQU8sdUdBQXVHN0IsRUFBRSxHQUFHLEtBQUtBLEVBQUUsR0FBRyx1Q0FBdUNBLEVBQUUsR0FBRywyQkFBMkJ6QixFQUFFLDZCQUE2QlMsRUFBRSx5QkFBeUJBLEVBQUUsbUNBQW1DSyxFQUFFLGlDQUFpQ0EsRUFBRSw4QkFBOEJJLEVBQUVvQyxPQUFPLElBQUl2QixFQUFFLGdCQUFocUIsQ0FBaXJCYixFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsRUFBN3pFLENBQWcwRWdDLEVBQUV3bEMsYUFBYXZuQyxHQUFHRCxFQUFFLFNBQVNrQixHQUFHLE1BQU0sMkNBQTJDQSxFQUFFNGxDLE9BQU8scUJBQXRFLENBQTRGem1DLEtBQUtrQyxFQUFFLFNBQVNyQixFQUFFYyxHQUFHLE9BQU9kLEVBQUVvQyxRQUFRLEtBQUssRUFBRSxNQUFNLDREQUE0RCxLQUFLLEVBQUUsT0FBTyxTQUFTcEMsRUFBRWMsR0FBRyxPQUFHLElBQUlBLEVBQUUsR0FBUyxvRUFBb0VBLEVBQUUsR0FBRyxzQkFBeUIsSUFBSUEsRUFBRSxHQUFTLG9FQUFvRUEsRUFBRSxHQUFHLHNCQUE0QixnSEFBZ0hBLEVBQUUsR0FBRyxLQUFLQSxFQUFFLEdBQUcsa0NBQWtDQSxFQUFFLEdBQUcsNEJBQTVaLENBQXliLEVBQUVBLEdBQUcsS0FBSyxFQUFFLE9BQU8sU0FBU2QsRUFBRWMsR0FBRyxPQUFHbUUsRUFBRWpGLEVBQUVjLEdBQVMsOEVBQThFQSxFQUFFLEdBQUcsS0FBS0EsRUFBRSxHQUFHLHFCQUF3QixJQUFJZCxFQUFFLEdBQVMsd0hBQXdIYyxFQUFFLEdBQUcsS0FBS0EsRUFBRSxHQUFHLHlDQUF5Q0EsRUFBRSxHQUFHLGlFQUFvRSxJQUFJZCxFQUFFLEdBQVMsd0hBQXdIYyxFQUFFLEdBQUcsS0FBS0EsRUFBRSxHQUFHLHlDQUF5Q0EsRUFBRSxHQUFHLGlFQUF1RSxrSEFBa0hBLEVBQUUsR0FBRyxLQUFLQSxFQUFFLEdBQUcsdUNBQXVDQSxFQUFFLEdBQUcseUNBQXlDZCxFQUFFLEdBQUcsZ0NBQWdDQSxFQUFFLEdBQUcsMENBQXQ2QixDQUFpOUJBLEVBQUVjLEdBQUcsS0FBSyxFQUFFLE9BQU9QLEVBQUVPLEVBQUVsQixFQUFFcW1DLEdBQUcsQ0FBQyxJQUFJLElBQUksS0FBS2ptQyxHQUFHLGtIQUFrSE8sRUFBRSxHQUFHLEtBQUtBLEVBQUUsR0FBRyx1Q0FBdUNBLEVBQUUsR0FBRyx5QkFBeUJYLEVBQUUsNENBQTRDLEtBQUssRUFBRSxPQUFPLFNBQVNJLEVBQUVjLEdBQUcsSUFBSVAsRUFBRTBsQyxHQUFHLENBQUMsSUFBSSxJQUFJLElBQUksTUFBTWptQyxHQUFHLE1BQU0sNkZBQTZGYyxFQUFFLEdBQUcsS0FBS0EsRUFBRSxHQUFHLHVDQUF1Q0EsRUFBRSxHQUFHLHlCQUF5QlAsRUFBRSxnREFBdE8sQ0FBdVJQLEVBQUVjLEdBQUcsS0FBSyxFQUFFLE9BQU8sU0FBU2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFMGxDLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLE1BQU1qbUMsR0FBRyxNQUFNLG9GQUFvRmMsRUFBRSxHQUFHLG1DQUFtQ0EsRUFBRSxHQUFHLHlDQUF5Q0EsRUFBRSxHQUFHLDJCQUEyQlAsRUFBRSx3RkFBcFEsQ0FBNlZQLEVBQUVjLEdBQUcsS0FBSyxFQUFFLE9BQU8sU0FBU2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFMGxDLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssTUFBTWptQyxHQUFHLE1BQU0sNkZBQTZGYyxFQUFFLEdBQUcsS0FBS0EsRUFBRSxHQUFHLHVDQUF1Q0EsRUFBRSxHQUFHLDJCQUEyQlAsRUFBRSx3RkFBbFAsQ0FBMlVQLEVBQUVjLEdBQUcsUUFBUSxNQUFNLElBQUkyQyxNQUFNekQsRUFBRW9DLE9BQU8sMkNBQTJDLElBQUk3QixFQUFFWCxFQUE5M0YsQ0FBaTRGa0IsRUFBRXdsQyxhQUFhdm5DLEdBQUdELEVBQUUsU0FBU2tCLEdBQUcsTUFBTSw0Q0FBNENBLEVBQUU0bEMsT0FBTyxvQ0FBdkUsQ0FBNEd6bUMsSUFBSVMsSUFBSWdCLEdBQUcybUMsSUFBSSxDQUFDM21DLEVBQUVtRSxFQUFFakcsRUFBRStCLEVBQUVRLEVBQUVDLEVBQUVmLEdBQUcrRCxLQUFLLE1BQTJ0WixJQUFJNmlDLEdBQUcsa2JBQWtiQyxHQUFHLHFUQUFxVEMsR0FBRywyVkFBMlZFLEdBQUcsc1dBQXNXLFNBQVNSLEdBQUcvbUMsR0FBRyxNQUFNLFNBQVNBLEVBQUUsU0FBU2duQyxHQUFHaG5DLEdBQUcsSUFBSWMsRUFBRWQsRUFBRVgsS0FBS2tCLEVBQUU4RSxFQUFFckYsRUFBRXFtQyxVQUFVQyxjQUFjLE9BQU8vbEMsRUFBRSxFQUFFLFVBQVVPLEVBQUUsSUFBSSw2QkFBNkJQLEVBQUUscURBQXFETyxFQUFFLDJCQUEyQixTQUFTb21DLEdBQUdsbkMsR0FBRyxHQUFHQSxHQUFHLEVBQUUsTUFBTSxNQUFNLEdBQUcsSUFBSUEsRUFBRSxNQUFNLFFBQVEsR0FBRyxJQUFJQSxFQUFFLE1BQU0sUUFBUSxHQUFHLElBQUlBLEVBQUUsTUFBTSxRQUFRLEdBQUcsSUFBSUEsRUFBRSxNQUFNLFFBQVEsR0FBRyxJQUFJQSxFQUFFLE1BQU0sUUFBUSxNQUFNeUQsTUFBTSxnQkFBZ0J6RCxFQUFFLHlCQUF5QixTQUFTNG1DLEdBQUc1bUMsRUFBRWMsR0FBRyxJQUFJUCxFQUFFaW5DLEtBQUtDLE1BQU1ELEtBQUtFLFVBQVUxbkMsSUFBSSxPQUFPTyxFQUFFOGxDLFVBQVVDLGFBQWF4bEMsRUFBRVAsRUFBRSxTQUFTc21DLEdBQUc3bUMsRUFBRWMsR0FBRyxPQUFPQSxFQUFFc0YsS0FBSSxTQUFTdEYsR0FBRyxPQUFPZCxFQUFFYyxNQUFLd0QsS0FBSyxNQUFNLElBQUlxakMsR0FBcUIsU0FBUzNuQyxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHc0IsS0FBSzJqQyxjQUFjLENBQUMsS0FBSzNqQyxLQUFLOGpDLG9CQUFtQixFQUFHaGdDLEVBQUVoRixFQUFFb0MsT0FBTyxHQUFFLFdBQVcsTUFBTSxjQUFjN0IsRUFBRWttQyxPQUFPLEdBQUdDLGNBQWNubUMsRUFBRTJGLE1BQU0sSUFBSSw4Q0FBNkMsSUFBSTNHLEVBQUVTLEVBQUVBLEVBQUVvQyxPQUFPLEdBQUdmLEVBQUVzRCxLQUFLZ0IsS0FBS3BHLEVBQUV1QixHQUFHSSxLQUFLd2QsWUFBWTFlLEVBQUVrRyxNQUFNLEdBQUcsR0FBRzdFLEVBQUUsR0FBR0gsS0FBS3dkLFlBQVlyYyxLQUFLaEIsR0FBR3pCLEdBQUdzQixLQUFLMmpDLGNBQWN4aUMsS0FBSyxnQkFBZ0IsSUFBSXZELEVBQUUrQixFQUFFUyxFQUFFSixLQUFLd2QsWUFBWTNmLEVBQUV1QyxFQUFFYyxPQUFPakQsRUFBRStuQyxHQUFHbm9DLEdBQUdnRyxFQUFFc2dDLEdBQUcsU0FBU3RtQyxHQUFHLEdBQUcsSUFBSXNDLEVBQUUsQ0FBQyxJQUFJVCxFQUFFc21DLEdBQUdybUMsRUFBRTlCLEVBQUUsR0FBR0QsRUFBRSxhQUFhOEIsRUFBRSxpQkFBaUJBLEVBQUUsSUFBSW1FLEVBQUVULE9BQU8sb0JBQW9CUyxFQUFFaEcsRUFBRSxHQUFHLGNBQWM2QixFQUFFLGlCQUFpQkEsRUFBRSxJQUFJbUUsRUFBRVQsT0FBTyxvQkFBb0JTLEVBQUVoRyxFQUFFLEdBQUcsY0FBYzZCLEVBQUUsaUJBQWlCQSxFQUFFLElBQUltRSxFQUFFVCxPQUFPLG9CQUFvQlMsRUFBRWhHLEVBQUUsR0FBRyxjQUFjNkIsRUFBRSxpQkFBaUJBLEVBQUUsSUFBSW1FLEVBQUVULE9BQU8sb0JBQW9CUyxFQUFFaEcsRUFBRSxHQUFHLFNBQVM4QixFQUFFOUIsRUFBRUQsRUFBRSxhQUFhSyxFQUFFLG9DQUFvQzRGLEVBQUVoRyxFQUFFLEdBQUcsY0FBY0ksRUFBRSxvQ0FBb0M0RixFQUFFaEcsRUFBRSxHQUFHLGNBQWNJLEVBQUUsb0NBQW9DNEYsRUFBRWhHLEVBQUUsR0FBRyxjQUFjSSxFQUFFLG9DQUFvQzRGLEVBQUVoRyxFQUFFLEdBQUcsSUFBSSxJQUFJSyxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUs4RyxNQUFNLEVBQUVyRixHQUFHcUUsRUFBRSxJQUFJOUYsRUFBRXlCLEVBQUUsR0FBRzNCLEVBQUVFLEVBQUVnSCxLQUFJLFNBQVNwRyxHQUFHLE1BQU0sT0FBT0EsS0FBSXFGLEVBQUVnZ0MsR0FBRyxhQUFheGtDLEVBQUUsR0FBR3dGLE9BQU8sV0FBV3BCLEVBQUVvZ0MsR0FBRyxhQUFheGtDLEVBQUUsR0FBR3dGLE9BQU8sV0FBV2YsRUFBRSsvQixHQUFHLGFBQWF4a0MsRUFBRSxHQUFHd0YsT0FBTyxXQUFXZCxFQUFFOC9CLEdBQUcsYUFBYXhrQyxFQUFFLEdBQUd3RixPQUFPLFdBQVdYLEVBQUUsUUFBUW5GLEVBQUUsY0FBYyxXQUFXc0YsRUFBRWpHLEVBQUUsR0FBRyx5REFBeUR5RixFQUFFZixPQUFPLDJEQUEyRFcsRUFBRVgsT0FBTywyREFBMkRnQixFQUFFaEIsT0FBTywyREFBMkRpQixFQUFFakIsT0FBTyxPQUFPeUIsRUFBRSxrQ0FBa0NWLEVBQUVmLE9BQU8sNENBQTRDVyxFQUFFWCxPQUFPLGlEQUFpRGdCLEVBQUVoQixPQUFPLCtEQUErRGlCLEVBQUVqQixPQUFPLFVBQVUyQixFQUFFckcsRUFBRSxHQUFHLHdDQUF3Q1YsRUFBRW9GLE9BQU8sa0RBQWtEbEYsRUFBRWtGLE9BQU8sc0RBQXNEbEYsRUFBRThHLE9BQU8sR0FBRzVCLE9BQU8sZUFBZXBELEtBQUs0akMsU0FBUyw2QkFBNkI1bEMsRUFBRW9GLE9BQU8sdUNBQXVDbEYsRUFBRWtGLE9BQU8sMkNBQTJDbEYsRUFBRThHLE9BQU8sR0FBRzVCLE9BQU8sdUJBQXVCMkIsRUFBRSxrQ0FBa0M5RyxFQUFFLDJEQUEyRDRGLEVBQUVoRyxFQUFFLEdBQUcsT0FBT3VDLEVBQUV2QyxFQUFFLEdBQUcsR0FBRyxnQ0FBZ0NnRyxFQUFFaEcsRUFBRSxHQUFHLE9BQU91QyxFQUFFdkMsRUFBRSxHQUFHLEdBQUcsY0FBY0QsRUFBRSw0Q0FBNENvRyxFQUFFLGVBQWVBLEVBQUUsMEJBQTBCQSxFQUFFLGVBQWVBLEVBQUUsT0FBT3BFLEVBQUUscUdBQXFHaUYsRUFBRSxvQ0FBb0NqRixFQUFFLGtEQUFrRCtFLEVBQUUsZ0NBQWdDRSxFQUFFLGtHQUFrR0wsRUFBRSwyZEFBOGRraUMsR0FBcUIsU0FBUzVuQyxHQUFHa0IsS0FBSzJqQyxjQUFjLENBQUMsTUFBTTNqQyxLQUFLd2QsWUFBWTFlLEVBQUVraEMsUUFBUSxJQUFJcGdDLEVBQUVkLEVBQUU0Z0MsYUFBYXJnQyxFQUFFUCxFQUFFNmdDLFlBQVlqaEMsRUFBRUksRUFBRTBnQyxhQUFhbmhDLEVBQUVTLEVBQUUyZ0MsWUFBWXQvQixFQUFFckIsRUFBRWdoQyxlQUFlbGlDLEVBQUVrQixFQUFFaWhDLGNBQWNwZ0MsRUFBRWIsRUFBRThnQyxzQkFBc0J4L0IsRUFBRXRCLEVBQUUrZ0MscUJBQXFCaGlDLEVBQUU4QixFQUFFLEVBQUViLEVBQUVpZ0MsUUFBUVAsSUFBSXZnQyxFQUFFbUMsRUFBRSxFQUFFdEIsRUFBRWlnQyxRQUFRTCxLQUFLNzZCLEVBQUUsR0FBR2pFLEVBQUVQLEdBQUdXLEtBQUs0akMsU0FBUyxvQ0FBb0MvbEMsRUFBRSxLQUFLSSxFQUFFLCtDQUErQzRGLEVBQUUsaWRBQWlkbEUsRUFBRSx3QkFBd0JRLEVBQUUsc0RBQXNEekIsRUFBRSw0Q0FBNENJLEVBQUVrZ0MsVUFBVSxvSUFBb0k1K0IsRUFBRSx1QkFBdUJ4QyxFQUFFLHdEQUF3RFMsRUFBRSw4Q0FBOENTLEVBQUVtZ0MsU0FBUyx1U0FBMFMwSCxHQUFxQixTQUFTN25DLEdBQUdrQixLQUFLMmpDLGNBQWMsQ0FBQyxNQUFNM2pDLEtBQUt3ZCxZQUFZMWUsRUFBRWtoQyxRQUFRLElBQUlwZ0MsRUFBRWQsRUFBRTBoQyxZQUFZbmhDLEVBQUVQLEVBQUU0Z0MsYUFBYWhoQyxFQUFFSSxFQUFFNmdDLFlBQVl0aEMsRUFBRVMsRUFBRXloQyxZQUFZcGdDLEVBQUVyQixFQUFFMGdDLGFBQWE1aEMsRUFBRWtCLEVBQUUyZ0MsWUFBWTkvQixFQUFFYixFQUFFNGhDLGNBQWN0Z0MsRUFBRXRCLEVBQUVnaEMsZUFBZWppQyxFQUFFaUIsRUFBRWloQyxjQUFjOWhDLEVBQUVhLEVBQUUyaEMscUJBQXFCNThCLEVBQUUvRSxFQUFFOGdDLHNCQUFzQmxnQyxFQUFFWixFQUFFK2dDLHFCQUFxQi83QixFQUFFN0YsRUFBRSxFQUFFYSxFQUFFaWdDLFFBQVFvQixNQUFNamlDLEVBQUUyRixFQUFFLEVBQUUvRSxFQUFFaWdDLFFBQVFQLElBQUl4NkIsRUFBRXRFLEVBQUUsRUFBRVosRUFBRWlnQyxRQUFRTCxLQUFLMWdDLEVBQUUsR0FBRzRCLEVBQUVQLEVBQUVYLEdBQUdzQixLQUFLNGpDLFNBQVMsb0NBQW9DOS9CLEVBQUUsS0FBSzVGLEVBQUUsS0FBSzhGLEVBQUUsK0NBQStDaEcsRUFBRSx1aUJBQXVpQkMsRUFBRSx3QkFBd0IwQixFQUFFLHNEQUFzRHRCLEVBQUUsNENBQTRDUyxFQUFFdWhDLFNBQVMsb0lBQW9JeDhCLEVBQUUsMEJBQTBCekQsRUFBRSx3REFBd0RELEVBQUUsOENBQThDckIsRUFBRWtnQyxVQUFVLDZKQUE2SnQvQixFQUFFLDRCQUE0QjdCLEVBQUUsMERBQTBERCxFQUFFLGdEQUFnRGtCLEVBQUVtZ0MsU0FBUyw2VUFBZ1YySCxHQUFxQixTQUFTOW5DLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixHQUFHSCxLQUFLd2QsWUFBWSxHQUFHeGQsS0FBSzJqQyxjQUFjLENBQUMsSUFBSSxPQUFPLFlBQVkzRixHQUFHbC9CLEVBQUVjLEdBQUdvK0IsR0FBR2wvQixFQUFFTyxHQUFHLElBQUl6QixFQUFFLE1BQU0sTUFBTWMsSUFBSXMvQixHQUFHbC9CLEVBQUVKLEdBQUdzQixLQUFLMmpDLGNBQWN4aUMsS0FBSyxVQUFVdkQsRUFBRSwwQkFBMEIsSUFBSStCLEVBQUUsTUFBTSxNQUFNdEIsSUFBSTIvQixHQUFHbC9CLEVBQUVULEdBQUcyQixLQUFLMmpDLGNBQWN4aUMsS0FBSyxTQUFTeEIsRUFBRSx5QkFBeUJLLEtBQUt3ZCxZQUFZMWUsRUFBRWtCLEtBQUs0akMsU0FBUyx1TEFBdUxobUMsRUFBRSw0QkFBNEIrQixFQUFFLCtEQUErRFEsRUFBRSwwRkFBNkYwbUMsR0FBcUIsU0FBUy9uQyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBR0gsS0FBSzhqQyxvQkFBbUIsRUFBRzlqQyxLQUFLMmpDLGNBQWMsQ0FBQyxJQUFJLE9BQU8sWUFBWTNGLEdBQUdsL0IsRUFBRWMsR0FBR28rQixHQUFHbC9CLEVBQUVPLEdBQUcsSUFBSXpCLEVBQUUsWUFBWSxNQUFNYyxJQUFJcy9CLEdBQUdsL0IsRUFBRUosR0FBR3NCLEtBQUsyakMsY0FBY3hpQyxLQUFLLFVBQVV2RCxFQUFFLDBCQUEwQixJQUFJK0IsRUFBRSxZQUFZLE1BQU10QixJQUFJMi9CLEdBQUdsL0IsRUFBRVQsR0FBRzJCLEtBQUsyakMsY0FBY3hpQyxLQUFLLFNBQVN4QixFQUFFLHlCQUF5QkssS0FBS3dkLFlBQVkxZSxFQUFFa0IsS0FBSzRqQyxTQUFTLGdEQUFnRGhtQyxFQUFFLDJCQUEyQitCLEVBQUUsb01BQW9NUSxFQUFFLHVFQUFnSzJtQyxHQUFxQixTQUFTaG9DLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUsyakMsY0FBYyxDQUFDLFFBQVEsUUFBUSxRQUFRLFNBQVMzakMsS0FBS3dkLFlBQVl3Z0IsR0FBR3ArQixFQUFFUCxHQUFHVyxLQUFLNGpDLFNBQVMsNEdBQTRHOWtDLEVBQUUsNFNBQStTaW9DLEdBQUcsZ0JBQWdCQyxHQUFHLGdCQUFnQkMsR0FBRyxnQkFBZ0JDLEdBQUcsK0JBQStCQyxHQUFxQixTQUFTcm9DLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUsyakMsY0FBYyxDQUFDLElBQUksS0FBSzNqQyxLQUFLd2QsWUFBWXdnQixHQUFHcCtCLEVBQUVQLEdBQUdXLEtBQUs0akMsU0FBUyw4REFBOEQ5a0MsRUFBRSwwS0FBNktzb0MsR0FBRyxtSUFBbUlDLEdBQXFCLFNBQVN2b0MsRUFBRWMsRUFBRVAsRUFBRVgsUUFBRyxJQUFTQSxJQUFJQSxHQUFFLEdBQUlzQixLQUFLMmpDLGNBQWMsQ0FBQyxJQUFJLEtBQUszakMsS0FBS3NuQyxzQkFBcUIsRUFBR3RuQyxLQUFLOGpDLG9CQUFtQixFQUFHOWpDLEtBQUt3ZCxZQUFZd2dCLEdBQUdwK0IsRUFBRVAsR0FBRyxJQUFJaEIsRUFBRTJCLEtBQUt3ZCxZQUFZdGMsT0FBT2YsRUFBRSxHQUFHLEdBQUd6QixFQUFFLEdBQUcsSUFBSUwsR0FBRyxJQUFJOEYsRUFBRW5FLEtBQUt3ZCxhQUFhcmQsRUFBRSxnR0FBZ0csR0FBR0EsRUFBRSxlQUFlNmxDLEdBQUczbkMsR0FBRyx5Q0FBeUMsSUFBSUEsRUFBRThCLEdBQUcsNENBQTRDSCxLQUFLd2QsWUFBWSxHQUFHLDRGQUE0RixDQUFDLElBQUk1ZixFQUFFdW1DLEdBQUcsU0FBUzlsQyxHQUFHOEIsR0FBRywyREFBMkR2QyxFQUFFUyxFQUFFLEdBQUcsWUFBWTJCLEtBQUt3ZCxZQUFZbmYsRUFBRSxHQUFHLDREQUE0RFQsRUFBRVMsRUFBRSxHQUFHLFlBQVkyQixLQUFLd2QsWUFBWW5mLEVBQUUsR0FBRywwTkFBME4yQixLQUFLNGpDLFNBQVMsMkRBQTJEOWtDLEVBQUUsdUtBQXVLcUIsRUFBRSxpREFBb0RvbkMsR0FBRyxXQUFXLFNBQVN6b0MsRUFBRUEsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLEtBQUszakMsS0FBS3dkLFlBQVkxZSxFQUFFa0IsS0FBSzRqQyxTQUFTLHlSQUF5UixPQUFPOWtDLEVBQUVVLFVBQVVnb0MsbUJBQW1CLFNBQVMxb0MsRUFBRWMsR0FBRyxJQUFJUCxFQUFFVyxLQUFLLE9BQU8sU0FBU3RCLEVBQUVMLEdBQUcsTUFBTWdCLEVBQUVvb0MsU0FBU3BvQyxFQUFFb29DLE9BQU8vb0MsRUFBRWdwQywwQkFBMEJycEMsRUFBRSxVQUFVZ0IsRUFBRXNvQyxPQUFPanBDLEVBQUVncEMsMEJBQTBCcnBDLEVBQUUsV0FBV0ssRUFBRWtwQyxHQUFHQyxVQUFVeG9DLEVBQUVvb0MsT0FBTzNvQyxHQUFHSixFQUFFa3BDLEdBQUdDLFVBQVV4b0MsRUFBRXNvQyxPQUFPL25DLEtBQUtkLEVBQTVtQixHQUFpbkJncEMsR0FBRyxXQUFXLFNBQVNocEMsRUFBRUEsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLEtBQUszakMsS0FBSzhqQyxvQkFBbUIsRUFBRzlqQyxLQUFLd2QsWUFBWTFlLEVBQUVrQixLQUFLNGpDLFNBQVMsMlNBQTJTLE9BQU85a0MsRUFBRVUsVUFBVWdvQyxtQkFBbUIsU0FBUzFvQyxFQUFFYyxHQUFHLElBQUlQLEVBQUVXLEtBQUssT0FBTyxTQUFTdEIsRUFBRUwsR0FBRyxNQUFNZ0IsRUFBRW9vQyxTQUFTcG9DLEVBQUVvb0MsT0FBTy9vQyxFQUFFZ3BDLDBCQUEwQnJwQyxFQUFFLFVBQVVnQixFQUFFc29DLE9BQU9qcEMsRUFBRWdwQywwQkFBMEJycEMsRUFBRSxXQUFXSyxFQUFFa3BDLEdBQUdDLFVBQVV4b0MsRUFBRW9vQyxPQUFPM29DLEdBQUdKLEVBQUVrcEMsR0FBR0MsVUFBVXhvQyxFQUFFc29DLE9BQU8vbkMsS0FBS2QsRUFBenBCLEdBQThwQmlwQyxHQUFxQixTQUFTanBDLEdBQUdrQixLQUFLMmpDLGNBQWMsQ0FBQyxPQUFPLFFBQVEzakMsS0FBS3dkLFlBQVkxZSxFQUFFa0IsS0FBSzRqQyxTQUFTLHNjQUF5Y29FLEdBQXFCLFNBQVNscEMsR0FBR2tCLEtBQUt3ZCxZQUFZLEdBQUd4ZCxLQUFLd2QsWUFBWXdSLEdBQUdsd0IsRUFBRSxHQUFHa0IsS0FBSzJqQyxjQUFjN2tDLEVBQUVvRyxLQUFJLFNBQVNwRyxFQUFFYyxHQUFHLE1BQU0sSUFBSUEsS0FBSSxJQUFJQSxFQUFFLElBQUlHLE1BQU1qQixFQUFFb0MsT0FBTyxHQUFHdEIsRUFBRSxHQUFHZCxFQUFFLEdBQUcsR0FBRyxJQUFJLElBQUlPLEVBQUUsRUFBRUEsRUFBRU8sRUFBRXNCLE9BQU83QixJQUFJTyxFQUFFUCxHQUFHTyxFQUFFUCxFQUFFLEdBQUdQLEVBQUVPLEdBQUcsR0FBRyxJQUFJWCxFQUFFLENBQUMsWUFBWWtCLEVBQUUsR0FBRywrQkFBK0IsSUFBSVAsRUFBRSxFQUFFQSxFQUFFTyxFQUFFc0IsT0FBTzdCLElBQUksQ0FBQyxJQUFJaEIsRUFBRXVCLEVBQUVQLEVBQUUsR0FBR1gsRUFBRXlDLEtBQUssaUJBQWlCdkIsRUFBRVAsR0FBRyxtQkFBbUJBLEVBQUUsV0FBV2hCLEVBQUUsT0FBTyxJQUFJOEIsRUFBRVAsRUFBRXNCLE9BQU90RCxFQUFFZ0MsRUFBRUEsRUFBRXNCLE9BQU8sR0FBR3hDLEVBQUV5QyxLQUFLLHNCQUFzQmhCLEVBQUUsV0FBV3ZDLEVBQUUsT0FBT29DLEtBQUs0akMsU0FBUyx1SUFBdUlsbEMsRUFBRTBFLEtBQUssY0FBYyxtQkFBc0I2a0MsR0FBcUIsU0FBU25wQyxFQUFFYyxHQUFHSSxLQUFLOGpDLG9CQUFtQixFQUFHOWpDLEtBQUt3ZCxZQUFZLEdBQUd4ZCxLQUFLd2QsWUFBWXdSLEdBQUdsd0IsRUFBRWMsR0FBRyxJQUFJUCxFQUFFVyxLQUFLd2QsWUFBWTllLEVBQUVXLEVBQUU2QixPQUFPN0MsRUFBRTJuQyxHQUFHdG5DLEdBQUd5QixFQUFFZ2tDLEdBQUcsU0FBU3psQyxHQUFHZCxFQUFFLENBQUMsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLEtBQUtvSCxNQUFNLEVBQUV0RyxHQUFHc0IsS0FBSzJqQyxjQUFjN2tDLEVBQUVvRyxLQUFJLFNBQVNwRyxFQUFFYyxHQUFHLE1BQU0sSUFBSUEsS0FBSSxJQUFJRCxFQUFFLElBQUlJLE1BQU1qQixFQUFFb0MsT0FBTyxHQUFHdkIsRUFBRSxHQUFHYixFQUFFLEdBQUdjLEdBQUcsSUFBSSxJQUFJUSxFQUFFLEVBQUVBLEVBQUVULEVBQUV1QixPQUFPZCxJQUFJVCxFQUFFUyxHQUFHVCxFQUFFUyxFQUFFLEdBQUd0QixFQUFFc0IsR0FBR1IsR0FBRyxJQUFJL0IsRUFBRUQsRUFBRWdDLEdBQUczQixFQUFFLFFBQVFMLEVBQUVvSCxPQUFPLEdBQUc1QixPQUFPLElBQUlTLEVBQUVqRyxFQUFFd0YsT0FBTzFELEVBQUUsT0FBTzdCLEVBQUUsTUFBTThCLEVBQUUsR0FBRyx3Q0FBd0NrRSxFQUFFLE1BQU01RixFQUFFLEtBQUssSUFBSW1DLEVBQUUsRUFBRUEsRUFBRVQsRUFBRXVCLE9BQU9kLElBQUksQ0FBQyxJQUFJMEQsRUFBRW5FLEVBQUVTLEVBQUUsR0FBR1YsR0FBRyxzQkFBc0I3QixFQUFFLE1BQU04QixFQUFFUyxHQUFHLGtCQUFrQnZDLEVBQUUsT0FBT2lHLEVBQUUsc0NBQXNDMUQsRUFBRSxJQUFJeUQsRUFBRSxNQUFNNUYsRUFBRSxnQkFBZ0IsSUFBSUMsRUFBRXlCLEVBQUV1QixPQUFPeEIsR0FBRywrQkFBK0I3QixFQUFFLE9BQU84QixFQUFFQSxFQUFFdUIsT0FBTyxHQUFHLHNDQUFzQ2hELEVBQUUsSUFBSTJGLEVBQUUsTUFBTTVGLEVBQUUsZ0JBQWdCK0IsS0FBSzRqQyxTQUFTLDBCQUEwQmhtQyxFQUFFc0gsS0FBSSxTQUFTcEcsR0FBRyxNQUFNLE9BQU9BLEtBQUksZ0JBQWdCWSxFQUFFLDZDQUE2Q3JCLEVBQUUscUVBQXFFOEIsRUFBRSxrQ0FBa0NBLEVBQUV6QixFQUFFLEdBQUcsTUFBTVcsRUFBRVgsRUFBRSxHQUFHLHNDQUFzQ3lCLEVBQUUsZ0NBQWdDQSxFQUFFekIsRUFBRSxHQUFHLE1BQU1XLEVBQUVYLEVBQUUsR0FBRyxzQ0FBc0N5QixFQUFFLDhCQUE4QkEsRUFBRXpCLEVBQUUsR0FBRyxNQUFNVyxFQUFFWCxFQUFFLEdBQUcsc0JBQXNCeUIsRUFBRXpCLEVBQUUsR0FBRyxNQUFNVyxFQUFFWCxFQUFFLEdBQUcsc0NBQXNDeUIsRUFBRSw0REFBK0QrbkMsR0FBcUIsU0FBU3BwQyxHQUFHa0IsS0FBSzJqQyxjQUFjLENBQUMsSUFBSSxNQUFNM2pDLEtBQUt3ZCxZQUFZMWUsRUFBRW9oQyxZQUFZLElBQUl0Z0MsRUFBRWQsRUFBRTBnQyxhQUFhbmdDLEVBQUVQLEVBQUUyZ0MsWUFBWS9nQyxFQUFFSSxFQUFFaWdDLFFBQVFQLElBQUluZ0MsRUFBRVMsRUFBRWlnQyxRQUFRTCxLQUFLditCLEVBQUUsaUJBQWlCckIsRUFBRXFnQyxXQUFXbi9CLEtBQUs0akMsU0FBUyx1WUFBdVk5a0MsRUFBRW9nQyxVQUFVLDZDQUE2Q3BnQyxFQUFFa2dDLFVBQVUsNkNBQTZDcC9CLEVBQUUsTUFBTWxCLEVBQUUsd0NBQXdDSSxFQUFFc2dDLFNBQVMsb0ZBQW9GdGdDLEVBQUVtZ0MsU0FBUywrQ0FBK0M1L0IsRUFBRSxNQUFNaEIsRUFBRSwwQ0FBMENTLEVBQUV1Z0MsUUFBUSx3RUFBd0VsL0IsRUFBRSw2YkFBZ2Nnb0MsR0FBcUIsU0FBU3JwQyxHQUFHa0IsS0FBSzJqQyxjQUFjLENBQUMsS0FBSyxLQUFLM2pDLEtBQUt3ZCxZQUFZMWUsRUFBRWtoQyxRQUFRLElBQUlwZ0MsRUFBRWQsRUFBRTRnQyxhQUFhcmdDLEVBQUVQLEVBQUU2Z0MsWUFBWWpoQyxFQUFFSSxFQUFFMGdDLGFBQWFuaEMsRUFBRVMsRUFBRTJnQyxZQUFZdC9CLEVBQUUsaUJBQWlCckIsRUFBRXFnQyxXQUFXdmhDLEVBQUVnQyxFQUFFLEVBQUVkLEVBQUVpZ0MsUUFBUVAsSUFBSTcrQixFQUFFTixFQUFFLEVBQUVQLEVBQUVpZ0MsUUFBUUwsS0FBS3QrQixFQUFFRCxFQUFFLEVBQUUsRUFBRXRDLEVBQUVzQyxFQUFFLEVBQUUsRUFBRWxDLEVBQUVrQyxFQUFFLEVBQUUsRUFBRUgsS0FBSzRqQyxTQUFTLG9DQUFvQ2htQyxFQUFFLEtBQUsrQixFQUFFLGlJQUFpSTFCLEVBQUUsK0NBQStDbUMsRUFBRSxhQUFhdkMsRUFBRSwrU0FBK1MrQixFQUFFLDREQUE0RGxCLEVBQUUsNENBQTRDSSxFQUFFa2dDLFVBQVUsMkhBQTJIcC9CLEVBQUUsaURBQWlEUCxFQUFFLDhEQUE4RGhCLEVBQUUsOENBQThDUyxFQUFFbWdDLFNBQVMsb0pBQW9KNS9CLEVBQUUsbURBQW1EUCxFQUFFeWdDLFlBQVksa0NBQWtDcC9CLEVBQUUsdWRBQTBkaW9DLEdBQXFCLFNBQVN0cEMsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLElBQUksTUFBTTNqQyxLQUFLd2QsWUFBWTFlLEVBQUVvaEMsWUFBWSxJQUFJdGdDLEVBQUVkLEVBQUV5aEMsWUFBWWxoQyxFQUFFUCxFQUFFMGdDLGFBQWE5Z0MsRUFBRUksRUFBRTJnQyxZQUFZcGhDLEVBQUVTLEVBQUVpZ0MsUUFBUW9CLE1BQU1oZ0MsRUFBRXJCLEVBQUVpZ0MsUUFBUVAsSUFBSTVnQyxFQUFFa0IsRUFBRWlnQyxRQUFRTCxLQUFLMStCLEtBQUs0akMsU0FBUywrUUFBK1E5a0MsRUFBRW9nQyxVQUFVLDZDQUE2Q3BnQyxFQUFFdWhDLFNBQVMsNkNBQTZDemdDLEVBQUUsTUFBTXZCLEVBQUUsd0NBQXdDUyxFQUFFd2hDLFFBQVEsb0ZBQW9GeGhDLEVBQUVrZ0MsVUFBVSwrQ0FBK0MzL0IsRUFBRSxNQUFNYyxFQUFFLDBDQUEwQ3JCLEVBQUVzZ0MsU0FBUywwRkFBMEZ0Z0MsRUFBRW1nQyxTQUFTLGlEQUFpRHZnQyxFQUFFLE1BQU1kLEVBQUUsNENBQTRDa0IsRUFBRXVnQyxRQUFRLGlVQUFvVWdKLEdBQXFCLFNBQVN2cEMsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLEtBQUssS0FBSzNqQyxLQUFLd2QsWUFBWTFlLEVBQUVraEMsUUFBUSxJQUFJcGdDLEVBQUVkLEVBQUUwaEMsWUFBWW5oQyxFQUFFUCxFQUFFNGdDLGFBQWFoaEMsRUFBRUksRUFBRTZnQyxZQUFZdGhDLEVBQUVTLEVBQUV5aEMsWUFBWXBnQyxFQUFFckIsRUFBRTBnQyxhQUFhNWhDLEVBQUVrQixFQUFFMmdDLFlBQVk5L0IsRUFBRUMsRUFBRSxFQUFFZCxFQUFFaWdDLFFBQVFvQixNQUFNLy9CLEVBQUVmLEVBQUUsRUFBRVAsRUFBRWlnQyxRQUFRUCxJQUFJM2dDLEVBQUVhLEVBQUUsRUFBRUksRUFBRWlnQyxRQUFRTCxLQUFLMStCLEtBQUs0akMsU0FBUyxvQ0FBb0Nqa0MsRUFBRSxLQUFLUyxFQUFFLEtBQUt2QyxFQUFFLDJYQUEyWCtCLEVBQUUsNERBQTREdkIsRUFBRSw0Q0FBNENTLEVBQUV1aEMsU0FBUywySEFBMkh6Z0MsRUFBRSxpREFBaURQLEVBQUUsOERBQThEYyxFQUFFLDhDQUE4Q3JCLEVBQUVrZ0MsVUFBVSxrSkFBa0ozL0IsRUFBRSxtREFBbURYLEVBQUUsZ0VBQWdFZCxFQUFFLGdEQUFnRGtCLEVBQUVtZ0MsU0FBUyw4SkFBOEp2Z0MsRUFBRSxxREFBcURJLEVBQUV5Z0MsWUFBWSx3U0FBMlMrSSxHQUFxQixTQUFTeHBDLEdBQUdrQixLQUFLMmpDLGNBQWMsQ0FBQyxJQUFJLE1BQU0zakMsS0FBS3dkLFlBQVkxZSxFQUFFb2hDLFlBQVksSUFBSXRnQyxFQUFFZCxFQUFFMGdDLGFBQWFuZ0MsRUFBRVAsRUFBRTJnQyxZQUFZL2dDLEVBQUVJLEVBQUVpZ0MsUUFBUVAsSUFBSW5nQyxFQUFFUyxFQUFFaWdDLFFBQVFMLEtBQUt2K0IsRUFBRXJCLEVBQUV5Z0MsWUFBWXpnQyxFQUFFd2dDLFdBQVd0L0IsS0FBSzRqQyxTQUFTLDJNQUEyTXpqQyxFQUFFLHFIQUFxSHJCLEVBQUVvZ0MsVUFBVSw2Q0FBNkNwZ0MsRUFBRWtnQyxVQUFVLDZDQUE2Q3AvQixFQUFFLE1BQU1sQixFQUFFLHdDQUF3Q0ksRUFBRXNnQyxTQUFTLG9GQUFvRnRnQyxFQUFFbWdDLFNBQVMsK0NBQStDNS9CLEVBQUUsTUFBTWhCLEVBQUUsMENBQTBDUyxFQUFFdWdDLFFBQVEsOFJBQWlTa0osR0FBcUIsU0FBU3pwQyxHQUFHa0IsS0FBSzJqQyxjQUFjLENBQUMsS0FBSyxLQUFLM2pDLEtBQUt3ZCxZQUFZMWUsRUFBRWtoQyxRQUFRLElBQUlwZ0MsRUFBRWQsRUFBRTRnQyxhQUFhcmdDLEVBQUVQLEVBQUU2Z0MsWUFBWWpoQyxFQUFFSSxFQUFFMGdDLGFBQWFuaEMsRUFBRVMsRUFBRTJnQyxZQUFZdC9CLEVBQUVQLEVBQUUsRUFBRWQsRUFBRWlnQyxRQUFRUCxJQUFJNWdDLEVBQUV5QixFQUFFLEVBQUVQLEVBQUVpZ0MsUUFBUUwsS0FBSy8rQixFQUFFYixFQUFFeWdDLFlBQVl6Z0MsRUFBRXdnQyxXQUFXdC9CLEtBQUs0akMsU0FBUyxvQ0FBb0N6akMsRUFBRSxLQUFLdkMsRUFBRSw0VEFBNFRnQyxFQUFFLDREQUE0RGxCLEVBQUUsNENBQTRDSSxFQUFFa2dDLFVBQVUsMkhBQTJIcC9CLEVBQUUsaURBQWlEUCxFQUFFLDhEQUE4RGhCLEVBQUUsOENBQThDUyxFQUFFbWdDLFNBQVMsb0pBQW9KNS9CLEVBQUUsbUdBQW1HTSxFQUFFLDBDQUEwQ0EsRUFBRSxnUUFBbVE2b0MsR0FBcUIsU0FBUzFwQyxFQUFFYyxFQUFFUCxFQUFFWCxRQUFHLElBQVNrQixJQUFJQSxHQUFFLFFBQUksSUFBU1AsSUFBSUEsRUFBRSxXQUFNLElBQVNYLElBQUlBLEdBQUUsR0FBSXNCLEtBQUsyakMsY0FBYyxDQUFDLElBQUksS0FBSzNqQyxLQUFLd2QsWUFBWTFlLEVBQUVtaEMsU0FBUyxJQUFJNWhDLEVBQUVTLEVBQUVpZ0MsUUFBUVAsSUFBSXIrQixFQUFFckIsRUFBRWlnQyxRQUFRTCxLQUFLOWdDLEVBQUVrQixFQUFFMGdDLGFBQWE3L0IsRUFBRWIsRUFBRTJnQyxZQUFZci9CLEVBQUV0QixFQUFFZ2hDLGVBQWVqaUMsRUFBRWlCLEVBQUVpaEMsY0FBYzloQyxFQUFFYSxFQUFFNGdDLGFBQWE3N0IsRUFBRS9FLEVBQUU2Z0MsWUFBWWpnQyxFQUFFLEVBQUUrRCxLQUFLOEksTUFBTXpOLEVBQUV3Z0MsV0FBVyxHQUFHeDdCLEVBQUVoRixFQUFFd2dDLFdBQVcsRUFBRXBoQyxFQUFFLGlCQUFpQlksRUFBRXFnQyxXQUFXbjdCLEVBQUU5RixFQUFFLEVBQUUsRUFBRUYsRUFBRUUsRUFBRSxFQUFFLEVBQUVpRyxFQUFFakcsRUFBRSxFQUFFLEVBQUU2RixFQUFFLEdBQUdLLEVBQUUsR0FBRy9FLElBQUkwRSxFQUFFckYsRUFBRSx1R0FBdUdXLEVBQUUsY0FBYyx3REFBd0RBLEVBQUUsMEJBQTBCK0UsRUFBRSxnQ0FBZ0MsSUFBSUMsRUFBRXpFLEVBQUUsa0NBQWtDLEdBQUdBLEdBQUdJLEtBQUsyakMsY0FBY3hpQyxLQUFLLFFBQVF6QyxHQUFHc0IsS0FBSzJqQyxjQUFjeGlDLEtBQUssMEJBQTBCbkIsS0FBSzRqQyxTQUFTLFdBQVc3L0IsRUFBRSx5Q0FBeUNuRyxFQUFFLEtBQUsrQixFQUFFLHNDQUFzQ3RCLEVBQUUsS0FBSzhCLEVBQUUsaUlBQWlJZ0UsRUFBRSw2REFBNkRILEVBQUUsYUFBYWhHLEVBQUUsbVRBQW1UQyxFQUFFLGlEQUFpRG1DLEVBQUUsc0NBQXNDdEIsRUFBRXNnQyxTQUFTLDhFQUE4RXY3QixFQUFFLG1EQUFtRGhHLEVBQUUsd0NBQXdDaUIsRUFBRXVnQyxRQUFRLG9GQUFvRjMvQixFQUFFLGtRQUFrUXhCLEVBQUUsbXFCQUFtcUIsSUFBSTRGLEdBQUcsNEJBQTRCNUYsRUFBRSw0RUFBNEV3QixFQUFFLHlDQUF5Q0EsRUFBRSwrRkFBK0ZBLEVBQUUsaURBQWlEQSxFQUFFLHNEQUFzRCxJQUFJb0UsR0FBRyx5RUFBeUVwRSxFQUFFLHdDQUF3Q0EsRUFBRSxvREFBb0R4QixFQUFFLG9GQUFvRndCLEVBQUUsNkNBQTZDQSxFQUFFLDZLQUE2S0EsRUFBRSw2Q0FBNkNBLEVBQUUsb0lBQW9JLElBQUlvRSxHQUFHLHlFQUF5RXBFLEVBQUUsd0NBQXdDQSxFQUFFLDRDQUE0Q0EsRUFBRSxvREFBb0R4QixFQUFFLG9GQUFvRndCLEVBQUUsNkNBQTZDQSxFQUFFLGlEQUFpREEsRUFBRSw2S0FBNktBLEVBQUUsNkNBQTZDQSxFQUFFLGlEQUFpREEsRUFBRSw4TEFBOEwyRSxFQUFFLGFBQWFELEVBQUUsK0NBQWtEcWtDLEdBQXFCLFNBQVMzcEMsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLElBQUksS0FBSzNqQyxLQUFLd2QsWUFBWTFlLEVBQUVtaEMsU0FBUyxJQUFJcmdDLEVBQUVkLEVBQUVpZ0MsUUFBUW9CLE1BQU05Z0MsRUFBRVAsRUFBRWlnQyxRQUFRUCxJQUFJOS9CLEVBQUVJLEVBQUVpZ0MsUUFBUUwsS0FBS3JnQyxFQUFFUyxFQUFFeWhDLFlBQVlwZ0MsRUFBRXJCLEVBQUUwZ0MsYUFBYTVoQyxFQUFFa0IsRUFBRTJnQyxZQUFZOS9CLEVBQUViLEVBQUU0aEMsY0FBY3RnQyxFQUFFdEIsRUFBRWdoQyxlQUFlamlDLEVBQUVpQixFQUFFaWhDLGNBQWM5aEMsRUFBRWEsRUFBRTBoQyxZQUFZMzhCLEVBQUUvRSxFQUFFNGdDLGFBQWFoZ0MsRUFBRVosRUFBRTZnQyxZQUFZNzdCLEVBQUUsRUFBRUwsS0FBSzhJLE1BQU16TixFQUFFd2dDLFdBQVcsR0FBR3BoQyxFQUFFWSxFQUFFd2dDLFdBQVcsRUFBRXQvQixLQUFLNGpDLFNBQVMsdUNBQXVDdmxDLEVBQUUsS0FBSzhCLEVBQUUsS0FBS3ZDLEVBQUUsc0NBQXNDZ0MsRUFBRSxLQUFLUCxFQUFFLEtBQUtYLEVBQUUsZ2pCQUFnakJULEVBQUUsaURBQWlEMEIsRUFBRSxzQ0FBc0NiLEVBQUV3aEMsUUFBUSw4RUFBOEV6OEIsRUFBRSxtREFBbUR6RCxFQUFFLHdDQUF3Q3RCLEVBQUVzZ0MsU0FBUyxvRkFBb0YxL0IsRUFBRSxxREFBcUQ3QixFQUFFLDBDQUEwQ2lCLEVBQUV1Z0MsUUFBUSwwRkFBMEZ2N0IsRUFBRSwwbUJBQTBtQixJQUFJNUYsR0FBRyw4RUFBOEU0RixFQUFFLDJDQUEyQ0EsRUFBRSxxQ0FBcUMsSUFBSTVGLEdBQUcsd0ZBQXdGNEYsRUFBRSxpREFBaURBLEVBQUUsdUdBQXVHQSxFQUFFLDhDQUE4Q0EsRUFBRSwrR0FBK0csSUFBSTVGLEdBQUcsd0ZBQXdGNEYsRUFBRSxpREFBaURBLEVBQUUscURBQXFEQSxFQUFFLHVHQUF1R0EsRUFBRSw4Q0FBOENBLEVBQUUsa0RBQWtEQSxFQUFFLHdMQUEyTDRrQyxHQUFxQixTQUFTNXBDLEdBQUdrQixLQUFLMmpDLGNBQWMsQ0FBQyxJQUFJLEtBQUszakMsS0FBS3dkLFlBQVkxZSxFQUFFbWhDLFNBQVMsSUFBSXJnQyxFQUFFZCxFQUFFc2dDLFNBQVMvL0IsRUFBRVAsRUFBRXVnQyxRQUFRM2dDLEVBQUVJLEVBQUVpZ0MsUUFBUVAsSUFBSW5nQyxFQUFFUyxFQUFFaWdDLFFBQVFMLEtBQUt2K0IsRUFBRXJCLEVBQUUwZ0MsYUFBYTVoQyxFQUFFa0IsRUFBRTJnQyxZQUFZOS9CLEVBQUViLEVBQUVnaEMsZUFBZTEvQixFQUFFdEIsRUFBRWloQyxjQUFjbGlDLEVBQUVpQixFQUFFNGdDLGFBQWF6aEMsRUFBRWEsRUFBRTZnQyxZQUFZOTdCLEVBQUUvRSxFQUFFeWdDLFlBQVl6Z0MsRUFBRXdnQyxXQUFXdC9CLEtBQUs0akMsU0FBUyx1Q0FBdUN6akMsRUFBRSxLQUFLdkMsRUFBRSxzQ0FBc0NjLEVBQUUsS0FBS0wsRUFBRSxpTkFBaU53RixFQUFFLGdDQUFnQ0EsRUFBRSxpWEFBaVhoRyxFQUFFLGlEQUFpRDhCLEVBQUUsc0NBQXNDQyxFQUFFLDhFQUE4RTNCLEVBQUUsbURBQW1EbUMsRUFBRSx3Q0FBd0NmLEVBQUUsNFBBQStQc3BDLEdBQXFCLFNBQVM3cEMsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLElBQUksS0FBSzNqQyxLQUFLOGpDLG9CQUFtQixFQUFHOWpDLEtBQUt3ZCxZQUFZMWUsRUFBRW1oQyxTQUFTLElBQUksSUFBSXJnQyxFQUFFZCxFQUFFc2dDLFNBQVMvL0IsRUFBRVAsRUFBRXVnQyxRQUFRM2dDLEVBQUVJLEVBQUVpZ0MsUUFBUVAsSUFBSW5nQyxFQUFFUyxFQUFFaWdDLFFBQVFMLEtBQUt2K0IsRUFBRXJCLEVBQUUwZ0MsYUFBYTVoQyxFQUFFa0IsRUFBRTJnQyxZQUFZOS9CLEVBQUViLEVBQUVnaEMsZUFBZTEvQixFQUFFdEIsRUFBRWloQyxjQUFjbGlDLEVBQUVpQixFQUFFNGdDLGFBQWF6aEMsRUFBRWEsRUFBRTZnQyxZQUFZamdDLEVBQUV6QixFQUFFNkYsRUFBRSxnQ0FBZ0M1RixFQUFFLEVBQUVBLEVBQUVMLEVBQUVLLElBQUksSUFBSSxJQUFJOEYsRUFBRSxFQUFFQSxFQUFFL0YsRUFBRStGLElBQUlGLEdBQUcsMkJBQTJCNUYsRUFBRSxJQUFJLEVBQUU4RixFQUFFLGtDQUFrQzlGLEVBQUUsSUFBSThGLEVBQUUsa0NBQWtDOUYsRUFBRSxJQUFJOEYsRUFBRSxlQUFlLElBQUk5RixFQUFFLEVBQUVBLEVBQUVMLEVBQUVLLElBQUksSUFBSSxJQUFJRixFQUFFLEVBQUVBLEVBQUUwQixFQUFFMUIsSUFBSSxDQUFDLEdBQUc4RixHQUFHLCtCQUErQjVGLEVBQUV5QixFQUFFLGlDQUFpQ3FFLEVBQUUsRUFBRWhHLEdBQUdvQyxFQUFFLGNBQWMsSUFBSXhDLEdBQUcsR0FBR29HLEVBQUUvRixJQUFJNkYsR0FBR3pGLEVBQUUsR0FBRyxFQUFFLDRFQUE0RXVCLEVBQUUsbUNBQW1DUCxFQUFFLGlDQUFpQ25CLEVBQUUsSUFBSThGLEVBQUUseUZBQXlGOUYsRUFBRSxJQUFJOEYsRUFBRSxpSEFBaUhwRSxFQUFFLG1DQUFtQ1AsRUFBRSw4RkFBOEZuQixFQUFFLElBQUk4RixFQUFFLCtCQUErQjlGLEVBQUUsSUFBSThGLEVBQUUsd0RBQXdEOUYsRUFBRSxJQUFJOEYsRUFBRSx3QkFBd0I5RixFQUFFLElBQUk4RixFQUFFLDJDQUEyQyx3Q0FBd0NwRSxFQUFFLHVCQUF1QlAsRUFBRSxpQ0FBaUNuQixFQUFFLElBQUk4RixFQUFFLG1GQUFtRjlGLEVBQUUsSUFBSThGLEVBQUUsd0RBQXdEOUYsRUFBRSxJQUFJOEYsRUFBRSxhQUFhOUYsRUFBRSxJQUFJOEYsRUFBRSxvQkFBb0JBLEVBQUUsRUFBRS9GLEdBQUcsQ0FBQyxJQUFJa0csRUFBRTlGLEVBQUUsR0FBRyxFQUFFd0YsRUFBRXpELEdBQUdBLEVBQUVBLEVBQUUsR0FBRyxHQUFHL0IsRUFBRSxHQUFHLEdBQUcrQixFQUFFLEdBQUcsR0FBRy9CLEVBQUUsR0FBRyxHQUFHeUYsR0FBRyx1Q0FBdUN6RixFQUFFLEVBQUUsTUFBTThGLEVBQUUsNkNBQTZDdkUsRUFBRSx3REFBd0RQLEVBQUUsbUNBQW1DbkIsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLDJFQUEyRTVELEVBQUUsSUFBSTBELEdBQUcsZ0ZBQWdGbEUsRUFBRSwwREFBMERQLEVBQUUscUNBQXFDbkIsRUFBRSxJQUFJOEYsRUFBRSxpR0FBaUc5RixFQUFFLElBQUk4RixFQUFFLDJEQUEyREYsR0FBRyx5QkFBeUI1RixFQUFFLEtBQUs4RixFQUFFLEdBQUcsd0NBQXdDOUYsRUFBRSxJQUFJOEYsRUFBRSxlQUFlOUYsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLDJCQUEyQkYsR0FBRyx1Q0FBdUNLLEVBQUUsNkNBQTZDdkUsRUFBRSx3REFBd0RQLEVBQUUsbUNBQW1DbkIsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLGlGQUFpRjlGLEVBQUUsS0FBSzhGLEVBQUUsR0FBRyxhQUFhOUYsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLDRCQUE0QkEsRUFBRS9GLElBQUk2RixHQUFHLHNDQUFzQ2xFLEVBQUUsb0JBQW9CdkIsRUFBRSxHQUFHLEdBQUd5RixHQUFHLHlDQUF5Q2xHLEVBQUUscURBQXFEeUIsRUFBRSxpQ0FBaUNuQixFQUFFLElBQUk4RixFQUFFLHlGQUF5RjlGLEVBQUUsSUFBSThGLEVBQUUsaUZBQWlGM0UsRUFBRSxpQ0FBaUNuQixFQUFFLEtBQUs4RixFQUFFLEdBQUcsdUZBQXVGOUYsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLHdEQUF3RDlGLEVBQUUsSUFBSThGLEVBQUUsc0NBQXNDOUYsRUFBRSxJQUFJOEYsRUFBRSxlQUFlOUYsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLHdCQUF3QkEsRUFBRSxFQUFFL0YsSUFBSTZGLEdBQUcscUZBQXFGbEcsRUFBRSx1REFBdUR5QixFQUFFLDZHQUE2R25CLEVBQUUsS0FBSzhGLEVBQUUsR0FBRyxrQkFBa0I5RixFQUFFLEtBQUs4RixFQUFFLEdBQUcsdUNBQXVDRixHQUFHLHdDQUF3Q3pFLEVBQUUsaUNBQWlDbkIsRUFBRSxJQUFJOEYsRUFBRSxtRkFBbUY5RixFQUFFLElBQUk4RixFQUFFLHNFQUFzRXBHLEVBQUUscURBQXFEeUIsRUFBRSxpQ0FBaUNuQixFQUFFLEtBQUs4RixFQUFFLEdBQUcseUZBQXlGOUYsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLHdEQUF3RDlGLEVBQUUsSUFBSThGLEVBQUUsc0NBQXNDOUYsRUFBRSxJQUFJOEYsRUFBRSxlQUFlOUYsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLHdCQUF3QkEsRUFBRSxFQUFFL0YsSUFBSTZGLEdBQUcseUJBQXlCNUYsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLHdDQUF3QzlGLEVBQUUsSUFBSThGLEVBQUUsZUFBZTlGLEVBQUUsS0FBSzhGLEVBQUUsR0FBRyw0QkFBNEJGLEdBQUcsS0FBS0UsRUFBRS9GLElBQUk2RixHQUFHLDZCQUE2QjVGLEVBQUUsSUFBSThGLEVBQUUsV0FBVzlGLEVBQUUsS0FBSzhGLEVBQUUsNEJBQTRCOUYsRUFBRSxJQUFJOEYsRUFBRSxrQkFBa0I5RixFQUFFLElBQUk4RixFQUFFLGVBQWU5RixFQUFFLElBQUk4RixFQUFFLG9CQUFvQkEsRUFBRSxFQUFFL0YsSUFBSTZGLEdBQUcsK0JBQStCNUYsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLFdBQVc5RixFQUFFLE1BQU04RixFQUFFLEdBQUcsOEJBQThCOUYsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLG1DQUFtQzlGLEVBQUUsS0FBSzhGLEVBQUUsR0FBRyxlQUFlOUYsRUFBRSxLQUFLOEYsRUFBRSxHQUFHLFVBQVUsSUFBSTlGLEVBQUUsRUFBRUEsRUFBRUwsRUFBRUssSUFBSSxJQUFJOEYsRUFBRSxFQUFFQSxFQUFFL0YsRUFBRStGLElBQUlGLEdBQUcsZUFBZTVGLEVBQUUsSUFBSThGLEVBQUUsUUFBUTlGLEVBQUUsSUFBSThGLEVBQUUsSUFBSWhFLEtBQUs0akMsU0FBUyx1Q0FBdUN6akMsRUFBRSxLQUFLdkMsRUFBRSxzQ0FBc0NjLEVBQUUsS0FBS0wsRUFBRSw4VkFBOFZ5RixFQUFFLGlEQUFvRDhrQyxHQUFxQixTQUFTOXBDLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcyQixLQUFLMmpDLGNBQWMsQ0FBQyxRQUFRLFFBQVEsVUFBVTNqQyxLQUFLd2QsWUFBWSxHQUFHLElBQUlyZCxFQUFFckIsRUFBRSxHQUFHbEIsRUFBRWtCLEVBQUUsR0FBR2EsRUFBRWIsRUFBRSxHQUFHc0IsRUFBRXRCLEVBQUUsR0FBR2pCLEVBQUUrQixFQUFFLEdBQUczQixFQUFFb0IsRUFBRSxHQUFHd0UsRUFBRXhFLEVBQUUsR0FBR1csS0FBS3dkLFlBQVksQ0FBQzNmLEVBQUVJLEVBQUU0RixFQUFFekQsR0FBRyxJQUFJVixFQUFFLGFBQWFoQixFQUFFLEVBQUUsRUFBRW9GLEVBQUUsQ0FBQ2xHLEVBQUUsRUFBRSxLQUFLK0IsRUFBRSxFQUFFLE1BQU16QixFQUFFNEYsRUFBRSxHQUFHRSxFQUFFRixFQUFFLEdBQUc5RixFQUFFQyxFQUFFLEVBQUUsQ0FBQyxJQUFJTCxFQUFFLElBQUlLLEVBQUUsR0FBRyx5QkFBeUIsTUFBTUMsRUFBRSw4QkFBOEIsQ0FBQyxNQUFNLE1BQU0sbUJBQW1CQSxHQUFHaUcsRUFBRW5HLEVBQUUsR0FBRytGLEVBQUUvRixFQUFFLEdBQUdvRyxFQUFFcEcsRUFBRSxHQUFHcUcsRUFBRVIsRUFBRSxFQUFFLENBQUMsSUFBSWxFLEVBQUUsSUFBSWtFLEVBQUUsR0FBRyx3QkFBd0IsTUFBTUcsRUFBRSw2QkFBNkIsQ0FBQyxNQUFNLE1BQU0sbUJBQW1CQSxHQUFHUSxFQUFFSCxFQUFFLEdBQUdNLEVBQUVOLEVBQUUsR0FBR1EsRUFBRVIsRUFBRSxHQUFHckUsS0FBSzRqQyxTQUFTLDRDQUE0Q3ovQixFQUFFLDZDQUE2Q0ssRUFBRSw2Y0FBNmNyRSxFQUFFLHFFQUFxRTRELEVBQUUsa0NBQWtDWSxFQUFFLDZCQUE2QlAsRUFBRSx1Q0FBdUNsRyxFQUFFLG1DQUFtQ0csRUFBRSwyREFBMkR3RyxFQUFFLHVDQUF1Q2IsRUFBRSxtQ0FBbUMzRixFQUFFLHNHQUFzR3FCLEVBQUUsc21DQUF5bUNtcEMsR0FBcUIsU0FBUy9wQyxFQUFFYyxFQUFFUCxHQUFHVyxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUt3ZCxZQUFZMWUsRUFBRSxJQUFJSixFQUFFSSxFQUFFb0MsT0FBTzdDLEVBQUVTLEVBQUVBLEVBQUVvQyxPQUFPLEdBQUdmLEVBQUVkLEVBQUUsSUFBSSxJQUFJVyxLQUFLNGpDLFNBQVMsMkNBQTJDdmtDLEVBQUUsVUFBVWhCLEVBQUUsV0FBVyxhQUFhLDZDQUE2QzJuQyxHQUFHdG5DLEdBQUcsbURBQW1Eb3FDLEdBQUdwcUMsRUFBRSxVQUFVLHFEQUFxREwsRUFBRSxnRkFBZ0Y4QixFQUFFLDRFQUE0RVAsRUFBRSxzREFBc0RrcEMsR0FBR3BxQyxFQUFFLFVBQVUsa0NBQWtDLFNBQVNJLEVBQUVjLEdBQUcsR0FBRyxJQUFJZCxFQUFFLE1BQU0sR0FBR2MsRUFBRSxHQUFHLElBQUlkLEVBQUUsT0FBT2MsRUFBRSxPQUFPQSxFQUFFLEtBQUssR0FBRyxJQUFJZCxFQUFFLE9BQU9jLEVBQUUsT0FBT0EsRUFBRSxPQUFPQSxFQUFFLEtBQUssR0FBRyxJQUFJZCxFQUFFLE9BQU9jLEVBQUUsT0FBT0EsRUFBRSxPQUFPQSxFQUFFLE9BQU9BLEVBQUUsS0FBSyxNQUFNMkMsTUFBTSwyQkFBMkJ6RCxFQUFFLHlCQUF0TSxDQUFnT0osRUFBRSxVQUFVLHlEQUE0RCxTQUFTb3FDLEdBQUdocUMsRUFBRWMsR0FBRyxHQUFHLElBQUlkLEVBQUUsTUFBTSxHQUFHYyxFQUFFLEdBQUcsSUFBSWQsRUFBRSxPQUFPYyxFQUFFLEtBQUssR0FBRyxJQUFJZCxFQUFFLE9BQU9jLEVBQUUsS0FBSyxHQUFHLElBQUlkLEVBQUUsT0FBT2MsRUFBRSxLQUFLLE1BQU0yQyxNQUFNLDJCQUEyQnpELEVBQUUseUJBQXlCLElBQUlpcUMsR0FBcUIsU0FBU2pxQyxFQUFFYyxHQUFHSSxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLLElBQUl0a0MsRUFBRStrQyxLQUFLcGtDLEtBQUt3ZCxZQUFZMWUsRUFBRWtCLEtBQUs0akMsU0FBUyw4REFBOERtQixHQUFHLENBQUMsSUFBSSxJQUFJLEtBQUtqbUMsR0FBRyxrSUFBa0ljLEVBQUUsR0FBRyxLQUFLQSxFQUFFLEdBQUcsOENBQThDQSxFQUFFLEdBQUcsK1BBQStQUCxFQUFFcWxDLE9BQU8sNkJBQWdDc0UsR0FBcUIsU0FBU2xxQyxFQUFFYyxHQUFHSSxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUs4akMsb0JBQW1CLEVBQUcsSUFBSXprQyxFQUFFK2tDLEtBQUtwa0MsS0FBS3dkLFlBQVkxZSxFQUFFa0IsS0FBSzRqQyxTQUFTLDhEQUE4RG1CLEdBQUcsQ0FBQyxJQUFJLElBQUksS0FBS2ptQyxHQUFHLGtJQUFrSWMsRUFBRSxHQUFHLEtBQUtBLEVBQUUsR0FBRyw4Q0FBOENBLEVBQUUsR0FBRyw2UkFBNlJQLEVBQUVxbEMsT0FBTyw2QkFBZ0N1RSxHQUFHLFdBQVcsU0FBU25xQyxFQUFFQSxFQUFFYyxFQUFFUCxHQUFHVyxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUt3ZCxZQUFZLEdBQUd4ZCxLQUFLd2QsWUFBWTFlLEVBQUVrQixLQUFLa3BDLFVBQVV0cEMsRUFBRUksS0FBS20vQixXQUFXOS9CLEVBQUVXLEtBQUs0akMsU0FBUyx5R0FBeUc1akMsS0FBS21wQyx1QkFBdUIsb0JBQW9CbnBDLEtBQUtvcEMsc0JBQXNCLG9CQUFvQnBwQyxLQUFLcXBDLHNCQUFzQiw2QkFBNkJ6cEMsRUFBRSxtQ0FBbUNBLEVBQUUsNEJBQTRCQSxFQUFFLG1DQUFtQ0EsRUFBRSx3Q0FBd0NBLEVBQUUsMkJBQTJCSSxLQUFLc3BDLHFCQUFxQiw2REFBNkR0cEMsS0FBS3VwQyx5QkFBeUIseUNBQXlDLE9BQU96cUMsRUFBRVUsVUFBVTJwQyxxQkFBcUIsV0FBVyxNQUFNLFNBQVNucEMsS0FBS20vQixXQUFXLFlBQVksYUFBYXJnQyxFQUFFVSxVQUFVNHBDLG9CQUFvQixXQUFXLE1BQU0sU0FBU3BwQyxLQUFLbS9CLFdBQVcsWUFBWSxhQUFhcmdDLEVBQUVVLFVBQVU2cEMsb0JBQW9CLFdBQVcsTUFBTSxTQUFTcnBDLEtBQUttL0IsV0FBVyxZQUFZLGFBQWFyZ0MsRUFBRVUsVUFBVThwQyxtQkFBbUIsV0FBVyxNQUFNLFNBQVN0cEMsS0FBS20vQixXQUFXbi9CLEtBQUt3ZCxZQUFZLEdBQUd4ZCxLQUFLd2QsWUFBWSxJQUFJMWUsRUFBRVUsVUFBVStwQyx1QkFBdUIsV0FBVyxNQUFNLFNBQVN2cEMsS0FBS20vQixXQUFXLDRCQUE0Qiw2QkFBNkJyZ0MsRUFBcHdDLEdBQXl3QzBxQyxHQUFxQixTQUFTMXFDLEdBQUdrQixLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUt3ZCxZQUFZLENBQUMxZSxFQUFFQSxHQUFHa0IsS0FBSzRqQyxTQUFTLHVMQUEwTDZGLEdBQXFCLFNBQVMzcUMsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLEtBQUssSUFBSS9qQyxFQUFFd2tDLEtBQUtwa0MsS0FBS3dkLFlBQVkxZSxFQUFFa0IsS0FBSzRqQyxTQUFTLFdBQVdxQixHQUFHLDBFQUEwRXJsQyxFQUFFOGtDLE9BQU8sc0NBQXlDZ0YsR0FBcUIsU0FBUzVxQyxHQUFHa0IsS0FBSzJqQyxjQUFjLENBQUMsS0FBSzNqQyxLQUFLOGpDLG9CQUFtQixFQUFHLElBQUlsa0MsRUFBRXdrQyxLQUFLcGtDLEtBQUt3ZCxZQUFZMWUsRUFBRWtCLEtBQUs0akMsU0FBUyxXQUFXcUIsR0FBRywySkFBMkpybEMsRUFBRThrQyxPQUFPLHNDQUF5Q2lGLEdBQXFCLFNBQVM3cUMsRUFBRWMsRUFBRVAsUUFBRyxJQUFTQSxJQUFJQSxHQUFFLEdBQUlXLEtBQUsyakMsY0FBYyxDQUFDLEtBQUssSUFBSWpsQyxFQUFFMGxDLEtBQUsvbEMsRUFBRXVCLEVBQUUsR0FBR08sRUFBRVAsRUFBRSxHQUFHSSxLQUFLd2QsWUFBWTFlLEVBQUUsSUFBSWxCLEVBQUUsU0FBU3lCLElBQUl6QixFQUFFLDhCQUE4Qm9DLEtBQUs0akMsU0FBUyxXQUFXb0IsR0FBR2xtQyxHQUFHLHVQQUF1UHFCLEVBQUUsc0NBQXNDQSxFQUFFLHNEQUFzREEsRUFBRSxPQUFPOUIsRUFBRSwrQkFBK0JLLEVBQUUrbEMsVUFBVSwwU0FBMFMvbEMsRUFBRWdtQyxPQUFPLFdBQVc5bUMsRUFBRSxpQ0FBb0Nnc0MsR0FBcUIsU0FBUzlxQyxFQUFFYyxFQUFFUCxRQUFHLElBQVNBLElBQUlBLEdBQUUsR0FBSVcsS0FBSzJqQyxjQUFjLENBQUMsS0FBSyxJQUFJamxDLEVBQUUwbEMsS0FBSy9sQyxFQUFFdUIsRUFBRSxHQUFHTyxFQUFFUCxFQUFFLEdBQUdJLEtBQUt3ZCxZQUFZMWUsRUFBRSxJQUFJbEIsRUFBRSxHQUFHK0IsRUFBRSxTQUFTTixJQUFJTSxFQUFFLDhCQUE4QixJQUFJLElBQUlTLEVBQUUsRUFBRUEsR0FBRyxFQUFFQSxJQUFJLElBQUksSUFBSXZDLEVBQUUsRUFBRUEsR0FBRyxFQUFFQSxJQUFJLENBQUMsSUFBSUksRUFBRSxFQUFFbUMsRUFBRXZDLEVBQUVELEdBQUcsb0VBQW9FQyxFQUFFLE1BQU1pQixFQUFFLEdBQUcsc0NBQXNDakIsRUFBRSxzQ0FBc0N1QyxFQUFFLE1BQU10QixFQUFFLEdBQUcsd0NBQXdDc0IsRUFBRSxtTUFBbU1ELEVBQUUsd0NBQXdDQSxFQUFFLHVEQUF1REEsRUFBRSxPQUFPOUIsRUFBRSxnQ0FBZ0NLLEVBQUUrbEMsVUFBVSx1RUFBdUV4bUMsRUFBRSxrRkFBa0ZBLEVBQUUsa0ZBQWtGQSxFQUFFLGtFQUFrRUEsRUFBRSx3RUFBd0UrQixLQUFLNGpDLFNBQVMsV0FBV29CLEdBQUdsbUMsR0FBRyxzT0FBc09sQixFQUFFLGVBQWVjLEVBQUVnbUMsT0FBTyxNQUFNL2tDLEVBQUUsb0JBQXFHa3FDLEdBQXFCLFNBQVMvcUMsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzJqQyxjQUFjLENBQUMsT0FBTyxRQUFRLElBQUlqbEMsRUFBRWtCLEVBQUUsR0FBR0ksS0FBS3dkLFlBQVk1ZCxFQUFFLElBQUl2QixFQUFFZ0IsRUFBRSxTQUFTb0UsS0FBS3MvQixHQUFHLFVBQVV0L0IsS0FBS3MvQixHQUFHNWlDLEVBQUVkLEVBQUVYLEVBQUUsS0FBSyxNQUFNc0IsS0FBSzRqQyxTQUFTLDRDQUE0Q3ZsQyxFQUFFLDhGQUE4RlMsRUFBRSwrR0FBK0dKLEVBQUUscUtBQXFLQSxFQUFFLG1XQUFtV3lCLEVBQUUseUxBQTRMMnBDLEdBQUcsV0FBVyxTQUFTaHJDLEVBQUVBLEVBQUVjLEdBQUdJLEtBQUt3ZCxZQUFZLEdBQUd4ZCxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUt3ZCxZQUFZMWUsRUFBRWtCLEtBQUs0akMsU0FBUyxvSkFBb0osT0FBTzlrQyxFQUFFVSxVQUFVZ29DLG1CQUFtQixTQUFTMW9DLEdBQUcsSUFBSWMsRUFBRUksS0FBSyxPQUFPLFNBQVNYLEVBQUVYLEdBQUcsTUFBTWtCLEVBQUVtcUMsV0FBV25xQyxFQUFFbXFDLFNBQVMxcUMsRUFBRXFvQywwQkFBMEJocEMsRUFBRSxVQUFVVyxFQUFFdW9DLEdBQUdDLFVBQVVqb0MsRUFBRW1xQyxTQUFTanJDLEtBQUtBLEVBQXBiLEdBQXlia3JDLEdBQXFCLFNBQVNsckMsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLEtBQUssSUFBSS9qQyxFQUFFd2tDLEtBQUsva0MsRUFBRVAsRUFBRSxHQUFHSixFQUFFSSxFQUFFLEdBQUdrQixLQUFLd2QsWUFBWTFlLEVBQUVrQixLQUFLNGpDLFNBQVMsd05BQXdObGxDLEVBQUUsT0FBT1csRUFBRSxpQ0FBaUNPLEVBQUU2a0MsVUFBVSxtV0FBc1d3RixHQUFxQixTQUFTbnJDLEdBQUdrQixLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLLElBQUkvakMsRUFBRXdrQyxLQUFLL2tDLEVBQUVQLEVBQUUsR0FBR0osRUFBRUksRUFBRSxHQUFHa0IsS0FBS3dkLFlBQVkxZSxFQUFFa0IsS0FBSzRqQyxTQUFTLGthQUFrYWxsQyxFQUFFLE9BQU9XLEVBQUUsbUNBQW1DTyxFQUFFNmtDLFVBQVUsZ2JBQWdiN2tDLEVBQUU4a0MsT0FBTyw2QkFBZ0N3RixHQUFxQixTQUFTcHJDLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUsyakMsY0FBYyxDQUFDLElBQUksV0FBVyxJQUFJamxDLEVBQUVJLEVBQUVrRyxRQUFRdEcsRUFBRVcsR0FBR08sRUFBRUksS0FBS3dkLFlBQVk5ZSxFQUFFc0IsS0FBS3FMLEtBQUszTSxFQUFFd0MsT0FBTyxJQUFJN0MsRUFBRTJuQyxHQUFHaG1DLEtBQUtxTCxNQUFNbEwsRUFBRSxTQUFTckIsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFb0MsT0FBTyxHQUFHN0IsRUFBRSxFQUFFLE1BQU1rRCxNQUFNLG1CQUFtQmxELEVBQUUseUJBQXlCLEdBQUcsSUFBSUEsRUFBRSxNQUFNLHlCQUF5QixJQUFJLElBQUlYLEVBQUUsQ0FBQyxVQUFVLFVBQVUsVUFBVSxXQUFXTCxFQUFFLEdBQUc4QixFQUFFLEVBQUVBLEVBQUVyQixFQUFFb0MsT0FBT2YsSUFBSUEsSUFBSVAsRUFBRXZCLEVBQUU4QyxLQUFLLGtCQUFrQnpDLEVBQUV5QixHQUFHLE1BQU05QixFQUFFOEMsS0FBSyxHQUFHekMsRUFBRXlCLElBQUksT0FBTzlCLEVBQUUrRSxPQUFyUixDQUE2UnRFLEVBQUVPLEdBQUdXLEtBQUs0akMsU0FBUyxrQ0FBa0N2bEMsRUFBRSx1REFBdUQ4QixFQUFFLHNCQUE2QmdxQyxHQUFxQixTQUFTcnJDLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUtvcUMsU0FBU3RyQyxFQUFFa0IsS0FBS29NLFFBQVF4TSxFQUFFSSxLQUFLMmpDLGNBQWMsQ0FBQyxJQUFJLFdBQVczakMsS0FBS3dkLFlBQVluZSxFQUFFLElBQUlYLEVBQUVzbkMsR0FBR3BtQyxFQUFFc0IsUUFBUTdDLEVBQUUybkMsR0FBRzNtQyxFQUFFNkIsUUFBUWYsRUFBRUgsS0FBS29xQyxTQUFTLEVBQUUsYUFBYSxVQUFVcHFDLEtBQUs0akMsU0FBUyxhQUFhbGxDLEVBQUUsY0FBY0EsRUFBRSxJQUFJc0IsS0FBS29NLFFBQVEseUNBQXlDL04sRUFBRSxnR0FBZ0cyQixLQUFLb3FDLFNBQVMsMkdBQTJHanFDLEVBQUUsMEZBQTZGLFNBQVNrcUMsR0FBR3ZyQyxFQUFFYyxHQUFHLElBQUlQLEVBQUUra0MsS0FBSyxPQUFPMWYsR0FBRzVsQixFQUFFYyxFQUFFUCxFQUFFZ2xDLFFBQVEscUNBQXFDaGxDLEVBQUVpbEMsVUFBVSw0QkFBNEJqbEMsRUFBRWlsQyxVQUFVLGtCQUFrQmpsQyxFQUFFa2xDLFVBQVUsaUhBQWlILFNBQVMrRixHQUFHeHJDLEVBQUVjLEdBQUcsT0FBT3NtQixHQUFHcG5CLEVBQUVjLEVBQUUsSUFBSThGLGFBQWEsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxFQUFFLEtBQUssU0FBUzZrQyxHQUFHenJDLEVBQUVjLEdBQUcsT0FBTzRtQixHQUFHMW5CLEVBQUVjLEVBQUUsSUFBSTRxQyxZQUFZLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssU0FBU0MsR0FBRzNyQyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsRUFBRXZDLEdBQUdncEIsR0FBR3ZuQixFQUFFWCxHQUFHLElBQUlpQixFQUFFK21CLEdBQUc1bkIsRUFBRWMsR0FBR1EsRUFBRXRCLEVBQUUwb0IsV0FBVyxPQUFPdkUsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRXlvQixZQUFZbm5CLEVBQUVULE1BQUtzakIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRTRyQyxjQUFjdHFDLEVBQUV0QixFQUFFNnJDLGVBQWU3ckMsRUFBRThyQyxrQkFBaUIzbkIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRTRyQyxjQUFjdHFDLEVBQUV0QixFQUFFK3JDLGVBQWUvckMsRUFBRThyQyxrQkFBaUIzbkIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRTRyQyxjQUFjdHFDLEVBQUV0QixFQUFFZ3NDLG1CQUFtQmhzQyxFQUFFaXNDLFlBQVc5bkIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRTRyQyxjQUFjdHFDLEVBQUV0QixFQUFFa3NDLG1CQUFtQmxzQyxFQUFFaXNDLFlBQVc5bkIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRWdyQixXQUFXMXBCLEVBQUUsRUFBRS9CLEVBQUVnQixFQUFFWCxFQUFFLEVBQUV5QixFQUFFdkMsRUFBRSxTQUFRcWxCLEdBQUdua0IsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUV5b0IsWUFBWXpvQixFQUFFMG9CLFdBQVcsU0FBUTduQixFQUFFLFNBQVNzckMsR0FBR25zQyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLElBQUk4QixFQUFFdWhCLEdBQUdyaUIsRUFBRVgsR0FBRyxPQUFPK3JDLEdBQUczckMsRUFBRWMsRUFBRU8sRUFBRSxHQUFHQSxFQUFFLEdBQUc5QixFQUFFa2tCLG9CQUFvQmxrQixFQUFFc2tCLG1CQUFtQjdqQixFQUFFc2pCLE9BQU8sU0FBUzhvQixHQUFHcHNDLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsSUFBSThCLEVBQUV1aEIsR0FBR3JpQixFQUFFWCxHQUFHLE9BQU8rckMsR0FBRzNyQyxFQUFFYyxFQUFFTyxFQUFFLEdBQUdBLEVBQUUsR0FBRzlCLEVBQUVta0Isd0JBQXdCbmtCLEVBQUVza0IsbUJBQW1CdGtCLEVBQUUwa0Isc0JBQXNCLFNBQVNvb0IsR0FBR3JzQyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLElBQUk4QixFQUFFdWhCLEdBQUdyaUIsRUFBRVgsR0FBRyxPQUFPK3JDLEdBQUczckMsRUFBRWMsRUFBRU8sRUFBRSxHQUFHQSxFQUFFLEdBQUdyQixFQUFFdWpCLEtBQUt2akIsRUFBRXVqQixLQUFLdmpCLEVBQUVzc0MsZUFBZSxTQUFTQyxHQUFHdnNDLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsSUFBSThCLEVBQUV5aEIsR0FBR3ZpQixFQUFFWCxHQUFHLE9BQU8rckMsR0FBRzNyQyxFQUFFYyxFQUFFTyxFQUFFLEdBQUdBLEVBQUUsR0FBRzlCLEVBQUVxa0IsMEJBQTBCNWpCLEVBQUV1akIsS0FBS3ZqQixFQUFFc2pCLE9BQU8sU0FBU2twQixHQUFHeHNDLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsSUFBSThCLEVBQUV5aEIsR0FBR3ZpQixFQUFFWCxHQUFHLE9BQU8rckMsR0FBRzNyQyxFQUFFYyxFQUFFTyxFQUFFLEdBQUdBLEVBQUUsR0FBRzlCLEVBQUVva0IsOEJBQThCM2pCLEVBQUV1akIsS0FBS2hrQixFQUFFMGtCLHNCQUFzQixTQUFTd29CLEdBQUd6c0MsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxPQUFPdWtCLEdBQUdua0IsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUVzbkIsV0FBV3RuQixFQUFFdW5CLGFBQWEzbkIsTUFBS3FvQixHQUFHam9CLEVBQUVjLEVBQUVQLEVBQUUsZUFBZVgsRUFBRSxFQUFFLEdBQUcsSUFBSXFvQixHQUFHam9CLEVBQUVjLEVBQUVQLEVBQUUsS0FBS1gsRUFBRSxFQUFFLEdBQUcsSUFBSSxTQUFTOHNDLEdBQUcxc0MsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEVBQUV2QyxHQUFHLElBQUkrQixFQUFFUyxFQUFFdkMsRUFBRW9sQixHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFeW9CLFlBQVl6b0IsRUFBRTBvQixXQUFXbm9CLE1BQUtjLGFBQWF5RixZQUFZakcsRUFBRSxJQUFJaUcsV0FBV2xILEVBQUVMLEVBQUUsR0FBRytCLEVBQUV0QixFQUFFc3NDLGNBQWN2dEMsRUFBRWlCLEVBQUV1akIsT0FBTzFpQixFQUFFLElBQUkrRixhQUFhaEgsRUFBRUwsRUFBRSxHQUFHK0IsRUFBRXRCLEVBQUVzakIsTUFBTXZrQixFQUFFRCxFQUFFOGtCLDJCQUEyQi9pQixFQUFFc0MsSUFBSTlCLEdBQUc4aUIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRWdyQixXQUFXaHJCLEVBQUUwb0IsV0FBVyxFQUFFM3BCLEVBQUVhLEVBQUVMLEVBQUUsRUFBRVMsRUFBRXVqQixLQUFLamlCLEVBQUVULE1BQUtzakIsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRXlvQixZQUFZem9CLEVBQUUwb0IsV0FBVyxTQUFRLFNBQVNpa0IsR0FBRzNzQyxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHdWtCLEdBQUdua0IsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUV5b0IsWUFBWXpvQixFQUFFMG9CLFdBQVdub0IsTUFBS1gsRUFBRXNNLGdCQUFnQnBGLFdBQVdxZCxHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFZ3JCLFdBQVdockIsRUFBRTBvQixXQUFXLEVBQUUxb0IsRUFBRXVqQixLQUFLM2pCLEVBQUU2c0IsTUFBTTdzQixFQUFFOHNCLE9BQU8sRUFBRTFzQixFQUFFdWpCLEtBQUt2akIsRUFBRXNzQyxjQUFjMXNDLEVBQUVzTSxTQUFRaVksR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRWdyQixXQUFXaHJCLEVBQUUwb0IsV0FBVyxFQUFFMW9CLEVBQUV1akIsS0FBS3ZqQixFQUFFdWpCLEtBQUt2akIsRUFBRXNzQyxjQUFjMXNDLE1BQUt1a0IsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRXlvQixZQUFZem9CLEVBQUUwb0IsV0FBVyxTQUFRLFNBQVNra0IsR0FBRzVzQyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLElBQUk4QixFQUFFckIsRUFBRXFuQixlQUFlbEQsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRXNuQixXQUFXdG5CLEVBQUU2c0Msa0JBQWtCeHJDLE1BQUssSUFBSXZDLEVBQUUsR0FBR3lCLEVBQUVYLEVBQUUsT0FBT3VrQixHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFd25CLFdBQVd4bkIsRUFBRTZzQyxrQkFBa0IvdEMsRUFBRWtCLEVBQUU4c0MsZ0JBQWUzb0IsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRStzQyxXQUFXLEVBQUUsRUFBRW50QyxFQUFFVyxFQUFFUCxFQUFFdWpCLEtBQUt2akIsRUFBRXNqQixNQUFNLE1BQUthLEdBQUdua0IsRUFBRWMsR0FBRSxXQUFXLE9BQU9kLEVBQUVzbkIsV0FBV3RuQixFQUFFNnNDLGtCQUFrQixTQUFReHJDLEVBQUUsU0FBUzJyQyxHQUFHaHRDLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRUksRUFBRVQsRUFBRSxJQUFJcUgsYUFBYXJHLEdBQUcsT0FBT1gsRUFBRTBuQixXQUFXMW5CLEVBQUVpdEMsa0JBQWtCL3JDLEdBQUdsQixFQUFFcXRDLGlCQUFpQnJ0QyxFQUFFaXRDLGtCQUFrQixFQUFFdHRDLEdBQUdLLEVBQUUwbkIsV0FBVzFuQixFQUFFaXRDLGtCQUFrQixNQUFNdHRDLEVBQUUsU0FBUzJ0QyxHQUFHbHRDLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsSUFBSThCLEVBQUV1aEIsR0FBR3JpQixFQUFFWCxHQUFHZCxFQUFFdUMsRUFBRSxHQUFHUixFQUFFUSxFQUFFLEdBQUdDLEVBQUUsSUFBSXdGLFdBQVd2RyxFQUFFWCxFQUFFLEdBQUcsT0FBT3VrQixHQUFHbmtCLEVBQUVjLEdBQUUsV0FBVyxPQUFPZCxFQUFFK3NDLFdBQVcsRUFBRSxFQUFFanVDLEVBQUUrQixFQUFFdEIsRUFBRXVrQixzQkFBc0I5akIsRUFBRXNzQyxjQUFjaHJDLE1BQUssSUFBSXNGLGFBQWF0RixFQUFFNE4sUUFBUSxTQUFTaStCLEdBQUdudEMsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEVBQUV2QyxFQUFFK0IsR0FBRyxJQUFJUyxFQUFFdEIsRUFBRWpCLEVBQUUsSUFBSTZILGFBQWEsU0FBUzVHLEVBQUVjLEdBQUcsSUFBSVAsRUFBRXVpQixHQUFHOWlCLEVBQUVjLEdBQUcsT0FBT1AsRUFBRSxHQUFHQSxFQUFFLEdBQUcsRUFBN0MsQ0FBZ0RjLEVBQUV2QyxJQUFJLE9BQU93QyxFQUFFZ21CLFdBQVdobUIsRUFBRXVyQyxrQkFBa0IvckMsR0FBR1EsRUFBRTJyQyxpQkFBaUIzckMsRUFBRXVyQyxrQkFBa0IsRUFBRTl0QyxHQUFHdUMsRUFBRWdtQixXQUFXaG1CLEVBQUV1ckMsa0JBQWtCLE1BQU05dEMsRUFBRSxTQUFTcXVDLEdBQUdwdEMsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFLElBQUlxSCxhQUFhckcsRUFBRVgsRUFBRSxHQUFHLE9BQU91a0IsR0FBR25rQixFQUFFYyxHQUFFLFdBQVcsT0FBT2QsRUFBRStzQyxXQUFXLEVBQUUsRUFBRW50QyxFQUFFVyxFQUFFUCxFQUFFdWpCLEtBQUt2akIsRUFBRXNqQixNQUFNL2pCLE1BQUtBLEVBQUUsSUFBSTh0QyxHQUFHN3RDLE9BQU8rRSxPQUFPLENBQUNtbkIsbUJBQW1CNmYsR0FBRytCLG1CQUFtQjlCLEdBQUcrQixrQkFBa0I5QixHQUFHK0IsMkJBQTJCckIsR0FBR3NCLDJCQUEyQnJCLEdBQUdzQixpQ0FBaUNyQixHQUFHc0IsMEJBQTBCcEIsR0FBR3FCLGlDQUFpQ3BCLEdBQUdxQixrQ0FBa0NwQixHQUFHcUIsMkJBQTJCcEIsR0FBR3FCLHlCQUF5QnBCLEdBQUdxQiw4QkFBOEJwQixHQUFHcUIsZ0NBQWdDakIsR0FBR2tCLGdEQUFnRGhCLEdBQUdpQiwrQkFBK0JoQixHQUFHaUIsc0NBQXNDaEIsS0FBS2lCLEdBQUcsV0FBVyxTQUFTcnVDLEVBQUVBLEdBQUdrQixLQUFLb3RDLGNBQWMsS0FBS3B0QyxLQUFLcXRDLFFBQVEsS0FBS3J0QyxLQUFLc3RDLFVBQVMsRUFBR3R0QyxLQUFLdXRDLHFCQUFvQixFQUFHdnRDLEtBQUt3dEMsWUFBWSxHQUFHLElBQUk1dEMsRUFBRWhDLEVBQUV1RSxVQUFVLGlCQUFpQixHQUFHLE1BQU1yRCxHQUFHa0IsS0FBSzRuQyxHQUFHOW9DLEVBQUV1aEIsR0FBR3pnQixFQUFFZCxJQUFJa0IsS0FBSzRuQyxHQUFHdG5CLEdBQUcxZ0IsR0FBRyxJQUFJaEMsRUFBRXVFLFVBQVUsaUJBQWlCbkMsS0FBS3l0QyxzQkFBc0JscEIsR0FBR3ZrQixLQUFLNG5DLEdBQUc1bkMsS0FBSzB0QyxNQUFNLHFCQUFxQjF0QyxLQUFLMnRDLDBCQUEwQjN0QyxLQUFLNG5DLEdBQUduakIsYUFBYSw0QkFBNEJ6a0IsS0FBSzR0QywwQkFBMEJycEIsR0FBR3ZrQixLQUFLNG5DLEdBQUc1bkMsS0FBSzB0QyxNQUFNLDBCQUEwQjF0QyxLQUFLNnRDLDhCQUE4Qjd0QyxLQUFLNG5DLEdBQUduakIsYUFBYSxvQ0FBb0MsR0FBR2dGLEdBQUd6cEIsS0FBSzRuQyxHQUFHLDBCQUEwQjVuQyxLQUFLMnRDLDBCQUEwQjN0QyxLQUFLNG5DLEdBQUduakIsYUFBYSw4QkFBOEIsQ0FBQyxJQUFJZ0YsR0FBR3pwQixLQUFLNG5DLEdBQUcsK0JBQStCLE1BQU0sSUFBSXJsQyxNQUFNLHVEQUF1RHZDLEtBQUs2dEMsOEJBQThCN3RDLEtBQUs0bkMsR0FBR25qQixhQUFhLCtCQUFnQ3prQixLQUFLOHRDLGFBQWF4RCxHQUFHdHFDLEtBQUs0bkMsR0FBRzVuQyxLQUFLMHRDLE9BQU8xdEMsS0FBSyt0QyxZQUFZeEQsR0FBR3ZxQyxLQUFLNG5DLEdBQUc1bkMsS0FBSzB0QyxPQUFPMXRDLEtBQUtndUMsWUFBWW5uQixHQUFHN21CLEtBQUs0bkMsR0FBRzVuQyxLQUFLMHRDLE9BQU8xdEMsS0FBS2l1QyxjQUFjcHNCLEdBQUc3aEIsS0FBSzRuQyxHQUFHNW5DLEtBQUs0dEMsMkJBQTJCLE9BQU90dkMsT0FBT0MsZUFBZU8sRUFBRVUsVUFBVSxRQUFRLENBQUNmLElBQUksV0FBVyxPQUFPYixFQUFFd0UsUUFBUSxVQUFVNUQsWUFBVyxFQUFHOEQsY0FBYSxJQUFLeEQsRUFBRVUsVUFBVWdQLFFBQVEsV0FBVyxJQUFJMVAsRUFBRWtCLEtBQUssSUFBSUEsS0FBS3N0QyxTQUFTLENBQUMsTUFBTXR0QyxLQUFLcXRDLFNBQVMxckMsUUFBUUMsS0FBSyx3S0FBd0ssTUFBTTVCLEtBQUtvdEMsZUFBZXpyQyxRQUFRQyxLQUFLLHNNQUFzTSxJQUFJaEMsRUFBRUksS0FBSzRuQyxHQUFHM2tCLEdBQUdyakIsRUFBRUksS0FBSzB0QyxPQUFNLFdBQVcsT0FBTzl0QyxFQUFFc3VDLFlBQVdqckIsR0FBR3JqQixFQUFFSSxLQUFLMHRDLE9BQU0sV0FBVyxPQUFPOXRDLEVBQUVtb0IsZ0JBQWdCbm9CLEVBQUVvb0IsWUFBWSxTQUFRL0UsR0FBR3JqQixFQUFFSSxLQUFLMHRDLE9BQU0sV0FBVyxPQUFPOXRDLEVBQUVvcUIsa0JBQWtCbHJCLEVBQUVrdkMsZ0JBQWUvcUIsR0FBR3JqQixFQUFFSSxLQUFLMHRDLE9BQU0sV0FBVyxPQUFPOXRDLEVBQUV3bUIsV0FBV3htQixFQUFFeW1CLGFBQWEsU0FBUXBELEdBQUdyakIsRUFBRUksS0FBSzB0QyxPQUFNLFdBQVcsT0FBTzl0QyxFQUFFd21CLFdBQVd4bUIsRUFBRTZtQixxQkFBcUIsU0FBUXhELEdBQUdyakIsRUFBRUksS0FBSzB0QyxPQUFNLFdBQVcsT0FBTzl0QyxFQUFFdXVDLGFBQWFydkMsRUFBRWl2QyxnQkFBZS90QyxLQUFLc3RDLFVBQVMsSUFBS3h1QyxFQUFFVSxVQUFVOHNDLDJCQUEyQixTQUFTeHRDLEVBQUVjLEdBQUcsT0FBT0ksS0FBS3NOLGtCQUFrQjI5QixHQUFHanJDLEtBQUs0bkMsR0FBRzVuQyxLQUFLMHRDLE1BQU01dUMsRUFBRWMsRUFBRUksS0FBS2l1QyxnQkFBZ0JudkMsRUFBRVUsVUFBVStzQywyQkFBMkIsU0FBU3p0QyxFQUFFYyxHQUFHLE9BQU9JLEtBQUtzTixrQkFBa0I0OUIsR0FBR2xyQyxLQUFLNG5DLEdBQUc1bkMsS0FBSzB0QyxNQUFNNXVDLEVBQUVjLEVBQUVJLEtBQUtpdUMsZ0JBQWdCbnZDLEVBQUVVLFVBQVVndEMsaUNBQWlDLFNBQVMxdEMsRUFBRWMsR0FBRyxPQUFPSSxLQUFLc04sa0JBQWtCNjlCLEdBQUduckMsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsTUFBTTV1QyxFQUFFYyxFQUFFSSxLQUFLaXVDLGdCQUFnQm52QyxFQUFFVSxVQUFVcXRDLHlCQUF5QixTQUFTL3RDLEVBQUVjLEdBQUdJLEtBQUtzTixrQkFBa0JtK0IsR0FBR3pyQyxLQUFLNG5DLEdBQUc1bkMsS0FBSzB0QyxNQUFNNXVDLEVBQUVjLElBQUlkLEVBQUVVLFVBQVVvdEMsMkJBQTJCLFNBQVM5dEMsRUFBRWMsRUFBRVAsRUFBRVgsR0FBR3NCLEtBQUtzTixrQkFBa0JrK0IsR0FBR3hyQyxLQUFLNG5DLEdBQUc1bkMsS0FBSzB0QyxNQUFNNXVDLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVzQixLQUFLaXVDLGdCQUFnQm52QyxFQUFFVSxVQUFVa3RDLGlDQUFpQyxTQUFTNXRDLEVBQUVjLEdBQUcsT0FBT0ksS0FBS3NOLGtCQUFrQmcrQixHQUFHdHJDLEtBQUs0bkMsR0FBRzVuQyxLQUFLMHRDLE1BQU01dUMsRUFBRWMsRUFBRUksS0FBS2l1QyxnQkFBZ0JudkMsRUFBRVUsVUFBVWl0QywwQkFBMEIsU0FBUzN0QyxFQUFFYyxHQUFHLE9BQU9JLEtBQUtzTixrQkFBa0IrOUIsR0FBR3JyQyxLQUFLNG5DLEdBQUc1bkMsS0FBSzB0QyxNQUFNNXVDLEVBQUVjLEVBQUVJLEtBQUtpdUMsZ0JBQWdCbnZDLEVBQUVVLFVBQVU0dUMsb0JBQW9CLFNBQVN0dkMsR0FBRyxJQUFJYyxFQUFFSSxLQUFLQSxLQUFLc04sa0JBQWtCdE4sS0FBS290QyxnQkFBZ0J0dUMsSUFBSXFwQixHQUFHbm9CLEtBQUs0bkMsR0FBRzVuQyxLQUFLMHRDLE1BQU0xdEMsS0FBS2d1QyxhQUFhaHVDLEtBQUtvdEMsY0FBYyxNQUFNbnFCLEdBQUdqakIsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsT0FBTSxXQUFXLE9BQU85dEMsRUFBRWdvQyxHQUFHN2QsY0FBY2pyQixPQUFNQSxFQUFFVSxVQUFVd3RDLGdEQUFnRCxTQUFTbHVDLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRXNCLEtBQUssT0FBT0EsS0FBS3F1QyxxQkFBcUJ2dkMsR0FBRSxXQUFXLE9BQU9rdEMsR0FBR3R0QyxFQUFFa3BDLEdBQUdscEMsRUFBRWd2QyxNQUFNOXRDLEVBQUVQLEVBQUVYLEVBQUV1dkMsbUJBQWtCbnZDLEVBQUVVLFVBQVV5dEMsK0JBQStCLFNBQVNudUMsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsT0FBTzhyQyxHQUFHanNDLEtBQUs0bkMsR0FBRzlvQyxFQUFFLEVBQUUsRUFBRSxFQUFFVCxFQUFFOEIsRUFBRUgsS0FBS2l1QyxnQkFBZ0JudkMsRUFBRVUsVUFBVXV0QyxnQ0FBZ0MsU0FBU2p1QyxFQUFFYyxHQUFHLE9BQU9rc0MsR0FBRzlyQyxLQUFLNG5DLEdBQUc5b0MsRUFBRWMsSUFBSWQsRUFBRVUsVUFBVTh1Qyx3QkFBd0IsU0FBU3h2QyxFQUFFYyxFQUFFUCxHQUFHVyxLQUFLdXVDLHlCQUF5Qnp2QyxHQUFHLElBQUlKLEVBQUVndEMsR0FBRzFyQyxLQUFLNG5DLEdBQUc1bkMsS0FBSzB0QyxNQUFNOXRDLEVBQUVQLEVBQUVXLEtBQUtpdUMsZUFBZSxPQUFPanVDLEtBQUt3dUMsNkJBQTZCOXZDLEdBQUdJLEVBQUVVLFVBQVVpdkMsc0JBQXNCLFdBQVcsSUFBSTN2QyxFQUFFa0IsS0FBSzB1QyxZQUFZMXVDLEtBQUs0bkMsSUFBSSxPQUFPNW5DLEtBQUsydUMsVUFBVTd2QyxJQUFJQSxFQUFFVSxVQUFVa3ZDLFlBQVksU0FBUzV2QyxHQUFHLElBQUljLEVBQUVQLEVBQUVYLEVBQUVzQixLQUFLLEdBQUdwQyxFQUFFd0UsUUFBUSwyQkFBMkIsQ0FBQyxJQUFJL0QsRUFBRVMsRUFBRXFCLEVBQUU5QixFQUFFNnJCLFVBQVU3ckIsRUFBRXV3QywyQkFBMkIsR0FBRzl2QyxFQUFFK3ZDLFFBQVF4dkMsRUFBRSxXQUFXLElBQUlQLEVBQUVULEVBQUV5d0MsZUFBZTN1QyxFQUFFLEVBQUUsR0FBRyxPQUFPckIsSUFBSVQsRUFBRTB3QyxrQkFBa0Jqd0MsSUFBSVQsRUFBRTJ3QyxxQkFBcUJwdkMsRUFBRU8sT0FBT3ZDLEVBQUV1RSxVQUFVLGdEQUFnRCxHQUFHdkMsRUFBRUksS0FBS2l2QyxhQUFhanZDLEtBQUtrdkMsV0FBVzd2QyxFQUFFLFdBQVcsT0FBT1gsRUFBRXl3QyxpQkFBaUJ2dkMsRUFBRWhDLEVBQUV1RSxVQUFVLG1EQUFtRDlDLEVBQUUsV0FBVyxPQUFNLEdBQUksTUFBTSxDQUFDK3ZDLE1BQU14dkMsRUFBRXl2QyxjQUFjaHdDLElBQUlQLEVBQUVVLFVBQVU4dkMsZ0NBQWdDLFNBQVN4d0MsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFc0IsS0FBSyxPQUFPQSxLQUFLcXVDLHFCQUFxQnZ2QyxHQUFFLFdBQVcsT0FBT290QyxHQUFHeHRDLEVBQUVrcEMsR0FBR2xwQyxFQUFFZ3ZDLE1BQU05dEMsRUFBRVAsT0FBTVAsRUFBRVUsVUFBVWltQixjQUFjLFNBQVMzbUIsR0FBR2tCLEtBQUtzTixrQkFBa0IsSUFBSTFOLEVBQUVJLEtBQUs0bkMsR0FBR3ZvQyxFQUFFNmxCLEdBQUd0bEIsRUFBRUksS0FBSzB0QyxNQUFNNXVDLEdBQUdKLEVBQUUyckMsR0FBR3pxQyxFQUFFSSxLQUFLMHRDLE9BQU9ydkMsRUFBRW1uQixHQUFHNWxCLEVBQUVJLEtBQUswdEMsT0FBTyxPQUFPenFCLEdBQUdyakIsRUFBRUksS0FBSzB0QyxPQUFNLFdBQVcsT0FBTzl0QyxFQUFFMnZDLGFBQWFseEMsRUFBRUssTUFBS3VrQixHQUFHcmpCLEVBQUVJLEtBQUswdEMsT0FBTSxXQUFXLE9BQU85dEMsRUFBRTJ2QyxhQUFhbHhDLEVBQUVnQixNQUFLcW1CLEdBQUc5bEIsRUFBRUksS0FBSzB0QyxNQUFNcnZDLEdBQUcyQixLQUFLMHRDLE9BQU8zbkIsR0FBR25tQixFQUFFSSxLQUFLMHRDLE1BQU1ydkMsR0FBRzJCLEtBQUt1dEMsc0JBQXNCdnRDLEtBQUt3dkMsV0FBV254QyxHQUFHMkIsS0FBS3V0QyxvQkFBb0JoQyxHQUFHM3JDLEVBQUVJLEtBQUswdEMsTUFBTTF0QyxLQUFLcXRDLFFBQVFydEMsS0FBSzh0QyxlQUFlenZDLEdBQUdTLEVBQUVVLFVBQVVpd0MsY0FBYyxTQUFTM3dDLEdBQUcsSUFBSWMsRUFBRUksS0FBS0EsS0FBS3NOLGtCQUFrQnhPLElBQUlrQixLQUFLcXRDLFVBQVVydEMsS0FBS3F0QyxRQUFRLE1BQU0sTUFBTXZ1QyxHQUFHbWtCLEdBQUdqakIsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsT0FBTSxXQUFXLE9BQU85dEMsRUFBRWdvQyxHQUFHNkgsY0FBYzN3QyxPQUFNQSxFQUFFVSxVQUFVZ3dDLFdBQVcsU0FBUzF3QyxHQUFHLElBQUljLEVBQUVJLEtBQUtBLEtBQUtzTixrQkFBa0J0TixLQUFLcXRDLFFBQVF2dUMsRUFBRSxNQUFNa0IsS0FBS3F0QyxTQUFTcnRDLEtBQUswdEMsT0FBTzNuQixHQUFHL2xCLEtBQUs0bkMsR0FBRzVuQyxLQUFLMHRDLE1BQU0xdEMsS0FBS3F0QyxTQUFTcHFCLEdBQUdqakIsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsT0FBTSxXQUFXLE9BQU85dEMsRUFBRWdvQyxHQUFHOEgsV0FBVzV3QyxPQUFNQSxFQUFFVSxVQUFVa29CLG1CQUFtQixTQUFTNW9CLEVBQUVjLEVBQUVQLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxHQUFFLEdBQUlXLEtBQUtzTixrQkFBa0JqTyxFQUFFb29CLEdBQUd6bkIsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsTUFBTTV1QyxFQUFFYyxHQUFHK25CLEdBQUczbkIsS0FBSzRuQyxHQUFHOW9DLEVBQUVjLElBQUlkLEVBQUVVLFVBQVVtd0MscUJBQXFCLFNBQVM3d0MsRUFBRWMsR0FBRyxJQUFJUCxFQUFFVyxLQUFLLE9BQU9BLEtBQUtzTixrQkFBa0IyVixHQUFHampCLEtBQUs0bkMsR0FBRzVuQyxLQUFLMHRDLE9BQU0sV0FBVyxPQUFPcnVDLEVBQUV1b0MsR0FBRzVnQixrQkFBa0Jsb0IsRUFBRWMsT0FBTWQsRUFBRVUsVUFBVWtvQywwQkFBMEIsU0FBUzVvQyxFQUFFYyxHQUFHLE9BQU9JLEtBQUtzTixrQkFBa0J0TixLQUFLNG5DLEdBQUdsZ0IsbUJBQW1CNW9CLEVBQUVjLElBQUlkLEVBQUVVLFVBQVVvd0Msc0JBQXNCLFNBQVM5d0MsRUFBRWMsRUFBRVAsR0FBR1csS0FBS3NOLGtCQUFrQnROLEtBQUs2dkMsbUJBQW1Cam9CLEdBQUc1bkIsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsTUFBTTF0QyxLQUFLcXRDLFFBQVF2dUMsRUFBRWMsRUFBRVAsSUFBSVAsRUFBRVUsVUFBVXN3Qyx1QkFBdUIsU0FBU2h4QyxFQUFFYyxFQUFFUCxHQUFHVyxLQUFLK3ZDLDZCQUE2Qmp4QyxFQUFFTyxFQUFFTyxJQUFJZCxFQUFFVSxVQUFVd3dDLDZCQUE2QixTQUFTbHhDLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUtzTixrQkFBa0IsSUFBSTVPLEVBQUVrakIsR0FBR2hpQixFQUFFUCxHQUFHaEIsRUFBRUssRUFBRSxHQUFHeUIsRUFBRXpCLEVBQUUsR0FBR3NCLEtBQUsrdkMsNkJBQTZCanhDLEVBQUVULEVBQUU4QixJQUFJckIsRUFBRVUsVUFBVXl3QywyQkFBMkIsU0FBU254QyxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHc0IsS0FBS2t3QyxpQ0FBaUM3d0MsRUFBRVAsRUFBRUosRUFBRWtCLElBQUlkLEVBQUVVLFVBQVUyd0MsaUNBQWlDLFNBQVNyeEMsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxNQUFNLElBQUk2RCxNQUFNLHNEQUFzRHpELEVBQUVVLFVBQVU0d0MsY0FBYyxXQUFXLE1BQU1wd0MsS0FBS3F0QyxTQUFTdG5CLEdBQUcvbEIsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsTUFBTTF0QyxLQUFLcXRDLFNBQVNqbEIsR0FBR3BvQixLQUFLNG5DLEtBQUs5b0MsRUFBRVUsVUFBVTZ3QyxlQUFlLFdBQVdyd0MsS0FBS3NOLGtCQUFrQnROLEtBQUs2dkMsbUJBQW1CLElBQUkvd0MsRUFBRWtCLEtBQUs0bkMsR0FBRzVuQyxLQUFLMHRDLE9BQU8xdEMsS0FBS293QyxnQkFBZ0JudEIsR0FBR25rQixFQUFFa0IsS0FBSzB0QyxPQUFNLFdBQVcsT0FBTzV1QyxFQUFFd3hDLGFBQWF4eEMsRUFBRXl4QyxVQUFVLEVBQUV6eEMsRUFBRTB4QyxlQUFlLE9BQU0xeEMsRUFBRVUsVUFBVWl4QywrQkFBK0IsV0FBVyxJQUFJM3hDLEVBQUVrQixLQUFLQSxLQUFLc04sa0JBQWtCMlYsR0FBR2pqQixLQUFLNG5DLEdBQUc1bkMsS0FBSzB0QyxPQUFNLFdBQVcsT0FBTzV1QyxFQUFFOG9DLEdBQUdzRyxhQUFZcHZDLEVBQUVVLFVBQVVreEMsdUJBQXVCLFdBQVcsT0FBTyxNQUFNMXdDLEtBQUsyd0MsOEJBQThCM3dDLEtBQUsyd0MsNEJBQTRCcHNCLEdBQUd2a0IsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsTUFBTSxJQUFJOXZDLEVBQUV1RSxVQUFVLGdEQUFnRCxrQ0FBa0MsNkJBQTZCbkMsS0FBSzJ3Qyw2QkFBNkI3eEMsRUFBRVUsVUFBVW94Qyw2QkFBNkIsV0FBVyxPQUFPNXdDLEtBQUswd0MsMEJBQTBCNXhDLEVBQUVVLFVBQVVxeEMsNkJBQTZCLFdBQVcsT0FBTzd3QyxLQUFLMHdDLDBCQUEwQjV4QyxFQUFFVSxVQUFVeXZDLFdBQVcsV0FBVyxHQUFHLElBQUlyeEMsRUFBRXVFLFVBQVUsZ0RBQWdELENBQUMsSUFBSXJELEVBQUVrQixLQUFLNG5DLEdBQUdob0MsRUFBRUksS0FBSzR3QywrQkFBK0J2eEMsRUFBRVAsRUFBRWd5QyxjQUFjLE9BQU9oeUMsRUFBRW13QyxXQUFXcnZDLEVBQUVteEMsaUJBQWlCMXhDLEdBQUdBLEVBQUUsSUFBSVgsRUFBRXNCLEtBQUs2d0MsK0JBQStCeHlDLEVBQUVLLEVBQUVzeUMsaUJBQWlCLE9BQU90eUMsRUFBRXV5QyxjQUFjdnlDLEVBQUVxeUMsaUJBQWlCMXlDLEdBQUdBLEdBQUdTLEVBQUVVLFVBQVUwdkMsU0FBUyxXQUFXLEdBQUcsSUFBSXR4QyxFQUFFdUUsVUFBVSxnREFBZ0QsQ0FBQyxJQUFJckQsRUFBRWtCLEtBQUs2d0MsK0JBQStCL3hDLEVBQUVveUMsWUFBWXB5QyxFQUFFaXlDLHNCQUFzQixDQUFDLElBQUlueEMsRUFBRUksS0FBSzRuQyxHQUFHdm9DLEVBQUVXLEtBQUs0d0MsK0JBQStCaHhDLEVBQUVzdkMsU0FBUzd2QyxFQUFFMHhDLG9CQUFvQmp5QyxFQUFFVSxVQUFVMnhDLHVCQUF1QixTQUFTcnlDLEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJSixFQUFFSSxLQUFLLE9BQU90QixFQUFFc0IsTUFBSyxTQUFTWCxHQUFHLE9BQU9BLEVBQUVxQixPQUFPLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRW1FLEdBQUUsV0FBVyxPQUFPakYsRUFBRTB0QyxVQUFVMXRDLEVBQUV1dkMsaUJBQWlCcndDLEVBQUVsQixFQUFFdUUsVUFBVSxxREFBb0QsS0FBSyxFQUFFLE9BQU85QyxFQUFFc0IsT0FBTyxDQUFDLEVBQUVYLEtBQUtveEMsYUFBYXR5QyxFQUFFbEIsRUFBRXVFLFVBQVUsMERBQXdEckQsRUFBRVUsVUFBVTR4QyxhQUFhLFNBQVN0eUMsRUFBRWMsR0FBRyxHQUFHLElBQUlBLEVBQUUsT0FBTyxLQUFLLEdBQUcsSUFBSUEsRUFBRSxDQUFDLElBQUlQLEVBQUVXLEtBQUs0bkMsR0FBRyxPQUFPdm9DLEVBQUVneUMsa0JBQWtCdnlDLEVBQUVPLEVBQUVpeUMsY0FBYyxJQUFJLElBQUk1eUMsRUFBRXNCLEtBQUs2d0MsK0JBQStCLE9BQU9ueUMsRUFBRTZ5QyxrQkFBa0J6eUMsRUFBRUosRUFBRTh5QyxrQkFBa0IsS0FBSzF5QyxFQUFFVSxVQUFVMnZDLGlCQUFpQixTQUFTcndDLEVBQUVjLEdBQUcsR0FBRyxJQUFJQSxFQUFFLE9BQU0sRUFBRyxHQUFHLElBQUlBLEVBQUUsQ0FBQyxJQUFJUCxFQUFFVyxLQUFLNG5DLEdBQUdscEMsRUFBRXNCLEtBQUs0d0MsK0JBQStCdnlDLEVBQUVnQixFQUFFZ3lDLGtCQUFrQnZ5QyxFQUFFTyxFQUFFb3lDLHdCQUF3QixPQUFPLE1BQU16eEMsS0FBSzB4QyxXQUFXMXhDLEtBQUsweEMsU0FBUzF4QyxLQUFLNG5DLEdBQUd4ZSxhQUFhMXFCLEVBQUVpekMsbUJBQW1CdHpDLElBQUkyQixLQUFLMHhDLFNBQXFHLE9BQTVGcnpDLEdBQUdLLEVBQUVzQixLQUFLNndDLGdDQUFnQ1Usa0JBQWtCenlDLEVBQUVKLEVBQUVrekMsNEJBQW1DLE1BQU01eEMsS0FBSzB4QyxXQUFXMXhDLEtBQUsweEMsU0FBUzF4QyxLQUFLNG5DLEdBQUd4ZSxhQUFhMXFCLEVBQUVpekMsbUJBQW1CdHpDLElBQUkyQixLQUFLMHhDLFVBQVU1eUMsRUFBRVUsVUFBVW12QyxVQUFVLFNBQVM3dkMsR0FBRyxJQUFJYyxFQUFFSSxLQUFLLE9BQU8sSUFBSUUsU0FBUSxTQUFTYixHQUFHTyxFQUFFaXlDLGVBQWMsV0FBVyxPQUFPL3lDLEVBQUV1d0MsbUJBQWlCLFdBQVcsT0FBT2h3QyxXQUFTUCxFQUFFVSxVQUFVc3lDLFVBQVUsV0FBVyxJQUFJLElBQUloekMsRUFBRSxTQUFTQSxHQUFHLElBQUksSUFBSWMsRUFBRSxFQUFFQSxFQUFFZCxFQUFFb0MsU0FBU3RCLEVBQUUsQ0FBYyxJQUFQZCxFQUFFYyxLQUFXLE1BQU0sT0FBT0EsRUFBRSxFQUExRSxDQUE2RUksS0FBS3d0QyxZQUFZdG9DLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRWl6QyxhQUFZbnlDLEVBQUUsRUFBRUEsR0FBR2QsSUFBSWMsR0FBRyxFQUFHSSxLQUFLd3RDLFlBQVk1dEMsR0FBR295QyxhQUFhaHlDLEtBQUt3dEMsWUFBWXh0QyxLQUFLd3RDLFlBQVl4b0MsTUFBTWxHLEVBQUUsSUFBSUEsRUFBRVUsVUFBVXF5QyxjQUFjLFNBQVMveUMsRUFBRWMsR0FBRyxJQUFJUCxFQUFFVyxLQUFLQSxLQUFLd3RDLFlBQVlyc0MsS0FBSyxDQUFDNHdDLFNBQVNqekMsRUFBRWt6QyxVQUFVcHlDLElBQUlJLEtBQUt3dEMsWUFBWXRzQyxPQUFPLEdBQUcyRCxHQUFFLFdBQVcsT0FBT3hGLEVBQUV5eUMsWUFBWSxJQUFJenlDLEVBQUVtdUMsWUFBWXRzQyxXQUFVcEMsRUFBRVUsVUFBVSt1Qyx5QkFBeUIsU0FBU3p2QyxHQUFHa0IsS0FBS3NOLGtCQUFrQndhLEdBQUc5bkIsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsTUFBTTV1QyxFQUFFa0IsS0FBS2d1QyxhQUFhaHVDLEtBQUswdEMsT0FBT3RsQixHQUFHcG9CLEtBQUs0bkMsS0FBSzlvQyxFQUFFVSxVQUFVZ3ZDLDJCQUEyQixXQUFXLE1BQU14dUMsS0FBS290QyxlQUFldGxCLEdBQUc5bkIsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsTUFBTTF0QyxLQUFLb3RDLGNBQWNwdEMsS0FBS2d1QyxhQUFhaHVDLEtBQUswdEMsT0FBT3RsQixHQUFHcG9CLEtBQUs0bkMsS0FBS3pmLEdBQUdub0IsS0FBSzRuQyxHQUFHNW5DLEtBQUswdEMsTUFBTTF0QyxLQUFLZ3VDLGNBQWNsdkMsRUFBRVUsVUFBVTZ1QyxxQkFBcUIsU0FBU3Z2QyxFQUFFYyxHQUFHSSxLQUFLdXVDLHlCQUF5Qnp2QyxHQUFHLElBQUlPLEVBQUVPLElBQUksT0FBT0ksS0FBS3d1Qyw2QkFBNkJudkMsR0FBR1AsRUFBRVUsVUFBVXV3Qyw2QkFBNkIsU0FBU2p4QyxFQUFFYyxFQUFFUCxHQUFHVyxLQUFLc04sa0JBQWtCLElBQUk1TyxFQUFFc0IsS0FBSzRuQyxHQUFHOWYsR0FBR3BwQixFQUFFc0IsS0FBSzB0QyxNQUFNNXVDLEVBQUVrQixLQUFLZ3VDLGFBQWFodUMsS0FBSzB0QyxPQUFPdGxCLEdBQUcxcEIsR0FBR3NCLEtBQUtvdEMsY0FBY3R1QyxFQUFFbWtCLEdBQUd2a0IsRUFBRXNCLEtBQUswdEMsT0FBTSxXQUFXLE9BQU9odkMsRUFBRTJzQixTQUFTLEVBQUUsRUFBRXpyQixFQUFFUCxNQUFLNGpCLEdBQUd2a0IsRUFBRXNCLEtBQUswdEMsT0FBTSxXQUFXLE9BQU9odkMsRUFBRStzQixRQUFRLEVBQUUsRUFBRTdyQixFQUFFUCxPQUFNUCxFQUFFVSxVQUFVMHdDLGlDQUFpQyxTQUFTcHhDLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsSUFBSUwsRUFBRTJCLEtBQUtBLEtBQUtzTixrQkFBa0IyVixHQUFHampCLEtBQUs0bkMsR0FBRzVuQyxLQUFLMHRDLE9BQU0sV0FBVyxPQUFPcnZDLEVBQUV1cEMsR0FBR25jLFFBQVEzc0IsRUFBRWMsRUFBRVAsRUFBRVgsT0FBTUksRUFBRVUsVUFBVThOLGdCQUFnQixXQUFXLEdBQUd0TixLQUFLc3RDLFNBQVMsTUFBTSxJQUFJL3FDLE1BQU0sNENBQTRDekQsRUFBRVUsVUFBVXF3QyxpQkFBaUIsV0FBVyxHQUFHLE1BQU03dkMsS0FBS3F0QyxRQUFRLE1BQU0sSUFBSTlxQyxNQUFNLHFDQUFxQ3pELEVBQS9tVixHQUFvblYsU0FBU216QyxHQUFHbnpDLEVBQUVjLEdBQUcsR0FBR2QsRUFBRW9DLFNBQVN0QixFQUFFc0IsT0FBTyxNQUFNcUIsTUFBTSw0QkFBNEJ6RCxFQUFFb0MsT0FBTyxrQ0FBa0N0QixFQUFFc0IsT0FBTyxXQUFXcEMsRUFBRWlFLFNBQVEsU0FBU2pFLEVBQUVPLEdBQUcsSUFBSVgsRUFBRUksRUFBRXNtQyxhQUFhL21DLEVBQUV1QixFQUFFUCxHQUFHYyxFQUFFOUIsRUFBRWtOLE1BQU0sSUFBSXhILEVBQUVyRixFQUFFeUIsR0FBRyxNQUFNb0MsTUFBTSwyRUFBMkU3RCxFQUFFLFFBQVF5QixFQUFFLGVBQWUsSUFBSXJCLEVBQUV1bUMsWUFBWWhuQyxFQUFFZ25DLFVBQVUsQ0FBQyxJQUFJem5DLEVBQUVrQixFQUFFMm1DLFNBQVM5bEMsRUFBRXRCLEVBQUVnbkMsVUFBVSxLQUFLaG5DLEVBQUU2ekMsUUFBUXpNLFNBQVMsSUFBSTFoQyxFQUFFbkcsRUFBRStCLEdBQUcsTUFBTTRDLE1BQU0sa0ZBQWtGM0UsRUFBRSxRQUFRK0IsRUFBRSxtQkFBa0IsSUFBSXd5QyxHQUFxQixTQUFTcnpDLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUsyakMsY0FBYyxDQUFDLEtBQUszakMsS0FBSzhqQyxvQkFBbUIsRUFBRzlqQyxLQUFLd2QsWUFBWTFlLEVBQUUsSUFBSSxJQUFJSixFQUFFVyxFQUFFc2dDLFlBQVl0aEMsRUFBRWdCLEVBQUVpZ0MsV0FBV24vQixFQUFFZCxFQUFFb2dDLFlBQVk3aEMsRUFBRXlCLEVBQUVtZ0MsYUFBYTcvQixFQUFFTixFQUFFMC9CLFFBQVEzK0IsRUFBRWYsRUFBRTQvQixTQUFTcGhDLEVBQUV3QixFQUFFMGdDLGNBQWM5aEMsRUFBRW9CLEVBQUV5Z0MsZUFBZWo4QixFQUFFeEUsRUFBRTgvQixXQUFXei9CLEVBQUVDLEVBQUUrK0IsS0FBSzU2QixFQUFFbkUsRUFBRTYrQixJQUFJdGdDLEVBQUVHLEVBQUVLLEVBQUVzRixFQUFFb2dDLEtBQUtwbUMsRUFBRSxpQkFBaUI2RixFQUFFTSxFQUFFbkcsRUFBRSxFQUFFLEVBQUUrRixFQUFFL0YsRUFBRSxFQUFFLEVBQUVvRyxFQUFFLEdBQUdDLEVBQUUsRUFBRUEsR0FBRyxFQUFFQSxJQUFJLElBQUksSUFBSUcsRUFBRSxFQUFFQSxHQUFHLEVBQUVBLElBQUlKLEdBQUcsbUNBQW1DSSxFQUFFLDZCQUE2QkgsRUFBRSxrQ0FBa0N2RixFQUFFLEdBQUcsYUFBYUEsRUFBRSxHQUFHLGdEQUFnRHNCLEVBQUUsUUFBUXhDLEVBQUUsTUFBTWtHLEVBQUUsaUNBQWlDN0YsRUFBRSxhQUFhQyxFQUFFLDZCQUE2QjBCLEVBQUV1RSxHQUFHLHdFQUF3RS9ELEVBQUUsUUFBUUQsRUFBRSxPQUFPVCxFQUFFLHFDQUFxQzdCLEVBQUUsMkJBQTJCSyxFQUFFLFFBQVFHLEVBQUUsaUNBQWlDdUIsRUFBRW1FLEdBQUcsOERBQThEMUYsRUFBRSwrQkFBK0JMLEVBQUUsK0VBQStFLEVBQUVxRyxFQUFFRyxHQUFHLHlOQUF5TixFQUFFSCxFQUFFRyxHQUFHLGdNQUFnTXhFLEtBQUs0akMsU0FBUyxvTUFBb014L0IsRUFBRSxlQUFlSixFQUFFMGdDLE9BQU8sNkJBQWdDME4sR0FBcUIsU0FBU3R6QyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHMkIsS0FBSzJqQyxjQUFjLENBQUMsS0FBSzNqQyxLQUFLd2QsWUFBWSxHQUFHLElBQUlyZCxFQUFFdkMsRUFBRWdDLEVBQUVELEVBQUViLEVBQUUsR0FBRyxFQUFFa0IsS0FBS3dkLFlBQVkxZSxFQUFFLElBQUlzQixFQUFFLFNBQVNmLEVBQUUsYUFBYVgsRUFBRSxVQUFVeUIsRUFBRSxLQUFLOUIsRUFBRSxlQUFlK0IsRUFBRSxJQUFJLElBQUkvQixFQUFFLFFBQVErQixFQUFFLElBQUksV0FBV0EsRUFBRSxjQUFjL0IsRUFBRSxNQUFNMkIsS0FBSzRqQyxTQUFTLDBRQUEwUWhtQyxFQUFFLFVBQVVBLEVBQUUsMkVBQTJFK0IsRUFBRSw4SEFBOEhRLEVBQUUsNkNBQWdEa3lDLEdBQXFCLFNBQVN2ekMsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRzJCLEtBQUsyakMsY0FBYyxDQUFDLGFBQWEsY0FBYyxNQUFNM2pDLEtBQUt3ZCxZQUFZLEdBQUd4ZCxLQUFLd2QsWUFBWTFlLEVBQUVrQixLQUFLa2dCLE1BQU1waEIsRUFBRSxHQUFHa0IsS0FBS3N5QyxZQUFZMXlDLEVBQUVJLEtBQUt5N0IsS0FBS3A4QixFQUFFVyxLQUFLOGYsTUFBTXBoQixFQUFFc0IsS0FBSzgwQixLQUFLejJCLEVBQUUyQixLQUFLNGpDLFNBQVMsb05BQW9ONWpDLEtBQUtrZ0IsTUFBTSwrREFBK0R0Z0IsRUFBRSxnREFBZ0RJLEtBQUtrZ0IsTUFBTSwrQkFBK0J0Z0IsRUFBRSw2RkFBNkZJLEtBQUtrZ0IsTUFBTSx1YUFBdWF4aEIsRUFBRSxvQkFBb0JXLEVBQUUsbVBBQW1QWCxFQUFFLDhCQUE4QkwsRUFBRSw4S0FBOEtBLEVBQUUsK1JBQWtTazBDLEdBQXFCLFNBQVN6ekMsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRzJCLEtBQUsyakMsY0FBYyxDQUFDLEtBQUszakMsS0FBS3dkLFlBQVksR0FBR3hkLEtBQUs4akMsb0JBQW1CLEVBQUcsSUFBSTNqQyxFQUFFdkMsRUFBRWdDLEVBQUVELEVBQUViLEVBQUUsR0FBRyxFQUFFa0IsS0FBS3dkLFlBQVkxZSxFQUFFLElBQUlzQixFQUFFLFNBQVNmLEVBQUUsYUFBYVgsRUFBRSxVQUFVeUIsRUFBRSxLQUFLOUIsRUFBRSxlQUFlK0IsRUFBRSxJQUFJLElBQUkvQixFQUFFLFFBQVErQixFQUFFLElBQUksV0FBV0EsRUFBRSxjQUFjL0IsRUFBRSxNQUFNMkIsS0FBSzRqQyxTQUFTLGlOQUFpTjVqQyxLQUFLd2QsWUFBWSxHQUFHLG9DQUFvQ3hkLEtBQUt3ZCxZQUFZLEdBQUcsaWhCQUFpaEI1ZixFQUFFLDBaQUEwWkEsRUFBRSxVQUFVQSxFQUFFLDhLQUE4SytCLEVBQUUsdXlCQUF1eUJRLEVBQUUsZ0RBQW1EcXlDLEdBQXFCLFNBQVMxekMsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLEtBQUssVUFBVTNqQyxLQUFLd2QsWUFBWTFlLEVBQUVraEMsUUFBUSxJQUFJcGdDLEVBQUVkLEVBQUUwZ0MsYUFBYW5nQyxFQUFFUCxFQUFFMmdDLFlBQVkvZ0MsRUFBRUksRUFBRWdoQyxlQUFlemhDLEVBQUVTLEVBQUU4Z0Msc0JBQXNCei9CLEVBQUVyQixFQUFFK2dDLHFCQUFxQmppQyxFQUFFUyxFQUFFLEVBQUVTLEVBQUVpZ0MsUUFBUVAsSUFBSTcrQixFQUFFUSxFQUFFLEVBQUVyQixFQUFFaWdDLFFBQVFMLEtBQUt0K0IsRUFBRS9CLEVBQUU4QixFQUFFLEVBQUVILEtBQUs0akMsU0FBUyxvQ0FBb0NobUMsRUFBRSxLQUFLK0IsRUFBRSxpZEFBaWR0QixFQUFFLHNCQUFzQkssRUFBRSxzREFBc0RrQixFQUFFLDRDQUE0Q2QsRUFBRWtnQyxVQUFVLG9JQUFvSTcrQixFQUFFLDhEQUE4RGQsRUFBRSw4Q0FBOENQLEVBQUVtZ0MsU0FBUywrTUFBK003K0IsRUFBRSwwTEFBMExELEVBQUUsaU1BQW9Nc3lDLEdBQXFCLFNBQVMzekMsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLEtBQUssVUFBVTNqQyxLQUFLd2QsWUFBWTFlLEVBQUVraEMsUUFBUSxJQUFJcGdDLEVBQUVkLEVBQUV5aEMsWUFBWWxoQyxFQUFFUCxFQUFFMGdDLGFBQWE5Z0MsRUFBRUksRUFBRTJnQyxZQUFZcGhDLEVBQUVTLEVBQUU0aEMsY0FBY3ZnQyxFQUFFckIsRUFBRWdoQyxlQUFlbGlDLEVBQUVrQixFQUFFaWhDLGNBQWNwZ0MsRUFBRWIsRUFBRTJoQyxxQkFBcUJyZ0MsRUFBRXRCLEVBQUU4Z0Msc0JBQXNCL2hDLEVBQUVpQixFQUFFK2dDLHFCQUFxQjVoQyxFQUFFMEIsRUFBRSxFQUFFYixFQUFFaWdDLFFBQVFvQixNQUFNdDhCLEVBQUV6RCxFQUFFLEVBQUV0QixFQUFFaWdDLFFBQVFQLElBQUk5K0IsRUFBRTdCLEVBQUUsRUFBRWlCLEVBQUVpZ0MsUUFBUUwsS0FBSzU2QixFQUFFbkUsRUFBRVMsRUFBRXZDLEVBQUUsRUFBRW1DLEtBQUs0akMsU0FBUyxvQ0FBb0MzbEMsRUFBRSxLQUFLNEYsRUFBRSxLQUFLbkUsRUFBRSx1aUJBQXVpQkMsRUFBRSx1QkFBdUJ0QixFQUFFLHNEQUFzRHVCLEVBQUUsNENBQTRDZCxFQUFFdWhDLFNBQVMsb0lBQW9JamdDLEVBQUUsMEJBQTBCRCxFQUFFLHdEQUF3RGQsRUFBRSw4Q0FBOENQLEVBQUVrZ0MsVUFBVSw2SkFBNkpuaEMsRUFBRSw0QkFBNEJELEVBQUUsMERBQTBEYyxFQUFFLGdEQUFnREksRUFBRW1nQyxTQUFTLHNPQUFzT243QixFQUFFLGlQQUFpUDFELEVBQUUsTUFBTXZDLEVBQUUsOEJBQThCQSxFQUFFLG9OQUF1TjYwQyxHQUFxQixTQUFTNXpDLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsUUFBRyxJQUFTeUIsSUFBSUEsR0FBRSxRQUFJLElBQVNYLElBQUlBLEdBQUUsUUFBSSxJQUFTTCxJQUFJQSxHQUFFLFFBQUksSUFBUzhCLElBQUlBLEVBQUUsV0FBTSxJQUFTdkMsSUFBSUEsR0FBRSxHQUFJb0MsS0FBSzJqQyxjQUFjLENBQUMsVUFBVSxXQUFXM2pDLEtBQUs4akMsb0JBQW1CLEVBQUc5akMsS0FBS3dkLFlBQVk1ZCxFQUFFLElBQUlELEVBQUVOLEVBQUVQLEVBQUUsR0FBR0EsRUFBRSxHQUFHc0IsRUFBRXFELEtBQUtnQixLQUFLOUUsRUFBRSxHQUFHOUIsRUFBRXdCLEVBQUUsY0FBYyxjQUFjcEIsRUFBRVMsRUFBRSxjQUFjLGNBQWNtRixFQUFFeEUsRUFBRSxDQUFDLFNBQVMsVUFBVSxDQUFDLFNBQVMsVUFBVUssRUFBRWhCLEVBQUUsQ0FBQyxTQUFTLFVBQVUsQ0FBQyxTQUFTLFVBQVVvRixFQUFFLEdBQUc1RixFQUFFLEdBQUdpQyxJQUFJMkQsRUFBRWxHLEVBQUUsb0dBQW9HdUMsRUFBRSxjQUFjLHdDQUF3Q0EsRUFBRSxjQUFjakMsRUFBRSxnQ0FBZ0MsSUFBSThGLEVBQUUzRixFQUFFLGtDQUFrQyxHQUFHQSxHQUFHMkIsS0FBSzJqQyxjQUFjeGlDLEtBQUssUUFBUXZELEdBQUdvQyxLQUFLMmpDLGNBQWN4aUMsS0FBSywwQkFBMEJuQixLQUFLNGpDLFNBQVMsV0FBVzkvQixFQUFFLDJDQUEyQzFELEVBQUUsNkdBQTZHQSxFQUFFLGlEQUFpRHZDLEVBQUUsMkNBQTJDSSxFQUFFLG1LQUFtSzRGLEVBQUUsR0FBRyxNQUFNbkUsRUFBRSxHQUFHLDRCQUE0Qm1FLEVBQUUsR0FBRyxNQUFNbkUsRUFBRSxHQUFHLHNLQUFzS3NFLEVBQUUsZUFBZTlGLEVBQUUsaURBQW9EeTBDLEdBQUcsV0FBVyxTQUFTN3pDLEVBQUVBLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUsyakMsY0FBYyxDQUFDLFNBQVMzakMsS0FBS3dkLFlBQVksQ0FBQzFlLEVBQUVPLEdBQUdXLEtBQUs0akMsU0FBUyw4TkFBOE5oa0MsRUFBRSxHQUFHLHNQQUFzUEEsRUFBRSxHQUFHLHFCQUFxQixPQUFPZCxFQUFFVSxVQUFVZ29DLG1CQUFtQixTQUFTMW9DLEdBQUcsSUFBSWMsRUFBRUksS0FBSyxPQUFPLFNBQVNYLEVBQUVYLEdBQUcsTUFBTWtCLEVBQUVnekMsVUFBVWh6QyxFQUFFZ3pDLFFBQVF2ekMsRUFBRXFvQixtQkFBbUJocEIsRUFBRSxTQUFTVyxFQUFFdW9DLEdBQUdDLFVBQVVqb0MsRUFBRWd6QyxRQUFROXpDLEtBQUtBLEVBQTl2QixHQUFtd0IrekMsR0FBcUIsU0FBUy96QyxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHc0IsS0FBSzJqQyxjQUFjLENBQUMsV0FBVzNqQyxLQUFLd2QsWUFBWSxDQUFDMWUsRUFBRWMsR0FBR0ksS0FBSzRqQyxTQUFTLG1KQUFtSmxsQyxFQUFFLFlBQVlXLEVBQUUsd0VBQTJFeXpDLEdBQXFCLFNBQVNoMEMsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLEtBQUszakMsS0FBS3dkLFlBQVkxZSxFQUFFLElBQUljLEVBQUVkLEVBQUVvQyxPQUFPLEdBQUcsSUFBSXRCLEVBQUVJLEtBQUs0akMsU0FBUyxpR0FBaUcsQ0FBQyxJQUFJdmtDLEVBQUU4a0MsR0FBRyxLQUFLdmtDLEdBQUdsQixFQUFFc25DLEdBQUdwbUMsR0FBR3ZCLEVBQUUsU0FBU1MsRUFBRWMsRUFBRVAsR0FBRyxHQUFHLElBQUlQLEVBQUUsTUFBTSxRQUFRYyxFQUFFLEdBQUcsSUFBSSxJQUFJbEIsRUFBRSxHQUFHTCxFQUFFUyxFQUFFLEVBQUVULEVBQUVTLEVBQUVULElBQUlLLEdBQUdXLEVBQUVoQixHQUFHLE9BQU91QixFQUFFdkIsR0FBR0EsRUFBRVMsRUFBRSxJQUFJSixHQUFHLE1BQU0sT0FBT0EsRUFBbkgsQ0FBc0hrQixFQUFFZCxFQUFFTyxHQUFHYyxFQUFFLFNBQVNyQixFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLEdBQUcsSUFBSUksRUFBRSxNQUFNLEdBQUcsSUFBSVQsRUFBRUssRUFBRXNHLE9BQU8sR0FBRyxNQUFNLGlCQUFpQjNHLEVBQUUsR0FBRyxrQkFBa0JBLEVBQUUsR0FBRyw0RUFBNEV1QixFQUFFLDhCQUE4QlAsRUFBRSxRQUF2TixDQUFnT08sRUFBRWQsRUFBRUEsRUFBRW9DLE9BQU8sR0FBR3BDLEVBQUVBLEVBQUVvQyxPQUFPLEdBQUc3QixHQUFHekIsRUFBRSxTQUFTa0IsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFb0MsT0FBT3hDLEVBQUUsU0FBU0ksRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUUsR0FBR1gsRUFBRSxFQUFFQSxHQUFHLEVBQUVBLElBQUksSUFBSSxJQUFJTCxFQUFFLEVBQUVBLEdBQUcsRUFBRUEsSUFBSSxDQUFDLElBQUksSUFBSThCLEdBQUcsSUFBSXpCLEVBQUUsSUFBSSxPQUFPLE1BQU0sSUFBSUwsRUFBRSxJQUFJLE9BQU9ULEVBQUUsRUFBRUEsRUFBRWtCLEVBQUVsQixJQUFJdUMsRUFBRVAsRUFBRUEsRUFBRXNCLE9BQU8sRUFBRXRELEdBQUcsSUFBSXVDLEVBQUVkLEVBQUU4QixLQUFLaEIsR0FBRyxPQUFPZCxFQUF0SyxDQUF5S0EsRUFBRU8sR0FBRyxPQUFPLElBQUlQLEVBQUUsb0NBQW9DUCxFQUFFLEdBQUcsMENBQTBDLFFBQVFKLEVBQUUsR0FBRyxtQ0FBbUNBLEVBQUUsR0FBRyxtQ0FBbUNBLEVBQUUsR0FBRyw0Q0FBNENBLEVBQUUsR0FBRyxJQUEzYixDQUFnY0ksRUFBRU8sR0FBR1csS0FBSzRqQyxTQUFTLHNDQUFzQ2xsQyxFQUFFLDRDQUE0Q0wsRUFBRSx5RUFBeUU4QixFQUFFLGtDQUFrQ3ZDLEVBQUUsd0NBQStDbTFDLEdBQXFCLFNBQVNqMEMsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzJqQyxjQUFjLENBQUMsS0FBSzNqQyxLQUFLd2QsWUFBWTVkLEVBQUVzRixLQUFJLFNBQVN0RixFQUFFUCxHQUFHLE9BQU9PLEVBQUUsR0FBR2QsRUFBRU8sR0FBR08sRUFBRSxNQUFLLElBQUlsQixFQUFFSSxFQUFFb0MsT0FBTzdDLEVBQUUybkMsR0FBR3RuQyxHQUFHeUIsRUFBRVAsRUFBRXNGLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRSxNQUFLc0UsS0FBSyxLQUFLeEYsRUFBRWdDLEVBQUVzRixLQUFJLFNBQVN0RixFQUFFUCxHQUFHLE9BQU9PLEVBQUUsR0FBR2QsRUFBRU8sTUFBSytELEtBQUssS0FBS3pELEVBQUUsQ0FBQyxZQUFZLFlBQVksWUFBWSxhQUFhcUYsTUFBTSxFQUFFdEcsR0FBR3NCLEtBQUs0akMsU0FBUyxJQUFJbGxDLEVBQUUsV0FBV0wsRUFBRSxZQUFZQSxFQUFFLElBQUk4QixFQUFFLGFBQWE5QixFQUFFLFVBQVVBLEVBQUUsSUFBSVQsRUFBRSxzQ0FBc0NTLEVBQUUsd0lBQXdJZ0IsRUFBRSxvQ0FBb0NoQixFQUFFLHFEQUFxRHNCLEVBQUUsZ0NBQWdDLHlCQUF5QlEsRUFBRSx3QkFBd0J2QyxFQUFFLGtKQUFrSnlCLEVBQUUsdUdBQTBHMnpDLEdBQXFCLFNBQVNsMEMsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzJqQyxjQUFjLENBQUMsS0FBSzNqQyxLQUFLOGpDLG9CQUFtQixFQUFHOWpDLEtBQUt3ZCxZQUFZNWQsRUFBRXNGLEtBQUksU0FBU3RGLEVBQUVQLEdBQUcsT0FBT08sRUFBRSxHQUFHZCxFQUFFTyxHQUFHTyxFQUFFLE1BQUssSUFBSSxJQUFJbEIsRUFBRUksRUFBRW9DLE9BQU83QyxFQUFFMm5DLEdBQUd0bkMsR0FBR3lCLEVBQUVQLEVBQUVzRixLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUUsTUFBS3NFLEtBQUssS0FBS3hGLEVBQUVnQyxFQUFFc0YsS0FBSSxTQUFTdEYsRUFBRVAsR0FBRyxPQUFPTyxFQUFFLEdBQUdkLEVBQUVPLE1BQUsrRCxLQUFLLEtBQUt6RCxFQUFFd2tDLEdBQUcsS0FBS3psQyxHQUFHMEIsRUFBRStqQyxHQUFHLFNBQVN6bEMsR0FBR2IsRUFBRThCLEVBQUVqQixFQUFFLEdBQUcsTUFBTXNCLEtBQUt3ZCxZQUFZOWUsRUFBRSxHQUFHVCxFQUFFLElBQUlTLEVBQUUsU0FBUyxRQUFRMEIsRUFBRTRFLE9BQU8sR0FBRzVCLE9BQU8sSUFBSVMsRUFBRSxDQUFDeEYsRUFBRSxtQkFBbUJzQixFQUFFakIsRUFBRSxHQUFHLHFCQUFxQmIsRUFBRSxjQUFjLElBQUlhLEVBQUUsR0FBRyxxQ0FBcUNpQixFQUFFakIsRUFBRSxHQUFHLHFCQUFxQmlCLEVBQUVqQixFQUFFLEdBQUcsTUFBTXNCLEtBQUt3ZCxZQUFZOWUsRUFBRSxHQUFHLE1BQU0sSUFBSUEsRUFBRSxHQUFHLEtBQUtpQixFQUFFakIsRUFBRSxHQUFHLHVCQUF1QmIsRUFBRSxPQUFPNkIsRUFBRSxJQUFJaEIsRUFBRSwwQkFBMEIsNkRBQTZEb0YsRUFBRSxHQUFHNUYsRUFBRSxFQUFFOEYsRUFBRSxJQUFJdEYsRUFBRSxFQUFFLEVBQUVSLEVBQUU4RixFQUFFOUYsSUFBSTRGLEdBQUcsYUFBYUQsRUFBRTNGLEdBQUcsaUJBQWlCd0IsRUFBRSx5QkFBeUJ4QixFQUFFLGFBQWFtQixFQUFFLG1DQUFtQ2hCLEVBQUUsMkNBQTJDSCxFQUFFLHVCQUF1QmtDLEVBQUVnRCxPQUFPLE1BQU1uRixFQUFFLHdCQUF3QjZGLEdBQUcsSUFBSXBGLEVBQUUsS0FBSyxLQUFLc0IsS0FBSzRqQyxTQUFTLGlCQUFpQnZsQyxFQUFFLFlBQVlBLEVBQUUsSUFBSThCLEVBQUUsbUJBQW1COUIsRUFBRSxVQUFVQSxFQUFFLElBQUlULEVBQUUsc0NBQXNDUyxFQUFFLDZFQUE2RXlGLEVBQUUsK0NBQWtEbXZDLEdBQXFCLFNBQVNuMEMsRUFBRWMsRUFBRVAsR0FBRyxHQUFHVyxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLLFFBQVEvakMsR0FBR1AsRUFBRSxNQUFNLElBQUlrRCxNQUFNLDhDQUE4QyxJQUFJN0QsRUFBRUksRUFBRTZnQyxZQUFZdGhDLEVBQUVTLEVBQUUwZ0MsYUFBYXIvQixFQUFFckIsRUFBRTJnQyxZQUFZN2hDLEVBQUVrQixFQUFFZ2hDLGVBQWVuZ0MsRUFBRWIsRUFBRWloQyxjQUFjMy9CLEVBQUV0QixFQUFFOGdDLHNCQUFzQi9oQyxFQUFFaUIsRUFBRStnQyxxQkFBcUI1aEMsRUFBRWEsRUFBRWlnQyxRQUFRUCxJQUFJMzZCLEVBQUUvRSxFQUFFaWdDLFFBQVFMLEtBQUsxK0IsS0FBS3dkLFlBQVkxZSxFQUFFbWhDLFNBQVMsSUFBSXZnQyxFQUFFLFFBQVFFLEVBQUVrRSxFQUFFLE1BQU0sR0FBR3BFLElBQUlvRSxFQUFFLGdCQUFnQnpFLEVBQUVXLEtBQUs0akMsU0FBUyx5Q0FBeUN2bEMsRUFBRSxLQUFLOEIsRUFBRSx3Q0FBd0NsQyxFQUFFLEtBQUs0RixFQUFFLG9pQkFBb2lCekQsRUFBRSwwQkFBMEJ4QyxFQUFFLCtFQUErRWtCLEVBQUVzZ0MsU0FBUyxvRkFBb0Z2aEMsRUFBRSw0QkFBNEI4QixFQUFFLG1GQUFtRmIsRUFBRXVnQyxRQUFRLCtlQUErZXhoQyxFQUFFLDBIQUEwSCxDQUFDLElBQUlLLEVBQUUwQixFQUFFLElBQUlBLEVBQUUsSUFBSUEsRUFBRSxxRUFBcUUsUUFBUUEsSUFBSTFCLEVBQUUsb0JBQW9CLElBQUk4RixFQUFFLEVBQUVQLEtBQUs4SSxNQUFNN04sRUFBRSxHQUFHVixFQUFFVSxFQUFFLEVBQUV5RixFQUFFLGVBQWV6RSxFQUFFLDhIQUE4SE0sS0FBSzRqQyxTQUFTLHVDQUF1Q3ZsQyxFQUFFLEtBQUs4QixFQUFFLHNDQUFzQ2xDLEVBQUUsS0FBSzRGLEVBQUUsK0NBQStDQyxFQUFFLDZLQUE2S2hGLEVBQUV1Z0MsUUFBUSwwZkFBMGZ2N0IsRUFBRSw0RkFBNEYxRCxFQUFFLHdCQUF3QnhDLEVBQUUsMkVBQTJFa0IsRUFBRXNnQyxTQUFTLDhFQUE4RXA3QixFQUFFLHNEQUFzRHJFLEVBQUUsMkhBQTJIQSxFQUFFLHFEQUFxREEsRUFBRSxxREFBcURBLEVBQUUsdUNBQXVDd0UsRUFBRSxrREFBa0RILEVBQUUscUJBQXFCLElBQUloRyxHQUFHLDZOQUE2Tm1HLEVBQUUsMkJBQTJCLElBQUluRyxHQUFHLDJIQUEySDJCLEVBQUUsK0dBQStHd0UsRUFBRSwyQkFBMkIsSUFBSW5HLEdBQUcsMkhBQTJIMkIsRUFBRSxxREFBcURBLEVBQUUsMkVBQTJFd0UsRUFBRSwrQ0FBK0NqRyxFQUFFLHNCQUF5QmcxQyxHQUFxQixTQUFTcDBDLEVBQUVjLEVBQUVQLEdBQUcsR0FBR1csS0FBSzJqQyxjQUFjLENBQUMsS0FBSyxRQUFRL2pDLEdBQUdQLEVBQUUsTUFBTSxJQUFJa0QsTUFBTSw4Q0FBOEMsSUFBSTdELEVBQUVJLEVBQUU2Z0MsWUFBWXRoQyxFQUFFUyxFQUFFeWhDLFlBQVlwZ0MsRUFBRXJCLEVBQUUwZ0MsYUFBYTVoQyxFQUFFa0IsRUFBRTJnQyxZQUFZOS9CLEVBQUViLEVBQUU0aEMsY0FBY3RnQyxFQUFFdEIsRUFBRWdoQyxlQUFlamlDLEVBQUVpQixFQUFFaWhDLGNBQWM5aEMsRUFBRWEsRUFBRTJoQyxxQkFBcUI1OEIsRUFBRS9FLEVBQUU4Z0Msc0JBQXNCbGdDLEVBQUVaLEVBQUUrZ0MscUJBQXFCLzdCLEVBQUVoRixFQUFFaWdDLFFBQVFvQixNQUFNamlDLEVBQUVZLEVBQUVpZ0MsUUFBUVAsSUFBSXg2QixFQUFFbEYsRUFBRWlnQyxRQUFRTCxLQUFLMStCLEtBQUt3ZCxZQUFZMWUsRUFBRW1oQyxTQUFTLElBQUlqaUMsRUFBRSxRQUFRNEIsRUFBRXVFLEVBQUUsTUFBTSxHQUFHbkcsSUFBSW1HLEVBQUUsZ0JBQWdCOUUsRUFBRVcsS0FBSzRqQyxTQUFTLHNEQUFzRHZsQyxFQUFFLEtBQUs4QixFQUFFLEtBQUt2QyxFQUFFLHdDQUF3Q2tHLEVBQUUsS0FBSzVGLEVBQUUsS0FBSzhGLEVBQUUsb2tCQUFva0IvRixFQUFFLDBCQUEwQjBCLEVBQUUsK0VBQStFYixFQUFFd2hDLFFBQVEsb0ZBQW9GejhCLEVBQUUsNEJBQTRCekQsRUFBRSxtRkFBbUZ0QixFQUFFc2dDLFNBQVMsMEZBQTBGMS9CLEVBQUUsOEJBQThCN0IsRUFBRSx1RkFBdUZpQixFQUFFdWdDLFFBQVEsaWlCQUFpaUJ4N0IsRUFBRSxNQUFNbkUsRUFBRSxrQ0FBa0NBLEVBQUUsOElBQThJLENBQUMsSUFBSXFFLEVBQUVuRSxFQUFFLElBQUlBLEVBQUUsSUFBSUEsRUFBRSxxRUFBcUUsUUFBUUEsSUFBSW1FLEVBQUUsb0JBQW9CLElBQUlLLEVBQUUsRUFBRVgsS0FBSzhJLE1BQU03TixFQUFFLEdBQUcyRixFQUFFM0YsRUFBRSxFQUFFOEYsRUFBRSxlQUFleEcsRUFBRSw4SEFBOEhnQyxLQUFLNGpDLFNBQVMsZ0RBQWdEdmxDLEVBQUUsS0FBSzhCLEVBQUUsS0FBS3ZDLEVBQUUsc0NBQXNDa0csRUFBRSxLQUFLNUYsRUFBRSxLQUFLOEYsRUFBRSwrQ0FBK0NHLEVBQUUsc0xBQXNMckYsRUFBRXVnQyxRQUFRLDZqQkFBNmpCbDdCLEVBQUUsNEZBQTRGbEcsRUFBRSx3QkFBd0IwQixFQUFFLDJFQUEyRWIsRUFBRXdoQyxRQUFRLDhFQUE4RXo4QixFQUFFLHdCQUF3QnpELEVBQUUsK0VBQStFdEIsRUFBRXNnQyxTQUFTLG9GQUFvRmg3QixFQUFFLHdEQUF3RHZHLEVBQUUsMElBQTBJQSxFQUFFLDREQUE0REEsRUFBRSw0REFBNERBLEVBQUUsNENBQTRDMkcsRUFBRSxzREFBc0RKLEVBQUUsdUJBQXVCLElBQUlDLEdBQUcsZ1BBQWdQRyxFQUFFLDZCQUE2QixJQUFJSCxHQUFHLDBJQUEwSXhHLEVBQUUsd0hBQXdIMkcsRUFBRSw2QkFBNkIsSUFBSUgsR0FBRywwSUFBMEl4RyxFQUFFLDREQUE0REEsRUFBRSxrRkFBa0YyRyxFQUFFLHFEQUFxRFQsRUFBRSxpQ0FBb0NvdkMsR0FBcUIsU0FBU3IwQyxFQUFFYyxHQUFHSSxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLLElBQUl0a0MsRUFBRVAsRUFBRWtsQyxXQUFXdGxDLEVBQUVJLEVBQUVvZ0MsVUFBVTdnQyxFQUFFUyxFQUFFbWxDLE9BQU85akMsRUFBRXNELEtBQUtnQixLQUFLcEcsRUFBRWdCLEdBQUdXLEtBQUt3ZCxZQUFZLENBQUM5ZSxFQUFFeUIsR0FBRyxJQUFJdkMsRUFBRSxNQUFNK0IsRUFBRSxHQUFHLFNBQVNDLEVBQUVoQyxFQUFFLE1BQU0sUUFBUWdDLEdBQUdoQyxFQUFFLGNBQWMrQixFQUFFLE9BQU8sUUFBUUMsSUFBSWhDLEVBQUUsZUFBZStCLEVBQUUsT0FBTyxJQUFJUyxFQUFFUixFQUFFLElBQUlBLEVBQUUsSUFBSUEsRUFBRSxxRUFBcUUsUUFBUUEsRUFBRVEsRUFBRSxXQUFXLFNBQVNSLEVBQUVRLEVBQUUsWUFBWSxRQUFRUixFQUFFUSxFQUFFLFdBQVcsUUFBUVIsSUFBSVEsRUFBRSxZQUFZLElBQUl2QyxFQUFFLEVBQUU0RixLQUFLOEksTUFBTWxOLEVBQUUsR0FBR3BCLEVBQUVvQixFQUFFLEVBQUV3RSxFQUFFLGdCQUFnQixRQUFRakUsR0FBRyxrRUFBa0UsU0FBU0EsR0FBRyxrS0FBa0tELEVBQUUsd0NBQXdDRCxFQUFFLE9BQU8sUUFBUUUsR0FBR2hDLEVBQUUsTUFBTWlHLEVBQUUscU1BQXFNbkUsRUFBRSxTQUFTLFFBQVFFLElBQUloQyxFQUFFLE1BQU1pRyxFQUFFLHFNQUFxTW5FLEVBQUUsU0FBUyxJQUFJb0UsRUFBRSxHQUFHekYsRUFBRWdCLEVBQUUsSUFBSXlFLEVBQUUsdUNBQXVDekYsRUFBRSxpRUFBaUUyQixLQUFLNGpDLFNBQVMsNkNBQTZDaG1DLEVBQUUsaUhBQWlIa0csRUFBRSxxTkFBcU56RSxFQUFFLHdDQUF3Q3pCLEVBQUUsa0tBQWtLQyxFQUFFLCtEQUErRDZCLEVBQUUsYUFBYUEsRUFBRSwrTEFBK0xtRSxFQUFFLGlEQUFpRGhHLEVBQUUsbUJBQW1CLElBQUlJLEdBQUcsa0JBQWtCeUIsRUFBRSxhQUFhQSxFQUFFLDBLQUEwS21FLEVBQUUseUJBQXlCLElBQUk1RixHQUFHLGtCQUFrQnlCLEVBQUUsYUFBYUEsRUFBRSxpTEFBaUxtRSxFQUFFLHlCQUF5QixJQUFJNUYsR0FBRyxrQkFBa0J5QixFQUFFLGFBQWFBLEVBQUUsd0xBQXdMbUUsRUFBRSxrQ0FBa0N6RCxFQUFFLHFCQUF3Qmd6QyxHQUFxQixTQUFTdDBDLEVBQUVjLEdBQUdJLEtBQUsyakMsY0FBYyxDQUFDLEtBQUszakMsS0FBSzhqQyxvQkFBbUIsRUFBRzlqQyxLQUFLd2QsWUFBWTFlLEVBQUUsSUFBSSxJQUFJTyxFQUFFLEdBQUdYLEVBQUUsRUFBRUEsRUFBRSxFQUFFQSxJQUFJLENBQUMsSUFBSUwsRUFBRSxlQUFlSyxFQUFFLEdBQUcsSUFBSUwsR0FBRyxrQkFBa0JLLEVBQUUsSUFBSUwsR0FBRyxrQkFBa0JnQixHQUFHLGFBQWFoQixFQUFFLGNBQWNLLEVBQUUsRUFBRSwwQ0FBMEMsSUFBSSwrTkFBK05BLEVBQUUsbUdBQW1HQSxFQUFFLEVBQUUsSUFBSSxJQUFJLFdBQVdzQixLQUFLNGpDLFNBQVMsNEVBQTRFbUIsR0FBRyxDQUFDLElBQUksSUFBSSxLQUFLbmxDLEdBQUcsb0RBQW9Eb2xDLEdBQUdsbUMsR0FBRyxrSkFBa0pBLEVBQUUsR0FBRyx5QkFBeUJBLEVBQUUsR0FBRyxnQkFBZ0JPLEVBQUUsaURBQXdEZzBDLEdBQXFCLFNBQVN2MEMsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzJqQyxjQUFjLENBQUMsTUFBTTNqQyxLQUFLd2QsWUFBWSxHQUFHeGQsS0FBS3dkLFlBQVk1ZCxFQUFFMkwsTUFBTSxJQUFJN00sRUFBRWtCLEVBQUUyTCxNQUFNbE4sRUFBRUssRUFBRSxHQUFHeUIsRUFBRXpCLEVBQUUsR0FBR2QsRUFBRWtCLEVBQUV5TSxNQUFNNUwsRUFBRS9CLEVBQUUsR0FBR3dDLEVBQUV4QyxFQUFFLEdBQUdDLEVBQUUsQ0FBQ3dCLEdBQUdNLEVBQUUsRUFBRXRCLEVBQUUsRUFBRUEsRUFBRWdCLEdBQUdlLEVBQUUsRUFBRUQsRUFBRSxFQUFFQSxHQUFHbEMsRUFBRSxDQUFDb0IsR0FBR00sRUFBRSxFQUFFQSxFQUFFLEVBQUVBLEVBQUVOLEdBQUdlLEVBQUUsRUFBRUEsRUFBRSxFQUFFQSxHQUFHeUQsRUFBRWhHLEVBQUUsR0FBR0ksRUFBRSxHQUFHeUIsRUFBRTdCLEVBQUUsR0FBR0ksRUFBRSxHQUFHNkYsRUFBRSxFQUFFRCxFQUFFM0YsRUFBRSxFQUFFd0IsRUFBRXNFLEVBQUUsRUFBRVAsS0FBS2dCLEtBQUtYLEdBQUcsRUFBRTlGLEVBQUUsRUFBRXlGLEtBQUtnQixLQUFLdkcsR0FBRyxFQUFFOEIsS0FBSzRqQyxTQUFTLG1RQUFtUS8vQixFQUFFLDhDQUE4Q25FLEVBQUUsb0RBQW9Eb0UsRUFBRSxpREFBaUQ1RixFQUFFLDJDQUEyQzhGLEVBQUUsd0NBQXdDaEcsRUFBRSw4aUJBQThpQjJCLEVBQUUsMlFBQTJRUyxFQUFFLDBNQUEwTS9CLEVBQUUsR0FBRyw2UUFBNlE4QixFQUFFLEdBQUcsZzlCQUFtOUJtekMsR0FBcUIsU0FBU3gwQyxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHc0IsS0FBSzJqQyxjQUFjLENBQUMsS0FBSzNqQyxLQUFLd2QsWUFBWSxHQUFHLElBQUluZixFQUFFUyxFQUFFLEdBQUdxQixFQUFFckIsRUFBRSxHQUFHbEIsRUFBRWtCLEVBQUUsR0FBR2EsRUFBRWIsRUFBRSxHQUFHa0IsS0FBS3dkLFlBQVksQ0FBQ25mLEVBQUV1QixFQUFFUCxFQUFFTSxHQUFHLElBQUlTLEVBQUUsQ0FBQzFCLEdBQUdrQixFQUFFLEVBQUVPLEVBQUUsRUFBRUEsRUFBRXpCLEdBQUdXLEVBQUUsRUFBRXpCLEVBQUUsRUFBRUEsR0FBR0MsRUFBRSxDQUFDYSxHQUFHa0IsRUFBRSxFQUFFQSxFQUFFLEVBQUVBLEVBQUVsQixHQUFHVyxFQUFFLEVBQUVBLEVBQUUsRUFBRUEsR0FBR1csS0FBSzRqQyxTQUFTLHlFQUF5RXhqQyxFQUFFLEdBQUd2QyxFQUFFLEdBQUcsZ0JBQWdCdUMsRUFBRSxHQUFHdkMsRUFBRSxHQUFHLDRDQUE0Q3NDLEVBQUUsT0FBT3ZDLEVBQUUsZ2tDQUFta0MyMUMsR0FBcUIsU0FBU3owQyxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHc0IsS0FBSzJqQyxjQUFjLENBQUMsS0FBSzNqQyxLQUFLOGpDLG9CQUFtQixFQUFHOWpDLEtBQUt3ZCxZQUFZLEdBQUcsSUFBSW5mLEVBQUVTLEVBQUUsR0FBR3FCLEVBQUVyQixFQUFFLEdBQUdsQixFQUFFa0IsRUFBRSxHQUFHYSxFQUFFYixFQUFFLEdBQUdrQixLQUFLd2QsWUFBWSxDQUFDbmYsRUFBRXVCLEVBQUVQLEVBQUVNLEdBQUcsSUFBSVMsRUFBRSxDQUFDMUIsR0FBR2tCLEVBQUUsRUFBRU8sRUFBRSxFQUFFQSxFQUFFekIsR0FBR1csRUFBRSxFQUFFekIsRUFBRSxFQUFFQSxHQUFHQyxFQUFFLENBQUNhLEdBQUdrQixFQUFFLEVBQUVBLEVBQUUsRUFBRUEsRUFBRWxCLEdBQUdXLEVBQUUsRUFBRUEsRUFBRSxFQUFFQSxHQUFHVyxLQUFLNGpDLFNBQVMseUVBQXlFeGpDLEVBQUUsR0FBR3ZDLEVBQUUsR0FBRyxnQkFBZ0J1QyxFQUFFLEdBQUd2QyxFQUFFLEdBQUcsZ0JBQWdCdUMsRUFBRSxHQUFHdkMsRUFBRSxHQUFHLDRDQUE0Q3NDLEVBQUUsT0FBT3ZDLEVBQUUsNkNBQTZDQSxFQUFFLGt5QkFBa3lCK0IsRUFBRSxHQUFHLDZDQUE2Q04sRUFBRSxHQUFHLG9oRUFBdWhFbTBDLEdBQXFCLFNBQVMxMEMsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzJqQyxjQUFjLENBQUMsTUFBTTNqQyxLQUFLd2QsWUFBWSxHQUFHeGQsS0FBS3dkLFlBQVk1ZCxFQUFFMkwsTUFBTSxJQUFJN00sRUFBRWtCLEVBQUUyTCxNQUFNbE4sRUFBRUssRUFBRSxHQUFHeUIsRUFBRXpCLEVBQUUsR0FBR2QsRUFBRWtCLEVBQUV5TSxNQUFNNUwsRUFBRS9CLEVBQUUsR0FBR3dDLEVBQUV4QyxFQUFFLEdBQUdDLEVBQUUsQ0FBQ3dCLEdBQUdNLEVBQUUsRUFBRXRCLEVBQUUsRUFBRUEsRUFBRWdCLEdBQUdlLEVBQUUsRUFBRUQsRUFBRSxFQUFFQSxHQUFHbEMsRUFBRSxDQUFDb0IsR0FBR00sRUFBRSxFQUFFQSxFQUFFLEVBQUVBLEVBQUVOLEdBQUdlLEVBQUUsRUFBRUEsRUFBRSxFQUFFQSxHQUFHeUQsRUFBRWhHLEVBQUUsR0FBR0ksRUFBRSxHQUFHeUIsRUFBRTdCLEVBQUUsR0FBR0ksRUFBRSxHQUFHNkYsRUFBRSxFQUFFRCxFQUFFM0YsRUFBRSxFQUFFd0IsRUFBRXNFLEVBQUUsRUFBRVAsS0FBS2dCLEtBQUtYLEdBQUcsRUFBRTlGLEVBQUUsRUFBRXlGLEtBQUtnQixLQUFLdkcsR0FBRyxFQUFFOEIsS0FBSzRqQyxTQUFTLG1RQUFtUS8vQixFQUFFLDhDQUE4Q25FLEVBQUUsb0RBQW9Eb0UsRUFBRSxpREFBaUQ1RixFQUFFLDJDQUEyQzhGLEVBQUUsd0NBQXdDaEcsRUFBRSw0akJBQTRqQjJCLEVBQUUsMlFBQTJRUyxFQUFFLHlHQUF5R3ZDLEVBQUUsR0FBRyw0Q0FBNENJLEVBQUUsR0FBRyxtRUFBbUVKLEVBQUUsR0FBRyw4Q0FBOENJLEVBQUUsR0FBRyxpRkFBaUZJLEVBQUUsNEJBQTRCZ0IsRUFBRSxnTEFBZ0xjLEVBQUUsNEJBQTRCZCxFQUFFLHNWQUF5Vm8wQyxHQUFxQixTQUFTMzBDLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUdzQixLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUt3ZCxZQUFZLEdBQUcsSUFBSW5mLEVBQUVTLEVBQUUsR0FBR3FCLEVBQUVyQixFQUFFLEdBQUdsQixFQUFFa0IsRUFBRSxHQUFHYSxFQUFFYixFQUFFLEdBQUdrQixLQUFLd2QsWUFBWSxDQUFDbmYsRUFBRXVCLEVBQUVQLEVBQUVNLEdBQUcsSUFBSVMsRUFBRSxDQUFDMUIsR0FBR2tCLEVBQUUsRUFBRU8sRUFBRSxFQUFFQSxFQUFFekIsR0FBR1csRUFBRSxFQUFFekIsRUFBRSxFQUFFQSxHQUFHQyxFQUFFLENBQUNhLEdBQUdrQixFQUFFLEVBQUVBLEVBQUUsRUFBRUEsRUFBRWxCLEdBQUdXLEVBQUUsRUFBRUEsRUFBRSxFQUFFQSxHQUFHcEIsRUFBRVMsRUFBRSxNQUFNLE1BQU1zQixLQUFLNGpDLFNBQVMseUVBQXlFeGpDLEVBQUUsR0FBR3ZDLEVBQUUsR0FBRyxnQkFBZ0J1QyxFQUFFLEdBQUd2QyxFQUFFLEdBQUcsNENBQTRDc0MsRUFBRSxPQUFPdkMsRUFBRSwrYkFBK2JLLEVBQUUscUlBQXdJeTFDLEdBQXFCLFNBQVM1MEMsRUFBRWMsR0FBR0ksS0FBSzJqQyxjQUFjLENBQUMsS0FBSyxJQUFJdGtDLEVBQUVQLEVBQUVvQyxPQUFPLEdBQUc3QixFQUFFLEVBQUUsTUFBTSxJQUFJa0QsTUFBTSxrQ0FBa0NsRCxFQUFFLGdDQUFnQyxHQUFHVyxLQUFLd2QsWUFBWTFlLEVBQUUsSUFBSU8sRUFBRSxDQUFDLElBQUlYLEVBQUVJLEVBQUVvRyxLQUFJLFNBQVM3RixFQUFFWCxHQUFHLE9BQU8sU0FBU1csR0FBRyxPQUFPLElBQUlPLEVBQUV5dUIsUUFBUWh2QixJQUFJLElBQUlQLEVBQUVPLEdBQUdQLEVBQUVPLEdBQUcsYUFBYUEsRUFBRSxRQUFRLFVBQVVBLEVBQUUsSUFBdEYsQ0FBMkZYLE1BQUswRSxLQUFLLEtBQUsvRSxFQUFFMm5DLEdBQUczbUMsR0FBR1csS0FBSzRqQyxTQUFTLGtDQUFrQ3ZsQyxFQUFFLHdEQUF3REssRUFBRSwwQkFBMEJzQixLQUFLNGpDLFNBQVMsK0ZBQStGOWtDLEVBQUUsR0FBRyxzQ0FBeUM2MEMsR0FBcUIsU0FBUzcwQyxFQUFFYyxHQUFHSSxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUs4akMsb0JBQW1CLEVBQUcsSUFBSXprQyxFQUFFUCxFQUFFb0MsT0FBTyxHQUFHN0IsRUFBRSxFQUFFLE1BQU0sSUFBSWtELE1BQU0sa0NBQWtDbEQsRUFBRSxnQ0FBZ0NXLEtBQUt3ZCxZQUFZMWUsRUFBRSxJQUFJSixFQUFFeWxDLEdBQUcsS0FBSzlrQyxHQUFHaEIsRUFBRUssRUFBRVcsRUFBRSxHQUFHLFVBQVVXLEtBQUt3ZCxZQUFZbmUsRUFBRSxHQUFHYyxFQUFFekIsRUFBRVcsRUFBRSxHQUFHLFVBQVVXLEtBQUt3ZCxZQUFZbmUsRUFBRSxHQUFHekIsRUFBRW9vQyxHQUFHM21DLEdBQUcsU0FBU00sRUFBRU4sR0FBRyxJQUFJWCxFQUFFSSxFQUFFb0csS0FBSSxTQUFTeEcsRUFBRUwsR0FBRyxPQUFPLFNBQVNnQixFQUFFWCxHQUFHLE9BQU8sSUFBSWtCLEVBQUV5dUIsUUFBUWh2QixJQUFJLElBQUlQLEVBQUVPLEdBQUdQLEVBQUVPLEdBQUcsTUFBTVgsRUFBRVcsR0FBRyxPQUFPLEdBQUdYLEVBQUVXLEdBQTVFLENBQWdGaEIsRUFBRWdCLE1BQUssTUFBTSxtQkFBbUJYLEVBQUUwRSxLQUFLLEtBQUssV0FBVzFFLEVBQUVzRyxPQUFPLEdBQUc1QixLQUFLLEtBQUssS0FBS3BELEtBQUs0akMsU0FBUyxJQUFJdmtDLEVBQUUsMElBQTBJUCxFQUFFLEdBQUcsNEJBQTRCQSxFQUFFLEdBQUcsNkJBQTZCVCxFQUFFLGdEQUFnRFMsRUFBRSxHQUFHLHVDQUF1Q0EsRUFBRSxHQUFHLG1GQUFtRixzQ0FBc0NsQixFQUFFLHFGQUFxRixTQUFTa0IsR0FBRyxPQUFPYSxFQUFFYixHQUFyQixDQUF5QkosRUFBRXNHLFNBQVMsbUJBQW1CM0csRUFBRSw4QkFBOEIsU0FBU1MsR0FBRyxPQUFPQSxFQUFFTyxFQUFFLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLFFBQVFNLEVBQUViLEdBQS9DLENBQW1ESixFQUFFc0csU0FBUyxnQ0FBZ0M3RSxFQUFFLCtCQUErQixTQUFTckIsR0FBRyxPQUFPQSxFQUFFTyxFQUFFLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLFFBQVFNLEVBQUViLEdBQS9DLENBQW1ESixFQUFFc0csU0FBUyxxQkFBcUIzRyxFQUFFLGlDQUFpQyxTQUFTUyxHQUFHLE9BQU9BLEVBQUVPLEVBQUUsR0FBRyxJQUFJUCxFQUFFTyxFQUFFLEdBQUcsUUFBUVAsRUFBRU8sRUFBRSxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxRQUFRTSxFQUFFYixHQUF6RSxDQUE2RUosRUFBRXNHLFNBQVMsZ0ZBQW1GNHVDLEdBQXFCLFNBQVM5MEMsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEVBQUV2QyxRQUFHLElBQVNBLElBQUlBLEdBQUUsR0FBSW9DLEtBQUsyakMsY0FBYyxDQUFDLFVBQVUsVUFBVSxnQkFBZ0IzakMsS0FBS3dkLFlBQVlyZCxFQUFFLElBQUlSLEVBQUVxbUMsR0FBRzNuQyxFQUFFNkMsUUFBUWQsRUFBRTRsQyxHQUFHN2xDLEVBQUVlLFFBQVFyRCxFQUFFLEdBQUcsSUFBSXdCLEVBQUV4QixFQUFFLElBQUksSUFBSXdCLElBQUl4QixFQUFFLFFBQVEsSUFBSUksRUFBRSxjQUFjSixFQUFFLElBQUlnRyxFQUFFLEdBQUcsSUFBSW5GLEVBQUVtRixFQUFFLElBQUksSUFBSW5GLElBQUltRixFQUFFLGdCQUFnQixJQUFJbkUsRUFBRSxjQUFjbUUsRUFBRSxJQUFJQyxFQUFFbEUsRUFBRSxFQUFFLGFBQWEsVUFBVUksS0FBSzRqQyxTQUFTLGFBQWFqa0MsRUFBRSxjQUFjQSxFQUFFLElBQUl0QixFQUFFLDBDQUEwQytCLEVBQUUsMEhBQTBIdEIsRUFBRSxrRkFBa0ZjLEVBQUUsNkNBQTZDM0IsRUFBRSwrQ0FBK0M2RixFQUFFLDBGQUEwRnBFLEVBQUUsa0pBQXFKbTBDLEdBQXFCLFNBQVMvMEMsRUFBRWMsR0FBR0ksS0FBSzJqQyxjQUFjLENBQUMsSUFBSSxjQUFjLElBQUl0a0MsRUFBRVAsRUFBRWtsQyxXQUFXdGxDLEVBQUVJLEVBQUVvZ0MsVUFBVTdnQyxFQUFFUyxFQUFFbWxDLE9BQU85akMsRUFBRXJCLEVBQUVnMUMsWUFBWWwyQyxFQUFFdUMsRUFBRXNELEtBQUtnQixLQUFLcEcsRUFBRWdCLEdBQUdXLEtBQUt3ZCxZQUFZLENBQUM5ZSxFQUFFZCxHQUFHLElBQUkrQixFQUFFLEVBQUU4RCxLQUFLOEksTUFBTWxOLEVBQUUsR0FBR2UsRUFBRWYsRUFBRSxFQUFFeEIsRUFBRSxzREFBc0RJLEVBQUUsR0FBR0ksRUFBRWdCLEVBQUUsSUFBSXBCLEVBQUUsdUNBQXVDSSxFQUFFLGlFQUFpRSxJQUFJd0YsRUFBRSxHQUFHeEYsRUFBRWdCLEVBQUUsSUFBSXdFLEVBQUUsdUNBQXVDeEYsRUFBRSxrREFBa0QyQixLQUFLNGpDLFNBQVMsMkdBQTJHM2xDLEVBQUUsMEdBQTBHNEYsRUFBRSwwUEFBMFAxRCxFQUFFLGNBQWNkLEVBQUUsOERBQThEYyxFQUFFLHdFQUF3RVIsRUFBRSwwbEJBQTBsQjlCLEVBQUUsaURBQWlEOEIsRUFBRSxtQkFBbUIsSUFBSVMsR0FBRyw2YUFBNmF2QyxFQUFFLHlCQUF5QixJQUFJdUMsR0FBRyxtYkFBbWJ2QyxFQUFFLHlCQUF5QixJQUFJdUMsR0FBRyw4ZUFBOGV2QyxFQUFFLDREQUErRGsyQyxHQUFxQixTQUFTajFDLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRUwsRUFBRSxHQUFHMkIsS0FBSzJqQyxjQUFjLENBQUMsSUFBSSxJQUFJLEtBQUszakMsS0FBS3dkLFlBQVk1ZCxFQUFFUCxFQUFFLEVBQUUsTUFBTWtELE1BQU0sa0JBQWtCbEQsRUFBRSx5QkFBeUIsR0FBRyxJQUFJQSxFQUFFaEIsRUFBRSxRQUFRSyxFQUFFLFlBQVksQ0FBQyxJQUFJLElBQUl5QixFQUFFLENBQUMsVUFBVSxVQUFVLFVBQVUsV0FBV3ZDLEVBQUUsR0FBRytCLEVBQUUsR0FBR1MsRUFBRSxFQUFFQSxFQUFFUixFQUFFc0IsT0FBT2QsSUFBSVQsRUFBRXdCLEtBQUssR0FBR2hCLEVBQUVDLElBQUlBLEVBQUV0QixHQUFHbEIsRUFBRXVELEtBQUssR0FBR2hCLEVBQUVDLElBQUkxQixFQUFFZCxFQUFFd0YsT0FBTy9FLEVBQUVzQixFQUFFeUQsT0FBTyxJQUFJdkYsRUFBRW1vQyxHQUFHM21DLEdBQUdXLEtBQUs0akMsU0FBUyxrQ0FBa0MvbEMsRUFBRSwwREFBMERhLEVBQUUsNERBQTRETCxFQUFFLG1EQUFtREEsRUFBRSxpQ0FBb0MyMUMsR0FBRyxXQUFXLFNBQVNsMUMsRUFBRUEsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLFVBQVUzakMsS0FBS3dkLFlBQVkxZSxFQUFFa0IsS0FBS3FMLEtBQUt2TSxFQUFFb0MsT0FBTyxJQUFJdEIsRUFBRVAsRUFBRTJtQyxHQUFHaG1DLEtBQUtxTCxNQUFNM00sRUFBRSxxQkFBcUJzQixLQUFLcUwsS0FBSyxLQUFLaE4sRUFBRSxTQUFTUyxHQUFHLEdBQUcsSUFBSUEsRUFBRSxNQUFNLFlBQVksR0FBR0EsR0FBRyxFQUFFLE9BQU9tMUMsR0FBR2p2QyxNQUFNLEVBQUVsRyxHQUFHb0csS0FBSSxTQUFTcEcsR0FBRyxNQUFNLGFBQWFBLEtBQUlzRSxLQUFLLEtBQUssTUFBTWIsTUFBTSxvQkFBb0J6RCxFQUFFLHlCQUF2SixDQUFpTGtCLEtBQUtxTCxNQUFNekwsRUFBRSxhQUFhUCxFQUFFLHdCQUF3QkEsRUFBRSx5Q0FBeUNQLEVBQUVvRyxLQUFJLFNBQVNwRyxFQUFFYyxHQUFHLE1BQU0sYUFBYXEwQyxHQUFHcjBDLEdBQUcsWUFBWUEsRUFBRSxjQUFjcTBDLEdBQUdyMEMsR0FBRyxPQUFNd0QsS0FBSyxNQUFNLFdBQVdwRCxLQUFLNGpDLFNBQVMsV0FBV2xsQyxFQUFFLGtDQUFrQ2tCLEVBQUUsaUNBQWlDdkIsRUFBRSxxQkFBcUIsT0FBT1MsRUFBRVUsVUFBVWdvQyxtQkFBbUIsU0FBUzFvQyxHQUFHLElBQUljLEVBQUVJLEtBQUssR0FBR2xCLEVBQUVvQyxTQUFTbEIsS0FBS3FMLEtBQUssTUFBTTlJLE1BQU0sYUFBYXZDLEtBQUtxTCxLQUFLLG9EQUFvRHZNLEVBQUVvQyxPQUFPLEtBQUssT0FBTyxTQUFTN0IsRUFBRVgsR0FBRyxNQUFNa0IsRUFBRXMwQyxXQUFXdDBDLEVBQUVzMEMsU0FBUzcwQyxFQUFFcW9DLDBCQUEwQmhwQyxFQUFFLFNBQVMsTUFBTWtCLEVBQUVzMEMsV0FBVzcwQyxFQUFFdW9DLEdBQUd1TSxXQUFXdjBDLEVBQUVzMEMsU0FBU3AxQyxLQUFLQSxFQUFwOUIsR0FBeTlCbTFDLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxJQUFJLElBQUksS0FBU0csR0FBRyxXQUFXLFNBQVN0MUMsRUFBRUEsR0FBR2tCLEtBQUsyakMsY0FBYyxDQUFDLFVBQVUzakMsS0FBSzhqQyxvQkFBbUIsRUFBRzlqQyxLQUFLd2QsWUFBWTFlLEVBQUVrQixLQUFLcUwsS0FBS3ZNLEVBQUVvQyxPQUFPLElBQUl0QixFQUFFb21DLEdBQUdobUMsS0FBS3FMLE1BQU1oTSxFQUFFOGtDLEdBQUcsU0FBU25rQyxLQUFLcUwsTUFBTTNNLEVBQUV5bEMsR0FBRyxZQUFZbmtDLEtBQUtxTCxNQUFNaE4sRUFBRSxJQUFJMkIsS0FBS3FMLEtBQUssWUFBWSxRQUFRM00sRUFBRXNHLE9BQU8sR0FBRzVCLE9BQU8sSUFBSWpELEVBQUUsd0JBQXdCekIsRUFBRTBFLE9BQU8sTUFBTS9FLEVBQUUsSUFBSVQsRUFBRSxzQkFBc0J1QyxFQUFFLGtCQUFrQmQsRUFBRVcsS0FBS3FMLEtBQUssR0FBRyxNQUFNdk0sRUFBRWtCLEtBQUtxTCxLQUFLLEdBQUcsa0JBQWtCM00sRUFBRXNCLEtBQUtxTCxLQUFLLEdBQUcseUJBQXlCbEwsRUFBRSxnQkFBZ0J6QixFQUFFc0IsS0FBS3FMLEtBQUssR0FBRyxtQkFBbUIxTCxFQUFFLElBQUlLLEtBQUtxTCxLQUFLLEdBQUcsYUFBYWhNLEVBQUVXLEtBQUtxTCxLQUFLLEdBQUcsa0JBQWtCaE0sRUFBRVcsS0FBS3FMLEtBQUssR0FBRyxNQUFNdk0sRUFBRWtCLEtBQUtxTCxLQUFLLEdBQUcsa0JBQWtCM00sRUFBRXNCLEtBQUtxTCxLQUFLLEdBQUcseUJBQXlCbEwsRUFBRSxvQkFBb0JkLEVBQUVXLEtBQUtxTCxLQUFLLEdBQUcsTUFBTXZNLEVBQUVrQixLQUFLcUwsS0FBSyxHQUFHLG9CQUFvQjNNLEVBQUVzQixLQUFLcUwsS0FBSyxHQUFHLDJCQUEyQmxMLEVBQUUsOEJBQThCQyxFQUFFSixLQUFLcUwsTUFBTSxFQUFFLHFDQUFxQ3pMLEVBQUUsSUFBSWQsRUFBRW9HLEtBQUksU0FBU3BHLEVBQUVjLEdBQUcsTUFBTSxTQUFTQSxFQUFFLE9BQU13RCxPQUFPLEtBQUt0RSxFQUFFb0csS0FBSSxTQUFTcEcsRUFBRWMsR0FBRyxPQUFPbEIsRUFBRWtCLEdBQUcsTUFBTVAsRUFBRU8sR0FBRyxZQUFZQSxFQUFFLFFBQU93RCxLQUFLLE1BQU1wRCxLQUFLNGpDLFNBQVMsNkJBQTZCNWpDLEtBQUtxTCxLQUFLLG9DQUFvQ3pMLEVBQUUseUNBQXlDQSxFQUFFLHdCQUF3QlEsRUFBRSwrQ0FBK0N4QyxFQUFFLGFBQWErQixFQUFFLDhDQUE4QyxPQUFPYixFQUFFVSxVQUFVZ29DLG1CQUFtQixTQUFTMW9DLEdBQUcsSUFBSWMsRUFBRUksS0FBSyxHQUFHbEIsRUFBRW9DLFNBQVNsQixLQUFLcUwsS0FBSyxNQUFNOUksTUFBTSxhQUFhdkMsS0FBS3FMLEtBQUssb0RBQW9Edk0sRUFBRW9DLE9BQU8sS0FBSyxPQUFPLFNBQVM3QixFQUFFWCxHQUFHLE1BQU1rQixFQUFFczBDLFdBQVd0MEMsRUFBRXMwQyxTQUFTNzBDLEVBQUVxb0MsMEJBQTBCaHBDLEVBQUUsU0FBUyxNQUFNa0IsRUFBRXMwQyxXQUFXNzBDLEVBQUV1b0MsR0FBR3VNLFdBQVd2MEMsRUFBRXMwQyxTQUFTcDFDLEtBQUtBLEVBQWpqRCxHQUFzakR1MUMsR0FBcUIsU0FBU3YxQyxFQUFFYyxFQUFFUCxHQUFHVyxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUt3ZCxZQUFZbmUsRUFBRSxJQUFJWCxFQUFFVyxFQUFFNkIsT0FBTzdDLEVBQUUybkMsR0FBRzNtQyxFQUFFNkIsUUFBUWYsRUFBRTZsQyxHQUFHM21DLEVBQUU2QixRQUFRdEQsRUFBRSxHQUFHLEdBQUcsSUFBSWMsRUFBRWQsRUFBRSwrQkFBK0IsQ0FBQyxJQUFJK0IsRUFBRSxFQUFFL0IsRUFBRXlCLEVBQUU2RixLQUFJLFNBQVNwRyxFQUFFYyxHQUFHLE9BQU9ELElBQUksSUFBSU4sRUFBRTZCLE9BQU8sb0JBQW9CdEIsRUFBRSxhQUFhQSxFQUFFLElBQUksV0FBV0QsRUFBRSxHQUFHLGVBQWVDLEVBQUUsYUFBYUEsRUFBRSxPQUFNd0QsS0FBSyxLQUFLcEQsS0FBSzRqQyxTQUFTLFdBQVd2bEMsRUFBRSxZQUFZQSxFQUFFLElBQUlTLEVBQUUsYUFBYVQsRUFBRSxjQUFjQSxFQUFFLElBQUl1QixFQUFFLHNDQUFzQ08sRUFBRSx3REFBd0R2QyxFQUFFLHNCQUF5QjAyQyxHQUFHLFdBQVcsU0FBU3gxQyxFQUFFQSxHQUFHa0IsS0FBS3UwQyxNQUFNejFDLEVBQUVrQixLQUFLdzBDLGdCQUFnQixFQUFFeDBDLEtBQUt5MEMsZ0JBQWdCLEVBQUV6MEMsS0FBSzAwQyxhQUFhLEdBQUcxMEMsS0FBSzIwQyxZQUFXLEVBQUczMEMsS0FBSzQwQyxhQUFhLEdBQUcsT0FBTzkxQyxFQUFFVSxVQUFVcTFDLGVBQWUsU0FBUy8xQyxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUVMLEVBQUV5MkMsR0FBR2wxQyxFQUFFUCxHQUFHYyxFQUFFNDBDLEdBQUdqMkMsRUFBRVQsRUFBRWdCLEdBQUcsR0FBR2MsS0FBS0gsS0FBSzAwQyxlQUFlMTBDLEtBQUswMEMsYUFBYXYwQyxHQUFHLElBQUlBLEtBQUtILEtBQUs0MEMsZUFBZTUwQyxLQUFLNDBDLGFBQWF6MEMsR0FBRyxJQUFJSCxLQUFLMDBDLGFBQWF2MEMsR0FBR2UsT0FBTyxFQUFFLENBQUNsQixLQUFLeTBDLGtCQUFrQnowQyxLQUFLdzBDLGtCQUFrQngwQyxLQUFLeUwsTUFBTSxJQUFJN04sRUFBRW9DLEtBQUswMEMsYUFBYXYwQyxHQUFHNjBDLFFBQVEsT0FBT2gxQyxLQUFLNDBDLGFBQWF6MEMsR0FBR2dCLEtBQUt2RCxHQUFHQSxFQUFFLE9BQU9vQyxLQUFLdzBDLGtCQUFrQngwQyxLQUFLeUwsTUFBTXBOLElBQUlzaEIsR0FBR2lFLG1CQUFtQmxsQixFQUFFc0IsS0FBS3UwQyxNQUFNOUgsMEJBQTBCM3RDLEVBQUUsR0FBR0EsRUFBRSxJQUFJVCxJQUFJc2hCLEdBQUdrRSxtQkFBbUJubEIsRUFBRXNCLEtBQUt1MEMsTUFBTTdILGlDQUFpQzV0QyxFQUFFLEdBQUdBLEVBQUUsSUFBSVQsSUFBSXNoQixHQUFHK0QsaUJBQWlCaGxCLEVBQUVzQixLQUFLdTBDLE1BQU1qSSwyQkFBMkJ4dEMsRUFBRSxHQUFHQSxFQUFFLElBQUlULElBQUlzaEIsR0FBRzhELGlCQUFpQi9rQixFQUFFc0IsS0FBS3UwQyxNQUFNaEksMkJBQTJCenRDLEVBQUUsR0FBR0EsRUFBRSxJQUFJVCxJQUFJc2hCLEdBQUdnRSwyQkFBMkJqbEIsRUFBRXNCLEtBQUt1MEMsTUFBTS9ILGlDQUFpQzF0QyxFQUFFLEdBQUdBLEVBQUUsS0FBS2tCLEtBQUs0MEMsYUFBYXowQyxHQUFHZ0IsS0FBS3pDLEdBQUdBLEdBQUdJLEVBQUVVLFVBQVV5MUMsZUFBZSxTQUFTbjJDLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsR0FBRyxNQUFNc0IsS0FBSzAwQyxhQUFhLENBQUMsSUFBSXIyQyxFQUFFMDJDLEdBQUduMUMsRUFBRWsxQyxHQUFHejFDLEVBQUVYLEdBQUdBLEdBQUdMLEtBQUsyQixLQUFLMDBDLGVBQWUxMEMsS0FBSzAwQyxhQUFhcjJDLEdBQUcsSUFBSTJCLEtBQUswMEMsYUFBYXIyQyxHQUFHOEMsS0FBS3JDLEdBQUdrQixLQUFLeTBDLGtCQUFrQnowQyxLQUFLdzBDLGtCQUFrQixJQUFJcjBDLEVBQUVILEtBQUs0MEMsYUFBYXYyQyxHQUFHVCxFQUFFdUMsRUFBRWt1QixRQUFRdnZCLEdBQUcsR0FBR2xCLEVBQUUsRUFBRSxNQUFNLElBQUkyRSxNQUFNLDRFQUE0RXBDLEVBQUVnMkIsT0FBT3Y0QixFQUFFLEdBQUdvQyxLQUFLeUwsUUFBUTNNLEVBQUVVLFVBQVVpTSxJQUFJLFdBQVcsR0FBR3pMLEtBQUsyMEMsV0FBVyxDQUFDLElBQUk3MUMsRUFBRWtCLEtBQUt5MEMsZ0JBQWdCejBDLEtBQUt3MEMsZ0JBQWdCN3lDLFFBQVE4SixJQUFJLFlBQVl6TCxLQUFLeTBDLGdCQUFnQixNQUFNejBDLEtBQUt3MEMsZ0JBQWdCLElBQUkxMUMsRUFBRSxPQUFPQSxFQUFFVSxVQUFVMDFDLG1CQUFtQixXQUFXLE9BQU9sMUMsS0FBS3cwQyxpQkFBaUIxMUMsRUFBRVUsVUFBVTIxQyxtQkFBbUIsV0FBVyxPQUFPbjFDLEtBQUt5MEMsaUJBQWlCMzFDLEVBQUVVLFVBQVVnUCxRQUFRLFdBQVcsSUFBSTFQLEVBQUVrQixLQUFLLEdBQUcsTUFBTUEsS0FBSzAwQyxhQUFhLENBQUMsSUFBSSxJQUFJOTBDLEtBQUtJLEtBQUswMEMsYUFBYTEwQyxLQUFLMDBDLGFBQWE5MEMsR0FBR21ELFNBQVEsU0FBU25ELEdBQUdkLEVBQUV5MUMsTUFBTW5HLG9CQUFvQnh1QyxNQUFLLElBQUksSUFBSUEsS0FBS0ksS0FBSzQwQyxhQUFhNTBDLEtBQUs0MEMsYUFBYWgxQyxHQUFHbUQsU0FBUSxTQUFTbkQsR0FBR2QsRUFBRXkxQyxNQUFNbkcsb0JBQW9CeHVDLE1BQUtJLEtBQUswMEMsYUFBYSxLQUFLMTBDLEtBQUs0MEMsYUFBYSxLQUFLNTBDLEtBQUt3MEMsZ0JBQWdCLEVBQUV4MEMsS0FBS3kwQyxnQkFBZ0IsSUFBSTMxQyxFQUE3L0QsR0FBa2dFLFNBQVNnMkMsR0FBR2gyQyxFQUFFYyxHQUFHLEdBQUdkLElBQUk0Z0IsR0FBRzRELE9BQU8sT0FBTzNELEdBQUdpRSxtQkFBbUIsR0FBRzlrQixJQUFJNGdCLEdBQUcyRCxRQUFRLE1BQU12a0IsRUFBRSxPQUFPLFNBQVNBLEdBQUcsT0FBT2xCLEVBQUV3RSxRQUFRLGdDQUFnQ3RELEVBQUU2Z0IsR0FBR2lFLG1CQUFtQmpFLEdBQUcrRCxpQkFBaUI1a0IsRUFBRTZnQixHQUFHa0UsbUJBQW1CbEUsR0FBRzhELGlCQUFwSSxDQUFzSjdqQixHQUFHLEdBQUdkLElBQUk0Z0IsR0FBRzhELFVBQVUxa0IsSUFBSTRnQixHQUFHNkQsT0FBTyxPQUFPNUQsR0FBR2dFLHlCQUF5QixNQUFNLElBQUlwaEIsTUFBTSxnQ0FBZ0N6RCxHQUFHLFNBQVNpMkMsR0FBR2oyQyxFQUFFYyxFQUFFUCxHQUFHLE9BQU9QLEVBQUUsR0FBRyxJQUFJQSxFQUFFLEdBQUcsSUFBSWMsRUFBRSxJQUFJUCxFQUFFLElBQUkrMUMsR0FBcUIsU0FBU3QyQyxFQUFFYyxHQUFHSSxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLLElBQUksSUFBSXRrQyxFQUFFLElBQUlVLE1BQU1qQixFQUFFb0MsUUFBUXhDLEVBQUUsRUFBRUEsRUFBRVcsRUFBRTZCLE9BQU94QyxJQUFJVyxFQUFFWCxHQUFHSSxFQUFFSixHQUFHa0IsRUFBRWxCLEdBQUdzQixLQUFLd2QsWUFBWW5lLEVBQUVXLEtBQUtxTCxLQUFLaE0sRUFBRTZCLE9BQU8sSUFBSTdDLEVBQUUybkMsR0FBR2htQyxLQUFLcUwsTUFBTWxMLEVBQUUsU0FBU3JCLEdBQUcsSUFBSWMsRUFBRWQsRUFBRW9DLE9BQU8sR0FBR3RCLEVBQUUsRUFBRSxNQUFNMkMsTUFBTSxpQkFBaUIzQyxFQUFFLHlCQUF5QixHQUFHLElBQUlBLEVBQUUsTUFBTSxlQUFlZCxFQUFFLEdBQUcsSUFBSSxJQUFJLElBQUlPLEVBQUUsQ0FBQyxVQUFVLFVBQVUsVUFBVSxVQUFVLFdBQVdYLEVBQUUsR0FBR0wsRUFBRSxFQUFFQSxFQUFFUyxFQUFFb0MsT0FBTzdDLElBQUlLLEVBQUV5QyxLQUFLLFFBQVE5QixFQUFFaEIsR0FBRyxLQUFLUyxFQUFFVCxHQUFHLEtBQUssT0FBT0ssRUFBRTBFLE9BQW5RLENBQTJRdEUsR0FBR2tCLEtBQUs0akMsU0FBUyxrQ0FBa0N2bEMsRUFBRSx1REFBdUQ4QixFQUFFLHNCQUE2QmsxQyxHQUFxQixTQUFTdjJDLEVBQUVjLEdBQUdJLEtBQUsyakMsY0FBYyxDQUFDLEtBQUssSUFBSSxJQUFJdGtDLEVBQUUsSUFBSVUsTUFBTWpCLEVBQUVvQyxRQUFReEMsRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsT0FBT3hDLElBQUlXLEVBQUVYLEdBQUdJLEVBQUVjLEVBQUVsQixJQUFJc0IsS0FBS3dkLFlBQVluZSxFQUFFVyxLQUFLcUwsS0FBS2hNLEVBQUU2QixPQUFPLElBQUk3QyxFQUFFMm5DLEdBQUdobUMsS0FBS3FMLE1BQU1sTCxFQUFFLFNBQVNyQixHQUFHLElBQUljLEVBQUVkLEVBQUVvQyxPQUFPLEdBQUd0QixFQUFFLEVBQUUsTUFBTTJDLE1BQU0sc0JBQXNCM0MsRUFBRSx5QkFBeUIsSUFBSSxJQUFJUCxFQUFFLENBQUMsVUFBVSxVQUFVLFVBQVUsVUFBVSxVQUFVLFdBQVdYLEVBQUUsSUFBSXFCLE1BQU1ILEdBQUd2QixFQUFFLEVBQUVBLEVBQUVTLEVBQUVvQyxPQUFPN0MsSUFBSUssRUFBRUksRUFBRVQsSUFBSWdCLEVBQUVoQixHQUFHLE9BQU9LLEVBQUUwRSxPQUEvTixDQUF1T3hELEdBQUdJLEtBQUs0akMsU0FBUyw4QkFBOEJ2bEMsRUFBRSxxREFBcUQ4QixFQUFFLG9CQUEyQm0xQyxHQUFxQixTQUFTeDJDLEVBQUVjLEdBQUdJLEtBQUsyakMsY0FBYyxDQUFDLEtBQUszakMsS0FBSzhqQyxvQkFBbUIsRUFBRyxJQUFJLElBQUl6a0MsRUFBRSxJQUFJVSxNQUFNakIsRUFBRW9DLFFBQVF4QyxFQUFFLEVBQUVBLEVBQUVXLEVBQUU2QixPQUFPeEMsSUFBSVcsRUFBRVgsR0FBR0ksRUFBRWMsRUFBRWxCLElBQUksR0FBR3NCLEtBQUt3ZCxZQUFZbmUsRUFBRVcsS0FBS3FMLEtBQUtoTSxFQUFFNkIsT0FBT2xCLEtBQUtxTCxLQUFLLEVBQUUsTUFBTTlJLE1BQU0sNkJBQTZCdkMsS0FBS3FMLEtBQUssMEJBQTBCLElBQUloTixFQUFFMm5DLEdBQUdobUMsS0FBS3FMLE1BQU1sTCxFQUFFK2pDLEdBQUcsS0FBS2xrQyxLQUFLcUwsTUFBTXpOLEVBQUUsSUFBSW1DLE1BQU1DLEtBQUtxTCxNQUFNLElBQUkzTSxFQUFFLEVBQUVBLEVBQUVrQixFQUFFc0IsT0FBT3hDLElBQUlkLEVBQUVnQyxFQUFFbEIsSUFBSXlCLEVBQUV6QixHQUFHLElBQUlpQixFQUFFLFFBQVEvQixFQUFFb0gsT0FBTyxHQUFHNUIsT0FBTyxJQUFJaEQsRUFBRSxLQUFLRCxFQUFFSCxLQUFLcUwsS0FBSyxHQUFHLE1BQU1oTSxFQUFFVyxLQUFLcUwsS0FBSyxHQUFHeE4sRUFBRSxtQkFBbUJELEVBQUV3RixPQUFPLE1BQU16RCxFQUFFLElBQUlLLEtBQUs0akMsU0FBUyw4QkFBOEJ2bEMsRUFBRSw4RUFBOEVSLEVBQUUsZUFBZXVDLEVBQUUsNEJBQTRCdkMsRUFBRSx1QkFBdUJzQyxFQUFFSCxLQUFLcUwsS0FBSyxHQUFHLGlCQUFpQmxMLEVBQUVILEtBQUtxTCxLQUFLLEdBQUcsTUFBTWhNLEVBQUVXLEtBQUtxTCxLQUFLLEdBQUcsNEJBQTRCeE4sRUFBRSxpQkFBaUJ1QyxFQUFFLDhCQUE4QnZDLEVBQUUsa0VBQXFFMDNDLEdBQUcsbUJBQW1CQyxHQUFHLG1CQUFtQkMsR0FBcUIsU0FBUzMyQyxFQUFFYyxHQUFHSSxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUt3ZCxZQUFZMWUsRUFBRWtCLEtBQUs0akMsU0FBUyxvREFBb0Roa0MsRUFBRSx3SkFBMko4MUMsR0FBRywwQkFBMEJDLEdBQUcsWUFBWUMsR0FBRyxpQkFBaUJDLEdBQUdILEdBQUcsb0NBQW9DSSxHQUFHLDBDQUFnU0MsR0FBRyxhQUFhQyxHQUFHLGtCQUFrQkMsR0FBRyxtQkFBbUJDLEdBQUcsaUJBQWlCQyxHQUFHLHVCQUE4UkMsR0FBRyxZQUFZQyxHQUFHLFlBQVlDLEdBQUcsaVJBQWlSQyxHQUFHLCtQQUErUEMsR0FBcUIsU0FBUzEzQyxFQUFFYyxHQUFHSSxLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUs4akMsb0JBQW1CLEVBQUc5akMsS0FBS3dkLFlBQVkxZSxFQUFFa0IsS0FBSzRqQyxTQUFTLGtEQUFrRGhrQyxFQUFFLHNKQUF5SjYyQyxHQUFxQixTQUFTMzNDLEdBQUdrQixLQUFLMmpDLGNBQWMsQ0FBQyxLQUFLM2pDLEtBQUs4akMsb0JBQW1CLEVBQUc5akMsS0FBS3dkLFlBQVkxZSxFQUFFLElBQUljLEVBQUVkLEVBQUVvQyxPQUFPN0IsRUFBRThrQyxHQUFHLEtBQUt2a0MsR0FBR2xCLEVBQUVzbkMsR0FBR3BtQyxHQUFHdkIsRUFBRSxTQUFTUyxFQUFFYyxHQUFHLEdBQUcsSUFBSWQsRUFBRSxNQUFNLEtBQUssSUFBSSxJQUFJTyxFQUFFLEdBQUdYLEVBQUUsRUFBRUEsRUFBRUksRUFBRUosSUFBSVcsR0FBR08sRUFBRWxCLEdBQUdBLEVBQUVJLEVBQUUsSUFBSU8sR0FBRyxLQUFLLE9BQU9BLEVBQTFGLENBQTZGTyxFQUFFUCxHQUFHYyxFQUFFZCxFQUFFMkYsT0FBTyxHQUFHcEgsRUFBRWdDLEdBQUcsRUFBRSxLQUFLLFFBQVFPLEVBQUVpRCxLQUFLLEtBQUssSUFBSXBELEtBQUs0akMsU0FBUyxrQ0FBa0NsbEMsRUFBRSw2REFBNkRMLEVBQUUsbURBQW1EVCxFQUFFLHNCQUF5Qjg0QyxHQUFHLEdBQUcsU0FBU0MsR0FBRzczQyxFQUFFYyxHQUFHLFFBQUcsSUFBU0EsSUFBSUEsR0FBRSxHQUFJLFdBQVdkLEVBQUUsT0FBT2MsRUFBRXkyQyxHQUFHVixHQUFHLEdBQUcsU0FBUzcyQyxFQUFFLE9BQU9jLEVBQUUwMkMsR0FBR1QsR0FBRyxHQUFHLFFBQVEvMkMsRUFBRSxPQUFPYyxFQUFFMjJDLEdBQUdULEdBQUcsR0FBRyxVQUFVaDNDLEVBQUUsT0FBT2MsRUFBRXduQyxHQUFHRixHQUFHLE1BQU0sSUFBSTNrQyxNQUFNLGNBQWN6RCxFQUFFLG9EQUFvRCxJQUFJODNDLEdBQUcsSUFBUUMsR0FBRyxXQUFXLFNBQVMvM0MsRUFBRUEsR0FBRyxHQUFHa0IsS0FBS3UwQyxNQUFNejFDLEVBQUVrQixLQUFLODJDLFlBQVksSUFBSWg5QixRQUFROVosS0FBSysyQyxnQkFBZ0IsSUFBSUMsUUFBUWgzQyxLQUFLaTNDLGFBQWEsSUFBSW45QixRQUFROVosS0FBS2szQyxjQUFjLEVBQUVsM0MsS0FBS20zQyxhQUFhLEVBQUVuM0MsS0FBS28zQyxlQUFlLEVBQUVwM0MsS0FBS3EzQyxtQkFBa0IsRUFBR3IzQyxLQUFLc3RDLFVBQVMsR0FBSTF2QyxFQUFFd0UsUUFBUSxhQUFhLE1BQU0sSUFBSUcsTUFBTSx5Q0FBeUMsR0FBRyxNQUFNekQsRUFBRSxDQUFDLElBQUljLEVBQUUwZ0IsR0FBRzFpQixFQUFFdUUsVUFBVSxrQkFBa0JuQyxLQUFLczNDLGFBQWFqNEMsRUFBRXpCLEVBQUV1RSxVQUFVLG9CQUFvQnUwQyxHQUFHQSxHQUFHcjNDLElBQUlxM0MsR0FBR3IzQyxHQUFHLEdBQUdxM0MsR0FBR3IzQyxJQUFJVyxLQUFLdTBDLE1BQU0sSUFBSXBILEdBQUd2dEMsR0FBR0ksS0FBS3NyQixPQUFPMXJCLEVBQUUwckIsT0FBT3RyQixLQUFLdTNDLHFCQUFvQixPQUFRdjNDLEtBQUtzM0MsWUFBWSxHQUFHdDNDLEtBQUt1M0MscUJBQW9CLEVBQUd2M0MsS0FBS3NyQixPQUFPeHNCLEVBQUU4b0MsR0FBR3RjLE9BQU8sSUFBSWpzQixFQUFFVyxLQUFLdzNDLGVBQWUsSUFBSWxELEdBQUd0MEMsS0FBS3UwQyxPQUFPdjBDLEtBQUt5M0MsbUJBQW1CLE1BQU03NUMsRUFBRXdELE9BQU8yeUIsT0FBTyxLQUFLbjJCLEVBQUV3RCxPQUFPMnlCLE9BQU92SSxPQUFPNXRCLEVBQUV3RCxPQUFPMnlCLE9BQU94SSxNQUFNMU0sT0FBTzY0QixpQkFBaUJkLEdBQUcsS0FBSyxLQUFLNTJDLEtBQUtreUMsUUFBUSxJQUFJbFgsR0FBR2g3QixLQUFLNGUsSUFBSSxPQUFPOWYsRUFBRVUsVUFBVWtlLFNBQVMsU0FBUzVlLEVBQUVjLEVBQUVQLEdBQUcsR0FBR1csS0FBS2t5QyxRQUFReDVCLElBQUk1WixHQUFHLE1BQU0sSUFBSXlELE1BQU0scUNBQXFDdkMsS0FBS2t5QyxRQUFRandDLElBQUluRCxFQUFFLENBQUN5TSxNQUFNM0wsRUFBRXFMLE1BQU01TCxLQUFLUCxFQUFFVSxVQUFVa2YsV0FBVyxTQUFTNWYsRUFBRWMsR0FBRyxHQUFHLE1BQU1kLEVBQUUsTUFBTSxJQUFJeUQsTUFBTSw0REFBNEQsSUFBSWxELEVBQUUsb0JBQW9CbWlCLGlCQUFpQjFpQixhQUFhMGlCLGlCQUFpQixvQkFBb0JtMkIsbUJBQW1CNzRDLGFBQWE2NEMsa0JBQWtCajVDLEVBQUVJLEVBQUVrTSxnQkFBZ0JwRixXQUFXdkgsRUFBRSxvQkFBb0J1NUMsV0FBVzk0QyxhQUFhODRDLFVBQVV6M0MsRUFBRSxvQkFBb0IwM0Msa0JBQWtCLzRDLGFBQWErNEMsaUJBQWlCbDRDLEVBQUUsb0JBQW9CbTRDLGtCQUFrQmg1QyxhQUFhZzVDLGlCQUFpQjEzQyxFQUFFRCxFQUFFLENBQUNyQixFQUFFaTVDLFdBQVdqNUMsRUFBRWs1QyxhQUFhLENBQUNsNUMsRUFBRXlzQixNQUFNenNCLEVBQUUwc0IsUUFBUTN0QixFQUFFdUMsRUFBRSxHQUFHbkMsRUFBRW1DLEVBQUUsR0FBR3lELEVBQUUsQ0FBQzVGLEVBQUVKLEdBQUc2QixFQUFFLENBQUN6QixFQUFFSixFQUFFK0IsR0FBRyxLQUFLUCxHQUFHWCxHQUFHTCxHQUFHOEIsR0FBR1IsR0FBRyxNQUFNLElBQUk0QyxNQUFNLHFQQUFxUHpELEVBQUVtQixZQUFZOUIsT0FBT3dCLEdBQUdRLEtBQUssTUFBTUgsS0FBS2k0QyxzQkFBc0JqNEMsS0FBS2k0QyxvQkFBb0IxM0IsR0FBRzNpQixFQUFFdUUsVUFBVSxrQkFBa0J1ZSxXQUFXLE9BQU8xZ0IsS0FBS2k0QyxvQkFBb0Izc0IsT0FBT0MsTUFBTTF0QixFQUFFbUMsS0FBS2k0QyxvQkFBb0Izc0IsT0FBT0UsT0FBT3Z0QixFQUFFK0IsS0FBS2k0QyxvQkFBb0JDLFVBQVVwNUMsRUFBRSxFQUFFLEVBQUVqQixFQUFFSSxHQUFHYSxFQUFFa0IsS0FBS2k0QyxvQkFBb0Izc0IsUUFBUSxJQUFJeG5CLEVBQUU1RixFQUFFOEYsRUFBRWhFLEtBQUttNEMsaUJBQWlCdDBDLEVBQUUsU0FBUyxHQUFHN0QsS0FBS2t5QyxRQUFRenpDLElBQUl1RixFQUFFZ0osUUFBUW9yQyxNQUFNMTRCLEdBQUc2RCxPQUFPdmpCLEtBQUt1MEMsTUFBTTFILHlCQUF5QjdzQyxLQUFLcTRDLFdBQVdyMEMsRUFBRWdKLFFBQVFsTyxHQUFHbEIsRUFBRXdFLFFBQVEsY0FBYyxDQUFDMEIsRUFBRSxJQUFJbW1DLEdBQUd2cUMsR0FBRyxJQUFJMUIsRUFBRWdDLEtBQUtzNEMsaUJBQWlCeDBDLEVBQUUwWixZQUFZeFosRUFBRWlILE9BQU8vTSxFQUFFOEIsS0FBS3U0QyxjQUFjejBDLEVBQUUsQ0FBQ0UsR0FBR2hHLFFBQVE4RixFQUFFLElBQUlrbUMsR0FBR3RxQyxHQUFHeEIsRUFBRThCLEtBQUt1NEMsY0FBY3owQyxFQUFFLENBQUNFLElBQUksT0FBT2hFLEtBQUs0ZCxZQUFZNVosRUFBRWdKLFFBQVE5TyxHQUFHWSxFQUFFVSxVQUFVMjRDLGlCQUFpQixTQUFTcjVDLEVBQUVjLEdBQUcsSUFBSVAsRUFBRSxHQUFHLE9BQU9XLEtBQUswZCxTQUFTcmUsRUFBRVAsRUFBRWMsR0FBRyxDQUFDb04sT0FBTzNOLEVBQUVrTSxNQUFNek0sRUFBRW1NLE1BQU1yTCxJQUFJZCxFQUFFVSxVQUFVNk4sTUFBTSxTQUFTdk8sRUFBRWMsR0FBRyxHQUFHLE1BQU1BLEVBQUUsTUFBTSxJQUFJMkMsTUFBTSxvREFBb0QsR0FBRzNFLEVBQUV3RSxRQUFRLFNBQVMsSUFBSSxJQUFJL0MsRUFBRSxFQUFFQSxFQUFFTyxFQUFFc0IsT0FBTzdCLElBQUksQ0FBQyxJQUFJWCxFQUFFa0IsRUFBRVAsR0FBRyxJQUFJMmtCLEdBQUd0bEIsR0FBRyxDQUFDLEdBQUdkLEVBQUV3RSxRQUFRLGdDQUFnQyxNQUFNRyxNQUFNLGFBQWE3RCxFQUFFLCtJQUErSSxNQUFNNkQsTUFBTSxhQUFhN0QsRUFBRSwyQ0FBMkMsSUFBSUwsRUFBRTJCLEtBQUtreUMsUUFBUXp6QyxJQUFJSyxHQUFHLEdBQUcsY0FBY1QsRUFBRTRNLE1BQU0sTUFBTSxJQUFJMUksTUFBTSx5RUFBeUV2QyxLQUFLdzRDLGVBQWUxNUMsR0FBR1QsRUFBRSs1QyxNQUFNMTRCLEdBQUc0RCxPQUFPamxCLEVBQUU4TixPQUFPdk0sR0FBR2QsRUFBRVUsVUFBVThPLFNBQVMsU0FBU3hQLEdBQUcsSUFBSWMsRUFBRUksS0FBS2t5QyxRQUFRenpDLElBQUlLLEdBQUdPLEVBQUVPLEVBQUV1TSxPQUFPek4sRUFBRWtCLEVBQUVxTCxNQUFNNU0sRUFBRXVCLEVBQUU2NEMsZUFBZXQ0QyxFQUFFUCxFQUFFb0YsTUFBTXBILEVBQUVnQyxFQUFFMkwsTUFBTTVMLEVBQUVDLEVBQUV3bUMsU0FBUyxHQUFHLE1BQU1qbUMsRUFBRSxDQUFDLElBQUlDLEVBQVNBLEVBQUVULEVBQUUsSUFBSTYyQyxHQUFHNTRDLEVBQUV3NEMsSUFBSSxJQUFJWCxHQUFHNzNDLEVBQUV3NEMsSUFBSSxJQUFJdjRDLEVBQUVtQyxLQUFLdTRDLGNBQWNuNEMsRUFBRSxDQUFDLENBQUM0TSxPQUFPbE8sRUFBRXlNLE1BQU0zTixFQUFFcU4sTUFBTXZNLEtBQUtULEVBQUUrQixLQUFLc08sU0FBU3pRLEVBQUVtUCxRQUFRLE9BQU9uUCxFQUFFMlEsVUFBVXZRLEVBQUUsR0FBRyxNQUFNb0IsRUFBRSxPQUFPVyxLQUFLMDRDLHFCQUFxQjU1QyxHQUFHLEdBQUcsV0FBV0osRUFBRSxPQUFPVyxFQUFFLElBQUl3RSxFQUFFbkUsRUFBRW9FLEVBQUUsTUFBTTlELEtBQUsyNEMsYUFBbUgsT0FBckc3MEMsSUFBSUQsRUFBRXNELEtBQXNCekgsRUFBakIsY0FBY2hCLEVBQUtpa0MsR0FBR3RrQyxFQUFFd3hCLEtBQUszaEIsV0FBVzdQLEVBQUU0eEIsS0FBSy9oQixZQUFjbE8sS0FBSzQ0QyxxQkFBcUI5NUMsR0FBVWdGLElBQUk5RCxLQUFLbzNDLGdCQUFnQmp3QyxJQUFJdEQsR0FBRzdELEtBQUswNEMscUJBQXFCNTVDLEVBQUVZLElBQUlaLEVBQUVVLFVBQVU2TyxLQUFLLFNBQVN2UCxHQUFHLE9BQU9PLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSUosRUFBRVAsRUFBRWhCLEVBQUU4QixFQUFFUixFQUFFUyxFQUFFdkMsRUFBRUksRUFBRTRGLEVBQUVuRSxFQUFFb0UsRUFBRTVGLEVBQUU4RixFQUFFaEcsRUFBRStGLEVBQUVLLEVBQUVDLEVBQUVHLEVBQUVHLEVBQUVFLEVBQUVFLEVBQUVFLEVBQUUsT0FBT3ZHLEVBQUVzQixNQUFLLFNBQVN0QixHQUFHLE9BQU9BLEVBQUVnQyxPQUFPLEtBQUssRUFBRSxHQUFHVixLQUFLODJDLFlBQVlwK0IsSUFBSTVaLEdBQUcsT0FBT2MsRUFBRUksS0FBSzgyQyxZQUFZcjRDLElBQUlLLEdBQUcsQ0FBQyxFQUFFLElBQUlvQixTQUFRLFNBQVNwQixHQUFHLE9BQU9jLEVBQUV1QixLQUFLckMsT0FBTSxHQUFHTyxFQUFFVyxLQUFLa3lDLFFBQVF6ekMsSUFBSUssR0FBR1QsRUFBRWdCLEVBQUU4TSxPQUFPaE0sRUFBRWQsRUFBRWtNLE1BQU01TCxFQUFFTixFQUFFMkYsTUFBTTVFLEVBQUVmLEVBQUU0TCxNQUFNcE4sRUFBRXdCLEVBQUVvNUMsZUFBZXg2QyxFQUFFb0IsRUFBRSttQyxTQUFTLE1BQU16bUMsRUFBRSxZQUFTLEVBQU9rRSxFQUFFNUYsRUFBRSxJQUFJdTRDLEdBQUdyMkMsRUFBRWkyQyxJQUFJLElBQUlYLEdBQUd0MUMsRUFBRWkyQyxJQUFJMTJDLEVBQUVNLEtBQUt1NEMsY0FBYzEwQyxFQUFFLENBQUMsQ0FBQ21KLE9BQU9sTyxFQUFFeU0sTUFBTXBMLEVBQUU4SyxNQUFNN0ssS0FBSzBELEVBQUU5RCxLQUFLcU8sS0FBSzNPLEVBQUVzTixRQUFRdE4sRUFBRThPLFVBQVUsQ0FBQyxFQUFFMUssR0FBRyxHQUFHLE1BQU16RixFQUFFLE1BQU0sQ0FBQyxFQUFFMkIsS0FBSzA0QyxxQkFBcUI1NUMsSUFBSSxJQUFJbEIsRUFBRXdFLFFBQVEsaUNBQWlDLElBQUl4RSxFQUFFdUUsVUFBVSxpQkFBaUIsTUFBTSxJQUFJSSxNQUFNLGdHQUFnRyxPQUFPckUsRUFBRSxLQUFLLGNBQWNrQyxHQUFHeEMsRUFBRWEsSUFBSSw0QkFBNEJ1RixFQUFFaEUsS0FBSzJILE9BQU83SSxHQUFHZCxFQUFFZ0MsS0FBS2t5QyxRQUFRenpDLElBQUl1RixFQUFFZ0osUUFBUTlPLEdBQUcrRyxFQUFFakYsS0FBS3UwQyxPQUFPakcsd0JBQXdCN3RDLE1BQU13RSxFQUFFLENBQUNqSCxFQUFFNjZDLFNBQVMxekMsT0FBT3djLEdBQUd4aEIsTUFBTUgsS0FBSzgyQyxZQUFZNzBDLElBQUluRCxFQUFFLElBQUksY0FBY3NCLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFSixLQUFLdTBDLE1BQU05Rix5QkFBeUIsS0FBSyxFQUFFL3ZDLEVBQUVpQyxPQUFPakMsRUFBRWdDLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxjQUFjTixFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRUYsUUFBUWlRLElBQUksQ0FBQ3RTLEVBQUVneUIsS0FBSzdrQixPQUFPbk4sRUFBRW95QixLQUFLamxCLFVBQVUsS0FBSyxFQUFFLE9BQU81RyxFQUFFMUYsRUFBRWlDLE9BQU8wRCxFQUFFRCxFQUFFLEdBQUdJLEVBQUVKLEVBQUUsR0FBR0wsRUFBRTQrQixHQUFHdCtCLEVBQUVHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLE1BQU10RyxFQUFFNkYsRUFBRS9ELEtBQUs0NEMscUJBQXFCOTVDLElBQUk2RixFQUFFUixFQUFFaEUsR0FBRzRELEVBQUUvRCxLQUFLdTBDLE1BQU14SCxnQ0FBZ0M3dUMsRUFBRXlHLElBQUlqRyxFQUFFZ0MsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLE1BQU1zRCxHQUFHaEUsS0FBSzRkLFlBQVk1WixFQUFFZ0osUUFBUW5JLEVBQUU3RSxLQUFLMDRDLHFCQUFxQjU1QyxFQUFFaUYsR0FBR2dCLEVBQUUvRSxLQUFLODJDLFlBQVlyNEMsSUFBSUssR0FBR2tCLEtBQUs4MkMsWUFBWWo1QixPQUFPL2UsR0FBR2lHLEVBQUVoQyxTQUFRLFNBQVNqRSxHQUFHLE9BQU9BLEVBQUUrRixNQUFLN0UsS0FBSysyQyxnQkFBZ0JyK0IsSUFBSTVaLEtBQUtrQixLQUFLKzJDLGdCQUFnQmw1QixPQUFPL2UsR0FBR2tCLEtBQUs0ZCxZQUFZOWUsSUFBSSxDQUFDLEVBQUUrRixXQUFTL0YsRUFBRVUsVUFBVW81QyxxQkFBcUIsU0FBUzk1QyxHQUFHLElBQUljLEVBQUVQLEVBQUVXLEtBQUt0QixFQUFFc0IsS0FBS2t5QyxRQUFRenpDLElBQUlLLEdBQUdULEVBQUVLLEVBQUU2TSxNQUFNcEwsRUFBRXpCLEVBQUV1TSxNQUFNdEwsRUFBRWpCLEVBQUUwbkMsU0FBU2htQyxFQUFFK0QsRUFBRTlGLEdBQUcsR0FBR1QsRUFBRXdFLFFBQVEsZ0NBQWdDLENBQUMsSUFBSXZFLEVBQUVtQyxLQUFLMkgsT0FBTzdJLEdBQUdiLEVBQUUrQixLQUFLa3lDLFFBQVF6ekMsSUFBSVosRUFBRW1QLFFBQVFuSixHQUFHakUsRUFBRUksS0FBS3UwQyxPQUFPakYsZ0NBQWdDN3VDLE1BQU1iLEVBQUUsQ0FBQzNCLEVBQUU0NkMsU0FBUzF6QyxPQUFPd2MsR0FBR3RqQixLQUFLK2tDLFNBQVMsRUFBRWhqQyxHQUFHLE9BQU9KLEtBQUs0ZCxZQUFZL2YsRUFBRW1QLFFBQVFuSixFQUFFLElBQUluRSxFQUFFOUIsRUFBRXdFLFFBQVEsZ0JBQWUsSUFBS3pDLEVBQUVtRSxFQUFFcEUsRUFBRXFwQixHQUFHMXFCLEdBQUdBLEVBQUVILEVBQUU4QixLQUFLbTRDLGlCQUFpQnIwQyxFQUFFLFdBQVc1RixFQUFFb04sS0FBS25ILEVBQUU5RixHQUFHMkIsS0FBS2t5QyxRQUFRenpDLElBQUlQLEVBQUU4TyxRQUFRb3JDLE1BQU0xNEIsR0FBRzhELFNBQVMsSUFBSXhmLEVBQUVvcEIsSUFBRyxXQUFXLElBQUl4dEIsRUFBRUYsRUFBRSxJQUFJZ3FDLEdBQUc1bEMsR0FBRyxJQUFJMmxDLEdBQUczbEMsR0FBRyxPQUFPekUsRUFBRWs1QyxjQUFjMzRDLEVBQUUsQ0FBQyxDQUFDMkwsTUFBTXpILEVBQUVtSCxNQUFNOUssRUFBRTZNLE9BQU9sTyxJQUFJWixFQUFFLFNBQVFGLEVBQUVnQyxLQUFLa3lDLFFBQVF6ekMsSUFBSXVGLEVBQUVnSixRQUFRakosRUFBRS9ELEtBQUt1MEMsTUFBTXZILGdEQUFnRGh2QyxFQUFFNjZDLFFBQVE3NkMsRUFBRXluQyxTQUFTLEdBQUd6bkMsRUFBRXluQyxTQUFTLElBQUlyQyxTQUFTLEVBQUVoakMsR0FBRyxPQUFPSixLQUFLNGQsWUFBWTFmLEVBQUU4TyxRQUFRakosR0FBR2pGLEVBQUVVLFVBQVV1TCxLQUFLLFNBQVNqTSxHQUFHLE9BQU9PLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSUosRUFBRVAsRUFBRWhCLEVBQUU4QixFQUFFdkMsRUFBRStCLEVBQUVTLEVBQUUsT0FBTzFCLEVBQUVzQixNQUFLLFNBQVN0QixHQUFHLE9BQU9BLEVBQUVnQyxPQUFPLEtBQUssRUFBRSxPQUFPZCxFQUFFSSxLQUFLMjRDLGFBQWF0NUMsRUFBRSxHQUFHaEIsR0FBRSxFQUFHLE1BQU0yQixLQUFLODRDLG9CQUFvQjk0QyxLQUFLODRDLG1CQUFtQno1QyxFQUFFaEIsR0FBRSxHQUFJMkIsS0FBSzI0QyxhQUFheDNDLEtBQUs5QixHQUFHVyxLQUFLMjRDLGFBQWF0NUMsRUFBRVAsSUFBSXFCLEVBQUVuQyxFQUFFZ0MsS0FBSzI0QyxhQUFhenpDLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRXN3QyxVQUFTNWQsUUFBTyxTQUFTMXlCLEdBQUcsT0FBTyxNQUFNQSxLQUFJbEIsRUFBRUksRUFBRWdDLEtBQUsyNEMsYUFBYXp6QyxLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUVYLFNBQVFxekIsUUFBTyxTQUFTMXlCLEdBQUcsT0FBTyxNQUFNQSxLQUFJa0IsS0FBSzI0QyxhQUFhLzRDLEVBQUV2QixJQUFJMkIsS0FBSzg0QyxtQkFBbUIsTUFBTSxDQUFDLEVBQUU1NEMsUUFBUWlRLElBQUloUSxJQUFJLEtBQUssRUFBRSxPQUFPUixFQUFFakIsRUFBRWlDLE9BQU9QLEVBQUUsQ0FBQysyQyxhQUFhbjNDLEtBQUttM0MsYUFBYUMsZUFBZXAzQyxLQUFLbzNDLGVBQWVoc0MsU0FBUzFMLEVBQUVDLEdBQUd1TCxvQkFBb0IsV0FBVyxPQUFPdkwsRUFBRXVGLEtBQUksU0FBU3BHLEVBQUVjLEdBQUcsTUFBTSxDQUFDekIsS0FBS1AsRUFBRWdDLEdBQUcyMkMsR0FBR3ozQyxNQUFLb0csS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFWCxLQUFLLEtBQUtXLEVBQUV5M0MsTUFBS256QyxLQUFLLE9BQU91YixPQUFPLE1BQU0zZSxLQUFLbTNDLGFBQWEsRUFBRW4zQyxLQUFLbzNDLGVBQWUsRUFBRSxDQUFDLEVBQUVoM0MsV0FBU3RCLEVBQUVVLFVBQVV1ZSxPQUFPLFdBQVcsTUFBTSxDQUFDQyxZQUFXLEVBQUdrNUIsY0FBY2wzQyxLQUFLazNDLGdCQUFnQnA0QyxFQUFFVSxVQUFVdTVDLFdBQVcsV0FBVyxPQUFPbjdDLEVBQUV1RSxVQUFVLGdEQUFnRCxFQUFFbkMsS0FBS3UwQyxNQUFNdEYsYUFBYSxDQUFDK0osUUFBUTd4QyxJQUFJOHhDLE1BQU0sT0FBT242QyxFQUFFVSxVQUFVMDVDLFNBQVMsU0FBU3A2QyxHQUFHLE9BQU9sQixFQUFFdUUsVUFBVSxnREFBZ0QsR0FBR25DLEtBQUt1MEMsTUFBTXJGLFdBQVdwd0MsSUFBSUEsRUFBRW02QyxNQUFNOXhDLElBQUlySSxJQUFJQSxFQUFFVSxVQUFVNHhDLGFBQWEsU0FBU3R5QyxHQUFHLE9BQU9PLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSUosRUFBRSxPQUFPbEIsRUFBRXNCLE1BQUssU0FBU1gsR0FBRyxPQUFPekIsRUFBRXVFLFVBQVUsZ0RBQWdELEVBQUUsQ0FBQyxFQUFFbkMsS0FBS3UwQyxNQUFNcEQsdUJBQXVCcnlDLElBQUksQ0FBQyxHQUFHYyxFQUFFZCxHQUFHbTZDLE1BQU1yNUMsRUFBRW81QyxnQkFBY2w2QyxFQUFFVSxVQUFVb2UsWUFBWSxTQUFTOWUsR0FBRyxJQUFJa0IsS0FBSysyQyxnQkFBZ0JyK0IsSUFBSTVaLEdBQUcsR0FBR2tCLEtBQUs4MkMsWUFBWXArQixJQUFJNVosR0FBR2tCLEtBQUsrMkMsZ0JBQWdCcm1DLElBQUk1UixRQUFRLEdBQUdrQixLQUFLa3lDLFFBQVF4NUIsSUFBSTVaLEdBQUcsQ0FBQ2tCLEtBQUt3NEMsZUFBZTE1QyxHQUFHLElBQUljLEVBQUVJLEtBQUtreUMsUUFBUXp6QyxJQUFJSyxHQUFHMjVDLGVBQWUsTUFBTTc0QyxJQUFJQSxFQUFFaXdCLEtBQUtyaEIsVUFBVTVPLEVBQUVxd0IsS0FBS3poQixXQUFXeE8sS0FBS2t5QyxRQUFRcjBCLE9BQU8vZSxLQUFLQSxFQUFFVSxVQUFVZzVDLGVBQWUsU0FBUzE1QyxHQUFHLElBQUljLEVBQUVJLEtBQUtreUMsUUFBUXp6QyxJQUFJSyxHQUFHTyxFQUFFTyxFQUFFaTVDLFFBQVFuNkMsRUFBRWtCLEVBQUVxTCxNQUFNNU0sRUFBRXVCLEVBQUU2bEMsU0FBU3RsQyxFQUFFUCxFQUFFdzRDLE1BQU14NkMsRUFBRWdDLEVBQUV3bUMsU0FBU3ptQyxFQUFFQyxFQUFFb0YsTUFBTTVFLEVBQUVULEdBQUdBLEVBQUV3NUMsWUFBWXI2QyxFQUFFakIsRUFBRW1DLEtBQUtpM0MsYUFBYXg0QyxJQUFJMkIsR0FBR3ZDLEVBQUUsRUFBRW1DLEtBQUtpM0MsYUFBYWgxQyxJQUFJN0IsRUFBRXZDLEVBQUUsSUFBSW1DLEtBQUtpM0MsYUFBYXA1QixPQUFPemQsR0FBRyxNQUFNZixJQUFJVyxLQUFLazNDLGVBQWVsM0MsS0FBS281QyxhQUFhLzZDLEVBQUVLLEdBQUdzQixLQUFLdzNDLGVBQWV2QyxlQUFlNTFDLEVBQUVoQixFQUFFOEIsRUFBRXZDLEtBQUssSUFBSUssRUFBRStCLEtBQUtreUMsUUFBUXp6QyxJQUFJSyxHQUFHYixFQUFFNDZDLFFBQVEsS0FBSzU2QyxFQUFFd25DLFNBQVMsS0FBS3huQyxFQUFFbW9DLFVBQVMsRUFBR25vQyxFQUFFK0csTUFBTSxNQUFNbEcsRUFBRVUsVUFBVTY0QyxXQUFXLFNBQVN2NUMsR0FBRyxPQUFPa0IsS0FBS3E1QyxZQUFZdjZDLEdBQUdrQixLQUFLa3lDLFFBQVF6ekMsSUFBSUssR0FBRys1QyxTQUFTLzVDLEVBQUVVLFVBQVU4NUMsWUFBWSxTQUFTeDZDLEdBQUcsT0FBT2tCLEtBQUtreUMsUUFBUXp6QyxJQUFJSyxJQUFJQSxFQUFFVSxVQUFVKzVDLGNBQWMsV0FBVyxPQUFPMzdDLEVBQUV3RSxRQUFRLHNCQUFzQixNQUFNcEMsS0FBS3c1QyxhQUFheDVDLEtBQUt3NUMsV0FBVzU2QixHQUFHcEQsWUFBWSxRQUFReGIsS0FBS3c1QyxZQUFZLE1BQU0xNkMsRUFBRVUsVUFBVWk2QyxtQkFBbUIsU0FBUzM2QyxFQUFFYyxHQUFHLElBQUlQLEVBQUVXLEtBQUssWUFBTyxJQUFTSixJQUFJQSxFQUFFLEtBQUssTUFBTUksS0FBS3U1QyxpQkFBaUJ6NkMsRUFBRXNHLE9BQU0sU0FBU3RHLEdBQUcsT0FBTyxNQUFNTyxFQUFFNnlDLFFBQVF6ekMsSUFBSUssRUFBRWtPLFFBQVE2ckMsU0FBUy81QyxFQUFFd00sS0FBSzFMLE1BQUtkLEVBQUVVLFVBQVVrNkMsZ0JBQWdCLFdBQVcsT0FBTzE1QyxLQUFLdTBDLE9BQU96MUMsRUFBRVUsVUFBVWd3QixRQUFRLFNBQVMxd0IsRUFBRWMsR0FBRyxJQUFJUCxFQUFFVyxLQUFLMjVDLGdCQUFnQjc2QyxFQUFFeU0sTUFBTSxhQUFhLE9BQU92TCxLQUFLa3lDLFFBQVF6ekMsSUFBSVksRUFBRTJOLFFBQVF5ckMsZUFBZSxDQUFDNW9CLEtBQUtqUixHQUFHaEMsS0FBSzlkLEVBQUVxUSxTQUFTOGdCLEtBQUtyUixHQUFHaEMsS0FBS2hkLEVBQUV1UCxVQUFVOVAsR0FBR1AsRUFBRVUsVUFBVXF3QixLQUFLLFNBQVMvd0IsR0FBRyxPQUFPa0IsS0FBS2t5QyxRQUFRenpDLElBQUlLLEVBQUVrTyxRQUFReXJDLGVBQWU1b0IsS0FBSzFnQixTQUFTclEsRUFBRVUsVUFBVXl3QixLQUFLLFNBQVNueEIsR0FBRyxPQUFPa0IsS0FBS2t5QyxRQUFRenpDLElBQUlLLEVBQUVrTyxRQUFReXJDLGVBQWV4b0IsS0FBSzlnQixTQUFTclEsRUFBRVUsVUFBVXdGLE1BQU0sU0FBU2xHLEVBQUVjLEVBQUVQLEdBQUcsR0FBR1csS0FBS3k1QyxtQkFBbUIsQ0FBQzM2QyxJQUFJLE9BQU9rQixLQUFLdzVDLFdBQVd4MEMsTUFBTWxHLEVBQUVjLEVBQUVQLEdBQUcsR0FBRyxJQUFJOEUsRUFBRTlFLEdBQUcsT0FBTzZ3QixHQUFHLEdBQUc3d0IsRUFBRVAsRUFBRW1NLE9BQU8sSUFBSXZNLEVBQUVzQixLQUFLa3lDLFFBQVF6ekMsSUFBSUssRUFBRWtPLFFBQVFvNUIsU0FBUy9uQyxFQUFFNDdCLEdBQUduN0IsRUFBRXlNLE1BQU0zTCxFQUFFUCxHQUFHLEdBQUdYLElBQUlMLEVBQUUsQ0FBQyxJQUFJOEIsRUFBRXZDLEVBQUV3RSxRQUFRLCtCQUErQixJQUFJZ3lDLEdBQUcvMEMsR0FBRyxJQUFJMjBDLEdBQUczMEMsR0FBR00sRUFBRVEsRUFBRXFuQyxtQkFBbUI1bkMsR0FBRyxPQUFPSSxLQUFLdTRDLGNBQWNwNEMsRUFBRSxDQUFDckIsR0FBRyxLQUFLYSxHQUFHLE9BQU9LLEtBQUtxNUMsWUFBWXY2QyxFQUFFa08sUUFBUWhOLEtBQUs0NUMsYUFBYTk2QyxFQUFFYyxFQUFFUCxJQUFJUCxFQUFFVSxVQUFVbzZDLGFBQWEsU0FBUzk2QyxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUVzQixLQUFLa3lDLFFBQVF6ekMsSUFBSUssRUFBRWtPLFFBQVEzTyxFQUFFb08sR0FBR0MsS0FBS3JOLEVBQUUsR0FBR1AsRUFBRW1NLE1BQU1qTCxNQUFNRyxFQUFFSCxLQUFLa3lDLFFBQVF6ekMsSUFBSUosRUFBRTJPLFFBQVExTyxPQUFPbUUsT0FBT3RDLEVBQUV6QixHQUFHeUIsRUFBRW9MLE1BQU1sTSxFQUFFYyxFQUFFOEssTUFBTW5NLEVBQUVtTSxNQUFNLElBQUlyTixFQUFFczhCLEdBQUd0NkIsRUFBRWQsRUFBRXNOLFNBQVMxTixFQUFFc0csUUFBUXBILEdBQUdjLEVBQUVzRyxNQUFNK2dDLFlBQVk1bEMsRUFBRTZFLE1BQU0sQ0FBQytnQyxXQUFXbm9DLEVBQUV1N0MsV0FBV3o2QyxFQUFFc0csT0FBT3RHLEVBQUVzRyxNQUFNbTBDLFlBQVlyNkMsRUFBRWtPLFFBQVEsSUFBSXJOLEVBQUVLLEtBQUtpM0MsYUFBYXg0QyxJQUFJMEIsRUFBRTZFLE1BQU1tMEMsYUFBYSxFQUFFLE9BQU9uNUMsS0FBS2kzQyxhQUFhaDFDLElBQUk5QixFQUFFNkUsTUFBTW0wQyxXQUFXeDVDLEVBQUUsR0FBR3RCLEdBQUdTLEVBQUVVLFVBQVU4VyxhQUFhLFNBQVN4WCxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLEdBQUdzQixLQUFLeTVDLG1CQUFtQixDQUFDMzZDLElBQUksT0FBT2tCLEtBQUt3NUMsV0FBV2xqQyxhQUFheFgsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFdTdCLEdBQUdoNkIsRUFBRVAsRUFBRVgsR0FBRyxHQUFHTCxFQUFFcThCLE1BQUssU0FBUzU3QixHQUFHLE9BQU8sSUFBSUEsS0FBSSxPQUFPb3hCLEdBQUcsR0FBRzd4QixHQUFHLElBQUk4QixFQUFFLElBQUlrMEMsR0FBR3owQyxFQUFFbEIsRUFBRUwsR0FBRyxPQUFPMkIsS0FBS3U0QyxjQUFjcDRDLEVBQUUsQ0FBQ3JCLEtBQUtBLEVBQUVVLFVBQVVxUSxRQUFRLFNBQVMvUSxFQUFFYyxHQUFHLElBQUlQLEVBQUV6QixFQUFFd0UsUUFBUSwrQkFBK0IsSUFBSXV4QyxHQUFHNzBDLEVBQUV5TSxNQUFNM0wsR0FBRyxJQUFJOHpDLEdBQUc1MEMsRUFBRXlNLE1BQU0zTCxHQUFHLE9BQU9JLEtBQUt1NEMsY0FBY2w1QyxFQUFFLENBQUNQLEtBQUtBLEVBQUVVLFVBQVUyRixPQUFPLFNBQVNyRyxFQUFFYyxHQUFHLEdBQUcsY0FBY2QsRUFBRSxHQUFHbU0sTUFBTSxDQUFDLElBQUk1TCxFQUFFUCxFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxPQUFPNndCLEdBQUc3d0IsTUFBS0osRUFBRUksRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsT0FBT2l4QixHQUFHanhCLE1BQUssT0FBT3d3QixHQUFHdHZCLEtBQUttRixPQUFPOUYsRUFBRU8sR0FBR0ksS0FBS21GLE9BQU96RyxFQUFFa0IsSUFBSSxHQUFHSSxLQUFLeTVDLG1CQUFtQjM2QyxHQUFHLE9BQU9rQixLQUFLdzVDLFdBQVdyMEMsT0FBT3JHLEVBQUVjLEdBQUcsR0FBRyxJQUFJZCxFQUFFb0MsT0FBTyxPQUFPcEMsRUFBRSxHQUFHLEdBQUdBLEVBQUVvQyxPQUFPdEQsRUFBRXVFLFVBQVUsZ0NBQWdDLENBQUMsSUFBSTlELEVBQUVvRixLQUFLOEksTUFBTXpOLEVBQUVvQyxPQUFPLEdBQUdmLEVBQUVILEtBQUttRixPQUFPckcsRUFBRWtHLE1BQU0sRUFBRTNHLEdBQUd1QixHQUFHRCxFQUFFSyxLQUFLbUYsT0FBT3JHLEVBQUVrRyxNQUFNM0csR0FBR3VCLEdBQUcsT0FBT0ksS0FBS21GLE9BQU8sQ0FBQ2hGLEVBQUVSLEdBQUdDLEdBQUcsR0FBR2hDLEVBQUV3RSxRQUFRLGdDQUFnQ3RELEVBQUUsR0FBR3VNLEtBQUssRUFBRSxDQUFDLElBQUlqTCxFQUFFLElBQUk2bkMsR0FBR25wQyxFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFeU0sU0FBUTNMLEdBQUcsT0FBT0ksS0FBS3U0QyxjQUFjbjRDLEVBQUV0QixHQUFHLElBQUlqQixFQUFFbXhCLEdBQUdsd0IsRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRXlNLFNBQVEzTCxHQUFHM0IsRUFBRWEsRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRTRPLE1BQU0sRUFBRXZKLEVBQUVyRixFQUFFeU0sTUFBTXZHLE1BQU1wRixRQUFPaUUsRUFBRSxJQUFJbWtDLEdBQUcvcEMsRUFBRWlILEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRXlNLFVBQVMsT0FBT3ZMLEtBQUt1NEMsY0FBYzEwQyxFQUFFNUYsR0FBR3dQLFFBQVE1UCxJQUFJaUIsRUFBRVUsVUFBVXdULElBQUksU0FBU2xVLEdBQUcsR0FBR2tCLEtBQUt5NUMsbUJBQW1CLENBQUMzNkMsSUFBSSxPQUFPa0IsS0FBS3c1QyxXQUFXeG1DLElBQUlsVSxHQUFHLEdBQUdsQixFQUFFd0UsUUFBUSwrQkFBK0IsT0FBT3BDLEtBQUs2NUMsY0FBYy82QyxFQUFFaTNDLEdBQUdqM0MsRUFBRW1NLE9BQU8sSUFBSXJMLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUFNd3FDLElBQUksT0FBTy8xQyxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVNjdCLFlBQVksU0FBU3Y4QixFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLElBQUlMLEVBQUVnQixFQUFFUCxFQUFFeU0sTUFBTSxHQUFHek0sRUFBRXlNLE1BQU0sR0FBR3BMLEVBQUV6QixFQUFFa0IsRUFBRTJMLE1BQU0sR0FBRzNMLEVBQUUyTCxNQUFNLEdBQUczTixFQUFFeUIsRUFBRVAsRUFBRXlNLE1BQU0sR0FBR3pNLEVBQUV5TSxNQUFNLEdBQUc1TCxFQUFFYixFQUFFeU0sTUFBTSxHQUFHLElBQUksSUFBSWxOLEdBQUcsSUFBSThCLElBQUl2QyxFQUFFLElBQUksQ0FBQ3lCLElBQUlQLEVBQUVBLEVBQUVnVCxVQUFVLENBQUMsRUFBRSxFQUFFLEtBQUtwVCxJQUFJa0IsRUFBRUEsRUFBRWtTLFVBQVUsQ0FBQyxFQUFFLEVBQUUsS0FBSyxJQUFJMVIsRUFBRSxJQUFJRCxFQUFFckIsRUFBRUEsRUFBRTZPLEtBQUtoTyxFQUFFL0IsRUFBRSxHQUFHQyxFQUFFLElBQUlzQyxFQUFFLEVBQUUsRUFBRWxDLEVBQUUsSUFBSWtDLEVBQUVQLEVBQUUrTixLQUFLaE8sRUFBRSxFQUFFL0IsR0FBR2dDLEVBQUUsT0FBT0ksS0FBSzg3QixTQUFTMTdCLEVBQUVuQyxHQUFHK0osSUFBSW5LLEdBQUUsR0FBSSxJQUFJZ0csRUFBRXdVLEdBQUd2WixFQUFFbU0sTUFBTXJMLEVBQUVxTCxPQUFPdkwsRUFBRSxJQUFJZ3pDLEdBQUc1ekMsRUFBRXlNLE1BQU0sQ0FBQzVMLEVBQUV0QixFQUFFOEIsR0FBR2QsRUFBRVgsR0FBR29GLEVBQUU5RCxLQUFLczRDLGlCQUFpQjU0QyxFQUFFOGQsWUFBWTNaLEdBQUcsT0FBTzdELEtBQUt1NEMsY0FBYzc0QyxFQUFFLENBQUNaLEVBQUVjLEdBQUdrRSxJQUFJaEYsRUFBRVUsVUFBVTg3QixpQkFBaUIsU0FBU3g4QixHQUFHLElBQUljLEVBQUVkLEVBQUVxQixFQUFFZCxFQUFFUCxFQUFFdUYsRUFBRTNGLEVBQUVJLEVBQUV5OEIsV0FBV2w5QixFQUFFUyxFQUFFMDhCLFdBQVdyN0IsRUFBRXJCLEVBQUUyOEIsS0FBSzc5QixFQUFFa0IsRUFBRTQ4QixXQUFXLzdCLEVBQUViLEVBQUU2OEIsdUJBQXVCdjdCLEVBQUUxQixFQUFFa0IsRUFBRTJMLE1BQU0sR0FBRzNMLEVBQUUyTCxNQUFNLEdBQUcxTixFQUFFUSxFQUFFZ0IsRUFBRWtNLE1BQU0sR0FBR2xNLEVBQUVrTSxNQUFNLEdBQUd0TixFQUFFMkIsRUFBRTJMLE1BQU0sR0FBRzFILEVBQUV3VSxHQUFHelksRUFBRXFMLE1BQU01TCxFQUFFNEwsT0FBT3ZMLEVBQUUsTUFBTVMsRUFBRTJELEVBQUUsTUFBTW5FLEVBQUV6QixFQUFFTixFQUFFKzRDLEdBQUcvNEMsR0FBRSxHQUFJLEtBQUtvRyxFQUFFLElBQUkwdUMsR0FBRzl5QyxFQUFFMkwsTUFBTSxDQUFDdE4sRUFBRW1DLEVBQUV2QyxHQUFHYSxFQUFFTCxFQUFFcUIsRUFBRXhCLEVBQUU0RixHQUFHOUYsRUFBRWdDLEtBQUtzNEMsaUJBQWlCdDBDLEVBQUV3WixZQUFZM1osR0FBR00sRUFBRSxDQUFDdkUsRUFBRVAsR0FBRyxPQUFPYyxHQUFHZ0UsRUFBRWhELEtBQUtoQixHQUFHUixHQUFHd0UsRUFBRWhELEtBQUt4QixHQUFHSyxLQUFLdTRDLGNBQWN2MEMsRUFBRUcsRUFBRW5HLElBQUljLEVBQUVVLFVBQVVzOEIsU0FBUyxTQUFTaDlCLEVBQUVjLEdBQUcsR0FBRyxjQUFjZCxFQUFFbU0sTUFBTSxDQUFDLElBQUk1TCxFQUFFVyxLQUFLa3lDLFFBQVF6ekMsSUFBSUssRUFBRWtPLFFBQVF0TyxFQUFFc0IsS0FBS2t5QyxRQUFRenpDLElBQUltQixFQUFFb04sUUFBUTNPLEVBQUUsSUFBSXlvQyxHQUFwam5JLHdDQUEwam5JaG9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU9wTCxFQUFFLElBQUkybUMsR0FBdGluSSx3Q0FBNGluSWhvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPNUwsRUFBRSxDQUFDSyxLQUFLODVDLGlDQUFpQ2g3QyxFQUFFTyxFQUFFbzVDLGVBQWU1b0IsTUFBTTd2QixLQUFLODVDLGlDQUFpQ2g3QyxFQUFFTyxFQUFFbzVDLGVBQWV4b0IsTUFBTWp3QixLQUFLODVDLGlDQUFpQ2w2QyxFQUFFbEIsRUFBRSs1QyxlQUFlNW9CLE1BQU03dkIsS0FBSzg1QyxpQ0FBaUNsNkMsRUFBRWxCLEVBQUUrNUMsZUFBZXhvQixPQUFPN3ZCLEVBQUVKLEtBQUt1NEMsY0FBY2w2QyxFQUFFc0IsR0FBRzlCLEVBQUVtQyxLQUFLdTRDLGNBQWNwNEMsRUFBRVIsR0FBRzFCLEVBQUUrQixLQUFLd3ZCLFFBQVFwdkIsRUFBRXZDLEdBQUcsT0FBT3VDLEVBQUVvTyxVQUFVM1EsRUFBRTJRLFVBQVV2USxFQUFFLEdBQUcrQixLQUFLeTVDLG1CQUFtQixDQUFDMzZDLEVBQUVjLElBQUksT0FBT0ksS0FBS3c1QyxXQUFXMWQsU0FBU2g5QixFQUFFYyxHQUFHLEdBQUdoQyxFQUFFd0UsUUFBUSxnQ0FBZ0MsT0FBT3BDLEtBQUsrNUMsZUFBZWo3QyxFQUFFYyxFQUFFcW5DLEdBQUdub0MsRUFBRW1NLE9BQU8sSUFBSXBILEVBQUUsSUFBSXNqQyxHQUFHRixHQUFHbm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU83TCxFQUFFTSxLQUFLMjVDLGdCQUFnQjkxQyxFQUFFMlosWUFBWTFlLEVBQUVtTSxPQUFPLE9BQU9qTCxLQUFLdTRDLGNBQWMxMEMsRUFBRSxDQUFDL0UsRUFBRWMsR0FBR0YsSUFBSVosRUFBRVUsVUFBVXlRLG1CQUFtQixTQUFTblIsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsSUFBSVIsRUFBRSxDQUFDYixFQUFFYyxFQUFFUCxHQUFHZSxFQUFFLEtBQUssTUFBTUQsSUFBSUMsRUFBRUQsRUFBRW9MLE1BQU01TCxFQUFFd0IsS0FBS2hCLElBQUksSUFBSXRDLEVBQUUsS0FBSyxHQUFHLE1BQU1RLElBQUlSLEVBQUVRLEVBQUVrTixNQUFNNUwsRUFBRXdCLEtBQUs5QyxJQUFJVCxFQUFFd0UsUUFBUSw0QkFBNEIsQ0FBQyxJQUFJbkUsRUFBRSxJQUFJNG9DLEdBQUcvbkMsRUFBRXlNLE1BQU0zTCxFQUFFMkwsTUFBTWxNLEVBQUVrTSxNQUFNbkwsRUFBRXZDLEVBQUVhLEdBQUcsT0FBT3NCLEtBQUt1NEMsY0FBY3Q2QyxFQUFFMEIsR0FBRyxJQUFJa0UsRUFBRSxJQUFJK2lDLEdBQUc5bkMsRUFBRXlNLE1BQU0zTCxFQUFFMkwsTUFBTWxNLEVBQUVrTSxNQUFNbkwsRUFBRXZDLEVBQUVhLEdBQUcsT0FBT3NCLEtBQUt1NEMsY0FBYzEwQyxFQUFFbEUsSUFBSWIsRUFBRVUsVUFBVSs5Qiw2QkFBNkIsU0FBU3orQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLElBQUk4QixFQUFFdkMsRUFBRXdFLFFBQVEsNEJBQTRCLElBQUltd0MsR0FBR3p6QyxFQUFFeU0sTUFBTTNMLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsSUFBSSt6QyxHQUFHdHpDLEVBQUV5TSxNQUFNM0wsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxPQUFPMkIsS0FBS3U0QyxjQUFjcDRDLEVBQUUsQ0FBQ3JCLEtBQUtBLEVBQUVVLFVBQVVnK0IsUUFBUSxTQUFTMStCLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsR0FBRyxJQUFJK0IsRUFBRSxJQUFJMHlDLEdBQUd6eUMsRUFBRTJMLE1BQU03TSxFQUFFTCxFQUFFOEIsRUFBRXZDLEdBQUcsT0FBT29DLEtBQUt1NEMsY0FBYzU0QyxFQUFFLENBQUNDLEVBQUVQLEVBQUVQLEtBQUtBLEVBQUVVLFVBQVVnUSxLQUFLLFNBQVMxUSxFQUFFYyxHQUFHLEdBQUcsV0FBV2QsRUFBRW1NLE1BQU0sQ0FBQyxJQUFJNUwsRUFBRVcsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUTlILEtBQUksU0FBU3BHLEdBQUcsT0FBTzRJLEdBQUU1SSxNQUFLLE9BQU93a0MsR0FBR2xPLEdBQUd0MkIsRUFBRXlNLE1BQU16TSxFQUFFbU0sTUFBTTVMLEdBQUdPLEdBQUcsSUFBSWxCLEVBQUUsSUFBSTAyQyxHQUFHdDJDLEVBQUV5TSxNQUFNM0wsR0FBRyxPQUFPSSxLQUFLdTRDLGNBQWM3NUMsRUFBRSxDQUFDSSxLQUFLQSxFQUFFVSxVQUFVd1EsSUFBSSxTQUFTbFIsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFZCxFQUFFd0UsUUFBUSwrQkFBK0IsSUFBSTR3QyxHQUFHbDBDLEVBQUV5TSxNQUFNM0wsRUFBRVAsR0FBRyxJQUFJMHpDLEdBQUdqMEMsRUFBRXlNLE1BQU0zTCxFQUFFUCxHQUFHLE9BQU9XLEtBQUt1NEMsY0FBYzc1QyxFQUFFLENBQUNJLEtBQUtBLEVBQUVVLFVBQVVzUyxVQUFVLFNBQVNoVCxFQUFFYyxHQUFHLEdBQUdJLEtBQUt5NUMsbUJBQW1CLENBQUMzNkMsSUFBSSxPQUFPa0IsS0FBS3c1QyxXQUFXMW5DLFVBQVVoVCxFQUFFYyxHQUFHLElBQUlQLEVBQUV6QixFQUFFd0UsUUFBUSwrQkFBK0IsSUFBSWt6QyxHQUFHeDJDLEVBQUV5TSxNQUFNM0wsR0FBRyxJQUFJeTFDLEdBQUd2MkMsRUFBRXlNLE1BQU0zTCxHQUFHLE9BQU9JLEtBQUt1NEMsY0FBY2w1QyxFQUFFLENBQUNQLEtBQUtBLEVBQUVVLFVBQVVpUSxPQUFPLFNBQVMzUSxFQUFFYyxFQUFFUCxHQUFHLEdBQUdXLEtBQUt5NUMsbUJBQW1CLENBQUMzNkMsRUFBRWMsSUFBSSxPQUFPSSxLQUFLdzVDLFdBQVcvcEMsT0FBTzNRLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRSxJQUFJd3JDLEdBQUdwckMsRUFBRXlNLE1BQU0zTCxFQUFFMEwsS0FBS2pNLEdBQUcsT0FBT1csS0FBS3U0QyxjQUFjNzVDLEVBQUUsQ0FBQ0ksRUFBRWMsS0FBS2QsRUFBRVUsVUFBVTJXLGVBQWUsU0FBU3JYLEVBQUVjLEVBQUVQLEdBQUd5RSxFQUFFaEYsRUFBRXVNLE1BQU0sR0FBRSxXQUFXLE1BQU0sMEVBQXlFLElBQUkzTSxFQUFFa0IsRUFBRW9ILFFBQU8sU0FBU2xJLEVBQUVjLEdBQUcsT0FBT2QsRUFBRWMsS0FBSXZCLEVBQUV5NkIsR0FBR2g2QixFQUFFeU0sTUFBTTNMLEVBQUVsQixHQUFHeUIsRUFBRTQ0QixHQUFHMTZCLEVBQUU2QyxPQUFPdEIsRUFBRXNCLFFBQVF0RCxFQUFFbzdCLEdBQUdsNkIsRUFBRXlNLE1BQU0zTCxFQUFFbEIsR0FBR2lCLEVBQUVzNUIsR0FBRzU1QixFQUFFTyxFQUFFc0IsUUFBUWQsRUFBRTg0QixHQUFHdDdCLEVBQUV5QixFQUFFTyxFQUFFc0IsUUFBUSxPQUFPcEMsRUFBRTJPLFFBQVFwUCxHQUFHeVQsVUFBVTNSLEdBQUdzTixRQUFRN1AsR0FBR29ILE1BQU1yRixFQUFFUyxJQUFJdEIsRUFBRVUsVUFBVTRXLGVBQWUsU0FBU3RYLEVBQUVjLEVBQUVQLEdBQUd5RSxFQUFFaEYsRUFBRXVNLE1BQU0sR0FBRSxXQUFXLE1BQU0sMEVBQXlFLElBQUkzTSxFQUFFa0IsRUFBRW9ILFFBQU8sU0FBU2xJLEVBQUVjLEdBQUcsT0FBT2QsRUFBRWMsS0FBSXZCLEVBQUUsQ0FBQyxDQUFDLEVBQUUsSUFBSUEsRUFBRThDLEtBQUtWLE1BQU1wQyxFQUFFZ0IsR0FBRyxJQUFJLElBQUljLEVBQUUsRUFBRVAsRUFBRXNCLE9BQU9mLEVBQUVyQixFQUFFeU0sTUFBTXJLLFNBQVNmLEVBQUU5QixFQUFFOEMsS0FBSyxDQUFDLEVBQUUsSUFBSSxJQUFJdkQsRUFBRWtCLEVBQUVrUixJQUFJM1IsR0FBR3NCLEVBQUVtNUIsR0FBR2w3QixFQUFFMk4sTUFBTTNMLEVBQUVsQixHQUFFLEdBQUkwQixFQUFFMjRCLEdBQUdwNUIsRUFBRXVCLE9BQU90QixFQUFFc0IsUUFBTyxHQUFJckQsRUFBRW03QixHQUFHcDdCLEVBQUUyTixNQUFNM0wsRUFBRWxCLEdBQUUsR0FBSSxPQUFPZCxFQUFFNlAsUUFBUTlOLEdBQUdtUyxVQUFVMVIsR0FBR3FOLFFBQVE1UCxJQUFJaUIsRUFBRVUsVUFBVXdILE9BQU8sU0FBU2xJLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRUksRUFBRXlNLE1BQU0sR0FBR2xOLEVBQUVTLEVBQUV5TSxNQUFNLEdBQUdwTCxFQUFFazVCLEdBQUdoN0IsR0FBR1QsRUFBRSxJQUFJdTFDLEdBQUcsQ0FBQ25QLFdBQVc3akMsRUFBRThqQyxPQUFPNWxDLEVBQUU2Z0MsVUFBVXhnQyxHQUFHa0IsR0FBR0QsRUFBRS9CLEVBQUU0ZixZQUFZcGQsRUFBRVQsRUFBRSxHQUFHOUIsRUFBRThCLEVBQUUsR0FBRzFCLEVBQUUrQixLQUFLMjVDLGdCQUFnQixDQUFDdjVDLEVBQUV2QyxHQUFHd0IsR0FBRyxPQUFPVyxLQUFLdTRDLGNBQWMzNkMsRUFBRSxDQUFDa0IsR0FBR2IsR0FBRyxJQUFJQSxFQUFFc04sTUFBTSxHQUFHdE4sRUFBRStCLEtBQUtnSCxPQUFPL0ksRUFBRTJCLEVBQUVQLElBQUlQLEVBQUVVLFVBQVV3NkMsVUFBVSxTQUFTbDdDLEVBQUVjLEVBQUVQLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxNQUFNLElBQUlYLEVBQUVJLEVBQUV5TSxNQUFNLEdBQUdsTixFQUFFUyxFQUFFeU0sTUFBTSxHQUFHLE1BQU1sTSxJQUFJWCxFQUFFVyxFQUFFa00sTUFBTSxHQUFHbE4sRUFBRWdCLEVBQUVrTSxNQUFNLElBQUksSUFBSXBMLEVBQUVrNUIsR0FBR2g3QixHQUFHVCxFQUFFLElBQUltbUMsR0FBRyxDQUFDQyxXQUFXN2pDLEVBQUU4akMsT0FBTzVsQyxFQUFFNmdDLFVBQVV4Z0MsR0FBR2tCLEVBQUUsTUFBTVAsR0FBR00sRUFBRS9CLEVBQUU0ZixZQUFZcGQsRUFBRVQsRUFBRSxHQUFHOUIsRUFBRThCLEVBQUUsR0FBRzFCLEVBQUUrQixLQUFLMjVDLGdCQUFnQixDQUFDdjVDLEVBQUV2QyxHQUFHLFNBQVNnRyxFQUFFLENBQUMvRSxHQUFHLE9BQU8sTUFBTU8sR0FBR3dFLEVBQUUxQyxLQUFLOUIsR0FBR1csS0FBS3U0QyxjQUFjMzZDLEVBQUVpRyxFQUFFNUYsR0FBRyxJQUFJQSxFQUFFc04sTUFBTSxHQUFHdE4sRUFBRStCLEtBQUtnNkMsVUFBVWw3QyxFQUFFYyxFQUFFM0IsSUFBSWEsRUFBRVUsVUFBVXk2QyxnQkFBZ0IsU0FBU243QyxFQUFFYyxFQUFFUCxRQUFHLElBQVNBLElBQUlBLEVBQUUsTUFBTSxJQUFJWCxFQUFFLE1BQU1XLEVBQUVBLEVBQUVrTSxNQUFNek0sRUFBRXlNLE1BQU1sTixFQUFFZzdCLEdBQUczNkIsRUFBRUEsRUFBRXdDLE9BQU8sSUFBSWYsRUFBRSxJQUFJc21DLEdBQUcvbkMsRUFBRUwsRUFBRXVCLEVBQUUsTUFBTVAsR0FBR3pCLEVBQUVvQyxLQUFLczRDLGlCQUFpQm40QyxFQUFFcWQsWUFBWSxTQUFTN2QsRUFBRSxNQUFNTixFQUFFLENBQUNQLEdBQUcsQ0FBQ0EsRUFBRU8sR0FBRyxPQUFPVyxLQUFLdTRDLGNBQWNwNEMsRUFBRVIsRUFBRS9CLEdBQUdBLEVBQUV5TixPQUFPdk0sRUFBRXVNLEtBQUtyTCxLQUFLaTZDLGdCQUFnQm43QyxFQUFFYyxFQUFFaEMsR0FBR0EsR0FBR2tCLEVBQUVVLFVBQVV3SSxJQUFJLFNBQVNsSixFQUFFYyxHQUFHK3VCLEdBQUcsTUFBTS91QixFQUFFZCxFQUFFdU0sTUFBTSxJQUFJaE0sRUFBRW92QixHQUFHM3ZCLEVBQUV5TSxNQUFNM0wsR0FBR2xCLEVBQUVXLEVBQUUsR0FBR2hCLEVBQUU4RixFQUFFOUUsRUFBRSxJQUFJYyxFQUFFckIsRUFBRTRPLE1BQU0sRUFBRXJQLEdBQUdULEVBQUUwYSxHQUFHeFosRUFBRW1NLE9BQU8sT0FBT2pMLEtBQUtnSCxPQUFPN0csRUFBRSxNQUFNdkMsR0FBRzZQLFFBQVEvTyxJQUFJSSxFQUFFVSxVQUFVOFEsS0FBSyxTQUFTeFIsRUFBRWMsR0FBRyxHQUFHSSxLQUFLeTVDLG1CQUFtQixDQUFDMzZDLElBQUksT0FBT2tCLEtBQUt3NUMsV0FBV2xwQyxLQUFLeFIsRUFBRWMsR0FBRyxJQUFJUCxFQUFFb3ZCLEdBQUczdkIsRUFBRXlNLE1BQU0zTCxHQUFHbEIsRUFBRVcsRUFBRSxHQUFHaEIsRUFBRThGLEVBQUU5RSxFQUFFLElBQUljLEVBQUVyQixFQUFFNE8sTUFBTSxFQUFFclAsR0FBR1QsRUFBRTBhLEdBQUd4WixFQUFFbU0sT0FBTyxPQUFPakwsS0FBS2dILE9BQU83RyxFQUFFLE9BQU92QyxHQUFHNlAsUUFBUS9PLElBQUlJLEVBQUVVLFVBQVUwVyxtQkFBbUIsU0FBU3BYLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRSxFQUFFTCxFQUFFdXdCLEdBQUcsQ0FBQ2x3QixHQUFHSSxFQUFFdU0sTUFBTWxMLEVBQUVyQixFQUFFLE1BQU1ULElBQUk4QixFQUFFckIsRUFBRWdULFVBQVV6VCxHQUFHSyxFQUFFb3dCLEdBQUcsRUFBRWh3QixFQUFFdU0sTUFBTSxJQUFJLElBQUl6TixFQUFFLFNBQVNrQixFQUFFYyxFQUFFUCxHQUFHLElBQUksSUFBSVgsRUFBRSxHQUFHTCxFQUFFUyxFQUFFb0MsT0FBT2YsRUFBRSxFQUFFQSxFQUFFOUIsRUFBRThCLElBQUlBLElBQUlQLEVBQUVsQixFQUFFeUMsS0FBS3JDLEVBQUVxQixJQUFJekIsRUFBRXlDLEtBQUs5QixHQUFHLE9BQU9YLEVBQXhGLENBQTJGeUIsRUFBRW9MLE1BQU03TSxFQUFFVyxHQUFHTSxFQUFFd0UsRUFBRSxDQUFDaEUsRUFBRW9MLE1BQU03TSxLQUFLMEIsRUFBRUQsRUFBRXVOLE1BQU0sRUFBRS9OLEdBQUc5QixFQUFFeWEsR0FBR3haLEVBQUVtTSxPQUFPaE4sRUFBRStCLEtBQUtrNkMsYUFBYTk1QyxFQUFFLHFCQUFxQlIsRUFBRS9CLEVBQUV3QixHQUFHb08sUUFBUTdQLEdBQUcsT0FBTyxNQUFNUyxJQUFJSixFQUFFQSxFQUFFNlQsVUFBVStjLEdBQUd4d0IsS0FBS0osR0FBR2EsRUFBRVUsVUFBVTA2QyxhQUFhLFNBQVNwN0MsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxJQUFJOEIsRUFBRXJCLEVBQUV5TSxNQUFNLEdBQUczTixFQUFFa0IsRUFBRXlNLE1BQU0sR0FBRzVMLEVBQUUsU0FBU2IsRUFBRWMsR0FBRyxJQUFJUCxFQUFFWCxHQUFFLEVBQUcsSUFBSUksR0FBR3M2QixJQUFJLzVCLEVBQUVQLEVBQUVKLEdBQUUsR0FBSVcsRUFBRXNILEVBQUU3SCxFQUFFMkUsS0FBSzhJLE1BQU05SSxLQUFLaUIsS0FBSzVGLE1BQU1KLEdBQUdXLEVBQUVPLEdBQUdQLElBQUlQLEVBQUVKLEdBQUUsRUFBR1csRUFBRXNILEVBQUU3SCxFQUFFTyxFQUFFLEdBQUcsT0FBT0EsRUFBcEgsQ0FBdUh6QixFQUFFUyxHQUFHK0IsRUFBRSxJQUFJeXpDLEdBQUcsQ0FBQzdQLFdBQVdya0MsRUFBRXNrQyxPQUFPcm1DLEVBQUVzaEMsVUFBVS8rQixFQUFFMnpDLFlBQVl6MUMsR0FBR3VCLEdBQUcvQixFQUFFdUMsRUFBRW9kLFlBQVl2ZixFQUFFSixFQUFFLEdBQUdnRyxFQUFFaEcsRUFBRSxHQUFHNkIsRUFBRU0sS0FBSzI1QyxnQkFBZ0IsQ0FBQzE3QyxFQUFFNEYsR0FBR25GLEdBQUcsT0FBT3NCLEtBQUt1NEMsY0FBY240QyxFQUFFLENBQUN0QixFQUFFTyxHQUFHSyxHQUFHQSxFQUFFNkwsTUFBTSxLQUFLbE4sRUFBRXFCLEdBQUdMLEVBQUUyeEIsR0FBRyxFQUFFM3lCLEdBQUdtUixLQUFLLENBQUM1UixFQUFFK0IsSUFBSUssS0FBS2s2QyxhQUFheDZDLEVBQUVFLEVBQUVQLEVBQUVYLEVBQUVMLEtBQUtTLEVBQUVVLFVBQVUyNkMsZ0JBQWdCLFNBQVNyN0MsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFLENBQUNrQixHQUFHLEdBQUcrdUIsR0FBRyxNQUFNdHZCLEVBQUVrbUMsT0FBTyxHQUFHQyxjQUFjbm1DLEVBQUUyRixNQUFNLEdBQUd0RyxFQUFFSSxFQUFFdU0sT0FBT3pOLEVBQUV3RSxRQUFRLHNCQUFzQnRELEVBQUV1TSxNQUFNLEVBQUUsQ0FBQyxJQUFJaE4sRUFBRW93QixHQUFHM3ZCLEVBQUV5TSxNQUFNN00sR0FBR3lCLEVBQUU5QixFQUFFLEdBQUdzQixFQUFFd0UsRUFBRTlGLEVBQUUsSUFBSStCLEVBQUV0QixFQUFFNE8sTUFBTSxFQUFFL04sR0FBRyxPQUFPSyxLQUFLZzZDLFVBQVU1NUMsRUFBRWYsR0FBR29PLFFBQVF0TixHQUFHLE9BQU9ILEtBQUtpNkMsZ0JBQWdCbjdDLEVBQUVPLElBQUlQLEVBQUVVLFVBQVVnUixPQUFPLFNBQVMxUixFQUFFYyxHQUFHLE9BQU9JLEtBQUttNkMsZ0JBQWdCcjdDLEVBQUVjLEVBQUUsUUFBUWQsRUFBRVUsVUFBVWlSLE9BQU8sU0FBUzNSLEVBQUVjLEdBQUcsT0FBT0ksS0FBS202QyxnQkFBZ0JyN0MsRUFBRWMsRUFBRSxRQUFRZCxFQUFFVSxVQUFVeVAsT0FBTyxTQUFTblEsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxHQUFHa0IsSUFBSWQsRUFBRXVNLEtBQUssRUFBRSxNQUFNLElBQUk5SSxNQUFNLG1EQUFtRHpELEVBQUV1TSxLQUFLLEdBQUcsaUJBQWlCekwsR0FBRyxJQUFJdkIsRUFBRSxJQUFJd3FDLEdBQUcvcEMsRUFBRXlNLE1BQU1sTSxFQUFFWCxHQUFHLE9BQU9zQixLQUFLdTRDLGNBQWNsNkMsRUFBRSxDQUFDUyxLQUFLQSxFQUFFVSxVQUFVMlMsTUFBTSxTQUFTclQsRUFBRWMsR0FBRyxHQUFHaEMsRUFBRXdFLFFBQVEsZ0NBQWdDLE9BQU9wQyxLQUFLKzVDLGVBQWVqN0MsRUFBRWMsRUFBRSxrQ0FBa0MsUUFBUSxJQUFJUCxFQUFFLElBQUk4bkMsR0FBRyx3QkFBd0Jyb0MsRUFBRXlNLE1BQU0zTCxFQUFFMkwsT0FBTzdNLEVBQUVzQixLQUFLMjVDLGdCQUFnQnQ2QyxFQUFFbWUsWUFBWSxRQUFRLE9BQU94ZCxLQUFLdTRDLGNBQWNsNUMsRUFBRSxDQUFDUCxFQUFFYyxHQUFHbEIsSUFBSUksRUFBRVUsVUFBVXVTLFNBQVMsU0FBU2pULEVBQUVjLEdBQUcsR0FBR2hDLEVBQUV3RSxRQUFRLGdDQUFnQyxPQUFPcEMsS0FBSys1QyxlQUFlajdDLEVBQUVjLEVBQUUscUNBQXFDLFFBQVEsSUFBSVAsRUFBRSxJQUFJOG5DLEdBQUcsd0JBQXdCcm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU83TSxFQUFFc0IsS0FBSzI1QyxnQkFBZ0J0NkMsRUFBRW1lLFlBQVksUUFBUSxPQUFPeGQsS0FBS3U0QyxjQUFjbDVDLEVBQUUsQ0FBQ1AsRUFBRWMsR0FBR2xCLElBQUlJLEVBQUVVLFVBQVV5UyxLQUFLLFNBQVNuVCxFQUFFYyxHQUFHLEdBQUdJLEtBQUt5NUMsbUJBQW1CLENBQUMzNkMsRUFBRWMsSUFBSSxPQUFPSSxLQUFLdzVDLFdBQVd2bkMsS0FBS25ULEVBQUVjLEdBQUcsR0FBR2hDLEVBQUV3RSxRQUFRLGdDQUFnQyxPQUFPcEMsS0FBSys1QyxlQUFlajdDLEVBQUVjLEVBQUUscUNBQXFDLFFBQVEsSUFBSVAsRUFBRSxJQUFJOG5DLEdBQUcsdUJBQXVCcm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU83TSxFQUFFc0IsS0FBSzI1QyxnQkFBZ0J0NkMsRUFBRW1lLFlBQVksUUFBUSxPQUFPeGQsS0FBS3U0QyxjQUFjbDVDLEVBQUUsQ0FBQ1AsRUFBRWMsR0FBR2xCLElBQUlJLEVBQUVVLFVBQVU2UyxVQUFVLFNBQVN2VCxFQUFFYyxHQUFHLEdBQUdoQyxFQUFFd0UsUUFBUSxnQ0FBZ0MsT0FBT3BDLEtBQUsrNUMsZUFBZWo3QyxFQUFFYyxFQUFFLDBDQUEwQyxRQUFRLElBQUlQLEVBQUUsSUFBSThuQyxHQUFHLHdCQUF3QnJvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPN00sRUFBRXNCLEtBQUsyNUMsZ0JBQWdCdDZDLEVBQUVtZSxZQUFZLFFBQVEsT0FBT3hkLEtBQUt1NEMsY0FBY2w1QyxFQUFFLENBQUNQLEVBQUVjLEdBQUdsQixJQUFJSSxFQUFFVSxVQUFVK1MsUUFBUSxTQUFTelQsRUFBRWMsR0FBRyxHQUFHSSxLQUFLeTVDLG1CQUFtQixDQUFDMzZDLEVBQUVjLElBQUksT0FBT0ksS0FBS3c1QyxXQUFXam5DLFFBQVF6VCxFQUFFYyxHQUFHLEdBQUdoQyxFQUFFd0UsUUFBUSxnQ0FBZ0MsT0FBT3BDLEtBQUsrNUMsZUFBZWo3QyxFQUFFYyxFQUFFLHdDQUF3QyxRQUFRLElBQUlQLEVBQUUsSUFBSThuQyxHQUFHLHVCQUF1QnJvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPN00sRUFBRXNCLEtBQUsyNUMsZ0JBQWdCdDZDLEVBQUVtZSxZQUFZLFFBQVEsT0FBT3hkLEtBQUt1NEMsY0FBY2w1QyxFQUFFLENBQUNQLEVBQUVjLEdBQUdsQixJQUFJSSxFQUFFVSxVQUFVaVQsYUFBYSxTQUFTM1QsRUFBRWMsR0FBRyxHQUFHaEMsRUFBRXdFLFFBQVEsZ0NBQWdDLE9BQU9wQyxLQUFLKzVDLGVBQWVqN0MsRUFBRWMsRUFBRSw2Q0FBNkMsUUFBUSxJQUFJUCxFQUFFLElBQUk4bkMsR0FBRyx3QkFBd0Jyb0MsRUFBRXlNLE1BQU0zTCxFQUFFMkwsT0FBTzdNLEVBQUVzQixLQUFLMjVDLGdCQUFnQnQ2QyxFQUFFbWUsWUFBWSxRQUFRLE9BQU94ZCxLQUFLdTRDLGNBQWNsNUMsRUFBRSxDQUFDUCxFQUFFYyxHQUFHbEIsSUFBSUksRUFBRVUsVUFBVXFULFdBQVcsU0FBUy9ULEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0sOEJBQThCLE9BQU92TCxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVbVQsV0FBVyxTQUFTN1QsRUFBRWMsR0FBRyxHQUFHaEMsRUFBRXdFLFFBQVEsZ0NBQWdDLE9BQU9wQyxLQUFLKzVDLGVBQWVqN0MsRUFBRWMsRUFBRSw2R0FBNkcsUUFBUSxJQUFJUCxFQUFFLElBQUk4bkMsR0FBRyxzQ0FBc0Nyb0MsRUFBRXlNLE1BQU0zTCxFQUFFMkwsT0FBTzdNLEVBQUVzQixLQUFLMjVDLGdCQUFnQnQ2QyxFQUFFbWUsWUFBWSxRQUFRLE9BQU94ZCxLQUFLdTRDLGNBQWNsNUMsRUFBRSxDQUFDUCxFQUFFYyxHQUFHbEIsSUFBSUksRUFBRVUsVUFBVW9ULFVBQVUsU0FBUzlULEVBQUVjLEdBQUcsR0FBR2hDLEVBQUV3RSxRQUFRLGdDQUFnQyxPQUFPcEMsS0FBSys1QyxlQUFlajdDLEVBQUVjLEVBQUUsNEhBQTRILFFBQVEsSUFBSVAsRUFBRSxJQUFJOG5DLEdBQUcsc0NBQXNDcm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU83TSxFQUFFc0IsS0FBSzI1QyxnQkFBZ0J0NkMsRUFBRW1lLFlBQVksUUFBUSxPQUFPeGQsS0FBS3U0QyxjQUFjbDVDLEVBQUUsQ0FBQ1AsRUFBRWMsR0FBR2xCLElBQUlJLEVBQUVVLFVBQVV3OEIsT0FBTyxTQUFTbDlCLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRSxJQUFJcTFDLEdBQUdqMUMsRUFBRXVNLEtBQUt6TCxFQUFFMkwsTUFBTTNMLEVBQUV5TCxNQUFNaE4sRUFBRTJCLEtBQUsyNUMsZ0JBQWdCajdDLEVBQUU4ZSxZQUFZbkYsR0FBR3pZLEVBQUVxTCxNQUFNNUwsRUFBRTRMLFFBQVEsT0FBT2pMLEtBQUt1NEMsY0FBYzc1QyxFQUFFLENBQUNJLEVBQUVjLEVBQUVQLEdBQUdoQixJQUFJUyxFQUFFVSxVQUFVdVQsTUFBTSxTQUFTalUsR0FBR212QixHQUFHLHlFQUF5RSxJQUFJcnVCLEVBQUVkLEVBQUVvUCxXQUFXLE9BQU91MUIsR0FBRzNrQyxFQUFFeU0sTUFBTTNMLElBQUlkLEVBQUVVLFVBQVU2VyxLQUFLLFNBQVN2WCxFQUFFYyxFQUFFUCxHQUFHLE9BQU9ra0MsR0FBR3prQyxFQUFFb1AsV0FBV3BQLEVBQUV5TSxNQUFNek0sRUFBRW1NLE1BQU1yTCxJQUFJZCxFQUFFVSxVQUFVb0UsSUFBSSxTQUFTOUUsRUFBRWMsR0FBRyt1QixHQUFHLE1BQU0vdUIsRUFBRWQsRUFBRXVNLE1BQU0sSUFBSWhNLEVBQUVvdkIsR0FBRzN2QixFQUFFeU0sTUFBTTNMLEdBQUdsQixFQUFFVyxFQUFFLEdBQUdoQixFQUFFOEYsRUFBRTlFLEVBQUUsSUFBSWMsRUFBRXJCLEVBQUU0TyxNQUFNLEVBQUVyUCxHQUFHLE9BQU8yQixLQUFLZ0gsT0FBTzdHLEVBQUUsTUFBTUEsRUFBRThLLE9BQU93QyxRQUFRL08sSUFBSUksRUFBRVUsVUFBVThSLFFBQVEsU0FBU3hTLEVBQUVjLEdBQUcsR0FBR0ksS0FBS3k1QyxtQkFBbUIsQ0FBQzM2QyxFQUFFYyxJQUFJLE9BQU9JLEtBQUt3NUMsV0FBV2xvQyxRQUFReFMsRUFBRWMsR0FBRyxJQUFJUCxFQUFFekIsRUFBRXdFLFFBQVEsZ0NBQWdDLElBQUlpbEMsR0FBRyxvVEFBb1R2b0MsRUFBRXlNLE1BQU0zTCxFQUFFMkwsT0FBTyxJQUFJNDdCLEdBQUcsa0ZBQWtGcm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU8sT0FBT3ZMLEtBQUt1NEMsY0FBY2w1QyxFQUFFLENBQUNQLEVBQUVjLEtBQUtkLEVBQUVVLFVBQVVrUyxJQUFJLFNBQVM1UyxFQUFFYyxHQUFHLElBQUlQLEVBQUV6QixFQUFFd0UsUUFBUSxnQ0FBZ0MsSUFBSWlsQyxHQUFHLHdSQUF3UnZvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPLElBQUk0N0IsR0FBRyxpREFBaURyb0MsRUFBRXlNLE1BQU0zTCxFQUFFMkwsT0FBTyxPQUFPdkwsS0FBS3U0QyxjQUFjbDVDLEVBQUUsQ0FBQ1AsRUFBRWMsS0FBS2QsRUFBRVUsVUFBVW1FLElBQUksU0FBUzdFLEVBQUVjLEdBQUcsR0FBR0ksS0FBS3k1QyxtQkFBbUIsQ0FBQzM2QyxJQUFJLE9BQU9rQixLQUFLdzVDLFdBQVc3MUMsSUFBSTdFLEVBQUVjLEdBQUcrdUIsR0FBRyxNQUFNL3VCLEVBQUVkLEVBQUV1TSxNQUFNLElBQUloTSxFQUFFb3ZCLEdBQUczdkIsRUFBRXlNLE1BQU0zTCxHQUFHbEIsRUFBRVcsRUFBRSxHQUFHaEIsRUFBRThGLEVBQUU5RSxFQUFFLElBQUljLEVBQUVyQixFQUFFNE8sTUFBTSxFQUFFclAsR0FBRyxPQUFPMkIsS0FBS2dILE9BQU83RyxFQUFFLE1BQU1BLEVBQUU4SyxPQUFPd0MsUUFBUS9PLElBQUlJLEVBQUVVLFVBQVVnUyxRQUFRLFNBQVMxUyxFQUFFYyxHQUFHLEdBQUdJLEtBQUt5NUMsbUJBQW1CLENBQUMzNkMsRUFBRWMsSUFBSSxPQUFPSSxLQUFLdzVDLFdBQVdob0MsUUFBUTFTLEVBQUVjLEdBQUcsSUFBSVAsRUFBRXpCLEVBQUV3RSxRQUFRLGdDQUFnQyxJQUFJaWxDLEdBQUcsb1RBQW9Udm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU8sSUFBSTQ3QixHQUFHLGtGQUFrRnJvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPLE9BQU92TCxLQUFLdTRDLGNBQWNsNUMsRUFBRSxDQUFDUCxFQUFFYyxLQUFLZCxFQUFFVSxVQUFVMlEsSUFBSSxTQUFTclIsRUFBRWMsR0FBRyt1QixHQUFHLE1BQU0vdUIsRUFBRWQsRUFBRXVNLE1BQU0sSUFBSWhNLEVBQUVvdkIsR0FBRzN2QixFQUFFeU0sTUFBTTNMLEdBQUdsQixFQUFFVyxFQUFFLEdBQUdoQixFQUFFOEYsRUFBRTlFLEVBQUUsSUFBSWMsRUFBRXJCLEVBQUU0TyxNQUFNLEVBQUVyUCxHQUFHLE9BQU8yQixLQUFLZ0gsT0FBTzdHLEVBQUUsTUFBTUEsRUFBRThLLE9BQU93QyxRQUFRL08sSUFBSUksRUFBRVUsVUFBVTRRLElBQUksU0FBU3RSLEVBQUVjLEdBQUcrdUIsR0FBRyxNQUFNL3VCLEVBQUVkLEVBQUV1TSxNQUFNLElBQUloTSxFQUFFb3ZCLEdBQUczdkIsRUFBRXlNLE1BQU0zTCxHQUFHbEIsRUFBRVcsRUFBRSxHQUFHaEIsRUFBRThGLEVBQUU5RSxFQUFFLElBQUljLEVBQUVyQixFQUFFNE8sTUFBTSxFQUFFclAsR0FBRyxPQUFPMkIsS0FBS2dILE9BQU83RyxFQUFFLE1BQU1BLEVBQUU4SyxPQUFPd0MsUUFBUS9PLElBQUlJLEVBQUVVLFVBQVVvUyxrQkFBa0IsU0FBUzlTLEVBQUVjLEdBQUcsSUFBSVAsRUFBRXpCLEVBQUV3RSxRQUFRLGdDQUFnQyxJQUFJaWxDLEdBQUcsNEJBQTRCdm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU8sSUFBSTQ3QixHQUFHLDRCQUE0QnJvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPLE9BQU92TCxLQUFLdTRDLGNBQWNsNUMsRUFBRSxDQUFDUCxFQUFFYyxLQUFLZCxFQUFFVSxVQUFVdThCLFdBQVcsU0FBU2o5QixFQUFFYyxHQUFHLEdBQUdoQyxFQUFFd0UsUUFBUSxnQ0FBaUMsT0FBT3BDLEtBQUsrNUMsZUFBZWo3QyxFQUFFYyxFQUFFLHVmQUF1ZixXQUFVLEdBQUksSUFBSVAsRUFBRSxJQUFJOG5DLEdBQUcsdUZBQXVGcm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU83TSxFQUFFc0IsS0FBSzI1QyxnQkFBZ0J0NkMsRUFBRW1lLFlBQVksV0FBVyxPQUFPeGQsS0FBS3U0QyxjQUFjbDVDLEVBQUUsQ0FBQ1AsRUFBRWMsR0FBR2xCLElBQUlJLEVBQUVVLFVBQVU0UixTQUFTLFNBQVN0UyxFQUFFYyxHQUFHLEdBQUdoQyxFQUFFd0UsUUFBUSxnQ0FBZ0MsT0FBT3BDLEtBQUsrNUMsZUFBZWo3QyxFQUFFYyxFQUFFLHNnQkFBc2dCLFNBQVMsSUFBSVAsRUFBRSxJQUFJOG5DLEdBQUcsdVBBQXVQcm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU83TSxFQUFFc0IsS0FBSzI1QyxnQkFBZ0J0NkMsRUFBRW1lLFlBQVksU0FBUyxPQUFPeGQsS0FBS3U0QyxjQUFjbDVDLEVBQUUsQ0FBQ1AsRUFBRWMsR0FBR2xCLElBQUlJLEVBQUVVLFVBQVVrUixJQUFJLFNBQVM1UixFQUFFYyxHQUFHLEdBQUcsY0FBY2QsRUFBRW1NLE9BQU8sY0FBY3JMLEVBQUVxTCxNQUFNLE9BQU9qTCxLQUFLbzZDLHlCQUF5QnQ3QyxFQUFFYyxFQUFFbW5DLElBQUksR0FBRy9tQyxLQUFLeTVDLG1CQUFtQixDQUFDMzZDLEVBQUVjLElBQUksT0FBT0ksS0FBS3c1QyxXQUFXOW9DLElBQUk1UixFQUFFYyxHQUFHLElBQUlQLEVBQUVnWixHQUFHdlosRUFBRW1NLE1BQU1yTCxFQUFFcUwsT0FBTyxHQUFHck4sRUFBRXdFLFFBQVEsZ0NBQWdDLE9BQU9wQyxLQUFLKzVDLGVBQWVqN0MsRUFBRWMsRUFBRW1uQyxHQUFHMW5DLEdBQUcsSUFBSVgsRUFBRSxJQUFJeW9DLEdBQUdKLEdBQUdqb0MsRUFBRXlNLE1BQU0zTCxFQUFFMkwsT0FBT2xOLEVBQUUyQixLQUFLMjVDLGdCQUFnQmo3QyxFQUFFOGUsWUFBWW5lLEdBQUcsT0FBT1csS0FBS3U0QyxjQUFjNzVDLEVBQUUsQ0FBQ0ksRUFBRWMsR0FBR3ZCLElBQUlTLEVBQUVVLFVBQVVxNkMsY0FBYyxTQUFTLzZDLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRSxJQUFJODNDLEdBQUcxM0MsRUFBRXlNLE1BQU0zTCxHQUFHdkIsRUFBRTJCLEtBQUtzNEMsaUJBQWlCNTVDLEVBQUU4ZSxZQUFZbmUsR0FBRyxPQUFPVyxLQUFLdTRDLGNBQWM3NUMsRUFBRSxDQUFDSSxHQUFHVCxJQUFJUyxFQUFFVSxVQUFVdTZDLGVBQWUsU0FBU2o3QyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxRQUFHLElBQVNBLElBQUlBLEdBQUUsR0FBSSxJQUFJOEIsRUFBRSxJQUFJa25DLEdBQUdob0MsRUFBRVAsRUFBRXlNLE1BQU0zTCxFQUFFMkwsTUFBTWxOLEdBQUdULEVBQUVvQyxLQUFLczRDLGlCQUFpQm40QyxFQUFFcWQsWUFBWTllLEdBQUcsT0FBT3NCLEtBQUt1NEMsY0FBY3A0QyxFQUFFLENBQUNyQixFQUFFYyxHQUFHaEMsSUFBSWtCLEVBQUVVLFVBQVU0NkMseUJBQXlCLFNBQVN0N0MsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFc0IsS0FBSzNCLEVBQUUyQixLQUFLa3lDLFFBQVF6ekMsSUFBSUssRUFBRWtPLFFBQVE3TSxFQUFFSCxLQUFLa3lDLFFBQVF6ekMsSUFBSW1CLEVBQUVvTixRQUFRcFAsRUFBRSxDQUFDLENBQUNTLEVBQUVvNkMsZUFBZTVvQixLQUFLMXZCLEVBQUVzNEMsZUFBZTVvQixNQUFNLENBQUN4eEIsRUFBRW82QyxlQUFleG9CLEtBQUs5dkIsRUFBRXM0QyxlQUFleG9CLE9BQU8vcUIsS0FBSSxTQUFTN0csR0FBRyxJQUFJOEIsRUFBRTlCLEVBQUUsR0FBR1QsRUFBRVMsRUFBRSxHQUFHc0IsRUFBRWpCLEVBQUVvN0MsaUNBQWlDaDdDLEVBQUVxQixHQUFHQyxFQUFFMUIsRUFBRW83QyxpQ0FBaUNsNkMsRUFBRWhDLEdBQUdDLEVBQUUsSUFBSXNwQyxHQUFHOW5DLEVBQUVQLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU90TixFQUFFUyxFQUFFaTdDLGdCQUFnQjk3QyxFQUFFMmYsWUFBWW5GLEdBQUdsWSxFQUFFOEssTUFBTXJOLEVBQUVxTixRQUFRLE9BQU92TSxFQUFFNjVDLGNBQWMxNkMsRUFBRSxDQUFDOEIsRUFBRVMsR0FBR25DLE1BQUswQixFQUFFL0IsRUFBRSxHQUFHd0MsRUFBRXhDLEVBQUUsR0FBR0MsRUFBRW1DLEtBQUt3dkIsUUFBUTd2QixFQUFFUyxHQUFHLE9BQU9ULEVBQUU2TyxVQUFVcE8sRUFBRW9PLFVBQVUzUSxHQUFHaUIsRUFBRVUsVUFBVXM2QyxpQ0FBaUMsU0FBU2g3QyxFQUFFYyxHQUFHLE1BQU0sQ0FBQ29OLE9BQU9wTixFQUFFb04sT0FBTy9CLE1BQU1yTCxFQUFFcUwsTUFBTU0sTUFBTXpNLEVBQUV5TSxRQUFRek0sRUFBRVUsVUFBVW84QixLQUFLLFNBQVM5OEIsR0FBRyxHQUFHLElBQUlBLEVBQUVvQyxPQUFPLE9BQU9wQyxFQUFFLEdBQUcsR0FBR0EsRUFBRW9DLE9BQU90RCxFQUFFYSxJQUFJLGdDQUFnQyxDQUFDLElBQUltQixFQUFFNkQsS0FBSzhJLE1BQU16TixFQUFFb0MsT0FBTyxHQUFHN0IsRUFBRVcsS0FBSzQ3QixLQUFLOThCLEVBQUVrRyxNQUFNLEVBQUVwRixJQUFJbEIsRUFBRXNCLEtBQUs0N0IsS0FBSzk4QixFQUFFa0csTUFBTXBGLElBQUksT0FBT0ksS0FBSzQ3QixLQUFLLENBQUN2OEIsRUFBRVgsSUFBSSxJQUFJTCxFQUFFUyxFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFbU0sU0FBUWpFLFFBQU8sU0FBU2xJLEVBQUVjLEdBQUcsT0FBT3lZLEdBQUd2WixFQUFFYyxNQUFLTyxFQUFFckIsRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRXlNLFNBQVE1TCxFQUFFL0IsRUFBRXdFLFFBQVEsY0FBY2hDLEVBQUVULEVBQUUsSUFBSWtrQyxHQUFHL2tDLEVBQUUsR0FBR3lNLE1BQU1wTCxHQUFHLElBQUl1akMsR0FBRzVrQyxFQUFFLEdBQUd5TSxNQUFNcEwsR0FBR3RDLEVBQUU4QixFQUFFSyxLQUFLczRDLGlCQUFpQmw0QyxFQUFFb2QsWUFBWW5mLEdBQUcyQixLQUFLMjVDLGdCQUFnQnY1QyxFQUFFb2QsWUFBWW5mLEdBQUcsT0FBTzJCLEtBQUt1NEMsY0FBY240QyxFQUFFdEIsRUFBRWpCLElBQUlpQixFQUFFVSxVQUFVcThCLFNBQVMsU0FBUy84QixFQUFFYyxHQUFHLEdBQUcsY0FBY2QsRUFBRW1NLE9BQU8sY0FBY3JMLEVBQUVxTCxNQUFNLE9BQU9qTCxLQUFLbzZDLHlCQUF5QnQ3QyxFQUFFYyxFQUFFb25DLElBQUksR0FBR2huQyxLQUFLeTVDLG1CQUFtQixDQUFDMzZDLEVBQUVjLElBQUksT0FBT0ksS0FBS3c1QyxXQUFXM2QsU0FBUy84QixFQUFFYyxHQUFHLElBQUlQLEVBQUVnWixHQUFHdlosRUFBRW1NLE1BQU1yTCxFQUFFcUwsT0FBTyxHQUFHck4sRUFBRXdFLFFBQVEsZ0NBQWdDLE9BQU9wQyxLQUFLKzVDLGVBQWVqN0MsRUFBRWMsRUFBRW9uQyxHQUFHbG9DLEVBQUVtTSxPQUFPLElBQUl2TSxFQUFFLElBQUl5b0MsR0FBR0gsR0FBR2xvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPbE4sRUFBRTJCLEtBQUsyNUMsZ0JBQWdCajdDLEVBQUU4ZSxZQUFZbmUsR0FBRyxPQUFPVyxLQUFLdTRDLGNBQWM3NUMsRUFBRSxDQUFDSSxFQUFFYyxHQUFHdkIsSUFBSVMsRUFBRVUsVUFBVXVSLElBQUksU0FBU2pTLEVBQUVjLEdBQUcsSUFBSVAsRUFBRXpCLEVBQUV3RSxRQUFRLGdDQUFnQzFELEVBQUVXLEVBQUUsSUFBSWdvQyxHQUFHLGkxQkFBaTFCdm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU8sSUFBSTQ3QixHQUFHLDRLQUE0S3JvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPbE4sRUFBRWdhLEdBQUd2WixFQUFFbU0sTUFBTXJMLEVBQUVxTCxPQUFPOUssRUFBRWQsRUFBRVcsS0FBS3M0QyxpQkFBaUI1NUMsRUFBRThlLFlBQVluZixHQUFHMkIsS0FBSzI1QyxnQkFBZ0JqN0MsRUFBRThlLFlBQVluZixHQUFHLE9BQU8yQixLQUFLdTRDLGNBQWM3NUMsRUFBRSxDQUFDSSxFQUFFYyxHQUFHTyxJQUFJckIsRUFBRVUsVUFBVWlGLEtBQUssU0FBUzNGLEdBQUcsR0FBR2tCLEtBQUt5NUMsbUJBQW1CLENBQUMzNkMsSUFBSSxPQUFPa0IsS0FBS3c1QyxXQUFXLzBDLEtBQUszRixHQUFHLEdBQUdsQixFQUFFd0UsUUFBUSwrQkFBK0IsT0FBT3BDLEtBQUs2NUMsY0FBYy82QyxFQUFFazNDLEdBQUdsM0MsRUFBRW1NLE9BQU8sSUFBSXJMLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUFNeXFDLElBQUksT0FBT2gyQyxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVK00sTUFBTSxTQUFTek4sR0FBRyxHQUFHa0IsS0FBS3k1QyxtQkFBbUIsQ0FBQzM2QyxJQUFJLE9BQU9rQixLQUFLdzVDLFdBQVdqdEMsTUFBTXpOLEdBQUcsR0FBR2xCLEVBQUV3RSxRQUFRLCtCQUErQixPQUFPcEMsS0FBSzY1QyxjQUFjLzZDLEVBQUVtM0MsR0FBR24zQyxFQUFFbU0sT0FBTyxJQUFJckwsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0wcUMsSUFBSSxPQUFPajJDLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVV5VCxLQUFLLFNBQVNuVSxHQUFHLElBQUljLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUFNLDBEQUEwRCxPQUFPdkwsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsS0FBS0EsRUFBRVUsVUFBVXVHLE1BQU0sU0FBU2pILEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0sMkJBQTJCbE0sRUFBRVcsS0FBSzI1QyxnQkFBZ0IvNUMsRUFBRTRkLFlBQVksUUFBUSxPQUFPeGQsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsR0FBR08sSUFBSVAsRUFBRVUsVUFBVTBULE1BQU0sU0FBU3BVLEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0sMkJBQTJCbE0sRUFBRVcsS0FBSzI1QyxnQkFBZ0IvNUMsRUFBRTRkLFlBQVksUUFBUSxPQUFPeGQsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsR0FBR08sSUFBSVAsRUFBRVUsVUFBVXdHLFNBQVMsU0FBU2xILEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0seUNBQXlDbE0sRUFBRVcsS0FBSzI1QyxnQkFBZ0IvNUMsRUFBRTRkLFlBQVksUUFBUSxPQUFPeGQsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsR0FBR08sSUFBSVAsRUFBRVUsVUFBVXNILE1BQU0sU0FBU2hJLEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0sa1dBQWtXLE9BQU92TCxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVK0UsSUFBSSxTQUFTekYsR0FBRyxHQUFHa0IsS0FBS3k1QyxtQkFBbUIsQ0FBQzM2QyxJQUFJLE9BQU9rQixLQUFLdzVDLFdBQVdqMUMsSUFBSXpGLEdBQUcsR0FBR2xCLEVBQUV3RSxRQUFRLCtCQUErQixPQUFPcEMsS0FBSzY1QyxjQUFjLzZDLEVBQUVvM0MsR0FBR3AzQyxFQUFFbU0sT0FBTyxJQUFJckwsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0ycUMsSUFBSSxPQUFPbDJDLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVUyVCxNQUFNLFNBQVNyVSxHQUFHLEdBQUdrQixLQUFLeTVDLG1CQUFtQixDQUFDMzZDLElBQUksT0FBT2tCLEtBQUt3NUMsV0FBV3JtQyxNQUFNclUsR0FBRyxHQUFHbEIsRUFBRXdFLFFBQVEsK0JBQStCLE9BQU9wQyxLQUFLNjVDLGNBQWMvNkMsRUFBRXEzQyxHQUFHcjNDLEVBQUVtTSxPQUFPLElBQUlyTCxFQUFFLElBQUk2MUMsR0FBRzMyQyxFQUFFeU0sTUFBTTRxQyxJQUFJLE9BQU9uMkMsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsS0FBS0EsRUFBRVUsVUFBVWlNLElBQUksU0FBUzNNLEdBQUcsR0FBR2tCLEtBQUt5NUMsbUJBQW1CLENBQUMzNkMsSUFBSSxPQUFPa0IsS0FBS3c1QyxXQUFXL3RDLElBQUkzTSxHQUFHLEdBQUdsQixFQUFFd0UsUUFBUSwrQkFBK0IsT0FBT3BDLEtBQUs2NUMsY0FBYy82QyxFQUFFLDRSQUE0UkEsRUFBRW1NLE9BQU8sSUFBSXJMLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUFNLDhDQUE4QyxPQUFPdkwsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsS0FBS0EsRUFBRVUsVUFBVTRULE1BQU0sU0FBU3RVLEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0sd0JBQXdCLE9BQU92TCxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVa0YsS0FBSyxTQUFTNUYsR0FBRyxJQUFJYyxFQUFFLElBQUk2MUMsR0FBRzMyQyxFQUFFeU0sTUFBTSxtQkFBbUIsT0FBT3ZMLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVU2VCxNQUFNLFNBQVN2VSxHQUFHLEdBQUdrQixLQUFLeTVDLG1CQUFtQixDQUFDMzZDLElBQUksT0FBT2tCLEtBQUt3NUMsV0FBV25tQyxNQUFNdlUsR0FBRyxJQUFJYyxFQUFFLElBQUk2MUMsR0FBRzMyQyxFQUFFeU0sTUFBTSwwQkFBMEIsT0FBT3ZMLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVU4VCxPQUFPLFNBQVN4VSxHQUFHLElBQUljLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUFNLGlCQUFpQixPQUFPdkwsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsS0FBS0EsRUFBRVUsVUFBVStULFdBQVcsU0FBU3pVLEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0sbUJBQW1CLE9BQU92TCxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVa1UsS0FBSyxTQUFTNVUsR0FBRyxJQUFJYyxFQUFFLE9BQU9BLEVBQUVoQyxFQUFFd0UsUUFBUSxjQUFjLElBQUlvMEMsR0FBRzEzQyxFQUFFeU0sTUFBTStxQyxJQUFJLElBQUliLEdBQUczMkMsRUFBRXlNLE1BQU1zcUMsSUFBSTcxQyxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVc1UsTUFBTSxTQUFTaFYsRUFBRWMsR0FBRyxJQUFJUCxFQUFFekIsRUFBRXdFLFFBQVEsZ0NBQWdDLElBQUlpbEMsR0FBR0QsR0FBR3RvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPLElBQUk0N0IsR0FBR0QsR0FBR3BvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPLE9BQU92TCxLQUFLdTRDLGNBQWNsNUMsRUFBRSxDQUFDUCxFQUFFYyxLQUFLZCxFQUFFVSxVQUFVbVUsSUFBSSxTQUFTN1UsR0FBRyxHQUFHbEIsRUFBRXdFLFFBQVEsK0JBQStCLE9BQU9wQyxLQUFLNjVDLGNBQWMvNkMsRUFBRXkzQyxHQUFHejNDLEVBQUVtTSxPQUFPLElBQUlyTCxFQUFFLElBQUk2MUMsR0FBRzMyQyxFQUFFeU0sTUFBTXVxQyxJQUFJLE9BQU85MUMsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsS0FBS0EsRUFBRVUsVUFBVXk4QixPQUFPLFNBQVNuOUIsRUFBRWMsR0FBRyxJQUFJUCxFQUFFekIsRUFBRXdFLFFBQVEsZ0NBQWdDLElBQUlpbEMsR0FBRywwSUFBMEl2b0MsRUFBRXlNLE1BQU0zTCxFQUFFMkwsT0FBTyxJQUFJNDdCLEdBQUcseUNBQXlDcm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU8sT0FBT3ZMLEtBQUt1NEMsY0FBY2w1QyxFQUFFLENBQUNQLEVBQUVjLEtBQUtkLEVBQUVVLFVBQVVvVSxLQUFLLFNBQVM5VSxHQUFHLElBQUljLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUF0d2xDLHdRQUFneGxDLE9BQU92TCxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVMDhCLElBQUksU0FBU3A5QixHQUFHLElBQUljLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUFNLHlCQUF5QmxNLEVBQUVXLEtBQUsyNUMsZ0JBQWdCLzVDLEVBQUU0ZCxZQUFZLFNBQVMsT0FBT3hkLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEdBQUdPLElBQUlQLEVBQUVVLFVBQVUyOEIsS0FBSyxTQUFTcjlCLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRUwsR0FBR0ssRUFBRWQsRUFBRXdFLFFBQVEsbUJBQW1CLElBQUkwbEMsR0FBR2hwQyxFQUFFeU0sT0FBTyxJQUFJZzhCLEdBQUd6b0MsRUFBRXlNLFFBQVFpOEIsbUJBQW1CNW5DLEVBQUVQLEdBQUcsT0FBT1csS0FBS3U0QyxjQUFjNzVDLEVBQUUsQ0FBQ0ksR0FBRyxLQUFLVCxJQUFJUyxFQUFFVSxVQUFVZ1UsSUFBSSxTQUFTMVUsR0FBRyxHQUFHa0IsS0FBS3k1QyxtQkFBbUIsQ0FBQzM2QyxJQUFJLE9BQU9rQixLQUFLdzVDLFdBQVdobUMsSUFBSTFVLEdBQUcsR0FBR2xCLEVBQUV3RSxRQUFRLCtCQUErQixPQUFPcEMsS0FBSzY1QyxjQUFjLzZDLEVBQUU4MkMsR0FBRzkyQyxFQUFFbU0sT0FBTyxJQUFJckwsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU1xcUMsSUFBSSxPQUFPNTFDLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVU0OEIsV0FBVyxTQUFTdDlCLEdBQUcsSUFBSWMsRUFBRUksS0FBS2t5QyxRQUFRenpDLElBQUlLLEVBQUVrTyxRQUFRM04sRUFBRSxJQUFJMG9DLEdBQUdqcEMsRUFBRXlNLE9BQU83TSxFQUFFLENBQUNzQixLQUFLODVDLGlDQUFpQ2g3QyxFQUFFYyxFQUFFNjRDLGVBQWU1b0IsTUFBTTd2QixLQUFLODVDLGlDQUFpQ2g3QyxFQUFFYyxFQUFFNjRDLGVBQWV4b0IsT0FBTyxPQUFPandCLEtBQUt1NEMsY0FBY2w1QyxFQUFFWCxJQUFJSSxFQUFFVSxVQUFVdVUsUUFBUSxTQUFTalYsR0FBRyxJQUFJYyxFQUFFLElBQUk2MUMsR0FBRzMyQyxFQUFFeU0sTUFBTSx1Q0FBdUMsT0FBT3ZMLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVV5VSxTQUFTLFNBQVNuVixHQUFHLElBQUljLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUFNLDJXQUEyVyxPQUFPdkwsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsS0FBS0EsRUFBRVUsVUFBVTRVLElBQUksU0FBU3RWLEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQXYybkNtcUMsK0NBQWkzbkMsT0FBTzExQyxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVNlUsSUFBSSxTQUFTdlYsR0FBRyxJQUFJYyxFQUFFLElBQUk2MUMsR0FBRzMyQyxFQUFFeU0sTUFBajZuQ21xQywrQ0FBMjZuQyxPQUFPMTFDLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVU4VSxJQUFJLFNBQVN4VixHQUFHLElBQUljLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUFNLGtCQUFrQixPQUFPdkwsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsS0FBS0EsRUFBRVUsVUFBVStVLEtBQUssU0FBU3pWLEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0sbUJBQW1CLE9BQU92TCxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVZ1YsS0FBSyxTQUFTMVYsR0FBRyxJQUFJYyxFQUFFLElBQUk2MUMsR0FBRzMyQyxFQUFFeU0sTUFBTSxtQkFBbUIsT0FBT3ZMLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVVpVixLQUFLLFNBQVMzVixHQUFHLElBQUljLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUEvd29DbXFDLGdEQUF5eG9DLE9BQU8xMUMsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsS0FBS0EsRUFBRVUsVUFBVW9SLE1BQU0sU0FBUzlSLEVBQUVjLEdBQUcsSUFBSVAsRUFBRXpCLEVBQUV3RSxRQUFRLGdDQUFnQyxJQUFJaWxDLEdBQUcsK1NBQStTdm9DLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE9BQU8sSUFBSTQ3QixHQUFHLG1GQUFtRnJvQyxFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPLE9BQU92TCxLQUFLdTRDLGNBQWNsNUMsRUFBRSxDQUFDUCxFQUFFYyxLQUFLZCxFQUFFVSxVQUFVa1YsS0FBSyxTQUFTNVYsR0FBRyxJQUFJYyxFQUFFLElBQUk2MUMsR0FBRzMyQyxFQUFFeU0sTUFBTSxnRUFBZ0UsT0FBT3ZMLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVVtVixLQUFLLFNBQVM3VixHQUFHLElBQUljLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUFNLGlFQUFpRSxPQUFPdkwsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsS0FBS0EsRUFBRVUsVUFBVThFLEtBQUssU0FBU3hGLEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQU0sd0ZBQXdGLE9BQU92TCxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVb1YsTUFBTSxTQUFTOVYsR0FBRyxJQUFJYyxFQUFFLElBQUk2MUMsR0FBRzMyQyxFQUFFeU0sTUFBTSxzQ0FBc0MsT0FBT3ZMLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVVxVixNQUFNLFNBQVMvVixHQUFHLElBQUljLEVBQUUsSUFBSTYxQyxHQUFHMzJDLEVBQUV5TSxNQUFoOHFDbXFDLDZGQUEwOHFDLE9BQU8xMUMsS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQ2QsS0FBS0EsRUFBRVUsVUFBVXNWLE1BQU0sU0FBU2hXLEdBQUcsSUFBSWMsRUFBRSxJQUFJNjFDLEdBQUczMkMsRUFBRXlNLE1BQTk4cUNtcUMsc0hBQXc5cUMsT0FBTzExQyxLQUFLdTRDLGNBQWMzNEMsRUFBRSxDQUFDZCxLQUFLQSxFQUFFVSxVQUFVdVYsSUFBSSxTQUFTalcsR0FBRyxJQUFJYyxFQUFFLElBQUk2MUMsR0FBRzMyQyxFQUFFeU0sTUFBTSx3ZEFBd2QsT0FBT3ZMLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVV3VixLQUFLLFNBQVNsVyxFQUFFYyxHQUFHLElBQUlQLEVBQUUsSUFBSW8yQyxHQUFHMzJDLEVBQUV5TSxNQUFNLFNBQVN6TSxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxHQUFHNDJDLEdBQUcsc0NBQXNDNTJDLEVBQUUsU0FBaEYsQ0FBMEZjLElBQUksT0FBT0ksS0FBS3U0QyxjQUFjbDVDLEVBQUUsQ0FBQ1AsS0FBS0EsRUFBRVUsVUFBVTY2QyxlQUFlLFNBQVN2N0MsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsSUFBSVIsRUFBRWIsRUFBRXlNLE1BQU1uTCxFQUFFSixLQUFLa3lDLFFBQVF6ekMsSUFBSUssRUFBRWtPLFFBQVFuUCxFQUFFd0IsRUFBRWlnQyxXQUFXcmhDLEVBQUUwQixFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxHQUFHa0UsRUFBRXhFLEVBQUVrZ0MsWUFBWTcvQixFQUFFLGlCQUFpQkwsRUFBRTgvQixXQUFXamhDLEdBQUcsSUFBSUQsR0FBRyxJQUFJNEYsSUFBSWhHLEVBQUUsSUFBSW1HLEVBQUVyRSxFQUFFLEdBQUcsR0FBRyxLQUFLUyxFQUFFZ21DLFNBQVMsR0FBR2xvQyxJQUFJTixFQUFFd0UsUUFBUSx5QkFBeUJ4RSxFQUFFd0UsUUFBUSxrQ0FBa0M0QixFQUFFLENBQUMsSUFBSWhHLEVBQUUwQixFQUFFQyxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxHQUFHd0UsRUFBRW5FLEtBQUt5TixRQUFRM08sRUFBRSxDQUFDLEVBQUVkLEVBQUVxQixFQUFFaWdDLGFBQWF2N0IsRUFBRS9ELEtBQUt5TixRQUFRN04sRUFBRSxDQUFDLEVBQUVQLEVBQUVpZ0MsV0FBV2pnQyxFQUFFa2dDLGNBQWMsT0FBT3YvQixLQUFLeU4sUUFBUXpOLEtBQUtzN0IsaUJBQWlCLENBQUNuN0IsRUFBRWdFLEVBQUVFLEVBQUVOLEVBQUV3M0IsWUFBVyxFQUFHQyxZQUFXLEVBQUdDLEtBQUsvOEIsRUFBRWc5QixXQUFXcjlCLEVBQUVzOUIsdUJBQXVCeDdCLElBQUlkLEVBQUU0Z0MsVUFBVSxJQUFJNzdCLEVBQUUxRSxFQUFFQyxFQUFFLEdBQUdBLEVBQUUsSUFBSUEsRUFBRSxHQUFHLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxJQUFJQSxFQUFFLEdBQUcsR0FBRzBFLEVBQUVvSSxHQUFHQyxLQUFLLENBQUMsRUFBRXRJLEVBQUUvRSxFQUFFaWdDLFlBQVksQ0FBQ3R5QixPQUFPbE8sRUFBRWtPLFFBQVFsTyxFQUFFbU0sTUFBTWpMLE1BQU13RSxFQUFFcEUsRUFBRW1MLE1BQU1uTCxFQUFFbUwsTUFBTW5MLEVBQUVtTCxNQUFNdkcsUUFBUTVFLEVBQUVtTCxNQUFNbkwsRUFBRW1MLE1BQU1ySyxPQUFPLEtBQUs0QyxFQUFFb2xCLEdBQUc5b0IsRUFBRW1MLE1BQU1sSCxFQUFFa0gsUUFBTyxXQUFXLE1BQU0sa0JBQWtCbkwsRUFBRW1MLE1BQU0sT0FBT2xILEVBQUVrSCxNQUFNLGlCQUFnQixJQUFJNUcsRUFBRTNFLEtBQUt5TixRQUFRN04sRUFBRSxDQUFDLEVBQUVQLEVBQUVpZ0MsV0FBV2pnQyxFQUFFa2dDLGNBQWMxNkIsRUFBRTdFLEtBQUtzN0IsaUJBQWlCLENBQUNuN0IsRUFBRWtFLEVBQUVBLEVBQUVNLEVBQUU0MkIsWUFBVyxFQUFHQyxZQUFXLEVBQUdDLEtBQUsvOEIsRUFBRWc5QixXQUFXcjlCLEVBQUVzOUIsdUJBQXVCeDdCLElBQUk0RSxFQUFFL0UsS0FBS2t5QyxRQUFRenpDLElBQUlvRyxFQUFFbUksUUFBUSxPQUFPbEosRUFBRWlCLEVBQUVxaEMsVUFBUyxXQUFXLE1BQU0saURBQWdEaG1DLEVBQUVtTCxNQUFNL0csRUFBRU8sRUFBRXdHLE1BQU1sTSxFQUFFNGdDLFNBQVN4ekIsR0FBR0MsS0FBS3JOLEVBQUU0Z0MsU0FBUyxDQUFDanpCLE9BQU9uSSxFQUFFbUksUUFBUW5JLEVBQUVvRyxNQUFNakwsT0FBT2xCLEVBQUVVLFVBQVU4NkMsaUJBQWlCLFNBQVN4N0MsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsSUFBSXZDLEVBQUV5QixFQUFFc2dDLFlBQVloZ0MsRUFBRU4sRUFBRXFnQyxhQUFhdC9CLEVBQUVmLEVBQUVpZ0MsV0FBV3poQyxFQUFFd0IsRUFBRTQvQixTQUFTaGhDLEVBQUVvQixFQUFFMi9CLFVBQVVuN0IsRUFBRSxpQkFBaUJ4RSxFQUFFOC9CLFdBQVd6L0IsRUFBRTlCLEVBQUUrQixFQUFFUyxFQUFFMEQsRUFBRTdGLEVBQUVKLEVBQUVLLEVBQUUsQ0FBQ3dCLEVBQUVvRSxHQUFHRSxFQUFFbEYsRUFBRW9RLFFBQVEsQ0FBQyxJQUFJbFIsRUFBRTRCLEVBQUU2TixRQUFRLENBQUMsRUFBRS9OLEdBQUcsSUFBSXlFLEVBQUUsSUFBSWd1QyxHQUFHajBDLEVBQUU4RixFQUFFdUgsTUFBTWxNLEdBQUcwRSxFQUFFL0QsS0FBS3U0QyxjQUFjcDBDLEVBQUUsQ0FBQ0gsSUFBSXlKLFFBQVEsQ0FBQyxFQUFFdlAsRUFBRSxHQUFHQSxFQUFFLEtBQUtrRyxFQUFFLE1BQU0xRixFQUFFMkYsRUFBRSxNQUFNbEUsRUFBRXFFLEVBQUVuRyxFQUFFczRDLEdBQUd0NEMsR0FBRSxHQUFJLEtBQUtzRyxFQUFFLElBQUkrdEMsR0FBRzN1QyxFQUFFd0gsTUFBTSxDQUFDLEVBQUV6SCxFQUFFekUsRUFBRWtnQyxjQUFhLEdBQUcsRUFBR243QixFQUFFSSxFQUFFSCxHQUFHUSxFQUFFLENBQUNkLEVBQUUvRixHQUFHVSxHQUFHbUcsRUFBRTFELEtBQUt6QyxHQUFHMkYsR0FBR1EsRUFBRTFELEtBQUtoQixHQUFHLElBQUk0RSxFQUFFL0UsS0FBS3U0QyxjQUFjNXpDLEVBQUVFLEdBQUcsT0FBT2hCLEVBQUVrQixFQUFFMEksUUFBUSxDQUFDLEVBQUV4UCxFQUFFSixFQUFFd0IsRUFBRWtnQyxjQUFjeDZCLEVBQUUwSSxRQUFRLENBQUMsRUFBRXBPLEVBQUVrZ0MsWUFBWXRoQyxFQUFFSixLQUFLaUIsRUFBRVUsVUFBVTY4QixZQUFZLFNBQVN2OUIsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsR0FBRyxJQUFJZCxFQUFFcWdDLGNBQWMsSUFBSXJnQyxFQUFFc2dDLGFBQWEsSUFBSXRnQyxFQUFFeWdDLGdCQUFnQixJQUFJemdDLEVBQUUwZ0MsZUFBZSxJQUFJMWdDLEVBQUVtZ0MsY0FBYyxJQUFJbmdDLEVBQUVvZ0MsY0FBYyxTQUFTcGdDLEVBQUUwL0IsUUFBUUgsTUFBTSxVQUFVdi9CLEVBQUUwL0IsUUFBUUgsTUFBTSxPQUFPNStCLEtBQUtxNkMsZUFBZXY3QyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxHQUFHdkMsRUFBRXdFLFFBQVEsc0JBQXNCLElBQUl0RCxFQUFFeU0sTUFBTSxHQUFHLE9BQU92TCxLQUFLczZDLGlCQUFpQng3QyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxJQUFJUixFQUFFLE1BQU1qQixFQUFFMEIsRUFBRSxNQUFNRCxFQUFFdEMsRUFBRVEsRUFBRXM0QyxHQUFHdDRDLEdBQUUsR0FBSSxLQUFLSixFQUFFLElBQUl1cUMsR0FBR25wQyxFQUFFTSxFQUFFOUIsRUFBRXVDLEdBQUd5RCxFQUFFLENBQUMvRSxFQUFFYyxHQUFHLE9BQU9sQixHQUFHbUYsRUFBRTFDLEtBQUt6QyxHQUFHeUIsR0FBRzBELEVBQUUxQyxLQUFLaEIsR0FBR0gsS0FBS3U0QyxjQUFjdDZDLEVBQUU0RixJQUFJL0UsRUFBRVUsVUFBVStWLE9BQU8sU0FBU3pXLEVBQUVjLEVBQUVQLEdBQUcsR0FBRyxJQUFJQSxFQUFFcWdDLGNBQWMsSUFBSXJnQyxFQUFFc2dDLGFBQWEsSUFBSXRnQyxFQUFFeWdDLGdCQUFnQixJQUFJemdDLEVBQUUwZ0MsZUFBZSxJQUFJMWdDLEVBQUVtZ0MsY0FBYyxJQUFJbmdDLEVBQUVvZ0MsY0FBYyxTQUFTcGdDLEVBQUUwL0IsUUFBUUgsTUFBTSxVQUFVdi9CLEVBQUUwL0IsUUFBUUgsTUFBTSxPQUFPNStCLEtBQUtxNkMsZUFBZXY3QyxFQUFFYyxFQUFFUCxHQUFHLEdBQUd6QixFQUFFd0UsUUFBUSxzQkFBc0IsSUFBSXRELEVBQUV5TSxNQUFNLEdBQUcsT0FBT3ZMLEtBQUtzNkMsaUJBQWlCeDdDLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRSxJQUFJOHBDLEdBQUducEMsR0FBRyxPQUFPVyxLQUFLdTRDLGNBQWM3NUMsRUFBRSxDQUFDSSxFQUFFYyxLQUFLZCxFQUFFVSxVQUFVODhCLGVBQWUsU0FBU3g5QixFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUsSUFBSXlwQyxHQUFHOW9DLEdBQUcsT0FBT1csS0FBS3U0QyxjQUFjNzVDLEVBQUUsQ0FBQ0ksRUFBRWMsS0FBS2QsRUFBRVUsVUFBVSs4QixnQkFBZ0IsU0FBU3o5QixFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUsSUFBSXdwQyxHQUFHN29DLEdBQUcsT0FBT1csS0FBS3U0QyxjQUFjNzVDLEVBQUUsQ0FBQ0ksRUFBRWMsS0FBS2QsRUFBRVUsVUFBVWlXLGdCQUFnQixTQUFTM1csRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFLE9BQU9kLEVBQUV3RSxRQUFRLDZCQUE2Qi9DLEVBQUVvZ0MsYUFBYSxHQUFHcGdDLEVBQUVrZ0MsWUFBWWxnQyxFQUFFaWdDLFlBQVksR0FBRzVnQyxFQUFFLElBQUlpcUMsR0FBR3RwQyxHQUFHVyxLQUFLdTRDLGNBQWM3NUMsRUFBRSxDQUFDSSxFQUFFYyxHQUFHSSxLQUFLczRDLGlCQUFpQmo1QyxFQUFFNGdDLFNBQVNuaEMsRUFBRW1NLFVBQVV2TSxFQUFFLElBQUlncUMsR0FBR3JwQyxHQUFHVyxLQUFLdTRDLGNBQWM3NUMsRUFBRSxDQUFDSSxFQUFFYyxNQUFNZCxFQUFFVSxVQUFVZzlCLHdCQUF3QixTQUFTMTlCLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRSxJQUFJNnBDLEdBQUdscEMsR0FBRyxPQUFPVyxLQUFLdTRDLGNBQWM3NUMsRUFBRSxDQUFDSSxFQUFFYyxLQUFLZCxFQUFFVSxVQUFVaTlCLHlCQUF5QixTQUFTMzlCLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRSxJQUFJNHBDLEdBQUdqcEMsR0FBRyxPQUFPVyxLQUFLdTRDLGNBQWM3NUMsRUFBRSxDQUFDSSxFQUFFYyxLQUFLZCxFQUFFVSxVQUFVazlCLE9BQU8sU0FBUzU5QixFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUsSUFBSStwQyxHQUFHcHBDLEdBQUcsT0FBT1csS0FBS3U0QyxjQUFjNzVDLEVBQUUsQ0FBQ0ksRUFBRWMsS0FBS2QsRUFBRVUsVUFBVW05QixlQUFlLFNBQVM3OUIsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFLElBQUkycEMsR0FBR2hwQyxHQUFHLE9BQU9XLEtBQUt1NEMsY0FBYzc1QyxFQUFFLENBQUNJLEVBQUVjLEtBQUtkLEVBQUVVLFVBQVVvOUIsZ0JBQWdCLFNBQVM5OUIsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFLElBQUkwcEMsR0FBRy9vQyxHQUFHLE9BQU9XLEtBQUt1NEMsY0FBYzc1QyxFQUFFLENBQUNJLEVBQUVjLEtBQUtkLEVBQUVVLFVBQVVxVyxRQUFRLFNBQVMvVyxFQUFFYyxHQUFHLElBQUlQLEVBQUUsSUFBSTR6QyxHQUFHcnpDLEVBQUUsT0FBTSxHQUFJbEIsRUFBRXNCLEtBQUsyNUMsZ0JBQWdCdDZDLEVBQUVtZSxZQUFZMWUsRUFBRW1NLE9BQU8sT0FBT2pMLEtBQUt1NEMsY0FBY2w1QyxFQUFFLENBQUNQLEdBQUdKLElBQUlJLEVBQUVVLFVBQVVvVyxRQUFRLFNBQVM5VyxFQUFFYyxHQUFHLElBQUlQLEVBQUUsSUFBSTR6QyxHQUFHcnpDLEVBQUUsT0FBTSxHQUFJbEIsRUFBRXNCLEtBQUsyNUMsZ0JBQWdCdDZDLEVBQUVtZSxZQUFZLFdBQVcsT0FBT3hkLEtBQUt1NEMsY0FBY2w1QyxFQUFFLENBQUNQLEdBQUdKLElBQUlJLEVBQUVVLFVBQVVxOUIsZ0JBQWdCLFNBQVMvOUIsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFLElBQUk0MEMsR0FBR3YwQyxFQUFFLE9BQU0sR0FBSXlCLEVBQUVILEtBQUt1NEMsY0FBY2w2QyxFQUFFLENBQUN1QixJQUFJaEMsRUFBRSxJQUFJNDBDLEdBQUc5ekMsR0FBR2lCLEVBQUVLLEtBQUsyNUMsZ0JBQWdCLzdDLEVBQUU0ZixZQUFZNWQsRUFBRXFMLE9BQU83SyxFQUFFSixLQUFLdTRDLGNBQWMzNkMsRUFBRSxDQUFDa0IsRUFBRXFCLEdBQUdSLEdBQUcsT0FBT1EsRUFBRXFPLFVBQVVwTyxHQUFHdEIsRUFBRVUsVUFBVXM5QixnQkFBZ0IsU0FBU2grQixFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUsSUFBSWdvQyxHQUFHcm5DLEdBQUdoQixFQUFFMkIsS0FBSzI1QyxnQkFBZ0JqN0MsRUFBRThlLFlBQVk1ZCxFQUFFcUwsT0FBTyxPQUFPakwsS0FBS3U0QyxjQUFjNzVDLEVBQUUsQ0FBQ0ksR0FBR1QsSUFBSVMsRUFBRVUsVUFBVXVPLEtBQUssU0FBU2pQLEVBQUVjLEdBQUcsT0FBT2toQyxHQUFHaGlDLEVBQUVjLEVBQUVJLE9BQU9sQixFQUFFVSxVQUFVdVEsUUFBUSxTQUFTalIsRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUVQLEVBQUV5TSxNQUFNM0wsR0FBR2xCLEVBQUUsSUFBSXFCLE1BQU1qQixFQUFFdU0sS0FBSyxHQUFHaE4sRUFBRSxFQUFFOEIsRUFBRSxFQUFFQSxFQUFFckIsRUFBRXVNLEtBQUtsTCxJQUFJQSxJQUFJUCxJQUFJbEIsRUFBRUwsS0FBS1MsRUFBRXlNLE1BQU1wTCxJQUFJLElBQUl2QyxFQUFFLElBQUltQyxNQUFNakIsRUFBRXVNLE1BQU1nRSxLQUFLLEdBQUcxUCxFQUFFYixFQUFFeU0sTUFBTXZHLFFBQVFyRixFQUFFQyxHQUFHLEVBQUUsSUFBSVEsRUFBRSxJQUFJTCxNQUFNVixHQUFHLElBQUljLEVBQUUsRUFBRUEsRUFBRUMsRUFBRWMsT0FBT2YsSUFBSXZDLEVBQUVnQyxHQUFHTyxFQUFFQyxFQUFFRCxHQUFHSCxLQUFLZ0YsTUFBTWxHLEVBQUVsQixFQUFFK0IsR0FBRzhOLFFBQVEvTyxHQUFHLE9BQU8wQixHQUFHdEIsRUFBRVUsVUFBVXU5QixVQUFVLFNBQVNqK0IsRUFBRWMsR0FBRyxJQUFJUCxFQUFFLElBQUk2ekMsR0FBR3R6QyxFQUFFLE9BQU0sR0FBSWxCLEVBQUVzQixLQUFLMjVDLGdCQUFnQnQ2QyxFQUFFbWUsWUFBWSxXQUFXLE9BQU94ZCxLQUFLdTRDLGNBQWNsNUMsRUFBRSxDQUFDUCxHQUFHSixJQUFJSSxFQUFFVSxVQUFVdzlCLGtCQUFrQixTQUFTbCtCLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRSxJQUFJaW9DLEdBQUd0bkMsR0FBR2hCLEVBQUUyQixLQUFLMjVDLGdCQUFnQmo3QyxFQUFFOGUsWUFBWTVkLEVBQUVxTCxPQUFPLE9BQU9qTCxLQUFLdTRDLGNBQWM3NUMsRUFBRSxDQUFDSSxHQUFHVCxJQUFJUyxFQUFFVSxVQUFVeTlCLFVBQVUsU0FBU24rQixFQUFFYyxHQUFHLElBQUlQLEVBQUUsSUFBSTZ6QyxHQUFHdHpDLEVBQUUsT0FBTSxHQUFJbEIsRUFBRXNCLEtBQUsyNUMsZ0JBQWdCdDZDLEVBQUVtZSxZQUFZLFdBQVcsT0FBT3hkLEtBQUt1NEMsY0FBY2w1QyxFQUFFLENBQUNQLEdBQUdKLElBQUlJLEVBQUVVLFVBQVUwOUIsa0JBQWtCLFNBQVNwK0IsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFLElBQUk2MEMsR0FBR3gwQyxFQUFFLE9BQU0sR0FBSXlCLEVBQUVILEtBQUt1NEMsY0FBY2w2QyxFQUFFLENBQUN1QixJQUFJaEMsRUFBRSxJQUFJNjBDLEdBQUcvekMsR0FBR2lCLEVBQUVLLEtBQUsyNUMsZ0JBQWdCLzdDLEVBQUU0ZixZQUFZNWQsRUFBRXFMLE9BQU83SyxFQUFFSixLQUFLdTRDLGNBQWMzNkMsRUFBRSxDQUFDa0IsRUFBRXFCLEdBQUdSLEdBQUcsT0FBT1EsRUFBRXFPLFVBQVVwTyxHQUFHdEIsRUFBRVUsVUFBVWlPLFFBQVEsU0FBUzNPLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVcsS0FBS2t5QyxRQUFRenpDLElBQUlLLEVBQUVrTyxRQUFRLE9BQU8zTixFQUFFK21DLFVBQVVsZCxHQUFHcHFCLEVBQUV5TSxNQUFNM0wsSUFBSSxPQUFPUCxFQUFFdzVDLFNBQVMzdkIsR0FBRzdwQixFQUFFa00sTUFBTTNMLEdBQUdtaEMsR0FBR2ppQyxFQUFFYyxHQUFHSSxLQUFLdTZDLGNBQWN6N0MsRUFBRWMsSUFBSWQsRUFBRVUsVUFBVTJWLGVBQWUsU0FBU3JXLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsSUFBSUwsRUFBRVQsRUFBRXdFLFFBQVEsK0JBQStCLElBQUlteEMsR0FBR3owQyxFQUFFeU0sTUFBTTNMLEVBQUVQLEVBQUVYLEdBQUcsSUFBSTQwQyxHQUFHeDBDLEVBQUV5TSxNQUFNM0wsRUFBRVAsRUFBRVgsR0FBRyxPQUFPc0IsS0FBS3U0QyxjQUFjbDZDLEVBQUUsQ0FBQ1MsS0FBS0EsRUFBRVUsVUFBVTY5Qix1QkFBdUIsU0FBU3YrQixFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUsSUFBSTIwQyxHQUFHdjBDLEVBQUVjLEVBQUVQLEdBQUcsT0FBT1csS0FBS3U0QyxjQUFjNzVDLEVBQUUsQ0FBQ0ksS0FBS0EsRUFBRVUsVUFBVTZWLHNCQUFzQixTQUFTdlcsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFLElBQUlvMUMsR0FBRzMwQyxFQUFFeU0sTUFBTTNMLEVBQUVQLEVBQUVYLEdBQUcsT0FBT3NCLEtBQUt1NEMsY0FBY2w2QyxFQUFFLENBQUNTLEtBQUtBLEVBQUVVLFVBQVU4OUIsOEJBQThCLFNBQVN4K0IsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFLElBQUk4MEMsR0FBRzEwQyxFQUFFYyxFQUFFUCxHQUFHLE9BQU9XLEtBQUt1NEMsY0FBYzc1QyxFQUFFLENBQUNJLEtBQUtBLEVBQUVVLFVBQVVrM0IsWUFBWSxTQUFTNTNCLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsSUFBSUwsRUFBRXVCLEVBQUVkLEVBQUU4N0IsR0FBRzk3QixHQUFHcUIsRUFBRTlCLEVBQUVrTixNQUFNLEdBQUczTixFQUFFUyxFQUFFa04sTUFBTSxHQUFHNUwsRUFBRSxJQUFJZ3pDLEdBQUd4eUMsRUFBRXZDLEVBQUV5QixHQUFHZSxFQUFFSixLQUFLMjVDLGdCQUFnQmg2QyxFQUFFNmQsWUFBWSxTQUFTM2YsRUFBRThCLEVBQUU2bkMsbUJBQW1COW9DLEdBQUcsT0FBT3NCLEtBQUt1NEMsY0FBYzU0QyxFQUFFLENBQUN0QixHQUFHK0IsRUFBRXZDLElBQUlpQixFQUFFVSxVQUFVNFAsT0FBTyxTQUFTdFEsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFLElBQUl3MEMsR0FBRy96QyxFQUFFd00sS0FBSzFMLEVBQUVQLEVBQUVYLEdBQUcsT0FBT3NCLEtBQUt1NEMsY0FBY2w2QyxFQUFFLENBQUNTLEtBQUtBLEVBQUVVLFVBQVVvK0IsS0FBSyxTQUFTOStCLEdBQUcsSUFBSWMsRUFBRSxJQUFJNHBDLEdBQUcxcUMsRUFBRXdNLE1BQU0sT0FBT3RMLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEtBQUtBLEVBQUVVLFVBQVVpK0Isa0JBQWtCLFNBQVMzK0IsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxPQUFPNHZCLEdBQUcsaUdBQWlHK1UsR0FBR2xrQyxFQUFFb1AsV0FBV3RPLEVBQUVzTyxXQUFXN08sRUFBRVgsRUFBRUwsSUFBSVMsRUFBRVUsVUFBVWsrQixjQUFjLFNBQVM1K0IsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsSUFBSXZDLEVBQUUsSUFBSWdyQyxHQUFHOXBDLEVBQUV5TSxNQUFNM0wsRUFBRTJMLE1BQU03TSxFQUFFTCxFQUFFOEIsR0FBRyxPQUFPSCxLQUFLdTRDLGNBQWMzNkMsRUFBRSxDQUFDa0IsRUFBRWMsRUFBRVAsS0FBS1AsRUFBRVUsVUFBVStXLGFBQWEsU0FBU3pYLEVBQUVjLEVBQUVQLEdBQUd5RSxFQUFFbEUsRUFBRSxHQUFFLFdBQVcsTUFBTSxzREFBc0RBLEtBQUksSUFBSWxCLEVBQUVJLEVBQUV5TSxNQUFNLEdBQUdsTixFQUFFLFNBQVNnQixFQUFFUCxFQUFFeU0sTUFBTSxHQUFHek0sRUFBRXlNLE1BQU0sR0FBR3BMLEVBQUUsU0FBU2QsRUFBRVAsRUFBRXlNLE1BQU0sR0FBR3pNLEVBQUV5TSxNQUFNLEdBQUczTixFQUFFLFNBQVN5QixFQUFFUCxFQUFFeU0sTUFBTSxHQUFHek0sRUFBRXlNLE1BQU0sR0FBRzVMLEVBQUV0QixFQUFFdUIsRUFBRVEsRUFBRUQsRUFBRVAsRUFBRS9CLEVBQUVELEdBQUdnQyxFQUFFQSxHQUFHM0IsRUFBRSxJQUFJZ3JDLEdBQUcsU0FBUzVwQyxFQUFFLENBQUNYLEVBQUVpQixFQUFFUyxFQUFFdkMsR0FBRyxDQUFDYSxFQUFFYixFQUFFOEIsRUFBRVMsR0FBR1IsRUFBRVAsR0FBRyxPQUFPVyxLQUFLdTRDLGNBQWN0NkMsRUFBRSxDQUFDYSxLQUFLQSxFQUFFVSxVQUFVc0QsTUFBTSxTQUFTaEUsRUFBRWMsRUFBRVAsR0FBRyxPQUFPZ2tDLEdBQUd2a0MsRUFBRWMsRUFBRVAsSUFBSVAsRUFBRVUsVUFBVTQ5QixVQUFVLFNBQVN0K0IsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFNDZCLEdBQUcsRUFBRXg2QixFQUFFTyxHQUFHaEIsRUFBRUssRUFBRTY2QixVQUFVcDVCLEVBQUV6QixFQUFFODZCLFdBQVc1N0IsRUFBRWMsRUFBRSs2QixVQUFVOTVCLEVBQUVqQixFQUFFME4sUUFBUWhNLEVBQUUxQixFQUFFZzdCLFdBQVc3N0IsRUFBRSxDQUFDdUMsRUFBRXhDLEVBQUVBLEdBQUdLLEVBQUVhLEVBQUUyTyxRQUFRLENBQUN0TixFQUFFOUIsSUFBSXdGLEVBQUVqRSxFQUFFNk4sUUFBUSxDQUFDdE4sRUFBRXZDLElBQUksR0FBRyxJQUFJd0MsRUFBRSxPQUFPMmdDLEdBQUc3USxHQUFHLElBQUk3d0IsR0FBRyxJQUFJSyxFQUFFMHdCLEdBQUcsR0FBR3RzQixFQUFFLElBQUk4dkMsR0FBR3p6QyxFQUFFOUIsRUFBRUosRUFBRW9OLEtBQUt4SCxFQUFFd0gsS0FBSzFMLEVBQUU5QixHQUFHLE9BQU9tQyxLQUFLdTRDLGNBQWN6MEMsRUFBRSxDQUFDRCxFQUFFNUYsRUFBRXlCLElBQUkrTixRQUFRcE8sSUFBSVAsRUFBRVUsVUFBVW0rQixjQUFjLFNBQVM3K0IsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFaTdCLEdBQUcsRUFBRXg2QixFQUFFTyxHQUFHYyxFQUFFOUIsRUFBRWs3QixVQUFVMzdCLEVBQUVTLEVBQUVtN0IsV0FBVzc1QixFQUFFdEIsRUFBRStOLFFBQVFoTSxFQUFFL0IsRUFBRXE3QixXQUFXNzdCLEVBQUUsSUFBSSsxQyxHQUFHaDJDLEVBQUV1QyxFQUFFckIsRUFBRXVNLEtBQUt6TCxFQUFFeUwsS0FBSzFMLEVBQUUsQ0FBQ1MsRUFBRSxJQUFHLEdBQUksT0FBT0osS0FBS3U0QyxjQUFjMTZDLEVBQUUsQ0FBQytCLEVBQUVkLEVBQUVKLElBQUkrTyxRQUFRcE8sSUFBSVAsRUFBRVUsVUFBVWdYLElBQUksU0FBUzFYLEdBQUcsT0FBT2tCLEtBQUt3NkMsUUFBUTE3QyxHQUFFLElBQUtBLEVBQUVVLFVBQVVrWCxLQUFLLFNBQVM1WCxHQUFHLE9BQU9rQixLQUFLdzZDLFFBQVExN0MsR0FBRSxJQUFLQSxFQUFFVSxVQUFVZzdDLFFBQVEsU0FBUzE3QyxFQUFFYyxHQUFHLElBQUlQLEVBQUVXLEtBQUtreUMsUUFBUXp6QyxJQUFJSyxFQUFFa08sUUFBUXRPLEVBQUUsSUFBSW1yQyxHQUEvbzJILG9DQUFxcDJIL3FDLEVBQUV5TSxNQUFNM0wsR0FBR3ZCLEVBQUUsSUFBSXdyQyxHQUEvbjJILG9DQUFxbzJIL3FDLEVBQUV5TSxNQUFNM0wsR0FBR08sRUFBRSxDQUFDSCxLQUFLODVDLGlDQUFpQ2g3QyxFQUFFTyxFQUFFbzVDLGVBQWU1b0IsTUFBTTd2QixLQUFLODVDLGlDQUFpQ2g3QyxFQUFFTyxFQUFFbzVDLGVBQWV4b0IsT0FBT3J5QixFQUFFb0MsS0FBS3U0QyxjQUFjNzVDLEVBQUV5QixHQUFHUixFQUFFSyxLQUFLdTRDLGNBQWNsNkMsRUFBRThCLEdBQUdDLEVBQUVKLEtBQUt3dkIsUUFBUTV4QixFQUFFK0IsR0FBRytOLEtBQUs1TyxFQUFFeU0sTUFBTSxHQUFHek0sRUFBRXlNLE1BQU0sSUFBSSxPQUFPM04sRUFBRTRRLFVBQVU3TyxFQUFFNk8sVUFBVXBPLEdBQUd0QixFQUFFVSxVQUFVMjlCLFNBQVMsU0FBU3IrQixFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUyTCxNQUFNN00sRUFBRVcsRUFBRUEsRUFBRTZCLE9BQU8sR0FBRzdDLEVBQUU4NkIsR0FBR3I2QixFQUFFYyxHQUFHTyxFQUFFOUIsRUFBRSxHQUFHVCxFQUFFUyxFQUFFLEdBQUdzQixFQUFFdEIsRUFBRSxHQUFHK0IsRUFBRS9CLEVBQUUsR0FBR1IsRUFBRStCLEVBQUU2TixRQUFRLENBQUM3UCxFQUFFYyxJQUFJVCxFQUFFYSxFQUFFMk8sUUFBUSxDQUFDM08sRUFBRXdNLEtBQUszTCxFQUFFQSxJQUFJa0UsRUFBRSxJQUFJc21DLEdBQUd6ckMsRUFBRTBCLEVBQUUsQ0FBQ3hDLEVBQUUrQixJQUFJLE9BQU9LLEtBQUt1NEMsY0FBYzEwQyxFQUFFLENBQUM1RixFQUFFSixJQUFJNFAsUUFBUXROLElBQUlyQixFQUFFVSxVQUFVNlAsS0FBSyxTQUFTdlEsRUFBRWMsRUFBRVAsR0FBRyxHQUFHLFlBQVlBLEVBQUVBLEdBQUdvSCxFQUFFN0csSUFBSSxDQUFDLElBQUlsQixFQUFFbUgsRUFBRXhHLEVBQUU4RSxFQUFFckYsSUFBSSxPQUFPSixFQUFFMlEsS0FBS3pQLEdBQUc2TSxHQUFHQyxLQUFLNU4sRUFBRSxDQUFDcU4sT0FBT3pOLEdBQUdXLEdBQUcsSUFBSWhCLEVBQUUsSUFBSXlyQyxHQUFHaHJDLEVBQUVjLEdBQUdPLEVBQUU5QixFQUFFbXBDLG1CQUFtQjVuQyxHQUFHaEMsRUFBRW9DLEtBQUsyNUMsZ0JBQWdCNzZDLEVBQUVPLEdBQUcsT0FBT1csS0FBS3U0QyxjQUFjbDZDLEVBQUUsR0FBR1QsRUFBRXVDLElBQUlyQixFQUFFVSxVQUFVMlUsU0FBUyxTQUFTclYsR0FBRyxHQUFHLFdBQVdBLEVBQUVtTSxNQUFNLE1BQU0sSUFBSTFJLE1BQU0sZ0RBQWdELE9BQU92QyxLQUFLcVAsS0FBS3ZRLEVBQUV5TSxNQUFNLEVBQUV6TSxFQUFFbU0sUUFBUW5NLEVBQUVVLFVBQVUwVSxVQUFVLFNBQVNwVixHQUFHLE9BQU9rQixLQUFLcVAsS0FBS3ZRLEVBQUV5TSxNQUFNLFdBQVd6TSxFQUFFbU0sTUFBTSxHQUFHLEVBQUVuTSxFQUFFbU0sUUFBUW5NLEVBQUVVLFVBQVV1eEIsU0FBUyxTQUFTanlCLEVBQUVjLEVBQUVQLEdBQUcsT0FBTzJoQyxHQUFHbGlDLEVBQUVjLEVBQUVQLElBQUlQLEVBQUVVLFVBQVVtNkMsZ0JBQWdCLFNBQVM3NkMsRUFBRWMsR0FBRyxPQUFPNk0sR0FBR0MsS0FBSzVOLEVBQUUsR0FBR2MsRUFBRUksT0FBT2xCLEVBQUVVLFVBQVU4NEMsaUJBQWlCLFNBQVN4NUMsRUFBRWMsR0FBRyxJQUFJUCxFQUFFb04sR0FBR0MsS0FBSzVOLEVBQUUsR0FBR2MsRUFBRUksTUFBTSxPQUFPQSxLQUFLa3lDLFFBQVF6ekMsSUFBSVksRUFBRTJOLFFBQVFvNUIsVUFBUyxFQUFHL21DLEdBQUdQLEVBQUVVLFVBQVVpN0MsYUFBYSxTQUFTMzdDLEdBQUcsSUFBSWMsRUFBRSxJQUFJNjJDLEdBQUczM0MsRUFBRXlNLE9BQU8sT0FBT3ZMLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEdBQUcyTixHQUFHQyxLQUFLOU0sRUFBRTRkLFlBQVksR0FBRzFlLEVBQUVtTSxNQUFNakwsUUFBUWxCLEVBQUVVLFVBQVVrN0MsV0FBVyxTQUFTNTdDLEdBQUcsSUFBSWMsRUFBRSxJQUFJa3pDLEdBQUdoMEMsRUFBRXlNLE9BQU8sT0FBT3ZMLEtBQUt1NEMsY0FBYzM0QyxFQUFFLENBQUNkLEdBQUdrQixLQUFLczRDLGlCQUFpQng1QyxFQUFFeU0sTUFBTXpNLEVBQUVtTSxPQUFPLE1BQUssSUFBS25NLEVBQUVVLFVBQVUrNkMsY0FBYyxTQUFTejdDLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRTJPLFFBQVEsQ0FBQ29iLEdBQUcvcEIsRUFBRXlNLFFBQVFwRyxPQUFPMmpCLEdBQUdocUIsRUFBRXlNLFNBQVM3TSxFQUFFLENBQUNtcUIsR0FBR2pwQixJQUFJdUYsT0FBTzJqQixHQUFHbHBCLElBQUl2QixFQUFFLElBQUkrMEMsR0FBRzEwQyxFQUFFVyxFQUFFa00sT0FBTyxPQUFPdkwsS0FBS3U0QyxjQUFjbDZDLEVBQUUsQ0FBQ2dCLElBQUlvTyxRQUFRN04sSUFBSWQsRUFBRVUsVUFBVW1JLE9BQU8sU0FBUzdJLEdBQUcsSUFBSWMsRUFBRVAsRUFBRVcsS0FBS2t5QyxRQUFRenpDLElBQUlLLEdBQUdKLEVBQUVXLEVBQUUrbUMsU0FBUy9uQyxFQUFFZ0IsRUFBRWtNLE1BQU1wTCxFQUFFZCxFQUFFNEwsTUFBTXJOLEVBQUVtckIsR0FBRzFxQixHQUFHc0IsRUFBRWdpQixHQUFHdGpCLEdBQUcrQixFQUFFSixLQUFLbTRDLGlCQUFpQjk1QyxFQUFFLFdBQVcsT0FBTzJCLEtBQUtreUMsUUFBUXp6QyxJQUFJMkIsRUFBRTRNLFFBQVFvNUIsVUFBUyxFQUFHcG1DLEtBQUtreUMsUUFBUXp6QyxJQUFJMkIsRUFBRTRNLFFBQVEvQixNQUFNOUssRUFBRUgsS0FBS2t5QyxRQUFRenpDLElBQUkyQixFQUFFNE0sUUFBUXk0QixTQUFTOWxDLEVBQUV1RixLQUFJLFNBQVNwRyxHQUFHLE9BQU8sRUFBRUEsS0FBSWMsRUFBRWxCLEVBQUUsSUFBSXNxQyxHQUFHcHJDLEVBQUUrQixHQUFHLElBQUlvcEMsR0FBR25yQyxFQUFFK0IsR0FBR0ssS0FBS3U0QyxjQUFjMzRDLEVBQUUsQ0FBQyxDQUFDMkwsTUFBTTNOLEVBQUVxTixNQUFNOUssRUFBRTZNLE9BQU9sTyxJQUFJc0IsRUFBRSxNQUFLLEdBQUlBLEdBQUd0QixFQUFFVSxVQUFVKzRDLGNBQWMsU0FBU3o1QyxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHLElBQUk4QixFQUFFSCxLQUFLLFFBQUcsSUFBUzNCLElBQUlBLEdBQUUsR0FBSSxNQUFNZ0IsSUFBSUEsRUFBRVAsRUFBRWdsQyxtQkFBbUI5akMsS0FBS3M0QyxpQkFBaUJ4NUMsRUFBRTBlLFlBQVk1ZCxFQUFFLEdBQUdxTCxPQUFPakwsS0FBSzI1QyxnQkFBZ0I3NkMsRUFBRTBlLFlBQVk1ZCxFQUFFLEdBQUdxTCxRQUFRLElBQUk1TCxFQUFFaU0sS0FBSyxPQUFPdEwsS0FBS2t5QyxRQUFRenpDLElBQUlZLEVBQUUyTixRQUFRYixPQUFPMUcsRUFBRXBHLEVBQUU0TCxNQUFNLEdBQUc1TCxFQUFFLElBQUlNLEVBQUVDLEVBQUVzRixLQUFJLFNBQVN0RixHQUFHLEdBQUcsY0FBY0EsRUFBRXFMLE1BQU0sTUFBTSxJQUFJMUksTUFBTSxtSUFBbUksSUFBSWxELEVBQUVjLEVBQUUreEMsUUFBUXp6QyxJQUFJbUIsRUFBRW9OLFFBQVEsR0FBRyxNQUFNM04sRUFBRXc1QyxRQUFRLENBQUMsSUFBSS81QyxFQUFFZ2xDLG9CQUFvQjMvQixFQUFFdkUsRUFBRTJMLFFBQVEzTixFQUFFdUUsVUFBVSw2QkFBNkIsTUFBTSxDQUFDb0osTUFBTTNMLEVBQUUyTCxNQUFNMm1DLFFBQVEsS0FBSzdNLFdBQVUsRUFBR3NWLGNBQWN0N0MsRUFBRThNLFFBQVFyTixFQUFFZ2xDLHFCQUFxQnprQyxFQUFFK21DLFVBQVMsRUFBRy9tQyxFQUFFa00sTUFBTTNMLEVBQUUyTCxZQUFZLEtBQUtsTSxFQUFFK21DLFlBQVl0bkMsRUFBRWdsQyxtQkFBbUJsa0MsRUFBRVAsRUFBRSttQyxTQUFTam1DLEVBQUVzNkMsYUFBYTc2QyxHQUFHTyxFQUFFdTZDLFdBQVc5NkMsR0FBR1AsRUFBRWMsRUFBRSt4QyxRQUFRenpDLElBQUltQixFQUFFb04sYUFBYSxHQUFHM04sRUFBRSttQyxXQUFXbGQsR0FBRzdwQixFQUFFa00sTUFBTTNMLEVBQUUyTCxPQUFPLENBQUMsSUFBSTdNLEVBQUVrQixFQUFFdkIsRUFBRXVCLEVBQUUyTCxNQUFNM0wsRUFBRTJMLE1BQU1sTSxFQUFFa00sTUFBTTNMLEVBQUVPLEVBQUVvNkMsY0FBYzM2QyxFQUFFdkIsR0FBR2dCLEVBQUVjLEVBQUUreEMsUUFBUXp6QyxJQUFJbUIsRUFBRW9OLFFBQVF0TyxFQUFFNk0sTUFBTWxOLEVBQUUsT0FBTzhCLEVBQUVrNUMsWUFBWXo1QyxFQUFFb04sUUFBUSxDQUFDekIsTUFBTTNMLEVBQUUyTCxNQUFNMm1DLFFBQVE3eUMsRUFBRWdtQyxXQUFVLE1BQU1ybEMsS0FBS3E1QyxZQUFZaDZDLEVBQUUyTixRQUFRLElBQUk1TSxFQUFFdkMsRUFBRSxDQUFDME4sTUFBTWxNLEVBQUVrTSxNQUFNMm1DLFFBQVFseUMsS0FBS2t5QyxRQUFRenpDLElBQUlZLEVBQUUyTixRQUFRcTRCLFdBQVUsR0FBSXBuQyxFQUFFLFNBQVNhLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRSxHQUFHa0IsRUFBRXVGLE9BQU85RixHQUFHMEQsU0FBUSxTQUFTakUsR0FBRyxJQUFJYyxFQUFFLE1BQU1kLEVBQUVvekMsU0FBUyxNQUFNcHpDLEVBQUVvekMsUUFBUWx0QyxPQUFPbEcsRUFBRW96QyxRQUFRbHRDLE1BQU0rZ0MsV0FBVyxFQUFFMW1DLEVBQUVQLEVBQUV1bUMsVUFBVSxVQUFVdm1DLEVBQUVvekMsUUFBUXpNLFNBQVMvbUMsR0FBR0ksRUFBRXlNLE1BQU0sSUFBSWxNLEVBQUUsSUFBSU8sS0FBSSxJQUFJdkIsRUFBRVMsRUFBRThrQyxTQUE4QixPQUFuQjlrQyxFQUFFbUIsWUFBWTlCLEtBQWUsSUFBSU8sRUFBRSxJQUFJTCxFQUFsUSxDQUFxUVMsRUFBRWEsRUFBRTlCLEdBQUdnRyxFQUFFN0QsS0FBSzQ2QyxpQkFBaUIzOEMsR0FBRSxXQUFXLE9BQU8sU0FBU2EsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFdUIsRUFBRWdrQyxTQUFTempDLEVBQUVkLEVBQUU2RixLQUFJLFNBQVNwRyxFQUFFTyxHQUFHLElBQUlYLEVBQUUsQ0FBQzBtQyxhQUFhdG1DLEVBQUV5TSxNQUFNazZCLFNBQVMzbUMsRUFBRXVtQyxVQUFVLEtBQUt2bUMsRUFBRW96QyxRQUFRek0sU0FBU0osVUFBVXZtQyxFQUFFdW1DLFVBQVVlLFVBQVV0bkMsRUFBRXVtQyxXQUFXdm1DLEVBQUVvekMsUUFBUTlMLFNBQVNMLFdBQVcsTUFBTSxPQUFPLE1BQU1qbkMsRUFBRW96QyxTQUFTLE1BQU1wekMsRUFBRW96QyxRQUFRbHRDLE9BQU9sRyxFQUFFb3pDLFFBQVFsdEMsTUFBTStnQyxXQUFXLElBQUlybkMsRUFBRXFuQyxXQUFXam5DLEVBQUVvekMsUUFBUWx0QyxNQUFNK2dDLFlBQVksQ0FBQzVuQyxLQUFLeUIsRUFBRStqQyxjQUFjdGtDLEdBQUc4bEMsVUFBVXptQyxNQUFLaUIsRUFBRVEsRUFBRStFLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRXFtQyxhQUFZL2tDLEVBQUUsQ0FBQ2dsQyxhQUFhMW1DLEVBQUU2TSxNQUFNazZCLFNBQVMvbUMsRUFBRXd6QyxRQUFRek0sU0FBU0osV0FBVSxFQUFHZSxTQUFTMW5DLEVBQUV3ekMsUUFBUTlMLFNBQVNMLFdBQVcsTUFBTWxvQyxFQUFFcW5DLEdBQUcva0MsRUFBRUMsRUFBRS9CLEVBQUV1QixFQUFFa2tDLG9CQUFvQjdsQyxFQUFFYSxFQUFFMm1CLGNBQWM1bkIsR0FBR2dHLEVBQUUsS0FBS25FLEVBQUVaLEVBQUU0b0IsbUJBQW1CenBCLEVBQUUsT0FBTSxHQUFJLElBQUlMLEVBQUV1RSxVQUFVLG1CQUFtQjBCLEVBQUUvRSxFQUFFNG9CLG1CQUFtQnpwQixFQUFFLFlBQVcsSUFBSyxJQUFJLElBQUk2RixFQUFFLEdBQUc1RixFQUFFLEVBQUVBLEVBQUUwQixFQUFFK2pDLGNBQWN6aUMsT0FBT2hELElBQUksQ0FBQyxJQUFJOEYsRUFBRXBFLEVBQUUrakMsY0FBY3psQyxHQUFHNEYsRUFBRUUsR0FBR2xGLEVBQUU0b0IsbUJBQW1CenBCLEVBQUUrRixHQUFFLEdBQUlGLEVBQUUsU0FBU0UsR0FBR2xGLEVBQUU0b0IsbUJBQW1CenBCLEVBQUUsU0FBUytGLEdBQUUsR0FBSSxNQUFNLENBQUNxcEMsUUFBUXp0QyxFQUFFaTdDLE9BQU9oOUMsRUFBRWk5QyxhQUFhNzhDLEVBQUU4OEMsaUJBQWlCajNDLEVBQUVrM0MsYUFBYXI3QyxFQUFFczdDLGFBQWE3NkMsRUFBRTg2QyxPQUFPcjNDLEVBQUVzM0MsT0FBT3o3QyxHQUE3N0IsQ0FBaThCUyxFQUFFbzBDLE1BQU16MUMsRUFBRWEsRUFBRTlCLE1BQUs2QixFQUFFLE1BQU1NLEtBQUsyNEMsYUFBYSxPQUFPajVDLElBQUlVLEVBQUVKLEtBQUsrNEMsY0FBYyxTQUFTajZDLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUc0ekMsR0FBR3J5QyxFQUFFbzdDLGFBQWEzN0MsR0FBRzR5QyxHQUFHLENBQUNyeUMsRUFBRXE3QyxjQUFjLENBQUN2OEMsSUFBSSxJQUFJeUIsRUFBRXpCLEVBQUV3ekMsUUFBUTJHLFFBQVFsNUMsRUFBRWpCLEVBQUV3ekMsUUFBUXpNLFNBQVMvbUMsRUFBRXd6QyxRQUFROUwsU0FBU3RuQyxFQUFFa3hDLDZCQUE2Qjd2QyxFQUFFUixFQUFFLEdBQUdBLEVBQUUsSUFBSWIsRUFBRWd4Qyx1QkFBdUIzdkMsRUFBRVIsRUFBRSxHQUFHQSxFQUFFLElBQUliLEVBQUUwd0MsV0FBVzV2QyxFQUFFazdDLGNBQWMsSUFBSWw5QyxFQUFFdUUsVUFBVSxrQkFBa0IsT0FBT3ZDLEVBQUVzN0MsUUFBUXA4QyxFQUFFOG9DLEdBQUdDLFVBQVVqb0MsRUFBRXM3QyxPQUFPLEtBQUssT0FBT3Q3QyxFQUFFdTdDLFFBQVFyOEMsRUFBRThvQyxHQUFHQyxVQUFVam9DLEVBQUV1N0MsT0FBTzdtQixLQUFLajFCLEVBQUUwRCxTQUFRLFNBQVMxRCxFQUFFWCxHQUFHLElBQUlMLEVBQUV1QixFQUFFeXRDLFFBQVExSixjQUFjamxDLEdBQUd5QixFQUFFUCxFQUFFbTdDLGlCQUFpQjE4QyxHQUFHVCxFQUFFZ0MsRUFBRW03QyxpQkFBaUIsU0FBUzE4QyxHQUFHLEdBQUcsTUFBTThCLEVBQUUsR0FBR2QsRUFBRWdtQyxVQUFVLEdBQUdsaEMsRUFBRTlFLEVBQUVrTSxPQUFPLEVBQUV6TSxFQUFFOG9DLEdBQUdDLFVBQVUxbkMsRUFBRWQsRUFBRXM3QyxjQUFjLFFBQVEsQ0FBQyxJQUFJaDdDLEVBQUVOLEVBQUVzN0MsY0FBY2g3QyxhQUFhK0YsZUFBZS9GLEVBQUUsSUFBSStGLGFBQWEvRixJQUFJYixFQUFFOG9DLEdBQUd3VCxXQUFXajdDLEVBQUVSLFFBQVEsTUFBTU4sRUFBRTZ5QyxRQUFRbHRDLE9BQU8sTUFBTXBILEdBQUdrQixFQUFFOG9DLEdBQUcvZixVQUFVanFCLEVBQUV5QixFQUFFNnlDLFFBQVFsdEMsTUFBTStnQyxZQUFZam5DLEVBQUU4d0Msc0JBQXNCdndDLEVBQUU2eUMsUUFBUTJHLFFBQVExNEMsRUFBRXpCLE1BQUssTUFBTUwsR0FBR0EsRUFBRVMsRUFBRWMsRUFBRWs3QyxjQUFjaDhDLEVBQUV1eEMsaUJBQXJ6QixDQUF1MEJyd0MsS0FBS3UwQyxNQUFNMXdDLEVBQUVsRSxFQUFFOUIsRUFBRWEsR0FBR2dCLElBQUlVLEVBQUVKLEtBQUtrNUMsU0FBUzk0QyxHQUFHSixLQUFLMjRDLGFBQWF4M0MsS0FBSyxDQUFDaEQsS0FBS1csRUFBRW1CLFlBQVk5QixLQUFLaXhDLE1BQU1wdkMsS0FBS294QyxhQUFhaHhDLE9BQU94QyxFQUFFd0UsUUFBUSx3QkFBd0JwQyxLQUFLa3lDLFFBQVF6ekMsSUFBSVksRUFBRTJOLFFBQVFvNUIsV0FBVSxJQUFLL25DLEVBQUUyQixLQUFLeTZDLGFBQWFwN0MsR0FBR0EsR0FBR1AsRUFBRVUsVUFBVW83QyxpQkFBaUIsU0FBUzk3QyxFQUFFYyxHQUFHLE9BQU9kLEtBQUtrQixLQUFLczNDLGNBQWN0M0MsS0FBS3MzQyxZQUFZeDRDLEdBQUdjLEtBQUtJLEtBQUtzM0MsWUFBWXg0QyxJQUFJQSxFQUFFVSxVQUFVNjdDLGtCQUFrQixXQUFXLE9BQU9yN0MsS0FBS3czQyxnQkFBZ0IxNEMsRUFBRVUsVUFBVWdQLFFBQVEsV0FBV3hPLEtBQUtzdEMsV0FBV3R0QyxLQUFLdzNDLGVBQWVocEMsVUFBVSxNQUFNeE8sS0FBS3NyQixRQUFRLE1BQU10ckIsS0FBS3NyQixPQUFPZ3dCLE9BQU90N0MsS0FBS3NyQixPQUFPZ3dCLFNBQVN0N0MsS0FBS3NyQixPQUFPLEtBQUssTUFBTXRyQixLQUFLaTRDLHFCQUFxQmo0QyxLQUFLaTRDLG9CQUFvQjNzQixPQUFPZ3dCLFFBQVF0N0MsS0FBS2k0QyxvQkFBb0Izc0IsT0FBT2d3QixTQUFTdDdDLEtBQUt1M0Msc0JBQXNCdjNDLEtBQUt1MEMsTUFBTWxILFFBQVEsS0FBS3J0QyxLQUFLdTBDLE1BQU0vbEMsV0FBV3hPLEtBQUtzdEMsVUFBUyxJQUFLeHVDLEVBQUVVLFVBQVUyN0IsZUFBZSxXQUFXLElBQUlyOEIsRUFBRWtCLEtBQUssT0FBTyxNQUFNQSxLQUFLdTdDLHNCQUFzQnY3QyxLQUFLdTdDLG9CQUFvQm51QixJQUFHLFdBQVcsSUFBSXh2QixFQUFFYSxJQUFJLGdDQUFnQyxDQUFDLElBQUltQixFQUFFaEMsRUFBRXdFLFFBQVEsU0FBU3hFLEVBQUVxRSxJQUFJLFNBQVEsR0FBSSxJQUFJNUMsRUFBRVAsRUFBRTBVLElBQUk0YyxHQUFHLE9BQU9saUIsV0FBVyxHQUFHLEdBQUd0USxFQUFFcUUsSUFBSSxRQUFRckMsR0FBR1AsRUFBRSxFQUFFLE9BQU8sR0FBRyxPQUFPLE9BQU1XLEtBQUt1N0MscUJBQXFCejhDLEVBQUVVLFVBQVU0N0IsUUFBUSxXQUFXLE9BQU8sS0FBS3A3QixLQUFLbTdCLGlCQUFpQixLQUFLLE1BQU1yOEIsRUFBRVUsVUFBVTY1QyxZQUFZLFNBQVN2NkMsR0FBRyxJQUFJYyxFQUFFUCxFQUFFVyxLQUFLa3lDLFFBQVF6ekMsSUFBSUssR0FBR0osRUFBRVcsRUFBRWtNLE1BQU1sTixFQUFFZ0IsRUFBRTRMLE1BQU05SyxFQUFFZCxFQUFFOE0sT0FBT3ZPLEVBQUV5QixFQUFFdzVDLFFBQVFsNUMsRUFBRU4sRUFBRSs0QyxNQUFNaDRDLEVBQUVmLEVBQUUrbUMsU0FBUyxHQUFHLE1BQU14b0MsRUFBRSxDQUFDLElBQUlDLEVBQUVJLEVBQUUsTUFBTStCLEtBQUsyNEMsYUFBYTE2QyxJQUFJSixFQUFFc0osS0FBSyxJQUFJdEQsRUFBRXhFLEVBQUVvbUMsU0FBUyxHQUFHLE1BQU01aEMsSUFBSUEsRUFBRW1sQixHQUFHdHFCLEVBQUUwQixHQUFHZixFQUFFb21DLFNBQVM1aEMsR0FBRyxNQUFNMUQsRUFBRSxDQUFDLElBQUlULEVBQUVxcEIsR0FBR3JxQixHQUFHb0YsT0FBRSxFQUFPNUYsRUFBRTJGLEVBQUUsR0FBR0csRUFBRUgsRUFBRSxHQUFHN0YsRUFBRW1DLGFBQWF5RixXQUFXeEYsR0FBR2xDLEdBQUcwQixFQUFFZ2lCLEdBQUcvZCxFQUFFLEdBQUdBLEVBQUUsS0FBSyxHQUFHRyxFQUFFcEUsRUFBRSxHQUFHa0UsRUFBRSxJQUFJOGxDLEdBQUdscUMsRUFBRSxDQUFDc0UsRUFBRTlGLEdBQUdGLElBQUk4RixFQUFFLElBQUk2bEMsR0FBR2pxQyxFQUFFLENBQUNzRSxFQUFFOUYsR0FBR0YsR0FBRyxJQUFJK0YsRUFBRS9ELEtBQUttNEMsaUJBQWlCLENBQUNuMEMsRUFBRTlGLEdBQUdHLEdBQUcyQixLQUFLa3lDLFFBQVF6ekMsSUFBSXNGLEVBQUVpSixRQUFRb3JDLE1BQU1wNkMsRUFBRTBoQixHQUFHNkQsT0FBTzdELEdBQUc0RCxPQUFPdGpCLEtBQUt1MEMsTUFBTTNILDJCQUEyQjVzQyxLQUFLcTRDLFdBQVd0MEMsRUFBRWlKLFFBQVE5TyxFQUFFOEYsRUFBRTdELEdBQUcsSUFBSWlFLEVBQUVwRSxLQUFLbTRDLGlCQUFpQnIwQyxFQUFFMFosWUFBWXpaLEVBQUVrSCxPQUFPN0csRUFBRWtILEtBQUtuSCxFQUFFTCxFQUFFMFosYUFBYXhkLEtBQUtreUMsUUFBUXp6QyxJQUFJMkYsRUFBRTRJLFFBQVFvNUIsU0FBU2htQyxFQUFFSixLQUFLdTRDLGNBQWN6MEMsRUFBRSxDQUFDQyxHQUFHSyxHQUFHLElBQUlDLEVBQUVyRSxLQUFLa3lDLFFBQVF6ekMsSUFBSTJGLEVBQUU0SSxRQUFRM04sRUFBRXc1QyxRQUFReDBDLEVBQUV3MEMsUUFBUXg1QyxFQUFFb21DLFNBQVNwaEMsRUFBRW9oQyxTQUFTcG1DLEVBQUUrbUMsU0FBUy9oQyxFQUFFK2hDLFNBQVMvbUMsRUFBRSs0QyxNQUFNL3pDLEVBQUUrekMsTUFBTXA0QyxLQUFLNGQsWUFBWTdaLEVBQUVpSixRQUFRaE4sS0FBS2t5QyxRQUFRcjBCLE9BQU96WixFQUFFNEksUUFBUTNOLEVBQUU4TSxPQUFPLEtBQUtsTyxJQUFJK0IsS0FBS20zQyxjQUFjaHdDLElBQUl0SixPQUFPLENBQUMsSUFBSTJHLEVBQUV4RSxLQUFLNjBDLGVBQWVoeEMsRUFBRWxFLEVBQUV0QixFQUFFK0IsR0FBR2YsRUFBRXc1QyxRQUFRcjBDLEtBQUsxRixFQUFFVSxVQUFVazVDLHFCQUFxQixTQUFTNTVDLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVcsS0FBS2t5QyxRQUFRenpDLElBQUlLLEdBQUdKLEVBQUVXLEVBQUU0TCxNQUFNLE9BQU9qTCxLQUFLdzRDLGVBQWUxNUMsR0FBRyxNQUFNYyxJQUFJUCxFQUFFOE0sT0FBTyxTQUFTck4sRUFBRWMsR0FBRyxHQUFHLFlBQVlBLEdBQUcsY0FBY0EsRUFBRSxPQUFPZCxFQUFFLEdBQUcsVUFBVWMsR0FBRyxTQUFTQSxFQUFFLENBQUMsSUFBSSxJQUFJUCxFQUFFLFVBQVVPLEVBQUUsSUFBSStGLFdBQVc3RyxFQUFFb0MsUUFBUSxJQUFJMEUsV0FBVzlHLEVBQUVvQyxRQUFReEMsRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsU0FBU3hDLEVBQUVXLEVBQUVYLEdBQUcrRSxLQUFLcUQsTUFBTWhJLEVBQUVKLElBQUksT0FBT1csRUFBRSxNQUFNLElBQUlrRCxNQUFNLGlCQUFpQjNDLEdBQWhQLENBQW9QQSxFQUFFbEIsSUFBSVcsRUFBRThNLFFBQVFyTixFQUFFVSxVQUFVcTFDLGVBQWUsU0FBUy8xQyxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLEdBQUdzQixLQUFLazNDLGVBQWVsM0MsS0FBS281QyxhQUFhdDZDLEVBQUVPLElBQUlXLEtBQUtxM0MsbUJBQW1CcjNDLEtBQUtrM0MsY0FBYyxLQUFLbDNDLEtBQUt5M0MsbUJBQW1CLEtBQUssQ0FBQyxJQUFJcDVDLEdBQUcyQixLQUFLazNDLGNBQWMsS0FBSyxNQUFNbnJDLFFBQVEsR0FBRy9MLEtBQUtxM0MsbUJBQWtCLEVBQUcxMUMsUUFBUUMsS0FBSyw2QkFBNkJ2RCxFQUFFLHlDQUF5QyxPQUFPMkIsS0FBS3czQyxlQUFlM0MsZUFBZS8xQyxFQUFFYyxFQUFFbEIsSUFBSUksRUFBRVUsVUFBVTQ1QyxhQUFhLFNBQVN0NkMsRUFBRWMsR0FBRyxPQUFPZCxFQUFFLEdBQUdBLEVBQUUsR0FBR3FILEVBQUV2RyxJQUFJZCxFQUE1bm9ELEdBQWlvb0RtZ0IsTUFBTUwsR0FBR2pELGdCQUFnQixTQUFRLFdBQVcsT0FBTyxJQUFJazdCLEtBQUksR0FBRyxJQUFJMkUsR0FBR3ZzQixHQUFHLENBQUN3c0IsS0FBSyxTQUFTMzhDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxPQUFPLE1BQU0sY0FBY2MsRUFBRXFMLE1BQU0yVCxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFczlCLFdBQVd4OEIsS0FBSSxDQUFDd3hCLEdBQUd4eEIsSUFBSWdmLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUUwVSxJQUFJNVQsR0FBRyxPQUFPUCxFQUFFLENBQUNPLElBQUlsQixJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFbVMsSUFBSTVSLEVBQUVzUCxVQUFVcUcsTUFBTSxZQUFXMG1DLEdBQUd6c0IsR0FBRyxDQUFDMHNCLE1BQU0sU0FBUzc4QyxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksUUFBUSxPQUFPOGYsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVPLEdBQUcsSUFBSVgsRUFBRUksRUFBRTBWLEtBQUs1VSxHQUFHLE9BQU9QLEVBQUUsQ0FBQ08sSUFBSWxCLElBQUcsQ0FBQzB5QixHQUFHeHhCLElBQUcsU0FBU2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFTyxFQUFFLEdBQUcsTUFBTSxDQUFDd3hCLEdBQUcsV0FBVyxPQUFPdHlCLEVBQUV1UyxVQUFVK2UsR0FBRyxHQUFHdmYsSUFBSXhSLEVBQUVzUCxVQUFVMkUsVUFBVTVPLFFBQVFzTyxjQUFhNG9DLEdBQUczc0IsR0FBRyxDQUFDNHNCLE9BQU8sU0FBUy84QyxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksU0FBUyxPQUFPOGYsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVPLEdBQUcsSUFBSVgsRUFBRUksRUFBRStWLE1BQU1qVixHQUFHLE9BQU9QLEVBQUUsQ0FBQ08sSUFBSWxCLElBQUcsQ0FBQzB5QixHQUFHeHhCLElBQUcsU0FBU2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFTyxFQUFFLEdBQUcsTUFBTSxDQUFDd3hCLEdBQUcsV0FBVyxPQUFPdHlCLEVBQUV1UyxVQUFVaFMsRUFBRXNQLFVBQVUyRSxTQUFTekMsSUFBSSxHQUFHbk0sZ0JBQWVvM0MsR0FBRzdzQixHQUFHLENBQUM4c0IsTUFBTSxTQUFTajlDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFeVYsS0FBSzNVLEdBQUcsT0FBT1AsRUFBRSxDQUFDTyxJQUFJbEIsSUFBRyxDQUFDMHlCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRXVTLFVBQVUrZSxHQUFHLEdBQUd2ZixJQUFJeFIsRUFBRXNQLFVBQVUyRSxVQUFVNU8sZ0JBQWVzM0MsR0FBRy9zQixHQUFHLENBQUNndEIsT0FBTyxTQUFTbjlDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxTQUFTLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFOFYsTUFBTWhWLEdBQUcsT0FBT1AsRUFBRSxDQUFDTyxJQUFJbEIsSUFBRyxDQUFDMHlCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRXVTLFVBQVUrZSxHQUFHLEdBQUcxZixJQUFJclIsRUFBRXNQLFVBQVUyRSxVQUFVNU8sZ0JBQWV3M0MsR0FBR2p0QixHQUFHLENBQUNrdEIsTUFBTSxTQUFTcjlDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFMlYsS0FBSzdVLEdBQUcsT0FBT1AsRUFBRSxDQUFDTyxJQUFJbEIsSUFBRyxDQUFDMHlCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRXFTLElBQUk5UixFQUFFc1AsVUFBVTJFLFNBQVM1QyxJQUFJLFlBQVcwckMsR0FBR250QixHQUFHLENBQUNvdEIsT0FBTyxTQUFTdjlDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxTQUFTLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFZ1csTUFBTWxWLEdBQUcsT0FBT1AsRUFBRSxDQUFDTyxJQUFJbEIsSUFBRyxDQUFDMHlCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRXFTLElBQUlpZixHQUFHLEdBQUd2ZixJQUFJeFIsRUFBRXNQLFVBQVUyRSxtQkFBa0JncEMsR0FBR3J0QixHQUFHLENBQUNzdEIsTUFBTSxTQUFTejlDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFMkYsS0FBSzdFLEtBQUksQ0FBQ3d4QixHQUFHeHhCLElBQUcsU0FBU2QsR0FBRyxNQUFNLENBQUNzeUIsR0FBRyxXQUFXLE9BQU9ELEdBQUdyeUIsV0FBVTA5QyxHQUFHdnRCLEdBQUcsQ0FBQ3d0QixhQUFhLFNBQVMzOUMsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFMHZCLEdBQUd0dkIsRUFBRSxJQUFJLGVBQWUsT0FBT2dGLEVBQUVsRSxHQUFHUCxHQUFFLFdBQVcsTUFBTSx1QkFBdUJPLEVBQUUsd0NBQXdDUCxFQUFFLFFBQU91ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRVQsR0FBRyxJQUFJOEIsRUFBRXJCLEVBQUVxOUIsS0FBS3o5QixFQUFFa0IsRUFBRVAsR0FBRyxPQUFPaEIsRUFBRSxDQUFDSyxJQUFJeUIsSUFBRyxDQUFDaXhCLEdBQUcxeUIsSUFBRyxTQUFTSSxFQUFFSixHQUFHLElBQUlMLEVBQUVLLEVBQUUsR0FBRyxNQUFNLENBQUMweUIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRWlVLE1BQU0xVSxFQUFFb1UsYUFBYTdTLEdBQUcrUyxXQUFXdFUsRUFBRWdVLFVBQVVoVCxJQUFJOHhCLEdBQUdyeUIsWUFBVzQ5QyxHQUFHenRCLEdBQUcsQ0FBQzB0QixLQUFLLFNBQVM3OUMsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxJQUFJLE9BQU8sT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUV1VixJQUFJelUsR0FBRyxPQUFPUCxFQUFFLENBQUNPLElBQUlsQixJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBTy94QixFQUFFc1AsVUFBVXlGLE1BQU1wQixNQUFNL0IsSUFBSW5TLFdBQVU4OUMsR0FBRzN0QixHQUFHLENBQUM0dEIsTUFBTSxTQUFTLzlDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFNlYsS0FBSy9VLEdBQUcsT0FBT1AsRUFBRSxDQUFDTyxJQUFJbEIsSUFBRyxDQUFDMHlCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU8veEIsRUFBRXNQLFVBQVUrRixPQUFPeEQsVUFBVXBTLFdBQVVnK0MsR0FBRzd0QixHQUFHLENBQUM4dEIsS0FBSyxTQUFTaitDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxPQUFPLE9BQU9nRixFQUFFLFVBQVVsRSxFQUFFcUwsT0FBTyxZQUFZckwsRUFBRXFMLE9BQU0sV0FBVyxNQUFNLCtDQUE4QyxVQUFVckwsRUFBRXFMLFFBQVFyTCxFQUFFQSxFQUFFK08sV0FBV2lRLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUVpVyxJQUFJblYsR0FBRyxPQUFPUCxFQUFFLENBQUNPLElBQUlsQixJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFbVMsSUFBSTVSLEVBQUVpVSxTQUFTTixNQUFNek8sTUFBTTBNLElBQUksRUFBRXhOLEtBQUtpQixLQUFLakIsS0FBS3MvQixjQUFhaWEsR0FBRy90QixHQUFHLENBQUNndUIsS0FBSyxTQUFTbitDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxPQUFPLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFeUYsSUFBSTNFLEdBQUcsT0FBT1AsRUFBRSxDQUFDWCxJQUFJQSxJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsTUFBTSxDQUFDd3hCLEdBQUcsV0FBVyxPQUFPdHlCLEVBQUVvUyxVQUFVdFIsRUFBRSxZQUFXczlDLEdBQUdqdUIsR0FBRyxDQUFDa3VCLE9BQU8sU0FBU3IrQyxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksU0FBUyxPQUFPOGYsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVPLEdBQUcsSUFBSVgsRUFBRUksRUFBRXFVLE1BQU12VCxHQUFHLE9BQU9QLEVBQUUsQ0FBQ08sSUFBSWxCLElBQUcsQ0FBQzB5QixHQUFHeHhCLElBQUcsU0FBU2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFTyxFQUFFLEdBQUcsTUFBTSxDQUFDd3hCLEdBQUcsV0FBVyxPQUFPdHlCLEVBQUVtUyxJQUFJNVIsRUFBRWtGLGVBQWM2NEMsR0FBR251QixHQUFHLENBQUNvdUIsT0FBTyxTQUFTditDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxTQUFTLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFeU4sTUFBTTNNLEtBQUksQ0FBQ3d4QixHQUFHeHhCLElBQUcsU0FBU2QsR0FBRyxNQUFNLENBQUNzeUIsR0FBRyxXQUFXLE9BQU9ELEdBQUdyeUIsV0FBVXcrQyxHQUFHcnVCLEdBQUcsQ0FBQ3N1QixLQUFLLFNBQVN6K0MsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxJQUFJLE9BQU8sT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUUyTSxJQUFJN0wsR0FBRyxPQUFPUCxFQUFFLENBQUNPLElBQUlsQixJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFcVMsSUFBSTlSLEVBQUVzUCxtQkFBa0I2dUMsR0FBR3Z1QixHQUFHLENBQUN3dUIsT0FBTyxTQUFTMytDLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxTQUFTLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFc1UsTUFBTXhULEdBQUcsT0FBT1AsRUFBRSxDQUFDTyxJQUFJbEIsSUFBRyxDQUFDMHlCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRXFTLElBQUk5UixFQUFFcVIsSUFBSSxZQUFXZ3RDLEdBQUd6dUIsR0FBRyxDQUFDMHVCLFlBQVksU0FBUzcrQyxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksY0FBYyxPQUFPOGYsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVPLEdBQUcsSUFBSVgsRUFBRUksRUFBRW1WLFNBQVNyVSxFQUFFb1QsT0FBT0EsTUFBTSxPQUFPM1QsRUFBRSxDQUFDTyxJQUFJbEIsSUFBRyxDQUFDMHlCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRW1TLElBQUk1UixFQUFFMlQsTUFBTWUsbUJBQWtCNnBDLEdBQUczdUIsR0FBRyxDQUFDNHVCLEtBQUssU0FBUy8rQyxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksT0FBTyxPQUFPOGYsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRWtVLElBQUlwVCxLQUFJLENBQUN3eEIsR0FBR3h4QixJQUFHLFNBQVNkLEdBQUcsTUFBTSxDQUFDc3lCLEdBQUcsV0FBVyxPQUFPdHlCLEVBQUVrVSxjQUFhOHFDLEdBQUc3dUIsR0FBRyxDQUFDOHVCLFlBQVksU0FBU2ovQyxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksY0FBYyxPQUFPOGYsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVPLEdBQUcsSUFBSVgsRUFBRUksRUFBRXlVLFdBQVczVCxHQUFHLE9BQU9QLEVBQUUsQ0FBQ08sSUFBSWxCLElBQUcsQ0FBQzB5QixHQUFHeHhCLElBQUcsU0FBU2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFTyxFQUFFLEdBQUcsTUFBTSxDQUFDd3hCLEdBQUcsV0FBVyxPQUFPdHlCLEVBQUVxUyxJQUFJOVIsRUFBRWlVLFNBQVNOLGVBQWNnckMsR0FBRy91QixHQUFHLENBQUNndkIsT0FBTyxTQUFTbi9DLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxTQUFTLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFZ0ksTUFBTWxILEtBQUksQ0FBQ3d4QixHQUFHeHhCLElBQUcsU0FBU2QsR0FBRyxNQUFNLENBQUNzeUIsR0FBRyxXQUFXLE9BQU9ELEdBQUdyeUIsV0FBVW8vQyxHQUFHanZCLEdBQUcsQ0FBQ2t2QixPQUFPLFNBQVNyL0MsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxJQUFJLFNBQVMsT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUV1VSxNQUFNelQsR0FBRyxPQUFPUCxFQUFFLENBQUNPLElBQUlsQixJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFcVMsSUFBSTlSLEVBQUUwUixJQUFJLEtBQUtFLElBQUksSUFBSStCLGNBQWFvckMsR0FBR252QixHQUFHLENBQUNvdkIsU0FBUyxTQUFTdi9DLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxXQUFXLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFaVYsUUFBUW5VLEdBQUcsT0FBT1AsRUFBRSxDQUFDWCxJQUFJQSxJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFbVMsSUFBSTVSLEVBQUU0UixJQUFJbWYsR0FBRyxHQUFHdmYsSUFBSXhSLGFBQVlpL0MsR0FBR3J2QixHQUFHLENBQUNzdkIsTUFBTSxTQUFTei9DLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFbVUsS0FBS3JULEtBQUksQ0FBQ3d4QixHQUFHeHhCLElBQUcsU0FBU2QsR0FBRyxNQUFNLENBQUNzeUIsR0FBRyxXQUFXLE9BQU9ELEdBQUdyeUIsV0FBVTAvQyxHQUFHdnZCLEdBQUcsQ0FBQ3d2QixPQUFPLFNBQVMzL0MsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxJQUFJLFNBQVMsT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUVpSCxNQUFNbkcsS0FBSSxDQUFDd3hCLEdBQUd4eEIsSUFBRyxTQUFTZCxHQUFHLE1BQU0sQ0FBQ3N5QixHQUFHLFdBQVcsT0FBT0QsR0FBR3J5QixXQUFVNC9DLEdBQUd6dkIsR0FBRyxDQUFDMHZCLE9BQU8sU0FBUzcvQyxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksU0FBUyxPQUFPOGYsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRW9VLE1BQU10VCxLQUFJLENBQUN3eEIsR0FBR3h4QixJQUFHLFNBQVNkLEdBQUcsTUFBTSxDQUFDc3lCLEdBQUcsV0FBVyxPQUFPRCxHQUFHcnlCLFdBQVU4L0MsR0FBRzN2QixHQUFHLENBQUM0dkIsVUFBVSxTQUFTLy9DLEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxZQUFZLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFa0gsU0FBU3BHLEtBQUksQ0FBQ3d4QixHQUFHeHhCLElBQUcsU0FBU2QsR0FBRyxNQUFNLENBQUNzeUIsR0FBRyxXQUFXLE9BQU9ELEdBQUdyeUIsV0FBVWdnRCxHQUFHN3ZCLEdBQUcsQ0FBQzh2QixLQUFLLFNBQVNqZ0QsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxJQUFJLE9BQU8sT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUVzVixJQUFJeFUsR0FBRyxPQUFPUCxFQUFFLENBQUNPLElBQUlsQixJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBTy94QixFQUFFc1AsVUFBVTBGLE1BQU1wRCxJQUFJblMsV0FBVWtnRCxHQUFHL3ZCLEdBQUcsQ0FBQ2d3QixNQUFNLFNBQVNuZ0QsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxJQUFJLFFBQVEsT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUU0VixLQUFLOVUsR0FBRyxPQUFPUCxFQUFFLENBQUNPLElBQUlsQixJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBTy94QixFQUFFc1AsVUFBVWdHLE9BQU96RCxVQUFVcFMsV0FBVW9nRCxHQUFHandCLEdBQUcsQ0FBQ2t3QixVQUFVLFNBQVNyZ0QsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxJQUFJLFlBQVksT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUVtVixTQUFTclUsR0FBRyxPQUFPUCxFQUFFLENBQUNPLElBQUlsQixJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFbVMsSUFBSTVSLEVBQUUwVSxtQkFBa0JxckMsR0FBR253QixHQUFHLENBQUNvd0IsTUFBTSxTQUFTdmdELEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFNEYsS0FBSzlFLEdBQUcsT0FBT1AsRUFBRSxDQUFDTyxJQUFJbEIsSUFBRyxDQUFDMHlCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRXFTLElBQUk5UixFQUFFc1AsVUFBVWpLLE9BQU91TSxJQUFJLFlBQVdxdUMsR0FBR3J3QixHQUFHLENBQUNzd0IsUUFBUSxTQUFTemdELEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxVQUFVLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxPQUFPQSxFQUFFLENBQUNPLElBQUlkLEVBQUV3VSxPQUFPMVQsS0FBSSxDQUFDd3hCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRW1TLElBQUk1UixFQUFFc1AsVUFBVXNDLElBQUksWUFBV3V1QyxHQUFHdndCLEdBQUcsQ0FBQ3d3QixNQUFNLFNBQVMzZ0QsRUFBRWMsUUFBRyxJQUFTQSxJQUFJQSxFQUFFLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFa1csS0FBSzNWLEVBQUVPLEtBQUksQ0FBQ3d4QixHQUFHL3hCLElBQUcsU0FBU1AsR0FBRyxNQUFNLENBQUNzeUIsR0FBRyxXQUFXLE9BQU9ELEdBQUdyeUIsV0FBVTRnRCxHQUFHendCLEdBQUcsQ0FBQzB3QixLQUFLLFNBQVM3Z0QsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxJQUFJLE9BQU8sT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUV3VixJQUFJMVUsR0FBRyxPQUFPUCxFQUFFLENBQUNPLElBQUlsQixJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFcVMsSUFBSTlSLEVBQUVnVixNQUFNZixrQkFBaUJzc0MsR0FBRzN3QixHQUFHLENBQUM0d0IsTUFBTSxTQUFTL2dELEdBQUcsSUFBSWMsRUFBRXd1QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFd0YsS0FBSzFFLEdBQUcsT0FBT1AsRUFBRSxDQUFDWCxJQUFJQSxJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBT2hCLEdBQUcsR0FBR3ZmLElBQUl4UixFQUFFaVUsVUFBVXBDLFVBQVVwUyxXQUFVLFNBQVNnaEQsR0FBR2hoRCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxJQUFJdkMsRUFBRStCLEVBQUVTLEVBQUVndUIsR0FBR3R2QixFQUFFLElBQUksYUFBYWpCLEVBQUV1d0IsR0FBR3h1QixFQUFFLE9BQU8sYUFBYTNCLEVBQUVtd0IsR0FBRy91QixFQUFFLFdBQVcsYUFBYSxPQUFPLE1BQU1oQixJQUFJVCxFQUFFd3dCLEdBQUcvdkIsRUFBRSxRQUFRLGNBQWMsTUFBTUssSUFBSWlCLEVBQUV5dUIsR0FBRzF2QixFQUFFLFNBQVMsY0FBY29GLEVBQUUsSUFBSTFELEVBQUVpTCxNQUFLLFdBQVcsTUFBTSx1REFBdURqTCxFQUFFaUwsS0FBSyxPQUFNdkgsRUFBRSxJQUFJakcsRUFBRXdOLE1BQU0sSUFBSXhOLEVBQUV3TixNQUFLLFdBQVcsTUFBTSxvRUFBb0V4TixFQUFFd04sS0FBSyxPQUFNdkgsRUFBRSxJQUFJN0YsRUFBRW9OLE1BQU0sSUFBSXBOLEVBQUVvTixNQUFLLFdBQVcsTUFBTSx3RUFBd0VwTixFQUFFb04sS0FBSyxPQUFNLE1BQU16TixHQUFHa0csRUFBRSxJQUFJbEcsRUFBRXlOLE1BQU0sSUFBSXpOLEVBQUV5TixNQUFLLFdBQVcsTUFBTSxxRUFBcUV6TixFQUFFeU4sS0FBSyxPQUFNLE1BQU0xTCxHQUFHbUUsRUFBRSxJQUFJbkUsRUFBRTBMLE1BQU0sSUFBSTFMLEVBQUUwTCxNQUFLLFdBQVcsTUFBTSxzRUFBc0UxTCxFQUFFMEwsS0FBSyxPQUFNMDBDLEdBQUczL0MsRUFBRXZDLEVBQUVJLEVBQUUwQixFQUFFL0IsRUFBRXVDLEdBQUcsU0FBUzYvQyxHQUFHbGhELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixHQUFHLElBQUl2QyxFQUFFK0IsRUFBRVMsRUFBRWd1QixHQUFHdHZCLEVBQUUsSUFBSSxhQUFhakIsRUFBRXV3QixHQUFHeHVCLEVBQUUsT0FBTyxhQUFhM0IsRUFBRW13QixHQUFHL3VCLEVBQUUsV0FBVyxhQUFhLE9BQU8sTUFBTWhCLElBQUlULEVBQUV3d0IsR0FBRy92QixFQUFFLFFBQVEsY0FBYyxNQUFNSyxJQUFJaUIsRUFBRXl1QixHQUFHMXZCLEVBQUUsU0FBUyxjQUFjb0YsRUFBRSxJQUFJMUQsRUFBRWlMLE1BQUssV0FBVyxNQUFNLHVEQUF1RGpMLEVBQUVpTCxLQUFLLE9BQU12SCxFQUFFLElBQUlqRyxFQUFFd04sTUFBTSxJQUFJeE4sRUFBRXdOLE1BQUssV0FBVyxNQUFNLG9FQUFvRXhOLEVBQUV3TixLQUFLLE9BQU12SCxFQUFFLElBQUk3RixFQUFFb04sTUFBTSxJQUFJcE4sRUFBRW9OLE1BQUssV0FBVyxNQUFNLHdFQUF3RXBOLEVBQUVvTixLQUFLLE9BQU0sTUFBTXpOLEdBQUdrRyxFQUFFLElBQUlsRyxFQUFFeU4sTUFBTSxJQUFJek4sRUFBRXlOLE1BQUssV0FBVyxNQUFNLHFFQUFxRXpOLEVBQUV5TixLQUFLLE9BQU0sTUFBTTFMLEdBQUdtRSxFQUFFLElBQUluRSxFQUFFMEwsTUFBTSxJQUFJMUwsRUFBRTBMLE1BQUssV0FBVyxNQUFNLHNFQUFzRTFMLEVBQUUwTCxLQUFLLE9BQU0wMEMsR0FBRzMvQyxFQUFFdkMsRUFBRUksRUFBRTBCLEVBQUUvQixFQUFFdUMsR0FBRyxTQUFTOC9DLEdBQUduaEQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsSUFBSXZDLEVBQUUrQixFQUFFUyxFQUFFZ3VCLEdBQUd0dkIsRUFBRSxJQUFJLGFBQWFqQixFQUFFdXdCLEdBQUd4dUIsRUFBRSxPQUFPLGFBQWEzQixFQUFFbXdCLEdBQUcvdUIsRUFBRSxXQUFXLGFBQWEsT0FBTyxNQUFNaEIsSUFBSVQsRUFBRXd3QixHQUFHL3ZCLEVBQUUsUUFBUSxjQUFjLE1BQU1LLElBQUlpQixFQUFFeXVCLEdBQUcxdkIsRUFBRSxTQUFTLGNBQWNvRixFQUFFLElBQUkxRCxFQUFFaUwsTUFBSyxXQUFXLE1BQU0sdURBQXVEakwsRUFBRWlMLEtBQUssT0FBTXZILEVBQUUsSUFBSWpHLEVBQUV3TixNQUFNLElBQUl4TixFQUFFd04sTUFBSyxXQUFXLE1BQU0sb0VBQW9FeE4sRUFBRXdOLEtBQUssT0FBTXZILEVBQUUsSUFBSTdGLEVBQUVvTixNQUFNLElBQUlwTixFQUFFb04sTUFBSyxXQUFXLE1BQU0sd0VBQXdFcE4sRUFBRW9OLEtBQUssT0FBTSxNQUFNek4sR0FBR2tHLEVBQUUsSUFBSWxHLEVBQUV5TixNQUFNLElBQUl6TixFQUFFeU4sTUFBSyxXQUFXLE1BQU0scUVBQXFFek4sRUFBRXlOLEtBQUssT0FBTSxNQUFNMUwsR0FBR21FLEVBQUUsSUFBSW5FLEVBQUUwTCxNQUFNLElBQUkxTCxFQUFFMEwsTUFBSyxXQUFXLE1BQU0sc0VBQXNFMUwsRUFBRTBMLEtBQUssT0FBTTAwQyxHQUFHMy9DLEVBQUV2QyxFQUFFSSxFQUFFMEIsRUFBRS9CLEVBQUV1QyxHQUFHLFNBQVM0L0MsR0FBR2poRCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxNQUFNQSxJQUFJQSxFQUFFLE1BQU0sSUFBSXZDLEVBQUUrQixFQUFFUyxFQUFFdkMsRUFBRXV3QixHQUFHdHZCLEVBQUUsSUFBSSxhQUFhYixFQUFFbXdCLEdBQUd4dUIsRUFBRSxPQUFPLGFBQWFpRSxFQUFFdXFCLEdBQUcvdUIsRUFBRSxXQUFXLGFBQXdsQixPQUEza0IsTUFBTWhCLElBQUlULEVBQUV3d0IsR0FBRy92QixFQUFFLFFBQVEsY0FBYyxNQUFNSyxJQUFJaUIsRUFBRXl1QixHQUFHMXZCLEVBQUUsU0FBUyxjQUFjb0YsRUFBRTdGLEVBQUVvTixPQUFPeEgsRUFBRXdILE1BQUssV0FBVyxNQUFNLGtGQUFpRnZILEVBQUUsTUFBTW5FLEdBQUcxQixFQUFFb04sT0FBTzFMLEVBQUUwTCxNQUFLLFdBQVcsTUFBTSxnRkFBK0V2SCxFQUFFLE1BQU1sRyxHQUFHSyxFQUFFb04sT0FBT3pOLEVBQUV5TixNQUFLLFdBQVcsTUFBTSwrRUFBOEVqTCxFQUFFLElBQUl2QyxFQUFFd04sTUFBTSxJQUFJeE4sRUFBRXdOLEtBQUt4TixFQUFFK1AsS0FBSyxFQUFFLEVBQUUsRUFBRS9QLEVBQUV5TixNQUFNLElBQUl6TixFQUFFd04sS0FBS3hOLEVBQUUrUCxLQUFLLEVBQUUsRUFBRS9QLEVBQUUwTixNQUFNLEdBQUcxTixFQUFFME4sTUFBTSxJQUFJLElBQUkxTixFQUFFd04sS0FBS3hOLEVBQUUrUCxLQUFLLEVBQUUvUCxFQUFFME4sTUFBTSxHQUFHMU4sRUFBRTBOLE1BQU0sR0FBRzFOLEVBQUUwTixNQUFNLElBQUkxTixFQUFTK2dCLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVQLEVBQUVtUixtQkFBbUI3UCxFQUFFOC9DLEdBQUdqaUQsR0FBR2lpRCxHQUFHcjhDLEdBQUcxRCxFQUFFKy9DLEdBQUd0aUQsR0FBR3NpRCxHQUFHdmdELElBQUksT0FBT0MsRUFBRSxDQUFDL0IsRUFBRUksRUFBRTRGLEVBQUVqRyxJQUFJeUIsSUFBRyxDQUFDK3hCLEdBQUd2ekIsRUFBRXNpRCxNQUFNbGlELEVBQUVtaUQsVUFBVXY4QyxFQUFFdzhDLE9BQU96aUQsRUFBRTBpRCxRQUFRM2dELElBQUcsU0FBU2IsRUFBRWMsR0FBRyxJQUFJUCxFQUFFTyxFQUFFbEIsRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBR3pCLEVBQUV5QixFQUFFLEdBQUdNLEVBQUVOLEVBQUUsR0FBR3hCLEVBQUUsTUFBTThCLEVBQUV5d0IsR0FBRyxHQUFHendCLEVBQUUxQixFQUFFOC9CLEdBQUcxL0IsRUFBRWtOLE1BQU1uTCxFQUFFbUwsT0FBTzFILEVBQUUsR0FBRyxHQUFHLElBQUl4RixFQUFFZ04sS0FBSyxDQUFDLElBQUksSUFBSTNMLEVBQUUsRUFBRUEsRUFBRVUsRUFBRW1MLE1BQU1ySyxPQUFPLElBQUl4QixFQUFFbUUsRUFBRTFDLEtBQUtmLEVBQUVtTCxNQUFNN0wsSUFBSW1FLEVBQUUxQyxLQUFLLEdBQUcsSUFBSTJDLEVBQUVwRixFQUFFbVMsSUFBSXhTLEdBQUdILEVBQUVZLEVBQUVtUyxJQUFJcFQsR0FBR21HLEVBQUVrNkMsR0FBR3RnRCxFQUFFOFMsSUFBSTBmLEdBQUdqd0IsS0FBS25DLEVBQUVnRyxFQUFFaU4sSUFBSWpOLEdBQUdpTixJQUFJak4sR0FBR2lOLElBQUltZixJQUFJLEtBQUssTUFBTSxDQUFDZ0IsR0FBRyxXQUFXLE9BQU8sSUFBSS95QixFQUFFZ04sS0FBS3ZNLEVBQUVtUyxJQUFJc2xCLEdBQUd2eUIsRUFBRTRKLEtBQUssRUFBRSxFQUFFLEVBQUV2UCxFQUFFa04sTUFBTSxJQUFJMUgsSUFBSW9OLElBQUlwVCxHQUFHNFAsUUFBUS9PLEVBQUU2TSxPQUFPek0sRUFBRW1TLElBQUlqTixHQUFHaU4sSUFBSXBULEdBQUc0UCxRQUFRL08sRUFBRTZNLFFBQVE0MEMsTUFBTSxXQUFXLElBQUlyaEQsRUFBRWtGLEVBQUVpTixJQUFJbWYsSUFBSSxJQUFJbmYsSUFBSS9TLEdBQUcsT0FBTyxJQUFJRyxFQUFFZ04sT0FBT3ZNLEVBQUVBLEVBQUVrSixJQUFJL0osSUFBSWEsRUFBRTJPLFFBQVFwUCxFQUFFa04sUUFBUTYwQyxVQUFVLFdBQVcsSUFBSXRoRCxFQUFFZCxFQUFFaVQsSUFBSW5OLEdBQUdtTixJQUFJL1MsR0FBRyxPQUFPLElBQUlHLEVBQUVnTixPQUFPdk0sRUFBRUEsRUFBRWtKLElBQUkvSixJQUFJYSxFQUFFMk8sUUFBUXBQLEVBQUVrTixRQUFRODBDLE9BQU8sV0FBVyxJQUFJemdELEVBQUVrRSxFQUFFbU4sSUFBSWpOLEdBQUczRSxFQUFFUCxFQUFFbVMsSUFBSXJSLEdBQUcsT0FBTyxJQUFJdkIsRUFBRWdOLE9BQU9oTSxFQUFFQSxFQUFFMkksSUFBSS9KLElBQUlvQixFQUFFb08sUUFBUXBQLEVBQUVrTixRQUFRKzBDLFFBQVEsV0FBVyxJQUFJMWdELEVBQUVkLEVBQUUsT0FBTyxJQUFJVCxFQUFFZ04sT0FBT3pMLEVBQUVBLEVBQUVvSSxJQUFJL0osSUFBSTJCLEVBQUU2TixRQUFRcFAsRUFBRWtOLFlBQVdrQyxRQUFRNVAsRUFBRTBOLE9BQU8sU0FBUzIwQyxHQUFHcGhELEdBQUcsT0FBTyxNQUFNQSxFQUFFLEtBQUssSUFBSUEsRUFBRXVNLEtBQUt2TSxFQUFFeU8sT0FBTyxJQUFJek8sRUFBRXVNLEtBQUt2TSxFQUFFLElBQUlBLEVBQUV1TSxLQUFLdk0sRUFBRThPLEtBQUssRUFBRSxFQUFFOU8sRUFBRXlNLE1BQU0sR0FBR3pNLEVBQUV5TSxNQUFNLElBQUksSUFBSXpNLEVBQUV1TSxLQUFLdk0sRUFBRThPLEtBQUssRUFBRTlPLEVBQUV5TSxNQUFNLEdBQUd6TSxFQUFFeU0sTUFBTSxHQUFHek0sRUFBRXlNLE1BQU0sSUFBSXpNLEVBQUUsU0FBU3loRCxLQUFLdnpCLEdBQUcsb0pBQW9KLElBQUl3ekIsR0FBR3Z4QixHQUFHLENBQUN3eEIsc0JBQXNCLFNBQVMzaEQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsWUFBTyxJQUFTekIsSUFBSUEsRUFBRSxNQUFNNmhELEtBQUtULEdBQUdoaEQsRUFBRWMsRUFBRVAsRUFBRWMsRUFBRTlCLEVBQUVLLE1BQU1naUQsR0FBR3p4QixHQUFHLENBQUMweEIsc0JBQXNCLFNBQVM3aEQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsWUFBTyxJQUFTekIsSUFBSUEsRUFBRSxNQUFNNmhELEtBQUtQLEdBQUdsaEQsRUFBRWMsRUFBRVAsRUFBRWMsRUFBRTlCLEVBQUVLLE1BQU1raUQsR0FBRzN4QixHQUFHLENBQUM0eEIsc0JBQXNCLFNBQVMvaEQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsWUFBTyxJQUFTekIsSUFBSUEsRUFBRSxNQUFNNmhELEtBQUtOLEdBQUduaEQsRUFBRWMsRUFBRVAsRUFBRWMsRUFBRTlCLEVBQUVLLE1BQU1vaUQsR0FBRzd4QixHQUFHLENBQUM4eEIsb0JBQW9CLFNBQVNqaUQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsWUFBTyxJQUFTekIsSUFBSUEsRUFBRSxNQUFNNmhELEtBQUtSLEdBQUdqaEQsRUFBRWMsRUFBRVAsRUFBRWMsRUFBRTlCLEVBQUVLLE1BQU1zaUQsR0FBRy94QixHQUFHLENBQUNneUIsV0FBV2xCLEtBQUttQixHQUFHanlCLEdBQUcsQ0FBQ2t5QixhQUFhckIsS0FBS3NCLEdBQUdueUIsR0FBRyxDQUFDb3lCLGFBQWFyQixLQUFLc0IsR0FBR3J5QixHQUFHLENBQUNzeUIsYUFBYXRCLEtBQVN1QixHQUFHdnlCLEdBQUcsQ0FBQ3d5QixZQUFZLFNBQVMzaUQsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLGFBQWEsUUFBUUosRUFBRTB2QixHQUFHeHVCLEVBQUUsSUFBSSxhQUFhLFFBQVEsT0FBT28rQixHQUFHMytCLEVBQUVrTSxNQUFNN00sRUFBRTZNLE9BQU9xVCxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFNlQsV0FBV3RULEVBQUVYLEtBQUksQ0FBQzJyQyxHQUFHaHJDLEVBQUVxaUQsR0FBR2hqRCxPQUFPaWpELEdBQUcxeUIsR0FBRyxDQUFDMnlCLFlBQVksU0FBUzlpRCxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksYUFBYSxRQUFRLE9BQU84ZixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFK1QsV0FBV2pULEtBQUksQ0FBQ3d4QixHQUFHeHhCLE9BQU9paUQsR0FBRzV5QixHQUFHLENBQUM2eUIsV0FBVyxTQUFTaGpELEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsSUFBSSxZQUFZLFFBQVFKLEVBQUUwdkIsR0FBR3h1QixFQUFFLElBQUksWUFBWSxRQUFRLE9BQU9vK0IsR0FBRzMrQixFQUFFa00sTUFBTTdNLEVBQUU2TSxPQUFPcVQsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRThULFVBQVV2VCxFQUFFWCxLQUFJLENBQUMyckMsR0FBR2hyQyxFQUFFcWlELEdBQUdoakQsT0FBT3FqRCxHQUFHOXlCLEdBQUcsQ0FBQyt5QixZQUFZLFNBQVNsakQsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLGFBQWEsUUFBUUosRUFBRTB2QixHQUFHeHVCLEVBQUUsSUFBSSxhQUFhLFFBQVEsT0FBT28rQixHQUFHMytCLEVBQUVrTSxNQUFNN00sRUFBRTZNLE9BQU9zMkMsR0FBRy9pRCxFQUFFYyxHQUFHK1MsV0FBVzZ1QyxHQUFHMWlELEVBQUVjLEdBQUdpVCxpQkFBaUJvdkMsR0FBR2h6QixHQUFHLENBQUNpekIsT0FBTyxTQUFTcGpELEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRTB2QixHQUFHeHVCLEVBQUUsSUFBSSxTQUFTdkIsRUFBRSt2QixHQUFHL3VCLEVBQUUsSUFBSSxTQUFTYyxFQUFFaXVCLEdBQUd0dkIsRUFBRSxZQUFZLFFBQVEsUUFBUSxPQUFPWixFQUFFUSxFQUFFNk0sTUFBTWxOLEVBQUVrTixNQUFNLG9CQUFvQixJQUFJcEwsRUFBRWtMLEtBQUt2SCxFQUFFM0QsRUFBRW9MLE1BQU0sS0FBSzdNLEVBQUU2TSxNQUFNLElBQUcsV0FBVyxNQUFNLG9FQUFtRXJOLEVBQUVpQyxFQUFFb0wsTUFBTWxOLEVBQUVrTixNQUFNLG9CQUFvQnFULEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVQLEVBQUVrOUIsT0FBTzc3QixFQUFFekIsRUFBRUwsR0FBRyxPQUFPdUIsRUFBRSxDQUFDTyxJQUFJZCxJQUFHLENBQUM4aUQsV0FBV2hpRCxFQUFFa3FDLEdBQUczckMsRUFBRWdqRCxHQUFHcmpELElBQUcsU0FBU1MsRUFBRWMsR0FBRyxJQUFJUCxFQUFFTyxFQUFFLEdBQUcsTUFBTSxDQUFDdWlELFdBQVcsV0FBVyxPQUFPaHhCLEdBQUc5eEIsR0FBR3NQLFdBQVcwN0IsR0FBRyxXQUFXLE9BQU92ckMsRUFBRW1TLElBQUk1UixFQUFFME8sS0FBS2pQLEVBQUVtTSxTQUFTeTJDLEdBQUcsV0FBVyxPQUFPNWlELEVBQUVtUyxJQUFJNVIsRUFBRXdULGFBQWE5RSxLQUFLalAsRUFBRW1NLGdCQUFlbTNDLEdBQUcsU0FBU3RqRCxHQUFHLE9BQU9PLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSUosRUFBRVAsRUFBRWhCLEVBQUUsT0FBT0ssRUFBRXNCLE1BQUssU0FBU3RCLEdBQUcsT0FBT0EsRUFBRWdDLE9BQU8sS0FBSyxFQUFFLE1BQU0sQ0FBQyxHQUFHZCxFQUFFd3VCLEdBQUd0dkIsRUFBRSxZQUFZLGFBQWEsU0FBU2tNLFFBQVEsS0FBSyxFQUFFLE9BQU8zTCxFQUFFWCxFQUFFaUMsT0FBT3RDLEVBQUVvbEMsR0FBRzdqQyxFQUFFMkwsTUFBTWxNLEdBQUdQLElBQUljLEdBQUdBLEVBQUU0TyxVQUFVLENBQUMsRUFBRW5RLFdBQWFna0QsR0FBR3B6QixHQUFHLENBQUNxekIsS0FBSyxTQUFTeGpELEVBQUVjLEdBQUcsSUFBSVAsRUFBRVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxPQUFPVCxFQUFFK3ZCLEdBQUd4dUIsRUFBRSxJQUFJLE9BQU9QLEVBQUVrWixHQUFHN1osRUFBRUwsR0FBR0ssRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBRyxJQUFJYyxFQUFFNjlCLEdBQUd0L0IsRUFBRTZNLE1BQU1sTixFQUFFa04sT0FBTyxPQUFPcVQsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRTRSLElBQUloUyxFQUFFTCxLQUFJLENBQUNnc0MsR0FBRzNyQyxFQUFFZ2pELEdBQUdyakQsSUFBRyxTQUFTUyxHQUFHLE1BQU0sQ0FBQ3VyQyxHQUFHLFdBQVcsSUFBSXpxQyxFQUFFZCxFQUFFTyxFQUFFMCtCLEdBQUdyL0IsRUFBRTZNLE1BQU1wTCxHQUFHLE9BQU9kLEVBQUU2QixPQUFPLElBQUl0QixFQUFFQSxFQUFFb0ksSUFBSTNJLElBQUlPLEVBQUU2TixRQUFRL08sRUFBRTZNLFFBQVFtMkMsR0FBRyxXQUFXLElBQUk5aEQsRUFBRWQsRUFBRU8sRUFBRTArQixHQUFHMS9CLEVBQUVrTixNQUFNcEwsR0FBRyxPQUFPZCxFQUFFNkIsT0FBTyxJQUFJdEIsRUFBRUEsRUFBRW9JLElBQUkzSSxJQUFJTyxFQUFFNk4sUUFBUXBQLEVBQUVrTixlQUFjZzNDLEdBQUd0ekIsR0FBRyxDQUFDdXpCLE1BQU0sU0FBUzFqRCxHQUFHZ0YsRUFBRS9ELE1BQU1rRSxRQUFRbkYsSUFBRyxXQUFXLE1BQU0sZ0VBQStEZ0YsRUFBRWhGLEVBQUVvQyxRQUFRLEdBQUUsV0FBVyxNQUFNLHVEQUF1RHBDLEVBQUVvQyxVQUFTLElBQUl0QixFQUFFZCxFQUFFb0csS0FBSSxTQUFTcEcsRUFBRWMsR0FBRyxPQUFPd3VCLEdBQUd0dkIsRUFBRSxVQUFVYyxFQUFFLFdBQVVQLEVBQUVPLEVBQUUsR0FBR0EsRUFBRW1ELFNBQVEsU0FBU2pFLEdBQUcsR0FBR0EsRUFBRW1NLFFBQVE1TCxFQUFFNEwsTUFBTSxNQUFNLElBQUkxSSxNQUFNLCtEQUE4RDNDLEVBQUVtRCxTQUFRLFNBQVNqRSxHQUFHLElBQUlpRixFQUFFakYsRUFBRXlNLE1BQU1sTSxFQUFFa00sT0FBTyxNQUFNLElBQUloSixNQUFNLCtEQUE4RCxJQUFJN0QsRUFBRWtCLEVBQUUsT0FBT2dmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUU4OEIsS0FBS2g4QixLQUFJbEIsR0FBRSxTQUFTSSxHQUFHLElBQUlPLEVBQUUsR0FBRyxPQUFPTyxFQUFFbUQsU0FBUSxTQUFTbkQsRUFBRWxCLEdBQUdXLEVBQUVYLEdBQUcsV0FBVyxPQUFPSSxFQUFFcVEsWUFBVzlQLFFBQU9vakQsR0FBR3h6QixHQUFHLENBQUN5ekIsV0FBVyxTQUFTNWpELEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsSUFBSSxhQUFhSixFQUFFMHZCLEdBQUd4dUIsRUFBRSxJQUFJLGFBQWEsT0FBTzFCLEVBQUVtQixFQUFFa00sTUFBTTdNLEVBQUU2TSxNQUFNLHdCQUF3QmxNLEVBQUVxUixJQUFJaFMsTUFBTWlrRCxHQUFHMXpCLEdBQUcsQ0FBQzJ6QixPQUFPLFNBQVM5akQsRUFBRWMsR0FBRyxJQUFJUCxFQUFFWCxFQUFFMHZCLEdBQUd0dkIsRUFBRSxJQUFJLFNBQVNULEVBQUUrdkIsR0FBR3h1QixFQUFFLElBQUksU0FBU1AsRUFBRWtaLEdBQUc3WixFQUFFTCxHQUFHSyxFQUFFVyxFQUFFLEdBQUdoQixFQUFFZ0IsRUFBRSxHQUFHLElBQUljLEVBQUU2OUIsR0FBR3QvQixFQUFFNk0sTUFBTWxOLEVBQUVrTixPQUFPLE9BQU9xVCxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFOFIsTUFBTWxTLEVBQUVMLEdBQUcsT0FBT3VCLEVBQUUsQ0FBQ2xCLEVBQUVMLElBQUlnQixJQUFHLENBQUNnckMsR0FBRzNyQyxFQUFFZ2pELEdBQUdyakQsSUFBRyxTQUFTUyxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVrQixFQUFFLEdBQUcsTUFBTSxDQUFDeXFDLEdBQUcsV0FBVyxJQUFJenFDLEVBQUV5aUQsR0FBR2hqRCxFQUFFaVUsU0FBUzVVLEVBQUU0VSxVQUFValYsRUFBRVMsRUFBRW1TLElBQUl2UyxFQUFFeVMsSUFBSXZSLElBQUloQyxFQUFFbWdDLEdBQUcxK0IsRUFBRWtNLE1BQU1wTCxHQUFHLE9BQU92QyxFQUFFc0QsT0FBTyxJQUFJN0MsRUFBRUEsRUFBRTJKLElBQUlwSyxJQUFJUyxFQUFFb1AsUUFBUXBPLEVBQUVrTSxRQUFRbTJDLEdBQUcsV0FBVyxJQUFJOWhELEVBQUV5aUQsR0FBR2hqRCxFQUFFaVUsU0FBUzVVLEVBQUU0VSxVQUFValYsRUFBRXUvQyxHQUFHOStDLEVBQUVtUyxJQUFJNVIsRUFBRThSLElBQUl2UixLQUFLaEMsRUFBRW1nQyxHQUFHci9CLEVBQUU2TSxNQUFNcEwsR0FBRyxPQUFPdkMsRUFBRXNELE9BQU8sSUFBSTdDLEVBQUVBLEVBQUUySixJQUFJcEssSUFBSVMsRUFBRW9QLFFBQVEvTyxFQUFFNk0sZUFBY3MzQyxHQUFHNXpCLEdBQUcsQ0FBQzZ6QixLQUFLLFNBQVNoa0QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFWCxFQUFFMHZCLEdBQUd0dkIsRUFBRSxJQUFJLE9BQU9ULEVBQUUrdkIsR0FBR3h1QixFQUFFLElBQUksT0FBTyxHQUFHUCxFQUFFa1osR0FBRzdaLEVBQUVMLEdBQUdLLEVBQUVXLEVBQUUsR0FBR2hCLEVBQUVnQixFQUFFLEdBQUcsVUFBVVgsRUFBRXVNLE9BQU8sVUFBVTVNLEVBQUU0TSxNQUFNLE9BQU84M0MsR0FBR3JrRCxFQUFFTCxHQUFHLElBQUk4QixFQUFFNjlCLEdBQUd0L0IsRUFBRTZNLE1BQU1sTixFQUFFa04sT0FBTyxPQUFPcVQsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRWk5QixXQUFXcjlCLEVBQUVMLEdBQUcsT0FBT3VCLEVBQUUsQ0FBQ2xCLEVBQUVMLElBQUlnQixJQUFHLENBQUNnckMsR0FBRzNyQyxFQUFFZ2pELEdBQUdyakQsSUFBRyxTQUFTUyxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVrQixFQUFFLEdBQUcsTUFBTSxDQUFDeXFDLEdBQUcsV0FBVyxJQUFJenFDLEVBQUVkLEVBQUVxUyxJQUFJelMsRUFBRWlRLFdBQVd0USxFQUFFMC9CLEdBQUcxK0IsRUFBRWtNLE1BQU1wTCxHQUFHLE9BQU85QixFQUFFNkMsT0FBTyxFQUFFdEIsRUFBRW9JLElBQUkzSixHQUFHb1AsUUFBUXBPLEVBQUVrTSxPQUFPM0wsR0FBRzhoRCxHQUFHLFdBQVcsSUFBSTloRCxFQUFFZCxFQUFFbVMsSUFBSTVSLEVBQUVzUCxXQUFXdFEsRUFBRTAvQixHQUFHci9CLEVBQUU2TSxNQUFNcEwsR0FBRzlCLEVBQUU2QyxPQUFPLElBQUl0QixFQUFFQSxFQUFFb0ksSUFBSTNKLEdBQUdvUCxRQUFRL08sRUFBRTZNLFFBQVEsSUFBSTNOLEVBQUVjLEVBQUU0VSxTQUFTLE9BQU8xVCxFQUFFdVIsSUFBSXZULEVBQUUrUSxXQUFXcUUsY0FBYWd3QyxHQUFHL3pCLEdBQUcsQ0FBQ2cwQixXQUFXLFNBQVNua0QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLE9BQU9KLEVBQUUwdkIsR0FBR3h1QixFQUFFLElBQUksT0FBTyxPQUFPMUIsRUFBRW1CLEVBQUVrTSxNQUFNN00sRUFBRTZNLE1BQU0sMkJBQTJCbE0sRUFBRThSLElBQUl6UyxNQUFNcWtELEdBQUc5ekIsR0FBRyxDQUFDaTBCLFVBQVUsU0FBU3BrRCxFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksWUFBWVQsRUFBRSt2QixHQUFHeHVCLEVBQUUsSUFBSSxZQUFZUCxFQUFFa1osR0FBRzdaLEVBQUVMLEdBQUdLLEVBQUVXLEVBQUUsR0FBR2hCLEVBQUVnQixFQUFFLEdBQUcsSUFBSWMsRUFBRTY5QixHQUFHdC9CLEVBQUU2TSxNQUFNbE4sRUFBRWtOLE9BQU8sT0FBT3FULEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVQLEVBQUVzUyxTQUFTMVMsRUFBRUwsR0FBRyxPQUFPdUIsRUFBRSxDQUFDbEIsRUFBRUwsSUFBSWdCLElBQUcsQ0FBQ2dyQyxHQUFHM3JDLEVBQUVnakQsR0FBR3JqRCxJQUFHLFNBQVNTLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHbEIsRUFBRWtCLEVBQUUsR0FBRyxNQUFNLENBQUN5cUMsR0FBRyxXQUFXLElBQUl6cUMsRUFBRWQsRUFBRXFTLElBQUl6UyxFQUFFaVEsV0FBV3RRLEVBQUUwL0IsR0FBRzErQixFQUFFa00sTUFBTXBMLEdBQUcsT0FBTzlCLEVBQUU2QyxPQUFPLEVBQUV0QixFQUFFb0ksSUFBSTNKLEdBQUdvUCxRQUFRcE8sRUFBRWtNLE9BQU8zTCxHQUFHOGhELEdBQUcsV0FBVyxJQUFJOWhELEVBQUVkLEVBQUVtUyxJQUFJNVIsRUFBRXNQLFdBQVd0USxFQUFFMC9CLEdBQUdyL0IsRUFBRTZNLE1BQU1wTCxHQUFHOUIsRUFBRTZDLE9BQU8sSUFBSXRCLEVBQUVBLEVBQUVvSSxJQUFJM0osR0FBR29QLFFBQVEvTyxFQUFFNk0sUUFBUSxJQUFJM04sRUFBRWMsRUFBRTRVLFNBQVMsT0FBTzFULEVBQUV1UixJQUFJdlQsRUFBRStRLFdBQVdxRSxjQUFhbXdDLEdBQUdsMEIsR0FBRyxDQUFDbTBCLFNBQVMsU0FBU3RrRCxFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksV0FBV1QsRUFBRSt2QixHQUFHeHVCLEVBQUUsSUFBSSxXQUFXLE9BQU9QLEVBQUVrWixHQUFHN1osRUFBRUwsR0FBR0ssRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBRyxTQUFTWCxFQUFFdU0sUUFBUXZNLEVBQUVBLEVBQUVrUSxRQUFRdlEsRUFBRUEsRUFBRXVRLFNBQVNvdkIsR0FBR3QvQixFQUFFNk0sTUFBTWxOLEVBQUVrTixPQUFPcVQsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRTBTLFFBQVE5UyxFQUFFTCxHQUFHLE9BQU91QixFQUFFLENBQUNsQixFQUFFTCxJQUFJZ0IsSUFBRyxDQUFDZ3JDLEdBQUczckMsRUFBRWdqRCxHQUFHcmpELElBQUcsU0FBU1MsRUFBRWMsR0FBRyxJQUFJUCxFQUFFTyxFQUFFLEdBQUdsQixFQUFFa0IsRUFBRSxHQUFHLE1BQU0sQ0FBQ3lxQyxHQUFHLFdBQVcsT0FBT3ZyQyxFQUFFbVMsSUFBSTVSLEVBQUVvVCxhQUFhL1QsR0FBR2lRLFlBQVkreUMsR0FBRyxXQUFXLE9BQU81aUQsRUFBRW1TLElBQUk1UixFQUFFNFMsS0FBS3ZULEdBQUdpUSxtQkFBa0IwMEMsR0FBR3AwQixHQUFHLENBQUNxMEIsZUFBZSxTQUFTeGtELEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsSUFBSSxpQkFBaUJKLEVBQUUwdkIsR0FBR3h1QixFQUFFLElBQUksaUJBQWlCLE9BQU8xQixFQUFFbUIsRUFBRWtNLE1BQU03TSxFQUFFNk0sTUFBTSw0QkFBNEJsTSxFQUFFbVMsUUFBUTlTLE1BQU02a0QsR0FBR3QwQixHQUFHLENBQUN1MEIsU0FBUyxTQUFTMWtELEVBQUVjLEdBQUcsSUFBSVAsRUFBRVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxXQUFXVCxFQUFFK3ZCLEdBQUd4dUIsRUFBRSxJQUFJLFdBQVcsT0FBT1AsRUFBRWtaLEdBQUc3WixFQUFFTCxHQUFHSyxFQUFFVyxFQUFFLEdBQUdoQixFQUFFZ0IsRUFBRSxHQUFHLFNBQVNYLEVBQUV1TSxRQUFRdk0sRUFBRUEsRUFBRWtRLFFBQVF2USxFQUFFQSxFQUFFdVEsU0FBU292QixHQUFHdC9CLEVBQUU2TSxNQUFNbE4sRUFBRWtOLE9BQU9xVCxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFd1MsUUFBUTVTLEVBQUVMLEdBQUcsT0FBT3VCLEVBQUUsQ0FBQ2xCLEVBQUVMLElBQUlnQixJQUFHLENBQUNnckMsR0FBRzNyQyxFQUFFZ2pELEdBQUdyakQsSUFBRyxTQUFTUyxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVrQixFQUFFLEdBQUcsTUFBTSxDQUFDeXFDLEdBQUcsV0FBVyxPQUFPdnJDLEVBQUVtUyxJQUFJNVIsRUFBRWdULFVBQVUzVCxHQUFHaVEsWUFBWSt5QyxHQUFHLFdBQVcsT0FBTzVpRCxFQUFFbVMsSUFBSTVSLEVBQUVrVCxRQUFRN1QsR0FBR2lRLG1CQUFrQjgwQyxHQUFHeDBCLEdBQUcsQ0FBQ3kwQixlQUFlLFNBQVM1a0QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLGlCQUFpQkosRUFBRTB2QixHQUFHeHVCLEVBQUUsSUFBSSxpQkFBaUIsT0FBTzFCLEVBQUVtQixFQUFFa00sTUFBTTdNLEVBQUU2TSxNQUFNLDRCQUE0QmxNLEVBQUVpUyxRQUFRNVMsTUFBTWlsRCxHQUFHMTBCLEdBQUcsQ0FBQzIwQixLQUFLLFNBQVM5a0QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFWCxFQUFFMHZCLEdBQUd0dkIsRUFBRSxJQUFJLE9BQU9ULEVBQUUrdkIsR0FBR3h1QixFQUFFLElBQUksT0FBT1AsRUFBRWtaLEdBQUc3WixFQUFFTCxHQUFHSyxFQUFFVyxFQUFFLEdBQUdoQixFQUFFZ0IsRUFBRSxHQUFHLElBQUljLEVBQUU2OUIsR0FBR3QvQixFQUFFNk0sTUFBTWxOLEVBQUVrTixPQUFPLE9BQU9xVCxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFNFMsSUFBSWhULEVBQUVMLEdBQUcsT0FBT3VCLEVBQUUsQ0FBQ2xCLEVBQUVMLElBQUlnQixJQUFHLENBQUNnckMsR0FBRzNyQyxFQUFFZ2pELEdBQUdyakQsSUFBRyxTQUFTUyxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVrQixFQUFFLEdBQUcsTUFBTSxDQUFDeXFDLEdBQUcsV0FBVyxJQUFJenFDLEVBQUVtK0IsR0FBRzErQixFQUFFa00sTUFBTXBMLEdBQUcsT0FBT1AsRUFBRXNCLE9BQU8sRUFBRXBDLEVBQUVrSixJQUFJcEksR0FBRzZOLFFBQVFwTyxFQUFFa00sT0FBT3pNLEdBQUc0aUQsR0FBRyxXQUFXLElBQUk5aEQsRUFBRWQsRUFBRW1TLElBQUk1UixFQUFFOFIsSUFBSXpTLEdBQUc2TixRQUFReUcsT0FBTzNVLEVBQUUwL0IsR0FBR3IvQixFQUFFNk0sTUFBTXBMLEdBQUcsT0FBTzlCLEVBQUU2QyxPQUFPLEVBQUV0QixFQUFFb0ksSUFBSTNKLEdBQUdvUCxRQUFRL08sRUFBRTZNLE9BQU8zTCxVQUFTaWtELEdBQUc1MEIsR0FBRyxDQUFDNjBCLFdBQVcsU0FBU2hsRCxFQUFFYyxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksYUFBYUosRUFBRTB2QixHQUFHeHVCLEVBQUUsSUFBSSxhQUFhLE9BQU8xQixFQUFFbUIsRUFBRWtNLE1BQU03TSxFQUFFNk0sTUFBTSx3QkFBd0JsTSxFQUFFcVMsSUFBSWhULE1BQU1xbEQsR0FBRzkwQixHQUFHLENBQUMrMEIsS0FBSyxTQUFTbGxELEVBQUVjLEdBQUcsSUFBSVAsRUFBRVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxPQUFPVCxFQUFFK3ZCLEdBQUd4dUIsRUFBRSxJQUFJLE9BQU9QLEVBQUVrWixHQUFHN1osRUFBRUwsR0FBR0ssRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBRyxJQUFJYyxFQUFFNjlCLEdBQUd0L0IsRUFBRTZNLE1BQU1sTixFQUFFa04sT0FBTyxPQUFPcVQsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRWc5QixTQUFTcDlCLEVBQUVMLEdBQUcsT0FBT3VCLEVBQUUsQ0FBQ2xCLEVBQUVMLElBQUlnQixJQUFHLENBQUNnckMsR0FBRzNyQyxFQUFFZ2pELEdBQUdyakQsSUFBRyxTQUFTUyxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVrQixFQUFFLEdBQUcsTUFBTSxDQUFDeXFDLEdBQUcsV0FBVyxJQUFJenFDLEVBQUVkLEVBQUVtUyxJQUFJdlMsRUFBRWlRLFdBQVd0USxFQUFFMC9CLEdBQUcxK0IsRUFBRWtNLE1BQU1wTCxHQUFHLE9BQU85QixFQUFFNkMsT0FBTyxFQUFFdEIsRUFBRW9JLElBQUkzSixHQUFHb1AsUUFBUXBPLEVBQUVrTSxPQUFPM0wsR0FBRzhoRCxHQUFHLFdBQVcsSUFBSTloRCxFQUFFZCxFQUFFbVMsSUFBSTVSLEVBQUVzUCxXQUFXdFEsRUFBRTAvQixHQUFHci9CLEVBQUU2TSxNQUFNcEwsR0FBRyxPQUFPOUIsRUFBRTZDLE9BQU8sRUFBRXRCLEVBQUVvSSxJQUFJM0osR0FBR29QLFFBQVEvTyxFQUFFNk0sT0FBTzNMLFVBQVNxa0QsR0FBR2gxQixHQUFHLENBQUNpMUIsV0FBVyxTQUFTcGxELEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsSUFBSSxPQUFPSixFQUFFMHZCLEdBQUd4dUIsRUFBRSxJQUFJLE9BQU8sT0FBTzFCLEVBQUVtQixFQUFFa00sTUFBTTdNLEVBQUU2TSxNQUFNLDZCQUE2QmxNLEVBQUU0UixJQUFJdlMsTUFBTXlsRCxHQUFHbDFCLEdBQUcsQ0FBQ20xQixLQUFLLFNBQVN0bEQsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxPQUFPLE9BQU9KLEVBQUUwdkIsR0FBR3h1QixFQUFFLE1BQU0sT0FBT3ZCLEVBQUUyL0IsR0FBRzMrQixFQUFFa00sTUFBTTdNLEVBQUU2TSxPQUFPLE9BQU96TSxFQUFFTyxFQUFFME8sS0FBS3NLLEdBQUdoWixFQUFFNEwsTUFBTXZNLEVBQUV1TSxRQUFRckwsRUFBRWxCLEVBQUVxUCxLQUFLc0ssR0FBR2haLEVBQUU0TCxNQUFNdk0sRUFBRXVNLFFBQVEyVCxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJdkIsRUFBRVMsRUFBRWlTLElBQUkxUixFQUFFWCxHQUFHLE9BQU9rQixFQUFFLENBQUNQLEVBQUVYLEVBQUVMLElBQUlBLElBQUcsQ0FBQ2dtRCxNQUFNaGxELEVBQUVpbEQsS0FBSzVsRCxJQUFHLFNBQVNJLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHbEIsRUFBRWtCLEVBQUUsR0FBR08sRUFBRVAsRUFBRSxHQUFHLE1BQU0sQ0FBQ3lrRCxNQUFNLFdBQVcsSUFBSXprRCxFQUFFbEIsRUFBRWlRLFVBQVV4TyxFQUFFckIsRUFBRW1TLElBQUlyUixFQUFFcVIsSUFBSTVSLEVBQUUwUixJQUFJblIsRUFBRWlSLElBQUl1ZixHQUFHLE9BQU94eUIsRUFBRW1nQyxHQUFHMStCLEVBQUVrTSxNQUFNbE4sR0FBRyxPQUFPVCxFQUFFc0QsT0FBTyxJQUFJZixFQUFFQSxFQUFFNkgsSUFBSXBLLElBQUl1QyxFQUFFc04sUUFBUXBPLEVBQUVrTSxRQUFRKzRDLEtBQUssV0FBVyxJQUFJMWtELEVBQUVQLEVBQUVrVCxRQUFRLEdBQUczVSxFQUFFeUIsRUFBRW9NLE1BQU1zSCxNQUFNblQsRUFBRXV4QixHQUFHOXhCLElBQUlNLEVBQUViLEVBQUVtUyxJQUFJOVEsRUFBRThRLElBQUlyVCxJQUFJd0MsRUFBRTI5QixHQUFHci9CLEVBQUU2TSxNQUFNbE4sR0FBRyxPQUFPK0IsRUFBRWMsT0FBTyxJQUFJdkIsRUFBRUEsRUFBRXFJLElBQUk1SCxJQUFJVCxFQUFFOE4sUUFBUS9PLEVBQUU2TSxlQUFjZzVDLEdBQUd0MUIsR0FBRyxDQUFDdTFCLFdBQVcsU0FBUzFsRCxFQUFFYyxHQUFHLE9BQU8xQixFQUFFWSxFQUFFeU0sTUFBTTNMLEVBQUUyTCxNQUFNLHdCQUF3QnpNLEVBQUVpUyxJQUFJblIsTUFBTTZrRCxHQUFHeDFCLEdBQUcsQ0FBQ3kxQixtQkFBbUIsU0FBUzVsRCxFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUkscUJBQXFCVCxFQUFFK3ZCLEdBQUd4dUIsRUFBRSxJQUFJLHFCQUFxQixPQUFPUCxFQUFFa1osR0FBRzdaLEVBQUVMLEdBQUdLLEVBQUVXLEVBQUUsR0FBR2hCLEVBQUVnQixFQUFFLEdBQUcyK0IsR0FBR3QvQixFQUFFNk0sTUFBTWxOLEVBQUVrTixPQUFPcVQsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRThTLGtCQUFrQmxULEVBQUVMLEdBQUcsT0FBT3VCLEVBQUUsQ0FBQ2xCLEVBQUVMLElBQUlnQixJQUFHLENBQUNnckMsR0FBRzNyQyxFQUFFZ2pELEdBQUdyakQsSUFBRyxTQUFTUyxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVrQixFQUFFLEdBQUd2QixFQUFFK3hCLEdBQUcsR0FBRyxNQUFNLENBQUNpYSxHQUFHLFdBQVcsT0FBT3ZyQyxFQUFFbVMsSUFBSTVSLEVBQUV3UixJQUFJblMsR0FBR3VTLElBQUk1UyxLQUFLcWpELEdBQUcsV0FBVyxPQUFPNWlELEVBQUVtUyxJQUFJdlMsRUFBRW1TLElBQUl4UixHQUFHNFIsSUFBSTVTLFlBQVdzbUQsR0FBRzExQixHQUFHLENBQUMyMUIseUJBQXlCLFNBQVM5bEQsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLDJCQUEyQkosRUFBRTB2QixHQUFHeHVCLEVBQUUsSUFBSSwyQkFBMkIsT0FBTzFCLEVBQUVtQixFQUFFa00sTUFBTTdNLEVBQUU2TSxNQUFNLHNDQUFzQ2xNLEVBQUV1UyxrQkFBa0JsVCxNQUFNbW1ELEdBQUc1MUIsR0FBRyxDQUFDNjFCLEtBQUssU0FBU2htRCxFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksT0FBT1QsRUFBRSt2QixHQUFHeHVCLEVBQUUsSUFBSSxPQUFPUCxFQUFFa1osR0FBRzdaLEVBQUVMLEdBQUdLLEVBQUVXLEVBQUUsR0FBR2hCLEVBQUVnQixFQUFFLEdBQUcsSUFBSWMsRUFBRTY5QixHQUFHdC9CLEVBQUU2TSxNQUFNbE4sRUFBRWtOLE9BQU8sT0FBT3FULEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUUrOEIsU0FBU245QixFQUFFTCxLQUFJLENBQUNnc0MsR0FBRzNyQyxFQUFFZ2pELEdBQUdyakQsSUFBRyxTQUFTUyxHQUFHLE1BQU0sQ0FBQ3VyQyxHQUFHLFdBQVcsSUFBSXpxQyxFQUFFZCxFQUFFTyxFQUFFMCtCLEdBQUdyL0IsRUFBRTZNLE1BQU1wTCxHQUFHLE9BQU9kLEVBQUU2QixPQUFPLElBQUl0QixFQUFFQSxFQUFFb0ksSUFBSTNJLElBQUlPLEVBQUU2TixRQUFRL08sRUFBRTZNLFFBQVFtMkMsR0FBRyxXQUFXLElBQUk5aEQsRUFBRWQsRUFBRU8sRUFBRTArQixHQUFHMS9CLEVBQUVrTixNQUFNcEwsR0FBRyxPQUFPZCxFQUFFNkIsT0FBTyxJQUFJdEIsRUFBRUEsRUFBRW9JLElBQUkzSSxJQUFJTyxFQUFFb1QsTUFBTXZGLFFBQVFwUCxFQUFFa04sZUFBY3c1QyxHQUFHOTFCLEdBQUcsQ0FBQysxQixXQUFXLFNBQVNsbUQsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLGFBQWFKLEVBQUUwdkIsR0FBR3h1QixFQUFFLElBQUksYUFBYSxPQUFPMUIsRUFBRW1CLEVBQUVrTSxNQUFNN00sRUFBRTZNLE1BQU0sd0JBQXdCbE0sRUFBRXdSLElBQUluUyxNQUFVdW1ELEdBQUdoMkIsR0FBRyxDQUFDaTJCLE9BQU8sU0FBU3BtRCxFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksU0FBU1QsRUFBRSt2QixHQUFHeHVCLEVBQUUsSUFBSSxTQUFTLE9BQU9QLEVBQUVrWixHQUFHN1osRUFBRUwsR0FBR0ssRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBRzIrQixHQUFHdC9CLEVBQUU2TSxNQUFNbE4sRUFBRWtOLE9BQU9xVCxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFcVQsTUFBTXpULEVBQUVMLEtBQUksQ0FBQ2dzQyxHQUFHM3JDLEVBQUVnakQsR0FBR3JqRCxPQUFPOG1ELEdBQUdsMkIsR0FBRyxDQUFDbTJCLGFBQWEsU0FBU3RtRCxFQUFFYyxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksZUFBZUosRUFBRTB2QixHQUFHeHVCLEVBQUUsSUFBSSxlQUFlLE9BQU8xQixFQUFFbUIsRUFBRWtNLE1BQU03TSxFQUFFNk0sTUFBTSwwQkFBMEJsTSxFQUFFOFMsTUFBTXpULE1BQU0ybUQsR0FBR3AyQixHQUFHLENBQUNxMkIsU0FBUyxTQUFTeG1ELEVBQUVjLEdBQUcsSUFBSVAsRUFBRVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxXQUFXVCxFQUFFK3ZCLEdBQUd4dUIsRUFBRSxJQUFJLFdBQVcsT0FBT1AsRUFBRWtaLEdBQUc3WixFQUFFTCxHQUFHSyxFQUFFVyxFQUFFLEdBQUdoQixFQUFFZ0IsRUFBRSxHQUFHMitCLEdBQUd0L0IsRUFBRTZNLE1BQU1sTixFQUFFa04sT0FBT3FULEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUV5VCxRQUFRN1QsRUFBRUwsS0FBSSxDQUFDZ3NDLEdBQUczckMsRUFBRWdqRCxHQUFHcmpELE9BQU9rbkQsR0FBR3QyQixHQUFHLENBQUN1MkIsY0FBYyxTQUFTMW1ELEVBQUVjLEdBQUcsSUFBSVAsRUFBRVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxnQkFBZ0JULEVBQUUrdkIsR0FBR3h1QixFQUFFLElBQUksZ0JBQWdCLE9BQU9QLEVBQUVrWixHQUFHN1osRUFBRUwsR0FBR0ssRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBRzIrQixHQUFHdC9CLEVBQUU2TSxNQUFNbE4sRUFBRWtOLE9BQU9xVCxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFMlQsYUFBYS9ULEVBQUVMLEdBQUcsT0FBT3VCLEVBQUUsQ0FBQ2xCLEVBQUVMLElBQUlnQixJQUFHLENBQUNnckMsR0FBRzNyQyxFQUFFZ2pELEdBQUdyakQsSUFBRyxTQUFTUyxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVrQixFQUFFLEdBQUcsTUFBTSxDQUFDeXFDLEdBQUcsV0FBVyxPQUFPbFosR0FBRzl4QixJQUFJcWlELEdBQUcsV0FBVyxPQUFPdndCLEdBQUd6eUIsV0FBVSttRCxHQUFHeDJCLEdBQUcsQ0FBQ3kyQixvQkFBb0IsU0FBUzVtRCxFQUFFYyxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksc0JBQXNCSixFQUFFMHZCLEdBQUd4dUIsRUFBRSxJQUFJLHNCQUFzQixPQUFPMUIsRUFBRW1CLEVBQUVrTSxNQUFNN00sRUFBRTZNLE1BQU0saUNBQWlDbE0sRUFBRW9ULGFBQWEvVCxNQUFNaW5ELEdBQUcxMkIsR0FBRyxDQUFDMjJCLGVBQWUsU0FBUzltRCxFQUFFYyxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksaUJBQWlCSixFQUFFMHZCLEdBQUd4dUIsRUFBRSxJQUFJLGlCQUFpQixPQUFPMUIsRUFBRW1CLEVBQUVrTSxNQUFNN00sRUFBRTZNLE1BQU0sNEJBQTRCbE0sRUFBRWtULFFBQVE3VCxNQUFNbW5ELEdBQUc1MkIsR0FBRyxDQUFDNjJCLE1BQU0sU0FBU2huRCxFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksUUFBUVQsRUFBRSt2QixHQUFHeHVCLEVBQUUsSUFBSSxRQUFRLE9BQU9QLEVBQUVrWixHQUFHN1osRUFBRUwsR0FBR0ssRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBRzIrQixHQUFHdC9CLEVBQUU2TSxNQUFNbE4sRUFBRWtOLE9BQU9xVCxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFbVQsS0FBS3ZULEVBQUVMLEtBQUksQ0FBQ2dzQyxHQUFHM3JDLEVBQUVnakQsR0FBR3JqRCxPQUFPMG5ELEdBQUc5MkIsR0FBRyxDQUFDKzJCLFdBQVcsU0FBU2xuRCxFQUFFYyxHQUFHLElBQUlQLEVBQUVYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksYUFBYVQsRUFBRSt2QixHQUFHeHVCLEVBQUUsSUFBSSxhQUFhLE9BQU9QLEVBQUVrWixHQUFHN1osRUFBRUwsR0FBR0ssRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBRzIrQixHQUFHdC9CLEVBQUU2TSxNQUFNbE4sRUFBRWtOLE9BQU9xVCxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFdVQsVUFBVTNULEVBQUVMLEtBQUksQ0FBQ2dzQyxHQUFHM3JDLEVBQUVnakQsR0FBR3JqRCxPQUFPNG5ELEdBQUdoM0IsR0FBRyxDQUFDaTNCLGlCQUFpQixTQUFTcG5ELEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsSUFBSSxtQkFBbUJKLEVBQUUwdkIsR0FBR3h1QixFQUFFLElBQUksbUJBQW1CLE9BQU8xQixFQUFFbUIsRUFBRWtNLE1BQU03TSxFQUFFNk0sTUFBTSw4QkFBOEJsTSxFQUFFZ1QsVUFBVTNULE1BQU15bkQsR0FBR2wzQixHQUFHLENBQUNtM0IsWUFBWSxTQUFTdG5ELEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsSUFBSSxjQUFjSixFQUFFMHZCLEdBQUd4dUIsRUFBRSxJQUFJLGNBQWMsT0FBTzFCLEVBQUVtQixFQUFFa00sTUFBTTdNLEVBQUU2TSxNQUFNLHlCQUF5QmxNLEVBQUU0UyxLQUFLdlQsTUFBTTJuRCxHQUFHcDNCLEdBQUcsQ0FBQ3EzQixVQUFVLFNBQVN4bkQsRUFBRWMsR0FBRyxJQUFJUCxFQUFFWCxFQUFFMHZCLEdBQUd0dkIsRUFBRSxJQUFJLFlBQVlULEVBQUUrdkIsR0FBR3h1QixFQUFFLElBQUksWUFBWSxPQUFPUCxFQUFFa1osR0FBRzdaLEVBQUVMLEdBQUdLLEVBQUVXLEVBQUUsR0FBR2hCLEVBQUVnQixFQUFFLEdBQUcyK0IsR0FBR3QvQixFQUFFNk0sTUFBTWxOLEVBQUVrTixPQUFPcVQsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRWlULFNBQVNyVCxFQUFFTCxLQUFJLENBQUNnc0MsR0FBRzNyQyxFQUFFZ2pELEdBQUdyakQsT0FBT2tvRCxHQUFHdDNCLEdBQUcsQ0FBQ3UzQixnQkFBZ0IsU0FBUzFuRCxFQUFFYyxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksa0JBQWtCSixFQUFFMHZCLEdBQUd4dUIsRUFBRSxJQUFJLGtCQUFrQixPQUFPMUIsRUFBRW1CLEVBQUVrTSxNQUFNN00sRUFBRTZNLE1BQU0sNkJBQTZCbE0sRUFBRTBTLFNBQVNyVCxNQUFNLFNBQVMrbkQsR0FBRzNuRCxFQUFFYyxHQUFHLElBQUksSUFBSVAsRUFBRSxHQUFHWCxFQUFFSSxFQUFFSixFQUFFa0IsSUFBSWxCLEVBQUVXLEVBQUU4QixLQUFLekMsR0FBRyxPQUFPVyxFQUFFLFNBQVNxbkQsR0FBRzVuRCxHQUFHLElBQUksSUFBSWMsRUFBRSxHQUFHUCxFQUFFLEVBQUVBLEVBQUVQLEVBQUVvQyxTQUFTN0IsRUFBRSxJQUFJLElBQUlYLEVBQUUsRUFBRUEsRUFBRUksRUFBRU8sR0FBRzZCLFNBQVN4QyxFQUFFa0IsRUFBRXVCLEtBQUtyQyxFQUFFTyxHQUFHWCxJQUFJLE9BQU9rQixFQUFFLElBQUkrbUQsR0FBRzEzQixHQUFHLENBQUMyM0IsUUFBUSxTQUFTOW5ELEVBQUVjLEVBQUVQLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxHQUFHLElBQUlYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksVUFBVVQsRUFBRSt2QixHQUFHeHVCLEVBQUUsVUFBVSxTQUFTLFNBQVNQLEVBQUU0RixFQUFFNUYsRUFBRVgsRUFBRTZNLE9BQU8sR0FBRyxJQUFJcEwsRUFBRSxTQUFTckIsRUFBRWMsRUFBRVAsR0FBRyxJQUFJLElBQUlYLEVBQUVJLEVBQUV5TSxNQUFNbE0sR0FBR2hCLEVBQUUsR0FBRzhCLEVBQUUsRUFBRXZDLEVBQUUsRUFBRStCLEVBQUUsRUFBRUEsRUFBRU4sRUFBRU0sSUFBSXRCLEVBQUU4QyxLQUFLckMsRUFBRXlNLE1BQU01TCxJQUFJUSxHQUFHckIsRUFBRXlNLE1BQU01TCxHQUFHLElBQUlBLEVBQUUsRUFBRUEsRUFBRUMsRUFBRXlMLEtBQUsxTCxJQUFJdEIsRUFBRThDLEtBQUt2QixFQUFFMkwsTUFBTTVMLElBQUksSUFBSUEsRUFBRU4sRUFBRSxFQUFFTSxFQUFFYixFQUFFdU0sS0FBSzFMLElBQUl0QixFQUFFOEMsS0FBS3JDLEVBQUV5TSxNQUFNNUwsSUFBSS9CLEdBQUdrQixFQUFFeU0sTUFBTTVMLEdBQUcsTUFBTSxDQUFDdS9CLFVBQVUvK0IsRUFBRXM1QixVQUFVNzdCLEVBQUVpcEQsUUFBUW5vRCxFQUFFOGUsWUFBWW5mLEdBQXBQLENBQXdQSyxFQUFFTCxFQUFFZ0IsR0FBRyxPQUFPdWYsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSU8sRUFBRXJCLEVBQUUyUSxPQUFPL1EsRUFBRUwsRUFBRWlLLFVBQVVqSixHQUFHLE9BQU9PLEVBQUUsQ0FBQ3ZCLElBQUk4QixJQUFHLENBQUNpeEIsR0FBRzF5QixJQUFHLFNBQVNJLEVBQUVjLEdBQUcsSUFBSXZCLEVBQUV1QixFQUFFLEdBQUcsTUFBTSxDQUFDd3hCLEdBQUcsV0FBVyxJQUFJeHhCLEVBQUVsQixFQUFFNk0sTUFBTXBMLEVBQUU5QixFQUFFaU4sS0FBSzFOLEVBQUVnQyxFQUFFb0YsTUFBTSxFQUFFM0YsR0FBR00sRUFBRS9CLEVBQUVzRCxPQUFPZCxFQUFFUixFQUFFb0YsTUFBTTNGLEVBQUVPLEVBQUVzQixRQUFROEQsTUFBTSxHQUFHbkgsRUFBRXVDLEVBQUVjLE9BQU9qRCxFQUFFd29ELEdBQUcsRUFBRTltRCxHQUFHa0UsRUFBRTRpRCxHQUFHOW1ELEVBQUUsRUFBRUEsRUFBRSxFQUFFOUIsR0FBRzZCLEVBQUVnbkQsR0FBRyxDQUFDOW9ELEVBQUUsQ0FBQ3VDLEdBQUdDLElBQUkwRCxFQUFFaEYsRUFBRTJPLFFBQVEvTixHQUFHeEIsRUFBRUcsRUFBRW9QLFFBQVEsQ0FBQ3ROLElBQUk2RCxFQUFFMGlELEdBQUcsQ0FBQyxDQUFDL21ELEdBQUcxQixFQUFFNEYsSUFBSTdGLEVBQUU4RixFQUFFZ08sVUFBVTlOLEdBQUdHLEVBQUUyaUQsR0FBRzlvRCxFQUFFRSxFQUFFUSxFQUFFNk0sTUFBTWxNLElBQUkwRSxFQUFFOHFCLEdBQUc3cUIsR0FBRyxPQUFTRyxFQUFFMk4sVUFBVS9OLFFBQU8wSixRQUFRdE4sRUFBRXFkLGdCQUFnQnNwQyxHQUFHNzNCLEdBQUcsQ0FBQzgzQixvQkFBb0IsU0FBU2pvRCxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksc0JBQXNCVCxFQUFFK3ZCLEdBQUd4dUIsRUFBRSxhQUFhLHFCQUFxQixTQUFTLE9BQU9rRSxFQUFFTSxFQUFFL0UsSUFBRyxXQUFXLE1BQU0sc0NBQXFDdWYsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSU8sRUFBRXJCLEVBQUVvWCxtQkFBbUJ4WCxFQUFFTCxFQUFFZ0IsR0FBRyxPQUFPTyxFQUFFLENBQUN2QixJQUFJOEIsSUFBRyxDQUFDaXhCLEdBQUcxeUIsSUFBRyxTQUFTSSxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU8sU0FBU3R5QixFQUFFYyxHQUFHLElBQUksSUFBSVAsRUFBRThqRCxHQUFHdmpELEVBQUV1eEIsR0FBR3Z4QixJQUFJbEIsRUFBRWlvRCxHQUFHN25ELEVBQUVPLEdBQUdoQixFQUFFa25ELEdBQUczbEQsRUFBRXd3QixHQUFHLEVBQUUsVUFBVWp3QixFQUFFekIsRUFBRTJNLEtBQUtoTixFQUFFZ04sS0FBS3pOLEVBQUUsRUFBRUEsRUFBRXVDLElBQUl2QyxFQUFFUyxFQUFFNDNCLEdBQUc1M0IsRUFBRVQsRUFBRSxHQUFHUyxFQUFFbWpELEdBQUduakQsRUFBRXN5QixHQUFHanlCLEVBQUU2TSxNQUFNLFNBQVMsSUFBSTVMLEVBQUV3eEIsR0FBR3p5QixHQUFHLE9BQU91akQsR0FBRzVqRCxFQUFFSyxFQUFFaUIsR0FBakssQ0FBcUtiLEVBQUVPLFdBQWMybkQsR0FBRyxTQUFTbG9ELEVBQUVjLEVBQUV2QixHQUFHLE9BQU9nQixFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlYLEVBQUVjLEVBQUV2QyxFQUFFK0IsRUFBRVMsRUFBRXZDLEVBQUVJLEVBQUU0RixFQUFFbkUsRUFBRXNFLEVBQUVoRyxFQUFFbUcsRUFBRUosRUFBRSxPQUFPckYsRUFBRXNCLE1BQUssU0FBU3RCLEdBQUcsT0FBT0EsRUFBRWdDLE9BQU8sS0FBSyxFQUFFLElBQUlyQixFQUFFK3VCLEdBQUd0dkIsRUFBRSxTQUFTLFlBQVlxQixFQUFFaXVCLEdBQUd4dUIsRUFBRSxPQUFPLFdBQVcsUUFBUWhDLEVBQUUsTUFBTVMsRUFBRSxFQUFFQSxFQUFFc0IsRUFBRVEsRUFBRWtMLEtBQUtqTCxFQUFFZixFQUFFa00sTUFBTXpILEVBQUVuRSxFQUFFLEdBQUUsV0FBVyxNQUFNLDJCQUEwQnpCLEVBQUVrQyxFQUFFNEUsTUFBTXBILEVBQUVBLEVBQUUrQixHQUFHUSxFQUFFb0wsTUFBTSxxRUFBcUUxTixFQUFFLEVBQUVJLEVBQUVMLEVBQUVLLEVBQUVMLEVBQUUrQixFQUFFMUIsSUFBSUosR0FBR3VDLEVBQUVuQyxHQUFHLE9BQU80RixFQUFFekQsRUFBRTRFLE1BQU0sRUFBRXBILEdBQUd1SCxPQUFPLENBQUN0SCxHQUFHdUMsRUFBRTRFLE1BQU1wSCxFQUFFK0IsSUFBSUQsRUFBRUwsRUFBRW9PLFFBQVE1SixHQUFHRyxFQUFFN0QsRUFBRXNOLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRTIwQyxHQUFHcCtDLElBQUksS0FBSyxFQUFFLE9BQU9oRyxFQUFFVSxFQUFFaUMsT0FBT3dELEVBQUVuRyxFQUFFa1IsUUFBUSxDQUFDLElBQUluTCxFQUFFNGlELEdBQUdqbkQsRUFBRXlFLEVBQUV2RyxHQUFHa0IsSUFBSU8sR0FBR0EsRUFBRW1QLFVBQVU1TyxJQUFJTyxHQUFHQSxFQUFFcU8sVUFBVXJLLEVBQUVxSyxVQUFVOU8sRUFBRThPLFVBQVV4SyxFQUFFd0ssVUFBVXhRLEVBQUV3USxVQUFVLENBQUMsRUFBRXpLLFdBQVMsU0FBU2tqRCxHQUFHbm9ELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsUUFBRyxJQUFTdUMsSUFBSUEsRUFBRSxRQUFRMkQsRUFBRWhGLEVBQUVvQyxTQUFTdEIsRUFBRXlMLE1BQUssV0FBVyxNQUFNLHNCQUFzQnZNLEVBQUVvQyxPQUFPLHFCQUFxQnRCLEVBQUV5TCxLQUFLLGtCQUFpQixJQUFJMUwsRUFBRWIsRUFBRXNCLEVBQUVSLEVBQUUvQixHQUFFLEVBQUcsSUFBSStCLEVBQUV5TCxPQUFPeE4sR0FBRSxFQUFHdUMsRUFBRVIsRUFBRWdPLEtBQUssRUFBRWhPLEVBQUUyTCxNQUFNLEdBQUczTCxFQUFFMkwsTUFBTSxHQUFHM0wsRUFBRTJMLE1BQU0sSUFBSTVMLEVBQUUsQ0FBQyxFQUFFYixFQUFFLEdBQUdBLEVBQUUsR0FBR0EsRUFBRSxLQUFLZ0YsRUFBRSxJQUFJbkUsRUFBRXVCLFFBQU8sV0FBVyxNQUFNLHFFQUFxRXZCLEVBQUV1QixPQUFPLE9BQU00QyxFQUFFLElBQUkxRCxFQUFFaUwsTUFBSyxXQUFXLE1BQU0sNERBQTREakwsRUFBRWlMLFFBQU92SCxFQUFFLElBQUl6RSxFQUFFZ00sTUFBSyxXQUFXLE1BQU0sZ0VBQWdFaE0sRUFBRWdNLFFBQU8sSUFBSXBOLEVBQUUsU0FBU2tDLEVBQUVSLEVBQUUsR0FBR0EsRUFBRSxHQUFHa0UsRUFBRSxTQUFTMUQsRUFBRUMsRUFBRW1MLE1BQU0sR0FBR25MLEVBQUVtTCxNQUFNLEdBQUd6SCxFQUFFN0YsSUFBSW9CLEVBQUVrTSxNQUFNLElBQUcsV0FBVyxNQUFNLDRDQUE0Q3ROLEVBQUUsdUNBQXVDb0IsRUFBRWtNLE1BQU0sR0FBRyxPQUFNekgsRUFBRUQsSUFBSXhFLEVBQUVrTSxNQUFNLElBQUcsV0FBVyxNQUFNLDZDQUE2QzFILEVBQUUsd0NBQXdDeEUsRUFBRWtNLE1BQU0sR0FBRyxPQUFNLE1BQU0zTixHQUFHa0csRUFBRU0sRUFBRS9GLElBQUcsV0FBVyxNQUFNLCtFQUErRVQsRUFBRSxnQkFBZ0JTLEVBQUUsT0FBTSxJQUFJcUIsRUFBRW1oQyxHQUFHMWdDLEdBQUdqQyxFQUFFaWdDLEdBQUd4K0IsRUFBRU4sRUFBRWtNLE1BQU03TSxFQUFFLEVBQUVMLEVBQUVULEdBQUUsRUFBRzhCLEdBQUdzRSxFQUFFNGEsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSWxCLEVBQUVJLEVBQUV3OUIsZUFBZWw4QixFQUFFZixFQUFFbkIsR0FBRyxPQUFPMEIsRUFBRSxDQUFDUCxFQUFFZSxJQUFJMUIsSUFBRyxDQUFDd29ELEtBQUs5bUQsRUFBRW94QixPQUFPbnlCLElBQUcsU0FBU1AsRUFBRWMsR0FBRyxJQUFJUCxFQUFFTyxFQUFFLEdBQUdELEVBQUVDLEVBQUUsR0FBRyxNQUFNLENBQUNzbkQsS0FBSyxXQUFXLE9BQU9DLEdBQUdyb0QsRUFBRU8sRUFBRVgsRUFBRUwsRUFBRThCLEVBQUUsRUFBRXZDLElBQUk0ekIsT0FBTyxXQUFXLE9BQU80MUIsR0FBR3RvRCxFQUFFYSxFQUFFTixFQUFFa00sTUFBTTdNLEVBQUVMLEVBQUU4QixFQUFFdkMsUUFBTyxPQUFPQyxFQUFFbUcsRUFBRTJKLEtBQUszSixFQUFFdUgsTUFBTSxHQUFHdkgsRUFBRXVILE1BQU0sR0FBR3ZILEVBQUV1SCxNQUFNLElBQUl2SCxFQUFFLFNBQVNxakQsR0FBR3ZvRCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsRUFBRXZDLFFBQUcsSUFBU3VDLElBQUlBLEVBQUUsUUFBUSxJQUFJUixFQUFFYixFQUFFLElBQUlBLEVBQUV1TSxPQUFPMUwsRUFBRWIsRUFBRThPLEtBQUssRUFBRTlPLEVBQUV5TSxNQUFNLEdBQUd6TSxFQUFFeU0sTUFBTSxHQUFHek0sRUFBRXlNLE1BQU0sS0FBSyxJQUFJbkwsRUFBRVIsRUFBRSxJQUFJUSxFQUFFaUwsT0FBT2pMLEVBQUVSLEVBQUVnTyxLQUFLLEVBQUVoTyxFQUFFMkwsTUFBTSxHQUFHM0wsRUFBRTJMLE1BQU0sR0FBRzNMLEVBQUUyTCxNQUFNLEtBQUt6SCxFQUFFLElBQUluRSxFQUFFMEwsTUFBSyxXQUFXLE1BQU0saUVBQWlFMUwsRUFBRTRMLE1BQU0sT0FBTXpILEVBQUUsSUFBSTFELEVBQUVpTCxNQUFLLFdBQVcsTUFBTSw4REFBOERqTCxFQUFFbUwsTUFBTSxPQUFNekgsRUFBRSxJQUFJekUsRUFBRTZCLFFBQU8sV0FBVyxNQUFNLG1FQUFtRTdCLEVBQUUsT0FBTSxJQUFJeEIsRUFBRSxTQUFTc0MsRUFBRVIsRUFBRTRMLE1BQU0sR0FBRzVMLEVBQUU0TCxNQUFNLEdBQUd0TixFQUFFLFNBQVNrQyxFQUFFQyxFQUFFbUwsTUFBTSxHQUFHbkwsRUFBRW1MLE1BQU0sR0FBR3pILEVBQUVqRyxJQUFJd0IsRUFBRSxJQUFHLFdBQVcsTUFBTSw0Q0FBNEN4QixFQUFFLHVDQUF1Q3dCLEVBQUUsR0FBRyxPQUFNeUUsRUFBRTdGLElBQUlvQixFQUFFLElBQUcsV0FBVyxNQUFNLDBDQUEwQ3BCLEVBQUUseUNBQXlDb0IsRUFBRSxHQUFHLFFBQU8sTUFBTXpCLEdBQUdrRyxFQUFFTSxFQUFFL0YsSUFBRyxXQUFXLE1BQU0sZ0ZBQWdGVCxFQUFFLGdCQUFnQlMsRUFBRSxPQUFNLElBQUl3RixFQUFFZzlCLEdBQUcxZ0MsR0FBR1QsRUFBRXkrQixHQUFHeCtCLEVBQUU0TCxNQUFNbE0sRUFBRVgsRUFBRSxFQUFFTCxFQUFFVCxHQUFFLEVBQUdpRyxHQUFHLE9BQU8rYSxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFeTlCLGdCQUFnQjU4QixFQUFFUyxFQUFFVixLQUFJLENBQUM0bkQsSUFBSTNuRCxFQUFFdW5ELEtBQUs5bUQsSUFBSSxTQUFTbW5ELEdBQUd6b0QsR0FBRyxJQUFJYyxFQUFFLFNBQVNkLEdBQUcsTUFBTSxpQkFBaUJBLEVBQUUsQ0FBQ0EsRUFBRUEsRUFBRUEsR0FBRyxJQUFJQSxFQUFFb0MsT0FBTyxDQUFDcEMsRUFBRSxHQUFHQSxFQUFFLEdBQUcsR0FBR0EsRUFBeEUsQ0FBMkVBLEdBQUdPLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVrQixFQUFFLEdBQUd2QixFQUFFdUIsRUFBRSxHQUFHLE9BQU8sSUFBSVAsR0FBRyxJQUFJWCxHQUFHLElBQUlMLEVBQUUsU0FBU21wRCxHQUFHMW9ELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUd5RixFQUFFaEYsRUFBRW9DLFNBQVN0QixFQUFFeUwsTUFBSyxXQUFXLE1BQU0sc0JBQXNCdk0sRUFBRW9DLE9BQU8scUJBQXFCdEIsRUFBRXlMLEtBQUssa0JBQWlCLElBQUlsTCxFQUFFckIsRUFBRWxCLEVBQUVnQyxFQUFFRCxHQUFFLEVBQUcsSUFBSUMsRUFBRXlMLE9BQU8xTCxHQUFFLEVBQUcvQixFQUFFZ0MsRUFBRWlPLEtBQUssRUFBRWpPLEVBQUUyTCxNQUFNLEdBQUczTCxFQUFFMkwsTUFBTSxHQUFHM0wsRUFBRTJMLE1BQU0sR0FBRzNMLEVBQUUyTCxNQUFNLElBQUlwTCxFQUFFLENBQUMsRUFBRXJCLEVBQUUsR0FBR0EsRUFBRSxHQUFHQSxFQUFFLEdBQUdBLEVBQUUsS0FBSyxJQUFJc0IsRUFBRUQsRUFBRSxHQUFHdEMsRUFBRUQsRUFBRTJOLE1BQU0sR0FBR3pILEVBQUUsSUFBSTNELEVBQUVlLFFBQU8sV0FBVyxNQUFNLHFFQUFxRWYsRUFBRWUsT0FBTyxPQUFNNEMsRUFBRSxJQUFJbEcsRUFBRXlOLE1BQUssV0FBVyxNQUFNLDREQUE0RHpOLEVBQUV5TixRQUFPdkgsRUFBRSxJQUFJekUsRUFBRWdNLE1BQUssV0FBVyxNQUFNLGdFQUFnRWhNLEVBQUVnTSxRQUFPdkgsRUFBRTFELElBQUlmLEVBQUVrTSxNQUFNLElBQUcsV0FBVyxNQUFNLDRDQUE0Q25MLEVBQUUsdUNBQXVDZixFQUFFa00sTUFBTSxHQUFHLE9BQU16SCxFQUFFakcsSUFBSXdCLEVBQUVrTSxNQUFNLElBQUcsV0FBVyxNQUFNLDZDQUE2QzFOLEVBQUUsd0NBQXdDd0IsRUFBRWtNLE1BQU0sR0FBRyxPQUFNLElBQUl0TixFQUFFcWdDLEdBQUduK0IsRUFBRWQsRUFBRWtNLE1BQU03TSxFQUFFLEVBQUVMLEdBQUd3RixFQUFFK2EsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRTY5QixlQUFlLytCLEVBQUV5QixFQUFFcEIsS0FBSSxDQUFDd3BELEtBQUs3cEQsSUFBSSxPQUFPK0IsRUFBRWtFLEVBQUUrSixLQUFLL0osRUFBRTBILE1BQU0sR0FBRzFILEVBQUUwSCxNQUFNLEdBQUcxSCxFQUFFMEgsTUFBTSxHQUFHMUgsRUFBRTBILE1BQU0sSUFBSTFILEVBQUUsSUFBSTZqRCxHQUFHejRCLEdBQUcsQ0FBQzA0QixRQUFRLFNBQVM3b0QsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEVBQUV2QyxRQUFHLElBQVNTLElBQUlBLEVBQUUsWUFBTyxJQUFTOEIsSUFBSUEsRUFBRSxHQUFHLElBQUlSLEVBQUV5dUIsR0FBR3R2QixFQUFFLElBQUksVUFBVXNCLEVBQUVndUIsR0FBR3h1QixFQUFFLFNBQVMsVUFBVS9CLEVBQUU4QixFQUFFMUIsR0FBRSxFQUFHLElBQUkwQixFQUFFMEwsT0FBT3BOLEdBQUUsRUFBR0osRUFBRThCLEVBQUVnTyxLQUFLLEVBQUVoTyxFQUFFNEwsTUFBTSxHQUFHNUwsRUFBRTRMLE1BQU0sS0FBS3pILEVBQUUsSUFBSWpHLEVBQUV3TixNQUFLLFdBQVcsTUFBTSx1REFBdUR4TixFQUFFd04sS0FBSyxPQUFNdkgsRUFBRSxJQUFJMUQsRUFBRWlMLE1BQUssV0FBVyxNQUFNLHdEQUF3RGpMLEVBQUVpTCxLQUFLLE9BQU0sTUFBTXpOLEdBQUdrRyxFQUFFTSxFQUFFMUYsSUFBRyxXQUFXLE1BQU0sdUVBQXVFZCxFQUFFLGdCQUFnQmMsRUFBRSxPQUFNb0YsRUFBRWpHLEVBQUUwTixNQUFNLEtBQUtuTCxFQUFFbUwsTUFBTSxJQUFHLFdBQVcsTUFBTSxvQ0FBb0MxTixFQUFFME4sTUFBTSxHQUFHLHVDQUF1Q25MLEVBQUVtTCxNQUFNLEdBQUcsT0FBTXpILEVBQUU4OEIsR0FBR3ZoQyxFQUFFYyxJQUFHLFdBQVcsTUFBTSxvRUFBb0VkLEVBQUUsa0JBQWtCYyxFQUFFLE9BQU0yRCxFQUFFLFFBQVF6RixHQUFFLFdBQVcsTUFBTSxzQ0FBc0NBLEVBQUUsMkNBQTBDLElBQUl3RixFQUFFekQsRUFBRXdOLEtBQUssRUFBRXhOLEVBQUVtTCxNQUFNLEdBQUduTCxFQUFFbUwsTUFBTSxHQUFHbkwsRUFBRW1MLE1BQU0sSUFBSTdMLEVBQUU3QixFQUFFK1AsS0FBSy9QLEVBQUUwTixNQUFNLEdBQUcsRUFBRTFOLEVBQUUwTixNQUFNLEdBQUcxTixFQUFFME4sTUFBTSxJQUFJck4sRUFBRWlwRCxHQUFHem5ELEVBQUVtRSxFQUFFLENBQUMsRUFBRXhFLEdBQUdYLEVBQUUsT0FBTyxDQUFDLEVBQUV5QixHQUFHdkMsR0FBRyxPQUFPSyxFQUFFQyxFQUFFd1AsS0FBS3hQLEVBQUVxTixNQUFNLEdBQUdyTixFQUFFcU4sTUFBTSxJQUFJck4sRUFBRXlQLEtBQUt6UCxFQUFFcU4sTUFBTSxHQUFHck4sRUFBRXFOLE1BQU0sR0FBR3JOLEVBQUVxTixNQUFNLE9BQU80N0MsR0FBR2w0QixHQUFHLENBQUMyNEIsUUFBUSxTQUFTOW9ELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsUUFBRyxJQUFTUyxJQUFJQSxFQUFFLGFBQVEsSUFBUzhCLElBQUlBLEVBQUUsQ0FBQyxFQUFFLElBQUksSUFBSVIsRUFBRXl1QixHQUFHdHZCLEVBQUUsSUFBSSxVQUFVc0IsRUFBRWd1QixHQUFHeHVCLEVBQUUsU0FBUyxVQUFVL0IsRUFBRThCLEVBQUUxQixHQUFFLEVBQUcsSUFBSTBCLEVBQUUwTCxPQUFPcE4sR0FBRSxFQUFHSixFQUFFOEIsRUFBRWlPLEtBQUssRUFBRWpPLEVBQUU0TCxNQUFNLEdBQUc1TCxFQUFFNEwsTUFBTSxHQUFHNUwsRUFBRTRMLE1BQU0sS0FBS3pILEVBQUUsSUFBSWpHLEVBQUV3TixNQUFLLFdBQVcsTUFBTSx1REFBdUR4TixFQUFFd04sS0FBSyxPQUFNdkgsRUFBRSxJQUFJMUQsRUFBRWlMLE1BQUssV0FBVyxNQUFNLHdEQUF3RGpMLEVBQUVpTCxLQUFLLE9BQU0sTUFBTXpOLEdBQUdrRyxFQUFFTSxFQUFFMUYsSUFBRyxXQUFXLE1BQU0sdUVBQXVFZCxFQUFFLGdCQUFnQmMsRUFBRSxPQUFNLElBQUltRixFQUFFLFNBQVN4RixFQUFFUixFQUFFME4sTUFBTSxHQUFHMU4sRUFBRTBOLE1BQU0sR0FBR3pILEVBQUVELElBQUl6RCxFQUFFbUwsTUFBTSxJQUFHLFdBQVcsTUFBTSxvQ0FBb0MxSCxFQUFFLHVDQUF1Q3pELEVBQUVtTCxNQUFNLEdBQUcsT0FBTXpILEVBQUU4OEIsR0FBR3ZoQyxFQUFFYyxJQUFHLFdBQVcsTUFBTSx1RUFBdUVkLEVBQUUsbUJBQW1CYyxFQUFFLE9BQU0sSUFBSVQsRUFBRW1oQyxHQUFHeGlDLEdBQUdILEVBQUVpZ0MsR0FBR3RnQyxFQUFFME4sTUFBTW5MLEVBQUVtTCxNQUFNbE0sRUFBRWMsRUFBRXpCLEVBQUVkLEdBQUUsRUFBRzhCLEdBQUdzRSxFQUFFNGEsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRXlXLE9BQU8xWCxFQUFFdUMsRUFBRWxDLEdBQUcsT0FBTzBCLEVBQUUsQ0FBQ1EsRUFBRXZDLElBQUl3QixJQUFHLENBQUMrRSxFQUFFdkcsRUFBRWdxRCxRQUFRem5ELElBQUcsU0FBU3RCLEVBQUVjLEdBQUcsSUFBSWhDLEVBQUVnQyxFQUFFRCxFQUFFL0IsRUFBRSxHQUFHd0MsRUFBRXhDLEVBQUUsR0FBRyxPQUFPa0csRUFBRTY4QixHQUFHeGdDLElBQUcsV0FBVyxNQUFNLGlIQUFpSEEsRUFBRSxPQUFNLENBQUNpRSxFQUFFLFdBQVcsT0FBTzZpRCxHQUFHN21ELEVBQUVtTCxNQUFNek0sRUFBRWEsRUFBRU4sRUFBRVgsRUFBRUwsSUFBSXdwRCxRQUFRLFdBQVcsT0FBT1IsR0FBR2puRCxFQUFFdEIsRUFBRWEsRUFBRTRMLE1BQU1sTSxFQUFFWCxFQUFFTCxRQUFPLE9BQU9KLEVBQUUrRixFQUFFMkosS0FBSzNKLEVBQUV1SCxNQUFNLEdBQUd2SCxFQUFFdUgsTUFBTSxHQUFHdkgsRUFBRXVILE1BQU0sSUFBSXZILEtBQUs4akQsR0FBRzc0QixHQUFHLENBQUM4NEIsUUFBUSxTQUFTanBELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixRQUFHLElBQVM5QixJQUFJQSxFQUFFLGNBQVMsSUFBUzhCLElBQUlBLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSSxJQUFJdkMsRUFBRXd3QixHQUFHdHZCLEVBQUUsSUFBSSxVQUFVYSxFQUFFeXVCLEdBQUd4dUIsRUFBRSxTQUFTLFVBQVVRLEVBQUV4QyxFQUFFQyxHQUFFLEVBQUcsSUFBSUQsRUFBRXlOLE9BQU94TixHQUFFLEVBQUd1QyxFQUFFeEMsRUFBRWlRLEtBQUssRUFBRWpRLEVBQUUyTixNQUFNLEdBQUczTixFQUFFMk4sTUFBTSxHQUFHM04sRUFBRTJOLE1BQU0sR0FBRzNOLEVBQUUyTixNQUFNLEtBQUt6SCxFQUFFLElBQUkxRCxFQUFFaUwsTUFBSyxXQUFXLE1BQU0sdURBQXVEakwsRUFBRWlMLEtBQUssT0FBTXZILEVBQUUsSUFBSW5FLEVBQUUwTCxNQUFLLFdBQVcsTUFBTSx3REFBd0QxTCxFQUFFMEwsS0FBSyxPQUFNdkgsRUFBRTFELEVBQUVtTCxNQUFNLEtBQUs1TCxFQUFFNEwsTUFBTSxJQUFHLFdBQVcsTUFBTSxvQ0FBb0NuTCxFQUFFbUwsTUFBTSxHQUFHLHVDQUF1QzVMLEVBQUU0TCxNQUFNLEdBQUcsT0FBTXpILEVBQUUsU0FBU2hGLEVBQUVjLEdBQUcsT0FBTzJuRCxHQUFHem9ELElBQUl5b0QsR0FBRzNuRCxHQUEvQixDQUFtQ1AsRUFBRWMsSUFBRyxXQUFXLE1BQU0sdUVBQXVFZCxFQUFFLG1CQUFtQmMsRUFBRSxPQUFNMkQsRUFBRSxVQUFVekYsR0FBRSxXQUFXLE1BQU0sc0NBQXNDQSxFQUFFLDZDQUE0QyxJQUFJSixFQUFFcWdDLEdBQUdsK0IsRUFBRW1MLE1BQU01TCxFQUFFNEwsTUFBTWxNLEVBQUVjLEVBQUV6QixHQUFHbUYsRUFBRSthLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVQLEVBQUU0OUIsT0FBT3Q4QixFQUFFVCxFQUFFMUIsR0FBRyxPQUFPMkIsRUFBRSxDQUFDUSxFQUFFVCxJQUFJTixJQUFHLENBQUMrRSxFQUFFaEUsRUFBRXluRCxRQUFRbG9ELElBQUcsU0FBU2IsRUFBRWMsR0FBR2tFLEVBQUV5akQsR0FBR3BuRCxJQUFHLFdBQVcsTUFBTSxpSEFBaUhBLEVBQUUsT0FBTSxJQUFJOUIsRUFBRXVCLEVBQUUsR0FBR2hDLEVBQUVnQyxFQUFFLEdBQUcsTUFBTSxDQUFDd0UsRUFBRSxXQUFXLE9BQU9vakQsR0FBR25wRCxFQUFFa04sTUFBTXpNLEVBQUVsQixFQUFFeUIsRUFBRVgsSUFBSW1wRCxRQUFRLFdBQVcsT0FBTyxTQUFTL29ELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsSUFBSThCLEVBQUVyQixFQUFFLElBQUlBLEVBQUV1TSxPQUFPbEwsRUFBRXJCLEVBQUUrTyxLQUFLLEVBQUUvTyxFQUFFeU0sTUFBTSxHQUFHek0sRUFBRXlNLE1BQU0sR0FBR3pNLEVBQUV5TSxNQUFNLEdBQUd6TSxFQUFFeU0sTUFBTSxLQUFLLElBQUkzTixFQUFFZ0MsRUFBRSxJQUFJaEMsRUFBRXlOLE9BQU96TixFQUFFZ0MsRUFBRWlPLEtBQUssRUFBRWpPLEVBQUUyTCxNQUFNLEdBQUczTCxFQUFFMkwsTUFBTSxHQUFHM0wsRUFBRTJMLE1BQU0sR0FBRzNMLEVBQUUyTCxNQUFNLEtBQUt6SCxFQUFFLElBQUkzRCxFQUFFa0wsTUFBSyxXQUFXLE1BQU0saUVBQWlFbEwsRUFBRW9MLE1BQU0sT0FBTXpILEVBQUUsSUFBSWxHLEVBQUV5TixNQUFLLFdBQVcsTUFBTSw4REFBOER6TixFQUFFMk4sTUFBTSxPQUFNekgsRUFBRSxJQUFJekUsRUFBRTZCLFFBQU8sV0FBVyxNQUFNLG1FQUFtRTdCLEVBQUUsT0FBTXlFLEVBQUUzRCxFQUFFb0wsTUFBTSxLQUFLbE0sRUFBRSxJQUFHLFdBQVcsTUFBTSw0Q0FBNENjLEVBQUVvTCxNQUFNLEdBQUcsdUNBQXVDbE0sRUFBRSxHQUFHLE9BQU15RSxFQUFFbEcsRUFBRTJOLE1BQU0sS0FBS2xNLEVBQUUsSUFBRyxXQUFXLE1BQU0sMENBQTBDekIsRUFBRTJOLE1BQU0sR0FBRyx5Q0FBeUNsTSxFQUFFLEdBQUcsUUFBTyxJQUFJTSxFQUFFMitCLEdBQUduK0IsRUFBRW9MLE1BQU1sTSxFQUFFWCxFQUFFLEVBQUVMLEdBQUcsT0FBT3VnQixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFODlCLGdCQUFnQno4QixFQUFFdkMsRUFBRStCLEtBQUksQ0FBQ3FvRCxJQUFJN25ELEVBQUVzbkQsS0FBSzdwRCxJQUF0M0IsQ0FBMjNCUyxFQUFFUyxFQUFFbEIsRUFBRTJOLE1BQU1sTSxFQUFFWCxRQUFPLE9BQU9iLEVBQUVnRyxFQUFFK0osS0FBSy9KLEVBQUUwSCxNQUFNLEdBQUcxSCxFQUFFMEgsTUFBTSxHQUFHMUgsRUFBRTBILE1BQU0sR0FBRzFILEVBQUUwSCxNQUFNLElBQUkxSCxLQUFLdWpELEdBQUduNEIsR0FBRyxDQUFDZzVCLGlCQUFpQlosS0FBS2EsR0FBR2o1QixHQUFHLENBQUNrNUIsZ0JBQWdCbEIsS0FBS3JmLEdBQUczWSxHQUFHLENBQUNtNUIsaUJBQWlCLFNBQVN0cEQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEVBQUV2QyxRQUFHLElBQVNTLElBQUlBLEVBQUUsYUFBUSxJQUFTOEIsSUFBSUEsRUFBRSxDQUFDLEVBQUUsSUFBSSxJQUFJUixFQUFFeXVCLEdBQUd0dkIsRUFBRSxJQUFJLG1CQUFtQnNCLEVBQUVndUIsR0FBR3h1QixFQUFFLFNBQVMsbUJBQW1CL0IsRUFBRThCLEVBQUUxQixHQUFFLEVBQUcsSUFBSTBCLEVBQUUwTCxPQUFPcE4sR0FBRSxFQUFHSixFQUFFOEIsRUFBRWlPLEtBQUssRUFBRWpPLEVBQUU0TCxNQUFNLEdBQUc1TCxFQUFFNEwsTUFBTSxHQUFHNUwsRUFBRTRMLE1BQU0sS0FBS3pILEVBQUUsSUFBSWpHLEVBQUV3TixNQUFLLFdBQVcsTUFBTSxnRUFBZ0V4TixFQUFFd04sS0FBSyxPQUFNdkgsRUFBRSxJQUFJMUQsRUFBRWlMLE1BQUssV0FBVyxNQUFNLGlFQUFpRWpMLEVBQUVpTCxLQUFLLE9BQU12SCxFQUFFakcsRUFBRTBOLE1BQU0sS0FBS25MLEVBQUVtTCxNQUFNLElBQUcsV0FBVyxNQUFNLHVEQUF1RDFOLEVBQUUwTixNQUFNLEdBQUcsbURBQW1EbkwsRUFBRW1MLE1BQU0sR0FBRyxPQUFNLE1BQU1wTCxJQUFJQSxFQUFFLENBQUMsRUFBRSxJQUFJMkQsRUFBRTg4QixHQUFHdmhDLEVBQUVjLElBQUcsV0FBVyxNQUFNLGdGQUFnRmQsRUFBRSxtQkFBbUJjLEVBQUUsT0FBTSxNQUFNdkMsR0FBR2tHLEVBQUVNLEVBQUUxRixJQUFHLFdBQVcsTUFBTSxnRkFBZ0ZkLEVBQUUsZ0JBQWdCYyxFQUFFLE9BQU0sSUFBSW1GLEVBQUVzNkIsR0FBR3RnQyxFQUFFME4sTUFBTW5MLEVBQUVtTCxNQUFNbE0sRUFBRWMsRUFBRXpCLEVBQUVkLEdBQUUsR0FBSThCLEVBQUVrZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFMlcsZ0JBQWdCNVgsRUFBRXVDLEVBQUV5RCxHQUFHLE9BQU9qRSxFQUFFLENBQUMvQixFQUFFdUMsSUFBSWYsSUFBRyxDQUFDK0UsRUFBRXZHLEVBQUVncUQsUUFBUXpuRCxJQUFHLFNBQVN0QixFQUFFYyxHQUFHa0UsRUFBRTY4QixHQUFHeGdDLElBQUcsV0FBVyxNQUFNLDZHQUE2R0EsRUFBRSxPQUFNLElBQUlkLEVBQUVPLEVBQUUsR0FBR2xCLEVBQUVrQixFQUFFLEdBQUcsTUFBTSxDQUFDd0UsRUFBRSxXQUFXLE9BQU8sU0FBU3RGLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsSUFBSUwsRUFBRXVCLEVBQUVPLEdBQUUsRUFBRyxJQUFJUCxFQUFFeUwsT0FBT2xMLEdBQUUsRUFBRzlCLEVBQUV1QixFQUFFZ08sS0FBSyxFQUFFaE8sRUFBRTJMLE1BQU0sR0FBRzNMLEVBQUUyTCxNQUFNLEdBQUczTCxFQUFFMkwsTUFBTSxLQUFLLElBQUkzTixFQUFFZ2hCLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUUwOUIsd0JBQXdCbitCLEVBQUVnQixFQUFFWCxLQUFJLENBQUN3b0QsS0FBSzdvRCxJQUFJLE9BQU84QixFQUFFdkMsRUFBRStQLEtBQUsvUCxFQUFFMk4sTUFBTSxHQUFHM04sRUFBRTJOLE1BQU0sR0FBRzNOLEVBQUUyTixNQUFNLElBQUkzTixFQUFuTyxDQUFzT3lCLEVBQUVrTSxNQUFNek0sRUFBRUosRUFBRW1GLElBQUlna0QsUUFBUSxXQUFXLE9BQU8sU0FBUy9vRCxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLElBQUlMLEVBQUVTLEVBQUUsSUFBSUEsRUFBRXVNLE9BQU9oTixFQUFFUyxFQUFFOE8sS0FBSyxFQUFFOU8sRUFBRXlNLE1BQU0sR0FBR3pNLEVBQUV5TSxNQUFNLEdBQUd6TSxFQUFFeU0sTUFBTSxLQUFLLElBQUlwTCxFQUFFUCxFQUFFLE9BQU8sSUFBSU8sRUFBRWtMLE9BQU9sTCxFQUFFUCxFQUFFZ08sS0FBSyxFQUFFaE8sRUFBRTJMLE1BQU0sR0FBRzNMLEVBQUUyTCxNQUFNLEdBQUczTCxFQUFFMkwsTUFBTSxLQUFLcVQsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRTI5Qix5QkFBeUJwK0IsRUFBRThCLEVBQUV6QixLQUFJLENBQUM0b0QsSUFBSWpwRCxFQUFFNm9ELEtBQUsvbUQsSUFBOU8sQ0FBbVBkLEVBQUVQLEVBQUVKLEVBQUU2TSxNQUFNMUgsUUFBTyxPQUFPNUYsRUFBRXlCLEVBQUVpTyxLQUFLak8sRUFBRTZMLE1BQU0sR0FBRzdMLEVBQUU2TCxNQUFNLEdBQUc3TCxFQUFFNkwsTUFBTSxJQUFJN0wsS0FBSzJvRCxHQUFHcDVCLEdBQUcsQ0FBQ3E1QixpQkFBaUIsU0FBU3hwRCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsRUFBRXZDLFFBQUcsSUFBU3VDLElBQUlBLEVBQUUsQ0FBQyxFQUFFLFNBQUksSUFBU3ZDLElBQUlBLEVBQUUsUUFBUSxJQUFJK0IsRUFBRXl1QixHQUFHdHZCLEVBQUUsSUFBSSxtQkFBbUJzQixFQUFFZ3VCLEdBQUd4dUIsRUFBRSxrQkFBa0IsbUJBQW1CL0IsRUFBRXV3QixHQUFHL3VCLEVBQUUsa0JBQWtCLG1CQUFtQnBCLEVBQUUwQixFQUFFa0UsR0FBRSxFQUFHLEdBQUcsSUFBSWxFLEVBQUUwTCxPQUFPeEgsR0FBRSxFQUFHNUYsRUFBRTBCLEVBQUVpTyxLQUFLLEVBQUVqTyxFQUFFNEwsTUFBTSxHQUFHNUwsRUFBRTRMLE1BQU0sR0FBRzVMLEVBQUU0TCxNQUFNLEtBQUssU0FBUzNOLEVBQUUsTUFBTSxJQUFJMkUsTUFBTSxzRkFBc0Z1QixFQUFFLElBQUk3RixFQUFFb04sTUFBSyxXQUFXLE1BQU0sZ0VBQWdFcE4sRUFBRW9OLEtBQUssT0FBTXZILEVBQUUsSUFBSTFELEVBQUVpTCxNQUFLLFdBQVcsTUFBTSwyRUFBMkVqTCxFQUFFaUwsS0FBSyxPQUFNdkgsRUFBRSxJQUFJakcsRUFBRXdOLE1BQUssV0FBVyxNQUFNLDJFQUEyRWpMLEVBQUVpTCxLQUFLLE9BQU12SCxFQUFFLElBQUlqRyxFQUFFME4sTUFBTSxJQUFHLFdBQVcsTUFBTSx5RkFBeUYxTixFQUFFME4sTUFBTSxHQUFHLE9BQU16SCxFQUFFLElBQUlqRyxFQUFFME4sTUFBTSxJQUFHLFdBQVcsTUFBTSx5RkFBeUYxTixFQUFFME4sTUFBTSxHQUFHLE9BQU0sSUFBSTdMLEVBQUVVLEVBQUVtTCxNQUFNLEdBQUdyTixFQUFFa0MsRUFBRW1MLE1BQU0sR0FBR3pILEVBQUVqRyxFQUFFME4sTUFBTSxLQUFLN0wsRUFBRXhCLEdBQUUsV0FBVyxNQUFNLDZFQUE2RXdCLEVBQUV4QixFQUFFLGFBQWFMLEVBQUUwTixNQUFNLEdBQUcsT0FBTSxJQUFJdkgsRUFBRTRqQyxHQUFHM3BDLEVBQUVtQyxFQUFFMUIsRUFBRUwsRUFBRVQsRUFBRXVDLEdBQUduQyxFQUFFbXBELEdBQUduakQsRUFBRW5HLEVBQUUsRUFBRSxRQUFRRCxHQUFHLE9BQU9pRyxFQUFFN0YsRUFBRTJQLEtBQUszUCxFQUFFdU4sTUFBTSxHQUFHdk4sRUFBRXVOLE1BQU0sR0FBR3ZOLEVBQUV1TixNQUFNLElBQUl2TixLQUFLdXFELEdBQUd0NUIsR0FBRyxDQUFDdTVCLGlCQUFpQixTQUFTMXBELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixHQUFHLE9BQU84bUQsR0FBRzVuRCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLG1CQUFtQnN2QixHQUFHeHVCLEVBQUUsU0FBUyxtQkFBbUJsQixFQUFFTCxFQUFFLE9BQU84QixNQUFNc29ELEdBQUd4NUIsR0FBRyxDQUFDeTVCLGlCQUFpQixTQUFTNXBELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsT0FBT21wRCxHQUFHbm9ELEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksbUJBQW1Cc3ZCLEdBQUd4dUIsRUFBRSxTQUFTLG1CQUFtQmxCLEVBQUVMLE1BQVVzcUQsR0FBRzE1QixHQUFHLENBQUMyNUIsUUFBUSxTQUFTOXBELEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsSUFBSUwsT0FBRSxJQUFTZ0IsSUFBSUEsR0FBRSxRQUFJLElBQVNYLElBQUlBLEdBQUUsR0FBSSxJQUFJeUIsRUFBRWl1QixHQUFHdHZCLEVBQUUsSUFBSSxVQUFVbEIsRUFBRXd3QixHQUFHeHVCLEVBQUUsSUFBSSxVQUFVdkIsRUFBRWthLEdBQUdwWSxFQUFFdkMsR0FBR3VDLEVBQUU5QixFQUFFLEdBQUdULEVBQUVTLEVBQUUsR0FBRyxJQUFJc0IsRUFBRU4sRUFBRWMsRUFBRW9MLE1BQU1wTCxFQUFFa0wsS0FBSyxHQUFHbEwsRUFBRW9MLE1BQU1wTCxFQUFFa0wsS0FBSyxHQUFHakwsRUFBRTFCLEVBQUVkLEVBQUUyTixNQUFNM04sRUFBRXlOLEtBQUssR0FBR3pOLEVBQUUyTixNQUFNM04sRUFBRXlOLEtBQUssR0FBR3hOLEVBQUV3QixFQUFFYyxFQUFFb0wsTUFBTXBMLEVBQUVrTCxLQUFLLEdBQUdsTCxFQUFFb0wsTUFBTXBMLEVBQUVrTCxLQUFLLEdBQUdwTixFQUFFUyxFQUFFZCxFQUFFMk4sTUFBTTNOLEVBQUV5TixLQUFLLEdBQUd6TixFQUFFMk4sTUFBTTNOLEVBQUV5TixLQUFLLEdBQUd4SCxFQUFFMUQsRUFBRW9MLE1BQU12RyxNQUFNLEdBQUcsR0FBR3RGLEVBQUU5QixFQUFFMk4sTUFBTXZHLE1BQU0sR0FBRyxHQUFHOUcsRUFBRWlHLEVBQUVOLEdBQUdHLEVBQUVHLEVBQUV6RSxHQUFHb0UsRUFBRTNELEVBQUVrTCxNQUFNLEdBQUd6TixFQUFFeU4sTUFBTSxHQUFHbEwsRUFBRWtMLE9BQU96TixFQUFFeU4sTUFBSyxXQUFXLE1BQU0sNEVBQTRFbEwsRUFBRWtMLEtBQUssUUFBUXpOLEVBQUV5TixLQUFLLE9BQU12SCxFQUFFQyxFQUFFRixFQUFFbkUsSUFBRyxXQUFXLE1BQU0sc0NBQXNDbUUsRUFBRSxVQUFVbkUsRUFBRSw0QkFBNEJTLEVBQUVvTCxNQUFNLFFBQVEzTixFQUFFMk4sTUFBTSxrQkFBaUJ6SCxFQUFFbkUsSUFBSVMsR0FBRSxXQUFXLE1BQU0sa0NBQWtDVCxFQUFFLFVBQVVTLEVBQUUsNEJBQTRCRCxFQUFFb0wsTUFBTSxRQUFRM04sRUFBRTJOLE1BQU0sbUJBQW1CbE0sRUFBRSxtQkFBbUJYLEVBQUUsa0JBQWlCLElBQUlWLEVBQUVtQyxFQUFFb0wsTUFBTXZHLE1BQU0sR0FBRyxHQUFHRyxPQUFPLENBQUN0SCxFQUFFSSxJQUFJbUcsRUFBRS9FLEVBQUVjLEVBQUV3TixLQUFLelAsRUFBRXlCLEVBQUU5QixHQUFHc0MsRUFBRXdOLEtBQUt6UCxFQUFFTCxFQUFFOEIsR0FBRzBFLEVBQUUzRixFQUFFZCxFQUFFK1AsS0FBSzNKLEVBQUUvRixFQUFFbUMsR0FBR3hDLEVBQUUrUCxLQUFLM0osRUFBRTVELEVBQUVuQyxHQUFHLE9BQU8yZ0IsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSXZCLEVBQUVTLEVBQUV1OEIsWUFBWWozQixFQUFFQyxFQUFFaEYsRUFBRVgsR0FBRyxPQUFPa0IsRUFBRSxDQUFDd0UsRUFBRUMsSUFBSWhHLElBQUcsQ0FBQ2dzQyxHQUFHam1DLEVBQUVzOUMsR0FBR3I5QyxJQUFHLFNBQVN2RixFQUFFYyxHQUFHLElBQUl2QixFQUFFdUIsRUFBRU8sRUFBRTlCLEVBQUUsR0FBR1QsRUFBRVMsRUFBRSxHQUFHLE9BQU9nQixHQUFHWCxHQUFHVyxHQUFHWCxFQUFFLENBQUMyckMsR0FBRyxXQUFXLE9BQU92ckMsRUFBRTRRLE9BQU85UixHQUFFLEdBQUcsSUFBSzhqRCxHQUFHLFdBQVcsT0FBTzVpRCxFQUFFNFEsT0FBT3ZQLEdBQUUsR0FBRyxLQUFNZCxJQUFJWCxFQUFFLENBQUMyckMsR0FBRyxXQUFXLE9BQU96c0MsRUFBRThSLE9BQU81USxHQUFFLEdBQUcsSUFBSzRpRCxHQUFHLFdBQVcsT0FBT3ZoRCxFQUFFdVAsT0FBTzVRLEdBQUUsR0FBRyxLQUFNLENBQUN1ckMsR0FBRyxXQUFXLE9BQU96c0MsRUFBRThSLE9BQU81USxHQUFFLEdBQUcsSUFBSzRpRCxHQUFHLFdBQVcsT0FBTzVpRCxFQUFFNFEsT0FBT3ZQLEdBQUUsR0FBRyxLQUFNLENBQUNrcUMsR0FBRyxXQUFXLE9BQU92ckMsRUFBRTRRLE9BQU85UixHQUFFLEdBQUcsSUFBSzhqRCxHQUFHLFdBQVcsT0FBT3ZoRCxFQUFFdVAsT0FBTzVRLEdBQUUsR0FBRyxRQUFRMk8sUUFBUXpQLE1BQU02cUQsR0FBRzU1QixHQUFHLENBQUM2NUIsS0FBSyxTQUFTaHFELEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsS0FBSyxPQUFPSixFQUFFMHZCLEdBQUd4dUIsRUFBRSxLQUFLLE9BQU9rRSxJQUFJLElBQUl6RSxFQUFFZ00sTUFBTSxJQUFJaE0sRUFBRWdNLE1BQU0sSUFBSTNNLEVBQUUyTSxNQUFNLElBQUkzTSxFQUFFMk0sT0FBTSxXQUFXLE1BQU0sK0RBQStEaE0sRUFBRWdNLEtBQUssUUFBUTNNLEVBQUUyTSxLQUFLLE9BQU0sSUFBSWhOLEVBQUUsSUFBSWdCLEVBQUVnTSxLQUFLaE0sRUFBRWlNLEtBQUtqTSxFQUFFa00sTUFBTSxHQUFHcEwsRUFBRSxJQUFJekIsRUFBRTJNLEtBQUszTSxFQUFFNE0sS0FBSzVNLEVBQUU2TSxNQUFNLEdBQUcsT0FBT3pILEVBQUV6RixJQUFJOEIsR0FBRSxXQUFXLE1BQU0sZ0VBQWdFOUIsRUFBRSxRQUFROEIsRUFBRSxPQUFNLElBQUlkLEVBQUVnTSxNQUFNLElBQUkzTSxFQUFFMk0sS0FBS2hNLEVBQUVxTyxLQUFLLEdBQUcsR0FBR2dDLE9BQU9oUixFQUFFZ1AsTUFBTSxFQUFFLElBQUlGLFdBQVcsSUFBSW5PLEVBQUVnTSxNQUFNLElBQUkzTSxFQUFFMk0sS0FBS2hNLEVBQUVxTyxLQUFLLEdBQUcsR0FBR2dDLE9BQU9oUixFQUFFZ1AsS0FBS2hQLEVBQUU2TSxNQUFNLEdBQUc3TSxFQUFFNk0sTUFBTSxLQUFLZ0MsT0FBTyxJQUFJbE8sRUFBRWdNLE1BQU0sSUFBSTNNLEVBQUUyTSxLQUFLaE0sRUFBRXFRLE9BQU9oUixFQUFFZ1AsTUFBTSxFQUFFLElBQUlILE9BQU9sTyxFQUFFcVEsT0FBT2hSLEVBQUVnUCxLQUFLaFAsRUFBRTZNLE1BQU0sR0FBRzdNLEVBQUU2TSxNQUFNLFFBQVF3OUMsR0FBRzk1QixHQUFHLENBQUMrNUIsY0FBYyxTQUFTbHFELEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsS0FBSyxnQkFBZ0JKLEVBQUUwdkIsR0FBR3h1QixFQUFFLEtBQUssZ0JBQWdCLE9BQU9rRSxFQUFFLElBQUl6RSxFQUFFZ00sTUFBTSxJQUFJM00sRUFBRTJNLE1BQUssV0FBVyxNQUFNLCtEQUErRGhNLEVBQUVnTSxLQUFLLFFBQVEzTSxFQUFFMk0sS0FBSyxPQUFNaE0sRUFBRXFPLE1BQU0sRUFBRSxHQUFHZ0MsT0FBT2hSLEVBQUVnUCxLQUFLLEdBQUcsT0FBV3U3QyxHQUFHaDZCLEdBQUcsQ0FBQ2k2QixTQUFTLFNBQVNwcUQsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLFdBQVcsR0FBRyxJQUFJTyxFQUFFZ00sS0FBSyxPQUFPaE0sRUFBRThQLFFBQVEsSUFBSXpRLEVBQUV1RyxFQUFFckYsRUFBRVAsRUFBRWtNLE9BQU8sT0FBT3FULEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUUrUSxRQUFReFEsRUFBRVgsS0FBSSxDQUFDMHlCLEdBQUcveEIsSUFBRyxTQUFTUCxHQUFHLE1BQU0sQ0FBQ3N5QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFK1EsUUFBUW5SLFFBQU9xUSxVQUFVMVAsTUFBTThwRCxHQUFHbDZCLEdBQUcsQ0FBQ202QixXQUFXLFNBQVN0cUQsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxJQUFJLFdBQVcsT0FBT2dGLEVBQUUsSUFBSWxFLEVBQUV5TCxNQUFLLFdBQVcsTUFBTSxxREFBcUR6TCxFQUFFeUwsS0FBSyxPQUFNNDlDLEdBQUdycEQsRUFBRSxNQUFNeXBELEdBQUdwNkIsR0FBRyxDQUFDcTZCLFdBQVcsU0FBU3hxRCxFQUFFYyxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksV0FBVyxPQUFPZ0YsRUFBRSxJQUFJekUsRUFBRWdNLE1BQUssV0FBVyxNQUFNLHFEQUFxRGhNLEVBQUVnTSxLQUFLLE9BQU00OUMsR0FBRzVwRCxFQUFFTyxNQUFNMnBELEdBQUd0NkIsR0FBRyxDQUFDdTZCLFdBQVcsU0FBUzFxRCxFQUFFYyxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksV0FBVyxPQUFPZ0YsRUFBRSxJQUFJekUsRUFBRWdNLE1BQUssV0FBVyxNQUFNLHFEQUFxRGhNLEVBQUVnTSxLQUFLLE9BQU00OUMsR0FBRzVwRCxFQUFFTyxNQUFNNnBELEdBQUd4NkIsR0FBRyxDQUFDeTZCLFdBQVcsU0FBUzVxRCxFQUFFYyxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksV0FBVyxPQUFPZ0YsRUFBRSxJQUFJekUsRUFBRWdNLE1BQUssV0FBVyxNQUFNLHFEQUFxRGhNLEVBQUVnTSxLQUFLLE9BQU00OUMsR0FBRzVwRCxFQUFFTyxNQUFNLFNBQVMrcEQsR0FBRzdxRCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxJQUFJdkMsRUFBRXd3QixHQUFHdHZCLEVBQUUsSUFBSSxXQUFXYSxFQUFFL0IsRUFBRXdDLEdBQUUsRUFBRyxJQUFJeEMsRUFBRXlOLE9BQU9qTCxHQUFFLEVBQUdULEVBQUUvQixFQUFFZ1EsS0FBSyxFQUFFaFEsRUFBRTJOLE1BQU0sR0FBRzNOLEVBQUUyTixNQUFNLEdBQUczTixFQUFFMk4sTUFBTSxLQUFLLE1BQU03TSxJQUFJQSxFQUFFLENBQUMsRUFBRSxJQUFJb0YsRUFBRSxJQUFJbkUsRUFBRTBMLE1BQUssV0FBVyxNQUFNLHVEQUF1RDFMLEVBQUUwTCxLQUFLLE9BQU12SCxFQUFFODhCLEdBQUd2aEMsRUFBRVgsSUFBRyxXQUFXLE1BQU0sd0VBQXdFVyxFQUFFLG1CQUFtQlgsRUFBRSxPQUFNLE1BQU15QixHQUFHMkQsRUFBRU0sRUFBRS9GLElBQUcsV0FBVyxNQUFNLHdFQUF3RThCLEVBQUUsZ0JBQWdCOUIsRUFBRSxPQUFNLElBQUlSLEVBQUVvZ0MsR0FBR3QrQixFQUFFNEwsTUFBTTNMLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixHQUFHbEMsRUFBRTJnQixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFK1csUUFBUWxXLEVBQUU5QixHQUFHLE9BQU8rQixFQUFFLENBQUNELEVBQUVOLElBQUlBLElBQUcsQ0FBQytFLEVBQUV6RSxJQUFHLFNBQVNiLEVBQUVxQixHQUFHLElBQUl2QyxFQUFFdUMsRUFBRSxHQUFHUixFQUFFUSxFQUFFLEdBQUcsTUFBTSxDQUFDaUUsRUFBRSxXQUFXLE9BQU8sU0FBU3RGLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsRUFBRStCLEdBQUcsSUFBSVMsRUFBRWd1QixHQUFHdHZCLEVBQUUsS0FBSyxtQkFBbUJqQixFQUFFdXdCLEdBQUd4dUIsRUFBRSxRQUFRLG1CQUFtQjNCLEVBQUVtd0IsR0FBRy91QixFQUFFLFNBQVMsbUJBQW1CeUUsRUFBRWpHLEVBQUV3TixPQUFPakwsRUFBRWlMLE1BQUssV0FBVyxNQUFNLGtCQUFrQnhOLEVBQUV3TixLQUFLLGdDQUFnQ2pMLEVBQUVpTCxLQUFLLE9BQU0sTUFBTWxMLElBQUlBLEVBQUUsQ0FBQyxFQUFFLElBQUkyRCxFQUFFODhCLEdBQUd2aUMsRUFBRThCLElBQUcsV0FBVyxNQUFNLGdGQUFnRjlCLEVBQUUsbUJBQW1COEIsRUFBRSxPQUFNMkQsRUFBRSxJQUFJMUQsRUFBRWlMLE1BQUssV0FBVyxNQUFNLDREQUE0RGpMLEVBQUVpTCxLQUFLLE9BQU12SCxFQUFFLElBQUlqRyxFQUFFd04sTUFBSyxXQUFXLE1BQU0sK0RBQStEeE4sRUFBRXdOLEtBQUssT0FBaUosSUFBSXhILEVBQUVvNkIsR0FBR3BnQyxFQUFFME4sTUFBTTdNLEVBQUVMLEVBQUU4QixFQUFFdkMsRUFBRStCLEdBQUcsT0FBT2lmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUUrOUIsZ0JBQWdCejhCLEVBQUV2QyxFQUFFSSxFQUFFNEYsS0FBSSxDQUFDK2xELElBQUl4cEQsRUFBRTB2QixPQUFPanlCLElBQS8wQixDQUFvMUJpQixFQUFFbEIsRUFBRStCLEVBQUVDLEVBQUVQLEVBQUVYLEVBQUVMLFFBQU8sT0FBTytCLEVBQUVuQyxFQUFFMFAsS0FBSzFQLEVBQUVzTixNQUFNLEdBQUd0TixFQUFFc04sTUFBTSxHQUFHdE4sRUFBRXNOLE1BQU0sSUFBSXROLEVBQUUsU0FBUzRyRCxHQUFHL3FELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixHQUFHLElBQUl2QyxFQUFFd3dCLEdBQUd0dkIsRUFBRSxJQUFJLFVBQVUsV0FBVyxNQUFNSixJQUFJQSxFQUFFLENBQUMsRUFBRSxJQUFJb0YsRUFBRTg4QixHQUFHdmhDLEVBQUVYLElBQUcsV0FBVyxNQUFNLHdFQUF3RVcsRUFBRSxtQkFBbUJYLEVBQUUsT0FBTSxJQUFJaUIsRUFBRS9CLEVBQUV3QyxHQUFFLEVBQUcsSUFBSXhDLEVBQUV5TixPQUFPakwsR0FBRSxFQUFHVCxFQUFFL0IsRUFBRWdRLEtBQUssRUFBRWhRLEVBQUUyTixNQUFNLEdBQUczTixFQUFFMk4sTUFBTSxHQUFHM04sRUFBRTJOLE1BQU0sS0FBS3pILEVBQUUsSUFBSW5FLEVBQUUwTCxNQUFLLFdBQVcsTUFBTSxtREFBbUQxTCxFQUFFMEwsS0FBSyxPQUFNLE1BQU1sTCxHQUFHMkQsRUFBRU0sRUFBRS9GLElBQUcsV0FBVyxNQUFNLHdFQUF3RThCLEVBQUUsZ0JBQWdCOUIsRUFBRSxPQUFNLElBQUlSLEVBQUVvZ0MsR0FBR3QrQixFQUFFNEwsTUFBTTNMLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixHQUFHbEMsRUFBRTJnQixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFOFcsUUFBUWpXLEVBQUU5QixLQUFJLENBQUN1RyxFQUFFekUsSUFBRyxTQUFTYixHQUFHLE1BQU0sQ0FBQ3NGLEVBQUUsV0FBVyxPQUFPLFNBQVN0RixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxJQUFJdkMsRUFBRXd3QixHQUFHdHZCLEVBQUUsS0FBSyxtQkFBbUJhLEVBQUV5dUIsR0FBR3h1QixFQUFFLFFBQVEsbUJBQW1Ca0UsRUFBRW5FLEVBQUUwTCxPQUFPek4sRUFBRXlOLE1BQUssV0FBVyxNQUFNLGtCQUFrQjFMLEVBQUUwTCxLQUFLLGdDQUFnQ3pOLEVBQUV5TixLQUFLLE9BQU0sTUFBTWhOLElBQUlBLEVBQUUsQ0FBQyxFQUFFLElBQUl5RixFQUFFODhCLEdBQUdsaUMsRUFBRUwsSUFBRyxXQUFXLE1BQU0sZ0ZBQWdGSyxFQUFFLG1CQUFtQkwsRUFBRSxPQUFNLElBQUkrQixFQUFFVCxFQUFFOUIsRUFBRUQsRUFBRUssR0FBRSxFQUFHLElBQUkwQixFQUFFMEwsT0FBT3BOLEdBQUUsRUFBR21DLEVBQUVULEVBQUVpTyxLQUFLLEVBQUVqTyxFQUFFNEwsTUFBTSxHQUFHNUwsRUFBRTRMLE1BQU0sR0FBRzVMLEVBQUU0TCxNQUFNLElBQUkxTixFQUFFRCxFQUFFZ1EsS0FBSyxFQUFFaFEsRUFBRTJOLE1BQU0sR0FBRzNOLEVBQUUyTixNQUFNLEdBQUczTixFQUFFMk4sTUFBTSxLQUFLekgsRUFBRSxJQUFJakcsRUFBRXdOLE1BQUssV0FBVyxNQUFNLDREQUE0RHhOLEVBQUV3TixLQUFLLE9BQU12SCxFQUFFLElBQUkxRCxFQUFFaUwsTUFBSyxXQUFXLE1BQU0sK0RBQStEakwsRUFBRWlMLEtBQUssT0FBTSxJQUFJeEgsRUFBRW82QixHQUFHNzlCLEVBQUVtTCxNQUFNbE0sRUFBRVgsRUFBRUwsRUFBRThCLEdBQUdULEVBQUVrZixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFZytCLGdCQUFnQmovQixFQUFFdUMsRUFBRXlELEtBQUksQ0FBQ3FqRCxLQUFLcnBELEVBQUVpc0QsUUFBUTFwRCxJQUFJLE9BQU9uQyxFQUFFeUIsRUFBRWlPLEtBQUtqTyxFQUFFNkwsTUFBTSxHQUFHN0wsRUFBRTZMLE1BQU0sR0FBRzdMLEVBQUU2TCxNQUFNLElBQUk3TCxFQUExMEIsQ0FBNjBCWixFQUFFYSxFQUFFQyxFQUFFUCxFQUFFWCxFQUFFTCxRQUFPLE9BQU9KLEVBQUVBLEVBQUU4UCxLQUFLblEsRUFBRXFOLE9BQU83SyxFQUFFbkMsRUFBRTBQLEtBQUsxUCxFQUFFc04sTUFBTSxHQUFHdE4sRUFBRXNOLE1BQU0sR0FBR3ROLEVBQUVzTixNQUFNLElBQUl0TixFQUFFLElBQUk4ckQsR0FBRzk2QixHQUFHLENBQUMrNkIsU0FBUyxTQUFTbHJELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsT0FBT3NyRCxHQUFHN3FELEVBQUVjLEVBQUVQLEVBQUUsRUFBRVgsRUFBRUwsTUFBTTRyRCxHQUFHaDdCLEdBQUcsQ0FBQ2k3QixTQUFTLFNBQVNwckQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxPQUFPd3JELEdBQUcvcUQsRUFBRWMsRUFBRVAsRUFBRSxFQUFFWCxFQUFFTCxNQUFNOHJELEdBQUdsN0IsR0FBRyxDQUFDbTdCLE1BQU0sU0FBU3RyRCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxNQUFNOUIsSUFBSUEsRUFBRSxDQUFDLEVBQUUsSUFBSSxNQUFNOEIsSUFBSUEsRUFBRSxHQUFHLElBQUl6QixJQUFJQSxFQUFFLFNBQVMsSUFBSWQsRUFBRXd3QixHQUFHdHZCLEVBQUUsSUFBSSxXQUFXYSxFQUFFL0IsRUFBRXdDLEdBQUUsRUFBRyxJQUFJeEMsRUFBRXlOLE9BQU9qTCxHQUFFLEVBQUdULEVBQUUvQixFQUFFZ1EsS0FBSyxFQUFFaFEsRUFBRTJOLE1BQU0sR0FBRzNOLEVBQUUyTixNQUFNLEdBQUczTixFQUFFMk4sTUFBTSxLQUFLekgsRUFBRTg4QixHQUFHemdDLEVBQUU5QixJQUFHLFdBQVcsTUFBTSxxRUFBcUU4QixFQUFFLG1CQUFtQjlCLEVBQUUsT0FBTSxJQUFJUixFQUFFSSxFQUFFZ2dDLEdBQUd0K0IsRUFBRTRMLE1BQU0zTCxFQUFFTyxFQUFFOUIsRUFBRUssR0FBR21GLEVBQUUsQ0FBQzVGLEVBQUU2aEMsZUFBZTdoQyxFQUFFOGhDLGVBQWVsaUMsRUFBRSxTQUFTYSxFQUFFLFNBQVNJLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRW9HLEtBQUksU0FBU3BHLEVBQUVPLEdBQUcsT0FBT1AsR0FBR0EsRUFBRSxJQUFJYyxFQUFFUCxHQUFHLE1BQUs2RixLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUUsS0FBSUosRUFBRVcsRUFBRTZGLEtBQUksU0FBU3BHLEdBQUcsT0FBTzJFLEtBQUs4SSxNQUFNek4sRUFBRSxNQUFLVCxFQUFFZ0IsRUFBRTZGLEtBQUksU0FBU3BHLEVBQUVjLEdBQUcsT0FBT2QsRUFBRUosRUFBRWtCLE1BQUssT0FBT1AsRUFBRTZGLEtBQUksU0FBU3BHLEVBQUVjLEdBQUcsTUFBTSxDQUFDbEIsRUFBRWtCLEdBQUd2QixFQUFFdUIsT0FBM04sQ0FBa08sQ0FBQzNCLEVBQUV5aEMsYUFBYXpoQyxFQUFFMGhDLGFBQWE5N0IsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLElBQUluRSxFQUFFLElBQUltRSxFQUFFLElBQUksSUFBSUEsRUFBRSxHQUFHM0YsRUFBRSxTQUFTWSxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUVXLEVBQUU2RixLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUUsTUFBS1QsRUFBRWdCLEVBQUU2RixLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUUsTUFBS3FCLEVBQUVyQixFQUFFcUcsT0FBT3pHLEVBQUVMLEdBQUdULEVBQUVnQyxFQUFFc0YsS0FBSSxTQUFTcEcsRUFBRWMsR0FBRyxPQUFPZCxFQUFFcUIsRUFBRVAsR0FBR2QsR0FBR0EsS0FBSWEsRUFBRXRCLEVBQUU2RyxLQUFJLFNBQVNwRyxFQUFFYyxHQUFHLE9BQU9kLEVBQUVsQixFQUFFZ0MsTUFBc0YsTUFBTSxDQUFyRkEsRUFBRXNGLEtBQUksU0FBU3BHLEVBQUVjLEdBQUcsTUFBTSxDQUFDbEIsRUFBRWtCLEdBQUdELEVBQUVDLE9BQVFBLEVBQUVzRixLQUFJLFNBQVNwRyxFQUFFYyxHQUFHLE1BQU0sQ0FBQyxFQUFFaEMsRUFBRWdDLFFBQXBRLENBQXVSLENBQUMzQixFQUFFbWhDLFNBQVNuaEMsRUFBRW9oQyxTQUFTeDdCLEVBQUVoRyxHQUFHbUcsRUFBRTlGLEVBQUUsR0FBR0YsRUFBRUUsRUFBRSxHQUFHaUcsRUFBRXpFLEVBQUVoQixFQUFFLFFBQVFxRixFQUFFckUsRUFBRUMsRUFBRXU0QixHQUFHdjRCLEVBQUVrRSxFQUFFRyxHQUFHSSxHQUFHLFFBQVEvRSxFQUFFLFdBQVcsT0FBT3dxRCxHQUFHOWxELEVBQUVuRSxFQUFFTyxFQUFFLEVBQUVnRSxJQUFJLFdBQVcsT0FBT3dsRCxHQUFHNWxELEVBQUVuRSxFQUFFTyxFQUFFLEVBQUVnRSxPQUFPRSxFQUFFM0UsRUFBRTBFLEVBQUVreEIsR0FBR2x4QixFQUFFUCxFQUFFN0YsR0FBRyxPQUFPb0MsRUFBRWlFLEVBQUVzSixLQUFLdEosRUFBRWtILE1BQU0sR0FBR2xILEVBQUVrSCxNQUFNLEdBQUdsSCxFQUFFa0gsTUFBTSxJQUFJbEgsS0FBS2dtRCxHQUFHcDdCLEdBQUcsQ0FBQ3E3QixXQUFXLFNBQVN4ckQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEVBQUV2QyxRQUFHLElBQVN1QyxJQUFJQSxFQUFFLFNBQVMsSUFBSVIsRUFBRXl1QixHQUFHdHZCLEVBQUUsSUFBSSxhQUFhc0IsRUFBRVQsRUFBRTlCLEdBQUUsRUFBRyxJQUFJOEIsRUFBRTBMLE9BQU94TixHQUFFLEVBQUd1QyxFQUFFVCxFQUFFa08sS0FBSyxFQUFFbE8sRUFBRTRMLE1BQU0sR0FBRzVMLEVBQUU0TCxNQUFNLEdBQUc1TCxFQUFFNEwsTUFBTSxHQUFHNUwsRUFBRTRMLE1BQU0sS0FBSyxNQUFNM04sSUFBSUEsRUFBRSxDQUFDLEVBQUUsRUFBRSxJQUFJa0csRUFBRSxJQUFJMUQsRUFBRWlMLE1BQUssV0FBVyxNQUFNLHFEQUFxRGpMLEVBQUVpTCxLQUFLLE9BQU12SCxFQUFFLFVBQVUzRCxHQUFFLFdBQVcsTUFBTSxnRkFBZ0ZBLEtBQUkyRCxFQUFFODhCLEdBQUd2aEMsRUFBRXpCLElBQUcsV0FBVyxNQUFNLDBFQUEwRXlCLEVBQUUsbUJBQW1CekIsRUFBRSxPQUFNLE1BQU1TLEdBQUd5RixFQUFFTSxFQUFFMUYsSUFBRyxXQUFXLE1BQU0sMEVBQTBFTCxFQUFFLGdCQUFnQkssRUFBRSxPQUFNLElBQUlULEVBQUVtZ0MsR0FBR2grQixFQUFFbUwsTUFBTTNMLEVBQUVQLEVBQUV6QixFQUFFYyxFQUFFTCxFQUFFOEIsR0FBRzBELEVBQUUrYSxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFbStCLFVBQVU3OEIsRUFBRW5DLEdBQUcsT0FBTzJCLEVBQUUsQ0FBQ1EsRUFBRWYsSUFBSUEsSUFBRyxDQUFDK0UsRUFBRWhFLElBQUcsU0FBU3RCLEVBQUVxQixHQUFHLElBQUlSLEVBQUVRLEVBQUUsR0FBR0MsRUFBRUQsRUFBRSxHQUFHLE1BQU0sQ0FBQ2lFLEVBQUUsV0FBVyxPQUFPLFNBQVN0RixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsRUFBRXZDLEVBQUUrQixHQUFHLElBQUlTLEVBQUVndUIsR0FBR3R2QixFQUFFLEtBQUsscUJBQXFCakIsRUFBRXV3QixHQUFHeHVCLEVBQUUsUUFBUSxxQkFBcUIzQixFQUFFbXdCLEdBQUcvdUIsRUFBRSxTQUFTLHFCQUFxQndFLEVBQUV6RCxFQUFFVixFQUFFN0IsRUFBRUssRUFBRUQsRUFBRStGLEdBQUUsRUFBRyxJQUFJbkcsRUFBRXdOLE9BQU9ySCxHQUFFLEVBQUdILEVBQUV6RCxFQUFFeU4sS0FBSyxFQUFFek4sRUFBRW1MLE1BQU0sR0FBR25MLEVBQUVtTCxNQUFNLEdBQUduTCxFQUFFbUwsTUFBTSxHQUFHbkwsRUFBRW1MLE1BQU0sSUFBSTdMLEVBQUU3QixFQUFFZ1EsS0FBSyxFQUFFaFEsRUFBRTBOLE1BQU0sR0FBRzFOLEVBQUUwTixNQUFNLEdBQUcxTixFQUFFME4sTUFBTSxHQUFHMU4sRUFBRTBOLE1BQU0sSUFBSXJOLEVBQUVELEVBQUU0UCxLQUFLLEVBQUU1UCxFQUFFc04sTUFBTSxHQUFHdE4sRUFBRXNOLE1BQU0sR0FBR3ROLEVBQUVzTixNQUFNLEdBQUd0TixFQUFFc04sTUFBTSxLQUFLekgsRUFBRSxJQUFJRCxFQUFFd0gsTUFBSyxXQUFXLE1BQU0sOERBQThEeEgsRUFBRXdILEtBQUssT0FBTXZILEVBQUUsSUFBSXBFLEVBQUUyTCxNQUFLLFdBQVcsTUFBTSxpRUFBaUUzTCxFQUFFMkwsS0FBSyxPQUFNdkgsRUFBRSxJQUFJNUYsRUFBRW1OLE1BQUssV0FBVyxNQUFNLGtFQUFrRW5OLEVBQUVtTixLQUFLLE9BQU0sTUFBTWxMLElBQUlBLEVBQUUsQ0FBQyxFQUFFLEVBQUUsSUFBSTJELEVBQUU4OEIsR0FBR3ZpQyxFQUFFOEIsSUFBRyxXQUFXLE1BQU0sa0ZBQWtGOUIsRUFBRSxtQkFBbUI4QixFQUFFLE9BQU0sTUFBTVIsR0FBR21FLEVBQUVNLEVBQUV4RyxJQUFHLFdBQVcsTUFBTSxrRkFBa0YrQixFQUFFLGdCQUFnQi9CLEVBQUUsT0FBTSxJQUFJSSxFQUFFb2dDLEdBQUcxK0IsRUFBRTZMLE1BQU03TSxFQUFFTCxFQUFFOEIsRUFBRXZDLEVBQUUrQixHQUFHd0UsRUFBRXlhLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUVvK0Isa0JBQWtCcjVCLEVBQUVuRSxFQUFFeEIsRUFBRUYsS0FBSSxDQUFDeXBELEtBQUs1akQsRUFBRTBtRCxRQUFRN3FELElBQUksT0FBT3NFLEVBQUVHLEVBQUV5SixLQUFLekosRUFBRW9ILE1BQU0sR0FBR3BILEVBQUVvSCxNQUFNLEdBQUdwSCxFQUFFb0gsTUFBTSxHQUFHcEgsRUFBRW9ILE1BQU0sSUFBSXBILEVBQS9tQyxDQUFrbkNyRixFQUFFYSxFQUFFUyxFQUFFUixFQUFFUCxFQUFFekIsRUFBRWMsRUFBRUwsUUFBTyxPQUFPUixFQUFFZ0csRUFBRStKLEtBQUsvSixFQUFFMEgsTUFBTSxHQUFHMUgsRUFBRTBILE1BQU0sR0FBRzFILEVBQUUwSCxNQUFNLEdBQUcxSCxFQUFFMEgsTUFBTSxJQUFJMUgsS0FBSzJtRCxHQUFHdjdCLEdBQUcsQ0FBQ3c3QixXQUFXLFNBQVMzckQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEVBQUV2QyxRQUFHLElBQVN1QyxJQUFJQSxFQUFFLFNBQVMsSUFBSVIsRUFBRXl1QixHQUFHdHZCLEVBQUUsSUFBSSxZQUFZLFdBQVdzQixFQUFFVCxFQUFFOUIsR0FBRSxFQUFHLElBQUk4QixFQUFFMEwsT0FBT3hOLEdBQUUsRUFBR3VDLEVBQUVULEVBQUVrTyxLQUFLLEVBQUVsTyxFQUFFNEwsTUFBTSxHQUFHNUwsRUFBRTRMLE1BQU0sR0FBRzVMLEVBQUU0TCxNQUFNLEdBQUc1TCxFQUFFNEwsTUFBTSxLQUFLLE1BQU0zTixJQUFJQSxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUlrRyxFQUFFLElBQUkxRCxFQUFFaUwsTUFBSyxXQUFXLE1BQU0scURBQXFEakwsRUFBRWlMLEtBQUssT0FBTXZILEVBQUUsVUFBVTNELEdBQUUsV0FBVyxNQUFNLGdGQUFnRkEsS0FBSTJELEVBQUU4OEIsR0FBR3ZoQyxFQUFFekIsSUFBRyxXQUFXLE1BQU0sMEVBQTBFeUIsRUFBRSxtQkFBbUJ6QixFQUFFLE9BQU0sTUFBTVMsR0FBR3lGLEVBQUVNLEVBQUUxRixJQUFHLFdBQVcsTUFBTSwwRUFBMEVMLEVBQUUsZ0JBQWdCSyxFQUFFLE9BQU0sSUFBSVQsRUFBRW1nQyxHQUFHaCtCLEVBQUVtTCxNQUFNM0wsRUFBRVAsRUFBRXpCLEVBQUVjLEVBQUVMLEVBQUU4QixHQUFHMEQsRUFBRSthLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUVpK0IsVUFBVTM4QixFQUFFbkMsS0FBSSxDQUFDbUcsRUFBRWhFLElBQUcsU0FBU3RCLEdBQUcsTUFBTSxDQUFDc0YsRUFBRSxXQUFXLE9BQU8sU0FBU3RGLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsR0FBRyxJQUFJK0IsRUFBRXl1QixHQUFHdHZCLEVBQUUsS0FBSyxxQkFBcUJzQixFQUFFZ3VCLEdBQUd4dUIsRUFBRSxRQUFRLHFCQUFxQi9CLEVBQUU4QixFQUFFMUIsRUFBRW1DLEVBQUV5RCxHQUFFLEVBQUcsSUFBSXpELEVBQUVpTCxPQUFPeEgsR0FBRSxFQUFHaEcsRUFBRThCLEVBQUVrTyxLQUFLLEVBQUVsTyxFQUFFNEwsTUFBTSxHQUFHNUwsRUFBRTRMLE1BQU0sR0FBRzVMLEVBQUU0TCxNQUFNLEdBQUc1TCxFQUFFNEwsTUFBTSxJQUFJdE4sRUFBRW1DLEVBQUV5TixLQUFLLEVBQUV6TixFQUFFbUwsTUFBTSxHQUFHbkwsRUFBRW1MLE1BQU0sR0FBR25MLEVBQUVtTCxNQUFNLEdBQUduTCxFQUFFbUwsTUFBTSxLQUFLekgsRUFBRSxJQUFJakcsRUFBRXdOLE1BQUssV0FBVyxNQUFNLDhEQUE4RHhOLEVBQUV3TixLQUFLLE9BQU12SCxFQUFFLElBQUk3RixFQUFFb04sTUFBSyxXQUFXLE1BQU0saUVBQWlFcE4sRUFBRW9OLEtBQUssT0FBTSxNQUFNaE4sSUFBSUEsRUFBRSxDQUFDLEVBQUUsRUFBRSxJQUFJeUYsRUFBRTg4QixHQUFHbGlDLEVBQUVMLElBQUcsV0FBVyxNQUFNLGtGQUFrRkssRUFBRSxtQkFBbUJMLEVBQUUsT0FBTSxNQUFNVCxHQUFHa0csRUFBRU0sRUFBRWpFLElBQUcsV0FBVyxNQUFNLGtGQUFrRnZDLEVBQUUsZ0JBQWdCdUMsRUFBRSxPQUFNLElBQUlULEVBQUUwK0IsR0FBR25nQyxFQUFFc04sTUFBTWxNLEVBQUVYLEVBQUVMLEVBQUU4QixFQUFFdkMsR0FBR00sRUFBRTBnQixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFaytCLGtCQUFrQm4vQixFQUFFSSxFQUFFeUIsS0FBSSxDQUFDK25ELEtBQUs1cEQsRUFBRTBzRCxRQUFRdHNELElBQUksT0FBTzRGLEVBQUUzRixFQUFFMFAsS0FBSzFQLEVBQUVxTixNQUFNLEdBQUdyTixFQUFFcU4sTUFBTSxHQUFHck4sRUFBRXFOLE1BQU0sR0FBR3JOLEVBQUVxTixNQUFNLElBQUlyTixFQUE3NUIsQ0FBZzZCWSxFQUFFc0IsRUFBRVIsRUFBRVAsRUFBRXpCLEVBQUVjLEVBQUVMLFFBQU8sT0FBT3dGLEVBQUVBLEVBQUVrSyxLQUFLM04sRUFBRTZLLE9BQU9wTixFQUFFZ0csRUFBRStKLEtBQUsvSixFQUFFMEgsTUFBTSxHQUFHMUgsRUFBRTBILE1BQU0sR0FBRzFILEVBQUUwSCxNQUFNLEdBQUcxSCxFQUFFMEgsTUFBTSxJQUFJMUgsS0FBUzZtRCxHQUFHejdCLEdBQUcsQ0FBQzA3QixPQUFPLFNBQVM3ckQsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFTCxFQUFFOEIsRUFBRWl1QixHQUFHdHZCLEVBQUUsSUFBSSxTQUFTLEdBQUcsSUFBSXFCLEVBQUVrTCxLQUFLLE1BQU0sSUFBSTlJLE1BQU0sbUNBQW1DN0QsRUFBRSxpQkFBaUJrQixFQUFFLENBQUNBLEdBQUd1RixPQUFPLElBQUlwRixNQUFNSSxFQUFFa0wsS0FBSyxHQUFHZ0UsS0FBSyxJQUFJelAsRUFBRXNCLE9BQU9mLEVBQUVrTCxLQUFLekwsRUFBRXVGLE9BQU8sSUFBSXBGLE1BQU1JLEVBQUVrTCxLQUFLekwsRUFBRXNCLFFBQVFtTyxLQUFLLElBQUl6UCxFQUFFb0YsU0FBU2pDLFNBQVEsU0FBU2pFLEdBQUdnRixHQUFHLElBQUloRixHQUFFLFdBQVcsTUFBTSwwREFBd0RULEdBQUdBLEVBQUUsTUFBTWdCLEVBQUUsSUFBSVUsTUFBTUksRUFBRWtMLE1BQU1nRSxNQUFNLEdBQUcsaUJBQWlCaFEsRUFBRSxDQUFDQSxHQUFHOEYsT0FBTyxJQUFJcEYsTUFBTUksRUFBRWtMLEtBQUssR0FBR2dFLE1BQU0sSUFBSWhRLEVBQUU2QixPQUFPZixFQUFFa0wsS0FBS2hNLEVBQUU4RixPQUFPLElBQUlwRixNQUFNSSxFQUFFa0wsS0FBS2hNLEVBQUU2QixRQUFRbU8sTUFBTSxJQUFJaFEsR0FBRzZGLEtBQUksU0FBU3BHLEVBQUVjLEdBQUcsT0FBT2QsR0FBRyxFQUFFQSxHQUFHZ0YsR0FBRyxJQUFJaEYsR0FBRSxXQUFXLE1BQU0scURBQXFEQSxFQUFFLGtDQUFrQ2MsRUFBRSxPQUFNTyxFQUFFb0wsTUFBTTNMLEdBQUdsQixFQUFFa0IsT0FBTSxTQUFTZCxFQUFFYyxFQUFFUCxHQUFHeUUsRUFBRWhGLEVBQUV1TSxPQUFPekwsRUFBRXNCLFFBQU8sV0FBVyxNQUFNLGlCQUFpQnBDLEVBQUV1TSxLQUFLLHNCQUFzQnpMLEVBQUUsc0NBQXNDZCxFQUFFdU0sS0FBSyxRQUFPdkgsRUFBRWhGLEVBQUV1TSxPQUFPaE0sRUFBRTZCLFFBQU8sV0FBVyxNQUFNLGlCQUFpQnBDLEVBQUV1TSxLQUFLLHFCQUFxQmhNLEVBQUUsc0NBQXNDUCxFQUFFdU0sS0FBSyxRQUFPLElBQUksSUFBSTNNLEVBQUUsU0FBU0EsR0FBR29GLEVBQUVsRSxFQUFFbEIsR0FBR1csRUFBRVgsSUFBSUksRUFBRXlNLE1BQU03TSxJQUFHLFdBQVcsTUFBTSxpQkFBaUJJLEVBQUV1TSxLQUFLLFlBQVkzTSxFQUFFLFlBQVlBLEVBQUUsT0FBT2tCLEVBQUVsQixHQUFHVyxFQUFFWCxJQUFJLGdDQUFnQ0EsRUFBRSxNQUFNSSxFQUFFeU0sTUFBTTdNLEdBQUcsUUFBT0wsRUFBRSxFQUFFQSxFQUFFUyxFQUFFdU0sT0FBT2hOLEVBQUVLLEVBQUVMLEdBQW5mLENBQXVmOEIsRUFBRXpCLEVBQUVMLEdBQUcsSUFBSVQsRUFBRXVDLEVBQUVvTCxNQUFNLE9BQU9xVCxHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFa0csTUFBTTdFLEVBQUV6QixFQUFFTCxLQUFJLENBQUMreUIsR0FBR2p4QixJQUFHLFNBQVNyQixHQUFHLElBQUksSUFBSWMsRUFBRSxHQUFHUCxFQUFFLEVBQUVBLEVBQUVQLEVBQUV1TSxLQUFLaE0sSUFBSU8sRUFBRXVCLEtBQUssQ0FBQ3pDLEVBQUVXLEdBQUd6QixFQUFFeUIsR0FBR1gsRUFBRVcsR0FBR2hCLEVBQUVnQixLQUFLLE1BQU0sQ0FBQyt4QixHQUFHLFdBQVcsT0FBT3R5QixFQUFFa1IsSUFBSXBRLFdBQVVnckQsR0FBRzM3QixHQUFHLENBQUM0N0IsU0FBUyxTQUFTL3JELEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxXQUFXLE9BQU9nRixFQUFFLElBQUlwRixFQUFFMk0sTUFBSyxXQUFXLE1BQU0sbURBQW1EM00sRUFBRTJNLEtBQUssYUFBWXEvQyxHQUFHaHNELEVBQUUsQ0FBQ2tCLEdBQUcsQ0FBQ1AsT0FBT3lyRCxHQUFHNzdCLEdBQUcsQ0FBQzg3QixTQUFTLFNBQVNqc0QsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFMHZCLEdBQUd0dkIsRUFBRSxJQUFJLFdBQVcsT0FBT2dGLEVBQUUsSUFBSXBGLEVBQUUyTSxNQUFLLFdBQVcsTUFBTSxtREFBbUQzTSxFQUFFMk0sS0FBSyxhQUFZcS9DLEdBQUdoc0QsRUFBRWtCLEVBQUVQLE1BQU0yckQsR0FBRy83QixHQUFHLENBQUNnOEIsU0FBUyxTQUFTbnNELEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxXQUFXLE9BQU9nRixFQUFFLElBQUlwRixFQUFFMk0sTUFBSyxXQUFXLE1BQU0sbURBQW1EM00sRUFBRTJNLEtBQUssYUFBWXEvQyxHQUFHaHNELEVBQUVrQixFQUFFUCxNQUFNNnJELEdBQUdqOEIsR0FBRyxDQUFDazhCLFNBQVMsU0FBU3JzRCxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksV0FBVyxPQUFPZ0YsRUFBRSxJQUFJcEYsRUFBRTJNLE1BQUssV0FBVyxNQUFNLG1EQUFtRDNNLEVBQUUyTSxLQUFLLGFBQVlxL0MsR0FBR2hzRCxFQUFFa0IsRUFBRVAsTUFBTSxTQUFTK3JELEdBQUd0c0QsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxPQUFPdUIsRUFBRXlMLEtBQUtoTSxFQUFFZ00sT0FBT3pMLEVBQUVBLEVBQUU2TixRQUFRaWhCLEdBQUc5dUIsRUFBRTJMLE1BQU03TSxLQUFLSSxFQUFFdU0sS0FBS2hNLEVBQUVnTSxPQUFPdk0sRUFBRUEsRUFBRTJPLFFBQVFpaEIsR0FBRzV2QixFQUFFeU0sTUFBTTdNLEtBQUssQ0FBQzB5QixHQUFHLFdBQVcsSUFBSTF5QixFQUFFSSxFQUFFbVMsSUFBSTVSLEVBQUU4UyxNQUFNdlMsR0FBR21PLEtBQUtqUCxFQUFFbU0sUUFBUSxPQUFPLE1BQU01TSxFQUFFSyxFQUFFQSxFQUFFb1QsVUFBVXpULEtBQUssSUFBSWd0RCxHQUFHcDhCLEdBQUcsQ0FBQ3E4QixLQUFLLFNBQVN4c0QsRUFBRWMsRUFBRVAsUUFBRyxJQUFTTyxJQUFJQSxFQUFFLFdBQU0sSUFBU1AsSUFBSUEsR0FBRSxHQUFJLElBQUlYLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksTUFBTSxRQUFRVCxFQUFFNEcsRUFBRXJGLEVBQUVsQixFQUFFNk0sT0FBT3BMLEVBQUU5QixFQUFFVCxFQUFFZ3hCLEdBQUd6dUIsRUFBRXpCLEVBQUUyTSxNQUFNLE1BQU16TixJQUFJYyxFQUFFQSxFQUFFb1QsVUFBVWxVLEdBQUd1QyxFQUFFMnVCLEdBQUczdUIsRUFBRWUsT0FBT3hDLEVBQUUyTSxPQUFPLElBQUkxTCxFQUFFaWYsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRXFSLElBQUl6UixFQUFFeUIsS0FBSSxDQUFDaXhCLEdBQUcxeUIsSUFBSSxHQUFHVyxFQUFFLENBQUMsSUFBSWUsRUFBRXN1QixHQUFHL3VCLEVBQUU0TCxNQUFNbE4sR0FBRyxPQUFPc0IsRUFBRThOLFFBQVFyTixHQUFHLE9BQU9ULEtBQUs0ckQsR0FBR3Q4QixHQUFHLENBQUN1OEIsS0FBSyxTQUFTMXNELEVBQUVjLEVBQUVQLFFBQUcsSUFBU08sSUFBSUEsRUFBRSxXQUFNLElBQVNQLElBQUlBLEdBQUUsR0FBSSxJQUFJWCxFQUFFMHZCLEdBQUd0dkIsRUFBRSxJQUFJLE1BQU0sUUFBUVQsRUFBRTRHLEVBQUVyRixFQUFFbEIsRUFBRTZNLE9BQU9wTCxFQUFFOUIsRUFBRVQsRUFBRWd4QixHQUFHenVCLEVBQUV6QixFQUFFMk0sTUFBTSxNQUFNek4sSUFBSWMsRUFBRUEsRUFBRW9ULFVBQVVsVSxHQUFHdUMsRUFBRTJ1QixHQUFHM3VCLEVBQUVlLE9BQU94QyxFQUFFMk0sT0FBTyxJQUFJMUwsRUFBRWlmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUVzUixJQUFJMVIsRUFBRXlCLEtBQUksQ0FBQ2l4QixHQUFHMXlCLElBQUksR0FBR1csRUFBRSxDQUFDLElBQUllLEVBQUVzdUIsR0FBRy91QixFQUFFNEwsTUFBTWxOLEdBQUcsT0FBT3NCLEVBQUU4TixRQUFRck4sR0FBRyxPQUFPVCxLQUFLOHJELEdBQUd4OEIsR0FBRyxDQUFDeThCLFFBQVEsU0FBUzVzRCxFQUFFYyxRQUFHLElBQVNBLElBQUlBLEVBQUUsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLFVBQVUsTUFBTWMsSUFBSUEsRUFBRSxHQUFHLElBQUlsQixFQUFFdUcsRUFBRXJGLEVBQUVQLEVBQUVrTSxPQUFPbE4sRUFBRXV3QixHQUFHbHdCLEVBQUVXLEVBQUVnTSxNQUFNLE9BQU8sTUFBTWhOLElBQUlnQixFQUFFQSxFQUFFeVMsVUFBVXpULEdBQUdLLEVBQUVvd0IsR0FBR3B3QixFQUFFd0MsT0FBTzdCLEVBQUVnTSxPQUFPdVQsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSXZCLEVBQUVTLEVBQUUyUixPQUFPcFIsRUFBRVgsRUFBRSxJQUFJLE9BQU9rQixFQUFFLENBQUNQLElBQUloQixJQUFHLENBQUMreUIsR0FBRy94QixJQUFHLFNBQVNQLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBT0QsR0FBRzl4QixXQUFVc3NELEdBQUcxOEIsR0FBRyxDQUFDMjhCLFFBQVEsU0FBUzlzRCxFQUFFYyxRQUFHLElBQVNBLElBQUlBLEVBQUUsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLFVBQVUsTUFBTWMsSUFBSUEsRUFBRSxHQUFHLElBQUlsQixFQUFFdUcsRUFBRXJGLEVBQUVQLEVBQUVrTSxPQUFPbE4sRUFBRXV3QixHQUFHbHdCLEVBQUVXLEVBQUVnTSxNQUFNLE9BQU8sTUFBTWhOLElBQUlnQixFQUFFQSxFQUFFeVMsVUFBVXpULEdBQUdLLEVBQUVvd0IsR0FBR3B3QixFQUFFd0MsT0FBTzdCLEVBQUVnTSxPQUFPdVQsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsSUFBSXZCLEVBQUVTLEVBQUUwUixPQUFPblIsRUFBRVgsRUFBRSxJQUFJLE9BQU9rQixFQUFFLENBQUNQLElBQUloQixJQUFHLENBQUMreUIsR0FBRy94QixJQUFHLFNBQVNQLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsT0FBT0QsR0FBRzl4QixXQUFVd3NELEdBQUc1OEIsR0FBRyxDQUFDNjhCLFdBQVcsU0FBU2h0RCxFQUFFYyxFQUFFUCxRQUFHLElBQVNPLElBQUlBLEVBQUUsV0FBTSxJQUFTUCxJQUFJQSxHQUFFLEdBQUksSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxhQUFhVCxFQUFFNEcsRUFBRXJGLEVBQUVsQixFQUFFNk0sT0FBT3BMLEVBQUV6QixFQUFFaUYsSUFBSXRGLEdBQUUsR0FBSVQsRUFBRWMsRUFBRW1TLElBQUkxUSxHQUFHb0UsTUFBTXlELElBQUkzSixHQUFHb04sTUFBTTlMLEVBQUVRLEVBQUVzTixRQUFRN1AsRUFBRTJOLE9BQU9tRixJQUFJOVMsR0FBRyxHQUFHeUIsRUFBRSxDQUFDLElBQUllLEVBQUVzdUIsR0FBRy91QixFQUFFNEwsTUFBTWxOLEdBQUcsT0FBT3NCLEVBQUU4TixRQUFRck4sR0FBRyxPQUFPVCxLQUFLb3NELEdBQUc5OEIsR0FBRyxDQUFDKzhCLEtBQUssU0FBU2x0RCxFQUFFYyxFQUFFUCxRQUFHLElBQVNPLElBQUlBLEVBQUUsV0FBTSxJQUFTUCxJQUFJQSxHQUFFLEdBQUksSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxPQUFPVCxFQUFFSyxFQUFFeUIsRUFBRThFLEVBQUVyRixFQUFFbEIsRUFBRTZNLE9BQU8zTixFQUFFdUMsRUFBRVIsRUFBRWl2QixHQUFHaHhCLEVBQUVjLEVBQUUyTSxNQUFNLE1BQU0xTCxJQUFJakIsRUFBRUEsRUFBRW9ULFVBQVVuUyxHQUFHL0IsRUFBRWt4QixHQUFHbHhCLEVBQUVzRCxPQUFPeEMsRUFBRTJNLE9BQU8sSUFBSWpMLEVBQUV3ZSxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFNkUsSUFBSWpGLEVBQUVkLEdBQUcsT0FBT2dDLEVBQUUsQ0FBQ3ZCLEVBQUVnQixJQUFJQSxJQUFHLENBQUMreEIsR0FBRzF5QixJQUFHLFNBQVNJLEVBQUVjLEdBQUcsT0FBT3dyRCxHQUFHdHNELEVBQUVjLEVBQUUsR0FBR0EsRUFBRSxHQUFHTyxFQUFFUixNQUFLLEdBQUdOLEVBQUUsQ0FBQyxJQUFJeEIsRUFBRTZ3QixHQUFHdHVCLEVBQUVtTCxNQUFNcEwsR0FBR0MsRUFBRUEsRUFBRXFOLFFBQVE1UCxHQUFHLE9BQU91QyxLQUFLNnJELEdBQUdoOUIsR0FBRyxDQUFDaTlCLE1BQU0sU0FBU3B0RCxFQUFFYyxFQUFFUCxRQUFHLElBQVNPLElBQUlBLEVBQUUsV0FBTSxJQUFTUCxJQUFJQSxHQUFFLEdBQUksSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRVCxFQUFFNEcsRUFBRXJGLEVBQUVsQixFQUFFNk0sT0FBT3BMLEVBQUVnRSxFQUFFc3FCLEdBQUcvdkIsRUFBRTZNLE1BQU1sTixHQUFHLElBQUksT0FBT3M4QixJQUFHLFNBQVM3N0IsR0FBRyxJQUFJSixFQUFFMHhCLEdBQUdqd0IsR0FBRyxNQUFNLENBQUN0QixPQUFPSCxFQUFFdU0sUUFBUW5NLEVBQUVtTSxNQUFNbk0sRUFBRUEsRUFBRWlQLEtBQUtyUCxFQUFFdU0sUUFBUWtHLElBQUl6UyxHQUFHc0osSUFBSXBJLEVBQUVQLEdBQUdvZixTQUFTLFNBQVM3ZSxHQUFHLElBQUlQLEVBQUVQLEVBQUV5TSxNQUFNdkcsUUFBUSxPQUFPM0csRUFBRTBFLFNBQVEsU0FBU2pFLEdBQUdPLEVBQUVQLEdBQUcsS0FBSWMsRUFBRTZOLFFBQVFwTyxHQUFHNFIsSUFBSTBmLEdBQUc3eEIsRUFBRXlNLE1BQU0sWUFBWTRGLElBQUloUixPQUEzTnc2QixDQUFrT2o4QixNQUFNeXRELEdBQUdsOUIsR0FBRyxDQUFDbTlCLEtBQUssU0FBU3R0RCxFQUFFYyxFQUFFUCxRQUFHLElBQVNPLElBQUlBLEVBQUUsV0FBTSxJQUFTUCxJQUFJQSxHQUFFLEdBQUksSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxPQUFPVCxFQUFFSyxFQUFFeUIsRUFBRThFLEVBQUVyRixFQUFFbEIsRUFBRTZNLE9BQU8zTixFQUFFdUMsRUFBRVIsRUFBRWl2QixHQUFHaHhCLEVBQUVjLEVBQUUyTSxNQUFNLE1BQU0xTCxJQUFJakIsRUFBRUEsRUFBRW9ULFVBQVVuUyxHQUFHL0IsRUFBRWt4QixHQUFHbHhCLEVBQUVzRCxPQUFPeEMsRUFBRTJNLE9BQU8sSUFBSWpMLEVBQUV3ZSxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFOEUsSUFBSWxGLEVBQUVkLEdBQUcsT0FBT2dDLEVBQUUsQ0FBQ3ZCLEVBQUVnQixJQUFJQSxJQUFHLENBQUMreEIsR0FBRzF5QixJQUFHLFNBQVNJLEVBQUVjLEdBQUcsT0FBT3dyRCxHQUFHdHNELEVBQUVjLEVBQUUsR0FBR0EsRUFBRSxHQUFHTyxFQUFFUixNQUFLLEdBQUdOLEVBQUUsQ0FBQyxJQUFJeEIsRUFBRTZ3QixHQUFHdHVCLEVBQUVtTCxNQUFNcEwsR0FBR0MsRUFBRUEsRUFBRXFOLFFBQVE1UCxHQUFHLE9BQU91QyxLQUFLaXNELEdBQUdwOUIsR0FBRyxDQUFDcTlCLFNBQVMsU0FBU3h0RCxFQUFFYyxFQUFFUCxRQUFHLElBQVNPLElBQUlBLEVBQUUsV0FBTSxJQUFTUCxJQUFJQSxHQUFFLEdBQUksSUFBSVgsRUFBRXVHLEVBQUVyRixHQUFHZCxFQUFFc3ZCLEdBQUd0dkIsRUFBRSxJQUFJLFlBQVl5TSxPQUFPbE4sRUFBRVMsRUFBRXlSLEtBQUs3UixFQUFFVyxHQUFHYyxFQUFFOUIsRUFBRWtOLE1BQU1sTSxJQUFJYyxFQUFFdXVCLEdBQUdyd0IsRUFBRWtOLE1BQU03TSxJQUFJLElBQUlkLEVBQUVrQixFQUFFNlAsVUFBVWtDLElBQUl4UyxFQUFFb1AsUUFBUXROLElBQUltVCxTQUFTLE1BQU0sQ0FBQy9DLEtBQUtsUyxFQUFFa3VELFNBQVMzdUQsRUFBRTJTLEtBQUs3UixFQUFFVyxPQUFPbXRELEdBQUd2OUIsR0FBRyxDQUFDdzlCLEtBQUssU0FBUzN0RCxFQUFFYyxFQUFFUCxRQUFHLElBQVNPLElBQUlBLEVBQUUsV0FBTSxJQUFTUCxJQUFJQSxHQUFFLEdBQUksSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxPQUFPLFNBQVNKLEVBQUV1TSxRQUFRdk0sRUFBRUEsRUFBRWtRLFNBQVMsSUFBSXZRLEVBQUU0RyxFQUFFckYsRUFBRWxCLEVBQUU2TSxPQUFPLE9BQU9vdkIsSUFBRyxTQUFTNzdCLEdBQUcsSUFBSWMsRUFBRWd2QixHQUFHdndCLEVBQUVTLEVBQUV1TSxNQUFNM00sRUFBRUwsRUFBRThCLEVBQUVyQixFQUFFLE1BQU1jLElBQUlPLEVBQUVyQixFQUFFZ1QsVUFBVWxTLEdBQUdsQixFQUFFb3dCLEdBQUdwd0IsRUFBRXdDLE9BQU9wQyxFQUFFdU0sT0FBTyxJQUFJek4sRUFBRWdoQixHQUFHbkMsV0FBVSxTQUFTM2QsR0FBRyxPQUFPQSxFQUFFa0osSUFBSTdILEVBQUV6QixLQUFJLENBQUNvM0IsVUFBVTMxQixJQUFJLEdBQUdkLEVBQUUsQ0FBQyxJQUFJTSxFQUFFK3VCLEdBQUc5d0IsRUFBRTJOLE1BQU1sTixHQUFHVCxFQUFFQSxFQUFFNlAsUUFBUTlOLEdBQUcsTUFBTSxDQUFDZCxNQUFNakIsRUFBRTZnQixTQUFTLFNBQVM3ZSxHQUFHLElBQUlQLEVBQUVQLEVBQUV5TSxNQUFNdkcsUUFBUSxPQUFPM0csRUFBRTBFLFNBQVEsU0FBU2pFLEdBQUdPLEVBQUVQLEdBQUcsS0FBSWMsRUFBRTZOLFFBQVFwTyxHQUFHNFIsSUFBSTBmLEdBQUc3eEIsRUFBRXlNLE1BQU0sZ0JBQWxVb3ZCLENBQWtWajhCLE1BQU1ndUQsR0FBR3o5QixHQUFHLENBQUMwOUIsTUFBTSxTQUFTN3RELEVBQUVjLEVBQUVQLFFBQUcsSUFBU08sSUFBSUEsRUFBRSxXQUFNLElBQVNQLElBQUlBLEdBQUUsR0FBSSxJQUFJWCxFQUFFMHZCLEdBQUd0dkIsRUFBRSxJQUFJLFFBQVEsU0FBU0osRUFBRXVNLFFBQVF2TSxFQUFFQSxFQUFFa1EsU0FBUyxJQUFJdlEsRUFBRTRHLEVBQUVyRixFQUFFbEIsRUFBRTZNLE9BQU9wTCxFQUFFeXVCLEdBQUd2d0IsRUFBRUssRUFBRTJNLE1BQU16TixFQUFFUyxFQUFFc0IsRUFBRWpCLEVBQUUsTUFBTXlCLElBQUlSLEVBQUVqQixFQUFFb1QsVUFBVTNSLEdBQUd2QyxFQUFFa3hCLEdBQUdseEIsRUFBRXNELE9BQU94QyxFQUFFMk0sT0FBTyxJQUFJakwsRUFBRXdlLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUV3UixLQUFLM1EsRUFBRS9CLEtBQUksQ0FBQ2s0QixVQUFVbjJCLElBQUksR0FBR04sRUFBRSxDQUFDLElBQUl4QixFQUFFNndCLEdBQUd0dUIsRUFBRW1MLE1BQU1sTixHQUFHK0IsRUFBRUEsRUFBRXFOLFFBQVE1UCxHQUFHLE9BQU91QyxLQUFTd3NELEdBQUczOUIsR0FBRyxDQUFDNDlCLEtBQUssU0FBUy90RCxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksT0FBTyxPQUFPOGYsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVPLEdBQUcsSUFBSVgsRUFBRUksRUFBRTZVLElBQUkvVCxHQUFHLE9BQU9QLEVBQUUsQ0FBQ1gsSUFBSUEsSUFBRyxDQUFDMHlCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU94UyxHQUFHbkMsV0FBVSxTQUFTN2MsR0FBRyxPQUFPQSxFQUFFcThCLE9BQU9uOUIsRUFBRU8sS0FBSSxDQUFDeXRELEdBQUdodUQsRUFBRWlGLEVBQUUxRSxZQUFXMHRELEdBQUc5OUIsR0FBRyxDQUFDKzlCLFdBQVcsU0FBU2x1RCxFQUFFYyxRQUFHLElBQVNBLElBQUlBLEVBQUUsSUFBSSxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxJQUFJLGFBQWEsT0FBT3FrRCxHQUFHL3lCLEdBQUd4d0IsR0FBR3FSLElBQUk1UixHQUFHQSxNQUFNNHRELEdBQUdoK0IsR0FBRyxDQUFDaStCLE9BQU8sU0FBU3B1RCxFQUFFYyxHQUFHLElBQUlQLEVBQUUrdUIsR0FBR3R2QixFQUFFLElBQUksU0FBU0osRUFBRTB2QixHQUFHeHVCLEVBQUUsUUFBUSxTQUFTLE9BQU9nZixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJdkIsRUFBRVMsRUFBRWdWLE1BQU16VSxFQUFFWCxHQUFHLE9BQU9rQixFQUFFLENBQUNQLEVBQUVYLElBQUlMLElBQUcsQ0FBQyt5QixHQUFHL3hCLEVBQUU4dEQsT0FBT3p1RCxJQUFHLFNBQVNJLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHbEIsRUFBRWtCLEVBQUUsR0FBR3ZCLEVBQUVnQixFQUFFa1QsUUFBUSxHQUFHLE1BQU0sQ0FBQzZlLEdBQUcsV0FBVyxPQUFPNndCLEdBQUc1akQsRUFBRVMsRUFBRUEsRUFBRW1TLElBQUl2UyxLQUFLeXVELE9BQU8sV0FBVyxJQUFJdnRELEVBQUVxaUQsR0FBRzVqRCxFQUFFOHlCLEdBQUdyeUIsR0FBR0EsRUFBRW1TLElBQUk1UixJQUFJYyxFQUFFNDlCLEdBQUdyL0IsRUFBRTZNLE1BQU16TSxFQUFFeU0sT0FBTyxPQUFPcEwsRUFBRWUsT0FBTyxJQUFJdEIsRUFBRUEsRUFBRW9JLElBQUk3SCxJQUFJUCxFQUFFNk4sUUFBUS9PLEVBQUU2TSxlQUFjNmhELEdBQUduK0IsR0FBRyxDQUFDbytCLE1BQU0sU0FBU3Z1RCxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksUUFBUSxNQUFNLFNBQVNjLEVBQUVxTCxNQUFNckwsRUFBRWdQLFFBQVFnUSxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRU8sR0FBRyxJQUFJWCxFQUFFSSxFQUFFNFUsS0FBSzlULEdBQUcsT0FBT1AsRUFBRSxDQUFDTyxJQUFJbEIsSUFBRyxDQUFDMHlCLEdBQUd4eEIsSUFBRyxTQUFTZCxFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsR0FBRyxXQUFXLE9BQU90eUIsRUFBRW9TLFVBQVU3UixFQUFFMlYsT0FBT3JHLG1CQUFrQjIrQyxHQUFHcitCLEdBQUcsQ0FBQ3MrQixNQUFNLFNBQVN6dUQsR0FBRyxJQUFJYyxFQUFFd3VCLEdBQUd0dkIsRUFBRSxJQUFJLFFBQVEsT0FBTzhmLEdBQUduQyxXQUFVLFNBQVMzZCxFQUFFTyxHQUFHLElBQUlYLEVBQUVJLEVBQUU4VSxLQUFLaFUsR0FBRyxPQUFPUCxFQUFFLENBQUNPLElBQUlsQixJQUFHLENBQUMweUIsR0FBR3h4QixJQUFHLFNBQVNkLEVBQUVjLEdBQUcsSUFBSVAsRUFBRU8sRUFBRSxHQUFHLE1BQU0sQ0FBQ3d4QixHQUFHLFdBQVcsSUFBSXh4QixFQUFFUCxFQUFFa1QsUUFBUTZkLEdBQUcsSUFBSTF4QixFQUFFMHhCLEdBQUdtbEIsSUFBSWwzQyxFQUFFK3hCLEdBQUdvbEIsSUFBSXIxQyxFQUFFckIsRUFBRW1TLElBQUk1UyxHQUFHVCxFQUFFa0IsRUFBRW1TLElBQUl2UyxHQUFHdVMsSUFBSTVSLEVBQUVzUCxVQUFVcEssT0FBTyxPQUFPMDlDLEdBQUdyaUQsRUFBRU8sRUFBRXZDLFdBQWM0dkQsR0FBR3YrQixHQUFHLENBQUN3K0IsV0FBVyxTQUFTM3VELEVBQUVjLEdBQUcsSUFBSVAsRUFBRSt1QixHQUFHdHZCLEVBQUUsSUFBSSxhQUFhLE9BQU8sTUFBTWMsSUFBSUEsRUFBRVAsRUFBRWtNLE1BQU1yRyxLQUFJLFNBQVNwRyxFQUFFYyxHQUFHLE9BQU9BLEtBQUlpUSxXQUFXL0wsRUFBRXpFLEVBQUVnTSxPQUFPekwsRUFBRXNCLFFBQU8sV0FBVyxNQUFNLHFDQUFxQzdCLEVBQUVnTSxLQUFLLDhCQUE4QnpMLEVBQUUsT0FBTUEsRUFBRW1ELFNBQVEsU0FBU2pFLEdBQUdnRixFQUFFaEYsR0FBRyxHQUFHQSxFQUFFTyxFQUFFZ00sTUFBSyxXQUFXLE1BQU0sZ0RBQWdEaE0sRUFBRWdNLEtBQUssR0FBRyxZQUFZekwsUUFBTVAsRUFBRWdNLE1BQU0sRUFBRWhNLEVBQUU4UCxRQUFReVAsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRWdULFVBQVV6UyxFQUFFTyxLQUFJLENBQUN3eEIsR0FBRy94QixJQUFHLFNBQVNQLEdBQUcsSUFBSU8sRUFBRXd2QixHQUFHanZCLEdBQUcsTUFBTSxDQUFDd3hCLEdBQUcsV0FBVyxPQUFPdHlCLEVBQUVnVCxVQUFVelMsV0FBY3F1RCxHQUFHeitCLEdBQUcsQ0FBQzArQiw0QkFBNEIsU0FBUzd1RCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxRQUFHLElBQVN1QixJQUFJQSxFQUFFLFFBQUcsSUFBU1AsSUFBSUEsRUFBRSxRQUFHLElBQVNYLElBQUlBLEVBQUUsUUFBRyxJQUFTTCxJQUFJQSxFQUFFLElBQUksSUFBSThCLEVBQUVpdUIsR0FBR3R2QixFQUFFLElBQUksOEJBQThCZ0YsRUFBRSxJQUFJM0QsRUFBRWtMLE1BQU0sSUFBSWxMLEVBQUVrTCxNQUFLLFdBQVcsTUFBTSwyRkFBMkZsTCxFQUFFa0wsS0FBSyxPQUFNdkgsRUFBRU0sRUFBRXhFLElBQUcsV0FBVyxNQUFNLDJGQUEyRkEsRUFBRSxPQUFNLElBQUloQyxFQUFFdUMsRUFBRVIsR0FBRSxFQUFHLElBQUlRLEVBQUVrTCxPQUFPMUwsR0FBRSxFQUFHL0IsRUFBRXVDLEVBQUV5TixLQUFLLEVBQUV6TixFQUFFb0wsTUFBTSxHQUFHcEwsRUFBRW9MLE1BQU0sR0FBR3BMLEVBQUVvTCxNQUFNLEtBQUssSUFBSW5MLEVBQUV3ZSxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRXFCLEdBQUcsSUFBSVIsRUFBRWIsRUFBRXkrQiw2QkFBNkIzL0IsRUFBRWdDLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsT0FBTzhCLEVBQUUsQ0FBQ3ZDLEVBQUUrQixJQUFJQSxJQUFHLENBQUMybkQsSUFBSTFwRCxJQUFHLFNBQVNrQixFQUFFcUIsR0FBRyxJQUFJdkMsRUFBRXVDLEVBQUUsR0FBR1IsRUFBRVEsRUFBRSxHQUFHLE1BQU0sQ0FBQ21uRCxJQUFJLFdBQVcsT0FBTzFvQyxHQUFHbkMsV0FBVSxTQUFTdGMsR0FBRyxPQUFPQSxFQUFFcTlCLFFBQVExK0IsRUFBRWxCLEVBQUUrQixFQUFFQyxFQUFFUCxFQUFFWCxFQUFFTCxLQUFJLFNBQVEsT0FBT3NCLEVBQUVTLEVBQUV1TixLQUFLdk4sRUFBRW1MLE1BQU0sR0FBR25MLEVBQUVtTCxNQUFNLEdBQUduTCxFQUFFbUwsTUFBTSxJQUFJbkwsS0FBU3d0RCxHQUFHMytCLEdBQUcsQ0FBQzQrQixNQUFNLFNBQVMvdUQsRUFBRWMsRUFBRVAsRUFBRVgsUUFBRyxJQUFTa0IsSUFBSUEsRUFBRSxrQkFBYSxJQUFTUCxJQUFJQSxFQUFFLFdBQU0sSUFBU1gsSUFBSUEsR0FBRSxHQUFJLElBQUlMLEVBQUUsU0FBU1MsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxRQUFHLElBQVNBLElBQUlBLEVBQUUsTUFBTSxJQUFJa0IsRUFBRXlMLEtBQUssT0FBT3pMLEVBQUU0VCxNQUFNLEdBQUcsSUFBSTVULEVBQUV5TCxNQUFNLE9BQU8zTSxFQUFFLE9BQU9JLEVBQUVjLEVBQUU2TixRQUFRLEVBQUUsSUFBSXBPLEVBQUVYLEdBQUcsR0FBRyxJQUFJa0IsRUFBRXlMLE1BQU0saUJBQWlCM00sR0FBR3FCLE1BQU1rRSxRQUFRdkYsSUFBSSxJQUFJQSxFQUFFd0MsT0FBTyxDQUFDLEdBQUcsSUFBSTdCLEVBQUUsT0FBT08sRUFBRTRULE1BQU14TCxJQUFJdEosR0FBRyxHQUFHVyxJQUFJLElBQUksT0FBT08sRUFBRTRULE1BQU03UCxJQUFJakYsR0FBRyxHQUFHVyxLQUFJLElBQUssT0FBT08sRUFBRTRULE1BQU01UCxJQUFJbEYsR0FBRyxHQUFHLGNBQWNXLEdBQUcsSUFBSUEsRUFBRSxPQUFPTyxFQUFFNFQsTUFBTXpDLElBQUlxZixHQUFHLEVBQUUsVUFBVXBvQixJQUFJdEosR0FBR2dHLE9BQU8sTUFBTSxJQUFJbkMsTUFBTSxxQ0FBcUNsRCxHQUFHLEdBQUdVLE1BQU1rRSxRQUFRdkYsSUFBSSxJQUFJQSxFQUFFd0MsT0FBTyxDQUFDLEdBQUcsSUFBSTdCLEVBQUUsT0FBT08sRUFBRTRULE1BQU14TCxJQUFJdEosRUFBRSxJQUFJaUYsSUFBSWpGLEVBQUUsR0FBRyxHQUFHLEdBQUdXLElBQUksSUFBSSxPQUFPTyxFQUFFNFQsTUFBTXhMLElBQUl0SixFQUFFLElBQUlpRixJQUFJakYsRUFBRSxJQUFJLEdBQUdXLEtBQUksSUFBSyxPQUFPTyxFQUFFNFQsTUFBTXhMLElBQUl0SixFQUFFLElBQUlrRixJQUFJbEYsRUFBRSxJQUFJLEdBQUcsUUFBUVcsR0FBRyxjQUFjQSxFQUFFLE9BQU9PLEVBQUUwVCxTQUFTdEwsSUFBSXRKLEdBQUdnRyxPQUFPLE1BQU0sSUFBSW5DLE1BQU0scUNBQXFDbEQsR0FBRyxNQUFNLElBQUlrRCxNQUFNLGdDQUFnQzdELEdBQXJ2QixDQUF5dkJJLEVBQUVzdkIsR0FBR3R2QixFQUFFLElBQUksUUFBUWMsRUFBRVAsR0FBR2MsRUFBRTlCLEVBQUVrTixNQUFNLEdBQUc3TSxFQUFFLENBQUMsSUFBSWQsRUFBRXFILEVBQUU1RixFQUFFUCxFQUFFeU0sT0FBT3BMLEVBQUV1dUIsR0FBR3J3QixFQUFFa04sTUFBTTNOLEdBQUcsT0FBT1MsRUFBRW9QLFFBQVF0TixNQUFVMnRELEdBQUc3K0IsR0FBRyxDQUFDOCtCLGVBQWUsU0FBU2p2RCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxJQUFJdkMsRUFBRXd3QixHQUFHdHZCLEVBQUUsYUFBYSxpQkFBaUJhLEVBQUV5dUIsR0FBR3h1QixFQUFFLGFBQWEsaUJBQWlCUSxFQUFFZ3VCLEdBQUcvdUIsRUFBRSxXQUFXLGlCQUFpQnhCLEVBQUV1d0IsR0FBRzF2QixFQUFFLE9BQU8saUJBQWlCVCxFQUFFbXdCLEdBQUcvdkIsRUFBRSxJQUFJLGlCQUFpQndGLEVBQUV1cUIsR0FBR2p1QixFQUFFLElBQUksaUJBQWlCVCxFQUFFN0IsRUFBRXNILE9BQU90QixFQUFFLEdBQUc2TCxPQUFPL1AsR0FBRytRLElBQUl0USxHQUFHMEQsRUFBRXBFLEVBQUU2TCxNQUFNLEdBQUdyTixFQUFFd0IsRUFBRTZMLE1BQU0sR0FBRyxFQUFFdkgsRUFBRSxDQUFDRixFQUFFNUYsR0FBR0YsRUFBRTBCLEVBQUVzRixNQUFNLENBQUMsRUFBRSxHQUFHaEIsR0FBR0csRUFBRXpFLEVBQUVzRixNQUFNLENBQUMsRUFBRTlHLEdBQUc4RixHQUFHRCxFQUFFckUsRUFBRXNGLE1BQU0sQ0FBQyxFQUFFLEVBQUU5RyxHQUFHOEYsR0FBR0ksRUFBRTFFLEVBQUVzRixNQUFNLENBQUMsRUFBRSxFQUFFOUcsR0FBRzhGLEdBQUdLLEVBQUVyRyxFQUFFK1YsVUFBVTdDLFVBQVUvTSxFQUFFRyxRQUFRcU0sVUFBVTFTLEVBQUVpVCxVQUFVdFQsRUFBRThTLElBQUkzTSxHQUFHZ1EsWUFBWXZQLEVBQUVILEVBQUVDLE9BQU80TSxVQUFVOU0sRUFBRTJQLFdBQVcsTUFBTSxDQUFDMVAsRUFBRUcsTUFBTXdwRCxHQUFHLytCLEdBQUcsQ0FBQ2cvQixjQUFjLFNBQVNudkQsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJLElBQUlMLEVBQUUrdkIsR0FBR3h1QixFQUFFLE9BQU8sZ0JBQWdCTyxFQUFFbXVCLEdBQUdqdkIsRUFBRSxJQUFJLGdCQUFnQnpCLEVBQUUwd0IsR0FBRzV2QixFQUFFLElBQUksZ0JBQWdCaUIsRUFBRXRCLEVBQUUrQixFQUFFLEdBQUd2QyxFQUFFLEVBQUVBLEVBQUVpQixFQUFFb0MsT0FBT3JELElBQUksQ0FBQyxJQUFJSSxFQUFFYSxFQUFFakIsR0FBRzhCLEVBQUVRLEVBQUV0QyxHQUFHRCxFQUFFQyxJQUFJdUMsRUFBRWUsS0FBS2xELEVBQUUsSUFBSW1DLEVBQUVlLEtBQUtsRCxFQUFFLElBQUkwQixFQUFFMUIsRUFBRSxHQUFHLElBQUk0RixFQUFFLEdBQUduRSxFQUFFLEdBQUcsSUFBSTdCLEVBQUUsRUFBRUEsRUFBRXVDLEVBQUVjLE9BQU9yRCxHQUFHLEVBQUVnRyxFQUFFMUMsS0FBS2YsRUFBRXZDLElBQUk2QixFQUFFeUIsS0FBS2YsRUFBRXZDLEVBQUUsSUFBSSxNQUFNLENBQUNnRyxFQUFFbkUsTUFBVXd1RCxHQUFHai9CLEdBQUcsQ0FBQ2svQixlQUFlLFNBQVNydkQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsUUFBRyxJQUFTQSxJQUFJQSxHQUFFLEdBQUksSUFBSThCLEVBQUVpdUIsR0FBR3R2QixFQUFFLElBQUksaUJBQWlCbEIsRUFBRXd3QixHQUFHeHVCLEVBQUUsSUFBSSxpQkFBaUJELEVBQUV5dUIsR0FBRy91QixFQUFFLFFBQVEsaUJBQWlCbVosR0FBR3JZLEVBQUV2QyxHQUFHa0csRUFBRUMsRUFBRTVELEVBQUVvTCxNQUFNM04sRUFBRTJOLFFBQU8sV0FBVyxNQUFNLCtCQUE4QixJQUFJbkwsRUFBRWd3QixHQUFHLEdBQUd2eUIsRUFBRXVDLEVBQUV5USxJQUFJbFIsR0FBRzFCLEVBQUVMLEVBQUVpVCxJQUFJMVEsR0FBRzhRLElBQUlwVCxHQUFHLEdBQUdRLEVBQUUsQ0FBQ3lGLEVBQUUsTUFBTXBGLEdBQUUsV0FBVyxNQUFNLG9EQUFtRCxJQUFJbUYsRUFBRXVxQixHQUFHMXZCLEVBQUUsT0FBTyxpQkFBaUJULEVBQUVBLEVBQUVrVCxJQUFJL1EsRUFBRXlRLElBQUlzekMsR0FBR3hrRCxFQUFFa0UsS0FBSyxPQUFPMUQsRUFBRXVRLElBQUl6UyxNQUFVbXdELEdBQUduL0IsR0FBRyxDQUFDby9CLGNBQWMsU0FBU3Z2RCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsRUFBRXZDLEVBQUUrQixFQUFFUyxHQUFHLFFBQUcsSUFBUy9CLElBQUlBLEVBQUUsUUFBRyxJQUFTOEIsSUFBSUEsRUFBRSxRQUFHLElBQVN2QyxJQUFJQSxFQUFFLFFBQUcsSUFBUytCLElBQUlBLEVBQUUsUUFBRyxJQUFTUyxJQUFJQSxFQUFFLEdBQUcsTUFBTTFCLElBQUlBLEVBQUUsSUFBSXFCLE1BQU1ILEVBQUVzQixTQUFTLElBQUl0RCxFQUFFLE1BQU0sSUFBSTJFLE1BQU0sc0NBQXNDLElBQUkxRSxFQUFFdXdCLEdBQUd0dkIsRUFBRSxJQUFJLGdCQUFnQmIsRUFBRTA3QixHQUFHaDZCLEdBQUdrRSxFQUFFaEcsRUFBRTBOLE1BQU12RyxRQUFRL0csRUFBRThFLFNBQVEsU0FBU2pFLEdBQUdjLEVBQUVkLEdBQUcsRUFBRU8sRUFBRVAsR0FBRyxFQUFFK0UsRUFBRXN5QixPQUFPcjNCLEVBQUUsRUFBRSxNQUFLakIsRUFBRUEsRUFBRTRQLFFBQVE1SixHQUFHLElBQUksSUFBSW5FLEVBQUUsRUFBRUEsRUFBRTdCLEVBQUV3TixLQUFLM0wsSUFBSUUsRUFBRUYsR0FBR202QixHQUFHeDdCLEVBQUV1QixFQUFFbEIsRUFBRWIsRUFBRTBOLE1BQU03TCxHQUFHTCxFQUFFSyxHQUFHczZCLEdBQUc3NUIsRUFBRWQsRUFBRVgsRUFBRWIsRUFBRTBOLE1BQU03TCxHQUFHaEIsRUFBRWdCLEdBQUdoQixFQUFFZ0IsSUFBSSxFQUFFLElBQUlvRSxFQUFFNjFCLEdBQUd2NUIsR0FBRzBELEVBQUVmLFNBQVEsU0FBU2pFLEdBQUdPLEVBQUVQLEdBQUdjLEVBQUVkLEdBQUcsRUFBRUosRUFBRUksR0FBRyxLQUFJLElBQUlaLEVBQUUwN0IsR0FBR2g2QixFQUFFUCxFQUFFWCxHQUFHc0YsRUFBRTlGLEVBQUVzekIsUUFBTyxTQUFTMXlCLEVBQUVjLEdBQUcsT0FBTyxJQUFJa0UsRUFBRXVxQixRQUFRenVCLE1BQUssT0FBT2xCLEVBQUUwRyxPQUFNLFNBQVN0RyxHQUFHLE9BQU8sSUFBSUEsS0FBSTRyRCxHQUFHN3NELEVBQUUrQixFQUFFMUIsR0FBR3VQLFFBQVF6SixHQUFHNGEsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRXdYLGFBQWF6WSxFQUFFK0IsRUFBRVAsRUFBRVgsS0FBSSxDQUFDMHlCLEdBQUd2ekIsSUFBSTRQLFFBQVF6SixNQUFVc3FELEdBQUdyL0IsR0FBRyxDQUFDcy9CLE1BQU0sU0FBU3p2RCxFQUFFYyxFQUFFUCxRQUFHLElBQVNPLElBQUlBLEVBQUUsUUFBRyxJQUFTUCxJQUFJQSxHQUFFLEdBQUksSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsSUFBSSxRQUFRLEdBQUcsSUFBSUosRUFBRTJNLEtBQUssTUFBTSxJQUFJOUksTUFBTSxzREFBc0QsSUFBSWxFLEVBQUVLLEVBQUU2TSxNQUFNN00sRUFBRTZNLE1BQU1ySyxPQUFPLEdBQUcsR0FBR3RCLEVBQUV2QixFQUFFLE1BQU0sSUFBSWtFLE1BQU0sdURBQXVEbEUsRUFBRSxhQUFhdUIsR0FBRyxJQUFJTyxFQUFFeWUsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRXVYLEtBQUszWCxFQUFFa0IsRUFBRVAsS0FBSSxDQUFDK3hCLEdBQUcxeUIsSUFBSSxNQUFNLENBQUN5TixPQUFPaE0sRUFBRSxHQUFHcXVELFFBQVFydUQsRUFBRSxPQUFXc3VELEdBQUd4L0IsR0FBRyxDQUFDeS9CLFdBQVcsU0FBUzV2RCxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUUwdkIsR0FBR3R2QixFQUFFLFVBQVUsWUFBWSxTQUFTVCxFQUFFK3ZCLEdBQUd4dUIsRUFBRSxVQUFVLGFBQWEsT0FBbjdzUyxTQUFZZCxFQUFFYyxFQUFFUCxHQUFHLEdBQUdPLEVBQUV5TCxLQUFLLEVBQUUsTUFBTSxJQUFJOUksTUFBTSwrRUFBK0UzQyxFQUFFeUwsS0FBSyxLQUFLLEdBQUd2TSxFQUFFdU0sS0FBSyxFQUFFLE1BQU0sSUFBSTlJLE1BQU0sK0VBQStFekQsRUFBRXVNLEtBQUssS0FBSyxHQUFHLFVBQVV6TCxFQUFFcUwsTUFBTSxNQUFNLElBQUkxSSxNQUFNLDBEQUEwRDNDLEVBQUVxTCxPQUFPLEdBQUc1TCxFQUFFNkIsT0FBTyxFQUFFLE1BQU0sSUFBSXFCLE1BQU0sNkRBQTZEbEQsR0FBRyxHQUFHLElBQUlBLEVBQUU2QixPQUFPLENBQUMsR0FBRyxJQUFJdEIsRUFBRTBMLEtBQUssTUFBTSxJQUFJL0ksTUFBTSxzREFBc0QzQyxFQUFFMkwsT0FBTyxHQUFHLElBQUl6TSxFQUFFd00sS0FBSyxNQUFNLElBQUkvSSxNQUFNLHNEQUFzRHpELEVBQUV5TSxRQUFRLFNBQVN6TSxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUVrQixFQUFFeUwsS0FBSyxFQUFFekwsRUFBRTJMLE1BQU0zTCxFQUFFeUwsS0FBSyxHQUFHLEVBQUVoTixFQUFFdUIsRUFBRXlMLEtBQUssRUFBRXpMLEVBQUV5TCxLQUFLLEVBQUUsRUFBRWxMLEVBQUUsNkZBQTZGZCxFQUFFa00sTUFBTSxvQkFBb0IzTCxFQUFFMkwsTUFBTSxZQUFZek0sRUFBRSxlQUFlSixFQUFFLG1CQUFtQkwsRUFBRSxJQUFJLEdBQUdnQixFQUFFZ00sS0FBS2hOLEVBQUUsTUFBTSxJQUFJa0UsTUFBTXBDLEVBQUUsa0JBQWtCOUIsRUFBRSxNQUFNLEdBQUdTLEVBQUVvQyxPQUFPeEMsR0FBR1csRUFBRWdNLEtBQUtoTixHQUFHLE1BQU0sSUFBSWtFLE1BQU1wQyxFQUFFLDJCQUEyQnpCLEdBQUdXLEVBQUVnTSxLQUFLaE4sS0FBSyxHQUFHZ0IsRUFBRWdNLE9BQU9oTixFQUFFUyxFQUFFb0MsT0FBT3hDLEVBQUUsTUFBTSxJQUFJNkQsTUFBTXBDLEVBQUUsb0JBQW9COUIsRUFBRVMsRUFBRW9DLE9BQU94QyxJQUFJLElBQUksSUFBSWQsRUFBRSxFQUFFQSxFQUFFUyxJQUFJVCxFQUFFLEdBQUd5QixFQUFFa00sTUFBTTNOLEtBQUtnQyxFQUFFMkwsTUFBTTNOLEdBQUcsTUFBTSxJQUFJMkUsTUFBTXBDLEVBQUUsa0JBQWtCdkMsRUFBRSxNQUFNeUIsRUFBRWtNLE1BQU0zTixHQUFHLHNCQUFzQkEsRUFBRSxNQUFNZ0MsRUFBRTJMLE1BQU0zTixHQUFHLE1BQU0sSUFBSUEsRUFBRSxFQUFFQSxFQUFFeUIsRUFBRWdNLEtBQUtoTixJQUFJVCxFQUFFLEdBQUd5QixFQUFFa00sTUFBTTNOLEVBQUVTLEtBQUtTLEVBQUVsQixFQUFFYyxHQUFHLE1BQU0sSUFBSTZELE1BQU1wQyxFQUFFLG1CQUFtQnZDLEVBQUVTLEdBQUcsTUFBTWdCLEVBQUVrTSxNQUFNM04sRUFBRVMsR0FBRyxlQUFlVCxFQUFFUyxHQUFHLE1BQU1TLEVBQUVsQixFQUFFUyxHQUFHLEtBQWx3QixDQUF3d0JnQixFQUFFTyxFQUFFZCxHQUEyaHFTNnZELENBQUd0d0QsRUFBRUssRUFBRVcsR0FBR3VmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUVzK0IsVUFBVTErQixFQUFFTCxFQUFFZ0IsS0FBSSxDQUFDeTNCLFNBQVNwNEIsRUFBRWt3RCxTQUFTdndELE9BQVd3d0QsR0FBRzUvQixHQUFHLENBQUM2L0IsS0FBSyxTQUFTaHdELEdBQUdnRixFQUFFLGNBQWNoRixFQUFFbU0sT0FBTSxXQUFXLE1BQU0sNkRBQTZEbk0sRUFBRW1NLE1BQU0sT0FBTSxJQUFJckwsRUFBRWQsRUFBRXlNLE1BQU16TSxFQUFFeU0sTUFBTXJLLE9BQU8sR0FBRzdCLEVBQUVQLEVBQUV3TSxLQUFLMUwsRUFBRWxCLEVBQUVJLEVBQUU0TyxLQUFLck8sRUFBRU8sR0FBRyxPQUFPZ2YsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRTBYLElBQUk5WCxLQUFJLENBQUNxd0QsTUFBTWp3RCxJQUFJMk8sUUFBUTNPLEVBQUV5TSxVQUFVeWpELEdBQUcvL0IsR0FBRyxDQUFDZ2dDLE1BQU0sU0FBU253RCxHQUFHZ0YsRUFBRSxjQUFjaEYsRUFBRW1NLE9BQU0sV0FBVyxNQUFNLDhEQUE4RG5NLEVBQUVtTSxNQUFNLE9BQU0sSUFBSXJMLEVBQUVkLEVBQUV5TSxNQUFNek0sRUFBRXlNLE1BQU1ySyxPQUFPLEdBQUc3QixFQUFFUCxFQUFFd00sS0FBSzFMLEVBQUVsQixFQUFFSSxFQUFFNE8sS0FBS3JPLEVBQUVPLEdBQUcsT0FBT2dmLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUU0WCxLQUFLaFksS0FBSSxDQUFDcXdELE1BQU1qd0QsSUFBSTJPLFFBQVEzTyxFQUFFeU0sVUFBVTJqRCxHQUFHamdDLEdBQUcsQ0FBQ2tnQyxNQUFNLFNBQVNyd0QsRUFBRWMsR0FBR2tFLEVBQUUsWUFBWWhGLEVBQUVtTSxPQUFNLFdBQVcsTUFBTSxtREFBbURuTSxFQUFFbU0sU0FBUSxJQUFJNUwsRUFBRVgsRUFBRUksRUFBRXlNLE1BQU16TSxFQUFFeU0sTUFBTXJLLE9BQU8sR0FBRzdDLEVBQUVTLEVBQUV3TSxLQUFLNU0sRUFBRSxHQUFHLE1BQU1rQixHQUFHQSxFQUFFbEIsRUFBRSxDQUFDLElBQUl5QixFQUFFckIsRUFBRXlNLE1BQU1yRyxLQUFJLFNBQVNwRyxHQUFHLE9BQU8sS0FBSWxCLEVBQUVrQixFQUFFeU0sTUFBTXJHLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsS0FBSWxCLEVBQUVrQixFQUFFeU0sTUFBTXJLLE9BQU8sR0FBR3RCLEVBQUVQLEVBQUVQLEVBQUVrRyxNQUFNN0UsRUFBRXZDLEdBQUdjLEVBQUVrQixPQUFPLEdBQUcsTUFBTUEsR0FBR0EsRUFBRWxCLEVBQUUsQ0FBQyxJQUFJaUIsRUFBRWIsRUFBRXlNLE1BQU1yRyxLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEtBQUlhLEVBQUViLEVBQUV5TSxNQUFNckssT0FBTyxHQUFHdEIsRUFBRWxCLEVBQUVXLEVBQUVQLEVBQUVxRyxPQUFPeXJCLEdBQUdqeEIsR0FBR2IsRUFBRXlNLE1BQU1ySyxPQUFPLEdBQUd4QyxFQUFFa0IsT0FBT1AsRUFBRVAsRUFBRSxJQUFJc0IsRUFBRWYsRUFBRTZVLFlBQVlyVyxFQUFFeXhCLEdBQUdqd0IsRUFBRWUsR0FBR3NOLEtBQUtyUCxFQUFFSyxHQUFHVCxFQUFFNHdELEdBQUdoeEQsR0FBR2dHLEVBQUVKLEtBQUs4SSxNQUFNN04sRUFBRSxHQUFHLEVBQUVnQixFQUFFaXdCLEdBQUcxeEIsR0FBR0MsRUFBRTZ4QixHQUFHOXhCLEdBQUcrRixFQUFFdEUsRUFBRW9ELE1BQU0sQ0FBQ2UsRUFBRW5GLEVBQUVtRixHQUFHbkUsRUFBRTZMLE1BQU1ySyxPQUFPLEdBQUdsRCxFQUFFRSxFQUFFNEUsTUFBTSxDQUFDZSxFQUFFbkYsRUFBRW1GLEdBQUczRixFQUFFcU4sTUFBTXJLLE9BQU8sR0FBR2lELEVBQUU5RSxFQUFFa00sTUFBTXZHLFFBQVEsT0FBT2IsRUFBRTlFLEVBQUVrTSxNQUFNckssT0FBTyxHQUFHMkMsRUFBRXlyQixHQUFHdHJCLEVBQUUsR0FBR2hHLEVBQUUsSUFBSXlQLFFBQVF0SixNQUFNaXJELEdBQUduZ0MsR0FBRyxDQUFDb2dDLE9BQU8sU0FBU3Z3RCxHQUFHLElBQUljLEVBQUVkLEVBQUV5TSxNQUFNek0sRUFBRXlNLE1BQU1ySyxPQUFPLEdBQUc3QixFQUFFUCxFQUFFd00sS0FBSzFMLEVBQUUsR0FBR0EsR0FBRyxFQUFFLENBQUMsSUFBSWxCLEVBQUVJLEVBQUU0TyxLQUFLck8sRUFBRU8sR0FBR3ZCLEVBQUUyd0QsR0FBR3R3RCxHQUFHLE9BQU9peEIsR0FBR3R4QixHQUFHLElBQUk4QixFQUFFLENBQUNkLEVBQUUsR0FBR08sRUFBRSxJQUFJaEMsRUFBRSt4QixHQUFHN3dCLEdBQUc0TyxLQUFLck8sRUFBRU8sR0FBR0QsRUFBRW93QixHQUFHanhCLEdBQUc0TyxLQUFLck8sRUFBRU8sR0FBR1EsRUFBRXhDLEVBQUVvSCxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMzRixFQUFFTyxFQUFFLElBQUlpUSxRQUFRLEdBQUdoUyxFQUFFOEIsRUFBRXFGLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQzNGLEVBQUVPLEVBQUUsSUFBSWlRLFFBQVEsR0FBR29CLElBQUltZixJQUFJLElBQUlueUIsRUFBRUwsRUFBRXVILE9BQU8vRSxFQUFFLEdBQUd5RCxFQUFFbEUsRUFBRXdGLE9BQU90SCxFQUFFLEdBQUcsT0FBT2EsRUFBRTR3QixHQUFHcnhCLEVBQUU0RixHQUFHNkosS0FBS3ZOLEVBQUUsR0FBR0EsRUFBRSxJQUFJOUIsRUFBRTJ3RCxHQUFHdHdELEdBQUdpeEIsR0FBR3R4QixNQUFNaXhELEdBQUdoeEQsT0FBTytFLE9BQU8sQ0FBQ21ULElBQUlxNEMsR0FBR240QyxLQUFLczRDLEdBQUdyNEMsS0FBS3U0QyxHQUFHdDRDLE1BQU13NEMsS0FBU0csR0FBR3RnQyxHQUFHLENBQUN1Z0MsZUFBZSxTQUFTMXdELEVBQUVjLEVBQUVQLEVBQUVYLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxHQUFHLElBQUlMLEVBQUUrdkIsR0FBR3R2QixFQUFFLGdCQUFnQixnQkFBZ0IsU0FBU3FCLEVBQUVpdUIsR0FBR3h1QixFQUFFLGVBQWUsaUJBQWlCaEMsRUFBRXd3QixHQUFHMXZCLEVBQUUsZUFBZSxnQkFBZ0J5QixFQUFFOEssT0FBTyxPQUFPLFNBQVNuTSxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLEdBQUcsVUFBVUksRUFBRW1NLE1BQU0sTUFBTSxJQUFJMUksTUFBTSw4RUFBOEV6RCxFQUFFbU0sTUFBTSxLQUFLLEdBQUduTSxFQUFFdU0sS0FBSyxFQUFFLE1BQU0sSUFBSTlJLE1BQU0sc0VBQXNFekQsRUFBRXlNLE1BQU0sS0FBSyxJQUFJbE4sRUFBRVMsRUFBRXVNLEtBQUssRUFBRXZNLEVBQUV5TSxNQUFNLEdBQUcsRUFBRXBMLEVBQUVyQixFQUFFdU0sS0FBSyxFQUFFdk0sRUFBRXlNLE1BQU0sR0FBRyxFQUFFLEdBQUdsTSxFQUFFNkIsU0FBU2YsRUFBRSxNQUFNLElBQUlvQyxNQUFNLGtEQUFrRGxELEVBQUU2QixPQUFPLGdCQUFnQmYsRUFBRSxLQUFLLElBQUl2QyxFQUFFZ0MsRUFBRTBMLEtBQUssR0FBRyxJQUFJMUwsRUFBRXlMLE9BQU8sSUFBSXpMLEVBQUV5TCxNQUFNek4sSUFBSVMsR0FBRyxNQUFNLElBQUlrRSxNQUFNLG9DQUFvQzNDLEVBQUUyTCxNQUFNLHNCQUFzQmxOLEVBQUUsS0FBSyxHQUFHdUIsRUFBRXFMLFFBQVF2TSxFQUFFdU0sTUFBTSxNQUFNLElBQUkxSSxNQUFNLHFEQUFybEIsQ0FBMm9CbEUsRUFBRThCLEVBQUVkLEVBQUV6QixHQUFHZ2hCLEdBQUduQyxXQUFVLFNBQVMzZCxHQUFHLE9BQU9BLEVBQUU2K0IsY0FBY3QvQixFQUFFOEIsRUFBRWQsRUFBRXpCLEtBQUksQ0FBQzZ4RCxlQUFlcHhELEVBQUVxeEQsY0FBY3Z2RCxFQUFFd3ZELGNBQWMveEQsT0FBV2d5RCxHQUFHM2dDLEdBQUcsQ0FBQzRnQyxVQUFVLFNBQVMvd0QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd4dUIsRUFBRSxVQUFVLFdBQVcsU0FBU2xCLEVBQUUwdkIsR0FBR3R2QixFQUFFLElBQUksWUFBWSxPQUFPOGYsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRXErQixTQUFTeitCLEVBQUVXLEtBQUksQ0FBQyt4QixHQUFHMXlCLEVBQUVvNEIsU0FBU3ozQixPQUFXeXdELEdBQUc3Z0MsR0FBRyxDQUFDOGdDLE1BQU0sU0FBU2p4RCxHQUFHLElBQUljLEVBQUV3dUIsR0FBR3R2QixFQUFFLElBQUksUUFBUXdKLFVBQVVqSixFQUFFUCxFQUFFeU0sTUFBTXBHLE9BQU9yRyxFQUFFeU0sT0FBTyxPQUFPcVQsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRTgrQixLQUFLaCtCLEtBQUksQ0FBQ3d4QixHQUFHeHhCLElBQUk2TixRQUFRcE8sTUFBVTJ3RCxHQUFHL2dDLEdBQUcsQ0FBQ2doQyxTQUFTLFNBQVNueEQsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFK3ZCLEdBQUd0dkIsRUFBRSxJQUFJLFdBQVcsR0FBR2dGLEVBQUUsWUFBWXpGLEVBQUU0TSxPQUFNLFdBQVcsTUFBTSxnRkFBZ0Y1TSxFQUFFNE0sTUFBTSxzQkFBcUJuSCxFQUFFbEUsR0FBRyxHQUFHQSxFQUFFLEdBQUUsV0FBVyxNQUFNLHFEQUFxREEsRUFBRSxPQUFNLElBQUlBLEVBQUUsT0FBT2QsYUFBYTJOLEdBQUdwTyxFQUFFOFEsUUFBUTlRLEVBQUUsSUFBSThCLEVBQUUsU0FBU3JCLEVBQUVjLEdBQUcsR0FBRyxNQUFNQSxFQUFFLE9BQU9kLEVBQUV5TSxNQUFNdkcsUUFBUSxHQUFHakIsRUFBRWpGLEVBQUV5TSxNQUFNM0wsR0FBRyxPQUFPQSxFQUFFLEdBQUdkLEVBQUV5TSxNQUFNckssU0FBU3RCLEVBQUVzQixPQUFPLENBQUMsSUFBSSxJQUFJN0IsRUFBRSxHQUFHWCxFQUFFLEVBQUVBLEVBQUVJLEVBQUV5TSxNQUFNckssT0FBT3hDLElBQUksTUFBTWtCLEVBQUVsQixJQUFJLE1BQU1JLEVBQUV5TSxNQUFNN00sR0FBR1csRUFBRThCLEtBQUtyQyxFQUFFeU0sTUFBTTdNLElBQUlXLEVBQUU4QixLQUFLdkIsRUFBRWxCLElBQUksT0FBT1csRUFBRSxPQUFPTyxFQUExTixDQUE2TnZCLEVBQUVnQixHQUFHekIsRUFBRSxFQUFFZ0MsRUFBRUQsRUFBRW80QixHQUFHNTNCLEVBQUUsRUFBRSxFQUFFLFVBQVV6QixHQUFHZ1MsSUFBSTlTLEdBQUcyTyxRQUFRNEUsSUFBSXZULEdBQUcsT0FBT1MsRUFBRTRTLElBQUl0UixNQUFNLFNBQVN1d0QsR0FBR3B4RCxFQUFFYyxFQUFFUCxHQUFHLElBQUksSUFBSVgsRUFBRSxFQUFFSSxFQUFFLEVBQUVULEVBQUUsSUFBSXFILGFBQWE1RyxHQUFHcUIsRUFBRSxFQUFFQSxFQUFFckIsSUFBSXFCLEVBQUUsQ0FBQyxJQUFJdkMsRUFBRSxFQUFFNkYsS0FBS3MvQixHQUFHNWlDLEdBQUdyQixFQUFFSixFQUFFLEdBQUdMLEVBQUU4QixHQUFHUCxFQUFFUCxFQUFFb0UsS0FBSzRRLElBQUl6VyxHQUFHLE9BQU95eUIsR0FBR2h5QixFQUFFLFdBQVcsSUFBeXJCOHhELEdBQXJyQkMsR0FBR25oQyxHQUFHLENBQUNvaEMsWUFBWSxTQUFTdnhELEdBQUcsT0FBT294RCxHQUFHcHhELEVBQUUsR0FBRyxPQUFPd3hELEdBQUdyaEMsR0FBRyxDQUFDc2hDLGVBQWUsU0FBU3p4RCxHQUFHLE9BQU9veEQsR0FBR3B4RCxFQUFFLElBQUksUUFBUTB4RCxHQUFHdmhDLEdBQUcsQ0FBQ3doQyxPQUFPLFNBQVMzeEQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsUUFBRyxJQUFTSyxJQUFJQSxHQUFFLFFBQUksSUFBU0wsSUFBSUEsRUFBRSxHQUFHLElBQUksSUFBSThCLEVBQUUsRUFBRXZDLEVBQUUsR0FBR3VDLEVBQUVQLEdBQUdkLEVBQUV3TSxNQUFNMU4sRUFBRXVELEtBQUt1cEQsR0FBRzVyRCxFQUFFcUIsRUFBRVAsSUFBSU8sR0FBR2QsRUFBRSxHQUFHWCxFQUFFLEtBQUt5QixFQUFFckIsRUFBRXdNLE1BQU0sQ0FBQyxJQUFJM0wsRUFBRVEsRUFBRVAsRUFBRWQsRUFBRXdNLEtBQUtsTCxFQUFFa3hCLEdBQUcsQ0FBQ281QixHQUFHNXJELEVBQUVxQixFQUFFUCxFQUFFRCxHQUFHa3hCLEdBQUcsQ0FBQ2x4QixHQUFHdEIsS0FBS1QsRUFBRXVELEtBQUtmLEdBQUdELEdBQUdkLEVBQUUsT0FBTyxJQUFJekIsRUFBRXNELE9BQU9vdkIsR0FBRyxHQUFHLENBQUMsRUFBRTF3QixJQUFJMHhCLEdBQUcxekIsR0FBRzhQLEtBQUs5UCxFQUFFc0QsT0FBT3RCLE1BQU04d0QsR0FBR3poQyxHQUFHLENBQUMwaEMsTUFBTSxTQUFTN3hELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsSUFBSThCLE9BQUUsSUFBUzlCLElBQUlBLEVBQUUreEQsSUFBSSxNQUFNMXhELElBQUl5QixFQUFFUCxFQUFFbEIsRUFBRStFLEtBQUs4SSxNQUFNOUksS0FBS3NOLElBQUksRUFBRXROLEtBQUtnQixLQUFLaEIsS0FBS2dJLElBQUl0TCxHQUFHc0QsS0FBS2dJLElBQUksT0FBTyxJQUFJLElBQUk3TixFQUFFNHlELEdBQUcxeEQsRUFBRWMsRUFBRVAsR0FBR00sRUFBRW9rRCxHQUFHbm1ELEVBQUVTLEVBQUV1QixJQUFJUSxFQUFFLEdBQUd2QyxFQUFFLEVBQUVBLEVBQUVELEVBQUUyTixNQUFNLEdBQUcxTixJQUFJdUMsRUFBRWUsS0FBSyt0RCxHQUFHdnZELEVBQUVxRixNQUFNLENBQUNuSCxFQUFFLEdBQUcsQ0FBQyxFQUFFK0IsSUFBSWxCLElBQUksT0FBTzR5QixHQUFHbHhCLE1BQU13d0QsR0FBR3R5RCxPQUFPK0UsT0FBTyxDQUFDd3RELFdBQVdULEdBQUdVLGNBQWNSLEdBQUdTLE1BQU1QLEdBQUdRLEtBQUtOLEtBQVlPLEdBQUcsU0FBU255RCxFQUFFYyxFQUFFdkIsR0FBRyxZQUFPLElBQVNBLElBQUlBLEVBQUUsR0FBR2dCLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSVgsRUFBRWMsRUFBRXZDLEVBQUUrQixFQUFFUyxFQUFFdkMsRUFBRUksRUFBRTRGLEVBQUVuRSxFQUFFc0UsRUFBRWhHLEVBQUVtRyxFQUFFSixFQUFFSyxFQUFFLE9BQU8xRixFQUFFc0IsTUFBSyxTQUFTdEIsR0FBRyxPQUFPQSxFQUFFZ0MsT0FBTyxLQUFLLEVBQUUsT0FBT3JCLEVBQUUrdUIsR0FBR3R2QixFQUFFLGNBQWMsVUFBVXFCLEVBQUVpdUIsR0FBR3h1QixFQUFFLFVBQVUsVUFBVWtFLEVBQUV6RSxFQUFFZ00sS0FBSyxHQUFFLFdBQVcsTUFBTSx1RUFBdUVoTSxFQUFFZ00sUUFBT3ZILEVBQUV6RSxFQUFFZ00sS0FBSyxJQUFJbEwsRUFBRWtMLE1BQUssV0FBVyxNQUFNLG1GQUFtRmhNLEVBQUVnTSxLQUFLLHFCQUFxQmxMLEVBQUVrTCxRQUFPbk4sRUFBRW1CLEVBQUVrTSxNQUFNdkcsTUFBTSxFQUFFM0YsRUFBRWtNLE1BQU1ySyxPQUFPLEdBQUdmLEVBQUVvTCxNQUFNLDJGQUEyRjNOLEVBQUV5QixFQUFFa00sTUFBTWxNLEVBQUVrTSxNQUFNckssT0FBTyxHQUFHNEMsRUFBRXpGLEVBQUUsR0FBR0EsR0FBR1QsR0FBRSxXQUFXLE1BQU0sNEVBQTRFQSxFQUFFLGNBQWNTLEtBQUksQ0FBQyxFQUFFZ0IsRUFBRTJMLFFBQVEsS0FBSyxFQUFFLE9BQU9yTCxFQUFFakIsRUFBRWlDLE9BQU8sQ0FBQyxFQUFFUixFQUFFNkssUUFBUSxLQUFLLEVBQUUsSUFBSTVLLEVBQUUxQixFQUFFaUMsT0FBTzlDLEVBQUUsQ0FBQzhCLEVBQUV1QixPQUFPdEQsRUFBRUEsR0FBR2lHLEVBQUVoRyxFQUFFLEdBQUc2QixFQUFFK0YsRUFBRSxPQUFPeEgsRUFBRUosRUFBRSxJQUFJbUcsRUFBRSxFQUFFQSxFQUFFL0YsRUFBRStGLElBQUksQ0FBQyxJQUFJaEcsRUFBRWdHLEVBQUVILEVBQUVNLEVBQUV4RSxFQUFFeWpDLFNBQVNwbEMsRUFBRUEsRUFBRTZGLEdBQUdFLEVBQUUsR0FBR0ssRUFBRSxFQUFFQSxFQUFFRCxFQUFFakQsT0FBT2tELElBQUlMLEVBQUU1QyxLQUFLLENBQUN0QyxNQUFNc0YsRUFBRUMsR0FBR28vQixNQUFNcC9CLElBQUksSUFBSUwsRUFBRXVCLE1BQUssU0FBU3hHLEVBQUVjLEdBQUcsT0FBT0EsRUFBRWYsTUFBTUMsRUFBRUQsU0FBUWEsRUFBRXNFLEdBQUcsRUFBRUksRUFBRSxFQUFFQSxFQUFFL0YsRUFBRStGLElBQUksR0FBR0wsRUFBRUssR0FBR28vQixRQUFRcGpDLEVBQUU0RCxHQUFHLENBQUN0RSxFQUFFc0UsR0FBRyxFQUFFLE9BQU8sT0FBT2xGLElBQUlPLEdBQUdBLEVBQUVtUCxVQUFVNU8sSUFBSU8sR0FBR0EsRUFBRXFPLFVBQVUsQ0FBQyxFQUFFMGhCLEdBQUd4d0IsRUFBRVMsRUFBRW9MLE1BQU0sa0JBQWdCLFNBQVN6TSxHQUFHQSxFQUFFQSxFQUFFb3lELEtBQUssR0FBRyxPQUFPcHlELEVBQUVBLEVBQUVxeUQsS0FBSyxHQUFHLE9BQU9yeUQsRUFBRUEsRUFBRXN5RCxJQUFJLEdBQUcsTUFBTXR5RCxFQUFFQSxFQUFFdXlELHVCQUF1QixHQUFHLHlCQUFqRyxDQUEySGxCLEtBQUtBLEdBQUcsS0FBSyxJQUFJbUIsR0FBR3JpQyxHQUFHLENBQUNzaUMsb0JBQW9CLFNBQVN6eUQsRUFBRWMsRUFBRVAsRUFBRVgsUUFBRyxJQUFTQSxJQUFJQSxFQUFFeXhELEdBQUdrQix3QkFBd0IsSUFBSWh6RCxFQUFFK3ZCLEdBQUd0dkIsRUFBRSxTQUFTLHNCQUFzQnFCLEVBQUVpdUIsR0FBR3h1QixFQUFFLGNBQWMsc0JBQXNCaEMsRUFBRSxLQUFLLE1BQU15QixJQUFJekIsRUFBRXd3QixHQUFHL3VCLEVBQUUsVUFBVSx1QkFBdUJuQixFQUFFRyxFQUFFa04sTUFBTXBMLEVBQUVvTCxNQUFNLGlDQUFpQyxJQUFJNUwsRUFBRXRCLEVBQUV3UyxJQUFJMVEsR0FBR3FULE1BQU0sT0FBT2crQyxHQUFHN3hELEVBQUUvQixFQUFFYyxNQUFNOHlELEdBQUd2aUMsR0FBRyxDQUFDd2lDLHFCQUFxQixTQUFTM3lELEVBQUVjLEVBQUVQLFFBQUcsSUFBU0EsSUFBSUEsRUFBRTh3RCxHQUFHa0Isd0JBQXdCLElBQUkzeUQsRUFBRTB2QixHQUFHdHZCLEVBQUUsU0FBUyx1QkFBdUJULEVBQUUsS0FBSyxNQUFNdUIsSUFBSXZCLEVBQUUrdkIsR0FBR3h1QixFQUFFLFVBQVUsd0JBQXdCLElBQUlPLEVBQUUsTUFBTTlCLEVBQUVLLEVBQUVBLEVBQUV1UyxJQUFJNVMsR0FBRyxHQUFHZ0IsSUFBSTh3RCxHQUFHZSxLQUFLLE9BQU8vd0QsRUFBRSxHQUFHZCxJQUFJOHdELEdBQUdpQixJQUFJLE9BQU9qeEQsRUFBRTZILE1BQU0sR0FBRzNJLElBQUk4d0QsR0FBR2dCLEtBQUssQ0FBQyxHQUFHLE1BQU05eUQsRUFBRSxPQUFPOEIsRUFBRW9RLE9BQU8sSUFBSTNTLEVBQUVjLEVBQUU0TSxLQUFLak4sRUFBRWlOLEtBQUszTCxFQUFFUSxFQUFFNkgsTUFBTW1KLElBQUk5UyxFQUFFMkosT0FBTyxPQUFPcEssRUFBRSxFQUFFK0IsRUFBRXdSLElBQUlpZixHQUFHeHlCLElBQUkrQixFQUFFLEdBQUdOLElBQUk4d0QsR0FBR2tCLHVCQUF1QixDQUFDLEdBQUcsTUFBTWh6RCxFQUFFLE9BQU84QixFQUFFNkgsTUFBTW1KLElBQUlpZixHQUFHMXhCLEVBQUU0TSxPQUFPLElBQUlsTCxFQUFFL0IsRUFBRTRTLElBQUkwZixHQUFHanlCLEVBQUU2TSxRQUFRd0csU0FBU3FlLEdBQUcsSUFBSXBvQixNQUFNMkcsVUFBVSxPQUFPeE8sRUFBRTZILE1BQU1tSixJQUFJL1EsR0FBRyxNQUFNbUMsTUFBTSxzQkFBc0JsRCxNQUFNcXlELEdBQUd6aUMsR0FBRyxDQUFDMGlDLGdCQUFnQixTQUFTN3lELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLFFBQUcsSUFBU0EsSUFBSUEsRUFBRTh4RCxHQUFHa0Isd0JBQXdCLElBQUlseEQsRUFBRWl1QixHQUFHdHZCLEVBQUUsU0FBUyxrQkFBa0JsQixFQUFFd3dCLEdBQUd4dUIsRUFBRSxjQUFjLGtCQUFrQkQsRUFBRSxLQUFLLE1BQU1qQixJQUFJaUIsRUFBRXl1QixHQUFHMXZCLEVBQUUsVUFBVSxtQkFBbUJSLEVBQUVpQyxFQUFFb0wsTUFBTTNOLEVBQUUyTixNQUFNLDZCQUE2QixJQUFJbkwsRUFBRWd3QixHQUFHLEdBQUd2ZixJQUFJMVEsRUFBRThRLElBQUlyVCxHQUFHb0ssSUFBSTNJLEdBQUUsSUFBSyxPQUFPbXlELEdBQUdweEQsRUFBRVQsRUFBRXRCLE1BQU11ekQsR0FBRzNpQyxHQUFHLENBQUM0aUMsV0FBVyxTQUFTL3lELEVBQUVjLEVBQUVQLEVBQUVYLFFBQUcsSUFBU0EsSUFBSUEsRUFBRXl4RCxHQUFHa0Isd0JBQXdCLElBQUloekQsRUFBRSt2QixHQUFHdHZCLEVBQUUsU0FBUyxhQUFhcUIsRUFBRWl1QixHQUFHeHVCLEVBQUUsY0FBYyxhQUFhaEMsRUFBRSxLQUFLLE1BQU15QixJQUFJekIsRUFBRXd3QixHQUFHL3VCLEVBQUUsVUFBVSxjQUFjbkIsRUFBRUcsRUFBRWtOLE1BQU1wTCxFQUFFb0wsTUFBTSx3QkFBd0IsSUFBSTVMLEVBQUV5d0IsR0FBRyxHQUFHL3hCLEVBQUUreEIsR0FBRyxHQUFHbmYsSUFBSTVTLEdBQUd3UyxJQUFJbFIsR0FBRyxJQUFJUyxFQUFFVCxFQUFFa1IsSUFBSXhTLEVBQUU0UyxJQUFJOVEsSUFBSXVULE9BQU8sT0FBTzg5QyxHQUFHcHhELEVBQUV4QyxFQUFFYyxNQUFNb3pELEdBQUc3aUMsR0FBRyxDQUFDOGlDLFdBQVcsU0FBU2p6RCxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxRQUFHLElBQVNLLElBQUlBLEVBQUUsUUFBRyxJQUFTTCxJQUFJQSxFQUFFOHhELEdBQUdrQix3QkFBd0IsSUFBSWx4RCxFQUFFaXVCLEdBQUd0dkIsRUFBRSxTQUFTLGFBQWFsQixFQUFFd3dCLEdBQUd4dUIsRUFBRSxjQUFjLGFBQWFELEVBQUUsS0FBSyxNQUFNTixJQUFJTSxFQUFFeXVCLEdBQUcvdUIsRUFBRSxVQUFVLGNBQWNuQixFQUFFaUMsRUFBRW9MLE1BQU0zTixFQUFFMk4sTUFBTSx3QkFBd0IsSUFBSW5MLEVBQUVnd0IsR0FBRzF4QixHQUFHYixFQUFFRCxFQUFFaVQsSUFBSTFRLEdBQUdxVCxNQUFNdlYsRUFBRXNsRCxHQUFHMWxELEVBQUV1QyxHQUFHeUQsRUFBRWhHLEVBQUVnVCxJQUFJNVMsR0FBR3lCLEVBQUUwd0IsR0FBRyxJQUFJbmYsSUFBSWhULEVBQUVxVixVQUFVNUMsSUFBSXRRLEVBQUU2USxJQUFJcE4sSUFBSSxPQUFPMnRELEdBQUc5eEQsRUFBRUMsRUFBRXRCLE1BQU0yekQsR0FBRy9pQyxHQUFHLENBQUNnakMsU0FBUyxTQUFTbnpELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLFFBQUcsSUFBU0ssSUFBSUEsRUFBRSxXQUFNLElBQVNMLElBQUlBLEVBQUU4eEQsR0FBR2tCLHdCQUF3QixJQUFJbHhELEVBQUVpdUIsR0FBR3R2QixFQUFFLFNBQVMsV0FBV2xCLEVBQUV3d0IsR0FBR3h1QixFQUFFLGNBQWMsV0FBV0QsRUFBRSxLQUFLLE1BQU1OLElBQUlNLEVBQUV5dUIsR0FBRy91QixFQUFFLFVBQVUsWUFBWW5CLEVBQUVpQyxFQUFFb0wsTUFBTTNOLEVBQUUyTixNQUFNLHNCQUFzQixJQUFJbkwsRUFBRWd3QixHQUFHLEdBQUd2eUIsRUFBRXV5QixHQUFHMXhCLEdBQUdULEVBQUVrQyxFQUFFOFEsSUFBSXJULEVBQUU4UyxJQUFJN1MsR0FBRzROLE9BQU91SCxNQUFNbkMsSUFBSXpRLEVBQUV5USxJQUFJMVEsR0FBRzhRLElBQUk3USxFQUFFeVEsSUFBSWpULEdBQUc4UyxJQUFJN1MsR0FBRzROLFFBQVEsT0FBTytsRCxHQUFHdnpELEVBQUUwQixFQUFFdEIsTUFBTTZ6RCxHQUFHampDLEdBQUcsQ0FBQ2tqQyxrQkFBa0IsU0FBU3J6RCxFQUFFYyxFQUFFUCxFQUFFWCxRQUFHLElBQVNBLElBQUlBLEVBQUV5eEQsR0FBR2tCLHdCQUF3QixJQUFJaHpELEVBQUUrdkIsR0FBR3R2QixFQUFFLFNBQVMsb0JBQW9CcUIsRUFBRWl1QixHQUFHeHVCLEVBQUUsY0FBYyxvQkFBb0JoQyxFQUFFLEtBQUssTUFBTXlCLElBQUl6QixFQUFFd3dCLEdBQUcvdUIsRUFBRSxVQUFVLHFCQUFxQm5CLEVBQUVHLEVBQUVrTixNQUFNcEwsRUFBRW9MLE1BQU0sK0JBQStCLElBQUk1TCxFQUFFdEIsRUFBRXVULGtCQUFrQnpSLEdBQUcsT0FBT3F4RCxHQUFHN3hELEVBQUUvQixFQUFFYyxNQUFNMHpELEdBQUduakMsR0FBRyxDQUFDb2pDLHFCQUFxQixTQUFTdnpELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLFFBQUcsSUFBU0ssSUFBSUEsRUFBRSxRQUFHLElBQVNMLElBQUlBLEVBQUU4eEQsR0FBR2tCLHdCQUF3QixJQUFJbHhELEVBQUVpdUIsR0FBR3R2QixFQUFFLG1CQUFtQix1QkFBdUJsQixFQUFFd3dCLEdBQUd4dUIsRUFBRSxTQUFTLHVCQUF1QkQsRUFBRSxLQUFLLEdBQUcsTUFBTU4sSUFBSU0sRUFBRXl1QixHQUFHL3VCLEVBQUUsVUFBVSx3QkFBd0JuQixFQUFFaUMsRUFBRW9MLE1BQU0zTixFQUFFMk4sTUFBTSxrQ0FBa0M3TSxFQUFFLEVBQUUsQ0FBQyxJQUFJMEIsRUFBRWd3QixHQUFHMXhCLEdBQUdiLEVBQUV1eUIsR0FBRyxHQUFHbnlCLEVBQUVteUIsR0FBRyxJQUFJandCLEVBQUVBLEVBQUU4USxJQUFJcFQsRUFBRWdULElBQUl6USxJQUFJc1EsSUFBSXpTLEVBQUVnVCxJQUFJN1EsSUFBSSxJQUFJeUQsRUFBRSxTQUFTL0UsRUFBRWMsR0FBRyxJQUFJUCxFQUFFK3VCLEdBQUd0dkIsRUFBRSxTQUFTLGlDQUFpQ0osRUFBRTB2QixHQUFHeHVCLEVBQUUsU0FBUyxpQ0FBaUMxQixFQUFFbUIsRUFBRWtNLE1BQU03TSxFQUFFNk0sTUFBTSw0Q0FBNEMsSUFBSWxOLEVBQUVLLEVBQUVnVixPQUFPdlQsRUFBRXpCLEVBQUV1UyxJQUFJNVIsR0FBR3pCLEVBQUVjLEVBQUU4VSxNQUFNUixNQUFNek8sTUFBTTZPLFFBQVEsT0FBTy9VLEVBQUV3UyxJQUFJMVEsR0FBR3VRLElBQUk5UyxHQUE5UCxDQUFrUXVDLEVBQUV2QyxHQUFHLE9BQU80ekQsR0FBRzN0RCxFQUFFbEUsRUFBRXRCLE1BQU1pMEQsR0FBR3JqQyxHQUFHLENBQUNzakMscUJBQXFCLFNBQVN6ekQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsUUFBRyxJQUFTSyxJQUFJQSxFQUFFLFFBQUcsSUFBU0wsSUFBSUEsRUFBRTh4RCxHQUFHa0Isd0JBQXdCLElBQUlseEQsRUFBRWl1QixHQUFHdHZCLEVBQUUsZUFBZSx1QkFBdUJsQixFQUFFd3dCLEdBQUd4dUIsRUFBRSxTQUFTLHVCQUF1QkQsRUFBRSxLQUFLLEdBQUcsTUFBTU4sSUFBSU0sRUFBRXl1QixHQUFHL3VCLEVBQUUsVUFBVSx3QkFBd0JuQixFQUFFaUMsRUFBRW9MLE1BQU0zTixFQUFFMk4sTUFBTSxrQ0FBa0M3TSxFQUFFLEVBQUUsQ0FBQyxJQUFJMEIsRUFBRWd3QixHQUFHMXhCLEdBQUdiLEVBQUV1eUIsR0FBRyxHQUFHbnlCLEVBQUVteUIsR0FBR2p3QixFQUFFb0wsTUFBTSxJQUFJcEwsRUFBRUEsRUFBRThRLElBQUlwVCxFQUFFZ1QsSUFBSXpRLElBQUlzUSxJQUFJdFEsRUFBRStRLElBQUlsVCxJQUFJLElBQUk0RixFQUFFLFNBQVMvRSxFQUFFYyxFQUFFUCxHQUFHLFFBQUcsSUFBU0EsSUFBSUEsR0FBRyxJQUFJLElBQUlBLElBQUlBLEVBQUVPLEVBQUV5TCxLQUFLLEdBQUdoTSxJQUFJTyxFQUFFeUwsS0FBSyxFQUFFLE1BQU05SSxNQUFNLG1HQUFtRzNDLEVBQUV5TCxLQUFLLGdCQUFnQmhNLEdBQUcsT0FBT3M3QixJQUFHLFNBQVM3N0IsRUFBRWMsRUFBRWxCLEdBQUcsSUFBSUwsRUFBRXVCLEVBQUV5USxVQUFVLENBQUNoUixJQUFHLEdBQUljLEVBQUVQLEVBQUUrTyxVQUFVa0MsSUFBSXhTLEdBQUcsT0FBT0ssRUFBRSxDQUFDSSxFQUFFcUIsSUFBSSxDQUFDdEIsTUFBTXNCLEVBQUU4USxJQUFJblMsR0FBR2tVLE1BQU1oTCxJQUFJLENBQUMzSSxJQUFJb2YsU0FBUyxTQUFTM2YsRUFBRWMsR0FBRyxJQUFJbEIsRUFBRWtCLEVBQUUsR0FBR3ZCLEVBQUV1QixFQUFFLEdBQUdPLEVBQUV1dUIsR0FBRzV2QixFQUFFeU0sTUFBTSxDQUFDbE0sSUFBSSxNQUFNLENBQUNQLEVBQUUyTyxRQUFRdE4sR0FBRzhRLElBQUl2UyxFQUFFaVEsVUFBVWtDLElBQUl4UyxFQUFFa0csUUFBUXpGLEVBQUUyTyxRQUFRdE4sR0FBRzhRLElBQUk1UyxFQUFFa0csTUFBTXNNLElBQUluUyxFQUFFaVEsaUJBQTdQZ3NCLENBQThRNzdCLEVBQUVjLEdBQXhlLENBQTRlTyxFQUFFdkMsR0FBRyxPQUFPNHpELEdBQUczdEQsRUFBRWxFLEVBQUV0QixNQUFNbTBELEdBQUdsMEQsT0FBTytFLE9BQU8sQ0FBQyxnQkFBZ0IsT0FBTzhzRCxJQUFJc0MsbUJBQW1CbkIsR0FBR29CLG9CQUFvQmxCLEdBQUdtQixlQUFlakIsR0FBR2tCLFVBQVVoQixHQUFHaUIsVUFBVWYsR0FBR2dCLFFBQVFkLEdBQUdlLGlCQUFpQmIsR0FBR2Msb0JBQW9CWixHQUFHYSxvQkFBb0JYLEtBQUssU0FBU1ksR0FBR3AwRCxFQUFFYyxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsR0FBRSxHQUFJZ2YsR0FBR3pDLE1BQUssV0FBVyxHQUFHLElBQUlyZCxFQUFFeU0sTUFBTXJLLE9BQU8sTUFBTSxJQUFJcUIsTUFBTSwwQ0FBMEN6RCxFQUFFeU0sTUFBTXJLLE9BQU8sYUFBYSxJQUFJLElBQUk3QixFQUFFUCxFQUFFeU0sTUFBTSxHQUFHN00sRUFBRUksRUFBRXlNLE1BQU0sR0FBR2xOLEVBQUVnNEIsR0FBR2gzQixHQUFHYyxFQUFFckIsRUFBRXFRLFFBQVF2UixFQUFFMHlCLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUkzd0IsRUFBRS9CLEVBQUV1UixRQUFRL08sRUFBRWYsR0FBR1gsRUFBRUEsRUFBRVcsRUFBRXhCLEVBQUUsU0FBU2lCLEdBQUcsSUFBSWMsRUFBRVEsRUFBRUQsRUFBRXRDLEVBQUU4QixFQUFFMUIsRUFBRUksRUFBRXVCLEVBQUVnZixHQUFHekMsTUFBSyxXQUFXLElBQUl2YyxFQUFFTyxFQUFFNkUsTUFBTSxDQUFDbEcsRUFBRUEsR0FBRyxDQUFDTyxFQUFFUCxFQUFFLElBQUlzQixFQUFFUixFQUFFZ1EsT0FBTy9SLEVBQUVzQyxFQUFFNkUsTUFBTSxDQUFDbEcsRUFBRUEsR0FBRyxDQUFDLEVBQUUsSUFBSWIsRUFBRXF5QixHQUFHLENBQUMsRUFBRSxLQUFLdmQsTUFBTWxWLEVBQUUwVSxRQUFRLEdBQUcrZCxHQUFHLENBQUMsQ0FBQyxNQUFNenNCLEVBQUVoRyxFQUFFZ1QsSUFBSTVTLEVBQUVnVCxJQUFJN1EsSUFBSVYsRUFBRUUsRUFBRXVSLElBQUl0TixHQUFHbEUsRUFBRSxJQUFJRCxFQUFFNkwsTUFBTSxHQUFHM04sRUFBRXVSLFFBQVF2UixFQUFFdUgsT0FBT3pGLEVBQUVzRixNQUFNLENBQUMsRUFBRSxHQUFHLENBQUN0RixFQUFFNkwsTUFBTSxHQUFHLEVBQUU3TCxFQUFFNkwsTUFBTSxLQUFLLEdBQUcsSUFBSXpILEVBQUU3RixFQUFFeVIsT0FBTzdMLEdBQUdzTixJQUFJL1EsR0FBRzRTLE1BQU05VSxFQUFFaUMsRUFBRTZFLE1BQU0sQ0FBQ2xHLEVBQUUsR0FBRyxDQUFDTyxFQUFFUCxFQUFFSixJQUFJc0YsRUFBRUYsRUFBRW1OLElBQUl0UixHQUFHLEdBQUcsSUFBSWIsRUFBRXFCLEVBQUVqQyxFQUFFMlMsSUFBSTdNLEVBQUUwTCxPQUFPL1AsRUFBRW1TLFlBQVlwQyxPQUFPeFIsU0FBUyxDQUFDLElBQUlGLEVBQUVFLEVBQUUyUyxJQUFJN00sRUFBRTBMLE9BQU8vUCxFQUFFbVMsWUFBWXBDLE9BQU94UixLQUFLaUMsRUFBRUEsRUFBRTZFLE1BQU0sQ0FBQyxFQUFFLEdBQUcsQ0FBQ2xHLEVBQUVKLElBQUl5RyxPQUFPbkgsRUFBRSxHQUFHLElBQUltRyxFQUFFOUYsRUFBRTJHLE1BQU0sQ0FBQyxFQUFFbEcsR0FBRyxDQUFDTyxFQUFFaEIsRUFBRWtOLE1BQU0sR0FBR3pNLElBQUksR0FBRyxJQUFJQSxFQUFFVCxFQUFFOEYsRUFBRTBNLElBQUkxTSxFQUFFdUwsT0FBTy9QLEdBQUcrUCxPQUFPMUwsRUFBRThOLGtCQUFrQixDQUFDLElBQUkvTixFQUFFSSxFQUFFME0sSUFBSTFNLEVBQUV1TCxPQUFPL1AsR0FBRytQLE9BQU8xTCxFQUFFOE4sY0FBY3pULEVBQUVBLEVBQUUyRyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMzRixFQUFFUCxJQUFJcUcsT0FBT3BCLEVBQUUsR0FBRyxNQUFNLENBQUNwRSxFQUFFUSxFQUFFOUIsTUFBS3NCLEVBQUVDLEVBQUUsR0FBR08sRUFBRVAsRUFBRSxHQUFHdkIsRUFBRXVCLEVBQUUsR0FBR3l0QixHQUFHLENBQUNqdEIsRUFBRXZDLEVBQUVJLEtBQUtBLEVBQUUsRUFBRUEsRUFBRW1DLElBQUluQyxFQUFFSixFQUFFSSxHQUFHLE9BQU8yQixHQUFHUCxFQUFFWCxJQUFJTCxFQUFFQSxFQUFFMkcsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDM0YsRUFBRVgsSUFBSXlCLEVBQUVBLEVBQUU2RSxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUN0RyxFQUFFQSxLQUFLLENBQUNMLEVBQUU4QixNQUFLLElBQUlnekQsR0FBR2xrQyxHQUFHLENBQUNta0MsYUFBYSxTQUFTdDBELEdBQUcsSUFBSWMsRUFBRSxHQUFHRyxNQUFNa0UsUUFBUW5GLEdBQUcsQ0FBQ2MsR0FBRSxFQUFHa0UsRUFBRSxNQUFNaEYsR0FBR0EsRUFBRW9DLE9BQU8sR0FBRSxXQUFXLE1BQU0sdUVBQXNFLElBQUksSUFBSTdCLEVBQUVQLEVBQUUsR0FBR3lNLE1BQU0sR0FBRzdNLEVBQUUsU0FBU2tCLEdBQUdrRSxFQUFFaEYsRUFBRWMsR0FBRzJMLE1BQU0sS0FBS2xNLEdBQUUsV0FBVyxNQUFNLGlFQUFpRVAsRUFBRWMsR0FBRzJMLE1BQU0sR0FBRyxRQUFRbE0sRUFBRSxRQUFPaEIsRUFBRSxFQUFFQSxFQUFFUyxFQUFFb0MsU0FBUzdDLEVBQUVLLEVBQUVMLFFBQVF1QixHQUFFLEVBQUdkLEVBQUUyeUIsR0FBRzN5QixFQUFFQSxFQUFFeU0sTUFBTSxHQUFHLEdBQUdyRyxLQUFJLFNBQVNwRyxHQUFHLE9BQU9zNUIsR0FBR3Q1QixFQUFFLENBQUMsT0FBTWdGLEVBQUVoRixFQUFFb0MsUUFBUXBDLEVBQUUsR0FBR3lNLE1BQU0sSUFBRyxXQUFXLE1BQU0sb0NBQW9Dek0sRUFBRW9DLE9BQU8sbUNBQW1DcEMsRUFBRSxHQUFHeU0sTUFBTSxHQUFHLFFBQU8sSUFBSXBMLEVBQUUsR0FBR3ZDLEVBQUVrQixFQUFFYSxFQUFFLFNBQVNiLEdBQUdxQixFQUFFZ0IsS0FBS3lkLEdBQUd6QyxNQUFLLFdBQVcsSUFBSXZjLEVBQUVoQyxFQUFFa0IsR0FBRyxHQUFHQSxFQUFFLEVBQUUsSUFBSSxJQUFJTyxFQUFFLEVBQUVBLEVBQUVQLElBQUlPLEVBQUUsQ0FBQyxJQUFJWCxFQUFFOHRELEdBQUdyc0QsRUFBRWQsR0FBRzZSLFVBQVV0UixJQUFJcVIsSUFBSTlRLEVBQUVkLElBQUlPLEVBQUVBLEVBQUVpUixJQUFJblMsR0FBRyxPQUFPa0IsRUFBRXVSLElBQUl5OEMsR0FBR2h1RCxFQUFFLG1CQUFrQixJQUFJdkIsRUFBRSxFQUFFQSxFQUFFUyxFQUFFb0MsU0FBUzdDLEVBQUVzQixFQUFFdEIsR0FBRyxPQUFPdUIsRUFBRTA0QixHQUFHbjRCLEVBQUUsR0FBR0EsS0FBS2t6RCxHQUFHcGtDLEdBQUcsQ0FBQ3FrQyxJQUFJLFNBQVN4MEQsRUFBRWMsR0FBRyxRQUFHLElBQVNBLElBQUlBLEdBQUUsR0FBSWQsRUFBRXVNLEtBQUssRUFBRSxNQUFNLElBQUk5SSxNQUFNLGdFQUFnRXpELEVBQUV1TSxNQUFNLEdBQUcsSUFBSXZNLEVBQUV1TSxLQUFLLE9BQU82bkQsR0FBR3AwRCxFQUFFYyxHQUFHLElBQUlQLEVBQUVQLEVBQUV5TSxNQUFNdkcsTUFBTSxFQUFFbEcsRUFBRXlNLE1BQU1ySyxPQUFPLEdBQUc4RixRQUFPLFNBQVNsSSxFQUFFYyxHQUFHLE9BQU9kLEVBQUVjLEtBQUlsQixFQUFFaTZCLEdBQUc3NUIsRUFBRTJPLFFBQVEsQ0FBQ3BPLEVBQUVQLEVBQUV5TSxNQUFNek0sRUFBRXlNLE1BQU1ySyxPQUFPLEdBQUdwQyxFQUFFeU0sTUFBTXpNLEVBQUV5TSxNQUFNckssT0FBTyxLQUFLLEdBQUc3QyxFQUFFLEdBQUc4QixFQUFFLEdBQUcsT0FBT3pCLEVBQUVxRSxTQUFRLFNBQVNqRSxHQUFHLElBQUlPLEVBQUU2ekQsR0FBR3AwRCxFQUFFYyxHQUFHbEIsRUFBRVcsRUFBRSxHQUFHekIsRUFBRXlCLEVBQUUsR0FBR2hCLEVBQUU4QyxLQUFLekMsR0FBR3lCLEVBQUVnQixLQUFLdkQsTUFBSyxDQUFDMDZCLEdBQUdqNkIsRUFBRSxHQUFHb1AsUUFBUTNPLEVBQUV5TSxPQUFPK3NCLEdBQUduNEIsRUFBRSxHQUFHc04sUUFBUTNPLEVBQUV5TSxXQUFXZ29ELEdBQUdqMUQsT0FBTytFLE9BQU8sQ0FBQ213RCxZQUFZTCxHQUFHNzRCLEdBQUcrNEIsS0FBSyxTQUFTSSxHQUFHMzBELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsTUFBTUssSUFBSUEsRUFBRSxJQUFJLE1BQU1MLElBQUlBLEVBQUVpSixPQUFPb3NELG1CQUFtQixJQUFJdnpELEVBQUVyQixFQUFFeU0sTUFBTSxHQUFHLE9BQU9sTSxFQUFFb0UsS0FBS0csSUFBSXZFLEVBQUVjLEdBQUcyRCxFQUFFLEdBQUdwRixHQUFHQSxHQUFHLEdBQUUsV0FBVyxNQUFNLDRDQUE0Q0EsRUFBRSxPQUFNb0YsRUFBRSxJQUFJaEYsRUFBRXVNLE1BQUssV0FBVyxNQUFNLCtDQUErQ3ZNLEVBQUV1TSxLQUFLLE9BQU12SCxFQUFFLElBQUloRixFQUFFeU0sTUFBTSxJQUFHLFdBQVcsTUFBTSxvREFBb0R6TSxFQUFFeU0sTUFBTSxNQUFLekgsRUFBRSxJQUFJbEUsRUFBRXlMLE1BQUssV0FBVyxNQUFNLGdDQUErQnZILEVBQUVsRSxFQUFFMkwsTUFBTSxLQUFLcEwsR0FBRSxXQUFXLE1BQU0sc0RBQXNEQSxFQUFFLGFBQWFQLEVBQUUyTCxNQUFNLE1BQUssQ0FBQ29vRCxjQUFjdDBELEVBQUV1MEQsYUFBYWwxRCxFQUFFbTFELGVBQWV4MUQsR0FBRyxJQUFJeTFELEdBQUc3a0MsR0FBRyxDQUFDOGtDLGdCQUFnQixTQUFTajFELEVBQUVjLEVBQUVQLFFBQUcsSUFBU0EsSUFBSUEsR0FBRSxHQUFJLElBQUlYLEVBQUUwdkIsR0FBR3R2QixFQUFFLFNBQVMsa0JBQWtCZ0YsRUFBRSxJQUFJcEYsRUFBRTJNLE1BQU0sSUFBSTNNLEVBQUUyTSxNQUFLLFdBQVcsTUFBTSxnRUFBZ0UzTSxFQUFFMk0sS0FBSyxPQUFNdkgsRUFBRSxJQUFJbEUsRUFBRXNCLFFBQU8sV0FBVyxNQUFNLDZEQUE2RHRCLEVBQUUsT0FBTSxJQUFJdkIsRUFBRUssRUFBRXlCLEdBQUUsRUFBRyxJQUFJekIsRUFBRTJNLE9BQU9sTCxHQUFFLEVBQUc5QixFQUFFSyxFQUFFa1AsS0FBSyxFQUFFbFAsRUFBRTZNLE1BQU0sR0FBRzdNLEVBQUU2TSxNQUFNLEdBQUc3TSxFQUFFNk0sTUFBTSxLQUFLLElBQUkzTixFQUFFZ0MsRUFBRSxHQUFHRCxFQUFFQyxFQUFFLEdBQUdRLEVBQUV3ZSxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxPQUFPQSxFQUFFLENBQUN2QixJQUFJUyxFQUFFcVcsZUFBZTlXLEVBQUVULEVBQUUrQixFQUFFTixLQUFJLENBQUMyMEQsWUFBWTMxRCxJQUFHLFNBQVNTLEVBQUVjLEdBQUcsTUFBTSxDQUFDbzBELFlBQVksV0FBVyxPQUFPcDFDLEdBQUduQyxXQUFVLFNBQVMvZCxHQUFHLE9BQU9BLEVBQUUyK0IsdUJBQXVCditCLEVBQUVjLEVBQUUsR0FBR1AsS0FBSSxTQUFRLE9BQU9jLEVBQUVDLEVBQUV1TixLQUFLdk4sRUFBRW1MLE1BQU0sR0FBR25MLEVBQUVtTCxNQUFNLEdBQUduTCxFQUFFbUwsTUFBTSxJQUFJbkwsS0FBSzZ6RCxHQUFHaGxDLEdBQUcsQ0FBQ2lsQyx1QkFBdUIsU0FBU3AxRCxFQUFFYyxFQUFFUCxRQUFHLElBQVNBLElBQUlBLEdBQUUsR0FBSSxJQUFJWCxFQUFFMHZCLEdBQUd0dkIsRUFBRSxTQUFTLHlCQUF5QmdGLEVBQUUsSUFBSXBGLEVBQUUyTSxNQUFNLElBQUkzTSxFQUFFMk0sTUFBSyxXQUFXLE1BQU0sdUVBQXVFM00sRUFBRTJNLEtBQUssT0FBTXZILEVBQUUsSUFBSWxFLEVBQUVzQixRQUFPLFdBQVcsTUFBTSxvRUFBb0V0QixFQUFFLE9BQU1rRSxFQUFFLFlBQVlwRixFQUFFdU0sT0FBTyxVQUFVdk0sRUFBRXVNLE9BQU0sV0FBVyxNQUFNLHNEQUFxRCxJQUFJNU0sRUFBRUssRUFBRXlCLEdBQUUsRUFBRyxJQUFJekIsRUFBRTJNLE9BQU9sTCxHQUFFLEVBQUc5QixFQUFFSyxFQUFFa1AsS0FBSyxFQUFFbFAsRUFBRTZNLE1BQU0sR0FBRzdNLEVBQUU2TSxNQUFNLEdBQUc3TSxFQUFFNk0sTUFBTSxLQUFLLElBQUkzTixFQUFFZ0MsRUFBRSxHQUFHRCxFQUFFQyxFQUFFLEdBQUdRLEVBQUV3ZSxHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxPQUFPQSxFQUFFLENBQUN2QixJQUFJUyxFQUFFdVcsc0JBQXNCaFgsRUFBRVQsRUFBRStCLEVBQUVOLEtBQUksQ0FBQzIwRCxZQUFZMzFELElBQUcsU0FBU1MsRUFBRWMsR0FBRyxNQUFNLENBQUNvMEQsWUFBWSxXQUFXLE9BQU9wMUMsR0FBR25DLFdBQVUsU0FBUy9kLEdBQUcsT0FBT0EsRUFBRTQrQiw4QkFBOEJ4K0IsRUFBRWMsRUFBRSxHQUFHUCxLQUFJLFNBQVEsT0FBT2MsRUFBRUMsRUFBRXVOLEtBQUt2TixFQUFFbUwsTUFBTSxHQUFHbkwsRUFBRW1MLE1BQU0sR0FBR25MLEVBQUVtTCxNQUFNLElBQUluTCxLQUFLK3pELEdBQUdsbEMsR0FBRyxDQUFDbWxDLG1CQUFtQixTQUFTdDFELEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLFFBQUcsSUFBU0ssSUFBSUEsRUFBRSxTQUFJLElBQVNMLElBQUlBLEVBQUVpSixPQUFPb3NELG1CQUFtQixJQUFJdnpELEVBQUVpdUIsR0FBR3R2QixFQUFFLFFBQVEscUJBQXFCbEIsRUFBRXd3QixHQUFHeHVCLEVBQUUsU0FBUyxxQkFBcUJELEVBQUU4ekQsR0FBR3R6RCxFQUFFdkMsRUFBRXlCLEVBQUVYLEVBQUVMLEdBQUcsT0FBT2dCLEVBQUVNLEVBQUVnMEQsY0FBY2oxRCxFQUFFaUIsRUFBRWkwRCxhQUFhdjFELEVBQUVzQixFQUFFazBELGVBQWVqMUMsR0FBR25DLFdBQVUsU0FBUzNkLEdBQUcsT0FBT0EsRUFBRTIrQixrQkFBa0J0OUIsRUFBRXZDLEVBQUV5QixFQUFFWCxFQUFFTCxLQUFJLENBQUNnMkQsT0FBT2wwRCxPQUFrZm0wRCxHQUFHcmxDLEdBQUcsQ0FBQ3NsQyxlQUFlLFNBQVN6MUQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEdBQUcsSUFBSXZDLEVBQUV3d0IsR0FBR3R2QixFQUFFLFFBQVEsZ0JBQWdCLFdBQVdhLEVBQUV5dUIsR0FBR3h1QixFQUFFLFFBQVEsZ0JBQWdCLFdBQVdRLEVBQUVndUIsR0FBRy91QixFQUFFLFNBQVMsZ0JBQWdCLFNBQVNoQixFQUFFQSxHQUFHLFdBQVc4QixFQUFFQSxHQUFHLEVBQUUsSUFBSXRDLEVBQUU4QixFQUFFNEwsTUFBTSxHQUFHLE9BQU96SCxFQUFFLElBQUlsRyxFQUFFeU4sTUFBSyxXQUFXLE1BQU0sNkRBQTZEek4sRUFBRXlOLEtBQUssT0FBTXZILEVBQUUsSUFBSW5FLEVBQUUwTCxNQUFNLElBQUkxTCxFQUFFNEwsTUFBTSxJQUFHLFdBQVcsTUFBTSxvREFBb0QxTixFQUFFLHFCQUFxQjhCLEVBQUU0TCxNQUFNLE9BQU16SCxFQUFFLElBQUkxRCxFQUFFaUwsTUFBTWpMLEVBQUVtTCxNQUFNLEtBQUsxTixHQUFFLFdBQVcsTUFBTSxxREFBcURBLEVBQUUsbUJBQW1COEIsRUFBRTRMLE1BQU0sT0FBTXpILEVBQUUsSUFBSXBGLEVBQUV3QyxRQUFPLFdBQVcsTUFBTSx3RUFBd0V4QyxFQUFFd0MsT0FBTyxPQUFNNEMsRUFBRXBGLEVBQUUsSUFBSSxHQUFHQSxFQUFFLElBQUksR0FBRSxXQUFXLE1BQU0sMkNBQTJDQSxLQUFJb0YsRUFBRSxhQUFhekYsR0FBRyxZQUFZQSxHQUFFLFdBQVcsTUFBTSwrQ0FBK0NBLEtBQUl1Z0IsR0FBR25DLFdBQVUsU0FBUzNkLEVBQUVjLEdBQUcsT0FBT2QsRUFBRTQrQixjQUFjOS9CLEVBQUUrQixFQUFFUyxFQUFFMUIsRUFBRUwsRUFBRThCLEtBQUksQ0FBQ3EwRCxPQUFPNTJELEVBQUV5MkQsT0FBTzEwRCxPQUFPODBELEdBQUduMkQsT0FBTytFLE9BQU8sQ0FBQzhSLGVBQWUyK0MsR0FBR3orQyxzQkFBc0I0K0MsR0FBR3gyQixrQkFBa0IwMkIsR0FBR08sdUJBQWpoRCxTQUFTNTFELEVBQUVjLEVBQUV2QixFQUFFOEIsRUFBRXZDLEdBQUcsWUFBTyxJQUFTdUMsSUFBSUEsRUFBRSxTQUFJLElBQVN2QyxJQUFJQSxFQUFFMEosT0FBT29zRCxtQkFBbUJyMEQsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJWCxFQUFFTSxFQUFFUyxFQUFFdkMsRUFBRUksRUFBRTRGLEVBQUVuRSxFQUFFLE9BQU9oQixFQUFFc0IsTUFBSyxTQUFTdEIsR0FBRyxPQUFPQSxFQUFFZ0MsT0FBTyxLQUFLLEVBQUUsT0FBT3JCLEVBQUUrdUIsR0FBR3R2QixFQUFFLFFBQVEsMEJBQTBCYSxFQUFFeXVCLEdBQUd4dUIsRUFBRSxTQUFTLDBCQUEwQlEsRUFBRXF6RCxHQUFHcDBELEVBQUVNLEVBQUV0QixFQUFFOEIsRUFBRXZDLEdBQUdTLEVBQUUrQixFQUFFdXpELGNBQWN4ekQsRUFBRUMsRUFBRXd6RCxhQUFhaDJELEVBQUV3QyxFQUFFeXpELGVBQWUsQ0FBQyxFQUFFM3pELFFBQVFpUSxJQUFJLENBQUM5USxFQUFFMkwsT0FBT3JMLEVBQUVxTCxVQUFVLEtBQUssRUFBRSxPQUFPbk4sRUFBRWEsRUFBRWlDLE9BQU8xQyxFQUFFSixFQUFFLEdBQUdnRyxFQUFFaEcsRUFBRSxHQUFHNkIsRUFBRXNqQyxHQUFHL2tDLEVBQUU0RixFQUFFeEYsRUFBRThCLEVBQUV2QyxHQUFHeUIsSUFBSVAsR0FBR08sRUFBRW1QLFVBQVU3TyxJQUFJQyxHQUFHRCxFQUFFNk8sVUFBVSxDQUFDLEVBQUU5TyxXQUE0a0NnK0IsY0FBYzQyQixLQUFTSyxHQUFHMWxDLEdBQUcsQ0FBQzI1QixRQUFRLFNBQVM5cEQsR0FBRyxJQUFJYyxFQUFFUCxFQUFFUCxFQUFFcUIsRUFBRXpCLEVBQUVJLEVBQUV1RixFQUFFaEcsRUFBRVMsRUFBRXk4QixXQUFXcDdCLE9BQUUsSUFBUzlCLEdBQUdBLEVBQUVULEVBQUVrQixFQUFFMDhCLFdBQVc3N0IsT0FBRSxJQUFTL0IsR0FBR0EsRUFBRXdDLEVBQUV0QixFQUFFMjhCLEtBQUs1OUIsRUFBRWlCLEVBQUU0OEIsV0FBV3o5QixPQUFFLElBQVNKLEVBQUUsU0FBU0EsRUFBRWdHLEVBQUUvRSxFQUFFNjhCLHVCQUF1Qmo4QixFQUFFMHVCLEdBQUcvdUIsRUFBRSxJQUFJLGdCQUFnQm5CLEVBQUVrd0IsR0FBRzF2QixFQUFFLElBQUksZ0JBQWdCa0IsRUFBRTJZLEdBQUc3WSxFQUFFeEIsR0FBR3dCLEVBQUVFLEVBQUUsR0FBRzFCLEVBQUUwQixFQUFFLEdBQUcsSUFBSW9FLEVBQUU3RCxFQUFFVCxFQUFFNkwsTUFBTTdMLEVBQUUyTCxLQUFLLEdBQUczTCxFQUFFNkwsTUFBTTdMLEVBQUUyTCxLQUFLLEdBQUdyTixFQUFFMkIsRUFBRXpCLEVBQUVxTixNQUFNck4sRUFBRW1OLEtBQUssR0FBR25OLEVBQUVxTixNQUFNck4sRUFBRW1OLEtBQUssR0FBR2pILEVBQUVqRSxFQUFFVCxFQUFFNkwsTUFBTTdMLEVBQUUyTCxLQUFLLEdBQUczTCxFQUFFNkwsTUFBTTdMLEVBQUUyTCxLQUFLLEdBQUdoSCxFQUFFMUUsRUFBRXpCLEVBQUVxTixNQUFNck4sRUFBRW1OLEtBQUssR0FBR25OLEVBQUVxTixNQUFNck4sRUFBRW1OLEtBQUssR0FBRzdHLEVBQUU5RSxFQUFFNkwsTUFBTXZHLE1BQU0sR0FBRyxHQUFHTCxFQUFFekcsRUFBRXFOLE1BQU12RyxNQUFNLEdBQUcsR0FBR0gsRUFBRVYsRUFBRUssR0FBR08sRUFBRVosRUFBRVEsR0FBR2IsRUFBRXBFLEVBQUUyTCxNQUFNLEdBQUduTixFQUFFbU4sTUFBTSxHQUFHM0wsRUFBRTJMLE9BQU9uTixFQUFFbU4sTUFBSyxXQUFXLE1BQU0sa0ZBQWtGM0wsRUFBRTJMLEtBQUssUUFBUW5OLEVBQUVtTixLQUFLLE9BQU12SCxFQUFFQyxFQUFFUyxFQUFFRyxJQUFHLFdBQVcsTUFBTSw0Q0FBNENILEVBQUUsVUFBVUcsRUFBRSw0QkFBNEJqRixFQUFFNkwsTUFBTSxRQUFRck4sRUFBRXFOLE1BQU0sa0JBQWlCekgsRUFBRUUsSUFBSWhHLEdBQUUsV0FBVyxNQUFNLHdDQUF3Q2dHLEVBQUUsVUFBVWhHLEVBQUUsNEJBQTRCMEIsRUFBRTZMLE1BQU0sUUFBUXJOLEVBQUVxTixNQUFNLG1CQUFtQnBMLEVBQUUsbUJBQW1CUixFQUFFLGtCQUFpQixJQUFJc0YsRUFBRUksRUFBRUksRUFBRS9GLEVBQUU2TCxNQUFNdkcsTUFBTSxHQUFHLEdBQUdHLE9BQU8sQ0FBQ2YsRUFBRUMsSUFBSXdCLEVBQUUxRixFQUFFVCxFQUFFaU8sS0FBSzlJLEVBQUViLEVBQUVJLEdBQUcxRSxFQUFFaU8sS0FBSzlJLEVBQUVULEVBQUVKLEdBQUc4QixFQUFFbkcsRUFBRXpCLEVBQUV5UCxLQUFLNUksRUFBRVYsRUFBRXJHLEdBQUdFLEVBQUV5UCxLQUFLNUksRUFBRS9HLEVBQUVxRyxHQUFHLE1BQU1qRSxHQUFHNDlCLEdBQUd2NEIsR0FBR1IsRUFBRXNULEdBQUd0VCxFQUFFbXBCLEdBQUdodUIsRUFBRSxPQUFPLGdCQUFnQlYsR0FBRyxJQUFJNkwsT0FBTyxNQUFNMUgsSUFBSXdCLEVBQUUrb0IsR0FBR3ZxQixFQUFFLGdCQUFnQixpQkFBaUIsSUFBSW9DLEVBQUUsQ0FBQ29rQyxHQUFHeGtDLEVBQUU2N0MsR0FBRzU3QyxHQUFHLE9BQU8sTUFBTTFGLElBQUk2RixFQUFFMnVELE1BQU0zdkQsR0FBRyxNQUFNcEIsSUFBSW9DLEVBQUU0dUQsd0JBQXdCeHZELEdBQUd1WixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFdzhCLGlCQUFpQixDQUFDbjdCLEVBQUUwRixFQUFFeEIsRUFBRXlCLEVBQUV5MUIsV0FBV3A3QixFQUFFcTdCLFdBQVc3N0IsRUFBRTg3QixLQUFLeDJCLEVBQUV5MkIsV0FBV3o5QixFQUFFMDlCLHVCQUF1QnQyQixJQUFJLE9BQU96RixFQUFFLENBQUNpRyxFQUFFQyxFQUFFekcsSUFBSUEsSUFBRzRHLEdBQUUsU0FBU25ILEVBQUVjLEdBQUcsSUFBSVAsRUFBRVgsRUFBRWtCLEVBQUUsR0FBR3ZCLEVBQUV1QixFQUFFLEdBQUdoQyxFQUFFZ0MsRUFBRSxHQUFHLEdBQUcsTUFBTTNCLEdBQUcsV0FBV0EsRUFBRW9CLEVBQUVQLE1BQU0sQ0FBQyxHQUFHLFNBQVNiLEVBQUUsTUFBTSxJQUFJc0UsTUFBTSwyQkFBMkJ0RSxFQUFFLGtDQUFrQ29CLEVBQUVQLEVBQUVtUyxJQUFJclQsRUFBRW9YLFFBQVEsSUFBSW5YLEVBQUUsR0FBRyxPQUFPLE1BQU11QyxJQUFJdkMsRUFBRSxDQUFDKzJELE1BQU0sV0FBVyxJQUFJOTFELEVBQUVPLEVBQUVPLEVBQUVtK0IsR0FBRzk0QixFQUFFc0csTUFBTWxNLEVBQUVrTSxPQUFPLE9BQU8zTCxFQUFFc0IsT0FBTyxJQUFJcEMsRUFBRUEsRUFBRWtKLElBQUlwSSxJQUFJZCxFQUFFMk8sUUFBUXhJLEVBQUVzRyxVQUFVcEwsR0FBR1IsR0FBR1EsR0FBR1IsRUFBRXJCLE9BQU9tRSxPQUFPLENBQUM0bkMsR0FBRyxXQUFXLE9BQU9ockMsRUFBRXFRLE9BQU9yUixHQUFFLEdBQUcsSUFBS3FqRCxHQUFHLFdBQVcsT0FBT3JpRCxFQUFFcVEsT0FBT2hSLEdBQUUsR0FBRyxLQUFNYixHQUFHc0MsSUFBSVIsRUFBRXJCLE9BQU9tRSxPQUFPLENBQUM0bkMsR0FBRyxXQUFXLE9BQU9oc0MsRUFBRXFSLE9BQU9yUSxHQUFFLEdBQUcsSUFBS3FpRCxHQUFHLFdBQVcsT0FBT2hqRCxFQUFFZ1IsT0FBT3JRLEdBQUUsR0FBRyxLQUFNeEIsR0FBR1MsT0FBT21FLE9BQU8sQ0FBQzRuQyxHQUFHLFdBQVcsT0FBT2hzQyxFQUFFcVIsT0FBT3JRLEdBQUUsR0FBRyxJQUFLcWlELEdBQUcsV0FBVyxPQUFPcmlELEVBQUVxUSxPQUFPaFIsR0FBRSxHQUFHLEtBQU1iLEdBQUdTLE9BQU9tRSxPQUFPLENBQUM0bkMsR0FBRyxXQUFXLE9BQU9ockMsRUFBRXFRLE9BQU9yUixHQUFFLEdBQUcsSUFBS3FqRCxHQUFHLFdBQVcsT0FBT2hqRCxFQUFFZ1IsT0FBT3JRLEdBQUUsR0FBRyxLQUFNeEIsTUFBSzRQLFFBQVFoSSxNQUFNcXZELEdBQUc3bEMsR0FBRyxDQUFDMjRCLFFBQVEsU0FBUzlvRCxHQUFHLElBQUljLEVBQUVkLEVBQUVzRixFQUFFL0UsRUFBRVAsRUFBRTB5QixPQUFPOXlCLEVBQUVJLEVBQUVzTixRQUFRL04sRUFBRVMsRUFBRWtSLElBQUk3UCxFQUFFckIsRUFBRXFnQyxXQUFXdmhDLE9BQUUsSUFBU3VDLEVBQUUsT0FBT0EsRUFBRVIsRUFBRWIsRUFBRWkyRCxVQUFVMzBELE9BQUUsSUFBU1QsRUFBRSxDQUFDLEVBQUUsR0FBR0EsRUFBRTlCLEVBQUVpQixFQUFFazJELGdCQUFnQi8yRCxFQUFFYSxFQUFFMjhCLEtBQUs1M0IsRUFBRS9FLEVBQUU0OEIsV0FBV2g4QixPQUFFLElBQVNtRSxFQUFFLFNBQVNBLEVBQUUzRixFQUFFWSxFQUFFNjhCLHVCQUF1QjMzQixFQUFFb3FCLEdBQUd4dUIsRUFBRSxJQUFJLFVBQVU1QixFQUFFb3dCLEdBQUcvdUIsRUFBRSxTQUFTLFVBQVU4RSxFQUFFSCxFQUFFRCxHQUFFLEVBQUcsSUFBSUMsRUFBRXFILE9BQU90SCxHQUFFLEVBQUdJLEVBQUVILEVBQUU0SixLQUFLLEVBQUU1SixFQUFFdUgsTUFBTSxHQUFHdkgsRUFBRXVILE1BQU0sR0FBR3ZILEVBQUV1SCxNQUFNLEtBQUt6SCxFQUFFLElBQUlLLEVBQUVrSCxNQUFLLFdBQVcsTUFBTSw2REFBNkRsSCxFQUFFa0gsS0FBSyxPQUFNdkgsRUFBRSxJQUFJOUYsRUFBRXFOLE1BQUssV0FBVyxNQUFNLDhEQUE4RHJOLEVBQUVxTixLQUFLLE9BQU0sTUFBTXhOLEdBQUdpRyxFQUFFTSxFQUFFL0YsSUFBRyxXQUFXLE1BQU0sNkVBQTZFUixFQUFFLGdCQUFnQlEsRUFBRSxPQUFNeUYsRUFBRUssRUFBRW9ILE1BQU0sS0FBS3ZOLEVBQUV1TixNQUFNLElBQUcsV0FBVyxNQUFNLG9DQUFvQ3BILEVBQUVvSCxNQUFNLEdBQUcsdUNBQXVDdk4sRUFBRXVOLE1BQU0sR0FBRyxPQUFNekgsRUFBRTg4QixHQUFHbGlDLEVBQUUwQixJQUFHLFdBQVcsTUFBTSx1RUFBdUUxQixFQUFFLG1CQUFtQjBCLEVBQUUsT0FBTTBELEVBQUUsU0FBU2xHLEdBQUUsV0FBVyxNQUFNLHNDQUFzQ0EsRUFBRSw0Q0FBMkMsSUFBSXlHLEVBQUVHLEVBQUVHLEVBQUV3NUIsR0FBR2g2QixFQUFFb0gsTUFBTXZOLEVBQUV1TixNQUFNN00sRUFBRTBCLEVBQUUvQixFQUFFUixHQUFHLE1BQU1JLElBQUlvRyxFQUFFa1UsR0FBR2xVLEVBQUUrcEIsR0FBR253QixFQUFFLE9BQU8sZ0JBQWdCK0YsR0FBRyxHQUFHZzZCLEdBQUdyNUIsRUFBRXM3QixTQUFTNTdCLEVBQUVrSCxRQUFRLE1BQU1yTixJQUFJc0csRUFBRTRwQixHQUFHbHdCLEVBQUUsZ0JBQWdCLGlCQUFpQixJQUFJMkcsRUFBRSxDQUFDVCxFQUFFRCxFQUFFMGpELFFBQVE3cEQsR0FBRyxNQUFNQyxJQUFJNEcsRUFBRSt2RCxNQUFNdndELEdBQUcsTUFBTW5HLElBQUkyRyxFQUFFZ3dELHdCQUF3QnJ3RCxHQUFHLElBQUlPLEVBQUU2WixHQUFHbkMsV0FBVSxTQUFTM2QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFUCxFQUFFdTlCLFlBQVlsNEIsRUFBRW5HLEVBQUUyRyxFQUFFTixFQUFFM0UsRUFBRThFLEdBQUcsT0FBTzVFLEVBQUUsQ0FBQzVCLEVBQUVtRyxFQUFFOUUsSUFBSUEsSUFBR3dGLEdBQUUsU0FBUy9GLEVBQUVjLEdBQUcsSUFBSVAsRUFBRWMsRUFBRVAsRUFBRWhDLEVBQUV1QyxFQUFFLEdBQUdSLEVBQUVRLEVBQUUsR0FBR3RDLEVBQUVzQyxFQUFFLEdBQUcsR0FBRyxNQUFNVCxHQUFHLFdBQVdBLEVBQUVMLEVBQUVQLE1BQU0sQ0FBQyxHQUFHLFNBQVNZLEVBQUUsTUFBTSxJQUFJNkMsTUFBTSwyQkFBMkI3QyxFQUFFLGtDQUFrQ0wsRUFBRVAsRUFBRW1TLElBQUlwVCxFQUFFbVgsUUFBUWxSLEVBQUU2OEIsR0FBR3ZnQyxJQUFHLFdBQVcsTUFBTSx1SEFBdUhBLEVBQUUsT0FBTSxJQUFJeUQsRUFBRSxHQUFHLE9BQU8sTUFBTTVGLElBQUk0RixFQUFFLENBQUMrd0QsTUFBTSxXQUFXLElBQUk5MUQsRUFBRU8sRUFBRU8sRUFBRW0rQixHQUFHMTVCLEVBQUVrSCxNQUFNbE0sRUFBRWtNLE9BQU8sT0FBTzNMLEVBQUVzQixPQUFPLElBQUlwQyxFQUFFQSxFQUFFa0osSUFBSXBJLElBQUlkLEVBQUUyTyxRQUFRcEosRUFBRWtILFVBQVVqTixPQUFPbUUsT0FBTyxDQUFDMkIsRUFBRSxXQUFXLE9BQU84akQsR0FBR3ZvRCxFQUFFNEwsTUFBTWxNLEVBQUV6QixFQUFFYyxFQUFFTCxJQUFJd3BELFFBQVEsV0FBVyxPQUFPVCxHQUFHem5ELEVBQUVOLEVBQUV6QixFQUFFMk4sTUFBTTdNLEVBQUVMLEtBQUt3RixNQUFLLE9BQU9FLEVBQUVnQixFQUFFNEksS0FBSzVJLEVBQUV3RyxNQUFNLEdBQUd4RyxFQUFFd0csTUFBTSxHQUFHeEcsRUFBRXdHLE1BQU0sSUFBSXhHLEtBQUtrd0QsR0FBRzMyRCxPQUFPK0UsT0FBTyxDQUFDcU0sT0FBT2lsRCxHQUFHcC9DLE9BQU91L0MsS0FBS0ksR0FBRzUyRCxPQUFPK0UsT0FBTyxDQUFDK1IsTUFBTXEvQyxHQUFHVSxPQUFPNUIsR0FBRzZCLE9BQU81QyxHQUFHLzdDLFNBQVM2NEMsR0FBRytGLE1BQU1KLEdBQUdLLE9BQU8xRSxHQUFHMkUsR0FBR3RtQyxHQUFHdW1DLHFCQUFxQmhWLEdBQUdpVixxQkFBcUIvVSxHQUFHZ1YscUJBQXFCOVUsR0FBRzN3QyxtQkFBbUI2d0MsR0FBRzV3QyxVQUFVOHdDLEdBQUcyVSxZQUFZelUsR0FBRzBVLFlBQVl4VSxHQUFHeVUsWUFBWXZVLEdBQUd3VSxpQkFBaUI5TyxHQUFHeDNCLFFBQVFGLEdBQUdPLEtBQUtGLEdBQUdNLEtBQUtGLEdBQUc1cUIsT0FBT21zQixHQUFHeWtDLFNBQVNya0MsR0FBR3NrQyxTQUFTcGtDLEdBQUdxa0MsU0FBU25rQyxHQUFHb2tDLFNBQVNsa0MsR0FBR2x2QixNQUFNMnVCLEdBQUduYyxPQUFPb3lDLEdBQUdueUMsT0FBTzR4QyxHQUFHenFCLE9BQU9vckIsR0FBR3ZyQixnQkFBZ0I2cUIsR0FBRzlxQixlQUFlNHJCLEdBQUd4eUMsZ0JBQWdCa3lCLEdBQUdqeUIsZ0JBQWdCMHlDLEdBQUc3eUMsZ0JBQWdCK3lDLEdBQUc0TixnQkFBZ0IxTixHQUFHLzRDLE9BQU9pNUMsR0FBR2g1QyxJQUFJazVDLEdBQUd1TixhQUFhck4sR0FBR2w1QyxRQUFRbzVDLEdBQUdvTixVQUFVbE4sR0FBR21OLFVBQVVqTixHQUFHa04sVUFBVWhOLEdBQUdpTixVQUFVL00sR0FBRzV6QyxRQUFRazBDLEdBQUduMEMsUUFBUXEwQyxHQUFHbDBDLEtBQUtvMEMsR0FBR2x0QixVQUFVb3RCLEdBQUd0dEIsVUFBVXl0QixHQUFHeGxELE1BQU0wbEQsR0FBRytMLFFBQVE3TCxHQUFHOEwsUUFBUTVMLEdBQUc2TCxRQUFRM0wsR0FBRzRMLFFBQVExTCxHQUFHMTNDLElBQUlnb0MsR0FBR2huQyxLQUFLa25DLEdBQUc3bUMsTUFBTSttQyxHQUFHcm5DLEtBQUt1bkMsR0FBR2xuQyxNQUFNb25DLEdBQUd2bkMsS0FBS3luQyxHQUFHcG5DLE1BQU1zbkMsR0FBRzMzQyxLQUFLNjNDLEdBQUc3b0MsWUFBWStvQyxHQUFHbm9DLElBQUlxb0MsR0FBRy9uQyxLQUFLaW9DLEdBQUc3bkMsSUFBSStuQyxHQUFHdjRDLElBQUl5NEMsR0FBRzdwQyxNQUFNK3BDLEdBQUczd0MsTUFBTTZ3QyxHQUFHM3hDLElBQUk2eEMsR0FBR2xxQyxNQUFNb3FDLEdBQUd4cEMsV0FBVzBwQyxHQUFHMXFDLElBQUk0cUMsR0FBR3JxQyxXQUFXdXFDLEdBQUdoM0MsTUFBTWszQyxHQUFHM3FDLE1BQU02cUMsR0FBR25xQyxRQUFRcXFDLEdBQUduckMsS0FBS3FyQyxHQUFHdjRDLE1BQU15NEMsR0FBR3RyQyxNQUFNd3JDLEdBQUcxNEMsU0FBUzQ0QyxHQUFHeHFDLElBQUkwcUMsR0FBR3BxQyxLQUFLc3FDLEdBQUcvcUMsU0FBU2lyQyxHQUFHeDZDLEtBQUswNkMsR0FBRzlyQyxPQUFPZ3NDLEdBQUd0cUMsS0FBS3dxQyxHQUFHbHJDLElBQUlvckMsR0FBR3A3QyxLQUFLczdDLEdBQUd6dkMsSUFBSWs3QyxHQUFHajdDLElBQUltN0MsR0FBRzk2QyxPQUFPZzdDLEdBQUdqN0MsT0FBT203QyxHQUFHdDdDLFVBQVV3N0MsR0FBR2xvRCxJQUFJb29ELEdBQUd4N0MsS0FBSzA3QyxHQUFHcm9ELElBQUl1b0QsR0FBRzBLLFFBQVF4SyxHQUFHcmtELElBQUl3a0QsR0FBR2w4QyxLQUFLbzhDLEdBQUd2NkMsTUFBTTh5QyxHQUFHN3lDLFlBQVkreUMsR0FBRzV5QyxRQUFROHlDLEdBQUc1eUMsYUFBYTh5QyxHQUFHN3lDLG1CQUFtQit5QyxHQUFHanpDLGNBQWNtekMsR0FBRzF6QyxLQUFLNHpDLEdBQUd4ekMsVUFBVTB6QyxHQUFHenpDLGdCQUFnQjJ6QyxHQUFHL3pDLFdBQVdpMEMsR0FBR3AwQyxTQUFTczBDLEdBQUdyMEMsZUFBZXUwQyxHQUFHNzFDLElBQUkyeEMsR0FBR3ptQixLQUFLMm1CLEdBQUc1eEMsVUFBVTh4QyxHQUFHN3hDLE1BQU0reEMsR0FBR3h4QyxJQUFJMHhDLEdBQUd4eEMsVUFBVTJ4QyxHQUFHNXhDLFNBQVMyeEMsR0FBR3Z4QyxRQUFRMnhDLEdBQUcxeEMsY0FBYzR4QyxHQUFHL3hDLFFBQVFpeUMsR0FBR2h5QyxjQUFja3lDLEdBQUcveEMsSUFBSWl5QyxHQUFHaHlDLFVBQVVreUMsR0FBRzV5QyxJQUFJOHlDLEdBQUc3eUMsVUFBVSt5QyxHQUFHbHpDLElBQUlvekMsR0FBR256QyxVQUFVdXpDLEdBQUczeUMsa0JBQWtCNnlDLEdBQUc1eUMsd0JBQXdCOHlDLEdBQUc5ekMsSUFBSWcwQyxHQUFHL3pDLFVBQVVpMEMsR0FBR3B4QyxJQUFJaTVDLEdBQUcvNEMsVUFBVWs1QyxHQUFHajVDLE1BQU1tNUMsR0FBR3Y1QyxLQUFLMDVDLEdBQUd4NUMsS0FBSzA1QyxHQUFHMzZDLFdBQVc2dUMsR0FBRzN1QyxXQUFXOHVDLEdBQUcvdUMsVUFBVWl2QyxHQUFHL3VDLFdBQVdpdkMsR0FBR2h2QyxNQUFNa3ZDLEdBQUc2VSxXQUFXMVUsR0FBR3AwQyxPQUFPb25CLEdBQUd0bUIsTUFBTXVtQixHQUFHbGYsZUFBZW1mLEdBQUd2bkIsS0FBS3luQixHQUFHcm1CLE1BQU11bUIsR0FBR3ptQixPQUFPMm1CLEdBQUdyZixhQUFhd2YsR0FBRy9tQixXQUFXaW5CLEdBQUc4Z0MsSUFBSTFnQyxHQUFHSyxZQUFZRixHQUFHcG5CLE9BQU93bkIsR0FBRzVtQixJQUFJK21CLEdBQUdpZ0MsTUFBTS8vQixHQUFHZ2dDLE1BQU05L0IsR0FBRysvQixNQUFNNy9CLEdBQUc4L0IsTUFBTTUvQixHQUFHNi9CLEtBQUszL0IsR0FBRzQvQixhQUFhMS9CLEdBQUcyL0IsWUFBWXovQixHQUFHMC9CLGNBQWN4L0IsR0FBR3RxQixRQUFRMm9CLEdBQUdoZ0IsZUFBZThoQixHQUFHaHBCLFFBQVFrcEIsR0FBR3RvQixNQUFNd29CLEdBQUc5b0IsS0FBSyttQixHQUFHaWhDLGdCQUFnQi8rQixHQUFHMW9CLFFBQVE0b0IsR0FBRzgrQixlQUFlNStCLEdBQUd4cEIsS0FBS3doQixHQUFHRSxTQUFTRCxHQUFHNG1DLEtBQUsvbUMsR0FBR3dFLE1BQU1uRSxHQUFHMm1DLE9BQU92bkMsR0FBR3duQyxPQUFPMW5DLEdBQUcybkMsU0FBU3huQyxHQUFHeW5DLFNBQVN4bkMsR0FBR3luQyxTQUFTeG5DLEdBQUd5bkMsU0FBU3huQyxHQUFHeW5DLFNBQVN4bkMsR0FBR3luQyxTQUFTeG5DLEdBQUd5bkMsTUFBTXZuQyxHQUFHemMsU0FBUzhjLEdBQUcvYyxVQUFVaWQsR0FBR3JmLFVBQVUwN0MsR0FBR3Y0QyxRQUFRMmxCLEdBQUcxbEIsV0FBVzRsQixHQUFHaGxCLDJCQUEyQjQzQyxHQUFHOTlDLEtBQUtnK0MsR0FBR24rQyxPQUFPazNDLEdBQUd6d0MsbUJBQW1CNHdDLEdBQUdzUixjQUFjdEssR0FBR3VLLGFBQWFySyxHQUFHc0ssY0FBY3BLLEdBQUc1M0MsYUFBYTgzQyxHQUFHLzNDLEtBQUtpNEMsR0FBR2x4QixVQUFVcXhCLEdBQUdqNEMsSUFBSXE0QyxHQUFHbjRDLEtBQUtzNEMsR0FBR3I0QyxLQUFLdTRDLEdBQUd0NEMsTUFBTXc0QyxHQUFHenhCLGNBQWM0eEIsR0FBR3B5QixTQUFTeXlCLEdBQUdoeUIsS0FBS2t5QixHQUFHeUksUUFBUXZJLEdBQUdhLFdBQVdULEdBQUdVLGNBQWNSLEdBQUdTLE1BQU1QLEdBQUdRLEtBQUtOLEdBQUc4SCxZQUFZdkgsS0FBSyxTQUFTd0gsR0FBRzM1RCxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLEdBQUcsV0FBV1csRUFBRSxPQUFPUCxFQUFFNDVELE9BQU85NEQsR0FBRyxHQUFHLFNBQVNQLEVBQUUsT0FBT1AsRUFBRTRVLEtBQUs5VCxHQUFHLEdBQUcsUUFBUVAsRUFBRSxPQUFPUCxFQUFFNlUsSUFBSS9ULEdBQUcsR0FBRyxVQUFVUCxFQUFFLE9BQU9QLEVBQUVnVixNQUFNbFUsRUFBRWxCLEdBQUcsTUFBTSxJQUFJNkQsTUFBTSxjQUFjbEQsRUFBRSxrREFBa0QsSUFBSXM1RCxHQUFHLFdBQVcsU0FBUzc1RCxJQUFJLEdBQUdrQixLQUFLa3BDLFVBQVUsR0FBR2xwQyxLQUFLNDRELFVBQVMsRUFBR2g3RCxFQUFFYSxJQUFJLGNBQWMsQ0FBQyxJQUFJSyxFQUFFLG9CQUFvQjBpQixnQkFBZ0IsSUFBSUEsZ0JBQWdCLElBQUksS0FBSyxvQkFBb0J0QyxTQUFTQSxTQUFTdUMsY0FBYyxVQUFVLEtBQUssT0FBTzNpQixJQUFJa0IsS0FBS2k0QyxvQkFBb0JuNUMsRUFBRTRoQixXQUFXLE9BQU8xZ0IsS0FBS2dMLEtBQUssSUFBSWd3QixHQUFHaDdCLEtBQUs0ZSxJQUFJLE9BQU85ZixFQUFFVSxVQUFVa2UsU0FBUyxTQUFTNWUsRUFBRWMsRUFBRVAsR0FBRyxHQUFHVyxLQUFLNDRELFdBQVc1NEQsS0FBSzQ0RCxVQUFTLEVBQUdoN0QsRUFBRWEsSUFBSSxZQUFZd3ZCLEdBQUcsOGRBQThkanVCLEtBQUtnTCxLQUFLME4sSUFBSTVaLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSxxQ0FBcUN2QyxLQUFLZ0wsS0FBSy9JLElBQUluRCxFQUFFLENBQUNtTSxNQUFNNUwsS0FBS1AsRUFBRVUsVUFBVTZOLE1BQU0sU0FBU3ZPLEVBQUVjLEdBQUcsR0FBRyxNQUFNQSxFQUFFLE1BQU0sSUFBSTJDLE1BQU0sa0RBQWtEdkMsS0FBS2dMLEtBQUt2TSxJQUFJSyxHQUFHcU4sT0FBT3ZNLEdBQUdkLEVBQUVVLFVBQVVrZixXQUFXLFNBQVM1ZixFQUFFYyxHQUFHLEdBQUcsTUFBTWQsRUFBRSxNQUFNLElBQUl5RCxNQUFNLDREQUE0RCxJQUFJbEQsRUFBRVgsRUFBRUwsRUFBRVMsRUFBRWtNLGdCQUFnQnBGLFdBQVd6RixFQUFFLG9CQUFvQnkzQyxXQUFXOTRDLGFBQWE4NEMsVUFBVWo0QyxFQUFFLG9CQUFvQms0QyxrQkFBa0IvNEMsYUFBYSs0QyxpQkFBaUJ6M0MsRUFBRSxvQkFBb0IwM0Msa0JBQWtCaDVDLGFBQWFnNUMsaUJBQWlCajZDLEVBQUU4QixFQUFFLENBQUNiLEVBQUVpNUMsV0FBV2o1QyxFQUFFazVDLGFBQWEsQ0FBQ2w1QyxFQUFFeXNCLE1BQU16c0IsRUFBRTBzQixRQUFRdnRCLEVBQUVKLEVBQUUsR0FBR2dHLEVBQUVoRyxFQUFFLEdBQUcsR0FBR0QsRUFBRWEsSUFBSSxZQUFZLE1BQU1LLEVBQUU0aEIsV0FBVyxNQUFNLElBQUluZSxNQUFNLCtHQUErRyxHQUFHLE1BQU16RCxFQUFFNGhCLFdBQVdyaEIsRUFBRVAsRUFBRTRoQixXQUFXLE1BQU1tNEMsYUFBYSxFQUFFLEVBQUU1NkQsRUFBRTRGLEdBQUdtSCxVQUFVLEdBQUc3SyxHQUFHOUIsRUFBRWdCLEVBQUVQLEVBQUVrTSxTQUFTLENBQUMsSUFBSTVLLElBQUlULEVBQUUsTUFBTSxJQUFJNEMsTUFBTSw4TEFBOEx6RCxFQUFFbUIsWUFBWTlCLE1BQU0sR0FBRyxNQUFNNkIsS0FBS2k0QyxvQkFBb0IsTUFBTSxJQUFJMTFDLE1BQU0sZ0VBQWdFdkMsS0FBS2k0QyxvQkFBb0Izc0IsT0FBT0MsTUFBTXR0QixFQUFFK0IsS0FBS2k0QyxvQkFBb0Izc0IsT0FBT0UsT0FBTzNuQixFQUFFN0QsS0FBS2k0QyxvQkFBb0JDLFVBQVVwNUMsRUFBRSxFQUFFLEVBQUViLEVBQUU0RixHQUFHeEUsRUFBRVcsS0FBS2k0QyxvQkFBb0I0Z0IsYUFBYSxFQUFFLEVBQUU1NkQsRUFBRTRGLEdBQUdtSCxLQUFLLEdBQUcsSUFBSXBMLEVBQUVsQixFQUFFLElBQUlpSCxXQUFXdEcsT0FBTyxDQUFDLElBQUlLLEVBQUV6QixFQUFFNEYsRUFBRW5GLEVBQUUsSUFBSWlILFdBQVdqRyxFQUFFRSxHQUFHLElBQUksSUFBSWtFLEVBQUUsRUFBRUEsRUFBRXBFLEVBQUVvRSxJQUFJLElBQUksSUFBSTVGLEVBQUUsRUFBRUEsRUFBRTBCLElBQUkxQixFQUFFUSxFQUFFb0YsRUFBRWxFLEVBQUUxQixHQUFHbUIsRUFBRSxFQUFFeUUsRUFBRTVGLEdBQUcsT0FBT3F5QixHQUFHN3hCLEVBQUUsQ0FBQ21GLEVBQUU1RixFQUFFMkIsR0FBRyxVQUFVZCxFQUFFVSxVQUFVNk8sS0FBSyxTQUFTdlAsR0FBRyxPQUFPTyxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLE9BQU90QixFQUFFc0IsTUFBSyxTQUFTSixHQUFHLE1BQU0sQ0FBQyxFQUFFSSxLQUFLc08sU0FBU3hQLFdBQVNBLEVBQUVVLFVBQVU4TyxTQUFTLFNBQVN4UCxHQUFHLElBQUljLEVBQUVJLEtBQUtnTCxLQUFLdk0sSUFBSUssR0FBR08sRUFBRU8sRUFBRXFMLE1BQU12TSxFQUFFa0IsRUFBRTY0QyxlQUFlLE1BQU0sY0FBY3A1QyxFQUFFc2pDLEdBQUczaUMsS0FBS3NPLFNBQVM1UCxFQUFFbXhCLEtBQUs3aUIsUUFBUWhOLEtBQUtzTyxTQUFTNVAsRUFBRXV4QixLQUFLampCLFNBQVNoTixLQUFLZ0wsS0FBS3ZNLElBQUlLLEdBQUdxTixRQUFRck4sRUFBRVUsVUFBVXlPLFdBQVcsU0FBU25QLEdBQUcsSUFBSWMsRUFBRUksS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUTNOLEVBQUVPLEVBQUUsR0FBRyxXQUFXZCxFQUFFbU0sTUFBTSxJQUFJNUwsRUFBRU8sRUFBRXNGLEtBQUksU0FBU3BHLEdBQUcsT0FBTzRJLEdBQUU1SSxNQUFLLE1BQU1BLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSxvREFBb0QsT0FBTzZ5QixHQUFHdDJCLEVBQUV5TSxNQUFNek0sRUFBRW1NLE1BQU01TCxJQUFJUCxFQUFFVSxVQUFVb2UsWUFBWSxTQUFTOWUsR0FBRyxHQUFHa0IsS0FBS2dMLEtBQUswTixJQUFJNVosR0FBRyxDQUFDLElBQUljLEVBQUVJLEtBQUtnTCxLQUFLdk0sSUFBSUssR0FBRzI1QyxlQUFlLE1BQU03NEMsSUFBSUEsRUFBRWl3QixLQUFLcmhCLFVBQVU1TyxFQUFFcXdCLEtBQUt6aEIsV0FBV3hPLEtBQUtnTCxLQUFLNlMsT0FBTy9lLEtBQUtBLEVBQUVVLFVBQVV1TCxLQUFLLFNBQVNqTSxHQUFHLE9BQU9PLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSUosRUFBRSxPQUFPbEIsRUFBRXNCLE1BQUssU0FBU1gsR0FBRyxPQUFPTyxFQUFFdUgsSUFBSXJJLElBQUksQ0FBQyxFQUFFLENBQUNzTSxTQUFTakUsSUFBSXZILFdBQVNkLEVBQUVVLFVBQVV1ZSxPQUFPLFdBQVcsTUFBTSxDQUFDQyxZQUFXLEVBQUdDLFFBQVEsQ0FBQyx3SEFBd0huZixFQUFFVSxVQUFVZ3dCLFFBQVEsU0FBUzF3QixFQUFFYyxHQUFHLElBQUlQLEVBQUVvTixHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sR0FBRyxhQUFhLE9BQU92TCxLQUFLZ0wsS0FBS3ZNLElBQUlZLEVBQUUyTixRQUFReXJDLGVBQWUsQ0FBQzVvQixLQUFLalIsR0FBR2hDLEtBQUs5ZCxFQUFFcVEsU0FBUzhnQixLQUFLclIsR0FBR2hDLEtBQUtoZCxFQUFFdVAsVUFBVTlQLEdBQUdQLEVBQUVVLFVBQVVxd0IsS0FBSyxTQUFTL3dCLEdBQUcsT0FBT2tCLEtBQUtnTCxLQUFLdk0sSUFBSUssRUFBRWtPLFFBQVF5ckMsZUFBZTVvQixLQUFLMWdCLFNBQVNyUSxFQUFFVSxVQUFVeXdCLEtBQUssU0FBU254QixHQUFHLE9BQU9rQixLQUFLZ0wsS0FBS3ZNLElBQUlLLEVBQUVrTyxRQUFReXJDLGVBQWV4b0IsS0FBSzlnQixTQUFTclEsRUFBRVUsVUFBVXM1RCxpQkFBaUIsU0FBU2g2RCxFQUFFYyxHQUFHRyxNQUFNa0UsUUFBUW5GLEtBQUtBLEVBQUUsQ0FBQ0EsSUFBSUEsRUFBRWlFLFNBQVEsU0FBU2pFLEdBQUcsTUFBTUEsR0FBR2dGLEVBQUUsY0FBY2hGLEVBQUVtTSxPQUFNLFdBQVcsT0FBT3JMLEVBQUUsOENBQTRDZCxFQUFFVSxVQUFVd0YsTUFBTSxTQUFTbEcsRUFBRWMsRUFBRVAsR0FBRyxHQUFHVyxLQUFLODRELGlCQUFpQmg2RCxFQUFFLFNBQVNtN0IsR0FBR243QixFQUFFeU0sTUFBTTNMLEVBQUVQLEdBQUcsQ0FBQyxJQUFJWCxFQUFFdzdCLEdBQUd0NkIsRUFBRWQsRUFBRXNOLFNBQVMvTixFQUFFOEYsRUFBRTlFLEdBQUcsT0FBTzZ3QixHQUFHbHdCLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVFvMkIsU0FBUzFrQyxFQUFFQSxFQUFFTCxHQUFHZ0IsRUFBRVAsRUFBRW1NLE9BQU8sSUFBSSxJQUFJOUssRUFBRWkxQixHQUFHLzFCLEVBQUVQLEVBQUVtTSxPQUFPck4sRUFBRW9DLEtBQUtpTyxXQUFXblAsR0FBR2EsRUFBRSxFQUFFQSxFQUFFUSxFQUFFbUwsT0FBTzNMLEVBQUUsQ0FBQyxJQUFJUyxFQUFFRCxFQUFFbU0sV0FBVzNNLEdBQUd1RixLQUFJLFNBQVNwRyxFQUFFTyxHQUFHLE9BQU9QLEVBQUVjLEVBQUVQLE1BQUtjLEVBQUVnTSxPQUFPeE0sR0FBRy9CLEVBQUVhLElBQUlnQyxNQUFNN0MsRUFBRXdDLEdBQUcsT0FBT0QsRUFBRXFNLFlBQVkxTixFQUFFVSxVQUFVOFcsYUFBYSxTQUFTeFgsRUFBRWMsRUFBRVAsRUFBRVgsR0FBR3NCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsZ0JBQWdCLElBQUlULEVBQUV1N0IsR0FBR2g2QixFQUFFUCxFQUFFWCxHQUFHLEdBQUdMLEVBQUVxOEIsTUFBSyxTQUFTNTdCLEdBQUcsT0FBTyxJQUFJQSxLQUFJLE9BQU9veEIsR0FBRyxHQUFHN3hCLEdBQUcsSUFBSSxJQUFJOEIsRUFBRWkxQixHQUFHLzJCLEVBQUVTLEVBQUVtTSxPQUFPck4sRUFBRW9DLEtBQUtpTyxXQUFXblAsR0FBR2EsRUFBRSxFQUFFQSxFQUFFUSxFQUFFbUwsS0FBSzNMLElBQUksQ0FBQyxJQUFJLElBQUlTLEVBQUVELEVBQUVtTSxXQUFXM00sR0FBRzlCLEVBQUUsSUFBSWtDLE1BQU1LLEVBQUVjLFFBQVFqRCxFQUFFLEVBQUVBLEVBQUVKLEVBQUVxRCxPQUFPakQsSUFBSUosRUFBRUksR0FBR21DLEVBQUVuQyxHQUFHUyxFQUFFVCxHQUFHMkIsRUFBRTNCLEdBQUdrQyxFQUFFOEIsSUFBSXhCLE1BQU1OLEVBQUUsQ0FBQ3ZDLEVBQUVhLElBQUlnQyxNQUFNN0MsRUFBRUMsSUFBSXNILE9BQU8vRSxJQUFJLE9BQU9ELEVBQUVxTSxZQUFZMU4sRUFBRVUsVUFBVW8rQixLQUFLLFNBQVM5K0IsR0FBRyxJQUFJLElBQUljLEVBQUVJLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVEzTixFQUFFKzFCLEdBQUcsQ0FBQ3QyQixFQUFFd00sS0FBS3hNLEVBQUV3TSxNQUFNeE0sRUFBRW1NLE9BQU92TSxFQUFFVyxFQUFFOE0sT0FBTzlOLEVBQUUsRUFBRUEsRUFBRXVCLEVBQUVzQixPQUFPN0MsSUFBSUssRUFBRUwsRUFBRVMsRUFBRXdNLEtBQUtqTixHQUFHdUIsRUFBRXZCLEdBQUcsT0FBT2dCLEVBQUVtTixZQUFZMU4sRUFBRVUsVUFBVXVRLFFBQVEsU0FBU2pSLEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxFQUFFUCxFQUFFeU0sTUFBTTNMLEdBQUdsQixFQUFFLElBQUlxQixNQUFNakIsRUFBRXVNLEtBQUssR0FBR2hOLEVBQUUsRUFBRThCLEVBQUUsRUFBRUEsRUFBRXJCLEVBQUV1TSxLQUFLbEwsSUFBSUEsSUFBSVAsSUFBSWxCLEVBQUVMLEtBQUtTLEVBQUV5TSxNQUFNcEwsSUFBSSxJQUFJdkMsRUFBRSxJQUFJbUMsTUFBTWpCLEVBQUV1TSxNQUFNZ0UsS0FBSyxHQUFHMVAsRUFBRWIsRUFBRXlNLE1BQU12RyxRQUFRckYsRUFBRUMsR0FBRyxFQUFFLElBQUlRLEVBQUUsSUFBSUwsTUFBTVYsR0FBRyxJQUFJYyxFQUFFLEVBQUVBLEVBQUVDLEVBQUVjLE9BQU9mLElBQUl2QyxFQUFFZ0MsR0FBR08sRUFBRUMsRUFBRUQsR0FBR0gsS0FBS2dGLE1BQU1sRyxFQUFFbEIsRUFBRStCLEdBQUc4TixRQUFRL08sR0FBRyxPQUFPMEIsR0FBR3RCLEVBQUVVLFVBQVVxUSxRQUFRLFNBQVMvUSxFQUFFYyxHQUFHSSxLQUFLODRELGlCQUFpQmg2RCxFQUFFLFdBQVcsSUFBSSxJQUFJTyxFQUFFKzFCLEdBQUd0MkIsRUFBRXlNLE1BQU16TSxFQUFFbU0sT0FBT3ZNLEVBQUVzQixLQUFLaU8sV0FBV25QLEdBQUdULEVBQUUsU0FBU0EsR0FBRyxJQUFJOEIsRUFBRWQsRUFBRWlOLFdBQVdqTyxHQUFHVCxFQUFFdUMsRUFBRTZFLFFBQVFwRixFQUFFbUQsU0FBUSxTQUFTbkQsR0FBRyxPQUFPaEMsRUFBRWdDLEdBQUdkLEVBQUV5TSxNQUFNM0wsR0FBRyxFQUFFaEMsRUFBRWdDLE1BQUtQLEVBQUU0QyxJQUFJeEIsTUFBTXBCLEVBQUUsQ0FBQ1gsRUFBRUQsSUFBSWdDLE1BQU0vQixFQUFFZCxJQUFJdUgsT0FBT2hGLEtBQUtBLEVBQUUsRUFBRUEsRUFBRWQsRUFBRWlNLEtBQUtuTCxJQUFJOUIsRUFBRThCLEdBQUcsT0FBT2QsRUFBRW1OLFlBQVkxTixFQUFFVSxVQUFVMkYsT0FBTyxTQUFTckcsRUFBRWMsR0FBRyxJQUFJUCxFQUFFVyxLQUFLLEdBQUcsY0FBY2xCLEVBQUUsR0FBR21NLE1BQU0sQ0FBQyxJQUFJdk0sRUFBRUksRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsT0FBTzZ3QixHQUFHN3dCLE1BQUtULEVBQUVTLEVBQUVvRyxLQUFJLFNBQVNwRyxHQUFHLE9BQU9peEIsR0FBR2p4QixNQUFLLE9BQU93d0IsR0FBR3R2QixLQUFLbUYsT0FBT3pHLEVBQUVrQixHQUFHSSxLQUFLbUYsT0FBTzlHLEVBQUV1QixJQUFJLElBQUlPLEVBQUVyQixFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxJQUFJTyxFQUFFOEUsRUFBRXJGLEVBQUV5TSxNQUFNdkcsTUFBTXBGLElBQUksT0FBT2QsRUFBRTRPLE1BQU0sRUFBRXJPLE1BQUt6QixFQUFFb3hCLEdBQUc3dUIsRUFBRStFLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRXlNLFNBQVEsR0FBRzVMLEVBQUV5MUIsR0FBR3gzQixFQUFFa0IsRUFBRSxHQUFHbU0sT0FBT2tCLE9BQU8sR0FBRyxJQUFJaE0sRUFBRSxHQUFHb0wsTUFBTSxHQUFHLENBQUMsSUFBSW5MLEVBQUUsRUFBRUQsRUFBRTRDLFNBQVEsU0FBU2pFLEdBQUdhLEVBQUVzQyxJQUFJNUMsRUFBRWlQLFNBQVN4UCxFQUFFa08sUUFBUTVNLEdBQUdBLEdBQUd0QixFQUFFd00sWUFBVyxDQUFDLElBQUl6TixFQUFFLEVBQUVzQyxFQUFFNEMsU0FBUSxTQUFTakUsR0FBRyxJQUFJLElBQUljLEVBQUVQLEVBQUVpUCxTQUFTeFAsRUFBRWtPLFFBQVF0TyxFQUFFLEVBQUVMLEVBQUUsRUFBRUEsRUFBRVMsRUFBRXlNLE1BQU0sS0FBS2xOLEVBQUUsSUFBSSxJQUFJOEIsRUFBRTlCLEVBQUVULEVBQUUsR0FBR0MsRUFBRXVDLEVBQUUsRUFBRUEsRUFBRXRCLEVBQUV5TSxNQUFNLEtBQUtuTCxFQUFFVCxFQUFFUSxFQUFFQyxHQUFHUixFQUFFbEIsS0FBS2IsR0FBR2lCLEVBQUV5TSxNQUFNLE1BQUssSUFBSXROLEVBQUUrd0IsR0FBR2x3QixFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFeU0sU0FBUTNMLEdBQUcsT0FBT3N3QixHQUFHdndCLEVBQUUxQixFQUFFYSxFQUFFLEdBQUdtTSxRQUFRbk0sRUFBRVUsVUFBVXdULElBQUksU0FBU2xVLEdBQUcsT0FBT2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsT0FBT2tCLEtBQUs4N0IsU0FBUzFMLElBQUksR0FBR3R4QixJQUFJQSxFQUFFVSxVQUFVa1IsSUFBSSxTQUFTNVIsRUFBRWMsR0FBRyxNQUFNLGNBQWNkLEVBQUVtTSxPQUFPLGNBQWNyTCxFQUFFcUwsTUFBTWpMLEtBQUsrNEQsMkJBQTJCajZELEVBQUVpUCxLQUFLLGFBQWFuTyxFQUFFbU8sS0FBSyxjQUFhLFNBQVNqUCxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLE1BQU0sQ0FBQ214QixLQUFLL3dCLEVBQUVPLEVBQUU0d0IsS0FBS3J3QixFQUFFbEIsTUFBS3NCLEtBQUtnNUQsb0JBQW9CbDZELEVBQUVjLEVBQUV5WSxHQUFHdlosRUFBRW1NLE1BQU1yTCxFQUFFcUwsUUFBTyxTQUFTbk0sRUFBRWMsR0FBRyxPQUFPZCxFQUFFYyxNQUFLZCxFQUFFVSxVQUFVbzhCLEtBQUssU0FBUzk4QixHQUFHLElBQUljLEVBQUVJLEtBQUtBLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsUUFBUSxJQUFJLElBQUlPLEVBQUVQLEVBQUVvRyxLQUFJLFNBQVNwRyxHQUFHLE9BQU9jLEVBQUUwTyxTQUFTeFAsRUFBRWtPLFdBQVV0TyxFQUFFMDJCLEdBQUd0MkIsRUFBRSxHQUFHeU0sTUFBTXpNLEVBQUUsR0FBR21NLE9BQU81TSxFQUFFSyxFQUFFeU4sT0FBT2hNLEVBQUUsRUFBRUEsRUFBRXJCLEVBQUVvQyxPQUFPZixJQUFJLElBQUksSUFBSXZDLEVBQUV5QixFQUFFYyxHQUFHUixFQUFFLEVBQUVBLEVBQUV0QixFQUFFNkMsT0FBT3ZCLElBQUl0QixFQUFFc0IsSUFBSS9CLEVBQUUrQixHQUFHLE9BQU9qQixFQUFFOE4sWUFBWTFOLEVBQUVVLFVBQVVxOEIsU0FBUyxTQUFTLzhCLEVBQUVjLEdBQUcsTUFBTSxjQUFjZCxFQUFFbU0sT0FBTyxjQUFjckwsRUFBRXFMLE1BQU1qTCxLQUFLKzRELDJCQUEyQmo2RCxFQUFFaVAsS0FBSyxhQUFhbk8sRUFBRW1PLEtBQUssY0FBYSxTQUFTalAsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxNQUFNLENBQUNteEIsS0FBSy93QixFQUFFTyxFQUFFNHdCLEtBQUtyd0IsRUFBRWxCLE1BQUtzQixLQUFLZzVELG9CQUFvQmw2RCxFQUFFYyxFQUFFeVksR0FBR3ZaLEVBQUVtTSxNQUFNckwsRUFBRXFMLFFBQU8sU0FBU25NLEVBQUVjLEdBQUcsT0FBT2QsRUFBRWMsTUFBS2QsRUFBRVUsVUFBVXVSLElBQUksU0FBU2pTLEVBQUVjLEdBQUcsT0FBT0ksS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLE9BQU9JLEtBQUtnNUQsb0JBQW9CbDZELEVBQUVjLEVBQUVkLEVBQUVtTSxPQUFNLFNBQVNuTSxFQUFFYyxHQUFHLE9BQU82RCxLQUFLc04sSUFBSWpTLEVBQUVjLE9BQU1kLEVBQUVVLFVBQVU2N0IsWUFBWSxTQUFTdjhCLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUdzQixLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsVUFBVSxJQUFJLElBQUl2QixFQUFFZ0IsRUFBRVAsRUFBRXlNLE1BQU0sR0FBR3pNLEVBQUV5TSxNQUFNLEdBQUdwTCxFQUFFZCxFQUFFUCxFQUFFeU0sTUFBTSxHQUFHek0sRUFBRXlNLE1BQU0sR0FBRzNOLEVBQUVjLEVBQUVrQixFQUFFMkwsTUFBTSxHQUFHM0wsRUFBRTJMLE1BQU0sR0FBRzVMLEVBQUViLEVBQUV5TSxNQUFNLEdBQUduTCxFQUFFSixLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRblAsRUFBRW1DLEtBQUtzTyxTQUFTMU8sRUFBRW9OLFFBQVEvTyxFQUFFb0IsRUFBRSxDQUFDUCxFQUFFc04sUUFBUSxHQUFHLEVBQUV0TixFQUFFc04sUUFBUSxJQUFJLENBQUN0TixFQUFFc04sUUFBUSxHQUFHdE4sRUFBRXNOLFFBQVEsR0FBRyxHQUFHdkksRUFBRTVGLEVBQUUsR0FBR3lCLEVBQUV6QixFQUFFLEdBQUc2RixFQUFFN0YsRUFBRSxHQUFHQyxFQUFFUSxFQUFFLENBQUMsRUFBRWtCLEVBQUV3TSxRQUFRLEdBQUd4TSxFQUFFd00sUUFBUSxJQUFJLENBQUN4TSxFQUFFd00sUUFBUSxHQUFHLEVBQUV4TSxFQUFFd00sUUFBUSxJQUFJcEksRUFBRTlGLEVBQUUsR0FBR0YsRUFBRUUsRUFBRSxHQUFHaUcsRUFBRWpHLEVBQUUsR0FBRzZGLEVBQUU1RCxFQUFFdkMsRUFBRXdHLEVBQUVneEIsR0FBRyxDQUFDejFCLEVBQUVRLEVBQUV2QyxHQUFHa0IsRUFBRW1NLE9BQU81RyxFQUFFRCxFQUFFK0gsT0FBTzNILEVBQUV4RSxLQUFLa3BDLFVBQVV2a0MsRUFBRSxFQUFFQSxFQUFFaEYsRUFBRWdGLElBQUksSUFBSSxJQUFJRSxFQUFFLEVBQUVBLEVBQUUxRSxFQUFFMEUsR0FBR0wsRUFBRSxJQUFJLElBQUlPLEVBQUUsRUFBRUEsRUFBRW5ILEVBQUVtSCxHQUFHUCxFQUFFLElBQUksSUFBSVMsRUFBRSxFQUFFQSxFQUFFNUcsRUFBRTRHLEdBQUdULEVBQUUsSUFBSSxJQUFJYSxFQUFFNUIsS0FBS0csSUFBSWlCLEVBQUVMLEVBQUVyRSxHQUFHc0YsRUFBRWhDLEtBQUtHLElBQUltQixFQUFFUCxFQUFFNUcsR0FBR2lJLEVBQUVwQyxLQUFLRyxJQUFJcUIsRUFBRVQsRUFBRW5HLEdBQUd5SCxFQUFFakIsRUFBRWlCLEVBQUVULEVBQUVTLElBQUksSUFBSSxJQUFJRyxFQUFFbEIsRUFBRWtCLEVBQUVSLEVBQUVRLElBQUksQ0FBQyxJQUFJLElBQUlDLEVBQUUsRUFBRWhDLEVBQUVlLEVBQUVmLEVBQUUyQixFQUFFM0IsSUFBSWdDLEdBQUc5RixFQUFFdUUsRUFBRWQsRUFBRWlDLEVBQUVwRyxFQUFFd0UsRUFBRUosR0FBR2pHLEVBQUVxRyxFQUFFRixFQUFFaUMsRUFBRWpJLEVBQUUyRyxFQUFFUixHQUFHRSxFQUFFTSxFQUFFWixHQUFHK0IsRUFBRWxJLEVBQUVxSSxLQUFLQyxFQUFFLE9BQU85QixFQUFFb0ksWUFBWTFOLEVBQUVVLFVBQVU4N0IsaUJBQWlCLFNBQVN4OEIsR0FBRyxJQUFJYyxFQUFFZCxFQUFFcUIsRUFBRWQsRUFBRVAsRUFBRXVGLEVBQUUzRixFQUFFSSxFQUFFeThCLFdBQVdsOUIsRUFBRVMsRUFBRTA4QixXQUFXcjdCLEVBQUVyQixFQUFFMjhCLEtBQUs3OUIsRUFBRWtCLEVBQUU0OEIsV0FBVy83QixFQUFFYixFQUFFNjhCLHVCQUF1QnY3QixFQUFFSixLQUFLcTdCLFlBQVl6N0IsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxPQUFPOEIsSUFBSUMsRUFBRUosS0FBSzBRLElBQUl0USxFQUFFRCxJQUFJdkMsSUFBSXdDLEVBQUVxNEQsR0FBR3o0RCxLQUFLSSxFQUFFeEMsRUFBRStCLElBQUlTLEdBQUd0QixFQUFFVSxVQUFVczhCLFNBQVMsU0FBU2g5QixFQUFFYyxHQUFHLE1BQU0sY0FBY2QsRUFBRW1NLE9BQU8sY0FBY3JMLEVBQUVxTCxNQUFNakwsS0FBSys0RCwyQkFBMkJqNkQsRUFBRWlQLEtBQUssYUFBYW5PLEVBQUVtTyxLQUFLLGNBQWEsU0FBU2pQLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUcsTUFBTSxDQUFDbXhCLEtBQUsvd0IsRUFBRU8sRUFBRU8sRUFBRWxCLEVBQUV1eEIsS0FBS254QixFQUFFSixFQUFFa0IsRUFBRVAsTUFBS1csS0FBS2c1RCxvQkFBb0JsNkQsRUFBRWMsRUFBRXlZLEdBQUd2WixFQUFFbU0sTUFBTXJMLEVBQUVxTCxRQUFPLFNBQVNuTSxFQUFFYyxHQUFHLE9BQU9kLEVBQUVjLE1BQUtkLEVBQUVVLFVBQVV1OEIsV0FBVyxTQUFTajlCLEVBQUVjLEdBQTZDLE9BQTFDSSxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsY0FBcUJJLEtBQUtnNUQsb0JBQW9CbDZELEVBQUVjLEVBQUUsV0FBVSxTQUFTZCxFQUFFYyxHQUFHLE9BQU9kLEVBQUVjLE1BQUtkLEVBQUVVLFVBQVU0UixTQUFTLFNBQVN0UyxFQUFFYyxHQUEyQyxPQUF4Q0ksS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLFlBQW1CSSxLQUFLZzVELG9CQUFvQmw2RCxFQUFFYyxFQUFFLFNBQVEsU0FBU2QsRUFBRWMsR0FBRyxPQUFPNkQsS0FBSzhJLE1BQU16TixFQUFFYyxPQUFNZCxFQUFFVSxVQUFVd0ksSUFBSSxTQUFTbEosRUFBRWMsR0FBR0ksS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxPQUFPNnZCLEdBQUcsTUFBTS91QixFQUFFZCxFQUFFdU0sTUFBTSxJQUFJLElBQUloTSxFQUFFb3ZCLEdBQUczdkIsRUFBRXlNLE1BQU0zTCxHQUFHbEIsRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBR2MsRUFBRXl3QixHQUFHbHlCLEVBQUUyWixHQUFHdlosRUFBRW1NLE1BQU0sVUFBVXJOLEVBQUV1RyxFQUFFOUYsR0FBR3NCLEVBQUVLLEtBQUtzTyxTQUFTbk8sRUFBRTZNLFFBQVE1TSxFQUFFSixLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRblAsRUFBRSxFQUFFQSxFQUFFOEIsRUFBRXVCLFNBQVNyRCxFQUFFLENBQUMsSUFBSSxJQUFJSSxFQUFFSixFQUFFRCxFQUFFaUcsRUFBRSxFQUFFbkUsRUFBRSxFQUFFQSxFQUFFOUIsSUFBSThCLEVBQUVtRSxHQUFHekQsRUFBRW5DLEVBQUV5QixHQUFHQyxFQUFFOUIsR0FBR2dHLEVBQUUsT0FBTzFELEdBQUdyQixFQUFFVSxVQUFVOFEsS0FBSyxTQUFTeFIsRUFBRWMsR0FBR0ksS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxPQUFPLElBQUksSUFBSU8sRUFBRW92QixHQUFHM3ZCLEVBQUV5TSxNQUFNM0wsR0FBR2xCLEVBQUVXLEVBQUUsR0FBR2hCLEVBQUVnQixFQUFFLEdBQUdjLEVBQUV5d0IsR0FBR2x5QixFQUFFMlosR0FBR3ZaLEVBQUVtTSxNQUFNLFVBQVVyTixFQUFFdUcsRUFBRTlGLEdBQUdzQixFQUFFSyxLQUFLc08sU0FBU25PLEVBQUU2TSxRQUFRNU0sRUFBRUosS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUW5QLEVBQUUsRUFBRUEsRUFBRThCLEVBQUV1QixTQUFTckQsRUFBRSxDQUFDLElBQUksSUFBSUksRUFBRUosRUFBRUQsRUFBRWlHLEVBQUUsRUFBRW5FLEVBQUUsRUFBRUEsRUFBRTlCLElBQUk4QixFQUFFbUUsR0FBR3pELEVBQUVuQyxFQUFFeUIsR0FBR0MsRUFBRTlCLEdBQUdnRyxFQUFFLE9BQU8xRCxHQUFHckIsRUFBRVUsVUFBVTBXLG1CQUFtQixTQUFTcFgsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxzQkFBc0IsSUFBSSxJQUFJSixFQUFFLEdBQUdMLEVBQUVTLEVBQUV1TSxLQUFLekwsRUFBRXlMLEtBQUtsTCxFQUFFLEVBQUVBLEVBQUU5QixJQUFJOEIsRUFBRVAsRUFBRUEsRUFBRW9QLFdBQVc3TyxFQUFFLEdBQUcsSUFBSUEsRUFBRSxFQUFFQSxFQUFFZCxJQUFJYyxFQUFFLENBQUMsSUFBSXZDLEVBQUV3eUIsR0FBR2p3QixFQUFFLFNBQVNSLEVBQUVzbEQsR0FBR3JuRCxFQUFFZ0MsR0FBR2tPLE9BQU8sV0FBV21ELElBQUluUyxHQUFHa0osSUFBSSxHQUFHdEosRUFBRXlDLEtBQUt4QixHQUFHLE9BQU8yNEIsR0FBRzU1QixJQUFJSSxFQUFFVSxVQUFVZ1IsT0FBTyxTQUFTMVIsRUFBRWMsR0FBR0ksS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxVQUFVLElBQUlPLEVBQUUsQ0FBQ08sR0FBRyt1QixHQUFHLFNBQVN0dkIsRUFBRVAsRUFBRXVNLE1BQU0sSUFBSSxJQUFJM00sRUFBRSt2QixHQUFHM3ZCLEVBQUV5TSxNQUFNbE0sR0FBR2hCLEVBQUVLLEVBQUUsR0FBR3lCLEVBQUV6QixFQUFFLEdBQUdkLEVBQUVnekIsR0FBR3Z5QixFQUFFLFNBQVNzQixFQUFFd0UsRUFBRWhFLEdBQUdDLEVBQUVKLEtBQUtzTyxTQUFTMVEsRUFBRW9QLFFBQVFuUCxFQUFFbUMsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUS9PLEVBQUUsRUFBRUEsRUFBRW1DLEVBQUVjLFNBQVNqRCxFQUFFLENBQUMsSUFBSSxJQUFJNEYsRUFBRTVGLEVBQUUwQixFQUFFRCxFQUFFN0IsRUFBRWdHLEdBQUdDLEVBQUUsRUFBRTVGLEVBQUUsRUFBRUEsRUFBRXlCLElBQUl6QixFQUFFLENBQUMsSUFBSThGLEVBQUVuRyxFQUFFZ0csRUFBRTNGLEdBQUc4RixFQUFFdEUsSUFBSUEsRUFBRXNFLEVBQUVGLEVBQUU1RixHQUFHa0MsRUFBRW5DLEdBQUc2RixFQUFFLE9BQU9sRyxHQUFHa0IsRUFBRVUsVUFBVWlSLE9BQU8sU0FBUzNSLEVBQUVjLEdBQUdJLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsVUFBVSxJQUFJTyxFQUFFLENBQUNPLEdBQUcrdUIsR0FBRyxTQUFTdHZCLEVBQUVQLEVBQUV1TSxNQUFNLElBQUksSUFBSTNNLEVBQUUrdkIsR0FBRzN2QixFQUFFeU0sTUFBTWxNLEdBQUdoQixFQUFFSyxFQUFFLEdBQUd5QixFQUFFekIsRUFBRSxHQUFHZCxFQUFFZ3pCLEdBQUd2eUIsRUFBRSxTQUFTc0IsRUFBRXdFLEVBQUVoRSxHQUFHQyxFQUFFSixLQUFLc08sU0FBUzFRLEVBQUVvUCxRQUFRblAsRUFBRW1DLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVEvTyxFQUFFLEVBQUVBLEVBQUVtQyxFQUFFYyxTQUFTakQsRUFBRSxDQUFDLElBQUksSUFBSTRGLEVBQUU1RixFQUFFMEIsRUFBRUQsRUFBRTdCLEVBQUVnRyxHQUFHQyxFQUFFLEVBQUU1RixFQUFFLEVBQUVBLEVBQUV5QixJQUFJekIsRUFBRSxDQUFDLElBQUk4RixFQUFFbkcsRUFBRWdHLEVBQUUzRixHQUFHOEYsRUFBRXRFLElBQUlBLEVBQUVzRSxFQUFFRixFQUFFNUYsR0FBR2tDLEVBQUVuQyxHQUFHNkYsRUFBRSxPQUFPbEcsR0FBR2tCLEVBQUVVLFVBQVV5UCxPQUFPLFNBQVNuUSxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLEdBQUdzQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLFVBQVVjLElBQUlkLEVBQUV1TSxLQUFLLEVBQUUsTUFBTSxJQUFJOUksTUFBTSxxREFBcUR6RCxFQUFFdU0sS0FBSyxHQUFHLGlCQUFpQnpMLEdBQUcsSUFBSSxJQUFJdkIsRUFBRWdhLEdBQUd2WixFQUFFbU0sTUFBTSxTQUFTOUssRUFBRXl3QixHQUFHOXhCLEVBQUV5TSxNQUFNbE4sR0FBR1QsRUFBRW9DLEtBQUtzTyxTQUFTbk8sRUFBRTZNLFFBQVFyTixFQUFFSyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRNU0sRUFBRXRCLEVBQUV5TSxNQUFNek0sRUFBRXVNLEtBQUssR0FBR3hOLEVBQUVhLEVBQUUsU0FBU0ksRUFBRWMsR0FBRyxPQUFPZCxFQUFFc0IsRUFBRVIsRUFBRSxHQUFHLFNBQVNkLEVBQUVjLEdBQUcsT0FBT2QsRUFBRWMsR0FBRzNCLEVBQUUsRUFBRUEsRUFBRTBCLEVBQUV1QixPQUFPakQsR0FBR21DLEVBQUUsSUFBSSxJQUFJeUQsRUFBRSxFQUFFQSxFQUFFekQsRUFBRXlELElBQUksQ0FBQyxJQUFJbkUsRUFBRTdCLEVBQUVJLEVBQUU0RixHQUFHLEdBQUcsSUFBSUEsRUFBRWpHLEVBQUU4QixHQUFHTCxFQUFFLEVBQUVNLEVBQUVELE9BQU8sQ0FBQyxJQUFJb0UsRUFBRWpHLEVBQUVJLEVBQUU0RixFQUFFLEdBQUdqRyxFQUFFOEIsR0FBR0wsRUFBRU0sRUFBRW1FLEdBQUdsRyxFQUFFa0csR0FBR25FLEVBQUVELEdBQUc5QixFQUFFa0csSUFBSSxPQUFPM0QsR0FBR3JCLEVBQUVVLFVBQVUyUyxNQUFNLFNBQVNyVCxFQUFFYyxHQUFHLE9BQU9JLEtBQUs4NEQsaUJBQWlCLENBQUNoNkQsRUFBRWMsR0FBRyxTQUFTSSxLQUFLZzVELG9CQUFvQmw2RCxFQUFFYyxFQUFFLFFBQU8sU0FBU2QsRUFBRWMsR0FBRyxPQUFPZCxJQUFJYyxFQUFFLEVBQUUsTUFBS2QsRUFBRVUsVUFBVXVTLFNBQVMsU0FBU2pULEVBQUVjLEdBQUcsT0FBT0ksS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLFlBQVlJLEtBQUtnNUQsb0JBQW9CbDZELEVBQUVjLEVBQUUsUUFBTyxTQUFTZCxFQUFFYyxHQUFHLE9BQU9kLElBQUljLEVBQUUsRUFBRSxNQUFLZCxFQUFFVSxVQUFVeVMsS0FBSyxTQUFTblQsRUFBRWMsR0FBRyxPQUFPSSxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsUUFBUUksS0FBS2c1RCxvQkFBb0JsNkQsRUFBRWMsRUFBRSxRQUFPLFNBQVNkLEVBQUVjLEdBQUcsT0FBT2QsRUFBRWMsRUFBRSxFQUFFLE1BQUtkLEVBQUVVLFVBQVU2UyxVQUFVLFNBQVN2VCxFQUFFYyxHQUFHLE9BQU9JLEtBQUs4NEQsaUJBQWlCLENBQUNoNkQsRUFBRWMsR0FBRyxhQUFhSSxLQUFLZzVELG9CQUFvQmw2RCxFQUFFYyxFQUFFLFFBQU8sU0FBU2QsRUFBRWMsR0FBRyxPQUFPZCxHQUFHYyxFQUFFLEVBQUUsTUFBS2QsRUFBRVUsVUFBVStTLFFBQVEsU0FBU3pULEVBQUVjLEdBQUcsT0FBT0ksS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLFdBQVdJLEtBQUtnNUQsb0JBQW9CbDZELEVBQUVjLEVBQUUsUUFBTyxTQUFTZCxFQUFFYyxHQUFHLE9BQU9kLEVBQUVjLEVBQUUsRUFBRSxNQUFLZCxFQUFFVSxVQUFVaVQsYUFBYSxTQUFTM1QsRUFBRWMsR0FBRyxPQUFPSSxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsZ0JBQWdCSSxLQUFLZzVELG9CQUFvQmw2RCxFQUFFYyxFQUFFLFFBQU8sU0FBU2QsRUFBRWMsR0FBRyxPQUFPZCxHQUFHYyxFQUFFLEVBQUUsTUFBS2QsRUFBRVUsVUFBVXFULFdBQVcsU0FBUy9ULEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLGNBQWMsSUFBSSxJQUFJYyxFQUFFSSxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRM04sRUFBRSxJQUFJdUcsV0FBV2hHLEVBQUVzQixRQUFReEMsRUFBRSxFQUFFQSxFQUFFa0IsRUFBRXNCLFNBQVN4QyxFQUFFVyxFQUFFWCxHQUFHa0IsRUFBRWxCLEdBQUcsRUFBRSxFQUFFLE9BQU8rTixHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sQ0FBQ1ksT0FBTzlNLEdBQUcsU0FBU1AsRUFBRVUsVUFBVW1ULFdBQVcsU0FBUzdULEVBQUVjLEdBQUcsT0FBT0ksS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLGNBQWNJLEtBQUtnNUQsb0JBQW9CbDZELEVBQUVjLEVBQUUsUUFBTyxTQUFTZCxFQUFFYyxHQUFHLE9BQU9kLEdBQUdjLE1BQUtkLEVBQUVVLFVBQVVvVCxVQUFVLFNBQVM5VCxFQUFFYyxHQUFHLE9BQU9JLEtBQUs4NEQsaUJBQWlCLENBQUNoNkQsRUFBRWMsR0FBRyxhQUFhSSxLQUFLZzVELG9CQUFvQmw2RCxFQUFFYyxFQUFFLFFBQU8sU0FBU2QsRUFBRWMsR0FBRyxPQUFPZCxHQUFHYyxNQUFLZCxFQUFFVSxVQUFVdzhCLE9BQU8sU0FBU2w5QixFQUFFYyxFQUFFUCxHQUFHVyxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEVBQUVQLEdBQUcsVUFBVSxJQUFJLElBQUlYLEVBQUVzQixLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRM08sRUFBRTJCLEtBQUtzTyxTQUFTMU8sRUFBRW9OLFFBQVE3TSxFQUFFSCxLQUFLc08sU0FBU2pQLEVBQUUyTixRQUFRcFAsRUFBRWd6QixHQUFHaHhCLEVBQUUyTCxNQUFNOE0sR0FBR3pZLEVBQUVxTCxNQUFNNUwsRUFBRTRMLFFBQVF0TCxFQUFFSyxLQUFLc08sU0FBUzFRLEVBQUVvUCxRQUFRNU0sRUFBRSxFQUFFdkMsRUFBRSxJQUFJaUIsRUFBRXVNLE1BQU12TSxFQUFFdU0sS0FBSyxHQUFHLElBQUl6TCxFQUFFeUwsS0FBSyxFQUFFekwsRUFBRTJMLE1BQU0sR0FBR3ROLEVBQUUsRUFBRUEsRUFBRVMsRUFBRXdDLE9BQU9qRCxJQUFJLElBQUksSUFBSTRGLEVBQUUsRUFBRUEsRUFBRWhHLEVBQUVnRyxJQUFJLElBQUluRixFQUFFVCxHQUFHMEIsRUFBRVMsS0FBSy9CLEVBQUVKLEdBQUcwQixFQUFFUyxLQUFLRCxFQUFFbEMsR0FBRyxPQUFPTCxHQUFHa0IsRUFBRVUsVUFBVXVULE1BQU0sU0FBU2pVLEdBQUdrQixLQUFLODRELGlCQUFpQixDQUFDaDZELEdBQUcsU0FBUyxJQUFJYyxFQUFFSSxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRLE9BQU95MkIsR0FBRzNrQyxFQUFFeU0sTUFBTTNMLElBQUlkLEVBQUVVLFVBQVU2VyxLQUFLLFNBQVN2WCxFQUFFYyxFQUFFUCxHQUFHLE9BQU9XLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsUUFBUXlrQyxHQUFHdmpDLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVFsTyxFQUFFeU0sTUFBTXpNLEVBQUVtTSxNQUFNckwsSUFBSWQsRUFBRVUsVUFBVW9FLElBQUksU0FBUzlFLEVBQUVjLEdBQUdJLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsT0FBTzZ2QixHQUFHLE1BQU0vdUIsRUFBRWQsRUFBRXVNLE1BQU0sSUFBSSxJQUFJaE0sRUFBRW92QixHQUFHM3ZCLEVBQUV5TSxNQUFNM0wsR0FBR2xCLEVBQUVXLEVBQUUsR0FBR2hCLEVBQUVnQixFQUFFLEdBQUdjLEVBQUV5d0IsR0FBR2x5QixFQUFFSSxFQUFFbU0sT0FBT3JOLEVBQUV1RyxFQUFFOUYsR0FBR3NCLEVBQUVLLEtBQUtzTyxTQUFTbk8sRUFBRTZNLFFBQVE1TSxFQUFFSixLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRblAsRUFBRSxFQUFFQSxFQUFFOEIsRUFBRXVCLFNBQVNyRCxFQUFFLENBQUMsSUFBSSxJQUFJSSxFQUFFSixFQUFFRCxFQUFFaUcsRUFBRXpELEVBQUVuQyxHQUFHeUIsRUFBRSxFQUFFQSxFQUFFOUIsSUFBSThCLEVBQUUsQ0FBQyxJQUFJb0UsRUFBRTFELEVBQUVuQyxFQUFFeUIsR0FBR29FLEVBQUVELElBQUlBLEVBQUVDLEdBQUduRSxFQUFFOUIsR0FBR2dHLEVBQUUsT0FBTzFELEdBQUdyQixFQUFFVSxVQUFVOFIsUUFBUSxTQUFTeFMsRUFBRWMsR0FBRyxPQUFPSSxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsV0FBV0ksS0FBS2c1RCxvQkFBb0JsNkQsRUFBRWMsRUFBRWQsRUFBRW1NLE9BQU0sU0FBU25NLEVBQUVjLEdBQUcsT0FBTzZELEtBQUtHLElBQUk5RSxFQUFFYyxPQUFNZCxFQUFFVSxVQUFVa1MsSUFBSSxTQUFTNVMsRUFBRWMsR0FBRyxPQUFPSSxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsT0FBT0ksS0FBS2c1RCxvQkFBb0JsNkQsRUFBRWMsRUFBRWQsRUFBRW1NLE9BQU0sU0FBU25NLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRWMsRUFBRSxPQUFPZCxFQUFFLEdBQUdjLEVBQUUsR0FBR2QsR0FBRyxHQUFHYyxHQUFHLEVBQUVQLEdBQUdBLEVBQUVPLEdBQUdBLE1BQUtkLEVBQUVVLFVBQVVtRSxJQUFJLFNBQVM3RSxFQUFFYyxHQUFHSSxLQUFLODRELGlCQUFpQmg2RCxFQUFFLE9BQU82dkIsR0FBRyxNQUFNL3VCLEVBQUVkLEVBQUV1TSxNQUFNLElBQUksSUFBSWhNLEVBQUVvdkIsR0FBRzN2QixFQUFFeU0sTUFBTTNMLEdBQUdsQixFQUFFVyxFQUFFLEdBQUdoQixFQUFFZ0IsRUFBRSxHQUFHYyxFQUFFeXdCLEdBQUdseUIsRUFBRUksRUFBRW1NLE9BQU9yTixFQUFFdUcsRUFBRTlGLEdBQUdzQixFQUFFSyxLQUFLc08sU0FBU25PLEVBQUU2TSxRQUFRNU0sRUFBRUosS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUW5QLEVBQUUsRUFBRUEsRUFBRThCLEVBQUV1QixTQUFTckQsRUFBRSxDQUFDLElBQUksSUFBSUksRUFBRUosRUFBRUQsRUFBRWlHLEVBQUV6RCxFQUFFbkMsR0FBR3lCLEVBQUUsRUFBRUEsRUFBRTlCLElBQUk4QixFQUFFLENBQUMsSUFBSW9FLEVBQUUxRCxFQUFFbkMsRUFBRXlCLEdBQUdvRSxFQUFFRCxJQUFJQSxFQUFFQyxHQUFHbkUsRUFBRTlCLEdBQUdnRyxFQUFFLE9BQU8xRCxHQUFHckIsRUFBRVUsVUFBVWdTLFFBQVEsU0FBUzFTLEVBQUVjLEdBQUcsT0FBT0ksS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLFdBQVdJLEtBQUtnNUQsb0JBQW9CbDZELEVBQUVjLEVBQUVkLEVBQUVtTSxPQUFNLFNBQVNuTSxFQUFFYyxHQUFHLE9BQU82RCxLQUFLRSxJQUFJN0UsRUFBRWMsT0FBTWQsRUFBRVUsVUFBVTJRLElBQUksU0FBU3JSLEVBQUVjLEdBQUdJLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsT0FBTzZ2QixHQUFHLE1BQU0vdUIsRUFBRWQsRUFBRXVNLE1BQU0sSUFBSSxJQUFJaE0sRUFBRW92QixHQUFHM3ZCLEVBQUV5TSxNQUFNM0wsR0FBR2xCLEVBQUVXLEVBQUUsR0FBR2hCLEVBQUVnQixFQUFFLEdBQUdjLEVBQUV5d0IsR0FBR2x5QixFQUFFSSxFQUFFbU0sT0FBT3JOLEVBQUV1RyxFQUFFOUYsR0FBR3NCLEVBQUVLLEtBQUtzTyxTQUFTbk8sRUFBRTZNLFFBQVE1TSxFQUFFSixLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRblAsRUFBRSxFQUFFQSxFQUFFOEIsRUFBRXVCLFNBQVNyRCxFQUFFLENBQUMsSUFBSSxJQUFJSSxFQUFFSixFQUFFRCxFQUFFaUcsRUFBRXpELEVBQUVuQyxHQUFHeUIsRUFBRSxFQUFFQSxFQUFFOUIsSUFBSThCLEVBQUUsQ0FBQyxJQUFJb0UsRUFBRTFELEVBQUVuQyxFQUFFeUIsR0FBR21FLEVBQUVBLEdBQUdDLEVBQUVuRSxFQUFFOUIsR0FBR2dHLEVBQUUsT0FBTzFELEdBQUdyQixFQUFFVSxVQUFVNFEsSUFBSSxTQUFTdFIsRUFBRWMsR0FBR0ksS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxPQUFPNnZCLEdBQUcsTUFBTS91QixFQUFFZCxFQUFFdU0sTUFBTSxJQUFJLElBQUloTSxFQUFFb3ZCLEdBQUczdkIsRUFBRXlNLE1BQU0zTCxHQUFHbEIsRUFBRVcsRUFBRSxHQUFHaEIsRUFBRWdCLEVBQUUsR0FBR2MsRUFBRXl3QixHQUFHbHlCLEVBQUVJLEVBQUVtTSxPQUFPck4sRUFBRXVHLEVBQUU5RixHQUFHc0IsRUFBRUssS0FBS3NPLFNBQVNuTyxFQUFFNk0sUUFBUTVNLEVBQUVKLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVFuUCxFQUFFLEVBQUVBLEVBQUU4QixFQUFFdUIsU0FBU3JELEVBQUUsQ0FBQyxJQUFJLElBQUlJLEVBQUVKLEVBQUVELEVBQUVpRyxFQUFFekQsRUFBRW5DLEdBQUd5QixFQUFFLEVBQUVBLEVBQUU5QixJQUFJOEIsRUFBRSxDQUFDLElBQUlvRSxFQUFFMUQsRUFBRW5DLEVBQUV5QixHQUFHbUUsRUFBRUEsR0FBR0MsRUFBRW5FLEVBQUU5QixHQUFHZ0csRUFBRSxPQUFPMUQsR0FBR3JCLEVBQUVVLFVBQVVvUyxrQkFBa0IsU0FBUzlTLEVBQUVjLEdBQUcsT0FBT0ksS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLHFCQUFxQkksS0FBS2c1RCxvQkFBb0JsNkQsRUFBRWMsRUFBRWQsRUFBRW1NLE9BQU0sU0FBU25NLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRWMsRUFBRSxPQUFPUCxFQUFFQSxNQUFLUCxFQUFFVSxVQUFVaUYsS0FBSyxTQUFTM0YsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsUUFBUSxJQUFJLElBQUljLEVBQUVJLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVEzTixFQUFFLElBQUlxRyxhQUFhOUYsRUFBRXNCLFFBQVF4QyxFQUFFLEVBQUVBLEVBQUVrQixFQUFFc0IsU0FBU3hDLEVBQUVXLEVBQUVYLEdBQUcrRSxLQUFLZ0IsS0FBSzdFLEVBQUVsQixJQUFJLE9BQU8rTixHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sQ0FBQ1ksT0FBTzlNLEtBQUtQLEVBQUVVLFVBQVUrTSxNQUFNLFNBQVN6TixHQUFHa0IsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxTQUFTLElBQUksSUFBSWMsRUFBRUksS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUTNOLEVBQUUsSUFBSXFHLGFBQWE5RixFQUFFc0IsUUFBUXhDLEVBQUUsRUFBRUEsRUFBRWtCLEVBQUVzQixTQUFTeEMsRUFBRVcsRUFBRVgsR0FBRytFLEtBQUs4SSxNQUFNM00sRUFBRWxCLElBQUksT0FBTytOLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPOU0sS0FBS1AsRUFBRVUsVUFBVXlULEtBQUssU0FBU25VLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLEtBQUssSUFBSSxJQUFJYyxFQUFFSSxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRM04sRUFBRSxJQUFJcUcsYUFBYTlGLEVBQUVzQixRQUFReEMsRUFBRSxFQUFFQSxFQUFFa0IsRUFBRXNCLFNBQVN4QyxFQUFFa0IsRUFBRWxCLEdBQUcsRUFBRVcsRUFBRVgsSUFBSSxFQUFFa0IsRUFBRWxCLEdBQUcsRUFBRVcsRUFBRVgsR0FBRyxFQUFFVyxFQUFFWCxHQUFHLEVBQUUsT0FBTytOLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPOU0sS0FBS1AsRUFBRVUsVUFBVXVHLE1BQU0sU0FBU2pILEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLEtBQUssSUFBSSxJQUFJYyxFQUFFSSxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRM04sRUFBRSxJQUFJdUcsV0FBV2hHLEVBQUVzQixRQUFReEMsRUFBRSxFQUFFQSxFQUFFa0IsRUFBRXNCLFNBQVN4QyxFQUFFNEksT0FBT3ZCLE1BQU1uRyxFQUFFbEIsTUFBTVcsRUFBRVgsR0FBRyxHQUFHLE9BQU8rTixHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sQ0FBQ1ksT0FBTzlNLEdBQUcsU0FBU1AsRUFBRVUsVUFBVTBULE1BQU0sU0FBU3BVLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLEtBQUssSUFBSSxJQUFJYyxFQUFFSSxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRM04sRUFBRSxJQUFJdUcsV0FBV2hHLEVBQUVzQixRQUFReEMsRUFBRSxFQUFFQSxFQUFFa0IsRUFBRXNCLFNBQVN4QyxFQUFFK0UsS0FBSytQLElBQUk1VCxFQUFFbEIsTUFBTSxNQUFNVyxFQUFFWCxHQUFHLEdBQUcsT0FBTytOLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPOU0sR0FBRyxTQUFTUCxFQUFFVSxVQUFVd0csU0FBUyxTQUFTbEgsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsS0FBSyxJQUFJLElBQUljLEVBQUVJLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVEzTixFQUFFLElBQUl1RyxXQUFXaEcsRUFBRXNCLFFBQVF4QyxFQUFFLEVBQUVBLEVBQUVrQixFQUFFc0IsU0FBU3hDLEVBQUU0SSxPQUFPdEIsU0FBU3BHLEVBQUVsQixNQUFNVyxFQUFFWCxHQUFHLEdBQUcsT0FBTytOLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPOU0sR0FBRyxTQUFTUCxFQUFFVSxVQUFVc0gsTUFBTSxTQUFTaEksR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsU0FBUyxJQUFJLElBQUljLEVBQUVJLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVEzTixFQUFFLElBQUlxRyxhQUFhOUYsRUFBRXNCLFFBQVF4QyxFQUFFLEVBQUVBLEVBQUVrQixFQUFFc0IsU0FBU3hDLEVBQUUsQ0FBQyxJQUFJTCxFQUFFb0YsS0FBSzhJLE1BQU0zTSxFQUFFbEIsSUFBSWtCLEVBQUVsQixHQUFHTCxFQUFFLEdBQUdnQixFQUFFWCxHQUFHK0UsS0FBSzhJLE1BQU0zTSxFQUFFbEIsSUFBSWtCLEVBQUVsQixHQUFHTCxFQUFFLEdBQUdnQixFQUFFWCxHQUFHK0UsS0FBS2dCLEtBQUs3RSxFQUFFbEIsSUFBSVcsRUFBRVgsR0FBR0wsRUFBRSxHQUFHLEVBQUVBLEVBQUVBLEVBQUUsRUFBRSxPQUFPb08sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU85TSxLQUFLUCxFQUFFVSxVQUFVK0UsSUFBSSxTQUFTekYsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsT0FBTyxJQUFJLElBQUljLEVBQUVJLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVEzTixFQUFFLElBQUlxRyxhQUFhOUYsRUFBRXNCLFFBQVF4QyxFQUFFLEVBQUVBLEVBQUVrQixFQUFFc0IsU0FBU3hDLEVBQUVXLEVBQUVYLEdBQUcrRSxLQUFLYyxJQUFJM0UsRUFBRWxCLElBQUksT0FBTytOLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPOU0sS0FBS1AsRUFBRVUsVUFBVTJULE1BQU0sU0FBU3JVLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLFNBQVMsSUFBSSxJQUFJYyxFQUFFSSxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRM04sRUFBRSxJQUFJcUcsYUFBYTlGLEVBQUVzQixRQUFReEMsRUFBRSxFQUFFQSxFQUFFa0IsRUFBRXNCLFNBQVN4QyxFQUFFVyxFQUFFWCxHQUFHK0UsS0FBSzBQLE1BQU12VCxFQUFFbEIsSUFBSSxPQUFPK04sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU85TSxLQUFLUCxFQUFFVSxVQUFVaU0sSUFBSSxTQUFTM00sR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsT0FBTyxJQUFJLElBQUljLEVBQUVJLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVEzTixFQUFFLElBQUlxRyxhQUFhOUYsRUFBRXNCLFFBQVF4QyxFQUFFLEVBQUVBLEVBQUVrQixFQUFFc0IsU0FBU3hDLEVBQUUsQ0FBQyxJQUFJTCxFQUFFdUIsRUFBRWxCLEdBQUdXLEVBQUVYLEdBQUcrRSxLQUFLZ0ksSUFBSXBOLEdBQUcsT0FBT29PLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPOU0sS0FBS1AsRUFBRVUsVUFBVTRULE1BQU0sU0FBU3RVLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLFNBQVMsSUFBSSxJQUFJYyxFQUFFSSxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRM04sRUFBRSxJQUFJcUcsYUFBYTlGLEVBQUVzQixRQUFReEMsRUFBRSxFQUFFQSxFQUFFa0IsRUFBRXNCLFNBQVN4QyxFQUFFLENBQUMsSUFBSUwsRUFBRXVCLEVBQUVsQixHQUFHVyxFQUFFWCxHQUFHK0UsS0FBSzJQLE1BQU0vVSxHQUFHLE9BQU9vTyxHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sQ0FBQ1ksT0FBTzlNLEtBQUtQLEVBQUVVLFVBQVVrRixLQUFLLFNBQVM1RixHQUFHa0IsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxRQUFRLElBQUksSUFBSWMsRUFBRUksS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUTNOLEVBQUUsSUFBSXFHLGFBQWE5RixFQUFFc0IsUUFBUXhDLEVBQUUsRUFBRUEsRUFBRWtCLEVBQUVzQixTQUFTeEMsRUFBRSxDQUFDLElBQUlMLEVBQUV1QixFQUFFbEIsR0FBR1csRUFBRVgsR0FBRytFLEtBQUtpQixLQUFLckcsR0FBRyxPQUFPb08sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU85TSxLQUFLUCxFQUFFVSxVQUFVNlQsTUFBTSxTQUFTdlUsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsU0FBUyxJQUFJLElBQUljLEVBQUVJLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVEzTixFQUFFLElBQUlxRyxhQUFhOUYsRUFBRXNCLFFBQVF4QyxFQUFFLEVBQUVBLEVBQUVrQixFQUFFc0IsU0FBU3hDLEVBQUUsQ0FBQyxJQUFJTCxFQUFFdUIsRUFBRWxCLEdBQUdXLEVBQUVYLEdBQUcsRUFBRStFLEtBQUtpQixLQUFLckcsR0FBRyxPQUFPb08sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU85TSxLQUFLUCxFQUFFVSxVQUFVOFQsT0FBTyxTQUFTeFUsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsVUFBVSxJQUFJLElBQUljLEVBQUVJLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVEzTixFQUFFLElBQUlxRyxhQUFhOUYsRUFBRXNCLFFBQVF4QyxFQUFFLEVBQUVBLEVBQUVrQixFQUFFc0IsU0FBU3hDLEVBQUUsQ0FBQyxJQUFJTCxFQUFFdUIsRUFBRWxCLEdBQUdXLEVBQUVYLEdBQUdMLEVBQUVBLEVBQUUsT0FBT29PLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPOU0sS0FBS1AsRUFBRVUsVUFBVStULFdBQVcsU0FBU3pVLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLGNBQWMsSUFBSSxJQUFJYyxFQUFFSSxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRM04sRUFBRSxJQUFJcUcsYUFBYTlGLEVBQUVzQixRQUFReEMsRUFBRSxFQUFFQSxFQUFFa0IsRUFBRXNCLFNBQVN4QyxFQUFFVyxFQUFFWCxHQUFHLEVBQUVrQixFQUFFbEIsR0FBRyxPQUFPK04sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU85TSxLQUFLUCxFQUFFVSxVQUFVazVELE9BQU8sU0FBUzU1RCxHQUFHLE9BQU9BLEdBQUdBLEVBQUVVLFVBQVVrVSxLQUFLLFNBQVM1VSxHQUFHa0IsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxRQUFRLElBQUksSUFBSWMsRUFBRWd4QixHQUFHOXhCLEVBQUV5TSxNQUFNek0sRUFBRW1NLE9BQU81TCxFQUFFVyxLQUFLc08sU0FBUzFPLEVBQUVvTixRQUFRdE8sRUFBRXNCLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVEzTyxFQUFFLEVBQUVBLEVBQUVLLEVBQUV3QyxTQUFTN0MsRUFBRWdCLEVBQUVoQixHQUFHb0YsS0FBS0UsSUFBSSxFQUFFakYsRUFBRUwsSUFBSSxPQUFPdUIsR0FBR2QsRUFBRVUsVUFBVXNVLE1BQU0sU0FBU2hWLEVBQUVjLEdBQUcsT0FBT0ksS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLFNBQVNJLEtBQUtnNUQsb0JBQW9CbDZELEVBQUVjLEVBQUVkLEVBQUVtTSxPQUFNLFNBQVNuTSxFQUFFYyxHQUFHLE9BQU9kLEVBQUUsRUFBRWMsRUFBRWQsRUFBRUEsTUFBS0EsRUFBRVUsVUFBVW1VLElBQUksU0FBUzdVLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLE9BQU8sSUFBSSxJQUFJYyxFQUFFLElBQUk4RixhQUFhNUcsRUFBRXdNLE1BQU1qTSxFQUFFVyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRdE8sRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsU0FBU3hDLEVBQUUsQ0FBQyxJQUFJTCxFQUFFZ0IsRUFBRVgsR0FBR2tCLEVBQUVsQixHQUFHTCxHQUFHLEVBQUVBLEVBQUVvRixLQUFLYyxJQUFJbEcsR0FBRyxFQUFFLE9BQU9vTyxHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sQ0FBQ1ksT0FBT3ZNLEtBQUtkLEVBQUVVLFVBQVV5OEIsT0FBTyxTQUFTbjlCLEVBQUVjLEdBQUdJLEtBQUs4NEQsaUJBQWlCLENBQUNoNkQsRUFBRWMsR0FBRyxVQUFVLElBQUksSUFBSVAsRUFBRSxJQUFJcUcsYUFBYTlGLEVBQUUwTCxNQUFNNU0sRUFBRXNCLEtBQUtzTyxTQUFTMU8sRUFBRW9OLFFBQVEzTyxFQUFFMkIsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUTdNLEVBQUUsRUFBRUEsRUFBRXpCLEVBQUV3QyxTQUFTZixFQUFFLENBQUMsSUFBSXZDLEVBQUVjLEVBQUV5QixHQUFHZCxFQUFFYyxHQUFHdkMsR0FBRyxFQUFFUyxFQUFFOEIsR0FBRzlCLEVBQUU4QixJQUFJdkMsRUFBRSxHQUFHLE9BQU82TyxHQUFHQyxLQUFLOU0sRUFBRTJMLE1BQU0sQ0FBQ1ksT0FBTzlNLEtBQUtQLEVBQUVVLFVBQVVvVSxLQUFLLFNBQVM5VSxHQUFHa0IsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxRQUFRLElBQUksSUFBY0osRUFBRSxJQUFJZ0gsYUFBYTVHLEVBQUV3TSxNQUFNak4sRUFBRTJCLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVE3TSxFQUFFLEVBQUVBLEVBQUU5QixFQUFFNkMsU0FBU2YsRUFBRSxDQUFDLElBQUl2QyxFQUFFUyxFQUFFOEIsR0FBR3pCLEVBQUV5QixHQUFHdkMsR0FBRyxFQUEvRjQzQyxtQkFBbUc1M0MsRUFBeEcyM0Msb0JBQTZHOXhDLEtBQUtjLElBQUkzRyxHQUFHLEdBQUcsT0FBTzZPLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPek4sS0FBS0ksRUFBRVUsVUFBVTI4QixLQUFLLFNBQVNyOUIsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxRQUFRLElBQUksSUFBSUosRUFBRSxJQUFJZ0gsYUFBYTVHLEVBQUV3TSxNQUFNak4sRUFBRTJCLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVE3TSxFQUFFLEVBQUVBLEVBQUU5QixFQUFFNkMsU0FBU2YsRUFBRSxDQUFDLElBQUl2QyxFQUFFUyxFQUFFOEIsR0FBR3pCLEVBQUV5QixHQUFHdkMsRUFBRXlCLEVBQUVBLEVBQUV6QixFQUFFZ0MsRUFBRUEsRUFBRWhDLEVBQUUsT0FBTzZPLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPek4sS0FBS0ksRUFBRVUsVUFBVWdVLElBQUksU0FBUzFVLEdBQUcsSUFBSSxJQUFJYyxFQUFFLElBQUk4RixhQUFhNUcsRUFBRXdNLE1BQU1qTSxFQUFFVyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRdE8sRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsU0FBU3hDLEVBQUVrQixFQUFFbEIsR0FBRytFLEtBQUsrUCxJQUFJblUsRUFBRVgsSUFBSSxPQUFPK04sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU92TSxLQUFLZCxFQUFFVSxVQUFVNDhCLFdBQVcsU0FBU3Q5QixHQUFHLElBQUksSUFBSWMsRUFBRSxJQUFJOEYsYUFBYTVHLEVBQUV3TSxNQUFNak0sRUFBRVcsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUXRPLEVBQUUsRUFBRUEsRUFBRUksRUFBRXdNLE9BQU81TSxFQUFFLENBQUMsSUFBSUwsRUFBRWdCLEVBQUUsRUFBRVgsR0FBR3lCLEVBQUVkLEVBQUUsRUFBRVgsRUFBRSxHQUFHa0IsRUFBRWxCLEdBQUcrRSxLQUFLdzFELE1BQU01NkQsRUFBRThCLEdBQUcsT0FBT3NNLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPdk0sS0FBS2QsRUFBRVUsVUFBVTA4QixJQUFJLFNBQVNwOUIsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsT0FBTyxJQUFJLElBQUljLEVBQUUsSUFBSStGLFdBQVc3RyxFQUFFd00sTUFBTWpNLEVBQUVXLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVF0TyxFQUFFLEVBQUVBLEVBQUVXLEVBQUU2QixTQUFTeEMsRUFBRWtCLEVBQUVsQixHQUFHVyxFQUFFWCxHQUFHLE9BQU8rTixHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sQ0FBQ1ksT0FBT3ZNLEdBQUcsVUFBVWQsRUFBRVUsVUFBVXVVLFFBQVEsU0FBU2pWLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLFdBQVcsSUFBSSxJQUFJYyxFQUFFLElBQUk4RixhQUFhNUcsRUFBRXdNLE1BQU1qTSxFQUFFVyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRdE8sRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsU0FBU3hDLEVBQUVrQixFQUFFbEIsR0FBRyxHQUFHLEVBQUUrRSxLQUFLYyxLQUFLbEYsRUFBRVgsS0FBSyxPQUFPK04sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU92TSxLQUFLZCxFQUFFVSxVQUFVeVUsU0FBUyxTQUFTblYsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsWUFBWSxJQUFJLElBQUljLEVBQUU2RCxLQUFLZ0ksSUFBSSx1QkFBdUIsRUFBRXBNLEVBQUUsSUFBSXFHLGFBQWE1RyxFQUFFd00sTUFBTTVNLEVBQUVzQixLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRM08sRUFBRSxFQUFFQSxFQUFFSyxFQUFFd0MsU0FBUzdDLEVBQUUsQ0FBQyxJQUF3QytCLEVBQXBDRCxFQUFFekIsRUFBRUwsSUFBSXVCLEVBQUVoQyxFQUFFYyxFQUFFTCxHQUFHdUIsRUFBRUQsRUFBRThELEtBQUtjLElBQUk3RixFQUFFTCxJQUFhK0IsRUFBRXhDLEVBQUUrQixFQUFFUSxFQUFFekIsRUFBRUwsR0FBR29GLEtBQUtnSSxJQUFJLEVBQUU5TCxHQUFHTixFQUFFaEIsR0FBRytCLEVBQUUsT0FBT3FNLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPOU0sS0FBS1AsRUFBRVUsVUFBVTRVLElBQUksU0FBU3RWLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLE9BQU8sSUFBSSxJQUFJYyxFQUFFLElBQUk4RixhQUFhNUcsRUFBRXdNLE1BQU1qTSxFQUFFVyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRdE8sRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsU0FBU3hDLEVBQUVrQixFQUFFbEIsR0FBRytFLEtBQUsyUSxJQUFJL1UsRUFBRVgsSUFBSSxPQUFPK04sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU92TSxLQUFLZCxFQUFFVSxVQUFVNlUsSUFBSSxTQUFTdlYsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsT0FBTyxJQUFJLElBQUljLEVBQUUsSUFBSThGLGFBQWE1RyxFQUFFd00sTUFBTWpNLEVBQUVXLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVF0TyxFQUFFLEVBQUVBLEVBQUVXLEVBQUU2QixTQUFTeEMsRUFBRWtCLEVBQUVsQixHQUFHK0UsS0FBSzRRLElBQUloVixFQUFFWCxJQUFJLE9BQU8rTixHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sQ0FBQ1ksT0FBT3ZNLEtBQUtkLEVBQUVVLFVBQVU4VSxJQUFJLFNBQVN4VixHQUFHa0IsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxPQUFPLElBQUksSUFBSWMsRUFBRSxJQUFJOEYsYUFBYTVHLEVBQUV3TSxNQUFNak0sRUFBRVcsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUXRPLEVBQUUsRUFBRUEsRUFBRVcsRUFBRTZCLFNBQVN4QyxFQUFFa0IsRUFBRWxCLEdBQUcrRSxLQUFLNlEsSUFBSWpWLEVBQUVYLElBQUksT0FBTytOLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPdk0sS0FBS2QsRUFBRVUsVUFBVStVLEtBQUssU0FBU3pWLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLFFBQVEsSUFBSSxJQUFJYyxFQUFFLElBQUk4RixhQUFhNUcsRUFBRXdNLE1BQU1qTSxFQUFFVyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRdE8sRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsU0FBU3hDLEVBQUVrQixFQUFFbEIsR0FBRytFLEtBQUs4USxLQUFLbFYsRUFBRVgsSUFBSSxPQUFPK04sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU92TSxLQUFLZCxFQUFFVSxVQUFVZ1YsS0FBSyxTQUFTMVYsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsUUFBUSxJQUFJLElBQUljLEVBQUUsSUFBSThGLGFBQWE1RyxFQUFFd00sTUFBTWpNLEVBQUVXLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVF0TyxFQUFFLEVBQUVBLEVBQUVXLEVBQUU2QixTQUFTeEMsRUFBRWtCLEVBQUVsQixHQUFHK0UsS0FBSytRLEtBQUtuVixFQUFFWCxJQUFJLE9BQU8rTixHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sQ0FBQ1ksT0FBT3ZNLEtBQUtkLEVBQUVVLFVBQVVpVixLQUFLLFNBQVMzVixHQUFHa0IsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxRQUFRLElBQUksSUFBSWMsRUFBRSxJQUFJOEYsYUFBYTVHLEVBQUV3TSxNQUFNak0sRUFBRVcsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUXRPLEVBQUUsRUFBRUEsRUFBRVcsRUFBRTZCLFNBQVN4QyxFQUFFa0IsRUFBRWxCLEdBQUcrRSxLQUFLZ1IsS0FBS3BWLEVBQUVYLElBQUksT0FBTytOLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPdk0sS0FBS2QsRUFBRVUsVUFBVW9SLE1BQU0sU0FBUzlSLEVBQUVjLEdBQUcsT0FBT0ksS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLFNBQVNJLEtBQUtnNUQsb0JBQW9CbDZELEVBQUVjLEVBQUVkLEVBQUVtTSxPQUFNLFNBQVNuTSxFQUFFYyxHQUFHLE9BQU82RCxLQUFLbU4sTUFBTTlSLEVBQUVjLE9BQU1kLEVBQUVVLFVBQVVrVixLQUFLLFNBQVM1VixHQUFHa0IsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxRQUFRLElBQUksSUFBSWMsRUFBRSxJQUFJOEYsYUFBYTVHLEVBQUV3TSxNQUFNak0sRUFBRVcsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUXRPLEVBQUUsRUFBRUEsRUFBRVcsRUFBRTZCLFNBQVN4QyxFQUFFa0IsRUFBRWxCLEdBQUcrRSxLQUFLaVIsS0FBS3JWLEVBQUVYLElBQUksT0FBTytOLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPdk0sS0FBS2QsRUFBRVUsVUFBVW1WLEtBQUssU0FBUzdWLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLFFBQVEsSUFBSSxJQUFJYyxFQUFFLElBQUk4RixhQUFhNUcsRUFBRXdNLE1BQU1qTSxFQUFFVyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRdE8sRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsU0FBU3hDLEVBQUVrQixFQUFFbEIsR0FBRytFLEtBQUtrUixLQUFLdFYsRUFBRVgsSUFBSSxPQUFPK04sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU92TSxLQUFLZCxFQUFFVSxVQUFVOEUsS0FBSyxTQUFTeEYsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsUUFBUSxJQUFJLElBQUljLEVBQUUsSUFBSThGLGFBQWE1RyxFQUFFd00sTUFBTWpNLEVBQUVXLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVF0TyxFQUFFLEVBQUVBLEVBQUVXLEVBQUU2QixTQUFTeEMsRUFBRWtCLEVBQUVsQixHQUFHMkYsRUFBRWhGLEVBQUVYLElBQUksT0FBTytOLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPdk0sS0FBS2QsRUFBRVUsVUFBVW9WLE1BQU0sU0FBUzlWLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLFNBQVMsSUFBSSxJQUFJYyxFQUFFLElBQUk4RixhQUFhNUcsRUFBRXdNLE1BQU1qTSxFQUFFVyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRdE8sRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsU0FBU3hDLEVBQUVrQixFQUFFbEIsR0FBRytFLEtBQUttUixNQUFNdlYsRUFBRVgsSUFBSSxPQUFPK04sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU92TSxLQUFLZCxFQUFFVSxVQUFVcVYsTUFBTSxTQUFTL1YsR0FBR2tCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsU0FBUyxJQUFJLElBQUljLEVBQUUsSUFBSThGLGFBQWE1RyxFQUFFd00sTUFBTWpNLEVBQUVXLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVF0TyxFQUFFLEVBQUVBLEVBQUVXLEVBQUU2QixTQUFTeEMsRUFBRWtCLEVBQUVsQixHQUFHK0UsS0FBS29SLE1BQU14VixFQUFFWCxJQUFJLE9BQU8rTixHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sQ0FBQ1ksT0FBT3ZNLEtBQUtkLEVBQUVVLFVBQVVzVixNQUFNLFNBQVNoVyxHQUFHa0IsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxTQUFTLElBQUksSUFBSWMsRUFBRSxJQUFJOEYsYUFBYTVHLEVBQUV3TSxNQUFNak0sRUFBRVcsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUXRPLEVBQUUsRUFBRUEsRUFBRVcsRUFBRTZCLFNBQVN4QyxFQUFFa0IsRUFBRWxCLEdBQUcrRSxLQUFLcVIsTUFBTXpWLEVBQUVYLElBQUksT0FBTytOLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPdk0sS0FBS2QsRUFBRVUsVUFBVXVWLElBQUksU0FBU2pXLEdBQUdrQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLE9BQU8sSUFBSSxJQUFJYyxFQUFFLElBQUk4RixhQUFhNUcsRUFBRXdNLE1BQU1qTSxFQUFFVyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRdE8sRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsU0FBU3hDLEVBQUUsQ0FBQyxJQUFJTCxFQUFFZ0IsRUFBRVgsR0FBR3lCLEVBQUUsR0FBRyxFQUFFLFNBQVM5QixHQUFHdUIsRUFBRWxCLEdBQUcsTUFBTSxZQUFZeUIsRUFBRSxhQUFhQSxFQUFFLGFBQWFBLEVBQUUsWUFBWUEsRUFBRSxZQUFZQSxFQUFFc0QsS0FBS2MsS0FBS2xHLEVBQUVBLEdBQUcsT0FBT29PLEdBQUdDLEtBQUs1TixFQUFFeU0sTUFBTSxDQUFDWSxPQUFPdk0sS0FBS2QsRUFBRVUsVUFBVXdWLEtBQUssU0FBU2xXLEVBQUVjLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxHQUFHSSxLQUFLODRELGlCQUFpQmg2RCxFQUFFLFFBQVEsSUFBSSxJQUFJTyxFQUFFLElBQUlxRyxhQUFhNUcsRUFBRXdNLE1BQU01TSxFQUFFc0IsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUTNPLEVBQUUsRUFBRUEsRUFBRUssRUFBRXdDLFNBQVM3QyxFQUFFLENBQUMsSUFBSThCLEVBQUV6QixFQUFFTCxHQUFHMEgsTUFBTTVGLEdBQUdkLEVBQUVoQixHQUFHaTJCLElBQUlqMUIsRUFBRWhCLEdBQUc4QixFQUFFLEVBQUUsRUFBRVAsRUFBRSxPQUFPNk0sR0FBR0MsS0FBSzVOLEVBQUV5TSxNQUFNLENBQUNZLE9BQU85TSxLQUFLUCxFQUFFVSxVQUFVNjhCLFlBQVksU0FBU3Y5QixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxJQUFJdkMsRUFBRW9DLEtBQUt1VixPQUFPelcsRUFBRWMsRUFBRVAsR0FBRyxPQUFPWCxJQUFJZCxFQUFFb0MsS0FBSzBRLElBQUk5UyxFQUFFYyxJQUFJTCxJQUFJVCxFQUFFNjZELEdBQUd6NEQsS0FBS3BDLEVBQUVTLEVBQUU4QixJQUFJdkMsR0FBR2tCLEVBQUVVLFVBQVUrVixPQUFPLFNBQVN6VyxFQUFFYyxFQUFFUCxHQUFHVyxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsVUFBVSxJQUFJLElBQUlsQixFQUFFVyxFQUFFcWdDLGFBQWFyaEMsRUFBRWdCLEVBQUVzZ0MsWUFBWXgvQixFQUFFZCxFQUFFeWdDLGVBQWVsaUMsRUFBRXlCLEVBQUUwZ0MsY0FBY3BnQyxFQUFFTixFQUFFMC9CLFFBQVFMLEtBQUt0K0IsRUFBRWYsRUFBRTAvQixRQUFRUCxJQUFJM2dDLEVBQUUsaUJBQWlCd0IsRUFBRTgvQixXQUFXbGhDLEVBQUVtM0IsR0FBRy8xQixFQUFFNGdDLFNBQVNuaEMsRUFBRW1NLE9BQU9wSCxFQUFFL0UsRUFBRXNOLFFBQVEsR0FBRzFNLEVBQUU3QixFQUFFaUIsRUFBRXNOLFFBQVEsR0FBR3ROLEVBQUVzTixRQUFRLEdBQUd0SSxFQUFFakcsRUFBRWlCLEVBQUVzTixRQUFRLEdBQUcsRUFBRWxPLEVBQUVMLEVBQUUsRUFBRWlCLEVBQUVzTixRQUFRLEdBQUdwSSxFQUFFL0YsRUFBRW1PLFFBQVEsR0FBR3BPLEVBQUVILEVBQUVJLEVBQUVtTyxRQUFRLEdBQUduTyxFQUFFbU8sUUFBUSxHQUFHakksRUFBRXRHLEVBQUVJLEVBQUVtTyxRQUFRLEdBQUcsRUFBRXJJLEVBQUVsRyxFQUFFLEVBQUVJLEVBQUVtTyxRQUFRLEdBQUdoSSxFQUFFcEUsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUTNJLEVBQUVyRSxLQUFLc08sU0FBUzFPLEVBQUVvTixRQUFReEksRUFBRXZHLEVBQUVrTyxPQUFPeEgsRUFBRSxFQUFFQSxFQUFFdEYsRUFBRTYvQixZQUFZdjZCLEVBQUUsSUFBSSxJQUFJRSxFQUFFRixFQUFFZCxFQUFFa0IsRUFBRUosRUFBRVgsRUFBRWlCLEVBQUUsRUFBRUEsRUFBRTVGLEVBQUUyL0IsWUFBWS81QixFQUFFLElBQUksSUFBSUksRUFBRU4sRUFBRUUsRUFBRWpILEVBQUV5SCxFQUFFUixFQUFFNUYsRUFBRW1nQyxhQUFhcC9CLEVBQUV5RixFQUFFLEVBQUVBLEVBQUVuSCxFQUFFbUgsSUFBSSxDQUFDLElBQUlDLEVBQUVMLEVBQUVJLEVBQUUxRixFQUFFLEtBQUsyRixFQUFFLEdBQUdBLEdBQUd6RyxFQUFFKy9CLFVBQVUsSUFBSSxJQUFJbjVCLEVBQUVKLEVBQUVqRyxFQUFFd00sUUFBUSxHQUFHbEcsRUFBRXJCLEVBQUVpQixFQUFFcEcsRUFBRXdFLEVBQUUsRUFBRUEsRUFBRTdFLEVBQUU0L0IsV0FBVy82QixFQUFFLElBQUksSUFBSWlDLEVBQUVkLEVBQUVuQixFQUFFQyxFQUFFaUMsRUFBRWxDLEVBQUU3RSxFQUFFb2dDLFlBQVk5L0IsRUFBRTBHLEVBQUUsRUFBRUEsRUFBRWhJLEVBQUVnSSxJQUFJLENBQUMsSUFBSUUsRUFBRUgsRUFBRUMsRUFBRXpJLEVBQUUsS0FBSzJJLEVBQUUsR0FBR0EsR0FBR2xILEVBQUVnZ0MsU0FBUyxJQUFJLElBQUk3NEIsRUFBRU4sRUFBRUssRUFBRXpDLEVBQUUyQyxFQUFFUixFQUFFSSxFQUFFekcsRUFBRXdNLFFBQVEsR0FBRzFGLEVBQUUsRUFBRUEsRUFBRXJILEVBQUVpZ0MsYUFBYTU0QixFQUFFLENBQUMsSUFBSSxJQUFJQyxFQUFFdkMsRUFBRW9DLEVBQUVFLEVBQUV4SSxHQUFHMEksRUFBRSxFQUFFQSxFQUFFdkgsRUFBRWtnQyxjQUFjMzRCLEVBQUVwQyxFQUFFMkIsRUFBRVMsRUFBRTdDLElBQUk0QyxFQUFFdEMsRUFBRW9DLEVBQUVHLEdBQUdILEdBQUdwSCxFQUFFa2dDLGNBQWMsT0FBT3RoQyxFQUFFdU8sWUFBWTFOLEVBQUVVLFVBQVVrOUIsT0FBTyxTQUFTNTlCLEVBQUVjLEVBQUVQLEdBQUcsSUFBSSxJQUFJWCxFQUFFVyxFQUFFbWhDLFlBQVluaUMsRUFBRWdCLEVBQUVxZ0MsYUFBYXYvQixFQUFFZCxFQUFFc2dDLFlBQVkvaEMsRUFBRXlCLEVBQUVxaEMsY0FBYy9nQyxFQUFFTixFQUFFeWdDLGVBQWUxL0IsRUFBRWYsRUFBRTBnQyxjQUFjbGlDLEVBQUV3QixFQUFFMC9CLFFBQVFvQixNQUFNbGlDLEVBQUVvQixFQUFFMC9CLFFBQVFMLEtBQUs3NkIsRUFBRXhFLEVBQUUwL0IsUUFBUVAsSUFBSTkrQixFQUFFMDFCLEdBQUcvMUIsRUFBRTRnQyxTQUFTbmhDLEVBQUVtTSxPQUFPbkgsRUFBRTlELEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVE5TyxFQUFFOEIsS0FBS3NPLFNBQVMxTyxFQUFFb04sUUFBUWhKLEVBQUV0RSxFQUFFeU0sT0FBT25PLEVBQUUsRUFBRUEsRUFBRXFCLEVBQUU2L0IsWUFBWWxoQyxFQUFFLElBQUksSUFBSW1HLEVBQUVuRyxFQUFFYyxFQUFFc04sUUFBUSxHQUFHckksRUFBRS9GLEVBQUUwQixFQUFFME0sUUFBUSxHQUFHaEksRUFBRSxFQUFFQSxFQUFFL0UsRUFBRWdoQyxXQUFXajhCLEVBQUUsSUFBSSxJQUFJQyxFQUFFTixFQUFFSyxFQUFFMUUsRUFBRTBNLFFBQVEsR0FBRzVILEVBQUVKLEVBQUUvRSxFQUFFa2hDLFlBQVkxaUMsRUFBRThHLEVBQUUsRUFBRUEsRUFBRWpHLEVBQUVpRyxJQUFJLENBQUMsSUFBSUUsRUFBRUwsRUFBRUcsRUFBRS9HLEVBQUUsS0FBS2lILEVBQUUsR0FBR0EsR0FBR3hGLEVBQUVpaEMsU0FBUyxJQUFJLElBQUl2N0IsRUFBRUosRUFBRS9FLEVBQUV3TSxRQUFRLEdBQUduSCxFQUFFZCxFQUFFVSxFQUFFL0YsRUFBRXNOLFFBQVEsR0FBRy9HLEVBQUUsRUFBRUEsRUFBRWhHLEVBQUUyL0IsWUFBWTM1QixFQUFFLElBQUksSUFBSUksRUFBRXBCLEVBQUVnQixFQUFFM0YsRUFBRTBNLFFBQVEsR0FBR3ZHLEVBQUVSLEVBQUVoRyxFQUFFbWdDLGFBQWEzN0IsRUFBRWlDLEVBQUUsRUFBRUEsRUFBRXpILEVBQUV5SCxJQUFJLENBQUMsSUFBSUcsRUFBRUosRUFBRUMsRUFBRW5HLEVBQUUsS0FBS3NHLEVBQUUsR0FBR0EsR0FBRzVHLEVBQUUrL0IsVUFBVSxJQUFJLElBQUlsNUIsRUFBRW5CLEVBQUVlLEVBQUVsRyxFQUFFd00sUUFBUSxHQUFHbEksRUFBRWUsRUFBRWdCLEVBQUVuSCxFQUFFc04sUUFBUSxHQUFHakcsRUFBRSxFQUFFQSxFQUFFOUcsRUFBRTQvQixXQUFXOTRCLEVBQUUsSUFBSSxJQUFJQyxFQUFFWCxFQUFFVSxFQUFFOUcsRUFBRWtnQyxZQUFZbDVCLEVBQUVGLEVBQUU5RyxFQUFFb2dDLFlBQVl4aEMsRUFBRXNJLEVBQUUsRUFBRUEsRUFBRXBHLEVBQUVvRyxJQUFJLENBQUMsSUFBSUMsRUFBRUgsRUFBRUUsRUFBRW5HLEVBQUUsS0FBS29HLEVBQUUsR0FBR0EsR0FBR25ILEVBQUVnZ0MsU0FBUyxJQUFJLElBQUk1NEIsRUFBRVAsRUFBRUssRUFBRTNHLEVBQUV3TSxRQUFRLEdBQUcxRixFQUFFeEMsRUFBRXNDLEVBQUVuSCxFQUFFaWdDLFdBQVczNEIsRUFBRUYsRUFBRUcsRUFBRSxFQUFFQSxFQUFFdkgsRUFBRWlnQyxhQUFhMTRCLEVBQUUsQ0FBQyxJQUFJLElBQUlDLEVBQUUvQyxFQUFFNEMsRUFBRUUsR0FBR0csRUFBRSxFQUFFQSxFQUFFMUgsRUFBRWtnQyxjQUFjeDRCLEVBQUUvQyxFQUFFb0MsRUFBRVcsSUFBSUYsRUFBRTNJLEVBQUV5SSxFQUFFSSxHQUFHSixHQUFHdEgsRUFBRWtnQyxlQUFlLE9BQU83L0IsRUFBRThNLFlBQVkxTixFQUFFVSxVQUFVODhCLGVBQWUsU0FBU3g5QixFQUFFYyxFQUFFUCxHQUFHVyxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsa0JBQWtCLElBQUksSUFBSWxCLEVBQUUwMkIsR0FBRy8xQixFQUFFMmdDLFFBQVEsV0FBVzNoQyxFQUFFSyxFQUFFeU4sT0FBT2hNLEVBQUVILEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVFwUCxFQUFFb0MsS0FBS3NPLFNBQVMxTyxFQUFFb04sUUFBUXJOLEVBQUVDLEVBQUV3TSxRQUFRaE0sRUFBRVQsRUFBRSxHQUFHOUIsRUFBRThCLEVBQUUsR0FBRzFCLEVBQUUwQixFQUFFLEdBQUdrRSxFQUFFeEUsRUFBRTYvQixVQUFVeC9CLEVBQUVMLEVBQUVxZ0MsYUFBYTU3QixFQUFFekUsRUFBRXNnQyxZQUFZemhDLEVBQUVtQixFQUFFaWdDLFdBQVd0N0IsRUFBRTNFLEVBQUUrL0IsU0FBU3BoQyxFQUFFcUIsRUFBRWdnQyxRQUFRbDdCLEVBQUU5RSxFQUFFa2dDLFlBQVl4N0IsRUFBRTFFLEVBQUUyL0IsVUFBVTU2QixFQUFFL0UsRUFBRTQvQixTQUFTNTZCLEVBQUVoRixFQUFFbWdDLGFBQWFoN0IsRUFBRW5GLEVBQUVvZ0MsWUFBWTk2QixFQUFFdEYsRUFBRTgvQixXQUFXdDZCLEVBQUVuRixFQUFFLEVBQUVMLEVBQUUwL0IsUUFBUVAsSUFBSXo1QixFQUFFakIsRUFBRSxFQUFFekUsRUFBRTAvQixRQUFRTCxLQUFLejVCLEVBQUUsaUJBQWlCTixFQUFFVSxFQUFFM0csRUFBRTBOLFFBQVEsR0FBRzNHLEVBQUVSLEVBQUV2RyxFQUFFME4sUUFBUSxHQUFHMU4sRUFBRTBOLFFBQVEsR0FBR3ZHLEVBQUVaLEVBQUV2RyxFQUFFME4sUUFBUSxHQUFHLEVBQUV0RyxFQUFFYixFQUFFLEVBQUV2RyxFQUFFME4sUUFBUSxHQUFHbkcsRUFBRW5ILEVBQUVzTixRQUFRLEdBQUdsRyxFQUFFakIsRUFBRW5HLEVBQUVzTixRQUFRLEdBQUd0TixFQUFFc04sUUFBUSxHQUFHbEksRUFBRWUsRUFBRW5HLEVBQUVzTixRQUFRLEdBQUcsRUFBRWpHLEVBQUVsQixFQUFFLEVBQUVuRyxFQUFFc04sUUFBUSxHQUFHaEcsRUFBRSxFQUFFQSxFQUFFdkMsSUFBSXVDLEVBQUUsSUFBSSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVuSSxJQUFJbUksRUFBRSxJQUFJLElBQUlFLEVBQUUsRUFBRUEsRUFBRXZDLElBQUl1QyxFQUFFLElBQUksSUFBSUMsRUFBRUQsRUFBRTFCLEVBQUU0QixFQUFFaEQsS0FBS0UsSUFBSSxFQUFFRixLQUFLZ0IsS0FBSytCLEVBQUVuQyxJQUFJcUMsRUFBRWpELEtBQUtHLElBQUlHLEdBQUdyRSxFQUFFOEcsR0FBR25DLEdBQUdzQyxFQUFFLEVBQUVBLEVBQUUzSSxJQUFJMkksRUFBRSxDQUFDLElBQUksSUFBSUMsRUFBRUQsRUFBRTVCLEVBQUU4QixFQUFFcEQsS0FBS0UsSUFBSSxFQUFFRixLQUFLZ0IsS0FBS21DLEVBQUVwQyxJQUFJdUMsRUFBRXRELEtBQUtHLElBQUlRLEdBQUdOLEVBQUU4QyxHQUFHcEMsR0FBR3lDLEVBQUUsRUFBRUMsRUFBRVQsRUFBRVMsRUFBRVIsSUFBSVEsRUFBRSxJQUFJLElBQUlDLEVBQUVELEVBQUU3QyxFQUFFbUMsRUFBRWEsRUFBRVIsRUFBRVEsRUFBRU4sSUFBSU0sRUFBRSxJQUFJLElBQUlHLEVBQUV2QixFQUFFRyxFQUFFRixFQUFFZ0IsRUFBRWhELEVBQUVtRCxFQUFFSyxFQUFFdEgsR0FBR1YsRUFBRSxFQUFFeUgsR0FBR3RKLEdBQUdpRyxFQUFFLEdBQUd1RCxFQUFFN0MsRUFBRW9DLElBQUkzSSxFQUFFb0ksRUFBRXVCLEVBQUUsRUFBRUEsRUFBRXpELElBQUl5RCxFQUFHWCxHQUFHOUcsRUFBRXFILEVBQUVyQixFQUFFeUIsR0FBR2hLLEVBQUU4SixFQUFFRSxHQUFHdkosRUFBRWdILEVBQUVlLEVBQUVYLEVBQUVjLEVBQUVWLEVBQUVjLEVBQUViLEVBQUVPLEdBQUdZLEVBQUUsT0FBT3ZJLEVBQUU4TixZQUFZMU4sRUFBRVUsVUFBVW05QixlQUFlLFNBQVM3OUIsRUFBRWMsRUFBRVAsR0FBRyxJQUFJLElBQUlYLEVBQUUwMkIsR0FBRy8xQixFQUFFMmdDLFFBQVEsV0FBVzNoQyxFQUFFSyxFQUFFeU4sT0FBT2hNLEVBQUV6QixFQUFFME4sUUFBUXhPLEVBQUV1QyxFQUFFLEdBQUdSLEVBQUVRLEVBQUUsR0FBR0MsRUFBRUQsRUFBRSxHQUFHdEMsRUFBRXNDLEVBQUUsR0FBR2xDLEVBQUUrQixLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRbkosRUFBRS9FLEVBQUVzTixRQUFRMU0sRUFBRW1FLEVBQUUsR0FBR0MsRUFBRUQsRUFBRSxHQUFHM0YsRUFBRTJGLEVBQUUsR0FBR0csRUFBRUgsRUFBRSxHQUFHN0YsRUFBRWdDLEtBQUtzTyxTQUFTMU8sRUFBRW9OLFFBQVE3SSxFQUFFdkUsRUFBRXdNLFFBQVFySSxFQUFFSSxFQUFFLEdBQUdDLEVBQUVELEVBQUUsR0FBR0UsRUFBRUYsRUFBRSxHQUFHSyxFQUFFTCxFQUFFLEdBQUdRLEVBQUV0RixFQUFFNi9CLFVBQVVyNkIsRUFBRXhGLEVBQUVtaEMsWUFBWXo3QixFQUFFMUYsRUFBRXFnQyxhQUFhejZCLEVBQUU1RixFQUFFc2dDLFlBQVl0NkIsRUFBRWhHLEVBQUVpZ0MsV0FBVzc1QixFQUFFcEcsRUFBRWloQyxRQUFRejZCLEVBQUV4RyxFQUFFKy9CLFNBQVN0NUIsRUFBRXpHLEVBQUVnZ0MsUUFBUXA1QixFQUFFNUcsRUFBRWtnQyxZQUFZcjVCLEVBQUU3RyxFQUFFZ2hDLFNBQVNuOEIsRUFBRTdFLEVBQUUyL0IsVUFBVTc0QixFQUFFOUcsRUFBRTQvQixTQUFTNzRCLEVBQUUvRyxFQUFFa2hDLFlBQVlsNkIsRUFBRWhILEVBQUVtZ0MsYUFBYWo1QixFQUFFbEgsRUFBRW9nQyxZQUFZajVCLEVBQUUzQixFQUFFLEVBQUV4RixFQUFFMC9CLFFBQVFvQixNQUFNMTVCLEVBQUUxQixFQUFFLEVBQUUxRixFQUFFMC9CLFFBQVFQLElBQUk5M0IsRUFBRXpCLEVBQUUsRUFBRTVGLEVBQUUwL0IsUUFBUUwsS0FBSy8zQixFQUFFLEVBQUVBLEVBQUVoQyxJQUFJZ0MsRUFBRSxJQUFJLElBQUlDLEVBQUUsRUFBRUEsRUFBRXZCLElBQUl1QixFQUFFLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFcEIsSUFBSW9CLEVBQUUsSUFBSSxJQUFJRSxFQUFFRixFQUFFTCxFQUFFUyxFQUFFeEQsS0FBS0UsSUFBSSxFQUFFRixLQUFLZ0IsS0FBS3NDLEVBQUVYLElBQUljLEVBQUV6RCxLQUFLRyxJQUFJc0MsR0FBR3JCLEVBQUVrQyxHQUFHWCxHQUFHZSxFQUFFLEVBQUVBLEVBQUV0QixJQUFJc0IsRUFBRSxJQUFJLElBQUlFLEVBQUVGLEVBQUVWLEVBQUVlLEVBQUUvRCxLQUFLRSxJQUFJLEVBQUVGLEtBQUtnQixLQUFLNEMsRUFBRWhCLElBQUlxQixFQUFFakUsS0FBS0csSUFBSU0sR0FBR2EsRUFBRXNDLEdBQUdoQixHQUFHdUIsRUFBRSxFQUFFQSxFQUFFOUIsSUFBSThCLEVBQUUsQ0FBQyxJQUFJLElBQUk4QyxFQUFFOUMsRUFBRWxCLEVBQUVtRSxFQUFFcEgsS0FBS0UsSUFBSSxFQUFFRixLQUFLZ0IsS0FBS2lHLEVBQUVuRSxJQUFJbUYsRUFBRWpJLEtBQUtHLElBQUl1QyxHQUFHbEIsRUFBRXlGLEdBQUduRSxHQUFHb0YsR0FBRyxFQUFFQyxHQUFHM0UsRUFBRTJFLEdBQUcxRSxJQUFJMEUsR0FBRyxJQUFJLElBQUkyRCxHQUFHM0QsR0FBR3hGLEVBQUVXLEVBQUU4RSxHQUFHckUsRUFBRXFFLEdBQUduRSxJQUFJbUUsR0FBRyxJQUFJLElBQUlHLEdBQUdILEdBQUd4RixFQUFFZ0IsRUFBRTRFLEdBQUdwQixFQUFFb0IsR0FBR1AsSUFBSU8sR0FBRyxJQUFJLElBQUlDLEdBQUd4TSxFQUFFaUgsRUFBRTdDLEVBQUU4SCxHQUFHMU4sRUFBRTJOLEdBQUc3SCxFQUFFaUksR0FBR1UsR0FBRzVJLEdBQUdjLEVBQUUsRUFBRTBLLElBQUluTCxHQUFHVyxFQUFFLEVBQUVpSCxJQUFJM0gsR0FBR1ksRUFBRSxHQUFHZ0gsR0FBRzFGLEVBQUVtRSxJQUFJbEcsRUFBRW9DLEVBQUVnRyxHQUFHLEVBQUVBLEdBQUczRyxJQUFJMkcsR0FBSWpCLElBQUkxTixFQUFFaU8sR0FBR1UsSUFBSTVPLEVBQUUyTyxHQUFHQyxJQUFJdk8sRUFBRVQsRUFBRStJLEVBQUVoSCxFQUFFa0gsRUFBRXpHLEVBQUUrRyxFQUFFdEosRUFBRStKLEVBQUVoQixHQUFHK0UsR0FBRyxPQUFPak4sRUFBRThOLFlBQVkxTixFQUFFVSxVQUFVKzhCLGdCQUFnQixTQUFTejlCLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUs4NEQsaUJBQWlCLENBQUNoNkQsRUFBRWMsR0FBRyxtQkFBbUIsSUFBSSxJQUFJbEIsRUFBRVcsRUFBRW1nQyxhQUFhbmhDLEVBQUVnQixFQUFFb2dDLFlBQVl0L0IsRUFBRWQsRUFBRXFnQyxhQUFhOWhDLEVBQUV5QixFQUFFc2dDLFlBQVloZ0MsRUFBRSxpQkFBaUJOLEVBQUU4L0IsV0FBVy8rQixFQUFFZzFCLEdBQUcvMUIsRUFBRTZnQyxZQUFZLFdBQVdyaUMsRUFBRXdCLEVBQUUwL0IsUUFBUUwsS0FBS3pnQyxFQUFFb0IsRUFBRTAvQixRQUFRUCxJQUFJMzZCLEVBQUU3RCxLQUFLaU8sV0FBV25QLEdBQUdZLEVBQUVNLEtBQUtpTyxXQUFXck8sR0FBR2tFLEVBQUUsRUFBRUEsRUFBRTNELElBQUkyRCxFQUFFLElBQUksSUFBSTVGLEVBQUV1RixLQUFLRSxJQUFJLEVBQUVGLEtBQUtnQixNQUFNeEcsRUFBRTZGLEdBQUdwRixJQUFJc0YsRUFBRVAsS0FBS0csSUFBSXZFLEVBQUUyL0IsV0FBVzMvQixFQUFFKy9CLFNBQVNuaEMsRUFBRTZGLEdBQUdwRixHQUFHVixFQUFFLEVBQUVBLEVBQUVKLElBQUlJLEVBQUUsSUFBSSxJQUFJbUcsRUFBRVYsS0FBS0UsSUFBSSxFQUFFRixLQUFLZ0IsTUFBTTVHLEVBQUVHLEdBQUdLLElBQUkwRixFQUFFTixLQUFLRyxJQUFJdkUsRUFBRTQvQixVQUFVNS9CLEVBQUVnZ0MsUUFBUXhoQyxFQUFFRyxHQUFHSyxHQUFHK0YsRUFBRSxFQUFFQSxFQUFFL0UsRUFBRWlnQyxhQUFhbDdCLEVBQUUsSUFBSSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVoRixFQUFFa2dDLGNBQWNsN0IsRUFBRSxDQUFDLElBQUksSUFBSUcsRUFBRSxFQUFFRyxFQUFFLEVBQUVBLEVBQUV0RixFQUFFNi9CLFlBQVl2NkIsRUFBRSxJQUFJLElBQUlFLEVBQUUzRyxFQUFFMkcsRUFBRWIsSUFBSWEsRUFBRSxJQUFJLElBQUlFLEVBQUVqQixFQUFFZSxFQUFFbkcsRUFBRVQsRUFBRWdILEVBQUVkLEVBQUVjLEVBQUVsQixJQUFJa0IsRUFBRSxDQUFDLElBQUlJLEVBQUVySCxFQUFFaUgsRUFBRTVHLEVBQUVSLEVBQUUyRyxHQUFHN0UsRUFBRWtFLEVBQUVwRixJQUFJa0csRUFBRUksRUFBRU0sRUFBRWpCLEdBQUcxRSxFQUFFakIsSUFBSWtHLEVBQUVFLEVBQUVJLEVBQUVaLEdBQUdSLEVBQUVwRixJQUFJa0csRUFBRVAsRUFBRVcsRUFBRU0sR0FBRzNGLEVBQUVqQixJQUFJa0csRUFBRU4sRUFBRVEsRUFBRUksR0FBRzdFLEVBQUU2QixJQUFJdUMsRUFBRVYsRUFBRTlGLEVBQUVvRyxFQUFFQyxHQUFHLE9BQU9qRSxFQUFFb00sWUFBWTFOLEVBQUVVLFVBQVVvOUIsZ0JBQWdCLFNBQVM5OUIsRUFBRWMsRUFBRVAsR0FBRyxJQUFJLElBQUlYLEVBQUVXLEVBQUVraEMsWUFBWWxpQyxFQUFFZ0IsRUFBRW1nQyxhQUFhci9CLEVBQUVkLEVBQUVvZ0MsWUFBWTdoQyxFQUFFeUIsRUFBRW1oQyxZQUFZN2dDLEVBQUVOLEVBQUVxZ0MsYUFBYXQvQixFQUFFZixFQUFFc2dDLFlBQVk5aEMsRUFBRXUzQixHQUFHLzFCLEVBQUU2Z0MsWUFBWSxXQUFXamlDLEVBQUVKLEVBQUVzTyxPQUFPdEksRUFBRWhHLEVBQUV1TyxRQUFRMU0sRUFBRW1FLEVBQUUsR0FBR0MsRUFBRUQsRUFBRSxHQUFHM0YsRUFBRTJGLEVBQUUsR0FBR0csRUFBRUgsRUFBRSxHQUFHN0YsRUFBRWdDLEtBQUtzTyxTQUFTMU8sRUFBRW9OLFFBQVE3SSxFQUFFdkUsRUFBRXdNLFFBQVFySSxFQUFFSSxFQUFFLEdBQUdDLEVBQUVELEVBQUUsR0FBR0UsRUFBRUYsRUFBRSxHQUFHSyxFQUFFTCxFQUFFLEdBQUdRLEVBQUUzRSxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRbkksRUFBRS9GLEVBQUVzTixRQUFRckgsRUFBRUYsRUFBRSxHQUFHSSxFQUFFSixFQUFFLEdBQUdRLEVBQUVSLEVBQUUsR0FBR1ksRUFBRVosRUFBRSxHQUFHZ0IsRUFBRXhHLEVBQUUwL0IsUUFBUW9CLE1BQU1yNkIsRUFBRXpHLEVBQUUwL0IsUUFBUUwsS0FBS3o0QixFQUFFNUcsRUFBRTAvQixRQUFRUCxJQUFJdDRCLEVBQUUsRUFBRUEsRUFBRXRJLElBQUlzSSxFQUFFLElBQUksSUFBSWhDLEVBQUVULEtBQUtFLElBQUksRUFBRUYsS0FBS2dCLE1BQU1vQixFQUFFSyxHQUFHeEgsSUFBSXlILEVBQUUxQyxLQUFLRyxJQUFJdkUsRUFBRWdoQyxVQUFVaGhDLEVBQUVpaEMsUUFBUXo2QixFQUFFSyxHQUFHeEgsR0FBRzBILEVBQUVGLEVBQUV4RyxFQUFFMkcsRUFBRSxFQUFFQSxFQUFFMUcsSUFBSTBHLEVBQUUsSUFBSSxJQUFJRSxFQUFFOUMsS0FBS0UsSUFBSSxFQUFFRixLQUFLZ0IsTUFBTXdCLEVBQUVJLEdBQUdoSSxJQUFJbUksRUFBRS9DLEtBQUtHLElBQUl2RSxFQUFFMi9CLFdBQVczL0IsRUFBRSsvQixTQUFTbjVCLEVBQUVJLEdBQUdoSSxHQUFHb0ksRUFBRUosRUFBRXZDLEVBQUVzQyxFQUFFTSxFQUFFLEVBQUVBLEVBQUV0RyxJQUFJc0csRUFBRSxJQUFJLElBQUlDLEVBQUVsRCxLQUFLRSxJQUFJLEVBQUVGLEtBQUtnQixNQUFNcUIsRUFBRVksR0FBR3ZHLElBQUl5RyxFQUFFbkQsS0FBS0csSUFBSXZFLEVBQUU0L0IsVUFBVTUvQixFQUFFZ2dDLFFBQVF2NUIsRUFBRVksR0FBR3ZHLEdBQUcwRyxFQUFFSCxFQUFFeEksRUFBRXVJLEVBQUVNLEVBQUUsRUFBRUEsRUFBRTFILEVBQUVpZ0MsYUFBYXY0QixFQUFFLElBQUksSUFBSUUsRUFBRUYsRUFBRS9DLEVBQUU2QyxFQUFFSyxFQUFFLEVBQUVBLEVBQUU3SCxFQUFFa2dDLGNBQWNyNEIsRUFBRSxDQUFDLElBQUksSUFBSUMsRUFBRSxFQUFFRSxFQUFFLEVBQUVBLEVBQUVoSSxFQUFFNi9CLFlBQVk3M0IsRUFBRSxJQUFJLElBQUlHLEVBQUVILEVBQUV0QyxFQUFFMkMsRUFBRUwsRUFBRXRELEVBQUU2RCxFQUFFMUQsRUFBRTBELEVBQUV6QixJQUFJeUIsRUFBRSxJQUFJLElBQUk4QyxHQUFHeEUsRUFBRTBCLEVBQUVsSixFQUFFbUgsR0FBR1osRUFBRXVDLEVBQUVxRCxFQUFFakQsRUFBRXhELEVBQUVzRCxFQUFFZ0UsRUFBRW5GLEVBQUVtRixFQUFFbEYsSUFBSWtGLEVBQUUsSUFBSSxJQUFJQyxJQUFJdEYsRUFBRXFGLEVBQUVyTixFQUFFNEgsR0FBR1osRUFBRXFGLEVBQUVrQixHQUFHRixFQUFFckgsRUFBRXdHLEVBQUUwRSxHQUFHNUksRUFBRTRJLEdBQUczSSxJQUFJMkksR0FBRyxDQUFDLElBQUkxRCxHQUFHMEQsR0FBRy9LLEVBQUVvSCxHQUFHekUsR0FBR3hDLEdBQUcrQixFQUFFNkksR0FBR3BQLEVBQUUyRixHQUFHTCxFQUFFa0csR0FBRzVFLEdBQUcvSSxFQUFFNk4sR0FBRzNFLEdBQUdqSixFQUFFZ0osRUFBRUMsR0FBR0MsRUFBRSxPQUFPdEosRUFBRTJPLFlBQVkxTixFQUFFVSxVQUFVaVcsZ0JBQWdCLFNBQVMzVyxFQUFFYyxFQUFFUCxHQUFHVyxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsbUJBQW1CLElBQUksSUFBSWxCLEVBQUVXLEVBQUVxZ0MsYUFBYXJoQyxFQUFFZ0IsRUFBRXNnQyxZQUFZeC9CLEVBQUVkLEVBQUV5Z0MsZUFBZWxpQyxFQUFFeUIsRUFBRTBnQyxjQUFjcGdDLEVBQUVOLEVBQUUwL0IsUUFBUUwsS0FBS3QrQixFQUFFZixFQUFFMC9CLFFBQVFQLElBQUkzZ0MsRUFBRXdCLEVBQUVrZ0MsWUFBWWxnQyxFQUFFaWdDLFdBQVdyaEMsRUFBRW0zQixHQUFHLzFCLEVBQUU0Z0MsU0FBU25oQyxFQUFFbU0sT0FBT3BILEVBQUU3RCxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRdE4sRUFBRU0sS0FBS3NPLFNBQVMxTyxFQUFFb04sUUFBUWxKLEVBQUU3RixFQUFFa08sT0FBT2pPLEVBQUUsRUFBRUEsRUFBRW1CLEVBQUU2L0IsWUFBWWhoQyxFQUFFLElBQUksSUFBSThGLEVBQUU5RixFQUFFWSxFQUFFc04sUUFBUSxHQUFHcE8sRUFBRUUsRUFBRUQsRUFBRW1PLFFBQVEsR0FBR2pJLEVBQUUsRUFBRUEsRUFBRTlFLEVBQUUyL0IsWUFBWTc2QixFQUFFLElBQUksSUFBSUosRUFBRS9GLEVBQUVtRyxFQUFFbEcsRUFBRW1PLFFBQVEsR0FBR2hJLEVBQUVELEVBQUU5RSxFQUFFbWdDLGFBQWE3L0IsRUFBRTBFLEVBQUUsRUFBRUEsRUFBRTNGLElBQUkyRixFQUFFLENBQUMsSUFBSUcsRUFBRUosRUFBRUMsRUFBRWxFLEVBQUUsS0FBS3FFLEVBQUUsR0FBR0EsR0FBR25GLEVBQUUrL0IsVUFBVSxJQUFJLElBQUl6NkIsRUFBRU4sRUFBRXpFLEVBQUV3TSxRQUFRLEdBQUd2SCxFQUFFYixFQUFFUSxFQUFFMUYsRUFBRXNOLFFBQVEsR0FBR3JILEVBQUUsRUFBRUEsRUFBRTFGLEVBQUU0L0IsV0FBV2w2QixFQUFFLElBQUksSUFBSUUsRUFBRWxCLEVBQUVnQixFQUFFOUcsRUFBRW1PLFFBQVEsR0FBRy9HLEVBQUVOLEVBQUUxRixFQUFFb2dDLFlBQVlyL0IsRUFBRXFGLEVBQUUsRUFBRUEsRUFBRXBILElBQUlvSCxFQUFFLENBQUMsSUFBSUksRUFBRVIsRUFBRUksRUFBRTdILEVBQUUsS0FBS2lJLEVBQUUsR0FBR0EsR0FBR3hHLEVBQUVnZ0MsU0FBUyxJQUFJLElBQUl2NUIsRUFBRW5CLEVBQUVjLEVBQUU3RixFQUFFd00sUUFBUSxHQUFHbkcsRUFBRXBCLEVBQUVnQixFQUFFeEcsRUFBRWlnQyxXQUFXcDVCLEVBQUVqQixFQUFFZixFQUFFNEIsRUFBRUssRUFBRSxFQUFFQSxFQUFFOUcsRUFBRWlnQyxhQUFhbjVCLEVBQUUsQ0FBQyxJQUFJLElBQUlDLEVBQUV2QyxFQUFFb0MsRUFBRUUsR0FBR0UsRUFBRSxFQUFFQSxFQUFFeEksSUFBSXdJLEVBQUV2QyxFQUFFb0MsRUFBRUcsSUFBSUQsRUFBRTFHLEVBQUV3RSxFQUFFbUMsR0FBR0gsR0FBR3JJLEVBQUVxRyxHQUFHckcsSUFBSSxPQUFPSSxFQUFFdU8sWUFBWTFOLEVBQUVVLFVBQVVnOUIsd0JBQXdCLFNBQVMxOUIsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLDJCQUEyQixJQUFJLElBQUlsQixFQUFFMDJCLEdBQUcvMUIsRUFBRTJnQyxRQUFRLFdBQVczaEMsRUFBRUssRUFBRXlOLE9BQU9oTSxFQUFFekIsRUFBRTBOLFFBQVF4TyxFQUFFdUMsRUFBRSxHQUFHUixFQUFFUSxFQUFFLEdBQUdDLEVBQUVELEVBQUUsR0FBR3RDLEVBQUVtQyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRL08sRUFBRWEsRUFBRXNOLFFBQVF2SSxFQUFFNUYsRUFBRSxHQUFHeUIsRUFBRXpCLEVBQUUsR0FBRzZGLEVBQUU3RixFQUFFLEdBQUdDLEVBQUU4QixLQUFLc08sU0FBUzFPLEVBQUVvTixRQUFRaEosRUFBRXBFLEVBQUV3TSxRQUFRcE8sRUFBRWdHLEVBQUUsR0FBR0csRUFBRUgsRUFBRSxHQUFHRCxFQUFFQyxFQUFFLEdBQUdJLEVBQUUvRSxFQUFFNi9CLFVBQVU3NkIsRUFBRWhGLEVBQUVxZ0MsYUFBYWw3QixFQUFFbkYsRUFBRXNnQyxZQUFZaDdCLEVBQUV0RixFQUFFaWdDLFdBQVd6NkIsRUFBRXhGLEVBQUUrL0IsU0FBU3I2QixFQUFFMUYsRUFBRWdnQyxRQUFRcDZCLEVBQUU1RixFQUFFa2dDLFlBQVlsNkIsRUFBRWhHLEVBQUUyL0IsVUFBVXY1QixFQUFFcEcsRUFBRTQvQixTQUFTcDVCLEVBQUV4RyxFQUFFbWdDLGFBQWExNUIsRUFBRXpHLEVBQUVvZ0MsWUFBWXg1QixFQUFFNUIsRUFBRSxFQUFFaEYsRUFBRTAvQixRQUFRUCxJQUFJdDRCLEVBQUUxQixFQUFFLEVBQUVuRixFQUFFMC9CLFFBQVFMLEtBQUt4NkIsRUFBRWUsRUFBRU4sRUFBRXdCLEVBQUUsRUFBRUEsRUFBRS9CLElBQUkrQixFQUFFLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFekIsSUFBSXlCLEVBQUUsSUFBSSxJQUFJQyxFQUFFLEVBQUVBLEVBQUV4QixJQUFJd0IsRUFBRSxJQUFJLElBQUlFLEVBQUVGLEVBQUVKLEVBQUVPLEVBQUUvQyxLQUFLRSxJQUFJLEVBQUVGLEtBQUtnQixLQUFLOEIsRUFBRVYsSUFBSVksRUFBRWhELEtBQUtHLElBQUl5QixHQUFHaEIsRUFBRWtDLEdBQUdWLEdBQUdhLEVBQUUsRUFBRUEsRUFBRTNCLElBQUkyQixFQUFFLENBQUMsSUFBSSxJQUFJQyxFQUFFRCxFQUFFUixFQUFFVSxFQUFFbkQsS0FBS0UsSUFBSSxFQUFFRixLQUFLZ0IsS0FBS2tDLEVBQUViLElBQUllLEVBQUVwRCxLQUFLRyxJQUFJNkIsR0FBR2pCLEVBQUVtQyxHQUFHYixHQUFHaUIsRUFBRSxFQUFFRSxFQUFFVCxFQUFFUyxFQUFFUixJQUFJUSxFQUFFLElBQUksSUFBSUMsRUFBRUQsRUFBRXBCLEVBQUVVLEVBQUVZLEVBQUVQLEVBQUVPLEVBQUVOLElBQUlNLEVBQUUsSUFBSSxJQUFJRSxFQUFFeEQsRUFBRXNDLEVBQUV6RyxFQUFFdUgsRUFBRW5ELEVBQUVxRCxFQUFFSyxFQUFFeEosR0FBR3FHLEVBQUUsRUFBRTZDLEdBQUcvQyxHQUFHSyxFQUFFLEdBQUcyQyxFQUFFckIsRUFBRWEsSUFBSTVDLEVBQUVxQyxFQUFFc0IsRUFBRSxFQUFFQSxFQUFFeEQsSUFBSXdELEVBQUdYLEdBQUdsSixFQUFFd0osR0FBR2pCLEVBQUVsQyxFQUFFd0QsSUFBSXhKLEVBQUVzSixFQUFFRSxHQUFHckosRUFBRVQsRUFBRXVJLEVBQUV4RyxFQUFFMEcsRUFBRWpHLEVBQUVzRyxFQUFFTixHQUFHVyxFQUFFLE9BQU9ySSxFQUFFOE4sWUFBWTFOLEVBQUVVLFVBQVVpOUIseUJBQXlCLFNBQVMzOUIsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLDRCQUE0QixJQUFJLElBQUlsQixFQUFFVyxFQUFFbWdDLGFBQWFuaEMsRUFBRWdCLEVBQUVvZ0MsWUFBWXQvQixFQUFFZCxFQUFFcWdDLGFBQWE5aEMsRUFBRXlCLEVBQUVzZ0MsWUFBWWhnQyxFQUFFeTFCLEdBQUcvMUIsRUFBRTZnQyxZQUFZLFdBQVc5L0IsRUFBRWYsRUFBRTAvQixRQUFRTCxLQUFLN2dDLEVBQUV3QixFQUFFMC9CLFFBQVFQLElBQUl2Z0MsRUFBRW9CLEVBQUVrZ0MsWUFBWWxnQyxFQUFFaWdDLFdBQVd6N0IsRUFBRTdELEtBQUtpTyxXQUFXblAsR0FBR1ksRUFBRU0sS0FBS2lPLFdBQVdyTyxHQUFHa0UsRUFBRSxFQUFFQSxFQUFFM0QsSUFBSTJELEVBQUUsSUFBSSxJQUFJNUYsRUFBRXVGLEtBQUtFLElBQUksRUFBRUYsS0FBS2dCLE1BQU01RyxFQUFFaUcsR0FBR3BGLElBQUlzRixFQUFFUCxLQUFLRyxJQUFJdkUsRUFBRTIvQixXQUFXMy9CLEVBQUUrL0IsU0FBU3ZoQyxFQUFFaUcsR0FBR3BGLEdBQUdWLEVBQUUsRUFBRUEsRUFBRUosSUFBSUksRUFBRSxJQUFJLElBQUltRyxFQUFFVixLQUFLRSxJQUFJLEVBQUVGLEtBQUtnQixNQUFNckUsRUFBRXBDLEdBQUdLLElBQUkwRixFQUFFTixLQUFLRyxJQUFJdkUsRUFBRTQvQixVQUFVNS9CLEVBQUVnZ0MsUUFBUWovQixFQUFFcEMsR0FBR0ssR0FBRytGLEVBQUUsRUFBRUEsRUFBRS9FLEVBQUVrZ0MsY0FBY243QixFQUFFLENBQUMsSUFBSSxJQUFJQyxFQUFFWixLQUFLeTFELE1BQU05MEQsRUFBRW5HLEdBQUd1RyxFQUFFSixFQUFFbkcsRUFBRTBHLEVBQUUsRUFBRUUsRUFBRSxFQUFFQSxFQUFFeEYsRUFBRTYvQixZQUFZcjZCLEVBQUUsSUFBSSxJQUFJRSxFQUFFN0csRUFBRTZHLEVBQUVmLElBQUllLEVBQUUsSUFBSSxJQUFJRSxFQUFFbkIsRUFBRWlCLEVBQUVyRyxFQUFFYixFQUFFd0gsRUFBRWxCLEVBQUVrQixFQUFFdEIsSUFBSXNCLEVBQUUsQ0FBQyxJQUFJSSxFQUFFekgsRUFBRXFILEVBQUVoSCxFQUFFK0IsRUFBRXVFLEdBQUdkLEVBQUVwRixJQUFJb0csRUFBRUksRUFBRVEsRUFBRXBCLEdBQUczRSxFQUFFakIsSUFBSW9HLEVBQUVFLEVBQUVNLEVBQUVqQixHQUFHekUsRUFBRXNDLElBQUkwQyxFQUFFYixFQUFFOUYsRUFBRXFHLEVBQUVHLEdBQUcsT0FBTzdFLEVBQUU2TSxZQUFZMU4sRUFBRVUsVUFBVWdRLEtBQUssU0FBUzFRLEVBQUVjLEdBQUcsT0FBT0ksS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxRQUFRd2tDLEdBQUd0akMsS0FBS2lPLFdBQVduUCxHQUFHYyxJQUFJZCxFQUFFVSxVQUFVd1EsSUFBSSxTQUFTbFIsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxPQUFPLElBQUlKLEVBQUVrQixFQUFFc0YsS0FBSSxTQUFTdEYsRUFBRVAsR0FBRyxPQUFPTyxFQUFFLEdBQUdkLEVBQUV5TSxNQUFNbE0sR0FBR08sRUFBRSxNQUFLdkIsRUFBRXVCLEVBQUVzRixLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUUsTUFBS3FCLEVBQUVILEtBQUtpTyxXQUFXblAsR0FBR2xCLEVBQUV3M0IsR0FBRzEyQixFQUFFSSxFQUFFbU0sT0FBTyxJQUFJNUwsR0FBR3pCLEVBQUV1TyxPQUFPa0QsS0FBS2hRLEdBQUcsSUFBSSxJQUFJTSxFQUFFLEVBQUVBLEVBQUViLEVBQUV3TSxLQUFLM0wsSUFBSSxDQUFDLElBQUlTLEVBQUVELEVBQUVtTSxXQUFXM00sR0FBRzlCLEVBQUV1QyxFQUFFOEUsS0FBSSxTQUFTcEcsRUFBRWMsR0FBRyxPQUFPZCxFQUFFVCxFQUFFdUIsTUFBS2hDLEVBQUVxRSxJQUFJeEIsTUFBTTdDLEVBQUUsQ0FBQ3VDLEVBQUUxQixJQUFJZ0MsTUFBTU4sRUFBRUMsSUFBSStFLE9BQU90SCxJQUFJLE9BQU9ELEVBQUU0TyxZQUFZMU4sRUFBRVUsVUFBVXNTLFVBQVUsU0FBU2hULEVBQUVjLEdBQUdJLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsYUFBYSxJQUFJLElBQUlPLEVBQUUsSUFBSVUsTUFBTWpCLEVBQUV1TSxNQUFNM00sRUFBRSxFQUFFQSxFQUFFVyxFQUFFNkIsT0FBT3hDLElBQUlXLEVBQUVYLEdBQUdJLEVBQUV5TSxNQUFNM0wsRUFBRWxCLElBQUksSUFBSUwsRUFBRTJCLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVE3TSxFQUFFaTFCLEdBQUcvMUIsRUFBRVAsRUFBRW1NLE9BQU9yTixFQUFFb0MsS0FBS2lPLFdBQVduUCxHQUFHLElBQUlKLEVBQUUsRUFBRUEsRUFBRUksRUFBRXdNLE9BQU81TSxFQUFFLENBQUMsSUFBSSxJQUFJaUIsRUFBRS9CLEVBQUUwTyxXQUFXNU4sR0FBRzBCLEVBQUUsSUFBSUwsTUFBTUosRUFBRXVCLFFBQVFyRCxFQUFFLEVBQUVBLEVBQUV1QyxFQUFFYyxPQUFPckQsSUFBSXVDLEVBQUV2QyxHQUFHOEIsRUFBRUMsRUFBRS9CLElBQUksSUFBSUksRUFBRWtDLEVBQUVrTSxXQUFXak0sR0FBR0QsRUFBRWdNLE9BQU9sTyxHQUFHSSxFQUFFSyxHQUFHLE9BQU95QixFQUFFcU0sWUFBWTFOLEVBQUVVLFVBQVVpUSxPQUFPLFNBQVMzUSxFQUFFYyxFQUFFUCxHQUFHVyxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsVUFBVSxJQUFJbEIsRUFBRUksRUFBRXlNLE1BQU12RyxRQUFRM0csRUFBRTJCLEtBQUtzTyxTQUFTMU8sRUFBRW9OLFFBQVF0TyxFQUFFVyxHQUFHaEIsRUFBRTZDLE9BQU8sSUFBSSxJQUFJZixFQUFFaTFCLEdBQUcxMkIsRUFBRUksRUFBRW1NLE9BQU9yTixFQUFFb0MsS0FBS2lPLFdBQVduUCxHQUFHYSxFQUFFLEVBQUVBLEVBQUVRLEVBQUVtTCxPQUFPM0wsRUFBRSxDQUFDLElBQUlTLEVBQUVELEVBQUVtTSxXQUFXM00sR0FBRzlCLEVBQUV1QyxFQUFFNEUsUUFBUW5ILEVBQUV3QixHQUFHaEIsRUFBRStCLEVBQUVmLElBQUksSUFBSXBCLEVBQUVMLEVBQUV5TyxXQUFXeE8sR0FBR3NDLEVBQUVnTSxPQUFPeE0sR0FBRy9CLEVBQUV1TyxPQUFPbE8sR0FBRyxPQUFPa0MsRUFBRXFNLFlBQVkxTixFQUFFVSxVQUFVMlcsZUFBZSxTQUFTclgsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxHQUFHLGtCQUFrQixJQUFJSixFQUFFa0IsRUFBRW9ILFFBQU8sU0FBU2xJLEVBQUVjLEdBQUcsT0FBT2QsRUFBRWMsS0FBSXZCLEVBQUV5NkIsR0FBR2g2QixFQUFFeU0sTUFBTTNMLEVBQUVsQixHQUFHeUIsRUFBRTQ0QixHQUFHMTZCLEVBQUU2QyxPQUFPdEIsRUFBRXNCLFFBQVF0RCxFQUFFbzdCLEdBQUdsNkIsRUFBRXlNLE1BQU0zTCxFQUFFbEIsR0FBR2lCLEVBQUVzNUIsR0FBRzU1QixFQUFFTyxFQUFFc0IsUUFBUWQsRUFBRTg0QixHQUFHdDdCLEVBQUV5QixFQUFFTyxFQUFFc0IsUUFBUSxPQUFPcEMsRUFBRTJPLFFBQVFwUCxHQUFHeVQsVUFBVTNSLEdBQUdzTixRQUFRN1AsR0FBR29ILE1BQU1yRixFQUFFUyxJQUFJdEIsRUFBRVUsVUFBVTRXLGVBQWUsU0FBU3RYLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUs4NEQsaUJBQWlCLENBQUNoNkQsR0FBRyxrQkFBa0IsSUFBSUosRUFBRWtCLEVBQUVvSCxRQUFPLFNBQVNsSSxFQUFFYyxHQUFHLE9BQU9kLEVBQUVjLEtBQUl2QixFQUFFLENBQUMsQ0FBQyxFQUFFLElBQUlBLEVBQUU4QyxLQUFLVixNQUFNcEMsRUFBRWdCLEdBQUcsSUFBSSxJQUFJYyxFQUFFLEVBQUVQLEVBQUVzQixPQUFPZixFQUFFckIsRUFBRXlNLE1BQU1ySyxTQUFTZixFQUFFOUIsRUFBRThDLEtBQUssQ0FBQyxFQUFFLElBQUksSUFBSXZELEVBQUVrQixFQUFFa1IsSUFBSTNSLEdBQUdzQixFQUFFbTVCLEdBQUdsN0IsRUFBRTJOLE1BQU0zTCxFQUFFbEIsR0FBRSxHQUFJMEIsRUFBRTI0QixHQUFHcDVCLEVBQUV1QixPQUFPdEIsRUFBRXNCLFFBQU8sR0FBSXJELEVBQUVtN0IsR0FBR3A3QixFQUFFMk4sTUFBTTNMLEVBQUVsQixHQUFFLEdBQUksT0FBT2QsRUFBRTZQLFFBQVE5TixHQUFHbVMsVUFBVTFSLEdBQUdxTixRQUFRNVAsSUFBSWlCLEVBQUVVLFVBQVV1VyxLQUFLLFNBQVNqWCxFQUFFYyxFQUFFUCxHQUFHVyxLQUFLODRELGlCQUFpQmg2RCxFQUFFLFFBQVEsSUFBSSxJQUFJSixFQUFFa0IsRUFBRTQvQixhQUFhbmhDLEVBQUV1QixFQUFFNi9CLFlBQVl0L0IsRUFBRVAsRUFBRWtnQyxlQUFlbGlDLEVBQUVnQyxFQUFFbWdDLGNBQWNwZ0MsRUFBRUMsRUFBRWdnQyxzQkFBc0J4L0IsRUFBRVIsRUFBRWlnQyxxQkFBcUJoaUMsRUFBRStCLEVBQUVtL0IsUUFBUVAsSUFBSXZnQyxFQUFFMkIsRUFBRW0vQixRQUFRTCxLQUFLNzZCLEVBQUUsUUFBUXhFLEVBQUVpSSxPQUFPb3NELGtCQUFrQnBzRCxPQUFPNnhELGtCQUFrQno1RCxFQUFFTSxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRbEosRUFBRXN4QixHQUFHeDFCLEVBQUVxZ0MsU0FBU25oQyxFQUFFbU0sT0FBTy9NLEVBQUU0RixFQUFFcUksT0FBT25JLEVBQUVwRSxFQUFFcWdDLFNBQVMsR0FBR3JnQyxFQUFFcWdDLFNBQVMsR0FBR3JnQyxFQUFFcWdDLFNBQVMsR0FBR2ppQyxFQUFFNEIsRUFBRXFnQyxTQUFTLEdBQUdyZ0MsRUFBRXFnQyxTQUFTLEdBQUc5N0IsRUFBRXZFLEVBQUVxZ0MsU0FBUyxHQUFHbDhCLEVBQUUsRUFBRUEsRUFBRW5FLEVBQUVzL0IsWUFBWW43QixFQUFFLElBQUksSUFBSUssRUFBRUwsRUFBRUMsRUFBRUssRUFBRU4sRUFBRWpGLEVBQUVzTixRQUFRLEdBQUc1SCxFQUFFLEVBQUVBLEVBQUU1RSxFQUFFMC9CLGFBQWE5NkIsRUFBRSxJQUFJLElBQUlHLEVBQUUsRUFBRUEsRUFBRS9FLEVBQUVvL0IsWUFBWXI2QixFQUFFLElBQUksSUFBSUUsRUFBRUYsRUFBRWpHLEVBQUViLEVBQUVrSCxFQUFFdEIsS0FBS0UsSUFBSSxFQUFFa0IsR0FBR0ksRUFBRXhCLEtBQUtHLElBQUloRSxFQUFFdy9CLFNBQVN6L0IsRUFBRWtGLEdBQUdRLEVBQUVqQixFQUFFTyxFQUFFM0csRUFBRXlILEVBQUUsRUFBRUEsRUFBRTdGLEVBQUVxL0IsV0FBV3g1QixFQUFFLENBQUMsSUFBSSxJQUFJSSxFQUFFSixFQUFFcEgsRUFBRUosRUFBRTZILEVBQUVyQyxLQUFLRSxJQUFJLEVBQUVrQyxHQUFHSSxFQUFFeEMsS0FBS0csSUFBSWhFLEVBQUV5L0IsUUFBUWovQixFQUFFeUYsR0FBR0ssRUFBRXJDLEVBQUVLLEVBQUUsRUFBRWlDLEVBQUUsRUFBRUMsRUFBRXJCLEVBQUVxQixFQUFFbkIsRUFBRW1CLEdBQUdqRyxFQUFFLENBQUMsSUFBSSxJQUFJa0csRUFBRWhDLEVBQUUrQixFQUFFdEgsRUFBRXNOLFFBQVEsR0FBRzdGLEVBQUVULEVBQUVTLEVBQUVOLEVBQUVNLEdBQUczSSxFQUFFLENBQUMsSUFBSTRJLEVBQUU5RyxFQUFFMkcsRUFBRUUsRUFBRXpILEVBQUVzTixRQUFRLEdBQUc1SCxHQUFHLFFBQVFuRixHQUFHbUgsRUFBRU4sRUFBRUEsRUFBRU0sRUFBRSxRQUFRbkgsSUFBSTZFLEdBQUdzQyxFQUFFTCxLQUFLLEdBQUdKLE1BQU1HLEdBQUcsTUFBTWhJLEVBQUVtSCxFQUFFSSxFQUFFdEIsRUFBRUssR0FBRyxRQUFRbkYsRUFBRTZFLEVBQUVpQyxFQUFFRCxFQUFFLE9BQU9wQyxFQUFFMEksWUFBWTFOLEVBQUVVLFVBQVVxVyxRQUFRLFNBQVMvVyxFQUFFYyxHQUFHLE9BQU9JLEtBQUsrVixLQUFLalgsRUFBRWMsRUFBRSxRQUFRZCxFQUFFVSxVQUFVNDVELGlCQUFpQixTQUFTdDZELEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxFQUFFKzFCLEdBQUd4MUIsRUFBRXFnQyxTQUFTLFNBQVN2aEMsRUFBRWtCLEVBQUU0L0IsYUFBYW5oQyxFQUFFdUIsRUFBRTYvQixZQUFZdC9CLEVBQUVQLEVBQUVrZ0MsZUFBZWxpQyxFQUFFZ0MsRUFBRW1nQyxjQUFjcGdDLEVBQUVDLEVBQUVnZ0Msc0JBQXNCeC9CLEVBQUVSLEVBQUVpZ0MscUJBQXFCaGlDLEVBQUUrQixFQUFFbS9CLFFBQVFQLElBQUl2Z0MsRUFBRTJCLEVBQUVtL0IsUUFBUUwsS0FBSzc2QixFQUFFN0QsS0FBS2lPLFdBQVduUCxHQUFHWSxFQUFFLEVBQUVBLEVBQUVFLEVBQUVzL0IsWUFBWXgvQixFQUFFLElBQUksSUFBSW9FLEVBQUUsRUFBRUEsRUFBRWxFLEVBQUUwL0IsYUFBYXg3QixFQUFFLElBQUksSUFBSTVGLEVBQUUsRUFBRUEsRUFBRTBCLEVBQUVvL0IsWUFBWTlnQyxFQUFFLENBQUMsSUFBSSxJQUFJOEYsRUFBRTlGLEVBQUVRLEVBQUViLEVBQUVHLEVBQUVnRyxFQUFFaEcsRUFBRSxHQUFHQSxHQUFHbUMsRUFBRSxJQUFJLElBQUlnRSxFQUFFVixLQUFLRyxJQUFJaEUsRUFBRXcvQixTQUFTei9CLEVBQUVxRSxHQUFHRCxFQUFFLEVBQUVBLEVBQUVuRSxFQUFFcS9CLFdBQVdsN0IsRUFBRSxDQUFDLElBQUksSUFBSUssRUFBRUwsRUFBRTFGLEVBQUVKLEVBQUVvRyxFQUFFRCxFQUFFQyxFQUFFLEdBQUdBLEdBQUd6RyxFQUFFLElBQUksSUFBSTRHLEVBQUVmLEtBQUtHLElBQUloRSxFQUFFeS9CLFFBQVFqL0IsRUFBRWdFLEdBQUdPLEVBQUUyQyxPQUFPb3NELGtCQUFrQjd1RCxHQUFHLEVBQUVFLEVBQUUvRyxFQUFFK0csRUFBRVosRUFBRVksR0FBRzVFLEVBQUUsSUFBSSxJQUFJOEUsRUFBRUYsRUFBRWYsRUFBRXFCLEVBQUVoQixFQUFFZ0IsRUFBRWIsRUFBRWEsR0FBR3pILEVBQUUsQ0FBQyxJQUFJNkgsRUFBRUosRUFBRWpCLEVBQUV5QixFQUFFaEMsRUFBRXBGLElBQUlpQixFQUFFcUYsRUFBRU0sRUFBRXZCLEdBQUcrQixFQUFFbEIsSUFBSUEsRUFBRWtCLEVBQUVoQixFQUFFSSxFQUFFN0UsRUFBRXFGLEdBQUdwRyxFQUFFNEMsSUFBSTRDLEVBQUVuRixFQUFFeEIsRUFBRTZGLEVBQUVELElBQUksT0FBT3pFLEVBQUVtTixZQUFZMU4sRUFBRVUsVUFBVXE5QixnQkFBZ0IsU0FBUy85QixFQUFFYyxFQUFFUCxFQUFFWCxHQUFHc0IsS0FBSzg0RCxpQkFBaUIsQ0FBQ2w1RCxFQUFFUCxHQUFHLG1CQUFtQixJQUFJLElBQUloQixFQUFFMkIsS0FBS281RCxpQkFBaUJ4NUQsRUFBRWxCLEdBQUd5QixFQUFFekIsRUFBRThnQyxhQUFhNWhDLEVBQUVjLEVBQUUrZ0MsWUFBWTkvQixFQUFFakIsRUFBRW9oQyxlQUFlMS9CLEVBQUUxQixFQUFFcWhDLGNBQWNsaUMsRUFBRWEsRUFBRWtoQyxzQkFBc0IzaEMsRUFBRVMsRUFBRW1oQyxxQkFBcUJoOEIsRUFBRTVGLEVBQUUsRUFBRVMsRUFBRXFnQyxRQUFRTCxLQUFLaC9CLEVBQUU3QixFQUFFLEVBQUVhLEVBQUVxZ0MsUUFBUVAsSUFBSTE2QixFQUFFc3hCLEdBQUd4MUIsRUFBRTJMLE1BQU0sV0FBV3JOLEVBQUU4QixLQUFLaU8sV0FBVzVQLEdBQUcyRixFQUFFaEUsS0FBS2lPLFdBQVduUCxHQUFHZCxFQUFFLEVBQUVBLEVBQUVVLEVBQUV3Z0MsWUFBWWxoQyxFQUFFLElBQUksSUFBSW1HLEVBQUUsRUFBRUEsRUFBRXpGLEVBQUU0Z0MsYUFBYW43QixFQUFFLElBQUksSUFBSUosRUFBRSxFQUFFQSxFQUFFckYsRUFBRTBnQyxXQUFXcjdCLEVBQUUsSUFBSSxJQUFJSyxFQUFFLEVBQUVBLEVBQUUxRixFQUFFMmdDLFVBQVVqN0IsRUFBRSxDQUFDLElBQUksSUFBSUMsRUFBRU4sRUFBRXJFLEVBQUU4RSxFQUFFSixFQUFFUCxFQUFFYyxFQUFFLEVBQUVFLEVBQUUsRUFBRUEsRUFBRWhILEVBQUVnSCxHQUFHbEYsRUFBRSxDQUFDLElBQUlvRixHQUFHVixFQUFFUSxHQUFHMUUsRUFBRSxLQUFLNEUsRUFBRSxHQUFHQSxHQUFHckcsRUFBRXNnQyxXQUFXdjdCLEtBQUs4SSxNQUFNeEgsS0FBS0EsR0FBRyxJQUFJLElBQUlFLEVBQUUsRUFBRUEsRUFBRWhILEVBQUVnSCxHQUFHN0UsRUFBRSxDQUFDLElBQUlpRixHQUFHYixFQUFFUyxHQUFHckgsRUFBRSxLQUFLeUgsRUFBRSxHQUFHQSxHQUFHM0csRUFBRXVnQyxVQUFVeDdCLEtBQUs4SSxNQUFNbEgsS0FBS0EsR0FBRyxDQUFDLElBQUlJLEVBQUU1SCxFQUFFSSxFQUFFLEVBQUVDLEVBQUVPLElBQUlULEVBQUUrRyxFQUFFTSxFQUFFbEIsS0FBS1UsRUFBRTVHLEVBQUVnSCxFQUFFLEVBQUUsRUFBSyxJQUFJUSxJQUFFZCxHQUFHWCxFQUFFdkYsSUFBSVQsRUFBRStHLEVBQUVNLEVBQUVsQixHQUFHc0IsS0FBSTNCLEVBQUU3QixJQUFJMEMsRUFBRTNHLEVBQUUrRixFQUFFSyxFQUFFRCxHQUFHLE9BQU9MLEVBQUUwSSxZQUFZMU4sRUFBRVUsVUFBVXM5QixnQkFBZ0IsU0FBU2grQixFQUFFYyxFQUFFUCxHQUFHVyxLQUFLODRELGlCQUFpQixDQUFDaDZELEVBQUVjLEdBQUcsbUJBQW1CLElBQUksSUFBSWxCLEVBQUVXLEVBQUVtZ0MsYUFBYW5oQyxFQUFFZ0IsRUFBRW9nQyxZQUFZdC9CLEVBQUVkLEVBQUVxZ0MsYUFBYTloQyxFQUFFeUIsRUFBRXNnQyxZQUFZaGdDLEVBQUVOLEVBQUV5Z0MsZUFBZTEvQixFQUFFZixFQUFFMGdDLGNBQWNsaUMsRUFBRXdCLEVBQUV1Z0Msc0JBQXNCM2hDLEVBQUVvQixFQUFFd2dDLHFCQUFxQmg4QixFQUFFNUYsRUFBRSxFQUFFb0IsRUFBRTAvQixRQUFRTCxLQUFLaC9CLEVBQUU3QixFQUFFLEVBQUV3QixFQUFFMC9CLFFBQVFQLElBQUkxNkIsRUFBRXN4QixHQUFHeDFCLEVBQUUyTCxNQUFNLFdBQVdyTixFQUFFLEdBQUdpQyxFQUFFdkMsR0FBR29HLEVBQUVoRSxLQUFLaU8sV0FBV25QLEdBQUdkLEVBQUUsRUFBRUEsRUFBRXFCLEVBQUU2L0IsWUFBWWxoQyxFQUFFLElBQUksSUFBSW1HLEVBQUUsRUFBRUEsRUFBRTlFLEVBQUVpZ0MsYUFBYW43QixFQUFFLElBQUksSUFBSUosRUFBRSxFQUFFQSxFQUFFMUUsRUFBRSsvQixXQUFXcjdCLEVBQUUsSUFBSSxJQUFJSyxFQUFFLEVBQUVBLEVBQUUvRSxFQUFFZ2dDLFVBQVVqN0IsRUFBRSxDQUFDLElBQUksSUFBSUMsRUFBRU4sRUFBRXJFLEVBQUU4RSxFQUFFSixFQUFFUCxFQUFFYyxFQUFFLEVBQUVFLEVBQUUsRUFBRUEsRUFBRWhILEVBQUVnSCxHQUFHbEYsRUFBRSxDQUFDLElBQUlvRixHQUFHVixFQUFFUSxHQUFHbkcsRUFBRSxLQUFLcUcsRUFBRSxHQUFHQSxHQUFHMUYsRUFBRTIvQixXQUFXdjdCLEtBQUs4SSxNQUFNeEgsS0FBS0EsR0FBRyxJQUFJLElBQUlFLEVBQUUsRUFBRUEsRUFBRWhILEVBQUVnSCxHQUFHN0UsRUFBRSxDQUFDLElBQUlpRixHQUFHYixFQUFFUyxHQUFHNUcsRUFBT2dILEVBQUUsR0FBR0EsR0FBR2hHLEVBQUU0L0IsVUFBVXg3QixLQUFLOEksTUFBTWxILEtBQUtBLElBQUdWLEdBQUdYLEVBQUV2RixJQUFJVCxFQUFFK0csRUFBRU0sRUFBRWxCLEtBQUlMLEVBQUU3QixJQUFJMEMsRUFBRXpHLEVBQUVGLEVBQUUrRixFQUFFSyxFQUFFRCxHQUFHLE9BQU9MLEVBQUUwSSxZQUFZMU4sRUFBRVUsVUFBVTY1RCxPQUFPLFNBQVN2NkQsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxVQUFVLElBQUksSUFBSUosRUFBRWtCLEVBQUUyZ0MsWUFBWWxpQyxFQUFFdUIsRUFBRTQvQixhQUFhci9CLEVBQUVQLEVBQUU2L0IsWUFBWTdoQyxFQUFFZ0MsRUFBRThnQyxjQUFjL2dDLEVBQUVDLEVBQUVrZ0MsZUFBZTEvQixFQUFFUixFQUFFbWdDLGNBQWNsaUMsRUFBRStCLEVBQUU2Z0MscUJBQXFCeGlDLEVBQUUyQixFQUFFZ2dDLHNCQUFzQi83QixFQUFFakUsRUFBRWlnQyxxQkFBcUJuZ0MsRUFBRUUsRUFBRW0vQixRQUFRb0IsTUFBTXI4QixFQUFFbEUsRUFBRW0vQixRQUFRUCxJQUFJdGdDLEVBQUUwQixFQUFFbS9CLFFBQVFMLEtBQUsxNkIsRUFBRSxRQUFRM0UsRUFBRWlJLE9BQU9vc0Qsa0JBQWtCcHNELE9BQU82eEQsa0JBQWtCbjdELEVBQUVnQyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRN0ksRUFBRWl4QixHQUFHeDFCLEVBQUVxZ0MsU0FBU25oQyxFQUFFbU0sT0FBT2xILEVBQUVJLEVBQUVnSSxPQUFPL0gsRUFBRXhFLEVBQUVxZ0MsU0FBUyxHQUFHcmdDLEVBQUVxZ0MsU0FBUyxHQUFHcmdDLEVBQUVxZ0MsU0FBUyxHQUFHcmdDLEVBQUVxZ0MsU0FBUyxHQUFHNTdCLEVBQUV6RSxFQUFFcWdDLFNBQVMsR0FBR3JnQyxFQUFFcWdDLFNBQVMsR0FBR3JnQyxFQUFFcWdDLFNBQVMsR0FBR3o3QixFQUFFNUUsRUFBRXFnQyxTQUFTLEdBQUdyZ0MsRUFBRXFnQyxTQUFTLEdBQUd0N0IsRUFBRS9FLEVBQUVxZ0MsU0FBUyxHQUFHcDdCLEVBQUUsRUFBRUEsRUFBRWpGLEVBQUVzL0IsWUFBWXI2QixFQUFFLElBQUksSUFBSUUsRUFBRUYsRUFBRVQsRUFBRWEsRUFBRUosRUFBRS9GLEVBQUVzTixRQUFRLEdBQUcvRyxFQUFFLEVBQUVBLEVBQUV6RixFQUFFMC9CLGFBQWFqNkIsRUFBRSxJQUFJLElBQUlJLEVBQUUsRUFBRUEsRUFBRTdGLEVBQUV5Z0MsV0FBVzU2QixFQUFFLENBQUMsSUFBSSxJQUFJSSxFQUFFSixFQUFFL0csRUFBRWdCLEVBQUVvRyxFQUFFRCxFQUFFQyxFQUFFLEdBQUdBLEdBQUdsSSxFQUFFLElBQUksSUFBSXFJLEVBQUV4QyxLQUFLRyxJQUFJaEUsRUFBRTBnQyxRQUFRemlDLEVBQUVnSSxHQUFHSyxFQUFFbkIsRUFBRVUsRUFBRXBCLEVBQUVILEVBQUUsRUFBRUEsRUFBRXRFLEVBQUVvL0IsWUFBWTk2QixFQUFFLENBQUMsSUFBSSxJQUFJaUMsRUFBRWpDLEVBQUU3RixFQUFFeUYsRUFBRXNDLEVBQUVELEVBQUVDLEVBQUUsR0FBR0EsR0FBR3pHLEVBQUUsSUFBSSxJQUFJMEcsRUFBRTVDLEtBQUtHLElBQUloRSxFQUFFdy9CLFNBQVNuaEMsRUFBRWtJLEdBQUdJLEVBQUVMLEVBQUVoQyxFQUFFTSxFQUFFZ0MsRUFBRSxFQUFFQSxFQUFFNUcsRUFBRXEvQixXQUFXejRCLEVBQUUsQ0FBQyxJQUFJLElBQUlDLEVBQUVELEVBQUVyRyxFQUFFakMsRUFBRXdJLEVBQUVELEVBQUVDLEVBQUUsR0FBR0EsR0FBR3RHLEVBQUUsSUFBSSxJQUFJdUcsRUFBRWxELEtBQUtHLElBQUloRSxFQUFFeS9CLFFBQVF4N0IsRUFBRTRDLEdBQUdHLEVBQUVMLEVBQUVDLEVBQUU3QixFQUFFa0MsRUFBRTdDLEVBQUUrQyxFQUFFLEVBQUVFLEVBQUUsRUFBRUMsRUFBRXBCLEVBQUVvQixFQUFFakIsRUFBRWlCLEdBQUd0SixFQUFFLENBQUMsSUFBSSxJQUFJdUosRUFBRWxDLEVBQUVpQyxFQUFFcEksRUFBRXNOLFFBQVEsR0FBRy9FLEVBQUVqQixFQUFFaUIsRUFBRWhCLEVBQUVnQixHQUFHMUgsRUFBRSxDQUFDLElBQUksSUFBSTZILEVBQUVMLEVBQUVFLEVBQUV2SSxFQUFFc04sUUFBUSxHQUFHMUUsRUFBRWhCLEVBQUVnQixFQUFFZixFQUFFZSxHQUFHdEgsRUFBRSxDQUFDLElBQUl3SCxFQUFFNUosRUFBRXdKLEVBQUVFLEVBQUU1SSxFQUFFc04sUUFBUSxHQUFHL0csR0FBRyxHQUFHLFFBQVFoRyxHQUFHdUksRUFBRWYsRUFBRUEsRUFBRWUsRUFBRSxRQUFRdkksSUFBSTBILEdBQUdhLEVBQUVYLEtBQUtsQixNQUFNYyxHQUFHLE1BQU0sR0FBR2QsTUFBTWMsR0FBRyxNQUFNLEdBQUdkLE1BQU1jLEdBQUcsTUFBTTlDLEVBQUU2QyxFQUFFdkIsR0FBRyxRQUFRaEcsRUFBRTBILEVBQUVFLEVBQUVKLElBQUksT0FBTzFDLEVBQUVxSSxZQUFZMU4sRUFBRVUsVUFBVXU5QixVQUFVLFNBQVNqK0IsRUFBRWMsR0FBRyxPQUFPSSxLQUFLODRELGlCQUFpQmg2RCxFQUFFLGFBQWFrQixLQUFLcTVELE9BQU92NkQsRUFBRWMsRUFBRSxPQUFPK08sV0FBVzdQLEVBQUVVLFVBQVV3OUIsa0JBQWtCLFNBQVNsK0IsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLHFCQUFxQixJQUFJLElBQUlsQixFQUFFVyxFQUFFa2hDLFlBQVlsaUMsRUFBRWdCLEVBQUVtZ0MsYUFBYXIvQixFQUFFZCxFQUFFb2dDLFlBQVk3aEMsRUFBRXlCLEVBQUVtaEMsWUFBWTdnQyxFQUFFTixFQUFFcWdDLGFBQWF0L0IsRUFBRWYsRUFBRXNnQyxZQUFZOWhDLEVBQUV3QixFQUFFcWhDLGNBQWN6aUMsRUFBRW9CLEVBQUV5Z0MsZUFBZWo4QixFQUFFeEUsRUFBRTBnQyxjQUFjcmdDLEVBQUVMLEVBQUVvaEMscUJBQXFCMzhCLEVBQUV6RSxFQUFFdWdDLHNCQUFzQjFoQyxFQUFFbUIsRUFBRXdnQyxxQkFBcUI3N0IsRUFBRXRFLEVBQUUsRUFBRUwsRUFBRTAvQixRQUFRb0IsTUFBTW5pQyxFQUFFRSxFQUFFLEVBQUVtQixFQUFFMC9CLFFBQVFMLEtBQUt2NkIsRUFBRUwsRUFBRSxFQUFFekUsRUFBRTAvQixRQUFRUCxJQUFJejZCLEVBQUVxeEIsR0FBR3gxQixFQUFFMkwsTUFBTSxXQUFXbkgsRUFBRSxHQUFHeEcsRUFBRStCLEVBQUVTLEdBQUdpRSxFQUFFckUsS0FBS2lPLFdBQVduUCxHQUFHMEYsRUFBRSxFQUFFQSxFQUFFbkYsRUFBRTYvQixZQUFZMTZCLEVBQUUsSUFBSSxJQUFJRyxFQUFFLEVBQUVBLEVBQUV0RixFQUFFaWdDLGFBQWEzNkIsRUFBRSxJQUFJLElBQUlFLEVBQUUsRUFBRUEsRUFBRXhGLEVBQUVpaEMsVUFBVXo3QixFQUFFLElBQUksSUFBSUUsRUFBRSxFQUFFQSxFQUFFMUYsRUFBRSsvQixXQUFXcjZCLEVBQUUsSUFBSSxJQUFJRSxFQUFFLEVBQUVBLEVBQUU1RixFQUFFZ2dDLFVBQVVwNkIsRUFBRSxDQUFDLElBQUksSUFBSUksRUFBRVIsRUFBRWIsRUFBRXlCLEVBQUVWLEVBQUVaLEVBQUUwQixFQUFFWixFQUFFakgsRUFBRThILEVBQUUsRUFBRUcsRUFBRSxFQUFFQSxFQUFFdkcsRUFBRXVHLEdBQUdwSSxFQUFFLENBQUMsSUFBSXFJLEdBQUdiLEVBQUVZLEdBQUd2SCxFQUFFLEtBQUt3SCxFQUFFLEdBQUdBLEdBQUc3RyxFQUFFZ2hDLFVBQVU1OEIsS0FBSzhJLE1BQU1yRyxLQUFLQSxHQUFHLElBQUksSUFBSWhDLEVBQUUsRUFBRUEsRUFBRUosRUFBRUksR0FBR2pHLEVBQUUsQ0FBQyxJQUFJa0ksR0FBR1YsRUFBRXZCLEdBQUc3RixFQUFFLEtBQUs4SCxFQUFFLEdBQUdBLEdBQUc5RyxFQUFFMi9CLFdBQVd2N0IsS0FBSzhJLE1BQU1wRyxLQUFLQSxHQUFHLElBQUksSUFBSUMsRUFBRSxFQUFFQSxFQUFFbEksRUFBRWtJLEdBQUd2QyxFQUFFLENBQUMsSUFBSXdDLEdBQUdSLEVBQUVPLEdBQUdqRyxFQUFPa0csRUFBRSxHQUFHQSxHQUFHaEgsRUFBRTQvQixVQUFVeDdCLEtBQUs4SSxNQUFNbEcsS0FBS0EsSUFBR1AsR0FBR3pCLEVBQUU1RixJQUFJK0YsRUFBRTBCLEVBQUVDLEVBQUVFLEVBQUUxQixNQUFLWixFQUFFOUIsSUFBSTZELEVBQUUxQixFQUFFSSxFQUFFSyxFQUFFRSxFQUFFRSxFQUFFTixHQUFHLE9BQU9aLEVBQUV5SSxZQUFZMU4sRUFBRVUsVUFBVXk5QixVQUFVLFNBQVNuK0IsRUFBRWMsR0FBRyxPQUFPSSxLQUFLODRELGlCQUFpQmg2RCxFQUFFLGFBQWFrQixLQUFLcTVELE9BQU92NkQsRUFBRWMsRUFBRSxPQUFPK08sV0FBVzdQLEVBQUVVLFVBQVU4NUQsbUJBQW1CLFNBQVN4NkQsRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUUrMUIsR0FBR3gxQixFQUFFcWdDLFNBQVMsU0FBU3ZoQyxFQUFFa0IsRUFBRTJnQyxZQUFZbGlDLEVBQUV1QixFQUFFNC9CLGFBQWFyL0IsRUFBRVAsRUFBRTYvQixZQUFZN2hDLEVBQUVnQyxFQUFFOGdDLGNBQWMvZ0MsRUFBRUMsRUFBRWtnQyxlQUFlMS9CLEVBQUVSLEVBQUVtZ0MsY0FBY2xpQyxFQUFFK0IsRUFBRTZnQyxxQkFBcUJ4aUMsRUFBRTJCLEVBQUVnZ0Msc0JBQXNCLzdCLEVBQUVqRSxFQUFFaWdDLHFCQUFxQm5nQyxFQUFFRSxFQUFFbS9CLFFBQVFvQixNQUFNcjhCLEVBQUVsRSxFQUFFbS9CLFFBQVFQLElBQUl0Z0MsRUFBRTBCLEVBQUVtL0IsUUFBUUwsS0FBSzE2QixFQUFFaEUsS0FBS2lPLFdBQVduUCxHQUFHZCxFQUFFLEVBQUVBLEVBQUU0QixFQUFFcy9CLFlBQVlsaEMsRUFBRSxJQUFJLElBQUltRyxFQUFFLEVBQUVBLEVBQUV2RSxFQUFFMC9CLGFBQWFuN0IsRUFBRSxJQUFJLElBQUlKLEVBQUUsRUFBRUEsRUFBRW5FLEVBQUV5Z0MsV0FBV3Q4QixFQUFFLENBQUMsSUFBSSxJQUFJSyxFQUFFTCxFQUFFckYsRUFBRWdCLEVBQUUyRSxFQUFFRCxFQUFFQyxFQUFFLEdBQUdBLEdBQUd6RyxFQUFFLElBQUksSUFBSTRHLEVBQUVmLEtBQUtHLElBQUloRSxFQUFFMGdDLFFBQVF6aUMsRUFBRXVHLEdBQUdPLEVBQUUsRUFBRUEsRUFBRS9FLEVBQUVvL0IsWUFBWXI2QixFQUFFLENBQUMsSUFBSSxJQUFJRSxFQUFFRixFQUFFdEcsRUFBRXlGLEVBQUVpQixFQUFFRixFQUFFRSxFQUFFLEdBQUdBLEdBQUdwRixFQUFFLElBQUksSUFBSXNGLEVBQUV4QixLQUFLRyxJQUFJaEUsRUFBRXcvQixTQUFTbmhDLEVBQUU0RyxHQUFHUSxFQUFFLEVBQUVBLEVBQUV6RixFQUFFcS9CLFdBQVc1NUIsRUFBRSxDQUFDLElBQUksSUFBSUksRUFBRUosRUFBRWxGLEVBQUVqQyxFQUFFMkgsRUFBRUosRUFBRUksRUFBRSxHQUFHQSxHQUFHekYsRUFBRSxJQUFJLElBQUkwRixFQUFFckMsS0FBS0csSUFBSWhFLEVBQUV5L0IsUUFBUXg3QixFQUFFNEIsR0FBR1EsRUFBRXFCLE9BQU9vc0Qsa0JBQWtCeHRELEdBQUcsRUFBRWhDLEVBQUVHLEVBQUVILEVBQUVNLEVBQUVOLEdBQUd0RyxFQUFFLElBQUksSUFBSXVJLEVBQUVqQyxFQUFFRSxFQUFFZ0MsRUFBRXJCLEVBQUVxQixFQUFFbkIsRUFBRW1CLEdBQUd6RyxFQUFFLElBQUksSUFBSTBHLEVBQUVELEVBQUV2QixFQUFFMEIsRUFBRVYsRUFBRVUsRUFBRVQsRUFBRVMsR0FBR25HLEVBQUUsQ0FBQyxJQUFJb0csRUFBRUQsRUFBRWQsRUFBRWdCLEVBQUV6QyxFQUFFdkYsSUFBSVQsRUFBRWtHLEVBQUVrQyxFQUFFRyxFQUFFcEMsR0FBR3NDLEdBQUdSLElBQUlBLEVBQUVRLEVBQUVQLEVBQUVDLEVBQUVsSSxFQUFFNEYsRUFBRXdDLEVBQUVwSSxFQUFFdUksR0FBR25ILEVBQUU0QyxJQUFJaUUsRUFBRWxJLEVBQUUrRixFQUFFWSxFQUFFVSxFQUFFbEIsS0FBSyxPQUFPOUUsRUFBRW1OLFlBQVkxTixFQUFFVSxVQUFVMDlCLGtCQUFrQixTQUFTcCtCLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUdzQixLQUFLODRELGlCQUFpQixDQUFDbDVELEVBQUVQLEdBQUcscUJBQXFCLElBQUksSUFBSWhCLEVBQUUyQixLQUFLczVELG1CQUFtQjE1RCxFQUFFbEIsR0FBR3lCLEVBQUV6QixFQUFFNmhDLFlBQVkzaUMsRUFBRWMsRUFBRThnQyxhQUFhNy9CLEVBQUVqQixFQUFFK2dDLFlBQVlyL0IsRUFBRTFCLEVBQUVnaUMsY0FBYzdpQyxFQUFFYSxFQUFFb2hDLGVBQWU3aEMsRUFBRVMsRUFBRXFoQyxjQUFjbDhCLEVBQUVuRixFQUFFK2hDLHFCQUFxQi9nQyxFQUFFaEIsRUFBRWtoQyxzQkFBc0I5N0IsRUFBRXBGLEVBQUVtaEMscUJBQXFCM2hDLEVBQUUyRixFQUFFLEVBQUVuRixFQUFFcWdDLFFBQVFvQixNQUFNbjhCLEVBQUVGLEVBQUUsRUFBRXBGLEVBQUVxZ0MsUUFBUUwsS0FBSzFnQyxFQUFFMEIsRUFBRSxFQUFFaEIsRUFBRXFnQyxRQUFRUCxJQUFJcjZCLEVBQUVpeEIsR0FBR3gxQixFQUFFMkwsTUFBTSxXQUFXeEgsRUFBRS9ELEtBQUtpTyxXQUFXNVAsR0FBRytGLEVBQUVwRSxLQUFLaU8sV0FBV25QLEdBQUd1RixFQUFFLEVBQUVBLEVBQUUzRixFQUFFd2dDLFlBQVk3NkIsRUFBRSxJQUFJLElBQUlHLEVBQUUsRUFBRUEsRUFBRTlGLEVBQUU0Z0MsYUFBYTk2QixFQUFFLElBQUksSUFBSUcsRUFBRSxFQUFFQSxFQUFFakcsRUFBRTRoQyxVQUFVMzdCLEVBQUUsSUFBSSxJQUFJRSxFQUFFLEVBQUVBLEVBQUVuRyxFQUFFMGdDLFdBQVd2NkIsRUFBRSxJQUFJLElBQUlFLEVBQUUsRUFBRUEsRUFBRXJHLEVBQUUyZ0MsVUFBVXQ2QixFQUFFLENBQUMsSUFBSSxJQUFJRSxFQUFFTixFQUFFekcsRUFBRW1ILEVBQUVSLEVBQUU3RyxFQUFFeUgsRUFBRVYsRUFBRWYsRUFBRTZCLEVBQUUsRUFBRUMsRUFBRSxFQUFFQSxFQUFFakMsRUFBRWlDLEdBQUcxRixFQUFFLENBQUMsSUFBSTZGLEdBQUdoQixFQUFFYSxHQUFHM0YsRUFBRSxLQUFLOEYsRUFBRSxHQUFHQSxHQUFHdkgsRUFBRTJoQyxVQUFVNThCLEtBQUs4SSxNQUFNdEcsS0FBS0EsR0FBRyxJQUFJLElBQUlDLEVBQUUsRUFBRUEsRUFBRXhHLEVBQUV3RyxHQUFHckksRUFBRSxDQUFDLElBQUlxRyxHQUFHbUIsRUFBRWEsR0FBR3RJLEVBQUUsS0FBS3NHLEVBQUUsR0FBR0EsR0FBR3hGLEVBQUVzZ0MsV0FBV3Y3QixLQUFLOEksTUFBTXJJLEtBQUtBLEdBQUcsSUFBSSxJQUFJaUMsRUFBRSxFQUFFQSxFQUFFckMsRUFBRXFDLEdBQUdsSSxFQUFFLENBQUMsSUFBSW1JLEdBQUdYLEVBQUVVLEdBQUd4RyxFQUFFLEtBQUt5RyxFQUFFLEdBQUdBLEdBQUcxSCxFQUFFdWdDLFVBQVV4N0IsS0FBSzhJLE1BQU1uRyxLQUFLQSxHQUFHLENBQUMsSUFBSUMsRUFBRXhDLEVBQUVuRSxFQUFFb0UsRUFBRSxFQUFFQyxFQUFFdEYsSUFBSTRGLEVBQUU0QixFQUFFL0IsRUFBRWtDLEVBQUU1QixLQUFLc0IsRUFBRXBHLEVBQUVvRSxFQUFFb0MsRUFBRXBDLEVBQUVxQyxFQUFFLEVBQUUsRUFBSyxJQUFJRSxJQUFFUixHQUFHekIsRUFBRTNGLElBQUk0RixFQUFFNEIsRUFBRS9CLEVBQUVrQyxFQUFFNUIsR0FBRzZCLE1BQUtsQyxFQUFFbEMsSUFBSTRELEVBQUV4QixFQUFFTSxFQUFFRSxFQUFFRSxFQUFFUCxHQUFHLE9BQU9MLEVBQUVxSSxZQUFZMU4sRUFBRVUsVUFBVXVPLEtBQUssU0FBU2pQLEVBQUVjLEdBQUcsT0FBT2toQyxHQUFHaGlDLEVBQUVjLEVBQUVJLE9BQU9sQixFQUFFVSxVQUFVaU8sUUFBUSxTQUFTM08sRUFBRWMsR0FBRyxPQUFPbWhDLEdBQUdqaUMsRUFBRWMsSUFBSWQsRUFBRVUsVUFBVW9XLFFBQVEsU0FBUzlXLEVBQUVjLEdBQUcsT0FBT0ksS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxXQUFXa0IsS0FBSytWLEtBQUtqWCxFQUFFYyxFQUFFLE9BQU8rTyxXQUFXN1AsRUFBRVUsVUFBVTJWLGVBQWUsU0FBU3JXLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUdzQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLGtCQUFrQixJQUFJLElBQUlULEVBQUVTLEVBQUV5TSxNQUFNcEwsRUFBRTlCLEVBQUUsR0FBR1QsRUFBRVMsRUFBRSxHQUFHc0IsRUFBRXRCLEVBQUUsR0FBRytCLEVBQUUvQixFQUFFLEdBQUdSLEVBQUVtQyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRL08sRUFBRSxJQUFJeUgsYUFBYXZCLEVBQUUsQ0FBQ2hFLEVBQUVQLEVBQUVQLEVBQUVlLEtBQUt5RCxFQUFFLENBQUNuRixHQUFHa0IsRUFBRSxFQUFFaEMsRUFBRSxFQUFFQSxFQUFFYyxHQUFHVyxFQUFFLEVBQUVNLEVBQUUsRUFBRUEsR0FBR0QsRUFBRSxDQUFDaEIsR0FBR2tCLEVBQUUsRUFBRUEsRUFBRSxFQUFFQSxFQUFFbEIsR0FBR1csRUFBRSxFQUFFQSxFQUFFLEVBQUVBLEdBQUd5RSxFQUFFLEVBQUU1RixFQUFFMkYsRUFBRSxHQUFHbkUsRUFBRSxHQUFHc0UsRUFBRUgsRUFBRSxHQUFHbkUsRUFBRSxHQUFHMUIsRUFBRSxFQUFFQSxFQUFFbUMsRUFBRW5DLElBQUksSUFBSSxJQUFJK0YsRUFBRSxFQUFFQSxFQUFFbkUsRUFBRW1FLElBQUksSUFBSSxJQUFJSyxFQUFFbEcsRUFBRTZGLEVBQUVNLEVBQUVaLEtBQUs4SSxNQUFNbkksR0FBR0ksRUFBRUosRUFBRUMsRUFBRU0sRUFBRWxCLEtBQUtHLElBQUloRyxFQUFFLEVBQUU2RixLQUFLZ0IsS0FBS0wsSUFBSVMsRUFBRTdHLEVBQUVjLEVBQUVzTixRQUFRLEdBQUcvSCxFQUFFdkYsRUFBRXNOLFFBQVEsR0FBR3JILEVBQUUvRyxFQUFFYyxFQUFFc04sUUFBUSxHQUFHekgsRUFBRTdGLEVBQUVzTixRQUFRLEdBQUduSCxFQUFFLEVBQUVBLEVBQUU1RixFQUFFNEYsSUFBSSxJQUFJLElBQUlJLEVBQUVyQixFQUFFaUIsRUFBRVEsRUFBRWhDLEtBQUs4SSxNQUFNbEgsR0FBR1EsRUFBRVIsRUFBRUksRUFBRUssRUFBRXJDLEtBQUtHLElBQUlqRSxFQUFFLEVBQUU4RCxLQUFLZ0IsS0FBS1ksSUFBSVksRUFBRXBCLEVBQUVZLEVBQUUzRyxFQUFFc04sUUFBUSxHQUFHbEcsRUFBRW5CLEVBQUVVLEVBQUUzRyxFQUFFc04sUUFBUSxHQUFHbEksRUFBRVcsSUFBSWlCLEVBQUVoSCxFQUFFc04sUUFBUSxHQUFHakcsRUFBRXBCLEVBQUVlLEVBQUVoSCxFQUFFc04sUUFBUSxHQUFHaEcsRUFBRSxFQUFFQSxFQUFFaEcsRUFBRWdHLElBQUksQ0FBQyxJQUFJQyxFQUFFeEksRUFBRW9JLEVBQUVHLEdBQUdHLEVBQUUxSSxFQUFFcUksRUFBRUUsR0FBR0ksRUFBRUgsR0FBR3hJLEVBQUVxRyxFQUFFa0MsR0FBR0MsR0FBR1IsRUFBRVksRUFBRUQsR0FBR0QsR0FBRzFJLEVBQUVzSSxFQUFFQyxHQUFHRyxHQUFHVixFQUFFVyxHQUFHaEMsRUFBRXZHLEVBQUU2RixLQUFLMkMsRUFBRSxPQUFPeXBCLEdBQUdqeUIsRUFBRSxDQUFDa0MsRUFBRVAsRUFBRVAsRUFBRWUsS0FBS3RCLEVBQUVVLFVBQVU2OUIsdUJBQXVCLFNBQVN2K0IsRUFBRWMsRUFBRVAsR0FBR1csS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxHQUFHLDBCQUEwQixJQUFJLElBQUlsQixFQUFFa0IsRUFBRTJMLE1BQU1sTixFQUFFSyxFQUFFLEdBQUd5QixFQUFFekIsRUFBRSxHQUFHZCxFQUFFYyxFQUFFLEdBQUdpQixFQUFFakIsRUFBRSxHQUFHMEIsRUFBRXRCLEVBQUV5TSxNQUFNMU4sRUFBRXVDLEVBQUUsR0FBR25DLEVBQUVtQyxFQUFFLEdBQUd5RCxFQUFFLElBQUk2QixhQUFhckgsRUFBRThCLEVBQUV2QyxFQUFFK0IsR0FBR0QsRUFBRSxDQUFDTCxHQUFHeEIsRUFBRSxFQUFFc0MsRUFBRSxFQUFFQSxFQUFFZCxHQUFHcEIsRUFBRSxFQUFFTCxFQUFFLEVBQUVBLEdBQUdrRyxFQUFFLENBQUN6RSxHQUFHeEIsRUFBRSxFQUFFQSxFQUFFLEVBQUVBLEVBQUV3QixHQUFHcEIsRUFBRSxFQUFFQSxFQUFFLEVBQUVBLEdBQUdDLEVBQUV3QixFQUFFLEdBQUdvRSxFQUFFLEdBQUdFLEVBQUV0RSxFQUFFLEdBQUdvRSxFQUFFLEdBQUc5RixFQUFFZ0MsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUTdJLEVBQUUsRUFBRUosRUFBRSxFQUFFQSxFQUFFMUYsRUFBRTBGLElBQUksSUFBSSxJQUFJSyxFQUFFTCxFQUFFbkUsRUFBRXdNLFFBQVEsR0FBRy9ILEVBQUUsRUFBRUEsRUFBRXhHLEVBQUV3RyxJQUFJLElBQUksSUFBSUcsRUFBRUgsRUFBRW5HLEVBQUV5RyxFQUFFbEIsS0FBSzhJLE1BQU0vSCxHQUFHSyxFQUFFcEIsS0FBS0csSUFBSUgsS0FBS2dCLEtBQUtELEdBQUdyRSxFQUFFLEdBQUc0RSxFQUFFWCxFQUFFTyxFQUFFL0UsRUFBRXdNLFFBQVEsR0FBR25ILEVBQUViLEVBQUVTLEVBQUVqRixFQUFFd00sUUFBUSxHQUFHL0csRUFBRWIsRUFBRUcsRUFBRWMsRUFBRSxFQUFFSixFQUFFUSxFQUFFLEVBQUVBLEVBQUU1SCxFQUFFNEgsSUFBSSxJQUFJLElBQUlDLEVBQUVELEVBQUU3QixFQUFFaUMsRUFBRXhDLEtBQUs4SSxNQUFNekcsR0FBR0ksRUFBRXpDLEtBQUtHLElBQUlILEtBQUtnQixLQUFLcUIsR0FBR2xJLEVBQUUsR0FBR3NHLEVBQUU0QixFQUFFRyxFQUFFRSxFQUFFLEVBQUVqQyxFQUFFa0MsRUFBRXJCLEVBQUVrQixFQUFFckcsRUFBRXdNLFFBQVEsR0FBRy9GLEVBQUV0QixFQUFFbUIsRUFBRXRHLEVBQUV3TSxRQUFRLEdBQUc3RixFQUFFdEIsRUFBRWdCLEVBQUVyRyxFQUFFd00sUUFBUSxHQUFHNUYsRUFBRXZCLEVBQUVpQixFQUFFdEcsRUFBRXdNLFFBQVEsR0FBRzNGLEVBQUVoQixFQUFFVSxFQUFFTyxFQUFFakIsRUFBRXZCLEVBQUV5QyxFQUFFdEIsRUFBRWMsRUFBRVMsRUFBRXZCLEVBQUVuQixFQUFFMkMsRUFBRSxFQUFFQSxFQUFFbEgsRUFBRWtILElBQUksQ0FBQyxJQUFJRSxFQUFFL0ksRUFBRW1HLEtBQUtOLEVBQUV1QyxFQUFFUyxJQUFJRSxFQUFFTixFQUFFNUMsRUFBRXdDLEVBQUVRLElBQUlFLEVBQUVMLEVBQUU3QyxFQUFFMEMsRUFBRU0sSUFBSUUsRUFBRUosRUFBRTlDLEVBQUUyQyxFQUFFSyxJQUFJRSxFQUFFSCxFQUFFLE9BQU80cEIsR0FBRzNzQixFQUFFLENBQUN4RixFQUFFVCxFQUFFdUMsRUFBRVIsR0FBR0MsRUFBRXFMLFFBQVFuTSxFQUFFVSxVQUFVNlYsc0JBQXNCLFNBQVN2VyxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHc0IsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSx5QkFBeUIsSUFBSSxJQUFJVCxFQUFFUyxFQUFFeU0sTUFBTXBMLEVBQUU5QixFQUFFLEdBQUdULEVBQUVTLEVBQUUsR0FBR3NCLEVBQUV0QixFQUFFLEdBQUcrQixFQUFFL0IsRUFBRSxHQUFHUixFQUFFbUMsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUS9PLEVBQUUsSUFBSXlILGFBQWF2RixFQUFFUCxFQUFFUCxFQUFFZSxHQUFHeUQsRUFBRSxDQUFDbkYsR0FBR2tCLEVBQUUsRUFBRWhDLEVBQUUsRUFBRUEsRUFBRWMsR0FBR1csRUFBRSxFQUFFTSxFQUFFLEVBQUVBLEdBQUdELEVBQUUsQ0FBQ2hCLEdBQUdrQixFQUFFLEVBQUVBLEVBQUUsRUFBRUEsRUFBRWxCLEdBQUdXLEVBQUUsRUFBRUEsRUFBRSxFQUFFQSxHQUFHeUUsRUFBRUQsRUFBRSxHQUFHbkUsRUFBRSxHQUFHeEIsRUFBRTJGLEVBQUUsR0FBR25FLEVBQUUsR0FBR3NFLEVBQUUsRUFBRWhHLEVBQUUsRUFBRUEsRUFBRW1DLEVBQUVuQyxJQUFJLElBQUksSUFBSW1HLEVBQUVuRyxFQUFFYyxFQUFFc04sUUFBUSxHQUFHckksRUFBRSxFQUFFQSxFQUFFbkUsRUFBRW1FLElBQUksSUFBSSxJQUFJSyxFQUFFTixFQUFFQyxFQUFFTSxFQUFFRixFQUFFVixLQUFLRyxJQUFJaEcsRUFBRSxFQUFFYyxFQUFFK0UsS0FBS3FELE1BQU0xQyxHQUFHWCxLQUFLOEksTUFBTW5JLElBQUl0RixFQUFFc04sUUFBUSxHQUFHNUgsRUFBRSxFQUFFQSxFQUFFbkYsRUFBRW1GLElBQUksSUFBSSxJQUFJRyxFQUFFekcsRUFBRXNHLEVBQUVLLEVBQUVSLEVBQUVaLEtBQUtHLElBQUlqRSxFQUFFLEVBQUVqQixFQUFFK0UsS0FBS3FELE1BQU1uQyxHQUFHbEIsS0FBSzhJLE1BQU01SCxJQUFJN0YsRUFBRXNOLFFBQVEsR0FBR3JILEVBQUUsRUFBRUEsRUFBRTNFLEVBQUUyRSxJQUFJLENBQUMsSUFBSUUsRUFBRXBILEVBQUVnSCxFQUFFRSxHQUFHOUcsRUFBRStGLEtBQUtpQixFQUFFLE9BQU9pckIsR0FBR2p5QixFQUFFLENBQUNrQyxFQUFFUCxFQUFFUCxFQUFFZSxHQUFHdEIsRUFBRW1NLFFBQVFuTSxFQUFFVSxVQUFVODlCLDhCQUE4QixTQUFTeCtCLEVBQUVjLEVBQUVQLEdBQUdXLEtBQUs4NEQsaUJBQWlCLENBQUNoNkQsRUFBRWMsR0FBRyxpQ0FBaUMsSUFBSSxJQUFJbEIsRUFBRWtCLEVBQUUyTCxNQUFNbE4sRUFBRUssRUFBRSxHQUFHeUIsRUFBRXpCLEVBQUUsR0FBR2QsRUFBRWMsRUFBRSxHQUFHaUIsRUFBRWpCLEVBQUUsR0FBRzBCLEVBQUV0QixFQUFFeU0sTUFBTTFOLEVBQUV1QyxFQUFFLEdBQUduQyxFQUFFbUMsRUFBRSxHQUFHeUQsRUFBRSxJQUFJNkIsYUFBYXJILEVBQUU4QixFQUFFdkMsRUFBRStCLEdBQUdELEVBQUVNLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVFsSixFQUFFLENBQUN6RSxHQUFHeEIsRUFBRSxFQUFFc0MsRUFBRSxFQUFFQSxFQUFFZCxHQUFHcEIsRUFBRSxFQUFFTCxFQUFFLEVBQUVBLEdBQUdNLEVBQUUsQ0FBQ21CLEdBQUd4QixFQUFFLEVBQUVBLEVBQUUsRUFBRUEsRUFBRXdCLEdBQUdwQixFQUFFLEVBQUVBLEVBQUUsRUFBRUEsR0FBRytGLEVBQUVGLEVBQUUsR0FBRzVGLEVBQUUsR0FBR0YsRUFBRThGLEVBQUUsR0FBRzVGLEVBQUUsR0FBR2lHLEVBQUUsRUFBRUgsRUFBRUQsRUFBRSxFQUFFL0YsRUFBRW9HLEVBQUUsRUFBRVgsS0FBS2dCLEtBQUtOLEdBQUcsRUFBRUUsRUFBRSxFQUFFWixLQUFLZ0IsS0FBS1YsR0FBRyxFQUFFUyxFQUFFLEVBQUVBLEVBQUVuRyxFQUFFbUcsSUFBSSxJQUFJLElBQUlHLEVBQUVILEVBQUU1RSxFQUFFd00sUUFBUSxHQUFHdkgsRUFBRSxFQUFFQSxFQUFFMUUsRUFBRTBFLElBQUksSUFBSSxJQUFJRSxFQUFFSixFQUFFRSxFQUFFakYsRUFBRXdNLFFBQVEsR0FBR25ILEVBQUV4QixLQUFLOEksTUFBTTFILEVBQUVWLEdBQUdrQixFQUFFNUIsS0FBSzhJLE1BQU10SCxFQUFFYixFQUFFLEdBQUdxQixFQUFFLEVBQUVBLEVBQUU3SCxFQUFFNkgsSUFBSSxJQUFJLElBQUlJLEVBQUVkLEVBQUVVLEVBQUU3RixFQUFFd00sUUFBUSxHQUFHdEcsRUFBRXJDLEtBQUs4SSxNQUFNOUcsRUFBRTFCLEdBQUdrQyxFQUFFeEMsS0FBSzhJLE1BQU16RyxFQUFFekIsRUFBRSxHQUFHNkIsRUFBRSxFQUFFQSxFQUFFdkcsRUFBRXVHLElBQUksQ0FBQyxJQUFJLElBQUloQyxFQUFFLEVBQUVpQyxFQUFFLEVBQUVBLEVBQUUvQixFQUFFK0IsSUFBSSxDQUFDLElBQUlDLEVBQUVELEVBQUVkLEVBQUUsS0FBS2UsRUFBRSxHQUFHQSxHQUFHdkksR0FBRyxDQUFDLElBQUl3SSxFQUFFMUIsRUFBRXlCLEVBQUV0SCxFQUFFc04sUUFBUSxHQUFHN0YsRUFBRUgsRUFBRXBDLEVBQUUsR0FBR2EsSUFBSXBCLEtBQUtHLElBQUl6RCxFQUFFLEVBQUVkLEVBQUVvRSxLQUFLcUQsTUFBTVAsR0FBRzlDLEtBQUs4SSxNQUFNaEcsSUFBSSxJQUFJLElBQUlDLEVBQUUsRUFBRUEsRUFBRW5DLEVBQUVtQyxJQUFJLENBQUMsSUFBSUMsRUFBRUQsRUFBRVAsRUFBRSxLQUFLUSxFQUFFLEdBQUdBLEdBQUd4SSxHQUFHLENBQUMsSUFBSXlJLEVBQUVMLEVBQUVJLEVBQUUzSCxFQUFFc04sUUFBUSxHQUFHekYsRUFBRUYsRUFBRXpJLEVBQUV5SCxJQUFJaEMsS0FBS0csSUFBSWhHLEVBQUUsRUFBRXlCLEVBQUVvRSxLQUFLcUQsTUFBTUgsR0FBR2xELEtBQUs4SSxNQUFNNUYsTUFBTXpDLEdBQUd4RSxFQUFFZ0gsRUFBRVIsT0FBT3JDLEVBQUVnQyxFQUFFSyxHQUFHaEMsRUFBRSxPQUFPc3NCLEdBQUczc0IsRUFBRWpFLEVBQUUyTCxNQUFNM0wsRUFBRXFMLFFBQVFuTSxFQUFFVSxVQUFVeVEsbUJBQW1CLFNBQVNuUixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBR0gsS0FBSzg0RCxpQkFBaUIsQ0FBQ2g2RCxFQUFFYyxFQUFFUCxFQUFFaEIsRUFBRThCLEdBQUcsYUFBYSxJQUFJLElBQUl2QyxFQUFFb0MsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUXJOLEVBQUVLLEtBQUtzTyxTQUFTMU8sRUFBRW9OLFFBQVE1TSxFQUFFSixLQUFLc08sU0FBU2pQLEVBQUUyTixRQUFRblAsRUFBRVEsRUFBRTJCLEtBQUtzTyxTQUFTalEsRUFBRTJPLFFBQVEsSUFBSXRILGFBQWEsQ0FBQyxJQUFJekgsRUFBRWtDLEVBQUVILEtBQUtzTyxTQUFTbk8sRUFBRTZNLFFBQVEsSUFBSXRILGFBQWEsQ0FBQyxJQUFJN0IsRUFBRSxJQUFJNkIsYUFBYTlILEVBQUVzRCxRQUFReEIsRUFBRXpCLEVBQUVpRCxPQUFPNEMsRUFBRWpHLEVBQUVxRCxPQUFPaEQsRUFBRWtDLEVBQUVjLE9BQU84QyxFQUFFckUsRUFBRXVCLE9BQU9sRCxFQUFFLEVBQUVtRyxFQUFFLEVBQUVKLEVBQUUsRUFBRUssRUFBRSxFQUFFQyxFQUFFLEVBQUVBLEVBQUV6RyxFQUFFc0QsU0FBU21ELEVBQUVSLEVBQUVRLEdBQUdwRyxFQUFFRCxNQUFNSixFQUFFeUcsR0FBRzFFLEVBQUV3RSxNQUFNdEcsRUFBRWtHLEtBQUtOLEtBQUtpQixLQUFLdEUsRUFBRWdFLEtBQUsxRixHQUFHVixHQUFHMEIsSUFBSTFCLEVBQUUsR0FBR21HLEdBQUdILElBQUlHLEVBQUUsR0FBR0osR0FBR0QsSUFBSUMsRUFBRSxHQUFHSyxHQUFHbEcsSUFBSWtHLEVBQUUsR0FBRyxPQUFPb3NCLEdBQUczc0IsRUFBRS9FLEVBQUV5TSxRQUFRek0sRUFBRVUsVUFBVSs5Qiw2QkFBNkIsU0FBU3orQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxHQUFHMkIsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxnQ0FBZ0MsSUFBSXFCLEVBQUVyQixFQUFFeU0sTUFBTSxHQUFHM04sRUFBRXVDLEVBQUUsRUFBRVIsRUFBRUssS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUTVNLEVBQUV0QixFQUFFd00sS0FBS3pOLEVBQUUsSUFBSTZILGFBQWF0RixHQUFHLFNBQVNuQyxFQUFFYSxHQUFHLElBQUksSUFBSU8sRUFBRVAsRUFBRXFCLEVBQUV6QixFQUFFSSxFQUFFTyxFQUFFb0UsS0FBS0UsSUFBSSxFQUFFdEUsRUFBRU8sR0FBR3ZCLEVBQUVTLEVBQUVPLEVBQUVvRSxLQUFLRyxJQUFJdkUsRUFBRU8sRUFBRWhDLEdBQUd3QyxFQUFFLEVBQUUxQixHQUFHTCxFQUFFSyxJQUFJLENBQUMsSUFBSWIsRUFBRThCLEVBQUVqQixHQUFHMEIsR0FBR3ZDLEVBQUVBLEVBQUUsT0FBT3VDLEVBQUUsSUFBSSxJQUFJeUQsRUFBRSxFQUFFQSxFQUFFekQsRUFBRXlELElBQUksQ0FBQyxJQUFJbkUsRUFBRXpCLEVBQUU0RixHQUFHQyxFQUFFbkUsRUFBRWtFLEdBQUdKLEtBQUtzTixJQUFJMVIsRUFBRVgsRUFBRWdCLEdBQUdyQixHQUFHUixFQUFFZ0csR0FBR0MsRUFBRSxPQUFPMHNCLEdBQUczeUIsRUFBRWlCLEVBQUV5TSxRQUFRek0sRUFBRVUsVUFBVWcrQixRQUFRLFNBQVMxK0IsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEVBQUV2QyxHQUFHb0MsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxXQUFXLElBQUksSUFBSWEsRUFBRWIsRUFBRXlNLE1BQU0sR0FBR25MLEVBQUVKLEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVFuUCxFQUFFbUMsS0FBS3NPLFNBQVMxTyxFQUFFb04sUUFBUS9PLEVBQUUrQixLQUFLc08sU0FBU2pQLEVBQUUyTixRQUFRbkosRUFBRSxJQUFJNkIsYUFBYTVHLEVBQUV3TSxNQUFNNUwsRUFBRVosRUFBRXdNLEtBQUt4SCxFQUFFLEVBQUVBLEVBQUVwRSxFQUFFb0UsSUFBSSxDQUFDLElBQUksSUFBSTVGLEVBQUU0RixFQUFFbkUsRUFBRXFFLEVBQUVGLEVBQUU1RixFQUFFdUYsS0FBS0UsSUFBSSxFQUFFekYsRUFBRVEsR0FBR1YsRUFBRThGLEVBQUU1RixFQUFFdUYsS0FBS0csSUFBSWpFLEVBQUV6QixFQUFFUSxFQUFFLEdBQUd5RixFQUFFLEVBQUVKLEVBQUVDLEVBQUVELEVBQUUvRixFQUFFK0YsSUFBSUksR0FBR1YsS0FBS3NOLElBQUlsVCxFQUFFa0csR0FBRyxHQUFXLElBQVJJLEVBQUVoRSxFQUFFZ0UsRUFBRTlGLEVBQU0wRixFQUFFQyxFQUFFRCxFQUFFL0YsRUFBRStGLElBQUksQ0FBQyxJQUFJSyxHQUFHLEVBQUVqRSxFQUFFdkMsRUFBRUMsRUFBRWtHLEdBQUc5RixFQUFFNkYsR0FBR0ssRUFBRUwsSUFBSUMsSUFBSUssR0FBR1gsS0FBS3NOLElBQUk1TSxHQUFHdkcsSUFBSXdHLEdBQUdoRSxFQUFFMEQsR0FBR0QsRUFBRUUsSUFBSUssR0FBRyxPQUFPb3NCLEdBQUczc0IsRUFBRS9FLEVBQUV5TSxRQUFRek0sRUFBRVUsVUFBVWszQixZQUFZLFNBQVM1M0IsRUFBRWMsRUFBRVAsRUFBRVgsR0FBR3NCLEtBQUs4NEQsaUJBQWlCaDZELEVBQUUsZUFBZSxJQUFJLElBQUlULEVBQUV1QixFQUFFZCxFQUFFODdCLEdBQUc5N0IsR0FBR3FCLEVBQUU5QixFQUFFa04sTUFBTSxHQUFHM04sRUFBRVMsRUFBRWtOLE1BQU0sR0FBRzVMLEVBQUVpeEIsR0FBRyxDQUFDendCLEVBQUVkLEdBQUcsU0FBU2UsRUFBRUosS0FBS3NPLFNBQVMzTyxFQUFFcU4sUUFBUW5QLEVBQUVtQyxLQUFLc08sU0FBU2pRLEVBQUUyTyxRQUFRL08sRUFBRSxFQUFFQSxFQUFFa0MsSUFBSWxDLEVBQUUsQ0FBQyxJQUFJNEYsRUFBRTVGLEVBQUVMLEVBQUU4QixFQUFFLElBQUlnRyxhQUFhOUgsRUFBRSxHQUFHOEIsRUFBRSxHQUFHN0IsRUFBRWdHLEdBQUcsSUFBSSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVwRSxFQUFFd0IsU0FBUzRDLEVBQUVwRSxFQUFFb0UsR0FBR3BFLEVBQUVvRSxFQUFFLEdBQUdqRyxFQUFFZ0csRUFBRUMsR0FBRyxJQUFJLElBQUk1RixFQUFFZzJCLEdBQUd4MUIsRUFBRThNLFlBQVl4SCxFQUFFL0YsRUFBRW9CLEVBQUVyQixFQUFFLEVBQUVBLEVBQUVxQixJQUFJckIsRUFBRSxDQUFDLElBQUltRyxFQUFFakcsSUFBSWtDLEVBQUU0RCxFQUFFaEcsR0FBRzBCLEVBQUV3QixPQUFPLElBQUksSUFBSTZDLEVBQUUsRUFBRUEsRUFBRXJFLEVBQUV3QixPQUFPNkMsSUFBSSxHQUFHSSxFQUFFekUsRUFBRXFFLEdBQUcsQ0FBQzNELEVBQUU0RCxFQUFFaEcsR0FBRytGLEVBQUUsUUFBUSxPQUFPcEUsR0FBR2IsRUFBRVUsVUFBVTRQLE9BQU8sU0FBU3RRLEVBQUVjLEVBQUVQLEVBQUVYLEdBQUdzQixLQUFLODRELGlCQUFpQmg2RCxFQUFFLFVBQVUsSUFBSVQsRUFBRSxJQUFJcUgsYUFBYTVHLEVBQUV3TSxLQUFLMUwsR0FBR3ZCLEVBQUVnUixLQUFLM1EsR0FBRyxJQUFJLElBQUl5QixFQUFFSCxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRcFAsRUFBRSxFQUFFQSxFQUFFa0IsRUFBRXdNLE9BQU8xTixFQUFFdUMsRUFBRXZDLElBQUksR0FBR3VDLEVBQUV2QyxHQUFHZ0MsSUFBSXZCLEVBQUVULEVBQUVnQyxFQUFFTyxFQUFFdkMsSUFBSXlCLEdBQUcsT0FBT2l4QixHQUFHanlCLEVBQUUsQ0FBQ1MsRUFBRXdNLEtBQUsxTCxHQUFHLFVBQVVkLEVBQUVVLFVBQVVpK0Isa0JBQWtCLFNBQVMzK0IsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsR0FBRyxPQUFPMkIsS0FBSzg0RCxpQkFBaUJoNkQsRUFBRSxxQkFBcUJra0MsR0FBR2hqQyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRaE4sS0FBS3NPLFNBQVMxTyxFQUFFb04sUUFBUTNOLEVBQUVYLEVBQUVMLElBQUlTLEVBQUVVLFVBQVVnWCxJQUFJLFNBQVMxWCxHQUFHLE9BQU9rQixLQUFLdTVELFNBQVN6NkQsR0FBRSxJQUFLQSxFQUFFVSxVQUFVa1gsS0FBSyxTQUFTNVgsR0FBRyxPQUFPa0IsS0FBS3U1RCxTQUFTejZELEdBQUUsSUFBS0EsRUFBRVUsVUFBVSs1RCxTQUFTLFNBQVN6NkQsRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUVQLEVBQUV5TSxNQUFNLEdBQUc3TSxFQUFFSSxFQUFFeU0sTUFBTSxHQUFHbE4sRUFBRSsyQixHQUFHdDJCLEVBQUV5TSxNQUFNLFdBQVdwTCxFQUFFaTFCLEdBQUd0MkIsRUFBRXlNLE1BQU0sV0FBVzNOLEVBQUUreEIsR0FBRzd3QixHQUFHNE8sS0FBS3JPLEVBQUVYLEdBQUdpQixFQUFFb3dCLEdBQUdqeEIsR0FBRzRPLEtBQUtyTyxFQUFFWCxHQUFHMEIsRUFBRSxFQUFFQSxFQUFFZixFQUFFZSxJQUFJLElBQUksSUFBSXZDLEVBQUVELEVBQUVvSCxNQUFNLENBQUM1RSxFQUFFLEdBQUcsQ0FBQyxFQUFFMUIsSUFBSVQsRUFBRTBCLEVBQUVxRixNQUFNLENBQUM1RSxFQUFFLEdBQUcsQ0FBQyxFQUFFMUIsSUFBSW1GLEVBQUV5ckIsR0FBR3p4QixFQUFFSSxHQUFHeUIsRUFBRU0sS0FBS3NPLFNBQVN0TyxLQUFLdzZDLFFBQVEzMkMsRUFBRWpFLEdBQUdvTixRQUFRbEosRUFBRSxFQUFFQSxFQUFFcEYsRUFBRW9GLElBQUksQ0FBQyxJQUFJNUYsRUFBRTBrQyxHQUFHbGpDLEVBQUVvRSxHQUFHekYsRUFBRThOLE9BQU8vTCxFQUFFMUIsRUFBRW9GLEdBQUc1RixFQUFFMnhCLEtBQUsxdkIsRUFBRWdNLE9BQU8vTCxFQUFFMUIsRUFBRW9GLEdBQUc1RixFQUFFK3hCLEtBQUssT0FBT1gsR0FBR2p4QixFQUFFbU8sV0FBV3JNLEVBQUVxTSxZQUFZa0IsS0FBS3JPLEVBQUVYLElBQUlJLEVBQUVVLFVBQVVnN0MsUUFBUSxTQUFTMTdDLEVBQUVjLEdBQUcsSUFBSVAsRUFBRVAsRUFBRXlPLE9BQU83TyxFQUFFVyxFQUFFaU0sS0FBSyxHQUFHdEwsS0FBS3c1RCxjQUFjOTZELEdBQUcsQ0FBQyxJQUFJTCxFQUFFMkIsS0FBS3k1RCxVQUFVcDZELEVBQUVYLEVBQUVrQixHQUFHOE4sS0FBSzVPLEVBQUV5TSxNQUFNLEdBQUd6TSxFQUFFeU0sTUFBTSxJQUFJLE9BQU8zTCxJQUFJdkIsRUFBRWl4QixHQUFHSyxHQUFHdHhCLEdBQUc4UyxJQUFJaWYsR0FBRzF4QixJQUFJcXhCLEdBQUcxeEIsR0FBRzhTLElBQUlpZixHQUFHMXhCLE1BQU1MLEVBQUUsSUFBSThCLEVBQUVILEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVFwUCxFQUFFLFNBQVNrQixHQUFHLElBQUksSUFBSWMsRUFBRSxJQUFJOEYsYUFBYTVHLEVBQUVvQyxPQUFPLEdBQUc3QixFQUFFLElBQUlxRyxhQUFhNUcsRUFBRW9DLE9BQU8sR0FBR3hDLEVBQUUsRUFBRUEsRUFBRUksRUFBRW9DLE9BQU94QyxHQUFHLEVBQUVrQixFQUFFbEIsRUFBRSxHQUFHSSxFQUFFSixHQUFHVyxFQUFFWCxFQUFFLEdBQUdJLEVBQUVKLEVBQUUsR0FBRyxNQUFNLENBQUNteEIsS0FBS2p3QixFQUFFcXdCLEtBQUs1d0IsR0FBbkosQ0FBdUpXLEtBQUswNUQseUJBQXlCdjVELEVBQUV6QixFQUFFa0IsSUFBSSxPQUFPMHZCLEdBQUcxeEIsRUFBRWl5QixLQUFLanlCLEVBQUVxeUIsTUFBTXZpQixLQUFLNU8sRUFBRXlNLE1BQU0sR0FBR3pNLEVBQUV5TSxNQUFNLEtBQUt6TSxFQUFFVSxVQUFVZzZELGNBQWMsU0FBUzE2RCxHQUFHLE9BQU8sSUFBSUEsRUFBRUEsRUFBRSxJQUFJQSxFQUFFVSxVQUFVaTZELFVBQVUsU0FBUzM2RCxFQUFFYyxFQUFFUCxHQUFHLEdBQUcsSUFBSU8sRUFBRSxPQUFPZCxFQUFFLElBQUlKLEVBQUVzQixLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRM08sRUFBRXVCLEVBQUUsRUFBRU8sRUFBRSxTQUFTckIsR0FBRyxJQUFJLElBQUljLEVBQUU2RCxLQUFLZ0IsS0FBSzNGLEVBQUVvQyxPQUFPLEdBQUc3QixFQUFFLElBQUlxRyxhQUFhOUYsR0FBR2xCLEVBQUUsSUFBSWdILGFBQWE5RixHQUFHdkIsRUFBRSxFQUFFQSxFQUFFUyxFQUFFb0MsT0FBTzdDLEdBQUcsRUFBRWdCLEVBQUVvRSxLQUFLOEksTUFBTWxPLEVBQUUsSUFBSVMsRUFBRVQsR0FBR0ssRUFBRStFLEtBQUs4SSxNQUFNbE8sRUFBRSxJQUFJUyxFQUFFVCxFQUFFLEdBQUcsTUFBTSxDQUFDd3hCLEtBQUt4d0IsRUFBRTR3QixLQUFLdnhCLEdBQWpMLENBQXFMQSxHQUFHZCxFQUFFMHhCLEdBQUdudkIsRUFBRTB2QixLQUFLMXZCLEVBQUU4dkIsTUFBTTFpQixPQUFPNU4sRUFBRSxTQUFTYixHQUFHLElBQUksSUFBSWMsRUFBRTZELEtBQUs4SSxNQUFNek4sRUFBRW9DLE9BQU8sR0FBRzdCLEVBQUUsSUFBSXFHLGFBQWE5RixHQUFHbEIsRUFBRSxJQUFJZ0gsYUFBYTlGLEdBQUd2QixFQUFFLEVBQUVBLEVBQUVTLEVBQUVvQyxPQUFPN0MsR0FBRyxFQUFFZ0IsRUFBRW9FLEtBQUs4SSxNQUFNbE8sRUFBRSxJQUFJUyxFQUFFVCxHQUFHSyxFQUFFK0UsS0FBSzhJLE1BQU1sTyxFQUFFLElBQUlTLEVBQUVULEVBQUUsR0FBRyxNQUFNLENBQUN3eEIsS0FBS3h3QixFQUFFNHdCLEtBQUt2eEIsR0FBbEwsQ0FBc0xBLEdBQUcwQixFQUFFa3ZCLEdBQUczdkIsRUFBRWt3QixLQUFLbHdCLEVBQUVzd0IsTUFBTTFpQixPQUFPM1AsRUFBRW9DLEtBQUt5NUQsVUFBVTc3RCxFQUFFUyxFQUFFZ0IsR0FBR2UsRUFBRUosS0FBS3k1RCxVQUFVcjVELEVBQUUvQixFQUFFZ0IsR0FBRyxJQUFJeEIsRUFBRSxTQUFTaUIsRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUUsSUFBSXFHLGFBQWE1RyxFQUFFLEdBQUdKLEVBQUUsSUFBSWdILGFBQWE1RyxFQUFFLEdBQUdULEVBQUUsRUFBRUEsRUFBRW9GLEtBQUtnQixLQUFLM0YsRUFBRSxHQUFHVCxJQUFJLENBQUMsSUFBSThCLEdBQUdQLEVBQUUsR0FBRyxHQUFHNkQsS0FBS3MvQixJQUFJMWtDLEVBQUVTLEdBQUdPLEVBQUVoQixHQUFHb0YsS0FBSzRRLElBQUlsVSxHQUFHekIsRUFBRUwsR0FBR29GLEtBQUsyUSxJQUFJalUsR0FBRyxNQUFNLENBQUMwdkIsS0FBS3h3QixFQUFFNHdCLEtBQUt2eEIsR0FBbEwsQ0FBc0xrQixFQUFFUCxHQUFHcEIsRUFBRXF4QixHQUFHenhCLEVBQUVneUIsS0FBS2h5QixFQUFFb3lCLE1BQU1oZixJQUFJN1EsR0FBR3lELEVBQUVqRyxFQUFFOFMsSUFBSXpTLEdBQUd5QixFQUFFOUIsRUFBRWlULElBQUk1UyxHQUFHNkYsRUFBRTZyQixHQUFHOXJCLEdBQUdzQixPQUFPd3FCLEdBQUdqd0IsSUFBSXhCLEVBQUU2eEIsR0FBR2xzQixHQUFHc0IsT0FBTzRxQixHQUFHcndCLElBQUksT0FBTzR2QixHQUFHeHJCLEVBQUU1RixHQUFHcVAsUUFBUXpPLEVBQUVVLFVBQVVrNkQseUJBQXlCLFNBQVM1NkQsRUFBRWMsRUFBRVAsR0FBRyxJQUFJLElBQUlYLEVBQUUsSUFBSWdILGFBQWEsRUFBRTlGLEdBQUd2QixFQUFFLEVBQUVBLEVBQUV1QixFQUFFdkIsSUFBSSxDQUFDLElBQUksSUFBSThCLEVBQUUsRUFBRXZDLEVBQUUsRUFBRStCLEVBQUUsRUFBRUEsRUFBRUMsRUFBRUQsSUFBSSxDQUFDLElBQUlTLEVBQUUwaUMsR0FBR3prQyxFQUFFc0IsRUFBRUMsRUFBRVAsR0FBR3hCLEVBQUUra0MsR0FBRzlqQyxFQUFFYSxHQUFHUSxHQUFHdEMsRUFBRWd5QixLQUFLenZCLEVBQUV5dkIsS0FBS2h5QixFQUFFb3lCLEtBQUs3dkIsRUFBRTZ2QixLQUFLcnlCLEdBQUdDLEVBQUVneUIsS0FBS3p2QixFQUFFNnZCLEtBQUtweUIsRUFBRW95QixLQUFLN3ZCLEVBQUV5dkIsS0FBS3h3QixJQUFJYyxHQUFHUCxFQUFFaEMsR0FBR2dDLEdBQUdpakMsR0FBR25rQyxFQUFFeUIsRUFBRXZDLEVBQUVTLEdBQUcsT0FBT0ssR0FBR0ksRUFBRVUsVUFBVStXLGFBQWEsU0FBU3pYLEVBQUVjLEVBQUVQLEdBQUd5RSxFQUFFLFNBQVN6RSxHQUFFLFdBQVcsTUFBTSwrREFBK0RBLEtBQUl5RSxFQUFFbEUsRUFBRSxHQUFFLFdBQVcsTUFBTSxzREFBc0RBLEtBQUksSUFBSSxJQUFJbEIsRUFBRUksRUFBRXlNLE1BQU0sR0FBR2xOLEVBQUVTLEVBQUV5TSxNQUFNLEdBQUdwTCxFQUFFckIsRUFBRXlNLE1BQU0sR0FBRzNOLEVBQUVrQixFQUFFeU0sTUFBTSxHQUFHNUwsRUFBRXRCLEVBQUV1QixFQUFFUSxFQUFFRCxFQUFFUCxFQUFFL0IsRUFBRUQsR0FBR2dDLEVBQUVBLEdBQUczQixFQUFFK0IsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUW5KLEVBQUUsSUFBSTZCLGFBQWFoSCxFQUFFaUIsRUFBRVMsRUFBRXZDLEdBQUc2QixFQUFFLEVBQUV4QixFQUFFLEVBQUVBLEVBQUVRLElBQUlSLEVBQUUsSUFBSSxJQUFJOEYsRUFBRSxFQUFFQSxFQUFFckUsSUFBSXFFLEVBQUUsSUFBSSxJQUFJaEcsRUFBRXlGLEtBQUs4SSxNQUFNdkksRUFBRXBFLEdBQUd1RSxFQUFFSCxFQUFFcEUsRUFBRW1FLEVBQUUsRUFBRUEsRUFBRTNELElBQUkyRCxFQUFFLElBQUksSUFBSUssRUFBRVgsS0FBSzhJLE1BQU14SSxFQUFFbkUsR0FBR3lFLEdBQUdGLEVBQUV2RSxFQUFFbUUsRUFBRW5FLEdBQUcvQixFQUFFMkcsRUFBRSxFQUFFQSxFQUFFM0csSUFBSTJHLEVBQUUsQ0FBQyxJQUFJRyxFQUFFSCxFQUFFSCxFQUFFekcsR0FBR3dHLEVBQUVqRSxHQUFHbkMsRUFBRUssRUFBRUgsSUFBSTJGLEVBQUVuRSxLQUFLekIsRUFBRTBHLEdBQUcsT0FBTzZyQixHQUFHM3NCLEVBQUUsQ0FBQ25GLEVBQUVpQixFQUFFUyxFQUFFdkMsS0FBS2lCLEVBQUVVLFVBQVV3NUQsb0JBQW9CLFNBQVNsNkQsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFMi9CLEdBQUdsL0IsRUFBRXlNLE1BQU0zTCxFQUFFMkwsT0FBT3BMLEVBQUVpMUIsR0FBRy8yQixFQUFFZ0IsR0FBR3pCLEVBQUVvQyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRck4sRUFBRUssS0FBS3NPLFNBQVMxTyxFQUFFb04sUUFBUTVNLEVBQUV5OUIsR0FBRy8rQixFQUFFeU0sTUFBTWxOLEdBQUdSLEVBQUVnZ0MsR0FBR2orQixFQUFFMkwsTUFBTWxOLEdBQUdKLEVBQUVrQyxFQUFFZ00sT0FBTyxHQUFHL0wsRUFBRWMsT0FBT3JELEVBQUVxRCxTQUFTLEVBQUUsSUFBSSxJQUFJMkMsRUFBRSxFQUFFQSxFQUFFNUYsRUFBRWlELFNBQVMyQyxFQUFFNUYsRUFBRTRGLEdBQUduRixFQUFFZCxFQUFFaUcsRUFBRWpHLEVBQUVzRCxRQUFRdkIsRUFBRWtFLEVBQUVsRSxFQUFFdUIsYUFBYSxDQUFDLElBQUl4QixFQUFFTSxLQUFLaU8sV0FBV25QLEdBQUdnRixFQUFFOUQsS0FBS2lPLFdBQVdyTyxHQUFHMUIsRUFBRSxTQUFTbUIsR0FBRyxJQUFJaEIsRUFBRThCLEVBQUVtTSxXQUFXak4sR0FBR3dFLEVBQUV4RixFQUFFMkcsT0FBT2xHLEVBQUV1TSxNQUFNakwsRUFBRTJDLFNBQVEsU0FBU2pFLEdBQUcsT0FBTytFLEVBQUUvRSxHQUFHLEtBQUksSUFBSVosRUFBRXdCLEVBQUUyTSxXQUFXeEksR0FBR0csRUFBRTNGLEVBQUUyRyxPQUFPcEYsRUFBRXlMLE1BQU14TixFQUFFa0YsU0FBUSxTQUFTakUsR0FBRyxPQUFPa0YsRUFBRWxGLEdBQUcsS0FBSSxJQUFJZCxFQUFFOEYsRUFBRXVJLFdBQVdySSxHQUFHL0YsRUFBRW9CLEdBQUdYLEVBQUVkLEVBQUVNLEdBQUd5QixFQUFFM0IsS0FBSyxJQUFJNkYsRUFBRSxFQUFFQSxFQUFFNUYsRUFBRWlELFNBQVMyQyxFQUFFM0YsRUFBRTJGLEdBQUcsT0FBTzFELEVBQUVxTSxZQUFZMU4sRUFBRVUsVUFBVXU1RCwyQkFBMkIsU0FBU2o2RCxFQUFFYyxFQUFFUCxHQUFHLElBQUlYLEVBQUVzL0IsR0FBR2wvQixFQUFFeU0sTUFBTTNMLEVBQUUyTCxPQUFPbE4sRUFBRSsyQixHQUFHMTJCLEVBQUUsV0FBV3lCLEVBQUVpMUIsR0FBRzEyQixFQUFFLFdBQVdkLEVBQUVvQyxLQUFLc08sU0FBU3hQLEVBQUVrTyxRQUFRck4sRUFBRUssS0FBS3NPLFNBQVMxTyxFQUFFb04sUUFBUTVNLEVBQUV5OUIsR0FBRy8rQixFQUFFeU0sTUFBTTdNLEdBQUdiLEVBQUVnZ0MsR0FBR2orQixFQUFFMkwsTUFBTTdNLEdBQUdULEVBQUVJLEVBQUU4TixPQUFPdEksRUFBRTFELEVBQUVnTSxPQUFPLEdBQUcvTCxFQUFFYyxPQUFPckQsRUFBRXFELFNBQVMsRUFBRSxJQUFJLElBQUl4QixFQUFFLEVBQUVBLEVBQUV6QixFQUFFaUQsT0FBT3hCLElBQUksQ0FBQyxJQUFJb0UsRUFBRXBFLEVBQUU5QixFQUFFc0QsT0FBT2hELEVBQUV3QixFQUFFQyxFQUFFdUIsT0FBTzhDLEVBQUUzRSxFQUFFekIsRUFBRSxFQUFFa0csR0FBR2xHLEVBQUUsRUFBRWtHLEVBQUUsR0FBR25FLEVBQUUsRUFBRXpCLEdBQUd5QixFQUFFLEVBQUV6QixFQUFFLElBQUlELEVBQUV5QixHQUFHc0UsRUFBRTZyQixLQUFLaHNCLEVBQUVuRSxHQUFHc0UsRUFBRWlzQixTQUFTLENBQUMsSUFBSWp5QixFQUFFZ0MsS0FBS2lPLFdBQVdqTyxLQUFLZ0wsS0FBS3ZNLElBQUlLLEVBQUVrTyxRQUFReXJDLGVBQWU1b0IsTUFBTTFyQixFQUFFbkUsS0FBS2lPLFdBQVdqTyxLQUFLZ0wsS0FBS3ZNLElBQUltQixFQUFFb04sUUFBUXlyQyxlQUFlNW9CLE1BQU05ckIsRUFBRSxTQUFTckYsR0FBRyxJQUFJeUIsRUFBRTlCLEVBQUVpTyxXQUFXNU4sR0FBR2dCLEVBQUVTLEVBQUU2RSxPQUFPbEcsRUFBRXVNLE1BQU1qTCxFQUFFMkMsU0FBUSxTQUFTakUsR0FBRyxPQUFPWSxFQUFFWixHQUFHLEtBQUksSUFBSWdGLEVBQUU5RixFQUFFcU8sV0FBVzNNLEdBQUd4QixFQUFFaUMsRUFBRTZFLE9BQU9wRixFQUFFeUwsTUFBTXhOLEVBQUVrRixTQUFRLFNBQVNqRSxHQUFHLE9BQU9aLEVBQUVZLEdBQUcsS0FBSSxJQUFJa0YsRUFBRUcsRUFBRWtJLFdBQVduTyxHQUFHNkYsRUFBRTFFLEVBQUV6QixFQUFFLEVBQUVrRyxHQUFHbEcsRUFBRSxFQUFFa0csRUFBRSxHQUFHbkUsRUFBRSxFQUFFcUUsR0FBR3JFLEVBQUUsRUFBRXFFLEVBQUUsSUFBSS9GLEVBQUVTLEdBQUdxRixFQUFFOHJCLEtBQUtoc0IsRUFBRW5GLEdBQUdxRixFQUFFa3NCLE1BQU0sSUFBSXZ3QixFQUFFLEVBQUVBLEVBQUV6QixFQUFFaUQsT0FBT3hCLElBQUlxRSxFQUFFckUsR0FBRyxPQUFPTSxLQUFLd3ZCLFFBQVFueEIsRUFBRW1PLFdBQVdyTSxFQUFFcU0sYUFBYTFOLEVBQUVVLFVBQVVzRCxNQUFNLFNBQVNoRSxFQUFFYyxFQUFFUCxHQUFHLE9BQU9na0MsR0FBR3ZrQyxFQUFFYyxFQUFFUCxJQUFJUCxFQUFFVSxVQUFVZ1AsUUFBUSxhQUFhMVAsRUFBRVUsVUFBVTI3QixlQUFlLFdBQVcsT0FBTyxJQUFJcjhCLEVBQUVVLFVBQVU0N0IsUUFBUSxXQUFXLE9BQU8sTUFBTXQ4QixFQUFFVSxVQUFVaytCLGNBQWMsU0FBUzUrQixFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxFQUFFOEIsR0FBRyxJQUFJLElBQUl2QyxFQUFFa0IsRUFBRXlNLE1BQU01TCxFQUFFL0IsRUFBRSxHQUFHd0MsRUFBRXhDLEVBQUUsR0FBR0MsRUFBRUQsRUFBRSxHQUFHSyxFQUFFTCxFQUFFLEdBQUdpRyxFQUFFakUsRUFBRTJMLE1BQU0sR0FBRzdMLEVBQUVoQixFQUFFLEdBQUdvRixFQUFFcEYsRUFBRSxHQUFHUixFQUFFazNCLEdBQUcsQ0FBQ3Z4QixFQUFFbkUsRUFBRW9FLEVBQUU3RixHQUFHYSxFQUFFbU0sT0FBT2pILEVBQUVoRSxLQUFLc08sU0FBUzFPLEVBQUVvTixRQUFRaFAsRUFBRWdDLEtBQUtzTyxTQUFTalAsRUFBRTJOLFFBQVE3SSxFQUFFbkUsS0FBS3NPLFNBQVN4UCxFQUFFa08sUUFBUWpKLEVBQUVqRixFQUFFc04sUUFBUWhJLEVBQUVsRyxFQUFFa08sUUFBUS9ILEVBQUUsRUFBRUEsRUFBRVIsRUFBRVEsSUFBSSxDQUFDLElBQUlHLEVBQUUsRUFBRUgsRUFBRU0sRUFBRVgsRUFBRVEsR0FBR0ssRUFBRWIsRUFBRVEsRUFBRSxHQUFHTyxFQUFFZixFQUFFUSxFQUFFLEdBQUdTLEVBQUVqQixFQUFFUSxFQUFFLEdBQUdhLEVBQUVySCxFQUFFcUcsR0FBRyxLQUFLZ0IsR0FBRzFGLEdBQUcsSUFBSSxJQUFJOEYsRUFBRS9GLEVBQUUsR0FBR3FGLEVBQUVKLElBQUl2RSxFQUFFLElBQUlWLEVBQUUsR0FBRyxFQUFFbUcsRUFBRS9CLEVBQUUsR0FBR21CLEVBQUVKLElBQUloSCxFQUFFLElBQUlpRyxFQUFFLEdBQUcsRUFBRWdDLEVBQUUsRUFBRUEsRUFBRXBHLEVBQUVvRyxJQUFJLENBQUMsSUFBSUcsRUFBRXZHLEVBQUUsRUFBRWlGLEdBQUd2RSxFQUFFLEdBQUcwRixFQUFFTCxFQUFFLElBQUlkLEVBQUVJLElBQUkzRSxFQUFFLEdBQUcsR0FBRzZGLEVBQUUsR0FBR0EsRUFBRTdGLEVBQUUsRUFBRSxJQUFJLElBQUk4RixFQUFFLEVBQUVBLEVBQUVwQyxFQUFFb0MsSUFBSSxJQUFJLElBQUloQyxFQUFFLEVBQUVBLEVBQUVqRyxFQUFFaUcsSUFBSSxDQUFDLElBQUlpQyxFQUFFakMsRUFBRWdDLEVBQUU5QixFQUFFLEdBQUcwQixFQUFFMUIsRUFBRSxHQUFHQyxFQUFFRCxFQUFFLEdBQUdsRyxFQUFFaU8sT0FBT2hHLEdBQUdoRyxPQUFPLEdBQUcsYUFBYTlCLEVBQUUsQ0FBQyxJQUFJK0gsRUFBRTNDLEtBQUs4SSxNQUFNdEcsR0FBR0ksRUFBRTVDLEtBQUtnQixLQUFLd0IsR0FBR00sRUFBRU4sRUFBRUcsRUFBRSxJQUFJRixFQUFFLEVBQUVBLEVBQUVwQyxFQUFFb0MsSUFBSyxJQUFJZ0IsRUFBRXBELEVBQUUsRUFBRWUsR0FBR2hILEVBQUUsR0FBR3FJLEVBQUVMLEVBQUUsSUFBSWhCLEVBQUVJLElBQUlwSCxFQUFFLElBQUksR0FBR3FKLEVBQUVySixFQUFFLEVBQUUsSUFBSXFHLEVBQUUsRUFBRUEsRUFBRWpHLEVBQUVpRyxJQUFLaUMsRUFBRWpDLEVBQUVnQyxFQUFFOUIsRUFBRSxHQUFHMEIsRUFBRTFCLEVBQUUsR0FBR0MsRUFBRUQsRUFBRSxHQUFHbEcsRUFBRWlPLE9BQU9oRyxHQUFHaEcsTUFBTSxDQUFDLElBQUlxRyxFQUFFL0MsS0FBSzhJLE1BQU1yRixHQUFHVCxFQUFFaEQsS0FBS2dCLEtBQUt5QyxHQUFHUixFQUFFUSxFQUFFVixFQUFFLElBQUl0QyxFQUFFLEVBQUVBLEVBQUVqRyxFQUFFaUcsSUFBSSxDQUFDLElBQUl5QyxFQUFFeEMsRUFBRWdDLEVBQUVqQyxFQUFFc0MsRUFBRXpDLEVBQUUsR0FBR3FDLEVBQUVyQyxFQUFFLEdBQUdzQixFQUFFdEIsRUFBRSxJQUFJNkMsRUFBRXpDLEVBQUVnQyxFQUFFakMsRUFBRXVDLEVBQUUxQyxFQUFFLEdBQUdxQyxFQUFFckMsRUFBRSxHQUFHc0IsRUFBRXRCLEVBQUUsSUFBSThDLEVBQUUxQyxFQUFFZ0MsRUFBRWpDLEVBQUVzQyxFQUFFekMsRUFBRSxHQUFHc0MsRUFBRXRDLEVBQUUsR0FBR3NCLEVBQUV0QixFQUFFLElBQUlnRCxFQUFFSixHQUFHQyxFQUFFRCxHQUFHRCxFQUFFTyxFQUFFSixHQUFHMUMsRUFBRWdDLEVBQUVqQyxFQUFFdUMsRUFBRTFDLEVBQUUsR0FBR3NDLEVBQUV0QyxFQUFFLEdBQUdzQixFQUFFdEIsRUFBRSxJQUFJOEMsR0FBR0gsRUFBRVAsRUFBRWpDLEVBQUVnQyxFQUFFOUIsRUFBRSxHQUFHMEIsRUFBRTFCLEVBQUUsR0FBR0MsRUFBRUQsRUFBRSxHQUFHbEcsRUFBRWlPLE9BQU9oRyxHQUFHWSxHQUFHRSxFQUFFRixHQUFHUixTQUFVLElBQUlMLEVBQUUsRUFBRUEsRUFBRXBDLElBQUlvQyxFQUFFLENBQUMsSUFBSWdCLEVBQUUsSUFBSUEsRUFBRXBELEVBQUUsRUFBRWUsR0FBR2hILEVBQUUsR0FBR3FJLEVBQUVMLEVBQUUsSUFBSWhCLEVBQUVJLElBQUlwSCxFQUFFLElBQUksR0FBR3FKLEVBQUVySixFQUFFLEVBQUUsSUFBSXFHLEVBQUUsRUFBRUEsRUFBRWpHLEVBQUVpRyxJQUFLaUMsRUFBRWpDLEVBQUVnQyxFQUFFOUIsRUFBRSxHQUFHMEIsRUFBRTFCLEVBQUUsR0FBR0MsRUFBRUQsRUFBRSxHQUFHbEcsRUFBRWlPLE9BQU9oRyxHQUFHaEcsTUFBTSxDQUFDLElBQUlnSCxFQUFFMUQsS0FBS3FELE1BQU1JLEdBQUdHLEVBQUU1RCxLQUFLcUQsTUFBTWIsR0FBRyxJQUFJL0IsRUFBRSxFQUFFQSxFQUFFakcsRUFBRWlHLElBQUksQ0FBQyxJQUFJc0QsRUFBRXRELEVBQUVpRCxFQUFFcEQsRUFBRSxHQUFHc0QsRUFBRXRELEVBQUUsR0FBR3NCLEVBQUV0QixFQUFFLEdBQUcyRCxFQUFFeEQsRUFBRWdDLEVBQUU5QixFQUFFLEdBQUcwQixFQUFFMUIsRUFBRSxHQUFHQyxFQUFFRCxFQUFFLEdBQUdsRyxFQUFFaU8sT0FBT3pFLEdBQUd2RCxFQUFFcUQsT0FBTyxPQUFPdEosRUFBRXNPLFlBQVkxTixFQUFFVSxVQUFVbStCLGNBQWMsU0FBUzcrQixFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLElBQUlMLEVBQUVpN0IsR0FBRyxFQUFFeDZCLEVBQUVPLEdBQUdjLEVBQUU5QixFQUFFazdCLFVBQVUzN0IsRUFBRVMsRUFBRW03QixXQUFXNzVCLEVBQUV0QixFQUFFbzdCLFVBQVVyNUIsRUFBRS9CLEVBQUUrTixRQUFRdk8sRUFBRVEsRUFBRXE3QixXQUFXLE9BQU8xNUIsS0FBSzI1RCxRQUFRNzZELEVBQUVjLEVBQUVQLEVBQUV4QixFQUFFOEIsRUFBRS9CLEVBQUV1QyxFQUFFQyxFQUFFMUIsR0FBRSxJQUFLSSxFQUFFVSxVQUFVMjlCLFNBQVMsU0FBU3IrQixFQUFFYyxHQUFHLElBQUlQLEVBQUVPLEVBQUUyTCxNQUFNN00sRUFBRVcsRUFBRUEsRUFBRTZCLE9BQU8sR0FBRzdDLEVBQUU4NkIsR0FBR3I2QixFQUFFYyxHQUFHTyxFQUFFOUIsRUFBRSxHQUFHVCxFQUFFUyxFQUFFLEdBQUdzQixFQUFFdEIsRUFBRSxHQUFHK0IsRUFBRS9CLEVBQUUsR0FBRyxHQUFHLElBQUlULEVBQUUsT0FBT3N5QixHQUFHLEdBQUcvdkIsRUFBRXJCLEVBQUVtTSxPQUFPLElBQUksSUFBSXBOLEVBQUUsSUFBSXFPLEdBQUcsQ0FBQ3RPLEVBQUUrQixHQUFHYixFQUFFbU0sT0FBT2hOLEVBQUUrQixLQUFLc08sU0FBUzFPLEVBQUVvTixRQUFRbkosRUFBRTdELEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVF0TixFQUFFLEVBQUVBLEVBQUU5QixFQUFFOEIsSUFBSSxDQUFDLElBQUksSUFBSW9FLEVBQUUsR0FBRzVGLEVBQUUsRUFBRThGLEVBQUUsRUFBRUEsRUFBRXRGLEVBQUVzRixJQUFJLENBQUMsSUFBSWhHLEVBQUVDLEVBQUV5QixFQUFFaEIsRUFBRXNGLEdBQUc5RixHQUFHRixFQUFFb0MsRUFBRTRELEdBQUdGLEVBQUUzQyxLQUFLbkQsR0FBRyxHQUFHRSxFQUFFLEdBQUdBLEdBQUdZLEVBQUV3TSxLQUFLM0wsRUFBRSxNQUFNLElBQUk0QyxNQUFNLG9CQUFvQnVCLEVBQUUsd0JBQXdCaEYsRUFBRXlNLE9BQU8sSUFBSSxJQUFJcEgsRUFBRSxFQUFFQSxFQUFFeEUsRUFBRXdFLElBQUl0RyxFQUFFc08sT0FBT3pNLEVBQUVDLEVBQUV3RSxHQUFHTixFQUFFM0YsRUFBRXlCLEVBQUV3RSxHQUFHLE9BQU90RyxFQUFFMk8sV0FBV2lCLFFBQVF0TixJQUFJckIsRUFBRVUsVUFBVTQ5QixVQUFVLFNBQVN0K0IsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFNDZCLEdBQUcsRUFBRXg2QixFQUFFTyxHQUFHaEIsRUFBRUssRUFBRTY2QixVQUFVcDVCLEVBQUV6QixFQUFFODZCLFdBQVc1N0IsRUFBRWMsRUFBRSs2QixVQUFVOTVCLEVBQUVqQixFQUFFME4sUUFBUWhNLEVBQUUxQixFQUFFZzdCLFdBQVc3N0IsRUFBRXV5QixHQUFHLEdBQUcsT0FBT3B3QixLQUFLMjVELFFBQVE3NkQsRUFBRWMsRUFBRVAsRUFBRWUsRUFBRXhDLEVBQUV1QyxFQUFFOUIsRUFBRXNCLEVBQUU5QixHQUFFLElBQUtpQixFQUFFVSxVQUFVNlAsS0FBSyxTQUFTdlEsRUFBRWMsRUFBRVAsR0FBRyxJQUFJWCxFQUFFbUgsRUFBRXhHLEVBQUVBLEdBQUdvSCxFQUFFN0csR0FBR3VFLEVBQUVyRixJQUFJLE9BQU9KLEVBQUUyUSxLQUFLelAsR0FBRzZNLEdBQUdDLEtBQUs1TixFQUFFLENBQUNxTixPQUFPek4sR0FBR1csSUFBSVAsRUFBRVUsVUFBVTJVLFNBQVMsU0FBU3JWLEdBQUcsR0FBRyxXQUFXQSxFQUFFbU0sTUFBTSxNQUFNLElBQUkxSSxNQUFNLGdEQUFnRCxPQUFPdkMsS0FBS3FQLEtBQUt2USxFQUFFeU0sTUFBTSxFQUFFek0sRUFBRW1NLFFBQVFuTSxFQUFFVSxVQUFVMFUsVUFBVSxTQUFTcFYsR0FBRyxJQUFJYyxFQUFFaUcsRUFBRS9HLEVBQUVtTSxNQUFNOUcsRUFBRXJGLEVBQUV5TSxRQUFRLE9BQU9rQixHQUFHQyxLQUFLNU4sRUFBRXlNLE1BQU0sQ0FBQ1ksT0FBT3ZNLEdBQUdkLEVBQUVtTSxRQUFRbk0sRUFBRVUsVUFBVXV4QixTQUFTLFNBQVNqeUIsRUFBRWMsRUFBRVAsR0FBRyxPQUFPMmhDLEdBQUdsaUMsRUFBRWMsRUFBRVAsSUFBSVAsRUFBRVUsVUFBVW02RCxRQUFRLFNBQVM3NkQsRUFBRWMsRUFBRVAsRUFBRVgsRUFBRUwsRUFBRThCLEVBQUV2QyxFQUFFK0IsRUFBRVMsRUFBRXZDLEdBQUcsSUFBSUksRUFBRSxDQUFDUyxFQUFFTCxFQUFFQSxHQUFHd0YsRUFBRTdELEtBQUtzTyxTQUFTeFAsRUFBRWtPLFFBQVF0TixFQUFFTSxLQUFLc08sU0FBUzFPLEVBQUVvTixRQUFRLEdBQUcsSUFBSXRPLEVBQUUsT0FBT3d4QixHQUFHLEdBQUc3d0IsRUFBRU8sRUFBRXFMLE9BQU8sSUFBSW5ILEVBQUUsSUFBSW9JLEdBQUdqTyxFQUFFMkIsRUFBRXFMLE9BQU9uSCxFQUFFcUksT0FBT2tELEtBQUtyUCxLQUFLc08sU0FBU2xPLEVBQUU0TSxRQUFRLElBQUksSUFBSSxJQUFJOU8sRUFBRSxFQUFFQSxFQUFFaUMsRUFBRWpDLElBQUksQ0FBQyxJQUFJLElBQUk4RixFQUFFLEdBQUdoRyxFQUFFLEVBQUVtRyxFQUFFLEVBQUVBLEVBQUV2RyxFQUFFdUcsSUFBSSxDQUFDLElBQUlKLEVBQUVGLEVBQUUzRixFQUFFTixFQUFFdUcsR0FBR0gsRUFBRTdDLEtBQUs0QyxHQUFHL0YsR0FBRytGLEVBQUVwRSxFQUFFd0UsR0FBRyxHQUFHbkcsRUFBRSxHQUFHQSxHQUFHVSxFQUFFTCxFQUFFLE1BQU0sSUFBSWtFLE1BQU0sb0JBQW9CeUIsRUFBRSx3QkFBd0IzRSxHQUFHLElBQUksSUFBSStFLEVBQUUsRUFBRUEsRUFBRS9GLEVBQUUrRixJQUFJdkcsRUFBRWlHLEVBQUVxSSxPQUFPbk8sRUFBRUssRUFBRStGLElBQUkxRSxFQUFFeEIsRUFBRUcsRUFBRStGLEdBQUdOLEVBQUVxSSxPQUFPbk8sRUFBRUssRUFBRStGLEdBQUcsSUFBSXhFLEVBQUV5TCxLQUFLM0wsRUFBRSxHQUFHQSxFQUFFeEIsRUFBRUcsRUFBRStGLEdBQUcsT0FBT04sRUFBRTBJLFdBQVdpQixRQUFRcE8sSUFBSVAsRUFBMXhuRCxHQUEreG5EOGYsR0FBR2pELGdCQUFnQixPQUFNLFdBQVcsT0FBTyxJQUFJZzlDLEtBQUksR0FBRyxJQUFJaUIsR0FBRyxXQUFXLFNBQVM5NkQsSUFBSWtCLEtBQUs2NUQsWUFBWSxJQUFJQyxZQUFZLE9BQU9oN0QsRUFBRVUsVUFBVStLLE1BQU0sU0FBU3pMLEVBQUVjLEdBQUcsT0FBTzJLLE1BQU16TCxFQUFFYyxJQUFJZCxFQUFFVSxVQUFVNEgsSUFBSSxXQUFXLE9BQU8yeUQsWUFBWTN5RCxPQUFPdEksRUFBRVUsVUFBVWlJLE9BQU8sU0FBUzNJLEVBQUVjLEdBQUcsR0FBRyxVQUFVQSxHQUFHLFNBQVNBLEVBQUUsTUFBTSxJQUFJMkMsTUFBTSxrREFBa0QzQyxHQUFHLE9BQU9JLEtBQUs2NUQsWUFBWXB5RCxPQUFPM0ksSUFBSUEsRUFBRVUsVUFBVW1JLE9BQU8sU0FBUzdJLEVBQUVjLEdBQUcsT0FBTyxJQUFJbzZELFlBQVlwNkQsR0FBRytILE9BQU83SSxJQUFJQSxFQUFsWixHQUF1WmxCLEVBQUVhLElBQUksZUFBZWIsRUFBRTZELFlBQVksVUFBVSxJQUFJbTRELElBQUksSUFBSUssR0FBK0NDLEdBQUcsV0FBVyxTQUFTcDdELElBQUlrQixLQUFLbTZELEtBQUssRUFBUSxJQUFRbjZELEtBQUs2NUQsWUFBWSxJQUFJNzVELEtBQUttNkQsS0FBS0wsWUFBWSxPQUFPaDdELEVBQUVVLFVBQVUrSyxNQUFNLFNBQVN6TCxFQUFFYyxHQUFHLE9BQU8sTUFBTWhDLEVBQUV3RCxPQUFPbUosTUFBTTNNLEVBQUV3RCxPQUFPbUosTUFBTXpMLEVBQUVjLElBQUksTUFBTXE2RCxLQUFLQSxHQUExTixFQUFRLEtBQTJOQSxHQUFHbjdELEVBQUVjLEtBQUtkLEVBQUVVLFVBQVU0SCxJQUFJLFdBQVcsSUFBSXRJLEVBQUVnZ0IsRUFBUXM3QyxTQUFTLE9BQU8sSUFBSXQ3RCxFQUFFLEdBQUdBLEVBQUUsR0FBRyxLQUFLQSxFQUFFVSxVQUFVaUksT0FBTyxTQUFTM0ksRUFBRWMsR0FBRyxHQUFHLFVBQVVBLEdBQUcsU0FBU0EsRUFBRSxNQUFNLElBQUkyQyxNQUFNLHNEQUFzRDNDLEdBQUcsT0FBT0ksS0FBSzY1RCxZQUFZcHlELE9BQU8zSSxJQUFJQSxFQUFFVSxVQUFVbUksT0FBTyxTQUFTN0ksRUFBRWMsR0FBRyxPQUFPLElBQUlkLEVBQUVvQyxPQUFPLEdBQUcsSUFBSWxCLEtBQUttNkQsS0FBS0gsWUFBWXA2RCxHQUFHK0gsT0FBTzdJLElBQUlBLEVBQXZpQixHQUE0aUJsQixFQUFFYSxJQUFJLFlBQVliLEVBQUU2RCxZQUFZLE9BQU8sSUFBSXk0RCxJQUFJLElBQUlHLEdBQUcsQ0FBQ3JpRCxRQUFRLEVBQUVDLE1BQU0sRUFBRXFpRCxPQUFPLEVBQUVDLE1BQU0sRUFBRXJpRCxLQUFLLEdBQUdzaUQsR0FBRyxFQUFFLFNBQVNDLEdBQUczN0QsRUFBRWMsR0FBRyxJQUFJLElBQUlQLEVBQUUsR0FBR1gsRUFBRSxFQUFFTCxFQUFFLFNBQVN1QixHQUFHLElBQUl2QixFQUFFdUIsRUFBRXpCLEtBQUtnQyxFQUFFUCxFQUFFcUwsTUFBTXJOLEVBQUVnQyxFQUFFMkwsTUFBTTVMLEVBQUV3RSxFQUFFdkcsR0FBR3dDLE9BQUUsRUFBTyxHQUFHLGlCQUFpQlIsRUFBRSxDQUFDLElBQUkvQixFQUFFK0IsRUFBRTg2RCxhQUFhLEdBQUcsVUFBVTc4RCxFQUFFb04sT0FBTyxXQUFXcE4sRUFBRW9OLE1BQU0sTUFBTSxJQUFJMUksTUFBTSxVQUFVM0MsRUFBRXpCLEtBQUssbUNBQW1DTixFQUFFb04sTUFBTSw4REFBOEQsSUFBSWhOLEVBQUVvOEQsR0FBR3g4RCxFQUFFb04sT0FBT3BILEVBQUUvRSxFQUFFa0csTUFBTXRHLEVBQUVBLEVBQUVpQixFQUFFMUIsR0FBR3lCLEVBQUUsVUFBVTdCLEVBQUVvTixNQUFNLElBQUlyRixXQUFXL0IsR0FBRyxJQUFJMm1DLFlBQVkzbUMsR0FBRyxHQUFHLFlBQVkxRCxFQUFFQyxFQUFFc0YsYUFBYTRKLEtBQUs1UCxHQUFFLFNBQVNaLEdBQUcsT0FBT0EsRUFBRWpCLEVBQUU4OEQsTUFBTTk4RCxFQUFFK0YsV0FBVSxDQUFDLEdBQUcsVUFBVXpELEVBQUUsTUFBTSxJQUFJb0MsTUFBTSxnQ0FBZ0NsRSxFQUFFLE1BQU04QixHQUFHQyxFQUFFdUYsV0FBVzJKLEtBQUs1UCxHQUFFLFNBQVNaLEdBQUcsT0FBTzJFLEtBQUtxRCxNQUFNaEksRUFBRWpCLEVBQUU4OEQsTUFBTTk4RCxFQUFFK0YsUUFBT2xGLEdBQUdpQixFQUFFMUIsT0FBTyxHQUFHLFdBQVdrQyxFQUFFLENBQUMsSUFBSTJELEVBQUVLLEVBQUV2RSxFQUFFMkwsT0FBT25MLEVBQUUsR0FBRyxJQUFJLElBQUlsQyxFQUFFLEVBQUVBLEVBQUU0RixFQUFFNUYsSUFBSSxDQUFDLElBQUk4RixFQUFFLElBQUk2RSxZQUFZL0osRUFBRWtHLE1BQU10RyxFQUFFQSxFQUFFODdELEtBQUssR0FBRzk3RCxHQUFHODdELEdBQUcsSUFBSXg4RCxFQUFFLElBQUk0SCxXQUFXOUcsRUFBRWtHLE1BQU10RyxFQUFFQSxFQUFFc0YsSUFBSTVELEVBQUVlLEtBQUtuRCxHQUFHVSxHQUFHc0YsT0FBTyxDQUFDLElBQUlELEVBQUVzMkQsR0FBR2w2RCxHQUFzQixHQUFuQjBELEVBQUUvRSxFQUFFa0csTUFBTXRHLEVBQUVBLEVBQUVpQixFQUFFb0UsR0FBTSxZQUFZNUQsRUFBRUMsRUFBRSxJQUFJc0YsYUFBYTdCLFFBQVEsR0FBRyxVQUFVMUQsRUFBRUMsRUFBRSxJQUFJdUYsV0FBVzlCLE9BQU8sQ0FBQyxHQUFHLFNBQVMxRCxFQUFFLE1BQU0sSUFBSW9DLE1BQU0sZ0NBQWdDbEUsRUFBRSxNQUFNOEIsR0FBR0MsRUFBRSxJQUFJd0YsV0FBVy9CLEdBQUduRixHQUFHaUIsRUFBRW9FLEVBQUUxRSxFQUFFaEIsR0FBRzZ4QixHQUFHOXZCLEVBQUV4QyxFQUFFdUMsSUFBSUEsRUFBRSxFQUFFdkMsRUFBRWdDLEVBQUVPLEVBQUV2QyxFQUFFc0QsT0FBT2YsSUFBSzlCLEVBQUVULEVBQUV1QyxJQUFJLE9BQU9kLEVBQUUsU0FBU3U3RCxHQUFHOTdELEdBQUcsR0FBRyxPQUFPQSxFQUFFLE1BQU0sSUFBSXlELE1BQU0sd0JBQXdCK2pDLEtBQUtFLFVBQVUxbkMsSUFBSSxJQUFJYyxFQUFFLEVBQUVQLEVBQUUsR0FBR1AsRUFBRWlFLFNBQVEsU0FBU2pFLEdBQUcsR0FBR2MsR0FBR2QsRUFBRSs3RCxXQUFXeDdELEVBQUU4QixLQUFLckMsRUFBRSs3RCxhQUFhLzdELEVBQUVrUCxPQUFPNnNELFdBQVcvN0QsRUFBRSxJQUFJQSxFQUFFbUIsWUFBWW5CLE1BQU1BLGFBQWE0RyxjQUFjNUcsYUFBYTZHLFlBQVk3RyxhQUFhOEcsWUFBWSxNQUFNLElBQUlyRCxNQUFNLG1DQUFtQ3pELEVBQUVtQixZQUFZOUIsU0FBUSxJQUFJTyxFQUFFLElBQUlrSCxXQUFXaEcsR0FBR3ZCLEVBQUUsRUFBRSxPQUFPZ0IsRUFBRTBELFNBQVEsU0FBU2pFLEdBQUdKLEVBQUV1RCxJQUFJLElBQUkyRCxXQUFXOUcsRUFBRWtQLFFBQVEzUCxHQUFHQSxHQUFHUyxFQUFFKzdELGNBQWFuOEQsRUFBRXNQLE9BQU8sSUFBSThzRCxRQUFHLElBQW9CQyxJQUFTLG9CQUFvQkMsTUFBTSxvQkFBb0JDLE1BQU0sb0JBQW9CQyxNQUFNLFNBQVNDLEdBQUdyOEQsR0FBRyxPQUFPZzhELEdBQUdDLEVBQU9GLFdBQVcvN0QsR0FBRyxJQUFJazhELEtBQUssQ0FBQ2w4RCxJQUFJd00sS0FBSyxTQUFTOHZELEdBQUd0OEQsR0FBRyxJQUFJYyxFQUFFLEVBQUVkLEVBQUVpRSxTQUFRLFNBQVNqRSxHQUFHYyxHQUFHZCxFQUFFKzdELGNBQWEsSUFBSXg3RCxFQUFFLElBQUl1RyxXQUFXaEcsR0FBR2xCLEVBQUUsRUFBRSxPQUFPSSxFQUFFaUUsU0FBUSxTQUFTakUsR0FBR08sRUFBRTRDLElBQUksSUFBSTJELFdBQVc5RyxHQUFHSixHQUFHQSxHQUFHSSxFQUFFKzdELGNBQWF4N0QsRUFBRTJPLE9BQU8sU0FBU3F0RCxHQUFHdjhELEdBQUcsSUFBSUEsRUFBRUEsRUFBRXc4RCxPQUFPeDhELEVBQUVvd0IsU0FBUyxNQUFNcHdCLEVBQUVBLEVBQUVrRyxNQUFNLEVBQUVsRyxFQUFFb0MsT0FBTyxHQUFHLElBQUl0QixFQUFFZCxFQUFFZ0UsTUFBTSxLQUFLLE9BQU9sRCxFQUFFQSxFQUFFc0IsT0FBTyxHQUFHLFNBQVNxNkQsR0FBR3o4RCxHQUFHLEdBQUdBLEVBQUUwOEQseUJBQXlCQyxZQUFZLE1BQU0sSUFBSWw1RCxNQUFNLHVEQUF1RCxNQUFNLENBQUNtNUQsVUFBVSxJQUFJeG9DLEtBQUt5b0Msa0JBQWtCLE9BQU9DLG1CQUFtQixNQUFNOThELEVBQUUwOEQsY0FBYyxFQUFFTCxHQUFHNzBCLEtBQUtFLFVBQVUxbkMsRUFBRTA4RCxnQkFBZ0JLLGlCQUFpQixNQUFNLzhELEVBQUVnOUQsWUFBWSxFQUFFWCxHQUFHNzBCLEtBQUtFLFVBQVUxbkMsRUFBRWc5RCxjQUFjQyxnQkFBZ0IsTUFBTWo5RCxFQUFFazlELFdBQVcsRUFBRWw5RCxFQUFFazlELFdBQVduQixZQUFZLElBQUlvQixHQUFHLFdBQVcsU0FBU245RCxJQUFJa0IsS0FBS2s4RCxZQUFZLEdBQUdsOEQsS0FBS204RCxZQUFZLEdBQUcsT0FBT3I5RCxFQUFFczlELFlBQVksV0FBVyxPQUFPLE1BQU10OUQsRUFBRXU5RCxXQUFXdjlELEVBQUV1OUQsU0FBUyxJQUFJdjlELEdBQUdBLEVBQUV1OUQsVUFBVXY5RCxFQUFFdzlELG1CQUFtQixTQUFTMThELEdBQUdkLEVBQUVzOUQsY0FBY0YsWUFBWS82RCxLQUFLdkIsSUFBSWQsRUFBRXk5RCxtQkFBbUIsU0FBUzM4RCxHQUFHZCxFQUFFczlELGNBQWNELFlBQVloN0QsS0FBS3ZCLElBQUlkLEVBQUUwOUQsZ0JBQWdCLFNBQVM1OEQsR0FBRyxPQUFPZCxFQUFFMjlELFlBQVk3OEQsRUFBRSxTQUFTZCxFQUFFNDlELGdCQUFnQixTQUFTOThELEVBQUVQLEdBQUcsT0FBT1AsRUFBRTI5RCxZQUFZNzhELEVBQUUsT0FBT1AsSUFBSVAsRUFBRTI5RCxZQUFZLFNBQVM3OEQsRUFBRVAsRUFBRVgsR0FBRyxJQUFJTCxFQUFFLEdBQUcsT0FBTyxTQUFTZ0IsRUFBRVAsRUFBRXM5RCxjQUFjRCxZQUFZcjlELEVBQUVzOUQsY0FBY0YsYUFBYW41RCxTQUFRLFNBQVNqRSxHQUFHLElBQUlPLEVBQUVQLEVBQUVjLEVBQUVsQixHQUFHLE9BQU9XLEdBQUdoQixFQUFFOEMsS0FBSzlCLE1BQUtoQixHQUFHUyxFQUFobEIsR0FBcWxCNjlELEdBQUcsTUFBTUMsR0FBRyxXQUFXLFNBQVM5OUQsSUFBSWtCLEtBQUs2OEQsU0FBUyxHQUFHLE9BQU8vOUQsRUFBRXM5RCxZQUFZLFdBQVcsT0FBTyxNQUFNdDlELEVBQUV1OUQsV0FBV3Y5RCxFQUFFdTlELFNBQVMsSUFBSXY5RCxHQUFHQSxFQUFFdTlELFVBQVV2OUQsRUFBRWcrRCxnQkFBZ0IsU0FBU2w5RCxFQUFFUCxHQUFHeUUsRUFBRSxNQUFNbEUsR0FBRSxXQUFXLE1BQU0sMkNBQTBDQSxFQUFFc3ZCLFNBQVN5dEMsTUFBTS84RCxFQUFFQSxFQUFFb0YsTUFBTSxFQUFFcEYsRUFBRXl1QixRQUFRc3VDLE1BQU03NEQsRUFBRWxFLEVBQUVzQixPQUFPLEdBQUUsV0FBVyxNQUFNLHlDQUF3QyxJQUFJeEMsRUFBRUksRUFBRXM5RCxjQUFjdDRELEVBQUUsTUFBTXBGLEVBQUVtK0QsU0FBU2o5RCxJQUFHLFdBQVcsTUFBTSwyREFBMkRBLEVBQUUsUUFBT2xCLEVBQUVtK0QsU0FBU2o5RCxHQUFHUCxHQUFHUCxFQUFFaStELFdBQVcsU0FBU2orRCxHQUFHLElBQUljLEVBQUVJLEtBQUtvOEQsY0FBY1MsU0FBUy85RCxHQUFHLEdBQUcsTUFBTWMsRUFBRSxNQUFNLElBQUkyQyxNQUFNLHlDQUF5Q3pELEVBQUUsS0FBSyxPQUFPYyxHQUFHZCxFQUFFaytELFdBQVcsV0FBVyxPQUFPMStELE9BQU9pZCxLQUFLdmIsS0FBS284RCxjQUFjUyxXQUFXLzlELEVBQXZzQixHQUE0c0IsU0FBU20rRCxHQUFHbitELEdBQUcsSUFBSSxJQUFJQSxFQUFFdXZCLFFBQVFzdUMsSUFBSSxNQUFNLElBQUlwNkQsTUFBTSw2RUFBNkVxNkQsR0FBR0ksYUFBYTU1RCxLQUFLLE1BQU0sTUFBTSxDQUFDODVELE9BQU9wK0QsRUFBRWdFLE1BQU02NUQsSUFBSSxHQUFHUSxLQUFLcitELEVBQUVnRSxNQUFNNjVELElBQUksSUFBSSxTQUFTUyxHQUFHdCtELEVBQUVjLEVBQUV2QixHQUFHLFlBQU8sSUFBU0EsSUFBSUEsR0FBRSxHQUFJZ0IsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJWCxFQUFFYyxFQUFFdkMsRUFBRStCLEVBQUVTLEVBQUV2QyxFQUFFSSxFQUFFNEYsRUFBRW5FLEVBQUUsT0FBT2hCLEVBQUVzQixNQUFLLFNBQVN0QixHQUFHLE9BQU9BLEVBQUVnQyxPQUFPLEtBQUssRUFBRSxPQUFPb0QsRUFBRWhGLElBQUljLEdBQUUsV0FBVyxNQUFNLHdDQUF3Q2QsRUFBRSxPQUFNZ0YsR0FBR3pFLEVBQUU0OEQsR0FBR1MsZ0JBQWdCNTlELElBQUlvQyxPQUFPLEdBQUUsV0FBVyxNQUFNLGtFQUFrRXBDLEVBQUUsT0FBTWdGLEVBQUV6RSxFQUFFNkIsT0FBTyxHQUFFLFdBQVcsTUFBTSx5Q0FBeUM3QixFQUFFNkIsT0FBTyxrQ0FBa0NwQyxFQUFFLE9BQU1xQixFQUFFZCxFQUFFLEdBQUd5RSxHQUFHbEcsRUFBRXErRCxHQUFHTyxnQkFBZ0I1OEQsSUFBSXNCLE9BQU8sR0FBRSxXQUFXLE1BQU0sdUVBQXVFdEIsRUFBRSxPQUFNa0UsRUFBRWxHLEVBQUVzRCxPQUFPLEdBQUUsV0FBVyxNQUFNLHlDQUF5QzdCLEVBQUU2QixPQUFPLHVDQUF1Q3RCLEVBQUUsT0FBTUQsRUFBRS9CLEVBQUUsR0FBR3dDLEVBQUU2OEQsR0FBR24rRCxHQUFHbytELE9BQU9yL0QsRUFBRW8vRCxHQUFHbitELEdBQUdxK0QsS0FBS2wvRCxFQUFFbUMsSUFBSTY4RCxHQUFHbitELEdBQUdvK0QsT0FBTyxDQUFDLEVBQUUvOEQsRUFBRWs5RCxRQUFRLEtBQUssRUFBRSxPQUFPeDVELEVBQUVuRixFQUFFaUMsT0FBT3RDLEdBQUdKLEVBQUUsQ0FBQyxFQUFFMitELEdBQUdHLFdBQVczOEQsR0FBR2s5RCxZQUFZei9ELElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFYSxFQUFFaUMsT0FBT2pDLEVBQUVnQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFZixFQUFFNDlELEtBQUsxNUQsSUFBSSxLQUFLLEVBQUUsT0FBT25FLEVBQUVoQixFQUFFaUMsUUFBUXRDLEdBQUdKLEVBQUUsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFMitELEdBQUdHLFdBQVczOEQsR0FBR2s5RCxZQUFZei9ELElBQUksS0FBSyxFQUFFYSxFQUFFaUMsT0FBT2pDLEVBQUVnQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFaEIsRUFBRTg5RCwyQkFBeUIsSUFBSUMsR0FBRyxlQUFlQyxHQUFHLG1CQUFtQixTQUFTQyxLQUFLLElBQUkvL0QsRUFBRXdFLFFBQVEsY0FBYyxNQUFNLElBQUlHLE1BQU0sMkZBQTJGLElBQUl6RCxFQUFFK2YsT0FBT2pmLEVBQUVkLEVBQUU4K0QsV0FBVzkrRCxFQUFFKytELGNBQWMvK0QsRUFBRWcvRCxpQkFBaUJoL0QsRUFBRWkvRCxhQUFhai9ELEVBQUVrL0QsY0FBYyxHQUFHLE1BQU1wK0QsRUFBRSxNQUFNLElBQUkyQyxNQUFNLDZEQUE2RCxPQUFPM0MsRUFBRSxTQUFTcStELEdBQUduL0QsR0FBRyxJQUFJYyxFQUFFZCxFQUFFdWIsT0FBT3phLEVBQUVzK0Qsa0JBQWtCVCxHQUFHLENBQUNVLFFBQVEsY0FBY3YrRCxFQUFFcytELGtCQUFrQlIsR0FBRyxDQUFDUyxRQUFRLGNBQWMsSUFBSUMsR0FBRyxXQUFXLFNBQVN0L0QsRUFBRUEsR0FBRyxHQUFHa0IsS0FBSzQ5RCxVQUFVRCxLQUFLLE1BQU03K0QsSUFBSUEsRUFBRSxNQUFNLElBQUl5RCxNQUFNLGtFQUFrRXZDLEtBQUtxK0QsVUFBVXYvRCxFQUFFLE9BQU9BLEVBQUVVLFVBQVUrOUQsS0FBSyxTQUFTeitELEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxPQUFPdEIsRUFBRXNCLE1BQUssU0FBU0osR0FBRyxHQUFHZCxFQUFFMDhELHlCQUF5QkMsWUFBWSxNQUFNLElBQUlsNUQsTUFBTSw0RkFBNEYsTUFBTSxDQUFDLEVBQUV2QyxLQUFLcytELGVBQWV0K0QsS0FBS3ErRCxVQUFVdi9ELFdBQVNBLEVBQUVVLFVBQVU2OUQsS0FBSyxXQUFXLE9BQU9oK0QsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxPQUFPdEIsRUFBRXNCLE1BQUssU0FBU2xCLEdBQUcsTUFBTSxDQUFDLEVBQUVrQixLQUFLcytELGVBQWV0K0QsS0FBS3ErRCxtQkFBaUJ2L0QsRUFBRVUsVUFBVTgrRCxlQUFlLFNBQVN4L0QsRUFBRWMsR0FBRyxJQUFJUCxFQUFFVyxLQUFLLE9BQU8sSUFBSUUsU0FBUSxTQUFTcEIsRUFBRUosR0FBRyxJQUFJTCxFQUFFZ0IsRUFBRXUrRCxVQUFVVyxLQUFLLGVBQWUsR0FBR2xnRSxFQUFFbWdFLGdCQUFnQixXQUFXLE9BQU9QLEdBQUc1L0QsSUFBSUEsRUFBRW9nRSxVQUFVLFdBQVcsSUFBSXQrRCxFQUFFOUIsRUFBRWdjLE9BQU8sR0FBRyxNQUFNemEsRUFBRSxDQUFDLElBQUloQyxFQUFFdUMsRUFBRXUrRCxZQUFZakIsR0FBRyxZQUFZOTlELEVBQUUvQixFQUFFK2dFLFlBQVlsQixJQUFJaC9ELElBQUlZLEVBQUVnL0QsV0FBVzErRCxFQUFFOCtELFVBQVUsV0FBVyxHQUFHLE1BQU05K0QsRUFBRTBhLE9BQU8sT0FBT2xhLEVBQUV5K0QsUUFBUWxnRSxFQUFFLElBQUk2RCxNQUFNLGdDQUFnQ2xELEVBQUVnL0QsVUFBVSxvQkFBb0J2L0QsRUFBRWEsRUFBRTBhLE9BQU93a0QsaUJBQWlCbC9ELEVBQUVtL0QsUUFBUSxTQUFTaGdFLEdBQUcsT0FBT3FCLEVBQUV5K0QsUUFBUWxnRSxFQUFFaUIsRUFBRTRjLFFBQVEzZSxFQUFFbWhFLFdBQVcsV0FBVyxPQUFPNStELEVBQUV5K0QsYUFBYSxDQUFDLElBQUl4K0QsRUFBRXZDLEVBQUUwOUQsR0FBRzM3RCxHQUFHM0IsRUFBRWtDLEVBQUV1K0QsWUFBWWhCLEdBQUcsYUFBYTc1RCxFQUFFNUYsRUFBRTBnRSxZQUFZakIsSUFBSWgrRCxFQUFFbUUsRUFBRW03RCxJQUFJLENBQUNYLFVBQVVoL0QsRUFBRWcvRCxVQUFVYixtQkFBbUIzL0QsSUFBSTZCLEVBQUUrK0QsVUFBVSxXQUFXLElBQUlwZ0UsR0FBRytCLEVBQUVELEVBQUV1K0QsWUFBWWpCLEdBQUcsY0FBY2tCLFlBQVlsQixJQUFJdUIsSUFBSSxDQUFDWCxVQUFVaC9ELEVBQUVnL0QsVUFBVVEsZUFBZWovRCxFQUFFNDlELG1CQUFtQjMvRCxJQUFJUSxFQUFFb2dFLFVBQVUsV0FBVyxPQUFPMy9ELEVBQUUsQ0FBQzArRCxtQkFBbUIzL0QsS0FBS1EsRUFBRXlnRSxRQUFRLFNBQVNoZ0UsR0FBRyxJQUFJYyxHQUFHaUUsRUFBRTVGLEVBQUUwZ0UsWUFBWWpCLEtBQUs3L0MsT0FBT3hlLEVBQUVnL0QsV0FBV3orRCxFQUFFNitELFVBQVUsV0FBVyxPQUFPdCtELEVBQUV5K0QsUUFBUWxnRSxFQUFFTCxFQUFFa2UsUUFBUTNjLEVBQUVrL0QsUUFBUSxTQUFTaGdFLEdBQUcsT0FBT3FCLEVBQUV5K0QsUUFBUWxnRSxFQUFFTCxFQUFFa2UsVUFBVTdjLEVBQUVvL0QsUUFBUSxTQUFTaGdFLEdBQUcsT0FBT3FCLEVBQUV5K0QsUUFBUWxnRSxFQUFFZ0IsRUFBRTZjLFFBQVF0ZSxFQUFFOGdFLFdBQVcsV0FBVyxNQUFNMytELEVBQUVELEVBQUV5K0QsUUFBUXgrRCxFQUFFMitELFdBQVcsV0FBVyxPQUFPNStELEVBQUV5K0QsWUFBWXZnRSxFQUFFeWdFLFFBQVEsU0FBU2hnRSxHQUFHLE9BQU9KLEVBQUVMLEVBQUVrZSxZQUFXemQsRUFBRW1nRSxXQUFXLGVBQWVuZ0UsRUFBMTBELEdBQSswRG9nRSxHQUFHLFNBQVNwZ0UsR0FBRyxPQUFPbEIsRUFBRXdFLFFBQVEsZ0JBQWdCckMsTUFBTWtFLFFBQVFuRixJQUFJQSxFQUFFcWdFLFdBQVdmLEdBQUdhLGFBQWFyL0QsRUFBRWQsRUFBRWtHLE1BQU1vNUQsR0FBR2EsV0FBVy85RCxRQUFRLElBQUlrOUQsR0FBR3grRCxJQUFJLEtBQUssSUFBSUEsR0FBR3E4RCxHQUFHSyxtQkFBbUI0QyxJQUFJakQsR0FBR00sbUJBQW1CMkMsSUFBSSxJQUFJRSxHQUFHLFdBQVcsU0FBU3RnRSxJQUFJa0IsS0FBSzQ5RCxVQUFVRCxLQUFLLE9BQU83K0QsRUFBRVUsVUFBVTYvRCxXQUFXLFdBQVcsT0FBT2hnRSxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlsQixFQUFFa0IsS0FBSyxPQUFPdEIsRUFBRXNCLE1BQUssU0FBU0osR0FBRyxNQUFNLENBQUMsRUFBRSxJQUFJTSxTQUFRLFNBQVNOLEVBQUVQLEdBQUcsSUFBSVgsRUFBRUksRUFBRTgrRCxVQUFVVyxLQUFLLGVBQWUsR0FBRzcvRCxFQUFFOC9ELGdCQUFnQixXQUFXLE9BQU9QLEdBQUd2L0QsSUFBSUEsRUFBRSsvRCxVQUFVLFdBQVcsSUFBSTMvRCxFQUFFSixFQUFFMmIsT0FBT2hjLEVBQUVTLEVBQUU0L0QsWUFBWWhCLEdBQUcsWUFBWXY5RCxFQUFFOUIsRUFBRXNnRSxZQUFZakIsSUFBSTRCLFNBQVNuL0QsRUFBRXMrRCxVQUFVLFdBQVcsSUFBSSxJQUFJMy9ELEVBQUUsR0FBR08sRUFBRSxFQUFFWCxFQUFFeUIsRUFBRWthLE9BQU9oYixFQUFFWCxFQUFFd0MsT0FBTzdCLElBQUksQ0FBQyxJQUFJaEIsRUFBRUssRUFBRVcsR0FBR1AsRUFBRVQsRUFBRWdnRSxXQUFXaGdFLEVBQUVtL0QsbUJBQW1CNTlELEVBQUVkLElBQUlxQixFQUFFMitELFFBQVEsU0FBU2wvRCxHQUFHLE9BQU9kLEVBQUU4L0QsUUFBUXYvRCxFQUFFYyxFQUFFb2MsUUFBUWxlLEVBQUUwZ0UsV0FBVyxXQUFXLE9BQU9qZ0UsRUFBRTgvRCxVQUFVbGdFLEVBQUVvZ0UsUUFBUSxTQUFTaGdFLEdBQUcsT0FBT08sRUFBRVgsRUFBRTZkLG1CQUFnQnpkLEVBQUVVLFVBQVU4OUQsWUFBWSxTQUFTeCtELEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJSixFQUFFSSxLQUFLLE9BQU90QixFQUFFc0IsTUFBSyxTQUFTWCxHQUFHLElBQUlYLEVBQUUsT0FBT0ksR0FBR0osRUFBRUksR0FBR3FnRSxXQUFXZixHQUFHYSxZQUFZdmdFLEVBQUVzRyxNQUFNbzVELEdBQUdhLFdBQVcvOUQsUUFBUXhDLEVBQUUsQ0FBQyxFQUFFLElBQUl3QixTQUFRLFNBQVNiLEVBQUVYLEdBQUcsSUFBSUwsRUFBRXVCLEVBQUVnK0QsVUFBVVcsS0FBSyxlQUFlLEdBQUdsZ0UsRUFBRW1nRSxnQkFBZ0IsV0FBVyxPQUFPUCxHQUFHNS9ELElBQUlBLEVBQUVvZ0UsVUFBVSxXQUFXLElBQUk3K0QsRUFBRU8sRUFBRTlCLEVBQUVnYyxPQUFPemMsRUFBRXVDLEVBQUV1K0QsWUFBWWhCLEdBQUcsYUFBYS85RCxFQUFFL0IsRUFBRStnRSxZQUFZakIsSUFBSXQ5RCxFQUFFVCxFQUFFbEIsSUFBSUssR0FBR3NCLEVBQUVxK0QsVUFBVSxXQUFXLEdBQUcsTUFBTXIrRCxFQUFFaWEsT0FBTyxPQUFPbGEsRUFBRXkrRCxRQUFRbGdFLEVBQUUsSUFBSTZELE1BQU0sZ0NBQWdDekQsRUFBRSxvQkFBb0IsSUFBSVQsRUFBRXNCLEVBQUVrZSxPQUFPL2UsR0FBR2xCLEVBQUUsV0FBVyxJQUFJUyxHQUFHdUIsRUFBRU8sRUFBRXUrRCxZQUFZakIsR0FBRyxjQUFja0IsWUFBWWxCLElBQUk1L0MsT0FBTy9lLEdBQUdULEVBQUVvZ0UsVUFBVSxXQUFXLE9BQU9wL0QsRUFBRWUsRUFBRWlhLE9BQU9takQscUJBQXFCbi9ELEVBQUV5Z0UsUUFBUSxTQUFTaGdFLEdBQUcsT0FBT0osRUFBRTBCLEVBQUVtYyxTQUFTbGUsRUFBRW9nRSxVQUFVN2dFLEVBQUVTLEVBQUV5Z0UsUUFBUSxTQUFTaGdFLEdBQUcsT0FBT2xCLElBQUl1QyxFQUFFeStELFFBQVFsZ0UsRUFBRTBCLEVBQUVtYyxTQUFTbmMsRUFBRTArRCxRQUFRLFNBQVNoZ0UsR0FBRyxPQUFPcUIsRUFBRXkrRCxRQUFRbGdFLEVBQUUwQixFQUFFbWMsUUFBUTNlLEVBQUVtaEUsV0FBVyxXQUFXLE1BQU1uL0QsRUFBRU8sRUFBRXkrRCxRQUFRaC9ELEVBQUVtL0QsV0FBVyxXQUFXLE9BQU81K0QsRUFBRXkrRCxXQUFXdmdFLEVBQUV5Z0UsUUFBUSxTQUFTaGdFLEdBQUcsT0FBT0osRUFBRUwsRUFBRWtlLG1CQUFnQnpkLEVBQTdsRCxHQUFrbUQsR0FBR2xCLEVBQUV3RSxRQUFRLGNBQWMsSUFBSXc2RCxHQUFHRSxnQkFBZ0JzQixHQUFHYSxXQUFXLElBQUlHLElBQUksTUFBTXRnRSxJQUFJLElBQUl5Z0UsR0FBRyxJQUFJQyxHQUFHLHNCQUFzQkMsR0FBRyxPQUFPQyxHQUFHLGlCQUFpQkMsR0FBRyxlQUFlQyxHQUFHLGNBQWNDLEdBQUcsaUJBQWlCLFNBQVNDLEdBQUdoaEUsR0FBRyxNQUFNLENBQUNpaEUsS0FBSyxDQUFDUCxHQUFHMWdFLEVBQUUyZ0UsSUFBSXI4RCxLQUFLbThELElBQUlTLFNBQVMsQ0FBQ1IsR0FBRzFnRSxFQUFFNGdFLElBQUl0OEQsS0FBS204RCxJQUFJekQsWUFBWSxDQUFDMEQsR0FBRzFnRSxFQUFFNmdFLElBQUl2OEQsS0FBS204RCxJQUFJdkQsV0FBVyxDQUFDd0QsR0FBRzFnRSxFQUFFOGdFLElBQUl4OEQsS0FBS204RCxJQUFJVSxjQUFjLENBQUNULEdBQUcxZ0UsRUFBRStnRSxJQUFJejhELEtBQUttOEQsS0FBSyxTQUFTVyxHQUFHcGhFLEdBQUcsSUFBSWMsRUFBRWQsRUFBRWdFLE1BQU15OEQsSUFBSSxHQUFHMy9ELEVBQUVzQixPQUFPLEVBQUUsTUFBTSxJQUFJcUIsTUFBTSx1QkFBdUJ6RCxHQUFHLE9BQU9jLEVBQUVvRixNQUFNLEVBQUVwRixFQUFFc0IsT0FBTyxHQUFHa0MsS0FBS204RCxJQUFJLElBQUlZLEdBQUcsV0FBVyxTQUFTcmhFLEVBQUVBLEdBQUcsSUFBSWxCLEVBQUV3RSxRQUFRLG9CQUFlLElBQVN5YyxPQUFPdWhELGFBQWEsTUFBTSxJQUFJNzlELE1BQU0sMkRBQTJELEdBQUd2QyxLQUFLcWdFLEdBQUd4aEQsT0FBT3VoRCxhQUFhLE1BQU10aEUsSUFBSUEsRUFBRSxNQUFNLElBQUl5RCxNQUFNLHNFQUFzRXZDLEtBQUtxK0QsVUFBVXYvRCxFQUFFa0IsS0FBS3ViLEtBQUt1a0QsR0FBRzkvRCxLQUFLcStELFdBQVcsT0FBT3YvRCxFQUFFVSxVQUFVKzlELEtBQUssU0FBU3orRCxHQUFHLE9BQU9PLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSUosRUFBRVAsRUFBRWhCLEVBQUUsT0FBT0ssRUFBRXNCLE1BQUssU0FBU3RCLEdBQUcsR0FBR0ksRUFBRTA4RCx5QkFBeUJDLFlBQVksTUFBTSxJQUFJbDVELE1BQU0sNEZBQTRGM0MsRUFBRTBtQyxLQUFLRSxVQUFVMW5DLEVBQUUwOEQsZUFBZW44RCxFQUFFaW5DLEtBQUtFLFVBQVUxbkMsRUFBRWc5RCxhQUFhejlELEVBQUVrOUQsR0FBR3o4RCxHQUFHLElBQUksT0FBT2tCLEtBQUtxZ0UsR0FBR0MsUUFBUXRnRSxLQUFLdWIsS0FBS3drRCxLQUFLejVCLEtBQUtFLFVBQVVub0MsSUFBSTJCLEtBQUtxZ0UsR0FBR0MsUUFBUXRnRSxLQUFLdWIsS0FBS3lrRCxTQUFTcGdFLEdBQUdJLEtBQUtxZ0UsR0FBR0MsUUFBUXRnRSxLQUFLdWIsS0FBS3VnRCxZQUFZejhELEdBQUdXLEtBQUtxZ0UsR0FBR0MsUUFBUXRnRSxLQUFLdWIsS0FBS3lnRCxZQUFZNzdELEVBQUVyQixFQUFFazlELFdBQVdsQixHQUFHQyxFQUFPenJELEtBQUtuUCxHQUFHcUwsU0FBUyxVQUFVMHZELEtBQUs1MEQsT0FBTzJ0QixhQUFheHpCLE1BQU0sS0FBSyxJQUFJbUYsV0FBV3pGLE9BQU9ILEtBQUtxZ0UsR0FBR0MsUUFBUXRnRSxLQUFLdWIsS0FBSzBrRCxjQUFjMzVCLEtBQUtFLFVBQVUsQ0FBQys1QixPQUFPemhFLEVBQUV5aEUsT0FBT0MsWUFBWTFoRSxFQUFFMGhFLFlBQVlDLFlBQVkzaEUsRUFBRTJoRSxlQUFlLENBQUMsRUFBRSxDQUFDakQsbUJBQW1Cbi9ELElBQUksTUFBTVMsR0FBRyxNQUFNa0IsS0FBS3FnRSxHQUFHSyxXQUFXMWdFLEtBQUt1YixLQUFLd2tELE1BQU0vL0QsS0FBS3FnRSxHQUFHSyxXQUFXMWdFLEtBQUt1YixLQUFLeWtELFVBQVVoZ0UsS0FBS3FnRSxHQUFHSyxXQUFXMWdFLEtBQUt1YixLQUFLdWdELGFBQWE5N0QsS0FBS3FnRSxHQUFHSyxXQUFXMWdFLEtBQUt1YixLQUFLeWdELFlBQVloOEQsS0FBS3FnRSxHQUFHSyxXQUFXMWdFLEtBQUt1YixLQUFLMGtELGVBQWUsSUFBSTE5RCxNQUFNLHlCQUF5QnZDLEtBQUtxK0QsVUFBVSx5R0FBeUdoZ0UsRUFBRXU5RCxtQkFBbUIsc0JBQXNCdjlELEVBQUV3OUQsaUJBQWlCLHFCQUFxQng5RCxFQUFFMDlELGdCQUFnQixLQUFLLElBQUk1N0QsRUFBRSxNQUFNLENBQUMsVUFBUXJCLEVBQUVVLFVBQVU2OUQsS0FBSyxXQUFXLE9BQU9oK0QsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJbEIsRUFBRWMsRUFBRVAsRUFBRWhCLEVBQUU4QixFQUFFdkMsRUFBRStCLEVBQUUsT0FBT2pCLEVBQUVzQixNQUFLLFNBQVN0QixHQUFHLEdBQUcsT0FBT0ksRUFBRXduQyxLQUFLQyxNQUFNdm1DLEtBQUtxZ0UsR0FBR00sUUFBUTNnRSxLQUFLdWIsS0FBS3drRCxRQUFRLE1BQU0sSUFBSXg5RCxNQUFNLGtEQUFrRHZDLEtBQUtxK0QsVUFBVSxLQUFLLEdBQUcsU0FBU3YvRCxFQUFFNjhELGtCQUFrQixNQUFNLElBQUlwNUQsTUFBTSw2RUFBNkUsR0FBRzNDLEVBQUUsR0FBRyxPQUFPUCxFQUFFaW5DLEtBQUtDLE1BQU12bUMsS0FBS3FnRSxHQUFHTSxRQUFRM2dFLEtBQUt1YixLQUFLeWtELFlBQVksTUFBTSxJQUFJejlELE1BQU0sNENBQTRDdkMsS0FBS3ErRCxVQUFVLGlCQUFpQixHQUFHeitELEVBQUU0N0QsY0FBY244RCxFQUFFLE9BQU9oQixFQUFFaW9DLEtBQUtDLE1BQU12bUMsS0FBS3FnRSxHQUFHTSxRQUFRM2dFLEtBQUt1YixLQUFLdWdELGVBQWUsTUFBTSxJQUFJdjVELE1BQU0sZ0RBQWdEdkMsS0FBS3ErRCxVQUFVLGtCQUFrQixHQUFHeitELEVBQUVrOEQsWUFBWXo5RCxFQUFFLE9BQU84QixFQUFFSCxLQUFLcWdFLEdBQUdNLFFBQVEzZ0UsS0FBS3ViLEtBQUswa0Qsa0JBQWtCcmlFLEVBQUUwb0MsS0FBS0MsTUFBTXBtQyxHQUFHUCxFQUFFMmdFLE9BQU8zaUUsRUFBRTJpRSxPQUFPM2dFLEVBQUU0Z0UsWUFBWTVpRSxFQUFFNGlFLFlBQVk1Z0UsRUFBRTZnRSxZQUFZN2lFLEVBQUU2aUUsYUFBYSxPQUFPOWdFLEVBQUVLLEtBQUtxZ0UsR0FBR00sUUFBUTNnRSxLQUFLdWIsS0FBS3lnRCxhQUFhLE1BQU0sSUFBSXo1RCxNQUFNLHdEQUF3RHZDLEtBQUtxK0QsVUFBVSxrQkFBa0IsT0FBT3orRCxFQUFFbzhELFdBQVcsU0FBU2w5RCxHQUFHLEdBQUdnOEQsR0FBRyxDQUFDLElBQUlsN0QsRUFBRW03RCxFQUFPenJELEtBQUt4USxFQUFFLFVBQVUsT0FBT2MsRUFBRW9PLE9BQU9oSixNQUFNcEYsRUFBRWdoRSxXQUFXaGhFLEVBQUVnaEUsV0FBV2hoRSxFQUFFaTdELFlBQVksSUFBSSxJQUFJeDdELEVBQUU0N0QsS0FBS244RCxHQUFHSixFQUFFLElBQUlrSCxXQUFXdkcsRUFBRTZCLFFBQVE3QyxFQUFFLEVBQUVBLEVBQUVnQixFQUFFNkIsU0FBUzdDLEVBQUVLLEVBQUV1RCxJQUFJLENBQUM1QyxFQUFFaXpCLFdBQVdqMEIsSUFBSUEsR0FBRyxPQUFPSyxFQUFFc1AsT0FBbk4sQ0FBMk5yTyxHQUFHLENBQUMsRUFBRUMsVUFBUWQsRUFBRW1nRSxXQUFXLGtCQUFrQm5nRSxFQUE1MkYsR0FBaTNGK2hFLEdBQUcsU0FBUy9oRSxHQUFHLE9BQU9sQixFQUFFd0UsUUFBUSxnQkFBZ0JyQyxNQUFNa0UsUUFBUW5GLElBQUlBLEVBQUVxZ0UsV0FBV2dCLEdBQUdsQixhQUFhci9ELEVBQUVkLEVBQUVrRyxNQUFNbTdELEdBQUdsQixXQUFXLzlELFFBQVEsSUFBSWkvRCxHQUFHdmdFLElBQUksS0FBSyxJQUFJQSxHQUFHcThELEdBQUdLLG1CQUFtQnVFLElBQUk1RSxHQUFHTSxtQkFBbUJzRSxJQUFJLElBQUlDLEdBQUcsV0FBVyxTQUFTaGlFLElBQUlnRixFQUFFbEcsRUFBRXdFLFFBQVEsZUFBYyxXQUFXLE1BQU0sOENBQTZDMEIsT0FBRSxJQUFTK2EsT0FBT3VoRCxjQUFhLFdBQVcsTUFBTSw2REFBNERwZ0UsS0FBS3FnRSxHQUFHeGhELE9BQU91aEQsYUFBYSxPQUFPdGhFLEVBQUVVLFVBQVU2L0QsV0FBVyxXQUFXLE9BQU9oZ0UsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJbEIsRUFBRWMsRUFBRVAsRUFBRWhCLEVBQUU4QixFQUFFdkMsRUFBRSxPQUFPYyxFQUFFc0IsTUFBSyxTQUFTdEIsR0FBRyxJQUFJSSxFQUFFLEdBQUdjLEVBQUU0L0QsR0FBR0QsR0FBR2xnRSxFQUFFa2dFLEdBQUdFLEdBQUdwaEUsRUFBRSxFQUFFQSxFQUFFMkIsS0FBS3FnRSxHQUFHbi9ELFNBQVM3QyxHQUFHOEIsRUFBRUgsS0FBS3FnRSxHQUFHbGhFLElBQUlkLElBQUk4Z0UsV0FBV3YvRCxJQUFJTyxFQUFFK3VCLFNBQVM3dkIsS0FBS3pCLEVBQUVzaUUsR0FBRy8vRCxHQUFHckIsRUFBRWxCLEdBQUcwb0MsS0FBS0MsTUFBTXZtQyxLQUFLcWdFLEdBQUdNLFFBQVF4Z0UsS0FBSyxNQUFNLENBQUMsRUFBRXJCLFVBQVFBLEVBQUVVLFVBQVU4OUQsWUFBWSxTQUFTeCtELEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJSixFQUFFUCxFQUFFLE9BQU9YLEVBQUVzQixNQUFLLFNBQVN0QixHQUFHLElBQUlMLEVBQUUsR0FBR1MsR0FBR1QsRUFBRVMsR0FBR3FnRSxXQUFXZ0IsR0FBR2xCLFlBQVk1Z0UsRUFBRTJHLE1BQU1tN0QsR0FBR2xCLFdBQVcvOUQsUUFBUTdDLEVBQUV1QixFQUFFa2dFLEdBQUdoaEUsR0FBRyxNQUFNa0IsS0FBS3FnRSxHQUFHTSxRQUFRL2dFLEVBQUVtZ0UsTUFBTSxNQUFNLElBQUl4OUQsTUFBTSw4QkFBOEJ6RCxFQUFFLEtBQUssT0FBT08sRUFBRWluQyxLQUFLQyxNQUFNdm1DLEtBQUtxZ0UsR0FBR00sUUFBUS9nRSxFQUFFbWdFLE9BQU8vL0QsS0FBS3FnRSxHQUFHSyxXQUFXOWdFLEVBQUVtZ0UsTUFBTS8vRCxLQUFLcWdFLEdBQUdLLFdBQVc5Z0UsRUFBRW9nRSxVQUFVaGdFLEtBQUtxZ0UsR0FBR0ssV0FBVzlnRSxFQUFFazhELGFBQWE5N0QsS0FBS3FnRSxHQUFHSyxXQUFXOWdFLEVBQUVvOEQsWUFBWSxDQUFDLEVBQUUzOEQsVUFBUVAsRUFBNTlCLEdBQWkrQixHQUFHbEIsRUFBRXdFLFFBQVEsY0FBYyxJQUFJdzZELEdBQUdFLGdCQUFnQnFELEdBQUdsQixXQUFXLElBQUk2QixJQUFJLE1BQU1oaUUsSUFBSSxJQUFJaWlFLEdBQUcsUUFBUUMsR0FBRyxRQUFRQyxHQUFHLGVBQWUsU0FBU0MsR0FBR3BpRSxHQUFHLE9BQU8sSUFBSW9CLFNBQVEsU0FBU3BCLEdBQUcsT0FBT2dHLFdBQVdoRyxNQUFLMEIsS0FBSzFCLEdBQUcsSUFBSXFpRSxHQUFHLFdBQVcsU0FBU3JpRSxFQUFFYyxHQUFHLElBQUloQyxFQUFFd0UsUUFBUSxjQUFjLE1BQU0sSUFBSUcsTUFBTSx1RkFBdUYzQyxFQUFFdS9ELFdBQVdyZ0UsRUFBRW1nRSxjQUFjci9ELEVBQUVBLEVBQUVvRixNQUFNbEcsRUFBRW1nRSxXQUFXLzlELFNBQVMsTUFBTXRCLEdBQUcsSUFBSUEsRUFBRXNCLFNBQVN0QixFQUFFbWhFLElBQUkvZ0UsS0FBS29oRSxzQkFBc0J4aEUsRUFBRW9oRSxHQUFHaGhFLEtBQUtxaEUsbUJBQW1CemhFLEVBQUVxaEUsR0FBRyxPQUFPbmlFLEVBQUVVLFVBQVUrOUQsS0FBSyxTQUFTeitELEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJSixFQUFFUCxFQUFFaEIsRUFBRThCLEVBQUV2QyxFQUFFK0IsRUFBRSxPQUFPakIsRUFBRXNCLE1BQUssU0FBU3RCLEdBQUcsT0FBT0EsRUFBRWdDLE9BQU8sS0FBSyxFQUFFLEdBQUcsb0JBQW9Cd2UsU0FBUyxNQUFNLElBQUkzYyxNQUFNLDJGQUEyRixHQUFHM0MsRUFBRWlmLE9BQU95aUQsSUFBSUMsZ0JBQWdCLElBQUl2RyxLQUFLLENBQUNsOEQsRUFBRWs5RCxZQUFZLENBQUNwOUIsS0FBSyxnQ0FBZ0M5L0IsRUFBRTA4RCx5QkFBeUJDLGFBQWEsTUFBTSxDQUFDLEVBQUUsR0FBRyxNQUFNLElBQUlsNUQsTUFBTSx5RkFBeUYsS0FBSyxFQUFFLE9BQU9sRCxFQUFFLENBQUMsQ0FBQ21pRSxNQUFNLENBQUMsS0FBS3hoRSxLQUFLcWhFLG9CQUFvQkksUUFBUTNpRSxFQUFFZzlELGNBQWN6OUQsRUFBRSxDQUFDbTlELGNBQWMxOEQsRUFBRTA4RCxjQUFjK0UsT0FBT3poRSxFQUFFeWhFLE9BQU9DLFlBQVkxaEUsRUFBRTBoRSxZQUFZQyxZQUFZM2hFLEVBQUUyaEUsWUFBWWlCLGdCQUFnQnJpRSxHQUFHYyxFQUFFMGUsT0FBT3lpRCxJQUFJQyxnQkFBZ0IsSUFBSXZHLEtBQUssQ0FBQzEwQixLQUFLRSxVQUFVbm9DLElBQUksQ0FBQ3VnQyxLQUFLLHVCQUF1QmhoQyxFQUFFLE1BQU1vQyxLQUFLMmhFLFdBQVd6aUQsU0FBU3VDLGNBQWMsS0FBS3poQixLQUFLMmhFLFlBQVlDLFNBQVM1aEUsS0FBS29oRSxzQkFBc0J4akUsRUFBRWlrRSxLQUFLMWhFLEVBQUUsQ0FBQyxFQUFFK2dFLElBQUcsV0FBVyxPQUFPdGpFLEVBQUVra0UsY0FBYyxJQUFJQyxXQUFXLGNBQWEsS0FBSyxFQUFFLE9BQU9yakUsRUFBRWlDLE9BQU8sTUFBTTdCLEVBQUVrOUQsV0FBVyxDQUFDLEVBQUUsS0FBS3I4RCxFQUFFLE1BQU1LLEtBQUtnaUUsaUJBQWlCOWlELFNBQVN1QyxjQUFjLEtBQUt6aEIsS0FBS2dpRSxrQkFBa0JKLFNBQVM1aEUsS0FBS3FoRSxtQkFBbUIxaEUsRUFBRWtpRSxLQUFLamlFLEVBQUUsQ0FBQyxFQUFFc2hFLElBQUcsV0FBVyxPQUFPdmhFLEVBQUVtaUUsY0FBYyxJQUFJQyxXQUFXLGVBQWMsS0FBSyxFQUFFcmpFLEVBQUVpQyxPQUFPakMsRUFBRWdDLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQzg4RCxtQkFBbUJqQyxHQUFHejhELGFBQVdBLEVBQUVtZ0UsV0FBVyxlQUFlbmdFLEVBQXBuRCxHQUF5bkRtakUsR0FBRyxXQUFXLFNBQVNuakUsRUFBRUEsR0FBRyxHQUFHLE1BQU1BLEdBQUdBLEVBQUVvQyxPQUFPLEVBQUUsTUFBTSxJQUFJcUIsTUFBTSx3RUFBd0V6RCxHQUFHa0IsS0FBS2tpRSxNQUFNcGpFLEVBQUUsT0FBT0EsRUFBRVUsVUFBVTY5RCxLQUFLLFdBQVcsT0FBT2grRCxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlsQixFQUFFYyxFQUFFUCxFQUFFVyxLQUFLLE9BQU90QixFQUFFc0IsTUFBSyxTQUFTdEIsR0FBRyxPQUFPSSxFQUFFa0IsS0FBS2tpRSxNQUFNLEdBQUd0aUUsRUFBRUksS0FBS2tpRSxNQUFNbDlELE1BQU0sR0FBRyxDQUFDLEVBQUUsSUFBSTlFLFNBQVEsU0FBU3hCLEVBQUVMLEdBQUcsSUFBSThCLEVBQUUsSUFBSWdpRSxXQUFXaGlFLEVBQUVpaUUsT0FBTyxTQUFTamlFLEdBQUcsSUFBSXZDLEVBQUUwb0MsS0FBS0MsTUFBTXBtQyxFQUFFa2lFLE9BQU9ob0QsUUFBUTFhLEVBQUUvQixFQUFFNDlELGNBQWMsR0FBRyxNQUFNNzdELEVBQUUsQ0FBQyxJQUFJQyxFQUFFc0IsUUFBUXhDLEVBQUUsQ0FBQzg4RCxjQUFjNzdELElBQUksSUFBSVMsRUFBRXhDLEVBQUU4akUsZ0JBQWdCLEdBQUcsTUFBTXRoRSxFQUFFLENBQUMsSUFBSXZDLEVBQUUsSUFBSUEsRUFBRXdCLEVBQUVpakUsNEJBQTRCbGlFLEVBQUVSLEdBQUcsTUFBTWQsR0FBRyxZQUFZVCxFQUFFUyxHQUFHLElBQUliLEVBQUUsR0FBRzRGLEVBQUUsR0FBR25FLEVBQUUsR0FBR1UsRUFBRTJDLFNBQVEsU0FBU2pFLEdBQUdBLEVBQUUwaUUsTUFBTXorRCxTQUFRLFNBQVNqRSxHQUFHK0UsRUFBRTFDLEtBQUtyQyxHQUFHWSxFQUFFeUIsS0FBSyxTQUFRbEQsRUFBRWtELEtBQUtWLE1BQU14QyxFQUFFYSxFQUFFMmlFLFlBQVdyaEUsRUFBRTJDLFNBQVEsU0FBU2pFLEdBQUdBLEVBQUUwaUUsTUFBTXorRCxTQUFRLFNBQVNqRSxHQUFHLElBQUljLEVBQUUsSUFBSXVpRSxXQUFXdmlFLEVBQUV3aUUsT0FBTyxTQUFTeGlFLEdBQUcsSUFBSVAsRUFBRU8sRUFBRXlpRSxPQUFPaG9ELE9BQU9oYyxFQUFFd0YsRUFBRXdxQixRQUFRdnZCLEdBQUdZLEVBQUVyQixHQUFHZ0IsR0FBRyxJQUFJSyxFQUFFMnVCLFFBQVEsT0FBTzN2QixFQUFFLENBQUM4OEQsY0FBYzc3RCxFQUFFbThELFlBQVk3OUQsRUFBRSs5RCxXQUFXWixHQUFHMTdELE1BQU1FLEVBQUVrL0QsUUFBUSxTQUFTbC9ELEdBQUcsT0FBT3ZCLEVBQUUsNkNBQTZDUyxFQUFFLE9BQU9jLEVBQUUyaUUsa0JBQWtCMWtFLEVBQUVpQixlQUFhVCxFQUFFLElBQUlrRSxNQUFNLDZDQUE2Q3pELEVBQUVYLFlBQVlFLEVBQUUsSUFBSWtFLE1BQU0sNENBQTRDekQsRUFBRVgsUUFBUWdDLEVBQUUyK0QsUUFBUSxTQUFTbC9ELEdBQUcsT0FBT3ZCLEVBQUUsc0VBQXNFUyxFQUFFWCxLQUFLLDBFQUEwRWdDLEVBQUVxaUUsV0FBVzFqRSxjQUFXQSxFQUFFVSxVQUFVOGlFLDRCQUE0QixTQUFTeGpFLEVBQUVjLEdBQUcsSUFBSSxJQUFJUCxFQUFFLEdBQUdYLEVBQUVrQixFQUFFc0YsS0FBSSxTQUFTcEcsR0FBRyxPQUFPdThELEdBQUd2OEQsRUFBRVgsU0FBUUUsRUFBRSxHQUFHOEIsRUFBRSxFQUFFdkMsRUFBRWtCLEVBQUVxQixFQUFFdkMsRUFBRXNELE9BQU9mLElBQUt2QyxFQUFFdUMsR0FBR3FoRSxNQUFNeitELFNBQVEsU0FBU2pFLEdBQUcsSUFBSXFCLEVBQUVrN0QsR0FBR3Y4RCxHQUFHLElBQUksSUFBSU8sRUFBRWd2QixRQUFRbHVCLEdBQUcsTUFBTSxJQUFJb0MsTUFBTSx1REFBdURwQyxFQUFFLEtBQUssR0FBR2QsRUFBRThCLEtBQUtoQixJQUFJLElBQUl6QixFQUFFMnZCLFFBQVFsdUIsR0FBRyxNQUFNLElBQUlvQyxNQUFNLDhCQUE4QnBDLEVBQUUsc0JBQXNCOUIsRUFBRVMsR0FBR2MsRUFBRWxCLEVBQUUydkIsUUFBUWx1QixPQUFNLEdBQUdkLEVBQUU2QixTQUFTdEIsRUFBRXNCLE9BQU8sTUFBTSxJQUFJcUIsTUFBTSx3REFBd0RsRCxFQUFFNkIsT0FBTyw4Q0FBOEN0QixFQUFFc0IsT0FBTyxNQUFNLE9BQU83QyxHQUFHUyxFQUE1NkQsR0FBaTdELFNBQVMyakUsR0FBRzNqRSxFQUFFYyxFQUFFUCxFQUFFWCxJQUFJLFNBQVNJLEdBQUdnRixFQUFFLE1BQU1oRixHQUFHaUIsTUFBTWtFLFFBQVFuRixJQUFJQSxFQUFFb0MsT0FBTyxHQUFFLFdBQVcsTUFBTSx5Q0FBckUsQ0FBOEdwQyxHQUFHLFNBQVNBLEVBQUVjLEdBQUdrRSxFQUFFaEYsR0FBRyxHQUFHQSxHQUFHLEdBQUUsV0FBVyxNQUFNLG9FQUFvRUEsS0FBSWdGLEVBQUVsRSxHQUFHLEdBQUdBLEdBQUcsR0FBRSxXQUFXLE1BQU0sa0VBQWtFQSxLQUFJa0UsRUFBRWxFLEdBQUdkLEdBQUUsV0FBVyxNQUFNLHlFQUF5RUEsRUFBRSxvQkFBb0JjLEtBQS9VLENBQW9WUCxFQUFFLE1BQU1BLEVBQUUsRUFBRUEsRUFBRVgsRUFBRSxNQUFNQSxFQUFFLEVBQUVBLEdBQUcsSUFBSUwsRUFBRSxFQUFFLE9BQU82QixRQUFRaVEsSUFBSXJSLEVBQUVvRyxLQUFJLFNBQVMvRSxHQUFHLE9BQU9BLEVBQUVLLE1BQUssU0FBU0wsR0FBRyxJQUFJdkMsRUFBRXlCLEtBQUtoQixFQUFFUyxFQUFFb0MsUUFBUXhDLEVBQUVXLEdBQUcsT0FBT08sRUFBRWhDLEdBQUd1QyxLQUFJQSxNQUFLLFNBQVN1aUUsR0FBRzVqRSxFQUFFYyxHQUFHLE9BQU9QLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSVgsRUFBRWhCLEVBQUU4QixFQUFFUixFQUFFUyxFQUFFdkMsRUFBRUksRUFBRTRGLEVBQUVuRSxFQUFFLE9BQU9oQixFQUFFc0IsTUFBSyxTQUFTdEIsR0FBRyxPQUFPQSxFQUFFZ0MsT0FBTyxLQUFLLEVBQUUsT0FBTyxNQUFNZCxJQUFJQSxFQUFFLElBQUlQLEVBQUUsTUFBTU8sRUFBRStpRSxVQUFVL2tFLEVBQUU4RCxTQUFTNkksTUFBTTNLLEVBQUUraUUsVUFBVXRrRSxFQUFFUyxFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxPQUFPTyxFQUFFUCxFQUFFYyxFQUFFZ2pFLFlBQVksQ0FBQ0MsVUFBUyxPQUFPMWlFLEVBQUUsRUFBRVIsRUFBRSxHQUFHLE1BQU1DLEVBQUVrakUsV0FBVyxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUU1aUUsUUFBUWlRLElBQUk5UixJQUFJLEtBQUssRUFBRSxPQUFPK0IsRUFBRTFCLEVBQUVpQyxPQUFPLENBQUMsRUFBRSxHQUFHLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRThoRSxHQUFHcGtFLEVBQUV1QixFQUFFa2pFLFdBQVczaUUsRUFBRVIsSUFBSSxLQUFLLEVBQUVTLEVBQUUxQixFQUFFaUMsT0FBT2pDLEVBQUVnQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU83QyxFQUFFdUMsRUFBRThFLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRWlrRSxpQkFBZ0I5a0UsRUFBRSxHQUFHNEYsRUFBRSxFQUFFLE1BQU1qRSxFQUFFa2pFLFdBQVcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFNWlFLFFBQVFpUSxJQUFJdFMsSUFBSSxLQUFLLEVBQUUsT0FBTzZCLEVBQUVoQixFQUFFaUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUU4aEUsR0FBRzVrRSxFQUFFK0IsRUFBRWtqRSxXQUFXN2tFLEVBQUU0RixJQUFJLEtBQUssRUFBRW5FLEVBQUVoQixFQUFFaUMsT0FBT2pDLEVBQUVnQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFaEIsVUFBUSxTQUFTc2pFLEdBQUdsa0UsR0FBRyxJQUFJYyxFQUFFSSxLQUFLLE9BQU8sU0FBUzNCLEVBQUU4QixFQUFFdkMsR0FBRyxZQUFPLElBQVN1QyxJQUFJQSxFQUFFLElBQUlkLEVBQUVPLE9BQUUsT0FBTyxHQUFPLFdBQVcsSUFBSUEsRUFBRVAsRUFBRU0sRUFBRVMsRUFBRXZDLEVBQUVJLEVBQUU0RixFQUFFbkUsRUFBRW9FLEVBQUU1RixFQUFFLE9BQU9RLEVBQUVzQixNQUFLLFNBQVN0QixHQUFHLE9BQU9BLEVBQUVnQyxPQUFPLEtBQUssRUFBRSxHQUFHZCxFQUFFdkIsRUFBRTZHLEtBQUksV0FBVyxPQUFNLEtBQUs3RixFQUFFLEdBQUdNLEVBQUUsTUFBTS9CLEVBQUVBLEVBQUVzSCxLQUFJLFdBQVcsT0FBTSxLQUFLLEdBQUc5RSxFQUFFLEdBQUcvQixFQUFFMEUsU0FBUSxTQUFTakUsRUFBRUosR0FBRyxJQUFJTCxFQUFFLEVBQUVTLEVBQUUyaUUsUUFBUTErRCxTQUFRLFNBQVNqRSxHQUFHLElBQUlxQixFQUFFLGlCQUFpQnJCLEVBQUVBLEVBQUU0N0QsYUFBYXp2RCxNQUFNbk0sRUFBRW1NLE1BQU1wTixFQUFFdzhELEdBQUdsNkQsR0FBR2dFLEVBQUVyRixFQUFFeU0sT0FBT3ROLEVBQUUsV0FBVzJCLEVBQUVsQixJQUFHLEVBQUcsTUFBTVcsRUFBRVgsS0FBS1csRUFBRVgsR0FBRyxJQUFJVyxFQUFFWCxHQUFHeUMsS0FBSyxDQUFDOGhFLGNBQWNua0UsRUFBRW9rRSxZQUFZN2tFLEVBQUU4a0UsVUFBVXRsRSxLQUFLLE1BQU1ELEVBQUVBLEVBQUVtRixTQUFRLFNBQVNuRCxFQUFFUCxHQUFHTyxJQUFJZCxFQUFFWCxPQUFPRixJQUFJMEIsRUFBRU4sSUFBRyxNQUFNcEIsSUFBSW1DLEVBQUVlLEtBQUtyQyxFQUFFWCxNQUFNRSxHQUFHUixTQUFPOEIsRUFBRXlGLE9BQU0sU0FBU3RHLEdBQUcsT0FBT0EsS0FBSSxNQUFNakIsRUFBRUQsRUFBRTR6QixRQUFPLFNBQVMxeUIsRUFBRWMsR0FBRyxPQUFPRCxFQUFFQyxNQUFLLElBQUkyQyxNQUFNLGtEQUFrRDFFLEVBQUV1RixLQUFLLE1BQU0sNkNBQTZDaEQsRUFBRWdELEtBQUssTUFBTSxLQUFLLE9BQU9uRixFQUFFMkIsRUFBRW9ILFFBQU8sU0FBU2xJLEVBQUVjLEVBQUVQLEdBQUcsT0FBT08sR0FBR2QsRUFBRXFDLEtBQUs5QixHQUFHUCxJQUFHLElBQUkrRSxFQUFFLEdBQUc1RixFQUFFOEUsU0FBUSxTQUFTakUsR0FBR1QsRUFBRVMsR0FBRzBpRSxNQUFNeitELFNBQVEsU0FBU2pFLEdBQUcsSUFBSWMsRUFBRU8sR0FBR0EsRUFBRSt1QixTQUFTLEtBQUssR0FBRyxLQUFLcHdCLEVBQUUrRSxFQUFFMUMsS0FBS3ZCLFNBQU8sQ0FBQyxFQUFFZCxFQUFFK0UsSUFBSSxLQUFLLEVBQUUsT0FBT25FLEVBQUVoQixFQUFFaUMsT0FBT21ELEVBQUUsR0FBRzVGLEVBQUUsRUFBRUQsRUFBRThFLFNBQVEsU0FBU2pFLEdBQUcsSUFBSSxJQUFJYyxFQUFFdkIsRUFBRVMsR0FBRzBpRSxNQUFNdGdFLE9BQU94QyxFQUFFLEVBQUV5QixFQUFFLEVBQUVBLEVBQUVQLEVBQUVPLElBQUl6QixHQUFHZ0IsRUFBRXhCLEVBQUVpQyxHQUFHMDZELFdBQVcsSUFBSSxJQUFJajlELEVBQUUsSUFBSTY5RCxZQUFZLzhELEdBQUdpQixFQUFFLElBQUlpRyxXQUFXaEksR0FBR3dDLEVBQUUsRUFBRXZDLEVBQUUsRUFBRUEsRUFBRStCLEVBQUUvQixJQUFJLENBQUMsSUFBSUksRUFBRSxJQUFJMkgsV0FBV2xHLEVBQUV4QixFQUFFTCxJQUFJOEIsRUFBRXNDLElBQUloRSxFQUFFbUMsR0FBR0EsR0FBR25DLEVBQUU0OEQsV0FBV3g3RCxFQUFFUCxHQUFHaUUsU0FBUSxTQUFTakUsR0FBRyxJQUFJYyxFQUFFNjZELEdBQUc3OEQsRUFBRW9ILE1BQU1sRyxFQUFFb2tFLFlBQVlwa0UsRUFBRW9rRSxZQUFZcGtFLEVBQUVxa0UsV0FBVyxDQUFDcmtFLEVBQUVta0UsZ0JBQWdCLElBQUksSUFBSTVqRSxLQUFLTyxFQUFFa0UsRUFBRXpFLEdBQUdPLEVBQUVQLE1BQUtuQixHQUFHMEIsS0FBSSxDQUFDLEVBQUVrRSxXQUFTbTRELEdBQUdLLG9CQUFtQixTQUFTeDlELEdBQUcsT0FBT2xCLEVBQUV3RSxRQUFRLGdCQUFnQnJDLE1BQU1rRSxRQUFRbkYsSUFBSUEsRUFBRXFnRSxXQUFXZ0MsR0FBR2xDLGtCQUE2QyxLQUFoQ3IvRCxFQUFFZCxFQUFFa0csTUFBTW04RCxHQUFHbEMsV0FBVy85RCxXQUFxQnRCLEVBQUUsU0FBUyxJQUFJdWhFLEdBQUd2aEUsSUFBSSxLQUFLLElBQUlBLEtBQUksSUFBSXdqRSxHQUFHLFdBQVcsU0FBU3RrRSxFQUFFQSxFQUFFYyxHQUFHLEdBQUdJLEtBQUtxakUsZUFBZSxPQUFPLE1BQU16akUsSUFBSUEsRUFBRSxJQUFJSSxLQUFLc2pFLGlCQUFpQjFqRSxFQUFFMGpFLGlCQUFpQnRqRSxLQUFLOGlFLFdBQVdsakUsRUFBRWtqRSxXQUFXLE1BQU1sakUsRUFBRStpRSxXQUFXNytELEVBQUUsbUJBQW1CbEUsRUFBRStpRSxXQUFVLFdBQVcsTUFBTSxpSUFBZ0kzaUUsS0FBS3VLLE1BQU0zSyxFQUFFK2lFLFdBQVczaUUsS0FBS3VLLE1BQU0zTSxFQUFFOEQsU0FBUzZJLE1BQU16RyxFQUFFLE1BQU1oRixHQUFHQSxFQUFFb0MsT0FBTyxHQUFFLFdBQVcsTUFBTSw2REFBNERuQixNQUFNa0UsUUFBUW5GLElBQUlnRixFQUFFLElBQUloRixFQUFFb0MsUUFBTyxXQUFXLE1BQU0saUVBQWlFcEMsRUFBRW9DLE9BQU8sUUFBT2xCLEtBQUttOUQsS0FBS3IrRCxFQUFFLE1BQU1jLEVBQUVnakUsYUFBYSxNQUFNaGpFLEVBQUVnakUsWUFBWVcsS0FBSyxNQUFNLElBQUloaEUsTUFBTSxzRUFBc0V2QyxLQUFLNGlFLFlBQVloakUsRUFBRWdqRSxhQUFhLEdBQUcsT0FBTzlqRSxFQUFFVSxVQUFVKzlELEtBQUssU0FBU3orRCxHQUFHLE9BQU9PLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSUosRUFBRVAsRUFBRWhCLEVBQUU4QixFQUFFLE9BQU96QixFQUFFc0IsTUFBSyxTQUFTdEIsR0FBRyxPQUFPQSxFQUFFZ0MsT0FBTyxLQUFLLEVBQUUsR0FBRzVCLEVBQUUwOEQseUJBQXlCQyxZQUFZLE1BQU0sSUFBSWw1RCxNQUFNLDJGQUEyRixPQUFPM0MsRUFBRXRCLE9BQU9tRSxPQUFPLENBQUMrZ0UsT0FBT3hqRSxLQUFLcWpFLGdCQUFnQnJqRSxLQUFLNGlFLGNBQWNXLEtBQUssSUFBSUUsU0FBU3BrRSxFQUFFLENBQUMsQ0FBQ21pRSxNQUFNLENBQUMsdUJBQXVCQyxRQUFRM2lFLEVBQUVnOUQsY0FBY3o5RCxFQUFFLENBQUNtOUQsY0FBYzE4RCxFQUFFMDhELGNBQWMrRSxPQUFPemhFLEVBQUV5aEUsT0FBT0MsWUFBWTFoRSxFQUFFMGhFLFlBQVlDLFlBQVkzaEUsRUFBRTJoRSxZQUFZaUIsZ0JBQWdCcmlFLEdBQUdPLEVBQUUyakUsS0FBS0csT0FBTyxhQUFhLElBQUkxSSxLQUFLLENBQUMxMEIsS0FBS0UsVUFBVW5vQyxJQUFJLENBQUN1Z0MsS0FBSyxxQkFBcUIsY0FBYyxNQUFNOS9CLEVBQUVrOUQsWUFBWXA4RCxFQUFFMmpFLEtBQUtHLE9BQU8sb0JBQW9CLElBQUkxSSxLQUFLLENBQUNsOEQsRUFBRWs5RCxZQUFZLENBQUNwOUIsS0FBSyw2QkFBNkIscUJBQXFCLENBQUMsRUFBRTUrQixLQUFLdUssTUFBTXZLLEtBQUttOUQsS0FBS3Y5RCxJQUFJLEtBQUssRUFBRSxJQUFJTyxFQUFFekIsRUFBRWlDLFFBQVFnakUsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDbkcsbUJBQW1CakMsR0FBR3o4RCxHQUFHOGtFLFVBQVUsQ0FBQ3pqRSxLQUFLLE1BQU0sSUFBSW9DLE1BQU0sZ0VBQWdFcEMsRUFBRTBqRSxPQUFPLGFBQVcva0UsRUFBRVUsVUFBVTY5RCxLQUFLLFdBQVcsT0FBT2grRCxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlsQixFQUFFYyxFQUFFUCxFQUFFaEIsRUFBRThCLEVBQUV2QyxFQUFFK0IsRUFBRVMsRUFBRSxPQUFPMUIsRUFBRXNCLE1BQUssU0FBU3RCLEdBQUcsT0FBT0EsRUFBRWdDLE9BQU8sS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFVixLQUFLdUssTUFBTXZLLEtBQUttOUQsS0FBS245RCxLQUFLNGlFLGNBQWMsS0FBSyxFQUFFLEtBQUs5akUsRUFBRUosRUFBRWlDLFFBQVFnakUsR0FBRyxNQUFNLElBQUlwaEUsTUFBTSxjQUFjdkMsS0FBS205RCxLQUFLLDRCQUE0QnIrRCxFQUFFK2tFLE9BQU8sMkVBQTJFbmxFLEVBQUVnQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU9oQyxFQUFFa0MsS0FBS08sS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxFQUFFckMsRUFBRWdsRSxRQUFRLEtBQUssRUFBRSxPQUFPbGtFLEVBQUVsQixFQUFFaUMsT0FBTyxDQUFDLEVBQUUsR0FBRyxLQUFLLEVBQUUsTUFBTWpDLEVBQUVpQyxPQUFPdEIsRUFBRSwrQ0FBK0NXLEtBQUttOUQsS0FBSyxJQUFJbjlELEtBQUttOUQsS0FBS2p1QyxTQUFTLE9BQU83dkIsR0FBRywrVUFBK1VBLEdBQUcsdUVBQXVFLElBQUlrRCxNQUFNbEQsR0FBRyxLQUFLLEVBQUUsR0FBR2hCLEVBQUV1QixFQUFFNDdELGNBQWNyN0QsRUFBRVAsRUFBRThoRSxnQkFBZ0IsTUFBTXJqRSxHQUFHLE1BQU04QixFQUFFLE1BQU0sSUFBSW9DLE1BQU0sMkJBQTJCdkMsS0FBS205RCxLQUFLLDZEQUE2RCxPQUFPLE1BQU1oOUQsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQUVILEtBQUsrakUsWUFBWTVqRSxJQUFJLEtBQUssRUFBRUMsRUFBRTFCLEVBQUVpQyxPQUFPL0MsRUFBRXdDLEVBQUUsR0FBR1QsRUFBRVMsRUFBRSxHQUFHMUIsRUFBRWdDLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUUsQ0FBQzg2RCxjQUFjbjlELEVBQUV5OUQsWUFBWWwrRCxFQUFFbytELFdBQVdyOEQsWUFBVWIsRUFBRVUsVUFBVXVrRSxZQUFZLFNBQVNqbEUsR0FBRyxPQUFPTyxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlKLEVBQUVQLEVBQUVoQixFQUFFOEIsRUFBRXZDLEVBQUUrQixFQUFFUyxFQUFFdkMsRUFBRUksRUFBRTRGLEVBQUVuRSxFQUFFLE9BQU9oQixFQUFFc0IsTUFBSyxTQUFTdEIsR0FBRyxPQUFPQSxFQUFFZ0MsT0FBTyxLQUFLLEVBQUUsSUFBSWQsRUFBRUcsTUFBTWtFLFFBQVFqRSxLQUFLbTlELE1BQU1uOUQsS0FBS205RCxLQUFLLEdBQUduOUQsS0FBS205RCxLQUFLOTlELEVBQUUsU0FBU1AsR0FBRyxJQUFJYyxFQUFFZCxFQUFFa2xFLFlBQVksS0FBSzNrRSxFQUFFUCxFQUFFa2xFLFlBQVksS0FBZ0QsTUFBTSxDQUEvQ2xsRSxFQUFFcXdCLFVBQVUsRUFBRXZ2QixHQUFvQyxJQUEvQlAsRUFBRU8sRUFBRWQsRUFBRXF3QixVQUFVOXZCLEdBQUcsSUFBbEcsQ0FBc0hPLEdBQUd2QixFQUFFZ0IsRUFBRSxHQUFHYyxFQUFFZCxFQUFFLEdBQUd6QixFQUFFb0MsS0FBS3NqRSxrQkFBa0JqbEUsRUFBRXNCLEVBQUUsR0FBR1MsRUFBRSxFQUFFdkMsRUFBRWlCLEVBQUVzQixFQUFFdkMsRUFBRXFELE9BQU9kLElBQUluQyxFQUFFSixFQUFFdUMsR0FBR1QsRUFBRXdCLEtBQUtWLE1BQU1kLEVBQUUxQixFQUFFd2pFLFNBQVMsT0FBTzU5RCxFQUFFLEdBQUcvRSxFQUFFaUUsU0FBUSxTQUFTakUsR0FBR0EsRUFBRTBpRSxNQUFNeitELFNBQVEsU0FBU2pFLEdBQUcrRSxFQUFFMUMsS0FBS3ZELEVBQUVrQixFQUFFcUIsU0FBTyxDQUFDLEVBQUV1aUUsR0FBRzcrRCxFQUFFLENBQUMrK0QsWUFBWTVpRSxLQUFLNGlFLFlBQVlELFVBQVUzaUUsS0FBS3VLLE1BQU11NEQsV0FBVzlpRSxLQUFLOGlFLGNBQWMsS0FBSyxFQUFFLE9BQU9wakUsRUFBRWhCLEVBQUVpQyxPQUFPLENBQUMsRUFBRSxDQUFDaEIsRUFBRXk3RCxHQUFHMTdELGFBQVdaLEVBQUVtbEUsaUJBQWlCLGVBQWVubEUsRUFBOXNILEdBQW10SCxTQUFTb2xFLEdBQUdwbEUsR0FBRyxPQUFPLE1BQU1BLEVBQUVxbEUsTUFBTWYsR0FBR2Esa0JBQWtCLElBQUlHLEdBQUcsU0FBU3RsRSxFQUFFYyxHQUFHLE1BQUcsb0JBQW9CMkssTUFBYSxNQUFZeEssTUFBTWtFLFFBQVFuRixHQUFHQSxFQUFFc0csT0FBTSxTQUFTdEcsR0FBRyxPQUFPb2xFLEdBQUdwbEUsTUFBS29sRSxHQUFHcGxFLElBQUl1bEUsR0FBR3ZsRSxFQUFFLENBQUNna0UsV0FBV2xqRSxJQUFJLE1BQU0sU0FBU3lrRSxHQUFHdmxFLEVBQUVjLEdBQUcsT0FBTyxJQUFJd2pFLEdBQUd0a0UsRUFBRWMsR0FBR3E4RCxHQUFHSyxtQkFBbUI4SCxJQUFJbkksR0FBR00sbUJBQW1CNkgsSUFBSSxJQUFJRSxHQUFHLFdBQVcsU0FBU3hsRSxFQUFFQSxHQUFHa0IsS0FBSzYrRCxlQUFlLy9ELEVBQUUsT0FBT0EsRUFBRVUsVUFBVTY5RCxLQUFLLFdBQVcsT0FBT2grRCxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLE9BQU90QixFQUFFc0IsTUFBSyxTQUFTbEIsR0FBRyxNQUFNLENBQUMsRUFBRWtCLEtBQUs2K0QsdUJBQXFCLy9ELEVBQXRMLEdBQTJMeWxFLEdBQUcsV0FBVyxTQUFTemxFLEVBQUVBLEdBQUdrQixLQUFLd2tFLFlBQVkxbEUsRUFBRSxPQUFPQSxFQUFFVSxVQUFVKzlELEtBQUssU0FBU3orRCxHQUFHLE9BQU9PLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsT0FBT3RCLEVBQUVzQixNQUFLLFNBQVNKLEdBQUcsTUFBTSxDQUFDLEVBQUVJLEtBQUt3a0UsWUFBWTFsRSxXQUFTQSxFQUFwTCxHQUE2TDJsRSxHQUFHbm1FLE9BQU8rRSxPQUFPLENBQUNxaEUsYUFBYSxTQUFTNWxFLEdBQUcsT0FBTyxJQUFJbWpFLEdBQUduakUsSUFBSTZsRSxtQkFBbUIsU0FBUzdsRSxFQUFFYyxHQUFHLE9BQU95a0UsR0FBR3ZsRSxFQUFFYyxJQUFJZ2xFLHdCQUF3QnhKLEdBQUd5SixjQUFjcEssR0FBR3FLLGNBQWMsU0FBU2htRSxFQUFFYyxHQUFHLE9BQU9QLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSTNCLEVBQUU4QixFQUFFdkMsRUFBRStCLEVBQUVTLEVBQUV2QyxFQUFFbUMsS0FBSyxPQUFPdEIsRUFBRXNCLE1BQUssU0FBUy9CLEdBQUcsT0FBT0EsRUFBRXlDLE9BQU8sS0FBSyxFQUFFLElBQUlyQyxFQUFFLEdBQUc4QixFQUFFLEdBQUd2QyxFQUFFbUMsTUFBTWtFLFFBQVFuRixHQUFHQSxFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFWCxRQUFPRyxPQUFPaWQsS0FBS3pjLEdBQUdhLEVBQUUsU0FBU0EsR0FBRyxJQUFJUyxFQUFFeEMsRUFBRStCLEdBQUcxQixFQUFFOEIsTUFBTWtFLFFBQVFuRixHQUFHQSxFQUFFYSxHQUFHaTRELE9BQU85NEQsRUFBRXNCLEdBQUcsR0FBRyxZQUFZbkMsRUFBRWdOLE9BQU8sVUFBVWhOLEVBQUVnTixPQUFPLFNBQVNoTixFQUFFZ04sT0FBTyxXQUFXaE4sRUFBRWdOLE1BQU0sTUFBTSxJQUFJMUksTUFBTSxnQ0FBZ0NuQyxFQUFFLE1BQU1uQyxFQUFFZ04sT0FBTyxJQUFJcEgsRUFBRSxDQUFDMUYsS0FBS2lDLEVBQUVtTCxNQUFNdE4sRUFBRXNOLE1BQU1OLE1BQU1oTixFQUFFZ04sT0FBTyxHQUFHLFdBQVdoTixFQUFFZ04sTUFBTSxDQUFDLElBQUl2TCxFQUFFLElBQUlRLFNBQVEsU0FBU3BCLEdBQUcsT0FBT08sRUFBRXhCLE9BQUUsT0FBTyxHQUFPLFdBQVcsSUFBSStCLEVBQUVQLEVBQUVoQixFQUFFOEIsRUFBRXZDLEVBQUUrQixFQUFFUyxFQUFFLE9BQU8xQixFQUFFc0IsTUFBSyxTQUFTdEIsR0FBRyxPQUFPQSxFQUFFZ0MsT0FBTyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUV6QyxFQUFFc1EsU0FBUyxLQUFLLEVBQUUsSUFBSTNPLEVBQUVsQixFQUFFaUMsT0FBT3RCLEVBQUVPLEVBQUVvSCxRQUFPLFNBQVNsSSxFQUFFYyxHQUFHLE9BQU9kLEVBQUVjLEVBQUVzQixTQUFRLEdBQUdzNUQsR0FBRzU2RCxFQUFFc0IsT0FBTzdDLEVBQUUsSUFBSXVILFdBQVd2RyxHQUFHYyxFQUFFLEVBQUV2QyxFQUFFLEVBQUVBLEVBQUVnQyxFQUFFc0IsT0FBT3RELElBQUkrQixFQUFFQyxFQUFFaEMsR0FBR3dDLEVBQUUsSUFBSXdGLFdBQVcsSUFBSWlELFlBQVksQ0FBQ2xKLEVBQUV1QixTQUFTOE0sUUFBUTNQLEVBQUU0RCxJQUFJN0IsRUFBRUQsR0FBR0EsR0FBR3E2RCxHQUFHbjhELEVBQUU0RCxJQUFJdEMsRUFBRVEsR0FBR0EsR0FBR1IsRUFBRXVCLE9BQU8sT0FBT3BDLEVBQUVULEdBQUcsQ0FBQyxhQUFVOEIsRUFBRWdCLEtBQUt6QixRQUFRUyxFQUFFZ0IsS0FBS2xELEVBQUUrTSxRQUFRLE1BQU1wTCxJQUFJaUUsRUFBRWtoRSxNQUFNbmxFLEdBQUd2QixFQUFFOEMsS0FBSzBDLElBQUl6RCxFQUFFLEVBQUVBLEVBQUV4QyxFQUFFc0QsU0FBU2QsRUFBRVQsRUFBRVMsR0FBRyxNQUFNLENBQUMsRUFBRUYsUUFBUWlRLElBQUloUSxJQUFJLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDNkssS0FBSzR2RCxHQUFHMzhELEVBQUUwQyxRQUFRcWtFLE1BQU0zbUUsWUFBVTRtRSxXQUFXLFNBQVNubUUsRUFBRWMsRUFBRVAsRUFBRVgsR0FBRyxPQUFPLElBQUl3RSxVQUFVaEMsT0FBTyxNQUFNcEMsRUFBRTA4RCxlQUFlLE1BQU0xOEQsRUFBRWc5RCxZQUFZLElBQUl3SSxHQUFHeGxFLElBQUk2QyxRQUFRQyxLQUFLLHlOQUF5TixJQUFJMGlFLEdBQUcsQ0FBQzlJLGNBQWMxOEQsTUFBTTZDLFFBQVFDLEtBQUsseU5BQXlOLElBQUkwaUUsR0FBRyxDQUFDOUksY0FBYzE4RCxFQUFFZzlELFlBQVlsOEQsRUFBRW84RCxXQUFXMzhELEVBQUU2bEUsZUFBZXhtRSxNQUFNZytELGdCQUFnQixTQUFTNTlELEVBQUVjLEdBQUcsT0FBT3E4RCxHQUFHUyxnQkFBZ0I1OUQsRUFBRWMsSUFBSXVsRSw2QkFBNkI1SixHQUFHaUIsZ0JBQWdCLFNBQVMxOUQsR0FBRyxPQUFPbTlELEdBQUdPLGdCQUFnQjE5RCxJQUFJc21FLEtBQUtmLEdBQUdnQixhQUFhbkIsR0FBR0gsWUFBWSxTQUFTamxFLEVBQUVjLEVBQUV2QixFQUFFOEIsR0FBRyxZQUFPLElBQVNQLElBQUlBLEVBQUUsSUFBSVAsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxPQUFPdEIsRUFBRXNCLE1BQUssU0FBU1gsR0FBRyxNQUFNLENBQUMsRUFBRTJqRSxJQUFHLFNBQVNsa0UsR0FBRyxPQUFPNGpFLEdBQUc1akUsRUFBRSxDQUFDOGpFLFlBQVl6aUUsTUFBeEM2aUUsQ0FBOENsa0UsRUFBRWMsRUFBRXZCLFdBQVNrK0QsbUJBQW1CLFNBQVN6OUQsR0FBRyxPQUFPbTlELEdBQUdNLG1CQUFtQno5RCxJQUFJdzlELG1CQUFtQixTQUFTeDlELEdBQUcsT0FBT205RCxHQUFHSyxtQkFBbUJ4OUQsSUFBSXdtRSxxQkFBcUJ0QyxHQUFHdUMsZ0JBQWdCLFNBQVN6bUUsR0FBRyxPQUFPLElBQUl5bEUsR0FBR3psRSxJQUFJMG1FLFVBQVUsU0FBUzFtRSxFQUFFYyxHQUFHLE9BQU9QLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsT0FBT3RCLEVBQUVzQixNQUFLLFNBQVNYLEdBQUcsTUFBTSxDQUFDLEVBQUUrOUQsR0FBR3QrRCxFQUFFYyxHQUFFLFdBQVV5L0QsV0FBVyxXQUFXLE9BQU9oZ0UsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJbEIsRUFBRWMsRUFBRVAsRUFBRWhCLEVBQUU4QixFQUFFdkMsRUFBRStCLEVBQUUsT0FBT2pCLEVBQUVzQixNQUFLLFNBQVN0QixHQUFHLE9BQU9BLEVBQUVnQyxPQUFPLEtBQUssRUFBRTVCLEVBQUU4OUQsR0FBR0ksYUFBYXA5RCxFQUFFLEdBQUdQLEVBQUUsRUFBRWhCLEVBQUVTLEVBQUVKLEVBQUVnQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU9yQixFQUFFaEIsRUFBRTZDLFFBQVFmLEVBQUU5QixFQUFFZ0IsR0FBRyxDQUFDLEVBQUV1OUQsR0FBR0csV0FBVzU4RCxHQUFHay9ELGVBQWUsQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLElBQUkxL0QsS0FBSy9CLEVBQUVjLEVBQUVpQyxPQUFPZixFQUFFTyxFQUFFdzhELEdBQUdoOUQsR0FBRy9CLEVBQUUrQixHQUFHakIsRUFBRWdDLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBT3JCLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFTyxXQUFTNmxFLFVBQVUsU0FBUzNtRSxFQUFFYyxHQUFHLE9BQU9QLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsT0FBT3RCLEVBQUVzQixNQUFLLFNBQVNYLEdBQUcsTUFBTSxDQUFDLEVBQUUrOUQsR0FBR3QrRCxFQUFFYyxHQUFFLFdBQVUwOUQsWUFBWSxTQUFTeCtELEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJSixFQUFFLE9BQU9sQixFQUFFc0IsTUFBSyxTQUFTWCxHQUFHLE9BQU9PLEVBQUVxOUQsR0FBR24rRCxHQUFHLENBQUMsRUFBRTg5RCxHQUFHRyxXQUFXbjlELEVBQUVzOUQsUUFBUUksWUFBWTE5RCxFQUFFdTlELGdCQUFrQnVJLEdBQUd6MkMsR0FBRyxDQUFDMDJDLGlCQUFpQixTQUFTN21FLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsRUFBRTB2QixHQUFHdHZCLEVBQUUsU0FBUyxtQkFBbUJULEVBQUUrdkIsR0FBR3h1QixFQUFFLGNBQWMsbUJBQW1Ca0UsRUFBRSxNQUFNekUsR0FBR0EsRUFBRSxHQUFHaUksT0FBT0MsVUFBVWxJLElBQUcsV0FBVyxNQUFNLCtEQUErREEsS0FBSXlFLEVBQUUsSUFBSXBGLEVBQUUyTSxNQUFLLFdBQVcsTUFBTSxnREFBZ0QzTSxFQUFFMk0sUUFBT3ZILEVBQUUsSUFBSXpGLEVBQUVnTixNQUFLLFdBQVcsTUFBTSxxREFBcURoTixFQUFFZ04sUUFBT3ZILEVBQUVwRixFQUFFNk0sTUFBTSxLQUFLbE4sRUFBRWtOLE1BQU0sSUFBRyxXQUFXLE1BQU0sdUNBQXVDN00sRUFBRTZNLE1BQU0sR0FBRyxRQUFRbE4sRUFBRWtOLE1BQU0sR0FBRyx1RUFBc0V6SCxFQUFFekUsRUFBRSxHQUFHaUksT0FBT0MsVUFBVWxJLElBQUcsV0FBVyxNQUFNLDREQUE0REEsS0FBSSxJQUFJYyxFQUFFeTJCLEdBQUdsNEIsRUFBRW9QLE9BQU8sU0FBU3pPLEdBQUd6QixFQUFFZzVCLEdBQUd2NEIsRUFBRXlQLE9BQU8sU0FBU3pPLEdBQUcsT0FBT2MsRUFBRTJSLFlBQVlwQyxPQUFPOVIsR0FBR2tRLE9BQU8sWUFBWTgzRCxHQUFHdG5FLE9BQU8rRSxPQUFPLENBQUN3aUUsZ0JBQWdCSCxLQUFTblEsR0FBR3RtQyxHQUFHLENBQUM2MkMsWUFBWSxTQUFTaG5FLEVBQUVjLEdBQUcsUUFBRyxJQUFTQSxJQUFJQSxFQUFFLEdBQUdBLEVBQUUsRUFBRSxNQUFNLElBQUkyQyxNQUFNLGtFQUFrRSxJQUFJbEQsRUFBRSxvQkFBb0J3NEMsa0JBQWtCLzRDLGFBQWErNEMsaUJBQWlCLEdBQUd4NEMsR0FBR0EsR0FBR1AsRUFBRWluRSxXQUFXLEVBQUUsTUFBTSxJQUFJeGpFLE1BQU0seUdBQXlHLE9BQU9xYyxHQUFHRixXQUFXNWYsRUFBRWMsTUFBTW9tRSxHQUFHMW5FLE9BQU8rRSxPQUFPLENBQUM0aUUsU0FBUyxTQUFTbm5FLEVBQUVjLEdBQUcsT0FBT1AsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJWCxFQUFFaEIsRUFBRThCLEVBQUV2QyxFQUFFK0IsRUFBRVMsRUFBRXZDLEVBQUVJLEVBQUU0RixFQUFFbkUsRUFBRW9FLEVBQUU1RixFQUFFOEYsRUFBRWhHLEVBQUVtRyxFQUFFSixFQUFFSyxFQUFFQyxFQUFFRyxFQUFFRyxFQUFFRSxFQUFFRSxFQUFFRSxFQUFFLE9BQU92RyxFQUFFc0IsTUFBSyxTQUFTdEIsR0FBRyxPQUFPQSxFQUFFZ0MsT0FBTyxLQUFLLEVBQUUsR0FBR3JCLEVBQUUrdUIsR0FBR3R2QixFQUFFLE1BQU0sWUFBWUEsYUFBYTJOLEtBQUtwTixFQUFFQSxFQUFFdVAsU0FBUyxJQUFJdlAsRUFBRWdNLE1BQU0sSUFBSWhNLEVBQUVnTSxLQUFLLE1BQU0sSUFBSTlJLE1BQU0sd0RBQXdEbEQsRUFBRWdNLEtBQUssS0FBSyxHQUFHaE4sRUFBRWdCLEVBQUVrTSxNQUFNdkcsTUFBTSxFQUFFLEdBQUc3RSxFQUFFOUIsRUFBRSxHQUFHVCxFQUFFUyxFQUFFLElBQUlzQixFQUFFLElBQUlOLEVBQUVnTSxLQUFLLEVBQUVoTSxFQUFFa00sTUFBTSxJQUFJLEdBQUcsSUFBSTVMLEVBQUUsTUFBTSxJQUFJNEMsTUFBTSwwREFBMEQ1QyxHQUFHLE1BQU0sQ0FBQyxFQUFFTixFQUFFMkwsUUFBUSxLQUFLLEVBQUUsT0FBTzVLLEVBQUUxQixFQUFFaUMsT0FBTzlDLEVBQUV3QixFQUFFdUUsTUFBTTNGLEVBQUVvQixFQUFFc0UsTUFBTSxDQUFDLEVBQUV6RCxRQUFRaVEsSUFBSSxDQUFDdFMsRUFBRW1OLE9BQU8vTSxFQUFFK00sVUFBVSxLQUFLLEVBQUUsR0FBR25ILEVBQUVuRixFQUFFaUMsT0FBT2pCLEVBQUVtRSxFQUFFLEdBQUdDLEVBQUVELEVBQUUsR0FBRzNGLEVBQUV3QixFQUFFLEdBQUdzRSxFQUFFRixFQUFFLEdBQUdqRyxFQUFFMlEsVUFBVXZRLEVBQUV1USxVQUFVLFlBQVluUCxFQUFFNEwsT0FBTyxHQUFHL00sRUFBRSxHQUFHOEYsRUFBRSxFQUFFLE1BQU0sSUFBSXpCLE1BQU0sa0ZBQWtGckUsRUFBRSxNQUFNOEYsRUFBRSxVQUFVLENBQUMsR0FBRyxVQUFVM0UsRUFBRTRMLE1BQU0sTUFBTSxJQUFJMUksTUFBTSxrQ0FBa0NsRCxFQUFFNEwsTUFBTSwwQ0FBMEMsR0FBRy9NLEVBQUUsR0FBRzhGLEVBQUUsSUFBSSxNQUFNLElBQUl6QixNQUFNLGtGQUFrRnJFLEVBQUUsTUFBTThGLEVBQUUsTUFBTSxJQUFJaEcsRUFBRSxZQUFZcUIsRUFBRTRMLE1BQU0sSUFBSSxFQUFFOUcsRUFBRSxJQUFJK2hFLGtCQUFrQnRvRSxFQUFFdUMsRUFBRSxHQUFHNEQsRUFBRSxFQUFFQSxFQUFFNUQsRUFBRXZDLElBQUltRyxFQUFFSyxPQUFFLEVBQU9DLE9BQUUsRUFBT0csT0FBRSxFQUFPRyxPQUFFLEVBQU8sSUFBSWhGLEdBQUd5RSxFQUFFaEUsRUFBRTJELEdBQUcvRixFQUFFcUcsRUFBRWpFLEVBQUUyRCxHQUFHL0YsRUFBRXdHLEVBQUVwRSxFQUFFMkQsR0FBRy9GLEVBQUUyRyxFQUFFLEtBQUssSUFBSWhGLEdBQUd5RSxFQUFFaEUsRUFBRSxFQUFFMkQsR0FBRy9GLEVBQUVxRyxFQUFFakUsRUFBRSxFQUFFMkQsRUFBRSxHQUFHL0YsRUFBRXdHLEVBQUVwRSxFQUFFLEVBQUUyRCxFQUFFLEdBQUcvRixFQUFFMkcsRUFBRSxLQUFLLElBQUloRixJQUFJeUUsRUFBRWhFLEVBQUUsRUFBRTJELEdBQUcvRixFQUFFcUcsRUFBRWpFLEVBQUUsRUFBRTJELEVBQUUsR0FBRy9GLEVBQUV3RyxFQUFFcEUsRUFBRSxFQUFFMkQsRUFBRSxHQUFHL0YsRUFBRTJHLEVBQUV2RSxFQUFFLEVBQUUyRCxFQUFFLEdBQUcvRixHQUFHbUcsRUFBRSxHQUFHVSxFQUFFLEVBQUVkLElBQUlOLEtBQUtxRCxNQUFNMUMsR0FBR0QsRUFBRVUsRUFBRSxHQUFHcEIsS0FBS3FELE1BQU16QyxHQUFHRixFQUFFVSxFQUFFLEdBQUdwQixLQUFLcUQsTUFBTXRDLEdBQUdMLEVBQUVVLEVBQUUsR0FBR3BCLEtBQUtxRCxNQUFNbkMsR0FBRyxPQUFPLE1BQU0vRSxJQUFJQSxFQUFFMnJCLE1BQU0zdEIsRUFBRWdDLEVBQUU0ckIsT0FBT3JyQixFQUFFNEUsRUFBRW5GLEVBQUU4Z0IsV0FBVyxNQUFNemIsRUFBRSxJQUFJMnlDLFVBQVV6ekMsRUFBRXZHLEVBQUV1QyxHQUFHNEUsRUFBRW9oRSxhQUFhbGhFLEVBQUUsRUFBRSxJQUFJNUYsSUFBSVAsR0FBR08sRUFBRW1QLFVBQVUsQ0FBQyxFQUFFckssV0FBU3VhLFdBQVc2MkMsS0FBSzZRLEdBQUcsV0FBVyxTQUFTdG5FLEtBQUssT0FBT0EsRUFBRVUsVUFBVTZtRSxhQUFhLFdBQVcsT0FBT3JtRSxLQUFLQyxZQUFZcW1FLFdBQVd4bkUsRUFBRXluRSxXQUFXLFNBQVN6bkUsRUFBRWMsR0FBRyxPQUFPLElBQUlkLEVBQUVjLElBQUlkLEVBQW5KLEdBQXdKMG5FLEdBQUcsV0FBVyxTQUFTMW5FLElBQUlrQixLQUFLeW1FLGFBQWEsR0FBRyxPQUFPM25FLEVBQUU0bkUsT0FBTyxXQUFXLE9BQU8sTUFBTTVuRSxFQUFFdTlELFdBQVd2OUQsRUFBRXU5RCxTQUFTLElBQUl2OUQsR0FBR0EsRUFBRXU5RCxVQUFVdjlELEVBQUU0ZSxTQUFTLFNBQVM5ZCxHQUFHZCxFQUFFNG5FLFNBQVNELGFBQWE3bUUsRUFBRTBtRSxXQUFXLENBQUMxbUUsRUFBRUEsRUFBRTJtRSxhQUFhem5FLEVBQTlNLEdBQW1OLFNBQVM2bkUsR0FBRzduRSxHQUFHZ0YsRUFBRSxNQUFNaEYsRUFBRXduRSxXQUFVLFdBQVcsTUFBTSxpRkFBZ0Z4aUUsRUFBRSxpQkFBaUJoRixFQUFFd25FLFdBQVUsV0FBVyxNQUFNLDZEQUE2RHhuRSxFQUFFd25FLGFBQVl4aUUsRUFBRWhGLEVBQUV3bkUsVUFBVXBsRSxPQUFPLEdBQUUsV0FBVyxNQUFNLHVGQUFzRnNsRSxHQUFHOW9ELFNBQVM1ZSxHQUFHLElBQUk4bkUsR0FBR3RvRSxPQUFPK0UsT0FBTyxDQUFDd2pFLGFBQWFULEdBQUdVLGlCQUFpQk4sR0FBR08sY0FBY0osS0FBS0ssR0FBRyxLQUFLQyxHQUFHLEdBQUcsU0FBU0MsS0FBSyxPQUFPLEtBQUt0b0QsR0FBRy9CLFFBQVFzZSxpQkFBaUI2ckMsR0FBR0MsR0FBRyxTQUFTRSxHQUFHcm9FLEVBQUVjLEVBQUVQLEdBQUcsSUFBSVgsR0FBRSxFQUFHLElBQUl3RixFQUFFcEYsSUFBSW9GLEVBQUV0RSxNQUFNbEIsR0FBRSxHQUFJd0YsRUFBRXBGLElBQUlvRixFQUFFdEUsS0FBS2xCLEdBQUUsR0FBSUEsRUFBRSxDQUFDLElBQUlMLEVBQUVTLEVBQUVtQixZQUFZOUIsS0FBS2dDLEVBQUVQLEVBQUVLLFlBQVk5QixLQUFLLEdBQUdFLElBQUk4QixFQUFFLE1BQU0sSUFBSW9DLE1BQU0seUNBQXlDbEUsRUFBRSxlQUFlOEIsR0FBRyxHQUFHSixNQUFNa0UsUUFBUW5GLElBQUlpQixNQUFNa0UsUUFBUXJFLEdBQUcsQ0FBQyxJQUFJaEMsRUFBRXN3QixHQUFHcHZCLEdBQUdhLEVBQUV1dUIsR0FBR3R1QixHQUFHLElBQUltRSxFQUFFbkcsRUFBRStCLEdBQUcsTUFBTSxJQUFJNEMsTUFBTSwwQ0FBMEMzRSxFQUFFLGlCQUFpQitCLEVBQUUsS0FBSyxJQUFJUyxFQUFFOEQsRUFBRXBGLEdBQUdBLEVBQUVkLEVBQUVjLEdBQUdqQixFQUFFcUcsRUFBRXRFLEdBQUdBLEVBQUU1QixFQUFFNEIsR0FBRyxHQUFHUSxFQUFFYyxTQUFTckQsRUFBRXFELE9BQU8sTUFBTSxJQUFJcUIsTUFBTSx5Q0FBeUNuQyxFQUFFYyxPQUFPLGlCQUFpQnJELEVBQUVxRCxPQUFPLGdCQUFnQmQsRUFBRSxnQkFBZ0J2QyxFQUFFLEtBQUssSUFBSSxJQUFJSSxFQUFFLEVBQUVBLEVBQUVKLEVBQUVxRCxTQUFTakQsRUFBRSxDQUFDLElBQUk0RixFQUFFekQsRUFBRW5DLEdBQUd5QixFQUFFN0IsRUFBRUksR0FBRyxJQUFJb0IsRUFBRXdFLEVBQUVuRSxHQUFHLE1BQU0sSUFBSTZDLE1BQU0seUJBQXlCdEUsRUFBRSxPQUFPNEYsRUFBRSxjQUFjNUYsRUFBRSxPQUFPeUIsRUFBRSxnQkFBZ0JVLEVBQUUsZ0JBQWdCdkMsRUFBRSxNQUFNLFNBQVN1cEUsR0FBR3RvRSxFQUFFYyxFQUFFUCxHQUFHLE9BQU8yRyxTQUFTbEgsS0FBS2tILFNBQVNwRyxNQUFNbUcsTUFBTWpILElBQUlpSCxNQUFNbkcsSUFBSTZELEtBQUsrUCxJQUFJMVUsRUFBRWMsR0FBR1AsR0FBRyxJQUFJZ29FLEdBQUcvb0UsT0FBTytFLE9BQU8sQ0FBQ2lrRSxxQkFBcUJMLEdBQUdNLGtCQUFrQixTQUFTem9FLEVBQUVjLEVBQUVQLEdBQUcsT0FBTyxNQUFNQSxJQUFJQSxFQUFFNm5FLE1BQU1DLEdBQUdyb0UsRUFBRWMsR0FBRSxTQUFTZCxFQUFFYyxHQUFHLE9BQU93bkUsR0FBR3RvRSxFQUFFYyxFQUFFUCxPQUFNbW9FLFlBQVlOLEdBQUdPLG9CQUFvQixTQUFTM29FLEVBQUVjLEdBQUdkLElBQUkwQixNQUFLLFdBQVcsT0FBT1osRUFBRThuRSxVQUFRLFdBQVcsT0FBTzluRSxRQUFPK25FLGtCQUFrQixTQUFTN29FLEVBQUVjLEdBQUcsSUFBSVAsRUFBRSxpQkFBaUJPLEdBQUcsaUJBQWlCQSxHQUFHLGtCQUFrQkEsRUFBRSxDQUFDQSxHQUFHQSxFQUFFLE9BQU95RyxFQUFFdkgsSUFBSXVILEVBQUV2SCxFQUFFLEtBQUt1SCxFQUFFekcsSUFBSXlHLEVBQUV6RyxFQUFFLElBQUl1bkUsR0FBR3JvRSxFQUFFTyxHQUFFLFNBQVNQLEVBQUVjLEdBQUcsT0FBT2QsR0FBR2MsS0FBSXVuRSxHQUFHcm9FLEVBQUVjLEdBQUUsU0FBU2QsRUFBRWMsR0FBRyxPQUFPd25FLEdBQUd0b0UsRUFBRWMsRUFBRSxPQUFNZ29FLG1CQUFtQixTQUFTOW9FLEVBQUVjLEVBQUVQLEdBQUcsR0FBRyxNQUFNQSxJQUFJQSxFQUFFNm5FLE9BQU9FLEdBQUd0b0UsRUFBRWMsRUFBRVAsR0FBRyxNQUFNLElBQUlrRCxNQUFNLDhCQUE4QnpELEVBQUUsa0JBQWtCYyxJQUFJaW9FLG9CQUFvQixTQUFTL29FLEVBQUVjLEVBQUVQLEdBQUcsSUFBSSxJQUFJWCxFQUFFLEVBQUVBLEVBQUVJLEVBQUVvQyxPQUFPeEMsSUFBSSxHQUFHSSxFQUFFSixHQUFHa0IsR0FBR2QsRUFBRUosR0FBR1csRUFBRSxNQUFNLElBQUlrRCxNQUFNLHNCQUFzQnpELEVBQUVKLEdBQUcsU0FBU2tCLEVBQUUsV0FBV1AsSUFBSXlvRSx3QkFBd0IsU0FBU2hwRSxFQUFFYyxHQUFHbW9FLE9BQU8sSUFBSXJpRSxhQUFhNUcsSUFBSWtwRSxRQUFRLElBQUl0aUUsYUFBYTlGLE9BQU9xb0UsR0FBRyxRQUFZQyxHQUFHNXBFLE9BQU8rRSxPQUFPLENBQUM4a0UsV0FBV2g4QixHQUFHaThCLFdBQVdqK0MsR0FBR2srQyxlQUFlLFdBQVd6cUUsRUFBRXFFLElBQUksNEJBQTJCLElBQUtxbUUsaUJBQWlCenhCLEdBQUcweEIsZ0JBQWdCbG9ELEdBQUdtb0QsYUFBYXI3QixLQUFLczdCLEdBQUcsU0FBUzNwRSxHQUFHLFNBQVNULElBQUksT0FBTyxPQUFPUyxHQUFHQSxFQUFFMkIsTUFBTVQsS0FBS2tELFlBQVlsRCxLQUFLLE9BQU9KLEVBQUV2QixFQUFFUyxHQUFHVCxFQUFFbUIsVUFBVWtwRSxTQUFTLFNBQVM1cEUsRUFBRWMsRUFBRVAsUUFBRyxJQUFTTyxJQUFJQSxHQUFFLEdBQUksSUFBSWxCLEVBQUVzQixLQUFLMm9FLGlCQUFpQjdwRSxFQUFFTyxHQUFHaEIsRUFBRUssRUFBRUcsTUFBTXNCLEVBQUV6QixFQUFFNmYsTUFBTSxHQUFHLE1BQU1sZixFQUFFLENBQUMsSUFBSXpCLEVBQUV5QixFQUFFNkYsS0FBSSxTQUFTcEcsR0FBRyxNQUFNLENBQUNYLEtBQUtXLEVBQUVYLEtBQUt5NUQsT0FBT3ozRCxFQUFFckIsRUFBRVgsVUFBUzZCLEtBQUs0b0UsZUFBZWhyRSxRQUFRb0MsS0FBSzRvRSxlQUFlem9FLEdBQUcsT0FBT2t0QixHQUFHbHRCLEdBQUdQLEVBQUV2QixHQUFHQSxFQUFFbVEsVUFBVSxPQUFPbFEsT0FBT0MsZUFBZUYsRUFBRW1CLFVBQVUsYUFBYSxDQUFDZixJQUFJLFdBQVcsT0FBTyxNQUFNdUIsS0FBSzZvRSxjQUFjN29FLEtBQUs2b0UsWUFBWSxHQUFHN29FLEtBQUs2b0UsYUFBYXJxRSxZQUFXLEVBQUc4RCxjQUFhLElBQUtqRSxFQUFFbUIsVUFBVXNwRSxvQkFBb0IsV0FBVzlvRSxLQUFLNm9FLFlBQVk3b0UsS0FBSytvRSxXQUFXLEdBQUcxcUUsRUFBRW1CLFVBQVVtcEUsaUJBQWlCLFNBQVM3cEUsRUFBRWMsR0FBRyxPQUFPNjZCLEdBQUczN0IsRUFBRWMsSUFBSXZCLEVBQUVtQixVQUFVZ1AsUUFBUSxXQUFXLE1BQU14TyxLQUFLNm9FLGFBQWF4N0MsR0FBR3J0QixLQUFLNm9FLGNBQWN4cUUsRUFBRW1CLFVBQVV3cEUsZUFBZSxXQUFXLE9BQU8zcEUsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxPQUFPdEIsRUFBRXNCLE1BQUssU0FBU2xCLEdBQUcsT0FBTyxNQUFNa0IsS0FBSzZvRSxjQUFjN29FLEtBQUs2b0UsWUFBWSxHQUFHLENBQUMsRUFBRSxDQUFDMXFFLEtBQUssT0FBT3k1RCxPQUFPeG5DLEdBQUdwd0IsS0FBSzZvRSxZQUFZLGtCQUFnQnhxRSxFQUFFbUIsVUFBVXlwRSxXQUFXLFdBQVcsT0FBTzVwRSxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLE9BQU90QixFQUFFc0IsTUFBSyxTQUFTbEIsR0FBRyxNQUFNLElBQUl5RCxNQUFNLGtFQUFnRWxFLEVBQUVtQixVQUFVMHBFLFdBQVcsU0FBU3BxRSxHQUFHLE9BQU9PLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsT0FBT3RCLEVBQUVzQixNQUFLLFNBQVNsQixHQUFHLE1BQU0sSUFBSXlELE1BQU0sNERBQTREdkMsS0FBS3FtRSx1QkFBcUJob0UsRUFBRW1CLFVBQVUycEUsa0JBQWtCLFNBQVNycUUsR0FBRyxPQUFPTyxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlKLEVBQUUsT0FBT2xCLEVBQUVzQixNQUFLLFNBQVNYLEdBQUcsT0FBT0EsRUFBRXFCLE9BQU8sS0FBSyxFQUFFLE9BQU9kLEVBQUVJLEtBQUssQ0FBQyxFQUFFbEIsRUFBRSxHQUFHODRELE9BQU81c0QsUUFBUSxLQUFLLEVBQUUsT0FBT3BMLEVBQUVpcEUsWUFBWXhwRSxFQUFFc0IsT0FBTyxHQUFHLENBQUMsRUFBRTdCLEVBQUVrRyxNQUFNLFlBQVUzRyxFQUEvaEQsQ0FBa2lEK25FLElBQUk5bkUsT0FBT0MsZUFBZWtxRSxHQUFHOXBFLE9BQU9rWSxZQUFZLENBQUNoWSxNQUFNLFNBQVNDLEdBQUcsT0FBTyxNQUFNQSxFQUFFNHBFLFVBQVUsTUFBTTVwRSxFQUFFNnBFLGtCQUFrQixNQUFNN3BFLEVBQUU4cEUsa0JBQWtCLElBQUlRLEdBQUcsU0FBU3RxRSxHQUFHLFNBQVNULEVBQUV1QixFQUFFUCxFQUFFWCxRQUFHLElBQVNBLElBQUlBLEVBQUUsTUFBTSxJQUFJTCxFQUFFUyxFQUFFZixLQUFLaUMsT0FBT0EsS0FBSyxPQUFPM0IsRUFBRWdyRSxhQUFhenBFLEVBQUV2QixFQUFFaXJFLElBQUlqcUUsRUFBRWhCLEVBQUUrOEIsUUFBUTE4QixFQUFFTCxFQUFFa3JFLGlCQUFpQixHQUFHbHJFLEVBQUVtckUsbUJBQW1CLEdBQUcsTUFBTTlxRSxJQUFJTCxFQUFFKzhCLFFBQVF4YyxHQUFHL0IsUUFBUXVlLFdBQVcvOEIsRUFBRSxPQUFPdUIsRUFBRXZCLEVBQUVTLEdBQUdULEVBQUVtQixVQUFVb3BFLGVBQWUsU0FBUzlwRSxHQUFHLElBQUljLEVBQUVJLE1BQU1ELE1BQU1rRSxRQUFRbkYsR0FBR0EsRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRVgsUUFBT0csT0FBT2lkLEtBQUt6YyxJQUFJaUUsU0FBUSxTQUFTMUQsRUFBRVgsR0FBRyxJQUFJTCxFQUFFdWdCLEdBQUd6RixvQkFBb0I5WixHQUFHLE1BQU1PLEVBQUUycEUsaUJBQWlCN3FFLEtBQUtrQixFQUFFMnBFLGlCQUFpQjdxRSxHQUFHLENBQUMrcUUsYUFBYXBxRSxFQUFFLGNBQWMyVyxTQUFTb1gsSUFBRyxXQUFXLE9BQU8rRCxHQUFHOXlCLEdBQUcyWCxVQUFTLFFBQVEsTUFBTXBXLEVBQUU0cEUsbUJBQW1COXFFLEtBQUtrQixFQUFFNHBFLG1CQUFtQjlxRSxHQUFHLENBQUMrcUUsYUFBYXBxRSxFQUFFLGFBQWEyVyxTQUFTb1gsSUFBRyxXQUFXLE9BQU8rRCxHQUFHOXlCLEdBQUcyWCxVQUFTLFFBQVEsSUFBSTdWLEVBQUVKLE1BQU1rRSxRQUFRbkYsR0FBR0EsRUFBRUosR0FBR2s1RCxPQUFPOTRELEVBQUVPLEdBQUcsR0FBRyxNQUFNYyxFQUFFLENBQUMsSUFBSXZDLEVBQUVnQyxFQUFFMnBFLGlCQUFpQjdxRSxHQUFHc1gsU0FBU3JXLEVBQUVDLEVBQUU0cEUsbUJBQW1COXFFLEdBQUdzWCxTQUFTb1gsSUFBRyxXQUFXLElBQUl0dUIsRUFBRWxCLEVBQUVxVCxJQUFJclIsRUFBRTBwRSxLQUFLNTRELElBQUl2USxFQUFFbVQsU0FBU3JDLElBQUksRUFBRXJSLEVBQUUwcEUsTUFBTWpxRSxFQUFFTSxFQUFFK1EsSUFBSTlRLEVBQUV3N0IsU0FBUzEyQixPQUFPeU0sSUFBSXZULEVBQUU4UyxJQUFJOVEsRUFBRXc3QixTQUFTMTJCLFFBQVF1TSxJQUFJOVEsR0FBR3pCLEVBQUVpQixFQUFFc1IsSUFBSXJSLEVBQUUwcEUsS0FBSzU0RCxJQUFJclIsRUFBRWlVLFNBQVNyQyxJQUFJLEVBQUVyUixFQUFFMHBFLE1BQU0xckUsRUFBRTZFLE9BQU8zRCxHQUFHYSxFQUFFOEMsT0FBTy9ELEdBQUcsSUFBSTBCLEVBQUVmLEVBQUU0UixLQUFLclIsRUFBRXlwRSxjQUFjMzRELElBQUlyUyxHQUFHQSxFQUFFb0UsT0FBT3JDLFVBQVFKLEtBQUs4b0UsdUJBQXVCenFFLEVBQUVtQixVQUFVZ1AsUUFBUSxXQUFXLE1BQU14TyxLQUFLd3BFLHFCQUFxQm44QyxHQUFHcnRCLEtBQUt1cEUsaUJBQWlCcmtFLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRWtYLGFBQVlxWCxHQUFHcnRCLEtBQUt3cEUsbUJBQW1CdGtFLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRWtYLGVBQWMzWCxFQUFFbUIsVUFBVXlwRSxXQUFXLFdBQVcsT0FBTzVwRSxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlsQixFQUFFLE9BQU9KLEVBQUVzQixNQUFLLFNBQVNKLEdBQUcsT0FBT0EsRUFBRWMsT0FBTyxLQUFLLEVBQUUsT0FBTzVCLEVBQUVrQixLQUFLdXBFLGlCQUFpQnBrRSxPQUFPbkYsS0FBS3dwRSxvQkFBb0IsQ0FBQyxFQUFFeHBFLEtBQUtncEUsa0JBQWtCLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDcHBFLEVBQUVlLFFBQVF3RSxPQUFPckcsRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsTUFBTSxDQUFDWCxLQUFLVyxFQUFFMnFFLGFBQWE3UixPQUFPOTRELEVBQUVrWCx1QkFBb0IzWCxFQUFFbUIsVUFBVTBwRSxXQUFXLFNBQVNwcUUsR0FBRyxPQUFPTyxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlKLEVBQUUsT0FBT2xCLEVBQUVzQixNQUFLLFNBQVNYLEdBQUcsT0FBT0EsRUFBRXFCLE9BQU8sS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFVixLQUFLbXBFLGtCQUFrQnJxRSxJQUFJLEtBQUssRUFBRSxPQUFPQSxFQUFFTyxFQUFFc0IsT0FBT2YsRUFBRWQsRUFBRW9DLE9BQU8sRUFBS2xCLEtBQUt1cEUsaUJBQWlCenFFLEVBQUVrRyxNQUFNLEVBQUVwRixHQUFHc0YsS0FBSSxTQUFTcEcsR0FBRyxNQUFNLENBQUMycUUsYUFBYTNxRSxFQUFFWCxLQUFLNlgsU0FBU2xYLEVBQUU4NEQsT0FBTzVoRCxVQUFTLE9BQU9oVyxLQUFLd3BFLG1CQUFtQjFxRSxFQUFFa0csTUFBTXBGLEVBQUUsRUFBRUEsR0FBR3NGLEtBQUksU0FBU3BHLEdBQUcsTUFBTSxDQUFDMnFFLGFBQWEzcUUsRUFBRVgsS0FBSzZYLFNBQVNsWCxFQUFFODRELE9BQU81aEQsVUFBUyxPQUFPLENBQUMsV0FBUzNYLEVBQUVtQixVQUFVa3FFLFVBQVUsV0FBVyxNQUFNLENBQUNMLGFBQWFycEUsS0FBS3FwRSxhQUFhQyxJQUFJdHBFLEtBQUtzcEUsSUFBSWx1QyxRQUFRcDdCLEtBQUtvN0IsVUFBVS84QixFQUFFa29FLFdBQVcsU0FBU3puRSxFQUFFYyxHQUFHLE9BQU8sSUFBSWQsRUFBRWMsRUFBRXlwRSxhQUFhenBFLEVBQUUwcEUsSUFBSTFwRSxFQUFFdzdCLFVBQVUvOEIsRUFBRWlvRSxVQUFVLFdBQVdqb0UsRUFBcnJFLENBQXdyRW9xRSxJQUFJOUIsR0FBR3lDLElBQUksSUFBSU8sR0FBRyxTQUFTN3FFLEdBQUcsU0FBU1QsRUFBRXVCLEVBQUVQLFFBQUcsSUFBU0EsSUFBSUEsRUFBRSxJQUFJLElBQUlYLEVBQUVJLEVBQUVmLEtBQUtpQyxPQUFPQSxLQUFLLE9BQU90QixFQUFFMnFFLGFBQWF6cEUsRUFBRWxCLEVBQUVrckUsd0JBQXdCdnFFLEVBQUVYLEVBQUU2cUUsaUJBQWlCLEdBQUc3cUUsRUFBRSxPQUFPa0IsRUFBRXZCLEVBQUVTLEdBQUdULEVBQUVtQixVQUFVb3BFLGVBQWUsU0FBUzlwRSxHQUFHLElBQUljLEVBQUVJLE1BQU1ELE1BQU1rRSxRQUFRbkYsR0FBR0EsRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRVgsUUFBT0csT0FBT2lkLEtBQUt6YyxJQUFJaUUsU0FBUSxTQUFTMUQsRUFBRVgsR0FBRyxJQUFJTCxFQUFFdWdCLEdBQUd6RixvQkFBb0I5WixHQUFNLE1BQU1PLEVBQUUycEUsaUJBQWlCN3FFLEtBQUlrQixFQUFFMnBFLGlCQUFpQjdxRSxHQUFHLENBQUMrcUUsYUFBYXBxRSxFQUFFLGVBQWUyVyxTQUFTb1gsSUFBRyxXQUFXLE9BQU95RCxHQUFHeHlCLEVBQUVrTixNQUFNM0wsRUFBRWdxRSx5QkFBeUI1ekQsVUFBUyxRQUFPLElBQUk3VixFQUFFSixNQUFNa0UsUUFBUW5GLEdBQUdBLEVBQUVKLEdBQUdrNUQsT0FBTzk0RCxFQUFFTyxHQUFHLEdBQUcsTUFBTWMsRUFBRSxDQUFDLElBQUl2QyxFQUFFZ0MsRUFBRTJwRSxpQkFBaUI3cUUsR0FBR3NYLFNBQVNvWCxJQUFHLFdBQVcsSUFBSXR1QixFQUFFbEIsRUFBRThTLElBQUl2USxFQUFFbVQsVUFBVTFWLEVBQUU2RSxPQUFPM0QsR0FBRyxJQUFJTyxFQUFFYyxFQUFFZ1IsSUFBSXJTLEVBQUU0UixJQUFJa08sR0FBRy9CLFFBQVF1ZSxXQUFXMTJCLFFBQVF1TSxLQUFLclIsRUFBRXlwRSxjQUFjMzRELElBQUlyUyxHQUFHQSxFQUFFb0UsT0FBT3BELFVBQVFXLEtBQUs4b0UsdUJBQXVCenFFLEVBQUVtQixVQUFVZ1AsUUFBUSxXQUFXLE1BQU14TyxLQUFLdXBFLGtCQUFrQmw4QyxHQUFHcnRCLEtBQUt1cEUsaUJBQWlCcmtFLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRWtYLGNBQWEzWCxFQUFFbUIsVUFBVXlwRSxXQUFXLFdBQVcsT0FBTzVwRSxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLE9BQU90QixFQUFFc0IsTUFBSyxTQUFTbEIsR0FBRyxPQUFPQSxFQUFFNEIsT0FBTyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUVWLEtBQUtncEUsa0JBQWtCLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDbHFFLEVBQUU2QixRQUFRd0UsT0FBT25GLEtBQUt1cEUsaUJBQWlCcmtFLEtBQUksU0FBU3BHLEdBQUcsTUFBTSxDQUFDWCxLQUFLVyxFQUFFMnFFLGFBQWE3UixPQUFPOTRELEVBQUVrWCx1QkFBb0IzWCxFQUFFbUIsVUFBVTBwRSxXQUFXLFNBQVNwcUUsR0FBRyxPQUFPTyxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLE9BQU90QixFQUFFc0IsTUFBSyxTQUFTSixHQUFHLE9BQU9BLEVBQUVjLE9BQU8sS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFVixLQUFLbXBFLGtCQUFrQnJxRSxJQUFJLEtBQUssRUFBRSxPQUFPQSxFQUFFYyxFQUFFZSxPQUFVWCxLQUFLdXBFLGlCQUFpQnpxRSxFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxNQUFNLENBQUMycUUsYUFBYTNxRSxFQUFFWCxLQUFLNlgsU0FBU2xYLEVBQUU4NEQsT0FBTzVoRCxVQUFTLE9BQU8sQ0FBQyxXQUFTM1gsRUFBRW1CLFVBQVVrcUUsVUFBVSxXQUFXLE1BQU0sQ0FBQ0wsYUFBYXJwRSxLQUFLcXBFLGFBQWFPLHdCQUF3QjVwRSxLQUFLNHBFLDBCQUEwQnZyRSxFQUFFa29FLFdBQVcsU0FBU3puRSxFQUFFYyxHQUFHLE9BQU8sSUFBSWQsRUFBRWMsRUFBRXlwRSxhQUFhenBFLEVBQUVncUUsMEJBQTBCdnJFLEVBQUVpb0UsVUFBVSxVQUFVam9FLEVBQWpxRCxDQUFvcURvcUUsSUFBSTlCLEdBQUdnRCxJQUFJLElBQUlFLEdBQUcsU0FBUy9xRSxHQUFHLFNBQVNULEVBQUV1QixFQUFFUCxFQUFFWCxFQUFFTCxRQUFHLElBQVNBLElBQUlBLEVBQUUsTUFBTSxJQUFJOEIsRUFBRXJCLEVBQUVmLEtBQUtpQyxPQUFPQSxLQUFLLE9BQU9HLEVBQUVrcEUsYUFBYXpwRSxFQUFFTyxFQUFFMnBFLE1BQU16cUUsRUFBRWMsRUFBRTRwRSxNQUFNcnJFLEVBQUV5QixFQUFFaTdCLFFBQVEvOEIsRUFBRThCLEVBQUU2cEUsdUJBQXVCLEdBQUc3cEUsRUFBRThwRSx3QkFBd0IsR0FBRzc4QyxJQUFHLFdBQVdqdEIsRUFBRStwRSxTQUFTOTVDLEdBQUcvd0IsR0FBRzJXLFdBQVc3VixFQUFFZ3FFLFNBQVMvNUMsR0FBRzF4QixHQUFHc1gsY0FBYSxNQUFNM1gsSUFBSThCLEVBQUVpN0IsUUFBUXhjLEdBQUcvQixRQUFRdWUsV0FBV2o3QixFQUFFLE9BQU9QLEVBQUV2QixFQUFFUyxHQUFHVCxFQUFFbUIsVUFBVW9wRSxlQUFlLFNBQVM5cEUsR0FBRyxJQUFJYyxFQUFFSSxLQUFLWCxFQUFFVSxNQUFNa0UsUUFBUW5GLEdBQUdBLEVBQUVvRyxLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUVYLFFBQU9HLE9BQU9pZCxLQUFLemMsR0FBR3N1QixJQUFHLFdBQVcsSUFBSTF1QixFQUFFbW1ELEdBQUcsRUFBRWpsRCxFQUFFc3FFLFVBQVU3ckUsRUFBRXdtRCxHQUFHLEVBQUVqbEQsRUFBRXVxRSxVQUFVOXFFLEVBQUUwRCxTQUFRLFNBQVMxRCxFQUFFYyxHQUFHLElBQUl2QyxFQUFFZ2hCLEdBQUd6RixvQkFBb0I5WixHQUFHLE1BQU1PLEVBQUVvcUUsdUJBQXVCN3BFLEtBQUtQLEVBQUVvcUUsdUJBQXVCN3BFLEdBQUcsQ0FBQ3NwRSxhQUFhcHFFLEVBQUUsS0FBSzJXLFNBQVNvWCxJQUFHLFdBQVcsT0FBTytELEdBQUd2ekIsR0FBR29ZLFVBQVMsUUFBUSxNQUFNcFcsRUFBRXFxRSx3QkFBd0I5cEUsS0FBS1AsRUFBRXFxRSx3QkFBd0I5cEUsR0FBRyxDQUFDc3BFLGFBQWFwcUUsRUFBRSxLQUFLMlcsU0FBU29YLElBQUcsV0FBVyxPQUFPK0QsR0FBR3Z6QixHQUFHb1ksVUFBUyxRQUFRLElBQUlyVyxFQUFFSSxNQUFNa0UsUUFBUW5GLEdBQUdBLEVBQUVxQixHQUFHeTNELE9BQU85NEQsRUFBRU8sR0FBRyxHQUFHLE1BQU1NLEVBQUUsQ0FBQyxJQUFJUyxFQUFFUixFQUFFb3FFLHVCQUF1QjdwRSxHQUFHNlYsU0FBU25ZLEVBQUUrQixFQUFFcXFFLHdCQUF3QjlwRSxHQUFHNlYsU0FBUy9YLEVBQUVtQyxFQUFFNlEsSUFBSXJSLEVBQUVrcUUsT0FBT3A1RCxJQUFJL1EsRUFBRXNSLElBQUksRUFBRXJSLEVBQUVrcUUsUUFBUWptRSxFQUFFaEcsRUFBRW9ULElBQUlyUixFQUFFbXFFLE9BQU9yNUQsSUFBSS9RLEVBQUUyVCxTQUFTckMsSUFBSSxFQUFFclIsRUFBRW1xRSxRQUFRcnFFLEVBQUV6QixFQUFFa1QsSUFBSXpTLEdBQUdvRixFQUFFRCxFQUFFc04sSUFBSTlTLEdBQUcrQixFQUFFcUMsT0FBT3hFLEdBQUdKLEVBQUU0RSxPQUFPb0IsR0FBRyxJQUFJM0YsRUFBRXdCLEVBQUV5UixJQUFJck4sRUFBRVksT0FBT2dNLElBQUk5USxFQUFFdzdCLFVBQVVucUIsS0FBS3JSLEVBQUV5cEUsY0FBYzM0RCxJQUFJOVMsR0FBR0EsRUFBRTZFLE9BQU92RSxPQUFNMEIsRUFBRXNxRSxTQUFTem5FLE9BQU83QyxFQUFFc3FFLFNBQVNqNUQsSUFBSXJSLEVBQUVrcUUsUUFBUWxxRSxFQUFFdXFFLFNBQVMxbkUsT0FBTzdDLEVBQUV1cUUsU0FBU2w1RCxJQUFJclIsRUFBRW1xRSxXQUFVL3BFLEtBQUs4b0UsdUJBQXVCenFFLEVBQUVtQixVQUFVZ1AsUUFBUSxXQUFXeE8sS0FBS2txRSxTQUFTMTdELFVBQVV4TyxLQUFLbXFFLFNBQVMzN0QsVUFBVSxNQUFNeE8sS0FBS2dxRSx3QkFBd0IzOEMsR0FBR3J0QixLQUFLZ3FFLHVCQUF1QjlrRSxLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUVrWCxhQUFZLE1BQU1oVyxLQUFLaXFFLHlCQUF5QjU4QyxHQUFHcnRCLEtBQUtpcUUsd0JBQXdCL2tFLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRWtYLGNBQWEzWCxFQUFFbUIsVUFBVXlwRSxXQUFXLFdBQVcsT0FBTzVwRSxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlsQixFQUFFLE9BQU9KLEVBQUVzQixNQUFLLFNBQVNKLEdBQUcsT0FBT0EsRUFBRWMsT0FBTyxLQUFLLEVBQUUsT0FBTzVCLEVBQUVrQixLQUFLZ3FFLHVCQUF1QjdrRSxPQUFPbkYsS0FBS2lxRSx5QkFBeUIsQ0FBQyxFQUFFanFFLEtBQUtncEUsa0JBQWtCLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDcHBFLEVBQUVlLFFBQVF3RSxPQUFPckcsRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsTUFBTSxDQUFDWCxLQUFLVyxFQUFFMnFFLGFBQWE3UixPQUFPOTRELEVBQUVrWCx1QkFBb0IzWCxFQUFFbUIsVUFBVTBwRSxXQUFXLFNBQVNwcUUsR0FBRyxPQUFPTyxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLElBQUlKLEVBQUVQLEVBQUVXLEtBQUssT0FBT3RCLEVBQUVzQixNQUFLLFNBQVN0QixHQUFHLE9BQU9BLEVBQUVnQyxPQUFPLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRVYsS0FBS21wRSxrQkFBa0JycUUsSUFBSSxLQUFLLEVBQUUsT0FBT0EsRUFBRUosRUFBRWlDLE9BQU95c0IsSUFBRyxXQUFXL3RCLEVBQUU2cUUsU0FBU3puRSxPQUFPMGhELEdBQUc5a0QsRUFBRXlxRSxNQUFNenFFLEVBQUV3cEUsWUFBWSxJQUFJeHBFLEVBQUU4cUUsU0FBUzFuRSxPQUFPMGhELEdBQUc5a0QsRUFBRTBxRSxNQUFNMXFFLEVBQUV3cEUsWUFBWSxPQUFNanBFLEVBQUVkLEVBQUVvQyxPQUFPLEVBQUtsQixLQUFLZ3FFLHVCQUF1QmxyRSxFQUFFa0csTUFBTSxFQUFFcEYsR0FBR3NGLEtBQUksU0FBU3BHLEdBQUcsTUFBTSxDQUFDMnFFLGFBQWEzcUUsRUFBRVgsS0FBSzZYLFNBQVNsWCxFQUFFODRELE9BQU81aEQsVUFBUyxPQUFPaFcsS0FBS2lxRSx3QkFBd0JuckUsRUFBRWtHLE1BQU1wRixFQUFFLEVBQUVBLEdBQUdzRixLQUFJLFNBQVNwRyxHQUFHLE1BQU0sQ0FBQzJxRSxhQUFhM3FFLEVBQUVYLEtBQUs2WCxTQUFTbFgsRUFBRTg0RCxPQUFPNWhELFVBQVMsT0FBTyxDQUFDLFdBQVMzWCxFQUFFbUIsVUFBVWtxRSxVQUFVLFdBQVcsTUFBTSxDQUFDTCxhQUFhcnBFLEtBQUtxcEUsYUFBYVMsTUFBTTlwRSxLQUFLOHBFLE1BQU1DLE1BQU0vcEUsS0FBSytwRSxNQUFNM3VDLFFBQVFwN0IsS0FBS283QixVQUFVLzhCLEVBQUVrb0UsV0FBVyxTQUFTem5FLEVBQUVjLEdBQUcsT0FBTyxJQUFJZCxFQUFFYyxFQUFFeXBFLGFBQWF6cEUsRUFBRWtxRSxNQUFNbHFFLEVBQUVtcUUsTUFBTW5xRSxFQUFFdzdCLFVBQVUvOEIsRUFBRWlvRSxVQUFVLE9BQU9qb0UsRUFBL3BGLENBQWtxRm9xRSxJQUFJOUIsR0FBR2tELElBQUksSUFBSU8sR0FBRyxTQUFTdHJFLEdBQUcsU0FBU1QsRUFBRXVCLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixRQUFHLElBQVM5QixJQUFJQSxFQUFFLFdBQU0sSUFBUzhCLElBQUlBLEVBQUUsR0FBRyxJQUFJdkMsRUFBRWtCLEVBQUVmLEtBQUtpQyxPQUFPQSxLQUFLLE9BQU9wQyxFQUFFeXJFLGFBQWF6cEUsRUFBRWhDLEVBQUVrc0UsTUFBTXpxRSxFQUFFekIsRUFBRW1zRSxNQUFNcnJFLEVBQUVkLEVBQUV3OUIsUUFBUS84QixFQUFFVCxFQUFFeXNFLE1BQU1scUUsRUFBRXZDLEVBQUVvc0UsdUJBQXVCLEdBQUdwc0UsRUFBRTBzRSwyQkFBMkIsR0FBR2w5QyxJQUFHLFdBQVd4dkIsRUFBRTJzRSxVQUFVbjZDLEdBQUcsR0FBR3BhLFdBQVdwWSxFQUFFc3NFLFNBQVM5NUMsR0FBRy93QixHQUFHMlcsY0FBYSxNQUFNM1gsSUFBSVQsRUFBRXc5QixRQUFReGMsR0FBRy9CLFFBQVF1ZSxXQUFXeDlCLEVBQUUsT0FBT2dDLEVBQUV2QixFQUFFUyxHQUFHVCxFQUFFbUIsVUFBVW9wRSxlQUFlLFNBQVM5cEUsR0FBRyxJQUFJYyxFQUFFSSxLQUFLWCxFQUFFVSxNQUFNa0UsUUFBUW5GLEdBQUdBLEVBQUVvRyxLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUVYLFFBQU9HLE9BQU9pZCxLQUFLemMsR0FBR3N1QixJQUFHLFdBQVcsSUFBSTF1QixFQUFFbW1ELEdBQUcsRUFBRWpsRCxFQUFFc3FFLFVBQVU3ckUsRUFBRXdrRCxJQUFJampELEVBQUV5cEUsYUFBYXpwRSxFQUFFMnFFLFVBQVV0NUQsSUFBSXJSLEVBQUV5cUUsT0FBTzM1RCxJQUFJLElBQUlyUixFQUFFMEQsU0FBUSxTQUFTMUQsRUFBRWMsR0FBRyxJQUFJdkMsRUFBRWdoQixHQUFHekYsb0JBQW9COVosR0FBRyxNQUFNTyxFQUFFb3FFLHVCQUF1QjdwRSxLQUFLUCxFQUFFb3FFLHVCQUF1QjdwRSxHQUFHLENBQUNzcEUsYUFBYXBxRSxFQUFFLEtBQUsyVyxTQUFTbWIsR0FBR3Z6QixHQUFHb1ksVUFBUyxLQUFNLE1BQU1wVyxFQUFFMHFFLDJCQUEyQm5xRSxLQUFLUCxFQUFFMHFFLDJCQUEyQm5xRSxHQUFHLENBQUNzcEUsYUFBYXBxRSxFQUFFLEtBQUsyVyxTQUFTbWIsR0FBR3Z6QixHQUFHb1ksVUFBUyxLQUFNLElBQUlyVyxFQUFFSSxNQUFNa0UsUUFBUW5GLEdBQUdBLEVBQUVxQixHQUFHeTNELE9BQU85NEQsRUFBRU8sR0FBRyxHQUFHLE1BQU1NLEVBQUUsQ0FBQyxJQUFJUyxFQUFFUixFQUFFb3FFLHVCQUF1QjdwRSxHQUFHNlYsU0FBU25ZLEVBQUUrQixFQUFFMHFFLDJCQUEyQm5xRSxHQUFHNlYsU0FBUy9YLEVBQUVtQyxFQUFFNlEsSUFBSXJSLEVBQUVrcUUsT0FBT3A1RCxJQUFJL1EsRUFBRXNSLElBQUksRUFBRXJSLEVBQUVrcUUsUUFBUWptRSxFQUFFaEcsRUFBRW9ULElBQUlyUixFQUFFbXFFLE9BQU9ycUUsRUFBRUMsRUFBRTZULE1BQU0xUCxFQUFFRCxFQUFFMk4sUUFBUTlSLEdBQUdVLEVBQUVxQyxPQUFPeEUsR0FBR0osRUFBRTRFLE9BQU9xQixHQUFHLElBQUk1RixFQUFFRyxFQUFFOFMsSUFBSXpTLEdBQUd1UyxJQUFJaFQsRUFBRWtULElBQUlyTixFQUFFNE0sSUFBSTlRLEVBQUV3N0IsV0FBVzFxQixJQUFJOVMsR0FBR0EsRUFBRTZFLE9BQU92RSxPQUFNMEIsRUFBRTJxRSxVQUFVOW5FLE9BQU83QyxFQUFFMnFFLFVBQVU3NUQsSUFBSSxJQUFJOVEsRUFBRXNxRSxTQUFTem5FLE9BQU83QyxFQUFFc3FFLFNBQVNqNUQsSUFBSXJSLEVBQUVrcUUsV0FBVTlwRSxLQUFLOG9FLHVCQUF1QnpxRSxFQUFFbUIsVUFBVWdQLFFBQVEsV0FBV3hPLEtBQUtrcUUsU0FBUzE3RCxVQUFVeE8sS0FBS3VxRSxVQUFVLzdELFVBQVUsTUFBTXhPLEtBQUtncUUsd0JBQXdCMzhDLEdBQUdydEIsS0FBS2dxRSx1QkFBdUI5a0UsS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFa1gsYUFBWSxNQUFNaFcsS0FBS3NxRSw0QkFBNEJqOUMsR0FBR3J0QixLQUFLc3FFLDJCQUEyQnBsRSxLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUVrWCxjQUFhM1gsRUFBRW1CLFVBQVV5cEUsV0FBVyxXQUFXLE9BQU81cEUsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxPQUFPdEIsRUFBRXNCLE1BQUssU0FBU2xCLEdBQUcsTUFBTSxJQUFJeUQsTUFBTSwwREFBd0RsRSxFQUFFbUIsVUFBVTBwRSxXQUFXLFNBQVNwcUUsR0FBRyxPQUFPTyxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLE9BQU90QixFQUFFc0IsTUFBSyxTQUFTbEIsR0FBRyxNQUFNLElBQUl5RCxNQUFNLDBEQUF3RGxFLEVBQUVtQixVQUFVa3FFLFVBQVUsV0FBVyxNQUFNLENBQUNMLGFBQWFycEUsS0FBS3FwRSxhQUFhUyxNQUFNOXBFLEtBQUs4cEUsTUFBTUMsTUFBTS9wRSxLQUFLK3BFLE1BQU0zdUMsUUFBUXA3QixLQUFLbzdCLFFBQVFpdkMsTUFBTXJxRSxLQUFLcXFFLFFBQVFoc0UsRUFBRWtvRSxXQUFXLFNBQVN6bkUsRUFBRWMsR0FBRyxPQUFPLElBQUlkLEVBQUVjLEVBQUV5cEUsYUFBYXpwRSxFQUFFa3FFLE1BQU1scUUsRUFBRW1xRSxNQUFNbnFFLEVBQUV3N0IsUUFBUXg3QixFQUFFeXFFLFFBQVFoc0UsRUFBRWlvRSxVQUFVLFNBQVNqb0UsRUFBOW5FLENBQWlvRW9xRSxJQUFJOUIsR0FBR3lELElBQUksSUFBSUksR0FBRyxTQUFTMXJFLEdBQUcsU0FBU1QsRUFBRXVCLEdBQUcsSUFBSVAsRUFBRVAsRUFBRWYsS0FBS2lDLE9BQU9BLEtBQUssT0FBT1gsRUFBRWdxRSxhQUFhenBFLEVBQUVQLEVBQUVvckUsZ0JBQWdCN3FFLEdBQUdQLEVBQUUsT0FBT08sRUFBRXZCLEVBQUVTLEdBQUdULEVBQUVtQixVQUFVb3BFLGVBQWUsU0FBUzlwRSxHQUFHLElBQUljLEVBQUVJLE1BQU1ELE1BQU1rRSxRQUFRbkYsR0FBR0EsRUFBRW9HLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRVgsUUFBT0csT0FBT2lkLEtBQUt6YyxJQUFJaUUsU0FBUSxTQUFTMUQsRUFBRVgsR0FBRyxJQUFJTCxFQUFFMEIsTUFBTWtFLFFBQVFuRixHQUFHQSxFQUFFSixHQUFHazVELE9BQU85NEQsRUFBRU8sR0FBRyxHQUFHLE1BQU1oQixFQUFFLENBQUMsSUFBSThCLEVBQUV5ZSxHQUFHekYsb0JBQW9COVosR0FBRyt0QixJQUFHLFdBQVcsSUFBSXR1QixFQUFFYyxFQUFFM0IsRUFBRWdULElBQUk1UyxHQUFHcVMsSUFBSXZRLEdBQUdBLEVBQUVzQyxPQUFPM0QsVUFBUWtCLEtBQUs4b0UsdUJBQXVCenFFLEVBQUVtQixVQUFVaXJFLGdCQUFnQixTQUFTM3JFLEdBQUdrQixLQUFLcXBFLGFBQWF2cUUsRUFBRSxNQUFNa0IsS0FBSy9CLEdBQUcrQixLQUFLL0IsRUFBRXVRLFVBQVV4TyxLQUFLL0IsRUFBRXF2QixHQUFHOEMsSUFBSXR4QixLQUFLVCxFQUFFbUIsVUFBVWdQLFFBQVEsV0FBV3hPLEtBQUsvQixFQUFFdVEsV0FBV25RLEVBQUVtQixVQUFVeXBFLFdBQVcsV0FBVyxPQUFPNXBFLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsT0FBT3RCLEVBQUVzQixNQUFLLFNBQVNsQixHQUFHLE9BQU9BLEVBQUU0QixPQUFPLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRVYsS0FBS2dwRSxrQkFBa0IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUNscUUsRUFBRTZCLGlCQUFldEMsRUFBRW1CLFVBQVUwcEUsV0FBVyxTQUFTcHFFLEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxPQUFPdEIsRUFBRXNCLE1BQUssU0FBU0osR0FBRyxPQUFPQSxFQUFFYyxPQUFPLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRVYsS0FBS21wRSxrQkFBa0JycUUsSUFBSSxLQUFLLEVBQUUsR0FBRyxLQUFLQSxFQUFFYyxFQUFFZSxRQUFRTyxPQUFPLE1BQU0sSUFBSXFCLE1BQU0saURBQWlELE1BQU0sQ0FBQyxXQUFTbEUsRUFBRW1CLFVBQVVrcUUsVUFBVSxXQUFXLE1BQU0sQ0FBQ0wsYUFBYXJwRSxLQUFLcXBFLGVBQWVockUsRUFBRWtvRSxXQUFXLFNBQVN6bkUsRUFBRWMsR0FBRyxPQUFPLElBQUlkLEVBQUVjLEVBQUV5cEUsZUFBZWhyRSxFQUFFaW9FLFVBQVUsTUFBTWpvRSxFQUFwcUMsQ0FBdXFDb3FFLElBQUk5QixHQUFHNkQsSUFBSSxJQUFJRSxHQUFHLFNBQVM1ckUsR0FBRyxTQUFTVCxFQUFFdUIsRUFBRVAsRUFBRVgsUUFBRyxJQUFTQSxJQUFJQSxHQUFFLEdBQUksSUFBSUwsRUFBRVMsRUFBRWYsS0FBS2lDLEtBQUtKLElBQUlJLEtBQUssT0FBTzNCLEVBQUVnckUsYUFBYXpwRSxFQUFFdkIsRUFBRXNzRSxTQUFTdHJFLEVBQUVoQixFQUFFdXNFLFlBQVlsc0UsRUFBRUwsRUFBRXdzRSxjQUFjLEdBQUd4c0UsRUFBRUwsRUFBRW95QixHQUFHL3hCLEVBQUVzc0UsVUFBVXRzRSxFQUFFLE9BQU91QixFQUFFdkIsRUFBRVMsR0FBR1QsRUFBRW1CLFVBQVVvcEUsZUFBZSxTQUFTOXBFLEdBQUcsSUFBSWMsRUFBRUksTUFBTUQsTUFBTWtFLFFBQVFuRixHQUFHQSxFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFWCxRQUFPRyxPQUFPaWQsS0FBS3pjLElBQUlpRSxTQUFRLFNBQVMxRCxFQUFFWCxHQUFHLElBQUlMLEVBQUV1Z0IsR0FBR3pGLG9CQUFvQjlaLEdBQU0sTUFBTU8sRUFBRWlyRSxjQUFjbnNFLEtBQUlrQixFQUFFaXJFLGNBQWNuc0UsR0FBRyxDQUFDK3FFLGFBQWFwcUUsRUFBRSxZQUFZMlcsU0FBU29YLElBQUcsV0FBVyxPQUFPK0QsR0FBRzl5QixHQUFHMlgsVUFBUyxRQUFPLElBQUk3VixFQUFFUCxFQUFFaXJFLGNBQWNuc0UsR0FBR3NYLFNBQVNwWSxFQUFFbUMsTUFBTWtFLFFBQVFuRixHQUFHQSxFQUFFSixHQUFHazVELE9BQU85NEQsRUFBRU8sR0FBRyxNQUFNekIsR0FBR3d2QixJQUFHLFdBQVcsSUFBSXR1QixFQUFFTyxFQUFFTyxFQUFFNUIsRUFBRWlULElBQUk5USxHQUFHdVEsSUFBSTlTLEdBQUdrQixFQUFFYyxFQUFFZ3JFLFlBQVlockUsRUFBRTNCLEVBQUVnVCxJQUFJclQsRUFBRThTLElBQUlyUixFQUFFNFIsSUFBSXJSLEVBQUU1QixLQUFLMFMsSUFBSXJTLEdBQUd1QixFQUFFM0IsRUFBRWdULElBQUk1UixHQUFHcVIsSUFBSXJTLEdBQUc4QixFQUFFc0MsT0FBT3BELEdBQUdoQixFQUFFb0UsT0FBTzNELFNBQU9rQixLQUFLOG9FLHVCQUF1QnpxRSxFQUFFbUIsVUFBVWdQLFFBQVEsV0FBV3hPLEtBQUtoQyxFQUFFd1EsVUFBVSxNQUFNeE8sS0FBSzZxRSxlQUFleDlDLEdBQUdydEIsS0FBSzZxRSxjQUFjM2xFLEtBQUksU0FBU3BHLEdBQUcsT0FBT0EsRUFBRWtYLGNBQWEzWCxFQUFFbUIsVUFBVXNyRSxZQUFZLFNBQVNoc0UsR0FBR2tCLEtBQUsycUUsU0FBUzdyRSxHQUFHVCxFQUFFbUIsVUFBVXlwRSxXQUFXLFdBQVcsT0FBTzVwRSxFQUFFVyxVQUFLLE9BQU8sR0FBTyxXQUFXLE9BQU90QixFQUFFc0IsTUFBSyxTQUFTbEIsR0FBRyxPQUFPQSxFQUFFNEIsT0FBTyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUVWLEtBQUtncEUsa0JBQWtCLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDbHFFLEVBQUU2QixRQUFRd0UsT0FBT25GLEtBQUs2cUUsY0FBYzNsRSxLQUFJLFNBQVNwRyxHQUFHLE1BQU0sQ0FBQ1gsS0FBS1csRUFBRTJxRSxhQUFhN1IsT0FBTzk0RCxFQUFFa1gsdUJBQW9CM1gsRUFBRW1CLFVBQVUwcEUsV0FBVyxTQUFTcHFFLEdBQUcsT0FBT08sRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxPQUFPdEIsRUFBRXNCLE1BQUssU0FBU0osR0FBRyxPQUFPQSxFQUFFYyxPQUFPLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBRVYsS0FBS21wRSxrQkFBa0JycUUsSUFBSSxLQUFLLEVBQUUsT0FBT0EsRUFBRWMsRUFBRWUsT0FBVVgsS0FBSzZxRSxjQUFjL3JFLEVBQUVvRyxLQUFJLFNBQVNwRyxHQUFHLE1BQU0sQ0FBQzJxRSxhQUFhM3FFLEVBQUVYLEtBQUs2WCxTQUFTbFgsRUFBRTg0RCxPQUFPNWhELFVBQVMsT0FBTyxDQUFDLFdBQVMzWCxFQUFFbUIsVUFBVWtxRSxVQUFVLFdBQVcsTUFBTSxDQUFDTCxhQUFhcnBFLEtBQUtxcEUsYUFBYXNCLFNBQVMzcUUsS0FBSzJxRSxTQUFTQyxZQUFZNXFFLEtBQUs0cUUsY0FBY3ZzRSxFQUFFa29FLFdBQVcsU0FBU3puRSxFQUFFYyxHQUFHLE9BQU8sSUFBSWQsRUFBRWMsRUFBRXlwRSxhQUFhenBFLEVBQUUrcUUsU0FBUy9xRSxFQUFFZ3JFLGNBQWN2c0UsRUFBRWlvRSxVQUFVLFdBQVdqb0UsRUFBcnJELENBQXdyRG1zRSxJQUFJN0QsR0FBRytELElBQUksSUFBSUssR0FBRyxTQUFTanNFLEdBQUcsU0FBU1QsRUFBRXVCLEVBQUVQLEVBQUVYLEVBQUVMLEVBQUU4QixRQUFHLElBQVNkLElBQUlBLEVBQUUsU0FBSSxJQUFTWCxJQUFJQSxFQUFFLFFBQUcsSUFBU0wsSUFBSUEsRUFBRSxXQUFNLElBQVM4QixJQUFJQSxHQUFFLEdBQUksSUFBSXZDLEVBQUVrQixFQUFFZixLQUFLaUMsT0FBT0EsS0FBSyxPQUFPcEMsRUFBRXlyRSxhQUFhenBFLEVBQUVoQyxFQUFFeXNFLE1BQU1ockUsRUFBRXpCLEVBQUUrc0UsU0FBU2pzRSxFQUFFZCxFQUFFdzlCLFFBQVEvOEIsRUFBRVQsRUFBRW90RSx1QkFBdUIsR0FBR3B0RSxFQUFFcXRFLG1CQUFtQixHQUFHcnRFLEVBQUVzdEUscUJBQXFCLEdBQUd0dEUsRUFBRXV0RSxTQUFTaHJFLEVBQUUsTUFBTTlCLElBQUlULEVBQUV3OUIsUUFBUXhjLEdBQUcvQixRQUFRdWUsV0FBV3g5QixFQUFFLE9BQU9nQyxFQUFFdkIsRUFBRVMsR0FBR1QsRUFBRW1CLFVBQVVvcEUsZUFBZSxTQUFTOXBFLEdBQUcsSUFBSWMsRUFBRUksTUFBTUQsTUFBTWtFLFFBQVFuRixHQUFHQSxFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFWCxRQUFPRyxPQUFPaWQsS0FBS3pjLElBQUlpRSxTQUFRLFNBQVMxRCxFQUFFWCxHQUFHLElBQUlMLEVBQUV1Z0IsR0FBR3pGLG9CQUFvQjlaLEdBQUcsTUFBTU8sRUFBRW9yRSx1QkFBdUJ0c0UsS0FBS2tCLEVBQUVvckUsdUJBQXVCdHNFLEdBQUcsQ0FBQytxRSxhQUFhcHFFLEVBQUUsT0FBTzJXLFNBQVNvWCxJQUFHLFdBQVcsT0FBTytELEdBQUc5eUIsR0FBRzJYLFVBQVMsUUFBUSxNQUFNcFcsRUFBRXFyRSxtQkFBbUJ2c0UsS0FBS2tCLEVBQUVxckUsbUJBQW1CdnNFLEdBQUcsQ0FBQytxRSxhQUFhcHFFLEVBQUUsWUFBWTJXLFNBQVNvWCxJQUFHLFdBQVcsT0FBTytELEdBQUc5eUIsR0FBRzJYLFVBQVMsUUFBUSxNQUFNcFcsRUFBRXNyRSxxQkFBcUJ4c0UsSUFBSWtCLEVBQUV1ckUsV0FBV3ZyRSxFQUFFc3JFLHFCQUFxQnhzRSxHQUFHLENBQUMrcUUsYUFBYXBxRSxFQUFFLE1BQU0yVyxTQUFTb1gsSUFBRyxXQUFXLE9BQU8rRCxHQUFHOXlCLEdBQUcyWCxVQUFTLFFBQVEsSUFBSTdWLEVBQUVKLE1BQU1rRSxRQUFRbkYsR0FBR0EsRUFBRUosR0FBR2s1RCxPQUFPOTRELEVBQUVPLEdBQUcsR0FBRyxNQUFNYyxFQUFFLENBQUMsSUFBSXZDLEVBQUVnQyxFQUFFb3JFLHVCQUF1QnRzRSxHQUFHc1gsU0FBU3JXLEVBQUVDLEVBQUVxckUsbUJBQW1CdnNFLEdBQUdzWCxTQUFTb1gsSUFBRyxXQUFXLElBQUl0dUIsRUFBRWxCLEVBQUVxVCxJQUFJclIsRUFBRXlxRSxPQUFPMzVELElBQUl2USxFQUFFbVQsU0FBU3JDLElBQUksRUFBRXJSLEVBQUV5cUUsUUFBUSxHQUFHenFFLEVBQUV1ckUsU0FBUyxDQUFDLElBQUk5ckUsRUFBRU8sRUFBRXNyRSxxQkFBcUJ4c0UsR0FBR3NYLFNBQVM1VixFQUFFZixFQUFFNFIsSUFBSXJSLEVBQUV5cUUsT0FBTzM1RCxJQUFJdlEsRUFBRThRLElBQUksRUFBRXJSLEVBQUV5cUUsUUFBUXhzRSxFQUFFOEIsRUFBRXNSLElBQUlyUixFQUFFK3FFLFVBQVVqNkQsSUFBSXZRLEVBQUU4USxJQUFJclIsRUFBRXlwRSxjQUFjbDRELElBQUlyUyxFQUFFK1IsSUFBSXpRLEVBQUVrVCxTQUFTNUMsSUFBSTlRLEVBQUV3N0IsVUFBVTEyQixTQUFTOUcsRUFBRTZFLE9BQU8zRCxHQUFHTyxFQUFFb0QsT0FBT3JDLEdBQUdULEVBQUU4QyxPQUFPNUUsR0FBRyxJQUFJSSxFQUFFSSxFQUFFd1MsSUFBSWhULEdBQUdRLEVBQUVvRSxPQUFPeEUsT0FBTyxDQUFDLElBQUk0RixFQUFFakcsRUFBRXFULElBQUlyUixFQUFFeXFFLE9BQU8zNUQsSUFBSXZRLEVBQUVtVCxTQUFTckMsSUFBSSxFQUFFclIsRUFBRXlxRSxRQUFReHNFLEVBQUU4QixFQUFFc1IsSUFBSXJSLEVBQUUrcUUsVUFBVWo2RCxJQUFJdlEsRUFBRThRLElBQUlyUixFQUFFeXBFLGNBQWNsNEQsSUFBSXROLEVBQUU2TSxJQUFJOVEsRUFBRXc3QixTQUFTMTJCLFNBQVM5RyxFQUFFNkUsT0FBT29CLEdBQUdsRSxFQUFFOEMsT0FBTzVFLEdBQUdJLEVBQUVJLEVBQUV3UyxJQUFJaFQsR0FBR1EsRUFBRW9FLE9BQU94RSxXQUFTK0IsS0FBSzhvRSx1QkFBdUJ6cUUsRUFBRW1CLFVBQVVnUCxRQUFRLFdBQVcsTUFBTXhPLEtBQUtnckUsd0JBQXdCMzlDLEdBQUdydEIsS0FBS2dyRSx1QkFBdUI5bEUsS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFa1gsYUFBWSxNQUFNaFcsS0FBS2tyRSxzQkFBc0JsckUsS0FBS21yRSxVQUFVOTlDLEdBQUdydEIsS0FBS2tyRSxxQkFBcUJobUUsS0FBSSxTQUFTcEcsR0FBRyxPQUFPQSxFQUFFa1gsYUFBWSxNQUFNaFcsS0FBS2lyRSxvQkFBb0I1OUMsR0FBR3J0QixLQUFLaXJFLG1CQUFtQi9sRSxLQUFJLFNBQVNwRyxHQUFHLE9BQU9BLEVBQUVrWCxjQUFhM1gsRUFBRW1CLFVBQVV5cEUsV0FBVyxXQUFXLE9BQU81cEUsRUFBRVcsVUFBSyxPQUFPLEdBQU8sV0FBVyxJQUFJbEIsRUFBRSxPQUFPSixFQUFFc0IsTUFBSyxTQUFTSixHQUFHLE9BQU9BLEVBQUVjLE9BQU8sS0FBSyxFQUFFLE9BQU81QixFQUFFa0IsS0FBS2dyRSx1QkFBdUI3bEUsT0FBT25GLEtBQUtpckUsb0JBQW9CanJFLEtBQUttckUsVUFBVXJzRSxFQUFFcUMsS0FBS1YsTUFBTTNCLEVBQUVrQixLQUFLa3JFLHNCQUFzQixDQUFDLEVBQUVsckUsS0FBS2dwRSxrQkFBa0IsS0FBSyxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUNwcEUsRUFBRWUsUUFBUXdFLE9BQU9yRyxFQUFFb0csS0FBSSxTQUFTcEcsR0FBRyxNQUFNLENBQUNYLEtBQUtXLEVBQUUycUUsYUFBYTdSLE9BQU85NEQsRUFBRWtYLHVCQUFvQjNYLEVBQUVtQixVQUFVMHBFLFdBQVcsU0FBU3BxRSxHQUFHLE9BQU9PLEVBQUVXLFVBQUssT0FBTyxHQUFPLFdBQVcsSUFBSUosRUFBRSxPQUFPbEIsRUFBRXNCLE1BQUssU0FBU1gsR0FBRyxPQUFPQSxFQUFFcUIsT0FBTyxLQUFLLEVBQUUsTUFBTSxDQUFDLEVBQUVWLEtBQUttcEUsa0JBQWtCcnFFLElBQUksS0FBSyxFQUFFLE9BQU9BLEVBQUVPLEVBQUVzQixPQUFPZixFQUFFSSxLQUFLbXJFLFNBQVNyc0UsRUFBRW9DLE9BQU8sRUFBRXBDLEVBQUVvQyxPQUFPLEVBQUtsQixLQUFLZ3JFLHVCQUF1QmxzRSxFQUFFa0csTUFBTSxFQUFFcEYsR0FBR3NGLEtBQUksU0FBU3BHLEdBQUcsTUFBTSxDQUFDMnFFLGFBQWEzcUUsRUFBRVgsS0FBSzZYLFNBQVNsWCxFQUFFODRELE9BQU81aEQsVUFBUyxPQUFPaFcsS0FBS2lyRSxtQkFBbUJuc0UsRUFBRWtHLE1BQU1wRixFQUFFLEVBQUVBLEdBQUdzRixLQUFJLFNBQVNwRyxHQUFHLE1BQU0sQ0FBQzJxRSxhQUFhM3FFLEVBQUVYLEtBQUs2WCxTQUFTbFgsRUFBRTg0RCxPQUFPNWhELFVBQVMsT0FBT2hXLEtBQUttckUsV0FBV25yRSxLQUFLa3JFLHFCQUFxQnBzRSxFQUFFa0csTUFBTSxFQUFFcEYsRUFBRSxFQUFFQSxHQUFHc0YsS0FBSSxTQUFTcEcsR0FBRyxNQUFNLENBQUMycUUsYUFBYTNxRSxFQUFFWCxLQUFLNlgsU0FBU2xYLEVBQUU4NEQsT0FBTzVoRCxVQUFTLFFBQVEsQ0FBQyxXQUFTM1gsRUFBRW1CLFVBQVVrcUUsVUFBVSxXQUFXLE1BQU0sQ0FBQ0wsYUFBYXJwRSxLQUFLcXBFLGFBQWFnQixNQUFNcnFFLEtBQUtxcUUsTUFBTU0sU0FBUzNxRSxLQUFLMnFFLFNBQVN2dkMsUUFBUXA3QixLQUFLbzdCLFFBQVErdkMsU0FBU25yRSxLQUFLbXJFLFdBQVc5c0UsRUFBRWtvRSxXQUFXLFNBQVN6bkUsRUFBRWMsR0FBRyxPQUFPLElBQUlkLEVBQUVjLEVBQUV5cEUsYUFBYXpwRSxFQUFFeXFFLE1BQU16cUUsRUFBRStxRSxTQUFTL3FFLEVBQUV3N0IsUUFBUXg3QixFQUFFdXJFLFdBQVc5c0UsRUFBRWlvRSxVQUFVLFVBQVVqb0UsRUFBcHBHLENBQXVwR29xRSxJQUFJOUIsR0FBR29FLElBQUksSUFBSUssR0FBRyxXQUFXLFNBQVN0c0UsS0FBSyxPQUFPQSxFQUFFdXNFLElBQUksU0FBU3ZzRSxHQUFHLE9BQU8sSUFBSTByRSxHQUFHMXJFLElBQUlBLEVBQUU2ckUsU0FBUyxTQUFTN3JFLEVBQUVjLEVBQUVQLEdBQUcsWUFBTyxJQUFTQSxJQUFJQSxHQUFFLEdBQUksSUFBSXFyRSxHQUFHNXJFLEVBQUVjLEVBQUVQLElBQUlQLEVBQUV3c0UsUUFBUSxTQUFTeHNFLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsWUFBTyxJQUFTdUIsSUFBSUEsRUFBRSxTQUFJLElBQVNQLElBQUlBLEVBQUUsUUFBRyxJQUFTWCxJQUFJQSxFQUFFLFdBQU0sSUFBU0wsSUFBSUEsR0FBRSxHQUFJLElBQUkwc0UsR0FBR2pzRSxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxJQUFJUyxFQUFFeXNFLEtBQUssU0FBU3pzRSxFQUFFYyxFQUFFUCxFQUFFWCxHQUFHLFlBQU8sSUFBU0ksSUFBSUEsRUFBRSxXQUFNLElBQVNjLElBQUlBLEVBQUUsU0FBSSxJQUFTUCxJQUFJQSxFQUFFLFdBQU0sSUFBU1gsSUFBSUEsRUFBRSxNQUFNLElBQUltckUsR0FBRy9xRSxFQUFFYyxFQUFFUCxFQUFFWCxJQUFJSSxFQUFFMHNFLFNBQVMsU0FBUzFzRSxFQUFFYyxFQUFFUCxHQUFHLFlBQU8sSUFBU1AsSUFBSUEsRUFBRSxXQUFNLElBQVNjLElBQUlBLEVBQUUsVUFBSyxJQUFTUCxJQUFJQSxFQUFFLE1BQU0sSUFBSStwRSxHQUFHdHFFLEVBQUVjLEVBQUVQLElBQUlQLEVBQUUyc0UsT0FBTyxTQUFTM3NFLEVBQUVjLEVBQUVQLEVBQUVYLEVBQUVMLEdBQUcsWUFBTyxJQUFTUyxJQUFJQSxFQUFFLFdBQU0sSUFBU2MsSUFBSUEsRUFBRSxTQUFJLElBQVNQLElBQUlBLEVBQUUsV0FBTSxJQUFTWCxJQUFJQSxFQUFFLFdBQU0sSUFBU0wsSUFBSUEsRUFBRSxHQUFHLElBQUkrckUsR0FBR3RyRSxFQUFFYyxFQUFFUCxFQUFFWCxFQUFFTCxJQUFJUyxFQUFFNHNFLFFBQVEsU0FBUzVzRSxFQUFFYyxHQUFHLFlBQU8sSUFBU0EsSUFBSUEsRUFBRSxJQUFJLElBQUkrcEUsR0FBRzdxRSxFQUFFYyxJQUFJZCxFQUF6dEIsR0FBOHRCNnNFLEdBQUcsQ0FBQ04sSUFBSUQsR0FBR0MsSUFBSVYsU0FBU1MsR0FBR1QsU0FBU2EsU0FBU0osR0FBR0ksU0FBU0UsUUFBUU4sR0FBR00sUUFBUUosUUFBUUYsR0FBR0UsUUFBUUcsT0FBT0wsR0FBR0ssT0FBT0YsS0FBS0gsR0FBR0csTUFBTUssR0FBRyxvQkFBb0JDLHNCQUFzQkEsMkJBQXNCLElBQW9CQyxFQUFhQSxFQUFhLFNBQVNodEUsR0FBRyxPQUFPQSxLQUFLLFNBQVNpdEUsS0FBSyxPQUFPLElBQUk3ckUsU0FBUSxTQUFTcEIsR0FBRyxPQUFPOHNFLElBQUcsV0FBVyxPQUFPOXNFLFVBQVE4TixHQUFHc29ELEksa0VDaEIxc3ZnQixJQUFJL3dELEVBR0pBLEVBQUksV0FDSCxPQUFPbkUsS0FESixHQUlKLElBRUNtRSxFQUFJQSxHQUFLLElBQUkrUyxTQUFTLGNBQWIsR0FDUixNQUFPdFgsR0FFYyxpQkFBWGlmLFNBQXFCMWEsRUFBSTBhLFFBT3JDbGhCLEVBQU9ELFFBQVV5RyxHLGNDbEJqQixJQU9JNm5FLEVBQ0FDLEVBUkFudEQsRUFBVW5oQixFQUFPRCxRQUFVLEdBVS9CLFNBQVN3dUUsSUFDTCxNQUFNLElBQUkzcEUsTUFBTSxtQ0FFcEIsU0FBUzRwRSxJQUNMLE1BQU0sSUFBSTVwRSxNQUFNLHFDQXNCcEIsU0FBUzZwRSxFQUFXQyxHQUNoQixHQUFJTCxJQUFxQmxuRSxXQUVyQixPQUFPQSxXQUFXdW5FLEVBQUssR0FHM0IsSUFBS0wsSUFBcUJFLElBQXFCRixJQUFxQmxuRSxXQUVoRSxPQURBa25FLEVBQW1CbG5FLFdBQ1pBLFdBQVd1bkUsRUFBSyxHQUUzQixJQUVJLE9BQU9MLEVBQWlCSyxFQUFLLEdBQy9CLE1BQU16c0UsR0FDSixJQUVJLE9BQU9vc0UsRUFBaUJqdUUsS0FBSyxLQUFNc3VFLEVBQUssR0FDMUMsTUFBTXpzRSxHQUVKLE9BQU9vc0UsRUFBaUJqdUUsS0FBS2lDLEtBQU1xc0UsRUFBSyxNQXZDbkQsV0FDRyxJQUVRTCxFQURzQixtQkFBZmxuRSxXQUNZQSxXQUVBb25FLEVBRXpCLE1BQU90c0UsR0FDTG9zRSxFQUFtQkUsRUFFdkIsSUFFUUQsRUFEd0IsbUJBQWpCSyxhQUNjQSxhQUVBSCxFQUUzQixNQUFPdnNFLEdBQ0xxc0UsRUFBcUJFLEdBakI3QixHQXdFQSxJQUVJSSxFQUZBQyxFQUFRLEdBQ1JDLEdBQVcsRUFFWEMsR0FBYyxFQUVsQixTQUFTQyxJQUNBRixHQUFhRixJQUdsQkUsR0FBVyxFQUNQRixFQUFhcnJFLE9BQ2JzckUsRUFBUUQsRUFBYXBuRSxPQUFPcW5FLEdBRTVCRSxHQUFjLEVBRWRGLEVBQU10ckUsUUFDTjByRSxLQUlSLFNBQVNBLElBQ0wsSUFBSUgsRUFBSixDQUdBLElBQUlJLEVBQVVULEVBQVdPLEdBQ3pCRixHQUFXLEVBR1gsSUFEQSxJQUFJSyxFQUFNTixFQUFNdHJFLE9BQ1Y0ckUsR0FBSyxDQUdQLElBRkFQLEVBQWVDLEVBQ2ZBLEVBQVEsS0FDQ0UsRUFBYUksR0FDZFAsR0FDQUEsRUFBYUcsR0FBWUssTUFHakNMLEdBQWMsRUFDZEksRUFBTU4sRUFBTXRyRSxPQUVoQnFyRSxFQUFlLEtBQ2ZFLEdBQVcsRUFuRWYsU0FBeUJPLEdBQ3JCLEdBQUlmLElBQXVCSyxhQUV2QixPQUFPQSxhQUFhVSxHQUd4QixJQUFLZixJQUF1QkUsSUFBd0JGLElBQXVCSyxhQUV2RSxPQURBTCxFQUFxQkssYUFDZEEsYUFBYVUsR0FFeEIsSUFFV2YsRUFBbUJlLEdBQzVCLE1BQU9wdEUsR0FDTCxJQUVJLE9BQU9xc0UsRUFBbUJsdUUsS0FBSyxLQUFNaXZFLEdBQ3ZDLE1BQU9wdEUsR0FHTCxPQUFPcXNFLEVBQW1CbHVFLEtBQUtpQyxLQUFNZ3RFLEtBZ0Q3Q0MsQ0FBZ0JKLElBaUJwQixTQUFTSyxFQUFLYixFQUFLbCtELEdBQ2ZuTyxLQUFLcXNFLElBQU1BLEVBQ1hyc0UsS0FBS21PLE1BQVFBLEVBWWpCLFNBQVNnL0QsS0E1QlRydUQsRUFBUXN1RCxTQUFXLFNBQVVmLEdBQ3pCLElBQUlnQixFQUFPLElBQUl0dEUsTUFBTW1ELFVBQVVoQyxPQUFTLEdBQ3hDLEdBQUlnQyxVQUFVaEMsT0FBUyxFQUNuQixJQUFLLElBQUl0RCxFQUFJLEVBQUdBLEVBQUlzRixVQUFVaEMsT0FBUXRELElBQ2xDeXZFLEVBQUt6dkUsRUFBSSxHQUFLc0YsVUFBVXRGLEdBR2hDNHVFLEVBQU1yckUsS0FBSyxJQUFJK3JFLEVBQUtiLEVBQUtnQixJQUNKLElBQWpCYixFQUFNdHJFLFFBQWlCdXJFLEdBQ3ZCTCxFQUFXUSxJQVNuQk0sRUFBSzF0RSxVQUFVdXRFLElBQU0sV0FDakIvc0UsS0FBS3FzRSxJQUFJNXJFLE1BQU0sS0FBTVQsS0FBS21PLFFBRTlCMlEsRUFBUXd1RCxNQUFRLFVBQ2hCeHVELEVBQVF5dUQsU0FBVSxFQUNsQnp1RCxFQUFRMHVELElBQU0sR0FDZDF1RCxFQUFRMnVELEtBQU8sR0FDZjN1RCxFQUFRdWxCLFFBQVUsR0FDbEJ2bEIsRUFBUU0sU0FBVyxHQUluQk4sRUFBUXlQLEdBQUs0K0MsRUFDYnJ1RCxFQUFRNHVELFlBQWNQLEVBQ3RCcnVELEVBQVE2dUQsS0FBT1IsRUFDZnJ1RCxFQUFROHVELElBQU1ULEVBQ2RydUQsRUFBUSt1RCxlQUFpQlYsRUFDekJydUQsRUFBUWd2RCxtQkFBcUJYLEVBQzdCcnVELEVBQVFpdkQsS0FBT1osRUFDZnJ1RCxFQUFRa3ZELGdCQUFrQmIsRUFDMUJydUQsRUFBUW12RCxvQkFBc0JkLEVBRTlCcnVELEVBQVFvdkQsVUFBWSxTQUFVL3ZFLEdBQVEsTUFBTyxJQUU3QzJnQixFQUFRcXZELFFBQVUsU0FBVWh3RSxHQUN4QixNQUFNLElBQUlvRSxNQUFNLHFDQUdwQnVjLEVBQVFzdkQsSUFBTSxXQUFjLE1BQU8sS0FDbkN0dkQsRUFBUXV2RCxNQUFRLFNBQVVDLEdBQ3RCLE1BQU0sSUFBSS9yRSxNQUFNLG1DQUVwQnVjLEVBQVF5dkQsTUFBUSxXQUFhLE9BQU8sSSw4QkN2THBDOzs7Ozs7O0FBVUEsSUFBSUMsRUFBUyxFQUFRLEdBQ2pCQyxFQUFVLEVBQVEsR0FDbEJ4cUUsRUFBVSxFQUFRLEdBbUR0QixTQUFTeXFFLElBQ1AsT0FBTzNULEVBQU80VCxvQkFDVixXQUNBLFdBR04sU0FBU3hvRCxFQUFjeW9ELEVBQU0xdEUsR0FDM0IsR0FBSXd0RSxJQUFleHRFLEVBQ2pCLE1BQU0sSUFBSTJ0RSxXQUFXLDhCQWN2QixPQVpJOVQsRUFBTzRULHFCQUVUQyxFQUFPLElBQUlocEUsV0FBVzFFLElBQ2pCcEIsVUFBWWk3RCxFQUFPdjdELFdBR1gsT0FBVG92RSxJQUNGQSxFQUFPLElBQUk3VCxFQUFPNzVELElBRXBCMHRFLEVBQUsxdEUsT0FBU0EsR0FHVDB0RSxFQWFULFNBQVM3VCxFQUFRK1QsRUFBS0MsRUFBa0I3dEUsR0FDdEMsS0FBSzY1RCxFQUFPNFQscUJBQXlCM3VFLGdCQUFnQis2RCxHQUNuRCxPQUFPLElBQUlBLEVBQU8rVCxFQUFLQyxFQUFrQjd0RSxHQUkzQyxHQUFtQixpQkFBUjR0RSxFQUFrQixDQUMzQixHQUFnQyxpQkFBckJDLEVBQ1QsTUFBTSxJQUFJeHNFLE1BQ1IscUVBR0osT0FBT3lzRSxFQUFZaHZFLEtBQU04dUUsR0FFM0IsT0FBT3gvRCxFQUFLdFAsS0FBTTh1RSxFQUFLQyxFQUFrQjd0RSxHQVczQyxTQUFTb08sRUFBTXMvRCxFQUFNL3ZFLEVBQU9rd0UsRUFBa0I3dEUsR0FDNUMsR0FBcUIsaUJBQVZyQyxFQUNULE1BQU0sSUFBSW1DLFVBQVUseUNBR3RCLE1BQTJCLG9CQUFoQnk2RCxhQUErQjU4RCxhQUFpQjQ4RCxZQTZIN0QsU0FBMEJtVCxFQUFNemdFLEVBQU95eUQsRUFBWTEvRCxHQUdqRCxHQUZBaU4sRUFBTTBzRCxXQUVGK0YsRUFBYSxHQUFLenlELEVBQU0wc0QsV0FBYStGLEVBQ3ZDLE1BQU0sSUFBSWlPLFdBQVcsNkJBR3ZCLEdBQUkxZ0UsRUFBTTBzRCxXQUFhK0YsR0FBYzEvRCxHQUFVLEdBQzdDLE1BQU0sSUFBSTJ0RSxXQUFXLDZCQUlyQjFnRSxPQURpQjhnRSxJQUFmck8sUUFBdUNxTyxJQUFYL3RFLEVBQ3RCLElBQUkwRSxXQUFXdUksUUFDSDhnRSxJQUFYL3RFLEVBQ0QsSUFBSTBFLFdBQVd1SSxFQUFPeXlELEdBRXRCLElBQUloN0QsV0FBV3VJLEVBQU95eUQsRUFBWTEvRCxHQUd4QzY1RCxFQUFPNFQscUJBRVRDLEVBQU96Z0UsR0FDRnJPLFVBQVlpN0QsRUFBT3Y3RCxVQUd4Qm92RSxFQUFPTSxFQUFjTixFQUFNemdFLEdBRTdCLE9BQU95Z0UsRUF2SkVPLENBQWdCUCxFQUFNL3ZFLEVBQU9rd0UsRUFBa0I3dEUsR0FHbkMsaUJBQVZyQyxFQXdGYixTQUFxQit2RSxFQUFNUSxFQUFRQyxHQUNULGlCQUFiQSxHQUFzQyxLQUFiQSxJQUNsQ0EsRUFBVyxRQUdiLElBQUt0VSxFQUFPdVUsV0FBV0QsR0FDckIsTUFBTSxJQUFJcnVFLFVBQVUsOENBR3RCLElBQUlFLEVBQXdDLEVBQS9CMjVELEVBQVd1VSxFQUFRQyxHQUc1QkUsR0FGSlgsRUFBT3pvRCxFQUFheW9ELEVBQU0xdEUsSUFFUm1NLE1BQU0raEUsRUFBUUMsR0FFNUJFLElBQVdydUUsSUFJYjB0RSxFQUFPQSxFQUFLNXBFLE1BQU0sRUFBR3VxRSxJQUd2QixPQUFPWCxFQTVHRVksQ0FBV1osRUFBTS92RSxFQUFPa3dFLEdBc0puQyxTQUFxQkgsRUFBTWEsR0FDekIsR0FBSTFVLEVBQU8yVSxTQUFTRCxHQUFNLENBQ3hCLElBQUkzQyxFQUE0QixFQUF0QjZDLEVBQVFGLEVBQUl2dUUsUUFHdEIsT0FBb0IsS0FGcEIwdEUsRUFBT3pvRCxFQUFheW9ELEVBQU05QixJQUVqQjVyRSxPQUNBMHRFLEdBR1RhLEVBQUlHLEtBQUtoQixFQUFNLEVBQUcsRUFBRzlCLEdBQ2Q4QixHQUdULEdBQUlhLEVBQUssQ0FDUCxHQUE0QixvQkFBaEJoVSxhQUNSZ1UsRUFBSXpoRSxrQkFBa0J5dEQsYUFBZ0IsV0FBWWdVLEVBQ3BELE1BQTBCLGlCQUFmQSxFQUFJdnVFLFNBKzhDTDJ1RSxFQS84Q2tDSixFQUFJdnVFLFNBZzlDckMydUUsRUEvOENGMXBELEVBQWF5b0QsRUFBTSxHQUVyQk0sRUFBY04sRUFBTWEsR0FHN0IsR0FBaUIsV0FBYkEsRUFBSTd3QyxNQUFxQjM2QixFQUFRd3JFLEVBQUl6a0UsTUFDdkMsT0FBT2trRSxFQUFjTixFQUFNYSxFQUFJemtFLE1BdzhDckMsSUFBZ0I2a0UsRUFwOENkLE1BQU0sSUFBSTd1RSxVQUFVLHNGQTlLYjh1RSxDQUFXbEIsRUFBTS92RSxHQTRCMUIsU0FBU2t4RSxFQUFZemtFLEdBQ25CLEdBQW9CLGlCQUFUQSxFQUNULE1BQU0sSUFBSXRLLFVBQVUsb0NBQ2YsR0FBSXNLLEVBQU8sRUFDaEIsTUFBTSxJQUFJdWpFLFdBQVcsd0NBNEJ6QixTQUFTRyxFQUFhSixFQUFNdGpFLEdBRzFCLEdBRkF5a0UsRUFBV3prRSxHQUNYc2pFLEVBQU96b0QsRUFBYXlvRCxFQUFNdGpFLEVBQU8sRUFBSSxFQUFvQixFQUFoQnFrRSxFQUFRcmtFLEtBQzVDeXZELEVBQU80VCxvQkFDVixJQUFLLElBQUkvd0UsRUFBSSxFQUFHQSxFQUFJME4sSUFBUTFOLEVBQzFCZ3hFLEVBQUtoeEUsR0FBSyxFQUdkLE9BQU9neEUsRUF3Q1QsU0FBU00sRUFBZU4sRUFBTXpnRSxHQUM1QixJQUFJak4sRUFBU2lOLEVBQU1qTixPQUFTLEVBQUksRUFBNEIsRUFBeEJ5dUUsRUFBUXhoRSxFQUFNak4sUUFDbEQwdEUsRUFBT3pvRCxFQUFheW9ELEVBQU0xdEUsR0FDMUIsSUFBSyxJQUFJdEQsRUFBSSxFQUFHQSxFQUFJc0QsRUFBUXRELEdBQUssRUFDL0JneEUsRUFBS2h4RSxHQUFnQixJQUFYdVEsRUFBTXZRLEdBRWxCLE9BQU9neEUsRUErRFQsU0FBU2UsRUFBU3p1RSxHQUdoQixHQUFJQSxHQUFVd3RFLElBQ1osTUFBTSxJQUFJRyxXQUFXLDBEQUNhSCxJQUFhbGpFLFNBQVMsSUFBTSxVQUVoRSxPQUFnQixFQUFUdEssRUFzRlQsU0FBUzI1RCxFQUFZdVUsRUFBUUMsR0FDM0IsR0FBSXRVLEVBQU8yVSxTQUFTTixHQUNsQixPQUFPQSxFQUFPbHVFLE9BRWhCLEdBQTJCLG9CQUFoQnU2RCxhQUE2RCxtQkFBdkJBLFlBQVl1VSxTQUN4RHZVLFlBQVl1VSxPQUFPWixJQUFXQSxhQUFrQjNULGFBQ25ELE9BQU8yVCxFQUFPdlUsV0FFTSxpQkFBWHVVLElBQ1RBLEVBQVMsR0FBS0EsR0FHaEIsSUFBSXRDLEVBQU1zQyxFQUFPbHVFLE9BQ2pCLEdBQVksSUFBUjRyRSxFQUFXLE9BQU8sRUFJdEIsSUFEQSxJQUFJbUQsR0FBYyxJQUVoQixPQUFRWixHQUNOLElBQUssUUFDTCxJQUFLLFNBQ0wsSUFBSyxTQUNILE9BQU92QyxFQUNULElBQUssT0FDTCxJQUFLLFFBQ0wsVUFBS21DLEVBQ0gsT0FBT2lCLEVBQVlkLEdBQVFsdUUsT0FDN0IsSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNILE9BQWEsRUFBTjRyRSxFQUNULElBQUssTUFDSCxPQUFPQSxJQUFRLEVBQ2pCLElBQUssU0FDSCxPQUFPcUQsRUFBY2YsR0FBUWx1RSxPQUMvQixRQUNFLEdBQUkrdUUsRUFBYSxPQUFPQyxFQUFZZCxHQUFRbHVFLE9BQzVDbXVFLEdBQVksR0FBS0EsR0FBVXJzRSxjQUMzQml0RSxHQUFjLEdBTXRCLFNBQVNHLEVBQWNmLEVBQVVnQixFQUFPQyxHQUN0QyxJQUFJTCxHQUFjLEVBY2xCLFNBTGNoQixJQUFWb0IsR0FBdUJBLEVBQVEsS0FDakNBLEVBQVEsR0FJTkEsRUFBUXJ3RSxLQUFLa0IsT0FDZixNQUFPLEdBT1QsU0FKWSt0RSxJQUFScUIsR0FBcUJBLEVBQU10d0UsS0FBS2tCLFVBQ2xDb3ZFLEVBQU10d0UsS0FBS2tCLFFBR1RvdkUsR0FBTyxFQUNULE1BQU8sR0FPVCxJQUhBQSxLQUFTLEtBQ1RELEtBQVcsR0FHVCxNQUFPLEdBS1QsSUFGS2hCLElBQVVBLEVBQVcsVUFHeEIsT0FBUUEsR0FDTixJQUFLLE1BQ0gsT0FBT2tCLEVBQVN2d0UsS0FBTXF3RSxFQUFPQyxHQUUvQixJQUFLLE9BQ0wsSUFBSyxRQUNILE9BQU9FLEVBQVV4d0UsS0FBTXF3RSxFQUFPQyxHQUVoQyxJQUFLLFFBQ0gsT0FBT0csRUFBV3p3RSxLQUFNcXdFLEVBQU9DLEdBRWpDLElBQUssU0FDTCxJQUFLLFNBQ0gsT0FBT0ksRUFBWTF3RSxLQUFNcXdFLEVBQU9DLEdBRWxDLElBQUssU0FDSCxPQUFPSyxFQUFZM3dFLEtBQU1xd0UsRUFBT0MsR0FFbEMsSUFBSyxPQUNMLElBQUssUUFDTCxJQUFLLFVBQ0wsSUFBSyxXQUNILE9BQU9NLEVBQWE1d0UsS0FBTXF3RSxFQUFPQyxHQUVuQyxRQUNFLEdBQUlMLEVBQWEsTUFBTSxJQUFJanZFLFVBQVUscUJBQXVCcXVFLEdBQzVEQSxHQUFZQSxFQUFXLElBQUlyc0UsY0FDM0JpdEUsR0FBYyxHQVN0QixTQUFTWSxFQUFNeHNFLEVBQUdoRixFQUFHckIsR0FDbkIsSUFBSUosRUFBSXlHLEVBQUVoRixHQUNWZ0YsRUFBRWhGLEdBQUtnRixFQUFFckcsR0FDVHFHLEVBQUVyRyxHQUFLSixFQW1JVCxTQUFTa3pFLEVBQXNCOWlFLEVBQVE2aEUsRUFBS2pQLEVBQVl5TyxFQUFVZixHQUVoRSxHQUFzQixJQUFsQnRnRSxFQUFPOU0sT0FBYyxPQUFRLEVBbUJqQyxHQWhCMEIsaUJBQWYwL0QsR0FDVHlPLEVBQVd6TyxFQUNYQSxFQUFhLEdBQ0pBLEVBQWEsV0FDdEJBLEVBQWEsV0FDSkEsR0FBYyxhQUN2QkEsR0FBYyxZQUVoQkEsR0FBY0EsRUFDVjc2RCxNQUFNNjZELEtBRVJBLEVBQWEwTixFQUFNLEVBQUt0Z0UsRUFBTzlNLE9BQVMsR0FJdEMwL0QsRUFBYSxJQUFHQSxFQUFhNXlELEVBQU85TSxPQUFTMC9ELEdBQzdDQSxHQUFjNXlELEVBQU85TSxPQUFRLENBQy9CLEdBQUlvdEUsRUFBSyxPQUFRLEVBQ1oxTixFQUFhNXlELEVBQU85TSxPQUFTLE9BQzdCLEdBQUkwL0QsRUFBYSxFQUFHLENBQ3pCLElBQUkwTixFQUNDLE9BQVEsRUFESjFOLEVBQWEsRUFVeEIsR0FMbUIsaUJBQVJpUCxJQUNUQSxFQUFNOVUsRUFBT3pyRCxLQUFLdWdFLEVBQUtSLElBSXJCdFUsRUFBTzJVLFNBQVNHLEdBRWxCLE9BQW1CLElBQWZBLEVBQUkzdUUsUUFDRSxFQUVINnZFLEVBQWEvaUUsRUFBUTZoRSxFQUFLalAsRUFBWXlPLEVBQVVmLEdBQ2xELEdBQW1CLGlCQUFSdUIsRUFFaEIsT0FEQUEsR0FBWSxJQUNSOVUsRUFBTzRULHFCQUNpQyxtQkFBakMvb0UsV0FBV3BHLFVBQVU2dUIsUUFDMUJpZ0QsRUFDSzFvRSxXQUFXcEcsVUFBVTZ1QixRQUFRdHdCLEtBQUtpUSxFQUFRNmhFLEVBQUtqUCxHQUUvQ2g3RCxXQUFXcEcsVUFBVXdrRSxZQUFZam1FLEtBQUtpUSxFQUFRNmhFLEVBQUtqUCxHQUd2RG1RLEVBQWEvaUUsRUFBUSxDQUFFNmhFLEdBQU9qUCxFQUFZeU8sRUFBVWYsR0FHN0QsTUFBTSxJQUFJdHRFLFVBQVUsd0NBR3RCLFNBQVMrdkUsRUFBY0MsRUFBS25CLEVBQUtqUCxFQUFZeU8sRUFBVWYsR0FDckQsSUEwQkkxd0UsRUExQkFxekUsRUFBWSxFQUNaQyxFQUFZRixFQUFJOXZFLE9BQ2hCaXdFLEVBQVl0QixFQUFJM3VFLE9BRXBCLFFBQWlCK3RFLElBQWJJLElBRWUsVUFEakJBLEVBQVcvb0UsT0FBTytvRSxHQUFVcnNFLGdCQUNZLFVBQWJxc0UsR0FDVixZQUFiQSxHQUF1QyxhQUFiQSxHQUF5QixDQUNyRCxHQUFJMkIsRUFBSTl2RSxPQUFTLEdBQUsydUUsRUFBSTN1RSxPQUFTLEVBQ2pDLE9BQVEsRUFFVit2RSxFQUFZLEVBQ1pDLEdBQWEsRUFDYkMsR0FBYSxFQUNidlEsR0FBYyxFQUlsQixTQUFTdnlELEVBQU0raUUsRUFBS3h6RSxHQUNsQixPQUFrQixJQUFkcXpFLEVBQ0tHLEVBQUl4ekUsR0FFSnd6RSxFQUFJQyxhQUFhenpFLEVBQUlxekUsR0FLaEMsR0FBSTNDLEVBQUssQ0FDUCxJQUFJZ0QsR0FBYyxFQUNsQixJQUFLMXpFLEVBQUlnakUsRUFBWWhqRSxFQUFJc3pFLEVBQVd0ekUsSUFDbEMsR0FBSXlRLEVBQUsyaUUsRUFBS3B6RSxLQUFPeVEsRUFBS3doRSxHQUFxQixJQUFoQnlCLEVBQW9CLEVBQUkxekUsRUFBSTB6RSxJQUV6RCxJQURvQixJQUFoQkEsSUFBbUJBLEVBQWExekUsR0FDaENBLEVBQUkwekUsRUFBYSxJQUFNSCxFQUFXLE9BQU9HLEVBQWFMLE9BRXRDLElBQWhCSyxJQUFtQjF6RSxHQUFLQSxFQUFJMHpFLEdBQ2hDQSxHQUFjLE9BS2xCLElBREkxUSxFQUFhdVEsRUFBWUQsSUFBV3RRLEVBQWFzUSxFQUFZQyxHQUM1RHZ6RSxFQUFJZ2pFLEVBQVloakUsR0FBSyxFQUFHQSxJQUFLLENBRWhDLElBREEsSUFBSTJ6RSxHQUFRLEVBQ0gvcEUsRUFBSSxFQUFHQSxFQUFJMnBFLEVBQVczcEUsSUFDN0IsR0FBSTZHLEVBQUsyaUUsRUFBS3B6RSxFQUFJNEosS0FBTzZHLEVBQUt3aEUsRUFBS3JvRSxHQUFJLENBQ3JDK3BFLEdBQVEsRUFDUixNQUdKLEdBQUlBLEVBQU8sT0FBTzN6RSxFQUl0QixPQUFRLEVBZVYsU0FBUzR6RSxFQUFVSixFQUFLaEMsRUFBUXFDLEVBQVF2d0UsR0FDdEN1d0UsRUFBU25xRSxPQUFPbXFFLElBQVcsRUFDM0IsSUFBSUMsRUFBWU4sRUFBSWx3RSxPQUFTdXdFLEVBQ3hCdndFLEdBR0hBLEVBQVNvRyxPQUFPcEcsSUFDSHd3RSxJQUNYeHdFLEVBQVN3d0UsR0FKWHh3RSxFQUFTd3dFLEVBU1gsSUFBSUMsRUFBU3ZDLEVBQU9sdUUsT0FDcEIsR0FBSXl3RSxFQUFTLEdBQU0sRUFBRyxNQUFNLElBQUkzd0UsVUFBVSxzQkFFdENFLEVBQVN5d0UsRUFBUyxJQUNwQnp3RSxFQUFTeXdFLEVBQVMsR0FFcEIsSUFBSyxJQUFJL3pFLEVBQUksRUFBR0EsRUFBSXNELElBQVV0RCxFQUFHLENBQy9CLElBQUlnMEUsRUFBU0MsU0FBU3pDLEVBQU8vL0MsT0FBVyxFQUFKenhCLEVBQU8sR0FBSSxJQUMvQyxHQUFJbUksTUFBTTZyRSxHQUFTLE9BQU9oMEUsRUFDMUJ3ekUsRUFBSUssRUFBUzd6RSxHQUFLZzBFLEVBRXBCLE9BQU9oMEUsRUFHVCxTQUFTazBFLEVBQVdWLEVBQUtoQyxFQUFRcUMsRUFBUXZ3RSxHQUN2QyxPQUFPNndFLEVBQVc3QixFQUFZZCxFQUFRZ0MsRUFBSWx3RSxPQUFTdXdFLEdBQVNMLEVBQUtLLEVBQVF2d0UsR0FHM0UsU0FBUzh3RSxFQUFZWixFQUFLaEMsRUFBUXFDLEVBQVF2d0UsR0FDeEMsT0FBTzZ3RSxFQXE2QlQsU0FBdUJFLEdBRXJCLElBREEsSUFBSUMsRUFBWSxHQUNQdDBFLEVBQUksRUFBR0EsRUFBSXEwRSxFQUFJL3dFLFNBQVV0RCxFQUVoQ3MwRSxFQUFVL3dFLEtBQXlCLElBQXBCOHdFLEVBQUkzL0MsV0FBVzEwQixJQUVoQyxPQUFPczBFLEVBMzZCV0MsQ0FBYS9DLEdBQVNnQyxFQUFLSyxFQUFRdndFLEdBR3ZELFNBQVNreEUsRUFBYWhCLEVBQUtoQyxFQUFRcUMsRUFBUXZ3RSxHQUN6QyxPQUFPOHdFLEVBQVdaLEVBQUtoQyxFQUFRcUMsRUFBUXZ3RSxHQUd6QyxTQUFTbXhFLEVBQWFqQixFQUFLaEMsRUFBUXFDLEVBQVF2d0UsR0FDekMsT0FBTzZ3RSxFQUFXNUIsRUFBY2YsR0FBU2dDLEVBQUtLLEVBQVF2d0UsR0FHeEQsU0FBU294RSxFQUFXbEIsRUFBS2hDLEVBQVFxQyxFQUFRdndFLEdBQ3ZDLE9BQU82d0UsRUFrNkJULFNBQXlCRSxFQUFLTSxHQUc1QixJQUZBLElBQUl0MEUsRUFBR2cwQyxFQUFJNVQsRUFDUDZ6QyxFQUFZLEdBQ1B0MEUsRUFBSSxFQUFHQSxFQUFJcTBFLEVBQUkvd0UsV0FDakJxeEUsR0FBUyxHQUFLLEtBRGEzMEUsRUFHaENLLEVBQUlnMEUsRUFBSTMvQyxXQUFXMTBCLEdBQ25CcTBDLEVBQUtoMEMsR0FBSyxFQUNWb2dDLEVBQUtwZ0MsRUFBSSxJQUNUaTBFLEVBQVUvd0UsS0FBS2s5QixHQUNmNnpDLEVBQVUvd0UsS0FBSzh3QyxHQUdqQixPQUFPaWdDLEVBLzZCV00sQ0FBZXBELEVBQVFnQyxFQUFJbHdFLE9BQVN1d0UsR0FBU0wsRUFBS0ssRUFBUXZ3RSxHQWtGOUUsU0FBU3l2RSxFQUFhUyxFQUFLZixFQUFPQyxHQUNoQyxPQUFjLElBQVZELEdBQWVDLElBQVFjLEVBQUlsd0UsT0FDdEJzdEUsRUFBT2lFLGNBQWNyQixHQUVyQjVDLEVBQU9pRSxjQUFjckIsRUFBSXBzRSxNQUFNcXJFLEVBQU9DLElBSWpELFNBQVNFLEVBQVdZLEVBQUtmLEVBQU9DLEdBQzlCQSxFQUFNN3NFLEtBQUtHLElBQUl3dEUsRUFBSWx3RSxPQUFRb3ZFLEdBSTNCLElBSEEsSUFBSW9DLEVBQU0sR0FFTjkwRSxFQUFJeXlFLEVBQ0R6eUUsRUFBSTB5RSxHQUFLLENBQ2QsSUFRTXFDLEVBQVlDLEVBQVdDLEVBQVlDLEVBUnJDQyxFQUFZM0IsRUFBSXh6RSxHQUNoQm8xRSxFQUFZLEtBQ1pDLEVBQW9CRixFQUFZLElBQVEsRUFDdkNBLEVBQVksSUFBUSxFQUNwQkEsRUFBWSxJQUFRLEVBQ3JCLEVBRUosR0FBSW4xRSxFQUFJcTFFLEdBQW9CM0MsRUFHMUIsT0FBUTJDLEdBQ04sS0FBSyxFQUNDRixFQUFZLE1BQ2RDLEVBQVlELEdBRWQsTUFDRixLQUFLLEVBRXlCLE1BQVYsS0FEbEJKLEVBQWF2QixFQUFJeHpFLEVBQUksT0FFbkJrMUUsR0FBNkIsR0FBWkMsSUFBcUIsRUFBb0IsR0FBYkosR0FDekIsTUFDbEJLLEVBQVlGLEdBR2hCLE1BQ0YsS0FBSyxFQUNISCxFQUFhdkIsRUFBSXh6RSxFQUFJLEdBQ3JCZzFFLEVBQVl4QixFQUFJeHpFLEVBQUksR0FDUSxNQUFWLElBQWIrMEUsSUFBc0QsTUFBVixJQUFaQyxLQUNuQ0UsR0FBNkIsR0FBWkMsSUFBb0IsSUFBb0IsR0FBYkosSUFBc0IsRUFBbUIsR0FBWkMsR0FDckQsT0FBVUUsRUFBZ0IsT0FBVUEsRUFBZ0IsU0FDdEVFLEVBQVlGLEdBR2hCLE1BQ0YsS0FBSyxFQUNISCxFQUFhdkIsRUFBSXh6RSxFQUFJLEdBQ3JCZzFFLEVBQVl4QixFQUFJeHpFLEVBQUksR0FDcEJpMUUsRUFBYXpCLEVBQUl4ekUsRUFBSSxHQUNPLE1BQVYsSUFBYiswRSxJQUFzRCxNQUFWLElBQVpDLElBQXNELE1BQVYsSUFBYkMsS0FDbEVDLEdBQTZCLEdBQVpDLElBQW9CLElBQXFCLEdBQWJKLElBQXNCLElBQW1CLEdBQVpDLElBQXFCLEVBQW9CLEdBQWJDLEdBQ2xGLE9BQVVDLEVBQWdCLFVBQzVDRSxFQUFZRixHQU1KLE9BQWRFLEdBR0ZBLEVBQVksTUFDWkMsRUFBbUIsR0FDVkQsRUFBWSxRQUVyQkEsR0FBYSxNQUNiTixFQUFJdnhFLEtBQUs2eEUsSUFBYyxHQUFLLEtBQVEsT0FDcENBLEVBQVksTUFBcUIsS0FBWkEsR0FHdkJOLEVBQUl2eEUsS0FBSzZ4RSxHQUNUcDFFLEdBQUtxMUUsRUFHUCxPQVFGLFNBQWdDQyxHQUM5QixJQUFJcEcsRUFBTW9HLEVBQVdoeUUsT0FDckIsR0FBSTRyRSxHQUFPcUcsRUFDVCxPQUFPN3NFLE9BQU8ydEIsYUFBYXh6QixNQUFNNkYsT0FBUTRzRSxHQUkzQyxJQUFJUixFQUFNLEdBQ045MEUsRUFBSSxFQUNSLEtBQU9BLEVBQUlrdkUsR0FDVDRGLEdBQU9wc0UsT0FBTzJ0QixhQUFheHpCLE1BQ3pCNkYsT0FDQTRzRSxFQUFXbHVFLE1BQU1wSCxFQUFHQSxHQUFLdTFFLElBRzdCLE9BQU9ULEVBdkJBVSxDQUFzQlYsR0E5OEIvQmgxRSxFQUFRcTlELE9BQVNBLEVBQ2pCcjlELEVBQVEyMUUsV0FvVFIsU0FBcUJueUUsSUFDZEEsR0FBVUEsSUFDYkEsRUFBUyxHQUVYLE9BQU82NUQsRUFBT3VZLE9BQU9weUUsSUF2VHZCeEQsRUFBUTYxRSxrQkFBb0IsR0EwQjVCeFksRUFBTzRULHlCQUFxRE0sSUFBL0I3dEUsRUFBT3V0RSxvQkFDaEN2dEUsRUFBT3V0RSxvQkFRWCxXQUNFLElBQ0UsSUFBSXFDLEVBQU0sSUFBSXByRSxXQUFXLEdBRXpCLE9BREFvckUsRUFBSWx4RSxVQUFZLENBQUNBLFVBQVc4RixXQUFXcEcsVUFBV2cwRSxJQUFLLFdBQWMsT0FBTyxLQUN2RCxLQUFkeEMsRUFBSXdDLE9BQ2lCLG1CQUFqQnhDLEVBQUk1dEMsVUFDdUIsSUFBbEM0dEMsRUFBSTV0QyxTQUFTLEVBQUcsR0FBR3kzQixXQUN2QixNQUFPajdELEdBQ1AsT0FBTyxHQWZQNnpFLEdBS0ovMUUsRUFBUWd4RSxXQUFhQSxJQWtFckIzVCxFQUFPMlksU0FBVyxLQUdsQjNZLEVBQU80WSxTQUFXLFNBQVUzQyxHQUUxQixPQURBQSxFQUFJbHhFLFVBQVlpN0QsRUFBT3Y3RCxVQUNoQnd4RSxHQTJCVGpXLEVBQU96ckQsS0FBTyxTQUFVelEsRUFBT2t3RSxFQUFrQjd0RSxHQUMvQyxPQUFPb08sRUFBSyxLQUFNelEsRUFBT2t3RSxFQUFrQjd0RSxJQUd6QzY1RCxFQUFPNFQsc0JBQ1Q1VCxFQUFPdjdELFVBQVVNLFVBQVk4RixXQUFXcEcsVUFDeEN1N0QsRUFBT2o3RCxVQUFZOEYsV0FDRyxvQkFBWGpILFFBQTBCQSxPQUFPaTFFLFNBQ3hDN1ksRUFBT3A4RCxPQUFPaTFFLFdBQWE3WSxHQUU3Qno4RCxPQUFPQyxlQUFldzhELEVBQVFwOEQsT0FBT2kxRSxRQUFTLENBQzVDLzBFLE1BQU8sS0FDUHlELGNBQWMsS0FpQ3BCeTRELEVBQU91WSxNQUFRLFNBQVVob0UsRUFBTStELEVBQU1nZ0UsR0FDbkMsT0FyQkYsU0FBZ0JULEVBQU10akUsRUFBTStELEVBQU1nZ0UsR0FFaEMsT0FEQVUsRUFBV3prRSxHQUNQQSxHQUFRLEVBQ0g2YSxFQUFheW9ELEVBQU10akUsUUFFZjJqRSxJQUFUNS9ELEVBSXlCLGlCQUFiZ2dFLEVBQ1ZscEQsRUFBYXlvRCxFQUFNdGpFLEdBQU0rRCxLQUFLQSxFQUFNZ2dFLEdBQ3BDbHBELEVBQWF5b0QsRUFBTXRqRSxHQUFNK0QsS0FBS0EsR0FFN0I4VyxFQUFheW9ELEVBQU10akUsR0FRbkJnb0UsQ0FBTSxLQUFNaG9FLEVBQU0rRCxFQUFNZ2dFLElBaUJqQ3RVLEVBQU9pVSxZQUFjLFNBQVUxakUsR0FDN0IsT0FBTzBqRSxFQUFZLEtBQU0xakUsSUFLM0J5dkQsRUFBTzhZLGdCQUFrQixTQUFVdm9FLEdBQ2pDLE9BQU8wakUsRUFBWSxLQUFNMWpFLElBaUgzQnl2RCxFQUFPMlUsU0FBVyxTQUFtQnJyRSxHQUNuQyxRQUFlLE1BQUxBLElBQWFBLEVBQUV5dkUsWUFHM0IvWSxFQUFPZ1osUUFBVSxTQUFrQjV6RSxFQUFHa0UsR0FDcEMsSUFBSzAyRCxFQUFPMlUsU0FBU3Z2RSxLQUFPNDZELEVBQU8yVSxTQUFTcnJFLEdBQzFDLE1BQU0sSUFBSXJELFVBQVUsNkJBR3RCLEdBQUliLElBQU1rRSxFQUFHLE9BQU8sRUFLcEIsSUFIQSxJQUFJRCxFQUFJakUsRUFBRWUsT0FDTjZDLEVBQUlNLEVBQUVuRCxPQUVEdEQsRUFBSSxFQUFHa3ZFLEVBQU1ycEUsS0FBS0csSUFBSVEsRUFBR0wsR0FBSW5HLEVBQUlrdkUsSUFBT2x2RSxFQUMvQyxHQUFJdUMsRUFBRXZDLEtBQU95RyxFQUFFekcsR0FBSSxDQUNqQndHLEVBQUlqRSxFQUFFdkMsR0FDTm1HLEVBQUlNLEVBQUV6RyxHQUNOLE1BSUosT0FBSXdHLEVBQUlMLEdBQVcsRUFDZkEsRUFBSUssRUFBVSxFQUNYLEdBR1QyMkQsRUFBT3VVLFdBQWEsU0FBcUJELEdBQ3ZDLE9BQVEvb0UsT0FBTytvRSxHQUFVcnNFLGVBQ3ZCLElBQUssTUFDTCxJQUFLLE9BQ0wsSUFBSyxRQUNMLElBQUssUUFDTCxJQUFLLFNBQ0wsSUFBSyxTQUNMLElBQUssU0FDTCxJQUFLLE9BQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFdBQ0gsT0FBTyxFQUNULFFBQ0UsT0FBTyxJQUliKzNELEVBQU81MUQsT0FBUyxTQUFpQjZ1RSxFQUFNOXlFLEdBQ3JDLElBQUsrQyxFQUFRK3ZFLEdBQ1gsTUFBTSxJQUFJaHpFLFVBQVUsK0NBR3RCLEdBQW9CLElBQWhCZ3pFLEVBQUs5eUUsT0FDUCxPQUFPNjVELEVBQU91WSxNQUFNLEdBR3RCLElBQUkxMUUsRUFDSixRQUFlcXhFLElBQVgvdEUsRUFFRixJQURBQSxFQUFTLEVBQ0p0RCxFQUFJLEVBQUdBLEVBQUlvMkUsRUFBSzl5RSxTQUFVdEQsRUFDN0JzRCxHQUFVOHlFLEVBQUtwMkUsR0FBR3NELE9BSXRCLElBQUk4TSxFQUFTK3NELEVBQU9pVSxZQUFZOXRFLEdBQzVCK3lFLEVBQU0sRUFDVixJQUFLcjJFLEVBQUksRUFBR0EsRUFBSW8yRSxFQUFLOXlFLFNBQVV0RCxFQUFHLENBQ2hDLElBQUl3ekUsRUFBTTRDLEVBQUtwMkUsR0FDZixJQUFLbTlELEVBQU8yVSxTQUFTMEIsR0FDbkIsTUFBTSxJQUFJcHdFLFVBQVUsK0NBRXRCb3dFLEVBQUl4QixLQUFLNWhFLEVBQVFpbUUsR0FDakJBLEdBQU83QyxFQUFJbHdFLE9BRWIsT0FBTzhNLEdBOENUK3NELEVBQU9GLFdBQWFBLEVBMEVwQkUsRUFBT3Y3RCxVQUFVczBFLFdBQVksRUFRN0IvWSxFQUFPdjdELFVBQVUwMEUsT0FBUyxXQUN4QixJQUFJcEgsRUFBTTlzRSxLQUFLa0IsT0FDZixHQUFJNHJFLEVBQU0sR0FBTSxFQUNkLE1BQU0sSUFBSStCLFdBQVcsNkNBRXZCLElBQUssSUFBSWp4RSxFQUFJLEVBQUdBLEVBQUlrdkUsRUFBS2x2RSxHQUFLLEVBQzVCaXpFLEVBQUs3d0UsS0FBTXBDLEVBQUdBLEVBQUksR0FFcEIsT0FBT29DLE1BR1QrNkQsRUFBT3Y3RCxVQUFVMjBFLE9BQVMsV0FDeEIsSUFBSXJILEVBQU05c0UsS0FBS2tCLE9BQ2YsR0FBSTRyRSxFQUFNLEdBQU0sRUFDZCxNQUFNLElBQUkrQixXQUFXLDZDQUV2QixJQUFLLElBQUlqeEUsRUFBSSxFQUFHQSxFQUFJa3ZFLEVBQUtsdkUsR0FBSyxFQUM1Qml6RSxFQUFLN3dFLEtBQU1wQyxFQUFHQSxFQUFJLEdBQ2xCaXpFLEVBQUs3d0UsS0FBTXBDLEVBQUksRUFBR0EsRUFBSSxHQUV4QixPQUFPb0MsTUFHVCs2RCxFQUFPdjdELFVBQVU0MEUsT0FBUyxXQUN4QixJQUFJdEgsRUFBTTlzRSxLQUFLa0IsT0FDZixHQUFJNHJFLEVBQU0sR0FBTSxFQUNkLE1BQU0sSUFBSStCLFdBQVcsNkNBRXZCLElBQUssSUFBSWp4RSxFQUFJLEVBQUdBLEVBQUlrdkUsRUFBS2x2RSxHQUFLLEVBQzVCaXpFLEVBQUs3d0UsS0FBTXBDLEVBQUdBLEVBQUksR0FDbEJpekUsRUFBSzd3RSxLQUFNcEMsRUFBSSxFQUFHQSxFQUFJLEdBQ3RCaXpFLEVBQUs3d0UsS0FBTXBDLEVBQUksRUFBR0EsRUFBSSxHQUN0Qml6RSxFQUFLN3dFLEtBQU1wQyxFQUFJLEVBQUdBLEVBQUksR0FFeEIsT0FBT29DLE1BR1QrNkQsRUFBT3Y3RCxVQUFVZ00sU0FBVyxXQUMxQixJQUFJdEssRUFBdUIsRUFBZGxCLEtBQUtrQixPQUNsQixPQUFlLElBQVhBLEVBQXFCLEdBQ0EsSUFBckJnQyxVQUFVaEMsT0FBcUJzdkUsRUFBVXh3RSxLQUFNLEVBQUdrQixHQUMvQ2t2RSxFQUFhM3ZFLE1BQU1ULEtBQU1rRCxZQUdsQzYzRCxFQUFPdjdELFVBQVU2MEUsT0FBUyxTQUFpQmh3RSxHQUN6QyxJQUFLMDJELEVBQU8yVSxTQUFTcnJFLEdBQUksTUFBTSxJQUFJckQsVUFBVSw2QkFDN0MsT0FBSWhCLE9BQVNxRSxHQUNzQixJQUE1QjAyRCxFQUFPZ1osUUFBUS96RSxLQUFNcUUsSUFHOUIwMkQsRUFBT3Y3RCxVQUFVODBFLFFBQVUsV0FDekIsSUFBSXJDLEVBQU0sR0FDTnR1RSxFQUFNakcsRUFBUTYxRSxrQkFLbEIsT0FKSXZ6RSxLQUFLa0IsT0FBUyxJQUNoQit3RSxFQUFNanlFLEtBQUt3TCxTQUFTLE1BQU8sRUFBRzdILEdBQUt3Z0UsTUFBTSxTQUFTL2dFLEtBQUssS0FDbkRwRCxLQUFLa0IsT0FBU3lDLElBQUtzdUUsR0FBTyxVQUV6QixXQUFhQSxFQUFNLEtBRzVCbFgsRUFBT3Y3RCxVQUFVdTBFLFFBQVUsU0FBa0IxUixFQUFRZ08sRUFBT0MsRUFBS2lFLEVBQVdDLEdBQzFFLElBQUt6WixFQUFPMlUsU0FBU3JOLEdBQ25CLE1BQU0sSUFBSXJoRSxVQUFVLDZCQWdCdEIsUUFiY2l1RSxJQUFWb0IsSUFDRkEsRUFBUSxRQUVFcEIsSUFBUnFCLElBQ0ZBLEVBQU1qTyxFQUFTQSxFQUFPbmhFLE9BQVMsUUFFZit0RSxJQUFkc0YsSUFDRkEsRUFBWSxRQUVFdEYsSUFBWnVGLElBQ0ZBLEVBQVV4MEUsS0FBS2tCLFFBR2JtdkUsRUFBUSxHQUFLQyxFQUFNak8sRUFBT25oRSxRQUFVcXpFLEVBQVksR0FBS0MsRUFBVXgwRSxLQUFLa0IsT0FDdEUsTUFBTSxJQUFJMnRFLFdBQVcsc0JBR3ZCLEdBQUkwRixHQUFhQyxHQUFXbkUsR0FBU0MsRUFDbkMsT0FBTyxFQUVULEdBQUlpRSxHQUFhQyxFQUNmLE9BQVEsRUFFVixHQUFJbkUsR0FBU0MsRUFDWCxPQUFPLEVBUVQsR0FBSXR3RSxPQUFTcWlFLEVBQVEsT0FBTyxFQVM1QixJQVBBLElBQUlqK0QsR0FKSm93RSxLQUFhLElBRGJELEtBQWUsR0FNWHh3RSxHQVBKdXNFLEtBQVMsSUFEVEQsS0FBVyxHQVNQdkQsRUFBTXJwRSxLQUFLRyxJQUFJUSxFQUFHTCxHQUVsQjB3RSxFQUFXejBFLEtBQUtnRixNQUFNdXZFLEVBQVdDLEdBQ2pDRSxFQUFhclMsRUFBT3I5RCxNQUFNcXJFLEVBQU9DLEdBRTVCMXlFLEVBQUksRUFBR0EsRUFBSWt2RSxJQUFPbHZFLEVBQ3pCLEdBQUk2MkUsRUFBUzcyRSxLQUFPODJFLEVBQVc5MkUsR0FBSSxDQUNqQ3dHLEVBQUlxd0UsRUFBUzcyRSxHQUNibUcsRUFBSTJ3RSxFQUFXOTJFLEdBQ2YsTUFJSixPQUFJd0csRUFBSUwsR0FBVyxFQUNmQSxFQUFJSyxFQUFVLEVBQ1gsR0E2SFQyMkQsRUFBT3Y3RCxVQUFVbTFFLFNBQVcsU0FBbUI5RSxFQUFLalAsRUFBWXlPLEdBQzlELE9BQW9ELElBQTdDcnZFLEtBQUtxdUIsUUFBUXdoRCxFQUFLalAsRUFBWXlPLElBR3ZDdFUsRUFBT3Y3RCxVQUFVNnVCLFFBQVUsU0FBa0J3aEQsRUFBS2pQLEVBQVl5TyxHQUM1RCxPQUFPeUIsRUFBcUI5d0UsS0FBTTZ2RSxFQUFLalAsRUFBWXlPLEdBQVUsSUFHL0R0VSxFQUFPdjdELFVBQVV3a0UsWUFBYyxTQUFzQjZMLEVBQUtqUCxFQUFZeU8sR0FDcEUsT0FBT3lCLEVBQXFCOXdFLEtBQU02dkUsRUFBS2pQLEVBQVl5TyxHQUFVLElBa0QvRHRVLEVBQU92N0QsVUFBVTZOLE1BQVEsU0FBZ0IraEUsRUFBUXFDLEVBQVF2d0UsRUFBUW11RSxHQUUvRCxRQUFlSixJQUFYd0MsRUFDRnBDLEVBQVcsT0FDWG51RSxFQUFTbEIsS0FBS2tCLE9BQ2R1d0UsRUFBUyxPQUVKLFFBQWV4QyxJQUFYL3RFLEdBQTBDLGlCQUFYdXdFLEVBQ3hDcEMsRUFBV29DLEVBQ1h2d0UsRUFBU2xCLEtBQUtrQixPQUNkdXdFLEVBQVMsTUFFSixLQUFJenJFLFNBQVN5ckUsR0FXbEIsTUFBTSxJQUFJbHZFLE1BQ1IsMkVBWEZrdkUsR0FBa0IsRUFDZHpyRSxTQUFTOUUsSUFDWEEsR0FBa0IsT0FDRCt0RSxJQUFiSSxJQUF3QkEsRUFBVyxVQUV2Q0EsRUFBV251RSxFQUNYQSxPQUFTK3RFLEdBU2IsSUFBSXlDLEVBQVkxeEUsS0FBS2tCLE9BQVN1d0UsRUFHOUIsU0FGZXhDLElBQVgvdEUsR0FBd0JBLEVBQVN3d0UsS0FBV3h3RSxFQUFTd3dFLEdBRXBEdEMsRUFBT2x1RSxPQUFTLElBQU1BLEVBQVMsR0FBS3V3RSxFQUFTLElBQU9BLEVBQVN6eEUsS0FBS2tCLE9BQ3JFLE1BQU0sSUFBSTJ0RSxXQUFXLDBDQUdsQlEsSUFBVUEsRUFBVyxRQUcxQixJQURBLElBQUlZLEdBQWMsSUFFaEIsT0FBUVosR0FDTixJQUFLLE1BQ0gsT0FBT21DLEVBQVN4eEUsS0FBTW92RSxFQUFRcUMsRUFBUXZ3RSxHQUV4QyxJQUFLLE9BQ0wsSUFBSyxRQUNILE9BQU80d0UsRUFBVTl4RSxLQUFNb3ZFLEVBQVFxQyxFQUFRdndFLEdBRXpDLElBQUssUUFDSCxPQUFPOHdFLEVBQVdoeUUsS0FBTW92RSxFQUFRcUMsRUFBUXZ3RSxHQUUxQyxJQUFLLFNBQ0wsSUFBSyxTQUNILE9BQU9reEUsRUFBWXB5RSxLQUFNb3ZFLEVBQVFxQyxFQUFRdndFLEdBRTNDLElBQUssU0FFSCxPQUFPbXhFLEVBQVlyeUUsS0FBTW92RSxFQUFRcUMsRUFBUXZ3RSxHQUUzQyxJQUFLLE9BQ0wsSUFBSyxRQUNMLElBQUssVUFDTCxJQUFLLFdBQ0gsT0FBT294RSxFQUFVdHlFLEtBQU1vdkUsRUFBUXFDLEVBQVF2d0UsR0FFekMsUUFDRSxHQUFJK3VFLEVBQWEsTUFBTSxJQUFJanZFLFVBQVUscUJBQXVCcXVFLEdBQzVEQSxHQUFZLEdBQUtBLEdBQVVyc0UsY0FDM0JpdEUsR0FBYyxJQUt0QmxWLEVBQU92N0QsVUFBVW8xRSxPQUFTLFdBQ3hCLE1BQU8sQ0FDTGgyQyxLQUFNLFNBQ041ekIsS0FBTWpMLE1BQU1QLFVBQVV3RixNQUFNakgsS0FBS2lDLEtBQUs2MEUsTUFBUTcwRSxLQUFNLEtBd0Z4RCxJQUFJbXpFLEVBQXVCLEtBb0IzQixTQUFTMUMsRUFBWVcsRUFBS2YsRUFBT0MsR0FDL0IsSUFBSXdFLEVBQU0sR0FDVnhFLEVBQU03c0UsS0FBS0csSUFBSXd0RSxFQUFJbHdFLE9BQVFvdkUsR0FFM0IsSUFBSyxJQUFJMXlFLEVBQUl5eUUsRUFBT3p5RSxFQUFJMHlFLElBQU8xeUUsRUFDN0JrM0UsR0FBT3h1RSxPQUFPMnRCLGFBQXNCLElBQVRtOUMsRUFBSXh6RSxJQUVqQyxPQUFPazNFLEVBR1QsU0FBU3BFLEVBQWFVLEVBQUtmLEVBQU9DLEdBQ2hDLElBQUl3RSxFQUFNLEdBQ1Z4RSxFQUFNN3NFLEtBQUtHLElBQUl3dEUsRUFBSWx3RSxPQUFRb3ZFLEdBRTNCLElBQUssSUFBSTF5RSxFQUFJeXlFLEVBQU96eUUsRUFBSTB5RSxJQUFPMXlFLEVBQzdCazNFLEdBQU94dUUsT0FBTzJ0QixhQUFhbTlDLEVBQUl4ekUsSUFFakMsT0FBT2szRSxFQUdULFNBQVN2RSxFQUFVYSxFQUFLZixFQUFPQyxHQUM3QixJQUFJeEQsRUFBTXNFLEVBQUlsd0UsU0FFVG12RSxHQUFTQSxFQUFRLEtBQUdBLEVBQVEsS0FDNUJDLEdBQU9BLEVBQU0sR0FBS0EsRUFBTXhELEtBQUt3RCxFQUFNeEQsR0FHeEMsSUFEQSxJQUFJaUksRUFBTSxHQUNEbjNFLEVBQUl5eUUsRUFBT3p5RSxFQUFJMHlFLElBQU8xeUUsRUFDN0JtM0UsR0FBT0MsRUFBTTVELEVBQUl4ekUsSUFFbkIsT0FBT20zRSxFQUdULFNBQVNuRSxFQUFjUSxFQUFLZixFQUFPQyxHQUdqQyxJQUZBLElBQUkvaEUsRUFBUTZpRSxFQUFJcHNFLE1BQU1xckUsRUFBT0MsR0FDekJvQyxFQUFNLEdBQ0Q5MEUsRUFBSSxFQUFHQSxFQUFJMlEsRUFBTXJOLE9BQVF0RCxHQUFLLEVBQ3JDODBFLEdBQU9wc0UsT0FBTzJ0QixhQUFhMWxCLEVBQU0zUSxHQUFvQixJQUFmMlEsRUFBTTNRLEVBQUksSUFFbEQsT0FBTzgwRSxFQTBDVCxTQUFTdUMsRUFBYXhELEVBQVF5RCxFQUFLaDBFLEdBQ2pDLEdBQUt1d0UsRUFBUyxHQUFPLEdBQUtBLEVBQVMsRUFBRyxNQUFNLElBQUk1QyxXQUFXLHNCQUMzRCxHQUFJNEMsRUFBU3lELEVBQU1oMEUsRUFBUSxNQUFNLElBQUkydEUsV0FBVyx5Q0ErSmxELFNBQVNzRyxFQUFVL0QsRUFBS3Z5RSxFQUFPNHlFLEVBQVF5RCxFQUFLdnhFLEVBQUtDLEdBQy9DLElBQUttM0QsRUFBTzJVLFNBQVMwQixHQUFNLE1BQU0sSUFBSXB3RSxVQUFVLCtDQUMvQyxHQUFJbkMsRUFBUThFLEdBQU85RSxFQUFRK0UsRUFBSyxNQUFNLElBQUlpckUsV0FBVyxxQ0FDckQsR0FBSTRDLEVBQVN5RCxFQUFNOUQsRUFBSWx3RSxPQUFRLE1BQU0sSUFBSTJ0RSxXQUFXLHNCQWtEdEQsU0FBU3VHLEVBQW1CaEUsRUFBS3Z5RSxFQUFPNHlFLEVBQVE0RCxHQUMxQ3gyRSxFQUFRLElBQUdBLEVBQVEsTUFBU0EsRUFBUSxHQUN4QyxJQUFLLElBQUlqQixFQUFJLEVBQUc0SixFQUFJL0QsS0FBS0csSUFBSXd0RSxFQUFJbHdFLE9BQVN1d0UsRUFBUSxHQUFJN3pFLEVBQUk0SixJQUFLNUosRUFDN0R3ekUsRUFBSUssRUFBUzd6RSxJQUFNaUIsRUFBUyxLQUFTLEdBQUt3MkUsRUFBZXozRSxFQUFJLEVBQUlBLE1BQ2xDLEdBQTVCeTNFLEVBQWV6M0UsRUFBSSxFQUFJQSxHQThCOUIsU0FBUzAzRSxFQUFtQmxFLEVBQUt2eUUsRUFBTzR5RSxFQUFRNEQsR0FDMUN4MkUsRUFBUSxJQUFHQSxFQUFRLFdBQWFBLEVBQVEsR0FDNUMsSUFBSyxJQUFJakIsRUFBSSxFQUFHNEosRUFBSS9ELEtBQUtHLElBQUl3dEUsRUFBSWx3RSxPQUFTdXdFLEVBQVEsR0FBSTd6RSxFQUFJNEosSUFBSzVKLEVBQzdEd3pFLEVBQUlLLEVBQVM3ekUsR0FBTWlCLElBQXVDLEdBQTVCdzJFLEVBQWV6M0UsRUFBSSxFQUFJQSxHQUFVLElBbUpuRSxTQUFTMjNFLEVBQWNuRSxFQUFLdnlFLEVBQU80eUUsRUFBUXlELEVBQUt2eEUsRUFBS0MsR0FDbkQsR0FBSTZ0RSxFQUFTeUQsRUFBTTlELEVBQUlsd0UsT0FBUSxNQUFNLElBQUkydEUsV0FBVyxzQkFDcEQsR0FBSTRDLEVBQVMsRUFBRyxNQUFNLElBQUk1QyxXQUFXLHNCQUd2QyxTQUFTMkcsRUFBWXBFLEVBQUt2eUUsRUFBTzR5RSxFQUFRNEQsRUFBY0ksR0FLckQsT0FKS0EsR0FDSEYsRUFBYW5FLEVBQUt2eUUsRUFBTzR5RSxFQUFRLEdBRW5DaEQsRUFBUXBoRSxNQUFNK2pFLEVBQUt2eUUsRUFBTzR5RSxFQUFRNEQsRUFBYyxHQUFJLEdBQzdDNUQsRUFBUyxFQVdsQixTQUFTaUUsRUFBYXRFLEVBQUt2eUUsRUFBTzR5RSxFQUFRNEQsRUFBY0ksR0FLdEQsT0FKS0EsR0FDSEYsRUFBYW5FLEVBQUt2eUUsRUFBTzR5RSxFQUFRLEdBRW5DaEQsRUFBUXBoRSxNQUFNK2pFLEVBQUt2eUUsRUFBTzR5RSxFQUFRNEQsRUFBYyxHQUFJLEdBQzdDNUQsRUFBUyxFQS9jbEIxVyxFQUFPdjdELFVBQVV3RixNQUFRLFNBQWdCcXJFLEVBQU9DLEdBQzlDLElBb0JJcUYsRUFwQkE3SSxFQUFNOXNFLEtBQUtrQixPQXFCZixJQXBCQW12RSxJQUFVQSxHQUdFLEdBQ1ZBLEdBQVN2RCxHQUNHLElBQUd1RCxFQUFRLEdBQ2RBLEVBQVF2RCxJQUNqQnVELEVBQVF2RCxJQU5Wd0QsT0FBY3JCLElBQVJxQixFQUFvQnhELElBQVF3RCxHQVN4QixHQUNSQSxHQUFPeEQsR0FDRyxJQUFHd0QsRUFBTSxHQUNWQSxFQUFNeEQsSUFDZndELEVBQU14RCxHQUdKd0QsRUFBTUQsSUFBT0MsRUFBTUQsR0FHbkJ0VixFQUFPNFQscUJBQ1RnSCxFQUFTMzFFLEtBQUtvakMsU0FBU2l0QyxFQUFPQyxJQUN2Qnh3RSxVQUFZaTdELEVBQU92N0QsY0FDckIsQ0FDTCxJQUFJbzJFLEVBQVd0RixFQUFNRCxFQUNyQnNGLEVBQVMsSUFBSTVhLEVBQU82YSxPQUFVM0csR0FDOUIsSUFBSyxJQUFJcnhFLEVBQUksRUFBR0EsRUFBSWc0RSxJQUFZaDRFLEVBQzlCKzNFLEVBQU8vM0UsR0FBS29DLEtBQUtwQyxFQUFJeXlFLEdBSXpCLE9BQU9zRixHQVdUNWEsRUFBT3Y3RCxVQUFVcTJFLFdBQWEsU0FBcUJwRSxFQUFRNVcsRUFBWTRhLEdBQ3JFaEUsR0FBa0IsRUFDbEI1VyxHQUEwQixFQUNyQjRhLEdBQVVSLEVBQVl4RCxFQUFRNVcsRUFBWTc2RCxLQUFLa0IsUUFLcEQsSUFIQSxJQUFJMnVFLEVBQU03dkUsS0FBS3l4RSxHQUNYeGdFLEVBQU0sRUFDTnJULEVBQUksSUFDQ0EsRUFBSWk5RCxJQUFlNXBELEdBQU8sTUFDakM0K0QsR0FBTzd2RSxLQUFLeXhFLEVBQVM3ekUsR0FBS3FULEVBRzVCLE9BQU80K0QsR0FHVDlVLEVBQU92N0QsVUFBVXMyRSxXQUFhLFNBQXFCckUsRUFBUTVXLEVBQVk0YSxHQUNyRWhFLEdBQWtCLEVBQ2xCNVcsR0FBMEIsRUFDckI0YSxHQUNIUixFQUFZeEQsRUFBUTVXLEVBQVk3NkQsS0FBS2tCLFFBS3ZDLElBRkEsSUFBSTJ1RSxFQUFNN3ZFLEtBQUt5eEUsSUFBVzVXLEdBQ3RCNXBELEVBQU0sRUFDSDRwRCxFQUFhLElBQU01cEQsR0FBTyxNQUMvQjQrRCxHQUFPN3ZFLEtBQUt5eEUsSUFBVzVXLEdBQWM1cEQsRUFHdkMsT0FBTzQrRCxHQUdUOVUsRUFBT3Y3RCxVQUFVdTJFLFVBQVksU0FBb0J0RSxFQUFRZ0UsR0FFdkQsT0FES0EsR0FBVVIsRUFBWXhELEVBQVEsRUFBR3p4RSxLQUFLa0IsUUFDcENsQixLQUFLeXhFLElBR2QxVyxFQUFPdjdELFVBQVV3MkUsYUFBZSxTQUF1QnZFLEVBQVFnRSxHQUU3RCxPQURLQSxHQUFVUixFQUFZeEQsRUFBUSxFQUFHenhFLEtBQUtrQixRQUNwQ2xCLEtBQUt5eEUsR0FBV3p4RSxLQUFLeXhFLEVBQVMsSUFBTSxHQUc3QzFXLEVBQU92N0QsVUFBVTZ4RSxhQUFlLFNBQXVCSSxFQUFRZ0UsR0FFN0QsT0FES0EsR0FBVVIsRUFBWXhELEVBQVEsRUFBR3p4RSxLQUFLa0IsUUFDbkNsQixLQUFLeXhFLElBQVcsRUFBS3p4RSxLQUFLeXhFLEVBQVMsSUFHN0MxVyxFQUFPdjdELFVBQVV5MkUsYUFBZSxTQUF1QnhFLEVBQVFnRSxHQUc3RCxPQUZLQSxHQUFVUixFQUFZeEQsRUFBUSxFQUFHenhFLEtBQUtrQixTQUVsQ2xCLEtBQUt5eEUsR0FDVHp4RSxLQUFLeXhFLEVBQVMsSUFBTSxFQUNwQnp4RSxLQUFLeXhFLEVBQVMsSUFBTSxJQUNELFNBQW5CenhFLEtBQUt5eEUsRUFBUyxJQUdyQjFXLEVBQU92N0QsVUFBVTAyRSxhQUFlLFNBQXVCekUsRUFBUWdFLEdBRzdELE9BRktBLEdBQVVSLEVBQVl4RCxFQUFRLEVBQUd6eEUsS0FBS2tCLFFBRXBCLFNBQWZsQixLQUFLeXhFLElBQ1R6eEUsS0FBS3l4RSxFQUFTLElBQU0sR0FDckJ6eEUsS0FBS3l4RSxFQUFTLElBQU0sRUFDckJ6eEUsS0FBS3l4RSxFQUFTLEtBR2xCMVcsRUFBT3Y3RCxVQUFVMjJFLFVBQVksU0FBb0IxRSxFQUFRNVcsRUFBWTRhLEdBQ25FaEUsR0FBa0IsRUFDbEI1VyxHQUEwQixFQUNyQjRhLEdBQVVSLEVBQVl4RCxFQUFRNVcsRUFBWTc2RCxLQUFLa0IsUUFLcEQsSUFIQSxJQUFJMnVFLEVBQU03dkUsS0FBS3l4RSxHQUNYeGdFLEVBQU0sRUFDTnJULEVBQUksSUFDQ0EsRUFBSWk5RCxJQUFlNXBELEdBQU8sTUFDakM0K0QsR0FBTzd2RSxLQUFLeXhFLEVBQVM3ekUsR0FBS3FULEVBTTVCLE9BRkk0K0QsSUFGSjUrRCxHQUFPLE9BRVM0K0QsR0FBT3BzRSxLQUFLc04sSUFBSSxFQUFHLEVBQUk4cEQsSUFFaENnVixHQUdUOVUsRUFBT3Y3RCxVQUFVNDJFLFVBQVksU0FBb0IzRSxFQUFRNVcsRUFBWTRhLEdBQ25FaEUsR0FBa0IsRUFDbEI1VyxHQUEwQixFQUNyQjRhLEdBQVVSLEVBQVl4RCxFQUFRNVcsRUFBWTc2RCxLQUFLa0IsUUFLcEQsSUFIQSxJQUFJdEQsRUFBSWk5RCxFQUNKNXBELEVBQU0sRUFDTjQrRCxFQUFNN3ZFLEtBQUt5eEUsSUFBVzd6RSxHQUNuQkEsRUFBSSxJQUFNcVQsR0FBTyxNQUN0QjQrRCxHQUFPN3ZFLEtBQUt5eEUsSUFBVzd6RSxHQUFLcVQsRUFNOUIsT0FGSTQrRCxJQUZKNStELEdBQU8sT0FFUzQrRCxHQUFPcHNFLEtBQUtzTixJQUFJLEVBQUcsRUFBSThwRCxJQUVoQ2dWLEdBR1Q5VSxFQUFPdjdELFVBQVU2MkUsU0FBVyxTQUFtQjVFLEVBQVFnRSxHQUVyRCxPQURLQSxHQUFVUixFQUFZeEQsRUFBUSxFQUFHenhFLEtBQUtrQixRQUN0QixJQUFmbEIsS0FBS3l4RSxJQUMwQixHQUE1QixJQUFPenhFLEtBQUt5eEUsR0FBVSxHQURLenhFLEtBQUt5eEUsSUFJM0MxVyxFQUFPdjdELFVBQVU4MkUsWUFBYyxTQUFzQjdFLEVBQVFnRSxHQUN0REEsR0FBVVIsRUFBWXhELEVBQVEsRUFBR3p4RSxLQUFLa0IsUUFDM0MsSUFBSTJ1RSxFQUFNN3ZFLEtBQUt5eEUsR0FBV3p4RSxLQUFLeXhFLEVBQVMsSUFBTSxFQUM5QyxPQUFjLE1BQU41QixFQUFzQixXQUFOQSxFQUFtQkEsR0FHN0M5VSxFQUFPdjdELFVBQVUrMkUsWUFBYyxTQUFzQjlFLEVBQVFnRSxHQUN0REEsR0FBVVIsRUFBWXhELEVBQVEsRUFBR3p4RSxLQUFLa0IsUUFDM0MsSUFBSTJ1RSxFQUFNN3ZFLEtBQUt5eEUsRUFBUyxHQUFNenhFLEtBQUt5eEUsSUFBVyxFQUM5QyxPQUFjLE1BQU41QixFQUFzQixXQUFOQSxFQUFtQkEsR0FHN0M5VSxFQUFPdjdELFVBQVVnM0UsWUFBYyxTQUFzQi9FLEVBQVFnRSxHQUczRCxPQUZLQSxHQUFVUixFQUFZeEQsRUFBUSxFQUFHenhFLEtBQUtrQixRQUVuQ2xCLEtBQUt5eEUsR0FDVnp4RSxLQUFLeXhFLEVBQVMsSUFBTSxFQUNwQnp4RSxLQUFLeXhFLEVBQVMsSUFBTSxHQUNwQnp4RSxLQUFLeXhFLEVBQVMsSUFBTSxJQUd6QjFXLEVBQU92N0QsVUFBVWkzRSxZQUFjLFNBQXNCaEYsRUFBUWdFLEdBRzNELE9BRktBLEdBQVVSLEVBQVl4RCxFQUFRLEVBQUd6eEUsS0FBS2tCLFFBRW5DbEIsS0FBS3l4RSxJQUFXLEdBQ3JCenhFLEtBQUt5eEUsRUFBUyxJQUFNLEdBQ3BCenhFLEtBQUt5eEUsRUFBUyxJQUFNLEVBQ3BCenhFLEtBQUt5eEUsRUFBUyxJQUduQjFXLEVBQU92N0QsVUFBVWszRSxZQUFjLFNBQXNCakYsRUFBUWdFLEdBRTNELE9BREtBLEdBQVVSLEVBQVl4RCxFQUFRLEVBQUd6eEUsS0FBS2tCLFFBQ3BDdXRFLEVBQVFwZ0UsS0FBS3JPLEtBQU15eEUsR0FBUSxFQUFNLEdBQUksSUFHOUMxVyxFQUFPdjdELFVBQVVtM0UsWUFBYyxTQUFzQmxGLEVBQVFnRSxHQUUzRCxPQURLQSxHQUFVUixFQUFZeEQsRUFBUSxFQUFHenhFLEtBQUtrQixRQUNwQ3V0RSxFQUFRcGdFLEtBQUtyTyxLQUFNeXhFLEdBQVEsRUFBTyxHQUFJLElBRy9DMVcsRUFBT3Y3RCxVQUFVbzNFLGFBQWUsU0FBdUJuRixFQUFRZ0UsR0FFN0QsT0FES0EsR0FBVVIsRUFBWXhELEVBQVEsRUFBR3p4RSxLQUFLa0IsUUFDcEN1dEUsRUFBUXBnRSxLQUFLck8sS0FBTXl4RSxHQUFRLEVBQU0sR0FBSSxJQUc5QzFXLEVBQU92N0QsVUFBVXEzRSxhQUFlLFNBQXVCcEYsRUFBUWdFLEdBRTdELE9BREtBLEdBQVVSLEVBQVl4RCxFQUFRLEVBQUd6eEUsS0FBS2tCLFFBQ3BDdXRFLEVBQVFwZ0UsS0FBS3JPLEtBQU15eEUsR0FBUSxFQUFPLEdBQUksSUFTL0MxVyxFQUFPdjdELFVBQVVzM0UsWUFBYyxTQUFzQmo0RSxFQUFPNHlFLEVBQVE1VyxFQUFZNGEsSUFDOUU1MkUsR0FBU0EsRUFDVDR5RSxHQUFrQixFQUNsQjVXLEdBQTBCLEVBQ3JCNGEsSUFFSE4sRUFBU24xRSxLQUFNbkIsRUFBTzR5RSxFQUFRNVcsRUFEZnAzRCxLQUFLc04sSUFBSSxFQUFHLEVBQUk4cEQsR0FBYyxFQUNPLEdBR3RELElBQUk1cEQsRUFBTSxFQUNOclQsRUFBSSxFQUVSLElBREFvQyxLQUFLeXhFLEdBQWtCLElBQVI1eUUsSUFDTmpCLEVBQUlpOUQsSUFBZTVwRCxHQUFPLE1BQ2pDalIsS0FBS3l4RSxFQUFTN3pFLEdBQU1pQixFQUFRb1MsRUFBTyxJQUdyQyxPQUFPd2dFLEVBQVM1VyxHQUdsQkUsRUFBT3Y3RCxVQUFVdTNFLFlBQWMsU0FBc0JsNEUsRUFBTzR5RSxFQUFRNVcsRUFBWTRhLElBQzlFNTJFLEdBQVNBLEVBQ1Q0eUUsR0FBa0IsRUFDbEI1VyxHQUEwQixFQUNyQjRhLElBRUhOLEVBQVNuMUUsS0FBTW5CLEVBQU80eUUsRUFBUTVXLEVBRGZwM0QsS0FBS3NOLElBQUksRUFBRyxFQUFJOHBELEdBQWMsRUFDTyxHQUd0RCxJQUFJajlELEVBQUlpOUQsRUFBYSxFQUNqQjVwRCxFQUFNLEVBRVYsSUFEQWpSLEtBQUt5eEUsRUFBUzd6RSxHQUFhLElBQVJpQixJQUNWakIsR0FBSyxJQUFNcVQsR0FBTyxNQUN6QmpSLEtBQUt5eEUsRUFBUzd6RSxHQUFNaUIsRUFBUW9TLEVBQU8sSUFHckMsT0FBT3dnRSxFQUFTNVcsR0FHbEJFLEVBQU92N0QsVUFBVXczRSxXQUFhLFNBQXFCbjRFLEVBQU80eUUsRUFBUWdFLEdBTWhFLE9BTEE1MkUsR0FBU0EsRUFDVDR5RSxHQUFrQixFQUNiZ0UsR0FBVU4sRUFBU24xRSxLQUFNbkIsRUFBTzR5RSxFQUFRLEVBQUcsSUFBTSxHQUNqRDFXLEVBQU80VCxzQkFBcUI5dkUsRUFBUTRFLEtBQUs4SSxNQUFNMU4sSUFDcERtQixLQUFLeXhFLEdBQW1CLElBQVI1eUUsRUFDVDR5RSxFQUFTLEdBV2xCMVcsRUFBT3Y3RCxVQUFVeTNFLGNBQWdCLFNBQXdCcDRFLEVBQU80eUUsRUFBUWdFLEdBVXRFLE9BVEE1MkUsR0FBU0EsRUFDVDR5RSxHQUFrQixFQUNiZ0UsR0FBVU4sRUFBU24xRSxLQUFNbkIsRUFBTzR5RSxFQUFRLEVBQUcsTUFBUSxHQUNwRDFXLEVBQU80VCxxQkFDVDN1RSxLQUFLeXhFLEdBQW1CLElBQVI1eUUsRUFDaEJtQixLQUFLeXhFLEVBQVMsR0FBTTV5RSxJQUFVLEdBRTlCdTJFLEVBQWtCcDFFLEtBQU1uQixFQUFPNHlFLEdBQVEsR0FFbENBLEVBQVMsR0FHbEIxVyxFQUFPdjdELFVBQVUwM0UsY0FBZ0IsU0FBd0JyNEUsRUFBTzR5RSxFQUFRZ0UsR0FVdEUsT0FUQTUyRSxHQUFTQSxFQUNUNHlFLEdBQWtCLEVBQ2JnRSxHQUFVTixFQUFTbjFFLEtBQU1uQixFQUFPNHlFLEVBQVEsRUFBRyxNQUFRLEdBQ3BEMVcsRUFBTzRULHFCQUNUM3VFLEtBQUt5eEUsR0FBVzV5RSxJQUFVLEVBQzFCbUIsS0FBS3l4RSxFQUFTLEdBQWMsSUFBUjV5RSxHQUVwQnUyRSxFQUFrQnAxRSxLQUFNbkIsRUFBTzR5RSxHQUFRLEdBRWxDQSxFQUFTLEdBVWxCMVcsRUFBT3Y3RCxVQUFVMjNFLGNBQWdCLFNBQXdCdDRFLEVBQU80eUUsRUFBUWdFLEdBWXRFLE9BWEE1MkUsR0FBU0EsRUFDVDR5RSxHQUFrQixFQUNiZ0UsR0FBVU4sRUFBU24xRSxLQUFNbkIsRUFBTzR5RSxFQUFRLEVBQUcsV0FBWSxHQUN4RDFXLEVBQU80VCxxQkFDVDN1RSxLQUFLeXhFLEVBQVMsR0FBTTV5RSxJQUFVLEdBQzlCbUIsS0FBS3l4RSxFQUFTLEdBQU01eUUsSUFBVSxHQUM5Qm1CLEtBQUt5eEUsRUFBUyxHQUFNNXlFLElBQVUsRUFDOUJtQixLQUFLeXhFLEdBQW1CLElBQVI1eUUsR0FFaEJ5MkUsRUFBa0J0MUUsS0FBTW5CLEVBQU80eUUsR0FBUSxHQUVsQ0EsRUFBUyxHQUdsQjFXLEVBQU92N0QsVUFBVTQzRSxjQUFnQixTQUF3QnY0RSxFQUFPNHlFLEVBQVFnRSxHQVl0RSxPQVhBNTJFLEdBQVNBLEVBQ1Q0eUUsR0FBa0IsRUFDYmdFLEdBQVVOLEVBQVNuMUUsS0FBTW5CLEVBQU80eUUsRUFBUSxFQUFHLFdBQVksR0FDeEQxVyxFQUFPNFQscUJBQ1QzdUUsS0FBS3l4RSxHQUFXNXlFLElBQVUsR0FDMUJtQixLQUFLeXhFLEVBQVMsR0FBTTV5RSxJQUFVLEdBQzlCbUIsS0FBS3l4RSxFQUFTLEdBQU01eUUsSUFBVSxFQUM5Qm1CLEtBQUt5eEUsRUFBUyxHQUFjLElBQVI1eUUsR0FFcEJ5MkUsRUFBa0J0MUUsS0FBTW5CLEVBQU80eUUsR0FBUSxHQUVsQ0EsRUFBUyxHQUdsQjFXLEVBQU92N0QsVUFBVTYzRSxXQUFhLFNBQXFCeDRFLEVBQU80eUUsRUFBUTVXLEVBQVk0YSxHQUc1RSxHQUZBNTJFLEdBQVNBLEVBQ1Q0eUUsR0FBa0IsR0FDYmdFLEVBQVUsQ0FDYixJQUFJNkIsRUFBUTd6RSxLQUFLc04sSUFBSSxFQUFHLEVBQUk4cEQsRUFBYSxHQUV6Q3NhLEVBQVNuMUUsS0FBTW5CLEVBQU80eUUsRUFBUTVXLEVBQVl5YyxFQUFRLEdBQUlBLEdBR3hELElBQUkxNUUsRUFBSSxFQUNKcVQsRUFBTSxFQUNOSixFQUFNLEVBRVYsSUFEQTdRLEtBQUt5eEUsR0FBa0IsSUFBUjV5RSxJQUNOakIsRUFBSWk5RCxJQUFlNXBELEdBQU8sTUFDN0JwUyxFQUFRLEdBQWEsSUFBUmdTLEdBQXNDLElBQXpCN1EsS0FBS3l4RSxFQUFTN3pFLEVBQUksS0FDOUNpVCxFQUFNLEdBRVI3USxLQUFLeXhFLEVBQVM3ekUsSUFBT2lCLEVBQVFvUyxHQUFRLEdBQUtKLEVBQU0sSUFHbEQsT0FBTzRnRSxFQUFTNVcsR0FHbEJFLEVBQU92N0QsVUFBVSszRSxXQUFhLFNBQXFCMTRFLEVBQU80eUUsRUFBUTVXLEVBQVk0YSxHQUc1RSxHQUZBNTJFLEdBQVNBLEVBQ1Q0eUUsR0FBa0IsR0FDYmdFLEVBQVUsQ0FDYixJQUFJNkIsRUFBUTd6RSxLQUFLc04sSUFBSSxFQUFHLEVBQUk4cEQsRUFBYSxHQUV6Q3NhLEVBQVNuMUUsS0FBTW5CLEVBQU80eUUsRUFBUTVXLEVBQVl5YyxFQUFRLEdBQUlBLEdBR3hELElBQUkxNUUsRUFBSWk5RCxFQUFhLEVBQ2pCNXBELEVBQU0sRUFDTkosRUFBTSxFQUVWLElBREE3USxLQUFLeXhFLEVBQVM3ekUsR0FBYSxJQUFSaUIsSUFDVmpCLEdBQUssSUFBTXFULEdBQU8sTUFDckJwUyxFQUFRLEdBQWEsSUFBUmdTLEdBQXNDLElBQXpCN1EsS0FBS3l4RSxFQUFTN3pFLEVBQUksS0FDOUNpVCxFQUFNLEdBRVI3USxLQUFLeXhFLEVBQVM3ekUsSUFBT2lCLEVBQVFvUyxHQUFRLEdBQUtKLEVBQU0sSUFHbEQsT0FBTzRnRSxFQUFTNVcsR0FHbEJFLEVBQU92N0QsVUFBVWc0RSxVQUFZLFNBQW9CMzRFLEVBQU80eUUsRUFBUWdFLEdBTzlELE9BTkE1MkUsR0FBU0EsRUFDVDR5RSxHQUFrQixFQUNiZ0UsR0FBVU4sRUFBU24xRSxLQUFNbkIsRUFBTzR5RSxFQUFRLEVBQUcsS0FBTyxLQUNsRDFXLEVBQU80VCxzQkFBcUI5dkUsRUFBUTRFLEtBQUs4SSxNQUFNMU4sSUFDaERBLEVBQVEsSUFBR0EsRUFBUSxJQUFPQSxFQUFRLEdBQ3RDbUIsS0FBS3l4RSxHQUFtQixJQUFSNXlFLEVBQ1Q0eUUsRUFBUyxHQUdsQjFXLEVBQU92N0QsVUFBVWk0RSxhQUFlLFNBQXVCNTRFLEVBQU80eUUsRUFBUWdFLEdBVXBFLE9BVEE1MkUsR0FBU0EsRUFDVDR5RSxHQUFrQixFQUNiZ0UsR0FBVU4sRUFBU24xRSxLQUFNbkIsRUFBTzR5RSxFQUFRLEVBQUcsT0FBUyxPQUNyRDFXLEVBQU80VCxxQkFDVDN1RSxLQUFLeXhFLEdBQW1CLElBQVI1eUUsRUFDaEJtQixLQUFLeXhFLEVBQVMsR0FBTTV5RSxJQUFVLEdBRTlCdTJFLEVBQWtCcDFFLEtBQU1uQixFQUFPNHlFLEdBQVEsR0FFbENBLEVBQVMsR0FHbEIxVyxFQUFPdjdELFVBQVVrNEUsYUFBZSxTQUF1Qjc0RSxFQUFPNHlFLEVBQVFnRSxHQVVwRSxPQVRBNTJFLEdBQVNBLEVBQ1Q0eUUsR0FBa0IsRUFDYmdFLEdBQVVOLEVBQVNuMUUsS0FBTW5CLEVBQU80eUUsRUFBUSxFQUFHLE9BQVMsT0FDckQxVyxFQUFPNFQscUJBQ1QzdUUsS0FBS3l4RSxHQUFXNXlFLElBQVUsRUFDMUJtQixLQUFLeXhFLEVBQVMsR0FBYyxJQUFSNXlFLEdBRXBCdTJFLEVBQWtCcDFFLEtBQU1uQixFQUFPNHlFLEdBQVEsR0FFbENBLEVBQVMsR0FHbEIxVyxFQUFPdjdELFVBQVVtNEUsYUFBZSxTQUF1Qjk0RSxFQUFPNHlFLEVBQVFnRSxHQVlwRSxPQVhBNTJFLEdBQVNBLEVBQ1Q0eUUsR0FBa0IsRUFDYmdFLEdBQVVOLEVBQVNuMUUsS0FBTW5CLEVBQU80eUUsRUFBUSxFQUFHLFlBQWEsWUFDekQxVyxFQUFPNFQscUJBQ1QzdUUsS0FBS3l4RSxHQUFtQixJQUFSNXlFLEVBQ2hCbUIsS0FBS3l4RSxFQUFTLEdBQU01eUUsSUFBVSxFQUM5Qm1CLEtBQUt5eEUsRUFBUyxHQUFNNXlFLElBQVUsR0FDOUJtQixLQUFLeXhFLEVBQVMsR0FBTTV5RSxJQUFVLElBRTlCeTJFLEVBQWtCdDFFLEtBQU1uQixFQUFPNHlFLEdBQVEsR0FFbENBLEVBQVMsR0FHbEIxVyxFQUFPdjdELFVBQVVvNEUsYUFBZSxTQUF1Qi80RSxFQUFPNHlFLEVBQVFnRSxHQWFwRSxPQVpBNTJFLEdBQVNBLEVBQ1Q0eUUsR0FBa0IsRUFDYmdFLEdBQVVOLEVBQVNuMUUsS0FBTW5CLEVBQU80eUUsRUFBUSxFQUFHLFlBQWEsWUFDekQ1eUUsRUFBUSxJQUFHQSxFQUFRLFdBQWFBLEVBQVEsR0FDeENrOEQsRUFBTzRULHFCQUNUM3VFLEtBQUt5eEUsR0FBVzV5RSxJQUFVLEdBQzFCbUIsS0FBS3l4RSxFQUFTLEdBQU01eUUsSUFBVSxHQUM5Qm1CLEtBQUt5eEUsRUFBUyxHQUFNNXlFLElBQVUsRUFDOUJtQixLQUFLeXhFLEVBQVMsR0FBYyxJQUFSNXlFLEdBRXBCeTJFLEVBQWtCdDFFLEtBQU1uQixFQUFPNHlFLEdBQVEsR0FFbENBLEVBQVMsR0FnQmxCMVcsRUFBT3Y3RCxVQUFVcTRFLGFBQWUsU0FBdUJoNUUsRUFBTzR5RSxFQUFRZ0UsR0FDcEUsT0FBT0QsRUFBV3gxRSxLQUFNbkIsRUFBTzR5RSxHQUFRLEVBQU1nRSxJQUcvQzFhLEVBQU92N0QsVUFBVXM0RSxhQUFlLFNBQXVCajVFLEVBQU80eUUsRUFBUWdFLEdBQ3BFLE9BQU9ELEVBQVd4MUUsS0FBTW5CLEVBQU80eUUsR0FBUSxFQUFPZ0UsSUFXaEQxYSxFQUFPdjdELFVBQVV1NEUsY0FBZ0IsU0FBd0JsNUUsRUFBTzR5RSxFQUFRZ0UsR0FDdEUsT0FBT0MsRUFBWTExRSxLQUFNbkIsRUFBTzR5RSxHQUFRLEVBQU1nRSxJQUdoRDFhLEVBQU92N0QsVUFBVXc0RSxjQUFnQixTQUF3Qm41RSxFQUFPNHlFLEVBQVFnRSxHQUN0RSxPQUFPQyxFQUFZMTFFLEtBQU1uQixFQUFPNHlFLEdBQVEsRUFBT2dFLElBSWpEMWEsRUFBT3Y3RCxVQUFVb3dFLEtBQU8sU0FBZXZOLEVBQVE0VixFQUFhNUgsRUFBT0MsR0FRakUsR0FQS0QsSUFBT0EsRUFBUSxHQUNmQyxHQUFlLElBQVJBLElBQVdBLEVBQU10d0UsS0FBS2tCLFFBQzlCKzJFLEdBQWU1VixFQUFPbmhFLFNBQVErMkUsRUFBYzVWLEVBQU9uaEUsUUFDbEQrMkUsSUFBYUEsRUFBYyxHQUM1QjNILEVBQU0sR0FBS0EsRUFBTUQsSUFBT0MsRUFBTUQsR0FHOUJDLElBQVFELEVBQU8sT0FBTyxFQUMxQixHQUFzQixJQUFsQmhPLEVBQU9uaEUsUUFBZ0MsSUFBaEJsQixLQUFLa0IsT0FBYyxPQUFPLEVBR3JELEdBQUkrMkUsRUFBYyxFQUNoQixNQUFNLElBQUlwSixXQUFXLDZCQUV2QixHQUFJd0IsRUFBUSxHQUFLQSxHQUFTcndFLEtBQUtrQixPQUFRLE1BQU0sSUFBSTJ0RSxXQUFXLDZCQUM1RCxHQUFJeUIsRUFBTSxFQUFHLE1BQU0sSUFBSXpCLFdBQVcsMkJBRzlCeUIsRUFBTXR3RSxLQUFLa0IsU0FBUW92RSxFQUFNdHdFLEtBQUtrQixRQUM5Qm1oRSxFQUFPbmhFLE9BQVMrMkUsRUFBYzNILEVBQU1ELElBQ3RDQyxFQUFNak8sRUFBT25oRSxPQUFTKzJFLEVBQWM1SCxHQUd0QyxJQUNJenlFLEVBREFrdkUsRUFBTXdELEVBQU1ELEVBR2hCLEdBQUlyd0UsT0FBU3FpRSxHQUFVZ08sRUFBUTRILEdBQWVBLEVBQWMzSCxFQUUxRCxJQUFLMXlFLEVBQUlrdkUsRUFBTSxFQUFHbHZFLEdBQUssSUFBS0EsRUFDMUJ5a0UsRUFBT3prRSxFQUFJcTZFLEdBQWVqNEUsS0FBS3BDLEVBQUl5eUUsUUFFaEMsR0FBSXZELEVBQU0sTUFBUy9SLEVBQU80VCxvQkFFL0IsSUFBSy93RSxFQUFJLEVBQUdBLEVBQUlrdkUsSUFBT2x2RSxFQUNyQnlrRSxFQUFPemtFLEVBQUlxNkUsR0FBZWo0RSxLQUFLcEMsRUFBSXl5RSxRQUdyQ3pxRSxXQUFXcEcsVUFBVXlDLElBQUlsRSxLQUN2QnNrRSxFQUNBcmlFLEtBQUtvakMsU0FBU2l0QyxFQUFPQSxFQUFRdkQsR0FDN0JtTCxHQUlKLE9BQU9uTCxHQU9UL1IsRUFBT3Y3RCxVQUFVNlAsS0FBTyxTQUFld2dFLEVBQUtRLEVBQU9DLEVBQUtqQixHQUV0RCxHQUFtQixpQkFBUlEsRUFBa0IsQ0FTM0IsR0FScUIsaUJBQVZRLEdBQ1RoQixFQUFXZ0IsRUFDWEEsRUFBUSxFQUNSQyxFQUFNdHdFLEtBQUtrQixRQUNhLGlCQUFSb3ZFLElBQ2hCakIsRUFBV2lCLEVBQ1hBLEVBQU10d0UsS0FBS2tCLFFBRU0sSUFBZjJ1RSxFQUFJM3VFLE9BQWMsQ0FDcEIsSUFBSWczRSxFQUFPckksRUFBSXY5QyxXQUFXLEdBQ3RCNGxELEVBQU8sTUFDVHJJLEVBQU1xSSxHQUdWLFFBQWlCakosSUFBYkksR0FBOEMsaUJBQWJBLEVBQ25DLE1BQU0sSUFBSXJ1RSxVQUFVLDZCQUV0QixHQUF3QixpQkFBYnF1RSxJQUEwQnRVLEVBQU91VSxXQUFXRCxHQUNyRCxNQUFNLElBQUlydUUsVUFBVSxxQkFBdUJxdUUsT0FFckIsaUJBQVJRLElBQ2hCQSxHQUFZLEtBSWQsR0FBSVEsRUFBUSxHQUFLcndFLEtBQUtrQixPQUFTbXZFLEdBQVNyd0UsS0FBS2tCLE9BQVNvdkUsRUFDcEQsTUFBTSxJQUFJekIsV0FBVyxzQkFHdkIsR0FBSXlCLEdBQU9ELEVBQ1QsT0FBT3J3RSxLQVFULElBQUlwQyxFQUNKLEdBTkF5eUUsS0FBa0IsRUFDbEJDLE9BQWNyQixJQUFScUIsRUFBb0J0d0UsS0FBS2tCLE9BQVNvdkUsSUFBUSxFQUUzQ1QsSUFBS0EsRUFBTSxHQUdHLGlCQUFSQSxFQUNULElBQUtqeUUsRUFBSXl5RSxFQUFPenlFLEVBQUkweUUsSUFBTzF5RSxFQUN6Qm9DLEtBQUtwQyxHQUFLaXlFLE1BRVAsQ0FDTCxJQUFJdGhFLEVBQVF3c0QsRUFBTzJVLFNBQVNHLEdBQ3hCQSxFQUNBSyxFQUFZLElBQUluVixFQUFPOFUsRUFBS1IsR0FBVTdqRSxZQUN0Q3NoRSxFQUFNditELEVBQU1yTixPQUNoQixJQUFLdEQsRUFBSSxFQUFHQSxFQUFJMHlFLEVBQU1ELElBQVN6eUUsRUFDN0JvQyxLQUFLcEMsRUFBSXl5RSxHQUFTOWhFLEVBQU0zUSxFQUFJa3ZFLEdBSWhDLE9BQU85c0UsTUFNVCxJQUFJbTRFLEVBQW9CLHFCQW1CeEIsU0FBU25ELEVBQU8zMUUsR0FDZCxPQUFJQSxFQUFJLEdBQVcsSUFBTUEsRUFBRW1NLFNBQVMsSUFDN0JuTSxFQUFFbU0sU0FBUyxJQUdwQixTQUFTMGtFLEVBQWFkLEVBQVFtRCxHQUU1QixJQUFJUyxFQURKVCxFQUFRQSxHQUFTNkYsSUFNakIsSUFKQSxJQUFJbDNFLEVBQVNrdUUsRUFBT2x1RSxPQUNoQm0zRSxFQUFnQixLQUNoQjlwRSxFQUFRLEdBRUgzUSxFQUFJLEVBQUdBLEVBQUlzRCxJQUFVdEQsRUFBRyxDQUkvQixJQUhBbzFFLEVBQVk1RCxFQUFPOThDLFdBQVcxMEIsSUFHZCxPQUFVbzFFLEVBQVksTUFBUSxDQUU1QyxJQUFLcUYsRUFBZSxDQUVsQixHQUFJckYsRUFBWSxNQUFRLEVBRWpCVCxHQUFTLElBQU0sR0FBR2hrRSxFQUFNcE4sS0FBSyxJQUFNLElBQU0sS0FDOUMsU0FDSyxHQUFJdkQsRUFBSSxJQUFNc0QsRUFBUSxFQUV0QnF4RSxHQUFTLElBQU0sR0FBR2hrRSxFQUFNcE4sS0FBSyxJQUFNLElBQU0sS0FDOUMsU0FJRmszRSxFQUFnQnJGLEVBRWhCLFNBSUYsR0FBSUEsRUFBWSxNQUFRLEVBQ2pCVCxHQUFTLElBQU0sR0FBR2hrRSxFQUFNcE4sS0FBSyxJQUFNLElBQU0sS0FDOUNrM0UsRUFBZ0JyRixFQUNoQixTQUlGQSxFQUFrRSxPQUFyRHFGLEVBQWdCLE9BQVUsR0FBS3JGLEVBQVksWUFDL0NxRixJQUVKOUYsR0FBUyxJQUFNLEdBQUdoa0UsRUFBTXBOLEtBQUssSUFBTSxJQUFNLEtBTWhELEdBSEFrM0UsRUFBZ0IsS0FHWnJGLEVBQVksSUFBTSxDQUNwQixJQUFLVCxHQUFTLEdBQUssRUFBRyxNQUN0QmhrRSxFQUFNcE4sS0FBSzZ4RSxRQUNOLEdBQUlBLEVBQVksS0FBTyxDQUM1QixJQUFLVCxHQUFTLEdBQUssRUFBRyxNQUN0QmhrRSxFQUFNcE4sS0FDSjZ4RSxHQUFhLEVBQU0sSUFDUCxHQUFaQSxFQUFtQixVQUVoQixHQUFJQSxFQUFZLE1BQVMsQ0FDOUIsSUFBS1QsR0FBUyxHQUFLLEVBQUcsTUFDdEJoa0UsRUFBTXBOLEtBQ0o2eEUsR0FBYSxHQUFNLElBQ25CQSxHQUFhLEVBQU0sR0FBTyxJQUNkLEdBQVpBLEVBQW1CLFNBRWhCLE1BQUlBLEVBQVksU0FTckIsTUFBTSxJQUFJendFLE1BQU0sc0JBUmhCLElBQUtnd0UsR0FBUyxHQUFLLEVBQUcsTUFDdEJoa0UsRUFBTXBOLEtBQ0o2eEUsR0FBYSxHQUFPLElBQ3BCQSxHQUFhLEdBQU0sR0FBTyxJQUMxQkEsR0FBYSxFQUFNLEdBQU8sSUFDZCxHQUFaQSxFQUFtQixNQU96QixPQUFPemtFLEVBNEJULFNBQVM0aEUsRUFBZThCLEdBQ3RCLE9BQU96RCxFQUFPOEosWUFoSWhCLFNBQXNCckcsR0FJcEIsSUFGQUEsRUFVRixTQUFxQkEsR0FDbkIsT0FBSUEsRUFBSTNXLEtBQWEyVyxFQUFJM1csT0FDbEIyVyxFQUFJaHZFLFFBQVEsYUFBYyxJQVozQnMxRSxDQUFXdEcsR0FBS2h2RSxRQUFRazFFLEVBQW1CLEtBRXpDajNFLE9BQVMsRUFBRyxNQUFPLEdBRTNCLEtBQU8rd0UsRUFBSS93RSxPQUFTLEdBQU0sR0FDeEIrd0UsR0FBWSxJQUVkLE9BQU9BLEVBdUhtQnVHLENBQVl2RyxJQUd4QyxTQUFTRixFQUFZMEcsRUFBS0MsRUFBS2pILEVBQVF2d0UsR0FDckMsSUFBSyxJQUFJdEQsRUFBSSxFQUFHQSxFQUFJc0QsS0FDYnRELEVBQUk2ekUsR0FBVWlILEVBQUl4M0UsUUFBWXRELEdBQUs2NkUsRUFBSXYzRSxVQURoQnRELEVBRTVCODZFLEVBQUk5NkUsRUFBSTZ6RSxHQUFVZ0gsRUFBSTc2RSxHQUV4QixPQUFPQSxLLDhDQ3J2RFRGLEVBQVFtOUQsV0F1Q1IsU0FBcUI4ZCxHQUNuQixJQUFJQyxFQUFPQyxFQUFRRixHQUNmRyxFQUFXRixFQUFLLEdBQ2hCRyxFQUFrQkgsRUFBSyxHQUMzQixPQUF1QyxHQUE5QkUsRUFBV0MsR0FBdUIsRUFBS0EsR0ExQ2xEcjdFLEVBQVE0NkUsWUFpRFIsU0FBc0JLLEdBQ3BCLElBQUlLLEVBY0FwN0UsRUFiQWc3RSxFQUFPQyxFQUFRRixHQUNmRyxFQUFXRixFQUFLLEdBQ2hCRyxFQUFrQkgsRUFBSyxHQUV2QjVILEVBQU0sSUFBSWlJLEVBVmhCLFNBQXNCTixFQUFLRyxFQUFVQyxHQUNuQyxPQUF1QyxHQUE5QkQsRUFBV0MsR0FBdUIsRUFBS0EsRUFTOUJHLENBQVlQLEVBQUtHLEVBQVVDLElBRXpDSSxFQUFVLEVBR1ZyTSxFQUFNaU0sRUFBa0IsRUFDeEJELEVBQVcsRUFDWEEsRUFHSixJQUFLbDdFLEVBQUksRUFBR0EsRUFBSWt2RSxFQUFLbHZFLEdBQUssRUFDeEJvN0UsRUFDR0ksRUFBVVQsRUFBSXJtRCxXQUFXMTBCLEtBQU8sR0FDaEN3N0UsRUFBVVQsRUFBSXJtRCxXQUFXMTBCLEVBQUksS0FBTyxHQUNwQ3c3RSxFQUFVVCxFQUFJcm1ELFdBQVcxMEIsRUFBSSxLQUFPLEVBQ3JDdzdFLEVBQVVULEVBQUlybUQsV0FBVzEwQixFQUFJLElBQy9Cb3pFLEVBQUltSSxLQUFjSCxHQUFPLEdBQU0sSUFDL0JoSSxFQUFJbUksS0FBY0gsR0FBTyxFQUFLLElBQzlCaEksRUFBSW1JLEtBQW1CLElBQU5ILEVBR0ssSUFBcEJELElBQ0ZDLEVBQ0dJLEVBQVVULEVBQUlybUQsV0FBVzEwQixLQUFPLEVBQ2hDdzdFLEVBQVVULEVBQUlybUQsV0FBVzEwQixFQUFJLEtBQU8sRUFDdkNvekUsRUFBSW1JLEtBQW1CLElBQU5ILEdBR0ssSUFBcEJELElBQ0ZDLEVBQ0dJLEVBQVVULEVBQUlybUQsV0FBVzEwQixLQUFPLEdBQ2hDdzdFLEVBQVVULEVBQUlybUQsV0FBVzEwQixFQUFJLEtBQU8sRUFDcEN3N0UsRUFBVVQsRUFBSXJtRCxXQUFXMTBCLEVBQUksS0FBTyxFQUN2Q296RSxFQUFJbUksS0FBY0gsR0FBTyxFQUFLLElBQzlCaEksRUFBSW1JLEtBQW1CLElBQU5ILEdBR25CLE9BQU9oSSxHQTNGVHR6RSxFQUFRKzBFLGNBa0hSLFNBQXdCbFksR0FRdEIsSUFQQSxJQUFJeWUsRUFDQWxNLEVBQU12UyxFQUFNcjVELE9BQ1ptNEUsRUFBYXZNLEVBQU0sRUFDbkJ3TSxFQUFRLEdBSUgxN0UsRUFBSSxFQUFHMjdFLEVBQU96TSxFQUFNdU0sRUFBWXo3RSxFQUFJMjdFLEVBQU0zN0UsR0FIOUIsTUFJbkIwN0UsRUFBTW40RSxLQUFLcTRFLEVBQ1RqZixFQUFPMzhELEVBQUlBLEVBTE0sTUFLZ0IyN0UsRUFBT0EsRUFBUTM3RSxFQUwvQixRQVVGLElBQWZ5N0UsR0FDRkwsRUFBTXplLEVBQU11UyxFQUFNLEdBQ2xCd00sRUFBTW40RSxLQUNKczRFLEVBQU9ULEdBQU8sR0FDZFMsRUFBUVQsR0FBTyxFQUFLLElBQ3BCLE9BRXNCLElBQWZLLElBQ1RMLEdBQU96ZSxFQUFNdVMsRUFBTSxJQUFNLEdBQUt2UyxFQUFNdVMsRUFBTSxHQUMxQ3dNLEVBQU1uNEUsS0FDSnM0RSxFQUFPVCxHQUFPLElBQ2RTLEVBQVFULEdBQU8sRUFBSyxJQUNwQlMsRUFBUVQsR0FBTyxFQUFLLElBQ3BCLE1BSUosT0FBT00sRUFBTWwyRSxLQUFLLEtBM0lwQixJQUxBLElBQUlxMkUsRUFBUyxHQUNUTCxFQUFZLEdBQ1pILEVBQTRCLG9CQUFmcnpFLFdBQTZCQSxXQUFhN0YsTUFFdkRtNEUsRUFBTyxtRUFDRnQ2RSxFQUFJLEVBQUdrdkUsRUFBTW9MLEVBQUtoM0UsT0FBUXRELEVBQUlrdkUsSUFBT2x2RSxFQUM1QzY3RSxFQUFPNzdFLEdBQUtzNkUsRUFBS3Q2RSxHQUNqQnc3RSxFQUFVbEIsRUFBSzVsRCxXQUFXMTBCLElBQU1BLEVBUWxDLFNBQVNpN0UsRUFBU0YsR0FDaEIsSUFBSTdMLEVBQU02TCxFQUFJejNFLE9BRWQsR0FBSTRyRSxFQUFNLEVBQUksRUFDWixNQUFNLElBQUl2cUUsTUFBTSxrREFLbEIsSUFBSXUyRSxFQUFXSCxFQUFJdHFELFFBQVEsS0FPM0IsT0FOa0IsSUFBZHlxRCxJQUFpQkEsRUFBV2hNLEdBTXpCLENBQUNnTSxFQUpjQSxJQUFhaE0sRUFDL0IsRUFDQSxFQUFLZ00sRUFBVyxHQXNFdEIsU0FBU1UsRUFBYWpmLEVBQU84VixFQUFPQyxHQUdsQyxJQUZBLElBQUkwSSxFQVJvQlUsRUFTcEJoMUMsRUFBUyxHQUNKOW1DLEVBQUl5eUUsRUFBT3p5RSxFQUFJMHlFLEVBQUsxeUUsR0FBSyxFQUNoQ283RSxHQUNJemUsRUFBTTM4RCxJQUFNLEdBQU0sV0FDbEIyOEQsRUFBTTM4RCxFQUFJLElBQU0sRUFBSyxRQUNQLElBQWYyOEQsRUFBTTM4RCxFQUFJLElBQ2I4bUMsRUFBT3ZqQyxLQWRGczRFLEdBRGlCQyxFQWVNVixJQWRULEdBQUssSUFDeEJTLEVBQU9DLEdBQU8sR0FBSyxJQUNuQkQsRUFBT0MsR0FBTyxFQUFJLElBQ2xCRCxFQUFhLEdBQU5DLElBYVQsT0FBT2gxQyxFQUFPdGhDLEtBQUssSUFqR3JCZzJFLEVBQVUsSUFBSTltRCxXQUFXLElBQU0sR0FDL0I4bUQsRUFBVSxJQUFJOW1ELFdBQVcsSUFBTSxJLGNDbkIvQjUwQixFQUFRMlEsS0FBTyxTQUFVTCxFQUFReWpFLEVBQVFrSSxFQUFNQyxFQUFNQyxHQUNuRCxJQUFJajZFLEVBQUc1QixFQUNIODdFLEVBQWlCLEVBQVRELEVBQWNELEVBQU8sRUFDN0JHLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkUsR0FBUyxFQUNUcjhFLEVBQUkrN0UsRUFBUUUsRUFBUyxFQUFLLEVBQzFCMzdFLEVBQUl5N0UsR0FBUSxFQUFJLEVBQ2hCaDZFLEVBQUlxTyxFQUFPeWpFLEVBQVM3ekUsR0FPeEIsSUFMQUEsR0FBS00sRUFFTDBCLEVBQUlELEdBQU0sSUFBT3M2RSxHQUFVLEVBQzNCdDZFLEtBQVFzNkUsRUFDUkEsR0FBU0gsRUFDRkcsRUFBUSxFQUFHcjZFLEVBQVMsSUFBSkEsRUFBV29PLEVBQU95akUsRUFBUzd6RSxHQUFJQSxHQUFLTSxFQUFHKzdFLEdBQVMsR0FLdkUsSUFIQWo4RSxFQUFJNEIsR0FBTSxJQUFPcTZFLEdBQVUsRUFDM0JyNkUsS0FBUXE2RSxFQUNSQSxHQUFTTCxFQUNGSyxFQUFRLEVBQUdqOEUsRUFBUyxJQUFKQSxFQUFXZ1EsRUFBT3lqRSxFQUFTN3pFLEdBQUlBLEdBQUtNLEVBQUcrN0UsR0FBUyxHQUV2RSxHQUFVLElBQU5yNkUsRUFDRkEsRUFBSSxFQUFJbzZFLE1BQ0gsSUFBSXA2RSxJQUFNbTZFLEVBQ2YsT0FBTy83RSxFQUFJczJCLElBQXNCOGpELEtBQWR6NEUsR0FBSyxFQUFJLEdBRTVCM0IsR0FBUXlGLEtBQUtzTixJQUFJLEVBQUc2b0UsR0FDcEJoNkUsR0FBUW82RSxFQUVWLE9BQVFyNkUsR0FBSyxFQUFJLEdBQUszQixFQUFJeUYsS0FBS3NOLElBQUksRUFBR25SLEVBQUlnNkUsSUFHNUNsOEUsRUFBUTJQLE1BQVEsU0FBVVcsRUFBUW5QLEVBQU80eUUsRUFBUWtJLEVBQU1DLEVBQU1DLEdBQzNELElBQUlqNkUsRUFBRzVCLEVBQUdDLEVBQ042N0UsRUFBaUIsRUFBVEQsRUFBY0QsRUFBTyxFQUM3QkcsR0FBUSxHQUFLRCxHQUFRLEVBQ3JCRSxFQUFRRCxHQUFRLEVBQ2hCbHVFLEVBQWUsS0FBVCt0RSxFQUFjbjJFLEtBQUtzTixJQUFJLEdBQUksSUFBTXROLEtBQUtzTixJQUFJLEdBQUksSUFBTSxFQUMxRG5ULEVBQUkrN0UsRUFBTyxFQUFLRSxFQUFTLEVBQ3pCMzdFLEVBQUl5N0UsRUFBTyxHQUFLLEVBQ2hCaDZFLEVBQUlkLEVBQVEsR0FBZ0IsSUFBVkEsR0FBZSxFQUFJQSxFQUFRLEVBQUssRUFBSSxFQW1DMUQsSUFqQ0FBLEVBQVE0RSxLQUFLK1AsSUFBSTNVLEdBRWJrSCxNQUFNbEgsSUFBVUEsSUFBVXU1RSxLQUM1QnA2RSxFQUFJK0gsTUFBTWxILEdBQVMsRUFBSSxFQUN2QmUsRUFBSW02RSxJQUVKbjZFLEVBQUk2RCxLQUFLOEksTUFBTTlJLEtBQUtnSSxJQUFJNU0sR0FBUzRFLEtBQUt5MkUsS0FDbENyN0UsR0FBU1osRUFBSXdGLEtBQUtzTixJQUFJLEdBQUluUixJQUFNLElBQ2xDQSxJQUNBM0IsR0FBSyxJQUdMWSxHQURFZSxFQUFJbzZFLEdBQVMsRUFDTm51RSxFQUFLNU4sRUFFTDROLEVBQUtwSSxLQUFLc04sSUFBSSxFQUFHLEVBQUlpcEUsSUFFcEIvN0UsR0FBSyxJQUNmMkIsSUFDQTNCLEdBQUssR0FHSDJCLEVBQUlvNkUsR0FBU0QsR0FDZi83RSxFQUFJLEVBQ0o0QixFQUFJbTZFLEdBQ0tuNkUsRUFBSW82RSxHQUFTLEdBQ3RCaDhFLEdBQU1hLEVBQVFaLEVBQUssR0FBS3dGLEtBQUtzTixJQUFJLEVBQUc2b0UsR0FDcENoNkUsR0FBUW82RSxJQUVSaDhFLEVBQUlhLEVBQVE0RSxLQUFLc04sSUFBSSxFQUFHaXBFLEVBQVEsR0FBS3YyRSxLQUFLc04sSUFBSSxFQUFHNm9FLEdBQ2pEaDZFLEVBQUksSUFJRGc2RSxHQUFRLEVBQUc1ckUsRUFBT3lqRSxFQUFTN3pFLEdBQVMsSUFBSkksRUFBVUosR0FBS00sRUFBR0YsR0FBSyxJQUFLNDdFLEdBQVEsR0FJM0UsSUFGQWg2RSxFQUFLQSxHQUFLZzZFLEVBQVE1N0UsRUFDbEI4N0UsR0FBUUYsRUFDREUsRUFBTyxFQUFHOXJFLEVBQU95akUsRUFBUzd6RSxHQUFTLElBQUpnQyxFQUFVaEMsR0FBS00sRUFBRzBCLEdBQUssSUFBS2s2RSxHQUFRLEdBRTFFOXJFLEVBQU95akUsRUFBUzd6RSxFQUFJTSxJQUFVLElBQUp5QixJLGNDbEY1QixJQUFJNkwsRUFBVyxHQUFHQSxTQUVsQjdOLEVBQU9ELFFBQVVxQyxNQUFNa0UsU0FBVyxTQUFVK3NFLEdBQzFDLE1BQTZCLGtCQUF0QnhsRSxFQUFTek4sS0FBS2l6RSxLLGlCQ0h2QixpQ0FDNkIsb0JBQVRqeUQsTUFBd0JBLE1BQ2hDRixPQUNScGUsRUFBUXlXLFNBQVMxWCxVQUFVaUIsTUFpQi9CLFNBQVMwNUUsRUFBUWx0RSxFQUFJbXRFLEdBQ25CcDZFLEtBQUtxNkUsSUFBTXB0RSxFQUNYak4sS0FBS3M2RSxTQUFXRixFQWZsQjE4RSxFQUFRb0gsV0FBYSxXQUNuQixPQUFPLElBQUlxMUUsRUFBUTE1RSxFQUFNMUMsS0FBSytHLFdBQVl5MUUsRUFBT3IzRSxXQUFZb3BFLGVBRS9ENXVFLEVBQVE4OEUsWUFBYyxXQUNwQixPQUFPLElBQUlMLEVBQVExNUUsRUFBTTFDLEtBQUt5OEUsWUFBYUQsRUFBT3IzRSxXQUFZdTNFLGdCQUVoRS84RSxFQUFRNHVFLGFBQ1I1dUUsRUFBUSs4RSxjQUFnQixTQUFTNU4sR0FDM0JBLEdBQ0ZBLEVBQVFqTyxTQVFadWIsRUFBUTM2RSxVQUFVazdFLE1BQVFQLEVBQVEzNkUsVUFBVW03RSxJQUFNLGFBQ2xEUixFQUFRMzZFLFVBQVVvL0QsTUFBUSxXQUN4QjUrRCxLQUFLczZFLFNBQVN2OEUsS0FBS3c4RSxFQUFPdjZFLEtBQUtxNkUsTUFJakMzOEUsRUFBUWs5RSxPQUFTLFNBQVNDLEVBQU1DLEdBQzlCeE8sYUFBYXVPLEVBQUtFLGdCQUNsQkYsRUFBS0csYUFBZUYsR0FHdEJwOUUsRUFBUXU5RSxTQUFXLFNBQVNKLEdBQzFCdk8sYUFBYXVPLEVBQUtFLGdCQUNsQkYsRUFBS0csY0FBZ0IsR0FHdkJ0OUUsRUFBUXc5RSxhQUFleDlFLEVBQVF5OUUsT0FBUyxTQUFTTixHQUMvQ3ZPLGFBQWF1TyxFQUFLRSxnQkFFbEIsSUFBSUQsRUFBUUQsRUFBS0csYUFDYkYsR0FBUyxJQUNYRCxFQUFLRSxlQUFpQmoyRSxZQUFXLFdBQzNCKzFFLEVBQUtPLFlBQ1BQLEVBQUtPLGVBQ05OLEtBS1AsRUFBUSxHQUlScDlFLEVBQVFvdUUsYUFBZ0Msb0JBQVQvc0QsTUFBd0JBLEtBQUsrc0QsbUJBQ2xCLElBQVgxcUUsR0FBMEJBLEVBQU8wcUUsY0FDeEM5ckUsTUFBUUEsS0FBSzhyRSxhQUNyQ3B1RSxFQUFRMjlFLGVBQWtDLG9CQUFUdDhELE1BQXdCQSxLQUFLczhELHFCQUNsQixJQUFYajZFLEdBQTBCQSxFQUFPaTZFLGdCQUN4Q3I3RSxNQUFRQSxLQUFLcTdFLGlCLGtDQzlEdkMsNkJBQ0ksYUFFQSxJQUFJajZFLEVBQU8wcUUsYUFBWCxDQUlBLElBSUl3UCxFQTZISUMsRUFaQUMsRUFyQkFDLEVBQ0FDLEVBakdKQyxFQUFhLEVBQ2JDLEVBQWdCLEdBQ2hCQyxHQUF3QixFQUN4QkMsRUFBTTE2RSxFQUFPOGQsU0FvSmI2OEQsRUFBV3o5RSxPQUFPMDlFLGdCQUFrQjE5RSxPQUFPMDlFLGVBQWU1NkUsR0FDOUQyNkUsRUFBV0EsR0FBWUEsRUFBU2ozRSxXQUFhaTNFLEVBQVczNkUsRUFHZixxQkFBckMsR0FBR29LLFNBQVN6TixLQUFLcUQsRUFBTzBkLFNBcEZ4Qnc4RCxFQUFvQixTQUFTVyxHQUN6Qm45RCxFQUFRc3VELFVBQVMsV0FBYzhPLEVBQWFELFFBSXBELFdBR0ksR0FBSTc2RSxFQUFPKzZFLGNBQWdCLzZFLEVBQU9nN0UsY0FBZSxDQUM3QyxJQUFJQyxHQUE0QixFQUM1QkMsRUFBZWw3RSxFQUFPbTdFLFVBTTFCLE9BTEFuN0UsRUFBT203RSxVQUFZLFdBQ2ZGLEdBQTRCLEdBRWhDajdFLEVBQU8rNkUsWUFBWSxHQUFJLEtBQ3ZCLzZFLEVBQU9tN0UsVUFBWUQsRUFDWkQsR0F3RUpHLEdBSUFwN0UsRUFBT3E3RSxpQkE5Q1ZqQixFQUFVLElBQUlpQixnQkFDVkMsTUFBTUgsVUFBWSxTQUFTSSxHQUUvQlQsRUFEYVMsRUFBTTN4RSxPQUl2QnN3RSxFQUFvQixTQUFTVyxHQUN6QlQsRUFBUW9CLE1BQU1ULFlBQVlGLEtBMkN2QkgsR0FBTyx1QkFBd0JBLEVBQUlyNkQsY0FBYyxXQXRDcEQ4NUQsRUFBT08sRUFBSWUsZ0JBQ2Z2QixFQUFvQixTQUFTVyxHQUd6QixJQUFJYSxFQUFTaEIsRUFBSXI2RCxjQUFjLFVBQy9CcTdELEVBQU9DLG1CQUFxQixXQUN4QmIsRUFBYUQsR0FDYmEsRUFBT0MsbUJBQXFCLEtBQzVCeEIsRUFBS3lCLFlBQVlGLEdBQ2pCQSxFQUFTLE1BRWJ2QixFQUFLMEIsWUFBWUgsS0FLckJ4QixFQUFvQixTQUFTVyxHQUN6Qm4zRSxXQUFXbzNFLEVBQWMsRUFBR0QsS0FsRDVCUixFQUFnQixnQkFBa0JoNEUsS0FBS0MsU0FBVyxJQUNsRGc0RSxFQUFrQixTQUFTaUIsR0FDdkJBLEVBQU05aEMsU0FBV3o1QyxHQUNLLGlCQUFmdTdFLEVBQU0zeEUsTUFDeUIsSUFBdEMyeEUsRUFBTTN4RSxLQUFLcWpCLFFBQVFvdEQsSUFDbkJTLEdBQWNTLEVBQU0zeEUsS0FBS2hHLE1BQU15MkUsRUFBY3Y2RSxVQUlqREUsRUFBT29mLGlCQUNQcGYsRUFBT29mLGlCQUFpQixVQUFXazdELEdBQWlCLEdBRXBEdDZFLEVBQU84N0UsWUFBWSxZQUFheEIsR0FHcENKLEVBQW9CLFNBQVNXLEdBQ3pCNzZFLEVBQU8rNkUsWUFBWVYsRUFBZ0JRLEVBQVEsT0FnRW5ERixFQUFTalEsYUExS1QsU0FBc0JxUixHQUVJLG1CQUFiQSxJQUNUQSxFQUFXLElBQUlqbUUsU0FBUyxHQUFLaW1FLElBSS9CLElBREEsSUFBSTlQLEVBQU8sSUFBSXR0RSxNQUFNbUQsVUFBVWhDLE9BQVMsR0FDL0J0RCxFQUFJLEVBQUdBLEVBQUl5dkUsRUFBS25zRSxPQUFRdEQsSUFDN0J5dkUsRUFBS3p2RSxHQUFLc0YsVUFBVXRGLEVBQUksR0FHNUIsSUFBSXcvRSxFQUFPLENBQUVELFNBQVVBLEVBQVU5UCxLQUFNQSxHQUd2QyxPQUZBdU8sRUFBY0QsR0FBY3lCLEVBQzVCOUIsRUFBa0JLLEdBQ1hBLEtBNkpUSSxFQUFTVixlQUFpQkEsRUExSjFCLFNBQVNBLEVBQWVZLFVBQ2JMLEVBQWNLLEdBeUJ6QixTQUFTQyxFQUFhRCxHQUdsQixHQUFJSixFQUdBLzJFLFdBQVdvM0UsRUFBYyxFQUFHRCxPQUN6QixDQUNILElBQUltQixFQUFPeEIsRUFBY0ssR0FDekIsR0FBSW1CLEVBQU0sQ0FDTnZCLEdBQXdCLEVBQ3hCLEtBakNaLFNBQWF1QixHQUNULElBQUlELEVBQVdDLEVBQUtELFNBQ2hCOVAsRUFBTytQLEVBQUsvUCxLQUNoQixPQUFRQSxFQUFLbnNFLFFBQ2IsS0FBSyxFQUNEaThFLElBQ0EsTUFDSixLQUFLLEVBQ0RBLEVBQVM5UCxFQUFLLElBQ2QsTUFDSixLQUFLLEVBQ0Q4UCxFQUFTOVAsRUFBSyxHQUFJQSxFQUFLLElBQ3ZCLE1BQ0osS0FBSyxFQUNEOFAsRUFBUzlQLEVBQUssR0FBSUEsRUFBSyxHQUFJQSxFQUFLLElBQ2hDLE1BQ0osUUFDSThQLEVBQVMxOEUsTUFBTXd1RSxFQUFXNUIsSUFpQmxCTixDQUFJcVEsR0FDTixRQUNFL0IsRUFBZVksR0FDZkosR0FBd0IsTUF2RTVDLENBeUxrQixvQkFBVDk4RCxVQUF5QyxJQUFYM2QsRUFBeUJwQixLQUFPb0IsRUFBUzJkLFEscUhDOUtoRixhQUdFLFdBQVkwd0QsR0FBWixXQUNFLFFBQVMsV0FDUCxHQUFtQixpQkFBUkEsRUFDVCxFQUFLN1gsT0FBUyxXQUFhLFNBQVc2WCxTQUNqQyxHQUFJQSxhQUFlMXZFLE1BQ3hCLEVBQUs2M0QsT0FBUyxXQUFhLFNBQVc2WCxRQUNqQyxNQUFJQSxhQUFlLEVBQUc0TixRQUczQixNQUFNLElBQUk5NkUsTUFBTSxnRUFGaEIsRUFBS3ExRCxPQUFTLFdBQWEsU0FBVzZYLEVBQUl0aEUsY0F3SGxELE9BNUdFLFlBQUFrbUUsT0FBQSxTQUFPaHdFLEdBQVAsV0FDTWdXLEdBQWtCLEVBUXRCLE9BUEEsUUFBUyxXQUVtQixJQURBLE1BQVEsRUFBS3U5QyxPQUFPemxELE1BQU05TixFQUFFdXpELFNBQzVDeHBELGNBQ1JpTSxHQUFTLE1BSU5BLEdBU0QsWUFBQWlqRSxXQUFSLFNBQW1CampFLEdBQ2JyYSxLQUFLNDNELE9BQU92c0QsT0FBU2dQLEVBQU9oUCxNQUM5QnJMLEtBQUs0M0QsT0FBT3BwRCxVQUNaeE8sS0FBSzQzRCxPQUFTLFdBQWF2OUMsSUFFM0JyYSxLQUFLNDNELE9BQU9uMUQsT0FBTzRYLElBU3ZCLFlBQUEzSixJQUFBLFNBQUlyTSxHQUFKLFdBQ0UsUUFBUyxXQUNQLElBQU1nVyxFQUFxQixFQUFLdTlDLE9BQU9sbkQsSUFBSXJNLEVBQUV1ekQsUUFDN0MsRUFBSzBsQixXQUFXampFLE9BU3BCLFlBQUF4SixJQUFBLFNBQUl4TSxHQUFKLFdBQ0UsUUFBUyxXQUNQLElBQU1nVyxFQUFxQixFQUFLdTlDLE9BQU8vbUQsSUFBSXhNLEVBQUV1ekQsUUFDN0MsRUFBSzBsQixXQUFXampFLE9BU3BCLFlBQUFwSixJQUFBLFNBQUk1TSxHQUFKLFdBQ0UsUUFBUyxXQUNQLElBQU1nVyxFQUFxQixFQUFLdTlDLE9BQU8zbUQsSUFBSTVNLEVBQUV1ekQsUUFDN0MsRUFBSzBsQixXQUFXampFLE9BU3BCLFlBQUFsSixJQUFBLFNBQUk5TSxHQUFKLFdBQ0UsUUFBUyxXQUNQLElBQU1nVyxFQUFxQixFQUFLdTlDLE9BQU96bUQsSUFBSTlNLEVBQUV1ekQsUUFDN0MsRUFBSzBsQixXQUFXampFLE9BV3BCLFlBQUExSyxJQUFBLFNBQUl0TCxFQUFRazVFLEdBQVosV0FDRSxRQUFTLFdBQ1AsSUFBSWxqRSxFQUNKLEdBQUloVyxhQUFhbTVFLEVBQ2ZuakUsRUFBUyxFQUFLdTlDLE9BQU9qb0QsSUFBSXRMLEVBQUV1ekQsWUFDdEIsTUFBSXZ6RCxhQUFhLEVBQUdnNUUsUUFlekIsTUFBTSxJQUFJOTZFLE1BQU0sc0RBZGhCLElBQUlrN0UsT0FBRSxFQUNGQyxPQUFFLEVBQ04sR0FBWSxJQUFSSCxFQUNGRSxFQUFLcDVFLEVBQUU4SixRQUFRbkosTUFBTSxFQUFHLE9BQ25CLElBQVksSUFBUnU0RSxFQUdULE1BQU0sSUFBSWg3RSxNQUFNLDBDQUZoQms3RSxFQUFLcDVFLEVBQUU4SixRQUFRbkosTUFBTSxFQUFHLEdBSzFCMDRFLEVBQUtDLEVBQWFGLEdBQ2xCcGpFLEVBQVMsRUFBS3U5QyxPQUFPam9ELElBQUkrdEUsRUFBRzlsQixRQUM1QjhsQixFQUFHOWxCLE9BQU9wcEQsVUFLWixFQUFLOHVFLFdBQVdqakUsT0FHdEIsRUFsSUEsR0F5SU1zakUsRUFBZSxTQUE0QmxPLEdBQy9DLE9BQU8sSUFBSSxFQUFPQSxJQy9JcEJtTyxHQUFHcCtFLFVBQVVxK0UsSUFBTSxFQUNuQkQsR0FBR3ArRSxVQUFVZytFLE9BQVMsRUFDdEJJLEdBQUdwK0UsVUFBVW0rRSxhQUFlQSxFQUViIiwiZmlsZSI6Im51bWVyby5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMik7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG52YXIgdD1mdW5jdGlvbihlLG4pe3JldHVybih0PU9iamVjdC5zZXRQcm90b3R5cGVPZnx8e19fcHJvdG9fXzpbXX1pbnN0YW5jZW9mIEFycmF5JiZmdW5jdGlvbih0LGUpe3QuX19wcm90b19fPWV9fHxmdW5jdGlvbih0LGUpe2Zvcih2YXIgbiBpbiBlKWUuaGFzT3duUHJvcGVydHkobikmJih0W25dPWVbbl0pfSkoZSxuKX07ZnVuY3Rpb24gZShlLG4pe2Z1bmN0aW9uIHIoKXt0aGlzLmNvbnN0cnVjdG9yPWV9dChlLG4pLGUucHJvdG90eXBlPW51bGw9PT1uP09iamVjdC5jcmVhdGUobik6KHIucHJvdG90eXBlPW4ucHJvdG90eXBlLG5ldyByKX1mdW5jdGlvbiBuKHQsZSxuLHIpe3JldHVybiBuZXcobnx8KG49UHJvbWlzZSkpKGZ1bmN0aW9uKG8sYSl7ZnVuY3Rpb24gaSh0KXt0cnl7dShyLm5leHQodCkpfWNhdGNoKHQpe2EodCl9fWZ1bmN0aW9uIHModCl7dHJ5e3Uoci50aHJvdyh0KSl9Y2F0Y2godCl7YSh0KX19ZnVuY3Rpb24gdSh0KXt0LmRvbmU/byh0LnZhbHVlKTpuZXcgbihmdW5jdGlvbihlKXtlKHQudmFsdWUpfSkudGhlbihpLHMpfXUoKHI9ci5hcHBseSh0LGV8fFtdKSkubmV4dCgpKX0pfWZ1bmN0aW9uIHIodCxlKXt2YXIgbixyLG8sYSxpPXtsYWJlbDowLHNlbnQ6ZnVuY3Rpb24oKXtpZigxJm9bMF0pdGhyb3cgb1sxXTtyZXR1cm4gb1sxXX0sdHJ5czpbXSxvcHM6W119O3JldHVybiBhPXtuZXh0OnMoMCksdGhyb3c6cygxKSxyZXR1cm46cygyKX0sXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiYoYVtTeW1ib2wuaXRlcmF0b3JdPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXN9KSxhO2Z1bmN0aW9uIHMoYSl7cmV0dXJuIGZ1bmN0aW9uKHMpe3JldHVybiBmdW5jdGlvbihhKXtpZihuKXRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO2Zvcig7aTspdHJ5e2lmKG49MSxyJiYobz0yJmFbMF0/ci5yZXR1cm46YVswXT9yLnRocm93fHwoKG89ci5yZXR1cm4pJiZvLmNhbGwociksMCk6ci5uZXh0KSYmIShvPW8uY2FsbChyLGFbMV0pKS5kb25lKXJldHVybiBvO3N3aXRjaChyPTAsbyYmKGE9WzImYVswXSxvLnZhbHVlXSksYVswXSl7Y2FzZSAwOmNhc2UgMTpvPWE7YnJlYWs7Y2FzZSA0OnJldHVybiBpLmxhYmVsKysse3ZhbHVlOmFbMV0sZG9uZTohMX07Y2FzZSA1OmkubGFiZWwrKyxyPWFbMV0sYT1bMF07Y29udGludWU7Y2FzZSA3OmE9aS5vcHMucG9wKCksaS50cnlzLnBvcCgpO2NvbnRpbnVlO2RlZmF1bHQ6aWYoIShvPShvPWkudHJ5cykubGVuZ3RoPjAmJm9bby5sZW5ndGgtMV0pJiYoNj09PWFbMF18fDI9PT1hWzBdKSl7aT0wO2NvbnRpbnVlfWlmKDM9PT1hWzBdJiYoIW98fGFbMV0+b1swXSYmYVsxXTxvWzNdKSl7aS5sYWJlbD1hWzFdO2JyZWFrfWlmKDY9PT1hWzBdJiZpLmxhYmVsPG9bMV0pe2kubGFiZWw9b1sxXSxvPWE7YnJlYWt9aWYobyYmaS5sYWJlbDxvWzJdKXtpLmxhYmVsPW9bMl0saS5vcHMucHVzaChhKTticmVha31vWzJdJiZpLm9wcy5wb3AoKSxpLnRyeXMucG9wKCk7Y29udGludWV9YT1lLmNhbGwodCxpKX1jYXRjaCh0KXthPVs2LHRdLHI9MH1maW5hbGx5e249bz0wfWlmKDUmYVswXSl0aHJvdyBhWzFdO3JldHVybnt2YWx1ZTphWzBdP2FbMV06dm9pZCAwLGRvbmU6ITB9fShbYSxzXSl9fX12YXIgbz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5nbG9iYWw9dCx0aGlzLmZsYWdzPXt9LHRoaXMuZmxhZ1JlZ2lzdHJ5PXt9LHRoaXMudXJsRmxhZ3M9e30sdGhpcy5wb3B1bGF0ZVVSTEZsYWdzKCl9cmV0dXJuIHQucHJvdG90eXBlLnNldFBsYXRmb3JtPWZ1bmN0aW9uKHQsZSl7bnVsbCE9dGhpcy5wbGF0Zm9ybSYmY29uc29sZS53YXJuKFwiUGxhdGZvcm0gXCIrdGhpcy5wbGF0Zm9ybU5hbWUrXCIgaGFzIGFscmVhZHkgYmVlbiBzZXQuIE92ZXJ3cml0aW5nIHRoZSBwbGF0Zm9ybSB3aXRoIFwiK2UrXCIuXCIpLHRoaXMucGxhdGZvcm1OYW1lPXQsdGhpcy5wbGF0Zm9ybT1lfSx0LnByb3RvdHlwZS5yZWdpc3RlckZsYWc9ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMuZmxhZ1JlZ2lzdHJ5W3RdPXtldmFsdWF0aW9uRm46ZSxzZXRIb29rOm59LG51bGwhPXRoaXMudXJsRmxhZ3NbdF0pe3ZhciByPXRoaXMudXJsRmxhZ3NbdF07Y29uc29sZS53YXJuKFwiU2V0dGluZyBmZWF0dXJlIG92ZXJyaWRlIGZyb20gVVJMIFwiK3QrXCI6IFwiK3IrXCIuXCIpLHRoaXMuc2V0KHQscil9fSx0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQgaW4gdGhpcy5mbGFncz90aGlzLmZsYWdzW3RdOih0aGlzLmZsYWdzW3RdPXRoaXMuZXZhbHVhdGVGbGFnKHQpLHRoaXMuZmxhZ3NbdF0pfSx0LnByb3RvdHlwZS5nZXROdW1iZXI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZ2V0KHQpfSx0LnByb3RvdHlwZS5nZXRCb29sPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmdldCh0KX0sdC5wcm90b3R5cGUuZ2V0RmxhZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5mbGFnc30sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZmVhdHVyZXNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZmxhZ3N9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksdC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09dGhpcy5mbGFnUmVnaXN0cnlbdF0pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHNldCBmbGFnIFwiK3QrXCIgYXMgaXQgaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWQuXCIpO3RoaXMuZmxhZ3NbdF09ZSxudWxsIT10aGlzLmZsYWdSZWdpc3RyeVt0XS5zZXRIb29rJiZ0aGlzLmZsYWdSZWdpc3RyeVt0XS5zZXRIb29rKGUpfSx0LnByb3RvdHlwZS5ldmFsdWF0ZUZsYWc9ZnVuY3Rpb24odCl7aWYobnVsbD09dGhpcy5mbGFnUmVnaXN0cnlbdF0pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGV2YWx1YXRlIGZsYWcgJ1wiK3QrXCInOiBubyBldmFsdWF0aW9uIGZ1bmN0aW9uIGZvdW5kLlwiKTtyZXR1cm4gdGhpcy5mbGFnUmVnaXN0cnlbdF0uZXZhbHVhdGlvbkZuKCl9LHQucHJvdG90eXBlLnNldEZsYWdzPWZ1bmN0aW9uKHQpe3RoaXMuZmxhZ3M9T2JqZWN0LmFzc2lnbih7fSx0KX0sdC5wcm90b3R5cGUucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLmZsYWdzPXt9LHRoaXMudXJsRmxhZ3M9e30sdGhpcy5wb3B1bGF0ZVVSTEZsYWdzKCl9LHQucHJvdG90eXBlLnBvcHVsYXRlVVJMRmxhZ3M9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKHZvaWQgMCE9PXRoaXMuZ2xvYmFsJiZ2b2lkIDAhPT10aGlzLmdsb2JhbC5sb2NhdGlvbiYmdm9pZCAwIT09dGhpcy5nbG9iYWwubG9jYXRpb24uc2VhcmNoKXt2YXIgZT1hKHRoaXMuZ2xvYmFsLmxvY2F0aW9uLnNlYXJjaCk7aWYoXCJ0ZmpzZmxhZ3NcImluIGUpZS50ZmpzZmxhZ3Muc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIG49ZS5zcGxpdChcIjpcIikscj1uWzBdLG89blsxXTt0LnVybEZsYWdzW3JdPWZ1bmN0aW9uKHQsZSl7aWYoXCJ0cnVlXCI9PT0oZT1lLnRvTG93ZXJDYXNlKCkpfHxcImZhbHNlXCI9PT1lKXJldHVyblwidHJ1ZVwiPT09ZTtpZihcIlwiKyArZT09PWUpcmV0dXJuK2U7dGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IHBhcnNlIHZhbHVlIGZsYWcgdmFsdWUgXCIrZStcIiBmb3IgZmxhZyBcIit0K1wiLlwiKX0ocixvKX0pfX0sdH0oKTtmdW5jdGlvbiBhKHQpe3ZhciBlPXt9O3JldHVybiB0LnJlcGxhY2UoL1s/Jl0oW149PyZdKykoPzo9KFteJl0qKSk/L2csZnVuY3Rpb24odCl7Zm9yKHZhciBuPVtdLHI9MTtyPGFyZ3VtZW50cy5sZW5ndGg7cisrKW5bci0xXT1hcmd1bWVudHNbcl07cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0W2RlY29kZVVSSUNvbXBvbmVudChlKV09ZGVjb2RlVVJJQ29tcG9uZW50KG58fFwiXCIpfShlLG5bMF0sblsxXSksbi5qb2luKFwiPVwiKX0pLGV9dmFyIGk9bnVsbDtmdW5jdGlvbiBzKHQpe2k9dH12YXIgdT1PYmplY3QuZnJlZXplKHtFbnZpcm9ubWVudDpvLGdldFF1ZXJ5UGFyYW1zOmEsZ2V0IEVOVigpe3JldHVybiBpfSxzZXRFbnZpcm9ubWVudEdsb2JhbDpzfSk7ZnVuY3Rpb24gbCh0KXtmb3IodmFyIGU9dC5sZW5ndGgsbj0wLHI9MDtlPjA7KXI9TWF0aC5yYW5kb20oKSplfDAsbj10Wy0tZV0sdFtlXT10W3JdLHRbcl09bn1mdW5jdGlvbiBjKHQsZSxuKXtyZXR1cm4gTWF0aC5tYXgodCxNYXRoLm1pbihlLG4pKX1mdW5jdGlvbiBoKHQpe3JldHVybiB0JTI9PTA/dDp0KzF9ZnVuY3Rpb24gcCh0KXtmb3IodmFyIGU9MCxuPTA7bjx0Lmxlbmd0aDtuKyspZSs9dFtuXTtyZXR1cm4gZX1mdW5jdGlvbiBmKHQsZSl7aWYoIXQpdGhyb3cgbmV3IEVycm9yKFwic3RyaW5nXCI9PXR5cGVvZiBlP2U6ZSgpKX1mdW5jdGlvbiBkKHQsZSxuKXt2b2lkIDA9PT1uJiYobj1cIlwiKSxmKHkodCxlKSxmdW5jdGlvbigpe3JldHVybiBuK1wiIFNoYXBlcyBcIit0K1wiIGFuZCBcIitlK1wiIG11c3QgbWF0Y2hcIn0pfWZ1bmN0aW9uIHYodCl7ZihudWxsIT10LGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgaW5wdXQgdG8gdGhlIHRlbnNvciBjb25zdHJ1Y3RvciBtdXN0IGJlIGEgbm9uLW51bGwgdmFsdWUuXCJ9KX1mdW5jdGlvbiBtKHQsZSxuKXtpZih2b2lkIDA9PT1lJiYoZT1bXSksdm9pZCAwPT09biYmKG49ITEpLG51bGw9PWUmJihlPVtdKSxBcnJheS5pc0FycmF5KHQpfHxfKHQpJiYhbilmb3IodmFyIHI9MDtyPHQubGVuZ3RoOysrciltKHRbcl0sZSxuKTtlbHNlIGUucHVzaCh0KTtyZXR1cm4gZX1mdW5jdGlvbiBnKHQpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gMTtmb3IodmFyIGU9dFswXSxuPTE7bjx0Lmxlbmd0aDtuKyspZSo9dFtuXTtyZXR1cm4gZX1mdW5jdGlvbiB5KHQsZSl7aWYodD09PWUpcmV0dXJuITA7aWYobnVsbD09dHx8bnVsbD09ZSlyZXR1cm4hMTtpZih0Lmxlbmd0aCE9PWUubGVuZ3RoKXJldHVybiExO2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKWlmKHRbbl0hPT1lW25dKXJldHVybiExO3JldHVybiEwfWZ1bmN0aW9uIHgodCl7cmV0dXJuIHQlMT09MH1mdW5jdGlvbiBiKHQpe2lmKG51bGwhPU1hdGgudGFuaClyZXR1cm4gTWF0aC50YW5oKHQpO2lmKHQ9PT0xLzApcmV0dXJuIDE7aWYodD09PS0xLzApcmV0dXJuLTE7dmFyIGU9TWF0aC5leHAoMip0KTtyZXR1cm4oZS0xKS8oZSsxKX1mdW5jdGlvbiB3KHQpe3ZhciBlPU1hdGguY2VpbChNYXRoLnNxcnQodCkpO3JldHVybltlLE1hdGguY2VpbCh0L2UpXX1mdW5jdGlvbiBDKHQsZSl7cmV0dXJuIGU8PXQubGVuZ3RoP3Q6dCtcIiBcIi5yZXBlYXQoZS10Lmxlbmd0aCl9ZnVuY3Rpb24gRSh0LGUsbil7cmV0dXJuIHZvaWQgMD09PWUmJihlPWZ1bmN0aW9uKHQpe3JldHVybiAwfSksbmV3IFByb21pc2UoZnVuY3Rpb24ocixvKXt2YXIgYT0wLGk9ZnVuY3Rpb24oKXtpZih0KCkpcigpO2Vsc2V7dmFyIHM9ZSgrK2EpO251bGwhPW4mJmE+PW4/bygpOnNldFRpbWVvdXQoaSxzKX19O2koKX0pfWZ1bmN0aW9uIFIodCxlKXtmb3IodmFyIG49MSxyPS0xLG89MDtvPHQubGVuZ3RoOysrbylpZih0W29dPj0wKW4qPXRbb107ZWxzZSBpZigtMT09PXRbb10pe2lmKC0xIT09cil0aHJvdyBFcnJvcihcIlNoYXBlcyBjYW4gb25seSBoYXZlIDEgaW1wbGljaXQgc2l6ZS4gRm91bmQgLTEgYXQgZGltIFwiK3IrXCIgYW5kIGRpbSBcIitvKTtyPW99ZWxzZSBpZih0W29dPDApdGhyb3cgRXJyb3IoXCJTaGFwZXMgY2FuIG5vdCBiZSA8IDAuIEZvdW5kIFwiK3Rbb10rXCIgYXQgZGltIFwiK28pO2lmKC0xPT09cil7aWYoZT4wJiZlIT09bil0aHJvdyBFcnJvcihcIlNpemUoXCIrZStcIikgbXVzdCBtYXRjaCB0aGUgcHJvZHVjdCBvZiBzaGFwZSBcIit0KTtyZXR1cm4gdH1pZigwPT09bil0aHJvdyBFcnJvcihcIkNhbm5vdCBpbmZlciB0aGUgbWlzc2luZyBzaXplIGluIFtcIit0K1wiXSB3aGVuIHRoZXJlIGFyZSAwIGVsZW1lbnRzXCIpO2lmKGUlbiE9MCl0aHJvdyBFcnJvcihcIlRoZSBpbXBsaWNpdCBzaGFwZSBjYW4ndCBiZSBhIGZyYWN0aW9uYWwgbnVtYmVyLiBHb3QgXCIrZStcIiAvIFwiK24pO3ZhciBhPXQuc2xpY2UoKTtyZXR1cm4gYVtyXT1lL24sYX1mdW5jdGlvbiBJKHQsZSl7dmFyIG49ZS5sZW5ndGg7cmV0dXJuIGYoKHQ9bnVsbD09dD9lLm1hcChmdW5jdGlvbih0LGUpe3JldHVybiBlfSk6W10uY29uY2F0KHQpKS5ldmVyeShmdW5jdGlvbih0KXtyZXR1cm4gdD49LW4mJnQ8bn0pLGZ1bmN0aW9uKCl7cmV0dXJuXCJBbGwgdmFsdWVzIGluIGF4aXMgcGFyYW0gbXVzdCBiZSBpbiByYW5nZSBbLVwiK24rXCIsIFwiK24rXCIpIGJ1dCBnb3QgYXhpcyBcIit0fSksZih0LmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB4KHQpfSksZnVuY3Rpb24oKXtyZXR1cm5cIkFsbCB2YWx1ZXMgaW4gYXhpcyBwYXJhbSBtdXN0IGJlIGludGVnZXJzIGJ1dCBnb3QgYXhpcyBcIit0fSksdC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQ8MD9uK3Q6dH0pfWZ1bmN0aW9uIGsodCxlKXtmb3IodmFyIG49W10scj1bXSxvPW51bGwhPWUmJkFycmF5LmlzQXJyYXkoZSkmJjA9PT1lLmxlbmd0aCxhPW51bGw9PWV8fG8/bnVsbDpJKGUsdCkuc29ydCgpLGk9MCxzPTA7czx0Lmxlbmd0aDsrK3Mpe2lmKG51bGwhPWEpe2lmKGFbaV09PT1zJiYxIT09dFtzXSl0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBzcXVlZXplIGF4aXMgXCIrcytcIiBzaW5jZSBpdHMgZGltICdcIit0W3NdK1wiJyBpcyBub3QgMVwiKTsobnVsbD09YVtpXXx8YVtpXT5zKSYmMT09PXRbc10mJihuLnB1c2godFtzXSksci5wdXNoKHMpKSxhW2ldPD1zJiZpKyt9MSE9PXRbc10mJihuLnB1c2godFtzXSksci5wdXNoKHMpKX1yZXR1cm57bmV3U2hhcGU6bixrZXB0RGltczpyfX1mdW5jdGlvbiBOKHQsZSl7dmFyIG49bnVsbDtpZihudWxsPT10fHxcImZsb2F0MzJcIj09PXQpbj1uZXcgRmxvYXQzMkFycmF5KGUpO2Vsc2UgaWYoXCJpbnQzMlwiPT09dCluPW5ldyBJbnQzMkFycmF5KGUpO2Vsc2V7aWYoXCJib29sXCIhPT10KXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YSB0eXBlIFwiK3QpO249bmV3IFVpbnQ4QXJyYXkoZSl9cmV0dXJuIG59ZnVuY3Rpb24gUyh0LGUpe3ZhciBuPW51bGw7aWYobnVsbD09dHx8XCJmbG9hdDMyXCI9PT10KW49bmV3IEZsb2F0MzJBcnJheShlKTtlbHNlIGlmKFwiaW50MzJcIj09PXQpbj1uZXcgSW50MzJBcnJheShlKTtlbHNlIGlmKFwiYm9vbFwiPT09dCluPW5ldyBVaW50OEFycmF5KGUpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXQpdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhIHR5cGUgXCIrdCk7bj1uZXcgQXJyYXkoZSl9cmV0dXJuIG59ZnVuY3Rpb24gQSh0LGUpe2Zvcih2YXIgbj0wO248dC5sZW5ndGg7bisrKXt2YXIgcj10W25dO2lmKGlzTmFOKHIpfHwhaXNGaW5pdGUocikpdGhyb3cgRXJyb3IoXCJBIHRlbnNvciBvZiB0eXBlIFwiK2UrXCIgYmVpbmcgdXBsb2FkZWQgY29udGFpbnMgXCIrcitcIi5cIil9fWZ1bmN0aW9uIFQodCl7cmV0dXJuXCJib29sXCI9PT10fHxcImNvbXBsZXg2NFwiPT09dHx8XCJmbG9hdDMyXCI9PT10fHxcImludDMyXCI9PT10fHxcInN0cmluZ1wiPT09dH1mdW5jdGlvbiBEKHQsZSl7cmV0dXJuXCJjb21wbGV4NjRcIiE9PWUmJigoXCJmbG9hdDMyXCIhPT1lfHxcImNvbXBsZXg2NFwiPT09dCkmJigoXCJpbnQzMlwiIT09ZXx8XCJmbG9hdDMyXCI9PT10fHxcImNvbXBsZXg2NFwiPT09dCkmJihcImJvb2xcIiE9PWV8fFwiYm9vbFwiIT09dCkpKX1mdW5jdGlvbiBfKHQpe3JldHVybiB0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHx0IGluc3RhbmNlb2YgSW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXl9ZnVuY3Rpb24gTyh0KXtpZihcImZsb2F0MzJcIj09PXR8fFwiaW50MzJcIj09PXQpcmV0dXJuIDQ7aWYoXCJjb21wbGV4NjRcIj09PXQpcmV0dXJuIDg7aWYoXCJib29sXCI9PT10KXJldHVybiAxO3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gZHR5cGUgXCIrdCl9ZnVuY3Rpb24gRih0KXtpZihudWxsPT10KXJldHVybiAwO3ZhciBlPTA7cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZSs9dC5sZW5ndGh9KSxlfWZ1bmN0aW9uIE0odCl7cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIHR8fHQgaW5zdGFuY2VvZiBTdHJpbmd9ZnVuY3Rpb24gQih0KXtyZXR1cm5cImJvb2xlYW5cIj09dHlwZW9mIHR9ZnVuY3Rpb24gUCh0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdH1mdW5jdGlvbiBMKHQpe3JldHVybiBBcnJheS5pc0FycmF5KHQpP0wodFswXSk6dCBpbnN0YW5jZW9mIEZsb2F0MzJBcnJheT9cImZsb2F0MzJcIjp0IGluc3RhbmNlb2YgSW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/XCJpbnQzMlwiOlAodCk/XCJmbG9hdDMyXCI6TSh0KT9cInN0cmluZ1wiOkIodCk/XCJib29sXCI6XCJmbG9hdDMyXCJ9ZnVuY3Rpb24gVyh0KXtyZXR1cm4hISh0JiZ0LmNvbnN0cnVjdG9yJiZ0LmNhbGwmJnQuYXBwbHkpfWZ1bmN0aW9uIFUodCxlKXtmb3IodmFyIG49ZTtuPHQ7KytuKWlmKHQlbj09MClyZXR1cm4gbjtyZXR1cm4gdH1mdW5jdGlvbiBWKHQpe3ZhciBlPXQubGVuZ3RoO2lmKGU8MilyZXR1cm5bXTt2YXIgbj1uZXcgQXJyYXkoZS0xKTtuW2UtMl09dFtlLTFdO2Zvcih2YXIgcj1lLTM7cj49MDstLXIpbltyXT1uW3IrMV0qdFtyKzFdO3JldHVybiBufWZ1bmN0aW9uIHoodCxlLG4pe2lmKFwic3RyaW5nXCI9PT1lKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb252ZXJ0IGEgc3RyaW5nW10gdG8gYSBUeXBlZEFycmF5XCIpO2lmKEFycmF5LmlzQXJyYXkodCkmJih0PW0odCkpLG4mJkEodCxlKSxmdW5jdGlvbih0LGUpe3JldHVybiB0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5JiZcImZsb2F0MzJcIj09PWV8fHQgaW5zdGFuY2VvZiBJbnQzMkFycmF5JiZcImludDMyXCI9PT1lfHx0IGluc3RhbmNlb2YgVWludDhBcnJheSYmXCJib29sXCI9PT1lfSh0LGUpKXJldHVybiB0O2lmKG51bGw9PWV8fFwiZmxvYXQzMlwiPT09ZXx8XCJjb21wbGV4NjRcIj09PWUpcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkodCk7aWYoXCJpbnQzMlwiPT09ZSlyZXR1cm4gbmV3IEludDMyQXJyYXkodCk7aWYoXCJib29sXCI9PT1lKXtmb3IodmFyIHI9bmV3IFVpbnQ4QXJyYXkodC5sZW5ndGgpLG89MDtvPHIubGVuZ3RoOysrbykwIT09TWF0aC5yb3VuZCh0W29dKSYmKHJbb109MSk7cmV0dXJuIHJ9dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhIHR5cGUgXCIrZSl9ZnVuY3Rpb24gRyh0LGUpe2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gZVswXTt2YXIgbj10LnJlZHVjZShmdW5jdGlvbih0LGUpe3JldHVybiB0KmV9KTtpZigwPT09bilyZXR1cm5bXTtpZihuIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiW1wiK3QrXCJdIGRvZXMgbm90IG1hdGNoIHRoZSBpbnB1dCBzaXplLlwiKTtyZXR1cm4gZnVuY3Rpb24gdChlLG4scil7dmFyIG89bmV3IEFycmF5O2lmKDE9PT1uLmxlbmd0aClmb3IodmFyIGE9blswXSxpPTA7aTxhO2krKylvW2ldPXJbZStpXTtlbHNle2E9blswXTt2YXIgcz1uLnNsaWNlKDEpLHU9cy5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSk7Zm9yKGk9MDtpPGE7aSsrKW9baV09dChlK2kqdSxzLHIpfXJldHVybiBvfSgwLHQsZSl9ZnVuY3Rpb24gSCh0LGUpe2Zvcih2YXIgbj1xKHQsZSkscj0wO3I8bi5sZW5ndGg7cisrKW5bcl09MTtyZXR1cm4gbn1mdW5jdGlvbiBxKHQsZSl7aWYobnVsbD09ZXx8XCJmbG9hdDMyXCI9PT1lfHxcImNvbXBsZXg2NFwiPT09ZSlyZXR1cm4gbmV3IEZsb2F0MzJBcnJheSh0KTtpZihcImludDMyXCI9PT1lKXJldHVybiBuZXcgSW50MzJBcnJheSh0KTtpZihcImJvb2xcIj09PWUpcmV0dXJuIG5ldyBVaW50OEFycmF5KHQpO3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YSB0eXBlIFwiK2UpfWZ1bmN0aW9uICQoKXtyZXR1cm4gaS5wbGF0Zm9ybS5ub3coKX1mdW5jdGlvbiBLKHQpe3QuZm9yRWFjaChmdW5jdGlvbihlKXtmKE51bWJlci5pc0ludGVnZXIoZSkmJmU+PTAsZnVuY3Rpb24oKXtyZXR1cm5cIlRlbnNvciBtdXN0IGhhdmUgYSBzaGFwZSBjb21wcmlzZWQgb2YgcG9zaXRpdmUgaW50ZWdlcnMgYnV0IGdvdCBzaGFwZSBbXCIrdCtcIl0uXCJ9KX0pfWZ1bmN0aW9uIGoodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9XCJ1dGYtOFwiKSxlPWV8fFwidXRmLThcIixpLnBsYXRmb3JtLmVuY29kZSh0LGUpfWZ1bmN0aW9uIFgodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9XCJ1dGYtOFwiKSxlPWV8fFwidXRmLThcIixpLnBsYXRmb3JtLmRlY29kZSh0LGUpfXZhciBZPU9iamVjdC5mcmVlemUoe3NodWZmbGU6bCxjbGFtcDpjLG5lYXJlc3RMYXJnZXJFdmVuOmgsc3VtOnAscmFuZFVuaWZvcm06ZnVuY3Rpb24odCxlKXt2YXIgbj1NYXRoLnJhbmRvbSgpO3JldHVybiBlKm4rKDEtbikqdH0sZGlzdFNxdWFyZWQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49MCxyPTA7cjx0Lmxlbmd0aDtyKyspe3ZhciBvPU51bWJlcih0W3JdKS1OdW1iZXIoZVtyXSk7bis9bypvfXJldHVybiBufSxhc3NlcnQ6Zixhc3NlcnRTaGFwZXNNYXRjaDpkLGFzc2VydE5vbk51bGw6dixmbGF0dGVuOm0sc2l6ZUZyb21TaGFwZTpnLGlzU2NhbGFyU2hhcGU6ZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10Lmxlbmd0aH0sYXJyYXlzRXF1YWw6eSxpc0ludDp4LHRhbmg6YixzaXplVG9TcXVhcmlzaFNoYXBlOncsY3JlYXRlU2h1ZmZsZWRJbmRpY2VzOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgVWludDMyQXJyYXkodCksbj0wO248dDsrK24pZVtuXT1uO3JldHVybiBsKGUpLGV9LHJpZ2h0UGFkOkMscmVwZWF0ZWRUcnk6RSxpbmZlckZyb21JbXBsaWNpdFNoYXBlOlIscGFyc2VBeGlzUGFyYW06SSxzcXVlZXplU2hhcGU6ayxnZXRUeXBlZEFycmF5RnJvbURUeXBlOk4sZ2V0QXJyYXlGcm9tRFR5cGU6UyxjaGVja0NvbnZlcnNpb25Gb3JFcnJvcnM6QSxpc1ZhbGlkRHR5cGU6VCxoYXNFbmNvZGluZ0xvc3M6RCxpc1R5cGVkQXJyYXk6XyxieXRlc1BlckVsZW1lbnQ6TyxieXRlc0Zyb21TdHJpbmdBcnJheTpGLGlzU3RyaW5nOk0saXNCb29sZWFuOkIsaXNOdW1iZXI6UCxpbmZlckR0eXBlOkwsaXNGdW5jdGlvbjpXLG5lYXJlc3REaXZpc29yOlUsY29tcHV0ZVN0cmlkZXM6Vix0b1R5cGVkQXJyYXk6eix0b05lc3RlZEFycmF5OkcsbWFrZU9uZXNUeXBlZEFycmF5OkgsbWFrZVplcm9zVHlwZWRBcnJheTpxLG5vdzokLGFzc2VydE5vbk5lZ2F0aXZlSW50ZWdlckRpbWVuc2lvbnM6SyxmZXRjaDpmdW5jdGlvbih0LGUpe3JldHVybiBpLnBsYXRmb3JtLmZldGNoKHQsZSl9LGVuY29kZVN0cmluZzpqLGRlY29kZVN0cmluZzpYfSksUT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt0aGlzLmJhY2tlbmRUaW1lcj10LHRoaXMubG9nZ2VyPWUsbnVsbD09ZSYmKHRoaXMubG9nZ2VyPW5ldyBKKX1yZXR1cm4gdC5wcm90b3R5cGUucHJvZmlsZUtlcm5lbD1mdW5jdGlvbih0LGUsbil7dmFyIHIsbz10aGlzLGE9dGhpcy5iYWNrZW5kVGltZXIudGltZShmdW5jdGlvbigpe3I9bigpfSk7cmV0dXJuKEFycmF5LmlzQXJyYXkocik/cjpbcl0pLmZvckVhY2goZnVuY3Rpb24obil7bi5kYXRhKCkudGhlbihmdW5jdGlvbihyKXshZnVuY3Rpb24odCxlLG4pe2lmKFwiZmxvYXQzMlwiIT09ZSlyZXR1cm4hMTtmb3IodmFyIHI9MDtyPHQubGVuZ3RoO3IrKyl7dmFyIG89dFtyXTtpZihpc05hTihvKXx8IWlzRmluaXRlKG8pKXJldHVybiBjb25zb2xlLndhcm4oXCJGb3VuZCBcIitvK1wiIGluIHRoZSByZXN1bHQgb2YgJ1wiK24rXCInXCIpLCEwfX0ocixuLmR0eXBlLHQpLGEudGhlbihmdW5jdGlvbihhKXt2YXIgaT1cIlwiO251bGwhPWEuZ2V0RXh0cmFQcm9maWxlSW5mbyYmKGk9YS5nZXRFeHRyYVByb2ZpbGVJbmZvKCkpLG8ubG9nZ2VyLmxvZ0tlcm5lbFByb2ZpbGUodCxuLHIsYS5rZXJuZWxNcyxlLGkpfSl9KX0pLHJ9LHR9KCk7dmFyIEo9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXJldHVybiB0LnByb3RvdHlwZS5sb2dLZXJuZWxQcm9maWxlPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2YXIgaT1DKHIrXCJtc1wiLDkpLHM9Qyh0LDI1KSx1PWUucmFuayxsPWUuc2l6ZSxjPUMoZS5zaGFwZS50b1N0cmluZygpLDE0KSxoPVwiXCI7Zm9yKHZhciBwIGluIG8pe3ZhciBmPW9bcF0uc2hhcGUsZD1mLmxlbmd0aDtoKz1wK1wiOiBcIitkK1wiRCBcIisoZD4wP2Y6XCJcIikrXCIgXCJ9Y29uc29sZS5sb2coXCIlY1wiK3MrXCJcXHQlY1wiK2krXCJcXHQlY1wiK3UrXCJEIFwiK2MrXCJcXHQlY1wiK2wrXCJcXHQlY1wiK2grXCJcXHQlY1wiK2EsXCJmb250LXdlaWdodDpib2xkXCIsXCJjb2xvcjpyZWRcIixcImNvbG9yOmJsdWVcIixcImNvbG9yOiBvcmFuZ2VcIixcImNvbG9yOiBncmVlblwiLFwiY29sb3I6IHN0ZWVsYmx1ZVwiKX0sdH0oKSxaPTIwLHR0PTMsZXQ9NztmdW5jdGlvbiBudCh0LGUsbixyKXt2YXIgbz1WKGUpLGE9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89ZyhlKSxhPXJbci5sZW5ndGgtMV0saT1uZXcgQXJyYXkoYSkuZmlsbCgwKSxzPWUubGVuZ3RoLHU9XCJjb21wbGV4NjRcIj09PW4/YXQodCk6dDtpZihzPjEpZm9yKHZhciBsPTA7bDxvL2E7bCsrKWZvcih2YXIgYz1sKmEsaD0wO2g8YTtoKyspaVtoXT1NYXRoLm1heChpW2hdLHJ0KHVbYytoXSwwLG4pLmxlbmd0aCk7cmV0dXJuIGl9KHQsZSxuLG8pLGk9ZS5sZW5ndGgscz1mdW5jdGlvbiB0KGUsbixyLG8sYSxpKXt2b2lkIDA9PT1pJiYoaT0hMCk7dmFyIHM9XCJjb21wbGV4NjRcIj09PXI/MjoxO3ZhciB1PW5bMF07dmFyIGw9bi5sZW5ndGg7aWYoMD09PWwpe2lmKFwiY29tcGxleDY0XCI9PT1yKXt2YXIgYz1hdChlKTtyZXR1cm5bcnQoY1swXSwwLHIpXX1yZXR1cm5cImJvb2xcIj09PXI/W290KGVbMF0pXTpbZVswXS50b1N0cmluZygpXX1pZigxPT09bCl7aWYodT5aKXt2YXIgaD10dCpzLHA9QXJyYXkuZnJvbShlLnNsaWNlKDAsaCkpLGY9QXJyYXkuZnJvbShlLnNsaWNlKHUtdHQqcyx1KSk7cmV0dXJuXCJjb21wbGV4NjRcIj09PXImJihwPWF0KHApLGY9YXQoZikpLFtcIltcIitwLm1hcChmdW5jdGlvbih0LGUpe3JldHVybiBydCh0LGFbZV0scil9KS5qb2luKFwiLCBcIikrXCIsIC4uLiwgXCIrZi5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm4gcnQodCxhW3UtdHQrZV0scil9KS5qb2luKFwiLCBcIikrXCJdXCJdfXZhciBkPVwiY29tcGxleDY0XCI9PT1yP2F0KGUpOkFycmF5LmZyb20oZSk7cmV0dXJuW1wiW1wiK2QubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHJ0KHQsYVtlXSxyKX0pLmpvaW4oXCIsIFwiKStcIl1cIl19dmFyIHY9bi5zbGljZSgxKTt2YXIgbT1vLnNsaWNlKDEpO3ZhciBnPW9bMF0qczt2YXIgeT1bXTtpZih1Plope2Zvcih2YXIgeD0wO3g8dHQ7eCsrKXt2YXIgYj14Kmcsdz1iK2c7eS5wdXNoLmFwcGx5KHksdChlLnNsaWNlKGIsdyksdixyLG0sYSwhMSkpfXkucHVzaChcIi4uLlwiKTtmb3IodmFyIHg9dS10dDt4PHU7eCsrKXt2YXIgYj14Kmcsdz1iK2c7eS5wdXNoLmFwcGx5KHksdChlLnNsaWNlKGIsdyksdixyLG0sYSx4PT09dS0xKSl9fWVsc2UgZm9yKHZhciB4PTA7eDx1O3grKyl7dmFyIGI9eCpnLHc9YitnO3kucHVzaC5hcHBseSh5LHQoZS5zbGljZShiLHcpLHYscixtLGEseD09PXUtMSkpfXZhciBDPTI9PT1sP1wiLFwiOlwiXCI7eVswXT1cIltcIit5WzBdK0M7Zm9yKHZhciB4PTE7eDx5Lmxlbmd0aC0xO3grKyl5W3hdPVwiIFwiK3lbeF0rQzt2YXIgRT1cIixcXG5cIjtmb3IodmFyIHg9Mjt4PGw7eCsrKUUrPVwiXFxuXCI7eVt5Lmxlbmd0aC0xXT1cIiBcIit5W3kubGVuZ3RoLTFdK1wiXVwiKyhpP1wiXCI6RSk7cmV0dXJuIHl9KHQsZSxuLG8sYSksdT1bXCJUZW5zb3JcIl07cmV0dXJuIHImJih1LnB1c2goXCIgIGR0eXBlOiBcIituKSx1LnB1c2goXCIgIHJhbms6IFwiK2kpLHUucHVzaChcIiAgc2hhcGU6IFtcIitlK1wiXVwiKSx1LnB1c2goXCIgIHZhbHVlczpcIikpLHUucHVzaChzLm1hcChmdW5jdGlvbih0KXtyZXR1cm5cIiAgICBcIit0fSkuam9pbihcIlxcblwiKSksdS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIHJ0KHQsZSxuKXtyZXR1cm4gQyhBcnJheS5pc0FycmF5KHQpP3BhcnNlRmxvYXQodFswXS50b0ZpeGVkKGV0KSkrXCIgKyBcIitwYXJzZUZsb2F0KHRbMV0udG9GaXhlZChldCkpK1wialwiOk0odCk/XCInXCIrdCtcIidcIjpcImJvb2xcIj09PW4/b3QodCk6cGFyc2VGbG9hdCh0LnRvRml4ZWQoZXQpKS50b1N0cmluZygpLGUpfWZ1bmN0aW9uIG90KHQpe3JldHVybiAwPT09dD9cImZhbHNlXCI6XCJ0cnVlXCJ9ZnVuY3Rpb24gYXQodCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoO24rPTIpZS5wdXNoKFt0W25dLHRbbisxXV0pO3JldHVybiBlfXZhciBpdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4pe3ZhciByPXRoaXM7aWYodGhpcy5kdHlwZT1lLHRoaXMuc2hhcGU9dC5zbGljZSgpLHRoaXMuc2l6ZT1nKHQpLG51bGwhPW4pe3ZhciBvPW4ubGVuZ3RoO2Yobz09PXRoaXMuc2l6ZSxmdW5jdGlvbigpe3JldHVyblwiTGVuZ3RoIG9mIHZhbHVlcyAnXCIrbytcIicgZG9lcyBub3QgbWF0Y2ggdGhlIHNpemUgaW5mZXJyZWQgYnkgdGhlIHNoYXBlICdcIityLnNpemUrXCInLlwifSl9aWYoXCJjb21wbGV4NjRcIj09PWUpdGhyb3cgbmV3IEVycm9yKFwiY29tcGxleDY0IGR0eXBlIFRlbnNvckJ1ZmZlcnMgYXJlIG5vdCBzdXBwb3J0ZWQuIFBsZWFzZSBjcmVhdGUgYSBUZW5zb3JCdWZmZXIgZm9yIHRoZSByZWFsIGFuZCBpbWFnaW5hcnkgcGFydHMgc2VwYXJhdGVseSBhbmQgY2FsbCB0Zi5jb21wbGV4KHJlYWwsIGltYWcpLlwiKTt0aGlzLnZhbHVlcz1ufHxTKGUsdGhpcy5zaXplKSx0aGlzLnN0cmlkZXM9Vih0KX1yZXR1cm4gdC5wcm90b3R5cGUuc2V0PWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLG49W10scj0xO3I8YXJndW1lbnRzLmxlbmd0aDtyKyspbltyLTFdPWFyZ3VtZW50c1tyXTswPT09bi5sZW5ndGgmJihuPVswXSksZihuLmxlbmd0aD09PXRoaXMucmFuayxmdW5jdGlvbigpe3JldHVyblwiVGhlIG51bWJlciBvZiBwcm92aWRlZCBjb29yZGluYXRlcyAoXCIrbi5sZW5ndGgrXCIpIG11c3QgbWF0Y2ggdGhlIHJhbmsgKFwiK2UucmFuaytcIilcIn0pO3ZhciBvPXRoaXMubG9jVG9JbmRleChuKTt0aGlzLnZhbHVlc1tvXT10fSx0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9W10sZT0wO2U8YXJndW1lbnRzLmxlbmd0aDtlKyspdFtlXT1hcmd1bWVudHNbZV07MD09PXQubGVuZ3RoJiYodD1bMF0pO2Zvcih2YXIgbj0wLHI9MCxvPXQ7cjxvLmxlbmd0aDtyKyspe3ZhciBhPW9bcl07aWYoYTwwfHxhPj10aGlzLnNoYXBlW25dKXt2YXIgaT1cIlJlcXVlc3RlZCBvdXQgb2YgcmFuZ2UgZWxlbWVudCBhdCBcIit0K1wiLiAgIEJ1ZmZlciBzaGFwZT1cIit0aGlzLnNoYXBlO3Rocm93IG5ldyBFcnJvcihpKX1uKyt9Zm9yKHZhciBzPXRbdC5sZW5ndGgtMV0sdT0wO3U8dC5sZW5ndGgtMTsrK3Upcys9dGhpcy5zdHJpZGVzW3VdKnRbdV07cmV0dXJuIHRoaXMudmFsdWVzW3NdfSx0LnByb3RvdHlwZS5sb2NUb0luZGV4PWZ1bmN0aW9uKHQpe2lmKDA9PT10aGlzLnJhbmspcmV0dXJuIDA7aWYoMT09PXRoaXMucmFuaylyZXR1cm4gdFswXTtmb3IodmFyIGU9dFt0Lmxlbmd0aC0xXSxuPTA7bjx0Lmxlbmd0aC0xOysrbillKz10aGlzLnN0cmlkZXNbbl0qdFtuXTtyZXR1cm4gZX0sdC5wcm90b3R5cGUuaW5kZXhUb0xvYz1mdW5jdGlvbih0KXtpZigwPT09dGhpcy5yYW5rKXJldHVybltdO2lmKDE9PT10aGlzLnJhbmspcmV0dXJuW3RdO2Zvcih2YXIgZT1uZXcgQXJyYXkodGhpcy5zaGFwZS5sZW5ndGgpLG49MDtuPGUubGVuZ3RoLTE7KytuKWVbbl09TWF0aC5mbG9vcih0L3RoaXMuc3RyaWRlc1tuXSksdC09ZVtuXSp0aGlzLnN0cmlkZXNbbl07cmV0dXJuIGVbZS5sZW5ndGgtMV09dCxlfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJyYW5rXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNoYXBlLmxlbmd0aH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS50b1RlbnNvcj1mdW5jdGlvbigpe3JldHVybiBjdC5tYWtlKHRoaXMuc2hhcGUse3ZhbHVlczp0aGlzLnZhbHVlc30sdGhpcy5kdHlwZSl9LHR9KCksc3Q9bnVsbCx1dD1udWxsLGx0PW51bGw7dmFyIGN0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUsbixyLG8pe3RoaXMua2VwdD0hMSx0aGlzLmlzRGlzcG9zZWRJbnRlcm5hbD0hMSx0aGlzLnNoYXBlPXQuc2xpY2UoKSx0aGlzLmR0eXBlPWV8fFwiZmxvYXQzMlwiLHRoaXMuc2l6ZT1nKHQpLHRoaXMuc3RyaWRlcz1WKHQpLHRoaXMuZGF0YUlkPW51bGwhPXI/cjp7fSx0aGlzLmlkPXN0KCkubmV4dFRlbnNvcklkKCksdGhpcy5yYW5rVHlwZT10aGlzLnJhbms8NT90aGlzLnJhbmsudG9TdHJpbmcoKTpcImhpZ2hlclwiLHN0KCkucmVnaXN0ZXJUZW5zb3IodGhpcyxvKSxudWxsIT1uJiZzdCgpLndyaXRlKG8sdGhpcy5kYXRhSWQsbil9cmV0dXJuIHQubWFrZT1mdW5jdGlvbihlLG4scixvKXt2YXIgYT1uLnZhbHVlcztyZXR1cm4gbnVsbCE9bi52YWx1ZXMmJlwic3RyaW5nXCI9PT1yJiZNKG4udmFsdWVzWzBdKSYmKGE9bi52YWx1ZXMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBqKHQpfSkpLG5ldyB0KGUscixhLG4uZGF0YUlkLG8pfSx0LnByb3RvdHlwZS5mbGF0dGVuPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5hczFEKCl9LHQucHJvdG90eXBlLmFzU2NhbGFyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksZigxPT09dGhpcy5zaXplLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJyYXkgbXVzdCBoYXZlIG9ubHkgMSBlbGVtZW50LlwifSksdGhpcy5yZXNoYXBlKFtdKX0sdC5wcm90b3R5cGUuYXMxRD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMucmVzaGFwZShbdGhpcy5zaXplXSl9LHQucHJvdG90eXBlLmFzMkQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnJlc2hhcGUoW3QsZV0pfSx0LnByb3RvdHlwZS5hczNEPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnJlc2hhcGUoW3QsZSxuXSl9LHQucHJvdG90eXBlLmFzNEQ9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdGhpcy5yZXNoYXBlKFt0LGUsbixyXSl9LHQucHJvdG90eXBlLmFzNUQ9ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnJlc2hhcGUoW3QsZSxuLHIsb10pfSx0LnByb3RvdHlwZS5hc1R5cGU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY2FzdCh0aGlzLHQpfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJyYW5rXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnNoYXBlLmxlbmd0aH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS5idWZmZXI9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSxbMix1dC5idWZmZXIodGhpcy5zaGFwZSx0aGlzLmR0eXBlLHQpXX19KX0pfSx0LnByb3RvdHlwZS5idWZmZXJTeW5jPWZ1bmN0aW9uKCl7cmV0dXJuIHV0LmJ1ZmZlcih0aGlzLnNoYXBlLHRoaXMuZHR5cGUsdGhpcy5kYXRhU3luYygpKX0sdC5wcm90b3R5cGUuYXJyYXk9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSxbMixHKHRoaXMuc2hhcGUsdCldfX0pfSl9LHQucHJvdG90eXBlLmFycmF5U3luYz1mdW5jdGlvbigpe3JldHVybiBHKHRoaXMuc2hhcGUsdGhpcy5kYXRhU3luYygpKX0sdC5wcm90b3R5cGUuZGF0YT1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciB0LGU7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihuKXtzd2l0Y2gobi5sYWJlbCl7Y2FzZSAwOnJldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHQ9c3QoKS5yZWFkKHRoaXMuZGF0YUlkKSxcInN0cmluZ1wiIT09dGhpcy5kdHlwZT9bMywyXTpbNCx0XTtjYXNlIDE6ZT1uLnNlbnQoKTt0cnl7cmV0dXJuWzIsZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIFgodCl9KV19Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRlY29kZSB0aGUgc3RyaW5nIGJ5dGVzIGludG8gdXRmLTguIFRvIGdldCB0aGUgb3JpZ2luYWwgYnl0ZXMsIGNhbGwgdGVuc29yLmJ5dGVzKCkuXCIpfW4ubGFiZWw9MjtjYXNlIDI6cmV0dXJuWzIsdF19fSl9KX0sdC5wcm90b3R5cGUuZGF0YVN5bmM9ZnVuY3Rpb24oKXt0aGlzLnRocm93SWZEaXNwb3NlZCgpO3ZhciB0PXN0KCkucmVhZFN5bmModGhpcy5kYXRhSWQpO2lmKFwic3RyaW5nXCI9PT10aGlzLmR0eXBlKXRyeXtyZXR1cm4gdC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIFgodCl9KX1jYXRjaCh0KXt0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gZGVjb2RlIHRoZSBzdHJpbmcgYnl0ZXMgaW50byB1dGYtOC4gVG8gZ2V0IHRoZSBvcmlnaW5hbCBieXRlcywgY2FsbCB0ZW5zb3IuYnl0ZXMoKS5cIil9cmV0dXJuIHR9LHQucHJvdG90eXBlLmJ5dGVzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIHQ7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihlKXtzd2l0Y2goZS5sYWJlbCl7Y2FzZSAwOnJldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLFs0LHN0KCkucmVhZCh0aGlzLmRhdGFJZCldO2Nhc2UgMTpyZXR1cm4gdD1lLnNlbnQoKSxcInN0cmluZ1wiPT09dGhpcy5kdHlwZT9bMix0XTpbMixuZXcgVWludDhBcnJheSh0LmJ1ZmZlcildfX0pfSl9LHQucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmlzRGlzcG9zZWR8fChzdCgpLmRpc3Bvc2VUZW5zb3IodGhpcyksdGhpcy5pc0Rpc3Bvc2VkSW50ZXJuYWw9ITApfSxPYmplY3QuZGVmaW5lUHJvcGVydHkodC5wcm90b3R5cGUsXCJpc0Rpc3Bvc2VkXCIse2dldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmlzRGlzcG9zZWRJbnRlcm5hbH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSx0LnByb3RvdHlwZS50aHJvd0lmRGlzcG9zZWQ9ZnVuY3Rpb24oKXtpZih0aGlzLmlzRGlzcG9zZWQpdGhyb3cgbmV3IEVycm9yKFwiVGVuc29yIGlzIGRpc3Bvc2VkLlwiKX0sdC5wcm90b3R5cGUudG9GbG9hdD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFzVHlwZShcImZsb2F0MzJcIil9LHQucHJvdG90eXBlLnRvSW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYXNUeXBlKFwiaW50MzJcIil9LHQucHJvdG90eXBlLnRvQm9vbD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmFzVHlwZShcImJvb2xcIil9LHQucHJvdG90eXBlLnByaW50PWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0hMSksdXQucHJpbnQodGhpcyx0KX0sdC5wcm90b3R5cGUucmVzaGFwZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5yZXNoYXBlKHRoaXMsdCl9LHQucHJvdG90eXBlLnJlc2hhcGVBcz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnJlc2hhcGUodC5zaGFwZSl9LHQucHJvdG90eXBlLmV4cGFuZERpbXM9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PTApLHV0LmV4cGFuZERpbXModGhpcyx0KX0sdC5wcm90b3R5cGUuY3Vtc3VtPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MCksdm9pZCAwPT09ZSYmKGU9ITEpLHZvaWQgMD09PW4mJihuPSExKSx1dC5jdW1zdW0odGhpcyx0LGUsbil9LHQucHJvdG90eXBlLnNxdWVlemU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3F1ZWV6ZSh0aGlzLHQpfSx0LnByb3RvdHlwZS5jbG9uZT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmNsb25lKHRoaXMpfSx0LnByb3RvdHlwZS5vbmVIb3Q9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0Lm9uZUhvdCh0aGlzLHQsZSxuKX0sdC5wcm90b3R5cGUudG9TdHJpbmc9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PSExKSxudCh0aGlzLmRhdGFTeW5jKCksdGhpcy5zaGFwZSx0aGlzLmR0eXBlLHQpfSx0LnByb3RvdHlwZS50aWxlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnRpbGUodGhpcyx0KX0sdC5wcm90b3R5cGUuZ2F0aGVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPTApLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuZ2F0aGVyKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUubWF0TXVsPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLHZvaWQgMD09PW4mJihuPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0Lm1hdE11bCh0aGlzLHQsZSxuKX0sdC5wcm90b3R5cGUuZG90PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmRvdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5ub3JtPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9XCJldWNsaWRlYW5cIiksdm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubm9ybSh0aGlzLHQsZSxuKX0sdC5wcm90b3R5cGUuc2xpY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zbGljZSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQucmV2ZXJzZSh0aGlzLHQpfSx0LnByb3RvdHlwZS5jb25jYXQ9ZnVuY3Rpb24oZSxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49MCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxlIGluc3RhbmNlb2YgdCYmKGU9W2VdKSx1dC5jb25jYXQoW3RoaXNdLmNvbmNhdChlKSxuKX0sdC5wcm90b3R5cGUuc3BsaXQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9MCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcGxpdCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnN0YWNrPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PWUmJihlPTApLHV0LnN0YWNrKFt0aGlzLHRdLGUpfSx0LnByb3RvdHlwZS51bnN0YWNrPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0wKSx1dC51bnN0YWNrKHRoaXMsdCl9LHQucHJvdG90eXBlLnBhZD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0wKSx1dC5wYWQodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5iYXRjaE5vcm1hbGl6YXRpb249ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdm9pZCAwPT09biYmKG49LjAwMSksbHQoXCJ0Zi5iYXRjaE5vcm1hbGl6YXRpb24oKSBpcyBnb2luZyBhd2F5LiBVc2UgdGYuYmF0Y2hOb3JtKCkgaW5zdGVhZCwgYW5kIG5vdGUgdGhlIHBvc2l0aW9uYWwgYXJndW1lbnQgY2hhbmdlIG9mIHNjYWxlLCBvZmZzZXQsIGFuZCB2YXJpYW5jZUVwc2lsb25cIiksdGhpcy5iYXRjaE5vcm0odCxlLG8scixuKX0sdC5wcm90b3R5cGUuYmF0Y2hOb3JtPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHZvaWQgMD09PW8mJihvPS4wMDEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYmF0Y2hOb3JtKHRoaXMsdCxlLG4scixvKX0sdC5wcm90b3R5cGUuYWxsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmFsbCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5hbnkodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5sb2dTdW1FeHA9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubG9nU3VtRXhwKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuc3VtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHZvaWQgMD09PWUmJihlPSExKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnN1bSh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnByb2Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQucHJvZCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLm1lYW49ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubWVhbih0aGlzLHQsZSl9LHQucHJvdG90eXBlLm1pbj1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5taW4odGhpcyx0LGUpfSx0LnByb3RvdHlwZS5tYXg9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9bnVsbCksdm9pZCAwPT09ZSYmKGU9ITEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubWF4KHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuYXJnTWluPWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD1udWxsKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmFyZ01pbih0aGlzLHQpfSx0LnByb3RvdHlwZS5hcmdNYXg9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PW51bGwpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYXJnTWF4KHRoaXMsdCl9LHQucHJvdG90eXBlLmNhc3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY2FzdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYWRkKHRoaXMsdCl9LHQucHJvdG90eXBlLmFkZFN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5hZGRTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUuYXRhbjI9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYXRhbjIodGhpcyx0KX0sdC5wcm90b3R5cGUuc3ViPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnN1Yih0aGlzLHQpfSx0LnByb3RvdHlwZS5zdWJTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3ViU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLnBvdz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5wb3codGhpcyx0KX0sdC5wcm90b3R5cGUucG93U3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnBvd1N0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5tdWw9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubXVsKHRoaXMsdCl9LHQucHJvdG90eXBlLm11bFN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5tdWxTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUuZGl2PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmRpdih0aGlzLHQpfSx0LnByb3RvdHlwZS5mbG9vckRpdj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5mbG9vckRpdih0aGlzLHQpfSx0LnByb3RvdHlwZS5kaXZTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuZGl2U3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLm1pbmltdW09ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubWluaW11bSh0aGlzLHQpfSx0LnByb3RvdHlwZS5taW5pbXVtU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0Lm1pbmltdW1TdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUubWF4aW11bT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5tYXhpbXVtKHRoaXMsdCl9LHQucHJvdG90eXBlLm1heGltdW1TdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubWF4aW11bVN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5tb2Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubW9kKHRoaXMsdCl9LHQucHJvdG90eXBlLm1vZFN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5tb2RTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2U9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3F1YXJlZERpZmZlcmVuY2UodGhpcyx0KX0sdC5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2VTdHJpY3Q9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3F1YXJlZERpZmZlcmVuY2VTdHJpY3QodGhpcyx0KX0sdC5wcm90b3R5cGUudHJhbnNwb3NlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnRyYW5zcG9zZSh0aGlzLHQpfSx0LnByb3RvdHlwZS5ub3RFcXVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5ub3RFcXVhbCh0aGlzLHQpfSx0LnByb3RvdHlwZS5ub3RFcXVhbFN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5ub3RFcXVhbFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5sZXNzPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0Lmxlc3ModGhpcyx0KX0sdC5wcm90b3R5cGUubGVzc1N0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sZXNzU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmVxdWFsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmVxdWFsKHRoaXMsdCl9LHQucHJvdG90eXBlLmVxdWFsU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmVxdWFsU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmxlc3NFcXVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sZXNzRXF1YWwodGhpcyx0KX0sdC5wcm90b3R5cGUubGVzc0VxdWFsU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0Lmxlc3NFcXVhbFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5ncmVhdGVyPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmdyZWF0ZXIodGhpcyx0KX0sdC5wcm90b3R5cGUuZ3JlYXRlclN0cmljdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5ncmVhdGVyU3RyaWN0KHRoaXMsdCl9LHQucHJvdG90eXBlLmdyZWF0ZXJFcXVhbD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5ncmVhdGVyRXF1YWwodGhpcyx0KX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsU3RyaWN0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmdyZWF0ZXJFcXVhbFN0cmljdCh0aGlzLHQpfSx0LnByb3RvdHlwZS5sb2dpY2FsQW5kPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmxvZ2ljYWxBbmQodGhpcyx0KX0sdC5wcm90b3R5cGUubG9naWNhbE9yPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmxvZ2ljYWxPcih0aGlzLHQpfSx0LnByb3RvdHlwZS5sb2dpY2FsTm90PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubG9naWNhbE5vdCh0aGlzKX0sdC5wcm90b3R5cGUubG9naWNhbFhvcj1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sb2dpY2FsWG9yKHRoaXMsdCl9LHQucHJvdG90eXBlLndoZXJlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQud2hlcmUodCx0aGlzLGUpfSx0LnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5uZWcodGhpcyl9LHQucHJvdG90eXBlLmNlaWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5jZWlsKHRoaXMpfSx0LnByb3RvdHlwZS5mbG9vcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmZsb29yKHRoaXMpfSx0LnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc2lnbih0aGlzKX0sdC5wcm90b3R5cGUuaXNOYU49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5pc05hTih0aGlzKX0sdC5wcm90b3R5cGUuaXNJbmY9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5pc0luZih0aGlzKX0sdC5wcm90b3R5cGUuaXNGaW5pdGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5pc0Zpbml0ZSh0aGlzKX0sdC5wcm90b3R5cGUuZXhwPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuZXhwKHRoaXMpfSx0LnByb3RvdHlwZS5leHBtMT1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmV4cG0xKHRoaXMpfSx0LnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sb2codGhpcyl9LHQucHJvdG90eXBlLmxvZzFwPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubG9nMXAodGhpcyl9LHQucHJvdG90eXBlLnNxcnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcXJ0KHRoaXMpfSx0LnByb3RvdHlwZS5yc3FydD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnJzcXJ0KHRoaXMpfSx0LnByb3RvdHlwZS5zcXVhcmU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcXVhcmUodGhpcyl9LHQucHJvdG90eXBlLnJlY2lwcm9jYWw9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5yZWNpcHJvY2FsKHRoaXMpfSx0LnByb3RvdHlwZS5hYnM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5hYnModGhpcyl9LHQucHJvdG90eXBlLmNsaXBCeVZhbHVlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY2xpcEJ5VmFsdWUodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5yZWx1PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQucmVsdSh0aGlzKX0sdC5wcm90b3R5cGUuZWx1PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuZWx1KHRoaXMpfSx0LnByb3RvdHlwZS5zZWx1PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc2VsdSh0aGlzKX0sdC5wcm90b3R5cGUubGVha3lSZWx1PWZ1bmN0aW9uKHQpe3JldHVybiB2b2lkIDA9PT10JiYodD0uMiksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sZWFreVJlbHUodGhpcyx0KX0sdC5wcm90b3R5cGUucHJlbHU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQucHJlbHUodGhpcyx0KX0sdC5wcm90b3R5cGUuc2lnbW9pZD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnNpZ21vaWQodGhpcyl9LHQucHJvdG90eXBlLmxvZ1NpZ21vaWQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5sb2dTaWdtb2lkKHRoaXMpfSx0LnByb3RvdHlwZS5zb2Z0cGx1cz1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnNvZnRwbHVzKHRoaXMpfSx0LnByb3RvdHlwZS56ZXJvc0xpa2U9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC56ZXJvc0xpa2UodGhpcyl9LHQucHJvdG90eXBlLm9uZXNMaWtlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQub25lc0xpa2UodGhpcyl9LHQucHJvdG90eXBlLnNpbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnNpbih0aGlzKX0sdC5wcm90b3R5cGUuY29zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY29zKHRoaXMpfSx0LnByb3RvdHlwZS50YW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC50YW4odGhpcyl9LHQucHJvdG90eXBlLmFzaW49ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5hc2luKHRoaXMpfSx0LnByb3RvdHlwZS5hY29zPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYWNvcyh0aGlzKX0sdC5wcm90b3R5cGUuYXRhbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmF0YW4odGhpcyl9LHQucHJvdG90eXBlLnNpbmg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zaW5oKHRoaXMpfSx0LnByb3RvdHlwZS5jb3NoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY29zaCh0aGlzKX0sdC5wcm90b3R5cGUudGFuaD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnRhbmgodGhpcyl9LHQucHJvdG90eXBlLmFzaW5oPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYXNpbmgodGhpcyl9LHQucHJvdG90eXBlLmFjb3NoPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYWNvc2godGhpcyl9LHQucHJvdG90eXBlLmF0YW5oPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuYXRhbmgodGhpcyl9LHQucHJvdG90eXBlLmVyZj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmVyZih0aGlzKX0sdC5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5yb3VuZCh0aGlzKX0sdC5wcm90b3R5cGUuc3RlcD1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zdGVwKHRoaXMsdCl9LHQucHJvdG90eXBlLnNvZnRtYXg9ZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PS0xKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnNvZnRtYXgodGhpcyx0KX0sdC5wcm90b3R5cGUubG9nU29mdG1heD1mdW5jdGlvbih0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9LTEpLHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubG9nU29mdG1heCh0aGlzLHQpfSx0LnByb3RvdHlwZS5yZXNpemVCaWxpbmVhcj1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5pbWFnZS5yZXNpemVCaWxpbmVhcih0aGlzLHQsZSl9LHQucHJvdG90eXBlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvcj1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0hMSksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5pbWFnZS5yZXNpemVOZWFyZXN0TmVpZ2hib3IodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5jb252MWQ9ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj1cIk5XQ1wiKSx2b2lkIDA9PT1vJiYobz0xKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmNvbnYxZCh0aGlzLHQsZSxuLHIsbyxhKX0sdC5wcm90b3R5cGUuY29udjJkPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9XCJOSFdDXCIpLHZvaWQgMD09PW8mJihvPVsxLDFdKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmNvbnYyZCh0aGlzLHQsZSxuLHIsbyxhKX0sdC5wcm90b3R5cGUuY29udjJkVHJhbnNwb3NlPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuY29udjJkVHJhbnNwb3NlKHRoaXMsdCxlLG4scixvKX0sdC5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJEPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9XCJOSFdDXCIpLHZvaWQgMD09PW8mJihvPVsxLDFdKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LmRlcHRod2lzZUNvbnYyZCh0aGlzLHQsZSxuLHIsbyxhKX0sdC5wcm90b3R5cGUuc2VwYXJhYmxlQ29udjJkPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdm9pZCAwPT09byYmKG89WzEsMV0pLHZvaWQgMD09PWEmJihhPVwiTkhXQ1wiKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnNlcGFyYWJsZUNvbnYyZCh0aGlzLHQsZSxuLHIsbyxhKX0sdC5wcm90b3R5cGUuYXZnUG9vbD1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5hdmdQb29sKHRoaXMsdCxlLG4scil9LHQucHJvdG90eXBlLm1heFBvb2w9ZnVuY3Rpb24odCxlLG4scil7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQubWF4UG9vbCh0aGlzLHQsZSxuLHIpfSx0LnByb3RvdHlwZS5sb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbj1mdW5jdGlvbih0LGUsbixyKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9NSksdm9pZCAwPT09ZSYmKGU9MSksdm9pZCAwPT09biYmKG49MSksdm9pZCAwPT09ciYmKHI9LjUpLHV0LmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uKHRoaXMsdCxlLG4scil9LHQucHJvdG90eXBlLnBvb2w9ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5wb29sKHRoaXMsdCxlLG4scixvKX0sdC5wcm90b3R5cGUudmFyaWFibGU9ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT10JiYodD0hMCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxodC52YXJpYWJsZSh0aGlzLHQsZSxuKX0sdC5wcm90b3R5cGUudW5zb3J0ZWRTZWdtZW50U3VtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQudW5zb3J0ZWRTZWdtZW50U3VtKHRoaXMsdCxlKX0sdC5wcm90b3R5cGUuYmF0Y2hUb1NwYWNlTkQ9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5iYXRjaFRvU3BhY2VORCh0aGlzLHQsZSl9LHQucHJvdG90eXBlLnNwYWNlVG9CYXRjaE5EPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3BhY2VUb0JhdGNoTkQodGhpcyx0LGUpfSx0LnByb3RvdHlwZS50b3BrPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHZvaWQgMD09PXQmJih0PTEpLHZvaWQgMD09PWUmJihlPSEwKSx0aGlzLnRocm93SWZEaXNwb3NlZCgpLHV0LnRvcGsodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5zdHJpZGVkU2xpY2U9ZnVuY3Rpb24odCxlLG4scixvLGEsaSxzKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9MCksdm9pZCAwPT09byYmKG89MCksdm9pZCAwPT09YSYmKGE9MCksdm9pZCAwPT09aSYmKGk9MCksdm9pZCAwPT09cyYmKHM9MCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zdHJpZGVkU2xpY2UodGhpcyx0LGUsbixyLG8sYSxpLHMpfSx0LnByb3RvdHlwZS5kZXB0aFRvU3BhY2U9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5kZXB0aFRvU3BhY2UodGhpcyx0LGUpfSx0LnByb3RvdHlwZS5mZnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcGVjdHJhbC5mZnQodGhpcyl9LHQucHJvdG90eXBlLmlmZnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcGVjdHJhbC5pZmZ0KHRoaXMpfSx0LnByb3RvdHlwZS5yZmZ0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksdXQuc3BlY3RyYWwucmZmdCh0aGlzKX0sdC5wcm90b3R5cGUuaXJmZnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx1dC5zcGVjdHJhbC5pcmZmdCh0aGlzKX0sdH0oKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoY3QsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4hIXQmJm51bGwhPXQuZGF0YUlkJiZudWxsIT10LnNoYXBlJiZudWxsIT10LmR0eXBlfX0pO3ZhciBodD1mdW5jdGlvbih0KXtmdW5jdGlvbiBuKGUsbixyKXt2b2lkIDA9PT1uJiYobj0hMCk7dmFyIG89dC5jYWxsKHRoaXMsZS5zaGFwZSxlLmR0eXBlLG51bGwsZS5kYXRhSWQpfHx0aGlzO28udHJhaW5hYmxlPW4sby5uYW1lPXIsbnVsbD09by5uYW1lJiYoby5uYW1lPXN0KCkubmV4dFZhcmlhYmxlSWQoKS50b1N0cmluZygpKTt0cnl7c3QoKS5yZWdpc3RlclZhcmlhYmxlKG8pfWNhdGNoKHQpe3Rocm93IHN0KCkuZGlzcG9zZVRlbnNvcihvKSx0fXJldHVybiBvfXJldHVybiBlKG4sdCksbi52YXJpYWJsZT1mdW5jdGlvbih0LGUscixvKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITApLG51bGwhPW8mJm8hPT10LmR0eXBlJiYodD10LmFzVHlwZShvKSksbmV3IG4odCxlLHIpfSxuLnByb3RvdHlwZS5hc3NpZ249ZnVuY3Rpb24odCl7aWYodC5kdHlwZSE9PXRoaXMuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiZHR5cGUgb2YgdGhlIG5ldyB2YWx1ZSAoXCIrdC5kdHlwZStcIikgYW5kIHByZXZpb3VzIHZhbHVlIChcIit0aGlzLmR0eXBlK1wiKSBtdXN0IG1hdGNoXCIpO2lmKCF5KHQuc2hhcGUsdGhpcy5zaGFwZSkpdGhyb3cgbmV3IEVycm9yKFwic2hhcGUgb2YgdGhlIG5ldyB2YWx1ZSAoXCIrdC5zaGFwZStcIikgYW5kIHByZXZpb3VzIHZhbHVlIChcIit0aGlzLnNoYXBlK1wiKSBtdXN0IG1hdGNoXCIpO3N0KCkuZGlzcG9zZVRlbnNvcih0aGlzKSx0aGlzLmRhdGFJZD10LmRhdGFJZCxzdCgpLnJlZ2lzdGVyVGVuc29yKHRoaXMpfSxuLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7c3QoKS5kaXNwb3NlVmFyaWFibGUodGhpcyksdGhpcy5pc0Rpc3Bvc2VkSW50ZXJuYWw9ITB9LG59KGN0KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoaHQsU3ltYm9sLmhhc0luc3RhbmNlLHt2YWx1ZTpmdW5jdGlvbih0KXtyZXR1cm4gdCBpbnN0YW5jZW9mIGN0JiZudWxsIT10LmFzc2lnbiYmdC5hc3NpZ24gaW5zdGFuY2VvZiBGdW5jdGlvbn19KTt2YXIgcHQsZnQsZHQsdnQsbXQsZ3Q9aHQudmFyaWFibGU7IWZ1bmN0aW9uKHQpe3QuUjA9XCJSMFwiLHQuUjE9XCJSMVwiLHQuUjI9XCJSMlwiLHQuUjM9XCJSM1wiLHQuUjQ9XCJSNFwiLHQuUjU9XCJSNVwiLHQuUjY9XCJSNlwifShwdHx8KHB0PXt9KSksZnVuY3Rpb24odCl7dC5mbG9hdDMyPVwiZmxvYXQzMlwiLHQuaW50MzI9XCJpbnQzMlwiLHQuYm9vbD1cImludDMyXCIsdC5jb21wbGV4NjQ9XCJjb21wbGV4NjRcIn0oZnR8fChmdD17fSkpLGZ1bmN0aW9uKHQpe3QuZmxvYXQzMj1cImZsb2F0MzJcIix0LmludDMyPVwiaW50MzJcIix0LmJvb2w9XCJib29sXCIsdC5jb21wbGV4NjQ9XCJjb21wbGV4NjRcIn0oZHR8fChkdD17fSkpLGZ1bmN0aW9uKHQpe3QuZmxvYXQzMj1cImZsb2F0MzJcIix0LmludDMyPVwiZmxvYXQzMlwiLHQuYm9vbD1cImZsb2F0MzJcIix0LmNvbXBsZXg2ND1cImNvbXBsZXg2NFwifSh2dHx8KHZ0PXt9KSksZnVuY3Rpb24odCl7dC5mbG9hdDMyPVwiY29tcGxleDY0XCIsdC5pbnQzMj1cImNvbXBsZXg2NFwiLHQuYm9vbD1cImNvbXBsZXg2NFwiLHQuY29tcGxleDY0PVwiY29tcGxleDY0XCJ9KG10fHwobXQ9e30pKTt2YXIgeXQ9e2Zsb2F0MzI6dnQsaW50MzI6ZnQsYm9vbDpkdCxjb21wbGV4NjQ6bXR9O2Z1bmN0aW9uIHh0KHQsZSl7aWYoXCJzdHJpbmdcIj09PXR8fFwic3RyaW5nXCI9PT1lKXtpZihcInN0cmluZ1wiPT09dCYmXCJzdHJpbmdcIj09PWUpcmV0dXJuXCJzdHJpbmdcIjt0aHJvdyBuZXcgRXJyb3IoXCJDYW4gbm90IHVwY2FzdCBcIit0K1wiIHdpdGggXCIrZSl9cmV0dXJuIHl0W3RdW2VdfWZ1bmN0aW9uIGJ0KHQpe3JldHVybiB4dCh0LFwiaW50MzJcIil9ZnVuY3Rpb24gd3QodCxlKXtpZih0LmR0eXBlPT09ZS5kdHlwZSlyZXR1cm5bdCxlXTt2YXIgbj14dCh0LmR0eXBlLGUuZHR5cGUpO3JldHVyblt0LmNhc3QobiksZS5jYXN0KG4pXX1mdW5jdGlvbiBDdCh0LGUpe2YodC5kdHlwZT09PWUuZHR5cGUsZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBkdHlwZXMgb2YgdGhlIGZpcnN0KFwiK3QuZHR5cGUrXCIpIGFuZCBzZWNvbmQoXCIrZS5kdHlwZStcIikgaW5wdXQgbXVzdCBtYXRjaFwifSl9ZnVuY3Rpb24gRXQodCl7dmFyIGU9W107cmV0dXJuIGZ1bmN0aW9uIHQoZSxuLHIpe2lmKG51bGw9PWUpcmV0dXJuO2lmKGUgaW5zdGFuY2VvZiBjdClyZXR1cm4gdm9pZCBuLnB1c2goZSk7aWYobz1lLCFBcnJheS5pc0FycmF5KG8pJiZcIm9iamVjdFwiIT10eXBlb2YgbylyZXR1cm47dmFyIG87dmFyIGE9ZTtmb3IodmFyIGkgaW4gYSl7dmFyIHM9YVtpXTtyLmhhcyhzKXx8KHIuYWRkKHMpLHQocyxuLHIpKX19KHQsZSxuZXcgU2V0KSxlfXZhciBSdCxJdD1PYmplY3QuZnJlZXplKHttYWtlVHlwZXNNYXRjaDp3dCxhc3NlcnRUeXBlc01hdGNoOkN0LGlzVGVuc29ySW5MaXN0OmZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspaWYoZVtuXS5pZD09PXQuaWQpcmV0dXJuITA7cmV0dXJuITF9LGdldFRlbnNvcnNJbkNvbnRhaW5lcjpFdH0pLGt0PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMucmVnaXN0ZXJlZFZhcmlhYmxlcz17fSx0aGlzLm5leHRUYXBlTm9kZUlkPTAsdGhpcy5udW1CeXRlcz0wLHRoaXMubnVtVGVuc29ycz0wLHRoaXMubnVtU3RyaW5nVGVuc29ycz0wLHRoaXMubnVtRGF0YUJ1ZmZlcnM9MCx0aGlzLmdyYWRpZW50RGVwdGg9MCx0aGlzLmtlcm5lbERlcHRoPTAsdGhpcy5zY29wZVN0YWNrPVtdLHRoaXMubmV4dFNjb3BlSWQ9MCx0aGlzLnRlbnNvckluZm89bmV3IFdlYWtNYXAsdGhpcy5wcm9maWxpbmc9ITEsdGhpcy5hY3RpdmVQcm9maWxlPXtuZXdCeXRlczowLG5ld1RlbnNvcnM6MCxwZWFrQnl0ZXM6MCxrZXJuZWxzOltdLHJlc3VsdDpudWxsfX1yZXR1cm4gdC5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe2Zvcih2YXIgdCBpbiB0aGlzLnJlZ2lzdGVyZWRWYXJpYWJsZXMpdGhpcy5yZWdpc3RlcmVkVmFyaWFibGVzW3RdLmRpc3Bvc2UoKX0sdH0oKSxOdD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5FTlY9dCx0aGlzLnJlZ2lzdHJ5PXt9LHRoaXMucmVnaXN0cnlGYWN0b3J5PXt9LHRoaXMucGVuZGluZ0JhY2tlbmRJbml0SWQ9MCx0aGlzLnN0YXRlPW5ldyBrdH1yZXR1cm4gdC5wcm90b3R5cGUucmVhZHk9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdCxlLG47cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKG51bGwhPXRoaXMucGVuZGluZ0JhY2tlbmRJbml0KXJldHVyblsyLHRoaXMucGVuZGluZ0JhY2tlbmRJbml0LnRoZW4oZnVuY3Rpb24oKXt9KV07aWYobnVsbCE9dGhpcy5iYWNrZW5kSW5zdGFuY2UpcmV0dXJuWzJdO3Q9dGhpcy5nZXRTb3J0ZWRCYWNrZW5kcygpLGU9MCxyLmxhYmVsPTE7Y2FzZSAxOnJldHVybiBlPHQubGVuZ3RoPyhuPXRbZV0sWzQsdGhpcy5pbml0aWFsaXplQmFja2VuZChuKS5zdWNjZXNzXSk6WzMsNV07Y2FzZSAyOnJldHVybiByLnNlbnQoKT9bNCx0aGlzLnNldEJhY2tlbmQobildOlszLDRdO2Nhc2UgMzpyZXR1cm4gci5zZW50KCksWzJdO2Nhc2UgNDpyZXR1cm4gZSsrLFszLDFdO2Nhc2UgNTp0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgaW5pdGlhbGl6ZSBhbnkgYmFja2VuZHMsIGFsbCBiYWNrZW5kIGluaXRpYWxpemF0aW9ucyBmYWlsZWQuXCIpfX0pfSl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LnByb3RvdHlwZSxcImJhY2tlbmRcIix7Z2V0OmZ1bmN0aW9uKCl7aWYobnVsbCE9dGhpcy5wZW5kaW5nQmFja2VuZEluaXQpdGhyb3cgbmV3IEVycm9yKFwiQmFja2VuZCAnXCIrdGhpcy5iYWNrZW5kTmFtZStcIicgaGFzIG5vdCB5ZXQgYmVlbiBpbml0aWFsaXplZC4gTWFrZSBzdXJlIHRvIGF3YWl0IHRmLnJlYWR5KCkgYmVmb3JlIGNhbGxpbmcgb3RoZXIgbWV0aG9kc1wiKTtpZihudWxsPT10aGlzLmJhY2tlbmRJbnN0YW5jZSl7dmFyIHQ9dGhpcy5pbml0aWFsaXplQmFja2VuZHNBbmRSZXR1cm5CZXN0KCksZT10Lm5hbWU7aWYodC5hc3luY0luaXQpdGhyb3cgbmV3IEVycm9yKFwiVGhlIGhpZ2hlc3QgcHJpb3JpdHkgYmFja2VuZCAnXCIrZStcIicgaGFzIG5vdCB5ZXQgYmVlbiBpbml0aWFsaXplZC4gTWFrZSBzdXJlIHRvIGF3YWl0IHRmLnJlYWR5KCkgYmVmb3JlIGNhbGxpbmcgb3RoZXIgbWV0aG9kc1wiKTt0aGlzLnNldEJhY2tlbmQoZSl9cmV0dXJuIHRoaXMuYmFja2VuZEluc3RhbmNlfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmJhY2tlbmROYW1lcz1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLnJlZ2lzdHJ5RmFjdG9yeSl9LHQucHJvdG90eXBlLmZpbmRCYWNrZW5kPWZ1bmN0aW9uKHQpe2lmKCEodCBpbiB0aGlzLnJlZ2lzdHJ5KSl7aWYoISh0IGluIHRoaXMucmVnaXN0cnlGYWN0b3J5KSlyZXR1cm4gbnVsbDtpZih0aGlzLmluaXRpYWxpemVCYWNrZW5kKHQpLmFzeW5jSW5pdClyZXR1cm4gbnVsbH1yZXR1cm4gdGhpcy5yZWdpc3RyeVt0XX0sdC5wcm90b3R5cGUuZmluZEJhY2tlbmRGYWN0b3J5PWZ1bmN0aW9uKHQpe3JldHVybiB0IGluIHRoaXMucmVnaXN0cnlGYWN0b3J5P3RoaXMucmVnaXN0cnlGYWN0b3J5W3RdLmZhY3Rvcnk6bnVsbH0sdC5wcm90b3R5cGUucmVnaXN0ZXJCYWNrZW5kPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09biYmKG49MSksdCBpbiB0aGlzLnJlZ2lzdHJ5RmFjdG9yeT8oY29uc29sZS53YXJuKHQrXCIgYmFja2VuZCB3YXMgYWxyZWFkeSByZWdpc3RlcmVkLiBSZXVzaW5nIGV4aXN0aW5nIGJhY2tlbmQgZmFjdG9yeS5cIiksITEpOih0aGlzLnJlZ2lzdHJ5RmFjdG9yeVt0XT17ZmFjdG9yeTplLHByaW9yaXR5Om59LCEwKX0sdC5wcm90b3R5cGUuc2V0QmFja2VuZD1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuLG87cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKG51bGw9PXRoaXMucmVnaXN0cnlGYWN0b3J5W3RdKXRocm93IG5ldyBFcnJvcihcIkJhY2tlbmQgbmFtZSAnXCIrdCtcIicgbm90IGZvdW5kIGluIHJlZ2lzdHJ5XCIpO3JldHVybiB0aGlzLmJhY2tlbmROYW1lPXQsbnVsbCE9dGhpcy5yZWdpc3RyeVt0XT9bMyw0XToodGhpcy5iYWNrZW5kSW5zdGFuY2U9bnVsbCxlPXRoaXMuaW5pdGlhbGl6ZUJhY2tlbmQodCksbj1lLnN1Y2Nlc3MsZS5hc3luY0luaXQ/WzQsbl06WzMsMl0pO2Nhc2UgMTpyZXR1cm4gbz1yLnNlbnQoKSxbMywzXTtjYXNlIDI6bz1uLHIubGFiZWw9MztjYXNlIDM6aWYoIW8pcmV0dXJuWzIsITFdO3IubGFiZWw9NDtjYXNlIDQ6cmV0dXJuIHRoaXMuYmFja2VuZEluc3RhbmNlPXRoaXMucmVnaXN0cnlbdF0sdGhpcy5wcm9maWxlcj1uZXcgUSh0aGlzLmJhY2tlbmRJbnN0YW5jZSksWzIsITBdfX0pfSl9LHQucHJvdG90eXBlLmluaXRpYWxpemVCYWNrZW5kPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMsbj10aGlzLnJlZ2lzdHJ5RmFjdG9yeVt0XTtpZihudWxsPT1uKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBpbml0aWFsaXplIGJhY2tlbmQgXCIrdCtcIiwgbm8gcmVnaXN0cmF0aW9uIGZvdW5kLlwiKTt0cnl7dmFyIHI9bi5mYWN0b3J5KCk7aWYoUHJvbWlzZS5yZXNvbHZlKHIpPT09cil7dmFyIG89Kyt0aGlzLnBlbmRpbmdCYWNrZW5kSW5pdElkLGE9ci50aGVuKGZ1bmN0aW9uKG4pe3JldHVybiEobzxlLnBlbmRpbmdCYWNrZW5kSW5pdElkKSYmKGUucmVnaXN0cnlbdF09bixlLnBlbmRpbmdCYWNrZW5kSW5pdD1udWxsLCEwKX0pLmNhdGNoKGZ1bmN0aW9uKG4pe3JldHVybiEobzxlLnBlbmRpbmdCYWNrZW5kSW5pdElkKSYmKGUucGVuZGluZ0JhY2tlbmRJbml0PW51bGwsY29uc29sZS53YXJuKFwiSW5pdGlhbGl6YXRpb24gb2YgYmFja2VuZCBcIit0K1wiIGZhaWxlZFwiKSxjb25zb2xlLndhcm4obi5zdGFja3x8bi5tZXNzYWdlKSwhMSl9KTtyZXR1cm4gdGhpcy5wZW5kaW5nQmFja2VuZEluaXQ9YSx7c3VjY2VzczphLGFzeW5jSW5pdDohMH19cmV0dXJuIHRoaXMucmVnaXN0cnlbdF09cix7c3VjY2VzczohMCxhc3luY0luaXQ6ITF9fWNhdGNoKGUpe3JldHVybiBjb25zb2xlLndhcm4oXCJJbml0aWFsaXphdGlvbiBvZiBiYWNrZW5kIFwiK3QrXCIgZmFpbGVkXCIpLGNvbnNvbGUud2FybihlLnN0YWNrfHxlLm1lc3NhZ2UpLHtzdWNjZXNzOiExLGFzeW5jSW5pdDohMX19fSx0LnByb3RvdHlwZS5yZW1vdmVCYWNrZW5kPWZ1bmN0aW9uKHQpe2lmKCEodCBpbiB0aGlzLnJlZ2lzdHJ5RmFjdG9yeSkpdGhyb3cgbmV3IEVycm9yKHQrXCIgYmFja2VuZCBub3QgZm91bmQgaW4gcmVnaXN0cnlcIik7dGhpcy5iYWNrZW5kTmFtZT09PXQmJm51bGwhPXRoaXMucGVuZGluZ0JhY2tlbmRJbml0JiZ0aGlzLnBlbmRpbmdCYWNrZW5kSW5pdElkKyssdCBpbiB0aGlzLnJlZ2lzdHJ5JiYodGhpcy5yZWdpc3RyeVt0XS5kaXNwb3NlKCksZGVsZXRlIHRoaXMucmVnaXN0cnlbdF0pLGRlbGV0ZSB0aGlzLnJlZ2lzdHJ5RmFjdG9yeVt0XSx0aGlzLmJhY2tlbmROYW1lPT09dCYmKHRoaXMucGVuZGluZ0JhY2tlbmRJbml0PW51bGwsdGhpcy5iYWNrZW5kTmFtZT1udWxsLHRoaXMuYmFja2VuZEluc3RhbmNlPW51bGwpfSx0LnByb3RvdHlwZS5nZXRTb3J0ZWRCYWNrZW5kcz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoMD09PU9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnlGYWN0b3J5KS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiTm8gYmFja2VuZCBmb3VuZCBpbiByZWdpc3RyeS5cIik7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMucmVnaXN0cnlGYWN0b3J5KS5zb3J0KGZ1bmN0aW9uKGUsbil7cmV0dXJuIHQucmVnaXN0cnlGYWN0b3J5W25dLnByaW9yaXR5LXQucmVnaXN0cnlGYWN0b3J5W2VdLnByaW9yaXR5fSl9LHQucHJvdG90eXBlLmluaXRpYWxpemVCYWNrZW5kc0FuZFJldHVybkJlc3Q9ZnVuY3Rpb24oKXtmb3IodmFyIHQ9dGhpcy5nZXRTb3J0ZWRCYWNrZW5kcygpLGU9MDtlPHQubGVuZ3RoO2UrKyl7dmFyIG49dFtlXSxyPXRoaXMuaW5pdGlhbGl6ZUJhY2tlbmQobiksbz1yLnN1Y2Nlc3MsYT1yLmFzeW5jSW5pdDtpZihhfHxvKXJldHVybntuYW1lOm4sYXN5bmNJbml0OmF9fXRocm93IG5ldyBFcnJvcihcIkNvdWxkIG5vdCBpbml0aWFsaXplIGFueSBiYWNrZW5kcywgYWxsIGJhY2tlbmQgaW5pdGlhbGl6YXRpb25zIGZhaWxlZC5cIil9LHQucHJvdG90eXBlLm1vdmVEYXRhPWZ1bmN0aW9uKHQsZSl7dGhpcy53cml0ZSh0LGUsdGhpcy5yZWFkU3luYyhlKSl9LHQucHJvdG90eXBlLnRpZHk9ZnVuY3Rpb24odCxlKXt2YXIgbixyPXRoaXMsbz1udWxsO2lmKG51bGw9PWUpe2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIHQpdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYSBmdW5jdGlvbiB0byB0aWR5KClcIik7ZT10fWVsc2V7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHQmJiEodCBpbnN0YW5jZW9mIFN0cmluZykpdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBjYWxsaW5nIHdpdGggdHdvIGFyZ3VtZW50cywgdGhlIGZpcnN0IGFyZ3VtZW50IHRvIHRpZHkoKSBtdXN0IGJlIGEgc3RyaW5nXCIpO2lmKFwiZnVuY3Rpb25cIiE9dHlwZW9mIGUpdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBjYWxsaW5nIHdpdGggdHdvIGFyZ3VtZW50cywgdGhlIDJuZCBhcmd1bWVudCB0byB0aWR5KCkgbXVzdCBiZSBhIGZ1bmN0aW9uXCIpO289dH1yZXR1cm4gdGhpcy5zY29wZWRSdW4oZnVuY3Rpb24oKXtyZXR1cm4gci5zdGFydFNjb3BlKG8pfSxmdW5jdGlvbigpe3JldHVybiByLmVuZFNjb3BlKG4pfSxmdW5jdGlvbigpe3JldHVybihuPWUoKSlpbnN0YW5jZW9mIFByb21pc2UmJmNvbnNvbGUuZXJyb3IoXCJDYW5ub3QgcmV0dXJuIGEgUHJvbWlzZSBpbnNpZGUgb2YgdGlkeS5cIiksbn0pfSx0LnByb3RvdHlwZS5zY29wZWRSdW49ZnVuY3Rpb24odCxlLG4pe3QoKTt0cnl7dmFyIHI9bigpO3JldHVybiBlKCkscn1jYXRjaCh0KXt0aHJvdyBlKCksdH19LHQucHJvdG90eXBlLm5leHRUZW5zb3JJZD1mdW5jdGlvbigpe3JldHVybiB0Lm5leHRUZW5zb3JJZCsrfSx0LnByb3RvdHlwZS5uZXh0VmFyaWFibGVJZD1mdW5jdGlvbigpe3JldHVybiB0Lm5leHRWYXJpYWJsZUlkKyt9LHQucHJvdG90eXBlLmNsb25lPWZ1bmN0aW9uKHQpe3ZhciBlPWN0Lm1ha2UodC5zaGFwZSx7ZGF0YUlkOnQuZGF0YUlkfSx0LmR0eXBlKTtyZXR1cm4gdGhpcy5hZGRUYXBlTm9kZShbdF0sZSxmdW5jdGlvbih0KXtyZXR1cm5bdC50b0Zsb2F0KCldfSksZX0sdC5wcm90b3R5cGUucnVuS2VybmVsPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcixvPXRoaXMsYT1bXSxpPXRoaXMuaXNUYXBlT24oKSxzPW51bGwhPXRoaXMuc3RhdGUuYWN0aXZlU2NvcGU/dGhpcy5zdGF0ZS5hY3RpdmVTY29wZS5uYW1lOlwiXCIsdT1mdW5jdGlvbih0KXtpJiYoYT10Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gby5rZWVwKG8uY2xvbmUodCkpfSkpfSxsPXRoaXMuc3RhdGUubnVtQnl0ZXMsYz10aGlzLnN0YXRlLm51bVRlbnNvcnM7aWYodGhpcy5zY29wZWRSdW4oZnVuY3Rpb24oKXtyZXR1cm4gby5zdGF0ZS5rZXJuZWxEZXB0aCsrfSxmdW5jdGlvbigpe3JldHVybiBvLnN0YXRlLmtlcm5lbERlcHRoLS19LGZ1bmN0aW9uKCl7cj1vLkVOVi5nZXRCb29sKFwiREVCVUdcIik/by5wcm9maWxlci5wcm9maWxlS2VybmVsKHMsZSxmdW5jdGlvbigpe3JldHVybiB0KG8uYmFja2VuZCx1KX0pOnQoby5iYWNrZW5kLHUpfSksaSl7dmFyIGg9e2lkOnRoaXMuc3RhdGUubmV4dFRhcGVOb2RlSWQrKyxuYW1lOnMsaW5wdXRzOmUsb3V0cHV0czpBcnJheS5pc0FycmF5KHIpP3I6W3JdLHNhdmVkOmF9O251bGwhPW4mJihoLmdyYWRpZW50PWZ1bmN0aW9uKHQpe3JldHVybiBuKHQsYSl9KSx0aGlzLnN0YXRlLmFjdGl2ZVRhcGUucHVzaChoKX1yZXR1cm4gdGhpcy5zdGF0ZS5wcm9maWxpbmcmJnRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZS5rZXJuZWxzLnB1c2goe25hbWU6cyxieXRlc0FkZGVkOnRoaXMuc3RhdGUubnVtQnl0ZXMtbCx0b3RhbEJ5dGVzU25hcHNob3Q6dGhpcy5zdGF0ZS5udW1CeXRlcyx0ZW5zb3JzQWRkZWQ6dGhpcy5zdGF0ZS5udW1UZW5zb3JzLWMsdG90YWxUZW5zb3JzU25hcHNob3Q6dGhpcy5zdGF0ZS5udW1UZW5zb3JzLGlucHV0U2hhcGVzOk9iamVjdC5rZXlzKGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZVt0XS5zaGFwZX0pLG91dHB1dFNoYXBlOkFycmF5LmlzQXJyYXkocik/ci5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KTpyLnNoYXBlfSkscn0sdC5wcm90b3R5cGUucmVnaXN0ZXJUZW5zb3I9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnN0YXRlLnRlbnNvckluZm8uaGFzKHQuZGF0YUlkKT90aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KHQuZGF0YUlkKS5yZWZDb3VudDowO2lmKHRoaXMuc3RhdGUubnVtVGVuc29ycysrLFwic3RyaW5nXCI9PT10LmR0eXBlJiZ0aGlzLnN0YXRlLm51bVN0cmluZ1RlbnNvcnMrKywwPT09bil7dGhpcy5zdGF0ZS5udW1EYXRhQnVmZmVycysrO3ZhciByPTA7XCJjb21wbGV4NjRcIiE9PXQuZHR5cGUmJlwic3RyaW5nXCIhPT10LmR0eXBlJiYocj10LnNpemUqTyh0LmR0eXBlKSksdGhpcy5zdGF0ZS50ZW5zb3JJbmZvLnNldCh0LmRhdGFJZCx7YmFja2VuZDpudWxsIT1lP2U6dGhpcy5iYWNrZW5kLGR0eXBlOnQuZHR5cGUsc2hhcGU6dC5zaGFwZSxieXRlczpyLHJlZkNvdW50OjB9KSx0aGlzLnN0YXRlLm51bUJ5dGVzKz1yLG51bGwhPWU/ZS5yZWdpc3Rlcih0LmRhdGFJZCx0LnNoYXBlLHQuZHR5cGUpOnRoaXMuYmFja2VuZC5yZWdpc3Rlcih0LmRhdGFJZCx0LnNoYXBlLHQuZHR5cGUpfXRoaXMuc3RhdGUudGVuc29ySW5mby5nZXQodC5kYXRhSWQpLnJlZkNvdW50KyssdCBpbnN0YW5jZW9mIGh0fHx0aGlzLnRyYWNrKHQpfSx0LnByb3RvdHlwZS5yZWdpc3RlclZhcmlhYmxlPWZ1bmN0aW9uKHQpe2lmKG51bGwhPXRoaXMuc3RhdGUucmVnaXN0ZXJlZFZhcmlhYmxlc1t0Lm5hbWVdKXRocm93IG5ldyBFcnJvcihcIlZhcmlhYmxlIHdpdGggbmFtZSBcIit0Lm5hbWUrXCIgd2FzIGFscmVhZHkgcmVnaXN0ZXJlZFwiKTt0aGlzLnN0YXRlLnJlZ2lzdGVyZWRWYXJpYWJsZXNbdC5uYW1lXT10fSx0LnByb3RvdHlwZS5kaXNwb3NlVGVuc29yPWZ1bmN0aW9uKHQpe2lmKHRoaXMuc3RhdGUudGVuc29ySW5mby5oYXModC5kYXRhSWQpKXt0aGlzLnN0YXRlLm51bVRlbnNvcnMtLSxcInN0cmluZ1wiPT09dC5kdHlwZSYmdGhpcy5zdGF0ZS5udW1TdHJpbmdUZW5zb3JzLS07dmFyIGU9dGhpcy5zdGF0ZS50ZW5zb3JJbmZvLmdldCh0LmRhdGFJZCk7ZS5yZWZDb3VudDw9MT8oXCJjb21wbGV4NjRcIiE9PXQuZHR5cGUmJih0aGlzLnN0YXRlLm51bUJ5dGVzLT1lLmJ5dGVzKSx0aGlzLnN0YXRlLm51bURhdGFCdWZmZXJzLS0sZS5iYWNrZW5kLmRpc3Bvc2VEYXRhKHQuZGF0YUlkKSx0aGlzLnN0YXRlLnRlbnNvckluZm8uZGVsZXRlKHQuZGF0YUlkKSk6dGhpcy5zdGF0ZS50ZW5zb3JJbmZvLmdldCh0LmRhdGFJZCkucmVmQ291bnQtLX19LHQucHJvdG90eXBlLmRpc3Bvc2VWYXJpYWJsZXM9ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5zdGF0ZS5yZWdpc3RlcmVkVmFyaWFibGVzKXt2YXIgZT10aGlzLnN0YXRlLnJlZ2lzdGVyZWRWYXJpYWJsZXNbdF07dGhpcy5kaXNwb3NlVmFyaWFibGUoZSl9fSx0LnByb3RvdHlwZS5kaXNwb3NlVmFyaWFibGU9ZnVuY3Rpb24odCl7dGhpcy5kaXNwb3NlVGVuc29yKHQpLG51bGwhPXRoaXMuc3RhdGUucmVnaXN0ZXJlZFZhcmlhYmxlc1t0Lm5hbWVdJiZkZWxldGUgdGhpcy5zdGF0ZS5yZWdpc3RlcmVkVmFyaWFibGVzW3QubmFtZV19LHQucHJvdG90eXBlLm1lbW9yeT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuYmFja2VuZC5tZW1vcnkoKTtyZXR1cm4gdC5udW1UZW5zb3JzPXRoaXMuc3RhdGUubnVtVGVuc29ycyx0Lm51bURhdGFCdWZmZXJzPXRoaXMuc3RhdGUubnVtRGF0YUJ1ZmZlcnMsdC5udW1CeXRlcz10aGlzLnN0YXRlLm51bUJ5dGVzLHRoaXMuc3RhdGUubnVtU3RyaW5nVGVuc29ycz4wJiYodC51bnJlbGlhYmxlPSEwLG51bGw9PXQucmVhc29ucyYmKHQucmVhc29ucz1bXSksdC5yZWFzb25zLnB1c2goXCJNZW1vcnkgdXNhZ2UgYnkgc3RyaW5nIHRlbnNvcnMgaXMgYXBwcm94aW1hdGUgKDIgYnl0ZXMgcGVyIGNoYXJhY3RlcilcIikpLHR9LHQucHJvdG90eXBlLnByb2ZpbGU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbjtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3JldHVybiB0aGlzLnN0YXRlLnByb2ZpbGluZz0hMCxlPXRoaXMuc3RhdGUubnVtQnl0ZXMsbj10aGlzLnN0YXRlLm51bVRlbnNvcnMsdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLmtlcm5lbHM9W10sdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLnJlc3VsdD10KCksdGhpcy5zdGF0ZS5wcm9maWxpbmc9ITEsdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLnBlYWtCeXRlcz1NYXRoLm1heC5hcHBseShNYXRoLHRoaXMuc3RhdGUuYWN0aXZlUHJvZmlsZS5rZXJuZWxzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC50b3RhbEJ5dGVzU25hcHNob3R9KSksdGhpcy5zdGF0ZS5hY3RpdmVQcm9maWxlLm5ld0J5dGVzPXRoaXMuc3RhdGUubnVtQnl0ZXMtZSx0aGlzLnN0YXRlLmFjdGl2ZVByb2ZpbGUubmV3VGVuc29ycz10aGlzLnN0YXRlLm51bVRlbnNvcnMtbixbMix0aGlzLnN0YXRlLmFjdGl2ZVByb2ZpbGVdfSl9KX0sdC5wcm90b3R5cGUuaXNUYXBlT249ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGF0ZS5ncmFkaWVudERlcHRoPjAmJjA9PT10aGlzLnN0YXRlLmtlcm5lbERlcHRofSx0LnByb3RvdHlwZS5hZGRUYXBlTm9kZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9e307dC5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7cltlXT10fSk7dmFyIG89e2lkOnRoaXMuc3RhdGUubmV4dFRhcGVOb2RlSWQrKyxuYW1lOnRoaXMuc3RhdGUuYWN0aXZlU2NvcGUubmFtZSxpbnB1dHM6cixvdXRwdXRzOltlXSxncmFkaWVudDpmdW5jdGlvbih0KXt2YXIgZT1uKHQpLHI9e307cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbih0LGUpe3JbZV09ZnVuY3Rpb24oKXtyZXR1cm4gdH19KSxyfX07dGhpcy5zdGF0ZS5hY3RpdmVUYXBlLnB1c2gobyl9LHQucHJvdG90eXBlLmtlZXA9ZnVuY3Rpb24odCl7cmV0dXJuIHQua2VwdD0hMCx0fSx0LnByb3RvdHlwZS5zdGFydFRhcGU9ZnVuY3Rpb24oKXswPT09dGhpcy5zdGF0ZS5ncmFkaWVudERlcHRoJiYodGhpcy5zdGF0ZS5hY3RpdmVUYXBlPVtdKSx0aGlzLnN0YXRlLmdyYWRpZW50RGVwdGgrK30sdC5wcm90b3R5cGUuZW5kVGFwZT1mdW5jdGlvbigpe3RoaXMuc3RhdGUuZ3JhZGllbnREZXB0aC0tfSx0LnByb3RvdHlwZS5zdGFydFNjb3BlPWZ1bmN0aW9uKHQpe3ZhciBlPXt0cmFjazpbXSxuYW1lOlwidW5uYW1lZCBzY29wZVwiLGlkOnRoaXMuc3RhdGUubmV4dFNjb3BlSWQrK307dCYmKGUubmFtZT10KSx0aGlzLnN0YXRlLnNjb3BlU3RhY2sucHVzaChlKSx0aGlzLnN0YXRlLmFjdGl2ZVNjb3BlPWV9LHQucHJvdG90eXBlLmVuZFNjb3BlPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLG49RXQodCkscj1uZXcgU2V0KG4ubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlkfSkpLG89MDtvPHRoaXMuc3RhdGUuYWN0aXZlU2NvcGUudHJhY2subGVuZ3RoO28rKyl7dmFyIGE9dGhpcy5zdGF0ZS5hY3RpdmVTY29wZS50cmFja1tvXTthLmtlcHR8fHIuaGFzKGEuaWQpfHxhLmRpc3Bvc2UoKX12YXIgaT10aGlzLnN0YXRlLnNjb3BlU3RhY2sucG9wKCk7dGhpcy5zdGF0ZS5hY3RpdmVTY29wZT0wPT09dGhpcy5zdGF0ZS5zY29wZVN0YWNrLmxlbmd0aD9udWxsOnRoaXMuc3RhdGUuc2NvcGVTdGFja1t0aGlzLnN0YXRlLnNjb3BlU3RhY2subGVuZ3RoLTFdLG4uZm9yRWFjaChmdW5jdGlvbih0KXt0LmtlcHR8fHQuc2NvcGVJZCE9PWkuaWR8fGUudHJhY2sodCl9KX0sdC5wcm90b3R5cGUuZ3JhZGllbnRzPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPXRoaXM7aWYodm9pZCAwPT09ciYmKHI9ITEpLGYoZS5sZW5ndGg+MCxmdW5jdGlvbigpe3JldHVyblwiZ3JhZGllbnRzKCkgcmVjZWl2ZWQgYW4gZW1wdHkgbGlzdCBvZiB4cy5cIn0pLG51bGwhPW4mJlwiZmxvYXQzMlwiIT09bi5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJkeSBtdXN0IGhhdmUgJ2Zsb2F0MzInIGR0eXBlLCBidXQgaGFzICdcIituLmR0eXBlK1wiJ1wiKTt2YXIgYT10aGlzLnNjb3BlZFJ1bihmdW5jdGlvbigpe3JldHVybiBvLnN0YXJ0VGFwZSgpfSxmdW5jdGlvbigpe3JldHVybiBvLmVuZFRhcGUoKX0sZnVuY3Rpb24oKXtyZXR1cm4gby50aWR5KFwiZm9yd2FyZFwiLHQpfSk7ZihhIGluc3RhbmNlb2YgY3QsZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSByZXN1bHQgeSByZXR1cm5lZCBieSBmKCkgbXVzdCBiZSBhIHRlbnNvci5cIn0pO3ZhciBpPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9e30sbz17fSxhPTA7YTxlLmxlbmd0aDthKyspcltlW2FdLmlkXT0hMDtmb3IoYT0wO2E8dC5sZW5ndGg7YSsrKXt2YXIgaT0oZD10W2FdKS5pbnB1dHM7Zm9yKHZhciBzIGluIGkpe2Zvcih2YXIgdT1pW3NdLGw9ITEsYz0wO2M8ZS5sZW5ndGg7YysrKWlmKHJbdS5pZF0pe2Qub3V0cHV0cy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiByW3QuaWRdPSEwfSksbD0hMCxvW2QuaWRdPSEwO2JyZWFrfWlmKGwpYnJlYWt9fXZhciBoPXt9O2hbbi5pZF09ITA7dmFyIHA9e307Zm9yKGE9dC5sZW5ndGgtMTthPj0wO2EtLSlmb3IoaT0oZD10W2FdKS5pbnB1dHMsYz0wO2M8ZC5vdXRwdXRzLmxlbmd0aDtjKyspaWYoaFtkLm91dHB1dHNbY10uaWRdKXtmb3IodmFyIHMgaW4gaSloW2lbc10uaWRdPSEwLHBbZC5pZF09ITA7YnJlYWt9dmFyIGY9W107Zm9yKGE9MDthPHQubGVuZ3RoO2ErKyl7dmFyIGQ7aWYob1soZD10W2FdKS5pZF0mJnBbZC5pZF0pe3ZhciB2PXt9O2Zvcih2YXIgcyBpbiBkLmlucHV0cyl7dmFyIG09ZC5pbnB1dHNbc107clttLmlkXSYmKHZbc109bSl9dmFyIGc9T2JqZWN0LmFzc2lnbih7fSxkKTtnLmlucHV0cz12LGcub3V0cHV0cz1kLm91dHB1dHMsZi5wdXNoKGcpfX1yZXR1cm4gZn0odGhpcy5zdGF0ZS5hY3RpdmVUYXBlLGUsYSk7aWYoIXImJjA9PT1pLmxlbmd0aCYmZS5sZW5ndGg+MCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29tcHV0ZSBncmFkaWVudCBvZiB5PWYoeCkgd2l0aCByZXNwZWN0IHRvIHguIE1ha2Ugc3VyZSB0aGF0IHRoZSBmIHlvdSBwYXNzZWQgZW5jbG9zZXMgYWxsIG9wZXJhdGlvbnMgdGhhdCBsZWFkIGZyb20geCB0byB5LlwiKTtyZXR1cm4gdGhpcy50aWR5KFwiYmFja3dhcmRcIixmdW5jdGlvbigpe3ZhciB0LHIscz17fTtzW2EuaWRdPW51bGw9PW4/KHQ9YS5zaGFwZSxyPUgoZyh0KSxcImZsb2F0MzJcIiksY3QubWFrZSh0LHt2YWx1ZXM6cn0pKTpuLGZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9ZnVuY3Rpb24ocil7dmFyIG89ZVtyXSxhPVtdO2lmKG8ub3V0cHV0cy5mb3JFYWNoKGZ1bmN0aW9uKGUpe3ZhciBuPXRbZS5pZF07aWYobnVsbCE9bilhLnB1c2gobik7ZWxzZXt2YXIgcj1jdC5tYWtlKGUuc2hhcGUse3ZhbHVlczpxKGUuc2l6ZSxlLmR0eXBlKX0sZS5kdHlwZSk7YS5wdXNoKHIpfX0pLG51bGw9PW8uZ3JhZGllbnQpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbXB1dGUgZ3JhZGllbnQ6IGdyYWRpZW50IGZ1bmN0aW9uIG5vdCBmb3VuZCBmb3IgXCIrby5uYW1lK1wiLlwiKTt2YXIgaT1vLmdyYWRpZW50KDE9PT1vLm91dHB1dHMubGVuZ3RoP2FbMF06YSkscz1mdW5jdGlvbihlKXtpZighKGUgaW4gaSkpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGJhY2twcm9wIHRocm91Z2ggaW5wdXQgXCIrZStcIi4gQXZhaWxhYmxlIGdyYWRpZW50cyBmb3VuZDogXCIrT2JqZWN0LmtleXMoaSkrXCIuXCIpO3ZhciByPW4oZnVuY3Rpb24oKXtyZXR1cm4gaVtlXSgpfSk7aWYoXCJmbG9hdDMyXCIhPT1yLmR0eXBlKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIGdyYWRpZW50IGZvciBvcCBcIitvLm5hbWUrXCIuIFRoZSBncmFkaWVudCBvZiBpbnB1dCBcIitlK1wiIG11c3QgaGF2ZSAnZmxvYXQzMicgZHR5cGUsIGJ1dCBoYXMgJ1wiK3IuZHR5cGUrXCInXCIpO3ZhciBhPW8uaW5wdXRzW2VdO2lmKCF5KHIuc2hhcGUsYS5zaGFwZSkpdGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgaW4gZ3JhZGllbnQgZm9yIG9wIFwiK28ubmFtZStcIi4gVGhlIGdyYWRpZW50IG9mIGlucHV0ICdcIitlK1wiJyBoYXMgc2hhcGUgJ1wiK3Iuc2hhcGUrXCInLCB3aGljaCBkb2VzIG5vdCBtYXRjaCB0aGUgc2hhcGUgb2YgdGhlIGlucHV0ICdcIithLnNoYXBlK1wiJ1wiKTtpZihudWxsPT10W2EuaWRdKXRbYS5pZF09cjtlbHNle3ZhciBzPXRbYS5pZF07dFthLmlkXT1zLmFkZChyKSxzLmRpc3Bvc2UoKX19O2Zvcih2YXIgdSBpbiBvLmlucHV0cylzKHUpfSxvPWUubGVuZ3RoLTE7bz49MDtvLS0pcihvKX0ocyxpLGZ1bmN0aW9uKHQpe3JldHVybiBvLnRpZHkodCl9KTt2YXIgdT1lLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gc1t0LmlkXX0pO3JldHVybiAwPT09by5zdGF0ZS5ncmFkaWVudERlcHRoJiYoby5zdGF0ZS5hY3RpdmVUYXBlLmZvckVhY2goZnVuY3Rpb24odCl7Zm9yKHZhciBlIGluIHQuc2F2ZWQpdC5zYXZlZFtlXS5kaXNwb3NlKCl9KSxvLnN0YXRlLmFjdGl2ZVRhcGU9bnVsbCkse3ZhbHVlOmEsZ3JhZHM6dX19KX0sdC5wcm90b3R5cGUuY3VzdG9tR3JhZD1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBmKFcodCksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmIHBhc3NlZCBpbiBjdXN0b21HcmFkKGYpIG11c3QgYmUgYSBmdW5jdGlvbi5cIn0pLGZ1bmN0aW9uKCl7Zm9yKHZhciBuLHI9W10sbz0wO288YXJndW1lbnRzLmxlbmd0aDtvKyspcltvXT1hcmd1bWVudHNbb107ZihyLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgY3R9KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGFyZ3MgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikoeDEsIHgyLC4uLikgbXVzdCBhbGwgYmUgdGVuc29yc1wifSk7dmFyIGE9e307cmV0dXJuIHIuZm9yRWFjaChmdW5jdGlvbih0LGUpe2FbZV09dH0pLGUucnVuS2VybmVsKGZ1bmN0aW9uKGUsbyl7cmV0dXJuIGYoKG49dC5hcHBseSh2b2lkIDAsci5jb25jYXQoW29dKSkpLnZhbHVlIGluc3RhbmNlb2YgY3QsZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmdW5jdGlvbiBmIHBhc3NlZCBpbiBjdXN0b21HcmFkKGYpIG11c3QgcmV0dXJuIGFuIG9iamVjdCB3aGVyZSBgb2JqLnZhbHVlYCBpcyBhIHRlbnNvclwifSksZihXKG4uZ3JhZEZ1bmMpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZnVuY3Rpb24gZiBwYXNzZWQgaW4gY3VzdG9tR3JhZChmKSBtdXN0IHJldHVybiBhbiBvYmplY3Qgd2hlcmUgYG9iai5ncmFkRnVuY2AgaXMgYSBmdW5jdGlvbi5cIn0pLG4udmFsdWV9LGEsZnVuY3Rpb24odCxlKXt2YXIgbz1uLmdyYWRGdW5jKHQsZSksYT1BcnJheS5pc0FycmF5KG8pP286W29dO2YoYS5sZW5ndGg9PT1yLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiVGhlIGZ1bmN0aW9uIGYgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGBvYmouZ3JhZEZ1bmNgIGlzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBzYW1lIG51bWJlciBvZiB0ZW5zb3JzIGFzIGlucHV0cyBwYXNzZWQgdG8gZiguLi4pLlwifSksZihhLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgY3R9KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGZ1bmN0aW9uIGYgcGFzc2VkIGluIGN1c3RvbUdyYWQoZikgbXVzdCByZXR1cm4gYW4gb2JqZWN0IHdoZXJlIGBvYmouZ3JhZEZ1bmNgIGlzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgbGlzdCBvZiBvbmx5IHRlbnNvcnMuXCJ9KTt2YXIgaT17fTtyZXR1cm4gYS5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7aVtlXT1mdW5jdGlvbigpe3JldHVybiB0fX0pLGl9KX19LHQucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KGUpLG89ci5iYWNrZW5kO2lmKHQ9dHx8dGhpcy5iYWNrZW5kLFwic3RyaW5nXCI9PT1yLmR0eXBlKXt2YXIgYT1GKG4pO3RoaXMuc3RhdGUubnVtQnl0ZXMrPWEtci5ieXRlcyxyLmJ5dGVzPWF9dCE9PW8mJihvLmRpc3Bvc2VEYXRhKGUpLHIuYmFja2VuZD10LHQucmVnaXN0ZXIoZSxyLnNoYXBlLHIuZHR5cGUpKSx0LndyaXRlKGUsbil9LHQucHJvdG90eXBlLnJlYWRTeW5jPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnN0YXRlLnRlbnNvckluZm8uZ2V0KHQpLmJhY2tlbmQucmVhZFN5bmModCl9LHQucHJvdG90eXBlLnJlYWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuc3RhdGUudGVuc29ySW5mby5nZXQodCkuYmFja2VuZC5yZWFkKHQpfSx0LnByb3RvdHlwZS5mcm9tUGl4ZWxzPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYmFja2VuZC5mcm9tUGl4ZWxzKHQsZSl9LHQucHJvdG90eXBlLnRpbWU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbjtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9JCgpLFs0LHRoaXMuYmFja2VuZC50aW1lKHQpXTtjYXNlIDE6cmV0dXJuKG49ci5zZW50KCkpLndhbGxNcz0kKCktZSxbMixuXX19KX0pfSx0LnByb3RvdHlwZS50cmFjaz1mdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dGhpcy5zdGF0ZS5hY3RpdmVTY29wZSYmKHQuc2NvcGVJZD10aGlzLnN0YXRlLmFjdGl2ZVNjb3BlLmlkLHRoaXMuc3RhdGUuYWN0aXZlU2NvcGUudHJhY2sucHVzaCh0KSksdH0sT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwicmVnaXN0ZXJlZFZhcmlhYmxlc1wiLHtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5zdGF0ZS5yZWdpc3RlcmVkVmFyaWFibGVzfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMucGVuZGluZ0JhY2tlbmRJbml0SWQrKyx0aGlzLnN0YXRlLmRpc3Bvc2UoKSx0aGlzLkVOVi5yZXNldCgpLHRoaXMuc3RhdGU9bmV3IGt0LHRoaXMucmVnaXN0cnkpdGhpcy5yZWdpc3RyeVt0XS5kaXNwb3NlKCksZGVsZXRlIHRoaXMucmVnaXN0cnlbdF07dGhpcy5iYWNrZW5kTmFtZT1udWxsLHRoaXMuYmFja2VuZEluc3RhbmNlPW51bGwsdGhpcy5wZW5kaW5nQmFja2VuZEluaXQ9bnVsbH0sdC5uZXh0VGVuc29ySWQ9MCx0Lm5leHRWYXJpYWJsZUlkPTAsdH0oKTt2YXIgU3Q9ZnVuY3Rpb24oKXt2YXIgdD1mdW5jdGlvbigpe2lmKG51bGw9PVJ0KXt2YXIgdD12b2lkIDA7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdyl0PXdpbmRvdztlbHNlIGlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWwpdD1nbG9iYWw7ZWxzZSBpZihcInVuZGVmaW5lZFwiIT10eXBlb2YgcHJvY2Vzcyl0PXByb2Nlc3M7ZWxzZXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2Ygc2VsZil0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCBhIGdsb2JhbCBvYmplY3RcIik7dD1zZWxmfVJ0PXR9cmV0dXJuIFJ0fSgpO2lmKG51bGw9PXQuX3RmZW5naW5lKXt2YXIgZT1uZXcgbyh0KTt0Ll90ZmVuZ2luZT1uZXcgTnQoZSl9cmV0dXJuIHModC5fdGZlbmdpbmUuRU5WKSxzdD1mdW5jdGlvbigpe3JldHVybiB0Ll90ZmVuZ2luZX0sdC5fdGZlbmdpbmV9KCk7ZnVuY3Rpb24gQXQoKXtyZXR1cm5cInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93JiZudWxsIT13aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCIhPXR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZX1pLnJlZ2lzdGVyRmxhZyhcIkRFQlVHXCIsZnVuY3Rpb24oKXtyZXR1cm4hMX0sZnVuY3Rpb24odCl7dCYmY29uc29sZS53YXJuKFwiRGVidWdnaW5nIG1vZGUgaXMgT04uIFRoZSBvdXRwdXQgb2YgZXZlcnkgbWF0aCBjYWxsIHdpbGwgYmUgZG93bmxvYWRlZCB0byBDUFUgYW5kIGNoZWNrZWQgZm9yIE5hTnMuIFRoaXMgc2lnbmlmaWNhbnRseSBpbXBhY3RzIHBlcmZvcm1hbmNlLlwiKX0pLGkucmVnaXN0ZXJGbGFnKFwiSVNfQlJPV1NFUlwiLGZ1bmN0aW9uKCl7cmV0dXJuIEF0KCl9KSxpLnJlZ2lzdGVyRmxhZyhcIklTX05PREVcIixmdW5jdGlvbigpe3JldHVyblwidW5kZWZpbmVkXCIhPXR5cGVvZiBwcm9jZXNzJiZ2b2lkIDAhPT1wcm9jZXNzLnZlcnNpb25zJiZ2b2lkIDAhPT1wcm9jZXNzLnZlcnNpb25zLm5vZGV9KSxpLnJlZ2lzdGVyRmxhZyhcIklTX0NIUk9NRVwiLGZ1bmN0aW9uKCl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9dHlwZW9mIG5hdmlnYXRvciYmbnVsbCE9bmF2aWdhdG9yJiZudWxsIT1uYXZpZ2F0b3IudXNlckFnZW50JiYvQ2hyb21lLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpJiYvR29vZ2xlIEluYy8udGVzdChuYXZpZ2F0b3IudmVuZG9yKX0pLGkucmVnaXN0ZXJGbGFnKFwiUFJPRFwiLGZ1bmN0aW9uKCl7cmV0dXJuITF9KSxpLnJlZ2lzdGVyRmxhZyhcIlRFTlNPUkxJS0VfQ0hFQ0tfU0hBUEVfQ09OU0lTVEVOQ1lcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJERUJVR1wiKX0pLGkucmVnaXN0ZXJGbGFnKFwiREVQUkVDQVRJT05fV0FSTklOR1NfRU5BQkxFRFwiLGZ1bmN0aW9uKCl7cmV0dXJuITB9KSxpLnJlZ2lzdGVyRmxhZyhcIklTX1RFU1RcIixmdW5jdGlvbigpe3JldHVybiExfSk7dmFyIFR0LER0LF90PXt9LE90PXthbHBoYTohMSxhbnRpYWxpYXM6ITEscHJlbXVsdGlwbGllZEFscGhhOiExLHByZXNlcnZlRHJhd2luZ0J1ZmZlcjohMSxkZXB0aDohMSxzdGVuY2lsOiExLGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ6ITB9O2Z1bmN0aW9uIEZ0KHQsZSl7X3RbdF09ZX1mdW5jdGlvbiBNdCh0KXt0IGluIF90fHwoX3RbdF09ZnVuY3Rpb24odCl7aWYoMSE9PXQmJjIhPT10KXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBnZXQgV2ViR0wgcmVuZGVyaW5nIGNvbnRleHQsIFdlYkdMIGlzIGRpc2FibGVkLlwiKTt2YXIgZT1CdCh0KTtpZihlLmFkZEV2ZW50TGlzdGVuZXIoXCJ3ZWJnbGNvbnRleHRsb3N0XCIsZnVuY3Rpb24oZSl7ZS5wcmV2ZW50RGVmYXVsdCgpLGRlbGV0ZSBfdFt0XX0sITEpLDE9PT10KXJldHVybiBlLmdldENvbnRleHQoXCJ3ZWJnbFwiLE90KXx8ZS5nZXRDb250ZXh0KFwiZXhwZXJpbWVudGFsLXdlYmdsXCIsT3QpO3JldHVybiBlLmdldENvbnRleHQoXCJ3ZWJnbDJcIixPdCl9KHQpKTt2YXIgZT1fdFt0XTtyZXR1cm4gZS5pc0NvbnRleHRMb3N0KCk/KGRlbGV0ZSBfdFt0XSxNdCh0KSk6KGUuZGlzYWJsZShlLkRFUFRIX1RFU1QpLGUuZGlzYWJsZShlLlNURU5DSUxfVEVTVCksZS5kaXNhYmxlKGUuQkxFTkQpLGUuZGlzYWJsZShlLkRJVEhFUiksZS5kaXNhYmxlKGUuUE9MWUdPTl9PRkZTRVRfRklMTCksZS5kaXNhYmxlKGUuU0FNUExFX0NPVkVSQUdFKSxlLmVuYWJsZShlLlNDSVNTT1JfVEVTVCksZS5lbmFibGUoZS5DVUxMX0ZBQ0UpLGUuY3VsbEZhY2UoZS5CQUNLKSxfdFt0XSl9ZnVuY3Rpb24gQnQodCl7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIE9mZnNjcmVlbkNhbnZhcyYmMj09PXQpcmV0dXJuIG5ldyBPZmZzY3JlZW5DYW52YXMoMzAwLDE1MCk7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50KXJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO3Rocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjcmVhdGUgYSBjYW52YXMgaW4gdGhpcyBjb250ZXh0XCIpfWZ1bmN0aW9uIFB0KHQsZSl7cmV0dXJuW2UsdF19ZnVuY3Rpb24gTHQodCl7dmFyIGU9Zyh0KTtyZXR1cm4gdyhNYXRoLmNlaWwoZS80KSl9ZnVuY3Rpb24gV3QodCxlKXtyZXR1cm5bTWF0aC5tYXgoMSxNYXRoLmNlaWwoZS8yKSksTWF0aC5tYXgoMSxNYXRoLmNlaWwodC8yKSldfWZ1bmN0aW9uIFV0KHQsZSl7dmFyIG4scixvLGEscyx1LGwsYyxoLHA9dDtyZXR1cm4gMj09PWkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT8obj1wLlIzMkYscj1wLlIxNkYsbz1wLlJHQkExNkYsYT1wLlJHQkEzMkYscz1wLlJFRCx1PTQsbD0xLGM9cC5IQUxGX0ZMT0FULGg9cC5GTE9BVCk6KG49dC5SR0JBLHI9dC5SR0JBLG89dC5SR0JBLGE9cC5SR0JBLHM9dC5SR0JBLHU9NCxsPTQsYz1udWxsIT1lP2UuSEFMRl9GTE9BVF9PRVM6bnVsbCxoPXQuRkxPQVQpLHtpbnRlcm5hbEZvcm1hdEZsb2F0Om4saW50ZXJuYWxGb3JtYXRIYWxmRmxvYXQ6cixpbnRlcm5hbEZvcm1hdFBhY2tlZEhhbGZGbG9hdDpvLGludGVybmFsRm9ybWF0UGFja2VkRmxvYXQ6YSx0ZXh0dXJlRm9ybWF0RmxvYXQ6cyxkb3dubG9hZFRleHR1cmVGb3JtYXQ6dC5SR0JBLGRvd25sb2FkVW5wYWNrTnVtQ2hhbm5lbHM6dSxkZWZhdWx0TnVtQ2hhbm5lbHM6bCx0ZXh0dXJlVHlwZUhhbGZGbG9hdDpjLHRleHR1cmVUeXBlRmxvYXQ6aH19ZnVuY3Rpb24gVnQodCxlLG4pe3ZhciByPW4oKTtyZXR1cm4gZSYmZnVuY3Rpb24odCl7dmFyIGU9dC5nZXRFcnJvcigpO2lmKGUhPT10Lk5PX0VSUk9SKXRocm93IG5ldyBFcnJvcihcIldlYkdMIEVycm9yOiBcIitxdCh0LGUpKX0odCkscn0hZnVuY3Rpb24odCl7dFt0LlJFTkRFUj0wXT1cIlJFTkRFUlwiLHRbdC5VUExPQUQ9MV09XCJVUExPQURcIix0W3QuUElYRUxTPTJdPVwiUElYRUxTXCIsdFt0LkRPV05MT0FEPTNdPVwiRE9XTkxPQURcIn0oVHR8fChUdD17fSkpLGZ1bmN0aW9uKHQpe3RbdC5VTlBBQ0tFRF9GTE9BVDE2PTBdPVwiVU5QQUNLRURfRkxPQVQxNlwiLHRbdC5VTlBBQ0tFRF9GTE9BVDMyPTFdPVwiVU5QQUNLRURfRkxPQVQzMlwiLHRbdC5QQUNLRURfNFgxX1VOU0lHTkVEX0JZVEU9Ml09XCJQQUNLRURfNFgxX1VOU0lHTkVEX0JZVEVcIix0W3QuUEFDS0VEXzJYMl9GTE9BVDMyPTNdPVwiUEFDS0VEXzJYMl9GTE9BVDMyXCIsdFt0LlBBQ0tFRF8yWDJfRkxPQVQxNj00XT1cIlBBQ0tFRF8yWDJfRkxPQVQxNlwifShEdHx8KER0PXt9KSk7dmFyIHp0PTUuOTZlLTgsR3Q9NjU1MDQ7ZnVuY3Rpb24gSHQodCl7cmV0dXJuISEoaS5nZXRCb29sKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfRU5BQkxFRFwiKXx8MD09PXR8fHp0PE1hdGguYWJzKHQpJiZNYXRoLmFicyh0KTxHdCl9ZnVuY3Rpb24gcXQodCxlKXtzd2l0Y2goZSl7Y2FzZSB0Lk5PX0VSUk9SOnJldHVyblwiTk9fRVJST1JcIjtjYXNlIHQuSU5WQUxJRF9FTlVNOnJldHVyblwiSU5WQUxJRF9FTlVNXCI7Y2FzZSB0LklOVkFMSURfVkFMVUU6cmV0dXJuXCJJTlZBTElEX1ZBTFVFXCI7Y2FzZSB0LklOVkFMSURfT1BFUkFUSU9OOnJldHVyblwiSU5WQUxJRF9PUEVSQVRJT05cIjtjYXNlIHQuSU5WQUxJRF9GUkFNRUJVRkZFUl9PUEVSQVRJT046cmV0dXJuXCJJTlZBTElEX0ZSQU1FQlVGRkVSX09QRVJBVElPTlwiO2Nhc2UgdC5PVVRfT0ZfTUVNT1JZOnJldHVyblwiT1VUX09GX01FTU9SWVwiO2Nhc2UgdC5DT05URVhUX0xPU1RfV0VCR0w6cmV0dXJuXCJDT05URVhUX0xPU1RfV0VCR0xcIjtkZWZhdWx0OnJldHVyblwiVW5rbm93biBlcnJvciBjb2RlIFwiK2V9fWZ1bmN0aW9uICR0KHQsZSxuKXtyZXR1cm4gdmUodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuZ2V0RXh0ZW5zaW9uKG4pfSwnRXh0ZW5zaW9uIFwiJytuKydcIiBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgYnJvd3Nlci4nKX1mdW5jdGlvbiBLdCh0LGUsbil7dmFyIHI9dmUodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuY3JlYXRlU2hhZGVyKHQuVkVSVEVYX1NIQURFUil9LFwiVW5hYmxlIHRvIGNyZWF0ZSB2ZXJ0ZXggV2ViR0xTaGFkZXIuXCIpO2lmKFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LnNoYWRlclNvdXJjZShyLG4pfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuY29tcGlsZVNoYWRlcihyKX0pLCExPT09dC5nZXRTaGFkZXJQYXJhbWV0ZXIocix0LkNPTVBJTEVfU1RBVFVTKSl0aHJvdyBjb25zb2xlLmxvZyh0LmdldFNoYWRlckluZm9Mb2cocikpLG5ldyBFcnJvcihcIkZhaWxlZCB0byBjb21waWxlIHZlcnRleCBzaGFkZXIuXCIpO3JldHVybiByfWZ1bmN0aW9uIGp0KHQsZSxuKXt2YXIgcj12ZSh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVTaGFkZXIodC5GUkFHTUVOVF9TSEFERVIpfSxcIlVuYWJsZSB0byBjcmVhdGUgZnJhZ21lbnQgV2ViR0xTaGFkZXIuXCIpO2lmKFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LnNoYWRlclNvdXJjZShyLG4pfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuY29tcGlsZVNoYWRlcihyKX0pLCExPT09dC5nZXRTaGFkZXJQYXJhbWV0ZXIocix0LkNPTVBJTEVfU1RBVFVTKSl0aHJvdyBmdW5jdGlvbih0LGUpe3ZhciBuPVF0LmV4ZWMoZSk7aWYobnVsbD09bilyZXR1cm4gY29uc29sZS5sb2coXCJDb3VsZG4ndCBwYXJzZSBsaW5lIG51bWJlciBpbiBlcnJvcjogXCIrZSksdm9pZCBjb25zb2xlLmxvZyh0KTtmb3IodmFyIHI9K25bMV0sbz10LnNwbGl0KFwiXFxuXCIpLGE9by5sZW5ndGgudG9TdHJpbmcoKS5sZW5ndGgrMixpPW8ubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIEMoKGUrMSkudG9TdHJpbmcoKSxhKSt0fSkscz0wLHU9MDt1PGkubGVuZ3RoO3UrKylzPU1hdGgubWF4KGlbdV0ubGVuZ3RoLHMpO3ZhciBsPWkuc2xpY2UoMCxyLTEpLGM9aS5zbGljZShyLTEsciksaD1pLnNsaWNlKHIpO2NvbnNvbGUubG9nKGwuam9pbihcIlxcblwiKSksY29uc29sZS5sb2coZS5zcGxpdChcIlxcblwiKVswXSksY29uc29sZS5sb2coXCIlYyBcIitDKGNbMF0scyksXCJib3JkZXI6MXB4IHNvbGlkIHJlZDsgYmFja2dyb3VuZC1jb2xvcjojZTNkMmQyOyBjb2xvcjojYTYxNzE3XCIpLGNvbnNvbGUubG9nKGguam9pbihcIlxcblwiKSl9KG4sdC5nZXRTaGFkZXJJbmZvTG9nKHIpKSxuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY29tcGlsZSBmcmFnbWVudCBzaGFkZXIuXCIpO3JldHVybiByfXZhciBYdCxZdCxRdD0vRVJST1I6IFswLTldKzooWzAtOV0rKTovZztmdW5jdGlvbiBKdCh0LGUpe3JldHVybiB2ZSh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVQcm9ncmFtKCl9LFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTFByb2dyYW0uXCIpfWZ1bmN0aW9uIFp0KHQsZSxuKXtpZihWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5saW5rUHJvZ3JhbShuKX0pLCExPT09dC5nZXRQcm9ncmFtUGFyYW1ldGVyKG4sdC5MSU5LX1NUQVRVUykpdGhyb3cgY29uc29sZS5sb2codC5nZXRQcm9ncmFtSW5mb0xvZyhuKSksbmV3IEVycm9yKFwiRmFpbGVkIHRvIGxpbmsgdmVydGV4IGFuZCBmcmFnbWVudCBzaGFkZXJzLlwiKX1mdW5jdGlvbiB0ZSh0LGUsbil7aWYoVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudmFsaWRhdGVQcm9ncmFtKG4pfSksITE9PT10LmdldFByb2dyYW1QYXJhbWV0ZXIobix0LlZBTElEQVRFX1NUQVRVUykpdGhyb3cgY29uc29sZS5sb2codC5nZXRQcm9ncmFtSW5mb0xvZyhuKSksbmV3IEVycm9yKFwiU2hhZGVyIHByb2dyYW0gdmFsaWRhdGlvbiBmYWlsZWQuXCIpfWZ1bmN0aW9uIGVlKHQsZSxuKXt2YXIgcj12ZSh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5jcmVhdGVCdWZmZXIoKX0sXCJVbmFibGUgdG8gY3JlYXRlIFdlYkdMQnVmZmVyXCIpO3JldHVybiBWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuQVJSQVlfQlVGRkVSLHIpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYnVmZmVyRGF0YSh0LkFSUkFZX0JVRkZFUixuLHQuU1RBVElDX0RSQVcpfSkscn1mdW5jdGlvbiBuZSh0LGUsbil7dmFyIHI9dmUodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuY3JlYXRlQnVmZmVyKCl9LFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTEJ1ZmZlclwiKTtyZXR1cm4gVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZEJ1ZmZlcih0LkVMRU1FTlRfQVJSQVlfQlVGRkVSLHIpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYnVmZmVyRGF0YSh0LkVMRU1FTlRfQVJSQVlfQlVGRkVSLG4sdC5TVEFUSUNfRFJBVyl9KSxyfWZ1bmN0aW9uIHJlKHQsZSl7cmV0dXJuIHZlKHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmNyZWF0ZVRleHR1cmUoKX0sXCJVbmFibGUgdG8gY3JlYXRlIFdlYkdMVGV4dHVyZS5cIil9ZnVuY3Rpb24gb2UodCxlKXt2YXIgbj1pLmdldE51bWJlcihcIldFQkdMX01BWF9URVhUVVJFX1NJWkVcIik7aWYodDw9MHx8ZTw9MCl7dmFyIHI9XCJbXCIrdCtcInhcIitlK1wiXVwiO3Rocm93IG5ldyBFcnJvcihcIlJlcXVlc3RlZCB0ZXh0dXJlIHNpemUgXCIrcitcIiBpcyBpbnZhbGlkLlwiKX1pZih0Pm58fGU+bil7cj1cIltcIit0K1wieFwiK2UrXCJdXCI7dGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGVkIHRleHR1cmUgc2l6ZSBcIityK1wiIGdyZWF0ZXIgdGhhbiBXZWJHTCBtYXhpbXVtIG9uIHRoaXMgYnJvd3NlciAvIEdQVSBcIisoXCJbXCIrbitcInhcIituK1wiXVwiKStcIi5cIil9fWZ1bmN0aW9uIGFlKHQsZSl7cmV0dXJuIHZlKHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmNyZWF0ZUZyYW1lYnVmZmVyKCl9LFwiVW5hYmxlIHRvIGNyZWF0ZSBXZWJHTEZyYW1lYnVmZmVyLlwiKX1mdW5jdGlvbiBpZSh0LGUsbixyLG8sYSxpLHMpe3ZhciB1PXQuZ2V0QXR0cmliTG9jYXRpb24obixyKTtyZXR1cm4tMSE9PXUmJihWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuQVJSQVlfQlVGRkVSLG8pfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudmVydGV4QXR0cmliUG9pbnRlcih1LGEsdC5GTE9BVCwhMSxpLHMpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuZW5hYmxlVmVydGV4QXR0cmliQXJyYXkodSl9KSwhMCl9ZnVuY3Rpb24gc2UodCxlLG4scil7bWUodCxyKSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5hY3RpdmVUZXh0dXJlKHQuVEVYVFVSRTArcil9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsbil9KX1mdW5jdGlvbiB1ZSh0LGUsbixyKXtyZXR1cm4gdmUodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuZ2V0VW5pZm9ybUxvY2F0aW9uKG4scil9LCd1bmlmb3JtIFwiJytyKydcIiBub3QgcHJlc2VudCBpbiBwcm9ncmFtLicpfWZ1bmN0aW9uIGxlKHQsZSxuKXtyZXR1cm4gdC5nZXRVbmlmb3JtTG9jYXRpb24oZSxuKX1mdW5jdGlvbiBjZSh0LGUsbixyLG8sYSl7VnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHNlKHQsZSxyLGEpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudW5pZm9ybTFpKG8sYSl9KX1mdW5jdGlvbiBoZSh0LGUsbixyKXtWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kRnJhbWVidWZmZXIodC5GUkFNRUJVRkZFUixyKX0pLFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmZyYW1lYnVmZmVyVGV4dHVyZTJEKHQuRlJBTUVCVUZGRVIsdC5DT0xPUl9BVFRBQ0hNRU5UMCx0LlRFWFRVUkVfMkQsbiwwKX0pfWZ1bmN0aW9uIHBlKHQsZSxuKXtWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kRnJhbWVidWZmZXIodC5GUkFNRUJVRkZFUixuKX0pLFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmZyYW1lYnVmZmVyVGV4dHVyZTJEKHQuRlJBTUVCVUZGRVIsdC5DT0xPUl9BVFRBQ0hNRU5UMCx0LlRFWFRVUkVfMkQsbnVsbCwwKX0pfWZ1bmN0aW9uIGZlKHQpe3ZhciBlPXQuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyh0LkZSQU1FQlVGRkVSKTtpZihlIT09dC5GUkFNRUJVRkZFUl9DT01QTEVURSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBiaW5kaW5nIGZyYW1lYnVmZmVyOiBcIitkZSh0LGUpKX1mdW5jdGlvbiBkZSh0LGUpe3N3aXRjaChlKXtjYXNlIHQuRlJBTUVCVUZGRVJfSU5DT01QTEVURV9BVFRBQ0hNRU5UOnJldHVyblwiRlJBTUVCVUZGRVJfSU5DT01QTEVURV9BVFRBQ0hNRU5UXCI7Y2FzZSB0LkZSQU1FQlVGRkVSX0lOQ09NUExFVEVfTUlTU0lOR19BVFRBQ0hNRU5UOnJldHVyblwiRlJBTUVCVUZGRVJfSU5DT01QTEVURV9NSVNTSU5HX0FUVEFDSE1FTlRcIjtjYXNlIHQuRlJBTUVCVUZGRVJfSU5DT01QTEVURV9ESU1FTlNJT05TOnJldHVyblwiRlJBTUVCVUZGRVJfSU5DT01QTEVURV9ESU1FTlNJT05TXCI7Y2FzZSB0LkZSQU1FQlVGRkVSX1VOU1VQUE9SVEVEOnJldHVyblwiRlJBTUVCVUZGRVJfVU5TVVBQT1JURURcIjtkZWZhdWx0OnJldHVyblwidW5rbm93biBlcnJvciBcIitlfX1mdW5jdGlvbiB2ZSh0LGUsbixyKXt2YXIgbz1WdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gbigpfSk7aWYobnVsbD09byl0aHJvdyBuZXcgRXJyb3Iocik7cmV0dXJuIG99ZnVuY3Rpb24gbWUodCxlKXt2YXIgbj10Lk1BWF9DT01CSU5FRF9URVhUVVJFX0lNQUdFX1VOSVRTLTEscj1lK3QuVEVYVFVSRTA7aWYocjx0LlRFWFRVUkUwfHxyPm4pdGhyb3cgbmV3IEVycm9yKFwidGV4dHVyZVVuaXQgbXVzdCBiZSBpbiBcIisoXCJbZ2wuVEVYVFVSRTAsIGdsLlRFWFRVUkVcIituK1wiXVwiKStcIi5cIil9ZnVuY3Rpb24gZ2UodCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9MiksZyh0LnNsaWNlKDAsdC5sZW5ndGgtZSkpfWZ1bmN0aW9uIHllKHQpe2lmKDA9PT10Lmxlbmd0aCl0aHJvdyBFcnJvcihcIkNhbm5vdCBnZXQgcm93cyBhbmQgY29sdW1ucyBvZiBhbiBlbXB0eSBzaGFwZSBhcnJheS5cIik7cmV0dXJuW3QubGVuZ3RoPjE/dFt0Lmxlbmd0aC0yXToxLHRbdC5sZW5ndGgtMV1dfWZ1bmN0aW9uIHhlKHQpe3ZhciBlPVsxLDEsMV07cmV0dXJuIDA9PT10Lmxlbmd0aHx8MT09PXQubGVuZ3RoJiYxPT09dFswXXx8KGU9W2dlKHQpXS5jb25jYXQoeWUodCkpKSxlfWZ1bmN0aW9uIGJlKHQsZSl7dmFyIG47dm9pZCAwPT09ZSYmKGU9ITEpO3ZhciByPWkuZ2V0TnVtYmVyKFwiV0VCR0xfTUFYX1RFWFRVUkVfU0laRVwiKTtpZihlJiYocio9MiwxPT09KHQ9dC5tYXAoZnVuY3Rpb24oZSxuKXtyZXR1cm4gbj49dC5sZW5ndGgtMj9oKHRbbl0pOnRbbl19KSkubGVuZ3RoJiYodD1bMix0WzBdXSkpLDIhPT10Lmxlbmd0aCl7dmFyIG89ayh0KTt0PW8ubmV3U2hhcGV9dmFyIGE9Zyh0KTtpZih0Lmxlbmd0aDw9MSYmYTw9cilyZXR1cm5bMSxhXTtpZigyPT09dC5sZW5ndGgmJnRbMF08PXImJnRbMV08PXIpcmV0dXJuIHQ7aWYoMz09PXQubGVuZ3RoJiZ0WzBdKnRbMV08PXImJnRbMl08PXIpcmV0dXJuW3RbMF0qdFsxXSx0WzJdXTtpZigzPT09dC5sZW5ndGgmJnRbMF08PXImJnRbMV0qdFsyXTw9cilyZXR1cm5bdFswXSx0WzFdKnRbMl1dO2lmKDQ9PT10Lmxlbmd0aCYmdFswXSp0WzFdKnRbMl08PXImJnRbM108PXIpcmV0dXJuW3RbMF0qdFsxXSp0WzJdLHRbM11dO2lmKDQ9PT10Lmxlbmd0aCYmdFswXTw9ciYmdFsxXSp0WzJdKnRbM108PXIpcmV0dXJuW3RbMF0sdFsxXSp0WzJdKnRbM11dO2lmKGUpe3ZhciBzPWdlKHQpLHU9MixsPTI7cmV0dXJuIHQubGVuZ3RoJiYodT0obj15ZSh0KSlbMF0sbD1uWzFdKSx3KGE9cyoodS8yKSoobC8yKSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiAyKnR9KX1yZXR1cm4gdyhhKX1mdW5jdGlvbiB3ZSh0KXtyZXR1cm4gdCUyPT0wfWZ1bmN0aW9uIENlKHQsZSl7aWYoeSh0PXQuc2xpY2UoLTIpLGU9ZS5zbGljZSgtMikpKXJldHVybiEwO2lmKCF0Lmxlbmd0aHx8IWUubGVuZ3RoKXJldHVybiEwO2lmKDA9PT10WzBdfHwwPT09dFsxXXx8MD09PWVbMF18fDA9PT1lWzFdKXJldHVybiEwO2lmKHQubGVuZ3RoIT09ZS5sZW5ndGgpe3ZhciBuPXQuc2xpY2UoLTEpWzBdLHI9ZS5zbGljZSgtMSlbMF07aWYobj09PXIpcmV0dXJuITA7aWYod2UobikmJndlKHIpJiYoMT09PXRbMF18fDE9PT1lWzBdKSlyZXR1cm4hMH1yZXR1cm4gdFsxXT09PWVbMV0mJndlKHRbMF0pJiZ3ZShlWzBdKX1mdW5jdGlvbiBFZSh0KXtpZihudWxsPT1YdCl7dmFyIGU9TXQodCk7WHQ9ZS5nZXRQYXJhbWV0ZXIoZS5NQVhfVEVYVFVSRV9TSVpFKX1yZXR1cm4gWHR9ZnVuY3Rpb24gUmUodCl7aWYobnVsbD09WXQpe3ZhciBlPU10KHQpO1l0PWUuZ2V0UGFyYW1ldGVyKGUuTUFYX1RFWFRVUkVfSU1BR0VfVU5JVFMpfXJldHVybiBNYXRoLm1pbigxNixZdCl9ZnVuY3Rpb24gSWUodCl7aWYoMD09PXQpcmV0dXJuIDA7dmFyIGU9TXQodCk7cmV0dXJuIGtlKGUsXCJFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlfd2ViZ2wyXCIpJiYyPT09dD8yOmtlKGUsXCJFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlcIik/MTowfWZ1bmN0aW9uIGtlKHQsZSl7cmV0dXJuIG51bGwhPXQuZ2V0RXh0ZW5zaW9uKGUpfWZ1bmN0aW9uIE5lKHQpe3RyeXtpZihudWxsIT1NdCh0KSlyZXR1cm4hMH1jYXRjaCh0KXtyZXR1cm4hMX1yZXR1cm4hMX1mdW5jdGlvbiBTZSh0KXtpZigwPT09dClyZXR1cm4hMTt2YXIgZT1NdCh0KTtpZigxPT09dCl7aWYoIWtlKGUsXCJPRVNfdGV4dHVyZV9mbG9hdFwiKSlyZXR1cm4hMX1lbHNlIGlmKCFrZShlLFwiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdFwiKSlyZXR1cm4hMTtyZXR1cm4gVGUoZSl9ZnVuY3Rpb24gQWUodCl7aWYoMD09PXQpcmV0dXJuITE7dmFyIGU9TXQodCk7aWYoMSE9PXQpe2lmKGtlKGUsXCJFWFRfY29sb3JfYnVmZmVyX2Zsb2F0XCIpKXJldHVybiBUZShlKTtpZihrZShlLFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpKXt2YXIgbj1lLmdldEV4dGVuc2lvbihcIkVYVF9jb2xvcl9idWZmZXJfaGFsZl9mbG9hdFwiKTtyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1VdCh0LGUpLHI9dC5jcmVhdGVUZXh0dXJlKCk7dC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQscik7dC50ZXhJbWFnZTJEKHQuVEVYVFVSRV8yRCwwLG4uaW50ZXJuYWxGb3JtYXRIYWxmRmxvYXQsMSwxLDAsbi50ZXh0dXJlRm9ybWF0RmxvYXQsbi50ZXh0dXJlVHlwZUhhbGZGbG9hdCxudWxsKTt2YXIgbz10LmNyZWF0ZUZyYW1lYnVmZmVyKCk7dC5iaW5kRnJhbWVidWZmZXIodC5GUkFNRUJVRkZFUixvKSx0LmZyYW1lYnVmZmVyVGV4dHVyZTJEKHQuRlJBTUVCVUZGRVIsdC5DT0xPUl9BVFRBQ0hNRU5UMCx0LlRFWFRVUkVfMkQsciwwKTt2YXIgYT10LmNoZWNrRnJhbWVidWZmZXJTdGF0dXModC5GUkFNRUJVRkZFUik9PT10LkZSQU1FQlVGRkVSX0NPTVBMRVRFO3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxudWxsKSx0LmJpbmRGcmFtZWJ1ZmZlcih0LkZSQU1FQlVGRkVSLG51bGwpLHQuZGVsZXRlVGV4dHVyZShyKSx0LmRlbGV0ZUZyYW1lYnVmZmVyKG8pLGF9KGUsbil9cmV0dXJuITF9cmV0dXJuISFrZShlLFwiT0VTX3RleHR1cmVfZmxvYXRcIikmJighIWtlKGUsXCJXRUJHTF9jb2xvcl9idWZmZXJfZmxvYXRcIikmJlRlKGUpKX1mdW5jdGlvbiBUZSh0KXt2YXIgZT1VdCh0KSxuPXQuY3JlYXRlVGV4dHVyZSgpO3QuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG4pO3QudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCxlLmludGVybmFsRm9ybWF0RmxvYXQsMSwxLDAsZS50ZXh0dXJlRm9ybWF0RmxvYXQsZS50ZXh0dXJlVHlwZUZsb2F0LG51bGwpO3ZhciByPXQuY3JlYXRlRnJhbWVidWZmZXIoKTt0LmJpbmRGcmFtZWJ1ZmZlcih0LkZSQU1FQlVGRkVSLHIpLHQuZnJhbWVidWZmZXJUZXh0dXJlMkQodC5GUkFNRUJVRkZFUix0LkNPTE9SX0FUVEFDSE1FTlQwLHQuVEVYVFVSRV8yRCxuLDApO3ZhciBvPXQuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyh0LkZSQU1FQlVGRkVSKT09PXQuRlJBTUVCVUZGRVJfQ09NUExFVEU7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpLHQuYmluZEZyYW1lYnVmZmVyKHQuRlJBTUVCVUZGRVIsbnVsbCksdC5kZWxldGVUZXh0dXJlKG4pLHQuZGVsZXRlRnJhbWVidWZmZXIociksb31mdW5jdGlvbiBEZSh0KXtyZXR1cm4gMj09PXQmJm51bGwhPU10KHQpLmZlbmNlU3luY312YXIgX2U9T2JqZWN0LmZyZWV6ZSh7Y2FsbEFuZENoZWNrOlZ0LGNhbkJlUmVwcmVzZW50ZWQ6SHQsZ2V0V2ViR0xFcnJvck1lc3NhZ2U6cXQsZ2V0RXh0ZW5zaW9uT3JUaHJvdzokdCxjcmVhdGVWZXJ0ZXhTaGFkZXI6S3QsY3JlYXRlRnJhZ21lbnRTaGFkZXI6anQsY3JlYXRlUHJvZ3JhbTpKdCxsaW5rUHJvZ3JhbTpadCx2YWxpZGF0ZVByb2dyYW06dGUsY3JlYXRlU3RhdGljVmVydGV4QnVmZmVyOmVlLGNyZWF0ZVN0YXRpY0luZGV4QnVmZmVyOm5lLGdldE51bUNoYW5uZWxzOmZ1bmN0aW9uKCl7cmV0dXJuIDI9PT1pLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIik/MTo0fSxjcmVhdGVUZXh0dXJlOnJlLHZhbGlkYXRlVGV4dHVyZVNpemU6b2UsY3JlYXRlRnJhbWVidWZmZXI6YWUsYmluZFZlcnRleEJ1ZmZlclRvUHJvZ3JhbUF0dHJpYnV0ZTppZSxiaW5kVGV4dHVyZVVuaXQ6c2UsdW5iaW5kVGV4dHVyZVVuaXQ6ZnVuY3Rpb24odCxlLG4pe21lKHQsbiksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYWN0aXZlVGV4dHVyZSh0LlRFWFRVUkUwK24pfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSl9LGdldFByb2dyYW1Vbmlmb3JtTG9jYXRpb25PclRocm93OnVlLGdldFByb2dyYW1Vbmlmb3JtTG9jYXRpb246bGUsYmluZFRleHR1cmVUb1Byb2dyYW1Vbmlmb3JtU2FtcGxlcjpjZSxiaW5kQ2FudmFzVG9GcmFtZWJ1ZmZlcjpmdW5jdGlvbih0LGUpe1Z0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmJpbmRGcmFtZWJ1ZmZlcih0LkZSQU1FQlVGRkVSLG51bGwpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudmlld3BvcnQoMCwwLHQuY2FudmFzLndpZHRoLHQuY2FudmFzLmhlaWdodCl9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5zY2lzc29yKDAsMCx0LmNhbnZhcy53aWR0aCx0LmNhbnZhcy5oZWlnaHQpfSl9LGJpbmRDb2xvclRleHR1cmVUb0ZyYW1lYnVmZmVyOmhlLHVuYmluZENvbG9yVGV4dHVyZUZyb21GcmFtZWJ1ZmZlcjpwZSx2YWxpZGF0ZUZyYW1lYnVmZmVyOmZlLGdldEZyYW1lYnVmZmVyRXJyb3JNZXNzYWdlOmRlLGdldEJhdGNoRGltOmdlLGdldFJvd3NDb2xzOnllLGdldFNoYXBlQXMzRDp4ZSxnZXRUZXh0dXJlU2hhcGVGcm9tTG9naWNhbFNoYXBlOmJlLGlzUmVzaGFwZUZyZWU6Q2UsZ2V0V2ViR0xNYXhUZXh0dXJlU2l6ZTpFZSxyZXNldE1heFRleHR1cmVTaXplOmZ1bmN0aW9uKCl7WHQ9bnVsbH0scmVzZXRNYXhUZXh0dXJlc0luU2hhZGVyOmZ1bmN0aW9uKCl7WXQ9bnVsbH0sZ2V0TWF4VGV4dHVyZXNJblNoYWRlcjpSZSxnZXRXZWJHTERpc2pvaW50UXVlcnlUaW1lclZlcnNpb246SWUsaGFzRXh0ZW5zaW9uOmtlLGlzV2ViR0xWZXJzaW9uRW5hYmxlZDpOZSxpc0NhcGFibGVPZlJlbmRlcmluZ1RvRmxvYXRUZXh0dXJlOlNlLGlzRG93bmxvYWRGbG9hdFRleHR1cmVFbmFibGVkOkFlLGlzV2ViR0xGZW5jZUVuYWJsZWQ6RGV9KTtmdW5jdGlvbiBPZSgpe2kuc2V0KFwiUFJPRFwiLCEwKX1mdW5jdGlvbiBGZSgpe2kuc2V0KFwiREVCVUdcIiwhMCl9ZnVuY3Rpb24gTWUoKXtpLnNldChcIkRFUFJFQ0FUSU9OX1dBUk5JTkdTX0VOQUJMRURcIiwhMSksY29uc29sZS53YXJuKFwiVGVuc29yRmxvdy5qcyBkZXByZWNhdGlvbiB3YXJuaW5ncyBoYXZlIGJlZW4gZGlzYWJsZWQuXCIpfWZ1bmN0aW9uIEJlKHQpe2kuZ2V0Qm9vbChcIkRFUFJFQ0FUSU9OX1dBUk5JTkdTX0VOQUJMRURcIikmJmNvbnNvbGUud2Fybih0K1wiIFlvdSBjYW4gZGlzYWJsZSBkZXByZWNhdGlvbiB3YXJuaW5ncyB3aXRoIHRmLmRpc2FibGVEZXByZWNhdGlvbldhcm5pbmdzKCkuXCIpfWZ1bmN0aW9uIFBlKCl7U3QuZGlzcG9zZVZhcmlhYmxlcygpfWZ1bmN0aW9uIExlKCl7cmV0dXJuIFN0Lm1lbW9yeSgpfWZ1bmN0aW9uIFdlKHQpe3JldHVybiBTdC5wcm9maWxlKHQpfWZ1bmN0aW9uIFVlKHQsZSl7cmV0dXJuIFN0LnRpZHkodCxlKX1mdW5jdGlvbiBWZSh0KXtFdCh0KS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRpc3Bvc2UoKX0pfWZ1bmN0aW9uIHplKHQpe3JldHVybiBTdC5rZWVwKHQpfWZ1bmN0aW9uIEdlKHQpe3JldHVybiBTdC50aW1lKHQpfWZ1bmN0aW9uIEhlKHQpe3JldHVybiBTdC5zZXRCYWNrZW5kKHQpfWZ1bmN0aW9uIHFlKCl7cmV0dXJuIFN0LnJlYWR5KCl9ZnVuY3Rpb24gJGUoKXtyZXR1cm4gU3QuYmFja2VuZE5hbWV9ZnVuY3Rpb24gS2UodCl7U3QucmVtb3ZlQmFja2VuZCh0KX1mdW5jdGlvbiBqZSh0KXtyZXR1cm4gU3QuZmluZEJhY2tlbmQodCl9ZnVuY3Rpb24gWGUodCl7cmV0dXJuIFN0LmZpbmRCYWNrZW5kRmFjdG9yeSh0KX1mdW5jdGlvbiBZZSh0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTEpLFN0LnJlZ2lzdGVyQmFja2VuZCh0LGUsbil9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gU3QuYmFja2VuZH1mdW5jdGlvbiBKZSh0LGUpe2kuc2V0UGxhdGZvcm0odCxlKX1mdW5jdGlvbiBaZSgpe2Zvcih2YXIgdD1bXSxlPTA7ZTxhcmd1bWVudHMubGVuZ3RoO2UrKyl0W2VdPWFyZ3VtZW50c1tlXTtpLmdldEJvb2woXCJJU19URVNUXCIpfHxjb25zb2xlLndhcm4uYXBwbHkoY29uc29sZSx0KX1mdW5jdGlvbiB0bih0LGUpe3ZhciBuPXQ7aWYoXyh0KSlyZXR1cm5cInN0cmluZ1wiPT09ZT9bXTpbdC5sZW5ndGhdO2lmKCFBcnJheS5pc0FycmF5KHQpKXJldHVybltdO2Zvcih2YXIgcj1bXTtBcnJheS5pc0FycmF5KG4pfHxfKG4pJiZcInN0cmluZ1wiIT09ZTspci5wdXNoKG4ubGVuZ3RoKSxuPW5bMF07cmV0dXJuIEFycmF5LmlzQXJyYXkodCkmJmkuZ2V0Qm9vbChcIlRFTlNPUkxJS0VfQ0hFQ0tfU0hBUEVfQ09OU0lTVEVOQ1lcIikmJmZ1bmN0aW9uIHQoZSxuLHIpe3I9cnx8W107aWYoIUFycmF5LmlzQXJyYXkoZSkmJiFfKGUpKXJldHVybiB2b2lkIGYoMD09PW4ubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJFbGVtZW50IGFycltcIityLmpvaW4oXCJdW1wiKStcIl0gaXMgYSBwcmltaXRpdmUsIGJ1dCBzaG91bGQgYmUgYW4gYXJyYXkvVHlwZWRBcnJheSBvZiBcIituWzBdK1wiIGVsZW1lbnRzXCJ9KTtmKG4ubGVuZ3RoPjAsZnVuY3Rpb24oKXtyZXR1cm5cIkVsZW1lbnQgYXJyW1wiK3Iuam9pbihcIl1bXCIpK1wiXSBzaG91bGQgYmUgYSBwcmltaXRpdmUsIGJ1dCBpcyBhbiBhcnJheSBvZiBcIitlLmxlbmd0aCtcIiBlbGVtZW50c1wifSk7ZihlLmxlbmd0aD09PW5bMF0sZnVuY3Rpb24oKXtyZXR1cm5cIkVsZW1lbnQgYXJyW1wiK3Iuam9pbihcIl1bXCIpK1wiXSBzaG91bGQgaGF2ZSBcIituWzBdK1wiIGVsZW1lbnRzLCBidXQgaGFzIFwiK2UubGVuZ3RoK1wiIGVsZW1lbnRzXCJ9KTt2YXIgbz1uLnNsaWNlKDEpO2Zvcih2YXIgYT0wO2E8ZS5sZW5ndGg7KythKXQoZVthXSxvLHIuY29uY2F0KGEpKX0odCxyLFtdKSxyfWZ1bmN0aW9uIGVuKHQsZSxuLHIpe2lmKG51bGwhPXQmJihcIm51bWVyaWNcIiE9PXQmJnQhPT1lfHxcIm51bWVyaWNcIj09PXQmJlwic3RyaW5nXCI9PT1lKSl0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCAnXCIrbitcIicgcGFzc2VkIHRvICdcIityK1wiJyBtdXN0IGJlIFwiK3QrXCIgdGVuc29yLCBidXQgZ290IFwiK2UrXCIgdGVuc29yXCIpfWZ1bmN0aW9uIG5uKHQsZSxuLHIpe2lmKHZvaWQgMD09PXImJihyPVwibnVtZXJpY1wiKSx0IGluc3RhbmNlb2YgY3QpcmV0dXJuIGVuKHIsdC5kdHlwZSxlLG4pLHQ7dmFyIG89TCh0KTtpZihcInN0cmluZ1wiIT09byYmW1wiYm9vbFwiLFwiaW50MzJcIixcImZsb2F0MzJcIl0uaW5kZXhPZihyKT49MCYmKG89ciksZW4ocixvLGUsbiksbnVsbD09dHx8IV8odCkmJiFBcnJheS5pc0FycmF5KHQpJiZcIm51bWJlclwiIT10eXBlb2YgdCYmXCJib29sZWFuXCIhPXR5cGVvZiB0JiZcInN0cmluZ1wiIT10eXBlb2YgdCl7dmFyIGE9bnVsbD09dD9cIm51bGxcIjp0LmNvbnN0cnVjdG9yLm5hbWU7dGhyb3cgbmV3IEVycm9yKFwiQXJndW1lbnQgJ1wiK2UrXCInIHBhc3NlZCB0byAnXCIrbitcIicgbXVzdCBiZSBhIFRlbnNvciBvciBUZW5zb3JMaWtlLCBidXQgZ290ICdcIithK1wiJ1wiKX12YXIgcz10bih0LG8pO18odCl8fEFycmF5LmlzQXJyYXkodCl8fCh0PVt0XSk7dmFyIHU9XCJzdHJpbmdcIiE9PW8/eih0LG8saS5nZXRCb29sKFwiREVCVUdcIikpOm0odCxbXSwhMCk7cmV0dXJuIGN0Lm1ha2Uocyx7dmFsdWVzOnV9LG8pfWZ1bmN0aW9uIHJuKHQsZSxuLHIpe2lmKHZvaWQgMD09PXImJihyPVwibnVtZXJpY1wiKSwhQXJyYXkuaXNBcnJheSh0KSl0aHJvdyBuZXcgRXJyb3IoXCJBcmd1bWVudCBcIitlK1wiIHBhc3NlZCB0byBcIituK1wiIG11c3QgYmUgYSBgVGVuc29yW11gIG9yIGBUZW5zb3JMaWtlW11gXCIpO3JldHVybiB0Lm1hcChmdW5jdGlvbih0LHIpe3JldHVybiBubih0LGUrXCJbXCIrcitcIl1cIixuKX0scil9ZnVuY3Rpb24gb24odCxlKXtmb3IodmFyIG49MDtuPHQubGVuZ3RoOysrbilpZih0W3QubGVuZ3RoLW4tMV0hPT1lLTEtbilyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBhbih0LGUsbil7Zm9yKHZhciByPXQubGVuZ3RoK2UubGVuZ3RoLG89W10sYT0wLGk9MCxzPTA7czxyO3MrKyktMT09PW4uaW5kZXhPZihzKT9vLnB1c2godFthKytdKTpvLnB1c2goZVtpKytdKTtyZXR1cm4gb31mdW5jdGlvbiBzbih0LGUpe2Zvcih2YXIgbj1bXSxyPXQubGVuZ3RoLG89MDtvPHI7bysrKS0xPT09ZS5pbmRleE9mKG8pJiZuLnB1c2godFtvXSk7cmV0dXJuW24sZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KV19ZnVuY3Rpb24gdW4odCxlKXtyZXR1cm4gYW4odCxlLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gMX0pLGUpfWZ1bmN0aW9uIGxuKHQsZSxuKXtmKG9uKGUsbiksZnVuY3Rpb24oKXtyZXR1cm4gdCtcIiBzdXBwb3J0cyBvbmx5IGlubmVyLW1vc3QgYXhlcyBmb3Igbm93LiBHb3QgYXhlcyBcIitlK1wiIGFuZCByYW5rLVwiK24rXCIgaW5wdXQuXCJ9KX1mdW5jdGlvbiBjbih0LGUpe2lmKG9uKHQsZSkpcmV0dXJuIG51bGw7Zm9yKHZhciBuPVtdLHI9MDtyPGU7KytyKS0xPT09dC5pbmRleE9mKHIpJiZuLnB1c2gocik7cmV0dXJuIHQuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gbi5wdXNoKHQpfSksbn1mdW5jdGlvbiBobih0KXtyZXR1cm4gdC5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm5bZSx0XX0pLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFsxXS1lWzFdfSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfSl9ZnVuY3Rpb24gcG4odCxlKXtmb3IodmFyIG49W10scj1lLXQ7cjxlOysrciluLnB1c2gocik7cmV0dXJuIG59ZnVuY3Rpb24gZm4odCxlKXt2YXIgbj10WzBdLmxlbmd0aDt0LmZvckVhY2goZnVuY3Rpb24odCxlKXtmKHQubGVuZ3RoPT09bixmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29uY2F0XCIrbitcIkQ6IHJhbmsgb2YgdGVuc29yc1tcIitlK1wiXSBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSByYW5rIG9mIHRoZSByZXN0IChcIituK1wiKVwifSl9KSxmKGU+PTAmJmU8bixmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29uY2F0XCIrbitcIkQ6IGF4aXMgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIFwiKyhuLTEpK1wiLlwifSk7dmFyIHI9dFswXTt0LmZvckVhY2goZnVuY3Rpb24odCxvKXtmb3IodmFyIGE9MDthPG47YSsrKWYoYT09PWV8fHRbYV09PT1yW2FdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb25jYXRcIituK1wiRDogU2hhcGUgb2YgdGVuc29yc1tcIitvK1wiXSAoXCIrdCtcIikgZG9lcyBub3QgbWF0Y2ggdGhlIHNoYXBlIG9mIHRoZSByZXN0IChcIityK1wiKSBhbG9uZyB0aGUgbm9uLWNvbmNhdGVuYXRlZCBheGlzIFwiK28rXCIuXCJ9KX0pfWZ1bmN0aW9uIGRuKHQsZSl7Zm9yKHZhciBuPXRbMF0uc2xpY2UoKSxyPTE7cjx0Lmxlbmd0aDtyKyspbltlXSs9dFtyXVtlXTtyZXR1cm4gbn1mdW5jdGlvbiB2bih0KXt2YXIgZT1PYmplY3Qua2V5cyh0KTtpZigxIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHByb3ZpZGUgYW4gb2JqZWN0IHdpdGggYSBzaW5nbGUga2V5IChvcGVyYXRpb24gbmFtZSkgbWFwcGluZyB0byBhIGZ1bmN0aW9uLiBHb3QgYW4gb2JqZWN0IHdpdGggXCIrZS5sZW5ndGgrXCIga2V5cy5cIik7dmFyIG49ZVswXSxyPXRbbl07bi5lbmRzV2l0aChcIl9cIikmJihuPW4uc3Vic3RyaW5nKDAsbi5sZW5ndGgtMSkpO3ZhciBvPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PVtdLGU9MDtlPGFyZ3VtZW50cy5sZW5ndGg7ZSsrKXRbZV09YXJndW1lbnRzW2VdO1N0LnN0YXJ0U2NvcGUobik7dHJ5e3ZhciBvPXIuYXBwbHkodm9pZCAwLHQpO3JldHVybiBvIGluc3RhbmNlb2YgUHJvbWlzZSYmY29uc29sZS5lcnJvcihcIkNhbm5vdCByZXR1cm4gYSBQcm9taXNlIGluc2lkZSBvZiB0aWR5LlwiKSxTdC5lbmRTY29wZShvKSxvfWNhdGNoKHQpe3Rocm93IFN0LmVuZFNjb3BlKG51bGwpLHR9fTtyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sXCJuYW1lXCIse3ZhbHVlOm4sY29uZmlndXJhYmxlOiEwfSksb31pLnJlZ2lzdGVyRmxhZyhcIkhBU19XRUJHTFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT4wfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9WRVJTSU9OXCIsZnVuY3Rpb24oKXtyZXR1cm4gTmUoMik/MjpOZSgxKT8xOjB9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0JVRkZFUl9TVVBQT1JURURcIixmdW5jdGlvbigpe3JldHVybiAyPT09aS5nZXQoXCJXRUJHTF9WRVJTSU9OXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9DUFVfRk9SV0FSRFwiLGZ1bmN0aW9uKCl7cmV0dXJuITB9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0ZPUkNFX0YxNl9URVhUVVJFU1wiLGZ1bmN0aW9uKCl7cmV0dXJuITF9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJIQVNfV0VCR0xcIil9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfTk9STUFMSVpBVElPTlwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfQ0xJUFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfREVQVEhXSVNFQ09OVlwiLGZ1bmN0aW9uKCl7cmV0dXJuITF9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX0FSUkFZX09QRVJBVElPTlNcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX0lNQUdFX09QRVJBVElPTlNcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9QQUNLX1JFRFVDRVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0xBWklMWV9VTlBBQ0tcIixmdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9DT05WX0lNMkNPTFwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIil9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX01BWF9URVhUVVJFX1NJWkVcIixmdW5jdGlvbigpe3JldHVybiBFZShpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpfSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9NQVhfVEVYVFVSRVNfSU5fU0hBREVSXCIsZnVuY3Rpb24oKXtyZXR1cm4gUmUoaS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKX0pLGkucmVnaXN0ZXJGbGFnKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIixmdW5jdGlvbigpe3ZhciB0PWkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKTtyZXR1cm4gMD09PXQ/MDpJZSh0KX0pLGkucmVnaXN0ZXJGbGFnKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1JFTElBQkxFXCIsZnVuY3Rpb24oKXtyZXR1cm4gaS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKT4wJiYodD1uYXZpZ2F0b3IudXNlckFnZW50fHxuYXZpZ2F0b3IudmVuZG9yfHx3aW5kb3cub3BlcmEsISgvKGFuZHJvaWR8YmJcXGQrfG1lZWdvKS4rbW9iaWxlfGF2YW50Z298YmFkYVxcL3xibGFja2JlcnJ5fGJsYXplcnxjb21wYWx8ZWxhaW5lfGZlbm5lY3xoaXB0b3B8aWVtb2JpbGV8aXAoaG9uZXxvZCl8aXJpc3xraW5kbGV8bGdlIHxtYWVtb3xtaWRwfG1tcHxtb2JpbGUuK2ZpcmVmb3h8bmV0ZnJvbnR8b3BlcmEgbShvYnxpbilpfHBhbG0oIG9zKT98cGhvbmV8cChpeGl8cmUpXFwvfHBsdWNrZXJ8cG9ja2V0fHBzcHxzZXJpZXMoNHw2KTB8c3ltYmlhbnx0cmVvfHVwXFwuKGJyb3dzZXJ8bGluayl8dm9kYWZvbmV8d2FwfHdpbmRvd3MgY2V8eGRhfHhpaW5vL2kudGVzdCh0KXx8LzEyMDd8NjMxMHw2NTkwfDNnc298NHRocHw1MFsxLTZdaXw3NzBzfDgwMnN8YSB3YXxhYmFjfGFjKGVyfG9vfHNcXC0pfGFpKGtvfHJuKXxhbChhdnxjYXxjbyl8YW1vaXxhbihleHxueXx5dyl8YXB0dXxhcihjaHxnbyl8YXModGV8dXMpfGF0dHd8YXUoZGl8XFwtbXxyIHxzICl8YXZhbnxiZShja3xsbHxucSl8YmkobGJ8cmQpfGJsKGFjfGF6KXxicihlfHYpd3xidW1ifGJ3XFwtKG58dSl8YzU1XFwvfGNhcGl8Y2N3YXxjZG1cXC18Y2VsbHxjaHRtfGNsZGN8Y21kXFwtfGNvKG1wfG5kKXxjcmF3fGRhKGl0fGxsfG5nKXxkYnRlfGRjXFwtc3xkZXZpfGRpY2F8ZG1vYnxkbyhjfHApb3xkcygxMnxcXC1kKXxlbCg0OXxhaSl8ZW0obDJ8dWwpfGVyKGljfGswKXxlc2w4fGV6KFs0LTddMHxvc3x3YXx6ZSl8ZmV0Y3xmbHkoXFwtfF8pfGcxIHV8ZzU2MHxnZW5lfGdmXFwtNXxnXFwtbW98Z28oXFwud3xvZCl8Z3IoYWR8dW4pfGhhaWV8aGNpdHxoZFxcLShtfHB8dCl8aGVpXFwtfGhpKHB0fHRhKXxocCggaXxpcCl8aHNcXC1jfGh0KGMoXFwtfCB8X3xhfGd8cHxzfHQpfHRwKXxodShhd3x0Yyl8aVxcLSgyMHxnb3xtYSl8aTIzMHxpYWMoIHxcXC18XFwvKXxpYnJvfGlkZWF8aWcwMXxpa29tfGltMWt8aW5ub3xpcGFxfGlyaXN8amEodHx2KWF8amJyb3xqZW11fGppZ3N8a2RkaXxrZWppfGtndCggfFxcLyl8a2xvbnxrcHQgfGt3Y1xcLXxreW8oY3xrKXxsZShub3x4aSl8bGcoIGd8XFwvKGt8bHx1KXw1MHw1NHxcXC1bYS13XSl8bGlid3xseW54fG0xXFwtd3xtM2dhfG01MFxcL3xtYSh0ZXx1aXx4byl8bWMoMDF8MjF8Y2EpfG1cXC1jcnxtZShyY3xyaSl8bWkobzh8b2F8dHMpfG1tZWZ8bW8oMDF8MDJ8Yml8ZGV8ZG98dChcXC18IHxvfHYpfHp6KXxtdCg1MHxwMXx2ICl8bXdicHxteXdhfG4xMFswLTJdfG4yMFsyLTNdfG4zMCgwfDIpfG41MCgwfDJ8NSl8bjcoMCgwfDEpfDEwKXxuZSgoY3xtKVxcLXxvbnx0Znx3Znx3Z3x3dCl8bm9rKDZ8aSl8bnpwaHxvMmltfG9wKHRpfHd2KXxvcmFufG93ZzF8cDgwMHxwYW4oYXxkfHQpfHBkeGd8cGcoMTN8XFwtKFsxLThdfGMpKXxwaGlsfHBpcmV8cGwoYXl8dWMpfHBuXFwtMnxwbyhja3xydHxzZSl8cHJveHxwc2lvfHB0XFwtZ3xxYVxcLWF8cWMoMDd8MTJ8MjF8MzJ8NjB8XFwtWzItN118aVxcLSl8cXRla3xyMzgwfHI2MDB8cmFrc3xyaW05fHJvKHZlfHpvKXxzNTVcXC98c2EoZ2V8bWF8bW18bXN8bnl8dmEpfHNjKDAxfGhcXC18b298cFxcLSl8c2RrXFwvfHNlKGMoXFwtfDB8MSl8NDd8bWN8bmR8cmkpfHNnaFxcLXxzaGFyfHNpZShcXC18bSl8c2tcXC0wfHNsKDQ1fGlkKXxzbShhbHxhcnxiM3xpdHx0NSl8c28oZnR8bnkpfHNwKDAxfGhcXC18dlxcLXx2ICl8c3koMDF8bWIpfHQyKDE4fDUwKXx0NigwMHwxMHwxOCl8dGEoZ3R8bGspfHRjbFxcLXx0ZGdcXC18dGVsKGl8bSl8dGltXFwtfHRcXC1tb3x0byhwbHxzaCl8dHMoNzB8bVxcLXxtM3xtNSl8dHhcXC05fHVwKFxcLmJ8ZzF8c2kpfHV0c3R8djQwMHx2NzUwfHZlcml8dmkocmd8dGUpfHZrKDQwfDVbMC0zXXxcXC12KXx2bTQwfHZvZGF8dnVsY3x2eCg1Mnw1M3w2MHw2MXw3MHw4MHw4MXw4M3w4NXw5OCl8dzNjKFxcLXwgKXx3ZWJjfHdoaXR8d2koZyB8bmN8bncpfHdtbGJ8d29udXx4NzAwfHlhc1xcLXx5b3VyfHpldG98enRlXFwtL2kudGVzdCh0LnN1YnN0cigwLDQpKSkpO3ZhciB0fSksaS5yZWdpc3RlckZsYWcoXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9DQVBBQkxFXCIsZnVuY3Rpb24oKXtyZXR1cm4gU2UoaS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKX0pLGkucmVnaXN0ZXJGbGFnKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfRU5BQkxFRFwiLGZ1bmN0aW9uKCl7cmV0dXJuIWkuZ2V0Qm9vbChcIldFQkdMX0ZPUkNFX0YxNl9URVhUVVJFU1wiKSYmaS5nZXRCb29sKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfQ0FQQUJMRVwiKX0pLGkucmVnaXN0ZXJGbGFnKFwiV0VCR0xfRE9XTkxPQURfRkxPQVRfRU5BQkxFRFwiLGZ1bmN0aW9uKCl7cmV0dXJuIEFlKGkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKSl9KSxpLnJlZ2lzdGVyRmxhZyhcIldFQkdMX0ZFTkNFX0FQSV9FTkFCTEVEXCIsZnVuY3Rpb24oKXtyZXR1cm4gRGUoaS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKX0pLGkucmVnaXN0ZXJGbGFnKFwiV0VCR0xfU0laRV9VUExPQURfVU5JRk9STVwiLGZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIldFQkdMX1JFTkRFUl9GTE9BVDMyX0VOQUJMRURcIik/NDowfSksbHQ9QmU7dmFyIG1uPXZuKHtjb21wbGV4XzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKHQsXCJyZWFsXCIsXCJjb21wbGV4XCIpLHI9bm4oZSxcImltYWdcIixcImNvbXBsZXhcIik7cmV0dXJuIGQobi5zaGFwZSxyLnNoYXBlLFwicmVhbCBhbmQgaW1hZyBzaGFwZXMsIFwiK24uc2hhcGUrXCIgYW5kIFwiK3Iuc2hhcGUrXCIsIG11c3QgbWF0Y2ggaW4gY2FsbCB0byB0Zi5jb21wbGV4KCkuXCIpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb21wbGV4KG4scil9LHskcmVhbDpuLCRpbWFnOnJ9KX19KSxnbj12bih7cmVhbF86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcImlucHV0XCIsXCJyZWFsXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQucmVhbChlKX0seyRpbnB1dDplfSl9fSkseW49dm4oe2ltYWdfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJpbnB1dFwiLFwiaW1hZ1wiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmltYWcoZSl9LHskaW5wdXQ6ZX0pfX0pO2Z1bmN0aW9uIHhuKHQsZSxuKXtyZXR1cm4gYm4odCxlLHRuKHQsbiksbil9ZnVuY3Rpb24gYm4odCxlLG4scil7aWYobnVsbD09ciYmKHI9TCh0KSksXCJjb21wbGV4NjRcIj09PXIpdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbnN0cnVjdCBhIGNvbXBsZXg2NCB0ZW5zb3IgZGlyZWN0bHkuIFBsZWFzZSB1c2UgdGYuY29tcGxleChyZWFsLCBpbWFnKS5cIik7aWYoIV8odCkmJiFBcnJheS5pc0FycmF5KHQpJiZcIm51bWJlclwiIT10eXBlb2YgdCYmXCJib29sZWFuXCIhPXR5cGVvZiB0JiZcInN0cmluZ1wiIT10eXBlb2YgdCl0aHJvdyBuZXcgRXJyb3IoXCJ2YWx1ZXMgcGFzc2VkIHRvIHRlbnNvcih2YWx1ZXMpIG11c3QgYmUgYSBudW1iZXIvYm9vbGVhbi9zdHJpbmcgb3IgYW4gYXJyYXkgb2YgbnVtYmVycy9ib29sZWFucy9zdHJpbmdzLCBvciBhIFR5cGVkQXJyYXlcIik7aWYobnVsbCE9ZSl7SyhlKTt2YXIgbz1nKGUpLGE9ZyhuKTtmKG89PT1hLGZ1bmN0aW9uKCl7cmV0dXJuXCJCYXNlZCBvbiB0aGUgcHJvdmlkZWQgc2hhcGUsIFtcIitlK1wiXSwgdGhlIHRlbnNvciBzaG91bGQgaGF2ZSBcIitvK1wiIHZhbHVlcyBidXQgaGFzIFwiK2F9KTtmb3IodmFyIHM9MDtzPG4ubGVuZ3RoOysrcyl7dmFyIHU9bltzXSxsPXMhPT1uLmxlbmd0aC0xfHx1IT09ZyhlLnNsaWNlKHMpKTtmKG5bc109PT1lW3NdfHwhbCxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgY3JlYXRpbmcgYSBuZXcgVGVuc29yLiBJbmZlcnJlZCBzaGFwZSAoXCIrbitcIikgZG9lcyBub3QgbWF0Y2ggdGhlIHByb3ZpZGVkIHNoYXBlIChcIitlK1wiKS4gXCJ9KX19cmV0dXJuIF8odCl8fEFycmF5LmlzQXJyYXkodCl8fCh0PVt0XSksZT1lfHxuLHQ9XCJzdHJpbmdcIiE9PXI/eih0LHIsaS5nZXRCb29sKFwiREVCVUdcIikpOm0odCxbXSwhMCksY3QubWFrZShlLHt2YWx1ZXM6dH0scil9ZnVuY3Rpb24gd24odCxlKXtpZigoXyh0KSYmXCJzdHJpbmdcIiE9PWV8fEFycmF5LmlzQXJyYXkodCkpJiZcImNvbXBsZXg2NFwiIT09ZSl0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBjcmVhdGluZyBhIG5ldyBTY2FsYXI6IHZhbHVlIG11c3QgYmUgYSBwcmltaXRpdmUgKG51bWJlcnxib29sZWFufHN0cmluZylcIik7aWYoXCJzdHJpbmdcIj09PWUmJl8odCkmJiEodCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IG5ldyBFcnJvcihcIldoZW4gbWFraW5nIGEgc2NhbGFyIGZyb20gZW5jb2RlZCBzdHJpbmcsIHRoZSB2YWx1ZSBtdXN0IGJlIGBVaW50OEFycmF5YC5cIik7cmV0dXJuIGJuKHQsW10sW10sZSl9ZnVuY3Rpb24gQ24odCxlKXt2KHQpO3ZhciBuPXRuKHQsZSk7aWYoMSE9PW4ubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjFkKCkgcmVxdWlyZXMgdmFsdWVzIHRvIGJlIGEgZmxhdC9UeXBlZEFycmF5XCIpO3JldHVybiBibih0LG51bGwsbixlKX1mdW5jdGlvbiBFbih0LGUsbil7aWYodih0KSxudWxsIT1lJiYyIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yMmQoKSByZXF1aXJlcyBzaGFwZSB0byBoYXZlIHR3byBudW1iZXJzXCIpO3ZhciByPXRuKHQsbik7aWYoMiE9PXIubGVuZ3RoJiYxIT09ci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yMmQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXSBvciBmbGF0L1R5cGVkQXJyYXlcIik7aWYoMT09PXIubGVuZ3RoJiZudWxsPT1lKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjJkKCkgcmVxdWlyZXMgc2hhcGUgdG8gYmUgcHJvdmlkZWQgd2hlbiBgdmFsdWVzYCBhcmUgYSBmbGF0L1R5cGVkQXJyYXlcIik7cmV0dXJuIGJuKHQsZSxyLG4pfWZ1bmN0aW9uIFJuKHQsZSxuKXtpZih2KHQpLG51bGwhPWUmJjMhPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3IzZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgdGhyZWUgbnVtYmVyc1wiKTt2YXIgcj10bih0LG4pO2lmKDMhPT1yLmxlbmd0aCYmMSE9PXIubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjNkKCkgcmVxdWlyZXMgdmFsdWVzIHRvIGJlIG51bWJlcltdW11bXSBvciBmbGF0L1R5cGVkQXJyYXlcIik7aWYoMT09PXIubGVuZ3RoJiZudWxsPT1lKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjNkKCkgcmVxdWlyZXMgc2hhcGUgdG8gYmUgcHJvdmlkZWQgd2hlbiBgdmFsdWVzYCBhcmUgYSBmbGF0IGFycmF5XCIpO3JldHVybiBibih0LGUscixuKX1mdW5jdGlvbiBJbih0LGUsbil7aWYodih0KSxudWxsIT1lJiY0IT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNGQoKSByZXF1aXJlcyBzaGFwZSB0byBoYXZlIGZvdXIgbnVtYmVyc1wiKTt2YXIgcj10bih0LG4pO2lmKDQhPT1yLmxlbmd0aCYmMSE9PXIubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjRkKCkgcmVxdWlyZXMgdmFsdWVzIHRvIGJlIG51bWJlcltdW11bXVtdIG9yIGZsYXQvVHlwZWRBcnJheVwiKTtpZigxPT09ci5sZW5ndGgmJm51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNGQoKSByZXF1aXJlcyBzaGFwZSB0byBiZSBwcm92aWRlZCB3aGVuIGB2YWx1ZXNgIGFyZSBhIGZsYXQgYXJyYXlcIik7cmV0dXJuIGJuKHQsZSxyLG4pfWZ1bmN0aW9uIGtuKHQsZSxuKXtpZih2KHQpLG51bGwhPWUmJjUhPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJ0ZW5zb3I1ZCgpIHJlcXVpcmVzIHNoYXBlIHRvIGhhdmUgZml2ZSBudW1iZXJzXCIpO3ZhciByPXRuKHQsbik7aWYoNSE9PXIubGVuZ3RoJiYxIT09ci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNWQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXVtdW11bXSBvciBmbGF0L1R5cGVkQXJyYXlcIik7aWYoMT09PXIubGVuZ3RoJiZudWxsPT1lKXRocm93IG5ldyBFcnJvcihcInRlbnNvcjVkKCkgcmVxdWlyZXMgc2hhcGUgdG8gYmUgcHJvdmlkZWQgd2hlbiBgdmFsdWVzYCBhcmUgYSBmbGF0IGFycmF5XCIpO3JldHVybiBibih0LGUscixuKX1mdW5jdGlvbiBObih0LGUsbil7aWYodih0KSxudWxsIT1lJiY2IT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNmQoKSByZXF1aXJlcyBzaGFwZSB0byBoYXZlIHNpeCBudW1iZXJzXCIpO3ZhciByPXRuKHQsbik7aWYoNiE9PXIubGVuZ3RoJiYxIT09ci5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNmQoKSByZXF1aXJlcyB2YWx1ZXMgdG8gYmUgbnVtYmVyW11bXVtdW11bXVtdIG9yIGZsYXQvVHlwZWRBcnJheVwiKTtpZigxPT09ci5sZW5ndGgmJm51bGw9PWUpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yNmQoKSByZXF1aXJlcyBzaGFwZSB0byBiZSBwcm92aWRlZCB3aGVuIGB2YWx1ZXNgIGFyZSBhIGZsYXQgYXJyYXlcIik7cmV0dXJuIGJuKHQsZT1lfHxyLHIsbil9ZnVuY3Rpb24gU24odCxlKXtpZih2b2lkIDA9PT1lJiYoZT1cImZsb2F0MzJcIiksXCJjb21wbGV4NjRcIj09PWUpe3ZhciBuPVNuKHQsXCJmbG9hdDMyXCIpLHI9QW4odCxcImZsb2F0MzJcIik7cmV0dXJuIG1uKG4scil9dmFyIG89SChnKHQpLGUpO3JldHVybiBjdC5tYWtlKHQse3ZhbHVlczpvfSxlKX1mdW5jdGlvbiBBbih0LGUpe2lmKHZvaWQgMD09PWUmJihlPVwiZmxvYXQzMlwiKSxcImNvbXBsZXg2NFwiPT09ZSl7dmFyIG49QW4odCxcImZsb2F0MzJcIikscj1Bbih0LFwiZmxvYXQzMlwiKTtyZXR1cm4gbW4obixyKX12YXIgbz1xKGcodCksZSk7cmV0dXJuIGN0Lm1ha2UodCx7dmFsdWVzOm99LGUpfWZ1bmN0aW9uIFRuKHQsZSxuKXtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHIpe3JldHVybiByLmZpbGwodCxlLG4pfSx7fSl9ZnVuY3Rpb24gRG4odCxlLG4pe2lmKG48PTApdGhyb3cgbmV3IEVycm9yKFwiVGhlIG51bWJlciBvZiB2YWx1ZXMgc2hvdWxkIGJlIHBvc2l0aXZlLlwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHIpe3JldHVybiByLmxpbnNwYWNlKHQsZSxuKX0se30pfWZ1bmN0aW9uIF9uKHQsZSxuLHIpe2lmKHZvaWQgMD09PW4mJihuPTEpLHZvaWQgMD09PXImJihyPVwiZmxvYXQzMlwiKSwwPT09bil0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgaGF2ZSBhIHN0ZXAgb2YgemVyb1wiKTtpZih0PT09ZXx8dDxlJiZuPDB8fGU8dCYmbj4xKXJldHVybiBBbihbMF0scik7dmFyIG89cShNYXRoLmFicyhNYXRoLmNlaWwoKGUtdCkvbikpLHIpO2U8dCYmMT09PW4mJihuPS0xKSxvWzBdPXQ7Zm9yKHZhciBhPTE7YTxvLmxlbmd0aDthKyspb1thXT1vW2EtMV0rbjtyZXR1cm4gQ24obyxyKX12YXIgT249dm4oe29uZXNMaWtlXzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwib25lc0xpa2VcIik7aWYoXCJjb21wbGV4NjRcIj09PWUuZHR5cGUpe3ZhciBuPU9uKGduKGUpKSxyPUZuKHluKGUpKTtyZXR1cm4gbW4obixyKX1yZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm9uZXNMaWtlKGUpfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gRm4odCl9fX0pfX0pLEZuPXZuKHt6ZXJvc0xpa2VfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJ6ZXJvc0xpa2VcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC56ZXJvc0xpa2UoZSl9LHskeDplfSxmdW5jdGlvbih0LGUpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBGbih0KX19fSl9fSk7dmFyIE1uPXZuKHtjb25jYXRfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCksZih0Lmxlbmd0aD49MSxmdW5jdGlvbigpe3JldHVyblwiUGFzcyBhdCBsZWFzdCBvbmUgdGVuc29yIHRvIGNvbmNhdFwifSk7dmFyIG49cm4odCxcInRlbnNvcnNcIixcImNvbmNhdFwiKTtcImNvbXBsZXg2NFwiPT09blswXS5kdHlwZSYmbi5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKFwiY29tcGxleDY0XCIhPT10LmR0eXBlKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb25jYXRlbmF0ZSBjb21wbGV4NjQgdGVuc29ycyB3aXRoIGEgdGVuc29yXFxuICAgICAgICAgIHdpdGggZHR5cGUgXCIrdC5kdHlwZStcIi4gXCIpfSksZT1JKGUsblswXS5zaGFwZSlbMF07dmFyIHI9ZG4obi5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KSxlKTtpZigwPT09ZyhyKSlyZXR1cm4geG4oW10scik7aWYoMT09PShuPW4uZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNpemU+MH0pKS5sZW5ndGgpcmV0dXJuIG5bMF07dmFyIG89bi5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KTtmbihvLGUpO3ZhciBhPW47cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb25jYXQobixlKX0sYSxmdW5jdGlvbih0KXt2YXIgbj1vLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdFtlXX0pO3JldHVybiBVbih0LG4sZSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiB0fX0pfSl9fSksQm49dm4oe2NvbmNhdDFkXzpmdW5jdGlvbih0KXtyZXR1cm4gTW4odCwwKX19KSxQbj12bih7Y29uY2F0MmRfOmZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1uKHQsZSl9fSksTG49dm4oe2NvbmNhdDNkXzpmdW5jdGlvbih0LGUpe3JldHVybiBNbih0LGUpfX0pLFduPXZuKHtjb25jYXQ0ZF86ZnVuY3Rpb24odCxlKXtyZXR1cm4gTW4odCxlKX19KSxVbj12bih7c3BsaXRfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0wKTt2YXIgcixvPW5uKHQsXCJ4XCIsXCJzcGxpdFwiKTtyZXR1cm4gbj1JKG4sby5zaGFwZSlbMF0sXCJudW1iZXJcIj09dHlwZW9mIGU/KGYoby5zaGFwZVtuXSVlPT0wLGZ1bmN0aW9uKCl7cmV0dXJuXCJOdW1iZXIgb2Ygc3BsaXRzIG11c3QgZXZlbmx5IGRpdmlkZSB0aGUgYXhpcy5cIn0pLHI9bmV3IEFycmF5KGUpLmZpbGwoby5zaGFwZVtuXS9lKSk6KGYoby5zaGFwZVtuXT09PWUucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX0pLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgc3VtIG9mIHNpemVzIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgdGhlIGF4aXMgZGltZW5zaW9uLlwifSkscj1lKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3BsaXQobyxyLG4pfSx7JHg6b30sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIE1uKHQsbil9fX0pfX0pO1widW5kZWZpbmVkXCIhPXR5cGVvZiBnbG9iYWxUaGlzP2dsb2JhbFRoaXM6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHdpbmRvdz93aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9nbG9iYWw6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNlbGYmJnNlbGY7ZnVuY3Rpb24gVm4odCxlKXtyZXR1cm4gdChlPXtleHBvcnRzOnt9fSxlLmV4cG9ydHMpLGUuZXhwb3J0c312YXIgem49Vm4oZnVuY3Rpb24odCl7IWZ1bmN0aW9uKHQsZSxuKXtmdW5jdGlvbiByKHQpe3ZhciBlLG49dGhpcyxyPShlPTQwMjI4NzExOTcsZnVuY3Rpb24odCl7dD10LnRvU3RyaW5nKCk7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe3ZhciByPS4wMjUxOTYwMzI4MjQxNjkzOCooZSs9dC5jaGFyQ29kZUF0KG4pKTtyLT1lPXI+Pj4wLGU9KHIqPWUpPj4+MCxlKz00Mjk0OTY3Mjk2KihyLT1lKX1yZXR1cm4gMi4zMjgzMDY0MzY1Mzg2OTYzZS0xMCooZT4+PjApfSk7bi5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9MjA5MTYzOSpuLnMwKzIuMzI4MzA2NDM2NTM4Njk2M2UtMTAqbi5jO3JldHVybiBuLnMwPW4uczEsbi5zMT1uLnMyLG4uczI9dC0obi5jPTB8dCl9LG4uYz0xLG4uczA9cihcIiBcIiksbi5zMT1yKFwiIFwiKSxuLnMyPXIoXCIgXCIpLG4uczAtPXIodCksbi5zMDwwJiYobi5zMCs9MSksbi5zMS09cih0KSxuLnMxPDAmJihuLnMxKz0xKSxuLnMyLT1yKHQpLG4uczI8MCYmKG4uczIrPTEpLHI9bnVsbH1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUuYz10LmMsZS5zMD10LnMwLGUuczE9dC5zMSxlLnMyPXQuczIsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9bi5uZXh0O3JldHVybiBpLmludDMyPWZ1bmN0aW9uKCl7cmV0dXJuIDQyOTQ5NjcyOTYqbi5uZXh0KCl8MH0saS5kb3VibGU9ZnVuY3Rpb24oKXtyZXR1cm4gaSgpKzEuMTEwMjIzMDI0NjI1MTU2NWUtMTYqKDIwOTcxNTIqaSgpfDApfSxpLnF1aWNrPWksYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bihmdW5jdGlvbigpe3JldHVybiBhfSk6dGhpcy5hbGVhPWF9KDAsdCwhMSl9KSxHbj1WbihmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcyxuPVwiXCI7ZS54PTAsZS55PTAsZS56PTAsZS53PTAsZS5uZXh0PWZ1bmN0aW9uKCl7dmFyIHQ9ZS54XmUueDw8MTE7cmV0dXJuIGUueD1lLnksZS55PWUueixlLno9ZS53LGUud149ZS53Pj4+MTledF50Pj4+OH0sdD09PSgwfHQpP2UueD10Om4rPXQ7Zm9yKHZhciByPTA7cjxuLmxlbmd0aCs2NDtyKyspZS54Xj0wfG4uY2hhckNvZGVBdChyKSxlLm5leHQoKX1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUueD10LngsZS55PXQueSxlLno9dC56LGUudz10LncsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9ZnVuY3Rpb24oKXtyZXR1cm4obi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2fTtyZXR1cm4gaS5kb3VibGU9ZnVuY3Rpb24oKXtkb3t2YXIgdD0oKG4ubmV4dCgpPj4+MTEpKyhuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTYpLygxPDwyMSl9d2hpbGUoMD09PXQpO3JldHVybiB0fSxpLmludDMyPW4ubmV4dCxpLnF1aWNrPWksYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bihmdW5jdGlvbigpe3JldHVybiBhfSk6dGhpcy54b3IxMjg9YX0oMCx0LCExKX0pLEhuPVZuKGZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXt2YXIgZT10aGlzLG49XCJcIjtlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgdD1lLnheZS54Pj4+MjtyZXR1cm4gZS54PWUueSxlLnk9ZS56LGUuej1lLncsZS53PWUudiwoZS5kPWUuZCszNjI0Mzd8MCkrKGUudj1lLnZeZS52PDw0XnRedDw8MSl8MH0sZS54PTAsZS55PTAsZS56PTAsZS53PTAsZS52PTAsdD09PSgwfHQpP2UueD10Om4rPXQ7Zm9yKHZhciByPTA7cjxuLmxlbmd0aCs2NDtyKyspZS54Xj0wfG4uY2hhckNvZGVBdChyKSxyPT1uLmxlbmd0aCYmKGUuZD1lLng8PDEwXmUueD4+PjQpLGUubmV4dCgpfWZ1bmN0aW9uIG8odCxlKXtyZXR1cm4gZS54PXQueCxlLnk9dC55LGUuej10LnosZS53PXQudyxlLnY9dC52LGUuZD10LmQsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9ZnVuY3Rpb24oKXtyZXR1cm4obi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2fTtyZXR1cm4gaS5kb3VibGU9ZnVuY3Rpb24oKXtkb3t2YXIgdD0oKG4ubmV4dCgpPj4+MTEpKyhuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTYpLygxPDwyMSl9d2hpbGUoMD09PXQpO3JldHVybiB0fSxpLmludDMyPW4ubmV4dCxpLnF1aWNrPWksYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bihmdW5jdGlvbigpe3JldHVybiBhfSk6dGhpcy54b3J3b3c9YX0oMCx0LCExKX0pLHFuPVZuKGZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXt2YXIgZT10aGlzO2UubmV4dD1mdW5jdGlvbigpe3ZhciB0LG4scj1lLngsbz1lLmk7cmV0dXJuIHQ9cltvXSxuPSh0Xj10Pj4+NyledDw8MjQsbl49KHQ9cltvKzEmN10pXnQ+Pj4xMCxuXj0odD1yW28rMyY3XSledD4+PjMsbl49KHQ9cltvKzQmN10pXnQ8PDcsdD1yW28rNyY3XSxuXj0odF49dDw8MTMpXnQ8PDkscltvXT1uLGUuaT1vKzEmNyxufSxmdW5jdGlvbih0LGUpe3ZhciBuLHI9W107aWYoZT09PSgwfGUpKXJbMF09ZTtlbHNlIGZvcihlPVwiXCIrZSxuPTA7bjxlLmxlbmd0aDsrK24pcls3Jm5dPXJbNyZuXTw8MTVeZS5jaGFyQ29kZUF0KG4pK3JbbisxJjddPDwxMztmb3IoO3IubGVuZ3RoPDg7KXIucHVzaCgwKTtmb3Iobj0wO248OCYmMD09PXJbbl07KytuKTtmb3IoOD09bj9yWzddPS0xOnJbbl0sdC54PXIsdC5pPTAsbj0yNTY7bj4wOy0tbil0Lm5leHQoKX0oZSx0KX1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUueD10Lnguc2xpY2UoKSxlLmk9dC5pLGV9ZnVuY3Rpb24gYSh0LGUpe251bGw9PXQmJih0PStuZXcgRGF0ZSk7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9ZnVuY3Rpb24oKXtyZXR1cm4obi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2fTtyZXR1cm4gaS5kb3VibGU9ZnVuY3Rpb24oKXtkb3t2YXIgdD0oKG4ubmV4dCgpPj4+MTEpKyhuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTYpLygxPDwyMSl9d2hpbGUoMD09PXQpO3JldHVybiB0fSxpLmludDMyPW4ubmV4dCxpLnF1aWNrPWksYSYmKGEueCYmbyhhLG4pLGkuc3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gbyhuLHt9KX0pLGl9ZSYmZS5leHBvcnRzP2UuZXhwb3J0cz1hOm4mJm4uYW1kP24oZnVuY3Rpb24oKXtyZXR1cm4gYX0pOnRoaXMueG9yc2hpZnQ3PWF9KDAsdCwhMSl9KSwkbj1WbihmdW5jdGlvbih0KXshZnVuY3Rpb24odCxlLG4pe2Z1bmN0aW9uIHIodCl7dmFyIGU9dGhpcztlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgdCxuLHI9ZS53LG89ZS5YLGE9ZS5pO3JldHVybiBlLnc9cj1yKzE2NDA1MzE1Mjd8MCxuPW9bYSszNCYxMjddLHQ9b1thPWErMSYxMjddLG5ePW48PDEzLHRePXQ8PDE3LG5ePW4+Pj4xNSx0Xj10Pj4+MTIsbj1vW2FdPW5edCxlLmk9YSxuKyhyXnI+Pj4xNil8MH0sZnVuY3Rpb24odCxlKXt2YXIgbixyLG8sYSxpLHM9W10sdT0xMjg7Zm9yKGU9PT0oMHxlKT8ocj1lLGU9bnVsbCk6KGUrPVwiXFwwXCIscj0wLHU9TWF0aC5tYXgodSxlLmxlbmd0aCkpLG89MCxhPS0zMjthPHU7KythKWUmJihyXj1lLmNoYXJDb2RlQXQoKGErMzIpJWUubGVuZ3RoKSksMD09PWEmJihpPXIpLHJePXI8PDEwLHJePXI+Pj4xNSxyXj1yPDw0LHJePXI+Pj4xMyxhPj0wJiYoaT1pKzE2NDA1MzE1Mjd8MCxvPTA9PShuPXNbMTI3JmFdXj1yK2kpP28rMTowKTtmb3Iobz49MTI4JiYoc1sxMjcmKGUmJmUubGVuZ3RofHwwKV09LTEpLG89MTI3LGE9NTEyO2E+MDstLWEpcj1zW28rMzQmMTI3XSxuPXNbbz1vKzEmMTI3XSxyXj1yPDwxMyxuXj1uPDwxNyxyXj1yPj4+MTUsbl49bj4+PjEyLHNbb109cl5uO3Qudz1pLHQuWD1zLHQuaT1vfShlLHQpfWZ1bmN0aW9uIG8odCxlKXtyZXR1cm4gZS5pPXQuaSxlLnc9dC53LGUuWD10Llguc2xpY2UoKSxlfWZ1bmN0aW9uIGEodCxlKXtudWxsPT10JiYodD0rbmV3IERhdGUpO3ZhciBuPW5ldyByKHQpLGE9ZSYmZS5zdGF0ZSxpPWZ1bmN0aW9uKCl7cmV0dXJuKG4ubmV4dCgpPj4+MCkvNDI5NDk2NzI5Nn07cmV0dXJuIGkuZG91YmxlPWZ1bmN0aW9uKCl7ZG97dmFyIHQ9KChuLm5leHQoKT4+PjExKSsobi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2KS8oMTw8MjEpfXdoaWxlKDA9PT10KTtyZXR1cm4gdH0saS5pbnQzMj1uLm5leHQsaS5xdWljaz1pLGEmJihhLlgmJm8oYSxuKSxpLnN0YXRlPWZ1bmN0aW9uKCl7cmV0dXJuIG8obix7fSl9KSxpfWUmJmUuZXhwb3J0cz9lLmV4cG9ydHM9YTpuJiZuLmFtZD9uKGZ1bmN0aW9uKCl7cmV0dXJuIGF9KTp0aGlzLnhvcjQwOTY9YX0oMCx0LCExKX0pLEtuPVZuKGZ1bmN0aW9uKHQpeyFmdW5jdGlvbih0LGUsbil7ZnVuY3Rpb24gcih0KXt2YXIgZT10aGlzLG49XCJcIjtlLm5leHQ9ZnVuY3Rpb24oKXt2YXIgdD1lLmIsbj1lLmMscj1lLmQsbz1lLmE7cmV0dXJuIHQ9dDw8MjVedD4+PjdebixuPW4tcnwwLHI9cjw8MjRecj4+PjhebyxvPW8tdHwwLGUuYj10PXQ8PDIwXnQ+Pj4xMl5uLGUuYz1uPW4tcnwwLGUuZD1yPDwxNl5uPj4+MTZebyxlLmE9by10fDB9LGUuYT0wLGUuYj0wLGUuYz0tMTY0MDUzMTUyNyxlLmQ9MTM2NzEzMDU1MSx0PT09TWF0aC5mbG9vcih0KT8oZS5hPXQvNDI5NDk2NzI5NnwwLGUuYj0wfHQpOm4rPXQ7Zm9yKHZhciByPTA7cjxuLmxlbmd0aCsyMDtyKyspZS5iXj0wfG4uY2hhckNvZGVBdChyKSxlLm5leHQoKX1mdW5jdGlvbiBvKHQsZSl7cmV0dXJuIGUuYT10LmEsZS5iPXQuYixlLmM9dC5jLGUuZD10LmQsZX1mdW5jdGlvbiBhKHQsZSl7dmFyIG49bmV3IHIodCksYT1lJiZlLnN0YXRlLGk9ZnVuY3Rpb24oKXtyZXR1cm4obi5uZXh0KCk+Pj4wKS80Mjk0OTY3Mjk2fTtyZXR1cm4gaS5kb3VibGU9ZnVuY3Rpb24oKXtkb3t2YXIgdD0oKG4ubmV4dCgpPj4+MTEpKyhuLm5leHQoKT4+PjApLzQyOTQ5NjcyOTYpLygxPDwyMSl9d2hpbGUoMD09PXQpO3JldHVybiB0fSxpLmludDMyPW4ubmV4dCxpLnF1aWNrPWksYSYmKFwib2JqZWN0XCI9PXR5cGVvZiBhJiZvKGEsbiksaS5zdGF0ZT1mdW5jdGlvbigpe3JldHVybiBvKG4se30pfSksaX1lJiZlLmV4cG9ydHM/ZS5leHBvcnRzPWE6biYmbi5hbWQ/bihmdW5jdGlvbigpe3JldHVybiBhfSk6dGhpcy50eWNoZWk9YX0oMCx0LCExKX0pLGpuPVZuKGZ1bmN0aW9uKHQpeyFmdW5jdGlvbihlLG4pe3ZhciByLG89dGhpcyxhPTI1NixpPTYscz1cInJhbmRvbVwiLHU9bi5wb3coYSxpKSxsPW4ucG93KDIsNTIpLGM9MipsLGg9YS0xO2Z1bmN0aW9uIHAodCxoLHApe3ZhciBnPVtdLHk9dihmdW5jdGlvbiB0KGUsbil7dmFyIHIsbz1bXSxhPXR5cGVvZiBlO2lmKG4mJlwib2JqZWN0XCI9PWEpZm9yKHIgaW4gZSl0cnl7by5wdXNoKHQoZVtyXSxuLTEpKX1jYXRjaCh0KXt9cmV0dXJuIG8ubGVuZ3RoP286XCJzdHJpbmdcIj09YT9lOmUrXCJcXDBcIn0oKGg9MT09aD97ZW50cm9weTohMH06aHx8e30pLmVudHJvcHk/W3QsbShlKV06bnVsbD09dD9mdW5jdGlvbigpe3RyeXt2YXIgdDtyZXR1cm4gciYmKHQ9ci5yYW5kb21CeXRlcyk/dD10KGEpOih0PW5ldyBVaW50OEFycmF5KGEpLChvLmNyeXB0b3x8by5tc0NyeXB0bykuZ2V0UmFuZG9tVmFsdWVzKHQpKSxtKHQpfWNhdGNoKHQpe3ZhciBuPW8ubmF2aWdhdG9yLGk9biYmbi5wbHVnaW5zO3JldHVyblsrbmV3IERhdGUsbyxpLG8uc2NyZWVuLG0oZSldfX0oKTp0LDMpLGcpLHg9bmV3IGYoZyksYj1mdW5jdGlvbigpe2Zvcih2YXIgdD14LmcoaSksZT11LG49MDt0PGw7KXQ9KHQrbikqYSxlKj1hLG49eC5nKDEpO2Zvcig7dD49YzspdC89MixlLz0yLG4+Pj49MTtyZXR1cm4odCtuKS9lfTtyZXR1cm4gYi5pbnQzMj1mdW5jdGlvbigpe3JldHVybiAwfHguZyg0KX0sYi5xdWljaz1mdW5jdGlvbigpe3JldHVybiB4LmcoNCkvNDI5NDk2NzI5Nn0sYi5kb3VibGU9Yix2KG0oeC5TKSxlKSwoaC5wYXNzfHxwfHxmdW5jdGlvbih0LGUscixvKXtyZXR1cm4gbyYmKG8uUyYmZChvLHgpLHQuc3RhdGU9ZnVuY3Rpb24oKXtyZXR1cm4gZCh4LHt9KX0pLHI/KG5bc109dCxlKTp0fSkoYix5LFwiZ2xvYmFsXCJpbiBoP2guZ2xvYmFsOnRoaXM9PW4saC5zdGF0ZSl9ZnVuY3Rpb24gZih0KXt2YXIgZSxuPXQubGVuZ3RoLHI9dGhpcyxvPTAsaT1yLmk9ci5qPTAscz1yLlM9W107Zm9yKG58fCh0PVtuKytdKTtvPGE7KXNbb109bysrO2ZvcihvPTA7bzxhO28rKylzW29dPXNbaT1oJmkrdFtvJW5dKyhlPXNbb10pXSxzW2ldPWU7KHIuZz1mdW5jdGlvbih0KXtmb3IodmFyIGUsbj0wLG89ci5pLGk9ci5qLHM9ci5TO3QtLTspZT1zW289aCZvKzFdLG49biphK3NbaCYoc1tvXT1zW2k9aCZpK2VdKSsoc1tpXT1lKV07cmV0dXJuIHIuaT1vLHIuaj1pLG59KShhKX1mdW5jdGlvbiBkKHQsZSl7cmV0dXJuIGUuaT10LmksZS5qPXQuaixlLlM9dC5TLnNsaWNlKCksZX1mdW5jdGlvbiB2KHQsZSl7Zm9yKHZhciBuLHI9dCtcIlwiLG89MDtvPHIubGVuZ3RoOyllW2gmb109aCYobl49MTkqZVtoJm9dKStyLmNoYXJDb2RlQXQobysrKTtyZXR1cm4gbShlKX1mdW5jdGlvbiBtKHQpe3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KDAsdCl9aWYobltcInNlZWRcIitzXT1wLHYobi5yYW5kb20oKSxlKSx0LmV4cG9ydHMpe3QuZXhwb3J0cz1wO3RyeXtyPXJlcXVpcmUoXCJjcnlwdG9cIil9Y2F0Y2godCl7fX19KFtdLE1hdGgpfSk7am4uYWxlYT16bixqbi54b3IxMjg9R24sam4ueG9yd293PUhuLGpuLnhvcnNoaWZ0Nz1xbixqbi54b3I0MDk2PSRuLGpuLnR5Y2hlaT1Lbjt2YXIgWG49am4uYWxlYSxZbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4scixvKXt0aGlzLm1lYW49dCx0aGlzLnN0ZERldj1lLHRoaXMuZHR5cGU9bix0aGlzLm5leHRWYWw9TmFOLHRoaXMudHJ1bmNhdGVkPXIsdGhpcy50cnVuY2F0ZWQmJih0aGlzLnVwcGVyPXRoaXMubWVhbisyKnRoaXMuc3RkRGV2LHRoaXMubG93ZXI9dGhpcy5tZWFuLTIqdGhpcy5zdGREZXYpO3ZhciBhPW98fE1hdGgucmFuZG9tKCk7dGhpcy5yYW5kb209WG4oYS50b1N0cmluZygpKX1yZXR1cm4gdC5wcm90b3R5cGUubmV4dFZhbHVlPWZ1bmN0aW9uKCl7aWYoIWlzTmFOKHRoaXMubmV4dFZhbCkpe3ZhciB0PXRoaXMubmV4dFZhbDtyZXR1cm4gdGhpcy5uZXh0VmFsPU5hTix0fWZvcih2YXIgZSxuLHI9ITE7IXI7KXt2YXIgbz12b2lkIDAsYT12b2lkIDAsaT12b2lkIDA7ZG97aT0obz0yKnRoaXMucmFuZG9tKCktMSkqbysoYT0yKnRoaXMucmFuZG9tKCktMSkqYX13aGlsZShpPj0xfHwwPT09aSk7dmFyIHM9TWF0aC5zcXJ0KC0yKk1hdGgubG9nKGkpL2kpO2U9dGhpcy5tZWFuK3RoaXMuc3RkRGV2Km8qcyxuPXRoaXMubWVhbit0aGlzLnN0ZERldiphKnMsdGhpcy50cnVuY2F0ZWQmJiF0aGlzLmlzVmFsaWRUcnVuY2F0ZWQoZSl8fChyPSEwKX1yZXR1cm4gdGhpcy50cnVuY2F0ZWQmJiF0aGlzLmlzVmFsaWRUcnVuY2F0ZWQobil8fCh0aGlzLm5leHRWYWw9dGhpcy5jb252ZXJ0VmFsdWUobikpLHRoaXMuY29udmVydFZhbHVlKGUpfSx0LnByb3RvdHlwZS5jb252ZXJ0VmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXRoaXMuZHR5cGV8fFwiZmxvYXQzMlwiPT09dGhpcy5kdHlwZT90Ok1hdGgucm91bmQodCl9LHQucHJvdG90eXBlLmlzVmFsaWRUcnVuY2F0ZWQ9ZnVuY3Rpb24odCl7cmV0dXJuIHQ8PXRoaXMudXBwZXImJnQ+PXRoaXMubG93ZXJ9LHR9KCksUW49ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQsZSxuLHIpe3RoaXMuYWxwaGE9dCx0aGlzLmJldGE9MS9lLHRoaXMuZHR5cGU9bjt2YXIgbz1yfHxNYXRoLnJhbmRvbSgpO3RoaXMucmFuZHU9WG4oby50b1N0cmluZygpKSx0aGlzLnJhbmRuPW5ldyBZbigwLDEsbiwhMSx0aGlzLnJhbmR1KCkpLHRoaXMuZD10PDE/dCsyLzM6dC0xLzMsdGhpcy5jPTEvTWF0aC5zcXJ0KDkqdGhpcy5kKX1yZXR1cm4gdC5wcm90b3R5cGUubmV4dFZhbHVlPWZ1bmN0aW9uKCl7Zm9yKHZhciB0LGUsbixyLG8sYTs7KXtkb3tyPXRoaXMucmFuZG4ubmV4dFZhbHVlKCksYT0xK3RoaXMuYypyfXdoaWxlKGE8PTApO2lmKGEqPWEqYSxlPTEtLjMzMSoodD1yKnIpKnQsbj0uNSp0K3RoaXMuZCooMS1hK01hdGgubG9nKGEpKSwobz10aGlzLnJhbmR1KCkpPGV8fE1hdGgubG9nKG8pPG4pYnJlYWt9cmV0dXJuIGE9MS90aGlzLmJldGEqdGhpcy5kKmEsdGhpcy5hbHBoYTwxJiYoYSo9TWF0aC5wb3codGhpcy5yYW5kdSgpLDEvdGhpcy5hbHBoYSkpLHRoaXMuY29udmVydFZhbHVlKGEpfSx0LnByb3RvdHlwZS5jb252ZXJ0VmFsdWU9ZnVuY3Rpb24odCl7cmV0dXJuXCJmbG9hdDMyXCI9PT10aGlzLmR0eXBlP3Q6TWF0aC5yb3VuZCh0KX0sdH0oKSxKbj1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4scil7dmFyIG89dGhpcztpZih2b2lkIDA9PT10JiYodD0wKSx2b2lkIDA9PT1lJiYoZT0xKSx0aGlzLmNhblJldHVybkZsb2F0PWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PW8uZHR5cGV8fFwiZmxvYXQzMlwiPT09by5kdHlwZX0sdGhpcy5taW49dCx0aGlzLnJhbmdlPWUtdCx0aGlzLmR0eXBlPW4sbnVsbD09ciYmKHI9TWF0aC5yYW5kb20oKSksXCJudW1iZXJcIj09dHlwZW9mIHImJihyPXIudG9TdHJpbmcoKSksIXRoaXMuY2FuUmV0dXJuRmxvYXQoKSYmdGhpcy5yYW5nZTw9MSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZGlmZmVyZW5jZSBiZXR3ZWVuIFwiK3QrXCIgLSBcIitlK1wiIDw9IDEgYW5kIGR0eXBlIGlzIG5vdCBmbG9hdFwiKTt0aGlzLnJhbmRvbT1YbihyKX1yZXR1cm4gdC5wcm90b3R5cGUuY29udmVydFZhbHVlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmNhblJldHVybkZsb2F0KCk/dDpNYXRoLnJvdW5kKHQpfSx0LnByb3RvdHlwZS5uZXh0VmFsdWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb252ZXJ0VmFsdWUodGhpcy5taW4rdGhpcy5yYW5nZSp0aGlzLnJhbmRvbSgpKX0sdH0oKTtmdW5jdGlvbiBabih0LGUsbil7cmV0dXJuIHZvaWQgMD09PWUmJihlPVwiZmxvYXQzMlwiKSxlPWV8fFwiZmxvYXQzMlwiLEsodCksbmV3IGl0KHQsZSxuKX1mdW5jdGlvbiB0cih0LGUpe3ZvaWQgMD09PWUmJihlPSExKSxjb25zb2xlLmxvZyh0LnRvU3RyaW5nKGUpKX12YXIgZXI9dm4oe2JhdGNoVG9TcGFjZU5EXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bm4odCxcInhcIixcImJhdGNoVG9TcGFjZU5EXCIpLG89ZS5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSk7cmV0dXJuIGYoci5yYW5rPj0xK2UubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJpbnB1dCByYW5rIGlzIFwiK3IucmFuaytcIiBidXQgc2hvdWxkIGJlID4gdGhhbiBibG9ja1NoYXBlLmxlbmd0aCBcIitlLmxlbmd0aH0pLGYobi5sZW5ndGg9PT1lLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiY3JvcHMubGVuZ3RoIGlzIFwiK24ubGVuZ3RoK1wiIGJ1dCBzaG91bGQgYmUgZXF1YWwgdG8gYmxvY2tTaGFwZS5sZW5ndGggIFwiK2UubGVuZ3RofSksZihyLnNoYXBlWzBdJW89PTAsZnVuY3Rpb24oKXtyZXR1cm5cImlucHV0IHRlbnNvciBiYXRjaCBpcyBcIityLnNoYXBlWzBdK1wiIGJ1dCBpcyBub3QgZGl2aXNpYmxlIGJ5IHRoZSBwcm9kdWN0IG9mIHRoZSBlbGVtZW50cyBvZiBibG9ja1NoYXBlIFwiK2Uuam9pbihcIiAqIFwiKStcIiA9PT0gXCIrb30pLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5iYXRjaFRvU3BhY2VORChyLGUsbil9LHskeDpyfSxmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5zcGFjZVRvQmF0Y2hORChlLG4pfX19KX19KSxucj12bih7Y2FzdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwieFwiLFwiY2FzdFwiKTtpZighVChlKSl0aHJvdyBuZXcgRXJyb3IoXCJGYWlsZWQgdG8gY2FzdCB0byB1bmtub3duIGR0eXBlIFwiK2UpO2lmKFwic3RyaW5nXCI9PT1lJiZcInN0cmluZ1wiIT09bi5kdHlwZXx8XCJzdHJpbmdcIiE9PWUmJlwic3RyaW5nXCI9PT1uLmR0eXBlKXRocm93IG5ldyBFcnJvcihcIk9ubHkgc3RyaW5ncyBjYW4gYmUgY2FzdGVkIHRvIHN0cmluZ3NcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5jYXN0KG4sZSl9LHskeDpufSxmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5jbG9uZSgpfX19KX19KSxycj12bih7Y2xvbmVfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJjbG9uZVwiLG51bGwpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIGN0Lm1ha2UoZS5zaGFwZSx7ZGF0YUlkOmUuZGF0YUlkfSxlLmR0eXBlKX0seyR4OmV9LGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LnRvRmxvYXQoKX19fSl9fSksb3I9dm4oe2N1bXN1bV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09biYmKG49ITEpLHZvaWQgMD09PXImJihyPSExKTt2YXIgbz1ubih0LFwieFwiLFwiY3Vtc3VtXCIpLGE9Y24oW2V8PTBdLG8ucmFuayksaT1vO251bGwhPWEmJihpPW8udHJhbnNwb3NlKGEpKTt2YXIgcz1wbigxLG8ucmFuaylbMF0sdT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuY3Vtc3VtKGkscyxuLHIpfSx7cGVybXV0ZWRYOml9LGZ1bmN0aW9uKHQpe3JldHVybntwZXJtdXRlZFg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5jdW1zdW0oZSxuLCFyKX19fSk7cmV0dXJuIG51bGwhPWEmJih1PXUudHJhbnNwb3NlKGEpKSx1fX0pLGFyPXZuKHtkZXB0aFRvU3BhY2VfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj1cIk5IV0NcIik7dmFyIHI9bm4odCxcInhcIixcImRlcHRoVG9TcGFjZVwiKSxvPVwiTkhXQ1wiPT09bj9yLnNoYXBlWzFdOnIuc2hhcGVbMl0sYT1cIk5IV0NcIj09PW4/ci5zaGFwZVsyXTpyLnNoYXBlWzNdLGk9XCJOSFdDXCI9PT1uP3Iuc2hhcGVbM106ci5zaGFwZVsxXTtyZXR1cm4gZihvKmU+PTAsZnVuY3Rpb24oKXtyZXR1cm5cIk5lZ2F0aXZlIGRpbWVuc2lvbiBzaXplIGNhdXNlZCBieSBvdmVyZmxvdyB3aGVuIG11bHRpcGx5aW5nXFxuICAgICAgXCIrbytcIiBhbmQgXCIrZStcIiAgZm9yIGRlcHRoVG9TcGFjZSB3aXRoIGlucHV0IHNoYXBlXFxuICAgICAgXCIrci5zaGFwZX0pLGYoYSplPj0wLGZ1bmN0aW9uKCl7cmV0dXJuXCJOZWdhdGl2ZSBkaW1lbnNpb24gc2l6ZSBjYXVzZWQgYnkgb3ZlcmZsb3cgd2hlbiBtdWx0aXBseWluZ1xcbiAgICAgIFwiK2ErXCIgYW5kIFwiK2UrXCIgZm9yIGRlcHRoVG9TcGFjZSB3aXRoIGlucHV0IHNoYXBlXFxuICAgICAgICAgIFwiK3Iuc2hhcGV9KSxmKGklKGUqZSk9PTAsZnVuY3Rpb24oKXtyZXR1cm5cIkRpbWVuc2lvbiBzaXplIG11c3QgYmUgZXZlbmx5IGRpdmlzaWJsZSBieSBcIitlKmUrXCIgYnV0IGlzIFwiK2krXCIgZm9yIGRlcHRoVG9TcGFjZSB3aXRoIGlucHV0IHNoYXBlIFwiK3Iuc2hhcGV9KSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuZGVwdGhUb1NwYWNlKHIsZSxuKX0seyR4OnJ9KX19KSxpcj12bih7ZXhwYW5kRGltc186ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0wKTt2YXIgbj1ubih0LFwieFwiLFwiZXhwYW5kRGltc1wiLG51bGwpO2YoZTw9bi5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJBeGlzIG11c3QgYmUgPD0gcmFuayBvZiB0aGUgdGVuc29yXCJ9KTt2YXIgcj1uLnNoYXBlLnNsaWNlKCk7cmV0dXJuIGU8MCYmKGYoLShuLnJhbmsrMSk8PWUsZnVuY3Rpb24oKXtyZXR1cm5cIkF4aXMgbXVzdCBiZSBpbiB0aGUgaW50ZXJ2YWwgW1wiKy0obi5yYW5rKzEpK1wiLCBcIituLnJhbmsrXCJdXCJ9KSxlPW4ucmFuaytlKzEpLHIuc3BsaWNlKGUsMCwxKSx4cihuLHIpfX0pLHNyPXZuKHtleWVfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPVwiZmxvYXQzMlwiKSxudWxsPT1lJiYoZT10KTtmb3IodmFyIG89Wm4oW3QsZV0sciksYT10PD1lP3Q6ZSxpPTA7aTxhOysraSlvLnNldCgxLGksaSk7dmFyIHM9by50b1RlbnNvcigpLmFzMkQodCxlKTtpZihudWxsPT1uKXJldHVybiBzO2lmKDE9PT1uLmxlbmd0aClyZXR1cm4gRXIoaXIocywwKSxbblswXSwxLDFdKTtpZigyPT09bi5sZW5ndGgpcmV0dXJuIEVyKGlyKGlyKHMsMCksMCksW25bMF0sblsxXSwxLDFdKTtpZigzPT09bi5sZW5ndGgpcmV0dXJuIEVyKGlyKGlyKGlyKHMsMCksMCksMCksW25bMF0sblsxXSxuWzJdLDEsMV0pO3Rocm93IG5ldyBFcnJvcihcImV5ZSgpIGN1cnJlbnRseSBzdXBwb3J0cyBvbmx5IDFEIGFuZCAyRCBiYXRjaFNoYXBlcywgYnV0IHJlY2VpdmVkIFwiK24ubGVuZ3RoK1wiRC5cIil9fSksdXI9dm4oe211bHRpbm9taWFsXzpmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMSk7dmFyIG89bm4odCxcImxvZ2l0c1wiLFwibXVsdGlub21pYWxcIiksYT1vLnNpemUsaT1vLnJhbms7aWYoYTwyKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG11bHRpbm9taWFsOiB5b3UgbmVlZCBhdCBsZWFzdCAyIG91dGNvbWVzLCBidXQgZ290IFwiK2ErXCIuXCIpO2lmKGk+Mil0aHJvdyBuZXcgRXJyb3IoXCJSYW5rIG9mIHByb2JhYmlsaXRpZXMgbXVzdCBiZSAxIG9yIDIsIGJ1dCBpcyBcIitpKTtuPW58fE1hdGgucmFuZG9tKCk7dmFyIHM9MT09PWk/by5hczJEKDEsLTEpOm8sdT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQubXVsdGlub21pYWwocyxyLGUsbil9LHtsb2dpdHMyRDpzfSk7cmV0dXJuIDE9PT1pP3UuYXMxRCgpOnV9fSksbHI9dm4oe29uZUhvdF86ZnVuY3Rpb24odCxlLG4scil7aWYodm9pZCAwPT09biYmKG49MSksdm9pZCAwPT09ciYmKHI9MCksZTwyKXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG9uZUhvdDogZGVwdGggbXVzdCBiZSA+PTIsIGJ1dCBpdCBpcyBcIitlKTt2YXIgbz1ubih0LFwiaW5kaWNlc1wiLFwib25lSG90XCIsXCJpbnQzMlwiKSxhPW8uc2hhcGUuY29uY2F0KFtlXSk7cmV0dXJuIG89by5mbGF0dGVuKCksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm9uZUhvdChvLGUsbixyKX0seyRpbmRpY2VzOm99LGZ1bmN0aW9uKHQpe3JldHVybnskaW5kaWNlczpmdW5jdGlvbigpe3JldHVybiBBbihvLnNoYXBlLFwiZmxvYXQzMlwiKX19fSkucmVzaGFwZShhKX19KSxjcj12bih7cGFkXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49MCk7dmFyIHI9bm4odCxcInhcIixcInBhZFwiKTtpZigwPT09ci5yYW5rKXRocm93IG5ldyBFcnJvcihcInBhZChzY2FsYXIpIGlzIG5vdCBkZWZpbmVkLiBQYXNzIG5vbi1zY2FsYXIgdG8gcGFkXCIpO3ZhciBvPWUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0WzBdfSk7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5wYWQocixlLG4pfSx7JHg6cn0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuc2xpY2UobyxyLnNoYXBlKX19fSl9fSksaHI9dm4oe3BhZDFkXzpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTApLGYoMj09PWUubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJJbnZhbGlkIG51bWJlciBvZiBwYWRkaW5ncy4gTXVzdCBiZSBsZW5ndGggb2YgMi5cIn0pLGNyKHQsW2VdLG4pfX0pLHByPXZuKHtwYWQyZF86ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0wKSxmKDI9PT1lLmxlbmd0aCYmMj09PWVbMF0ubGVuZ3RoJiYyPT09ZVsxXS5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkludmFsaWQgbnVtYmVyIG9mIHBhZGRpbmdzLiBNdXN0IGJlIGxlbmd0aCBvZiAyIGVhY2guXCJ9KSxjcih0LGUsbil9fSksZnI9dm4oe3BhZDNkXzpmdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPTApLGYoMz09PWUubGVuZ3RoJiYyPT09ZVswXS5sZW5ndGgmJjI9PT1lWzFdLmxlbmd0aCYmMj09PWVbMl0ubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJJbnZhbGlkIG51bWJlciBvZiBwYWRkaW5ncy4gTXVzdCBiZSBsZW5ndGggb2YgMiBlYWNoLlwifSksY3IodCxlLG4pfX0pLGRyPXZuKHtwYWQ0ZF86ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0wKSxmKDQ9PT1lLmxlbmd0aCYmMj09PWVbMF0ubGVuZ3RoJiYyPT09ZVsxXS5sZW5ndGgmJjI9PT1lWzJdLmxlbmd0aCYmMj09PWVbM10ubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJJbnZhbGlkIG51bWJlciBvZiBwYWRkaW5ncy4gTXVzdCBiZSBsZW5ndGggb2YgMiBlYWNoLlwifSksY3IodCxlLG4pfX0pLHZyPXZuKHtyYW5kXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9Zyh0KSxvPW51bGw7aWYobnVsbD09bnx8XCJmbG9hdDMyXCI9PT1uKW89bmV3IEZsb2F0MzJBcnJheShyKTtlbHNlIGlmKFwiaW50MzJcIj09PW4pbz1uZXcgSW50MzJBcnJheShyKTtlbHNle2lmKFwiYm9vbFwiIT09bil0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGEgdHlwZSBcIituKTtvPW5ldyBVaW50OEFycmF5KHIpfWZvcih2YXIgYT0wO2E8cjthKyspb1thXT1lKCk7cmV0dXJuIGN0Lm1ha2UodCx7dmFsdWVzOm99LG4pfX0pLG1yPXZuKHtyYW5kb21Ob3JtYWxfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7aWYodm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09biYmKG49MSksbnVsbCE9ciYmXCJib29sXCI9PT1yKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGRhdGEgdHlwZSBcIityKTtmb3IodmFyIGE9bmV3IFluKGUsbixyLCExLG8pLGk9Wm4odCxyKSxzPTA7czxpLnZhbHVlcy5sZW5ndGg7cysrKWkudmFsdWVzW3NdPWEubmV4dFZhbHVlKCk7cmV0dXJuIGkudG9UZW5zb3IoKX19KSxncj12bih7cmFuZG9tR2FtbWFfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7aWYodm9pZCAwPT09biYmKG49MSksdm9pZCAwPT09ciYmKHI9XCJmbG9hdDMyXCIpLG51bGw9PW4mJihuPTEpLG51bGw9PXImJihyPVwiZmxvYXQzMlwiKSxcImZsb2F0MzJcIiE9PXImJlwiaW50MzJcIiE9PXIpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZGF0YSB0eXBlIFwiK3IpO2Zvcih2YXIgYT1uZXcgUW4oZSxuLHIsbyksaT1abih0LHIpLHM9MDtzPGkudmFsdWVzLmxlbmd0aDtzKyspaS52YWx1ZXNbc109YS5uZXh0VmFsdWUoKTtyZXR1cm4gaS50b1RlbnNvcigpfX0pLHlyPXZuKHtyYW5kb21Vbmlmb3JtXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PWUmJihlPTApLHZvaWQgMD09PW4mJihuPTEpLHZvaWQgMD09PXImJihyPVwiZmxvYXQzMlwiKTtmb3IodmFyIGE9Wm4odCxyKSxpPW5ldyBKbihlLG4sbnVsbCxvKSxzPTA7czxhLnZhbHVlcy5sZW5ndGg7cysrKWEudmFsdWVzW3NdPWkubmV4dFZhbHVlKCk7cmV0dXJuIGEudG9UZW5zb3IoKX19KSx4cj12bih7cmVzaGFwZV86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwieFwiLFwicmVzaGFwZVwiLG51bGwpO3JldHVybiBlPVIoZSxuLnNpemUpLGYobi5zaXplPT09ZyhlKSxmdW5jdGlvbigpe3JldHVyblwibmV3IHNoYXBlIGFuZCBvbGQgc2hhcGUgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBlbGVtZW50cy5cIn0pLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5yZXNoYXBlKG4sZSl9LHskeDpufSxmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5yZXNoYXBlKG4uc2hhcGUpfX19KX19KSxicj12bih7c3BhY2VUb0JhdGNoTkRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1ubih0LFwieFwiLFwic3BhY2VUb0JhdGNoTkRcIik7cmV0dXJuIGYoci5yYW5rPj0xK2UubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJpbnB1dCByYW5rIFwiK3IucmFuaytcIiBzaG91bGQgYmUgPiB0aGFuIFtibG9ja1NoYXBlXSBcIitlLmxlbmd0aH0pLGYobi5sZW5ndGg9PT1lLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwicGFkZGluZ3Muc2hhcGVbMF0gXCIrbi5sZW5ndGgrXCIgbXVzdCBiZSBlcXVhbCB0byBbYmxvY2tTaGFwZV0gXCIrZS5sZW5ndGh9KSxmKHIuc2hhcGUucmVkdWNlKGZ1bmN0aW9uKHQscixvKXtyZXR1cm4gbz4wJiZvPD1lLmxlbmd0aD90JiYocituW28tMV1bMF0rbltvLTFdWzFdKSVlW28tMV09PTA6dH0sITApLGZ1bmN0aW9uKCl7cmV0dXJuXCJpbnB1dCBzcGF0aWFsIGRpbWVuc2lvbnMgXCIrci5zaGFwZS5zbGljZSgxKStcIiB3aXRoIHBhZGRpbmdzIFwiK24udG9TdHJpbmcoKStcIiBtdXN0IGJlIGRpdmlzaWJsZSBieSBibG9ja1NoYXBlcyBcIitlLnRvU3RyaW5nKCl9KSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3BhY2VUb0JhdGNoTkQocixlLG4pfSx7JHg6cn0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuYmF0Y2hUb1NwYWNlTkQoZSxuKX19fSl9fSksd3I9dm4oe3NxdWVlemVfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bm4odCxcInhcIixcInNxdWVlemVcIik7cmV0dXJuIHhyKG4sayhuLnNoYXBlLGUpLm5ld1NoYXBlKX19KSxDcj12bih7c3RhY2tfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCk7dmFyIG49cm4odCxcInRlbnNvcnNcIixcInN0YWNrXCIpO2lmKGYobi5sZW5ndGg+PTEsZnVuY3Rpb24oKXtyZXR1cm5cIlBhc3MgYXQgbGVhc3Qgb25lIHRlbnNvciB0byB0Zi5zdGFja1wifSksMT09PW4ubGVuZ3RoKXJldHVybiBuWzBdLmV4cGFuZERpbXMoZSk7dmFyIHI9blswXS5yYW5rLG89blswXS5zaGFwZSxhPW5bMF0uZHR5cGU7ZihlPD1yLGZ1bmN0aW9uKCl7cmV0dXJuXCJBeGlzIG11c3QgYmUgPD0gcmFuayBvZiB0aGUgdGVuc29yXCJ9KSxuLmZvckVhY2goZnVuY3Rpb24odCl7ZChvLHQuc2hhcGUsXCJBbGwgdGVuc29ycyBwYXNzZWQgdG8gc3RhY2sgbXVzdCBoYXZlIG1hdGNoaW5nIHNoYXBlc1wiKX0pLG4uZm9yRWFjaChmdW5jdGlvbih0KXtmKGE9PT10LmR0eXBlLGZ1bmN0aW9uKCl7cmV0dXJuXCJBbGwgdGVuc29ycyBwYXNzZWQgdG8gc3RhY2sgbXVzdCBoYXZlIG1hdGNoaW5nIGR0eXBlc1wifSl9KTt2YXIgaT1uLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5leHBhbmREaW1zKGUpfSk7cmV0dXJuIE1uKGksZSl9fSksRXI9dm4oe3RpbGVfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bm4odCxcInhcIixcInRpbGVcIixudWxsKTtyZXR1cm4gZihuLnJhbms9PT1lLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gdHJhbnNwb3NlOiByYW5rIG9mIGlucHV0IFwiK24ucmFuaytcIiBtdXN0IG1hdGNoIGxlbmd0aCBvZiByZXBzIFwiK2UrXCIuXCJ9KSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxyKXt2YXIgbz10LnRpbGUobixlKTtyZXR1cm4gcihbbl0pLG99LHskeDpufSxmdW5jdGlvbih0LG4pe3ZhciByPW5bMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7dmFyIG49Rm4ocik7aWYoMT09PXIucmFuaylmb3IodmFyIG89MDtvPGVbMF07KytvKW49bi5hZGQodC5zbGljZShbbypyLnNoYXBlWzBdXSxbci5zaGFwZVswXV0pKTtlbHNlIGlmKDI9PT1yLnJhbmspZm9yKG89MDtvPGVbMF07KytvKWZvcih2YXIgYT0wO2E8ZVsxXTsrK2Epbj1uLmFkZCh0LnNsaWNlKFtvKnIuc2hhcGVbMF0sYSpyLnNoYXBlWzFdXSxbci5zaGFwZVswXSxyLnNoYXBlWzFdXSkpO2Vsc2UgaWYoMz09PXIucmFuaylmb3Iobz0wO288ZVswXTsrK28pZm9yKGE9MDthPGVbMV07KythKWZvcih2YXIgaT0wO2k8ZVsyXTsrK2kpbj1uLmFkZCh0LnNsaWNlKFtvKnIuc2hhcGVbMF0sYSpyLnNoYXBlWzFdLGkqci5zaGFwZVsyXV0sW3Iuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdXSkpO2Vsc2V7aWYoNCE9PXIucmFuayl0aHJvdyBuZXcgRXJyb3IoXCJHcmFkaWVudCBmb3IgdGlsZSBvcGVyYXRpb24gaXMgbm90IGltcGxlbWVudGVkIGZvciByYW5rLVwiK3IucmFuaytcIiB0ZW5zb3JzIHlldC5cIik7Zm9yKG89MDtvPGVbMF07KytvKWZvcihhPTA7YTxlWzFdOysrYSlmb3IoaT0wO2k8ZVsyXTsrK2kpZm9yKHZhciBzPTA7czxlWzNdOysrcyluPW4uYWRkKHQuc2xpY2UoW28qci5zaGFwZVswXSxhKnIuc2hhcGVbMV0saSpyLnNoYXBlWzJdLHMqci5zaGFwZVszXV0sW3Iuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdLHIuc2hhcGVbM11dKSl9cmV0dXJuIG59fX0pfX0pLFJyPXZuKHt0cnVuY2F0ZWROb3JtYWxfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7aWYodm9pZCAwPT09ZSYmKGU9MCksdm9pZCAwPT09biYmKG49MSksbnVsbCE9ciYmXCJib29sXCI9PT1yKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIGRhdGEgdHlwZSBcIityKTtmb3IodmFyIGE9bmV3IFluKGUsbixyLCEwLG8pLGk9Wm4odCxyKSxzPTA7czxpLnZhbHVlcy5sZW5ndGg7cysrKWkudmFsdWVzW3NdPWEubmV4dFZhbHVlKCk7cmV0dXJuIGkudG9UZW5zb3IoKX19KSxJcj12bih7dW5zdGFja186ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0wKSxlPWV8fDA7dmFyIG49bm4odCxcInhcIixcInVuc3RhY2tcIik7cmV0dXJuIGYoZT49LW4uc2hhcGUubGVuZ3RoJiZlPG4uc2hhcGUubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJBeGlzID0gXCIrZStcIiBpcyBub3QgaW4gWy1cIituLnNoYXBlLmxlbmd0aCtcIiwgXCIrbi5zaGFwZS5sZW5ndGgrXCIpXCJ9KSxlPDAmJihlKz1uLnNoYXBlLmxlbmd0aCksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnVuc3RhY2sobixlKX0seyR4Om59LGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBDcih0LGUpfX19KX19KSxrcj1mdW5jdGlvbih0LGUpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBuLG8sYSxpLHMsdSxsLGMsaCxwO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm4gbj1ubih0LFwieFwiLFwic2V0ZGlmZjFkXCIpLG89bm4oZSxcInlcIixcInNldGRpZmYxZFwiKSxmKG4uZHR5cGU9PT1vLmR0eXBlLGZ1bmN0aW9uKCl7cmV0dXJuXCJ4IGFuZCB5IHNob3VsZCBoYXZlIHRoZSBzYW1lIGR0eXBlLCBidXQgZ290IHggKFwiK24uZHR5cGUrXCIpIGFuZCB5IChcIitvLmR0eXBlK1wiKS5cIn0pLGYoMT09PW4ucmFuayxmdW5jdGlvbigpe3JldHVyblwieCBzaG91bGQgYmUgMUQgdGVuc29yLCBidXQgZ290IHggKFwiK24uc2hhcGUrXCIpLlwifSksZigxPT09by5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJ5IHNob3VsZCBiZSAxRCB0ZW5zb3IsIGJ1dCBnb3QgeSAoXCIrby5zaGFwZStcIikuXCJ9KSxbNCxuLmRhdGEoKV07Y2FzZSAxOnJldHVybiBhPXIuc2VudCgpLFs0LG8uZGF0YSgpXTtjYXNlIDI6Zm9yKGk9ci5zZW50KCkscz1uZXcgU2V0KGkpLHU9MCxoPTA7aDxhLmxlbmd0aDtoKyspcy5oYXMoYVtoXSl8fHUrKztmb3IobD1uZXcgaXQoW3VdLG4uZHR5cGUpLGM9bmV3IGl0KFt1XSxcImludDMyXCIpLGg9MCxwPTA7aDxhLmxlbmd0aDtoKyspcy5oYXMoYVtoXSl8fChsLnZhbHVlc1twXT1hW2hdLGMudmFsdWVzW3BdPWgscCsrKTtyZXR1cm5bMixbbC50b1RlbnNvcigpLGMudG9UZW5zb3IoKV1dfX0pfSl9O2Z1bmN0aW9uIE5yKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPSEwKTt2YXIgbz1bXTtpZihyKShvPW8uY29uY2F0KGUuc2xpY2UoMCkpKS5wdXNoKHRbMF0vbiksbz1vLmNvbmNhdCh0LnNsaWNlKDEpKTtlbHNle289by5jb25jYXQodFswXSk7Zm9yKHZhciBhPWUubGVuZ3RoLGk9MDtpPGE7KytpKW89by5jb25jYXQoW3RbaSsxXS9lW2ldLGVbaV1dKTtvPW8uY29uY2F0KHQuc2xpY2UoYSsxKSl9cmV0dXJuIG99ZnVuY3Rpb24gU3IodCxlLG4pe3ZvaWQgMD09PW4mJihuPSEwKTt2YXIgcj1bXTtpZihuKXtyLnB1c2goZSk7Zm9yKHZhciBvPWUrMTtvPHQ7KytvKW88PTIqZT8oci5wdXNoKG8pLHIucHVzaChvLShlKzEpKSk6ci5wdXNoKG8pfWVsc2V7dmFyIGE9W10saT1bXTtmb3Iobz0xO288dDsrK28pbz49MiplKzF8fG8lMj09MT9pLnB1c2gobyk6YS5wdXNoKG8pO3IucHVzaC5hcHBseShyLGEpLHIucHVzaCgwKSxyLnB1c2guYXBwbHkocixpKX1yZXR1cm4gcn1mdW5jdGlvbiBBcih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMCk7dmFyIG89W107cj9vLnB1c2godFswXS9uKTpvLnB1c2godFswXSpuKTtmb3IodmFyIGE9MTthPHQubGVuZ3RoOysrYSlhPD1lLmxlbmd0aD9yP28ucHVzaChlW2EtMV0qdFthXSk6by5wdXNoKHRbYV0vZVthLTFdKTpvLnB1c2godFthXSk7cmV0dXJuIG99ZnVuY3Rpb24gVHIodCxlKXtmb3IodmFyIG49WzBdLHI9MDtyPGU7KytyKW4ucHVzaCh0W3JdWzBdKTtyZXR1cm4gbn1mdW5jdGlvbiBEcih0LGUsbil7Zm9yKHZhciByPXQuc2xpY2UoMCwxKSxvPTA7bzxuOysrbylyLnB1c2godFtvKzFdLWVbb11bMF0tZVtvXVsxXSk7cmV0dXJuIHJ9ZnVuY3Rpb24gX3IodCxlKXtpZih0LnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5nYXRoZXJORCgpIGV4cGVjdHMgdGhlIGlucHV0IHRvIGJlIHJhbmsgMSBvciBoaWdoZXIsIGJ1dCB0aGUgcmFuayB3YXMgXCIrdC5yYW5rK1wiLlwiKTtpZihlLnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5nYXRoZXJORCgpIGV4cGVjdHMgdGhlIGluZGljZXMgdG8gYmUgcmFuayAxIG9yIGhpZ2hlciwgYnV0IHRoZSByYW5rIHdhcyBcIitlLnJhbmsrXCIuXCIpO2lmKFwiaW50MzJcIiE9PWUuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwidGYuZ2F0aGVyTkQoKSBleHBlY3RzIHRoZSBpbmRpY2VzIHRvIGJlIGludDMyIHR5cGUsIGJ1dCB0aGUgZHR5cGUgd2FzIFwiK2UuZHR5cGUrXCIuXCIpO2lmKGUuc2hhcGVbZS5yYW5rLTFdPnQucmFuayl0aHJvdyBuZXcgRXJyb3IoXCJpbmRleCBpbm5lcm1vc3QgZGltZW5zaW9uIGxlbmd0aCBtdXN0IGJlIDw9IHRlbnNvciByYW5rOyBzYXc6IFwiK2Uuc2hhcGVbZS5yYW5rLTFdK1wiIHZzLiBcIit0LnJhbmspO2lmKDA9PT10LnNpemUpdGhyb3cgbmV3IEVycm9yKFwiUmVxdWVzdGVkIG1vcmUgdGhhbiAwIGVudHJpZXMsIGJ1dCBpbnB1dCBpcyBlbXB0eS4gSW5wdXQgc2hhcGU6IFwiK3Quc2hhcGUrXCIuXCIpO2Zvcih2YXIgbj1lLnNoYXBlLHI9bltuLmxlbmd0aC0xXSxvPTEsYT0wO2E8bi5sZW5ndGgtMTsrK2Epbyo9blthXTt2YXIgaT10LnNoYXBlLHM9bi5zbGljZSgpO3MucG9wKCk7dmFyIHU9MTtmb3IoYT1yO2E8dC5yYW5rOysrYSl1Kj1pW2FdLHMucHVzaChpW2FdKTt2YXIgbD1WKHQuc2hhcGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC91fSkuY29uY2F0KFsxXSkuc2xpY2UoMCxyKTtyZXR1cm5bcyxvLHUsbF19dmFyIE9yPTMwO2Z1bmN0aW9uIEZyKHQpe3JldHVybiB0PD1Pcj90OlUodCxNYXRoLmZsb29yKE1hdGguc3FydCh0KSkpfWZ1bmN0aW9uIE1yKHQsZSxuKXtpZihlLnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5zY2F0dGVyTkQoKSBleHBlY3RzIHRoZSBpbmRpY2VzIHRvIGJlIHJhbmsgMSBvciBoaWdoZXIsIGJ1dCB0aGUgcmFuayB3YXMgXCIrZS5yYW5rK1wiLlwiKTtpZih0LnJhbms8MSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5zY2F0dGVyTkQoKSBleHBlY3RzIHRoZSB1cGRhdGVzIHRvIGJlIHJhbmsgMSBvciBoaWdoZXIsIGJ1dCB0aGUgcmFuayB3YXMgXCIrdC5yYW5rK1wiLlwiKTtpZihcImludDMyXCIhPT1lLmR0eXBlKXRocm93IG5ldyBFcnJvcihcIlRoZSBkdHlwZSBvZiAnaW5kaWNlcycgc2hvdWxkIGJlIGludDMyLCBidXQgZ290IGR0eXBlOiBcIitlLmR0eXBlKTtpZihuLmxlbmd0aDwxKXRocm93IG5ldyBFcnJvcihcIk91dHB1dCByYW5rIG11c3QgYmUgZ3JlYXRlciBvciBlcXVhbCB0byAxLCBidXQgZ290IHNoYXBlOiBcIituKTtpZigwPT09bi5sZW5ndGgpe2lmKDA9PT1lLnNpemUpdGhyb3cgbmV3IEVycm9yKFwiSW5kaWNlcyBzcGVjaWZpZWQgZm9yIGVtcHR5IG91dHB1dC4gaW5kaWNlcyBzaGFwZTogXCIrZS5zaGFwZSk7aWYoMD09PXQuc2l6ZSl0aHJvdyBuZXcgRXJyb3IoXCJVcGRhdGVzIHNwZWNpZmllZCBmb3IgZW1wdHkgb3V0cHV0LiB1cGRhdGVzIHNoYXBlOiBcIit0LnNoYXBlKX0hZnVuY3Rpb24odCxlLG4pe3ZhciByPWUucmFuaz4xP2Uuc2hhcGVbZS5yYW5rLTFdOjEsbz1lLnJhbms+MT9lLnJhbmstMToxLGE9XCJNdXN0IGhhdmUgdXBkYXRlcy5zaGFwZSA9IGluZGljZXMuc2hhcGVbOmJhdGNoRGltXSArIHNoYXBlW3NsaWNlRGltOl0sIGdvdCB1cGRhdGVzLnNoYXBlOiBcIituLnNoYXBlK1wiLCBpbmRpY2VzLnNoYXBlOiBcIitlLnNoYXBlK1wiLCBzaGFwZTogXCIrdCtcIiwgc2xpY2VEaW06IFwiK3IrXCIsIGFuZCBiYXRjaERpbTogXCIrbytcIi5cIjtpZihuLnJhbms8byl0aHJvdyBuZXcgRXJyb3IoYStcIiB1cGRhdGUucmFuayA8IFwiK28rXCIuIFwiKTtpZih0Lmxlbmd0aDxyKyhuLnJhbmstbykpdGhyb3cgbmV3IEVycm9yKGErXCIgT3V0cHV0IHNoYXBlIGxlbmd0aCA8IFwiKyhyKyhuLnJhbmstbykpKTtpZihuLnJhbmshPT1vK3QubGVuZ3RoLXIpdGhyb3cgbmV3IEVycm9yKGErXCIgdXBkYXRlLnJhbmsgIT0gXCIrKG8rdC5sZW5ndGgtcikpO2Zvcih2YXIgaT0wO2k8bzsrK2kpaWYobi5zaGFwZVtpXSE9PWUuc2hhcGVbaV0pdGhyb3cgbmV3IEVycm9yKGErXCIgdXBkYXRlcy5zaGFwZVtcIitpK1wiXSAoXCIrbi5zaGFwZVtpXStcIikgIT0gaW5kaWNlcy5zaGFwZVtcIitpK1wiXSAoXCIrZS5zaGFwZVtpXStcIikuXCIpO2ZvcihpPTA7aTxuLnJhbmstbzsrK2kpaWYobi5zaGFwZVtpK29dIT09dFtpK3JdKXRocm93IG5ldyBFcnJvcihhK1wiIHVwZGF0ZXMuc2hhcGVbXCIrKGkrbykrXCJdIChcIituLnNoYXBlW2krb10rXCIpICE9IHNoYXBlW1wiKyhpK28pK1wiXSAoXCIrdFtpK29dK1wiKVwiKX0obixlLHQpfWZ1bmN0aW9uIEJyKHQsZSxuKXtmb3IodmFyIHI9ZS5yYW5rPjE/ZS5zaGFwZVtlLnJhbmstMV06MSxvPW4ubGVuZ3RoLGE9MSxpPXI7aTxvOysraSlhKj1uW2ldO3ZhciBzPXI8MT8xOnI7cmV0dXJue3NsaWNlUmFuazpyLG51bVVwZGF0ZXM6ZS5zaXplL3Msc2xpY2VTaXplOmEsc3RyaWRlczpWKG4uc2xpY2UoMCxyKSkuY29uY2F0KFsxXSksb3V0cHV0U2l6ZTpnKG4pfX1mdW5jdGlvbiBQcih0KXtmb3IodmFyIGU9W10sbj0wO3Q+MDspMSZ0JiZlLnB1c2gobiksdC89MixuKys7cmV0dXJuIGV9ZnVuY3Rpb24gTHIodCxlLG4pe2Zvcih2YXIgcj1bXSxvPTA7bzx0Lmxlbmd0aDtvKyspcltvXT1NYXRoLmNlaWwoKGVbb10tdFtvXSkvbltvXSk7cmV0dXJuIHJ9ZnVuY3Rpb24gV3IodCxlLG4scixvKXt2YXIgYT1lW29dLGk9bltvXXx8MTsodCYxPDxvfHxudWxsPT1hKSYmKGE9aT4wP051bWJlci5NSU5fU0FGRV9JTlRFR0VSOk51bWJlci5NQVhfU0FGRV9JTlRFR0VSKTt2YXIgcz1yW29dO3JldHVybiBhPDAmJihhKz1zKSxhPWMoMCxhLHMtMSl9ZnVuY3Rpb24gVXIodCxlLG4scixvKXt2YXIgYT1lW29dLGk9bltvXXx8MTsodCYxPDxvfHxudWxsPT1hKSYmKGE9aT4wP051bWJlci5NQVhfU0FGRV9JTlRFR0VSOk51bWJlci5NSU5fU0FGRV9JTlRFR0VSKTt2YXIgcz1yW29dO3JldHVybiBhPDAmJihhKz1zKSxhPWk+MD9jKDAsYSxzKTpjKC0xLGEscy0xKX1mdW5jdGlvbiBWcih0LGUsbil7Zm9yKHZhciByPW4ubGVuZ3RoLG89MDtvPG4ubGVuZ3RoO28rKylpZihuW29dPjEpe3I9bzticmVha31mb3Iobz1yKzE7bzxuLmxlbmd0aDtvKyspaWYoZVtvXT4wfHxuW29dIT09dFtvXSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiB6cih0LGUpe2Zvcih2YXIgbj10Lmxlbmd0aD4wP3RbdC5sZW5ndGgtMV06MSxyPTA7cjx0Lmxlbmd0aC0xO3IrKyluKz10W3JdKmVbcl07cmV0dXJuIG59ZnVuY3Rpb24gR3IodCl7cmV0dXJuIGYoVyh0KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGYgcGFzc2VkIGluIGdyYWQoZikgbXVzdCBiZSBhIGZ1bmN0aW9uXCJ9KSxmdW5jdGlvbihlLG4pe3ZhciByPW5uKGUsXCJ4XCIsXCJ0Zi5ncmFkXCIsbnVsbCksbz1udWxsIT1uP25uKG4sXCJkeVwiLFwidGYuZ3JhZFwiKTpudWxsO3JldHVybiBTdC50aWR5KGZ1bmN0aW9uKCl7dmFyIGU9U3QuZ3JhZGllbnRzKGZ1bmN0aW9uKCl7cmV0dXJuIHQocil9LFtyXSxvKSxuPWUudmFsdWUsYT1lLmdyYWRzO3JldHVybiBudWxsIT1vJiZkKG4uc2hhcGUsby5zaGFwZSxcIlRoZSBzaGFwZSBvZiBkeSBwYXNzZWQgaW4gZ3JhZChmKSh4LCBkeSkgbXVzdCBtYXRjaCB0aGUgc2hhcGUgcmV0dXJuZWQgYnkgZih4KVwiKSxYcihhKSxhWzBdfSl9fWZ1bmN0aW9uIEhyKHQpe3JldHVybiBmKFcodCksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmIHBhc3NlZCBpbiBncmFkcyhmKSBtdXN0IGJlIGEgZnVuY3Rpb25cIn0pLGZ1bmN0aW9uKGUsbil7ZihBcnJheS5pc0FycmF5KGUpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJncyBwYXNzZWQgaW4gZ3JhZHMoZikoYXJncykgbXVzdCBiZSBhbiBhcnJheSBvZiBgVGVuc29yYHMgb3IgYFRlbnNvckxpa2Vgc1wifSk7dmFyIHI9cm4oZSxcImFyZ3NcIixcInRmLmdyYWRzXCIsbnVsbCksbz1udWxsIT1uP25uKG4sXCJkeVwiLFwidGYuZ3JhZHNcIik6bnVsbDtyZXR1cm4gU3QudGlkeShmdW5jdGlvbigpe3ZhciBlPVN0LmdyYWRpZW50cyhmdW5jdGlvbigpe3JldHVybiB0LmFwcGx5KHZvaWQgMCxyKX0scixvKSxuPWUudmFsdWUsYT1lLmdyYWRzO3JldHVybiBudWxsIT1vJiZkKG4uc2hhcGUsby5zaGFwZSxcIlRoZSBzaGFwZSBvZiBkeSBwYXNzZWQgaW4gZ3JhZHMoZikoW3gxLC4uLl0sIGR5KSBtdXN0IG1hdGNoIHRoZSBzaGFwZSByZXR1cm5lZCBieSBmKFt4MSwuLi5dKVwiKSxYcihhKSxhfSl9fWZ1bmN0aW9uIHFyKHQpe3JldHVybiBmKFcodCksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmIHBhc3NlZCBpbiB2YWx1ZUFuZEdyYWQoZikgbXVzdCBiZSBhIGZ1bmN0aW9uXCJ9KSxmdW5jdGlvbihlLG4pe2YoZSBpbnN0YW5jZW9mIGN0LGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgeCBwYXNzZWQgaW4gdmFsdWVBbmRHcmFkKGYpKHgpIG11c3QgYmUgYSB0ZW5zb3JcIn0pLGYobnVsbD09bnx8biBpbnN0YW5jZW9mIGN0LGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHkgcGFzc2VkIGluIHZhbHVlQW5kR3JhZChmKSh4LCBkeSkgbXVzdCBiZSBhIHRlbnNvclwifSk7dmFyIHI9U3QuZ3JhZGllbnRzKGZ1bmN0aW9uKCl7cmV0dXJuIHQoZSl9LFtlXSxuKSxvPXIuZ3JhZHMsYT1yLnZhbHVlO3JldHVybiBYcihvKSx7Z3JhZDpvWzBdLHZhbHVlOmF9fX1mdW5jdGlvbiAkcih0KXtyZXR1cm4gZihXKHQpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZiBwYXNzZWQgaW4gdmFsdWVBbmRHcmFkcyhmKSBtdXN0IGJlIGEgZnVuY3Rpb25cIn0pLGZ1bmN0aW9uKGUsbil7ZihBcnJheS5pc0FycmF5KGUpJiZlLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgY3R9KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGFyZ3MgcGFzc2VkIGluIHZhbHVlQW5kR3JhZHMoZikoYXJncykgbXVzdCBiZSBhcnJheSBvZiB0ZW5zb3JzXCJ9KSxmKG51bGw9PW58fG4gaW5zdGFuY2VvZiBjdCxmdW5jdGlvbigpe3JldHVyblwiVGhlIGR5IHBhc3NlZCBpbiB2YWx1ZUFuZEdyYWRzKGYpKGFyZ3MsIGR5KSBtdXN0IGJlIGEgdGVuc29yXCJ9KTt2YXIgcj1TdC5ncmFkaWVudHMoZnVuY3Rpb24oKXtyZXR1cm4gdC5hcHBseSh2b2lkIDAsZSl9LGUsbik7cmV0dXJuIG51bGwhPW4mJmQoci52YWx1ZS5zaGFwZSxuLnNoYXBlLFwiVGhlIHNoYXBlIG9mIGR5IHBhc3NlZCBpbiB2YWx1ZUFuZEdyYWRzKGYpKFt4MSwuLi5dLCBkeSkgbXVzdCBtYXRjaCB0aGUgc2hhcGUgcmV0dXJuZWQgYnkgZihbeDEsLi4uXSlcIiksWHIoci5ncmFkcykscn19ZnVuY3Rpb24gS3IodCxlKXtmKFcodCksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmIHBhc3NlZCBpbiB2YXJpYWJsZUdyYWRzKGYpIG11c3QgYmUgYSBmdW5jdGlvblwifSksZihudWxsPT1lfHxBcnJheS5pc0FycmF5KGUpJiZlLmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiB0IGluc3RhbmNlb2YgaHR9KSxmdW5jdGlvbigpe3JldHVyblwiVGhlIHZhckxpc3QgcGFzc2VkIGluIHZhcmlhYmxlR3JhZHMoZiwgdmFyTGlzdCkgbXVzdCBiZSBhbiBhcnJheSBvZiB2YXJpYWJsZXNcIn0pO3ZhciBuPW51bGwhPWU7aWYoIW4pZm9yKHZhciByIGluIGU9W10sU3QucmVnaXN0ZXJlZFZhcmlhYmxlcyllLnB1c2goU3QucmVnaXN0ZXJlZFZhcmlhYmxlc1tyXSk7dmFyIG89bj9lLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4hdC50cmFpbmFibGV9KTpudWxsLGE9ZS5sZW5ndGg7ZigoZT1lLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdC50cmFpbmFibGV9KSkubGVuZ3RoPjAsZnVuY3Rpb24oKXtyZXR1cm5cInZhcmlhYmxlR3JhZHMoKSBleHBlY3RzIGF0IGxlYXN0IG9uZSBvZiB0aGUgaW5wdXQgdmFyaWFibGVzIHRvIGJlIHRyYWluYWJsZSwgYnV0IG5vbmUgb2YgdGhlIFwiK2ErXCIgdmFyaWFibGVzIGlzIHRyYWluYWJsZS5cIn0pO3ZhciBpPVN0LmdyYWRpZW50cyh0LGUsbnVsbCwhMCkscz1pLnZhbHVlLHU9aS5ncmFkcztmKHUuc29tZShmdW5jdGlvbih0KXtyZXR1cm4gbnVsbCE9dH0pLGZ1bmN0aW9uKCl7cmV0dXJuXCJDYW5ub3QgZmluZCBhIGNvbm5lY3Rpb24gYmV0d2VlbiBhbnkgdmFyaWFibGUgYW5kIHRoZSByZXN1bHQgb2YgdGhlIGxvc3MgZnVuY3Rpb24geT1mKHgpLiBQbGVhc2UgbWFrZSBzdXJlIHRoZSBvcGVyYXRpb25zIHRoYXQgdXNlIHZhcmlhYmxlcyBhcmUgaW5zaWRlIHRoZSBmdW5jdGlvbiBmIHBhc3NlZCB0byBtaW5pbWl6ZSgpLlwifSksZigwPT09cy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZiBwYXNzZWQgaW4gdmFyaWFibGVHcmFkcyhmKSBtdXN0IHJldHVybiBhIHNjYWxhciwgYnV0IGl0IHJldHVybmVkIGEgcmFuay1cIitzLnJhbmsrXCIgdGVuc29yXCJ9KTt2YXIgbD17fTtyZXR1cm4gZS5mb3JFYWNoKGZ1bmN0aW9uKHQsZSl7bnVsbCE9dVtlXSYmKGxbdC5uYW1lXT11W2VdKX0pLG51bGwhPW8mJm8uZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gbFt0Lm5hbWVdPW51bGx9KSx7dmFsdWU6cyxncmFkczpsfX1mdW5jdGlvbiBqcih0KXtyZXR1cm4gU3QuY3VzdG9tR3JhZCh0KX1mdW5jdGlvbiBYcih0KXtpZih0LmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gbnVsbD09dH0pLmxlbmd0aD4wKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb21wdXRlIGdyYWRpZW50IG9mIHk9Zih4KSB3aXRoIHJlc3BlY3QgdG8geC4gTWFrZSBzdXJlIHRoYXRcXG4gICAgdGhlIGYgeW91IHBhc3NlZCBlbmNsb3NlcyBhbGwgb3BlcmF0aW9ucyB0aGF0IGxlYWQgZnJvbSB4IHRvIHkuXCIpfXZhciBZcj12bih7c29mdG1heF86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0tMSk7dmFyIG49bm4odCxcImxvZ2l0c1wiLFwic29mdG1heFwiKTtpZigtMT09PWUmJihlPW4ucmFuay0xKSxlIT09bi5yYW5rLTEpdGhyb3cgRXJyb3IoXCJTb2Z0bWF4IGFsb25nIGEgbm9uLWxhc3QgZGltZW5zaW9uIGlzIG5vdCB5ZXQgc3VwcG9ydGVkLiBMb2dpdHMgd2FzIHJhbmsgXCIrbi5yYW5rK1wiIGFuZCBkaW0gd2FzIFwiK2UpO3JldHVybiBqcihmdW5jdGlvbih0LG4pe3ZhciByPXQubG9nU3VtRXhwKFtlXSwhMCksbz10LnRvRmxvYXQoKS5zdWIocikuZXhwKCk7cmV0dXJuIG4oW29dKSx7dmFsdWU6byxncmFkRnVuYzpmdW5jdGlvbih0LG4pe3ZhciByPW5bMF0sbz10Lm11bChyKTtyZXR1cm4gby5zdWIoby5zdW0oW2VdLCEwKS5tdWwocikpfX19KShuKX19KSxRcj12bih7bG9nU29mdG1heF86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0tMSk7dmFyIG49bm4odCxcImxvZ2l0c1wiLFwibG9nU29mdG1heFwiKTtpZigtMT09PWUmJihlPW4ucmFuay0xKSxlIT09bi5yYW5rLTEpdGhyb3cgRXJyb3IoXCJMb2cgU29mdG1heCBhbG9uZyBhIG5vbi1sYXN0IGRpbWVuc2lvbiBpcyBub3QgeWV0IHN1cHBvcnRlZC4gTG9naXRzIHdhcyByYW5rIFwiK24ucmFuaytcIiBhbmQgYXhpcyB3YXMgXCIrZSk7cmV0dXJuIGpyKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5tYXgoZSwhMCksbz10LnN1YihyKSxhPW8udG9GbG9hdCgpLnN1YihvLmV4cCgpLnN1bShlLCEwKS5sb2coKSk7cmV0dXJuIG4oW2FdKSx7dmFsdWU6YSxncmFkRnVuYzpmdW5jdGlvbih0LG4pe3ZhciByPW5bMF0uZXhwKCk7cmV0dXJuIHQuc3ViKHQuc3VtKGUsITApLm11bChyKSl9fX0pKG4pfX0pLEpyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe3RoaXMuYmFja2VuZD10LHRoaXMuZGF0YU1vdmVyPWUsdGhpcy5kYXRhPW5ldyBXZWFrTWFwfXJldHVybiB0LnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YS5oYXModCl8fHRoaXMuZGF0YU1vdmVyLm1vdmVEYXRhKHRoaXMuYmFja2VuZCx0KSx0aGlzLmRhdGEuZ2V0KHQpfSx0LnByb3RvdHlwZS5zZXQ9ZnVuY3Rpb24odCxlKXt0aGlzLmRhdGEuc2V0KHQsZSl9LHQucHJvdG90eXBlLmhhcz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhLmhhcyh0KX0sdC5wcm90b3R5cGUuZGVsZXRlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmRhdGEuZGVsZXRlKHQpfSx0fSgpLFpyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5wcm90b3R5cGUudGltZT1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucmVhZD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUucmVhZFN5bmM9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmRpc3Bvc2VEYXRhPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS53cml0ZT1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWQuXCIpfSx0LnByb3RvdHlwZS5mcm9tUGl4ZWxzPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLnJlZ2lzdGVyPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUubWVtb3J5PWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZC5cIil9LHQucHJvdG90eXBlLmZsb2F0UHJlY2lzaW9uPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZXBzaWxvbj1mdW5jdGlvbigpe3JldHVybiAzMj09PXRoaXMuZmxvYXRQcmVjaXNpb24oKT8xZS03OjFlLTR9LHQucHJvdG90eXBlLmJhdGNoTWF0TXVsPWZ1bmN0aW9uKHQsZSxuLHIpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmZ1c2VkQmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCl7dC5hLHQuYix0LnRyYW5zcG9zZUEsdC50cmFuc3Bvc2VCLHQuYmlhcyx0LmFjdGl2YXRpb24sdC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzO3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnNsaWNlPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zdHJpZGVkU2xpY2U9ZnVuY3Rpb24odCxlLG4scil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUudW5zdGFjaz1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jb25jYXQ9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYWRkTj1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zdWJ0cmFjdD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLm11bHRpcGx5PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucmVhbERpdmlkZT1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmZsb29yRGl2PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc3VtPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucHJvZD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnVuc29ydGVkU2VnbWVudFN1bT1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYXJnTWluPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZXF1YWw9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5ub3RFcXVhbD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmxlc3M9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5sZXNzRXF1YWw9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5ncmVhdGVyPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubG9naWNhbE5vdD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5sb2dpY2FsQW5kPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubG9naWNhbE9yPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUud2hlcmU9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc2VsZWN0PWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS50b3BrPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5taW49ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5taW5pbXVtPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubW9kPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubWF4PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubWF4aW11bT1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmFsbD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnNxdWFyZWREaWZmZXJlbmNlPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuY2VpbD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5mbG9vcj1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5yb3VuZD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmlzTmFOPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmlzSW5mPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmlzRmluaXRlPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnBvdz1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmV4cD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5leHBtMT1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubG9nMXA9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc3FydD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5yc3FydD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zcXVhcmU9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucmVjaXByb2NhbD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5yZWx1PWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnByZWx1PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZWx1PWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmVsdURlcj1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnNlbHU9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuaW50PWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNsaXA9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmFicz1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jb21wbGV4QWJzPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnNpZ21vaWQ9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc29mdHBsdXM9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc2luPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNvcz1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS50YW49ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYXNpbj1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hY29zPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmF0YW49ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuYXRhbjI9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zaW5oPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNvc2g9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUudGFuaD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hc2luaD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hY29zaD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hdGFuaD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5lcmY9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc3RlcD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmZ1c2VkQ29udjJkPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jb252MmQ9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNvbnYyZERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jb252MmREZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJERGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuY29udjNkPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jb252M2REZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuY29udjNkRGVyRmlsdGVyPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5tYXhQb29sPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubWF4UG9vbEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuLHIpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmF2Z1Bvb2w9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5hdmdQb29sQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmF2Z1Bvb2wzZD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmF2Z1Bvb2wzZEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5tYXhQb29sM2Q9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5tYXhQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5yZXNoYXBlPWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuY2FzdD1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnRpbGU9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5wYWQ9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnRyYW5zcG9zZT1mdW5jdGlvbih0LGUpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmdhdGhlcj1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZ2F0aGVyTkQ9ZnVuY3Rpb24odCxlKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zY2F0dGVyTkQ9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmJhdGNoVG9TcGFjZU5EPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5zcGFjZVRvQmF0Y2hORD1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucmVzaXplQmlsaW5lYXI9ZnVuY3Rpb24odCxlLG4scil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucmVzaXplQmlsaW5lYXJCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yPWZ1bmN0aW9uKHQsZSxuLHIpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvckJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5iYXRjaE5vcm1hbGl6YXRpb249ZnVuY3Rpb24odCxlLG4scixvLGEpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uNEQ9ZnVuY3Rpb24odCxlLG4scixvKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5MUk5HcmFkPWZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLm11bHRpbm9taWFsPWZ1bmN0aW9uKHQsZSxuLHIpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLm9uZUhvdD1mdW5jdGlvbih0LGUsbixyKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jdW1zdW09ZnVuY3Rpb24odCxlLG4scil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUubm9uTWF4U3VwcHJlc3Npb249ZnVuY3Rpb24odCxlLG4scixvKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5mZnQ9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuaWZmdD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5jb21wbGV4PWZ1bmN0aW9uKHQsZSl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUucmVhbD1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5pbWFnPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmNyb3BBbmRSZXNpemU9ZnVuY3Rpb24odCxlLG4scixvLGEpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmRlcHRoVG9TcGFjZT1mdW5jdGlvbih0LGUsbil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuc3BsaXQ9ZnVuY3Rpb24odCxlLG4pe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLnNwYXJzZVRvRGVuc2U9ZnVuY3Rpb24odCxlLG4scil7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuZGlhZz1mdW5jdGlvbih0KXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUub25lc0xpa2U9ZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdC5wcm90b3R5cGUuemVyb3NMaWtlPWZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcIk5vdCB5ZXQgaW1wbGVtZW50ZWRcIil9LHQucHJvdG90eXBlLmxpbnNwYWNlPWZ1bmN0aW9uKHQsZSxuKXt0aHJvdyBuZXcgRXJyb3IoXCJOb3QgeWV0IGltcGxlbWVudGVkXCIpfSx0LnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhyb3cgbmV3IEVycm9yKFwiTm90IHlldCBpbXBsZW1lbnRlZFwiKX0sdH0oKTtmdW5jdGlvbiB0byh0LGUpe2Zvcih2YXIgbj10Lmxlbmd0aCxyPVtdLG89MDtvPG47bysrKXt2YXIgYT1uLTEtbyxpPXRbYV18fDE7KGVbZS5sZW5ndGgtMS1vXXx8MSk+MSYmMT09PWkmJnIudW5zaGlmdChhKX1yZXR1cm4gcn1mdW5jdGlvbiBlbyh0LGUpe2Zvcih2YXIgbj1bXSxyPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBvPXRbdC5sZW5ndGgtci0xXSxhPWUubGVuZ3RoLXItMSxpPWVbYV07KG51bGw9PW98fDE9PT1vJiZpPjEpJiZuLnVuc2hpZnQoYSl9cmV0dXJuIG59ZnVuY3Rpb24gbm8odCxlKXtmb3IodmFyIG49W10scj1NYXRoLm1heCh0Lmxlbmd0aCxlLmxlbmd0aCksbz0wO288cjtvKyspe3ZhciBhPXRbdC5sZW5ndGgtby0xXTtudWxsPT1hJiYoYT0xKTt2YXIgaT1lW2UubGVuZ3RoLW8tMV07aWYobnVsbD09aSYmKGk9MSksMT09PWEpbi51bnNoaWZ0KGkpO2Vsc2UgaWYoMT09PWkpbi51bnNoaWZ0KGEpO2Vsc2V7aWYoYSE9PWkpdGhyb3cgRXJyb3IoXCJPcGVyYW5kcyBjb3VsZCBub3QgYmUgYnJvYWRjYXN0IHRvZ2V0aGVyIHdpdGggc2hhcGVzIFwiK3QrXCIgYW5kIFwiK2UrXCIuXCIpO24udW5zaGlmdChhKX19cmV0dXJuIG59ZnVuY3Rpb24gcm8odCxlLG4scixvLGEsaSl7dm9pZCAwPT09aSYmKGk9XCJjaGFubmVsc0xhc3RcIik7dmFyIHMsdT11byhlKSxsPXVbMF0sYz11WzFdO2lmKFwiY2hhbm5lbHNMYXN0XCI9PT1pKXM9W2wsYyx0WzNdLHRbM11dO2Vsc2V7aWYoXCJjaGFubmVsc0ZpcnN0XCIhPT1pKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YUZvcm1hdCBcIitpKTtzPVtsLGMsdFsxXSx0WzFdXX1yZXR1cm4gYW8odCxzLG4scixvLGEsITEsaSl9ZnVuY3Rpb24gb28odCxlLG4scixvLGEsaSl7dm9pZCAwPT09aSYmKGk9XCJOREhXQ1wiKTt2YXIgcyx1LGw9bG8oZSksYz1sWzBdLGg9bFsxXSxwPWxbMl07aWYoXCJOREhXQ1wiPT09aSl1PVwiY2hhbm5lbHNMYXN0XCIscz1bYyxoLHAsdFs0XSx0WzRdXTtlbHNle2lmKFwiTkNESFdcIiE9PWkpdGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhRm9ybWF0IFwiK2kpO3U9XCJjaGFubmVsc0ZpcnN0XCIscz1bYyxoLHAsdFsxXSx0WzFdXX1yZXR1cm4gaW8odCxzLG4scixvLCExLHUsYSl9ZnVuY3Rpb24gYW8odCxlLG4scixvLGEsaSxzKXt2b2lkIDA9PT1pJiYoaT0hMSksdm9pZCAwPT09cyYmKHM9XCJjaGFubmVsc0xhc3RcIik7dmFyIHU9Wy0xLC0xLC0xLC0xXSxsPXVbMF0sYz11WzFdLGg9dVsyXSxwPXVbM107aWYoXCJjaGFubmVsc0xhc3RcIj09PXMpbD10WzBdLGM9dFsxXSxoPXRbMl0scD10WzNdO2Vsc2V7aWYoXCJjaGFubmVsc0ZpcnN0XCIhPT1zKXRocm93IG5ldyBFcnJvcihcIlVua25vd24gZGF0YUZvcm1hdCBcIitzKTtsPXRbMF0scD10WzFdLGM9dFsyXSxoPXRbM119dmFyIGQsdj1lWzBdLG09ZVsxXSxnPWVbM10seT11byhuKSxiPXlbMF0sdz15WzFdLEM9dW8ociksRT1DWzBdLFI9Q1sxXSxJPWNvKHYsRSksaz1jbyhtLFIpLE49ZnVuY3Rpb24odCxlLG4scixvLGEsaSxzKXt2YXIgdSxsLGM7aWYoXCJudW1iZXJcIj09dHlwZW9mIHQpe3ZhciBoPTA9PT10P1wiVkFMSURcIjpcIk5VTUJFUlwiO3U9e3RvcDp0LGJvdHRvbTp0LGxlZnQ6dCxyaWdodDp0LHR5cGU6aH07dmFyIHA9ZnVuY3Rpb24odCxlLG4scixvKXtudWxsPT1yJiYocj1zbyh0LGUsbikpO3ZhciBhPXRbMF0saT10WzFdLHM9aG8oKGEtZSsyKnIpL24rMSxvKTtmKHgocyksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiByb3dzIChcIitzK1wiKSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSB0aGUgc3RyaWRlIGFuZC9vciB6ZXJvIHBhZCBwYXJhbWV0ZXJzXCJ9KTt2YXIgdT1obygoaS1lKzIqcikvbisxLG8pO3JldHVybiBmKHgodSksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiBjb2x1bW5zIChcIit1K1wiKSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSB0aGUgc3RyaWRlIGFuZC9vciB6ZXJvIHBhZCBwYXJhbWV0ZXJzXCJ9KSxbcyx1XX0oW2Usbl0sYSxyLHQscyk7bD1wWzBdLGM9cFsxXX1lbHNlIGlmKFwic2FtZVwiPT09dCl7bD1NYXRoLmNlaWwoZS9yKSxjPU1hdGguY2VpbChuL28pO3ZhciBkPU1hdGgubWF4KDAsKGwtMSkqcithLWUpLHY9TWF0aC5tYXgoMCwoYy0xKSpvK2ktbiksbT1NYXRoLmZsb29yKGQvMiksZz1kLW0seT1NYXRoLmZsb29yKHYvMiksYj12LXk7dT17dG9wOm0sYm90dG9tOmcsbGVmdDp5LHJpZ2h0OmIsdHlwZTpcIlNBTUVcIn19ZWxzZXtpZihcInZhbGlkXCIhPT10KXRocm93IEVycm9yKFwiVW5rbm93biBwYWRkaW5nIHBhcmFtZXRlcjogXCIrdCk7dT17dG9wOjAsYm90dG9tOjAsbGVmdDowLHJpZ2h0OjAsdHlwZTpcIlZBTElEXCJ9LGw9TWF0aC5jZWlsKChlLWErMSkvciksYz1NYXRoLmNlaWwoKG4taSsxKS9vKX1yZXR1cm57cGFkSW5mbzp1LG91dEhlaWdodDpsLG91dFdpZHRoOmN9fShvLGMsaCxiLHcsSSxrLGEpLFM9Ti5wYWRJbmZvLEE9Ti5vdXRIZWlnaHQsVD1OLm91dFdpZHRoLEQ9aT9nKnA6ZztyZXR1cm5cImNoYW5uZWxzRmlyc3RcIj09PXM/ZD1bbCxELEEsVF06XCJjaGFubmVsc0xhc3RcIj09PXMmJihkPVtsLEEsVCxEXSkse2JhdGNoU2l6ZTpsLGRhdGFGb3JtYXQ6cyxpbkhlaWdodDpjLGluV2lkdGg6aCxpbkNoYW5uZWxzOnAsb3V0SGVpZ2h0OkEsb3V0V2lkdGg6VCxvdXRDaGFubmVsczpELHBhZEluZm86UyxzdHJpZGVIZWlnaHQ6YixzdHJpZGVXaWR0aDp3LGZpbHRlckhlaWdodDp2LGZpbHRlcldpZHRoOm0sZWZmZWN0aXZlRmlsdGVySGVpZ2h0OkksZWZmZWN0aXZlRmlsdGVyV2lkdGg6ayxkaWxhdGlvbkhlaWdodDpFLGRpbGF0aW9uV2lkdGg6UixpblNoYXBlOnQsb3V0U2hhcGU6ZCxmaWx0ZXJTaGFwZTplfX1mdW5jdGlvbiBpbyh0LGUsbixyLG8sYSxpLHMpe3ZvaWQgMD09PWEmJihhPSExKSx2b2lkIDA9PT1pJiYoaT1cImNoYW5uZWxzTGFzdFwiKTt2YXIgdT1bLTEsLTEsLTEsLTEsLTFdLGw9dVswXSxjPXVbMV0saD11WzJdLHA9dVszXSxkPXVbNF07aWYoXCJjaGFubmVsc0xhc3RcIj09PWkpbD10WzBdLGM9dFsxXSxoPXRbMl0scD10WzNdLGQ9dFs0XTtlbHNle2lmKFwiY2hhbm5lbHNGaXJzdFwiIT09aSl0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGRhdGFGb3JtYXQgXCIraSk7bD10WzBdLGQ9dFsxXSxjPXRbMl0saD10WzNdLHA9dFs0XX12YXIgdixtPWVbMF0sZz1lWzFdLHk9ZVsyXSxiPWVbNF0sdz1sbyhuKSxDPXdbMF0sRT13WzFdLFI9d1syXSxJPWxvKHIpLGs9SVswXSxOPUlbMV0sUz1JWzJdLEE9Y28obSxrKSxUPWNvKGcsTiksRD1jbyh5LFMpLF89ZnVuY3Rpb24odCxlLG4scixvLGEsaSxzLHUsbCxjKXt2YXIgaCxwLGQsdjtpZihcIm51bWJlclwiPT10eXBlb2YgdCl7dmFyIG09MD09PXQ/XCJWQUxJRFwiOlwiTlVNQkVSXCI7aD17dG9wOnQsYm90dG9tOnQsbGVmdDp0LHJpZ2h0OnQsZnJvbnQ6dCxiYWNrOnQsdHlwZTptfTt2YXIgZz1mdW5jdGlvbih0LGUsbixyLG8sYSl7bnVsbD09byYmKG89c28odCxlLHIpKTt2YXIgaT10WzBdLHM9dFsxXSx1PXRbMl0sbD1obygoaS1lKzIqbykvcisxLGEpO2YoeChsKSxmdW5jdGlvbigpe3JldHVyblwiVGhlIG91dHB1dCAjIG9mIGRlcHRocyAoXCIrbCtcIikgbXVzdCBiZSBhbiBpbnRlZ2VyLiBDaGFuZ2UgdGhlIHN0cmlkZSBhbmQvb3IgemVybyBwYWQgcGFyYW1ldGVyc1wifSk7dmFyIGM9aG8oKHMtZSsyKm8pL3IrMSxhKTtmKHgoYyksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiByb3dzIChcIitjK1wiKSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSB0aGUgc3RyaWRlIGFuZC9vciB6ZXJvIHBhZCBwYXJhbWV0ZXJzXCJ9KTt2YXIgaD1obygodS1lKzIqbykvcisxLGEpO3JldHVybiBmKHgoaCksZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBvdXRwdXQgIyBvZiBjb2x1bW5zIChcIitoK1wiKSBtdXN0IGJlIGFuIGludGVnZXIuIENoYW5nZSB0aGUgc3RyaWRlIGFuZC9vciB6ZXJvIHBhZCBwYXJhbWV0ZXJzXCJ9KSxbbCxjLGgsbl19KFtlLG4sciwxXSxzLDEsbyx0LGMpO3A9Z1swXSxkPWdbMV0sdj1nWzJdfWVsc2UgaWYoXCJzYW1lXCI9PT10KXtwPU1hdGguY2VpbChlL28pLGQ9TWF0aC5jZWlsKG4vYSksdj1NYXRoLmNlaWwoci9pKTt2YXIgeT0ocC0xKSpvK3MtZSxiPShkLTEpKmErdS1uLHc9KHYtMSkqaStsLXIsQz1NYXRoLmZsb29yKHkvMiksRT15LUMsUj1NYXRoLmZsb29yKGIvMiksST1iLVIsaz1NYXRoLmZsb29yKHcvMiksTj13LWs7aD17dG9wOlIsYm90dG9tOkksbGVmdDprLHJpZ2h0Ok4sZnJvbnQ6QyxiYWNrOkUsdHlwZTpcIlNBTUVcIn19ZWxzZXtpZihcInZhbGlkXCIhPT10KXRocm93IEVycm9yKFwiVW5rbm93biBwYWRkaW5nIHBhcmFtZXRlcjogXCIrdCk7aD17dG9wOjAsYm90dG9tOjAsbGVmdDowLHJpZ2h0OjAsZnJvbnQ6MCxiYWNrOjAsdHlwZTpcIlZBTElEXCJ9LHA9TWF0aC5jZWlsKChlLXMrMSkvbyksZD1NYXRoLmNlaWwoKG4tdSsxKS9hKSx2PU1hdGguY2VpbCgoci1sKzEpL2kpfXJldHVybntwYWRJbmZvOmgsb3V0RGVwdGg6cCxvdXRIZWlnaHQ6ZCxvdXRXaWR0aDp2fX0obyxjLGgscCxDLEUsUixBLFQsRCxzKSxPPV8ucGFkSW5mbyxGPV8ub3V0RGVwdGgsTT1fLm91dEhlaWdodCxCPV8ub3V0V2lkdGgsUD1hP2IqZDpiO3JldHVyblwiY2hhbm5lbHNGaXJzdFwiPT09aT92PVtsLFAsRixNLEJdOlwiY2hhbm5lbHNMYXN0XCI9PT1pJiYodj1bbCxGLE0sQixQXSkse2JhdGNoU2l6ZTpsLGRhdGFGb3JtYXQ6aSxpbkRlcHRoOmMsaW5IZWlnaHQ6aCxpbldpZHRoOnAsaW5DaGFubmVsczpkLG91dERlcHRoOkYsb3V0SGVpZ2h0Ok0sb3V0V2lkdGg6QixvdXRDaGFubmVsczpQLHBhZEluZm86TyxzdHJpZGVEZXB0aDpDLHN0cmlkZUhlaWdodDpFLHN0cmlkZVdpZHRoOlIsZmlsdGVyRGVwdGg6bSxmaWx0ZXJIZWlnaHQ6ZyxmaWx0ZXJXaWR0aDp5LGVmZmVjdGl2ZUZpbHRlckRlcHRoOkEsZWZmZWN0aXZlRmlsdGVySGVpZ2h0OlQsZWZmZWN0aXZlRmlsdGVyV2lkdGg6RCxkaWxhdGlvbkRlcHRoOmssZGlsYXRpb25IZWlnaHQ6TixkaWxhdGlvbldpZHRoOlMsaW5TaGFwZTp0LG91dFNoYXBlOnYsZmlsdGVyU2hhcGU6ZX19ZnVuY3Rpb24gc28odCxlLG4scil7dm9pZCAwPT09ciYmKHI9MSk7dmFyIG89Y28oZSxyKTtyZXR1cm4gTWF0aC5mbG9vcigodFswXSoobi0xKS1uK28pLzIpfWZ1bmN0aW9uIHVvKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0P1t0LHQsdF06Mj09PXQubGVuZ3RoP1t0WzBdLHRbMV0sMV06dH1mdW5jdGlvbiBsbyh0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdD9bdCx0LHRdOnR9ZnVuY3Rpb24gY28odCxlKXtyZXR1cm4gZTw9MT90OnQrKHQtMSkqKGUtMSl9ZnVuY3Rpb24gaG8odCxlKXtpZighZSlyZXR1cm4gdDtzd2l0Y2goZSl7Y2FzZVwicm91bmRcIjpyZXR1cm4gTWF0aC5yb3VuZCh0KTtjYXNlXCJjZWlsXCI6cmV0dXJuIE1hdGguY2VpbCh0KTtjYXNlXCJmbG9vclwiOnJldHVybiBNYXRoLmZsb29yKHQpO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biByb3VuZGluZ01vZGUgXCIrZSl9fWZ1bmN0aW9uIHBvKHQpe3ZhciBlPXVvKHQpLG49ZVswXSxyPWVbMV0sbz1lWzJdO3JldHVybiAxPT09biYmMT09PXImJjE9PT1vfWZ1bmN0aW9uIGZvKHQsZSl7cmV0dXJuIHBvKHQpfHxwbyhlKX1mdW5jdGlvbiB2byh0KXtpZihcIk5IV0NcIj09PXQpcmV0dXJuXCJjaGFubmVsc0xhc3RcIjtpZihcIk5DSFdcIj09PXQpcmV0dXJuXCJjaGFubmVsc0ZpcnN0XCI7dGhyb3cgbmV3IEVycm9yKFwiVW5rbm93biBkYXRhRm9ybWF0IFwiK3QpfWZ1bmN0aW9uIG1vKHQsZSxuKXtpZihcImNvbXBsZXg2NFwiPT09ZSl7aWYoXCJjb21wbGV4NjRcIj09PXQuZHR5cGUpcmV0dXJuIHQuY2xvbmUoKTt2YXIgcj1Bbih0LnNoYXBlKSxvPXQudG9GbG9hdCgpLGE9bi5jb21wbGV4KG8scik7cmV0dXJuIHIuZGlzcG9zZSgpLG8uZGlzcG9zZSgpLGF9aWYoIUQodC5kdHlwZSxlKSlyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHtkYXRhSWQ6dC5kYXRhSWR9LGUpO2lmKFwiY29tcGxleDY0XCI9PT10LmR0eXBlKXt2YXIgaT1uLnJlYWwodCk7YT1pLmNhc3QoZSk7cmV0dXJuIGkuZGlzcG9zZSgpLGF9aWYoXCJpbnQzMlwiPT09ZSlyZXR1cm4gbi5pbnQodCk7aWYoXCJib29sXCI9PT1lKXt2YXIgcz13bigwLHQuZHR5cGUpO2E9bi5ub3RFcXVhbCh0LHMpO3JldHVybiBzLmRpc3Bvc2UoKSxhfXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIENhc3Q6IGZhaWxlZCB0byBjYXN0IFwiK3QuZHR5cGUrXCIgdG8gXCIrZSl9ZnVuY3Rpb24gZ28odCxlKXtyZXR1cm4gY3QubWFrZShlLHtkYXRhSWQ6dC5kYXRhSWR9LHQuZHR5cGUpfWZ1bmN0aW9uIHlvKHQsZSxuKXt2YXIgcj0oZS10KS8obi0xKSxvPXEobixcImZsb2F0MzJcIik7b1swXT10O2Zvcih2YXIgYT0xO2E8by5sZW5ndGg7YSsrKW9bYV09b1thLTFdK3I7cmV0dXJuIENuKG8sXCJmbG9hdDMyXCIpfXZhciB4bz1PYmplY3QuZnJlZXplKHtjYXN0VGVuc29yOm1vLHJlc2hhcGVUZW5zb3I6Z28sbGluc3BhY2VJbXBsOnlvLHVwY2FzdFR5cGU6eHQsYXhlc0FyZUlubmVyTW9zdERpbXM6b24sY29tYmluZUxvY2F0aW9uczphbixjb21wdXRlT3V0QW5kUmVkdWNlU2hhcGVzOnNuLGV4cGFuZFNoYXBlVG9LZWVwRGltOnVuLGFzc2VydEF4ZXNBcmVJbm5lck1vc3REaW1zOmxuLGdldEF4ZXNQZXJtdXRhdGlvbjpjbixnZXRVbmRvQXhlc1Blcm11dGF0aW9uOmhuLGdldElubmVyTW9zdEF4ZXM6cG4sZ2V0QnJvYWRjYXN0RGltczp0byxnZXRSZWR1Y3Rpb25BeGVzOmVvLGFzc2VydEFuZEdldEJyb2FkY2FzdFNoYXBlOm5vLGFzc2VydFBhcmFtc0NvbnNpc3RlbnQ6Zm4sY29tcHV0ZU91dFNoYXBlOmRuLGNvbXB1dGVQb29sMkRJbmZvOnJvLGNvbXB1dGVQb29sM0RJbmZvOm9vLGNvbXB1dGVDb252MkRJbmZvOmFvLGNvbXB1dGVDb252M0RJbmZvOmlvLGNvbXB1dGVEZWZhdWx0UGFkOnNvLHR1cGxlVmFsdWVzQXJlT25lOnBvLGVpdGhlclN0cmlkZXNPckRpbGF0aW9uc0FyZU9uZTpmbyxjb252ZXJ0Q29udjJERGF0YUZvcm1hdDp2b30pO2Z1bmN0aW9uIGJvKHQsZSl7aWYodC5sZW5ndGghPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgbWVyZ2UgcmVhbCBhbmQgaW1hZyBhcnJheXMgb2YgZGlmZmVyZW50IGxlbmd0aHMuIHJlYWw6XCIrdC5sZW5ndGgrXCIsIGltYWc6IFwiK2UubGVuZ3RoK1wiLlwiKTtmb3IodmFyIG49bmV3IEZsb2F0MzJBcnJheSgyKnQubGVuZ3RoKSxyPTA7cjxuLmxlbmd0aDtyKz0yKW5bcl09dFtyLzJdLG5bcisxXT1lW3IvMl07cmV0dXJuIG59ZnVuY3Rpb24gd28odCxlKXtyZXR1cm57cmVhbDp0WzIqZV0saW1hZzp0WzIqZSsxXX19ZnVuY3Rpb24gQ28odCxlLG4scil7dFsyKnJdPWUsdFsyKnIrMV09bn1mdW5jdGlvbiBFbyh0LGUsbil7dmFyIHI9KG4/MjotMikqTWF0aC5QSSoodC9lKTtyZXR1cm57cmVhbDpNYXRoLmNvcyhyKSxpbWFnOk1hdGguc2luKHIpfX1mdW5jdGlvbiBSbyh0LGUsbixyLG8pe2Zvcih2YXIgYT1BcnJheS5mcm9tKGUpLm1hcChmdW5jdGlvbih0LGUpe3JldHVybntzY29yZTp0LGJveEluZGV4OmV9fSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNjb3JlPm99KS5zb3J0KGZ1bmN0aW9uKHQsZSl7cmV0dXJuIGUuc2NvcmUtdC5zY29yZX0pLGk9W10scz0wO3M8YS5sZW5ndGg7cysrKXt2YXIgdT1hW3NdLGw9dS5zY29yZSxjPXUuYm94SW5kZXg7aWYobDxvKWJyZWFrO2Zvcih2YXIgaD0hMSxwPWkubGVuZ3RoLTE7cD49MDstLXApe2lmKElvKHQsYyxpW3BdKT49cil7aD0hMDticmVha319aWYoIWgmJihpLnB1c2goYyksaS5sZW5ndGg+PW4pKWJyZWFrfXJldHVybiBDbihpLFwiaW50MzJcIil9ZnVuY3Rpb24gSW8odCxlLG4pe3ZhciByPXQuc3ViYXJyYXkoNCplLDQqZSs0KSxvPXQuc3ViYXJyYXkoNCpuLDQqbis0KSxhPU1hdGgubWluKHJbMF0sclsyXSksaT1NYXRoLm1pbihyWzFdLHJbM10pLHM9TWF0aC5tYXgoclswXSxyWzJdKSx1PU1hdGgubWF4KHJbMV0sclszXSksbD1NYXRoLm1pbihvWzBdLG9bMl0pLGM9TWF0aC5taW4ob1sxXSxvWzNdKSxoPU1hdGgubWF4KG9bMF0sb1syXSkscD1NYXRoLm1heChvWzFdLG9bM10pLGY9KHMtYSkqKHUtaSksZD0oaC1sKSoocC1jKTtpZihmPD0wfHxkPD0wKXJldHVybiAwO3ZhciB2PU1hdGgubWF4KGEsbCksbT1NYXRoLm1heChpLGMpLGc9TWF0aC5taW4ocyxoKSx5PU1hdGgubWluKHUscCkseD1NYXRoLm1heChnLXYsMCkqTWF0aC5tYXgoeS1tLDApO3JldHVybiB4LyhmK2QteCl9ZnVuY3Rpb24ga28odCxlLG4pe3ZhciByPW5ldyBBcnJheSh0LnJhbmspLmZpbGwoMCksbz10LnNoYXBlLnNsaWNlKCk7cmV0dXJuIGUubWFwKGZ1bmN0aW9uKGUpe29bbl09ZTt2YXIgYT10LnNsaWNlKHIsbyk7cmV0dXJuIHJbbl0rPWUsYX0pfWZ1bmN0aW9uIE5vKHQsZSl7Zm9yKHZhciBuPW5ldyBBcnJheSh0LnJhbmspLHI9MDtyPG4ubGVuZ3RoO3IrKyluW3JdPXQuc2hhcGVbcl0qZVtyXTt2YXIgbz1abihuLHQuZHR5cGUpO2ZvcihyPTA7cjxvLnZhbHVlcy5sZW5ndGg7KytyKXtmb3IodmFyIGE9by5pbmRleFRvTG9jKHIpLGk9bmV3IEFycmF5KHQucmFuaykscz0wO3M8aS5sZW5ndGg7cysrKWlbc109YVtzXSV0LnNoYXBlW3NdO3ZhciB1PXQubG9jVG9JbmRleChpKTtvLnZhbHVlc1tyXT10LnZhbHVlc1t1XX1yZXR1cm4gby50b1RlbnNvcigpfWZ1bmN0aW9uIFNvKHQsZSxuLHIsbyl7Zm9yKHZhciBhPWVbZS5sZW5ndGgtMV0saT1bdC5sZW5ndGgvYSxhXSxzPWlbMF0sdT1pWzFdLGw9TihuLHMqciksYz1OKFwiaW50MzJcIixzKnIpLGg9MDtoPHM7aCsrKXtmb3IodmFyIHA9aCp1LGY9dC5zdWJhcnJheShwLHArdSksZD1bXSx2PTA7djxmLmxlbmd0aDt2KyspZC5wdXNoKHt2YWx1ZTpmW3ZdLGluZGV4OnZ9KTtkLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS52YWx1ZS10LnZhbHVlfSk7dmFyIG09aCpyLGc9bC5zdWJhcnJheShtLG0rcikseT1jLnN1YmFycmF5KG0sbStyKTtmb3Iodj0wO3Y8cjt2KyspZ1t2XT1kW3ZdLnZhbHVlLHlbdl09ZFt2XS5pbmRleH12YXIgeD1lLnNsaWNlKCk7cmV0dXJuIHhbeC5sZW5ndGgtMV09cixbeG4obCx4LG4pLHhuKGMseCxcImludDMyXCIpXX1mdW5jdGlvbiBBbyh0LGUpe2Zvcih2YXIgbj1bXSxyPTA7cjxlLmxlbmd0aDtyKyspZVtyXSYmbi5wdXNoKHIpO3ZhciBvPVpuKHQsXCJpbnQzMlwiKSxhPVpuKFtuLmxlbmd0aCx0Lmxlbmd0aF0sXCJpbnQzMlwiKTtmb3Iocj0wO3I8bi5sZW5ndGg7cisrKXt2YXIgaT1vLmluZGV4VG9Mb2MobltyXSkscz1yKnQubGVuZ3RoO2EudmFsdWVzLnNldChpLHMpfXJldHVybiBhLnRvVGVuc29yKCl9dmFyIFRvPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy52YXJpYWJsZU5hbWVzPWUubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJUXCIrZX0pO3ZhciBuPVtdO3RoaXMudmFyaWFibGVOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKHQpe24ucHVzaChcImZsb2F0IHZcIit0K1wiID0gZ2V0XCIrdCtcIkF0T3V0Q29vcmRzKCk7XCIpfSk7dmFyIHI9dGhpcy52YXJpYWJsZU5hbWVzLm1hcChmdW5jdGlvbih0KXtyZXR1cm5cInZcIit0fSkuam9pbihcIiArIFwiKTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrbi5qb2luKFwiXFxuICAgICAgICBcIikrXCJcXG5cXG4gICAgICAgIGZsb2F0IHJlc3VsdCA9IFwiK3IrXCI7XFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxEbz1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudmFyaWFibGVOYW1lcz1lLm1hcChmdW5jdGlvbih0LGUpe3JldHVyblwiVFwiK2V9KTt2YXIgbj1bXTt0aGlzLnZhcmlhYmxlTmFtZXMuZm9yRWFjaChmdW5jdGlvbih0KXtuLnB1c2goXCJ2ZWM0IHZcIit0K1wiID0gZ2V0XCIrdCtcIkF0T3V0Q29vcmRzKCk7XCIpfSk7dmFyIHI9dGhpcy52YXJpYWJsZU5hbWVzLm1hcChmdW5jdGlvbih0KXtyZXR1cm5cInZcIit0fSkuam9pbihcIiArIFwiKTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrbi5qb2luKFwiXFxuICAgICAgICBcIikrXCJcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gXCIrcitcIjtcXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLF9vPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXTt2YXIgcj10LndpbmRvd1NpemUsbz10LmJhdGNoU2l6ZSxhPXQuaW5TaXplLGk9TWF0aC5jZWlsKGEvcik7bnx8dGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJiZXN0SW5kaWNlc0FcIiksdGhpcy5vdXRwdXRTaGFwZT1bbyxpXTt2YXIgcz1cIm1heFwiPT09ZT9cIj5cIjpcIjxcIix1PW4/XCJpbk9mZnNldCArIGk7XCI6XCJyb3VuZChnZXRCZXN0SW5kaWNlc0EoYmF0Y2gsIGluT2Zmc2V0ICsgaSkpO1wiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBvdXRJZHggPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgaW5PZmZzZXQgPSBvdXRJZHggKiBcIityK1wiO1xcblxcbiAgICAgICAgaW50IGJlc3RJbmRleCA9IGluT2Zmc2V0O1xcbiAgICAgICAgZmxvYXQgYmVzdFZhbHVlID0gZ2V0QShiYXRjaCwgYmVzdEluZGV4KTtcXG5cXG4gICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgXCIrcitcIjsgaSsrKSB7XFxuICAgICAgICAgIGludCBpbklkeCA9IFwiK3UrXCI7XFxuICAgICAgICAgIGZsb2F0IGNhbmRpZGF0ZSA9IGdldEEoYmF0Y2gsIGluSWR4KTtcXG4gICAgICAgICAgaWYgKGNhbmRpZGF0ZSBcIitzK1wiIGJlc3RWYWx1ZSkge1xcbiAgICAgICAgICAgIGJlc3RWYWx1ZSA9IGNhbmRpZGF0ZTtcXG4gICAgICAgICAgICBiZXN0SW5kZXggPSBpbklkeDtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGZsb2F0KGJlc3RJbmRleCkpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpO2Z1bmN0aW9uIE9vKHQsZSl7cmV0dXJuW1wieFwiLFwieVwiLFwielwiLFwid1wiLFwidVwiLFwidlwiXS5zbGljZSgwLGUpLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gdCtcIi5cIitlfSl9ZnVuY3Rpb24gRm8odCxlKXtyZXR1cm4gMT09PWU/W3RdOk9vKHQsZSl9ZnVuY3Rpb24gTW8oKXt2YXIgdCxlLG4scixvLGEscyx1LGwsYztyZXR1cm4gMj09PWkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKT8odD1cIiN2ZXJzaW9uIDMwMCBlc1wiLGU9XCJpblwiLG49XCJvdXRcIixyPVwiaW5cIixvPVwidGV4dHVyZVwiLGE9XCJvdXRwdXRDb2xvclwiLHM9XCJvdXQgdmVjNCBvdXRwdXRDb2xvcjtcIix1PVwiXFxuICAgICAgYm9vbCBpc25hbl9jdXN0b20oZmxvYXQgdmFsKSB7XFxuICAgICAgICByZXR1cm4gKHZhbCA+IDAuIHx8IHZhbCA8IDAuIHx8IHZhbCA9PSAwLikgPyBmYWxzZSA6IHRydWU7XFxuICAgICAgfVxcbiAgICBcIixsPVwiXCIsYz1cIlxcbiAgICAgICNkZWZpbmUgcm91bmQodmFsdWUpIG5ld1JvdW5kKHZhbHVlKVxcbiAgICAgIGludCBuZXdSb3VuZChmbG9hdCB2YWx1ZSkge1xcbiAgICAgICAgcmV0dXJuIGludChmbG9vcih2YWx1ZSArIDAuNSkpO1xcbiAgICAgIH1cXG5cXG4gICAgICBpdmVjNCBuZXdSb3VuZCh2ZWM0IHZhbHVlKSB7XFxuICAgICAgICByZXR1cm4gaXZlYzQoZmxvb3IodmFsdWUgKyB2ZWM0KDAuNSkpKTtcXG4gICAgICB9XFxuICAgIFwiKToodD1cIlwiLGU9XCJhdHRyaWJ1dGVcIixuPVwidmFyeWluZ1wiLHI9XCJ2YXJ5aW5nXCIsbz1cInRleHR1cmUyRFwiLGE9XCJnbF9GcmFnQ29sb3JcIixzPVwiXCIsdT1cIlxcbiAgICAgIGJvb2wgaXNuYW5fY3VzdG9tKGZsb2F0IHZhbCkge1xcbiAgICAgICAgcmV0dXJuICh2YWwgPiAwLiB8fCB2YWwgPCAxLiB8fCB2YWwgPT0gMC4pID8gZmFsc2UgOiB0cnVlO1xcbiAgICAgIH1cXG4gICAgXCIsbD1cIlxcbiAgICAgIHVuaWZvcm0gZmxvYXQgSU5GSU5JVFk7XFxuXFxuICAgICAgYm9vbCBpc2luZihmbG9hdCB2YWwpIHtcXG4gICAgICAgIHJldHVybiBhYnModmFsKSA9PSBJTkZJTklUWTtcXG4gICAgICB9XFxuICAgICAgYnZlYzQgaXNpbmYodmVjNCB2YWwpIHtcXG4gICAgICAgIHJldHVybiBlcXVhbChhYnModmFsKSwgdmVjNChJTkZJTklUWSkpO1xcbiAgICAgIH1cXG4gICAgXCIsYz1cIlxcbiAgICAgIGludCByb3VuZChmbG9hdCB2YWx1ZSkge1xcbiAgICAgICAgcmV0dXJuIGludChmbG9vcih2YWx1ZSArIDAuNSkpO1xcbiAgICAgIH1cXG5cXG4gICAgICBpdmVjNCByb3VuZCh2ZWM0IHZhbHVlKSB7XFxuICAgICAgICByZXR1cm4gaXZlYzQoZmxvb3IodmFsdWUgKyB2ZWM0KDAuNSkpKTtcXG4gICAgICB9XFxuICAgIFwiKSx7dmVyc2lvbjp0LGF0dHJpYnV0ZTplLHZhcnlpbmdWczpuLHZhcnlpbmdGczpyLHRleHR1cmUyRDpvLG91dHB1dDphLGRlZmluZU91dHB1dDpzLGRlZmluZVNwZWNpYWxOYU46dSxkZWZpbmVTcGVjaWFsSW5mOmwsZGVmaW5lUm91bmQ6Y319ZnVuY3Rpb24gQm8odCxlLG4pe3ZvaWQgMD09PW4mJihuPVwiaW5kZXhcIik7dmFyIHI9VihlKTtyZXR1cm4gci5tYXAoZnVuY3Rpb24oZSxvKXtyZXR1cm5cImludCBcIit0W29dK1wiID0gXCIrbitcIiAvIFwiK2UrXCI7IFwiKyhvPT09ci5sZW5ndGgtMT9cImludCBcIit0W28rMV0rXCIgPSBcIituK1wiIC0gXCIrdFtvXStcIiAqIFwiK2U6XCJpbmRleCAtPSBcIit0W29dK1wiICogXCIrZSkrXCI7XCJ9KS5qb2luKFwiXCIpfWZ1bmN0aW9uIFBvKHQpe3ZhciBlPVYodCkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRvU3RyaW5nKCl9KTtyZXR1cm5cIlxcbiAgaW50IGdldEZsYXRJbmRleChpdmVjMyBjb29yZHMpIHtcXG4gICAgcmV0dXJuIGNvb3Jkcy54ICogXCIrZVswXStcIiArIGNvb3Jkcy55ICogXCIrZVsxXStcIiArIGNvb3Jkcy56O1xcbiAgfVxcblwifXZhciBMbz1cIlxcbiAgY29uc3QgZmxvYXQgRkxPQVRfTUFYID0gMS43MDE0MTE4NGUzODtcXG4gIGNvbnN0IGZsb2F0IEZMT0FUX01JTiA9IDEuMTc1NDk0MzVlLTM4O1xcblxcbiAgbG93cCB2ZWM0IGVuY29kZV9mbG9hdChoaWdocCBmbG9hdCB2KSB7XFxuICAgIGlmIChpc25hbih2KSkge1xcbiAgICAgIHJldHVybiB2ZWM0KDI1NSwgMjU1LCAyNTUsIDI1NSk7XFxuICAgIH1cXG5cXG4gICAgaGlnaHAgZmxvYXQgYXYgPSBhYnModik7XFxuXFxuICAgIGlmKGF2IDwgRkxPQVRfTUlOKSB7XFxuICAgICAgcmV0dXJuIHZlYzQoMC4wLCAwLjAsIDAuMCwgMC4wKTtcXG4gICAgfSBlbHNlIGlmKHYgPiBGTE9BVF9NQVgpIHtcXG4gICAgICByZXR1cm4gdmVjNCgwLjAsIDAuMCwgMTI4LjAsIDEyNy4wKSAvIDI1NS4wO1xcbiAgICB9IGVsc2UgaWYodiA8IC1GTE9BVF9NQVgpIHtcXG4gICAgICByZXR1cm4gdmVjNCgwLjAsIDAuMCwgIDEyOC4wLCAyNTUuMCkgLyAyNTUuMDtcXG4gICAgfVxcblxcbiAgICBoaWdocCB2ZWM0IGMgPSB2ZWM0KDAsMCwwLDApO1xcblxcbiAgICBoaWdocCBmbG9hdCBlID0gZmxvb3IobG9nMihhdikpO1xcbiAgICBoaWdocCBmbG9hdCBtID0gZXhwMihmcmFjdChsb2cyKGF2KSkpIC0gMS4wO1xcblxcbiAgICBjWzJdID0gZmxvb3IoMTI4LjAgKiBtKTtcXG4gICAgbSAtPSBjWzJdIC8gMTI4LjA7XFxuICAgIGNbMV0gPSBmbG9vcigzMjc2OC4wICogbSk7XFxuICAgIG0gLT0gY1sxXSAvIDMyNzY4LjA7XFxuICAgIGNbMF0gPSBmbG9vcig4Mzg4NjA4LjAgKiBtKTtcXG5cXG4gICAgaGlnaHAgZmxvYXQgZWJpYXMgPSBlICsgMTI3LjA7XFxuICAgIGNbM10gPSBmbG9vcihlYmlhcyAvIDIuMCk7XFxuICAgIGViaWFzIC09IGNbM10gKiAyLjA7XFxuICAgIGNbMl0gKz0gZmxvb3IoZWJpYXMpICogMTI4LjA7XFxuXFxuICAgIGNbM10gKz0gMTI4LjAgKiBzdGVwKDAuMCwgLXYpO1xcblxcbiAgICByZXR1cm4gYyAvIDI1NS4wO1xcbiAgfVxcblwiO2Z1bmN0aW9uIFdvKHQsZSxuLHIpe3ZhciBvPVtdO3QuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgZT1nKHQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSk7dC5zaGFwZUluZm8uaXNVbmlmb3JtP28ucHVzaChcInVuaWZvcm0gZmxvYXQgXCIrdC5uYW1lKyhlPjE/XCJbXCIrZStcIl1cIjpcIlwiKStcIjtcIik6KG8ucHVzaChcInVuaWZvcm0gc2FtcGxlcjJEIFwiK3QubmFtZStcIjtcIiksby5wdXNoKFwidW5pZm9ybSBpbnQgb2Zmc2V0XCIrdC5uYW1lK1wiO1wiKSl9KTt2YXIgYSxpLHM9by5qb2luKFwiXFxuXCIpLHU9dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9XCJcIjtyKz1uP1ZvKHQpOlVvKHQpO3ZhciBvPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxhPWUubG9naWNhbFNoYXBlO28ubGVuZ3RoPD1hLmxlbmd0aCYmKHIrPW4/ZnVuY3Rpb24odCxlKXt2YXIgbixyPXQubmFtZSxvPXIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrci5zbGljZSgxKSxhPVwiZ2V0XCIrbytcIkF0T3V0Q29vcmRzXCIsaT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUubGVuZ3RoLHM9ZS5sb2dpY2FsU2hhcGUubGVuZ3RoLHU9dG8odC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLGUubG9naWNhbFNoYXBlKSxsPWpvKHMpLGM9cy1pLGg9W1wieFwiLFwieVwiLFwielwiLFwid1wiLFwidVwiLFwidlwiXTtuPTA9PT1pP1wiXCI6czwyJiZ1Lmxlbmd0aD49MT9cImNvb3JkcyA9IDA7XCI6dS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuXCJjb29yZHMuXCIraFt0K2NdK1wiID0gMDtcIn0pLmpvaW4oXCJcXG5cIik7dmFyIHA9XCJcIjtwPXM8MiYmaT4wP1wiY29vcmRzXCI6dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLm1hcChmdW5jdGlvbih0LGUpe3JldHVyblwiY29vcmRzLlwiK2hbZStjXX0pLmpvaW4oXCIsIFwiKTt2YXIgZj1cInJldHVybiBvdXRwdXRWYWx1ZTtcIixkPTE9PT1nKHQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSksdj0xPT09ZyhlLmxvZ2ljYWxTaGFwZSk7aWYoMSE9PWl8fGR8fHYpe2lmKGQmJiF2KWY9MT09PXM/XCJcXG4gICAgICAgIHJldHVybiB2ZWM0KG91dHB1dFZhbHVlLngsIG91dHB1dFZhbHVlLngsIDAuLCAwLik7XFxuICAgICAgXCI6XCJcXG4gICAgICAgIHJldHVybiB2ZWM0KG91dHB1dFZhbHVlLngpO1xcbiAgICAgIFwiO2Vsc2UgaWYodS5sZW5ndGgpe3ZhciBtPWktMix5PWktMTt1LmluZGV4T2YobSk+LTEmJnUuaW5kZXhPZih5KT4tMT9mPVwicmV0dXJuIHZlYzQob3V0cHV0VmFsdWUueCk7XCI6dS5pbmRleE9mKG0pPi0xP2Y9XCJyZXR1cm4gdmVjNChvdXRwdXRWYWx1ZS54LCBvdXRwdXRWYWx1ZS55LCBvdXRwdXRWYWx1ZS54LCBvdXRwdXRWYWx1ZS55KTtcIjp1LmluZGV4T2YoeSk+LTEmJihmPVwicmV0dXJuIHZlYzQob3V0cHV0VmFsdWUueHgsIG91dHB1dFZhbHVlLnp6KTtcIil9fWVsc2UgZj1cIlxcbiAgICAgIHJldHVybiB2ZWM0KG91dHB1dFZhbHVlLnh5LCBvdXRwdXRWYWx1ZS54eSk7XFxuICAgIFwiO3JldHVyblwiXFxuICAgIHZlYzQgXCIrYStcIigpIHtcXG4gICAgICBcIitsK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgIFwiK24rXCJcXG4gICAgICB2ZWM0IG91dHB1dFZhbHVlID0gZ2V0XCIrbytcIihcIitwK1wiKTtcXG4gICAgICBcIitmK1wiXFxuICAgIH1cXG4gIFwifSh0LGUpOmZ1bmN0aW9uKHQsZSl7dmFyIG49dC5uYW1lLHI9bi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89XCJnZXRcIityK1wiQXRPdXRDb29yZHNcIixhPWUudGV4U2hhcGUsaT10LnNoYXBlSW5mby50ZXhTaGFwZSxzPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZS5sZW5ndGgsdT1lLmxvZ2ljYWxTaGFwZS5sZW5ndGg7aWYoIXQuc2hhcGVJbmZvLmlzVW5pZm9ybSYmcz09PXUmJm51bGw9PXQuc2hhcGVJbmZvLmZsYXRPZmZzZXQmJnkoaSxhKSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK28rXCIoKSB7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCByZXN1bHRVVik7XFxuICAgICAgfVxcbiAgICBcIjt2YXIgbCxjPWpvKHUpLGg9dG8odC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLGUubG9naWNhbFNoYXBlKSxwPXUtcyxmPVtcInhcIixcInlcIixcInpcIixcIndcIixcInVcIixcInZcIl07bD0wPT09cz9cIlwiOnU8MiYmaC5sZW5ndGg+PTE/XCJjb29yZHMgPSAwO1wiOmgubWFwKGZ1bmN0aW9uKHQpe3JldHVyblwiY29vcmRzLlwiK2ZbdCtwXStcIiA9IDA7XCJ9KS5qb2luKFwiXFxuXCIpO3ZhciBkPVwiXCI7ZD11PDImJnM+MD9cImNvb3Jkc1wiOnQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZS5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm5cImNvb3Jkcy5cIitmW2UrcF19KS5qb2luKFwiLCBcIik7cmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrbytcIigpIHtcXG4gICAgICBcIitjK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgIFwiK2wrXCJcXG4gICAgICByZXR1cm4gZ2V0XCIrcitcIihcIitkK1wiKTtcXG4gICAgfVxcbiAgXCJ9KHQsZSkpO3JldHVybiByfSh0LGUscil9KS5qb2luKFwiXFxuXCIpLGw9ZS50ZXhTaGFwZSxjPU1vKCksaD1mdW5jdGlvbih0KXtyZXR1cm5cIlxcbiAgICBmbG9hdCBzYW1wbGVUZXh0dXJlKHNhbXBsZXIyRCB0ZXh0dXJlU2FtcGxlciwgdmVjMiB1dikge1xcbiAgICAgIHJldHVybiBcIit0LnRleHR1cmUyRCtcIih0ZXh0dXJlU2FtcGxlciwgdXYpLnI7XFxuICAgIH1cXG4gIFwifShjKSxwPWZ1bmN0aW9uKHQpe3JldHVybiB0LnZlcnNpb24rXCJcXG4gICAgcHJlY2lzaW9uIGhpZ2hwIGZsb2F0O1xcbiAgICBwcmVjaXNpb24gaGlnaHAgaW50O1xcbiAgICBwcmVjaXNpb24gaGlnaHAgc2FtcGxlcjJEO1xcbiAgICBcIit0LnZhcnlpbmdGcytcIiB2ZWMyIHJlc3VsdFVWO1xcbiAgICBcIit0LmRlZmluZU91dHB1dCtcIlxcbiAgICBjb25zdCB2ZWMyIGhhbGZDUiA9IHZlYzIoMC41LCAwLjUpO1xcblxcbiAgICBzdHJ1Y3QgaXZlYzVcXG4gICAge1xcbiAgICAgIGludCB4O1xcbiAgICAgIGludCB5O1xcbiAgICAgIGludCB6O1xcbiAgICAgIGludCB3O1xcbiAgICAgIGludCB1O1xcbiAgICB9O1xcblxcbiAgICBzdHJ1Y3QgaXZlYzZcXG4gICAge1xcbiAgICAgIGludCB4O1xcbiAgICAgIGludCB5O1xcbiAgICAgIGludCB6O1xcbiAgICAgIGludCB3O1xcbiAgICAgIGludCB1O1xcbiAgICAgIGludCB2O1xcbiAgICB9O1xcblxcbiAgICB1bmlmb3JtIGZsb2F0IE5BTjtcXG4gICAgI2RlZmluZSBpc25hbih2YWx1ZSkgaXNuYW5fY3VzdG9tKHZhbHVlKVxcbiAgICBcIit0LmRlZmluZVNwZWNpYWxOYU4rXCJcXG4gICAgYnZlYzQgaXNuYW5fY3VzdG9tKHZlYzQgdmFsKSB7XFxuICAgICAgcmV0dXJuIGJ2ZWM0KGlzbmFuKHZhbC54KSwgaXNuYW4odmFsLnkpLCBpc25hbih2YWwueiksIGlzbmFuKHZhbC53KSk7XFxuICAgIH1cXG5cXG4gICAgXCIrdC5kZWZpbmVTcGVjaWFsSW5mK1wiXFxuICAgIFwiK3QuZGVmaW5lUm91bmQrXCJcXG5cXG4gICAgaW50IGltb2QoaW50IHgsIGludCB5KSB7XFxuICAgICAgcmV0dXJuIHggLSB5ICogKHggLyB5KTtcXG4gICAgfVxcblxcbiAgICBpbnQgaWRpdihpbnQgYSwgaW50IGIsIGZsb2F0IHNpZ24pIHtcXG4gICAgICBpbnQgcmVzID0gYSAvIGI7XFxuICAgICAgaW50IG1vZCA9IGltb2QoYSwgYik7XFxuICAgICAgaWYgKHNpZ24gPCAwLiAmJiBtb2QgIT0gMCkge1xcbiAgICAgICAgcmVzIC09IDE7XFxuICAgICAgfVxcbiAgICAgIHJldHVybiByZXM7XFxuICAgIH1cXG5cXG4gICAgLy9CYXNlZCBvbiB0aGUgd29yayBvZiBEYXZlIEhvc2tpbnNcXG4gICAgLy9odHRwczovL3d3dy5zaGFkZXJ0b3kuY29tL3ZpZXcvNGRqU1JXXFxuICAgICNkZWZpbmUgSEFTSFNDQUxFMSA0NDMuODk3NVxcbiAgICBmbG9hdCByYW5kb20oZmxvYXQgc2VlZCl7XFxuICAgICAgdmVjMiBwID0gcmVzdWx0VVYgKiBzZWVkO1xcbiAgICAgIHZlYzMgcDMgID0gZnJhY3QodmVjMyhwLnh5eCkgKiBIQVNIU0NBTEUxKTtcXG4gICAgICBwMyArPSBkb3QocDMsIHAzLnl6eCArIDE5LjE5KTtcXG4gICAgICByZXR1cm4gZnJhY3QoKHAzLnggKyBwMy55KSAqIHAzLnopO1xcbiAgICB9XFxuXFxuICAgIFwiK3pvK1wiXFxuICAgIFwiK0dvK1wiXFxuICAgIFwiK0hvK1wiXFxuICBcIn0oYyk7cmV0dXJuIGUuaXNQYWNrZWQ/KGE9ZnVuY3Rpb24odCxlKXtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuICBcIjtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dmFyIG49W01hdGguY2VpbChlWzBdLzIpLE1hdGguY2VpbChlWzFdLzIpXTtpZigxPT09blswXSlyZXR1cm5cIlxcbiAgICAgIGludCBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICByZXR1cm4gMiAqIGludChyZXN1bHRVVi54ICogXCIrblsxXStcIi4wKTtcXG4gICAgICB9XFxuICAgIFwiO2lmKDE9PT1uWzFdKXJldHVyblwiXFxuICAgICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiAyICogaW50KHJlc3VsdFVWLnkgKiBcIituWzBdK1wiLjApO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrblswXStcIiwgXCIrblsxXStcIikpO1xcbiAgICAgIHJldHVybiAyICogKHJlc1RleFJDLnggKiBcIituWzFdK1wiICsgcmVzVGV4UkMueSk7XFxuICAgIH1cXG4gIFwifSgwLGUpO2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1bTWF0aC5jZWlsKGVbMF0vMiksTWF0aC5jZWlsKGVbMV0vMildO2lmKHkodCxlKSlyZXR1cm5cIlxcbiAgICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiAyICogaXZlYzIocmVzdWx0VVYueXggKiB2ZWMyKFwiK25bMF0rXCIsIFwiK25bMV0rXCIpKTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciByPU1hdGguY2VpbCh0WzFdLzIpO3JldHVyblwiXFxuICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrblswXStcIiwgXCIrblsxXStcIikpO1xcblxcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIituWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgICBpbnQgciA9IDIgKiAoaW5kZXggLyBcIityK1wiKTtcXG4gICAgICBpbnQgYyA9IGltb2QoaW5kZXgsIFwiK3IrXCIpICogMjtcXG5cXG4gICAgICByZXR1cm4gaXZlYzIociwgYyk7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgMzpyZXR1cm4gbj10LHI9ZSxvPVtNYXRoLmNlaWwoclswXS8yKSxNYXRoLmNlaWwoclsxXS8yKV0sYT1NYXRoLmNlaWwoblsyXS8yKSxpPWEqTWF0aC5jZWlsKG5bMV0vMiksXCJcXG4gICAgaXZlYzMgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitvWzBdK1wiLCBcIitvWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK29bMV0rXCIgKyByZXNUZXhSQy55O1xcblxcbiAgICAgIGludCBiID0gaW5kZXggLyBcIitpK1wiO1xcbiAgICAgIGluZGV4IC09IGIgKiBcIitpK1wiO1xcblxcbiAgICAgIGludCByID0gMiAqIChpbmRleCAvIFwiK2ErXCIpO1xcbiAgICAgIGludCBjID0gaW1vZChpbmRleCwgXCIrYStcIikgKiAyO1xcblxcbiAgICAgIHJldHVybiBpdmVjMyhiLCByLCBjKTtcXG4gICAgfVxcbiAgXCI7ZGVmYXVsdDpyZXR1cm4gZnVuY3Rpb24odCxlKXtmb3IodmFyIG49W01hdGguY2VpbChlWzBdLzIpLE1hdGguY2VpbChlWzFdLzIpXSxyPU1hdGguY2VpbCh0W3QubGVuZ3RoLTFdLzIpLG89cipNYXRoLmNlaWwodFt0Lmxlbmd0aC0yXS8yKSxhPW8saT1cIlwiLHM9XCJiLCByLCBjXCIsdT0yO3U8dC5sZW5ndGgtMTt1KyspYSo9dFt0Lmxlbmd0aC11LTFdLGk9XCJcXG4gICAgICBpbnQgYlwiK3UrXCIgPSBpbmRleCAvIFwiK2ErXCI7XFxuICAgICAgaW5kZXggLT0gYlwiK3UrXCIgKiBcIithK1wiO1xcbiAgICBcIitpLHM9XCJiXCIrdStcIiwgXCIrcztyZXR1cm5cIlxcbiAgICBpdmVjXCIrdC5sZW5ndGgrXCIgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIituWzBdK1wiLCBcIituWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK25bMV0rXCIgKyByZXNUZXhSQy55O1xcblxcbiAgICAgIFwiK2krXCJcXG5cXG4gICAgICBpbnQgYiA9IGluZGV4IC8gXCIrbytcIjtcXG4gICAgICBpbmRleCAtPSBiICogXCIrbytcIjtcXG5cXG4gICAgICBpbnQgciA9IDIgKiAoaW5kZXggLyBcIityK1wiKTtcXG4gICAgICBpbnQgYyA9IGltb2QoaW5kZXgsIFwiK3IrXCIpICogMjtcXG5cXG4gICAgICByZXR1cm4gaXZlY1wiK3QubGVuZ3RoK1wiKFwiK3MrXCIpO1xcbiAgICB9XFxuICBcIn0odCxlKX12YXIgbixyLG8sYSxpfShlLmxvZ2ljYWxTaGFwZSxsKSxpPWZ1bmN0aW9uKHQpe3JldHVyblwiXFxuICAgIHZvaWQgc2V0T3V0cHV0KHZlYzQgdmFsKSB7XFxuICAgICAgXCIrdC5vdXRwdXQrXCIgPSB2YWw7XFxuICAgIH1cXG4gIFwifShjKSk6KGE9ZnVuY3Rpb24odCxlKXtzd2l0Y2godC5sZW5ndGgpe2Nhc2UgMDpyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIHJldHVybiAwO1xcbiAgICB9XFxuICBcIjtjYXNlIDE6cmV0dXJuIGZ1bmN0aW9uKHQsZSl7aWYoMT09PWVbMF0pcmV0dXJuXCJcXG4gICAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgICAgcmV0dXJuIGludChyZXN1bHRVVi54ICogXCIrZVsxXStcIi4wKTtcXG4gICAgICB9XFxuICAgIFwiO2lmKDE9PT1lWzFdKXJldHVyblwiXFxuICAgICAgaW50IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiBpbnQocmVzdWx0VVYueSAqIFwiK2VbMF0rXCIuMCk7XFxuICAgICAgfVxcbiAgICBcIjtyZXR1cm5cIlxcbiAgICBpbnQgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgcmV0dXJuIHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgfVxcbiAgXCJ9KDAsZSk7Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0LGUpe2lmKHkodCxlKSlyZXR1cm5cIlxcbiAgICAgIGl2ZWMyIGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICAgIHJldHVybiBpdmVjMihyZXN1bHRVVi55eCAqIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PXRbMV0pcmV0dXJuXCJcXG4gICAgICBpdmVjMiBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgICByZXR1cm4gaXZlYzIoaW5kZXgsIDApO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PXRbMF0pcmV0dXJuXCJcXG4gICAgICBpdmVjMiBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgICByZXR1cm4gaXZlYzIoMCwgaW5kZXgpO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgaXZlYzIgZ2V0T3V0cHV0Q29vcmRzKCkge1xcbiAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmVjMihcIitlWzBdK1wiLCBcIitlWzFdK1wiKSk7XFxuICAgICAgaW50IGluZGV4ID0gcmVzVGV4UkMueCAqIFwiK2VbMV0rXCIgKyByZXNUZXhSQy55O1xcbiAgICAgIGludCByID0gaW5kZXggLyBcIit0WzFdK1wiO1xcbiAgICAgIGludCBjID0gaW5kZXggLSByICogXCIrdFsxXStcIjtcXG4gICAgICByZXR1cm4gaXZlYzIociwgYyk7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgMzpyZXR1cm4gbj1lLHI9Qm8oW1wiclwiLFwiY1wiLFwiZFwiXSx0KSxcIlxcbiAgICBpdmVjMyBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK25bMF0rXCIsIFwiK25bMV0rXCIpKTtcXG4gICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrblsxXStcIiArIHJlc1RleFJDLnk7XFxuICAgICAgXCIrcitcIlxcbiAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgfVxcbiAgXCI7Y2FzZSA0OnJldHVybiBmdW5jdGlvbih0LGUpe3ZhciBuPUJvKFtcInJcIixcImNcIixcImRcIixcImQyXCJdLHQpO3JldHVyblwiXFxuICAgIGl2ZWM0IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG4gICAgICBcIituK1wiXFxuICAgICAgcmV0dXJuIGl2ZWM0KHIsIGMsIGQsIGQyKTtcXG4gICAgfVxcbiAgXCJ9KHQsZSk7Y2FzZSA1OnJldHVybiBmdW5jdGlvbih0LGUpe3ZhciBuPUJvKFtcInJcIixcImNcIixcImRcIixcImQyXCIsXCJkM1wiXSx0KTtyZXR1cm5cIlxcbiAgICBpdmVjNSBnZXRPdXRwdXRDb29yZHMoKSB7XFxuICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqIHZlYzIoXCIrZVswXStcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiK2VbMV0rXCIpKTtcXG5cXG4gICAgICBpbnQgaW5kZXggPSByZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnk7XFxuXFxuICAgICAgXCIrbitcIlxcblxcbiAgICAgIGl2ZWM1IG91dFNoYXBlID0gaXZlYzUociwgYywgZCwgZDIsIGQzKTtcXG4gICAgICByZXR1cm4gb3V0U2hhcGU7XFxuICAgIH1cXG4gIFwifSh0LGUpO2Nhc2UgNjpyZXR1cm4gZnVuY3Rpb24odCxlKXt2YXIgbj1CbyhbXCJyXCIsXCJjXCIsXCJkXCIsXCJkMlwiLFwiZDNcIixcImQ0XCJdLHQpO3JldHVyblwiXFxuICAgIGl2ZWM2IGdldE91dHB1dENvb3JkcygpIHtcXG4gICAgICBpdmVjMiByZXNUZXhSQyA9IGl2ZWMyKHJlc3VsdFVWLnl4ICpcXG4gICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgIGludCBpbmRleCA9IHJlc1RleFJDLnggKiBcIitlWzFdK1wiICsgcmVzVGV4UkMueTtcXG5cXG4gICAgICBcIituK1wiXFxuXFxuICAgICAgaXZlYzYgcmVzdWx0ID0gaXZlYzYociwgYywgZCwgZDIsIGQzLCBkNCk7XFxuICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgfVxcbiAgXCJ9KHQsZSk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IodC5sZW5ndGgrXCItRCBvdXRwdXQgc2FtcGxpbmcgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9dmFyIG4scn0oZS5sb2dpY2FsU2hhcGUsbCksaT1mdW5jdGlvbih0KXtyZXR1cm5cIlxcbiAgICB2b2lkIHNldE91dHB1dChmbG9hdCB2YWwpIHtcXG4gICAgICBcIit0Lm91dHB1dCtcIiA9IHZlYzQodmFsLCAwLCAwLCAwKTtcXG4gICAgfVxcbiAgXCJ9KGMpKSxyJiYocCs9cW8pLFtwLGgsaSxzLGEsdSxuXS5qb2luKFwiXFxuXCIpfWZ1bmN0aW9uIFVvKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZTtzd2l0Y2goZS5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSk7aWYodC5zaGFwZUluZm8uaXNVbmlmb3JtKXJldHVyblwiZmxvYXQgXCIrbitcIigpIHtyZXR1cm4gXCIrZStcIjt9XCI7dmFyIHI9dC5zaGFwZUluZm8udGV4U2hhcGUsbz1yWzBdLGE9clsxXTtpZigxPT09byYmMT09PWEpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKCkge1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgaGFsZkNSKTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciBpPXQuc2hhcGVJbmZvLnRleFNoYXBlLHM9aVswXSx1PWlbMV0sbD0kbyhlKTtyZXR1cm5cIlxcbiAgICBmbG9hdCBcIituK1wiKCkge1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK3MrXCIsIFwiK3UrXCIsIFwiK2wrXCIpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK2UrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMTpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSk7aWYodC5zaGFwZUluZm8uaXNVbmlmb3JtKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrbitcIihpbnQgaW5kZXgpIHtcXG4gICAgICAgIFwiK0tvKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgcj10LnNoYXBlSW5mby50ZXhTaGFwZSxvPXJbMF0sYT1yWzFdO2lmKDE9PT1hJiYxPT09bylyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK24rXCIoaW50IGluZGV4KSB7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIitlK1wiLCBoYWxmQ1IpO1xcbiAgICAgIH1cXG4gICAgXCI7dmFyIGk9JG8oZSk7aWYoMT09PWEpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgICAgdmVjMiB1diA9IHZlYzIoMC41LCAoZmxvYXQoaW5kZXggKyBcIitpK1wiKSArIDAuNSkgLyBcIitvK1wiLjApO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7aWYoMT09PW8pcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgICAgdmVjMiB1diA9IHZlYzIoKGZsb2F0KGluZGV4ICsgXCIraStcIikgKyAwLjUpIC8gXCIrYStcIi4wLCAwLjUpO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrZStcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7cmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrbitcIihpbnQgaW5kZXgpIHtcXG4gICAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIitvK1wiLCBcIithK1wiLCBpbmRleCArIFwiK2krXCIpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK2UrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMjpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLG49dC5uYW1lLHI9XCJnZXRcIituLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSksbz10LnNoYXBlSW5mby50ZXhTaGFwZTtpZihudWxsIT1vJiZ5KGUsbykpe3ZhciBhPW9bMF0saT1vWzFdO3JldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSAodmVjMihjb2wsIHJvdykgKyBoYWxmQ1IpIC8gdmVjMihcIitpK1wiLjAsIFwiK2ErXCIuMCk7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn12YXIgcz1rKGUpLHU9cy5uZXdTaGFwZSxsPXMua2VwdERpbXMsYz11O2lmKGMubGVuZ3RoPGUubGVuZ3RoKXt2YXIgaD1Ybyh0LGMpO3JldHVyblwiXFxuICAgICAgXCIrVW8oaCkrXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK1lvKFtcInJvd1wiLFwiY29sXCJdLGwpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgICAgaW50IGluZGV4ID0gcm91bmQoZG90KHZlYzIocm93LCBjb2wpLCB2ZWMyKFwiK2VbMV0rXCIsIDEpKSk7XFxuICAgICAgICBcIitLbyh0KStcIlxcbiAgICAgIH1cXG4gICAgXCI7dmFyIHA9b1swXSxmPW9bMV0sZD0kbyhuKTtpZigxPT09ZilyZXR1cm5cIlxcbiAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wpIHtcXG4gICAgICBmbG9hdCBpbmRleCA9IGRvdCh2ZWMzKHJvdywgY29sLCBcIitkK1wiKSwgdmVjMyhcIitlWzFdK1wiLCAxLCAxKSk7XFxuICAgICAgdmVjMiB1diA9IHZlYzIoMC41LCAoaW5kZXggKyAwLjUpIC8gXCIrcCtcIi4wKTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwiO2lmKDE9PT1wKXJldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIGZsb2F0IGluZGV4ID0gZG90KHZlYzMocm93LCBjb2wsIFwiK2QrXCIpLCB2ZWMzKFwiK2VbMV0rXCIsIDEsIDEpKTtcXG4gICAgICB2ZWMyIHV2ID0gdmVjMigoaW5kZXggKyAwLjUpIC8gXCIrZitcIi4wLCAwLjUpO1xcbiAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgfVxcbiAgXCI7cmV0dXJuXCJcXG4gIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAvLyBFeHBsaWNpdGx5IHVzZSBpbnRlZ2VyIG9wZXJhdGlvbnMgYXMgZG90KCkgb25seSB3b3JrcyBvbiBmbG9hdHMuXFxuICAgIGludCBpbmRleCA9IHJvdyAqIFwiK2VbMV0rXCIgKyBjb2wgKyBcIitkK1wiO1xcbiAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIitwK1wiLCBcIitmK1wiLCBpbmRleCk7XFxuICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gIH1cXG5cIn0odCk7Y2FzZSAzOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPWVbMV0qZVsyXSxhPWVbMl0saT1rKGUpLHM9aS5uZXdTaGFwZSx1PWkua2VwdERpbXMsbD1zO2lmKGwubGVuZ3RoPGUubGVuZ3RoKXt2YXIgYz1Ybyh0LGwpO3JldHVyblwiXFxuICAgICAgICBcIitVbyhjKStcIlxcbiAgICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgICAgcmV0dXJuIFwiK3IrXCIoXCIrWW8oW1wicm93XCIsXCJjb2xcIixcImRlcHRoXCJdLHUpK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn1pZih0LnNoYXBlSW5mby5pc1VuaWZvcm0pcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCkge1xcbiAgICAgICAgaW50IGluZGV4ID0gcm91bmQoZG90KHZlYzMocm93LCBjb2wsIGRlcHRoKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzMoXCIrbytcIiwgXCIrYStcIiwgMSkpKTtcXG4gICAgICAgIFwiK0tvKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgaD10LnNoYXBlSW5mby50ZXhTaGFwZSxwPWhbMF0sZj1oWzFdLGQ9dC5zaGFwZUluZm8uZmxhdE9mZnNldDtpZihmPT09byYmbnVsbD09ZClyZXR1cm5cIlxcbiAgICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgICAgZmxvYXQgdGV4UiA9IGZsb2F0KHJvdyk7XFxuICAgICAgICAgIGZsb2F0IHRleEMgPSBkb3QodmVjMihjb2wsIGRlcHRoKSwgdmVjMihcIithK1wiLCAxKSk7XFxuICAgICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZitcIi4wLCBcIitwK1wiLjApO1xcbiAgICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgICB9XFxuICAgICAgXCI7aWYoZj09PWEmJm51bGw9PWQpcmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICBmbG9hdCB0ZXhSID0gZG90KHZlYzIocm93LCBjb2wpLCB2ZWMyKFwiK2VbMV0rXCIsIDEpKTtcXG4gICAgICBmbG9hdCB0ZXhDID0gZmxvYXQoZGVwdGgpO1xcbiAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgLyB2ZWMyKFwiK2YrXCIuMCwgXCIrcCtcIi4wKTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwiO3ZhciB2PSRvKG4pO3JldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgpIHtcXG4gICAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICAgIGludCBpbmRleCA9IHJvdyAqIFwiK28rXCIgKyBjb2wgKiBcIithK1wiICsgZGVwdGggKyBcIit2K1wiO1xcbiAgICAgICAgdmVjMiB1diA9IHV2RnJvbUZsYXQoXCIrcCtcIiwgXCIrZitcIiwgaW5kZXgpO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICAgIH1cXG4gIFwifSh0KTtjYXNlIDQ6cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPXQubmFtZSxyPVwiZ2V0XCIrbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89ZVszXSxhPWVbMl0qbyxpPWVbMV0qYSxzPWsoZSksdT1zLm5ld1NoYXBlLGw9cy5rZXB0RGltcztpZih1Lmxlbmd0aDxlLmxlbmd0aCl7dmFyIGM9WG8odCx1KTtyZXR1cm5cIlxcbiAgICAgIFwiK1VvKGMpK1wiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK1lvKFtcInJvd1wiLFwiY29sXCIsXCJkZXB0aFwiLFwiZGVwdGgyXCJdLGwpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyKSB7XFxuICAgICAgICBpbnQgaW5kZXggPSByb3VuZChkb3QodmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICB2ZWM0KFwiK2krXCIsIFwiK2ErXCIsIFwiK28rXCIsIDEpKSk7XFxuICAgICAgICBcIitLbyh0KStcIlxcbiAgICAgIH1cXG4gICAgXCI7dmFyIGg9dC5zaGFwZUluZm8uZmxhdE9mZnNldCxwPXQuc2hhcGVJbmZvLnRleFNoYXBlLGY9cFswXSxkPXBbMV07aWYoZD09PWkmJm51bGw9PWgpcmV0dXJuXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCwgaW50IGRlcHRoMikge1xcbiAgICAgICAgZmxvYXQgdGV4UiA9IGZsb2F0KHJvdyk7XFxuICAgICAgICBmbG9hdCB0ZXhDID1cXG4gICAgICAgICAgICBkb3QodmVjMyhjb2wsIGRlcHRoLCBkZXB0aDIpLFxcbiAgICAgICAgICAgICAgICB2ZWMzKFwiK2ErXCIsIFwiK28rXCIsIDEpKTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK2QrXCIuMCwgXCIrZitcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO2lmKGQ9PT1vJiZudWxsPT1oKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIpIHtcXG4gICAgICAgIGZsb2F0IHRleFIgPSBkb3QodmVjMyhyb3csIGNvbCwgZGVwdGgpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICB2ZWMzKFwiK2VbMV0qZVsyXStcIiwgXCIrZVsyXStcIiwgMSkpO1xcbiAgICAgICAgZmxvYXQgdGV4QyA9IGZsb2F0KGRlcHRoMik7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC9cXG4gICAgICAgICAgICAgICAgICB2ZWMyKFwiK2QrXCIuMCwgXCIrZitcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciB2PSRvKG4pO3JldHVyblwiXFxuICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyKSB7XFxuICAgICAgLy8gRXhwbGljaXRseSB1c2UgaW50ZWdlciBvcGVyYXRpb25zIGFzIGRvdCgpIG9ubHkgd29ya3Mgb24gZmxvYXRzLlxcbiAgICAgIGludCBpbmRleCA9IHJvdyAqIFwiK2krXCIgKyBjb2wgKiBcIithK1wiICtcXG4gICAgICAgICAgZGVwdGggKiBcIitvK1wiICsgZGVwdGgyO1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK2YrXCIsIFwiK2QrXCIsIGluZGV4ICsgXCIrditcIik7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7Y2FzZSA1OnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPWVbNF0sYT1lWzNdKm8saT1lWzJdKmEscz1lWzFdKmksdT1rKGUpLGw9dS5uZXdTaGFwZSxjPXUua2VwdERpbXM7aWYobC5sZW5ndGg8ZS5sZW5ndGgpe3ZhciBoPVhvKHQsbCk7cmV0dXJuXCJcXG4gICAgICBcIitVbyhoKStcIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICByZXR1cm4gXCIrcitcIihcIitZbyhbXCJyb3dcIixcImNvbFwiLFwiZGVwdGhcIixcImRlcHRoMlwiLFwiZGVwdGgzXCJdLGMpK1wiKTtcXG4gICAgICB9XFxuICAgIFwifWlmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICBmbG9hdCBpbmRleCA9IGRvdChcXG4gICAgICAgICAgdmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgIHZlYzQoXCIrcytcIiwgXCIraStcIiwgXCIrYStcIiwgXCIrbytcIikpICtcXG4gICAgICAgICAgZGVwdGgzO1xcbiAgICAgICAgXCIrS28odCkrXCJcXG4gICAgICB9XFxuICAgIFwiO3ZhciBwPXQuc2hhcGVJbmZvLmZsYXRPZmZzZXQsZj10LnNoYXBlSW5mby50ZXhTaGFwZSxkPWZbMF0sdj1mWzFdO2lmKHY9PT1zJiZudWxsPT1wKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsIGludCBkZXB0aDIsIGludCBkZXB0aDMpIHtcXG4gICAgICAgIGludCB0ZXhSID0gcm93O1xcbiAgICAgICAgZmxvYXQgdGV4QyA9IGRvdCh2ZWM0KGNvbCwgZGVwdGgsIGRlcHRoMiwgZGVwdGgzKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgdmVjNChcIitpK1wiLCBcIithK1wiLCBcIitvK1wiLCAxKSk7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC9cXG4gICAgICAgICAgICAgICAgICAgdmVjMihcIit2K1wiLjAsIFwiK2QrXCIuMCk7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgfVxcbiAgICBcIjtpZih2PT09byYmbnVsbD09cClyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLCBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzKSB7XFxuICAgICAgICBmbG9hdCB0ZXhSID0gZG90KFxcbiAgICAgICAgICB2ZWM0KHJvdywgY29sLCBkZXB0aCwgZGVwdGgyKSxcXG4gICAgICAgICAgdmVjNChcIitlWzFdKmVbMl0qZVszXStcIixcXG4gICAgICAgICAgICAgICBcIitlWzJdKmVbM10rXCIsIFwiK2VbM10rXCIsIDEpKTtcXG4gICAgICAgIGludCB0ZXhDID0gZGVwdGgzO1xcbiAgICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvXFxuICAgICAgICAgICAgICAgICAgdmVjMihcIit2K1wiLjAsIFwiK2QrXCIuMCk7XFxuICAgICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgICAgfVxcbiAgICBcIjt2YXIgbT0kbyhuKTtyZXR1cm5cIlxcbiAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCwgaW50IGRlcHRoMiwgaW50IGRlcHRoMykge1xcbiAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICBpbnQgaW5kZXggPSByb3cgKiBcIitzK1wiICsgY29sICogXCIraStcIiArIGRlcHRoICogXCIrYStcIiArXFxuICAgICAgICAgIGRlcHRoMiAqIFwiK28rXCIgKyBkZXB0aDMgKyBcIittK1wiO1xcbiAgICAgIHZlYzIgdXYgPSB1dkZyb21GbGF0KFwiK2QrXCIsIFwiK3YrXCIsIGluZGV4KTtcXG4gICAgICByZXR1cm4gc2FtcGxlVGV4dHVyZShcIituK1wiLCB1dik7XFxuICAgIH1cXG4gIFwifSh0KTtjYXNlIDY6cmV0dXJuIGZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPXQubmFtZSxyPVwiZ2V0XCIrbi5jaGFyQXQoMCkudG9VcHBlckNhc2UoKStuLnNsaWNlKDEpLG89ayhlKSxhPW8ubmV3U2hhcGUsaT1vLmtlcHREaW1zO2lmKGEubGVuZ3RoPGUubGVuZ3RoKXt2YXIgcz1Ybyh0LGEpO3JldHVyblwiXFxuICAgICAgXCIrVW8ocykrXCJcXG4gICAgICBmbG9hdCBcIityK1wiKGludCByb3csIGludCBjb2wsIGludCBkZXB0aCxcXG4gICAgICAgICAgICAgICAgICAgIGludCBkZXB0aDIsIGludCBkZXB0aDMsIGludCBkZXB0aDQpIHtcXG4gICAgICAgIHJldHVybiBcIityK1wiKFwiK1lvKFtcInJvd1wiLFwiY29sXCIsXCJkZXB0aFwiLFwiZGVwdGgyXCIsXCJkZXB0aDNcIixcImRlcHRoNFwiXSxpKStcIik7XFxuICAgICAgfVxcbiAgICBcIn12YXIgdT1lWzVdLGw9ZVs0XSp1LGM9ZVszXSpsLGg9ZVsyXSpjLHA9ZVsxXSpoO2lmKHQuc2hhcGVJbmZvLmlzVW5pZm9ybSlyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLFxcbiAgICAgICAgICAgICAgICAgIGludCBkZXB0aDIsIGludCBkZXB0aDMsIGludCBkZXB0aDQpIHtcXG4gICAgICAgIGludCBpbmRleCA9IHJvdW5kKGRvdChcXG4gICAgICAgICAgdmVjNChyb3csIGNvbCwgZGVwdGgsIGRlcHRoMiksXFxuICAgICAgICAgIHZlYzQoXCIrcCtcIiwgXCIraCtcIiwgXCIrYytcIiwgXCIrbCtcIikpICtcXG4gICAgICAgICAgZG90KFxcbiAgICAgICAgICAgIHZlYzIoZGVwdGgzLCBkZXB0aDQpLFxcbiAgICAgICAgICAgIHZlYzIoXCIrdStcIiwgMSkpKTtcXG4gICAgICAgIFwiK0tvKHQpK1wiXFxuICAgICAgfVxcbiAgICBcIjt2YXIgZj10LnNoYXBlSW5mby5mbGF0T2Zmc2V0LGQ9dC5zaGFwZUluZm8udGV4U2hhcGUsdj1kWzBdLG09ZFsxXTtpZihtPT09cCYmbnVsbD09ZilyZXR1cm5cIlxcbiAgICAgIGZsb2F0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCwgaW50IGRlcHRoLFxcbiAgICAgICAgICAgICAgICAgICAgaW50IGRlcHRoMiwgaW50IGRlcHRoMywgaW50IGRlcHRoNCkge1xcbiAgICAgICAgaW50IHRleFIgPSByb3c7XFxuICAgICAgICBmbG9hdCB0ZXhDID0gZG90KHZlYzQoY29sLCBkZXB0aCwgZGVwdGgyLCBkZXB0aDMpLFxcbiAgICAgICAgICB2ZWM0KFwiK2grXCIsIFwiK2MrXCIsIFwiK2wrXCIsIFwiK3UrXCIpKSArXFxuICAgICAgICAgICAgICAgZmxvYXQoZGVwdGg0KTtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgICB2ZWMyKFwiK20rXCIuMCwgXCIrditcIi4wKTtcXG4gICAgICAgIHJldHVybiBzYW1wbGVUZXh0dXJlKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO2lmKG09PT11JiZudWxsPT1mKXJldHVyblwiXFxuICAgICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsXFxuICAgICAgICAgICAgICAgICAgICBpbnQgZGVwdGgyLCBpbnQgZGVwdGgzLCBpbnQgZGVwdGg0KSB7XFxuICAgICAgICBmbG9hdCB0ZXhSID0gZG90KHZlYzQocm93LCBjb2wsIGRlcHRoLCBkZXB0aDIpLFxcbiAgICAgICAgICB2ZWM0KFwiK2VbMV0qZVsyXSplWzNdKmVbNF0rXCIsXFxuICAgICAgICAgICAgICAgXCIrZVsyXSplWzNdKmVbNF0rXCIsXFxuICAgICAgICAgICAgICAgXCIrZVszXSplWzRdK1wiLFxcbiAgICAgICAgICAgICAgIFwiK2VbNF0rXCIpKSArIGZsb2F0KGRlcHRoMyk7XFxuICAgICAgICBpbnQgdGV4QyA9IGRlcHRoNDtcXG4gICAgICAgIHZlYzIgdXYgPSAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgL1xcbiAgICAgICAgICAgICAgICAgIHZlYzIoXCIrbStcIi4wLCBcIit2K1wiLjApO1xcbiAgICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICAgIH1cXG4gICAgXCI7dmFyIGc9JG8obik7cmV0dXJuXCJcXG4gICAgZmxvYXQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sLCBpbnQgZGVwdGgsXFxuICAgICAgICAgICAgICAgICAgaW50IGRlcHRoMiwgaW50IGRlcHRoMywgaW50IGRlcHRoNCkge1xcbiAgICAgIC8vIEV4cGxpY2l0bHkgdXNlIGludGVnZXIgb3BlcmF0aW9ucyBhcyBkb3QoKSBvbmx5IHdvcmtzIG9uIGZsb2F0cy5cXG4gICAgICBpbnQgaW5kZXggPSByb3cgKiBcIitwK1wiICsgY29sICogXCIraCtcIiArIGRlcHRoICogXCIrYytcIiArXFxuICAgICAgICAgIGRlcHRoMiAqIFwiK2wrXCIgKyBkZXB0aDMgKiBcIit1K1wiICsgZGVwdGg0ICsgXCIrZytcIjtcXG4gICAgICB2ZWMyIHV2ID0gdXZGcm9tRmxhdChcIit2K1wiLCBcIittK1wiLCBpbmRleCk7XFxuICAgICAgcmV0dXJuIHNhbXBsZVRleHR1cmUoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoZS5sZW5ndGgrXCItRCBpbnB1dCBzYW1wbGluZyBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKX19ZnVuY3Rpb24gVm8odCl7dmFyIGUsbixyO3N3aXRjaCh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUubGVuZ3RoKXtjYXNlIDA6cmV0dXJuIGU9dC5uYW1lLG49XCJnZXRcIitlLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkscj1NbygpLFwiXFxuICAgIHZlYzQgXCIrbitcIigpIHtcXG4gICAgICByZXR1cm4gXCIrci50ZXh0dXJlMkQrXCIoXCIrZStcIiwgaGFsZkNSKTtcXG4gICAgfVxcbiAgXCI7Y2FzZSAxOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10Lm5hbWUsbj1cImdldFwiK2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxyPXQuc2hhcGVJbmZvLnRleFNoYXBlLG89W01hdGguY2VpbChyWzBdLzIpLE1hdGguY2VpbChyWzFdLzIpXSxhPU1vKCk7cmV0dXJuXCJcXG4gICAgdmVjNCBcIituK1wiKGludCBpbmRleCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20xRChcXG4gICAgICAgIFwiK29bMF0rXCIsIFwiK29bMV0rXCIsIGluZGV4KTtcXG4gICAgICByZXR1cm4gXCIrYS50ZXh0dXJlMkQrXCIoXCIrZStcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7Y2FzZSAyOnJldHVybiBmdW5jdGlvbih0KXt2YXIgZT10LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUsbj10Lm5hbWUscj1cImdldFwiK24uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSxvPXQuc2hhcGVJbmZvLnRleFNoYXBlLGE9b1swXSxpPW9bMV0scz1NbygpO2lmKG51bGwhPW8mJnkoZSxvKSlyZXR1cm5cIlxcbiAgICAgIHZlYzQgXCIrcitcIihpbnQgcm93LCBpbnQgY29sKSB7XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIoY29sLCByb3cpICsgaGFsZkNSKSAvIHZlYzIoXCIraStcIi4wLCBcIithK1wiLjApO1xcblxcbiAgICAgICAgcmV0dXJuIFwiK3MudGV4dHVyZTJEK1wiKFwiK24rXCIsIHV2KTtcXG4gICAgICB9XFxuICAgIFwiO3ZhciB1PVtNYXRoLmNlaWwob1swXS8yKSxNYXRoLmNlaWwob1sxXS8yKV0sbD1NYXRoLmNlaWwoZVsxXS8yKTtyZXR1cm5cIlxcbiAgICB2ZWM0IFwiK3IrXCIoaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20yRChcIitsK1wiLCBcIit1WzBdK1wiLCBcIit1WzFdK1wiLCByb3csIGNvbCk7XFxuICAgICAgcmV0dXJuIFwiK3MudGV4dHVyZTJEK1wiKFwiK24rXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpO2Nhc2UgMzpyZXR1cm4gZnVuY3Rpb24odCl7dmFyIGU9dC5zaGFwZUluZm8ubG9naWNhbFNoYXBlLG49dC5uYW1lLHI9XCJnZXRcIituLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSksbz10LnNoYXBlSW5mby50ZXhTaGFwZSxhPVtNYXRoLmNlaWwob1swXS8yKSxNYXRoLmNlaWwob1sxXS8yKV07aWYoMT09PWVbMF0pe3ZhciBpPWUuc2xpY2UoMSkscz1Ybyh0LGkpO3JldHVyblwiXFxuICAgICAgICBcIitWbyhzKStcIlxcbiAgICAgICAgdmVjNCBcIityK1wiKGludCBiLCBpbnQgcm93LCBpbnQgY29sKSB7XFxuICAgICAgICAgIHJldHVybiBcIityK1wiKFwiK1lvKFtcImJcIixcInJvd1wiLFwiY29sXCJdLFsxLDJdKStcIik7XFxuICAgICAgICB9XFxuICAgICAgXCJ9dmFyIHU9YVswXSxsPWFbMV0sYz1NYXRoLmNlaWwoZVsyXS8yKSxoPWMqTWF0aC5jZWlsKGVbMV0vMikscD1NbygpO3JldHVyblwiXFxuICAgIHZlYzQgXCIrcitcIihpbnQgYiwgaW50IHJvdywgaW50IGNvbCkge1xcbiAgICAgIHZlYzIgdXYgPSBwYWNrZWRVVmZyb20zRChcXG4gICAgICAgIFwiK3UrXCIsIFwiK2wrXCIsIFwiK2grXCIsIFwiK2MrXCIsIGIsIHJvdywgY29sKTtcXG4gICAgICByZXR1cm4gXCIrcC50ZXh0dXJlMkQrXCIoXCIrbitcIiwgdXYpO1xcbiAgICB9XFxuICBcIn0odCk7ZGVmYXVsdDpyZXR1cm4gZnVuY3Rpb24odCl7Zm9yKHZhciBlPXQuc2hhcGVJbmZvLmxvZ2ljYWxTaGFwZSxuPWUubGVuZ3RoLHI9dC5uYW1lLG89XCJnZXRcIityLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK3Iuc2xpY2UoMSksYT10LnNoYXBlSW5mby50ZXhTaGFwZSxpPVtNYXRoLmNlaWwoYVswXS8yKSxNYXRoLmNlaWwoYVsxXS8yKV0scz1pWzBdLHU9aVsxXSxsPU1hdGguY2VpbChlW24tMV0vMiksYz1sKk1hdGguY2VpbChlW24tMl0vMiksaD1cImludCBiLCBpbnQgcm93LCBpbnQgY29sXCIscD1cImIgKiBcIitjK1wiICsgKHJvdyAvIDIpICogXCIrbCtcIiArIChjb2wgLyAyKVwiLGY9MjtmPG4tMTtmKyspaD1cImludCBiXCIrZitcIiwgXCIraCxjKj1lW24tZi0xXSxwPVwiYlwiK2YrXCIgKiBcIitjK1wiICsgXCIrcDt2YXIgZD1NbygpO3JldHVyblwiXFxuICAgIHZlYzQgXCIrbytcIihcIitoK1wiKSB7XFxuICAgICAgaW50IGluZGV4ID0gXCIrcCtcIjtcXG4gICAgICBpbnQgdGV4UiA9IGluZGV4IC8gXCIrdStcIjtcXG4gICAgICBpbnQgdGV4QyA9IGluZGV4IC0gdGV4UiAqIFwiK3UrXCI7XFxuICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIoXCIrdStcIiwgXCIrcytcIik7XFxuICAgICAgcmV0dXJuIFwiK2QudGV4dHVyZTJEK1wiKFwiK3IrXCIsIHV2KTtcXG4gICAgfVxcbiAgXCJ9KHQpfX12YXIgem89XCJcXG52ZWMyIHV2RnJvbUZsYXQoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLCBpbnQgaW5kZXgpIHtcXG4gIGludCB0ZXhSID0gaW5kZXggLyB0ZXhOdW1DO1xcbiAgaW50IHRleEMgPSBpbmRleCAtIHRleFIgKiB0ZXhOdW1DO1xcbiAgcmV0dXJuICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIodGV4TnVtQywgdGV4TnVtUik7XFxufVxcbnZlYzIgcGFja2VkVVZmcm9tMUQoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLCBpbnQgaW5kZXgpIHtcXG4gIGludCB0ZXhlbEluZGV4ID0gaW5kZXggLyAyO1xcbiAgaW50IHRleFIgPSB0ZXhlbEluZGV4IC8gdGV4TnVtQztcXG4gIGludCB0ZXhDID0gdGV4ZWxJbmRleCAtIHRleFIgKiB0ZXhOdW1DO1xcbiAgcmV0dXJuICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIodGV4TnVtQywgdGV4TnVtUik7XFxufVxcblwiLEdvPVwiXFxudmVjMiBwYWNrZWRVVmZyb20yRChpbnQgdGV4ZWxzSW5Mb2dpY2FsUm93LCBpbnQgdGV4TnVtUixcXG4gIGludCB0ZXhOdW1DLCBpbnQgcm93LCBpbnQgY29sKSB7XFxuICBpbnQgdGV4ZWxJbmRleCA9IChyb3cgLyAyKSAqIHRleGVsc0luTG9naWNhbFJvdyArIChjb2wgLyAyKTtcXG4gIGludCB0ZXhSID0gdGV4ZWxJbmRleCAvIHRleE51bUM7XFxuICBpbnQgdGV4QyA9IHRleGVsSW5kZXggLSB0ZXhSICogdGV4TnVtQztcXG4gIHJldHVybiAodmVjMih0ZXhDLCB0ZXhSKSArIGhhbGZDUikgLyB2ZWMyKHRleE51bUMsIHRleE51bVIpO1xcbn1cXG5cIixIbz1cIlxcbnZlYzIgcGFja2VkVVZmcm9tM0QoaW50IHRleE51bVIsIGludCB0ZXhOdW1DLFxcbiAgICBpbnQgdGV4ZWxzSW5CYXRjaCwgaW50IHRleGVsc0luTG9naWNhbFJvdywgaW50IGIsXFxuICAgIGludCByb3csIGludCBjb2wpIHtcXG4gIGludCBpbmRleCA9IGIgKiB0ZXhlbHNJbkJhdGNoICsgKHJvdyAvIDIpICogdGV4ZWxzSW5Mb2dpY2FsUm93ICsgKGNvbCAvIDIpO1xcbiAgaW50IHRleFIgPSBpbmRleCAvIHRleE51bUM7XFxuICBpbnQgdGV4QyA9IGluZGV4IC0gdGV4UiAqIHRleE51bUM7XFxuICByZXR1cm4gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC8gdmVjMih0ZXhOdW1DLCB0ZXhOdW1SKTtcXG59XFxuXCIscW89XCJcXG4gIGZsb2F0IGdldENoYW5uZWwodmVjNCBmcmFnLCB2ZWMyIGlubmVyRGltcykge1xcbiAgICB2ZWMyIG1vZENvb3JkID0gbW9kKGlubmVyRGltcywgMi4pO1xcbiAgICByZXR1cm4gbW9kQ29vcmQueCA9PSAwLiA/XFxuICAgICAgKG1vZENvb3JkLnkgPT0gMC4gPyBmcmFnLnIgOiBmcmFnLmcpIDpcXG4gICAgICAobW9kQ29vcmQueSA9PSAwLiA/IGZyYWcuYiA6IGZyYWcuYSk7XFxuICB9XFxuICBmbG9hdCBnZXRDaGFubmVsKHZlYzQgZnJhZywgaW50IGRpbSkge1xcbiAgICBmbG9hdCBtb2RDb29yZCA9IG1vZChmbG9hdChkaW0pLCAyLik7XFxuICAgIHJldHVybiBtb2RDb29yZCA9PSAwLiA/IGZyYWcuciA6IGZyYWcuZztcXG4gIH1cXG5cIjtmdW5jdGlvbiAkbyh0KXtyZXR1cm5cIm9mZnNldFwiK3R9ZnVuY3Rpb24gS28odCl7dmFyIGU9dC5uYW1lLG49Zyh0LnNoYXBlSW5mby5sb2dpY2FsU2hhcGUpO3JldHVybiBuPDI/XCJyZXR1cm4gXCIrZStcIjtcIjpcIlxcbiAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK24rXCI7IGkrKykge1xcbiAgICAgIGlmIChpID09IGluZGV4KSB7XFxuICAgICAgICByZXR1cm4gXCIrZStcIltpXTtcXG4gICAgICB9XFxuICAgIH1cXG4gIFwifWZ1bmN0aW9uIGpvKHQpe2lmKHQ8PTEpcmV0dXJuXCJpbnRcIjtpZigyPT09dClyZXR1cm5cIml2ZWMyXCI7aWYoMz09PXQpcmV0dXJuXCJpdmVjM1wiO2lmKDQ9PT10KXJldHVyblwiaXZlYzRcIjtpZig1PT09dClyZXR1cm5cIml2ZWM1XCI7aWYoNj09PXQpcmV0dXJuXCJpdmVjNlwiO3Rocm93IEVycm9yKFwiR1BVIGZvciByYW5rIFwiK3QrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9ZnVuY3Rpb24gWG8odCxlKXt2YXIgbj1KU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHQpKTtyZXR1cm4gbi5zaGFwZUluZm8ubG9naWNhbFNoYXBlPWUsbn1mdW5jdGlvbiBZbyh0LGUpe3JldHVybiBlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gdFtlXX0pLmpvaW4oXCIsIFwiKX12YXIgUW89ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsZih0Lmxlbmd0aD4yLGZ1bmN0aW9uKCl7cmV0dXJuXCJQYWNrZWQgYXJnXCIrKG4uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrbi5zbGljZSgxKSkrXCIgc3VwcG9ydHMgb25seSBpbnB1dHMgd2l0aCByYW5rIGFib3ZlIDIuXCJ9KTt2YXIgbz10W3QubGVuZ3RoLTFdLGE9TWF0aC5jZWlsKG8vZSk7dGhpcy5vdXRwdXRTaGFwZT10LnNsaWNlKDAsLTEpLGE+MSYmdGhpcy5vdXRwdXRTaGFwZS5wdXNoKGEpLHJ8fHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwiYmVzdEluZGljZXNBXCIpO3ZhciBpLHMsdT10aGlzLm91dHB1dFNoYXBlLGw9dS5sZW5ndGgsYz1qbyhsKSxoPUZvKFwiY29vcmRzXCIsbCk7aWYoMT09PWEpe3ZhciBwPWpvKHM9bCsxKTtpPVwiXFxuICAgICAgICBcIitwK1wiIHNvdXJjZUxvY1IgPSBcIitwK1wiKFwiK2guam9pbigpK1wiLCAwKTtcXG4gICAgICAgICsrXCIraFtsLTFdK1wiO1xcbiAgICAgICAgXCIrcCtcIiBzb3VyY2VMb2NHID0gXCIrcCtcIihcIitoLmpvaW4oKStcIiwgMCk7XFxuICAgICAgICArK1wiK2hbbC0yXStcIjtcXG4gICAgICAgIFwiK3ArXCIgc291cmNlTG9jQSA9IFwiK3ArXCIoXCIraC5qb2luKCkrXCIsIDApO1xcbiAgICAgICAgLS1cIitoW2wtMV0rXCI7XFxuICAgICAgICBcIitwK1wiIHNvdXJjZUxvY0IgPSBcIitwK1wiKFwiK2guam9pbigpK1wiLCAwKTtcXG4gICAgICAgIC0tXCIraFtsLTJdK1wiO1wifWVsc2Ugcz1sLGk9XCJcXG4gICAgICAgIFwiK2MrXCIgc291cmNlTG9jUiA9IGNvb3JkcztcXG4gICAgICAgICsrXCIraFtsLTFdK1wiO1xcbiAgICAgICAgXCIrYytcIiBzb3VyY2VMb2NHID0gY29vcmRzO1xcbiAgICAgICAgKytcIitoW2wtMl0rXCI7XFxuICAgICAgICBcIitjK1wiIHNvdXJjZUxvY0EgPSBjb29yZHM7XFxuICAgICAgICAtLVwiK2hbbC0xXStcIjtcXG4gICAgICAgIFwiK2MrXCIgc291cmNlTG9jQiA9IGNvb3JkcztcXG4gICAgICAgIC0tXCIraFtsLTJdK1wiO1wiO3ZhciBkPVtcInhcIixcInlcIixcInpcIixcIndcIixcInVcIixcInZcIl0uc2xpY2UoMCxzKSx2PVwiLlwiK2Rbcy0xXSxtPWQubWFwKGZ1bmN0aW9uKHQpe3JldHVyblwiaW50IFwiK3R9KSxnPUZvKFwic291cmNlTG9jUlwiLHMtMSkuY29uY2F0KFwiaW5JZHguclwiKSx5PUZvKFwic291cmNlTG9jR1wiLHMtMSkuY29uY2F0KFwiaW5JZHguZ1wiKSx4PUZvKFwic291cmNlTG9jQlwiLHMtMSkuY29uY2F0KFwiaW5JZHguYlwiKSxiPUZvKFwic291cmNlTG9jQVwiLHMtMSkuY29uY2F0KFwiaW5JZHguYVwiKSx3PVwibWF4XCI9PT1uP1wiZ3JlYXRlclRoYW5cIjpcImxlc3NUaGFuXCIsQz1yP1wiXCI6XCJcXG4gICAgICAgICAgaW5JZHggPSByb3VuZCh2ZWM0KGdldEJlc3RJbmRpY2VzQUNoYW5uZWwoXCIrZy5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0QmVzdEluZGljZXNBQ2hhbm5lbChcIit5LmpvaW4oKStcIiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRCZXN0SW5kaWNlc0FDaGFubmVsKFwiK3guam9pbigpK1wiKSxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldEJlc3RJbmRpY2VzQUNoYW5uZWwoXCIrYi5qb2luKCkrXCIpKSk7XCIsRT1cInZlYzQoXFxuICAgICAgICAgICAgZ2V0QUNoYW5uZWwoXCIrZy5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgIGhhc05leHRDb2wgPyBnZXRBQ2hhbm5lbChcIit5LmpvaW4oKStcIikgOiAwLixcXG4gICAgICAgICAgICBoYXNOZXh0Um93ID8gZ2V0QUNoYW5uZWwoXCIreC5qb2luKCkrXCIpIDogMC4sXFxuICAgICAgICAgICAgaGFzTmV4dFJvdyAmJiBoYXNOZXh0Q29sID8gZ2V0QUNoYW5uZWwoXCIrYi5qb2luKCkrXCIpIDogMC4pXCIsUj1yP1wiXCI6XCJcXG4gICAgICBmbG9hdCBnZXRCZXN0SW5kaWNlc0FDaGFubmVsKFwiK20uam9pbigpK1wiKSB7XFxuICAgICAgICByZXR1cm4gZ2V0Q2hhbm5lbChnZXRCZXN0SW5kaWNlc0EoXCIrZC5qb2luKCkrXCIpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZC5zbGljZSgtMikuam9pbigpK1wiKSk7XFxuICAgICAgfVwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBnZXRBQ2hhbm5lbChcIittLmpvaW4oKStcIikge1xcbiAgICAgICAgcmV0dXJuIGdldENoYW5uZWwoZ2V0QShcIitkLmpvaW4oKStcIiksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlYzIoXCIrZC5zbGljZSgtMikuam9pbigpK1wiKSk7XFxuICAgICAgfVxcbiAgICAgIFwiK1IrXCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitjK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgYm9vbCBoYXNOZXh0Q29sID0gXCIraFtsLTFdK1wiIDwgXCIrKHVbbC0xXS0xKStcIjtcXG4gICAgICAgIGJvb2wgaGFzTmV4dFJvdyA9IFwiK2hbbC0yXStcIiA8IFwiKyh1W2wtMl0tMSkrXCI7XFxuICAgICAgICBcIitpK1wiXFxuICAgICAgICBpdmVjNCBzcmNJZHggPSBpdmVjNChzb3VyY2VMb2NSXCIrditcIiwgc291cmNlTG9jR1wiK3YrXCIsXFxuICAgICAgICAgIHNvdXJjZUxvY0JcIit2K1wiLCBzb3VyY2VMb2NBXCIrditcIikgKiBcIitlK1wiO1xcbiAgICAgICAgaXZlYzQgaW5JZHggPSBzcmNJZHg7XFxuICAgICAgICB2ZWM0IGJlc3RJbmRleCA9IHZlYzQoaW5JZHgpO1xcbiAgICAgICAgdmVjNCBiZXN0VmFsdWUgPSBcIitFK1wiO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIitlK1wiOyBpKyspIHtcXG4gICAgICAgICAgaW5JZHggPSBzcmNJZHg7XFxuICAgICAgICAgIFwiK0MrXCJcXG4gICAgICAgICAgdmVjNCBjYW5kaWRhdGUgPSBcIitFK1wiO1xcbiAgICAgICAgICBidmVjNCBuYW4gPSBpc25hbihjYW5kaWRhdGUpO1xcbiAgICAgICAgICBidmVjNCByZXBsYWNlID0gYnZlYzQoXFxuICAgICAgICAgICAgdmVjNChcIit3K1wiKGNhbmRpZGF0ZSwgYmVzdFZhbHVlKSkgKiAodmVjNCgxLjApIC0gdmVjNChuYW4pKSk7XFxuXFxuICAgICAgICAgIGJlc3RWYWx1ZSA9IHZlYzQocmVwbGFjZS54ICA/IGNhbmRpZGF0ZS54IDogYmVzdFZhbHVlLngsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS55ICA/IGNhbmRpZGF0ZS55IDogYmVzdFZhbHVlLnksXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS56ICA/IGNhbmRpZGF0ZS56IDogYmVzdFZhbHVlLnosXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwbGFjZS53ICA/IGNhbmRpZGF0ZS53IDogYmVzdFZhbHVlLncpO1xcbiAgICAgICAgICBiZXN0SW5kZXggPSBtaXgoYmVzdEluZGV4LCB2ZWM0KGluSWR4KSwgdmVjNChyZXBsYWNlKSk7XFxuICAgICAgICAgIHNyY0lkeCsrO1xcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGJlc3RJbmRleCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksSm89ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9dC5pblNoYXBlO3ZhciBlPXQuZmlsdGVySGVpZ2h0LG49dC5maWx0ZXJXaWR0aCxyPXQuc3RyaWRlSGVpZ2h0LG89dC5zdHJpZGVXaWR0aCxhPXQuZGlsYXRpb25IZWlnaHQsaT10LmRpbGF0aW9uV2lkdGgscz10LmVmZmVjdGl2ZUZpbHRlckhlaWdodCx1PXQuZWZmZWN0aXZlRmlsdGVyV2lkdGgsbD1zLTEtdC5wYWRJbmZvLnRvcCxjPXUtMS10LnBhZEluZm8ubGVmdCxoPTEvKGUqbik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitsK1wiLCBcIitjK1wiKTtcXG4gICAgICBjb25zdCBmbG9hdCBhdmdNdWx0aXBsaWVyID0gZmxvYXQoXCIraCtcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcblxcbiAgICAgICAgaXZlYzIgZHlSQ0Nvcm5lciA9IGNvb3Jkcy55eiAtIHBhZHM7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5UkNDb3JuZXIueTtcXG5cXG4gICAgICAgIC8vIENvbnZvbHZlIGR5KD8sID8sIGQpIHdpdGggcG9zIG1hc2soOiwgOiwgZCkgdG8gZ2V0IGR4KHhSLCB4QywgZCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrcytcIjtcXG4gICAgICAgICAgICB3UiArPSBcIithK1wiKSB7XFxuICAgICAgICAgIGZsb2F0IGR5UiA9IGZsb2F0KGR5UkNvcm5lciArIHdSKSAvIFwiK3IrXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fCBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK3UrXCI7XFxuICAgICAgICAgICAgd0MrPSBcIitpK1wiKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIrbytcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeUMgPCAwLjAgfHwgZHlDID49IFwiK3Qub3V0V2lkdGgrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeUMpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeUMgPSBpbnQoZHlDKTtcXG5cXG4gICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgaWR5UiwgaWR5QywgZCk7XFxuXFxuICAgICAgICAgICAgZG90UHJvZCArPSBkeVZhbHVlICogYXZnTXVsdGlwbGllcjtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLFpvPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPXQuaW5TaGFwZTt2YXIgZT10LmZpbHRlckRlcHRoLG49dC5maWx0ZXJIZWlnaHQscj10LmZpbHRlcldpZHRoLG89dC5zdHJpZGVEZXB0aCxhPXQuc3RyaWRlSGVpZ2h0LGk9dC5zdHJpZGVXaWR0aCxzPXQuZGlsYXRpb25EZXB0aCx1PXQuZGlsYXRpb25IZWlnaHQsbD10LmRpbGF0aW9uV2lkdGgsYz10LmVmZmVjdGl2ZUZpbHRlckRlcHRoLGg9dC5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQscD10LmVmZmVjdGl2ZUZpbHRlcldpZHRoLGY9Yy0xLXQucGFkSW5mby5mcm9udCxkPWgtMS10LnBhZEluZm8udG9wLHY9cC0xLXQucGFkSW5mby5sZWZ0LG09MS8oZSpuKnIpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMyBwYWRzID0gaXZlYzMoXCIrZitcIiwgXCIrZCtcIiwgXCIrditcIik7XFxuICAgICAgY29uc3QgZmxvYXQgYXZnTXVsdGlwbGllciA9IGZsb2F0KFwiK20rXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgY2ggPSBjb29yZHMudTtcXG5cXG4gICAgICAgIGl2ZWMzIGR5Q29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgLSBwYWRzO1xcbiAgICAgICAgaW50IGR5RENvcm5lciA9IGR5Q29ybmVyLng7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlDb3JuZXIueTtcXG4gICAgICAgIGludCBkeUNDb3JuZXIgPSBkeUNvcm5lci56O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgZHkoPywgPywgPywgZCkgd2l0aCBwb3MgbWFzayg6LCA6LCA6LCBjaCkgdG8gZ2V0XFxuICAgICAgICAvLyBkeCh4RCwgeFIsIHhDLCBjaCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCB3RCA9IDA7IHdEIDwgXCIrYytcIjtcXG4gICAgICAgICAgICB3RCArPSBcIitzK1wiKSB7XFxuICAgICAgICAgIGZsb2F0IGR5RCA9IGZsb2F0KGR5RENvcm5lciArIHdEKSAvIFwiK28rXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5RCA8IDAuMCB8fCBkeUQgPj0gXCIrdC5vdXREZXB0aCtcIi4wIHx8IGZyYWN0KGR5RCkgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5RCA9IGludChkeUQpO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIraCtcIjtcXG4gICAgICAgICAgICAgIHdSICs9IFwiK3UrXCIpIHtcXG4gICAgICAgICAgICBmbG9hdCBkeVIgPSBmbG9hdChkeVJDb3JuZXIgKyB3UikgLyBcIithK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrcCtcIjtcXG4gICAgICAgICAgICAgICAgd0MgKz0gXCIrbCtcIikge1xcbiAgICAgICAgICAgICAgZmxvYXQgZHlDID0gZmxvYXQoZHlDQ29ybmVyICsgd0MpIC8gXCIraStcIi4wO1xcblxcbiAgICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgICAgZnJhY3QoZHlDKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIGludCBpZHlDID0gaW50KGR5Qyk7XFxuXFxuICAgICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYmF0Y2gsIGlkeUQsIGlkeVIsIGlkeUMsIGNoKTtcXG5cXG4gICAgICAgICAgICAgIGRvdFByb2QgKz0gZHlWYWx1ZSAqIGF2Z011bHRpcGxpZXI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksdGE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvLGEpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIm1lYW5cIixcInZhcmlhbmNlXCJdLG5vKHQsZSksbm8odCxuKTt2YXIgaT1cIjAuMFwiO251bGwhPXImJihubyh0LHIpLHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwib2Zmc2V0XCIpLGk9XCJnZXRPZmZzZXRBdE91dENvb3JkcygpXCIpO3ZhciBzPVwiMS4wXCI7bnVsbCE9byYmKG5vKHQsbyksdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJzY2FsZVwiKSxzPVwiZ2V0U2NhbGVBdE91dENvb3JkcygpXCIpLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgeCA9IGdldFhBdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgbWVhbiA9IGdldE1lYW5BdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgdmFyaWFuY2UgPSBnZXRWYXJpYW5jZUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCBvZmZzZXQgPSBcIitpK1wiO1xcbiAgICAgICAgZmxvYXQgc2NhbGUgPSBcIitzK1wiO1xcbiAgICAgICAgZmxvYXQgaW52ID0gc2NhbGUgKiBpbnZlcnNlc3FydCh2YXJpYW5jZSArIGZsb2F0KFwiK2ErXCIpKTtcXG4gICAgICAgIHNldE91dHB1dChkb3QodmVjMyh4LCAtbWVhbiwgb2Zmc2V0KSwgdmVjMyhpbnYsIGludiwgMSkpKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxlYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8sYSl7dGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIm1lYW5cIixcInZhcmlhbmNlXCJdLG5vKHQsZSksbm8odCxuKTt2YXIgaT1cInZlYzQoMC4wKVwiO251bGwhPXImJihubyh0LHIpLHRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwib2Zmc2V0XCIpLGk9XCJnZXRPZmZzZXRBdE91dENvb3JkcygpXCIpO3ZhciBzPVwidmVjNCgxLjApXCI7bnVsbCE9byYmKG5vKHQsbyksdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJzY2FsZVwiKSxzPVwiZ2V0U2NhbGVBdE91dENvb3JkcygpXCIpLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdmVjNCBvZmZzZXQgPSBcIitpK1wiO1xcbiAgICAgICAgdmVjNCBzY2FsZSA9IFwiK3MrXCI7XFxuXFxuICAgICAgICB2ZWM0IHggPSBnZXRYQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIHZlYzQgbWVhbiA9IGdldE1lYW5BdE91dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCB2YXJpYW5jZSA9IGdldFZhcmlhbmNlQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgaW52ID0gc2NhbGUgKiBpbnZlcnNlc3FydCh2YXJpYW5jZSArIHZlYzQoXCIrYStcIikpO1xcblxcbiAgICAgICAgc2V0T3V0cHV0KCh4IC0gbWVhbikgKiBpbnYgKyBvZmZzZXQpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLG5hPVwicmV0dXJuIGFyZWFsICogYnJlYWwgLSBhaW1hZyAqIGJpbWFnO1wiLHJhPVwicmV0dXJuIGFyZWFsICogYmltYWcgKyBhaW1hZyAqIGJyZWFsO1wiLG9hPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVJlYWxcIixcIkFJbWFnXCIsXCJCUmVhbFwiLFwiQkltYWdcIl0sdGhpcy5vdXRwdXRTaGFwZT1ubyhlLG4pLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBiaW5hcnlPcENvbXBsZXgoXFxuICAgICAgICAgIGZsb2F0IGFyZWFsLCBmbG9hdCBhaW1hZywgZmxvYXQgYnJlYWwsIGZsb2F0IGJpbWFnKSB7XFxuICAgICAgICBcIit0K1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGZsb2F0IGFyZWFsID0gZ2V0QVJlYWxBdE91dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgYWltYWcgPSBnZXRBSW1hZ0F0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCBicmVhbCA9IGdldEJSZWFsQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGJpbWFnID0gZ2V0QkltYWdBdE91dENvb3JkcygpO1xcbiAgICAgICAgc2V0T3V0cHV0KGJpbmFyeU9wQ29tcGxleChhcmVhbCwgYWltYWcsIGJyZWFsLCBiaW1hZykpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLGFhPVwicmV0dXJuIGEgKyBiO1wiLGlhPVwicmV0dXJuIGEgLSBiO1wiLHNhPVwicmV0dXJuIGEgKiBiO1wiLHVhPVwicmV0dXJuIChhIDwgMC4pID8gYiAqIGEgOiBhO1wiLGxhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiLFwiQlwiXSx0aGlzLm91dHB1dFNoYXBlPW5vKGUsbiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGZsb2F0IGJpbmFyeU9wZXJhdGlvbihmbG9hdCBhLCBmbG9hdCBiKSB7XFxuICAgICAgICBcIit0K1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGZsb2F0IGEgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGZsb2F0IGIgPSBnZXRCQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIHNldE91dHB1dChiaW5hcnlPcGVyYXRpb24oYSwgYikpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLGNhPVwiXFxuICB2ZWM0IGFMZXNzVGhhblplcm8gPSB2ZWM0KGxlc3NUaGFuKGEsIHZlYzQoMC4pKSk7XFxuICByZXR1cm4gKGFMZXNzVGhhblplcm8gKiAoYiAqIGEpKSArICgodmVjNCgxLjApIC0gYUxlc3NUaGFuWmVybykgKiBhKTtcXG5cIixoYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMSksdGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIixcIkJcIl0sdGhpcy5zdXBwb3J0c0Jyb2FkY2FzdGluZz0hMCx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMCx0aGlzLm91dHB1dFNoYXBlPW5vKGUsbik7dmFyIG89dGhpcy5vdXRwdXRTaGFwZS5sZW5ndGgsYT1cIlwiO2lmKHIpaWYoMD09PW98fDE9PT1nKHRoaXMub3V0cHV0U2hhcGUpKWE9XCJcXG4gICAgICAgICAgcmVzdWx0LnkgPSAwLjtcXG4gICAgICAgICAgcmVzdWx0LnogPSAwLjtcXG4gICAgICAgICAgcmVzdWx0LncgPSAwLjtcXG4gICAgICAgIFwiO2Vsc2UgaWYoYT1cIlxcbiAgICAgICAgICBcIitqbyhvKStcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIFwiLDE9PT1vKWErPVwiXFxuICAgICAgICAgICAgcmVzdWx0LnkgPSAoY29vcmRzICsgMSkgPj0gXCIrdGhpcy5vdXRwdXRTaGFwZVswXStcIiA/IDAuIDogcmVzdWx0Lnk7XFxuICAgICAgICAgICAgcmVzdWx0LnogPSAwLjtcXG4gICAgICAgICAgICByZXN1bHQudyA9IDAuO1xcbiAgICAgICAgICBcIjtlbHNle3ZhciBpPUZvKFwiY29vcmRzXCIsbyk7YSs9XCJcXG4gICAgICAgICAgICBib29sIG5leHRSb3dPdXRPZkJvdW5kcyA9XFxuICAgICAgICAgICAgICAoXCIraVtvLTJdK1wiICsgMSkgPj0gXCIrdGhpcy5vdXRwdXRTaGFwZVtvLTJdK1wiO1xcbiAgICAgICAgICAgIGJvb2wgbmV4dENvbE91dE9mQm91bmRzID1cXG4gICAgICAgICAgICAgIChcIitpW28tMV0rXCIgKyAxKSA+PSBcIit0aGlzLm91dHB1dFNoYXBlW28tMV0rXCI7XFxuICAgICAgICAgICAgcmVzdWx0LnkgPSBuZXh0Q29sT3V0T2ZCb3VuZHMgPyAwLiA6IHJlc3VsdC55O1xcbiAgICAgICAgICAgIHJlc3VsdC56ID0gbmV4dFJvd091dE9mQm91bmRzID8gMC4gOiByZXN1bHQuejtcXG4gICAgICAgICAgICByZXN1bHQudyA9IG5leHRDb2xPdXRPZkJvdW5kcyB8fCBuZXh0Um93T3V0T2ZCb3VuZHMgPyAwLiA6IHJlc3VsdC53O1xcbiAgICAgICAgICBcIn10aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdmVjNCBiaW5hcnlPcGVyYXRpb24odmVjNCBhLCB2ZWM0IGIpIHtcXG4gICAgICAgIFwiK3QrXCJcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgdmVjNCBhID0gZ2V0QUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICB2ZWM0IGIgPSBnZXRCQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gYmluYXJ5T3BlcmF0aW9uKGEsIGIpO1xcbiAgICAgICAgXCIrYStcIlxcblxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn19KCkscGE9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdW5pZm9ybSBmbG9hdCBtaW5WYWw7XFxuICAgICAgdW5pZm9ybSBmbG9hdCBtYXhWYWw7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgZmxvYXQgdmFsdWUgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIGlmIChpc25hbih2YWx1ZSkpIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KHZhbHVlKTtcXG4gICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgc2V0T3V0cHV0KGNsYW1wKHZhbHVlLCBtaW5WYWwsIG1heFZhbCkpO1xcbiAgICAgIH1cXG4gICAgXCJ9cmV0dXJuIHQucHJvdG90eXBlLmdldEN1c3RvbVNldHVwRnVuYz1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKHIsbyl7bnVsbD09bi5taW5Mb2MmJihuLm1pbkxvYz1yLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cobyxcIm1pblZhbFwiKSxuLm1heExvYz1yLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cobyxcIm1heFZhbFwiKSksci5nbC51bmlmb3JtMWYobi5taW5Mb2MsdCksci5nbC51bmlmb3JtMWYobi5tYXhMb2MsZSl9fSx0fSgpLGZhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMCx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHVuaWZvcm0gZmxvYXQgbWluVmFsO1xcbiAgICAgIHVuaWZvcm0gZmxvYXQgbWF4VmFsO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIHZlYzQgdmFsdWUgPSBnZXRBQXRPdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIGlmIChhbnkoaXNuYW4odmFsdWUpKSkge1xcbiAgICAgICAgICBzZXRPdXRwdXQodmFsdWUpO1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICBzZXRPdXRwdXQoY2xhbXAodmFsdWUsIHZlYzQobWluVmFsKSwgdmVjNChtYXhWYWwpKSk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcztyZXR1cm4gZnVuY3Rpb24ocixvKXtudWxsPT1uLm1pbkxvYyYmKG4ubWluTG9jPXIuZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhvLFwibWluVmFsXCIpLG4ubWF4TG9jPXIuZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhvLFwibWF4VmFsXCIpKSxyLmdsLnVuaWZvcm0xZihuLm1pbkxvYyx0KSxyLmdsLnVuaWZvcm0xZihuLm1heExvYyxlKX19LHR9KCksZGE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInJlYWxcIixcImltYWdcIl0sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBmbG9hdCByZSA9IGFicyhnZXRSZWFsQXRPdXRDb29yZHMoKSk7XFxuICAgICAgICBmbG9hdCBpbSA9IGFicyhnZXRJbWFnQXRPdXRDb29yZHMoKSk7XFxuICAgICAgICBmbG9hdCBteCA9IG1heChyZSwgaW0pO1xcblxcbiAgICAgICAgLy8gc2FkbHkgdGhlIGxlbmd0aCBmdW5jdGlvbiBpbiBnbHNsIGlzIG5vdCB1bmRlcmZsb3ctc2FmZVxcbiAgICAgICAgLy8gKGF0IGxlYXN0IG5vdCBvbiBJbnRlbCBHUFVzKS4gU28gdGhlIHNhZmUgc29sdXRpb24gaXNcXG4gICAgICAgIC8vIHRvIGVuc3VyZSB1bmRlcmZsb3ctc2FmZXR5IGluIGFsbCBjYXNlcy5cXG4gICAgICAgIHNldE91dHB1dChcXG4gICAgICAgICAgbXggPT0gMC4wID8gMC4wIDogbXggKiBsZW5ndGgodmVjMigxLCBtaW4ocmUsIGltKS9teCkpXFxuICAgICAgICApO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLHZhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT1kbih0LDEpLHRoaXMudmFyaWFibGVOYW1lcz10Lm1hcChmdW5jdGlvbih0LGUpe3JldHVyblwiVFwiK2V9KTt2YXIgZT1uZXcgQXJyYXkodC5sZW5ndGgtMSk7ZVswXT10WzBdWzFdO2Zvcih2YXIgbj0xO248ZS5sZW5ndGg7bisrKWVbbl09ZVtuLTFdK3Rbbl1bMV07dmFyIHI9W1wiaWYgKHlDIDwgXCIrZVswXStcIikgc2V0T3V0cHV0KGdldFQwKHlSLCB5QykpO1wiXTtmb3Iobj0xO248ZS5sZW5ndGg7bisrKXt2YXIgbz1lW24tMV07ci5wdXNoKFwiZWxzZSBpZiAoeUMgPCBcIitlW25dK1wiKSBzZXRPdXRwdXQoZ2V0VFwiK24rXCIoeVIsIHlDLVwiK28rXCIpKTtcIil9dmFyIGE9ZS5sZW5ndGgsaT1lW2UubGVuZ3RoLTFdO3IucHVzaChcImVsc2Ugc2V0T3V0cHV0KGdldFRcIithK1wiKHlSLCB5Qy1cIitpK1wiKSk7XCIpLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCB5UiA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IHlDID0gY29vcmRzLnk7XFxuXFxuICAgICAgICBcIityLmpvaW4oXCJcXG4gICAgICAgIFwiKStcIlxcbiAgICAgIH1cXG4gICAgXCJ9fSgpLG1hPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLm91dHB1dFNoYXBlPWRuKHQsZSk7dmFyIG49dGhpcy5vdXRwdXRTaGFwZSxyPW4ubGVuZ3RoLG89am8ociksYT1GbyhcImNvb3Jkc1wiLHIpLGk9W1wieFwiLFwieVwiLFwielwiLFwid1wiLFwidVwiLFwidlwiXS5zbGljZSgwLHIpO3RoaXMudmFyaWFibGVOYW1lcz10Lm1hcChmdW5jdGlvbih0LGUpe3JldHVyblwiVFwiK2V9KTt2YXIgcz1uZXcgQXJyYXkodC5sZW5ndGgtMSk7c1swXT10WzBdW2VdO2Zvcih2YXIgdT0xO3U8cy5sZW5ndGg7dSsrKXNbdV09c1t1LTFdK3RbdV1bZV07dmFyIGw9aVtlXSxjPVwidmVjMihcIitpLnNsaWNlKC0yKS5qb2luKCkrXCIpXCIsaD1pLmpvaW4oKSxwPVwiaWYgKFwiK2wrXCIgPCBcIitzWzBdK1wiKVxcbiAgICAgICAgICByZXR1cm4gZ2V0Q2hhbm5lbChnZXRUMChcIitoK1wiKSwgXCIrYytcIik7XCI7Zm9yKHU9MTt1PHMubGVuZ3RoO3UrKyl7dmFyIGY9c1t1LTFdO3ArPVwiXFxuICAgICAgICBlbHNlIGlmIChcIitsK1wiIDwgXCIrc1t1XStcIikge1xcbiAgICAgICAgICBcIitsK1wiIC09IFwiK2YrXCI7XFxuICAgICAgICAgIHJldHVybiBnZXRDaGFubmVsKGdldFRcIit1K1wiKFwiK2grXCIpLCBcIitjK1wiKTtcXG4gICAgICAgIH1cIn12YXIgZD1zLmxlbmd0aDtwKz1cIlxcbiAgICAgICAgZWxzZSB7XFxuICAgICAgICAgIFwiK2wrXCIgLT0gXCIrc1tzLmxlbmd0aC0xXStcIjtcXG4gICAgICAgICAgcmV0dXJuIGdldENoYW5uZWwoZ2V0VFwiK2QrXCIoXCIraCtcIiksIFwiK2MrXCIpO1xcbiAgICAgICAgfVwiLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBmbG9hdCBnZXRWYWx1ZShcIitpLm1hcChmdW5jdGlvbih0KXtyZXR1cm5cImludCBcIit0fSkrXCIpIHtcXG4gICAgICAgIFwiK3ArXCJcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrbytcIiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNChnZXRWYWx1ZShcIithK1wiKSwgMC4sIDAuLCAwLik7XFxuICAgICAgICBpZiAoKytcIithW3ItMV0rXCIgPCBcIituW3ItMV0rXCIpIHtcXG4gICAgICAgICAgcmVzdWx0LmcgPSBnZXRWYWx1ZShcIithK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICgrK1wiK2Fbci0yXStcIiA8IFwiK25bci0yXStcIikge1xcbiAgICAgICAgICByZXN1bHQuYSA9IGdldFZhbHVlKFwiK2ErXCIpO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKFwiK2Fbci0yXStcIiA8IFwiK25bci0yXStcIiAmJlxcbiAgICAgICAgICAgIC0tXCIrYVtyLTFdK1wiIDwgXCIrbltyLTFdK1wiKSB7XFxuICAgICAgICAgIHJlc3VsdC5iID0gZ2V0VmFsdWUoXCIrYStcIik7XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxnYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwiZHlcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmZpbHRlclNoYXBlO3ZhciBlPXQuc3RyaWRlSGVpZ2h0LG49dC5zdHJpZGVXaWR0aCxyPXQucGFkSW5mby50b3Asbz10LnBhZEluZm8ubGVmdCxhPVwiY2hhbm5lbHNMYXN0XCI9PT10LmRhdGFGb3JtYXQ7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IHdSID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgd0MgPSBjb29yZHMueTtcXG4gICAgICAgIGludCBkMSA9IGNvb3Jkcy56O1xcbiAgICAgICAgaW50IGQyID0gY29vcmRzLnc7XFxuXFxuICAgICAgICAvLyBDb252b2x2ZSB4KD8sID8sIGQxKSB3aXRoIGR5KDosIDosIGQyKSB0byBnZXQgZHcod1IsIHdDLCBkMSwgZDIpLlxcbiAgICAgICAgLy8gPyA9IHRvIGJlIGRldGVybWluZWQuIDogPSBhY3Jvc3MgYWxsIHZhbHVlcyBpbiB0aGF0IGF4aXMuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgYiA9IDA7IGIgPCBcIit0LmJhdGNoU2l6ZStcIjsgYisrKSB7XFxuICAgICAgICAgIGZvciAoaW50IHlSID0gMDsgeVIgPCBcIit0Lm91dEhlaWdodCtcIjsgeVIrKykge1xcbiAgICAgICAgICAgIGludCB4UiA9IHdSICsgeVIgKiBcIitlK1wiIC0gXCIrcitcIjtcXG5cXG4gICAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKGludCB5QyA9IDA7IHlDIDwgXCIrdC5vdXRXaWR0aCtcIjsgeUMrKykge1xcbiAgICAgICAgICAgICAgaW50IHhDID0gd0MgKyB5QyAqIFwiK24rXCIgLSBcIitvK1wiO1xcblxcbiAgICAgICAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIit0LmluV2lkdGgrXCIpIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrYStcIikge1xcbiAgICAgICAgICAgICAgICBmbG9hdCBkeVZhbHVlID0gZ2V0RHkoYiwgeVIsIHlDLCBkMik7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9IGdldFgoYiwgeFIsIHhDLCBkMSk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gKHhWYWx1ZSAqIGR5VmFsdWUpO1xcbiAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgZmxvYXQgZHlWYWx1ZSA9IGdldER5KGIsIGQyLCB5UiwgeUMpO1xcbiAgICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXRYKGIsIGQxLCB4UiwgeEMpO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9ICh4VmFsdWUgKiBkeVZhbHVlKTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSx5YT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiZHlcIixcIldcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmluU2hhcGU7dmFyIGU9dC5maWx0ZXJIZWlnaHQsbj10LmZpbHRlcldpZHRoLHI9dC5zdHJpZGVIZWlnaHQsbz10LnN0cmlkZVdpZHRoLGE9XCJjaGFubmVsc0xhc3RcIj09PXQuZGF0YUZvcm1hdCxpPWUtMS10LnBhZEluZm8udG9wLHM9bi0xLXQucGFkSW5mby5sZWZ0LHU9YT8xOjIsbD1hPzI6MyxjPWE/MzoxO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIraStcIiwgXCIrcytcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZDEgPSBjb29yZHNbXCIrYytcIl07XFxuXFxuICAgICAgICBpdmVjMiBkeUNvcm5lciA9IGl2ZWMyKGNvb3Jkc1tcIit1K1wiXSwgY29vcmRzW1wiK2wrXCJdKSAtIHBhZHM7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlDb3JuZXIueDtcXG4gICAgICAgIGludCBkeUNDb3JuZXIgPSBkeUNvcm5lci55O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgZHkoPywgPywgZDIpIHdpdGggdyg6LCA6LCBkMSwgZDIpIHRvIGNvbXB1dGUgZHgoeFIsIHhDLCBkMSkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZC4gOiA9IGFjcm9zcyBhbGwgdmFsdWVzIGluIHRoYXQgYXhpcy5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrZStcIjsgd1IrKykge1xcbiAgICAgICAgICBmbG9hdCBkeVIgPSBmbG9hdChkeVJDb3JuZXIgKyB3UikgLyBcIityK1wiLjA7XFxuXFxuICAgICAgICAgIGlmIChkeVIgPCAwLjAgfHwgZHlSID49IFwiK3Qub3V0SGVpZ2h0K1wiLjAgfHwgZnJhY3QoZHlSKSA+IDAuMCkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIGludCBpZHlSID0gaW50KGR5Uik7XFxuXFxuICAgICAgICAgIGludCB3UlBlcm0gPSBcIitlK1wiIC0gMSAtIHdSO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrbitcIjsgd0MrKykge1xcbiAgICAgICAgICAgIGZsb2F0IGR5QyA9IGZsb2F0KGR5Q0Nvcm5lciArIHdDKSAvIFwiK28rXCIuMDtcXG5cXG4gICAgICAgICAgICBpZiAoZHlDIDwgMC4wIHx8IGR5QyA+PSBcIit0Lm91dFdpZHRoK1wiLjAgfHxcXG4gICAgICAgICAgICAgICAgZnJhY3QoZHlDKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGludCBpZHlDID0gaW50KGR5Qyk7XFxuXFxuICAgICAgICAgICAgaW50IHdDUGVybSA9IFwiK24rXCIgLSAxIC0gd0M7XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgZDIgPSAwOyBkMiA8IFwiK3Qub3V0Q2hhbm5lbHMrXCI7IGQyKyspIHtcXG5cXG4gICAgICAgICAgICAgIGlmIChcIithK1wiKSB7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9IGdldER5KGJhdGNoLCBpZHlSLCBpZHlDLCBkMik7XFxuICAgICAgICAgICAgICAgIGZsb2F0IHdWYWx1ZSA9IGdldFcod1JQZXJtLCB3Q1Blcm0sIGQxLCBkMik7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0geFZhbHVlICogd1ZhbHVlO1xcbiAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgZmxvYXQgeFZhbHVlID0gZ2V0RHkoYmF0Y2gsIGQyLCBpZHlSLCBpZHlDKTtcXG4gICAgICAgICAgICAgICAgZmxvYXQgd1ZhbHVlID0gZ2V0Vyh3UlBlcm0sIHdDUGVybSwgZDEsIGQyKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSB4VmFsdWUgKiB3VmFsdWU7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn19KCkseGE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9dC5maWx0ZXJTaGFwZTt2YXIgZT10LnN0cmlkZURlcHRoLG49dC5zdHJpZGVIZWlnaHQscj10LnN0cmlkZVdpZHRoLG89dC5wYWRJbmZvLmZyb250LGE9dC5wYWRJbmZvLnRvcCxpPXQucGFkSW5mby5sZWZ0O3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNSBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCB3RiA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IHdSID0gY29vcmRzLnk7XFxuICAgICAgICBpbnQgd0MgPSBjb29yZHMuejtcXG4gICAgICAgIGludCBkMSA9IGNvb3Jkcy53O1xcbiAgICAgICAgaW50IGQyID0gY29vcmRzLnU7XFxuXFxuICAgICAgICBmbG9hdCBkb3RQcm9kID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgYiA9IDA7IGIgPCBcIit0LmJhdGNoU2l6ZStcIjsgYisrKSB7XFxuICAgICAgICAgIGZvciAoaW50IHlGID0gMDsgeUYgPCBcIit0Lm91dERlcHRoK1wiOyB5RisrKSB7XFxuICAgICAgICAgICAgaW50IHhGID0gd0YgKyB5RiAqIFwiK2UrXCIgLSBcIitvK1wiO1xcblxcbiAgICAgICAgICAgIGlmICh4RiA8IDAgfHwgeEYgPj0gXCIrdC5pbkRlcHRoK1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgeVIgPSAwOyB5UiA8IFwiK3Qub3V0SGVpZ2h0K1wiOyB5UisrKSB7XFxuICAgICAgICAgICAgICBpbnQgeFIgPSB3UiArIHlSICogXCIrbitcIiAtIFwiK2ErXCI7XFxuXFxuICAgICAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBmb3IgKGludCB5QyA9IDA7IHlDIDwgXCIrdC5vdXRXaWR0aCtcIjsgeUMrKykge1xcbiAgICAgICAgICAgICAgICBpbnQgeEMgPSB3QyArIHlDICogXCIrcitcIiAtIFwiK2krXCI7XFxuXFxuICAgICAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgZmxvYXQgZHlWYWx1ZSA9IGdldER5KGIsIHlGLCB5UiwgeUMsIGQyKTtcXG4gICAgICAgICAgICAgICAgZmxvYXQgeFZhbHVlID0gZ2V0WChiLCB4RiwgeFIsIHhDLCBkMSk7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0gKHhWYWx1ZSAqIGR5VmFsdWUpO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLGJhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJkeVwiLFwiV1wiXSx0aGlzLm91dHB1dFNoYXBlPXQuaW5TaGFwZTt2YXIgZT10LmZpbHRlckRlcHRoLG49dC5maWx0ZXJIZWlnaHQscj10LmZpbHRlcldpZHRoLG89dC5zdHJpZGVEZXB0aCxhPXQuc3RyaWRlSGVpZ2h0LGk9dC5zdHJpZGVXaWR0aCxzPWUtMS10LnBhZEluZm8uZnJvbnQsdT1uLTEtdC5wYWRJbmZvLnRvcCxsPXItMS10LnBhZEluZm8ubGVmdDt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzMgcGFkcyA9IGl2ZWMzKFwiK3MrXCIsIFwiK3UrXCIsIFwiK2wrXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgZDEgPSBjb29yZHMudTtcXG5cXG5cXG4gICAgICAgIGl2ZWMzIGR5Q29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgLSBwYWRzO1xcbiAgICAgICAgaW50IGR5RkNvcm5lciA9IGR5Q29ybmVyLng7XFxuICAgICAgICBpbnQgZHlSQ29ybmVyID0gZHlDb3JuZXIueTtcXG4gICAgICAgIGludCBkeUNDb3JuZXIgPSBkeUNvcm5lci56O1xcblxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG4gICAgICAgIGZvciAoaW50IHdGID0gMDsgd0YgPCBcIitlK1wiOyB3RisrKSB7XFxuICAgICAgICAgIGZsb2F0IGR5RiA9IGZsb2F0KGR5RkNvcm5lciArIHdGKSAvIFwiK28rXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5RiA8IDAuMCB8fCBkeUYgPj0gXCIrdC5vdXREZXB0aCtcIi4wIHx8IGZyYWN0KGR5RikgPiAwLjApIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgICBpbnQgaWR5RiA9IGludChkeUYpO1xcblxcbiAgICAgICAgICBpbnQgd0ZQZXJtID0gXCIrZStcIiAtIDEgLSB3RjtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK24rXCI7IHdSKyspIHtcXG4gICAgICAgICAgICBmbG9hdCBkeVIgPSBmbG9hdChkeVJDb3JuZXIgKyB3UikgLyBcIithK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fFxcbiAgICAgICAgICAgICAgZnJhY3QoZHlSKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGludCBpZHlSID0gaW50KGR5Uik7XFxuXFxuICAgICAgICAgICAgaW50IHdSUGVybSA9IFwiK24rXCIgLSAxIC0gd1I7XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK3IrXCI7IHdDKyspIHtcXG4gICAgICAgICAgICAgIGZsb2F0IGR5QyA9IGZsb2F0KGR5Q0Nvcm5lciArIHdDKSAvIFwiK2krXCIuMDtcXG5cXG4gICAgICAgICAgICAgIGlmIChkeUMgPCAwLjAgfHwgZHlDID49IFwiK3Qub3V0V2lkdGgrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICAgIGZyYWN0KGR5QykgPiAwLjApIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICBpbnQgaWR5QyA9IGludChkeUMpO1xcblxcbiAgICAgICAgICAgICAgaW50IHdDUGVybSA9IFwiK3IrXCIgLSAxIC0gd0M7XFxuXFxuICAgICAgICAgICAgICBmb3IgKGludCBkMiA9IDA7IGQyIDwgXCIrdC5vdXRDaGFubmVscytcIjsgZDIrKykge1xcbiAgICAgICAgICAgICAgICBmbG9hdCB4VmFsdWUgPSBnZXREeShiYXRjaCwgaWR5RiwgaWR5UiwgaWR5QywgZDIpO1xcbiAgICAgICAgICAgICAgICBmbG9hdCB3VmFsdWUgPSBnZXRXKHdGUGVybSwgd1JQZXJtLCB3Q1Blcm0sIGQxLCBkMik7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz0geFZhbHVlICogd1ZhbHVlO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLHdhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCIsXCJkeVwiXSx0aGlzLm91dHB1dFNoYXBlPXQuZmlsdGVyU2hhcGU7dmFyIGU9dC5zdHJpZGVIZWlnaHQsbj10LnN0cmlkZVdpZHRoLHI9dC5wYWRJbmZvLnRvcCxvPXQucGFkSW5mby5sZWZ0LGE9dC5vdXRDaGFubmVscy90LmluQ2hhbm5lbHM7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IHdSID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgd0MgPSBjb29yZHMueTtcXG4gICAgICAgIGludCBkMSA9IGNvb3Jkcy56O1xcbiAgICAgICAgaW50IGRtID0gY29vcmRzLnc7XFxuICAgICAgICBpbnQgZDIgPSBkMSAqIFwiK2ErXCIgKyBkbTtcXG5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuXFxuICAgICAgICAvLyBUTyBETzogVmVjNCBvdmVyIHRoZSBiYXRjaCBzaXplXFxuICAgICAgICBmb3IgKGludCBiID0gMDsgYiA8IFwiK3QuYmF0Y2hTaXplK1wiOyBiKyspIHtcXG4gICAgICAgICAgZm9yIChpbnQgeVIgPSAwOyB5UiA8IFwiK3Qub3V0SGVpZ2h0K1wiOyB5UisrKSB7XFxuICAgICAgICAgICAgaW50IHhSID0gd1IgKyB5UiAqIFwiK2UrXCIgLSBcIityK1wiO1xcblxcbiAgICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrdC5pbkhlaWdodCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IHlDID0gMDsgeUMgPCBcIit0Lm91dFdpZHRoK1wiOyB5QysrKSB7XFxuICAgICAgICAgICAgICBpbnQgeEMgPSB3QyArIHlDICogXCIrbitcIiAtIFwiK28rXCI7XFxuXFxuICAgICAgICAgICAgICBpZiAoeEMgPCAwIHx8IHhDID49IFwiK3QuaW5XaWR0aCtcIikge1xcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSBnZXREeShiLCB5UiwgeUMsIGQyKTtcXG4gICAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9IGdldFgoYiwgeFIsIHhDLCBkMSk7XFxuICAgICAgICAgICAgICBkb3RQcm9kICs9ICh4VmFsdWUgKiBkeVZhbHVlKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxDYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiZHlcIixcIldcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmluU2hhcGU7dmFyIGU9dC5maWx0ZXJIZWlnaHQsbj10LmZpbHRlcldpZHRoLHI9dC5zdHJpZGVIZWlnaHQsbz10LnN0cmlkZVdpZHRoLGE9ZS0xLXQucGFkSW5mby50b3AsaT1uLTEtdC5wYWRJbmZvLmxlZnQscz10Lm91dENoYW5uZWxzL3QuaW5DaGFubmVsczt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzIgcGFkcyA9IGl2ZWMyKFwiK2ErXCIsIFwiK2krXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQxID0gY29vcmRzWzNdO1xcbiAgICAgICAgaXZlYzIgZHlDb3JuZXIgPSBjb29yZHMueXogLSBwYWRzO1xcbiAgICAgICAgaW50IGR5UkNvcm5lciA9IGR5Q29ybmVyLng7XFxuICAgICAgICBpbnQgZHlDQ29ybmVyID0gZHlDb3JuZXIueTtcXG5cXG4gICAgICAgIGZsb2F0IGRvdFByb2QgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrZStcIjsgd1IrKykge1xcbiAgICAgICAgICBmbG9hdCBkeVIgPSBmbG9hdChkeVJDb3JuZXIgKyB3UikgLyBcIityK1wiLjA7XFxuXFxuICAgICAgICAgIGlmIChkeVIgPCAwLjAgfHwgZHlSID49IFwiK3Qub3V0SGVpZ2h0K1wiLjAgfHwgZnJhY3QoZHlSKSA+IDAuMCkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIGludCBpZHlSID0gaW50KGR5Uik7XFxuXFxuICAgICAgICAgIGludCB3UlBlcm0gPSBcIitlK1wiIC0gMSAtIHdSO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrbitcIjsgd0MrKykge1xcbiAgICAgICAgICAgIGZsb2F0IGR5QyA9IGZsb2F0KGR5Q0Nvcm5lciArIHdDKSAvIFwiK28rXCIuMDtcXG5cXG4gICAgICAgICAgICBpZiAoZHlDIDwgMC4wIHx8IGR5QyA+PSBcIit0Lm91dFdpZHRoK1wiLjAgfHxcXG4gICAgICAgICAgICAgICAgZnJhY3QoZHlDKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGludCBpZHlDID0gaW50KGR5Qyk7XFxuXFxuICAgICAgICAgICAgaW50IHdDUGVybSA9IFwiK24rXCIgLSAxIC0gd0M7XFxuXFxuICAgICAgICAgICAgLy8gVE8gRE86IFZlYzQgb3ZlciB0aGUgY2hhbm5lbE11bFxcbiAgICAgICAgICAgIGZvciAoaW50IGRtID0gMDsgZG0gPCBcIitzK1wiOyBkbSsrKSB7XFxuICAgICAgICAgICAgICBpbnQgZDIgPSBkMSAqIFwiK3MrXCIgKyBkbTtcXG4gICAgICAgICAgICAgIGZsb2F0IHhWYWx1ZSA9IGdldER5KGJhdGNoLCBpZHlSLCBpZHlDLCBkMik7XFxuICAgICAgICAgICAgICBmbG9hdCB3VmFsdWUgPSBnZXRXKHdSUGVybSwgd0NQZXJtLCBkMSwgZG0pO1xcbiAgICAgICAgICAgICAgZG90UHJvZCArPSB4VmFsdWUgKiB3VmFsdWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksRWE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ZSYmKGU9ITEpLHZvaWQgMD09PW4mJihuPW51bGwpLHZvaWQgMD09PXImJihyPSExKSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwiV1wiXSx0aGlzLm91dHB1dFNoYXBlPXQub3V0U2hhcGU7dmFyIG89dC5wYWRJbmZvLnRvcCxhPXQucGFkSW5mby5sZWZ0LGk9dC5zdHJpZGVIZWlnaHQscz10LnN0cmlkZVdpZHRoLHU9dC5kaWxhdGlvbkhlaWdodCxsPXQuZGlsYXRpb25XaWR0aCxjPXQuZmlsdGVySGVpZ2h0LGg9dC5maWx0ZXJXaWR0aCxwPTQqTWF0aC5mbG9vcih0LmluQ2hhbm5lbHMvNCksZj10LmluQ2hhbm5lbHMlNCxkPVwiY2hhbm5lbHNMYXN0XCI9PT10LmRhdGFGb3JtYXQsdj1kPzE6MixtPWQ/MjozLGc9ZD8zOjEseT1cIlwiLHg9XCJcIjtuJiYoeT1yP1wiZmxvYXQgYWN0aXZhdGlvbihmbG9hdCBhKSB7XFxuICAgICAgICAgIGZsb2F0IGIgPSBnZXRQcmVsdUFjdGl2YXRpb25XZWlnaHRzQXRPdXRDb29yZHMoKTtcXG4gICAgICAgICAgXCIrbitcIlxcbiAgICAgICAgfVwiOlwiXFxuICAgICAgICAgIGZsb2F0IGFjdGl2YXRpb24oZmxvYXQgeCkge1xcbiAgICAgICAgICAgIFwiK24rXCJcXG4gICAgICAgICAgfVxcbiAgICAgICAgXCIseD1cInJlc3VsdCA9IGFjdGl2YXRpb24ocmVzdWx0KTtcIik7dmFyIGI9ZT9cInJlc3VsdCArPSBnZXRCaWFzQXRPdXRDb29yZHMoKTtcIjpcIlwiO2UmJnRoaXMudmFyaWFibGVOYW1lcy5wdXNoKFwiYmlhc1wiKSxyJiZ0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcInByZWx1QWN0aXZhdGlvbldlaWdodHNcIiksdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK3krXCJcXG5cXG4gICAgICBjb25zdCBpdmVjMiBzdHJpZGVzID0gaXZlYzIoXCIraStcIiwgXCIrcytcIik7XFxuICAgICAgY29uc3QgaXZlYzIgcGFkcyA9IGl2ZWMyKFwiK28rXCIsIFwiK2ErXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQyID0gY29vcmRzW1wiK2crXCJdO1xcblxcbiAgICAgICAgaXZlYzIgeFJDQ29ybmVyID1cXG4gICAgICAgICAgICBpdmVjMihjb29yZHNbXCIrditcIl0sIGNvb3Jkc1tcIittK1wiXSkgKiBzdHJpZGVzIC0gcGFkcztcXG4gICAgICAgIGludCB4UkNvcm5lciA9IHhSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IHhDQ29ybmVyID0geFJDQ29ybmVyLnk7XFxuXFxuICAgICAgICAvLyBDb252b2x2ZSB4KD8sID8sIGQxKSB3aXRoIHcoOiwgOiwgZDEsIGQyKSB0byBnZXQgeSh5UiwgeUMsIGQyKS5cXG4gICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbCB2YWx1ZXMgaW4gdGhhdCBheGlzLlxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG4gICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIitjK1wiOyB3UisrKSB7XFxuICAgICAgICAgIGludCB4UiA9IHhSQ29ybmVyICsgd1IgKiBcIit1K1wiO1xcblxcbiAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIraCtcIjsgd0MrKykge1xcbiAgICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgd0MgKiBcIitsK1wiO1xcblxcbiAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgZDEgPSAwOyBkMSA8IFwiK3ArXCI7IGQxICs9IDQpIHtcXG4gICAgICAgICAgICAgIHZlYzQgd1ZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBkMSwgZDIpLFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgZDEgKyAxLCBkMiksXFxuICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBkMSArIDIsIGQyKSxcXG4gICAgICAgICAgICAgICAgZ2V0Vyh3Uiwgd0MsIGQxICsgMywgZDIpXFxuICAgICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgICAgaWYgKFwiK2QrXCIpIHtcXG4gICAgICAgICAgICAgICAgdmVjNCB4VmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxICsgMSksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBkMSArIDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhSLCB4QywgZDEgKyAzKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IGRvdCh4VmFsdWVzLCB3VmFsdWVzKTtcXG4gICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHZlYzQgeFZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgZDEsIHhSLCB4QyksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgZDEgKyAxLCB4UiwgeEMpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIGQxICsgMiwgeFIsIHhDKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBkMSArIDMsIHhSLCB4QylcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGlmIChcIisoMT09PWYpK1wiKSB7XFxuXFxuICAgICAgICAgICAgICBpZiAoXCIrZCtcIikge1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9XFxuICAgICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIFwiK3ArXCIpICpcXG4gICAgICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBcIitwK1wiLCBkMik7XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9XFxuICAgICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBcIitwK1wiLCB4UiwgeEMpICpcXG4gICAgICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBcIitwK1wiLCBkMik7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChcIisoMj09PWYpK1wiKSB7XFxuICAgICAgICAgICAgICB2ZWMyIHdWYWx1ZXMgPSB2ZWMyKFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrcCtcIiwgZDIpLFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrcCtcIiArIDEsIGQyKVxcbiAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgIGlmIChcIitkK1wiKSB7XFxuICAgICAgICAgICAgICAgIHZlYzIgeFZhbHVlcyA9IHZlYzIoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBcIitwK1wiKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIFwiK3ArXCIgKyAxKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IGRvdCh4VmFsdWVzLCB3VmFsdWVzKTtcXG4gICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHZlYzIgeFZhbHVlcyA9IHZlYzIoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgXCIrcCtcIiwgeFIsIHhDKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBcIitwK1wiICsgMSwgeFIsIHhDKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IGRvdCh4VmFsdWVzLCB3VmFsdWVzKTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFwiKygzPT09ZikrXCIpIHtcXG4gICAgICAgICAgICAgIHZlYzMgd1ZhbHVlcyA9IHZlYzMoXFxuICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBcIitwK1wiLCBkMiksXFxuICAgICAgICAgICAgICAgIGdldFcod1IsIHdDLCBcIitwK1wiICsgMSwgZDIpLFxcbiAgICAgICAgICAgICAgICBnZXRXKHdSLCB3QywgXCIrcCtcIiArIDIsIGQyKVxcbiAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgIGlmIChcIitkK1wiKSB7XFxuICAgICAgICAgICAgICAgIHZlYzMgeFZhbHVlcyA9IHZlYzMoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeFIsIHhDLCBcIitwK1wiKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIFwiK3ArXCIgKyAxKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4UiwgeEMsIFwiK3ArXCIgKyAyKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IGRvdCh4VmFsdWVzLCB3VmFsdWVzKTtcXG4gICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHZlYzMgeFZhbHVlcyA9IHZlYzMoXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgXCIrcCtcIiwgeFIsIHhDKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBcIitwK1wiICsgMSwgeFIsIHhDKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCBcIitwK1wiICsgMiwgeFIsIHhDKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IGRvdCh4VmFsdWVzLCB3VmFsdWVzKTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGZsb2F0IHJlc3VsdCA9IGRvdFByb2Q7XFxuICAgICAgICBcIitiK1wiXFxuICAgICAgICBcIit4K1wiXFxuICAgICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxSYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwiV1wiXSx0aGlzLm91dHB1dFNoYXBlPXQub3V0U2hhcGU7dmFyIGU9dC5wYWRJbmZvLmZyb250LG49dC5wYWRJbmZvLnRvcCxyPXQucGFkSW5mby5sZWZ0LG89dC5zdHJpZGVEZXB0aCxhPXQuc3RyaWRlSGVpZ2h0LGk9dC5zdHJpZGVXaWR0aCxzPXQuZGlsYXRpb25EZXB0aCx1PXQuZGlsYXRpb25IZWlnaHQsbD10LmRpbGF0aW9uV2lkdGgsYz10LmZpbHRlckRlcHRoLGg9dC5maWx0ZXJIZWlnaHQscD10LmZpbHRlcldpZHRoLGY9NCpNYXRoLmZsb29yKHQuaW5DaGFubmVscy80KSxkPXQuaW5DaGFubmVscyU0O3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMyBzdHJpZGVzID0gaXZlYzMoXCIrbytcIiwgXCIrYStcIiwgXCIraStcIik7XFxuICAgICAgY29uc3QgaXZlYzMgcGFkcyA9IGl2ZWMzKFwiK2UrXCIsIFwiK24rXCIsIFwiK3IrXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM1IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICBpbnQgZDIgPSBjb29yZHMudTtcXG5cXG4gICAgICAgIGl2ZWMzIHhGUkNDb3JuZXIgPSBpdmVjMyhjb29yZHMueSwgY29vcmRzLnosIGNvb3Jkcy53KSAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgaW50IHhGQ29ybmVyID0geEZSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IHhSQ29ybmVyID0geEZSQ0Nvcm5lci55O1xcbiAgICAgICAgaW50IHhDQ29ybmVyID0geEZSQ0Nvcm5lci56O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgeCg/LCA/LCA/LCBkMSkgd2l0aCB3KDosIDosIDosIGQxLCBkMikgdG8gZ2V0XFxuICAgICAgICAvLyB5KHlGLCB5UiwgeUMsIGQyKS4gPyA9IHRvIGJlIGRldGVybWluZWQuIDogPSBhY3Jvc3MgYWxsXFxuICAgICAgICAvLyB2YWx1ZXMgaW4gdGhhdCBheGlzLlxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG4gICAgICAgIGZvciAoaW50IHdGID0gMDsgd0YgPCBcIitjK1wiOyB3RisrKSB7XFxuICAgICAgICAgIGludCB4RiA9IHhGQ29ybmVyICsgd0YgKiBcIitzK1wiO1xcblxcbiAgICAgICAgICBpZiAoeEYgPCAwIHx8IHhGID49IFwiK3QuaW5EZXB0aCtcIikge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIitoK1wiOyB3UisrKSB7XFxuICAgICAgICAgICAgaW50IHhSID0geFJDb3JuZXIgKyB3UiAqIFwiK3UrXCI7XFxuXFxuICAgICAgICAgICAgaWYgKHhSIDwgMCB8fCB4UiA+PSBcIit0LmluSGVpZ2h0K1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK3ArXCI7IHdDKyspIHtcXG4gICAgICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgd0MgKiBcIitsK1wiO1xcblxcbiAgICAgICAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIit0LmluV2lkdGgrXCIpIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBmb3IgKGludCBkMSA9IDA7IGQxIDwgXCIrZitcIjsgZDEgKz0gNCkge1xcbiAgICAgICAgICAgICAgICB2ZWM0IHhWYWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIGQxKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBkMSArIDEpLFxcbiAgICAgICAgICAgICAgICAgIGdldFgoYmF0Y2gsIHhGLCB4UiwgeEMsIGQxICsgMiksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgZDEgKyAzKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICB2ZWM0IHdWYWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgZDEsIGQyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIGQxICsgMSwgZDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgZDEgKyAyLCBkMiksXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBkMSArIDMsIGQyKVxcbiAgICAgICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IGRvdCh4VmFsdWVzLCB3VmFsdWVzKTtcXG4gICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgIGlmIChcIisoMT09PWQpK1wiKSB7XFxuICAgICAgICAgICAgICAgIGRvdFByb2QgKz1cXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBcIitmK1wiKSAqXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBcIitmK1wiLCBkMik7XFxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwiKygyPT09ZCkrXCIpIHtcXG4gICAgICAgICAgICAgICAgdmVjMiB4VmFsdWVzID0gdmVjMihcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBcIitmK1wiKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBcIitmK1wiICsgMSlcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgdmVjMiB3VmFsdWVzID0gdmVjMihcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIFwiK2YrXCIsIGQyKSxcXG4gICAgICAgICAgICAgICAgICBnZXRXKHdGLCB3Uiwgd0MsIFwiK2YrXCIgKyAxLCBkMilcXG4gICAgICAgICAgICAgICAgKTtcXG4gICAgICAgICAgICAgICAgZG90UHJvZCArPSBkb3QoeFZhbHVlcywgd1ZhbHVlcyk7XFxuICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwiKygzPT09ZCkrXCIpIHtcXG4gICAgICAgICAgICAgICAgdmVjMyB4VmFsdWVzID0gdmVjMyhcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBcIitmK1wiKSxcXG4gICAgICAgICAgICAgICAgICBnZXRYKGJhdGNoLCB4RiwgeFIsIHhDLCBcIitmK1wiICsgMSksXFxuICAgICAgICAgICAgICAgICAgZ2V0WChiYXRjaCwgeEYsIHhSLCB4QywgXCIrZitcIiArIDIpXFxuICAgICAgICAgICAgICAgICk7XFxuICAgICAgICAgICAgICAgIHZlYzMgd1ZhbHVlcyA9IHZlYzMoXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBcIitmK1wiLCBkMiksXFxuICAgICAgICAgICAgICAgICAgZ2V0Vyh3Riwgd1IsIHdDLCBcIitmK1wiICsgMSwgZDIpLFxcbiAgICAgICAgICAgICAgICAgIGdldFcod0YsIHdSLCB3QywgXCIrZitcIiArIDIsIGQyKVxcbiAgICAgICAgICAgICAgICApO1xcbiAgICAgICAgICAgICAgICBkb3RQcm9kICs9IGRvdCh4VmFsdWVzLCB3VmFsdWVzKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxJYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiLFwiV1wiXSx0aGlzLm91dHB1dFNoYXBlPXQub3V0U2hhcGU7dmFyIGU9dC5pbkhlaWdodCxuPXQuaW5XaWR0aCxyPXQucGFkSW5mby50b3Asbz10LnBhZEluZm8ubGVmdCxhPXQuc3RyaWRlSGVpZ2h0LGk9dC5zdHJpZGVXaWR0aCxzPXQuZGlsYXRpb25IZWlnaHQsdT10LmRpbGF0aW9uV2lkdGgsbD10LmZpbHRlckhlaWdodCxjPXQuZmlsdGVyV2lkdGgsaD10Lm91dENoYW5uZWxzL3QuaW5DaGFubmVsczt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzIgc3RyaWRlcyA9IGl2ZWMyKFwiK2ErXCIsIFwiK2krXCIpO1xcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIityK1wiLCBcIitvK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkcy54O1xcbiAgICAgICAgaXZlYzIgeFJDQ29ybmVyID0gY29vcmRzLnl6ICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICBpbnQgZDIgPSBjb29yZHMudztcXG4gICAgICAgIGludCBkMSA9IGQyIC8gXCIraCtcIjtcXG4gICAgICAgIGludCBxID0gZDIgLSBkMSAqIFwiK2grXCI7XFxuXFxuICAgICAgICBpbnQgeFJDb3JuZXIgPSB4UkNDb3JuZXIueDtcXG4gICAgICAgIGludCB4Q0Nvcm5lciA9IHhSQ0Nvcm5lci55O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgeCg/LCA/LCBkMSkgd2l0aCB3KDosIDosIGQxLCBxKSB0byBnZXQgeSh5UiwgeUMsIGQyKS5cXG4gICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbCB2YWx1ZXMgaW4gdGhhdCBheGlzLlxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG4gICAgICAgIC8vIFRPIERPKGRzbWlsa292KTogRmxhdHRlbiB0aGUgdHdvIGZvciBsb29wcyBhbmQgdmVjNCB0aGUgb3BlcmF0aW9ucy5cXG4gICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIitsK1wiOyB3UisrKSB7XFxuICAgICAgICAgIGludCB4UiA9IHhSQ29ybmVyICsgd1IgKiBcIitzK1wiO1xcblxcbiAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK2UrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrYytcIjsgd0MrKykge1xcbiAgICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgd0MgKiBcIit1K1wiO1xcblxcbiAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrbitcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZsb2F0IHhWYWwgPSBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxKTtcXG4gICAgICAgICAgICBmbG9hdCB3VmFsID0gZ2V0Vyh3Uiwgd0MsIGQxLCBxKTtcXG4gICAgICAgICAgICBkb3RQcm9kICs9IHhWYWwgKiB3VmFsO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQoZG90UHJvZCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksa2E9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcIldcIl0sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO2Zvcih2YXIgZT10LmluSGVpZ2h0LG49dC5pbldpZHRoLHI9dC5wYWRJbmZvLnRvcCxvPXQucGFkSW5mby5sZWZ0LGE9dC5zdHJpZGVIZWlnaHQsaT10LnN0cmlkZVdpZHRoLHM9dC5kaWxhdGlvbkhlaWdodCx1PXQuZGlsYXRpb25XaWR0aCxsPXQuZmlsdGVySGVpZ2h0LGM9dC5maWx0ZXJXaWR0aCxwPWMsZj1cImludCB4UjsgaW50IHhDOyBpbnQgeENPZmZzZXQ7XCIsZD0wO2Q8bDtkKyspZm9yKHZhciB2PTA7djxjO3YrKylmKz1cIlxcbiAgICAgICAgICB2ZWM0IHhUZXhlbFJcIitkK1wiQ1wiKzIqditcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICB2ZWM0IHdSXCIrZCtcIkNcIit2K1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgIHZlYzQgeFJcIitkK1wiQ1wiK3YrXCIgPSB2ZWM0KDAuKTtcIjtmb3IoZD0wO2Q8bDtkKyspZm9yKHZhciBtPTA7bTxwO20rKyl7aWYoZis9XCJcXG4gICAgICAgICAgeFIgPSB4UkNvcm5lciArIFwiK2QqcytcIjtcXG4gICAgICAgICAgeEMgPSB4Q0Nvcm5lciArIFwiKyh2PTIqbSkqdStcIjtcXG4gICAgICAgIFwiLDE9PT1pKXtpZih2PGMmJihmKz1vJTI9PTE/XCJcXG4gICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIDE7XFxuICAgICAgICAgICAgICAgIGlmKHhSID49IDAgJiYgeFIgPCBcIitlK1wiICYmIHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIituK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2QrXCJDXCIrditcIiA9IGdldFgoYmF0Y2gsIHhSLCB4Q09mZnNldCwgZDEpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitkK1wiQ1wiK3YrXCIgPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICB4Q09mZnNldCA9IHhDICsgMSAtIDI7XFxuICAgICAgICAgICAgICAgIGlmKHhSID49IDAgJiYgeFIgPCBcIitlK1wiICYmIHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIituK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgdmVjNCBwcmV2aW91cyA9IGdldFgoYmF0Y2gsIHhSLCB4Q09mZnNldCwgZDEpO1xcbiAgICAgICAgICAgICAgICAgIHhSXCIrZCtcIkNcIit2K1wiID0gdmVjNChwcmV2aW91cy56dywgeFRleGVsUlwiK2QrXCJDXCIrditcIi54eSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgeFJcIitkK1wiQ1wiK3YrXCIgPSB2ZWM0KDAsIDAsIHhUZXhlbFJcIitkK1wiQ1wiK3YrXCIueHkpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICBcIjpcIlxcbiAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrZStcIiAmJiB4QyA+PSAwICYmIHhDIDwgXCIrbitcIikge1xcbiAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitkK1wiQ1wiK3YrXCIgPSBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZCtcIkNcIit2K1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgeFJcIitkK1wiQ1wiK3YrXCIgPSB4VGV4ZWxSXCIrZCtcIkNcIit2K1wiO1xcbiAgICAgICAgICAgICAgXCIsdisxPGMpKXt2YXIgZz1vJTI9PTA/aCh1KTp1O3UlMj09MCYmbyUyPT0xfHx1JTIhPTAmJm8lMiE9MT8oZis9XCJcXG4gICAgICAgICAgICAgICAgICB4Q09mZnNldCA9IHhDICsgXCIrbyUyK1wiICsgXCIrZytcIjtcXG5cXG4gICAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrZStcIiAmJlxcbiAgICAgICAgICAgICAgICAgICAgeENPZmZzZXQgPj0gMCAmJiB4Q09mZnNldCA8IFwiK24rXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitkK1wiQ1wiKyh2KzIpK1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBcIix1PjEmJihmKz1cIlxcbiAgICAgICAgICAgICAgICAgICAgeENPZmZzZXQgLT0gMjtcXG4gICAgICAgICAgICAgICAgICAgIGlmKHhSID49IDAgJiYgeFIgPCBcIitlK1wiICYmXFxuICAgICAgICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIituK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitkK1wiQ1wiK3YrXCIgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitkK1wiQ1wiK3YrXCIgPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICBcIiksZis9XCJcXG4gICAgICAgICAgICAgICAgICB4UlwiK2QrXCJDXCIrKHYrMSkrXCIgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2QrXCJDXCIrditcIi56dywgeFRleGVsUlwiK2QrXCJDXCIrKHYrMikrXCIueHkpO1xcbiAgICAgICAgICAgICAgICBcIik6Zis9XCJcXG4gICAgICAgICAgICAgICAgICB4Q09mZnNldCA9IHhDICsgXCIrZytcIjtcXG5cXG4gICAgICAgICAgICAgICAgICBpZih4UiA+PSAwICYmIHhSIDwgXCIrZStcIiAmJlxcbiAgICAgICAgICAgICAgICAgICAgeENPZmZzZXQgPj0gMCAmJiB4Q09mZnNldCA8IFwiK24rXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitkK1wiQ1wiKyh2KzIpK1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICAgIHhSXCIrZCtcIkNcIisodisxKStcIiA9IHhUZXhlbFJcIitkK1wiQ1wiKyh2KzIpK1wiO1xcbiAgICAgICAgICAgICAgICBcIn19ZWxzZSB2PGMmJihmKz1cIlxcbiAgICAgICAgICAgICAgaWYoeFIgPj0gMCAmJiB4UiA8IFwiK2UrXCIpIHtcXG4gICAgICAgICAgICBcIixvJTI9PTE/KGYrPVwiXFxuICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID0geEMgKyAxIC0gXCIraStcIjtcXG4gICAgICAgICAgICAgICAgaWYoeENPZmZzZXQgPj0gMCAmJiB4Q09mZnNldCA8IFwiK24rXCIpIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZCtcIkNcIit2K1wiID0gZ2V0WChiYXRjaCwgeFIsIHhDT2Zmc2V0LCBkMSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2QrXCJDXCIrditcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIGlmKHhDICsgMSA+PSAwICYmIHhDICsgMSA8IFwiK24rXCIpIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZCtcIkNcIisodisyKStcIiA9IGdldFgoYmF0Y2gsIHhSLCB4QyArIDEsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZCtcIkNcIisodisyKStcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHhSXCIrZCtcIkNcIit2K1wiID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZCtcIkNcIit2K1wiLnp3LCB4VGV4ZWxSXCIrZCtcIkNcIisodisyKStcIi56dyk7XFxuICAgICAgICAgICAgICBcIix2KzE8YyYmKGYrPVwiXFxuICAgICAgICAgICAgICAgICAgdmVjNCBmaW5hbCA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICAgIHhDT2Zmc2V0ID0geEMgKyAxICsgXCIraStcIjtcXG4gICAgICAgICAgICAgICAgICBpZih4Q09mZnNldCA+PSAwICYmIHhDT2Zmc2V0IDwgXCIrbitcIikge1xcbiAgICAgICAgICAgICAgICAgICAgZmluYWwgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgeFJcIitkK1wiQ1wiKyh2KzEpK1wiID0gdmVjNCh4VGV4ZWxSXCIrZCtcIkNcIisodisyKStcIi54eSwgZmluYWwueHkpO1xcbiAgICAgICAgICAgICAgICBcIikpOihmKz1cIlxcbiAgICAgICAgICAgICAgICBpZih4QyA+PSAwICYmIHhDIDwgXCIrbitcIikge1xcbiAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitkK1wiQ1wiK3YrXCIgPSBnZXRYKGJhdGNoLCB4UiwgeEMsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZCtcIkNcIit2K1wiID0gdmVjNCgwLik7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgeENPZmZzZXQgPSB4QyArIFwiK2krXCI7XFxuICAgICAgICAgICAgICAgIGlmKHhDT2Zmc2V0ID49IDAgJiYgeENPZmZzZXQgPCBcIituK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgeFRleGVsUlwiK2QrXCJDXCIrKHYrMikrXCIgPSBnZXRYKGJhdGNoLCB4UiwgeENPZmZzZXQsIGQxKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZCtcIkNcIisodisyKStcIiA9IHZlYzQoMC4pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHhSXCIrZCtcIkNcIit2K1wiID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICB4VGV4ZWxSXCIrZCtcIkNcIit2K1wiLnh5LCB4VGV4ZWxSXCIrZCtcIkNcIisodisyKStcIi54eSk7XFxuICAgICAgICAgICAgICBcIix2KzE8YyYmKGYrPVwiXFxuICAgICAgICAgICAgICAgICAgeFJcIitkK1wiQ1wiKyh2KzEpK1wiID0gdmVjNChcXG4gICAgICAgICAgICAgICAgICAgIHhUZXhlbFJcIitkK1wiQ1wiK3YrXCIuencsIHhUZXhlbFJcIitkK1wiQ1wiKyh2KzIpK1wiLnp3KTtcXG4gICAgICAgICAgICAgICAgXCIpKSxmKz1cIn1cIik7djxjJiYoZis9XCJcXG4gICAgICAgICAgICB2ZWM0IHdUZXhlbFJcIitkK1wiQ1wiK3YrXCIgPSBnZXRXKFwiK2QrXCIsIFwiK3YrXCIsIGQxLCBxKTtcXG4gICAgICAgICAgICB3UlwiK2QrXCJDXCIrditcIiA9IHZlYzQod1RleGVsUlwiK2QrXCJDXCIrditcIi54eiwgd1RleGVsUlwiK2QrXCJDXCIrditcIi54eik7XFxuICAgICAgICAgIFwiLHYrMTxjJiYoZis9XCJcXG4gICAgICAgICAgICAgIHZlYzQgd1RleGVsUlwiK2QrXCJDXCIrKHYrMSkrXCIgPSBnZXRXKFwiK2QrXCIsIFwiKyh2KzEpK1wiLCBkMSwgcSk7XFxuICAgICAgICAgICAgICB3UlwiK2QrXCJDXCIrKHYrMSkrXCIgPVxcbiAgICAgICAgICAgICAgICB2ZWM0KHdUZXhlbFJcIitkK1wiQ1wiKyh2KzEpK1wiLnh6LCB3VGV4ZWxSXCIrZCtcIkNcIisodisxKStcIi54eik7XCIpKX1mb3IoZD0wO2Q8bDtkKyspZm9yKHY9MDt2PGM7disrKWYrPVwicmVzdWx0ICs9IHhSXCIrZCtcIkNcIit2K1wiICogd1JcIitkK1wiQ1wiK3YrXCI7XCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHN0cmlkZXMgPSBpdmVjMihcIithK1wiLCBcIitpK1wiKTtcXG4gICAgICBjb25zdCBpdmVjMiBwYWRzID0gaXZlYzIoXCIrcitcIiwgXCIrbytcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcblxcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgIGl2ZWMyIHhSQ0Nvcm5lciA9IGNvb3Jkcy55eiAqIHN0cmlkZXMgLSBwYWRzO1xcbiAgICAgICAgaW50IGQyID0gY29vcmRzLnc7XFxuICAgICAgICBpbnQgZDEgPSBkMjtcXG4gICAgICAgIGludCBxID0gMDtcXG4gICAgICAgIGludCB4UkNvcm5lciA9IHhSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IHhDQ29ybmVyID0geFJDQ29ybmVyLnk7XFxuXFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcblxcbiAgICAgICAgXCIrZitcIlxcblxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksTmE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiSW1hZ2VcIixcIkJveGVzXCIsXCJCb3hJbmRcIl0sdGhpcy5vdXRwdXRTaGFwZT1bXTt2YXIgYT10WzBdLGk9dFsxXSxzPXRbMl0sdT10WzNdLGw9ZVswXSxjPW5bMF0saD1uWzFdO3RoaXMub3V0cHV0U2hhcGU9W2wsYyxoLHVdO3ZhciBwPVwiYmlsaW5lYXJcIj09PXI/MTowLGY9W2ktMStcIi4wXCIscy0xK1wiLjBcIl0sZD1mWzBdLHY9ZlsxXSxtPWM+MT9bXCJcIisoaS0xKS8oYy0xKSxcIih5Mi15MSkgKiBoZWlnaHRfcmF0aW9cIixcInkxKlwiK2QrXCIgKyBmbG9hdCh5KSooaGVpZ2h0X3NjYWxlKVwiXTpbXCIwLjBcIixcIjAuMFwiLFwiMC41ICogKHkxK3kyKSAqIFwiK2RdLGc9bVswXSx5PW1bMV0seD1tWzJdLGI9aD4xP1tcIlwiKyhzLTEpLyhoLTEpLFwiKHgyLXgxKSAqIHdpZHRoX3JhdGlvXCIsXCJ4MSpcIit2K1wiICsgZmxvYXQoeCkqKHdpZHRoX3NjYWxlKVwiXTpbXCIwLjBcIixcIjAuMFwiLFwiMC41ICogKHgxK3gyKSAqIFwiK3ZdLHc9YlswXSxDPWJbMV0sRT1iWzJdO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBmbG9hdCBoZWlnaHRfcmF0aW8gPSBmbG9hdChcIitnK1wiKTtcXG4gICAgICBjb25zdCBmbG9hdCB3aWR0aF9yYXRpbyA9IGZsb2F0KFwiK3crXCIpO1xcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgeSA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCB4ID0gY29vcmRzWzJdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuXFxuICAgICAgICAvLyBnZXQgYm94IHZhbHNcXG4gICAgICAgIGZsb2F0IHkxID0gZ2V0Qm94ZXMoYiwwKTtcXG4gICAgICAgIGZsb2F0IHgxID0gZ2V0Qm94ZXMoYiwxKTtcXG4gICAgICAgIGZsb2F0IHkyID0gZ2V0Qm94ZXMoYiwyKTtcXG4gICAgICAgIGZsb2F0IHgyID0gZ2V0Qm94ZXMoYiwzKTtcXG5cXG4gICAgICAgIC8vIGdldCBpbWFnZSBpbiBiYXRjaCBpbmRleFxcbiAgICAgICAgaW50IGJJbmQgPSByb3VuZChnZXRCb3hJbmQoYikpO1xcbiAgICAgICAgaWYoYkluZCA8IDAgfHwgYkluZCA+PSBcIithK1wiKSB7XFxuICAgICAgICAgIHJldHVybjtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGZsb2F0IGhlaWdodF9zY2FsZSA9IFwiK3krXCI7XFxuICAgICAgICBmbG9hdCB3aWR0aF9zY2FsZSA9IFwiK0MrXCI7XFxuXFxuICAgICAgICBmbG9hdCBpbl95ID0gXCIreCtcIjtcXG4gICAgICAgIGlmKCBpbl95IDwgMC4wIHx8IGluX3kgPiBcIitkK1wiICkge1xcbiAgICAgICAgICBzZXRPdXRwdXQoZmxvYXQoXCIrbytcIikpO1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgICAgICBmbG9hdCBpbl94ID0gXCIrRStcIjtcXG4gICAgICAgIGlmKCBpbl94IDwgMC4wIHx8IGluX3ggPiBcIit2K1wiICkge1xcbiAgICAgICAgICBzZXRPdXRwdXQoZmxvYXQoXCIrbytcIikpO1xcbiAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgICAgICB2ZWMyIHNvdXJjZUZyYWNJbmRleENSID0gdmVjMihpbl94LGluX3kpO1xcbiAgICAgICAgaWYoXCIrcCtcIiA9PSAxKSB7XFxuICAgICAgICAgIC8vIENvbXB1dGUgdGhlIGZvdXIgaW50ZWdlciBpbmRpY2VzLlxcbiAgICAgICAgICBpdmVjMiBzb3VyY2VGbG9vckNSID0gaXZlYzIoc291cmNlRnJhY0luZGV4Q1IpO1xcbiAgICAgICAgICBpdmVjMiBzb3VyY2VDZWlsQ1IgPSBpdmVjMihjZWlsKHNvdXJjZUZyYWNJbmRleENSKSk7XFxuXFxuICAgICAgICAgIGZsb2F0IHRvcExlZnQgPSBnZXRJbWFnZShiLCBzb3VyY2VGbG9vckNSLnksIHNvdXJjZUZsb29yQ1IueCwgZCk7XFxuICAgICAgICAgIGZsb2F0IGJvdHRvbUxlZnQgPSBnZXRJbWFnZShiLCBzb3VyY2VDZWlsQ1IueSwgc291cmNlRmxvb3JDUi54LCBkKTtcXG4gICAgICAgICAgZmxvYXQgdG9wUmlnaHQgPSBnZXRJbWFnZShiLCBzb3VyY2VGbG9vckNSLnksIHNvdXJjZUNlaWxDUi54LCBkKTtcXG4gICAgICAgICAgZmxvYXQgYm90dG9tUmlnaHQgPSBnZXRJbWFnZShiLCBzb3VyY2VDZWlsQ1IueSwgc291cmNlQ2VpbENSLngsIGQpO1xcblxcbiAgICAgICAgICB2ZWMyIGZyYWNDUiA9IHNvdXJjZUZyYWNJbmRleENSIC0gdmVjMihzb3VyY2VGbG9vckNSKTtcXG5cXG4gICAgICAgICAgZmxvYXQgdG9wID0gdG9wTGVmdCArICh0b3BSaWdodCAtIHRvcExlZnQpICogZnJhY0NSLng7XFxuICAgICAgICAgIGZsb2F0IGJvdHRvbSA9IGJvdHRvbUxlZnQgKyAoYm90dG9tUmlnaHQgLSBib3R0b21MZWZ0KSAqIGZyYWNDUi54O1xcbiAgICAgICAgICBmbG9hdCBuZXdWYWx1ZSA9IHRvcCArIChib3R0b20gLSB0b3ApICogZnJhY0NSLnk7XFxuICAgICAgICAgIHNldE91dHB1dChuZXdWYWx1ZSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAvLyBDb21wdXRlIHRoZSBjb29yZGluYXRvcnMgb2YgbmVhcmVzdCBuZWlnaGJvciBwb2ludC5cXG4gICAgICAgICAgaXZlYzIgc291cmNlTmVhcmVzdENSID0gaXZlYzIoZmxvb3IoXFxuICAgICAgICAgICAgc291cmNlRnJhY0luZGV4Q1IgKyB2ZWMyKDAuNSwwLjUpKSk7XFxuICAgICAgICAgIGZsb2F0IG5ld1ZhbHVlID0gZ2V0SW1hZ2UoYiwgc291cmNlTmVhcmVzdENSLnksIHNvdXJjZU5lYXJlc3RDUi54LCBkKTtcXG4gICAgICAgICAgc2V0T3V0cHV0KG5ld1ZhbHVlKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIFwifX0oKSxTYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sdGhpcy5vdXRwdXRTaGFwZT10O3ZhciByPXQubGVuZ3RoLG89dFt0Lmxlbmd0aC0xXSxhPW4/XCI8XCI6XCI+XCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGludCBnZXRJbmRleChpbnQgaSkge1xcbiAgICAgICAgXCIrKG4/XCJyZXR1cm4gXCIrbytcIiAtaSAtIDE7XCI6XCJyZXR1cm4gaTtcIikrXCJcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIram8ocikrXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgZW5kID0gXCIrQWEocixcImNvb3Jkc1wiKStcIjtcXG4gICAgICAgIGZsb2F0IHZhbCA9IDAuMDtcXG4gICAgICAgIGZvciAoaW50IGkgPSBcIitvK1wiIC0gMTsgaSA+PSAwOyBpIC09IDEpIHtcXG4gICAgICAgICAgaW50IGlkeCA9IGdldEluZGV4KGkpO1xcbiAgICAgICAgICBpZiAoaWR4IFwiK2ErXCIgZW5kKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaWYgKGlkeCA9PSBlbmQgJiYgXCIrZStcIikge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIFwiK0FhKHIsXCJjb29yZHNcIikrXCIgPSBpZHg7XFxuICAgICAgICAgIHZhbCArPSBnZXRYKFwiK2Z1bmN0aW9uKHQsZSl7aWYoMT09PXQpcmV0dXJuXCJcIitlO2lmKDI9PT10KXJldHVybiBlK1wiLngsIFwiK2UrXCIueVwiO2lmKDM9PT10KXJldHVybiBlK1wiLngsIFwiK2UrXCIueSwgXCIrZStcIi56XCI7aWYoND09PXQpcmV0dXJuIGUrXCIueCwgXCIrZStcIi55LCBcIitlK1wiLnosIFwiK2UrXCIud1wiO3Rocm93IEVycm9yKFwiQ3VtdWxhdGl2ZSBzdW0gZm9yIHJhbmsgXCIrdCtcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKX0ocixcImNvb3Jkc1wiKStcIik7XFxuICAgICAgICB9XFxuICAgICAgICBzZXRPdXRwdXQodmFsKTtcXG4gICAgICB9XFxuICAgIFwifX0oKTtmdW5jdGlvbiBBYSh0LGUpe2lmKDE9PT10KXJldHVyblwiXCIrZTtpZigyPT09dClyZXR1cm4gZStcIi55XCI7aWYoMz09PXQpcmV0dXJuIGUrXCIuelwiO2lmKDQ9PT10KXJldHVybiBlK1wiLndcIjt0aHJvdyBFcnJvcihcIkN1bXVsYXRpdmUgc3VtIGZvciByYW5rIFwiK3QrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIil9dmFyIFRhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07dmFyIG49TW8oKTt0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGl2ZWMzIG91dENvb3Jkc0Zyb21GbGF0SW5kZXgoaW50IGluZGV4KSB7XFxuICAgICAgICBcIitCbyhbXCJyXCIsXCJjXCIsXCJkXCJdLHQpK1wiXFxuICAgICAgICByZXR1cm4gaXZlYzMociwgYywgZCk7XFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMyIHJlc1RleFJDID0gaXZlYzIocmVzdWx0VVYueXggKlxcbiAgICAgICAgICB2ZWMyKFwiK2VbMF0rXCIsIFwiK2VbMV0rXCIpKTtcXG4gICAgICAgIGludCBpbmRleCA9IDQgKiAocmVzVGV4UkMueCAqIFwiK2VbMV0rXCIgKyByZXNUZXhSQy55KTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuXFxuICAgICAgICBmb3IgKGludCBpPTA7IGk8NDsgaSsrKSB7XFxuICAgICAgICAgIGludCBmbGF0SW5kZXggPSBpbmRleCArIGk7XFxuICAgICAgICAgIGl2ZWMzIHJjID0gb3V0Q29vcmRzRnJvbUZsYXRJbmRleChmbGF0SW5kZXgpO1xcbiAgICAgICAgICByZXN1bHRbaV0gPSBnZXRBKHJjLngsIHJjLnksIHJjLnopO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgXCIrbi5vdXRwdXQrXCIgPSByZXN1bHQ7XFxuICAgICAgfVxcbiAgICBcIn19KCksRGE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMDt2YXIgbj1NbygpO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgaXZlYzMgb3V0Q29vcmRzRnJvbUZsYXRJbmRleChpbnQgaW5kZXgpIHtcXG4gICAgICAgIFwiK0JvKFtcInJcIixcImNcIixcImRcIl0sdCkrXCJcXG4gICAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgcmVzVGV4UkMgPSBpdmVjMihyZXN1bHRVVi55eCAqXFxuICAgICAgICAgIHZlYzIoXCIrZVswXStcIiwgXCIrZVsxXStcIikpO1xcbiAgICAgICAgaW50IGluZGV4ID0gNCAqIChyZXNUZXhSQy54ICogXCIrZVsxXStcIiArIHJlc1RleFJDLnkpO1xcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG5cXG4gICAgICAgIGZvciAoaW50IGk9MDsgaTw0OyBpKyspIHtcXG4gICAgICAgICAgaW50IGZsYXRJbmRleCA9IGluZGV4ICsgaTtcXG4gICAgICAgICAgaXZlYzMgcmMgPSBvdXRDb29yZHNGcm9tRmxhdEluZGV4KGZsYXRJbmRleCk7XFxuICAgICAgICAgIHJlc3VsdFtpXSA9IGdldENoYW5uZWwoZ2V0QShyYy54LCByYy55LCByYy56KSwgdmVjMihyYy55LCByYy56KSk7XFxuICAgICAgICB9XFxuXFxuICAgICAgICBcIituLm91dHB1dCtcIiA9IHJlc3VsdDtcXG4gICAgICB9XFxuICAgIFwifX0oKSxfYT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMuYmxvY2tTaXplPWUsdGhpcy5kYXRhRm9ybWF0PW4sdGhpcy51c2VyQ29kZT1cIlxcbiAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgaW50IGggPSBcIit0aGlzLmdldEhlaWdodENvb3JkU3RyaW5nKCkrXCI7XFxuICAgICAgaW50IHcgPSBcIit0aGlzLmdldFdpZHRoQ29vcmRTdHJpbmcoKStcIjtcXG4gICAgICBpbnQgZCA9IFwiK3RoaXMuZ2V0RGVwdGhDb29yZFN0cmluZygpK1wiO1xcblxcbiAgICAgIGludCBpbl9oID0gaCAvIFwiK2UrXCI7XFxuICAgICAgaW50IG9mZnNldF9oID0gaW1vZChoLCBcIitlK1wiKTtcXG4gICAgICBpbnQgaW5fdyA9IHcgLyBcIitlK1wiO1xcbiAgICAgIGludCBvZmZzZXRfdyA9IGltb2QodywgXCIrZStcIik7XFxuICAgICAgaW50IG9mZnNldF9kID0gKG9mZnNldF9oICogXCIrZStcIiArIG9mZnNldF93KSAqXFxuICAgICAgICBcIit0aGlzLmdldE91dHB1dERlcHRoU2l6ZSgpK1wiO1xcbiAgICAgIGludCBpbl9kID0gZCArIG9mZnNldF9kO1xcblxcbiAgICAgIGZsb2F0IHJlc3VsdCA9IFwiK3RoaXMuZ2V0SW5wdXRTYW1wbGluZ1N0cmluZygpK1wiO1xcbiAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICB9XFxuICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0SGVpZ2h0Q29vcmRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIk5IV0NcIj09PXRoaXMuZGF0YUZvcm1hdD9cImNvb3Jkc1sxXVwiOlwiY29vcmRzWzJdXCJ9LHQucHJvdG90eXBlLmdldFdpZHRoQ29vcmRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIk5IV0NcIj09PXRoaXMuZGF0YUZvcm1hdD9cImNvb3Jkc1syXVwiOlwiY29vcmRzWzNdXCJ9LHQucHJvdG90eXBlLmdldERlcHRoQ29vcmRTdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIk5IV0NcIj09PXRoaXMuZGF0YUZvcm1hdD9cImNvb3Jkc1szXVwiOlwiY29vcmRzWzFdXCJ9LHQucHJvdG90eXBlLmdldE91dHB1dERlcHRoU2l6ZT1mdW5jdGlvbigpe3JldHVyblwiTkhXQ1wiPT09dGhpcy5kYXRhRm9ybWF0P3RoaXMub3V0cHV0U2hhcGVbM106dGhpcy5vdXRwdXRTaGFwZVsxXX0sdC5wcm90b3R5cGUuZ2V0SW5wdXRTYW1wbGluZ1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiTkhXQ1wiPT09dGhpcy5kYXRhRm9ybWF0P1wiZ2V0WChiLCBpbl9oLCBpbl93LCBpbl9kKVwiOlwiZ2V0WChiLCBpbl9kLCBpbl9oLCBpbl93KVwifSx0fSgpLE9hPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJYXCJdLHRoaXMub3V0cHV0U2hhcGU9W3QsdF0sdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGZsb2F0IHZhbCA9IGNvb3Jkc1swXSA9PSBjb29yZHNbMV0gPyBnZXRYKGNvb3Jkc1swXSkgOiAwLjA7XFxuICAgICAgICAgIHNldE91dHB1dCh2YWwpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLEZhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdO3ZhciBlPU1vKCk7dGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBcIitMbytcIlxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGZsb2F0IHggPSBnZXRBQXRPdXRDb29yZHMoKTtcXG4gICAgICAgIFwiK2Uub3V0cHV0K1wiID0gZW5jb2RlX2Zsb2F0KHgpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLE1hPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwO3ZhciBlPU1vKCk7dGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBcIitMbytcIlxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMzIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgZmxvYXQgeCA9IGdldENoYW5uZWwoZ2V0QUF0T3V0Q29vcmRzKCksIHZlYzIoY29vcmRzLnksIGNvb3Jkcy56KSk7XFxuICAgICAgICBcIitlLm91dHB1dCtcIiA9IGVuY29kZV9mbG9hdCh4KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxCYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49ITEpLHRoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdO3ZhciByPU1vKCksbz1lWzBdLGE9ZVsxXTt0aGlzLm91dHB1dFNoYXBlPXQ7dmFyIGk9XCJyZXN1bHRcIjtuJiYoaT1cImZsb29yKHJlc3VsdCAqIDI1NS4gKyAwLjUpXCIpLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBcIitQbyh0KStcIlxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMzIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcblxcbiAgICAgICAgaW50IGZsYXRJbmRleCA9IGdldEZsYXRJbmRleChjb29yZHMpO1xcbiAgICAgICAgaW50IG9mZnNldCA9IGltb2QoZmxhdEluZGV4LCA0KTtcXG5cXG4gICAgICAgIGZsYXRJbmRleCA9IGlkaXYoZmxhdEluZGV4LCA0LCAxLik7XFxuICAgICAgICBcXG4gICAgICAgIGludCByID0gZmxhdEluZGV4IC8gXCIrYStcIjtcXG4gICAgICAgIGludCBjID0gaW1vZChmbGF0SW5kZXgsIFwiK2ErXCIpO1xcbiAgICAgICAgdmVjMiB1diA9ICh2ZWMyKGMsIHIpICsgaGFsZkNSKSAvIHZlYzIoXCIrYStcIi4wLCBcIitvK1wiLjApO1xcbiAgICAgICAgdmVjNCB2YWx1ZXMgPSBcIityLnRleHR1cmUyRCtcIihBLCB1dik7XFxuXFxuICAgICAgICBmbG9hdCByZXN1bHQ7XFxuXFxuICAgICAgICBpZihvZmZzZXQgPT0gMCkge1xcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZXNbMF07XFxuICAgICAgICB9IGVsc2UgaWYob2Zmc2V0ID09IDEpIHtcXG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWVzWzFdO1xcbiAgICAgICAgfSBlbHNlIGlmKG9mZnNldCA9PSAyKSB7XFxuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlc1syXTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlc1szXTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIFwiK3Iub3V0cHV0K1wiID0gdmVjNChcIitpK1wiLCAwLiwgMC4sIDAuKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxQYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49ITEpLHRoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdO3ZhciByPU1vKCksbz1lWzBdLGE9ZVsxXTt0aGlzLm91dHB1dFNoYXBlPXQ7dmFyIGk9XCJcIixzPVwicmVzdWx0XCI7biYmKHM9XCJmbG9vcihyZXN1bHQgKiAyNTUuICsgMC41KVwiKTtmb3IodmFyIHU9MDt1PD0xO3UrKylmb3IodmFyIGw9MDtsPD0xO2wrKyl7dmFyIGM9Mip1K2w7aSs9XCJcXG4gICAgICAgICAgbG9jYWxDb29yZHMgPSBjb29yZHM7XFxuICAgICAgICAgIGlmKGxvY2FsQ29vcmRzWzJdICsgXCIrbCtcIiA8IFwiK3RbMl0rXCIpIHtcXG4gICAgICAgICAgICBsb2NhbENvb3Jkc1syXSArPSBcIitsK1wiO1xcbiAgICAgICAgICAgIGlmKGxvY2FsQ29vcmRzWzFdICsgXCIrdStcIiA8IFwiK3RbMV0rXCIpIHtcXG4gICAgICAgICAgICAgIGxvY2FsQ29vcmRzWzFdICs9IFwiK3UrXCI7XFxuXFxuICAgICAgICAgICAgICBmbGF0SW5kZXggPSBnZXRGbGF0SW5kZXgobG9jYWxDb29yZHMpO1xcbiAgICAgICAgICAgICAgb2Zmc2V0ID0gaW1vZChmbGF0SW5kZXgsIDQpO1xcbiAgICBcXG4gICAgICAgICAgICAgIGZsYXRJbmRleCA9IGlkaXYoZmxhdEluZGV4LCA0LCAxLik7XFxuXFxuICAgICAgICAgICAgICByID0gZmxhdEluZGV4IC8gXCIrYStcIjtcXG4gICAgICAgICAgICAgIGMgPSBpbW9kKGZsYXRJbmRleCwgXCIrYStcIik7XFxuICAgICAgICAgICAgICB1diA9ICh2ZWMyKGMsIHIpICsgaGFsZkNSKSAvIHZlYzIoXCIrYStcIi4wLCBcIitvK1wiLjApO1xcbiAgICAgICAgICAgICAgdmFsdWVzID0gXCIrci50ZXh0dXJlMkQrXCIoQSwgdXYpO1xcblxcbiAgICAgICAgICAgICAgaWYob2Zmc2V0ID09IDApIHtcXG4gICAgICAgICAgICAgICAgcmVzdWx0W1wiK2MrXCJdID0gdmFsdWVzWzBdO1xcbiAgICAgICAgICAgICAgfSBlbHNlIGlmKG9mZnNldCA9PSAxKSB7XFxuICAgICAgICAgICAgICAgIHJlc3VsdFtcIitjK1wiXSA9IHZhbHVlc1sxXTtcXG4gICAgICAgICAgICAgIH0gZWxzZSBpZihvZmZzZXQgPT0gMikge1xcbiAgICAgICAgICAgICAgICByZXN1bHRbXCIrYytcIl0gPSB2YWx1ZXNbMl07XFxuICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICByZXN1bHRbXCIrYytcIl0gPSB2YWx1ZXNbM107XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICBcIn10aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgXCIrUG8odCkrXCJcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG5cXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuICAgICAgICBpbnQgZmxhdEluZGV4LCByLCBjLCBvZmZzZXQ7XFxuICAgICAgICBpdmVjMyBsb2NhbENvb3JkcztcXG4gICAgICAgIHZlYzIgdXY7XFxuICAgICAgICB2ZWM0IHZhbHVlcztcXG4gICAgICAgIFxcbiAgICAgICAgXCIraStcIlxcblxcbiAgICAgICAgXCIrci5vdXRwdXQrXCIgPSBcIitzK1wiO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLExhPVwicmV0dXJuIHJlYWwgKiBleHBSIC0gaW1hZyAqIGV4cEk7XCIsV2E9XCJyZXR1cm4gcmVhbCAqIGV4cEkgKyBpbWFnICogZXhwUjtcIixVYT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcInJlYWxcIixcImltYWdcIl07dmFyIHI9ZVsxXTt0aGlzLm91dHB1dFNoYXBlPWU7dmFyIG89bj9cIjIuMCAqIFwiK01hdGguUEk6XCItMi4wICogXCIrTWF0aC5QSSxhPW4/citcIi4wXCI6XCIxLjBcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgZmxvYXQgZXhwb25lbnRNdWx0aXBsaWVyID0gXCIrbytcIjtcXG5cXG4gICAgICBmbG9hdCB1bmFyeU9wQ29tcGxleChmbG9hdCByZWFsLCBmbG9hdCBleHBSLCBmbG9hdCBpbWFnLCBmbG9hdCBleHBJKSB7XFxuICAgICAgICBcIit0K1wiXFxuICAgICAgfVxcblxcbiAgICAgIGZsb2F0IG11bE1hdERGVChpbnQgYmF0Y2gsIGludCBpbmRleCkge1xcbiAgICAgICAgZmxvYXQgaW5kZXhSYXRpbyA9IGZsb2F0KGluZGV4KSAvIGZsb2F0KFwiK3IrXCIpO1xcbiAgICAgICAgZmxvYXQgZXhwb25lbnRNdWx0aXBsaWVyVGltZXNJbmRleFJhdGlvID1cXG4gICAgICAgICAgICBleHBvbmVudE11bHRpcGxpZXIgKiBpbmRleFJhdGlvO1xcblxcbiAgICAgICAgZmxvYXQgcmVzdWx0ID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIityK1wiOyBpKyspIHtcXG4gICAgICAgICAgLy8geCA9ICgtMnwyICogUEkgLyBOKSAqIGluZGV4ICogaTtcXG4gICAgICAgICAgZmxvYXQgeCA9IGV4cG9uZW50TXVsdGlwbGllclRpbWVzSW5kZXhSYXRpbyAqIGZsb2F0KGkpO1xcbiAgICAgICAgICBmbG9hdCBleHBSID0gY29zKHgpO1xcbiAgICAgICAgICBmbG9hdCBleHBJID0gc2luKHgpO1xcbiAgICAgICAgICBmbG9hdCByZWFsID0gZ2V0UmVhbChiYXRjaCwgaSk7XFxuICAgICAgICAgIGZsb2F0IGltYWcgPSBnZXRJbWFnKGJhdGNoLCBpKTtcXG5cXG4gICAgICAgICAgcmVzdWx0ICs9XFxuICAgICAgICAgICAgICB1bmFyeU9wQ29tcGxleChyZWFsLCBleHBSLCBpbWFnLCBleHBJKSAvIFwiK2ErXCI7XFxuICAgICAgICB9XFxuXFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIHNldE91dHB1dChtdWxNYXRERlQoY29vcmRzWzBdLCBjb29yZHNbMV0pKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxWYT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCxlKXt0aGlzLm91dHB1dFNoYXBlPVtdLHRoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdW5pZm9ybSBmbG9hdCB2YWx1ZTtcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAvLyBJbnB1dCBjYW4gYmUgb2J0YWluZWQgZnJvbSB1bmlmb3JtIHZhbHVlLlxcbiAgICAgICAgc2V0T3V0cHV0KHZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwifXJldHVybiB0LnByb3RvdHlwZS5nZXRDdXN0b21TZXR1cEZ1bmM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztyZXR1cm4gZnVuY3Rpb24obixyKXtudWxsPT1lLnZhbHVlTG9jJiYoZS52YWx1ZUxvYz1uLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cocixcInZhbHVlXCIpKSxuLmdsLnVuaWZvcm0xZihlLnZhbHVlTG9jLHQpfX0sdH0oKSx6YT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXTt2YXIgZT1NbygpLG49dFswXSxyPXRbMV07dGhpcy5vdXRwdXRTaGFwZT10LHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCB0ZXhSID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IHRleEMgPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgZGVwdGggPSBjb29yZHNbMl07XFxuICAgICAgICB2ZWMyIHV2ID0gKHZlYzIodGV4QywgdGV4UikgKyBoYWxmQ1IpIC8gdmVjMihcIityK1wiLjAsIFwiK24rXCIuMCk7XFxuXFxuICAgICAgICB2ZWM0IHZhbHVlcyA9IFwiK2UudGV4dHVyZTJEK1wiKEEsIHV2KTtcXG4gICAgICAgIGZsb2F0IHZhbHVlO1xcbiAgICAgICAgaWYgKGRlcHRoID09IDApIHtcXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZXMucjtcXG4gICAgICAgIH0gZWxzZSBpZiAoZGVwdGggPT0gMSkge1xcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5nO1xcbiAgICAgICAgfSBlbHNlIGlmIChkZXB0aCA9PSAyKSB7XFxuICAgICAgICAgIHZhbHVlID0gdmFsdWVzLmI7XFxuICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09IDMpIHtcXG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZXMuYTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIHNldE91dHB1dChmbG9vcih2YWx1ZSAqIDI1NS4wICsgMC41KSk7XFxuICAgICAgfVxcbiAgICBcIn19KCksR2E9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl07dmFyIGU9TW8oKSxuPXRbMF0scj10WzFdO3RoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzMgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgdGV4UiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCB0ZXhDID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGRlcHRoID0gY29vcmRzWzJdO1xcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG5cXG4gICAgICAgIGZvcihpbnQgcm93PTA7IHJvdzw9MTsgcm93KyspIHtcXG4gICAgICAgICAgZm9yKGludCBjb2w9MDsgY29sPD0xOyBjb2wrKykge1xcbiAgICAgICAgICAgIHRleEMgPSBjb29yZHNbMV0gKyByb3c7XFxuICAgICAgICAgICAgZGVwdGggPSBjb29yZHNbMl0gKyBjb2w7XFxuXFxuICAgICAgICAgICAgdmVjMiB1diA9ICh2ZWMyKHRleEMsIHRleFIpICsgaGFsZkNSKSAvIHZlYzIoXCIrcitcIi4wLCBcIituK1wiLjApO1xcbiAgICAgICAgICAgIHZlYzQgdmFsdWVzID0gXCIrZS50ZXh0dXJlMkQrXCIoQSwgdXYpO1xcbiAgICAgICAgICAgIGZsb2F0IHZhbHVlO1xcbiAgICAgICAgICAgIGlmIChkZXB0aCA9PSAwKSB7XFxuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5yO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZGVwdGggPT0gMSkge1xcbiAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZXMuZztcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRlcHRoID09IDIpIHtcXG4gICAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzLmI7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChkZXB0aCA9PSAzKSB7XFxuICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlcy5hO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICByZXN1bHRbcm93ICogMiArIGNvbF0gPSBmbG9vcih2YWx1ZSAqIDI1NS4wICsgMC41KTtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgXCIrZS5vdXRwdXQrXCIgPSByZXN1bHQ7XFxuICAgICAgfVxcbiAgICBcIn19KCksSGE9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCIsXCJpbmRpY2VzXCJdO3ZhciByPXQuc2xpY2UoKTtyW25dPWUsdGhpcy5vdXRwdXRTaGFwZT1yLHRoaXMucmFuaz1yLmxlbmd0aDt2YXIgbz1qbyh0aGlzLnJhbmspLGE9ZnVuY3Rpb24odCxlKXt2YXIgbj10Lmxlbmd0aDtpZihuPjQpdGhyb3cgRXJyb3IoXCJHYXRoZXIgZm9yIHJhbmsgXCIrbitcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKTtpZigxPT09bilyZXR1cm5cImludChnZXRJbmRpY2VzKHJlc1JDKSlcIjtmb3IodmFyIHI9W1wicmVzUkMueFwiLFwicmVzUkMueVwiLFwicmVzUkMuelwiLFwicmVzUkMud1wiXSxvPVtdLGE9MDthPHQubGVuZ3RoO2ErKylhPT09ZT9vLnB1c2goXCJpbnQoZ2V0SW5kaWNlcyhcIityW2FdK1wiKSlcIik6by5wdXNoKFwiXCIrclthXSk7cmV0dXJuIG8uam9pbigpfSh0LG4pO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIHJlc1JDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQoZ2V0QShcIithK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn19KCk7dmFyIHFhPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnNsaWNlRGltPXQsdGhpcy5zdHJpZGVzPWUsdGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcImluZGljZXNcIl0sdGhpcy5vdXRwdXRTaGFwZT1uO3ZhciByPWpvKGUubGVuZ3RoKSxvPWpvKG4ubGVuZ3RoKSxhPXRoaXMuc2xpY2VEaW0+MT9cInN0cmlkZXNbal1cIjpcInN0cmlkZXNcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgICBcIityK1wiIHN0cmlkZXMgPSBcIityK1wiKFwiK3RoaXMuc3RyaWRlcytcIik7XFxuICAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBcIitvK1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICBpbnQgZmxhdHRlbkluZGV4ID0gMDtcXG4gICAgICAgICAgZm9yIChpbnQgaiA9IDA7IGogPCBcIit0aGlzLnNsaWNlRGltK1wiOyBqKyspIHtcXG4gICAgICAgICAgICBpbnQgaW5kZXggPSByb3VuZChnZXRJbmRpY2VzKGNvb3Jkc1swXSwgaikpO1xcbiAgICAgICAgICAgIGZsYXR0ZW5JbmRleCArPSBpbmRleCAqIFwiK2ErXCI7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KGdldFgoZmxhdHRlbkluZGV4LCBjb29yZHNbMV0pKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn19KCk7ZnVuY3Rpb24gJGEodCxlKXt2YXIgbj1NbygpO3JldHVybiBLdCh0LGUsbi52ZXJzaW9uK1wiXFxuICAgIHByZWNpc2lvbiBoaWdocCBmbG9hdDtcXG4gICAgXCIrbi5hdHRyaWJ1dGUrXCIgdmVjMyBjbGlwU3BhY2VQb3M7XFxuICAgIFwiK24uYXR0cmlidXRlK1wiIHZlYzIgdXY7XFxuICAgIFwiK24udmFyeWluZ1ZzK1wiIHZlYzIgcmVzdWx0VVY7XFxuXFxuICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICBnbF9Qb3NpdGlvbiA9IHZlYzQoY2xpcFNwYWNlUG9zLCAxKTtcXG4gICAgICByZXN1bHRVViA9IHV2O1xcbiAgICB9XCIpfWZ1bmN0aW9uIEthKHQsZSl7cmV0dXJuIGVlKHQsZSxuZXcgRmxvYXQzMkFycmF5KFstMSwxLDAsMCwxLC0xLC0xLDAsMCwwLDEsMSwwLDEsMSwxLC0xLDAsMSwwXSkpfWZ1bmN0aW9uIGphKHQsZSl7cmV0dXJuIG5lKHQsZSxuZXcgVWludDE2QXJyYXkoWzAsMSwyLDIsMSwzXSkpfWZ1bmN0aW9uIFhhKHQsZSxuLHIsbyxhLGkpe29lKG4scik7dmFyIHM9cmUodCxlKSx1PXQuVEVYVFVSRV8yRDtyZXR1cm4gVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodSxzKX0pLFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LnRleFBhcmFtZXRlcmkodSx0LlRFWFRVUkVfV1JBUF9TLHQuQ0xBTVBfVE9fRURHRSl9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC50ZXhQYXJhbWV0ZXJpKHUsdC5URVhUVVJFX1dSQVBfVCx0LkNMQU1QX1RPX0VER0UpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4UGFyYW1ldGVyaSh1LHQuVEVYVFVSRV9NSU5fRklMVEVSLHQuTkVBUkVTVCl9KSxWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC50ZXhQYXJhbWV0ZXJpKHUsdC5URVhUVVJFX01BR19GSUxURVIsdC5ORUFSRVNUKX0pLFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LnRleEltYWdlMkQodSwwLG8sbixyLDAsYSxpLG51bGwpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSksc31mdW5jdGlvbiBZYSh0LGUsbixyLG8pe3ZhciBhPVB0KG4scik7cmV0dXJuIFhhKHQsZSxhWzBdLGFbMV0sby5pbnRlcm5hbEZvcm1hdEZsb2F0LG8udGV4dHVyZUZvcm1hdEZsb2F0LHQuRkxPQVQpfWZ1bmN0aW9uIFFhKHQsZSxuLHIsbyl7dmFyIGE9UHQobixyKTtyZXR1cm4gWGEodCxlLGFbMF0sYVsxXSxvLmludGVybmFsRm9ybWF0SGFsZkZsb2F0LG8udGV4dHVyZUZvcm1hdEZsb2F0LG8udGV4dHVyZVR5cGVIYWxmRmxvYXQpfWZ1bmN0aW9uIEphKHQsZSxuLHIsbyl7dmFyIGE9UHQobixyKTtyZXR1cm4gWGEodCxlLGFbMF0sYVsxXSx0LlJHQkEsdC5SR0JBLHQuVU5TSUdORURfQllURSl9ZnVuY3Rpb24gWmEodCxlLG4scixvKXt2YXIgYT1XdChuLHIpO3JldHVybiBYYSh0LGUsYVswXSxhWzFdLG8uaW50ZXJuYWxGb3JtYXRQYWNrZWRGbG9hdCx0LlJHQkEsdC5GTE9BVCl9ZnVuY3Rpb24gdGkodCxlLG4scixvKXt2YXIgYT1XdChuLHIpO3JldHVybiBYYSh0LGUsYVswXSxhWzFdLG8uaW50ZXJuYWxGb3JtYXRQYWNrZWRIYWxmRmxvYXQsdC5SR0JBLG8udGV4dHVyZVR5cGVIYWxmRmxvYXQpfWZ1bmN0aW9uIGVpKHQsZSxuLHIpe3JldHVybiBWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuQVJSQVlfQlVGRkVSLHIpfSksaWUodCxlLG4sXCJjbGlwU3BhY2VQb3NcIixyLDMsMjAsMCkmJmllKHQsZSxuLFwidXZcIixyLDIsMjAsMTIpfWZ1bmN0aW9uIG5pKHQsZSxuLHIsbyxhLGkpe3ZhciBzLHUsbDtWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kVGV4dHVyZSh0LlRFWFRVUkVfMkQsbil9KSxhIGluc3RhbmNlb2YgVWludDhBcnJheT8ocz1uZXcgVWludDhBcnJheShyKm8qNCksdT10LlVOU0lHTkVEX0JZVEUsbD10LlJHQkEpOihzPW5ldyBGbG9hdDMyQXJyYXkocipvKjQpLHU9dC5GTE9BVCxsPWkuaW50ZXJuYWxGb3JtYXRQYWNrZWRGbG9hdCkscy5zZXQoYSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCxsLHIsbywwLHQuUkdCQSx1LHMpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG51bGwpfSl9ZnVuY3Rpb24gcmkodCxlLG4scil7VnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZFRleHR1cmUodC5URVhUVVJFXzJELG4pfSksci5kYXRhIGluc3RhbmNlb2YgVWludDhBcnJheT9WdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC50ZXhJbWFnZTJEKHQuVEVYVFVSRV8yRCwwLHQuUkdCQSxyLndpZHRoLHIuaGVpZ2h0LDAsdC5SR0JBLHQuVU5TSUdORURfQllURSxyLmRhdGEpfSk6VnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQudGV4SW1hZ2UyRCh0LlRFWFRVUkVfMkQsMCx0LlJHQkEsdC5SR0JBLHQuVU5TSUdORURfQllURSxyKX0pLFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmJpbmRUZXh0dXJlKHQuVEVYVFVSRV8yRCxudWxsKX0pfWZ1bmN0aW9uIG9pKHQsZSxuLHIsbyl7dmFyIGE9dC5jcmVhdGVCdWZmZXIoKTtWdCh0LGUsZnVuY3Rpb24oKXtyZXR1cm4gdC5iaW5kQnVmZmVyKHQuUElYRUxfUEFDS19CVUZGRVIsYSl9KTt2YXIgaT0xNipuKnI7cmV0dXJuIFZ0KHQsZSxmdW5jdGlvbigpe3JldHVybiB0LmJ1ZmZlckRhdGEodC5QSVhFTF9QQUNLX0JVRkZFUixpLHQuU1RSRUFNX1JFQUQpfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQucmVhZFBpeGVscygwLDAscixuLHQuUkdCQSx0LkZMT0FULDApfSksVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQuYmluZEJ1ZmZlcih0LlBJWEVMX1BBQ0tfQlVGRkVSLG51bGwpfSksYX1mdW5jdGlvbiBhaSh0LGUsbil7dmFyIHI9dCxvPW5ldyBGbG9hdDMyQXJyYXkobik7cmV0dXJuIHIuYmluZEJ1ZmZlcihyLlBJWEVMX1BBQ0tfQlVGRkVSLGUpLHIuZ2V0QnVmZmVyU3ViRGF0YShyLlBJWEVMX1BBQ0tfQlVGRkVSLDAsbyksci5iaW5kQnVmZmVyKHIuUElYRUxfUEFDS19CVUZGRVIsbnVsbCksb31mdW5jdGlvbiBpaSh0LGUsbixyLG8pe3ZhciBhPVB0KG4sciksaT1hWzBdLHM9YVsxXSx1PW5ldyBVaW50OEFycmF5KG4qcio0KTtyZXR1cm4gVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQucmVhZFBpeGVscygwLDAsaSxzLG8uZG93bmxvYWRUZXh0dXJlRm9ybWF0LHQuVU5TSUdORURfQllURSx1KX0pLG5ldyBGbG9hdDMyQXJyYXkodS5idWZmZXIpfWZ1bmN0aW9uIHNpKHQsZSxuLHIsbyxhLGkscyl7dmFyIHU9dCxsPW5ldyBGbG9hdDMyQXJyYXkoZnVuY3Rpb24odCxlKXt2YXIgbj1XdCh0LGUpO3JldHVybiBuWzBdKm5bMV0qNH0oYSxpKSk7cmV0dXJuIHUuYmluZEJ1ZmZlcih1LlBJWEVMX1BBQ0tfQlVGRkVSLGUpLHUuZ2V0QnVmZmVyU3ViRGF0YSh1LlBJWEVMX1BBQ0tfQlVGRkVSLDAsbCksdS5iaW5kQnVmZmVyKHUuUElYRUxfUEFDS19CVUZGRVIsbnVsbCksbH1mdW5jdGlvbiB1aSh0LGUsbixyKXt2YXIgbz1uZXcgRmxvYXQzMkFycmF5KG4qcio0KTtyZXR1cm4gVnQodCxlLGZ1bmN0aW9uKCl7cmV0dXJuIHQucmVhZFBpeGVscygwLDAscixuLHQuUkdCQSx0LkZMT0FULG8pfSksb312YXIgbGk9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlVmVydGV4U2hhZGVyOiRhLGNyZWF0ZVZlcnRleEJ1ZmZlcjpLYSxjcmVhdGVJbmRleEJ1ZmZlcjpqYSxjcmVhdGVGbG9hdDMyTWF0cml4VGV4dHVyZTpZYSxjcmVhdGVGbG9hdDE2TWF0cml4VGV4dHVyZTpRYSxjcmVhdGVVbnNpZ25lZEJ5dGVzTWF0cml4VGV4dHVyZTpKYSxjcmVhdGVQYWNrZWRNYXRyaXhUZXh0dXJlOlphLGNyZWF0ZUZsb2F0MTZQYWNrZWRNYXRyaXhUZXh0dXJlOnRpLGJpbmRWZXJ0ZXhQcm9ncmFtQXR0cmlidXRlU3RyZWFtczplaSx1cGxvYWREZW5zZU1hdHJpeFRvVGV4dHVyZTpuaSx1cGxvYWRQaXhlbERhdGFUb1RleHR1cmU6cmksY3JlYXRlQnVmZmVyRnJvbU91dHB1dFRleHR1cmU6b2ksZG93bmxvYWRGbG9hdDMyTWF0cml4RnJvbUJ1ZmZlcjphaSxkb3dubG9hZEJ5dGVFbmNvZGVkRmxvYXRNYXRyaXhGcm9tT3V0cHV0VGV4dHVyZTppaSxkb3dubG9hZFBhY2tlZE1hdHJpeEZyb21CdWZmZXI6c2ksZG93bmxvYWRNYXRyaXhGcm9tUGFja2VkT3V0cHV0VGV4dHVyZTp1aX0pLGNpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLm91dHB1dFRleHR1cmU9bnVsbCx0aGlzLnByb2dyYW09bnVsbCx0aGlzLmRpc3Bvc2VkPSExLHRoaXMudmVydGV4QXR0cnNBcmVCb3VuZD0hMSx0aGlzLml0ZW1zVG9Qb2xsPVtdO3ZhciBlPWkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKTtpZihudWxsIT10Pyh0aGlzLmdsPXQsRnQoZSx0KSk6dGhpcy5nbD1NdChlKSwxPT09aS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKXRoaXMudGV4dHVyZUZsb2F0RXh0ZW5zaW9uPSR0KHRoaXMuZ2wsdGhpcy5kZWJ1ZyxcIk9FU190ZXh0dXJlX2Zsb2F0XCIpLHRoaXMuY29sb3JCdWZmZXJGbG9hdEV4dGVuc2lvbj10aGlzLmdsLmdldEV4dGVuc2lvbihcIldFQkdMX2NvbG9yX2J1ZmZlcl9mbG9hdFwiKSx0aGlzLnRleHR1cmVIYWxmRmxvYXRFeHRlbnNpb249JHQodGhpcy5nbCx0aGlzLmRlYnVnLFwiT0VTX3RleHR1cmVfaGFsZl9mbG9hdFwiKSx0aGlzLmNvbG9yQnVmZmVySGFsZkZsb2F0RXh0ZW5zaW9uPXRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpO2Vsc2V7aWYoa2UodGhpcy5nbCxcIkVYVF9jb2xvcl9idWZmZXJfZmxvYXRcIikpdGhpcy5jb2xvckJ1ZmZlckZsb2F0RXh0ZW5zaW9uPXRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX2NvbG9yX2J1ZmZlcl9mbG9hdFwiKTtlbHNle2lmKCFrZSh0aGlzLmdsLFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpKXRocm93IG5ldyBFcnJvcihcIkdMIGNvbnRleHQgZG9lcyBub3Qgc3VwcG9ydCBjb2xvciByZW5kZXJhYmxlIGZsb2F0c1wiKTt0aGlzLmNvbG9yQnVmZmVySGFsZkZsb2F0RXh0ZW5zaW9uPXRoaXMuZ2wuZ2V0RXh0ZW5zaW9uKFwiRVhUX2NvbG9yX2J1ZmZlcl9oYWxmX2Zsb2F0XCIpfX10aGlzLnZlcnRleEJ1ZmZlcj1LYSh0aGlzLmdsLHRoaXMuZGVidWcpLHRoaXMuaW5kZXhCdWZmZXI9amEodGhpcy5nbCx0aGlzLmRlYnVnKSx0aGlzLmZyYW1lYnVmZmVyPWFlKHRoaXMuZ2wsdGhpcy5kZWJ1ZyksdGhpcy50ZXh0dXJlQ29uZmlnPVV0KHRoaXMuZ2wsdGhpcy50ZXh0dXJlSGFsZkZsb2F0RXh0ZW5zaW9uKX1yZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLFwiZGVidWdcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGkuZ2V0Qm9vbChcIkRFQlVHXCIpfSxlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMH0pLHQucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCF0aGlzLmRpc3Bvc2VkKXtudWxsIT10aGlzLnByb2dyYW0mJmNvbnNvbGUud2FybihcIkRpc3Bvc2luZyBhIEdQR1BVQ29udGV4dCB0aGF0IHN0aWxsIGhhcyBhIGJvdW5kIFdlYkdMUHJvZ3JhbS4gVGhpcyBpcyBwcm9iYWJseSBhIHJlc291cmNlIGxlYWssIGRlbGV0ZSB0aGUgcHJvZ3JhbSB3aXRoIEdQR1BVQ29udGV4dC5kZWxldGVQcm9ncmFtIGJlZm9yZSBkaXNwb3NpbmcuXCIpLG51bGwhPXRoaXMub3V0cHV0VGV4dHVyZSYmY29uc29sZS53YXJuKFwiRGlzcG9zaW5nIGEgR1BHUFVDb250ZXh0IHRoYXQgc3RpbGwgaGFzIGEgYm91bmQgb3V0cHV0IG1hdHJpeCB0ZXh0dXJlLiAgVGhpcyBpcyBwcm9iYWJseSBhIHJlc291cmNlIGxlYWssIGRlbGV0ZSB0aGUgb3V0cHV0IG1hdHJpeCB0ZXh0dXJlIHdpdGggR1BHUFVDb250ZXh0LmRlbGV0ZU1hdHJpeFRleHR1cmUgYmVmb3JlIGRpc3Bvc2luZy5cIik7dmFyIGU9dGhpcy5nbDtWdChlLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gZS5maW5pc2goKX0pLFZ0KGUsdGhpcy5kZWJ1ZyxmdW5jdGlvbigpe3JldHVybiBlLmJpbmRGcmFtZWJ1ZmZlcihlLkZSQU1FQlVGRkVSLG51bGwpfSksVnQoZSx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIGUuZGVsZXRlRnJhbWVidWZmZXIodC5mcmFtZWJ1ZmZlcil9KSxWdChlLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gZS5iaW5kQnVmZmVyKGUuQVJSQVlfQlVGRkVSLG51bGwpfSksVnQoZSx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIGUuYmluZEJ1ZmZlcihlLkVMRU1FTlRfQVJSQVlfQlVGRkVSLG51bGwpfSksVnQoZSx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIGUuZGVsZXRlQnVmZmVyKHQuaW5kZXhCdWZmZXIpfSksdGhpcy5kaXNwb3NlZD0hMH19LHQucHJvdG90eXBlLmNyZWF0ZUZsb2F0MzJNYXRyaXhUZXh0dXJlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMudGhyb3dJZkRpc3Bvc2VkKCksWWEodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSx0aGlzLnRleHR1cmVDb25maWcpfSx0LnByb3RvdHlwZS5jcmVhdGVGbG9hdDE2TWF0cml4VGV4dHVyZT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLFFhKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0LGUsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUuY3JlYXRlVW5zaWduZWRCeXRlc01hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxKYSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLnVwbG9hZFBpeGVsRGF0YVRvVGV4dHVyZT1mdW5jdGlvbih0LGUpe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCkscmkodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSl9LHQucHJvdG90eXBlLnVwbG9hZERlbnNlTWF0cml4VG9UZXh0dXJlPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksbmkodGhpcy5nbCx0aGlzLmRlYnVnLHQsZSxuLHIsdGhpcy50ZXh0dXJlQ29uZmlnKX0sdC5wcm90b3R5cGUuY3JlYXRlRmxvYXQxNlBhY2tlZE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLmNyZWF0ZVBhY2tlZE1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxaYSh0aGlzLmdsLHRoaXMuZGVidWcsdCxlLHRoaXMudGV4dHVyZUNvbmZpZyl9LHQucHJvdG90eXBlLmRlbGV0ZU1hdHJpeFRleHR1cmU9ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMub3V0cHV0VGV4dHVyZT09PXQmJihwZSh0aGlzLmdsLHRoaXMuZGVidWcsdGhpcy5mcmFtZWJ1ZmZlciksdGhpcy5vdXRwdXRUZXh0dXJlPW51bGwpLFZ0KHRoaXMuZ2wsdGhpcy5kZWJ1ZyxmdW5jdGlvbigpe3JldHVybiBlLmdsLmRlbGV0ZVRleHR1cmUodCl9KX0sdC5wcm90b3R5cGUuZG93bmxvYWRCeXRlRW5jb2RlZEZsb2F0TWF0cml4RnJvbU91dHB1dFRleHR1cmU9ZnVuY3Rpb24odCxlLG4pe3ZhciByPXRoaXM7cmV0dXJuIHRoaXMuZG93bmxvYWRNYXRyaXhEcml2ZXIodCxmdW5jdGlvbigpe3JldHVybiBpaShyLmdsLHIuZGVidWcsZSxuLHIudGV4dHVyZUNvbmZpZyl9KX0sdC5wcm90b3R5cGUuZG93bmxvYWRQYWNrZWRNYXRyaXhGcm9tQnVmZmVyPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gc2kodGhpcy5nbCx0LDAsMCwwLG8sYSx0aGlzLnRleHR1cmVDb25maWcpfSx0LnByb3RvdHlwZS5kb3dubG9hZEZsb2F0MzJNYXRyaXhGcm9tQnVmZmVyPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGFpKHRoaXMuZ2wsdCxlKX0sdC5wcm90b3R5cGUuY3JlYXRlQnVmZmVyRnJvbVRleHR1cmU9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYmluZFRleHR1cmVUb0ZyYW1lQnVmZmVyKHQpO3ZhciByPW9pKHRoaXMuZ2wsdGhpcy5kZWJ1ZyxlLG4sdGhpcy50ZXh0dXJlQ29uZmlnKTtyZXR1cm4gdGhpcy51bmJpbmRUZXh0dXJlVG9GcmFtZUJ1ZmZlcigpLHJ9LHQucHJvdG90eXBlLmNyZWF0ZUFuZFdhaXRGb3JGZW5jZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuY3JlYXRlRmVuY2UodGhpcy5nbCk7cmV0dXJuIHRoaXMucG9sbEZlbmNlKHQpfSx0LnByb3RvdHlwZS5jcmVhdGVGZW5jZT1mdW5jdGlvbih0KXt2YXIgZSxuLHI9dGhpcztpZihpLmdldEJvb2woXCJXRUJHTF9GRU5DRV9BUElfRU5BQkxFRFwiKSl7dmFyIG89dCxhPW8uZmVuY2VTeW5jKG8uU1lOQ19HUFVfQ09NTUFORFNfQ09NUExFVEUsMCk7dC5mbHVzaCgpLG49ZnVuY3Rpb24oKXt2YXIgdD1vLmNsaWVudFdhaXRTeW5jKGEsMCwwKTtyZXR1cm4gdD09PW8uQUxSRUFEWV9TSUdOQUxFRHx8dD09PW8uQ09ORElUSU9OX1NBVElTRklFRH0sZT1hfWVsc2UgaS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKT4wPyhlPXRoaXMuYmVnaW5RdWVyeSgpLHRoaXMuZW5kUXVlcnkoKSxuPWZ1bmN0aW9uKCl7cmV0dXJuIHIuaXNRdWVyeUF2YWlsYWJsZShlLGkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIikpfSk6bj1mdW5jdGlvbigpe3JldHVybiEwfTtyZXR1cm57cXVlcnk6ZSxpc0ZlbmNlUGFzc2VkOm59fSx0LnByb3RvdHlwZS5kb3dubG9hZE1hdHJpeEZyb21QYWNrZWRUZXh0dXJlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj10aGlzO3JldHVybiB0aGlzLmRvd25sb2FkTWF0cml4RHJpdmVyKHQsZnVuY3Rpb24oKXtyZXR1cm4gdWkoci5nbCxyLmRlYnVnLGUsbil9KX0sdC5wcm90b3R5cGUuY3JlYXRlUHJvZ3JhbT1mdW5jdGlvbih0KXt0aGlzLnRocm93SWZEaXNwb3NlZCgpO3ZhciBlPXRoaXMuZ2wsbj1qdChlLHRoaXMuZGVidWcsdCkscj0kYShlLHRoaXMuZGVidWcpLG89SnQoZSx0aGlzLmRlYnVnKTtyZXR1cm4gVnQoZSx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIGUuYXR0YWNoU2hhZGVyKG8scil9KSxWdChlLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gZS5hdHRhY2hTaGFkZXIobyxuKX0pLFp0KGUsdGhpcy5kZWJ1ZyxvKSx0aGlzLmRlYnVnJiZ0ZShlLHRoaXMuZGVidWcsbyksdGhpcy52ZXJ0ZXhBdHRyc0FyZUJvdW5kfHwodGhpcy5zZXRQcm9ncmFtKG8pLHRoaXMudmVydGV4QXR0cnNBcmVCb3VuZD1laShlLHRoaXMuZGVidWcsdGhpcy5wcm9ncmFtLHRoaXMudmVydGV4QnVmZmVyKSksb30sdC5wcm90b3R5cGUuZGVsZXRlUHJvZ3JhbT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksdD09PXRoaXMucHJvZ3JhbSYmKHRoaXMucHJvZ3JhbT1udWxsKSxudWxsIT10JiZWdCh0aGlzLmdsLHRoaXMuZGVidWcsZnVuY3Rpb24oKXtyZXR1cm4gZS5nbC5kZWxldGVQcm9ncmFtKHQpfSl9LHQucHJvdG90eXBlLnNldFByb2dyYW09ZnVuY3Rpb24odCl7dmFyIGU9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMucHJvZ3JhbT10LG51bGwhPXRoaXMucHJvZ3JhbSYmdGhpcy5kZWJ1ZyYmdGUodGhpcy5nbCx0aGlzLmRlYnVnLHRoaXMucHJvZ3JhbSksVnQodGhpcy5nbCx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIGUuZ2wudXNlUHJvZ3JhbSh0KX0pfSx0LnByb3RvdHlwZS5nZXRVbmlmb3JtTG9jYXRpb249ZnVuY3Rpb24odCxlLG4pe3JldHVybiB2b2lkIDA9PT1uJiYobj0hMCksdGhpcy50aHJvd0lmRGlzcG9zZWQoKSxuP3VlKHRoaXMuZ2wsdGhpcy5kZWJ1Zyx0LGUpOmxlKHRoaXMuZ2wsdCxlKX0sdC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTG9jYXRpb249ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLFZ0KHRoaXMuZ2wsdGhpcy5kZWJ1ZyxmdW5jdGlvbigpe3JldHVybiBuLmdsLmdldEF0dHJpYkxvY2F0aW9uKHQsZSl9KX0sdC5wcm90b3R5cGUuZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdz1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLnRocm93SWZEaXNwb3NlZCgpLHRoaXMuZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHQsZSl9LHQucHJvdG90eXBlLnNldElucHV0TWF0cml4VGV4dHVyZT1mdW5jdGlvbih0LGUsbil7dGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnRocm93SWZOb1Byb2dyYW0oKSxjZSh0aGlzLmdsLHRoaXMuZGVidWcsdGhpcy5wcm9ncmFtLHQsZSxuKX0sdC5wcm90b3R5cGUuc2V0T3V0cHV0TWF0cml4VGV4dHVyZT1mdW5jdGlvbih0LGUsbil7dGhpcy5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlRHJpdmVyKHQsbixlKX0sdC5wcm90b3R5cGUuc2V0T3V0cHV0UGFja2VkTWF0cml4VGV4dHVyZT1mdW5jdGlvbih0LGUsbil7dGhpcy50aHJvd0lmRGlzcG9zZWQoKTt2YXIgcj1XdChlLG4pLG89clswXSxhPXJbMV07dGhpcy5zZXRPdXRwdXRNYXRyaXhUZXh0dXJlRHJpdmVyKHQsbyxhKX0sdC5wcm90b3R5cGUuc2V0T3V0cHV0TWF0cml4V3JpdGVSZWdpb249ZnVuY3Rpb24odCxlLG4scil7dGhpcy5zZXRPdXRwdXRNYXRyaXhXcml0ZVJlZ2lvbkRyaXZlcihuLHQscixlKX0sdC5wcm90b3R5cGUuc2V0T3V0cHV0UGFja2VkTWF0cml4V3JpdGVSZWdpb249ZnVuY3Rpb24odCxlLG4scil7dGhyb3cgbmV3IEVycm9yKFwic2V0T3V0cHV0UGFja2VkTWF0cml4V3JpdGVSZWdpb24gbm90IGltcGxlbWVudGVkLlwiKX0sdC5wcm90b3R5cGUuZGVidWdWYWxpZGF0ZT1mdW5jdGlvbigpe251bGwhPXRoaXMucHJvZ3JhbSYmdGUodGhpcy5nbCx0aGlzLmRlYnVnLHRoaXMucHJvZ3JhbSksZmUodGhpcy5nbCl9LHQucHJvdG90eXBlLmV4ZWN1dGVQcm9ncmFtPWZ1bmN0aW9uKCl7dGhpcy50aHJvd0lmRGlzcG9zZWQoKSx0aGlzLnRocm93SWZOb1Byb2dyYW0oKTt2YXIgdD10aGlzLmdsO3RoaXMuZGVidWcmJnRoaXMuZGVidWdWYWxpZGF0ZSgpLFZ0KHQsdGhpcy5kZWJ1ZyxmdW5jdGlvbigpe3JldHVybiB0LmRyYXdFbGVtZW50cyh0LlRSSUFOR0xFUyw2LHQuVU5TSUdORURfU0hPUlQsMCl9KX0sdC5wcm90b3R5cGUuYmxvY2tVbnRpbEFsbFByb2dyYW1zQ29tcGxldGVkPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLnRocm93SWZEaXNwb3NlZCgpLFZ0KHRoaXMuZ2wsdGhpcy5kZWJ1ZyxmdW5jdGlvbigpe3JldHVybiB0LmdsLmZpbmlzaCgpfSl9LHQucHJvdG90eXBlLmdldFF1ZXJ5VGltZXJFeHRlbnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09dGhpcy5kaXNqb2ludFF1ZXJ5VGltZXJFeHRlbnNpb24mJih0aGlzLmRpc2pvaW50UXVlcnlUaW1lckV4dGVuc2lvbj0kdCh0aGlzLmdsLHRoaXMuZGVidWcsMj09PWkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIik/XCJFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlfd2ViZ2wyXCI6XCJFWFRfZGlzam9pbnRfdGltZXJfcXVlcnlcIikpLHRoaXMuZGlzam9pbnRRdWVyeVRpbWVyRXh0ZW5zaW9ufSx0LnByb3RvdHlwZS5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wyPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbigpfSx0LnByb3RvdHlwZS5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wxPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbigpfSx0LnByb3RvdHlwZS5iZWdpblF1ZXJ5PWZ1bmN0aW9uKCl7aWYoMj09PWkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIikpe3ZhciB0PXRoaXMuZ2wsZT10aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDIoKSxuPXQuY3JlYXRlUXVlcnkoKTtyZXR1cm4gdC5iZWdpblF1ZXJ5KGUuVElNRV9FTEFQU0VEX0VYVCxuKSxufXZhciByPXRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMSgpLG89ci5jcmVhdGVRdWVyeUVYVCgpO3JldHVybiByLmJlZ2luUXVlcnlFWFQoci5USU1FX0VMQVBTRURfRVhULG8pLG99LHQucHJvdG90eXBlLmVuZFF1ZXJ5PWZ1bmN0aW9uKCl7aWYoMiE9PWkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIikpe3ZhciB0PXRoaXMuZ2V0UXVlcnlUaW1lckV4dGVuc2lvbldlYkdMMSgpO3QuZW5kUXVlcnlFWFQodC5USU1FX0VMQVBTRURfRVhUKX1lbHNle3ZhciBlPXRoaXMuZ2wsbj10aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDIoKTtlLmVuZFF1ZXJ5KG4uVElNRV9FTEFQU0VEX0VYVCl9fSx0LnByb3RvdHlwZS53YWl0Rm9yUXVlcnlBbmRHZXRUaW1lPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlPXRoaXM7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihuKXtzd2l0Y2gobi5sYWJlbCl7Y2FzZSAwOnJldHVybls0LEUoZnVuY3Rpb24oKXtyZXR1cm4gZS5kaXNwb3NlZHx8ZS5pc1F1ZXJ5QXZhaWxhYmxlKHQsaS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKSl9KV07Y2FzZSAxOnJldHVybiBuLnNlbnQoKSxbMix0aGlzLmdldFF1ZXJ5VGltZSh0LGkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIikpXX19KX0pfSx0LnByb3RvdHlwZS5nZXRRdWVyeVRpbWU9ZnVuY3Rpb24odCxlKXtpZigwPT09ZSlyZXR1cm4gbnVsbDtpZigyPT09ZSl7dmFyIG49dGhpcy5nbDtyZXR1cm4gbi5nZXRRdWVyeVBhcmFtZXRlcih0LG4uUVVFUllfUkVTVUxUKS8xZTZ9dmFyIHI9dGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wxKCk7cmV0dXJuIHIuZ2V0UXVlcnlPYmplY3RFWFQodCxyLlFVRVJZX1JFU1VMVF9FWFQpLzFlNn0sdC5wcm90b3R5cGUuaXNRdWVyeUF2YWlsYWJsZT1mdW5jdGlvbih0LGUpe2lmKDA9PT1lKXJldHVybiEwO2lmKDI9PT1lKXt2YXIgbj10aGlzLmdsLHI9dGhpcy5nZXRRdWVyeVRpbWVyRXh0ZW5zaW9uV2ViR0wyKCksbz1uLmdldFF1ZXJ5UGFyYW1ldGVyKHQsbi5RVUVSWV9SRVNVTFRfQVZBSUxBQkxFKTtyZXR1cm4gbnVsbD09dGhpcy5kaXNqb2ludCYmKHRoaXMuZGlzam9pbnQ9dGhpcy5nbC5nZXRQYXJhbWV0ZXIoci5HUFVfRElTSk9JTlRfRVhUKSksbyYmIXRoaXMuZGlzam9pbnR9bz0ocj10aGlzLmdldFF1ZXJ5VGltZXJFeHRlbnNpb25XZWJHTDEoKSkuZ2V0UXVlcnlPYmplY3RFWFQodCxyLlFVRVJZX1JFU1VMVF9BVkFJTEFCTEVfRVhUKTtyZXR1cm4gbnVsbD09dGhpcy5kaXNqb2ludCYmKHRoaXMuZGlzam9pbnQ9dGhpcy5nbC5nZXRQYXJhbWV0ZXIoci5HUFVfRElTSk9JTlRfRVhUKSksbyYmIXRoaXMuZGlzam9pbnR9LHQucHJvdG90eXBlLnBvbGxGZW5jZT1mdW5jdGlvbih0KXt2YXIgZT10aGlzO3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihuKXtlLmFkZEl0ZW1Ub1BvbGwoZnVuY3Rpb24oKXtyZXR1cm4gdC5pc0ZlbmNlUGFzc2VkKCl9LGZ1bmN0aW9uKCl7cmV0dXJuIG4oKX0pfSl9LHQucHJvdG90eXBlLnBvbGxJdGVtcz1mdW5jdGlvbigpe2Zvcih2YXIgdD1mdW5jdGlvbih0KXtmb3IodmFyIGU9MDtlPHQubGVuZ3RoOysrZSl7dmFyIG49dFtlXSgpO2lmKCFuKWJyZWFrfXJldHVybiBlLTF9KHRoaXMuaXRlbXNUb1BvbGwubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlzRG9uZUZufSkpLGU9MDtlPD10OysrZSl7KDAsdGhpcy5pdGVtc1RvUG9sbFtlXS5yZXNvbHZlRm4pKCl9dGhpcy5pdGVtc1RvUG9sbD10aGlzLml0ZW1zVG9Qb2xsLnNsaWNlKHQrMSl9LHQucHJvdG90eXBlLmFkZEl0ZW1Ub1BvbGw9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO3RoaXMuaXRlbXNUb1BvbGwucHVzaCh7aXNEb25lRm46dCxyZXNvbHZlRm46ZX0pLHRoaXMuaXRlbXNUb1BvbGwubGVuZ3RoPjF8fEUoZnVuY3Rpb24oKXtyZXR1cm4gbi5wb2xsSXRlbXMoKSwwPT09bi5pdGVtc1RvUG9sbC5sZW5ndGh9KX0sdC5wcm90b3R5cGUuYmluZFRleHR1cmVUb0ZyYW1lQnVmZmVyPWZ1bmN0aW9uKHQpe3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksaGUodGhpcy5nbCx0aGlzLmRlYnVnLHQsdGhpcy5mcmFtZWJ1ZmZlciksdGhpcy5kZWJ1ZyYmZmUodGhpcy5nbCl9LHQucHJvdG90eXBlLnVuYmluZFRleHR1cmVUb0ZyYW1lQnVmZmVyPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5vdXRwdXRUZXh0dXJlPyhoZSh0aGlzLmdsLHRoaXMuZGVidWcsdGhpcy5vdXRwdXRUZXh0dXJlLHRoaXMuZnJhbWVidWZmZXIpLHRoaXMuZGVidWcmJmZlKHRoaXMuZ2wpKTpwZSh0aGlzLmdsLHRoaXMuZGVidWcsdGhpcy5mcmFtZWJ1ZmZlcil9LHQucHJvdG90eXBlLmRvd25sb2FkTWF0cml4RHJpdmVyPWZ1bmN0aW9uKHQsZSl7dGhpcy5iaW5kVGV4dHVyZVRvRnJhbWVCdWZmZXIodCk7dmFyIG49ZSgpO3JldHVybiB0aGlzLnVuYmluZFRleHR1cmVUb0ZyYW1lQnVmZmVyKCksbn0sdC5wcm90b3R5cGUuc2V0T3V0cHV0TWF0cml4VGV4dHVyZURyaXZlcj1mdW5jdGlvbih0LGUsbil7dGhpcy50aHJvd0lmRGlzcG9zZWQoKTt2YXIgcj10aGlzLmdsO2hlKHIsdGhpcy5kZWJ1Zyx0LHRoaXMuZnJhbWVidWZmZXIpLHRoaXMuZGVidWcmJmZlKHIpLHRoaXMub3V0cHV0VGV4dHVyZT10LFZ0KHIsdGhpcy5kZWJ1ZyxmdW5jdGlvbigpe3JldHVybiByLnZpZXdwb3J0KDAsMCxlLG4pfSksVnQocix0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIHIuc2Npc3NvcigwLDAsZSxuKX0pfSx0LnByb3RvdHlwZS5zZXRPdXRwdXRNYXRyaXhXcml0ZVJlZ2lvbkRyaXZlcj1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz10aGlzO3RoaXMudGhyb3dJZkRpc3Bvc2VkKCksVnQodGhpcy5nbCx0aGlzLmRlYnVnLGZ1bmN0aW9uKCl7cmV0dXJuIG8uZ2wuc2Npc3Nvcih0LGUsbixyKX0pfSx0LnByb3RvdHlwZS50aHJvd0lmRGlzcG9zZWQ9ZnVuY3Rpb24oKXtpZih0aGlzLmRpc3Bvc2VkKXRocm93IG5ldyBFcnJvcihcIkF0dGVtcHRlZCB0byB1c2UgZGlzcG9zZWQgR1BHUFVDb250ZXh0LlwiKX0sdC5wcm90b3R5cGUudGhyb3dJZk5vUHJvZ3JhbT1mdW5jdGlvbigpe2lmKG51bGw9PXRoaXMucHJvZ3JhbSl0aHJvdyBuZXcgRXJyb3IoXCJObyBHUFUgcHJvZ3JhbSBpcyBjdXJyZW50bHkgc2V0LlwiKX0sdH0oKTtmdW5jdGlvbiBoaSh0LGUpe2lmKHQubGVuZ3RoIT09ZS5sZW5ndGgpdGhyb3cgRXJyb3IoXCJCaW5hcnkgd2FzIGNvbXBpbGVkIHdpdGggXCIrdC5sZW5ndGgrXCIgaW5wdXRzLCBidXQgd2FzIGV4ZWN1dGVkIHdpdGggXCIrZS5sZW5ndGgrXCIgaW5wdXRzXCIpO3QuZm9yRWFjaChmdW5jdGlvbih0LG4pe3ZhciByPXQubG9naWNhbFNoYXBlLG89ZVtuXSxhPW8uc2hhcGU7aWYoIXkocixhKSl0aHJvdyBFcnJvcihcIkJpbmFyeSB3YXMgY29tcGlsZWQgd2l0aCBkaWZmZXJlbnQgc2hhcGVzIHRoYW4gdGhlIGN1cnJlbnQgYXJncy4gU2hhcGVzIFwiK3IrXCIgYW5kIFwiK2ErXCIgbXVzdCBtYXRjaFwiKTtpZighdC5pc1VuaWZvcm18fCFvLmlzVW5pZm9ybSl7dmFyIGk9dC50ZXhTaGFwZSxzPW8uaXNVbmlmb3JtP251bGw6by50ZXhEYXRhLnRleFNoYXBlO2lmKCF5KGkscykpdGhyb3cgRXJyb3IoXCJCaW5hcnkgd2FzIGNvbXBpbGVkIHdpdGggZGlmZmVyZW50IHRleHR1cmUgc2hhcGVzIHRoYW4gdGhlIGN1cnJlbnQgYXJncy4gU2hhcGUgXCIraStcIiBhbmQgXCIrcytcIiBtdXN0IG1hdGNoXCIpfX0pfXZhciBwaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy5vdXRwdXRTaGFwZT10O2Zvcih2YXIgcj1uLmZpbHRlcldpZHRoLG89bi5pbkNoYW5uZWxzLGE9bi5zdHJpZGVXaWR0aCxpPW4uc3RyaWRlSGVpZ2h0LHM9bi5wYWRJbmZvLHU9bi5vdXRXaWR0aCxsPW4uZGlsYXRpb25XaWR0aCxjPW4uZGlsYXRpb25IZWlnaHQsaD1uLmRhdGFGb3JtYXQscD1zLmxlZnQsZj1zLnRvcCxkPW8qcix2PU1vKCksbT1cImNoYW5uZWxzTGFzdFwiPT09aCxnPW0/MDoxLHk9bT8xOjIseD1cIlwiLGI9MDtiPD0xO2IrKylmb3IodmFyIHc9MDt3PD0xO3crKyl4Kz1cIlxcbiAgICAgICAgICBibG9ja0luZGV4ID0gcmMueSArIFwiK3crXCI7XFxuICAgICAgICAgIHBvcyA9IHJjLnggKyBcIitiK1wiO1xcblxcbiAgICAgICAgICBpZihibG9ja0luZGV4IDwgXCIrdFsxXStcIiAmJiBwb3MgPCBcIit0WzBdK1wiKSB7XFxuICAgICAgICAgICAgb2Zmc2V0WSA9IGludChibG9ja0luZGV4IC8gKFwiK3UrXCIpKSAqIFwiK2krXCIgLSBcIitmK1wiO1xcbiAgICAgICAgICAgIGQwID0gb2Zmc2V0WSArIFwiK2MrXCIgKiAocG9zIC8gXCIrZCtcIik7XFxuXFxuICAgICAgICAgICAgaWYoZDAgPCBcIitlW2ddK1wiICYmIGQwID49IDApIHtcXG5cXG4gICAgICAgICAgICAgIG9mZnNldFggPSBpbnQobW9kKGZsb2F0KGJsb2NrSW5kZXgpLCBcIit1K1wiLikgKiBcIithK1wiLiAtIFwiK3ArXCIuKTtcXG4gICAgICAgICAgICAgIGQxID0gb2Zmc2V0WCArIFwiK2wrXCIgKiAoaW50KG1vZChmbG9hdChwb3MpLCBcIitkK1wiLikgLyBcIitvK1wiLikpO1xcblxcbiAgICAgICAgICAgICAgaWYoZDEgPCBcIitlW3ldK1wiICYmIGQxID49IDApIHtcXG5cXG4gICAgICAgICAgICAgICAgY2ggPSBpbnQobW9kKGZsb2F0KHBvcyksIFwiK28rXCIuKSk7XFxuXFxuICAgICAgICAgICAgICAgIGlmIChcIittK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgaW5uZXJEaW1zID0gdmVjMihkMSwgY2gpO1xcbiAgICAgICAgICAgICAgICAgIHJlc3VsdFtcIisoMipiK3cpK1wiXSA9IGdldENoYW5uZWwoXFxuICAgICAgICAgICAgICAgICAgICBnZXRBKGQwLCBpbnQoaW5uZXJEaW1zLngpLFxcbiAgICAgICAgICAgICAgICAgICAgaW50KGlubmVyRGltcy55KSksIGlubmVyRGltcyk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgaW5uZXJEaW1zID0gdmVjMihkMCwgZDEpO1xcbiAgICAgICAgICAgICAgICAgIHJlc3VsdFtcIisoMipiK3cpK1wiXSA9IGdldENoYW5uZWwoXFxuICAgICAgICAgICAgICAgICAgICBnZXRBKGNoLCBpbnQoaW5uZXJEaW1zLngpLFxcbiAgICAgICAgICAgICAgICAgICAgaW50KGlubmVyRGltcy55KSksIGlubmVyRGltcyk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgIFwiO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiByYyA9IGdldE91dHB1dENvb3JkcygpO1xcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDApO1xcblxcbiAgICAgICAgaW50IGJsb2NrSW5kZXgsIHBvcywgb2Zmc2V0WSwgZDAsIG9mZnNldFgsIGQxLCBjaDtcXG4gICAgICAgIHZlYzIgaW5uZXJEaW1zO1xcblxcbiAgICAgICAgXCIreCtcIlxcblxcbiAgICAgICAgXCIrdi5vdXRwdXQrXCIgPSByZXN1bHQ7XFxuICAgICAgfVxcbiAgICBcIn19KCksZmk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLm91dHB1dFNoYXBlPVtdO3ZhciBhLGk9ZSxzPXRbM10tMTt0aGlzLm91dHB1dFNoYXBlPXQ7dmFyIHU9XCJmbG9hdChcIituK1wiKSArIGZsb2F0KFwiK3IrXCIpICogc3VtXCI7YT0uNT09PW8/XCJpbnZlcnNlc3FydChcIit1K1wiKVwiOjE9PT1vP1wiMS4wLyhcIit1K1wiKVwiOlwiZXhwKGxvZyhcIit1K1wiKSAqIGZsb2F0KC1cIitvK1wiKSk7XCIsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgciA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBjID0gY29vcmRzWzJdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuICAgICAgICBmbG9hdCB4ID0gZ2V0WChiLCByLCBjLCBkKTtcXG4gICAgICAgIGZsb2F0IHN1bSA9IDAuMDtcXG4gICAgICAgIGZvciAoaW50IGogPSAtXCIraStcIjsgaiA8PSBcIitpK1wiOyBqKyspIHtcXG4gICAgICAgICAgaW50IGlkeCA9IGQgKyBqO1xcbiAgICAgICAgICBpZiAoaWR4ID49IDAgJiYgaWR4IDw9ICBcIitzK1wiKSB7XFxuICAgICAgICAgICAgZmxvYXQgeiA9IGdldFgoYiwgciwgYywgaWR4KTtcXG4gICAgICAgICAgICBzdW0gKz0geiAqIHo7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGZsb2F0IHZhbCA9IHggKiBcIithK1wiO1xcbiAgICAgICAgc2V0T3V0cHV0KHZhbCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksZGk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiaW5wdXRJbWFnZVwiLFwib3V0cHV0SW1hZ2VcIixcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMuZGVwdGg9dFszXSx0aGlzLmRlcHRoUmFkaXVzPWUsdGhpcy5iaWFzPW4sdGhpcy5hbHBoYT1yLHRoaXMuYmV0YT1vLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IHIgPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgYyA9IGNvb3Jkc1syXTtcXG5cXG4gICAgICAgIGZsb2F0IHJlc3VsdCA9IDAuMDtcXG4gICAgICAgIGZvciAoaW50IGQgPSAwOyBkIDwgXCIrdGhpcy5kZXB0aCtcIjsgKytkKSB7XFxuICAgICAgICAgIGludCBkZXB0aEJlZ2luID0gaW50KG1heCgwLjAsIGZsb2F0KGQgLSBcIitlK1wiKSkpO1xcbiAgICAgICAgICBpbnQgZGVwdGhFbmQgPSBpbnQobWluKGZsb2F0KFwiK3RoaXMuZGVwdGgrXCIpLFxcbiAgICAgICAgICAgICAgZmxvYXQoZCArIFwiK2UrXCIgKyAxKSkpO1xcblxcbiAgICAgICAgICBjb25zdCBpbnQgTUlOX0RFUFRIX0JFR0lOID0gMDtcXG4gICAgICAgICAgY29uc3QgaW50IE1BWF9ERVBUSF9FTkQgPSBcIit0aGlzLmRlcHRoK1wiO1xcblxcbiAgICAgICAgICBmbG9hdCBub3JtID0gMC4wO1xcbiAgICAgICAgICBmb3IgKGludCBrID0gTUlOX0RFUFRIX0JFR0lOOyBrIDwgTUFYX0RFUFRIX0VORDsgKytrKSB7XFxuICAgICAgICAgICAgaWYgKGsgPCBkZXB0aEJlZ2luKXtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBlbHNlIGlmIChrID49IGRlcHRoQmVnaW4gJiYgayA8IGRlcHRoRW5kKSB7XFxuICAgICAgICAgICAgICBub3JtICs9IGdldElucHV0SW1hZ2UoYiwgciwgYywgaykgKiBnZXRJbnB1dEltYWdlKGIsIHIsIGMsIGspO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBub3JtID0gZmxvYXQoXCIrcitcIikgKiBub3JtICsgZmxvYXQoXCIrbitcIik7XFxuXFxuICAgICAgICAgIGZvcihpbnQgayA9IE1JTl9ERVBUSF9CRUdJTjsgayA8IE1BWF9ERVBUSF9FTkQ7ICsrayl7XFxuICAgICAgICAgICAgaWYgKGsgPCBkZXB0aEJlZ2luKXtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBlbHNlIGlmIChrID49IGRlcHRoQmVnaW4gJiYgayA8IGRlcHRoRW5kKXtcXG4gICAgICAgICAgICAgIGZsb2F0IGR5aSA9IC0yLjAgKiBmbG9hdChcIityK1wiKVxcbiAgICAgICAgICAgICAgICAqIGZsb2F0KFwiK28rXCIpXFxuICAgICAgICAgICAgICAgICogZ2V0SW5wdXRJbWFnZShiICxyICxjLCBrKSAqIGdldE91dHB1dEltYWdlKGIsIHIsIGMsIGQpXFxuICAgICAgICAgICAgICAgIC8gbm9ybTtcXG4gICAgICAgICAgICAgIGlmIChrID09IGQpIHtcXG4gICAgICAgICAgICAgICAgZHlpICs9IHBvdyhub3JtLCAtMS4wICogXCIrbytcIik7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICBpZiAoayA9PSBjb29yZHNbM10pIHtcXG4gICAgICAgICAgICAgICAgZHlpICo9IGdldER5KGIsIHIsIGMsIGQpO1xcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gZHlpO1xcbiAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBlbHNlIHtcXG4gICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgICB9XFxuICAgIFwifX0oKSx2aT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyLG8pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9W10sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITA7dmFyIGEsaT1lLHM9dFszXS0xO3RoaXMub3V0cHV0U2hhcGU9dDt2YXIgdT1cImZsb2F0KFwiK24rXCIpICsgZmxvYXQoXCIrcitcIikgKiBzdW1cIjthPS41PT09bz9cImludmVyc2VzcXJ0KFwiK3UrXCIpXCI6MT09PW8/XCIxLjAvKFwiK3UrXCIpXCI6XCJleHAobG9nKFwiK3UrXCIpICogZmxvYXQoLVwiK28rXCIpKTtcIix0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IHIgPSBjb29yZHMueTtcXG4gICAgICAgIGludCBjID0gY29vcmRzLno7XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkcy53O1xcblxcbiAgICAgICAgYm9vbCBoYXNOZXh0Q29sID0gZCA8IFwiK3RoaXMub3V0cHV0U2hhcGVbM10rXCI7XFxuICAgICAgICBib29sIGhhc05leHRSb3cgPSBjIDwgXCIrdGhpcy5vdXRwdXRTaGFwZVsyXStcIjtcXG5cXG4gICAgICAgIHZlYzQgc3VtID0gdmVjNCgwLik7XFxuICAgICAgICB2ZWM0IHhGcmFnQXRPdXRwdXRDb29yZHMgPSBnZXRYKGIsIHIsIGMsIGQpO1xcblxcbiAgICAgICAgdmVjNCB4QXRPdXRwdXRDb29yZHMgPSB2ZWM0KFxcbiAgICAgICAgICBnZXRDaGFubmVsKHhGcmFnQXRPdXRwdXRDb29yZHMsIHZlYzIoYywgZCkpLFxcbiAgICAgICAgICBoYXNOZXh0Q29sID9cXG4gICAgICAgICAgICBnZXRDaGFubmVsKHhGcmFnQXRPdXRwdXRDb29yZHMsIHZlYzIoYywgZCArIDEpKSA6IDAuMCxcXG4gICAgICAgICAgaGFzTmV4dFJvdyA/XFxuICAgICAgICAgICAgZ2V0Q2hhbm5lbCh4RnJhZ0F0T3V0cHV0Q29vcmRzICwgdmVjMihjICsgMSwgZCkpIDogMC4wLFxcbiAgICAgICAgICAoaGFzTmV4dFJvdyAmJiBoYXNOZXh0Q29sKSA/XFxuICAgICAgICAgICAgZ2V0Q2hhbm5lbCh4RnJhZ0F0T3V0cHV0Q29vcmRzLCB2ZWMyKGMgKyAxLCBkICsgMSkpIDogMC4wXFxuICAgICAgICApO1xcblxcbiAgICAgICAgaW50IGZpcnN0Q2hhbm5lbCA9IGQgLSBcIitpK1wiO1xcbiAgICAgICAgdmVjMiBjYWNoZSA9IHZlYzIoMC4pO1xcbiAgICAgICAgaWYoZmlyc3RDaGFubmVsID49IDApe1xcbiAgICAgICAgICB2ZWM0IGZpcnN0Q2hhbm5lbEZyYWcgPSBnZXRYKGIsIHIsIGMsIGZpcnN0Q2hhbm5lbCk7XFxuICAgICAgICAgIGNhY2hlLnggPSBnZXRDaGFubmVsKGZpcnN0Q2hhbm5lbEZyYWcsIHZlYzIoYywgZmlyc3RDaGFubmVsKSk7XFxuICAgICAgICAgICAgaWYoaGFzTmV4dFJvdyl7XFxuICAgICAgICAgICAgICBjYWNoZS55ID0gZ2V0Q2hhbm5lbChmaXJzdENoYW5uZWxGcmFnLCB2ZWMyKGMgKyAxLCBmaXJzdENoYW5uZWwpKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuXFxuICAgICAgICBpdmVjMiBkZXB0aCA9IGl2ZWMyKGQsIGQgKyAxKTtcXG4gICAgICAgIGZvciAoaW50IGogPSAtIFwiK2krXCI7IGogPD0gXCIraStcIjsgaisrKSB7XFxuICAgICAgICAgIGl2ZWMyIGlkeCA9IGRlcHRoICsgajtcXG4gICAgICAgICAgYnZlYzIgYWJvdmVMb3dlckJvdW5kID0gZ3JlYXRlclRoYW5FcXVhbChpZHgsIGl2ZWMyKDApKTtcXG4gICAgICAgICAgYnZlYzIgYmVsb3dVcHBlckJvdW5kID0gbGVzc1RoYW5FcXVhbChpZHgsIGl2ZWMyKFwiK3MrXCIpKTtcXG5cXG4gICAgICAgICAgYm9vbCBkZXB0aEluUmFuZ2UgPSBhYm92ZUxvd2VyQm91bmQueCAmJiBiZWxvd1VwcGVyQm91bmQueDtcXG4gICAgICAgICAgYm9vbCBkZXB0aFBsdXNPbmVJblJhbmdlID0gYWJvdmVMb3dlckJvdW5kLnkgJiYgYmVsb3dVcHBlckJvdW5kLnk7XFxuXFxuICAgICAgICAgIGlmKGRlcHRoSW5SYW5nZSB8fCBkZXB0aFBsdXNPbmVJblJhbmdlKXtcXG4gICAgICAgICAgICB2ZWM0IHogPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgICB2ZWM0IHhGcmFnQXRDdXJyZW50RGVwdGg7XFxuICAgICAgICAgICAgei54eiA9IGNhY2hlLnh5O1xcbiAgICAgICAgICAgIGlmKGRlcHRoUGx1c09uZUluUmFuZ2UgJiYgaGFzTmV4dENvbCl7XFxuICAgICAgICAgICAgICB4RnJhZ0F0Q3VycmVudERlcHRoID0gaWR4LnkgIT0gZCA/XFxuICAgICAgICAgICAgICAgIGdldFgoYiwgciwgYywgaWR4LnkpIDogeEZyYWdBdE91dHB1dENvb3JkcztcXG4gICAgICAgICAgICAgIHoueSA9IGdldENoYW5uZWwoeEZyYWdBdEN1cnJlbnREZXB0aCwgdmVjMihjLCBpZHgueSkpO1xcbiAgICAgICAgICAgICAgaWYoaGFzTmV4dFJvdyl7XFxuICAgICAgICAgICAgICAgIHoudyA9IGdldENoYW5uZWwoeEZyYWdBdEN1cnJlbnREZXB0aCwgdmVjMihjICsgMSwgaWR4LnkpKTtcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgY2FjaGUueHkgPSB6Lnl3O1xcbiAgICAgICAgICAgIHN1bSArPSB6ICogejtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB4QXRPdXRwdXRDb29yZHMgKiBcIithK1wiO1xcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksbWk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCIsXCJtYXhQb3NcIl0sdGhpcy5vdXRwdXRTaGFwZT10LmluU2hhcGU7dmFyIGU9dC5zdHJpZGVIZWlnaHQsbj10LnN0cmlkZVdpZHRoLHI9dC5kaWxhdGlvbkhlaWdodCxvPXQuZWZmZWN0aXZlRmlsdGVySGVpZ2h0LGE9dC5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxpPW8tMS10LnBhZEluZm8udG9wLHM9YS0xLXQucGFkSW5mby5sZWZ0LHU9byphLTE7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitpK1wiLCBcIitzK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuXFxuICAgICAgICBpdmVjMiBkeVJDQ29ybmVyID0gY29vcmRzLnl6IC0gcGFkcztcXG4gICAgICAgIGludCBkeVJDb3JuZXIgPSBkeVJDQ29ybmVyLng7XFxuICAgICAgICBpbnQgZHlDQ29ybmVyID0gZHlSQ0Nvcm5lci55O1xcblxcbiAgICAgICAgLy8gQ29udm9sdmUgZHkoPywgPywgZCkgd2l0aCBwb3MgbWFzayg6LCA6LCBkKSB0byBnZXQgZHgoeFIsIHhDLCBkKS5cXG4gICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbCB2YWx1ZXMgaW4gdGhhdCBheGlzLlxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG4gICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIitvK1wiO1xcbiAgICAgICAgICB3UiArPSBcIityK1wiKSB7XFxuICAgICAgICAgIGZsb2F0IGR5UiA9IGZsb2F0KGR5UkNvcm5lciArIHdSKSAvIFwiK2UrXCIuMDtcXG5cXG4gICAgICAgICAgaWYgKGR5UiA8IDAuMCB8fCBkeVIgPj0gXCIrdC5vdXRIZWlnaHQrXCIuMCB8fCBmcmFjdChkeVIpID4gMC4wKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaW50IGlkeVIgPSBpbnQoZHlSKTtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK2ErXCI7IHdDKyspIHtcXG4gICAgICAgICAgICBmbG9hdCBkeUMgPSBmbG9hdChkeUNDb3JuZXIgKyB3QykgLyBcIituK1wiLjA7XFxuXFxuICAgICAgICAgICAgaWYgKGR5QyA8IDAuMCB8fCBkeUMgPj0gXCIrdC5vdXRXaWR0aCtcIi4wIHx8XFxuICAgICAgICAgICAgICAgIGZyYWN0KGR5QykgPiAwLjApIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnQgaWR5QyA9IGludChkeUMpO1xcblxcbiAgICAgICAgICAgIGZsb2F0IGR5VmFsdWUgPSBnZXREeShiLCBpZHlSLCBpZHlDLCBkKTtcXG4gICAgICAgICAgICBpbnQgbWF4UG9zVmFsdWUgPSBcIit1K1wiIC0gaW50KGdldE1heFBvcyhiLCBpZHlSLCBpZHlDLCBkKSk7XFxuXFxuICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHZhbHVlLCBjaGVjayBpdCBhZ2FpbnN0IHRoZSB2YWx1ZSBmcm9tIHRoZVxcbiAgICAgICAgICAgIC8vIHBvc2l0aW9uIG1hdHJpeC5cXG4gICAgICAgICAgICBpbnQgY3VyUG9zVmFsdWUgPSB3UiAqIFwiK2ErXCIgKyB3QztcXG4gICAgICAgICAgICBmbG9hdCBtYXNrID0gZmxvYXQobWF4UG9zVmFsdWUgPT0gY3VyUG9zVmFsdWUgPyAxLjAgOiAwLjApO1xcblxcbiAgICAgICAgICAgIGRvdFByb2QgKz0gZHlWYWx1ZSAqIG1hc2s7XFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChkb3RQcm9kKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxnaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0KXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiZHlcIixcIm1heFBvc1wiXSx0aGlzLm91dHB1dFNoYXBlPXQuaW5TaGFwZTt2YXIgZT10LnN0cmlkZURlcHRoLG49dC5zdHJpZGVIZWlnaHQscj10LnN0cmlkZVdpZHRoLG89dC5kaWxhdGlvbkRlcHRoLGE9dC5kaWxhdGlvbkhlaWdodCxpPXQuZGlsYXRpb25XaWR0aCxzPXQuZWZmZWN0aXZlRmlsdGVyRGVwdGgsdT10LmVmZmVjdGl2ZUZpbHRlckhlaWdodCxsPXQuZWZmZWN0aXZlRmlsdGVyV2lkdGgsYz1zLTEtdC5wYWRJbmZvLmZyb250LGg9dS0xLXQucGFkSW5mby50b3AscD1sLTEtdC5wYWRJbmZvLmxlZnQsZj1zKnUqbC0xO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICBjb25zdCBpdmVjMyBwYWRzID0gaXZlYzMoXCIrYytcIiwgXCIraCtcIiwgXCIrcCtcIik7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzUgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHMueDtcXG4gICAgICAgIGludCBjaCA9IGNvb3Jkcy51O1xcblxcbiAgICAgICAgaXZlYzMgZHlDb3JuZXIgPSBpdmVjMyhjb29yZHMueSwgY29vcmRzLnosIGNvb3Jkcy53KSAtIHBhZHM7XFxuICAgICAgICBpbnQgZHlEQ29ybmVyID0gZHlDb3JuZXIueDtcXG4gICAgICAgIGludCBkeVJDb3JuZXIgPSBkeUNvcm5lci55O1xcbiAgICAgICAgaW50IGR5Q0Nvcm5lciA9IGR5Q29ybmVyLno7XFxuXFxuICAgICAgICAvLyBDb252b2x2ZSBkeSg/LCA/LCA/LCBjaCkgd2l0aCBwb3MgbWFzayg6LCA6LCA6LCBkKSB0byBnZXRcXG4gICAgICAgIC8vIGR4KHhELCB4UiwgeEMsIGNoKS5cXG4gICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkLiA6ID0gYWNyb3NzIGFsbCB2YWx1ZXMgaW4gdGhhdCBheGlzLlxcbiAgICAgICAgZmxvYXQgZG90UHJvZCA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IHdEID0gMDsgd0QgPCBcIitzK1wiO1xcbiAgICAgICAgICAgd0QgKz0gXCIrbytcIikge1xcbiAgICAgICAgICBmbG9hdCBkeUQgPSBmbG9hdChkeURDb3JuZXIgKyB3RCkgLyBcIitlK1wiLjA7XFxuXFxuICAgICAgICAgIGlmIChkeUQgPCAwLjAgfHwgZHlEID49IFwiK3Qub3V0RGVwdGgrXCIuMCB8fCBmcmFjdChkeUQpID4gMC4wKSB7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgaW50IGlkeUQgPSBpbnQoZHlEKTtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK3UrXCI7XFxuICAgICAgICAgICAgICB3UiArPSBcIithK1wiKSB7XFxuICAgICAgICAgICAgZmxvYXQgZHlSID0gZmxvYXQoZHlSQ29ybmVyICsgd1IpIC8gXCIrbitcIi4wO1xcblxcbiAgICAgICAgICAgIGlmIChkeVIgPCAwLjAgfHwgZHlSID49IFwiK3Qub3V0SGVpZ2h0K1wiLjAgfHxcXG4gICAgICAgICAgICAgICAgZnJhY3QoZHlSKSA+IDAuMCkge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGludCBpZHlSID0gaW50KGR5Uik7XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgd0MgPSAwOyB3QyA8IFwiK2wrXCI7XFxuICAgICAgICAgICAgICAgIHdDICs9IFwiK2krXCIpIHtcXG4gICAgICAgICAgICAgIGZsb2F0IGR5QyA9IGZsb2F0KGR5Q0Nvcm5lciArIHdDKSAvIFwiK3IrXCIuMDtcXG5cXG4gICAgICAgICAgICAgIGlmIChkeUMgPCAwLjAgfHwgZHlDID49IFwiK3Qub3V0V2lkdGgrXCIuMCB8fFxcbiAgICAgICAgICAgICAgICAgIGZyYWN0KGR5QykgPiAwLjApIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICBpbnQgaWR5QyA9IGludChkeUMpO1xcblxcbiAgICAgICAgICAgICAgZmxvYXQgZHlWYWx1ZSA9IGdldER5KGJhdGNoLCBpZHlELCBpZHlSLCBpZHlDLCBjaCk7XFxuICAgICAgICAgICAgICBpbnQgbWF4UG9zVmFsdWUgPSBcIitmK1wiIC1cXG4gICAgICAgICAgICAgICAgICBpbnQoZ2V0TWF4UG9zKGJhdGNoLCBpZHlELCBpZHlSLCBpZHlDLCBjaCkpO1xcblxcbiAgICAgICAgICAgICAgLy8gR2V0IHRoZSBjdXJyZW50IHZhbHVlLCBjaGVjayBpdCBhZ2FpbnN0IHRoZSB2YWx1ZSBmcm9tIHRoZVxcbiAgICAgICAgICAgICAgLy8gcG9zaXRpb24gbWF0cml4LlxcbiAgICAgICAgICAgICAgaW50IGN1clBvc1ZhbHVlID1cXG4gICAgICAgICAgICAgICAgICB3RCAqIFwiK3UrXCIgKiBcIitsK1wiICtcXG4gICAgICAgICAgICAgICAgICB3UiAqIFwiK2wrXCIgKyB3QztcXG4gICAgICAgICAgICAgIGZsb2F0IG1hc2sgPSBmbG9hdChtYXhQb3NWYWx1ZSA9PSBjdXJQb3NWYWx1ZSA/IDEuMCA6IDAuMCk7XFxuXFxuICAgICAgICAgICAgICBkb3RQcm9kICs9IGR5VmFsdWUgKiBtYXNrO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KGRvdFByb2QpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLHlpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PW4mJihuPSExKSx2b2lkIDA9PT1yJiYocj0hMSksdm9pZCAwPT09byYmKG89ITEpLHZvaWQgMD09PWEmJihhPW51bGwpLHZvaWQgMD09PWkmJihpPSExKSx0aGlzLnZhcmlhYmxlTmFtZXM9W1wibWF0cml4QVwiLFwibWF0cml4QlwiXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMCx0aGlzLm91dHB1dFNoYXBlPWU7dmFyIHM9bj90WzFdOnRbMl0sdT1NYXRoLmNlaWwocy8yKSxsPW4/XCJpICogMiwgcmMueVwiOlwicmMueSwgaSAqIDJcIixjPXI/XCJyYy56LCBpICogMlwiOlwiaSAqIDIsIHJjLnpcIixoPW4/W1wiYS54eHl5XCIsXCJhLnp6d3dcIl06W1wiYS54eHp6XCIsXCJhLnl5d3dcIl0scD1yP1tcImIueHp4elwiLFwiYi55d3l3XCJdOltcImIueHl4eVwiLFwiYi56d3p3XCJdLGY9XCJcIixkPVwiXCI7YSYmKGY9aT9cInZlYzQgYWN0aXZhdGlvbih2ZWM0IGEpIHtcXG4gICAgICAgICAgdmVjNCBiID0gZ2V0UHJlbHVBY3RpdmF0aW9uV2VpZ2h0c0F0T3V0Q29vcmRzKCk7XFxuICAgICAgICAgIFwiK2ErXCJcXG4gICAgICAgIH1cIjpcInZlYzQgYWN0aXZhdGlvbih2ZWM0IHgpIHtcXG4gICAgICAgICAgXCIrYStcIlxcbiAgICAgICAgfVwiLGQ9XCJyZXN1bHQgPSBhY3RpdmF0aW9uKHJlc3VsdCk7XCIpO3ZhciB2PW8/XCJyZXN1bHQgKz0gZ2V0Qmlhc0F0T3V0Q29vcmRzKCk7XCI6XCJcIjtvJiZ0aGlzLnZhcmlhYmxlTmFtZXMucHVzaChcImJpYXNcIiksaSYmdGhpcy52YXJpYWJsZU5hbWVzLnB1c2goXCJwcmVsdUFjdGl2YXRpb25XZWlnaHRzXCIpLHRoaXMudXNlckNvZGU9XCJcXG4gICAgICBcIitmK1wiXFxuXFxuICAgICAgY29uc3QgZmxvYXQgc2hhcmVkRGltZW5zaW9uID0gXCIrdStcIi4wO1xcblxcbiAgICAgIHZlYzQgZG90MngyQVJvd0JDb2woaXZlYzMgcmMpIHtcXG4gICAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwKTtcXG4gICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgXCIrdStcIjsgaSsrKSB7XFxuICAgICAgICAgIHZlYzQgYSA9IGdldE1hdHJpeEEocmMueCwgXCIrbCtcIik7XFxuICAgICAgICAgIHZlYzQgYiA9IGdldE1hdHJpeEIocmMueCwgXCIrYytcIik7XFxuXFxuICAgICAgICAgIC8vIFRoZXNlIHN3aXp6bGVkIHByb2R1Y3RzIG5lZWQgdG8gYmUgc2VwYXJhdGVseSBhZGRlZC5cXG4gICAgICAgICAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vdGVuc29yZmxvdy90ZmpzL2lzc3Vlcy8xNzM1XFxuICAgICAgICAgIHJlc3VsdCArPSAoXCIraFswXStcIiAqIFwiK3BbMF0rXCIpO1xcbiAgICAgICAgICByZXN1bHQgKz0gKFwiK2hbMV0rXCIgKiBcIitwWzFdK1wiKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWMzIHJjID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IGRvdDJ4MkFSb3dCQ29sKHJjKTtcXG5cXG4gICAgICAgIFwiK3YrXCJcXG5cXG4gICAgICAgIFwiK2QrXCJcXG5cXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLHhpPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcInByb2JzXCJdLHRoaXMub3V0cHV0U2hhcGU9W3Qsbl0sdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHVuaWZvcm0gZmxvYXQgc2VlZDtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG5cXG4gICAgICAgIGZsb2F0IHIgPSByYW5kb20oc2VlZCk7XFxuICAgICAgICBmbG9hdCBjZGYgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiKyhlLTEpK1wiOyBpKyspIHtcXG4gICAgICAgICAgY2RmICs9IGdldFByb2JzKGJhdGNoLCBpKTtcXG5cXG4gICAgICAgICAgaWYgKHIgPCBjZGYpIHtcXG4gICAgICAgICAgICBzZXRPdXRwdXQoZmxvYXQoaSkpO1xcbiAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgLy8gSWYgbm8gb3RoZXIgZXZlbnQgaGFwcGVuZWQsIGxhc3QgZXZlbnQgaGFwcGVuZWQuXFxuICAgICAgICBzZXRPdXRwdXQoZmxvYXQoXCIrKGUtMSkrXCIpKTtcXG4gICAgICB9XFxuICAgIFwifXJldHVybiB0LnByb3RvdHlwZS5nZXRDdXN0b21TZXR1cEZ1bmM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztyZXR1cm4gZnVuY3Rpb24obixyKXtudWxsPT1lLnNlZWRMb2MmJihlLnNlZWRMb2M9bi5nZXRVbmlmb3JtTG9jYXRpb24ocixcInNlZWRcIikpLG4uZ2wudW5pZm9ybTFmKGUuc2VlZExvYyx0KX19LHR9KCksYmk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dGhpcy52YXJpYWJsZU5hbWVzPVtcImluZGljZXNcIl0sdGhpcy5vdXRwdXRTaGFwZT1bdCxlXSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgaW5kZXggPSByb3VuZChnZXRJbmRpY2VzKGNvb3Jkcy54KSk7XFxuICAgICAgICBzZXRPdXRwdXQobWl4KGZsb2F0KFwiK3IrXCIpLCBmbG9hdChcIituK1wiKSxcXG4gICAgICAgICAgICAgICAgICAgICAgZmxvYXQoaW5kZXggPT0gY29vcmRzLnkpKSk7XFxuICAgICAgfVxcbiAgICBcIn19KCksd2k9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy5vdXRwdXRTaGFwZT10O3ZhciBlPXQubGVuZ3RoO2lmKDA9PT1lKXRoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgc2V0T3V0cHV0KHZlYzQoZ2V0QSgpLCAwLiwgMC4sIDAuKSk7XFxuICAgICAgICB9XFxuICAgICAgXCI7ZWxzZXt2YXIgbj1GbyhcInJjXCIsZSkscj1qbyhlKSxvPWZ1bmN0aW9uKHQsZSxuKXtpZigxPT09dClyZXR1cm5cInJjID4gXCIrZVswXTtmb3IodmFyIHI9XCJcIixvPXQtMjtvPHQ7bysrKXIrPW5bb10rXCIgPj0gXCIrZVtvXSxvPHQtMSYmKHIrPVwifHxcIik7cmV0dXJuIHJ9KGUsdCxuKSxhPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKDE9PT10KXJldHVyblwiXCI7dmFyIG89ci5zbGljZSgtMik7cmV0dXJuXCJcXG4gICAgaW50IHIgPSBcIitvWzBdK1wiO1xcbiAgICBpbnQgYyA9IFwiK29bMV0rXCI7XFxuICAgIGludCBycDEgPSByICsgMTtcXG4gICAgaW50IGNwMSA9IGMgKyAxO1xcblxcbiAgICBib29sIGNFZGdlID0gY3AxID49IFwiK2UrXCI7XFxuICAgIGJvb2wgckVkZ2UgPSBycDEgPj0gXCIrbitcIjtcXG4gIFwifShlLHRbdC5sZW5ndGgtMV0sdFt0Lmxlbmd0aC0yXSxuKSxpPWZ1bmN0aW9uKHQsZSl7dmFyIG49dC5sZW5ndGgscj1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1bXSxyPTA7cjw9MTtyKyspZm9yKHZhciBvPTA7bzw9MTtvKyspe2Zvcih2YXIgYT0oMD09PXI/XCJyXCI6XCJycDFcIikrXCIsIFwiKygwPT09bz9cImNcIjpcImNwMVwiKSxpPTI7aTx0O2krKylhPWVbZS5sZW5ndGgtMS1pXStcIixcIithO24ucHVzaChhKX1yZXR1cm4gbn0obixlKTtyZXR1cm4gMT09PW4/XCJnZXRBKHJjKSxcXG4gICAgICAgICAgICByYyArIDEgPj0gXCIrdFswXStcIiA/IDAuIDogZ2V0QShyYyArIDEpLFxcbiAgICAgICAgICAgIDAsIDBcIjpcImdldEEoXCIrclswXStcIiksXFxuICAgICAgICAgIGNFZGdlID8gMC4gOiBnZXRBKFwiK3JbMV0rXCIpLFxcbiAgICAgICAgICByRWRnZSA/IDAuIDogZ2V0QShcIityWzJdK1wiKSxcXG4gICAgICAgICAgckVkZ2UgfHwgY0VkZ2UgPyAwLiA6IGdldEEoXCIrclszXStcIilcIn0odCxuKTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAgIFwiK3IrXCIgcmMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG5cXG4gICAgICAgICAgaWYoXCIrbytcIikge1xcbiAgICAgICAgICAgIHNldE91dHB1dCh2ZWM0KDApKTtcXG4gICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBcIithK1wiXFxuXFxuICAgICAgICAgICAgc2V0T3V0cHV0KHZlYzQoXCIraStcIikpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgXCJ9fX0oKTt2YXIgQ2k9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9ZS5tYXAoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVswXSt0W25dK2VbMV19KTt2YXIgcj10Lmxlbmd0aCxvPWpvKHIpLGE9ZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF19KS5qb2luKFwiLFwiKSxpPWUubWFwKGZ1bmN0aW9uKGUsbil7cmV0dXJuIGVbMF0rdFtuXX0pLmpvaW4oXCIsXCIpLHM9W1wiY29vcmRzWzBdXCIsXCJjb29yZHNbMV1cIixcImNvb3Jkc1syXVwiLFwiY29vcmRzWzNdXCJdLnNsaWNlKDAscik7dGhpcy51c2VyQ29kZT0xIT09cj9cIlxcbiAgICAgIFwiK28rXCIgc3RhcnQgPSBcIitvK1wiKFwiK2ErXCIpO1xcbiAgICAgIFwiK28rXCIgZW5kID0gXCIrbytcIihcIitpK1wiKTtcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitvK1wiIG91dEMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGlmIChhbnkobGVzc1RoYW4ob3V0Qywgc3RhcnQpKSB8fCBhbnkoZ3JlYXRlclRoYW5FcXVhbChvdXRDLCBlbmQpKSkge1xcbiAgICAgICAgICBzZXRPdXRwdXQoZmxvYXQoXCIrbitcIikpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgXCIrbytcIiBjb29yZHMgPSBvdXRDIC0gc3RhcnQ7XFxuICAgICAgICAgIHNldE91dHB1dChnZXRYKFwiK3MrXCIpKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIFwiOlwiXFxuICAgICAgICBpbnQgc3RhcnQgPSBcIithK1wiO1xcbiAgICAgICAgaW50IGVuZCA9IFwiK2krXCI7XFxuXFxuICAgICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICAgIGludCBvdXRDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIGlmIChvdXRDIDwgc3RhcnQgfHwgb3V0QyA+PSBlbmQpIHtcXG4gICAgICAgICAgICBzZXRPdXRwdXQoZmxvYXQoXCIrbitcIikpO1xcbiAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHNldE91dHB1dChnZXRYKG91dEMgLSBzdGFydCkpO1xcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgXCJ9fSgpLEVpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMCx0aGlzLm91dHB1dFNoYXBlPWUubWFwKGZ1bmN0aW9uKGUsbil7cmV0dXJuIGVbMF0rdFtuXStlWzFdfSk7Zm9yKHZhciByPXQubGVuZ3RoLG89am8ociksYT1lLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdFswXX0pLmpvaW4oXCIsXCIpLGk9ZS5tYXAoZnVuY3Rpb24oZSxuKXtyZXR1cm4gZVswXSt0W25dfSkuam9pbihcIixcIikscz1GbyhcInJjXCIsciksdT1GbyhcInNvdXJjZVwiLHIpLGw9c1tyLTFdK1wiIDwgXCIrdGhpcy5vdXRwdXRTaGFwZVtyLTFdLGM9MT09PXI/XCJzb3VyY2VcIjpcInZlYzIoXCIrdS5zbGljZSgtMikuam9pbigpK1wiKVwiLGg9W28rXCIgcmMgPSBvdXRwdXRMb2M7XCIsc1tyLTFdK1wiICs9IDE7XFxuICAgICAgIGlmKFwiK2wrXCIpIHtcXG4gICAgICBcIiwxPT09cj9cIlwiOlwifVxcbiAgICAgICByYyA9IG91dHB1dExvYztcXG4gICAgICAgXCIrc1tyLTJdK1wiICs9IDE7XFxuICAgICAgIGlmKFwiK3Nbci0yXStcIiA8IFwiK3RoaXMub3V0cHV0U2hhcGVbci0yXStcIikge1wiLDE9PT1yP1wiXCI6XCIgIFwiK3Nbci0xXStcIiArPSAxO1xcbiAgICAgICAgIGlmKFwiK2wrXCIpIHtcIl0scD0xPT09cj9cInJjIDwgc3RhcnQgfHwgcmMgPj0gZW5kXCI6XCJhbnkobGVzc1RoYW4ocmMsIHN0YXJ0KSkgfHwgYW55KGdyZWF0ZXJUaGFuRXF1YWwocmMsIGVuZCkpXCIsZj1cIlwiLGQ9MCx2PTE9PT1yPzI6NDtkPHY7ZCsrKWYrPVwiXFxuICAgICAgICBcIitoW2RdK1wiXFxuICAgICAgICBpZiAoXCIrcCtcIikge1xcbiAgICAgICAgICByZXN1bHRbXCIrZCtcIl0gPSBmbG9hdChcIituK1wiKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgIFwiK28rXCIgc291cmNlID0gcmMgLSBzdGFydDtcXG4gICAgICAgICAgcmVzdWx0W1wiK2QrXCJdID0gZ2V0Q2hhbm5lbChnZXRYKFwiK3Uuam9pbigpK1wiKSwgXCIrYytcIik7XFxuICAgICAgICB9XFxuICAgICAgXCI7Zis9MT09PXI/XCJ9IFwiOlwifX1cIix0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgXCIrbytcIiBzdGFydCA9IFwiK28rXCIoXCIrYStcIik7XFxuICAgICAgY29uc3QgXCIrbytcIiBlbmQgPSBcIitvK1wiKFwiK2krXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK28rXCIgb3V0cHV0TG9jID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcbiAgICAgICAgXCIrZitcIlxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn19KCksUmk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLFwiYXZnXCI9PT1lJiZuKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBjb21wdXRlIHBvc2l0aW9ucyBmb3IgYXZlcmFnZSBwb29sLlwiKTt2YXIgcj10LmZpbHRlcldpZHRoLG89dC5zdHJpZGVIZWlnaHQsYT10LnN0cmlkZVdpZHRoLGk9dC5kaWxhdGlvbkhlaWdodCxzPXQuZGlsYXRpb25XaWR0aCx1PXQuZWZmZWN0aXZlRmlsdGVySGVpZ2h0LGw9dC5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxjPXQucGFkSW5mby50b3AsaD10LnBhZEluZm8ubGVmdDt0aGlzLm91dHB1dFNoYXBlPXQub3V0U2hhcGU7dmFyIHA9XCJhdmdcIj09PWUsZj1cIjAuMFwiO2lmKHB8fChmPVwiLTEuMCAvIDFlLTIwXCIpLG4pdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgICAgY29uc3QgaXZlYzIgc3RyaWRlcyA9IGl2ZWMyKFwiK28rXCIsIFwiK2ErXCIpO1xcbiAgICAgICAgY29uc3QgaXZlYzIgcGFkcyA9IGl2ZWMyKFwiK2MrXCIsIFwiK2grXCIpO1xcblxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgICAgaW50IGJhdGNoID0gY29vcmRzWzBdO1xcbiAgICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG5cXG4gICAgICAgICAgaXZlYzIgeFJDQ29ybmVyID0gY29vcmRzLnl6ICogc3RyaWRlcyAtIHBhZHM7XFxuICAgICAgICAgIGludCB4UkNvcm5lciA9IHhSQ0Nvcm5lci54O1xcbiAgICAgICAgICBpbnQgeENDb3JuZXIgPSB4UkNDb3JuZXIueTtcXG5cXG4gICAgICAgICAgLy8gbWF4L21pbiB4KD8sID8sIGQpIHRvIGdldCB5KHlSLCB5QywgZCkuXFxuICAgICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkXFxuICAgICAgICAgIGZsb2F0IG1pbk1heFZhbHVlID0gMC4wO1xcbiAgICAgICAgICBmbG9hdCBtaW5NYXhWYWx1ZUZvdW5kID0gMC4wO1xcbiAgICAgICAgICBpbnQgbWluTWF4UG9zaXRpb24gPSAwO1xcbiAgICAgICAgICBmbG9hdCBhdmdWYWx1ZSA9IDAuMDtcXG5cXG4gICAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK3UrXCI7XFxuICAgICAgICAgICAgICB3UiArPSBcIitpK1wiKSB7XFxuICAgICAgICAgICAgaW50IHhSID0geFJDb3JuZXIgKyB3UjtcXG5cXG4gICAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrbCtcIjtcXG4gICAgICAgICAgICAgICAgd0MgKz0gXCIrcytcIikge1xcbiAgICAgICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyB3QztcXG5cXG4gICAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgZmxvYXQgdmFsdWUgPSBnZXRYKGJhdGNoLCB4UiwgeEMsIGQpO1xcblxcbiAgICAgICAgICAgICAgLy8gSWYgYSBtaW4gLyBtYXggdmFsdWUgaGFzIGFscmVhZHkgYmVlbiBmb3VuZCwgdXNlIGl0LiBJZiBub3QsXFxuICAgICAgICAgICAgICAvLyB1c2UgdGhlIGN1cnJlbnQgdmFsdWUuXFxuICAgICAgICAgICAgICBmbG9hdCBjdXJyTWluTWF4VmFsdWUgPSBtaXgoXFxuICAgICAgICAgICAgICAgICAgdmFsdWUsIG1pbk1heFZhbHVlLCBtaW5NYXhWYWx1ZUZvdW5kKTtcXG4gICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSBjdXJyTWluTWF4VmFsdWUpIHtcXG4gICAgICAgICAgICAgICAgbWluTWF4VmFsdWUgPSB2YWx1ZTtcXG4gICAgICAgICAgICAgICAgbWluTWF4VmFsdWVGb3VuZCA9IDEuMDtcXG4gICAgICAgICAgICAgICAgbWluTWF4UG9zaXRpb24gPSB3UiAqIFwiK2wrXCIgKyB3QztcXG4gICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KGZsb2F0KG1pbk1heFBvc2l0aW9uKSk7XFxuICAgICAgICB9XFxuICAgICAgXCI7ZWxzZXt2YXIgZD1lK1wiKFwiK2UrXCIoXCIrZStcIihtaW5NYXhWYWx1ZVswXSwgbWluTWF4VmFsdWVbMV0pLCBtaW5NYXhWYWx1ZVsyXSksIG1pbk1heFZhbHVlWzNdKVwiO1wiYXZnXCI9PT1lJiYoZD1cImF2Z1ZhbHVlIC8gY291bnRcIik7dmFyIHY9NCpNYXRoLmZsb29yKHIvNCksbT1yJTQsZz1cIlxcbiAgICAgIGlmIChcIitwK1wiKSB7XFxuICAgICAgICBhdmdWYWx1ZSArPSBkb3QodmFsdWVzLCBvbmVzKTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgbWluTWF4VmFsdWUgPSBtYXgodmFsdWVzLCBtaW5NYXhWYWx1ZSk7XFxuICAgICAgfVxcbiAgICBcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgaXZlYzIgc3RyaWRlcyA9IGl2ZWMyKFwiK28rXCIsIFwiK2ErXCIpO1xcbiAgICAgIGNvbnN0IGl2ZWMyIHBhZHMgPSBpdmVjMihcIitjK1wiLCBcIitoK1wiKTtcXG4gICAgICBjb25zdCBmbG9hdCBpbml0aWFsaXphdGlvblZhbHVlID0gXCIrZitcIjtcXG4gICAgICBjb25zdCB2ZWM0IG9uZXMgPSB2ZWM0KDEuMCwgMS4wLCAxLjAsIDEuMCk7XFxuXFxuICAgICAgZmxvYXQgY291bnQgPSAwLjA7XFxuXFxuICAgICAgZmxvYXQgZ2V0VmFsdWUoaW50IGJhdGNoLCBpbnQgeFIsIGludCB4QywgaW50IGQpIHtcXG4gICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgIHJldHVybiBpbml0aWFsaXphdGlvblZhbHVlO1xcbiAgICAgICAgfVxcbiAgICAgICAgY291bnQgKz0gMS4wO1xcbiAgICAgICAgcmV0dXJuIGdldFgoYmF0Y2gsIHhSLCB4QywgZCk7XFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGJhdGNoID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuXFxuICAgICAgICBpdmVjMiB4UkNDb3JuZXIgPSBjb29yZHMueXogKiBzdHJpZGVzIC0gcGFkcztcXG4gICAgICAgIGludCB4UkNvcm5lciA9IHhSQ0Nvcm5lci54O1xcbiAgICAgICAgaW50IHhDQ29ybmVyID0geFJDQ29ybmVyLnk7XFxuXFxuICAgICAgICAvLyBtYXgvbWluIHgoPywgPywgZCkgdG8gZ2V0IHkoeVIsIHlDLCBkKS5cXG4gICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkXFxuICAgICAgICB2ZWM0IG1pbk1heFZhbHVlID0gdmVjNChcIitmK1wiKTtcXG4gICAgICAgIGZsb2F0IGF2Z1ZhbHVlID0gMC4wO1xcbiAgICAgICAgY291bnQgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCB3UiA9IDA7IHdSIDwgXCIrdStcIjtcXG4gICAgICAgICAgICB3UiArPSBcIitpK1wiKSB7XFxuICAgICAgICAgIGludCB4UiA9IHhSQ29ybmVyICsgd1I7XFxuXFxuICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrdC5pbkhlaWdodCtcIikge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIit2K1wiOyB3QyArPSA0KSB7XFxuICAgICAgICAgICAgaW50IHhDID0geENDb3JuZXIgKyB3QyAqIFwiK3MrXCI7XFxuXFxuICAgICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QywgZCksXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDICsgXCIrcytcIiwgZCksXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDICsgMiAqIFwiK3MrXCIsIGQpLFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QyArIDMgKiBcIitzK1wiLCBkKVxcbiAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgXCIrZytcIlxcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgXCIrditcIjtcXG4gICAgICAgICAgaWYgKFwiKygxPT09bSkrXCIpIHtcXG4gICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDLCBkKSxcXG4gICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgXCIrZytcIlxcbiAgICAgICAgICB9IGVsc2UgaWYgKFwiKygyPT09bSkrXCIpIHtcXG4gICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeFIsIHhDLCBkKSxcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMgKyBcIitzK1wiLCBkKSxcXG4gICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICBcIitnK1wiXFxuICAgICAgICAgIH0gZWxzZSBpZiAoXCIrKDM9PT1tKStcIikge1xcbiAgICAgICAgICAgIHZlYzQgdmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4UiwgeEMsIGQpLFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QyArIFwiK3MrXCIsIGQpLFxcbiAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhSLCB4QyArIDIgKiBcIitzK1wiLCBkKSxcXG4gICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgIFwiK2crXCJcXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KFwiK2QrXCIpO1xcbiAgICAgIH1cXG4gICAgXCJ9fX0oKSxJaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7aWYodGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIl0sXCJhdmdcIj09PWUmJm4pdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGNvbXB1dGUgcG9zaXRpb25zIGZvciBhdmVyYWdlIHBvb2wuXCIpO3ZhciByPXQuZmlsdGVyV2lkdGgsbz10LnN0cmlkZURlcHRoLGE9dC5zdHJpZGVIZWlnaHQsaT10LnN0cmlkZVdpZHRoLHM9dC5kaWxhdGlvbkRlcHRoLHU9dC5kaWxhdGlvbkhlaWdodCxsPXQuZGlsYXRpb25XaWR0aCxjPXQuZWZmZWN0aXZlRmlsdGVyRGVwdGgsaD10LmVmZmVjdGl2ZUZpbHRlckhlaWdodCxwPXQuZWZmZWN0aXZlRmlsdGVyV2lkdGgsZj10LnBhZEluZm8uZnJvbnQsZD10LnBhZEluZm8udG9wLHY9dC5wYWRJbmZvLmxlZnQ7dGhpcy5vdXRwdXRTaGFwZT10Lm91dFNoYXBlO3ZhciBtPVwiYXZnXCI9PT1lLGc9XCIwLjBcIjtpZihtfHwoZz1cIi0xLjAgLyAxZS0yMFwiKSxuKXRoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIGNvbnN0IGl2ZWMzIHN0cmlkZXMgPVxcbiAgICAgICAgICAgIGl2ZWMzKFwiK28rXCIsIFwiK2ErXCIsIFwiK2krXCIpO1xcbiAgICAgICAgY29uc3QgaXZlYzMgcGFkcyA9IGl2ZWMzKFwiK2YrXCIsIFwiK2QrXCIsIFwiK3YrXCIpO1xcblxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBpdmVjNSBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgICAgaW50IGJhdGNoID0gY29vcmRzLng7XFxuICAgICAgICAgIGludCBjaCA9IGNvb3Jkcy51O1xcblxcbiAgICAgICAgICBpdmVjMyB4Q29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgKiBzdHJpZGVzIC0gcGFkcztcXG4gICAgICAgICAgaW50IHhEQ29ybmVyID0geENvcm5lci54O1xcbiAgICAgICAgICBpbnQgeFJDb3JuZXIgPSB4Q29ybmVyLnk7XFxuICAgICAgICAgIGludCB4Q0Nvcm5lciA9IHhDb3JuZXIuejtcXG5cXG4gICAgICAgICAgLy8gbWF4L21pbiB4KD8sID8sID8sIGNoKSB0byBnZXQgeSh5RCwgeVIsIHlDLCBjaCkuXFxuICAgICAgICAgIC8vID8gPSB0byBiZSBkZXRlcm1pbmVkXFxuICAgICAgICAgIGZsb2F0IG1pbk1heFZhbHVlID0gMC4wO1xcbiAgICAgICAgICBmbG9hdCBtaW5NYXhWYWx1ZUZvdW5kID0gMC4wO1xcbiAgICAgICAgICBpbnQgbWluTWF4UG9zaXRpb24gPSAwO1xcblxcbiAgICAgICAgICBmb3IgKGludCB3RCA9IDA7IHdEIDwgXCIrYytcIjtcXG4gICAgICAgICAgICAgIHdEICs9IFwiK3MrXCIpIHtcXG4gICAgICAgICAgICBpbnQgeEQgPSB4RENvcm5lciArIHdEO1xcblxcbiAgICAgICAgICAgIGlmICh4RCA8IDAgfHwgeEQgPj0gXCIrdC5pbkRlcHRoK1wiKSB7XFxuICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgZm9yIChpbnQgd1IgPSAwOyB3UiA8IFwiK2grXCI7XFxuICAgICAgICAgICAgICAgIHdSICs9IFwiK3UrXCIpIHtcXG4gICAgICAgICAgICAgIGludCB4UiA9IHhSQ29ybmVyICsgd1I7XFxuXFxuICAgICAgICAgICAgICBpZiAoeFIgPCAwIHx8IHhSID49IFwiK3QuaW5IZWlnaHQrXCIpIHtcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICBmb3IgKGludCB3QyA9IDA7IHdDIDwgXCIrcCtcIjtcXG4gICAgICAgICAgICAgICAgICB3QyArPSBcIitsK1wiKSB7XFxuICAgICAgICAgICAgICAgIGludCB4QyA9IHhDQ29ybmVyICsgd0M7XFxuXFxuICAgICAgICAgICAgICAgIGlmICh4QyA8IDAgfHwgeEMgPj0gXCIrdC5pbldpZHRoK1wiKSB7XFxuICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgZmxvYXQgdmFsdWUgPSBnZXRYKGJhdGNoLCB4RCwgeFIsIHhDLCBjaCk7XFxuXFxuICAgICAgICAgICAgICAgIC8vIElmIGEgbWluIC8gbWF4IHZhbHVlIGhhcyBhbHJlYWR5IGJlZW4gZm91bmQsIHVzZSBpdC4gSWYgbm90LFxcbiAgICAgICAgICAgICAgICAvLyB1c2UgdGhlIGN1cnJlbnQgdmFsdWUuXFxuICAgICAgICAgICAgICAgIGZsb2F0IGN1cnJNaW5NYXhWYWx1ZSA9IG1peChcXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLCBtaW5NYXhWYWx1ZSwgbWluTWF4VmFsdWVGb3VuZCk7XFxuICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+PSBjdXJyTWluTWF4VmFsdWUpIHtcXG4gICAgICAgICAgICAgICAgICBtaW5NYXhWYWx1ZSA9IHZhbHVlO1xcbiAgICAgICAgICAgICAgICAgIG1pbk1heFZhbHVlRm91bmQgPSAxLjA7XFxuICAgICAgICAgICAgICAgICAgbWluTWF4UG9zaXRpb24gPVxcbiAgICAgICAgICAgICAgICAgICAgICB3RCAqIFwiK2grXCIgKiBcIitwK1wiICtcXG4gICAgICAgICAgICAgICAgICAgICAgd1IgKiBcIitwK1wiICsgd0M7O1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICAgIHNldE91dHB1dChmbG9hdChtaW5NYXhQb3NpdGlvbikpO1xcbiAgICAgICAgfVxcbiAgICAgIFwiO2Vsc2V7dmFyIHk9ZStcIihcIitlK1wiKFwiK2UrXCIobWluTWF4VmFsdWVbMF0sIG1pbk1heFZhbHVlWzFdKSwgbWluTWF4VmFsdWVbMl0pLCBtaW5NYXhWYWx1ZVszXSlcIjtcImF2Z1wiPT09ZSYmKHk9XCJhdmdWYWx1ZSAvIGNvdW50XCIpO3ZhciB4PTQqTWF0aC5mbG9vcihyLzQpLGI9ciU0LHc9XCJcXG4gICAgICBpZiAoXCIrbStcIikge1xcbiAgICAgICAgYXZnVmFsdWUgKz0gZG90KHZhbHVlcywgb25lcyk7XFxuICAgICAgfSBlbHNlIHtcXG4gICAgICAgIG1pbk1heFZhbHVlID0gbWF4KHZhbHVlcywgbWluTWF4VmFsdWUpO1xcbiAgICAgIH1cXG4gICAgXCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IGl2ZWMzIHN0cmlkZXMgPVxcbiAgICAgICAgaXZlYzMoXCIrbytcIiwgXCIrYStcIiwgXCIraStcIik7XFxuICAgICAgY29uc3QgaXZlYzMgcGFkcyA9IGl2ZWMzKFwiK2YrXCIsIFwiK2QrXCIsIFwiK3YrXCIpO1xcbiAgICAgIGNvbnN0IGZsb2F0IGluaXRpYWxpemF0aW9uVmFsdWUgPSBcIitnK1wiO1xcbiAgICAgIGNvbnN0IHZlYzQgb25lcyA9IHZlYzQoMS4wLCAxLjAsIDEuMCwgMS4wKTtcXG5cXG4gICAgICBmbG9hdCBjb3VudCA9IDAuMDtcXG5cXG4gICAgICBmbG9hdCBnZXRWYWx1ZShpbnQgYmF0Y2gsIGludCB4RCwgaW50IHhSLCBpbnQgeEMsIGludCBjaCkge1xcbiAgICAgICAgaWYgKHhDIDwgMCB8fCB4QyA+PSBcIit0LmluV2lkdGgrXCIpIHtcXG4gICAgICAgICAgcmV0dXJuIGluaXRpYWxpemF0aW9uVmFsdWU7XFxuICAgICAgICB9XFxuICAgICAgICBjb3VudCArPSAxLjA7XFxuICAgICAgICByZXR1cm4gZ2V0WChiYXRjaCwgeEQsIHhSLCB4QywgY2gpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNSBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkcy54O1xcbiAgICAgICAgaW50IGNoID0gY29vcmRzLnU7XFxuXFxuICAgICAgICBpdmVjMyB4Q29ybmVyID0gaXZlYzMoY29vcmRzLnksIGNvb3Jkcy56LCBjb29yZHMudykgKiBzdHJpZGVzIC0gcGFkcztcXG4gICAgICAgIGludCB4RENvcm5lciA9IHhDb3JuZXIueDtcXG4gICAgICAgIGludCB4UkNvcm5lciA9IHhDb3JuZXIueTtcXG4gICAgICAgIGludCB4Q0Nvcm5lciA9IHhDb3JuZXIuejtcXG5cXG4gICAgICAgIC8vIG1heC9taW4geCg/LCA/LCA/LCBkKSB0byBnZXQgeSh5RCwgeVIsIHlDLCBjaCkuXFxuICAgICAgICAvLyA/ID0gdG8gYmUgZGV0ZXJtaW5lZFxcbiAgICAgICAgdmVjNCBtaW5NYXhWYWx1ZSA9IHZlYzQoXCIrZytcIik7XFxuICAgICAgICBmbG9hdCBhdmdWYWx1ZSA9IDAuMDtcXG4gICAgICAgIGNvdW50ID0gMC4wO1xcblxcbiAgICAgICAgZm9yIChpbnQgd0QgPSAwOyB3RCA8IFwiK2MrXCI7XFxuICAgICAgICAgICAgd0QgKz0gXCIrcytcIikge1xcbiAgICAgICAgICBpbnQgeEQgPSB4RENvcm5lciArIHdEO1xcblxcbiAgICAgICAgICBpZiAoeEQgPCAwIHx8IHhEID49IFwiK3QuaW5EZXB0aCtcIikge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGZvciAoaW50IHdSID0gMDsgd1IgPCBcIitoK1wiO1xcbiAgICAgICAgICAgIHdSICs9IFwiK3UrXCIpIHtcXG4gICAgICAgICAgICBpbnQgeFIgPSB4UkNvcm5lciArIHdSO1xcblxcbiAgICAgICAgICAgIGlmICh4UiA8IDAgfHwgeFIgPj0gXCIrdC5pbkhlaWdodCtcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZvciAoaW50IHdDID0gMDsgd0MgPCBcIit4K1wiOyB3QyArPSA0KSB7XFxuICAgICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIHdDICogXCIrbCtcIjtcXG5cXG4gICAgICAgICAgICAgIHZlYzQgdmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMsIGNoKSxcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMgKyBcIitsK1wiLCBjaCksXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDICsgMiAqIFwiK2wrXCIsIGNoKSxcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMgKyAzICogXCIrbCtcIiwgY2gpXFxuICAgICAgICAgICAgICApO1xcblxcbiAgICAgICAgICAgICAgXCIrdytcIlxcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBpbnQgeEMgPSB4Q0Nvcm5lciArIFwiK3grXCI7XFxuICAgICAgICAgICAgaWYgKFwiKygxPT09YikrXCIpIHtcXG4gICAgICAgICAgICAgIHZlYzQgdmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMsIGNoKSxcXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgICAgIFwiK3crXCJcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFwiKygyPT09YikrXCIpIHtcXG4gICAgICAgICAgICAgIHZlYzQgdmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMsIGNoKSxcXG4gICAgICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIHhELCB4UiwgeEMgKyBcIitsK1wiLCBjaCksXFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICBcIit3K1wiXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChcIisoMz09PWIpK1wiKSB7XFxuICAgICAgICAgICAgICB2ZWM0IHZhbHVlcyA9IHZlYzQoXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDLCBjaCksXFxuICAgICAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCB4RCwgeFIsIHhDICsgXCIrbCtcIiwgY2gpLFxcbiAgICAgICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgeEQsIHhSLCB4QyArIDIgKiBcIitsK1wiLCBjaCksXFxuICAgICAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgICAgICk7XFxuXFxuICAgICAgICAgICAgICBcIit3K1wiXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICAgIHNldE91dHB1dChcIit5K1wiKTtcXG4gICAgICAgIH1cXG4gICAgICB9XFxuICAgIFwifX19KCksa2k9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXTt2YXIgbj10LndpbmRvd1NpemUscj10LmJhdGNoU2l6ZSxvPXQuaW5TaXplLGE9TWF0aC5jZWlsKG8vbik7dGhpcy5vdXRwdXRTaGFwZT1bcixhXTt2YXIgaT1cIjAuMFwiLHM9XCJcIjtcInByb2RcIj09PWU/aT1cIjEuMFwiOlwibWluXCI9PT1lPyhpPVwiMS4wIC8gMWUtMjBcIixzPVwibWluXCIpOlwibWF4XCI9PT1lJiYoaT1cIi0xLjAgLyAxZS0yMFwiLHM9XCJtYXhcIik7dmFyIHU9ZStcIihcIitlK1wiKFwiK2UrXCIobWluTWF4VmFsdWVbMF0sIG1pbk1heFZhbHVlWzFdKSwgbWluTWF4VmFsdWVbMl0pLCBtaW5NYXhWYWx1ZVszXSlcIjtcInN1bVwiPT09ZT91PVwic3VtVmFsdWVcIjpcInByb2RcIj09PWU/dT1cInByb2RWYWx1ZVwiOlwiYWxsXCI9PT1lP3U9XCJhbGxWYWx1ZVwiOlwiYW55XCI9PT1lJiYodT1cImFueVZhbHVlXCIpO3ZhciBsPTQqTWF0aC5mbG9vcihuLzQpLGM9biU0LGg9XCJcXG4gICAgICBpZiAoXCIrKFwic3VtXCI9PT1lKStcIikge1xcbiAgICAgICAgc3VtVmFsdWUgKz0gZG90KHZhbHVlcywgb25lcyk7XFxuICAgICAgfSBlbHNlIGlmIChcIisoXCJwcm9kXCI9PT1lKStcIikge1xcbiAgICAgICAgdmVjMiB0bXAgPSB2ZWMyKHZhbHVlc1swXSwgdmFsdWVzWzFdKSAqIHZlYzIodmFsdWVzWzJdLCB2YWx1ZXNbM10pO1xcbiAgICAgICAgcHJvZFZhbHVlICo9IHRtcFswXSAqIHRtcFsxXTtcXG4gICAgICB9IGVsc2Uge1xcbiAgICAgICAgbWluTWF4VmFsdWUgPSBcIitzK1wiKHZhbHVlcywgbWluTWF4VmFsdWUpO1xcbiAgICAgIH1cXG4gICAgXCIscD1cInZlYzRcIjtcImFsbFwiPT09ZT8oaT1cIjEuMFwiLGg9XCJcXG4gICAgICAgIGJvb2wgcmVkdWNlZEFsbFZhbHVlID0gYWxsKHZhbHVlcyk7XFxuICAgICAgICBmbG9hdCBmbG9hdGVkUmVkdWNlZEFsbFZhbHVlID0gZmxvYXQocmVkdWNlZEFsbFZhbHVlKTtcXG4gICAgICAgIGFsbFZhbHVlID0gZmxvYXQoYWxsVmFsdWUgPj0gMS4wICYmIGZsb2F0ZWRSZWR1Y2VkQWxsVmFsdWUgPj0gMS4wKTtcXG4gICAgICBcIixwPVwiYnZlYzRcIik6XCJhbnlcIj09PWUmJihpPVwiMC4wXCIsaD1cIlxcbiAgICAgICAgYm9vbCByZWR1Y2VkQW55VmFsdWUgPSBhbnkodmFsdWVzKTtcXG4gICAgICAgIGZsb2F0IGZsb2F0ZWRSZWR1Y2VkQW55VmFsdWUgPSBmbG9hdChyZWR1Y2VkQW55VmFsdWUpO1xcbiAgICAgICAgYW55VmFsdWUgPSBmbG9hdChhbnlWYWx1ZSA+PSAxLjAgfHwgZmxvYXRlZFJlZHVjZWRBbnlWYWx1ZSA+PSAxLjApO1xcbiAgICAgIFwiLHA9XCJidmVjNFwiKTt2YXIgZj1cIlwiO28lbj4wJiYoZj1cIlxcbiAgICAgICAgaWYgKGluSWR4IDwgMCB8fCBpbklkeCA+PSBcIitvK1wiKSB7XFxuICAgICAgICAgIHJldHVybiBpbml0aWFsaXphdGlvblZhbHVlO1xcbiAgICAgICAgfVxcbiAgICAgIFwiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgZmxvYXQgaW5pdGlhbGl6YXRpb25WYWx1ZSA9IFwiK2krXCI7XFxuICAgICAgY29uc3QgdmVjNCBvbmVzID0gdmVjNCgxLjAsIDEuMCwgMS4wLCAxLjApO1xcblxcbiAgICAgIGZsb2F0IGdldFZhbHVlKGludCBiYXRjaCwgaW50IGluSWR4KSB7XFxuICAgICAgICBcIitmK1wiXFxuICAgICAgICByZXR1cm4gZ2V0WChiYXRjaCwgaW5JZHgpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMiBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiYXRjaCA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBvdXRJZHggPSBjb29yZHNbMV07XFxuICAgICAgICBpbnQgaW5PZmZzZXQgPSBvdXRJZHggKiBcIituK1wiO1xcblxcbiAgICAgICAgdmVjNCBtaW5NYXhWYWx1ZSA9IHZlYzQoXCIraStcIik7XFxuICAgICAgICBmbG9hdCBwcm9kVmFsdWUgPSAxLjA7XFxuICAgICAgICBmbG9hdCBzdW1WYWx1ZSA9IDAuMDtcXG4gICAgICAgIGZsb2F0IGFsbFZhbHVlID0gMS4wO1xcbiAgICAgICAgZmxvYXQgYW55VmFsdWUgPSAwLjA7XFxuXFxuICAgICAgICBmb3IgKGludCBpID0gMDsgaSA8IFwiK2wrXCI7IGkgKz0gNCkge1xcbiAgICAgICAgICBpbnQgaW5JZHggPSBpbk9mZnNldCArIGk7XFxuICAgICAgICAgIFwiK3ArXCIgdmFsdWVzID0gXCIrcCtcIihcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHgpLFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCArIDEpLFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCArIDIpLFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCArIDMpXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2grXCJcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGludCBpbklkeCA9IGluT2Zmc2V0ICsgXCIrbCtcIjtcXG4gICAgICAgIGlmIChcIisoMT09PWMpK1wiKSB7XFxuICAgICAgICAgIFwiK3ArXCIgdmFsdWVzID0gXCIrcCtcIihcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHgpLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2grXCJcXG4gICAgICAgIH0gZWxzZSBpZiAoXCIrKDI9PT1jKStcIikge1xcbiAgICAgICAgICBcIitwK1wiIHZhbHVlcyA9IFwiK3ArXCIoXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4KSxcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHggKyAxKSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgXCIraCtcIlxcbiAgICAgICAgfSBlbHNlIGlmIChcIisoMz09PWMpK1wiKSB7XFxuICAgICAgICAgIFwiK3ArXCIgdmFsdWVzID0gXCIrcCtcIihcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHgpLFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCArIDEpLFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCArIDIpLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWVcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgXCIraCtcIlxcbiAgICAgICAgfVxcbiAgICAgICAgc2V0T3V0cHV0KFwiK3UrXCIpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLE5pPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy5vdXRwdXRTaGFwZT10O2Zvcih2YXIgbj1cIlwiLHI9MDtyPDQ7cisrKXt2YXIgbz1cInRoaXNSQyA9IHJjO1wiO3IlMj09MSYmKG8rPVwidGhpc1JDLnogKz0gMTtcIikscj4xJiYobys9XCJ0aGlzUkMueSArPSAxO1wiKSxuKz1cIlxcbiAgICAgICAgXCIrbytcIlxcbiAgICAgICAgXCIrKHI+MD9cImlmKHRoaXNSQy55IDwgcm93cyAmJiB0aGlzUkMueiA8IGNvbHMpe1wiOlwiXCIpK1wiXFxuICAgICAgICAgIGludCBmbGF0SW5kZXggPSBnZXRGbGF0SW5kZXgodGhpc1JDKTtcXG5cXG4gICAgICAgICAgaXZlYzMgaW5wdXRSQyA9IGlucHV0Q29vcmRzRnJvbVJlc2hhcGVkT3V0Q29vcmRzKGZsYXRJbmRleCk7XFxuICAgICAgICAgIHZlYzIgaW5wdXRSQ0lubmVyRGltcyA9IHZlYzIoZmxvYXQoaW5wdXRSQy55KSxmbG9hdChpbnB1dFJDLnopKTtcXG5cXG4gICAgICAgICAgcmVzdWx0W1wiK3IrXCJdID1cXG4gICAgICAgICAgICBnZXRDaGFubmVsKGdldEEoaW5wdXRSQy54LCBpbnB1dFJDLnksIGlucHV0UkMueiksIGlucHV0UkNJbm5lckRpbXMpO1xcbiAgICAgICAgXCIrKHI+MD9cIn1cIjpcIlwiKStcIlxcbiAgICAgIFwifXRoaXMudXNlckNvZGU9XCJcXG4gICAgICBcXG4gICAgaXZlYzMgaW5wdXRDb29yZHNGcm9tUmVzaGFwZWRPdXRDb29yZHMoaW50IGluZGV4KSB7XFxuICAgICAgXCIrQm8oW1wiclwiLFwiY1wiLFwiZFwiXSxlKStcIlxcbiAgICAgIHJldHVybiBpdmVjMyhyLCBjLCBkKTtcXG4gICAgfVxcbiAgXFxuICAgICAgXCIrUG8odCkrXCJcXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjMyByYyA9IGdldE91dHB1dENvb3JkcygpO1xcblxcbiAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG5cXG4gICAgICAgIGl2ZWMzIHRoaXNSQztcXG4gICAgICAgIGludCByb3dzID0gXCIrdFsxXStcIjtcXG4gICAgICAgIGludCBjb2xzID0gXCIrdFsyXStcIjtcXG5cXG4gICAgICAgIFwiK24rXCJcXG5cXG4gICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpO3ZhciBTaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbil7dGhpcy52YXJpYWJsZU5hbWVzPVtcImR5XCJdLHRoaXMub3V0cHV0U2hhcGU9W10sdGhpcy5vdXRwdXRTaGFwZT1lLnNoYXBlO3ZhciByPWUuc2hhcGUsbz1yWzFdLGE9clsyXSxpPXQuc2hhcGUscz1pWzFdLHU9aVsyXSxsPVtuJiZzPjE/by0xOm8sbiYmdT4xP2EtMTphXSxjPVtuJiZzPjE/cy0xOnMsbiYmdT4xP3UtMTp1XSxoPWxbMF0vY1swXSxwPWxbMV0vY1sxXSxmPTEvaCxkPTEvcCx2PTIqTWF0aC5jZWlsKGYpKzIsbT0yKk1hdGguY2VpbChkKSsyO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuICAgICAgICBpbnQgciA9IGNvb3Jkc1sxXTtcXG4gICAgICAgIGludCBjID0gY29vcmRzWzJdO1xcblxcbiAgICAgICAgZmxvYXQgYWNjdW11bGF0b3IgPSAwLjA7XFxuXFxuICAgICAgICBjb25zdCBmbG9hdCBoZWlnaHRTY2FsZSA9IGZsb2F0KFwiK2grXCIpO1xcbiAgICAgICAgY29uc3QgZmxvYXQgd2lkdGhTY2FsZSA9IGZsb2F0KFwiK3ArXCIpO1xcblxcbiAgICAgICAgY29uc3QgZmxvYXQgaW52SGVpZ2h0U2NhbGUgPSBmbG9hdChcIitmK1wiKTtcXG4gICAgICAgIGNvbnN0IGZsb2F0IGludldpZHRoU2NhbGUgPSBmbG9hdChcIitkK1wiKTtcXG5cXG4gICAgICAgIGNvbnN0IGludCB3aW5IZWlnaHQgPSBpbnQoXCIrditcIik7XFxuICAgICAgICBjb25zdCBpbnQgd2luV2lkdGggPSBpbnQoXCIrbStcIik7XFxuXFxuICAgICAgICAvLyBDb21wdXRlIGJvdW5kcyBmb3Igd2hlcmUgaW4gZHkgd2Ugd2lsbCBsb29rXFxuICAgICAgICBmbG9hdCBzdGFydFJMZXJwID0gZmxvb3IoZmxvYXQocikgKiBpbnZIZWlnaHRTY2FsZSk7XFxuICAgICAgICBpbnQgc3RhcnREeVIgPSBpbnQoc3RhcnRSTGVycCAtIGZsb2F0KHdpbkhlaWdodCAvIDIpKTtcXG5cXG4gICAgICAgIGZsb2F0IHN0YXJ0Q0xlcnAgPSBmbG9vcihmbG9hdChjKSAqIGludldpZHRoU2NhbGUpO1xcbiAgICAgICAgaW50IHN0YXJ0RHlDID0gaW50KHN0YXJ0Q0xlcnAgLSBmbG9hdCh3aW5XaWR0aCAvIDIpKTtcXG5cXG4gICAgICAgIC8vIExvb3Agb3ZlciBkeVxcbiAgICAgICAgZm9yIChpbnQgZHlST2Zmc2V0ID0gMDsgZHlST2Zmc2V0IDwgd2luSGVpZ2h0OyBkeVJPZmZzZXQrKykge1xcbiAgICAgICAgICBpbnQgZHlSID0gZHlST2Zmc2V0ICsgc3RhcnREeVI7XFxuXFxuICAgICAgICAgIC8vIEd1YXJkIGFnYWluc3QgdGhlIHdpbmRvdyBleGNlZWRpbmcgdGhlIGJvdW5kcyBvZiBkeVxcbiAgICAgICAgICBpZiAoZHlSIDwgMCB8fCBkeVIgPj0gXCIrcytcIikge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICB9XFxuXFxuICAgICAgICAgIGZvciAoaW50IGR5Q09mZnNldCA9IDA7IGR5Q09mZnNldCA8IHdpbldpZHRoOyBkeUNPZmZzZXQrKykge1xcbiAgICAgICAgICAgIGludCBkeUMgPSBkeUNPZmZzZXQgKyBzdGFydER5QztcXG5cXG4gICAgICAgICAgICAvLyBHdWFyZCBhZ2FpbnN0IHRoZSB3aW5kb3cgZXhjZWVkaW5nIHRoZSBib3VuZHMgb2YgZHlcXG4gICAgICAgICAgICBpZiAoZHlDIDwgMCB8fCBkeUMgPj0gXCIrdStcIikge1xcbiAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGZsb2F0IGR4UiA9IGZsb2F0KGR5UikgKiBoZWlnaHRTY2FsZTtcXG4gICAgICAgICAgICBpbnQgdG9wRHhSSW5kZXggPSBpbnQoZmxvb3IoZHhSKSk7XFxuICAgICAgICAgICAgaW50IGJvdHRvbUR4UkluZGV4ID0gaW50KG1pbihjZWlsKGR4UiksIFwiKyhvLTEpK1wiLjApKTtcXG4gICAgICAgICAgICBmbG9hdCBkeFJMZXJwID0gZHhSIC0gZmxvYXQodG9wRHhSSW5kZXgpO1xcbiAgICAgICAgICAgIGZsb2F0IGludmVyc2VEeFJMZXJwID0gMS4wIC0gZHhSTGVycDtcXG5cXG4gICAgICAgICAgICBmbG9hdCBkeEMgPSBmbG9hdChkeUMpICogd2lkdGhTY2FsZTtcXG4gICAgICAgICAgICBpbnQgbGVmdER4Q0luZGV4ID0gaW50KGZsb29yKGR4QykpO1xcbiAgICAgICAgICAgIGludCByaWdodER4Q0luZGV4ID0gaW50KG1pbihjZWlsKGR4QyksIFwiKyhhLTEpK1wiLjApKTtcXG4gICAgICAgICAgICBmbG9hdCBkeENMZXJwID0gZHhDIC0gZmxvYXQobGVmdER4Q0luZGV4KTtcXG4gICAgICAgICAgICBmbG9hdCBpbnZlcnNlRHhDTGVycCA9IDEuMCAtIGR4Q0xlcnA7XFxuXFxuICAgICAgICAgICAgaWYgKHIgPT0gdG9wRHhSSW5kZXggJiYgYyA9PSBsZWZ0RHhDSW5kZXgpIHtcXG4gICAgICAgICAgICAgIC8vIHRvcExlZnRcXG4gICAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9XFxuICAgICAgICAgICAgICAgIGdldER5KGIsIGR5UiwgZHlDLCBkKSAqIGludmVyc2VEeFJMZXJwICogaW52ZXJzZUR4Q0xlcnA7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIGlmIChyID09IHRvcER4UkluZGV4ICYmIGMgPT0gcmlnaHREeENJbmRleCkge1xcbiAgICAgICAgICAgICAgLy8gdG9wUmlnaHRcXG4gICAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IGdldER5KGIsIGR5UiwgZHlDLCBkKSAqIGludmVyc2VEeFJMZXJwICogZHhDTGVycDtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgaWYgKHIgPT0gYm90dG9tRHhSSW5kZXggJiYgYyA9PSBsZWZ0RHhDSW5kZXgpIHtcXG4gICAgICAgICAgICAgIC8vIGJvdHRvbUxlZnRcXG4gICAgICAgICAgICAgIGFjY3VtdWxhdG9yICs9IGdldER5KGIsIGR5UiwgZHlDLCBkKSAqIGR4UkxlcnAgKiBpbnZlcnNlRHhDTGVycDtcXG4gICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgaWYgKHIgPT0gYm90dG9tRHhSSW5kZXggJiYgYyA9PSByaWdodER4Q0luZGV4KSB7XFxuICAgICAgICAgICAgICAvLyBib3R0b21SaWdodFxcbiAgICAgICAgICAgICAgYWNjdW11bGF0b3IgKz0gZ2V0RHkoYiwgZHlSLCBkeUMsIGQpICogZHhSTGVycCAqIGR4Q0xlcnA7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICAvLyBFbmQgbG9vcCBvdmVyIGR5XFxuXFxuICAgICAgICBzZXRPdXRwdXQoYWNjdW11bGF0b3IpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLEFpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0cHV0U2hhcGU9W107dmFyIG89dFswXSxhPXRbMV0saT10WzJdLHM9dFszXTt0aGlzLm91dHB1dFNoYXBlPVtvLGUsbixzXTt2YXIgdT1bciYmZT4xP2EtMTphLHImJm4+MT9pLTE6aV0sbD1bciYmZT4xP2UtMTplLHImJm4+MT9uLTE6bl07dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IHZlYzIgZWZmZWN0aXZlSW5wdXRPdmVyT3V0cHV0UmF0aW9SQyA9IHZlYzIoXFxuICAgICAgICAgIFwiK3VbMF0vbFswXStcIixcXG4gICAgICAgICAgXCIrdVsxXS9sWzFdK1wiKTtcXG4gICAgICBjb25zdCB2ZWMyIGlucHV0U2hhcGVSQyA9IHZlYzIoXCIrYStcIi4wLCBcIitpK1wiLjApO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG4gICAgICAgIGl2ZWMyIHlSQyA9IGNvb3Jkcy55ejtcXG5cXG4gICAgICAgIC8vIEZyYWN0aW9uYWwgc291cmNlIGluZGV4LlxcbiAgICAgICAgdmVjMiBzb3VyY2VGcmFjSW5kZXhSQyA9IHZlYzIoeVJDKSAqIGVmZmVjdGl2ZUlucHV0T3Zlck91dHB1dFJhdGlvUkM7XFxuXFxuICAgICAgICAvLyBDb21wdXRlIHRoZSBmb3VyIGludGVnZXIgaW5kaWNlcy5cXG4gICAgICAgIGl2ZWMyIHNvdXJjZUZsb29yUkMgPSBpdmVjMihzb3VyY2VGcmFjSW5kZXhSQyk7XFxuICAgICAgICBpdmVjMiBzb3VyY2VDZWlsUkMgPSBpdmVjMihcXG4gICAgICAgICAgbWluKGlucHV0U2hhcGVSQyAtIDEuMCwgY2VpbChzb3VyY2VGcmFjSW5kZXhSQykpKTtcXG5cXG4gICAgICAgIGZsb2F0IHRvcExlZnQgPSBnZXRBKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlRmxvb3JSQy55LCBkKTtcXG4gICAgICAgIGZsb2F0IGJvdHRvbUxlZnQgPSBnZXRBKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VGbG9vclJDLnksIGQpO1xcbiAgICAgICAgZmxvYXQgdG9wUmlnaHQgPSBnZXRBKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlQ2VpbFJDLnksIGQpO1xcbiAgICAgICAgZmxvYXQgYm90dG9tUmlnaHQgPSBnZXRBKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VDZWlsUkMueSwgZCk7XFxuXFxuICAgICAgICB2ZWMyIGZyYWNSQyA9IHNvdXJjZUZyYWNJbmRleFJDIC0gdmVjMihzb3VyY2VGbG9vclJDKTtcXG5cXG4gICAgICAgIGZsb2F0IHRvcCA9IHRvcExlZnQgKyAodG9wUmlnaHQgLSB0b3BMZWZ0KSAqIGZyYWNSQy55O1xcbiAgICAgICAgZmxvYXQgYm90dG9tID0gYm90dG9tTGVmdCArIChib3R0b21SaWdodCAtIGJvdHRvbUxlZnQpICogZnJhY1JDLnk7XFxuICAgICAgICBmbG9hdCBuZXdWYWx1ZSA9IHRvcCArIChib3R0b20gLSB0b3ApICogZnJhY1JDLng7XFxuXFxuICAgICAgICBzZXRPdXRwdXQobmV3VmFsdWUpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLFRpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwLHRoaXMub3V0cHV0U2hhcGU9W107dmFyIG89dFswXSxhPXRbMV0saT10WzJdLHM9dFszXTt0aGlzLm91dHB1dFNoYXBlPVtvLGUsbixzXTt2YXIgdT1bciYmZT4xP2EtMTphLHImJm4+MT9pLTE6aV0sbD1bciYmZT4xP2UtMTplLHImJm4+MT9uLTE6bl07dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIGNvbnN0IHZlYzMgZWZmZWN0aXZlSW5wdXRPdmVyT3V0cHV0UmF0aW9SQyA9IHZlYzMoXFxuICAgICAgICAgIFwiK3VbMF0vbFswXStcIixcXG4gICAgICAgICAgXCIrdVsxXS9sWzFdK1wiLFxcbiAgICAgICAgICBcIit1WzFdL2xbMV0rXCIpO1xcbiAgICAgIGNvbnN0IHZlYzMgaW5wdXRTaGFwZVJDID0gdmVjMyhcIithK1wiLjAsIFwiK2krXCIuMCxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCIraStcIi4wKTtcXG5cXG4gICAgICBmbG9hdCBnZXRBVmFsdWUoaW50IGIsIGludCByLCBpbnQgYywgaW50IGQpIHtcXG4gICAgICAgIHJldHVybiBnZXRDaGFubmVsKGdldEEoYiwgciwgYywgZCksIHZlYzIoYywgZCkpO1xcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBpdmVjNCBjb29yZHMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgIGludCBiID0gY29vcmRzWzBdO1xcbiAgICAgICAgaW50IGQgPSBjb29yZHNbM107XFxuICAgICAgICAvLyBDYWxjdWxhdGUgdmFsdWVzIGZvciBuZXh0IGNvbHVtbiBpbiB5UkMuei5cXG4gICAgICAgIGl2ZWMzIHlSQyA9IGNvb3Jkcy55enogKyBpdmVjMygwLCAwLCAxKTtcXG5cXG4gICAgICAgIC8vIEZyYWN0aW9uYWwgc291cmNlIGluZGV4LlxcbiAgICAgICAgdmVjMyBzb3VyY2VGcmFjSW5kZXhSQyA9IHZlYzMoeVJDKSAqIGVmZmVjdGl2ZUlucHV0T3Zlck91dHB1dFJhdGlvUkM7XFxuXFxuICAgICAgICAvLyBDb21wdXRlIHRoZSBmb3VyIGludGVnZXIgaW5kaWNlcy5cXG4gICAgICAgIGl2ZWMzIHNvdXJjZUZsb29yUkMgPSBpdmVjMyhzb3VyY2VGcmFjSW5kZXhSQyk7XFxuICAgICAgICBpdmVjMyBzb3VyY2VDZWlsUkMgPSBpdmVjMyhcXG4gICAgICAgICAgbWluKGlucHV0U2hhcGVSQyAtIDEuMCwgY2VpbChzb3VyY2VGcmFjSW5kZXhSQykpKTtcXG4gICAgICAgIFxcbiAgICAgICAgLy8gU2hvdWxkIHdlIGNhbGN1bGF0ZSBuZXh0IGNvbHVtbiBhbmQgcm93IGVsZW1lbnRzIGluIDJ4MiBwYWNrZWQgY2VsbC5cXG4gICAgICAgIGJvb2wgaGFzTmV4dENvbCA9IGQgPCBcIisocy0xKStcIjsgXFxuICAgICAgICBib29sIGhhc05leHRSb3cgPSBjb29yZHMueiA8IFwiKyhuLTEpK1wiO1xcblxcbiAgICAgICAgLy8gSW4gcGFyYWxsZWwsIGNvbnN0cnVjdCBmb3VyIGNvcm5lcnMgZm9yIGFsbCBmb3VyIGNvbXBvbmVudHMgaW5cXG4gICAgICAgIC8vIHBhY2tlZCAyeDIgY2VsbC5cXG4gICAgICAgIHZlYzQgdG9wTGVmdCA9IHZlYzQoXFxuICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUZsb29yUkMueSwgZCksXFxuICAgICAgICAgIGhhc05leHRDb2wgPyBnZXRBVmFsdWUoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VGbG9vclJDLnksIGQgKyAxKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICBoYXNOZXh0Um93ID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlRmxvb3JSQy56LCBkKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICAoaGFzTmV4dFJvdyAmJiBoYXNOZXh0Q29sKSA/XFxuICAgICAgICAgICAgZ2V0QVZhbHVlKGIsIHNvdXJjZUZsb29yUkMueCwgc291cmNlRmxvb3JSQy56LCBkICsgMSkgOiAwLjApO1xcblxcbiAgICAgICAgdmVjNCBib3R0b21MZWZ0ID0gdmVjNChcXG4gICAgICAgICAgZ2V0QVZhbHVlKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VGbG9vclJDLnksIGQpLFxcbiAgICAgICAgICBoYXNOZXh0Q29sID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VGbG9vclJDLnksIGQgKyAxKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICBoYXNOZXh0Um93ID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VGbG9vclJDLnosIGQpXFxuICAgICAgICAgICAgICAgICAgICAgOiAwLjAsXFxuICAgICAgICAgIChoYXNOZXh0Um93ICYmIGhhc05leHRDb2wpID9cXG4gICAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUZsb29yUkMueiwgZCArIDEpIDogMC4wKTtcXG5cXG4gICAgICAgIHZlYzQgdG9wUmlnaHQgPSB2ZWM0KFxcbiAgICAgICAgICBnZXRBVmFsdWUoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VDZWlsUkMueSwgZCksXFxuICAgICAgICAgIGhhc05leHRDb2wgPyBnZXRBVmFsdWUoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VDZWlsUkMueSwgZCArIDEpXFxuICAgICAgICAgICAgICAgICAgICAgOiAwLjAsXFxuICAgICAgICAgIGhhc05leHRSb3cgPyBnZXRBVmFsdWUoYiwgc291cmNlRmxvb3JSQy54LCBzb3VyY2VDZWlsUkMueiwgZClcXG4gICAgICAgICAgICAgICAgICAgICA6IDAuMCxcXG4gICAgICAgICAgKGhhc05leHRSb3cgJiYgaGFzTmV4dENvbCkgP1xcbiAgICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VGbG9vclJDLngsIHNvdXJjZUNlaWxSQy56LCBkICsgMSkgOiAwLjApO1xcblxcbiAgICAgICAgdmVjNCBib3R0b21SaWdodCA9IHZlYzQoXFxuICAgICAgICAgIGdldEFWYWx1ZShiLCBzb3VyY2VDZWlsUkMueCwgc291cmNlQ2VpbFJDLnksIGQpLFxcbiAgICAgICAgICBoYXNOZXh0Q29sID8gZ2V0QVZhbHVlKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VDZWlsUkMueSwgZCArIDEpXFxuICAgICAgICAgICAgICAgICAgICAgOiAwLjAsXFxuICAgICAgICAgIGhhc05leHRSb3cgPyBnZXRBVmFsdWUoYiwgc291cmNlQ2VpbFJDLngsIHNvdXJjZUNlaWxSQy56LCBkKVxcbiAgICAgICAgICAgICAgICAgICAgIDogMC4wLFxcbiAgICAgICAgICAoaGFzTmV4dFJvdyAmJiBoYXNOZXh0Q29sKSA/XFxuICAgICAgICAgICAgZ2V0QVZhbHVlKGIsIHNvdXJjZUNlaWxSQy54LCBzb3VyY2VDZWlsUkMueiwgZCArIDEpIDogMC4wKTtcXG5cXG4gICAgICAgIHZlYzMgZnJhY1JDID0gc291cmNlRnJhY0luZGV4UkMgLSB2ZWMzKHNvdXJjZUZsb29yUkMpO1xcblxcbiAgICAgICAgdmVjNCB0b3AgPSBtaXgodG9wTGVmdCwgdG9wUmlnaHQsIGZyYWNSQy55eXp6KTtcXG4gICAgICAgIHZlYzQgYm90dG9tID0gbWl4KGJvdHRvbUxlZnQsIGJvdHRvbVJpZ2h0LCBmcmFjUkMueXl6eik7XFxuICAgICAgICB2ZWM0IG5ld1ZhbHVlID0gbWl4KHRvcCwgYm90dG9tLCBmcmFjUkMueCk7XFxuXFxuICAgICAgICBzZXRPdXRwdXQobmV3VmFsdWUpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLERpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiZHlcIl0sdGhpcy5vdXRwdXRTaGFwZT1bXSx0aGlzLm91dHB1dFNoYXBlPWUuc2hhcGU7dmFyIHI9ZS5zaGFwZSxvPXJbMV0sYT1yWzJdLGk9dC5zaGFwZSxzPWlbMV0sdT1pWzJdLGw9W24mJnM+MT9vLTE6byxuJiZ1PjE/YS0xOmFdLGM9W24mJnM+MT9zLTE6cyxuJiZ1PjE/dS0xOnVdLGg9bFswXS9jWzBdLHA9bFsxXS9jWzFdLGY9MS9oLGQ9MS9wLHY9MipNYXRoLmNlaWwoZikrMixtPTIqTWF0aC5jZWlsKGQpKzI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIGl2ZWM0IGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgaW50IGIgPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgZCA9IGNvb3Jkc1szXTtcXG4gICAgICAgIGludCByID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGMgPSBjb29yZHNbMl07XFxuXFxuICAgICAgICBmbG9hdCBhY2N1bXVsYXRvciA9IDAuMDtcXG5cXG4gICAgICAgIGNvbnN0IGZsb2F0IGhlaWdodFNjYWxlID0gZmxvYXQoXCIraCtcIik7XFxuICAgICAgICBjb25zdCBmbG9hdCB3aWR0aFNjYWxlID0gZmxvYXQoXCIrcCtcIik7XFxuXFxuICAgICAgICBjb25zdCBmbG9hdCBpbnZIZWlnaHRTY2FsZSA9IGZsb2F0KFwiK2YrXCIpO1xcbiAgICAgICAgY29uc3QgZmxvYXQgaW52V2lkdGhTY2FsZSA9IGZsb2F0KFwiK2QrXCIpO1xcblxcbiAgICAgICAgY29uc3QgaW50IHdpbkhlaWdodCA9IGludChcIit2K1wiKTtcXG4gICAgICAgIGNvbnN0IGludCB3aW5XaWR0aCA9IGludChcIittK1wiKTtcXG5cXG4gICAgICAgIC8vIENvbXB1dGUgYm91bmRzIGZvciB3aGVyZSBpbiBkeSB3ZSB3aWxsIGxvb2tcXG4gICAgICAgIGZsb2F0IHN0YXJ0UkxlcnAgPSBmbG9vcihmbG9hdChyKSAqIGludkhlaWdodFNjYWxlKTtcXG4gICAgICAgIGludCBzdGFydER5UiA9IGludChmbG9vcihzdGFydFJMZXJwIC0gZmxvYXQod2luSGVpZ2h0IC8gMikpKTtcXG5cXG4gICAgICAgIGZsb2F0IHN0YXJ0Q0xlcnAgPSBmbG9vcihmbG9hdChjKSAqIGludldpZHRoU2NhbGUpO1xcbiAgICAgICAgaW50IHN0YXJ0RHlDID0gaW50KGZsb29yKHN0YXJ0Q0xlcnAgLSBmbG9hdCh3aW5XaWR0aCAvIDIpKSk7XFxuXFxuICAgICAgICAvLyBMb29wIG92ZXIgZHlcXG4gICAgICAgIGZvciAoaW50IGR5Uk9mZnNldCA9IDA7IGR5Uk9mZnNldCA8IHdpbkhlaWdodDsgZHlST2Zmc2V0KyspIHtcXG4gICAgICAgICAgaW50IGR5UiA9IGR5Uk9mZnNldCArIHN0YXJ0RHlSO1xcblxcbiAgICAgICAgICAvLyBHdWFyZCBhZ2FpbnN0IHRoZSB3aW5kb3cgZXhjZWVkaW5nIHRoZSBib3VuZHMgb2YgZHlcXG4gICAgICAgICAgaWYgKGR5UiA8IDAgfHwgZHlSID49IFwiK3MrXCIpIHtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgfVxcblxcbiAgICAgICAgICBmb3IgKGludCBkeUNPZmZzZXQgPSAwOyBkeUNPZmZzZXQgPCB3aW5XaWR0aDsgZHlDT2Zmc2V0KyspIHtcXG4gICAgICAgICAgICBpbnQgZHlDID0gZHlDT2Zmc2V0ICsgc3RhcnREeUM7XFxuXFxuICAgICAgICAgICAgLy8gR3VhcmQgYWdhaW5zdCB0aGUgd2luZG93IGV4Y2VlZGluZyB0aGUgYm91bmRzIG9mIGR5XFxuICAgICAgICAgICAgaWYgKGR5QyA8IDAgfHwgZHlDID49IFwiK3UrXCIpIHtcXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmbG9hdCBzb3VyY2VGcmFjUm93ID1cXG4gICAgICAgICAgICAgIGZsb2F0KFwiK2xbMF0rXCIpICpcXG4gICAgICAgICAgICAgICAgKGZsb2F0KGR5UikgLyBmbG9hdChcIitjWzBdK1wiKSk7XFxuXFxuICAgICAgICAgICAgZmxvYXQgc291cmNlRnJhY0NvbCA9XFxuICAgICAgICAgICAgICAgIGZsb2F0KFwiK2xbMV0rXCIpICpcXG4gICAgICAgICAgICAgICAgICAoZmxvYXQoZHlDKSAvIGZsb2F0KFwiK2NbMV0rXCIpKTtcXG5cXG4gICAgICAgICAgICBpbnQgc291cmNlTmVhcmVzdFJvdyA9IGludChtaW4oXFxuICAgICAgICAgICAgICAgIGZsb2F0KGludChcIitvK1wiKSAtIDEpLFxcbiAgICAgICAgICAgICAgICBcIituK1wiID8gZmxvYXQocm91bmQoc291cmNlRnJhY1JvdykpIDpcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxvYXQoZmxvb3Ioc291cmNlRnJhY1JvdykpKSk7XFxuXFxuICAgICAgICAgICAgaW50IHNvdXJjZU5lYXJlc3RDb2wgPSBpbnQobWluKFxcbiAgICAgICAgICAgICAgICBmbG9hdChpbnQoXCIrYStcIikgLSAxKSxcXG4gICAgICAgICAgICAgICAgXCIrbitcIiA/IGZsb2F0KHJvdW5kKHNvdXJjZUZyYWNDb2wpKSA6XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsb2F0KGZsb29yKHNvdXJjZUZyYWNDb2wpKSkpO1xcblxcbiAgICAgICAgICAgIGlmIChyID09IHNvdXJjZU5lYXJlc3RSb3cgJiYgYyA9PSBzb3VyY2VOZWFyZXN0Q29sKSB7XFxuICAgICAgICAgICAgICBhY2N1bXVsYXRvciArPSBnZXREeShiLCBkeVIsIGR5QywgZCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICAvLyBFbmQgbG9vcCBvdmVyIGR5XFxuXFxuICAgICAgICBzZXRPdXRwdXQoYWNjdW11bGF0b3IpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLF9pPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0cHV0U2hhcGU9W107dmFyIG89dFswXSxhPXRbMV0saT10WzJdLHM9dFszXTt0aGlzLm91dHB1dFNoYXBlPVtvLGUsbixzXTt2YXIgdT1bciYmZT4xP2EtMTphLHImJm4+MT9pLTE6aV0sbD1bciYmZT4xP2UtMTplLHImJm4+MT9uLTE6bl0sYz1yP1wiMC41XCI6XCIwLjBcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgdmVjMiBlZmZlY3RpdmVJbnB1dE92ZXJPdXRwdXRSYXRpb1JDID0gdmVjMihcXG4gICAgICAgICAgXCIrdVswXS9sWzBdK1wiLFxcbiAgICAgICAgICBcIit1WzFdL2xbMV0rXCIpO1xcbiAgICAgIGNvbnN0IHZlYzIgaW5wdXRTaGFwZVJDID0gdmVjMihcIithK1wiLjAsIFwiK2krXCIuMCk7XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzQgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYiA9IGNvb3Jkc1swXTtcXG4gICAgICAgIGludCBkID0gY29vcmRzWzNdO1xcbiAgICAgICAgaXZlYzIgeVJDID0gY29vcmRzLnl6O1xcblxcbiAgICAgICAgLy8gRnJhY3Rpb25hbCBzb3VyY2UgaW5kZXguXFxuICAgICAgICB2ZWMyIHNvdXJjZUZyYWNJbmRleFJDID0gdmVjMih5UkMpICogZWZmZWN0aXZlSW5wdXRPdmVyT3V0cHV0UmF0aW9SQztcXG5cXG4gICAgICAgIC8vIENvbXB1dGUgdGhlIGNvb3JkaW5hdG9ycyBvZiBuZWFyZXN0IG5laWdoYm9yIHBvaW50LlxcbiAgICAgICAgaXZlYzIgc291cmNlTmVhcmVzdFJDID0gaXZlYzIoXFxuICAgICAgICAgIG1pbihpbnB1dFNoYXBlUkMgLSAxLjAsIGZsb29yKHNvdXJjZUZyYWNJbmRleFJDICsgXCIrYytcIikpKTtcXG5cXG4gICAgICAgIGZsb2F0IG5ld1ZhbHVlID0gZ2V0QShiLCBzb3VyY2VOZWFyZXN0UkMueCwgc291cmNlTmVhcmVzdFJDLnksIGQpO1xcblxcbiAgICAgICAgc2V0T3V0cHV0KG5ld1ZhbHVlKTtcXG4gICAgICB9XFxuICAgIFwifX0oKSxPaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdO3ZhciBuPXQubGVuZ3RoO2lmKG4+NCl0aHJvdyBuZXcgRXJyb3IoXCJXZWJHTCBiYWNrZW5kOiBSZXZlcnNlIG9mIHJhbmstXCIrbitcIiB0ZW5zb3IgaXMgbm90IHlldCBzdXBwb3J0ZWRcIik7aWYodGhpcy5vdXRwdXRTaGFwZT10LDEhPT1uKXt2YXIgcj10Lm1hcChmdW5jdGlvbihuLHIpe3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4tMSE9PWUuaW5kZXhPZihuKSYmMSE9PXRbbl0/dFtuXStcIiAtIGNvb3Jkc1tcIituK1wiXSAtIDFcIjpcImNvb3Jkc1tcIituK1wiXVwifShyKX0pLmpvaW4oXCIsXCIpLG89am8obik7dGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK28rXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQoZ2V0WChcIityK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn1lbHNlIHRoaXMudXNlckNvZGU9XCJcXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgaW50IGNvb3JkID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICAgIHNldE91dHB1dChnZXRYKFwiK3RbMF0rXCIgLSBjb29yZCAtIDEpKTtcXG4gICAgICAgIH1cXG4gICAgICBcIn19KCksRmk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wieFwiXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMDt2YXIgbj10Lmxlbmd0aDtpZihuPjQpdGhyb3cgbmV3IEVycm9yKFwiV2ViR0wgYmFja2VuZDogUmV2ZXJzZSBvZiByYW5rLVwiK24rXCIgdGVuc29yIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpO3RoaXMub3V0cHV0U2hhcGU9dDt2YXIgcj1GbyhcInJjXCIsbiksbz1yW24tMV0rXCIgKyAxIDwgXCIrdGhpcy5vdXRwdXRTaGFwZVtuLTFdLGE9cltuLTJdK1wiICsgMSA8IFwiK3RoaXMub3V0cHV0U2hhcGVbbi0yXSxpPWpvKG4pO2Z1bmN0aW9uIHMobil7dmFyIHI9dC5tYXAoZnVuY3Rpb24ocixvKXtyZXR1cm4gZnVuY3Rpb24obixyKXtyZXR1cm4tMSE9PWUuaW5kZXhPZihuKSYmMSE9PXRbbl0/dFtuXStcIiAtIFwiK3Jbbl0rXCIgLSAxXCI6XCJcIityW25dfShvLG4pfSk7cmV0dXJuXCJnZXRDaGFubmVsKGdldFgoXCIrci5qb2luKFwiLFwiKStcIiksIHZlYzIoXCIrci5zbGljZSgtMikuam9pbihcIixcIikrXCIpKVwifXRoaXMudXNlckNvZGU9MT09PW4/XCJcXG4gICAgICAgIHZvaWQgbWFpbigpe1xcbiAgICAgICAgICBpbnQgcmMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICAgICAgdmVjNCByZXN1bHQgPSB2ZWM0KDAuKTtcXG4gICAgICAgICAgcmVzdWx0LnIgPSBnZXRDaGFubmVsKGdldFgoXCIrdFswXStcIiAtIHJjIC0gMSksXFxuICAgICAgICAgICAgXCIrdFswXStcIiAtIHJjIC0gMSk7XFxuICAgICAgICAgIGlmKFwiK28rXCIpe1xcbiAgICAgICAgICAgICAgcmVzdWx0LmcgPSBnZXRDaGFubmVsKGdldFgoXCIrdFswXStcIiAtIChyYyAgKyAxKSAtIDEpLFxcbiAgICAgICAgICAgICAgICBcIit0WzBdK1wiIC0gKHJjICArIDEpIC0gMSk7XFxuICAgICAgICAgIH1cXG4gICAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgICB9XFxuICAgICAgXCI6XCJcXG4gICAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgICAgXCIraStcIiByYyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcbiAgICAgICAgICByZXN1bHQuciA9IFwiK2Z1bmN0aW9uKHQpe3JldHVybiBzKHQpfShyLnNsaWNlKCkpK1wiO1xcbiAgICAgICAgICBpZihcIitvK1wiKXtcXG4gICAgICAgICAgICByZXN1bHQuZyA9IFwiK2Z1bmN0aW9uKHQpe3JldHVybiB0W24tMV09XCIoXCIrdFtuLTFdK1wiICsgMSlcIixzKHQpfShyLnNsaWNlKCkpK1wiO1xcbiAgICAgICAgICB9XFxuICAgICAgICAgIGlmKFwiK2ErXCIpIHtcXG4gICAgICAgICAgICByZXN1bHQuYiA9IFwiK2Z1bmN0aW9uKHQpe3JldHVybiB0W24tMl09XCIoXCIrdFtuLTJdK1wiICsgMSlcIixzKHQpfShyLnNsaWNlKCkpK1wiO1xcbiAgICAgICAgICAgIGlmKFwiK28rXCIpIHtcXG4gICAgICAgICAgICAgIHJlc3VsdC5hID0gXCIrZnVuY3Rpb24odCl7cmV0dXJuIHRbbi0xXT1cIihcIit0W24tMV0rXCIgKyAxKVwiLHRbbi0yXT1cIihcIit0W24tMl0rXCIgKyAxKVwiLHModCl9KHIuc2xpY2UoKSkrXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICAgIHNldE91dHB1dChyZXN1bHQpO1xcbiAgICAgICAgfVxcbiAgICBcIn19KCksTWk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09aSYmKGk9ITApLHRoaXMudmFyaWFibGVOYW1lcz1bXCJ1cGRhdGVzXCIsXCJpbmRpY2VzXCIsXCJkZWZhdWx0VmFsdWVcIl0sdGhpcy5vdXRwdXRTaGFwZT1hO3ZhciBzPWpvKG8ubGVuZ3RoKSx1PWpvKGEubGVuZ3RoKSxsPVwiXCI7MT09PW4/bD1cImlcIjoyPT09biYmKGw9XCJpLCBqXCIpO3ZhciBjPVwiZ2V0SW5kaWNlcyhcIitsK1wiKVwiLGg9XCJcIjsxPT09cj9oPVwiaVwiOjI9PT1yJiYoaD1cImksIGNvb3Jkc1sxXVwiKTt2YXIgcD1cImdldFVwZGF0ZXMoXCIraCtcIilcIixmPWU+MT9cInN0cmlkZXNbal1cIjpcInN0cmlkZXNcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgICBcIitzK1wiIHN0cmlkZXMgPSBcIitzK1wiKFwiK28rXCIpO1xcblxcbiAgICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgICBcIit1K1wiIGNvb3JkcyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgICBmbG9hdCBzdW0gPSAwLjA7XFxuICAgICAgICAgIGJvb2wgZm91bmQgPSBmYWxzZTtcXG4gICAgICAgICAgZm9yIChpbnQgaSA9IDA7IGkgPCBcIit0K1wiOyBpKyspIHtcXG4gICAgICAgICAgICBpbnQgZmxhdHRlbmVkSW5kZXggPSAwO1xcbiAgICAgICAgICAgIGZvciAoaW50IGogPSAwOyBqIDwgXCIrZStcIjsgaisrKSB7XFxuICAgICAgICAgICAgICBpbnQgaW5kZXggPSByb3VuZChcIitjK1wiKTtcXG4gICAgICAgICAgICAgIGZsYXR0ZW5lZEluZGV4ICs9IGluZGV4ICogXCIrZitcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKGZsYXR0ZW5lZEluZGV4ID09IGNvb3Jkc1swXSkge1xcbiAgICAgICAgICAgICAgc3VtICs9IFwiK3ArXCI7XFxuICAgICAgICAgICAgICBmb3VuZCA9IHRydWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICB9XFxuICAgICAgICAgIHNldE91dHB1dChtaXgoZ2V0RGVmYXVsdFZhbHVlKCksIHN1bSwgZmxvYXQoZm91bmQpKSk7XFxuICAgICAgICB9XFxuICAgICAgXCJ9fSgpLEJpPWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInhcIixcInNlZ21lbnRJZHNcIl07dmFyIG49dC53aW5kb3dTaXplLHI9dC5iYXRjaFNpemUsbz10LmluU2l6ZSxhPXQubnVtU2VnbWVudHMsaT1hKk1hdGguY2VpbChvL24pO3RoaXMub3V0cHV0U2hhcGU9W3IsaV07dmFyIHM9NCpNYXRoLmZsb29yKG4vNCksdT1uJTQsbD1cIlxcbiAgICAgICAgc3VtVmFsdWUgKz0gZG90KHZhbHVlcywgc2VnRmlsdGVyKTtcXG4gICAgXCIsYz1cIlwiO28lbj4wJiYoYz1cIlxcbiAgICAgICAgaWYgKGluSWR4IDwgMCB8fCBpbklkeCA+PSBcIitvK1wiKSB7XFxuICAgICAgICAgIHJldHVybiBpbml0aWFsaXphdGlvblZhbHVlO1xcbiAgICAgICAgfVxcbiAgICAgIFwiKTt2YXIgaD1cIlwiO28lbj4wJiYoaD1cIlxcbiAgICAgICAgaWYgKGluSWR4IDwgMCB8fCBpbklkeCA+PSBcIitvK1wiKSB7XFxuICAgICAgICAgIHJldHVybiAtMS4wO1xcbiAgICAgICAgfVxcbiAgICAgIFwiKSx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgY29uc3QgZmxvYXQgaW5pdGlhbGl6YXRpb25WYWx1ZSA9IDAuMDtcXG5cXG4gICAgICBmbG9hdCBnZXRWYWx1ZShpbnQgYmF0Y2gsIGludCBpbklkeCkge1xcbiAgICAgICAgXCIrYytcIlxcbiAgICAgICAgcmV0dXJuIGdldFgoYmF0Y2gsIGluSWR4KTtcXG4gICAgICB9XFxuXFxuICAgICAgZmxvYXQgZ2V0U2VnbWVudElkQXRJbmRleChpbnQgaW5JZHgpIHtcXG4gICAgICAgIFwiK2grXCJcXG4gICAgICAgIHJldHVybiBnZXRTZWdtZW50SWRzKGluSWR4KTtcXG4gICAgICB9XFxuXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgaXZlYzIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBpbnQgYmF0Y2ggPSBjb29yZHNbMF07XFxuICAgICAgICBpbnQgb3V0SWR4ID0gY29vcmRzWzFdO1xcbiAgICAgICAgaW50IGluT2Zmc2V0ID0gaW50KGZsb29yKGZsb2F0KG91dElkeCkgLyBmbG9hdChcXG4gICAgICAgICAgXCIrYStcIikpICogZmxvYXQoXCIrbitcIikpO1xcbiAgICAgICAgaW50IGN1cnJlbnRTZWcgPSBpbnQobW9kKGZsb2F0KG91dElkeCksIGZsb2F0KFwiK2ErXCIpKSk7XFxuXFxuICAgICAgICBmbG9hdCBzdW1WYWx1ZSA9IDAuMDtcXG5cXG4gICAgICAgIGZvciAoaW50IGkgPSAwOyBpIDwgXCIrcytcIjsgaSArPSA0KSB7XFxuICAgICAgICAgIGludCBpbklkeCA9IGluT2Zmc2V0ICsgaTtcXG4gICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMSksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMiksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMylcXG4gICAgICAgICAgKTtcXG5cXG4gICAgICAgICAgdmVjNCBzZWdGaWx0ZXIgPSB2ZWM0KFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4KSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4ICsgMSkpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCArIDIpKSA9PSBjdXJyZW50U2VnID8gMSA6IDAsXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHggKyAzKSkgPT0gY3VycmVudFNlZyA/IDEgOiAwXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2wrXCJcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGludCBpbklkeCA9IGluT2Zmc2V0ICsgXCIrcytcIjtcXG4gICAgICAgIGlmIChcIisoMT09PXUpK1wiKSB7XFxuICAgICAgICAgIHZlYzQgdmFsdWVzID0gdmVjNChcXG4gICAgICAgICAgICBnZXRWYWx1ZShiYXRjaCwgaW5JZHgpLFxcbiAgICAgICAgICAgIGluaXRpYWxpemF0aW9uVmFsdWUsXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIGludCBpbklkeFNlZyA9IGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4KSk7XFxuXFxuICAgICAgICAgIHZlYzQgc2VnRmlsdGVyID0gdmVjNChcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCkpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICAwLFxcbiAgICAgICAgICAgIDAsXFxuICAgICAgICAgICAgMFxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICBcIitsK1wiXFxuICAgICAgICB9IGVsc2UgaWYgKFwiKygyPT09dSkrXCIpIHtcXG4gICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMSksXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZSxcXG4gICAgICAgICAgICBpbml0aWFsaXphdGlvblZhbHVlXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIHZlYzQgc2VnRmlsdGVyID0gdmVjNChcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCkpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICBpbnQoZ2V0U2VnbWVudElkQXRJbmRleChpbklkeCArIDEpKSA9PSBjdXJyZW50U2VnID8gMSA6IDAsXFxuICAgICAgICAgICAgICAwLFxcbiAgICAgICAgICAgICAgMFxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICBcIitsK1wiXFxuICAgICAgICB9IGVsc2UgaWYgKFwiKygzPT09dSkrXCIpIHtcXG4gICAgICAgICAgdmVjNCB2YWx1ZXMgPSB2ZWM0KFxcbiAgICAgICAgICAgIGdldFZhbHVlKGJhdGNoLCBpbklkeCksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMSksXFxuICAgICAgICAgICAgZ2V0VmFsdWUoYmF0Y2gsIGluSWR4ICsgMiksXFxuICAgICAgICAgICAgaW5pdGlhbGl6YXRpb25WYWx1ZVxcbiAgICAgICAgICApO1xcblxcbiAgICAgICAgICB2ZWM0IHNlZ0ZpbHRlciA9IHZlYzQoXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHgpKSA9PSBjdXJyZW50U2VnID8gMSA6IDAsXFxuICAgICAgICAgICAgaW50KGdldFNlZ21lbnRJZEF0SW5kZXgoaW5JZHggKyAxKSkgPT0gY3VycmVudFNlZyA/IDEgOiAwLFxcbiAgICAgICAgICAgIGludChnZXRTZWdtZW50SWRBdEluZGV4KGluSWR4ICsgMikpID09IGN1cnJlbnRTZWcgPyAxIDogMCxcXG4gICAgICAgICAgICAwXFxuICAgICAgICAgICk7XFxuXFxuICAgICAgICAgIFwiK2wrXCJcXG4gICAgICAgIH1cXG4gICAgICAgIHNldE91dHB1dChzdW1WYWx1ZSk7XFxuICAgICAgfVxcbiAgICBcIn19KCksUGk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3ZhciByLG87aWYodGhpcy52YXJpYWJsZU5hbWVzPVtcImNcIixcImFcIixcImJcIl0sdGhpcy5vdXRwdXRTaGFwZT1lLG4+NCl0aHJvdyBFcnJvcihcIldoZXJlIGZvciByYW5rIFwiK24rXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIik7aWYoMT09PW4pbz1cInJlc1JDXCIscj1cInJlc1JDXCI7ZWxzZXtmb3IodmFyIGE9W1wicmVzUkMueFwiLFwicmVzUkMueVwiLFwicmVzUkMuelwiLFwicmVzUkMud1wiXSxpPVtdLHM9W10sdT0wO3U8ZS5sZW5ndGg7dSsrKXMucHVzaChcIlwiK2FbdV0pLHU8dCYmaS5wdXNoKFwiXCIrYVt1XSk7cj1pLmpvaW4oKSxvPXMuam9pbigpfXZhciBsPWpvKG4pO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitsK1wiIHJlc1JDID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCBjVmFsID0gZ2V0QyhcIityK1wiKTtcXG4gICAgICAgIGlmIChjVmFsID49IDEuMCkge1xcbiAgICAgICAgICBzZXRPdXRwdXQoZ2V0QShcIitvK1wiKSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICBzZXRPdXRwdXQoZ2V0QihcIitvK1wiKSk7XFxuICAgICAgICB9XFxuICAgICAgfVxcbiAgICBcIn19KCksTGk9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJzb3VyY2VcIl0sdGhpcy5vdXRwdXRTaGFwZT10LHRoaXMucmFuaz10Lmxlbmd0aDt2YXIgZSxuPWpvKHRoaXMucmFuaykscj1cInVuaWZvcm0gaW50IHN0YXJ0W1wiK3RoaXMucmFuaytcIl07XCIsbz1mdW5jdGlvbih0KXtpZigxPT09dClyZXR1cm5cInNvdXJjZUxvY1wiO2lmKHQ8PTYpcmV0dXJuIFdpLnNsaWNlKDAsdCkubWFwKGZ1bmN0aW9uKHQpe3JldHVyblwic291cmNlTG9jLlwiK3R9KS5qb2luKFwiLFwiKTt0aHJvdyBFcnJvcihcIlNsaWNpbmcgZm9yIHJhbmsgXCIrdCtcIiBpcyBub3QgeWV0IHN1cHBvcnRlZFwiKX0odGhpcy5yYW5rKTtlPVwiXFxuICAgICAgICBcIituK1wiIHNvdXJjZUxvYztcXG4gICAgICAgIFwiK24rXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBcIit0Lm1hcChmdW5jdGlvbih0LGUpe3JldHVyblwic291cmNlTG9jLlwiK1dpW2VdK1wiID0gc3RhcnRbXCIrZStcIl0gKyBjb29yZHMuXCIrV2lbZV0rXCI7XCJ9KS5qb2luKFwiXFxuXCIpK1wiXFxuICAgICAgXCIsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIFwiK3IrXCJcXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBcIitlK1wiXFxuICAgICAgICBzZXRPdXRwdXQoZ2V0U291cmNlKFwiK28rXCIpKTtcXG4gICAgICB9XFxuICAgIFwifXJldHVybiB0LnByb3RvdHlwZS5nZXRDdXN0b21TZXR1cEZ1bmM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcztpZih0Lmxlbmd0aCE9PXRoaXMucmFuayl0aHJvdyBFcnJvcihcIlRoZSByYW5rIChcIit0aGlzLnJhbmsrXCIpIG9mIHRoZSBwcm9ncmFtIG11c3QgbWF0Y2ggdGhlIGxlbmd0aCBvZiBzdGFydCAoXCIrdC5sZW5ndGgrXCIpXCIpO3JldHVybiBmdW5jdGlvbihuLHIpe251bGw9PWUuc3RhcnRMb2MmJihlLnN0YXJ0TG9jPW4uZ2V0VW5pZm9ybUxvY2F0aW9uTm9UaHJvdyhyLFwic3RhcnRcIiksbnVsbD09ZS5zdGFydExvYyl8fG4uZ2wudW5pZm9ybTFpdihlLnN0YXJ0TG9jLHQpfX0sdH0oKSxXaT1bXCJ4XCIsXCJ5XCIsXCJ6XCIsXCJ3XCIsXCJ1XCIsXCJ2XCJdO3ZhciBVaT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcInNvdXJjZVwiXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMCx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy5yYW5rPXQubGVuZ3RoO3ZhciBlPWpvKHRoaXMucmFuayksbj1GbyhcImNvb3Jkc1wiLHRoaXMucmFuaykscj1GbyhcInNvdXJjZUxvY1wiLHRoaXMucmFuayksbz0xPT09dGhpcy5yYW5rP1wic291cmNlTG9jXCI6XCJ2ZWMyKFwiK3Iuc2xpY2UoLTIpLmpvaW4oKStcIilcIixhPVwiZ2V0Q2hhbm5lbChnZXRTb3VyY2UoXCIrci5qb2luKCkrXCIpLCBcIitvK1wiKVwiLGk9XCJcXG4gICAgICByZXN1bHQueCA9IFwiK2ErXCI7XFxuICAgICAgaWYgKCsrXCIrblt0aGlzLnJhbmstMV0rXCIgPCBcIit0W3RoaXMucmFuay0xXStcIikge1xcbiAgICAgICAgKytcIityW3RoaXMucmFuay0xXStcIjtcXG4gICAgICAgIHJlc3VsdC55ID0gXCIrYStcIjtcXG4gICAgICAgIC0tXCIrclt0aGlzLnJhbmstMV0rXCI7XFxuICAgICAgfVxcbiAgICBcIixzPTE9PT10aGlzLnJhbms/XCJcIjpcIlxcbiAgICAgIC0tXCIrblt0aGlzLnJhbmstMV0rXCI7XFxuICAgICAgaWYgKCsrXCIrblt0aGlzLnJhbmstMl0rXCIgPCBcIit0W3RoaXMucmFuay0yXStcIikge1xcbiAgICAgICAgKytcIityW3RoaXMucmFuay0yXStcIjtcXG4gICAgICAgIHJlc3VsdC56ID0gXCIrYStcIjtcXG4gICAgICAgIGlmICgrK1wiK25bdGhpcy5yYW5rLTFdK1wiIDwgXCIrdFt0aGlzLnJhbmstMV0rXCIpIHtcXG4gICAgICAgICAgKytcIityW3RoaXMucmFuay0xXStcIjtcXG4gICAgICAgICAgcmVzdWx0LncgPSBcIithK1wiO1xcbiAgICAgICAgfVxcbiAgICAgIH1cXG4gICAgXCIsdT10aGlzLnJhbms8PTQ/XCJzb3VyY2VMb2MgPSBjb29yZHMgK1xcbiAgICAgICAgICAgIFwiK2UrXCIoXCIrdC5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm5cInN0YXJ0W1wiK2UrXCJdXCJ9KS5qb2luKCkrXCIpO1wiOnQubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHJbZV0rXCIgPSBcIituW2VdK1wiICsgc3RhcnRbXCIrZStcIl07XCJ9KS5qb2luKFwiXFxuXCIpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgICB1bmlmb3JtIGludCBzdGFydFtcIit0aGlzLnJhbmsrXCJdO1xcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK2UrXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBcIitlK1wiIHNvdXJjZUxvYztcXG4gICAgICAgIFwiK3UrXCIgXFxuICAgICAgICB2ZWM0IHJlc3VsdCA9IHZlYzQoMC4pO1xcbiAgICAgICAgXCIraStcIlxcbiAgICAgICAgXCIrcytcIlxcbiAgICAgICAgc2V0T3V0cHV0KHJlc3VsdCk7XFxuICAgICAgfVxcbiAgICBcIn1yZXR1cm4gdC5wcm90b3R5cGUuZ2V0Q3VzdG9tU2V0dXBGdW5jPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7aWYodC5sZW5ndGghPT10aGlzLnJhbmspdGhyb3cgRXJyb3IoXCJUaGUgcmFuayAoXCIrdGhpcy5yYW5rK1wiKSBvZiB0aGUgcHJvZ3JhbSBtdXN0IG1hdGNoIHRoZSBsZW5ndGggb2Ygc3RhcnQgKFwiK3QubGVuZ3RoK1wiKVwiKTtyZXR1cm4gZnVuY3Rpb24obixyKXtudWxsPT1lLnN0YXJ0TG9jJiYoZS5zdGFydExvYz1uLmdldFVuaWZvcm1Mb2NhdGlvbk5vVGhyb3cocixcInN0YXJ0XCIpLG51bGw9PWUuc3RhcnRMb2MpfHxuLmdsLnVuaWZvcm0xaXYoZS5zdGFydExvYyx0KX19LHR9KCksVmk9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4pe3RoaXMudmFyaWFibGVOYW1lcz1bXCJ4XCJdLHRoaXMub3V0cHV0U2hhcGU9bjt2YXIgcj1uLmxlbmd0aCxvPWpvKG4ubGVuZ3RoKSxhPWpvKG4ubGVuZ3RoKSxpPVwiXCI7aWYoMT09PXIpaT1cImNvb3JkcyAqIHN0cmlkZXMgKyBiZWdpblwiO2Vsc2V7dmFyIHM9MDtpPW4ubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHMrKywxPT09bi5sZW5ndGg/XCJjb29yZHMgKiBzdHJpZGVzW1wiK2UrXCJdICsgYmVnaW5bXCIrZStcIl1cIjpcImNvb3Jkc1tcIisocy0xKStcIl0gKiBzdHJpZGVzW1wiK2UrXCJdICsgYmVnaW5bXCIrZStcIl1cIn0pLmpvaW4oXCIsXCIpfXRoaXMudXNlckNvZGU9XCJcXG4gICAgICBcIitvK1wiIGJlZ2luID0gXCIrbytcIihcIit0K1wiKTtcXG4gICAgICBcIitvK1wiIHN0cmlkZXMgPSBcIitvK1wiKFwiK2UrXCIpO1xcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIFwiK2ErXCIgY29vcmRzID0gZ2V0T3V0cHV0Q29vcmRzKCk7XFxuICAgICAgICBzZXRPdXRwdXQoZ2V0WChcIitpK1wiKSk7XFxuICAgICAgfVxcbiAgICBcIn19KCksemk9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMuZ3BncHU9dCx0aGlzLm51bVVzZWRUZXh0dXJlcz0wLHRoaXMubnVtRnJlZVRleHR1cmVzPTAsdGhpcy5mcmVlVGV4dHVyZXM9e30sdGhpcy5sb2dFbmFibGVkPSExLHRoaXMudXNlZFRleHR1cmVzPXt9fXJldHVybiB0LnByb3RvdHlwZS5hY3F1aXJlVGV4dHVyZT1mdW5jdGlvbih0LGUsbil7dmFyIHIsbz1HaShlLG4pLGE9SGkodCxvLG4pO2lmKGEgaW4gdGhpcy5mcmVlVGV4dHVyZXN8fCh0aGlzLmZyZWVUZXh0dXJlc1thXT1bXSksYSBpbiB0aGlzLnVzZWRUZXh0dXJlc3x8KHRoaXMudXNlZFRleHR1cmVzW2FdPVtdKSx0aGlzLmZyZWVUZXh0dXJlc1thXS5sZW5ndGg+MCl7dGhpcy5udW1GcmVlVGV4dHVyZXMtLSx0aGlzLm51bVVzZWRUZXh0dXJlcysrLHRoaXMubG9nKCk7dmFyIGk9dGhpcy5mcmVlVGV4dHVyZXNbYV0uc2hpZnQoKTtyZXR1cm4gdGhpcy51c2VkVGV4dHVyZXNbYV0ucHVzaChpKSxpfXJldHVybiB0aGlzLm51bVVzZWRUZXh0dXJlcysrLHRoaXMubG9nKCksbz09PUR0LlBBQ0tFRF8yWDJfRkxPQVQzMj9yPXRoaXMuZ3BncHUuY3JlYXRlUGFja2VkTWF0cml4VGV4dHVyZSh0WzBdLHRbMV0pOm89PT1EdC5QQUNLRURfMlgyX0ZMT0FUMTY/cj10aGlzLmdwZ3B1LmNyZWF0ZUZsb2F0MTZQYWNrZWRNYXRyaXhUZXh0dXJlKHRbMF0sdFsxXSk6bz09PUR0LlVOUEFDS0VEX0ZMT0FUMzI/cj10aGlzLmdwZ3B1LmNyZWF0ZUZsb2F0MzJNYXRyaXhUZXh0dXJlKHRbMF0sdFsxXSk6bz09PUR0LlVOUEFDS0VEX0ZMT0FUMTY/cj10aGlzLmdwZ3B1LmNyZWF0ZUZsb2F0MTZNYXRyaXhUZXh0dXJlKHRbMF0sdFsxXSk6bz09PUR0LlBBQ0tFRF80WDFfVU5TSUdORURfQllURSYmKHI9dGhpcy5ncGdwdS5jcmVhdGVVbnNpZ25lZEJ5dGVzTWF0cml4VGV4dHVyZSh0WzBdLHRbMV0pKSx0aGlzLnVzZWRUZXh0dXJlc1thXS5wdXNoKHIpLHJ9LHQucHJvdG90eXBlLnJlbGVhc2VUZXh0dXJlPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKG51bGwhPXRoaXMuZnJlZVRleHR1cmVzKXt2YXIgbz1IaShlLEdpKG4scikscik7byBpbiB0aGlzLmZyZWVUZXh0dXJlc3x8KHRoaXMuZnJlZVRleHR1cmVzW29dPVtdKSx0aGlzLmZyZWVUZXh0dXJlc1tvXS5wdXNoKHQpLHRoaXMubnVtRnJlZVRleHR1cmVzKyssdGhpcy5udW1Vc2VkVGV4dHVyZXMtLTt2YXIgYT10aGlzLnVzZWRUZXh0dXJlc1tvXSxpPWEuaW5kZXhPZih0KTtpZihpPDApdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IHJlbGVhc2UgYSB0ZXh0dXJlIHRoYXQgd2FzIG5ldmVyIHByb3ZpZGVkIGJ5IHRoaXMgdGV4dHVyZSBtYW5hZ2VyXCIpO2Euc3BsaWNlKGksMSksdGhpcy5sb2coKX19LHQucHJvdG90eXBlLmxvZz1mdW5jdGlvbigpe2lmKHRoaXMubG9nRW5hYmxlZCl7dmFyIHQ9dGhpcy5udW1GcmVlVGV4dHVyZXMrdGhpcy5udW1Vc2VkVGV4dHVyZXM7Y29uc29sZS5sb2coXCJGcmVlL1VzZWRcIix0aGlzLm51bUZyZWVUZXh0dXJlcytcIiAvIFwiK3RoaXMubnVtVXNlZFRleHR1cmVzLFwiKFwiK3QrXCIpXCIpfX0sdC5wcm90b3R5cGUuZ2V0TnVtVXNlZFRleHR1cmVzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubnVtVXNlZFRleHR1cmVzfSx0LnByb3RvdHlwZS5nZXROdW1GcmVlVGV4dHVyZXM9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5udW1GcmVlVGV4dHVyZXN9LHQucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKG51bGwhPXRoaXMuZnJlZVRleHR1cmVzKXtmb3IodmFyIGUgaW4gdGhpcy5mcmVlVGV4dHVyZXMpdGhpcy5mcmVlVGV4dHVyZXNbZV0uZm9yRWFjaChmdW5jdGlvbihlKXt0LmdwZ3B1LmRlbGV0ZU1hdHJpeFRleHR1cmUoZSl9KTtmb3IodmFyIGUgaW4gdGhpcy51c2VkVGV4dHVyZXMpdGhpcy51c2VkVGV4dHVyZXNbZV0uZm9yRWFjaChmdW5jdGlvbihlKXt0LmdwZ3B1LmRlbGV0ZU1hdHJpeFRleHR1cmUoZSl9KTt0aGlzLmZyZWVUZXh0dXJlcz1udWxsLHRoaXMudXNlZFRleHR1cmVzPW51bGwsdGhpcy5udW1Vc2VkVGV4dHVyZXM9MCx0aGlzLm51bUZyZWVUZXh0dXJlcz0wfX0sdH0oKTtmdW5jdGlvbiBHaSh0LGUpe2lmKHQ9PT1UdC5VUExPQUQpcmV0dXJuIER0LlBBQ0tFRF8yWDJfRkxPQVQzMjtpZih0PT09VHQuUkVOREVSfHxudWxsPT10KXJldHVybiBmdW5jdGlvbih0KXtyZXR1cm4gaS5nZXRCb29sKFwiV0VCR0xfUkVOREVSX0ZMT0FUMzJfRU5BQkxFRFwiKT90P0R0LlBBQ0tFRF8yWDJfRkxPQVQzMjpEdC5VTlBBQ0tFRF9GTE9BVDMyOnQ/RHQuUEFDS0VEXzJYMl9GTE9BVDE2OkR0LlVOUEFDS0VEX0ZMT0FUMTZ9KGUpO2lmKHQ9PT1UdC5ET1dOTE9BRHx8dD09PVR0LlBJWEVMUylyZXR1cm4gRHQuUEFDS0VEXzRYMV9VTlNJR05FRF9CWVRFO3Rocm93IG5ldyBFcnJvcihcIlVua25vd24gbG9naWNhbCB0ZXh0dXJlIHR5cGUgXCIrdCl9ZnVuY3Rpb24gSGkodCxlLG4pe3JldHVybiB0WzBdK1wiX1wiK3RbMV0rXCJfXCIrZStcIl9cIitufXZhciBxaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdO2Zvcih2YXIgbj1uZXcgQXJyYXkodC5sZW5ndGgpLHI9MDtyPG4ubGVuZ3RoO3IrKyluW3JdPXRbcl0qZVtyXTt0aGlzLm91dHB1dFNoYXBlPW4sdGhpcy5yYW5rPW4ubGVuZ3RoO3ZhciBvPWpvKHRoaXMucmFuayksYT1mdW5jdGlvbih0KXt2YXIgZT10Lmxlbmd0aDtpZihlPjUpdGhyb3cgRXJyb3IoXCJUaWxlIGZvciByYW5rIFwiK2UrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIik7aWYoMT09PWUpcmV0dXJuXCJpbW9kKHJlc1JDLCBcIit0WzBdK1wiKVwiO2Zvcih2YXIgbj1bXCJyZXNSQy54XCIsXCJyZXNSQy55XCIsXCJyZXNSQy56XCIsXCJyZXNSQy53XCIsXCJyZXNSQy51XCJdLHI9W10sbz0wO288dC5sZW5ndGg7bysrKXIucHVzaChcImltb2QoXCIrbltvXStcIiwgXCIrdFtvXStcIilcIik7cmV0dXJuIHIuam9pbigpfSh0KTt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrbytcIiByZXNSQyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgc2V0T3V0cHV0KGdldEEoXCIrYStcIikpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpO3ZhciAkaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdO2Zvcih2YXIgbj1uZXcgQXJyYXkodC5sZW5ndGgpLHI9MDtyPG4ubGVuZ3RoO3IrKyluW3JdPXRbZVtyXV07dGhpcy5vdXRwdXRTaGFwZT1uLHRoaXMucmFuaz1uLmxlbmd0aDt2YXIgbz1qbyh0aGlzLnJhbmspLGE9ZnVuY3Rpb24odCl7dmFyIGU9dC5sZW5ndGg7aWYoZT42KXRocm93IEVycm9yKFwiVHJhbnNwb3NlIGZvciByYW5rIFwiK2UrXCIgaXMgbm90IHlldCBzdXBwb3J0ZWRcIik7Zm9yKHZhciBuPVtcInJlc1JDLnhcIixcInJlc1JDLnlcIixcInJlc1JDLnpcIixcInJlc1JDLndcIixcInJlc1JDLnVcIixcInJlc1JDLnZcIl0scj1uZXcgQXJyYXkoZSksbz0wO288dC5sZW5ndGg7bysrKXJbdFtvXV09bltvXTtyZXR1cm4gci5qb2luKCl9KGUpO3RoaXMudXNlckNvZGU9XCJcXG4gICAgdm9pZCBtYWluKCkge1xcbiAgICAgIFwiK28rXCIgcmVzUkMgPSBnZXRPdXRwdXRDb29yZHMoKTtcXG4gICAgICBzZXRPdXRwdXQoZ2V0QShcIithK1wiKSk7XFxuICAgIH1cXG4gICAgXCJ9fSgpO3ZhciBLaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMudXNlc1BhY2tlZFRleHR1cmVzPSEwO2Zvcih2YXIgbj1uZXcgQXJyYXkodC5sZW5ndGgpLHI9MDtyPG4ubGVuZ3RoO3IrKyluW3JdPXRbZVtyXV07aWYodGhpcy5vdXRwdXRTaGFwZT1uLHRoaXMucmFuaz1uLmxlbmd0aCx0aGlzLnJhbms+Nil0aHJvdyBFcnJvcihcIlBhY2tlZCB0cmFuc3Bvc2UgZm9yIHJhbmsgXCIrdGhpcy5yYW5rK1wiIGlzIG5vdCB5ZXQgc3VwcG9ydGVkLlwiKTt2YXIgbz1qbyh0aGlzLnJhbmspLGE9T28oXCJyY1wiLHRoaXMucmFuayksaT1uZXcgQXJyYXkodGhpcy5yYW5rKTtmb3Iocj0wO3I8ZS5sZW5ndGg7cisrKWlbZVtyXV09YVtyXTt2YXIgcz1cInZlYzIoXCIraS5zbGljZSgtMikuam9pbigpK1wiKVwiLHU9XCIrK1wiK2FbdGhpcy5yYW5rLTFdK1wiIDwgXCIrblt0aGlzLnJhbmstMV0sbD1cImdldENoYW5uZWwoZ2V0QShcIitpLmpvaW4oKStcIiksIFwiK3MrXCIpXCI7dGhpcy51c2VyQ29kZT1cIlxcbiAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgXCIrbytcIiByYyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgIHZlYzQgcmVzdWx0ID0gdmVjNCgwLik7XFxuICAgICAgcmVzdWx0WzBdID0gXCIrbCtcIjtcXG4gICAgICBpZihcIit1K1wiKSB7XFxuICAgICAgICByZXN1bHRbMV0gPSBcIitsK1wiO1xcbiAgICAgIH1cXG4gICAgICAtLVwiK2FbdGhpcy5yYW5rLTFdK1wiO1xcbiAgICAgIGlmKCsrXCIrYVt0aGlzLnJhbmstMl0rXCIgPCBcIituW3RoaXMucmFuay0yXStcIikge1xcbiAgICAgICAgcmVzdWx0WzJdID0gXCIrbCtcIjtcXG4gICAgICAgIGlmKFwiK3UrXCIpIHtcXG4gICAgICAgICAgcmVzdWx0WzNdID0gXCIrbCtcIjtcXG4gICAgICAgIH1cXG4gICAgICB9ICBcXG4gICAgICBzZXRPdXRwdXQocmVzdWx0KTtcXG4gICAgfVxcbiAgICBcIn19KCksamk9MS43NTgwOTkzNDA4NDczNzY4LFhpPTEuMDUwNzAwOTg3MzU1NDgwNSxZaT1mdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUpe3RoaXMudmFyaWFibGVOYW1lcz1bXCJBXCJdLHRoaXMub3V0cHV0U2hhcGU9dCx0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgZmxvYXQgdW5hcnlPcGVyYXRpb24oZmxvYXQgeCkge1xcbiAgICAgICAgXCIrZStcIlxcbiAgICAgIH1cXG5cXG4gICAgICB2b2lkIG1haW4oKSB7XFxuICAgICAgICBmbG9hdCB4ID0gZ2V0QUF0T3V0Q29vcmRzKCk7XFxuICAgICAgICBmbG9hdCB5ID0gdW5hcnlPcGVyYXRpb24oeCk7XFxuXFxuICAgICAgICBzZXRPdXRwdXQoeSk7XFxuICAgICAgfVxcbiAgICBcIn19KCksUWk9XCJpZiAoaXNuYW4oeCkpIHJldHVybiB4O1wiLEppPVwicmV0dXJuIHg7XCIsWmk9XCJyZXR1cm4gYWJzKHgpO1wiLHRzPVFpK1wiXFxuICByZXR1cm4gKHggPCAwLjApID8gMC4wIDogeDtcXG5cIixlcz1cInJldHVybiAoeCA+PSAwLjApID8geCA6IChleHAoeCkgLSAxLjApO1wiLG5zPVwiXFxuICAvLyBTdGFibGUgYW5kIEF0dHJhY3RpbmcgRml4ZWQgUG9pbnQgKDAsIDEpIGZvciBOb3JtYWxpemVkIFdlaWdodHMuXFxuICAvLyBzZWU6IGh0dHBzOi8vYXJ4aXYub3JnL2Ficy8xNzA2LjAyNTE1XFxuICBmbG9hdCBzY2FsZUFscGhhID0gXCIramkrXCI7XFxuICBmbG9hdCBzY2FsZSA9IFwiK1hpK1wiO1xcbiAgcmV0dXJuICh4ID49IDAuMCkgPyBzY2FsZSAqIHggOiBzY2FsZUFscGhhICogKGV4cCh4KSAtIDEuMCk7XFxuXCI7dmFyIHJzPVwicmV0dXJuIC14O1wiLG9zPVwicmV0dXJuIGNlaWwoeCk7XCIsYXM9XCJyZXR1cm4gZmxvb3IoeCk7XCIsaXM9XCJyZXR1cm4gZXhwKHgpO1wiLHNzPVwicmV0dXJuIGV4cCh4KSAtIDEuMDtcIix1cz1RaStcIlxcbiAgcmV0dXJuIHNpbih4KTtcXG5cIixscz1RaStcIlxcbiAgcmV0dXJuIGNvcyh4KTtcXG5cIixjcz1RaStcIlxcbiAgcmV0dXJuIGF0YW4oeCk7XFxuXCIsaHM9UWkrXCJcXG4gIGlmICh4IDwgMS4wKSByZXR1cm4gTkFOO1xcbiAgcmV0dXJuIGxvZyh4ICsgc3FydCh4ICogeCAtIDEuMCkpO1wiLHBzPVFpK1wiXFxuICBpZiAoKHggPCAtMS4wKSB8fCAoeCA+IDEuMCkpIHJldHVybiBOQU47XFxuICByZXR1cm4gKGxvZygxLjAgKyB4KSAtIGxvZygxLjAgLSB4KSkgLyAyLjA7XCIsZnM9XCJyZXR1cm4geDtcIixkcz1cInJldHVybiB4O1wiLHZzPVwiXFxuICB2ZWM0IHJlc3VsdCA9IHggKiB2ZWM0KGdyZWF0ZXJUaGFuRXF1YWwoeCwgdmVjNCgwLjApKSk7XFxuICBidmVjNCBpc05hTiA9IGlzbmFuKHgpO1xcblxcbiAgcmVzdWx0LnIgPSBpc05hTi5yID8geC5yIDogcmVzdWx0LnI7XFxuICByZXN1bHQuZyA9IGlzTmFOLmcgPyB4LmcgOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA/IHguYiA6IHJlc3VsdC5iO1xcbiAgcmVzdWx0LmEgPSBpc05hTi5hID8geC5hIDogcmVzdWx0LmE7XFxuXFxuICByZXR1cm4gcmVzdWx0O1xcblwiLG1zPVwiXFxuICB2ZWM0IHJlc3VsdDtcXG5cXG4gIHJlc3VsdC5yID0gKHguciA+PSAwLjApID8geC5yIDogKGV4cCh4LnIpIC0gMS4wKTtcXG4gIHJlc3VsdC5nID0gKHguZyA+PSAwLjApID8geC5nIDogKGV4cCh4LmcpIC0gMS4wKTtcXG4gIHJlc3VsdC5iID0gKHguYiA+PSAwLjApID8geC5iIDogKGV4cCh4LmIpIC0gMS4wKTtcXG4gIHJlc3VsdC5hID0gKHguYSA+PSAwLjApID8geC5hIDogKGV4cCh4LmEpIC0gMS4wKTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsZ3M9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlKXt0aGlzLnZhcmlhYmxlTmFtZXM9W1wiQVwiXSx0aGlzLnVzZXNQYWNrZWRUZXh0dXJlcz0hMCx0aGlzLm91dHB1dFNoYXBlPXQsdGhpcy51c2VyQ29kZT1cIlxcbiAgICAgIHZlYzQgdW5hcnlPcGVyYXRpb24odmVjNCB4KSB7XFxuICAgICAgICBcIitlK1wiXFxuICAgICAgfVxcblxcbiAgICAgIHZvaWQgbWFpbigpIHtcXG4gICAgICAgIHZlYzQgeCA9IGdldEFBdE91dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCB5ID0gdW5hcnlPcGVyYXRpb24oeCk7XFxuXFxuICAgICAgICBzZXRPdXRwdXQoeSk7XFxuICAgICAgfVxcbiAgICBcIn19KCkseXM9ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCl7dGhpcy52YXJpYWJsZU5hbWVzPVtcIkFcIl0sdGhpcy51c2VzUGFja2VkVGV4dHVyZXM9ITAsdGhpcy5vdXRwdXRTaGFwZT10O3ZhciBlPXQubGVuZ3RoLG49Rm8oXCJyY1wiLGUpLHI9am8oZSksbz1mdW5jdGlvbih0LGUpe2lmKDE9PT10KXJldHVyblwicmNcIjtmb3IodmFyIG49XCJcIixyPTA7cjx0O3IrKyluKz1lW3JdLHI8dC0xJiYobis9XCIsXCIpO3JldHVybiBufShlLG4pLGE9bi5zbGljZSgtMiksaT1lPD0xP1wicmNcIjpcInZlYzIoXCIrYS5qb2luKFwiLFwiKStcIilcIjt0aGlzLnVzZXJDb2RlPVwiXFxuICAgICAgdm9pZCBtYWluKCkge1xcbiAgICAgICAgXCIrcitcIiByYyA9IGdldE91dHB1dENvb3JkcygpO1xcbiAgICAgICAgdmVjNCBwYWNrZWRJbnB1dCA9IGdldEEoXCIrbytcIik7XFxuXFxuICAgICAgICBzZXRPdXRwdXQoZ2V0Q2hhbm5lbChwYWNrZWRJbnB1dCwgXCIraStcIikpO1xcbiAgICAgIH1cXG4gICAgXCJ9fSgpLHhzPXt9O2Z1bmN0aW9uIGJzKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9ITEpLFwibGluZWFyXCI9PT10KXJldHVybiBlP2RzOkppO2lmKFwicmVsdVwiPT09dClyZXR1cm4gZT92czp0cztpZihcImVsdVwiPT09dClyZXR1cm4gZT9tczplcztpZihcInByZWx1XCI9PT10KXJldHVybiBlP2NhOnVhO3Rocm93IG5ldyBFcnJvcihcIkFjdGl2YXRpb24gXCIrdCtcIiBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWQgZm9yIHRoZSBXZWJHTCBiYWNrZW5kLlwiKX12YXIgd3M9NjAwO3ZhciBDcz1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7aWYodGhpcy5ncGdwdT10LHRoaXMucGVuZGluZ1JlYWQ9bmV3IFdlYWtNYXAsdGhpcy5wZW5kaW5nRGlzcG9zYWw9bmV3IFdlYWtTZXQsdGhpcy5kYXRhUmVmQ291bnQ9bmV3IFdlYWtNYXAsdGhpcy5udW1CeXRlc0luR1BVPTAsdGhpcy51cGxvYWRXYWl0TXM9MCx0aGlzLmRvd25sb2FkV2FpdE1zPTAsdGhpcy53YXJuZWRBYm91dE1lbW9yeT0hMSx0aGlzLmRpc3Bvc2VkPSExLCFpLmdldEJvb2woXCJIQVNfV0VCR0xcIikpdGhyb3cgbmV3IEVycm9yKFwiV2ViR0wgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGRldmljZVwiKTtpZihudWxsPT10KXt2YXIgZT1NdChpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpO3RoaXMuYmluYXJ5Q2FjaGU9KG49aS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpKWluIHhzP3hzW25dOih4c1tuXT17fSx4c1tuXSksdGhpcy5ncGdwdT1uZXcgY2koZSksdGhpcy5jYW52YXM9ZS5jYW52YXMsdGhpcy5ncGdwdUNyZWF0ZWRMb2NhbGx5PSEwfWVsc2UgdGhpcy5iaW5hcnlDYWNoZT17fSx0aGlzLmdwZ3B1Q3JlYXRlZExvY2FsbHk9ITEsdGhpcy5jYW52YXM9dC5nbC5jYW52YXM7dmFyIG47dGhpcy50ZXh0dXJlTWFuYWdlcj1uZXcgemkodGhpcy5ncGdwdSksdGhpcy5udW1NQkJlZm9yZVdhcm5pbmc9bnVsbD09aS5nbG9iYWwuc2NyZWVuPzEwMjQ6aS5nbG9iYWwuc2NyZWVuLmhlaWdodCppLmdsb2JhbC5zY3JlZW4ud2lkdGgqd2luZG93LmRldmljZVBpeGVsUmF0aW8qd3MvMTAyNC8xMDI0LHRoaXMudGV4RGF0YT1uZXcgSnIodGhpcyxTdCl9cmV0dXJuIHQucHJvdG90eXBlLnJlZ2lzdGVyPWZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLnRleERhdGEuaGFzKHQpKXRocm93IG5ldyBFcnJvcihcIkRhdGEgYnVmZmVyIGlzIGFscmVhZHkgcmVnaXN0ZXJlZFwiKTt0aGlzLnRleERhdGEuc2V0KHQse3NoYXBlOmUsZHR5cGU6bn0pfSx0LnByb3RvdHlwZS5mcm9tUGl4ZWxzPWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09dCl0aHJvdyBuZXcgRXJyb3IoXCJwaXhlbHMgcGFzc2VkIHRvIHRmLmJyb3dzZXIuZnJvbVBpeGVscygpIGNhbiBub3QgYmUgbnVsbFwiKTt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgT2Zmc2NyZWVuQ2FudmFzJiZ0IGluc3RhbmNlb2YgT2Zmc2NyZWVuQ2FudmFzfHxcInVuZGVmaW5lZFwiIT10eXBlb2YgSFRNTENhbnZhc0VsZW1lbnQmJnQgaW5zdGFuY2VvZiBIVE1MQ2FudmFzRWxlbWVudCxyPXQuZGF0YSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXksbz1cInVuZGVmaW5lZFwiIT10eXBlb2YgSW1hZ2VEYXRhJiZ0IGluc3RhbmNlb2YgSW1hZ2VEYXRhLGE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxWaWRlb0VsZW1lbnQmJnQgaW5zdGFuY2VvZiBIVE1MVmlkZW9FbGVtZW50LHM9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEhUTUxJbWFnZUVsZW1lbnQmJnQgaW5zdGFuY2VvZiBIVE1MSW1hZ2VFbGVtZW50LHU9YT9bdC52aWRlb1dpZHRoLHQudmlkZW9IZWlnaHRdOlt0LndpZHRoLHQuaGVpZ2h0XSxsPXVbMF0sYz11WzFdLGg9W2MsbF0scD1bYyxsLGVdO2lmKCEobnx8cnx8b3x8YXx8cykpdGhyb3cgbmV3IEVycm9yKFwicGl4ZWxzIHBhc3NlZCB0byB0Zi5icm93c2VyLmZyb21QaXhlbHMoKSBtdXN0IGJlIGVpdGhlciBhbiBIVE1MVmlkZW9FbGVtZW50LCBIVE1MSW1hZ2VFbGVtZW50LCBIVE1MQ2FudmFzRWxlbWVudCwgSW1hZ2VEYXRhIGluIGJyb3dzZXIsIG9yIE9mZnNjcmVlbkNhbnZhcywgSW1hZ2VEYXRhIGluIHdlYndvcmtlciBvciB7ZGF0YTogVWludDMyQXJyYXksIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyfSwgYnV0IHdhcyBcIit0LmNvbnN0cnVjdG9yLm5hbWUpOyhzfHxhKSYmKG51bGw9PXRoaXMuZnJvbVBpeGVsczJEQ29udGV4dCYmKHRoaXMuZnJvbVBpeGVsczJEQ29udGV4dD1CdChpLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpLmdldENvbnRleHQoXCIyZFwiKSksdGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0LmNhbnZhcy53aWR0aD1sLHRoaXMuZnJvbVBpeGVsczJEQ29udGV4dC5jYW52YXMuaGVpZ2h0PWMsdGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0LmRyYXdJbWFnZSh0LDAsMCxsLGMpLHQ9dGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0LmNhbnZhcyk7dmFyIGYsZCx2PXRoaXMubWFrZVRlbnNvckhhbmRsZShoLFwiaW50MzJcIik7aWYodGhpcy50ZXhEYXRhLmdldCh2LmRhdGFJZCkudXNhZ2U9VHQuUElYRUxTLHRoaXMuZ3BncHUudXBsb2FkUGl4ZWxEYXRhVG9UZXh0dXJlKHRoaXMuZ2V0VGV4dHVyZSh2LmRhdGFJZCksdCksaS5nZXRCb29sKFwiV0VCR0xfUEFDS1wiKSl7Zj1uZXcgR2EocCk7dmFyIG09dGhpcy5tYWtlUGFja2VkVGVuc29yKGYub3V0cHV0U2hhcGUsdi5kdHlwZSk7ZD10aGlzLmNvbXBpbGVBbmRSdW4oZixbdl0sbSl9ZWxzZSBmPW5ldyB6YShwKSxkPXRoaXMuY29tcGlsZUFuZFJ1bihmLFt2XSk7cmV0dXJuIHRoaXMuZGlzcG9zZURhdGEodi5kYXRhSWQpLGR9LHQucHJvdG90eXBlLm1ha2VUZW5zb3JIYW5kbGU9ZnVuY3Rpb24odCxlKXt2YXIgbj17fTtyZXR1cm4gdGhpcy5yZWdpc3RlcihuLHQsZSkse2RhdGFJZDpuLHNoYXBlOnQsZHR5cGU6ZX19LHQucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJNYXRoQmFja2VuZFdlYkdMLndyaXRlKCk6IHZhbHVlcyBjYW4gbm90IGJlIG51bGxcIik7aWYoaS5nZXRCb29sKFwiREVCVUdcIikpZm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07aWYoIUh0KHIpKXtpZihpLmdldEJvb2woXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9DQVBBQkxFXCIpKXRocm93IEVycm9yKFwiVGhlIHZhbHVlIFwiK3IrXCIgY2Fubm90IGJlIHJlcHJlc2VudGVkIHdpdGggeW91ciBjdXJyZW50IHNldHRpbmdzLiBDb25zaWRlciBlbmFibGluZyBmbG9hdDMyIHJlbmRlcmluZzogJ3RmLkVOVi5zZXQoJ1dFQkdMX1JFTkRFUl9GTE9BVDMyX0VOQUJMRUQnLCB0cnVlKTsnXCIpO3Rocm93IEVycm9yKFwiVGhlIHZhbHVlIFwiK3IrXCIgY2Fubm90IGJlIHJlcHJlc2VudGVkIG9uIHRoaXMgZGV2aWNlLlwiKX19dmFyIG89dGhpcy50ZXhEYXRhLmdldCh0KTtpZihcImNvbXBsZXg2NFwiPT09by5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3Qgd3JpdGUgdG8gYSBjb21wbGV4NjQgZHR5cGUuIFBsZWFzZSB1c2UgdGYuY29tcGxleChyZWFsLCBpbWFnKS5cIik7dGhpcy5yZWxlYXNlR1BVRGF0YSh0KSxvLnVzYWdlPVR0LlVQTE9BRCxvLnZhbHVlcz1lfSx0LnByb3RvdHlwZS5yZWFkU3luYz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLnRleERhdGEuZ2V0KHQpLG49ZS52YWx1ZXMscj1lLmR0eXBlLG89ZS5jb21wbGV4VGVuc29ycyxhPWUuc2xpY2UsaT1lLnNoYXBlLHM9ZS5pc1BhY2tlZDtpZihudWxsIT1hKXt2YXIgdT12b2lkIDA7dT1zP25ldyBncyhpLGZzKTpuZXcgWWkoaSxmcyk7dmFyIGw9dGhpcy5jb21waWxlQW5kUnVuKHUsW3tkYXRhSWQ6dCxzaGFwZTppLGR0eXBlOnJ9XSksYz10aGlzLnJlYWRTeW5jKGwuZGF0YUlkKTtyZXR1cm4gbC5kaXNwb3NlKCksY31pZihudWxsIT1uKXJldHVybiB0aGlzLmNvbnZlcnRBbmRDYWNoZU9uQ1BVKHQpO2lmKFwic3RyaW5nXCI9PT1yKXJldHVybiBuO3ZhciBoLHAsZj1udWxsIT10aGlzLmFjdGl2ZVRpbWVyczsoZiYmKGg9JCgpKSxcImNvbXBsZXg2NFwiPT09cik/cD1ibyhvLnJlYWwuZGF0YVN5bmMoKSxvLmltYWcuZGF0YVN5bmMoKSk6cD10aGlzLmdldFZhbHVlc0Zyb21UZXh0dXJlKHQpO3JldHVybiBmJiYodGhpcy5kb3dubG9hZFdhaXRNcys9JCgpLWgpLHRoaXMuY29udmVydEFuZENhY2hlT25DUFUodCxwKX0sdC5wcm90b3R5cGUucmVhZD1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuLG8sYSxzLHUsbCxjLGgscCxmLGQsdixtLHkseCxiLHcsQyxFLFIsSTtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6aWYodGhpcy5wZW5kaW5nUmVhZC5oYXModCkpcmV0dXJuIGU9dGhpcy5wZW5kaW5nUmVhZC5nZXQodCksWzIsbmV3IFByb21pc2UoZnVuY3Rpb24odCl7cmV0dXJuIGUucHVzaCh0KX0pXTtpZihuPXRoaXMudGV4RGF0YS5nZXQodCksbz1uLnZhbHVlcyxhPW4uc2hhcGUscz1uLnNsaWNlLHU9bi5kdHlwZSxsPW4uY29tcGxleFRlbnNvcnMsYz1uLmlzUGFja2VkLG51bGwhPXMpcmV0dXJuIGg9dm9pZCAwLGg9Yz9uZXcgZ3MoYSxmcyk6bmV3IFlpKGEsZnMpLHA9dGhpcy5jb21waWxlQW5kUnVuKGgsW3tkYXRhSWQ6dCxzaGFwZTphLGR0eXBlOnV9XSksZj10aGlzLnJlYWQocC5kYXRhSWQpLHAuZGlzcG9zZSgpLFsyLGZdO2lmKG51bGwhPW8pcmV0dXJuWzIsdGhpcy5jb252ZXJ0QW5kQ2FjaGVPbkNQVSh0KV07aWYoIWkuZ2V0Qm9vbChcIldFQkdMX0RPV05MT0FEX0ZMT0FUX0VOQUJMRURcIikmJjI9PT1pLmdldE51bWJlcihcIldFQkdMX1ZFUlNJT05cIikpdGhyb3cgbmV3IEVycm9yKFwidGVuc29yLmRhdGEoKSB3aXRoIFdFQkdMX0RPV05MT0FEX0ZMT0FUX0VOQUJMRUQ9ZmFsc2UgYW5kIFdFQkdMX1ZFUlNJT049MiBub3QgeWV0IHN1cHBvcnRlZC5cIik7cmV0dXJuIGQ9bnVsbCxcImNvbXBsZXg2NFwiIT09dSYmaS5nZXQoXCJXRUJHTF9CVUZGRVJfU1VQUE9SVEVEXCIpJiYodj10aGlzLmRlY29kZSh0KSxtPXRoaXMudGV4RGF0YS5nZXQodi5kYXRhSWQpLGQ9KEk9dGhpcy5ncGdwdSkuY3JlYXRlQnVmZmVyRnJvbVRleHR1cmUuYXBwbHkoSSxbbS50ZXh0dXJlXS5jb25jYXQoTHQoYSkpKSksdGhpcy5wZW5kaW5nUmVhZC5zZXQodCxbXSksXCJjb21wbGV4NjRcIj09PXU/WzMsMl06WzQsdGhpcy5ncGdwdS5jcmVhdGVBbmRXYWl0Rm9yRmVuY2UoKV07Y2FzZSAxOnIuc2VudCgpLHIubGFiZWw9MjtjYXNlIDI6cmV0dXJuXCJjb21wbGV4NjRcIiE9PXU/WzMsNF06WzQsUHJvbWlzZS5hbGwoW2wucmVhbC5kYXRhKCksbC5pbWFnLmRhdGEoKV0pXTtjYXNlIDM6cmV0dXJuIHg9ci5zZW50KCksYj14WzBdLHc9eFsxXSx5PWJvKGIsdyksWzMsNV07Y2FzZSA0Om51bGw9PWQ/eT10aGlzLmdldFZhbHVlc0Zyb21UZXh0dXJlKHQpOihDPWcoYSkseT10aGlzLmdwZ3B1LmRvd25sb2FkRmxvYXQzMk1hdHJpeEZyb21CdWZmZXIoZCxDKSksci5sYWJlbD01O2Nhc2UgNTpyZXR1cm4gbnVsbCE9diYmdGhpcy5kaXNwb3NlRGF0YSh2LmRhdGFJZCksRT10aGlzLmNvbnZlcnRBbmRDYWNoZU9uQ1BVKHQseSksUj10aGlzLnBlbmRpbmdSZWFkLmdldCh0KSx0aGlzLnBlbmRpbmdSZWFkLmRlbGV0ZSh0KSxSLmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHQoRSl9KSx0aGlzLnBlbmRpbmdEaXNwb3NhbC5oYXModCkmJih0aGlzLnBlbmRpbmdEaXNwb3NhbC5kZWxldGUodCksdGhpcy5kaXNwb3NlRGF0YSh0KSksWzIsRV19fSl9KX0sdC5wcm90b3R5cGUuZ2V0VmFsdWVzRnJvbVRleHR1cmU9ZnVuY3Rpb24odCl7dmFyIGUsbj10aGlzLHI9dGhpcy50ZXhEYXRhLmdldCh0KSxvPXIuc2hhcGUsYT1yLmR0eXBlLHM9ci5pc1BhY2tlZCx1PWcobyk7aWYoaS5nZXRCb29sKFwiV0VCR0xfRE9XTkxPQURfRkxPQVRfRU5BQkxFRFwiKSl7dmFyIGw9dGhpcy5kZWNvZGUodCksYz10aGlzLnRleERhdGEuZ2V0KGwuZGF0YUlkKSxoPShlPXRoaXMuZ3BncHUpLmRvd25sb2FkTWF0cml4RnJvbVBhY2tlZFRleHR1cmUuYXBwbHkoZSxbYy50ZXh0dXJlXS5jb25jYXQoTHQobykpKS5zdWJhcnJheSgwLHUpO3JldHVybiB0aGlzLmRpc3Bvc2VEYXRhKGwuZGF0YUlkKSxofXZhciBwPWkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tcIikmJiEwPT09cyxmPXA/eGUobyk6byxkPXRoaXMubWFrZVRlbnNvckhhbmRsZShmLFwiZmxvYXQzMlwiKTtkLnNpemU9ZyhvKSx0aGlzLnRleERhdGEuZ2V0KGQuZGF0YUlkKS51c2FnZT1UdC5ET1dOTE9BRDt2YXIgdj1VZShmdW5jdGlvbigpe3ZhciBlPXA/bmV3IE1hKGYpOm5ldyBGYShmKTtyZXR1cm4gbi5jb21waWxlQW5kUnVuKGUsW3tzaGFwZTpmLGR0eXBlOmEsZGF0YUlkOnR9XSxkLG51bGwpfSksbT10aGlzLnRleERhdGEuZ2V0KHYuZGF0YUlkKSx5PXRoaXMuZ3BncHUuZG93bmxvYWRCeXRlRW5jb2RlZEZsb2F0TWF0cml4RnJvbU91dHB1dFRleHR1cmUobS50ZXh0dXJlLG0udGV4U2hhcGVbMF0sbS50ZXhTaGFwZVsxXSkuc3ViYXJyYXkoMCx1KTtyZXR1cm4gdGhpcy5kaXNwb3NlRGF0YShkLmRhdGFJZCkseX0sdC5wcm90b3R5cGUudGltZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuLG8sYSxpLHMsdTtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9dGhpcy5hY3RpdmVUaW1lcnMsbj1bXSxvPSExLG51bGw9PXRoaXMucHJvZ3JhbVRpbWVyc1N0YWNrPyh0aGlzLnByb2dyYW1UaW1lcnNTdGFjaz1uLG89ITApOnRoaXMuYWN0aXZlVGltZXJzLnB1c2gobiksdGhpcy5hY3RpdmVUaW1lcnM9bix0KCksYT1tKHRoaXMuYWN0aXZlVGltZXJzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5xdWVyeX0pKS5maWx0ZXIoZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPXR9KSxpPW0odGhpcy5hY3RpdmVUaW1lcnMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiBudWxsIT10fSksdGhpcy5hY3RpdmVUaW1lcnM9ZSxvJiYodGhpcy5wcm9ncmFtVGltZXJzU3RhY2s9bnVsbCksWzQsUHJvbWlzZS5hbGwoYSldO2Nhc2UgMTpyZXR1cm4gcz1yLnNlbnQoKSx1PXt1cGxvYWRXYWl0TXM6dGhpcy51cGxvYWRXYWl0TXMsZG93bmxvYWRXYWl0TXM6dGhpcy5kb3dubG9hZFdhaXRNcyxrZXJuZWxNczpwKHMpLGdldEV4dHJhUHJvZmlsZUluZm86ZnVuY3Rpb24oKXtyZXR1cm4gcy5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm57bmFtZTppW2VdLG1zOnR9fSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWUrXCI6IFwiK3QubXN9KS5qb2luKFwiLCBcIil9LHdhbGxNczpudWxsfSx0aGlzLnVwbG9hZFdhaXRNcz0wLHRoaXMuZG93bmxvYWRXYWl0TXM9MCxbMix1XX19KX0pfSx0LnByb3RvdHlwZS5tZW1vcnk9ZnVuY3Rpb24oKXtyZXR1cm57dW5yZWxpYWJsZTohMSxudW1CeXRlc0luR1BVOnRoaXMubnVtQnl0ZXNJbkdQVX19LHQucHJvdG90eXBlLnN0YXJ0VGltZXI9ZnVuY3Rpb24oKXtyZXR1cm4gaS5nZXROdW1iZXIoXCJXRUJHTF9ESVNKT0lOVF9RVUVSWV9USU1FUl9FWFRFTlNJT05fVkVSU0lPTlwiKT4wP3RoaXMuZ3BncHUuYmVnaW5RdWVyeSgpOntzdGFydE1zOiQoKSxlbmRNczpudWxsfX0sdC5wcm90b3R5cGUuZW5kVGltZXI9ZnVuY3Rpb24odCl7cmV0dXJuIGkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIik+MD8odGhpcy5ncGdwdS5lbmRRdWVyeSgpLHQpOih0LmVuZE1zPSQoKSx0KX0sdC5wcm90b3R5cGUuZ2V0UXVlcnlUaW1lPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsZnVuY3Rpb24obil7cmV0dXJuIGkuZ2V0TnVtYmVyKFwiV0VCR0xfRElTSk9JTlRfUVVFUllfVElNRVJfRVhURU5TSU9OX1ZFUlNJT05cIik+MD9bMix0aGlzLmdwZ3B1LndhaXRGb3JRdWVyeUFuZEdldFRpbWUodCldOlsyLChlPXQpLmVuZE1zLWUuc3RhcnRNc119KX0pfSx0LnByb3RvdHlwZS5kaXNwb3NlRGF0YT1mdW5jdGlvbih0KXtpZighdGhpcy5wZW5kaW5nRGlzcG9zYWwuaGFzKHQpKWlmKHRoaXMucGVuZGluZ1JlYWQuaGFzKHQpKXRoaXMucGVuZGluZ0Rpc3Bvc2FsLmFkZCh0KTtlbHNlIGlmKHRoaXMudGV4RGF0YS5oYXModCkpe3RoaXMucmVsZWFzZUdQVURhdGEodCk7dmFyIGU9dGhpcy50ZXhEYXRhLmdldCh0KS5jb21wbGV4VGVuc29ycztudWxsIT1lJiYoZS5yZWFsLmRpc3Bvc2UoKSxlLmltYWcuZGlzcG9zZSgpKSx0aGlzLnRleERhdGEuZGVsZXRlKHQpfX0sdC5wcm90b3R5cGUucmVsZWFzZUdQVURhdGE9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy50ZXhEYXRhLmdldCh0KSxuPWUudGV4dHVyZSxyPWUuZHR5cGUsbz1lLnRleFNoYXBlLGE9ZS51c2FnZSxpPWUuaXNQYWNrZWQscz1lLnNsaWNlLHU9cyYmcy5vcmlnRGF0YUlkfHx0LGw9dGhpcy5kYXRhUmVmQ291bnQuZ2V0KHUpO2w+MT90aGlzLmRhdGFSZWZDb3VudC5zZXQodSxsLTEpOih0aGlzLmRhdGFSZWZDb3VudC5kZWxldGUodSksbnVsbCE9biYmKHRoaXMubnVtQnl0ZXNJbkdQVS09dGhpcy5jb21wdXRlQnl0ZXMobyxyKSx0aGlzLnRleHR1cmVNYW5hZ2VyLnJlbGVhc2VUZXh0dXJlKG4sbyxhLGkpKSk7dmFyIGM9dGhpcy50ZXhEYXRhLmdldCh0KTtjLnRleHR1cmU9bnVsbCxjLnRleFNoYXBlPW51bGwsYy5pc1BhY2tlZD0hMSxjLnNsaWNlPW51bGx9LHQucHJvdG90eXBlLmdldFRleHR1cmU9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudXBsb2FkVG9HUFUodCksdGhpcy50ZXhEYXRhLmdldCh0KS50ZXh0dXJlfSx0LnByb3RvdHlwZS5nZXREYXRhSW5mbz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy50ZXhEYXRhLmdldCh0KX0sdC5wcm90b3R5cGUuZ2V0Q1BVQmFja2VuZD1mdW5jdGlvbigpe3JldHVybiBpLmdldEJvb2woXCJXRUJHTF9DUFVfRk9SV0FSRFwiKT8obnVsbD09dGhpcy5jcHVCYWNrZW5kJiYodGhpcy5jcHVCYWNrZW5kPVN0LmZpbmRCYWNrZW5kKFwiY3B1XCIpKSx0aGlzLmNwdUJhY2tlbmQpOm51bGx9LHQucHJvdG90eXBlLnNob3VsZEV4ZWN1dGVPbkNQVT1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIHZvaWQgMD09PWUmJihlPTEyOCksbnVsbCE9dGhpcy5nZXRDUFVCYWNrZW5kKCkmJnQuZXZlcnkoZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PW4udGV4RGF0YS5nZXQodC5kYXRhSWQpLnRleHR1cmUmJnQuc2l6ZTxlfSl9LHQucHJvdG90eXBlLmdldEdQR1BVQ29udGV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdwZ3B1fSx0LnByb3RvdHlwZS5jb21wbGV4PWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy5tYWtlT3V0cHV0QXJyYXkodC5zaGFwZSxcImNvbXBsZXg2NFwiKTtyZXR1cm4gdGhpcy50ZXhEYXRhLmdldChuLmRhdGFJZCkuY29tcGxleFRlbnNvcnM9e3JlYWw6U3Qua2VlcCh0LmNsb25lKCkpLGltYWc6U3Qua2VlcChlLmNsb25lKCkpfSxufSx0LnByb3RvdHlwZS5yZWFsPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKS5jb21wbGV4VGVuc29ycy5yZWFsLmNsb25lKCl9LHQucHJvdG90eXBlLmltYWc9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzLmltYWcuY2xvbmUoKX0sdC5wcm90b3R5cGUuc2xpY2U9ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5zbGljZSh0LGUsbik7aWYoMD09PWcobikpcmV0dXJuIHhuKFtdLG4sdC5kdHlwZSk7dmFyIHI9dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCkuaXNQYWNrZWQsbz1Wcih0LnNoYXBlLGUsbik7aWYocnx8IW8pe3ZhciBhPWkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiKT9uZXcgVWkobik6bmV3IExpKG4pLHM9YS5nZXRDdXN0b21TZXR1cEZ1bmMoZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0XSxudWxsLHMpfXJldHVybiB0aGlzLnVwbG9hZFRvR1BVKHQuZGF0YUlkKSx0aGlzLnNoYWxsb3dTbGljZSh0LGUsbil9LHQucHJvdG90eXBlLnNoYWxsb3dTbGljZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCksbz1jdC5tYWtlKG4se30sdC5kdHlwZSx0aGlzKSxhPXRoaXMudGV4RGF0YS5nZXQoby5kYXRhSWQpO09iamVjdC5hc3NpZ24oYSxyKSxhLnNoYXBlPW4sYS5kdHlwZT10LmR0eXBlO3ZhciBpPXpyKGUsdC5zdHJpZGVzKTtyLnNsaWNlJiYoaSs9ci5zbGljZS5mbGF0T2Zmc2V0KSxhLnNsaWNlPXtmbGF0T2Zmc2V0Omksb3JpZ0RhdGFJZDpyLnNsaWNlJiZyLnNsaWNlLm9yaWdEYXRhSWR8fHQuZGF0YUlkfTt2YXIgcz10aGlzLmRhdGFSZWZDb3VudC5nZXQoYS5zbGljZS5vcmlnRGF0YUlkKXx8MTtyZXR1cm4gdGhpcy5kYXRhUmVmQ291bnQuc2V0KGEuc2xpY2Uub3JpZ0RhdGFJZCxzKzEpLG99LHQucHJvdG90eXBlLnN0cmlkZWRTbGljZT1mdW5jdGlvbih0LGUsbixyKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuc3RyaWRlZFNsaWNlKHQsZSxuLHIpO3ZhciBvPUxyKGUsbixyKTtpZihvLnNvbWUoZnVuY3Rpb24odCl7cmV0dXJuIDA9PT10fSkpcmV0dXJuIHhuKFtdLG8pO3ZhciBhPW5ldyBWaShlLHIsbyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0XSl9LHQucHJvdG90eXBlLnJldmVyc2U9ZnVuY3Rpb24odCxlKXt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0FSUkFZX09QRVJBVElPTlNcIik/bmV3IEZpKHQuc2hhcGUsZSk6bmV3IE9pKHQuc2hhcGUsZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSl9LHQucHJvdG90eXBlLmNvbmNhdD1mdW5jdGlvbih0LGUpe2lmKFwiY29tcGxleDY0XCI9PT10WzBdLmR0eXBlKXt2YXIgbj10Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZ24odCl9KSxyPXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB5bih0KX0pO3JldHVybiBtbih0aGlzLmNvbmNhdChuLGUpLHRoaXMuY29uY2F0KHIsZSkpfWlmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKHQpKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuY29uY2F0KHQsZSk7aWYoMT09PXQubGVuZ3RoKXJldHVybiB0WzBdO2lmKHQubGVuZ3RoPmkuZ2V0TnVtYmVyKFwiV0VCR0xfTUFYX1RFWFRVUkVTX0lOX1NIQURFUlwiKSl7dmFyIG89TWF0aC5mbG9vcih0Lmxlbmd0aC8yKSxhPXRoaXMuY29uY2F0KHQuc2xpY2UoMCxvKSxlKSxzPXRoaXMuY29uY2F0KHQuc2xpY2UobyksZSk7cmV0dXJuIHRoaXMuY29uY2F0KFthLHNdLGUpfWlmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiKSYmdFswXS5yYW5rPjEpe3ZhciB1PW5ldyBtYSh0Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pLGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4odSx0KX12YXIgbD1kbih0Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZX0pLGUpLGM9dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuYXMyRCgtMSxnKHQuc2hhcGUuc2xpY2UoZSkpKX0pLGg9bmV3IHZhKGMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNoYXBlfSkpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oaCxjKS5yZXNoYXBlKGwpfSx0LnByb3RvdHlwZS5uZWc9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLm5lZyh0KTtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkVW5hcnlPcCh0LHJzLHQuZHR5cGUpO3ZhciBlPW5ldyBZaSh0LnNoYXBlLHJzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuYmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89bj90LnNoYXBlWzJdOnQuc2hhcGVbMV0sYT1yP2Uuc2hhcGVbMV06ZS5zaGFwZVsyXSxpPW4/dC5zaGFwZVsxXTp0LnNoYXBlWzJdLHM9dC5zaGFwZVswXTtpZigoMT09PW98fDE9PT1hKSYmaT4xZTMpe24mJih0PXQudHJhbnNwb3NlKFswLDIsMV0pKSxyJiYoZT1lLnRyYW5zcG9zZShbMCwyLDFdKSk7dmFyIHU9MT09PWE/dDp0LmFzM0QocyxpLDEpLGw9MT09PWE/MjoxLGM9MT09PWE/ZS5hczNEKHMsMSxpKTplO3JldHVybiB0aGlzLm11bHRpcGx5KHUsYykuc3VtKGwsITApfXZhciBoPXh0KHQuZHR5cGUsZS5kdHlwZSkscD1uZXcgeWkodC5zaGFwZSxbcyxvLGFdLG4sciksZj10aGlzLm1ha2VQYWNrZWRUZW5zb3IocC5vdXRwdXRTaGFwZSxoKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHAsW3QsZV0sZil9LHQucHJvdG90eXBlLmZ1c2VkQmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCl7dmFyIGU9dC5hLG49dC5iLHI9dC50cmFuc3Bvc2VBLG89dC50cmFuc3Bvc2VCLGE9dC5iaWFzLGk9dC5hY3RpdmF0aW9uLHM9dC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzLHU9cj9lLnNoYXBlWzJdOmUuc2hhcGVbMV0sbD1vP24uc2hhcGVbMV06bi5zaGFwZVsyXSxjPWUuc2hhcGVbMF0saD14dChlLmR0eXBlLG4uZHR5cGUpLHA9bnVsbCE9YSxmPW51bGwhPXMsZD1pP2JzKGksITApOm51bGwsdj1uZXcgeWkoZS5zaGFwZSxbYyx1LGxdLHIsbyxwLGQsZiksbT10aGlzLm1ha2VQYWNrZWRUZW5zb3Iodi5vdXRwdXRTaGFwZSxoKSxnPVtlLG5dO3JldHVybiBhJiZnLnB1c2goYSkscyYmZy5wdXNoKHMpLHRoaXMuY29tcGlsZUFuZFJ1bih2LGcsbSl9LHQucHJvdG90eXBlLm11bHRpcGx5PWZ1bmN0aW9uKHQsZSl7aWYoXCJjb21wbGV4NjRcIj09PXQuZHR5cGUpe3ZhciBuPXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLHI9dGhpcy50ZXhEYXRhLmdldChlLmRhdGFJZCksbz1uZXcgb2EobmEsdC5zaGFwZSxlLnNoYXBlKSxhPW5ldyBvYShyYSx0LnNoYXBlLGUuc2hhcGUpLHM9W3RoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGUodCxuLmNvbXBsZXhUZW5zb3JzLnJlYWwpLHRoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGUodCxuLmNvbXBsZXhUZW5zb3JzLmltYWcpLHRoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGUoZSxyLmNvbXBsZXhUZW5zb3JzLnJlYWwpLHRoaXMubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGUoZSxyLmNvbXBsZXhUZW5zb3JzLmltYWcpXSx1PXRoaXMuY29tcGlsZUFuZFJ1bihvLHMpLGw9dGhpcy5jb21waWxlQW5kUnVuKGEscyksYz10aGlzLmNvbXBsZXgodSxsKTtyZXR1cm4gdS5kaXNwb3NlKCksbC5kaXNwb3NlKCksY31pZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5tdWx0aXBseSh0LGUpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLHNhLHQuZHR5cGUpO3ZhciBoPW5ldyBsYShzYSx0LnNoYXBlLGUuc2hhcGUpLHA9dGhpcy5tYWtlT3V0cHV0QXJyYXkoaC5vdXRwdXRTaGFwZSx0LmR0eXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGgsW3QsZV0scCl9LHQucHJvdG90eXBlLmJhdGNoTm9ybWFsaXphdGlvbj1mdW5jdGlvbih0LGUsbixyLG8sYSl7dmFyIHM9W3QsZSxuXSx1PW51bGw7bnVsbCE9YSYmKHU9YS5zaGFwZSxzLnB1c2goYSkpO3ZhciBsPW51bGw7aWYobnVsbCE9byYmKGw9by5zaGFwZSxzLnB1c2gobykpLGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfTk9STUFMSVpBVElPTlwiKSl7dmFyIGM9bmV3IGVhKHQuc2hhcGUsZS5zaGFwZSxuLnNoYXBlLHUsbCxyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGMscyl9dmFyIGg9bmV3IHRhKHQuc2hhcGUsZS5zaGFwZSxuLnNoYXBlLHUsbCxyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGgscyl9LHQucHJvdG90eXBlLmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uNEQ9ZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT1pLmdldEJvb2woXCJXRUJHTF9QQUNLX05PUk1BTElaQVRJT05cIik/bmV3IHZpKHQuc2hhcGUsZSxuLHIsbyk6bmV3IGZpKHQuc2hhcGUsZSxuLHIsbyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0XSl9LHQucHJvdG90eXBlLkxSTkdyYWQ9ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dmFyIHM9bmV3IGRpKGUuc2hhcGUscixvLGEsaSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihzLFtlLG4sdF0pfSx0LnByb3RvdHlwZS50aWxlPWZ1bmN0aW9uKHQsZSl7aWYoXCJzdHJpbmdcIj09PXQuZHR5cGUpe3ZhciBuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gWCh0KX0pO3JldHVybiBObyhabih0LnNoYXBlLHQuZHR5cGUsbiksZSl9dmFyIHI9bmV3IHFpKHQuc2hhcGUsZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSl9LHQucHJvdG90eXBlLnBhZD1mdW5jdGlvbih0LGUsbil7dmFyIHI9aS5nZXRCb29sKFwiV0VCR0xfUEFDS19BUlJBWV9PUEVSQVRJT05TXCIpP25ldyBFaSh0LnNoYXBlLGUsbik6bmV3IENpKHQuc2hhcGUsZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3RdKX0sdC5wcm90b3R5cGUudHJhbnNwb3NlPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLnRyYW5zcG9zZSh0LGUpO3ZhciBuPWkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQVJSQVlfT1BFUkFUSU9OU1wiKT9uZXcgS2kodC5zaGFwZSxlKTpuZXcgJGkodC5zaGFwZSxlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3RdKX0sdC5wcm90b3R5cGUuZ2F0aGVyPWZ1bmN0aW9uKHQsZSxuKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5nYXRoZXIodCxlLG4pO3ZhciByPW5ldyBIYSh0LnNoYXBlLGUuc2l6ZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSx0LnByb3RvdHlwZS5iYXRjaFRvU3BhY2VORD1mdW5jdGlvbih0LGUsbil7Zih0LnJhbms8PTQsZnVuY3Rpb24oKXtyZXR1cm5cImJhdGNoVG9TcGFjZU5EIGZvciByYW5rID4gNCB3aXRoIGEgV2ViR0wgYmFja2VuZCBub3QgaW1wbGVtZW50ZWQgeWV0XCJ9KTt2YXIgcj1lLnJlZHVjZShmdW5jdGlvbih0LGUpe3JldHVybiB0KmV9KSxvPU5yKHQuc2hhcGUsZSxyKSxhPVNyKG8ubGVuZ3RoLGUubGVuZ3RoKSxpPUFyKHQuc2hhcGUsZSxyKSxzPVRyKG4sZS5sZW5ndGgpLHU9RHIoaSxuLGUubGVuZ3RoKTtyZXR1cm4gdC5yZXNoYXBlKG8pLnRyYW5zcG9zZShhKS5yZXNoYXBlKGkpLnNsaWNlKHMsdSl9LHQucHJvdG90eXBlLnNwYWNlVG9CYXRjaE5EPWZ1bmN0aW9uKHQsZSxuKXtmKHQucmFuazw9NCxmdW5jdGlvbigpe3JldHVyblwic3BhY2VUb0JhdGNoTkQgZm9yIHJhbmsgPiA0IHdpdGggYSBXZWJHTCBiYWNrZW5kIG5vdCBpbXBsZW1lbnRlZCB5ZXRcIn0pO3ZhciByPWUucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQqZX0pLG89W1swLDBdXTtvLnB1c2guYXBwbHkobyxuKTtmb3IodmFyIGE9MStlLmxlbmd0aDthPHQuc2hhcGUubGVuZ3RoOysrYSlvLnB1c2goWzAsMF0pO3ZhciBpPXQucGFkKG8pLHM9TnIoaS5zaGFwZSxlLHIsITEpLHU9U3Iocy5sZW5ndGgsZS5sZW5ndGgsITEpLGw9QXIoaS5zaGFwZSxlLHIsITEpO3JldHVybiBpLnJlc2hhcGUocykudHJhbnNwb3NlKHUpLnJlc2hhcGUobCl9LHQucHJvdG90eXBlLnJlZHVjZT1mdW5jdGlvbih0LGUsbil7dmFyIHI9dC5zaGFwZVswXSxvPXQuc2hhcGVbMV0sYT1GcihvKSxpPW5ldyBraSh7d2luZG93U2l6ZTphLGluU2l6ZTpvLGJhdGNoU2l6ZTpyfSxlKSxzPWkub3V0cHV0U2hhcGUsdT1zWzBdLGw9c1sxXSxjPXRoaXMubWFrZU91dHB1dEFycmF5KFt1LGxdLG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oaSxbdF0sYyksMT09PWMuc2hhcGVbMV0/Yzp0aGlzLnJlZHVjZShjLGUsbil9LHQucHJvdG90eXBlLmFyZ1JlZHVjZT1mdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49bnVsbCk7dmFyIHI9dC5zaGFwZVswXSxvPXQuc2hhcGVbMV07bnVsbCE9biYmKHI9bi5zaGFwZVswXSxvPW4uc2hhcGVbMV0pO3ZhciBhPUZyKG8pLGk9bmV3IF9vKHt3aW5kb3dTaXplOmEsaW5TaXplOm8sYmF0Y2hTaXplOnJ9LGUsbnVsbD09bikscz1pLm91dHB1dFNoYXBlLHU9c1swXSxsPXNbMV0sYz10aGlzLm1ha2VPdXRwdXRBcnJheShbdSxsXSxcImludDMyXCIpLGg9W3RdO3JldHVybiBudWxsIT1uJiZoLnB1c2gobiksdGhpcy5jb21waWxlQW5kUnVuKGksaCxjKSwxPT09Yy5zaGFwZVsxXT9jOnRoaXMuYXJnUmVkdWNlKHQsZSxjKX0sdC5wcm90b3R5cGUuYXJnUmVkdWNlUGFja2VkPWZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj1udWxsKTt2YXIgcj1udWxsIT1uP24uc2hhcGU6dC5zaGFwZSxvPUZyKHJbci5sZW5ndGgtMV0pLGE9bmV3IFFvKHIsbyxlLG51bGw9PW4pLGk9dGhpcy5tYWtlUGFja2VkVGVuc29yKGEub3V0cHV0U2hhcGUsXCJpbnQzMlwiKSxzPW51bGw9PW4/W3RdOlt0LG5dO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oYSxzLGkpLGkucmFuaz09PXQucmFuaz90aGlzLmFyZ1JlZHVjZVBhY2tlZCh0LGUsaSk6aX0sdC5wcm90b3R5cGUuc3VtPWZ1bmN0aW9uKHQsZSl7bG4oXCJzdW1cIixlLHQucmFuayk7dmFyIG49c24odC5zaGFwZSxlKSxyPW5bMF0sbz1nKG5bMV0pLGE9dC5hczJEKC0xLG8pLGk9YnQodC5kdHlwZSk7cmV0dXJuIHRoaXMucmVkdWNlKGEsXCJzdW1cIixpKS5yZXNoYXBlKHIpfSx0LnByb3RvdHlwZS5wcm9kPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLnByb2QodCxlKTt2YXIgbj1zbih0LnNoYXBlLGUpLHI9blswXSxvPWcoblsxXSksYT10LmFzMkQoLTEsbyksaT1idCh0LmR0eXBlKTtyZXR1cm4gdGhpcy5yZWR1Y2UoYSxcInByb2RcIixpKS5yZXNoYXBlKHIpfSx0LnByb3RvdHlwZS51bnNvcnRlZFNlZ21lbnRTdW09ZnVuY3Rpb24odCxlLG4pe3ZhciByPTAsbz1jbihbcl0sdC5yYW5rKSxhPXQ7bnVsbCE9byYmKGE9dC50cmFuc3Bvc2Uobykscj1wbigxLHQucmFuaylbMF0pO3ZhciBpPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9W10sbz10Lmxlbmd0aCxhPTA7YTxvO2ErKylhIT09ZT9yLnB1c2godFthXSk6ci5wdXNoKG4pO3JldHVybiByfShhLnNoYXBlLHIsbikscz1nKFthLnNoYXBlW3JdXSksdT1hLmFzMkQoLTEscyksbD1idCh0LmR0eXBlKSxjPXRoaXMuc2VnT3BDb21wdXRlKHUsXCJ1bnNvcnRlZFNlZ21lbnRTdW1cIixlLGwsbikucmVzaGFwZShpKTtyZXR1cm4gbnVsbCE9byYmKGM9Yy50cmFuc3Bvc2UoaG4obykpKSxjfSx0LnByb3RvdHlwZS5zZWdPcENvbXB1dGU9ZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10LnNoYXBlWzBdLGk9dC5zaGFwZVsxXSxzPWZ1bmN0aW9uKHQsZSl7dmFyIG4scj0hMTtmb3IodDw9T3I/KG49dCxyPSEwKTpuPVUodCxNYXRoLmZsb29yKE1hdGguc3FydCh0KSkpOyFyOyluPmV8fG49PT10P3I9ITA6bj1VKHQsbisxKTtyZXR1cm4gbn0oaSxvKSx1PW5ldyBCaSh7d2luZG93U2l6ZTpzLGluU2l6ZTppLGJhdGNoU2l6ZTphLG51bVNlZ21lbnRzOm99LGUpLGw9dS5vdXRwdXRTaGFwZSxjPWxbMF0saD1sWzFdLHA9dGhpcy5tYWtlT3V0cHV0QXJyYXkoW2MsaF0scik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bih1LFt0LG5dLHApLHAuc2hhcGVbMV09PT1vP3A6KG49X24oMCxvKS50aWxlKFtpL3NdKSx0aGlzLnNlZ09wQ29tcHV0ZShwLGUsbixyLG8pKX0sdC5wcm90b3R5cGUuYXJnTWluTWF4UmVkdWNlPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1bZV07aWYobG4oXCJhcmdcIituLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK24uc2xpY2UoMSkscix0LnJhbmspLCFpLmdldEJvb2woXCJXRUJHTF9QQUNLX1JFRFVDRVwiKXx8dC5yYW5rPD0yKXt2YXIgbz1zbih0LnNoYXBlLHIpLGE9b1swXSxzPWcob1sxXSksdT10LmFzMkQoLTEscyk7cmV0dXJuIHRoaXMuYXJnUmVkdWNlKHUsbikucmVzaGFwZShhKX1yZXR1cm4gdGhpcy5hcmdSZWR1Y2VQYWNrZWQodCxuKX0sdC5wcm90b3R5cGUuYXJnTWluPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXJnTWluTWF4UmVkdWNlKHQsZSxcIm1pblwiKX0sdC5wcm90b3R5cGUuYXJnTWF4PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXJnTWluTWF4UmVkdWNlKHQsZSxcIm1heFwiKX0sdC5wcm90b3R5cGUuY3Vtc3VtPWZ1bmN0aW9uKHQsZSxuLHIpe2lmKGUhPT10LnJhbmstMSl0aHJvdyBuZXcgRXJyb3IoXCJXZWJHTCBjdW1zdW0gc2hhZGVyIGV4cGVjdHMgYW4gaW5uZXItbW9zdCBheGlzPVwiKyh0LnJhbmstMSkrXCIgYnV0IGdvdCBheGlzPVwiK2UpO3ZhciBvPW5ldyBTYSh0LnNoYXBlLG4scik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihvLFt0XSl9LHQucHJvdG90eXBlLmVxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIHJldHVybiB2ZWM0KGVxdWFsKGEsIGIpKTtcXG5cIixcImJvb2xcIik7dmFyIG49bmV3IGxhKFwicmV0dXJuIGZsb2F0KGEgPT0gYik7XCIsdC5zaGFwZSxlLnNoYXBlKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsXCJib29sXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxyKX0sdC5wcm90b3R5cGUubm90RXF1YWw9ZnVuY3Rpb24odCxlKXtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQobm90RXF1YWwoYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgbGEoXCJyZXR1cm4gZmxvYXQoYSAhPSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLHIpfSx0LnByb3RvdHlwZS5sZXNzPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubGVzcyh0LGUpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICByZXR1cm4gdmVjNChsZXNzVGhhbihhLCBiKSk7XFxuXCIsXCJib29sXCIpO3ZhciBuPW5ldyBsYShcInJldHVybiBmbG9hdChhIDwgYik7XCIsdC5zaGFwZSxlLnNoYXBlKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsXCJib29sXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxyKX0sdC5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIHJldHVybiB2ZWM0KGxlc3NUaGFuRXF1YWwoYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgbGEoXCJyZXR1cm4gZmxvYXQoYSA8PSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLHIpfSx0LnByb3RvdHlwZS5ncmVhdGVyPWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuZ3JlYXRlcih0LGUpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICByZXR1cm4gdmVjNChncmVhdGVyVGhhbihhLCBiKSk7XFxuXCIsXCJib29sXCIpO3ZhciBuPW5ldyBsYShcInJldHVybiBmbG9hdChhID4gYik7XCIsdC5zaGFwZSxlLnNoYXBlKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsXCJib29sXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxyKX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsPWZ1bmN0aW9uKHQsZSl7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIHJldHVybiB2ZWM0KGdyZWF0ZXJUaGFuRXF1YWwoYSwgYikpO1xcblwiLFwiYm9vbFwiKTt2YXIgbj1uZXcgbGEoXCJyZXR1cm4gZmxvYXQoYSA+PSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLHIpfSx0LnByb3RvdHlwZS5sb2dpY2FsTm90PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KCEoeCA+PSAxLjApKTtcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmxvZ2ljYWxBbmQ9ZnVuY3Rpb24odCxlKXtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZEJpbmFyeU9wKHQsZSxcIlxcbiAgcmV0dXJuIHZlYzQoXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChhLCB2ZWM0KDEuMCkpKSAqXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChiLCB2ZWM0KDEuMCkpKSk7XFxuXCIsXCJib29sXCIpO3ZhciBuPW5ldyBsYShcInJldHVybiBmbG9hdChhID49IDEuMCAmJiBiID49IDEuMCk7XCIsdC5zaGFwZSxlLnNoYXBlKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsXCJib29sXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSxyKX0sdC5wcm90b3R5cGUubG9naWNhbE9yPWZ1bmN0aW9uKHQsZSl7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIHJldHVybiBtaW4oXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChhLCB2ZWM0KDEuMCkpKSArXFxuICAgIHZlYzQoZ3JlYXRlclRoYW5FcXVhbChiLCB2ZWM0KDEuMCkpKSxcXG4gICAgdmVjNCgxLjApKTtcXG5cIixcImJvb2xcIik7dmFyIG49bmV3IGxhKFwicmV0dXJuIGZsb2F0KGEgPj0gMS4wIHx8IGIgPj0gMS4wKTtcIix0LnNoYXBlLGUuc2hhcGUpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLHIpfSx0LnByb3RvdHlwZS5zZWxlY3Q9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBQaSh0LnJhbmssZS5zaGFwZSxlLnJhbmspLG89dGhpcy5tYWtlT3V0cHV0QXJyYXkoci5vdXRwdXRTaGFwZSx4dChlLmR0eXBlLG4uZHR5cGUpKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZSxuXSxvKX0sdC5wcm90b3R5cGUud2hlcmU9ZnVuY3Rpb24odCl7WmUoXCJ0Zi53aGVyZSgpIGluIHdlYmdsIGxvY2tzIHRoZSBVSSB0aHJlYWQuIENhbGwgdGYud2hlcmVBc3luYygpIGluc3RlYWRcIik7dmFyIGU9dC5kYXRhU3luYygpO3JldHVybiBBbyh0LnNoYXBlLGUpfSx0LnByb3RvdHlwZS50b3BrPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gU28odC5kYXRhU3luYygpLHQuc2hhcGUsdC5kdHlwZSxlKX0sdC5wcm90b3R5cGUubWluPWZ1bmN0aW9uKHQsZSl7bG4oXCJtaW5cIixlLHQucmFuayk7dmFyIG49c24odC5zaGFwZSxlKSxyPW5bMF0sbz1nKG5bMV0pLGE9dC5hczJEKC0xLG8pO3JldHVybiB0aGlzLnJlZHVjZShhLFwibWluXCIsYS5kdHlwZSkucmVzaGFwZShyKX0sdC5wcm90b3R5cGUubWluaW11bT1mdW5jdGlvbih0LGUpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0LGVdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLm1pbmltdW0odCxlKTt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBoYShcIlxcbiAgdmVjNCByZXN1bHQgPSB2ZWM0KG1pbihhLCBiKSk7XFxuICB2ZWM0IGlzTmFOID0gbWluKHZlYzQoaXNuYW4oYSkpICsgdmVjNChpc25hbihiKSksIHZlYzQoMS4wKSk7XFxuICBcXG4gIHJlc3VsdC5yID0gaXNOYU4uciA+IDAuID8gTkFOIDogcmVzdWx0LnI7XFxuICByZXN1bHQuZyA9IGlzTmFOLmcgPiAwLiA/IE5BTiA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc05hTi5iID4gMC4gPyBOQU4gOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA+IDAuID8gTkFOIDogcmVzdWx0LmE7XFxuXFxuICByZXR1cm4gcmVzdWx0O1xcblwiLHQuc2hhcGUsZS5zaGFwZSk6bmV3IGxhKFwiXFxuICBpZiAoaXNuYW4oYSkpIHJldHVybiBhO1xcbiAgaWYgKGlzbmFuKGIpKSByZXR1cm4gYjtcXG5cXG4gIHJldHVybiBtaW4oYSwgYik7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0pfSx0LnByb3RvdHlwZS5tb2Q9ZnVuY3Rpb24odCxlKXt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBoYShcIlxcbiAgdmVjNCByZXN1bHQgPSBtb2QoYSwgYik7XFxuICB2ZWM0IGlzTmFOID0gdmVjNChlcXVhbChiLCB2ZWM0KDAuMCkpKTtcXG4gIFxcbiAgcmVzdWx0LnIgPSBpc05hTi5yID4gMC4gPyBOQU4gOiByZXN1bHQucjtcXG4gIHJlc3VsdC5nID0gaXNOYU4uZyA+IDAuID8gTkFOIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzTmFOLmIgPiAwLiA/IE5BTiA6IHJlc3VsdC5iO1xcbiAgcmVzdWx0LmEgPSBpc05hTi5hID4gMC4gPyBOQU4gOiByZXN1bHQuYTtcXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsdC5zaGFwZSxlLnNoYXBlKTpuZXcgbGEoXCJpZiAoYiA9PSAwLjApIHJldHVybiBOQU47XFxuICByZXR1cm4gbW9kKGEsIGIpO1wiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdKX0sdC5wcm90b3R5cGUubWF4PWZ1bmN0aW9uKHQsZSl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLm1heCh0LGUpO2xuKFwibWF4XCIsZSx0LnJhbmspO3ZhciBuPXNuKHQuc2hhcGUsZSkscj1uWzBdLG89ZyhuWzFdKSxhPXQuYXMyRCgtMSxvKTtyZXR1cm4gdGhpcy5yZWR1Y2UoYSxcIm1heFwiLGEuZHR5cGUpLnJlc2hhcGUocil9LHQucHJvdG90eXBlLm1heGltdW09ZnVuY3Rpb24odCxlKXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5tYXhpbXVtKHQsZSk7dmFyIG49aS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKT9uZXcgaGEoXCJcXG4gIHZlYzQgcmVzdWx0ID0gdmVjNChtYXgoYSwgYikpO1xcbiAgdmVjNCBpc05hTiA9IG1pbih2ZWM0KGlzbmFuKGEpKSArIHZlYzQoaXNuYW4oYikpLCB2ZWM0KDEuMCkpO1xcbiAgXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPiAwLiA/IE5BTiA6IHJlc3VsdC5yO1xcbiAgcmVzdWx0LmcgPSBpc05hTi5nID4gMC4gPyBOQU4gOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA+IDAuID8gTkFOIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPiAwLiA/IE5BTiA6IHJlc3VsdC5hO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBsYShcIlxcbiAgaWYgKGlzbmFuKGEpKSByZXR1cm4gYTtcXG4gIGlmIChpc25hbihiKSkgcmV0dXJuIGI7XFxuXFxuICByZXR1cm4gbWF4KGEsIGIpO1xcblwiLHQuc2hhcGUsZS5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdKX0sdC5wcm90b3R5cGUuYWxsPWZ1bmN0aW9uKHQsZSl7bG4oXCJhbGxcIixlLHQucmFuayk7dmFyIG49c24odC5zaGFwZSxlKSxyPW5bMF0sbz1nKG5bMV0pLGE9dC5hczJEKC0xLG8pO3JldHVybiB0aGlzLnJlZHVjZShhLFwiYWxsXCIsYS5kdHlwZSkucmVzaGFwZShyKX0sdC5wcm90b3R5cGUuYW55PWZ1bmN0aW9uKHQsZSl7bG4oXCJhbnlcIixlLHQucmFuayk7dmFyIG49c24odC5zaGFwZSxlKSxyPW5bMF0sbz1nKG5bMV0pLGE9dC5hczJEKC0xLG8pO3JldHVybiB0aGlzLnJlZHVjZShhLFwiYW55XCIsYS5kdHlwZSkucmVzaGFwZShyKX0sdC5wcm90b3R5cGUuc3F1YXJlZERpZmZlcmVuY2U9ZnVuY3Rpb24odCxlKXt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBoYShcInJldHVybiAoYSAtIGIpICogKGEgLSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBsYShcInJldHVybiAoYSAtIGIpICogKGEgLSBiKTtcIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSl9LHQucHJvdG90eXBlLnJlYWxEaXZpZGU9ZnVuY3Rpb24odCxlKXtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpKXtyZXR1cm4gdGhpcy5wYWNrZWRCaW5hcnlPcCh0LGUsXCJcXG4gIC8vIHZlYzQgb25lID0gdmVjNChlcXVhbChhLCBiKSk7XFxuICAvLyByZXR1cm4gb25lICsgKHZlYzQoMS4wKSAtIG9uZSkgKiBhIC8gYjtcXG4gIHZlYzQgcmVzdWx0ID0gYSAvIGI7XFxuICBpZihiLnggPT0gMC4wKSB7XFxuICAgIHJlc3VsdC54ID0gTkFOO1xcbiAgfSBlbHNlIGlmKGEueCA9PSBiLngpIHtcXG4gICAgcmVzdWx0LnggPSAxLjtcXG4gIH1cXG4gIGlmKGIueSA9PSAwLjApIHtcXG4gICAgcmVzdWx0LnkgPSBOQU47XFxuICB9IGVsc2UgaWYoYS55ID09IGIueSkge1xcbiAgICByZXN1bHQueSA9IDEuO1xcbiAgfVxcbiAgaWYoYi56ID09IDAuMCkge1xcbiAgICByZXN1bHQueiA9IE5BTjtcXG4gIH0gZWxzZSBpZihhLnogPT0gYi56KSB7XFxuICAgIHJlc3VsdC56ID0gMS47XFxuICB9XFxuICBpZihiLncgPT0gMC4wKSB7XFxuICAgIHJlc3VsdC53ID0gTkFOO1xcbiAgfSBlbHNlIGlmKGEudyA9PSBiLncpIHtcXG4gICAgcmVzdWx0LncgPSAxLjtcXG4gIH1cXG5cXG4gIHJldHVybiByZXN1bHQ7XFxuXCIsXCJmbG9hdDMyXCIsITApfXZhciBuPW5ldyBsYShcIlxcbmlmIChiID09IDAuMCkge1xcbiAgcmV0dXJuIE5BTjtcXG59XFxuaWYgKGEgPT0gYikge1xcbiAgcmV0dXJuIDEuMDtcXG59O1xcbnJldHVybiBhIC8gYjtcIix0LnNoYXBlLGUuc2hhcGUpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImZsb2F0MzJcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0LGVdLHIpfSx0LnByb3RvdHlwZS5mbG9vckRpdj1mdW5jdGlvbih0LGUpe2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLFwiXFxuICBpdmVjNCBpYSA9IHJvdW5kKGEpO1xcbiAgaXZlYzQgaWIgPSByb3VuZChiKTtcXG4gIGJ2ZWM0IGNvbmQgPSBub3RFcXVhbChpYiwgaXZlYzQoMCkpO1xcbiAgaXZlYzQgcmVzdWx0ID0gaXZlYzQoMCk7XFxuICB2ZWM0IHMgPSBzaWduKGEpICogc2lnbihiKTtcXG5cXG4gIC8vIFdpbmRvd3MgKEQzRCkgd2FudHMgZ3VhcmFudGVlZCBub24temVybyBpbnQgZGl2aXNpb24gYXQgY29tcGlsZS10aW1lLlxcbiAgaWYgKGNvbmRbMF0pIHtcXG4gICAgcmVzdWx0WzBdID0gaWRpdihpYVswXSwgaWJbMF0sIHNbMF0pO1xcbiAgfVxcbiAgaWYgKGNvbmRbMV0pIHtcXG4gICAgcmVzdWx0WzFdID0gaWRpdihpYVsxXSwgaWJbMV0sIHNbMV0pO1xcbiAgfVxcbiAgaWYgKGNvbmRbMl0pIHtcXG4gICAgcmVzdWx0WzJdID0gaWRpdihpYVsyXSwgaWJbMl0sIHNbMl0pO1xcbiAgfVxcbiAgaWYgKGNvbmRbM10pIHtcXG4gICAgcmVzdWx0WzNdID0gaWRpdihpYVszXSwgaWJbM10sIHNbM10pO1xcbiAgfVxcbiAgcmV0dXJuIHZlYzQocmVzdWx0KTtcXG5cIixcImludDMyXCIpO3ZhciBuPW5ldyBsYShcIlxcbiAgZmxvYXQgcyA9IHNpZ24oYSkgKiBzaWduKGIpO1xcbiAgaW50IGlhID0gcm91bmQoYSk7XFxuICBpbnQgaWIgPSByb3VuZChiKTtcXG4gIGlmIChpYiAhPSAwKSB7XFxuICAgIC8vIFdpbmRvd3MgKEQzRCkgd2FudHMgZ3VhcmFudGVlZCBub24temVybyBpbnQgZGl2aXNpb24gYXQgY29tcGlsZS10aW1lLlxcbiAgICByZXR1cm4gZmxvYXQoaWRpdihpYSwgaWIsIHMpKTtcXG4gIH0gZWxzZSB7XFxuICAgIHJldHVybiBOQU47XFxuICB9XFxuXCIsdC5zaGFwZSxlLnNoYXBlKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsXCJpbnQzMlwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0scil9LHQucHJvdG90eXBlLmFkZD1mdW5jdGlvbih0LGUpe2lmKFwiY29tcGxleDY0XCI9PT10LmR0eXBlJiZcImNvbXBsZXg2NFwiPT09ZS5kdHlwZSlyZXR1cm4gdGhpcy5jb21wbGV4U2VwYXJhYmxlQmluYXJ5T3AodCxlLGFhKTtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdCxlXSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5hZGQodCxlKTt2YXIgbj14dCh0LmR0eXBlLGUuZHR5cGUpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLGFhLG4pO3ZhciByPW5ldyBsYShhYSx0LnNoYXBlLGUuc2hhcGUpLG89dGhpcy5tYWtlT3V0cHV0QXJyYXkoci5vdXRwdXRTaGFwZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0sbyl9LHQucHJvdG90eXBlLnBhY2tlZFVuYXJ5T3A9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBncyh0LnNoYXBlLGUpLG89dGhpcy5tYWtlUGFja2VkVGVuc29yKHIub3V0cHV0U2hhcGUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSxvKX0sdC5wcm90b3R5cGUucGFja2VkQmluYXJ5T3A9ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1vJiYobz0hMSk7dmFyIGE9bmV3IGhhKG4sdC5zaGFwZSxlLnNoYXBlLG8pLGk9dGhpcy5tYWtlUGFja2VkVGVuc29yKGEub3V0cHV0U2hhcGUscik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihhLFt0LGVdLGkpfSx0LnByb3RvdHlwZS5jb21wbGV4U2VwYXJhYmxlQmluYXJ5T3A9ZnVuY3Rpb24odCxlLG4pe3ZhciByPXRoaXMsbz10aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKSxhPXRoaXMudGV4RGF0YS5nZXQoZS5kYXRhSWQpLGk9W1tvLmNvbXBsZXhUZW5zb3JzLnJlYWwsYS5jb21wbGV4VGVuc29ycy5yZWFsXSxbby5jb21wbGV4VGVuc29ycy5pbWFnLGEuY29tcGxleFRlbnNvcnMuaW1hZ11dLm1hcChmdW5jdGlvbihvKXt2YXIgYT1vWzBdLGk9b1sxXSxzPXIubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGUodCxhKSx1PXIubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGUoZSxpKSxsPW5ldyBsYShuLHQuc2hhcGUsZS5zaGFwZSksYz1yLm1ha2VPdXRwdXRBcnJheShsLm91dHB1dFNoYXBlLHh0KGEuZHR5cGUsaS5kdHlwZSkpO3JldHVybiByLmNvbXBpbGVBbmRSdW4obCxbcyx1XSxjKX0pLHM9aVswXSx1PWlbMV0sbD10aGlzLmNvbXBsZXgocyx1KTtyZXR1cm4gcy5kaXNwb3NlKCksdS5kaXNwb3NlKCksbH0sdC5wcm90b3R5cGUubWFrZUNvbXBsZXhDb21wb25lbnRUZW5zb3JIYW5kbGU9ZnVuY3Rpb24odCxlKXtyZXR1cm57ZGF0YUlkOmUuZGF0YUlkLGR0eXBlOmUuZHR5cGUsc2hhcGU6dC5zaGFwZX19LHQucHJvdG90eXBlLmFkZE49ZnVuY3Rpb24odCl7aWYoMT09PXQubGVuZ3RoKXJldHVybiB0WzBdO2lmKHQubGVuZ3RoPmkuZ2V0KFwiV0VCR0xfTUFYX1RFWFRVUkVTX0lOX1NIQURFUlwiKSl7dmFyIGU9TWF0aC5mbG9vcih0Lmxlbmd0aC8yKSxuPXRoaXMuYWRkTih0LnNsaWNlKDAsZSkpLHI9dGhpcy5hZGROKHQuc2xpY2UoZSkpO3JldHVybiB0aGlzLmFkZE4oW24scl0pfXZhciBvPXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LmR0eXBlfSkucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHh0KHQsZSl9KSxhPXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNoYXBlfSkscz1pLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpLHU9cz9uZXcgRG8odFswXS5zaGFwZSxhKTpuZXcgVG8odFswXS5zaGFwZSxhKSxsPXM/dGhpcy5tYWtlUGFja2VkVGVuc29yKHUub3V0cHV0U2hhcGUsbyk6dGhpcy5tYWtlT3V0cHV0QXJyYXkodS5vdXRwdXRTaGFwZSxvKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHUsdCxsKX0sdC5wcm90b3R5cGUuc3VidHJhY3Q9ZnVuY3Rpb24odCxlKXtpZihcImNvbXBsZXg2NFwiPT09dC5kdHlwZSYmXCJjb21wbGV4NjRcIj09PWUuZHR5cGUpcmV0dXJuIHRoaXMuY29tcGxleFNlcGFyYWJsZUJpbmFyeU9wKHQsZSxpYSk7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3QsZV0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuc3VidHJhY3QodCxlKTt2YXIgbj14dCh0LmR0eXBlLGUuZHR5cGUpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkQmluYXJ5T3AodCxlLGlhLHQuZHR5cGUpO3ZhciByPW5ldyBsYShpYSx0LnNoYXBlLGUuc2hhcGUpLG89dGhpcy5tYWtlT3V0cHV0QXJyYXkoci5vdXRwdXRTaGFwZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0sbyl9LHQucHJvdG90eXBlLnBvdz1mdW5jdGlvbih0LGUpe3ZhciBuPWkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfQklOQVJZX09QRVJBVElPTlNcIikscj1uP25ldyBoYShcIlxcbiAgLy8gaXNNb2RSb3VuZDEgaGFzIDEgZm9yIGNvbXBvbmVudHMgd2l0aCByb3VuZChtb2QoYiwgMi4wKSkgPT0gMSwgMCBvdGhlcndpc2UuXFxuICB2ZWM0IGlzTW9kUm91bmQxID0gdmVjNChlcXVhbChyb3VuZChtb2QoYiwgMi4wKSksIGl2ZWM0KDEpKSk7XFxuICB2ZWM0IG11bHRpcGxpZXIgPSBzaWduKGEpICogaXNNb2RSb3VuZDEgKyAodmVjNCgxLjApIC0gaXNNb2RSb3VuZDEpO1xcbiAgdmVjNCByZXN1bHQgPSBtdWx0aXBsaWVyICogcG93KGFicyhhKSwgYik7XFxuXFxuICAvLyBFbnN1cmUgdGhhdCBhXjAgPSAxLCBpbmNsdWRpbmcgMF4wID0gMSBhcyB0aGlzIGNvcnJlc3BvbmQgdG8gVEYgYW5kIEpTXFxuICBidmVjNCBpc0V4cFplcm8gPSBlcXVhbChiLCB2ZWM0KDAuMCkpO1xcbiAgcmVzdWx0LnIgPSBpc0V4cFplcm8uciA/IDEuMCA6IHJlc3VsdC5yO1xcbiAgcmVzdWx0LmcgPSBpc0V4cFplcm8uZyA/IDEuMCA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc0V4cFplcm8uYiA/IDEuMCA6IHJlc3VsdC5iO1xcbiAgcmVzdWx0LmEgPSBpc0V4cFplcm8uYSA/IDEuMCA6IHJlc3VsdC5hO1xcblxcbiAgdmVjNCBpc05hTiA9IHZlYzQobGVzc1RoYW4oYSwgdmVjNCgwLjApKSkgKiB2ZWM0KGxlc3NUaGFuKGZsb29yKGIpLCBiKSk7XFxuICBcXG4gIHJlc3VsdC5yID0gaXNOYU4uciA+IDAuID8gTkFOIDogcmVzdWx0LnI7XFxuICByZXN1bHQuZyA9IGlzTmFOLmcgPiAwLiA/IE5BTiA6IHJlc3VsdC5nO1xcbiAgcmVzdWx0LmIgPSBpc05hTi5iID4gMC4gPyBOQU4gOiByZXN1bHQuYjtcXG4gIHJlc3VsdC5hID0gaXNOYU4uYSA+IDAuID8gTkFOIDogcmVzdWx0LmE7XFxuXFxuICByZXR1cm4gcmVzdWx0O1xcblwiLHQuc2hhcGUsZS5zaGFwZSk6bmV3IGxhKFwiXFxuaWYoYSA8IDAuMCAmJiBmbG9vcihiKSA8IGIpe1xcbiAgcmV0dXJuIE5BTjtcXG59XFxuaWYgKGIgPT0gMC4wKSB7XFxuICByZXR1cm4gMS4wO1xcbn1cXG5yZXR1cm4gKHJvdW5kKG1vZChiLCAyLjApKSAhPSAxKSA/XFxuICAgIHBvdyhhYnMoYSksIGIpIDogc2lnbihhKSAqIHBvdyhhYnMoYSksIGIpO1xcblwiLHQuc2hhcGUsZS5zaGFwZSksbz14dCh0LmR0eXBlLGUuZHR5cGUpLGE9bj90aGlzLm1ha2VQYWNrZWRUZW5zb3Ioci5vdXRwdXRTaGFwZSxvKTp0aGlzLm1ha2VPdXRwdXRBcnJheShyLm91dHB1dFNoYXBlLG8pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSxhKX0sdC5wcm90b3R5cGUuY2VpbD1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuY2VpbCh0KTtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkVW5hcnlPcCh0LG9zLHQuZHR5cGUpO3ZhciBlPW5ldyBZaSh0LnNoYXBlLG9zKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuZmxvb3I9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLmZsb29yKHQpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfVU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRVbmFyeU9wKHQsYXMsdC5kdHlwZSk7dmFyIGU9bmV3IFlpKHQuc2hhcGUsYXMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5zaWduPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwiXFxuICBpZiAoaXNuYW4oeCkpIHsgcmV0dXJuIDAuMDsgfVxcbiAgcmV0dXJuIHNpZ24oeCk7XFxuXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5pc05hTj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWWkodC5zaGFwZSxcInJldHVybiBmbG9hdChpc25hbih4KSk7XCIpLG49dGhpcy5tYWtlT3V0cHV0QXJyYXkoZS5vdXRwdXRTaGFwZSxcImJvb2xcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSxuKX0sdC5wcm90b3R5cGUuaXNJbmY9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFlpKHQuc2hhcGUsXCJyZXR1cm4gZmxvYXQoaXNpbmYoeCkpO1wiKSxuPXRoaXMubWFrZU91dHB1dEFycmF5KGUub3V0cHV0U2hhcGUsXCJib29sXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0sbil9LHQucHJvdG90eXBlLmlzRmluaXRlPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KCFpc25hbih4KSAmJiAhaXNpbmYoeCkpO1wiKSxuPXRoaXMubWFrZU91dHB1dEFycmF5KGUub3V0cHV0U2hhcGUsXCJib29sXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0sbil9LHQucHJvdG90eXBlLnJvdW5kPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwiXFxuICAvLyBPcGVuR0wgRVMgZG9lcyBub3Qgc3VwcG9ydCByb3VuZCBmdW5jdGlvbi5cXG4gIC8vIFRoZSBhbGdvcml0aG0gaXMgYmFzZWQgb24gYmFua2VyJ3Mgcm91bmRpbmcuXFxuICBmbG9hdCBiYXNlID0gZmxvb3IoeCk7XFxuICBpZiAoKHggLSBiYXNlKSA8IDAuNSkge1xcbiAgICByZXR1cm4gZmxvb3IoeCk7XFxuICB9IGVsc2UgaWYgKCh4IC0gYmFzZSkgPiAwLjUpIHtcXG4gICAgcmV0dXJuIGNlaWwoeCk7XFxuICB9IGVsc2Uge1xcbiAgICBpZiAobW9kKGJhc2UsIDIuMCkgPT0gMC4wKSB7XFxuICAgICAgcmV0dXJuIGJhc2U7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgcmV0dXJuIGJhc2UgKyAxLjA7XFxuICAgIH1cXG4gIH1cXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmV4cD1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuZXhwKHQpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfVU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRVbmFyeU9wKHQsaXMsdC5kdHlwZSk7dmFyIGU9bmV3IFlpKHQuc2hhcGUsaXMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5leHBtMT1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQuZXhwbTEodCk7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxzcyx0LmR0eXBlKTt2YXIgZT1uZXcgWWkodC5zaGFwZSxzcyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmxvZz1mdW5jdGlvbih0KXtpZih0aGlzLnNob3VsZEV4ZWN1dGVPbkNQVShbdF0pKXJldHVybiB0aGlzLmNwdUJhY2tlbmQubG9nKHQpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX1BBQ0tfVU5BUllfT1BFUkFUSU9OU1wiKSlyZXR1cm4gdGhpcy5wYWNrZWRVbmFyeU9wKHQsXCJcXG4gIHZlYzQgcmVzdWx0ID0gbG9nKHgpO1xcbiAgdmVjNCBpc05hTiA9IHZlYzQobGVzc1RoYW4oeCwgdmVjNCgwLjApKSk7XFxuICByZXN1bHQuciA9IGlzTmFOLnIgPT0gMS4wID8gTkFOIDogcmVzdWx0LnI7XFxuICByZXN1bHQuZyA9IGlzTmFOLmcgPT0gMS4wID8gTkFOIDogcmVzdWx0Lmc7XFxuICByZXN1bHQuYiA9IGlzTmFOLmIgPT0gMS4wID8gTkFOIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPT0gMS4wID8gTkFOIDogcmVzdWx0LmE7XFxuXFxuICByZXR1cm4gcmVzdWx0O1xcblwiLHQuZHR5cGUpO3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwiaWYgKHggPCAwLjApIHJldHVybiBOQU47XFxuICByZXR1cm4gbG9nKHgpO1wiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUubG9nMXA9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFlpKHQuc2hhcGUsXCJyZXR1cm4gbG9nKDEuMCArIHgpO1wiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuc3FydD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWWkodC5zaGFwZSxcInJldHVybiBzcXJ0KHgpO1wiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUucnNxcnQ9ZnVuY3Rpb24odCl7aWYodGhpcy5zaG91bGRFeGVjdXRlT25DUFUoW3RdKSlyZXR1cm4gdGhpcy5jcHVCYWNrZW5kLnJzcXJ0KHQpO3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwicmV0dXJuIGludmVyc2VzcXJ0KHgpO1wiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuc3F1YXJlPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwicmV0dXJuIHggKiB4O1wiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUucmVjaXByb2NhbD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWWkodC5zaGFwZSxcInJldHVybiAxLjAgLyB4O1wiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUucmVsdT1mdW5jdGlvbih0KXt2YXIgZTtyZXR1cm4gZT1pLmdldEJvb2woXCJXRUJHTF9QQUNLXCIpP25ldyBncyh0LnNoYXBlLHZzKTpuZXcgWWkodC5zaGFwZSx0cyksdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUucHJlbHU9ZnVuY3Rpb24odCxlKXt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBoYShjYSx0LnNoYXBlLGUuc2hhcGUpOm5ldyBsYSh1YSx0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSl9LHQucHJvdG90eXBlLmVsdT1mdW5jdGlvbih0KXtpZihpLmdldEJvb2woXCJXRUJHTF9QQUNLX1VOQVJZX09QRVJBVElPTlNcIikpcmV0dXJuIHRoaXMucGFja2VkVW5hcnlPcCh0LG1zLHQuZHR5cGUpO3ZhciBlPW5ldyBZaSh0LnNoYXBlLGVzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuZWx1RGVyPWZ1bmN0aW9uKHQsZSl7dmFyIG49aS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKT9uZXcgaGEoXCJcXG4gIHZlYzQgYkdURVplcm8gPSB2ZWM0KGdyZWF0ZXJUaGFuRXF1YWwoYiwgdmVjNCgwLikpKTtcXG4gIHJldHVybiAoYkdURVplcm8gKiBhKSArICgodmVjNCgxLjApIC0gYkdURVplcm8pICogKGEgKiAoYiArIHZlYzQoMS4wKSkpKTtcXG5cIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBsYShcInJldHVybiAoYiA+PSAxLjApID8gYSA6IGEgKiAoYiArIDEuMCk7XCIsdC5zaGFwZSxlLnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3QsZV0pfSx0LnByb3RvdHlwZS5zZWx1PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLG5zKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuaW50PWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwicmV0dXJuIGZsb2F0KGludCh4KSk7XCIpLG49dGhpcy5tYWtlT3V0cHV0QXJyYXkoZS5vdXRwdXRTaGFwZSxcImludDMyXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0sbil9LHQucHJvdG90eXBlLmNsaXA9ZnVuY3Rpb24odCxlLG4pe3ZhciByLG89KHI9aS5nZXRCb29sKFwiV0VCR0xfUEFDS19DTElQXCIpP25ldyBmYSh0LnNoYXBlKTpuZXcgcGEodC5zaGFwZSkpLmdldEN1c3RvbVNldHVwRnVuYyhlLG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdF0sbnVsbCxvKX0sdC5wcm90b3R5cGUuYWJzPWZ1bmN0aW9uKHQpe2lmKHRoaXMuc2hvdWxkRXhlY3V0ZU9uQ1BVKFt0XSkpcmV0dXJuIHRoaXMuY3B1QmFja2VuZC5hYnModCk7aWYoaS5nZXRCb29sKFwiV0VCR0xfUEFDS19VTkFSWV9PUEVSQVRJT05TXCIpKXJldHVybiB0aGlzLnBhY2tlZFVuYXJ5T3AodCxaaSx0LmR0eXBlKTt2YXIgZT1uZXcgWWkodC5zaGFwZSxaaSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmNvbXBsZXhBYnM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy50ZXhEYXRhLmdldCh0LmRhdGFJZCksbj1uZXcgZGEodC5zaGFwZSkscj1bdGhpcy5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZSh0LGUuY29tcGxleFRlbnNvcnMucmVhbCksdGhpcy5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZSh0LGUuY29tcGxleFRlbnNvcnMuaW1hZyldO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixyKX0sdC5wcm90b3R5cGUuc2lnbW9pZD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWWkodC5zaGFwZSxcInJldHVybiAxLjAgLyAoMS4wICsgZXhwKC0xLjAgKiB4KSk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5zb2Z0cGx1cz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWWkodC5zaGFwZSxcIlxcbiAgZmxvYXQgZXBzaWxvbiA9IDEuMTkyMDkyODk1NTA3ODEyNWUtNztcXG4gIGZsb2F0IHRocmVzaG9sZCA9IGxvZyhlcHNpbG9uKSArIDIuMDtcXG5cXG4gIGJvb2wgdG9vX2xhcmdlID0geCA+IC10aHJlc2hvbGQ7XFxuICBib29sIHRvb19zbWFsbCA9IHggPCB0aHJlc2hvbGQ7XFxuXFxuICBmbG9hdCByZXN1bHQ7XFxuICBmbG9hdCBleHBfeCA9IGV4cCh4KTtcXG5cXG4gIGlmICh0b29fbGFyZ2Upe1xcbiAgICByZXN1bHQgPSB4O1xcbiAgfVxcbiAgZWxzZSBpZiAodG9vX3NtYWxsKXtcXG4gICAgcmVzdWx0ID0gZXhwX3g7XFxuICB9XFxuICBlbHNle1xcbiAgICByZXN1bHQgPSBsb2coZXhwX3ggKyAxLjApO1xcbiAgfVxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLnNpbj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWWkodC5zaGFwZSx1cyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmNvcz1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWWkodC5zaGFwZSxscyk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLnRhbj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWWkodC5zaGFwZSxcInJldHVybiB0YW4oeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5hc2luPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwicmV0dXJuIGFzaW4oeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5hY29zPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwicmV0dXJuIGFjb3MoeCk7XCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5hdGFuPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLGNzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuYXRhbjI9ZnVuY3Rpb24odCxlKXt2YXIgbj1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0JJTkFSWV9PUEVSQVRJT05TXCIpP25ldyBoYShcIlxcbiAgdmVjNCByZXN1bHQgPSBhdGFuKGEsIGIpO1xcbiAgdmVjNCBpc05hTiA9IG1pbih2ZWM0KGlzbmFuKGEpKSArIHZlYzQoaXNuYW4oYikpLCB2ZWM0KDEuMCkpO1xcbiAgXFxuICByZXN1bHQuciA9IGlzTmFOLnIgPiAwLiA/IE5BTiA6IHJlc3VsdC5yO1xcbiAgcmVzdWx0LmcgPSBpc05hTi5nID4gMC4gPyBOQU4gOiByZXN1bHQuZztcXG4gIHJlc3VsdC5iID0gaXNOYU4uYiA+IDAuID8gTkFOIDogcmVzdWx0LmI7XFxuICByZXN1bHQuYSA9IGlzTmFOLmEgPiAwLiA/IE5BTiA6IHJlc3VsdC5hO1xcblxcbiAgcmV0dXJuIHJlc3VsdDtcXG5cIix0LnNoYXBlLGUuc2hhcGUpOm5ldyBsYShcIlxcbiAgaWYgKGlzbmFuKGEpKSByZXR1cm4gYTtcXG4gIGlmIChpc25hbihiKSkgcmV0dXJuIGI7XFxuXFxuICByZXR1cm4gYXRhbihhLCBiKTtcXG5cIix0LnNoYXBlLGUuc2hhcGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdCxlXSl9LHQucHJvdG90eXBlLnNpbmg9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFlpKHQuc2hhcGUsXCJcXG4gIGZsb2F0IGUyeCA9IGV4cCh4KTtcXG4gIHJldHVybiAoZTJ4IC0gMS4wIC8gZTJ4KSAvIDIuMDtcXG5cIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmNvc2g9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFlpKHQuc2hhcGUsXCJcXG4gIGZsb2F0IGUyeCA9IGV4cCgteCk7XFxuICByZXR1cm4gKGUyeCArIDEuMCAvIGUyeCkgLyAyLjA7XFxuXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS50YW5oPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLFwiXFxuICBmbG9hdCBlMnggPSBleHAoLTIuMCAqIGFicyh4KSk7XFxuICByZXR1cm4gc2lnbih4KSAqICgxLjAgLSBlMngpIC8gKDEuMCArIGUyeCk7XFxuXCIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5hc2luaD1mdW5jdGlvbih0KXt2YXIgZT1uZXcgWWkodC5zaGFwZSxcInJldHVybiBsb2coeCArIHNxcnQoeCAqIHggKyAxLjApKTtcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSl9LHQucHJvdG90eXBlLmFjb3NoPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBZaSh0LnNoYXBlLGhzKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdKX0sdC5wcm90b3R5cGUuYXRhbmg9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFlpKHQuc2hhcGUscHMpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5lcmY9ZnVuY3Rpb24odCl7dmFyIGU9bmV3IFlpKHQuc2hhcGUsJ1xcbiAgLy8gRXJyb3IgZnVuY3Rpb24gaXMgY2FsY3VsYXRlZCBhcHByb3hpbWF0ZWx5IHdpdGggZWxlbWVudGFyeSBmdW5jdGlvbi5cXG4gIC8vIFNlZSBcIkhhbmRib29rIG9mIE1hdGhlbWF0aWNhbCBGdW5jdGlvbnMgd2l0aCBGb3JtdWxhcyxcXG4gIC8vIEdyYXBocywgYW5kIE1hdGhlbWF0aWNhbCBUYWJsZXNcIiwgQWJyYW1vd2l0eiBhbmQgU3RlZ3VuLlxcbiAgZmxvYXQgcCA9IDAuMzI3NTkxMTtcXG4gIGZsb2F0IGExID0gMC4yNTQ4Mjk1OTI7XFxuICBmbG9hdCBhMiA9IC0wLjI4NDQ5NjczNjtcXG4gIGZsb2F0IGEzID0gMS40MjE0MTM3NDE7XFxuICBmbG9hdCBhNCA9IC0xLjQ1MzE1MjAyNztcXG4gIGZsb2F0IGE1ID0gMS4wNjE0MDU0Mjk7XFxuXFxuICBmbG9hdCB0ID0gMS4wIC8gKDEuMCArIHAgKiB4KTtcXG4gIHJldHVybiAxLjAgLSAoKCgoKGE1KnQgKyBhNCkqdCkgKyBhMykqdCArIGEyKSp0ICsgYTEpKnQqZXhwKC14KngpO1xcbicpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5zdGVwPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IFlpKHQuc2hhcGUsZnVuY3Rpb24odCl7cmV0dXJuIHZvaWQgMD09PXQmJih0PTApLFFpK1wiXFxuICAgIHJldHVybiB4ID4gMC4wID8gMS4wIDogZmxvYXQoXCIrdCtcIik7XFxuICBcIn0oZSkpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obixbdF0pfSx0LnByb3RvdHlwZS5jb252MmRCeU1hdE11bD1mdW5jdGlvbih0LGUsbixyLG8sYSl7dmFyIHM9dC5zaGFwZSx1PXRoaXMudGV4RGF0YS5nZXQodC5kYXRhSWQpLGw9bi5pbkNoYW5uZWxzLGM9c1swXSpzWzFdKnNbMl0saD1uLm91dENoYW5uZWxzLHA9XCJjaGFubmVsc0xhc3RcIj09PW4uZGF0YUZvcm1hdCxkPSgxPT09Y3x8MT09PWgpJiZsPjFlMyx2PXNbMl0lMiE9MCYmISF1LmlzUGFja2VkO2lmKGR8fCFpLmdldEJvb2woXCJXRUJHTF9MQVpJTFlfVU5QQUNLXCIpfHwhaS5nZXRCb29sKFwiV0VCR0xfUEFDS19CSU5BUllfT1BFUkFUSU9OU1wiKXx8IXYpe3ZhciBtPXA/c1swXSpzWzFdKnNbMl06c1swXSpzWzJdKnNbM10sZz10aGlzLnJlc2hhcGUodCxbMSxtLG4uaW5DaGFubmVsc10pLHk9dGhpcy5yZXNoYXBlKGUsWzEsbi5pbkNoYW5uZWxzLG4ub3V0Q2hhbm5lbHNdKTtyZXR1cm4gdGhpcy5yZXNoYXBlKHRoaXMuZnVzZWRCYXRjaE1hdE11bCh7YTpnLGI6eSx0cmFuc3Bvc2VBOiExLHRyYW5zcG9zZUI6ITEsYmlhczpyLGFjdGl2YXRpb246byxwcmVsdUFjdGl2YXRpb25XZWlnaHRzOmF9KSxuLm91dFNoYXBlKX12YXIgeD1wP3NbMF0qc1sxXSooc1syXSsxKTpzWzBdKnNbMl0qKHNbM10rMSksYj1jdC5tYWtlKFsxLHgsbi5pbkNoYW5uZWxzXSx7ZGF0YUlkOnQuZGF0YUlkfSx0LmR0eXBlLHRoaXMpLHc9dS5zaGFwZTt1LnNoYXBlPXUuc2hhcGUuc2xpY2UoKSx1LnNoYXBlW3Uuc2hhcGUubGVuZ3RoLTJdKyssZihDZSh1LnNoYXBlLGIuc2hhcGUpLGZ1bmN0aW9uKCl7cmV0dXJuXCJwYWNrZWQgcmVzaGFwZSBcIit1LnNoYXBlK1wiIHRvIFwiK2Iuc2hhcGUrXCIgaXNuJ3QgZnJlZVwifSk7dmFyIEM9dGhpcy5yZXNoYXBlKGUsWzEsbi5pbkNoYW5uZWxzLG4ub3V0Q2hhbm5lbHNdKSxFPXRoaXMuZnVzZWRCYXRjaE1hdE11bCh7YTpiLGI6Qyx0cmFuc3Bvc2VBOiExLHRyYW5zcG9zZUI6ITEsYmlhczpyLGFjdGl2YXRpb246byxwcmVsdUFjdGl2YXRpb25XZWlnaHRzOmF9KSxSPXRoaXMudGV4RGF0YS5nZXQoRS5kYXRhSWQpO3JldHVybiBmKFIuaXNQYWNrZWQsZnVuY3Rpb24oKXtyZXR1cm5cImJhdGNoTWF0TXVsIHJlc3VsdCBpcyBleHBlY3RlZCB0byBiZSBwYWNrZWRcIn0pLHUuc2hhcGU9dyxSLnNoYXBlPW4ub3V0U2hhcGUsY3QubWFrZShuLm91dFNoYXBlLHtkYXRhSWQ6RS5kYXRhSWR9LEUuZHR5cGUsdGhpcyl9LHQucHJvdG90eXBlLmNvbnYyZFdpdGhJbTJSb3c9ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPW4uZmlsdGVyV2lkdGgscz1uLmZpbHRlckhlaWdodCx1PW4uaW5DaGFubmVscyxsPW4ub3V0V2lkdGgsYz1uLm91dEhlaWdodCxoPVwiY2hhbm5lbHNMYXN0XCI9PT1uLmRhdGFGb3JtYXQscD1pKnMqdSxmPWMqbCxkPVtwLGZdLHY9dC5zcXVlZXplKFswXSksbT1lLnJlc2hhcGUoWzEscCwtMV0pLGc9bmV3IHBpKGQsdi5zaGFwZSxuKSx5PXRoaXMuY29tcGlsZUFuZFJ1bihnLFt2XSkucmVzaGFwZShbMSxkWzBdLGRbMV1dKSx4PW51bGwhPXIsYj1udWxsIT1hLHc9bz9icyhvLCEwKTpudWxsLEM9bmV3IHlpKHkuc2hhcGUsWzEsZixuLm91dENoYW5uZWxzXSwhMCwhMSx4LHcsYiksRT1beSxtXTtyJiZFLnB1c2gociksYiYmRS5wdXNoKGEpO3ZhciBSPXRoaXMuY29tcGlsZUFuZFJ1bihDLEUpO3JldHVybiBoP1IucmVzaGFwZShbMSxjLGwsbi5vdXRDaGFubmVsc10pOlIucmVzaGFwZShbMSxuLm91dENoYW5uZWxzLGMsbF0pfSx0LnByb3RvdHlwZS5mdXNlZENvbnYyZD1mdW5jdGlvbih0LGUsbixyLG8sYSl7aWYoMT09PW4uZmlsdGVySGVpZ2h0JiYxPT09bi5maWx0ZXJXaWR0aCYmMT09PW4uZGlsYXRpb25IZWlnaHQmJjE9PT1uLmRpbGF0aW9uV2lkdGgmJjE9PT1uLnN0cmlkZUhlaWdodCYmMT09PW4uc3RyaWRlV2lkdGgmJihcIlNBTUVcIj09PW4ucGFkSW5mby50eXBlfHxcIlZBTElEXCI9PT1uLnBhZEluZm8udHlwZSkpcmV0dXJuIHRoaXMuY29udjJkQnlNYXRNdWwodCxlLG4scixvLGEpO2lmKGkuZ2V0Qm9vbChcIldFQkdMX0NPTlZfSU0yQ09MXCIpJiYxPT09dC5zaGFwZVswXSlyZXR1cm4gdGhpcy5jb252MmRXaXRoSW0yUm93KHQsZSxuLHIsbyxhKTt2YXIgcz1udWxsIT1yLHU9bnVsbCE9YSxsPW8/YnMobywhMSk6bnVsbCxjPW5ldyBFYShuLHMsbCx1KSxoPVt0LGVdO3JldHVybiByJiZoLnB1c2gociksYSYmaC5wdXNoKGEpLHRoaXMuY29tcGlsZUFuZFJ1bihjLGgpfSx0LnByb3RvdHlwZS5jb252MmQ9ZnVuY3Rpb24odCxlLG4pe2lmKDE9PT1uLmZpbHRlckhlaWdodCYmMT09PW4uZmlsdGVyV2lkdGgmJjE9PT1uLmRpbGF0aW9uSGVpZ2h0JiYxPT09bi5kaWxhdGlvbldpZHRoJiYxPT09bi5zdHJpZGVIZWlnaHQmJjE9PT1uLnN0cmlkZVdpZHRoJiYoXCJTQU1FXCI9PT1uLnBhZEluZm8udHlwZXx8XCJWQUxJRFwiPT09bi5wYWRJbmZvLnR5cGUpKXJldHVybiB0aGlzLmNvbnYyZEJ5TWF0TXVsKHQsZSxuKTtpZihpLmdldEJvb2woXCJXRUJHTF9DT05WX0lNMkNPTFwiKSYmMT09PXQuc2hhcGVbMF0pcmV0dXJuIHRoaXMuY29udjJkV2l0aEltMlJvdyh0LGUsbik7dmFyIHI9bmV3IEVhKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSl9LHQucHJvdG90eXBlLmNvbnYyZERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uZXcgeWEobik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGVdKX0sdC5wcm90b3R5cGUuY29udjJkRGVyRmlsdGVyPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uZXcgZ2Eobik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0LGVdKX0sdC5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJEPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcjtyZXR1cm4gaS5nZXRCb29sKFwiV0VCR0xfUEFDS19ERVBUSFdJU0VDT05WXCIpJiZuLnN0cmlkZVdpZHRoPD0yJiZuLm91dENoYW5uZWxzL24uaW5DaGFubmVscz09MT8ocj1uZXcga2EobiksdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0sdGhpcy5tYWtlUGFja2VkVGVuc29yKG4ub3V0U2hhcGUsdC5kdHlwZSkpKToocj1uZXcgSWEobiksdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pKX0sdC5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJERGVySW5wdXQ9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBDYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSx0LnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkREZXJGaWx0ZXI9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyB3YShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSx0LnByb3RvdHlwZS5jb252M2Q9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBSYShuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3QsZV0pfSx0LnByb3RvdHlwZS5jb252M2REZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IGJhKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSl9LHQucHJvdG90eXBlLmNvbnYzZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IHhhKG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdCxlXSl9LHQucHJvdG90eXBlLm1heFBvb2w9ZnVuY3Rpb24odCxlKXt2YXIgbj1uZXcgUmkoZSxcIm1heFwiLCExKSxyPXRoaXMubWFrZU91dHB1dEFycmF5KG4ub3V0cHV0U2hhcGUsdC5kdHlwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSxyKX0sdC5wcm90b3R5cGUuYXZnUG9vbD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBSaShlLFwiYXZnXCIsITEpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImZsb2F0MzJcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSxyKX0sdC5wcm90b3R5cGUubWF4UG9vbEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW5ldyBSaShyLFwibWF4XCIsITApLGE9dGhpcy5jb21waWxlQW5kUnVuKG8sW2VdKSxpPW5ldyBtaShyKSxzPXRoaXMubWFrZU91dHB1dEFycmF5KGkub3V0cHV0U2hhcGUsZS5kdHlwZSksdT10aGlzLmNvbXBpbGVBbmRSdW4oaSxbdCxhXSxzKTtyZXR1cm4gYS5kaXNwb3NlKCksdX0sdC5wcm90b3R5cGUuYXZnUG9vbEJhY2twcm9wPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1uZXcgSm8obiksbz10aGlzLm1ha2VPdXRwdXRBcnJheShyLm91dHB1dFNoYXBlLGUuZHR5cGUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocixbdF0sbyl9LHQucHJvdG90eXBlLmNhc3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbW8odCxlLHRoaXMpfSx0LnByb3RvdHlwZS51bnN0YWNrPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuc2hhcGVbZV0scj1uZXcgQXJyYXkodC5yYW5rLTEpLG89MCxhPTA7YTx0LnJhbms7YSsrKWEhPT1lJiYocltvKytdPXQuc2hhcGVbYV0pO3ZhciBpPW5ldyBBcnJheSh0LnJhbmspLmZpbGwoMCkscz10LnNoYXBlLnNsaWNlKCk7c1tlXT0xO3ZhciB1PW5ldyBBcnJheShuKTtmb3IoYT0wO2E8dS5sZW5ndGg7YSsrKWlbZV09YSx1W2FdPXRoaXMuc2xpY2UodCxpLHMpLnJlc2hhcGUocik7cmV0dXJuIHV9LHQucHJvdG90eXBlLmF2Z1Bvb2wzZD1mdW5jdGlvbih0LGUpe3ZhciBuPW5ldyBJaShlLFwiYXZnXCIsITEpLHI9dGhpcy5tYWtlT3V0cHV0QXJyYXkobi5vdXRwdXRTaGFwZSxcImZsb2F0MzJcIik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihuLFt0XSxyKX0sdC5wcm90b3R5cGUuYXZnUG9vbDNkQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBabyhuKSxvPXRoaXMubWFrZU91dHB1dEFycmF5KHIub3V0cHV0U2hhcGUsZS5kdHlwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSxvKX0sdC5wcm90b3R5cGUubWF4UG9vbDNkPWZ1bmN0aW9uKHQsZSl7dmFyIG49bmV3IElpKGUsXCJtYXhcIiwhMSkscj10aGlzLm1ha2VPdXRwdXRBcnJheShuLm91dHB1dFNoYXBlLFwiZmxvYXQzMlwiKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG4sW3RdLHIpfSx0LnByb3RvdHlwZS5tYXhQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz1uZXcgSWkocixcIm1heFwiLCEwKSxhPXRoaXMuY29tcGlsZUFuZFJ1bihvLFtlXSksaT1uZXcgZ2kocikscz10aGlzLm1ha2VPdXRwdXRBcnJheShpLm91dHB1dFNoYXBlLGUuZHR5cGUpLHU9dGhpcy5jb21waWxlQW5kUnVuKGksW3QsYV0scyk7cmV0dXJuIGEuZGlzcG9zZSgpLHV9LHQucHJvdG90eXBlLnJlc2hhcGU9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKTtyZXR1cm4hbi5pc1BhY2tlZHx8Q2UodC5zaGFwZSxlKXx8bnVsbCE9PW4udGV4dHVyZSYmQ2Uobi5zaGFwZSxlKT9nbyh0LGUpOnRoaXMucGFja2VkUmVzaGFwZSh0LGUpfSx0LnByb3RvdHlwZS5yZXNpemVCaWxpbmVhcj1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz1pLmdldEJvb2woXCJXRUJHTF9QQUNLX0lNQUdFX09QRVJBVElPTlNcIik/bmV3IFRpKHQuc2hhcGUsZSxuLHIpOm5ldyBBaSh0LnNoYXBlLGUsbixyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG8sW3RdKX0sdC5wcm90b3R5cGUucmVzaXplQmlsaW5lYXJCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bmV3IFNpKHQsZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKHIsW3RdKX0sdC5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW5ldyBfaSh0LnNoYXBlLGUsbixyKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKG8sW3RdKX0sdC5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5ldyBEaSh0LGUsbik7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihyLFt0XSl9LHQucHJvdG90eXBlLm11bHRpbm9taWFsPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPWU/dDpZcih0KSxhPW8uc2hhcGVbMF0saT1vLnNoYXBlWzFdLHM9bmV3IHhpKGEsaSxuKSx1PXRoaXMubWFrZU91dHB1dEFycmF5KHMub3V0cHV0U2hhcGUsXCJpbnQzMlwiKSxsPXMuZ2V0Q3VzdG9tU2V0dXBGdW5jKHIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4ocyxbb10sdSxsKX0sdC5wcm90b3R5cGUub25lSG90PWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW5ldyBiaSh0LnNpemUsZSxuLHIpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obyxbdF0pfSx0LnByb3RvdHlwZS5kaWFnPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBPYSh0LnNpemUpO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4oZSxbdF0pfSx0LnByb3RvdHlwZS5ub25NYXhTdXBwcmVzc2lvbj1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiBaZShcInRmLm5vbk1heFN1cHByZXNzaW9uKCkgaW4gd2ViZ2wgbG9ja3MgdGhlIFVJIHRocmVhZC4gQ2FsbCB0Zi5ub25NYXhTdXBwcmVzc2lvbkFzeW5jKCkgaW5zdGVhZFwiKSxSbyh0LmRhdGFTeW5jKCksZS5kYXRhU3luYygpLG4scixvKX0sdC5wcm90b3R5cGUuY3JvcEFuZFJlc2l6ZT1mdW5jdGlvbih0LGUsbixyLG8sYSl7dmFyIGk9bmV3IE5hKHQuc2hhcGUsZS5zaGFwZSxyLG8sYSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihpLFt0LGUsbl0pfSx0LnByb3RvdHlwZS5kZXB0aFRvU3BhY2U9ZnVuY3Rpb24odCxlLG4pe2YoZT4xLGZ1bmN0aW9uKCl7cmV0dXJuXCJibG9ja1NpemUgc2hvdWxkIGJlID4gMSBmb3IgZGVwdGhUb1NwYWNlLCBidXQgd2FzOiBcIitlfSk7dmFyIHI9dC5zaGFwZVswXSxvPVwiTkhXQ1wiPT09bj90LnNoYXBlWzFdOnQuc2hhcGVbMl0sYT1cIk5IV0NcIj09PW4/dC5zaGFwZVsyXTp0LnNoYXBlWzNdLGk9XCJOSFdDXCI9PT1uP3Quc2hhcGVbM106dC5zaGFwZVsxXSxzPW8qZSx1PWEqZSxsPWkvKGUqZSksYz1uZXcgX2EoXCJOSFdDXCI9PT1uP1tyLHMsdSxsXTpbcixsLHMsdV0sZSxuKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGMsW3RdKX0sdC5wcm90b3R5cGUuc3BsaXQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBrbyh0LGUsbil9LHQucHJvdG90eXBlLnNjYXR0ZXJORD1mdW5jdGlvbih0LGUsbil7dmFyIHI9QnIoMCx0LG4pLG89ci5zbGljZVJhbmssYT1yLm51bVVwZGF0ZXMsaT1yLnNsaWNlU2l6ZSxzPXIuc3RyaWRlcyx1PXIub3V0cHV0U2l6ZSxsPVt1L2ksaV0sYz10LnJlc2hhcGUoW2Esb10pLGg9ZS5yZXNoYXBlKFthLGldKTtpZigwPT09dSlyZXR1cm4gZ28oeG4oW10pLG4pO3ZhciBwPXduKDApLGY9bmV3IE1pKGEsbyxjLnJhbmssaC5yYW5rLHMsbCk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihmLFtoLGMscF0pLnJlc2hhcGUobil9LHQucHJvdG90eXBlLnNwYXJzZVRvRGVuc2U9ZnVuY3Rpb24odCxlLG4scil7dmFyIG89QnIoMCx0LG4pLGE9by5zbGljZVJhbmssaT1vLm51bVVwZGF0ZXMscz1vLnN0cmlkZXMsdT1vLm91dHB1dFNpemUsbD1uZXcgTWkoaSxhLHQucmFuayxlLnJhbmsscyxbdSwxXSwhMSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihsLFtlLHQscl0pLnJlc2hhcGUobil9LHQucHJvdG90eXBlLmZmdD1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5mZnRJbXBsKHQsITEpfSx0LnByb3RvdHlwZS5pZmZ0PWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZmdEltcGwodCwhMCl9LHQucHJvdG90eXBlLmZmdEltcGw9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzLnRleERhdGEuZ2V0KHQuZGF0YUlkKSxyPW5ldyBVYShMYSx0LnNoYXBlLGUpLG89bmV3IFVhKFdhLHQuc2hhcGUsZSksYT1bdGhpcy5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZSh0LG4uY29tcGxleFRlbnNvcnMucmVhbCksdGhpcy5tYWtlQ29tcGxleENvbXBvbmVudFRlbnNvckhhbmRsZSh0LG4uY29tcGxleFRlbnNvcnMuaW1hZyldLGk9dGhpcy5jb21waWxlQW5kUnVuKHIsYSkscz10aGlzLmNvbXBpbGVBbmRSdW4obyxhKSx1PXRoaXMuY29tcGxleChpLHMpLmFzMkQodC5zaGFwZVswXSx0LnNoYXBlWzFdKTtyZXR1cm4gaS5kaXNwb3NlKCkscy5kaXNwb3NlKCksdX0sdC5wcm90b3R5cGUuZ2F0aGVyTkQ9ZnVuY3Rpb24odCxlKXt2YXIgbj1lLnNoYXBlLHI9bltuLmxlbmd0aC0xXSxvPV9yKHQsZSksYT1vWzBdLGk9b1sxXSxzPW9bMl0sdT1vWzNdLGw9ZS5yZXNoYXBlKFtpLHJdKSxjPXQucmVzaGFwZShbdC5zaXplL3Msc10pLGg9bmV3IHFhKHIsdSxbaSxzXSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihoLFtjLGxdKS5yZXNoYXBlKGEpfSx0LnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKHQsZSxuKXtpZihcInN0cmluZ1wiPT09KG49bnx8TChlKSkpe3ZhciByPVMobixnKHQpKTtyZXR1cm4gci5maWxsKGUpLGN0Lm1ha2UodCx7dmFsdWVzOnJ9LG4pfXZhciBvPW5ldyBWYSh0LGUpLGE9by5nZXRDdXN0b21TZXR1cEZ1bmMoZSksaT10aGlzLm1ha2VPdXRwdXRBcnJheSh0LG4pO3JldHVybiB0aGlzLmNvbXBpbGVBbmRSdW4obyxbXSxpLGEpfSx0LnByb3RvdHlwZS5vbmVzTGlrZT1mdW5jdGlvbih0KXtpZihcInN0cmluZ1wiPT09dC5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJvbmVzTGlrZSBpcyBub3Qgc3VwcG9ydGVkIHVuZGVyIHN0cmluZyBkdHlwZVwiKTtyZXR1cm4gdGhpcy5maWxsKHQuc2hhcGUsMSx0LmR0eXBlKX0sdC5wcm90b3R5cGUuemVyb3NMaWtlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmZpbGwodC5zaGFwZSxcInN0cmluZ1wiPT09dC5kdHlwZT9cIlwiOjAsdC5kdHlwZSl9LHQucHJvdG90eXBlLmxpbnNwYWNlPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4geW8odCxlLG4pfSx0LnByb3RvdHlwZS5tYWtlT3V0cHV0QXJyYXk9ZnVuY3Rpb24odCxlKXtyZXR1cm4gY3QubWFrZSh0LHt9LGUsdGhpcyl9LHQucHJvdG90eXBlLm1ha2VQYWNrZWRUZW5zb3I9ZnVuY3Rpb24odCxlKXt2YXIgbj1jdC5tYWtlKHQse30sZSx0aGlzKTtyZXR1cm4gdGhpcy50ZXhEYXRhLmdldChuLmRhdGFJZCkuaXNQYWNrZWQ9ITAsbn0sdC5wcm90b3R5cGUudW5wYWNrVGVuc29yPWZ1bmN0aW9uKHQpe3ZhciBlPW5ldyB5cyh0LnNoYXBlKTtyZXR1cm4gdGhpcy5jb21waWxlQW5kUnVuKGUsW3RdLGN0Lm1ha2UoZS5vdXRwdXRTaGFwZSx7fSx0LmR0eXBlLHRoaXMpKX0sdC5wcm90b3R5cGUucGFja1RlbnNvcj1mdW5jdGlvbih0KXt2YXIgZT1uZXcgd2kodC5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihlLFt0XSx0aGlzLm1ha2VQYWNrZWRUZW5zb3IodC5zaGFwZSx0LmR0eXBlKSxudWxsLCEwKX0sdC5wcm90b3R5cGUucGFja2VkUmVzaGFwZT1mdW5jdGlvbih0LGUpe3ZhciBuPXQucmVzaGFwZShbZ2UodC5zaGFwZSldLmNvbmNhdCh5ZSh0LnNoYXBlKSkpLHI9W2dlKGUpXS5jb25jYXQoeWUoZSkpLG89bmV3IE5pKHIsbi5zaGFwZSk7cmV0dXJuIHRoaXMuY29tcGlsZUFuZFJ1bihvLFtuXSkucmVzaGFwZShlKX0sdC5wcm90b3R5cGUuZGVjb2RlPWZ1bmN0aW9uKHQpe3ZhciBlLG49dGhpcy50ZXhEYXRhLmdldCh0KSxyPW4uaXNQYWNrZWQsbz1uLnNoYXBlLGE9bi5kdHlwZSxpPXhlKG8pLHM9THQobyksdT10aGlzLm1ha2VUZW5zb3JIYW5kbGUobyxcImZsb2F0MzJcIik7cmV0dXJuIHRoaXMudGV4RGF0YS5nZXQodS5kYXRhSWQpLmlzUGFja2VkPSEwLHRoaXMudGV4RGF0YS5nZXQodS5kYXRhSWQpLmR0eXBlPWEsdGhpcy50ZXhEYXRhLmdldCh1LmRhdGFJZCkudGV4U2hhcGU9cy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIDIqdH0pLGU9cj9uZXcgRGEoaSxzKTpuZXcgVGEoaSxzKSx0aGlzLmNvbXBpbGVBbmRSdW4oZSxbe3NoYXBlOmksZHR5cGU6YSxkYXRhSWQ6dH1dLHUsbnVsbCwhMCksdX0sdC5wcm90b3R5cGUuY29tcGlsZUFuZFJ1bj1mdW5jdGlvbih0LGUsbixyLG8pe3ZhciBhPXRoaXM7aWYodm9pZCAwPT09byYmKG89ITEpLG51bGw9PW4mJihuPXQudXNlc1BhY2tlZFRleHR1cmVzP3RoaXMubWFrZVBhY2tlZFRlbnNvcih0Lm91dHB1dFNoYXBlLGVbMF0uZHR5cGUpOnRoaXMubWFrZU91dHB1dEFycmF5KHQub3V0cHV0U2hhcGUsZVswXS5kdHlwZSkpLDA9PT1uLnNpemUpcmV0dXJuIHRoaXMudGV4RGF0YS5nZXQobi5kYXRhSWQpLnZhbHVlcz1OKG4uZHR5cGUsMCksbjt2YXIgcz1lLm1hcChmdW5jdGlvbihlKXtpZihcImNvbXBsZXg2NFwiPT09ZS5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJHUEdQVVByb2dyYW0gZG9lcyBub3Qgc3VwcG9ydCBjb21wbGV4NjQgaW5wdXQuIEZvciBjb21wbGV4NjQgZHR5cGVzLCBwbGVhc2Ugc2VwYXJhdGUgdGhlIHByb2dyYW0gaW50byByZWFsIGFuZCBpbWFnaW5hcnkgcGFydHMuXCIpO3ZhciBuPWEudGV4RGF0YS5nZXQoZS5kYXRhSWQpO2lmKG51bGw9PW4udGV4dHVyZSl7aWYoIXQudXNlc1BhY2tlZFRleHR1cmVzJiZnKGUuc2hhcGUpPD1pLmdldE51bWJlcihcIldFQkdMX1NJWkVfVVBMT0FEX1VOSUZPUk1cIikpcmV0dXJue3NoYXBlOmUuc2hhcGUsdGV4RGF0YTpudWxsLGlzVW5pZm9ybTohMCx1bmlmb3JtVmFsdWVzOm4udmFsdWVzfTt0LnVzZXNQYWNrZWRUZXh0dXJlcyYmKG4uaXNQYWNrZWQ9ITAsbi5zaGFwZT1lLnNoYXBlKX1lbHNlIGlmKCEhbi5pc1BhY2tlZCE9ISF0LnVzZXNQYWNrZWRUZXh0dXJlcyllPW4uaXNQYWNrZWQ/YS51bnBhY2tUZW5zb3IoZSk6YS5wYWNrVGVuc29yKGUpLG49YS50ZXhEYXRhLmdldChlLmRhdGFJZCk7ZWxzZSBpZihuLmlzUGFja2VkJiYhQ2Uobi5zaGFwZSxlLnNoYXBlKSl7dmFyIHI9ZSxvPWUuc2hhcGU7ZS5zaGFwZT1uLnNoYXBlLGU9YS5wYWNrZWRSZXNoYXBlKGUsbyksbj1hLnRleERhdGEuZ2V0KGUuZGF0YUlkKSxyLnNoYXBlPW99cmV0dXJuIGEudXBsb2FkVG9HUFUoZS5kYXRhSWQpLHtzaGFwZTplLnNoYXBlLHRleERhdGE6bixpc1VuaWZvcm06ITF9fSk7dGhpcy51cGxvYWRUb0dQVShuLmRhdGFJZCk7dmFyIHUsbD17c2hhcGU6bi5zaGFwZSx0ZXhEYXRhOnRoaXMudGV4RGF0YS5nZXQobi5kYXRhSWQpLGlzVW5pZm9ybTohMX0sYz1mdW5jdGlvbih0LGUsbil7dmFyIHI9XCJcIjtlLmNvbmNhdChuKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPW51bGwhPXQudGV4RGF0YSYmbnVsbCE9dC50ZXhEYXRhLnNsaWNlJiZ0LnRleERhdGEuc2xpY2UuZmxhdE9mZnNldD4wLG49dC5pc1VuaWZvcm0/XCJ1bmlmb3JtXCI6dC50ZXhEYXRhLnRleFNoYXBlO3IrPXQuc2hhcGUrXCJfXCIrbitcIl9cIitlfSk7dmFyIG89dC51c2VyQ29kZSxhPXQuY29uc3RydWN0b3IubmFtZTtyZXR1cm4gYSs9XCJfXCIrcitcIl9cIitvfSh0LHMsbCksaD10aGlzLmdldEFuZFNhdmVCaW5hcnkoYyxmdW5jdGlvbigpe3JldHVybiBmdW5jdGlvbih0LGUsbixyKXt2YXIgbz1lLnVzZXJDb2RlLGE9bi5tYXAoZnVuY3Rpb24odCxuKXt2YXIgcj17bG9naWNhbFNoYXBlOnQuc2hhcGUsdGV4U2hhcGU6dC5pc1VuaWZvcm0/bnVsbDp0LnRleERhdGEudGV4U2hhcGUsaXNVbmlmb3JtOnQuaXNVbmlmb3JtLGlzUGFja2VkOiF0LmlzVW5pZm9ybSYmdC50ZXhEYXRhLmlzUGFja2VkLGZsYXRPZmZzZXQ6bnVsbH07cmV0dXJuIG51bGwhPXQudGV4RGF0YSYmbnVsbCE9dC50ZXhEYXRhLnNsaWNlJiZ0LnRleERhdGEuc2xpY2UuZmxhdE9mZnNldD4wJiYoci5mbGF0T2Zmc2V0PXQudGV4RGF0YS5zbGljZS5mbGF0T2Zmc2V0KSx7bmFtZTplLnZhcmlhYmxlTmFtZXNbbl0sc2hhcGVJbmZvOnJ9fSkscz1hLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaGFwZUluZm99KSx1PXtsb2dpY2FsU2hhcGU6ci5zaGFwZSx0ZXhTaGFwZTpyLnRleERhdGEudGV4U2hhcGUsaXNVbmlmb3JtOiExLGlzUGFja2VkOnIudGV4RGF0YS5pc1BhY2tlZCxmbGF0T2Zmc2V0Om51bGx9LGw9V28oYSx1LG8sZS51c2VzUGFja2VkVGV4dHVyZXMpLGM9dC5jcmVhdGVQcm9ncmFtKGwpLGg9bnVsbCxwPXQuZ2V0VW5pZm9ybUxvY2F0aW9uKGMsXCJOQU5cIiwhMSk7MT09PWkuZ2V0TnVtYmVyKFwiV0VCR0xfVkVSU0lPTlwiKSYmKGg9dC5nZXRVbmlmb3JtTG9jYXRpb24oYyxcIklORklOSVRZXCIsITEpKTtmb3IodmFyIGY9e30sZD0wO2Q8ZS52YXJpYWJsZU5hbWVzLmxlbmd0aDtkKyspe3ZhciB2PWUudmFyaWFibGVOYW1lc1tkXTtmW3ZdPXQuZ2V0VW5pZm9ybUxvY2F0aW9uKGMsdiwhMSksZltcIm9mZnNldFwiK3ZdPXQuZ2V0VW5pZm9ybUxvY2F0aW9uKGMsXCJvZmZzZXRcIit2LCExKX1yZXR1cm57cHJvZ3JhbTplLHNvdXJjZTpsLHdlYkdMUHJvZ3JhbTpjLHVuaWZvcm1Mb2NhdGlvbnM6ZixpblNoYXBlSW5mb3M6cyxvdXRTaGFwZUluZm86dSxpbmZMb2M6aCxuYW5Mb2M6cH19KGEuZ3BncHUsdCxzLGwpfSkscD1udWxsIT10aGlzLmFjdGl2ZVRpbWVycztyZXR1cm4gcCYmKHU9dGhpcy5zdGFydFRpbWVyKCkpLGZ1bmN0aW9uKHQsZSxuLHIsbyl7aGkoZS5pblNoYXBlSW5mb3MsbiksaGkoW2Uub3V0U2hhcGVJbmZvXSxbcl0pO3ZhciBhPXIudGV4RGF0YS50ZXh0dXJlLHM9ci50ZXhEYXRhLnRleFNoYXBlO3IudGV4RGF0YS5pc1BhY2tlZD90LnNldE91dHB1dFBhY2tlZE1hdHJpeFRleHR1cmUoYSxzWzBdLHNbMV0pOnQuc2V0T3V0cHV0TWF0cml4VGV4dHVyZShhLHNbMF0sc1sxXSksdC5zZXRQcm9ncmFtKGUud2ViR0xQcm9ncmFtKSwxPT09aS5nZXROdW1iZXIoXCJXRUJHTF9WRVJTSU9OXCIpJiZudWxsIT09ZS5pbmZMb2MmJnQuZ2wudW5pZm9ybTFmKGUuaW5mTG9jLDEvMCksbnVsbCE9PWUubmFuTG9jJiZ0LmdsLnVuaWZvcm0xZihlLm5hbkxvYyxOYU4pLG4uZm9yRWFjaChmdW5jdGlvbihuLHIpe3ZhciBvPWUucHJvZ3JhbS52YXJpYWJsZU5hbWVzW3JdLGE9ZS51bmlmb3JtTG9jYXRpb25zW29dLGk9ZS51bmlmb3JtTG9jYXRpb25zW1wib2Zmc2V0XCIrb107aWYobnVsbCE9YSlpZihuLmlzVW5pZm9ybSlpZihnKG4uc2hhcGUpPDIpdC5nbC51bmlmb3JtMWYoYSxuLnVuaWZvcm1WYWx1ZXNbMF0pO2Vsc2V7dmFyIHM9bi51bmlmb3JtVmFsdWVzO3MgaW5zdGFuY2VvZiBGbG9hdDMyQXJyYXl8fChzPW5ldyBGbG9hdDMyQXJyYXkocykpLHQuZ2wudW5pZm9ybTFmdihhLHMpfWVsc2UgbnVsbCE9bi50ZXhEYXRhLnNsaWNlJiZudWxsIT1pJiZ0LmdsLnVuaWZvcm0xaShpLG4udGV4RGF0YS5zbGljZS5mbGF0T2Zmc2V0KSx0LnNldElucHV0TWF0cml4VGV4dHVyZShuLnRleERhdGEudGV4dHVyZSxhLHIpfSksbnVsbCE9byYmbyh0LGUud2ViR0xQcm9ncmFtKSx0LmV4ZWN1dGVQcm9ncmFtKCl9KHRoaXMuZ3BncHUsaCxzLGwscikscCYmKHU9dGhpcy5lbmRUaW1lcih1KSx0aGlzLmFjdGl2ZVRpbWVycy5wdXNoKHtuYW1lOnQuY29uc3RydWN0b3IubmFtZSxxdWVyeTp0aGlzLmdldFF1ZXJ5VGltZSh1KX0pKSwhaS5nZXRCb29sKFwiV0VCR0xfTEFaSUxZX1VOUEFDS1wiKSYmdGhpcy50ZXhEYXRhLmdldChuLmRhdGFJZCkuaXNQYWNrZWQmJiExPT09bz90aGlzLnVucGFja1RlbnNvcihuKTpufSx0LnByb3RvdHlwZS5nZXRBbmRTYXZlQmluYXJ5PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQgaW4gdGhpcy5iaW5hcnlDYWNoZXx8KHRoaXMuYmluYXJ5Q2FjaGVbdF09ZSgpKSx0aGlzLmJpbmFyeUNhY2hlW3RdfSx0LnByb3RvdHlwZS5nZXRUZXh0dXJlTWFuYWdlcj1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRleHR1cmVNYW5hZ2VyfSx0LnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5kaXNwb3NlZHx8KHRoaXMudGV4dHVyZU1hbmFnZXIuZGlzcG9zZSgpLG51bGwhPXRoaXMuY2FudmFzJiZudWxsIT10aGlzLmNhbnZhcy5yZW1vdmU/dGhpcy5jYW52YXMucmVtb3ZlKCk6dGhpcy5jYW52YXM9bnVsbCxudWxsIT10aGlzLmZyb21QaXhlbHMyRENvbnRleHQmJnRoaXMuZnJvbVBpeGVsczJEQ29udGV4dC5jYW52YXMucmVtb3ZlJiZ0aGlzLmZyb21QaXhlbHMyRENvbnRleHQuY2FudmFzLnJlbW92ZSgpLHRoaXMuZ3BncHVDcmVhdGVkTG9jYWxseSYmKHRoaXMuZ3BncHUucHJvZ3JhbT1udWxsLHRoaXMuZ3BncHUuZGlzcG9zZSgpKSx0aGlzLmRpc3Bvc2VkPSEwKX0sdC5wcm90b3R5cGUuZmxvYXRQcmVjaXNpb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3JldHVybiBudWxsPT10aGlzLmZsb2F0UHJlY2lzaW9uVmFsdWUmJih0aGlzLmZsb2F0UHJlY2lzaW9uVmFsdWU9VWUoZnVuY3Rpb24oKXtpZighaS5nZXQoXCJXRUJHTF9SRU5ERVJfRkxPQVQzMl9FTkFCTEVEXCIpKXt2YXIgZT1pLmdldEJvb2woXCJERUJVR1wiKTtpLnNldChcIkRFQlVHXCIsITEpO3ZhciBuPXQuYWJzKHduKDFlLTgpKS5kYXRhU3luYygpWzBdO2lmKGkuc2V0KFwiREVCVUdcIixlKSxuPjApcmV0dXJuIDMyfXJldHVybiAxNn0pKSx0aGlzLmZsb2F0UHJlY2lzaW9uVmFsdWV9LHQucHJvdG90eXBlLmVwc2lsb249ZnVuY3Rpb24oKXtyZXR1cm4gMzI9PT10aGlzLmZsb2F0UHJlY2lzaW9uKCk/MWUtNzoxZS00fSx0LnByb3RvdHlwZS51cGxvYWRUb0dQVT1mdW5jdGlvbih0KXt2YXIgZSxuPXRoaXMudGV4RGF0YS5nZXQodCkscj1uLnNoYXBlLG89bi5kdHlwZSxhPW4udmFsdWVzLGk9bi50ZXh0dXJlLHM9bi51c2FnZSx1PW4uaXNQYWNrZWQ7aWYobnVsbD09aSl7dmFyIGwsYz1udWxsIT10aGlzLmFjdGl2ZVRpbWVycztjJiYobD0kKCkpO3ZhciBoPW4udGV4U2hhcGU7aWYobnVsbD09aCYmKGg9YmUocix1KSxuLnRleFNoYXBlPWgpLG51bGwhPWEpe3ZhciBwPXhlKHIpLGY9dm9pZCAwLGQ9aFsxXSx2PWhbMF0sbT1hIGluc3RhbmNlb2YgVWludDhBcnJheTt1PyhkPShlPVd0KGhbMF0saFsxXSkpWzBdLHY9ZVsxXSxmPW5ldyBQYShwLFt2LGRdLG0pKTpmPW5ldyBCYShwLFt2LGRdLG0pO3ZhciB5PXRoaXMubWFrZVRlbnNvckhhbmRsZShbdixkXSxvKTt0aGlzLnRleERhdGEuZ2V0KHkuZGF0YUlkKS51c2FnZT1tP1R0LlBJWEVMUzpUdC5VUExPQUQsdGhpcy5ncGdwdS51cGxvYWREZW5zZU1hdHJpeFRvVGV4dHVyZSh0aGlzLmdldFRleHR1cmUoeS5kYXRhSWQpLGQsdixhKTt2YXIgeD10aGlzLm1ha2VUZW5zb3JIYW5kbGUoZi5vdXRwdXRTaGFwZSx5LmR0eXBlKTt4LnNpemU9ZyhmLm91dHB1dFNoYXBlKSx0aGlzLnRleERhdGEuZ2V0KHguZGF0YUlkKS5pc1BhY2tlZD11LHRoaXMuY29tcGlsZUFuZFJ1bihmLFt5XSx4KTt2YXIgYj10aGlzLnRleERhdGEuZ2V0KHguZGF0YUlkKTtuLnRleHR1cmU9Yi50ZXh0dXJlLG4udGV4U2hhcGU9Yi50ZXhTaGFwZSxuLmlzUGFja2VkPWIuaXNQYWNrZWQsbi51c2FnZT1iLnVzYWdlLHRoaXMuZGlzcG9zZURhdGEoeS5kYXRhSWQpLHRoaXMudGV4RGF0YS5kZWxldGUoeC5kYXRhSWQpLG4udmFsdWVzPW51bGwsYyYmKHRoaXMudXBsb2FkV2FpdE1zKz0kKCktbCl9ZWxzZXt2YXIgdz10aGlzLmFjcXVpcmVUZXh0dXJlKGgscyxvLHUpO24udGV4dHVyZT13fX19LHQucHJvdG90eXBlLmNvbnZlcnRBbmRDYWNoZU9uQ1BVPWZ1bmN0aW9uKHQsZSl7dmFyIG49dGhpcy50ZXhEYXRhLmdldCh0KSxyPW4uZHR5cGU7cmV0dXJuIHRoaXMucmVsZWFzZUdQVURhdGEodCksbnVsbCE9ZSYmKG4udmFsdWVzPWZ1bmN0aW9uKHQsZSl7aWYoXCJmbG9hdDMyXCI9PT1lfHxcImNvbXBsZXg2NFwiPT09ZSlyZXR1cm4gdDtpZihcImludDMyXCI9PT1lfHxcImJvb2xcIj09PWUpe2Zvcih2YXIgbj1cImludDMyXCI9PT1lP25ldyBJbnQzMkFycmF5KHQubGVuZ3RoKTpuZXcgVWludDhBcnJheSh0Lmxlbmd0aCkscj0wO3I8bi5sZW5ndGg7KytyKW5bcl09TWF0aC5yb3VuZCh0W3JdKTtyZXR1cm4gbn10aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIGR0eXBlIFwiK2UpfShlLHIpKSxuLnZhbHVlc30sdC5wcm90b3R5cGUuYWNxdWlyZVRleHR1cmU9ZnVuY3Rpb24odCxlLG4scil7aWYodGhpcy5udW1CeXRlc0luR1BVKz10aGlzLmNvbXB1dGVCeXRlcyh0LG4pLCF0aGlzLndhcm5lZEFib3V0TWVtb3J5JiZ0aGlzLm51bUJ5dGVzSW5HUFU+MTAyNCp0aGlzLm51bU1CQmVmb3JlV2FybmluZyoxMDI0KXt2YXIgbz0odGhpcy5udW1CeXRlc0luR1BVLzEwMjQvMTAyNCkudG9GaXhlZCgyKTt0aGlzLndhcm5lZEFib3V0TWVtb3J5PSEwLGNvbnNvbGUud2FybihcIkhpZ2ggbWVtb3J5IHVzYWdlIGluIEdQVTogXCIrbytcIiBNQiwgbW9zdCBsaWtlbHkgZHVlIHRvIGEgbWVtb3J5IGxlYWtcIil9cmV0dXJuIHRoaXMudGV4dHVyZU1hbmFnZXIuYWNxdWlyZVRleHR1cmUodCxlLHIpfSx0LnByb3RvdHlwZS5jb21wdXRlQnl0ZXM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdFswXSp0WzFdKk8oZSl9LHR9KCk7QXQoKSYmU3QucmVnaXN0ZXJCYWNrZW5kKFwid2ViZ2xcIixmdW5jdGlvbigpe3JldHVybiBuZXcgQ3N9LDIpO3ZhciBFcz12bih7YWJzXzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwiYWJzXCIpO3JldHVyblwiY29tcGxleDY0XCI9PT1lLmR0eXBlP1N0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb21wbGV4QWJzKGUpfSx7JHg6ZX0pOlN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuYWJzKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi50b0Zsb2F0KCkuc3RlcCgtMSkpfX19KX19KSxScz12bih7YWNvc186ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcImFjb3NcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuYWNvcyhlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2U3RyaWN0KHduKDEpLnN1YihuLnRvRmxvYXQoKS5zcXVhcmUoKSkuc3FydCgpKS5uZWcoKX19fSl9fSksSXM9dm4oe2Fjb3NoXzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwiYWNvc2hcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuYWNvc2goZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdlN0cmljdChuLnRvRmxvYXQoKS5zcXVhcmUoKS5zdWIoMSkuc3FydCgpKX19fSl9fSksa3M9dm4oe2FzaW5fOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJhc2luXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmFzaW4oZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdlN0cmljdCh3bigxKS5zdWIobi50b0Zsb2F0KCkuc3F1YXJlKCkpLnNxcnQoKSl9fX0pfX0pLE5zPXZuKHthc2luaF86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcImFzaW5oXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmFzaW5oKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXZTdHJpY3Qod24oMSkuYWRkKG4udG9GbG9hdCgpLnNxdWFyZSgpKS5zcXJ0KCkpfX19KX19KSxTcz12bih7YXRhbl86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcImF0YW5cIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuYXRhbihlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4udG9GbG9hdCgpLnNxdWFyZSgpLmFkZCgxKSl9fX0pfX0pLEFzPXZuKHthdGFuaF86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcImF0YW5oXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmF0YW5oKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXYod24oMSkuc3ViKG4udG9GbG9hdCgpLnNxdWFyZSgpKSl9fX0pfX0pLFRzPXZuKHtjZWlsXzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwiY2VpbFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNlaWwoZSl9LHskeDplfSxmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gRm4odCl9fX0pfX0pLERzPXZuKHtjbGlwQnlWYWx1ZV86ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5uKHQsXCJ4XCIsXCJjbGlwQnlWYWx1ZVwiKTtyZXR1cm4gZihlPD1uLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjbGlwOiBtaW4gKFwiK2UrXCIpIG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIG1heCAoXCIrbitcIikuXCJ9KSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxvKXt2YXIgYT10LmNsaXAocixlLG4pO3JldHVybiBvKFtyXSksYX0seyR4OnJ9LGZ1bmN0aW9uKHQscil7dmFyIG89clswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC53aGVyZShvLmdyZWF0ZXJFcXVhbChlKS5sb2dpY2FsQW5kKG8ubGVzc0VxdWFsKG4pKSxGbih0KSl9fX0pfX0pLF9zPXZuKHtjb3NfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJjb3NcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuY29zKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gbi50b0Zsb2F0KCkuc2luKCkubmVnKCkubXVsKHQpfX19KX19KSxPcz12bih7Y29zaF86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcImNvc2hcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuY29zaChlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIG4udG9GbG9hdCgpLnNpbmgoKS5tdWxTdHJpY3QodCl9fX0pfX0pLEZzPXZuKHtlcmZfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJlcmZcIik7cmV0dXJuIGYoXCJpbnQzMlwiPT09ZS5kdHlwZXx8XCJmbG9hdDMyXCI9PT1lLmR0eXBlLGZ1bmN0aW9uKCl7cmV0dXJuXCJJbnB1dCBkdHlwZSBtdXN0IGJlIGBpbnQzMmAgb3IgYGZsb2F0MzJgLlwifSksXCJpbnQzMlwiPT09ZS5kdHlwZSYmKGU9ZS50b0Zsb2F0KCkpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuZXJmKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5zcXVhcmUoKS5uZWcoKS5leHAoKS5tdWwoMi9NYXRoLnNxcnQoTWF0aC5QSSkpKX19fSl9fSksTXM9dm4oe2V4cF86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcImV4cFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5leHAoZSk7cmV0dXJuIG4oW3JdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWxTdHJpY3QoZVswXSl9fX0pfX0pLEJzPXZuKHtleHBtMV86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcImV4cG0xXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmV4cG0xKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5leHAoKSl9fX0pfX0pLFBzPXZuKHtmbG9vcl86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcImZsb29yXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuZmxvb3IoZSl9LHskeDplfSxmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gRm4odCl9fX0pfX0pLExzPXZuKHtsb2dfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJsb2dcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQubG9nKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXYobi50b0Zsb2F0KCkpfX19KX19KSxXcz12bih7bG9nMXBfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJsb2cxcFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5sb2cxcChlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQuZGl2KG4uYWRkKDEpKX19fSl9fSksVXM9dm4oe2xvZ1NpZ21vaWRfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJsb2dTaWdtb2lkXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LnNvZnRwbHVzKGUubmVnKCkpLm5lZygpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5uZWcoKS5zaWdtb2lkKCkpfX19KX19KSxWcz12bih7bmVnXzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwibmVnXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQubmVnKGUpfSx7JHg6ZX0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubmVnKCl9fX0pfX0pLHpzPXZuKHtyZWNpcHJvY2FsXzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwicmVjaXByb2NhbFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5yZWNpcHJvY2FsKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXYobi5zcXVhcmUoKS5uZWcoKSl9fX0pfX0pLEdzPXZuKHtyb3VuZF86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcInJvdW5kXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQucm91bmQoZSl9LHskeDplfSxmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gRm4odCl9fX0pfX0pLEhzPXZuKHtyc3FydF86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcInJzcXJ0XCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LnJzcXJ0KGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXYobi5wb3coMS41KS5tdWwoMikpLm5lZygpfX19KX19KSxxcz12bih7c2lnbW9pZF86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcInNpZ21vaWRcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuc2lnbW9pZChlKTtyZXR1cm4gbihbcl0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4ubXVsKHduKDEpLnN1YihuKSkpfX19KX19KSwkcz12bih7c2lnbl86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcInNpZ25cIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5zaWduKGUpfSx7JHg6ZX0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIEZuKHQpfX19KX19KSxLcz12bih7aXNOYU5fOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJpc05hTlwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlzTmFOKGUpfSx7JHg6ZX0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIEZuKHQpfX19KX19KSxqcz12bih7aXNJbmZfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJpc0luZlwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlzSW5mKGUpfSx7JHg6ZX0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIEZuKHQpfX19KX19KSxYcz12bih7aXNGaW5pdGVfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJpc0Zpbml0ZVwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlzRmluaXRlKGUpfSx7JHg6ZX0sZnVuY3Rpb24odCl7cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIEZuKHQpfX19KX19KSxZcz12bih7c2luXzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwic2luXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LnNpbihlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIG4udG9GbG9hdCgpLmNvcygpLm11bCh0KX19fSl9fSksUXM9dm4oe3NpbmhfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJzaW5oXCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LnNpbmgoZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiBuLnRvRmxvYXQoKS5jb3NoKCkubXVsU3RyaWN0KHQpfX19KX19KSxKcz12bih7c29mdHBsdXNfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJzb2Z0cGx1c1wiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC5zb2Z0cGx1cyhlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4uc2lnbW9pZCgpKX19fSl9fSksWnM9dm4oe3NxcnRfOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJzcXJ0XCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LnNxcnQoZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LmRpdihuLnRvRmxvYXQoKS5zcXJ0KCkubXVsKDIpKX19fSl9fSksdHU9dm4oe3NxdWFyZV86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcInNxdWFyZVwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7cmV0dXJuIG4oW2VdKSx0LnNxdWFyZShlKX0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi50b0Zsb2F0KCkubXVsKDIpKX19fSl9fSksZXU9dm4oe3N0ZXBfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCk7dmFyIG49bm4odCxcInhcIixcInN0ZXBcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5zdGVwKG4sZSl9LHskeDpufSxmdW5jdGlvbih0KXtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gRm4odCl9fX0pfX0pLG51PXZuKHt0YW5fOmZ1bmN0aW9uKHQpe3ZhciBlPW5uKHQsXCJ4XCIsXCJ0YW5cIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQudGFuKGUpO3JldHVybiBuKFtlXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gdC5kaXYobi5jb3MoKS5zcXVhcmUoKSl9fX0pfX0pLHJ1PXZuKHt0YW5oXzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwidGFuaFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsbil7dmFyIHI9dC50YW5oKGUpO3JldHVybiBuKFtyXSkscn0seyR4OmV9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gd24oMSkuc3ViKG4uc3F1YXJlKCkpLm11bFN0cmljdCh0KX19fSl9fSk7ZnVuY3Rpb24gb3UodCxlLG4scixvLGEpe3ZhciBpLHMsdT1ubih0LFwieFwiLFwiYmF0Y2hOb3JtXCIpLGw9bm4oZSxcIm1lYW5cIixcImJhdGNoTm9ybVwiKSxjPW5uKG4sXCJ2YXJpYW5jZVwiLFwiYmF0Y2hOb3JtXCIpO3JldHVybiBudWxsIT1vJiYoaT1ubihvLFwic2NhbGVcIixcImJhdGNoTm9ybVwiKSksbnVsbCE9ciYmKHM9bm4ocixcIm9mZnNldFwiLFwiYmF0Y2hOb3JtXCIpKSxmKDI9PT11LnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiB4IG11c3QgYmUgcmFuayAzIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSxmKDI9PT1sLnJhbmt8fDE9PT1sLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTJEOiBtZWFuIG11c3QgYmUgcmFuayAyIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSksZigyPT09Yy5yYW5rfHwxPT09Yy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm0yRDogdmFyaWFuY2UgbXVzdCBiZSByYW5rIDIgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSxudWxsIT1pJiZmKDI9PT1pLnJhbmt8fDE9PT1pLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTJEOiBzY2FsZSBtdXN0IGJlIHJhbmsgMiBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2kucmFuaytcIi5cIn0pLG51bGwhPXMmJmYoMj09PXMucmFua3x8MT09PXMucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtMkQ6IG9mZnNldCBtdXN0IGJlIHJhbmsgMiBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK3MucmFuaytcIi5cIn0pLHN1KHUsbCxjLHMsaSxhKX1mdW5jdGlvbiBhdSh0LGUsbixyLG8sYSl7dmFyIGkscyx1PW5uKHQsXCJ4XCIsXCJiYXRjaE5vcm1cIiksbD1ubihlLFwibWVhblwiLFwiYmF0Y2hOb3JtXCIpLGM9bm4obixcInZhcmlhbmNlXCIsXCJiYXRjaE5vcm1cIik7cmV0dXJuIG51bGwhPW8mJihpPW5uKG8sXCJzY2FsZVwiLFwiYmF0Y2hOb3JtXCIpKSxudWxsIT1yJiYocz1ubihyLFwib2Zmc2V0XCIsXCJiYXRjaE5vcm1cIikpLGYoMz09PXUucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtM0Q6IHggbXVzdCBiZSByYW5rIDMgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pLGYoMz09PWwucmFua3x8MT09PWwucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtM0Q6IG1lYW4gbXVzdCBiZSByYW5rIDMgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitsLnJhbmsrXCIuXCJ9KSxmKDM9PT1jLnJhbmt8fDE9PT1jLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTNEOiB2YXJpYW5jZSBtdXN0IGJlIHJhbmsgMyBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2MucmFuaytcIi5cIn0pLG51bGwhPWkmJmYoMz09PWkucmFua3x8MT09PWkucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtM0Q6IHNjYWxlIG11c3QgYmUgcmFuayAzIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIraS5yYW5rK1wiLlwifSksbnVsbCE9cyYmZigzPT09cy5yYW5rfHwxPT09cy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm0zRDogb2Zmc2V0IG11c3QgYmUgcmFuayAzIG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSksc3UodSxsLGMscyxpLGEpfWZ1bmN0aW9uIGl1KHQsZSxuLHIsbyxhKXt2YXIgaSxzLHU9bm4odCxcInhcIixcImJhdGNoTm9ybVwiKSxsPW5uKGUsXCJtZWFuXCIsXCJiYXRjaE5vcm1cIiksYz1ubihuLFwidmFyaWFuY2VcIixcImJhdGNoTm9ybVwiKTtyZXR1cm4gbnVsbCE9byYmKGk9bm4obyxcInNjYWxlXCIsXCJiYXRjaE5vcm1cIikpLG51bGwhPXImJihzPW5uKHIsXCJvZmZzZXRcIixcImJhdGNoTm9ybVwiKSksZig0PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm00RDogeCBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSksZig0PT09bC5yYW5rfHwxPT09bC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm00RDogbWVhbiBtdXN0IGJlIHJhbmsgNCBvciByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2wucmFuaytcIi5cIn0pLGYoND09PWMucmFua3x8MT09PWMucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYmF0Y2hOb3JtNEQ6IHZhcmlhbmNlIG11c3QgYmUgcmFuayA0IG9yIHJhbmsgMSBidXQgZ290IHJhbmsgXCIrYy5yYW5rK1wiLlwifSksbnVsbCE9aSYmZig0PT09aS5yYW5rfHwxPT09aS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBiYXRjaE5vcm00RDogc2NhbGUgbXVzdCBiZSByYW5rIDQgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitpLnJhbmsrXCIuXCJ9KSxudWxsIT1zJiZmKDQ9PT1zLnJhbmt8fDE9PT1zLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGJhdGNoTm9ybTREOiBvZmZzZXQgbXVzdCBiZSByYW5rIDQgb3IgcmFuayAxIGJ1dCBnb3QgcmFuayBcIitzLnJhbmsrXCIuXCJ9KSxzdSh1LGwsYyxzLGksYSl9ZnVuY3Rpb24gc3UodCxlLG4scixvLGEpe251bGw9PWEmJihhPS4wMDEpO3ZhciBpLHMsdSxsPW5uKHQsXCJ4XCIsXCJiYXRjaE5vcm1cIiksYz1ubihlLFwibWVhblwiLFwiYmF0Y2hOb3JtXCIpLGg9bm4obixcInZhcmlhbmNlXCIsXCJiYXRjaE5vcm1cIik7bnVsbCE9byYmKGk9bm4obyxcInNjYWxlXCIsXCJiYXRjaE5vcm1cIikpLG51bGwhPXImJihzPW5uKHIsXCJvZmZzZXRcIixcImJhdGNoTm9ybVwiKSksZihjLnJhbms9PT1oLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkJhdGNoIG5vcm1hbGl6YXRpb24gZ3JhZGllbnQgcmVxdWlyZXMgbWVhbiBhbmQgdmFyaWFuY2UgdG8gaGF2ZSBlcXVhbCByYW5rcy5cIn0pLGYobnVsbD09c3x8Yy5yYW5rPT09cy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJCYXRjaCBub3JtYWxpemF0aW9uIGdyYWRpZW50IHJlcXVpcmVzIG1lYW4gYW5kIG9mZnNldCB0byBoYXZlIGVxdWFsIHJhbmtzLlwifSksZihudWxsPT1pfHxjLnJhbms9PT1pLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkJhdGNoIG5vcm1hbGl6YXRpb24gZ3JhZGllbnQgcmVxdWlyZXMgbWVhbiBhbmQgc2NhbGUgdG8gaGF2ZSBlcXVhbCByYW5rcy5cIn0pLHU9MD09PWwucmFua3x8MT09PWwucmFuaz9sLmFzNEQoMSwxLDEsbC5zaXplKToyPT09bC5yYW5rP2wuYXM0RCgxLDEsbC5zaGFwZVswXSxsLnNoYXBlWzFdKTozPT09bC5yYW5rP2wuYXM0RCgxLGwuc2hhcGVbMF0sbC5zaGFwZVsxXSxsLnNoYXBlWzJdKTpsO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10LmJhdGNoTm9ybWFsaXphdGlvbih1LHV1KGMpLHV1KGgpLGEsdXUoaSksdXUocykpO3JldHVybiBlKFtsLGMsaCxpXSksbn0seyR4OmwsJG1lYW46YywkdmFyaWFuY2U6aCwkc2NhbGU6aSwkb2Zmc2V0OnN9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZSxyPW5bMF0sbz1uWzFdLGk9blsyXSxzPW5bM10sbD1udWxsPT1zP3duKDEpOnMsYz1lbyhvLnNoYXBlLHUuc2hhcGUpLGg9W107aWYoMT09PW8ucmFuayl7Zm9yKHZhciBwPTA7cDx1LnNoYXBlLmxlbmd0aC0xOysrcCloLnB1c2godS5zaGFwZVtwXSk7aC5wdXNoKDEpfXZhciBmPXIuc3ViKG8pLGQ9dC5tdWwobCksdj1IcyhpLmFkZCh3bihhKSkpLG09di5tdWwodikubXVsKHYpLm11bCh3bigtLjUpKTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gMT09PW8ucmFuaz90Lm11bChFcih2LmFzNEQoMSwxLDEsby5zaGFwZVswXSksaCkpLm11bChsKS5yZXNoYXBlKHIuc2hhcGUpOnQubXVsKHYpLm11bChsKS5yZXNoYXBlKHIuc2hhcGUpfSwkbWVhbjpmdW5jdGlvbigpe3ZhciB0PXYubXVsKHduKC0xKSkubXVsKGQpO3JldHVybiAxPT09by5yYW5rJiYodD10LnN1bShjKSksdC5yZXNoYXBlKG8uc2hhcGUpfSwkdmFyaWFuY2U6ZnVuY3Rpb24oKXt2YXIgdD1tLm11bChmKS5tdWwoZCk7cmV0dXJuIDE9PT1vLnJhbmsmJih0PXQuc3VtKGMpKSx0LnJlc2hhcGUoby5zaGFwZSl9LCRzY2FsZTpmdW5jdGlvbigpe3ZhciBlPWYubXVsKHYpLG49dC5tdWwoZSk7cmV0dXJuIDE9PT1vLnJhbmsmJihuPW4uc3VtKGMpKSxuLnJlc2hhcGUoby5zaGFwZSl9LCRvZmZzZXQ6ZnVuY3Rpb24oKXt2YXIgZT10O3JldHVybiAxPT09by5yYW5rJiYoZT1lLnN1bShjKSksZS5yZXNoYXBlKG8uc2hhcGUpfX19KS5yZXNoYXBlKGwuc2hhcGUpfWZ1bmN0aW9uIHV1KHQpe3JldHVybiBudWxsPT10P251bGw6MD09PXQucmFuaz90LmFzMUQoKToxPT09dC5yYW5rP3Q6Mj09PXQucmFuaz90LmFzNEQoMSwxLHQuc2hhcGVbMF0sdC5zaGFwZVsxXSk6Mz09PXQucmFuaz90LmFzNEQoMSx0LnNoYXBlWzBdLHQuc2hhcGVbMV0sdC5zaGFwZVsyXSk6dH1mdW5jdGlvbiBsdSgpe0JlKFwidGYuYmF0Y2hOb3JtYWxpemF0aW9uKCkgaXMgZ29pbmcgYXdheS4gVXNlIHRmLmJhdGNoTm9ybSgpIGluc3RlYWQsIGFuZCBub3RlIHRoZSBwb3NpdGlvbmFsIGFyZ3VtZW50IGNoYW5nZSBvZiBzY2FsZSwgb2Zmc2V0LCBhbmQgdmFyaWFuY2VFcHNpbG9uXCIpfXZhciBjdT12bih7YmF0Y2hOb3JtYWxpemF0aW9uMmRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdm9pZCAwPT09ciYmKHI9LjAwMSksbHUoKSxvdSh0LGUsbixhLG8scil9fSksaHU9dm4oe2JhdGNoTm9ybWFsaXphdGlvbjNkXzpmdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIHZvaWQgMD09PXImJihyPS4wMDEpLGx1KCksYXUodCxlLG4sYSxvLHIpfX0pLHB1PXZuKHtiYXRjaE5vcm1hbGl6YXRpb240ZF86ZnVuY3Rpb24odCxlLG4scixvLGEpe3JldHVybiB2b2lkIDA9PT1yJiYocj0uMDAxKSxsdSgpLGl1KHQsZSxuLGEsbyxyKX19KSxmdT12bih7YmF0Y2hOb3JtYWxpemF0aW9uXzpmdW5jdGlvbih0LGUsbixyLG8sYSl7cmV0dXJuIHZvaWQgMD09PXImJihyPS4wMDEpLGx1KCksc3UodCxlLG4sYSxvLHIpfX0pLGR1PXZuKHtiYXRjaE5vcm1fOnN1fSksdnU9dm4oe2JhdGNoTm9ybTJkXzpvdX0pLG11PXZuKHtiYXRjaE5vcm0zZF86YXV9KSxndT12bih7YmF0Y2hOb3JtNGRfOml1fSk7dmFyIHl1PXZuKHtsb2dpY2FsQW5kXzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKHQsXCJhXCIsXCJsb2dpY2FsQW5kXCIsXCJib29sXCIpLHI9bm4oZSxcImJcIixcImxvZ2ljYWxBbmRcIixcImJvb2xcIik7cmV0dXJuIG5vKG4uc2hhcGUsci5zaGFwZSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmxvZ2ljYWxBbmQobixyKX0seyRhOm4sJGI6cn0pfX0pLHh1PXZuKHtsb2dpY2FsTm90XzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwibG9naWNhbE5vdFwiLFwiYm9vbFwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmxvZ2ljYWxOb3QoZSl9LHskeDplfSl9fSksYnU9dm4oe2xvZ2ljYWxPcl86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwiYVwiLFwibG9naWNhbE9yXCIsXCJib29sXCIpLHI9bm4oZSxcImJcIixcImxvZ2ljYWxPclwiLFwiYm9vbFwiKTtyZXR1cm4gbm8obi5zaGFwZSxyLnNoYXBlKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQubG9naWNhbE9yKG4scil9LHskYTpuLCRiOnJ9KX19KSx3dT12bih7bG9naWNhbFhvcl86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwiYVwiLFwibG9naWNhbFhvclwiLFwiYm9vbFwiKSxyPW5uKGUsXCJiXCIsXCJsb2dpY2FsWG9yXCIsXCJib29sXCIpO3JldHVybiBubyhuLnNoYXBlLHIuc2hhcGUpLGJ1KHQsZSkubG9naWNhbEFuZCh5dSh0LGUpLmxvZ2ljYWxOb3QoKSl9fSksQ3U9dm4oe3doZXJlXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bm4oZSxcImFcIixcIndoZXJlXCIpLG89bm4obixcImJcIixcIndoZXJlXCIpLGE9bm4odCxcImNvbmRpdGlvblwiLFwid2hlcmVcIixcImJvb2xcIik7cmV0dXJuIGQoci5zaGFwZSxvLnNoYXBlLFwiRXJyb3IgaW4gd2hlcmU6IFwiKSwxPT09YS5yYW5rP2YoYS5zaGFwZVswXT09PXIuc2hhcGVbMF0sZnVuY3Rpb24oKXtyZXR1cm5cIlRoZSBmaXJzdCBkaW1lbnNpb24gb2YgYGFgIG11c3QgbWF0Y2ggdGhlIHNpemUgb2YgYGNvbmRpdGlvbmAuXCJ9KTpkKGEuc2hhcGUsby5zaGFwZSxcIkVycm9yIGluIHdoZXJlOiBcIiksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5zZWxlY3QoYSxyLG8pO3JldHVybiBlKFthXSksbn0seyRjb25kaXRpb246YSwkYTpyLCRiOm99LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JGNvbmRpdGlvbjpmdW5jdGlvbigpe3JldHVybiBGbihuKS50b0Zsb2F0KCl9LCRhOmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4uY2FzdCh0LmR0eXBlKSl9LCRiOmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4ubG9naWNhbE5vdCgpLmNhc3QodC5kdHlwZSkpfX19KX19KSxFdT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuLG87cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOnJldHVybls0LChlPW5uKHQsXCJjb25kaXRpb25cIixcIndoZXJlQXN5bmNcIixcImJvb2xcIikpLmRhdGEoKV07Y2FzZSAxOnJldHVybiBuPXIuc2VudCgpLG89QW8oZS5zaGFwZSxuKSx0IT09ZSYmZS5kaXNwb3NlKCksWzIsb119fSl9KX07dmFyIFJ1PXZuKHthZGRfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ubih0LFwiYVwiLFwiYWRkXCIpLG89bm4oZSxcImJcIixcImFkZFwiKTtuPXd0KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1ubyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuYWRkKHIsbyl9LHskYTpyLCRiOm99LGZ1bmN0aW9uKHQpe3JldHVybnskYTpmdW5jdGlvbigpe3ZhciBlPXQsbj1lbyhyLnNoYXBlLGEpO3JldHVybiBuLmxlbmd0aD4wJiYoZT1lLnN1bShuKSksZS5yZXNoYXBlKHIuc2hhcGUpfSwkYjpmdW5jdGlvbigpe3ZhciBlPXQsbj1lbyhvLnNoYXBlLGEpO3JldHVybiBuLmxlbmd0aD4wJiYoZT1lLnN1bShuKSksZS5yZXNoYXBlKG8uc2hhcGUpfX19KX19KSxJdT12bih7YWRkTl86ZnVuY3Rpb24odCl7ZihBcnJheS5pc0FycmF5KHQpLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgYXJndW1lbnQgcGFzc2VkIHRvIHRmLmFkZE4oKSBtdXN0IGJlIGEgbGlzdCBvZiB0ZW5zb3JzXCJ9KSxmKHQubGVuZ3RoPj0xLGZ1bmN0aW9uKCl7cmV0dXJuXCJNdXN0IHBhc3MgYXQgbGVhc3Qgb25lIHRlbnNvciB0byB0Zi5hZGROKCksIGJ1dCBnb3QgXCIrdC5sZW5ndGh9KTt2YXIgZT10Lm1hcChmdW5jdGlvbih0LGUpe3JldHVybiBubih0LFwidGVuc29yc1wiK2UsXCJhZGROXCIpfSksbj1lWzBdO2UuZm9yRWFjaChmdW5jdGlvbih0KXtpZih0LmR0eXBlIT09bi5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJBbGwgdGVuc29ycyBwYXNzZWQgdG8gdGYuYWRkTigpIG11c3QgaGF2ZSB0aGUgc2FtZSBkdHlwZVwiKX0pLGUuZm9yRWFjaChmdW5jdGlvbih0KXtpZigheSh0LnNoYXBlLG4uc2hhcGUpKXRocm93IG5ldyBFcnJvcihcIkFsbCB0ZW5zb3JzIHBhc3NlZCB0byB0Zi5hZGROKCkgbXVzdCBoYXZlIHRoZSBzYW1lIHNoYXBlXCIpfSk7dmFyIHI9ZTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFkZE4oZSl9LHIsZnVuY3Rpb24odCl7dmFyIG49e307cmV0dXJuIGUuZm9yRWFjaChmdW5jdGlvbihlLHIpe25bcl09ZnVuY3Rpb24oKXtyZXR1cm4gdC5jbG9uZSgpfX0pLG59KX19KSxrdT12bih7YWRkU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKHQsXCJhXCIsXCJhZGRTdHJpY3RcIikscj1ubihlLFwiYlwiLFwiYWRkU3RyaWN0XCIpO3JldHVybiBkKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIGFkZFN0cmljdDogXCIpLG4uYWRkKHIpfX0pLE51PXZuKHthdGFuMl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW5uKHQsXCJhXCIsXCJhdGFuMlwiKSxvPW5uKGUsXCJiXCIsXCJhdGFuMlwiKTtuPXd0KHIsbykscj1uWzBdLG89blsxXTt2YXIgYT1ubyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10LmF0YW4yKHIsbyk7cmV0dXJuIGUoW3Isb10pLG59LHskYTpyLCRiOm99LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJueyRhOmZ1bmN0aW9uKCl7dmFyIGU9UnUobi5zcXVhcmUoKSxyLnNxdWFyZSgpKSxvPXQubXVsKHIuZGl2KGUpKSxpPWVvKG4uc2hhcGUsYSk7cmV0dXJuIGkubGVuZ3RoPjAmJihvPW8uc3VtKGkpKSxvLnJlc2hhcGUobi5zaGFwZSl9LCRiOmZ1bmN0aW9uKCl7dmFyIGU9UnUobi5zcXVhcmUoKSxyLnNxdWFyZSgpKSxvPVZzKHQubXVsKG4uZGl2KGUpKSksaT1lbyhyLnNoYXBlLGEpO3JldHVybiBpLmxlbmd0aD4wJiYobz1vLnN1bShpKSksby5yZXNoYXBlKHIuc2hhcGUpfX19KX19KSxTdT12bih7ZGl2XzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bm4odCxcImFcIixcImRpdlwiKSxvPW5uKGUsXCJiXCIsXCJkaXZcIik7aWYobj13dChyLG8pLHI9blswXSxvPW5bMV0sXCJpbnQzMlwiPT09ci5kdHlwZSYmXCJpbnQzMlwiPT09by5kdHlwZSlyZXR1cm4gVHUocixvKTt2YXIgYT1ubyhyLnNoYXBlLG8uc2hhcGUpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10LnJlYWxEaXZpZGUocixvKTtyZXR1cm4gZShbcixvXSksbn0seyRhOnIsJGI6b30sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57JGE6ZnVuY3Rpb24oKXt2YXIgZT10LmRpdihyLnRvRmxvYXQoKSksbz1lbyhuLnNoYXBlLGEpO3JldHVybiBvLmxlbmd0aD4wP2Uuc3VtKG8pLnJlc2hhcGUobi5zaGFwZSk6ZX0sJGI6ZnVuY3Rpb24oKXt2YXIgZT10Lm11bChuLnRvRmxvYXQoKSksbz1lbyhyLnNoYXBlLGEpO28ubGVuZ3RoPjAmJihlPWUuc3VtKG8pLnJlc2hhcGUoci5zaGFwZSkpO3ZhciBpPXIuc3F1YXJlKCk7cmV0dXJuIGUuZGl2KGkudG9GbG9hdCgpKS5uZWcoKX19fSl9fSksQXU9dm4oe2RpdlN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwiYVwiLFwiZGl2XCIpLHI9bm4oZSxcImJcIixcImRpdlwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBkaXZpZGVTdHJpY3Q6IFwiKSxuLmRpdihyKX19KSxUdT12bih7Zmxvb3JEaXZfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ubih0LFwiYVwiLFwiZmxvb3JEaXZcIiksbz1ubihlLFwiYlwiLFwiZmxvb3JEaXZcIik7bj13dChyLG8pLHI9blswXSxvPW5bMV07dmFyIGE9bm8oci5zaGFwZSxvLnNoYXBlKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5mbG9vckRpdihyLG8pO3JldHVybiBlKFtyLG9dKSxufSx7JGE6ciwkYjpvfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnskYTpmdW5jdGlvbigpe3ZhciBlPXQuZGl2KHIudG9GbG9hdCgpKSxvPWVvKG4uc2hhcGUsYSk7cmV0dXJuIG8ubGVuZ3RoPjA/ZS5zdW0obykucmVzaGFwZShuLnNoYXBlKTplfSwkYjpmdW5jdGlvbigpe3ZhciBlPXQubXVsKG4udG9GbG9hdCgpKSxvPWVvKHIuc2hhcGUsYSk7by5sZW5ndGg+MCYmKGU9ZS5zdW0obykucmVzaGFwZShyLnNoYXBlKSk7dmFyIGk9ci5zcXVhcmUoKTtyZXR1cm4gZS5kaXYoaS50b0Zsb2F0KCkpLm5lZygpfX19KX19KSxEdT12bih7bWF4aW11bV86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW5uKHQsXCJhXCIsXCJtYXhpbXVtXCIpLG89bm4oZSxcImJcIixcIm1heGltdW1cIik7cmV0dXJuIG49d3QocixvKSxyPW5bMF0sbz1uWzFdLFwiYm9vbFwiPT09ci5kdHlwZSYmKHI9ci50b0ludCgpLG89by50b0ludCgpKSxubyhyLnNoYXBlLG8uc2hhcGUpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWF4aW11bShyLG8pO3JldHVybiBlKFtyLG9dKSxufSx7JGE6ciwkYjpvfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnskYTpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmdyZWF0ZXJFcXVhbChyKS50b0Zsb2F0KCkpfSwkYjpmdW5jdGlvbigpe3JldHVybiB0Lm11bChuLmxlc3MocikudG9GbG9hdCgpKX19fSl9fSksX3U9dm4oe21heGltdW1TdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bm4odCxcImFcIixcIm1heGltdW1TdHJpY3RcIikscj1ubihlLFwiYlwiLFwibWF4aW11bVN0cmljdFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBtYXhpbXVtU3RyaWN0OiBcIiksbi5tYXhpbXVtKHIpfX0pLE91PXZuKHttaW5pbXVtXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bm4odCxcImFcIixcIm1pbmltdW1cIiksbz1ubihlLFwiYlwiLFwibWluaW11bVwiKTtyZXR1cm4gbj13dChyLG8pLHI9blswXSxvPW5bMV0sXCJib29sXCI9PT1yLmR0eXBlJiYocj1yLnRvSW50KCksbz1vLnRvSW50KCkpLG5vKHIuc2hhcGUsby5zaGFwZSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5taW5pbXVtKHIsbyk7cmV0dXJuIGUoW3Isb10pLG59LHskYTpyLCRiOm99LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJueyRhOmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4ubGVzc0VxdWFsKHIpLnRvRmxvYXQoKSl9LCRiOmZ1bmN0aW9uKCl7cmV0dXJuIHQubXVsKG4uZ3JlYXRlcihyKS50b0Zsb2F0KCkpfX19KX19KSxGdT12bih7bWluaW11bVN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwiYVwiLFwibWluaW11bVN0cmljdFwiKSxyPW5uKGUsXCJiXCIsXCJtaW5pbXVtU3RyaWN0XCIpO3JldHVybiBkKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG1pbmltdW1TdHJpY3Q6IFwiKSxuLm1pbmltdW0ocil9fSksTXU9dm4oe21vZF86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW5uKHQsXCJhXCIsXCJtb2RcIiksbz1ubihlLFwiYlwiLFwibW9kXCIpO249d3QocixvKSxyPW5bMF0sbz1uWzFdO3ZhciBhPW5vKHIuc2hhcGUsby5zaGFwZSk7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQubW9kKHIsbyk7cmV0dXJuIGUoW3Isb10pLG59LHskYTpyLCRiOm99LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV07cmV0dXJueyRhOmZ1bmN0aW9uKCl7dmFyIGU9ZW8obi5zaGFwZSxhKTtyZXR1cm4gZS5sZW5ndGg+MD90LnN1bShlKS5yZXNoYXBlKG4uc2hhcGUpOnR9LCRiOmZ1bmN0aW9uKCl7dmFyIGU9dC5tdWwobi5kaXYocikuZmxvb3IoKS5uZWcoKSksbz1lbyhyLnNoYXBlLGEpO3JldHVybiBvLmxlbmd0aD4wP2Uuc3VtKG8pLnJlc2hhcGUoci5zaGFwZSk6ZX19fSl9fSksQnU9dm4oe21vZFN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwiYVwiLFwibW9kU3RyaWN0XCIpLHI9bm4oZSxcImJcIixcIm1vZFN0cmljdFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBtb2RTdHJpY3Q6IFwiKSxuLm1vZChyKX19KSxQdT12bih7bXVsXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bm4odCxcImFcIixcIm11bFwiKSxvPW5uKGUsXCJiXCIsXCJtdWxcIik7bj13dChyLG8pLHI9blswXSxvPW5bMV07dmFyIGE9bm8oci5zaGFwZSxvLnNoYXBlKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5tdWx0aXBseShyLG8pO3JldHVybiBlKFtyLG9dKSxufSx7JGE6ciwkYjpvfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnskYTpmdW5jdGlvbigpe3ZhciBlPXQubXVsKHIudG9GbG9hdCgpKSxvPWVvKG4uc2hhcGUsYSk7cmV0dXJuIG8ubGVuZ3RoPjA/ZS5zdW0obykucmVzaGFwZShuLnNoYXBlKTplfSwkYjpmdW5jdGlvbigpe3ZhciBlPXQubXVsKG4udG9GbG9hdCgpKSxvPWVvKHIuc2hhcGUsYSk7cmV0dXJuIG8ubGVuZ3RoPjA/ZS5zdW0obykucmVzaGFwZShyLnNoYXBlKTplfX19KX19KSxMdT12bih7bXVsU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKHQsXCJhXCIsXCJtdWxcIikscj1ubihlLFwiYlwiLFwibXVsXCIpO3JldHVybiBkKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG11bHRpcGx5U3RyaWN0OiBcIiksbi5tdWwocil9fSksV3U9dm4oe3Bvd186ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwiYmFzZVwiLFwicG93XCIpLHI9bm4oZSxcImV4cFwiLFwicG93XCIpLG89bm8obi5zaGFwZSxyLnNoYXBlKTtyZXR1cm4gdD1uLmNhc3QoeHQobi5kdHlwZSxyLmR0eXBlKSksZT1yLmNhc3QoeHQobi5kdHlwZSxyLmR0eXBlKSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG89dC5wb3cobixyKTtyZXR1cm4gZShbbixyLG9dKSxvfSx7JGJhc2U6biwkZXhwOnJ9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV0sYT1lWzJdO3JldHVybnskYmFzZTpmdW5jdGlvbigpe3ZhciBlPXIudG9GbG9hdCgpLGE9dC5tdWwoZS5tdWwobi5wb3coZS5zdWIod24oMSkpKSkpLGk9ZW8obi5zaGFwZSxvKTtyZXR1cm4gaS5sZW5ndGg+MCYmKGE9YS5zdW0oaSkpLGEucmVzaGFwZShuLnNoYXBlKX0sJGV4cDpmdW5jdGlvbigpe3ZhciBlPW4uZ3JlYXRlcigwKSxpPW4ubG9nKCkud2hlcmUoZSxGbihuKSkscz10Lm11bChhLm11bChpKSksdT1lbyhyLnNoYXBlLG8pO3JldHVybiB1Lmxlbmd0aD4wJiYocz1zLnN1bSh1KSkscy5yZXNoYXBlKHIuc2hhcGUpfX19KX19KSxVdT12bih7cG93U3RyaWN0XzpmdW5jdGlvbih0LGUpe3JldHVybiBkKHQuc2hhcGUsZS5zaGFwZSxcIkVycm9yIGluIHBvd1N0cmljdDogXCIpLHQucG93KGUpfX0pLFZ1PXZuKHtzcXVhcmVkRGlmZmVyZW5jZV86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW5uKHQsXCJhXCIsXCJzcXVhcmVkRGlmZmVyZW5jZVwiKSxvPW5uKGUsXCJiXCIsXCJzcXVhcmVkRGlmZmVyZW5jZVwiKTtyZXR1cm4gbj13dChyLG8pLHI9blswXSxvPW5bMV0sbm8oci5zaGFwZSxvLnNoYXBlKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10LnNxdWFyZWREaWZmZXJlbmNlKHIsbyk7cmV0dXJuIGUoW3Isb10pLG59LHskYTpyLCRiOm99LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxyPWVbMV0sbz13bigyKTtyZXR1cm57JGE6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwobi5zdWIocikubXVsKG8pKX0sJGI6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tdWwoci5zdWIobikubXVsKG8pKX19fSl9fSksenU9dm4oe3NxdWFyZWREaWZmZXJlbmNlU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKHQsXCJhXCIsXCJzcXVhcmVkRGlmZmVyZW5jZVN0cmljdFwiKSxyPW5uKGUsXCJiXCIsXCJzcXVhcmVkRGlmZmVyZW5jZVN0cmljdFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBzcXVhcmVkRGlmZmVyZW5jZVN0cmljdDogXCIpLG4uc3F1YXJlZERpZmZlcmVuY2Uocil9fSksR3U9dm4oe3N1Yl86ZnVuY3Rpb24odCxlKXt2YXIgbixyPW5uKHQsXCJhXCIsXCJzdWJcIiksbz1ubihlLFwiYlwiLFwic3ViXCIpO249d3QocixvKSxyPW5bMF0sbz1uWzFdO3ZhciBhPW5vKHIuc2hhcGUsby5zaGFwZSk7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5zdWJ0cmFjdChyLG8pfSx7JGE6ciwkYjpvfSxmdW5jdGlvbih0KXtyZXR1cm57JGE6ZnVuY3Rpb24oKXt2YXIgZT10LG49ZW8oci5zaGFwZSxhKTtyZXR1cm4gbi5sZW5ndGg+MCYmKGU9ZS5zdW0obikpLGUucmVzaGFwZShyLnNoYXBlKX0sJGI6ZnVuY3Rpb24oKXt2YXIgZT10LG49ZW8oby5zaGFwZSxhKTtyZXR1cm4gbi5sZW5ndGg+MCYmKGU9ZS5zdW0obikpLGUubmVnKCkucmVzaGFwZShvLnNoYXBlKX19fSl9fSksSHU9dm4oe3N1YlN0cmljdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwiYVwiLFwic3ViU3RyaWN0XCIpLHI9bm4oZSxcImJcIixcInN1YlN0cmljdFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBzdWJTdHJpY3Q6IFwiKSxuLnN1YihyKX19KTt2YXIgcXU9dm4oe2VxdWFsXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bm4odCxcImFcIixcImVxdWFsXCIpLG89bm4oZSxcImJcIixcImVxdWFsXCIpO3JldHVybiBuPXd0KHIsbykscj1uWzBdLG89blsxXSxubyhyLnNoYXBlLG8uc2hhcGUpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5lcXVhbChyLG8pfSx7JGE6ciwkYjpvfSl9fSksJHU9dm4oe2VxdWFsU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKHQsXCJhXCIsXCJlcXVhbFN0cmljdFwiKSxyPW5uKGUsXCJiXCIsXCJlcXVhbFN0cmljdFwiKTtyZXR1cm4gZChuLnNoYXBlLHIuc2hhcGUsXCJFcnJvciBpbiBlcXVhbFN0cmljdDogXCIpLG4uZXF1YWwocil9fSksS3U9dm4oe2dyZWF0ZXJfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ubih0LFwiYVwiLFwiZ3JlYXRlclwiKSxvPW5uKGUsXCJiXCIsXCJncmVhdGVyXCIpO3JldHVybiBuPXd0KHIsbykscj1uWzBdLG89blsxXSxubyhyLnNoYXBlLG8uc2hhcGUpLFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5ncmVhdGVyKHIsbyl9LHskYTpyLCRiOm99KX19KSxqdT12bih7Z3JlYXRlckVxdWFsXzpmdW5jdGlvbih0LGUpe3ZhciBuLHI9bm4odCxcImFcIixcImdyZWF0ZXJFcXVhbFwiKSxvPW5uKGUsXCJiXCIsXCJncmVhdGVyRXF1YWxcIik7cmV0dXJuIG49d3QocixvKSxyPW5bMF0sbz1uWzFdLG5vKHIuc2hhcGUsby5zaGFwZSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5ncmVhdGVyRXF1YWwocixvKTtyZXR1cm4gZShbcixvXSksbn0seyRhOnIsJGI6b30sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXTtyZXR1cm57JGE6ZnVuY3Rpb24oKXtyZXR1cm4gRm4obil9LCRiOmZ1bmN0aW9uKCl7cmV0dXJuIEZuKHIpfX19KX19KSxYdT12bih7Z3JlYXRlckVxdWFsU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKHQsXCJhXCIsXCJncmVhdGVyRXF1YWxTdHJpY3RcIikscj1ubihlLFwiYlwiLFwiZ3JlYXRlckVxdWFsU3RyaWN0XCIpO3JldHVybiBkKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIGdyZWF0ZXJFcXVhbFN0cmljdDogXCIpLG4uZ3JlYXRlckVxdWFsKHIpfX0pLFl1PXZuKHtncmVhdGVyU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKHQsXCJhXCIsXCJncmVhdGVyU3RyaWN0XCIpLHI9bm4oZSxcImJcIixcImdyZWF0ZXJTdHJpY3RcIik7cmV0dXJuIGQobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gZ3JlYXRlclN0cmljdDogXCIpLG4uZ3JlYXRlcihyKX19KSxRdT12bih7bGVzc186ZnVuY3Rpb24odCxlKXt2YXIgbixyPW5uKHQsXCJhXCIsXCJsZXNzXCIpLG89bm4oZSxcImJcIixcImxlc3NcIik7cmV0dXJuIG49d3QocixvKSxyPW5bMF0sbz1uWzFdLG5vKHIuc2hhcGUsby5zaGFwZSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0Lmxlc3MocixvKX0seyRhOnIsJGI6b30pfX0pLEp1PXZuKHtsZXNzRXF1YWxfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ubih0LFwiYVwiLFwibGVzc0VxdWFsXCIpLG89bm4oZSxcImJcIixcImxlc3NFcXVhbFwiKTtyZXR1cm4gbj13dChyLG8pLHI9blswXSxvPW5bMV0sbm8oci5zaGFwZSxvLnNoYXBlKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQubGVzc0VxdWFsKHIsbyl9LHskYTpyLCRiOm99KX19KSxadT12bih7bGVzc0VxdWFsU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKHQsXCJhXCIsXCJsZXNzRXF1YWxTdHJpY3RcIikscj1ubihlLFwiYlwiLFwibGVzc0VxdWFsU3RyaWN0XCIpO3JldHVybiBkKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIGxlc3NFcXVhbFN0cmljdDogXCIpLG4ubGVzc0VxdWFsKHIpfX0pLHRsPXZuKHtsZXNzU3RyaWN0XzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKHQsXCJhXCIsXCJsZXNzU3RyaWN0XCIpLHI9bm4oZSxcImJcIixcImxlc3NTdHJpY3RcIik7cmV0dXJuIGQobi5zaGFwZSxyLnNoYXBlLFwiRXJyb3IgaW4gbGVzc1N0cmljdDogXCIpLG4ubGVzcyhyKX19KSxlbD12bih7bm90RXF1YWxfOmZ1bmN0aW9uKHQsZSl7dmFyIG4scj1ubih0LFwiYVwiLFwibm90RXF1YWxcIiksbz1ubihlLFwiYlwiLFwibm90RXF1YWxcIik7cmV0dXJuIG49d3QocixvKSxyPW5bMF0sbz1uWzFdLG5vKHIuc2hhcGUsby5zaGFwZSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5vdEVxdWFsKHIsbyl9LHskYTpyLCRiOm99KX19KSxubD12bih7bm90RXF1YWxTdHJpY3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bm4odCxcImFcIixcIm5vdEVxdWFsU3RyaWN0XCIpLHI9bm4oZSxcImJcIixcIm5vdEVxdWFsU3RyaWN0XCIpO3JldHVybiBkKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIG5vdEVxdWFsU3RyaWN0OiBcIiksbi5ub3RFcXVhbChyKX19KTtmdW5jdGlvbiBybCh0LGUpe2Zvcih2YXIgbj1bXSxyPXQ7cjxlOysrciluLnB1c2gocik7cmV0dXJuIG59ZnVuY3Rpb24gb2wodCl7Zm9yKHZhciBlPVtdLG49MDtuPHQubGVuZ3RoOysrbilmb3IodmFyIHI9MDtyPHRbbl0ubGVuZ3RoOysrcillLnB1c2godFtuXVtyXSk7cmV0dXJuIGV9dmFyIGFsPXZuKHtnYXRoZXJfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0wKTt2YXIgcj1ubih0LFwieFwiLFwiZ2F0aGVyXCIpLG89bm4oZSxcImluZGljZXNcIixcImdhdGhlclwiLFwiaW50MzJcIik7bj1JKG4sci5zaGFwZSlbMF07dmFyIGE9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj10LnNoYXBlW25dLG89W10sYT0xLGk9MSxzPTA7czxuO3MrKylvLnB1c2godC5zaGFwZVtzXSksYSo9dC5zaGFwZVtzXTtmb3Iocz0wO3M8ZS5yYW5rO3MrKylvLnB1c2goZS5zaGFwZVtzXSk7Zm9yKHM9bisxO3M8dC5yYW5rO3MrKylvLnB1c2godC5zaGFwZVtzXSksaSo9dC5zaGFwZVtzXTtyZXR1cm57YmF0Y2hTaXplOmEsc2xpY2VTaXplOmksZGltU2l6ZTpyLG91dHB1dFNoYXBlOm99fShyLG8sbik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBhPXQuZ2F0aGVyKHIsby5mbGF0dGVuKCksbik7cmV0dXJuIGUoW29dKSxhfSx7JHg6cn0sZnVuY3Rpb24odCxlKXt2YXIgbz1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3ZhciBlPXIuc2hhcGUsYT1vLnNpemUsaT1lLnNsaWNlKDAsbikscz1pLmxlbmd0aCx1PWUuc2xpY2UobixlLmxlbmd0aCkuc2xpY2UoMSksbD11Lmxlbmd0aCxjPXJsKDAscyksaD1ybChzKzEscysxK2wpLHA9b2woW2ksW2FdLHVdKSxmPXQucmVzaGFwZShwKSxkPW8ucmVzaGFwZShbYV0pLHY9b2woW1tzXSxjLGhdKSxtPWYudHJhbnNwb3NlKHYpLGc9aWwobSxkLHIuc2hhcGVbbl0pLHk9aG4odik7cmV0dXJuIGc9Zy50cmFuc3Bvc2UoeSl9fX0pLnJlc2hhcGUoYS5vdXRwdXRTaGFwZSl9fSksaWw9dm4oe3Vuc29ydGVkU2VnbWVudFN1bV86ZnVuY3Rpb24odCxlLG4pe3ZhciByPW5uKHQsXCJ4XCIsXCJ1bnNvcnRlZFNlZ21lbnRTdW1cIiksbz1ubihlLFwic2VnbWVudElkc1wiLFwidW5zb3J0ZWRTZWdtZW50U3VtXCIsXCJpbnQzMlwiKTtyZXR1cm4gZih4KG4pLGZ1bmN0aW9uKCl7cmV0dXJuXCJudW1TZWdtZW50cyBtdXN0IGJlIG9mIGR0eXBlIGludFwifSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIGE9dC51bnNvcnRlZFNlZ21lbnRTdW0ocixvLG4pO3JldHVybiBlKFtvXSksYX0seyR4OnJ9LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlKXtmb3IodmFyIG49RHUoZSxGbihlKSkscj1hbCh0LG4pLG89anUoZSx3bigwLFwiaW50MzJcIikpLGE9ci5yYW5rLW8ucmFuayxpPTA7aTxhOysraSlvPWlyKG8saSsxKTtvPXl1KG8sU24oci5zaGFwZSxcImJvb2xcIikpO3ZhciBzPUZuKHIpO3JldHVybiBDdShvLHIscyl9KHQsbil9fX0pfX0pO3ZhciBzbD1mdW5jdGlvbih0LGUsbyl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIG4sYSxpLHMsdSxsLGMsaCxwLHYsbSxnLHk7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmZvcihuPW5uKHQsXCJ0ZW5zb3JcIixcImJvb2xNYXNrXCIpLGE9bm4oZSxcIm1hc2tcIixcImJvb2xNYXNrXCIsXCJib29sXCIpLGk9bnVsbD09bz8wOm8scz1hLnJhbmssdT1uLnNoYXBlLGYocz4wLGZ1bmN0aW9uKCl7cmV0dXJuXCJtYXNrIGNhbm5vdCBiZSBzY2FsYXJcIn0pLGQodS5zbGljZShpLGkrcyksYS5zaGFwZSxcIm1hc2sncyBzaGFwZSBtdXN0IG1hdGNoIHRoZSBmaXJzdCBLIGRpbWVuc2lvbnMgb2YgdGVuc29yJ3Mgc2hhcGUsXCIpLGw9MSxjPWk7YzxpK3M7YysrKWwqPXVbY107cmV0dXJuIGg9dS5zbGljZSgwLGkpLmNvbmNhdChbbF0sdS5zbGljZShpK3MpKSxwPW4ucmVzaGFwZShoKSx2PWEucmVzaGFwZShbLTFdKSxbNCxFdSh2KV07Y2FzZSAxOnJldHVybiBtPXIuc2VudCgpLGc9bS5zcXVlZXplKFsxXSkseT1hbChwLGcsaSksdCE9PW4mJm4uZGlzcG9zZSgpLGUhPT1hJiZhLmRpc3Bvc2UoKSxnLmRpc3Bvc2UoKSxwLmRpc3Bvc2UoKSx2LmRpc3Bvc2UoKSxtLmRpc3Bvc2UoKSxbMix5XX19KX0pfTtmdW5jdGlvbiB1bCh0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1hJiYoYT1cIk5IV0NcIiksZih0Lmxlbmd0aD09PWUucmFuayxmdW5jdGlvbigpe3JldHVyblwiTGVuZ3RoIG9mIGluU2hhcGUgKFwiK3QubGVuZ3RoK1wiKSBhbmQgcmFuayBvZiBkeSAoXCIrZS5yYW5rK1wiKSBtdXN0IG1hdGNoXCJ9KTt2YXIgcz10LHU9ZSxsPSExOzM9PT1lLnJhbmsmJihsPSEwLHU9ZS5hczREKDEsZS5zaGFwZVswXSxlLnNoYXBlWzFdLGUuc2hhcGVbMl0pLHM9WzEsdFswXSx0WzFdLHRbMl1dKSxmKDQ9PT1zLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVySW5wdXQ6IGluU2hhcGUgbXVzdCBiZSBsZW5ndGggNCwgYnV0IGdvdCBsZW5ndGggXCIrcy5sZW5ndGgrXCIuXCJ9KSxmKDQ9PT11LnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBkeSBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK3UucmFua30pLGYoND09PW4ucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVySW5wdXQ6IGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK24ucmFua30pO3ZhciBjPVwiTkhXQ1wiPT09YT9zWzNdOnNbMV0saD1cIk5IV0NcIj09PWE/dS5zaGFwZVszXTp1LnNoYXBlWzFdO2YoYz09PW4uc2hhcGVbMl0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBkZXB0aCBvZiBpbnB1dCAoXCIrYytcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBmb3IgZmlsdGVyIFwiK24uc2hhcGVbMl0rXCIuXCJ9KSxmKGg9PT1uLnNoYXBlWzNdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJJbnB1dDogZGVwdGggb2Ygb3V0cHV0IChcIitoK1wiKSBtdXN0IG1hdGNoIG91dHB1dCBkZXB0aCBmb3IgZmlsdGVyIFwiK24uc2hhcGVbM10rXCIuXCJ9KSxudWxsIT1pJiZmKHgobyksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlcklucHV0OiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitpK1wiIGJ1dCBnb3QgcGFkIFwiK28rXCIuXCJ9KTt2YXIgcD12byhhKSxkPWFvKHMsbi5zaGFwZSxyLDEsbyxpLCExLHApLHY9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIHI9dC5jb252MmREZXJJbnB1dCh1LG4sZCk7cmV0dXJuIGUoW24sdV0pLHJ9LHtkeTREOnUsZmlsdGVyOm59LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXSxzPWVbMV07cmV0dXJue2R5NEQ6ZnVuY3Rpb24oKXtyZXR1cm4gZmwodCxuLHIsbyxhLDEsaSl9LGZpbHRlcjpmdW5jdGlvbigpe3JldHVybiB2bCh0LHMsbi5zaGFwZSxyLG8sYSxpKX19fSk7cmV0dXJuIGw/di5hczNEKHYuc2hhcGVbMV0sdi5zaGFwZVsyXSx2LnNoYXBlWzNdKTp2fWZ1bmN0aW9uIGxsKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PWEmJihhPVwiTkhXQ1wiKTt2YXIgcz10OzM9PT10LnJhbmsmJihzPXQuYXM0RCgxLHQuc2hhcGVbMF0sdC5zaGFwZVsxXSx0LnNoYXBlWzJdKSk7dmFyIHU9ZTszPT09dS5yYW5rJiYodT1lLmFzNEQoMSxlLnNoYXBlWzBdLGUuc2hhcGVbMV0sZS5zaGFwZVsyXSkpLGYoND09PXMucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVyRmlsdGVyOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCBzaGFwZSBcIitzLnNoYXBlK1wiLlwifSksZig0PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJGaWx0ZXI6IGR5IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHNoYXBlIFwiK3Uuc2hhcGUrXCIuXCJ9KSxmKDQ9PT1uLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVyRmlsdGVyOiBmaWx0ZXJTaGFwZSBtdXN0IGJlIGxlbmd0aCA0LCBidXQgZ290IFwiK24rXCIuXCJ9KTt2YXIgbD1cIk5IV0NcIj09PWE/cy5zaGFwZVszXTpzLnNoYXBlWzFdLGM9XCJOSFdDXCI9PT1hP3Uuc2hhcGVbM106dS5zaGFwZVsxXTtmKGw9PT1uWzJdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmREZXJGaWx0ZXI6IGRlcHRoIG9mIGlucHV0IFwiK2wrXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggaW4gZmlsdGVyIChcIituWzJdK1wiLlwifSksZihjPT09blszXSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkRGVyRmlsdGVyOiBkZXB0aCBvZiBkeSAoXCIrYytcIikgbXVzdCBtYXRjaCBvdXRwdXQgZGVwdGggZm9yIGZpbHRlciAoXCIrblszXStcIikuXCJ9KSxudWxsIT1pJiZmKHgobyksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZERlckZpbHRlcjogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIraStcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSk7dmFyIGg9dm8oYSkscD1hbyhzLnNoYXBlLG4sciwxLG8saSwhMSxoKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnYyZERlckZpbHRlcihzLHUscCl9LHt4NEQ6cyxkeTREOnV9KX1mdW5jdGlvbiBjbCh0KXt2YXIgZT1mdW5jdGlvbih0KXtyZXR1cm5cIm51bWJlclwiPT10eXBlb2YgdD9bdCx0LHRdOjI9PT10Lmxlbmd0aD9bdFswXSx0WzFdLDFdOnR9KHQpLG49ZVswXSxyPWVbMV0sbz1lWzJdO3JldHVybiAxPT09biYmMT09PXImJjE9PT1vfWZ1bmN0aW9uIGhsKHQsZSxuLHIsbyl7Zih0Lmxlbmd0aD09PWUucmFuayxmdW5jdGlvbigpe3JldHVyblwiTGVuZ3RoIG9mIGluU2hhcGUgKFwiK3QubGVuZ3RoK1wiKSBhbmQgcmFuayBvZiBkeSAoXCIrZS5yYW5rK1wiKSBtdXN0IG1hdGNoXCJ9KTt2YXIgYT10LGk9ZSxzPSExOzQ9PT1lLnJhbmsmJihzPSEwLGk9ZS5hczVEKDEsZS5zaGFwZVswXSxlLnNoYXBlWzFdLGUuc2hhcGVbMl0sZS5zaGFwZVszXSksYT1bMSx0WzBdLHRbMV0sdFsyXSx0WzNdXSk7dmFyIHU9YVs0XSxsPWkuc2hhcGVbNF07Zig1PT09YS5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlcklucHV0OiBpblNoYXBlIG11c3QgYmUgbGVuZ3RoIDUsIGJ1dCBnb3QgbGVuZ3RoIFwiK2EubGVuZ3RoK1wiLlwifSksZig1PT09aS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJJbnB1dDogZHkgbXVzdCBiZSByYW5rIDUsIGJ1dCBnb3QgcmFuayBcIitpLnJhbmt9KSxmKDU9PT1uLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlcklucHV0OiBmaWx0ZXIgbXVzdCBiZSByYW5rIDUsIGJ1dCBnb3QgcmFuayBcIituLnJhbmt9KSxmKHU9PT1uLnNoYXBlWzNdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2REZXJJbnB1dDogZGVwdGggb2YgaW5wdXQgKFwiK3UrXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIituLnNoYXBlWzNdK1wiLlwifSksZihsPT09bi5zaGFwZVs0XSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjNkRGVySW5wdXQ6IGRlcHRoIG9mIG91dHB1dCAoXCIrbCtcIikgbXVzdCBtYXRjaCBvdXRwdXQgZGVwdGggZm9yIGZpbHRlciBcIituLnNoYXBlWzRdK1wiLlwifSk7dmFyIGM9aW8oYSxuLnNoYXBlLHIsMSxvKSxoPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5jb252M2REZXJJbnB1dChpLG4sYyl9LHtkeTVEOml9KTtyZXR1cm4gcz9oLmFzNEQoaC5zaGFwZVsxXSxoLnNoYXBlWzJdLGguc2hhcGVbM10saC5zaGFwZVs0XSk6aH12YXIgcGw9dm4oe2NvbnYxZF86ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09byYmKG89XCJOV0NcIiksdm9pZCAwPT09YSYmKGE9MSk7dmFyIHM9bm4odCxcInhcIixcImNvbnYxZFwiKSx1PW5uKGUsXCJmaWx0ZXJcIixcImNvbnYxZFwiKSxsPXMsYz0hMTsyPT09cy5yYW5rJiYoYz0hMCxsPXMuYXMzRCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSkpLGYoMz09PWwucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjFkOiBpbnB1dCBtdXN0IGJlIHJhbmsgMywgYnV0IGdvdCByYW5rIFwiK2wucmFuaytcIi5cIn0pLGYoMz09PXUucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjFkOiBmaWx0ZXIgbXVzdCBiZSByYW5rIDMsIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSxudWxsIT1pJiZmKHgociksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxZDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIraStcIiBidXQgZ290IHBhZCBcIityK1wiLlwifSksZihsLnNoYXBlWzJdPT09dS5zaGFwZVsxXSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjFkOiBkZXB0aCBvZiBpbnB1dCAoXCIrbC5zaGFwZVsyXStcIikgbXVzdCBtYXRjaCBpbnB1dCBkZXB0aCBmb3IgZmlsdGVyIFwiK3Uuc2hhcGVbMV0rXCIuXCJ9KSxmKGZvKG4sYSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYxRDogRWl0aGVyIHN0cmlkZSBvciBkaWxhdGlvbiBtdXN0IGJlIDEuIEdvdCBzdHJpZGUgXCIrbitcIiBhbmQgZGlsYXRpb24gJ1wiK2ErXCInXCJ9KSxmKFwiTldDXCI9PT1vLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MWQ6IGdvdCBkYXRhRm9ybWF0IG9mIFwiK28rXCIgYnV0IG9ubHkgTldDIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQuXCJ9KTt2YXIgaD11LmFzNEQoMSx1LnNoYXBlWzBdLHUuc2hhcGVbMV0sdS5zaGFwZVsyXSkscD1sLmFzNEQobC5zaGFwZVswXSwxLGwuc2hhcGVbMV0sbC5zaGFwZVsyXSksZD1mbChwLGgsWzEsbl0scixcIk5IV0NcIixbMSxhXSxpKTtyZXR1cm4gYz9kLmFzMkQoZC5zaGFwZVsyXSxkLnNoYXBlWzNdKTpkLmFzM0QoZC5zaGFwZVswXSxkLnNoYXBlWzJdLGQuc2hhcGVbM10pfX0pLGZsPXZuKHtjb252MmRfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkpe3ZvaWQgMD09PW8mJihvPVwiTkhXQ1wiKSx2b2lkIDA9PT1hJiYoYT1bMSwxXSk7dmFyIHM9bm4odCxcInhcIixcImNvbnYyZFwiKSx1PW5uKGUsXCJmaWx0ZXJcIixcImNvbnYyZFwiKSxsPXMsYz0hMTszPT09cy5yYW5rJiYoYz0hMCxsPXMuYXM0RCgxLHMuc2hhcGVbMF0scy5zaGFwZVsxXSxzLnNoYXBlWzJdKSksZig0PT09bC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGlucHV0IG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrbC5yYW5rK1wiLlwifSksZig0PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGZpbHRlciBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pLG51bGwhPWkmJmYoeChyKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjJkOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitpK1wiIGJ1dCBnb3QgcGFkIFwiK3IrXCIuXCJ9KTt2YXIgaD1cIk5IV0NcIj09PW8/bC5zaGFwZVszXTpsLnNoYXBlWzFdO2YoaD09PXUuc2hhcGVbMl0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZDogZGVwdGggb2YgaW5wdXQgKFwiK2grXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIit1LnNoYXBlWzJdK1wiLlwifSksZihmbyhuLGEpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MkQ6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIrYStcIidcIn0pO3ZhciBwPXZvKG8pLGQ9YW8obC5zaGFwZSx1LnNoYXBlLG4sYSxyLGksITEscCksdj1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10LmNvbnYyZChsLHUsZCk7cmV0dXJuIGUoW3UsbF0pLG59LHt4OmwsJGZpbHRlcjp1fSxmdW5jdGlvbih0LGUpe3ZhciBpPWUscz1pWzBdLHU9aVsxXTtyZXR1cm4gZihwbyhhKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZ3JhZGllbnQgb2YgY29udjJEOiBkaWxhdGlvbiByYXRlcyBncmVhdGVyIHRoYW4gMSBhcmUgbm90IHlldCBzdXBwb3J0ZWQgaW4gZ3JhZGllbnRzLiBHb3QgZGlsYXRpb25zICdcIithK1wiJ1wifSkse3g6ZnVuY3Rpb24oKXtyZXR1cm4gdWwodS5zaGFwZSx0LHMsbixyLG8pfSwkZmlsdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIGxsKHUsdCxzLnNoYXBlLG4scixvKX19fSk7cmV0dXJuIGM/di5hczNEKHYuc2hhcGVbMV0sdi5zaGFwZVsyXSx2LnNoYXBlWzNdKTp2fX0pLGRsPXZuKHtjb252M2RfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2b2lkIDA9PT1vJiYobz1cIk5ESFdDXCIpLHZvaWQgMD09PWEmJihhPVsxLDEsMV0pO3ZhciBpPW5uKHQsXCJ4XCIsXCJjb252M2RcIikscz1ubihlLFwiZmlsdGVyXCIsXCJjb252M2RcIiksdT1pLGw9ITE7ND09PWkucmFuayYmKGw9ITAsdT1pLmFzNUQoMSxpLnNoYXBlWzBdLGkuc2hhcGVbMV0saS5zaGFwZVsyXSxpLnNoYXBlWzNdKSksZig1PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2Q6IGlucHV0IG11c3QgYmUgcmFuayA1LCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSksZig1PT09cy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2Q6IGZpbHRlciBtdXN0IGJlIHJhbmsgNSwgYnV0IGdvdCByYW5rIFwiK3MucmFuaytcIi5cIn0pLGYodS5zaGFwZVs0XT09PXMuc2hhcGVbM10sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZDogZGVwdGggb2YgaW5wdXQgKFwiK3Uuc2hhcGVbNF0rXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIitzLnNoYXBlWzNdK1wiLlwifSksZihmdW5jdGlvbih0LGUpe3JldHVybiBjbCh0KXx8Y2woZSl9KG4sYSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzRDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrbitcIiBhbmQgZGlsYXRpb25zICdcIithK1wiJ1wifSksZihcIk5ESFdDXCI9PT1vLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252M2Q6IGdvdCBkYXRhRm9ybWF0IG9mIFwiK28rXCIgYnV0IG9ubHkgTkRIV0MgaXMgY3VycmVudGx5IHN1cHBvcnRlZC5cIn0pO3ZhciBjPWlvKHUuc2hhcGUscy5zaGFwZSxuLGEsciksaD1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10LmNvbnYzZCh1LHMsYyk7cmV0dXJuIGUoW3Usc10pLG59LHt4OnUsJGZpbHRlcjpzfSxmdW5jdGlvbih0LGUpe2YoY2woYSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGdyYWRpZW50IG9mIGNvbnYzRDogZGlsYXRpb24gcmF0ZXMgZ3JlYXRlciB0aGFuIDEgYXJlIG5vdCB5ZXQgc3VwcG9ydGVkIGluIGdyYWRpZW50cy4gR290IGRpbGF0aW9ucyAnXCIrYStcIidcIn0pO3ZhciBvPWVbMF0saT1lWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGhsKG8uc2hhcGUsdCxpLG4scil9LCRmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYT10OzQ9PT10LnJhbmsmJihhPXQuYXM1RCgxLHQuc2hhcGVbMF0sdC5zaGFwZVsxXSx0LnNoYXBlWzJdLHQuc2hhcGVbM10pKTt2YXIgaT1lOzQ9PT1pLnJhbmsmJihpPWUuYXM1RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdLGUuc2hhcGVbM10pKSxmKDU9PT1hLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlckZpbHRlcjogaW5wdXQgbXVzdCBiZSByYW5rIDUsIGJ1dCBnb3Qgc2hhcGUgXCIrYS5zaGFwZStcIi5cIn0pLGYoNT09PWkucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjNkRGVyRmlsdGVyOiBkeSBtdXN0IGJlIHJhbmsgNSwgYnV0IGdvdCBzaGFwZSBcIitpLnNoYXBlK1wiLlwifSksZig1PT09bi5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlckZpbHRlcjogZmlsdGVyU2hhcGUgbXVzdCBiZSBsZW5ndGggNSwgYnV0IGdvdCBcIituK1wiLlwifSksZihhLnNoYXBlWzRdPT09blszXSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gY29udjNkRGVyRmlsdGVyOiBkZXB0aCBvZiBpbnB1dCBcIithLnNoYXBlWzRdK1wiKSBtdXN0IG1hdGNoIGlucHV0IGRlcHRoIGluIGZpbHRlciAoXCIrblszXStcIi5cIn0pLGYoaS5zaGFwZVs0XT09PW5bNF0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYzZERlckZpbHRlcjogZGVwdGggb2YgZHkgKFwiK2kuc2hhcGVbNF0rXCIpIG11c3QgbWF0Y2ggb3V0cHV0IGRlcHRoIGZvciBmaWx0ZXIgKFwiK25bNF0rXCIpLlwifSk7dmFyIHM9aW8oYS5zaGFwZSxuLHIsMSxvKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmNvbnYzZERlckZpbHRlcihhLGkscyl9LHt4NUQ6YSxkeTVEOml9KX0obyx0LGkuc2hhcGUsbixyKX19fSk7cmV0dXJuIGw/aC5hczREKGguc2hhcGVbMV0saC5zaGFwZVsyXSxoLnNoYXBlWzNdLGguc2hhcGVbNF0pOmh9fSksdmw9dm4oe2NvbnYyZERlckZpbHRlcl86bGx9KSxtbD12bih7Y29udjJkRGVySW5wdXRfOnVsfSksZ2w9dm4oe2RlcHRod2lzZUNvbnYyZF86ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09byYmKG89XCJOSFdDXCIpLHZvaWQgMD09PWEmJihhPVsxLDFdKTt2YXIgcz1ubih0LFwieFwiLFwiZGVwdGh3aXNlQ29udjJkXCIpLHU9bm4oZSxcImZpbHRlclwiLFwiZGVwdGh3aXNlQ29udjJkXCIpLGw9cyxjPSExOzM9PT1zLnJhbmsmJihjPSEwLGw9cy5hczREKDEscy5zaGFwZVswXSxzLnNoYXBlWzFdLHMuc2hhcGVbMl0pKSxmKDQ9PT1sLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGRlcHRod2lzZUNvbnYyZDogaW5wdXQgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIitsLnJhbmsrXCIuXCJ9KSxmKDQ9PT11LnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGRlcHRod2lzZUNvbnYyZDogZmlsdGVyIG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSksZihsLnNoYXBlWzNdPT09dS5zaGFwZVsyXSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZGVwdGh3aXNlQ29udjJkOiBudW1iZXIgb2YgaW5wdXQgY2hhbm5lbHMgKFwiK2wuc2hhcGVbM10rXCIpIG11c3QgbWF0Y2ggdGhlIGluQ2hhbm5lbHMgZGltZW5zaW9uIGluIGZpbHRlciBcIit1LnNoYXBlWzJdK1wiLlwifSksbnVsbD09YSYmKGE9WzEsMV0pLGYoZm8obixhKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZGVwdGh3aXNlQ29udjJkOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIituK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK2ErXCInXCJ9KSxudWxsIT1pJiZmKHgociksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGRlcHRod2lzZUNvbnYyZDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIraStcIiBidXQgZ290IHBhZCBcIityK1wiLlwifSk7dmFyIGg9YW8obC5zaGFwZSx1LnNoYXBlLG4sYSxyLGksITApLHA9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5kZXB0aHdpc2VDb252MkQobCx1LGgpO3JldHVybiBlKFtsLHVdKSxufSx7eDpsLCRmaWx0ZXI6dX0sZnVuY3Rpb24odCxlKXtmKHBvKGEpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBncmFkaWVudCBvZiBkZXB0aHdpc2VDb252MmQ6IGRpbGF0aW9uIHJhdGVzIGdyZWF0ZXIgdGhhbiAxIGFyZSBub3QgeWV0IHN1cHBvcnRlZC4gR290IGRpbGF0aW9ucyAnXCIrYStcIidcIn0pO3ZhciBuPWVbMF0scj1lWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPWUsYT0hMTszPT09ZS5yYW5rJiYoYT0hMCxvPWUuYXM0RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdKSk7dmFyIGk9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRlcHRod2lzZUNvbnYyRERlcklucHV0KG8sbixyKX0se2R5NEQ6b30pO3JldHVybiBhP2kuYXMzRChpLnNoYXBlWzFdLGkuc2hhcGVbMl0saS5zaGFwZVszXSk6aX0obi5zaGFwZSx0LHIsaCl9LCRmaWx0ZXI6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7dmFyIG89dDszPT09dC5yYW5rJiYobz10LmFzNEQoMSx0LnNoYXBlWzBdLHQuc2hhcGVbMV0sdC5zaGFwZVsyXSkpO3ZhciBhPWU7cmV0dXJuIDM9PT1hLnJhbmsmJihhPWUuYXM0RCgxLGUuc2hhcGVbMF0sZS5zaGFwZVsxXSxlLnNoYXBlWzJdKSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRlcHRod2lzZUNvbnYyRERlckZpbHRlcihvLGEscil9LHt4NEQ6byxkeTREOmF9KX0obix0LHIuc2hhcGUsaCl9fX0pO3JldHVybiBjP3AuYXMzRChwLnNoYXBlWzFdLHAuc2hhcGVbMl0scC5zaGFwZVszXSk6cH19KSx5bD12bih7c2VwYXJhYmxlQ29udjJkXzpmdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1hJiYoYT1bMSwxXSksdm9pZCAwPT09aSYmKGk9XCJOSFdDXCIpO3ZhciBzPW5uKHQsXCJ4XCIsXCJzZXBhcmFibGVDb252MmRcIiksdT1ubihlLFwiZGVwdGh3aXNlRmlsdGVyXCIsXCJzZXBhcmFibGVDb252MmRcIiksbD1ubihuLFwicG9pbnR3aXNlRmlsdGVyXCIsXCJzZXBhcmFibGVDb252MmRcIiksYz1zLGg9ITE7aWYoMz09PXMucmFuayYmKGg9ITAsYz1zLmFzNEQoMSxzLnNoYXBlWzBdLHMuc2hhcGVbMV0scy5zaGFwZVsyXSkpLFwiTkNIV1wiPT09aSl0aHJvdyBuZXcgRXJyb3IoXCJzZXBhcmFibGVDb252MmQgY3VycmVudGx5IGRvZXMgbm90IHN1cHBvcnQgZGF0YUZvcm1hdCBOQ0hXOyBvbmx5IE5IV0MgaXMgc3VwcG9ydGVkXCIpO2YoND09PWMucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2VwYXJhYmxlQ29udjJkOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCwgYnV0IGdvdCByYW5rIFwiK2MucmFuaytcIi5cIn0pLGYoND09PXUucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gc2VwYXJhYmxlQ29udjJkOiBkZXB0aHdpc2UgZmlsdGVyIG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSksZig0PT09bC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzZXBhcmFibGVDb252MmQ6IHBvaW50d2lzZSBmaWx0ZXIgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSxmKDE9PT1sLnNoYXBlWzBdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzZXBhcmFibGVDb252MmQ6IHRoZSBmaXJzdCBkaW1lbnNpb24gb2YgcG9pbnR3aXNlIGZpbHRlciAgbXVzdCBiZSAxLCBidXQgZ290IFwiK2wuc2hhcGVbMF0rXCIuXCJ9KSxmKDE9PT1sLnNoYXBlWzFdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzZXBhcmFibGVDb252MmQ6IHRoZSBzZWNvbmQgZGltZW5zaW9uIG9mIHBvaW50d2lzZSBmaWx0ZXIgbXVzdCBiZSAxLCBidXQgZ290IFwiK2wuc2hhcGVbMV0rXCIuXCJ9KTt2YXIgcD11LnNoYXBlWzJdLGQ9dS5zaGFwZVszXTtmKGwuc2hhcGVbMl09PT1wKmQsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNlcGFyYWJsZUNvbnYyZDogdGhlIHRoaXJkIGRpbWVuc2lvbiBvZiBwb2ludHdpc2UgZmlsdGVyIG11c3QgYmUgXCIrcCpkK1wiLCBidXQgZ290IFwiK2wuc2hhcGVbMl0rXCIuXCJ9KTt2YXIgdj1nbChjLHUscixvLGksYSksbT1mbCh2LGwsMSxcInZhbGlkXCIsaSk7cmV0dXJuIGg/bS5hczNEKG0uc2hhcGVbMV0sbS5zaGFwZVsyXSxtLnNoYXBlWzNdKTptfX0pLHhsPXZuKHtjb252MmRUcmFuc3Bvc2VfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhKXtyZXR1cm4gdWwobixubih0LFwieFwiLFwiY29udjJkVHJhbnNwb3NlXCIpLG5uKGUsXCJmaWx0ZXJcIixcImNvbnYyZFRyYW5zcG9zZVwiKSxyLG8sXCJOSFdDXCIsYSl9fSksYmw9dm4oe2NvbnYzZFRyYW5zcG9zZV86ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gaGwobixubih0LFwieFwiLFwiY29udjNkVHJhbnNwb3NlXCIpLG5uKGUsXCJmaWx0ZXJcIixcImNvbnYzZFRyYW5zcG9zZVwiKSxyLG8pfX0pO3ZhciB3bD12bih7bWF0TXVsXzpmdW5jdGlvbih0LGUsbixyKXt2YXIgbzt2b2lkIDA9PT1uJiYobj0hMSksdm9pZCAwPT09ciYmKHI9ITEpO3ZhciBhPW5uKHQsXCJhXCIsXCJtYXRNdWxcIiksaT1ubihlLFwiYlwiLFwibWF0TXVsXCIpO289d3QoYSxpKSxhPW9bMF0saT1vWzFdO3ZhciBzPW4/YS5zaGFwZVthLnJhbmstMl06YS5zaGFwZVthLnJhbmstMV0sdT1yP2kuc2hhcGVbaS5yYW5rLTFdOmkuc2hhcGVbaS5yYW5rLTJdLGw9bj9hLnNoYXBlW2EucmFuay0xXTphLnNoYXBlW2EucmFuay0yXSxjPXI/aS5zaGFwZVtpLnJhbmstMl06aS5zaGFwZVtpLnJhbmstMV0saD1hLnNoYXBlLnNsaWNlKDAsLTIpLHA9aS5zaGFwZS5zbGljZSgwLC0yKSxkPWcoaCksdj1nKHApO2YoYS5yYW5rPj0yJiZpLnJhbms+PTImJmEucmFuaz09PWkucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF0TXVsOiBpbnB1dHMgbXVzdCBoYXZlIHRoZSBzYW1lIHJhbmsgb2YgYXQgbGVhc3QgMiwgZ290IHJhbmtzIFwiK2EucmFuaytcIiBhbmQgXCIraS5yYW5rK1wiLlwifSksZih5KGgscCksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1hdE11bDogb3V0ZXIgZGltZW5zaW9ucyAoXCIraCtcIikgYW5kIChcIitwK1wiKSBvZiBUZW5zb3JzIHdpdGggc2hhcGVzIFwiK2Euc2hhcGUrXCIgYW5kIFwiK2kuc2hhcGUrXCIgbXVzdCBtYXRjaC5cIn0pLGYocz09PXUsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1hdE11bDogaW5uZXIgc2hhcGVzIChcIitzK1wiKSBhbmQgKFwiK3UrXCIpIG9mIFRlbnNvcnMgd2l0aCBzaGFwZXMgXCIrYS5zaGFwZStcIiBhbmQgXCIraS5zaGFwZStcIiBhbmQgdHJhbnNwb3NlQT1cIituK1wiIGFuZCB0cmFuc3Bvc2VCPVwiK3IrXCIgbXVzdCBtYXRjaC5cIn0pO3ZhciBtPWEuc2hhcGUuc2xpY2UoMCwtMikuY29uY2F0KFtsLGNdKSx4PW4/YS5hczNEKGQscyxsKTphLmFzM0QoZCxsLHMpLGI9cj9pLmFzM0QodixjLHUpOmkuYXMzRCh2LHUsYyk7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBvPXQuYmF0Y2hNYXRNdWwoeCxiLG4scik7cmV0dXJuIGUoW3gsYl0pLG99LHskYTp4LCRiOmJ9LGZ1bmN0aW9uKHQsZSl7dmFyIG89ZSxhPW9bMF0saT1vWzFdO3JldHVybiBufHxyPyFuJiZyP3skYTpmdW5jdGlvbigpe3JldHVybiB0Lm1hdE11bChpLCExLCExKX0sJGI6ZnVuY3Rpb24oKXtyZXR1cm4gdC5tYXRNdWwoYSwhMCwhMSl9fTpuJiYhcj97JGE6ZnVuY3Rpb24oKXtyZXR1cm4gaS5tYXRNdWwodCwhMSwhMCl9LCRiOmZ1bmN0aW9uKCl7cmV0dXJuIGEubWF0TXVsKHQsITEsITEpfX06eyRhOmZ1bmN0aW9uKCl7cmV0dXJuIGkubWF0TXVsKHQsITAsITApfSwkYjpmdW5jdGlvbigpe3JldHVybiB0Lm1hdE11bChhLCEwLCEwKX19OnskYTpmdW5jdGlvbigpe3JldHVybiB0Lm1hdE11bChpLCExLCEwKX0sJGI6ZnVuY3Rpb24oKXtyZXR1cm4gYS5tYXRNdWwodCwhMCwhMSl9fX0pLnJlc2hhcGUobSl9fSksQ2w9dm4oe2RvdF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwidDFcIixcImRvdFwiKSxyPW5uKGUsXCJ0MlwiLFwiZG90XCIpO2YoISgxIT09bi5yYW5rJiYyIT09bi5yYW5rfHwxIT09ci5yYW5rJiYyIT09ci5yYW5rKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZG90OiBpbnB1dHMgbXVzdCBhbGwgYmUgcmFuayAxIG9yIDIsIGJ1dCBnb3QgcmFua3MgXCIrbi5yYW5rK1wiIGFuZCBcIityLnJhbmsrXCIuXCJ9KTt2YXIgbz0xPT09bi5yYW5rP24uc2l6ZTpuLnNoYXBlWzFdLGE9MT09PXIucmFuaz9yLnNpemU6ci5zaGFwZVswXTtyZXR1cm4gZihvPT09YSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZG90OiBpbm5lciBkaW1lbnNpb25zIG9mIGlucHV0cyBtdXN0IG1hdGNoLCBidXQgZ290IFwiK28rXCIgYW5kIFwiK2ErXCIuXCJ9KSwxPT09bi5yYW5rJiYxPT09ci5yYW5rP24uYXMyRCgxLC0xKS5tYXRNdWwoci5hczJEKC0xLDEpKS5hc1NjYWxhcigpOjE9PT1uLnJhbmsmJjI9PT1yLnJhbms/bi5hczJEKDEsLTEpLm1hdE11bChyLmFzMkQoci5zaGFwZVswXSxyLnNoYXBlWzFdKSkuYXMxRCgpOjI9PT1uLnJhbmsmJjE9PT1yLnJhbms/bi5tYXRNdWwoci5hczJEKC0xLDEpKS5hczFEKCk6bi5tYXRNdWwoci5hczJEKHIuc2hhcGVbMF0sci5zaGFwZVsxXSkpfX0pLEVsPXZuKHtvdXRlclByb2R1Y3RfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bm4odCxcInYxXCIsXCJvdXRlclByb2R1Y3RcIikscj1ubihlLFwidjJcIixcIm91dGVyUHJvZHVjdFwiKTtyZXR1cm4gZigxPT09bi5yYW5rJiYxPT09ci5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBvdXRlclByb2R1Y3Q6IGlucHV0cyBtdXN0IGJlIHJhbmsgMSwgYnV0IGdvdCByYW5rcyBcIituLnJhbmsrXCIgYW5kIFwiK3IucmFuaytcIi5cIn0pLG4uYXMyRCgtMSwxKS5tYXRNdWwoci5hczJEKDEsLTEpKX19KTt2YXIgUmw9dm4oe3JldmVyc2VfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bm4odCxcInhcIixcInJldmVyc2VcIik7aWYoMD09PW4ucmFuaylyZXR1cm4gbi5jbG9uZSgpO3ZhciByPUkoZSxuLnNoYXBlKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnJldmVyc2UobixyKX0seyR4Om59LGZ1bmN0aW9uKHQpe3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LnJldmVyc2Uocil9fX0pLnJlc2hhcGVBcyhuKX19KSxJbD12bih7cmV2ZXJzZTFkXzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwicmV2ZXJzZVwiKTtyZXR1cm4gZigxPT09ZS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXZlcnNlMUQ6IHggbXVzdCBiZSByYW5rIDEgYnV0IGdvdCByYW5rIFwiK2UucmFuaytcIi5cIn0pLFJsKGUsMCl9fSksa2w9dm4oe3JldmVyc2UyZF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwieFwiLFwicmV2ZXJzZVwiKTtyZXR1cm4gZigyPT09bi5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXZlcnNlMkQ6IHggbXVzdCBiZSByYW5rIDIgYnV0IGdvdCByYW5rIFwiK24ucmFuaytcIi5cIn0pLFJsKG4sZSl9fSksTmw9dm4oe3JldmVyc2UzZF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwieFwiLFwicmV2ZXJzZVwiKTtyZXR1cm4gZigzPT09bi5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXZlcnNlM0Q6IHggbXVzdCBiZSByYW5rIDMgYnV0IGdvdCByYW5rIFwiK24ucmFuaytcIi5cIn0pLFJsKG4sZSl9fSksU2w9dm4oe3JldmVyc2U0ZF86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwieFwiLFwicmV2ZXJzZVwiKTtyZXR1cm4gZig0PT09bi5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXZlcnNlNEQ6IHggbXVzdCBiZSByYW5rIDQgYnV0IGdvdCByYW5rIFwiK24ucmFuaytcIi5cIn0pLFJsKG4sZSl9fSk7ZnVuY3Rpb24gQWwodCxlLG4scixvLGEpe3ZhciBpPW5uKHQsXCJ4XCIsXCJtYXhQb29sXCIpLHM9aSx1PSExOzM9PT1pLnJhbmsmJih1PSEwLHM9aS5hczREKDEsaS5zaGFwZVswXSxpLnNoYXBlWzFdLGkuc2hhcGVbMl0pKSxudWxsPT1yJiYocj1bMSwxXSksZig0PT09cy5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrcy5yYW5rK1wiLlwifSksZihmbyhuLHIpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIituK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK3IrXCInXCJ9KSxudWxsIT1hJiZmKHgobyksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2w6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK2ErXCIgYnV0IGdvdCBwYWQgXCIrbytcIi5cIn0pO3ZhciBsPXJvKHMuc2hhcGUsZSxuLHIsbyxhKSxjPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQubWF4UG9vbChzLGwpO3JldHVybiBlKFtzLG5dKSxufSx7eDpzfSxmdW5jdGlvbih0LGEpe3ZhciBpPWFbMF0scz1hWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyl7dmFyIHU9bm4odCxcImR5XCIsXCJtYXhQb29sQmFja3Byb3BcIiksbD1ubihlLFwiaW5wdXRcIixcIm1heFBvb2xCYWNrcHJvcFwiKSxjPW5uKG4sXCJvdXRwdXRcIixcIm1heFBvb2xCYWNrcHJvcFwiKTtmKGwucmFuaz09PXUucmFuayxmdW5jdGlvbigpe3JldHVyblwiUmFuayBvZiBpbnB1dCAoXCIrbC5yYW5rK1wiKSBkb2VzIG5vdCBtYXRjaCByYW5rIG9mIGR5IChcIit1LnJhbmsrXCIpXCJ9KSxudWxsPT1hJiYoYT1bMSwxXSksZihmbyhvLGEpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sQmFja1Byb3A6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK28rXCIgYW5kIGRpbGF0aW9ucyAnXCIrYStcIidcIn0pLGYoND09PXUucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbEJhY2twcm9wOiBkeSBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSksZig0PT09bC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sQmFja3Byb3A6IGlucHV0IG11c3QgYmUgcmFuayA0IGJ1dCBnb3QgcmFuayBcIitsLnJhbmsrXCIuXCJ9KSxudWxsIT1zJiZmKHgoaSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2xCYWNrcHJvcDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIrcytcIiBidXQgZ290IHBhZCBcIitpK1wiLlwifSk7dmFyIGg9cm8obC5zaGFwZSxyLG8sYSxpLHMpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQubWF4UG9vbEJhY2twcm9wKHUsbCxjLGgpfSx7JGR5OnUsJGlucHV0Omx9KX0odCxpLHMsZSxuLHIsbyl9fX0pO3JldHVybiB1P2MuYXMzRChjLnNoYXBlWzFdLGMuc2hhcGVbMl0sYy5zaGFwZVszXSk6Y31mdW5jdGlvbiBUbCh0LGUsbixyLG8sYSl7dmFyIGk9bm4odCxcInhcIixcImF2Z1Bvb2xcIixcImZsb2F0MzJcIik7bnVsbD09ciYmKHI9WzEsMV0pLGYoZm8obixyKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYXZnUG9vbDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrbitcIiBhbmQgZGlsYXRpb25zICdcIityK1wiJ1wifSk7dmFyIHM9aSx1PSExOzM9PT1pLnJhbmsmJih1PSEwLHM9aS5hczREKDEsaS5zaGFwZVswXSxpLnNoYXBlWzFdLGkuc2hhcGVbMl0pKSxmKDQ9PT1zLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2w6IHggbXVzdCBiZSByYW5rIDQgYnV0IGdvdCByYW5rIFwiK3MucmFuaytcIi5cIn0pLG51bGwhPWEmJmYoeChvKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYXZnUG9vbDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIrYStcIiBidXQgZ290IHBhZCBcIitvK1wiLlwifSk7dmFyIGw9cm8ocy5zaGFwZSxlLG4scixvLGEpLGM9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmF2Z1Bvb2wocyxsKX0se3g6c30sZnVuY3Rpb24odCl7cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPW5uKHQsXCJkeVwiLFwiYXZnUG9vbEJhY2twcm9wXCIpLHM9bm4oZSxcImlucHV0XCIsXCJhdmdQb29sQmFja3Byb3BcIik7ZihzLnJhbms9PT1pLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIlJhbmsgb2YgaW5wdXQgKFwiK3MucmFuaytcIikgZG9lcyBub3QgbWF0Y2ggcmFuayBvZiBkeSAoXCIraS5yYW5rK1wiKVwifSksbnVsbD09byYmKG89WzEsMV0pLGYoZm8ocixvKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYXZnUG9vbEJhY2twcm9wOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIityK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK28rXCInXCJ9KTt2YXIgdT1zLGw9aSxjPSExOzM9PT1zLnJhbmsmJihjPSEwLHU9cy5hczREKDEscy5zaGFwZVswXSxzLnNoYXBlWzFdLHMuc2hhcGVbMl0pLGw9aS5hczREKDEsaS5zaGFwZVswXSxpLnNoYXBlWzFdLGkuc2hhcGVbMl0pKSxmKDQ9PT1sLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2xCYWNrcHJvcDogZHkgbXVzdCBiZSByYW5rIDQgYnV0IGdvdCByYW5rIFwiK2wucmFuaytcIi5cIn0pLGYoND09PXUucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYXZnUG9vbEJhY2twcm9wOiBpbnB1dCBtdXN0IGJlIHJhbmsgNCBidXQgZ290IHJhbmsgXCIrdS5yYW5rK1wiLlwifSk7dmFyIGg9cm8odS5zaGFwZSxuLHIsbyxhKSxwPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5hdmdQb29sQmFja3Byb3AobCx1LGgpfSx7ZHk0RDpsLGlucHV0NEQ6dX0pO3JldHVybiBjP3AuYXMzRChwLnNoYXBlWzFdLHAuc2hhcGVbMl0scC5zaGFwZVszXSk6cH0odCxzLGUsbixyLG8pfX19KTtyZXR1cm4gYz1jLmNhc3QoaS5kdHlwZSksdT9jLmFzM0QoYy5zaGFwZVsxXSxjLnNoYXBlWzJdLGMuc2hhcGVbM10pOmN9dmFyIERsPXZuKHttYXhQb29sXzpmdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiBBbCh0LGUsbiwxLHIsbyl9fSksX2w9dm4oe2F2Z1Bvb2xfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIFRsKHQsZSxuLDEscixvKX19KSxPbD12bih7cG9vbF86ZnVuY3Rpb24odCxlLG4scixvLGEpe251bGw9PW8mJihvPVsxLDFdKSxudWxsPT1hJiYoYT0xKSwwPT09ciYmKHI9XCJ2YWxpZFwiKTt2YXIgaT1ubih0LFwieFwiLFwibWF4UG9vbFwiKSxzPWksdT0hMTszPT09aS5yYW5rJiYodT0hMCxzPWkuYXM0RCgxLGkuc2hhcGVbMF0saS5zaGFwZVsxXSxpLnNoYXBlWzJdKSksZihmbyhhLG8pLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBwb29sOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIithK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK28rXCInXCJ9KTt2YXIgbCxjPXJvKHMuc2hhcGUsZSxhLG8sciksaD1bYy5kaWxhdGlvbkhlaWdodCxjLmRpbGF0aW9uV2lkdGhdO2w9XCJzYW1lXCI9PT1yP2Z1bmN0aW9uKHQsZSl7dmFyIG49dC5tYXAoZnVuY3Rpb24odCxuKXtyZXR1cm4gdCsodC0xKSooZVtuXS0xKX0pLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC0xfSkscj1uLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gTWF0aC5mbG9vcih0LzIpfSksbz1uLm1hcChmdW5jdGlvbih0LGUpe3JldHVybiB0LXJbZV19KTtyZXR1cm4gbi5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm5bcltlXSxvW2VdXX0pfShbYy5maWx0ZXJIZWlnaHQsYy5maWx0ZXJXaWR0aF0saCk6W1swLDBdLFswLDBdXTt2YXIgcD0xPT09aFswXSYmMT09PWhbMV0sZD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bi5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF19KSxvPW4ubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0WzFdfSksYT10LmNvbmNhdChyLG8pLGk9ZS5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm4odC1hW2VdJXQpJXR9KSxzPW8ubWFwKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQraVtlXX0pLHU9ZS5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm5bcltlXSxzW2VdXX0pLGw9ZS5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm5bMCxpW2VdXX0pO3JldHVyblt1LGxdfShbYy5pbkhlaWdodCxjLmluV2lkdGhdLGgsbCksdj1kWzBdLG09ZFsxXSxnPXA/cjpcInZhbGlkXCIseT1wP3M6YnIocyxoLHYpLHg9KFwiYXZnXCI9PT1uP2Z1bmN0aW9uKCl7cmV0dXJuIFRsKHksZSxhLDEsZyl9OmZ1bmN0aW9uKCl7cmV0dXJuIEFsKHksZSxhLDEsZyl9KSgpLGI9cD94OmVyKHgsaCxtKTtyZXR1cm4gdT9iLmFzM0QoYi5zaGFwZVsxXSxiLnNoYXBlWzJdLGIuc2hhcGVbM10pOmJ9fSksRmw9dm4oe21heFBvb2wzZF86ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dm9pZCAwPT09YSYmKGE9XCJOREhXQ1wiKTt2YXIgcz1ubih0LFwieFwiLFwibWF4UG9vbDNkXCIpLHU9cyxsPSExOzQ9PT1zLnJhbmsmJihsPSEwLHU9cy5hczVEKDEscy5zaGFwZVswXSxzLnNoYXBlWzFdLHMuc2hhcGVbMl0scy5zaGFwZVszXSkpLG51bGw9PWkmJihpPVsxLDEsMV0pLGYoNT09PXUucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkOiB4IG11c3QgYmUgcmFuayA1IGJ1dCBnb3QgcmFuayBcIit1LnJhbmsrXCIuXCJ9KSxmKFwiTkRIV0NcIj09PWEsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2wzZDogT25seSBOREhXQyBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLCBidXQgZ290IGRhdGFGb3JtYXQgb2YgXCIrYX0pLGYoZm8obixpKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIituK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK2krXCInXCJ9KSxudWxsIT1vJiZmKHgociksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2wzZDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIrbytcIiBidXQgZ290IHBhZCBcIityK1wiLlwifSk7dmFyIGM9b28odS5zaGFwZSxlLG4saSxyLG8sYSksaD1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1heFBvb2wzZCh1LGMpO3JldHVybiBlKFt1LG5dKSxufSx7eDp1fSxmdW5jdGlvbih0LGEpe3ZhciBzPWFbMF0sdT1hWzFdO3JldHVybnt4OmZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyl7dmFyIHU9bm4odCxcImR5XCIsXCJtYXhQb29sM2RCYWNrcHJvcFwiKSxsPW5uKGUsXCJpbnB1dFwiLFwibWF4UG9vbDNkQmFja3Byb3BcIiksYz1ubihuLFwib3V0cHV0XCIsXCJtYXhQb29sM2RCYWNrcHJvcFwiKSxoPXUscD1sLGQ9Yyx2PSExOzQ9PT1sLnJhbmsmJih2PSEwLGg9dS5hczVEKDEsdS5zaGFwZVswXSx1LnNoYXBlWzFdLHUuc2hhcGVbMl0sdS5zaGFwZVszXSkscD1sLmFzNUQoMSxsLnNoYXBlWzBdLGwuc2hhcGVbMV0sbC5zaGFwZVsyXSxsLnNoYXBlWzNdKSxkPWMuYXM1RCgxLGMuc2hhcGVbMF0sYy5zaGFwZVsxXSxjLnNoYXBlWzJdLGMuc2hhcGVbM10pKSxmKDU9PT1oLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2wzZEJhY2twcm9wOiBkeSBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIraC5yYW5rK1wiLlwifSksZig1PT09cC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sM2RCYWNrcHJvcDogaW5wdXQgbXVzdCBiZSByYW5rIDUgYnV0IGdvdCByYW5rIFwiK3AucmFuaytcIi5cIn0pLGYoNT09PWQucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbWF4UG9vbDNkQmFja3Byb3A6IG91dHB1dCBtdXN0IGJlIHJhbmsgNSBidXQgZ290IHJhbmsgXCIrZC5yYW5rK1wiLlwifSksbnVsbD09YSYmKGE9WzEsMSwxXSksZihmbyhvLGEpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sM2RCYWNrcHJvcDogRWl0aGVyIHN0cmlkZXMgb3IgZGlsYXRpb25zIG11c3QgYmUgMS4gR290IHN0cmlkZXMgXCIrbytcIiBhbmQgZGlsYXRpb25zICdcIithK1wiJ1wifSksbnVsbCE9cyYmZih4KGkpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBtYXhQb29sM2RCYWNrcHJvcDogcGFkIG11c3QgYmUgYW4gaW50ZWdlciB3aGVuIHVzaW5nLCBkaW1Sb3VuZGluZ01vZGUgXCIrcytcIiBidXQgZ290IHBhZCBcIitpK1wiLlwifSk7dmFyIG09b28ocC5zaGFwZSxyLG8sYSxpLHMpLGc9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm1heFBvb2wzZEJhY2twcm9wKGgscCxkLG0pfSx7ZHk1RDpoLGlucHV0NUQ6cH0pO3JldHVybiB2P2cuYXM0RChnLnNoYXBlWzFdLGcuc2hhcGVbMl0sZy5zaGFwZVszXSxnLnNoYXBlWzRdKTpnfSh0LHMsdSxlLG4saSxyLG8pfX19KTtyZXR1cm4gbD9oLmFzNEQoaC5zaGFwZVsxXSxoLnNoYXBlWzJdLGguc2hhcGVbM10saC5zaGFwZVs0XSk6aH19KSxNbD12bih7YXZnUG9vbDNkXzpmdW5jdGlvbih0LGUsbixyLG8sYSxpKXt2b2lkIDA9PT1hJiYoYT1cIk5ESFdDXCIpO3ZhciBzPW5uKHQsXCJ4XCIsXCJhdmdQb29sM2RcIixcImZsb2F0MzJcIiksdT1zLGw9ITE7ND09PXMucmFuayYmKGw9ITAsdT1zLmFzNUQoMSxzLnNoYXBlWzBdLHMuc2hhcGVbMV0scy5zaGFwZVsyXSxzLnNoYXBlWzNdKSksbnVsbD09aSYmKGk9WzEsMSwxXSksZig1PT09dS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sM2Q6IHggbXVzdCBiZSByYW5rIDUgYnV0IGdvdCByYW5rIFwiK3UucmFuaytcIi5cIn0pLGYoXCJOREhXQ1wiPT09YSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYXZnUG9vbDNkOiBPbmx5IE5ESFdDIGlzIGN1cnJlbnRseSBzdXBwb3J0ZWQsIGJ1dCBnb3QgZGF0YUZvcm1hdCBvZiBcIithfSksZihmbyhuLGkpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sM2Q6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK24rXCIgYW5kIGRpbGF0aW9ucyAnXCIraStcIidcIn0pLG51bGwhPW8mJmYoeChyKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYXZnUG9vbDNkOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitvK1wiIGJ1dCBnb3QgcGFkIFwiK3IrXCIuXCJ9KTt2YXIgYz1vbyh1LnNoYXBlLGUsbixpLHIsbyxhKSxoPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5hdmdQb29sM2QodSxjKX0se3g6dX0sZnVuY3Rpb24odCl7cmV0dXJue3g6ZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dmFyIHM9bm4odCxcImR5XCIsXCJhdmdQb29sM2RCYWNrcHJvcFwiKSx1PW5uKGUsXCJpbnB1dFwiLFwiYXZnUG9vbDNkQmFja3Byb3BcIiksbD1zLGM9dSxoPSExOzQ9PT11LnJhbmsmJihoPSEwLGw9cy5hczVEKDEscy5zaGFwZVswXSxzLnNoYXBlWzFdLHMuc2hhcGVbMl0scy5zaGFwZVszXSksYz11LmFzNUQoMSx1LnNoYXBlWzBdLHUuc2hhcGVbMV0sdS5zaGFwZVsyXSx1LnNoYXBlWzNdKSksZig1PT09bC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBhdmdQb29sM2RCYWNrcHJvcDogZHkgbXVzdCBiZSByYW5rIDUgYnV0IGdvdCByYW5rIFwiK2wucmFuaytcIi5cIn0pLGYoNT09PWMucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gYXZnUG9vbDNkQmFja3Byb3A6IGlucHV0IG11c3QgYmUgcmFuayA1IGJ1dCBnb3QgcmFuayBcIitjLnJhbmsrXCIuXCJ9KSxudWxsPT1vJiYobz1bMSwxLDFdKSxmKGZvKHIsbyksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGF2Z1Bvb2wzZEJhY2twcm9wOiBFaXRoZXIgc3RyaWRlcyBvciBkaWxhdGlvbnMgbXVzdCBiZSAxLiBHb3Qgc3RyaWRlcyBcIityK1wiIGFuZCBkaWxhdGlvbnMgJ1wiK28rXCInXCJ9KSxudWxsIT1pJiZmKHgoYSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIG1heFBvb2wzZEJhY2twcm9wOiBwYWQgbXVzdCBiZSBhbiBpbnRlZ2VyIHdoZW4gdXNpbmcsIGRpbVJvdW5kaW5nTW9kZSBcIitpK1wiIGJ1dCBnb3QgcGFkIFwiK2ErXCIuXCJ9KTt2YXIgcD1vbyhjLnNoYXBlLG4scixvLGEsaSksZD1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuYXZnUG9vbDNkQmFja3Byb3AobCxjLHApfSx7ZHk1RDpsLGlucHV0NUQ6Y30pO3JldHVybiBoP2QuYXM0RChkLnNoYXBlWzFdLGQuc2hhcGVbMl0sZC5zaGFwZVszXSxkLnNoYXBlWzRdKTpkfSh0LHUsZSxuLGkscixvKX19fSk7cmV0dXJuIGg9aC5jYXN0KHUuZHR5cGUpLGw/aC5hczREKGguc2hhcGVbMV0saC5zaGFwZVsyXSxoLnNoYXBlWzNdLGguc2hhcGVbNF0pOmh9fSk7dmFyIEJsPXZuKHtzbGljZV86ZnVuY3Rpb24odCxlLG4pe3ZhciByLG8sYT1ubih0LFwieFwiLFwic2xpY2VcIik7aWYoMD09PWEucmFuayl0aHJvdyBuZXcgRXJyb3IoXCJTbGljaW5nIHNjYWxhciBpcyBub3QgcG9zc2libGVcIik7KHI9XCJudW1iZXJcIj09dHlwZW9mIGU/W2VdLmNvbmNhdChuZXcgQXJyYXkoYS5yYW5rLTEpLmZpbGwoMCkpOmUubGVuZ3RoPGEucmFuaz9lLmNvbmNhdChuZXcgQXJyYXkoYS5yYW5rLWUubGVuZ3RoKS5maWxsKDApKTplLnNsaWNlKCkpLmZvckVhY2goZnVuY3Rpb24odCl7ZigtMSE9PXQsZnVuY3Rpb24oKXtyZXR1cm5cInNsaWNlKCkgZG9lcyBub3Qgc3VwcG9ydCBuZWdhdGl2ZSBiZWdpbiBpbmRleGluZy5cIn0pfSksbz0obz1udWxsPT1uP25ldyBBcnJheShhLnJhbmspLmZpbGwoLTEpOlwibnVtYmVyXCI9PXR5cGVvZiBuP1tuXS5jb25jYXQobmV3IEFycmF5KGEucmFuay0xKS5maWxsKC0xKSk6bi5sZW5ndGg8YS5yYW5rP24uY29uY2F0KG5ldyBBcnJheShhLnJhbmstbi5sZW5ndGgpLmZpbGwoLTEpKTpuKS5tYXAoZnVuY3Rpb24odCxlKXtyZXR1cm4gdD49MD90OihmKC0xPT09dCxmdW5jdGlvbigpe3JldHVyblwiTmVnYXRpdmUgc2l6ZSB2YWx1ZXMgc2hvdWxkIGJlIGV4YWN0bHkgLTEgYnV0IGdvdCBcIit0K1wiIGZvciB0aGUgc2xpY2UoKSBzaXplIGF0IGluZGV4IFwiK2UrXCIuXCJ9KSxhLnNoYXBlW2VdLXJbZV0pfSksZnVuY3Rpb24odCxlLG4pe2YodC5yYW5rPT09ZS5sZW5ndGgsZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNsaWNlXCIrdC5yYW5rK1wiRDogTGVuZ3RoIG9mIGJlZ2luIFwiK2UrXCIgbXVzdCBtYXRjaCB0aGUgcmFuayBvZiB0aGUgYXJyYXkgKFwiK3QucmFuaytcIikuXCJ9KSxmKHQucmFuaz09PW4ubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBzbGljZVwiK3QucmFuaytcIkQ6IExlbmd0aCBvZiBzaXplIFwiK24rXCIgbXVzdCBtYXRjaCB0aGUgcmFuayBvZiB0aGUgYXJyYXkgKFwiK3QucmFuaytcIikuXCJ9KTtmb3IodmFyIHI9ZnVuY3Rpb24ocil7ZihlW3JdK25bcl08PXQuc2hhcGVbcl0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIHNsaWNlXCIrdC5yYW5rK1wiRDogYmVnaW5bXCIrcitcIl0gKyBzaXplW1wiK3IrXCJdIChcIisoZVtyXStuW3JdKStcIikgd291bGQgb3ZlcmZsb3cgaW5wdXQuc2hhcGVbXCIrcitcIl0gKFwiK3Quc2hhcGVbcl0rXCIpXCJ9KX0sbz0wO288dC5yYW5rOysrbylyKG8pfShhLHIsbyk7dmFyIGk9YS5zaGFwZTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNsaWNlKGEscixvKX0seyR4OmF9LGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1bXSxuPTA7bjx0LnJhbms7bisrKWUucHVzaChbcltuXSxpW25dLXJbbl0tb1tuXV0pO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LnBhZChlKX19fSl9fSksUGw9dm4oe3NsaWNlMWRfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1ubih0LFwieFwiLFwic2xpY2UxZFwiKTtyZXR1cm4gZigxPT09ci5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJzbGljZTFkIGV4cGVjdHMgYSByYW5rLTEgdGVuc29yLCBidXQgZ290IGEgcmFuay1cIityLnJhbmsrXCIgdGVuc29yXCJ9KSxCbChyLFtlXSxbbl0pfX0pLExsPXZuKHtzbGljZTJkXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bm4odCxcInhcIixcInNsaWNlMmRcIik7cmV0dXJuIGYoMj09PXIucmFuayxmdW5jdGlvbigpe3JldHVyblwic2xpY2UyZCBleHBlY3RzIGEgcmFuay0yIHRlbnNvciwgYnV0IGdvdCBhIHJhbmstXCIrci5yYW5rK1wiIHRlbnNvclwifSksQmwocixlLG4pfX0pLFdsPXZuKHtzbGljZTNkXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bm4odCxcInhcIixcInNsaWNlM2RcIik7cmV0dXJuIGYoMz09PXIucmFuayxmdW5jdGlvbigpe3JldHVyblwic2xpY2UzZCBleHBlY3RzIGEgcmFuay0zIHRlbnNvciwgYnV0IGdvdCBhIHJhbmstXCIrci5yYW5rK1wiIHRlbnNvclwifSksQmwocixlLG4pfX0pLFVsPXZuKHtzbGljZTRkXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bm4odCxcInhcIixcInNsaWNlNGRcIik7cmV0dXJuIGYoND09PXIucmFuayxmdW5jdGlvbigpe3JldHVyblwic2xpY2U0ZCBleHBlY3RzIGEgcmFuay00IHRlbnNvciwgYnV0IGdvdCBhIHJhbmstXCIrci5yYW5rK1wiIHRlbnNvclwifSksQmwocixlLG4pfX0pO2Z1bmN0aW9uIFZsKHQsZSxuLHIsbyl7cmV0dXJuIGUucmFuazxuLnJhbmsmJihlPWUucmVzaGFwZSh1bihlLnNoYXBlLHIpKSksdC5yYW5rPG4ucmFuayYmKHQ9dC5yZXNoYXBlKHVuKHQuc2hhcGUscikpKSx7JHg6ZnVuY3Rpb24oKXt2YXIgcj10Lm11bChuLmVxdWFsKGUpLmNhc3QodC5kdHlwZSkpO3JldHVybiBudWxsPT1vP3I6ci50cmFuc3Bvc2Uobyl9fX12YXIgemw9dm4oe2FsbF86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1ubih0LFwieFwiLFwiYWxsXCIsXCJib29sXCIpLG89SShlLHIuc2hhcGUpLGE9byxpPWNuKGEsci5yYW5rKTtudWxsIT1pJiYocj1yLnRyYW5zcG9zZShpKSxhPXBuKGEubGVuZ3RoLHIucmFuaykpO3ZhciBzPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5hbGwocixhKX0seyR4OnJ9KTtpZihuKXt2YXIgdT11bihzLnNoYXBlLG8pO3JldHVybiBzLnJlc2hhcGUodSl9cmV0dXJuIHN9fSksR2w9dm4oe2FueV86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1ubih0LFwieFwiLFwiYW55XCIsXCJib29sXCIpLG89SShlLHIuc2hhcGUpLGE9byxpPWNuKGEsci5yYW5rKTtudWxsIT1pJiYocj1yLnRyYW5zcG9zZShpKSxhPXBuKGEubGVuZ3RoLHIucmFuaykpO3ZhciBzPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5hbnkocixhKX0seyR4OnJ9KTtpZihuKXt2YXIgdT11bihzLnNoYXBlLG8pO3JldHVybiBzLnJlc2hhcGUodSl9cmV0dXJuIHN9fSksSGw9dm4oe2FyZ01heF86ZnVuY3Rpb24odCxlKXt2b2lkIDA9PT1lJiYoZT0wKTt2YXIgbj1ubih0LFwieFwiLFwiYXJnTWF4XCIpO251bGw9PWUmJihlPTApO3ZhciByPUkoZSxuLnNoYXBlKSxvPWNuKHIsbi5yYW5rKTtyZXR1cm4gbnVsbCE9byYmKG49bi50cmFuc3Bvc2Uobykscj1wbihyLmxlbmd0aCxuLnJhbmspKSxTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbz10LmFyZ01heChuLHJbMF0pO3JldHVybiBlKFtuXSksb30seyR4Om59LGZ1bmN0aW9uKHQsZSl7dmFyIG49ZVswXTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gRm4obil9fX0pfX0pLHFsPXZuKHthcmdNaW5fOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCk7dmFyIG49bm4odCxcInhcIixcImFyZ01pblwiKTtudWxsPT1lJiYoZT0wKTt2YXIgcj1JKGUsbi5zaGFwZSksbz1jbihyLG4ucmFuayk7cmV0dXJuIG51bGwhPW8mJihuPW4udHJhbnNwb3NlKG8pLHI9cG4oci5sZW5ndGgsbi5yYW5rKSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG89dC5hcmdNaW4obixyWzBdKTtyZXR1cm4gZShbbl0pLG99LHskeDpufSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIEZuKG4pfX19KX19KSwkbD12bih7bG9nU3VtRXhwXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPW5uKHQsXCJ4XCIsXCJsb2dTdW1FeHBcIiksbz1JKGUsci5zaGFwZSksYT1yLm1heChvLCEwKSxpPXIuc3ViKGEpLmV4cCgpLnN1bShvKS5sb2coKSxzPWEucmVzaGFwZShpLnNoYXBlKS5hZGQoaSk7aWYobil7dmFyIHU9dW4ocy5zaGFwZSxvKTtyZXR1cm4gcy5yZXNoYXBlKHUpfXJldHVybiBzfX0pLEtsPXZuKHttYXhfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bm4odCxcInhcIixcIm1heFwiKSxvPXIsYT1JKGUsci5zaGFwZSksaT1hLHM9Y24oaSxyLnJhbmspO251bGwhPXMmJihyPXIudHJhbnNwb3NlKHMpLGk9cG4oaS5sZW5ndGgsci5yYW5rKSk7dmFyIHU9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5tYXgocixpKTtyZXR1cm4gZShbbyxuXSksbn0seyR4OnJ9LGZ1bmN0aW9uKHQsZSl7cmV0dXJuIFZsKHQsZVsxXSxlWzBdLGEscyl9KTtpZihuKXt2YXIgbD11bih1LnNoYXBlLGEpO3U9dS5yZXNoYXBlKGwpfXJldHVybiB1fX0pLGpsPXZuKHttZWFuXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9bnVsbCksdm9pZCAwPT09biYmKG49ITEpO3ZhciByPW5uKHQsXCJ4XCIsXCJtZWFuXCIpLG89SShlLHIuc2hhcGUpLGE9ZyhzbihyLnNoYXBlLG8pWzFdKTtyZXR1cm4ganIoZnVuY3Rpb24odCl7dmFyIHI9d24oYSk7cmV0dXJue3ZhbHVlOihyLmR0eXBlPT09dC5kdHlwZT90OnQuY2FzdChyLmR0eXBlKSkuZGl2KHIpLnN1bShlLG4pLGdyYWRGdW5jOmZ1bmN0aW9uKGUpe3ZhciBuPXQuc2hhcGUuc2xpY2UoKTtyZXR1cm4gby5mb3JFYWNoKGZ1bmN0aW9uKHQpe25bdF09MX0pLGUucmVzaGFwZShuKS5tdWwoU24odC5zaGFwZSxcImZsb2F0MzJcIikpLmRpdihhKX19fSkocil9fSksWGw9dm4oe21pbl86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1ubih0LFwieFwiLFwibWluXCIpLG89cixhPUkoZSxyLnNoYXBlKSxpPWEscz1jbihpLHIucmFuayk7bnVsbCE9cyYmKHI9ci50cmFuc3Bvc2UocyksaT1wbihpLmxlbmd0aCxyLnJhbmspKTt2YXIgdT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXt2YXIgbj10Lm1pbihyLGkpO3JldHVybiBlKFtvLG5dKSxufSx7JHg6cn0sZnVuY3Rpb24odCxlKXtyZXR1cm4gVmwodCxlWzFdLGVbMF0sYSxzKX0pO2lmKG4pe3ZhciBsPXVuKHUuc2hhcGUsYSk7dT11LnJlc2hhcGUobCl9cmV0dXJuIHV9fSksWWw9dm4oe21vbWVudHNfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1lJiYoZT1udWxsKSx2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9SShlLCh0PW5uKHQsXCJ4XCIsXCJtb21lbnRzXCIpKS5zaGFwZSksbz10Lm1lYW4ocixuKSxhPW8uc2hhcGU7bnx8KGE9dW4oby5zaGFwZSxyKSk7dmFyIGk9dC50b0Zsb2F0KCkuc3ViKG8ucmVzaGFwZShhKSkuc3F1YXJlKCk7cmV0dXJue21lYW46byx2YXJpYW5jZTppLm1lYW4ocixuKX19fSksUWw9dm4oe3N1bV86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1ubih0LFwieFwiLFwic3VtXCIpO1wiYm9vbFwiPT09ci5kdHlwZSYmKHI9ci50b0ludCgpKTt2YXIgbz1JKGUsci5zaGFwZSk7cmV0dXJuIGpyKGZ1bmN0aW9uKHQpe3ZhciBlPWNuKG8sdC5yYW5rKSxyPW8sYT10O251bGwhPWUmJihhPXQudHJhbnNwb3NlKGUpLHI9cG4oci5sZW5ndGgsdC5yYW5rKSk7dmFyIGk9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnN1bShhLHIpfSx7cGVybXV0ZWRYOmF9KTtpZihuKXt2YXIgcz11bihpLnNoYXBlLG8pO2k9aS5yZXNoYXBlKHMpfXJldHVybnt2YWx1ZTppLGdyYWRGdW5jOmZ1bmN0aW9uKGUpe3ZhciBuPXQuc2hhcGUuc2xpY2UoKTtyZXR1cm4gby5mb3JFYWNoKGZ1bmN0aW9uKHQpe25bdF09MX0pLGUucmVzaGFwZShuKS5tdWwoU24odC5zaGFwZSxcImZsb2F0MzJcIikpfX19KShyKX19KSxKbD12bih7cHJvZF86ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PWUmJihlPW51bGwpLHZvaWQgMD09PW4mJihuPSExKTt2YXIgcj1ubih0LFwieFwiLFwicHJvZFwiKTtcImJvb2xcIj09PXIuZHR5cGUmJihyPXIudG9JbnQoKSk7dmFyIG89SShlLHIuc2hhcGUpLGE9Y24obyxyLnJhbmspLGk9byxzPXI7bnVsbCE9YSYmKHM9ci50cmFuc3Bvc2UoYSksaT1wbihpLmxlbmd0aCxyLnJhbmspKTt2YXIgdT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQucHJvZChzLGkpfSx7cGVybXV0ZWRYOnN9KTtpZihuKXt2YXIgbD11bih1LnNoYXBlLG8pO3U9dS5yZXNoYXBlKGwpfXJldHVybiB1fX0pO3ZhciBabD12bih7ZWx1XzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwiZWx1XCIpO3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LmVsdShlKTtyZXR1cm4gbihbcl0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbihlKXtyZXR1cm4gZS5lbHVEZXIodCxuKX0se2R5OnQseTpufSl9fX0pfX0pLHRjPXZuKHtsZWFreVJlbHVfOmZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9LjIpO3ZhciBuPW5uKHQsXCJ4XCIsXCJsZWFreVJlbHVcIik7cmV0dXJuIER1KHduKGUpLm11bChuKSxuKX19KSxlYz12bih7cHJlbHVfOmZ1bmN0aW9uKHQsZSl7dmFyIG49bm4odCxcInhcIixcInByZWx1XCIpLHI9bm4oZSxcImFscGhhXCIsXCJwcmVsdVwiKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG89dC5wcmVsdShuLHIpO3JldHVybiBlKFtuLHJdKSxvfSx7JHg6biwkYWxwaGE6cn0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdLHI9ZVsxXSxvPW4uZ3JlYXRlcigwKTtyZXR1cm57JHg6ZnVuY3Rpb24oKXtyZXR1cm4gQ3Uobyx0LHQubXVsKHIpKX0sJGFscGhhOmZ1bmN0aW9uKCl7dmFyIGU9Q3UobyxGbih0KSx0Lm11bChuKSksYT1lbyhyLnNoYXBlLHQuc2hhcGUpO3JldHVybiBhLmxlbmd0aD4wJiYoZT1lLnN1bShhKSksZS5yZXNoYXBlKHIuc2hhcGUpfX19KX19KSxuYz12bih7cmVsdV86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcInJlbHVcIik7cmV0dXJuXCJib29sXCI9PT1lLmR0eXBlP2UudG9JbnQoKTpTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxuKXt2YXIgcj10LnJlbHUoZSk7cmV0dXJuIG4oW2VdKSxyfSx7JHg6ZX0sZnVuY3Rpb24odCxlKXt2YXIgbj1lWzBdO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0Lm11bFN0cmljdChuLnN0ZXAoKS50b0Zsb2F0KCkpfX19KX19KSxyYz12bih7c2VsdV86ZnVuY3Rpb24odCl7dmFyIGU9bm4odCxcInhcIixcInNlbHVcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0LG4pe3ZhciByPXQuc2VsdShlKTtyZXR1cm4gbihbZV0pLHJ9LHskeDplfSxmdW5jdGlvbih0LGUpe3ZhciBuPWVbMF07cmV0dXJueyR4OmZ1bmN0aW9uKCl7dmFyIGU9bi5ncmVhdGVyKHduKDApKSxyPXduKGppKSxvPXduKFhpKSxhPXQubXVsKG8pLGk9dC5tdWwocikubXVsKG4udG9GbG9hdCgpLmV4cCgpKTtyZXR1cm4gQ3UoZSxhLGkpfX19KX19KTt2YXIgb2M9dm4oe3RyYW5zcG9zZV86ZnVuY3Rpb24odCxlKXt2YXIgbj1ubih0LFwieFwiLFwidHJhbnNwb3NlXCIpO3JldHVybiBudWxsPT1lJiYoZT1uLnNoYXBlLm1hcChmdW5jdGlvbih0LGUpe3JldHVybiBlfSkucmV2ZXJzZSgpKSxmKG4ucmFuaz09PWUubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiB0cmFuc3Bvc2U6IHJhbmsgb2YgaW5wdXQgXCIrbi5yYW5rK1wiIG11c3QgbWF0Y2ggbGVuZ3RoIG9mIHBlcm0gXCIrZStcIi5cIn0pLGUuZm9yRWFjaChmdW5jdGlvbih0KXtmKHQ+PTAmJnQ8bi5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJBbGwgZW50cmllcyBpbiAncGVybScgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIFwiKyhuLnJhbmstMSkrXCIgYnV0IGdvdCBcIitlfSl9KSxuLnJhbms8PTE/bi5jbG9uZSgpOlN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC50cmFuc3Bvc2UobixlKX0seyR4Om59LGZ1bmN0aW9uKHQpe3ZhciBuPWhuKGUpO3JldHVybnskeDpmdW5jdGlvbigpe3JldHVybiB0LnRyYW5zcG9zZShuKX19fSl9fSk7dmFyIGFjPXZuKHtsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbl86ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1lJiYoZT01KSx2b2lkIDA9PT1uJiYobj0xKSx2b2lkIDA9PT1yJiYocj0xKSx2b2lkIDA9PT1vJiYobz0uNSk7dmFyIGE9bm4odCxcInhcIixcImxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uXCIpO2YoND09PWEucmFua3x8Mz09PWEucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gbG9jYWxSZXNwb25zZU5vcm1hbGl6YXRpb246IHggbXVzdCBiZSByYW5rIDMgb3IgNCBidXQgZ290XFxuICAgICAgICAgICAgICAgcmFuayBcIithLnJhbmsrXCIuXCJ9KSxmKHgoZSksZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uOiBkZXB0aFJhZGl1cyBtdXN0IGJlIGFuIGludGVnZXIgYnV0IGdvdCBkZXB0aFJhZGl1cyBcIitlK1wiLlwifSk7dmFyIGk9YSxzPSExOzM9PT1hLnJhbmsmJihzPSEwLGk9YS5hczREKDEsYS5zaGFwZVswXSxhLnNoYXBlWzFdLGEuc2hhcGVbMl0pKTt2YXIgdT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxhKXt2YXIgcz10LmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uNEQoaSxlLG4scixvKTtyZXR1cm4gYShbaSxzXSksc30se3g0RDppfSxmdW5jdGlvbih0LGEpe3ZhciBpPWFbMF0scz1hWzFdO3JldHVybnt4NEQ6ZnVuY3Rpb24oKXtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKGEpe3JldHVybiBhLkxSTkdyYWQodCxpLHMsZSxuLHIsbyl9LHt9KX19fSk7cmV0dXJuIHM/dS5hczNEKHUuc2hhcGVbMV0sdS5zaGFwZVsyXSx1LnNoYXBlWzNdKTp1fX0pO3ZhciBpYz12bih7bm9ybV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ZSYmKGU9XCJldWNsaWRlYW5cIiksdm9pZCAwPT09biYmKG49bnVsbCksdm9pZCAwPT09ciYmKHI9ITEpO3ZhciBvPWZ1bmN0aW9uIHQoZSxuLHIpe2lmKHZvaWQgMD09PXImJihyPW51bGwpLDA9PT1lLnJhbmspcmV0dXJuIGUuYWJzKCk7aWYoMSE9PWUucmFuayYmbnVsbD09PXIpcmV0dXJuIHQoZS5yZXNoYXBlKFstMV0pLG4scik7aWYoMT09PWUucmFua3x8XCJudW1iZXJcIj09dHlwZW9mIHJ8fEFycmF5LmlzQXJyYXkocikmJjE9PT1yLmxlbmd0aCl7aWYoMT09PW4pcmV0dXJuIGUuYWJzKCkuc3VtKHIpO2lmKG49PT0xLzApcmV0dXJuIGUuYWJzKCkubWF4KHIpO2lmKG49PT0tMS8wKXJldHVybiBlLmFicygpLm1pbihyKTtpZihcImV1Y2xpZGVhblwiPT09bnx8Mj09PW4pcmV0dXJuIGUuYWJzKCkucG93KHduKDIsXCJpbnQzMlwiKSkuc3VtKHIpLnNxcnQoKTt0aHJvdyBuZXcgRXJyb3IoXCJFcnJvciBpbiBub3JtOiBpbnZhbGlkIG9yZCB2YWx1ZTogXCIrbil9aWYoQXJyYXkuaXNBcnJheShyKSYmMj09PXIubGVuZ3RoKXtpZigxPT09bilyZXR1cm4gZS5hYnMoKS5zdW0oclswXSkubWF4KHJbMV0tMSk7aWYobj09PTEvMClyZXR1cm4gZS5hYnMoKS5zdW0oclsxXSkubWF4KHJbMF0pO2lmKG49PT0tMS8wKXJldHVybiBlLmFicygpLnN1bShyWzFdKS5taW4oclswXSk7aWYoXCJmcm9cIj09PW58fFwiZXVjbGlkZWFuXCI9PT1uKXJldHVybiBlLnNxdWFyZSgpLnN1bShyKS5zcXJ0KCk7dGhyb3cgbmV3IEVycm9yKFwiRXJyb3IgaW4gbm9ybTogaW52YWxpZCBvcmQgdmFsdWU6IFwiK24pfXRocm93IG5ldyBFcnJvcihcIkVycm9yIGluIG5vcm06IGludmFsaWQgYXhpczogXCIrcil9KHQ9bm4odCxcInhcIixcIm5vcm1cIiksZSxuKSxhPW8uc2hhcGU7aWYocil7dmFyIGk9SShuLHQuc2hhcGUpO2E9dW4oby5zaGFwZSxpKX1yZXR1cm4gby5yZXNoYXBlKGEpfX0pO3ZhciBzYz12bih7YmFzaWNMU1RNQ2VsbF86ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPW5uKHQsXCJmb3JnZXRCaWFzXCIsXCJiYXNpY0xTVE1DZWxsXCIpLHM9bm4oZSxcImxzdG1LZXJuZWxcIixcImJhc2ljTFNUTUNlbGxcIiksdT1ubihuLFwibHN0bUJpYXNcIixcImJhc2ljTFNUTUNlbGxcIiksbD1ubihyLFwiZGF0YVwiLFwiYmFzaWNMU1RNQ2VsbFwiKSxjPW5uKG8sXCJjXCIsXCJiYXNpY0xTVE1DZWxsXCIpLGg9bm4oYSxcImhcIixcImJhc2ljTFNUTUNlbGxcIikscD1sLmNvbmNhdChoLDEpLm1hdE11bChzKS5hZGQodSksZj1wLnNoYXBlWzBdLGQ9cC5zaGFwZVsxXS80LHY9W2YsZF0sbT1wLnNsaWNlKFswLDBdLHYpLGc9cC5zbGljZShbMCxkXSx2KSx5PXAuc2xpY2UoWzAsMipkXSx2KSx4PXAuc2xpY2UoWzAsMypkXSx2KSxiPW0uc2lnbW9pZCgpLm11bFN0cmljdChnLnRhbmgoKSkuYWRkU3RyaWN0KGMubXVsU3RyaWN0KGkuYWRkKHkpLnNpZ21vaWQoKSkpLHc9Yi50YW5oKCkubXVsU3RyaWN0KHguc2lnbW9pZCgpKTtyZXR1cm5bYix3XX19KSx1Yz12bih7bXVsdGlSTk5DZWxsXzpmdW5jdGlvbih0LGUsbixyKXtmb3IodmFyIG89bm4oZSxcImRhdGFcIixcIm11bHRpUk5OQ2VsbFwiKSxhPXJuKG4sXCJjXCIsXCJtdWx0aVJOTkNlbGxcIiksaT1ybihyLFwiaFwiLFwibXVsdGlSTk5DZWxsXCIpLHM9byx1PVtdLGw9MDtsPHQubGVuZ3RoO2wrKyl7dmFyIGM9dFtsXShzLGFbbF0saVtsXSk7dS5wdXNoKGNbMF0pLHUucHVzaChjWzFdKSxzPWNbMV19dmFyIGg9W10scD1bXTtmb3IobD0wO2w8dS5sZW5ndGg7bCs9MiloLnB1c2godVtsXSkscC5wdXNoKHVbbCsxXSk7cmV0dXJuW2gscF19fSk7dmFyIGxjPXZuKHttb3ZpbmdBdmVyYWdlXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PW8mJihvPSEwKTt2YXIgYT1ubih0LFwidlwiLFwibW92aW5nQXZlcmFnZVwiKSxpPW5uKGUsXCJ4XCIsXCJtb3ZpbmdBdmVyYWdlXCIpLHM9bm4obixcImRlY2F5XCIsXCJtb3ZpbmdBdmVyYWdlXCIpO0N0KGEsaSksZih5KGEuc2hhcGUsaS5zaGFwZSksZnVuY3Rpb24oKXtyZXR1cm5cIlNoYXBlIG1pc21hdGNoIGluIHYgYW5kIHhcIn0pO3ZhciB1PXduKDEpLGw9dS5zdWIocyksYz1pLnN1YihhKS5tdWwobCk7aWYobyl7ZihudWxsIT1yLGZ1bmN0aW9uKCl7cmV0dXJuXCJXaGVuIHVzaW5nIHplcm9EZWJpYXM6IHRydWUsIHN0ZXAgaXMgcmVxdWlyZWQuXCJ9KTt2YXIgaD1ubihyLFwic3RlcFwiLFwibW92aW5nQXZlcmFnZVwiKTtjPWMuZGl2KHUuc3ViKFd1KHMsaCkpKX1yZXR1cm4gYS5hZGQoYyl9fSk7dmFyIGNjPXZuKHtzdHJpZGVkU2xpY2VfOmZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyx1KXtpZih2b2lkIDA9PT1vJiYobz0wKSx2b2lkIDA9PT1hJiYoYT0wKSx2b2lkIDA9PT1pJiYoaT0wKSx2b2lkIDA9PT1zJiYocz0wKSx2b2lkIDA9PT11JiYodT0wKSxudWxsPT1yJiYocj1uZXcgQXJyYXkoZS5sZW5ndGgpKSwwIT09aSl0aHJvdyBuZXcgRXJyb3IoXCJlbGxpcHNpcyBtYXNrIGlzIG5vdCB5ZXQgc3VwcG9ydGVkXCIpO3ZhciBsPW5uKHQsXCJ4XCIsXCJzdHJpZGVkU2xpY2VcIiksYz1QcihzKSxoPWwuc2hhcGUuc2xpY2UoKTtjLmZvckVhY2goZnVuY3Rpb24odCl7ZVt0XT0wLG5bdF09MSxoLnNwbGljZSh0LDAsMSl9KSxsPWwucmVzaGFwZShoKTtmb3IodmFyIHA9MDtwPGwucmFuaztwKyspZVtwXT1XcihvLGUscixsLnNoYXBlLHApLG5bcF09VXIoYSxuLHIsbC5zaGFwZSxwKSxyW3BdPXJbcF18fDE7dmFyIGY9UHIodSk7Zi5mb3JFYWNoKGZ1bmN0aW9uKHQpe25bdF09ZVt0XSsxLHJbdF09MX0pO3ZhciBkPUxyKGUsbixyKSx2PWQuZmlsdGVyKGZ1bmN0aW9uKHQsZSl7cmV0dXJuLTE9PT1mLmluZGV4T2YoZSl9KTtyZXR1cm4gci5ldmVyeShmdW5jdGlvbih0KXtyZXR1cm4gMT09PXR9KT9CbChsLGUsZCkucmVzaGFwZSh2KTpTdC5ydW5LZXJuZWwoZnVuY3Rpb24odCl7cmV0dXJuIHQuc3RyaWRlZFNsaWNlKGwsZSxuLHIpfSx7JHg6bH0pLnJlc2hhcGUodil9fSk7dmFyIGhjPXZuKHt0b3BrXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9MSksdm9pZCAwPT09biYmKG49ITApO3ZhciByPW5uKHQsXCJ4XCIsXCJ0b3BrXCIpO2lmKDA9PT1yLnJhbmspdGhyb3cgbmV3IEVycm9yKFwidG9waygpIGV4cGVjdHMgdGhlIGlucHV0IHRvIGJlIG9mIHJhbmsgMSBvciBoaWdoZXJcIik7dmFyIG89ci5zaGFwZVtyLnNoYXBlLmxlbmd0aC0xXTtpZihlPm8pdGhyb3cgbmV3IEVycm9yKFwiJ2snIHBhc3NlZCB0byB0b3BrKCkgbXVzdCBiZSA8PSB0aGUgbGFzdCBkaW1lbnNpb24gKFwiK28rXCIpIGJ1dCBnb3QgXCIrZSk7dmFyIGE9U3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnRvcGsocixlLG4pfSx7JHg6cn0pO3JldHVybnt2YWx1ZXM6YVswXSxpbmRpY2VzOmFbMV19fX0pO3ZhciBwYz12bih7c2NhdHRlck5EXzpmdW5jdGlvbih0LGUsbil7dmFyIHI9bm4odCxcImluZGljZXNcIixcInNjYXR0ZXJORFwiLFwiaW50MzJcIiksbz1ubihlLFwidXBkYXRlc1wiLFwic2NhdHRlck5EXCIpO3JldHVybiBNcihvLHIsbiksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNjYXR0ZXJORChyLG8sbil9LHskaW5kaWNlczpyLCR1cGRhdGVzOm99KX19KTt2YXIgZmM9dm4oe2ZmdF86ZnVuY3Rpb24odCl7ZihcImNvbXBsZXg2NFwiPT09dC5kdHlwZSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGR0eXBlIGZvciB0Zi5zcGVjdHJhbC5mZnQoKSBtdXN0IGJlIGNvbXBsZXg2NCBidXQgZ290IFwiK3QuZHR5cGUrXCIuXCJ9KTt2YXIgZT10LnNoYXBlW3Quc2hhcGUubGVuZ3RoLTFdLG49dC5zaXplL2Uscj10LmFzMkQobixlKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmZmdChyKX0se2lucHV0OnR9KS5yZXNoYXBlKHQuc2hhcGUpfX0pLGRjPXZuKHtpZmZ0XzpmdW5jdGlvbih0KXtmKFwiY29tcGxleDY0XCI9PT10LmR0eXBlLGZ1bmN0aW9uKCl7cmV0dXJuXCJUaGUgZHR5cGUgZm9yIHRmLnNwZWN0cmFsLmlmZnQoKSBtdXN0IGJlIGNvbXBsZXg2NCBidXQgZ290IFwiK3QuZHR5cGUrXCIuXCJ9KTt2YXIgZT10LnNoYXBlW3Quc2hhcGUubGVuZ3RoLTFdLG49dC5zaXplL2Uscj10LmFzMkQobixlKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmlmZnQocil9LHtpbnB1dDp0fSkucmVzaGFwZSh0LnNoYXBlKX19KSx2Yz12bih7cmZmdF86ZnVuY3Rpb24odCxlKXtmKFwiZmxvYXQzMlwiPT09dC5kdHlwZSxmdW5jdGlvbigpe3JldHVyblwiVGhlIGR0eXBlIGZvciByZmZ0KCkgbXVzdCBiZSByZWFsIHZhbHVlIGJ1dCBnb3QgXCIrdC5kdHlwZX0pO3ZhciBuLHI9dC5zaGFwZVt0LnNoYXBlLmxlbmd0aC0xXSxvPXQuc2l6ZS9yO2lmKG51bGwhPWUmJmU8cil7dmFyIGE9dC5zaGFwZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIDB9KSxpPXQuc2hhcGUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0fSk7aVt0LnNoYXBlLmxlbmd0aC0xXT1lLG49dC5zbGljZShhLGkpLHI9ZX1lbHNlIGlmKG51bGwhPWUmJmU+cil7dmFyIHM9dC5zaGFwZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHR9KTtzW3Quc2hhcGUubGVuZ3RoLTFdPWUtcixuPXQuY29uY2F0KEFuKHMpLHQuc2hhcGUubGVuZ3RoLTEpLHI9ZX1lbHNlIG49dDt2YXIgdT1uLnplcm9zTGlrZSgpLGw9bW4obix1KS5hczJEKG8sciksYz1mYyhsKSxoPU1hdGguZmxvb3Ioci8yKSsxLHA9Z24oYyksZD15bihjKSx2PXAuc3BsaXQoW2gsci1oXSxwLnNoYXBlLmxlbmd0aC0xKSxtPWQuc3BsaXQoW2gsci1oXSxkLnNoYXBlLmxlbmd0aC0xKSxnPW4uc2hhcGUuc2xpY2UoKTtyZXR1cm4gZ1tuLnNoYXBlLmxlbmd0aC0xXT1oLG1uKHZbMF0sbVswXSkucmVzaGFwZShnKX19KSxtYz12bih7aXJmZnRfOmZ1bmN0aW9uKHQpe3ZhciBlPXQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMV0sbj10LnNpemUvZTtpZihlPD0yKXt2YXIgcj10LmFzMkQobixlKSxvPWRjKHIpO3JldHVybiBnbihvKX12YXIgYT1bbiwyKihlLTEpXSxpPWduKHQpLmFzMkQobixlKSxzPXluKHQpLmFzMkQobixlKSx1PWkuc2xpY2UoWzAsMV0sW24sZS0yXSkucmV2ZXJzZSgxKSxsPXMuc2xpY2UoWzAsMV0sW24sZS0yXSkucmV2ZXJzZSgxKS5tdWwod24oLTEpKSxjPWkuY29uY2F0KHUsMSksaD1zLmNvbmNhdChsLDEpO3JldHVybiByPW1uKGMsaCkuYXMyRChhWzBdLGFbMV0pLG89ZGMociksZ24obyl9fSksZ2M9T2JqZWN0LmZyZWV6ZSh7ZmZ0OmZjLGlmZnQ6ZGMscmZmdDp2YyxpcmZmdDptY30pO3ZhciB5Yz12bih7c3BhcnNlVG9EZW5zZV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ciYmKHI9MCk7dmFyIG89bm4odCxcInNwYXJzZUluZGljZXNcIixcInNwYXJzZVRvRGVuc2VcIixcImludDMyXCIpLGE9bm4oZSxcInNwYXJzZVZhbHVlc1wiLFwic3BhcnNlVG9EZW5zZVwiKSxpPW5uKHIsXCJkZWZhdWx0VmFsdWVcIixcInNwYXJzZVRvRGVuc2VcIixhLmR0eXBlKTtyZXR1cm4gZnVuY3Rpb24odCxlLG4scil7aWYoXCJpbnQzMlwiIT09dC5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJ0Zi5zcGFyc2VUb0RlbnNlKCkgZXhwZWN0cyB0aGUgaW5kaWNlcyB0byBiZSBpbnQzMiB0eXBlLCBidXQgdGhlIGR0eXBlIHdhcyBcIit0LmR0eXBlK1wiLlwiKTtpZih0LnJhbms+Mil0aHJvdyBuZXcgRXJyb3IoXCJzcGFyc2VJbmRpY2VzIHNob3VsZCBiZSBhIHNjYWxhciwgdmVjdG9yLCBvciBtYXRyaXgsIGJ1dCBnb3Qgc2hhcGUgXCIrdC5zaGFwZStcIi5cIik7dmFyIG89dC5yYW5rPjA/dC5zaGFwZVswXToxLGE9dC5yYW5rPjE/dC5zaGFwZVsxXToxO2lmKG4ubGVuZ3RoIT09YSl0aHJvdyBuZXcgRXJyb3IoXCJvdXRwdXRTaGFwZSBoYXMgaW5jb3JyZWN0IG51bWJlciBvZiBlbGVtZW50czosIFwiK24ubGVuZ3RoK1wiLCBzaG91bGQgYmU6IFwiK2ErXCIuXCIpO3ZhciBpPWUuc2l6ZTtpZigwIT09ZS5yYW5rJiYoMSE9PWUucmFua3x8aSE9PW8pKXRocm93IG5ldyBFcnJvcihcInNwYXJzZVZhbHVlcyBoYXMgaW5jb3JyZWN0IHNoYXBlIFwiK2Uuc2hhcGUrXCIsIHNob3VsZCBiZSBbXSBvciBbXCIrbytcIl1cIik7aWYoZS5kdHlwZSE9PXIuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwic3BhcnNlVmFsdWVzLmR0eXBlIG11c3QgbWF0Y2ggZGVmYXVsdFZhbHVlcy5kdHlwZVwiKX0obyxhLG4saSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNwYXJzZVRvRGVuc2UobyxhLG4saSl9LHskc3BhcnNlSW5kaWNlczpvLCRzcGFyc2VWYWx1ZXM6YSwkZGVmYXVsdFZhbHVlOml9KX19KTt2YXIgeGM9dm4oe2dhdGhlck5EXzpmdW5jdGlvbih0LGUpe3ZhciBuPW5uKGUsXCJpbmRpY2VzXCIsXCJnYXRoZXJORFwiLFwiaW50MzJcIikscj1ubih0LFwieFwiLFwiZ2F0aGVyTkRcIik7cmV0dXJuIFN0LnJ1bktlcm5lbChmdW5jdGlvbih0KXtyZXR1cm4gdC5nYXRoZXJORChyLG4pfSx7JHg6ciwkaW5kaWNlczpufSl9fSk7dmFyIGJjPXZuKHtkaWFnXzpmdW5jdGlvbih0KXt2YXIgZT1ubih0LFwieFwiLFwiZGlhZ1wiKS5mbGF0dGVuKCksbj10LnNoYXBlLmNvbmNhdCh0LnNoYXBlKTtyZXR1cm4gU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0LmRpYWcoZSl9LHskeDplfSkucmVzaGFwZShuKX19KTt2YXIgd2M9dm4oe2Ryb3BvdXRfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW5uKHQsXCJ4XCIsXCJkcm9wb3V0XCIpO2lmKGYoXCJmbG9hdDMyXCI9PT1vLmR0eXBlLGZ1bmN0aW9uKCl7cmV0dXJuXCJ4IGhhcyB0byBiZSBhIGZsb2F0aW5nIHBvaW50IHRlbnNvciBzaW5jZSBpdCdzIGdvaW5nIHRvIGJlIHNjYWxlZCwgYnV0IGdvdCBhIFwiK28uZHR5cGUrXCIgdGVuc29yIGluc3RlYWQuXCJ9KSxmKGU+PTAmJmU8MSxmdW5jdGlvbigpe3JldHVyblwicmF0ZSBtdXN0IGJlIGEgZmxvYXQgaW4gdGhlIHJhbmdlIFswLCAxKSwgYnV0IGdvdCBcIitlK1wiLlwifSksMD09PWUpcmV0dXJuIHQgaW5zdGFuY2VvZiBjdD9vLmNsb25lKCk6bzt2YXIgYT1mdW5jdGlvbih0LGUpe2lmKG51bGw9PWUpcmV0dXJuIHQuc2hhcGUuc2xpY2UoKTtpZih5KHQuc2hhcGUsZSkpcmV0dXJuIGU7aWYodC5zaGFwZS5sZW5ndGg9PT1lLmxlbmd0aCl7Zm9yKHZhciBuPVtdLHI9MDtyPHQuc2hhcGUubGVuZ3RoO3IrKyludWxsPT1lW3JdJiZudWxsIT10LnNoYXBlW3JdP24ucHVzaCh0LnNoYXBlW3JdKTpuLnB1c2goZVtyXSk7cmV0dXJuIG59cmV0dXJuIGV9KG8sbiksaT0xLWUscz15cihhLDAsMSxcImZsb2F0MzJcIixyKS5hZGQoaSkuZmxvb3IoKS5kaXYoaSk7cmV0dXJuIG8ubXVsKHMpfX0pO2Z1bmN0aW9uIENjKHQsZSxuKXtmb3IodmFyIHI9MS10JTIsbz1uZXcgRmxvYXQzMkFycmF5KHQpLGE9MDthPHQ7KythKXt2YXIgaT0yKk1hdGguUEkqYS8odCtyLTEpO29bYV09ZS1uKk1hdGguY29zKGkpfXJldHVybiBDbihvLFwiZmxvYXQzMlwiKX12YXIgRWM9dm4oe2hhbm5XaW5kb3dfOmZ1bmN0aW9uKHQpe3JldHVybiBDYyh0LC41LC41KX19KSxSYz12bih7aGFtbWluZ1dpbmRvd186ZnVuY3Rpb24odCl7cmV0dXJuIENjKHQsLjU0LC40Nil9fSksSWM9dm4oe2ZyYW1lXzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PXImJihyPSExKSx2b2lkIDA9PT1vJiYobz0wKTtmb3IodmFyIGE9MCxpPVtdO2ErZTw9dC5zaXplOylpLnB1c2goQmwodCxhLGUpKSxhKz1uO2lmKHIpZm9yKDthPHQuc2l6ZTspe3ZhciBzPWErZS10LnNpemUsdT1NbihbQmwodCxhLGUtcyksVG4oW3NdLG8pXSk7aS5wdXNoKHUpLGErPW59cmV0dXJuIDA9PT1pLmxlbmd0aD9FbihbXSxbMCxlXSk6TW4oaSkuYXMyRChpLmxlbmd0aCxlKX19KSxrYz12bih7c3RmdF86ZnVuY3Rpb24odCxlLG4scixvKXt2YXIgYTt2b2lkIDA9PT1vJiYobz1FYyksbnVsbD09ciYmKGE9ZSxyPU1hdGguZmxvb3IoTWF0aC5wb3coMixNYXRoLmNlaWwoTWF0aC5sb2coYSkvTWF0aC5sb2coMikpKSkpO2Zvcih2YXIgaT1JYyh0LGUsbikscz1QdShpLG8oZSkpLHU9W10sbD0wO2w8aS5zaGFwZVswXTtsKyspdS5wdXNoKHZjKHMuc2xpY2UoW2wsMF0sWzEsZV0pLHIpKTtyZXR1cm4gTW4odSl9fSksTmM9T2JqZWN0LmZyZWV6ZSh7aGFubldpbmRvdzpFYyxoYW1taW5nV2luZG93OlJjLGZyYW1lOkljLHN0ZnQ6a2N9KTt2YXIgU2MsQWM9ZnVuY3Rpb24odCxlLG8pe3JldHVybiB2b2lkIDA9PT1vJiYobz0xKSxuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBuLGEsaSxzLHUsbCxjLGgscCx2LG0sZyx5LHg7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOnJldHVybiBuPW5uKHQsXCJwcmVkaWN0aW9uc1wiLFwiaW5Ub3BLXCIpLGE9bm4oZSxcInRhcmdldHNcIixcImluVG9wS1wiKSxmKG4ucmFuaz4xLGZ1bmN0aW9uKCl7cmV0dXJuXCJpblRvcEsoKSBleHBlY3RzIHRoZSBwcmVkaWN0aW9ucyB0byBiZSBvZiByYW5rIDIgb3IgaGlnaGVyLCBidXQgZ290IFwiK24ucmFua30pLGYobi5yYW5rLTE9PT1hLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cInByZWRpY3Rpb25zIHJhbmsgc2hvdWxkIGJlIDEgbGFyZ2VyIHRoYW4gdGFyZ2V0cyByYW5rLCBidXQgZ290IHByZWRpY3Rpb25zIHJhbmsgXCIrbi5yYW5rK1wiIGFuZCB0YXJnZXRzIHJhbmsgXCIrYS5yYW5rfSksZChuLnNoYXBlLnNsaWNlKDAsbi5zaGFwZS5sZW5ndGgtMSksYS5zaGFwZSxcInByZWRpY3Rpb25zJ3Mgc2hhcGUgc2hvdWxkIGJlIGFsaWduIHdpdGggdGhlIHRhcmdldHMnIHNoYXBlLCBleGNlcHQgdGhlIGxhc3QgZGltZW5zaW9uLlwiKSxpPW4uc2hhcGVbbi5zaGFwZS5sZW5ndGgtMV0sZihvPjAmJm88PWksZnVuY3Rpb24oKXtyZXR1cm5cIidrJyBwYXNzZWQgdG8gaW5Ub3BLKCkgbXVzdCBiZSA+IDAgJiYgPD0gdGhlIHByZWRpY3Rpb25zIGxhc3QgZGltZW5zaW9uIChcIitpK1wiKSwgYnV0IGdvdCBcIitvfSksWzQsbi5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gcz1yLnNlbnQoKSxbNCxhLmRhdGEoKV07Y2FzZSAyOmZvcih1PXIuc2VudCgpLGw9W3MubGVuZ3RoL2ksaV0saD1sWzFdLHA9TihcImJvb2xcIixjPWxbMF0pLHY9MDt2PGM7disrKXtmb3IobT12KmgsZz1zLnN1YmFycmF5KG0sbStoKSx5PVtdLHg9MDt4PGcubGVuZ3RoO3grKyl5LnB1c2goe3ZhbHVlOmdbeF0saW5kZXg6eH0pO2Zvcih5LnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gZS52YWx1ZS10LnZhbHVlfSkscFt2XT0wLHg9MDt4PG87eCsrKWlmKHlbeF0uaW5kZXg9PT11W3ZdKXtwW3ZdPTE7YnJlYWt9fXJldHVybiB0IT09biYmbi5kaXNwb3NlKCksZSE9PWEmJmEuZGlzcG9zZSgpLFsyLHhuKHAsYS5zaGFwZSxcImJvb2xcIildfX0pfSl9OyFmdW5jdGlvbih0KXt0W3QuTk9ORT0wXT1cIk5PTkVcIix0W3QuTUVBTj0xXT1cIk1FQU5cIix0W3QuU1VNPTJdPVwiU1VNXCIsdFt0LlNVTV9CWV9OT05aRVJPX1dFSUdIVFM9M109XCJTVU1fQllfTk9OWkVST19XRUlHSFRTXCJ9KFNjfHwoU2M9e30pKTt2YXIgVGM9dm4oe2Fic29sdXRlRGlmZmVyZW5jZV86ZnVuY3Rpb24odCxlLG4scil7dm9pZCAwPT09ciYmKHI9U2MuU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIG89bm4odCxcImxhYmVsc1wiLFwiYWJzb2x1dGVEaWZmZXJlbmNlXCIpLGE9bm4oZSxcInByZWRpY3Rpb25zXCIsXCJhYnNvbHV0ZURpZmZlcmVuY2VcIiksaT1udWxsO251bGwhPW4mJihpPW5uKG4sXCJ3ZWlnaHRzXCIsXCJhYnNvbHV0ZURpZmZlcmVuY2VcIikpLGQoby5zaGFwZSxhLnNoYXBlLFwiRXJyb3IgaW4gYWJzb2x1dGVEaWZmZXJlbmNlOiBcIik7dmFyIHM9by5zdWIoYSkuYWJzKCk7cmV0dXJuIERjKHMsaSxyKX19KSxEYz12bih7Y29tcHV0ZVdlaWdodGVkTG9zc186ZnVuY3Rpb24odCxlLG4pe3ZvaWQgMD09PW4mJihuPVNjLlNVTV9CWV9OT05aRVJPX1dFSUdIVFMpO3ZhciByPW5uKHQsXCJsb3NzZXNcIixcImNvbXB1dGVXZWlnaHRlZExvc3NcIiksbz1udWxsO251bGwhPWUmJihvPW5uKGUsXCJ3ZWlnaHRzXCIsXCJjb21wdXRlV2VpZ2h0ZWRMb3NzXCIpKTt2YXIgYT1udWxsPT1vP3I6ci5tdWwobyk7aWYobj09PVNjLk5PTkUpcmV0dXJuIGE7aWYobj09PVNjLlNVTSlyZXR1cm4gYS5zdW0oKTtpZihuPT09U2MuTUVBTil7aWYobnVsbD09bylyZXR1cm4gYS5tZWFuKCk7dmFyIGk9ci5zaXplL28uc2l6ZSxzPWEuc3VtKCkuZGl2KG8uc3VtKCkpO3JldHVybiBpPjE/cy5kaXYod24oaSkpOnN9aWYobj09PVNjLlNVTV9CWV9OT05aRVJPX1dFSUdIVFMpe2lmKG51bGw9PW8pcmV0dXJuIGEuc3VtKCkuZGl2KHduKHIuc2l6ZSkpO3ZhciB1PW8ubXVsKFNuKHIuc2hhcGUpKS5ub3RFcXVhbCh3bigwKSkuc3VtKCkudG9GbG9hdCgpO3JldHVybiBhLnN1bSgpLmRpdih1KX10aHJvdyBFcnJvcihcIlVua25vd24gcmVkdWN0aW9uOiBcIituKX19KSxfYz12bih7Y29zaW5lRGlzdGFuY2VfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09byYmKG89U2MuU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIGE9bm4odCxcImxhYmVsc1wiLFwiY29zaW5lRGlzdGFuY2VcIiksaT1ubihlLFwicHJlZGljdGlvbnNcIixcImNvc2luZURpc3RhbmNlXCIpLHM9bnVsbDtudWxsIT1yJiYocz1ubihyLFwid2VpZ2h0c1wiLFwiY29zaW5lRGlzdGFuY2VcIikpLGQoYS5zaGFwZSxpLnNoYXBlLFwiRXJyb3IgaW4gY29zaW5lRGlzdGFuY2U6IFwiKTt2YXIgdT13bigxKS5zdWIoYS5tdWwoaSkuc3VtKG4sITApKTtyZXR1cm4gRGModSxzLG8pfX0pLE9jPXZuKHtoaW5nZUxvc3NfOmZ1bmN0aW9uKHQsZSxuLHIpe3ZvaWQgMD09PXImJihyPVNjLlNVTV9CWV9OT05aRVJPX1dFSUdIVFMpO3ZhciBvPW5uKHQsXCJsYWJlbHNcIixcImhpbmdlTG9zc1wiKSxhPW5uKGUsXCJwcmVkaWN0aW9uc1wiLFwiaGluZ2VMb3NzXCIpLGk9bnVsbDtudWxsIT1uJiYoaT1ubihuLFwid2VpZ2h0c1wiLFwiaGluZ2VMb3NzXCIpKSxkKG8uc2hhcGUsYS5zaGFwZSxcIkVycm9yIGluIGhpbmdlTG9zczogXCIpO3ZhciBzPXduKDEpO289d24oMikubXVsKG8pLnN1YihzKTt2YXIgdT1zLnN1YihvLm11bChhKSkucmVsdSgpO3JldHVybiBEYyh1LGkscil9fSksRmM9dm4oe2h1YmVyTG9zc186ZnVuY3Rpb24odCxlLG4scixvKXt2b2lkIDA9PT1yJiYocj0xKSx2b2lkIDA9PT1vJiYobz1TYy5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgYT1ubih0LFwibGFiZWxzXCIsXCJodWJlckxvc3NcIiksaT1ubihlLFwicHJlZGljdGlvbnNcIixcImh1YmVyTG9zc1wiKSxzPW51bGw7bnVsbCE9biYmKHM9bm4obixcIndlaWdodHNcIixcImh1YmVyTG9zc1wiKSksZChhLnNoYXBlLGkuc2hhcGUsXCJFcnJvciBpbiBodWJlckxvc3M6IFwiKTt2YXIgdT13bihyKSxsPWkuc3ViKGEpLmFicygpLGM9T3UobCx1KSxoPWwuc3ViKGMpLHA9d24oLjUpLm11bChjLnNxdWFyZSgpKS5hZGQodS5tdWwoaCkpO3JldHVybiBEYyhwLHMsbyl9fSksTWM9dm4oe2xvZ0xvc3NfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ciYmKHI9MWUtNyksdm9pZCAwPT09byYmKG89U2MuU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIGE9bm4odCxcImxhYmVsc1wiLFwibG9nTG9zc1wiKSxpPW5uKGUsXCJwcmVkaWN0aW9uc1wiLFwibG9nTG9zc1wiKSxzPW51bGw7bnVsbCE9biYmKHM9bm4obixcIndlaWdodHNcIixcImxvZ0xvc3NcIikpLGQoYS5zaGFwZSxpLnNoYXBlLFwiRXJyb3IgaW4gbG9nTG9zczogXCIpO3ZhciB1PXduKDEpLGw9d24ociksYz1hLm11bChpLmFkZChsKS5sb2coKSkubmVnKCkuc3ViKHUuc3ViKGEpLm11bCh1LnN1YihpKS5hZGQobCkubG9nKCkpKTtyZXR1cm4gRGMoYyxzLG8pfX0pLEJjPXZuKHttZWFuU3F1YXJlZEVycm9yXzpmdW5jdGlvbih0LGUsbixyKXt2b2lkIDA9PT1yJiYocj1TYy5TVU1fQllfTk9OWkVST19XRUlHSFRTKTt2YXIgbz1ubih0LFwibGFiZWxzXCIsXCJtZWFuU3F1YXJlZEVycm9yXCIpLGE9bm4oZSxcInByZWRpY3Rpb25zXCIsXCJtZWFuU3F1YXJlZEVycm9yXCIpLGk9bnVsbDtudWxsIT1uJiYoaT1ubihuLFwid2VpZ2h0c1wiLFwibWVhblNxdWFyZWRFcnJvclwiKSksZChvLnNoYXBlLGEuc2hhcGUsXCJFcnJvciBpbiBtZWFuU3F1YXJlZEVycm9yOiBcIik7dmFyIHM9by5zcXVhcmVkRGlmZmVyZW5jZShhKTtyZXR1cm4gRGMocyxpLHIpfX0pLFBjPXZuKHtzaWdtb2lkQ3Jvc3NFbnRyb3B5XzpmdW5jdGlvbih0LGUsbixyLG8pe3ZvaWQgMD09PXImJihyPTApLHZvaWQgMD09PW8mJihvPVNjLlNVTV9CWV9OT05aRVJPX1dFSUdIVFMpO3ZhciBhPW5uKHQsXCJtdWx0aUNsYXNzTGFiZWxzXCIsXCJzaWdtb2lkQ3Jvc3NFbnRyb3B5XCIpLGk9bm4oZSxcImxvZ2l0c1wiLFwic2lnbW9pZENyb3NzRW50cm9weVwiKSxzPW51bGw7aWYobnVsbCE9biYmKHM9bm4obixcIndlaWdodHNcIixcInNpZ21vaWRDcm9zc0VudHJvcHlcIikpLGQoYS5zaGFwZSxpLnNoYXBlLFwiRXJyb3IgaW4gc2lnbW9pZENyb3NzRW50cm9weTogXCIpLHI+MCl7dmFyIHU9d24ociksbD13bigxKSxjPXduKC41KTthPWEubXVsKGwuc3ViKHUpKS5hZGQoYy5tdWwodSkpfXZhciBoPWZ1bmN0aW9uKHQsZSl7dmFyIG49bm4odCxcImxhYmVsc1wiLFwic2lnbW9pZENyb3NzRW50cm9weVdpdGhMb2dpdHNcIikscj1ubihlLFwibG9naXRzXCIsXCJzaWdtb2lkQ3Jvc3NFbnRyb3B5V2l0aExvZ2l0c1wiKTtkKG4uc2hhcGUsci5zaGFwZSxcIkVycm9yIGluIHNpZ21vaWRDcm9zc0VudHJvcHlXaXRoTG9naXRzOiBcIik7dmFyIG89ci5yZWx1KCksYT1yLm11bChuKSxpPXIuYWJzKCkubmVnKCkuZXhwKCkubG9nMXAoKTtyZXR1cm4gby5zdWIoYSkuYWRkKGkpfShhLGkpO3JldHVybiBEYyhoLHMsbyl9fSksTGM9dm4oe3NvZnRtYXhDcm9zc0VudHJvcHlfOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ciYmKHI9MCksdm9pZCAwPT09byYmKG89U2MuU1VNX0JZX05PTlpFUk9fV0VJR0hUUyk7dmFyIGE9bm4odCxcIm9uZWhvdExhYmVsc1wiLFwic29mdG1heENyb3NzRW50cm9weVwiKSxpPW5uKGUsXCJsb2dpdHNcIixcInNvZnRtYXhDcm9zc0VudHJvcHlcIikscz1udWxsO2lmKG51bGwhPW4mJihzPW5uKG4sXCJ3ZWlnaHRzXCIsXCJzb2Z0bWF4Q3Jvc3NFbnRyb3B5XCIpKSxkKGEuc2hhcGUsaS5zaGFwZSxcIkVycm9yIGluIHNvZnRtYXhDcm9zc0VudHJvcHk6IFwiKSxyPjApe3ZhciB1PXduKHIpLGw9d24oMSksYz13bihhLnNoYXBlWzFdKTthPWEubXVsKGwuc3ViKHUpKS5hZGQodS5kaXYoYykpfXZhciBoPWZ1bmN0aW9uKHQsZSxuKXtpZih2b2lkIDA9PT1uJiYobj0tMSksLTE9PT1uJiYobj1lLnJhbmstMSksbiE9PWUucmFuay0xKXRocm93IEVycm9yKFwiU29mdG1heCBjcm9zcyBlbnRyb3B5IGFsb25nIGEgbm9uLWxhc3QgZGltZW5zaW9uIGlzIG5vdCB5ZXQgc3VwcG9ydGVkLiBMYWJlbHMgLyBsb2dpdHMgd2FzIHJhbmsgXCIrZS5yYW5rK1wiIGFuZCBkaW0gd2FzIFwiK24pO3JldHVybiBqcihmdW5jdGlvbih0LGUscil7dmFyIG89ZS5sb2dTdW1FeHAoW25dLCEwKSxhPWUudG9GbG9hdCgpLnN1YihvKTtyZXR1cm4gcihbdCxhXSkse3ZhbHVlOmEubXVsKHQpLm5lZygpLnN1bShbbl0pLGdyYWRGdW5jOmZ1bmN0aW9uKHQsZSl7dmFyIHI9ZVswXSxvPWVbMV0sYT11bih0LnNoYXBlLFtuXSk7cmV0dXJuW3QucmVzaGFwZShhKS5tdWwoci50b0Zsb2F0KCkuc3ViKG8uZXhwKCkpKSx0LnJlc2hhcGUoYSkubXVsKG8uZXhwKCkuc3ViKHIudG9GbG9hdCgpKSldfX19KSh0LGUpfShhLGkpO3JldHVybiBEYyhoLHMsbyl9fSksV2M9T2JqZWN0LmZyZWV6ZSh7Z2V0IFJlZHVjdGlvbigpe3JldHVybiBTY30sYWJzb2x1dGVEaWZmZXJlbmNlOlRjLGNvbXB1dGVXZWlnaHRlZExvc3M6RGMsY29zaW5lRGlzdGFuY2U6X2MsaGluZ2VMb3NzOk9jLGh1YmVyTG9zczpGYyxsb2dMb3NzOk1jLG1lYW5TcXVhcmVkRXJyb3I6QmMsc2lnbW9pZENyb3NzRW50cm9weTpQYyxzb2Z0bWF4Q3Jvc3NFbnRyb3B5OkxjfSk7ZnVuY3Rpb24gVWModCxlKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9ITEpLFN0LnRpZHkoZnVuY3Rpb24oKXtpZigyIT09dC5zaGFwZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwicXIyZCgpIHJlcXVpcmVzIGEgMkQgVGVuc29yLCBidXQgZ290IGEgXCIrdC5zaGFwZS5sZW5ndGgrXCJEIFRlbnNvci5cIik7Zm9yKHZhciBuPXQuc2hhcGVbMF0scj10LnNoYXBlWzFdLG89c3IobiksYT10LmNsb25lKCksaT1FbihbWzFdXSxbMSwxXSkscz1pLmNsb25lKCksdT1uPj1yP3I6bixsPWZ1bmN0aW9uKHQpe3ZhciBlLHU9YSxsPXMsYz1vO2U9U3QudGlkeShmdW5jdGlvbigpe3ZhciBlPWEuc2xpY2UoW3QsdF0sW24tdCwxXSksdT1lLm5vcm0oKSxsPWEuc2xpY2UoW3QsdF0sWzEsMV0pLGM9RW4oW1stMV1dKS53aGVyZShsLmdyZWF0ZXIoMCksRW4oW1sxXV0pKSxoPWwuc3ViKGMubXVsKHUpKSxwPWUuZGl2KGgpO3M9MT09PXAuc2hhcGVbMF0/aS5jbG9uZSgpOmkuY29uY2F0KHAuc2xpY2UoWzEsMF0sW3Auc2hhcGVbMF0tMSxwLnNoYXBlWzFdXSksMCk7dmFyIGY9Yy5tYXRNdWwoaCkuZGl2KHUpLm5lZygpLGQ9YS5zbGljZShbdCwwXSxbbi10LHJdKSx2PWYubXVsKHMpO2lmKDA9PT10KWE9ZC5zdWIodi5tYXRNdWwocy50cmFuc3Bvc2UoKS5tYXRNdWwoZCkpKTtlbHNle3ZhciBtPWQuc3ViKHYubWF0TXVsKHMudHJhbnNwb3NlKCkubWF0TXVsKGQpKSk7YT1hLnNsaWNlKFswLDBdLFt0LHJdKS5jb25jYXQobSwwKX12YXIgZz1vLnNsaWNlKFswLHRdLFtuLG8uc2hhcGVbMV0tdF0pO2lmKDA9PT10KW89Zy5zdWIoZy5tYXRNdWwocykubWF0TXVsKHYudHJhbnNwb3NlKCkpKTtlbHNle3ZhciB5PWcuc3ViKGcubWF0TXVsKHMpLm1hdE11bCh2LnRyYW5zcG9zZSgpKSk7bz1vLnNsaWNlKFswLDBdLFtuLHRdKS5jb25jYXQoeSwxKX1yZXR1cm5bcyxhLG9dfSkscz1lWzBdLGE9ZVsxXSxvPWVbMl0sVmUoW3UsbCxjXSl9LGM9MDtjPHU7KytjKWwoYyk7cmV0dXJuIWUmJm4+ciYmKG89by5zbGljZShbMCwwXSxbbixyXSksYT1hLnNsaWNlKFswLDBdLFtyLHJdKSksW28sYV19KX12YXIgVmM9dm4oe2dyYW1TY2htaWR0XzpmdW5jdGlvbih0KXt2YXIgZTtpZihBcnJheS5pc0FycmF5KHQpKXtlPSExLGYobnVsbCE9dCYmdC5sZW5ndGg+MCxmdW5jdGlvbigpe3JldHVyblwiR3JhbS1TY2htaWR0IHByb2Nlc3M6IGlucHV0IG11c3Qgbm90IGJlIG51bGwsIHVuZGVmaW5lZCwgb3IgZW1wdHlcIn0pO2Zvcih2YXIgbj10WzBdLnNoYXBlWzBdLHI9ZnVuY3Rpb24oZSl7Zih0W2VdLnNoYXBlWzBdPT09bixmdW5jdGlvbigpe3JldHVyblwiR3JhbS1TY2htaWR0OiBOb24tdW5pcXVlIGxlbmd0aHMgZm91bmQgaW4gdGhlIGlucHV0IHZlY3RvcnM6IChcIit0W2VdLnNoYXBlWzBdK1wiIHZzLiBcIituK1wiKVwifSl9LG89MTtvPHQubGVuZ3RoOysrbylyKG8pfWVsc2UgZT0hMCx0PVVuKHQsdC5zaGFwZVswXSwwKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHdyKHQsWzBdKX0pO2YodC5sZW5ndGg8PXRbMF0uc2hhcGVbMF0sZnVuY3Rpb24oKXtyZXR1cm5cIkdyYW0tU2NobWlkdDogTnVtYmVyIG9mIHZlY3RvcnMgKFwiK3QubGVuZ3RoK1wiKSBleGNlZWRzIG51bWJlciBvZiBkaW1lbnNpb25zIChcIit0WzBdLnNoYXBlWzBdK1wiKS5cIn0pO3ZhciBhPVtdLGk9dCxzPWZ1bmN0aW9uKHQpe2EucHVzaChTdC50aWR5KGZ1bmN0aW9uKCl7dmFyIGU9aVt0XTtpZih0PjApZm9yKHZhciBuPTA7bjx0Oysrbil7dmFyIHI9UWwoYVtuXS5tdWxTdHJpY3QoZSkpLm11bChhW25dKTtlPWUuc3ViKHIpfXJldHVybiBlLmRpdihpYyhlLFwiZXVjbGlkZWFuXCIpKX0pKX07Zm9yKG89MDtvPHQubGVuZ3RoOysrbylzKG8pO3JldHVybiBlP0NyKGEsMCk6YX19KSx6Yz12bih7cXJfOmZ1bmN0aW9uKHQsZSl7aWYodm9pZCAwPT09ZSYmKGU9ITEpLHQucmFuazwyKXRocm93IG5ldyBFcnJvcihcInFyKCkgcmVxdWlyZXMgaW5wdXQgdGVuc29yIHRvIGhhdmUgYSByYW5rID49IDIsIGJ1dCBnb3QgcmFuayBcIit0LnJhbmspO2lmKDI9PT10LnJhbmspcmV0dXJuIFVjKHQsZSk7dmFyIG49dC5zaGFwZS5zbGljZSgwLHQuc2hhcGUubGVuZ3RoLTIpLnJlZHVjZShmdW5jdGlvbih0LGUpe3JldHVybiB0KmV9KSxyPUlyKHQucmVzaGFwZShbbix0LnNoYXBlW3Quc2hhcGUubGVuZ3RoLTJdLHQuc2hhcGVbdC5zaGFwZS5sZW5ndGgtMV1dKSwwKSxvPVtdLGE9W107cmV0dXJuIHIuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgbj1VYyh0LGUpLHI9blswXSxpPW5bMV07by5wdXNoKHIpLGEucHVzaChpKX0pLFtDcihvLDApLnJlc2hhcGUodC5zaGFwZSksQ3IoYSwwKS5yZXNoYXBlKHQuc2hhcGUpXX19KSxHYz1PYmplY3QuZnJlZXplKHtncmFtU2NobWlkdDpWYyxxcjp6Y30pO2Z1bmN0aW9uIEhjKHQsZSxuLHIsbyl7bnVsbD09ciYmKHI9LjUpLG51bGw9PW8mJihvPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7dmFyIGE9dC5zaGFwZVswXTtyZXR1cm4gbj1NYXRoLm1pbihuLGEpLGYoMDw9ciYmcjw9MSxmdW5jdGlvbigpe3JldHVyblwiaW91VGhyZXNob2xkIG11c3QgYmUgaW4gWzAsIDFdLCBidXQgd2FzICdcIityK1wiJ1wifSksZigyPT09dC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJib3hlcyBtdXN0IGJlIGEgMkQgdGVuc29yLCBidXQgd2FzIG9mIHJhbmsgJ1wiK3QucmFuaytcIidcIn0pLGYoND09PXQuc2hhcGVbMV0sZnVuY3Rpb24oKXtyZXR1cm5cImJveGVzIG11c3QgaGF2ZSA0IGNvbHVtbnMsIGJ1dCAybmQgZGltZW5zaW9uIHdhcyBcIit0LnNoYXBlWzFdfSksZigxPT09ZS5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJzY29yZXMgbXVzdCBiZSBhIDFEIHRlbnNvclwifSksZihlLnNoYXBlWzBdPT09YSxmdW5jdGlvbigpe3JldHVyblwic2NvcmVzIGhhcyBpbmNvbXBhdGlibGUgc2hhcGUgd2l0aCBib3hlcy4gRXhwZWN0ZWQgXCIrYStcIiwgYnV0IHdhcyBcIitlLnNoYXBlWzBdfSkse21heE91dHB1dFNpemU6bixpb3VUaHJlc2hvbGQ6cixzY29yZVRocmVzaG9sZDpvfX12YXIgcWM9dm4oe3Jlc2l6ZUJpbGluZWFyXzpmdW5jdGlvbih0LGUsbil7dm9pZCAwPT09biYmKG49ITEpO3ZhciByPW5uKHQsXCJpbWFnZXNcIixcInJlc2l6ZUJpbGluZWFyXCIpO2YoMz09PXIucmFua3x8ND09PXIucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmVzaXplQmlsaW5lYXI6IHggbXVzdCBiZSByYW5rIDMgb3IgNCwgYnV0IGdvdCByYW5rIFwiK3IucmFuaytcIi5cIn0pLGYoMj09PWUubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiByZXNpemVCaWxpbmVhcjogbmV3IHNoYXBlIG11c3QgMkQsIGJ1dCBnb3Qgc2hhcGUgXCIrZStcIi5cIn0pO3ZhciBvPXIsYT0hMTszPT09ci5yYW5rJiYoYT0hMCxvPXIuYXM0RCgxLHIuc2hhcGVbMF0sci5zaGFwZVsxXSxyLnNoYXBlWzJdKSk7dmFyIGk9ZVswXSxzPWVbMV0sdT1TdC5ydW5LZXJuZWwoZnVuY3Rpb24odCxlKXtyZXR1cm4gZShbb10pLHQucmVzaXplQmlsaW5lYXIobyxpLHMsbil9LHtiYXRjaEltYWdlczpvfSxmdW5jdGlvbih0LGUpe3JldHVybntiYXRjaEltYWdlczpmdW5jdGlvbigpe3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24ocil7cmV0dXJuIHIucmVzaXplQmlsaW5lYXJCYWNrcHJvcCh0LGVbMF0sbil9LHt9KX19fSk7cmV0dXJuIGE/dS5hczNEKHUuc2hhcGVbMV0sdS5zaGFwZVsyXSx1LnNoYXBlWzNdKTp1fX0pLCRjPXZuKHtyZXNpemVOZWFyZXN0TmVpZ2hib3JfOmZ1bmN0aW9uKHQsZSxuKXt2b2lkIDA9PT1uJiYobj0hMSk7dmFyIHI9bm4odCxcImltYWdlc1wiLFwicmVzaXplTmVhcmVzdE5laWdoYm9yXCIpO2YoMz09PXIucmFua3x8ND09PXIucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmVzaXplTmVhcmVzdE5laWdoYm9yOiB4IG11c3QgYmUgcmFuayAzIG9yIDQsIGJ1dCBnb3QgcmFuayBcIityLnJhbmsrXCIuXCJ9KSxmKDI9PT1lLmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gcmVzaXplTmVhcmVzdE5laWdoYm9yOiBuZXcgc2hhcGUgbXVzdCAyRCwgYnV0IGdvdCBzaGFwZSBcIitlK1wiLlwifSksZihcImZsb2F0MzJcIj09PXIuZHR5cGV8fFwiaW50MzJcIj09PXIuZHR5cGUsZnVuY3Rpb24oKXtyZXR1cm5cImBpbWFnZXNgIG11c3QgaGF2ZSBgaW50MzJgIG9yIGBmbG9hdDMyYCBhcyBkdHlwZVwifSk7dmFyIG89cixhPSExOzM9PT1yLnJhbmsmJihhPSEwLG89ci5hczREKDEsci5zaGFwZVswXSxyLnNoYXBlWzFdLHIuc2hhcGVbMl0pKTt2YXIgaT1lWzBdLHM9ZVsxXSx1PVN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3JldHVybiBlKFtvXSksdC5yZXNpemVOZWFyZXN0TmVpZ2hib3IobyxpLHMsbil9LHtiYXRjaEltYWdlczpvfSxmdW5jdGlvbih0LGUpe3JldHVybntiYXRjaEltYWdlczpmdW5jdGlvbigpe3JldHVybiBTdC5ydW5LZXJuZWwoZnVuY3Rpb24ocil7cmV0dXJuIHIucmVzaXplTmVhcmVzdE5laWdoYm9yQmFja3Byb3AodCxlWzBdLG4pfSx7fSl9fX0pO3JldHVybiBhP3UuYXMzRCh1LnNoYXBlWzFdLHUuc2hhcGVbMl0sdS5zaGFwZVszXSk6dX19KSxLYz12bih7bm9uTWF4U3VwcHJlc3Npb25fOmZ1bmN0aW9uKHQsZSxuLHIsbyl7dm9pZCAwPT09ciYmKHI9LjUpLHZvaWQgMD09PW8mJihvPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSk7dmFyIGE9bm4odCxcImJveGVzXCIsXCJub25NYXhTdXBwcmVzc2lvblwiKSxpPW5uKGUsXCJzY29yZXNcIixcIm5vbk1heFN1cHByZXNzaW9uXCIpLHM9SGMoYSxpLG4scixvKTtyZXR1cm4gbj1zLm1heE91dHB1dFNpemUscj1zLmlvdVRocmVzaG9sZCxvPXMuc2NvcmVUaHJlc2hvbGQsU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5vbk1heFN1cHByZXNzaW9uKGEsaSxuLHIsbyl9LHskYm94ZXM6YX0pfX0pLGpjPWZ1bmN0aW9uKHQsZSxvLGEsaSl7cmV0dXJuIHZvaWQgMD09PWEmJihhPS41KSx2b2lkIDA9PT1pJiYoaT1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkpLG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIG4scyx1LGwsYyxoLHA7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOnJldHVybiBuPW5uKHQsXCJib3hlc1wiLFwibm9uTWF4U3VwcHJlc3Npb25Bc3luY1wiKSxzPW5uKGUsXCJzY29yZXNcIixcIm5vbk1heFN1cHByZXNzaW9uQXN5bmNcIiksdT1IYyhuLHMsbyxhLGkpLG89dS5tYXhPdXRwdXRTaXplLGE9dS5pb3VUaHJlc2hvbGQsaT11LnNjb3JlVGhyZXNob2xkLFs0LFByb21pc2UuYWxsKFtuLmRhdGEoKSxzLmRhdGEoKV0pXTtjYXNlIDE6cmV0dXJuIGw9ci5zZW50KCksYz1sWzBdLGg9bFsxXSxwPVJvKGMsaCxvLGEsaSksbiE9PXQmJm4uZGlzcG9zZSgpLHMhPT1lJiZzLmRpc3Bvc2UoKSxbMixwXX19KX0pfSxYYz12bih7Y3JvcEFuZFJlc2l6ZV86ZnVuY3Rpb24odCxlLG4scixvLGEpe3ZhciBpPW5uKHQsXCJpbWFnZVwiLFwiY3JvcEFuZFJlc2l6ZVwiLFwiZmxvYXQzMlwiKSxzPW5uKGUsXCJib3hlc1wiLFwiY3JvcEFuZFJlc2l6ZVwiLFwiZmxvYXQzMlwiKSx1PW5uKG4sXCJib3hJbmRcIixcImNyb3BBbmRSZXNpemVcIixcImludDMyXCIpO289b3x8XCJiaWxpbmVhclwiLGE9YXx8MDt2YXIgbD1zLnNoYXBlWzBdO3JldHVybiBmKDQ9PT1pLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNyb3BBbmRSZXNpemU6IGltYWdlIG11c3QgYmUgcmFuayA0LGJ1dCBnb3QgcmFuayBcIitpLnJhbmsrXCIuXCJ9KSxmKDI9PT1zLnJhbmsmJjQ9PT1zLnNoYXBlWzFdLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjcm9wQW5kUmVzaXplOiBib3hlcyBtdXN0IGJlIGhhdmUgc2l6ZSBbXCIrbCtcIiw0XSBidXQgaGFkIHNoYXBlIFwiK3Muc2hhcGUrXCIuXCJ9KSxmKDE9PT11LnJhbmsmJnUuc2hhcGVbMF09PT1sLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjcm9wQW5kUmVzaXplOiBib3hJbmQgbXVzdCBiZSBoYXZlIHNpemUgW1wiK2wrXCJdIGJ1dCBoYWQgc2hhcGUgXCIrcy5zaGFwZStcIi5cIn0pLGYoMj09PXIubGVuZ3RoLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjcm9wQW5kUmVzaXplOiBjcm9wU2l6ZSBtdXN0IGJlIG9mIGxlbmd0aCAyLCBidXQgZ290IGxlbmd0aCBcIityLmxlbmd0aCtcIi5cIn0pLGYoclswXT49MSYmclsxXT49MSxmdW5jdGlvbigpe3JldHVyblwiY3JvcFNpemUgbXVzdCBiZSBhdGxlYXN0IFsxLDFdLCBidXQgd2FzIFwiK3J9KSxmKFwiYmlsaW5lYXJcIj09PW98fFwibmVhcmVzdFwiPT09byxmdW5jdGlvbigpe3JldHVyblwibWV0aG9kIG11c3QgYmUgYmlsaW5lYXIgb3IgbmVhcmVzdCwgYnV0IHdhcyBcIitvfSksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQuY3JvcEFuZFJlc2l6ZShpLHMsdSxyLG8sYSl9LHskaW1hZ2U6aSwkYm94ZXM6c30pfX0pLFljPU9iamVjdC5mcmVlemUoe3Jlc2l6ZUJpbGluZWFyOnFjLHJlc2l6ZU5lYXJlc3ROZWlnaGJvcjokYyxub25NYXhTdXBwcmVzc2lvbjpLYyxub25NYXhTdXBwcmVzc2lvbkFzeW5jOmpjLGNyb3BBbmRSZXNpemU6WGN9KTt2YXIgUWM9dm4oe21hdE11bF86ZnVuY3Rpb24odCl7dmFyIGUsbj10LmEscj10LmIsbz10LnRyYW5zcG9zZUEsYT12b2lkIDAhPT1vJiZvLGk9dC50cmFuc3Bvc2VCLHM9dm9pZCAwIT09aSYmaSx1PXQuYmlhcyxsPXQuYWN0aXZhdGlvbixjPXZvaWQgMD09PWw/XCJsaW5lYXJcIjpsLGg9dC5wcmVsdUFjdGl2YXRpb25XZWlnaHRzLHA9bm4obixcImFcIixcImZ1c2VkIG1hdE11bFwiKSxkPW5uKHIsXCJiXCIsXCJmdXNlZCBtYXRNdWxcIik7ZT13dChwLGQpLHA9ZVswXSxkPWVbMV07dmFyIHY9YT9wLnNoYXBlW3AucmFuay0yXTpwLnNoYXBlW3AucmFuay0xXSxtPXM/ZC5zaGFwZVtkLnJhbmstMV06ZC5zaGFwZVtkLnJhbmstMl0seD1hP3Auc2hhcGVbcC5yYW5rLTFdOnAuc2hhcGVbcC5yYW5rLTJdLGI9cz9kLnNoYXBlW2QucmFuay0yXTpkLnNoYXBlW2QucmFuay0xXSx3PXAuc2hhcGUuc2xpY2UoMCwtMiksQz1kLnNoYXBlLnNsaWNlKDAsLTIpLEU9Zyh3KSxSPWcoQyk7ZihwLnJhbms+PTImJmQucmFuaz49MiYmcC5yYW5rPT09ZC5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBtYXRNdWw6IGlucHV0cyBtdXN0IGhhdmUgdGhlIHNhbWUgcmFuayBvZiBhdCBsZWFzdCAyLCBnb3QgcmFua3MgXCIrcC5yYW5rK1wiIGFuZCBcIitkLnJhbmsrXCIuXCJ9KSxmKHkodyxDKSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZnVzZWQgbWF0TXVsOiBvdXRlciBkaW1lbnNpb25zIChcIit3K1wiKSBhbmQgKFwiK0MrXCIpIG9mIFRlbnNvcnMgd2l0aCBzaGFwZXMgXCIrcC5zaGFwZStcIiBhbmQgXCIrZC5zaGFwZStcIiBtdXN0IG1hdGNoLlwifSksZih2PT09bSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZnVzZWQgbWF0TXVsOiBpbm5lciBzaGFwZXMgKFwiK3YrXCIpIGFuZCAoXCIrbStcIikgb2YgVGVuc29ycyB3aXRoIHNoYXBlcyBcIitwLnNoYXBlK1wiIGFuZCBcIitkLnNoYXBlK1wiIGFuZCB0cmFuc3Bvc2VBPVwiK2ErXCIgYW5kIHRyYW5zcG9zZUI9XCIrcytcIiBtdXN0IG1hdGNoLlwifSk7dmFyIEksayxOPXAuc2hhcGUuc2xpY2UoMCwtMikuY29uY2F0KFt4LGJdKSxTPWE/cC5hczNEKEUsdix4KTpwLmFzM0QoRSx4LHYpLEE9cz9kLmFzM0QoUixiLG0pOmQuYXMzRChSLG0sYik7bnVsbCE9dSYmbm8oTiwoST13dChJPW5uKHUsXCJiaWFzXCIsXCJmdXNlZCBtYXRNdWxcIikscClbMF0pLnNoYXBlKSxudWxsIT1oJiYoaz1ubihoLFwicHJlbHUgd2VpZ2h0c1wiLFwiZnVzZWQgbWF0TXVsXCIpKTt2YXIgVD17JGE6UywkYjpBfTtyZXR1cm4gbnVsbCE9dSYmKFQuJGJpYXM9SSksbnVsbCE9aCYmKFQuJHByZWx1QWN0aXZhdGlvbldlaWdodHM9ayksU3QucnVuS2VybmVsKGZ1bmN0aW9uKHQsZSl7dmFyIG49dC5mdXNlZEJhdGNoTWF0TXVsKHthOlMsYjpBLHRyYW5zcG9zZUE6YSx0cmFuc3Bvc2VCOnMsYmlhczpJLGFjdGl2YXRpb246YyxwcmVsdUFjdGl2YXRpb25XZWlnaHRzOmt9KTtyZXR1cm4gZShbUyxBLG5dKSxufSxULGZ1bmN0aW9uKHQsZSl7dmFyIG4scj1lWzBdLG89ZVsxXSxpPWVbMl07aWYobnVsbD09Y3x8XCJsaW5lYXJcIj09PWMpbj10O2Vsc2V7aWYoXCJyZWx1XCIhPT1jKXRocm93IG5ldyBFcnJvcihcIkdyYWRpZW50IGZvciBhY3RpdmF0aW9uIFwiK2MrXCIgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkIHlldC5cIik7bj10Lm11bChpLnN0ZXAoKSl9dmFyIGw9e307cmV0dXJuIG51bGwhPXUmJihsPXskYmlhczpmdW5jdGlvbigpe3ZhciB0PW4sZT1lbyhJLnNoYXBlLG4uc2hhcGUpO3JldHVybiBlLmxlbmd0aD4wJiYodD10LnN1bShlKSksdC5yZXNoYXBlKEkuc2hhcGUpfX0pLGF8fHM/IWEmJnM/T2JqZWN0LmFzc2lnbih7JGE6ZnVuY3Rpb24oKXtyZXR1cm4gbi5tYXRNdWwobywhMSwhMSl9LCRiOmZ1bmN0aW9uKCl7cmV0dXJuIG4ubWF0TXVsKHIsITAsITEpfX0sbCk6YSYmIXM/T2JqZWN0LmFzc2lnbih7JGE6ZnVuY3Rpb24oKXtyZXR1cm4gby5tYXRNdWwobiwhMSwhMCl9LCRiOmZ1bmN0aW9uKCl7cmV0dXJuIHIubWF0TXVsKG4sITEsITEpfX0sbCk6T2JqZWN0LmFzc2lnbih7JGE6ZnVuY3Rpb24oKXtyZXR1cm4gby5tYXRNdWwobiwhMCwhMCl9LCRiOmZ1bmN0aW9uKCl7cmV0dXJuIG4ubWF0TXVsKHIsITAsITApfX0sbCk6T2JqZWN0LmFzc2lnbih7JGE6ZnVuY3Rpb24oKXtyZXR1cm4gbi5tYXRNdWwobywhMSwhMCl9LCRiOmZ1bmN0aW9uKCl7cmV0dXJuIHIubWF0TXVsKG4sITAsITEpfX0sbCl9KS5yZXNoYXBlKE4pfX0pLEpjPXZuKHtjb252MmRfOmZ1bmN0aW9uKHQpe3ZhciBlPXQueCxuPXQuZmlsdGVyLHI9dC5zdHJpZGVzLG89dC5wYWQsYT10LmRhdGFGb3JtYXQsaT12b2lkIDA9PT1hP1wiTkhXQ1wiOmEscz10LmRpbGF0aW9ucyx1PXZvaWQgMD09PXM/WzEsMV06cyxsPXQuZGltUm91bmRpbmdNb2RlLGM9dC5iaWFzLGg9dC5hY3RpdmF0aW9uLHA9dm9pZCAwPT09aD9cImxpbmVhclwiOmgsZD10LnByZWx1QWN0aXZhdGlvbldlaWdodHMsdj1ubihlLFwieFwiLFwiY29udjJkXCIpLG09bm4obixcImZpbHRlclwiLFwiY29udjJkXCIpLGc9dix5PSExOzM9PT12LnJhbmsmJih5PSEwLGc9di5hczREKDEsdi5zaGFwZVswXSx2LnNoYXBlWzFdLHYuc2hhcGVbMl0pKSxmKDQ9PT1nLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGNvbnYyZDogaW5wdXQgbXVzdCBiZSByYW5rIDQsIGJ1dCBnb3QgcmFuayBcIitnLnJhbmsrXCIuXCJ9KSxmKDQ9PT1tLnJhbmssZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGZ1c2VkIGNvbnYyZDogZmlsdGVyIG11c3QgYmUgcmFuayA0LCBidXQgZ290IHJhbmsgXCIrbS5yYW5rK1wiLlwifSksbnVsbCE9bCYmZih4KG8pLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBmdXNlZCBjb252MmQ6IHBhZCBtdXN0IGJlIGFuIGludGVnZXIgd2hlbiB1c2luZywgZGltUm91bmRpbmdNb2RlIFwiK2wrXCIgYnV0IGdvdCBwYWQgXCIrbytcIi5cIn0pLGYoZy5zaGFwZVszXT09PW0uc2hhcGVbMl0sZnVuY3Rpb24oKXtyZXR1cm5cIkVycm9yIGluIGNvbnYyZDogZGVwdGggb2YgaW5wdXQgKFwiK2cuc2hhcGVbM10rXCIpIG11c3QgbWF0Y2ggaW5wdXQgZGVwdGggZm9yIGZpbHRlciBcIittLnNoYXBlWzJdK1wiLlwifSksZihmbyhyLHUpLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MkQ6IEVpdGhlciBzdHJpZGVzIG9yIGRpbGF0aW9ucyBtdXN0IGJlIDEuIEdvdCBzdHJpZGVzIFwiK3IrXCIgYW5kIGRpbGF0aW9ucyAnXCIrdStcIidcIn0pLGYoXCJOSFdDXCI9PT1pLGZ1bmN0aW9uKCl7cmV0dXJuXCJFcnJvciBpbiBjb252MmQ6IGdvdCBkYXRhRm9ybWF0IG9mIFwiK2krXCIgYnV0IG9ubHkgTkhXQyBpcyBjdXJyZW50bHkgc3VwcG9ydGVkLlwifSk7dmFyIGIsdyxDPWFvKGcuc2hhcGUsbS5zaGFwZSxyLHUsbyxsKTtudWxsIT1jJiYoYj13dChiPW5uKGMsXCJiaWFzXCIsXCJmdXNlZCBjb252MmRcIiksdilbMF0sbm8oQy5vdXRTaGFwZSxiLnNoYXBlKSksbnVsbCE9ZCYmKHc9bm4oZCxcInByZWx1IHdlaWdodHNcIixcImZ1c2VkIGNvbnYyZFwiKSk7dmFyIEU9e3g6ZywkZmlsdGVyOm19O251bGwhPWMmJihFLiRiaWFzPWIpLG51bGwhPWQmJihFLiRwcmVsdUFjdGl2YXRpb25XZWlnaHRzPXcpO3ZhciBSPVN0LnJ1bktlcm5lbChmdW5jdGlvbih0LGUpe3ZhciBuPXQuZnVzZWRDb252MmQoZyxtLEMsYixwLHcpO3JldHVybiBlKFttLGcsbl0pLG59LEUsZnVuY3Rpb24odCxlKXt2YXIgbixhPWUsaT1hWzBdLHM9YVsxXSxsPWFbMl07aWYobnVsbD09cHx8XCJsaW5lYXJcIj09PXApbj10O2Vsc2V7aWYoXCJyZWx1XCIhPT1wKXRocm93IG5ldyBFcnJvcihcIkdyYWRpZW50IGZvciBhY3RpdmF0aW9uIFwiK3ArXCIgaGFzIG5vdCBiZWVuIGltcGxlbWVudGVkIHlldC5cIik7bj10Lm11bChsLnN0ZXAoKSl9Zihwbyh1KSxmdW5jdGlvbigpe3JldHVyblwiRXJyb3IgaW4gZ3JhZGllbnQgb2YgZnVzZWQgY29udjJEOiBkaWxhdGlvbiByYXRlcyBncmVhdGVyIHRoYW4gMSBhcmUgbm90IHlldCBzdXBwb3J0ZWQgaW4gZ3JhZGllbnRzLiBHb3QgZGlsYXRpb25zICdcIit1K1wiJ1wifSk7dmFyIGg9e307cmV0dXJuIG51bGwhPWMmJihoPXskYmlhczpmdW5jdGlvbigpe3ZhciB0PW4sZT1lbyhiLnNoYXBlLG4uc2hhcGUpO3JldHVybiBlLmxlbmd0aD4wJiYodD10LnN1bShlKSksdC5yZXNoYXBlKGIuc2hhcGUpfX0pLE9iamVjdC5hc3NpZ24oe3g6ZnVuY3Rpb24oKXtyZXR1cm4gbWwocy5zaGFwZSxuLGkscixvKX0sJGZpbHRlcjpmdW5jdGlvbigpe3JldHVybiB2bChzLG4saS5zaGFwZSxyLG8pfX0saCl9KTtyZXR1cm4geT9SLmFzM0QoUi5zaGFwZVsxXSxSLnNoYXBlWzJdLFIuc2hhcGVbM10pOlJ9fSksWmM9T2JqZWN0LmZyZWV6ZSh7bWF0TXVsOlFjLGNvbnYyZDpKY30pLHRoPU9iamVjdC5mcmVlemUoe2ltYWdlOlljLGxpbmFsZzpHYyxsb3NzZXM6V2Msc3BlY3RyYWw6Z2MsZnVzZWQ6WmMsc2lnbmFsOk5jLG9wOnZuLGJhdGNoTm9ybWFsaXphdGlvbjJkOmN1LGJhdGNoTm9ybWFsaXphdGlvbjNkOmh1LGJhdGNoTm9ybWFsaXphdGlvbjRkOnB1LGJhdGNoTm9ybWFsaXphdGlvbjpmdSxiYXRjaE5vcm06ZHUsYmF0Y2hOb3JtMmQ6dnUsYmF0Y2hOb3JtM2Q6bXUsYmF0Y2hOb3JtNGQ6Z3UsYm9vbGVhbk1hc2tBc3luYzpzbCxjb21wbGV4Om1uLHJlYWw6Z24saW1hZzp5bixjb25jYXQ6TW4sY29uY2F0MWQ6Qm4sY29uY2F0MmQ6UG4sY29uY2F0M2Q6TG4sY29uY2F0NGQ6V24sc3BsaXQ6VW4sY29udjFkOnBsLGNvbnYyZDpmbCxjb252M2Q6ZGwsY29udjJkRGVyRmlsdGVyOnZsLGNvbnYyZERlcklucHV0Om1sLGRlcHRod2lzZUNvbnYyZDpnbCxzZXBhcmFibGVDb252MmQ6eWwsY29udjJkVHJhbnNwb3NlOnhsLGNvbnYzZFRyYW5zcG9zZTpibCxtYXRNdWw6d2wsZG90OkNsLG91dGVyUHJvZHVjdDpFbCxyZXZlcnNlOlJsLHJldmVyc2UxZDpJbCxyZXZlcnNlMmQ6a2wscmV2ZXJzZTNkOk5sLHJldmVyc2U0ZDpTbCxtYXhQb29sOkRsLGF2Z1Bvb2w6X2wscG9vbDpPbCxtYXhQb29sM2Q6RmwsYXZnUG9vbDNkOk1sLHNsaWNlOkJsLHNsaWNlMWQ6UGwsc2xpY2UyZDpMbCxzbGljZTNkOldsLHNsaWNlNGQ6VWwsYWJzOkVzLGFjb3M6UnMsYWNvc2g6SXMsYXNpbjprcyxhc2luaDpOcyxhdGFuOlNzLGF0YW5oOkFzLGNlaWw6VHMsY2xpcEJ5VmFsdWU6RHMsY29zOl9zLGNvc2g6T3MsZXJmOkZzLGV4cDpNcyxleHBtMTpCcyxmbG9vcjpQcyxsb2c6THMsbG9nMXA6V3MsbG9nU2lnbW9pZDpVcyxuZWc6VnMscmVjaXByb2NhbDp6cyxyb3VuZDpHcyxyc3FydDpIcyxzaWdtb2lkOnFzLHNpZ246JHMsaXNOYU46S3MsaXNJbmY6anMsaXNGaW5pdGU6WHMsc2luOllzLHNpbmg6UXMsc29mdHBsdXM6SnMsc3FydDpacyxzcXVhcmU6dHUsc3RlcDpldSx0YW46bnUsdGFuaDpydSxhbGw6emwsYW55OkdsLGFyZ01heDpIbCxhcmdNaW46cWwsbG9nU3VtRXhwOiRsLG1heDpLbCxtZWFuOmpsLG1pbjpYbCxtb21lbnRzOllsLHN1bTpRbCxwcm9kOkpsLGVxdWFsOnF1LGVxdWFsU3RyaWN0OiR1LGdyZWF0ZXI6S3UsZ3JlYXRlckVxdWFsOmp1LGdyZWF0ZXJFcXVhbFN0cmljdDpYdSxncmVhdGVyU3RyaWN0Oll1LGxlc3M6UXUsbGVzc0VxdWFsOkp1LGxlc3NFcXVhbFN0cmljdDpadSxsZXNzU3RyaWN0OnRsLG5vdEVxdWFsOmVsLG5vdEVxdWFsU3RyaWN0Om5sLGFkZDpSdSxhZGROOkl1LGFkZFN0cmljdDprdSxhdGFuMjpOdSxkaXY6U3UsZGl2U3RyaWN0OkF1LGZsb29yRGl2OlR1LG1heGltdW06RHUsbWF4aW11bVN0cmljdDpfdSxtaW5pbXVtOk91LG1pbmltdW1TdHJpY3Q6RnUsbW9kOk11LG1vZFN0cmljdDpCdSxtdWw6UHUsbXVsU3RyaWN0Okx1LHBvdzpXdSxwb3dTdHJpY3Q6VXUsc3F1YXJlZERpZmZlcmVuY2U6VnUsc3F1YXJlZERpZmZlcmVuY2VTdHJpY3Q6enUsc3ViOkd1LHN1YlN0cmljdDpIdSxlbHU6WmwsbGVha3lSZWx1OnRjLHByZWx1OmVjLHJlbHU6bmMsc2VsdTpyYyxsb2dpY2FsQW5kOnl1LGxvZ2ljYWxOb3Q6eHUsbG9naWNhbE9yOmJ1LGxvZ2ljYWxYb3I6d3Usd2hlcmU6Q3Usd2hlcmVBc3luYzpFdSxidWZmZXI6Wm4scHJpbnQ6dHIsYmF0Y2hUb1NwYWNlTkQ6ZXIsY2FzdDpucixjbG9uZTpycixjdW1zdW06b3IsZGVwdGhUb1NwYWNlOmFyLGV4cGFuZERpbXM6aXIsZXllOnNyLG11bHRpbm9taWFsOnVyLG9uZUhvdDpscixwYWQ6Y3IscGFkMWQ6aHIscGFkMmQ6cHIscGFkM2Q6ZnIscGFkNGQ6ZHIscmFuZDp2cixyYW5kb21Ob3JtYWw6bXIscmFuZG9tR2FtbWE6Z3IscmFuZG9tVW5pZm9ybTp5cixyZXNoYXBlOnhyLHNwYWNlVG9CYXRjaE5EOmJyLHNxdWVlemU6d3Isc3RhY2s6Q3IsdGlsZTpFcix0cnVuY2F0ZWROb3JtYWw6UnIsdW5zdGFjazpJcixzZXRkaWZmMWRBc3luYzprcixmaWxsOlRuLGxpbnNwYWNlOkRuLG9uZXM6U24scmFuZ2U6X24sc2NhbGFyOnduLHRlbnNvcjp4bix0ZW5zb3IxZDpDbix0ZW5zb3IyZDpFbix0ZW5zb3IzZDpSbix0ZW5zb3I0ZDpJbix0ZW5zb3I1ZDprbix0ZW5zb3I2ZDpObix6ZXJvczpBbixvbmVzTGlrZTpPbix6ZXJvc0xpa2U6Rm4sdHJhbnNwb3NlOm9jLHNvZnRtYXg6WXIsbG9nU29mdG1heDpRcixsb2NhbFJlc3BvbnNlTm9ybWFsaXphdGlvbjphYyxub3JtOmljLGdhdGhlcjphbCx1bnNvcnRlZFNlZ21lbnRTdW06aWwsYmFzaWNMU1RNQ2VsbDpzYyxtdWx0aVJOTkNlbGw6dWMsbW92aW5nQXZlcmFnZTpsYyxzdHJpZGVkU2xpY2U6Y2MsdG9wazpoYyxzY2F0dGVyTkQ6cGMsZmZ0OmZjLGlmZnQ6ZGMscmZmdDp2YyxpcmZmdDptYyxzcGFyc2VUb0RlbnNlOnljLGdhdGhlck5EOnhjLGRpYWc6YmMsZHJvcG91dDp3YyxoYW5uV2luZG93OkVjLGhhbW1pbmdXaW5kb3c6UmMsZnJhbWU6SWMsc3RmdDprYyxpblRvcEtBc3luYzpBY30pO2Z1bmN0aW9uIGVoKHQsZSxuLHIpe2lmKFwibGluZWFyXCI9PT1uKXJldHVybiB0LmxpbmVhcihlKTtpZihcInJlbHVcIj09PW4pcmV0dXJuIHQucmVsdShlKTtpZihcImVsdVwiPT09bilyZXR1cm4gdC5lbHUoZSk7aWYoXCJwcmVsdVwiPT09bilyZXR1cm4gdC5wcmVsdShlLHIpO3Rocm93IG5ldyBFcnJvcihcIkFjdGl2YXRpb24gXCIrbitcIiBoYXMgbm90IGJlZW4gaW1wbGVtZW50ZWQgZm9yIHRoZSBDUFUgYmFja2VuZC5cIil9dmFyIG5oPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe2lmKHRoaXMuYmxvY2tTaXplPTQ4LHRoaXMuZmlyc3RVc2U9ITAsaS5nZXQoXCJJU19CUk9XU0VSXCIpKXt2YXIgdD1cInVuZGVmaW5lZFwiIT10eXBlb2YgT2Zmc2NyZWVuQ2FudmFzP25ldyBPZmZzY3JlZW5DYW52YXMoMzAwLDE1MCk6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJjYW52YXNcIik6bnVsbDtudWxsIT09dCYmKHRoaXMuZnJvbVBpeGVsczJEQ29udGV4dD10LmdldENvbnRleHQoXCIyZFwiKSl9dGhpcy5kYXRhPW5ldyBKcih0aGlzLFN0KX1yZXR1cm4gdC5wcm90b3R5cGUucmVnaXN0ZXI9ZnVuY3Rpb24odCxlLG4pe2lmKHRoaXMuZmlyc3RVc2UmJih0aGlzLmZpcnN0VXNlPSExLGkuZ2V0KFwiSVNfTk9ERVwiKSYmWmUoXCJcXG49PT09PT09PT09PT09PT09PT09PT09PT09PT09XFxuSGkgdGhlcmUg8J+Riy4gTG9va3MgbGlrZSB5b3UgYXJlIHJ1bm5pbmcgVGVuc29yRmxvdy5qcyBpbiBOb2RlLmpzLiBUbyBzcGVlZCB0aGluZ3MgdXAgZHJhbWF0aWNhbGx5LCBpbnN0YWxsIG91ciBub2RlIGJhY2tlbmQsIHdoaWNoIGJpbmRzIHRvIFRlbnNvckZsb3cgQysrLCBieSBydW5uaW5nIG5wbSBpIEB0ZW5zb3JmbG93L3RmanMtbm9kZSwgb3IgbnBtIGkgQHRlbnNvcmZsb3cvdGZqcy1ub2RlLWdwdSBpZiB5b3UgaGF2ZSBDVURBLiBUaGVuIGNhbGwgcmVxdWlyZSgnQHRlbnNvcmZsb3cvdGZqcy1ub2RlJyk7ICgtZ3B1IHN1ZmZpeCBmb3IgQ1VEQSkgYXQgdGhlIHN0YXJ0IG9mIHlvdXIgcHJvZ3JhbS4gVmlzaXQgaHR0cHM6Ly9naXRodWIuY29tL3RlbnNvcmZsb3cvdGZqcy1ub2RlIGZvciBtb3JlIGRldGFpbHMuXFxuPT09PT09PT09PT09PT09PT09PT09PT09PT09PVxcblwiKSksdGhpcy5kYXRhLmhhcyh0KSl0aHJvdyBuZXcgRXJyb3IoXCJEYXRhIGJ1ZmZlciBpcyBhbHJlYWR5IHJlZ2lzdGVyZWRcIik7dGhpcy5kYXRhLnNldCh0LHtkdHlwZTpufSl9LHQucHJvdG90eXBlLndyaXRlPWZ1bmN0aW9uKHQsZSl7aWYobnVsbD09ZSl0aHJvdyBuZXcgRXJyb3IoXCJNYXRoQmFja2VuZENQVS53cml0ZSgpOiB2YWx1ZXMgY2FuIG5vdCBiZSBudWxsXCIpO3RoaXMuZGF0YS5nZXQodCkudmFsdWVzPWV9LHQucHJvdG90eXBlLmZyb21QaXhlbHM9ZnVuY3Rpb24odCxlKXtpZihudWxsPT10KXRocm93IG5ldyBFcnJvcihcInBpeGVscyBwYXNzZWQgdG8gdGYuYnJvd3Nlci5mcm9tUGl4ZWxzKCkgY2FuIG5vdCBiZSBudWxsXCIpO3ZhciBuLHIsbz10LmRhdGEgaW5zdGFuY2VvZiBVaW50OEFycmF5LGE9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEltYWdlRGF0YSYmdCBpbnN0YW5jZW9mIEltYWdlRGF0YSxzPVwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MVmlkZW9FbGVtZW50JiZ0IGluc3RhbmNlb2YgSFRNTFZpZGVvRWxlbWVudCx1PVwidW5kZWZpbmVkXCIhPXR5cGVvZiBIVE1MSW1hZ2VFbGVtZW50JiZ0IGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCxsPXM/W3QudmlkZW9XaWR0aCx0LnZpZGVvSGVpZ2h0XTpbdC53aWR0aCx0LmhlaWdodF0sYz1sWzBdLGg9bFsxXTtpZihpLmdldChcIklTX05PREVcIikmJm51bGw9PXQuZ2V0Q29udGV4dCl0aHJvdyBuZXcgRXJyb3IoXCJXaGVuIHJ1bm5pbmcgaW4gbm9kZSwgcGl4ZWxzIG11c3QgYmUgYW4gSFRNTENhbnZhc0VsZW1lbnQgbGlrZSB0aGUgb25lIHJldHVybmVkIGJ5IHRoZSBgY2FudmFzYCBucG0gcGFja2FnZVwiKTtpZihudWxsIT10LmdldENvbnRleHQpbj10LmdldENvbnRleHQoXCIyZFwiKS5nZXRJbWFnZURhdGEoMCwwLGMsaCkuZGF0YTtlbHNlIGlmKGF8fG8pbj10LmRhdGE7ZWxzZXtpZighdSYmIXMpdGhyb3cgbmV3IEVycm9yKFwicGl4ZWxzIHBhc3NlZCB0byB0Zi5icm93c2VyLmZyb21QaXhlbHMoKSBtdXN0IGJlIGVpdGhlciBhbiBIVE1MVmlkZW9FbGVtZW50LCBIVE1MSW1hZ2VFbGVtZW50LCBIVE1MQ2FudmFzRWxlbWVudCwgSW1hZ2VEYXRhIG9yIHtkYXRhOiBVaW50MzJBcnJheSwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXJ9LCBidXQgd2FzIFwiK3QuY29uc3RydWN0b3IubmFtZSk7aWYobnVsbD09dGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0KXRocm93IG5ldyBFcnJvcihcIkNhbid0IHJlYWQgcGl4ZWxzIGZyb20gSFRNTEltYWdlRWxlbWVudCBvdXRzaWRlIHRoZSBicm93c2VyLlwiKTt0aGlzLmZyb21QaXhlbHMyRENvbnRleHQuY2FudmFzLndpZHRoPWMsdGhpcy5mcm9tUGl4ZWxzMkRDb250ZXh0LmNhbnZhcy5oZWlnaHQ9aCx0aGlzLmZyb21QaXhlbHMyRENvbnRleHQuZHJhd0ltYWdlKHQsMCwwLGMsaCksbj10aGlzLmZyb21QaXhlbHMyRENvbnRleHQuZ2V0SW1hZ2VEYXRhKDAsMCxjLGgpLmRhdGF9aWYoND09PWUpcj1uZXcgSW50MzJBcnJheShuKTtlbHNle3ZhciBwPWMqaDtyPW5ldyBJbnQzMkFycmF5KHAqZSk7Zm9yKHZhciBmPTA7ZjxwO2YrKylmb3IodmFyIGQ9MDtkPGU7KytkKXJbZiplK2RdPW5bNCpmK2RdfXJldHVybiBSbihyLFtoLGMsZV0sXCJpbnQzMlwiKX0sdC5wcm90b3R5cGUucmVhZD1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe3JldHVyblsyLHRoaXMucmVhZFN5bmModCldfSl9KX0sdC5wcm90b3R5cGUucmVhZFN5bmM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5kYXRhLmdldCh0KSxuPWUuZHR5cGUscj1lLmNvbXBsZXhUZW5zb3JzO3JldHVyblwiY29tcGxleDY0XCI9PT1uP2JvKHRoaXMucmVhZFN5bmMoci5yZWFsLmRhdGFJZCksdGhpcy5yZWFkU3luYyhyLmltYWcuZGF0YUlkKSk6dGhpcy5kYXRhLmdldCh0KS52YWx1ZXN9LHQucHJvdG90eXBlLmJ1ZmZlclN5bmM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1lO2lmKFwic3RyaW5nXCI9PT10LmR0eXBlKXRyeXtuPWUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBYKHQpfSl9Y2F0Y2godCl7dGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIGRlY29kZSBlbmNvZGVkIHN0cmluZyBieXRlcyBpbnRvIHV0Zi04XCIpfXJldHVybiBabih0LnNoYXBlLHQuZHR5cGUsbil9LHQucHJvdG90eXBlLmRpc3Bvc2VEYXRhPWZ1bmN0aW9uKHQpe2lmKHRoaXMuZGF0YS5oYXModCkpe3ZhciBlPXRoaXMuZGF0YS5nZXQodCkuY29tcGxleFRlbnNvcnM7bnVsbCE9ZSYmKGUucmVhbC5kaXNwb3NlKCksZS5pbWFnLmRpc3Bvc2UoKSksdGhpcy5kYXRhLmRlbGV0ZSh0KX19LHQucHJvdG90eXBlLnRpbWU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihuKXtyZXR1cm4gZT0kKCksdCgpLFsyLHtrZXJuZWxNczokKCktZX1dfSl9KX0sdC5wcm90b3R5cGUubWVtb3J5PWZ1bmN0aW9uKCl7cmV0dXJue3VucmVsaWFibGU6ITAscmVhc29uczpbXCJUaGUgcmVwb3J0ZWQgbWVtb3J5IGlzIGFuIHVwcGVyIGJvdW5kLiBEdWUgdG8gYXV0b21hdGljIGdhcmJhZ2UgY29sbGVjdGlvbiwgdGhlIHRydWUgYWxsb2NhdGVkIG1lbW9yeSBtYXkgYmUgbGVzcy5cIl19fSx0LnByb3RvdHlwZS5jb21wbGV4PWZ1bmN0aW9uKHQsZSl7dmFyIG49Y3QubWFrZSh0LnNoYXBlLHt9LFwiY29tcGxleDY0XCIpO3JldHVybiB0aGlzLmRhdGEuZ2V0KG4uZGF0YUlkKS5jb21wbGV4VGVuc29ycz17cmVhbDpTdC5rZWVwKHQuY2xvbmUoKSksaW1hZzpTdC5rZWVwKGUuY2xvbmUoKSl9LG59LHQucHJvdG90eXBlLnJlYWw9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZGF0YS5nZXQodC5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzLnJlYWwuY2xvbmUoKX0sdC5wcm90b3R5cGUuaW1hZz1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5kYXRhLmdldCh0LmRhdGFJZCkuY29tcGxleFRlbnNvcnMuaW1hZy5jbG9uZSgpfSx0LnByb3RvdHlwZS5hc3NlcnROb3RDb21wbGV4PWZ1bmN0aW9uKHQsZSl7QXJyYXkuaXNBcnJheSh0KXx8KHQ9W3RdKSx0LmZvckVhY2goZnVuY3Rpb24odCl7bnVsbCE9dCYmZihcImNvbXBsZXg2NFwiIT09dC5kdHlwZSxmdW5jdGlvbigpe3JldHVybiBlK1wiIGRvZXMgbm90IHN1cHBvcnQgY29tcGxleDY0IHRlbnNvcnMuXCJ9KX0pfSx0LnByb3RvdHlwZS5zbGljZT1mdW5jdGlvbih0LGUsbil7aWYodGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJzbGljZVwiKSxWcih0LnNoYXBlLGUsbikpe3ZhciByPXpyKGUsdC5zdHJpZGVzKSxvPWcobik7cmV0dXJuIHhuKHRoaXMucmVhZFN5bmModC5kYXRhSWQpLnN1YmFycmF5KHIscitvKSxuLHQuZHR5cGUpfWZvcih2YXIgYT1abihuLHQuZHR5cGUpLGk9dGhpcy5idWZmZXJTeW5jKHQpLHM9MDtzPGEuc2l6ZTsrK3Mpe3ZhciB1PWEuaW5kZXhUb0xvYyhzKS5tYXAoZnVuY3Rpb24odCxuKXtyZXR1cm4gdCtlW25dfSk7YS52YWx1ZXNbc109aS5nZXQuYXBwbHkoaSx1KX1yZXR1cm4gYS50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5zdHJpZGVkU2xpY2U9ZnVuY3Rpb24odCxlLG4scil7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJzdHJpZGVkU2xpY2VcIik7dmFyIG89THIoZSxuLHIpO2lmKG8uc29tZShmdW5jdGlvbih0KXtyZXR1cm4gMD09PXR9KSlyZXR1cm4geG4oW10sbyk7Zm9yKHZhciBhPVpuKG8sdC5kdHlwZSksaT10aGlzLmJ1ZmZlclN5bmModCkscz0wO3M8YS5zaXplO3MrKyl7Zm9yKHZhciB1PWEuaW5kZXhUb0xvYyhzKSxsPW5ldyBBcnJheSh1Lmxlbmd0aCksYz0wO2M8bC5sZW5ndGg7YysrKWxbY109dVtjXSpyW2NdK2VbY107YS5zZXQuYXBwbHkoYSxbaS5nZXQuYXBwbHkoaSxsKV0uY29uY2F0KHUpKX1yZXR1cm4gYS50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5kaWFnPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPVpuKFt0LnNpemUsdC5zaXplXSx0LmR0eXBlKSxyPW4udmFsdWVzLG89MDtvPGUubGVuZ3RoO28rKylyW28qdC5zaXplK29dPWVbb107cmV0dXJuIG4udG9UZW5zb3IoKX0sdC5wcm90b3R5cGUudW5zdGFjaz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj10LnNoYXBlW2VdLHI9bmV3IEFycmF5KHQucmFuay0xKSxvPTAsYT0wO2E8dC5yYW5rO2ErKylhIT09ZSYmKHJbbysrXT10LnNoYXBlW2FdKTt2YXIgaT1uZXcgQXJyYXkodC5yYW5rKS5maWxsKDApLHM9dC5zaGFwZS5zbGljZSgpO3NbZV09MTt2YXIgdT1uZXcgQXJyYXkobik7Zm9yKGE9MDthPHUubGVuZ3RoO2ErKylpW2VdPWEsdVthXT10aGlzLnNsaWNlKHQsaSxzKS5yZXNoYXBlKHIpO3JldHVybiB1fSx0LnByb3RvdHlwZS5yZXZlcnNlPWZ1bmN0aW9uKHQsZSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJyZXZlcnNlXCIpO2Zvcih2YXIgbj1abih0LnNoYXBlLHQuZHR5cGUpLHI9dGhpcy5idWZmZXJTeW5jKHQpLG89ZnVuY3Rpb24obyl7dmFyIGE9bi5pbmRleFRvTG9jKG8pLGk9YS5zbGljZSgpO2UuZm9yRWFjaChmdW5jdGlvbihlKXtyZXR1cm4gaVtlXT10LnNoYXBlW2VdLTEtaVtlXX0pLG4uc2V0LmFwcGx5KG4sW3IuZ2V0LmFwcGx5KHIsaSldLmNvbmNhdChhKSl9LGE9MDthPG4uc2l6ZTthKyspbyhhKTtyZXR1cm4gbi50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5jb25jYXQ9ZnVuY3Rpb24odCxlKXt2YXIgbj10aGlzO2lmKFwiY29tcGxleDY0XCI9PT10WzBdLmR0eXBlKXt2YXIgcj10Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZ24odCl9KSxvPXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB5bih0KX0pO3JldHVybiBtbih0aGlzLmNvbmNhdChyLGUpLHRoaXMuY29uY2F0KG8sZSkpfXZhciBhPXQubWFwKGZ1bmN0aW9uKHQpe3ZhciBuPWcodC5zaGFwZS5zbGljZShlKSk7cmV0dXJuIHQuYXMyRCgtMSxuKX0pLGk9ZG4oYS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQuc2hhcGV9KSwxKSxzPVpuKGksdFswXS5kdHlwZSkudmFsdWVzO2lmKDE9PT1hWzBdLnNoYXBlWzBdKXt2YXIgdT0wO2EuZm9yRWFjaChmdW5jdGlvbih0KXtzLnNldChuLnJlYWRTeW5jKHQuZGF0YUlkKSx1KSx1Kz10LnNpemV9KX1lbHNle3ZhciBsPTA7YS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTAsbz0wO288dC5zaGFwZVswXTsrK28pZm9yKHZhciBhPW8qaVsxXStsLHU9MDt1PHQuc2hhcGVbMV07Kyt1KXNbYSt1XT1lW3IrK107bCs9dC5zaGFwZVsxXX0pfXZhciBjPWRuKHQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnNoYXBlfSksZSk7cmV0dXJuIHhuKHMsYyx0WzBdLmR0eXBlKX0sdC5wcm90b3R5cGUubmVnPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcIm5lZ1wiKSx0aGlzLm11bHRpcGx5KHduKC0xKSx0KX0sdC5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuXCJjb21wbGV4NjRcIj09PXQuZHR5cGV8fFwiY29tcGxleDY0XCI9PT1lLmR0eXBlP3RoaXMuYnJvYWRjYXN0ZWRCaW5hcnlDb21wbGV4T3AodC5jYXN0KFwiY29tcGxleDY0XCIpLGUuY2FzdChcImNvbXBsZXg2NFwiKSxmdW5jdGlvbih0LGUsbixyKXtyZXR1cm57cmVhbDp0K24saW1hZzplK3J9fSk6dGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx4dCh0LmR0eXBlLGUuZHR5cGUpLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQrZX0pfSx0LnByb3RvdHlwZS5hZGROPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXM7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJhZGROXCIpO2Zvcih2YXIgbj10Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gZS5yZWFkU3luYyh0LmRhdGFJZCl9KSxyPVpuKHRbMF0uc2hhcGUsdFswXS5kdHlwZSksbz1yLnZhbHVlcyxhPTA7YTx0Lmxlbmd0aDthKyspZm9yKHZhciBpPW5bYV0scz0wO3M8by5sZW5ndGg7cysrKW9bc10rPWlbc107cmV0dXJuIHIudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUuc3VidHJhY3Q9ZnVuY3Rpb24odCxlKXtyZXR1cm5cImNvbXBsZXg2NFwiPT09dC5kdHlwZXx8XCJjb21wbGV4NjRcIj09PWUuZHR5cGU/dGhpcy5icm9hZGNhc3RlZEJpbmFyeUNvbXBsZXhPcCh0LmNhc3QoXCJjb21wbGV4NjRcIiksZS5jYXN0KFwiY29tcGxleDY0XCIpLGZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybntyZWFsOnQtbixpbWFnOmUtcn19KTp0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHh0KHQuZHR5cGUsZS5kdHlwZSksZnVuY3Rpb24odCxlKXtyZXR1cm4gdC1lfSl9LHQucHJvdG90eXBlLnBvdz1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJwb3dcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx0LmR0eXBlLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1hdGgucG93KHQsZSl9KX0sdC5wcm90b3R5cGUuYmF0Y2hNYXRNdWw9ZnVuY3Rpb24odCxlLG4scil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwibWF0TXVsXCIpO2Zvcih2YXIgbz1uP3Quc2hhcGVbMV06dC5zaGFwZVsyXSxhPW4/dC5zaGFwZVsyXTp0LnNoYXBlWzFdLGk9cj9lLnNoYXBlWzFdOmUuc2hhcGVbMl0scz10LnNoYXBlWzBdLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbD10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxjPW4/W3Quc3RyaWRlc1swXSwxLHQuc3RyaWRlc1sxXV06W3Quc3RyaWRlc1swXSx0LnN0cmlkZXNbMV0sMV0saD1jWzBdLHA9Y1sxXSxmPWNbMl0sZD1yP1sxLGUuc3RyaWRlc1sxXSxlLnN0cmlkZXNbMF1dOltlLnN0cmlkZXNbMV0sMSxlLnN0cmlkZXNbMF1dLHY9ZFswXSxtPWRbMV0sZz1kWzJdLHk9YSppLHg9Wm4oW3MsYSxpXSx0LmR0eXBlKSxiPXgudmFsdWVzLHc9dGhpcy5ibG9ja1NpemUsQz0wO0M8cztDKyspZm9yKHZhciBFPTA7RTxhO0UrPXcpZm9yKHZhciBSPTA7UjxpO1IrPXcpZm9yKHZhciBJPTA7STxvO0krPXcpZm9yKHZhciBrPU1hdGgubWluKEUrdyxhKSxOPU1hdGgubWluKFIrdyxpKSxTPU1hdGgubWluKEkrdyxvKSxBPUU7QTxrO0ErKylmb3IodmFyIFQ9UjtUPE47VCsrKXtmb3IodmFyIEQ9MCxfPUk7XzxTO18rKylEKz11W0MqaCtBKnArXypmXSpsW18qditUKm0rQypnXTtiW0MqeSsoQSppK1QpXSs9RH1yZXR1cm4geC50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5mdXNlZEJhdGNoTWF0TXVsPWZ1bmN0aW9uKHQpe3ZhciBlPXQuYSxuPXQuYixyPXQudHJhbnNwb3NlQSxvPXQudHJhbnNwb3NlQixhPXQuYmlhcyxpPXQuYWN0aXZhdGlvbixzPXQucHJlbHVBY3RpdmF0aW9uV2VpZ2h0cyx1PXRoaXMuYmF0Y2hNYXRNdWwoZSxuLHIsbyk7cmV0dXJuIGEmJih1PXRoaXMuYWRkKHUsYSkpLGkmJih1PWVoKHRoaXMsdSxpLHMpKSx1fSx0LnByb3RvdHlwZS5tdWx0aXBseT1mdW5jdGlvbih0LGUpe3JldHVyblwiY29tcGxleDY0XCI9PT10LmR0eXBlfHxcImNvbXBsZXg2NFwiPT09ZS5kdHlwZT90aGlzLmJyb2FkY2FzdGVkQmluYXJ5Q29tcGxleE9wKHQuY2FzdChcImNvbXBsZXg2NFwiKSxlLmNhc3QoXCJjb21wbGV4NjRcIiksZnVuY3Rpb24odCxlLG4scil7cmV0dXJue3JlYWw6dCpuLWUqcixpbWFnOnQqcitlKm59fSk6dGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx4dCh0LmR0eXBlLGUuZHR5cGUpLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQqZX0pfSx0LnByb3RvdHlwZS5yZWFsRGl2aWRlPWZ1bmN0aW9uKHQsZSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwicmVhbERpdmlkZVwiKTtyZXR1cm4gdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImZsb2F0MzJcIixmdW5jdGlvbih0LGUpe3JldHVybiB0L2V9KX0sdC5wcm90b3R5cGUuZmxvb3JEaXY9ZnVuY3Rpb24odCxlKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJmbG9vckRpdlwiKTtyZXR1cm4gdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImludDMyXCIsZnVuY3Rpb24odCxlKXtyZXR1cm4gTWF0aC5mbG9vcih0L2UpfSl9LHQucHJvdG90eXBlLnN1bT1mdW5jdGlvbih0LGUpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwic3VtXCIpLGxuKFwic3VtXCIsZSx0LnJhbmspO2Zvcih2YXIgbj1zbih0LnNoYXBlLGUpLHI9blswXSxvPW5bMV0sYT1BbihyLHh0KHQuZHR5cGUsXCJpbnQzMlwiKSksaT1nKG8pLHM9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCksdT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxsPTA7bDxzLmxlbmd0aDsrK2wpe2Zvcih2YXIgYz1sKmksaD0wLHA9MDtwPGk7KytwKWgrPXVbYytwXTtzW2xdPWh9cmV0dXJuIGF9LHQucHJvdG90eXBlLnByb2Q9ZnVuY3Rpb24odCxlKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInN1bVwiKTtmb3IodmFyIG49c24odC5zaGFwZSxlKSxyPW5bMF0sbz1uWzFdLGE9QW4ocix4dCh0LmR0eXBlLFwiaW50MzJcIikpLGk9ZyhvKSxzPXRoaXMucmVhZFN5bmMoYS5kYXRhSWQpLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbD0wO2w8cy5sZW5ndGg7KytsKXtmb3IodmFyIGM9bCppLGg9MSxwPTA7cDxpOysrcCloKj11W2MrcF07c1tsXT1ofXJldHVybiBhfSx0LnByb3RvdHlwZS51bnNvcnRlZFNlZ21lbnRTdW09ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwidW5zb3J0ZWRTZWdtZW50U3VtXCIpO2Zvcih2YXIgcj1bXSxvPXQucmFuay1lLnJhbmssYT0wO2E8bzsrK2EpZT1lLmV4cGFuZERpbXMoYSsxKTtmb3IoYT0wO2E8bjsrK2Epe3ZhciBpPXduKGEsXCJpbnQzMlwiKSxzPXF1KGksZSkuYXNUeXBlKFwiZmxvYXQzMlwiKS5tdWwodCkuc3VtKDApO3IucHVzaChzKX1yZXR1cm4gQ3Iocil9LHQucHJvdG90eXBlLmFyZ01pbj1mdW5jdGlvbih0LGUpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiYXJnTWluXCIpO3ZhciBuPVtlXTtsbihcImFyZ01pblwiLG4sdC5yYW5rKTtmb3IodmFyIHI9c24odC5zaGFwZSxuKSxvPXJbMF0sYT1yWzFdLGk9QW4obyxcImludDMyXCIpLHM9ZyhhKSx1PXRoaXMucmVhZFN5bmMoaS5kYXRhSWQpLGw9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksYz0wO2M8dS5sZW5ndGg7KytjKXtmb3IodmFyIGg9YypzLHA9bFtoXSxmPTAsZD0wO2Q8czsrK2Qpe3ZhciB2PWxbaCtkXTt2PHAmJihwPXYsZj1kKX11W2NdPWZ9cmV0dXJuIGl9LHQucHJvdG90eXBlLmFyZ01heD1mdW5jdGlvbih0LGUpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiYXJnTWF4XCIpO3ZhciBuPVtlXTtsbihcImFyZ01heFwiLG4sdC5yYW5rKTtmb3IodmFyIHI9c24odC5zaGFwZSxuKSxvPXJbMF0sYT1yWzFdLGk9QW4obyxcImludDMyXCIpLHM9ZyhhKSx1PXRoaXMucmVhZFN5bmMoaS5kYXRhSWQpLGw9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksYz0wO2M8dS5sZW5ndGg7KytjKXtmb3IodmFyIGg9YypzLHA9bFtoXSxmPTAsZD0wO2Q8czsrK2Qpe3ZhciB2PWxbaCtkXTt2PnAmJihwPXYsZj1kKX11W2NdPWZ9cmV0dXJuIGl9LHQucHJvdG90eXBlLmN1bXN1bT1mdW5jdGlvbih0LGUsbixyKXtpZih0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImN1bXN1bVwiKSxlIT09dC5yYW5rLTEpdGhyb3cgbmV3IEVycm9yKFwiYmFja2VuZC5jdW1zdW0gaW4gQ1BVIGV4cGVjdHMgYW4gaW5uZXItbW9zdCBheGlzPVwiKyh0LnJhbmstMSkrXCIgYnV0IGdvdCBheGlzPVwiK2UpO2Zvcih2YXIgbz14dCh0LmR0eXBlLFwiaW50MzJcIiksYT1Bbih0LnNoYXBlLG8pLGk9dGhpcy5yZWFkU3luYyhhLmRhdGFJZCkscz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSx1PXQuc2hhcGVbdC5yYW5rLTFdLGw9cj9mdW5jdGlvbih0LGUpe3JldHVybiB0K3UtZS0xfTpmdW5jdGlvbih0LGUpe3JldHVybiB0K2V9LGM9MDtjPHMubGVuZ3RoO2MrPXUpZm9yKHZhciBoPTA7aDx1O2grKyl7dmFyIHA9bChjLGgpO2lmKDA9PT1oKWlbcF09bj8wOnNbcF07ZWxzZXt2YXIgZj1sKGMsaC0xKTtpW3BdPW4/c1tmXStpW2ZdOnNbcF0raVtmXX19cmV0dXJuIGF9LHQucHJvdG90eXBlLmVxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImVxdWFsXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsZnVuY3Rpb24odCxlKXtyZXR1cm4gdD09PWU/MTowfSl9LHQucHJvdG90eXBlLm5vdEVxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcIm5vdEVxdWFsXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsXCJib29sXCIsZnVuY3Rpb24odCxlKXtyZXR1cm4gdCE9PWU/MTowfSl9LHQucHJvdG90eXBlLmxlc3M9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwibGVzc1wiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLFwiYm9vbFwiLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ8ZT8xOjB9KX0sdC5wcm90b3R5cGUubGVzc0VxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImxlc3NFcXVhbFwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLFwiYm9vbFwiLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ8PWU/MTowfSl9LHQucHJvdG90eXBlLmdyZWF0ZXI9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiZ3JlYXRlclwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLFwiYm9vbFwiLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ+ZT8xOjB9KX0sdC5wcm90b3R5cGUuZ3JlYXRlckVxdWFsPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImdyZWF0ZXJFcXVhbFwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLFwiYm9vbFwiLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ+PWU/MTowfSl9LHQucHJvdG90eXBlLmxvZ2ljYWxOb3Q9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJsb2dpY2FsTm90XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpbltyXT1lW3JdPzA6MTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0sXCJib29sXCIpfSx0LnByb3RvdHlwZS5sb2dpY2FsQW5kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImxvZ2ljYWxBbmRcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIixmdW5jdGlvbih0LGUpe3JldHVybiB0JiZlfSl9LHQucHJvdG90eXBlLmxvZ2ljYWxPcj1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJsb2dpY2FsT3JcIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSxcImJvb2xcIixmdW5jdGlvbih0LGUpe3JldHVybiB0fHxlfSl9LHQucHJvdG90eXBlLnNlbGVjdD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGUsbl0sXCJzZWxlY3RcIik7Zm9yKHZhciByPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG89dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksYT10aGlzLnJlYWRTeW5jKG4uZGF0YUlkKSxpPUFuKGUuc2hhcGUseHQoZS5kdHlwZSxuLmR0eXBlKSkscz10aGlzLnJlYWRTeW5jKGkuZGF0YUlkKSx1PTAsbD0wPT09dC5yYW5rfHx0LnJhbms+MXx8MT09PWUucmFuaz8xOmUuc2hhcGVbMV0sYz0wO2M8ci5sZW5ndGg7YysrKWZvcih2YXIgaD0wO2g8bDtoKyspMT09PXJbY10/c1t1KytdPW9bY106c1t1KytdPWFbY107cmV0dXJuIGl9LHQucHJvdG90eXBlLndoZXJlPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdF0sXCJ3aGVyZVwiKTt2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKTtyZXR1cm4gQW8odC5zaGFwZSxlKX0sdC5wcm90b3R5cGUudG9waz1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwidG9wa1wiKSxTbyh0aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSx0LnNoYXBlLHQuZHR5cGUsZSl9LHQucHJvdG90eXBlLm1pbj1mdW5jdGlvbih0LGUpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwibWluXCIpLGxuKFwibWluXCIsZSx0LnJhbmspO2Zvcih2YXIgbj1zbih0LnNoYXBlLGUpLHI9blswXSxvPW5bMV0sYT1BbihyLHQuZHR5cGUpLGk9ZyhvKSxzPXRoaXMucmVhZFN5bmMoYS5kYXRhSWQpLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbD0wO2w8cy5sZW5ndGg7KytsKXtmb3IodmFyIGM9bCppLGg9dVtjXSxwPTA7cDxpOysrcCl7dmFyIGY9dVtjK3BdO2Y8aCYmKGg9Zil9c1tsXT1ofXJldHVybiBhfSx0LnByb3RvdHlwZS5taW5pbXVtPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcIm1pbmltdW1cIiksdGhpcy5icm9hZGNhc3RlZEJpbmFyeU9wKHQsZSx0LmR0eXBlLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIE1hdGgubWluKHQsZSl9KX0sdC5wcm90b3R5cGUubW9kPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcIm1vZFwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHQuZHR5cGUsZnVuY3Rpb24odCxlKXt2YXIgbj10JWU7cmV0dXJuIHQ8MCYmZTwwfHx0Pj0wJiZlPj0wP246KG4rZSklZX0pfSx0LnByb3RvdHlwZS5tYXg9ZnVuY3Rpb24odCxlKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcIm1heFwiKSxsbihcIm1heFwiLGUsdC5yYW5rKTtmb3IodmFyIG49c24odC5zaGFwZSxlKSxyPW5bMF0sbz1uWzFdLGE9QW4ocix0LmR0eXBlKSxpPWcobykscz10aGlzLnJlYWRTeW5jKGEuZGF0YUlkKSx1PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGw9MDtsPHMubGVuZ3RoOysrbCl7Zm9yKHZhciBjPWwqaSxoPXVbY10scD0wO3A8aTsrK3Ape3ZhciBmPXVbYytwXTtmPmgmJihoPWYpfXNbbF09aH1yZXR1cm4gYX0sdC5wcm90b3R5cGUubWF4aW11bT1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJtYXhpbXVtXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsdC5kdHlwZSxmdW5jdGlvbih0LGUpe3JldHVybiBNYXRoLm1heCh0LGUpfSl9LHQucHJvdG90eXBlLmFsbD1mdW5jdGlvbih0LGUpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiYWxsXCIpLGxuKFwiYWxsXCIsZSx0LnJhbmspO2Zvcih2YXIgbj1zbih0LnNoYXBlLGUpLHI9blswXSxvPW5bMV0sYT1BbihyLHQuZHR5cGUpLGk9ZyhvKSxzPXRoaXMucmVhZFN5bmMoYS5kYXRhSWQpLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbD0wO2w8cy5sZW5ndGg7KytsKXtmb3IodmFyIGM9bCppLGg9dVtjXSxwPTA7cDxpOysrcCl7dmFyIGY9dVtjK3BdO2g9aCYmZn1zW2xdPWh9cmV0dXJuIGF9LHQucHJvdG90eXBlLmFueT1mdW5jdGlvbih0LGUpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiYW55XCIpLGxuKFwiYW55XCIsZSx0LnJhbmspO2Zvcih2YXIgbj1zbih0LnNoYXBlLGUpLHI9blswXSxvPW5bMV0sYT1BbihyLHQuZHR5cGUpLGk9ZyhvKSxzPXRoaXMucmVhZFN5bmMoYS5kYXRhSWQpLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbD0wO2w8cy5sZW5ndGg7KytsKXtmb3IodmFyIGM9bCppLGg9dVtjXSxwPTA7cDxpOysrcCl7dmFyIGY9dVtjK3BdO2g9aHx8Zn1zW2xdPWh9cmV0dXJuIGF9LHQucHJvdG90eXBlLnNxdWFyZWREaWZmZXJlbmNlPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcInNxdWFyZWREaWZmZXJlbmNlXCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsdC5kdHlwZSxmdW5jdGlvbih0LGUpe3ZhciBuPXQtZTtyZXR1cm4gbipufSl9LHQucHJvdG90eXBlLmNlaWw9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJjZWlsXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPU1hdGguY2VpbChlW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0pfSx0LnByb3RvdHlwZS5mbG9vcj1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImZsb29yXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPU1hdGguZmxvb3IoZVtyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUuc2lnbj1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInhcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKWVbcl08MD9uW3JdPS0xOmVbcl0+MD9uW3JdPTE6bltyXT0wO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLmlzTmFOPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwieFwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgVWludDhBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKU51bWJlci5pc05hTihlW3JdKSYmKG5bcl09MSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59LFwiYm9vbFwiKX0sdC5wcm90b3R5cGUuaXNJbmY9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJ4XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3IpTWF0aC5hYnMoZVtyXSk9PT0xLzAmJihuW3JdPTEpO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSxcImJvb2xcIil9LHQucHJvdG90eXBlLmlzRmluaXRlPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwieFwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgVWludDhBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKU51bWJlci5pc0Zpbml0ZShlW3JdKSYmKG5bcl09MSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59LFwiYm9vbFwiKX0sdC5wcm90b3R5cGUucm91bmQ9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJyb3VuZFwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPU1hdGguZmxvb3IoZVtyXSk7ZVtyXS1vPC41P25bcl09TWF0aC5mbG9vcihlW3JdKTplW3JdLW8+LjU/bltyXT1NYXRoLmNlaWwoZVtyXSk6bltyXT1vJTI9PTA/bzpvKzF9cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUuZXhwPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiZXhwXCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrciluW3JdPU1hdGguZXhwKGVbcl0pO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLmV4cG0xPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiZXhwbTFcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKW5bcl09TWF0aC5leHBtMShlW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0pfSx0LnByb3RvdHlwZS5sb2c9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJsb2dcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKXt2YXIgbz1lW3JdO25bcl09TWF0aC5sb2cobyl9cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUubG9nMXA9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJsb2cxcFwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07bltyXT1NYXRoLmxvZzFwKG8pfXJldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLnNxcnQ9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJzcXJ0XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcil7dmFyIG89ZVtyXTtuW3JdPU1hdGguc3FydChvKX1yZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0pfSx0LnByb3RvdHlwZS5yc3FydD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInJzcXJ0XCIpO2Zvcih2YXIgZT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxuPW5ldyBGbG9hdDMyQXJyYXkoZS5sZW5ndGgpLHI9MDtyPGUubGVuZ3RoOysrcil7dmFyIG89ZVtyXTtuW3JdPTEvTWF0aC5zcXJ0KG8pfXJldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLnNxdWFyZT1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInNxdWFyZVwiKTtmb3IodmFyIGU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbj1uZXcgRmxvYXQzMkFycmF5KGUubGVuZ3RoKSxyPTA7cjxlLmxlbmd0aDsrK3Ipe3ZhciBvPWVbcl07bltyXT1vKm99cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUucmVjaXByb2NhbD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInJlY2lwcm9jYWxcIik7Zm9yKHZhciBlPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG49bmV3IEZsb2F0MzJBcnJheShlLmxlbmd0aCkscj0wO3I8ZS5sZW5ndGg7KytyKW5bcl09MS9lW3JdO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLmxpbmVhcj1mdW5jdGlvbih0KXtyZXR1cm4gdH0sdC5wcm90b3R5cGUucmVsdT1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInJlbHVcIik7Zm9yKHZhciBlPUFuKHQuc2hhcGUsdC5kdHlwZSksbj10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxyPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG89MDtvPHIubGVuZ3RoOysrbyluW29dPU1hdGgubWF4KDAscltvXSk7cmV0dXJuIGV9LHQucHJvdG90eXBlLnByZWx1PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcInByZWx1XCIpLHRoaXMuYnJvYWRjYXN0ZWRCaW5hcnlPcCh0LGUsdC5kdHlwZSxmdW5jdGlvbih0LGUpe3JldHVybiB0PDA/ZSp0OnR9KX0sdC5wcm90b3R5cGUuZWx1PWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiZWx1XCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3Ipe3ZhciBvPW5bcl07ZVtyXT1vPj0wP286TWF0aC5leHAobyktMX1yZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5lbHVEZXI9ZnVuY3Rpb24odCxlKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJlbHVEZXJcIik7Zm9yKHZhciBuPW5ldyBGbG9hdDMyQXJyYXkoZS5zaXplKSxyPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLG89dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksYT0wO2E8ci5sZW5ndGg7KythKXt2YXIgaT1yW2FdO25bYV09aT49MT9vW2FdOm9bYV0qKGkrMSl9cmV0dXJuIGN0Lm1ha2UoZS5zaGFwZSx7dmFsdWVzOm59KX0sdC5wcm90b3R5cGUuc2VsdT1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInNlbHVcIik7Zm9yKHZhciBlPWppLG49WGkscj1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxhPTA7YTxvLmxlbmd0aDsrK2Epe3ZhciBpPW9bYV07clthXT1pPj0wP24qaTplKihNYXRoLmV4cChpKS0xKX1yZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6cn0pfSx0LnByb3RvdHlwZS5jbGlwPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImNsaXBcIik7Zm9yKHZhciByPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9MDthPG8ubGVuZ3RoOysrYSl7dmFyIGk9b1thXTtyW2FdPWk+bj9uOmk8ZT9lOml9cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOnJ9KX0sdC5wcm90b3R5cGUuYWJzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFicyhuW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5jb21wbGV4QWJzPWZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjx0LnNpemU7KytyKXt2YXIgbz1uWzIqcl0sYT1uWzIqcisxXTtlW3JdPU1hdGguaHlwb3QobyxhKX1yZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5pbnQ9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJpbnRcIik7Zm9yKHZhciBlPW5ldyBJbnQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1uW3JdO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczplfSxcImludDMyXCIpfSx0LnByb3RvdHlwZS5zaWdtb2lkPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwic2lnbW9pZFwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09MS8oMStNYXRoLmV4cCgtbltyXSkpO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczplfSl9LHQucHJvdG90eXBlLnNvZnRwbHVzPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwic29mdHBsdXNcIik7Zm9yKHZhciBlPU1hdGgubG9nKDEuMTkyMDkyODk1NTA3ODEyNWUtNykrMixuPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxyPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG89MDtvPHIubGVuZ3RoOysrbyl7dmFyIGE9cltvXT4tZSxpPXJbb108ZSxzPU1hdGguZXhwKHJbb10pLHU9dm9pZCAwO3U9aT9zOmE/cltvXTpNYXRoLmxvZygxK3MpLG5bb109dX1yZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6bn0pfSx0LnByb3RvdHlwZS5zaW49ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJzaW5cIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPU1hdGguc2luKG5bcl0pO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczplfSl9LHQucHJvdG90eXBlLmNvcz1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImNvc1wiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5jb3MobltyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUudGFuPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwidGFuXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLnRhbihuW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5hc2luPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiYXNpblwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5hc2luKG5bcl0pO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczplfSl9LHQucHJvdG90eXBlLmFjb3M9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJhY29zXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFjb3MobltyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUuYXRhbj1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImF0YW5cIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPU1hdGguYXRhbihuW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5hdGFuMj1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJhdGFuMlwiKSx0aGlzLmJyb2FkY2FzdGVkQmluYXJ5T3AodCxlLHQuZHR5cGUsZnVuY3Rpb24odCxlKXtyZXR1cm4gTWF0aC5hdGFuMih0LGUpfSl9LHQucHJvdG90eXBlLnNpbmg9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJzaW5oXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLnNpbmgobltyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUuY29zaD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImNvc2hcIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPU1hdGguY29zaChuW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS50YW5oPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwidGFuaFwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09YihuW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5hc2luaD1mdW5jdGlvbih0KXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImFzaW5oXCIpO2Zvcih2YXIgZT1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSksbj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxyPTA7cjxuLmxlbmd0aDsrK3IpZVtyXT1NYXRoLmFzaW5oKG5bcl0pO3JldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczplfSl9LHQucHJvdG90eXBlLmFjb3NoPWZ1bmN0aW9uKHQpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiYWNvc2hcIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcillW3JdPU1hdGguYWNvc2gobltyXSk7cmV0dXJuIGN0Lm1ha2UodC5zaGFwZSx7dmFsdWVzOmV9KX0sdC5wcm90b3R5cGUuYXRhbmg9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJhdGFuaFwiKTtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLG49dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscj0wO3I8bi5sZW5ndGg7KytyKWVbcl09TWF0aC5hdGFuaChuW3JdKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5lcmY9ZnVuY3Rpb24odCl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJlcmZcIik7Zm9yKHZhciBlPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKSxuPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHI9MDtyPG4ubGVuZ3RoOysrcil7dmFyIG89bltyXSxhPTEvKDErLjMyNzU5MTEqbyk7ZVtyXT0xLSgoKCgxLjA2MTQwNTQyOSphLTEuNDUzMTUyMDI3KSphKzEuNDIxNDEzNzQxKSphLS4yODQ0OTY3MzYpKmErLjI1NDgyOTU5MikqYSpNYXRoLmV4cCgtbypvKX1yZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0pfSx0LnByb3RvdHlwZS5zdGVwPWZ1bmN0aW9uKHQsZSl7dm9pZCAwPT09ZSYmKGU9MCksdGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJzdGVwXCIpO2Zvcih2YXIgbj1uZXcgRmxvYXQzMkFycmF5KHQuc2l6ZSkscj10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxvPTA7bzxyLmxlbmd0aDsrK28pe3ZhciBhPXJbb107aXNOYU4oYSk/bltvXT1OYU46bltvXT1hPjA/MTplfXJldHVybiBjdC5tYWtlKHQuc2hhcGUse3ZhbHVlczpufSl9LHQucHJvdG90eXBlLmZ1c2VkQ29udjJkPWZ1bmN0aW9uKHQsZSxuLHIsbyxhKXt2YXIgaT10aGlzLmNvbnYyZCh0LGUsbik7cmV0dXJuIHImJihpPXRoaXMuYWRkKGkscikpLG8mJihpPWVoKHRoaXMsaSxvLGEpKSxpfSx0LnByb3RvdHlwZS5jb252MmQ9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImNvbnYyZFwiKTtmb3IodmFyIHI9bi5maWx0ZXJIZWlnaHQsbz1uLmZpbHRlcldpZHRoLGE9bi5kaWxhdGlvbkhlaWdodCxpPW4uZGlsYXRpb25XaWR0aCxzPW4ucGFkSW5mby5sZWZ0LHU9bi5wYWRJbmZvLnRvcCxsPVwiY2hhbm5lbHNMYXN0XCI9PT1uLmRhdGFGb3JtYXQsYz1abihuLm91dFNoYXBlLHQuZHR5cGUpLGg9dC5zdHJpZGVzWzBdLHA9bD90LnN0cmlkZXNbMV06dC5zdHJpZGVzWzJdLGY9bD90LnN0cmlkZXNbMl06MSxkPWw/MTp0LnN0cmlkZXNbMV0sdj1jLnN0cmlkZXNbMF0sbT1sP2Muc3RyaWRlc1sxXTpjLnN0cmlkZXNbMl0sZz1sP2Muc3RyaWRlc1syXToxLHk9bD8xOmMuc3RyaWRlc1sxXSx4PXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGI9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksdz1jLnZhbHVlcyxDPTA7QzxuLmJhdGNoU2l6ZTsrK0MpZm9yKHZhciBFPUMqaCxSPUMqdixJPTA7STxuLm91dEhlaWdodDsrK0kpZm9yKHZhciBrPVIrSSptLE49SSpuLnN0cmlkZUhlaWdodC11LFM9MDtTPHI7UysrKXt2YXIgQT1OK1MqYTtpZighKEE8MHx8QT49bi5pbkhlaWdodCkpZm9yKHZhciBUPVMqZS5zdHJpZGVzWzBdLEQ9RStBKnAsXz0wO188bi5vdXRXaWR0aDsrK18pZm9yKHZhciBPPWsrXypnLEY9XypuLnN0cmlkZVdpZHRoLXMsTT0wO008bztNKyspe3ZhciBCPUYrTSppO2lmKCEoQjwwfHxCPj1uLmluV2lkdGgpKWZvcih2YXIgUD1EK0IqZixMPVQrTSplLnN0cmlkZXNbMV0sVz0wO1c8bi5pbkNoYW5uZWxzOysrVyl7Zm9yKHZhciBVPXhbUCtXKmRdLFY9MDtWPG4ub3V0Q2hhbm5lbHM7KytWKXdbTytWKnldKz1VKmJbTCtWXTtMKz1uLm91dENoYW5uZWxzfX19cmV0dXJuIGMudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUuY29udjNkPWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9bi5maWx0ZXJEZXB0aCxvPW4uZmlsdGVySGVpZ2h0LGE9bi5maWx0ZXJXaWR0aCxpPW4uZGlsYXRpb25EZXB0aCxzPW4uZGlsYXRpb25IZWlnaHQsdT1uLmRpbGF0aW9uV2lkdGgsbD1uLnBhZEluZm8uZnJvbnQsYz1uLnBhZEluZm8ubGVmdCxoPW4ucGFkSW5mby50b3AscD1abihuLm91dFNoYXBlLHQuZHR5cGUpLGY9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZD10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSx2PXAudmFsdWVzLG09MDttPG4uYmF0Y2hTaXplOysrbSlmb3IodmFyIGc9bSp0LnN0cmlkZXNbMF0seT1tKnAuc3RyaWRlc1swXSx4PTA7eDxuLm91dERlcHRoOysreClmb3IodmFyIGI9eSt4KnAuc3RyaWRlc1sxXSx3PXgqbi5zdHJpZGVEZXB0aC1sLEM9MDtDPHI7QysrKXt2YXIgRT13K0MqaTtpZighKEU8MHx8RT49bi5pbkRlcHRoKSlmb3IodmFyIFI9QyplLnN0cmlkZXNbMF0sST1nK0UqdC5zdHJpZGVzWzFdLGs9MDtrPG4ub3V0SGVpZ2h0Oysraylmb3IodmFyIE49YitrKnAuc3RyaWRlc1syXSxTPWsqbi5zdHJpZGVIZWlnaHQtaCxBPTA7QTxvO0ErKyl7dmFyIFQ9UytBKnM7aWYoIShUPDB8fFQ+PW4uaW5IZWlnaHQpKWZvcih2YXIgRD1SK0EqZS5zdHJpZGVzWzFdLF89SStUKnQuc3RyaWRlc1syXSxPPTA7TzxuLm91dFdpZHRoOysrTylmb3IodmFyIEY9TitPKm4ub3V0Q2hhbm5lbHMsTT1PKm4uc3RyaWRlV2lkdGgtYyxCPTA7QjxhO0IrKyl7dmFyIFA9TStCKnU7aWYoIShQPDB8fFA+PW4uaW5XaWR0aCkpZm9yKHZhciBMPUQrQiplLnN0cmlkZXNbMl0sVz1fK1Aqbi5pbkNoYW5uZWxzLFU9TCxWPTA7VjxuLmluQ2hhbm5lbHM7KytWKXtmb3IodmFyIHo9ZltXK1ZdLEc9MDtHPG4ub3V0Q2hhbm5lbHM7KytHKXZbRitHXSs9eipkW1UrR107VSs9bi5vdXRDaGFubmVsc319fX1yZXR1cm4gcC50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5jb252MmREZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiY29udjJkRGVySW5wdXRcIik7Zm9yKHZhciByPVpuKG4uaW5TaGFwZSxcImZsb2F0MzJcIiksbz1yLnZhbHVlcyxhPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGk9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCkscz1lLnN0cmlkZXMsdT1zWzBdLGw9c1sxXSxjPXNbMl0saD1uLmJhdGNoU2l6ZSxwPW4uZmlsdGVySGVpZ2h0LGY9bi5maWx0ZXJXaWR0aCxkPW4uaW5DaGFubmVscyx2PW4uaW5IZWlnaHQsbT1uLmluV2lkdGgsZz1uLm91dENoYW5uZWxzLHk9bi5vdXRIZWlnaHQseD1uLm91dFdpZHRoLGI9bi5zdHJpZGVIZWlnaHQsdz1uLnN0cmlkZVdpZHRoLEM9bi5kYXRhRm9ybWF0LEU9cC0xLW4ucGFkSW5mby50b3AsUj1mLTEtbi5wYWRJbmZvLmxlZnQsST1cImNoYW5uZWxzTGFzdFwiPT09QyxrPXIuc3RyaWRlc1swXSxOPUk/ci5zdHJpZGVzWzFdOnIuc3RyaWRlc1syXSxTPUk/ci5zdHJpZGVzWzJdOjEsQT1JPzE6ci5zdHJpZGVzWzFdLFQ9dC5zdHJpZGVzWzBdLEQ9ST90LnN0cmlkZXNbMV06dC5zdHJpZGVzWzJdLF89ST90LnN0cmlkZXNbMl06MSxPPUk/MTp0LnN0cmlkZXNbMV0sRj0wO0Y8aDsrK0YpZm9yKHZhciBNPTA7TTxkOysrTSlmb3IodmFyIEI9MDtCPHY7KytCKWZvcih2YXIgUD1CLUUsTD1NYXRoLm1heCgwLE1hdGguY2VpbChQL2IpKSxXPU1hdGgubWluKHksKHArUCkvYiksVT0wO1U8bTsrK1Upe2Zvcih2YXIgVj1VLVIsej1NYXRoLm1heCgwLE1hdGguY2VpbChWL3cpKSxHPU1hdGgubWluKHgsKGYrVikvdyksSD0wLHE9TDtxPFc7KytxKWZvcih2YXIgJD1xKmItUCxLPXo7SzxHOysrSylmb3IodmFyIGo9VCpGK0QqcStfKkssWD11KihwLTEtJCkrbCooZi0xLShLKnctVikpK2MqTSxZPTA7WTxnOysrWSl7SCs9YVtqK08qWV0qaVtYK1ldfW9baypGK04qQitTKlUrQSpNXT1IfXJldHVybiByLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmNvbnYzZERlcklucHV0PWZ1bmN0aW9uKHQsZSxuKXtmb3IodmFyIHI9Wm4obi5pblNoYXBlLFwiZmxvYXQzMlwiKSxvPXIudmFsdWVzLGE9ci5zdHJpZGVzLGk9YVswXSxzPWFbMV0sdT1hWzJdLGw9YVszXSxjPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGg9dC5zdHJpZGVzLHA9aFswXSxmPWhbMV0sZD1oWzJdLHY9aFszXSxtPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLGc9ZS5zdHJpZGVzLHk9Z1swXSx4PWdbMV0sYj1nWzJdLHc9Z1szXSxDPW4uYmF0Y2hTaXplLEU9bi5maWx0ZXJEZXB0aCxSPW4uZmlsdGVySGVpZ2h0LEk9bi5maWx0ZXJXaWR0aCxrPW4uaW5DaGFubmVscyxOPW4uaW5EZXB0aCxTPW4uaW5IZWlnaHQsQT1uLmluV2lkdGgsVD1uLm91dENoYW5uZWxzLEQ9bi5vdXREZXB0aCxfPW4ub3V0SGVpZ2h0LE89bi5vdXRXaWR0aCxGPW4uc3RyaWRlRGVwdGgsTT1uLnN0cmlkZUhlaWdodCxCPW4uc3RyaWRlV2lkdGgsUD1FLTEtbi5wYWRJbmZvLmZyb250LEw9Ui0xLW4ucGFkSW5mby50b3AsVz1JLTEtbi5wYWRJbmZvLmxlZnQsVT0wO1U8QzsrK1UpZm9yKHZhciBWPTA7VjxrOysrVilmb3IodmFyIHo9MDt6PE47Kyt6KWZvcih2YXIgRz16LVAsSD1NYXRoLm1heCgwLE1hdGguY2VpbChHL0YpKSxxPU1hdGgubWluKEQsKEUrRykvRiksJD0wOyQ8UzsrKyQpZm9yKHZhciBLPSQtTCxqPU1hdGgubWF4KDAsTWF0aC5jZWlsKEsvTSkpLFg9TWF0aC5taW4oXywoUitLKS9NKSxZPTA7WTxBOysrWSl7Zm9yKHZhciBRPVktVyxKPU1hdGgubWF4KDAsTWF0aC5jZWlsKFEvQikpLFo9TWF0aC5taW4oTywoSStRKS9CKSx0dD0wLGV0PUg7ZXQ8cTsrK2V0KWZvcih2YXIgbnQ9ZXQqRi1HLHJ0PWo7cnQ8WDsrK3J0KWZvcih2YXIgb3Q9cnQqTS1LLGF0PUo7YXQ8WjsrK2F0KWZvcih2YXIgaXQ9cCpVK2YqZXQrZCpydCt2KmF0LHN0PXkqKEUtMS1udCkreCooUi0xLW90KStiKihJLTEtKGF0KkItUSkpK3cqVix1dD0wO3V0PFQ7Kyt1dCl7dHQrPWNbaXQrdXRdKm1bc3QrdXRdfW9baSpVK3Mqeit1KiQrbCpZK1ZdPXR0fXJldHVybiByLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmNvbnYyZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiY29udjJkRGVyRmlsdGVyXCIpO2Zvcih2YXIgcj1uLnN0cmlkZUhlaWdodCxvPW4uc3RyaWRlV2lkdGgsYT1uLmZpbHRlckhlaWdodCxpPW4uZmlsdGVyV2lkdGgscz1cImNoYW5uZWxzTGFzdFwiPT09bi5kYXRhRm9ybWF0LHU9Wm4obi5maWx0ZXJTaGFwZSxcImZsb2F0MzJcIiksbD1uLnBhZEluZm8ubGVmdCxjPW4ucGFkSW5mby50b3AsaD10aGlzLmJ1ZmZlclN5bmModCkscD10aGlzLmJ1ZmZlclN5bmMoZSksZj0wO2Y8YTsrK2YpZm9yKHZhciBkPU1hdGgubWF4KDAsTWF0aC5jZWlsKChjLWYpL3IpKSx2PU1hdGgubWluKG4ub3V0SGVpZ2h0LChuLmluSGVpZ2h0K2MtZikvciksbT0wO208aTsrK20pZm9yKHZhciBnPU1hdGgubWF4KDAsTWF0aC5jZWlsKChsLW0pL28pKSx5PU1hdGgubWluKG4ub3V0V2lkdGgsKG4uaW5XaWR0aCtsLW0pL28pLHg9MDt4PG4uaW5DaGFubmVsczsrK3gpZm9yKHZhciBiPTA7YjxuLm91dENoYW5uZWxzOysrYil7Zm9yKHZhciB3PTAsQz0wO0M8bi5iYXRjaFNpemU7KytDKWZvcih2YXIgRT1kO0U8djsrK0UpZm9yKHZhciBSPWYrRSpyLWMsST1nO0k8eTsrK0kpe3ZhciBrPW0rSSpvLWw7dys9cz9oLmdldChDLFIsayx4KSpwLmdldChDLEUsSSxiKTpoLmdldChDLHgsUixrKSpwLmdldChDLGIsRSxJKX11LnNldCh3LGYsbSx4LGIpfXJldHVybiB1LnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmNvbnYzZERlckZpbHRlcj1mdW5jdGlvbih0LGUsbil7Zm9yKHZhciByPW4uc3RyaWRlRGVwdGgsbz1uLnN0cmlkZUhlaWdodCxhPW4uc3RyaWRlV2lkdGgsaT1uLmZpbHRlckRlcHRoLHM9bi5maWx0ZXJIZWlnaHQsdT1uLmZpbHRlcldpZHRoLGw9Wm4obi5maWx0ZXJTaGFwZSxcImZsb2F0MzJcIiksYz1sLnZhbHVlcyxoPWwuc3RyaWRlcyxwPWhbMF0sZj1oWzFdLGQ9aFsyXSx2PWhbM10sbT10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxnPWUuc3RyaWRlcyx5PWdbMF0seD1nWzFdLGI9Z1syXSx3PWdbM10sQz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxFPXQuc3RyaWRlcyxSPUVbMF0sST1FWzFdLGs9RVsyXSxOPUVbM10sUz1uLnBhZEluZm8uZnJvbnQsQT1uLnBhZEluZm8ubGVmdCxUPW4ucGFkSW5mby50b3AsRD0wO0Q8aTsrK0QpZm9yKHZhciBfPU1hdGgubWF4KDAsTWF0aC5jZWlsKChTLUQpL3IpKSxPPU1hdGgubWluKG4ub3V0RGVwdGgsKG4uaW5EZXB0aCtTLUQpL3IpLEY9RCpwLE09MDtNPHM7KytNKWZvcih2YXIgQj1NYXRoLm1heCgwLE1hdGguY2VpbCgoVC1NKS9vKSksUD1NYXRoLm1pbihuLm91dEhlaWdodCwobi5pbkhlaWdodCtULU0pL28pLEw9TSpmK0YsVz0wO1c8dTsrK1cpZm9yKHZhciBVPU1hdGgubWF4KDAsTWF0aC5jZWlsKChBLVcpL2EpKSxWPU1hdGgubWluKG4ub3V0V2lkdGgsKG4uaW5XaWR0aCtBLVcpL2EpLHo9VypkK0wsRz0wO0c8bi5pbkNoYW5uZWxzOysrRylmb3IodmFyIEg9Ryp2K3oscT0wO3E8bi5vdXRDaGFubmVsczsrK3Epe2Zvcih2YXIgJD0wLEs9MDtLPG4uYmF0Y2hTaXplOysrSylmb3IodmFyIGo9SypSLFg9Syp5LFk9XztZPE87KytZKWZvcih2YXIgUT0oRCtZKnItUykqSStqLEo9WSp4K1gsWj1CO1o8UDsrK1opZm9yKHZhciB0dD0oTStaKm8tVCkqaytRLGV0PVoqYitKLG50PVU7bnQ8VjsrK250KXt2YXIgcnQ9bnQqdytldDskKz1DWyhXK250KmEtQSkqTit0dCtHXSptW3J0K3FdfWNbSCtxXT0kfXJldHVybiBsLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmRlcHRod2lzZUNvbnYyRD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiZGVwdGh3aXNlQ29udjJEXCIpO2Zvcih2YXIgcj1uLmZpbHRlckhlaWdodCxvPW4uZmlsdGVyV2lkdGgsYT1uLmRpbGF0aW9uSGVpZ2h0LGk9bi5kaWxhdGlvbldpZHRoLHM9bi5wYWRJbmZvLmxlZnQsdT1uLnBhZEluZm8udG9wLGw9bi5vdXRDaGFubmVscy9uLmluQ2hhbm5lbHMsYz1abihuLm91dFNoYXBlLHQuZHR5cGUpLGg9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscD10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxmPWMudmFsdWVzLGQ9MDtkPG4uYmF0Y2hTaXplOysrZClmb3IodmFyIHY9ZCp0LnN0cmlkZXNbMF0sbT1kKmMuc3RyaWRlc1swXSxnPTA7ZzxuLm91dEhlaWdodDsrK2cpZm9yKHZhciB5PW0rZypjLnN0cmlkZXNbMV0seD1nKm4uc3RyaWRlSGVpZ2h0LXMsYj0wO2I8cjsrK2Ipe3ZhciB3PXgrYiphO2lmKCEodzwwfHx3Pj1uLmluSGVpZ2h0KSlmb3IodmFyIEM9YiplLnN0cmlkZXNbMF0sRT12K3cqdC5zdHJpZGVzWzFdLFI9MDtSPG4ub3V0V2lkdGg7KytSKWZvcih2YXIgST15K1IqYy5zdHJpZGVzWzJdLGs9UipuLnN0cmlkZVdpZHRoLXUsTj0wO048bzsrK04pe3ZhciBTPWsrTippO2lmKCEoUzwwfHxTPj1uLmluV2lkdGgpKWZvcih2YXIgQT1DK04qZS5zdHJpZGVzWzFdLFQ9RStTKm4uaW5DaGFubmVscyxEPUksXz1BLE89MDtPPG4uaW5DaGFubmVsczsrK08pe2Zvcih2YXIgRj1oW1QrT10sTT0wO008bDsrK00pZltEK01dKz1GKnBbXytNXTtEKz1sLF8rPWx9fX1yZXR1cm4gYy50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5kZXB0aHdpc2VDb252MkREZXJJbnB1dD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiZGVwdGh3aXNlQ29udjJERGVySW5wdXRcIik7Zm9yKHZhciByPVpuKG4uaW5TaGFwZSxcImZsb2F0MzJcIiksbz1yLnZhbHVlcyxhPXIuc3RyaWRlcyxpPWFbMF0scz1hWzFdLHU9YVsyXSxsPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGM9dC5zdHJpZGVzLGg9Y1swXSxwPWNbMV0sZj1jWzJdLGQ9dGhpcy5yZWFkU3luYyhlLmRhdGFJZCksdj1lLnN0cmlkZXMsbT12WzBdLGc9dlsxXSx5PXZbMl0seD1uLmJhdGNoU2l6ZSxiPW4uZmlsdGVySGVpZ2h0LHc9bi5maWx0ZXJXaWR0aCxDPW4uaW5DaGFubmVscyxFPW4uaW5IZWlnaHQsUj1uLmluV2lkdGgsST1uLm91dENoYW5uZWxzLGs9bi5vdXRIZWlnaHQsTj1uLm91dFdpZHRoLFM9bi5zdHJpZGVIZWlnaHQsQT1uLnN0cmlkZVdpZHRoLFQ9Yi0xLW4ucGFkSW5mby50b3AsRD13LTEtbi5wYWRJbmZvLmxlZnQsXz1JL0MsTz0wO088eDsrK08pZm9yKHZhciBGPTA7RjxDOysrRilmb3IodmFyIE09MDtNPEU7KytNKWZvcih2YXIgQj1NLVQsUD1NYXRoLm1heCgwLE1hdGguY2VpbChCL1MpKSxMPU1hdGgubWluKGssKGIrQikvUyksVz0wO1c8UjsrK1cpe2Zvcih2YXIgVT1XLUQsVj1NYXRoLm1heCgwLE1hdGguY2VpbChVL0EpKSx6PU1hdGgubWluKE4sKHcrVSkvQSksRz0wLEg9UDtIPEw7KytIKWZvcih2YXIgcT1IKlMtQiwkPVY7JDx6OysrJClmb3IodmFyIEs9aCpPK3AqSCtmKiQsaj1tKihiLTEtcSkrZyoody0xLSgkKkEtVSkpK3kqRixYPTA7WDxfOysrWCl7Rys9bFtLKyhGKl8rWCldKmRbaitYXX1vW2kqTytzKk0rdSpXK0ZdPUd9cmV0dXJuIHIudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUuZGVwdGh3aXNlQ29udjJERGVyRmlsdGVyPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW3QsZV0sXCJkZXB0aHdpc2VDb252MkREZXJGaWx0ZXJcIik7Zm9yKHZhciByPW4uc3RyaWRlSGVpZ2h0LG89bi5zdHJpZGVXaWR0aCxhPW4uZmlsdGVySGVpZ2h0LGk9bi5maWx0ZXJXaWR0aCxzPVpuKG4uZmlsdGVyU2hhcGUsXCJmbG9hdDMyXCIpLHU9bi5wYWRJbmZvLmxlZnQsbD1uLnBhZEluZm8udG9wLGM9bi5vdXRDaGFubmVscy9uLmluQ2hhbm5lbHMsaD10aGlzLmJ1ZmZlclN5bmModCkscD10aGlzLmJ1ZmZlclN5bmMoZSksZj0wO2Y8YTsrK2YpZm9yKHZhciBkPU1hdGgubWF4KDAsTWF0aC5jZWlsKChsLWYpL3IpKSx2PU1hdGgubWluKG4ub3V0SGVpZ2h0LChuLmluSGVpZ2h0K2wtZikvciksbT0wO208aTsrK20pZm9yKHZhciBnPU1hdGgubWF4KDAsTWF0aC5jZWlsKCh1LW0pL28pKSx5PU1hdGgubWluKG4ub3V0V2lkdGgsKG4uaW5XaWR0aCt1LW0pL28pLHg9MDt4PG4ub3V0Q2hhbm5lbHM7Kyt4KXtmb3IodmFyIGI9TWF0aC50cnVuYyh4L2MpLHc9eCVjLEM9MCxFPTA7RTxuLmJhdGNoU2l6ZTsrK0UpZm9yKHZhciBSPWQ7Ujx2OysrUilmb3IodmFyIEk9ZitSKnItbCxrPWc7azx5Oysrayl7dmFyIE49bStrKm8tdTtDKz1oLmdldChFLEksTixiKSpwLmdldChFLFIsayx4KX1zLnNldChDLGYsbSxiLHcpfXJldHVybiBzLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLnRpbGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJ0aWxlXCIpLE5vKHRoaXMuYnVmZmVyU3luYyh0KSxlKX0sdC5wcm90b3R5cGUucGFkPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInBhZFwiKTt2YXIgcj1lLm1hcChmdW5jdGlvbihlLG4pe3JldHVybiBlWzBdK3Quc2hhcGVbbl0rZVsxXX0pLG89ZS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHRbMF19KSxhPXRoaXMuYnVmZmVyU3luYyh0KSxpPVpuKHIsdC5kdHlwZSk7MCE9PW4mJmkudmFsdWVzLmZpbGwobik7Zm9yKHZhciBzPTA7czx0LnNpemU7cysrKXt2YXIgdT1hLmluZGV4VG9Mb2MocyksbD11Lm1hcChmdW5jdGlvbih0LGUpe3JldHVybiB0K29bZV19KTtpLnNldC5hcHBseShpLFthLmdldC5hcHBseShhLHUpXS5jb25jYXQobCkpfXJldHVybiBpLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLnRyYW5zcG9zZT1mdW5jdGlvbih0LGUpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwidHJhbnNwb3NlXCIpO2Zvcih2YXIgbj1uZXcgQXJyYXkodC5yYW5rKSxyPTA7cjxuLmxlbmd0aDtyKyspbltyXT10LnNoYXBlW2Vbcl1dO3ZhciBvPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGE9Wm4obix0LmR0eXBlKSxpPXRoaXMuYnVmZmVyU3luYyh0KTtmb3Iocj0wO3I8dC5zaXplOysrcil7Zm9yKHZhciBzPWkuaW5kZXhUb0xvYyhyKSx1PW5ldyBBcnJheShzLmxlbmd0aCksbD0wO2w8dS5sZW5ndGg7bCsrKXVbbF09c1tlW2xdXTt2YXIgYz1hLmxvY1RvSW5kZXgodSk7YS52YWx1ZXNbY109b1tyXX1yZXR1cm4gYS50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5nYXRoZXI9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcImdhdGhlclwiKTt2YXIgcj10LnNoYXBlLnNsaWNlKCksbz10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKTtyW25dPW8ubGVuZ3RoO2Zvcih2YXIgYT1abihyLHQuZHR5cGUpLGk9dGhpcy5idWZmZXJTeW5jKHQpLHM9MDtzPGEuc2l6ZTsrK3Mpe3ZhciB1PWEuaW5kZXhUb0xvYyhzKSxsPXUuc2xpY2UoKTtsW25dPW9bdVtuXV07dmFyIGM9aS5sb2NUb0luZGV4KGwpO2EudmFsdWVzW3NdPWkudmFsdWVzW2NdfXJldHVybiBhLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmJhdGNoVG9TcGFjZU5EPWZ1bmN0aW9uKHQsZSxuKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW3RdLFwiYmF0Y2hUb1NwYWNlTkRcIik7dmFyIHI9ZS5yZWR1Y2UoZnVuY3Rpb24odCxlKXtyZXR1cm4gdCplfSksbz1Ocih0LnNoYXBlLGUsciksYT1TcihvLmxlbmd0aCxlLmxlbmd0aCksaT1Bcih0LnNoYXBlLGUscikscz1UcihuLGUubGVuZ3RoKSx1PURyKGksbixlLmxlbmd0aCk7cmV0dXJuIHQucmVzaGFwZShvKS50cmFuc3Bvc2UoYSkucmVzaGFwZShpKS5zbGljZShzLHUpfSx0LnByb3RvdHlwZS5zcGFjZVRvQmF0Y2hORD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0XSxcInNwYWNlVG9CYXRjaE5EXCIpO3ZhciByPWUucmVkdWNlKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQqZX0pLG89W1swLDBdXTtvLnB1c2guYXBwbHkobyxuKTtmb3IodmFyIGE9MStlLmxlbmd0aDthPHQuc2hhcGUubGVuZ3RoOysrYSlvLnB1c2goWzAsMF0pO3ZhciBpPXQucGFkKG8pLHM9TnIoaS5zaGFwZSxlLHIsITEpLHU9U3Iocy5sZW5ndGgsZS5sZW5ndGgsITEpLGw9QXIoaS5zaGFwZSxlLHIsITEpO3JldHVybiBpLnJlc2hhcGUocykudHJhbnNwb3NlKHUpLnJlc2hhcGUobCl9LHQucHJvdG90eXBlLnBvb2w9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwicG9vbFwiKTtmb3IodmFyIHI9ZS5zdHJpZGVIZWlnaHQsbz1lLnN0cmlkZVdpZHRoLGE9ZS5kaWxhdGlvbkhlaWdodCxpPWUuZGlsYXRpb25XaWR0aCxzPWUuZWZmZWN0aXZlRmlsdGVySGVpZ2h0LHU9ZS5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxsPWUucGFkSW5mby50b3AsYz1lLnBhZEluZm8ubGVmdCxoPVwibWF4XCI9PT1uP051bWJlci5ORUdBVElWRV9JTkZJTklUWTpOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkscD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxmPVpuKGUub3V0U2hhcGUsdC5kdHlwZSksZD1mLnZhbHVlcyx2PWUub3V0U2hhcGVbMV0qZS5vdXRTaGFwZVsyXSplLm91dFNoYXBlWzNdLG09ZS5vdXRTaGFwZVsyXSplLm91dFNoYXBlWzNdLGc9ZS5vdXRTaGFwZVszXSx5PTA7eTxlLmJhdGNoU2l6ZTsrK3kpZm9yKHZhciB4PXkqdixiPXkqdC5zdHJpZGVzWzBdLHc9MDt3PGUuaW5DaGFubmVsczsrK3cpZm9yKHZhciBDPTA7QzxlLm91dEhlaWdodDsrK0MpZm9yKHZhciBFPUMqci1sLFI9TWF0aC5tYXgoMCxFKSxJPU1hdGgubWluKGUuaW5IZWlnaHQscytFKSxrPXgrQyptLE49MDtOPGUub3V0V2lkdGg7KytOKXtmb3IodmFyIFM9TipvLWMsQT1NYXRoLm1heCgwLFMpLFQ9TWF0aC5taW4oZS5pbldpZHRoLHUrUyksRD1oLF89MCxPPTAsRj1SO0Y8STtGKz1hKXtmb3IodmFyIE09YitGKnQuc3RyaWRlc1sxXSxCPUE7QjxUO0IrPWkpe3ZhciBQPXBbTStCKnQuc3RyaWRlc1syXSt3XTtcIm1heFwiPT09biYmUD5EP0Q9UDpcImF2Z1wiPT09biYmKF8rPVAsTysrKX1pZihpc05hTihEKSlicmVha31kW2srTipnK3ddPVwiYXZnXCI9PT1uP18vTzpEfXJldHVybiBmLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLm1heFBvb2w9ZnVuY3Rpb24odCxlKXtyZXR1cm4gdGhpcy5wb29sKHQsZSxcIm1heFwiKX0sdC5wcm90b3R5cGUubWF4UG9vbFBvc2l0aW9ucz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1abihlLm91dFNoYXBlLFwiaW50MzJcIikscj1lLnN0cmlkZUhlaWdodCxvPWUuc3RyaWRlV2lkdGgsYT1lLmRpbGF0aW9uSGVpZ2h0LGk9ZS5kaWxhdGlvbldpZHRoLHM9ZS5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsdT1lLmVmZmVjdGl2ZUZpbHRlcldpZHRoLGw9ZS5wYWRJbmZvLnRvcCxjPWUucGFkSW5mby5sZWZ0LGg9dGhpcy5idWZmZXJTeW5jKHQpLHA9MDtwPGUuYmF0Y2hTaXplOysrcClmb3IodmFyIGY9MDtmPGUuaW5DaGFubmVsczsrK2YpZm9yKHZhciBkPTA7ZDxlLm91dEhlaWdodDsrK2Qpe2Zvcih2YXIgdj1kKnItbCxtPXY7bTwwOyltKz1hO2Zvcih2YXIgZz1NYXRoLm1pbihlLmluSGVpZ2h0LHMrdikseT0wO3k8ZS5vdXRXaWR0aDsrK3kpe2Zvcih2YXIgeD15Km8tYyxiPXg7YjwwOyliKz1pO2Zvcih2YXIgdz1NYXRoLm1pbihlLmluV2lkdGgsdSt4KSxDPU51bWJlci5ORUdBVElWRV9JTkZJTklUWSxFPS0xLFI9bTtSPGc7Uis9YSlmb3IodmFyIEk9Ui12LGs9YjtrPHc7ays9aSl7dmFyIE49ay14LFM9aC5nZXQocCxSLGssZik7Uz5DJiYoQz1TLEU9SSp1K04pfW4uc2V0KEUscCxkLHksZil9fXJldHVybiBuLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLm1heFBvb2xCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW2Usbl0sXCJtYXhQb29sQmFja3Byb3BcIik7Zm9yKHZhciBvPXRoaXMubWF4UG9vbFBvc2l0aW9ucyhlLHIpLGE9ci5zdHJpZGVIZWlnaHQsaT1yLnN0cmlkZVdpZHRoLHM9ci5kaWxhdGlvbkhlaWdodCx1PXIuZGlsYXRpb25XaWR0aCxsPXIuZWZmZWN0aXZlRmlsdGVySGVpZ2h0LGM9ci5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxoPWMtMS1yLnBhZEluZm8ubGVmdCxwPWwtMS1yLnBhZEluZm8udG9wLGY9Wm4oZS5zaGFwZSxcImZsb2F0MzJcIiksZD10aGlzLmJ1ZmZlclN5bmMobyksdj10aGlzLmJ1ZmZlclN5bmModCksbT0wO208ci5iYXRjaFNpemU7KyttKWZvcih2YXIgZz0wO2c8ci5pbkNoYW5uZWxzOysrZylmb3IodmFyIHk9MDt5PHIuaW5IZWlnaHQ7Kyt5KWZvcih2YXIgeD0wO3g8ci5pbldpZHRoOysreCl7Zm9yKHZhciBiPXktcCx3PXgtaCxDPTAsRT0wO0U8bDtFKz1zKXt2YXIgUj0oYitFKS9hO2lmKCEoUjwwfHxSPj1yLm91dEhlaWdodHx8TWF0aC5mbG9vcihSKSE9PVIpKWZvcih2YXIgST0wO0k8YztJKz11KXt2YXIgaz0odytJKS9pO2lmKCEoazwwfHxrPj1yLm91dFdpZHRofHxNYXRoLmZsb29yKGspIT09aykpe3ZhciBOPWwqYy0xLWQuZ2V0KG0sUixrLGcpPT09RSpjK0k/MTowO2lmKDAhPT1OKUMrPXYuZ2V0KG0sUixrLGcpKk59fX1mLnNldChDLG0seSx4LGcpfXJldHVybiBmLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmF2Z1Bvb2xCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiYXZnUG9vbEJhY2twcm9wXCIpO2Zvcih2YXIgcj1uLnN0cmlkZUhlaWdodCxvPW4uc3RyaWRlV2lkdGgsYT1uLmZpbHRlckhlaWdodCxpPW4uZmlsdGVyV2lkdGgscz1uLmRpbGF0aW9uSGVpZ2h0LHU9bi5kaWxhdGlvbldpZHRoLGw9bi5lZmZlY3RpdmVGaWx0ZXJIZWlnaHQsYz1uLmVmZmVjdGl2ZUZpbHRlcldpZHRoLGg9Yy0xLW4ucGFkSW5mby5sZWZ0LHA9bC0xLW4ucGFkSW5mby50b3AsZj1abihlLnNoYXBlLFwiZmxvYXQzMlwiKSxkPTEvKGEqaSksdj10aGlzLmJ1ZmZlclN5bmModCksbT0wO208bi5iYXRjaFNpemU7KyttKWZvcih2YXIgZz0wO2c8bi5pbkNoYW5uZWxzOysrZylmb3IodmFyIHk9MDt5PG4uaW5IZWlnaHQ7Kyt5KWZvcih2YXIgeD0wO3g8bi5pbldpZHRoOysreCl7Zm9yKHZhciBiPXktcCx3PXgtaCxDPTAsRT0wO0U8bDtFKz1zKXt2YXIgUj0oYitFKS9yO2lmKCEoUjwwfHxSPj1uLm91dEhlaWdodHx8TWF0aC5mbG9vcihSKSE9PVIpKWZvcih2YXIgST0wO0k8YztJKz11KXt2YXIgaz0odytJKS9vO2lmKCEoazwwfHxrPj1uLm91dFdpZHRofHxNYXRoLmZsb29yKGspIT09aykpQys9di5nZXQobSxSLGssZyl9fWYuc2V0KEMqZCxtLHkseCxnKX1yZXR1cm4gZi50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5wb29sM2Q9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwicG9vbDNkXCIpO2Zvcih2YXIgcj1lLnN0cmlkZURlcHRoLG89ZS5zdHJpZGVIZWlnaHQsYT1lLnN0cmlkZVdpZHRoLGk9ZS5kaWxhdGlvbkRlcHRoLHM9ZS5kaWxhdGlvbkhlaWdodCx1PWUuZGlsYXRpb25XaWR0aCxsPWUuZWZmZWN0aXZlRmlsdGVyRGVwdGgsYz1lLmVmZmVjdGl2ZUZpbHRlckhlaWdodCxoPWUuZWZmZWN0aXZlRmlsdGVyV2lkdGgscD1lLnBhZEluZm8uZnJvbnQsZj1lLnBhZEluZm8udG9wLGQ9ZS5wYWRJbmZvLmxlZnQsdj1cIm1heFwiPT09bj9OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk6TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZLG09dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZz1abihlLm91dFNoYXBlLHQuZHR5cGUpLHk9Zy52YWx1ZXMseD1lLm91dFNoYXBlWzFdKmUub3V0U2hhcGVbMl0qZS5vdXRTaGFwZVszXSplLm91dFNoYXBlWzRdLGI9ZS5vdXRTaGFwZVsyXSplLm91dFNoYXBlWzNdKmUub3V0U2hhcGVbNF0sdz1lLm91dFNoYXBlWzNdKmUub3V0U2hhcGVbNF0sQz1lLm91dFNoYXBlWzRdLEU9MDtFPGUuYmF0Y2hTaXplOysrRSlmb3IodmFyIFI9RSp4LEk9RSp0LnN0cmlkZXNbMF0saz0wO2s8ZS5pbkNoYW5uZWxzOysraylmb3IodmFyIE49MDtOPGUub3V0RGVwdGg7KytOKXtmb3IodmFyIFM9TipyLXAsQT1TO0E8MDspQSs9aTtmb3IodmFyIFQ9TWF0aC5taW4oZS5pbkRlcHRoLGwrUyksRD1SK04qYixfPTA7XzxlLm91dEhlaWdodDsrK18pe2Zvcih2YXIgTz1fKm8tZixGPU87RjwwOylGKz1zO2Zvcih2YXIgTT1NYXRoLm1pbihlLmluSGVpZ2h0LGMrTyksQj1EK18qdyxQPTA7UDxlLm91dFdpZHRoOysrUCl7Zm9yKHZhciBMPVAqYS1kLFc9TDtXPDA7KVcrPXU7Zm9yKHZhciBVPU1hdGgubWluKGUuaW5XaWR0aCxoK0wpLFY9QitQKkMsej12LEc9MCxIPTAscT1BO3E8VDtxKz1pKXtmb3IodmFyICQ9SStxKnQuc3RyaWRlc1sxXSxLPUY7SzxNO0srPXMpe2Zvcih2YXIgaj0kK0sqdC5zdHJpZGVzWzJdLFg9VztYPFU7WCs9dSl7dmFyIFk9bVtqK1gqdC5zdHJpZGVzWzNdK2tdO2lmKFwibWF4XCI9PT1uJiZZPno/ej1ZOlwiYXZnXCI9PT1uJiYoRys9WSxIKyspLGlzTmFOKHopKWJyZWFrfWlmKGlzTmFOKHopKWJyZWFrfWlmKGlzTmFOKHopKWJyZWFrfXlbVitrXT1cImF2Z1wiPT09bj9HL0g6en19fXJldHVybiBnLnRvVGVuc29yKCl9LHQucHJvdG90eXBlLmF2Z1Bvb2wzZD1mdW5jdGlvbih0LGUpe3JldHVybiB0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImF2Z1Bvb2wzZFwiKSx0aGlzLnBvb2wzZCh0LGUsXCJhdmdcIikudG9GbG9hdCgpfSx0LnByb3RvdHlwZS5hdmdQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwiYXZnUG9vbDNkQmFja3Byb3BcIik7Zm9yKHZhciByPW4uc3RyaWRlRGVwdGgsbz1uLnN0cmlkZUhlaWdodCxhPW4uc3RyaWRlV2lkdGgsaT1uLmZpbHRlckRlcHRoLHM9bi5maWx0ZXJIZWlnaHQsdT1uLmZpbHRlcldpZHRoLGw9bi5kaWxhdGlvbkRlcHRoLGM9bi5kaWxhdGlvbkhlaWdodCxoPW4uZGlsYXRpb25XaWR0aCxwPW4uZWZmZWN0aXZlRmlsdGVyRGVwdGgsZj1uLmVmZmVjdGl2ZUZpbHRlckhlaWdodCxkPW4uZWZmZWN0aXZlRmlsdGVyV2lkdGgsdj1wLTEtbi5wYWRJbmZvLmZyb250LG09ZC0xLW4ucGFkSW5mby5sZWZ0LGc9Zi0xLW4ucGFkSW5mby50b3AseT1abihlLnNoYXBlLFwiZmxvYXQzMlwiKSx4PTEvKGkqcyp1KSxiPXRoaXMuYnVmZmVyU3luYyh0KSx3PTA7dzxuLmJhdGNoU2l6ZTsrK3cpZm9yKHZhciBDPTA7QzxuLmluQ2hhbm5lbHM7KytDKWZvcih2YXIgRT0wO0U8bi5pbkRlcHRoOysrRSlmb3IodmFyIFI9MDtSPG4uaW5IZWlnaHQ7KytSKWZvcih2YXIgST0wO0k8bi5pbldpZHRoOysrSSl7Zm9yKHZhciBrPUUtdixOPVItZyxTPUktbSxBPTAsVD0wO1Q8cDtUKz1sKXt2YXIgRD0oaytUKS9yO2lmKCEoRDwwfHxEPj1uLm91dERlcHRofHxNYXRoLmZsb29yKEQpIT09RCkpZm9yKHZhciBfPTA7XzxmO18rPWMpe3ZhciBPPShOK18pL287aWYoIShPPDB8fE8+PW4ub3V0SGVpZ2h0fHxNYXRoLmZsb29yKE8pIT09TykpZm9yKHZhciBGPTA7RjxkO0YrPWgpe3ZhciBNPShTK0YpL2E7aWYoIShNPDB8fE0+PW4ub3V0V2lkdGh8fE1hdGguZmxvb3IoTSkhPT1NKSlBKz1iLmdldCh3LEQsTyxNLEMpfX19eS5zZXQoQSp4LHcsRSxSLEksQyl9cmV0dXJuIHkudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUubWF4UG9vbDNkPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwibWF4UG9vbDNkXCIpLHRoaXMucG9vbDNkKHQsZSxcIm1heFwiKS50b0Zsb2F0KCl9LHQucHJvdG90eXBlLm1heFBvb2wzZFBvc2l0aW9ucz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1abihlLm91dFNoYXBlLFwiaW50MzJcIikscj1lLnN0cmlkZURlcHRoLG89ZS5zdHJpZGVIZWlnaHQsYT1lLnN0cmlkZVdpZHRoLGk9ZS5kaWxhdGlvbkRlcHRoLHM9ZS5kaWxhdGlvbkhlaWdodCx1PWUuZGlsYXRpb25XaWR0aCxsPWUuZWZmZWN0aXZlRmlsdGVyRGVwdGgsYz1lLmVmZmVjdGl2ZUZpbHRlckhlaWdodCxoPWUuZWZmZWN0aXZlRmlsdGVyV2lkdGgscD1lLnBhZEluZm8uZnJvbnQsZj1lLnBhZEluZm8udG9wLGQ9ZS5wYWRJbmZvLmxlZnQsdj10aGlzLmJ1ZmZlclN5bmModCksbT0wO208ZS5iYXRjaFNpemU7KyttKWZvcih2YXIgZz0wO2c8ZS5pbkNoYW5uZWxzOysrZylmb3IodmFyIHk9MDt5PGUub3V0RGVwdGg7Kyt5KXtmb3IodmFyIHg9eSpyLXAsYj14O2I8MDspYis9aTtmb3IodmFyIHc9TWF0aC5taW4oZS5pbkRlcHRoLGwreCksQz0wO0M8ZS5vdXRIZWlnaHQ7KytDKXtmb3IodmFyIEU9QypvLWYsUj1FO1I8MDspUis9cztmb3IodmFyIEk9TWF0aC5taW4oZS5pbkhlaWdodCxjK0UpLGs9MDtrPGUub3V0V2lkdGg7KytrKXtmb3IodmFyIE49ayphLWQsUz1OO1M8MDspUys9dTtmb3IodmFyIEE9TWF0aC5taW4oZS5pbldpZHRoLGgrTiksVD1OdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFksRD0tMSxfPWI7Xzx3O18rPWkpZm9yKHZhciBPPV8teCxGPVI7RjxJO0YrPXMpZm9yKHZhciBNPUYtRSxCPVM7QjxBO0IrPXUpe3ZhciBQPUItTixMPXYuZ2V0KG0sXyxGLEIsZyk7TD49VCYmKFQ9TCxEPU8qYypoK00qYytQKX1uLnNldChELG0seSxDLGssZyl9fX1yZXR1cm4gbi50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5tYXhQb29sM2RCYWNrcHJvcD1mdW5jdGlvbih0LGUsbixyKXt0aGlzLmFzc2VydE5vdENvbXBsZXgoW2Usbl0sXCJtYXhQb29sM2RCYWNrcHJvcFwiKTtmb3IodmFyIG89dGhpcy5tYXhQb29sM2RQb3NpdGlvbnMoZSxyKSxhPXIuc3RyaWRlRGVwdGgsaT1yLnN0cmlkZUhlaWdodCxzPXIuc3RyaWRlV2lkdGgsdT1yLmRpbGF0aW9uRGVwdGgsbD1yLmRpbGF0aW9uSGVpZ2h0LGM9ci5kaWxhdGlvbldpZHRoLGg9ci5lZmZlY3RpdmVGaWx0ZXJEZXB0aCxwPXIuZWZmZWN0aXZlRmlsdGVySGVpZ2h0LGY9ci5lZmZlY3RpdmVGaWx0ZXJXaWR0aCxkPWgtMS1yLnBhZEluZm8uZnJvbnQsdj1mLTEtci5wYWRJbmZvLmxlZnQsbT1wLTEtci5wYWRJbmZvLnRvcCxnPVpuKGUuc2hhcGUsXCJmbG9hdDMyXCIpLHk9dGhpcy5idWZmZXJTeW5jKG8pLHg9dGhpcy5idWZmZXJTeW5jKHQpLGI9MDtiPHIuYmF0Y2hTaXplOysrYilmb3IodmFyIHc9MDt3PHIuaW5DaGFubmVsczsrK3cpZm9yKHZhciBDPTA7QzxyLmluRGVwdGg7KytDKWZvcih2YXIgRT0wO0U8ci5pbkhlaWdodDsrK0UpZm9yKHZhciBSPTA7UjxyLmluV2lkdGg7KytSKXtmb3IodmFyIEk9Qy1kLGs9RS1tLE49Ui12LFM9MCxBPTA7QTxoO0ErPXUpe3ZhciBUPShJK0EpL2E7aWYoIShUPDB8fFQ+PXIub3V0RGVwdGh8fE1hdGguZmxvb3IoVCkhPT1UKSlmb3IodmFyIEQ9MDtEPHA7RCs9bCl7dmFyIF89KGsrRCkvaTtpZighKF88MHx8Xz49ci5vdXRIZWlnaHR8fE1hdGguZmxvb3IoXykhPT1fKSlmb3IodmFyIE89MDtPPGY7Tys9Yyl7dmFyIEY9KE4rTykvcztpZighKEY8MHx8Rj49ci5vdXRXaWR0aHx8TWF0aC5mbG9vcihGKSE9PUYpKXt2YXIgTT1oKnAqZi0xLXkuZ2V0KGIsVCxfLEYsdyk9PT1BKnAqZitEKmYrTz8xOjA7aWYoMCE9PU0pUys9eC5nZXQoYixULF8sRix3KSpNfX19fWcuc2V0KFMsYixDLEUsUix3KX1yZXR1cm4gZy50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5jYXN0PWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG1vKHQsZSx0aGlzKX0sdC5wcm90b3R5cGUucmVzaGFwZT1mdW5jdGlvbih0LGUpe3JldHVybiBnbyh0LGUpfSx0LnByb3RvdHlwZS5hdmdQb29sPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwiYXZnUG9vbFwiKSx0aGlzLnBvb2wodCxlLFwiYXZnXCIpLnRvRmxvYXQoKX0sdC5wcm90b3R5cGUucmVzaXplQmlsaW5lYXI9ZnVuY3Rpb24odCxlLG4scil7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJyZXNpemVCaWxpbmVhclwiKTtmb3IodmFyIG89dC5zaGFwZSxhPW9bMF0saT1vWzFdLHM9b1syXSx1PW9bM10sbD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxjPW5ldyBGbG9hdDMyQXJyYXkoZyhbYSxlLG4sdV0pKSxoPVtyJiZlPjE/aS0xOmksciYmbj4xP3MtMTpzXSxwPVtyJiZlPjE/ZS0xOmUsciYmbj4xP24tMTpuXSxmPTAsZD1oWzBdL3BbMF0sdj1oWzFdL3BbMV0sbT0wO208YTttKyspZm9yKHZhciB5PTA7eTxlO3krKylmb3IodmFyIHg9ZCp5LGI9TWF0aC5mbG9vcih4KSx3PXgtYixDPU1hdGgubWluKGktMSxNYXRoLmNlaWwoeCkpLEU9bSp0LnN0cmlkZXNbMF0rYip0LnN0cmlkZXNbMV0sUj1tKnQuc3RyaWRlc1swXStDKnQuc3RyaWRlc1sxXSxJPTA7STxuO0krKylmb3IodmFyIGs9dipJLE49TWF0aC5mbG9vcihrKSxTPWstTixBPU1hdGgubWluKHMtMSxNYXRoLmNlaWwoaykpLFQ9RStOKnQuc3RyaWRlc1syXSxEPVIrTip0LnN0cmlkZXNbMl0sXz1FKyArQSp0LnN0cmlkZXNbMl0sTz1SK0EqdC5zdHJpZGVzWzJdLEY9MDtGPHU7RisrKXt2YXIgTT1sW1QrRl0sQj1sW0QrRl0sUD1NKyhsW18rRl0tTSkqUyxMPVArKEIrKGxbTytGXS1CKSpTLVApKnc7Y1tmKytdPUx9cmV0dXJuIHhuKGMsW2EsZSxuLHVdKX0sdC5wcm90b3R5cGUucmVzaXplQmlsaW5lYXJCYWNrcHJvcD1mdW5jdGlvbih0LGUsbil7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGVdLFwicmVzaXplQmlsaW5lYXJCYWNrcHJvcFwiKTtmb3IodmFyIHI9ZS5zaGFwZSxvPXJbMF0sYT1yWzFdLGk9clsyXSxzPXJbM10sdT10LnNoYXBlLGw9dVsxXSxjPXVbMl0saD1uZXcgRmxvYXQzMkFycmF5KG8qYSppKnMpLHA9W24mJmw+MT9hLTE6YSxuJiZjPjE/aS0xOmldLGY9W24mJmw+MT9sLTE6bCxuJiZjPjE/Yy0xOmNdLGQ9cFswXS9mWzBdLHY9cFsxXS9mWzFdLG09dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksZz0wLHk9MDt5PG87eSsrKWZvcih2YXIgeD15KmUuc3RyaWRlc1swXSxiPTA7YjxsO2IrKylmb3IodmFyIHc9YipkLEM9TWF0aC5mbG9vcih3KSxFPU1hdGgubWluKE1hdGguY2VpbCh3KSxhLTEpLFI9eCtDKmUuc3RyaWRlc1sxXSxJPXgrRSplLnN0cmlkZXNbMV0saz13LUMsTj0xLWssUz0wO1M8YztTKyspZm9yKHZhciBBPVMqdixUPU1hdGguZmxvb3IoQSksRD1NYXRoLm1pbihNYXRoLmNlaWwoQSksaS0xKSxfPUEtVCxPPTEtXyxGPVIrVCplLnN0cmlkZXNbMl0sTT1SK0QqZS5zdHJpZGVzWzJdLEI9SStUKmUuc3RyaWRlc1syXSxQPUkrRCplLnN0cmlkZXNbMl0sTD1OKk8sVz1OKl8sVT1rKk8sVj1rKl8sej0wO3o8czt6Kyspe3ZhciBHPW1bZysrXTtoW0Yrel0rPUcqTCxoW00rel0rPUcqVyxoW0Irel0rPUcqVSxoW1Arel0rPUcqVn1yZXR1cm4gSW4oaCxbbyxpLGEsc10sZS5kdHlwZSl9LHQucHJvdG90eXBlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvcj1mdW5jdGlvbih0LGUsbixyKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcInJlc2l6ZU5lYXJlc3ROZWlnaGJvclwiKTtmb3IodmFyIG89dC5zaGFwZSxhPW9bMF0saT1vWzFdLHM9b1syXSx1PW9bM10sbD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxjPW5ldyBGbG9hdDMyQXJyYXkoYSplKm4qdSksaD1bciYmZT4xP2ktMTppLHImJm4+MT9zLTE6c10scD1bciYmZT4xP2UtMTplLHImJm4+MT9uLTE6bl0sZj1oWzBdL3BbMF0sZD1oWzFdL3BbMV0sdj0wLG09MDttPGE7bSsrKWZvcih2YXIgZz1tKnQuc3RyaWRlc1swXSx5PTA7eTxlO3krKylmb3IodmFyIHg9Zip5LGI9ZytNYXRoLm1pbihpLTEscj9NYXRoLnJvdW5kKHgpOk1hdGguZmxvb3IoeCkpKnQuc3RyaWRlc1sxXSx3PTA7dzxuO3crKylmb3IodmFyIEM9ZCp3LEU9YitNYXRoLm1pbihzLTEscj9NYXRoLnJvdW5kKEMpOk1hdGguZmxvb3IoQykpKnQuc3RyaWRlc1syXSxSPTA7Ujx1O1IrKyl7dmFyIEk9bFtFK1JdO2NbdisrXT1JfXJldHVybiB4bihjLFthLGUsbix1XSx0LmR0eXBlKX0sdC5wcm90b3R5cGUucmVzaXplTmVhcmVzdE5laWdoYm9yQmFja3Byb3A9ZnVuY3Rpb24odCxlLG4pe3RoaXMuYXNzZXJ0Tm90Q29tcGxleChbdCxlXSxcInJlc2l6ZU5lYXJlc3ROZWlnaGJvckJhY2twcm9wXCIpO2Zvcih2YXIgcj1lLnNoYXBlLG89clswXSxhPXJbMV0saT1yWzJdLHM9clszXSx1PXQuc2hhcGUsbD11WzFdLGM9dVsyXSxoPW5ldyBGbG9hdDMyQXJyYXkobyphKmkqcykscD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxmPVtuJiZsPjE/YS0xOmEsbiYmYz4xP2ktMTppXSxkPVtuJiZsPjE/bC0xOmwsbiYmYz4xP2MtMTpjXSx2PWZbMF0vZFswXSxtPWZbMV0vZFsxXSxnPTEvdix5PTEvbSx4PTIqTWF0aC5jZWlsKGcpKzIsYj0yKk1hdGguY2VpbCh5KSsyLHc9MDt3PG87dysrKWZvcih2YXIgQz13KmUuc3RyaWRlc1swXSxFPTA7RTxhO0UrKylmb3IodmFyIFI9QytFKmUuc3RyaWRlc1sxXSxJPU1hdGguZmxvb3IoRSpnKSxrPU1hdGguZmxvb3IoSS14LzIpLE49MDtOPGk7TisrKWZvcih2YXIgUz1SK04qZS5zdHJpZGVzWzJdLEE9TWF0aC5mbG9vcihOKnkpLFQ9TWF0aC5mbG9vcihBLWIvMiksRD0wO0Q8cztEKyspe2Zvcih2YXIgXz0wLE89MDtPPHg7TysrKXt2YXIgRj1PK2s7aWYoIShGPDB8fEY+PWwpKXt2YXIgTT1DK0YqdC5zdHJpZGVzWzFdLEI9Rip2O2lmKEU9PT1NYXRoLm1pbihhLTEsbj9NYXRoLnJvdW5kKEIpOk1hdGguZmxvb3IoQikpKWZvcih2YXIgUD0wO1A8YjtQKyspe3ZhciBMPVArVDtpZighKEw8MHx8TD49Yykpe3ZhciBXPU0rTCp0LnN0cmlkZXNbMl0sVT1MKm07Tj09PU1hdGgubWluKGktMSxuP01hdGgucm91bmQoVSk6TWF0aC5mbG9vcihVKSkmJihfKz1wW1crRF0pfX19fWhbUytEXT1ffXJldHVybiBJbihoLGUuc2hhcGUsZS5kdHlwZSl9LHQucHJvdG90eXBlLmJhdGNoTm9ybWFsaXphdGlvbj1mdW5jdGlvbih0LGUsbixyLG8sYSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KFt0LGUsbixvLGFdLFwiYmF0Y2hOb3JtXCIpO2Zvcih2YXIgaT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxzPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHU9dGhpcy5yZWFkU3luYyhuLmRhdGFJZCksbD1vP3RoaXMucmVhZFN5bmMoby5kYXRhSWQpOm5ldyBGbG9hdDMyQXJyYXkoWzFdKSxjPWE/dGhpcy5yZWFkU3luYyhhLmRhdGFJZCk6bmV3IEZsb2F0MzJBcnJheShbMF0pLGg9bmV3IEZsb2F0MzJBcnJheShpLmxlbmd0aCkscD1jLmxlbmd0aCxmPWwubGVuZ3RoLGQ9dS5sZW5ndGgsdj1zLmxlbmd0aCxtPTAsZz0wLHk9MCx4PTAsYj0wO2I8aS5sZW5ndGg7KytiKWhbYl09Y1ttKytdKyhpW2JdLXNbZysrXSkqbFt5KytdL01hdGguc3FydCh1W3grK10rciksbT49cCYmKG09MCksZz49diYmKGc9MCkseT49ZiYmKHk9MCkseD49ZCYmKHg9MCk7cmV0dXJuIEluKGgsdC5zaGFwZSl9LHQucHJvdG90eXBlLmxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uNEQ9ZnVuY3Rpb24odCxlLG4scixvKXt0aGlzLmFzc2VydE5vdENvbXBsZXgodCxcImxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uNERcIik7dmFyIGE9dC5zaGFwZVszXSxpPWEtMSxzPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLHU9dC5zaXplLGw9bmV3IEZsb2F0MzJBcnJheSh1KTtmdW5jdGlvbiBjKHQpe2Zvcih2YXIgbj10JWEscj10LW4rTWF0aC5tYXgoMCxuLWUpLG89dC1uK01hdGgubWluKG4rZSxpKSx1PTA7cjw9bztyKyspe3ZhciBsPXNbcl07dSs9bCpsfXJldHVybiB1fWZvcih2YXIgaD0wO2g8dTtoKyspe3ZhciBwPWMoaCksZj1zW2hdKk1hdGgucG93KG4rcipwLC1vKTtsW2hdPWZ9cmV0dXJuIEluKGwsdC5zaGFwZSl9LHQucHJvdG90eXBlLkxSTkdyYWQ9ZnVuY3Rpb24odCxlLG4scixvLGEsaSl7dGhpcy5hc3NlcnROb3RDb21wbGV4KHQsXCJMUk5HcmFkXCIpO2Zvcih2YXIgcz10LnNoYXBlWzNdLHU9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksbD10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSxjPXRoaXMucmVhZFN5bmMobi5kYXRhSWQpLGg9bmV3IEZsb2F0MzJBcnJheSh0LnNpemUpLHA9dC5zaXplLGY9MDtmPHA7ZisrKXtmb3IodmFyIGQ9ZiVzLHY9Zi1kK01hdGgubWF4KDAsZC1yKSxtPWYtZCtNYXRoLm1pbihzLGQrcisxKSxnPTAseT12O3k8bTt5KyspZys9TWF0aC5wb3cobFt5XSwyKTtnPWEqZytvO2Zvcih5PXY7eTxtO3krKyl7dmFyIHg9LTIqYSppKmxbeV0qY1tmXS9nO2Y9PT15JiYoeCs9TWF0aC5wb3coZywtaSkpLHgqPXVbZl0saFt5XSs9eH19cmV0dXJuIEluKGgsdC5zaGFwZSl9LHQucHJvdG90eXBlLm11bHRpbm9taWFsPWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwibXVsdGlub21pYWxcIik7Zm9yKHZhciBvPWU/dDpZcih0KSxhPW8uc2hhcGVbMF0saT1vLnNoYXBlWzFdLHM9QW4oW2Esbl0sXCJpbnQzMlwiKSx1PXRoaXMucmVhZFN5bmMocy5kYXRhSWQpLGw9dGhpcy5yZWFkU3luYyhvLmRhdGFJZCksYz0wO2M8YTsrK2Mpe3ZhciBoPWMqaSxwPW5ldyBGbG9hdDMyQXJyYXkoaS0xKTtwWzBdPWxbaF07Zm9yKHZhciBmPTE7ZjxwLmxlbmd0aDsrK2YpcFtmXT1wW2YtMV0rbFtoK2ZdO2Zvcih2YXIgZD1YbihyLnRvU3RyaW5nKCkpLHY9YypuLG09MDttPG47KyttKXt2YXIgZz1kKCk7dVt2K21dPXAubGVuZ3RoO2Zvcih2YXIgeT0wO3k8cC5sZW5ndGg7eSsrKWlmKGc8cFt5XSl7dVt2K21dPXk7YnJlYWt9fX1yZXR1cm4gc30sdC5wcm90b3R5cGUub25lSG90PWZ1bmN0aW9uKHQsZSxuLHIpe3RoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwib25lSG90XCIpO3ZhciBvPW5ldyBGbG9hdDMyQXJyYXkodC5zaXplKmUpO28uZmlsbChyKTtmb3IodmFyIGE9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksaT0wO2k8dC5zaXplOysraSlhW2ldPj0wJiZhW2ldPGUmJihvW2kqZSthW2ldXT1uKTtyZXR1cm4gRW4obyxbdC5zaXplLGVdLFwiaW50MzJcIil9LHQucHJvdG90eXBlLm5vbk1heFN1cHByZXNzaW9uPWZ1bmN0aW9uKHQsZSxuLHIsbyl7cmV0dXJuIHRoaXMuYXNzZXJ0Tm90Q29tcGxleCh0LFwibm9uTWF4U3VwcHJlc3Npb25cIiksUm8odGhpcy5yZWFkU3luYyh0LmRhdGFJZCksdGhpcy5yZWFkU3luYyhlLmRhdGFJZCksbixyLG8pfSx0LnByb3RvdHlwZS5mZnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZmZ0QmF0Y2godCwhMSl9LHQucHJvdG90eXBlLmlmZnQ9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZmZ0QmF0Y2godCwhMCl9LHQucHJvdG90eXBlLmZmdEJhdGNoPWZ1bmN0aW9uKHQsZSl7Zm9yKHZhciBuPXQuc2hhcGVbMF0scj10LnNoYXBlWzFdLG89Wm4odC5zaGFwZSxcImZsb2F0MzJcIiksYT1abih0LnNoYXBlLFwiZmxvYXQzMlwiKSxpPWduKHQpLmFzMkQobixyKSxzPXluKHQpLmFzMkQobixyKSx1PTA7dTxuO3UrKylmb3IodmFyIGw9aS5zbGljZShbdSwwXSxbMSxyXSksYz1zLnNsaWNlKFt1LDBdLFsxLHJdKSxoPW1uKGwsYykscD10aGlzLnJlYWRTeW5jKHRoaXMuZmZ0SW1wbChoLGUpLmRhdGFJZCksZj0wO2Y8cjtmKyspe3ZhciBkPXdvKHAsZik7by52YWx1ZXNbdSpyK2ZdPWQucmVhbCxhLnZhbHVlc1t1KnIrZl09ZC5pbWFnfXJldHVybiBtbihvLnRvVGVuc29yKCksYS50b1RlbnNvcigpKS5hczJEKG4scil9LHQucHJvdG90eXBlLmZmdEltcGw9ZnVuY3Rpb24odCxlKXt2YXIgbj10LmFzMUQoKSxyPW4uc2l6ZTtpZih0aGlzLmlzRXhwb25lbnRPZjIocikpe3ZhciBvPXRoaXMuZmZ0UmFkaXgyKG4scixlKS5hczJEKHQuc2hhcGVbMF0sdC5zaGFwZVsxXSk7cmV0dXJuIGUmJihvPW1uKGduKG8pLmRpdih3bihyKSkseW4obykuZGl2KHduKHIpKSkpLG99dmFyIGE9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCksaT1mdW5jdGlvbih0KXtmb3IodmFyIGU9bmV3IEZsb2F0MzJBcnJheSh0Lmxlbmd0aC8yKSxuPW5ldyBGbG9hdDMyQXJyYXkodC5sZW5ndGgvMikscj0wO3I8dC5sZW5ndGg7cis9MillW3IvMl09dFtyXSxuW3IvMl09dFtyKzFdO3JldHVybntyZWFsOmUsaW1hZzpufX0odGhpcy5mb3VyaWVyVHJhbnNmb3JtQnlNYXRtdWwoYSxyLGUpKTtyZXR1cm4gbW4oaS5yZWFsLGkuaW1hZykuYXMyRCh0LnNoYXBlWzBdLHQuc2hhcGVbMV0pfSx0LnByb3RvdHlwZS5pc0V4cG9uZW50T2YyPWZ1bmN0aW9uKHQpe3JldHVybiAwPT0odCZ0LTEpfSx0LnByb3RvdHlwZS5mZnRSYWRpeDI9ZnVuY3Rpb24odCxlLG4pe2lmKDE9PT1lKXJldHVybiB0O3ZhciByPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLG89ZS8yLGE9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPU1hdGguY2VpbCh0Lmxlbmd0aC80KSxuPW5ldyBGbG9hdDMyQXJyYXkoZSkscj1uZXcgRmxvYXQzMkFycmF5KGUpLG89MDtvPHQubGVuZ3RoO28rPTQpbltNYXRoLmZsb29yKG8vNCldPXRbb10scltNYXRoLmZsb29yKG8vNCldPXRbbysxXTtyZXR1cm57cmVhbDpuLGltYWc6cn19KHIpLGk9bW4oYS5yZWFsLGEuaW1hZykuYXMxRCgpLHM9ZnVuY3Rpb24odCl7Zm9yKHZhciBlPU1hdGguZmxvb3IodC5sZW5ndGgvNCksbj1uZXcgRmxvYXQzMkFycmF5KGUpLHI9bmV3IEZsb2F0MzJBcnJheShlKSxvPTI7bzx0Lmxlbmd0aDtvKz00KW5bTWF0aC5mbG9vcihvLzQpXT10W29dLHJbTWF0aC5mbG9vcihvLzQpXT10W28rMV07cmV0dXJue3JlYWw6bixpbWFnOnJ9fShyKSx1PW1uKHMucmVhbCxzLmltYWcpLmFzMUQoKTtpPXRoaXMuZmZ0UmFkaXgyKGksbyxuKSx1PXRoaXMuZmZ0UmFkaXgyKHUsbyxuKTt2YXIgbD1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1uZXcgRmxvYXQzMkFycmF5KHQvMikscj1uZXcgRmxvYXQzMkFycmF5KHQvMiksbz0wO288TWF0aC5jZWlsKHQvMik7bysrKXt2YXIgYT0oZT8yOi0yKSpNYXRoLlBJKihvL3QpO25bb109TWF0aC5jb3MoYSkscltvXT1NYXRoLnNpbihhKX1yZXR1cm57cmVhbDpuLGltYWc6cn19KGUsbiksYz1tbihsLnJlYWwsbC5pbWFnKS5tdWwodSksaD1pLmFkZChjKSxwPWkuc3ViKGMpLGY9Z24oaCkuY29uY2F0KGduKHApKSxkPXluKGgpLmNvbmNhdCh5bihwKSk7cmV0dXJuIG1uKGYsZCkuYXMxRCgpfSx0LnByb3RvdHlwZS5mb3VyaWVyVHJhbnNmb3JtQnlNYXRtdWw9ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj1uZXcgRmxvYXQzMkFycmF5KDIqZSksbz0wO288ZTtvKyspe2Zvcih2YXIgYT0wLGk9MCxzPTA7czxlO3MrKyl7dmFyIHU9RW8obypzLGUsbiksbD13byh0LHMpO2ErPWwucmVhbCp1LnJlYWwtbC5pbWFnKnUuaW1hZyxpKz1sLnJlYWwqdS5pbWFnK2wuaW1hZyp1LnJlYWx9biYmKGEvPWUsaS89ZSksQ28ocixhLGksbyl9cmV0dXJuIHJ9LHQucHJvdG90eXBlLmRlcHRoVG9TcGFjZT1mdW5jdGlvbih0LGUsbil7ZihcIk5IV0NcIj09PW4sZnVuY3Rpb24oKXtyZXR1cm5cIk9ubHkgTkhXQyBkYXRhRm9ybWF0IHN1cHBvcnRlZCBvbiBDUFUgZm9yIGRlcHRoVG9TcGFjZS4gR290IFwiK259KSxmKGU+MSxmdW5jdGlvbigpe3JldHVyblwiYmxvY2tTaXplIHNob3VsZCBiZSA+IDEgZm9yIGRlcHRoVG9TcGFjZSwgYnV0IHdhczogXCIrZX0pO2Zvcih2YXIgcj10LnNoYXBlWzBdLG89dC5zaGFwZVsxXSxhPXQuc2hhcGVbMl0saT10LnNoYXBlWzNdLHM9byplLHU9YSplLGw9aS8oZSplKSxjPXRoaXMucmVhZFN5bmModC5kYXRhSWQpLGg9bmV3IEZsb2F0MzJBcnJheShyKnMqdSpsKSxwPTAsZD0wO2Q8cjsrK2QpZm9yKHZhciB2PTA7djxzOysrdilmb3IodmFyIG09TWF0aC5mbG9vcih2L2UpLGc9diVlLHk9MDt5PHU7Kyt5KWZvcih2YXIgeD1NYXRoLmZsb29yKHkvZSksYj0oZyplK3klZSkqbCx3PTA7dzxsOysrdyl7dmFyIEM9dytiK2kqKHgrYSoobStvKmQpKTtoW3ArK109Y1tDXX1yZXR1cm4gSW4oaCxbcixzLHUsbF0pfSx0LnByb3RvdHlwZS5icm9hZGNhc3RlZEJpbmFyeU9wPWZ1bmN0aW9uKHQsZSxuLHIpe3ZhciBvPW5vKHQuc2hhcGUsZS5zaGFwZSksYT1abihvLG4pLGk9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscz10aGlzLnJlYWRTeW5jKGUuZGF0YUlkKSx1PXRvKHQuc2hhcGUsbyksbD10byhlLnNoYXBlLG8pLGM9YS52YWx1ZXM7aWYodS5sZW5ndGgrbC5sZW5ndGg9PT0wKWZvcih2YXIgaD0wO2g8Yy5sZW5ndGg7KytoKWNbaF09cihpW2glaS5sZW5ndGhdLHNbaCVzLmxlbmd0aF0pO2Vsc2V7dmFyIHA9dGhpcy5idWZmZXJTeW5jKHQpLGY9dGhpcy5idWZmZXJTeW5jKGUpLGQ9ZnVuY3Rpb24obil7dmFyIG89YS5pbmRleFRvTG9jKG4pLGg9by5zbGljZSgtdC5yYW5rKTt1LmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIGhbdF09MH0pO3ZhciBkPXAubG9jVG9JbmRleChoKSx2PW8uc2xpY2UoLWUucmFuayk7bC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiB2W3RdPTB9KTt2YXIgbT1mLmxvY1RvSW5kZXgodik7Y1tuXT1yKGlbZF0sc1ttXSl9O2ZvcihoPTA7aDxjLmxlbmd0aDsrK2gpZChoKX1yZXR1cm4gYS50b1RlbnNvcigpfSx0LnByb3RvdHlwZS5icm9hZGNhc3RlZEJpbmFyeUNvbXBsZXhPcD1mdW5jdGlvbih0LGUsbil7dmFyIHI9bm8odC5zaGFwZSxlLnNoYXBlKSxvPVpuKHIsXCJmbG9hdDMyXCIpLGE9Wm4ocixcImZsb2F0MzJcIiksaT10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxzPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLHU9dG8odC5zaGFwZSxyKSxsPXRvKGUuc2hhcGUsciksYz1vLnZhbHVlcyxoPWEudmFsdWVzO2lmKHUubGVuZ3RoK2wubGVuZ3RoPT09MClmb3IodmFyIHA9MDtwPGMubGVuZ3RoO3ArKyl7dmFyIGY9cCVpLmxlbmd0aCxkPXAlcy5sZW5ndGgsdj1uKGlbMipmXSxpWzIqZisxXSxzWzIqZF0sc1syKmQrMV0pO2NbcF09di5yZWFsLGhbcF09di5pbWFnfWVsc2V7dmFyIG09dGhpcy5idWZmZXJTeW5jKHRoaXMuZGF0YS5nZXQodC5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzLnJlYWwpLGc9dGhpcy5idWZmZXJTeW5jKHRoaXMuZGF0YS5nZXQoZS5kYXRhSWQpLmNvbXBsZXhUZW5zb3JzLnJlYWwpLHk9ZnVuY3Rpb24ocil7dmFyIGE9by5pbmRleFRvTG9jKHIpLHA9YS5zbGljZSgtdC5yYW5rKTt1LmZvckVhY2goZnVuY3Rpb24odCl7cmV0dXJuIHBbdF09MH0pO3ZhciBmPW0ubG9jVG9JbmRleChwKSxkPWEuc2xpY2UoLWUucmFuayk7bC5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiBkW3RdPTB9KTt2YXIgdj1nLmxvY1RvSW5kZXgoZCkseT1uKGlbMipmXSxpWzIqZisxXSxzWzIqdl0sc1syKnYrMV0pO2Nbcl09eS5yZWFsLGhbcl09eS5pbWFnfTtmb3IocD0wO3A8Yy5sZW5ndGg7cCsrKXkocCl9cmV0dXJuIHRoaXMuY29tcGxleChvLnRvVGVuc29yKCksYS50b1RlbnNvcigpKX0sdC5wcm90b3R5cGUuc3BsaXQ9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBrbyh0LGUsbil9LHQucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt9LHQucHJvdG90eXBlLmZsb2F0UHJlY2lzaW9uPWZ1bmN0aW9uKCl7cmV0dXJuIDMyfSx0LnByb3RvdHlwZS5lcHNpbG9uPWZ1bmN0aW9uKCl7cmV0dXJuIDFlLTd9LHQucHJvdG90eXBlLmNyb3BBbmRSZXNpemU9ZnVuY3Rpb24odCxlLG4scixvLGEpe2Zvcih2YXIgaT10LnNoYXBlLHM9aVswXSx1PWlbMV0sbD1pWzJdLGM9aVszXSxoPWUuc2hhcGVbMF0scD1yWzBdLGY9clsxXSxkPVpuKFtoLHAsZixjXSx0LmR0eXBlKSx2PXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLG09dGhpcy5yZWFkU3luYyhuLmRhdGFJZCksZz10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSx5PXQuc3RyaWRlcyx4PWQuc3RyaWRlcyxiPTA7YjxoO2IrKyl7dmFyIHc9NCpiLEM9dlt3XSxFPXZbdysxXSxSPXZbdysyXSxJPXZbdyszXSxrPW1bYl07aWYoIShrPj1zKSlmb3IodmFyIE49cD4xPyhSLUMpKih1LTEpLyhwLTEpOjAsUz1mPjE/KEktRSkqKGwtMSkvKGYtMSk6MCxBPTA7QTxwO0ErKyl7dmFyIFQ9cD4xP0MqKHUtMSkrQSpOOi41KihDK1IpKih1LTEpO2lmKFQ8MHx8VD51LTEpZm9yKHZhciBEPTA7RDxmO0QrKylmb3IodmFyIF89MDtfPGM7XysrKXt2YXIgTz1fK0QqeFsyXStBKnhbMV0rYip4WzBdO2QudmFsdWVzW09dPWF9ZWxzZSBpZihcImJpbGluZWFyXCI9PT1vKXt2YXIgRj1NYXRoLmZsb29yKFQpLE09TWF0aC5jZWlsKFQpLEI9VC1GO2ZvcihEPTA7RDxmO0QrKyl7aWYoKHE9Zj4xP0UqKGwtMSkrRCpTOi41KihFK0kpKihsLTEpKTwwfHxxPmwtMSlmb3IoXz0wO188YztfKyspe089XytEKnhbMl0rQSp4WzFdK2IqeFswXTtkLnZhbHVlc1tPXT1hfWVsc2V7dmFyIFA9TWF0aC5mbG9vcihxKSxMPU1hdGguY2VpbChxKSxXPXEtUDtmb3IoXz0wO188YztfKyspe3ZhciBVPWdbTz1fK1AqeVsyXStGKnlbMV0rayp5WzBdXSxWPWdbTz1fK0wqeVsyXStGKnlbMV0rayp5WzBdXSx6PWdbTz1fK1AqeVsyXStNKnlbMV0rayp5WzBdXSxHPVUrKFYtVSkqVyxIPXorKGdbTz1fK0wqeVsyXStNKnlbMV0rayp5WzBdXS16KSpXO089XytEKnhbMl0rQSp4WzFdK2IqeFswXSxkLnZhbHVlc1tPXT1HKyhILUcpKkJ9fX19ZWxzZSBmb3IoRD0wO0Q8ZjsrK0Qpe3ZhciBxO2lmKChxPWY+MT9FKihsLTEpK0QqUzouNSooRStJKSoobC0xKSk8MHx8cT5sLTEpZm9yKF89MDtfPGM7XysrKXtPPV8rRCp4WzJdK0EqeFsxXStiKnhbMF07ZC52YWx1ZXNbT109YX1lbHNle3ZhciAkPU1hdGgucm91bmQocSksSz1NYXRoLnJvdW5kKFQpO2ZvcihfPTA7XzxjO18rKyl7dmFyIGo9XyskKnlbMl0rSyp5WzFdK2sqeVswXSxYPV8rRCp4WzJdK0EqeFsxXStiKnhbMF07ZC52YWx1ZXNbWF09Z1tqXX19fX19cmV0dXJuIGQudG9UZW5zb3IoKX0sdC5wcm90b3R5cGUuc3BhcnNlVG9EZW5zZT1mdW5jdGlvbih0LGUsbixyKXt2YXIgbz1CcigwLHQsbiksYT1vLnNsaWNlUmFuayxpPW8ubnVtVXBkYXRlcyxzPW8uc2xpY2VTaXplLHU9by5zdHJpZGVzLGw9by5vdXRwdXRTaXplO3JldHVybiB0aGlzLnNjYXR0ZXIodCxlLG4sbCxzLGksYSx1LHIsITEpfSx0LnByb3RvdHlwZS5nYXRoZXJORD1mdW5jdGlvbih0LGUpe3ZhciBuPWUuc2hhcGUscj1uW24ubGVuZ3RoLTFdLG89X3IodCxlKSxhPW9bMF0saT1vWzFdLHM9b1syXSx1PW9bM107aWYoMD09PWkpcmV0dXJuIHhuKFtdLGEsdC5kdHlwZSk7Zm9yKHZhciBsPW5ldyBpdChbaSxzXSx0LmR0eXBlKSxjPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpLGg9dGhpcy5yZWFkU3luYyh0LmRhdGFJZCkscD0wO3A8aTtwKyspe2Zvcih2YXIgZj1bXSxkPTAsdj0wO3Y8cjt2Kyspe3ZhciBtPWNbcCpyK3ZdO2QrPW0qdVt2XSxmLnB1c2gobSl9aWYoZDwwfHxkPj10LnNpemUvcyl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGluZGljZXM6IFwiK2YrXCIgZG9lcyBub3QgaW5kZXggaW50byBcIit0LnNoYXBlKTtmb3IodmFyIGc9MDtnPHM7ZysrKWwudmFsdWVzW3AqcytnXT1oW2QqcytnXX1yZXR1cm4gbC50b1RlbnNvcigpLnJlc2hhcGUoYSl9LHQucHJvdG90eXBlLnNjYXR0ZXJORD1mdW5jdGlvbih0LGUsbil7dmFyIHI9QnIoMCx0LG4pLG89ci5zbGljZVJhbmssYT1yLm51bVVwZGF0ZXMsaT1yLnNsaWNlU2l6ZSxzPXIuc3RyaWRlcyx1PXIub3V0cHV0U2l6ZSxsPXduKDApO3JldHVybiB0aGlzLnNjYXR0ZXIodCxlLG4sdSxpLGEsbyxzLGwsITApfSx0LnByb3RvdHlwZS5maWxsPWZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1TKG49bnx8TChlKSxnKHQpKTtyZXR1cm4gci5maWxsKGUpLGN0Lm1ha2UodCx7dmFsdWVzOnJ9LG4pfSx0LnByb3RvdHlwZS5vbmVzTGlrZT1mdW5jdGlvbih0KXtpZihcInN0cmluZ1wiPT09dC5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJvbmVzTGlrZSBpcyBub3Qgc3VwcG9ydGVkIGZvciBzdHJpbmcgdGVuc29yc1wiKTtyZXR1cm4gdGhpcy5maWxsKHQuc2hhcGUsMSx0LmR0eXBlKX0sdC5wcm90b3R5cGUuemVyb3NMaWtlPWZ1bmN0aW9uKHQpe3ZhciBlPVModC5kdHlwZSxnKHQuc2hhcGUpKTtyZXR1cm4gY3QubWFrZSh0LnNoYXBlLHt2YWx1ZXM6ZX0sdC5kdHlwZSl9LHQucHJvdG90eXBlLmxpbnNwYWNlPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4geW8odCxlLG4pfSx0LnByb3RvdHlwZS5zY2F0dGVyPWZ1bmN0aW9uKHQsZSxuLHIsbyxhLGkscyx1LGwpe3ZhciBjPVtyL28sb10saD10aGlzLnJlYWRTeW5jKHQuZGF0YUlkKSxwPXRoaXMucmVhZFN5bmMoZS5kYXRhSWQpO2lmKDA9PT1yKXJldHVybiB4bihbXSxuLGUuZHR5cGUpO3ZhciBmPW5ldyBpdChjLGUuZHR5cGUpO2YudmFsdWVzLmZpbGwodGhpcy5yZWFkU3luYyh1LmRhdGFJZClbMF0pO2Zvcih2YXIgZD0wO2Q8YTtkKyspe2Zvcih2YXIgdj1bXSxtPTAsZz0wO2c8aTtnKyspe3ZhciB5PWhbZCppK2ddO3YucHVzaCh5KSxtKz15KnNbZ119aWYobTwwfHxtPj1yL28pdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBpbmRpY2VzOiBcIit2K1wiIGRvZXMgbm90IGluZGV4IGludG8gXCIrbik7Zm9yKHZhciB4PTA7eDxvO3grKylsP2YudmFsdWVzW20qbyt4XSs9cFtkKm8reF06Zi52YWx1ZXNbbSpvK3hdPTA9PT1lLnJhbms/cFswXTpwW2Qqbyt4XX1yZXR1cm4gZi50b1RlbnNvcigpLnJlc2hhcGUobil9LHR9KCk7U3QucmVnaXN0ZXJCYWNrZW5kKFwiY3B1XCIsZnVuY3Rpb24oKXtyZXR1cm4gbmV3IG5ofSwxKTt2YXIgcmg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy50ZXh0RW5jb2Rlcj1uZXcgVGV4dEVuY29kZXJ9cmV0dXJuIHQucHJvdG90eXBlLmZldGNoPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIGZldGNoKHQsZSl9LHQucHJvdG90eXBlLm5vdz1mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX0sdC5wcm90b3R5cGUuZW5jb2RlPWZ1bmN0aW9uKHQsZSl7aWYoXCJ1dGYtOFwiIT09ZSYmXCJ1dGY4XCIhPT1lKXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIncyBlbmNvZGVyIG9ubHkgc3VwcG9ydHMgdXRmLTgsIGJ1dCBnb3QgXCIrZSk7cmV0dXJuIHRoaXMudGV4dEVuY29kZXIuZW5jb2RlKHQpfSx0LnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IFRleHREZWNvZGVyKGUpLmRlY29kZSh0KX0sdH0oKTtpLmdldChcIklTX0JST1dTRVJcIikmJmkuc2V0UGxhdGZvcm0oXCJicm93c2VyXCIsbmV3IHJoKTt2YXIgb2gsYWg9ZnVuY3Rpb24oKXtyZXR1cm4gcmVxdWlyZShcIm5vZGUtZmV0Y2hcIil9LGloPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe3RoaXMudXRpbD1yZXF1aXJlKFwidXRpbFwiKSx0aGlzLnRleHRFbmNvZGVyPW5ldyB0aGlzLnV0aWwuVGV4dEVuY29kZXJ9cmV0dXJuIHQucHJvdG90eXBlLmZldGNoPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG51bGwhPWkuZ2xvYmFsLmZldGNoP2kuZ2xvYmFsLmZldGNoKHQsZSk6KG51bGw9PW9oJiYob2g9YWgoKSksb2godCxlKSl9LHQucHJvdG90eXBlLm5vdz1mdW5jdGlvbigpe3ZhciB0PXByb2Nlc3MuaHJ0aW1lKCk7cmV0dXJuIDFlMyp0WzBdK3RbMV0vMWU2fSx0LnByb3RvdHlwZS5lbmNvZGU9ZnVuY3Rpb24odCxlKXtpZihcInV0Zi04XCIhPT1lJiZcInV0ZjhcIiE9PWUpdGhyb3cgbmV3IEVycm9yKFwiTm9kZSBidWlsdC1pbiBlbmNvZGVyIG9ubHkgc3VwcG9ydHMgdXRmLTgsIGJ1dCBnb3QgXCIrZSk7cmV0dXJuIHRoaXMudGV4dEVuY29kZXIuZW5jb2RlKHQpfSx0LnByb3RvdHlwZS5kZWNvZGU9ZnVuY3Rpb24odCxlKXtyZXR1cm4gMD09PXQubGVuZ3RoP1wiXCI6bmV3IHRoaXMudXRpbC5UZXh0RGVjb2RlcihlKS5kZWNvZGUodCl9LHR9KCk7aS5nZXQoXCJJU19OT0RFXCIpJiZpLnNldFBsYXRmb3JtKFwibm9kZVwiLG5ldyBpaCk7dmFyIHNoPXtmbG9hdDMyOjQsaW50MzI6NCx1aW50MTY6Mix1aW50ODoxLGJvb2w6MX0sdWg9NDtmdW5jdGlvbiBsaCh0LGUpe2Zvcih2YXIgbj17fSxyPTAsbz1mdW5jdGlvbihlKXt2YXIgbz1lLm5hbWUsYT1lLmR0eXBlLGk9ZS5zaGFwZSxzPWcoaSksdT12b2lkIDA7aWYoXCJxdWFudGl6YXRpb25cImluIGUpe3ZhciBsPWUucXVhbnRpemF0aW9uO2lmKFwidWludDhcIiE9PWwuZHR5cGUmJlwidWludDE2XCIhPT1sLmR0eXBlKXRocm93IG5ldyBFcnJvcihcIldlaWdodCBcIitlLm5hbWUrXCIgaGFzIHVua25vd24gcXVhbnRpemF0aW9uIGR0eXBlIFwiK2wuZHR5cGUrXCIuIFN1cHBvcnRlZCBxdWFudGl6YXRpb24gZHR5cGVzIGFyZTogJ3VpbnQ4JyBhbmQgJ3VpbnQxNicuXCIpO3ZhciBjPXNoW2wuZHR5cGVdLGg9dC5zbGljZShyLHIrcypjKSxwPVwidWludDhcIj09PWwuZHR5cGU/bmV3IFVpbnQ4QXJyYXkoaCk6bmV3IFVpbnQxNkFycmF5KGgpO2lmKFwiZmxvYXQzMlwiPT09YSl1PUZsb2F0MzJBcnJheS5mcm9tKHAsZnVuY3Rpb24odCl7cmV0dXJuIHQqbC5zY2FsZStsLm1pbn0pO2Vsc2V7aWYoXCJpbnQzMlwiIT09YSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBkdHlwZSBpbiB3ZWlnaHQgJ1wiK28rXCInOiBcIithKTt1PUludDMyQXJyYXkuZnJvbShwLGZ1bmN0aW9uKHQpe3JldHVybiBNYXRoLnJvdW5kKHQqbC5zY2FsZStsLm1pbil9KX1yKz1zKmN9ZWxzZSBpZihcInN0cmluZ1wiPT09YSl7dmFyIGY9ZyhlLnNoYXBlKTt1PVtdO2Zvcih2YXIgZD0wO2Q8ZjtkKyspe3ZhciB2PW5ldyBVaW50MzJBcnJheSh0LnNsaWNlKHIscit1aCkpWzBdO3IrPXVoO3ZhciBtPW5ldyBVaW50OEFycmF5KHQuc2xpY2UocixyK3YpKTt1LnB1c2gobSkscis9dn19ZWxzZXt2YXIgeT1zaFthXTtoPXQuc2xpY2UocixyK3MqeSk7aWYoXCJmbG9hdDMyXCI9PT1hKXU9bmV3IEZsb2F0MzJBcnJheShoKTtlbHNlIGlmKFwiaW50MzJcIj09PWEpdT1uZXcgSW50MzJBcnJheShoKTtlbHNle2lmKFwiYm9vbFwiIT09YSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCBkdHlwZSBpbiB3ZWlnaHQgJ1wiK28rXCInOiBcIithKTt1PW5ldyBVaW50OEFycmF5KGgpfXIrPXMqeX1uW29dPXhuKHUsaSxhKX0sYT0wLGk9ZTthPGkubGVuZ3RoO2ErKyl7byhpW2FdKX1yZXR1cm4gbn1mdW5jdGlvbiBjaCh0KXtpZihudWxsPT09dCl0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGlucHV0IHZhbHVlOiBcIitKU09OLnN0cmluZ2lmeSh0KSk7dmFyIGU9MCxuPVtdO3QuZm9yRWFjaChmdW5jdGlvbih0KXtpZihlKz10LmJ5dGVMZW5ndGgsbi5wdXNoKHQuYnl0ZUxlbmd0aD09PXQuYnVmZmVyLmJ5dGVMZW5ndGg/dDpuZXcgdC5jb25zdHJ1Y3Rvcih0KSksISh0IGluc3RhbmNlb2YgRmxvYXQzMkFycmF5fHx0IGluc3RhbmNlb2YgSW50MzJBcnJheXx8dCBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpKXRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIFR5cGVkQXJyYXkgc3VidHlwZTogXCIrdC5jb25zdHJ1Y3Rvci5uYW1lKX0pO3ZhciByPW5ldyBVaW50OEFycmF5KGUpLG89MDtyZXR1cm4gbi5mb3JFYWNoKGZ1bmN0aW9uKHQpe3Iuc2V0KG5ldyBVaW50OEFycmF5KHQuYnVmZmVyKSxvKSxvKz10LmJ5dGVMZW5ndGh9KSxyLmJ1ZmZlcn12YXIgaGg9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIEJ1ZmZlciYmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBCbG9ifHxcInVuZGVmaW5lZFwiPT10eXBlb2YgYXRvYnx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGJ0b2EpO2Z1bmN0aW9uIHBoKHQpe3JldHVybiBoaD9CdWZmZXIuYnl0ZUxlbmd0aCh0KTpuZXcgQmxvYihbdF0pLnNpemV9ZnVuY3Rpb24gZmgodCl7dmFyIGU9MDt0LmZvckVhY2goZnVuY3Rpb24odCl7ZSs9dC5ieXRlTGVuZ3RofSk7dmFyIG49bmV3IFVpbnQ4QXJyYXkoZSkscj0wO3JldHVybiB0LmZvckVhY2goZnVuY3Rpb24odCl7bi5zZXQobmV3IFVpbnQ4QXJyYXkodCkscikscis9dC5ieXRlTGVuZ3RofSksbi5idWZmZXJ9ZnVuY3Rpb24gZGgodCl7Zm9yKHQ9dC50cmltKCk7dC5lbmRzV2l0aChcIi9cIik7KXQ9dC5zbGljZSgwLHQubGVuZ3RoLTEpO3ZhciBlPXQuc3BsaXQoXCIvXCIpO3JldHVybiBlW2UubGVuZ3RoLTFdfWZ1bmN0aW9uIHZoKHQpe2lmKHQubW9kZWxUb3BvbG9neSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXRocm93IG5ldyBFcnJvcihcIkV4cGVjdGVkIEpTT04gbW9kZWwgdG9wb2xvZ3ksIHJlY2VpdmVkIEFycmF5QnVmZmVyLlwiKTtyZXR1cm57ZGF0ZVNhdmVkOm5ldyBEYXRlLG1vZGVsVG9wb2xvZ3lUeXBlOlwiSlNPTlwiLG1vZGVsVG9wb2xvZ3lCeXRlczpudWxsPT10Lm1vZGVsVG9wb2xvZ3k/MDpwaChKU09OLnN0cmluZ2lmeSh0Lm1vZGVsVG9wb2xvZ3kpKSx3ZWlnaHRTcGVjc0J5dGVzOm51bGw9PXQud2VpZ2h0U3BlY3M/MDpwaChKU09OLnN0cmluZ2lmeSh0LndlaWdodFNwZWNzKSksd2VpZ2h0RGF0YUJ5dGVzOm51bGw9PXQud2VpZ2h0RGF0YT8wOnQud2VpZ2h0RGF0YS5ieXRlTGVuZ3RofX12YXIgbWg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy5zYXZlUm91dGVycz1bXSx0aGlzLmxvYWRSb3V0ZXJzPVtdfXJldHVybiB0LmdldEluc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PXQuaW5zdGFuY2UmJih0Lmluc3RhbmNlPW5ldyB0KSx0Lmluc3RhbmNlfSx0LnJlZ2lzdGVyU2F2ZVJvdXRlcj1mdW5jdGlvbihlKXt0LmdldEluc3RhbmNlKCkuc2F2ZVJvdXRlcnMucHVzaChlKX0sdC5yZWdpc3RlckxvYWRSb3V0ZXI9ZnVuY3Rpb24oZSl7dC5nZXRJbnN0YW5jZSgpLmxvYWRSb3V0ZXJzLnB1c2goZSl9LHQuZ2V0U2F2ZUhhbmRsZXJzPWZ1bmN0aW9uKGUpe3JldHVybiB0LmdldEhhbmRsZXJzKGUsXCJzYXZlXCIpfSx0LmdldExvYWRIYW5kbGVycz1mdW5jdGlvbihlLG4pe3JldHVybiB0LmdldEhhbmRsZXJzKGUsXCJsb2FkXCIsbil9LHQuZ2V0SGFuZGxlcnM9ZnVuY3Rpb24oZSxuLHIpe3ZhciBvPVtdO3JldHVybihcImxvYWRcIj09PW4/dC5nZXRJbnN0YW5jZSgpLmxvYWRSb3V0ZXJzOnQuZ2V0SW5zdGFuY2UoKS5zYXZlUm91dGVycykuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgbj10KGUscik7bnVsbCE9PW4mJm8ucHVzaChuKX0pLG99LHR9KCksZ2g9XCI6Ly9cIix5aD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLm1hbmFnZXJzPXt9fXJldHVybiB0LmdldEluc3RhbmNlPWZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PXQuaW5zdGFuY2UmJih0Lmluc3RhbmNlPW5ldyB0KSx0Lmluc3RhbmNlfSx0LnJlZ2lzdGVyTWFuYWdlcj1mdW5jdGlvbihlLG4pe2YobnVsbCE9ZSxmdW5jdGlvbigpe3JldHVyblwic2NoZW1lIG11c3Qgbm90IGJlIHVuZGVmaW5lZCBvciBudWxsLlwifSksZS5lbmRzV2l0aChnaCkmJihlPWUuc2xpY2UoMCxlLmluZGV4T2YoZ2gpKSksZihlLmxlbmd0aD4wLGZ1bmN0aW9uKCl7cmV0dXJuXCJzY2hlbWUgbXVzdCBub3QgYmUgYW4gZW1wdHkgc3RyaW5nLlwifSk7dmFyIHI9dC5nZXRJbnN0YW5jZSgpO2YobnVsbD09ci5tYW5hZ2Vyc1tlXSxmdW5jdGlvbigpe3JldHVyblwiQSBtb2RlbCBzdG9yZSBtYW5hZ2VyIGlzIGFscmVhZHkgcmVnaXN0ZXJlZCBmb3Igc2NoZW1lICdcIitlK1wiJy5cIn0pLHIubWFuYWdlcnNbZV09bn0sdC5nZXRNYW5hZ2VyPWZ1bmN0aW9uKHQpe3ZhciBlPXRoaXMuZ2V0SW5zdGFuY2UoKS5tYW5hZ2Vyc1t0XTtpZihudWxsPT1lKXRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZGVsIG1hbmFnZXIgZm9yIHNjaGVtZSAnXCIrdCtcIidcIik7cmV0dXJuIGV9LHQuZ2V0U2NoZW1lcz1mdW5jdGlvbigpe3JldHVybiBPYmplY3Qua2V5cyh0aGlzLmdldEluc3RhbmNlKCkubWFuYWdlcnMpfSx0fSgpO2Z1bmN0aW9uIHhoKHQpe2lmKC0xPT09dC5pbmRleE9mKGdoKSl0aHJvdyBuZXcgRXJyb3IoXCJUaGUgdXJsIHN0cmluZyBwcm92aWRlZCBkb2VzIG5vdCBjb250YWluIGEgc2NoZW1lLiBTdXBwb3J0ZWQgc2NoZW1lcyBhcmU6IFwiK3loLmdldFNjaGVtZXMoKS5qb2luKFwiLFwiKSk7cmV0dXJue3NjaGVtZTp0LnNwbGl0KGdoKVswXSxwYXRoOnQuc3BsaXQoZ2gpWzFdfX1mdW5jdGlvbiBiaCh0LGUsbyl7cmV0dXJuIHZvaWQgMD09PW8mJihvPSExKSxuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBuLGEsaSxzLHUsbCxjLGgscDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGYodCE9PWUsZnVuY3Rpb24oKXtyZXR1cm5cIk9sZCBwYXRoIGFuZCBuZXcgcGF0aCBhcmUgdGhlIHNhbWU6ICdcIit0K1wiJ1wifSksZigobj1taC5nZXRMb2FkSGFuZGxlcnModCkpLmxlbmd0aD4wLGZ1bmN0aW9uKCl7cmV0dXJuXCJDb3B5aW5nIGZhaWxlZCBiZWNhdXNlIG5vIGxvYWQgaGFuZGxlciBpcyBmb3VuZCBmb3Igc291cmNlIFVSTCBcIit0K1wiLlwifSksZihuLmxlbmd0aDwyLGZ1bmN0aW9uKCl7cmV0dXJuXCJDb3B5aW5nIGZhaWxlZCBiZWNhdXNlIG1vcmUgdGhhbiBvbmUgKFwiK24ubGVuZ3RoK1wiKSBsb2FkIGhhbmRsZXJzIGZvciBzb3VyY2UgVVJMIFwiK3QrXCIuXCJ9KSxhPW5bMF0sZigoaT1taC5nZXRTYXZlSGFuZGxlcnMoZSkpLmxlbmd0aD4wLGZ1bmN0aW9uKCl7cmV0dXJuXCJDb3B5aW5nIGZhaWxlZCBiZWNhdXNlIG5vIHNhdmUgaGFuZGxlciBpcyBmb3VuZCBmb3IgZGVzdGluYXRpb24gVVJMIFwiK2UrXCIuXCJ9KSxmKGkubGVuZ3RoPDIsZnVuY3Rpb24oKXtyZXR1cm5cIkNvcHlpbmcgZmFpbGVkIGJlY2F1c2UgbW9yZSB0aGFuIG9uZSAoXCIrbi5sZW5ndGgrXCIpIHNhdmUgaGFuZGxlcnMgZm9yIGRlc3RpbmF0aW9uIFVSTCBcIitlK1wiLlwifSkscz1pWzBdLHU9eGgodCkuc2NoZW1lLGw9eGgodCkucGF0aCxjPXU9PT14aCh0KS5zY2hlbWUsWzQsYS5sb2FkKCldO2Nhc2UgMTpyZXR1cm4gaD1yLnNlbnQoKSxvJiZjP1s0LHloLmdldE1hbmFnZXIodSkucmVtb3ZlTW9kZWwobCldOlszLDNdO2Nhc2UgMjpyLnNlbnQoKSxyLmxhYmVsPTM7Y2FzZSAzOnJldHVybls0LHMuc2F2ZShoKV07Y2FzZSA0OnJldHVybiBwPXIuc2VudCgpLCFvfHxjP1szLDZdOls0LHloLmdldE1hbmFnZXIodSkucmVtb3ZlTW9kZWwobCldO2Nhc2UgNTpyLnNlbnQoKSxyLmxhYmVsPTY7Y2FzZSA2OnJldHVyblsyLHAubW9kZWxBcnRpZmFjdHNJbmZvXX19KX0pfXZhciB3aD1cIm1vZGVsc19zdG9yZVwiLENoPVwibW9kZWxfaW5mb19zdG9yZVwiO2Z1bmN0aW9uIEVoKCl7aWYoIWkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikpdGhyb3cgbmV3IEVycm9yKFwiRmFpbGVkIHRvIG9idGFpbiBJbmRleGVkREIgZmFjdG9yeSBiZWNhdXNlIHRoZSBjdXJyZW50IGVudmlyb25tZW50aXMgbm90IGEgd2ViIGJyb3dzZXIuXCIpO3ZhciB0PXdpbmRvdyxlPXQuaW5kZXhlZERCfHx0Lm1vekluZGV4ZWREQnx8dC53ZWJraXRJbmRleGVkREJ8fHQubXNJbmRleGVkREJ8fHQuc2hpbUluZGV4ZWREQjtpZihudWxsPT1lKXRocm93IG5ldyBFcnJvcihcIlRoZSBjdXJyZW50IGJyb3dzZXIgZG9lcyBub3QgYXBwZWFyIHRvIHN1cHBvcnQgSW5kZXhlZERCLlwiKTtyZXR1cm4gZX1mdW5jdGlvbiBSaCh0KXt2YXIgZT10LnJlc3VsdDtlLmNyZWF0ZU9iamVjdFN0b3JlKHdoLHtrZXlQYXRoOlwibW9kZWxQYXRoXCJ9KSxlLmNyZWF0ZU9iamVjdFN0b3JlKENoLHtrZXlQYXRoOlwibW9kZWxQYXRoXCJ9KX12YXIgSWg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe2lmKHRoaXMuaW5kZXhlZERCPUVoKCksbnVsbD09dHx8IXQpdGhyb3cgbmV3IEVycm9yKFwiRm9yIEluZGV4ZWREQiwgbW9kZWxQYXRoIG11c3Qgbm90IGJlIG51bGwsIHVuZGVmaW5lZCBvciBlbXB0eS5cIik7dGhpcy5tb2RlbFBhdGg9dH1yZXR1cm4gdC5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe2lmKHQubW9kZWxUb3BvbG9neSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXJMb2NhbFN0b3JhZ2Uuc2F2ZSgpIGRvZXMgbm90IHN1cHBvcnQgc2F2aW5nIG1vZGVsIHRvcG9sb2d5IGluIGJpbmFyeSBmb3JtYXRzIHlldC5cIik7cmV0dXJuWzIsdGhpcy5kYXRhYmFzZUFjdGlvbih0aGlzLm1vZGVsUGF0aCx0KV19KX0pfSx0LnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbih0KXtyZXR1cm5bMix0aGlzLmRhdGFiYXNlQWN0aW9uKHRoaXMubW9kZWxQYXRoKV19KX0pfSx0LnByb3RvdHlwZS5kYXRhYmFzZUFjdGlvbj1mdW5jdGlvbih0LGUpe3ZhciBuPXRoaXM7cmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQscil7dmFyIG89bi5pbmRleGVkREIub3BlbihcInRlbnNvcmZsb3dqc1wiLDEpO28ub251cGdyYWRlbmVlZGVkPWZ1bmN0aW9uKCl7cmV0dXJuIFJoKG8pfSxvLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3ZhciBhPW8ucmVzdWx0O2lmKG51bGw9PWUpe3ZhciBpPWEudHJhbnNhY3Rpb24od2gsXCJyZWFkb25seVwiKSxzPWkub2JqZWN0U3RvcmUod2gpLmdldChuLm1vZGVsUGF0aCk7cy5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXtpZihudWxsPT1zLnJlc3VsdClyZXR1cm4gYS5jbG9zZSgpLHIobmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kZWwgd2l0aCBwYXRoICdcIituLm1vZGVsUGF0aCtcIicgaW4gSW5kZXhlZERCLlwiKSk7dChzLnJlc3VsdC5tb2RlbEFydGlmYWN0cyl9LHMub25lcnJvcj1mdW5jdGlvbih0KXtyZXR1cm4gYS5jbG9zZSgpLHIocy5lcnJvcil9LGkub25jb21wbGV0ZT1mdW5jdGlvbigpe3JldHVybiBhLmNsb3NlKCl9fWVsc2V7dmFyIHUsbD12aChlKSxjPWEudHJhbnNhY3Rpb24oQ2gsXCJyZWFkd3JpdGVcIiksaD1jLm9iamVjdFN0b3JlKENoKSxwPWgucHV0KHttb2RlbFBhdGg6bi5tb2RlbFBhdGgsbW9kZWxBcnRpZmFjdHNJbmZvOmx9KTtwLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3ZhciBvPSh1PWEudHJhbnNhY3Rpb24od2gsXCJyZWFkd3JpdGVcIikpLm9iamVjdFN0b3JlKHdoKS5wdXQoe21vZGVsUGF0aDpuLm1vZGVsUGF0aCxtb2RlbEFydGlmYWN0czplLG1vZGVsQXJ0aWZhY3RzSW5mbzpsfSk7by5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXtyZXR1cm4gdCh7bW9kZWxBcnRpZmFjdHNJbmZvOmx9KX0sby5vbmVycm9yPWZ1bmN0aW9uKHQpe3ZhciBlPShoPWMub2JqZWN0U3RvcmUoQ2gpKS5kZWxldGUobi5tb2RlbFBhdGgpO2Uub25zdWNjZXNzPWZ1bmN0aW9uKCl7cmV0dXJuIGEuY2xvc2UoKSxyKG8uZXJyb3IpfSxlLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIGEuY2xvc2UoKSxyKG8uZXJyb3IpfX19LHAub25lcnJvcj1mdW5jdGlvbih0KXtyZXR1cm4gYS5jbG9zZSgpLHIocC5lcnJvcil9LGMub25jb21wbGV0ZT1mdW5jdGlvbigpe251bGw9PXU/YS5jbG9zZSgpOnUub25jb21wbGV0ZT1mdW5jdGlvbigpe3JldHVybiBhLmNsb3NlKCl9fX19LG8ub25lcnJvcj1mdW5jdGlvbih0KXtyZXR1cm4gcihvLmVycm9yKX19KX0sdC5VUkxfU0NIRU1FPVwiaW5kZXhlZGRiOi8vXCIsdH0oKSxraD1mdW5jdGlvbih0KXtyZXR1cm4gaS5nZXRCb29sKFwiSVNfQlJPV1NFUlwiKSYmIUFycmF5LmlzQXJyYXkodCkmJnQuc3RhcnRzV2l0aChJaC5VUkxfU0NIRU1FKT8oZT10LnNsaWNlKEloLlVSTF9TQ0hFTUUubGVuZ3RoKSxuZXcgSWgoZSkpOm51bGw7dmFyIGV9O21oLnJlZ2lzdGVyU2F2ZVJvdXRlcihraCksbWgucmVnaXN0ZXJMb2FkUm91dGVyKGtoKTt2YXIgTmg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7dGhpcy5pbmRleGVkREI9RWgoKX1yZXR1cm4gdC5wcm90b3R5cGUubGlzdE1vZGVscz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciB0PXRoaXM7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihlKXtyZXR1cm5bMixuZXcgUHJvbWlzZShmdW5jdGlvbihlLG4pe3ZhciByPXQuaW5kZXhlZERCLm9wZW4oXCJ0ZW5zb3JmbG93anNcIiwxKTtyLm9udXBncmFkZW5lZWRlZD1mdW5jdGlvbigpe3JldHVybiBSaChyKX0sci5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt2YXIgdD1yLnJlc3VsdCxvPXQudHJhbnNhY3Rpb24oQ2gsXCJyZWFkb25seVwiKSxhPW8ub2JqZWN0U3RvcmUoQ2gpLmdldEFsbCgpO2Eub25zdWNjZXNzPWZ1bmN0aW9uKCl7Zm9yKHZhciB0PXt9LG49MCxyPWEucmVzdWx0O248ci5sZW5ndGg7bisrKXt2YXIgbz1yW25dO3Rbby5tb2RlbFBhdGhdPW8ubW9kZWxBcnRpZmFjdHNJbmZvfWUodCl9LGEub25lcnJvcj1mdW5jdGlvbihlKXtyZXR1cm4gdC5jbG9zZSgpLG4oYS5lcnJvcil9LG8ub25jb21wbGV0ZT1mdW5jdGlvbigpe3JldHVybiB0LmNsb3NlKCl9fSxyLm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIG4oci5lcnJvcil9fSldfSl9KX0sdC5wcm90b3R5cGUucmVtb3ZlTW9kZWw9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGU9dGhpcztyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKG4pe3ZhciByO3JldHVybiB0PShyPXQpLnN0YXJ0c1dpdGgoSWguVVJMX1NDSEVNRSk/ci5zbGljZShJaC5VUkxfU0NIRU1FLmxlbmd0aCk6cixbMixuZXcgUHJvbWlzZShmdW5jdGlvbihuLHIpe3ZhciBvPWUuaW5kZXhlZERCLm9wZW4oXCJ0ZW5zb3JmbG93anNcIiwxKTtvLm9udXBncmFkZW5lZWRlZD1mdW5jdGlvbigpe3JldHVybiBSaChvKX0sby5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXt2YXIgZSxhPW8ucmVzdWx0LGk9YS50cmFuc2FjdGlvbihDaCxcInJlYWR3cml0ZVwiKSxzPWkub2JqZWN0U3RvcmUoQ2gpLHU9cy5nZXQodCk7dS5vbnN1Y2Nlc3M9ZnVuY3Rpb24oKXtpZihudWxsPT11LnJlc3VsdClyZXR1cm4gYS5jbG9zZSgpLHIobmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kZWwgd2l0aCBwYXRoICdcIit0K1wiJyBpbiBJbmRleGVkREIuXCIpKTt2YXIgbz1zLmRlbGV0ZSh0KSxpPWZ1bmN0aW9uKCl7dmFyIG89KGU9YS50cmFuc2FjdGlvbih3aCxcInJlYWR3cml0ZVwiKSkub2JqZWN0U3RvcmUod2gpLmRlbGV0ZSh0KTtvLm9uc3VjY2Vzcz1mdW5jdGlvbigpe3JldHVybiBuKHUucmVzdWx0Lm1vZGVsQXJ0aWZhY3RzSW5mbyl9LG8ub25lcnJvcj1mdW5jdGlvbih0KXtyZXR1cm4gcih1LmVycm9yKX19O28ub25zdWNjZXNzPWksby5vbmVycm9yPWZ1bmN0aW9uKHQpe3JldHVybiBpKCksYS5jbG9zZSgpLHIodS5lcnJvcil9fSx1Lm9uZXJyb3I9ZnVuY3Rpb24odCl7cmV0dXJuIGEuY2xvc2UoKSxyKHUuZXJyb3IpfSxpLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtudWxsPT1lP2EuY2xvc2UoKTplLm9uY29tcGxldGU9ZnVuY3Rpb24oKXtyZXR1cm4gYS5jbG9zZSgpfX19LG8ub25lcnJvcj1mdW5jdGlvbih0KXtyZXR1cm4gcihvLmVycm9yKX19KV19KX0pfSx0fSgpO2lmKGkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikpdHJ5e3loLnJlZ2lzdGVyTWFuYWdlcihJaC5VUkxfU0NIRU1FLG5ldyBOaCl9Y2F0Y2godCl7fXZhciBTaD1cIi9cIixBaD1cInRlbnNvcmZsb3dqc19tb2RlbHNcIixUaD1cImluZm9cIixEaD1cIm1vZGVsX3RvcG9sb2d5XCIsX2g9XCJ3ZWlnaHRfc3BlY3NcIixPaD1cIndlaWdodF9kYXRhXCIsRmg9XCJtb2RlbF9tZXRhZGF0YVwiO2Z1bmN0aW9uIE1oKHQpe3JldHVybntpbmZvOltBaCx0LFRoXS5qb2luKFNoKSx0b3BvbG9neTpbQWgsdCxEaF0uam9pbihTaCksd2VpZ2h0U3BlY3M6W0FoLHQsX2hdLmpvaW4oU2gpLHdlaWdodERhdGE6W0FoLHQsT2hdLmpvaW4oU2gpLG1vZGVsTWV0YWRhdGE6W0FoLHQsRmhdLmpvaW4oU2gpfX1mdW5jdGlvbiBCaCh0KXt2YXIgZT10LnNwbGl0KFNoKTtpZihlLmxlbmd0aDwzKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQga2V5IGZvcm1hdDogXCIrdCk7cmV0dXJuIGUuc2xpY2UoMSxlLmxlbmd0aC0xKS5qb2luKFNoKX12YXIgUGg9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe2lmKCFpLmdldEJvb2woXCJJU19CUk9XU0VSXCIpfHx2b2lkIDA9PT13aW5kb3cubG9jYWxTdG9yYWdlKXRocm93IG5ldyBFcnJvcihcIlRoZSBjdXJyZW50IGVudmlyb25tZW50IGRvZXMgbm90IHN1cHBvcnQgbG9jYWwgc3RvcmFnZS5cIik7aWYodGhpcy5MUz13aW5kb3cubG9jYWxTdG9yYWdlLG51bGw9PXR8fCF0KXRocm93IG5ldyBFcnJvcihcIkZvciBsb2NhbCBzdG9yYWdlLCBtb2RlbFBhdGggbXVzdCBub3QgYmUgbnVsbCwgdW5kZWZpbmVkIG9yIGVtcHR5LlwiKTt0aGlzLm1vZGVsUGF0aD10LHRoaXMua2V5cz1NaCh0aGlzLm1vZGVsUGF0aCl9cmV0dXJuIHQucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbixvO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7aWYodC5tb2RlbFRvcG9sb2d5IGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlckxvY2FsU3RvcmFnZS5zYXZlKCkgZG9lcyBub3Qgc3VwcG9ydCBzYXZpbmcgbW9kZWwgdG9wb2xvZ3kgaW4gYmluYXJ5IGZvcm1hdHMgeWV0LlwiKTtlPUpTT04uc3RyaW5naWZ5KHQubW9kZWxUb3BvbG9neSksbj1KU09OLnN0cmluZ2lmeSh0LndlaWdodFNwZWNzKSxvPXZoKHQpO3RyeXtyZXR1cm4gdGhpcy5MUy5zZXRJdGVtKHRoaXMua2V5cy5pbmZvLEpTT04uc3RyaW5naWZ5KG8pKSx0aGlzLkxTLnNldEl0ZW0odGhpcy5rZXlzLnRvcG9sb2d5LGUpLHRoaXMuTFMuc2V0SXRlbSh0aGlzLmtleXMud2VpZ2h0U3BlY3MsbiksdGhpcy5MUy5zZXRJdGVtKHRoaXMua2V5cy53ZWlnaHREYXRhLChhPXQud2VpZ2h0RGF0YSxoaD9CdWZmZXIuZnJvbShhKS50b1N0cmluZyhcImJhc2U2NFwiKTpidG9hKFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxuZXcgVWludDhBcnJheShhKSkpKSksdGhpcy5MUy5zZXRJdGVtKHRoaXMua2V5cy5tb2RlbE1ldGFkYXRhLEpTT04uc3RyaW5naWZ5KHtmb3JtYXQ6dC5mb3JtYXQsZ2VuZXJhdGVkQnk6dC5nZW5lcmF0ZWRCeSxjb252ZXJ0ZWRCeTp0LmNvbnZlcnRlZEJ5fSkpLFsyLHttb2RlbEFydGlmYWN0c0luZm86b31dfWNhdGNoKHQpe3Rocm93IHRoaXMuTFMucmVtb3ZlSXRlbSh0aGlzLmtleXMuaW5mbyksdGhpcy5MUy5yZW1vdmVJdGVtKHRoaXMua2V5cy50b3BvbG9neSksdGhpcy5MUy5yZW1vdmVJdGVtKHRoaXMua2V5cy53ZWlnaHRTcGVjcyksdGhpcy5MUy5yZW1vdmVJdGVtKHRoaXMua2V5cy53ZWlnaHREYXRhKSx0aGlzLkxTLnJlbW92ZUl0ZW0odGhpcy5rZXlzLm1vZGVsTWV0YWRhdGEpLG5ldyBFcnJvcihcIkZhaWxlZCB0byBzYXZlIG1vZGVsICdcIit0aGlzLm1vZGVsUGF0aCtcIicgdG8gbG9jYWwgc3RvcmFnZTogc2l6ZSBxdW90YSBiZWluZyBleGNlZWRlZCBpcyBhIHBvc3NpYmxlIGNhdXNlIG9mIHRoaXMgZmFpbHVyZTogbW9kZWxUb3BvbG9neUJ5dGVzPVwiK28ubW9kZWxUb3BvbG9neUJ5dGVzK1wiLCB3ZWlnaHRTcGVjc0J5dGVzPVwiK28ud2VpZ2h0U3BlY3NCeXRlcytcIiwgd2VpZ2h0RGF0YUJ5dGVzPVwiK28ud2VpZ2h0RGF0YUJ5dGVzK1wiLlwiKX12YXIgYTtyZXR1cm5bMl19KX0pfSx0LnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIHQsZSxuLG8sYSxpLHM7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtpZihudWxsPT0odD1KU09OLnBhcnNlKHRoaXMuTFMuZ2V0SXRlbSh0aGlzLmtleXMuaW5mbykpKSl0aHJvdyBuZXcgRXJyb3IoXCJJbiBsb2NhbCBzdG9yYWdlLCB0aGVyZSBpcyBubyBtb2RlbCB3aXRoIG5hbWUgJ1wiK3RoaXMubW9kZWxQYXRoK1wiJ1wiKTtpZihcIkpTT05cIiE9PXQubW9kZWxUb3BvbG9neVR5cGUpdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlckxvY2FsU3RvcmFnZSBkb2VzIG5vdCBzdXBwb3J0IGxvYWRpbmcgbm9uLUpTT04gbW9kZWwgdG9wb2xvZ3kgeWV0LlwiKTtpZihlPXt9LG51bGw9PShuPUpTT04ucGFyc2UodGhpcy5MUy5nZXRJdGVtKHRoaXMua2V5cy50b3BvbG9neSkpKSl0aHJvdyBuZXcgRXJyb3IoXCJJbiBsb2NhbCBzdG9yYWdlLCB0aGUgdG9wb2xvZ3kgb2YgbW9kZWwgJ1wiK3RoaXMubW9kZWxQYXRoK1wiJyBpcyBtaXNzaW5nLlwiKTtpZihlLm1vZGVsVG9wb2xvZ3k9bixudWxsPT0obz1KU09OLnBhcnNlKHRoaXMuTFMuZ2V0SXRlbSh0aGlzLmtleXMud2VpZ2h0U3BlY3MpKSkpdGhyb3cgbmV3IEVycm9yKFwiSW4gbG9jYWwgc3RvcmFnZSwgdGhlIHdlaWdodCBzcGVjcyBvZiBtb2RlbCAnXCIrdGhpcy5tb2RlbFBhdGgrXCInIGFyZSBtaXNzaW5nLlwiKTtpZihlLndlaWdodFNwZWNzPW8sbnVsbCE9KGE9dGhpcy5MUy5nZXRJdGVtKHRoaXMua2V5cy5tb2RlbE1ldGFkYXRhKSkmJihpPUpTT04ucGFyc2UoYSksZS5mb3JtYXQ9aS5mb3JtYXQsZS5nZW5lcmF0ZWRCeT1pLmdlbmVyYXRlZEJ5LGUuY29udmVydGVkQnk9aS5jb252ZXJ0ZWRCeSksbnVsbD09KHM9dGhpcy5MUy5nZXRJdGVtKHRoaXMua2V5cy53ZWlnaHREYXRhKSkpdGhyb3cgbmV3IEVycm9yKFwiSW4gbG9jYWwgc3RvcmFnZSwgdGhlIGJpbmFyeSB3ZWlnaHQgdmFsdWVzIG9mIG1vZGVsICdcIit0aGlzLm1vZGVsUGF0aCtcIicgYXJlIG1pc3NpbmcuXCIpO3JldHVybiBlLndlaWdodERhdGE9ZnVuY3Rpb24odCl7aWYoaGgpe3ZhciBlPUJ1ZmZlci5mcm9tKHQsXCJiYXNlNjRcIik7cmV0dXJuIGUuYnVmZmVyLnNsaWNlKGUuYnl0ZU9mZnNldCxlLmJ5dGVPZmZzZXQrZS5ieXRlTGVuZ3RoKX1mb3IodmFyIG49YXRvYih0KSxyPW5ldyBVaW50OEFycmF5KG4ubGVuZ3RoKSxvPTA7bzxuLmxlbmd0aDsrK28pci5zZXQoW24uY2hhckNvZGVBdChvKV0sbyk7cmV0dXJuIHIuYnVmZmVyfShzKSxbMixlXX0pfSl9LHQuVVJMX1NDSEVNRT1cImxvY2Fsc3RvcmFnZTovL1wiLHR9KCksTGg9ZnVuY3Rpb24odCl7cmV0dXJuIGkuZ2V0Qm9vbChcIklTX0JST1dTRVJcIikmJiFBcnJheS5pc0FycmF5KHQpJiZ0LnN0YXJ0c1dpdGgoUGguVVJMX1NDSEVNRSk/KGU9dC5zbGljZShQaC5VUkxfU0NIRU1FLmxlbmd0aCksbmV3IFBoKGUpKTpudWxsO3ZhciBlfTttaC5yZWdpc3RlclNhdmVSb3V0ZXIoTGgpLG1oLnJlZ2lzdGVyTG9hZFJvdXRlcihMaCk7dmFyIFdoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe2YoaS5nZXRCb29sKFwiSVNfQlJPV1NFUlwiKSxmdW5jdGlvbigpe3JldHVyblwiQ3VycmVudCBlbnZpcm9ubWVudCBpcyBub3QgYSB3ZWIgYnJvd3NlclwifSksZih2b2lkIDAhPT13aW5kb3cubG9jYWxTdG9yYWdlLGZ1bmN0aW9uKCl7cmV0dXJuXCJDdXJyZW50IGJyb3dzZXIgZG9lcyBub3QgYXBwZWFyIHRvIHN1cHBvcnQgbG9jYWxTdG9yYWdlXCJ9KSx0aGlzLkxTPXdpbmRvdy5sb2NhbFN0b3JhZ2V9cmV0dXJuIHQucHJvdG90eXBlLmxpc3RNb2RlbHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdCxlLG4sbyxhLGk7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtmb3IodD17fSxlPUFoK1NoLG49U2grVGgsbz0wO288dGhpcy5MUy5sZW5ndGg7KytvKShhPXRoaXMuTFMua2V5KG8pKS5zdGFydHNXaXRoKGUpJiZhLmVuZHNXaXRoKG4pJiYoaT1CaChhKSx0W2ldPUpTT04ucGFyc2UodGhpcy5MUy5nZXRJdGVtKGEpKSk7cmV0dXJuWzIsdF19KX0pfSx0LnByb3RvdHlwZS5yZW1vdmVNb2RlbD1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7dmFyIG87aWYodD0obz10KS5zdGFydHNXaXRoKFBoLlVSTF9TQ0hFTUUpP28uc2xpY2UoUGguVVJMX1NDSEVNRS5sZW5ndGgpOm8sZT1NaCh0KSxudWxsPT10aGlzLkxTLmdldEl0ZW0oZS5pbmZvKSl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2RlbCBhdCBwYXRoICdcIit0K1wiJ1wiKTtyZXR1cm4gbj1KU09OLnBhcnNlKHRoaXMuTFMuZ2V0SXRlbShlLmluZm8pKSx0aGlzLkxTLnJlbW92ZUl0ZW0oZS5pbmZvKSx0aGlzLkxTLnJlbW92ZUl0ZW0oZS50b3BvbG9neSksdGhpcy5MUy5yZW1vdmVJdGVtKGUud2VpZ2h0U3BlY3MpLHRoaXMuTFMucmVtb3ZlSXRlbShlLndlaWdodERhdGEpLFsyLG5dfSl9KX0sdH0oKTtpZihpLmdldEJvb2woXCJJU19CUk9XU0VSXCIpKXRyeXt5aC5yZWdpc3Rlck1hbmFnZXIoUGguVVJMX1NDSEVNRSxuZXcgV2gpfWNhdGNoKHQpe312YXIgVWg9XCJtb2RlbFwiLFZoPVwiLmpzb25cIix6aD1cIi53ZWlnaHRzLmJpblwiO2Z1bmN0aW9uIEdoKHQpe3JldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbih0KXtyZXR1cm4gc2V0VGltZW91dCh0KX0pLnRoZW4odCl9dmFyIEhoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdChlKXtpZighaS5nZXRCb29sKFwiSVNfQlJPV1NFUlwiKSl0aHJvdyBuZXcgRXJyb3IoXCJicm93c2VyRG93bmxvYWRzKCkgY2Fubm90IHByb2NlZWQgYmVjYXVzZSB0aGUgY3VycmVudCBlbnZpcm9ubWVudCBpcyBub3QgYSBicm93c2VyLlwiKTtlLnN0YXJ0c1dpdGgodC5VUkxfU0NIRU1FKSYmKGU9ZS5zbGljZSh0LlVSTF9TQ0hFTUUubGVuZ3RoKSksbnVsbCE9ZSYmMCE9PWUubGVuZ3RofHwoZT1VaCksdGhpcy5tb2RlbFRvcG9sb2d5RmlsZU5hbWU9ZStWaCx0aGlzLndlaWdodERhdGFGaWxlTmFtZT1lK3pofXJldHVybiB0LnByb3RvdHlwZS5zYXZlPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlLG4sbyxhLGkscztyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGRvY3VtZW50KXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIgZG93bmxvYWRzIGFyZSBub3Qgc3VwcG9ydGVkIGluIHRoaXMgZW52aXJvbm1lbnQgc2luY2UgYGRvY3VtZW50YCBpcyBub3QgcHJlc2VudFwiKTtpZihlPXdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFt0LndlaWdodERhdGFdLHt0eXBlOlwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJ9KSksISh0Lm1vZGVsVG9wb2xvZ3kgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikpcmV0dXJuWzMsMV07dGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlckRvd25sb2Fkcy5zYXZlKCkgZG9lcyBub3Qgc3VwcG9ydCBzYXZpbmcgbW9kZWwgdG9wb2xvZ3kgaW4gYmluYXJ5IGZvcm1hdHMgeWV0LlwiKTtjYXNlIDE6cmV0dXJuIG49W3twYXRoczpbXCIuL1wiK3RoaXMud2VpZ2h0RGF0YUZpbGVOYW1lXSx3ZWlnaHRzOnQud2VpZ2h0U3BlY3N9XSxvPXttb2RlbFRvcG9sb2d5OnQubW9kZWxUb3BvbG9neSxmb3JtYXQ6dC5mb3JtYXQsZ2VuZXJhdGVkQnk6dC5nZW5lcmF0ZWRCeSxjb252ZXJ0ZWRCeTp0LmNvbnZlcnRlZEJ5LHdlaWdodHNNYW5pZmVzdDpufSxhPXdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShvKV0se3R5cGU6XCJhcHBsaWNhdGlvbi9qc29uXCJ9KSksKGk9bnVsbD09dGhpcy5qc29uQW5jaG9yP2RvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpOnRoaXMuanNvbkFuY2hvcikuZG93bmxvYWQ9dGhpcy5tb2RlbFRvcG9sb2d5RmlsZU5hbWUsaS5ocmVmPWEsWzQsR2goZnVuY3Rpb24oKXtyZXR1cm4gaS5kaXNwYXRjaEV2ZW50KG5ldyBNb3VzZUV2ZW50KFwiY2xpY2tcIikpfSldO2Nhc2UgMjpyZXR1cm4gci5zZW50KCksbnVsbD09dC53ZWlnaHREYXRhP1szLDRdOigocz1udWxsPT10aGlzLndlaWdodERhdGFBbmNob3I/ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik6dGhpcy53ZWlnaHREYXRhQW5jaG9yKS5kb3dubG9hZD10aGlzLndlaWdodERhdGFGaWxlTmFtZSxzLmhyZWY9ZSxbNCxHaChmdW5jdGlvbigpe3JldHVybiBzLmRpc3BhdGNoRXZlbnQobmV3IE1vdXNlRXZlbnQoXCJjbGlja1wiKSl9KV0pO2Nhc2UgMzpyLnNlbnQoKSxyLmxhYmVsPTQ7Y2FzZSA0OnJldHVyblsyLHttb2RlbEFydGlmYWN0c0luZm86dmgodCl9XX19KX0pfSx0LlVSTF9TQ0hFTUU9XCJkb3dubG9hZHM6Ly9cIix0fSgpLHFoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXtpZihudWxsPT10fHx0Lmxlbmd0aDwxKXRocm93IG5ldyBFcnJvcihcIldoZW4gY2FsbGluZyBicm93c2VyRmlsZXMsIGF0IGxlYXN0IDEgZmlsZSBpcyByZXF1aXJlZCwgYnV0IHJlY2VpdmVkIFwiK3QpO3RoaXMuZmlsZXM9dH1yZXR1cm4gdC5wcm90b3R5cGUubG9hZD1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciB0LGUsbj10aGlzO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7cmV0dXJuIHQ9dGhpcy5maWxlc1swXSxlPXRoaXMuZmlsZXMuc2xpY2UoMSksWzIsbmV3IFByb21pc2UoZnVuY3Rpb24ocixvKXt2YXIgYT1uZXcgRmlsZVJlYWRlcjthLm9ubG9hZD1mdW5jdGlvbihhKXt2YXIgaT1KU09OLnBhcnNlKGEudGFyZ2V0LnJlc3VsdCkscz1pLm1vZGVsVG9wb2xvZ3k7aWYobnVsbCE9cyl7MD09PWUubGVuZ3RoJiZyKHttb2RlbFRvcG9sb2d5OnN9KTt2YXIgdT1pLndlaWdodHNNYW5pZmVzdDtpZihudWxsIT11KXt2YXIgbDt0cnl7bD1uLmNoZWNrTWFuaWZlc3RBbmRXZWlnaHRGaWxlcyh1LGUpfWNhdGNoKHQpe3JldHVybiB2b2lkIG8odCl9dmFyIGM9W10saD1bXSxwPVtdO3UuZm9yRWFjaChmdW5jdGlvbih0KXt0LnBhdGhzLmZvckVhY2goZnVuY3Rpb24odCl7aC5wdXNoKHQpLHAucHVzaChudWxsKX0pLGMucHVzaC5hcHBseShjLHQud2VpZ2h0cyl9KSx1LmZvckVhY2goZnVuY3Rpb24odCl7dC5wYXRocy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPW5ldyBGaWxlUmVhZGVyO2Uub25sb2FkPWZ1bmN0aW9uKGUpe3ZhciBuPWUudGFyZ2V0LnJlc3VsdCxvPWguaW5kZXhPZih0KTtwW29dPW4sLTE9PT1wLmluZGV4T2YobnVsbCkmJnIoe21vZGVsVG9wb2xvZ3k6cyx3ZWlnaHRTcGVjczpjLHdlaWdodERhdGE6ZmgocCl9KX0sZS5vbmVycm9yPWZ1bmN0aW9uKGUpe3JldHVybiBvKFwiRmFpbGVkIHRvIHdlaWdodHMgZGF0YSBmcm9tIGZpbGUgb2YgcGF0aCAnXCIrdCtcIicuXCIpfSxlLnJlYWRBc0FycmF5QnVmZmVyKGxbdF0pfSl9KX1lbHNlIG8obmV3IEVycm9yKFwid2VpZ2h0TWFuaWZlc3QgZmllbGQgaXMgbWlzc2luZyBmcm9tIGZpbGUgXCIrdC5uYW1lKSl9ZWxzZSBvKG5ldyBFcnJvcihcIm1vZGVsVG9wb2xvZ3kgZmllbGQgaXMgbWlzc2luZyBmcm9tIGZpbGUgXCIrdC5uYW1lKSl9LGEub25lcnJvcj1mdW5jdGlvbihlKXtyZXR1cm4gbyhcIkZhaWxlZCB0byByZWFkIG1vZGVsIHRvcG9sb2d5IGFuZCB3ZWlnaHRzIG1hbmlmZXN0IEpTT04gZnJvbSBmaWxlICdcIit0Lm5hbWUrXCInLiBCcm93c2VyRmlsZXMgc3VwcG9ydHMgbG9hZGluZyBLZXJhcy1zdHlsZSB0Zi5Nb2RlbCBhcnRpZmFjdHMgb25seS5cIil9LGEucmVhZEFzVGV4dCh0KX0pXX0pfSl9LHQucHJvdG90eXBlLmNoZWNrTWFuaWZlc3RBbmRXZWlnaHRGaWxlcz1mdW5jdGlvbih0LGUpe2Zvcih2YXIgbj1bXSxyPWUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBkaCh0Lm5hbWUpfSksbz17fSxhPTAsaT10O2E8aS5sZW5ndGg7YSsrKXtpW2FdLnBhdGhzLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGE9ZGgodCk7aWYoLTEhPT1uLmluZGV4T2YoYSkpdGhyb3cgbmV3IEVycm9yKFwiRHVwbGljYXRlIGZpbGUgYmFzZW5hbWUgZm91bmQgaW4gd2VpZ2h0cyBtYW5pZmVzdDogJ1wiK2ErXCInXCIpO2lmKG4ucHVzaChhKSwtMT09PXIuaW5kZXhPZihhKSl0aHJvdyBuZXcgRXJyb3IoXCJXZWlnaHQgZmlsZSB3aXRoIGJhc2VuYW1lICdcIithK1wiJyBpcyBub3QgcHJvdmlkZWQuXCIpO29bdF09ZVtyLmluZGV4T2YoYSldfSl9aWYobi5sZW5ndGghPT1lLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJNaXNtYXRjaCBpbiB0aGUgbnVtYmVyIG9mIGZpbGVzIGluIHdlaWdodHMgbWFuaWZlc3QgKFwiK24ubGVuZ3RoK1wiKSBhbmQgdGhlIG51bWJlciBvZiB3ZWlnaHQgZmlsZXMgcHJvdmlkZWQgKFwiK2UubGVuZ3RoK1wiKS5cIik7cmV0dXJuIG99LHR9KCk7ZnVuY3Rpb24gJGgodCxlLG4scil7IWZ1bmN0aW9uKHQpe2YobnVsbCE9dCYmQXJyYXkuaXNBcnJheSh0KSYmdC5sZW5ndGg+MCxmdW5jdGlvbigpe3JldHVyblwicHJvbWlzZXMgbXVzdCBiZSBhIG5vbmUgZW1wdHkgYXJyYXlcIn0pfSh0KSxmdW5jdGlvbih0LGUpe2YodD49MCYmdDw9MSxmdW5jdGlvbigpe3JldHVyblwiUHJvZ3Jlc3MgZnJhY3Rpb24gbXVzdCBiZSBpbiByYW5nZSBbMCwgMV0sIGJ1dCBnb3Qgc3RhcnRGcmFjdGlvbiBcIit0fSksZihlPj0wJiZlPD0xLGZ1bmN0aW9uKCl7cmV0dXJuXCJQcm9ncmVzcyBmcmFjdGlvbiBtdXN0IGJlIGluIHJhbmdlIFswLCAxXSwgYnV0IGdvdCBlbmRGcmFjdGlvbiBcIitlfSksZihlPj10LGZ1bmN0aW9uKCl7cmV0dXJuXCJzdGFydEZyYWN0aW9uIG11c3QgYmUgbm8gbW9yZSB0aGFuIGVuZEZyYWN0aW9uLCBidXQgZ290IHN0YXJ0RnJhY3Rpb24gXCIrdCtcIiBhbmQgZW5kRnJhY3Rpb24gXCIrZX0pfShuPW51bGw9PW4/MDpuLHI9bnVsbD09cj8xOnIpO3ZhciBvPTA7cmV0dXJuIFByb21pc2UuYWxsKHQubWFwKGZ1bmN0aW9uKGEpe3JldHVybiBhLnRoZW4oZnVuY3Rpb24oYSl7dmFyIGk9bisgKytvL3QubGVuZ3RoKihyLW4pO3JldHVybiBlKGkpLGF9KSxhfSkpfWZ1bmN0aW9uIEtoKHQsZSl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIG4sbyxhLHMsdSxsLGMsaCxwO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm4gbnVsbD09ZSYmKGU9e30pLG49bnVsbD09ZS5mZXRjaEZ1bmM/aS5wbGF0Zm9ybS5mZXRjaDplLmZldGNoRnVuYyxvPXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybiBuKHQsZS5yZXF1ZXN0SW5pdCx7aXNCaW5hcnk6ITB9KX0pLGE9MCxzPS41LG51bGwhPWUub25Qcm9ncmVzcz9bMywyXTpbNCxQcm9taXNlLmFsbChvKV07Y2FzZSAxOnJldHVybiB1PXIuc2VudCgpLFszLDRdO2Nhc2UgMjpyZXR1cm5bNCwkaChvLGUub25Qcm9ncmVzcyxhLHMpXTtjYXNlIDM6dT1yLnNlbnQoKSxyLmxhYmVsPTQ7Y2FzZSA0OnJldHVybiBsPXUubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LmFycmF5QnVmZmVyKCl9KSxjPS41LGg9MSxudWxsIT1lLm9uUHJvZ3Jlc3M/WzMsNl06WzQsUHJvbWlzZS5hbGwobCldO2Nhc2UgNTpyZXR1cm4gcD1yLnNlbnQoKSxbMyw4XTtjYXNlIDY6cmV0dXJuWzQsJGgobCxlLm9uUHJvZ3Jlc3MsYyxoKV07Y2FzZSA3OnA9ci5zZW50KCksci5sYWJlbD04O2Nhc2UgODpyZXR1cm5bMixwXX19KX0pfWZ1bmN0aW9uIGpoKHQpe3ZhciBlPXRoaXM7cmV0dXJuIGZ1bmN0aW9uKG8sYSxpKXtyZXR1cm4gdm9pZCAwPT09YSYmKGE9XCJcIiksbihlLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuLHMsdSxsLGMsaCxwLGYsZDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6aWYoZT1vLm1hcChmdW5jdGlvbigpe3JldHVybiExfSksbj17fSxzPW51bGwhPWk/aS5tYXAoZnVuY3Rpb24oKXtyZXR1cm4hMX0pOltdLHU9W10sby5mb3JFYWNoKGZ1bmN0aW9uKHQscil7dmFyIG89MDt0LndlaWdodHMuZm9yRWFjaChmdW5jdGlvbih0KXt2YXIgYT1cInF1YW50aXphdGlvblwiaW4gdD90LnF1YW50aXphdGlvbi5kdHlwZTp0LmR0eXBlLGw9c2hbYV0qZyh0LnNoYXBlKSxjPWZ1bmN0aW9uKCl7ZVtyXT0hMCxudWxsPT1uW3JdJiYobltyXT1bXSksbltyXS5wdXNoKHttYW5pZmVzdEVudHJ5OnQsZ3JvdXBPZmZzZXQ6byxzaXplQnl0ZXM6bH0pfTtudWxsIT1pP2kuZm9yRWFjaChmdW5jdGlvbihlLG4pe2U9PT10Lm5hbWUmJihjKCksc1tuXT0hMCl9KTpjKCksdS5wdXNoKHQubmFtZSksbys9bH0pfSksIXMuZXZlcnkoZnVuY3Rpb24odCl7cmV0dXJuIHR9KSl0aHJvdyBsPWkuZmlsdGVyKGZ1bmN0aW9uKHQsZSl7cmV0dXJuIXNbZV19KSxuZXcgRXJyb3IoXCJDb3VsZCBub3QgZmluZCB3ZWlnaHRzIGluIG1hbmlmZXN0IHdpdGggbmFtZXM6IFwiK2wuam9pbihcIiwgXCIpK1wiLiBcXG5NYW5pZmVzdCBKU09OIGhhcyB3ZWlnaHRzIHdpdGggbmFtZXM6IFwiK3Uuam9pbihcIiwgXCIpK1wiLlwiKTtyZXR1cm4gYz1lLnJlZHVjZShmdW5jdGlvbih0LGUsbil7cmV0dXJuIGUmJnQucHVzaChuKSx0fSxbXSksaD1bXSxjLmZvckVhY2goZnVuY3Rpb24odCl7b1t0XS5wYXRocy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3ZhciBlPWErKGEuZW5kc1dpdGgoXCIvXCIpP1wiXCI6XCIvXCIpK3Q7aC5wdXNoKGUpfSl9KSxbNCx0KGgpXTtjYXNlIDE6cmV0dXJuIHA9ci5zZW50KCksZj17fSxkPTAsYy5mb3JFYWNoKGZ1bmN0aW9uKHQpe2Zvcih2YXIgZT1vW3RdLnBhdGhzLmxlbmd0aCxyPTAsYT0wO2E8ZTthKyspcis9cFtkK2FdLmJ5dGVMZW5ndGg7Zm9yKHZhciBpPW5ldyBBcnJheUJ1ZmZlcihyKSxzPW5ldyBVaW50OEFycmF5KGkpLHU9MCxsPTA7bDxlO2wrKyl7dmFyIGM9bmV3IFVpbnQ4QXJyYXkocFtkK2xdKTtzLnNldChjLHUpLHUrPWMuYnl0ZUxlbmd0aH1uW3RdLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGU9bGgoaS5zbGljZSh0Lmdyb3VwT2Zmc2V0LHQuZ3JvdXBPZmZzZXQrdC5zaXplQnl0ZXMpLFt0Lm1hbmlmZXN0RW50cnldKTtmb3IodmFyIG4gaW4gZSlmW25dPWVbbl19KSxkKz1lfSksWzIsZl19fSl9KX19bWgucmVnaXN0ZXJTYXZlUm91dGVyKGZ1bmN0aW9uKHQpe3JldHVybiBpLmdldEJvb2woXCJJU19CUk9XU0VSXCIpJiYhQXJyYXkuaXNBcnJheSh0KSYmdC5zdGFydHNXaXRoKEhoLlVSTF9TQ0hFTUUpPyhlPXQuc2xpY2UoSGguVVJMX1NDSEVNRS5sZW5ndGgpLHZvaWQgMD09PWUmJihlPVwibW9kZWxcIiksbmV3IEhoKGUpKTpudWxsO3ZhciBlfSk7dmFyIFhoPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2lmKHRoaXMuREVGQVVMVF9NRVRIT0Q9XCJQT1NUXCIsbnVsbD09ZSYmKGU9e30pLHRoaXMud2VpZ2h0UGF0aFByZWZpeD1lLndlaWdodFBhdGhQcmVmaXgsdGhpcy5vblByb2dyZXNzPWUub25Qcm9ncmVzcyxudWxsIT1lLmZldGNoRnVuYz8oZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmZldGNoRnVuYyxmdW5jdGlvbigpe3JldHVyblwiTXVzdCBwYXNzIGEgZnVuY3Rpb24gdGhhdCBtYXRjaGVzIHRoZSBzaWduYXR1cmUgb2YgYGZldGNoYCAoc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9GZXRjaF9BUEkpXCJ9KSx0aGlzLmZldGNoPWUuZmV0Y2hGdW5jKTp0aGlzLmZldGNoPWkucGxhdGZvcm0uZmV0Y2gsZihudWxsIT10JiZ0Lmxlbmd0aD4wLGZ1bmN0aW9uKCl7cmV0dXJuXCJVUkwgcGF0aCBmb3IgaHR0cCBtdXN0IG5vdCBiZSBudWxsLCB1bmRlZmluZWQgb3IgZW1wdHkuXCJ9KSxBcnJheS5pc0FycmF5KHQpJiZmKDI9PT10Lmxlbmd0aCxmdW5jdGlvbigpe3JldHVyblwiVVJMIHBhdGhzIGZvciBodHRwIG11c3QgaGF2ZSBhIGxlbmd0aCBvZiAyLCAoYWN0dWFsIGxlbmd0aCBpcyBcIit0Lmxlbmd0aCtcIikuXCJ9KSx0aGlzLnBhdGg9dCxudWxsIT1lLnJlcXVlc3RJbml0JiZudWxsIT1lLnJlcXVlc3RJbml0LmJvZHkpdGhyb3cgbmV3IEVycm9yKFwicmVxdWVzdEluaXQgaXMgZXhwZWN0ZWQgdG8gaGF2ZSBubyBwcmUtZXhpc3RpbmcgYm9keSwgYnV0IGhhcyBvbmUuXCIpO3RoaXMucmVxdWVzdEluaXQ9ZS5yZXF1ZXN0SW5pdHx8e319cmV0dXJuIHQucHJvdG90eXBlLnNhdmU9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbixvLGE7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKHQubW9kZWxUb3BvbG9neSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKXRocm93IG5ldyBFcnJvcihcIkJyb3dzZXJIVFRQUmVxdWVzdC5zYXZlKCkgZG9lcyBub3Qgc3VwcG9ydCBzYXZpbmcgbW9kZWwgdG9wb2xvZ3kgaW4gYmluYXJ5IGZvcm1hdHMgeWV0LlwiKTtyZXR1cm4oZT1PYmplY3QuYXNzaWduKHttZXRob2Q6dGhpcy5ERUZBVUxUX01FVEhPRH0sdGhpcy5yZXF1ZXN0SW5pdCkpLmJvZHk9bmV3IEZvcm1EYXRhLG49W3twYXRoczpbXCIuL21vZGVsLndlaWdodHMuYmluXCJdLHdlaWdodHM6dC53ZWlnaHRTcGVjc31dLG89e21vZGVsVG9wb2xvZ3k6dC5tb2RlbFRvcG9sb2d5LGZvcm1hdDp0LmZvcm1hdCxnZW5lcmF0ZWRCeTp0LmdlbmVyYXRlZEJ5LGNvbnZlcnRlZEJ5OnQuY29udmVydGVkQnksd2VpZ2h0c01hbmlmZXN0Om59LGUuYm9keS5hcHBlbmQoXCJtb2RlbC5qc29uXCIsbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KG8pXSx7dHlwZTpcImFwcGxpY2F0aW9uL2pzb25cIn0pLFwibW9kZWwuanNvblwiKSxudWxsIT10LndlaWdodERhdGEmJmUuYm9keS5hcHBlbmQoXCJtb2RlbC53ZWlnaHRzLmJpblwiLG5ldyBCbG9iKFt0LndlaWdodERhdGFdLHt0eXBlOlwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtXCJ9KSxcIm1vZGVsLndlaWdodHMuYmluXCIpLFs0LHRoaXMuZmV0Y2godGhpcy5wYXRoLGUpXTtjYXNlIDE6aWYoKGE9ci5zZW50KCkpLm9rKXJldHVyblsyLHttb2RlbEFydGlmYWN0c0luZm86dmgodCkscmVzcG9uc2VzOlthXX1dO3Rocm93IG5ldyBFcnJvcihcIkJyb3dzZXJIVFRQUmVxdWVzdC5zYXZlKCkgZmFpbGVkIGR1ZSB0byBIVFRQIHJlc3BvbnNlIHN0YXR1cyBcIithLnN0YXR1cytcIi5cIil9fSl9KX0sdC5wcm90b3R5cGUubG9hZD1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciB0LGUsbixvLGEsaSxzLHU7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuZmV0Y2godGhpcy5wYXRoLHRoaXMucmVxdWVzdEluaXQpXTtjYXNlIDE6aWYoISh0PXIuc2VudCgpKS5vayl0aHJvdyBuZXcgRXJyb3IoXCJSZXF1ZXN0IHRvIFwiK3RoaXMucGF0aCtcIiBmYWlsZWQgd2l0aCBzdGF0dXMgY29kZSBcIit0LnN0YXR1cytcIi4gUGxlYXNlIHZlcmlmeSB0aGlzIFVSTCBwb2ludHMgdG8gdGhlIG1vZGVsIEpTT04gb2YgdGhlIG1vZGVsIHRvIGxvYWQuXCIpO3IubGFiZWw9MjtjYXNlIDI6cmV0dXJuIHIudHJ5cy5wdXNoKFsyLDQsLDVdKSxbNCx0Lmpzb24oKV07Y2FzZSAzOnJldHVybiBlPXIuc2VudCgpLFszLDVdO2Nhc2UgNDp0aHJvdyByLnNlbnQoKSxuPVwiRmFpbGVkIHRvIHBhcnNlIG1vZGVsIEpTT04gb2YgcmVzcG9uc2UgZnJvbSBcIit0aGlzLnBhdGgrXCIuXCIsdGhpcy5wYXRoLmVuZHNXaXRoKFwiLnBiXCIpP24rPVwiIFlvdXIgcGF0aCBjb250YWlucyBhIC5wYiBmaWxlIGV4dGVuc2lvbi4gU3VwcG9ydCBmb3IgLnBiIG1vZGVscyBoYXZlIGJlZW4gcmVtb3ZlZCBpbiBUZW5zb3JGbG93LmpzIDEuMCBpbiBmYXZvciBvZiAuanNvbiBtb2RlbHMuIFlvdSBjYW4gcmUtY29udmVydCB5b3VyIFB5dGhvbiBUZW5zb3JGbG93IG1vZGVsIHVzaW5nIHRoZSBUZW5zb3JGbG93LmpzIDEuMCBjb252ZXJzaW9uIHNjcmlwdHMgb3IgeW91IGNhbiBjb252ZXJ0IHlvdXIucGIgbW9kZWxzIHdpdGggdGhlICdwYjJqc29uJ05QTSBzY3JpcHQgaW4gdGhlIHRlbnNvcmZsb3cvdGZqcy1jb252ZXJ0ZXIgcmVwb3NpdG9yeS5cIjpuKz1cIiBQbGVhc2UgbWFrZSBzdXJlIHRoZSBzZXJ2ZXIgaXMgc2VydmluZyB2YWxpZCBKU09OIGZvciB0aGlzIHJlcXVlc3QuXCIsbmV3IEVycm9yKG4pO2Nhc2UgNTppZihvPWUubW9kZWxUb3BvbG9neSxhPWUud2VpZ2h0c01hbmlmZXN0LG51bGw9PW8mJm51bGw9PWEpdGhyb3cgbmV3IEVycm9yKFwiVGhlIEpTT04gZnJvbSBIVFRQIHBhdGggXCIrdGhpcy5wYXRoK1wiIGNvbnRhaW5zIG5laXRoZXIgbW9kZWwgdG9wb2xvZ3kgb3IgbWFuaWZlc3QgZm9yIHdlaWdodHMuXCIpO3JldHVybiBudWxsPT1hP1szLDddOls0LHRoaXMubG9hZFdlaWdodHMoYSldO2Nhc2UgNjp1PXIuc2VudCgpLGk9dVswXSxzPXVbMV0sci5sYWJlbD03O2Nhc2UgNzpyZXR1cm5bMix7bW9kZWxUb3BvbG9neTpvLHdlaWdodFNwZWNzOmksd2VpZ2h0RGF0YTpzfV19fSl9KX0sdC5wcm90b3R5cGUubG9hZFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbixvLGEsaSxzLHUsbCxjLGgscDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6Zm9yKGU9QXJyYXkuaXNBcnJheSh0aGlzLnBhdGgpP3RoaXMucGF0aFsxXTp0aGlzLnBhdGgsbj1mdW5jdGlvbih0KXt2YXIgZT10Lmxhc3RJbmRleE9mKFwiL1wiKSxuPXQubGFzdEluZGV4T2YoXCI/XCIpLHI9dC5zdWJzdHJpbmcoMCxlKSxvPW4+ZT90LnN1YnN0cmluZyhuKTpcIlwiO3JldHVybltyK1wiL1wiLG9dfShlKSxvPW5bMF0sYT1uWzFdLGk9dGhpcy53ZWlnaHRQYXRoUHJlZml4fHxvLHM9W10sdT0wLGw9dDt1PGwubGVuZ3RoO3UrKyljPWxbdV0scy5wdXNoLmFwcGx5KHMsYy53ZWlnaHRzKTtyZXR1cm4gaD1bXSx0LmZvckVhY2goZnVuY3Rpb24odCl7dC5wYXRocy5mb3JFYWNoKGZ1bmN0aW9uKHQpe2gucHVzaChpK3QrYSl9KX0pLFs0LEtoKGgse3JlcXVlc3RJbml0OnRoaXMucmVxdWVzdEluaXQsZmV0Y2hGdW5jOnRoaXMuZmV0Y2gsb25Qcm9ncmVzczp0aGlzLm9uUHJvZ3Jlc3N9KV07Y2FzZSAxOnJldHVybiBwPXIuc2VudCgpLFsyLFtzLGZoKHApXV19fSl9KX0sdC5VUkxfU0NIRU1FX1JFR0VYPS9eaHR0cHM/OlxcL1xcLy8sdH0oKTtmdW5jdGlvbiBZaCh0KXtyZXR1cm4gbnVsbCE9dC5tYXRjaChYaC5VUkxfU0NIRU1FX1JFR0VYKX12YXIgUWg9ZnVuY3Rpb24odCxlKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgZmV0Y2gpcmV0dXJuIG51bGw7cmV0dXJuKEFycmF5LmlzQXJyYXkodCk/dC5ldmVyeShmdW5jdGlvbih0KXtyZXR1cm4gWWgodCl9KTpZaCh0KSk/SmgodCx7b25Qcm9ncmVzczplfSk6bnVsbH07ZnVuY3Rpb24gSmgodCxlKXtyZXR1cm4gbmV3IFhoKHQsZSl9bWgucmVnaXN0ZXJTYXZlUm91dGVyKFFoKSxtaC5yZWdpc3RlckxvYWRSb3V0ZXIoUWgpO3ZhciBaaD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5tb2RlbEFydGlmYWN0cz10fXJldHVybiB0LnByb3RvdHlwZS5sb2FkPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbih0KXtyZXR1cm5bMix0aGlzLm1vZGVsQXJ0aWZhY3RzXX0pfSl9LHR9KCksdHA9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3RoaXMuc2F2ZUhhbmRsZXI9dH1yZXR1cm4gdC5wcm90b3R5cGUuc2F2ZT1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe3JldHVyblsyLHRoaXMuc2F2ZUhhbmRsZXIodCldfSl9KX0sdH0oKTt2YXIgZXA9T2JqZWN0LmZyZWV6ZSh7YnJvd3NlckZpbGVzOmZ1bmN0aW9uKHQpe3JldHVybiBuZXcgcWgodCl9LGJyb3dzZXJIVFRQUmVxdWVzdDpmdW5jdGlvbih0LGUpe3JldHVybiBKaCh0LGUpfSxjb25jYXRlbmF0ZUFycmF5QnVmZmVyczpmaCxkZWNvZGVXZWlnaHRzOmxoLGVuY29kZVdlaWdodHM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgbyxhLGkscyx1LGw9dGhpcztyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGMpe3N3aXRjaChjLmxhYmVsKXtjYXNlIDA6Zm9yKG89W10sYT1bXSxpPUFycmF5LmlzQXJyYXkodCk/dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pOk9iamVjdC5rZXlzKHQpLHM9ZnVuY3Rpb24ocyl7dmFyIHU9aVtzXSxjPUFycmF5LmlzQXJyYXkodCk/dFtzXS50ZW5zb3I6dFt1XTtpZihcImZsb2F0MzJcIiE9PWMuZHR5cGUmJlwiaW50MzJcIiE9PWMuZHR5cGUmJlwiYm9vbFwiIT09Yy5kdHlwZSYmXCJzdHJpbmdcIiE9PWMuZHR5cGUpdGhyb3cgbmV3IEVycm9yKFwiVW5zdXBwb3J0ZWQgZHR5cGUgaW4gd2VpZ2h0ICdcIit1K1wiJzogXCIrYy5kdHlwZSk7dmFyIGg9e25hbWU6dSxzaGFwZTpjLnNoYXBlLGR0eXBlOmMuZHR5cGV9O2lmKFwic3RyaW5nXCI9PT1jLmR0eXBlKXt2YXIgcD1uZXcgUHJvbWlzZShmdW5jdGlvbih0KXtyZXR1cm4gbihsLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZSxuLG8sYSxpLHMsdTtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHIpe3N3aXRjaChyLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsYy5ieXRlcygpXTtjYXNlIDE6Zm9yKGU9ci5zZW50KCksbj1lLnJlZHVjZShmdW5jdGlvbih0LGUpe3JldHVybiB0K2UubGVuZ3RofSwwKSt1aCplLmxlbmd0aCxvPW5ldyBVaW50OEFycmF5KG4pLGE9MCxpPTA7aTxlLmxlbmd0aDtpKyspcz1lW2ldLHU9bmV3IFVpbnQ4QXJyYXkobmV3IFVpbnQzMkFycmF5KFtzLmxlbmd0aF0pLmJ1ZmZlciksby5zZXQodSxhKSxhKz11aCxvLnNldChzLGEpLGErPXMubGVuZ3RoO3JldHVybiB0KG8pLFsyXX19KX0pfSk7YS5wdXNoKHApfWVsc2UgYS5wdXNoKGMuZGF0YSgpKTtudWxsIT1lJiYoaC5ncm91cD1lKSxvLnB1c2goaCl9LHU9MDt1PGkubGVuZ3RoOysrdSlzKHUpO3JldHVybls0LFByb21pc2UuYWxsKGEpXTtjYXNlIDE6cmV0dXJuWzIse2RhdGE6Y2goYy5zZW50KCkpLHNwZWNzOm99XX19KX0pfSxmcm9tTWVtb3J5OmZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiAxPT09YXJndW1lbnRzLmxlbmd0aD9udWxsIT10Lm1vZGVsVG9wb2xvZ3l8fG51bGwhPXQud2VpZ2h0U3BlY3M/bmV3IFpoKHQpOihjb25zb2xlLndhcm4oXCJQbGVhc2UgY2FsbCB0Zi5pby5mcm9tTWVtb3J5KCkgd2l0aCBvbmx5IG9uZSBhcmd1bWVudC4gVGhlIGFyZ3VtZW50IHNob3VsZCBiZSBvZiB0eXBlIE1vZGVsQXJ0aWZhY3RzLiBUaGUgbXVsdGktYXJndW1lbnQgc2lnbmF0dXJlIG9mIHRmLmlvLmZyb21NZW1vcnkoKSBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYSBmdXR1cmUgcmVsZWFzZS5cIiksbmV3IFpoKHttb2RlbFRvcG9sb2d5OnR9KSk6KGNvbnNvbGUud2FybihcIlBsZWFzZSBjYWxsIHRmLmlvLmZyb21NZW1vcnkoKSB3aXRoIG9ubHkgb25lIGFyZ3VtZW50LiBUaGUgYXJndW1lbnQgc2hvdWxkIGJlIG9mIHR5cGUgTW9kZWxBcnRpZmFjdHMuIFRoZSBtdWx0aS1hcmd1bWVudCBzaWduYXR1cmUgb2YgdGYuaW8uZnJvbU1lbW9yeSgpIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBhIGZ1dHVyZSByZWxlYXNlLlwiKSxuZXcgWmgoe21vZGVsVG9wb2xvZ3k6dCx3ZWlnaHRTcGVjczplLHdlaWdodERhdGE6bix0cmFpbmluZ0NvbmZpZzpyfSkpfSxnZXRMb2FkSGFuZGxlcnM6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbWguZ2V0TG9hZEhhbmRsZXJzKHQsZSl9LGdldE1vZGVsQXJ0aWZhY3RzSW5mb0ZvckpTT046dmgsZ2V0U2F2ZUhhbmRsZXJzOmZ1bmN0aW9uKHQpe3JldHVybiBtaC5nZXRTYXZlSGFuZGxlcnModCl9LGh0dHA6SmgsaXNIVFRQU2NoZW1lOlloLGxvYWRXZWlnaHRzOmZ1bmN0aW9uKHQsZSxvLGEpe3JldHVybiB2b2lkIDA9PT1lJiYoZT1cIlwiKSxuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24obil7cmV0dXJuWzIsamgoZnVuY3Rpb24odCl7cmV0dXJuIEtoKHQse3JlcXVlc3RJbml0OmF9KX0pKHQsZSxvKV19KX0pfSxyZWdpc3RlckxvYWRSb3V0ZXI6ZnVuY3Rpb24odCl7cmV0dXJuIG1oLnJlZ2lzdGVyTG9hZFJvdXRlcih0KX0scmVnaXN0ZXJTYXZlUm91dGVyOmZ1bmN0aW9uKHQpe3JldHVybiBtaC5yZWdpc3RlclNhdmVSb3V0ZXIodCl9LHdlaWdodHNMb2FkZXJGYWN0b3J5OmpoLHdpdGhTYXZlSGFuZGxlcjpmdW5jdGlvbih0KXtyZXR1cm4gbmV3IHRwKHQpfSxjb3B5TW9kZWw6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKG4pe3JldHVyblsyLGJoKHQsZSwhMSldfSl9KX0sbGlzdE1vZGVsczpmdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciB0LGUsbixvLGEsaSxzO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDp0PXloLmdldFNjaGVtZXMoKSxlPXt9LG49MCxvPXQsci5sYWJlbD0xO2Nhc2UgMTpyZXR1cm4gbjxvLmxlbmd0aD8oYT1vW25dLFs0LHloLmdldE1hbmFnZXIoYSkubGlzdE1vZGVscygpXSk6WzMsNF07Y2FzZSAyOmZvcihzIGluIGk9ci5zZW50KCkpZVthK2doK3NdPWlbc107ci5sYWJlbD0zO2Nhc2UgMzpyZXR1cm4gbisrLFszLDFdO2Nhc2UgNDpyZXR1cm5bMixlXX19KX0pfSxtb3ZlTW9kZWw6ZnVuY3Rpb24odCxlKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKG4pe3JldHVyblsyLGJoKHQsZSwhMCldfSl9KX0scmVtb3ZlTW9kZWw6ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGU7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihuKXtyZXR1cm4gZT14aCh0KSxbMix5aC5nZXRNYW5hZ2VyKGUuc2NoZW1lKS5yZW1vdmVNb2RlbChlLnBhdGgpXX0pfSl9fSk7dmFyIG5wPXZuKHtjb25mdXNpb25NYXRyaXhfOmZ1bmN0aW9uKHQsZSxuKXt2YXIgcj1ubih0LFwibGFiZWxzXCIsXCJjb25mdXNpb25NYXRyaXhcIiksbz1ubihlLFwicHJlZGljdGlvbnNcIixcImNvbmZ1c2lvbk1hdHJpeFwiKTtmKG51bGw9PW58fG4+MCYmTnVtYmVyLmlzSW50ZWdlcihuKSxmdW5jdGlvbigpe3JldHVyblwiSWYgcHJvdmlkZWQsIG51bUNsYXNzZXMgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIsIGJ1dCBnb3QgXCIrbn0pLGYoMT09PXIucmFuayxmdW5jdGlvbigpe3JldHVyblwiRXhwZWN0ZWQgdGhlIHJhbmsgb2YgbGFiZWxzIHRvIGJlIDEsIGJ1dCBnb3QgXCIrci5yYW5rfSksZigxPT09by5yYW5rLGZ1bmN0aW9uKCl7cmV0dXJuXCJFeHBlY3RlZCB0aGUgcmFuayBvZiBwcmVkaWN0aW9ucyB0byBiZSAxLCBidXQgZ290IFwiK28ucmFua30pLGYoci5zaGFwZVswXT09PW8uc2hhcGVbMF0sZnVuY3Rpb24oKXtyZXR1cm5cIk1pc21hdGNoIGluIHRoZSBudW1iZXIgb2YgZXhhbXBsZXM6IFwiK3Iuc2hhcGVbMF0rXCIgdnMuIFwiK28uc2hhcGVbMF0rXCIuIExhYmVscyBhbmQgcHJlZGljdGlvbnMgc2hvdWxkIGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzLlwifSksZihuPjAmJk51bWJlci5pc0ludGVnZXIobiksZnVuY3Rpb24oKXtyZXR1cm5cIm51bUNsYXNzZXMgaXMgcmVxdWlyZWQgdG8gYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLCBidXQgZ290IFwiK259KTt2YXIgYT1scihyLmFzVHlwZShcImludDMyXCIpLG4pLGk9bHIoby5hc1R5cGUoXCJpbnQzMlwiKSxuKTtyZXR1cm4gYS50cmFuc3Bvc2UoKS5tYXRNdWwoaSkuYXNUeXBlKFwiaW50MzJcIil9fSkscnA9T2JqZWN0LmZyZWV6ZSh7Y29uZnVzaW9uTWF0cml4Om5wfSk7dmFyIG9wPXZuKHtmcm9tUGl4ZWxzXzpmdW5jdGlvbih0LGUpe2lmKHZvaWQgMD09PWUmJihlPTMpLGU+NCl0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgY29uc3RydWN0IFRlbnNvciB3aXRoIG1vcmUgdGhhbiA0IGNoYW5uZWxzIGZyb20gcGl4ZWxzLlwiKTt2YXIgbj1cInVuZGVmaW5lZFwiIT10eXBlb2YgSFRNTFZpZGVvRWxlbWVudCYmdCBpbnN0YW5jZW9mIEhUTUxWaWRlb0VsZW1lbnQ7aWYobiYmbiYmdC5yZWFkeVN0YXRlPDIpdGhyb3cgbmV3IEVycm9yKFwiVGhlIHZpZGVvIGVsZW1lbnQgaGFzIG5vdCBsb2FkZWQgZGF0YSB5ZXQuIFBsZWFzZSB3YWl0IGZvciBgbG9hZGVkZGF0YWAgZXZlbnQgb24gdGhlIDx2aWRlbz4gZWxlbWVudC5cIik7cmV0dXJuIFN0LmZyb21QaXhlbHModCxlKX19KSxhcD1PYmplY3QuZnJlZXplKHt0b1BpeGVsczpmdW5jdGlvbih0LGUpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBuLG8sYSxpLHMsdSxsLGMsaCxwLGYsZCx2LG0sZyx5LHgsYix3LEMsRSxSLEk7cmV0dXJuIHIodGhpcyxmdW5jdGlvbihyKXtzd2l0Y2goci5sYWJlbCl7Y2FzZSAwOmlmKG49bm4odCxcImltZ1wiLFwidG9QaXhlbHNcIiksdCBpbnN0YW5jZW9mIGN0fHwobj1uLnRvSW50KCkpLDIhPT1uLnJhbmsmJjMhPT1uLnJhbmspdGhyb3cgbmV3IEVycm9yKFwidG9QaXhlbHMgb25seSBzdXBwb3J0cyByYW5rIDIgb3IgMyB0ZW5zb3JzLCBnb3QgcmFuayBcIituLnJhbmsrXCIuXCIpO2lmKG89bi5zaGFwZS5zbGljZSgwLDIpLGE9b1swXSxpPW9bMV0sKHM9Mj09PW4ucmFuaz8xOm4uc2hhcGVbMl0pPjR8fDI9PT1zKXRocm93IG5ldyBFcnJvcihcInRvUGl4ZWxzIG9ubHkgc3VwcG9ydHMgZGVwdGggb2Ygc2l6ZSAxLCAzIG9yIDQgYnV0IGdvdCBcIitzKTtyZXR1cm5bNCxuLmRhdGEoKV07Y2FzZSAxOnJldHVybiB1PXIuc2VudCgpLGw9bi5taW4oKSxjPW4ubWF4KCksWzQsUHJvbWlzZS5hbGwoW2wuZGF0YSgpLGMuZGF0YSgpXSldO2Nhc2UgMjppZihoPXIuc2VudCgpLHA9aFswXSxmPWhbMV0sZD1wWzBdLHY9ZlswXSxsLmRpc3Bvc2UoKSxjLmRpc3Bvc2UoKSxcImZsb2F0MzJcIj09PW4uZHR5cGUpe2lmKGQ8MHx8dj4xKXRocm93IG5ldyBFcnJvcihcIlRlbnNvciB2YWx1ZXMgZm9yIGEgZmxvYXQzMiBUZW5zb3IgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgWzAgLSAxXSBidXQgZ290IHJhbmdlIFtcIitkK1wiIC0gXCIrditcIl0uXCIpfWVsc2V7aWYoXCJpbnQzMlwiIT09bi5kdHlwZSl0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCB0eXBlIGZvciB0b1BpeGVsczogXCIrbi5kdHlwZStcIi4gUGxlYXNlIHVzZSBmbG9hdDMyIG9yIGludDMyIHRlbnNvcnMuXCIpO2lmKGQ8MHx8dj4yNTUpdGhyb3cgbmV3IEVycm9yKFwiVGVuc29yIHZhbHVlcyBmb3IgYSBpbnQzMiBUZW5zb3IgbXVzdCBiZSBpbiB0aGUgcmFuZ2UgWzAgLSAyNTVdIGJ1dCBnb3QgcmFuZ2UgW1wiK2QrXCIgLSBcIit2K1wiXS5cIil9Zm9yKG09XCJmbG9hdDMyXCI9PT1uLmR0eXBlPzI1NToxLGc9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGkqYSo0KSx5PTA7eTxhKmk7Kyt5KXg9dm9pZCAwLGI9dm9pZCAwLHc9dm9pZCAwLEM9dm9pZCAwLDE9PT1zPyh4PXVbeV0qbSxiPXVbeV0qbSx3PXVbeV0qbSxDPTI1NSk6Mz09PXM/KHg9dVszKnldKm0sYj11WzMqeSsxXSptLHc9dVszKnkrMl0qbSxDPTI1NSk6ND09PXMmJih4PXVbNCp5XSptLGI9dVs0KnkrMV0qbSx3PXVbNCp5KzJdKm0sQz11WzQqeSszXSptKSxnWzArKEU9NCp5KV09TWF0aC5yb3VuZCh4KSxnW0UrMV09TWF0aC5yb3VuZChiKSxnW0UrMl09TWF0aC5yb3VuZCh3KSxnW0UrM109TWF0aC5yb3VuZChDKTtyZXR1cm4gbnVsbCE9ZSYmKGUud2lkdGg9aSxlLmhlaWdodD1hLFI9ZS5nZXRDb250ZXh0KFwiMmRcIiksST1uZXcgSW1hZ2VEYXRhKGcsaSxhKSxSLnB1dEltYWdlRGF0YShJLDAsMCkpLG4hPT10JiZuLmRpc3Bvc2UoKSxbMixnXX19KX0pfSxmcm9tUGl4ZWxzOm9wfSksaXA9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KCl7fXJldHVybiB0LnByb3RvdHlwZS5nZXRDbGFzc05hbWU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci5jbGFzc05hbWV9LHQuZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlKX0sdH0oKSxzcD1mdW5jdGlvbigpe2Z1bmN0aW9uIHQoKXt0aGlzLmNsYXNzTmFtZU1hcD17fX1yZXR1cm4gdC5nZXRNYXA9ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbD09dC5pbnN0YW5jZSYmKHQuaW5zdGFuY2U9bmV3IHQpLHQuaW5zdGFuY2V9LHQucmVnaXN0ZXI9ZnVuY3Rpb24oZSl7dC5nZXRNYXAoKS5jbGFzc05hbWVNYXBbZS5jbGFzc05hbWVdPVtlLGUuZnJvbUNvbmZpZ119LHR9KCk7ZnVuY3Rpb24gdXAodCl7ZihudWxsIT10LmNsYXNzTmFtZSxmdW5jdGlvbigpe3JldHVyblwiQ2xhc3MgYmVpbmcgcmVnaXN0ZXJlZCBkb2VzIG5vdCBoYXZlIHRoZSBzdGF0aWMgY2xhc3NOYW1lIHByb3BlcnR5IGRlZmluZWQuXCJ9KSxmKFwic3RyaW5nXCI9PXR5cGVvZiB0LmNsYXNzTmFtZSxmdW5jdGlvbigpe3JldHVyblwiY2xhc3NOYW1lIGlzIHJlcXVpcmVkIHRvIGJlIGEgc3RyaW5nLCBidXQgZ290IHR5cGUgXCIrdHlwZW9mIHQuY2xhc3NOYW1lfSksZih0LmNsYXNzTmFtZS5sZW5ndGg+MCxmdW5jdGlvbigpe3JldHVyblwiQ2xhc3MgYmVpbmcgcmVnaXN0ZXJlZCBoYXMgYW4gZW1wdHktc3RyaW5nIGFzIGl0cyBjbGFzc05hbWUsIHdoaWNoIGlzIGRpc2FsbG93ZWQuXCJ9KSxzcC5yZWdpc3Rlcih0KX12YXIgbHA9T2JqZWN0LmZyZWV6ZSh7U2VyaWFsaXphYmxlOmlwLFNlcmlhbGl6YXRpb25NYXA6c3AscmVnaXN0ZXJDbGFzczp1cH0pLGNwPS4wMDEsaHA9LjE7ZnVuY3Rpb24gcHAoKXtyZXR1cm4gMzI9PT1TdC5iYWNrZW5kLmZsb2F0UHJlY2lzaW9uKCk/Y3A6aHB9ZnVuY3Rpb24gZnAodCxlLG4pe3ZhciByPSEwO2lmKChfKHQpfHxfKGUpKSYmKHI9ITEpLF8odCkmJl8oZSkmJihyPSEwKSxyKXt2YXIgbz10LmNvbnN0cnVjdG9yLm5hbWUsYT1lLmNvbnN0cnVjdG9yLm5hbWU7aWYobyE9PWEpdGhyb3cgbmV3IEVycm9yKFwiQXJyYXlzIGFyZSBvZiBkaWZmZXJlbnQgdHlwZS4gQWN0dWFsOiBcIitvK1wiLiBFeHBlY3RlZDogXCIrYSl9aWYoQXJyYXkuaXNBcnJheSh0KSYmQXJyYXkuaXNBcnJheShlKSl7dmFyIGk9dG4odCkscz10bihlKTtpZigheShpLHMpKXRocm93IG5ldyBFcnJvcihcIkFycmF5cyBoYXZlIGRpZmZlcmVudCBzaGFwZXMuIEFjdHVhbDogW1wiK2krXCJdLiBFeHBlY3RlZDogW1wiK3MrXCJdXCIpfXZhciB1PV8odCk/dDptKHQpLGw9XyhlKT9lOm0oZSk7aWYodS5sZW5ndGghPT1sLmxlbmd0aCl0aHJvdyBuZXcgRXJyb3IoXCJBcnJheXMgaGF2ZSBkaWZmZXJlbnQgbGVuZ3RocyBhY3R1YWw6IFwiK3UubGVuZ3RoK1wiIHZzIGV4cGVjdGVkOiBcIitsLmxlbmd0aCtcIi5cXG5BY3R1YWw6ICAgXCIrdStcIi5cXG5FeHBlY3RlZDogXCIrbCtcIi5cIik7Zm9yKHZhciBjPTA7YzxsLmxlbmd0aDsrK2Mpe3ZhciBoPXVbY10scD1sW2NdO2lmKCFuKGgscCkpdGhyb3cgbmV3IEVycm9yKFwiQXJyYXlzIGRpZmZlcjogYWN0dWFsW1wiK2MrXCJdID0gXCIraCtcIiwgZXhwZWN0ZWRbXCIrYytcIl0gPSBcIitwK1wiLlxcbkFjdHVhbDogICBcIit1K1wiLlxcbkV4cGVjdGVkOiBcIitsK1wiLlwiKX19ZnVuY3Rpb24gZHAodCxlLG4pe3JldHVybiFpc0Zpbml0ZSh0KSYmIWlzRmluaXRlKGUpfHwhKGlzTmFOKHQpfHxpc05hTihlKXx8TWF0aC5hYnModC1lKT5uKX12YXIgdnA9T2JqZWN0LmZyZWV6ZSh7VEVTVF9FUFNJTE9OX0ZMT0FUMTY6aHAsZXhwZWN0QXJyYXlzQ2xvc2U6ZnVuY3Rpb24odCxlLG4pe3JldHVybiBudWxsPT1uJiYobj1wcCgpKSxmcCh0LGUsZnVuY3Rpb24odCxlKXtyZXR1cm4gZHAodCxlLG4pfSl9LHRlc3RFcHNpbG9uOnBwLGV4cGVjdFByb21pc2VUb0ZhaWw6ZnVuY3Rpb24odCxlKXt0KCkudGhlbihmdW5jdGlvbigpe3JldHVybiBlLmZhaWwoKX0sZnVuY3Rpb24oKXtyZXR1cm4gZSgpfSl9LGV4cGVjdEFycmF5c0VxdWFsOmZ1bmN0aW9uKHQsZSl7dmFyIG49XCJzdHJpbmdcIj09dHlwZW9mIGV8fFwibnVtYmVyXCI9PXR5cGVvZiBlfHxcImJvb2xlYW5cIj09dHlwZW9mIGU/W2VdOmU7cmV0dXJuIE0odCl8fE0odFswXSl8fE0oZSl8fE0oZVswXSk/ZnAodCxuLGZ1bmN0aW9uKHQsZSl7cmV0dXJuIHQ9PWV9KTpmcCh0LGUsZnVuY3Rpb24odCxlKXtyZXR1cm4gZHAodCxlLDApfSl9LGV4cGVjdE51bWJlcnNDbG9zZTpmdW5jdGlvbih0LGUsbil7aWYobnVsbD09biYmKG49cHAoKSksIWRwKHQsZSxuKSl0aHJvdyBuZXcgRXJyb3IoXCJOdW1iZXJzIGRpZmZlcjogYWN0dWFsID09PSBcIit0K1wiLCBleHBlY3RlZCA9PT0gXCIrZSl9LGV4cGVjdFZhbHVlc0luUmFuZ2U6ZnVuY3Rpb24odCxlLG4pe2Zvcih2YXIgcj0wO3I8dC5sZW5ndGg7cisrKWlmKHRbcl08ZXx8dFtyXT5uKXRocm93IG5ldyBFcnJvcihcIlZhbHVlIG91dCBvZiByYW5nZTpcIit0W3JdK1wiIGxvdzogXCIrZStcIiwgaGlnaDogXCIrbil9LGV4cGVjdEFycmF5QnVmZmVyc0VxdWFsOmZ1bmN0aW9uKHQsZSl7ZXhwZWN0KG5ldyBGbG9hdDMyQXJyYXkodCkpLnRvRXF1YWwobmV3IEZsb2F0MzJBcnJheShlKSl9fSksbXA9XCIxLjIuOVwiO3ZhciBncD1PYmplY3QuZnJlZXplKHtncGdwdV91dGlsOmxpLHdlYmdsX3V0aWw6X2UsZm9yY2VIYWxmRmxvYXQ6ZnVuY3Rpb24oKXtpLnNldChcIldFQkdMX0ZPUkNFX0YxNl9URVhUVVJFU1wiLCEwKX0sTWF0aEJhY2tlbmRXZWJHTDpDcyxzZXRXZWJHTENvbnRleHQ6RnQsR1BHUFVDb250ZXh0OmNpfSkseXA9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbygpe3JldHVybiBudWxsIT09dCYmdC5hcHBseSh0aGlzLGFyZ3VtZW50cyl8fHRoaXN9cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS5taW5pbWl6ZT1mdW5jdGlvbih0LGUsbil7dm9pZCAwPT09ZSYmKGU9ITEpO3ZhciByPXRoaXMuY29tcHV0ZUdyYWRpZW50cyh0LG4pLG89ci52YWx1ZSxhPXIuZ3JhZHM7aWYobnVsbCE9bil7dmFyIGk9bi5tYXAoZnVuY3Rpb24odCl7cmV0dXJue25hbWU6dC5uYW1lLHRlbnNvcjphW3QubmFtZV19fSk7dGhpcy5hcHBseUdyYWRpZW50cyhpKX1lbHNlIHRoaXMuYXBwbHlHcmFkaWVudHMoYSk7cmV0dXJuIFZlKGEpLGU/bzooby5kaXNwb3NlKCksbnVsbCl9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLnByb3RvdHlwZSxcIml0ZXJhdGlvbnNcIix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG51bGw9PXRoaXMuaXRlcmF0aW9uc18mJih0aGlzLml0ZXJhdGlvbnNfPTApLHRoaXMuaXRlcmF0aW9uc199LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSksby5wcm90b3R5cGUuaW5jcmVtZW50SXRlcmF0aW9ucz1mdW5jdGlvbigpe3RoaXMuaXRlcmF0aW9uc189dGhpcy5pdGVyYXRpb25zKzF9LG8ucHJvdG90eXBlLmNvbXB1dGVHcmFkaWVudHM9ZnVuY3Rpb24odCxlKXtyZXR1cm4gS3IodCxlKX0sby5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe251bGwhPXRoaXMuaXRlcmF0aW9uc18mJlZlKHRoaXMuaXRlcmF0aW9uc18pfSxvLnByb3RvdHlwZS5zYXZlSXRlcmF0aW9ucz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24odCl7cmV0dXJuIG51bGw9PXRoaXMuaXRlcmF0aW9uc18mJih0aGlzLml0ZXJhdGlvbnNfPTApLFsyLHtuYW1lOlwiaXRlclwiLHRlbnNvcjp3bih0aGlzLml0ZXJhdGlvbnNfLFwiaW50MzJcIil9XX0pfSl9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcImdldFdlaWdodHMoKSBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIHRoaXMgb3B0aW1pemVyIHlldC5cIil9KX0pfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24odCl7dGhyb3cgbmV3IEVycm9yKFwic2V0V2VpZ2h0cygpIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgdGhpcyBvcHRpbWl6ZXIgY2xhc3MgXCIrdGhpcy5nZXRDbGFzc05hbWUoKSl9KX0pfSxvLnByb3RvdHlwZS5leHRyYWN0SXRlcmF0aW9ucz1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgZTtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKG4pe3N3aXRjaChuLmxhYmVsKXtjYXNlIDA6cmV0dXJuIGU9dGhpcyxbNCx0WzBdLnRlbnNvci5kYXRhKCldO2Nhc2UgMTpyZXR1cm4gZS5pdGVyYXRpb25zXz1uLnNlbnQoKVswXSxbMix0LnNsaWNlKDEpXX19KX0pfSxvfShpcCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHlwLFN5bWJvbC5oYXNJbnN0YW5jZSx7dmFsdWU6ZnVuY3Rpb24odCl7cmV0dXJuIG51bGwhPXQubWluaW1pemUmJm51bGwhPXQuY29tcHV0ZUdyYWRpZW50cyYmbnVsbCE9dC5hcHBseUdyYWRpZW50c319KTt2YXIgeHA9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4scil7dm9pZCAwPT09ciYmKHI9bnVsbCk7dmFyIG89dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBvLmxlYXJuaW5nUmF0ZT1lLG8ucmhvPW4sby5lcHNpbG9uPXIsby5hY2N1bXVsYXRlZEdyYWRzPVtdLG8uYWNjdW11bGF0ZWRVcGRhdGVzPVtdLG51bGw9PXImJihvLmVwc2lsb249U3QuYmFja2VuZC5lcHNpbG9uKCkpLG99cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS5hcHBseUdyYWRpZW50cz1mdW5jdGlvbih0KXt2YXIgZT10aGlzOyhBcnJheS5pc0FycmF5KHQpP3QubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KTpPYmplY3Qua2V5cyh0KSkuZm9yRWFjaChmdW5jdGlvbihuLHIpe3ZhciBvPVN0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07bnVsbD09ZS5hY2N1bXVsYXRlZEdyYWRzW3JdJiYoZS5hY2N1bXVsYXRlZEdyYWRzW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9hY2N1bV9ncmFkXCIsdmFyaWFibGU6VWUoZnVuY3Rpb24oKXtyZXR1cm4gRm4obykudmFyaWFibGUoITEpfSl9KSxudWxsPT1lLmFjY3VtdWxhdGVkVXBkYXRlc1tyXSYmKGUuYWNjdW11bGF0ZWRVcGRhdGVzW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9hY2N1bV92YXJcIix2YXJpYWJsZTpVZShmdW5jdGlvbigpe3JldHVybiBGbihvKS52YXJpYWJsZSghMSl9KX0pO3ZhciBhPUFycmF5LmlzQXJyYXkodCk/dFtyXS50ZW5zb3I6dFtuXTtpZihudWxsIT1hKXt2YXIgaT1lLmFjY3VtdWxhdGVkR3JhZHNbcl0udmFyaWFibGUscz1lLmFjY3VtdWxhdGVkVXBkYXRlc1tyXS52YXJpYWJsZTtVZShmdW5jdGlvbigpe3ZhciB0PWkubXVsKGUucmhvKS5hZGQoYS5zcXVhcmUoKS5tdWwoMS1lLnJobykpLG49cy5hZGQoZS5lcHNpbG9uKS5zcXJ0KCkuZGl2KGkuYWRkKGUuZXBzaWxvbikuc3FydCgpKS5tdWwoYSkscj1zLm11bChlLnJobykuYWRkKG4uc3F1YXJlKCkubXVsKDEtZS5yaG8pKTtpLmFzc2lnbih0KSxzLmFzc2lnbihyKTt2YXIgdT1uLm11bCgtZS5sZWFybmluZ1JhdGUpLmFkZChvKTtvLmFzc2lnbih1KX0pfX0pLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5hY2N1bXVsYXRlZFVwZGF0ZXMmJihWZSh0aGlzLmFjY3VtdWxhdGVkR3JhZHMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnZhcmlhYmxlfSkpLFZlKHRoaXMuYWNjdW11bGF0ZWRVcGRhdGVzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKSl9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHQ9dGhpcy5hY2N1bXVsYXRlZEdyYWRzLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGVkVXBkYXRlcyksWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW2Uuc2VudCgpXS5jb25jYXQodC5tYXAoZnVuY3Rpb24odCl7cmV0dXJue25hbWU6dC5vcmlnaW5hbE5hbWUsdGVuc29yOnQudmFyaWFibGV9fSkpXX19KX0pfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmV4dHJhY3RJdGVyYXRpb25zKHQpXTtjYXNlIDE6cmV0dXJuIHQ9bi5zZW50KCksZT10Lmxlbmd0aC8yLCExLHRoaXMuYWNjdW11bGF0ZWRHcmFkcz10LnNsaWNlKDAsZSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSx0aGlzLmFjY3VtdWxhdGVkVXBkYXRlcz10LnNsaWNlKGUsMiplKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pLFsyXX19KX0pfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLHJobzp0aGlzLnJobyxlcHNpbG9uOnRoaXMuZXBzaWxvbn19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSxlLnJobyxlLmVwc2lsb24pfSxvLmNsYXNzTmFtZT1cIkFkYWRlbHRhXCIsb30oeXApO3VwKHhwKTt2YXIgYnA9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4pe3ZvaWQgMD09PW4mJihuPS4xKTt2YXIgcj10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIHIubGVhcm5pbmdSYXRlPWUsci5pbml0aWFsQWNjdW11bGF0b3JWYWx1ZT1uLHIuYWNjdW11bGF0ZWRHcmFkcz1bXSxyfXJldHVybiBlKG8sdCksby5wcm90b3R5cGUuYXBwbHlHcmFkaWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpczsoQXJyYXkuaXNBcnJheSh0KT90Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5uYW1lfSk6T2JqZWN0LmtleXModCkpLmZvckVhY2goZnVuY3Rpb24obixyKXt2YXIgbz1TdC5yZWdpc3RlcmVkVmFyaWFibGVzW25dO2lmKG51bGw9PWUuYWNjdW11bGF0ZWRHcmFkc1tyXSl7ZS5hY2N1bXVsYXRlZEdyYWRzW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9hY2N1bXVsYXRvclwiLHZhcmlhYmxlOlVlKGZ1bmN0aW9uKCl7cmV0dXJuIFRuKG8uc2hhcGUsZS5pbml0aWFsQWNjdW11bGF0b3JWYWx1ZSkudmFyaWFibGUoITEpfSl9fXZhciBhPUFycmF5LmlzQXJyYXkodCk/dFtyXS50ZW5zb3I6dFtuXTtpZihudWxsIT1hKXt2YXIgaT1lLmFjY3VtdWxhdGVkR3JhZHNbcl0udmFyaWFibGU7VWUoZnVuY3Rpb24oKXt2YXIgdD1pLmFkZChhLnNxdWFyZSgpKTtpLmFzc2lnbih0KTt2YXIgbj1hLmRpdih0LmFkZChTdC5iYWNrZW5kLmVwc2lsb24oKSkuc3FydCgpKS5tdWwoLWUubGVhcm5pbmdSYXRlKS5hZGQobyk7by5hc3NpZ24obil9KX19KSx0aGlzLmluY3JlbWVudEl0ZXJhdGlvbnMoKX0sby5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe251bGwhPXRoaXMuYWNjdW11bGF0ZWRHcmFkcyYmVmUodGhpcy5hY2N1bXVsYXRlZEdyYWRzLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24odCl7c3dpdGNoKHQubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLnNhdmVJdGVyYXRpb25zKCldO2Nhc2UgMTpyZXR1cm5bMixbdC5zZW50KCldLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGVkR3JhZHMubWFwKGZ1bmN0aW9uKHQpe3JldHVybntuYW1lOnQub3JpZ2luYWxOYW1lLHRlbnNvcjp0LnZhcmlhYmxlfX0pKV19fSl9KX0sby5wcm90b3R5cGUuc2V0V2VpZ2h0cz1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuWzQsdGhpcy5leHRyYWN0SXRlcmF0aW9ucyh0KV07Y2FzZSAxOnJldHVybiB0PWUuc2VudCgpLCExLHRoaXMuYWNjdW11bGF0ZWRHcmFkcz10Lm1hcChmdW5jdGlvbih0KXtyZXR1cm57b3JpZ2luYWxOYW1lOnQubmFtZSx2YXJpYWJsZTp0LnRlbnNvci52YXJpYWJsZSghMSl9fSksWzJdfX0pfSl9LG8ucHJvdG90eXBlLmdldENvbmZpZz1mdW5jdGlvbigpe3JldHVybntsZWFybmluZ1JhdGU6dGhpcy5sZWFybmluZ1JhdGUsaW5pdGlhbEFjY3VtdWxhdG9yVmFsdWU6dGhpcy5pbml0aWFsQWNjdW11bGF0b3JWYWx1ZX19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSxlLmluaXRpYWxBY2N1bXVsYXRvclZhbHVlKX0sby5jbGFzc05hbWU9XCJBZGFncmFkXCIsb30oeXApO3VwKGJwKTt2YXIgd3A9ZnVuY3Rpb24odCl7ZnVuY3Rpb24gbyhlLG4scixvKXt2b2lkIDA9PT1vJiYobz1udWxsKTt2YXIgYT10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIGEubGVhcm5pbmdSYXRlPWUsYS5iZXRhMT1uLGEuYmV0YTI9cixhLmVwc2lsb249byxhLmFjY3VtdWxhdGVkRmlyc3RNb21lbnQ9W10sYS5hY2N1bXVsYXRlZFNlY29uZE1vbWVudD1bXSxVZShmdW5jdGlvbigpe2EuYWNjQmV0YTE9d24obikudmFyaWFibGUoKSxhLmFjY0JldGEyPXduKHIpLnZhcmlhYmxlKCl9KSxudWxsPT1vJiYoYS5lcHNpbG9uPVN0LmJhY2tlbmQuZXBzaWxvbigpKSxhfXJldHVybiBlKG8sdCksby5wcm90b3R5cGUuYXBwbHlHcmFkaWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpcyxuPUFycmF5LmlzQXJyYXkodCk/dC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQubmFtZX0pOk9iamVjdC5rZXlzKHQpO1VlKGZ1bmN0aW9uKCl7dmFyIHI9R3UoMSxlLmFjY0JldGExKSxvPUd1KDEsZS5hY2NCZXRhMik7bi5mb3JFYWNoKGZ1bmN0aW9uKG4sYSl7dmFyIGk9U3QucmVnaXN0ZXJlZFZhcmlhYmxlc1tuXTtudWxsPT1lLmFjY3VtdWxhdGVkRmlyc3RNb21lbnRbYV0mJihlLmFjY3VtdWxhdGVkRmlyc3RNb21lbnRbYV09e29yaWdpbmFsTmFtZTpuK1wiL21cIix2YXJpYWJsZTpVZShmdW5jdGlvbigpe3JldHVybiBGbihpKS52YXJpYWJsZSghMSl9KX0pLG51bGw9PWUuYWNjdW11bGF0ZWRTZWNvbmRNb21lbnRbYV0mJihlLmFjY3VtdWxhdGVkU2Vjb25kTW9tZW50W2FdPXtvcmlnaW5hbE5hbWU6bitcIi92XCIsdmFyaWFibGU6VWUoZnVuY3Rpb24oKXtyZXR1cm4gRm4oaSkudmFyaWFibGUoITEpfSl9KTt2YXIgcz1BcnJheS5pc0FycmF5KHQpP3RbYV0udGVuc29yOnRbbl07aWYobnVsbCE9cyl7dmFyIHU9ZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdLnZhcmlhYmxlLGw9ZS5hY2N1bXVsYXRlZFNlY29uZE1vbWVudFthXS52YXJpYWJsZSxjPXUubXVsKGUuYmV0YTEpLmFkZChzLm11bCgxLWUuYmV0YTEpKSxoPWwubXVsKGUuYmV0YTIpLmFkZChzLnNxdWFyZSgpLm11bCgxLWUuYmV0YTIpKSxwPWMuZGl2KHIpLGY9aC5kaXYobyk7dS5hc3NpZ24oYyksbC5hc3NpZ24oaCk7dmFyIGQ9cC5kaXYoZi5zcXJ0KCkuYWRkKGUuZXBzaWxvbikpLm11bCgtZS5sZWFybmluZ1JhdGUpLmFkZChpKTtpLmFzc2lnbihkKX19KSxlLmFjY0JldGExLmFzc2lnbihlLmFjY0JldGExLm11bChlLmJldGExKSksZS5hY2NCZXRhMi5hc3NpZ24oZS5hY2NCZXRhMi5tdWwoZS5iZXRhMikpfSksdGhpcy5pbmNyZW1lbnRJdGVyYXRpb25zKCl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLmFjY0JldGExLmRpc3Bvc2UoKSx0aGlzLmFjY0JldGEyLmRpc3Bvc2UoKSxudWxsIT10aGlzLmFjY3VtdWxhdGVkRmlyc3RNb21lbnQmJlZlKHRoaXMuYWNjdW11bGF0ZWRGaXJzdE1vbWVudC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSksbnVsbCE9dGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudCYmVmUodGhpcy5hY2N1bXVsYXRlZFNlY29uZE1vbWVudC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSl9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHQ9dGhpcy5hY2N1bXVsYXRlZEZpcnN0TW9tZW50LmNvbmNhdCh0aGlzLmFjY3VtdWxhdGVkU2Vjb25kTW9tZW50KSxbNCx0aGlzLnNhdmVJdGVyYXRpb25zKCldO2Nhc2UgMTpyZXR1cm5bMixbZS5zZW50KCldLmNvbmNhdCh0Lm1hcChmdW5jdGlvbih0KXtyZXR1cm57bmFtZTp0Lm9yaWdpbmFsTmFtZSx0ZW5zb3I6dC52YXJpYWJsZX19KSldfX0pfSl9LG8ucHJvdG90eXBlLnNldFdlaWdodHM9ZnVuY3Rpb24odCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7dmFyIGUsbj10aGlzO3JldHVybiByKHRoaXMsZnVuY3Rpb24ocil7c3dpdGNoKHIubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmV4dHJhY3RJdGVyYXRpb25zKHQpXTtjYXNlIDE6cmV0dXJuIHQ9ci5zZW50KCksVWUoZnVuY3Rpb24oKXtuLmFjY0JldGExLmFzc2lnbihXdShuLmJldGExLG4uaXRlcmF0aW9uc18rMSkpLG4uYWNjQmV0YTIuYXNzaWduKFd1KG4uYmV0YTIsbi5pdGVyYXRpb25zXysxKSl9KSxlPXQubGVuZ3RoLzIsITEsdGhpcy5hY2N1bXVsYXRlZEZpcnN0TW9tZW50PXQuc2xpY2UoMCxlKS5tYXAoZnVuY3Rpb24odCl7cmV0dXJue29yaWdpbmFsTmFtZTp0Lm5hbWUsdmFyaWFibGU6dC50ZW5zb3IudmFyaWFibGUoITEpfX0pLHRoaXMuYWNjdW11bGF0ZWRTZWNvbmRNb21lbnQ9dC5zbGljZShlLDIqZSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSxbMl19fSl9KX0sby5wcm90b3R5cGUuZ2V0Q29uZmlnPWZ1bmN0aW9uKCl7cmV0dXJue2xlYXJuaW5nUmF0ZTp0aGlzLmxlYXJuaW5nUmF0ZSxiZXRhMTp0aGlzLmJldGExLGJldGEyOnRoaXMuYmV0YTIsZXBzaWxvbjp0aGlzLmVwc2lsb259fSxvLmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZS5sZWFybmluZ1JhdGUsZS5iZXRhMSxlLmJldGEyLGUuZXBzaWxvbil9LG8uY2xhc3NOYW1lPVwiQWRhbVwiLG99KHlwKTt1cCh3cCk7dmFyIENwPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG8oZSxuLHIsbyxhKXt2b2lkIDA9PT1vJiYobz1udWxsKSx2b2lkIDA9PT1hJiYoYT0wKTt2YXIgaT10LmNhbGwodGhpcyl8fHRoaXM7cmV0dXJuIGkubGVhcm5pbmdSYXRlPWUsaS5iZXRhMT1uLGkuYmV0YTI9cixpLmVwc2lsb249byxpLmRlY2F5PWEsaS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50PVtdLGkuYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm09W10sVWUoZnVuY3Rpb24oKXtpLml0ZXJhdGlvbj13bigwKS52YXJpYWJsZSgpLGkuYWNjQmV0YTE9d24obikudmFyaWFibGUoKX0pLG51bGw9PW8mJihpLmVwc2lsb249U3QuYmFja2VuZC5lcHNpbG9uKCkpLGl9cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS5hcHBseUdyYWRpZW50cz1mdW5jdGlvbih0KXt2YXIgZT10aGlzLG49QXJyYXkuaXNBcnJheSh0KT90Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5uYW1lfSk6T2JqZWN0LmtleXModCk7VWUoZnVuY3Rpb24oKXt2YXIgcj1HdSgxLGUuYWNjQmV0YTEpLG89U3UoLWUubGVhcm5pbmdSYXRlLGUuaXRlcmF0aW9uLm11bChlLmRlY2F5KS5hZGQoMSkpO24uZm9yRWFjaChmdW5jdGlvbihuLGEpe3ZhciBpPVN0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07bnVsbD09ZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdJiYoZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdPXtvcmlnaW5hbE5hbWU6bitcIi9tXCIsdmFyaWFibGU6Rm4oaSkudmFyaWFibGUoITEpfSksbnVsbD09ZS5hY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybVthXSYmKGUuYWNjdW11bGF0ZWRXZWlnaHRlZEluZk5vcm1bYV09e29yaWdpbmFsTmFtZTpuK1wiL3ZcIix2YXJpYWJsZTpGbihpKS52YXJpYWJsZSghMSl9KTt2YXIgcz1BcnJheS5pc0FycmF5KHQpP3RbYV0udGVuc29yOnRbbl07aWYobnVsbCE9cyl7dmFyIHU9ZS5hY2N1bXVsYXRlZEZpcnN0TW9tZW50W2FdLnZhcmlhYmxlLGw9ZS5hY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybVthXS52YXJpYWJsZSxjPXUubXVsKGUuYmV0YTEpLmFkZChzLm11bCgxLWUuYmV0YTEpKSxoPWwubXVsKGUuYmV0YTIpLHA9cy5hYnMoKSxmPWgubWF4aW11bShwKTt1LmFzc2lnbihjKSxsLmFzc2lnbihmKTt2YXIgZD1vLmRpdihyKS5tdWwoYy5kaXYoZi5hZGQoZS5lcHNpbG9uKSkpLmFkZChpKTtpLmFzc2lnbihkKX19KSxlLml0ZXJhdGlvbi5hc3NpZ24oZS5pdGVyYXRpb24uYWRkKDEpKSxlLmFjY0JldGExLmFzc2lnbihlLmFjY0JldGExLm11bChlLmJldGExKSl9KSx0aGlzLmluY3JlbWVudEl0ZXJhdGlvbnMoKX0sby5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3RoaXMuYWNjQmV0YTEuZGlzcG9zZSgpLHRoaXMuaXRlcmF0aW9uLmRpc3Bvc2UoKSxudWxsIT10aGlzLmFjY3VtdWxhdGVkRmlyc3RNb21lbnQmJlZlKHRoaXMuYWNjdW11bGF0ZWRGaXJzdE1vbWVudC5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSksbnVsbCE9dGhpcy5hY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybSYmVmUodGhpcy5hY2N1bXVsYXRlZFdlaWdodGVkSW5mTm9ybS5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSl9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcImdldFdlaWdodHMoKSBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIEFkYW1heCB5ZXQuXCIpfSl9KX0sby5wcm90b3R5cGUuc2V0V2VpZ2h0cz1mdW5jdGlvbih0KXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKHQpe3Rocm93IG5ldyBFcnJvcihcInNldFdlaWdodHMoKSBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIEFkYW1heCB5ZXQuXCIpfSl9KX0sby5wcm90b3R5cGUuZ2V0Q29uZmlnPWZ1bmN0aW9uKCl7cmV0dXJue2xlYXJuaW5nUmF0ZTp0aGlzLmxlYXJuaW5nUmF0ZSxiZXRhMTp0aGlzLmJldGExLGJldGEyOnRoaXMuYmV0YTIsZXBzaWxvbjp0aGlzLmVwc2lsb24sZGVjYXk6dGhpcy5kZWNheX19LG8uZnJvbUNvbmZpZz1mdW5jdGlvbih0LGUpe3JldHVybiBuZXcgdChlLmxlYXJuaW5nUmF0ZSxlLmJldGExLGUuYmV0YTIsZS5lcHNpbG9uLGUuZGVjYXkpfSxvLmNsYXNzTmFtZT1cIkFkYW1heFwiLG99KHlwKTt1cChDcCk7dmFyIEVwPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG8oZSl7dmFyIG49dC5jYWxsKHRoaXMpfHx0aGlzO3JldHVybiBuLmxlYXJuaW5nUmF0ZT1lLG4uc2V0TGVhcm5pbmdSYXRlKGUpLG59cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS5hcHBseUdyYWRpZW50cz1mdW5jdGlvbih0KXt2YXIgZT10aGlzOyhBcnJheS5pc0FycmF5KHQpP3QubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KTpPYmplY3Qua2V5cyh0KSkuZm9yRWFjaChmdW5jdGlvbihuLHIpe3ZhciBvPUFycmF5LmlzQXJyYXkodCk/dFtyXS50ZW5zb3I6dFtuXTtpZihudWxsIT1vKXt2YXIgYT1TdC5yZWdpc3RlcmVkVmFyaWFibGVzW25dO1VlKGZ1bmN0aW9uKCl7dmFyIHQ9ZS5jLm11bChvKS5hZGQoYSk7YS5hc3NpZ24odCl9KX19KSx0aGlzLmluY3JlbWVudEl0ZXJhdGlvbnMoKX0sby5wcm90b3R5cGUuc2V0TGVhcm5pbmdSYXRlPWZ1bmN0aW9uKHQpe3RoaXMubGVhcm5pbmdSYXRlPXQsbnVsbCE9dGhpcy5jJiZ0aGlzLmMuZGlzcG9zZSgpLHRoaXMuYz16ZSh3bigtdCkpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dGhpcy5jLmRpc3Bvc2UoKX0sby5wcm90b3R5cGUuZ2V0V2VpZ2h0cz1mdW5jdGlvbigpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24odCl7c3dpdGNoKHQubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLnNhdmVJdGVyYXRpb25zKCldO2Nhc2UgMTpyZXR1cm5bMixbdC5zZW50KCldXX19KX0pfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmV4dHJhY3RJdGVyYXRpb25zKHQpXTtjYXNlIDE6aWYoMCE9PSh0PWUuc2VudCgpKS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKFwiU0dEIG9wdGltaXplciBkb2VzIG5vdCBoYXZlIHNldHRhYmxlIHdlaWdodHMuXCIpO3JldHVyblsyXX19KX0pfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlfX0sby5mcm9tQ29uZmlnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyB0KGUubGVhcm5pbmdSYXRlKX0sby5jbGFzc05hbWU9XCJTR0RcIixvfSh5cCk7dXAoRXApO3ZhciBScD1mdW5jdGlvbih0KXtmdW5jdGlvbiBvKGUsbixyKXt2b2lkIDA9PT1yJiYocj0hMSk7dmFyIG89dC5jYWxsKHRoaXMsZSl8fHRoaXM7cmV0dXJuIG8ubGVhcm5pbmdSYXRlPWUsby5tb21lbnR1bT1uLG8udXNlTmVzdGVyb3Y9cixvLmFjY3VtdWxhdGlvbnM9W10sby5tPXduKG8ubW9tZW50dW0pLG99cmV0dXJuIGUobyx0KSxvLnByb3RvdHlwZS5hcHBseUdyYWRpZW50cz1mdW5jdGlvbih0KXt2YXIgZT10aGlzOyhBcnJheS5pc0FycmF5KHQpP3QubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0Lm5hbWV9KTpPYmplY3Qua2V5cyh0KSkuZm9yRWFjaChmdW5jdGlvbihuLHIpe3ZhciBvPVN0LnJlZ2lzdGVyZWRWYXJpYWJsZXNbbl07aWYobnVsbD09ZS5hY2N1bXVsYXRpb25zW3JdKXtlLmFjY3VtdWxhdGlvbnNbcl09e29yaWdpbmFsTmFtZTpuK1wiL21vbWVudHVtXCIsdmFyaWFibGU6VWUoZnVuY3Rpb24oKXtyZXR1cm4gRm4obykudmFyaWFibGUoITEpfSl9fXZhciBhPWUuYWNjdW11bGF0aW9uc1tyXS52YXJpYWJsZSxpPUFycmF5LmlzQXJyYXkodCk/dFtyXS50ZW5zb3I6dFtuXTtudWxsIT1pJiZVZShmdW5jdGlvbigpe3ZhciB0LG49ZS5tLm11bChhKS5hZGQoaSk7dD1lLnVzZU5lc3Rlcm92P2UuYy5tdWwoaS5hZGQobi5tdWwoZS5tKSkpLmFkZChvKTplLmMubXVsKG4pLmFkZChvKSxhLmFzc2lnbihuKSxvLmFzc2lnbih0KX0pfSksdGhpcy5pbmNyZW1lbnRJdGVyYXRpb25zKCl9LG8ucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0aGlzLm0uZGlzcG9zZSgpLG51bGwhPXRoaXMuYWNjdW11bGF0aW9ucyYmVmUodGhpcy5hY2N1bXVsYXRpb25zLm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC52YXJpYWJsZX0pKX0sby5wcm90b3R5cGUuc2V0TW9tZW50dW09ZnVuY3Rpb24odCl7dGhpcy5tb21lbnR1bT10fSxvLnByb3RvdHlwZS5nZXRXZWlnaHRzPWZ1bmN0aW9uKCl7cmV0dXJuIG4odGhpcyx2b2lkIDAsdm9pZCAwLGZ1bmN0aW9uKCl7cmV0dXJuIHIodGhpcyxmdW5jdGlvbih0KXtzd2l0Y2godC5sYWJlbCl7Y2FzZSAwOnJldHVybls0LHRoaXMuc2F2ZUl0ZXJhdGlvbnMoKV07Y2FzZSAxOnJldHVyblsyLFt0LnNlbnQoKV0uY29uY2F0KHRoaXMuYWNjdW11bGF0aW9ucy5tYXAoZnVuY3Rpb24odCl7cmV0dXJue25hbWU6dC5vcmlnaW5hbE5hbWUsdGVuc29yOnQudmFyaWFibGV9fSkpXX19KX0pfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3JldHVybiByKHRoaXMsZnVuY3Rpb24oZSl7c3dpdGNoKGUubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmV4dHJhY3RJdGVyYXRpb25zKHQpXTtjYXNlIDE6cmV0dXJuIHQ9ZS5zZW50KCksITEsdGhpcy5hY2N1bXVsYXRpb25zPXQubWFwKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSxbMl19fSl9KX0sby5wcm90b3R5cGUuZ2V0Q29uZmlnPWZ1bmN0aW9uKCl7cmV0dXJue2xlYXJuaW5nUmF0ZTp0aGlzLmxlYXJuaW5nUmF0ZSxtb21lbnR1bTp0aGlzLm1vbWVudHVtLHVzZU5lc3Rlcm92OnRoaXMudXNlTmVzdGVyb3Z9fSxvLmZyb21Db25maWc9ZnVuY3Rpb24odCxlKXtyZXR1cm4gbmV3IHQoZS5sZWFybmluZ1JhdGUsZS5tb21lbnR1bSxlLnVzZU5lc3Rlcm92KX0sby5jbGFzc05hbWU9XCJNb21lbnR1bVwiLG99KEVwKTt1cChScCk7dmFyIElwPWZ1bmN0aW9uKHQpe2Z1bmN0aW9uIG8oZSxuLHIsbyxhKXt2b2lkIDA9PT1uJiYobj0uOSksdm9pZCAwPT09ciYmKHI9MCksdm9pZCAwPT09byYmKG89bnVsbCksdm9pZCAwPT09YSYmKGE9ITEpO3ZhciBpPXQuY2FsbCh0aGlzKXx8dGhpcztyZXR1cm4gaS5sZWFybmluZ1JhdGU9ZSxpLmRlY2F5PW4saS5tb21lbnR1bT1yLGkuZXBzaWxvbj1vLGkuYWNjdW11bGF0ZWRNZWFuU3F1YXJlcz1bXSxpLmFjY3VtdWxhdGVkTW9tZW50cz1bXSxpLmFjY3VtdWxhdGVkTWVhbkdyYWRzPVtdLGkuY2VudGVyZWQ9YSxudWxsPT1vJiYoaS5lcHNpbG9uPVN0LmJhY2tlbmQuZXBzaWxvbigpKSxpfXJldHVybiBlKG8sdCksby5wcm90b3R5cGUuYXBwbHlHcmFkaWVudHM9ZnVuY3Rpb24odCl7dmFyIGU9dGhpczsoQXJyYXkuaXNBcnJheSh0KT90Lm1hcChmdW5jdGlvbih0KXtyZXR1cm4gdC5uYW1lfSk6T2JqZWN0LmtleXModCkpLmZvckVhY2goZnVuY3Rpb24obixyKXt2YXIgbz1TdC5yZWdpc3RlcmVkVmFyaWFibGVzW25dO251bGw9PWUuYWNjdW11bGF0ZWRNZWFuU3F1YXJlc1tyXSYmKGUuYWNjdW11bGF0ZWRNZWFuU3F1YXJlc1tyXT17b3JpZ2luYWxOYW1lOm4rXCIvcm1zXCIsdmFyaWFibGU6VWUoZnVuY3Rpb24oKXtyZXR1cm4gRm4obykudmFyaWFibGUoITEpfSl9KSxudWxsPT1lLmFjY3VtdWxhdGVkTW9tZW50c1tyXSYmKGUuYWNjdW11bGF0ZWRNb21lbnRzW3JdPXtvcmlnaW5hbE5hbWU6bitcIi9tb21lbnR1bVwiLHZhcmlhYmxlOlVlKGZ1bmN0aW9uKCl7cmV0dXJuIEZuKG8pLnZhcmlhYmxlKCExKX0pfSksbnVsbD09ZS5hY2N1bXVsYXRlZE1lYW5HcmFkc1tyXSYmZS5jZW50ZXJlZCYmKGUuYWNjdW11bGF0ZWRNZWFuR3JhZHNbcl09e29yaWdpbmFsTmFtZTpuK1wiL21nXCIsdmFyaWFibGU6VWUoZnVuY3Rpb24oKXtyZXR1cm4gRm4obykudmFyaWFibGUoITEpfSl9KTt2YXIgYT1BcnJheS5pc0FycmF5KHQpP3Rbcl0udGVuc29yOnRbbl07aWYobnVsbCE9YSl7dmFyIGk9ZS5hY2N1bXVsYXRlZE1lYW5TcXVhcmVzW3JdLnZhcmlhYmxlLHM9ZS5hY2N1bXVsYXRlZE1vbWVudHNbcl0udmFyaWFibGU7VWUoZnVuY3Rpb24oKXt2YXIgdD1pLm11bChlLmRlY2F5KS5hZGQoYS5zcXVhcmUoKS5tdWwoMS1lLmRlY2F5KSk7aWYoZS5jZW50ZXJlZCl7dmFyIG49ZS5hY2N1bXVsYXRlZE1lYW5HcmFkc1tyXS52YXJpYWJsZSx1PW4ubXVsKGUuZGVjYXkpLmFkZChhLm11bCgxLWUuZGVjYXkpKSxsPXMubXVsKGUubW9tZW50dW0pLmFkZChhLm11bChlLmxlYXJuaW5nUmF0ZSkuZGl2KHQuc3ViKHUuc3F1YXJlKCkuYWRkKGUuZXBzaWxvbikpLnNxcnQoKSkpO2kuYXNzaWduKHQpLG4uYXNzaWduKHUpLHMuYXNzaWduKGwpO3ZhciBjPW8uc3ViKGwpO28uYXNzaWduKGMpfWVsc2V7dmFyIGg9aS5tdWwoZS5kZWNheSkuYWRkKGEuc3F1YXJlKCkubXVsKDEtZS5kZWNheSkpO2w9cy5tdWwoZS5tb21lbnR1bSkuYWRkKGEubXVsKGUubGVhcm5pbmdSYXRlKS5kaXYoaC5hZGQoZS5lcHNpbG9uKS5zcXJ0KCkpKTtpLmFzc2lnbihoKSxzLmFzc2lnbihsKTtjPW8uc3ViKGwpO28uYXNzaWduKGMpfX0pfX0pLHRoaXMuaW5jcmVtZW50SXRlcmF0aW9ucygpfSxvLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7bnVsbCE9dGhpcy5hY2N1bXVsYXRlZE1lYW5TcXVhcmVzJiZWZSh0aGlzLmFjY3VtdWxhdGVkTWVhblNxdWFyZXMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnZhcmlhYmxlfSkpLG51bGwhPXRoaXMuYWNjdW11bGF0ZWRNZWFuR3JhZHMmJnRoaXMuY2VudGVyZWQmJlZlKHRoaXMuYWNjdW11bGF0ZWRNZWFuR3JhZHMubWFwKGZ1bmN0aW9uKHQpe3JldHVybiB0LnZhcmlhYmxlfSkpLG51bGwhPXRoaXMuYWNjdW11bGF0ZWRNb21lbnRzJiZWZSh0aGlzLmFjY3VtdWxhdGVkTW9tZW50cy5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQudmFyaWFibGV9KSl9LG8ucHJvdG90eXBlLmdldFdlaWdodHM9ZnVuY3Rpb24oKXtyZXR1cm4gbih0aGlzLHZvaWQgMCx2b2lkIDAsZnVuY3Rpb24oKXt2YXIgdDtyZXR1cm4gcih0aGlzLGZ1bmN0aW9uKGUpe3N3aXRjaChlLmxhYmVsKXtjYXNlIDA6cmV0dXJuIHQ9dGhpcy5hY2N1bXVsYXRlZE1lYW5TcXVhcmVzLmNvbmNhdCh0aGlzLmFjY3VtdWxhdGVkTW9tZW50cyksdGhpcy5jZW50ZXJlZCYmdC5wdXNoLmFwcGx5KHQsdGhpcy5hY2N1bXVsYXRlZE1lYW5HcmFkcyksWzQsdGhpcy5zYXZlSXRlcmF0aW9ucygpXTtjYXNlIDE6cmV0dXJuWzIsW2Uuc2VudCgpXS5jb25jYXQodC5tYXAoZnVuY3Rpb24odCl7cmV0dXJue25hbWU6dC5vcmlnaW5hbE5hbWUsdGVuc29yOnQudmFyaWFibGV9fSkpXX19KX0pfSxvLnByb3RvdHlwZS5zZXRXZWlnaHRzPWZ1bmN0aW9uKHQpe3JldHVybiBuKHRoaXMsdm9pZCAwLHZvaWQgMCxmdW5jdGlvbigpe3ZhciBlO3JldHVybiByKHRoaXMsZnVuY3Rpb24obil7c3dpdGNoKG4ubGFiZWwpe2Nhc2UgMDpyZXR1cm5bNCx0aGlzLmV4dHJhY3RJdGVyYXRpb25zKHQpXTtjYXNlIDE6cmV0dXJuIHQ9bi5zZW50KCksZT10aGlzLmNlbnRlcmVkP3QubGVuZ3RoLzM6dC5sZW5ndGgvMiwhMSx0aGlzLmFjY3VtdWxhdGVkTWVhblNxdWFyZXM9dC5zbGljZSgwLGUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm57b3JpZ2luYWxOYW1lOnQubmFtZSx2YXJpYWJsZTp0LnRlbnNvci52YXJpYWJsZSghMSl9fSksdGhpcy5hY2N1bXVsYXRlZE1vbWVudHM9dC5zbGljZShlLDIqZSkubWFwKGZ1bmN0aW9uKHQpe3JldHVybntvcmlnaW5hbE5hbWU6dC5uYW1lLHZhcmlhYmxlOnQudGVuc29yLnZhcmlhYmxlKCExKX19KSx0aGlzLmNlbnRlcmVkJiYodGhpcy5hY2N1bXVsYXRlZE1lYW5HcmFkcz10LnNsaWNlKDIqZSwzKmUpLm1hcChmdW5jdGlvbih0KXtyZXR1cm57b3JpZ2luYWxOYW1lOnQubmFtZSx2YXJpYWJsZTp0LnRlbnNvci52YXJpYWJsZSghMSl9fSkpLFsyXX19KX0pfSxvLnByb3RvdHlwZS5nZXRDb25maWc9ZnVuY3Rpb24oKXtyZXR1cm57bGVhcm5pbmdSYXRlOnRoaXMubGVhcm5pbmdSYXRlLGRlY2F5OnRoaXMuZGVjYXksbW9tZW50dW06dGhpcy5tb21lbnR1bSxlcHNpbG9uOnRoaXMuZXBzaWxvbixjZW50ZXJlZDp0aGlzLmNlbnRlcmVkfX0sby5mcm9tQ29uZmlnPWZ1bmN0aW9uKHQsZSl7cmV0dXJuIG5ldyB0KGUubGVhcm5pbmdSYXRlLGUuZGVjYXksZS5tb21lbnR1bSxlLmVwc2lsb24sZS5jZW50ZXJlZCl9LG8uY2xhc3NOYW1lPVwiUk1TUHJvcFwiLG99KHlwKTt1cChJcCk7dmFyIGtwPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe31yZXR1cm4gdC5zZ2Q9ZnVuY3Rpb24odCl7cmV0dXJuIG5ldyBFcCh0KX0sdC5tb21lbnR1bT1mdW5jdGlvbih0LGUsbil7cmV0dXJuIHZvaWQgMD09PW4mJihuPSExKSxuZXcgUnAodCxlLG4pfSx0LnJtc3Byb3A9ZnVuY3Rpb24odCxlLG4scixvKXtyZXR1cm4gdm9pZCAwPT09ZSYmKGU9LjkpLHZvaWQgMD09PW4mJihuPTApLHZvaWQgMD09PXImJihyPW51bGwpLHZvaWQgMD09PW8mJihvPSExKSxuZXcgSXAodCxlLG4scixvKX0sdC5hZGFtPWZ1bmN0aW9uKHQsZSxuLHIpe3JldHVybiB2b2lkIDA9PT10JiYodD0uMDAxKSx2b2lkIDA9PT1lJiYoZT0uOSksdm9pZCAwPT09biYmKG49Ljk5OSksdm9pZCAwPT09ciYmKHI9bnVsbCksbmV3IHdwKHQsZSxuLHIpfSx0LmFkYWRlbHRhPWZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9LjAwMSksdm9pZCAwPT09ZSYmKGU9Ljk1KSx2b2lkIDA9PT1uJiYobj1udWxsKSxuZXcgeHAodCxlLG4pfSx0LmFkYW1heD1mdW5jdGlvbih0LGUsbixyLG8pe3JldHVybiB2b2lkIDA9PT10JiYodD0uMDAyKSx2b2lkIDA9PT1lJiYoZT0uOSksdm9pZCAwPT09biYmKG49Ljk5OSksdm9pZCAwPT09ciYmKHI9bnVsbCksdm9pZCAwPT09byYmKG89MCksbmV3IENwKHQsZSxuLHIsbyl9LHQuYWRhZ3JhZD1mdW5jdGlvbih0LGUpe3JldHVybiB2b2lkIDA9PT1lJiYoZT0uMSksbmV3IGJwKHQsZSl9LHR9KCksTnA9e3NnZDprcC5zZ2QsbW9tZW50dW06a3AubW9tZW50dW0sYWRhZGVsdGE6a3AuYWRhZGVsdGEsYWRhZ3JhZDprcC5hZGFncmFkLHJtc3Byb3A6a3Aucm1zcHJvcCxhZGFtYXg6a3AuYWRhbWF4LGFkYW06a3AuYWRhbX0sU3A9XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHJlcXVlc3RBbmltYXRpb25GcmFtZT9yZXF1ZXN0QW5pbWF0aW9uRnJhbWU6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHNldEltbWVkaWF0ZT9zZXRJbW1lZGlhdGU6ZnVuY3Rpb24odCl7cmV0dXJuIHQoKX07ZnVuY3Rpb24gQXAoKXtyZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24odCl7cmV0dXJuIFNwKGZ1bmN0aW9uKCl7cmV0dXJuIHQoKX0pfSl9dXQ9dGg7ZXhwb3J0e3hwIGFzIEFkYWRlbHRhT3B0aW1pemVyLGJwIGFzIEFkYWdyYWRPcHRpbWl6ZXIsd3AgYXMgQWRhbU9wdGltaXplcixDcCBhcyBBZGFtYXhPcHRpbWl6ZXIsSnIgYXMgRGF0YVN0b3JhZ2UsaSBhcyBFTlYsbyBhcyBFbnZpcm9ubWVudCxaciBhcyBLZXJuZWxCYWNrZW5kLFJwIGFzIE1vbWVudHVtT3B0aW1pemVyLHlwIGFzIE9wdGltaXplcixJcCBhcyBSTVNQcm9wT3B0aW1pemVyLHB0IGFzIFJhbmssU2MgYXMgUmVkdWN0aW9uLEVwIGFzIFNHRE9wdGltaXplcixjdCBhcyBUZW5zb3IsaXQgYXMgVGVuc29yQnVmZmVyLGh0IGFzIFZhcmlhYmxlLEVzIGFzIGFicyxScyBhcyBhY29zLElzIGFzIGFjb3NoLFJ1IGFzIGFkZCxJdSBhcyBhZGROLGt1IGFzIGFkZFN0cmljdCx6bCBhcyBhbGwsR2wgYXMgYW55LEhsIGFzIGFyZ01heCxxbCBhcyBhcmdNaW4sa3MgYXMgYXNpbixOcyBhcyBhc2luaCxTcyBhcyBhdGFuLE51IGFzIGF0YW4yLEFzIGFzIGF0YW5oLF9sIGFzIGF2Z1Bvb2wsTWwgYXMgYXZnUG9vbDNkLFFlIGFzIGJhY2tlbmQseG8gYXMgYmFja2VuZF91dGlsLHNjIGFzIGJhc2ljTFNUTUNlbGwsZHUgYXMgYmF0Y2hOb3JtLHZ1IGFzIGJhdGNoTm9ybTJkLG11IGFzIGJhdGNoTm9ybTNkLGd1IGFzIGJhdGNoTm9ybTRkLGZ1IGFzIGJhdGNoTm9ybWFsaXphdGlvbixjdSBhcyBiYXRjaE5vcm1hbGl6YXRpb24yZCxodSBhcyBiYXRjaE5vcm1hbGl6YXRpb24zZCxwdSBhcyBiYXRjaE5vcm1hbGl6YXRpb240ZCxlciBhcyBiYXRjaFRvU3BhY2VORCxzbCBhcyBib29sZWFuTWFza0FzeW5jLGFwIGFzIGJyb3dzZXIsWm4gYXMgYnVmZmVyLG5yIGFzIGNhc3QsVHMgYXMgY2VpbCxEcyBhcyBjbGlwQnlWYWx1ZSxyciBhcyBjbG9uZSxtbiBhcyBjb21wbGV4LE1uIGFzIGNvbmNhdCxCbiBhcyBjb25jYXQxZCxQbiBhcyBjb25jYXQyZCxMbiBhcyBjb25jYXQzZCxXbiBhcyBjb25jYXQ0ZCxwbCBhcyBjb252MWQsZmwgYXMgY29udjJkLHZsIGFzIGNvbnYyZERlckZpbHRlcixtbCBhcyBjb252MmREZXJJbnB1dCx4bCBhcyBjb252MmRUcmFuc3Bvc2UsZGwgYXMgY29udjNkLGJsIGFzIGNvbnYzZFRyYW5zcG9zZSxfcyBhcyBjb3MsT3MgYXMgY29zaCxvciBhcyBjdW1zdW0sanIgYXMgY3VzdG9tR3JhZCxCZSBhcyBkZXByZWNhdGlvbldhcm4sYXIgYXMgZGVwdGhUb1NwYWNlLGdsIGFzIGRlcHRod2lzZUNvbnYyZCxiYyBhcyBkaWFnLE1lIGFzIGRpc2FibGVEZXByZWNhdGlvbldhcm5pbmdzLFZlIGFzIGRpc3Bvc2UsUGUgYXMgZGlzcG9zZVZhcmlhYmxlcyxTdSBhcyBkaXYsQXUgYXMgZGl2U3RyaWN0LENsIGFzIGRvdCx3YyBhcyBkcm9wb3V0LFpsIGFzIGVsdSxGZSBhcyBlbmFibGVEZWJ1Z01vZGUsT2UgYXMgZW5hYmxlUHJvZE1vZGUsdSBhcyBlbnZpcm9ubWVudCxxdSBhcyBlcXVhbCwkdSBhcyBlcXVhbFN0cmljdCxGcyBhcyBlcmYsTXMgYXMgZXhwLGlyIGFzIGV4cGFuZERpbXMsQnMgYXMgZXhwbTEsc3IgYXMgZXllLGZjIGFzIGZmdCxUbiBhcyBmaWxsLGplIGFzIGZpbmRCYWNrZW5kLFhlIGFzIGZpbmRCYWNrZW5kRmFjdG9yeSxQcyBhcyBmbG9vcixUdSBhcyBmbG9vckRpdixJYyBhcyBmcmFtZSxaYyBhcyBmdXNlZCxhbCBhcyBnYXRoZXIseGMgYXMgZ2F0aGVyTkQsJGUgYXMgZ2V0QmFja2VuZCxHciBhcyBncmFkLEhyIGFzIGdyYWRzLEt1IGFzIGdyZWF0ZXIsanUgYXMgZ3JlYXRlckVxdWFsLFh1IGFzIGdyZWF0ZXJFcXVhbFN0cmljdCxZdSBhcyBncmVhdGVyU3RyaWN0LFJjIGFzIGhhbW1pbmdXaW5kb3csRWMgYXMgaGFubldpbmRvdyxkYyBhcyBpZmZ0LHluIGFzIGltYWcsWWMgYXMgaW1hZ2UsQWMgYXMgaW5Ub3BLQXN5bmMsZXAgYXMgaW8sbWMgYXMgaXJmZnQsWHMgYXMgaXNGaW5pdGUsanMgYXMgaXNJbmYsS3MgYXMgaXNOYU4semUgYXMga2VlcCx0YyBhcyBsZWFreVJlbHUsUXUgYXMgbGVzcyxKdSBhcyBsZXNzRXF1YWwsWnUgYXMgbGVzc0VxdWFsU3RyaWN0LHRsIGFzIGxlc3NTdHJpY3QsR2MgYXMgbGluYWxnLERuIGFzIGxpbnNwYWNlLGFjIGFzIGxvY2FsUmVzcG9uc2VOb3JtYWxpemF0aW9uLExzIGFzIGxvZyxXcyBhcyBsb2cxcCxVcyBhcyBsb2dTaWdtb2lkLFFyIGFzIGxvZ1NvZnRtYXgsJGwgYXMgbG9nU3VtRXhwLHl1IGFzIGxvZ2ljYWxBbmQseHUgYXMgbG9naWNhbE5vdCxidSBhcyBsb2dpY2FsT3Isd3UgYXMgbG9naWNhbFhvcixXYyBhcyBsb3NzZXMsd2wgYXMgbWF0TXVsLHJwIGFzIG1hdGgsS2wgYXMgbWF4LERsIGFzIG1heFBvb2wsRmwgYXMgbWF4UG9vbDNkLER1IGFzIG1heGltdW0sX3UgYXMgbWF4aW11bVN0cmljdCxqbCBhcyBtZWFuLExlIGFzIG1lbW9yeSxYbCBhcyBtaW4sT3UgYXMgbWluaW11bSxGdSBhcyBtaW5pbXVtU3RyaWN0LE11IGFzIG1vZCxCdSBhcyBtb2RTdHJpY3QsWWwgYXMgbW9tZW50cyxsYyBhcyBtb3ZpbmdBdmVyYWdlLFB1IGFzIG11bCxMdSBhcyBtdWxTdHJpY3QsdWMgYXMgbXVsdGlSTk5DZWxsLHVyIGFzIG11bHRpbm9taWFsLFZzIGFzIG5lZyxBcCBhcyBuZXh0RnJhbWUsaWMgYXMgbm9ybSxlbCBhcyBub3RFcXVhbCxubCBhcyBub3RFcXVhbFN0cmljdCxsciBhcyBvbmVIb3QsU24gYXMgb25lcyxPbiBhcyBvbmVzTGlrZSx2biBhcyBvcCxFbCBhcyBvdXRlclByb2R1Y3QsY3IgYXMgcGFkLGhyIGFzIHBhZDFkLHByIGFzIHBhZDJkLGZyIGFzIHBhZDNkLGRyIGFzIHBhZDRkLE9sIGFzIHBvb2wsV3UgYXMgcG93LFV1IGFzIHBvd1N0cmljdCxlYyBhcyBwcmVsdSx0ciBhcyBwcmludCxKbCBhcyBwcm9kLFdlIGFzIHByb2ZpbGUsdnIgYXMgcmFuZCxnciBhcyByYW5kb21HYW1tYSxtciBhcyByYW5kb21Ob3JtYWwseXIgYXMgcmFuZG9tVW5pZm9ybSxfbiBhcyByYW5nZSxxZSBhcyByZWFkeSxnbiBhcyByZWFsLHpzIGFzIHJlY2lwcm9jYWwsWWUgYXMgcmVnaXN0ZXJCYWNrZW5kLG5jIGFzIHJlbHUsS2UgYXMgcmVtb3ZlQmFja2VuZCx4ciBhcyByZXNoYXBlLFJsIGFzIHJldmVyc2UsSWwgYXMgcmV2ZXJzZTFkLGtsIGFzIHJldmVyc2UyZCxObCBhcyByZXZlcnNlM2QsU2wgYXMgcmV2ZXJzZTRkLHZjIGFzIHJmZnQsR3MgYXMgcm91bmQsSHMgYXMgcnNxcnQsd24gYXMgc2NhbGFyLHBjIGFzIHNjYXR0ZXJORCxyYyBhcyBzZWx1LHlsIGFzIHNlcGFyYWJsZUNvbnYyZCxscCBhcyBzZXJpYWxpemF0aW9uLEhlIGFzIHNldEJhY2tlbmQsSmUgYXMgc2V0UGxhdGZvcm0sa3IgYXMgc2V0ZGlmZjFkQXN5bmMscXMgYXMgc2lnbW9pZCwkcyBhcyBzaWduLE5jIGFzIHNpZ25hbCxZcyBhcyBzaW4sUXMgYXMgc2luaCxCbCBhcyBzbGljZSxQbCBhcyBzbGljZTFkLExsIGFzIHNsaWNlMmQsV2wgYXMgc2xpY2UzZCxVbCBhcyBzbGljZTRkLFlyIGFzIHNvZnRtYXgsSnMgYXMgc29mdHBsdXMsYnIgYXMgc3BhY2VUb0JhdGNoTkQseWMgYXMgc3BhcnNlVG9EZW5zZSxnYyBhcyBzcGVjdHJhbCxVbiBhcyBzcGxpdCxacyBhcyBzcXJ0LHR1IGFzIHNxdWFyZSxWdSBhcyBzcXVhcmVkRGlmZmVyZW5jZSx6dSBhcyBzcXVhcmVkRGlmZmVyZW5jZVN0cmljdCx3ciBhcyBzcXVlZXplLENyIGFzIHN0YWNrLGV1IGFzIHN0ZXAsa2MgYXMgc3RmdCxjYyBhcyBzdHJpZGVkU2xpY2UsR3UgYXMgc3ViLEh1IGFzIHN1YlN0cmljdCxRbCBhcyBzdW0sbnUgYXMgdGFuLHJ1IGFzIHRhbmgseG4gYXMgdGVuc29yLENuIGFzIHRlbnNvcjFkLEVuIGFzIHRlbnNvcjJkLFJuIGFzIHRlbnNvcjNkLEluIGFzIHRlbnNvcjRkLGtuIGFzIHRlbnNvcjVkLE5uIGFzIHRlbnNvcjZkLEl0IGFzIHRlbnNvcl91dGlsLHZwIGFzIHRlc3RfdXRpbCxVZSBhcyB0aWR5LEVyIGFzIHRpbGUsR2UgYXMgdGltZSxoYyBhcyB0b3BrLE5wIGFzIHRyYWluLG9jIGFzIHRyYW5zcG9zZSxSciBhcyB0cnVuY2F0ZWROb3JtYWwsaWwgYXMgdW5zb3J0ZWRTZWdtZW50U3VtLElyIGFzIHVuc3RhY2ssWSBhcyB1dGlsLHFyIGFzIHZhbHVlQW5kR3JhZCwkciBhcyB2YWx1ZUFuZEdyYWRzLGd0IGFzIHZhcmlhYmxlLEtyIGFzIHZhcmlhYmxlR3JhZHMsbXAgYXMgdmVyc2lvbl9jb3JlLGdwIGFzIHdlYmdsLEN1IGFzIHdoZXJlLEV1IGFzIHdoZXJlQXN5bmMsQW4gYXMgemVyb3MsRm4gYXMgemVyb3NMaWtlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRmLWNvcmUuZXNtLmpzLm1hcFxuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIi8qIVxuICogVGhlIGJ1ZmZlciBtb2R1bGUgZnJvbSBub2RlLmpzLCBmb3IgdGhlIGJyb3dzZXIuXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGZlcm9zc0BmZXJvc3Mub3JnPiA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsInZhciBzY29wZSA9ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiICYmIGdsb2JhbCkgfHxcbiAgICAgICAgICAgICh0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBzZWxmKSB8fFxuICAgICAgICAgICAgd2luZG93O1xudmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFyVGltZW91dCk7XG59O1xuZXhwb3J0cy5zZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gbmV3IFRpbWVvdXQoYXBwbHkuY2FsbChzZXRJbnRlcnZhbCwgc2NvcGUsIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHtcbiAgaWYgKHRpbWVvdXQpIHtcbiAgICB0aW1lb3V0LmNsb3NlKCk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIFRpbWVvdXQoaWQsIGNsZWFyRm4pIHtcbiAgdGhpcy5faWQgPSBpZDtcbiAgdGhpcy5fY2xlYXJGbiA9IGNsZWFyRm47XG59XG5UaW1lb3V0LnByb3RvdHlwZS51bnJlZiA9IFRpbWVvdXQucHJvdG90eXBlLnJlZiA9IGZ1bmN0aW9uKCkge307XG5UaW1lb3V0LnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9jbGVhckZuLmNhbGwoc2NvcGUsIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuLy8gT24gc29tZSBleG90aWMgZW52aXJvbm1lbnRzLCBpdCdzIG5vdCBjbGVhciB3aGljaCBvYmplY3QgYHNldGltbWVkaWF0ZWAgd2FzXG4vLyBhYmxlIHRvIGluc3RhbGwgb250by4gIFNlYXJjaCBlYWNoIHBvc3NpYmlsaXR5IGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZVxuLy8gYHNldGltbWVkaWF0ZWAgbGlicmFyeS5cbmV4cG9ydHMuc2V0SW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodHlwZW9mIGdsb2JhbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBnbG9iYWwuc2V0SW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAodGhpcyAmJiB0aGlzLnNldEltbWVkaWF0ZSk7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiICYmIHNlbGYuY2xlYXJJbW1lZGlhdGUpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgJiYgZ2xvYmFsLmNsZWFySW1tZWRpYXRlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzICYmIHRoaXMuY2xlYXJJbW1lZGlhdGUpO1xuIiwiKGZ1bmN0aW9uIChnbG9iYWwsIHVuZGVmaW5lZCkge1xuICAgIFwidXNlIHN0cmljdFwiO1xuXG4gICAgaWYgKGdsb2JhbC5zZXRJbW1lZGlhdGUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBuZXh0SGFuZGxlID0gMTsgLy8gU3BlYyBzYXlzIGdyZWF0ZXIgdGhhbiB6ZXJvXG4gICAgdmFyIHRhc2tzQnlIYW5kbGUgPSB7fTtcbiAgICB2YXIgY3VycmVudGx5UnVubmluZ0FUYXNrID0gZmFsc2U7XG4gICAgdmFyIGRvYyA9IGdsb2JhbC5kb2N1bWVudDtcbiAgICB2YXIgcmVnaXN0ZXJJbW1lZGlhdGU7XG5cbiAgICBmdW5jdGlvbiBzZXRJbW1lZGlhdGUoY2FsbGJhY2spIHtcbiAgICAgIC8vIENhbGxiYWNrIGNhbiBlaXRoZXIgYmUgYSBmdW5jdGlvbiBvciBhIHN0cmluZ1xuICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gbmV3IEZ1bmN0aW9uKFwiXCIgKyBjYWxsYmFjayk7XG4gICAgICB9XG4gICAgICAvLyBDb3B5IGZ1bmN0aW9uIGFyZ3VtZW50c1xuICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpICsgMV07XG4gICAgICB9XG4gICAgICAvLyBTdG9yZSBhbmQgcmVnaXN0ZXIgdGhlIHRhc2tcbiAgICAgIHZhciB0YXNrID0geyBjYWxsYmFjazogY2FsbGJhY2ssIGFyZ3M6IGFyZ3MgfTtcbiAgICAgIHRhc2tzQnlIYW5kbGVbbmV4dEhhbmRsZV0gPSB0YXNrO1xuICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUobmV4dEhhbmRsZSk7XG4gICAgICByZXR1cm4gbmV4dEhhbmRsZSsrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGhhbmRsZSkge1xuICAgICAgICBkZWxldGUgdGFza3NCeUhhbmRsZVtoYW5kbGVdO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bih0YXNrKSB7XG4gICAgICAgIHZhciBjYWxsYmFjayA9IHRhc2suY2FsbGJhY2s7XG4gICAgICAgIHZhciBhcmdzID0gdGFzay5hcmdzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgY2FsbGJhY2soYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGNhbGxiYWNrLmFwcGx5KHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJ1bklmUHJlc2VudChoYW5kbGUpIHtcbiAgICAgICAgLy8gRnJvbSB0aGUgc3BlYzogXCJXYWl0IHVudGlsIGFueSBpbnZvY2F0aW9ucyBvZiB0aGlzIGFsZ29yaXRobSBzdGFydGVkIGJlZm9yZSB0aGlzIG9uZSBoYXZlIGNvbXBsZXRlZC5cIlxuICAgICAgICAvLyBTbyBpZiB3ZSdyZSBjdXJyZW50bHkgcnVubmluZyBhIHRhc2ssIHdlJ2xsIG5lZWQgdG8gZGVsYXkgdGhpcyBpbnZvY2F0aW9uLlxuICAgICAgICBpZiAoY3VycmVudGx5UnVubmluZ0FUYXNrKSB7XG4gICAgICAgICAgICAvLyBEZWxheSBieSBkb2luZyBhIHNldFRpbWVvdXQuIHNldEltbWVkaWF0ZSB3YXMgdHJpZWQgaW5zdGVhZCwgYnV0IGluIEZpcmVmb3ggNyBpdCBnZW5lcmF0ZWQgYVxuICAgICAgICAgICAgLy8gXCJ0b28gbXVjaCByZWN1cnNpb25cIiBlcnJvci5cbiAgICAgICAgICAgIHNldFRpbWVvdXQocnVuSWZQcmVzZW50LCAwLCBoYW5kbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRhc2sgPSB0YXNrc0J5SGFuZGxlW2hhbmRsZV07XG4gICAgICAgICAgICBpZiAodGFzaykge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IHRydWU7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcnVuKHRhc2spO1xuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGNsZWFySW1tZWRpYXRlKGhhbmRsZSk7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVJ1bm5pbmdBVGFzayA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc3RhbGxOZXh0VGlja0ltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgcHJvY2Vzcy5uZXh0VGljayhmdW5jdGlvbiAoKSB7IHJ1bklmUHJlc2VudChoYW5kbGUpOyB9KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYW5Vc2VQb3N0TWVzc2FnZSgpIHtcbiAgICAgICAgLy8gVGhlIHRlc3QgYWdhaW5zdCBgaW1wb3J0U2NyaXB0c2AgcHJldmVudHMgdGhpcyBpbXBsZW1lbnRhdGlvbiBmcm9tIGJlaW5nIGluc3RhbGxlZCBpbnNpZGUgYSB3ZWIgd29ya2VyLFxuICAgICAgICAvLyB3aGVyZSBgZ2xvYmFsLnBvc3RNZXNzYWdlYCBtZWFucyBzb21ldGhpbmcgY29tcGxldGVseSBkaWZmZXJlbnQgYW5kIGNhbid0IGJlIHVzZWQgZm9yIHRoaXMgcHVycG9zZS5cbiAgICAgICAgaWYgKGdsb2JhbC5wb3N0TWVzc2FnZSAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcbiAgICAgICAgICAgIHZhciBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBvbGRPbk1lc3NhZ2UgPSBnbG9iYWwub25tZXNzYWdlO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHBvc3RNZXNzYWdlSXNBc3luY2hyb25vdXMgPSBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoXCJcIiwgXCIqXCIpO1xuICAgICAgICAgICAgZ2xvYmFsLm9ubWVzc2FnZSA9IG9sZE9uTWVzc2FnZTtcbiAgICAgICAgICAgIHJldHVybiBwb3N0TWVzc2FnZUlzQXN5bmNocm9ub3VzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIC8vIEluc3RhbGxzIGFuIGV2ZW50IGhhbmRsZXIgb24gYGdsb2JhbGAgZm9yIHRoZSBgbWVzc2FnZWAgZXZlbnQ6IHNlZVxuICAgICAgICAvLyAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuL0RPTS93aW5kb3cucG9zdE1lc3NhZ2VcbiAgICAgICAgLy8gKiBodHRwOi8vd3d3LndoYXR3Zy5vcmcvc3BlY3Mvd2ViLWFwcHMvY3VycmVudC13b3JrL211bHRpcGFnZS9jb21tcy5odG1sI2Nyb3NzRG9jdW1lbnRNZXNzYWdlc1xuXG4gICAgICAgIHZhciBtZXNzYWdlUHJlZml4ID0gXCJzZXRJbW1lZGlhdGUkXCIgKyBNYXRoLnJhbmRvbSgpICsgXCIkXCI7XG4gICAgICAgIHZhciBvbkdsb2JhbE1lc3NhZ2UgPSBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50LnNvdXJjZSA9PT0gZ2xvYmFsICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGV2ZW50LmRhdGEgPT09IFwic3RyaW5nXCIgJiZcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmluZGV4T2YobWVzc2FnZVByZWZpeCkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBydW5JZlByZXNlbnQoK2V2ZW50LmRhdGEuc2xpY2UobWVzc2FnZVByZWZpeC5sZW5ndGgpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UsIGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbC5hdHRhY2hFdmVudChcIm9ubWVzc2FnZVwiLCBvbkdsb2JhbE1lc3NhZ2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShtZXNzYWdlUHJlZml4ICsgaGFuZGxlLCBcIipcIik7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zdGFsbE1lc3NhZ2VDaGFubmVsSW1wbGVtZW50YXRpb24oKSB7XG4gICAgICAgIHZhciBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XG4gICAgICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIHZhciBoYW5kbGUgPSBldmVudC5kYXRhO1xuICAgICAgICAgICAgcnVuSWZQcmVzZW50KGhhbmRsZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmVnaXN0ZXJJbW1lZGlhdGUgPSBmdW5jdGlvbihoYW5kbGUpIHtcbiAgICAgICAgICAgIGNoYW5uZWwucG9ydDIucG9zdE1lc3NhZ2UoaGFuZGxlKTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICB2YXIgaHRtbCA9IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG4gICAgICAgIHJlZ2lzdGVySW1tZWRpYXRlID0gZnVuY3Rpb24oaGFuZGxlKSB7XG4gICAgICAgICAgICAvLyBDcmVhdGUgYSA8c2NyaXB0PiBlbGVtZW50OyBpdHMgcmVhZHlzdGF0ZWNoYW5nZSBldmVudCB3aWxsIGJlIGZpcmVkIGFzeW5jaHJvbm91c2x5IG9uY2UgaXQgaXMgaW5zZXJ0ZWRcbiAgICAgICAgICAgIC8vIGludG8gdGhlIGRvY3VtZW50LiBEbyBzbywgdGh1cyBxdWV1aW5nIHVwIHRoZSB0YXNrLiBSZW1lbWJlciB0byBjbGVhbiB1cCBvbmNlIGl0J3MgYmVlbiBjYWxsZWQuXG4gICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jLmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG4gICAgICAgICAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJ1bklmUHJlc2VudChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICBzY3JpcHQgPSBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnN0YWxsU2V0VGltZW91dEltcGxlbWVudGF0aW9uKCkge1xuICAgICAgICByZWdpc3RlckltbWVkaWF0ZSA9IGZ1bmN0aW9uKGhhbmRsZSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChydW5JZlByZXNlbnQsIDAsIGhhbmRsZSk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgc3VwcG9ydGVkLCB3ZSBzaG91bGQgYXR0YWNoIHRvIHRoZSBwcm90b3R5cGUgb2YgZ2xvYmFsLCBzaW5jZSB0aGF0IGlzIHdoZXJlIHNldFRpbWVvdXQgZXQgYWwuIGxpdmUuXG4gICAgdmFyIGF0dGFjaFRvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mICYmIE9iamVjdC5nZXRQcm90b3R5cGVPZihnbG9iYWwpO1xuICAgIGF0dGFjaFRvID0gYXR0YWNoVG8gJiYgYXR0YWNoVG8uc2V0VGltZW91dCA/IGF0dGFjaFRvIDogZ2xvYmFsO1xuXG4gICAgLy8gRG9uJ3QgZ2V0IGZvb2xlZCBieSBlLmcuIGJyb3dzZXJpZnkgZW52aXJvbm1lbnRzLlxuICAgIGlmICh7fS50b1N0cmluZy5jYWxsKGdsb2JhbC5wcm9jZXNzKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCIpIHtcbiAgICAgICAgLy8gRm9yIE5vZGUuanMgYmVmb3JlIDAuOVxuICAgICAgICBpbnN0YWxsTmV4dFRpY2tJbXBsZW1lbnRhdGlvbigpO1xuXG4gICAgfSBlbHNlIGlmIChjYW5Vc2VQb3N0TWVzc2FnZSgpKSB7XG4gICAgICAgIC8vIEZvciBub24tSUUxMCBtb2Rlcm4gYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFBvc3RNZXNzYWdlSW1wbGVtZW50YXRpb24oKTtcblxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLk1lc3NhZ2VDaGFubmVsKSB7XG4gICAgICAgIC8vIEZvciB3ZWIgd29ya2Vycywgd2hlcmUgc3VwcG9ydGVkXG4gICAgICAgIGluc3RhbGxNZXNzYWdlQ2hhbm5lbEltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2UgaWYgKGRvYyAmJiBcIm9ucmVhZHlzdGF0ZWNoYW5nZVwiIGluIGRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKSB7XG4gICAgICAgIC8vIEZvciBJRSA24oCTOFxuICAgICAgICBpbnN0YWxsUmVhZHlTdGF0ZUNoYW5nZUltcGxlbWVudGF0aW9uKCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBGb3Igb2xkZXIgYnJvd3NlcnNcbiAgICAgICAgaW5zdGFsbFNldFRpbWVvdXRJbXBsZW1lbnRhdGlvbigpO1xuICAgIH1cblxuICAgIGF0dGFjaFRvLnNldEltbWVkaWF0ZSA9IHNldEltbWVkaWF0ZTtcbiAgICBhdHRhY2hUby5jbGVhckltbWVkaWF0ZSA9IGNsZWFySW1tZWRpYXRlO1xufSh0eXBlb2Ygc2VsZiA9PT0gXCJ1bmRlZmluZWRcIiA/IHR5cGVvZiBnbG9iYWwgPT09IFwidW5kZWZpbmVkXCIgPyB0aGlzIDogZ2xvYmFsIDogc2VsZikpO1xuIiwiaW1wb3J0ICogYXMgdGZjIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5cbmltcG9ydCBwNSBmcm9tICcuL2luZGV4JztcblxuXG4vKipcbiAqIEEgY2xhc3MgdG8gZGVzY3JpYmUgYSB0ZW5zb3IsIGEgZ2VuZXJhbGl6YXRpb24gb2YgdmVjdG9ycyBhbmQgbWF0cmljZXMuXG4gKiBUZW5zb3JzIGNhbiBiZSB0aG91Z2h0IG9mIGFzIChwb3NzaWJseSkgbXVsdGlkaW1lbnNpb25hbCBhcnJheXMgdGhhdCBzdXBwb3J0XG4gKiBtYW55IHVzZWZ1bCBvcGVyYXRpb25zLiBUaGV5IGFyZSBhcHBsaWVkIHRocm91Z2hvdXQgbWF0aGVtYXRpY3MsIHBoeXNpY3MsXG4gKiBlbmdpbmVlcmluZywgYW5kIGNvbXB1dGVyIHNjaWVuY2UuXG4gKi9cbmNsYXNzIFRlbnNvciB7XG4gIHB1YmxpYyB0ZW5zb3I6IHRmYy5WYXJpYWJsZTtcblxuICBjb25zdHJ1Y3RvcihvYmo6IGFueSkge1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGlmICh0eXBlb2Ygb2JqID09PSAnbnVtYmVyJykge1xuICAgICAgICB0aGlzLnRlbnNvciA9IHRmYy52YXJpYWJsZSh0ZmMuc2NhbGFyKG9iaikpO1xuICAgICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICB0aGlzLnRlbnNvciA9IHRmYy52YXJpYWJsZSh0ZmMudGVuc29yKG9iaikpO1xuICAgICAgfSBlbHNlIGlmIChvYmogaW5zdGFuY2VvZiBwNS5WZWN0b3IpIHtcbiAgICAgICAgdGhpcy50ZW5zb3IgPSB0ZmMudmFyaWFibGUodGZjLnRlbnNvcihvYmouYXJyYXkoKSkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUZW5zb3JzIG11c3QgYmUgY3JlYXRlZCBmcm9tIE51bWJlcnMsIEFycmF5cywgb3IgcDUuVmVjdG9ycy4nKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVjayBhZ2FpbnN0IGEgVGVuc29yLlxuICAgKiBcbiAgICogQHBhcmFtIGIgdGhlIHRlbnNvciB0byBiZSBjb21wYXJlZFxuICAgKi9cbiAgZXF1YWxzKGI6IFRlbnNvcik6IGJvb2xlYW4ge1xuICAgIGxldCByZXN1bHQ6IGJvb2xlYW4gPSBmYWxzZTtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCBjaGVjazogdGZjLlRlbnNvciA9IHRmYy5hbGwodGhpcy50ZW5zb3IuZXF1YWwoYi50ZW5zb3IpKTtcbiAgICAgIGlmIChjaGVjay5hcnJheVN5bmMoKSA9PT0gMSkge1xuICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlIGFueSBjaGFuZ2VzIGluIHRoZSB0ZW5zb3IncyByYW5rIGR1ZSB0byBhbiBvcGVyYXRpb24uXG4gICAqIE5vdGU6IE9ubHkgY2FsbCBtZXRob2QgZnJvbSB3aXRoaW4gdGZjLnRpZHkoKSB0byBhdm9pZCBtZW1vcnkgbGVha3MuXG4gICAqIFxuICAgKiBAcGFyYW0gcmVzdWx0IHRoZSB0ZW5zb3IgcmVzdWx0aW5nIGZyb20gYW4gb3BlcmF0aW9uXG4gICAqL1xuICBwcml2YXRlIGhhbmRsZVJhbmsocmVzdWx0OiB0ZmMuVGVuc29yKSB7XG4gICAgaWYgKHRoaXMudGVuc29yLnJhbmsgIT09IHJlc3VsdC5yYW5rKSB7XG4gICAgICB0aGlzLnRlbnNvci5kaXNwb3NlKCk7XG4gICAgICB0aGlzLnRlbnNvciA9IHRmYy52YXJpYWJsZShyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnRlbnNvci5hc3NpZ24ocmVzdWx0KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkcyB0d28gdGVuc29ycy5cbiAgICogXG4gICAqIEBwYXJhbSBiIHRoZSB0ZW5zb3IgdG8gYmUgYWRkZWRcbiAgICovXG4gIGFkZChiOiBUZW5zb3IpIHtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5hZGQoYi50ZW5zb3IpO1xuICAgICAgdGhpcy5oYW5kbGVSYW5rKHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3VidHJhY3RzIHR3byB0ZW5zb3JzLlxuICAgKiBcbiAgICogQHBhcmFtIGIgdGhlIHRlbnNvciB0byBiZSBzdWJ0cmFjdGVkXG4gICAqL1xuICBzdWIoYjogVGVuc29yKSB7XG4gICAgdGZjLnRpZHkoKCkgPT4ge1xuICAgICAgY29uc3QgcmVzdWx0OiB0ZmMuVGVuc29yID0gdGhpcy50ZW5zb3Iuc3ViKGIudGVuc29yKTtcbiAgICAgIHRoaXMuaGFuZGxlUmFuayhyZXN1bHQpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIE11bHRpcGxpZXMgdHdvIHRlbnNvcnMuXG4gICAqIFxuICAgKiBAcGFyYW0gYiB0aGUgdGVuc29yIHRvIGJlIG11bHRpcGxpZWRcbiAgICovXG4gIG11bChiOiBUZW5zb3IpIHtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBjb25zdCByZXN1bHQ6IHRmYy5UZW5zb3IgPSB0aGlzLnRlbnNvci5tdWwoYi50ZW5zb3IpO1xuICAgICAgdGhpcy5oYW5kbGVSYW5rKHJlc3VsdCk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogRGl2aWRlcyB0d28gdGVuc29ycy5cbiAgICogXG4gICAqIEBwYXJhbSBiIHRoZSB0ZW5zb3IgdG8gYmUgZGl2aWRlZCBieVxuICAgKi9cbiAgZGl2KGI6IFRlbnNvcikge1xuICAgIHRmYy50aWR5KCgpID0+IHtcbiAgICAgIGNvbnN0IHJlc3VsdDogdGZjLlRlbnNvciA9IHRoaXMudGVuc29yLmRpdihiLnRlbnNvcik7XG4gICAgICB0aGlzLmhhbmRsZVJhbmsocmVzdWx0KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGVzIHRoZSBkb3QgcHJvZHVjdCBvZiB0d28gbWF0cmljZXMgYW5kL29yIHZlY3RvcnMuXG4gICAqIE5vdGU6IE9ubHkgd29ya3Mgd2hlbiBib3RoIG9wZXJhbmRzIGFyZSByYW5rIDEgb3IgMi5cbiAgICogXG4gICAqIEBwYXJhbSBiIHRoZSBtYXRyaXggb3IgdmVjdG9yIHRvIGJlIGRvdHRlZFxuICAgKiBAcGFyYW0gZGltIChvcHRpb25hbCkgdGhlIG51bWJlciBvZiBkaW1lbnNpb25zIGluIGEgcDUuVmVjdG9yXG4gICAqL1xuICBkb3QoYjogYW55LCBkaW0/OiBudW1iZXIpIHtcbiAgICB0ZmMudGlkeSgoKSA9PiB7XG4gICAgICBsZXQgcmVzdWx0OiB0ZmMuVGVuc29yO1xuICAgICAgaWYgKGIgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy50ZW5zb3IuZG90KGIudGVuc29yKTtcbiAgICAgIH0gZWxzZSBpZiAoYiBpbnN0YW5jZW9mIHA1LlZlY3Rvcikge1xuICAgICAgICBsZXQgYl86IG51bWJlcltdO1xuICAgICAgICBsZXQgdDI6IFRlbnNvcjtcbiAgICAgICAgaWYgKGRpbSA9PT0gMikge1xuICAgICAgICAgIGJfID0gYi5hcnJheSgpLnNsaWNlKDAsIDIpO1xuICAgICAgICB9IGVsc2UgaWYgKGRpbSA9PT0gMykge1xuICAgICAgICAgIGJfID0gYi5hcnJheSgpLnNsaWNlKDAsIDMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcigncDUuVmVjdG9ycyBtdXN0IGJlIDIgb3IgMy1kaW1lbnNpb25hbC4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHQyID0gY3JlYXRlVGVuc29yKGJfKTtcbiAgICAgICAgcmVzdWx0ID0gdGhpcy50ZW5zb3IuZG90KHQyLnRlbnNvcik7XG4gICAgICAgIHQyLnRlbnNvci5kaXNwb3NlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RlbnNvcnMgbXVzdCBiZSBkb3R0ZWQgd2l0aCBUZW5zb3JzIG9yIHA1LlZlY3RvcnMuJyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuaGFuZGxlUmFuayhyZXN1bHQpO1xuICAgIH0pO1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVGVuc29yICh0aGUgZGF0YXR5cGUgZm9yIHN0b3JpbmcgdGVuc29ycykuXG4gKlxuICogQHBhcmFtIG9iaiB0aGUgcmVmZXJlbmNlIE51bWJlciwgQXJyYXksIG9yIHA1LlZlY3RvclxuICovXG5jb25zdCBjcmVhdGVUZW5zb3IgPSBmdW5jdGlvbiBjcmVhdGVUZW5zb3JPYmplY3Qob2JqOiBhbnkpOiBUZW5zb3Ige1xuICByZXR1cm4gbmV3IFRlbnNvcihvYmopO1xufTtcblxuZXhwb3J0IHtcbiAgVGVuc29yLFxuICBjcmVhdGVUZW5zb3IsXG59O1xuIiwiaW1wb3J0ICogYXMgdGZjIGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5cbmltcG9ydCB7IFRlbnNvciwgY3JlYXRlVGVuc29yIH0gZnJvbSAnLi90ZW5zb3InO1xuXG5cbmRlY2xhcmUgdmFyIHA1OiBhbnk7XG5wNS5wcm90b3R5cGUudGZjID0gdGZjO1xucDUucHJvdG90eXBlLlRlbnNvciA9IFRlbnNvcjtcbnA1LnByb3RvdHlwZS5jcmVhdGVUZW5zb3IgPSBjcmVhdGVUZW5zb3I7XG5cbmV4cG9ydCBkZWZhdWx0IHA1O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==